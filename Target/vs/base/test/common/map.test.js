import t from"assert";import{BidirectionalMap as o,LinkedMap as u,LRUCache as p,mapsStrictEqualIgnoreOrder as E,MRUCache as m,ResourceMap as g,SetMap as k,Touch as l}from"../../common/map.js";import{extUriIgnorePathCase as w}from"../../common/resources.js";import{URI as c}from"../../common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"./utils.js";suite("Map",()=>{f(),test("LinkedMap - Simple",()=>{const e=new u;e.set("ak","av"),e.set("bk","bv"),t.deepStrictEqual([...e.keys()],["ak","bk"]),t.deepStrictEqual([...e.values()],["av","bv"]),t.strictEqual(e.first,"av"),t.strictEqual(e.last,"bv")}),test("LinkedMap - Touch Old one",()=>{const e=new u;e.set("ak","av"),e.set("ak","av",l.AsOld),t.deepStrictEqual([...e.keys()],["ak"]),t.deepStrictEqual([...e.values()],["av"])}),test("LinkedMap - Touch New one",()=>{const e=new u;e.set("ak","av"),e.set("ak","av",l.AsNew),t.deepStrictEqual([...e.keys()],["ak"]),t.deepStrictEqual([...e.values()],["av"])}),test("LinkedMap - Touch Old two",()=>{const e=new u;e.set("ak","av"),e.set("bk","bv"),e.set("bk","bv",l.AsOld),t.deepStrictEqual([...e.keys()],["bk","ak"]),t.deepStrictEqual([...e.values()],["bv","av"])}),test("LinkedMap - Touch New two",()=>{const e=new u;e.set("ak","av"),e.set("bk","bv"),e.set("ak","av",l.AsNew),t.deepStrictEqual([...e.keys()],["bk","ak"]),t.deepStrictEqual([...e.values()],["bv","av"])}),test("LinkedMap - Touch Old from middle",()=>{const e=new u;e.set("ak","av"),e.set("bk","bv"),e.set("ck","cv"),e.set("bk","bv",l.AsOld),t.deepStrictEqual([...e.keys()],["bk","ak","ck"]),t.deepStrictEqual([...e.values()],["bv","av","cv"])}),test("LinkedMap - Touch New from middle",()=>{const e=new u;e.set("ak","av"),e.set("bk","bv"),e.set("ck","cv"),e.set("bk","bv",l.AsNew),t.deepStrictEqual([...e.keys()],["ak","ck","bk"]),t.deepStrictEqual([...e.values()],["av","cv","bv"])}),test("LinkedMap - basics",function(){const e=new u;t.strictEqual(e.size,0),e.set("1",1),e.set("2","2"),e.set("3",!0);const r=Object.create(null);e.set("4",r);const s=Date.now();e.set("5",s),t.strictEqual(e.size,5),t.strictEqual(e.get("1"),1),t.strictEqual(e.get("2"),"2"),t.strictEqual(e.get("3"),!0),t.strictEqual(e.get("4"),r),t.strictEqual(e.get("5"),s),t.ok(!e.get("6")),e.delete("6"),t.strictEqual(e.size,5),t.strictEqual(e.delete("1"),!0),t.strictEqual(e.delete("2"),!0),t.strictEqual(e.delete("3"),!0),t.strictEqual(e.delete("4"),!0),t.strictEqual(e.delete("5"),!0),t.strictEqual(e.size,0),t.ok(!e.get("5")),t.ok(!e.get("4")),t.ok(!e.get("3")),t.ok(!e.get("2")),t.ok(!e.get("1")),e.set("1",1),e.set("2","2"),e.set("3",!0),t.ok(e.has("1")),t.strictEqual(e.get("1"),1),t.strictEqual(e.get("2"),"2"),t.strictEqual(e.get("3"),!0),e.clear(),t.strictEqual(e.size,0),t.ok(!e.get("1")),t.ok(!e.get("2")),t.ok(!e.get("3")),t.ok(!e.has("1"))}),test("LinkedMap - Iterators",()=>{const e=new u;e.set(1,1),e.set(2,2),e.set(3,3);for(const r of e.keys())t.ok(r);for(const r of e.values())t.ok(r);for(const r of e.entries())t.ok(r);{const r=e.keys(),s=e.values(),a=e.entries();e.get(1),r.next(),s.next(),a.next()}{const r=e.keys(),s=e.values(),a=e.entries();e.get(1,l.AsNew);let i=0;try{r.next()}catch{i++}try{s.next()}catch{i++}try{a.next()}catch{i++}t.strictEqual(i,3)}}),test("LinkedMap - LRU Cache simple",()=>{const e=new p(5);[1,2,3,4,5].forEach(s=>e.set(s,s)),t.strictEqual(e.size,5),e.set(6,6),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[2,3,4,5,6]),e.set(7,7),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[3,4,5,6,7]);const r=[];[3,4,5,6,7].forEach(s=>r.push(e.get(s))),t.deepStrictEqual(r,[3,4,5,6,7])}),test("LinkedMap - LRU Cache get",()=>{const e=new p(5);[1,2,3,4,5].forEach(s=>e.set(s,s)),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[1,2,3,4,5]),e.get(3),t.deepStrictEqual([...e.keys()],[1,2,4,5,3]),e.peek(4),t.deepStrictEqual([...e.keys()],[1,2,4,5,3]);const r=[];[1,2,3,4,5].forEach(s=>r.push(e.get(s))),t.deepStrictEqual(r,[1,2,3,4,5])}),test("LinkedMap - LRU Cache limit",()=>{const e=new p(10);for(let s=1;s<=10;s++)e.set(s,s);t.strictEqual(e.size,10),e.limit=5,t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[6,7,8,9,10]),e.limit=20,t.strictEqual(e.size,5);for(let s=11;s<=20;s++)e.set(s,s);t.deepStrictEqual(e.size,15);const r=[];for(let s=6;s<=20;s++)r.push(e.get(s)),t.strictEqual(e.get(s),s);t.deepStrictEqual([...e.values()],r)}),test("LinkedMap - LRU Cache limit with ratio",()=>{const e=new p(10,.5);for(let s=1;s<=10;s++)e.set(s,s);t.strictEqual(e.size,10),e.set(11,11),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[7,8,9,10,11]);const r=[];[...e.keys()].forEach(s=>r.push(e.get(s))),t.deepStrictEqual(r,[7,8,9,10,11]),t.deepStrictEqual([...e.values()],r)}),test("LinkedMap - MRU Cache simple",()=>{const e=new m(5);[1,2,3,4,5].forEach(s=>e.set(s,s)),t.strictEqual(e.size,5),e.set(6,6),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[1,2,3,4,6]),e.set(7,7),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[1,2,3,4,7]);const r=[];[1,2,3,4,7].forEach(s=>r.push(e.get(s))),t.deepStrictEqual(r,[1,2,3,4,7])}),test("LinkedMap - MRU Cache get",()=>{const e=new m(5);[1,2,3,4,5].forEach(s=>e.set(s,s)),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[1,2,3,4,5]),e.get(3),t.deepStrictEqual([...e.keys()],[1,2,4,5,3]),e.peek(4),t.deepStrictEqual([...e.keys()],[1,2,4,5,3]);const r=[];[1,2,3,4,5].forEach(s=>r.push(e.get(s))),t.deepStrictEqual(r,[1,2,3,4,5])}),test("LinkedMap - MRU Cache limit with ratio",()=>{const e=new m(10,.5);for(let s=1;s<=10;s++)e.set(s,s);t.strictEqual(e.size,10),e.set(11,11),t.strictEqual(e.size,5),t.deepStrictEqual([...e.keys()],[1,2,3,4,11]);const r=[];[...e.keys()].forEach(s=>r.push(e.get(s))),t.deepStrictEqual(r,[1,2,3,4,11]),t.deepStrictEqual([...e.values()],r)}),test("LinkedMap - toJSON / fromJSON",()=>{let e=new u;e.set("ak","av"),e.set("bk","bv"),e.set("ck","cv");const r=e.toJSON();e=new u,e.fromJSON(r);let s=0;e.forEach((a,i)=>{s===0?(t.strictEqual(i,"ak"),t.strictEqual(a,"av")):s===1?(t.strictEqual(i,"bk"),t.strictEqual(a,"bv")):s===2&&(t.strictEqual(i,"ck"),t.strictEqual(a,"cv")),s++})}),test("LinkedMap - delete Head and Tail",function(){const e=new u;t.strictEqual(e.size,0),e.set("1",1),t.strictEqual(e.size,1),e.delete("1"),t.strictEqual(e.get("1"),void 0),t.strictEqual(e.size,0),t.strictEqual([...e.keys()].length,0)}),test("LinkedMap - delete Head",function(){const e=new u;t.strictEqual(e.size,0),e.set("1",1),e.set("2",2),t.strictEqual(e.size,2),e.delete("1"),t.strictEqual(e.get("2"),2),t.strictEqual(e.size,1),t.strictEqual([...e.keys()].length,1),t.strictEqual([...e.keys()][0],"2")}),test("LinkedMap - delete Tail",function(){const e=new u;t.strictEqual(e.size,0),e.set("1",1),e.set("2",2),t.strictEqual(e.size,2),e.delete("2"),t.strictEqual(e.get("1"),1),t.strictEqual(e.size,1),t.strictEqual([...e.keys()].length,1),t.strictEqual([...e.keys()][0],"1")}),test("ResourceMap - basics",function(){const e=new g,r=c.parse("some://1"),s=c.parse("some://2"),a=c.parse("some://3"),i=c.parse("some://4"),n=c.parse("some://5"),d=c.parse("some://6");t.strictEqual(e.size,0);const y=e.set(r,1);t.ok(y===e),e.set(s,"2"),e.set(a,!0);const q=[...e.values()];t.strictEqual(q[0],1),t.strictEqual(q[1],"2"),t.strictEqual(q[2],!0);let v=0;e.forEach((S,M,z)=>{t.strictEqual(S,q[v++]),t.ok(c.isUri(M)),t.ok(e===z)});const h=Object.create(null);e.set(i,h);const b=Date.now();e.set(n,b),t.strictEqual(e.size,5),t.strictEqual(e.get(r),1),t.strictEqual(e.get(s),"2"),t.strictEqual(e.get(a),!0),t.strictEqual(e.get(i),h),t.strictEqual(e.get(n),b),t.ok(!e.get(d)),e.delete(d),t.strictEqual(e.size,5),t.ok(e.delete(r)),t.ok(e.delete(s)),t.ok(e.delete(a)),t.ok(e.delete(i)),t.ok(e.delete(n)),t.strictEqual(e.size,0),t.ok(!e.get(n)),t.ok(!e.get(i)),t.ok(!e.get(a)),t.ok(!e.get(s)),t.ok(!e.get(r)),e.set(r,1),e.set(s,"2"),e.set(a,!0),t.ok(e.has(r)),t.strictEqual(e.get(r),1),t.strictEqual(e.get(s),"2"),t.strictEqual(e.get(a),!0),e.clear(),t.strictEqual(e.size,0),t.ok(!e.get(r)),t.ok(!e.get(s)),t.ok(!e.get(a)),t.ok(!e.has(r)),e.set(r,!1),e.set(s,0),t.ok(e.has(r)),t.ok(e.has(s))}),test("ResourceMap - files (do NOT ignorecase)",function(){const e=new g,r=c.parse("file://some/filea"),s=c.parse("some://some/other/fileb"),a=c.parse("file://SOME/FILEA");e.set(r,"true"),t.strictEqual(e.get(r),"true"),t.ok(!e.get(a)),t.ok(!e.get(s)),e.set(a,"false"),t.strictEqual(e.get(a),"false"),t.strictEqual(e.get(r),"true");const i=c.file("c:\\test with %25\\c#code"),n=c.file("\\\\sh\xE4res\\path\\c#\\plugin.json");e.set(i,"true"),e.set(n,"true"),t.strictEqual(e.get(i),"true"),t.strictEqual(e.get(n),"true")}),test("ResourceMap - files (ignorecase)",function(){const e=new g(d=>w.getComparisonKey(d)),r=c.parse("file://some/filea"),s=c.parse("some://some/other/fileb"),a=c.parse("file://SOME/FILEA");e.set(r,"true"),t.strictEqual(e.get(r),"true"),t.strictEqual(e.get(a),"true"),t.ok(!e.get(s)),e.set(a,"false"),t.strictEqual(e.get(a),"false"),t.strictEqual(e.get(r),"false");const i=c.file("c:\\test with %25\\c#code"),n=c.file("\\\\sh\xE4res\\path\\c#\\plugin.json");e.set(i,"true"),e.set(n,"true"),t.strictEqual(e.get(i),"true"),t.strictEqual(e.get(n),"true")}),test("ResourceMap - files (ignorecase, BUT preservecase)",function(){const e=new g(a=>w.getComparisonKey(a)),r=c.parse("file://some/filea"),s=c.parse("file://SOME/FILEA");e.set(r,1),t.strictEqual(e.get(r),1),t.strictEqual(e.get(s),1),t.deepStrictEqual(Array.from(e.keys()).map(String),[r].map(String)),t.deepStrictEqual(Array.from(e),[[r,1]]),e.set(s,1),t.strictEqual(e.get(r),1),t.strictEqual(e.get(s),1),t.deepStrictEqual(Array.from(e.keys()).map(String),[s].map(String)),t.deepStrictEqual(Array.from(e),[[s,1]])}),test("mapsStrictEqualIgnoreOrder",()=>{const e=new Map,r=new Map;t.strictEqual(E(e,r),!0),e.set("foo","bar"),t.strictEqual(E(e,r),!1),r.set("foo","bar"),t.strictEqual(E(e,r),!0),r.set("bar","foo"),t.strictEqual(E(e,r),!1),e.set("bar","foo"),t.strictEqual(E(e,r),!0)})}),suite("BidirectionalMap",()=>{f(),test("should set and get values correctly",()=>{const e=new o;e.set("one",1),e.set("two",2),e.set("three",3),t.strictEqual(e.get("one"),1),t.strictEqual(e.get("two"),2),t.strictEqual(e.get("three"),3)}),test("should get keys by value correctly",()=>{const e=new o;e.set("one",1),e.set("two",2),e.set("three",3),t.strictEqual(e.getKey(1),"one"),t.strictEqual(e.getKey(2),"two"),t.strictEqual(e.getKey(3),"three")}),test("should delete values correctly",()=>{const e=new o;e.set("one",1),e.set("two",2),e.set("three",3),t.strictEqual(e.delete("one"),!0),t.strictEqual(e.get("one"),void 0),t.strictEqual(e.getKey(1),void 0),t.strictEqual(e.delete("two"),!0),t.strictEqual(e.get("two"),void 0),t.strictEqual(e.getKey(2),void 0),t.strictEqual(e.delete("three"),!0),t.strictEqual(e.get("three"),void 0),t.strictEqual(e.getKey(3),void 0)}),test("should handle non-existent keys correctly",()=>{const e=new o;e.set("one",1),e.set("two",2),e.set("three",3),t.strictEqual(e.get("four"),void 0),t.strictEqual(e.getKey(4),void 0),t.strictEqual(e.delete("four"),!1)}),test("should handle forEach correctly",()=>{const e=new o;e.set("one",1),e.set("two",2),e.set("three",3);const r=[],s=[];e.forEach((a,i)=>{r.push(i),s.push(a)}),t.deepStrictEqual(r,["one","two","three"]),t.deepStrictEqual(s,[1,2,3])}),test("should handle clear correctly",()=>{const e=new o;e.set("one",1),e.set("two",2),e.set("three",3),e.clear(),t.strictEqual(e.get("one"),void 0),t.strictEqual(e.get("two"),void 0),t.strictEqual(e.get("three"),void 0),t.strictEqual(e.getKey(1),void 0),t.strictEqual(e.getKey(2),void 0),t.strictEqual(e.getKey(3),void 0)})}),suite("SetMap",()=>{f(),test("add and get",()=>{const e=new k;e.add("a",1),e.add("a",2),e.add("b",3),t.deepStrictEqual([...e.get("a")],[1,2]),t.deepStrictEqual([...e.get("b")],[3])}),test("delete",()=>{const e=new k;e.add("a",1),e.add("a",2),e.add("b",3),e.delete("a",1),t.deepStrictEqual([...e.get("a")],[2]),e.delete("a",2),t.deepStrictEqual([...e.get("a")],[])}),test("forEach",()=>{const e=new k;e.add("a",1),e.add("a",2),e.add("b",3);let r=0;e.forEach("a",s=>r+=s),t.strictEqual(r,3)}),test("get empty set",()=>{const e=new k;t.deepStrictEqual([...e.get("a")],[])})});
