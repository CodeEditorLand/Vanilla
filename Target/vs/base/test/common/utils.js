import{DisposableStore as c,DisposableTracker as i,setDisposableTracker as s}from"../../common/lifecycle.js";import{join as n}from"../../common/path.js";import{isWindows as p}from"../../common/platform.js";import{URI as a}from"../../common/uri.js";function k(e){return p?a.file(n("C:\\",btoa(this.test.fullTitle()),e)):a.file(n("/",btoa(this.test.fullTitle()),e))}function m(e,t,o){for(let r=0;r<e;r++)suite(`${t} (iteration ${r})`,o)}function w(e,t,o){for(let r=0;r<e;r++)test(`${t} (iteration ${r})`,o)}async function T(e,t="Missing expected exception"){try{await e()}catch{return}throw t instanceof Error?t:new Error(t)}function D(){let e,t;return setup(()=>{t=new c,e=new i,s(e)}),teardown(function(){if(t.dispose(),s(null),this.currentTest?.state!=="failed"){const r=e.computeLeakingDisposables();if(r)throw console.error(r.details),new Error(`There are ${r.leaks.length} undisposed disposables!${r.details}`)}}),{add(r){return t.add(r)}}}function x(e,t=!0){const o=new i;s(o),e(),s(null),l(o,t)}async function y(e){const t=new i;s(t),await e(),s(null),l(t)}function l(e,t=!0){const o=e.computeLeakingDisposables();if(o)throw t&&console.error(o.details),new Error(`There are ${o.leaks.length} undisposed disposables!${o.details}`)}export{T as assertThrowsAsync,D as ensureNoDisposablesAreLeakedInTestSuite,m as suiteRepeat,w as testRepeat,x as throwIfDisposablesAreLeaked,y as throwIfDisposablesAreLeakedAsync,k as toResource};
