import e from"assert";import*as a from"../../common/arrays.js";import*as l from"../../common/arraysFind.js";import{ensureNoDisposablesAreLeakedInTestSuite as q}from"./utils.js";suite("Arrays",()=>{q(),test("removeFastWithoutKeepingOrder",()=>{const t=[1,4,5,7,55,59,60,61,64,69];a.removeFastWithoutKeepingOrder(t,1),e.deepStrictEqual(t,[1,69,5,7,55,59,60,61,64]),a.removeFastWithoutKeepingOrder(t,0),e.deepStrictEqual(t,[64,69,5,7,55,59,60,61]),a.removeFastWithoutKeepingOrder(t,7),e.deepStrictEqual(t,[64,69,5,7,55,59,60])}),test("findFirst",()=>{const t=[1,4,5,7,55,59,60,61,64,69];let r=l.findFirstIdxMonotonousOrArrLen(t,i=>i>=0);e.strictEqual(t[r],1),r=l.findFirstIdxMonotonousOrArrLen(t,i=>i>1),e.strictEqual(t[r],4),r=l.findFirstIdxMonotonousOrArrLen(t,i=>i>=8),e.strictEqual(t[r],55),r=l.findFirstIdxMonotonousOrArrLen(t,i=>i>=61),e.strictEqual(t[r],61),r=l.findFirstIdxMonotonousOrArrLen(t,i=>i>=69),e.strictEqual(t[r],69),r=l.findFirstIdxMonotonousOrArrLen(t,i=>i>=70),e.strictEqual(r,t.length),r=l.findFirstIdxMonotonousOrArrLen([],i=>i>=0),e.strictEqual(t[r],1)}),test("quickSelect",()=>{function t(r,i,u=Math.floor(i.length/2)){const s=(n,E)=>n-E,c=a.quickSelect(u,i,s);e.strictEqual(c,r);const o=i.slice().sort(s)[u];e.strictEqual(o,r)}t(5,[9,1,0,2,3,4,6,8,7,10,5]),t(8,[9,1,0,2,3,4,6,8,7,10,5],8),t(8,[13,4,8]),t(4,[13,4,8,4,4]),t(13,[13,4,8],2)}),test("sortedDiff",()=>{function t(i,u){return i-u}let r=a.sortedDiff([1,2,4],[],t);e.deepStrictEqual(r,[{start:0,deleteCount:3,toInsert:[]}]),r=a.sortedDiff([],[1,2,4],t),e.deepStrictEqual(r,[{start:0,deleteCount:0,toInsert:[1,2,4]}]),r=a.sortedDiff([1,2,4],[1,2,4],t),e.deepStrictEqual(r,[]),r=a.sortedDiff([1,2,4],[2,3,4,5],t),e.deepStrictEqual(r,[{start:0,deleteCount:1,toInsert:[]},{start:2,deleteCount:0,toInsert:[3]},{start:3,deleteCount:0,toInsert:[5]}]),r=a.sortedDiff([2,3,4,5],[1,2,4],t),e.deepStrictEqual(r,[{start:0,deleteCount:0,toInsert:[1]},{start:1,deleteCount:1,toInsert:[]},{start:3,deleteCount:1,toInsert:[]}]),r=a.sortedDiff([1,3,5,7],[5,9,11],t),e.deepStrictEqual(r,[{start:0,deleteCount:2,toInsert:[]},{start:3,deleteCount:1,toInsert:[9,11]}]),r=a.sortedDiff([1,3,7],[5,9,11],t),e.deepStrictEqual(r,[{start:0,deleteCount:3,toInsert:[5,9,11]}])}),test("delta sorted arrays",function(){function t(i,u){return i-u}let r=a.delta([1,2,4],[],t);e.deepStrictEqual(r.removed,[1,2,4]),e.deepStrictEqual(r.added,[]),r=a.delta([],[1,2,4],t),e.deepStrictEqual(r.removed,[]),e.deepStrictEqual(r.added,[1,2,4]),r=a.delta([1,2,4],[1,2,4],t),e.deepStrictEqual(r.removed,[]),e.deepStrictEqual(r.added,[]),r=a.delta([1,2,4],[2,3,4,5],t),e.deepStrictEqual(r.removed,[1]),e.deepStrictEqual(r.added,[3,5]),r=a.delta([2,3,4,5],[1,2,4],t),e.deepStrictEqual(r.removed,[3,5]),e.deepStrictEqual(r.added,[1]),r=a.delta([1,3,5,7],[5,9,11],t),e.deepStrictEqual(r.removed,[1,3,7]),e.deepStrictEqual(r.added,[9,11]),r=a.delta([1,3,7],[5,9,11],t),e.deepStrictEqual(r.removed,[1,3,7]),e.deepStrictEqual(r.added,[5,9,11])}),test("binarySearch",()=>{function t(i,u){return i-u}const r=[1,4,5,7,55,59,60,61,64,69];e.strictEqual(a.binarySearch(r,1,t),0),e.strictEqual(a.binarySearch(r,5,t),2),e.strictEqual(a.binarySearch(r,0,t),-1),e.strictEqual(a.binarySearch(r,6,t),-4),e.strictEqual(a.binarySearch(r,70,t),-11)}),test("binarySearch2",()=>{function t(i){return u=>r[u]-i}const r=[1,4,5,7,55,59,60,61,64,69];e.strictEqual(a.binarySearch2(10,t(1)),0),e.strictEqual(a.binarySearch2(10,t(5)),2),e.strictEqual(a.binarySearch2(10,t(0)),-1),e.strictEqual(a.binarySearch2(10,t(6)),-4),e.strictEqual(a.binarySearch2(10,t(70)),-11),e.strictEqual(a.binarySearch2(2,t(5)),-3)}),test("distinct",()=>{function t(r){return r}e.deepStrictEqual(a.distinct(["32","4","5"],t),["32","4","5"]),e.deepStrictEqual(a.distinct(["32","4","5","4"],t),["32","4","5"]),e.deepStrictEqual(a.distinct(["32","constructor","5","1"],t),["32","constructor","5","1"]),e.deepStrictEqual(a.distinct(["32","constructor","proto","proto","constructor"],t),["32","constructor","proto"]),e.deepStrictEqual(a.distinct(["32","4","5","32","4","5","32","4","5","5"],t),["32","4","5"])}),test("top",()=>{const t=(r,i)=>(e.strictEqual(typeof r,"number","typeof a"),e.strictEqual(typeof i,"number","typeof b"),r-i);e.deepStrictEqual(a.top([],t,1),[]),e.deepStrictEqual(a.top([1],t,0),[]),e.deepStrictEqual(a.top([1,2],t,1),[1]),e.deepStrictEqual(a.top([2,1],t,1),[1]),e.deepStrictEqual(a.top([1,3,2],t,2),[1,2]),e.deepStrictEqual(a.top([3,2,1],t,3),[1,2,3]),e.deepStrictEqual(a.top([4,6,2,7,8,3,5,1],t,3),[1,2,3])}),test("topAsync",async()=>{const t=(r,i)=>(e.strictEqual(typeof r,"number","typeof a"),e.strictEqual(typeof i,"number","typeof b"),r-i);return await d(t,1),d(t,2)});async function d(t,r){{const i=await a.topAsync([],t,1,r);e.deepStrictEqual(i,[])}{const i=await a.topAsync([1],t,0,r);e.deepStrictEqual(i,[])}{const i=await a.topAsync([1,2],t,1,r);e.deepStrictEqual(i,[1])}{const i=await a.topAsync([2,1],t,1,r);e.deepStrictEqual(i,[1])}{const i=await a.topAsync([1,3,2],t,2,r);e.deepStrictEqual(i,[1,2])}{const i=await a.topAsync([3,2,1],t,3,r);e.deepStrictEqual(i,[1,2,3])}{const i=await a.topAsync([4,6,2,7,8,3,5,1],t,3,r);e.deepStrictEqual(i,[1,2,3])}}test("coalesce",()=>{const t=a.coalesce([null,1,null,2,3]);e.strictEqual(t.length,3),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],3),a.coalesce([null,1,null,void 0,void 0,2,3]),e.strictEqual(t.length,3),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],3);let r=[];r[10]=1,r[20]=2,r[30]=3,r=a.coalesce(r),e.strictEqual(r.length,3),e.strictEqual(r[0],1),e.strictEqual(r[1],2),e.strictEqual(r[2],3);let i=[];i[0]=1,i[1]=1,i[17]=1,i[1e3]=1,i[1001]=1,e.strictEqual(i.length,1002),i=a.coalesce(i),e.strictEqual(i.length,5)}),test("coalesce - inplace",function(){let t=[null,1,null,2,3];a.coalesceInPlace(t),e.strictEqual(t.length,3),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],3),t=[null,1,null,void 0,void 0,2,3],a.coalesceInPlace(t),e.strictEqual(t.length,3),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],3);const r=[];r[10]=1,r[20]=2,r[30]=3,a.coalesceInPlace(r),e.strictEqual(r.length,3),e.strictEqual(r[0],1),e.strictEqual(r[1],2),e.strictEqual(r[2],3);const i=[];i[0]=1,i[1]=1,i[17]=1,i[1e3]=1,i[1001]=1,e.strictEqual(i.length,1002),a.coalesceInPlace(i),e.strictEqual(i.length,5)}),test("insert, remove",function(){const t=[],r=a.insert(t,"foo");e.strictEqual(t[0],"foo"),r(),e.strictEqual(t.length,0)}),test("splice",function(){let t=[1,2,3,4,5];a.splice(t,-6,3,[6,7]),e.strictEqual(t.length,4),e.strictEqual(t[0],6),e.strictEqual(t[1],7),e.strictEqual(t[2],4),e.strictEqual(t[3],5),t=[1,2,3,4,5],a.splice(t,-3,3,[6,7]),e.strictEqual(t.length,4),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],6),e.strictEqual(t[3],7),t=[1,2,3,4,5],a.splice(t,3,3,[6,7]),e.strictEqual(t.length,5),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],3),e.strictEqual(t[3],6),e.strictEqual(t[4],7),t=[1,2,3,4,5],a.splice(t,6,3,[6,7]),e.strictEqual(t.length,7),e.strictEqual(t[0],1),e.strictEqual(t[1],2),e.strictEqual(t[2],3),e.strictEqual(t[3],4),e.strictEqual(t[4],5),e.strictEqual(t[5],6),e.strictEqual(t[6],7)}),test("findMaxBy",()=>{const t=[{v:3},{v:5},{v:2},{v:2},{v:2},{v:5}];e.strictEqual(t.indexOf(l.findFirstMax(t,a.compareBy(r=>r.v,a.numberComparator))),1)}),test("findLastMaxBy",()=>{const t=[{v:3},{v:5},{v:2},{v:2},{v:2},{v:5}];e.strictEqual(t.indexOf(l.findLastMax(t,a.compareBy(r=>r.v,a.numberComparator))),5)}),test("findMinBy",()=>{const t=[{v:3},{v:5},{v:2},{v:2},{v:2},{v:5}];e.strictEqual(t.indexOf(l.findFirstMin(t,a.compareBy(r=>r.v,a.numberComparator))),2)}),suite("ArrayQueue",()=>{suite("takeWhile/takeFromEndWhile",()=>{test("TakeWhile 1",()=>{const t=new a.ArrayQueue([9,8,1,7,6]);e.deepStrictEqual(t.takeWhile(r=>r>5),[9,8]),e.deepStrictEqual(t.takeWhile(r=>r<7),[1]),e.deepStrictEqual(t.takeWhile(r=>!0),[7,6])}),test("TakeFromEndWhile 1",()=>{const t=new a.ArrayQueue([9,8,1,7,6]);e.deepStrictEqual(t.takeFromEndWhile(r=>r>5),[7,6]),e.deepStrictEqual(t.takeFromEndWhile(r=>r<2),[1]),e.deepStrictEqual(t.takeFromEndWhile(r=>!0),[9,8])})}),suite("takeWhile/takeFromEndWhile monotonous",()=>{function t(u,s){function c(n){return n.length===0?null:n}const o=n=>!s(n);{const n=new a.ArrayQueue(u);e.deepStrictEqual(n.takeWhile(s),c(u.filter(s))),e.deepStrictEqual(n.length,u.length-u.filter(s).length),e.deepStrictEqual(n.takeWhile(()=>!0),c(u.filter(o)))}{const n=new a.ArrayQueue(u);e.deepStrictEqual(n.takeFromEndWhile(o),c(u.filter(o))),e.deepStrictEqual(n.length,u.length-u.filter(o).length),e.deepStrictEqual(n.takeFromEndWhile(()=>!0),c(u.filter(s)))}}const r=[1,1,1,2,5,5,7,8,8];test("TakeWhile 1",()=>t(r,u=>u<=1)),test("TakeWhile 2",()=>t(r,u=>u<5)),test("TakeWhile 3",()=>t(r,u=>u<=5)),test("TakeWhile 4",()=>t(r,u=>!0)),test("TakeWhile 5",()=>t(r,u=>!1));const i=[1,1,1,2,5,5,7,8,8,9,9,9,9,10,10];test("TakeWhile 6",()=>t(i,u=>u<10)),test("TakeWhile 7",()=>t(i,u=>u<7)),test("TakeWhile 8",()=>t(i,u=>u<5)),test("TakeWhile Empty",()=>t([],u=>u<=5))})})});
