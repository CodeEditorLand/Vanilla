import{exec as h}from"child_process";import{FileAccess as x}from"../common/network.js";import"../common/processes.js";function P(l){return new Promise((m,u)=>{let f;const g=new Map;function a(i,t,r,p,s){const n=g.get(t);if(i===l||n){const e={name:d(r),cmd:r,pid:i,ppid:t,load:p,mem:s};g.set(i,e),i===l&&(f=e),n&&(n.children||(n.children=[]),n.children.push(e),n.children.length>1&&(n.children=n.children.sort((c,o)=>c.pid-o.pid)))}}function d(i){const t=/--utility-sub-type=network/i,r=/--crashes-directory/i,p=/\\pipe\\winpty-control/i,s=/conhost\.exe.+--headless/i,n=/--type=([a-zA-Z-]+)/;if(r.exec(i))return"electron-crash-reporter";if(p.exec(i))return"winpty-agent";if(s.exec(i))return"conpty-agent";let e=n.exec(i);if(e&&e.length===2)return e[1]==="renderer"?"window":e[1]==="utility"?t.exec(i)?"utility-network-service":"utility-process":e[1]==="extensionHost"?"extension-host":e[1];const c=/[a-zA-Z-]+\.js/g;let o="";do e=c.exec(i),e&&(o+=e+" ");while(e);return o&&i.indexOf("node ")<0&&i.indexOf("node.exe")<0?`electron-nodejs (${o})`:i}if(process.platform==="win32"){const i=t=>t.indexOf("\\\\?\\")===0||t.indexOf("\\??\\")===0?t.substring(4):t.indexOf('"\\\\?\\')===0||t.indexOf('"\\??\\')===0?'"'+t.substring(5):t;import("@vscode/windows-process-tree").then(t=>{t.getProcessList(l,r=>{if(!r){u(new Error(`Root process ${l} not found`));return}t.getProcessCpuUsage(r,p=>{const s=new Map;p.forEach(n=>{const e=i(n.commandLine||"");s.set(n.pid,{name:d(e),cmd:e,pid:n.pid,ppid:n.ppid,load:n.cpu||0,mem:n.memory||0})}),f=s.get(l),f?(s.forEach(n=>{const e=s.get(n.ppid);e&&(e.children||(e.children=[]),e.children.push(n))}),s.forEach(n=>{n.children&&(n.children=n.children.sort((e,c)=>e.pid-c.pid))}),m(f)):u(new Error(`Root process ${l} not found`))})},t.ProcessDataFlag.CommandLine|t.ProcessDataFlag.Memory)})}else{let i=function(){let t=[f];const r=[];for(;t.length;){const s=t.shift();s&&(r.push(s.pid),s.children&&(t=t.concat(s.children)))}let p=JSON.stringify(x.asFileUri("vs/base/node/cpuUsage.sh").fsPath);p+=" "+r.join(" "),h(p,{},(s,n,e)=>{if(s||e)u(s||new Error(e.toString()));else{const c=n.toString().split(`
`);for(let o=0;o<r.length;o++){const I=g.get(r[o]);I.load=parseFloat(c[o])}if(!f){u(new Error(`Root process ${l} not found`));return}m(f)}})};var E=i;h("which ps",{},(t,r,p)=>{if(t||p)if(process.platform!=="linux")u(t||new Error(p.toString()));else{const s=JSON.stringify(x.asFileUri("vs/base/node/ps.sh").fsPath);h(s,{},(n,e,c)=>{n||c?u(n||new Error(c.toString())):(b(e,a),i())})}else{const s=r.toString().trim();h(`${s} -ax -o pid=,ppid=,pcpu=,pmem=,command=`,{maxBuffer:1e3*1024,env:{LC_NUMERIC:"en_US.UTF-8"}},(e,c,o)=>{e||o&&!o.includes("screen size is bogus")?u(e||new Error(o.toString())):(b(c,a),process.platform==="linux"?i():f?m(f):u(new Error(`Root process ${l} not found`)))})}})}})}function b(l,m){const u=/^\s*([0-9]+)\s+([0-9]+)\s+([0-9]+\.[0-9]+)\s+([0-9]+\.[0-9]+)\s+(.+)$/,f=l.toString().split(`
`);for(const g of f){const a=u.exec(g.trim());a&&a.length===6&&m(parseInt(a[1]),parseInt(a[2]),a[5],parseFloat(a[3]),parseFloat(a[4]))}}export{P as listProcesses};
