import{SetWithKey as n}from"./collections.js";import{ArrayNavigator as a}from"./navigator.js";class l{_history;_limit;_navigator;constructor(t=[],e=10){this._initialize(t),this._limit=e,this._onChange()}getHistory(){return this._elements}add(t){this._history.delete(t),this._history.add(t),this._onChange()}next(){return this._navigator.next()}previous(){return this._currentPosition()!==0?this._navigator.previous():null}current(){return this._navigator.current()}first(){return this._navigator.first()}last(){return this._navigator.last()}isFirst(){return this._currentPosition()===0}isLast(){return this._currentPosition()>=this._elements.length-1}isNowhere(){return this._navigator.current()===null}has(t){return this._history.has(t)}clear(){this._initialize([]),this._onChange()}_onChange(){this._reduceToLimit();const t=this._elements;this._navigator=new a(t,0,t.length,t.length)}_reduceToLimit(){const t=this._elements;t.length>this._limit&&this._initialize(t.slice(t.length-this._limit))}_currentPosition(){const t=this._navigator.current();return t?this._elements.indexOf(t):-1}_initialize(t){this._history=new Set;for(const e of t)this._history.add(e)}get _elements(){const t=[];return this._history.forEach(e=>t.push(e)),t}}class d{constructor(t,e=10,r=i=>i){this.capacity=e;this.identityFn=r;if(t.length<1)throw new Error("not supported");this._size=1,this.head=this.tail=this.cursor={value:t[0],previous:void 0,next:void 0},this.valueSet=new n([t[0]],r);for(let i=1;i<t.length;i++)this.add(t[i])}valueSet;head;tail;cursor;_size;get size(){return this._size}add(t){const e={value:t,previous:this.tail,next:void 0};for(this.tail.next=e,this.tail=e,this.cursor=this.tail,this._size++,this.valueSet.has(t)?this._deleteFromList(t):this.valueSet.add(t);this._size>this.capacity;)this.valueSet.delete(this.head.value),this.head=this.head.next,this.head.previous=void 0,this._size--}replaceLast(t){if(this.identityFn(this.tail.value)===this.identityFn(t))return t;const e=this.tail.value;return this.valueSet.delete(e),this.tail.value=t,this.valueSet.has(t)?this._deleteFromList(t):this.valueSet.add(t),e}prepend(t){if(this._size===this.capacity||this.valueSet.has(t))return;const e={value:t,previous:void 0,next:this.head};this.head.previous=e,this.head=e,this._size++,this.valueSet.add(t)}isAtEnd(){return this.cursor===this.tail}current(){return this.cursor.value}previous(){return this.cursor.previous&&(this.cursor=this.cursor.previous),this.cursor.value}next(){return this.cursor.next&&(this.cursor=this.cursor.next),this.cursor.value}has(t){return this.valueSet.has(t)}resetCursor(){return this.cursor=this.tail,this.cursor.value}*[Symbol.iterator](){let t=this.head;for(;t;)yield t.value,t=t.next}_deleteFromList(t){let e=this.head;const r=this.identityFn(t);for(;e!==this.tail;)this.identityFn(e.value)===r&&(e===this.head?(this.head=this.head.next,this.head.previous=void 0):(e.previous.next=e.next,e.next.previous=e.previous),this._size--),e=e.next}}export{l as HistoryNavigator,d as HistoryNavigator2};
