function A(n,t,e){return Math.min(Math.max(n,t),e)}function M(n,t){return(t+n%t)%t}class w{_next=0;getNext(){return this._next++}}class W{_n=1;_val=0;update(t){return this._val=this._val+(t-this._val)/this._n,this._n+=1,this._val}get value(){return this._val}}class C{_n=0;_val=0;_values=[];_index=0;_sum=0;constructor(t){this._values=new Array(t),this._values.fill(0,0,t)}update(t){const e=this._values[this._index];return this._values[this._index]=t,this._index=(this._index+1)%this._values.length,this._sum-=e,this._sum+=t,this._n<this._values.length&&(this._n+=1),this._val=this._sum/this._n,this._val}get value(){return this._val}}function D(n,t,e,v,d,g,f,y){const r=f-e,s=y-v,i=d-e,u=g-v,o=n-e,_=t-v,h=r*r+s*s,a=r*i+s*u,m=r*o+s*_,l=i*i+u*u,b=i*o+u*_,c=1/(h*l-a*a),p=(l*m-a*b)*c,x=(h*b-a*m)*c;return p>=0&&x>=0&&p+x<1}export{w as Counter,W as MovingAverage,C as SlidingWindowAverage,A as clamp,D as isPointWithinTriangle,M as rot};
