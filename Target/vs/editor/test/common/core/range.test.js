import n from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as r}from"../../../../base/test/common/utils.js";import{Position as a}from"../../../common/core/position.js";import{Range as t}from"../../../common/core/range.js";suite("Editor Core - Range",()=>{r(),test("empty range",()=>{const e=new t(1,1,1,1);n.strictEqual(e.startLineNumber,1),n.strictEqual(e.startColumn,1),n.strictEqual(e.endLineNumber,1),n.strictEqual(e.endColumn,1),n.strictEqual(e.isEmpty(),!0)}),test("swap start and stop same line",()=>{const e=new t(1,2,1,1);n.strictEqual(e.startLineNumber,1),n.strictEqual(e.startColumn,1),n.strictEqual(e.endLineNumber,1),n.strictEqual(e.endColumn,2),n.strictEqual(e.isEmpty(),!1)}),test("swap start and stop",()=>{const e=new t(2,1,1,2);n.strictEqual(e.startLineNumber,1),n.strictEqual(e.startColumn,2),n.strictEqual(e.endLineNumber,2),n.strictEqual(e.endColumn,1),n.strictEqual(e.isEmpty(),!1)}),test("no swap same line",()=>{const e=new t(1,1,1,2);n.strictEqual(e.startLineNumber,1),n.strictEqual(e.startColumn,1),n.strictEqual(e.endLineNumber,1),n.strictEqual(e.endColumn,2),n.strictEqual(e.isEmpty(),!1)}),test("no swap",()=>{const e=new t(1,1,2,1);n.strictEqual(e.startLineNumber,1),n.strictEqual(e.startColumn,1),n.strictEqual(e.endLineNumber,2),n.strictEqual(e.endColumn,1),n.strictEqual(e.isEmpty(),!1)}),test("compareRangesUsingEnds",()=>{let e,s;e=new t(1,1,1,3),s=new t(1,2,1,4),n.ok(t.compareRangesUsingEnds(e,s)<0,"a.start < b.start, a.end < b.end"),e=new t(1,1,1,3),s=new t(1,1,1,4),n.ok(t.compareRangesUsingEnds(e,s)<0,"a.start = b.start, a.end < b.end"),e=new t(1,2,1,3),s=new t(1,1,1,4),n.ok(t.compareRangesUsingEnds(e,s)<0,"a.start > b.start, a.end < b.end"),e=new t(1,1,1,4),s=new t(1,2,1,4),n.ok(t.compareRangesUsingEnds(e,s)<0,"a.start < b.start, a.end = b.end"),e=new t(1,1,1,4),s=new t(1,1,1,4),n.ok(t.compareRangesUsingEnds(e,s)===0,"a.start = b.start, a.end = b.end"),e=new t(1,2,1,4),s=new t(1,1,1,4),n.ok(t.compareRangesUsingEnds(e,s)>0,"a.start > b.start, a.end = b.end"),e=new t(1,1,1,5),s=new t(1,2,1,4),n.ok(t.compareRangesUsingEnds(e,s)>0,"a.start < b.start, a.end > b.end"),e=new t(1,1,2,4),s=new t(1,1,1,4),n.ok(t.compareRangesUsingEnds(e,s)>0,"a.start = b.start, a.end > b.end"),e=new t(1,2,5,1),s=new t(1,1,1,4),n.ok(t.compareRangesUsingEnds(e,s)>0,"a.start > b.start, a.end > b.end")}),test("containsPosition",()=>{n.strictEqual(new t(2,2,5,10).containsPosition(new a(1,3)),!1),n.strictEqual(new t(2,2,5,10).containsPosition(new a(2,1)),!1),n.strictEqual(new t(2,2,5,10).containsPosition(new a(2,2)),!0),n.strictEqual(new t(2,2,5,10).containsPosition(new a(2,3)),!0),n.strictEqual(new t(2,2,5,10).containsPosition(new a(3,1)),!0),n.strictEqual(new t(2,2,5,10).containsPosition(new a(5,9)),!0),n.strictEqual(new t(2,2,5,10).containsPosition(new a(5,10)),!0),n.strictEqual(new t(2,2,5,10).containsPosition(new a(5,11)),!1),n.strictEqual(new t(2,2,5,10).containsPosition(new a(6,1)),!1)}),test("containsRange",()=>{n.strictEqual(new t(2,2,5,10).containsRange(new t(1,3,2,2)),!1),n.strictEqual(new t(2,2,5,10).containsRange(new t(2,1,2,2)),!1),n.strictEqual(new t(2,2,5,10).containsRange(new t(2,2,5,11)),!1),n.strictEqual(new t(2,2,5,10).containsRange(new t(2,2,6,1)),!1),n.strictEqual(new t(2,2,5,10).containsRange(new t(5,9,6,1)),!1),n.strictEqual(new t(2,2,5,10).containsRange(new t(5,10,6,1)),!1),n.strictEqual(new t(2,2,5,10).containsRange(new t(2,2,5,10)),!0),n.strictEqual(new t(2,2,5,10).containsRange(new t(2,3,5,9)),!0),n.strictEqual(new t(2,2,5,10).containsRange(new t(3,100,4,100)),!0)}),test("areIntersecting",()=>{n.strictEqual(t.areIntersecting(new t(2,2,3,2),new t(4,2,5,2)),!1),n.strictEqual(t.areIntersecting(new t(4,2,5,2),new t(2,2,3,2)),!1),n.strictEqual(t.areIntersecting(new t(4,2,5,2),new t(5,2,6,2)),!1),n.strictEqual(t.areIntersecting(new t(5,2,6,2),new t(4,2,5,2)),!1),n.strictEqual(t.areIntersecting(new t(2,2,2,7),new t(2,4,2,6)),!0),n.strictEqual(t.areIntersecting(new t(2,2,2,7),new t(2,4,2,9)),!0),n.strictEqual(t.areIntersecting(new t(2,4,2,9),new t(2,2,2,7)),!0)})});
