import n from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as p}from"../../../../base/test/common/utils.js";import{GlyphMarginLanesModel as o}from"../../../common/viewModel/glyphLanesModel.js";import{Range as f}from"../../../common/core/range.js";import{GlyphMarginLane as e}from"../../../common/model.js";suite("GlyphLanesModel",()=>{let t;p();const r=(a,i)=>new f(a,1,i,1),s=(a,i,u)=>{const l=[];for(let L=0;L<i;L++)l.push(t.getLanesAtLine(a+L));n.deepStrictEqual(l,u,`fromLine: ${a}, n: ${i}`)};setup(()=>{t=new o(10)}),test("handles empty",()=>{n.equal(t.requiredLanes,1),s(1,1,[[e.Center]])}),test("works with a single line range",()=>{t.push(e.Left,r(2,3)),n.equal(t.requiredLanes,1),s(1,5,[[e.Center],[e.Left],[e.Left],[e.Center],[e.Center]])}),test("persists ranges",()=>{t.push(e.Left,r(2,3),!0),n.equal(t.requiredLanes,1),s(1,5,[[e.Left],[e.Left],[e.Left],[e.Left],[e.Left]])}),test("handles overlaps",()=>{t.push(e.Left,r(6,9)),t.push(e.Right,r(5,7)),t.push(e.Center,r(7,8)),n.equal(t.requiredLanes,3),s(5,6,[[e.Right],[e.Left,e.Right],[e.Left,e.Center,e.Right],[e.Left,e.Center],[e.Left],[e.Center]])})});
