import O from"assert";import{DisposableStore as c}from"../../../../base/common/lifecycle.js";import{SparseMultilineTokens as u}from"../../../common/tokens/sparseMultilineTokens.js";import{MetadataConsts as e}from"../../../common/encodedTokenAttributes.js";import{SemanticTokensProviderStyling as l,toMultilineTokens2 as F}from"../../../common/services/semanticTokensProviderStyling.js";import{createModelServices as U}from"../testTextModel.js";import"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{IThemeService as R}from"../../../../platform/theme/common/themeService.js";import{ILanguageService as N}from"../../../common/languages/language.js";import{ensureNoDisposablesAreLeakedInTestSuite as _}from"../../../../base/test/common/utils.js";suite("ModelService",()=>{let s,t,S;setup(()=>{s=new c,t=U(s),S=t.get(N)}),teardown(()=>{s.dispose()}),_(),test("issue #134973: invalid semantic tokens should be handled better",()=>{const n="java";s.add(S.registerLanguage({id:n}));const r={tokenTypes:["st0","st1","st2","st3","st4","st5","st6","st7","st8","st9","st10"],tokenModifiers:[]};t.stub(R,{getColorTheme(){return{getTokenStyleMetadata:(E,g,T)=>({foreground:parseInt(E.substr(2),10),bold:void 0,underline:void 0,strikethrough:void 0,italic:void 0})}}});const o=t.createInstance(l,r),i={data:new Uint32Array([0,13,16,1,0,1,2,6,2,0,0,7,6,3,0,0,15,8,4,0,0,17,1,5,0,0,7,5,6,0,1,12,8,7,0,0,19,5,8,0,0,7,1,9,0,0,4294967294,5,10,0])},a=F(i,o,n),d=u.create(1,new Uint32Array([0,13,29,e.SEMANTIC_USE_FOREGROUND|1<<e.FOREGROUND_OFFSET,1,2,8,e.SEMANTIC_USE_FOREGROUND|2<<e.FOREGROUND_OFFSET,1,9,15,e.SEMANTIC_USE_FOREGROUND|3<<e.FOREGROUND_OFFSET,1,24,32,e.SEMANTIC_USE_FOREGROUND|4<<e.FOREGROUND_OFFSET,1,41,42,e.SEMANTIC_USE_FOREGROUND|5<<e.FOREGROUND_OFFSET,1,48,53,e.SEMANTIC_USE_FOREGROUND|6<<e.FOREGROUND_OFFSET,2,12,20,e.SEMANTIC_USE_FOREGROUND|7<<e.FOREGROUND_OFFSET,2,31,36,e.SEMANTIC_USE_FOREGROUND|8<<e.FOREGROUND_OFFSET,2,38,39,e.SEMANTIC_USE_FOREGROUND|9<<e.FOREGROUND_OFFSET]));O.deepStrictEqual(a.toString(),d.toString())}),test("issue #148651: VSCode UI process can hang if a semantic token with negative values is returned by language service",()=>{const n="dockerfile";s.add(S.registerLanguage({id:n}));const r={tokenTypes:["st0","st1","st2","st3","st4","st5","st6","st7","st8","st9"],tokenModifiers:["stm0","stm1","stm2"]};t.stub(R,{getColorTheme(){return{getTokenStyleMetadata:(E,g,T)=>({foreground:parseInt(E.substr(2),10),bold:void 0,underline:void 0,strikethrough:void 0,italic:void 0})}}});const o=t.createInstance(l,r),i={data:new Uint32Array([0,0,3,0,0,0,4,2,2,0,0,2,3,8,0,0,3,1,9,0,0,1,1,10,0,0,1,4,8,0,0,4,4294967292,2,0,0,4294967292,4294967294,8,0,0,4294967294,1,9,0,0,1,1,10,0,0,1,3,8,0,0,3,4294967291,8,0,0,4294967291,1,9,0,0,1,1,10,0,0,1,4,8,0])},a=F(i,o,n),d=u.create(1,new Uint32Array([0,4,6,e.SEMANTIC_USE_FOREGROUND|1<<e.FOREGROUND_OFFSET,0,6,9,e.SEMANTIC_USE_FOREGROUND|2<<e.FOREGROUND_OFFSET,0,9,10,e.SEMANTIC_USE_FOREGROUND|3<<e.FOREGROUND_OFFSET,0,11,15,e.SEMANTIC_USE_FOREGROUND|4<<e.FOREGROUND_OFFSET]));O.deepStrictEqual(a.toString(),d.toString())}),test("issue #149130: vscode freezes because of Bracket Pair Colorization",()=>{const n="q";s.add(S.registerLanguage({id:n}));const r={tokenTypes:["st0","st1","st2","st3","st4","st5"],tokenModifiers:["stm0","stm1","stm2"]};t.stub(R,{getColorTheme(){return{getTokenStyleMetadata:(E,g,T)=>({foreground:parseInt(E.substr(2),10),bold:void 0,underline:void 0,strikethrough:void 0,italic:void 0})}}});const o=t.createInstance(l,r),i={data:new Uint32Array([0,11,1,1,0,0,4,1,1,0,0,4294967289,1,1,0])},a=F(i,o,n),d=u.create(1,new Uint32Array([0,11,12,e.SEMANTIC_USE_FOREGROUND|1<<e.FOREGROUND_OFFSET,0,15,16,e.SEMANTIC_USE_FOREGROUND|1<<e.FOREGROUND_OFFSET]));O.deepStrictEqual(a.toString(),d.toString())})});
