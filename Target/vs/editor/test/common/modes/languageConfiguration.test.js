import e from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../base/test/common/utils.js";import{StandardTokenType as s}from"../../../common/encodedTokenAttributes.js";import{StandardAutoClosingPairConditional as n}from"../../../common/languages/languageConfiguration.js";import{TestLanguageConfigurationService as a}from"./testLanguageConfigurationService.js";suite("StandardAutoClosingPairConditional",()=>{u(),test("Missing notIn",()=>{const t=new n({open:"{",close:"}"});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!0),e.strictEqual(t.isOK(s.String),!0),e.strictEqual(t.isOK(s.RegEx),!0)}),test("Empty notIn",()=>{const t=new n({open:"{",close:"}",notIn:[]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!0),e.strictEqual(t.isOK(s.String),!0),e.strictEqual(t.isOK(s.RegEx),!0)}),test("Invalid notIn",()=>{const t=new n({open:"{",close:"}",notIn:["bla"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!0),e.strictEqual(t.isOK(s.String),!0),e.strictEqual(t.isOK(s.RegEx),!0)}),test("notIn in strings",()=>{const t=new n({open:"{",close:"}",notIn:["string"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!0),e.strictEqual(t.isOK(s.String),!1),e.strictEqual(t.isOK(s.RegEx),!0)}),test("notIn in comments",()=>{const t=new n({open:"{",close:"}",notIn:["comment"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!1),e.strictEqual(t.isOK(s.String),!0),e.strictEqual(t.isOK(s.RegEx),!0)}),test("notIn in regex",()=>{const t=new n({open:"{",close:"}",notIn:["regex"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!0),e.strictEqual(t.isOK(s.String),!0),e.strictEqual(t.isOK(s.RegEx),!1)}),test("notIn in strings nor comments",()=>{const t=new n({open:"{",close:"}",notIn:["string","comment"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!1),e.strictEqual(t.isOK(s.String),!1),e.strictEqual(t.isOK(s.RegEx),!0)}),test("notIn in strings nor regex",()=>{const t=new n({open:"{",close:"}",notIn:["string","regex"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!0),e.strictEqual(t.isOK(s.String),!1),e.strictEqual(t.isOK(s.RegEx),!1)}),test("notIn in comments nor regex",()=>{const t=new n({open:"{",close:"}",notIn:["comment","regex"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!1),e.strictEqual(t.isOK(s.String),!0),e.strictEqual(t.isOK(s.RegEx),!1)}),test("notIn in strings, comments nor regex",()=>{const t=new n({open:"{",close:"}",notIn:["string","comment","regex"]});e.strictEqual(t.isOK(s.Other),!0),e.strictEqual(t.isOK(s.Comment),!1),e.strictEqual(t.isOK(s.String),!1),e.strictEqual(t.isOK(s.RegEx),!1)}),test("language configurations priorities",()=>{const t=new a,i="testLang1",r=t.register(i,{comments:{lineComment:"1"}},100),o=t.register(i,{comments:{lineComment:"2"}},10);e.strictEqual(t.getLanguageConfiguration(i).comments?.lineCommentToken,"1"),r.dispose(),o.dispose(),t.dispose()})});
