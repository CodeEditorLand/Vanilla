import i from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as k}from"../../../../../base/test/common/utils.js";import{StandardTokenType as e}from"../../../../common/encodedTokenAttributes.js";import{BracketElectricCharacterSupport as p}from"../../../../common/languages/supports/electricCharacter.js";import{RichEditBrackets as u}from"../../../../common/languages/supports/richEditBrackets.js";import{createFakeScopedLineTokens as m}from"../../modesTestUtils.js";const l="test";suite("Editor Modes - Auto Indentation",()=>{k();function s(t,c,a,n){return t.onElectricCharacter(a,m(c),n)}function r(t,c,a,n){const o=s(t,c,a,n);i.deepStrictEqual(o,null)}function h(t,c,a,n,o){const d=s(t,c,a,n);i.deepStrictEqual(d,{matchOpenBracket:o})}test("getElectricCharacters uses all sources and dedups",()=>{const t=new p(new u(l,[["{","}"],["(",")"]]));i.deepStrictEqual(t.getElectricCharacters(),["}",")"])}),test("matchOpenBracket",()=>{const t=new p(new u(l,[["{","}"],["(",")"]]));r(t,[{text:"	{",type:e.Other}],"	",1),r(t,[{text:"	{",type:e.Other}],"	",2),r(t,[{text:"		",type:e.Other}],"{",3),r(t,[{text:"	}",type:e.Other}],"	",1),r(t,[{text:"	}",type:e.Other}],"	",2),h(t,[{text:"		",type:e.Other}],"}",3,"}")})});
