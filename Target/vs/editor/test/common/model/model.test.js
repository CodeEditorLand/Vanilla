var k=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var S=(e,n,a,l)=>{for(var u=l>1?void 0:l?G(n,a):n,d=e.length-1,s;d>=0;d--)(s=e[d])&&(u=(l?s(n,a,u):s(u))||u);return l&&u&&k(n,a,u),u},L=(e,n)=>(a,l)=>n(a,l,e);import t from"assert";import{Disposable as A,DisposableStore as b,dispose as z}from"../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as I}from"../../../../base/test/common/utils.js";import{EditOperation as r}from"../../../common/core/editOperation.js";import{Position as i}from"../../../common/core/position.js";import{Range as o}from"../../../common/core/range.js";import{MetadataConsts as _}from"../../../common/encodedTokenAttributes.js";import{EncodedTokenizationResult as H,TokenizationRegistry as B}from"../../../common/languages.js";import{ILanguageService as x}from"../../../common/languages/language.js";import{ILanguageConfigurationService as R}from"../../../common/languages/languageConfigurationRegistry.js";import{NullState as J}from"../../../common/languages/nullTokenize.js";import"../../../common/model/textModel.js";import{InternalModelContentChangeEvent as E,ModelRawContentChangedEvent as C,ModelRawFlush as K,ModelRawLineChanged as m,ModelRawLinesDeleted as F,ModelRawLinesInserted as Q}from"../../../common/textModelEvents.js";import{createModelServices as T,createTextModel as y,instantiateTextModel as V}from"../testTextModel.js";const W="My First Line",P="		My Second Line",D="    Third Line",N="",O="1";suite("Editor Model - Model",()=>{let e;setup(()=>{const n=W+`\r
`+P+`
`+D+`
`+N+`\r
`+O;e=y(n)}),teardown(()=>{e.dispose()}),I(),test("model getValue",()=>{t.strictEqual(e.getValue(),`My First Line
		My Second Line
    Third Line

1`)}),test("model insert empty text",()=>{e.applyEdits([r.insert(new i(1,1),"")]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"My First Line")}),test("model insert text without newline 1",()=>{e.applyEdits([r.insert(new i(1,1),"foo ")]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"foo My First Line")}),test("model insert text without newline 2",()=>{e.applyEdits([r.insert(new i(1,3)," foo")]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"My foo First Line")}),test("model insert text with one newline",()=>{e.applyEdits([r.insert(new i(1,3),` new line
No longer`)]),t.strictEqual(e.getLineCount(),6),t.strictEqual(e.getLineContent(1),"My new line"),t.strictEqual(e.getLineContent(2),"No longer First Line")}),test("model insert text with two newlines",()=>{e.applyEdits([r.insert(new i(1,3),` new line
One more line in the middle
No longer`)]),t.strictEqual(e.getLineCount(),7),t.strictEqual(e.getLineContent(1),"My new line"),t.strictEqual(e.getLineContent(2),"One more line in the middle"),t.strictEqual(e.getLineContent(3),"No longer First Line")}),test("model insert text with many newlines",()=>{e.applyEdits([r.insert(new i(1,3),`



`)]),t.strictEqual(e.getLineCount(),9),t.strictEqual(e.getLineContent(1),"My"),t.strictEqual(e.getLineContent(2),""),t.strictEqual(e.getLineContent(3),""),t.strictEqual(e.getLineContent(4),""),t.strictEqual(e.getLineContent(5)," First Line")}),test("model insert empty text does not trigger eventing",()=>{const n=e.onDidChangeContentOrInjectedText(a=>{t.ok(!1,"was not expecting event")});e.applyEdits([r.insert(new i(1,1),"")]),n.dispose()}),test("model insert text without newline eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.applyEdits([r.insert(new i(1,1),"foo ")]),t.deepStrictEqual(n,new C([new m(1,"foo My First Line",null)],2,!1,!1)),a.dispose()}),test("model insert text with one newline eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.applyEdits([r.insert(new i(1,3),` new line
No longer`)]),t.deepStrictEqual(n,new C([new m(1,"My new line",null),new Q(2,2,["No longer First Line"],[null])],2,!1,!1)),a.dispose()}),test("model delete empty text",()=>{e.applyEdits([r.delete(new o(1,1,1,1))]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"My First Line")}),test("model delete text from one line",()=>{e.applyEdits([r.delete(new o(1,1,1,2))]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"y First Line")}),test("model delete text from one line 2",()=>{e.applyEdits([r.insert(new i(1,1),"a")]),t.strictEqual(e.getLineContent(1),"aMy First Line"),e.applyEdits([r.delete(new o(1,2,1,4))]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"a First Line")}),test("model delete all text from a line",()=>{e.applyEdits([r.delete(new o(1,1,1,14))]),t.strictEqual(e.getLineCount(),5),t.strictEqual(e.getLineContent(1),"")}),test("model delete text from two lines",()=>{e.applyEdits([r.delete(new o(1,4,2,6))]),t.strictEqual(e.getLineCount(),4),t.strictEqual(e.getLineContent(1),"My Second Line")}),test("model delete text from many lines",()=>{e.applyEdits([r.delete(new o(1,4,3,5))]),t.strictEqual(e.getLineCount(),3),t.strictEqual(e.getLineContent(1),"My Third Line")}),test("model delete everything",()=>{e.applyEdits([r.delete(new o(1,1,5,2))]),t.strictEqual(e.getLineCount(),1),t.strictEqual(e.getLineContent(1),"")}),test("model delete empty text does not trigger eventing",()=>{const n=e.onDidChangeContentOrInjectedText(a=>{t.ok(!1,"was not expecting event")});e.applyEdits([r.delete(new o(1,1,1,1))]),n.dispose()}),test("model delete text from one line eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.applyEdits([r.delete(new o(1,1,1,2))]),t.deepStrictEqual(n,new C([new m(1,"y First Line",null)],2,!1,!1)),a.dispose()}),test("model delete all text from a line eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.applyEdits([r.delete(new o(1,1,1,14))]),t.deepStrictEqual(n,new C([new m(1,"",null)],2,!1,!1)),a.dispose()}),test("model delete text from two lines eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.applyEdits([r.delete(new o(1,4,2,6))]),t.deepStrictEqual(n,new C([new m(1,"My Second Line",null),new F(2,2)],2,!1,!1)),a.dispose()}),test("model delete text from many lines eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.applyEdits([r.delete(new o(1,4,3,5))]),t.deepStrictEqual(n,new C([new m(1,"My Third Line",null),new F(2,3)],2,!1,!1)),a.dispose()}),test("getValueInRange",()=>{t.strictEqual(e.getValueInRange(new o(1,1,1,1)),""),t.strictEqual(e.getValueInRange(new o(1,1,1,2)),"M"),t.strictEqual(e.getValueInRange(new o(1,2,1,3)),"y"),t.strictEqual(e.getValueInRange(new o(1,1,1,14)),"My First Line"),t.strictEqual(e.getValueInRange(new o(1,1,2,1)),`My First Line
`),t.strictEqual(e.getValueInRange(new o(1,1,2,2)),`My First Line
	`),t.strictEqual(e.getValueInRange(new o(1,1,2,3)),`My First Line
		`),t.strictEqual(e.getValueInRange(new o(1,1,2,17)),`My First Line
		My Second Line`),t.strictEqual(e.getValueInRange(new o(1,1,3,1)),`My First Line
		My Second Line
`),t.strictEqual(e.getValueInRange(new o(1,1,4,1)),`My First Line
		My Second Line
    Third Line
`)}),test("getValueLengthInRange",()=>{t.strictEqual(e.getValueLengthInRange(new o(1,1,1,1)),0),t.strictEqual(e.getValueLengthInRange(new o(1,1,1,2)),1),t.strictEqual(e.getValueLengthInRange(new o(1,2,1,3)),1),t.strictEqual(e.getValueLengthInRange(new o(1,1,1,14)),13),t.strictEqual(e.getValueLengthInRange(new o(1,1,2,1)),14),t.strictEqual(e.getValueLengthInRange(new o(1,1,2,2)),15),t.strictEqual(e.getValueLengthInRange(new o(1,1,2,3)),16),t.strictEqual(e.getValueLengthInRange(new o(1,1,2,17)),30),t.strictEqual(e.getValueLengthInRange(new o(1,1,3,1)),31),t.strictEqual(e.getValueLengthInRange(new o(1,1,4,1)),46)}),test("setValue eventing",()=>{let n=null;const a=e.onDidChangeContentOrInjectedText(l=>{(n!==null||!(l instanceof E))&&t.fail("Unexpected assertion error"),n=l.rawContentChangedEvent});e.setValue("new value"),t.deepStrictEqual(n,new C([new K],2,!1,!1)),a.dispose()}),test("issue #46342: Maintain edit operation order in applyEdits",()=>{const n=e.applyEdits([{range:new o(2,1,2,1),text:"a"},{range:new o(1,1,1,1),text:"b"}],!0);t.deepStrictEqual(n[0].range,new o(2,1,2,2)),t.deepStrictEqual(n[1].range,new o(1,1,1,2))})}),suite("Editor Model - Model Line Separators",()=>{let e;setup(()=>{const n=W+"\u2028"+P+`
`+D+"\u2028"+N+`\r
`+O;e=y(n)}),teardown(()=>{e.dispose()}),I(),test("model getValue",()=>{t.strictEqual(e.getValue(),`My First Line\u2028		My Second Line
    Third Line\u2028
1`)}),test("model lines",()=>{t.strictEqual(e.getLineCount(),3)}),test("Bug 13333:Model should line break on lonely CR too",()=>{const n=y(`Hello\rWorld!\r
Another line`);t.strictEqual(n.getLineCount(),3),t.strictEqual(n.getValue(),`Hello\r
World!\r
Another line`),n.dispose()})}),suite("Editor Model - Words",()=>{const e="outerMode",n="innerMode";let a=class extends A{languageId=e;constructor(s,c){super(),this._register(s.registerLanguage({id:this.languageId})),this._register(c.register(this.languageId,{}));const g=s.languageIdCodec;this._register(B.register(this.languageId,{getInitialState:()=>J,tokenize:void 0,tokenizeEncoded:(h,w,U)=>{const q=[];let v;for(let p=0;p<h.length;p++){const M=h.charAt(p)==="x"?n:e,j=g.encodeLanguageId(M);v!==M&&(q.push(p),q.push(j<<_.LANGUAGEID_OFFSET)),v=M}const f=new Uint32Array(q.length);for(let p=0;p<f.length;p++)f[p]=q[p];return new H(f,U)}}))}};a=S([L(0,x),L(1,R)],a);let l=class extends A{languageId=n;constructor(s,c){super(),this._register(s.registerLanguage({id:this.languageId})),this._register(c.register(this.languageId,{}))}};l=S([L(0,x),L(1,R)],l);let u=[];setup(()=>{u=[]}),teardown(()=>{z(u),u=[]}),I(),test("Get word at position",()=>{const s=y(["This text has some  words. "].join(`
`));u.push(s),t.deepStrictEqual(s.getWordAtPosition(new i(1,1)),{word:"This",startColumn:1,endColumn:5}),t.deepStrictEqual(s.getWordAtPosition(new i(1,2)),{word:"This",startColumn:1,endColumn:5}),t.deepStrictEqual(s.getWordAtPosition(new i(1,4)),{word:"This",startColumn:1,endColumn:5}),t.deepStrictEqual(s.getWordAtPosition(new i(1,5)),{word:"This",startColumn:1,endColumn:5}),t.deepStrictEqual(s.getWordAtPosition(new i(1,6)),{word:"text",startColumn:6,endColumn:10}),t.deepStrictEqual(s.getWordAtPosition(new i(1,19)),{word:"some",startColumn:15,endColumn:19}),t.deepStrictEqual(s.getWordAtPosition(new i(1,20)),null),t.deepStrictEqual(s.getWordAtPosition(new i(1,21)),{word:"words",startColumn:21,endColumn:26}),t.deepStrictEqual(s.getWordAtPosition(new i(1,26)),{word:"words",startColumn:21,endColumn:26}),t.deepStrictEqual(s.getWordAtPosition(new i(1,27)),null),t.deepStrictEqual(s.getWordAtPosition(new i(1,28)),null)}),test("getWordAtPosition at embedded language boundaries",()=>{const d=new b,s=T(d),c=d.add(s.createInstance(a));d.add(s.createInstance(l));const g=d.add(V(s,"ab<xx>ab<x>",c.languageId));t.deepStrictEqual(g.getWordAtPosition(new i(1,1)),{word:"ab",startColumn:1,endColumn:3}),t.deepStrictEqual(g.getWordAtPosition(new i(1,2)),{word:"ab",startColumn:1,endColumn:3}),t.deepStrictEqual(g.getWordAtPosition(new i(1,3)),{word:"ab",startColumn:1,endColumn:3}),t.deepStrictEqual(g.getWordAtPosition(new i(1,4)),{word:"xx",startColumn:4,endColumn:6}),t.deepStrictEqual(g.getWordAtPosition(new i(1,5)),{word:"xx",startColumn:4,endColumn:6}),t.deepStrictEqual(g.getWordAtPosition(new i(1,6)),{word:"xx",startColumn:4,endColumn:6}),t.deepStrictEqual(g.getWordAtPosition(new i(1,7)),{word:"ab",startColumn:7,endColumn:9}),d.dispose()}),test("issue #61296: VS code freezes when editing CSS file with emoji",()=>{const d="testMode",s=new b,c=T(s),g=c.get(R),h=c.get(x);s.add(h.registerLanguage({id:d})),s.add(g.register(d,{wordPattern:/(#?-?\d*\.\d\w*%?)|(::?[\w-]*(?=[^,{;]*[,{]))|(([@#.!])?[\w-?]+%?|[@#!.])/g}));const w=s.add(V(c,".\u{1F437}-a-b",d));t.deepStrictEqual(w.getWordAtPosition(new i(1,1)),{word:".",startColumn:1,endColumn:2}),t.deepStrictEqual(w.getWordAtPosition(new i(1,2)),{word:".",startColumn:1,endColumn:2}),t.deepStrictEqual(w.getWordAtPosition(new i(1,3)),null),t.deepStrictEqual(w.getWordAtPosition(new i(1,4)),{word:"-a-b",startColumn:4,endColumn:8}),t.deepStrictEqual(w.getWordAtPosition(new i(1,5)),{word:"-a-b",startColumn:4,endColumn:8}),t.deepStrictEqual(w.getWordAtPosition(new i(1,6)),{word:"-a-b",startColumn:4,endColumn:8}),t.deepStrictEqual(w.getWordAtPosition(new i(1,7)),{word:"-a-b",startColumn:4,endColumn:8}),t.deepStrictEqual(w.getWordAtPosition(new i(1,8)),{word:"-a-b",startColumn:4,endColumn:8}),s.dispose()})});
