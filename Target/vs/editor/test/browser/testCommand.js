import p from"assert";import"../../common/core/range.js";import"../../common/core/selection.js";import"../../common/editorCommon.js";import"../../common/model.js";import{instantiateTestCodeEditor as u,createCodeEditorServices as I}from"./testCodeEditor.js";import{instantiateTextModel as E}from"../common/testTextModel.js";import"../../../platform/instantiation/common/instantiation.js";import{DisposableStore as v}from"../../../base/common/lifecycle.js";import"../../common/core/editOperation.js";function y(c,d,t,l,e,o,i,m){const n=new v,r=I(n);m&&r.invokeFunction(m,n);const s=n.add(E(r,c.join(`
`),d)),a=n.add(u(r,s)).getViewModel();i&&s.tokenization.forceTokenization(s.getLineCount()),a.setSelections("tests",[t]);const S=r.invokeFunction(f=>l(f,a.getSelection()));a.executeCommand(S,"tests"),p.deepStrictEqual(s.getLinesContent(),e);const g=a.getSelection();p.deepStrictEqual(g.toString(),o.toString()),n.dispose()}function G(c,d){const t=[],l={addEditOperation:(e,o,i=!1)=>{t.push({range:e,text:o,forceMoveMarkers:i})},addTrackedEditOperation:(e,o,i=!1)=>{t.push({range:e,text:o,forceMoveMarkers:i})},trackSelection:e=>""};return d.getEditOperations(c,l),t}export{G as getEditOperation,y as testCommand};
