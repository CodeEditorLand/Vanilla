import l from"assert";import*as L from"sinon";import{DisposableStore as v}from"../../../../../base/common/lifecycle.js";import{sep as $}from"../../../../../base/common/path.js";import{isWindows as u}from"../../../../../base/common/platform.js";import{extUriBiasedIgnorePathCase as g}from"../../../../../base/common/resources.js";import{URI as d}from"../../../../../base/common/uri.js";import{mock as M}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as U}from"../../../../../base/test/common/utils.js";import{Selection as N}from"../../../../common/core/selection.js";import"../../../../common/model/textModel.js";import{SnippetParser as c}from"../../browser/snippetParser.js";import{ClipboardBasedVariableResolver as f,CompositeSnippetVariableResolver as C,ModelBasedVariableResolver as p,SelectionBasedVariableResolver as A,TimeBasedVariableResolver as h,WorkspaceBasedVariableResolver as O}from"../../browser/snippetVariables.js";import{createTextModel as T}from"../../../../test/common/testTextModel.js";import"../../../../../platform/label/common/label.js";import{toWorkspaceFolder as F}from"../../../../../platform/workspace/common/workspace.js";import{Workspace as I}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{toWorkspaceFolders as D}from"../../../../../platform/workspaces/common/workspaces.js";suite("Snippet Variables Resolver",function(){const _=new class extends M(){getUriLabel(e){return e.fsPath}};let E,s;setup(function(){E=T(["this is line one","this is line two","    this is line three"].join(`
`),void 0,void 0,d.parse("file:///foo/files/text.txt")),s=new C([new p(_,E),new A(E,new N(1,1,1,1),0,void 0)])}),teardown(function(){E.dispose()}),U();function t(e,i,n){const R=new c().parse(`$${i}`).children[0];R.resolve(e),R.children.length===0?l.strictEqual(void 0,n):l.strictEqual(R.toString(),n)}test("editor variables, basics",function(){t(s,"TM_FILENAME","text.txt"),t(s,"something",void 0)}),test("editor variables, file/dir",function(){const e=new v;t(s,"TM_FILENAME","text.txt"),u||(t(s,"TM_DIRECTORY","/foo/files"),t(s,"TM_FILEPATH","/foo/files/text.txt")),s=new p(_,e.add(T("",void 0,void 0,d.parse("http://www.pb.o/abc/def/ghi")))),t(s,"TM_FILENAME","ghi"),u||(t(s,"TM_DIRECTORY","/abc/def"),t(s,"TM_FILEPATH","/abc/def/ghi")),s=new p(_,e.add(T("",void 0,void 0,d.parse("mem:fff.ts")))),t(s,"TM_DIRECTORY",""),t(s,"TM_FILEPATH","fff.ts"),e.dispose()}),test("Path delimiters in code snippet variables aren't specific to remote OS #76840",function(){const e=new class extends M(){getUriLabel(a){return a.fsPath.replace(/\/|\\/g,"|")}},i=T([].join(`
`),void 0,void 0,d.parse("foo:///foo/files/text.txt")),n=new C([new p(e,i)]);t(n,"TM_FILEPATH","|foo|files|text.txt"),i.dispose()}),test("editor variables, selection",function(){s=new A(E,new N(1,2,2,3),0,void 0),t(s,"TM_SELECTED_TEXT",`his is line one
th`),t(s,"TM_CURRENT_LINE","this is line two"),t(s,"TM_LINE_INDEX","1"),t(s,"TM_LINE_NUMBER","2"),t(s,"CURSOR_INDEX","0"),t(s,"CURSOR_NUMBER","1"),s=new A(E,new N(1,2,2,3),4,void 0),t(s,"CURSOR_INDEX","4"),t(s,"CURSOR_NUMBER","5"),s=new A(E,new N(2,3,1,2),0,void 0),t(s,"TM_SELECTED_TEXT",`his is line one
th`),t(s,"TM_CURRENT_LINE","this is line one"),t(s,"TM_LINE_INDEX","0"),t(s,"TM_LINE_NUMBER","1"),s=new A(E,new N(1,2,1,2),0,void 0),t(s,"TM_SELECTED_TEXT",void 0),t(s,"TM_CURRENT_WORD","this"),s=new A(E,new N(3,1,3,1),0,void 0),t(s,"TM_CURRENT_WORD",void 0)}),test("TextmateSnippet, resolve variable",function(){const e=new c().parse('"$TM_CURRENT_WORD"',!0);l.strictEqual(e.toString(),'""'),e.resolveVariables(s),l.strictEqual(e.toString(),'"this"')}),test("TextmateSnippet, resolve variable with default",function(){const e=new c().parse('"${TM_CURRENT_WORD:foo}"',!0);l.strictEqual(e.toString(),'"foo"'),e.resolveVariables(s),l.strictEqual(e.toString(),'"this"')}),test("More useful environment variables for snippets, #32737",function(){const e=new v;t(s,"TM_FILENAME_BASE","text"),s=new p(_,e.add(T("",void 0,void 0,d.parse("http://www.pb.o/abc/def/ghi")))),t(s,"TM_FILENAME_BASE","ghi"),s=new p(_,e.add(T("",void 0,void 0,d.parse("mem:.git")))),t(s,"TM_FILENAME_BASE",".git"),s=new p(_,e.add(T("",void 0,void 0,d.parse("mem:foo.")))),t(s,"TM_FILENAME_BASE","foo"),e.dispose()});function o(e,i,n){const R=new c().parse(e).resolveVariables({resolve(b){return n||b.name}}).toString();l.strictEqual(R,i)}test("Variable Snippet Transform",function(){const e=new c().parse("name=${TM_FILENAME/(.*)\\..+$/$1/}",!0);e.resolveVariables(s),l.strictEqual(e.toString(),"name=text"),o("${ThisIsAVar/([A-Z]).*(Var)/$2/}","Var"),o("${ThisIsAVar/([A-Z]).*(Var)/$2-${1:/downcase}/}","Var-t"),o("${Foo/(.*)/${1:+Bar}/img}","Bar"),o("export default class ${TM_FILENAME/(\\w+)\\.js/$1/g}","export default class FooFile","FooFile.js"),o("${foobarfoobar/(foo)/${1:+FAR}/g}","FARbarFARbar"),o("${foobarfoobar/(foo)/${1:+FAR}/}","FARbarfoobar"),o("${foobarfoobar/(bazz)/${1:+FAR}/g}","foobarfoobar"),o("${foobarfoobar/(foo)/${2:+FAR}/g}","barbar")}),test("Snippet transforms do not handle regex with alternatives or optional matches, #36089",function(){o("${TM_FILENAME/^(.)|(?:-(.))|(\\.js)/${1:/upcase}${2:/upcase}/g}","MyClass","my-class.js"),o("${TM_FILENAME/^(.)|(?:-(.))|(\\.js)/${1:/upcase}${2:/upcase}/g}","Myclass","myclass.js"),o("${TM_FILENAME/^(.)|(?:-(.))|(\\.js)/${1:/upcase}${2:/upcase}/g}","Myclass.foo","myclass.foo"),o("${TM_FILENAME/^(.)|(?:-(.))|(\\.js)/${1:/upcase}${2:/upcase}/g}","ThisIsAFile","this-is-a-file.js"),o("${TM_FILENAME_BASE/([A-Z][a-z]+)([A-Z][a-z]+$)?/${1:/downcase}-${2:/downcase}/g}","capital-case","CapitalCase"),o("${TM_FILENAME_BASE/([A-Z][a-z]+)([A-Z][a-z]+$)?/${1:/downcase}-${2:/downcase}/g}","capital-case-more","CapitalCaseMore")}),test("Add variable to insert value from clipboard to a snippet #40153",function(){t(new f(()=>{},1,0,!0),"CLIPBOARD",void 0),t(new f(()=>null,1,0,!0),"CLIPBOARD",void 0),t(new f(()=>"",1,0,!0),"CLIPBOARD",void 0),t(new f(()=>"foo",1,0,!0),"CLIPBOARD","foo"),t(new f(()=>"foo",1,0,!0),"foo",void 0),t(new f(()=>"foo",1,0,!0),"cLIPBOARD",void 0)}),test("Add variable to insert value from clipboard to a snippet #40153, 2",function(){t(new f(()=>"line1",1,2,!0),"CLIPBOARD","line1"),t(new f(()=>`line1
line2
line3`,1,2,!0),"CLIPBOARD",`line1
line2
line3`),t(new f(()=>`line1
line2`,1,2,!0),"CLIPBOARD","line2"),s=new f(()=>`line1
line2`,0,2,!0),t(new f(()=>`line1
line2`,0,2,!0),"CLIPBOARD","line1"),t(new f(()=>`line1
line2`,0,2,!1),"CLIPBOARD",`line1
line2`)});function r(e,i){const a=new c().parse(`$${i}`).children[0];l.strictEqual(a.resolve(e),!0,`${i} failed to resolve`)}test("Add time variables for snippets #41631, #43140",function(){const e=new h;r(e,"CURRENT_YEAR"),r(e,"CURRENT_YEAR_SHORT"),r(e,"CURRENT_MONTH"),r(e,"CURRENT_DATE"),r(e,"CURRENT_HOUR"),r(e,"CURRENT_MINUTE"),r(e,"CURRENT_SECOND"),r(e,"CURRENT_DAY_NAME"),r(e,"CURRENT_DAY_NAME_SHORT"),r(e,"CURRENT_MONTH_NAME"),r(e,"CURRENT_MONTH_NAME_SHORT"),r(e,"CURRENT_SECONDS_UNIX"),r(e,"CURRENT_TIMEZONE_OFFSET")}),test("Time-based snippet variables resolve to the same values even as time progresses",async function(){const e=`
			$CURRENT_YEAR
			$CURRENT_YEAR_SHORT
			$CURRENT_MONTH
			$CURRENT_DATE
			$CURRENT_HOUR
			$CURRENT_MINUTE
			$CURRENT_SECOND
			$CURRENT_DAY_NAME
			$CURRENT_DAY_NAME_SHORT
			$CURRENT_MONTH_NAME
			$CURRENT_MONTH_NAME_SHORT
			$CURRENT_SECONDS_UNIX
			$CURRENT_TIMEZONE_OFFSET
		`,i=L.useFakeTimers();try{const n=new h,a=new c().parse(e).resolveVariables(n);i.tick(365*24*3600*1e3+24*3600*1e3+3661*1e3);const R=new c().parse(e).resolveVariables(n);l.strictEqual(a.toString(),R.toString(),"Time-based snippet variables resolved differently")}finally{i.restore()}}),test("creating snippet - format-condition doesn't work #53617",function(){const e=new c().parse("${TM_LINE_NUMBER/(10)/${1:?It is:It is not}/} line 10",!0);e.resolveVariables({resolve(){return"10"}}),l.strictEqual(e.toString(),"It is line 10"),e.resolveVariables({resolve(){return"11"}}),l.strictEqual(e.toString(),"It is not line 10")}),test("Add workspace name and folder variables for snippets #68261",function(){let e;const i=new class{_throw=()=>{throw new Error};onDidChangeWorkbenchState=this._throw;onDidChangeWorkspaceName=this._throw;onWillChangeWorkspaceFolders=this._throw;onDidChangeWorkspaceFolders=this._throw;getCompleteWorkspace=this._throw;getWorkspace(){return e}getWorkbenchState=this._throw;getWorkspaceFolder=this._throw;isCurrentWorkspace=this._throw;isInsideWorkspace=this._throw},n=new O(i);e=new I(""),t(n,"WORKSPACE_NAME",void 0),t(n,"WORKSPACE_FOLDER",void 0),e=new I("",[F(d.file("/folderName"))]),t(n,"WORKSPACE_NAME","folderName"),u||t(n,"WORKSPACE_FOLDER","/folderName");const a=d.file("testWorkspace.code-workspace");e=new I("",D([{path:"folderName"}],a,g),a),t(n,"WORKSPACE_NAME","testWorkspace"),u||t(n,"WORKSPACE_FOLDER","/")}),test("Add RELATIVE_FILEPATH snippet variable #114208",function(){let e;const i=a=>new class extends M(){getUriLabel(b,S={}){const m=d.file(a).fsPath+$,w=b.fsPath;return S.relative&&a&&w.startsWith(m)?w.substring(m.length):w}},n=T("",void 0,void 0,d.parse("file:///foo/files/text.txt"));e=new p(i(""),n),u?t(e,"RELATIVE_FILEPATH","\\foo\\files\\text.txt"):t(e,"RELATIVE_FILEPATH","/foo/files/text.txt"),e=new p(i("/foo"),n),u?t(e,"RELATIVE_FILEPATH","files\\text.txt"):t(e,"RELATIVE_FILEPATH","files/text.txt"),n.dispose()})});
