import n from"assert";import{promiseWithResolvers as A}from"../../../../../base/common/async.js";import{DisposableStore as S}from"../../../../../base/common/lifecycle.js";import{assertType as f}from"../../../../../base/common/types.js";import{URI as k}from"../../../../../base/common/uri.js";import{runWithFakedTimers as C}from"../../../../../base/test/common/timeTravelScheduler.js";import"../../../../browser/editorBrowser.js";import{LanguageFeatureRegistry as w}from"../../../../common/languageFeatureRegistry.js";import*as y from"../../../../common/languages.js";import"../../../../common/model/textModel.js";import{CodeActionModel as T,CodeActionsState as h}from"../../browser/codeActionModel.js";import{createTestCodeEditor as L}from"../../../../test/browser/testCodeEditor.js";import{createTextModel as N}from"../../../../test/common/testTextModel.js";import{MockContextKeyService as b}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{MarkerService as E}from"../../../../../platform/markers/common/markerService.js";const v={provideCodeActions(){return{actions:[{title:"test",command:{id:"test-command",title:"test",arguments:[]}}],dispose(){}}}};suite("CodeActionModel",()=>{const l="foo-lang",g=k.parse("untitled:path");let p,r,o,i;const t=new S;setup(()=>{t.clear(),r=new E,p=N(`foobar  foo bar
farboo far boo`,l,void 0,g),o=L(p),o.setPosition({lineNumber:1,column:1}),i=new w}),teardown(()=>{t.clear(),o.dispose(),p.dispose(),r.dispose()}),test("Oracle -> marker added",async()=>{const{promise:c,resolve:a}=A();await C({useFakeTimers:!0},()=>{const u=i.register(l,v);t.add(u);const d=new b,s=t.add(new T(o,i,r,d,void 0));return t.add(s.onDidChangeState(e=>{f(e.type===h.Type.Triggered),n.strictEqual(e.trigger.type,y.CodeActionTriggerType.Auto),n.ok(e.actions),e.actions.then(m=>{s.dispose(),n.strictEqual(m.validActions.length,1),a()},a)})),r.changeOne("fake",g,[{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:6,message:"error",severity:1,code:"",source:""}]),c})}),test("Oracle -> position changed",async()=>{await C({useFakeTimers:!0},()=>{const c=i.register(l,v);return t.add(c),r.changeOne("fake",g,[{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:6,message:"error",severity:1,code:"",source:""}]),o.setPosition({lineNumber:2,column:1}),new Promise((a,u)=>{const d=new b,s=t.add(new T(o,i,r,d,void 0));t.add(s.onDidChangeState(e=>{f(e.type===h.Type.Triggered),n.strictEqual(e.trigger.type,y.CodeActionTriggerType.Auto),n.ok(e.actions),e.actions.then(m=>{s.dispose(),n.strictEqual(m.validActions.length,1),a(void 0)},u)})),o.setPosition({lineNumber:1,column:1})})})}),test("Oracle -> should only auto trigger once for cursor and marker update right after each other",async()=>{const{promise:c,resolve:a}=A();await C({useFakeTimers:!0},()=>{const u=i.register(l,v);t.add(u);let d=0;const s=new b,e=t.add(new T(o,i,r,s,void 0));return t.add(e.onDidChangeState(m=>{f(m.type===h.Type.Triggered),n.strictEqual(m.trigger.type,y.CodeActionTriggerType.Auto),++d,setTimeout(()=>{e.dispose(),n.strictEqual(d,1),a()},0)},5)),r.changeOne("fake",g,[{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:6,message:"error",severity:1,code:"",source:""}]),o.setSelection({startLineNumber:1,startColumn:1,endLineNumber:4,endColumn:1}),c})})});
