var D=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var y=(s,o,e,t)=>{for(var a=t>1?void 0:t?B(o,e):o,n=s.length-1,c;n>=0;n--)(c=s[n])&&(a=(t?c(o,e,a):c(a))||a);return t&&a&&D(o,e,a),a},f=(s,o)=>(e,t)=>o(e,t,s);import r from"assert";import{Delayer as N}from"../../../../../base/common/async.js";import*as _ from"../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as I}from"../../../../../base/test/common/utils.js";import"../../../../browser/editorBrowser.js";import"../../../../browser/editorExtensions.js";import{EditOperation as v}from"../../../../common/core/editOperation.js";import{Position as P}from"../../../../common/core/position.js";import{Range as h}from"../../../../common/core/range.js";import{Selection as S}from"../../../../common/core/selection.js";import{CommonFindController as W,FindStartFocusAction as p,NextMatchFindAction as F,NextSelectionMatchFindAction as E,StartFindAction as g,StartFindReplaceAction as U,StartFindWithSelectionAction as b}from"../../browser/findController.js";import{CONTEXT_FIND_INPUT_FOCUSED as M}from"../../browser/findModel.js";import{withAsyncTestCodeEditor as l}from"../../../../test/browser/testCodeEditor.js";import{IClipboardService as x}from"../../../../../platform/clipboard/common/clipboardService.js";import{IContextKeyService as O}from"../../../../../platform/contextkey/common/contextkey.js";import{IHoverService as K}from"../../../../../platform/hover/browser/hover.js";import"../../../../../platform/instantiation/common/instantiation.js";import{ServiceCollection as R}from"../../../../../platform/instantiation/common/serviceCollection.js";import{INotificationService as T}from"../../../../../platform/notification/common/notification.js";import{IStorageService as A,InMemoryStorageService as q,StorageScope as C,StorageTarget as m}from"../../../../../platform/storage/common/storage.js";let i=class extends W{hasFocus;delayUpdateHistory=!1;_findInputFocused;constructor(o,e,t,a,n,c){super(o,e,t,a,n,c),this._findInputFocused=M.bindTo(e),this._updateHistoryDelayer=new N(50),this.hasFocus=!1}async _start(o){await super._start(o),o.shouldFocus!==p.NoFocusChange&&(this.hasFocus=!0);const e=o.shouldFocus===p.FocusFindInput;this._findInputFocused.set(e)}};i=y([f(1,O),f(2,A),f(3,x),f(4,T),f(5,K)],i);function u(s){return[s.startLineNumber,s.startColumn,s.endLineNumber,s.endColumn]}function d(s,o,e,t){return s.invokeFunction(a=>Promise.resolve(e.runEditorCommand(a,o,t)))}suite("FindController",()=>{I();let s="";const o=new R;o.set(A,new q),_.isMacintosh&&o.set(x,{readFindText:()=>s,writeFindText:e=>{s=e}}),test('issue #1857: F3, Find Next, acts like "Find Under Cursor"',async()=>{await l(["ABC","ABC","XYZ","ABC"],{serviceCollection:o},async(e,t,a)=>{s="";const n=e.registerAndInstantiateContribution(i.ID,i),c=n.getState(),w=new F;await d(a,e,g),c.change({searchString:"A"},!0),c.change({searchString:"AB"},!0),c.change({searchString:"ABC"},!0),r.deepStrictEqual(u(e.getSelection()),[1,1,1,4]),n.closeFindWidget(),n.hasFocus=!1,r.deepStrictEqual(u(e.getSelection()),[1,1,1,4]),e.pushUndoStop(),e.executeEdits("test",[v.delete(new h(1,1,1,4))]),e.executeEdits("test",[v.insert(new P(1,1),"XYZ")]),e.pushUndoStop(),r.strictEqual(e.getModel().getLineContent(1),"XYZ"),r.deepStrictEqual(u(e.getSelection()),[1,4,1,4]),await w.run(null,e),r.strictEqual(c.searchString,"ABC"),r.strictEqual(n.hasFocus,!1),n.dispose()})}),test("issue #3090: F3 does not loop with two matches on a single line",async()=>{await l(["import nls = require('vs/nls');"],{serviceCollection:o},async e=>{s="";const t=e.registerAndInstantiateContribution(i.ID,i),a=new F;e.setPosition({lineNumber:1,column:9}),await a.run(null,e),r.deepStrictEqual(u(e.getSelection()),[1,26,1,29]),await a.run(null,e),r.deepStrictEqual(u(e.getSelection()),[1,8,1,11]),t.dispose()})}),test("issue #6149: Auto-escape highlighted text for search and replace regex mode",async()=>{await l(["var x = (3 * 5)","var y = (3 * 5)","var z = (3  * 5)"],{serviceCollection:o},async(e,t,a)=>{s="";const n=e.registerAndInstantiateContribution(i.ID,i),c=new F;e.setSelection(new S(1,9,1,13)),n.toggleRegex(),await d(a,e,g),await c.run(null,e),r.deepStrictEqual(u(e.getSelection()),[2,9,2,13]),await c.run(null,e),r.deepStrictEqual(u(e.getSelection()),[1,9,1,13]),n.dispose()})}),test("issue #41027: Don't replace find input value on replace action if find input is active",async()=>{await l(["test"],{serviceCollection:o},async(e,t,a)=>{const n="tes.",c=e.registerAndInstantiateContribution(i.ID,i),w=new F;c.toggleRegex(),c.setSearchString(n),await c.start({forceRevealReplace:!1,seedSearchStringFromSelection:"none",seedSearchStringFromNonEmptySelection:!1,seedSearchStringFromGlobalClipboard:!1,shouldFocus:p.FocusFindInput,shouldAnimate:!1,updateSearchScope:!1,loop:!0}),await w.run(null,e),await d(a,e,U),r.strictEqual(c.getState().searchString,n),c.dispose()})}),test("issue #9043: Clear search scope when find widget is hidden",async()=>{await l(["var x = (3 * 5)","var y = (3 * 5)","var z = (3 * 5)"],{serviceCollection:o},async e=>{s="";const t=e.registerAndInstantiateContribution(i.ID,i);await t.start({forceRevealReplace:!1,seedSearchStringFromSelection:"none",seedSearchStringFromNonEmptySelection:!1,seedSearchStringFromGlobalClipboard:!1,shouldFocus:p.NoFocusChange,shouldAnimate:!1,updateSearchScope:!1,loop:!0}),r.strictEqual(t.getState().searchScope,null),t.getState().change({searchScope:[new h(1,1,1,5)]},!1),r.deepStrictEqual(t.getState().searchScope,[new h(1,1,1,5)]),t.closeFindWidget(),r.strictEqual(t.getState().searchScope,null)})}),test("issue #18111: Regex replace with single space replaces with no space",async()=>{await l(["HRESULT OnAmbientPropertyChange(DISPID   dispid);"],{serviceCollection:o},async(e,t,a)=>{s="";const n=e.registerAndInstantiateContribution(i.ID,i);await d(a,e,g),n.getState().change({searchString:"\\b\\s{3}\\b",replaceString:" ",isRegex:!0},!1),n.moveToNextMatch(),r.deepStrictEqual(e.getSelections().map(u),[[1,39,1,42]]),n.replace(),r.deepStrictEqual(e.getValue(),"HRESULT OnAmbientPropertyChange(DISPID dispid);"),n.dispose()})}),test("issue #24714: Regular expression with ^ in search & replace",async()=>{await l(["","line2","line3"],{serviceCollection:o},async(e,t,a)=>{s="";const n=e.registerAndInstantiateContribution(i.ID,i);await d(a,e,g),n.getState().change({searchString:"^",replaceString:"x",isRegex:!0},!1),n.moveToNextMatch(),r.deepStrictEqual(e.getSelections().map(u),[[2,1,2,1]]),n.replace(),r.deepStrictEqual(e.getValue(),`
xline2
line3`),n.dispose()})}),test("issue #38232: Find Next Selection, regex enabled",async()=>{await l(["([funny]","","([funny]"],{serviceCollection:o},async e=>{s="";const t=e.registerAndInstantiateContribution(i.ID,i),a=new E;t.getState().change({isRegex:!0},!1),e.setSelection(new S(1,1,1,9)),await a.run(null,e),r.deepStrictEqual(e.getSelections().map(u),[[3,1,3,9]]),t.dispose()})}),test("issue #38232: Find Next Selection, regex enabled, find widget open",async()=>{await l(["([funny]","","([funny]"],{serviceCollection:o},async(e,t,a)=>{s="";const n=e.registerAndInstantiateContribution(i.ID,i),c=new E;await d(a,e,g),n.getState().change({isRegex:!0},!1),e.setSelection(new S(1,1,1,9)),await c.run(null,e),r.deepStrictEqual(e.getSelections().map(u),[[3,1,3,9]]),n.dispose()})}),test("issue #47400, CMD+E supports feeding multiple line of text into the find widget",async()=>{await l(["ABC","ABC","XYZ","ABC","ABC"],{serviceCollection:o},async(e,t,a)=>{s="";const n=e.registerAndInstantiateContribution(i.ID,i);e.setSelection(new S(1,1,1,1)),await d(a,e,g),e.setSelection(new S(1,1,2,4));const c=new b;await c.run(null,e);const w=n.getState();r.deepStrictEqual(w.searchString.split(/\r\n|\r|\n/g),["ABC","ABC"]),e.setSelection(new S(3,1,3,1)),await c.run(null,e),n.dispose()})}),test("issue #109756, CMD+E with empty cursor should always work",async()=>{await l(["ABC","ABC","XYZ","ABC","ABC"],{serviceCollection:o},async e=>{s="";const t=e.registerAndInstantiateContribution(i.ID,i);e.setSelection(new S(1,2,1,2)),new b().run(null,e);const n=t.getState();r.deepStrictEqual(n.searchString,"ABC"),t.dispose()})})}),suite("FindController query options persistence",()=>{I();const s=new R,o=new q;o.store("editor.isRegex",!1,C.WORKSPACE,m.USER),o.store("editor.matchCase",!1,C.WORKSPACE,m.USER),o.store("editor.wholeWord",!1,C.WORKSPACE,m.USER),s.set(A,o),test("matchCase",async()=>{await l(["abc","ABC","XYZ","ABC"],{serviceCollection:s},async(e,t,a)=>{o.store("editor.matchCase",!0,C.WORKSPACE,m.USER);const n=e.registerAndInstantiateContribution(i.ID,i),c=n.getState();await d(a,e,g),c.change({searchString:"ABC"},!0),r.deepStrictEqual(u(e.getSelection()),[2,1,2,4]),n.dispose()})}),o.store("editor.matchCase",!1,C.WORKSPACE,m.USER),o.store("editor.wholeWord",!0,C.WORKSPACE,m.USER),test("wholeWord",async()=>{await l(["ABC","AB","XYZ","ABC"],{serviceCollection:s},async(e,t,a)=>{const n=e.registerAndInstantiateContribution(i.ID,i),c=n.getState();await d(a,e,g),c.change({searchString:"AB"},!0),r.deepStrictEqual(u(e.getSelection()),[2,1,2,3]),n.dispose()})}),test("toggling options is saved",async()=>{await l(["ABC","AB","XYZ","ABC"],{serviceCollection:s},async e=>{const t=e.registerAndInstantiateContribution(i.ID,i);t.toggleRegex(),r.strictEqual(o.getBoolean("editor.isRegex",C.WORKSPACE),!0),t.dispose()})}),test("issue #27083: Update search scope once find widget becomes visible",async()=>{await l(["var x = (3 * 5)","var y = (3 * 5)","var z = (3 * 5)"],{serviceCollection:s,find:{autoFindInSelection:"always",globalFindClipboard:!1}},async e=>{const t=e.registerAndInstantiateContribution(i.ID,i),a={forceRevealReplace:!1,seedSearchStringFromSelection:"none",seedSearchStringFromNonEmptySelection:!1,seedSearchStringFromGlobalClipboard:!1,shouldFocus:p.NoFocusChange,shouldAnimate:!1,updateSearchScope:!0,loop:!0};e.setSelection(new h(1,1,2,1)),t.start(a),r.deepStrictEqual(t.getState().searchScope,[new S(1,1,2,1)]),t.closeFindWidget(),e.setSelections([new S(1,1,2,1),new S(2,1,2,5)]),t.start(a),r.deepStrictEqual(t.getState().searchScope,[new S(1,1,2,1),new S(2,1,2,5)])})}),test("issue #58604: Do not update searchScope if it is empty",async()=>{await l(["var x = (3 * 5)","var y = (3 * 5)","var z = (3 * 5)"],{serviceCollection:s,find:{autoFindInSelection:"always",globalFindClipboard:!1}},async e=>{e.setSelection(new h(1,2,1,2));const t=e.registerAndInstantiateContribution(i.ID,i);await t.start({forceRevealReplace:!1,seedSearchStringFromSelection:"none",seedSearchStringFromNonEmptySelection:!1,seedSearchStringFromGlobalClipboard:!1,shouldFocus:p.NoFocusChange,shouldAnimate:!1,updateSearchScope:!0,loop:!0}),r.deepStrictEqual(t.getState().searchScope,null)})}),test("issue #58604: Update searchScope if it is not empty",async()=>{await l(["var x = (3 * 5)","var y = (3 * 5)","var z = (3 * 5)"],{serviceCollection:s,find:{autoFindInSelection:"always",globalFindClipboard:!1}},async e=>{e.setSelection(new h(1,2,1,3));const t=e.registerAndInstantiateContribution(i.ID,i);await t.start({forceRevealReplace:!1,seedSearchStringFromSelection:"none",seedSearchStringFromNonEmptySelection:!1,seedSearchStringFromGlobalClipboard:!1,shouldFocus:p.NoFocusChange,shouldAnimate:!1,updateSearchScope:!0,loop:!0}),r.deepStrictEqual(t.getState().searchScope,[new S(1,2,1,3)])})}),test("issue #27083: Find in selection when multiple lines are selected",async()=>{await l(["var x = (3 * 5)","var y = (3 * 5)","var z = (3 * 5)"],{serviceCollection:s,find:{autoFindInSelection:"multiline",globalFindClipboard:!1}},async e=>{e.setSelection(new h(1,6,2,1));const t=e.registerAndInstantiateContribution(i.ID,i);await t.start({forceRevealReplace:!1,seedSearchStringFromSelection:"none",seedSearchStringFromNonEmptySelection:!1,seedSearchStringFromGlobalClipboard:!1,shouldFocus:p.NoFocusChange,shouldAnimate:!1,updateSearchScope:!0,loop:!0}),r.deepStrictEqual(t.getState().searchScope,[new S(1,6,2,1)])})})});
