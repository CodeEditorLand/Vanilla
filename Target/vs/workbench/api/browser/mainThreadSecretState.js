var h=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=(o,i,e,t)=>{for(var r=t>1?void 0:t?p(i,e):i,s=o.length-1,a;s>=0;s--)(a=o[s])&&(r=(t?a(i,e,r):a(r))||r);return t&&r&&h(i,e,r),r},n=(o,i)=>(e,t)=>i(e,t,o);import{Disposable as v}from"../../../base/common/lifecycle.js";import{extHostNamedCustomer as m}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as l,MainContext as u}from"../common/extHost.protocol.js";import{ILogService as w}from"../../../platform/log/common/log.js";import{SequencerByKey as f}from"../../../base/common/async.js";import{ISecretStorageService as y}from"../../../platform/secrets/common/secrets.js";import{IBrowserWorkbenchEnvironmentService as P}from"../../services/environment/browser/environmentService.js";let c=class extends v{constructor(e,t,r,s){super();this.secretStorageService=t;this.logService=r;this._proxy=e.getProxy(l.ExtHostSecretState),this._register(this.secretStorageService.onDidChangeSecret(a=>{try{const{extensionId:S,key:g}=this.parseKey(a);S&&g&&this._proxy.$onDidChangePassword({extensionId:S,key:g})}catch{}}))}_proxy;_sequencer=new f;$getPassword(e,t){return this.logService.trace(`[mainThreadSecretState] Getting password for ${e} extension: `,t),this._sequencer.queue(e,()=>this.doGetPassword(e,t))}async doGetPassword(e,t){const r=this.getKey(e,t),s=await this.secretStorageService.get(r);return this.logService.trace(`[mainThreadSecretState] ${s?"P":"No p"}assword found for: `,e,t),s}$setPassword(e,t,r){return this.logService.trace(`[mainThreadSecretState] Setting password for ${e} extension: `,t),this._sequencer.queue(e,()=>this.doSetPassword(e,t,r))}async doSetPassword(e,t,r){const s=this.getKey(e,t);await this.secretStorageService.set(s,r),this.logService.trace("[mainThreadSecretState] Password set for: ",e,t)}$deletePassword(e,t){return this.logService.trace(`[mainThreadSecretState] Deleting password for ${e} extension: `,t),this._sequencer.queue(e,()=>this.doDeletePassword(e,t))}async doDeletePassword(e,t){const r=this.getKey(e,t);await this.secretStorageService.delete(r),this.logService.trace("[mainThreadSecretState] Password deleted for: ",e,t)}getKey(e,t){return JSON.stringify({extensionId:e,key:t})}parseKey(e){return JSON.parse(e)}};c=d([m(u.MainThreadSecretState),n(1,y),n(2,w),n(3,P)],c);export{c as MainThreadSecretState};
