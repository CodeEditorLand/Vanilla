import t from"assert";import*as b from"sinon";import{timeout as O}from"../../../../base/common/async.js";import{VSBuffer as F}from"../../../../base/common/buffer.js";import{CancellationTokenSource as L}from"../../../../base/common/cancellation.js";import{Event as y}from"../../../../base/common/event.js";import{Iterable as v}from"../../../../base/common/iterator.js";import{URI as q}from"../../../../base/common/uri.js";import{mock as _,mockObject as H}from"../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as j}from"../../../../base/test/common/utils.js";import*as V from"../../../../editor/common/core/range.js";import{ExtensionIdentifier as $}from"../../../../platform/extensions/common/extensions.js";import{NullLogService as A}from"../../../../platform/log/common/log.js";import"../../common/extHost.protocol.js";import{ExtHostCommands as z}from"../../common/extHostCommands.js";import{ExtHostDocumentsAndEditors as G}from"../../common/extHostDocumentsAndEditors.js";import"../../common/extHostTelemetry.js";import{ExtHostTesting as K,TestRunCoordinator as J,TestRunDto as Q,TestRunProfileImpl as W}from"../../common/extHostTesting.js";import{ExtHostTestItemCollection as X,TestItemImpl as g}from"../../common/extHostTestItem.js";import*as p from"../../common/extHostTypeConverters.js";import{Location as Y,Position as S,Range as M,TestMessage as C,TestRunProfileKind as D,TestRunRequest as Z,TestTag as P}from"../../common/extHostTypes.js";import{AnyCallRPCProtocol as ee}from"../common/testRPCProtocol.js";import{TestId as T}from"../../../contrib/testing/common/testId.js";import{TestDiffOpType as i,TestItemExpandState as h,TestMessageType as B}from"../../../contrib/testing/common/testTypes.js";import{nullExtensionDescription as N}from"../../../services/extensions/common/extensions.js";const U=E=>({id:E.id,label:E.label,uri:E.uri,range:E.range}),te=(E,u)=>{if(!E)throw new t.AssertionError({message:"Expected a to be defined",actual:E});if(!u)throw new t.AssertionError({message:"Expected b to be defined",actual:u});t.deepStrictEqual(U(E),U(u));const e=[...E.children].map(([n,r])=>r.id).sort(),w=[...u.children].map(([n,r])=>r.id).sort();t.strictEqual(e.length,w.length,`expected ${E.label}.children.length == ${u.label}.children.length`),e.forEach(n=>te(E.children.get(n),u.children.get(n)))};suite("ExtHost Testing",()=>{class E extends X{setDiff(r){this.diff=r}}teardown(()=>{b.restore()});const u=j();let e,w=[];setup(()=>{w=[],e=u.add(new E("ctrlId","root",{getDocument:()=>{}})),e.resolveHandler=n=>{if(w.push(n?.id),n===void 0){const r=new g("ctrlId","id-a","a",q.file("/"));r.canResolveChildren=!0;const d=new g("ctrlId","id-b","b",q.file("/"));e.root.children.add(r),e.root.children.add(d)}else n.id==="id-a"&&(n.children.add(new g("ctrlId","id-aa","aa",q.file("/"))),n.children.add(new g("ctrlId","id-ab","ab",q.file("/"))))},u.add(e.onDidGenerateDiff(n=>e.setDiff(n)))}),suite("OwnedTestCollection",()=>{test("adds a root recursively",async()=>{await e.expand(e.root.id,1/0);const n=e.root.children.get("id-a"),r=e.root.children.get("id-b");t.deepStrictEqual(e.collectDiff(),[{op:i.Add,item:{controllerId:"ctrlId",expand:h.BusyExpanding,item:{...p.TestItem.from(e.root)}}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.BusyExpanding,item:{...p.TestItem.from(n)}}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(n.children.get("id-aa"))}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(n.children.get("id-ab"))}},{op:i.Update,item:{extId:new T(["ctrlId","id-a"]).toString(),expand:h.Expanded}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(r)}},{op:i.Update,item:{extId:e.root.id,expand:h.Expanded}}])}),test("parents are set correctly",()=>{e.expand(e.root.id,1/0),e.collectDiff();const n=e.root.children.get("id-a"),r=n.children.get("id-ab");t.strictEqual(n.parent,void 0),t.strictEqual(r.parent,n)}),test("can add an item with same ID as root",()=>{e.collectDiff();const n=new g("ctrlId","ctrlId","c",void 0);e.root.children.add(n),t.deepStrictEqual(e.collectDiff(),[{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(n)}}])}),test("no-ops if items not changed",()=>{e.collectDiff(),t.deepStrictEqual(e.collectDiff(),[])}),test("watches property mutations",()=>{e.expand(e.root.id,1/0),e.collectDiff(),e.root.children.get("id-a").description="Hello world",t.deepStrictEqual(e.collectDiff(),[{op:i.Update,item:{extId:new T(["ctrlId","id-a"]).toString(),item:{description:"Hello world"}}}])}),test("removes children",()=>{e.expand(e.root.id,1/0),e.collectDiff(),e.root.children.delete("id-a"),t.deepStrictEqual(e.collectDiff(),[{op:i.Remove,itemId:new T(["ctrlId","id-a"]).toString()}]),t.deepStrictEqual([...e.tree.keys()].sort(),[e.root.id,new T(["ctrlId","id-b"]).toString()]),t.strictEqual(e.tree.size,2)}),test("adds new children",()=>{e.expand(e.root.id,1/0),e.collectDiff();const n=new g("ctrlId","id-ac","c",void 0);e.root.children.get("id-a").children.add(n),t.deepStrictEqual(e.collectDiff(),[{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(n)}}]),t.deepStrictEqual([...e.tree.values()].map(r=>r.actual.id).sort(),[e.root.id,"id-a","id-aa","id-ab","id-ac","id-b"]),t.strictEqual(e.tree.size,6)}),test("manages tags correctly",()=>{e.expand(e.root.id,1/0),e.collectDiff();const n=new P("tag1"),r=new P("tag2"),d=new P("tag3"),c=new g("ctrlId","id-ac","c",void 0);c.tags=[n,r],e.root.children.get("id-a").children.add(c),t.deepStrictEqual(e.collectDiff(),[{op:i.AddTag,tag:{id:"ctrlId\0tag1"}},{op:i.AddTag,tag:{id:"ctrlId\0tag2"}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(c)}}]),c.tags=[r,d],t.deepStrictEqual(e.collectDiff(),[{op:i.AddTag,tag:{id:"ctrlId\0tag3"}},{op:i.Update,item:{extId:new T(["ctrlId","id-a","id-ac"]).toString(),item:{tags:["ctrlId\0tag2","ctrlId\0tag3"]}}},{op:i.RemoveTag,id:"ctrlId\0tag1"}]);const l=e.root.children.get("id-a");l.tags=[r],l.children.replace([]),t.deepStrictEqual(e.collectDiff().filter(m=>m.op===i.RemoveTag),[{op:i.RemoveTag,id:"ctrlId\0tag3"}])}),test("replaces on uri change",()=>{e.expand(e.root.id,1/0),e.collectDiff();const n=e.root.children.get("id-a"),r=e.root.children.get("id-a").uri?.with({path:"/different"}),d=new g("ctrlId","id-a","Hello world",r);d.children.replace([...n.children].map(([c,l])=>l)),e.root.children.replace([...e.root.children].map(([c,l])=>c==="id-a"?d:l)),t.deepStrictEqual(e.collectDiff(),[{op:i.Remove,itemId:new T(["ctrlId","id-a"]).toString()},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:{...p.TestItem.from(d)}}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(d.children.get("id-aa"))}},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(d.children.get("id-ab"))}}])}),test("treats in-place replacement as mutation",()=>{e.expand(e.root.id,1/0),e.collectDiff();const n=e.root.children.get("id-a"),r=e.root.children.get("id-a").uri,d=new g("ctrlId","id-a","Hello world",r);d.children.replace([...n.children].map(([c,l])=>l)),e.root.children.replace([d,new g("ctrlId","id-b",e.root.children.get("id-b").label,r)]),t.deepStrictEqual(e.collectDiff(),[{op:i.Update,item:{extId:new T(["ctrlId","id-a"]).toString(),item:{label:"Hello world"}}},{op:i.DocumentSynced,docv:void 0,uri:r}]),d.label="still connected",t.deepStrictEqual(e.collectDiff(),[{op:i.Update,item:{extId:new T(["ctrlId","id-a"]).toString(),item:{label:"still connected"}}}]),n.label="no longer connected",t.deepStrictEqual(e.collectDiff(),[])}),suite("expandibility restoration",()=>{const n=async(r=!0)=>{const d=e.root.children.get("id-a").uri,c=new g("ctrlId","id-a","Hello world",d);c.canResolveChildren=r,e.root.children.replace([c,new g("ctrlId","id-b",e.root.children.get("id-b").label,d)]),await O(0)};test("does not restore an unexpanded state",async()=>{await e.expand(e.root.id,0),t.deepStrictEqual(w,[void 0]),await n(),t.deepStrictEqual(w,[void 0])}),test("restores resolve state on replacement",async()=>{await e.expand(e.root.id,1/0),t.deepStrictEqual(w,[void 0,"id-a"]),await n(),t.deepStrictEqual(w,[void 0,"id-a","id-a"])}),test("does not expand if new child is not expandable",async()=>{await e.expand(e.root.id,1/0),t.deepStrictEqual(w,[void 0,"id-a"]),await n(!1),t.deepStrictEqual(w,[void 0,"id-a"])})}),test("treats in-place replacement as mutation deeply",()=>{e.expand(e.root.id,1/0),e.collectDiff();const n=e.root.children.get("id-a"),r=n.uri,d=new g("ctrlId","id-a",e.root.children.get("id-a").label,r),c=n.children.get("id-aa"),l=n.children.get("id-ab"),m=new g("ctrlId","id-ab","Hello world",r);d.children.replace([c,m]),e.root.children.replace([d,e.root.children.get("id-b")]),t.deepStrictEqual(e.collectDiff(),[{op:i.Update,item:{extId:T.fromExtHostTestItem(l,"ctrlId").toString(),item:{label:"Hello world"}}},{op:i.DocumentSynced,docv:void 0,uri:r}]),c.label="still connected1",m.label="still connected2",l.label="not connected3",t.deepStrictEqual(e.collectDiff(),[{op:i.Update,item:{extId:new T(["ctrlId","id-a","id-aa"]).toString(),item:{label:"still connected1"}}},{op:i.Update,item:{extId:new T(["ctrlId","id-a","id-ab"]).toString(),item:{label:"still connected2"}}}]),t.strictEqual(m.parent,d),t.strictEqual(c.parent,d),t.deepStrictEqual(d.parent,void 0)}),test("moves an item to be a new child",async()=>{await e.expand(e.root.id,0),e.collectDiff();const n=e.root.children.get("id-b"),r=e.root.children.get("id-a");r.children.add(n),t.deepStrictEqual(e.collectDiff(),[{op:i.Remove,itemId:new T(["ctrlId","id-b"]).toString()},{op:i.Add,item:{controllerId:"ctrlId",expand:h.NotExpandable,item:p.TestItem.from(n)}}]),n.label="still connected",t.deepStrictEqual(e.collectDiff(),[{op:i.Update,item:{extId:new T(["ctrlId","id-a","id-b"]).toString(),item:{label:"still connected"}}}]),t.deepStrictEqual([...e.root.children].map(([d,c])=>c),[e.root.children.get("id-a")]),t.deepStrictEqual(n.parent,r)}),test("sends document sync events",async()=>{await e.expand(e.root.id,0),e.collectDiff();const n=e.root.children.get("id-a");n.range=new M(new S(0,0),new S(1,0)),t.deepStrictEqual(e.collectDiff(),[{op:i.DocumentSynced,docv:void 0,uri:q.file("/")},{op:i.Update,item:{extId:new T(["ctrlId","id-a"]).toString(),item:{range:V.Range.lift({endColumn:1,endLineNumber:2,startColumn:1,startLineNumber:1})}}}]),n.range=n.range,t.deepStrictEqual(e.collectDiff(),[{op:i.DocumentSynced,docv:void 0,uri:q.file("/")}]);const r=q.file("/"),d=new g("ctrlId","id-a","a",r);d.range=n.range,e.root.children.replace([d,e.root.children.get("id-b")]),t.deepStrictEqual(e.collectDiff(),[{op:i.DocumentSynced,docv:void 0,uri:r}])})}),suite("MirroredTestCollection",()=>{}),suite("TestRunTracker",()=>{let n,r,d,c,l,m;const I={};teardown(()=>{for(const{id:a}of r.trackers)r.disposeTestRun(a)}),setup(async()=>{n=H()(),d=new L,r=new J(n,new A),c=new W(H()(),new Map,new Set,y.None,"ctrlId",42,"Do Run",D.Run,()=>{},!1),await e.expand(e.root.id,1/0),e.collectDiff(),l={include:void 0,exclude:[e.root.children.get("id-b")],profile:c,preserveFocus:!1},m=Q.fromInternal({controllerId:"ctrl",profileId:c.profileId,excludeExtIds:["id-b"],runId:"run-id",testIds:[e.root.id]},e)}),test("tracks a run started from a main thread request",()=>{const a=u.add(r.prepareForMainThreadTestRun(I,l,m,c,d.token));t.strictEqual(a.hasRunningTasks,!1);const o=r.createTestRun(I,"ctrl",e,l,"run1",!0),s=r.createTestRun(I,"ctrl",e,l,"run2",!0);t.strictEqual(n.$startedExtensionTestRun.called,!1),t.strictEqual(a.hasRunningTasks,!0),o.appendOutput("hello");const f=n.$appendOutputToRun.args[0]?.[1];t.deepStrictEqual([["run-id",f,F.fromString("hello"),void 0,void 0]],n.$appendOutputToRun.args),o.end(),t.strictEqual(n.$finishedExtensionTestRun.called,!1),t.strictEqual(a.hasRunningTasks,!0),s.end(),t.strictEqual(n.$finishedExtensionTestRun.called,!1),t.strictEqual(a.hasRunningTasks,!1)}),test("run cancel force ends after a timeout",()=>{const a=b.useFakeTimers();try{const o=u.add(r.prepareForMainThreadTestRun(I,l,m,c,d.token)),s=r.createTestRun(I,"ctrl",e,l,"run1",!0),f=b.stub();u.add(o.onEnd(f)),t.strictEqual(s.token.isCancellationRequested,!1),t.strictEqual(o.hasRunningTasks,!0),o.cancel(),t.strictEqual(s.token.isCancellationRequested,!0),t.strictEqual(o.hasRunningTasks,!0),a.tick(9999),t.strictEqual(o.hasRunningTasks,!0),t.strictEqual(f.called,!1),a.tick(1),t.strictEqual(f.called,!0),t.strictEqual(o.hasRunningTasks,!1)}finally{a.restore()}}),test("run cancel force ends on second cancellation request",()=>{const a=u.add(r.prepareForMainThreadTestRun(I,l,m,c,d.token)),o=r.createTestRun(I,"ctrl",e,l,"run1",!0),s=b.stub();u.add(a.onEnd(s)),t.strictEqual(o.token.isCancellationRequested,!1),t.strictEqual(a.hasRunningTasks,!0),a.cancel(),t.strictEqual(o.token.isCancellationRequested,!0),t.strictEqual(a.hasRunningTasks,!0),t.strictEqual(s.called,!1),a.cancel(),t.strictEqual(a.hasRunningTasks,!1),t.strictEqual(s.called,!0)}),test("tracks a run started from an extension request",()=>{const a=r.createTestRun(I,"ctrl",e,l,"hello world",!1),o=v.first(r.trackers);t.strictEqual(o.hasRunningTasks,!0),t.deepStrictEqual(n.$startedExtensionTestRun.args,[[{profile:{group:2,id:42},controllerId:"ctrl",id:o.id,include:[e.root.id],exclude:[new T(["ctrlId","id-b"]).toString()],persist:!1,continuous:!1,preserveFocus:!1}]]);const s=r.createTestRun(I,"ctrl",e,l,"run2",!0),f=r.createTestRun(I,"ctrl",e,{...l},"task3Detached",!0);a.end(),t.strictEqual(n.$finishedExtensionTestRun.called,!1),t.strictEqual(o.hasRunningTasks,!0),s.end(),t.deepStrictEqual(n.$finishedExtensionTestRun.args,[[o.id]]),t.strictEqual(o.hasRunningTasks,!1),f.end()}),test("adds tests to run smartly",()=>{const a=r.createTestRun(I,"ctrlId",e,l,"hello world",!1),o=v.first(r.trackers),s=[];t.deepStrictEqual(n.$addTestsToRun.args,s),a.passed(e.root.children.get("id-a").children.get("id-aa")),s.push(["ctrlId",o.id,[p.TestItem.from(e.root),p.TestItem.from(e.root.children.get("id-a")),p.TestItem.from(e.root.children.get("id-a").children.get("id-aa"))]]),t.deepStrictEqual(n.$addTestsToRun.args,s),a.enqueued(e.root.children.get("id-a").children.get("id-ab")),s.push(["ctrlId",o.id,[p.TestItem.from(e.root.children.get("id-a")),p.TestItem.from(e.root.children.get("id-a").children.get("id-ab"))]]),t.deepStrictEqual(n.$addTestsToRun.args,s),a.passed(e.root.children.get("id-a").children.get("id-ab")),t.deepStrictEqual(n.$addTestsToRun.args,s),a.end()}),test("adds test messages to run",()=>{const a=new g("ctrlId","id-c","test c",q.file("/testc.txt")),o=new g("ctrlId","id-d","test d",q.file("/testd.txt"));a.range=o.range=new M(new S(0,0),new S(1,0)),e.root.children.replace([a,o]);const s=r.createTestRun(I,"ctrlId",e,l,"hello world",!1),f=new C("some message");f.location=new Y(q.file("/a.txt"),new S(0,0)),s.failed(a,f);const x=n.$appendTestMessagesInRun.args[0];t.deepStrictEqual(n.$appendTestMessagesInRun.args[0],[x[0],x[1],new T(["ctrlId","id-c"]).toString(),[{message:"some message",type:B.Error,expected:void 0,contextValue:void 0,actual:void 0,location:p.location.from(f.location),stackTrace:void 0}]]),s.failed(o,new C("some message")),t.deepStrictEqual(n.$appendTestMessagesInRun.args[1],[x[0],x[1],new T(["ctrlId","id-d"]).toString(),[{message:"some message",type:B.Error,contextValue:void 0,expected:void 0,actual:void 0,location:p.location.from({uri:o.uri,range:o.range}),stackTrace:void 0}]]),s.end()}),test("guards calls after runs are ended",()=>{const a=r.createTestRun(I,"ctrl",e,l,"hello world",!1);a.end(),a.failed(e.root,new C("some message")),a.appendOutput("output"),t.strictEqual(n.$addTestsToRun.called,!1),t.strictEqual(n.$appendOutputToRun.called,!1),t.strictEqual(n.$appendTestMessagesInRun.called,!1)}),test("sets state of test with identical local IDs (#131827)",()=>{const a=e.root.children.get("id-a"),o=e.root.children.get("id-b"),s=new g("ctrlId","id-child","child",void 0);a.children.replace([s]);const f=new g("ctrlId","id-child","child",void 0);o.children.replace([f]);const x=r.createTestRun(I,"ctrl",e,new Z,"hello world",!1),k=v.first(r.trackers);x.passed(s),x.passed(f),t.deepStrictEqual(n.$addTestsToRun.args,[["ctrl",k.id,[e.root,a,s].map(R=>p.TestItem.from(R))],["ctrl",k.id,[e.root,o,f].map(R=>p.TestItem.from(R))]]),x.end()})}),suite("service",()=>{let n;class r extends K{getProfileInternalId(c,l){for(const[m,I]of this.controllers.get(c.id).profiles)if(l===I)return m;throw new Error("profile not found")}}setup(()=>{const d=ee();n=u.add(new r(d,new A,new z(d,new A,new class extends _(){onExtensionError(){return!0}}),new G(d,new A)))}),test("exposes active profiles correctly",async()=>{const d={...N,identifier:new $("ext.a"),enabledApiProposals:["testingActiveProfile"]},c={...N,identifier:new $("ext.b"),enabledApiProposals:["testingActiveProfile"]},l=u.add(n.createTestController(d,"a","ctrla")),m=u.add(l.createRunProfile("aa",D.Run,()=>{})),I=u.add(l.createRunProfile("ab",D.Run,()=>{})),a=u.add(n.createTestController(c,"b","ctrlb")),o=u.add(a.createRunProfile("ba",D.Run,()=>{})),s=u.add(a.createRunProfile("bb",D.Run,()=>{})),f=b.stub();t.deepStrictEqual(m.isDefault,!1),t.deepStrictEqual(o.isDefault,!1),t.deepStrictEqual(s.isDefault,!1);const x=y.toPromise(m.onDidChangeDefault),k=y.toPromise(o.onDidChangeDefault),R=y.toPromise(s.onDidChangeDefault);u.add(I.onDidChangeDefault(f)),t.strictEqual(f.called,!1),n.$setDefaultRunProfiles({a:[n.getProfileInternalId(l,m)],b:[n.getProfileInternalId(a,o),n.getProfileInternalId(a,s)]}),t.deepStrictEqual(await x,!0),t.deepStrictEqual(await k,!0),t.deepStrictEqual(await R,!0),t.deepStrictEqual(m.isDefault,!0),t.deepStrictEqual(o.isDefault,!0),t.deepStrictEqual(s.isDefault,!0),t.deepStrictEqual(I.isDefault,!1),u.add(m.onDidChangeDefault(f)),n.$setDefaultRunProfiles({a:[n.getProfileInternalId(l,m)]}),t.strictEqual(f.called,!1)})})});
