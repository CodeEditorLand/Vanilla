import o from"assert";import{workbenchInstantiationService as c}from"../../../../test/browser/workbenchTestServices.js";import{Range as a}from"../../../../../editor/common/core/range.js";import{CommentsPanel as s}from"../../browser/commentsView.js";import{CommentService as C,ICommentService as u}from"../../browser/commentService.js";import"../../../../../editor/common/languages.js";import{Emitter as i}from"../../../../../base/common/event.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{IViewDescriptorService as p,ViewContainerLocation as w}from"../../../../common/views.js";import{IConfigurationService as I}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as f}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{IContextViewService as g}from"../../../../../platform/contextview/browser/contextView.js";import{DisposableStore as h}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../../../base/test/common/utils.js";import"../../../../../base/common/cancellation.js";import"../../../../../base/common/uri.js";import{IHoverService as b}from"../../../../../platform/hover/browser/hover.js";import{NullHoverService as T}from"../../../../../platform/hover/test/browser/nullHoverService.js";class m{constructor(t,n,e,l,d,V){this.commentThreadHandle=t;this.controllerHandle=n;this.threadId=e;this.resource=l;this.range=d;this.comments=V}isDocumentCommentThread(){return!0}onDidChangeComments=new i().event;onDidChangeInitialCollapsibleState=new i().event;canReply=!1;onDidChangeInput=new i().event;onDidChangeRange=new i().event;onDidChangeLabel=new i().event;onDidChangeCollapsibleState=new i().event;onDidChangeState=new i().event;onDidChangeCanReply=new i().event;isDisposed=!1;isTemplate=!1;label=void 0;contextValue=void 0}class S{id="test";label="Test Comments";owner="test";features={};createCommentThreadTemplate(t,n){throw new Error("Method not implemented.")}updateCommentThreadTemplate(t,n){throw new Error("Method not implemented.")}deleteCommentThreadMain(t){throw new Error("Method not implemented.")}toggleReaction(t,n,e,l,d){throw new Error("Method not implemented.")}getDocumentComments(t,n){throw new Error("Method not implemented.")}getNotebookComments(t,n){throw new Error("Method not implemented.")}setActiveCommentAndThread(t){throw new Error("Method not implemented.")}}class E{getViewLocationById(t){return w.Panel}onDidChangeLocation=new i().event;getViewDescriptorById(t){return null}getViewContainerByViewId(t){return{id:"comments",title:{value:"Comments",original:"Comments"},ctorDescriptor:{}}}getViewContainerModel(t){return{onDidChangeContainerInfo:new i().event}}getDefaultContainerById(t){return null}}suite("Comments View",function(){teardown(()=>{t.dispose(),n.dispose(),r.dispose()}),v();let r,t,n;setup(()=>{r=new h,t=c({},r),t.stub(I,new f),t.stub(b,T),t.stub(g,{}),t.stub(p,new E),n=t.createInstance(C),t.stub(u,n),n.registerCommentController("test",new S)}),test("collapse all",async function(){const e=t.createInstance(s,{id:"comments",title:"Comments"});e.render(),n.setWorkspaceComments("test",[new m(1,1,"1","test1",new a(1,1,1,1),[{body:"test",uniqueIdInThread:1,userName:"alex"}]),new m(2,1,"1","test2",new a(1,1,1,1),[{body:"test",uniqueIdInThread:1,userName:"alex"}])]),o.strictEqual(e.getFilterStats().total,2),o.strictEqual(e.areAllCommentsExpanded(),!0),e.collapseAll(),o.strictEqual(e.isSomeCommentsExpanded(),!1),e.dispose()}),test("expand all",async function(){const e=t.createInstance(s,{id:"comments",title:"Comments"});e.render(),n.setWorkspaceComments("test",[new m(1,1,"1","test1",new a(1,1,1,1),[{body:"test",uniqueIdInThread:1,userName:"alex"}]),new m(2,1,"1","test2",new a(1,1,1,1),[{body:"test",uniqueIdInThread:1,userName:"alex"}])]),o.strictEqual(e.getFilterStats().total,2),e.collapseAll(),o.strictEqual(e.isSomeCommentsExpanded(),!1),e.expandAll(),o.strictEqual(e.areAllCommentsExpanded(),!0),e.dispose()}),test("filter by text",async function(){const e=t.createInstance(s,{id:"comments",title:"Comments"});e.setVisible(!0),e.render(),n.setWorkspaceComments("test",[new m(1,1,"1","test1",new a(1,1,1,1),[{body:"This comment is a cat.",uniqueIdInThread:1,userName:"alex"}]),new m(2,1,"1","test2",new a(1,1,1,1),[{body:"This comment is a dog.",uniqueIdInThread:1,userName:"alex"}])]),o.strictEqual(e.getFilterStats().total,2),o.strictEqual(e.getFilterStats().filtered,2),e.getFilterWidget().setFilterText("cat"),e.filters.showResolved=!1,o.strictEqual(e.getFilterStats().total,2),o.strictEqual(e.getFilterStats().filtered,1),e.clearFilterText(),e.filters.showResolved=!0,o.strictEqual(e.getFilterStats().total,2),o.strictEqual(e.getFilterStats().filtered,2),e.dispose()})});export{E as TestViewDescriptorService};
