import r from"assert";import{URI as p}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as i}from"../../../../../base/test/common/utils.js";import{isURLDomainTrusted as g}from"../../browser/trustedDomainService.js";function t(s,h){r.ok(g(p.parse(s),h),`Link
${s}
 should be allowed by rules
${JSON.stringify(h)}`)}function o(s,h){r.ok(!g(p.parse(s),h),`Link
${s}
 should NOT be allowed by rules
${JSON.stringify(h)}`)}suite("Link protection domain matching",()=>{i(),test("simple",()=>{o("https://x.org",[]),t("https://x.org",["https://x.org"]),t("https://x.org/foo",["https://x.org"]),o("https://x.org",["http://x.org"]),o("http://x.org",["https://x.org"]),o("https://www.x.org",["https://x.org"]),t("https://www.x.org",["https://www.x.org","https://y.org"])}),test("localhost",()=>{t("https://127.0.0.1",[]),t("https://127.0.0.1:3000",[]),t("https://localhost",[]),t("https://localhost:3000",[])}),test("* star",()=>{t("https://a.x.org",["https://*.x.org"]),t("https://a.b.x.org",["https://*.x.org"])}),test("no scheme",()=>{t("https://a.x.org",["a.x.org"]),t("https://a.x.org",["*.x.org"]),t("https://a.b.x.org",["*.x.org"]),t("https://x.org",["*.x.org"])}),test("sub paths",()=>{t("https://x.org/foo",["https://x.org/foo"]),t("https://x.org/foo/bar",["https://x.org/foo"]),t("https://x.org/foo",["https://x.org/foo/"]),t("https://x.org/foo/bar",["https://x.org/foo/"]),t("https://x.org/foo",["x.org/foo"]),t("https://x.org/foo",["*.org/foo"]),o("https://x.org/bar",["https://x.org/foo"]),o("https://x.org/bar",["x.org/foo"]),o("https://x.org/bar",["*.org/foo"]),t("https://x.org/foo/bar",["https://x.org/foo"]),o("https://x.org/foo2",["https://x.org/foo"]),o("https://www.x.org/foo",["https://x.org/foo"]),o("https://a.x.org/bar",["https://*.x.org/foo"]),o("https://a.b.x.org/bar",["https://*.x.org/foo"]),t("https://github.com",["https://github.com/foo/bar","https://github.com"])}),test("ports",()=>{o("https://x.org:8080/foo/bar",["https://x.org:8081/foo"]),t("https://x.org:8080/foo/bar",["https://x.org:*/foo"]),t("https://x.org/foo/bar",["https://x.org:*/foo"]),t("https://x.org:8080/foo/bar",["https://x.org:8080/foo"])}),test("ip addresses",()=>{t("http://192.168.1.7/",["http://192.168.1.7/"]),t("http://192.168.1.7/",["http://192.168.1.7"]),t("http://192.168.1.7/",["http://192.168.1.*"]),o("http://192.168.1.7:3000/",["http://192.168.*.6:*"]),t("http://192.168.1.7:3000/",["http://192.168.1.7:3000/"]),t("http://192.168.1.7:3000/",["http://192.168.1.7:*"]),t("http://192.168.1.7:3000/",["http://192.168.1.*:*"]),o("http://192.168.1.7:3000/",["http://192.168.*.6:*"])}),test("scheme match",()=>{t("http://192.168.1.7/",["http://*"]),t("http://twitter.com",["http://*"]),t("http://twitter.com/hello",["http://*"]),o("https://192.168.1.7/",["http://*"]),o("https://twitter.com/",["http://*"])}),test("case normalization",()=>{t("https://github.com/microsoft/vscode/issues/new",["https://github.com/microsoft"]),t("https://github.com/microsoft/vscode/issues/new",["https://github.com/microsoft"])}),test("ignore query & fragment - https://github.com/microsoft/vscode/issues/156839",()=>{t("https://github.com/login/oauth/authorize?foo=4",["https://github.com/login/oauth/authorize"]),t("https://github.com/login/oauth/authorize#foo",["https://github.com/login/oauth/authorize"])})});
