import{strictEqual as l}from"assert";import{getActiveDocument as g}from"../../../../../../base/browser/dom.js";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../../../base/test/common/utils.js";import{TestConfigurationService as w}from"../../../../../../platform/configuration/test/common/testConfigurationService.js";import{IContextKeyService as _}from"../../../../../../platform/contextkey/common/contextkey.js";import{NullLogService as f}from"../../../../../../platform/log/common/log.js";import{TerminalCapability as c}from"../../../../../../platform/terminal/common/capabilities/capabilities.js";import{ShellIntegrationAddon as v}from"../../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js";import{TerminalContextKeys as S}from"../../../../terminal/common/terminalContextKey.js";import{parseCompletionsFromShell as h,SuggestAddon as C}from"../../browser/terminalSuggestAddon.js";import{TerminalSuggestCommandId as b}from"../../common/terminal.suggest.js";import{workbenchInstantiationService as y}from"../../../../../test/browser/workbenchTestServices.js";import{events as T}from"./recordings/macos_bash_echo_simple.js";import{events as I}from"./recordings/macos_bash_echo_multiline.js";import{events as E}from"./recordings/windows11_pwsh_getcontent_delete_ghost.js";import{events as R}from"./recordings/windows11_pwsh_getcontent_file.js";import{events as x}from"./recordings/windows11_pwsh_input_ls_complete_ls.js";import{events as A}from"./recordings/windows11_pwsh_namespace_completion.js";import{events as k}from"./recordings/windows11_pwsh_type_before_prompt.js";import{events as P}from"./recordings/windows11_pwsh_writehost_multiline_nav_up.js";import{events as D}from"./recordings/windows11_pwsh_writehost_multiline.js";import{importAMDNodeModule as z}from"../../../../../../amdX.js";import{testRawPwshCompletions as K}from"./testRawPwshCompletions.js";import{ITerminalConfigurationService as M}from"../../../../terminal/browser/terminal.js";import{timeout as W}from"../../../../../../base/common/async.js";const j=[{name:"macos_bash_echo_simple",events:T},{name:"macos_bash_echo_multiline",events:I},{name:"windows11_pwsh_getcontent_delete_ghost",events:E},{name:"windows11_pwsh_getcontent_file",events:R},{name:"windows11_pwsh_input_ls_complete_ls",events:x},{name:"windows11_pwsh_namespace_completion",events:A},{name:"windows11_pwsh_type_before_prompt",events:k},{name:"windows11_pwsh_writehost_multiline_nav_up",events:P},{name:"windows11_pwsh_writehost_multiline",events:D}];suite("Terminal Contrib Suggest Recordings",()=>{const a=u();let n,d,p,s;setup(async()=>{const m={fontFamily:"monospace",fontSize:12,fontWeight:"normal",letterSpacing:0,lineHeight:1,integrated:{suggest:{enabled:!0,quickSuggestions:!0,suggestOnTriggerCharacters:!0,runOnEnter:"never",builtinCompletions:{pwshCode:!0,pwshGit:!0}}}},r=y({configurationService:()=>new w({files:{autoSave:!1},terminal:m})},a);r.get(M).setConfig(m);const t=(await z("@xterm/xterm","lib/xterm.js")).Terminal;n=a.add(new t({allowProposedApi:!0}));const o=a.add(new v("",!0,void 0,new f));d=o.capabilities,p=S.suggestWidgetVisible.bindTo(r.get(_)),s=a.add(r.createInstance(C,new Set(h(K)),o.capabilities,p));const i=document.createElement("div");g().body.append(i),n.open(i),s.setContainerWithOverflow(i),s.setScreen(n.element.querySelector(".xterm-screen")),n.loadAddon(o),n.loadAddon(s)});for(const m of j)test(m.name,async()=>{const r=[];a.add(s.onAcceptedCompletion(e=>r.push(e)));for(const e of m.events)switch(e.type){case"resize":{n.resize(e.cols,e.rows);break}case"output":{e.data.includes("\x1B]633;B")?await Promise.all([new Promise(t=>n.write(e.data,()=>t())),new Promise(t=>{const o=d.get(c.CommandDetection);if(o){const i=o.onCommandStarted(()=>{i.dispose(),t()})}})]):await new Promise(t=>n.write(e.data,()=>t()));break}case"input":{n.input(e.data,!0);break}case"promptInputChange":{const t=d.get(c.CommandDetection)?.promptInputModel;t&&t.getCombinedString()!==e.data&&await Promise.race([await W(1e3).then(()=>{throw new Error(`Prompt input change timed out current="${t.getCombinedString()}", expected="${e.data}"`)}),await new Promise(o=>{const i=t.onDidChangeInput(()=>{t.getCombinedString()===e.data&&(i.dispose(),o())})})]);break}case"sendText":{l(r.at(-1),e.data);break}case"command":switch(e.id){case b.AcceptSelectedSuggestion:s.acceptSelectedSuggestion();break}}})});
