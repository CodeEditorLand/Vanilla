import"../../../../../../platform/clipboard/common/clipboardService.js";import"../../../../../../platform/log/common/log.js";import"../../notebookBrowser.js";import{isTextStreamMime as a}from"../../../common/notebookCommon.js";async function v(e,i,p,s){const r=i.model,n=e&&u.includes(e)?r.outputs.find(t=>t.mime===e):r.outputs.find(t=>u.includes(t.mime));if(e=n?.mime,!e||!n)return;const d=new TextDecoder;let o=d.decode(n.data.buffer);if(a(e)){const t=i.cellViewModel;let l=t.outputsViewModels.indexOf(i)+1;for(;l<t.model.outputs.length;){const c=t.model.outputs[l].outputs.find(x=>a(x.mime));if(!c)break;o=o+d.decode(c.data.buffer),l=l+1}}e.endsWith("error")&&(o=o.replace(/\\u001b\[[0-9;]*m/gi,"").replaceAll("\\n",`
`));try{await p.writeText(o)}catch(t){s.error(`Failed to copy content: ${t}`)}}const u=["text/latex","text/html","application/vnd.code.notebook.error","application/vnd.code.notebook.stdout","application/x.notebook.stdout","application/x.notebook.stream","application/vnd.code.notebook.stderr","application/x.notebook.stderr","text/plain","text/markdown","application/json"];export{u as TEXT_BASED_MIMETYPES,v as copyCellOutput};
