import r from"assert";import"../../../../../../base/common/cancellation.js";import{Emitter as u}from"../../../../../../base/common/event.js";import{Disposable as h,DisposableStore as b}from"../../../../../../base/common/lifecycle.js";import"../../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../../base/test/common/utils.js";import{ContributedStatusBarItemController as P}from"../../../browser/contrib/cellStatusBar/contributedStatusBarItemController.js";import{INotebookCellStatusBarService as f}from"../../../common/notebookCellStatusBarService.js";import{CellKind as c}from"../../../common/notebookCommon.js";import{withTestNotebook as I}from"../testNotebookEditor.js";suite("Notebook Statusbar",()=>{const t=new b;teardown(()=>{t.clear()}),w(),test("Calls item provider",async function(){await I([["var b = 1;","javascript",c.Code,[],{}],["# header a","markdown",c.Markup,[],{}]],async(a,d,m,o)=>{const s=o.get(f);t.add(o.createInstance(P,a));const e=t.add(new class extends h{provideCalls=0;_onProvideCalled=this._register(new u);onProvideCalled=this._onProvideCalled.event;_onDidChangeStatusBarItems=this._register(new u);onDidChangeStatusBarItems=this._onDidChangeStatusBarItems.event;async provideCellStatusBarItems(S,C,T){return C===0&&(this.provideCalls++,this._onProvideCalled.fire(this.provideCalls)),{items:[]}}viewType=a.textModel.viewType}),n=i(e.onProvideCalled,"registering provider");t.add(s.registerCellStatusBarItemProvider(e)),r.strictEqual(await n,1,"should call provider on registration");const p=i(e.onProvideCalled,"updating metadata"),l=a.textModel.cells[0];l.metadata={...l.metadata,newMetadata:!0},r.strictEqual(await p,2,"should call provider on updating metadata");const v=i(e.onProvideCalled,"changing cell language");l.language="newlanguage",r.strictEqual(await v,3,"should call provider on changing language");const g=i(e.onProvideCalled,"manually firing change event");e._onDidChangeStatusBarItems.fire(),r.strictEqual(await g,4,"should call provider on manually firing change event")})})});async function i(t,a){const d=new Error("asPromise TIMEOUT reached: "+a);return new Promise((m,o)=>{const s=setTimeout(()=>{e.dispose(),o(d)},1e3),e=t(n=>{clearTimeout(s),e.dispose(),m(n)})})}
