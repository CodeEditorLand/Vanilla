import n from"assert";import{CellKind as a}from"../../common/notebookCommon.js";import{setupInstantiationService as p,withTestNotebook as t}from"./testNotebookEditor.js";import{IUndoRedoService as m}from"../../../../../platform/undoRedo/common/undoRedo.js";import{FoldingModel as o,updateFoldingStateAtIndex as k}from"../../browser/viewModel/foldingModel.js";import{DisposableStore as g}from"../../../../../base/common/lifecycle.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ensureNoDisposablesAreLeakedInTestSuite as l}from"../../../../../base/test/common/utils.js";suite("Notebook Folding",()=>{let s,u;teardown(()=>s.dispose()),l(),setup(()=>{s=new g,u=p(s),u.spy(m,"pushElement")}),test("Folding based on markdown cells",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],["## header 2.1","markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),n.strictEqual(r.regions.findRange(1),0),n.strictEqual(r.regions.findRange(2),0),n.strictEqual(r.regions.findRange(3),1),n.strictEqual(r.regions.findRange(4),1),n.strictEqual(r.regions.findRange(5),1),n.strictEqual(r.regions.findRange(6),2),n.strictEqual(r.regions.findRange(7),2)})}),test("Folding not based on code cells",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],["# comment 1","python",a.Code,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3\n```\n## comment 2\n```","markdown",a.Markup,[],{}],["body 4","markdown",a.Markup,[],{}],["## header 2.1","markdown",a.Markup,[],{}],["var e = 7;","python",a.Code,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),n.strictEqual(r.regions.findRange(1),0),n.strictEqual(r.regions.findRange(2),0),n.strictEqual(r.regions.findRange(3),0),n.strictEqual(r.regions.findRange(4),0),n.strictEqual(r.regions.findRange(5),0),n.strictEqual(r.regions.findRange(6),0),n.strictEqual(r.regions.findRange(7),1),n.strictEqual(r.regions.findRange(8),1)})}),test("Top level header in a cell wins",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`## header 2.1
# header3`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),n.strictEqual(r.regions.findRange(1),0),n.strictEqual(r.regions.findRange(2),0),n.strictEqual(r.regions.getEndLineNumber(0),2),n.strictEqual(r.regions.findRange(3),1),n.strictEqual(r.regions.findRange(4),1),n.strictEqual(r.regions.findRange(5),1),n.strictEqual(r.regions.getEndLineNumber(1),7),n.strictEqual(r.regions.findRange(6),2),n.strictEqual(r.regions.findRange(7),2),n.strictEqual(r.regions.getEndLineNumber(2),7)})}),test("Folding",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],["## header 2.1","markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),k(r,0,!0),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:1,end:6}])}),await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`## header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),k(r,2,!0),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:3,end:4}])}),await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),k(r,2,!0),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:3,end:6}])})}),test("Nested Folding",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),k(r,0,!0),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:1,end:1}]),k(r,5,!0),k(r,2,!0),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:1,end:1},{start:3,end:6}]),k(r,2,!1),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:1,end:1},{start:6,end:6}])})}),test("Folding Memento",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),r.applyMemento([{start:2,end:6}]),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:3,end:6}])}),await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),r.applyMemento([{start:5,end:6},{start:10,end:11}]),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:6,end:6},{start:11,end:11}])}),await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),r.applyMemento([{start:5,end:6},{start:7,end:11}]),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:6,end:6},{start:8,end:11}])})}),test("View Index",async function(){await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),r.applyMemento([{start:2,end:6}]),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:3,end:6}]),n.strictEqual(e.getNextVisibleCellIndex(1),2),n.strictEqual(e.getNextVisibleCellIndex(2),7),n.strictEqual(e.getNextVisibleCellIndex(3),7),n.strictEqual(e.getNextVisibleCellIndex(4),7),n.strictEqual(e.getNextVisibleCellIndex(5),7),n.strictEqual(e.getNextVisibleCellIndex(6),7),n.strictEqual(e.getNextVisibleCellIndex(7),8)}),await t([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}],[`# header 2.1
`,"markdown",a.Markup,[],{}],["body 2","markdown",a.Markup,[],{}],["body 3","markdown",a.Markup,[],{}],["## header 2.2","markdown",a.Markup,[],{}],["var e = 7;","markdown",a.Markup,[],{}]],(i,e,d)=>{const r=d.add(new o);r.attachViewModel(e),r.applyMemento([{start:5,end:6},{start:10,end:11}]),e.updateFoldingRanges(r.regions),n.deepStrictEqual(e.getHiddenRanges(),[{start:6,end:6},{start:11,end:11}]),n.strictEqual(e.getNextVisibleCellIndex(4),5),n.strictEqual(e.getNextVisibleCellIndex(5),7),n.strictEqual(e.getNextVisibleCellIndex(6),7),n.strictEqual(e.getNextVisibleCellIndex(9),10),n.strictEqual(e.getNextVisibleCellIndex(10),12),n.strictEqual(e.getNextVisibleCellIndex(11),12)})})});
