import e from"assert";import{MarkdownString as x}from"../../../../../base/common/htmlContent.js";import{dispose as k}from"../../../../../base/common/lifecycle.js";import{URI as E}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as U}from"../../../../../base/test/common/utils.js";import{Range as m}from"../../../../../editor/common/core/range.js";import{ILanguageService as w}from"../../../../../editor/common/languages/language.js";import{OverviewRulerLane as M}from"../../../../../editor/common/model.js";import{LanguageService as T}from"../../../../../editor/common/services/languageService.js";import{createTextModel as A}from"../../../../../editor/test/common/testTextModel.js";import{TestInstantiationService as L}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ILabelService as R}from"../../../../../platform/label/common/label.js";import{NullLogService as h}from"../../../../../platform/log/common/log.js";import{StorageScope as q,StorageTarget as S}from"../../../../../platform/storage/common/storage.js";import{createBreakpointDecorations as C}from"../../browser/breakpointEditorContribution.js";import{getBreakpointMessageAndIcon as p,getExpandedBodySize as B}from"../../browser/breakpointsView.js";import{DataBreakpointSetType as b,IDebugService as P,State as d}from"../../common/debug.js";import{Breakpoint as j,DebugModel as v}from"../../common/debugModel.js";import{createTestSession as D}from"./callStack.test.js";import{createMockDebugModel as H,mockUriIdentityService as N}from"./mockDebugModel.js";import{MockDebugService as O,MockDebugStorage as y}from"../common/mockDebug.js";import{MockLabelService as F}from"../../../../services/label/test/common/mockLabelService.js";import{TestStorageService as I}from"../../../../test/common/workbenchTestServices.js";function g(t,u,s){let i=0;const a=t.onDidChangeBreakpoints(o=>{e.strictEqual(o?.sessionOnly,!1),e.strictEqual(o?.changed,void 0),e.strictEqual(o?.removed,void 0);const l=o?.added;e.notStrictEqual(l,void 0),e.strictEqual(l.length,s.length),i++,k(a);for(let r=0;r<s.length;r++)e.strictEqual(o.added[r]instanceof j,!0),e.strictEqual(o.added[r].lineNumber,s[r].lineNumber)}),n=t.addBreakpoints(u,s);return e.strictEqual(i,1),n}suite("Debug - Breakpoints",()=>{let t;const u=U();setup(()=>{t=H(u)}),test("simple",()=>{const s=E.file("/myfolder/myfile.js");g(t,s,[{lineNumber:5,enabled:!0},{lineNumber:10,enabled:!1}]),e.strictEqual(t.areBreakpointsActivated(),!0),e.strictEqual(t.getBreakpoints().length,2);let i=0;const a=t.onDidChangeBreakpoints(n=>{i++,e.strictEqual(n?.added,void 0),e.strictEqual(n?.sessionOnly,!1),e.strictEqual(n?.removed?.length,2),e.strictEqual(n?.changed,void 0),k(a)});t.removeBreakpoints(t.getBreakpoints()),e.strictEqual(i,1),e.strictEqual(t.getBreakpoints().length,0)}),test("toggling",()=>{const s=E.file("/myfolder/myfile.js");g(t,s,[{lineNumber:5,enabled:!0},{lineNumber:10,enabled:!1}]),g(t,s,[{lineNumber:12,enabled:!0,condition:"fake condition"}]),e.strictEqual(t.getBreakpoints().length,3);const i=t.getBreakpoints().pop();i&&t.removeBreakpoints([i]),e.strictEqual(t.getBreakpoints().length,2),t.setBreakpointsActivated(!1),e.strictEqual(t.areBreakpointsActivated(),!1),t.setBreakpointsActivated(!0),e.strictEqual(t.areBreakpointsActivated(),!0)}),test("two files",()=>{const s=E.file("/myfolder/my file first.js"),i=E.file("/secondfolder/second/second file.js");g(t,s,[{lineNumber:5,enabled:!0},{lineNumber:10,enabled:!1}]),e.strictEqual(B(t,void 0,9),44),g(t,i,[{lineNumber:1,enabled:!0},{lineNumber:2,enabled:!0},{lineNumber:3,enabled:!1}]),e.strictEqual(B(t,void 0,9),110),e.strictEqual(t.getBreakpoints().length,5),e.strictEqual(t.getBreakpoints({uri:s}).length,2),e.strictEqual(t.getBreakpoints({uri:i}).length,3),e.strictEqual(t.getBreakpoints({lineNumber:5}).length,1),e.strictEqual(t.getBreakpoints({column:5}).length,0);const a=t.getBreakpoints()[0],n=new Map;n.set(a.getId(),{lineNumber:100});let o=!1;const l=t.onDidChangeBreakpoints(r=>{o=!0,e.strictEqual(r?.added,void 0),e.strictEqual(r?.removed,void 0),e.strictEqual(r?.changed?.length,1),k(l)});t.updateBreakpoints(n),e.strictEqual(o,!0),e.strictEqual(a.lineNumber,100),e.strictEqual(t.getBreakpoints({enabledOnly:!0}).length,3),t.enableOrDisableAllBreakpoints(!1),t.getBreakpoints().forEach(r=>{e.strictEqual(r.enabled,!1)}),e.strictEqual(t.getBreakpoints({enabledOnly:!0}).length,0),t.setEnablement(a,!0),e.strictEqual(a.enabled,!0),t.removeBreakpoints(t.getBreakpoints({uri:s})),e.strictEqual(B(t,void 0,9),66),e.strictEqual(t.getBreakpoints().length,3)}),test("conditions",()=>{const s=E.file("/myfolder/my file first.js");g(t,s,[{lineNumber:5,condition:"i < 5",hitCondition:"17"},{lineNumber:10,condition:"j < 3"}]);const i=t.getBreakpoints();e.strictEqual(i[0].condition,"i < 5"),e.strictEqual(i[0].hitCondition,"17"),e.strictEqual(i[1].condition,"j < 3"),e.strictEqual(!!i[1].hitCondition,!1),e.strictEqual(t.getBreakpoints().length,2),t.removeBreakpoints(t.getBreakpoints()),e.strictEqual(t.getBreakpoints().length,0)}),test("function breakpoints",()=>{t.addFunctionBreakpoint({name:"foo"},"1"),t.addFunctionBreakpoint({name:"bar"},"2"),t.updateFunctionBreakpoint("1",{name:"fooUpdated"}),t.updateFunctionBreakpoint("2",{name:"barUpdated"});const s=t.getFunctionBreakpoints();e.strictEqual(s[0].name,"fooUpdated"),e.strictEqual(s[1].name,"barUpdated"),t.removeFunctionBreakpoints(),e.strictEqual(t.getFunctionBreakpoints().length,0)}),test("multiple sessions",()=>{const s=E.file("/myfolder/myfile.js");g(t,s,[{lineNumber:5,enabled:!0,condition:"x > 5"},{lineNumber:10,enabled:!1}]);const i=t.getBreakpoints(),a=u.add(D(t)),n=new Map;e.strictEqual(i[0].lineNumber,5),e.strictEqual(i[1].lineNumber,10),n.set(i[0].getId(),{verified:!1,line:10}),n.set(i[1].getId(),{verified:!0,line:50}),t.setBreakpointSessionData(a.getId(),{},n),e.strictEqual(i[0].lineNumber,5),e.strictEqual(i[1].lineNumber,50);const o=u.add(D(t)),l=new Map;l.set(i[0].getId(),{verified:!0,line:100}),l.set(i[1].getId(),{verified:!0,line:500}),t.setBreakpointSessionData(o.getId(),{},l),e.strictEqual(i[0].lineNumber,100),e.strictEqual(i[1].lineNumber,10),t.setBreakpointSessionData(a.getId(),{},void 0),e.strictEqual(i[0].lineNumber,100),e.strictEqual(i[1].lineNumber,500),e.strictEqual(i[0].supported,!1),new Map().set(i[0].getId(),{verified:!0,line:500}),t.setBreakpointSessionData(o.getId(),{supportsConditionalBreakpoints:!0},l),e.strictEqual(i[0].supported,!0)}),test("exception breakpoints",()=>{let s=0;u.add(t.onDidChangeBreakpoints(()=>s++)),t.setExceptionBreakpointsForSession("session-id-1",[{filter:"uncaught",label:"UNCAUGHT",default:!0}]),e.strictEqual(s,1);let i=t.getExceptionBreakpointsForSession("session-id-1");e.strictEqual(i.length,1),e.strictEqual(i[0].filter,"uncaught"),e.strictEqual(i[0].enabled,!0),t.setExceptionBreakpointsForSession("session-id-2",[{filter:"uncaught",label:"UNCAUGHT"},{filter:"caught",label:"CAUGHT"}]),e.strictEqual(s,2),i=t.getExceptionBreakpointsForSession("session-id-2"),e.strictEqual(i.length,2),e.strictEqual(i[0].filter,"uncaught"),e.strictEqual(i[0].enabled,!0),e.strictEqual(i[1].filter,"caught"),e.strictEqual(i[1].label,"CAUGHT"),e.strictEqual(i[1].enabled,!1),t.setExceptionBreakpointsForSession("session-id-3",[{filter:"all",label:"ALL"}]),e.strictEqual(s,3),e.strictEqual(t.getExceptionBreakpointsForSession("session-id-3").length,1),i=t.getExceptionBreakpoints(),e.strictEqual(i[0].filter,"uncaught"),e.strictEqual(i[0].enabled,!0),e.strictEqual(i[1].filter,"caught"),e.strictEqual(i[1].label,"CAUGHT"),e.strictEqual(i[1].enabled,!1),e.strictEqual(i[2].filter,"all"),e.strictEqual(i[2].label,"ALL")}),test("exception breakpoints multiple sessions",()=>{let s=0;u.add(t.onDidChangeBreakpoints(()=>s++)),t.setExceptionBreakpointsForSession("session-id-4",[{filter:"uncaught",label:"UNCAUGHT",default:!0},{filter:"caught",label:"CAUGHT"}]),t.setExceptionBreakpointFallbackSession("session-id-4"),e.strictEqual(s,1);let i=t.getExceptionBreakpointsForSession("session-id-4");e.strictEqual(i.length,2),e.strictEqual(i[0].filter,"uncaught"),e.strictEqual(i[1].filter,"caught"),t.setExceptionBreakpointsForSession("session-id-5",[{filter:"all",label:"ALL"},{filter:"caught",label:"CAUGHT"}]),e.strictEqual(s,2),i=t.getExceptionBreakpointsForSession("session-id-5");let a=t.getExceptionBreakpointsForSession(void 0);e.strictEqual(i.length,2),e.strictEqual(i[0].filter,"caught"),e.strictEqual(i[1].filter,"all"),e.strictEqual(a.length,2),e.strictEqual(a[0].filter,"uncaught"),e.strictEqual(a[1].filter,"caught"),t.removeExceptionBreakpointsForSession("session-id-4"),e.strictEqual(s,2),a=t.getExceptionBreakpointsForSession(void 0),e.strictEqual(a.length,2),e.strictEqual(a[0].filter,"uncaught"),e.strictEqual(a[1].filter,"caught"),t.setExceptionBreakpointFallbackSession("session-id-5"),e.strictEqual(s,2),a=t.getExceptionBreakpointsForSession(void 0),e.strictEqual(a.length,2),e.strictEqual(a[0].filter,"caught"),e.strictEqual(a[1].filter,"all");const n=t.getExceptionBreakpoints();e.strictEqual(n.length,3)}),test("instruction breakpoints",()=>{let s=0;u.add(t.onDidChangeBreakpoints(()=>s++)),t.addInstructionBreakpoint({instructionReference:"0xCCCCFFFF",offset:0,address:0n,canPersist:!1}),e.strictEqual(s,1);let i=t.getInstructionBreakpoints();e.strictEqual(i.length,1),e.strictEqual(i[0].instructionReference,"0xCCCCFFFF"),e.strictEqual(i[0].offset,0),t.addInstructionBreakpoint({instructionReference:"0xCCCCEEEE",offset:1,address:0n,canPersist:!1}),e.strictEqual(s,2),i=t.getInstructionBreakpoints(),e.strictEqual(i.length,2),e.strictEqual(i[0].instructionReference,"0xCCCCFFFF"),e.strictEqual(i[0].offset,0),e.strictEqual(i[1].instructionReference,"0xCCCCEEEE"),e.strictEqual(i[1].offset,1)}),test("data breakpoints",()=>{let s=0;u.add(t.onDidChangeBreakpoints(()=>s++)),t.addDataBreakpoint({description:"label",src:{type:b.Variable,dataId:"id"},canPersist:!0,accessTypes:["read"],accessType:"read"},"1"),t.addDataBreakpoint({description:"second",src:{type:b.Variable,dataId:"secondId"},canPersist:!1,accessTypes:["readWrite"],accessType:"readWrite"},"2"),t.updateDataBreakpoint("1",{condition:"aCondition"}),t.updateDataBreakpoint("2",{hitCondition:"10"});const i=t.getDataBreakpoints();e.strictEqual(i[0].canPersist,!0),e.deepStrictEqual(i[0].src,{type:b.Variable,dataId:"id"}),e.strictEqual(i[0].accessType,"read"),e.strictEqual(i[0].condition,"aCondition"),e.strictEqual(i[1].canPersist,!1),e.strictEqual(i[1].description,"second"),e.strictEqual(i[1].accessType,"readWrite"),e.strictEqual(i[1].hitCondition,"10"),e.strictEqual(s,4),t.removeDataBreakpoints(i[0].getId()),e.strictEqual(s,5),e.strictEqual(t.getDataBreakpoints().length,1),t.removeDataBreakpoints(),e.strictEqual(t.getDataBreakpoints().length,0),e.strictEqual(s,6)}),test("message and class name",()=>{const s=E.file("/myfolder/my file first.js");g(t,s,[{lineNumber:5,enabled:!0,condition:"x > 5"},{lineNumber:10,enabled:!1},{lineNumber:12,enabled:!0,logMessage:"hello"},{lineNumber:15,enabled:!0,hitCondition:"12"},{lineNumber:500,enabled:!0}]);const i=t.getBreakpoints(),a=new F;let n=p(d.Stopped,!0,i[0],a,t);e.strictEqual(n.message,"Condition: x > 5"),e.strictEqual(n.icon.id,"debug-breakpoint-conditional"),n=p(d.Stopped,!0,i[1],a,t),e.strictEqual(n.message,"Disabled Breakpoint"),e.strictEqual(n.icon.id,"debug-breakpoint-disabled"),n=p(d.Stopped,!0,i[2],a,t),e.strictEqual(n.message,"Log Message: hello"),e.strictEqual(n.icon.id,"debug-breakpoint-log"),n=p(d.Stopped,!0,i[3],a,t),e.strictEqual(n.message,"Hit Count: 12"),e.strictEqual(n.icon.id,"debug-breakpoint-conditional"),n=p(d.Stopped,!0,i[4],a,t),e.strictEqual(n.message,a.getUriLabel(i[4].uri)),e.strictEqual(n.icon.id,"debug-breakpoint"),n=p(d.Stopped,!1,i[2],a,t),e.strictEqual(n.message,"Disabled Logpoint"),e.strictEqual(n.icon.id,"debug-breakpoint-log-disabled"),t.addDataBreakpoint({description:"label",canPersist:!0,accessTypes:["read"],accessType:"read",src:{type:b.Variable,dataId:"id"}});const o=t.getDataBreakpoints();n=p(d.Stopped,!0,o[0],a,t),e.strictEqual(n.message,"Data Breakpoint"),e.strictEqual(n.icon.id,"debug-breakpoint-data");const l=t.addFunctionBreakpoint({name:"foo"},"1");n=p(d.Stopped,!0,l,a,t),e.strictEqual(n.message,"Function Breakpoint"),e.strictEqual(n.icon.id,"debug-breakpoint-function");const r=new Map;r.set(i[0].getId(),{verified:!1,line:10}),r.set(i[1].getId(),{verified:!0,line:50}),r.set(i[2].getId(),{verified:!0,line:50,message:"world"}),r.set(l.getId(),{verified:!0}),t.setBreakpointSessionData("mocksessionid",{supportsFunctionBreakpoints:!1,supportsDataBreakpoints:!0,supportsLogPoints:!0},r),n=p(d.Stopped,!0,i[0],a,t),e.strictEqual(n.message,"Unverified Breakpoint"),e.strictEqual(n.icon.id,"debug-breakpoint-unverified"),n=p(d.Stopped,!0,l,a,t),e.strictEqual(n.message,"Function breakpoints not supported by this debug type"),e.strictEqual(n.icon.id,"debug-breakpoint-function-unverified"),n=p(d.Stopped,!0,i[2],a,t),e.strictEqual(n.message,"Log Message: hello, world"),e.strictEqual(n.icon.id,"debug-breakpoint-log")}),test("decorations",()=>{const s=E.file("/myfolder/my file first.js"),i="testMode",a=A(["this is line one","this is line two","    this is line three it has whitespace at start","this is line four","this is line five"].join(`
`),i);g(t,s,[{lineNumber:1,enabled:!0,condition:"x > 5"},{lineNumber:2,column:4,enabled:!1},{lineNumber:3,enabled:!0,logMessage:"hello"},{lineNumber:500,enabled:!0}]);const n=t.getBreakpoints(),o=new L,l=new O;l.getModel=()=>t,o.stub(P,l),o.stub(R,new F),o.stub(w,u.add(new T));let r=o.invokeFunction(c=>C(c,a,n,d.Running,!0,!0));e.strictEqual(r.length,3),e.deepStrictEqual(r[0].range,new m(1,1,1,2)),e.deepStrictEqual(r[1].range,new m(2,4,2,5)),e.deepStrictEqual(r[2].range,new m(3,5,3,6)),e.strictEqual(r[0].options.beforeContentClassName,void 0),e.strictEqual(r[1].options.before?.inlineClassName,"debug-breakpoint-placeholder"),e.strictEqual(r[0].options.overviewRuler?.position,M.Left);const f=new x(void 0,{isTrusted:!0,supportThemeIcons:!0}).appendCodeblock(i,"Condition: x > 5");e.deepStrictEqual(r[0].options.glyphMarginHoverMessage,f),r=o.invokeFunction(c=>C(c,a,n,d.Running,!0,!1)),e.strictEqual(r[0].options.overviewRuler,null),a.dispose(),o.dispose()}),test("updates when storage changes",()=>{const s=u.add(new I),i=u.add(new y(s)),a=u.add(new v(i,{isDirty:c=>!1},N,new h)),n=E.file("/myfolder/my file first.js");g(a,n,[{lineNumber:1,enabled:!0,condition:"x > 5"},{lineNumber:2,column:4,enabled:!1}]),i.storeBreakpoints(a);const l=s.get("debug.breakpoint",q.WORKSPACE),r=u.add(new I),f=u.add(new v(u.add(new y(r)),{isDirty:c=>!1},N,new h));r.store("debug.breakpoint",l,q.WORKSPACE,S.USER,!0),e.deepStrictEqual(f.getBreakpoints().map(c=>c.getId()),a.getBreakpoints().map(c=>c.getId())),r.store("debug.breakpoint","[]",q.WORKSPACE,S.USER,!1),e.deepStrictEqual(f.getBreakpoints().map(c=>c.getId()),a.getBreakpoints().map(c=>c.getId()))})});
