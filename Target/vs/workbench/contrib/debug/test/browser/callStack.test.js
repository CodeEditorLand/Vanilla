import e from"assert";import*as D from"sinon";import{ThemeIcon as w}from"../../../../../base/common/themables.js";import{Constants as q}from"../../../../../base/common/uint.js";import{generateUuid as M}from"../../../../../base/common/uuid.js";import{ensureNoDisposablesAreLeakedInTestSuite as x}from"../../../../../base/test/common/utils.js";import{Range as g}from"../../../../../editor/common/core/range.js";import{TestAccessibilityService as L}from"../../../../../platform/accessibility/test/common/testAccessibilityService.js";import{TestConfigurationService as U}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{TestInstantiationService as A}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{NullLogService as S}from"../../../../../platform/log/common/log.js";import{createDecorationsForStackFrame as T}from"../../browser/callStackEditorContribution.js";import{getContext as C,getContextForContributedActions as b,getSpecificSourceName as y}from"../../browser/callStackView.js";import{debugStackframe as v,debugStackframeFocused as W}from"../../browser/debugIcons.js";import{getStackFrameThreadAndSessionToFocus as I}from"../../browser/debugService.js";import{DebugSession as R}from"../../browser/debugSession.js";import{State as G}from"../../common/debug.js";import{StackFrame as E,Thread as _}from"../../common/debugModel.js";import{Source as k}from"../../common/debugSource.js";import{createMockDebugModel as X,mockUriIdentityService as f}from"./mockDebugModel.js";import{MockRawSession as O}from"../common/mockDebug.js";const j={getWorkspace:()=>({folders:[]})};function u(t,h="mockSession",l){return new R(M(),{resolved:{name:h,type:"node",request:"launch"},unresolved:void 0},void 0,t,l,{getViewModel(){return{updateViews(){}}}},void 0,void 0,new U({debug:{console:{collapseIdenticalLines:!0}}}),void 0,j,void 0,void 0,void 0,f,new A,void 0,void 0,new S,void 0,void 0,new L)}function F(t){const h=new class extends _{getCallStack(){return[s,i]}}(t,"mockthread",1),l=new k({name:"internalModule.js",path:"a/b/c/d/internalModule.js",sourceReference:10},"aDebugSessionId",f,new S),r=new k({name:"internalModule.js",path:"z/x/c/d/internalModule.js",sourceReference:11},"aDebugSessionId",f,new S),s=new E(h,0,l,"app.js","normal",{startLineNumber:1,startColumn:2,endLineNumber:1,endColumn:10},0,!0),i=new E(h,1,r,"app2.js","normal",{startLineNumber:1,startColumn:2,endLineNumber:1,endColumn:10},1,!0);return{firstStackFrame:s,secondStackFrame:i}}suite("Debug - CallStack",()=>{let t,h;const l=x();setup(()=>{t=X(l),h=new O}),teardown(()=>{D.restore()}),test("threads simple",()=>{const s="firstThread",i=u(t);l.add(i),t.addSession(i),e.strictEqual(t.getSessions(!0).length,1),t.rawUpdate({sessionId:i.getId(),threads:[{id:1,name:s}]}),e.strictEqual(i.getThread(1).name,s),t.clearThreads(i.getId(),!0),e.strictEqual(i.getThread(1),void 0),e.strictEqual(t.getSessions(!0).length,1)}),test("threads multiple with allThreadsStopped",async()=>{const s="firstThread",a="secondThread",c="breakpoint",d=u(t);l.add(d),t.addSession(d),d.raw=h,t.rawUpdate({sessionId:d.getId(),threads:[{id:1,name:s}]}),t.rawUpdate({sessionId:d.getId(),threads:[{id:1,name:s},{id:2,name:a}],stoppedDetails:{reason:c,threadId:1,allThreadsStopped:!0}});const n=d.getThread(1),o=d.getThread(2);e.strictEqual(d.getAllThreads().length,2),e.strictEqual(n.name,s),e.strictEqual(n.stopped,!0),e.strictEqual(n.getCallStack().length,0),e.strictEqual(n.stoppedDetails.reason,c),e.strictEqual(o.name,a),e.strictEqual(o.stopped,!0),e.strictEqual(o.getCallStack().length,0),e.strictEqual(o.stoppedDetails.reason,void 0),await n.fetchCallStack(),e.notStrictEqual(n.getCallStack().length,0),await o.fetchCallStack(),e.notStrictEqual(o.getCallStack().length,0),await n.fetchCallStack(),await o.fetchCallStack(),n.clearCallStack(),e.strictEqual(n.stopped,!0),e.strictEqual(n.getCallStack().length,0),o.clearCallStack(),e.strictEqual(o.stopped,!0),e.strictEqual(o.getCallStack().length,0),t.clearThreads(d.getId(),!0),e.strictEqual(d.getThread(1),void 0),e.strictEqual(d.getThread(2),void 0),e.strictEqual(d.getAllThreads().length,0)}),test("allThreadsStopped in multiple events",async()=>{const s="firstThread",a="secondThread",c="breakpoint",d=u(t);l.add(d),t.addSession(d),d.raw=h,t.rawUpdate({sessionId:d.getId(),threads:[{id:1,name:s},{id:2,name:a}],stoppedDetails:{reason:c,threadId:1,allThreadsStopped:!0}}),t.rawUpdate({sessionId:d.getId(),threads:[{id:1,name:s},{id:2,name:a}],stoppedDetails:{reason:c,threadId:2,allThreadsStopped:!0}});const n=d.getThread(1),o=d.getThread(2);e.strictEqual(n.stoppedDetails?.reason,c),e.strictEqual(o.stoppedDetails?.reason,c)}),test("threads multiple without allThreadsStopped",async()=>{const r=D.spy(h,"stackTrace"),s=1,i="stoppedThread",a=2,c="runningThread",d="breakpoint",n=u(t);l.add(n),t.addSession(n),n.raw=h,t.rawUpdate({sessionId:n.getId(),threads:[{id:s,name:i}]}),t.rawUpdate({sessionId:n.getId(),threads:[{id:1,name:i},{id:a,name:c}],stoppedDetails:{reason:d,threadId:1,allThreadsStopped:!1}});const o=n.getThread(s),p=n.getThread(a);e.strictEqual(o.name,i),e.strictEqual(o.stopped,!0),e.strictEqual(n.getAllThreads().length,2),e.strictEqual(o.getCallStack().length,0),e.strictEqual(o.stoppedDetails.reason,d),e.strictEqual(p.name,c),e.strictEqual(p.stopped,!1),e.strictEqual(p.getCallStack().length,0),e.strictEqual(p.stoppedDetails,void 0),await o.fetchCallStack(),e.notStrictEqual(o.getCallStack().length,0),e.strictEqual(p.getCallStack().length,0),e.strictEqual(r.callCount,1),await p.fetchCallStack(),e.strictEqual(p.getCallStack().length,0),e.strictEqual(r.callCount,1),o.clearCallStack(),e.strictEqual(o.stopped,!0),e.strictEqual(o.getCallStack().length,0),t.clearThreads(n.getId(),!0),e.strictEqual(n.getThread(s),void 0),e.strictEqual(n.getThread(a),void 0),e.strictEqual(n.getAllThreads().length,0)}),test("stack frame get specific source name",()=>{const r=u(t);l.add(r),t.addSession(r);const{firstStackFrame:s,secondStackFrame:i}=F(r);e.strictEqual(y(s),".../b/c/d/internalModule.js"),e.strictEqual(y(i),".../x/c/d/internalModule.js")}),test("stack frame toString()",()=>{const r=u(t);l.add(r);const s=new _(r,"mockthread",1),i=new k({name:"internalModule.js",path:"a/b/c/d/internalModule.js",sourceReference:10},"aDebugSessionId",f,new S),a=new E(s,1,i,"app","normal",{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:10},1,!0);e.strictEqual(a.toString(),"app (internalModule.js:1)");const c=new k(void 0,"aDebugSessionId",f,new S),d=new E(s,2,c,"module","normal",{startLineNumber:void 0,startColumn:void 0,endLineNumber:void 0,endColumn:void 0},2,!0);e.strictEqual(d.toString(),"module")}),test("debug child sessions are added in correct order",()=>{const r=l.add(u(t));t.addSession(r);const s=l.add(u(t,"mockSession2"));t.addSession(s);const i=l.add(u(t,"firstChild",{parentSession:r}));t.addSession(i);const a=l.add(u(t,"secondChild",{parentSession:r}));t.addSession(a);const c=l.add(u(t,"mockSession3"));t.addSession(c);const d=l.add(u(t,"secondChild",{parentSession:s}));t.addSession(d);const n=t.getSessions();e.strictEqual(n[0].getId(),r.getId()),e.strictEqual(n[1].getId(),i.getId()),e.strictEqual(n[2].getId(),a.getId()),e.strictEqual(n[3].getId(),s.getId()),e.strictEqual(n[4].getId(),d.getId()),e.strictEqual(n[5].getId(),c.getId())}),test("decorations",()=>{const r=u(t);l.add(r),t.addSession(r);const{firstStackFrame:s,secondStackFrame:i}=F(r);let a=T(s,!0,!1);e.strictEqual(a.length,3),e.deepStrictEqual(a[0].range,new g(1,2,1,3)),e.strictEqual(a[0].options.glyphMarginClassName,w.asClassName(v)),e.deepStrictEqual(a[1].range,new g(1,2,1,q.MAX_SAFE_SMALL_INTEGER)),e.strictEqual(a[1].options.className,"debug-top-stack-frame-line"),e.strictEqual(a[1].options.isWholeLine,!0),a=T(i,!0,!1),e.strictEqual(a.length,2),e.deepStrictEqual(a[0].range,new g(1,2,1,3)),e.strictEqual(a[0].options.glyphMarginClassName,w.asClassName(W)),e.deepStrictEqual(a[1].range,new g(1,2,1,q.MAX_SAFE_SMALL_INTEGER)),e.strictEqual(a[1].options.className,"debug-focused-stack-frame-line"),e.strictEqual(a[1].options.isWholeLine,!0),a=T(s,!0,!1),e.strictEqual(a.length,3),e.deepStrictEqual(a[0].range,new g(1,2,1,3)),e.strictEqual(a[0].options.glyphMarginClassName,w.asClassName(v)),e.deepStrictEqual(a[1].range,new g(1,2,1,q.MAX_SAFE_SMALL_INTEGER)),e.strictEqual(a[1].options.className,"debug-top-stack-frame-line"),e.strictEqual(a[1].options.isWholeLine,!0),e.strictEqual(a[2].options.before?.inlineClassName,"debug-top-stack-frame-column"),e.deepStrictEqual(a[2].range,new g(1,2,1,q.MAX_SAFE_SMALL_INTEGER))}),test("contexts",()=>{const r=u(t);l.add(r),t.addSession(r);const{firstStackFrame:s,secondStackFrame:i}=F(r);let a=C(s);e.strictEqual(a.sessionId,s.thread.session.getId()),e.strictEqual(a.threadId,s.thread.getId()),e.strictEqual(a.frameId,s.getId()),a=C(i.thread),e.strictEqual(a.sessionId,i.thread.session.getId()),e.strictEqual(a.threadId,i.thread.getId()),e.strictEqual(a.frameId,void 0),a=C(r),e.strictEqual(a.sessionId,r.getId()),e.strictEqual(a.threadId,void 0),e.strictEqual(a.frameId,void 0);let c=b(s);e.strictEqual(c,s.source.raw.path),c=b(s.thread),e.strictEqual(c,s.thread.threadId),c=b(r),e.strictEqual(c,r.getId())}),test("focusStackFrameThreadAndSession",()=>{const s="firstThread",a="secondThread",c="breakpoint",d=new class extends R{get state(){return G.Stopped}}(M(),{resolved:{name:"stoppedSession",type:"node",request:"launch"},unresolved:void 0},void 0,t,void 0,void 0,void 0,void 0,void 0,void 0,j,void 0,void 0,void 0,f,new A,void 0,void 0,new S,void 0,void 0,new L);l.add(d);const n=u(t);l.add(n),t.addSession(n),t.addSession(d),d.raw=h,t.rawUpdate({sessionId:d.getId(),threads:[{id:1,name:s}]}),t.rawUpdate({sessionId:d.getId(),threads:[{id:1,name:s},{id:2,name:a}],stoppedDetails:{reason:c,threadId:1,allThreadsStopped:!0}});const o=d.getThread(1),p=d.getThread(2);let m=I(t,void 0);e.deepStrictEqual(m,{stackFrame:void 0,thread:o,session:d}),m=I(t,void 0,void 0,n),e.deepStrictEqual(m,{stackFrame:void 0,thread:void 0,session:n}),m=I(t,void 0,o),e.deepStrictEqual(m,{stackFrame:void 0,thread:o,session:d}),m=I(t,void 0,p),e.deepStrictEqual(m,{stackFrame:void 0,thread:p,session:d});const N=new E(o,5,void 0,"stackframename2",void 0,void 0,1,!0);m=I(t,N),e.deepStrictEqual(m,{stackFrame:N,thread:o,session:d})})});export{u as createTestSession};
