import n from"assert";import{timeout as c}from"../../../../../base/common/async.js";import{MarkdownString as l}from"../../../../../base/common/htmlContent.js";import{URI as g}from"../../../../../base/common/uri.js";import{assertSnapshot as m}from"../../../../../base/test/common/snapshot.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../../../../../base/test/common/utils.js";import{OffsetRange as w}from"../../../../../editor/common/core/offsetRange.js";import{Range as I}from"../../../../../editor/common/core/range.js";import{IContextKeyService as h}from"../../../../../platform/contextkey/common/contextkey.js";import{TestInstantiationService as z}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MockContextKeyService as v}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{ILogService as D,NullLogService as k}from"../../../../../platform/log/common/log.js";import{IStorageService as C}from"../../../../../platform/storage/common/storage.js";import{ChatAgentLocation as o,ChatAgentService as S,IChatAgentService as b}from"../../common/chatAgents.js";import{ChatModel as r,normalizeSerializableChatData as u,Response as p}from"../../common/chatModel.js";import{ChatRequestTextPart as q}from"../../common/chatParserTypes.js";import{IExtensionService as E}from"../../../../services/extensions/common/extensions.js";import{TestExtensionService as R,TestStorageService as U}from"../../../../test/common/workbenchTestServices.js";suite("ChatModel",()=>{const a=f();let e;setup(async()=>{e=a.add(new z),e.stub(C,a.add(new U)),e.stub(D,new k),e.stub(E,new R),e.stub(h,new v),e.stub(b,e.createInstance(S))}),test("Waits for initialization",async()=>{const t=a.add(e.createInstance(r,void 0,o.Panel));let i=!1;t.waitForInitialization().then(()=>{i=!0}),await c(0),n.strictEqual(i,!1),t.startInitialize(),t.initialize(void 0),await c(0),n.strictEqual(i,!0)}),test("must call startInitialize before initialize",async()=>{const t=a.add(e.createInstance(r,void 0,o.Panel));let i=!1;t.waitForInitialization().then(()=>{i=!0}),await c(0),n.strictEqual(i,!1),n.throws(()=>t.initialize(void 0)),n.strictEqual(i,!1)}),test("deinitialize/reinitialize",async()=>{const t=a.add(e.createInstance(r,void 0,o.Panel));let i=!1;t.waitForInitialization().then(()=>{i=!0}),t.startInitialize(),t.initialize(void 0),await c(0),n.strictEqual(i,!0),t.deinitialize();let s=!1;t.waitForInitialization().then(()=>{s=!0}),t.startInitialize(),t.initialize(void 0),await c(0),n.strictEqual(s,!0)}),test("cannot initialize twice",async()=>{const t=a.add(e.createInstance(r,void 0,o.Panel));t.startInitialize(),t.initialize(void 0),n.throws(()=>t.initialize(void 0))}),test("Initialization fails when model is disposed",async()=>{const t=a.add(e.createInstance(r,void 0,o.Panel));t.dispose(),n.throws(()=>t.initialize(void 0))}),test("removeRequest",async()=>{const t=a.add(e.createInstance(r,void 0,o.Panel));t.startInitialize(),t.initialize(void 0);const i="hello";t.addRequest({text:i,parts:[new q(new w(0,i.length),new I(1,i.length,1,i.length),i)]},{variables:[]},0);const s=t.getRequests();n.strictEqual(s.length,1),t.removeRequest(s[0].id),n.strictEqual(t.getRequests().length,0)}),test("adoptRequest",async function(){const t=a.add(e.createInstance(r,void 0,o.Editor)),i=a.add(e.createInstance(r,void 0,o.Panel));t.startInitialize(),t.initialize(void 0),i.startInitialize(),i.initialize(void 0);const s="hello",d=t.addRequest({text:s,parts:[new q(new w(0,s.length),new I(1,s.length,1,s.length),s)]},{variables:[]},0);n.strictEqual(t.getRequests().length,1),n.strictEqual(i.getRequests().length,0),n.ok(d.session===t),n.ok(d.response?.session===t),i.adoptRequest(d),n.strictEqual(t.getRequests().length,0),n.strictEqual(i.getRequests().length,1),n.ok(d.session===i),n.ok(d.response?.session===i),i.acceptResponseProgress(d,{content:new l("Hello"),kind:"markdownContent"}),n.strictEqual(d.response.response.toString(),"Hello")})}),suite("Response",()=>{const a=f();test("mergeable markdown",async()=>{const e=a.add(new p([]));e.updateContent({content:new l("markdown1"),kind:"markdownContent"}),e.updateContent({content:new l("markdown2"),kind:"markdownContent"}),await m(e.value),n.strictEqual(e.toString(),"markdown1markdown2")}),test("not mergeable markdown",async()=>{const e=a.add(new p([])),t=new l("markdown1");t.supportHtml=!0,e.updateContent({content:t,kind:"markdownContent"}),e.updateContent({content:new l("markdown2"),kind:"markdownContent"}),await m(e.value)}),test("inline reference",async()=>{const e=a.add(new p([]));e.updateContent({content:new l("text before"),kind:"markdownContent"}),e.updateContent({inlineReference:g.parse("https://microsoft.com"),kind:"inlineReference"}),e.updateContent({content:new l("text after"),kind:"markdownContent"}),await m(e.value)})}),suite("normalizeSerializableChatData",()=>{f(),test("v1",()=>{const a={creationDate:Date.now(),initialLocation:void 0,isImported:!1,requesterAvatarIconUri:void 0,requesterUsername:"me",requests:[],responderAvatarIconUri:void 0,responderUsername:"bot",sessionId:"session1",welcomeMessage:[]},e=u(a);n.strictEqual(e.creationDate,a.creationDate),n.strictEqual(e.lastMessageDate,a.creationDate),n.strictEqual(e.version,3),n.ok("customTitle"in e)}),test("v2",()=>{const a={version:2,creationDate:100,lastMessageDate:Date.now(),initialLocation:void 0,isImported:!1,requesterAvatarIconUri:void 0,requesterUsername:"me",requests:[],responderAvatarIconUri:void 0,responderUsername:"bot",sessionId:"session1",welcomeMessage:[],computedTitle:"computed title"},e=u(a);n.strictEqual(e.version,3),n.strictEqual(e.creationDate,a.creationDate),n.strictEqual(e.lastMessageDate,a.lastMessageDate),n.strictEqual(e.customTitle,a.computedTitle)}),test("old bad data",()=>{const e=u({sessionId:void 0,creationDate:void 0,initialLocation:void 0,isImported:!1,requesterAvatarIconUri:void 0,requesterUsername:"me",requests:[],responderAvatarIconUri:void 0,responderUsername:"bot",welcomeMessage:[]});n.strictEqual(e.version,3),n.ok(e.creationDate>0),n.ok(e.lastMessageDate>0),n.ok(e.sessionId)}),test("v3 with bug",()=>{const e=u({creationDate:void 0,lastMessageDate:void 0,version:3,initialLocation:void 0,isImported:!1,requesterAvatarIconUri:void 0,requesterUsername:"me",requests:[],responderAvatarIconUri:void 0,responderUsername:"bot",sessionId:"session1",welcomeMessage:[],customTitle:"computed title"});n.strictEqual(e.version,3),n.ok(e.creationDate>0),n.ok(e.lastMessageDate>0),n.ok(e.sessionId)})});
