import o from"assert";import{CancellationToken as f}from"../../../../../base/common/cancellation.js";import{ensureNoDisposablesAreLeakedInTestSuite as p}from"../../../../../base/test/common/utils.js";import{IContextKeyService as v}from"../../../../../platform/contextkey/common/contextkey.js";import{TestInstantiationService as u}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MockContextKeyService as b}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{ILogService as d,NullLogService as S}from"../../../../../platform/log/common/log.js";import{IStorageService as g}from"../../../../../platform/storage/common/storage.js";import{ChatVariablesService as w}from"../../browser/chatVariables.js";import{ChatAgentService as h,IChatAgentService as q}from"../../common/chatAgents.js";import{ChatRequestParser as E}from"../../common/chatRequestParser.js";import{IChatService as C}from"../../common/chatService.js";import{IChatVariablesService as I}from"../../common/chatVariables.js";import{ILanguageModelToolsService as V}from"../../common/languageModelToolsService.js";import{MockChatWidgetService as T}from"./mockChatWidget.js";import{MockChatService as k}from"../common/mockChatService.js";import{MockLanguageModelToolsService as n}from"../common/mockLanguageModelToolsService.js";import{IExtensionService as H}from"../../../../services/extensions/common/extensions.js";import{TestViewsService as y}from"../../../../test/browser/workbenchTestServices.js";import{TestExtensionService as M,TestStorageService as L}from"../../../../test/common/workbenchTestServices.js";suite("ChatVariables",function(){let i,t;const s=p();setup(function(){i=new w(new T,new y,new n),t=s.add(new u),t.stub(g,s.add(new L)),t.stub(d,new S),t.stub(H,new M),t.stub(I,i),t.stub(C,new k),t.stub(v,new b),t.stub(V,new n),t.stub(q,t.createInstance(h))}),test("ChatVariables - resolveVariables",async function(){const l=i.registerVariable({id:"id",name:"foo",description:"bar"},async()=>"farboo"),c=i.registerVariable({id:"id",name:"far",description:"boo"},async()=>"farboo"),m=t.createInstance(E),r=async e=>{const a=m.parseChatRequest("1",e);return await i.resolveVariables(a,void 0,null,()=>{},f.None)};{const e=await r("Hello #foo and#far");o.strictEqual(e.variables.length,1),o.deepEqual(e.variables.map(a=>a.name),["foo"])}{const e=await r("#foo Hello");o.strictEqual(e.variables.length,1),o.deepEqual(e.variables.map(a=>a.name),["foo"])}{const e=await r("Hello #foo");o.strictEqual(e.variables.length,1),o.deepEqual(e.variables.map(a=>a.name),["foo"])}{const e=await r("Hello #foo?");o.strictEqual(e.variables.length,1),o.deepEqual(e.variables.map(a=>a.name),["foo"])}{const e=await r("Hello #foo and#far #foo");o.strictEqual(e.variables.length,2),o.deepEqual(e.variables.map(a=>a.name),["foo","foo"])}{const e=await r("Hello #foo and #far #foo");o.strictEqual(e.variables.length,3),o.deepEqual(e.variables.map(a=>a.name),["foo","far","foo"])}{const e=await r("Hello #foo and #far #foo #unknown");o.strictEqual(e.variables.length,3),o.deepEqual(e.variables.map(a=>a.name),["foo","far","foo"])}l.dispose(),c.dispose()})});
