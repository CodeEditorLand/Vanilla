var w=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var T=(s,i,o,n)=>{for(var e=n>1?void 0:n?k(i,o):i,c=s.length-1,r;c>=0;c--)(r=s[c])&&(e=(n?r(i,o,e):r(e))||e);return n&&e&&w(i,o,e),e},t=(s,i)=>(o,n)=>i(o,n,s);import{Disposable as y}from"../../../../base/common/lifecycle.js";import{Schemas as u}from"../../../../base/common/network.js";import{ILabelService as R}from"../../../../platform/label/common/label.js";import{TerminalLocation as E}from"../../../../platform/terminal/common/terminal.js";import"../../../common/contributions.js";import{ITerminalEditorService as L,ITerminalGroupService as P,ITerminalInstanceService as G,ITerminalService as W,terminalEditorId as b}from"./terminal.js";import{parseTerminalUri as _}from"./terminalUri.js";import{terminalStrings as D}from"../common/terminalStrings.js";import{IEditorResolverService as F,RegisteredEditorPriority as x}from"../../../services/editor/common/editorResolverService.js";import{IWorkbenchEnvironmentService as A}from"../../../services/environment/common/environmentService.js";import{ILifecycleService as B,LifecyclePhase as C}from"../../../services/lifecycle/common/lifecycle.js";import{IEmbedderTerminalService as N}from"../../../services/terminal/common/embedderTerminalService.js";let v=class extends y{static ID="terminalMain";constructor(i,o,n,e,c,r,l,d,p){super(),this._init(i,o,n,e,c,r,l,d,p)}async _init(i,o,n,e,c,r,l,d,p){this._register(o.onDidCreateTerminal(async a=>{const f=await r.createTerminal({config:a,location:E.Panel,skipContributedProfileCheck:!0});r.setActiveInstance(f),await r.revealActiveTerminal()})),await c.when(C.Restored),this._register(i.registerEditor(`${u.vscodeTerminal}:/**`,{id:b,label:D.terminal,priority:x.exclusive},{canSupportResource:a=>a.scheme===u.vscodeTerminal,singlePerResource:!0},{createEditorInput:async({resource:a,options:f})=>{let m=r.getInstanceFromResource(a);if(m)d.getGroupForInstance(m)?.removeInstance(m);else{const I=_(a);if(!I.instanceId)throw new Error("Terminal identifier without instanceId");const S=r.getPrimaryBackend();if(!S)throw new Error("No terminal primary backend");const h=await S.requestDetachInstance(I.workspaceId,I.instanceId);if(!h)throw new Error("No terminal persistent process to attach");m=p.createInstance({attachPersistentProcess:h},E.Editor)}const g=l.resolveResource(m);return{editor:l.getInputFromResource(g),options:{...f,pinned:!0,forceReload:!0,override:b}}}})),this._register(e.registerFormatter({scheme:u.vscodeTerminal,formatting:{label:"${path}",separator:""}}))}};v=T([t(0,F),t(1,N),t(2,A),t(3,R),t(4,B),t(5,W),t(6,L),t(7,P),t(8,G)],v);export{v as TerminalMainContribution};
