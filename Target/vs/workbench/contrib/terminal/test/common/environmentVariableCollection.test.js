import{deepStrictEqual as r,strictEqual as o}from"assert";import{EnvironmentVariableMutatorType as e}from"../../../../../platform/terminal/common/environmentVariable.js";import{isWindows as v}from"../../../../../base/common/platform.js";import{MergedEnvironmentVariableCollection as i}from"../../../../../platform/terminal/common/environmentVariableCollection.js";import{deserializeEnvironmentDescriptionMap as c,deserializeEnvironmentVariableCollection as a}from"../../../../../platform/terminal/common/environmentVariableShared.js";import{URI as s}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../../base/test/common/utils.js";suite("EnvironmentVariable - MergedEnvironmentVariableCollection",()=>{u(),suite("ctor",()=>{test("Should keep entries that come after a Prepend or Append type mutators",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,variable:"A"}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}],["ext3",{map:a([["A-key",{value:"a3",type:e.Prepend,variable:"A"}]])}],["ext4",{map:a([["A-key",{value:"a4",type:e.Append,variable:"A",options:{applyAtProcessCreation:!0,applyAtShellIntegration:!0}}]])}]]));r([...n.getVariableMap(void 0).entries()],[["A",[{extensionIdentifier:"ext4",type:e.Append,value:"a4",variable:"A",options:{applyAtProcessCreation:!0,applyAtShellIntegration:!0}},{extensionIdentifier:"ext3",type:e.Prepend,value:"a3",variable:"A",options:void 0},{extensionIdentifier:"ext2",type:e.Append,value:"a2",variable:"A",options:void 0},{extensionIdentifier:"ext1",type:e.Prepend,value:"a1",variable:"A",options:void 0}]]])}),test("Should remove entries that come after a Replace type mutator",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,variable:"A"}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}],["ext3",{map:a([["A-key",{value:"a3",type:e.Replace,variable:"A"}]])}],["ext4",{map:a([["A-key",{value:"a4",type:e.Append,variable:"A"}]])}]]));r([...n.getVariableMap(void 0).entries()],[["A",[{extensionIdentifier:"ext3",type:e.Replace,value:"a3",variable:"A",options:void 0},{extensionIdentifier:"ext2",type:e.Append,value:"a2",variable:"A",options:void 0},{extensionIdentifier:"ext1",type:e.Prepend,value:"a1",variable:"A",options:void 0}]]],"The ext4 entry should be removed as it comes after a Replace")}),test("Appropriate workspace scoped entries are returned when querying for a particular workspace folder",()=>{const n={workspaceFolder:{uri:s.file("workspace1"),name:"workspace1",index:0}},t={workspaceFolder:{uri:s.file("workspace2"),name:"workspace2",index:3}},p=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,scope:n,variable:"A"}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}],["ext3",{map:a([["A-key",{value:"a3",type:e.Prepend,scope:t,variable:"A"}]])}],["ext4",{map:a([["A-key",{value:"a4",type:e.Append,variable:"A"}]])}]]));r([...p.getVariableMap(t).entries()],[["A",[{extensionIdentifier:"ext4",type:e.Append,value:"a4",variable:"A",options:void 0},{extensionIdentifier:"ext3",type:e.Prepend,value:"a3",scope:t,variable:"A",options:void 0},{extensionIdentifier:"ext2",type:e.Append,value:"a2",variable:"A",options:void 0}]]])}),test("Workspace scoped entries are not included when looking for global entries",()=>{const n={workspaceFolder:{uri:s.file("workspace1"),name:"workspace1",index:0}},t={workspaceFolder:{uri:s.file("workspace2"),name:"workspace2",index:3}},p=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,scope:n,variable:"A"}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}],["ext3",{map:a([["A-key",{value:"a3",type:e.Prepend,scope:t,variable:"A"}]])}],["ext4",{map:a([["A-key",{value:"a4",type:e.Append,variable:"A"}]])}]]));r([...p.getVariableMap(void 0).entries()],[["A",[{extensionIdentifier:"ext4",type:e.Append,value:"a4",variable:"A",options:void 0},{extensionIdentifier:"ext2",type:e.Append,value:"a2",variable:"A",options:void 0}]]])}),test("Workspace scoped description entries are properly filtered for each extension",()=>{const n={workspaceFolder:{uri:s.file("workspace1"),name:"workspace1",index:0}},t={workspaceFolder:{uri:s.file("workspace2"),name:"workspace2",index:3}},p=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,scope:n,variable:"A"}]]),descriptionMap:c([["A-key-scope1",{description:"ext1 scope1 description",scope:n}],["A-key-scope2",{description:"ext1 scope2 description",scope:t}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]]),descriptionMap:c([["A-key",{description:"ext2 global description"}]])}],["ext3",{map:a([["A-key",{value:"a3",type:e.Prepend,scope:t,variable:"A"}]]),descriptionMap:c([["A-key",{description:"ext3 scope2 description",scope:t}]])}],["ext4",{map:a([["A-key",{value:"a4",type:e.Append,variable:"A"}]])}]]));r([...p.getDescriptionMap(n).entries()],[["ext1","ext1 scope1 description"]]),r([...p.getDescriptionMap(void 0).entries()],[["ext2","ext2 global description"]])})}),suite("applyToProcessEnvironment",()=>{test("should apply the collection to an environment",async()=>{const n=new i(new Map([["ext",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Append,variable:"B"}],["C",{value:"c",type:e.Prepend,variable:"C"}]])}]])),t={A:"foo",B:"bar",C:"baz"};await n.applyToProcessEnvironment(t,void 0),r(t,{A:"a",B:"barb",C:"cbaz"})}),test("should apply the appropriate workspace scoped entries to an environment",async()=>{const n={workspaceFolder:{uri:s.file("workspace1"),name:"workspace1",index:0}},t={workspaceFolder:{uri:s.file("workspace2"),name:"workspace2",index:3}},p=new i(new Map([["ext",{map:a([["A-key",{value:"a",type:e.Replace,scope:n,variable:"A"}],["B",{value:"b",type:e.Append,scope:t,variable:"B"}],["C",{value:"c",type:e.Prepend,variable:"C"}]])}]])),d={A:"foo",B:"bar",C:"baz"};await p.applyToProcessEnvironment(d,n),r(d,{A:"a",B:"bar",C:"cbaz"})}),test("should apply the collection to environment entries with no values",async()=>{const n=new i(new Map([["ext",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Append,variable:"B"}],["C",{value:"c",type:e.Prepend,variable:"C"}]])}]])),t={};await n.applyToProcessEnvironment(t,void 0),r(t,{A:"a",B:"b",C:"c"})}),test("should apply to variable case insensitively on Windows only",async()=>{const n=new i(new Map([["ext",{map:a([["A-key",{value:"a",type:e.Replace,variable:"a"}],["b",{value:"b",type:e.Append,variable:"b"}],["c",{value:"c",type:e.Prepend,variable:"c"}]])}]])),t={A:"A",B:"B",C:"C"};await n.applyToProcessEnvironment(t,void 0),v?r(t,{A:"a",B:"Bb",C:"cC"}):r(t,{a:"a",A:"A",b:"b",B:"B",c:"c",C:"C"})})}),suite("diff",()=>{test("should return undefined when collectinos are the same",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}]])}]])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}]])}]])),p=n.diff(t,void 0);o(p,void 0)}),test("should generate added diffs from when the first entry is added",()=>{const n=new i(new Map([])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}]])}]])),p=n.diff(t,void 0);o(p.changed.size,0),o(p.removed.size,0);const d=[...p.added.entries()];r(d,[["A",[{extensionIdentifier:"ext1",value:"a",type:e.Replace,variable:"A",options:void 0}]]])}),test("should generate added diffs from the same extension",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}]])}]])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Append,variable:"B"}]])}]])),p=n.diff(t,void 0);o(p.changed.size,0),o(p.removed.size,0);const d=[...p.added.entries()];r(d,[["B",[{extensionIdentifier:"ext1",value:"b",type:e.Append,variable:"B",options:void 0}]]])}),test("should generate added diffs from a different extension",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,variable:"A"}]])}]])),t=new i(new Map([["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}],["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,variable:"A"}]])}]])),p=n.diff(t,void 0);o(p.changed.size,0),o(p.removed.size,0),r([...p.added.entries()],[["A",[{extensionIdentifier:"ext2",value:"a2",type:e.Append,variable:"A",options:void 0}]]]);const d=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Prepend,variable:"A"}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}]])),l=n.diff(d,void 0);o(l.changed.size,0),o(l.removed.size,0),r([...p.added.entries()],[...l.added.entries()],"Swapping the order of the entries in the other collection should yield the same result")}),test("should remove entries in the diff that come after a Replace",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Replace,variable:"A"}]])}]])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Replace,variable:"A"}]])}],["ext2",{map:a([["A-key",{value:"a2",type:e.Append,variable:"A"}]])}]])),p=n.diff(t,void 0);o(p,void 0,"Replace should ignore any entries after it")}),test("should generate removed diffs",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Replace,variable:"B"}]])}]])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a",type:e.Replace,variable:"A"}]])}]])),p=n.diff(t,void 0);o(p.changed.size,0),o(p.added.size,0),r([...p.removed.entries()],[["B",[{extensionIdentifier:"ext1",value:"b",type:e.Replace,variable:"B",options:void 0}]]])}),test("should generate changed diffs",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Replace,variable:"B"}]])}]])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a2",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Append,variable:"B"}]])}]])),p=n.diff(t,void 0);o(p.added.size,0),o(p.removed.size,0),r([...p.changed.entries()],[["A",[{extensionIdentifier:"ext1",value:"a2",type:e.Replace,variable:"A",options:void 0}]],["B",[{extensionIdentifier:"ext1",value:"b",type:e.Append,variable:"B",options:void 0}]]])}),test("should generate diffs with added, changed and removed",()=>{const n=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Prepend,variable:"B"}]])}]])),t=new i(new Map([["ext1",{map:a([["A-key",{value:"a2",type:e.Replace,variable:"A"}],["C",{value:"c",type:e.Append,variable:"C"}]])}]])),p=n.diff(t,void 0);r([...p.added.entries()],[["C",[{extensionIdentifier:"ext1",value:"c",type:e.Append,variable:"C",options:void 0}]]]),r([...p.removed.entries()],[["B",[{extensionIdentifier:"ext1",value:"b",type:e.Prepend,variable:"B",options:void 0}]]]),r([...p.changed.entries()],[["A",[{extensionIdentifier:"ext1",value:"a2",type:e.Replace,variable:"A",options:void 0}]]])}),test("should only generate workspace specific diffs",()=>{const n={workspaceFolder:{uri:s.file("workspace1"),name:"workspace1",index:0}},t={workspaceFolder:{uri:s.file("workspace2"),name:"workspace2",index:3}},p=new i(new Map([["ext1",{map:a([["A-key",{value:"a1",type:e.Replace,scope:n,variable:"A"}],["B",{value:"b",type:e.Prepend,variable:"B"}]])}]])),d=new i(new Map([["ext1",{map:a([["A-key",{value:"a2",type:e.Replace,scope:n,variable:"A"}],["C",{value:"c",type:e.Append,scope:t,variable:"C"}]])}]])),l=p.diff(d,n);o(l.added.size,0),r([...l.removed.entries()],[["B",[{extensionIdentifier:"ext1",value:"b",type:e.Prepend,variable:"B",options:void 0}]]]),r([...l.changed.entries()],[["A",[{extensionIdentifier:"ext1",value:"a2",type:e.Replace,scope:n,variable:"A",options:void 0}]]])})})});
