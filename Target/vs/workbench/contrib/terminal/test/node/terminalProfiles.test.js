import{deepStrictEqual as c,fail as u,ok as p,strictEqual as f}from"assert";import{isWindows as m}from"../../../../../base/common/platform.js";import{ProfileSource as h}from"../../../../../platform/terminal/common/terminal.js";import"../../common/terminal.js";import{detectAvailableProfiles as r}from"../../../../../platform/terminal/node/terminalProfiles.js";import{TestConfigurationService as t}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";function a(o,n){f(o.length,n.length,`Actual: ${o.map(e=>e.profileName).join(",")}
Expected: ${n.map(e=>e.profileName).join(",")}`);for(const e of n){const s=o.find(i=>i.profileName===e.profileName);p(s,`Expected profile ${e.profileName} not found`),f(s.profileName,e.profileName),f(s.path,e.path),c(s.args,e.args),f(s.isAutoDetected,e.isAutoDetected),f(s.overrideName,e.overrideName)}}suite("Workbench - TerminalProfiles",()=>{w(),suite("detectAvailableProfiles",()=>{if(m)test("should detect Git Bash and provide login args",async()=>{const n=o(["C:\\Program Files\\Git\\bin\\bash.exe"]),e={profiles:{windows:{"Git Bash":{source:h.GitBash}},linux:{},osx:{}},useWslProfiles:!1},s=new t({terminal:{integrated:e}}),i=await r(void 0,void 0,!1,s,process.env,n,void 0,void 0,void 0);a(i,[{profileName:"Git Bash",path:"C:\\Program Files\\Git\\bin\\bash.exe",args:["--login","-i"],isDefault:!0}])}),test("should allow source to have args",async()=>{const n=["C:\\Program Files\\PowerShell\\7\\pwsh.exe"],e=o(n),s={profiles:{windows:{PowerShell:{source:h.Pwsh,args:["-NoProfile"],overrideName:!0}},linux:{},osx:{}},useWslProfiles:!1},i=new t({terminal:{integrated:s}}),l=await r(void 0,void 0,!1,i,process.env,e,void 0,void 0,n);a(l,[{profileName:"PowerShell",path:"C:\\Program Files\\PowerShell\\7\\pwsh.exe",overrideName:!0,args:["-NoProfile"],isDefault:!0}])}),test("configured args should override default source ones",async()=>{const n=o(["C:\\Program Files\\Git\\bin\\bash.exe"]),e={profiles:{windows:{"Git Bash":{source:h.GitBash,args:[]}},linux:{},osx:{}},useWslProfiles:!1},s=new t({terminal:{integrated:e}}),i=await r(void 0,void 0,!1,s,process.env,n,void 0,void 0,void 0);a(i,[{profileName:"Git Bash",path:"C:\\Program Files\\Git\\bin\\bash.exe",args:[],isAutoDetected:void 0,overrideName:void 0,isDefault:!0}])}),suite("pwsh source detection/fallback",()=>{const n={profiles:{windows:{PowerShell:{source:h.Pwsh}},linux:{},osx:{}},useWslProfiles:!1};test("should prefer pwsh 7 to Windows PowerShell",async()=>{const e=["C:\\Program Files\\PowerShell\\7\\pwsh.exe","C:\\Sysnative\\WindowsPowerShell\\v1.0\\powershell.exe","C:\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"],s=o(e),i=new t({terminal:{integrated:n}}),l=await r(void 0,void 0,!1,i,process.env,s,void 0,void 0,e);a(l,[{profileName:"PowerShell",path:"C:\\Program Files\\PowerShell\\7\\pwsh.exe",isDefault:!0}])}),test("should prefer pwsh 7 to pwsh 6",async()=>{const e=["C:\\Program Files\\PowerShell\\7\\pwsh.exe","C:\\Program Files\\PowerShell\\6\\pwsh.exe","C:\\Sysnative\\WindowsPowerShell\\v1.0\\powershell.exe","C:\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"],s=o(e),i=new t({terminal:{integrated:n}}),l=await r(void 0,void 0,!1,i,process.env,s,void 0,void 0,e);a(l,[{profileName:"PowerShell",path:"C:\\Program Files\\PowerShell\\7\\pwsh.exe",isDefault:!0}])}),test("should fallback to Windows PowerShell",async()=>{const e=["C:\\Windows\\Sysnative\\WindowsPowerShell\\v1.0\\powershell.exe","C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"],s=o(e),i=new t({terminal:{integrated:n}}),l=await r(void 0,void 0,!1,i,process.env,s,void 0,void 0,e);f(l.length,1),f(l[0].profileName,"PowerShell")})});else{const n={profiles:{windows:{},osx:{fakeshell1:{path:"/bin/fakeshell1"},fakeshell2:{path:"/bin/fakeshell2"},fakeshell3:{path:"/bin/fakeshell3"}},linux:{fakeshell1:{path:"/bin/fakeshell1"},fakeshell2:{path:"/bin/fakeshell2"},fakeshell3:{path:"/bin/fakeshell3"}}},useWslProfiles:!1},e={profiles:{windows:{},osx:{fakeshell1:{path:"fakeshell1"},fakeshell2:{path:"fakeshell2"},fakeshell3:{path:"fakeshell3"}},linux:{fakeshell1:{path:"fakeshell1"},fakeshell2:{path:"fakeshell2"},fakeshell3:{path:"fakeshell3"}}},useWslProfiles:!1};test("should detect shells via absolute paths",async()=>{const s=o(["/bin/fakeshell1","/bin/fakeshell3"]),i=new t({terminal:{integrated:n}}),l=await r(void 0,void 0,!1,i,process.env,s,void 0,void 0,void 0);a(l,[{profileName:"fakeshell1",path:"/bin/fakeshell1",isDefault:!0},{profileName:"fakeshell3",path:"/bin/fakeshell3",isDefault:!0}])}),test("should auto detect shells via /etc/shells",async()=>{const s=o(["/bin/fakeshell1","/bin/fakeshell3"],`/bin/fakeshell1
/bin/fakeshell3`),i=new t({terminal:{integrated:e}}),l=await r(void 0,void 0,!0,i,process.env,s,void 0,void 0,void 0);a(l,[{profileName:"fakeshell1",path:"/bin/fakeshell1",isFromPath:!0,isDefault:!0},{profileName:"fakeshell3",path:"/bin/fakeshell3",isFromPath:!0,isDefault:!0}])}),test("should validate auto detected shells from /etc/shells exist",async()=>{const s=o(["/bin/fakeshell1"],`/bin/fakeshell1
/bin/fakeshell3`),i=new t({terminal:{integrated:e}}),l=await r(void 0,void 0,!0,i,process.env,s,void 0,void 0,void 0);a(l,[{profileName:"fakeshell1",path:"/bin/fakeshell1",isFromPath:!0,isDefault:!0}])})}});function o(n,e=""){return{async existsFile(i){return n.includes(i)},async readFile(i){return i!=="/etc/shells"&&u("Unexepected path"),Buffer.from(e)}}}});
