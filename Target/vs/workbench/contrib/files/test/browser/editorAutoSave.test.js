import r from"assert";import{Event as l}from"../../../../../base/common/event.js";import{ensureNoDisposablesAreLeakedInTestSuite as m,toResource as s}from"../../../../../base/test/common/utils.js";import{IEditorService as S}from"../../../../services/editor/common/editorService.js";import{TestFilesConfigurationService as v,workbenchInstantiationService as p,TestServiceAccessor as E,registerTestFileEditor as w,createEditorPart as x,TestEnvironmentService as T,TestFileService as u,TestTextResourceConfigurationService as I}from"../../../../test/browser/workbenchTestServices.js";import"../../../../services/textfile/common/textfiles.js";import{IEditorGroupsService as g}from"../../../../services/editor/common/editorGroupsService.js";import{DisposableStore as y}from"../../../../../base/common/lifecycle.js";import"../../../../services/textfile/common/textFileEditorModelManager.js";import{EditorService as F}from"../../../../services/editor/browser/editorService.js";import{EditorAutoSave as C}from"../../../../browser/parts/editor/editorAutoSave.js";import{IConfigurationService as M}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as b}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{IFilesConfigurationService as h}from"../../../../services/filesConfiguration/common/filesConfigurationService.js";import"../../../../../platform/contextkey/common/contextkey.js";import{MockContextKeyService as D}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{DEFAULT_EDITOR_ASSOCIATION as A}from"../../../../common/editor.js";import{TestWorkspace as k}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{TestContextService as P,TestMarkerService as G}from"../../../../test/common/workbenchTestServices.js";import{UriIdentityService as K}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{IAccessibilitySignalService as O}from"../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js";suite("EditorAutoSave",()=>{const o=new y;setup(()=>{o.add(w())}),teardown(()=>{o.clear()});async function n(i){const e=p(void 0,o),t=new b;t.setUserConfiguration("files",i),e.stub(M,t),e.stub(O,{playSignal:async()=>{},isSoundEnabled(R){return!1}}),e.stub(h,o.add(new v(e.createInstance(D),t,new P(k),T,o.add(new K(o.add(new u))),o.add(new u),new G,new I(t))));const a=await x(e,o);e.stub(g,a);const f=o.add(e.createInstance(F,void 0));e.stub(S,f);const d=e.createInstance(E);return o.add(d.textFileService.files),o.add(e.createInstance(C)),d}test("editor auto saves after short delay if configured",async function(){const i=await n({autoSave:"afterDelay",autoSaveDelay:1}),e=s.call(this,"/path/index.txt"),t=o.add(await i.textFileService.files.resolve(e));t.textEditorModel?.setValue("Super Good"),r.ok(t.isDirty()),await c(t),r.strictEqual(t.isDirty(),!1)}),test("editor auto saves on focus change if configured",async function(){const i=await n({autoSave:"onFocusChange"}),e=s.call(this,"/path/index.txt");await i.editorService.openEditor({resource:e,options:{override:A.id}});const t=o.add(await i.textFileService.files.resolve(e));t.textEditorModel?.setValue("Super Good"),r.ok(t.isDirty());const a=await i.editorService.openEditor({resource:s.call(this,"/path/index_other.txt")});await c(t),r.strictEqual(t.isDirty(),!1),await a?.group.closeAllEditors()});function c(i){return l.toPromise(l.once(i.onDidChangeDirty))}m()});
