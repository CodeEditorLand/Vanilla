import{Schemas as n}from"../../../../base/common/network.js";import{URI as r}from"../../../../base/common/uri.js";import{localize as i}from"../../../../nls.js";import{EditorInputCapabilities as o}from"../../../common/editor.js";import{EditorInput as s}from"../../../common/editor/editorInput.js";import"./extensions.js";import{areSameExtensions as d}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{join as a}from"../../../../base/common/path.js";import"../../../../platform/editor/common/editor.js";import"../../../../base/common/themables.js";import{Codicon as m}from"../../../../base/common/codicons.js";import{registerIcon as p}from"../../../../platform/theme/common/iconRegistry.js";const x=p("extensions-editor-label-icon",m.extensions,i("extensionsEditorLabelIcon","Icon of the extensions editor label."));class t extends s{constructor(e){super();this._extension=e}static ID="workbench.extensions.input2";get typeId(){return t.ID}get capabilities(){return o.Readonly|o.Singleton}get resource(){return r.from({scheme:n.extension,path:a(this._extension.identifier.id,"extension")})}get extension(){return this._extension}getName(){return i("extensionsInputName","Extension: {0}",this._extension.displayName)}getIcon(){return x}matches(e){return super.matches(e)?!0:e instanceof t&&d(this._extension.identifier,e._extension.identifier)}}export{t as ExtensionsInput};
