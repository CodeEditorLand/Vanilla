import i from"assert";import{DeferredPromise as v}from"../../../base/common/async.js";import{DisposableStore as P}from"../../../base/common/lifecycle.js";import{isCI as R}from"../../../base/common/platform.js";import{URI as C}from"../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as D}from"../../../base/test/common/utils.js";import{SyncDescriptor as E}from"../../../platform/instantiation/common/descriptors.js";import{ServiceCollection as I}from"../../../platform/instantiation/common/serviceCollection.js";import"../../browser/parts/editor/editorPart.js";import{WorkbenchPhase as p,WorkbenchContributionsRegistry as u}from"../../common/contributions.js";import{EditorService as A}from"../../services/editor/browser/editorService.js";import{IEditorGroupsService as _}from"../../services/editor/common/editorGroupsService.js";import{IEditorService as S,SIDE_GROUP as z}from"../../services/editor/common/editorService.js";import{LifecyclePhase as b}from"../../services/lifecycle/common/lifecycle.js";import{TestFileEditorInput as w,TestServiceAccessor as m,TestSingletonFileEditorInput as B,createEditorPart as F,registerTestEditor as O,workbenchInstantiationService as d}from"./workbenchTestServices.js";suite("Contributions",()=>{const r=new P;let n,c,l,h;const f="MyTestEditorForContributions",y="testEditorInputForContributions";async function g(e=d(void 0,r)){const o=await F(e,r);e.stub(_,o);const t=r.add(e.createInstance(A,void 0));return e.stub(S,t),[o,t]}setup(()=>{n=!1,c=new v,l=!1,h=new v,r.add(O(f,[new E(w),new E(B)],y))}),teardown(async()=>{r.clear()});class s{constructor(){n=!0,c.complete()}}class k{constructor(){l=!0,h.complete()}}class W{constructor(){throw new Error}}test("getWorkbenchContribution() - with lazy contributions",()=>{const e=r.add(new u);i.throws(()=>e.getWorkbenchContribution("a")),e.registerWorkbenchContribution2("a",s,{lazy:!0}),i.throws(()=>e.getWorkbenchContribution("a")),e.registerWorkbenchContribution2("b",k,{lazy:!0}),e.registerWorkbenchContribution2("c",W,{lazy:!0});const o=d(void 0,r);e.start(o);const t=e.getWorkbenchContribution("a");i.ok(t instanceof s),i.ok(n),i.strictEqual(t,e.getWorkbenchContribution("a"));const a=e.getWorkbenchContribution("b");i.ok(a instanceof k),i.throws(()=>e.getWorkbenchContribution("c"))}),test("getWorkbenchContribution() - with non-lazy contributions",async()=>{const e=r.add(new u),o=d(void 0,r),t=o.createInstance(m);t.lifecycleService.usePhases=!0,e.start(o),i.throws(()=>e.getWorkbenchContribution("a")),e.registerWorkbenchContribution2("a",s,p.BlockRestore);const a=e.getWorkbenchContribution("a");i.ok(a instanceof s),i.ok(n),t.lifecycleService.phase=b.Ready,await c.p,i.strictEqual(a,e.getWorkbenchContribution("a"))}),test("lifecycle phase instantiation works when phase changes",async()=>{const e=r.add(new u),o=d(void 0,r),t=o.createInstance(m);e.start(o),e.registerWorkbenchContribution2("a",s,p.BlockRestore),i.ok(!n),t.lifecycleService.phase=b.Ready,await c.p,i.ok(n)}),test("lifecycle phase instantiation works when phase was already met",async()=>{const e=r.add(new u),o=d(void 0,r),t=o.createInstance(m);t.lifecycleService.usePhases=!0,t.lifecycleService.phase=b.Restored,e.registerWorkbenchContribution2("a",s,p.BlockRestore),e.start(o),await c.p,i.ok(n)}),(R?test.skip:test)("lifecycle phase instantiation works for late phases",async()=>{const e=r.add(new u),o=d(void 0,r),t=o.createInstance(m);t.lifecycleService.usePhases=!0,e.start(o),e.registerWorkbenchContribution2("a",s,p.AfterRestored),e.registerWorkbenchContribution2("b",k,p.Eventually),i.ok(!n),i.ok(!l),t.lifecycleService.phase=b.Starting,t.lifecycleService.phase=b.Ready,t.lifecycleService.phase=b.Restored,await c.p,i.ok(n),t.lifecycleService.phase=b.Eventually,await h.p,i.ok(l)}),test("contribution on editor - editor exists before start",async function(){const e=r.add(new u),o=d(void 0,r),[,t]=await g(o),a=r.add(new w(C.parse("my://resource-basics"),y));await t.openEditor(a,{pinned:!0}),e.registerWorkbenchContribution2("a",s,{editorTypeId:f}),e.start(o.createChild(new I([S,t]))),await c.p,i.ok(n),e.registerWorkbenchContribution2("b",k,{editorTypeId:f});const T=r.add(new w(C.parse("my://resource-basics2"),y));await t.openEditor(T,{pinned:!0},z),await h.p,i.ok(l)}),test("contribution on editor - editor does not exist before start",async function(){const e=r.add(new u),o=d(void 0,r),[,t]=await g(o),a=r.add(new w(C.parse("my://resource-basics"),y));e.registerWorkbenchContribution2("a",s,{editorTypeId:f}),e.start(o.createChild(new I([S,t]))),await t.openEditor(a,{pinned:!0}),await c.p,i.ok(n)}),D()});
