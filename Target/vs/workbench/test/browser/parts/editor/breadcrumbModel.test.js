import e from"assert";import{URI as a}from"../../../../../base/common/uri.js";import{WorkspaceFolder as f}from"../../../../../platform/workspace/common/workspace.js";import{BreadcrumbsModel as c}from"../../../../browser/parts/editor/breadcrumbsModel.js";import{TestConfigurationService as d}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{FileKind as i}from"../../../../../platform/files/common/files.js";import{TestContextService as E}from"../../../common/workbenchTestServices.js";import{Workspace as p}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{mock as m}from"../../../../../base/test/common/mock.js";import"../../../../services/outline/browser/outline.js";import{ensureNoDisposablesAreLeakedInTestSuite as b}from"../../../../../base/test/common/utils.js";suite("Breadcrumb Model",function(){let s;const l=new E(new p("ffff",[new f({uri:a.parse("foo:/bar/baz/ws"),name:"ws",index:0})])),u=new class extends d{getValue(...t){return t[0]==="breadcrumbs.filePath"||t[0]==="breadcrumbs.symbolPath"?"on":super.getValue(...t)}updateValue(){return Promise.resolve()}};teardown(function(){s.dispose()}),b(),test("only uri, inside workspace",function(){s=new c(a.parse("foo:/bar/baz/ws/some/path/file.ts"),void 0,u,l,new class extends m(){});const t=s.getElements();e.strictEqual(t.length,3);const[r,o,n]=t;e.strictEqual(r.kind,i.FOLDER),e.strictEqual(o.kind,i.FOLDER),e.strictEqual(n.kind,i.FILE),e.strictEqual(r.uri.toString(),"foo:/bar/baz/ws/some"),e.strictEqual(o.uri.toString(),"foo:/bar/baz/ws/some/path"),e.strictEqual(n.uri.toString(),"foo:/bar/baz/ws/some/path/file.ts")}),test("display uri matters for FileElement",function(){s=new c(a.parse("foo:/bar/baz/ws/some/PATH/file.ts"),void 0,u,l,new class extends m(){});const t=s.getElements();e.strictEqual(t.length,3);const[r,o,n]=t;e.strictEqual(r.kind,i.FOLDER),e.strictEqual(o.kind,i.FOLDER),e.strictEqual(n.kind,i.FILE),e.strictEqual(r.uri.toString(),"foo:/bar/baz/ws/some"),e.strictEqual(o.uri.toString(),"foo:/bar/baz/ws/some/PATH"),e.strictEqual(n.uri.toString(),"foo:/bar/baz/ws/some/PATH/file.ts")}),test("only uri, outside workspace",function(){s=new c(a.parse("foo:/outside/file.ts"),void 0,u,l,new class extends m(){});const t=s.getElements();e.strictEqual(t.length,2);const[r,o]=t;e.strictEqual(r.kind,i.FOLDER),e.strictEqual(o.kind,i.FILE),e.strictEqual(r.uri.toString(),"foo:/outside"),e.strictEqual(o.uri.toString(),"foo:/outside/file.ts")})});
