import o from"assert";import{release as i,hostname as m}from"os";import{resolveWorkbenchCommonProperties as r}from"../../common/workbenchCommonProperties.js";import{StorageScope as c,InMemoryStorageService as a,StorageTarget as p}from"../../../../../platform/storage/common/storage.js";import{timeout as l}from"../../../../../base/common/async.js";import{ensureNoDisposablesAreLeakedInTestSuite as S}from"../../../../../base/test/common/utils.js";suite("Telemetry - common properties",function(){let s;teardown(()=>{s.dispose()}),S(),setup(()=>{s=new a}),test("default",function(){const e=r(s,i(),m(),void 0,void 0,"someMachineId","someSqmId","somedevDeviceId",!1,process);o.ok("commitHash"in e),o.ok("sessionID"in e),o.ok("timestamp"in e),o.ok("common.platform"in e),o.ok("common.nodePlatform"in e),o.ok("common.nodeArch"in e),o.ok("common.timesincesessionstart"in e),o.ok("common.sequence"in e),o.ok("common.platformVersion"in e,"platformVersion"),o.ok("version"in e),o.ok("common.firstSessionDate"in e,"firstSessionDate"),o.ok("common.lastSessionDate"in e,"lastSessionDate"),o.ok("common.isNewSession"in e,"isNewSession"),o.ok("common.machineId"in e,"machineId")}),test("lastSessionDate when available",function(){s.store("telemetry.lastSessionDate",new Date().toUTCString(),c.APPLICATION,p.MACHINE);const e=r(s,i(),m(),void 0,void 0,"someMachineId","someSqmId","somedevDeviceId",!1,process);o.ok("common.lastSessionDate"in e),o.ok("common.isNewSession"in e),o.strictEqual(e["common.isNewSession"],"0")}),test("values chance on ask",async function(){const e=r(s,i(),m(),void 0,void 0,"someMachineId","someSqmId","somedevDeviceId",!1,process);let n=e["common.sequence"],t=e["common.sequence"];o.ok(n!==t,"seq"),n=e.timestamp,t=e.timestamp,o.ok(n!==t,"timestamp"),n=e["common.timesincesessionstart"],await l(10),t=e["common.timesincesessionstart"],o.ok(n!==t,"timesincesessionstart")})});
