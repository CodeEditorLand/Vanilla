import r from"assert";import*as f from"sinon";import{AiRelatedInformationService as s}from"../../common/aiRelatedInformationService.js";import{NullLogService as I}from"../../../../../platform/log/common/log.js";import{RelatedInformationType as o}from"../../common/aiRelatedInformation.js";import{CancellationToken as d}from"../../../../../base/common/cancellation.js";import{ensureNoDisposablesAreLeakedInTestSuite as c}from"../../../../../base/test/common/utils.js";suite("AiRelatedInformationService",()=>{const l=c();let e;setup(()=>{e=new s(l.add(new I))}),test("should check if providers are registered",()=>{r.equal(e.isEnabled(),!1),l.add(e.registerAiRelatedInformationProvider(o.CommandInformation,{provideAiRelatedInformation:()=>Promise.resolve([])})),r.equal(e.isEnabled(),!0)}),test("should register and unregister providers",()=>{const t={provideAiRelatedInformation:()=>Promise.resolve([])},i=e.registerAiRelatedInformationProvider(o.CommandInformation,t);r.strictEqual(e.isEnabled(),!0),i.dispose(),r.strictEqual(e.isEnabled(),!1)}),test("should get related information",async()=>{const t="command",i={provideAiRelatedInformation:()=>Promise.resolve([{type:o.CommandInformation,command:t,weight:1}])};e.registerAiRelatedInformationProvider(o.CommandInformation,i);const n=await e.getRelatedInformation("query",[o.CommandInformation],d.None);r.strictEqual(n.length,1),r.strictEqual(n[0].command,t)}),test("should get different types of related information",async()=>{const t="command",i={provideAiRelatedInformation:()=>Promise.resolve([{type:o.CommandInformation,command:t,weight:1}])};e.registerAiRelatedInformationProvider(o.CommandInformation,i);const n="setting",a={provideAiRelatedInformation:()=>Promise.resolve([{type:o.SettingInformation,setting:n,weight:1}])};e.registerAiRelatedInformationProvider(o.SettingInformation,a);const m=await e.getRelatedInformation("query",[o.CommandInformation,o.SettingInformation],d.None);r.strictEqual(m.length,2),r.strictEqual(m[0].command,t),r.strictEqual(m[1].setting,n)}),test("should return empty array on timeout",async()=>{const t=f.useFakeTimers({shouldAdvanceTime:!0}),i={provideAiRelatedInformation:()=>new Promise(n=>{setTimeout(()=>{n([{type:o.CommandInformation,command:"command",weight:1}])},s.DEFAULT_TIMEOUT+100)})};e.registerAiRelatedInformationProvider(o.CommandInformation,i);try{const n=e.getRelatedInformation("query",[o.CommandInformation],d.None);t.tick(s.DEFAULT_TIMEOUT+200);const a=await n;r.strictEqual(a.length,0)}finally{t.restore()}})});
