var W=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var v=(s,n,e,i)=>{for(var t=i>1?void 0:i?I(n,e):n,o=s.length-1,l;o>=0;o--)(l=s[o])&&(t=(i?l(n,e,t):l(t))||t);return i&&t&&W(n,e,t),t},d=(s,n)=>(e,i)=>n(e,i,s);import{Emitter as S,Event as r}from"../../../../base/common/event.js";import{IHostService as y}from"../browser/host.js";import{INativeHostService as u}from"../../../../platform/native/common/native.js";import{InstantiationType as p,registerSingleton as h}from"../../../../platform/instantiation/common/extensions.js";import{ILabelService as g,Verbosity as w}from"../../../../platform/label/common/label.js";import{IWorkbenchEnvironmentService as O}from"../../environment/common/environmentService.js";import{isFolderToOpen as P,isWorkspaceToOpen as b}from"../../../../platform/window/common/window.js";import{Disposable as F}from"../../../../base/common/lifecycle.js";import{NativeHostService as A}from"../../../../platform/native/common/nativeHostService.js";import{INativeWorkbenchEnvironmentService as E}from"../../environment/electron-sandbox/environmentService.js";import{IMainProcessService as H}from"../../../../platform/ipc/common/mainProcessService.js";import{disposableWindowInterval as D,getActiveDocument as _,getWindowId as L,getWindowsCount as x,hasWindow as m,onDidRegisterWindow as C}from"../../../../base/browser/dom.js";import{memoize as T}from"../../../../base/common/decorators.js";import{isAuxiliaryWindow as f}from"../../../../base/browser/window.js";import{webUtils as M}from"../../../../base/parts/sandbox/electron-sandbox/globals.js";let c=class extends A{constructor(n,e){super(n.window.id,e)}};c=v([d(0,E),d(1,H)],c);let a=class extends F{constructor(e,i,t){super();this.nativeHostService=e;this.labelService=i;this.environmentService=t}onDidChangeFocus=r.latch(r.any(r.map(r.filter(this.nativeHostService.onDidFocusMainOrAuxiliaryWindow,e=>m(e),this._store),()=>this.hasFocus,this._store),r.map(r.filter(this.nativeHostService.onDidBlurMainOrAuxiliaryWindow,e=>m(e),this._store),()=>this.hasFocus,this._store),r.map(this.onDidChangeActiveWindow,()=>this.hasFocus,this._store)),void 0,this._store);get hasFocus(){return _().hasFocus()}async hadLastFocus(){const e=await this.nativeHostService.getActiveWindowId();return typeof e>"u"?!1:e===this.nativeHostService.windowId}get onDidChangeActiveWindow(){const e=this._register(new S);return this._register(r.filter(this.nativeHostService.onDidFocusMainOrAuxiliaryWindow,i=>m(i),this._store)(i=>e.fire(i))),this._register(C(({window:i,disposables:t})=>{t.add(D(i,()=>{const o=i.document.hasFocus();return o&&e.fire(i.vscodeWindowId),o},100,20))})),r.latch(e.event,void 0,this._store)}onDidChangeFullScreen=r.filter(this.nativeHostService.onDidChangeWindowFullScreen,e=>m(e.windowId),this._store);openWindow(e,i){return Array.isArray(e)?this.doOpenWindow(e,i):this.doOpenEmptyWindow(e)}doOpenWindow(e,i){const t=this.environmentService.remoteAuthority;return t&&(e.forEach(o=>o.label=o.label||this.getRecentLabel(o)),i?.remoteAuthority===void 0&&(i=i?{...i,remoteAuthority:t}:{remoteAuthority:t})),this.nativeHostService.openWindow(e,i)}getRecentLabel(e){return P(e)?this.labelService.getWorkspaceLabel(e.folderUri,{verbose:w.LONG}):b(e)?this.labelService.getWorkspaceLabel({id:"",configPath:e.workspaceUri},{verbose:w.LONG}):this.labelService.getUriLabel(e.fileUri)}doOpenEmptyWindow(e){const i=this.environmentService.remoteAuthority;return i&&e?.remoteAuthority===void 0&&(e=e?{...e,remoteAuthority:i}:{remoteAuthority:i}),this.nativeHostService.openWindow(e)}toggleFullScreen(e){return this.nativeHostService.toggleFullScreen({targetWindowId:f(e)?e.vscodeWindowId:void 0})}async moveTop(e){if(!(x()<=1))return this.nativeHostService.moveWindowTop(f(e)?{targetWindowId:e.vscodeWindowId}:void 0)}getCursorScreenPoint(){return this.nativeHostService.getCursorScreenPoint()}focus(e,i){return this.nativeHostService.focusWindow({force:i?.force,targetWindowId:L(e)})}restart(){return this.nativeHostService.relaunch()}reload(e){return this.nativeHostService.reload(e)}close(){return this.nativeHostService.closeWindow()}async withExpectedShutdown(e){return await e()}getPathForFile(e){return M.getPathForFile(e)}};v([T],a.prototype,"onDidChangeActiveWindow",1),a=v([d(0,u),d(1,g),d(2,O)],a),h(y,a,p.Delayed),h(u,c,p.Delayed);
