import*as n from"../../../../../nls.js";import e from"assert";import*as h from"sinon";import{Extensions as f,ViewContainerLocation as v}from"../../../../common/views.js";import{dispose as z}from"../../../../../base/common/lifecycle.js";import{move as O}from"../../../../../base/common/arrays.js";import{workbenchInstantiationService as k}from"../../../../test/browser/workbenchTestServices.js";import{ContextKeyExpr as E,IContextKeyService as M}from"../../../../../platform/contextkey/common/contextkey.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ContextKeyService as R}from"../../../../../platform/contextkey/browser/contextKeyService.js";import{ViewDescriptorService as F}from"../../browser/viewDescriptorService.js";import{Registry as I}from"../../../../../platform/registry/common/platform.js";import{SyncDescriptor as p}from"../../../../../platform/instantiation/common/descriptors.js";import{IStorageService as x,StorageScope as q,StorageTarget as y}from"../../../../../platform/storage/common/storage.js";import{Event as C}from"../../../../../base/common/event.js";import{getViewsStateStorageId as T}from"../../common/viewContainerModel.js";import{runWithFakedTimers as b}from"../../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as j}from"../../../../../base/test/common/utils.js";const u=I.as(f.ViewContainersRegistry),d=I.as(f.ViewsRegistry);class g{elements;disposables=[];constructor(c){this.elements=[...c.visibleViewDescriptors],c.onDidAddVisibleViewDescriptors(V=>V.forEach(({viewDescriptor:a,index:m})=>this.elements.splice(m,0,a)),null,this.disposables),c.onDidRemoveVisibleViewDescriptors(V=>V.sort((a,m)=>m.index-a.index).forEach(({index:a})=>this.elements.splice(a,1)),null,this.disposables),c.onDidMoveVisibleViewDescriptors(({from:V,to:a})=>O(this.elements,V.index,a.index),null,this.disposables)}dispose(){this.disposables=z(this.disposables)}}suite("ViewContainerModel",()=>{let r;const c=j();let V,a,m;setup(()=>{const i=k(void 0,c);V=c.add(i.createInstance(R)),i.stub(M,V),m=i.get(x),a=c.add(i.createInstance(F))}),teardown(()=>{d.deregisterViews(d.getViews(r),r),u.deregisterViewContainer(r)}),test("empty model",function(){r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r);e.strictEqual(i.visibleViewDescriptors.length,0)}),test("register/unregister",()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i));e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1")};d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,1),e.strictEqual(t.elements.length,1),e.deepStrictEqual(i.visibleViewDescriptors[0],s),e.deepStrictEqual(t.elements[0],s),d.deregisterViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0)}),test("when contexts",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i));e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0)};d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0,"view should not appear since context isnt in"),e.strictEqual(t.elements.length,0);const o=V.createKey("showview1",!1);e.strictEqual(i.visibleViewDescriptors.length,0,"view should still not appear since showview1 isnt true"),e.strictEqual(t.elements.length,0),o.set(!0),await new Promise(l=>setTimeout(l,30)),e.strictEqual(i.visibleViewDescriptors.length,1,"view should appear"),e.strictEqual(t.elements.length,1),e.deepStrictEqual(i.visibleViewDescriptors[0],s),e.strictEqual(t.elements[0],s),o.set(!1),await new Promise(l=>setTimeout(l,30)),e.strictEqual(i.visibleViewDescriptors.length,0,"view should disappear"),e.strictEqual(t.elements.length,0),d.deregisterViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0,"view should not be there anymore"),e.strictEqual(t.elements.length,0),o.set(!0),await new Promise(l=>setTimeout(l,30)),e.strictEqual(i.visibleViewDescriptors.length,0,"view should not be there anymore"),e.strictEqual(t.elements.length,0)})),test("when contexts - multiple",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1")},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2"),when:E.equals("showview2",!0)};d.registerViews([s,o],r),e.deepStrictEqual(i.visibleViewDescriptors,[s],"only view1 should be visible"),e.deepStrictEqual(t.elements,[s],"only view1 should be visible");const l=V.createKey("showview2",!1);e.deepStrictEqual(i.visibleViewDescriptors,[s],"still only view1 should be visible"),e.deepStrictEqual(t.elements,[s],"still only view1 should be visible"),l.set(!0),await new Promise(w=>setTimeout(w,30)),e.deepStrictEqual(i.visibleViewDescriptors,[s,o],"both views should be visible"),e.deepStrictEqual(t.elements,[s,o],"both views should be visible"),d.deregisterViews([s,o],r)})),test("when contexts - multiple 2",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0)},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2")};d.registerViews([s,o],r),e.deepStrictEqual(i.visibleViewDescriptors,[o],"only view2 should be visible"),e.deepStrictEqual(t.elements,[o],"only view2 should be visible");const l=V.createKey("showview1",!1);e.deepStrictEqual(i.visibleViewDescriptors,[o],"still only view2 should be visible"),e.deepStrictEqual(t.elements,[o],"still only view2 should be visible"),l.set(!0),await new Promise(w=>setTimeout(w,30)),e.deepStrictEqual(i.visibleViewDescriptors,[s,o],"both views should be visible"),e.deepStrictEqual(t.elements,[s,o],"both views should be visible"),d.deregisterViews([s,o],r)})),test("setVisible",()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2"),canToggleVisibility:!0},l={id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3"),canToggleVisibility:!0};d.registerViews([s,o,l],r),e.deepStrictEqual(i.visibleViewDescriptors,[s,o,l]),e.deepStrictEqual(t.elements,[s,o,l]),i.setVisible("view2",!0),e.deepStrictEqual(i.visibleViewDescriptors,[s,o,l],"nothing should happen"),e.deepStrictEqual(t.elements,[s,o,l]),i.setVisible("view2",!1),e.deepStrictEqual(i.visibleViewDescriptors,[s,l],"view2 should hide"),e.deepStrictEqual(t.elements,[s,l]),i.setVisible("view1",!1),e.deepStrictEqual(i.visibleViewDescriptors,[l],"view1 should hide"),e.deepStrictEqual(t.elements,[l]),i.setVisible("view3",!1),e.deepStrictEqual(i.visibleViewDescriptors,[],"view3 shoud hide"),e.deepStrictEqual(t.elements,[]),i.setVisible("view1",!0),e.deepStrictEqual(i.visibleViewDescriptors,[s],"view1 should show"),e.deepStrictEqual(t.elements,[s]),i.setVisible("view3",!0),e.deepStrictEqual(i.visibleViewDescriptors,[s,l],"view3 should show"),e.deepStrictEqual(t.elements,[s,l]),i.setVisible("view2",!0),e.deepStrictEqual(i.visibleViewDescriptors,[s,o,l],"view2 should show"),e.deepStrictEqual(t.elements,[s,o,l]),d.deregisterViews([s,o,l],r),e.deepStrictEqual(i.visibleViewDescriptors,[]),e.deepStrictEqual(t.elements,[])}),test("move",()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1")},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2")},l={id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3")};d.registerViews([s,o,l],r),e.deepStrictEqual(i.visibleViewDescriptors,[s,o,l],"model views should be OK"),e.deepStrictEqual(t.elements,[s,o,l],"sql views should be OK"),i.move("view3","view1"),e.deepStrictEqual(i.visibleViewDescriptors,[l,s,o],"view3 should go to the front"),e.deepStrictEqual(t.elements,[l,s,o]),i.move("view1","view2"),e.deepStrictEqual(i.visibleViewDescriptors,[l,o,s],"view1 should go to the end"),e.deepStrictEqual(t.elements,[l,o,s]),i.move("view1","view3"),e.deepStrictEqual(i.visibleViewDescriptors,[s,l,o],"view1 should go to the front"),e.deepStrictEqual(t.elements,[s,l,o]),i.move("view2","view3"),e.deepStrictEqual(i.visibleViewDescriptors,[s,o,l],"view2 should go to the middle"),e.deepStrictEqual(t.elements,[s,o,l])}),test("view states",()=>b({useFakeTimers:!0},async()=>{m.store(`${r.id}.state.hidden`,JSON.stringify([{id:"view1",isHidden:!0}]),q.PROFILE,y.MACHINE),r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i));e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1")};d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0,"view should not appear since it was set not visible in view state"),e.strictEqual(t.elements.length,0)})),test("view states and when contexts",()=>b({useFakeTimers:!0},async()=>{m.store(`${r.id}.state.hidden`,JSON.stringify([{id:"view1",isHidden:!0}]),q.PROFILE,y.MACHINE),r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i));e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0)};d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0,"view should not appear since context isnt in"),e.strictEqual(t.elements.length,0);const o=V.createKey("showview1",!1);e.strictEqual(i.visibleViewDescriptors.length,0,"view should still not appear since showview1 isnt true"),e.strictEqual(t.elements.length,0),o.set(!0),await new Promise(l=>setTimeout(l,30)),e.strictEqual(i.visibleViewDescriptors.length,0,"view should still not appear since it was set not visible in view state"),e.strictEqual(t.elements.length,0)})),test("view states and when contexts multiple views",()=>b({useFakeTimers:!0},async()=>{m.store(`${r.id}.state.hidden`,JSON.stringify([{id:"view1",isHidden:!0}]),q.PROFILE,y.MACHINE),r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i));e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview",!0)},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2")},l={id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3"),when:E.equals("showview",!0)};d.registerViews([s,o,l],r),e.deepStrictEqual(i.visibleViewDescriptors,[o],"Only view2 should be visible"),e.deepStrictEqual(t.elements,[o]);const w=V.createKey("showview",!1);e.deepStrictEqual(i.visibleViewDescriptors,[o],"Only view2 should be visible"),e.deepStrictEqual(t.elements,[o]),w.set(!0),await new Promise(D=>setTimeout(D,30)),e.deepStrictEqual(i.visibleViewDescriptors,[o,l],"view3 should be visible"),e.deepStrictEqual(t.elements,[o,l]),w.set(!1),await new Promise(D=>setTimeout(D,30)),e.deepStrictEqual(i.visibleViewDescriptors,[o],"Only view2 should be visible"),e.deepStrictEqual(t.elements,[o])})),test("remove event is not triggered if view was hidden and removed",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0),canToggleVisibility:!0};d.registerViews([s],r);const o=V.createKey("showview1",!0);await new Promise(w=>setTimeout(w,30)),e.strictEqual(i.visibleViewDescriptors.length,1,"view should appear after context is set"),e.strictEqual(t.elements.length,1),i.setVisible("view1",!1),e.strictEqual(i.visibleViewDescriptors.length,0,"view should disappear after setting visibility to false"),e.strictEqual(t.elements.length,0);const l=h.spy();c.add(i.onDidRemoveVisibleViewDescriptors(l)),o.set(!1),await new Promise(w=>setTimeout(w,30)),e.ok(!l.called,"remove event should not be called since it is already hidden")})),test("add event is not triggered if view was set visible (when visible) and not active",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0),canToggleVisibility:!0};V.createKey("showview1",!0).set(!1),d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const l=h.spy();c.add(i.onDidAddVisibleViewDescriptors(l)),i.setVisible("view1",!0),e.ok(!l.called,"add event should not be called since it is already visible"),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0)})),test("remove event is not triggered if view was hidden and not active",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0),canToggleVisibility:!0};V.createKey("showview1",!0).set(!1),d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const l=h.spy();c.add(i.onDidAddVisibleViewDescriptors(l)),i.setVisible("view1",!1),e.ok(!l.called,"add event should not be called since it is disabled"),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0)})),test("add event is not triggered if view was set visible (when not visible) and not active",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0),canToggleVisibility:!0};V.createKey("showview1",!0).set(!1),d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0),i.setVisible("view1",!1),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const l=h.spy();c.add(i.onDidAddVisibleViewDescriptors(l)),i.setVisible("view1",!0),e.ok(!l.called,"add event should not be called since it is disabled"),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0)})),test("added view descriptors are in ascending order in the event",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i));d.registerViews([{id:"view5",ctorDescriptor:null,name:n.localize2("Test View 5","Test View 5"),canToggleVisibility:!0,order:5},{id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2"),canToggleVisibility:!0,order:2}],r),e.strictEqual(t.elements.length,2),e.strictEqual(t.elements[0].id,"view2"),e.strictEqual(t.elements[1].id,"view5"),d.registerViews([{id:"view4",ctorDescriptor:null,name:n.localize2("Test View 4","Test View 4"),canToggleVisibility:!0,order:4},{id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3"),canToggleVisibility:!0,order:3},{id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0,order:1}],r),e.strictEqual(t.elements.length,5),e.strictEqual(t.elements[0].id,"view1"),e.strictEqual(t.elements[1].id,"view2"),e.strictEqual(t.elements[2].id,"view3"),e.strictEqual(t.elements[3].id,"view4"),e.strictEqual(t.elements[4].id,"view5")})),test("add event is triggered only once when view is set visible while it is set active",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0),canToggleVisibility:!0},o=V.createKey("showview1",!0);o.set(!1),d.registerViews([s],r),i.setVisible("view1",!1),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const l=h.spy();c.add(i.onDidAddVisibleViewDescriptors(l)),c.add(C.once(i.onDidChangeActiveViewDescriptors)(()=>i.setVisible("view1",!0))),o.set(!0),await new Promise(w=>setTimeout(w,30)),e.strictEqual(l.callCount,1),e.strictEqual(i.visibleViewDescriptors.length,1),e.strictEqual(t.elements.length,1),e.strictEqual(t.elements[0].id,"view1")})),test("add event is not triggered only when view is set hidden while it is set active",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),when:E.equals("showview1",!0),canToggleVisibility:!0},o=V.createKey("showview1",!0);o.set(!1),d.registerViews([s],r),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0);const l=h.spy();c.add(i.onDidAddVisibleViewDescriptors(l)),c.add(C.once(i.onDidChangeActiveViewDescriptors)(()=>i.setVisible("view1",!1))),o.set(!0),await new Promise(w=>setTimeout(w,30)),e.strictEqual(l.callCount,0),e.strictEqual(i.visibleViewDescriptors.length,0),e.strictEqual(t.elements.length,0)})),test("#142087: view descriptor visibility is not reset",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0};m.store(T("test.state"),JSON.stringify([{id:t.id,isHidden:!0,order:void 0}]),q.PROFILE,y.USER),d.registerViews([t],r),e.strictEqual(i.isVisible(t.id),!1),e.strictEqual(i.activeViewDescriptors[0].id,t.id),e.strictEqual(i.visibleViewDescriptors.length,0)})),test("remove event is triggered properly if multiple views are hidden at the same time",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2"),canToggleVisibility:!0},l={id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3"),canToggleVisibility:!0};d.registerViews([s,o,l],r);const w=h.spy();c.add(i.onDidRemoveVisibleViewDescriptors(w));const D=h.spy();c.add(i.onDidAddVisibleViewDescriptors(D)),m.store(T("test.state"),JSON.stringify([{id:s.id,isHidden:!1,order:void 0},{id:o.id,isHidden:!0,order:void 0},{id:l.id,isHidden:!0,order:void 0}]),q.PROFILE,y.USER),e.ok(!D.called,"add event should not be called"),e.ok(w.calledOnce,"remove event should be called"),e.deepStrictEqual(w.args[0][0],[{viewDescriptor:l,index:2},{viewDescriptor:o,index:1}]),e.strictEqual(t.elements.length,1),e.strictEqual(t.elements[0].id,s.id)})),test("add event is triggered properly if multiple views are hidden at the same time",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2"),canToggleVisibility:!0},l={id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3"),canToggleVisibility:!0};d.registerViews([s,o,l],r),i.setVisible(s.id,!1),i.setVisible(l.id,!1);const w=h.spy();c.add(i.onDidRemoveVisibleViewDescriptors(w));const D=h.spy();c.add(i.onDidAddVisibleViewDescriptors(D)),m.store(T("test.state"),JSON.stringify([{id:s.id,isHidden:!1,order:void 0},{id:o.id,isHidden:!1,order:void 0},{id:l.id,isHidden:!1,order:void 0}]),q.PROFILE,y.USER),e.ok(!w.called,"remove event should not be called"),e.ok(D.calledOnce,"add event should be called once"),e.deepStrictEqual(D.args[0][0],[{viewDescriptor:s,index:0,collapsed:!1,size:void 0},{viewDescriptor:l,index:2,collapsed:!1,size:void 0}]),e.strictEqual(t.elements.length,3),e.strictEqual(t.elements[0].id,s.id),e.strictEqual(t.elements[1].id,o.id),e.strictEqual(t.elements[2].id,l.id)})),test("add and remove events are triggered properly if multiple views are hidden and added at the same time",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i=a.getViewContainerModel(r),t=c.add(new g(i)),s={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0},o={id:"view2",ctorDescriptor:null,name:n.localize2("Test View 2","Test View 2"),canToggleVisibility:!0},l={id:"view3",ctorDescriptor:null,name:n.localize2("Test View 3","Test View 3"),canToggleVisibility:!0},w={id:"view4",ctorDescriptor:null,name:n.localize2("Test View 4","Test View 4"),canToggleVisibility:!0};d.registerViews([s,o,l,w],r),i.setVisible(s.id,!1);const D=h.spy();c.add(i.onDidRemoveVisibleViewDescriptors(D));const S=h.spy();c.add(i.onDidAddVisibleViewDescriptors(S)),m.store(T("test.state"),JSON.stringify([{id:s.id,isHidden:!1,order:void 0},{id:o.id,isHidden:!0,order:void 0},{id:l.id,isHidden:!1,order:void 0},{id:w.id,isHidden:!0,order:void 0}]),q.PROFILE,y.USER),e.ok(D.calledOnce,"remove event should be called once"),e.deepStrictEqual(D.args[0][0],[{viewDescriptor:w,index:2},{viewDescriptor:o,index:0}]),e.ok(S.calledOnce,"add event should be called once"),e.deepStrictEqual(S.args[0][0],[{viewDescriptor:s,index:0,collapsed:!1,size:void 0}]),e.strictEqual(t.elements.length,2),e.strictEqual(t.elements[0].id,s.id),e.strictEqual(t.elements[1].id,l.id)})),test("newly added view descriptor is hidden if it was toggled hidden in storage before adding",()=>b({useFakeTimers:!0},async()=>{r=u.registerViewContainer({id:"test",title:n.localize2("test","test"),ctorDescriptor:new p({})},v.Sidebar);const i={id:"view1",ctorDescriptor:null,name:n.localize2("Test View 1","Test View 1"),canToggleVisibility:!0};m.store(T("test.state"),JSON.stringify([{id:i.id,isHidden:!1,order:void 0}]),q.PROFILE,y.USER);const t=a.getViewContainerModel(r);m.store(T("test.state"),JSON.stringify([{id:i.id,isHidden:!0,order:void 0}]),q.PROFILE,y.USER),d.registerViews([i],r),e.strictEqual(t.isVisible(i.id),!1),e.strictEqual(t.activeViewDescriptors[0].id,i.id),e.strictEqual(t.visibleViewDescriptors.length,0)}))});
