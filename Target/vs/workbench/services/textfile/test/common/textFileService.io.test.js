import a from"assert";import{snapshotToString as p,TextFileOperationResult as I,stringToSnapshot as C}from"../../common/textfiles.js";import{URI as i}from"../../../../../base/common/uri.js";import{join as c,basename as W}from"../../../../../base/common/path.js";import{UTF16le as S,UTF8_with_bom as d,UTF16be as P,UTF8 as v,UTF16le_BOM as _,UTF16be_BOM as G,UTF8_BOM as B}from"../../common/encoding.js";import{bufferToStream as D,VSBuffer as H}from"../../../../../base/common/buffer.js";import{createTextModel as M}from"../../../../../editor/test/common/testTextModel.js";import{DefaultEndOfLine as m}from"../../../../../editor/common/model.js";import{isWindows as R}from"../../../../../base/common/platform.js";import{createTextBufferFactoryFromStream as z}from"../../../../../editor/common/model/textModel.js";import{DisposableStore as V}from"../../../../../base/common/lifecycle.js";function A(b){let n,r="";const{exists:h,stat:U,readFile:l,detectEncodingByBOM:o}=b,w=new V;setup(async()=>{const t=await b.setup();n=t.service,r=t.testDir}),teardown(async()=>{await b.teardown(),w.clear()}),test("create - no encoding - content empty",async()=>{const t=i.file(c(r,"small_new.txt"));await n.create([{resource:t}]);const e=await l(t.fsPath);a.strictEqual(e.byteLength,0)}),test("create - no encoding - content provided (string)",async()=>{const t=i.file(c(r,"small_new.txt"));await n.create([{resource:t,value:"Hello World"}]);const e=await l(t.fsPath);a.strictEqual(e.toString(),"Hello World"),a.strictEqual(e.byteLength,11)}),test("create - no encoding - content provided (snapshot)",async()=>{const t=i.file(c(r,"small_new.txt"));await n.create([{resource:t,value:C("Hello World")}]);const e=await l(t.fsPath);a.strictEqual(e.toString(),"Hello World"),a.strictEqual(e.byteLength,11)}),test("create - UTF 16 LE - no content",async()=>{const t=i.file(c(r,"small_new.utf16le"));await n.create([{resource:t}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,S);const s=await l(t.fsPath);a.strictEqual(s.byteLength,_.length)}),test("create - UTF 16 LE - content provided",async()=>{const t=i.file(c(r,"small_new.utf16le"));await n.create([{resource:t,value:"Hello World"}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,S);const s=await l(t.fsPath);a.strictEqual(s.byteLength,11*2+_.length)}),test("create - UTF 16 BE - no content",async()=>{const t=i.file(c(r,"small_new.utf16be"));await n.create([{resource:t}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,P);const s=await l(t.fsPath);a.strictEqual(s.byteLength,_.length)}),test("create - UTF 16 BE - content provided",async()=>{const t=i.file(c(r,"small_new.utf16be"));await n.create([{resource:t,value:"Hello World"}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,P);const s=await l(t.fsPath);a.strictEqual(s.byteLength,11*2+G.length)}),test("create - UTF 8 BOM - no content",async()=>{const t=i.file(c(r,"small_new.utf8bom"));await n.create([{resource:t}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,d);const s=await l(t.fsPath);a.strictEqual(s.byteLength,B.length)}),test("create - UTF 8 BOM - content provided",async()=>{const t=i.file(c(r,"small_new.utf8bom"));await n.create([{resource:t,value:"Hello World"}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,d);const s=await l(t.fsPath);a.strictEqual(s.byteLength,11+B.length)});function g(t,e){return w.add(M(t)).createSnapshot(e)}test("create - UTF 8 BOM - empty content - snapshot",async()=>{const t=i.file(c(r,"small_new.utf8bom"));await n.create([{resource:t,value:g("")}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,d);const s=await l(t.fsPath);a.strictEqual(s.byteLength,B.length)}),test("create - UTF 8 BOM - content provided - snapshot",async()=>{const t=i.file(c(r,"small_new.utf8bom"));await n.create([{resource:t,value:g("Hello World")}]),a.strictEqual(await h(t.fsPath),!0);const e=await o(t.fsPath);a.strictEqual(e,d);const s=await l(t.fsPath);a.strictEqual(s.byteLength,11+B.length)}),test("write - use encoding (UTF 16 BE) - small content as string",async()=>{await x(i.file(c(r,"small.txt")),P,`Hello
World`,`Hello
World`)}),test("write - use encoding (UTF 16 BE) - small content as snapshot",async()=>{await x(i.file(c(r,"small.txt")),P,g(`Hello
World`),`Hello
World`)}),test("write - use encoding (UTF 16 BE) - large content as string",async()=>{await x(i.file(c(r,"lorem.txt")),P,`Hello
World`,`Hello
World`)}),test("write - use encoding (UTF 16 BE) - large content as snapshot",async()=>{await x(i.file(c(r,"lorem.txt")),P,g(`Hello
World`),`Hello
World`)});async function x(t,e,s,u){await n.write(t,s,{encoding:e});const F=await o(t.fsPath);a.strictEqual(F,e);const f=await n.readStream(t);a.strictEqual(f.encoding,e);const y=w.add(f.value.create(R?m.CRLF:m.LF).textBuffer);a.strictEqual(p(y.createSnapshot(!1)),u)}test("write - use encoding (cp1252)",async()=>{const t=c(r,"some_cp1252.txt"),e=await l(t,"utf8"),s=/\r\n/.test(e)?`\r
`:`
`;await q(i.file(t),"cp1252",['ObjectCount = LoadObjects("\xD6ffentlicher Ordner");',"",'Private = "Pers\xF6nliche Information"',""].join(s))}),test("write - use encoding (shiftjis)",async()=>{await q(i.file(c(r,"some_shiftjis.txt")),"shiftjis","\u4E2D\u6587abc")}),test("write - use encoding (gbk)",async()=>{await q(i.file(c(r,"some_gbk.txt")),"gbk","\u4E2D\u56FDabc")}),test("write - use encoding (cyrillic)",async()=>{await q(i.file(c(r,"some_cyrillic.txt")),"cp866","\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F")}),test("write - use encoding (big5)",async()=>{await q(i.file(c(r,"some_big5.txt")),"cp950","\u4E2D\u6587abc")});async function q(t,e,s){let u=await n.readStream(t,{encoding:e});const F=w.add(u.value.create(R?m.CRLF:m.LF).textBuffer),f=p(F.createSnapshot(!1));a.strictEqual(f,s),await n.write(t,f,{encoding:e}),u=await n.readStream(t,{encoding:e});const y=w.add(u.value.create(m.CRLF).textBuffer);a.strictEqual(p(y.createSnapshot(!1)),f),await n.write(t,g(f),{encoding:e}),u=await n.readStream(t,{encoding:e});const T=w.add(u.value.create(m.CRLF).textBuffer);a.strictEqual(p(T.createSnapshot(!1)),f)}test("write - no encoding - content as string",async()=>{const t=i.file(c(r,"small.txt")),e=(await l(t.fsPath)).toString();await n.write(t,e);const s=await n.readStream(t);a.strictEqual(s.value.getFirstLineText(999999),e)}),test("write - no encoding - content as snapshot",async()=>{const t=i.file(c(r,"small.txt")),e=(await l(t.fsPath)).toString();await n.write(t,g(e));const s=await n.readStream(t);a.strictEqual(s.value.getFirstLineText(999999),e)}),test("write - encoding preserved (UTF 16 LE) - content as string",async()=>{const t=i.file(c(r,"some_utf16le.css")),e=await n.readStream(t);a.strictEqual(e.encoding,S),await x(i.file(c(r,"some_utf16le.css")),S,`Hello
World`,`Hello
World`)}),test("write - encoding preserved (UTF 16 LE) - content as snapshot",async()=>{const t=i.file(c(r,"some_utf16le.css")),e=await n.readStream(t);a.strictEqual(e.encoding,S),await x(i.file(c(r,"some_utf16le.css")),S,g(`Hello
World`),`Hello
World`)}),test("write - UTF8 variations - content as string",async()=>{const t=i.file(c(r,"index.html"));let e=await o(t.fsPath);a.strictEqual(e,null);const s=(await l(t.fsPath)).toString()+"updates";await n.write(t,s,{encoding:d}),e=await o(t.fsPath),a.strictEqual(e,d),await n.write(t,s,{encoding:d}),e=await o(t.fsPath),a.strictEqual(e,d),await n.write(t,s,{encoding:v}),e=await o(t.fsPath),a.strictEqual(e,null),await n.write(t,s,{encoding:v}),e=await o(t.fsPath),a.strictEqual(e,null)}),test("write - UTF8 variations - content as snapshot",async()=>{const t=i.file(c(r,"index.html"));let e=await o(t.fsPath);a.strictEqual(e,null);const s=w.add(M((await l(t.fsPath)).toString()+"updates"));await n.write(t,s.createSnapshot(),{encoding:d}),e=await o(t.fsPath),a.strictEqual(e,d),await n.write(t,s.createSnapshot(),{encoding:d}),e=await o(t.fsPath),a.strictEqual(e,d),await n.write(t,s.createSnapshot(),{encoding:v}),e=await o(t.fsPath),a.strictEqual(e,null),await n.write(t,s.createSnapshot(),{encoding:v}),e=await o(t.fsPath),a.strictEqual(e,null)}),test("write - preserve UTF8 BOM - content as string",async()=>{const t=i.file(c(r,"some_utf8_bom.txt"));let e=await o(t.fsPath);a.strictEqual(e,d),await n.write(t,"Hello World",{encoding:e}),e=await o(t.fsPath),a.strictEqual(e,d)}),test("write - ensure BOM in empty file - content as string",async()=>{const t=i.file(c(r,"small.txt"));await n.write(t,"",{encoding:d});const e=await o(t.fsPath);a.strictEqual(e,d)}),test("write - ensure BOM in empty file - content as snapshot",async()=>{const t=i.file(c(r,"small.txt"));await n.write(t,g(""),{encoding:d});const e=await o(t.fsPath);a.strictEqual(e,d)}),test("readStream - small text",async()=>{const t=i.file(c(r,"small.txt"));await L(t)}),test("readStream - large text",async()=>{const t=i.file(c(r,"lorem.txt"));await L(t)});async function L(t){const e=await n.readStream(t);a.strictEqual(e.name,W(t.fsPath)),a.strictEqual(e.size,(await U(t.fsPath)).size);const s=(await l(t.fsPath)).toString(),u=w.add(e.value.create(m.LF).textBuffer);a.strictEqual(p(u.createSnapshot(!1)),p(g(s,!1)))}test("read - small text",async()=>{const t=i.file(c(r,"small.txt"));await O(t)}),test("read - large text",async()=>{const t=i.file(c(r,"lorem.txt"));await O(t)});async function O(t){const e=await n.read(t);a.strictEqual(e.name,W(t.fsPath)),a.strictEqual(e.size,(await U(t.fsPath)).size),a.strictEqual(e.value,(await l(t.fsPath)).toString())}test("readStream - encoding picked up (CP1252)",async()=>{const t=i.file(c(r,"some_small_cp1252.txt")),e="windows1252",s=await n.readStream(t,{encoding:e});a.strictEqual(s.encoding,e),a.strictEqual(s.value.getFirstLineText(999999),'Private = "Pers\xF6nliche\xDF Information"')}),test("read - encoding picked up (CP1252)",async()=>{const t=i.file(c(r,"some_small_cp1252.txt")),e="windows1252",s=await n.read(t,{encoding:e});a.strictEqual(s.encoding,e),a.strictEqual(s.value,'Private = "Pers\xF6nliche\xDF Information"')}),test("read - encoding picked up (binary)",async()=>{const t=i.file(c(r,"some_small_cp1252.txt")),e="binary",s=await n.read(t,{encoding:e});a.strictEqual(s.encoding,e),a.strictEqual(s.value,'Private = "Pers\xF6nliche\xDF Information"')}),test("read - encoding picked up (base64)",async()=>{const t=i.file(c(r,"some_small_cp1252.txt")),e="base64",s=await n.read(t,{encoding:e});a.strictEqual(s.encoding,e),a.strictEqual(s.value,btoa('Private = "Pers\xF6nliche\xDF Information"'))}),test("readStream - user overrides BOM",async()=>{const t=i.file(c(r,"some_utf16le.css")),e=await n.readStream(t,{encoding:"windows1252"});a.strictEqual(e.encoding,"windows1252")}),test("readStream - BOM removed",async()=>{const t=i.file(c(r,"some_utf8_bom.txt")),e=await n.readStream(t);a.strictEqual(e.value.getFirstLineText(999999),"This is some UTF 8 with BOM file.")}),test("readStream - invalid encoding",async()=>{const t=i.file(c(r,"index.html")),e=await n.readStream(t,{encoding:"superduper"});a.strictEqual(e.encoding,"utf8")}),test("readStream - encoding override",async()=>{const t=i.file(c(r,"some.utf16le")),e=await n.readStream(t,{encoding:"windows1252"});a.strictEqual(e.encoding,"utf16le"),a.strictEqual(e.value.getFirstLineText(999999),"This is some UTF 16 with BOM file.")}),test("readStream - large Big5",async()=>{await E("big5","\u4E2D\u6587abc")}),test("readStream - large CP1252",async()=>{await E("cp1252","\xF6\xE4\xFC\xDF")}),test("readStream - large Cyrillic",async()=>{await E("cp866","\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F")}),test("readStream - large GBK",async()=>{await E("gbk","\u4E2D\u56FDabc")}),test("readStream - large ShiftJIS",async()=>{await E("shiftjis","\u4E2D\u6587abc")}),test("readStream - large UTF8 BOM",async()=>{await E("utf8bom","\xF6\xE4\xFC\xDF")}),test("readStream - large UTF16 LE",async()=>{await E("utf16le","\xF6\xE4\xFC\xDF")}),test("readStream - large UTF16 BE",async()=>{await E("utf16be","\xF6\xE4\xFC\xDF")});async function E(t,e){const s=i.file(c(r,`lorem_${t}.txt`)),u=await n.readStream(s,{encoding:t});a.strictEqual(u.encoding,t);const F=w.add(u.value.create(m.LF).textBuffer);let f=p(F.createSnapshot(!1));a.strictEqual(f.indexOf(e),0),a.ok(f.indexOf(e,10)>0);const y=await b.readFile(s.fsPath);let T;y instanceof H?T=y:T=H.wrap(y);const j=await z(await n.getDecodedStream(s,D(T),{encoding:t})),k=w.add(j.create(m.LF).textBuffer);f=p(k.createSnapshot(!1)),a.strictEqual(f.indexOf(e),0),a.ok(f.indexOf(e,10)>0)}test("readStream - UTF16 LE (no BOM)",async()=>{const t=i.file(c(r,"utf16_le_nobom.txt")),e=await n.readStream(t);a.strictEqual(e.encoding,"utf16le")}),test("readStream - UTF16 BE (no BOM)",async()=>{const t=i.file(c(r,"utf16_be_nobom.txt")),e=await n.readStream(t);a.strictEqual(e.encoding,"utf16be")}),test("readStream - autoguessEncoding",async()=>{const t=i.file(c(r,"some_cp1252.txt")),e=await n.readStream(t,{autoGuessEncoding:!0});a.strictEqual(e.encoding,"windows1252")}),test("readStream - autoguessEncoding (candidateGuessEncodings)",async()=>{const t=i.file(c(r,"some.shiftjis.1.txt")),e=await n.readStream(t,{autoGuessEncoding:!0,candidateGuessEncodings:["utf-8","shiftjis","euc-jp"]});a.strictEqual(e.encoding,"shiftjis")}),test("readStream - autoguessEncoding (candidateGuessEncodings is Empty)",async()=>{const t=i.file(c(r,"some_cp1252.txt")),e=await n.readStream(t,{autoGuessEncoding:!0,candidateGuessEncodings:[]});a.strictEqual(e.encoding,"windows1252")}),test("readStream - FILE_IS_BINARY",async()=>{const t=i.file(c(r,"binary.txt"));let e;try{await n.readStream(t,{acceptTextOnly:!0})}catch(u){e=u}a.ok(e),a.strictEqual(e.textFileOperationResult,I.FILE_IS_BINARY);const s=await n.readStream(i.file(c(r,"small.txt")),{acceptTextOnly:!0});a.strictEqual(s.name,"small.txt")}),test("read - FILE_IS_BINARY",async()=>{const t=i.file(c(r,"binary.txt"));let e;try{await n.read(t,{acceptTextOnly:!0})}catch(u){e=u}a.ok(e),a.strictEqual(e.textFileOperationResult,I.FILE_IS_BINARY);const s=await n.read(i.file(c(r,"small.txt")),{acceptTextOnly:!0});a.strictEqual(s.name,"small.txt")})}export{A as default};
