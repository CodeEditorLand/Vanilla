import{NullLogService as S}from"../../../../../platform/log/common/log.js";import{FileService as F}from"../../../../../platform/files/common/fileService.js";import{Schemas as v}from"../../../../../base/common/network.js";import"../../common/textfiles.js";import"../../common/textFileEditorModelManager.js";import{DisposableStore as y}from"../../../../../base/common/lifecycle.js";import{ServiceCollection as g}from"../../../../../platform/instantiation/common/serviceCollection.js";import{IFileService as w}from"../../../../../platform/files/common/files.js";import{URI as n}from"../../../../../base/common/uri.js";import{join as T}from"../../../../../base/common/path.js";import{detectEncodingByBOMFromBuffer as I,toCanonicalName as P}from"../../common/encoding.js";import{VSBuffer as b}from"../../../../../base/common/buffer.js";import m from"../common/fixtures/files.js";import h from"../common/textFileService.io.test.js";import{IWorkingCopyFileService as x,WorkingCopyFileService as B}from"../../../workingCopy/common/workingCopyFileService.js";import{WorkingCopyService as M}from"../../../workingCopy/common/workingCopyService.js";import{UriIdentityService as U}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{TestInMemoryFileSystemProvider as k}from"../../../../test/browser/workbenchTestServices.js";import{TestNativeTextFileServiceWithEncodingOverrides as C,workbenchInstantiationService as N}from"../../../../test/electron-sandbox/workbenchTestServices.js";import{ensureNoDisposablesAreLeakedInTestSuite as E}from"../../../../../base/test/common/utils.js";suite("Files - NativeTextFileService i/o",function(){const e=new y;let s,t;const a="test";h({setup:async()=>{const r=N(void 0,e),i=new S,o=e.add(new F(i));t=e.add(new k),e.add(o.registerProvider(v.file,t));const c=new g;c.set(w,o),c.set(x,e.add(new B(o,e.add(new M),r,e.add(new U(o))))),s=e.add(r.createChild(c).createInstance(C)),e.add(s.files),await t.mkdir(n.file(a));for(const l in m)await t.writeFile(n.file(T(a,l)),m[l],{create:!0,overwrite:!1,unlock:!1,atomic:!1});return{service:s,testDir:a}},teardown:async()=>{e.clear()},exists:d,stat:u,readFile:f,detectEncodingByBOM:p});async function d(r){try{return await t.readFile(n.file(r)),!0}catch{return!1}}async function f(r,i){const o=await t.readFile(n.file(r));return i?new TextDecoder(P(i)).decode(o):b.wrap(o)}async function u(r){return t.stat(n.file(r))}async function p(r){try{const i=await f(r);return I(i.slice(0,3),3)}catch{return null}}E()});
