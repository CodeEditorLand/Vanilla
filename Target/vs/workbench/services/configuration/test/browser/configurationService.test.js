import e from"assert";import*as h from"sinon";import{URI as Re}from"../../../../../base/common/uri.js";import{Registry as ce}from"../../../../../platform/registry/common/platform.js";import{IEnvironmentService as $}from"../../../../../platform/environment/common/environment.js";import{Extensions as ue,ConfigurationScope as m,keyFromOverrideIdentifiers as Fe}from"../../../../../platform/configuration/common/configurationRegistry.js";import{WorkspaceService as O}from"../../browser/configurationService.js";import{ConfigurationEditingErrorCode as fe}from"../../common/configurationEditing.js";import{IFileService as B}from"../../../../../platform/files/common/files.js";import{IWorkspaceContextService as Y,WorkbenchState as Q}from"../../../../../platform/workspace/common/workspace.js";import{ConfigurationTarget as w,IConfigurationService as X}from"../../../../../platform/configuration/common/configuration.js";import{workbenchInstantiationService as Z,RemoteFileSystemProvider as We,TestEnvironmentService as D,TestTextFileService as ie}from"../../../../test/browser/workbenchTestServices.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ITextFileService as re}from"../../../textfile/common/textfiles.js";import{ITextModelService as ae}from"../../../../../editor/common/services/resolverService.js";import{TextModelResolverService as oe}from"../../../textmodelResolver/common/textModelResolverService.js";import{IJSONEditingService as we}from"../../common/jsonEditing.js";import{JSONEditingService as ve}from"../../common/jsonEditingService.js";import{Schemas as C}from"../../../../../base/common/network.js";import{joinPath as f,dirname as Pe,basename as R}from"../../../../../base/common/resources.js";import{isLinux as be,isMacintosh as ee}from"../../../../../base/common/platform.js";import{IRemoteAgentService as te}from"../../../remote/common/remoteAgentService.js";import{FileService as A}from"../../../../../platform/files/common/fileService.js";import{NullLogService as E}from"../../../../../platform/log/common/log.js";import"../../../../../platform/remote/common/remoteAgentEnvironment.js";import{APPLY_ALL_PROFILES_SETTING as j}from"../../common/configuration.js";import{SignService as ke}from"../../../../../platform/sign/browser/signService.js";import{FileUserDataProvider as N}from"../../../../../platform/userData/common/fileUserDataProvider.js";import{IKeybindingEditingService as me,KeybindingsEditingService as Ve}from"../../../keybinding/common/keybindingEditing.js";import{IWorkbenchEnvironmentService as Ie}from"../../../environment/common/environmentService.js";import{timeout as Te}from"../../../../../base/common/async.js";import{VSBuffer as n}from"../../../../../base/common/buffer.js";import{Event as W}from"../../../../../base/common/event.js";import{UriIdentityService as L}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{InMemoryFileSystemProvider as U}from"../../../../../platform/files/common/inMemoryFilesystemProvider.js";import"../../../environment/browser/environmentService.js";import{RemoteAgentService as K}from"../../../remote/browser/remoteAgentService.js";import{RemoteAuthorityResolverService as Ee}from"../../../../../platform/remote/browser/remoteAuthorityResolverService.js";import{hash as qe}from"../../../../../base/common/hash.js";import{TestProductService as x}from"../../../../test/common/workbenchTestServices.js";import{IUserDataProfilesService as y,toUserDataProfile as le,UserDataProfilesService as _}from"../../../../../platform/userDataProfile/common/userDataProfile.js";import{NullPolicyService as G}from"../../../../../platform/policy/common/policy.js";import{FilePolicyService as Ce}from"../../../../../platform/policy/common/filePolicyService.js";import{runWithFakedTimers as c}from"../../../../../base/test/common/timeTravelScheduler.js";import{UserDataProfileService as z}from"../../../userDataProfile/common/userDataProfileService.js";import{IUserDataProfileService as de}from"../../../userDataProfile/common/userDataProfile.js";import{TasksSchemaProperties as ge}from"../../../../contrib/tasks/common/tasks.js";import{RemoteSocketFactoryService as he}from"../../../../../platform/remote/common/remoteSocketFactoryService.js";import{ensureNoDisposablesAreLeakedInTestSuite as J}from"../../../../../base/test/common/utils.js";function I(t){return{id:qe(t.toString()).toString(16),uri:t}}class H{needsCaching(s){return!1}async read(){return""}async write(){}async remove(){}}const S=Re.file("tests").with({scheme:"vscode-tests"});suite("WorkspaceContextService - Folder",()=>{const t="Folder A";let s,r;const o=J();setup(async()=>{const d=new E,u=o.add(new A(d)),l=o.add(new U);o.add(u.registerProvider(S.scheme,l)),s=f(S,t),await u.createFolder(s);const a=D,i=o.add(new L(u)),g=o.add(new _(a,u,i,d));o.add(u.registerProvider(C.vscodeUserData,o.add(new N(S.scheme,l,C.vscodeUserData,g,i,new E))));const p=o.add(new z(g.defaultProfile));r=o.add(new O({configurationCache:new H},a,p,g,u,o.add(new K(new he,p,a,x,o.add(new Ee(!1,void 0,void 0,void 0,x,d)),new ke(x),new E)),i,new E,new G)),await r.initialize(I(s))}),test("getWorkspace()",()=>{const d=r.getWorkspace();e.strictEqual(d.folders.length,1),e.strictEqual(d.folders[0].uri.path,s.path),e.strictEqual(d.folders[0].name,t),e.strictEqual(d.folders[0].index,0),e.ok(!d.configuration)}),test("getWorkbenchState()",()=>{const d=r.getWorkbenchState();e.strictEqual(d,Q.FOLDER)}),test("getWorkspaceFolder()",()=>{const d=r.getWorkspaceFolder(f(s,"a"));e.strictEqual(d,r.getWorkspace().folders[0])}),test("getWorkspaceFolder() - queries in workspace folder",()=>c({useFakeTimers:!0},async()=>{const d=new E,u=o.add(new A(d)),l=o.add(new U);o.add(u.registerProvider(S.scheme,l));const a=f(S,t).with({query:"myquery=1"});await u.createFolder(a);const i=D,g=o.add(new L(u)),p=o.add(new _(i,u,g,d));o.add(u.registerProvider(C.vscodeUserData,o.add(new N(S.scheme,l,C.vscodeUserData,p,g,new E))));const V=o.add(new z(p.defaultProfile)),k=o.add(new O({configurationCache:new H},i,V,p,u,o.add(new K(new he,V,i,x,o.add(new Ee(!1,void 0,void 0,void 0,x,d)),new ke(x),new E)),g,new E,new G));await k.initialize(I(a));const v=k.getWorkspaceFolder(f(a,"a"));e.strictEqual(v,k.getWorkspace().folders[0])})),test("getWorkspaceFolder() - queries in resource",()=>c({useFakeTimers:!0},async()=>{const d=new E,u=o.add(new A(d)),l=o.add(new U);o.add(u.registerProvider(S.scheme,l));const a=f(S,t);await u.createFolder(a);const i=D,g=o.add(new L(u)),p=o.add(new _(i,u,g,d));o.add(u.registerProvider(C.vscodeUserData,o.add(new N(S.scheme,l,C.vscodeUserData,p,g,new E))));const V=o.add(new z(p.defaultProfile)),k=o.add(new O({configurationCache:new H},i,V,p,u,o.add(new K(new he,V,i,x,o.add(new Ee(!1,void 0,void 0,void 0,x,d)),new ke(x),new E)),g,new E,new G));await k.initialize(I(a));const v=k.getWorkspaceFolder(f(a,"a").with({query:"myquery=1"}));e.strictEqual(v,k.getWorkspace().folders[0])})),test("isCurrentWorkspace() => true",()=>{e.ok(r.isCurrentWorkspace(s))}),test("isCurrentWorkspace() => false",()=>{e.ok(!r.isCurrentWorkspace(f(Pe(s),"abc")))}),test("workspace is complete",()=>r.getCompleteWorkspace())}),suite("WorkspaceContextService - Workspace",()=>{let t;const s=J();setup(async()=>{const r=new E,o=s.add(new A(r)),d=s.add(new U);s.add(o.registerProvider(S.scheme,d));const u=f(S,"user"),l=f(S,"a"),a=f(S,"b"),i=f(S,"vsctests.code-workspace"),g={folders:[{path:l.path},{path:a.path}]};await o.createFolder(u),await o.createFolder(l),await o.createFolder(a),await o.writeFile(i,n.fromString(JSON.stringify(g,null,"	")));const p=Z(void 0,s),V=D,k=s.add(s.add(p.createInstance(K)));p.stub(te,k);const v=s.add(new L(o)),q=p.stub(y,s.add(new _(V,o,v,r)));s.add(o.registerProvider(C.vscodeUserData,s.add(new N(S.scheme,d,C.vscodeUserData,q,v,new E)))),t=s.add(new O({configurationCache:new H},V,s.add(new z(q.defaultProfile)),q,o,k,v,new E,new G)),p.stub(Y,t),p.stub(X,t),p.stub($,V),await t.initialize(se(i)),t.acquireInstantiationService(p)}),test("workspace folders",()=>{const r=t.getWorkspace().folders;e.strictEqual(r.length,2),e.strictEqual(R(r[0].uri),"a"),e.strictEqual(R(r[1].uri),"b")}),test("getWorkbenchState()",()=>{const r=t.getWorkbenchState();e.strictEqual(r,Q.WORKSPACE)}),test("workspace is complete",()=>t.getCompleteWorkspace())}),suite("WorkspaceContextService - Workspace Editing",()=>{let t,s;const r=J();setup(async()=>{const o=new E;s=r.add(new A(o));const d=r.add(new U);r.add(s.registerProvider(S.scheme,d));const u=f(S,"user"),l=f(S,"a"),a=f(S,"b"),i=f(S,"vsctests.code-workspace"),g={folders:[{path:l.path},{path:a.path}]};await s.createFolder(u),await s.createFolder(l),await s.createFolder(a),await s.writeFile(i,n.fromString(JSON.stringify(g,null,"	")));const p=Z(void 0,r),V=D,k=r.add(p.createInstance(K));p.stub(te,k);const v=r.add(new L(s)),q=p.stub(y,r.add(new _(V,s,v,o)));r.add(s.registerProvider(C.vscodeUserData,r.add(new N(S.scheme,d,C.vscodeUserData,q,v,new E)))),t=r.add(new O({configurationCache:new H},V,r.add(new z(q.defaultProfile)),q,s,k,v,new E,new G)),p.stub(B,s),p.stub(Y,t),p.stub(X,t),p.stub($,V),await t.initialize(se(i)),p.stub(re,r.add(p.createInstance(ie))),p.stub(ae,r.add(p.createInstance(oe))),p.stub(we,p.createInstance(ve)),t.acquireInstantiationService(p)}),test("add folders",()=>c({useFakeTimers:!0},async()=>{await t.addFolders([{uri:f(S,"d")},{uri:f(S,"c")}]);const o=t.getWorkspace().folders;e.strictEqual(o.length,4),e.strictEqual(R(o[0].uri),"a"),e.strictEqual(R(o[1].uri),"b"),e.strictEqual(R(o[2].uri),"d"),e.strictEqual(R(o[3].uri),"c")})),test("add folders (at specific index)",()=>c({useFakeTimers:!0},async()=>{await t.addFolders([{uri:f(S,"d")},{uri:f(S,"c")}],0);const o=t.getWorkspace().folders;e.strictEqual(o.length,4),e.strictEqual(R(o[0].uri),"d"),e.strictEqual(R(o[1].uri),"c"),e.strictEqual(R(o[2].uri),"a"),e.strictEqual(R(o[3].uri),"b")})),test("add folders (at specific wrong index)",()=>c({useFakeTimers:!0},async()=>{await t.addFolders([{uri:f(S,"d")},{uri:f(S,"c")}],10);const o=t.getWorkspace().folders;e.strictEqual(o.length,4),e.strictEqual(R(o[0].uri),"a"),e.strictEqual(R(o[1].uri),"b"),e.strictEqual(R(o[2].uri),"d"),e.strictEqual(R(o[3].uri),"c")})),test("add folders (with name)",()=>c({useFakeTimers:!0},async()=>{await t.addFolders([{uri:f(S,"d"),name:"DDD"},{uri:f(S,"c"),name:"CCC"}]);const o=t.getWorkspace().folders;e.strictEqual(o.length,4),e.strictEqual(R(o[0].uri),"a"),e.strictEqual(R(o[1].uri),"b"),e.strictEqual(R(o[2].uri),"d"),e.strictEqual(R(o[3].uri),"c"),e.strictEqual(o[2].name,"DDD"),e.strictEqual(o[3].name,"CCC")})),test("add folders triggers change event",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d=[{uri:f(S,"d")},{uri:f(S,"c")}];await t.addFolders(d),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const u=o.args[1][0];e.deepStrictEqual(u.added.map(l=>l.uri.toString()),d.map(l=>l.uri.toString())),e.deepStrictEqual(u.removed,[]),e.deepStrictEqual(u.changed,[])})),test("remove folders",()=>c({useFakeTimers:!0},async()=>{await t.removeFolders([t.getWorkspace().folders[0].uri]);const o=t.getWorkspace().folders;e.strictEqual(o.length,1),e.strictEqual(R(o[0].uri),"b")})),test("remove folders triggers change event",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d=t.getWorkspace().folders[0];await t.removeFolders([d.uri]),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const u=o.args[1][0];e.deepStrictEqual(u.added,[]),e.deepStrictEqual(u.removed.map(l=>l.uri.toString()),[d.uri.toString()]),e.deepStrictEqual(u.changed.map(l=>l.uri.toString()),[t.getWorkspace().folders[0].uri.toString()])})),test("remove folders and add them back by writing into the file",()=>c({useFakeTimers:!0},async()=>{const o=t.getWorkspace().folders;await t.removeFolders([o[0].uri]);const d=new Promise((l,a)=>{r.add(t.onDidChangeWorkspaceFolders(i=>{try{e.deepStrictEqual(i.added.map(g=>g.uri.toString()),[o[0].uri.toString()]),l()}catch(g){a(g)}}))}),u={folders:[{path:o[0].uri.path},{path:o[1].uri.path}]};await s.writeFile(t.getWorkspace().configuration,n.fromString(JSON.stringify(u,null,"	"))),await d})),test("update folders (remove last and add to end)",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d=[{uri:f(S,"d")},{uri:f(S,"c")}],u=[t.getWorkspace().folders[1]].map(a=>a.uri);await t.updateFolders(d,u),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const l=o.args[1][0];e.deepStrictEqual(l.added.map(a=>a.uri.toString()),d.map(a=>a.uri.toString())),e.deepStrictEqual(l.removed.map(a=>a.uri.toString()),u.map(a=>a.toString())),e.deepStrictEqual(l.changed,[])})),test("update folders (rename first via add and remove)",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d=[{uri:f(S,"a"),name:"The Folder"}],u=[t.getWorkspace().folders[0]].map(a=>a.uri);await t.updateFolders(d,u,0),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const l=o.args[1][0];e.deepStrictEqual(l.added,[]),e.deepStrictEqual(l.removed,[]),e.deepStrictEqual(l.changed.map(a=>a.uri.toString()),u.map(a=>a.toString()))})),test("update folders (remove first and add to end)",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d=[{uri:f(S,"d")},{uri:f(S,"c")}],u=[t.getWorkspace().folders[0]].map(i=>i.uri),l=[t.getWorkspace().folders[1]].map(i=>i.uri);await t.updateFolders(d,u),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const a=o.args[1][0];e.deepStrictEqual(a.added.map(i=>i.uri.toString()),d.map(i=>i.uri.toString())),e.deepStrictEqual(a.removed.map(i=>i.uri.toString()),u.map(i=>i.toString())),e.deepStrictEqual(a.changed.map(i=>i.uri.toString()),l.map(i=>i.toString()))})),test("reorder folders trigger change event",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d={folders:[{path:t.getWorkspace().folders[1].uri.path},{path:t.getWorkspace().folders[0].uri.path}]};await s.writeFile(t.getWorkspace().configuration,n.fromString(JSON.stringify(d,null,"	"))),await t.reloadConfiguration(),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const u=o.args[1][0];e.deepStrictEqual(u.added,[]),e.deepStrictEqual(u.removed,[]),e.deepStrictEqual(u.changed.map(l=>l.uri.toString()),t.getWorkspace().folders.map(l=>l.uri.toString()).reverse())})),test("rename folders trigger change event",()=>c({useFakeTimers:!0},async()=>{const o=h.spy();r.add(t.onWillChangeWorkspaceFolders(o)),r.add(t.onDidChangeWorkspaceFolders(o));const d={folders:[{path:t.getWorkspace().folders[0].uri.path,name:"1"},{path:t.getWorkspace().folders[1].uri.path}]};s.writeFile(t.getWorkspace().configuration,n.fromString(JSON.stringify(d,null,"	"))),await t.reloadConfiguration(),e.strictEqual(o.callCount,2,`Should be called only once but called ${o.callCount} times`);const u=o.args[1][0];e.deepStrictEqual(u.added,[]),e.deepStrictEqual(u.removed,[]),e.deepStrictEqual(u.changed.map(l=>l.uri.toString()),[t.getWorkspace().folders[0].uri.toString()])}))}),suite("WorkspaceService - Initialization",()=>{let t,s,r,o,d;const u=ce.as(ue.Configuration),l=J();suiteSetup(()=>{u.registerConfiguration({id:"_test",type:"object",properties:{"initialization.testSetting1":{type:"string",default:"isSet",scope:m.RESOURCE},"initialization.testSetting2":{type:"string",default:"isSet",scope:m.RESOURCE}}})}),setup(async()=>{const a=new E;r=l.add(new A(a));const i=l.add(new U);l.add(r.registerProvider(S.scheme,i));const g=f(S,"user"),p=f(S,"a"),V=f(S,"b");t=f(S,"vsctests.code-workspace");const k={folders:[{path:p.path},{path:V.path}]};await r.createFolder(g),await r.createFolder(p),await r.createFolder(V),await r.writeFile(t,n.fromString(JSON.stringify(k,null,"	")));const v=Z(void 0,l);o=D;const q=l.add(v.createInstance(K));v.stub(te,q);const F=l.add(new L(r)),P=v.stub(y,l.add(new _(o,r,F,a)));l.add(r.registerProvider(C.vscodeUserData,l.add(new N(S.scheme,i,C.vscodeUserData,P,F,new E)))),d=v.stub(de,l.add(new z(P.defaultProfile))),s=l.add(new O({configurationCache:new H},o,d,P,r,q,F,new E,new G)),v.stub(B,r),v.stub(Y,s),v.stub(X,s),v.stub($,o),await s.initialize({id:""}),v.stub(re,l.add(v.createInstance(ie))),v.stub(ae,l.add(v.createInstance(oe))),s.acquireInstantiationService(v)}),(ee?test.skip:test)("initialize a folder workspace from an empty workspace with no configuration changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "initialization.testSetting1": "userValue" }')),await s.reloadConfiguration();const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a));const i=f(S,"a");await s.initialize(I(i)),e.strictEqual(s.getValue("initialization.testSetting1"),"userValue"),e.strictEqual(a.callCount,4),e.deepStrictEqual(a.args[0],[Q.FOLDER]),e.deepStrictEqual(a.args[1],[void 0]),e.deepStrictEqual(a.args[3][0].added.map(g=>g.uri.toString()),[i.toString()]),e.deepStrictEqual(a.args[3][0].removed,[]),e.deepStrictEqual(a.args[3][0].changed,[])})),(ee?test.skip:test)("initialize a folder workspace from an empty workspace with configuration changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "initialization.testSetting1": "userValue" }')),await s.reloadConfiguration();const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a));const i=f(S,"a");await r.writeFile(f(i,".vscode","settings.json"),n.fromString('{ "initialization.testSetting1": "workspaceValue" }')),await s.initialize(I(i)),e.strictEqual(s.getValue("initialization.testSetting1"),"workspaceValue"),e.strictEqual(a.callCount,5),e.deepStrictEqual([...a.args[0][0].affectedKeys],["initialization.testSetting1"]),e.deepStrictEqual(a.args[1],[Q.FOLDER]),e.deepStrictEqual(a.args[2],[void 0]),e.deepStrictEqual(a.args[4][0].added.map(g=>g.uri.toString()),[i.toString()]),e.deepStrictEqual(a.args[4][0].removed,[]),e.deepStrictEqual(a.args[4][0].changed,[])})),(ee?test.skip:test)("initialize a multi root workspace from an empty workspace with no configuration changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "initialization.testSetting1": "userValue" }')),await s.reloadConfiguration();const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a)),await s.initialize(se(t)),e.strictEqual(a.callCount,4),e.deepStrictEqual(a.args[0],[Q.WORKSPACE]),e.deepStrictEqual(a.args[1],[void 0]),e.deepStrictEqual(a.args[3][0].added.map(i=>i.uri.toString()),[f(S,"a").toString(),f(S,"b").toString()]),e.deepStrictEqual(a.args[3][0].removed,[]),e.deepStrictEqual(a.args[3][0].changed,[])})),(ee?test.skip:test)("initialize a multi root workspace from an empty workspace with configuration changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "initialization.testSetting1": "userValue" }')),await s.reloadConfiguration();const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a)),await r.writeFile(f(S,"a",".vscode","settings.json"),n.fromString('{ "initialization.testSetting1": "workspaceValue1" }')),await r.writeFile(f(S,"b",".vscode","settings.json"),n.fromString('{ "initialization.testSetting2": "workspaceValue2" }')),await s.initialize(se(t)),e.strictEqual(a.callCount,5),e.deepStrictEqual([...a.args[0][0].affectedKeys],["initialization.testSetting1","initialization.testSetting2"]),e.deepStrictEqual(a.args[1],[Q.WORKSPACE]),e.deepStrictEqual(a.args[2],[void 0]),e.deepStrictEqual(a.args[4][0].added.map(i=>i.uri.toString()),[f(S,"a").toString(),f(S,"b").toString()]),e.deepStrictEqual(a.args[4][0].removed,[]),e.deepStrictEqual(a.args[4][0].changed,[])})),(ee?test.skip:test)("initialize a folder workspace from a folder workspace with no configuration changes",()=>c({useFakeTimers:!0},async()=>{await s.initialize(I(f(S,"a"))),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "initialization.testSetting1": "userValue" }')),await s.reloadConfiguration();const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a)),await s.initialize(I(f(S,"b"))),e.strictEqual(s.getValue("initialization.testSetting1"),"userValue"),e.strictEqual(a.callCount,2),e.deepStrictEqual(a.args[1][0].added.map(i=>i.uri.toString()),[f(S,"b").toString()]),e.deepStrictEqual(a.args[1][0].removed.map(i=>i.uri.toString()),[f(S,"a").toString()]),e.deepStrictEqual(a.args[1][0].changed,[])})),(ee?test.skip:test)("initialize a folder workspace from a folder workspace with configuration changes",()=>c({useFakeTimers:!0},async()=>{await s.initialize(I(f(S,"a")));const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a)),await r.writeFile(f(S,"b",".vscode","settings.json"),n.fromString('{ "initialization.testSetting1": "workspaceValue2" }')),await s.initialize(I(f(S,"b"))),e.strictEqual(s.getValue("initialization.testSetting1"),"workspaceValue2"),e.strictEqual(a.callCount,3),e.deepStrictEqual([...a.args[0][0].affectedKeys],["initialization.testSetting1"]),e.deepStrictEqual(a.args[2][0].added.map(i=>i.uri.toString()),[f(S,"b").toString()]),e.deepStrictEqual(a.args[2][0].removed.map(i=>i.uri.toString()),[f(S,"a").toString()]),e.deepStrictEqual(a.args[2][0].changed,[])})),(ee?test.skip:test)("initialize a multi folder workspace from a folder workspacce triggers change events in the right order",()=>c({useFakeTimers:!0},async()=>{await s.initialize(I(f(S,"a")));const a=h.spy();l.add(s.onDidChangeWorkbenchState(a)),l.add(s.onDidChangeWorkspaceName(a)),l.add(s.onWillChangeWorkspaceFolders(a)),l.add(s.onDidChangeWorkspaceFolders(a)),l.add(s.onDidChangeConfiguration(a)),await r.writeFile(f(S,"a",".vscode","settings.json"),n.fromString('{ "initialization.testSetting1": "workspaceValue2" }')),await s.initialize(se(t)),e.strictEqual(a.callCount,5),e.deepStrictEqual([...a.args[0][0].affectedKeys],["initialization.testSetting1"]),e.deepStrictEqual(a.args[1],[Q.WORKSPACE]),e.deepStrictEqual(a.args[2],[void 0]),e.deepStrictEqual(a.args[4][0].added.map(i=>i.uri.toString()),[f(S,"b").toString()]),e.deepStrictEqual(a.args[4][0].removed,[]),e.deepStrictEqual(a.args[4][0].changed,[])}))}),suite("WorkspaceConfigurationService - Folder",()=>{let t,s,r,o,d,u;const l=ce.as(ue.Configuration),a=J();suiteSetup(()=>{l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.applicationSetting":{type:"string",default:"isSet",scope:m.APPLICATION},"configurationService.folder.machineSetting":{type:"string",default:"isSet",scope:m.MACHINE},"configurationService.folder.machineOverridableSetting":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE},"configurationService.folder.testSetting":{type:"string",default:"isSet",scope:m.RESOURCE},"configurationService.folder.languageSetting":{type:"string",default:"isSet",scope:m.LANGUAGE_OVERRIDABLE},"configurationService.folder.restrictedSetting":{type:"string",default:"isSet",restricted:!0},"configurationService.folder.policySetting":{type:"string",default:"isSet",policy:{name:"configurationService.folder.policySetting",minimumVersion:"1.0.0"}}}}),l.registerDefaultConfigurations([{overrides:{"[jsonc]":{"configurationService.folder.languageSetting":"languageValue"}}}])}),setup(async()=>{const i=new E;r=a.add(new A(i));const g=a.add(new U);a.add(r.registerProvider(S.scheme,g));const p=f(S,"a");await r.createFolder(p),u=Z(void 0,a),o=D,o.policyFile=f(p,"policies.json");const V=a.add(u.createInstance(K));u.stub(te,V);const k=a.add(new L(r)),v=u.stub(y,a.add(new _(o,r,k,i)));a.add(r.registerProvider(C.vscodeUserData,a.add(new N(S.scheme,g,C.vscodeUserData,v,k,new E)))),d=u.stub(de,a.add(new z(v.defaultProfile))),s=t=a.add(new O({configurationCache:new H},o,d,v,r,V,k,new E,a.add(new Ce(o.policyFile,r,i)))),u.stub(B,r),u.stub(Y,t),u.stub(X,t),u.stub($,o),await s.initialize(I(p)),u.stub(me,a.add(u.createInstance(Ve))),u.stub(re,a.add(u.createInstance(ie))),u.stub(ae,a.add(u.createInstance(oe))),s.acquireInstantiationService(u)}),test("defaults",()=>{e.deepStrictEqual(t.getValue("configurationService"),{folder:{applicationSetting:"isSet",machineSetting:"isSet",machineOverridableSetting:"isSet",testSetting:"isSet",languageSetting:"isSet",restrictedSetting:"isSet",policySetting:"isSet"}})}),test("globals override defaults",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.testSetting": "userValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.testSetting"),"userValue")})),test("globals",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "testworkbench.editor.tabs": true }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("testworkbench.editor.tabs"),!0)})),test("workspace settings",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "testworkbench.editor.icons": true }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("testworkbench.editor.icons"),!0)})),test("workspace settings override user settings",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.testSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.testSetting"),"workspaceValue")})),test("machine overridable settings override user Settings",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineOverridableSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.machineOverridableSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineOverridableSetting"),"workspaceValue")})),test("workspace settings override user settings after defaults are registered ",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.newSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.newSetting": "workspaceValue" }')),await t.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.newSetting":{type:"string",default:"isSet"}}}),e.strictEqual(t.getValue("configurationService.folder.newSetting"),"workspaceValue")})),test("machine overridable settings override user settings after defaults are registered ",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.newMachineOverridableSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.newMachineOverridableSetting": "workspaceValue" }')),await t.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.newMachineOverridableSetting":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE}}}),e.strictEqual(t.getValue("configurationService.folder.newMachineOverridableSetting"),"workspaceValue")})),test("application settings are not read from workspace",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.applicationSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.applicationSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.applicationSetting"),"userValue")})),test("application settings are not read from workspace when workspace folder uri is passed",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.applicationSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.applicationSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.applicationSetting",{resource:s.getWorkspace().folders[0].uri}),"userValue")})),test("machine settings are not read from workspace",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.machineSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineSetting",{resource:s.getWorkspace().folders[0].uri}),"userValue")})),test("machine settings are not read from workspace when workspace folder uri is passed",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.machineSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineSetting",{resource:s.getWorkspace().folders[0].uri}),"userValue")})),test("get application scope settings are not loaded after defaults are registered",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.applicationSetting-2": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.applicationSetting-2": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.applicationSetting-2"),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.applicationSetting-2":{type:"string",default:"isSet",scope:m.APPLICATION}}}),e.strictEqual(t.getValue("configurationService.folder.applicationSetting-2"),"userValue"),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.applicationSetting-2"),"userValue")})),test("get application scope settings are not loaded after defaults are registered when workspace folder uri is passed",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.applicationSetting-3": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.applicationSetting-3": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.applicationSetting-3",{resource:s.getWorkspace().folders[0].uri}),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.applicationSetting-3":{type:"string",default:"isSet",scope:m.APPLICATION}}}),e.strictEqual(t.getValue("configurationService.folder.applicationSetting-3",{resource:s.getWorkspace().folders[0].uri}),"userValue"),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.applicationSetting-3",{resource:s.getWorkspace().folders[0].uri}),"userValue")})),test("get machine scope settings are not loaded after defaults are registered",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineSetting-2": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.machineSetting-2": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineSetting-2"),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.machineSetting-2":{type:"string",default:"isSet",scope:m.MACHINE}}}),e.strictEqual(t.getValue("configurationService.folder.machineSetting-2"),"userValue"),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineSetting-2"),"userValue")})),test("get machine scope settings are not loaded after defaults are registered when workspace folder uri is passed",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineSetting-3": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.machineSetting-3": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineSetting-3",{resource:s.getWorkspace().folders[0].uri}),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.folder.machineSetting-3":{type:"string",default:"isSet",scope:m.MACHINE}}}),e.strictEqual(t.getValue("configurationService.folder.machineSetting-3",{resource:s.getWorkspace().folders[0].uri}),"userValue"),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.machineSetting-3",{resource:s.getWorkspace().folders[0].uri}),"userValue")})),test("policy value override all",()=>c({useFakeTimers:!0},async()=>{const i=await c({useFakeTimers:!0},async()=>{const g=W.toPromise(t.onDidChangeConfiguration);return await r.writeFile(o.policyFile,n.fromString('{ "configurationService.folder.policySetting": "policyValue" }')),g});e.deepStrictEqual([...i.affectedKeys],["configurationService.folder.policySetting"]),e.strictEqual(t.getValue("configurationService.folder.policySetting"),"policyValue"),e.strictEqual(t.inspect("configurationService.folder.policySetting").policyValue,"policyValue")})),test("policy settings when policy value is not set",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.policySetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.policySetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.policySetting"),"workspaceValue"),e.strictEqual(t.inspect("configurationService.folder.policySetting").policyValue,void 0)})),test("reload configuration emits events after global configuraiton changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "testworkbench.editor.tabs": true }'));const i=h.spy();a.add(t.onDidChangeConfiguration(i)),await t.reloadConfiguration(),e.ok(i.called)})),test("reload configuration emits events after workspace configuraiton changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }'));const i=h.spy();a.add(t.onDidChangeConfiguration(i)),await t.reloadConfiguration(),e.ok(i.called)})),test("reload configuration should not emit event if no changes",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "testworkbench.editor.tabs": true }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }')),await t.reloadConfiguration();const i=h.spy();a.add(t.onDidChangeConfiguration(()=>{i()})),await t.reloadConfiguration(),e.ok(!i.called)})),test("inspect",()=>c({useFakeTimers:!0},async()=>{let i=t.inspect("something.missing");e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,void 0),i=t.inspect("configurationService.folder.testSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"isSet"),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.testSetting": "userValue" }')),await t.reloadConfiguration(),i=t.inspect("configurationService.folder.testSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,"userValue"),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"userValue"),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }')),await t.reloadConfiguration(),i=t.inspect("configurationService.folder.testSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,"userValue"),e.strictEqual(i.workspaceValue,"workspaceValue"),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"workspaceValue"),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","tasks.json"),n.fromString('{ "configurationService.tasks.testSetting": "tasksValue" }')),await t.reloadConfiguration(),i=t.inspect("tasks"),e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.application,void 0),e.deepStrictEqual(i.userValue,{}),e.deepStrictEqual(i.workspaceValue,{configurationService:{tasks:{testSetting:"tasksValue"}}}),e.strictEqual(i.workspaceFolderValue,void 0),e.deepStrictEqual(i.value,{configurationService:{tasks:{testSetting:"tasksValue"}}})})),test("inspect restricted settings",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!1),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userRestrictedValue" }')),await t.reloadConfiguration();let i=t.inspect("configurationService.folder.restrictedSetting");e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,"userRestrictedValue"),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"userRestrictedValue"),t.updateWorkspaceTrust(!0),await t.reloadConfiguration(),i=t.inspect("configurationService.folder.restrictedSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,"userRestrictedValue"),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"userRestrictedValue"),t.updateWorkspaceTrust(!1),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceRestrictedValue" }')),await t.reloadConfiguration(),i=t.inspect("configurationService.folder.restrictedSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,"userRestrictedValue"),e.strictEqual(i.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"userRestrictedValue"),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","tasks.json"),n.fromString('{ "configurationService.tasks.testSetting": "tasksValue" }')),await t.reloadConfiguration(),i=t.inspect("tasks"),e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.application,void 0),e.deepStrictEqual(i.userValue,{}),e.deepStrictEqual(i.workspaceValue,{configurationService:{tasks:{testSetting:"tasksValue"}}}),e.strictEqual(i.workspaceFolderValue,void 0),e.deepStrictEqual(i.value,{configurationService:{tasks:{testSetting:"tasksValue"}}}),t.updateWorkspaceTrust(!0),await t.reloadConfiguration(),i=t.inspect("configurationService.folder.restrictedSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,"userRestrictedValue"),e.strictEqual(i.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"workspaceRestrictedValue"),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","tasks.json"),n.fromString('{ "configurationService.tasks.testSetting": "tasksValue" }')),await t.reloadConfiguration(),i=t.inspect("tasks"),e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.application,void 0),e.deepStrictEqual(i.userValue,{}),e.deepStrictEqual(i.workspaceValue,{configurationService:{tasks:{testSetting:"tasksValue"}}}),e.strictEqual(i.workspaceFolderValue,void 0),e.deepStrictEqual(i.value,{configurationService:{tasks:{testSetting:"tasksValue"}}})})),test("inspect restricted settings after change",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!1),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userRestrictedValue" }')),await t.reloadConfiguration();const i=W.toPromise(t.onDidChangeConfiguration);await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceRestrictedValue" }'));const g=await i,p=t.inspect("configurationService.folder.restrictedSetting");e.strictEqual(p.defaultValue,"isSet"),e.strictEqual(p.application,void 0),e.strictEqual(p.userValue,"userRestrictedValue"),e.strictEqual(p.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(p.workspaceFolderValue,void 0),e.strictEqual(p.value,"userRestrictedValue"),e.strictEqual(g.affectsConfiguration("configurationService.folder.restrictedSetting"),!0)})),test("keys",()=>c({useFakeTimers:!0},async()=>{let i=t.keys();e.ok(i.default.indexOf("configurationService.folder.testSetting")!==-1),e.deepStrictEqual(i.user,[]),e.deepStrictEqual(i.workspace,[]),e.deepStrictEqual(i.workspaceFolder,[]),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.testSetting": "userValue" }')),await t.reloadConfiguration(),i=t.keys(),e.ok(i.default.indexOf("configurationService.folder.testSetting")!==-1),e.deepStrictEqual(i.user,["configurationService.folder.testSetting"]),e.deepStrictEqual(i.workspace,[]),e.deepStrictEqual(i.workspaceFolder,[]),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }')),await t.reloadConfiguration(),i=t.keys(),e.ok(i.default.indexOf("configurationService.folder.testSetting")!==-1),e.deepStrictEqual(i.user,["configurationService.folder.testSetting"]),e.deepStrictEqual(i.workspace,["configurationService.folder.testSetting"]),e.deepStrictEqual(i.workspaceFolder,[])})),test("update user configuration",()=>t.updateValue("configurationService.folder.testSetting","value",w.USER).then(()=>e.strictEqual(t.getValue("configurationService.folder.testSetting"),"value"))),test("update workspace configuration",()=>t.updateValue("tasks.service.testSetting","value",w.WORKSPACE).then(()=>e.strictEqual(t.getValue(ge.ServiceTestSetting),"value"))),test("update resource configuration",()=>t.updateValue("configurationService.folder.testSetting","value",{resource:s.getWorkspace().folders[0].uri},w.WORKSPACE_FOLDER).then(()=>e.strictEqual(t.getValue("configurationService.folder.testSetting"),"value"))),test("update language configuration using configuration overrides",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.folder.languageSetting","abcLangValue",{overrideIdentifier:"abclang"}),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{overrideIdentifier:"abclang"}),"abcLangValue")})),test("update language configuration using configuration update overrides",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.folder.languageSetting","abcLangValue",{overrideIdentifiers:["abclang"]}),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{overrideIdentifier:"abclang"}),"abcLangValue")})),test("update language configuration for multiple languages",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.folder.languageSetting","multiLangValue",{overrideIdentifiers:["xyzlang","deflang"]},w.USER),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{overrideIdentifier:"deflang"}),"multiLangValue"),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{overrideIdentifier:"xyzlang"}),"multiLangValue"),e.deepStrictEqual(t.getValue(Fe(["deflang","xyzlang"])),{"configurationService.folder.languageSetting":"multiLangValue"})})),test("update language configuration for multiple languages when already set",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "[deflang][xyzlang]": { "configurationService.folder.languageSetting": "userValue" }}')),await t.updateValue("configurationService.folder.languageSetting","multiLangValue",{overrideIdentifiers:["xyzlang","deflang"]},w.USER),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{overrideIdentifier:"deflang"}),"multiLangValue"),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{overrideIdentifier:"xyzlang"}),"multiLangValue"),e.deepStrictEqual(t.getValue(Fe(["deflang","xyzlang"])),{"configurationService.folder.languageSetting":"multiLangValue"});const i=(await r.readFile(d.currentProfile.settingsResource)).value.toString();e.deepStrictEqual(JSON.parse(i),{"[deflang][xyzlang]":{"configurationService.folder.languageSetting":"multiLangValue"}})})),test("update resource language configuration",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.folder.languageSetting","value",{resource:s.getWorkspace().folders[0].uri},w.WORKSPACE_FOLDER),e.strictEqual(t.getValue("configurationService.folder.languageSetting"),"value")})),test("update resource language configuration for a language using configuration overrides",()=>c({useFakeTimers:!0},async()=>{e.strictEqual(t.getValue("configurationService.folder.languageSetting",{resource:s.getWorkspace().folders[0].uri,overrideIdentifier:"jsonc"}),"languageValue"),await t.updateValue("configurationService.folder.languageSetting","languageValueUpdated",{resource:s.getWorkspace().folders[0].uri,overrideIdentifier:"jsonc"},w.WORKSPACE_FOLDER),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{resource:s.getWorkspace().folders[0].uri,overrideIdentifier:"jsonc"}),"languageValueUpdated")})),test("update resource language configuration for a language using configuration update overrides",()=>c({useFakeTimers:!0},async()=>{e.strictEqual(t.getValue("configurationService.folder.languageSetting",{resource:s.getWorkspace().folders[0].uri,overrideIdentifier:"jsonc"}),"languageValue"),await t.updateValue("configurationService.folder.languageSetting","languageValueUpdated",{resource:s.getWorkspace().folders[0].uri,overrideIdentifiers:["jsonc"]},w.WORKSPACE_FOLDER),e.strictEqual(t.getValue("configurationService.folder.languageSetting",{resource:s.getWorkspace().folders[0].uri,overrideIdentifier:"jsonc"}),"languageValueUpdated")})),test("update application setting into workspace configuration in a workspace is not supported",()=>t.updateValue("configurationService.folder.applicationSetting","workspaceValue",{},w.WORKSPACE,{donotNotifyError:!0}).then(()=>e.fail("Should not be supported"),i=>e.strictEqual(i.code,fe.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION))),test("update machine setting into workspace configuration in a workspace is not supported",()=>t.updateValue("configurationService.folder.machineSetting","workspaceValue",{},w.WORKSPACE,{donotNotifyError:!0}).then(()=>e.fail("Should not be supported"),i=>e.strictEqual(i.code,fe.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE))),test("update tasks configuration",()=>t.updateValue("tasks",{version:"1.0.0",tasks:[{taskName:"myTask"}]},w.WORKSPACE).then(()=>e.deepStrictEqual(t.getValue(ge.Tasks),{version:"1.0.0",tasks:[{taskName:"myTask"}]}))),test("update user configuration should trigger change event before promise is resolve",()=>{const i=h.spy();return a.add(t.onDidChangeConfiguration(i)),t.updateValue("configurationService.folder.testSetting","value",w.USER).then(()=>e.ok(i.called))}),test("update workspace configuration should trigger change event before promise is resolve",()=>{const i=h.spy();return a.add(t.onDidChangeConfiguration(i)),t.updateValue("configurationService.folder.testSetting","value",w.WORKSPACE).then(()=>e.ok(i.called))}),test("update memory configuration",()=>t.updateValue("configurationService.folder.testSetting","memoryValue",w.MEMORY).then(()=>e.strictEqual(t.getValue("configurationService.folder.testSetting"),"memoryValue"))),test("update memory configuration should trigger change event before promise is resolve",()=>{const i=h.spy();return a.add(t.onDidChangeConfiguration(i)),t.updateValue("configurationService.folder.testSetting","memoryValue",w.MEMORY).then(()=>e.ok(i.called))}),test("remove setting from all targets",()=>c({useFakeTimers:!0},async()=>{const i="configurationService.folder.testSetting";await t.updateValue(i,"workspaceValue",w.WORKSPACE),await t.updateValue(i,"userValue",w.USER),await t.updateValue(i,void 0),await t.reloadConfiguration();const g=t.inspect(i,{resource:s.getWorkspace().folders[0].uri});e.strictEqual(g.userValue,void 0),e.strictEqual(g.workspaceValue,void 0),e.strictEqual(g.workspaceFolderValue,void 0)})),test("update user configuration to default value when target is not passed",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.folder.testSetting","value",w.USER),await t.updateValue("configurationService.folder.testSetting","isSet"),e.strictEqual(t.inspect("configurationService.folder.testSetting").userValue,void 0)})),test("update user configuration to default value when target is passed",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.folder.testSetting","value",w.USER),await t.updateValue("configurationService.folder.testSetting","isSet",w.USER),e.strictEqual(t.inspect("configurationService.folder.testSetting").userValue,"isSet")})),test("update task configuration should trigger change event before promise is resolve",()=>{const i=h.spy();return a.add(t.onDidChangeConfiguration(i)),t.updateValue("tasks",{version:"1.0.0",tasks:[{taskName:"myTask"}]},w.WORKSPACE).then(()=>e.ok(i.called))}),test("no change event when there are no global tasks",()=>c({useFakeTimers:!0},async()=>{const i=h.spy();a.add(t.onDidChangeConfiguration(i)),await Te(5),e.ok(i.notCalled)})),test("change event when there are global tasks",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(f(o.userRoamingDataHome,"tasks.json"),n.fromString('{ "version": "1.0.0", "tasks": [{ "taskName": "myTask" }'));const i=W.toPromise(t.onDidChangeConfiguration);await t.reloadLocalUserConfiguration(),await i})),test("creating workspace settings",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.testSetting": "userValue" }')),await t.reloadConfiguration(),await new Promise((i,g)=>{const p=t.onDidChangeConfiguration(V=>{e.ok(V.affectsConfiguration("configurationService.folder.testSetting")),e.strictEqual(t.getValue("configurationService.folder.testSetting"),"workspaceValue"),p.dispose(),i()});r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }')).catch(g)})})),test("deleting workspace settings",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.testSetting": "userValue" }'));const i=f(s.getWorkspace().folders[0].uri,".vscode","settings.json");await r.writeFile(i,n.fromString('{ "configurationService.folder.testSetting": "workspaceValue" }')),await t.reloadConfiguration();const g=await new Promise((p,V)=>{W.once(t.onDidChangeConfiguration)(p),r.del(i).catch(V)});e.ok(g.affectsConfiguration("configurationService.folder.testSetting")),e.strictEqual(t.getValue("configurationService.folder.testSetting"),"userValue")})),test("restricted setting is read from workspace when workspace is trusted",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!0),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.restrictedSetting",{resource:s.getWorkspace().folders[0].uri}),"workspaceValue"),e.ok(t.restrictedSettings.default.includes("configurationService.folder.restrictedSetting")),e.strictEqual(t.restrictedSettings.userLocal,void 0),e.strictEqual(t.restrictedSettings.userRemote,void 0),e.deepStrictEqual(t.restrictedSettings.workspace,["configurationService.folder.restrictedSetting"]),e.strictEqual(t.restrictedSettings.workspaceFolder?.size,1),e.deepStrictEqual(t.restrictedSettings.workspaceFolder?.get(s.getWorkspace().folders[0].uri),["configurationService.folder.restrictedSetting"])})),test("restricted setting is not read from workspace when workspace is changed to trusted",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!0),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),await t.reloadConfiguration(),t.updateWorkspaceTrust(!1),e.strictEqual(t.getValue("configurationService.folder.restrictedSetting",{resource:s.getWorkspace().folders[0].uri}),"userValue"),e.ok(t.restrictedSettings.default.includes("configurationService.folder.restrictedSetting")),e.strictEqual(t.restrictedSettings.userLocal,void 0),e.strictEqual(t.restrictedSettings.userRemote,void 0),e.deepStrictEqual(t.restrictedSettings.workspace,["configurationService.folder.restrictedSetting"]),e.strictEqual(t.restrictedSettings.workspaceFolder?.size,1),e.deepStrictEqual(t.restrictedSettings.workspaceFolder?.get(s.getWorkspace().folders[0].uri),["configurationService.folder.restrictedSetting"])})),test("change event is triggered when workspace is changed to untrusted",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!0),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),await t.reloadConfiguration();const i=W.toPromise(t.onDidChangeConfiguration);t.updateWorkspaceTrust(!1);const g=await i;e.ok(g.affectedKeys.has("configurationService.folder.restrictedSetting")),e.ok(g.affectsConfiguration("configurationService.folder.restrictedSetting"))})),test("restricted setting is not read from workspace when workspace is not trusted",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!1),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.folder.restrictedSetting",{resource:s.getWorkspace().folders[0].uri}),"userValue"),e.ok(t.restrictedSettings.default.includes("configurationService.folder.restrictedSetting")),e.strictEqual(t.restrictedSettings.userLocal,void 0),e.strictEqual(t.restrictedSettings.userRemote,void 0),e.deepStrictEqual(t.restrictedSettings.workspace,["configurationService.folder.restrictedSetting"]),e.strictEqual(t.restrictedSettings.workspaceFolder?.size,1),e.deepStrictEqual(t.restrictedSettings.workspaceFolder?.get(s.getWorkspace().folders[0].uri),["configurationService.folder.restrictedSetting"])})),test("restricted setting is read when workspace is changed to trusted",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!1),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),await t.reloadConfiguration(),t.updateWorkspaceTrust(!0),e.strictEqual(t.getValue("configurationService.folder.restrictedSetting",{resource:s.getWorkspace().folders[0].uri}),"workspaceValue"),e.ok(t.restrictedSettings.default.includes("configurationService.folder.restrictedSetting")),e.strictEqual(t.restrictedSettings.userLocal,void 0),e.strictEqual(t.restrictedSettings.userRemote,void 0),e.deepStrictEqual(t.restrictedSettings.workspace,["configurationService.folder.restrictedSetting"]),e.strictEqual(t.restrictedSettings.workspaceFolder?.size,1),e.deepStrictEqual(t.restrictedSettings.workspaceFolder?.get(s.getWorkspace().folders[0].uri),["configurationService.folder.restrictedSetting"])})),test("change event is triggered when workspace is changed to trusted",()=>c({useFakeTimers:!0},async()=>{t.updateWorkspaceTrust(!1),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),await t.reloadConfiguration();const i=W.toPromise(t.onDidChangeConfiguration);t.updateWorkspaceTrust(!0);const g=await i;e.ok(g.affectedKeys.has("configurationService.folder.restrictedSetting")),e.ok(g.affectsConfiguration("configurationService.folder.restrictedSetting"))})),test("adding an restricted setting triggers change event",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.restrictedSetting": "userValue" }')),t.updateWorkspaceTrust(!1);const i=W.toPromise(t.onDidChangeRestrictedSettings);return await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.restrictedSetting": "workspaceValue" }')),i})),test("remove an unregistered setting",()=>c({useFakeTimers:!0},async()=>{const i="configurationService.folder.unknownSetting";await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.unknownSetting": "userValue" }')),await r.writeFile(f(s.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.folder.unknownSetting": "workspaceValue" }')),await t.reloadConfiguration(),await t.updateValue(i,void 0);const g=t.inspect(i,{resource:s.getWorkspace().folders[0].uri});e.strictEqual(g.userValue,void 0),e.strictEqual(g.workspaceValue,void 0),e.strictEqual(g.workspaceFolderValue,void 0)}))}),suite("WorkspaceConfigurationService - Profiles",()=>{let t,s,r,o,d,u;const l=ce.as(ue.Configuration),a=J();suiteSetup(()=>{l.registerConfiguration({id:"_test",type:"object",properties:{[j]:{type:"array",default:[],scope:m.APPLICATION},"configurationService.profiles.applicationSetting":{type:"string",default:"isSet",scope:m.APPLICATION},"configurationService.profiles.testSetting":{type:"string",default:"isSet"},"configurationService.profiles.applicationSetting2":{type:"string",default:"isSet",scope:m.APPLICATION},"configurationService.profiles.testSetting2":{type:"string",default:"isSet"}}})}),setup(async()=>{const i=new E;r=a.add(new A(i));const g=a.add(new U);a.add(r.registerProvider(S.scheme,g));const p=f(S,"a");await r.createFolder(p),u=Z(void 0,a),o=D,o.policyFile=f(p,"policies.json");const V=a.add(u.createInstance(K));u.stub(te,V);const k=a.add(new L(r)),v=u.stub(y,a.add(new _(o,r,k,i)));a.add(r.registerProvider(C.vscodeUserData,a.add(new N(S.scheme,g,C.vscodeUserData,v,k,new E)))),d=u.stub(de,a.add(new z(le("custom","custom",f(o.userRoamingDataHome,"profiles","temp"),f(o.cacheHome,"profilesCache"))))),s=t=a.add(new O({configurationCache:new H},o,d,v,r,V,k,new E,a.add(new Ce(o.policyFile,r,i)))),u.stub(B,r),u.stub(Y,t),u.stub(X,t),u.stub($,o),await r.writeFile(v.defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting2": "applicationValue", "configurationService.profiles.testSetting2": "userValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting2": "profileValue", "configurationService.profiles.testSetting2": "profileValue" }')),await s.initialize(I(p)),u.stub(me,a.add(u.createInstance(Ve))),u.stub(re,a.add(u.createInstance(ie))),u.stub(ae,a.add(u.createInstance(oe))),s.acquireInstantiationService(u)}),test("initialize",()=>c({useFakeTimers:!0},async()=>{e.strictEqual(t.getValue("configurationService.profiles.applicationSetting2"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"profileValue")})),test("inspect",()=>c({useFakeTimers:!0},async()=>{let i=t.inspect("something.missing");e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,void 0),i=t.inspect("configurationService.profiles.applicationSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"isSet"),await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "applicationValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "profileValue" }')),await t.reloadConfiguration(),i=t.inspect("configurationService.profiles.applicationSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.applicationValue,"applicationValue"),e.strictEqual(i.userValue,"profileValue"),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"applicationValue"),await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.testSetting": "applicationValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.testSetting": "profileValue" }')),await t.reloadConfiguration(),i=t.inspect("configurationService.profiles.testSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.applicationValue,void 0),e.strictEqual(i.userValue,"profileValue"),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"profileValue")})),test("update application scope setting",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.profiles.applicationSetting","applicationValue"),e.deepStrictEqual(JSON.parse((await r.readFile(u.get(y).defaultProfile.settingsResource)).value.toString()),{"configurationService.profiles.applicationSetting":"applicationValue","configurationService.profiles.applicationSetting2":"applicationValue","configurationService.profiles.testSetting2":"userValue"}),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting"),"applicationValue")})),test("update normal setting",()=>c({useFakeTimers:!0},async()=>{await t.updateValue("configurationService.profiles.testSetting","profileValue"),e.deepStrictEqual(JSON.parse((await r.readFile(d.currentProfile.settingsResource)).value.toString()),{"configurationService.profiles.testSetting":"profileValue","configurationService.profiles.testSetting2":"profileValue","configurationService.profiles.applicationSetting2":"profileValue"}),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"profileValue")})),test("registering normal setting after init",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.testSetting3": "defaultProfile" }')),await t.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.profiles.testSetting3":{type:"string",default:"isSet"}}}),e.strictEqual(t.getValue("configurationService.profiles.testSetting3"),"isSet")})),test("registering application scope setting after init",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting3": "defaultProfile" }')),await t.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.profiles.applicationSetting3":{type:"string",default:"isSet",scope:m.APPLICATION}}}),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting3"),"defaultProfile")})),test("initialize with custom all profiles settings",()=>c({useFakeTimers:!0},async()=>{await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL),await t.initialize(I(f(S,"a"))),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting2"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"userValue")})),test("update all profiles settings",()=>c({useFakeTimers:!0},async()=>{const i=W.toPromise(t.onDidChangeConfiguration);await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL);const g=await i;e.deepStrictEqual([...g.affectedKeys],[j,"configurationService.profiles.testSetting2"]),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"userValue")})),test("setting applied to all profiles is registered later",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.testSetting4": "userValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.testSetting4": "profileValue" }')),await t.updateValue(j,["configurationService.profiles.testSetting4"],w.USER_LOCAL),e.strictEqual(t.getValue("configurationService.profiles.testSetting4"),"userValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.profiles.testSetting4":{type:"string",default:"isSet"}}}),await t.reloadConfiguration(),e.strictEqual(t.getValue("configurationService.profiles.testSetting4"),"userValue")})),test("update setting that is applied to all profiles",()=>c({useFakeTimers:!0},async()=>{await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL);const i=W.toPromise(t.onDidChangeConfiguration);await t.updateValue("configurationService.profiles.testSetting2","updatedValue",w.USER_LOCAL);const g=await i;e.deepStrictEqual([...g.affectedKeys],["configurationService.profiles.testSetting2"]),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"updatedValue")})),test("test isSettingAppliedToAllProfiles",()=>c({useFakeTimers:!0},async()=>{e.strictEqual(t.isSettingAppliedForAllProfiles("configurationService.profiles.applicationSetting2"),!0),e.strictEqual(t.isSettingAppliedForAllProfiles("configurationService.profiles.testSetting2"),!1),await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL),e.strictEqual(t.isSettingAppliedForAllProfiles("configurationService.profiles.testSetting2"),!0)})),test("switch to default profile",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "applicationValue", "configurationService.profiles.testSetting": "userValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "profileValue", "configurationService.profiles.testSetting": "profileValue" }')),await t.reloadConfiguration();const i=W.toPromise(t.onDidChangeConfiguration);await d.updateCurrentProfile(u.get(y).defaultProfile);const g=await i;e.deepStrictEqual([...g.affectedKeys],["configurationService.profiles.testSetting"]),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"userValue")})),test("switch to non default profile",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "applicationValue", "configurationService.profiles.testSetting": "userValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "profileValue", "configurationService.profiles.testSetting": "profileValue" }')),await t.reloadConfiguration();const i=le("custom2","custom2",f(o.userRoamingDataHome,"profiles","custom2"),f(o.cacheHome,"profilesCache"));await r.writeFile(i.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "profileValue2", "configurationService.profiles.testSetting": "profileValue2" }'));const g=W.toPromise(t.onDidChangeConfiguration);await d.updateCurrentProfile(i);const p=await g;e.deepStrictEqual([...p.affectedKeys],["configurationService.profiles.testSetting"]),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"profileValue2")})),test("switch to non default profile using settings from default profile",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "applicationValue", "configurationService.profiles.testSetting": "userValue" }')),await r.writeFile(d.currentProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "profileValue", "configurationService.profiles.testSetting": "profileValue" }')),await t.reloadConfiguration();const i=le("custom3","custom3",f(o.userRoamingDataHome,"profiles","custom2"),f(o.cacheHome,"profilesCache"),{useDefaultFlags:{settings:!0}},u.get(y).defaultProfile);await r.writeFile(i.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "applicationValue2", "configurationService.profiles.testSetting": "profileValue2" }'));const g=W.toPromise(t.onDidChangeConfiguration);await d.updateCurrentProfile(i);const p=await g;e.deepStrictEqual([...p.affectedKeys],["configurationService.profiles.applicationSetting","configurationService.profiles.testSetting"]),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting"),"applicationValue2"),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"profileValue2")})),test("In non-default profile, changing application settings shall include only application scope settings in the change event",()=>c({useFakeTimers:!0},async()=>{await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString("{}")),await t.reloadConfiguration();const i=W.toPromise(t.onDidChangeConfiguration);await r.writeFile(u.get(y).defaultProfile.settingsResource,n.fromString('{ "configurationService.profiles.applicationSetting": "applicationValue", "configurationService.profiles.testSetting": "applicationValue" }'));const g=await i;e.deepStrictEqual([...g.affectedKeys],["configurationService.profiles.applicationSetting"]),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"isSet")})),test("switch to default profile with settings applied to all profiles",()=>c({useFakeTimers:!0},async()=>{await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL),await d.updateCurrentProfile(u.get(y).defaultProfile),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting2"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"userValue")})),test("switch to non default profile with settings applied to all profiles",()=>c({useFakeTimers:!0},async()=>{await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL);const i=le("custom2","custom2",f(o.userRoamingDataHome,"profiles","custom2"),f(o.cacheHome,"profilesCache"));await r.writeFile(i.settingsResource,n.fromString('{ "configurationService.profiles.testSetting": "profileValue", "configurationService.profiles.testSetting2": "profileValue2" }'));const g=W.toPromise(t.onDidChangeConfiguration);await d.updateCurrentProfile(i);const p=await g;e.deepStrictEqual([...p.affectedKeys],["configurationService.profiles.testSetting"]),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting2"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"userValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"profileValue")})),test("switch to non default from default profile with settings applied to all profiles",()=>c({useFakeTimers:!0},async()=>{await t.updateValue(j,["configurationService.profiles.testSetting2"],w.USER_LOCAL),await d.updateCurrentProfile(u.get(y).defaultProfile);const i=le("custom2","custom2",f(o.userRoamingDataHome,"profiles","custom2"),f(o.cacheHome,"profilesCache"));await r.writeFile(i.settingsResource,n.fromString('{ "configurationService.profiles.testSetting": "profileValue", "configurationService.profiles.testSetting2": "profileValue2" }'));const g=W.toPromise(t.onDidChangeConfiguration);await d.updateCurrentProfile(i);const p=await g;e.deepStrictEqual([...p.affectedKeys],["configurationService.profiles.testSetting"]),e.strictEqual(t.getValue("configurationService.profiles.applicationSetting2"),"applicationValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting2"),"userValue"),e.strictEqual(t.getValue("configurationService.profiles.testSetting"),"profileValue")}))}),suite("WorkspaceConfigurationService-Multiroot",()=>{let t,s,r,o,d,u;const l=ce.as(ue.Configuration),a=J();suiteSetup(()=>{l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.testSetting":{type:"string",default:"isSet"},"configurationService.workspace.applicationSetting":{type:"string",default:"isSet",scope:m.APPLICATION},"configurationService.workspace.machineSetting":{type:"string",default:"isSet",scope:m.MACHINE},"configurationService.workspace.machineOverridableSetting":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE},"configurationService.workspace.testResourceSetting":{type:"string",default:"isSet",scope:m.RESOURCE},"configurationService.workspace.testLanguageSetting":{type:"string",default:"isSet",scope:m.LANGUAGE_OVERRIDABLE},"configurationService.workspace.testRestrictedSetting1":{type:"string",default:"isSet",restricted:!0,scope:m.RESOURCE},"configurationService.workspace.testRestrictedSetting2":{type:"string",default:"isSet",restricted:!0,scope:m.RESOURCE}}})}),setup(async()=>{const i=new E;o=a.add(new A(i));const g=a.add(new U);a.add(o.registerProvider(S.scheme,g));const p=f(S,"user"),V=f(S,"a"),k=f(S,"b"),v=f(S,"vsctests.code-workspace"),q={folders:[{path:V.path},{path:k.path}]};await o.createFolder(p),await o.createFolder(V),await o.createFolder(k),await o.writeFile(v,n.fromString(JSON.stringify(q,null,"	")));const F=Z(void 0,a);d=D;const P=a.add(F.createInstance(K));F.stub(te,P);const T=a.add(new L(o)),M=F.stub(y,a.add(new _(d,o,T,i)));a.add(o.registerProvider(C.vscodeUserData,a.add(new N(S.scheme,g,C.vscodeUserData,M,T,new E)))),u=F.stub(de,a.add(new z(M.defaultProfile)));const b=a.add(new O({configurationCache:new H},d,u,M,o,P,T,new E,new G));F.stub(B,o),F.stub(Y,b),F.stub(X,b),F.stub(Ie,d),F.stub($,d),await b.initialize(se(v)),F.stub(me,a.add(F.createInstance(Ve))),F.stub(re,a.add(F.createInstance(ie))),F.stub(ae,a.add(F.createInstance(oe))),s=F.createInstance(ve),F.stub(we,s),b.acquireInstantiationService(F),t=b,r=b}),test("application settings are not read from workspace",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.applicationSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.applicationSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.folder.applicationSetting"),"userValue")})),test("application settings are not read from workspace when folder is passed",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.applicationSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.applicationSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.folder.applicationSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("machine settings are not read from workspace",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.machineSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.folder.machineSetting"),"userValue")})),test("machine settings are not read from workspace when folder is passed",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.folder.machineSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.machineSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.folder.machineSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("get application scope settings are not loaded after defaults are registered",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.newSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.newSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.newSetting"),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.newSetting":{type:"string",default:"isSet",scope:m.APPLICATION}}}),e.strictEqual(r.getValue("configurationService.workspace.newSetting"),"userValue"),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.newSetting"),"userValue")})),test("get application scope settings are not loaded after defaults are registered when workspace folder is passed",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.newSetting-2": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.newSetting-2":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.newSetting-2",{resource:t.getWorkspace().folders[0].uri}),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.newSetting-2":{type:"string",default:"isSet",scope:m.APPLICATION}}}),e.strictEqual(r.getValue("configurationService.workspace.newSetting-2",{resource:t.getWorkspace().folders[0].uri}),"userValue"),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.newSetting-2",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("workspace settings override user settings after defaults are registered for machine overridable settings ",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.newMachineOverridableSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.newMachineOverridableSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.newMachineOverridableSetting"),"workspaceValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.newMachineOverridableSetting":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE}}}),e.strictEqual(r.getValue("configurationService.workspace.newMachineOverridableSetting"),"workspaceValue"),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.newMachineOverridableSetting"),"workspaceValue")})),test("application settings are not read from workspace folder",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.applicationSetting": "userValue" }')),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.applicationSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.applicationSetting"),"userValue")})),test("application settings are not read from workspace folder when workspace folder is passed",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.applicationSetting": "userValue" }')),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.applicationSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.applicationSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("machine settings are not read from workspace folder",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.machineSetting": "userValue" }')),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.machineSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.machineSetting"),"userValue")})),test("machine settings are not read from workspace folder when workspace folder is passed",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.machineSetting": "userValue" }')),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.machineSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.machineSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("application settings are not read from workspace folder after defaults are registered",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.testNewApplicationSetting": "userValue" }')),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testNewApplicationSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.testNewApplicationSetting",{resource:t.getWorkspace().folders[0].uri}),"workspaceFolderValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.testNewApplicationSetting":{type:"string",default:"isSet",scope:m.APPLICATION}}}),e.strictEqual(r.getValue("configurationService.workspace.testNewApplicationSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue"),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.testNewApplicationSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("machine settings are not read from workspace folder after defaults are registered",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.testNewMachineSetting": "userValue" }')),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testNewMachineSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.testNewMachineSetting",{resource:t.getWorkspace().folders[0].uri}),"workspaceFolderValue"),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.testNewMachineSetting":{type:"string",default:"isSet",scope:m.MACHINE}}}),e.strictEqual(r.getValue("configurationService.workspace.testNewMachineSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue"),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.testNewMachineSetting",{resource:t.getWorkspace().folders[0].uri}),"userValue")})),test("resource setting in folder is read after it is registered later",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testNewResourceSetting2": "workspaceFolderValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testNewResourceSetting2":"workspaceValue"}}],!0),await r.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.testNewResourceSetting2":{type:"string",default:"isSet",scope:m.RESOURCE}}}),e.strictEqual(r.getValue("configurationService.workspace.testNewResourceSetting2",{resource:t.getWorkspace().folders[0].uri}),"workspaceFolderValue")})),test("resource language setting in folder is read after it is registered later",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testNewResourceLanguageSetting2": "workspaceFolderValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testNewResourceLanguageSetting2":"workspaceValue"}}],!0),await r.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.testNewResourceLanguageSetting2":{type:"string",default:"isSet",scope:m.LANGUAGE_OVERRIDABLE}}}),e.strictEqual(r.getValue("configurationService.workspace.testNewResourceLanguageSetting2",{resource:t.getWorkspace().folders[0].uri}),"workspaceFolderValue")})),test("machine overridable setting in folder is read after it is registered later",()=>c({useFakeTimers:!0},async()=>{await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testNewMachineOverridableSetting2": "workspaceFolderValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testNewMachineOverridableSetting2":"workspaceValue"}}],!0),await r.reloadConfiguration(),l.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.workspace.testNewMachineOverridableSetting2":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE}}}),e.strictEqual(r.getValue("configurationService.workspace.testNewMachineOverridableSetting2",{resource:t.getWorkspace().folders[0].uri}),"workspaceFolderValue")})),test("inspect",()=>c({useFakeTimers:!0},async()=>{let i=r.inspect("something.missing");e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,void 0),i=r.inspect("configurationService.workspace.testResourceSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"isSet"),await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.testResourceSetting": "userValue" }')),await r.reloadConfiguration(),i=r.inspect("configurationService.workspace.testResourceSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.userValue,"userValue"),e.strictEqual(i.workspaceValue,void 0),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"userValue"),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testResourceSetting":"workspaceValue"}}],!0),await r.reloadConfiguration(),i=r.inspect("configurationService.workspace.testResourceSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.userValue,"userValue"),e.strictEqual(i.workspaceValue,"workspaceValue"),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"workspaceValue"),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testResourceSetting": "workspaceFolderValue" }')),await r.reloadConfiguration(),i=r.inspect("configurationService.workspace.testResourceSetting",{resource:t.getWorkspace().folders[0].uri}),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.userValue,"userValue"),e.strictEqual(i.workspaceValue,"workspaceValue"),e.strictEqual(i.workspaceFolderValue,"workspaceFolderValue"),e.strictEqual(i.value,"workspaceFolderValue")})),test("inspect restricted settings",()=>c({useFakeTimers:!0},async()=>{r.updateWorkspaceTrust(!1),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testRestrictedSetting1":"workspaceRestrictedValue"}}],!0),await r.reloadConfiguration();let i=r.inspect("configurationService.workspace.testRestrictedSetting1",{resource:t.getWorkspace().folders[0].uri});e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"isSet"),r.updateWorkspaceTrust(!0),await r.reloadConfiguration(),i=r.inspect("configurationService.workspace.testRestrictedSetting1",{resource:t.getWorkspace().folders[0].uri}),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(i.workspaceFolderValue,void 0),e.strictEqual(i.value,"workspaceRestrictedValue"),r.updateWorkspaceTrust(!1),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testRestrictedSetting1": "workspaceFolderRestrictedValue" }')),await r.reloadConfiguration(),i=r.inspect("configurationService.workspace.testRestrictedSetting1",{resource:t.getWorkspace().folders[0].uri}),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(i.workspaceFolderValue,"workspaceFolderRestrictedValue"),e.strictEqual(i.value,"isSet"),r.updateWorkspaceTrust(!0),await r.reloadConfiguration(),i=r.inspect("configurationService.workspace.testRestrictedSetting1",{resource:t.getWorkspace().folders[0].uri}),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.application,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(i.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(i.workspaceFolderValue,"workspaceFolderRestrictedValue"),e.strictEqual(i.value,"workspaceFolderRestrictedValue")})),test("inspect restricted settings after change",()=>c({useFakeTimers:!0},async()=>{r.updateWorkspaceTrust(!1),await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.testRestrictedSetting1": "userRestrictedValue" }')),await r.reloadConfiguration();let i=W.toPromise(r.onDidChangeConfiguration);await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testRestrictedSetting1":"workspaceRestrictedValue"}}],!0);let g=await i,p=r.inspect("configurationService.workspace.testRestrictedSetting1",{resource:t.getWorkspace().folders[0].uri});e.strictEqual(p.defaultValue,"isSet"),e.strictEqual(p.application,void 0),e.strictEqual(p.userValue,"userRestrictedValue"),e.strictEqual(p.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(p.workspaceFolderValue,void 0),e.strictEqual(p.value,"userRestrictedValue"),e.strictEqual(g.affectsConfiguration("configurationService.workspace.testRestrictedSetting1"),!0),i=W.toPromise(r.onDidChangeConfiguration),await o.writeFile(t.getWorkspace().folders[0].toResource(".vscode/settings.json"),n.fromString('{ "configurationService.workspace.testRestrictedSetting1": "workspaceFolderRestrictedValue" }')),g=await i,p=r.inspect("configurationService.workspace.testRestrictedSetting1",{resource:t.getWorkspace().folders[0].uri}),e.strictEqual(p.defaultValue,"isSet"),e.strictEqual(p.application,void 0),e.strictEqual(p.userValue,"userRestrictedValue"),e.strictEqual(p.workspaceValue,"workspaceRestrictedValue"),e.strictEqual(p.workspaceFolderValue,"workspaceFolderRestrictedValue"),e.strictEqual(p.value,"userRestrictedValue"),e.strictEqual(g.affectsConfiguration("configurationService.workspace.testRestrictedSetting1"),!0)})),test("get launch configuration",()=>c({useFakeTimers:!0},async()=>{const i={version:"0.1.0",configurations:[{type:"node",request:"launch",name:"Gulp Build",program:"${workspaceFolder}/node_modules/gulp/bin/gulp.js",stopOnEntry:!0,args:["watch-extension:json-client"],cwd:"${workspaceFolder}"}]};await s.write(t.getWorkspace().configuration,[{path:["launch"],value:i}],!0),await r.reloadConfiguration();const g=r.getValue("launch");e.deepStrictEqual(g,i)})),test("inspect launch configuration",()=>c({useFakeTimers:!0},async()=>{const i={version:"0.1.0",configurations:[{type:"node",request:"launch",name:"Gulp Build",program:"${workspaceFolder}/node_modules/gulp/bin/gulp.js",stopOnEntry:!0,args:["watch-extension:json-client"],cwd:"${workspaceFolder}"}]};await s.write(t.getWorkspace().configuration,[{path:["launch"],value:i}],!0),await r.reloadConfiguration();const g=r.inspect("launch").workspaceValue;e.deepStrictEqual(g,i)})),test("get tasks configuration",()=>c({useFakeTimers:!0},async()=>{const i={version:"2.0.0",tasks:[{label:"Run Dev",type:"shell",command:"./scripts/code.sh",windows:{command:".\\scripts\\code.bat"},problemMatcher:[]}]};await s.write(t.getWorkspace().configuration,[{path:["tasks"],value:i}],!0),await r.reloadConfiguration();const g=r.getValue(ge.Tasks);e.deepStrictEqual(g,i)})),test("inspect tasks configuration",()=>c({useFakeTimers:!0},async()=>{const i={version:"2.0.0",tasks:[{label:"Run Dev",type:"shell",command:"./scripts/code.sh",windows:{command:".\\scripts\\code.bat"},problemMatcher:[]}]};await s.write(t.getWorkspace().configuration,[{path:["tasks"],value:i}],!0),await r.reloadConfiguration();const g=r.inspect("tasks").workspaceValue;e.deepStrictEqual(g,i)})),test("update user configuration",()=>c({useFakeTimers:!0},async()=>{await r.updateValue("configurationService.workspace.testSetting","userValue",w.USER),e.strictEqual(r.getValue("configurationService.workspace.testSetting"),"userValue")})),test("update user configuration should trigger change event before promise is resolve",()=>c({useFakeTimers:!0},async()=>{const i=h.spy();a.add(r.onDidChangeConfiguration(i)),await r.updateValue("configurationService.workspace.testSetting","userValue",w.USER),e.ok(i.called)})),test("update workspace configuration",()=>c({useFakeTimers:!0},async()=>{await r.updateValue("configurationService.workspace.testSetting","workspaceValue",w.WORKSPACE),e.strictEqual(r.getValue("configurationService.workspace.testSetting"),"workspaceValue")})),test("update workspace configuration should trigger change event before promise is resolve",()=>c({useFakeTimers:!0},async()=>{const i=h.spy();a.add(r.onDidChangeConfiguration(i)),await r.updateValue("configurationService.workspace.testSetting","workspaceValue",w.WORKSPACE),e.ok(i.called)})),test("update application setting into workspace configuration in a workspace is not supported",()=>r.updateValue("configurationService.workspace.applicationSetting","workspaceValue",{},w.WORKSPACE,{donotNotifyError:!0}).then(()=>e.fail("Should not be supported"),i=>e.strictEqual(i.code,fe.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION))),test("update machine setting into workspace configuration in a workspace is not supported",()=>r.updateValue("configurationService.workspace.machineSetting","workspaceValue",{},w.WORKSPACE,{donotNotifyError:!0}).then(()=>e.fail("Should not be supported"),i=>e.strictEqual(i.code,fe.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE))),test("update workspace folder configuration",()=>{const i=t.getWorkspace();return r.updateValue("configurationService.workspace.testResourceSetting","workspaceFolderValue",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER).then(()=>e.strictEqual(r.getValue("configurationService.workspace.testResourceSetting",{resource:i.folders[0].uri}),"workspaceFolderValue"))}),test("update resource language configuration in workspace folder",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace();await r.updateValue("configurationService.workspace.testLanguageSetting","workspaceFolderValue",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER),e.strictEqual(r.getValue("configurationService.workspace.testLanguageSetting",{resource:i.folders[0].uri}),"workspaceFolderValue")})),test("update workspace folder configuration should trigger change event before promise is resolve",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace(),g=h.spy();a.add(r.onDidChangeConfiguration(g)),await r.updateValue("configurationService.workspace.testResourceSetting","workspaceFolderValue",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER),e.ok(g.called)})),test("update workspace folder configuration second time should trigger change event before promise is resolve",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace();await r.updateValue("configurationService.workspace.testResourceSetting","workspaceFolderValue",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER);const g=h.spy();a.add(r.onDidChangeConfiguration(g)),await r.updateValue("configurationService.workspace.testResourceSetting","workspaceFolderValue2",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER),e.ok(g.called)})),test("update machine overridable setting in folder",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace();await r.updateValue("configurationService.workspace.machineOverridableSetting","workspaceFolderValue",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER),e.strictEqual(r.getValue("configurationService.workspace.machineOverridableSetting",{resource:i.folders[0].uri}),"workspaceFolderValue")})),test("update memory configuration",()=>c({useFakeTimers:!0},async()=>{await r.updateValue("configurationService.workspace.testSetting","memoryValue",w.MEMORY),e.strictEqual(r.getValue("configurationService.workspace.testSetting"),"memoryValue")})),test("update memory configuration should trigger change event before promise is resolve",()=>c({useFakeTimers:!0},async()=>{const i=h.spy();a.add(r.onDidChangeConfiguration(i)),await r.updateValue("configurationService.workspace.testSetting","memoryValue",w.MEMORY),e.ok(i.called)})),test("remove setting from all targets",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace(),g="configurationService.workspace.testResourceSetting";await r.updateValue(g,"workspaceFolderValue",{resource:i.folders[0].uri},w.WORKSPACE_FOLDER),await r.updateValue(g,"workspaceValue",w.WORKSPACE),await r.updateValue(g,"userValue",w.USER),await r.updateValue(g,void 0,{resource:i.folders[0].uri}),await r.reloadConfiguration();const p=r.inspect(g,{resource:i.folders[0].uri});e.strictEqual(p.userValue,void 0),e.strictEqual(p.workspaceValue,void 0),e.strictEqual(p.workspaceFolderValue,void 0)})),test("update tasks configuration in a folder",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace();await r.updateValue("tasks",{version:"1.0.0",tasks:[{taskName:"myTask"}]},{resource:i.folders[0].uri},w.WORKSPACE_FOLDER),e.deepStrictEqual(r.getValue(ge.Tasks,{resource:i.folders[0].uri}),{version:"1.0.0",tasks:[{taskName:"myTask"}]})})),test("update launch configuration in a workspace",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace();await r.updateValue("launch",{version:"1.0.0",configurations:[{name:"myLaunch"}]},{resource:i.folders[0].uri},w.WORKSPACE,{donotNotifyError:!0}),e.deepStrictEqual(r.getValue("launch"),{version:"1.0.0",configurations:[{name:"myLaunch"}]})})),test("update tasks configuration in a workspace",()=>c({useFakeTimers:!0},async()=>{const i=t.getWorkspace(),g={version:"2.0.0",tasks:[{label:"myTask"}]};await r.updateValue("tasks",g,{resource:i.folders[0].uri},w.WORKSPACE,{donotNotifyError:!0}),e.deepStrictEqual(r.getValue(ge.Tasks),g)})),test("configuration of newly added folder is available on configuration change event",()=>c({useFakeTimers:!0},async()=>{const i=r,g=i.getWorkspace().folders[1].uri;return await i.removeFolders([g]),await o.writeFile(f(g,".vscode","settings.json"),n.fromString('{ "configurationService.workspace.testResourceSetting": "workspaceFolderValue" }')),new Promise((p,V)=>{a.add(r.onDidChangeConfiguration(()=>{try{e.strictEqual(r.getValue("configurationService.workspace.testResourceSetting",{resource:g}),"workspaceFolderValue"),p()}catch(k){V(k)}})),i.addFolders([{uri:g}])})})),test("restricted setting is read from workspace folders when workspace is trusted",()=>c({useFakeTimers:!0},async()=>{r.updateWorkspaceTrust(!0),await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.testRestrictedSetting1": "userValue", "configurationService.workspace.testRestrictedSetting2": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testRestrictedSetting1":"workspaceValue"}}],!0),await o.writeFile(f(r.getWorkspace().folders[1].uri,".vscode","settings.json"),n.fromString('{ "configurationService.workspace.testRestrictedSetting2": "workspaceFolder2Value" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.testRestrictedSetting1",{resource:r.getWorkspace().folders[0].uri}),"workspaceValue"),e.strictEqual(r.getValue("configurationService.workspace.testRestrictedSetting2",{resource:r.getWorkspace().folders[1].uri}),"workspaceFolder2Value"),e.ok(r.restrictedSettings.default.includes("configurationService.workspace.testRestrictedSetting1")),e.ok(r.restrictedSettings.default.includes("configurationService.workspace.testRestrictedSetting2")),e.strictEqual(r.restrictedSettings.userLocal,void 0),e.strictEqual(r.restrictedSettings.userRemote,void 0),e.deepStrictEqual(r.restrictedSettings.workspace,["configurationService.workspace.testRestrictedSetting1"]),e.strictEqual(r.restrictedSettings.workspaceFolder?.size,1),e.strictEqual(r.restrictedSettings.workspaceFolder?.get(r.getWorkspace().folders[0].uri),void 0),e.deepStrictEqual(r.restrictedSettings.workspaceFolder?.get(r.getWorkspace().folders[1].uri),["configurationService.workspace.testRestrictedSetting2"])})),test("restricted setting is not read from workspace when workspace is not trusted",()=>c({useFakeTimers:!0},async()=>{r.updateWorkspaceTrust(!1),await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.testRestrictedSetting1": "userValue", "configurationService.workspace.testRestrictedSetting2": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.testRestrictedSetting1":"workspaceValue"}}],!0),await o.writeFile(f(r.getWorkspace().folders[1].uri,".vscode","settings.json"),n.fromString('{ "configurationService.workspace.testRestrictedSetting2": "workspaceFolder2Value" }')),await r.reloadConfiguration(),e.strictEqual(r.getValue("configurationService.workspace.testRestrictedSetting1",{resource:r.getWorkspace().folders[0].uri}),"userValue"),e.strictEqual(r.getValue("configurationService.workspace.testRestrictedSetting2",{resource:r.getWorkspace().folders[1].uri}),"userValue"),e.ok(r.restrictedSettings.default.includes("configurationService.workspace.testRestrictedSetting1")),e.ok(r.restrictedSettings.default.includes("configurationService.workspace.testRestrictedSetting2")),e.strictEqual(r.restrictedSettings.userLocal,void 0),e.strictEqual(r.restrictedSettings.userRemote,void 0),e.deepStrictEqual(r.restrictedSettings.workspace,["configurationService.workspace.testRestrictedSetting1"]),e.strictEqual(r.restrictedSettings.workspaceFolder?.size,1),e.strictEqual(r.restrictedSettings.workspaceFolder?.get(r.getWorkspace().folders[0].uri),void 0),e.deepStrictEqual(r.restrictedSettings.workspaceFolder?.get(r.getWorkspace().folders[1].uri),["configurationService.workspace.testRestrictedSetting2"])})),test("remove an unregistered setting",()=>c({useFakeTimers:!0},async()=>{const i="configurationService.workspace.unknownSetting";await o.writeFile(u.currentProfile.settingsResource,n.fromString('{ "configurationService.workspace.unknownSetting": "userValue" }')),await s.write(t.getWorkspace().configuration,[{path:["settings"],value:{"configurationService.workspace.unknownSetting":"workspaceValue"}}],!0),await o.writeFile(f(t.getWorkspace().folders[0].uri,".vscode","settings.json"),n.fromString('{ "configurationService.workspace.unknownSetting": "workspaceFolderValue1" }')),await o.writeFile(f(t.getWorkspace().folders[1].uri,".vscode","settings.json"),n.fromString('{ "configurationService.workspace.unknownSetting": "workspaceFolderValue2" }')),await r.reloadConfiguration(),await r.updateValue(i,void 0,{resource:t.getWorkspace().folders[0].uri});let g=r.inspect(i,{resource:t.getWorkspace().folders[0].uri});e.strictEqual(g.userValue,void 0),e.strictEqual(g.workspaceValue,void 0),e.strictEqual(g.workspaceFolderValue,void 0),await r.updateValue(i,void 0,{resource:t.getWorkspace().folders[1].uri}),g=r.inspect(i,{resource:t.getWorkspace().folders[1].uri}),e.strictEqual(g.userValue,void 0),e.strictEqual(g.workspaceValue,void 0),e.strictEqual(g.workspaceFolderValue,void 0)}))}),suite("WorkspaceConfigurationService - Remote Folder",()=>{let t,s,r,o,d,u,l,a,i,g;const p="configuraiton-tests",V=ce.as(ue.Configuration),k=J();suiteSetup(()=>{V.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.remote.applicationSetting":{type:"string",default:"isSet",scope:m.APPLICATION},"configurationService.remote.machineSetting":{type:"string",default:"isSet",scope:m.MACHINE},"configurationService.remote.machineOverridableSetting":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE},"configurationService.remote.testSetting":{type:"string",default:"isSet",scope:m.RESOURCE}}})}),setup(async()=>{const P=new E;a=k.add(new A(P)),d=k.add(new U),k.add(a.registerProvider(S.scheme,d));const T=f(S,"user");s=f(S,"a"),await a.createFolder(s),await a.createFolder(T),r=f(S,"machine-settings.json"),o=r.with({scheme:C.vscodeRemote,authority:p}),l=Z(void 0,k),i=D;const M=new Promise(ye=>u=()=>ye({settingsPath:o})),b=l.stub(te,{getEnvironment:()=>M}),ne={read:()=>Promise.resolve(""),write:()=>Promise.resolve(),remove:()=>Promise.resolve(),needsCaching:()=>!1},pe=k.add(new L(a)),Se=l.stub(y,k.add(new _(i,a,pe,P)));k.add(a.registerProvider(C.vscodeUserData,k.add(new N(S.scheme,d,C.vscodeUserData,Se,pe,new E)))),g=l.stub(de,k.add(new z(Se.defaultProfile))),t=k.add(new O({configurationCache:ne,remoteAuthority:p},i,g,Se,a,b,pe,new E,new G)),l.stub(Y,t),l.stub(X,t),l.stub($,i),l.stub(B,a)});async function v(){await t.initialize(I(s)),l.stub(re,k.add(l.createInstance(ie))),l.stub(ae,k.add(l.createInstance(oe))),l.stub(we,l.createInstance(ve)),t.acquireInstantiationService(l)}function q(){k.add(l.get(B).registerProvider(C.vscodeRemote,new We(d,p)))}function F(){const P=k.add(l.get(B).onWillActivateFileSystemProvider(T=>{T.scheme===C.vscodeRemote&&(P.dispose(),T.join(Promise.resolve().then(()=>q())))}))}test("remote settings override globals",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(r,n.fromString('{ "configurationService.remote.machineSetting": "remoteValue" }')),q(),u(),await v(),e.strictEqual(t.getValue("configurationService.remote.machineSetting"),"remoteValue")})),test("remote settings override globals after remote provider is registered on activation",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(r,n.fromString('{ "configurationService.remote.machineSetting": "remoteValue" }')),u(),F(),await v(),e.strictEqual(t.getValue("configurationService.remote.machineSetting"),"remoteValue")})),test("remote settings override globals after remote environment is resolved",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(r,n.fromString('{ "configurationService.remote.machineSetting": "remoteValue" }')),q(),await v();const P=new Promise((T,M)=>{k.add(t.onDidChangeConfiguration(b=>{try{e.strictEqual(b.source,w.USER),e.deepStrictEqual([...b.affectedKeys],["configurationService.remote.machineSetting"]),e.strictEqual(t.getValue("configurationService.remote.machineSetting"),"remoteValue"),T()}catch(ne){M(ne)}}))});return u(),P})),test("remote settings override globals after remote provider is registered on activation and remote environment is resolved",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(r,n.fromString('{ "configurationService.remote.machineSetting": "remoteValue" }')),F(),await v();const P=new Promise((T,M)=>{k.add(t.onDidChangeConfiguration(b=>{try{e.strictEqual(b.source,w.USER),e.deepStrictEqual([...b.affectedKeys],["configurationService.remote.machineSetting"]),e.strictEqual(t.getValue("configurationService.remote.machineSetting"),"remoteValue"),T()}catch(ne){M(ne)}}))});return u(),P})),test("machine settings in local user settings does not override defaults",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(g.currentProfile.settingsResource,n.fromString('{ "configurationService.remote.machineSetting": "globalValue" }')),q(),u(),await v(),e.strictEqual(t.getValue("configurationService.remote.machineSetting"),"isSet")})),test("machine overridable settings in local user settings does not override defaults",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(g.currentProfile.settingsResource,n.fromString('{ "configurationService.remote.machineOverridableSetting": "globalValue" }')),q(),u(),await v(),e.strictEqual(t.getValue("configurationService.remote.machineOverridableSetting"),"isSet")})),test("non machine setting is written in local settings",()=>c({useFakeTimers:!0},async()=>{q(),u(),await v(),await t.updateValue("configurationService.remote.applicationSetting","applicationValue"),await t.reloadConfiguration(),e.strictEqual(t.inspect("configurationService.remote.applicationSetting").userLocalValue,"applicationValue")})),test("machine setting is written in remote settings",()=>c({useFakeTimers:!0},async()=>{q(),u(),await v(),await t.updateValue("configurationService.remote.machineSetting","machineValue"),await t.reloadConfiguration(),e.strictEqual(t.inspect("configurationService.remote.machineSetting").userRemoteValue,"machineValue")})),test("machine overridable setting is written in remote settings",()=>c({useFakeTimers:!0},async()=>{q(),u(),await v(),await t.updateValue("configurationService.remote.machineOverridableSetting","machineValue"),await t.reloadConfiguration(),e.strictEqual(t.inspect("configurationService.remote.machineOverridableSetting").userRemoteValue,"machineValue")})),test("machine settings in local user settings does not override defaults after defalts are registered ",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(g.currentProfile.settingsResource,n.fromString('{ "configurationService.remote.newMachineSetting": "userValue" }')),q(),u(),await v(),V.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.remote.newMachineSetting":{type:"string",default:"isSet",scope:m.MACHINE}}}),e.strictEqual(t.getValue("configurationService.remote.newMachineSetting"),"isSet")})),test("machine overridable settings in local user settings does not override defaults after defaults are registered ",()=>c({useFakeTimers:!0},async()=>{await a.writeFile(g.currentProfile.settingsResource,n.fromString('{ "configurationService.remote.newMachineOverridableSetting": "userValue" }')),q(),u(),await v(),V.registerConfiguration({id:"_test",type:"object",properties:{"configurationService.remote.newMachineOverridableSetting":{type:"string",default:"isSet",scope:m.MACHINE_OVERRIDABLE}}}),e.strictEqual(t.getValue("configurationService.remote.newMachineOverridableSetting"),"isSet")}))});function Oe(t){let s=t.toString();return be||(s=s.toLowerCase()),qe(s).toString(16)}function se(t){return{configPath:t,id:Oe(t)}}
