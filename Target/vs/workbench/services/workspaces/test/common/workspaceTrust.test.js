import n from"assert";import{URI as l}from"../../../../../base/common/uri.js";import{mock as k}from"../../../../../base/test/common/mock.js";import{IConfigurationService as w}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as v}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{FileService as T}from"../../../../../platform/files/common/fileService.js";import{TestInstantiationService as b}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{NullLogService as I}from"../../../../../platform/log/common/log.js";import{IRemoteAuthorityResolverService as y}from"../../../../../platform/remote/common/remoteAuthorityResolver.js";import{IStorageService as W,StorageScope as d,StorageTarget as g}from"../../../../../platform/storage/common/storage.js";import{IWorkspaceContextService as E}from"../../../../../platform/workspace/common/workspace.js";import{IWorkspaceTrustEnablementService as C}from"../../../../../platform/workspace/common/workspaceTrust.js";import{Workspace as p}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{Memento as O}from"../../../../common/memento.js";import{IWorkbenchEnvironmentService as m}from"../../../environment/common/environmentService.js";import{IUriIdentityService as U}from"../../../../../platform/uriIdentity/common/uriIdentity.js";import{UriIdentityService as A}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{WorkspaceTrustEnablementService as f,WorkspaceTrustManagementService as R,WORKSPACE_TRUST_STORAGE_KEY as j}from"../../common/workspaceTrust.js";import{TestContextService as q,TestStorageService as x,TestWorkspaceTrustEnablementService as M}from"../../../../test/common/workbenchTestServices.js";import{ensureNoDisposablesAreLeakedInTestSuite as h}from"../../../../../base/test/common/utils.js";suite("Workspace Trust",()=>{const o=h();let e,i,a;setup(async()=>{e=o.add(new b),i=new v,e.stub(w,i),a={},e.stub(m,a);const t=o.add(new T(new I)),r=o.add(new A(t));e.stub(U,r),e.stub(y,new class extends k(){})}),suite("Enablement",()=>{test("workspace trust enabled",async()=>{await i.setUserConfiguration("security",c(!0,!0));const t=o.add(e.createInstance(f));n.strictEqual(t.isWorkspaceTrustEnabled(),!0)}),test("workspace trust disabled (user setting)",async()=>{await i.setUserConfiguration("security",c(!1,!0));const t=o.add(e.createInstance(f));n.strictEqual(t.isWorkspaceTrustEnabled(),!1)}),test("workspace trust disabled (--disable-workspace-trust)",()=>{e.stub(m,{...a,disableWorkspaceTrust:!0});const t=o.add(e.createInstance(f));n.strictEqual(t.isWorkspaceTrustEnabled(),!1)})}),suite("Management",()=>{let t,r;teardown(()=>{O.clear(d.WORKSPACE)}),setup(()=>{t=o.add(new x),e.stub(W,t),r=new q,e.stub(E,r),e.stub(C,new M)}),test("empty workspace - trusted",async()=>{await i.setUserConfiguration("security",c(!0,!0)),r.setWorkspace(new p("empty-workspace"));const s=await u();n.strictEqual(!0,s.isWorkspaceTrusted())}),test("empty workspace - untrusted",async()=>{await i.setUserConfiguration("security",c(!0,!1)),r.setWorkspace(new p("empty-workspace"));const s=await u();n.strictEqual(!1,s.isWorkspaceTrusted())}),test("empty workspace - trusted, open trusted file",async()=>{await i.setUserConfiguration("security",c(!0,!0));const s={uriTrustInfo:[{uri:l.parse("file:///Folder"),trusted:!0}]};t.store(j,JSON.stringify(s),d.APPLICATION,g.MACHINE),a.filesToOpenOrCreate=[{fileUri:l.parse("file:///Folder/file.txt")}],e.stub(m,{...a}),r.setWorkspace(new p("empty-workspace"));const S=await u();n.strictEqual(!0,S.isWorkspaceTrusted())}),test("empty workspace - trusted, open untrusted file",async()=>{await i.setUserConfiguration("security",c(!0,!0)),a.filesToOpenOrCreate=[{fileUri:l.parse("file:///Folder/foo.txt")}],e.stub(m,{...a}),r.setWorkspace(new p("empty-workspace"));const s=await u();n.strictEqual(!1,s.isWorkspaceTrusted())});async function u(){const s=o.add(e.createInstance(R));return await s.workspaceTrustInitialized,s}});function c(t,r){return{workspace:{trust:{emptyWindow:r,enabled:t}}}}});
