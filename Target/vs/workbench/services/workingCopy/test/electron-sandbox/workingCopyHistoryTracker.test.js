import t from"assert";import{Event as P}from"../../../../../base/common/event.js";import{TestContextService as z,TestWorkingCopy as E}from"../../../../test/common/workbenchTestServices.js";import{randomPath as V}from"../../../../../base/common/extpath.js";import{join as $}from"../../../../../base/common/path.js";import{URI as G}from"../../../../../base/common/uri.js";import{WorkingCopyHistoryTracker as J}from"../../common/workingCopyHistoryTracker.js";import{WorkingCopyService as K}from"../../common/workingCopyService.js";import{UriIdentityService as O}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{TestFileService as Q,TestPathService as X}from"../../../../test/browser/workbenchTestServices.js";import{DeferredPromise as R}from"../../../../../base/common/async.js";import"../../../../../platform/files/common/files.js";import{Schemas as x}from"../../../../../base/common/network.js";import{basename as A,dirname as M,isEqual as W,joinPath as y}from"../../../../../base/common/resources.js";import"../../../../../platform/configuration/test/common/testConfigurationService.js";import{UndoRedoService as Y}from"../../../../../platform/undoRedo/common/undoRedoService.js";import{TestDialogService as Z}from"../../../../../platform/dialogs/test/common/testDialogService.js";import{TestNotificationService as tt}from"../../../../../platform/notification/test/common/testNotificationService.js";import{CancellationToken as n}from"../../../../../base/common/cancellation.js";import"../../common/workingCopyHistory.js";import{assertIsDefined as et}from"../../../../../base/common/types.js";import{VSBuffer as _}from"../../../../../base/common/buffer.js";import{DisposableStore as rt}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as ot}from"../../../../../base/test/common/utils.js";import{TestWorkingCopyHistoryService as it}from"./workingCopyHistoryService.test.js";suite("WorkingCopyHistoryTracker",()=>{let S,F,k,i,f,m,q,H,p,C;const s=new rt,B="Hello Foo",j=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join("").repeat(1e3);let L=1;async function g(c,o){const a=await i.addEntry({...c,timestamp:L++},o);return et(a)}setup(async()=>{S=G.file(V($("vsctests","workingcopyhistorytracker"))).with({scheme:x.inMemory}),F=y(S,"User","History"),k=y(S,"work"),i=s.add(new it(s)),f=s.add(new K),m=i._fileService,q=i._configurationService,H=s.add(b()),await m.createFolder(F),await m.createFolder(k),p=y(k,"foo.txt"),C=y(k,"bar.txt"),await m.writeFile(p,_.fromString(B)),await m.writeFile(C,_.fromString(j))});function b(){return new J(f,i,s.add(new O(s.add(new Q))),new X(void 0,x.file),q,new Y(new Z,new tt),new z,i._fileService)}teardown(async()=>{await m.del(S,{recursive:!0}),s.clear()}),test("history entry added on save",async()=>{const c=s.add(new E(p)),o=s.add(new E(C)),a=await m.resolve(c.resource,{resolveMetadata:!0}),d=await m.resolve(o.resource,{resolveMetadata:!0});s.add(f.registerWorkingCopy(c)),s.add(f.registerWorkingCopy(o));const u=new R;let r=0;s.add(i.onDidAddEntry(l=>{(W(l.entry.workingCopy.resource,c.resource)||W(l.entry.workingCopy.resource,o.resource))&&(r++,r===2&&u.complete())})),await c.save(void 0,a),await o.save(void 0,d),await u.p}),test("history entry skipped when setting disabled (globally)",async()=>(q.setUserConfiguration("workbench.localHistory.enabled",!1,p),T())),test("history entry skipped when setting disabled (exclude)",()=>(q.setUserConfiguration("workbench.localHistory.exclude",{"**/foo.txt":!0}),H.dispose(),H=s.add(b()),T())),test("history entry skipped when too large",async()=>(q.setUserConfiguration("workbench.localHistory.maxFileSize",0,p),T()));async function T(){const c=s.add(new E(p)),o=s.add(new E(C)),a=await m.resolve(c.resource,{resolveMetadata:!0}),d=await m.resolve(o.resource,{resolveMetadata:!0});s.add(f.registerWorkingCopy(c)),s.add(f.registerWorkingCopy(o));const u=new R;s.add(i.onDidAddEntry(r=>{W(r.entry.workingCopy.resource,c.resource)&&t.fail("Unexpected working copy history entry: "+r.entry.workingCopy.resource.toString()),W(r.entry.workingCopy.resource,o.resource)&&u.complete()})),await c.save(void 0,a),await o.save(void 0,d),await u.p}test("entries moved (file rename)",async()=>{const c=P.toPromise(i.onDidMoveEntries),o=s.add(new E(p)),a=await g({resource:o.resource,source:"test-source"},n.None),d=await g({resource:o.resource,source:"test-source"},n.None),u=await g({resource:o.resource,source:"test-source"},n.None);let r=await i.getEntries(o.resource,n.None);t.strictEqual(r.length,3);const l=y(M(o.resource),"renamed.txt");await i._fileService.move(o.resource,l),await c,r=await i.getEntries(o.resource,n.None),t.strictEqual(r.length,0),r=await i.getEntries(l,n.None),t.strictEqual(r.length,4),t.strictEqual(r[0].id,a.id),t.strictEqual(r[0].timestamp,a.timestamp),t.strictEqual(r[0].source,a.source),t.notStrictEqual(r[0].location,a.location),t.strictEqual(r[0].workingCopy.resource.toString(),l.toString()),t.strictEqual(r[1].id,d.id),t.strictEqual(r[1].timestamp,d.timestamp),t.strictEqual(r[1].source,d.source),t.notStrictEqual(r[1].location,d.location),t.strictEqual(r[1].workingCopy.resource.toString(),l.toString()),t.strictEqual(r[2].id,u.id),t.strictEqual(r[2].timestamp,u.timestamp),t.strictEqual(r[2].source,u.source),t.notStrictEqual(r[2].location,u.location),t.strictEqual(r[2].workingCopy.resource.toString(),l.toString());const w=await i.getAll(n.None);t.strictEqual(w.length,1),t.strictEqual(w[0].toString(),l.toString())}),test("entries moved (folder rename)",async()=>{const c=P.toPromise(i.onDidMoveEntries),o=s.add(new E(p)),a=s.add(new E(C)),d=await g({resource:o.resource,source:"test-source"},n.None),u=await g({resource:o.resource,source:"test-source"},n.None),r=await g({resource:o.resource,source:"test-source"},n.None),l=await g({resource:a.resource,source:"test-source"},n.None),w=await g({resource:a.resource,source:"test-source"},n.None),N=await g({resource:a.resource,source:"test-source"},n.None);let e=await i.getEntries(o.resource,n.None);t.strictEqual(e.length,3),e=await i.getEntries(a.resource,n.None),t.strictEqual(e.length,3);const I=y(M(S),"renamed");await i._fileService.move(k,I);const v=y(I,A(o.resource)),h=y(I,A(a.resource));await c,e=await i.getEntries(o.resource,n.None),t.strictEqual(e.length,0),e=await i.getEntries(a.resource,n.None),t.strictEqual(e.length,0),e=await i.getEntries(v,n.None),t.strictEqual(e.length,4),t.strictEqual(e[0].id,d.id),t.strictEqual(e[0].timestamp,d.timestamp),t.strictEqual(e[0].source,d.source),t.notStrictEqual(e[0].location,d.location),t.strictEqual(e[0].workingCopy.resource.toString(),v.toString()),t.strictEqual(e[1].id,u.id),t.strictEqual(e[1].timestamp,u.timestamp),t.strictEqual(e[1].source,u.source),t.notStrictEqual(e[1].location,u.location),t.strictEqual(e[1].workingCopy.resource.toString(),v.toString()),t.strictEqual(e[2].id,r.id),t.strictEqual(e[2].timestamp,r.timestamp),t.strictEqual(e[2].source,r.source),t.notStrictEqual(e[2].location,r.location),t.strictEqual(e[2].workingCopy.resource.toString(),v.toString()),e=await i.getEntries(h,n.None),t.strictEqual(e.length,4),t.strictEqual(e[0].id,l.id),t.strictEqual(e[0].timestamp,l.timestamp),t.strictEqual(e[0].source,l.source),t.notStrictEqual(e[0].location,l.location),t.strictEqual(e[0].workingCopy.resource.toString(),h.toString()),t.strictEqual(e[1].id,w.id),t.strictEqual(e[1].timestamp,w.timestamp),t.strictEqual(e[1].source,w.source),t.notStrictEqual(e[1].location,w.location),t.strictEqual(e[1].workingCopy.resource.toString(),h.toString()),t.strictEqual(e[2].id,N.id),t.strictEqual(e[2].timestamp,N.timestamp),t.strictEqual(e[2].source,N.source),t.notStrictEqual(e[2].location,N.location),t.strictEqual(e[2].workingCopy.resource.toString(),h.toString());const D=await i.getAll(n.None);t.strictEqual(D.length,2);for(const U of D)U.toString()!==v.toString()&&U.toString()!==h.toString()&&t.fail(`Unexpected history resource: ${U.toString()}`)}),ot()});
