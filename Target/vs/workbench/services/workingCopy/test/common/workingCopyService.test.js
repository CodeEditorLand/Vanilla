import t from"assert";import"../../common/workingCopy.js";import{URI as q}from"../../../../../base/common/uri.js";import{TestWorkingCopy as d}from"../../../../test/common/workbenchTestServices.js";import{WorkingCopyService as C}from"../../common/workingCopyService.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../../../../../base/test/common/utils.js";import{DisposableStore as h}from"../../../../../base/common/lifecycle.js";suite("WorkingCopyService",()=>{const e=new h;teardown(()=>{e.clear()}),test("registry - basics",()=>{const s=e.add(new C),i=[];e.add(s.onDidChangeDirty(y=>i.push(y)));const o=[];e.add(s.onDidChangeContent(y=>o.push(y)));const l=[];e.add(s.onDidSave(y=>l.push(y)));const n=[];e.add(s.onDidRegister(y=>n.push(y)));const c=[];e.add(s.onDidUnregister(y=>c.push(y))),t.strictEqual(s.hasDirty,!1),t.strictEqual(s.dirtyCount,0),t.strictEqual(s.workingCopies.length,0),t.strictEqual(s.isDirty(q.file("/")),!1);const a=q.file("/some/folder/file.txt");t.strictEqual(s.has(a),!1),t.strictEqual(s.has({resource:a,typeId:"testWorkingCopyType"}),!1),t.strictEqual(s.get({resource:a,typeId:"testWorkingCopyType"}),void 0),t.strictEqual(s.getAll(a),void 0);const r=e.add(new d(a)),p=s.registerWorkingCopy(r);t.strictEqual(s.workingCopies.length,1),t.strictEqual(s.workingCopies[0],r),t.strictEqual(n.length,1),t.strictEqual(n[0],r),t.strictEqual(s.dirtyCount,0),t.strictEqual(s.modifiedCount,0),t.strictEqual(s.isDirty(a),!1),t.strictEqual(s.has(a),!0),t.strictEqual(s.has(r),!0),t.strictEqual(s.get(r),r),t.strictEqual(s.hasDirty,!1);const E=s.getAll(r.resource);t.strictEqual(E?.length,1),t.strictEqual(E[0],r),r.setDirty(!0),r.save(),t.strictEqual(r.isDirty(),!0),t.strictEqual(s.dirtyCount,1),t.strictEqual(s.dirtyWorkingCopies.length,1),t.strictEqual(s.dirtyWorkingCopies[0],r),t.strictEqual(s.modifiedCount,1),t.strictEqual(s.modifiedWorkingCopies.length,1),t.strictEqual(s.modifiedWorkingCopies[0],r),t.strictEqual(s.workingCopies.length,1),t.strictEqual(s.workingCopies[0],r),t.strictEqual(s.isDirty(a),!0),t.strictEqual(s.hasDirty,!0),t.strictEqual(i.length,1),t.strictEqual(i[0],r),t.strictEqual(l.length,1),t.strictEqual(l[0].workingCopy,r),r.setContent("foo"),t.strictEqual(o.length,1),t.strictEqual(o[0],r),r.setDirty(!1),t.strictEqual(s.dirtyCount,0),t.strictEqual(s.isDirty(a),!1),t.strictEqual(s.hasDirty,!1),t.strictEqual(i.length,2),t.strictEqual(i[1],r),p.dispose(),t.strictEqual(c.length,1),t.strictEqual(c[0],r),t.strictEqual(s.workingCopies.length,0),t.strictEqual(s.has(a),!1);const g=q.file("/some/folder/file-dirty.txt"),u=e.add(new d(g,!0)),D=s.registerWorkingCopy(u);t.strictEqual(n.length,2),t.strictEqual(n[1],u),t.strictEqual(s.dirtyCount,1),t.strictEqual(s.isDirty(g),!0),t.strictEqual(s.hasDirty,!0),t.strictEqual(i.length,3),t.strictEqual(i[2],u),u.setContent("foo"),t.strictEqual(o.length,2),t.strictEqual(o[1],u),D.dispose(),t.strictEqual(c.length,2),t.strictEqual(c[1],u),t.strictEqual(s.dirtyCount,0),t.strictEqual(s.hasDirty,!1),t.strictEqual(i.length,4),t.strictEqual(i[3],u)}),test("registry - multiple copies on same resource throws (same type ID)",()=>{const s=e.add(new C),i=q.parse("custom://some/folder/custom.txt"),o=e.add(new d(i));e.add(s.registerWorkingCopy(o));const l=e.add(new d(i));t.throws(()=>s.registerWorkingCopy(l))}),test("registry - multiple copies on same resource is supported (different type ID)",()=>{const s=e.add(new C),i=q.parse("custom://some/folder/custom.txt"),o="testWorkingCopyTypeId1";let l=e.add(new d(i,!1,o)),n=s.registerWorkingCopy(l);const c="testWorkingCopyTypeId2",a=e.add(new d(i,!1,c)),r=s.registerWorkingCopy(a),p="testWorkingCopyTypeId3",E=e.add(new d(i,!1,p)),g=s.registerWorkingCopy(E),u=s.getAll(i);t.strictEqual(u?.length,3),t.strictEqual(u[0],l),t.strictEqual(u[1],a),t.strictEqual(u[2],E),t.strictEqual(s.dirtyCount,0),t.strictEqual(s.isDirty(i),!1),t.strictEqual(s.isDirty(i,o),!1),l.setDirty(!0),t.strictEqual(s.dirtyCount,1),t.strictEqual(s.isDirty(i),!0),t.strictEqual(s.isDirty(i,o),!0),t.strictEqual(s.isDirty(i,c),!1),a.setDirty(!0),t.strictEqual(s.dirtyCount,2),t.strictEqual(s.isDirty(i),!0),t.strictEqual(s.isDirty(i,o),!0),t.strictEqual(s.isDirty(i,c),!0),E.setDirty(!0),t.strictEqual(s.dirtyCount,3),t.strictEqual(s.isDirty(i),!0),t.strictEqual(s.isDirty(i,o),!0),t.strictEqual(s.isDirty(i,c),!0),t.strictEqual(s.isDirty(i,p),!0),l.setDirty(!1),a.setDirty(!1),E.setDirty(!1),t.strictEqual(s.dirtyCount,0),t.strictEqual(s.isDirty(i),!1),t.strictEqual(s.isDirty(i,o),!1),t.strictEqual(s.isDirty(i,c),!1),t.strictEqual(s.isDirty(i,p),!1),n.dispose(),l=e.add(new d(i,!1,o)),n=s.registerWorkingCopy(l),n.dispose(),r.dispose(),g.dispose(),t.strictEqual(s.workingCopies.length,0)}),f()});
