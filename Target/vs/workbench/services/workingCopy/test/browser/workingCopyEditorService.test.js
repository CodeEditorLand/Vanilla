import a from"assert";import{DisposableStore as p}from"../../../../../base/common/lifecycle.js";import{URI as w}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as k}from"../../../../../base/test/common/utils.js";import{EditorService as y}from"../../../editor/browser/editorService.js";import{IEditorGroupsService as v}from"../../../editor/common/editorGroupsService.js";import{UntitledTextEditorInput as l}from"../../../untitled/common/untitledTextEditorInput.js";import{WorkingCopyEditorService as E}from"../../common/workingCopyEditorService.js";import{createEditorPart as I,registerTestResourceEditor as S,TestEditorService as C,TestServiceAccessor as H,workbenchInstantiationService as T}from"../../../../test/browser/workbenchTestServices.js";import{TestWorkingCopy as W}from"../../../../test/common/workbenchTestServices.js";suite("WorkingCopyEditorService",()=>{const t=new p;setup(()=>{t.add(S())}),teardown(()=>{t.clear()}),test("registry - basics",()=>{const e=t.add(new E(t.add(new C)));let r;t.add(e.onDidRegisterHandler(o=>{r=o}));const i={handles:o=>!1,isOpen:()=>!1,createEditor:o=>{throw new Error}};t.add(e.registerHandler(i)),a.strictEqual(r,i)}),test("findEditor",async()=>{const e=new p,r=T(void 0,e),i=await I(r,e);r.stub(v,i);const o=e.add(r.createInstance(y,void 0)),c=r.createInstance(H),s=e.add(new E(o)),f=w.parse("custom://some/folder/custom.txt"),n=e.add(new W(f,!1,"testWorkingCopyTypeId1"));a.strictEqual(s.findEditor(n),void 0);const m={handles:d=>d===n,isOpen:(d,b)=>d===n,createEditor:d=>{throw new Error}};e.add(s.registerHandler(m));const u=e.add(r.createInstance(l,c.untitledTextEditorService.create({initialValue:"foo"}))),g=e.add(r.createInstance(l,c.untitledTextEditorService.create({initialValue:"foo"})));await o.openEditors([{editor:u},{editor:g}]),a.ok(s.findEditor(n)),e.dispose()}),k()});
