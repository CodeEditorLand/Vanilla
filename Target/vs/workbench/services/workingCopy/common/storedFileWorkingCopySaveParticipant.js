var m=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=(a,i,e,t)=>{for(var r=t>1?void 0:t?d(i,e):i,o=a.length-1,s;o>=0;o--)(s=a[o])&&(r=(t?s(i,e,r):s(r))||r);return t&&r&&m(i,e,r),r},l=(a,i)=>(e,t)=>i(e,t,a);import{raceCancellation as v}from"../../../../base/common/async.js";import"../../../../base/common/cancellation.js";import{ILogService as I}from"../../../../platform/log/common/log.js";import"../../../../platform/progress/common/progress.js";import{Disposable as S,toDisposable as g}from"../../../../base/common/lifecycle.js";import{insert as P}from"../../../../base/common/arrays.js";import"./workingCopyFileService.js";import"./storedFileWorkingCopy.js";let p=class extends S{constructor(e){super();this.logService=e}saveParticipants=[];get length(){return this.saveParticipants.length}addSaveParticipant(e){const t=P(this.saveParticipants,e);return g(()=>t())}async participate(e,t,r,o){e.model?.pushStackElement();for(const s of this.saveParticipants){if(o.isCancellationRequested||e.isDisposed())break;try{const n=s.participate(e,t,r,o);await v(n,o)}catch(n){this.logService.warn(n)}}e.model?.pushStackElement()}dispose(){this.saveParticipants.splice(0,this.saveParticipants.length),super.dispose()}};p=c([l(0,I)],p);export{p as StoredFileWorkingCopySaveParticipant};
