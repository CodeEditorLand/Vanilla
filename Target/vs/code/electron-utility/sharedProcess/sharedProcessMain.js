import{hostname as ie,release as ne}from"os";import"../../../base/parts/sandbox/node/electronTypes.js";import{toErrorMessage as oe}from"../../../base/common/errorMessage.js";import{onUnexpectedError as A,setUnexpectedErrorHandler as se}from"../../../base/common/errors.js";import{combinedDisposable as ae,Disposable as ce,toDisposable as R}from"../../../base/common/lifecycle.js";import{Schemas as P}from"../../../base/common/network.js";import{URI as F}from"../../../base/common/uri.js";import{Emitter as me}from"../../../base/common/event.js";import{ProxyChannel as c,StaticRouter as b}from"../../../base/parts/ipc/common/ipc.js";import{Server as le,once as fe}from"../../../base/parts/ipc/node/ipc.mp.js";import{CodeCacheCleaner as pe}from"./contrib/codeCacheCleaner.js";import{LanguagePackCachedDataCleaner as Se}from"./contrib/languagePackCachedDataCleaner.js";import{LocalizationsUpdater as ve}from"./contrib/localizationsUpdater.js";import{LogsDataCleaner as de}from"./contrib/logsDataCleaner.js";import{UnusedWorkspaceStorageDataCleaner as ge}from"./contrib/storageDataCleaner.js";import{IChecksumService as N}from"../../../platform/checksum/common/checksumService.js";import{ChecksumService as ue}from"../../../platform/checksum/node/checksumService.js";import{IConfigurationService as he}from"../../../platform/configuration/common/configuration.js";import{ConfigurationService as ye}from"../../../platform/configuration/common/configurationService.js";import{IDiagnosticsService as H}from"../../../platform/diagnostics/common/diagnostics.js";import{DiagnosticsService as Ie}from"../../../platform/diagnostics/node/diagnosticsService.js";import{IDownloadService as Pe}from"../../../platform/download/common/download.js";import{DownloadService as Ce}from"../../../platform/download/common/downloadService.js";import{INativeEnvironmentService as we}from"../../../platform/environment/common/environment.js";import{GlobalExtensionEnablementService as De}from"../../../platform/extensionManagement/common/extensionEnablementService.js";import{ExtensionGalleryService as Ee}from"../../../platform/extensionManagement/common/extensionGalleryService.js";import{IExtensionGalleryService as Ue,IExtensionManagementService as xe,IExtensionTipsService as O,IGlobalExtensionEnablementService as Le}from"../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionSignatureVerificationService as Me,IExtensionSignatureVerificationService as Te}from"../../../platform/extensionManagement/node/extensionSignatureVerificationService.js";import{ExtensionManagementChannel as ke,ExtensionTipsChannel as _e}from"../../../platform/extensionManagement/common/extensionManagementIpc.js";import{ExtensionManagementService as Ae,INativeServerExtensionManagementService as Re}from"../../../platform/extensionManagement/node/extensionManagementService.js";import{IExtensionRecommendationNotificationService as Fe}from"../../../platform/extensionRecommendations/common/extensionRecommendations.js";import{IFileService as be}from"../../../platform/files/common/files.js";import{FileService as Ne}from"../../../platform/files/common/fileService.js";import{DiskFileSystemProvider as He}from"../../../platform/files/node/diskFileSystemProvider.js";import{SyncDescriptor as t}from"../../../platform/instantiation/common/descriptors.js";import{IInstantiationService as Oe}from"../../../platform/instantiation/common/instantiation.js";import{InstantiationService as We}from"../../../platform/instantiation/common/instantiationService.js";import{ServiceCollection as Ve}from"../../../platform/instantiation/common/serviceCollection.js";import{ILanguagePackService as W}from"../../../platform/languagePacks/common/languagePacks.js";import{NativeLanguagePackService as ze}from"../../../platform/languagePacks/node/languagePacks.js";import{ConsoleLogger as qe,ILoggerService as Ge,ILogService as U}from"../../../platform/log/common/log.js";import{LoggerChannelClient as je}from"../../../platform/log/common/logIpc.js";import Ke from"../../../platform/product/common/product.js";import{IProductService as Be}from"../../../platform/product/common/productService.js";import{IRequestService as Je}from"../../../platform/request/common/request.js";import"../../../platform/sharedProcess/node/sharedProcess.js";import{IStorageService as Ye}from"../../../platform/storage/common/storage.js";import{resolveCommonProperties as $e}from"../../../platform/telemetry/common/commonProperties.js";import{ICustomEndpointTelemetryService as V,ITelemetryService as z}from"../../../platform/telemetry/common/telemetry.js";import{TelemetryAppenderChannel as Qe}from"../../../platform/telemetry/common/telemetryIpc.js";import{TelemetryLogAppender as Xe}from"../../../platform/telemetry/common/telemetryLogAppender.js";import{TelemetryService as Ze}from"../../../platform/telemetry/common/telemetryService.js";import{supportsTelemetry as er,NullAppender as rr,NullTelemetryService as tr,getPiiPathsFromEnvironment as ir,isInternalTelemetry as nr,isLoggingOnly as or}from"../../../platform/telemetry/common/telemetryUtils.js";import{CustomEndpointTelemetryService as sr}from"../../../platform/telemetry/node/customEndpointTelemetryService.js";import{ExtensionStorageService as ar,IExtensionStorageService as cr}from"../../../platform/extensionManagement/common/extensionStorage.js";import{IgnoredExtensionsManagementService as mr,IIgnoredExtensionsManagementService as lr}from"../../../platform/userDataSync/common/ignoredExtensions.js";import{IUserDataSyncLocalStoreService as fr,IUserDataSyncLogService as pr,IUserDataSyncEnablementService as Sr,IUserDataSyncService as q,IUserDataSyncStoreManagementService as G,IUserDataSyncStoreService as vr,IUserDataSyncUtilService as dr,registerConfiguration as gr,IUserDataSyncResourceProviderService as j}from"../../../platform/userDataSync/common/userDataSync.js";import{IUserDataSyncAccountService as K,UserDataSyncAccountService as ur}from"../../../platform/userDataSync/common/userDataSyncAccount.js";import{UserDataSyncLocalStoreService as hr}from"../../../platform/userDataSync/common/userDataSyncLocalStoreService.js";import{UserDataSyncAccountServiceChannel as yr,UserDataSyncStoreManagementServiceChannel as Ir}from"../../../platform/userDataSync/common/userDataSyncIpc.js";import{UserDataSyncLogService as Pr}from"../../../platform/userDataSync/common/userDataSyncLog.js";import{IUserDataSyncMachinesService as B,UserDataSyncMachinesService as Cr}from"../../../platform/userDataSync/common/userDataSyncMachines.js";import{UserDataSyncEnablementService as wr}from"../../../platform/userDataSync/common/userDataSyncEnablementService.js";import{UserDataSyncService as Dr}from"../../../platform/userDataSync/common/userDataSyncService.js";import{UserDataSyncServiceChannel as Er}from"../../../platform/userDataSync/common/userDataSyncServiceIpc.js";import{UserDataSyncStoreManagementService as Ur,UserDataSyncStoreService as xr}from"../../../platform/userDataSync/common/userDataSyncStoreService.js";import{IUserDataProfileStorageService as Lr}from"../../../platform/userDataProfile/common/userDataProfileStorageService.js";import{SharedProcessUserDataProfileStorageService as Mr}from"../../../platform/userDataProfile/node/userDataProfileStorageService.js";import{ActiveWindowManager as Tr}from"../../../platform/windows/node/windowTracker.js";import{ISignService as kr}from"../../../platform/sign/common/sign.js";import{SignService as _r}from"../../../platform/sign/node/signService.js";import{ISharedTunnelsService as Ar}from"../../../platform/tunnel/common/tunnel.js";import{SharedTunnelsService as Rr}from"../../../platform/tunnel/node/tunnelService.js";import{ipcSharedProcessTunnelChannelName as Fr,ISharedProcessTunnelService as J}from"../../../platform/remote/common/sharedProcessTunnelService.js";import{SharedProcessTunnelService as br}from"../../../platform/tunnel/node/sharedProcessTunnelService.js";import{IUriIdentityService as Nr}from"../../../platform/uriIdentity/common/uriIdentity.js";import{UriIdentityService as Hr}from"../../../platform/uriIdentity/common/uriIdentityService.js";import{isLinux as Y}from"../../../base/common/platform.js";import{FileUserDataProvider as Or}from"../../../platform/userData/common/fileUserDataProvider.js";import{DiskFileSystemProviderClient as Wr,LOCAL_FILE_SYSTEM_CHANNEL_NAME as Vr}from"../../../platform/files/common/diskFileSystemProviderClient.js";import{InspectProfilingService as zr}from"../../../platform/profiling/node/profilingService.js";import{IV8InspectProfilingService as $}from"../../../platform/profiling/common/profiling.js";import{IExtensionsScannerService as qr}from"../../../platform/extensionManagement/common/extensionsScannerService.js";import{ExtensionsScannerService as Gr}from"../../../platform/extensionManagement/node/extensionsScannerService.js";import{IUserDataProfilesService as x}from"../../../platform/userDataProfile/common/userDataProfile.js";import{IExtensionsProfileScannerService as jr}from"../../../platform/extensionManagement/common/extensionsProfileScannerService.js";import{PolicyChannelClient as Kr}from"../../../platform/policy/common/policyIpc.js";import{IPolicyService as Br,NullPolicyService as Jr}from"../../../platform/policy/common/policy.js";import{UserDataProfilesService as Yr}from"../../../platform/userDataProfile/common/userDataProfileIpc.js";import{OneDataSystemAppender as $r}from"../../../platform/telemetry/node/1dsAppender.js";import{UserDataProfilesCleaner as Qr}from"./contrib/userDataProfilesCleaner.js";import{IRemoteTunnelService as Q}from"../../../platform/remoteTunnel/common/remoteTunnel.js";import{UserDataSyncResourceProviderService as Xr}from"../../../platform/userDataSync/common/userDataSyncResourceProvider.js";import{ExtensionsContributions as Zr}from"./contrib/extensions.js";import{localize as X}from"../../../nls.js";import{LogService as et}from"../../../platform/log/common/logService.js";import{ISharedProcessLifecycleService as rt,SharedProcessLifecycleService as tt}from"../../../platform/lifecycle/node/sharedProcessLifecycleService.js";import{RemoteTunnelService as it}from"../../../platform/remoteTunnel/node/remoteTunnelService.js";import{ExtensionsProfileScannerService as nt}from"../../../platform/extensionManagement/node/extensionsProfileScannerService.js";import{ExtensionRecommendationNotificationServiceChannelClient as ot}from"../../../platform/extensionRecommendations/common/extensionRecommendationsIpc.js";import{INativeHostService as st}from"../../../platform/native/common/native.js";import{NativeHostService as at}from"../../../platform/native/common/nativeHostService.js";import{UserDataAutoSyncService as ct}from"../../../platform/userDataSync/node/userDataAutoSyncService.js";import{ExtensionTipsService as mt}from"../../../platform/extensionManagement/node/extensionTipsService.js";import{IMainProcessService as lt,MainProcessService as ft}from"../../../platform/ipc/common/mainProcessService.js";import{RemoteStorageService as pt}from"../../../platform/storage/common/storageService.js";import{IRemoteSocketFactoryService as St,RemoteSocketFactoryService as vt}from"../../../platform/remote/common/remoteSocketFactoryService.js";import{RemoteConnectionType as dt}from"../../../platform/remote/common/remoteAuthorityResolver.js";import{nodeSocketFactory as gt}from"../../../platform/remote/node/nodeSocketFactory.js";import{NativeEnvironmentService as ut}from"../../../platform/environment/node/environmentService.js";import{SharedProcessRawConnection as ht,SharedProcessLifecycle as L}from"../../../platform/sharedProcess/common/sharedProcess.js";import{getOSReleaseInfo as yt}from"../../../base/node/osReleaseInfo.js";import{getDesktopEnvironment as It}from"../../../base/common/desktopEnvironmentInfo.js";import{getCodeDisplayProtocol as Pt,getDisplayProtocol as Ct}from"../../../base/node/osDisplayProtocolInfo.js";import{RequestService as wt}from"../../../platform/request/electron-utility/requestService.js";class Dt extends ce{constructor(e){super();this.configuration=e;this.registerListeners()}server=this._register(new le(this));lifecycleService=void 0;onDidWindowConnectRaw=this._register(new me);registerListeners(){let e=!1;const r=()=>{e||(e=!0,this.lifecycleService?.fireOnWillShutdown(),this.dispose())};process.once("exit",r),fe(process.parentPort,L.exit,r)}async init(){const e=await this.initServices();gr(),e.invokeFunction(r=>{const n=r.get(U),i=r.get(z),m=r.get(x);n.trace("sharedProcess configuration",JSON.stringify(this.configuration)),this.initChannels(r),this.registerErrorHandler(n),this.reportProfilesInfo(i,m),this._register(m.onDidChangeProfiles(()=>this.reportProfilesInfo(i,m))),this.reportClientOSInfo(i,n)}),this._register(ae(e.createInstance(pe,this.configuration.codeCachePath),e.createInstance(Se),e.createInstance(ge),e.createInstance(de),e.createInstance(ve),e.createInstance(Zr),e.createInstance(Qr)))}async initServices(){const e=new Ve,r={_serviceBrand:void 0,...Ke};e.set(Be,r);const n=new b(s=>s==="main"),i=new ft(this.server,n);e.set(lt,i);const m=this.configuration.policiesData?new Kr(this.configuration.policiesData,i.getChannel("policy")):new Jr;e.set(Br,m);const o=new ut(this.configuration.args,r);e.set(we,o);const l=new je(void 0,this.configuration.logLevel,o.logsHome,this.configuration.loggers.map(s=>({...s,resource:F.revive(s.resource)})),i.getChannel("logger"));e.set(Ge,l);const u=this._register(l.createLogger("sharedprocess",{name:X("sharedLog","Shared")})),C=this._register(new qe(u.getLevel())),a=this._register(new et(u,[C]));e.set(U,a),this.lifecycleService=this._register(new tt(a)),e.set(rt,this.lifecycleService);const f=this._register(new Ne(a));e.set(be,f);const w=this._register(new He(a));f.registerProvider(P.file,w);const h=new Hr(f);e.set(Nr,h);const p=this._register(new Yr(this.configuration.profiles.all,F.revive(this.configuration.profiles.home).with({scheme:o.userRoamingDataHome.scheme}),i.getChannel("userDataProfiles")));e.set(x,p);const D=this._register(new Or(P.file,this._register(new Wr(i.getChannel(Vr),{pathCaseSensitive:Y})),P.vscodeUserData,p,h,a));f.registerProvider(P.vscodeUserData,D);const S=this._register(new ye(p.defaultProfile.settingsResource,f,m,a));e.set(he,S);const E=new pt(void 0,{defaultProfile:p.defaultProfile,currentProfile:p.defaultProfile},i,o);e.set(Ye,E),this._register(R(()=>E.flush())),await Promise.all([S.initialize(),E.initialize()]);const Z=l.createLogger("network-shared",{name:X("network-shared","Network (Shared)"),hidden:!0}),M=new wt(Z,S,o,a);e.set(Je,M),e.set(N,new t(ue,void 0,!1)),e.set($,new t(zr,void 0,!1));const T=new at(-1,i);e.set(st,T),e.set(Pe,new t(Ce,void 0,!0));const ee=this._register(new Tr(T)),re=new b(s=>ee.getActiveClientId().then(I=>s===I));e.set(Fe,new ot(this.server.getChannel("extensionRecommendationNotification",re)));let y;const v=[],k=nr(r,S);if(er(r,o)){const s=new Xe(a,l,o,r);if(v.push(s),!or(r,o)&&r.aiConfig?.ariaKey){const I=new $r(M,k,"monacoworkbench",null,r.aiConfig.ariaKey);this._register(R(()=>I.flush())),v.push(I)}y=new Ze({appenders:v,commonProperties:$e(ne(),ie(),process.arch,r.commit,r.version,this.configuration.machineId,this.configuration.sqmId,this.configuration.devDeviceId,k),sendErrorTelemetry:!0,piiPaths:ir(o)},S,r)}else{y=tr;const s=rr;v.push(s)}this.server.registerChannel("telemetryAppender",new Qe(v)),e.set(z,y);const te=new sr(S,y,a,l,o,r);e.set(V,te),e.set(jr,new t(nt,void 0,!0)),e.set(qr,new t(Gr,void 0,!0)),e.set(Te,new t(Me,void 0,!0)),e.set(Re,new t(Ae,void 0,!0)),e.set(Ue,new t(Ee,void 0,!0)),e.set(O,new t(mt,void 0,!1)),e.set(W,new t(ze,void 0,!1)),e.set(H,new t(Ie,void 0,!1)),e.set(K,new t(ur,void 0,!0)),e.set(pr,new t(Pr,void 0,!0)),e.set(dr,c.toService(this.server.getChannel("userDataSyncUtil",s=>s.ctx!=="main"))),e.set(Le,new t(De,void 0,!1)),e.set(lr,new t(mr,void 0,!0)),e.set(cr,new t(ar)),e.set(G,new t(Ur,void 0,!0)),e.set(vr,new t(xr,void 0,!0)),e.set(B,new t(Cr,void 0,!0)),e.set(fr,new t(hr,void 0,!1)),e.set(Sr,new t(wr,void 0,!0)),e.set(q,new t(Dr,void 0,!1)),e.set(Lr,new t(Mr,void 0,!0)),e.set(j,new t(Xr,void 0,!0)),e.set(kr,new t(_r,void 0,!1));const _=new vt;return e.set(St,_),_.register(dt.WebSocket,gt),e.set(Ar,new t(Rr)),e.set(J,new t(br)),e.set(Q,new t(it)),new We(e)}initChannels(e){const r=new ke(e.get(xe),()=>null);this.server.registerChannel("extensions",r);const n=c.fromService(e.get(W),this._store);this.server.registerChannel("languagePacks",n);const i=c.fromService(e.get(H),this._store);this.server.registerChannel("diagnostics",i);const m=new _e(e.get(O));this.server.registerChannel("extensionTipsService",m);const o=c.fromService(e.get(N),this._store);this.server.registerChannel("checksum",o);const l=c.fromService(e.get($),this._store);this.server.registerChannel("v8InspectProfiling",l);const u=c.fromService(e.get(B),this._store);this.server.registerChannel("userDataSyncMachines",u);const C=c.fromService(e.get(V),this._store);this.server.registerChannel("customEndpointTelemetry",C);const a=new yr(e.get(K));this.server.registerChannel("userDataSyncAccount",a);const f=new Ir(e.get(G));this.server.registerChannel("userDataSyncStoreManagement",f);const w=new Er(e.get(q),e.get(x),e.get(U));this.server.registerChannel("userDataSync",w);const h=this._register(e.get(Oe).createInstance(ct));this.server.registerChannel("userDataAutoSync",c.fromService(h,this._store)),this.server.registerChannel("IUserDataSyncResourceProviderService",c.fromService(e.get(j),this._store));const p=c.fromService(e.get(J),this._store);this.server.registerChannel(Fr,p);const D=c.fromService(e.get(Q),this._store);this.server.registerChannel("remoteTunnel",D)}registerErrorHandler(e){process.on("uncaughtException",r=>A(r)),process.on("unhandledRejection",r=>A(r)),se(r=>{const n=oe(r,!0);n&&e.error(`[uncaught exception in sharedProcess]: ${n}`)})}reportProfilesInfo(e,r){e.publicLog2("profilesInfo",{count:r.profiles.length})}async reportClientOSInfo(e,r){if(Y){const[n,i]=await Promise.all([yt(r.error.bind(r)),Ct(r.error.bind(r))]),m=It(),o=Pt(i,this.configuration.args["ozone-platform"]);n&&e.publicLog2("clientPlatformInfo",{platformId:n.id,platformVersionId:n.version_id,platformIdLike:n.id_like,desktopEnvironment:m,displayProtocol:i,codeDisplayProtocol:o})}}handledClientConnection(e){if(e.data!==ht.response)return!1;const r=e.ports.at(0);return r?(this.onDidWindowConnectRaw.fire(r),!0):!1}}async function Et(d){try{const g=new Dt(d);process.parentPort.postMessage(L.ipcReady),await g.init(),process.parentPort.postMessage(L.initDone)}catch(g){process.parentPort.postMessage({error:g.toString()})}}const Ut=setTimeout(()=>{process.parentPort.postMessage({warning:"[SharedProcess] did not receive configuration within 30s..."})},3e4);process.parentPort.once("message",d=>{clearTimeout(Ut),Et(d.data)});export{Et as main};
