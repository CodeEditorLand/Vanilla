import s from"assert";import{Barrier as T}from"../../../../base/common/async.js";import{VSBuffer as R}from"../../../../base/common/buffer.js";import"../../../../base/common/cancellation.js";import{Emitter as b,Event as C}from"../../../../base/common/event.js";import{isEqual as I,joinPath as U}from"../../../../base/common/resources.js";import"../../../../base/common/uri.js";import{runWithFakedTimers as d}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as D}from"../../../../base/test/common/utils.js";import{IFileService as w}from"../../../files/common/files.js";import{IStorageService as h,StorageScope as m}from"../../../storage/common/storage.js";import{IUserDataProfilesService as o}from"../../../userDataProfile/common/userDataProfile.js";import{AbstractSynchroniser as B}from"../../common/abstractSynchronizer.js";import{Change as v,IUserDataSyncStoreService as P,MergeState as p,SyncResource as l,SyncStatus as n,USER_DATA_SYNC_SCHEME as E}from"../../common/userDataSync.js";import{UserDataSyncClient as q,UserDataSyncTestServer as M}from"./userDataSyncClient.js";class u extends B{syncBarrier=new T;syncResult={hasConflicts:!1,hasError:!1};onDoSyncCall=this._register(new b);failWhenGettingLatestRemoteUserData=!1;version=1;cancelled=!1;localResource=U(this.environmentService.userRoamingDataHome,"testResource.json");getMachineId(){return this.currentMachineIdPromise}getLastSyncResource(){return this.lastSyncResource}getLatestRemoteUserData(t,r){if(this.failWhenGettingLatestRemoteUserData)throw new Error;return super.getLatestRemoteUserData(t,r)}async doSync(t,r,e,a){return this.cancelled=!1,this.onDoSyncCall.fire(),await this.syncBarrier.wait(),this.cancelled?n.Idle:super.doSync(t,r,e,a)}async generateSyncPreview(t){if(this.syncResult.hasError)throw new Error("failed");let r=null;try{r=await this.fileService.readFile(this.localResource)}catch{}return[{baseResource:this.localResource.with({scheme:E,authority:"base"}),baseContent:null,localResource:this.localResource,localContent:r?r.value.toString():null,remoteResource:this.localResource.with({scheme:E,authority:"remote"}),remoteContent:t.syncData?t.syncData.content:null,previewResource:this.localResource.with({scheme:E,authority:"preview"}),ref:t.ref,localChange:v.Modified,remoteChange:v.Modified,acceptedResource:this.localResource.with({scheme:E,authority:"accepted"})}]}async hasRemoteChanged(t){return!0}async getMergeResult(t,r){return{content:t.ref,localChange:v.Modified,remoteChange:v.Modified,hasConflicts:this.syncResult.hasConflicts}}async getAcceptResult(t,r,e,a){if(I(r,t.localResource))return{content:t.localContent,localChange:v.None,remoteChange:t.localContent===null?v.Deleted:v.Modified};if(I(r,t.remoteResource))return{content:t.remoteContent,localChange:t.remoteContent===null?v.Deleted:v.Modified,remoteChange:v.None};if(I(r,t.previewResource))return e===void 0?{content:t.ref,localChange:v.Modified,remoteChange:v.Modified}:{content:e,localChange:e===null?t.localContent!==null?v.Deleted:v.None:v.Modified,remoteChange:e===null?t.remoteContent!==null?v.Deleted:v.None:v.Modified};throw new Error(`Invalid Resource: ${r.toString()}`)}async applyResult(t,r,e,a){e[0][1].localChange===v.Deleted&&await this.fileService.del(this.localResource),(e[0][1].localChange===v.Added||e[0][1].localChange===v.Modified)&&await this.fileService.writeFile(this.localResource,R.fromString(e[0][1].content)),e[0][1].remoteChange===v.Deleted&&await this.applyRef(null,t.ref),(e[0][1].remoteChange===v.Added||e[0][1].remoteChange===v.Modified)&&await this.applyRef(e[0][1].content,t.ref)}async applyRef(t,r){const e=await this.updateRemoteUserData(t===null?"":t,r);await this.updateLastSyncUserData(e)}async stop(){this.cancelled=!0,this.syncBarrier.open(),super.stop()}testTriggerLocalChange(){this.triggerLocalChange()}onDidTriggerLocalChangeCall=this._register(new b);async doTriggerLocalChange(){await super.doTriggerLocalChange(),this.onDidTriggerLocalChangeCall.fire()}hasLocalData(){throw new Error("not implemented")}async resolveContent(t){return null}}suite("TestSynchronizer - Auto Sync",()=>{const y=new M;let t;teardown(async()=>{await t.instantiationService.get(P).clear()});const r=D();setup(async()=>{t=r.add(new q(y)),await t.setUp()}),test("status is syncing",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0)),a=[];r.add(e.onDidChangeStatus(c=>a.push(c)));const i=C.toPromise(e.onDoSyncCall.event);e.sync(await t.getResourceManifest()),await i,s.deepStrictEqual(a,[n.Syncing]),s.deepStrictEqual(e.status,n.Syncing),e.stop()})}),test("status is set correctly when sync is finished",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open();const a=[];r.add(e.onDidChangeStatus(i=>a.push(i))),await e.sync(await t.getResourceManifest()),s.deepStrictEqual(a,[n.Syncing,n.Idle]),s.deepStrictEqual(e.status,n.Idle)})}),test("status is set correctly when sync has errors",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasError:!0,hasConflicts:!1},e.syncBarrier.open();const a=[];r.add(e.onDidChangeStatus(i=>a.push(i)));try{await e.sync(await t.getResourceManifest()),s.fail("Should fail")}catch{s.deepStrictEqual(a,[n.Syncing,n.Idle]),s.deepStrictEqual(e.status,n.Idle)}})}),test("status is set to hasConflicts when asked to sync if there are conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),f(e.conflicts.conflicts,[e.localResource])})}),test("sync should not run if syncing already",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0)),a=C.toPromise(e.onDoSyncCall.event);e.sync(await t.getResourceManifest()),await a;const i=[];r.add(e.onDidChangeStatus(c=>i.push(c))),await e.sync(await t.getResourceManifest()),s.deepStrictEqual(i,[]),s.deepStrictEqual(e.status,n.Syncing),await e.stop()})}),test("sync should not run if there are conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=[];r.add(e.onDidChangeStatus(i=>a.push(i))),await e.sync(await t.getResourceManifest()),s.deepStrictEqual(a,[]),s.deepStrictEqual(e.status,n.HasConflicts)})}),test("accept preview during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),await e.accept(e.conflicts.conflicts[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle);const a=t.instantiationService.get(w);s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,(await a.readFile(e.localResource)).value.toString())})}),test("accept remote during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=t.instantiationService.get(w),i=(await e.getRemoteUserData(null)).syncData?.content;await a.writeFile(e.localResource,R.fromString("conflict")),e.syncResult={hasConflicts:!0,hasError:!1},await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),await e.accept(e.conflicts.conflicts[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,i),s.strictEqual((await a.readFile(e.localResource)).value.toString(),i)})}),test("accept local during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=t.instantiationService.get(w),i="conflict";await a.writeFile(e.localResource,R.fromString(i)),e.syncResult={hasConflicts:!0,hasError:!1},await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),await e.accept(e.conflicts.conflicts[0].localResource),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,i),s.strictEqual((await a.readFile(e.localResource)).value.toString(),i)})}),test("accept new content during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=t.instantiationService.get(w);await a.writeFile(e.localResource,R.fromString("conflict")),e.syncResult={hasConflicts:!0,hasError:!1},await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts);const c="newContent";await e.accept(e.conflicts.conflicts[0].previewResource,c),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,c),s.strictEqual((await a.readFile(e.localResource)).value.toString(),c)})}),test("accept delete during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=t.instantiationService.get(w);await a.writeFile(e.localResource,R.fromString("conflict")),e.syncResult={hasConflicts:!0,hasError:!1},await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),await e.accept(e.conflicts.conflicts[0].previewResource,null),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,""),s.ok(!await a.exists(e.localResource))})}),test("accept deleted local during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=t.instantiationService.get(w);await a.del(e.localResource),e.syncResult={hasConflicts:!0,hasError:!1},await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),await e.accept(e.conflicts.conflicts[0].localResource),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,""),s.ok(!await a.exists(e.localResource))})}),test("accept deleted remote during conflicts",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open();const a=t.instantiationService.get(w);await a.writeFile(e.localResource,R.fromString("some content")),e.syncResult={hasConflicts:!0,hasError:!1},await e.sync(await t.getResourceManifest()),s.deepStrictEqual(e.status,n.HasConflicts),await e.accept(e.conflicts.conflicts[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),f(e.conflicts.conflicts,[]),await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual((await e.getRemoteUserData(null)).syncData,null),s.ok(!await a.exists(e.localResource))})}),test("request latest data on precondition failure",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest()),e.syncBarrier=new T;const a=e.onDoSyncCall.event(async()=>{a.dispose(),await e.applyRef(c,c),y.reset(),e.syncBarrier.open()}),c=(await t.getResourceManifest())[e.resource];await e.sync(await t.getResourceManifest()),s.deepStrictEqual(y.requests,[{type:"POST",url:`${y.url}/v1/resource/${e.resource}`,headers:{"If-Match":c}},{type:"GET",url:`${y.url}/v1/resource/${e.resource}/latest`,headers:{}},{type:"POST",url:`${y.url}/v1/resource/${e.resource}`,headers:{"If-Match":`${parseInt(c)+1}`}}])})}),test("no requests are made to server when local change is triggered",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncBarrier.open(),await e.sync(await t.getResourceManifest()),y.reset();const a=C.toPromise(e.onDidTriggerLocalChangeCall.event);e.testTriggerLocalChange(),await a,s.deepStrictEqual(y.requests,[])})}),test("status is reset when getting latest remote data fails",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.failWhenGettingLatestRemoteUserData=!0;try{await e.sync(await t.getResourceManifest()),s.fail("Should throw an error")}catch{}s.strictEqual(e.status,n.Idle)})})}),suite("TestSynchronizer - Manual Sync",()=>{const y=new M;let t;teardown(async()=>{await t.instantiationService.get(P).clear()});const r=D();setup(async()=>{t=r.add(new q(y)),await t.setUp()}),test("preview",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();const a=await e.preview(await t.getResourceManifest(),{});s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),f(e.conflicts.conflicts,[])})}),test("preview -> merge",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("preview -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("preview -> merge -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].localResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("preview -> merge -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=await t.getResourceManifest();let i=await e.preview(a,{});i=await e.merge(i.resourcePreviews[0].previewResource),i=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(i,null),f(e.conflicts.conflicts,[]);const c=a[e.resource];s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,c),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),c)})}),test("preview -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=await t.getResourceManifest(),i=a[e.resource];let c=await e.preview(a,{});c=await e.accept(c.resourcePreviews[0].previewResource),c=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(c,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,i),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),i)})}),test("preview -> merge -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=(await t.instantiationService.get(w).readFile(e.localResource)).value.toString();let i=await e.preview(await t.getResourceManifest(),{});i=await e.merge(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].localResource),i=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(i,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,a),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),a)})}),test("preivew -> merge -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("preivew -> merge -> discard -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("preivew -> accept -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("preivew -> accept -> discard -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("preivew -> accept -> discard -> merge",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.merge(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("preivew -> merge -> accept -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].remoteResource),a=await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("preivew -> merge -> discard -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=(await t.instantiationService.get(w).readFile(e.localResource)).value.toString();let i=await e.preview(await t.getResourceManifest(),{});i=await e.merge(i.resourcePreviews[0].previewResource),i=await e.discard(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].localResource),i=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(i,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,a),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),a)})}),test("preivew -> accept -> discard -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=(await t.instantiationService.get(w).readFile(e.localResource)).value.toString();let i=await e.preview(await t.getResourceManifest(),{});i=await e.merge(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].remoteResource),i=await e.discard(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].localResource),i=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(i,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,a),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),a)})}),test("preivew -> accept -> discard -> merge -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=await t.getResourceManifest(),i=a[e.resource];let c=await e.preview(a,{});c=await e.merge(c.resourcePreviews[0].previewResource),c=await e.accept(c.resourcePreviews[0].remoteResource),c=await e.discard(c.resourcePreviews[0].previewResource),c=await e.merge(c.resourcePreviews[0].localResource),c=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(c,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,i),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),i)})}),test("conflicts: preview",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();const a=await e.preview(await t.getResourceManifest(),{});s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),f(e.conflicts.conflicts,[])})}),test("conflicts: preview -> merge",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.HasConflicts),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Conflict),f(e.conflicts.conflicts,[a.resourcePreviews[0].localResource])})}),test("conflicts: preview -> merge -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();const a=await e.preview(await t.getResourceManifest(),{});await e.merge(a.resourcePreviews[0].previewResource),await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("conflicts: preview -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});await e.merge(a.resourcePreviews[0].previewResource);const i=await e.resolveContent(a.resourcePreviews[0].previewResource);a=await e.accept(a.resourcePreviews[0].previewResource,i),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.deepStrictEqual(e.conflicts.conflicts,[])})}),test("conflicts: preview -> merge -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest()),e.syncResult={hasConflicts:!0,hasError:!1};const a=await t.getResourceManifest(),i=a[e.resource];let c=await e.preview(a,{});await e.merge(c.resourcePreviews[0].previewResource),c=await e.accept(c.resourcePreviews[0].previewResource),c=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(c,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,i),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),i)})}),test("conflicts: preview -> accept 2",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});const i=await e.resolveContent(a.resourcePreviews[0].previewResource);a=await e.accept(a.resourcePreviews[0].previewResource,i),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),f(e.conflicts.conflicts,[])})}),test("conflicts: preview -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest()),e.syncResult={hasConflicts:!0,hasError:!1};const a=await t.getResourceManifest(),i=a[e.resource];let c=await e.preview(a,{});c=await e.accept(c.resourcePreviews[0].previewResource),c=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(c,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,i),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),i)})}),test("conflicts: preivew -> merge -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("conflicts: preivew -> merge -> discard -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("conflicts: preivew -> accept -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("conflicts: preivew -> accept -> discard -> accept",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Accepted),f(e.conflicts.conflicts,[])})}),test("conflicts: preivew -> accept -> discard -> merge",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.accept(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.merge(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.HasConflicts),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Conflict),f(e.conflicts.conflicts,[a.resourcePreviews[0].localResource])})}),test("conflicts: preivew -> merge -> discard -> merge",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!0,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.discard(a.resourcePreviews[0].previewResource),a=await e.merge(a.resourcePreviews[0].remoteResource),s.deepStrictEqual(e.status,n.HasConflicts),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Conflict),f(e.conflicts.conflicts,[a.resourcePreviews[0].localResource])})}),test("conflicts: preivew -> merge -> accept -> discard",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open();let a=await e.preview(await t.getResourceManifest(),{});a=await e.merge(a.resourcePreviews[0].previewResource),a=await e.accept(a.resourcePreviews[0].remoteResource),a=await e.discard(a.resourcePreviews[0].previewResource),s.deepStrictEqual(e.status,n.Syncing),S(a.resourcePreviews,[e.localResource]),s.strictEqual(a.resourcePreviews[0].mergeState,p.Preview),f(e.conflicts.conflicts,[])})}),test("conflicts: preivew -> merge -> discard -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=(await t.instantiationService.get(w).readFile(e.localResource)).value.toString();let i=await e.preview(await t.getResourceManifest(),{});i=await e.merge(i.resourcePreviews[0].previewResource),i=await e.discard(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].localResource),i=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(i,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,a),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),a)})}),test("conflicts: preivew -> accept -> discard -> accept -> apply",async()=>{await d({},async()=>{const e=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));e.syncResult={hasConflicts:!1,hasError:!1},e.syncBarrier.open(),await e.sync(await t.getResourceManifest());const a=(await t.instantiationService.get(w).readFile(e.localResource)).value.toString();let i=await e.preview(await t.getResourceManifest(),{});i=await e.merge(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].remoteResource),i=await e.discard(i.resourcePreviews[0].previewResource),i=await e.accept(i.resourcePreviews[0].localResource),i=await e.apply(!1),s.deepStrictEqual(e.status,n.Idle),s.strictEqual(i,null),f(e.conflicts.conflicts,[]),s.strictEqual((await e.getRemoteUserData(null)).syncData?.content,a),s.strictEqual((await t.instantiationService.get(w).readFile(e.localResource)).value.toString(),a)})}),test("remote is accepted if last sync state does not exists in server",async()=>{await d({},async()=>{const e=t.instantiationService.get(w),a=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));a.syncBarrier.open(),await a.sync(await t.getResourceManifest());const i=r.add(new q(y));await i.setUp();const c=r.add(i.instantiationService.createInstance(u,{syncResource:l.Settings,profile:i.instantiationService.get(o).defaultProfile},void 0));c.syncBarrier.open();const g=await i.getResourceManifest(),O=g[a.resource];await c.sync(g),await e.del(a.getLastSyncResource()),await a.sync(await t.getResourceManifest()),s.deepStrictEqual(a.status,n.Idle),s.strictEqual((await t.instantiationService.get(w).readFile(a.localResource)).value.toString(),O)})})}),suite("TestSynchronizer - Last Sync Data",()=>{const y=new M;let t;teardown(async()=>{await t.instantiationService.get(P).clear()});const r=D();setup(async()=>{t=r.add(new q(y)),await t.setUp()}),test("last sync data is null when not synced before",async()=>{await d({},async()=>{const a=await r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0)).getLastSyncUserData();s.strictEqual(a,null)})}),test("last sync data is set after sync",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=t.instantiationService.get(w),i=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));i.syncBarrier.open(),await i.sync(await t.getResourceManifest());const c=await i.getMachineId(),g=await i.getLastSyncUserData();s.deepStrictEqual(e.get("settings.lastSyncUserData",m.APPLICATION),JSON.stringify({ref:"1"})),s.deepStrictEqual(JSON.parse((await a.readFile(i.getLastSyncResource())).value.toString()),{ref:"1",syncData:{version:1,machineId:c,content:"0"}}),s.deepStrictEqual(g,{ref:"1",syncData:{content:"0",machineId:c,version:1}})})}),test("last sync data is read from server after sync if last sync resource is deleted",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=t.instantiationService.get(w),i=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));i.syncBarrier.open(),await i.sync(await t.getResourceManifest());const c=await i.getMachineId();await a.del(i.getLastSyncResource());const g=await i.getLastSyncUserData();s.deepStrictEqual(e.get("settings.lastSyncUserData",m.APPLICATION),JSON.stringify({ref:"1"})),s.deepStrictEqual(g,{ref:"1",syncData:{content:"0",machineId:c,version:1}})})}),test("last sync data is read from server after sync and sync data is invalid",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=t.instantiationService.get(w),i=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));i.syncBarrier.open(),await i.sync(await t.getResourceManifest());const c=await i.getMachineId();await a.writeFile(i.getLastSyncResource(),R.fromString(JSON.stringify({ref:"1",version:1,content:JSON.stringify({content:"0",machineId:c,version:1}),additionalData:{foo:"bar"}}))),y.reset();const g=await i.getLastSyncUserData();s.deepStrictEqual(e.get("settings.lastSyncUserData",m.APPLICATION),JSON.stringify({ref:"1"})),s.deepStrictEqual(g,{ref:"1",syncData:{content:"0",machineId:c,version:1}}),s.deepStrictEqual(y.requests,[{headers:{},type:"GET",url:"http://host:3000/v1/resource/settings/1"}])})}),test("last sync data is read from server after sync and stored sync data is tampered",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=t.instantiationService.get(w),i=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));i.syncBarrier.open(),await i.sync(await t.getResourceManifest());const c=await i.getMachineId();await a.writeFile(i.getLastSyncResource(),R.fromString(JSON.stringify({ref:"2",syncData:{content:"0",machineId:c,version:1}}))),y.reset();const g=await i.getLastSyncUserData();s.deepStrictEqual(e.get("settings.lastSyncUserData",m.APPLICATION),JSON.stringify({ref:"1"})),s.deepStrictEqual(g,{ref:"1",syncData:{content:"0",machineId:c,version:1}}),s.deepStrictEqual(y.requests,[{headers:{},type:"GET",url:"http://host:3000/v1/resource/settings/1"}])})}),test("reading last sync data: no requests are made to server when sync data is invalid",async()=>{await d({},async()=>{const e=t.instantiationService.get(w),a=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));a.syncBarrier.open(),await a.sync(await t.getResourceManifest());const i=await a.getMachineId();await e.writeFile(a.getLastSyncResource(),R.fromString(JSON.stringify({ref:"1",version:1,content:JSON.stringify({content:"0",machineId:i,version:1}),additionalData:{foo:"bar"}}))),await a.getLastSyncUserData(),y.reset(),await a.getLastSyncUserData(),s.deepStrictEqual(y.requests,[])})}),test("reading last sync data: no requests are made to server when sync data is null",async()=>{await d({},async()=>{const e=t.instantiationService.get(w),a=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));a.syncBarrier.open(),await a.sync(await t.getResourceManifest()),y.reset(),await e.writeFile(a.getLastSyncResource(),R.fromString(JSON.stringify({ref:"1",syncData:null}))),await a.getLastSyncUserData(),s.deepStrictEqual(y.requests,[])})}),test("last sync data is null after sync if last sync state is deleted",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));a.syncBarrier.open(),await a.sync(await t.getResourceManifest()),e.remove("settings.lastSyncUserData",m.APPLICATION);const i=await a.getLastSyncUserData();s.strictEqual(i,null)})}),test("last sync data is null after sync if last sync content is deleted everywhere",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=t.instantiationService.get(w),i=t.instantiationService.get(P),c=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0));c.syncBarrier.open(),await c.sync(await t.getResourceManifest()),await a.del(c.getLastSyncResource()),await i.deleteResource(c.syncResource.syncResource,null);const g=await c.getLastSyncUserData();s.deepStrictEqual(e.get("settings.lastSyncUserData",m.APPLICATION),JSON.stringify({ref:"1"})),s.strictEqual(g,null)})}),test("last sync data is migrated",async()=>{await d({},async()=>{const e=t.instantiationService.get(h),a=t.instantiationService.get(w),i=r.add(t.instantiationService.createInstance(u,{syncResource:l.Settings,profile:t.instantiationService.get(o).defaultProfile},void 0)),c=await i.getMachineId();await a.writeFile(i.getLastSyncResource(),R.fromString(JSON.stringify({ref:"1",version:1,content:JSON.stringify({content:"0",machineId:c,version:1}),additionalData:{foo:"bar"}})));const g=await i.getLastSyncUserData();s.deepStrictEqual(e.get("settings.lastSyncUserData",m.APPLICATION),JSON.stringify({ref:"1",version:1,additionalData:{foo:"bar"}})),s.deepStrictEqual(g,{ref:"1",version:1,syncData:{content:"0",machineId:c,version:1},additionalData:{foo:"bar"}})})})});function f(y,t){s.deepStrictEqual(y.map(({localResource:r})=>r.toString()),t.map(r=>r.toString()))}function S(y,t){s.deepStrictEqual(y.map(({localResource:r})=>r.toString()),t.map(r=>r.toString()))}
