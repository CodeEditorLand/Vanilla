import a from"assert";import{VSBuffer as T}from"../../../../base/common/buffer.js";import{runWithFakedTimers as l}from"../../../../base/test/common/timeTravelScheduler.js";import{IEnvironmentService as U}from"../../../environment/common/environment.js";import{IFileService as I}from"../../../files/common/files.js";import{IStorageService as y,StorageScope as w,StorageTarget as E}from"../../../storage/common/storage.js";import{IUserDataProfilesService as R}from"../../../userDataProfile/common/userDataProfile.js";import"../../common/globalStateSync.js";import{IUserDataSyncStoreService as h,SyncResource as C,SyncStatus as g}from"../../common/userDataSync.js";import{IUserDataProfileStorageService as b}from"../../../userDataProfile/common/userDataProfileStorageService.js";import{UserDataSyncClient as q,UserDataSyncTestServer as L}from"./userDataSyncClient.js";import{ensureNoDisposablesAreLeakedInTestSuite as O}from"../../../../base/test/common/utils.js";suite("GlobalStateSync",()=>{const n=new L;let e,o,s;teardown(async()=>{await e.instantiationService.get(h).clear()});const p=O();setup(async()=>{e=p.add(new q(n)),await e.setUp(!0),s=e.getSynchronizer(C.GlobalState),o=p.add(new q(n)),await o.setUp(!0)}),test("when global state does not exist",()=>l({useFakeTimers:!0},async()=>{a.deepStrictEqual(await s.getLastSyncUserData(),null);let t=await e.getResourceManifest();n.reset(),await s.sync(t),a.deepStrictEqual(n.requests,[{type:"GET",url:`${n.url}/v1/resource/${s.resource}/latest`,headers:{}}]);const r=await s.getLastSyncUserData(),i=await s.getRemoteUserData(null);a.deepStrictEqual(r.ref,i.ref),a.deepStrictEqual(r.syncData,i.syncData),a.strictEqual(r.syncData,null),t=await e.getResourceManifest(),n.reset(),await s.sync(t),a.deepStrictEqual(n.requests,[]),t=await e.getResourceManifest(),n.reset(),await s.sync(t),a.deepStrictEqual(n.requests,[])})),test("when global state is created after first sync",()=>l({useFakeTimers:!0},async()=>{await s.sync(await e.getResourceManifest()),c("a","value1",e);let t=await s.getLastSyncUserData();const r=await e.getResourceManifest();n.reset(),await s.sync(r),a.deepStrictEqual(n.requests,[{type:"POST",url:`${n.url}/v1/resource/${s.resource}`,headers:{"If-Match":t?.ref}}]),t=await s.getLastSyncUserData();const i=await s.getRemoteUserData(null);a.deepStrictEqual(t.ref,i.ref),a.deepStrictEqual(t.syncData,i.syncData),a.deepStrictEqual(JSON.parse(t.syncData.content).storage,{a:{version:1,value:"value1"}})})),test("first time sync - outgoing to server (no state)",()=>l({useFakeTimers:!0},async()=>{c("a","value1",e),F("b","value1",e),await m(e),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]);const{content:t}=await e.read(s.resource);a.ok(t!==null);const r=v(t);a.deepStrictEqual(r.storage,{"globalState.argv.locale":{version:1,value:"en"},a:{version:1,value:"value1"}})})),test("first time sync - incoming from server (no state)",()=>l({useFakeTimers:!0},async()=>{c("a","value1",o),await m(o),await o.sync(),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]),a.strictEqual(u("a",e),"value1"),a.strictEqual(await D(e),"en")})),test("first time sync when storage exists",()=>l({useFakeTimers:!0},async()=>{c("a","value1",o),await o.sync(),c("b","value2",e),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]),a.strictEqual(u("a",e),"value1"),a.strictEqual(u("b",e),"value2");const{content:t}=await e.read(s.resource);a.ok(t!==null);const r=v(t);a.deepStrictEqual(r.storage,{a:{version:1,value:"value1"},b:{version:1,value:"value2"}})})),test("first time sync when storage exists - has conflicts",()=>l({useFakeTimers:!0},async()=>{c("a","value1",o),await o.sync(),c("a","value2",o),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]),a.strictEqual(u("a",e),"value1");const{content:t}=await e.read(s.resource);a.ok(t!==null);const r=v(t);a.deepStrictEqual(r.storage,{a:{version:1,value:"value1"}})})),test("sync adding a storage value",()=>l({useFakeTimers:!0},async()=>{c("a","value1",e),await s.sync(await e.getResourceManifest()),c("b","value2",e),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]),a.strictEqual(u("a",e),"value1"),a.strictEqual(u("b",e),"value2");const{content:t}=await e.read(s.resource);a.ok(t!==null);const r=v(t);a.deepStrictEqual(r.storage,{a:{version:1,value:"value1"},b:{version:1,value:"value2"}})})),test("sync updating a storage value",()=>l({useFakeTimers:!0},async()=>{c("a","value1",e),await s.sync(await e.getResourceManifest()),c("a","value2",e),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]),a.strictEqual(u("a",e),"value2");const{content:t}=await e.read(s.resource);a.ok(t!==null);const r=v(t);a.deepStrictEqual(r.storage,{a:{version:1,value:"value2"}})})),test("sync removing a storage value",()=>l({useFakeTimers:!0},async()=>{c("a","value1",e),c("b","value2",e),await s.sync(await e.getResourceManifest()),M("b",e),await s.sync(await e.getResourceManifest()),a.strictEqual(s.status,g.Idle),a.deepStrictEqual(s.conflicts.conflicts,[]),a.strictEqual(u("a",e),"value1"),a.strictEqual(u("b",e),void 0);const{content:t}=await e.read(s.resource);a.ok(t!==null);const r=v(t);a.deepStrictEqual(r.storage,{a:{version:1,value:"value1"}})})),test("sync profile state",()=>l({useFakeTimers:!0},async()=>{const t=p.add(new q(n));await t.setUp(!0);const r=await t.instantiationService.get(R).createNamedProfile("profile1");await m(t),await k("a","value1",r,e),await t.sync(),await e.sync();const i=e.instantiationService.get(R).profiles.find(P=>P.id===r.id),S=await e.instantiationService.get(b).readStorageData(i);a.strictEqual(S.get("a")?.value,"value1"),a.strictEqual(await D(e),"en");const{content:d}=await e.read(s.resource,"1");a.ok(d!==null);const f=v(d);a.deepStrictEqual(f.storage,{a:{version:1,value:"value1"}})}));function v(t){const r=JSON.parse(t);return JSON.parse(r.content)}async function m(t){const r=t.instantiationService.get(I),i=t.instantiationService.get(U);await r.writeFile(i.argvResource,T.fromString(JSON.stringify({locale:"en"})))}function c(t,r,i,S){i.instantiationService.get(y).store(t,r,w.PROFILE,E.USER)}async function k(t,r,i,S){const d=S.instantiationService.get(b),f=new Map;f.set(t,r),await d.updateStorageData(i,f,E.USER)}function F(t,r,i){i.instantiationService.get(y).store(t,r,w.PROFILE,E.MACHINE)}function M(t,r){r.instantiationService.get(y).remove(t,w.PROFILE)}function u(t,r){return r.instantiationService.get(y).get(t,w.PROFILE)}async function D(t){const r=t.instantiationService.get(I),i=t.instantiationService.get(U),S=await r.readFile(i.argvResource);return JSON.parse(S.value.toString()).locale}});
