import e from"assert";import{join as r}from"../../../../base/common/path.js";import{isLinux as p,isWindows as P}from"../../../../base/common/platform.js";import{extUriBiasedIgnorePathCase as c}from"../../../../base/common/resources.js";import{URI as s}from"../../../../base/common/uri.js";import{Workspace as q,WorkspaceFolder as a}from"../../common/workspace.js";import{toWorkspaceFolders as u}from"../../../workspaces/common/workspaces.js";suite("Workspace",()=>{const i=P?"c:\\src":"/src",m=P?"c:\\abc":"/abc",o=s.file(r(i,"test")),E=s.file(r(i,"main")),f=s.file(r(i,"test1")),h=s.file(r(i,"test2")),w=s.file(r(i,"test3")),F=s.file(r(m,"test1")),x=s.file(r(m,"test3")),l=s.file(r(i,"test.code-workspace"));test("getFolder returns the folder with given uri",()=>{const t=new a({uri:o,name:"",index:2}),n=new q("",[new a({uri:E,name:"",index:0}),t,new a({uri:s.file("/src/code"),name:"",index:2})],!1,null,()=>!p).getFolder(t.uri);e.strictEqual(n,t)}),test("getFolder returns the folder if the uri is sub",()=>{const t=new a({uri:o,name:"",index:0}),n=new q("",[t,new a({uri:E,name:"",index:1}),new a({uri:s.file("/src/code"),name:"",index:2})],!1,null,()=>!p).getFolder(s.file(r(i,"test/a")));e.strictEqual(n,t)}),test("getFolder returns the closest folder if the uri is sub",()=>{const t=new a({uri:o,name:"",index:2}),n=new q("",[new a({uri:E,name:"",index:0}),new a({uri:s.file("/src/code"),name:"",index:1}),t],!1,null,()=>!p).getFolder(s.file(r(i,"test/a")));e.strictEqual(n,t)}),test("getFolder returns the folder even if the uri has query path",()=>{const t=new a({uri:o,name:"",index:2}),n=new q("",[new a({uri:E,name:"",index:0}),new a({uri:s.file("/src/code"),name:"",index:1}),t],!1,null,()=>!p).getFolder(s.file(r(i,"test/a")).with({query:"somequery"}));e.strictEqual(n,t)}),test("getFolder returns null if the uri is not sub",()=>{const d=new q("",[new a({uri:o,name:"",index:0}),new a({uri:s.file("/src/code"),name:"",index:1})],!1,null,()=>!p).getFolder(s.file(r(i,"main/a")));e.strictEqual(d,null)}),test("toWorkspaceFolders with single absolute folder",()=>{const t=u([{path:"/src/test"}],l,c);e.strictEqual(t.length,1),e.strictEqual(t[0].uri.fsPath,o.fsPath),e.strictEqual(t[0].raw.path,"/src/test"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test")}),test("toWorkspaceFolders with single relative folder",()=>{const t=u([{path:"./test"}],l,c);e.strictEqual(t.length,1),e.strictEqual(t[0].uri.fsPath,o.fsPath),e.strictEqual(t[0].raw.path,"./test"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test")}),test("toWorkspaceFolders with single absolute folder with name",()=>{const t=u([{path:"/src/test",name:"hello"}],l,c);e.strictEqual(t.length,1),e.strictEqual(t[0].uri.fsPath,o.fsPath),e.strictEqual(t[0].raw.path,"/src/test"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"hello")}),test("toWorkspaceFolders with multiple unique absolute folders",()=>{const t=u([{path:"/src/test2"},{path:"/src/test3"},{path:"/src/test1"}],l,c);e.strictEqual(t.length,3),e.strictEqual(t[0].uri.fsPath,h.fsPath),e.strictEqual(t[0].raw.path,"/src/test2"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test2"),e.strictEqual(t[1].uri.fsPath,w.fsPath),e.strictEqual(t[1].raw.path,"/src/test3"),e.strictEqual(t[1].index,1),e.strictEqual(t[1].name,"test3"),e.strictEqual(t[2].uri.fsPath,f.fsPath),e.strictEqual(t[2].raw.path,"/src/test1"),e.strictEqual(t[2].index,2),e.strictEqual(t[2].name,"test1")}),test("toWorkspaceFolders with multiple unique absolute folders with names",()=>{const t=u([{path:"/src/test2"},{path:"/src/test3",name:"noName"},{path:"/src/test1"}],l,c);e.strictEqual(t.length,3),e.strictEqual(t[0].uri.fsPath,h.fsPath),e.strictEqual(t[0].raw.path,"/src/test2"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test2"),e.strictEqual(t[1].uri.fsPath,w.fsPath),e.strictEqual(t[1].raw.path,"/src/test3"),e.strictEqual(t[1].index,1),e.strictEqual(t[1].name,"noName"),e.strictEqual(t[2].uri.fsPath,f.fsPath),e.strictEqual(t[2].raw.path,"/src/test1"),e.strictEqual(t[2].index,2),e.strictEqual(t[2].name,"test1")}),test("toWorkspaceFolders with multiple unique absolute and relative folders",()=>{const t=u([{path:"/src/test2"},{path:"/abc/test3",name:"noName"},{path:"./test1"}],l,c);e.strictEqual(t.length,3),e.strictEqual(t[0].uri.fsPath,h.fsPath),e.strictEqual(t[0].raw.path,"/src/test2"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test2"),e.strictEqual(t[1].uri.fsPath,x.fsPath),e.strictEqual(t[1].raw.path,"/abc/test3"),e.strictEqual(t[1].index,1),e.strictEqual(t[1].name,"noName"),e.strictEqual(t[2].uri.fsPath,f.fsPath),e.strictEqual(t[2].raw.path,"./test1"),e.strictEqual(t[2].index,2),e.strictEqual(t[2].name,"test1")}),test("toWorkspaceFolders with multiple absolute folders with duplicates",()=>{const t=u([{path:"/src/test2"},{path:"/src/test2",name:"noName"},{path:"/src/test1"}],l,c);e.strictEqual(t.length,2),e.strictEqual(t[0].uri.fsPath,h.fsPath),e.strictEqual(t[0].raw.path,"/src/test2"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test2"),e.strictEqual(t[1].uri.fsPath,f.fsPath),e.strictEqual(t[1].raw.path,"/src/test1"),e.strictEqual(t[1].index,1),e.strictEqual(t[1].name,"test1")}),test("toWorkspaceFolders with multiple absolute and relative folders with duplicates",()=>{const t=u([{path:"/src/test2"},{path:"/src/test3",name:"noName"},{path:"./test3"},{path:"/abc/test1"}],l,c);e.strictEqual(t.length,3),e.strictEqual(t[0].uri.fsPath,h.fsPath),e.strictEqual(t[0].raw.path,"/src/test2"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test2"),e.strictEqual(t[1].uri.fsPath,w.fsPath),e.strictEqual(t[1].raw.path,"/src/test3"),e.strictEqual(t[1].index,1),e.strictEqual(t[1].name,"noName"),e.strictEqual(t[2].uri.fsPath,F.fsPath),e.strictEqual(t[2].raw.path,"/abc/test1"),e.strictEqual(t[2].index,2),e.strictEqual(t[2].name,"test1")}),test("toWorkspaceFolders with multiple absolute and relative folders with invalid paths",()=>{const t=u([{path:"/src/test2"},{path:"",name:"noName"},{path:"./test3"},{path:"/abc/test1"}],l,c);e.strictEqual(t.length,3),e.strictEqual(t[0].uri.fsPath,h.fsPath),e.strictEqual(t[0].raw.path,"/src/test2"),e.strictEqual(t[0].index,0),e.strictEqual(t[0].name,"test2"),e.strictEqual(t[1].uri.fsPath,w.fsPath),e.strictEqual(t[1].raw.path,"./test3"),e.strictEqual(t[1].index,1),e.strictEqual(t[1].name,"test3"),e.strictEqual(t[2].uri.fsPath,F.fsPath),e.strictEqual(t[2].raw.path,"/abc/test1"),e.strictEqual(t[2].index,2),e.strictEqual(t[2].name,"test1")})});
