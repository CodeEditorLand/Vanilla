import e from"assert";import{ResourceMap as k}from"../../../../base/common/map.js";import{join as u}from"../../../../base/common/path.js";import{URI as r}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as p}from"../../../../base/test/common/utils.js";import{Configuration as C,ConfigurationChangeEvent as w,ConfigurationModel as a,ConfigurationModelParser as c,mergeChanges as b}from"../../common/configurationModels.js";import{Extensions as E,ConfigurationScope as m}from"../../common/configurationRegistry.js";import{NullLogService as o}from"../../../log/common/log.js";import{Registry as S}from"../../../registry/common/platform.js";import{WorkspaceFolder as g}from"../../../workspace/common/workspace.js";import{Workspace as v}from"../../../workspace/test/common/testWorkspace.js";suite("ConfigurationModelParser",()=>{p(),suiteSetup(()=>{S.as(E.Configuration).registerConfiguration({id:"ConfigurationModelParserTest",type:"object",properties:{"ConfigurationModelParserTest.windowSetting":{type:"string",default:"isSet"}}})}),test("parse configuration model with single override identifier",()=>{const t=new c("",new o);t.parse(JSON.stringify({"[x]":{a:1}})),e.deepStrictEqual(JSON.stringify(t.configurationModel.overrides),JSON.stringify([{identifiers:["x"],keys:["a"],contents:{a:1}}]))}),test("parse configuration model with multiple override identifiers",()=>{const t=new c("",new o);t.parse(JSON.stringify({"[x][y]":{a:1}})),e.deepStrictEqual(JSON.stringify(t.configurationModel.overrides),JSON.stringify([{identifiers:["x","y"],keys:["a"],contents:{a:1}}]))}),test("parse configuration model with multiple duplicate override identifiers",()=>{const t=new c("",new o);t.parse(JSON.stringify({"[x][y][x][z]":{a:1}})),e.deepStrictEqual(JSON.stringify(t.configurationModel.overrides),JSON.stringify([{identifiers:["x","y","z"],keys:["a"],contents:{a:1}}]))}),test("parse configuration model with exclude option",()=>{const t=new c("",new o);t.parse(JSON.stringify({a:1,b:2}),{exclude:["a"]}),e.strictEqual(t.configurationModel.getValue("a"),void 0),e.strictEqual(t.configurationModel.getValue("b"),2)}),test("parse configuration model with exclude option even included",()=>{const t=new c("",new o);t.parse(JSON.stringify({a:1,b:2}),{exclude:["a"],include:["a"]}),e.strictEqual(t.configurationModel.getValue("a"),void 0),e.strictEqual(t.configurationModel.getValue("b"),2)}),test("parse configuration model with scopes filter",()=>{const t=new c("",new o);t.parse(JSON.stringify({"ConfigurationModelParserTest.windowSetting":"1"}),{scopes:[m.APPLICATION]}),e.strictEqual(t.configurationModel.getValue("ConfigurationModelParserTest.windowSetting"),void 0)}),test("parse configuration model with include option",()=>{const t=new c("",new o);t.parse(JSON.stringify({"ConfigurationModelParserTest.windowSetting":"1"}),{include:["ConfigurationModelParserTest.windowSetting"],scopes:[m.APPLICATION]}),e.strictEqual(t.configurationModel.getValue("ConfigurationModelParserTest.windowSetting"),"1")}),test("parse configuration model with invalid setting key",()=>{const t=new c("",new o);t.parse(JSON.stringify({a:null,"a.b.c":{c:1}})),e.strictEqual(t.configurationModel.getValue("a"),null),e.strictEqual(t.configurationModel.getValue("a.b"),void 0),e.strictEqual(t.configurationModel.getValue("a.b.c"),void 0)})}),suite("ConfigurationModel",()=>{p(),test("setValue for a key that has no sections and not defined",()=>{const t=new a({a:{b:1}},["a.b"],[],void 0,new o);t.setValue("f",1),e.deepStrictEqual(t.contents,{a:{b:1},f:1}),e.deepStrictEqual(t.keys,["a.b","f"])}),test("setValue for a key that has no sections and defined",()=>{const t=new a({a:{b:1},f:1},["a.b","f"],[],void 0,new o);t.setValue("f",3),e.deepStrictEqual(t.contents,{a:{b:1},f:3}),e.deepStrictEqual(t.keys,["a.b","f"])}),test("setValue for a key that has sections and not defined",()=>{const t=new a({a:{b:1},f:1},["a.b","f"],[],void 0,new o);t.setValue("b.c",1);const f={};f.a={b:1},f.f=1,f.b=Object.create(null),f.b.c=1,e.deepStrictEqual(t.contents,f),e.deepStrictEqual(t.keys,["a.b","f","b.c"])}),test("setValue for a key that has sections and defined",()=>{const t=new a({a:{b:1},b:{c:1},f:1},["a.b","b.c","f"],[],void 0,new o);t.setValue("b.c",3),e.deepStrictEqual(t.contents,{a:{b:1},b:{c:3},f:1}),e.deepStrictEqual(t.keys,["a.b","b.c","f"])}),test("setValue for a key that has sections and sub section not defined",()=>{const t=new a({a:{b:1},f:1},["a.b","f"],[],void 0,new o);t.setValue("a.c",1),e.deepStrictEqual(t.contents,{a:{b:1,c:1},f:1}),e.deepStrictEqual(t.keys,["a.b","f","a.c"])}),test("setValue for a key that has sections and sub section defined",()=>{const t=new a({a:{b:1,c:1},f:1},["a.b","a.c","f"],[],void 0,new o);t.setValue("a.c",3),e.deepStrictEqual(t.contents,{a:{b:1,c:3},f:1}),e.deepStrictEqual(t.keys,["a.b","a.c","f"])}),test("setValue for a key that has sections and last section is added",()=>{const t=new a({a:{b:{}},f:1},["a.b","f"],[],void 0,new o);t.setValue("a.b.c",1),e.deepStrictEqual(t.contents,{a:{b:{c:1}},f:1}),e.deepStrictEqual(t.keys,["a.b","f","a.b.c"])}),test("removeValue: remove a non existing key",()=>{const t=new a({a:{b:2}},["a.b"],[],void 0,new o);t.removeValue("a.b.c"),e.deepStrictEqual(t.contents,{a:{b:2}}),e.deepStrictEqual(t.keys,["a.b"])}),test("removeValue: remove a single segmented key",()=>{const t=new a({a:1},["a"],[],void 0,new o);t.removeValue("a"),e.deepStrictEqual(t.contents,{}),e.deepStrictEqual(t.keys,[])}),test("removeValue: remove a multi segmented key",()=>{const t=new a({a:{b:1}},["a.b"],[],void 0,new o);t.removeValue("a.b"),e.deepStrictEqual(t.contents,{}),e.deepStrictEqual(t.keys,[])}),test("get overriding configuration model for an existing identifier",()=>{const t=new a({a:{b:1},f:1},[],[{identifiers:["c"],contents:{a:{d:1}},keys:["a"]}],[],new o);e.deepStrictEqual(t.override("c").contents,{a:{b:1,d:1},f:1})}),test("get overriding configuration model for an identifier that does not exist",()=>{const t=new a({a:{b:1},f:1},[],[{identifiers:["c"],contents:{a:{d:1}},keys:["a"]}],[],new o);e.deepStrictEqual(t.override("xyz").contents,{a:{b:1},f:1})}),test("get overriding configuration when one of the keys does not exist in base",()=>{const t=new a({a:{b:1},f:1},[],[{identifiers:["c"],contents:{a:{d:1},g:1},keys:["a","g"]}],[],new o);e.deepStrictEqual(t.override("c").contents,{a:{b:1,d:1},f:1,g:1})}),test("get overriding configuration when one of the key in base is not of object type",()=>{const t=new a({a:{b:1},f:1},[],[{identifiers:["c"],contents:{a:{d:1},f:{g:1}},keys:["a","f"]}],[],new o);e.deepStrictEqual(t.override("c").contents,{a:{b:1,d:1},f:{g:1}})}),test("get overriding configuration when one of the key in overriding contents is not of object type",()=>{const t=new a({a:{b:1},f:{g:1}},[],[{identifiers:["c"],contents:{a:{d:1},f:1},keys:["a","f"]}],[],new o);e.deepStrictEqual(t.override("c").contents,{a:{b:1,d:1},f:1})}),test("get overriding configuration if the value of overriding identifier is not object",()=>{const t=new a({a:{b:1},f:{g:1}},[],[{identifiers:["c"],contents:"abc",keys:[]}],[],new o);e.deepStrictEqual(t.override("c").contents,{a:{b:1},f:{g:1}})}),test("get overriding configuration if the value of overriding identifier is an empty object",()=>{const t=new a({a:{b:1},f:{g:1}},[],[{identifiers:["c"],contents:{},keys:[]}],[],new o);e.deepStrictEqual(t.override("c").contents,{a:{b:1},f:{g:1}})}),test("simple merge",()=>{const t=new a({a:1,b:2},["a","b"],[],void 0,new o),f=new a({a:3,c:4},["a","c"],[],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.contents,{a:3,b:2,c:4}),e.deepStrictEqual(n.keys,["a","b","c"])}),test("recursive merge",()=>{const t=new a({a:{b:1}},["a.b"],[],void 0,new o),f=new a({a:{b:2}},["a.b"],[],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.contents,{a:{b:2}}),e.deepStrictEqual(n.getValue("a"),{b:2}),e.deepStrictEqual(n.keys,["a.b"])}),test("simple merge overrides",()=>{const t=new a({a:{b:1}},["a.b"],[{identifiers:["c"],contents:{a:2},keys:["a"]}],void 0,new o),f=new a({a:{b:2}},["a.b"],[{identifiers:["c"],contents:{b:2},keys:["b"]}],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.contents,{a:{b:2}}),e.deepStrictEqual(n.overrides,[{identifiers:["c"],contents:{a:2,b:2},keys:["a","b"]}]),e.deepStrictEqual(n.override("c").contents,{a:2,b:2}),e.deepStrictEqual(n.keys,["a.b"])}),test("recursive merge overrides",()=>{const t=new a({a:{b:1},f:1},["a.b","f"],[{identifiers:["c"],contents:{a:{d:1}},keys:["a"]}],void 0,new o),f=new a({a:{b:2}},["a.b"],[{identifiers:["c"],contents:{a:{e:2}},keys:["a"]}],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.contents,{a:{b:2},f:1}),e.deepStrictEqual(n.overrides,[{identifiers:["c"],contents:{a:{d:1,e:2}},keys:["a"]}]),e.deepStrictEqual(n.override("c").contents,{a:{b:2,d:1,e:2},f:1}),e.deepStrictEqual(n.keys,["a.b","f"])}),test("Test contents while getting an existing property",()=>{let t=new a({a:1},[],[],void 0,new o);e.deepStrictEqual(t.getValue("a"),1),t=new a({a:{b:1}},[],[],void 0,new o),e.deepStrictEqual(t.getValue("a"),{b:1})}),test("Test contents are undefined for non existing properties",()=>{const t=new a({awesome:!0},[],[],void 0,new o);e.deepStrictEqual(t.getValue("unknownproperty"),void 0)}),test("Test override gives all content merged with overrides",()=>{const t=new a({a:1,c:1},[],[{identifiers:["b"],contents:{a:2},keys:["a"]}],void 0,new o);e.deepStrictEqual(t.override("b").contents,{a:2,c:1})}),test("Test override when an override has multiple identifiers",()=>{const t=new a({a:1,c:1},["a","c"],[{identifiers:["x","y"],contents:{a:2},keys:["a"]}],void 0,new o);let f=t.override("x");e.deepStrictEqual(f.contents,{a:2,c:1}),e.deepStrictEqual(f.keys,["a","c"]),e.deepStrictEqual(t.getKeysForOverrideIdentifier("x"),["a"]),f=t.override("y"),e.deepStrictEqual(f.contents,{a:2,c:1}),e.deepStrictEqual(f.keys,["a","c"]),e.deepStrictEqual(t.getKeysForOverrideIdentifier("y"),["a"])}),test("Test override when an identifier is defined in multiple overrides",()=>{const t=new a({a:1,c:1},["a","c"],[{identifiers:["x"],contents:{a:3,b:1},keys:["a","b"]},{identifiers:["x","y"],contents:{a:2},keys:["a"]}],void 0,new o),f=t.override("x");e.deepStrictEqual(f.contents,{a:3,c:1,b:1}),e.deepStrictEqual(f.keys,["a","c"]),e.deepStrictEqual(t.getKeysForOverrideIdentifier("x"),["a","b"])}),test("Test merge when configuration models have multiple identifiers",()=>{const t=new a({a:1,c:1},["a","c"],[{identifiers:["y"],contents:{c:1},keys:["c"]},{identifiers:["x","y"],contents:{a:2},keys:["a"]}],void 0,new o),f=new a({a:2,b:1},["a","b"],[{identifiers:["x"],contents:{a:3,b:2},keys:["a","b"]},{identifiers:["x","y"],contents:{b:3},keys:["b"]}],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.contents,{a:2,c:1,b:1}),e.deepStrictEqual(n.keys,["a","c","b"]),e.deepStrictEqual(n.overrides,[{identifiers:["y"],contents:{c:1},keys:["c"]},{identifiers:["x","y"],contents:{a:2,b:3},keys:["a","b"]},{identifiers:["x"],contents:{a:3,b:2},keys:["a","b"]}])}),test("inspect when raw is same",()=>{const t=new a({a:1,c:1},["a","c"],[{identifiers:["x","y"],contents:{a:2,b:1},keys:["a"]}],void 0,new o);e.deepStrictEqual(t.inspect("a"),{value:1,override:void 0,merged:1,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(t.inspect("a","x"),{value:1,override:2,merged:2,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(t.inspect("b","x"),{value:void 0,override:1,merged:1,overrides:[{identifiers:["x","y"],value:1}]}),e.deepStrictEqual(t.inspect("d"),{value:void 0,override:void 0,merged:void 0,overrides:void 0})}),test("inspect when raw is not same",()=>{const t=new a({a:1,c:1},["a","c"],[{identifiers:["x","y"],contents:{a:2},keys:["a"]}],[{a:1,b:2,c:1,d:3,"[x][y]":{a:2,b:1}}],new o);e.deepStrictEqual(t.inspect("a"),{value:1,override:void 0,merged:1,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(t.inspect("a","x"),{value:1,override:2,merged:2,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(t.inspect("b","x"),{value:2,override:1,merged:1,overrides:[{identifiers:["x","y"],value:1}]}),e.deepStrictEqual(t.inspect("d"),{value:3,override:void 0,merged:3,overrides:void 0}),e.deepStrictEqual(t.inspect("e"),{value:void 0,override:void 0,merged:void 0,overrides:void 0})}),test("inspect in merged configuration when raw is same",()=>{const t=new a({a:1},["a"],[{identifiers:["x","y"],contents:{a:2},keys:["a"]}],void 0,new o),f=new a({b:3},["b"],[],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.inspect("a"),{value:1,override:void 0,merged:1,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(n.inspect("a","x"),{value:1,override:2,merged:2,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(n.inspect("b"),{value:3,override:void 0,merged:3,overrides:void 0}),e.deepStrictEqual(n.inspect("b","y"),{value:3,override:void 0,merged:3,overrides:void 0}),e.deepStrictEqual(n.inspect("c"),{value:void 0,override:void 0,merged:void 0,overrides:void 0})}),test("inspect in merged configuration when raw is not same for one model",()=>{const t=new a({a:1},["a"],[{identifiers:["x","y"],contents:{a:2},keys:["a"]}],[{a:1,b:2,c:3,"[x][y]":{a:2,b:4}}],new o),f=new a({b:3},["b"],[],void 0,new o),n=t.merge(f);e.deepStrictEqual(n.inspect("a"),{value:1,override:void 0,merged:1,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(n.inspect("a","x"),{value:1,override:2,merged:2,overrides:[{identifiers:["x","y"],value:2}]}),e.deepStrictEqual(n.inspect("b"),{value:3,override:void 0,merged:3,overrides:[{identifiers:["x","y"],value:4}]}),e.deepStrictEqual(n.inspect("b","y"),{value:3,override:4,merged:4,overrides:[{identifiers:["x","y"],value:4}]}),e.deepStrictEqual(n.inspect("c"),{value:3,override:void 0,merged:3,overrides:void 0})}),test("inspect: return all overrides",()=>{const t=new a({a:1,c:1},["a","c"],[{identifiers:["x","y"],contents:{a:2,b:1},keys:["a","b"]},{identifiers:["x"],contents:{a:3},keys:["a"]},{identifiers:["y"],contents:{b:3},keys:["b"]}],void 0,new o);e.deepStrictEqual(t.inspect("a").overrides,[{identifiers:["x","y"],value:2},{identifiers:["x"],value:3}])}),test("inspect when no overrides",()=>{const t=new a({a:1,c:1},["a","c"],[],void 0,new o);e.strictEqual(t.inspect("a").overrides,void 0)})}),suite("CustomConfigurationModel",()=>{p(),test("simple merge using models",()=>{const t=new c("base",new o);t.parse(JSON.stringify({a:1,b:2}));const f=new c("add",new o);f.parse(JSON.stringify({a:3,c:4}));const n=t.configurationModel.merge(f.configurationModel);e.deepStrictEqual(n.contents,{a:3,b:2,c:4})}),test("simple merge with an undefined contents",()=>{let t=new c("base",new o);t.parse(JSON.stringify({a:1,b:2}));let f=new c("add",new o),n=t.configurationModel.merge(f.configurationModel);e.deepStrictEqual(n.contents,{a:1,b:2}),t=new c("base",new o),f=new c("add",new o),f.parse(JSON.stringify({a:1,b:2})),n=t.configurationModel.merge(f.configurationModel),e.deepStrictEqual(n.contents,{a:1,b:2}),t=new c("base",new o),f=new c("add",new o),n=t.configurationModel.merge(f.configurationModel),e.deepStrictEqual(n.contents,{})}),test("Recursive merge using config models",()=>{const t=new c("base",new o);t.parse(JSON.stringify({a:{b:1}}));const f=new c("add",new o);f.parse(JSON.stringify({a:{b:2}}));const n=t.configurationModel.merge(f.configurationModel);e.deepStrictEqual(n.contents,{a:{b:2}})}),test("Test contents while getting an existing property",()=>{const t=new c("test",new o);t.parse(JSON.stringify({a:1})),e.deepStrictEqual(t.configurationModel.getValue("a"),1),t.parse(JSON.stringify({a:{b:1}})),e.deepStrictEqual(t.configurationModel.getValue("a"),{b:1})}),test("Test contents are undefined for non existing properties",()=>{const t=new c("test",new o);t.parse(JSON.stringify({awesome:!0})),e.deepStrictEqual(t.configurationModel.getValue("unknownproperty"),void 0)}),test("Test contents are undefined for undefined config",()=>{const t=new c("test",new o);e.deepStrictEqual(t.configurationModel.getValue("unknownproperty"),void 0)}),test("Test configWithOverrides gives all content merged with overrides",()=>{const t=new c("test",new o);t.parse(JSON.stringify({a:1,c:1,"[b]":{a:2}})),e.deepStrictEqual(t.configurationModel.override("b").contents,{a:2,c:1,"[b]":{a:2}})}),test("Test configWithOverrides gives empty contents",()=>{const t=new c("test",new o);e.deepStrictEqual(t.configurationModel.override("b").contents,{})}),test("Test update with empty data",()=>{const t=new c("test",new o);t.parse(""),e.deepStrictEqual(t.configurationModel.contents,Object.create(null)),e.deepStrictEqual(t.configurationModel.keys,[]),t.parse(null),e.deepStrictEqual(t.configurationModel.contents,Object.create(null)),e.deepStrictEqual(t.configurationModel.keys,[]),t.parse(void 0),e.deepStrictEqual(t.configurationModel.contents,Object.create(null)),e.deepStrictEqual(t.configurationModel.keys,[])}),test("Test empty property is not ignored",()=>{const t=new c("test",new o);t.parse(JSON.stringify({"":1})),e.strictEqual(JSON.stringify(t.configurationModel.contents),JSON.stringify({"":1})),e.deepStrictEqual(t.configurationModel.keys,[""])})});class l extends C{constructor(f,n,s,i){super(f,n,s,i,a.createEmptyModel(new o),a.createEmptyModel(new o),new k,a.createEmptyModel(new o),new k,new o)}}suite("Configuration",()=>{p(),test("Test inspect for overrideIdentifiers",()=>{const f=t({"[l1]":{a:1},"[l2]":{b:1}}),n=t({"[l3]":{a:2}}),s=t({"[l1]":{a:3},"[l4]":{a:3}}),i=new l(f,a.createEmptyModel(new o),n,s),{overrideIdentifiers:y}=i.inspect("a",{},void 0);e.deepStrictEqual(y,["l1","l3","l4"])}),test("Test update value",()=>{const f=new c("test",new o);f.parse(JSON.stringify({a:1}));const n=new l(f.configurationModel,a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));n.updateValue("a",2),e.strictEqual(n.getValue("a",{},void 0),2)}),test("Test update value after inspect",()=>{const f=new c("test",new o);f.parse(JSON.stringify({a:1}));const n=new l(f.configurationModel,a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));n.inspect("a",{},void 0),n.updateValue("a",2),e.strictEqual(n.getValue("a",{},void 0),2)}),test("Test compare and update default configuration",()=>{const f=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));f.updateDefaultConfiguration(d({"editor.lineNumbers":"on"}));const n=f.compareAndUpdateDefaultConfiguration(d({"editor.lineNumbers":"off","[markdown]":{"editor.wordWrap":"off"}}),["editor.lineNumbers","[markdown]"]);e.deepStrictEqual(n,{keys:["editor.lineNumbers","[markdown]"],overrides:[["markdown",["editor.wordWrap"]]]})}),test("Test compare and update application configuration",()=>{const f=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));f.updateApplicationConfiguration(d({"update.mode":"on"}));const n=f.compareAndUpdateApplicationConfiguration(d({"update.mode":"none","[typescript]":{"editor.wordWrap":"off"}}));e.deepStrictEqual(n,{keys:["[typescript]","update.mode"],overrides:[["typescript",["editor.wordWrap"]]]})}),test("Test compare and update user configuration",()=>{const f=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));f.updateLocalUserConfiguration(d({"editor.lineNumbers":"off","editor.fontSize":12,"[typescript]":{"editor.wordWrap":"off"}}));const n=f.compareAndUpdateLocalUserConfiguration(d({"editor.lineNumbers":"on","window.zoomLevel":1,"[typescript]":{"editor.wordWrap":"on","editor.insertSpaces":!1}}));e.deepStrictEqual(n,{keys:["window.zoomLevel","editor.lineNumbers","[typescript]","editor.fontSize"],overrides:[["typescript",["editor.insertSpaces","editor.wordWrap"]]]})}),test("Test compare and update workspace configuration",()=>{const f=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));f.updateWorkspaceConfiguration(d({"editor.lineNumbers":"off","editor.fontSize":12,"[typescript]":{"editor.wordWrap":"off"}}));const n=f.compareAndUpdateWorkspaceConfiguration(d({"editor.lineNumbers":"on","window.zoomLevel":1,"[typescript]":{"editor.wordWrap":"on","editor.insertSpaces":!1}}));e.deepStrictEqual(n,{keys:["window.zoomLevel","editor.lineNumbers","[typescript]","editor.fontSize"],overrides:[["typescript",["editor.insertSpaces","editor.wordWrap"]]]})}),test("Test compare and update workspace folder configuration",()=>{const f=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));f.updateFolderConfiguration(r.file("file1"),d({"editor.lineNumbers":"off","editor.fontSize":12,"[typescript]":{"editor.wordWrap":"off"}}));const n=f.compareAndUpdateFolderConfiguration(r.file("file1"),d({"editor.lineNumbers":"on","window.zoomLevel":1,"[typescript]":{"editor.wordWrap":"on","editor.insertSpaces":!1}}));e.deepStrictEqual(n,{keys:["window.zoomLevel","editor.lineNumbers","[typescript]","editor.fontSize"],overrides:[["typescript",["editor.insertSpaces","editor.wordWrap"]]]})}),test("Test compare and delete workspace folder configuration",()=>{const f=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));f.updateFolderConfiguration(r.file("file1"),d({"editor.lineNumbers":"off","editor.fontSize":12,"[typescript]":{"editor.wordWrap":"off"}}));const n=f.compareAndDeleteFolderConfiguration(r.file("file1"));e.deepStrictEqual(n,{keys:["editor.lineNumbers","editor.fontSize","[typescript]"],overrides:[["typescript",["editor.wordWrap"]]]})});function t(f){const n=new c("test",new o);return n.parse(JSON.stringify(f)),n.configurationModel}}),suite("ConfigurationChangeEvent",()=>{p(),test("changeEvent affecting keys with new configuration",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o)),f=t.compareAndUpdateLocalUserConfiguration(d({"window.zoomLevel":1,"workbench.editor.enablePreview":!1,"files.autoSave":"off"})),n=new w(f,void 0,t,void 0,new o);e.deepStrictEqual([...n.affectedKeys],["window.zoomLevel","workbench.editor.enablePreview","files.autoSave"]),e.ok(n.affectsConfiguration("window.zoomLevel")),e.ok(n.affectsConfiguration("window")),e.ok(n.affectsConfiguration("workbench.editor.enablePreview")),e.ok(n.affectsConfiguration("workbench.editor")),e.ok(n.affectsConfiguration("workbench")),e.ok(n.affectsConfiguration("files")),e.ok(n.affectsConfiguration("files.autoSave")),e.ok(!n.affectsConfiguration("files.exclude")),e.ok(!n.affectsConfiguration("[markdown]")),e.ok(!n.affectsConfiguration("editor"))}),test("changeEvent affecting keys when configuration changed",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));t.updateLocalUserConfiguration(d({"window.zoomLevel":2,"workbench.editor.enablePreview":!0,"files.autoSave":"off"}));const f=t.toData(),n=t.compareAndUpdateLocalUserConfiguration(d({"window.zoomLevel":1,"workbench.editor.enablePreview":!1,"files.autoSave":"off"})),s=new w(n,{data:f},t,void 0,new o);e.deepStrictEqual([...s.affectedKeys],["window.zoomLevel","workbench.editor.enablePreview"]),e.ok(s.affectsConfiguration("window.zoomLevel")),e.ok(s.affectsConfiguration("window")),e.ok(s.affectsConfiguration("workbench.editor.enablePreview")),e.ok(s.affectsConfiguration("workbench.editor")),e.ok(s.affectsConfiguration("workbench")),e.ok(!s.affectsConfiguration("files")),e.ok(!s.affectsConfiguration("[markdown]")),e.ok(!s.affectsConfiguration("editor"))}),test("changeEvent affecting overrides with new configuration",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o)),f=t.compareAndUpdateLocalUserConfiguration(d({"files.autoSave":"off","[markdown]":{"editor.wordWrap":"off"},"[typescript][jsonc]":{"editor.lineNumbers":"off"}})),n=new w(f,void 0,t,void 0,new o);e.deepStrictEqual([...n.affectedKeys],["files.autoSave","[markdown]","[typescript][jsonc]","editor.wordWrap","editor.lineNumbers"]),e.ok(n.affectsConfiguration("files")),e.ok(n.affectsConfiguration("files.autoSave")),e.ok(!n.affectsConfiguration("files.exclude")),e.ok(n.affectsConfiguration("[markdown]")),e.ok(!n.affectsConfiguration("[markdown].editor")),e.ok(!n.affectsConfiguration("[markdown].workbench")),e.ok(n.affectsConfiguration("editor")),e.ok(n.affectsConfiguration("editor.wordWrap")),e.ok(n.affectsConfiguration("editor.lineNumbers")),e.ok(n.affectsConfiguration("editor",{overrideIdentifier:"markdown"})),e.ok(n.affectsConfiguration("editor",{overrideIdentifier:"jsonc"})),e.ok(n.affectsConfiguration("editor",{overrideIdentifier:"typescript"})),e.ok(n.affectsConfiguration("editor.wordWrap",{overrideIdentifier:"markdown"})),e.ok(!n.affectsConfiguration("editor.wordWrap",{overrideIdentifier:"jsonc"})),e.ok(!n.affectsConfiguration("editor.wordWrap",{overrideIdentifier:"typescript"})),e.ok(!n.affectsConfiguration("editor.lineNumbers",{overrideIdentifier:"markdown"})),e.ok(n.affectsConfiguration("editor.lineNumbers",{overrideIdentifier:"typescript"})),e.ok(n.affectsConfiguration("editor.lineNumbers",{overrideIdentifier:"jsonc"})),e.ok(!n.affectsConfiguration("editor",{overrideIdentifier:"json"})),e.ok(!n.affectsConfiguration("editor.fontSize",{overrideIdentifier:"markdown"})),e.ok(!n.affectsConfiguration("editor.fontSize")),e.ok(!n.affectsConfiguration("window"))}),test("changeEvent affecting overrides when configuration changed",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));t.updateLocalUserConfiguration(d({"workbench.editor.enablePreview":!0,"[markdown]":{"editor.fontSize":12,"editor.wordWrap":"off"},"[css][scss]":{"editor.lineNumbers":"off","css.lint.emptyRules":"error"},"files.autoSave":"off"}));const f=t.toData(),n=t.compareAndUpdateLocalUserConfiguration(d({"files.autoSave":"off","[markdown]":{"editor.fontSize":13,"editor.wordWrap":"off"},"[css][scss]":{"editor.lineNumbers":"relative","css.lint.emptyRules":"error"},"window.zoomLevel":1})),s=new w(n,{data:f},t,void 0,new o);e.deepStrictEqual([...s.affectedKeys],["window.zoomLevel","[markdown]","[css][scss]","workbench.editor.enablePreview","editor.fontSize","editor.lineNumbers"]),e.ok(!s.affectsConfiguration("files")),e.ok(s.affectsConfiguration("[markdown]")),e.ok(!s.affectsConfiguration("[markdown].editor")),e.ok(!s.affectsConfiguration("[markdown].editor.fontSize")),e.ok(!s.affectsConfiguration("[markdown].editor.wordWrap")),e.ok(!s.affectsConfiguration("[markdown].workbench")),e.ok(s.affectsConfiguration("[css][scss]")),e.ok(s.affectsConfiguration("editor")),e.ok(s.affectsConfiguration("editor",{overrideIdentifier:"markdown"})),e.ok(s.affectsConfiguration("editor",{overrideIdentifier:"css"})),e.ok(s.affectsConfiguration("editor",{overrideIdentifier:"scss"})),e.ok(s.affectsConfiguration("editor.fontSize",{overrideIdentifier:"markdown"})),e.ok(!s.affectsConfiguration("editor.fontSize",{overrideIdentifier:"css"})),e.ok(!s.affectsConfiguration("editor.fontSize",{overrideIdentifier:"scss"})),e.ok(s.affectsConfiguration("editor.lineNumbers",{overrideIdentifier:"scss"})),e.ok(s.affectsConfiguration("editor.lineNumbers",{overrideIdentifier:"css"})),e.ok(!s.affectsConfiguration("editor.lineNumbers",{overrideIdentifier:"markdown"})),e.ok(!s.affectsConfiguration("editor.wordWrap")),e.ok(!s.affectsConfiguration("editor.wordWrap",{overrideIdentifier:"markdown"})),e.ok(!s.affectsConfiguration("editor",{overrideIdentifier:"json"})),e.ok(!s.affectsConfiguration("editor.fontSize",{overrideIdentifier:"json"})),e.ok(s.affectsConfiguration("window")),e.ok(s.affectsConfiguration("window.zoomLevel")),e.ok(s.affectsConfiguration("window",{overrideIdentifier:"markdown"})),e.ok(s.affectsConfiguration("window.zoomLevel",{overrideIdentifier:"markdown"})),e.ok(s.affectsConfiguration("workbench")),e.ok(s.affectsConfiguration("workbench.editor")),e.ok(s.affectsConfiguration("workbench.editor.enablePreview")),e.ok(s.affectsConfiguration("workbench",{overrideIdentifier:"markdown"})),e.ok(s.affectsConfiguration("workbench.editor",{overrideIdentifier:"markdown"}))}),test("changeEvent affecting workspace folders",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));t.updateWorkspaceConfiguration(d({"window.title":"custom"})),t.updateFolderConfiguration(r.file("folder1"),d({"window.zoomLevel":2,"window.restoreFullscreen":!0})),t.updateFolderConfiguration(r.file("folder2"),d({"workbench.editor.enablePreview":!0,"window.restoreWindows":!0}));const f=t.toData(),n=new v("a",[new g({index:0,name:"a",uri:r.file("folder1")}),new g({index:1,name:"b",uri:r.file("folder2")}),new g({index:2,name:"c",uri:r.file("folder3")})]),s=b(t.compareAndUpdateWorkspaceConfiguration(d({"window.title":"native"})),t.compareAndUpdateFolderConfiguration(r.file("folder1"),d({"window.zoomLevel":1,"window.restoreFullscreen":!1})),t.compareAndUpdateFolderConfiguration(r.file("folder2"),d({"workbench.editor.enablePreview":!1,"window.restoreWindows":!1}))),i=new w(s,{data:f,workspace:n},t,n,new o);e.deepStrictEqual([...i.affectedKeys],["window.title","window.zoomLevel","window.restoreFullscreen","workbench.editor.enablePreview","window.restoreWindows"]),e.ok(i.affectsConfiguration("window.zoomLevel")),e.ok(i.affectsConfiguration("window.zoomLevel",{resource:r.file("folder1")})),e.ok(i.affectsConfiguration("window.zoomLevel",{resource:r.file(u("folder1","file1"))})),e.ok(!i.affectsConfiguration("window.zoomLevel",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("window.zoomLevel",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("window.zoomLevel",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("window.zoomLevel",{resource:r.file(u("folder3","file3"))})),e.ok(i.affectsConfiguration("window.restoreFullscreen")),e.ok(i.affectsConfiguration("window.restoreFullscreen",{resource:r.file(u("folder1","file1"))})),e.ok(i.affectsConfiguration("window.restoreFullscreen",{resource:r.file("folder1")})),e.ok(!i.affectsConfiguration("window.restoreFullscreen",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("window.restoreFullscreen",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("window.restoreFullscreen",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("window.restoreFullscreen",{resource:r.file(u("folder3","file3"))})),e.ok(i.affectsConfiguration("window.restoreWindows")),e.ok(i.affectsConfiguration("window.restoreWindows",{resource:r.file("folder2")})),e.ok(i.affectsConfiguration("window.restoreWindows",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("window.restoreWindows",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("window.restoreWindows",{resource:r.file(u("folder1","file1"))})),e.ok(!i.affectsConfiguration("window.restoreWindows",{resource:r.file(u("folder3","file3"))})),e.ok(i.affectsConfiguration("window.title")),e.ok(i.affectsConfiguration("window.title",{resource:r.file("folder1")})),e.ok(i.affectsConfiguration("window.title",{resource:r.file(u("folder1","file1"))})),e.ok(i.affectsConfiguration("window.title",{resource:r.file("folder2")})),e.ok(i.affectsConfiguration("window.title",{resource:r.file(u("folder2","file2"))})),e.ok(i.affectsConfiguration("window.title",{resource:r.file("folder3")})),e.ok(i.affectsConfiguration("window.title",{resource:r.file(u("folder3","file3"))})),e.ok(i.affectsConfiguration("window.title",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("window.title",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("window.title",{resource:r.file("file3")})),e.ok(i.affectsConfiguration("window")),e.ok(i.affectsConfiguration("window",{resource:r.file("folder1")})),e.ok(i.affectsConfiguration("window",{resource:r.file(u("folder1","file1"))})),e.ok(i.affectsConfiguration("window",{resource:r.file("folder2")})),e.ok(i.affectsConfiguration("window",{resource:r.file(u("folder2","file2"))})),e.ok(i.affectsConfiguration("window",{resource:r.file("folder3")})),e.ok(i.affectsConfiguration("window",{resource:r.file(u("folder3","file3"))})),e.ok(i.affectsConfiguration("window",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("window",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("window",{resource:r.file("file3")})),e.ok(i.affectsConfiguration("workbench.editor.enablePreview")),e.ok(i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file("folder2")})),e.ok(i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file("folder1")})),e.ok(!i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file(u("folder1","file1"))})),e.ok(!i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file("folder3")})),e.ok(i.affectsConfiguration("workbench.editor")),e.ok(i.affectsConfiguration("workbench.editor",{resource:r.file("folder2")})),e.ok(i.affectsConfiguration("workbench.editor",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("workbench.editor",{resource:r.file("folder1")})),e.ok(!i.affectsConfiguration("workbench.editor",{resource:r.file(u("folder1","file1"))})),e.ok(!i.affectsConfiguration("workbench.editor",{resource:r.file("folder3")})),e.ok(i.affectsConfiguration("workbench")),e.ok(i.affectsConfiguration("workbench",{resource:r.file("folder2")})),e.ok(i.affectsConfiguration("workbench",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("workbench",{resource:r.file("folder1")})),e.ok(!i.affectsConfiguration("workbench",{resource:r.file("folder3")})),e.ok(!i.affectsConfiguration("files")),e.ok(!i.affectsConfiguration("files",{resource:r.file("folder1")})),e.ok(!i.affectsConfiguration("files",{resource:r.file(u("folder1","file1"))})),e.ok(!i.affectsConfiguration("files",{resource:r.file("folder2")})),e.ok(!i.affectsConfiguration("files",{resource:r.file(u("folder2","file2"))})),e.ok(!i.affectsConfiguration("files",{resource:r.file("folder3")})),e.ok(!i.affectsConfiguration("files",{resource:r.file(u("folder3","file3"))}))}),test("changeEvent - all",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o));t.updateFolderConfiguration(r.file("file1"),d({"window.zoomLevel":2,"window.restoreFullscreen":!0}));const f=t.toData(),n=b(t.compareAndUpdateDefaultConfiguration(d({"editor.lineNumbers":"off","[markdown]":{"editor.wordWrap":"off"}}),["editor.lineNumbers","[markdown]"]),t.compareAndUpdateLocalUserConfiguration(d({"[json]":{"editor.lineNumbers":"relative"}})),t.compareAndUpdateWorkspaceConfiguration(d({"window.title":"custom"})),t.compareAndDeleteFolderConfiguration(r.file("file1")),t.compareAndUpdateFolderConfiguration(r.file("file2"),d({"workbench.editor.enablePreview":!0,"window.restoreWindows":!0}))),s=new v("a",[new g({index:0,name:"a",uri:r.file("file1")}),new g({index:1,name:"b",uri:r.file("file2")}),new g({index:2,name:"c",uri:r.file("folder3")})]),i=new w(n,{data:f,workspace:s},t,s,new o);e.deepStrictEqual([...i.affectedKeys],["editor.lineNumbers","[markdown]","[json]","window.title","window.zoomLevel","window.restoreFullscreen","workbench.editor.enablePreview","window.restoreWindows","editor.wordWrap"]),e.ok(i.affectsConfiguration("window.title")),e.ok(i.affectsConfiguration("window.title",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("window.title",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("window")),e.ok(i.affectsConfiguration("window",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("window",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("window.zoomLevel")),e.ok(i.affectsConfiguration("window.zoomLevel",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("window.zoomLevel",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("window.restoreFullscreen")),e.ok(i.affectsConfiguration("window.restoreFullscreen",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("window.restoreFullscreen",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("window.restoreWindows")),e.ok(i.affectsConfiguration("window.restoreWindows",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("window.restoreWindows",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("workbench.editor.enablePreview")),e.ok(i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("workbench.editor.enablePreview",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("workbench.editor")),e.ok(i.affectsConfiguration("workbench.editor",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("workbench.editor",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("workbench")),e.ok(i.affectsConfiguration("workbench",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("workbench",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("files")),e.ok(!i.affectsConfiguration("files",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("files",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("editor")),e.ok(i.affectsConfiguration("editor",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file1"),overrideIdentifier:"json"})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file1"),overrideIdentifier:"markdown"})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file1"),overrideIdentifier:"typescript"})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file2"),overrideIdentifier:"json"})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file2"),overrideIdentifier:"markdown"})),e.ok(i.affectsConfiguration("editor",{resource:r.file("file2"),overrideIdentifier:"typescript"})),e.ok(i.affectsConfiguration("editor.lineNumbers")),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file1")})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file2")})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file1"),overrideIdentifier:"json"})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file1"),overrideIdentifier:"markdown"})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file1"),overrideIdentifier:"typescript"})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file2"),overrideIdentifier:"json"})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file2"),overrideIdentifier:"markdown"})),e.ok(i.affectsConfiguration("editor.lineNumbers",{resource:r.file("file2"),overrideIdentifier:"typescript"})),e.ok(i.affectsConfiguration("editor.wordWrap")),e.ok(!i.affectsConfiguration("editor.wordWrap",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("editor.wordWrap",{resource:r.file("file2")})),e.ok(!i.affectsConfiguration("editor.wordWrap",{resource:r.file("file1"),overrideIdentifier:"json"})),e.ok(i.affectsConfiguration("editor.wordWrap",{resource:r.file("file1"),overrideIdentifier:"markdown"})),e.ok(!i.affectsConfiguration("editor.wordWrap",{resource:r.file("file1"),overrideIdentifier:"typescript"})),e.ok(!i.affectsConfiguration("editor.wordWrap",{resource:r.file("file2"),overrideIdentifier:"json"})),e.ok(i.affectsConfiguration("editor.wordWrap",{resource:r.file("file2"),overrideIdentifier:"markdown"})),e.ok(!i.affectsConfiguration("editor.wordWrap",{resource:r.file("file2"),overrideIdentifier:"typescript"})),e.ok(!i.affectsConfiguration("editor.fontSize")),e.ok(!i.affectsConfiguration("editor.fontSize",{resource:r.file("file1")})),e.ok(!i.affectsConfiguration("editor.fontSize",{resource:r.file("file2")}))}),test("changeEvent affecting tasks and launches",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o)),f=t.compareAndUpdateLocalUserConfiguration(d({launch:{configuraiton:{}},"launch.version":1,tasks:{version:2}})),n=new w(f,void 0,t,void 0,new o);e.deepStrictEqual([...n.affectedKeys],["launch","launch.version","tasks"]),e.ok(n.affectsConfiguration("launch")),e.ok(n.affectsConfiguration("launch.version")),e.ok(n.affectsConfiguration("tasks"))}),test("affectsConfiguration returns false for empty string",()=>{const t=new l(a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o),a.createEmptyModel(new o)),f=t.compareAndUpdateLocalUserConfiguration(d({"window.zoomLevel":1})),n=new w(f,void 0,t,void 0,new o);e.strictEqual(!1,n.affectsConfiguration(""))})});function d(t){const f=new c("test",new o);return f.parse(JSON.stringify(t)),f.configurationModel}export{l as TestConfiguration};
