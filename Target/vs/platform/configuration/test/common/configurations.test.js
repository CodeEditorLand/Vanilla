import e from"assert";import{Event as l}from"../../../../base/common/event.js";import{equals as a}from"../../../../base/common/objects.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../../../../base/test/common/utils.js";import{Extensions as b}from"../../common/configurationRegistry.js";import{DefaultConfiguration as s}from"../../common/configurations.js";import{NullLogService as d}from"../../../log/common/log.js";import{Registry as p}from"../../../registry/common/platform.js";suite("DefaultConfiguration",()=>{const n=f(),r=p.as(b.Configuration);setup(()=>c()),teardown(()=>c());function c(){r.deregisterConfigurations(r.getConfigurations()),r.deregisterDefaultConfigurations(r.getRegisteredDefaultConfigurations())}test("Test registering a property before initialize",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{a:{description:"a",type:"boolean",default:!1}}});const t=await i.initialize();e.strictEqual(t.getValue("a"),!1)}),test("Test registering a property and do not initialize",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{a:{description:"a",type:"boolean",default:!1}}}),e.strictEqual(i.configurationModel.getValue("a"),void 0)}),test("Test registering a property after initialize",async()=>{const i=n.add(new s(new d));await i.initialize();const t=l.toPromise(i.onDidChangeConfiguration);r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{"defaultConfiguration.testSetting1":{description:"a",type:"boolean",default:!1}}});const{defaults:o,properties:u}=await t;e.strictEqual(o.getValue("defaultConfiguration.testSetting1"),!1),e.deepStrictEqual(u,["defaultConfiguration.testSetting1"])}),test("Test registering nested properties",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{"a.b":{description:"1",type:"object",default:{}},"a.b.c":{description:"2",type:"object",default:"2"}}});const t=await i.initialize();e.ok(a(t.getValue("a"),{b:{c:"2"}})),e.ok(a(t.contents,{a:{b:{c:"2"}}})),e.deepStrictEqual(t.keys.sort(),["a.b","a.b.c"])}),test("Test registering the same property again",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{a:{description:"a",type:"boolean",default:!0}}}),r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{a:{description:"a",type:"boolean",default:!1}}});const t=await i.initialize();e.strictEqual(!0,t.getValue("a"))}),test("Test registering an override identifier",async()=>{const i=n.add(new s(new d));r.registerDefaultConfigurations([{overrides:{"[a]":{b:!0}}}]);const t=await i.initialize();e.ok(a(t.getValue("[a]"),{b:!0})),e.ok(a(t.contents,{"[a]":{b:!0}})),e.ok(a(t.overrides,[{contents:{b:!0},identifiers:["a"],keys:["b"]}])),e.deepStrictEqual(t.keys.sort(),["[a]"]),e.strictEqual(t.getOverrideValue("b","a"),!0)}),test("Test registering a normal property and override identifier",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{b:{description:"b",type:"boolean",default:!1}}}),r.registerDefaultConfigurations([{overrides:{"[a]":{b:!0}}}]);const t=await i.initialize();e.deepStrictEqual(t.getValue("b"),!1),e.ok(a(t.getValue("[a]"),{b:!0})),e.ok(a(t.contents,{b:!1,"[a]":{b:!0}})),e.ok(a(t.overrides,[{contents:{b:!0},identifiers:["a"],keys:["b"]}])),e.deepStrictEqual(t.keys.sort(),["[a]","b"]),e.strictEqual(t.getOverrideValue("b","a"),!0)}),test("Test normal property is registered after override identifier",async()=>{const i=n.add(new s(new d)),t=l.toPromise(i.onDidChangeConfiguration);r.registerDefaultConfigurations([{overrides:{"[a]":{b:!0}}}]),await i.initialize(),r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{b:{description:"b",type:"boolean",default:!1}}});const{defaults:o,properties:u}=await t;e.deepStrictEqual(o.getValue("b"),!1),e.ok(a(o.getValue("[a]"),{b:!0})),e.ok(a(o.contents,{b:!1,"[a]":{b:!0}})),e.ok(a(o.overrides,[{contents:{b:!0},identifiers:["a"],keys:["b"]}])),e.deepStrictEqual(o.keys.sort(),["[a]","b"]),e.strictEqual(o.getOverrideValue("b","a"),!0),e.deepStrictEqual(u,["b"])}),test("Test override identifier is registered after property",async()=>{const i=n.add(new s(new d)),t=l.toPromise(i.onDidChangeConfiguration);r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{b:{description:"b",type:"boolean",default:!1}}}),await i.initialize(),r.registerDefaultConfigurations([{overrides:{"[a]":{b:!0}}}]);const{defaults:o,properties:u}=await t;e.deepStrictEqual(o.getValue("b"),!1),e.ok(a(o.getValue("[a]"),{b:!0})),e.ok(a(o.contents,{b:!1,"[a]":{b:!0}})),e.ok(a(o.overrides,[{contents:{b:!0},identifiers:["a"],keys:["b"]}])),e.deepStrictEqual(o.keys.sort(),["[a]","b"]),e.strictEqual(o.getOverrideValue("b","a"),!0),e.deepStrictEqual(u,["[a]"])}),test("Test register override identifier and property after initialize",async()=>{const i=n.add(new s(new d));await i.initialize(),r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{b:{description:"b",type:"boolean",default:!1}}}),r.registerDefaultConfigurations([{overrides:{"[a]":{b:!0}}}]);const t=i.configurationModel;e.deepStrictEqual(t.getValue("b"),!1),e.ok(a(t.getValue("[a]"),{b:!0})),e.ok(a(t.contents,{b:!1,"[a]":{b:!0}})),e.ok(a(t.overrides,[{contents:{b:!0},identifiers:["a"],keys:["b"]}])),e.deepStrictEqual(t.keys.sort(),["[a]","b"]),e.strictEqual(t.getOverrideValue("b","a"),!0)}),test("Test deregistering a property",async()=>{const i=n.add(new s(new d)),t=l.toPromise(i.onDidChangeConfiguration),o={id:"a",order:1,title:"a",type:"object",properties:{a:{description:"a",type:"boolean",default:!1}}};r.registerConfiguration(o),await i.initialize(),r.deregisterConfigurations([o]);const{defaults:u,properties:g}=await t;e.strictEqual(u.getValue("a"),void 0),e.ok(a(u.contents,{})),e.deepStrictEqual(u.keys,[]),e.deepStrictEqual(g,["a"])}),test("Test deregistering an override identifier",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"a",order:1,title:"a",type:"object",properties:{b:{description:"b",type:"boolean",default:!1}}});const t={overrides:{"[a]":{b:!0}}};r.registerDefaultConfigurations([t]),await i.initialize(),r.deregisterDefaultConfigurations([t]),e.deepStrictEqual(i.configurationModel.getValue("[a]"),void 0),e.ok(a(i.configurationModel.contents,{b:!1})),e.ok(a(i.configurationModel.overrides,[])),e.deepStrictEqual(i.configurationModel.keys,["b"]),e.strictEqual(i.configurationModel.getOverrideValue("b","a"),void 0)}),test("Test deregistering a merged language object setting",async()=>{const i=n.add(new s(new d));r.registerConfiguration({id:"b",order:1,title:"b",type:"object",properties:{b:{description:"b",type:"object",default:{}}}});const t={overrides:{"[a]":{b:{aa:"1",bb:"2"}}},source:{id:"source1",displayName:"source1"}},o={overrides:{"[a]":{b:{bb:"20",cc:"30"}}},source:{id:"source2",displayName:"source2"}};r.registerDefaultConfigurations([t]),r.registerDefaultConfigurations([o]),await i.initialize(),r.deregisterDefaultConfigurations([t]),e.ok(a(i.configurationModel.getValue("[a]"),{b:{bb:"20",cc:"30"}})),e.ok(a(i.configurationModel.contents,{"[a]":{b:{bb:"20",cc:"30"}},b:{}})),e.ok(a(i.configurationModel.overrides,[{contents:{b:{bb:"20",cc:"30"}},identifiers:["a"],keys:["b"]}])),e.deepStrictEqual(i.configurationModel.keys.sort(),["[a]","b"]),e.ok(a(i.configurationModel.getOverrideValue("b","a"),{bb:"20",cc:"30"}))})});
