import{isWindows as u}from"../../../base/common/platform.js";import{EnvironmentVariableMutatorType as d}from"./environmentVariable.js";const M=new Map([[d.Append,"APPEND"],[d.Prepend,"PREPEND"],[d.Replace,"REPLACE"]]);class O{constructor(n){this.collections=n;n.forEach((r,i)=>{this.populateDescriptionMap(r,i);const e=r.map.entries();let t=e.next();for(;!t.done;){const l=t.value[1],a=t.value[0];let o=this.map.get(a);if(o||(o=[],this.map.set(a,o)),o.length>0&&o[0].type===d.Replace){t=e.next();continue}const s={extensionIdentifier:i,value:l.value,type:l.type,scope:l.scope,variable:l.variable,options:l.options};s.scope||delete s.scope,o.unshift(s),t=e.next()}})}map=new Map;descriptionMap=new Map;async applyToProcessEnvironment(n,r,i){let e;u&&(e={},Object.keys(n).forEach(t=>e[t.toLowerCase()]=t));for(const[t,l]of this.getVariableMap(r)){const a=u&&e[t.toLowerCase()]||t;for(const o of l){const s=i?await i(o.value):o.value;if(o.options?.applyAtProcessCreation??!0)switch(o.type){case d.Append:n[a]=(n[a]||"")+s;break;case d.Prepend:n[a]=s+(n[a]||"");break;case d.Replace:n[a]=s;break}if(o.options?.applyAtShellIntegration??!1){const c=`VSCODE_ENV_${M.get(o.type)}`;n[c]=(n[c]?n[c]+":":"")+t+"="+this._encodeColons(s)}}}}_encodeColons(n){return n.replaceAll(":","\\x3a")}diff(n,r){const i=new Map,e=new Map,t=new Map;if(n.getVariableMap(r).forEach((l,a)=>{const o=this.getVariableMap(r).get(a),s=E(l,o);s&&i.set(a,s)}),this.getVariableMap(r).forEach((l,a)=>{const o=n.getVariableMap(r).get(a),s=E(l,o);s&&t.set(a,s)}),this.getVariableMap(r).forEach((l,a)=>{const o=n.getVariableMap(r).get(a),s=m(l,o);s&&e.set(a,s)}),!(i.size===0&&e.size===0&&t.size===0))return{added:i,changed:e,removed:t}}getVariableMap(n){const r=new Map;for(const i of this.map.values()){const e=i.filter(t=>f(t,n));e.length>0&&r.set(e[0].variable,e)}return r}getDescriptionMap(n){const r=new Map;for(const i of this.descriptionMap.values()){const e=i.filter(t=>f(t,n,!0));for(const t of e)r.set(t.extensionIdentifier,t.description)}return r}populateDescriptionMap(n,r){if(!n.descriptionMap)return;const i=n.descriptionMap.entries();let e=i.next();for(;!e.done;){const t=e.value[1],l=e.value[0];let a=this.descriptionMap.get(l);a||(a=[],this.descriptionMap.set(l,a));const o={extensionIdentifier:r,scope:t.scope,description:t.description};o.scope||delete o.scope,a.push(o),e=i.next()}}}function f(p,n,r=!1){return p.scope?!!(p.scope.workspaceFolder&&n?.workspaceFolder&&p.scope.workspaceFolder.index===n.workspaceFolder.index):r?n===p.scope:!0}function E(p,n){if(!n)return p;const r=new Set;n.forEach(e=>r.add(e.extensionIdentifier));const i=[];return p.forEach(e=>{r.has(e.extensionIdentifier)||i.push(e)}),i.length===0?void 0:i}function m(p,n){if(!n)return;const r=new Map;n.forEach(e=>r.set(e.extensionIdentifier,e));const i=[];return p.forEach(e=>{const t=r.get(e.extensionIdentifier);t&&(e.type!==t.type||e.value!==t.value||e.scope?.workspaceFolder?.index!==t.scope?.workspaceFolder?.index)&&i.push(t)}),i.length===0?void 0:i}export{O as MergedEnvironmentVariableCollection};
