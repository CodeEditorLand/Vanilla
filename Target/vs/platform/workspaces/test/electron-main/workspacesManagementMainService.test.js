import r from"assert";import*as n from"fs";import*as B from"os";import{isUNC as N,toSlashes as M}from"../../../../base/common/extpath.js";import{normalizeDriveLetter as y}from"../../../../base/common/labels.js";import*as a from"../../../../base/common/path.js";import{isWindows as E}from"../../../../base/common/platform.js";import{extUriBiasedIgnorePathCase as h}from"../../../../base/common/resources.js";import{URI as d}from"../../../../base/common/uri.js";import*as q from"../../../../base/node/pfs.js";import{ensureNoDisposablesAreLeakedInTestSuite as D}from"../../../../base/test/common/utils.js";import{flakySuite as L,getRandomTestPath as j}from"../../../../base/test/node/testUtils.js";import"../../../backup/common/backup.js";import"../../../backup/electron-main/backup.js";import"../../../backup/node/backup.js";import"../../../dialogs/common/dialogs.js";import"../../../dialogs/electron-main/dialogMainService.js";import{EnvironmentMainService as C}from"../../../environment/electron-main/environmentMainService.js";import{OPTIONS as J,parseArgs as x}from"../../../environment/node/argv.js";import{FileService as b}from"../../../files/common/fileService.js";import{NullLogService as T}from"../../../log/common/log.js";import $ from"../../../product/common/product.js";import"../../../product/common/productService.js";import{SaveStrategy as A,StateService as z}from"../../../state/node/stateService.js";import{UriIdentityService as _}from"../../../uriIdentity/common/uriIdentityService.js";import{UserDataProfilesMainService as H}from"../../../userDataProfile/electron-main/userDataProfile.js";import{WORKSPACE_EXTENSION as I}from"../../../workspace/common/workspace.js";import{rewriteWorkspaceFileForNewLocation as u}from"../../common/workspaces.js";import{WorkspacesManagementMainService as V}from"../../electron-main/workspacesManagementMainService.js";L("WorkspacesManagementMainService",()=>{class R{pickFileFolder(o,t){throw new Error("Method not implemented.")}pickFolder(o,t){throw new Error("Method not implemented.")}pickFile(o,t){throw new Error("Method not implemented.")}pickWorkspace(o,t){throw new Error("Method not implemented.")}showMessageBox(o,t){throw new Error("Method not implemented.")}showSaveDialog(o,t){throw new Error("Method not implemented.")}showOpenDialog(o,t){throw new Error("Method not implemented.")}}class U{isHotExitEnabled(){throw new Error("Method not implemented.")}getEmptyWindowBackups(){throw new Error("Method not implemented.")}registerWorkspaceBackup(o,t){throw new Error("Method not implemented.")}registerFolderBackup(o){throw new Error("Method not implemented.")}registerEmptyWindowBackup(o){throw new Error("Method not implemented.")}async getDirtyWorkspaces(){return[]}}function g(e,o){return i.createUntitledWorkspace(e.map((t,c)=>({uri:d.file(t),name:o?o[c]:void 0})))}function O(e,o,t){const c={folders:[]};for(let p=0;p<o.length;p++){const f=o[p],m=f instanceof d?{uri:f.toString()}:{path:f};t&&(m.name=t[p]),c.folders.push(m)}n.writeFileSync(e,JSON.stringify(c))}let F,P,S,i;const k=process.cwd(),s=B.tmpdir();setup(async()=>{F=j(s,"vsctests","workspacesmanagementmainservice"),P=a.join(F,"Workspaces");const e={_serviceBrand:void 0,...$};S=new class extends C{constructor(){super(x(process.argv,J),e)}get untitledWorkspacesHome(){return d.file(P)}};const o=new T,t=new b(o);return i=new V(S,o,new H(new z(A.DELAYED,S,o,t),new _(t),S,t,o),new U,new R),n.promises.mkdir(P,{recursive:!0})}),teardown(()=>(i.dispose(),q.Promises.rm(F)));function w(e,o){E&&(e=y(e),o=y(o),N(o)||(o=M(o))),r.strictEqual(e,o)}function W(e,o){r.strictEqual(e.toString(),o.toString())}test("createWorkspace (folders)",async()=>{const e=await g([k,s]);r.ok(e),r.ok(n.existsSync(e.configPath.fsPath)),r.ok(i.isUntitledWorkspace(e));const o=JSON.parse(n.readFileSync(e.configPath.fsPath).toString());r.strictEqual(o.folders.length,2),w(o.folders[0].path,k),w(o.folders[1].path,s),r.ok(!o.folders[0].name),r.ok(!o.folders[1].name)}),test("createWorkspace (folders with name)",async()=>{const e=await g([k,s],["currentworkingdirectory","tempdir"]);r.ok(e),r.ok(n.existsSync(e.configPath.fsPath)),r.ok(i.isUntitledWorkspace(e));const o=JSON.parse(n.readFileSync(e.configPath.fsPath).toString());r.strictEqual(o.folders.length,2),w(o.folders[0].path,k),w(o.folders[1].path,s),r.strictEqual(o.folders[0].name,"currentworkingdirectory"),r.strictEqual(o.folders[1].name,"tempdir")}),test("createUntitledWorkspace (folders as other resource URIs)",async()=>{const e=d.parse("myscheme://server/work/p/f1"),o=d.parse("myscheme://server/work/o/f3"),t=await i.createUntitledWorkspace([{uri:e},{uri:o}],"server");r.ok(t),r.ok(n.existsSync(t.configPath.fsPath)),r.ok(i.isUntitledWorkspace(t));const c=JSON.parse(n.readFileSync(t.configPath.fsPath).toString());r.strictEqual(c.folders.length,2),r.strictEqual(c.folders[0].uri,e.toString(!0)),r.strictEqual(c.folders[1].uri,o.toString(!0)),r.ok(!c.folders[0].name),r.ok(!c.folders[1].name),r.strictEqual(c.remoteAuthority,"server")}),test("resolveWorkspace",async()=>{const e=await g([k,s]);r.ok(await i.resolveLocalWorkspace(e.configPath));const o=a.join(a.dirname(e.configPath.fsPath),`workspace.${I}`);n.renameSync(e.configPath.fsPath,o),e.configPath=d.file(o);const t=await i.resolveLocalWorkspace(e.configPath);r.strictEqual(2,t.folders.length),W(t.configPath,e.configPath),r.ok(t.id),n.writeFileSync(e.configPath.fsPath,JSON.stringify({something:"something"}));const c=await i.resolveLocalWorkspace(e.configPath);r.ok(!c),n.writeFileSync(e.configPath.fsPath,JSON.stringify({transient:!0,folders:[]}));const p=await i.resolveLocalWorkspace(e.configPath);r.ok(p?.transient)}),test("resolveWorkspace (support relative paths)",async()=>{const e=await g([k,s]);n.writeFileSync(e.configPath.fsPath,JSON.stringify({folders:[{path:"./ticino-playground/lib"}]}));const o=await i.resolveLocalWorkspace(e.configPath);W(o.folders[0].uri,d.file(a.join(a.dirname(e.configPath.fsPath),"ticino-playground","lib")))}),test("resolveWorkspace (support relative paths #2)",async()=>{const e=await g([k,s]);n.writeFileSync(e.configPath.fsPath,JSON.stringify({folders:[{path:"./ticino-playground/lib/../other"}]}));const o=await i.resolveLocalWorkspace(e.configPath);W(o.folders[0].uri,d.file(a.join(a.dirname(e.configPath.fsPath),"ticino-playground","other")))}),test("resolveWorkspace (support relative paths #3)",async()=>{const e=await g([k,s]);n.writeFileSync(e.configPath.fsPath,JSON.stringify({folders:[{path:"ticino-playground/lib"}]}));const o=await i.resolveLocalWorkspace(e.configPath);W(o.folders[0].uri,d.file(a.join(a.dirname(e.configPath.fsPath),"ticino-playground","lib")))}),test("resolveWorkspace (support invalid JSON via fault tolerant parsing)",async()=>{const e=await g([k,s]);n.writeFileSync(e.configPath.fsPath,'{ "folders": [ { "path": "./ticino-playground/lib" } , ] }');const o=await i.resolveLocalWorkspace(e.configPath);W(o.folders[0].uri,d.file(a.join(a.dirname(e.configPath.fsPath),"ticino-playground","lib")))}),test("rewriteWorkspaceFileForNewLocation",async()=>{const e=k,o=a.join(s,"inside"),t=a.join(s,"myworkspace0.code-workspace");O(t,[e,"inside",a.join("inside","somefolder")]);const c=n.readFileSync(t).toString();let p=d.file(t),f=d.file(a.join(s,"inside","myworkspace1.code-workspace")),m=u(c,p,!1,f,h),l=JSON.parse(m);r.strictEqual(l.folders.length,3),w(l.folders[0].path,e),w(l.folders[1].path,"."),w(l.folders[2].path,"somefolder"),p=f,f=d.file(a.join(s,"myworkspace2.code-workspace")),m=u(m,p,!1,f,h),l=JSON.parse(m),r.strictEqual(l.folders.length,3),w(l.folders[0].path,e),w(l.folders[1].path,"inside"),w(l.folders[2].path,"inside/somefolder"),p=f,f=d.file(a.join(s,"other","myworkspace2.code-workspace")),m=u(m,p,!1,f,h),l=JSON.parse(m),r.strictEqual(l.folders.length,3),w(l.folders[0].path,e),w(l.folders[1].path,"../inside"),w(l.folders[2].path,"../inside/somefolder"),p=f,f=d.parse("foo://foo/bar/myworkspace2.code-workspace"),m=u(m,p,!1,f,h),l=JSON.parse(m),r.strictEqual(l.folders.length,3),r.strictEqual(l.folders[0].uri,d.file(e).toString(!0)),r.strictEqual(l.folders[1].uri,d.file(o).toString(!0)),r.strictEqual(l.folders[2].uri,d.file(a.join(o,"somefolder")).toString(!0)),n.unlinkSync(t)}),test("rewriteWorkspaceFileForNewLocation (preserves comments)",async()=>{const e=await g([k,s,a.join(s,"somefolder")]),o=d.file(a.join(s,`myworkspace.${Date.now()}.${I}`));let t=n.readFileSync(e.configPath.fsPath).toString();t=`// this is a comment
${t}`;const c=u(t,e.configPath,!1,o,h);r.strictEqual(0,c.indexOf("// this is a comment")),await i.deleteUntitledWorkspace(e)}),test("rewriteWorkspaceFileForNewLocation (preserves forward slashes)",async()=>{const e=await g([k,s,a.join(s,"somefolder")]),o=d.file(a.join(s,`myworkspace.${Date.now()}.${I}`));let t=n.readFileSync(e.configPath.fsPath).toString();t=t.replace(/[\\]/g,"/");const c=u(t,e.configPath,!1,o,h),p=JSON.parse(c);r.ok(p.folders.every(f=>f.path.indexOf("\\")<0)),await i.deleteUntitledWorkspace(e)}),(E?test:test.skip)("rewriteWorkspaceFileForNewLocation (unc paths)",async()=>{const e=a.join(s,"wsloc"),o="x:\\foo",t="\\\\server\\share2\\some\\path",c=a.join(e,"inner","more"),p=await g([o,t,c]),f=d.file(a.join(e,`myworkspace.${Date.now()}.${I}`)),m=n.readFileSync(p.configPath.fsPath).toString(),l=u(m,p.configPath,!0,f,h),v=JSON.parse(l);w(v.folders[0].path,o),w(v.folders[1].path,t),w(v.folders[2].path,"inner/more"),await i.deleteUntitledWorkspace(p)}),test("deleteUntitledWorkspace (untitled)",async()=>{const e=await g([k,s]);r.ok(n.existsSync(e.configPath.fsPath)),await i.deleteUntitledWorkspace(e),r.ok(!n.existsSync(e.configPath.fsPath))}),test("deleteUntitledWorkspace (saved)",async()=>{const e=await g([k,s]);await i.deleteUntitledWorkspace(e)}),test("getUntitledWorkspace",async function(){await i.initialize();let e=i.getUntitledWorkspaces();r.strictEqual(e.length,0);const o=await g([k,s]);r.ok(n.existsSync(o.configPath.fsPath)),await i.initialize(),e=i.getUntitledWorkspaces(),r.strictEqual(1,e.length),r.strictEqual(o.id,e[0].workspace.id),await i.deleteUntitledWorkspace(o),await i.initialize(),e=i.getUntitledWorkspaces(),r.strictEqual(0,e.length)}),D()});
