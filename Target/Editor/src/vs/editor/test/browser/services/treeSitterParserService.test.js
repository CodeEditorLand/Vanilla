import u from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as p}from"../../../../base/test/common/utils.js";import{TextModelTreeSitter as c,TreeSitterImporter as w,TreeSitterLanguages as h}from"../../../browser/services/treeSitter/treeSitterParserService.js";import{createTextModel as P}from"../../common/testTextModel.js";import{timeout as i}from"../../../../base/common/async.js";import{ConsoleMainLogger as f}from"../../../../platform/log/common/log.js";import"../../../../platform/telemetry/common/telemetry.js";import{LogService as y}from"../../../../platform/log/common/logService.js";import{mock as T}from"../../../../base/test/common/mock.js";class M{static async init(){}delete(){}parse(e,t,n){return new v}getIncludedRanges(){return[]}getTimeoutMicros(){return 0}setTimeoutMicros(e){}reset(){}getLanguage(){return{}}setLanguage(){}getLogger(){throw new Error("Method not implemented.")}setLogger(e){throw new Error("Method not implemented.")}}class I extends w{async getParserClass(){return M}}class v{editorLanguage="";editorContents="";rootNode={};rootNodeWithOffset(e,t){throw new Error("Method not implemented.")}copy(){throw new Error("Method not implemented.")}delete(){}edit(e){return this}walk(){throw new Error("Method not implemented.")}getChangedRanges(e){throw new Error("Method not implemented.")}getIncludedRanges(){throw new Error("Method not implemented.")}getEditedRange(e){throw new Error("Method not implemented.")}getLanguage(){throw new Error("Method not implemented.")}}class d{version=0;fieldCount=0;stateCount=0;nodeTypeCount=0;fieldNameForId(e){throw new Error("Method not implemented.")}fieldIdForName(e){throw new Error("Method not implemented.")}idForNodeType(e,t){throw new Error("Method not implemented.")}nodeTypeForId(e){throw new Error("Method not implemented.")}nodeTypeIsNamed(e){throw new Error("Method not implemented.")}nodeTypeIsVisible(e){throw new Error("Method not implemented.")}nextState(e,t){throw new Error("Method not implemented.")}query(e){throw new Error("Method not implemented.")}lookaheadIterator(e){throw new Error("Method not implemented.")}languageId=""}suite("TreeSitterParserService",function(){const r=new I;let e,t;setup(function(){e=new y(new f),t=new class extends T(){async publicLog2(){}}});const n=p();test("TextModelTreeSitter race condition: first language is slow to load",async function(){class m extends h{async _fetchJavascript(){await i(200);const o=new d;o.languageId="javascript",this._onDidAddLanguage.fire({id:"javascript",language:o})}getOrInitLanguage(o){if(o==="javascript"){this._fetchJavascript();return}const s=new d;return s.languageId=o,s}}const g=n.add(new m(r,{},{isBuilt:!1},new Map)),a=n.add(P('console.log("Hello, world!");',"javascript")),l=n.add(new c(a,g,r,e,t));a.setLanguage("typescript"),await i(300),u.strictEqual((l.parseResult?.language).languageId,"typescript")})});
