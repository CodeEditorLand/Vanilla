import e from"assert";import"../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as C}from"../../../../base/test/common/utils.js";import{EditorOption as I}from"../../../common/config/editorOptions.js";import{Position as x}from"../../../common/core/position.js";import{Range as M}from"../../../common/core/range.js";import{MetadataConsts as R}from"../../../common/encodedTokenAttributes.js";import*as k from"../../../common/languages.js";import{NullState as B}from"../../../common/languages/nullTokenize.js";import"../../../common/model.js";import"../../../common/model/textModel.js";import{ModelLineProjectionData as A}from"../../../common/modelLineProjectionData.js";import"../../../common/tokens/lineTokens.js";import"../../../common/viewModel.js";import{createModelLineProjection as H}from"../../../common/viewModel/modelLineProjection.js";import{MonospaceLineBreaksComputerFactory as b}from"../../../common/viewModel/monospaceLineBreaksComputer.js";import{ViewModelLinesFromProjectedModel as S}from"../../../common/viewModel/viewModelLines.js";import{TestConfiguration as O}from"../config/testConfiguration.js";import{createTextModel as h}from"../../common/testTextModel.js";suite("Editor ViewModel - SplitLinesCollection",()=>{C(),test("SplitLine",()=>{let u=D("My First LineMy Second LineAnd another one"),a=T([13,14,15],[13,27,42],0);e.strictEqual(a.getViewLineCount(),3),e.strictEqual(a.getViewLineContent(u,1,0),"My First Line"),e.strictEqual(a.getViewLineContent(u,1,1),"My Second Line"),e.strictEqual(a.getViewLineContent(u,1,2),"And another one"),e.strictEqual(a.getViewLineMaxColumn(u,1,0),14),e.strictEqual(a.getViewLineMaxColumn(u,1,1),15),e.strictEqual(a.getViewLineMaxColumn(u,1,2),16);for(let o=1;o<=14;o++)e.strictEqual(a.getModelColumnOfViewPosition(0,o),o,"getInputColumnOfOutputPosition(0, "+o+")");for(let o=1;o<=15;o++)e.strictEqual(a.getModelColumnOfViewPosition(1,o),13+o,"getInputColumnOfOutputPosition(1, "+o+")");for(let o=1;o<=16;o++)e.strictEqual(a.getModelColumnOfViewPosition(2,o),27+o,"getInputColumnOfOutputPosition(2, "+o+")");for(let o=1;o<=13;o++)e.deepStrictEqual(a.getViewPositionOfModelPosition(0,o),q(0,o),"getOutputPositionOfInputPosition("+o+")");for(let o=14;o<=27;o++)e.deepStrictEqual(a.getViewPositionOfModelPosition(0,o),q(1,o-13),"getOutputPositionOfInputPosition("+o+")");for(let o=28;o<=42;o++)e.deepStrictEqual(a.getViewPositionOfModelPosition(0,o),q(2,o-13-14),"getOutputPositionOfInputPosition("+o+")");u=D("My First LineMy Second LineAnd another one"),a=T([13,14,15],[13,27,42],4),e.strictEqual(a.getViewLineCount(),3),e.strictEqual(a.getViewLineContent(u,1,0),"My First Line"),e.strictEqual(a.getViewLineContent(u,1,1),"    My Second Line"),e.strictEqual(a.getViewLineContent(u,1,2),"    And another one"),e.strictEqual(a.getViewLineMaxColumn(u,1,0),14),e.strictEqual(a.getViewLineMaxColumn(u,1,1),19),e.strictEqual(a.getViewLineMaxColumn(u,1,2),20);const t=[];for(let o=0;o<a.getViewLineCount();o++){const v=[];for(let s=1;s<=a.getViewLineMaxColumn(u,1,o);s++)v.push(a.getModelColumnOfViewPosition(o,s));t.push(v)}e.deepStrictEqual(t,[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[14,14,14,14,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],[28,28,28,28,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]]);for(let o=1;o<=13;o++)e.deepStrictEqual(a.getViewPositionOfModelPosition(0,o),q(0,o),"6.getOutputPositionOfInputPosition("+o+")");for(let o=14;o<=27;o++)e.deepStrictEqual(a.getViewPositionOfModelPosition(0,o),q(1,4+o-13),"7.getOutputPositionOfInputPosition("+o+")");for(let o=28;o<=42;o++)e.deepStrictEqual(a.getViewPositionOfModelPosition(0,o),q(2,4+o-13-14),"8.getOutputPositionOfInputPosition("+o+")")});function m(u,a){const t=new O({}),o=t.options.get(I.wrappingInfo),v=t.options.get(I.fontInfo),s=t.options.get(I.wordWrapBreakAfterCharacters),w=t.options.get(I.wordWrapBreakBeforeCharacters),V=t.options.get(I.wrappingIndent),n=t.options.get(I.wordBreak),i=new b(w,s),r=h(["int main() {",'	printf("Hello world!");',"}","int main() {",'	printf("Hello world!");',"}"].join(`
`)),d=new S(1,r,i,i,v,r.getOptions().tabSize,"simple",o.wrappingColumn,V,n);a(r,d),d.dispose(),r.dispose(),t.dispose()}test("Invalid line numbers",()=>{const u=["int main() {",'	printf("Hello world!");',"}","int main() {",'	printf("Hello world!");',"}"].join(`
`);m(u,(a,t)=>{e.strictEqual(t.getViewLineCount(),6),e.deepStrictEqual(t.getViewLinesIndentGuides(-1,-1),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(0,0),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(1,1),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(2,2),[1]),e.deepStrictEqual(t.getViewLinesIndentGuides(3,3),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(4,4),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(5,5),[1]),e.deepStrictEqual(t.getViewLinesIndentGuides(6,6),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(7,7),[0]),e.deepStrictEqual(t.getViewLinesIndentGuides(0,7),[0,1,0,0,1,0]),e.strictEqual(t.getViewLineContent(-1),"int main() {"),e.strictEqual(t.getViewLineContent(0),"int main() {"),e.strictEqual(t.getViewLineContent(1),"int main() {"),e.strictEqual(t.getViewLineContent(2),'	printf("Hello world!");'),e.strictEqual(t.getViewLineContent(3),"}"),e.strictEqual(t.getViewLineContent(4),"int main() {"),e.strictEqual(t.getViewLineContent(5),'	printf("Hello world!");'),e.strictEqual(t.getViewLineContent(6),"}"),e.strictEqual(t.getViewLineContent(7),"}"),e.strictEqual(t.getViewLineMinColumn(-1),1),e.strictEqual(t.getViewLineMinColumn(0),1),e.strictEqual(t.getViewLineMinColumn(1),1),e.strictEqual(t.getViewLineMinColumn(2),1),e.strictEqual(t.getViewLineMinColumn(3),1),e.strictEqual(t.getViewLineMinColumn(4),1),e.strictEqual(t.getViewLineMinColumn(5),1),e.strictEqual(t.getViewLineMinColumn(6),1),e.strictEqual(t.getViewLineMinColumn(7),1),e.strictEqual(t.getViewLineMaxColumn(-1),13),e.strictEqual(t.getViewLineMaxColumn(0),13),e.strictEqual(t.getViewLineMaxColumn(1),13),e.strictEqual(t.getViewLineMaxColumn(2),25),e.strictEqual(t.getViewLineMaxColumn(3),2),e.strictEqual(t.getViewLineMaxColumn(4),13),e.strictEqual(t.getViewLineMaxColumn(5),25),e.strictEqual(t.getViewLineMaxColumn(6),2),e.strictEqual(t.getViewLineMaxColumn(7),2),e.deepStrictEqual(t.convertViewPositionToModelPosition(-1,1),new x(1,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(0,1),new x(1,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(1,1),new x(1,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(2,1),new x(2,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(3,1),new x(3,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(4,1),new x(4,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(5,1),new x(5,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(6,1),new x(6,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(7,1),new x(6,1)),e.deepStrictEqual(t.convertViewPositionToModelPosition(8,1),new x(6,1))})}),test("issue #3662",()=>{const u=["int main() {",'	printf("Hello world!");',"}","int main() {",'	printf("Hello world!");',"}"].join(`
`);m(u,(a,t)=>{t.setHiddenAreas([new M(1,1,3,1),new M(5,1,6,1)]);const o=t.getViewLineCount();e.strictEqual(o,1,"getOutputLineCount()");const v=a.getLineCount();for(let s=0;s<=v+1;s++){const w=s>=1&&s<=v?a.getLineMinColumn(s):1,V=s>=1&&s<=v?a.getLineMaxColumn(s):1;for(let n=w-1;n<=V+1;n++){const i=t.convertModelPositionToViewPosition(s,n);let r=i.lineNumber,d=i.column;r<1&&(r=1);const l=t.getViewLineCount();r>l&&(r=l);const p=t.getViewLineMinColumn(r),c=t.getViewLineMaxColumn(r);d<p&&(d=p),d>c&&(d=c);const g=new x(r,d);e.strictEqual(i.toString(),g.toString(),"model->view for "+s+", "+n)}}for(let s=0;s<=o+1;s++){const w=t.getViewLineMinColumn(s),V=t.getViewLineMaxColumn(s);for(let n=w-1;n<=V+1;n++){const i=t.convertViewPositionToModelPosition(s,n),r=a.validatePosition(i);e.strictEqual(i.toString(),r.toString(),"view->model for "+s+", "+n)}}})})}),suite("SplitLinesCollection",()=>{const m=["class Nice {","	function hi() {",'		console.log("Hello world");',"	}","	function hello() {",'		console.log("Hello world, this is a somewhat longer line");',"	}","}"],u=[[{startIndex:0,value:1},{startIndex:5,value:2},{startIndex:6,value:3},{startIndex:10,value:4}],[{startIndex:0,value:5},{startIndex:1,value:6},{startIndex:9,value:7},{startIndex:10,value:8},{startIndex:12,value:9}],[{startIndex:0,value:10},{startIndex:2,value:11},{startIndex:9,value:12},{startIndex:10,value:13},{startIndex:13,value:14},{startIndex:14,value:15},{startIndex:27,value:16}],[{startIndex:0,value:17}],[{startIndex:0,value:18},{startIndex:1,value:19},{startIndex:9,value:20},{startIndex:10,value:21},{startIndex:15,value:22}],[{startIndex:0,value:23},{startIndex:2,value:24},{startIndex:9,value:25},{startIndex:10,value:26},{startIndex:13,value:27},{startIndex:14,value:28},{startIndex:59,value:29}],[{startIndex:0,value:30}],[{startIndex:0,value:31}]];let a,t;setup(()=>{let n=0;const i={getInitialState:()=>B,tokenize:void 0,tokenizeEncoded:(d,l,p)=>{const c=u[n++],g=new Uint32Array(2*c.length);for(let f=0;f<c.length;f++)g[2*f]=c[f].startIndex,g[2*f+1]=c[f].value<<R.FOREGROUND_OFFSET;return new k.EncodedTokenizationResult(g,p)}},r="modelModeTest1";t=k.TokenizationRegistry.register(r,i),a=h(m.join(`
`),r),a.tokenization.forceTokenization(a.getLineCount())}),teardown(()=>{a.dispose(),t.dispose()}),C();function o(n,i){const r=[];for(let d=0,l=n.getCount();d<l;d++)r[d]={endIndex:n.getEndOffset(d),value:n.getForeground(d)};e.deepStrictEqual(r,i)}function v(n,i){if(n===null&&i===null){e.ok(!0);return}i===null&&e.ok(!1),e.strictEqual(n.content,i.content),e.strictEqual(n.minColumn,i.minColumn),e.strictEqual(n.maxColumn,i.maxColumn),o(n.tokens,i.tokens)}function s(n,i){e.strictEqual(n.length,i.length);for(let r=0;r<i.length;r++)v(n[r],i[r])}function w(n,i){const r=i.length;for(let d=1;d<=r;d++)e.strictEqual(n.getViewLineData(d).content,n.getViewLineContent(d));for(let d=1;d<=r;d++)for(let l=d;l<=r;l++){const p=l-d+1;for(let c=Math.pow(2,p)-1;c>=0;c--){const g=[],f=[];for(let E=0;E<p;E++)g[E]=!!(c&1<<E),f[E]=g[E]?i[d-1+E]:null;const P=n.getViewLinesData(d,l,g);s(P,f);break}}}test("getViewLinesData - no wrapping",()=>{V(a,"off",0,n=>{e.strictEqual(n.getViewLineCount(),8),e.strictEqual(n.modelPositionIsVisible(1,1),!0),e.strictEqual(n.modelPositionIsVisible(2,1),!0),e.strictEqual(n.modelPositionIsVisible(3,1),!0),e.strictEqual(n.modelPositionIsVisible(4,1),!0),e.strictEqual(n.modelPositionIsVisible(5,1),!0),e.strictEqual(n.modelPositionIsVisible(6,1),!0),e.strictEqual(n.modelPositionIsVisible(7,1),!0),e.strictEqual(n.modelPositionIsVisible(8,1),!0);const i=[{content:"class Nice {",minColumn:1,maxColumn:13,tokens:[{endIndex:5,value:1},{endIndex:6,value:2},{endIndex:10,value:3},{endIndex:12,value:4}]},{content:"	function hi() {",minColumn:1,maxColumn:17,tokens:[{endIndex:1,value:5},{endIndex:9,value:6},{endIndex:10,value:7},{endIndex:12,value:8},{endIndex:16,value:9}]},{content:'		console.log("Hello world");',minColumn:1,maxColumn:30,tokens:[{endIndex:2,value:10},{endIndex:9,value:11},{endIndex:10,value:12},{endIndex:13,value:13},{endIndex:14,value:14},{endIndex:27,value:15},{endIndex:29,value:16}]},{content:"	}",minColumn:1,maxColumn:3,tokens:[{endIndex:2,value:17}]},{content:"	function hello() {",minColumn:1,maxColumn:20,tokens:[{endIndex:1,value:18},{endIndex:9,value:19},{endIndex:10,value:20},{endIndex:15,value:21},{endIndex:19,value:22}]},{content:'		console.log("Hello world, this is a somewhat longer line");',minColumn:1,maxColumn:62,tokens:[{endIndex:2,value:23},{endIndex:9,value:24},{endIndex:10,value:25},{endIndex:13,value:26},{endIndex:14,value:27},{endIndex:59,value:28},{endIndex:61,value:29}]},{minColumn:1,maxColumn:3,content:"	}",tokens:[{endIndex:2,value:30}]},{minColumn:1,maxColumn:2,content:"}",tokens:[{endIndex:1,value:31}]}];w(n,[i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7]]),n.setHiddenAreas([new M(2,1,4,1)]),e.strictEqual(n.getViewLineCount(),5),e.strictEqual(n.modelPositionIsVisible(1,1),!0),e.strictEqual(n.modelPositionIsVisible(2,1),!1),e.strictEqual(n.modelPositionIsVisible(3,1),!1),e.strictEqual(n.modelPositionIsVisible(4,1),!1),e.strictEqual(n.modelPositionIsVisible(5,1),!0),e.strictEqual(n.modelPositionIsVisible(6,1),!0),e.strictEqual(n.modelPositionIsVisible(7,1),!0),e.strictEqual(n.modelPositionIsVisible(8,1),!0),w(n,[i[0],i[4],i[5],i[6],i[7]])})}),test("getViewLinesData - with wrapping",()=>{V(a,"wordWrapColumn",30,n=>{e.strictEqual(n.getViewLineCount(),12),e.strictEqual(n.modelPositionIsVisible(1,1),!0),e.strictEqual(n.modelPositionIsVisible(2,1),!0),e.strictEqual(n.modelPositionIsVisible(3,1),!0),e.strictEqual(n.modelPositionIsVisible(4,1),!0),e.strictEqual(n.modelPositionIsVisible(5,1),!0),e.strictEqual(n.modelPositionIsVisible(6,1),!0),e.strictEqual(n.modelPositionIsVisible(7,1),!0),e.strictEqual(n.modelPositionIsVisible(8,1),!0);const i=[{content:"class Nice {",minColumn:1,maxColumn:13,tokens:[{endIndex:5,value:1},{endIndex:6,value:2},{endIndex:10,value:3},{endIndex:12,value:4}]},{content:"	function hi() {",minColumn:1,maxColumn:17,tokens:[{endIndex:1,value:5},{endIndex:9,value:6},{endIndex:10,value:7},{endIndex:12,value:8},{endIndex:16,value:9}]},{content:'		console.log("Hello ',minColumn:1,maxColumn:22,tokens:[{endIndex:2,value:10},{endIndex:9,value:11},{endIndex:10,value:12},{endIndex:13,value:13},{endIndex:14,value:14},{endIndex:21,value:15}]},{content:'            world");',minColumn:13,maxColumn:21,tokens:[{endIndex:18,value:15},{endIndex:20,value:16}]},{content:"	}",minColumn:1,maxColumn:3,tokens:[{endIndex:2,value:17}]},{content:"	function hello() {",minColumn:1,maxColumn:20,tokens:[{endIndex:1,value:18},{endIndex:9,value:19},{endIndex:10,value:20},{endIndex:15,value:21},{endIndex:19,value:22}]},{content:'		console.log("Hello ',minColumn:1,maxColumn:22,tokens:[{endIndex:2,value:23},{endIndex:9,value:24},{endIndex:10,value:25},{endIndex:13,value:26},{endIndex:14,value:27},{endIndex:21,value:28}]},{content:"            world, this is a ",minColumn:13,maxColumn:30,tokens:[{endIndex:29,value:28}]},{content:"            somewhat longer ",minColumn:13,maxColumn:29,tokens:[{endIndex:28,value:28}]},{content:'            line");',minColumn:13,maxColumn:20,tokens:[{endIndex:17,value:28},{endIndex:19,value:29}]},{content:"	}",minColumn:1,maxColumn:3,tokens:[{endIndex:2,value:30}]},{content:"}",minColumn:1,maxColumn:2,tokens:[{endIndex:1,value:31}]}];w(n,[i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11]]),n.setHiddenAreas([new M(2,1,4,1)]),e.strictEqual(n.getViewLineCount(),8),e.strictEqual(n.modelPositionIsVisible(1,1),!0),e.strictEqual(n.modelPositionIsVisible(2,1),!1),e.strictEqual(n.modelPositionIsVisible(3,1),!1),e.strictEqual(n.modelPositionIsVisible(4,1),!1),e.strictEqual(n.modelPositionIsVisible(5,1),!0),e.strictEqual(n.modelPositionIsVisible(6,1),!0),e.strictEqual(n.modelPositionIsVisible(7,1),!0),e.strictEqual(n.modelPositionIsVisible(8,1),!0),w(n,[i[0],i[5],i[6],i[7],i[8],i[9],i[10],i[11]])})}),test("getViewLinesData - with wrapping and injected text",()=>{a.deltaDecorations([],[{range:new M(1,9,1,9),options:{description:"example",after:{content:"very very long injected text that causes a line break",inlineClassName:"myClassName"},showIfCollapsed:!0}}]),V(a,"wordWrapColumn",30,n=>{e.strictEqual(n.getViewLineCount(),14),e.strictEqual(n.getViewLineMaxColumn(1),24);const i=[{content:"class Nivery very long ",minColumn:1,maxColumn:24,tokens:[{endIndex:5,value:1},{endIndex:6,value:2},{endIndex:8,value:3},{endIndex:23,value:1}]},{content:"    injected text that causes ",minColumn:5,maxColumn:31,tokens:[{endIndex:30,value:1}]},{content:"    a line breakce {",minColumn:5,maxColumn:21,tokens:[{endIndex:16,value:1},{endIndex:18,value:3},{endIndex:20,value:4}]},{content:"	function hi() {",minColumn:1,maxColumn:17,tokens:[{endIndex:1,value:5},{endIndex:9,value:6},{endIndex:10,value:7},{endIndex:12,value:8},{endIndex:16,value:9}]},{content:'		console.log("Hello ',minColumn:1,maxColumn:22,tokens:[{endIndex:2,value:10},{endIndex:9,value:11},{endIndex:10,value:12},{endIndex:13,value:13},{endIndex:14,value:14},{endIndex:21,value:15}]},{content:'            world");',minColumn:13,maxColumn:21,tokens:[{endIndex:18,value:15},{endIndex:20,value:16}]},{content:"	}",minColumn:1,maxColumn:3,tokens:[{endIndex:2,value:17}]},{content:"	function hello() {",minColumn:1,maxColumn:20,tokens:[{endIndex:1,value:18},{endIndex:9,value:19},{endIndex:10,value:20},{endIndex:15,value:21},{endIndex:19,value:22}]},{content:'		console.log("Hello ',minColumn:1,maxColumn:22,tokens:[{endIndex:2,value:23},{endIndex:9,value:24},{endIndex:10,value:25},{endIndex:13,value:26},{endIndex:14,value:27},{endIndex:21,value:28}]},{content:"            world, this is a ",minColumn:13,maxColumn:30,tokens:[{endIndex:29,value:28}]},{content:"            somewhat longer ",minColumn:13,maxColumn:29,tokens:[{endIndex:28,value:28}]},{content:'            line");',minColumn:13,maxColumn:20,tokens:[{endIndex:17,value:28},{endIndex:19,value:29}]},{content:"	}",minColumn:1,maxColumn:3,tokens:[{endIndex:2,value:30}]},{content:"}",minColumn:1,maxColumn:2,tokens:[{endIndex:1,value:31}]}];w(n,[i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11]]);const r=n.getViewLinesData(1,14,new Array(14).fill(!0));e.deepStrictEqual(r.map(d=>({inlineDecorations:d.inlineDecorations?.map(l=>({startOffset:l.startOffset,endOffset:l.endOffset}))})),[{inlineDecorations:[{startOffset:8,endOffset:23}]},{inlineDecorations:[{startOffset:4,endOffset:30}]},{inlineDecorations:[{startOffset:4,endOffset:16}]},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0},{inlineDecorations:void 0}])})});function V(n,i,r,d){const l=new O({wordWrap:i,wordWrapColumn:r,wrappingIndent:"indent"}),p=l.options.get(I.wrappingInfo),c=l.options.get(I.fontInfo),g=l.options.get(I.wordWrapBreakAfterCharacters),f=l.options.get(I.wordWrapBreakBeforeCharacters),P=l.options.get(I.wrappingIndent),E=l.options.get(I.wordBreak),L=new b(f,g),y=new S(1,n,L,L,c,n.getOptions().tabSize,"simple",p.wrappingColumn,P,E);d(y),l.dispose()}});function q(m,u){return new x(m,u)}function T(m,u,a,t=!0){return H(N(m,u,a),t)}function N(m,u,a){const t=[];for(let o=0;o<m.length;o++)t[o]=(o>0?t[o-1]:0)+m[o];return new A(null,null,t,u,a)}function D(m){return{tokenization:{getLineTokens:u=>null},getLineContent:u=>m,getLineLength:u=>m.length,getLineMinColumn:u=>1,getLineMaxColumn:u=>m.length+1,getValueInRange:(u,a)=>m.substring(u.startColumn-1,u.endColumn-1)}}
