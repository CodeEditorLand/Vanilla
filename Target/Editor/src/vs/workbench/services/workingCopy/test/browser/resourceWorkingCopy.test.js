import o from"assert";import{Event as s}from"../../../../../base/common/event.js";import{URI as f}from"../../../../../base/common/uri.js";import"../../../../../base/common/cancellation.js";import{TestServiceAccessor as u,workbenchInstantiationService as v}from"../../../../test/browser/workbenchTestServices.js";import"../../../../../platform/instantiation/common/instantiation.js";import{FileChangesEvent as c,FileChangeType as l}from"../../../../../platform/files/common/files.js";import"../../../../common/editor.js";import{ResourceWorkingCopy as y}from"../../common/resourceWorkingCopy.js";import{WorkingCopyCapabilities as C}from"../../common/workingCopy.js";import{DisposableStore as h}from"../../../../../base/common/lifecycle.js";import{runWithFakedTimers as g}from"../../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as k}from"../../../../../base/test/common/utils.js";suite("ResourceWorkingCopy",function(){class d extends y{name="testName";typeId="testTypeId";capabilities=C.None;onDidChangeDirty=s.None;onDidChangeContent=s.None;onDidSave=s.None;isDirty(){return!1}async backup(p){throw new Error("Method not implemented.")}async save(p){return!1}async revert(p){}}const n=new h,r=f.file("test/resource");let a,i,e;function m(t=r){return new d(t,i.fileService)}setup(()=>{a=v(void 0,n),i=a.createInstance(u),e=n.add(m())}),teardown(()=>{n.clear()}),test("orphaned tracking",async()=>g({},async()=>{o.strictEqual(e.isOrphaned(),!1);let t=s.toPromise(e.onDidChangeOrphaned);i.fileService.notExistsSet.set(r,!0),i.fileService.fireFileChanges(new c([{resource:r,type:l.DELETED}],!1)),await t,o.strictEqual(e.isOrphaned(),!0),t=s.toPromise(e.onDidChangeOrphaned),i.fileService.notExistsSet.delete(r),i.fileService.fireFileChanges(new c([{resource:r,type:l.ADDED}],!1)),await t,o.strictEqual(e.isOrphaned(),!1)})),test("dispose, isDisposed",async()=>{o.strictEqual(e.isDisposed(),!1);let t=!1;n.add(e.onWillDispose(()=>{t=!0})),e.dispose(),o.strictEqual(e.isDisposed(),!0),o.strictEqual(t,!0)}),k()});
