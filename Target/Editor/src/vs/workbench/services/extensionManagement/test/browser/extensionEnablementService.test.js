import s from"assert";import*as S from"sinon";import{IExtensionManagementService as _}from"../../../../../platform/extensionManagement/common/extensionManagement.js";import{EnablementState as a,IExtensionManagementServerService as c,IWorkbenchExtensionManagementService as G,ExtensionInstallLocation as C}from"../../common/extensionManagement.js";import{ExtensionEnablementService as F}from"../../browser/extensionEnablementService.js";import{TestInstantiationService as V}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{Emitter as v}from"../../../../../base/common/event.js";import{IWorkspaceContextService as w,WorkbenchState as T}from"../../../../../platform/workspace/common/workspace.js";import{IWorkbenchEnvironmentService as h}from"../../../environment/common/environmentService.js";import{IStorageService as P,InMemoryStorageService as Y}from"../../../../../platform/storage/common/storage.js";import{ExtensionType as q}from"../../../../../platform/extensions/common/extensions.js";import{isUndefinedOrNull as H}from"../../../../../base/common/types.js";import{areSameExtensions as j}from"../../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{IConfigurationService as W}from"../../../../../platform/configuration/common/configuration.js";import{URI as d}from"../../../../../base/common/uri.js";import{Schemas as g}from"../../../../../base/common/network.js";import{TestConfigurationService as K}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{TestLifecycleService as $}from"../../../../test/browser/workbenchTestServices.js";import{GlobalExtensionEnablementService as J}from"../../../../../platform/extensionManagement/common/extensionEnablementService.js";import{IUserDataSyncAccountService as I,UserDataSyncAccountService as Q}from"../../../../../platform/userDataSync/common/userDataSyncAccount.js";import{IUserDataSyncEnablementService as M}from"../../../../../platform/userDataSync/common/userDataSync.js";import{ILifecycleService as B}from"../../../lifecycle/common/lifecycle.js";import{INotificationService as R}from"../../../../../platform/notification/common/notification.js";import{TestNotificationService as X}from"../../../../../platform/notification/test/common/testNotificationService.js";import{IHostService as Z}from"../../../host/browser/host.js";import{mock as A}from"../../../../../base/test/common/mock.js";import"../../browser/extensionBisect.js";import{IWorkspaceTrustManagementService as f}from"../../../../../platform/workspace/common/workspaceTrust.js";import{ExtensionManifestPropertiesService as ee,IExtensionManifestPropertiesService as L}from"../../../extensions/common/extensionManifestPropertiesService.js";import{TestContextService as z,TestProductService as O,TestWorkspaceTrustEnablementService as te,TestWorkspaceTrustManagementService as ne}from"../../../../test/common/workbenchTestServices.js";import{TestWorkspace as ae}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{ExtensionManagementService as N}from"../../common/extensionManagementService.js";import{ILogService as se,NullLogService as U}from"../../../../../platform/log/common/log.js";import{DisposableStore as le}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as ie}from"../../../../../base/test/common/utils.js";import{IFileService as oe}from"../../../../../platform/files/common/files.js";import{FileService as re}from"../../../../../platform/files/common/fileService.js";import{IProductService as be}from"../../../../../platform/product/common/productService.js";function de(i,n){let e=i.get(P);if(!e){let E=i.get(w);E||(E=i.stub(w,{getWorkbenchState:()=>T.FOLDER,getWorkspace:()=>ae})),e=i.stub(P,n.add(new Y))}return e}class r extends F{constructor(n){const e=new le,E=de(n,e),k=n.get(c)||n.stub(c,x({id:"local",label:"local",extensionManagementService:{onInstallExtension:e.add(new v).event,onDidInstallExtensions:e.add(new v).event,onUninstallExtension:e.add(new v).event,onDidUninstallExtension:e.add(new v).event,onDidChangeProfile:e.add(new v).event,onDidUpdateExtensionMetadata:e.add(new v).event}},null,null)),D=e.add(n.createInstance(N)),b=n.get(G)||n.stub(G,D),t=n.get(f)||n.stub(f,e.add(new ne));super(E,e.add(new J(E,D)),n.get(w)||new z,n.get(h)||n.stub(h,{}),b,n.get(W),k,n.get(M)||n.stub(M,{isEnabled(){return!1}}),n.get(I)||n.stub(I,Q),n.get(B)||n.stub(B,e.add(new $)),n.get(R)||n.stub(R,new X),n.get(Z),new class extends A(){isDisabledByBisect(){return!1}},t,new class extends A(){requestWorkspaceTrust(u){return Promise.resolve(!0)}},n.get(L)||n.stub(L,e.add(new ee(O,new K,new te,new U))),n),this._register(e)}async waitUntilInitialized(){await this.extensionsManager.whenInitialized()}reset(){let n=this.globalExtensionEnablementService.getDisabledExtensions();for(const E of this._getWorkspaceDisabledExtensions())n.some(k=>j(k,E))||n.push(E);const e=this._getWorkspaceEnabledExtensions();e.length&&(n=n.filter(E=>!e.some(k=>j(k,E)))),n.forEach(E=>this.setEnablement([l(E.id)],a.EnabledGlobally))}}suite("ExtensionEnablementService Test",()=>{const i=ie();let n,e;const E=new v,k=new v,D=new v,b=[];setup(()=>{b.splice(0,b.length),n=i.add(new V),n.stub(oe,i.add(new re(new U))),n.stub(be,O),n.stub(W,new K),n.stub(w,new z),n.stub(c,x({id:"local",label:"local",extensionManagementService:{onDidInstallExtensions:E.event,onDidUninstallExtension:k.event,onDidChangeProfile:D.event,getInstalled:()=>Promise.resolve(b)}},null,null)),n.stub(se,U),n.stub(G,i.add(n.createInstance(N))),e=i.add(new r(n))}),test("test disable an extension globally",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledGlobally),s.ok(!e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.DisabledGlobally)}),test("test disable an extension globally should return truthy promise",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(t=>s.ok(t))),test("test disable an extension globally triggers the change event",async()=>{const t=S.spy();i.add(e.onEnablementChanged(t)),await e.setEnablement([l("pub.a")],a.DisabledGlobally),s.ok(t.calledOnce),s.deepStrictEqual(t.args[0][0][0].identifier,{id:"pub.a"})}),test("test disable an extension globally again should return a falsy promise",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>e.setEnablement([l("pub.a")],a.DisabledGlobally)).then(t=>s.ok(!t[0]))),test("test state of globally disabled extension",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.DisabledGlobally))),test("test state of globally enabled extension",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>e.setEnablement([l("pub.a")],a.EnabledGlobally)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.EnabledGlobally))),test("test disable an extension for workspace",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledWorkspace),s.ok(!e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.DisabledWorkspace)}),test("test disable an extension for workspace returns a truthy promise",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(t=>s.ok(t))),test("test disable an extension for workspace again should return a falsy promise",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace)).then(t=>s.ok(!t[0]))),test("test state of workspace disabled extension",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.DisabledWorkspace))),test("test state of workspace and globally disabled extension",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.DisabledWorkspace))),test("test state of workspace enabled extension",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.EnabledWorkspace))),test("test state of globally disabled and workspace enabled extension",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace)).then(()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.EnabledWorkspace))),test("test state of an extension when disabled for workspace from workspace enabled",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace)).then(()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.DisabledWorkspace))),test("test state of an extension when disabled globally from workspace enabled",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace)).then(()=>e.setEnablement([l("pub.a")],a.DisabledGlobally)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.DisabledGlobally))),test("test state of an extension when disabled globally from workspace disabled",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.DisabledGlobally)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.DisabledGlobally))),test("test state of an extension when enabled globally from workspace enabled",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace)).then(()=>e.setEnablement([l("pub.a")],a.EnabledGlobally)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.EnabledGlobally))),test("test state of an extension when enabled globally from workspace disabled",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.EnabledGlobally)).then(()=>s.strictEqual(e.getEnablementState(l("pub.a")),a.EnabledGlobally))),test("test disable an extension for workspace and then globally",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledWorkspace),await e.setEnablement([t],a.DisabledGlobally),s.ok(!e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.DisabledGlobally)}),test("test disable an extension for workspace and then globally return a truthy promise",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.DisabledGlobally)).then(t=>s.ok(t))),test("test disable an extension for workspace and then globally trigger the change event",()=>{const t=S.spy();return e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>i.add(e.onEnablementChanged(t))).then(()=>e.setEnablement([l("pub.a")],a.DisabledGlobally)).then(()=>{s.ok(t.calledOnce),s.deepStrictEqual(t.args[0][0][0].identifier,{id:"pub.a"})})}),test("test disable an extension globally and then for workspace",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledGlobally),await e.setEnablement([t],a.DisabledWorkspace),s.ok(!e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.DisabledWorkspace)}),test("test disable an extension globally and then for workspace return a truthy promise",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace)).then(t=>s.ok(t))),test("test disable an extension globally and then for workspace triggers the change event",()=>{const t=S.spy();return e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>i.add(e.onEnablementChanged(t))).then(()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace)).then(()=>{s.ok(t.calledOnce),s.deepStrictEqual(t.args[0][0][0].identifier,{id:"pub.a"})})}),test("test disable an extension for workspace when there is no workspace throws error",()=>(n.stub(w,"getWorkbenchState",T.EMPTY),e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>s.fail("should throw an error"),t=>s.ok(t)))),test("test enable an extension globally",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledGlobally),await e.setEnablement([t],a.EnabledGlobally),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test enable an extension globally return truthy promise",async()=>{await e.setEnablement([l("pub.a")],a.DisabledGlobally);const t=await e.setEnablement([l("pub.a")],a.EnabledGlobally);s.strictEqual(t[0],!0)}),test("test enable an extension globally triggers change event",()=>{const t=S.spy();return e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>i.add(e.onEnablementChanged(t))).then(()=>e.setEnablement([l("pub.a")],a.EnabledGlobally)).then(()=>{s.ok(t.calledOnce),s.deepStrictEqual(t.args[0][0][0].identifier,{id:"pub.a"})})}),test("test enable an extension globally when already enabled return falsy promise",()=>e.setEnablement([l("pub.a")],a.EnabledGlobally).then(t=>s.ok(!t[0]))),test("test enable an extension for workspace",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledWorkspace),await e.setEnablement([t],a.EnabledWorkspace),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.EnabledWorkspace)}),test("test enable an extension for workspace return truthy promise",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace)).then(t=>s.ok(t))),test("test enable an extension for workspace triggers change event",()=>{const t=S.spy();return e.setEnablement([l("pub.b")],a.DisabledWorkspace).then(()=>i.add(e.onEnablementChanged(t))).then(()=>e.setEnablement([l("pub.b")],a.EnabledWorkspace)).then(()=>{s.ok(t.calledOnce),s.deepStrictEqual(t.args[0][0][0].identifier,{id:"pub.b"})})}),test("test enable an extension for workspace when already enabled return truthy promise",()=>e.setEnablement([l("pub.a")],a.EnabledWorkspace).then(t=>s.ok(t))),test("test enable an extension for workspace when disabled in workspace and gloablly",async()=>{const t=l("pub.a");await e.setEnablement([t],a.DisabledWorkspace),await e.setEnablement([t],a.DisabledGlobally),await e.setEnablement([t],a.EnabledWorkspace),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.EnabledWorkspace)}),test("test enable an extension globally when disabled in workspace and gloablly",async()=>{const t=l("pub.a");await e.setEnablement([t],a.EnabledWorkspace),await e.setEnablement([t],a.DisabledWorkspace),await e.setEnablement([t],a.DisabledGlobally),await e.setEnablement([t],a.EnabledGlobally),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test enable an extension also enables dependencies",async()=>{b.push(o("pub.a",{extensionDependencies:["pub.b"]}),l("pub.b"));const t=b[0],u=b[1];await e.waitUntilInitialized(),await e.setEnablement([u,t],a.DisabledGlobally),await e.setEnablement([t],a.EnabledGlobally),s.ok(e.isEnabled(t)),s.ok(e.isEnabled(u)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally),s.strictEqual(e.getEnablementState(u),a.EnabledGlobally)}),test("test enable an extension in workspace with a dependency extension that has auth providers",async()=>{b.push(o("pub.a",{extensionDependencies:["pub.b"]}),l("pub.b",{authentication:[{id:"a",label:"a"}]}));const t=b[0];await e.waitUntilInitialized(),await e.setEnablement([t],a.DisabledWorkspace),await e.setEnablement([t],a.EnabledWorkspace),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.EnabledWorkspace)}),test("test enable an extension with a dependency extension that cannot be enabled",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),null));const t=o("pub.b",{extensionKind:["workspace"]},{location:d.file("pub.b")}),u=o("pub.a",{extensionKind:["workspace"],extensionDependencies:["pub.b"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})}),m=o("pub.b",{extensionKind:["workspace"]},{location:d.file("pub.b").with({scheme:g.vscodeRemote})});b.push(t,u,m),e=i.add(new r(n)),await e.waitUntilInitialized(),await e.setEnablement([u],a.DisabledGlobally),await e.setEnablement([u],a.EnabledGlobally),s.ok(e.isEnabled(u)),s.strictEqual(e.getEnablementState(u),a.EnabledGlobally)}),test("test enable an extension also enables packed extensions",async()=>{b.push(o("pub.a",{extensionPack:["pub.b"]}),l("pub.b"));const t=b[0],u=b[1];await e.setEnablement([u,t],a.DisabledGlobally),await e.setEnablement([t],a.EnabledGlobally),s.ok(e.isEnabled(t)),s.ok(e.isEnabled(u)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally),s.strictEqual(e.getEnablementState(u),a.EnabledGlobally)}),test("test remove an extension from disablement list when uninstalled",async()=>{const t=l("pub.a");b.push(t),e=i.add(new r(n)),await e.setEnablement([t],a.DisabledWorkspace),await e.setEnablement([t],a.DisabledGlobally),k.fire({identifier:{id:"pub.a"},profileLocation:null}),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test isEnabled return false extension is disabled globally",()=>e.setEnablement([l("pub.a")],a.DisabledGlobally).then(()=>s.ok(!e.isEnabled(l("pub.a"))))),test("test isEnabled return false extension is disabled in workspace",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>s.ok(!e.isEnabled(l("pub.a"))))),test("test isEnabled return true extension is not disabled",()=>e.setEnablement([l("pub.a")],a.DisabledWorkspace).then(()=>e.setEnablement([l("pub.c")],a.DisabledGlobally)).then(()=>s.ok(e.isEnabled(l("pub.b"))))),test("test canChangeEnablement return false for language packs",()=>{s.strictEqual(e.canChangeEnablement(l("pub.a",{localizations:[{languageId:"gr",translations:[{id:"vscode",path:"path"}]}]})),!1)}),test("test canChangeEnablement return true for auth extension",()=>{s.strictEqual(e.canChangeEnablement(l("pub.a",{authentication:[{id:"a",label:"a"}]})),!0)}),test("test canChangeEnablement return true for auth extension when user data sync account does not depends on it",()=>{n.stub(I,{account:{authenticationProviderId:"b"}}),e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(l("pub.a",{authentication:[{id:"a",label:"a"}]})),!0)}),test("test canChangeEnablement return true for auth extension when user data sync account depends on it but auto sync is off",()=>{n.stub(I,{account:{authenticationProviderId:"a"}}),e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(l("pub.a",{authentication:[{id:"a",label:"a"}]})),!0)}),test("test canChangeEnablement return false for auth extension and user data sync account depends on it and auto sync is on",()=>{n.stub(M,{isEnabled(){return!0}}),n.stub(I,{account:{authenticationProviderId:"a"}}),e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(l("pub.a",{authentication:[{id:"a",label:"a"}]})),!1)}),test("test canChangeWorkspaceEnablement return true",()=>{s.strictEqual(e.canChangeWorkspaceEnablement(l("pub.a")),!0)}),test("test canChangeWorkspaceEnablement return false if there is no workspace",()=>{n.stub(w,"getWorkbenchState",T.EMPTY),s.strictEqual(e.canChangeWorkspaceEnablement(l("pub.a")),!1)}),test("test canChangeWorkspaceEnablement return false for auth extension",()=>{s.strictEqual(e.canChangeWorkspaceEnablement(l("pub.a",{authentication:[{id:"a",label:"a"}]})),!1)}),test("test canChangeEnablement return false when extensions are disabled in environment",()=>{n.stub(h,{disableExtensions:!0}),e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(l("pub.a")),!1)}),test("test canChangeEnablement return false when the extension is disabled in environment",()=>{n.stub(h,{disableExtensions:["pub.a"]}),e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(l("pub.a")),!1)}),test("test canChangeEnablement return true for system extensions when extensions are disabled in environment",()=>{n.stub(h,{disableExtensions:!0}),e=i.add(new r(n));const t=l("pub.a",void 0,q.System);s.strictEqual(e.canChangeEnablement(t),!0)}),test("test canChangeEnablement return false for system extension when extension is disabled in environment",()=>{n.stub(h,{disableExtensions:["pub.a"]}),e=i.add(new r(n));const t=l("pub.a",void 0,q.System);s.ok(!e.canChangeEnablement(t))}),test("test extension is disabled when disabled in environment",async()=>{const t=l("pub.a");b.push(t),n.stub(h,{disableExtensions:["pub.a"]}),e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByEnvironment)}),test("test extension is enabled globally when enabled in environment",async()=>{const t=l("pub.a");b.push(t),n.stub(h,{enableExtensions:["pub.a"]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test extension is enabled workspace when enabled in environment",async()=>{const t=l("pub.a");b.push(t),await e.setEnablement([t],a.EnabledWorkspace),n.stub(h,{enableExtensions:["pub.a"]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledWorkspace)}),test("test extension is enabled by environment when disabled globally",async()=>{const t=l("pub.a");b.push(t),await e.setEnablement([t],a.DisabledGlobally),n.stub(h,{enableExtensions:["pub.a"]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledByEnvironment)}),test("test extension is enabled by environment when disabled workspace",async()=>{const t=l("pub.a");b.push(t),await e.setEnablement([t],a.DisabledWorkspace),n.stub(h,{enableExtensions:["pub.a"]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledByEnvironment)}),test("test extension is disabled by environment when also enabled in environment",async()=>{const t=l("pub.a");b.push(t),e.setEnablement([t],a.DisabledWorkspace),n.stub(h,{disableExtensions:!0,enableExtensions:["pub.a"]}),e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByEnvironment)}),test("test canChangeEnablement return false when the extension is enabled in environment",()=>{n.stub(h,{enableExtensions:["pub.a"]}),e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(l("pub.a")),!1)}),test("test extension does not support vitrual workspace is not enabled in virtual workspace",async()=>{const t=o("pub.a",{capabilities:{virtualWorkspaces:!1}});n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByVirtualWorkspace)}),test("test web extension from web extension management server and does not support vitrual workspace is enabled in virtual workspace",async()=>{n.stub(c,x(null,p("vscode-remote",n),p("web",n)));const t=o("pub.a",{capabilities:{virtualWorkspaces:!1},browser:"browser.js"},{location:d.file("pub.a").with({scheme:"web"})});n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test web extension from remote extension management server and does not support vitrual workspace is disabled in virtual workspace",async()=>{n.stub(c,x(null,p("vscode-remote",n),p("web",n)));const t=o("pub.a",{capabilities:{virtualWorkspaces:!1},browser:"browser.js"},{location:d.file("pub.a").with({scheme:"vscode-remote"})});n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByVirtualWorkspace)}),test("test enable a remote workspace extension and local ui extension that is a dependency of remote",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),null));const t=o("pub.a",{main:"main.js",extensionKind:["ui"]},{location:d.file("pub.a")}),u=o("pub.a",{main:"main.js",extensionKind:["ui"]},{location:d.file("pub.a").with({scheme:"vscode-remote"})}),m=o("pub.b",{main:"main.js",extensionDependencies:["pub.a"]},{location:d.file("pub.b").with({scheme:"vscode-remote"})});e=i.add(new r(n)),b.push(t,u,m),await e.setEnablement([m,t],a.DisabledGlobally),await e.setEnablement([m,t],a.EnabledGlobally),s.ok(e.isEnabled(m)),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(m),a.EnabledGlobally),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test enable a remote workspace extension also enables its dependency in local",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),null));const t=o("pub.a",{main:"main.js",extensionKind:["ui"]},{location:d.file("pub.a")}),u=o("pub.a",{main:"main.js",extensionKind:["ui"]},{location:d.file("pub.a").with({scheme:"vscode-remote"})}),m=o("pub.b",{main:"main.js",extensionDependencies:["pub.a"]},{location:d.file("pub.b").with({scheme:"vscode-remote"})});e=i.add(new r(n)),b.push(t,u,m),await e.setEnablement([m,t],a.DisabledGlobally),await e.setEnablement([m],a.EnabledGlobally),s.ok(e.isEnabled(m)),s.ok(e.isEnabled(t)),s.strictEqual(e.getEnablementState(m),a.EnabledGlobally),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test canChangeEnablement return false when extension is disabled in virtual workspace",()=>{const t=o("pub.a",{capabilities:{virtualWorkspaces:!1}});n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),s.ok(!e.canChangeEnablement(t))}),test("test extension does not support vitrual workspace is enabled in normal workspace",async()=>{const t=o("pub.a",{capabilities:{virtualWorkspaces:!1}});n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA")}]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test extension supports virtual workspace is enabled in virtual workspace",async()=>{const t=o("pub.a",{capabilities:{virtualWorkspaces:!0}});n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test extension does not support untrusted workspaces is disabled in untrusted workspace",()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:"hello"}}});n.stub(f,{isWorkspaceTrusted(){return!1}}),e=i.add(new r(n)),s.strictEqual(e.getEnablementState(t),a.DisabledByTrustRequirement)}),test("test canChangeEnablement return true when extension is disabled by workspace trust",()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:"hello"}}});n.stub(f,{isWorkspaceTrusted(){return!1}}),e=i.add(new r(n)),s.ok(e.canChangeEnablement(t))}),test("test extension supports untrusted workspaces is enabled in untrusted workspace",()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!0}}});n.stub(f,{isWorkspaceTrusted(){return!1}}),e=i.add(new r(n)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test extension does not support untrusted workspaces is enabled in trusted workspace",()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:""}}});n.stub(f,{isWorkspaceTrusted(){return!0}}),e=i.add(new r(n)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test extension supports untrusted workspaces is enabled in trusted workspace",()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!0}}});n.stub(f,{isWorkspaceTrusted(){return!0}}),e=i.add(new r(n)),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test extension without any value for virtual worksapce is enabled in virtual workspace",async()=>{const t=o("pub.a");n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test local workspace extension is disabled by kind",async()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["workspace"]},{location:d.file("pub.a")});e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByExtensionKind)}),test("test local workspace + ui extension is enabled by kind",async()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["workspace","ui"]},{location:d.file("pub.a")});e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test local ui extension is not disabled by kind",async()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a")});e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test canChangeEnablement return true when the local workspace extension is disabled by kind",()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["workspace"]},{location:d.file("pub.a")});e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(t),!1)}),test("test canChangeEnablement return true for local ui extension",()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a")});e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(t),!0)}),test("test remote ui extension is disabled by kind",async()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByExtensionKind)}),test("test remote ui+workspace extension is disabled by kind",async()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["ui","workspace"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test remote ui extension is disabled by kind when there is no local server",async()=>{n.stub(c,x(null,p("vscode-remote",n),null));const t=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});e=i.add(new r(n)),s.ok(!e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByExtensionKind)}),test("test remote workspace extension is not disabled by kind",async()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["workspace"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});e=i.add(new r(n)),s.ok(e.isEnabled(t)),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test canChangeEnablement return true when the remote ui extension is disabled by kind",()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(t),!1)}),test("test canChangeEnablement return true for remote workspace extension",()=>{n.stub(c,y(n));const t=o("pub.a",{extensionKind:["workspace"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});e=i.add(new r(n)),s.strictEqual(e.canChangeEnablement(t),!0)}),test("test web extension on local server is disabled by kind when web worker is not enabled",async()=>{n.stub(c,y(n));const t=o("pub.a",{browser:"browser.js"},{location:d.file("pub.a")});n.get(W).setUserConfiguration("extensions",{webWorker:!1}),e=i.add(new r(n)),s.strictEqual(e.isEnabled(t),!1),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByExtensionKind)}),test("test web extension on local server is not disabled by kind when web worker is enabled",async()=>{n.stub(c,y(n));const t=o("pub.a",{browser:"browser.js"},{location:d.file("pub.a")});n.get(W).setUserConfiguration("extensions",{webWorker:!0}),e=i.add(new r(n)),s.strictEqual(e.isEnabled(t),!0),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test web extension on remote server is disabled by kind when web worker is not enabled",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),null));const t=o("pub.a",{browser:"browser.js"},{location:d.file("pub.a").with({scheme:"vscode-remote"})});n.get(W).setUserConfiguration("extensions",{webWorker:!1}),e=i.add(new r(n)),s.strictEqual(e.isEnabled(t),!1),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByExtensionKind)}),test("test web extension on remote server is disabled by kind when web worker is enabled",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),null));const t=o("pub.a",{browser:"browser.js"},{location:d.file("pub.a").with({scheme:"vscode-remote"})});n.get(W).setUserConfiguration("extensions",{webWorker:!0}),e=i.add(new r(n)),s.strictEqual(e.isEnabled(t),!1),s.deepStrictEqual(e.getEnablementState(t),a.DisabledByExtensionKind)}),test("test web extension on remote server is enabled in web",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),p("web",n)));const t=o("pub.a",{browser:"browser.js"},{location:d.file("pub.a").with({scheme:"vscode-remote"})});n.get(W).setUserConfiguration("extensions",{webWorker:!1}),e=i.add(new r(n)),s.strictEqual(e.isEnabled(t),!0),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test web extension on web server is not disabled by kind",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),p("web",n)));const t=o("pub.a",{browser:"browser.js"},{location:d.file("pub.a").with({scheme:"web"})});e=i.add(new r(n)),s.strictEqual(e.isEnabled(t),!0),s.deepStrictEqual(e.getEnablementState(t),a.EnabledGlobally)}),test("test state of multipe extensions",async()=>{b.push(l("pub.a"),l("pub.b"),l("pub.c"),l("pub.d"),l("pub.e")),e=i.add(new r(n)),await e.waitUntilInitialized(),await e.setEnablement([b[0]],a.DisabledGlobally),await e.setEnablement([b[1]],a.DisabledWorkspace),await e.setEnablement([b[2]],a.EnabledWorkspace),await e.setEnablement([b[3]],a.EnabledGlobally),s.deepStrictEqual(e.getEnablementStates(b),[a.DisabledGlobally,a.DisabledWorkspace,a.EnabledWorkspace,a.EnabledGlobally,a.EnabledGlobally])}),test("test extension is disabled by dependency if it has a dependency that is disabled",async()=>{b.push(o("pub.a"),o("pub.b",{extensionDependencies:["pub.a"]})),e=i.add(new r(n)),await e.waitUntilInitialized(),await e.setEnablement([b[0]],a.DisabledGlobally),s.strictEqual(e.getEnablementState(b[1]),a.DisabledByExtensionDependency)}),test("test extension is disabled by dependency if it has a dependency that is disabled by virtual workspace",async()=>{b.push(o("pub.a",{capabilities:{virtualWorkspaces:!1}}),o("pub.b",{extensionDependencies:["pub.a"],capabilities:{virtualWorkspaces:!0}})),n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),await e.waitUntilInitialized(),s.strictEqual(e.getEnablementState(b[0]),a.DisabledByVirtualWorkspace),s.strictEqual(e.getEnablementState(b[1]),a.DisabledByExtensionDependency)}),test("test canChangeEnablement return false when extension is disabled by dependency if it has a dependency that is disabled by virtual workspace",async()=>{b.push(o("pub.a",{capabilities:{virtualWorkspaces:!1}}),o("pub.b",{extensionDependencies:["pub.a"],capabilities:{virtualWorkspaces:!0}})),n.stub(w,"getWorkspace",{folders:[{uri:d.file("worskapceA").with({scheme:"virtual"})}]}),e=i.add(new r(n)),await e.waitUntilInitialized(),s.ok(!e.canChangeEnablement(b[1]))}),test("test extension is disabled by dependency if it has a dependency that is disabled by workspace trust",async()=>{b.push(o("pub.a",{main:"hello.js",capabilities:{untrustedWorkspaces:{supported:!1,description:""}}}),o("pub.b",{extensionDependencies:["pub.a"],capabilities:{untrustedWorkspaces:{supported:!0}}})),n.stub(f,{isWorkspaceTrusted(){return!1}}),e=i.add(new r(n)),await e.waitUntilInitialized(),s.strictEqual(e.getEnablementState(b[0]),a.DisabledByTrustRequirement),s.strictEqual(e.getEnablementState(b[1]),a.DisabledByExtensionDependency)}),test("test extension is not disabled by dependency if it has a dependency that is disabled by extension kind",async()=>{n.stub(c,x(p("vscode-local",n),p("vscode-remote",n),null));const t=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a")}),u=o("pub.a",{extensionKind:["ui"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})}),m=o("pub.n",{extensionKind:["workspace"],extensionDependencies:["pub.a"]},{location:d.file("pub.a").with({scheme:g.vscodeRemote})});b.push(t,u,m),e=i.add(new r(n)),await e.waitUntilInitialized(),s.strictEqual(e.getEnablementState(t),a.EnabledGlobally),s.strictEqual(e.getEnablementState(u),a.DisabledByExtensionKind),s.strictEqual(e.getEnablementState(m),a.EnabledGlobally)}),test("test canChangeEnablement return true when extension is disabled by dependency if it has a dependency that is disabled by workspace trust",async()=>{b.push(o("pub.a",{main:"hello.js",capabilities:{untrustedWorkspaces:{supported:!1,description:""}}}),o("pub.b",{extensionDependencies:["pub.a"],capabilities:{untrustedWorkspaces:{supported:!0}}})),n.stub(f,{isWorkspaceTrusted(){return!1}}),e=i.add(new r(n)),await e.waitUntilInitialized(),s.ok(e.canChangeEnablement(b[1]))}),test("test extension is not disabled by dependency even if it has a dependency that is disabled when installed extensions are not set",async()=>{await e.setEnablement([o("pub.a")],a.DisabledGlobally),s.strictEqual(e.getEnablementState(o("pub.b",{extensionDependencies:["pub.a"]})),a.EnabledGlobally)}),test("test extension is disabled by dependency if it has a dependency that is disabled when all extensions are passed",async()=>{b.push(o("pub.a"),o("pub.b",{extensionDependencies:["pub.a"]})),e=i.add(new r(n)),await e.waitUntilInitialized(),await e.setEnablement([b[0]],a.DisabledGlobally),s.deepStrictEqual(e.getEnablementStates(b),[a.DisabledGlobally,a.DisabledByExtensionDependency])}),test("test override workspace to trusted when getting extensions enablements",async()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:"hello"}}});n.stub(f,{isWorkspaceTrusted(){return!1}}),e=i.add(new r(n)),s.strictEqual(e.getEnablementStates([t],{trusted:!0})[0],a.EnabledGlobally)}),test("test override workspace to not trusted when getting extensions enablements",async()=>{const t=o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:"hello"}}});n.stub(f,{isWorkspaceTrusted(){return!0}}),e=i.add(new r(n)),s.strictEqual(e.getEnablementStates([t],{trusted:!1})[0],a.DisabledByTrustRequirement)}),test("test update extensions enablements on trust change triggers change events for extensions depending on workspace trust",async()=>{b.push(o("pub.a",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:"hello"}}}),o("pub.b",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!0}}}),o("pub.c",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!1,description:"hello"}}}),o("pub.d",{main:"main.js",capabilities:{untrustedWorkspaces:{supported:!0}}})),e=i.add(new r(n));const t=S.spy();i.add(e.onEnablementChanged(t)),await e.updateExtensionsEnablementsWhenWorkspaceTrustChanges(),s.strictEqual(t.args[0][0].length,2),s.deepStrictEqual(t.args[0][0][0].identifier,{id:"pub.a"}),s.deepStrictEqual(t.args[0][0][1].identifier,{id:"pub.c"})}),test("test adding an extension that was disabled",async()=>{const t=l("pub.a");b.push(t),e=i.add(new r(n)),await e.setEnablement([t],a.DisabledGlobally);const u=S.spy();i.add(e.onEnablementChanged(u)),D.fire({added:[t],removed:[]}),s.ok(!e.isEnabled(t)),s.strictEqual(e.getEnablementState(t),a.DisabledGlobally),s.strictEqual(u.args[0][0].length,1),s.deepStrictEqual(u.args[0][0][0].identifier,{id:"pub.a"})})});function p(i,n){return{id:i,label:i,extensionManagementService:n.get(_)}}function y(i){const n=p("vscode-local",i),e=p("vscode-remote",i);return x(n,e,null)}function x(i,n,e){return{_serviceBrand:void 0,localExtensionManagementServer:i,remoteExtensionManagementServer:n,webExtensionManagementServer:e,getExtensionManagementServer:E=>E.location.scheme===g.file?i:E.location.scheme===g.vscodeRemote?n:e,getExtensionInstallLocation(E){const k=this.getExtensionManagementServer(E);return k===n?C.Remote:k===e?C.Web:C.Local}}}function l(i,n,e){return o(i,n?{contributes:n}:{},H(e)?{}:{type:e})}function o(i,n={},e={}){const[E,k]=i.split(".");return n={name:k,publisher:E,...n},e={identifier:{id:i},location:d.file(`pub.${k}`),galleryIdentifier:{id:i,uuid:void 0},type:q.User,...e},e.isBuiltin=e.type===q.System,Object.create({manifest:n,...e})}export{r as TestExtensionEnablementService,x as anExtensionManagementServerService};
