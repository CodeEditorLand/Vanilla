import s from"assert";import{DisposableStore as l}from"../../../../../base/common/lifecycle.js";import{isWeb as p}from"../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as m}from"../../../../../base/test/common/utils.js";import{IConfigurationService as E}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as w}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import"../../../../../platform/extensions/common/extensions.js";import{TestInstantiationService as S}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{NullLogService as x}from"../../../../../platform/log/common/log.js";import{IProductService as r}from"../../../../../platform/product/common/productService.js";import{IWorkspaceTrustEnablementService as a}from"../../../../../platform/workspace/common/workspaceTrust.js";import{ExtensionManifestPropertiesService as d}from"../../common/extensionManifestPropertiesService.js";import{TestProductService as b,TestWorkspaceTrustEnablementService as n}from"../../../../test/common/workbenchTestServices.js";suite("ExtensionManifestPropertiesService - ExtensionKind",()=>{let u,e;setup(()=>{u=new l,e=u.add(new d(b,new w,new n,new x))}),teardown(()=>{u.dispose()}),m(),test("declarative with extension dependencies",()=>{s.deepStrictEqual(e.getExtensionKind({extensionDependencies:["ext1"]}),p?["workspace","web"]:["workspace"])}),test("declarative extension pack",()=>{s.deepStrictEqual(e.getExtensionKind({extensionPack:["ext1","ext2"]}),p?["workspace","web"]:["workspace"])}),test("declarative extension pack and extension dependencies",()=>{s.deepStrictEqual(e.getExtensionKind({extensionPack:["ext1","ext2"],extensionDependencies:["ext1","ext2"]}),p?["workspace","web"]:["workspace"])}),test("declarative with unknown contribution point => workspace, web in web and => workspace in desktop",()=>{s.deepStrictEqual(e.getExtensionKind({contributes:{unknownPoint:{something:!0}}}),p?["workspace","web"]:["workspace"])}),test("declarative extension pack with unknown contribution point",()=>{s.deepStrictEqual(e.getExtensionKind({extensionPack:["ext1","ext2"],contributes:{unknownPoint:{something:!0}}}),p?["workspace","web"]:["workspace"])}),test("simple declarative => ui, workspace, web",()=>{s.deepStrictEqual(e.getExtensionKind({}),["ui","workspace","web"])}),test("only browser => web",()=>{s.deepStrictEqual(e.getExtensionKind({browser:"main.browser.js"}),["web"])}),test("only main => workspace",()=>{s.deepStrictEqual(e.getExtensionKind({main:"main.js"}),["workspace"])}),test("main and browser => workspace, web in web and workspace in desktop",()=>{s.deepStrictEqual(e.getExtensionKind({main:"main.js",browser:"main.browser.js"}),p?["workspace","web"]:["workspace"])}),test("browser entry point with workspace extensionKind => workspace, web in web and workspace in desktop",()=>{s.deepStrictEqual(e.getExtensionKind({main:"main.js",browser:"main.browser.js",extensionKind:["workspace"]}),p?["workspace","web"]:["workspace"])}),test("only browser entry point with out extensionKind => web",()=>{s.deepStrictEqual(e.getExtensionKind({browser:"main.browser.js"}),["web"])}),test("simple descriptive with workspace, ui extensionKind => workspace, ui, web in web and workspace, ui in desktop",()=>{s.deepStrictEqual(e.getExtensionKind({extensionKind:["workspace","ui"]}),p?["workspace","ui","web"]:["workspace","ui"])}),test("opt out from web through settings even if it can run in web",()=>{e=u.add(new d(b,new w({remote:{extensionKind:{"pub.a":["-web"]}}}),new n,new x)),s.deepStrictEqual(e.getExtensionKind({browser:"main.browser.js",publisher:"pub",name:"a"}),["ui","workspace"])}),test("opt out from web and include only workspace through settings even if it can run in web",()=>{e=u.add(new d(b,new w({remote:{extensionKind:{"pub.a":["-web","workspace"]}}}),new n,new x)),s.deepStrictEqual(e.getExtensionKind({browser:"main.browser.js",publisher:"pub",name:"a"}),["workspace"])}),test("extension cannot opt out from web",()=>{s.deepStrictEqual(e.getExtensionKind({browser:"main.browser.js",extensionKind:["-web"]}),["web"])}),test("extension cannot opt into web",()=>{s.deepStrictEqual(e.getExtensionKind({main:"main.js",extensionKind:["web","workspace","ui"]}),["workspace","ui"])}),test("extension cannot opt into web only",()=>{s.deepStrictEqual(e.getExtensionKind({main:"main.js",extensionKind:["web"]}),["workspace"])})}),p||suite("ExtensionManifestPropertiesService - ExtensionUntrustedWorkspaceSupportType",()=>{let u,e,c;setup(async()=>{e=new S,c=new w,e.stub(E,c)}),teardown(()=>{u.dispose(),e.dispose()});function i(t,k){u=e.createInstance(d);const f=u.getExtensionUntrustedWorkspaceSupportType(t);s.strictEqual(f,k)}function o(t={}){return Object.create({name:"a",publisher:"pub",version:"1.0.0",...t})}test("test extension workspace trust request when main entry point is missing",()=>{e.stub(r,{}),e.stub(a,new n);const t=o();i(t,!0)}),test("test extension workspace trust request when workspace trust is disabled",async()=>{e.stub(r,{}),e.stub(a,new n(!1));const t=o({main:"./out/extension.js"});i(t,!0)}),test('test extension workspace trust request when "true" override exists in settings.json',async()=>{e.stub(r,{}),e.stub(a,new n),await c.setUserConfiguration("extensions",{supportUntrustedWorkspaces:{"pub.a":{supported:!0}}});const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:"limited"}}});i(t,!0)}),test("test extension workspace trust request when override (false) exists in settings.json",async()=>{e.stub(r,{}),e.stub(a,new n),await c.setUserConfiguration("extensions",{supportUntrustedWorkspaces:{"pub.a":{supported:!1}}});const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:"limited"}}});i(t,!1)}),test("test extension workspace trust request when override (true) for the version exists in settings.json",async()=>{e.stub(r,{}),e.stub(a,new n),await c.setUserConfiguration("extensions",{supportUntrustedWorkspaces:{"pub.a":{supported:!0,version:"1.0.0"}}});const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:"limited"}}});i(t,!0)}),test("test extension workspace trust request when override (false) for the version exists in settings.json",async()=>{e.stub(r,{}),e.stub(a,new n),await c.setUserConfiguration("extensions",{supportUntrustedWorkspaces:{"pub.a":{supported:!1,version:"1.0.0"}}});const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:"limited"}}});i(t,!1)}),test("test extension workspace trust request when override for a different version exists in settings.json",async()=>{e.stub(r,{}),e.stub(a,new n),await c.setUserConfiguration("extensions",{supportUntrustedWorkspaces:{"pub.a":{supported:!0,version:"2.0.0"}}});const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:"limited"}}});i(t,"limited")}),test("test extension workspace trust request when default (true) exists in product.json",()=>{e.stub(r,{extensionUntrustedWorkspaceSupport:{"pub.a":{default:!0}}}),e.stub(a,new n);const t=o({main:"./out/extension.js"});i(t,!0)}),test("test extension workspace trust request when default (false) exists in product.json",()=>{e.stub(r,{extensionUntrustedWorkspaceSupport:{"pub.a":{default:!1}}}),e.stub(a,new n);const t=o({main:"./out/extension.js"});i(t,!1)}),test("test extension workspace trust request when override (limited) exists in product.json",()=>{e.stub(r,{extensionUntrustedWorkspaceSupport:{"pub.a":{override:"limited"}}}),e.stub(a,new n);const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:!0}}});i(t,"limited")}),test("test extension workspace trust request when override (false) exists in product.json",()=>{e.stub(r,{extensionUntrustedWorkspaceSupport:{"pub.a":{override:!1}}}),e.stub(a,new n);const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:!0}}});i(t,!1)}),test("test extension workspace trust request when value exists in package.json",()=>{e.stub(r,{}),e.stub(a,new n);const t=o({main:"./out/extension.js",capabilities:{untrustedWorkspaces:{supported:"limited"}}});i(t,"limited")}),test("test extension workspace trust request when no value exists in package.json",()=>{e.stub(r,{}),e.stub(a,new n);const t=o({main:"./out/extension.js"});i(t,!1)})});
