import{notStrictEqual as h,ok as s,strictEqual as n}from"assert";import{getActiveWindow as i}from"../../../../../base/browser/dom.js";import{mainWindow as S}from"../../../../../base/browser/window.js";import{isLinux as y}from"../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../../../base/test/common/utils.js";import{EDITOR_FONT_DEFAULTS as c}from"../../../../../editor/common/config/editorOptions.js";import{ConfigurationTarget as d,IConfigurationService as u}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as C}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{TestInstantiationService as p}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ITerminalConfigurationService as F,LinuxDistro as f}from"../../browser/terminal.js";import{TestTerminalConfigurationService as z,workbenchInstantiationService as b}from"../../../../test/browser/workbenchTestServices.js";suite("Workbench - TerminalConfigurationService",()=>{const l=v();let m,a;setup(()=>{const t=b(void 0,l);m=t.get(u),a=t.get(F)}),suite("config",()=>{test("should update on any change to terminal.integrated",()=>{const t=a.config;m.onDidChangeConfigurationEmitter.fire({affectsConfiguration:o=>o.startsWith("terminal.integrated"),affectedKeys:new Set(["terminal.integrated.fontWeight"]),change:null,source:d.USER}),h(a.config,t,"Object reference must change")}),suite("onConfigChanged",()=>{test("should fire on any change to terminal.integrated",async()=>{await new Promise(t=>{l.add(a.onConfigChanged(()=>t())),m.onDidChangeConfigurationEmitter.fire({affectsConfiguration:o=>o.startsWith("terminal.integrated"),affectedKeys:new Set(["terminal.integrated.fontWeight"]),change:null,source:d.USER})})})})});function e(t,o){const g=new p;g.set(u,new C(t));const r=l.add(g.createInstance(z));return g.set(F,r),r.setPanelContainer(S.document.body),o&&(r.fontMetrics.linuxDistro=o),r}suite("getFont",()=>{test("fontFamily",()=>{const t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:"bar"}}});s(t.getFont(i()).fontFamily.startsWith("bar"),"terminal.integrated.fontFamily should be selected over editor.fontFamily")}),test("fontFamily (Linux Fedora)",()=>{const t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:null}}},f.Fedora);s(t.getFont(i()).fontFamily.startsWith("'DejaVu Sans Mono'"),"Fedora should have its font overridden when terminal.integrated.fontFamily not set")}),test("fontFamily (Linux Ubuntu)",()=>{const t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:null}}},f.Ubuntu);s(t.getFont(i()).fontFamily.startsWith("'Ubuntu Mono'"),"Ubuntu should have its font overridden when terminal.integrated.fontFamily not set")}),test("fontFamily (Linux Unknown)",()=>{const t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:null}}});s(t.getFont(i()).fontFamily.startsWith("foo"),"editor.fontFamily should be the fallback when terminal.integrated.fontFamily not set")}),test("fontSize 10",()=>{const t=e({editor:{fontFamily:"foo",fontSize:9},terminal:{integrated:{fontFamily:"bar",fontSize:10}}});n(t.getFont(i()).fontSize,10,"terminal.integrated.fontSize should be selected over editor.fontSize")}),test("fontSize 0",()=>{let t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:null,fontSize:0}}},f.Ubuntu);n(t.getFont(i()).fontSize,8,"The minimum terminal font size (with adjustment) should be used when terminal.integrated.fontSize less than it"),t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:null,fontSize:0}}}),n(t.getFont(i()).fontSize,6,"The minimum terminal font size should be used when terminal.integrated.fontSize less than it")}),test("fontSize 1500",()=>{const t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:0,fontSize:1500}}});n(t.getFont(i()).fontSize,100,"The maximum terminal font size should be used when terminal.integrated.fontSize more than it")}),test("fontSize null",()=>{let t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:0,fontSize:null}}},f.Ubuntu);n(t.getFont(i()).fontSize,c.fontSize+2,"The default editor font size (with adjustment) should be used when terminal.integrated.fontSize is not set"),t=e({editor:{fontFamily:"foo"},terminal:{integrated:{fontFamily:0,fontSize:null}}}),n(t.getFont(i()).fontSize,c.fontSize,"The default editor font size should be used when terminal.integrated.fontSize is not set")}),test("lineHeight 2",()=>{const t=e({editor:{fontFamily:"foo",lineHeight:1},terminal:{integrated:{fontFamily:0,lineHeight:2}}});n(t.getFont(i()).lineHeight,2,"terminal.integrated.lineHeight should be selected over editor.lineHeight")}),test("lineHeight 0",()=>{const t=e({editor:{fontFamily:"foo",lineHeight:1},terminal:{integrated:{fontFamily:0,lineHeight:0}}});n(t.getFont(i()).lineHeight,y?1.1:1,"editor.lineHeight should be the default when terminal.integrated.lineHeight not set")})}),suite("configFontIsMonospace",()=>{test("isMonospace monospace",()=>{const t=e({terminal:{integrated:{fontFamily:"monospace"}}});n(t.configFontIsMonospace(),!0,"monospace is monospaced")}),test("isMonospace sans-serif",()=>{const t=e({terminal:{integrated:{fontFamily:"sans-serif"}}});n(t.configFontIsMonospace(),!1,"sans-serif is not monospaced")}),test("isMonospace serif",()=>{const t=e({terminal:{integrated:{fontFamily:"serif"}}});n(t.configFontIsMonospace(),!1,"serif is not monospaced")}),test("isMonospace monospace falls back to editor.fontFamily",()=>{const t=e({editor:{fontFamily:"monospace"},terminal:{integrated:{fontFamily:null}}});n(t.configFontIsMonospace(),!0,"monospace is monospaced")}),test("isMonospace sans-serif falls back to editor.fontFamily",()=>{const t=e({editor:{fontFamily:"sans-serif"},terminal:{integrated:{fontFamily:null}}});n(t.configFontIsMonospace(),!1,"sans-serif is not monospaced")}),test("isMonospace serif falls back to editor.fontFamily",()=>{const t=e({editor:{fontFamily:"serif"},terminal:{integrated:{fontFamily:null}}});n(t.configFontIsMonospace(),!1,"serif is not monospaced")})})});
