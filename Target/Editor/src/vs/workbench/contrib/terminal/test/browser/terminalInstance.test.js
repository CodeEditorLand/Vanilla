import{deepStrictEqual as o,strictEqual as t}from"assert";import{Event as l}from"../../../../../base/common/event.js";import{Disposable as g}from"../../../../../base/common/lifecycle.js";import{Schemas as u}from"../../../../../base/common/network.js";import{isWindows as f}from"../../../../../base/common/platform.js";import{URI as p}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as I}from"../../../../../base/test/common/utils.js";import{IConfigurationService as P}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as b}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{TerminalCapability as w}from"../../../../../platform/terminal/common/capabilities/capabilities.js";import{TerminalCapabilityStore as y}from"../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js";import"../../../../../platform/terminal/common/terminal.js";import"../../../../../platform/workspace/common/workspace.js";import{IViewDescriptorService as x}from"../../../../common/views.js";import{ITerminalConfigurationService as k,ITerminalInstanceService as S}from"../../browser/terminal.js";import{TerminalConfigurationService as F}from"../../browser/terminalConfigurationService.js";import{parseExitResult as s,TerminalInstance as $,TerminalLabelComputer as N}from"../../browser/terminalInstance.js";import{IEnvironmentVariableService as D}from"../../common/environmentVariable.js";import{EnvironmentVariableService as K}from"../../common/environmentVariableService.js";import{ITerminalProfileResolverService as z,ProcessState as n}from"../../common/terminal.js";import{TestViewDescriptorService as E}from"./xterm/xtermTerminal.test.js";import{fixPath as v}from"../../../../services/search/test/browser/queryBuilder.test.js";import{TestTerminalProfileResolverService as R,workbenchInstantiationService as T}from"../../../../test/browser/workbenchTestServices.js";const q="/foo/root1",m=v(q),B="/foo/root2",C=v(B);class W extends R{async getDefaultProfile(){return{profileName:"my-sh",path:"/usr/bin/zsh",env:{TEST:"TEST"},isDefault:!0,isUnsafePath:!1,isFromPath:!0,icon:{id:"terminal-linux"},color:"terminal.ansiYellow"}}}const U={set:()=>{},reset:()=>{},get:()=>{}},A={set:()=>{},reset:()=>{},get:()=>{}};class V extends g{constructor(r){super();this.shouldPersist=r}id=0;get capabilities(){return[]}updateProperty(r,i){throw new Error("Method not implemented.")}onProcessOverrideDimensions;onProcessResolvedShellLaunchConfig;onDidChangeHasChildProcesses;onDidChangeProperty=l.None;onProcessData=l.None;onProcessExit=l.None;onProcessReady=l.None;onProcessTitleChanged=l.None;onProcessShellTypeChanged=l.None;async start(){}shutdown(r){}input(r){}resize(r,i){}clearBuffer(){}acknowledgeDataEvent(r){}async setUnicodeVersion(r){}async getInitialCwd(){return""}async getCwd(){return""}async processBinary(r){}refreshProperty(r){return Promise.resolve("")}}class H extends g{getBackend(){return{onPtyHostExit:l.None,onPtyHostUnresponsive:l.None,onPtyHostResponsive:l.None,onPtyHostRestart:l.None,onDidMoveWindowInstance:l.None,onDidRequestDetach:l.None,createProcess:(d,r,i,a,e,h,O,L)=>this._register(new V(L)),getLatency:()=>Promise.resolve([])}}}suite("Workbench - TerminalInstance",()=>{const c=I();suite("TerminalInstance",()=>{let d;test("should create an instance of TerminalInstance with env from default profile",async()=>{const r=T({configurationService:()=>new b({files:{},terminal:{integrated:{fontFamily:"monospace",scrollback:1e3,fastScrollSensitivity:2,mouseWheelScrollSensitivity:1,unicodeVersion:"6",shellIntegration:{enabled:!0}}}})},c);r.set(z,new W),r.stub(x,new E),r.stub(D,c.add(r.createInstance(K))),r.stub(S,c.add(new H)),d=c.add(r.createInstance($,U,A,{})),await new Promise(i=>setTimeout(i,100)),o(d.shellLaunchConfig.env,{TEST:"TEST"})})}),suite("parseExitResult",()=>{test("should return no message for exit code = undefined",()=>{o(s(void 0,{},n.KilledDuringLaunch,void 0),{code:void 0,message:void 0}),o(s(void 0,{},n.KilledByUser,void 0),{code:void 0,message:void 0}),o(s(void 0,{},n.KilledByProcess,void 0),{code:void 0,message:void 0})}),test("should return no message for exit code = 0",()=>{o(s(0,{},n.KilledDuringLaunch,void 0),{code:0,message:void 0}),o(s(0,{},n.KilledByUser,void 0),{code:0,message:void 0}),o(s(0,{},n.KilledDuringLaunch,void 0),{code:0,message:void 0})}),test("should return friendly message when executable is specified for non-zero exit codes",()=>{o(s(1,{executable:"foo"},n.KilledDuringLaunch,void 0),{code:1,message:'The terminal process "foo" failed to launch (exit code: 1).'}),o(s(1,{executable:"foo"},n.KilledByUser,void 0),{code:1,message:'The terminal process "foo" terminated with exit code: 1.'}),o(s(1,{executable:"foo"},n.KilledByProcess,void 0),{code:1,message:'The terminal process "foo" terminated with exit code: 1.'})}),test("should return friendly message when executable and args are specified for non-zero exit codes",()=>{o(s(1,{executable:"foo",args:["bar","baz"]},n.KilledDuringLaunch,void 0),{code:1,message:`The terminal process "foo 'bar', 'baz'" failed to launch (exit code: 1).`}),o(s(1,{executable:"foo",args:["bar","baz"]},n.KilledByUser,void 0),{code:1,message:`The terminal process "foo 'bar', 'baz'" terminated with exit code: 1.`}),o(s(1,{executable:"foo",args:["bar","baz"]},n.KilledByProcess,void 0),{code:1,message:`The terminal process "foo 'bar', 'baz'" terminated with exit code: 1.`})}),test("should return friendly message when executable and arguments are omitted for non-zero exit codes",()=>{o(s(1,{},n.KilledDuringLaunch,void 0),{code:1,message:"The terminal process failed to launch (exit code: 1)."}),o(s(1,{},n.KilledByUser,void 0),{code:1,message:"The terminal process terminated with exit code: 1."}),o(s(1,{},n.KilledByProcess,void 0),{code:1,message:"The terminal process terminated with exit code: 1."})}),test("should ignore pty host-related errors",()=>{o(s({message:"Could not find pty with id 16"},{},n.KilledDuringLaunch,void 0),{code:void 0,message:void 0})}),test("should format conpty failure code 5",()=>{o(s({code:5,message:"A native exception occurred during launch (Cannot create process, error code: 5)"},{executable:"foo"},n.KilledDuringLaunch,void 0),{code:5,message:'The terminal process failed to launch: Access was denied to the path containing your executable "foo". Manage and change your permissions to get this to work.'})}),test("should format conpty failure code 267",()=>{o(s({code:267,message:"A native exception occurred during launch (Cannot create process, error code: 267)"},{},n.KilledDuringLaunch,"/foo"),{code:267,message:'The terminal process failed to launch: Invalid starting directory "/foo", review your terminal.integrated.cwd setting.'})}),test("should format conpty failure code 1260",()=>{o(s({code:1260,message:"A native exception occurred during launch (Cannot create process, error code: 1260)"},{executable:"foo"},n.KilledDuringLaunch,void 0),{code:1260,message:"The terminal process failed to launch: Windows cannot open this program because it has been prevented by a software restriction policy. For more information, open Event Viewer or contact your system Administrator."})}),test("should format generic failures",()=>{o(s({code:123,message:"A native exception occurred during launch (Cannot create process, error code: 123)"},{},n.KilledDuringLaunch,void 0),{code:123,message:"The terminal process failed to launch: A native exception occurred during launch (Cannot create process, error code: 123)."}),o(s({code:123,message:"foo"},{},n.KilledDuringLaunch,void 0),{code:123,message:"The terminal process failed to launch: foo."})})}),suite("TerminalLabelComputer",()=>{let d,r;function i(e){const h=c.add(new y);return f||h.add(w.NaiveCwdDetection,null),{shellLaunchConfig:{},cwd:"cwd",initialCwd:void 0,processName:"",sequence:void 0,workspaceFolder:void 0,staticTitle:void 0,capabilities:h,title:"",description:"",userHome:void 0,...e}}setup(async()=>{d=T(void 0,c),r=c.add(new y),f||r.add(w.NaiveCwdDetection,null)});function a(e){return d.set(P,new b(e)),d.set(k,c.add(d.createInstance(F))),c.add(d.createInstance(N))}test('should resolve to "" when the template variables are empty',()=>{const e=a({terminal:{integrated:{tabs:{separator:" - ",title:"",description:""}}}});e.refreshLabel(i({capabilities:r,processName:""})),t(e.title,""),t(e.description,"")}),test("should resolve cwd",()=>{const e=a({terminal:{integrated:{tabs:{separator:" - ",title:"${cwd}",description:"${cwd}"}}}});e.refreshLabel(i({capabilities:r,cwd:m})),t(e.title,m),t(e.description,m)}),test("should resolve workspaceFolder",()=>{const e=a({terminal:{integrated:{tabs:{separator:" - ",title:"${workspaceFolder}",description:"${workspaceFolder}"}}}});e.refreshLabel(i({capabilities:r,processName:"zsh",workspaceFolder:{uri:p.from({scheme:u.file,path:"folder"})}})),t(e.title,"folder"),t(e.description,"folder")}),test("should resolve local",()=>{const e=a({terminal:{integrated:{tabs:{separator:" - ",title:"${local}",description:"${local}"}}}});e.refreshLabel(i({capabilities:r,processName:"zsh",shellLaunchConfig:{type:"Local"}})),t(e.title,"Local"),t(e.description,"Local")}),test("should resolve process",()=>{const e=a({terminal:{integrated:{tabs:{separator:" - ",title:"${process}",description:"${process}"}}}});e.refreshLabel(i({capabilities:r,processName:"zsh"})),t(e.title,"zsh"),t(e.description,"zsh")}),test("should resolve sequence",()=>{const e=a({terminal:{integrated:{tabs:{separator:" - ",title:"${sequence}",description:"${sequence}"}}}});e.refreshLabel(i({capabilities:r,sequence:"sequence"})),t(e.title,"sequence"),t(e.description,"sequence")}),test("should resolve task",()=>{const e=a({terminal:{integrated:{tabs:{separator:" ~ ",title:"${process}${separator}${task}",description:"${task}"}}}});e.refreshLabel(i({capabilities:r,processName:"zsh",shellLaunchConfig:{type:"Task"}})),t(e.title,"zsh ~ Task"),t(e.description,"Task")}),test("should resolve separator",()=>{const e=a({terminal:{integrated:{tabs:{separator:" ~ ",title:"${separator}",description:"${separator}"}}}});e.refreshLabel(i({capabilities:r,processName:"zsh",shellLaunchConfig:{type:"Task"}})),t(e.title,"zsh"),t(e.description,"")}),test("should always return static title when specified",()=>{const e=a({terminal:{integrated:{tabs:{separator:" ~ ",title:"${process}",description:"${workspaceFolder}"}}}});e.refreshLabel(i({capabilities:r,processName:"process",workspaceFolder:{uri:p.from({scheme:u.file,path:"folder"})},staticTitle:"my-title"})),t(e.title,"my-title"),t(e.description,"folder")}),test("should provide cwdFolder for all cwds only when in multi-root",()=>{const e=a({terminal:{integrated:{tabs:{separator:" ~ ",title:"${process}${separator}${cwdFolder}",description:"${cwdFolder}"}}}});e.refreshLabel(i({capabilities:r,processName:"process",workspaceFolder:{uri:p.from({scheme:u.file,path:m})},cwd:m})),t(e.title,"process"),t(e.description,""),e.refreshLabel(i({capabilities:r,processName:"process",workspaceFolder:{uri:p.from({scheme:u.file,path:m})},cwd:C})),f?(t(e.title,"process"),t(e.description,"")):(t(e.title,"process ~ root2"),t(e.description,"root2"))}),test("should hide cwdFolder in single folder workspaces when cwd matches the workspace's default cwd even when slashes differ",async()=>{let e=a({terminal:{integrated:{tabs:{separator:" ~ ",title:"${process}${separator}${cwdFolder}",description:"${cwdFolder}"}}}});e.refreshLabel(i({capabilities:r,processName:"process",workspaceFolder:{uri:p.from({scheme:u.file,path:m})},cwd:m})),t(e.title,"process"),t(e.description,""),f||(e=a({terminal:{integrated:{tabs:{separator:" ~ ",title:"${process}${separator}${cwdFolder}",description:"${cwdFolder}"}}}}),e.refreshLabel(i({capabilities:r,processName:"process",workspaceFolder:{uri:p.from({scheme:u.file,path:m})},cwd:C})),t(e.title,"process ~ root2"),t(e.description,"root2"))})})});
