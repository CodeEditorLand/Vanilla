import i from"assert";import{generateUuid as a}from"../../../../../base/common/uuid.js";import{ensureNoDisposablesAreLeakedInTestSuite as $}from"../../../../../base/test/common/utils.js";import{Snippet as s,SnippetSource as r}from"../../browser/snippetsFile.js";suite("SnippetRewrite",function(){$();function e(o,t){const n=new s(!1,["foo"],"foo","foo","foo",o,"foo",r.User,a());typeof t=="boolean"?i.strictEqual(n.codeSnippet,o):i.strictEqual(n.codeSnippet,t)}test("bogous variable rewrite",function(){e("foo",!1),e("hello $1 world$0",!1),e("$foo and $foo","${1:foo} and ${1:foo}"),e("$1 and $SELECTION and $foo","$1 and ${SELECTION} and ${2:foo}"),e(["for (var ${index} = 0; ${index} < ${array}.length; ${index}++) {","	var ${element} = ${array}[${index}];","	$0","}"].join(`
`),["for (var ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {","	var ${3:element} = ${2:array}[${1:index}];","	$0","\\}"].join(`
`))}),test("Snippet choices: unable to escape comma and pipe, #31521",function(){e("console.log(${1|not\\, not, five, 5, 1   23|});",!1)}),test("lazy bogous variable rewrite",function(){const o=new s(!1,["fooLang"],"foo","prefix","desc","This is ${bogous} because it is a ${var}","source",r.Extension,a());i.strictEqual(o.body,"This is ${bogous} because it is a ${var}"),i.strictEqual(o.codeSnippet,"This is ${1:bogous} because it is a ${2:var}"),i.strictEqual(o.isBogous,!0)})});
