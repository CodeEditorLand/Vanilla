import p from"assert";import{decodeBase64 as f,encodeBase64 as b,VSBuffer as l}from"../../../../../base/common/buffer.js";import{Emitter as g}from"../../../../../base/common/event.js";import{mockObject as M}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";import{MemoryRangeType as y}from"../../common/debug.js";import{MemoryRegion as k}from"../../common/debugModel.js";import"../common/mockDebug.js";suite("Debug - Memory",()=>{const c={command:"someCommand",type:"response",seq:1,request_seq:1,success:!0};w(),suite("MemoryRegion",()=>{let i,r,u,n,s;setup(()=>{const m=new Uint8Array(1024);for(let e=0;e<m.length;e++)m[e]=e;i=l.wrap(m),u=new g,r=0,n=M()({onDidInvalidateMemory:u.event}),n.readMemory.callsFake((e,t,d)=>{const o={...c,body:{address:"0",data:b(i.slice(t,t+Math.max(0,d-r))),unreadableBytes:r}};return r=0,Promise.resolve(o)}),n.writeMemory.callsFake((e,t,d)=>{const o=f(d);for(let a=0;a<o.byteLength;a++)i.buffer[t+a]=o.buffer[a];return{...c,body:{bytesWritten:o.byteLength,offset:t}}}),s=new k("ref",n)}),teardown(()=>{s.dispose()}),test("reads a simple range",async()=>{p.deepStrictEqual(await s.read(10,14),[{type:y.Valid,offset:10,length:4,data:l.wrap(new Uint8Array([10,11,12,13]))}])}),test("reads a non-contiguous range",async()=>{r=3,p.deepStrictEqual(await s.read(10,14),[{type:y.Valid,offset:10,length:1,data:l.wrap(new Uint8Array([10]))},{type:y.Unreadable,offset:11,length:3}])})})});
