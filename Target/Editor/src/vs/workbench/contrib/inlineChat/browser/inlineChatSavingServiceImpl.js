var y=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var g=(l,r,s,t)=>{for(var o=t>1?void 0:t?D(r,s):r,i=l.length-1,e;i>=0;i--)(e=l[i])&&(o=(t?e(r,s,o):e(o))||o);return t&&o&&y(r,s,o),o},c=(l,r)=>(s,t)=>r(s,t,l);import{Queue as w,raceCancellation as b}from"../../../../base/common/async.js";import"../../../../base/common/cancellation.js";import{DisposableStore as G,MutableDisposable as P,combinedDisposable as U,dispose as A}from"../../../../base/common/lifecycle.js";import{isCodeEditor as h}from"../../../../editor/browser/editorBrowser.js";import{localize as m}from"../../../../nls.js";import{IConfigurationService as F}from"../../../../platform/configuration/common/configuration.js";import"../../../../platform/progress/common/progress.js";import{SaveReason as k}from"../../../common/editor.js";import"./inlineChatSession.js";import{IInlineChatSessionService as R}from"./inlineChatSessionService.js";import{InlineChatConfigKeys as T}from"../common/inlineChat.js";import{GroupsOrder as M,IEditorGroupsService as z}from"../../../services/editor/common/editorGroupsService.js";import{IEditorService as O}from"../../../services/editor/common/editorService.js";import{IFilesConfigurationService as W}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{ITextFileService as q}from"../../../services/textfile/common/textfiles.js";import"./inlineChatSavingService.js";import{Iterable as S}from"../../../../base/common/iterator.js";import"../../../../platform/editor/common/editor.js";import{Schemas as I}from"../../../../base/common/network.js";import{CellUri as C}from"../../notebook/common/notebookCommon.js";import{getNotebookEditorFromEditorPane as B}from"../../notebook/browser/notebookBrowser.js";import{compare as N}from"../../../../base/common/strings.js";import{IWorkingCopyFileService as x}from"../../../services/workingCopy/common/workingCopyFileService.js";import"../../../../base/common/uri.js";import{ILogService as L}from"../../../../platform/log/common/log.js";import{Event as _}from"../../../../base/common/event.js";import{InlineChatController as V}from"./inlineChatController.js";let u=class{constructor(r,s,t,o,i,e,n,p){this._fileConfigService=r;this._editorGroupService=s;this._textFileService=t;this._editorService=o;this._inlineChatSessionService=i;this._configService=e;this._workingCopyFileService=n;this._logService=p;this._store.add(_.any(i.onDidEndSession,i.onDidStashSession)(d=>{this._sessionData.get(d.session)?.dispose()}))}_store=new G;_saveParticipant=this._store.add(new P);_sessionData=new Map;dispose(){this._store.dispose(),A(this._sessionData.values())}markChanged(r){if(!this._sessionData.has(r)){let s=r.targetUri;if(s.scheme===I.vscodeNotebookCell){const o=C.parse(s);if(!o)return;s=o?.notebook}this._sessionData.size===0&&this._installSaveParticpant();const t=this._fileConfigService.disableAutoSave(s);this._sessionData.set(r,{resourceUri:s,groupCandidate:this._editorGroupService.activeGroup,session:r,dispose:()=>{t.dispose(),this._sessionData.delete(r),this._sessionData.size===0&&this._saveParticipant.clear()}})}}_installSaveParticpant(){const r=new w,s=this._textFileService.files.addSaveParticipant({participate:(o,i,e,n)=>r.queue(()=>this._participate(i.savedFrom??o.textEditorModel?.uri,i.reason,e,n))}),t=this._workingCopyFileService.addSaveParticipant({participate:(o,i,e,n)=>r.queue(()=>this._participate(i.savedFrom??o.resource,i.reason,e,n))});this._saveParticipant.value=U(s,t,r)}async _participate(r,s,t,o){if(s!==k.EXPLICIT||!this._configService.getValue(T.AcceptedOrDiscardBeforeSave))return;const i=new Map;for(const[a,f]of this._sessionData)r?.toString()===f.resourceUri.toString()&&i.set(a,f);if(i.size===0)return;t.report({message:i.size===1?m("inlineChat","Waiting for Inline Chat changes to be Accepted or Discarded..."):m("inlineChat.N","Waiting for Inline Chat changes in {0} editors to be Accepted or Discarded...",i.size)});const{groups:e,orphans:n}=this._getGroupsAndOrphans(i.values()),p=this._openAndWait(e,o).then(()=>{if(!o.isCancellationRequested)return this._openAndWait(S.map(n,a=>[this._editorGroupService.activeGroup,a]),o)}),d=this._whenSessionsEnded(S.concat(e.map(a=>a[1]),n),o);await Promise.race([d,p])}_getGroupsAndOrphans(r){const s=new Map;for(const i of this._editorGroupService.getGroups(M.MOST_RECENTLY_ACTIVE)){const e=i.activeEditorPane?.getControl();h(e)&&s.set(e,i)}const t=[],o=new Set;for(const i of r){const e=this._inlineChatSessionService.getCodeEditor(i.session),n=s.get(e);n?t.push([n,i]):this._editorGroupService.groups.includes(i.groupCandidate)?t.push([i.groupCandidate,i]):o.add(i)}return{groups:t,orphans:o}}async _openAndWait(r,s){const t=new Map;for(const[o,i]of r){let e=t.get(o);e||(e=[],t.set(o,e)),e.push(i)}for(const[o,i]of t){if(s.isCancellationRequested)break;i.sort((e,n)=>N(e.session.targetUri.toString(),n.session.targetUri.toString()));for(const e of i){const n={resource:e.resourceUri},p=await this._editorService.openEditor(n,o);let d;if(e.session.targetUri.scheme===I.vscodeNotebookCell){const a=B(p),f=C.parse(e.session.targetUri);if(a&&a.hasModel()&&f){const v=a.getCellByHandle(f.handle);v&&await a.revealRangeInCenterIfOutsideViewportAsync(v,e.session.wholeRange.value),d=a.codeEditors.find(E=>E[1].getModel()?.uri.toString()===e.session.targetUri.toString())?.[1]}}else h(p?.getControl())&&(d=p.getControl());if(!d)break;this._inlineChatSessionService.moveSession(e.session,d),V.get(d)?.showSaveHint(),this._logService.info("WAIT for session to end",d.getId(),e.session.targetUri.toString()),await this._whenSessionsEnded(S.single(e),s)}}}async _whenSessionsEnded(r,s){const t=new Map;for(const e of r)t.set(e.session,e);if(t.size===0)return;let o;const i=new Promise(e=>{o=_.any(this._inlineChatSessionService.onDidEndSession,this._inlineChatSessionService.onDidStashSession)(n=>{const p=t.get(n.session);p&&(p.dispose(),t.delete(n.session),t.size===0&&e())})});try{await b(i,s)}finally{o?.dispose()}}};u=g([c(0,W),c(1,z),c(2,q),c(3,O),c(4,R),c(5,F),c(6,x),c(7,L)],u);export{u as InlineChatSavingServiceImpl};
