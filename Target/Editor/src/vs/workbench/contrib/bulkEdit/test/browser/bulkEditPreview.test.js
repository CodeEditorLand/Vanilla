import i from"assert";import{Event as f}from"../../../../../base/common/event.js";import{IFileService as m}from"../../../../../platform/files/common/files.js";import{mock as d}from"../../../../test/common/workbenchTestServices.js";import{InstantiationService as p}from"../../../../../platform/instantiation/common/instantiationService.js";import{ServiceCollection as k}from"../../../../../platform/instantiation/common/serviceCollection.js";import"../../../../../platform/instantiation/common/instantiation.js";import{IModelService as v}from"../../../../../editor/common/services/model.js";import{URI as n}from"../../../../../base/common/uri.js";import{BulkFileOperations as a}from"../../browser/preview/bulkEditPreview.js";import{Range as l}from"../../../../../editor/common/core/range.js";import{ResourceFileEdit as r,ResourceTextEdit as u}from"../../../../../editor/browser/services/bulkEditService.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";suite("BulkEditPreview",function(){const s=w();let o;setup(function(){const t=new class extends d(){onDidFilesChange=f.None;async exists(){return!0}},e=new class extends d(){getModel(){return null}getModels(){return[]}};o=new p(new k([m,t],[v,e]))}),test("one needsConfirmation unchecks all of file",async function(){const t=[new r(void 0,n.parse("some:///uri1"),void 0,{label:"cat1",needsConfirmation:!0}),new r(n.parse("some:///uri1"),n.parse("some:///uri2"),void 0,{label:"cat2",needsConfirmation:!1})],e=await o.invokeFunction(a.create,t);s.add(e),i.strictEqual(e.fileOperations.length,1),i.strictEqual(e.checked.isChecked(t[0]),!1)}),test("has categories",async function(){const t=[new r(void 0,n.parse("some:///uri1"),void 0,{label:"uri1",needsConfirmation:!0}),new r(void 0,n.parse("some:///uri2"),void 0,{label:"uri2",needsConfirmation:!1})],e=await o.invokeFunction(a.create,t);s.add(e),i.strictEqual(e.categories.length,2),i.strictEqual(e.categories[0].metadata.label,"uri1"),i.strictEqual(e.categories[1].metadata.label,"uri2")}),test("has not categories",async function(){const t=[new r(void 0,n.parse("some:///uri1"),void 0,{label:"uri1",needsConfirmation:!0}),new r(void 0,n.parse("some:///uri2"),void 0,{label:"uri1",needsConfirmation:!1})],e=await o.invokeFunction(a.create,t);s.add(e),i.strictEqual(e.categories.length,1),i.strictEqual(e.categories[0].metadata.label,"uri1"),i.strictEqual(e.categories[0].metadata.label,"uri1")}),test("category selection",async function(){const t=[new r(void 0,n.parse("some:///uri1"),void 0,{label:"C1",needsConfirmation:!1}),new u(n.parse("some:///uri2"),{text:"foo",range:new l(1,1,1,1)},void 0,{label:"C2",needsConfirmation:!1})],e=await o.invokeFunction(a.create,t);s.add(e),i.strictEqual(e.checked.isChecked(t[0]),!0),i.strictEqual(e.checked.isChecked(t[1]),!0),i.ok(t===e.getWorkspaceEdit()),e.checked.updateChecked(t[0],!1);const c=e.getWorkspaceEdit();i.ok(t!==c),i.strictEqual(t.length,2),i.strictEqual(c.length,1)}),test("fix bad metadata",async function(){const t=[new r(void 0,n.parse("some:///uri1"),void 0,{label:"C1",needsConfirmation:!0}),new u(n.parse("some:///uri1"),{text:"foo",range:new l(1,1,1,1)},void 0,{label:"C2",needsConfirmation:!1})],e=await o.invokeFunction(a.create,t);s.add(e),i.strictEqual(e.checked.isChecked(t[0]),!1),i.strictEqual(e.checked.isChecked(t[1]),!1)})});
