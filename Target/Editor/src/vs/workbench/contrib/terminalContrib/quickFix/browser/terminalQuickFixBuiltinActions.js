import{URI as x}from"../../../../../base/common/uri.js";import{localize as l}from"../../../../../nls.js";import{TerminalQuickFixType as u}from"./quickFix.js";const m=/git/,g=/and can be fast-forwarded/,d=/git\s+push/,f=/error: did you mean `--(.+)` \(with two dashes\)\?/,M=/(?:(most similar commands? (is|are)))/,F=/(?:address already in use (?:0\.0\.0\.0|127\.0\.0\.1|localhost|::):|Unable to bind [^ ]*:|can't listen on port |listen EADDRINUSE [^ ]*:)(?<portNumber>\d{4,5})/,T=/git push --set-upstream origin (?<branchName>[^\s]+)/,C=/remote:\s*(?<link>https:\/\/github\.com\/.+\/.+\/pull\/new\/.+)/,p=/Suggestion \[General\]:/,h=/Suggestion \[cmd-not-found\]:/;var k=(t=>(t.Builtin="builtin",t))(k||{});function G(){return{id:"Git Similar",type:"internal",commandLineMatcher:m,outputMatcher:{lineMatcher:M,anchor:"bottom",offset:0,length:10},commandExitResult:"error",getQuickFixes:n=>{const t=n.outputMatch?.regexMatch[0];if(!t||!n.outputMatch)return;const e=[],i=n.outputMatch.outputLines.findIndex(r=>r.includes(t))+1,o=n.outputMatch.outputLines.map(r=>r.trim());for(let r=i;r<o.length;r++){const a=o[r];a&&e.push({id:"Git Similar",type:u.TerminalCommand,terminalCommand:n.commandLine.replace(/git\s+[^\s]+/,()=>`git ${a}`),shouldExecute:!0,source:"builtin"})}return e}}}function S(){return{id:"Git Pull",type:"internal",commandLineMatcher:m,outputMatcher:{lineMatcher:g,anchor:"bottom",offset:0,length:8},commandExitResult:"success",getQuickFixes:n=>({type:u.TerminalCommand,id:"Git Pull",terminalCommand:"git pull",shouldExecute:!0,source:"builtin"})}}function O(){return{id:"Git Two Dashes",type:"internal",commandLineMatcher:m,outputMatcher:{lineMatcher:f,anchor:"bottom",offset:0,length:2},commandExitResult:"error",getQuickFixes:n=>{const t=n?.outputMatch?.regexMatch?.[1];if(t)return{type:u.TerminalCommand,id:"Git Two Dashes",terminalCommand:n.commandLine.replace(` -${t}`,()=>` --${t}`),shouldExecute:!0,source:"builtin"}}}}function w(n){return{id:"Free Port",type:"internal",commandLineMatcher:/.+/,outputMatcher:{lineMatcher:F,anchor:"bottom",offset:0,length:30},commandExitResult:"error",getQuickFixes:t=>{const e=t?.outputMatch?.regexMatch?.groups?.portNumber;if(!e)return;const i=l("terminal.freePort","Free port {0}",e);return{type:u.Port,class:void 0,tooltip:i,id:"Free Port",label:i,enabled:!0,source:"builtin",run:()=>n(e,t.commandLine)}}}}function L(){return{id:"Git Push Set Upstream",type:"internal",commandLineMatcher:d,outputMatcher:{lineMatcher:T,anchor:"bottom",offset:0,length:8},commandExitResult:"error",getQuickFixes:n=>{const t=n.outputMatch,e="git push --set-upstream origin ${group:branchName}";if(!t)return;const i=t.regexMatch.groups;if(!i)return;const o=[];let r=e;for(const[a,c]of Object.entries(i)){const s=`\${group:${a}}`;if(!e.includes(s))return[];r=r.replaceAll(s,()=>c)}if(r)return o.push({type:u.TerminalCommand,id:"Git Push Set Upstream",terminalCommand:r,shouldExecute:!0,source:"builtin"}),o}}}function U(){return{id:"Git Create Pr",type:"internal",commandLineMatcher:d,outputMatcher:{lineMatcher:C,anchor:"bottom",offset:4,length:12},commandExitResult:"success",getQuickFixes:n=>{const t=n?.outputMatch?.regexMatch?.groups?.link?.trimEnd();return t?{id:"Git Create Pr",label:l("terminal.createPR","Create PR {0}",t),enabled:!0,type:u.Opener,uri:x.parse(t),source:"builtin"}:void 0}}}function B(){return{id:"Pwsh General Error",type:"internal",commandLineMatcher:/.+/,outputMatcher:{lineMatcher:p,anchor:"bottom",offset:0,length:10},commandExitResult:"error",getQuickFixes:n=>{const t=n.outputMatch?.regexMatch.input?.split(`
`);if(!t)return;let e=0,i=!1;for(;e<t.length;e++)if(t[e].match(p)){i=!0;break}if(!i)return;const o=t[e+1].match(/The most similar commands are: (?<values>.+)./)?.groups?.values?.split(", ");if(!o)return;const r=[];for(const a of o)r.push({id:"Pwsh General Error",type:u.TerminalCommand,terminalCommand:a,source:"builtin"});return r}}}function N(){return{id:"Unix Command Not Found",type:"internal",commandLineMatcher:/.+/,outputMatcher:{lineMatcher:h,anchor:"bottom",offset:0,length:10},commandExitResult:"error",getQuickFixes:n=>{const t=n.outputMatch?.regexMatch.input?.split(`
`);if(!t)return;let e=0,i=!1;for(;e<t.length;e++)if(t[e].match(h)){i=!0;break}if(!i)return;const o=[];let r=!1;for(;e<t.length;e++){const a=t[e].trim();if(a.length===0)break;const c=a.match(/You also have .+ installed, you can run '(?<command>.+)' instead./)?.groups?.command;if(c){o.push({id:"Pwsh Unix Command Not Found Error",type:u.TerminalCommand,terminalCommand:c,source:"builtin"}),r=!1;continue}if(a.match(/Command '.+' not found, but can be installed with:/)){r=!0;continue}r&&o.push({id:"Pwsh Unix Command Not Found Error",type:u.TerminalCommand,terminalCommand:a.trim(),source:"builtin"})}return o}}}export{F as FreePortOutputRegex,m as GitCommandLineRegex,C as GitCreatePrOutputRegex,g as GitPullOutputRegex,d as GitPushCommandLineRegex,T as GitPushOutputRegex,M as GitSimilarOutputRegex,f as GitTwoDashesRegex,p as PwshGeneralErrorOutputRegex,h as PwshUnixCommandNotFoundErrorOutputRegex,k as QuickFixSource,w as freePort,U as gitCreatePr,S as gitPull,L as gitPushSetUpstream,G as gitSimilar,O as gitTwoDashes,B as pwshGeneralError,N as pwshUnixCommandNotFoundError};
