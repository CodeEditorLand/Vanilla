import s from"assert";import{CancellationToken as g}from"../../../../../base/common/cancellation.js";import{URI as C}from"../../../../../base/common/uri.js";import{assertSnapshot as I}from"../../../../../base/test/common/snapshot.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";import{Range as A}from"../../../../../editor/common/core/range.js";import{IConfigurationService as R}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as y}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{IContextKeyService as b}from"../../../../../platform/contextkey/common/contextkey.js";import{ServiceCollection as x}from"../../../../../platform/instantiation/common/serviceCollection.js";import{TestInstantiationService as E}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MockContextKeyService as P}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{ILogService as k,NullLogService as N}from"../../../../../platform/log/common/log.js";import{IStorageService as D}from"../../../../../platform/storage/common/storage.js";import{ITelemetryService as T}from"../../../../../platform/telemetry/common/telemetry.js";import{NullTelemetryService as z}from"../../../../../platform/telemetry/common/telemetryUtils.js";import{IWorkspaceContextService as L}from"../../../../../platform/workspace/common/workspace.js";import{ChatAgentLocation as m,ChatAgentService as F,IChatAgentService as W}from"../../common/chatAgents.js";import"../../common/chatModel.js";import{IChatService as M}from"../../common/chatService.js";import{ChatService as u}from"../../common/chatServiceImpl.js";import{ChatSlashCommandService as O,IChatSlashCommandService as U}from"../../common/chatSlashCommands.js";import{IChatVariablesService as K}from"../../common/chatVariables.js";import{MockChatService as V}from"./mockChatService.js";import{MockChatVariablesService as $}from"./mockChatVariables.js";import{IWorkbenchAssignmentService as J}from"../../../../services/assignment/common/assignmentService.js";import{NullWorkbenchAssignmentService as j}from"../../../../services/assignment/test/common/nullAssignmentService.js";import{IExtensionService as B,nullExtensionDescription as h}from"../../../../services/extensions/common/extensions.js";import{IViewsService as G}from"../../../../services/views/common/viewsService.js";import{TestContextService as H,TestExtensionService as q,TestStorageService as Q}from"../../../../test/common/workbenchTestServices.js";const c="ChatProviderWithUsedContext",v={id:c,name:c,extensionId:h.identifier,publisherDisplayName:"",extensionPublisherId:"",extensionDisplayName:"",locations:[m.Panel],metadata:{},slashCommands:[],disambiguation:[],async invoke(e,p,n,i){return p({documents:[{uri:C.file("/test/path/to/file"),version:3,ranges:[new A(1,1,2,2)]}],kind:"usedContext"}),{metadata:{metadataKey:"value"}}},async provideFollowups(e,p){return[{kind:"reply",message:"Something else",agentId:"",tooltip:"a tooltip"}]}};function S(e){return{name:e,id:e,extensionId:h.identifier,extensionPublisherId:"",publisherDisplayName:"",extensionDisplayName:"",locations:[m.Panel],metadata:{},slashCommands:[],disambiguation:[]}}suite("ChatService",()=>{const e=w();let p,n,i;setup(async()=>{n=e.add(new E(new x([K,new $],[J,new j]))),n.stub(D,p=e.add(new Q)),n.stub(k,new N),n.stub(T,z),n.stub(B,new q),n.stub(b,new P),n.stub(G,new q),n.stub(L,new H),n.stub(U,e.add(n.createInstance(O))),n.stub(R,new y),n.stub(M,new V),i=n.createInstance(F),n.stub(W,i);const r={async invoke(t,a,o,d){return{}}};e.add(i.registerAgent("testAgent",{...S("testAgent"),isDefault:!0})),e.add(i.registerAgent(c,S(c))),e.add(i.registerAgentImplementation("testAgent",r)),i.updateAgent("testAgent",{requester:{name:"test"}})}),test("retrieveSession",async()=>{const r=e.add(n.createInstance(u)),t=e.add(r.startSession(m.Panel,g.None));await t.waitForInitialization(),t.addRequest({parts:[],text:"request 1"},{variables:[]},0);const a=e.add(r.startSession(m.Panel,g.None));await a.waitForInitialization(),a.addRequest({parts:[],text:"request 2"},{variables:[]},0),p.flush();const o=e.add(n.createInstance(u)),d=e.add(o.getOrRestoreSession(t.sessionId));await d.waitForInitialization();const l=e.add(o.getOrRestoreSession(a.sessionId));await l.waitForInitialization(),s.deepStrictEqual(d.getRequests()[0]?.message.text,"request 1"),s.deepStrictEqual(l.getRequests()[0]?.message.text,"request 2")}),test("addCompleteRequest",async()=>{const r=e.add(n.createInstance(u)),t=e.add(r.startSession(m.Panel,g.None));s.strictEqual(t.getRequests().length,0),await r.addCompleteRequest(t.sessionId,"test request",void 0,0,{message:"test response"}),s.strictEqual(t.getRequests().length,1),s.ok(t.getRequests()[0].response),s.strictEqual(t.getRequests()[0].response?.response.toString(),"test response")}),test("sendRequest fails",async()=>{const r=e.add(n.createInstance(u)),t=e.add(r.startSession(m.Panel,g.None)),a=await r.sendRequest(t.sessionId,`@${c} test request`);s(a),await a.responseCompletePromise,await I(t.toExport())}),test("history",async()=>{const r={async invoke(X,Y,f,Z){return{metadata:{historyLength:f.length}}}};e.add(i.registerAgent("defaultAgent",{...S("defaultAgent"),isDefault:!0})),e.add(i.registerAgent("agent2",S("agent2"))),e.add(i.registerAgentImplementation("defaultAgent",r)),e.add(i.registerAgentImplementation("agent2",r));const t=e.add(n.createInstance(u)),a=e.add(t.startSession(m.Panel,g.None)),o=await t.sendRequest(a.sessionId,"test request",{agentId:"defaultAgent"});s(o),await o.responseCompletePromise,s.strictEqual(a.getRequests().length,1),s.strictEqual(a.getRequests()[0].response?.result?.metadata?.historyLength,0);const d=await t.sendRequest(a.sessionId,"test request",{agentId:"agent2"});s(d),await d.responseCompletePromise,s.strictEqual(a.getRequests().length,2),s.strictEqual(a.getRequests()[1].response?.result?.metadata?.historyLength,0);const l=await t.sendRequest(a.sessionId,"test request",{agentId:"defaultAgent"});s(l),await l.responseCompletePromise,s.strictEqual(a.getRequests().length,3),s.strictEqual(a.getRequests()[2].response?.result?.metadata?.historyLength,2)}),test("can serialize",async()=>{e.add(i.registerAgentImplementation(c,v)),i.updateAgent(c,{requester:{name:"test"}});const r=e.add(n.createInstance(u)),t=e.add(r.startSession(m.Panel,g.None));s.strictEqual(t.getRequests().length,0),await I(t.toExport());const a=await r.sendRequest(t.sessionId,`@${c} test request`);s(a),await a.responseCompletePromise,s.strictEqual(t.getRequests().length,1);const o=await r.sendRequest(t.sessionId,"test request 2");s(o),await o.responseCompletePromise,s.strictEqual(t.getRequests().length,2),await I(t.toExport())}),test("can deserialize",async()=>{let r;e.add(i.registerAgentImplementation(c,v));{const o=e.add(n.createInstance(u)),d=e.add(o.startSession(m.Panel,g.None));s.strictEqual(d.getRequests().length,0);const l=await o.sendRequest(d.sessionId,`@${c} test request`);s(l),await l.responseCompletePromise,r=JSON.parse(JSON.stringify(d))}const a=e.add(n.createInstance(u)).loadSessionFromContent(r);s(a),await I(a.toExport())})});
