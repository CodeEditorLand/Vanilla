import t from"assert";import{URI as b}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as q,toResource as r}from"../../../../../base/test/common/utils.js";import{FileEditorInput as w}from"../../browser/editors/fileEditorInput.js";import{workbenchInstantiationService as M,TestServiceAccessor as F,getLastResolvedFileStat as S}from"../../../../test/browser/workbenchTestServices.js";import"../../../../../platform/instantiation/common/instantiation.js";import{Verbosity as D,EditorExtensions as h,EditorInputCapabilities as f}from"../../../../common/editor.js";import{EncodingMode as x,TextFileOperationError as T,TextFileOperationResult as j}from"../../../../services/textfile/common/textfiles.js";import{FileOperationResult as k,NotModifiedSinceFileOperationError as v,TooLargeFileOperationError as C}from"../../../../../platform/files/common/files.js";import{TextFileEditorModel as L}from"../../../../services/textfile/common/textFileEditorModel.js";import{timeout as P}from"../../../../../base/common/async.js";import{PLAINTEXT_LANGUAGE_ID as N}from"../../../../../editor/common/languages/modesRegistry.js";import{DisposableStore as g}from"../../../../../base/common/lifecycle.js";import{BinaryEditorModel as A}from"../../../../common/editor/binaryEditorModel.js";import"../../../../../platform/editor/common/editor.js";import{Registry as m}from"../../../../../platform/registry/common/platform.js";import{FileEditorInputSerializer as O}from"../../browser/editors/fileEditorHandler.js";import{InMemoryFileSystemProvider as z}from"../../../../../platform/files/common/inMemoryFilesystemProvider.js";import{TextEditorService as U}from"../../../../services/textfile/common/textEditorService.js";suite("Files - FileEditorInput",()=>{const n=new g;let E,u;function o(e,i,s,a,l,d){return n.add(E.createInstance(w,e,i,a,l,void 0,s,d))}class I extends U{createTextEditor(i){return o(i.resource)}async resolveTextEditor(i){return o(i.resource)}}setup(()=>{E=M({textEditorService:e=>e.createInstance(I)},n),u=E.createInstance(F)}),teardown(()=>{n.clear()}),test("Basics",async function(){let e=o(r.call(this,"/foo/bar/file.js"));const i=o(r.call(this,"foo/bar/otherfile.js")),s=o(r.call(this,"foo/bar/file.js"));t(e.matches(e)),t(e.matches(s)),t(!e.matches(i)),t.ok(e.getName()),t.ok(e.getDescription()),t.ok(e.getTitle(D.SHORT)),t.ok(!e.hasCapability(f.Untitled)),t.ok(!e.hasCapability(f.Readonly)),t.ok(!e.isReadonly()),t.ok(!e.hasCapability(f.Singleton)),t.ok(!e.hasCapability(f.RequiresTrust));const a=e.toUntyped({preserveViewState:0});t.strictEqual(a.resource.toString(),e.resource.toString()),t.strictEqual("file.js",e.getName()),t.strictEqual(r.call(this,"/foo/bar/file.js").fsPath,e.resource.fsPath),t(e.resource instanceof b),e=o(r.call(this,"/foo/bar.html"));const l=o(r.call(this,"/foo/bar/file.js")),d=o(r.call(this,"/foo/bar/file.js"));let c=await l.resolve();t.ok(l.isResolved());const p=c;c=await l.resolve(),t(p===c);try{g.DISABLE_DISPOSED_WARNING=!0;const y=await d.resolve();t(y===p),l.dispose(),c=await l.resolve(),t(p===c),l.dispose(),d.dispose(),p.dispose(),c=await l.resolve(),t(p!==c);const R=S(c);c=await l.resolve(),await P(0),t(R!==S(c))}finally{g.DISABLE_DISPOSED_WARNING=!1}}),test("reports as untitled without supported file scheme",async function(){const e=o(r.call(this,"/foo/bar/file.js").with({scheme:"someTestingScheme"}));t.ok(e.hasCapability(f.Untitled)),t.ok(!e.hasCapability(f.Readonly)),t.ok(!e.isReadonly())}),test("reports as readonly with readonly file scheme",async function(){const e=n.add(new z);e.setReadOnly(!0),n.add(u.fileService.registerProvider("someTestingReadonlyScheme",e));const i=o(r.call(this,"/foo/bar/file.js").with({scheme:"someTestingReadonlyScheme"}));t.ok(!i.hasCapability(f.Untitled)),t.ok(i.hasCapability(f.Readonly)),t.ok(i.isReadonly())}),test("preferred resource",function(){const e=r.call(this,"/foo/bar/updatefile.js"),i=r.call(this,"/foo/bar/UPDATEFILE.js"),s=o(e);t.strictEqual(s.resource.toString(),e.toString()),t.strictEqual(s.preferredResource.toString(),e.toString());const a=o(e,i);t.strictEqual(a.resource.toString(),e.toString()),t.strictEqual(a.preferredResource.toString(),i.toString());let l=!1;n.add(a.onDidChangeLabel(c=>{l=!0})),t.strictEqual(a.getName(),"UPDATEFILE.js");const d=r.call(this,"/FOO/BAR/updateFILE.js");a.setPreferredResource(d),t.strictEqual(a.resource.toString(),e.toString()),t.strictEqual(a.preferredResource.toString(),d.toString()),t.strictEqual(a.getName(),"updateFILE.js"),t.strictEqual(l,!0)}),test("preferred language",async function(){const e="file-input-test";n.add(u.languageService.registerLanguage({id:e}));const i=o(r.call(this,"/foo/bar/file.js"),void 0,e);t.strictEqual(i.getPreferredLanguageId(),e);const s=n.add(await i.resolve());t.strictEqual(s.textEditorModel.getLanguageId(),e),i.setLanguageId("text"),t.strictEqual(i.getPreferredLanguageId(),"text"),t.strictEqual(s.textEditorModel.getLanguageId(),N);const a=o(r.call(this,"/foo/bar/file.js"));a.setPreferredLanguageId(e);const l=n.add(await a.resolve());t.strictEqual(l.textEditorModel.getLanguageId(),e)}),test("preferred contents",async function(){const e=o(r.call(this,"/foo/bar/file.js"),void 0,void 0,void 0,void 0,"My contents"),i=n.add(await e.resolve());t.strictEqual(i.textEditorModel.getValue(),"My contents"),t.strictEqual(e.isDirty(),!0);const s=e.toUntyped({preserveViewState:0});t.strictEqual(s.contents,"My contents");const a=e.toUntyped();t.strictEqual(a.contents,void 0),e.setPreferredContents("Other contents"),await e.resolve(),t.strictEqual(i.textEditorModel.getValue(),"Other contents"),i.textEditorModel?.setValue("Changed contents"),await e.resolve(),t.strictEqual(i.textEditorModel.getValue(),"Changed contents");const l=o(r.call(this,"/foo/bar/file.js"));l.setPreferredContents("My contents");const d=await l.resolve();t.strictEqual(d.textEditorModel.getValue(),"My contents"),t.strictEqual(l.isDirty(),!0)}),test("matches",function(){const e=o(r.call(this,"/foo/bar/updatefile.js")),i=o(r.call(this,"/foo/bar/updatefile.js")),s=o(r.call(this,"/foo/bar/other.js")),a=o(r.call(this,"/foo/bar/UPDATEFILE.js"));t.strictEqual(e.matches(e),!0),t.strictEqual(e.matches(i),!0),t.strictEqual(e.matches(s),!1),t.strictEqual(e.matches(a),!1)}),test("getEncoding/setEncoding",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));await e.setEncoding("utf16",x.Encode),t.strictEqual(e.getEncoding(),"utf16");const i=n.add(await e.resolve());t.strictEqual(e.getEncoding(),i.getEncoding())}),test("save",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));n.add(await e.resolve()).textEditorModel.setValue("changed"),t.ok(e.isDirty()),t.ok(e.isModified()),await e.save(0),t.ok(!e.isDirty()),t.ok(!e.isModified())}),test("revert",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));n.add(await e.resolve()).textEditorModel.setValue("changed"),t.ok(e.isDirty()),t.ok(e.isModified()),await e.revert(0),t.ok(!e.isDirty()),t.ok(!e.isModified()),e.dispose(),t.ok(e.isDisposed())}),test("resolve handles binary files",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));u.textFileService.setReadStreamErrorOnce(new T("error",j.FILE_IS_BINARY));const i=n.add(await e.resolve());t.ok(i)}),test("resolve throws for too large files",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));let i;u.textFileService.setReadStreamErrorOnce(new C("error",k.FILE_TOO_LARGE,1e3));try{await e.resolve()}catch(s){i=s}t.ok(i)}),test("attaches to model when created and reports dirty",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));let i=0;n.add(e.onDidChangeDirty(()=>{i++})),n.add(await u.textFileService.files.resolve(e.resource)).textEditorModel?.setValue("hello world"),t.strictEqual(i,1),t.ok(e.isDirty())}),test("force open text/binary",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));e.setForceOpenAsBinary();let i=n.add(await e.resolve());t.ok(i instanceof A),e.setForceOpenAsText(),i=n.add(await e.resolve()),t.ok(i instanceof L)}),test("file editor serializer",async function(){E.invokeFunction(y=>m.as(h.EditorFactory).start(y));const e=o(r.call(this,"/foo/bar/updatefile.js"));n.add(m.as(h.EditorFactory).registerEditorSerializer("workbench.editors.files.fileEditorInput",O));const i=m.as(h.EditorFactory).getEditorSerializer(e.typeId);i||t.fail("File Editor Input Serializer missing"),t.strictEqual(i.canSerialize(e),!0);const s=i.serialize(e);s||t.fail("Unexpected serialized file input");const a=i.deserialize(E,s);t.strictEqual(a?e.matches(a):!1,!0);const l=r.call(this,"/foo/bar/UPDATEfile.js"),d=o(r.call(this,"/foo/bar/updatefile.js"),l),c=i.serialize(d);c||t.fail("Unexpected serialized file input");const p=i.deserialize(E,c);t.strictEqual(d.resource.toString(),p.resource.toString()),t.strictEqual(d.preferredResource.toString(),p.preferredResource.toString())}),test("preferred name/description",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js").with({scheme:"test-custom"}),void 0,void 0,"My Name","My Description");let i=0;n.add(e.onDidChangeLabel(()=>{i++})),t.strictEqual(e.getName(),"My Name"),t.strictEqual(e.getDescription(),"My Description"),e.setPreferredName("My Name 2"),e.setPreferredDescription("My Description 2"),t.strictEqual(e.getName(),"My Name 2"),t.strictEqual(e.getDescription(),"My Description 2"),t.strictEqual(i,2),e.dispose();const s=o(r.call(this,"/foo/bar/updatefile.js"),void 0,void 0,"My Name","My Description");i=0,n.add(s.onDidChangeLabel(()=>{i++})),t.notStrictEqual(s.getName(),"My Name"),t.notStrictEqual(s.getDescription(),"My Description"),s.setPreferredName("My Name 2"),s.setPreferredDescription("My Description 2"),t.notStrictEqual(s.getName(),"My Name 2"),t.notStrictEqual(s.getDescription(),"My Description 2"),t.strictEqual(i,0)}),test("reports readonly changes",async function(){const e=o(r.call(this,"/foo/bar/updatefile.js"));let i=0;n.add(e.onDidChangeCapabilities(()=>{i++}));const s=n.add(await u.textFileService.files.resolve(e.resource));t.strictEqual(s.isReadonly(),!1),t.strictEqual(e.hasCapability(f.Readonly),!1),t.strictEqual(e.isReadonly(),!1);const a=await u.fileService.resolve(e.resource,{resolveMetadata:!0});try{u.fileService.readShouldThrowError=new v("file not modified since",{...a,readonly:!0}),await e.resolve()}finally{u.fileService.readShouldThrowError=void 0}t.strictEqual(!!s.isReadonly(),!0),t.strictEqual(e.hasCapability(f.Readonly),!0),t.strictEqual(!!e.isReadonly(),!0),t.strictEqual(i,1);try{u.fileService.readShouldThrowError=new v("file not modified since",{...a,readonly:!1}),await e.resolve()}finally{u.fileService.readShouldThrowError=void 0}t.strictEqual(s.isReadonly(),!1),t.strictEqual(e.hasCapability(f.Readonly),!1),t.strictEqual(e.isReadonly(),!1),t.strictEqual(i,2)}),q()});
