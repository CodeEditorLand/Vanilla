class d{root=new g;constructor(t){for(const[e,s]of t)for(const n of s)this.root.add(e,n)}toString(){return this.root.toString()}getAttributes(t,e){const s=t.lastIndexOf(".");return s<1?{dirname:e,basename:t,extname:""}:{dirname:e,basename:t.substring(0,s),extname:t.substring(s+1)}}nest(t,e){const s=new g;for(const i of t){const a=this.getAttributes(i,e),u=this.root.get(i,a);for(const o of u)s.add(o,i)}const n=(i,a=new Set)=>{if(a.has(i))return[];a.add(i);const u=this.getAttributes(i,e),o=s.get(i,u);return o.length===0?[i]:o.length===1&&o[0]===i?[i]:o.flatMap(m=>n(m,a))},r=new Map;for(const i of t){let a=n(i);a.length===0&&(a=[i]);for(const u of a){let o=r.get(u);o||r.set(u,o=new Set),i!==u&&o.add(i)}}return r}}class g{value=new c;map=new Map;constructor(){}add(t,e){if(t==="")this.value.add(t,e);else if(t[0]==="*")this.value.add(t,e);else{const s=t[0],n=t.slice(1);let r=this.map.get(s);r||this.map.set(s,r=new g),r.add(n,e)}}get(t,e){const s=[];s.push(...this.value.get(t,e));const n=t[0],r=t.slice(1),i=this.map.get(n);return i&&s.push(...i.get(r,e)),s}toString(t=""){const e=[];return this.value.hasItems&&e.push(`* => 
`+this.value.toString(t+"  ")),[...this.map.entries()].map(([s,n])=>e.push("^"+s+` => 
`+n.toString(t+"  "))),e.map(s=>t+s).join(`
`)}}class c{star=[];epsilon=[];map=new Map;hasItems=!1;constructor(){}add(t,e){if(this.hasItems=!0,t==="*")this.star.push(new p(e));else if(t==="")this.epsilon.push(new p(e));else{const s=t[t.length-1],n=t.slice(0,t.length-1);if(s==="*")throw Error("Unexpected star in SufTrie key: "+t);{let r=this.map.get(s);r||this.map.set(s,r=new c),r.add(n,e)}}}get(t,e){const s=[];t===""&&s.push(...this.epsilon.map(a=>a.substitute(e))),this.star.length&&s.push(...this.star.map(a=>a.substitute(e,t)));const n=t[t.length-1],r=t.slice(0,t.length-1),i=this.map.get(n);return i&&s.push(...i.get(r,e)),s}toString(t=""){const e=[];return this.star.length&&e.push("* => "+this.star.join("; ")),this.epsilon.length&&e.push("\u03B5 => "+this.epsilon.join("; ")),[...this.map.entries()].map(([s,n])=>e.push(s+`$ => 
`+n.toString(t+"  "))),e.map(s=>t+s).join(`
`)}}var f=(n=>(n.capture="capture",n.basename="basename",n.dirname="dirname",n.extname="extname",n))(f||{});const h=/\$[({](capture|basename|dirname|extname)[)}]/g;class p{tokens=[];constructor(t){h.lastIndex=0;let e,s=0;for(;e=h.exec(t);){const n=t.slice(s,e.index);this.tokens.push(n);const r=e[1];switch(r){case"basename":case"dirname":case"extname":case"capture":this.tokens.push({capture:r});break;default:throw Error("unknown substitution type: "+r)}s=e.index+e[0].length}if(s!==t.length){const n=t.slice(s,t.length);this.tokens.push(n)}}substitute(t,e){return this.tokens.map(s=>{if(typeof s=="string")return s;switch(s.capture){case"basename":return t.basename;case"dirname":return t.dirname;case"extname":return t.extname;case"capture":return e||""}}).join("")}}export{d as ExplorerFileNestingTrie,g as PreTrie,c as SufTrie};
