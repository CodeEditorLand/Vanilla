import t from"assert";import{DisposableStore as y}from"../../../../base/common/lifecycle.js";import{Schemas as p}from"../../../../base/common/network.js";import{URI as a}from"../../../../base/common/uri.js";import{mock as g}from"../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as E}from"../../../../base/test/common/utils.js";import"../../../../platform/extensions/common/extensions.js";import{NullLogService as f}from"../../../../platform/log/common/log.js";import"../../browser/mainThreadWebviewManager.js";import{NullApiDeprecationService as u}from"../../common/extHostApiDeprecationService.js";import"../../common/extHostRpcService.js";import{ExtHostWebviews as h}from"../../common/extHostWebview.js";import{ExtHostWebviewPanels as b}from"../../common/extHostWebviewPanels.js";import{SingleProxyRPCProtocol as S}from"../common/testRPCProtocol.js";import{decodeAuthority as x,webviewResourceBaseHost as c}from"../../../contrib/webview/common/webview.js";import"../../../services/editor/common/editorGroupColumn.js";import"../../../services/extensions/common/extHostCustomers.js";suite("ExtHostWebview",()=>{let r,n;setup(()=>{r=new y;const e=P();n=S(e)}),teardown(()=>{r.dispose()}),E();function l(e,i){const s=r.add(new h(e,{authority:i,isRemote:!!i},void 0,new f,u)),o=r.add(new b(e,s,void 0));return r.add(o.createWebviewPanel({extensionLocation:a.from({scheme:i?p.vscodeRemote:p.file,authority:i,path:"/ext/path"})},"type","title",1,{}))}test("Cannot register multiple serializers for the same view type",async()=>{const e="view.type",i=r.add(new h(n,{authority:void 0,isRemote:!1},void 0,new f,u)),s=r.add(new b(n,i,void 0));let o;class w{async deserializeWebviewPanel(W,H){o=this,r.add(W)}}const d={},m=new w,v=new w,U=s.registerWebviewPanelSerializer(d,e,m);await s.$deserializeWebviewPanel("x",e,{title:"title",state:{},panelOptions:{},webviewOptions:{},active:!0},0),t.strictEqual(o,m),t.throws(()=>r.add(s.registerWebviewPanelSerializer(d,e,v)),"Should throw when registering two serializers for the same view"),U.dispose(),r.add(s.registerWebviewPanelSerializer(d,e,v)),await s.$deserializeWebviewPanel("x",e,{title:"title",state:{},panelOptions:{},webviewOptions:{},active:!0},0),t.strictEqual(o,v)}),test("asWebviewUri for local file paths",()=>{const e=l(n,void 0);t.strictEqual(e.webview.asWebviewUri(a.parse("file:///Users/codey/file.html")).toString(),`https://file%2B.vscode-resource.${c}/Users/codey/file.html`,"Unix basic"),t.strictEqual(e.webview.asWebviewUri(a.parse("file:///Users/codey/file.html#frag")).toString(),`https://file%2B.vscode-resource.${c}/Users/codey/file.html#frag`,"Unix should preserve fragment"),t.strictEqual(e.webview.asWebviewUri(a.parse("file:///Users/codey/f%20ile.html")).toString(),`https://file%2B.vscode-resource.${c}/Users/codey/f%20ile.html`,"Unix with encoding"),t.strictEqual(e.webview.asWebviewUri(a.parse("file://localhost/Users/codey/file.html")).toString(),`https://file%2Blocalhost.vscode-resource.${c}/Users/codey/file.html`,"Unix should preserve authority"),t.strictEqual(e.webview.asWebviewUri(a.parse("file:///c:/codey/file.txt")).toString(),`https://file%2B.vscode-resource.${c}/c%3A/codey/file.txt`,"Windows C drive")}),test("asWebviewUri for remote file paths",()=>{const e=l(n,"remote");t.strictEqual(e.webview.asWebviewUri(a.parse("file:///Users/codey/file.html")).toString(),`https://vscode-remote%2Bremote.vscode-resource.${c}/Users/codey/file.html`,"Unix basic")}),test("asWebviewUri for remote with / and + in name",()=>{const e=l(n,"remote"),i="ssh-remote+localhost=foo/bar",s=a.from({scheme:"vscode-remote",authority:i,path:"/Users/cody/x.png"}),o=e.webview.asWebviewUri(s);t.strictEqual(o.toString(),"https://vscode-remote%2Bssh-002dremote-002blocalhost-003dfoo-002fbar.vscode-resource.vscode-cdn.net/Users/cody/x.png","Check transform"),t.strictEqual(x(o.authority),`vscode-remote+${i}.vscode-resource.vscode-cdn.net`,"Check decoded authority")}),test("asWebviewUri for remote with port in name",()=>{const e=l(n,"remote"),i="localhost:8080",s=a.from({scheme:"vscode-remote",authority:i,path:"/Users/cody/x.png"}),o=e.webview.asWebviewUri(s);t.strictEqual(o.toString(),"https://vscode-remote%2Blocalhost-003a8080.vscode-resource.vscode-cdn.net/Users/cody/x.png","Check transform"),t.strictEqual(x(o.authority),`vscode-remote+${i}.vscode-resource.vscode-cdn.net`,"Check decoded authority")})});function P(){return new class extends g(){$disposeWebview(){}$createWebviewPanel(){}$registerSerializer(){}$unregisterSerializer(){}}}
