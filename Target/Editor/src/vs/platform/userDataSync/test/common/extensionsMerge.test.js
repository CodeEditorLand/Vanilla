import e from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as E}from"../../../../base/test/common/utils.js";import{merge as u}from"../../common/extensionsMerge.js";import"../../common/userDataSync.js";suite("ExtensionsMerge",()=>{E(),test("merge returns local extension if remote does not exist",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],d=u(t,null,null,[],[],[]);e.deepStrictEqual(d.local.added,[]),e.deepStrictEqual(d.local.removed,[]),e.deepStrictEqual(d.local.updated,[]),e.deepStrictEqual(d.remote?.all,t)}),test("merge returns local extension if remote does not exist with ignored extensions",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],d=[t[1],t[2]],i=u(t,null,null,[],["a"],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,d)}),test("merge returns local extension if remote does not exist with ignored extensions (ignore case)",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],d=[t[1],t[2]],i=u(t,null,null,[],["A"],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,d)}),test("merge returns local extension if remote does not exist with skipped extensions",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],d=[c({identifier:{id:"b",uuid:"b"}})],i=[...t],n=u(t,null,null,d,[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge returns local extension if remote does not exist with skipped and ignored extensions",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],d=[c({identifier:{id:"b",uuid:"b"}})],i=[t[1],t[2]],n=u(t,null,null,d,["a"],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge local and remote extensions when there is no base",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"d",uuid:"d"}})],d=[c({identifier:{id:"b",uuid:"b"}}),c({identifier:{id:"c",uuid:"c"}})],i=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}}),o({identifier:{id:"a",uuid:"a"}}),o({identifier:{id:"d",uuid:"d"}})],n=u(t,d,null,[],[],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge local and remote extensions when there is no base and with ignored extensions",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"d",uuid:"d"}})],d=[c({identifier:{id:"b",uuid:"b"}}),c({identifier:{id:"c",uuid:"c"}})],i=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}}),o({identifier:{id:"d",uuid:"d"}})],n=u(t,d,null,[],["a"],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge local and remote extensions when remote is moved forwarded",()=>{const t=[c({identifier:{id:"a",uuid:"a"}}),c({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"d",uuid:"d"}})],i=[c({identifier:{id:"b",uuid:"b"}}),c({identifier:{id:"c",uuid:"c"}})],n=u(d,i,t,[],[],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(n.local.removed,[{id:"a",uuid:"a"},{id:"d",uuid:"d"}]),e.deepStrictEqual(n.local.updated,[]),e.strictEqual(n.remote,null)}),test("merge local and remote extensions when remote is moved forwarded with disabled extension",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"d",uuid:"d"}})],i=[a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"c",uuid:"c"}}),a({identifier:{id:"d",uuid:"d"},disabled:!0})],n=u(d,i,t,[],[],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(n.local.removed,[{id:"a",uuid:"a"}]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"d",uuid:"d"},disabled:!0})]),e.strictEqual(n.remote,null)}),test("merge local and remote extensions when remote moved forwarded with ignored extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"d",uuid:"d"}})],i=[a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"c",uuid:"c"}})],n=u(d,i,t,[],["a"],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(n.local.removed,[{id:"d",uuid:"d"}]),e.deepStrictEqual(n.local.updated,[]),e.strictEqual(n.remote,null)}),test("merge local and remote extensions when remote is moved forwarded with skipped extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"d",uuid:"d"}})],i=[c({identifier:{id:"a",uuid:"a"}})],n=[a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"c",uuid:"c"}})],s=u(d,n,t,i,[],[]);e.deepStrictEqual(s.local.added,[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(s.local.removed,[{id:"d",uuid:"d"}]),e.deepStrictEqual(s.local.updated,[]),e.strictEqual(s.remote,null)}),test("merge local and remote extensions when remote is moved forwarded with skipped and ignored extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"d",uuid:"d"}})],i=[c({identifier:{id:"a",uuid:"a"}})],n=[a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"c",uuid:"c"}})],s=u(d,n,t,i,["b"],[]);e.deepStrictEqual(s.local.added,[o({identifier:{id:"c",uuid:"c"}})]),e.deepStrictEqual(s.local.removed,[{id:"d",uuid:"d"}]),e.deepStrictEqual(s.local.updated,[]),e.strictEqual(s.remote,null)}),test("merge local and remote extensions when local is moved forwarded",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],i=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],n=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})],s=u(d,i,t,[],[],[]);e.deepStrictEqual(s.local.added,[]),e.deepStrictEqual(s.local.removed,[]),e.deepStrictEqual(s.local.updated,[]),e.deepStrictEqual(s.remote?.all,n)}),test("merge local and remote extensions when local is moved forwarded with disabled extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"a",uuid:"a"},disabled:!0}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],i=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],n=[o({identifier:{id:"a",uuid:"a"},disabled:!0}),o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})],s=u(d,i,t,[],[],[]);e.deepStrictEqual(s.local.added,[]),e.deepStrictEqual(s.local.removed,[]),e.deepStrictEqual(s.local.updated,[]),e.deepStrictEqual(s.remote?.all,n)}),test("merge local and remote extensions when local is moved forwarded with ignored settings",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],i=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],n=u(d,i,t,[],["b"],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,[o({identifier:{id:"c",uuid:"c"}})])}),test("merge local and remote extensions when local is moved forwarded with skipped extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[c({identifier:{id:"d",uuid:"d"}})],i=[l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],n=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],s=[o({identifier:{id:"d",uuid:"d"}}),o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})],r=u(i,n,t,d,[],[]);e.deepStrictEqual(r.local.added,[]),e.deepStrictEqual(r.local.removed,[]),e.deepStrictEqual(r.local.updated,[]),e.deepStrictEqual(r.remote?.all,s)}),test("merge local and remote extensions when local is moved forwarded with skipped and ignored extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[c({identifier:{id:"d",uuid:"d"}})],i=[l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],n=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],s=[o({identifier:{id:"d",uuid:"d"}}),o({identifier:{id:"b",uuid:"b"}})],r=u(i,n,t,d,["c"],[]);e.deepStrictEqual(r.local.added,[]),e.deepStrictEqual(r.local.removed,[]),e.deepStrictEqual(r.local.updated,[]),e.deepStrictEqual(r.remote?.all,s)}),test("merge local and remote extensions when both moved forwarded",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],i=[a({identifier:{id:"d",uuid:"d"}}),a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"e",uuid:"e"}})],n=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"e",uuid:"e"}}),o({identifier:{id:"c",uuid:"c"}})],s=u(d,i,t,[],[],[]);e.deepStrictEqual(s.local.added,[o({identifier:{id:"e",uuid:"e"}})]),e.deepStrictEqual(s.local.removed,[{id:"a",uuid:"a"}]),e.deepStrictEqual(s.local.updated,[]),e.deepStrictEqual(s.remote?.all,n)}),test("merge local and remote extensions when both moved forwarded with ignored extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],i=[a({identifier:{id:"d",uuid:"d"}}),a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"e",uuid:"e"}})],n=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"e",uuid:"e"}}),o({identifier:{id:"c",uuid:"c"}})],s=u(d,i,t,[],["a","e"],[]);e.deepStrictEqual(s.local.added,[]),e.deepStrictEqual(s.local.removed,[]),e.deepStrictEqual(s.local.updated,[]),e.deepStrictEqual(s.remote?.all,n)}),test("merge local and remote extensions when both moved forwarded with skipped extensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[c({identifier:{id:"a",uuid:"a"}})],i=[l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],n=[a({identifier:{id:"d",uuid:"d"}}),a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"e",uuid:"e"}})],s=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"e",uuid:"e"}}),o({identifier:{id:"c",uuid:"c"}})],r=u(i,n,t,d,[],[]);e.deepStrictEqual(r.local.added,[o({identifier:{id:"e",uuid:"e"}})]),e.deepStrictEqual(r.local.removed,[]),e.deepStrictEqual(r.local.updated,[]),e.deepStrictEqual(r.remote?.all,s)}),test("merge local and remote extensions when both moved forwarded with skipped and ignoredextensions",()=>{const t=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"d",uuid:"d"}})],d=[c({identifier:{id:"a",uuid:"a"}})],i=[l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],n=[a({identifier:{id:"d",uuid:"d"}}),a({identifier:{id:"b",uuid:"b"}}),a({identifier:{id:"e",uuid:"e"}})],s=[o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"e",uuid:"e"}}),o({identifier:{id:"c",uuid:"c"}})],r=u(i,n,t,d,["e"],[]);e.deepStrictEqual(r.local.added,[]),e.deepStrictEqual(r.local.removed,[]),e.deepStrictEqual(r.local.updated,[]),e.deepStrictEqual(r.remote?.all,s)}),test("merge when remote extension has no uuid and different extension id case",()=>{const t=[l({identifier:{id:"a",uuid:"a"}}),l({identifier:{id:"b",uuid:"b"}}),l({identifier:{id:"c",uuid:"c"}})],d=[a({identifier:{id:"A"}}),a({identifier:{id:"d",uuid:"d"}})],i=[o({identifier:{id:"A",uuid:"a"}}),o({identifier:{id:"d",uuid:"d"}}),o({identifier:{id:"b",uuid:"b"}}),o({identifier:{id:"c",uuid:"c"}})],n=u(t,d,null,[],[],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"d",uuid:"d"}})]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge when remote extension is not an installed extension",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"b",uuid:"b"},installed:!1})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge when remote extension is not an installed extension but is an installed extension locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},installed:!1})],i=[o({identifier:{id:"a",uuid:"a"}})],n=u(t,d,null,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge when an extension is not an installed extension remotely and does not exist locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},installed:!1}),a({identifier:{id:"b",uuid:"b"},installed:!1})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge when an extension is an installed extension remotely but not locally and updated locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"},disabled:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=[o({identifier:{id:"a",uuid:"a"},disabled:!0})],n=u(t,d,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge when an extension is an installed extension remotely but not locally and updated remotely",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},disabled:!0})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"},disabled:!0})]),e.deepStrictEqual(i.remote,null)}),test("merge not installed extensions",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"b",uuid:"b"},installed:!1})],i=[p({identifier:{id:"b",uuid:"b"}}),p({identifier:{id:"a",uuid:"a"}})],n=u(t,d,null,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,i)}),test("merge: remote extension with prerelease is added",()=>{const t=[],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[o({identifier:{id:"a",uuid:"a"},preRelease:!0})]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension with prerelease is added",()=>{const t=[l({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,[],null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},preRelease:!0})])}),test("merge: remote extension with prerelease is added when local extension without prerelease is added",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"},preRelease:!0})]),e.deepStrictEqual(i.remote,null)}),test("merge: remote extension without prerelease is added when local extension with prerelease is added",()=>{const t=[l({identifier:{id:"a",uuid:"a"},preRelease:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"}})]),e.deepStrictEqual(i.remote,null)}),test("merge: remote extension is changed to prerelease",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"},preRelease:!0})]),e.deepStrictEqual(i.remote,null)}),test("merge: remote extension is changed to release",()=>{const t=[l({identifier:{id:"a",uuid:"a"},preRelease:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"}})]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension is changed to prerelease",()=>{const t=[l({identifier:{id:"a",uuid:"a"},preRelease:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},preRelease:!0})])}),test("merge: local extension is changed to release",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[a({identifier:{id:"a",uuid:"a"}})])}),test("merge: local extension not an installed extension - remote preRelease property is taken precedence when there are no updates",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension not an installed extension - remote preRelease property is taken precedence when there are updates locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1,disabled:!0})],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},preRelease:!0,disabled:!0})])}),test("merge: local extension not an installed extension - remote preRelease property is taken precedence when there are updates remotely",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},preRelease:!0})],i=[a({identifier:{id:"a",uuid:"a"},preRelease:!0,disabled:!0})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},preRelease:!0,disabled:!0})]),e.deepStrictEqual(n.remote,null)}),test("merge: local extension not an installed extension - remote version is taken precedence when there are no updates",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension not an installed extension - remote version is taken precedence when there are updates locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1,disabled:!0})],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},version:"1.1.0",disabled:!0})])}),test("merge: local extension not an installed extension - remote version property is taken precedence when there are updates remotely",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],i=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0",disabled:!0})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},version:"1.1.0",disabled:!0})]),e.deepStrictEqual(n.remote,null)}),test("merge: base has builtin extension, local does not have extension, remote has extension installed",()=>{const t=[],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0",installed:!1})],i=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"a",uuid:"a"},version:"1.1.0"})]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote,null)}),test("merge: base has installed extension, local has installed extension, remote has extension builtin",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"}})],i=[a({identifier:{id:"a",uuid:"a"},installed:!1})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[{id:"a",uuid:"a"}]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote,null)}),test("merge: base has installed extension, local has builtin extension, remote does not has extension",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"}})],n=u(t,[],d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote?.all,[p({identifier:{id:"a",uuid:"a"}})])}),test("merge: base has builtin extension, local has installed extension, remote has builtin extension with updated state",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},installed:!1})],i=[a({identifier:{id:"a",uuid:"a"},installed:!1,state:{a:1}})],n=u(t,i,d,[],[],[{id:"a",uuid:"a"}]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},state:{a:1}})]),e.deepStrictEqual(n.remote?.all,[o({identifier:{id:"a",uuid:"a"},state:{a:1}})])}),test("merge: base has installed extension, last time synced as builtin extension, local has installed extension, remote has builtin extension with updated state",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"}})],i=[a({identifier:{id:"a",uuid:"a"},installed:!1,state:{a:1}})],n=u(t,i,d,[],[],[{id:"a",uuid:"a"}]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},state:{a:1}})]),e.deepStrictEqual(n.remote?.all,[o({identifier:{id:"a",uuid:"a"},state:{a:1}})])}),test("merge: base has builtin extension, local does not have extension, remote has builtin extension",()=>{const t=[],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0",installed:!1})],i=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0",installed:!1})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote,null)}),test("merge: base has installed extension, last synced as builtin, local does not have extension, remote has installed extension",()=>{const t=[],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],i=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],n=u(t,i,d,[],[],[{id:"a",uuid:"a"}]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote,null)}),test("merge: base has builtin extension, last synced as builtin, local does not have extension, remote has installed extension",()=>{const t=[],d=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0",installed:!1})],i=[a({identifier:{id:"a",uuid:"a"},version:"1.1.0"})],n=u(t,i,d,[],[],[{id:"a",uuid:"a"}]);e.deepStrictEqual(n.local.added,[o({identifier:{id:"a",uuid:"a"},version:"1.1.0"})]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote,null)}),test("merge: remote extension with pinned is added",()=>{const t=[],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[o({identifier:{id:"a",uuid:"a"},pinned:!0})]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension with pinned is added",()=>{const t=[l({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,[],null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},pinned:!0})])}),test("merge: remote extension with pinned is added when local extension without pinned is added",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"},pinned:!0})]),e.deepStrictEqual(i.remote,null)}),test("merge: remote extension without pinned is added when local extension with pinned is added",()=>{const t=[l({identifier:{id:"a",uuid:"a"},pinned:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,null,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"}})]),e.deepStrictEqual(i.remote,null)}),test("merge: remote extension is changed to pinned",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"},pinned:!0})]),e.deepStrictEqual(i.remote,null)}),test("merge: remote extension is changed to unpinned",()=>{const t=[l({identifier:{id:"a",uuid:"a"},pinned:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"}})]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension is changed to pinned",()=>{const t=[l({identifier:{id:"a",uuid:"a"},pinned:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},pinned:!0})])}),test("merge: local extension is changed to unpinned",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[a({identifier:{id:"a",uuid:"a"}})])}),test("merge: local extension not an installed extension - remote pinned property is taken precedence when there are no updates",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension not an installed extension - remote pinned property is taken precedence when there are updates locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1,disabled:!0})],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},pinned:!0,disabled:!0})])}),test("merge: local extension not an installed extension - remote pinned property is taken precedence when there are updates remotely",()=>{const t=[l({identifier:{id:"a",uuid:"a"},installed:!1})],d=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],i=[a({identifier:{id:"a",uuid:"a"},pinned:!0,disabled:!0})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},pinned:!0,disabled:!0})]),e.deepStrictEqual(n.remote,null)}),test("merge: local extension is changed to pinned and version changed",()=>{const t=[l({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})])}),test("merge: local extension is changed to unpinned and version changed",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"}})])}),test("merge: remote extension is changed to pinned and version changed",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension is changed to pinned and version changed and remote extension is channged to pinned with different version",()=>{const t=[l({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})],d=[a({identifier:{id:"a",uuid:"a"},version:"0.0.2",pinned:!0})],i=[a({identifier:{id:"a",uuid:"a"}})],n=u(t,d,i,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},version:"0.0.2",pinned:!0})]),e.deepStrictEqual(n.remote,null)}),test("merge: remote extension is changed to unpinned and version changed",()=>{const t=[l({identifier:{id:"a",uuid:"a"},version:"0.0.1",pinned:!0})],d=[a({identifier:{id:"a",uuid:"a"}})],i=u(t,d,t,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[o({identifier:{id:"a",uuid:"a"}})]),e.deepStrictEqual(i.remote,null)}),test("merge: local extension is changed to unpinned and version changed and remote extension is channged to unpinned with different version",()=>{const t=[l({identifier:{id:"a",uuid:"a"},version:"0.0.1"})],d=[a({identifier:{id:"a",uuid:"a"},version:"0.0.2"})],i=[a({identifier:{id:"a",uuid:"a"},pinned:!0})],n=u(t,d,i,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[]),e.deepStrictEqual(n.remote,null)}),test("sync adding local application scoped extension",()=>{const t=[l({identifier:{id:"a",uuid:"a"},isApplicationScoped:!0})],d=u(t,null,null,[],[],[]);e.deepStrictEqual(d.local.added,[]),e.deepStrictEqual(d.local.removed,[]),e.deepStrictEqual(d.local.updated,[]),e.deepStrictEqual(d.remote?.all,t)}),test("sync merging local extension with isApplicationScoped property and remote does not has isApplicationScoped property",()=>{const t=[l({identifier:{id:"a",uuid:"a"},isApplicationScoped:!1})],d=[c({identifier:{id:"a",uuid:"a"}})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,[o({identifier:{id:"a",uuid:"a"}})])}),test("sync merging when applicaiton scope is changed locally",()=>{const t=[l({identifier:{id:"a",uuid:"a"},isApplicationScoped:!0})],d=[a({identifier:{id:"a",uuid:"a"},isApplicationScoped:!1})],i=u(t,d,d,[],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote?.all,t)}),test("sync merging when applicaiton scope is changed remotely",()=>{const t=[l({identifier:{id:"a",uuid:"a"},isApplicationScoped:!1})],d=[a({identifier:{id:"a",uuid:"a"},isApplicationScoped:!1})],i=[a({identifier:{id:"a",uuid:"a"},isApplicationScoped:!0})],n=u(t,i,d,[],[],[]);e.deepStrictEqual(n.local.added,[]),e.deepStrictEqual(n.local.removed,[]),e.deepStrictEqual(n.local.updated,[o({identifier:{id:"a",uuid:"a"},isApplicationScoped:!0})]),e.deepStrictEqual(n.remote,null)}),test("merge does not remove remote extension when skipped extension has uuid but remote does not has",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"b"}})],i=u(t,d,d,[a({identifier:{id:"b",uuid:"b"}})],[],[]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)}),test("merge does not remove remote extension when last sync builtin extension has uuid but remote does not has",()=>{const t=[l({identifier:{id:"a",uuid:"a"}})],d=[a({identifier:{id:"a",uuid:"a"}}),a({identifier:{id:"b"}})],i=u(t,d,d,[],[],[{id:"b",uuid:"b"}]);e.deepStrictEqual(i.local.added,[]),e.deepStrictEqual(i.local.removed,[]),e.deepStrictEqual(i.local.updated,[]),e.deepStrictEqual(i.remote,null)});function o(t){return{identifier:{id:"a",uuid:"a"},version:"1.0.0",pinned:!1,preRelease:!1,installed:!0,...t}}function p(t){return{identifier:{id:"a",uuid:"a"},version:"1.0.0",pinned:!1,preRelease:!1,...t}}function l(t){return{identifier:{id:"a",uuid:"a"},version:"1.0.0",pinned:!1,preRelease:!1,installed:!0,...t}}function a(t){return{identifier:{id:"a",uuid:"a"},version:"1.0.0",pinned:!1,preRelease:!1,installed:!0,...t}}function c(t){return{identifier:{id:"a",uuid:"a"},version:"1.0.0",installed:!0,...t}}});
