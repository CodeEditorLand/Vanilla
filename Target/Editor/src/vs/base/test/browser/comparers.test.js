import e from"assert";import{compareFileExtensions as a,compareFileExtensionsDefault as r,compareFileExtensionsLower as s,compareFileExtensionsUnicode as t,compareFileExtensionsUpper as l,compareFileNames as u,compareFileNamesDefault as c,compareFileNamesLower as n,compareFileNamesUnicode as o,compareFileNamesUpper as i}from"../../common/comparers.js";import{ensureNoDisposablesAreLeakedInTestSuite as h}from"../common/utils.js";const m=(b,d)=>b.localeCompare(d),f=(b,d)=>b.localeCompare(d,void 0,{numeric:!0});suite("Comparers",()=>{test("compareFileNames",()=>{e(u(null,null)===0,"null should be equal"),e(u(null,"abc")<0,"null should be come before real values"),e(u("","")===0,"empty should be equal"),e(u("abc","abc")===0,"equal names should be equal"),e(u("z","A")>0,"z comes after A"),e(u("Z","a")>0,"Z comes after a"),e(u("bbb.aaa","aaa.bbb")>0,"compares the whole name all at once by locale"),e(u("aggregate.go","aggregate_repo.go")>0,"compares the whole name all at once by locale"),e(u(".abc",".abc")===0,"equal dotfile names should be equal"),e(u(".env.",".gitattributes")<0,"filenames starting with dots and with extensions should still sort properly"),e(u(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(u(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(u(".aaa_env",".aaa.env")<0,"an underscore in a dotfile name will sort before a dot"),e(u(null,".abc")<0,"null should come before dotfiles"),e(u(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(u(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(u(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(u(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(u("1","1")===0,"numerically equal full names should be equal"),e(u("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(u("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(u("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order even when they are multiple digits long"),e(u("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(u("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(u("a.ext1","b.Ext1")<0,"if names are different and extensions with numbers are equal except for case, filenames are sorted in name order"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(u),["A2.txt","a10.txt","a20.txt","A100.txt"],"filenames with number and case differences compare numerically"),e(u("a","A")!==m("a","A"),"the same letter sorts in unicode order, not by locale"),e(u("\xE2","\xC2")!==m("\xE2","\xC2"),"the same accented letter sorts in unicode order, not by locale"),e.notDeepStrictEqual(["artichoke","Artichoke","art","Art"].sort(u),["artichoke","Artichoke","art","Art"].sort(m),"words with the same root and different cases do not sort in locale order"),e.notDeepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(u),["email","Email","\xE9mail","\xC9mail"].sort(m),"the same base characters with different case or accents do not sort in locale order"),e(u("abc02.txt","abc002.txt")>0,"filenames with equivalent numbers and leading zeros sort in unicode order"),e(u("abc.txt1","abc.txt01")>0,"same name plus extensions with equal numbers sort in unicode order"),e(u("art01","Art01")!=="art01".localeCompare("Art01",void 0,{numeric:!0}),"a numerically equivalent word of a different case does not compare numerically based on locale"),e(u("a.ext1","a.Ext1")>0,"if names are equal and extensions with numbers are equal except for case, filenames are sorted in full filename unicode order")}),test("compareFileExtensions",()=>{e(a(null,null)===0,"null should be equal"),e(a(null,"abc")<0,"null should come before real files without extension"),e(a("","")===0,"empty should be equal"),e(a("abc","abc")===0,"equal names should be equal"),e(a("z","A")>0,"z comes after A"),e(a("Z","a")>0,"Z comes after a"),e(a("file.ext","file.ext")===0,"equal full names should be equal"),e(a("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(a("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(a("bbb.aaa","aaa.bbb")<0,"files should be compared by extensions even if filenames compare differently"),e(a(".abc",".abc")===0,"equal dotfiles should be equal"),e(a(".md",".Gitattributes")>0,"dotfiles sort alphabetically regardless of case"),e(a(null,".abc")<0,"null should come before dotfiles"),e(a(".env","aaa.env")<0,"if equal extensions, filenames should be compared, empty filename should come before others"),e(a(".MD","a.md")<0,"if extensions differ in case, files sort by extension in unicode order"),e(a("1","1")===0,"numerically equal full names should be equal"),e(a("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(a("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(a("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order even when they are multiple digits long"),e(a("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(a("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(a("abc2.txt2","abc1.txt10")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(a("txt.abc1","txt.abc1")===0,"equal extensions with numbers should be equal"),e(a("txt.abc1","txt.abc2")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(a("txt.abc2","txt.abc10")<0,"extensions with numbers should be in numerical order even when they are multiple digits long"),e(a("a.ext1","b.ext1")<0,"if equal extensions with numbers, names should be compared"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(a),["A2.txt","a10.txt","a20.txt","A100.txt"],"filenames with number and case differences compare numerically"),e(a("a","A")!==m("a","A"),"the same letter of different case does not sort by locale"),e(a("\xE2","\xC2")!==m("\xE2","\xC2"),"the same accented letter of different case does not sort by locale"),e.notDeepStrictEqual(["artichoke","Artichoke","art","Art"].sort(a),["artichoke","Artichoke","art","Art"].sort(m),"words with the same root and different cases do not sort in locale order"),e.notDeepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(a),["email","Email","\xE9mail","\xC9mail"].sort((b,d)=>b.localeCompare(d)),"the same base characters with different case or accents do not sort in locale order"),e(a("a.MD","a.md")<0,"case differences in extensions sort in unicode order"),e(a("a.md","A.md")>0,"case differences in names sort in unicode order"),e(a("a.md","b.MD")>0,"when extensions are the same except for case, the files sort by extension"),e(a("aggregate.go","aggregate_repo.go")<0,"when extensions are equal, names sort in dictionary order"),e(a(".env",".aaa.env")<0,"a dotfile with an extension is treated as a name plus an extension - equal extensions"),e(a(".env",".env.aaa")>0,"a dotfile with an extension is treated as a name plus an extension - unequal extensions"),e(a(".env","aaa")>0,"filenames without extensions come before dotfiles"),e(a(".md","A.MD")>0,"a file with an uppercase extension sorts before a dotfile of the same lowercase extension"),e(a("abc.txt01","abc.txt1")<0,"extensions with equal numbers sort in unicode order"),e(a("art01","Art01")!==f("art01","Art01"),"a numerically equivalent word of a different case does not compare by locale"),e(a("abc02.txt","abc002.txt")>0,"filenames with equivalent numbers and leading zeros sort in unicode order"),e(a("txt.abc01","txt.abc1")<0,"extensions with equivalent numbers sort in unicode order"),e(a("a.ext1","b.Ext1")>0,"if names are different and extensions with numbers are equal except for case, filenames are sorted in extension unicode order"),e(a("a.ext1","a.Ext1")>0,"if names are equal and extensions with numbers are equal except for case, filenames are sorted in extension unicode order")}),test("compareFileNamesDefault",()=>{e(c(null,null)===0,"null should be equal"),e(c(null,"abc")<0,"null should be come before real values"),e(c("","")===0,"empty should be equal"),e(c("abc","abc")===0,"equal names should be equal"),e(c("z","A")>0,"z comes after A"),e(c("Z","a")>0,"Z comes after a"),e(c("file.ext","file.ext")===0,"equal full names should be equal"),e(c("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(c("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(c("bbb.aaa","aaa.bbb")>0,"files should be compared by names even if extensions compare differently"),e(c("aggregate.go","aggregate_repo.go")>0,"compares the whole filename in locale order"),e(c(".abc",".abc")===0,"equal dotfile names should be equal"),e(c(".env.",".gitattributes")<0,"filenames starting with dots and with extensions should still sort properly"),e(c(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(c(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(c(".aaa_env",".aaa.env")<0,"an underscore in a dotfile name will sort before a dot"),e(c(null,".abc")<0,"null should come before dotfiles"),e(c(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(c(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(c(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(c(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(c("1","1")===0,"numerically equal full names should be equal"),e(c("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(c("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(c("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order even when they are multiple digits long"),e(c("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(c("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(c("a.ext1","b.Ext1")<0,"if names are different and extensions with numbers are equal except for case, filenames are compared by full filename"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(c),["A2.txt","a10.txt","a20.txt","A100.txt"],"filenames with number and case differences compare numerically"),e(c("a","A")===m("a","A"),"the same letter sorts by locale"),e(c("\xE2","\xC2")===m("\xE2","\xC2"),"the same accented letter sorts by locale"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(c),["email","Email","\xE9mail","\xC9mail"].sort(m),"the same base characters with different case or accents sort in locale order"),e(c("abc02.txt","abc002.txt")<0,"filenames with equivalent numbers and leading zeros sort shortest number first"),e(c("abc.txt1","abc.txt01")<0,"same name plus extensions with equal numbers sort shortest number first"),e(c("art01","Art01")===f("art01","Art01"),"a numerically equivalent word of a different case compares numerically based on locale"),e(c("a.ext1","a.Ext1")===m("ext1","Ext1"),"if names are equal and extensions with numbers are equal except for case, filenames are sorted in extension locale order")}),test("compareFileExtensionsDefault",()=>{e(r(null,null)===0,"null should be equal"),e(r(null,"abc")<0,"null should come before real files without extensions"),e(r("","")===0,"empty should be equal"),e(r("abc","abc")===0,"equal names should be equal"),e(r("z","A")>0,"z comes after A"),e(r("Z","a")>0,"Z comes after a"),e(r("file.ext","file.ext")===0,"equal full filenames should be equal"),e(r("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(r("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(r("bbb.aaa","aaa.bbb")<0,"files should be compared by extension first"),e(r(".abc",".abc")===0,"equal dotfiles should be equal"),e(r(".md",".Gitattributes")>0,"dotfiles sort alphabetically regardless of case"),e(r(null,".abc")<0,"null should come before dotfiles"),e(r(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(r(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(r("1","1")===0,"numerically equal full names should be equal"),e(r("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(r("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(r("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order"),e(r("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(r("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(r("abc2.txt2","abc1.txt10")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(r("txt.abc1","txt.abc1")===0,"equal extensions with numbers should be equal"),e(r("txt.abc1","txt.abc2")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(r("txt.abc2","txt.abc10")<0,"extensions with numbers should be in numerical order even when they are multiple digits long"),e(r("a.ext1","b.ext1")<0,"if equal extensions with numbers, full filenames should be compared"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(r),["A2.txt","a10.txt","a20.txt","A100.txt"],"filenames with number and case differences compare numerically"),e(r("a","A")===m("a","A"),"the same letter of different case sorts by locale"),e(r("\xE2","\xC2")===m("\xE2","\xC2"),"the same accented letter of different case sorts by locale"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(r),["email","Email","\xE9mail","\xC9mail"].sort((b,d)=>b.localeCompare(d)),"the same base characters with different case or accents sort in locale order"),e(r("a.MD","a.md")===m("MD","md"),"case differences in extensions sort by locale"),e(r("a.md","A.md")===m("a","A"),"case differences in names sort by locale"),e(r("a.md","b.MD")<0,"when extensions are the same except for case, the files sort by name"),e(r("aggregate.go","aggregate_repo.go")>0,"names with the same extension sort in full filename locale order"),e(r(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(r(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(r(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(r(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(r("abc.txt01","abc.txt1")>0,"extensions with equal numbers should be in shortest-first order"),e(r("art01","Art01")===f("art01","Art01"),"a numerically equivalent word of a different case compares numerically based on locale"),e(r("abc02.txt","abc002.txt")<0,"filenames with equivalent numbers and leading zeros sort shortest string first"),e(r("txt.abc01","txt.abc1")>0,"extensions with equivalent numbers sort shortest extension first"),e(r("a.ext1","b.Ext1")<0,"if extensions with numbers are equal except for case, full filenames should be compared"),e(r("a.ext1","a.Ext1")===m("a.ext1","a.Ext1"),"if extensions with numbers are equal except for case, full filenames are compared in locale order")}),test("compareFileNamesUpper",()=>{e(i(null,null)===0,"null should be equal"),e(i(null,"abc")<0,"null should be come before real values"),e(i("","")===0,"empty should be equal"),e(i("abc","abc")===0,"equal names should be equal"),e(i("z","A")>0,"z comes after A"),e(i("file.ext","file.ext")===0,"equal full names should be equal"),e(i("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(i("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(i("bbb.aaa","aaa.bbb")>0,"files should be compared by names even if extensions compare differently"),e(i("aggregate.go","aggregate_repo.go")>0,"compares the full filename in locale order"),e(i(".abc",".abc")===0,"equal dotfile names should be equal"),e(i(".env.",".gitattributes")<0,"filenames starting with dots and with extensions should still sort properly"),e(i(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(i(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(i(".aaa_env",".aaa.env")<0,"an underscore in a dotfile name will sort before a dot"),e(i(null,".abc")<0,"null should come before dotfiles"),e(i(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(i(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(i(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(i(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(i("1","1")===0,"numerically equal full names should be equal"),e(i("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(i("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(i("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order even when they are multiple digits long"),e(i("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(i("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(i("abc02.txt","abc002.txt")<0,"filenames with equivalent numbers and leading zeros sort shortest number first"),e(i("abc.txt1","abc.txt01")<0,"same name plus extensions with equal numbers sort shortest number first"),e(i("a.ext1","b.Ext1")<0,"different names with the equal extensions except for case are sorted by full filename"),e(i("a.ext1","a.Ext1")===m("a.ext1","a.Ext1"),"same names with equal and extensions except for case are sorted in full filename locale order"),e(i("Z","a")<0,"Z comes before a"),e(i("a","A")>0,"the same letter sorts uppercase first"),e(i("\xE2","\xC2")>0,"the same accented letter sorts uppercase first"),e.deepStrictEqual(["artichoke","Artichoke","art","Art"].sort(i),["Art","Artichoke","art","artichoke"],"names with the same root and different cases sort uppercase first"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(i),["Email","\xC9mail","email","\xE9mail"],"the same base characters with different case or accents sort uppercase first"),e(i("art01","Art01")>0,"a numerically equivalent name of a different case compares uppercase first"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(i),["A2.txt","A100.txt","a10.txt","a20.txt"],"filenames with number and case differences group by case then compare by number")}),test("compareFileExtensionsUpper",()=>{e(l(null,null)===0,"null should be equal"),e(l(null,"abc")<0,"null should come before real files without extensions"),e(l("","")===0,"empty should be equal"),e(l("abc","abc")===0,"equal names should be equal"),e(l("z","A")>0,"z comes after A"),e(l("file.ext","file.ext")===0,"equal full filenames should be equal"),e(l("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(l("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(l("bbb.aaa","aaa.bbb")<0,"files should be compared by extension first"),e(l("a.md","b.MD")<0,"when extensions are the same except for case, the files sort by name"),e(l("a.MD","a.md")===m("MD","md"),"case differences in extensions sort by locale"),e(l("aggregate.go","aggregate_repo.go")>0,"when extensions are equal, compares the full filename"),e(l(".abc",".abc")===0,"equal dotfiles should be equal"),e(l(".md",".Gitattributes")>0,"dotfiles sort alphabetically regardless of case"),e(l(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(l(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(l(null,".abc")<0,"null should come before dotfiles"),e(l(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(l(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(l(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(l(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(l("1","1")===0,"numerically equal full names should be equal"),e(l("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(l("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(l("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order"),e(l("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(l("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(l("abc2.txt2","abc1.txt10")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(l("txt.abc1","txt.abc1")===0,"equal extensions with numbers should be equal"),e(l("txt.abc1","txt.abc2")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(l("txt.abc2","txt.abc10")<0,"extensions with numbers should be in numerical order even when they are multiple digits long"),e(l("a.ext1","b.ext1")<0,"if equal extensions with numbers, full filenames should be compared"),e(l("abc.txt01","abc.txt1")>0,"extensions with equal numbers should be in shortest-first order"),e(l("abc02.txt","abc002.txt")<0,"filenames with equivalent numbers and leading zeros sort shortest string first"),e(l("txt.abc01","txt.abc1")>0,"extensions with equivalent numbers sort shortest extension first"),e(l("a.ext1","b.Ext1")<0,"different names and extensions that are equal except for case are sorted in full filename order"),e(l("a.ext1","a.Ext1")===m("a.ext1","b.Ext1"),"same names and extensions that are equal except for case are sorted in full filename locale order"),e(l("Z","a")<0,"Z comes before a"),e(l("a","A")>0,"the same letter sorts uppercase first"),e(l("\xE2","\xC2")>0,"the same accented letter sorts uppercase first"),e.deepStrictEqual(["artichoke","Artichoke","art","Art"].sort(l),["Art","Artichoke","art","artichoke"],"names with the same root and different cases sort uppercase names first"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(l),["Email","\xC9mail","email","\xE9mail"],"the same base characters with different case or accents sort uppercase names first"),e(l("a.md","A.md")>0,"case differences in names sort uppercase first"),e(l("art01","Art01")>0,"a numerically equivalent word of a different case sorts uppercase first"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(l),["A2.txt","A100.txt","a10.txt","a20.txt"],"filenames with number and case differences group by case then sort by number")}),test("compareFileNamesLower",()=>{e(n(null,null)===0,"null should be equal"),e(n(null,"abc")<0,"null should be come before real values"),e(n("","")===0,"empty should be equal"),e(n("abc","abc")===0,"equal names should be equal"),e(n("Z","a")>0,"Z comes after a"),e(n("file.ext","file.ext")===0,"equal full names should be equal"),e(n("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(n("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(n("bbb.aaa","aaa.bbb")>0,"files should be compared by names even if extensions compare differently"),e(n("aggregate.go","aggregate_repo.go")>0,"compares full filenames"),e(n(".abc",".abc")===0,"equal dotfile names should be equal"),e(n(".env.",".gitattributes")<0,"filenames starting with dots and with extensions should still sort properly"),e(n(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(n(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(n(".aaa_env",".aaa.env")<0,"an underscore in a dotfile name will sort before a dot"),e(n(null,".abc")<0,"null should come before dotfiles"),e(n(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(n(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(n(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(n(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(n("1","1")===0,"numerically equal full names should be equal"),e(n("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(n("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(n("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order even when they are multiple digits long"),e(n("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(n("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(n("abc02.txt","abc002.txt")<0,"filenames with equivalent numbers and leading zeros sort shortest number first"),e(n("abc.txt1","abc.txt01")<0,"same name plus extensions with equal numbers sort shortest number first"),e(n("a.ext1","b.Ext1")<0,"different names and extensions that are equal except for case are sorted in full filename order"),e(n("a.ext1","a.Ext1")===m("a.ext1","b.Ext1"),"same names and extensions that are equal except for case are sorted in full filename locale order"),e(n("z","A")<0,"z comes before A"),e(n("a","A")<0,"the same letter sorts lowercase first"),e(n("\xE2","\xC2")<0,"the same accented letter sorts lowercase first"),e.deepStrictEqual(["artichoke","Artichoke","art","Art"].sort(n),["art","artichoke","Art","Artichoke"],"names with the same root and different cases sort lowercase first"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(n),["email","\xE9mail","Email","\xC9mail"],"the same base characters with different case or accents sort lowercase first"),e(n("art01","Art01")<0,"a numerically equivalent name of a different case compares lowercase first"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(n),["a10.txt","a20.txt","A2.txt","A100.txt"],"filenames with number and case differences group by case then compare by number")}),test("compareFileExtensionsLower",()=>{e(s(null,null)===0,"null should be equal"),e(s(null,"abc")<0,"null should come before real files without extensions"),e(s("","")===0,"empty should be equal"),e(s("abc","abc")===0,"equal names should be equal"),e(s("Z","a")>0,"Z comes after a"),e(s("file.ext","file.ext")===0,"equal full filenames should be equal"),e(s("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(s("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(s("bbb.aaa","aaa.bbb")<0,"files should be compared by extension first"),e(s("a.md","b.MD")<0,"when extensions are the same except for case, the files sort by name"),e(s("a.MD","a.md")===m("MD","md"),"case differences in extensions sort by locale"),e(s(".abc",".abc")===0,"equal dotfiles should be equal"),e(s(".md",".Gitattributes")>0,"dotfiles sort alphabetically regardless of case"),e(s(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(s(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(s(null,".abc")<0,"null should come before dotfiles"),e(s(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(s(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(s(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(s(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(s("1","1")===0,"numerically equal full names should be equal"),e(s("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(s("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(s("abc2.txt","abc10.txt")<0,"filenames with numbers should be in numerical order"),e(s("abc02.txt","abc010.txt")<0,"filenames with numbers that have leading zeros sort numerically"),e(s("abc1.10.txt","abc1.2.txt")>0,"numbers with dots between them are treated as two separate numbers, not one decimal number"),e(s("abc2.txt2","abc1.txt10")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(s("txt.abc1","txt.abc1")===0,"equal extensions with numbers should be equal"),e(s("txt.abc1","txt.abc2")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(s("txt.abc2","txt.abc10")<0,"extensions with numbers should be in numerical order even when they are multiple digits long"),e(s("a.ext1","b.ext1")<0,"if equal extensions with numbers, full filenames should be compared"),e(s("abc.txt01","abc.txt1")>0,"extensions with equal numbers should be in shortest-first order"),e(s("abc02.txt","abc002.txt")<0,"filenames with equivalent numbers and leading zeros sort shortest string first"),e(s("txt.abc01","txt.abc1")>0,"extensions with equivalent numbers sort shortest extension first"),e(s("a.ext1","b.Ext1")<0,"if extensions with numbers are equal except for case, full filenames should be compared"),e(s("a.ext1","a.Ext1")===m("a.ext1","a.Ext1"),"if extensions with numbers are equal except for case, filenames are sorted in locale order"),e(s("z","A")<0,"z comes before A"),e(s("a","A")<0,"the same letter sorts lowercase first"),e(s("\xE2","\xC2")<0,"the same accented letter sorts lowercase first"),e.deepStrictEqual(["artichoke","Artichoke","art","Art"].sort(s),["art","artichoke","Art","Artichoke"],"names with the same root and different cases sort lowercase names first"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(s),["email","\xE9mail","Email","\xC9mail"],"the same base characters with different case or accents sort lowercase names first"),e(s("a.md","A.md")<0,"case differences in names sort lowercase first"),e(s("art01","Art01")<0,"a numerically equivalent word of a different case sorts lowercase first"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(s),["a10.txt","a20.txt","A2.txt","A100.txt"],"filenames with number and case differences group by case then sort by number"),e(s("aggregate.go","aggregate_repo.go")>0,"when extensions are equal, compares full filenames")}),test("compareFileNamesUnicode",()=>{e(o(null,null)===0,"null should be equal"),e(o(null,"abc")<0,"null should be come before real values"),e(o("","")===0,"empty should be equal"),e(o("abc","abc")===0,"equal names should be equal"),e(o("z","A")>0,"z comes after A"),e(o("file.ext","file.ext")===0,"equal full names should be equal"),e(o("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(o("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(o("bbb.aaa","aaa.bbb")>0,"files should be compared by names even if extensions compare differently"),e(o(".abc",".abc")===0,"equal dotfile names should be equal"),e(o(".env.",".gitattributes")<0,"filenames starting with dots and with extensions should still sort properly"),e(o(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(o(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(o(null,".abc")<0,"null should come before dotfiles"),e(o(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(o(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(o(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(o(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(o("1","1")===0,"numerically equal full names should be equal"),e(o("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(o("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(o("a.ext1","b.Ext1")<0,"if names are different and extensions with numbers are equal except for case, filenames are sorted by unicode full filename"),e(o("a.ext1","a.Ext1")>0,"if names are equal and extensions with numbers are equal except for case, filenames are sorted by unicode full filename"),e(o("Z","a")<0,"Z comes before a"),e(o("a","A")>0,"the same letter sorts uppercase first"),e(o("\xE2","\xC2")>0,"the same accented letter sorts uppercase first"),e.deepStrictEqual(["artichoke","Artichoke","art","Art"].sort(o),["Art","Artichoke","art","artichoke"],"names with the same root and different cases sort uppercase first"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(o),["Email","email","\xC9mail","\xE9mail"],"the same base characters with different case or accents sort in unicode order"),e(o("aggregate.go","aggregate_repo.go")<0,"compares the whole name in unicode order, but dot comes before underscore"),e(o(".aaa_env",".aaa.env")>0,"an underscore in a dotfile name will sort after a dot"),e(o("abc2.txt","abc10.txt")>0,"filenames with numbers should be in unicode order even when they are multiple digits long"),e(o("abc02.txt","abc010.txt")>0,"filenames with numbers that have leading zeros sort in unicode order"),e(o("abc1.10.txt","abc1.2.txt")<0,"numbers with dots between them are sorted in unicode order"),e(o("abc02.txt","abc002.txt")>0,"filenames with equivalent numbers and leading zeros sort in unicode order"),e(o("abc.txt1","abc.txt01")>0,"same name plus extensions with equal numbers sort in unicode order"),e(o("art01","Art01")>0,"a numerically equivalent name of a different case compares uppercase first"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(o),["A100.txt","A2.txt","a10.txt","a20.txt"],"filenames with number and case differences sort in unicode order")}),test("compareFileExtensionsUnicode",()=>{e(t(null,null)===0,"null should be equal"),e(t(null,"abc")<0,"null should come before real files without extensions"),e(t("","")===0,"empty should be equal"),e(t("abc","abc")===0,"equal names should be equal"),e(t("z","A")>0,"z comes after A"),e(t("file.ext","file.ext")===0,"equal full filenames should be equal"),e(t("a.ext","b.ext")<0,"if equal extensions, filenames should be compared"),e(t("file.aaa","file.bbb")<0,"files with equal names should be compared by extensions"),e(t("bbb.aaa","aaa.bbb")<0,"files should be compared by extension first"),e(t("a.md","b.MD")<0,"when extensions are the same except for case, the files sort by name"),e(t("a.MD","a.md")<0,"case differences in extensions sort in unicode order"),e(t(".abc",".abc")===0,"equal dotfiles should be equal"),e(t(".md",".Gitattributes")>0,"dotfiles sort alphabetically regardless of case"),e(t(".env",".aaa.env")>0,"dotfiles sort alphabetically when they contain multiple dots"),e(t(".env",".env.aaa")<0,"dotfiles with the same root sort shortest first"),e(t(null,".abc")<0,"null should come before dotfiles"),e(t(".env","aaa.env")<0,"dotfiles come before filenames with extensions"),e(t(".MD","a.md")<0,"dotfiles sort before lowercase files"),e(t(".env","aaa")<0,"dotfiles come before filenames without extensions"),e(t(".md","A.MD")<0,"dotfiles sort before uppercase files"),e(t("1","1")===0,"numerically equal full names should be equal"),e(t("abc1.txt","abc1.txt")===0,"equal filenames with numbers should be equal"),e(t("abc1.txt","abc2.txt")<0,"filenames with numbers should be in numerical order, not alphabetical order"),e(t("txt.abc1","txt.abc1")===0,"equal extensions with numbers should be equal"),e(t("txt.abc1","txt.abc2")<0,"extensions with numbers should be in numerical order, not alphabetical order"),e(t("a.ext1","b.ext1")<0,"if equal extensions with numbers, full filenames should be compared"),e(t("Z","a")<0,"Z comes before a"),e(t("a","A")>0,"the same letter sorts uppercase first"),e(t("\xE2","\xC2")>0,"the same accented letter sorts uppercase first"),e.deepStrictEqual(["artichoke","Artichoke","art","Art"].sort(t),["Art","Artichoke","art","artichoke"],"names with the same root and different cases sort uppercase names first"),e.deepStrictEqual(["email","Email","\xE9mail","\xC9mail"].sort(t),["Email","email","\xC9mail","\xE9mail"],"the same base characters with different case or accents sort in unicode order"),e(t("a.MD","a.md")<0,"case differences in extensions sort by uppercase extension first"),e(t("a.md","A.md")>0,"case differences in names sort uppercase first"),e(t("art01","Art01")>0,"a numerically equivalent name of a different case sorts uppercase first"),e.deepStrictEqual(["a10.txt","A2.txt","A100.txt","a20.txt"].sort(t),["A100.txt","A2.txt","a10.txt","a20.txt"],"filenames with number and case differences sort in unicode order"),e(t("aggregate.go","aggregate_repo.go")<0,"when extensions are equal, compares full filenames in unicode order"),e(t("abc2.txt","abc10.txt")>0,"filenames with numbers should be in unicode order"),e(t("abc02.txt","abc010.txt")>0,"filenames with numbers that have leading zeros sort in unicode order"),e(t("abc1.10.txt","abc1.2.txt")<0,"numbers with dots between them sort in unicode order"),e(t("abc2.txt2","abc1.txt10")>0,"extensions with numbers should be in unicode order"),e(t("txt.abc2","txt.abc10")>0,"extensions with numbers should be in unicode order even when they are multiple digits long"),e(t("abc.txt01","abc.txt1")<0,"extensions with equal numbers should be in unicode order"),e(t("abc02.txt","abc002.txt")>0,"filenames with equivalent numbers and leading zeros sort in unicode order"),e(t("txt.abc01","txt.abc1")<0,"extensions with equivalent numbers sort in unicode order"),e(t("a.ext1","b.Ext1")<0,"if extensions with numbers are equal except for case, unicode full filenames should be compared"),e(t("a.ext1","a.Ext1")>0,"if extensions with numbers are equal except for case, unicode full filenames should be compared")}),h()});
