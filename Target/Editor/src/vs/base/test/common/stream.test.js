import a from"assert";import{timeout as p}from"../../common/async.js";import{bufferToReadable as y,VSBuffer as h}from"../../common/buffer.js";import{CancellationTokenSource as R}from"../../common/cancellation.js";import{consumeReadable as f,consumeStream as c,isReadable as w,isReadableBufferedStream as k,isReadableStream as q,listenStream as g,newWriteableStream as o,peekReadable as b,peekStream as d,prefixedReadable as S,prefixedStream as j,toReadable as W,toStream as v,transform as T}from"../../common/stream.js";import{ensureNoDisposablesAreLeakedInTestSuite as x}from"./utils.js";suite("Stream",()=>{test("isReadable",()=>{a.ok(!w(void 0)),a.ok(!w(Object.create(null))),a.ok(w(y(h.fromString(""))))}),test("isReadableStream",()=>{a.ok(!q(void 0)),a.ok(!q(Object.create(null))),a.ok(q(o(e=>e)))}),test("isReadableBufferedStream",async()=>{a.ok(!k(Object.create(null)));const e=o(n=>n);e.end();const t=await d(e,1);a.ok(k(t))}),test("WriteableStream - basics",()=>{const e=o(s=>s.join());let t=!1;e.on("error",s=>{t=!0});let n=!1;e.on("end",()=>{n=!0}),e.write("Hello");const r=[];e.on("data",s=>{r.push(s)}),a.strictEqual(r[0],"Hello"),e.write("World"),a.strictEqual(r[1],"World"),a.strictEqual(t,!1),a.strictEqual(n,!1),e.pause(),e.write("1"),e.write("2"),e.write("3"),a.strictEqual(r.length,2),e.resume(),a.strictEqual(r.length,3),a.strictEqual(r[2],"1,2,3"),e.error(new Error),a.strictEqual(t,!0),t=!1,e.error(new Error),a.strictEqual(t,!0),e.end("Final Bit"),a.strictEqual(r.length,4),a.strictEqual(r[3],"Final Bit"),a.strictEqual(n,!0),e.destroy(),e.write("Unexpected"),a.strictEqual(r.length,4)}),test("WriteableStream - end with empty string works",async()=>{const e=r=>r.length>0?r.join():"error",t=o(e);t.end("");const n=await c(t,e);a.strictEqual(n,"")}),test("WriteableStream - end with error works",async()=>{const e=r=>r[0],t=o(e);t.end(new Error("error"));const n=await c(t,e);a.ok(n instanceof Error)}),test("WriteableStream - removeListener",()=>{const e=o(i=>i.join());let t=!1;const n=i=>{t=!0};e.on("error",n);let r=!1;const s=()=>{r=!0};e.on("data",s),e.write("Hello"),a.strictEqual(r,!0),r=!1,e.removeListener("data",s),e.write("World"),a.strictEqual(r,!1),e.error(new Error),a.strictEqual(t,!0),t=!1,e.removeListener("error",n),e.on("error",()=>{}),e.error(new Error),a.strictEqual(t,!1)}),test("WriteableStream - highWaterMark",async()=>{const e=o(E=>E.join(),{highWaterMark:3});let t=e.write("1");a.ok(!t),t=e.write("2"),a.ok(!t),t=e.write("3"),a.ok(!t);const n=e.write("4");a.ok(n instanceof Promise);const r=e.write("5");a.ok(r instanceof Promise);let s=!1;(async()=>(await n,s=!0))();let i=!1;(async()=>(await r,i=!0))();let u;e.on("data",E=>{u=E}),a.ok(u),await p(0),a.strictEqual(s,!0),a.strictEqual(i,!0)}),test("consumeReadable",()=>{const e=l(["1","2","3","4","5"]),t=f(e,n=>n.join());a.strictEqual(t,"1,2,3,4,5")}),test("peekReadable",()=>{for(let n=0;n<5;n++){const r=l(["1","2","3","4","5"]),s=b(r,i=>i.join(),n);if(typeof s=="string")a.fail("Unexpected result");else{const i=f(s,u=>u.join());a.strictEqual(i,"1,2,3,4,5")}}let e=l(["1","2","3","4","5"]),t=b(e,n=>n.join(),5);a.strictEqual(t,"1,2,3,4,5"),e=l(["1","2","3","4","5"]),t=b(e,n=>n.join(),6),a.strictEqual(t,"1,2,3,4,5")}),test("peekReadable - error handling",async()=>{let e=o(r=>r),t,n=(async()=>{try{await d(e,1)}catch(r){t=r}})();e.error(new Error),await n,a.ok(t),e=o(r=>r),t=void 0,n=(async()=>{try{await d(e,1)}catch(r){t=r}})(),e.write("foo"),e.error(new Error),await n,a.ok(t),e=o(r=>r),t=void 0,n=(async()=>{try{await d(e,1)}catch(r){t=r}})(),e.write("foo"),e.write("bar"),e.error(new Error),await n,a.ok(!t),e.on("error",r=>t=r),e.on("data",r=>{}),a.ok(t)});function l(e){return{read:()=>e.shift()||null}}function m(e){const t=o(n=>n.join());return setTimeout(()=>{let n=null;for(;(n=e.read())!==null;)t.write(n);t.end()},0),t}test("consumeStream",async()=>{const e=m(l(["1","2","3","4","5"])),t=await c(e,n=>n.join());a.strictEqual(t,"1,2,3,4,5")}),test("consumeStream - without reducer",async()=>{const e=m(l(["1","2","3","4","5"])),t=await c(e);a.strictEqual(t,void 0)}),test("consumeStream - without reducer and error",async()=>{const e=o(n=>n.join());e.error(new Error);const t=await c(e);a.strictEqual(t,void 0)}),test("listenStream",()=>{const e=o(s=>s.join());let t=!1,n=!1,r="";g(e,{onData:s=>{r=s},onError:s=>{t=!0},onEnd:()=>{n=!0}}),e.write("Hello"),a.strictEqual(r,"Hello"),e.write("World"),a.strictEqual(r,"World"),a.strictEqual(t,!1),a.strictEqual(n,!1),e.error(new Error),a.strictEqual(t,!0),e.end("Final Bit"),a.strictEqual(n,!0)}),test("listenStream - cancellation",()=>{const e=o(i=>i.join());let t=!1,n=!1,r="";const s=new R;g(e,{onData:i=>{r=i},onError:i=>{t=!0},onEnd:()=>{n=!0}},s.token),s.cancel(),e.write("Hello"),a.strictEqual(r,""),e.write("World"),a.strictEqual(r,""),e.error(new Error),a.strictEqual(t,!1),e.end("Final Bit"),a.strictEqual(n,!1)}),test("peekStream",async()=>{for(let n=0;n<5;n++){const r=m(l(["1","2","3","4","5"])),s=await d(r,n);if(a.strictEqual(r,s.stream),s.ended)a.fail("Unexpected result, stream should not have ended yet");else{a.strictEqual(s.buffer.length,n+1,`maxChunks: ${n}`);const i=[];await c(r,u=>(i.push(...u),u.join())),a.strictEqual([...s.buffer,...i].join(),"1,2,3,4,5")}}let e=m(l(["1","2","3","4","5"])),t=await d(e,5);a.strictEqual(e,t.stream),a.strictEqual(t.buffer.join(),"1,2,3,4,5"),a.strictEqual(t.ended,!0),e=m(l(["1","2","3","4","5"])),t=await d(e,6),a.strictEqual(e,t.stream),a.strictEqual(t.buffer.join(),"1,2,3,4,5"),a.strictEqual(t.ended,!0)}),test("toStream",async()=>{const e=v("1,2,3,4,5",n=>n.join()),t=await c(e,n=>n.join());a.strictEqual(t,"1,2,3,4,5")}),test("toReadable",async()=>{const e=W("1,2,3,4,5"),t=f(e,n=>n.join());a.strictEqual(t,"1,2,3,4,5")}),test("transform",async()=>{const e=o(r=>r.join()),t=T(e,{data:r=>r+r},r=>r.join());setTimeout(()=>{e.write("1"),e.write("2"),e.write("3"),e.write("4"),e.end("5")},0);const n=await c(t,r=>r.join());a.strictEqual(n,"11,22,33,44,55")}),test("events are delivered even if a listener is removed during delivery",()=>{const e=o(i=>i.join());let t=!1,n=!1;const r=()=>{e.removeListener("end",r),t=!0},s=()=>{n=!0};e.on("end",r),e.on("end",s),e.on("data",()=>{}),e.end(""),a.strictEqual(t,!0),a.strictEqual(n,!0)}),test("prefixedReadable",()=>{let e=S("1,2",l(["3","4","5"]),t=>t.join(","));a.strictEqual(f(e,t=>t.join(",")),"1,2,3,4,5"),e=S("empty",l([]),t=>t.join(",")),a.strictEqual(f(e,t=>t.join(",")),"empty")}),test("prefixedStream",async()=>{let e=o(r=>r.join());e.write("3"),e.write("4"),e.write("5"),e.end();let t=j("1,2",e,r=>r.join(","));a.strictEqual(await c(t,r=>r.join(",")),"1,2,3,4,5"),e=o(r=>r.join()),e.end(),t=j("1,2",e,r=>r.join(",")),a.strictEqual(await c(t,r=>r.join(",")),"1,2"),e=o(r=>r.join()),e.error(new Error("fail")),t=j("error",e,r=>r.join(","));let n;try{await c(t,r=>r.join(","))}catch(r){n=r}a.ok(n)}),x()});
