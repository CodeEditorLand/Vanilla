var M=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var c=(f,t,o,r)=>{for(var e=r>1?void 0:r?v(t,o):t,p=f.length-1,i;p>=0;p--)(i=f[p])&&(e=(r?i(t,o,e):i(e))||e);return r&&e&&M(t,o,e),e},I=(f,t)=>(o,r)=>t(o,r,f);import"../../../../../base/common/uri.js";import{mock as E}from"../../../../../base/test/common/mock.js";import{Range as w}from"../../../../../editor/common/core/range.js";import{IModelService as L}from"../../../../../editor/common/services/model.js";import{assertType as D}from"../../../../../base/common/types.js";import"../../../../../editor/common/services/editorWorker.js";import"../../../../../editor/common/diff/documentDiffProvider.js";import{BaseEditorSimpleWorker as h}from"../../../../../editor/common/services/editorSimpleWorker.js";import{LineRange as s}from"../../../../../editor/common/core/lineRange.js";import{MovedText as R}from"../../../../../editor/common/diff/linesDiffComputer.js";import{LineRangeMapping as y,DetailedLineRangeMapping as S,RangeMapping as _}from"../../../../../editor/common/diff/rangeMapping.js";import"../../../../../editor/common/languages.js";let g=class extends E(){constructor(o){super();this._modelService=o}_worker=new h;async computeMoreMinimalEdits(o,r,e){}async computeDiff(o,r,e,p){const i=this._modelService.getModel(o),m=this._modelService.getModel(r);D(i),D(m),this._worker.$acceptNewModel({url:i.uri.toString(),versionId:i.getVersionId(),lines:i.getLinesContent(),EOL:i.getEOL()}),this._worker.$acceptNewModel({url:m.uri.toString(),versionId:m.getVersionId(),lines:m.getLinesContent(),EOL:m.getEOL()});const a=await this._worker.$computeDiff(i.uri.toString(),m.uri.toString(),e,p);if(!a)return a;return{identical:a.identical,quitEarly:a.quitEarly,changes:u(a.changes),moves:a.moves.map(d=>new R(new y(new s(d[0],d[1]),new s(d[2],d[3])),u(d[4])))};function u(d){return d.map(l=>new S(new s(l[0],l[1]),new s(l[2],l[3]),l[4]?.map(n=>new _(new w(n[0],n[1],n[2],n[3]),new w(n[4],n[5],n[6],n[7])))))}}};g=c([I(0,L)],g);export{g as TestWorkerService};
