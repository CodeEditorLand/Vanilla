import s from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as n}from"../../../../../base/test/common/utils.js";import{MockContextKeyService as a}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{NullLogService as c}from"../../../../../platform/log/common/log.js";import{Expression as u,StackFrame as d,Thread as m}from"../../common/debugModel.js";import{Source as l}from"../../common/debugSource.js";import{ViewModel as f}from"../../common/debugViewModel.js";import{mockUriIdentityService as p}from"./mockDebugModel.js";import{MockSession as S}from"../common/mockDebug.js";suite("Debug - View Model",()=>{let e;setup(()=>{e=new f(new a)}),n(),test("focused stack frame",()=>{s.strictEqual(e.focusedStackFrame,void 0),s.strictEqual(e.focusedThread,void 0);const t=new S,r=new m(t,"myThread",1),i=new l({name:"internalModule.js",sourceReference:11,presentationHint:"deemphasize"},"aDebugSessionId",p,new c),o=new d(r,1,i,"app.js","normal",{startColumn:1,startLineNumber:1,endColumn:1,endLineNumber:1},0,!0);e.setFocus(o,r,t,!1),s.strictEqual(e.focusedStackFrame.getId(),o.getId()),s.strictEqual(e.focusedThread.threadId,1),s.strictEqual(e.focusedSession.getId(),t.getId())}),test("selected expression",()=>{s.strictEqual(e.getSelectedExpression(),void 0);const t=new u("my expression");e.setSelectedExpression(t,!1),s.strictEqual(e.getSelectedExpression()?.expression,t)}),test("multi session view and changed workbench state",()=>{s.strictEqual(e.isMultiSessionView(),!1),e.setMultiSessionView(!0),s.strictEqual(e.isMultiSessionView(),!0)})});
