import{deepStrictEqual as a,strictEqual as s,ok as S}from"assert";import{VSBuffer as E}from"../../../../../base/common/buffer.js";import{Schemas as h}from"../../../../../base/common/network.js";import{join as D}from"../../../../../base/common/path.js";import{isWindows as v,OperatingSystem as l}from"../../../../../base/common/platform.js";import{env as n}from"../../../../../base/common/process.js";import{URI as y}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as C}from"../../../../../base/test/common/utils.js";import{IConfigurationService as F}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as I}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{IFileService as H}from"../../../../../platform/files/common/files.js";import{TestInstantiationService as g}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import"../../../../../platform/remote/common/remoteAgentEnvironment.js";import{IStorageService as k}from"../../../../../platform/storage/common/storage.js";import{fetchBashHistory as p,fetchFishHistory as f,fetchPwshHistory as O,fetchZshHistory as M,sanitizeFishHistoryCmd as T,TerminalPersistedHistory as _}from"../../common/history.js";import{IRemoteAgentService as w}from"../../../../services/remote/common/remoteAgentService.js";import{TestStorageService as x}from"../../../../test/common/workbenchTestServices.js";function P(A){return{terminal:{integrated:{shellIntegration:{history:A}}}}}const d=["single line command",`git commit -m "A wrapped line in pwsh history

Some commit description

Fixes #xyz"`,"git status",`two "
line"`];suite("Terminal history",()=>{const A=C();suite("TerminalPersistedHistory",()=>{let t,o,c;setup(()=>{c=new I(P(5)),o=A.add(new g),o.set(F,c),o.set(k,A.add(new x)),t=A.add(o.createInstance(_,"test"))}),teardown(()=>{o.dispose()}),test("should support adding items to the cache and respect LRU",()=>{t.add("foo",1),a(Array.from(t.entries),[["foo",1]]),t.add("bar",2),a(Array.from(t.entries),[["foo",1],["bar",2]]),t.add("foo",1),a(Array.from(t.entries),[["bar",2],["foo",1]])}),test("should support removing specific items",()=>{t.add("1",1),t.add("2",2),t.add("3",3),t.add("4",4),t.add("5",5),s(Array.from(t.entries).length,5),t.add("6",6),s(Array.from(t.entries).length,5)}),test("should limit the number of entries based on config",()=>{t.add("1",1),t.add("2",2),t.add("3",3),t.add("4",4),t.add("5",5),s(Array.from(t.entries).length,5),t.add("6",6),s(Array.from(t.entries).length,5),c.setUserConfiguration("terminal",P(2).terminal),c.onDidChangeConfigurationEmitter.fire({affectsConfiguration:()=>!0}),s(Array.from(t.entries).length,2),t.add("7",7),s(Array.from(t.entries).length,2),c.setUserConfiguration("terminal",P(3).terminal),c.onDidChangeConfigurationEmitter.fire({affectsConfiguration:()=>!0}),s(Array.from(t.entries).length,2),t.add("8",8),s(Array.from(t.entries).length,3),t.add("9",9),s(Array.from(t.entries).length,3)}),test("should reload from storage service after recreation",()=>{t.add("1",1),t.add("2",2),t.add("3",3),s(Array.from(t.entries).length,3);const i=A.add(o.createInstance(_,"test"));s(Array.from(i.entries).length,3)})}),suite("fetchBashHistory",()=>{let t,o;const c=["single line command",'git commit -m "A wrapped line in pwsh history',"","Some commit description","",'Fixes #xyz"',"git status",'two "','line"'].join(`
`);let i,m=null,r=null;setup(()=>{i=new g,i.stub(H,{async readFile(e){const u=y.from({scheme:t,path:o});return s(e.scheme,u.scheme),s(e.path,u.path),{value:E.fromString(c)}}}),i.stub(w,{async getEnvironment(){return r},getConnection(){return m}})}),teardown(()=>{i.dispose()}),v||suite("local",()=>{let e;setup(()=>{e={HOME:n.HOME},n.HOME="/home/user",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.bash_history"}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME}),test("current OS",async()=>{o="/home/user/.bash_history",a(Array.from(await i.invokeFunction(p)),d)})}),suite("remote",()=>{let e;setup(()=>{e={HOME:n.HOME},n.HOME="/home/user",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.bash_history"}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME}),test("Windows",async()=>{r={os:l.Windows},s(await i.invokeFunction(p),void 0)}),test("macOS",async()=>{r={os:l.Macintosh},a(Array.from(await i.invokeFunction(p)),d)}),test("Linux",async()=>{r={os:l.Linux},a(Array.from(await i.invokeFunction(p)),d)})})}),suite("fetchZshHistory",()=>{let t,o;const c=[": 1655252330:0;single line command",': 1655252330:0;git commit -m "A wrapped line in pwsh history\\',"\\","Some commit description\\","\\",'Fixes #xyz"',": 1655252330:0;git status",': 1655252330:0;two "\\','line"'].join(`
`);let i,m=null,r=null;setup(()=>{i=new g,i.stub(H,{async readFile(e){const u=y.from({scheme:t,path:o});return s(e.scheme,u.scheme),s(e.path,u.path),{value:E.fromString(c)}}}),i.stub(w,{async getEnvironment(){return r},getConnection(){return m}})}),teardown(()=>{i.dispose()}),v||suite("local",()=>{let e;setup(()=>{e={HOME:n.HOME},n.HOME="/home/user",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.bash_history"}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME}),test("current OS",async()=>{o="/home/user/.zsh_history",a(Array.from(await i.invokeFunction(M)),d)})}),suite("remote",()=>{let e;setup(()=>{e={HOME:n.HOME},n.HOME="/home/user",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.zsh_history"}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME}),test("Windows",async()=>{r={os:l.Windows},s(await i.invokeFunction(M),void 0)}),test("macOS",async()=>{r={os:l.Macintosh},a(Array.from(await i.invokeFunction(M)),d)}),test("Linux",async()=>{r={os:l.Linux},a(Array.from(await i.invokeFunction(M)),d)})})}),suite("fetchPwshHistory",()=>{let t,o;const c=["single line command",'git commit -m "A wrapped line in pwsh history`',"`","Some commit description`","`",'Fixes #xyz"',"git status",'two "`','line"'].join(`
`);let i,m=null,r=null;setup(()=>{i=new g,i.stub(H,{async readFile(e){const u=y.from({scheme:t,authority:m?.remoteAuthority,path:y.file(o).path});return s(e.toString().replaceAll("%5C","/"),u.toString().replaceAll("%5C","/")),{value:E.fromString(c)}}}),i.stub(w,{async getEnvironment(){return r},getConnection(){return m}})}),teardown(()=>{i.dispose()}),suite("local",()=>{let e;setup(()=>{e={HOME:n.HOME,APPDATA:n.APPDATA},n.HOME="/home/user",n.APPDATA="C:\\AppData",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.zsh_history",e={HOME:n.HOME,APPDATA:n.APPDATA}}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME,e.APPDATA===void 0?delete n.APPDATA:n.APPDATA=e.APPDATA}),test("current OS",async()=>{v?o=D(n.APPDATA,"Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt"):o=D(n.HOME,".local/share/powershell/PSReadline/ConsoleHost_history.txt"),a(Array.from(await i.invokeFunction(O)),d)})}),suite("remote",()=>{let e;setup(()=>{m={remoteAuthority:"some-remote"},t=h.vscodeRemote,e={HOME:n.HOME,APPDATA:n.APPDATA}}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME,e.APPDATA===void 0?delete n.APPDATA:n.APPDATA=e.APPDATA}),test("Windows",async()=>{r={os:l.Windows},n.APPDATA="C:\\AppData",o="C:\\AppData\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt",a(Array.from(await i.invokeFunction(O)),d)}),test("macOS",async()=>{r={os:l.Macintosh},n.HOME="/home/user",o="/home/user/.local/share/powershell/PSReadline/ConsoleHost_history.txt",a(Array.from(await i.invokeFunction(O)),d)}),test("Linux",async()=>{r={os:l.Linux},n.HOME="/home/user",o="/home/user/.local/share/powershell/PSReadline/ConsoleHost_history.txt",a(Array.from(await i.invokeFunction(O)),d)})})}),suite("fetchFishHistory",()=>{let t,o;const c=["- cmd: single line command","  when: 1650000000",'- cmd: git commit -m "A wrapped line in pwsh history\\n\\nSome commit description\\n\\nFixes #xyz"',"  when: 1650000010","- cmd: git status","  when: 1650000020",'- cmd: two "\\nline"',"  when: 1650000030"].join(`
`);let i,m=null,r=null;setup(()=>{i=new g,i.stub(H,{async readFile(e){const u=y.from({scheme:t,path:o});return s(e.scheme,u.scheme),s(e.path,u.path),{value:E.fromString(c)}}}),i.stub(w,{async getEnvironment(){return r},getConnection(){return m}})}),teardown(()=>{i.dispose()}),v||(suite("local",()=>{let e;setup(()=>{e={HOME:n.HOME},n.HOME="/home/user",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.local/share/fish/fish_history"}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME}),test("current OS",async()=>{o="/home/user/.local/share/fish/fish_history",a(Array.from(await i.invokeFunction(f)),d)})}),suite("local (overriden path)",()=>{let e;setup(()=>{e={XDG_DATA_HOME:n.XDG_DATA_HOME},n.XDG_DATA_HOME="/home/user/data-home",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/data-home/fish/fish_history"}),teardown(()=>{e.XDG_DATA_HOME===void 0?delete n.XDG_DATA_HOME:n.XDG_DATA_HOME=e.XDG_DATA_HOME}),test("current OS",async()=>{o="/home/user/data-home/fish/fish_history",a(Array.from(await i.invokeFunction(f)),d)})})),suite("remote",()=>{let e;setup(()=>{e={HOME:n.HOME},n.HOME="/home/user",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/.local/share/fish/fish_history"}),teardown(()=>{e.HOME===void 0?delete n.HOME:n.HOME=e.HOME}),test("Windows",async()=>{r={os:l.Windows},s(await i.invokeFunction(f),void 0)}),test("macOS",async()=>{r={os:l.Macintosh},a(Array.from(await i.invokeFunction(f)),d)}),test("Linux",async()=>{r={os:l.Linux},a(Array.from(await i.invokeFunction(f)),d)})}),suite("remote (overriden path)",()=>{let e;setup(()=>{e={XDG_DATA_HOME:n.XDG_DATA_HOME},n.XDG_DATA_HOME="/home/user/data-home",m={remoteAuthority:"some-remote"},t=h.vscodeRemote,o="/home/user/data-home/fish/fish_history"}),teardown(()=>{e.XDG_DATA_HOME===void 0?delete n.XDG_DATA_HOME:n.XDG_DATA_HOME=e.XDG_DATA_HOME}),test("Windows",async()=>{r={os:l.Windows},s(await i.invokeFunction(f),void 0)}),test("macOS",async()=>{r={os:l.Macintosh},a(Array.from(await i.invokeFunction(f)),d)}),test("Linux",async()=>{r={os:l.Linux},a(Array.from(await i.invokeFunction(f)),d)})}),suite("sanitizeFishHistoryCmd",()=>{test("valid new-lines",()=>{const e=["\\n","\\n at start","some \\n in the middle","at the end \\n","\\\\\\n","\\\\\\n valid at start","valid \\\\\\n in the middle","valid in the end \\\\\\n","\\\\\\\\\\n","\\\\\\\\\\n valid at start","valid \\\\\\\\\\n in the middle","valid in the end \\\\\\\\\\n","mixed valid \\r\\n","mixed valid \\\\\\r\\n","mixed valid \\r\\\\\\n"];for(const u of e)S(T(u).includes(`
`))}),test("invalid new-lines",()=>{const e=["\\\\n","\\\\n invalid at start","invalid \\\\n in the middle","invalid in the end \\\\n","\\\\\\\\n","\\\\\\\\n invalid at start","invalid \\\\\\\\n in the middle","invalid in the end \\\\\\\\n","mixed invalid \\r\\\\n","mixed invalid \\r\\\\\\\\n",'echo "\\\\n"'];for(const u of e)S(!T(u).includes(`
`))})})})});
