import{deepStrictEqual as t}from"assert";import{deserializeEnvironmentVariableCollection as n,serializeEnvironmentVariableCollection as r}from"../../../../../platform/terminal/common/environmentVariableShared.js";import{EnvironmentVariableMutatorType as e}from"../../../../../platform/terminal/common/environmentVariable.js";import{ensureNoDisposablesAreLeakedInTestSuite as l}from"../../../../../base/test/common/utils.js";suite("EnvironmentVariable - deserializeEnvironmentVariableCollection",()=>{l(),test("should construct correctly with 3 arguments",()=>{const a=n([["A",{value:"a",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Append,variable:"B"}],["C",{value:"c",type:e.Prepend,variable:"C"}]]),i=[...a.keys()];t(i,["A","B","C"]),t(a.get("A"),{value:"a",type:e.Replace,variable:"A"}),t(a.get("B"),{value:"b",type:e.Append,variable:"B"}),t(a.get("C"),{value:"c",type:e.Prepend,variable:"C"})})}),suite("EnvironmentVariable - serializeEnvironmentVariableCollection",()=>{l(),test("should correctly serialize the object",()=>{const a=new Map;t(r(a),[]),a.set("A",{value:"a",type:e.Replace,variable:"A"}),a.set("B",{value:"b",type:e.Append,variable:"B"}),a.set("C",{value:"c",type:e.Prepend,variable:"C"}),t(r(a),[["A",{value:"a",type:e.Replace,variable:"A"}],["B",{value:"b",type:e.Append,variable:"B"}],["C",{value:"c",type:e.Prepend,variable:"C"}]])})});
