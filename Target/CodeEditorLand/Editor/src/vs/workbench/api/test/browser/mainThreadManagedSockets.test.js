import m from"assert";import{disposableTimeout as u,timeout as f}from"../../../../base/common/async.js";import{VSBuffer as s}from"../../../../base/common/buffer.js";import{Emitter as d}from"../../../../base/common/event.js";import{DisposableStore as S}from"../../../../base/common/lifecycle.js";import"../../../../base/parts/ipc/common/ipc.net.js";import{mock as h}from"../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../../base/test/common/utils.js";import"../../../../platform/remote/common/managedSocket.js";import{MainThreadManagedSocket as p}from"../../browser/mainThreadManagedSockets.js";import"../../common/extHost.protocol.js";suite("MainThreadManagedSockets",()=>{const a=v();suite("ManagedSocket",()=>{let r,i;class l extends h(){onDidFire=new d;events=[];$remoteSocketWrite(e,t){this.events.push({socketId:e,data:t.toString()}),this.onDidFire.fire()}$remoteSocketDrain(e){return this.events.push({socketId:e,event:"drain"}),this.onDidFire.fire(),Promise.resolve()}$remoteSocketEnd(e){this.events.push({socketId:e,event:"end"}),this.onDidFire.fire()}expectEvent(e,t){if(this.events.some(e))return;const o=new S;return new Promise(g=>{o.add(this.onDidFire.event(()=>{this.events.some(e)})),o.add(u(()=>{throw new Error(`Expected ${t} but only had ${JSON.stringify(this.events,null,2)}`)},1e3))}).finally(()=>o.dispose())}}setup(()=>{r=new l,i={onClose:new d,onData:new d,onEnd:new d}});async function c(){const n=p.connect(1,r,"/hello","world=true","",i);return await r.expectEvent(e=>e.data&&e.data.startsWith(`GET ws://localhost/hello?world=true&skipWebSocketFrames=true HTTP/1.1\r
Connection: Upgrade\r
Upgrade: websocket\r
Sec-WebSocket-Key:`),"websocket open event"),i.onData.fire(s.fromString(`Opened successfully ;)\r
\r
`)),a.add(await n)}test("connects",async()=>{await c()}),test("includes trailing connection data",async()=>{const n=p.connect(1,r,"/hello","world=true","",i);await r.expectEvent(o=>o.data&&o.data.includes("GET ws://localhost"),"websocket open event"),i.onData.fire(s.fromString(`Opened successfully ;)\r
\r
Some trailing data`));const e=a.add(await n),t=[];a.add(e.onData(o=>t.push(o.toString()))),await f(1),m.deepStrictEqual(t,["Some trailing data"])}),test("round trips data",async()=>{const n=await c(),e=[];a.add(n.onData(t=>e.push(t.toString()))),n.write(s.fromString("ping")),await r.expectEvent(t=>t.data==="ping","expected ping"),i.onData.fire(s.fromString("pong")),m.deepStrictEqual(e,["pong"])})})});
