import t from"assert";import{URI as l}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as T}from"../../../../base/test/common/utils.js";import{ExtensionIdentifier as x,TargetPlatform as L}from"../../../../platform/extensions/common/extensions.js";import{DEFAULT_LOG_LEVEL as S,LogLevel as D}from"../../../../platform/log/common/log.js";import{TelemetryLevel as o}from"../../../../platform/telemetry/common/telemetry.js";import{TestTelemetryLoggerService as y}from"../../../../platform/telemetry/test/common/telemetryLogAppender.test.js";import"../../common/extHostInitDataService.js";import{ExtHostTelemetry as A,ExtHostTelemetryLogger as a}from"../../common/extHostTelemetry.js";import"../../../services/extensions/common/extensionHostProtocol.js";import{mock as h}from"../../../test/common/workbenchTestServices.js";suite("ExtHostTelemetry",function(){const i=T(),g={isExtensionDevelopmentDebug:!1,extensionDevelopmentLocationURI:void 0,extensionTestsLocationURI:void 0,appRoot:void 0,appName:"test",extensionTelemetryLogResource:l.parse("fake"),isExtensionTelemetryLoggingOnly:!1,appHost:"test",appLanguage:"en",globalStorageHome:l.parse("fake"),workspaceStorageHome:l.parse("fake"),appUriScheme:"test"},m={firstSessionDate:"2020-01-01T00:00:00.000Z",sessionId:"test",machineId:"test",sqmId:"test",devDeviceId:"test"},E={authority:"test",isRemote:!1,connectionData:null},n={identifier:new x("test-extension"),targetPlatform:L.UNIVERSAL,isBuiltin:!0,isUserBuiltin:!0,isUnderDevelopment:!0,name:"test-extension",publisher:"vscode",version:"1.0.0",engines:{vscode:"*"},extensionLocation:l.parse("fake"),enabledApiProposals:void 0},p=()=>{const e=new A(new class extends h(){environment=g;telemetryInfo=m;remote=E},new y(S));return i.add(e),e.$initializeTelemetryLevel(o.USAGE,!0,{usage:!0,error:!0}),e},s=(e,r,f)=>{const d=r??p(),q={sendEventData:(c,u)=>{e.dataArr.push({eventName:c,data:u})},sendErrorData:(c,u)=>{e.exceptionArr.push({exception:c,data:u})},flush:()=>{e.flushCalled=!0}};r&&i.add(r);const v=d.instantiateLogger(n,q,f);return i.add(v),v};test("Validate sender instances",function(){t.throws(()=>a.validateSender(null)),t.throws(()=>a.validateSender(1)),t.throws(()=>a.validateSender({})),t.throws(()=>{a.validateSender({sendErrorData:()=>{},sendEventData:!0})}),t.throws(()=>{a.validateSender({sendErrorData:123,sendEventData:()=>{}})}),t.throws(()=>{a.validateSender({sendErrorData:()=>{},sendEventData:()=>{},flush:!0})})}),test("Ensure logger gets proper telemetry level during initialization",function(){const e=p();let r=e.getTelemetryDetails();t.strictEqual(r.isCrashEnabled,!0),t.strictEqual(r.isUsageEnabled,!0),t.strictEqual(r.isErrorsEnabled,!0),e.$initializeTelemetryLevel(o.ERROR,!0,{usage:!0,error:!0}),r=e.getTelemetryDetails(),t.strictEqual(r.isCrashEnabled,!0),t.strictEqual(r.isUsageEnabled,!1),t.strictEqual(r.isErrorsEnabled,!0),e.$initializeTelemetryLevel(o.CRASH,!0,{usage:!0,error:!0}),r=e.getTelemetryDetails(),t.strictEqual(r.isCrashEnabled,!0),t.strictEqual(r.isUsageEnabled,!1),t.strictEqual(r.isErrorsEnabled,!1),e.$initializeTelemetryLevel(o.USAGE,!0,{usage:!1,error:!0}),r=e.getTelemetryDetails(),t.strictEqual(r.isCrashEnabled,!0),t.strictEqual(r.isUsageEnabled,!1),t.strictEqual(r.isErrorsEnabled,!0),e.dispose()}),test("Simple log event to TelemetryLogger",function(){const e={dataArr:[],exceptionArr:[],flushCalled:!1},r=s(e);r.logUsage("test-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,1),t.strictEqual(e.dataArr[0].eventName,`${n.name}/test-event`),t.strictEqual(e.dataArr[0].data["test-data"],"test-data"),r.logUsage("test-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,2),r.logError("test-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,3),r.logError(new Error("test-error"),{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,3),t.strictEqual(e.exceptionArr.length,1),t.strictEqual(e.flushCalled,!1),r.dispose(),t.strictEqual(e.flushCalled,!0)}),test("Simple log event to TelemetryLogger with options",function(){const e={dataArr:[],exceptionArr:[],flushCalled:!1},r=s(e,void 0,{additionalCommonProperties:{"common.foo":"bar"}});r.logUsage("test-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,1),t.strictEqual(e.dataArr[0].eventName,`${n.name}/test-event`),t.strictEqual(e.dataArr[0].data["test-data"],"test-data"),t.strictEqual(e.dataArr[0].data["common.foo"],"bar"),r.logUsage("test-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,2),r.logError("test-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,3),r.logError(new Error("test-error"),{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,3),t.strictEqual(e.exceptionArr.length,1),t.strictEqual(e.flushCalled,!1),r.dispose(),t.strictEqual(e.flushCalled,!0)}),test("Log error should get common properties #193205",function(){const e={dataArr:[],exceptionArr:[],flushCalled:!1},r=s(e,void 0,{additionalCommonProperties:{"common.foo":"bar"}});r.logError(new Error("Test error")),t.strictEqual(e.exceptionArr.length,1),t.strictEqual(e.exceptionArr[0].data["common.foo"],"bar"),t.strictEqual(e.exceptionArr[0].data["common.product"],"test"),r.logError("test-error-event"),t.strictEqual(e.dataArr.length,1),t.strictEqual(e.dataArr[0].data["common.foo"],"bar"),t.strictEqual(e.dataArr[0].data["common.product"],"test"),r.logError("test-error-event",{"test-data":"test-data"}),t.strictEqual(e.dataArr.length,2),t.strictEqual(e.dataArr[1].data["common.foo"],"bar"),t.strictEqual(e.dataArr[1].data["common.product"],"test"),r.logError("test-error-event",{properties:{"test-data":"test-data"}}),t.strictEqual(e.dataArr.length,3),t.strictEqual(e.dataArr[2].data.properties["common.foo"],"bar"),t.strictEqual(e.dataArr[2].data.properties["common.product"],"test"),r.dispose(),t.strictEqual(e.flushCalled,!0)}),test("Ensure logger properly cleans PII",function(){const e={dataArr:[],exceptionArr:[],flushCalled:!1};s(e).logUsage("test-event",{"fake-password":"pwd=123","fake-email":"no-reply@example.com","fake-token":"token=123","fake-slack-token":"xoxp-123","fake-path":"/Users/username/.vscode/extensions"}),t.strictEqual(e.dataArr.length,1),t.strictEqual(e.dataArr[0].eventName,`${n.name}/test-event`),t.strictEqual(e.dataArr[0].data["fake-password"],"<REDACTED: Generic Secret>"),t.strictEqual(e.dataArr[0].data["fake-email"],"<REDACTED: Email>"),t.strictEqual(e.dataArr[0].data["fake-token"],"<REDACTED: Generic Secret>"),t.strictEqual(e.dataArr[0].data["fake-slack-token"],"<REDACTED: Slack Token>"),t.strictEqual(e.dataArr[0].data["fake-path"],"<REDACTED: user-file-path>")}),test("Ensure output channel is logged to",function(){const e=new y(D.Trace),r=new A(new class extends h(){environment=g;telemetryInfo=m;remote=E},e);r.$initializeTelemetryLevel(o.USAGE,!0,{usage:!0,error:!0});const d=s({dataArr:[],exceptionArr:[],flushCalled:!1},r);t.strictEqual(e.createLogger().logs.length,2),d.logUsage("test-event",{"test-data":"test-data"}),t.strictEqual(e.createLogger().logs.length,3),t.ok(e.createLogger().logs[2].startsWith("test-extension/test-event"))})});
