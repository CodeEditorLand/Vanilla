import n from"assert";import{timeout as d}from"../../../../base/common/async.js";import{URI as i}from"../../../../base/common/uri.js";import{runWithFakedTimers as l}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../base/test/common/utils.js";import{MarkerService as p}from"../../../../platform/markers/common/markerService.js";import"../../../../platform/markers/common/markers.js";import"../../../../platform/uriIdentity/common/uriIdentity.js";import{MainThreadDiagnostics as c}from"../../browser/mainThreadDiagnostics.js";import"../../../services/extensions/common/extHostCustomers.js";import{ExtensionHostKind as m}from"../../../services/extensions/common/extensionHostKind.js";import{mock as u}from"../../../test/common/workbenchTestServices.js";suite("MainThreadDiagnostics",function(){let e;setup(function(){e=new p}),teardown(function(){e.dispose()}),g(),test("clear markers on dispose",function(){const t=new c(new class{remoteAuthority="";extensionHostKind=m.LocalProcess;dispose(){}assertRegistered(){}set(s){return null}getProxy(){return{$acceptMarkersChange(){}}}drain(){return null}},e,new class extends u(){asCanonicalUri(s){return s}});t.$changeMany("foo",[[i.file("a"),[{code:"666",startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:1,message:"fffff",severity:1,source:"me"}]]]),n.strictEqual(e.read().length,1),t.dispose(),n.strictEqual(e.read().length,0)}),test("OnDidChangeDiagnostics triggers twice on same diagnostics #136434",function(){return l({},async()=>{const t=[],s=new c(new class{remoteAuthority="";extensionHostKind=m.LocalProcess;dispose(){}assertRegistered(){}set(r){return null}getProxy(){return{$acceptMarkersChange(r){t.push(r)}}}drain(){return null}},e,new class extends u(){asCanonicalUri(r){return r}}),a={code:"666",startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:1,severity:1,source:"me"},o=i.file("a");s.$changeMany("foo",[[o,[{...a,message:"same_owner"}]]]),e.changeOne("bar",o,[{...a,message:"forgein_owner"}]),await d(0),n.strictEqual(e.read().length,2),n.strictEqual(t.length,1),n.strictEqual(t[0].length,1),n.strictEqual(t[0][0][1][0].message,"forgein_owner"),s.dispose()})}),test('onDidChangeDiagnostics different behavior when "extensionKind" ui running on remote workspace #136955',function(){return l({},async()=>{const t={code:"666",startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:1,severity:1,source:"me",message:"message"},s=i.file("a");e.changeOne("bar",s,[t]);const a=[],o=new c(new class{remoteAuthority="";extensionHostKind=m.LocalProcess;dispose(){}assertRegistered(){}set(r){return null}getProxy(){return{$acceptMarkersChange(r){a.push(r)}}}drain(){return null}},e,new class extends u(){asCanonicalUri(r){return r}});o.$clear("bar"),await d(0),n.strictEqual(e.read().length,0),n.strictEqual(a.length,1),o.dispose()})})});
