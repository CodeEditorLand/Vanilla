import*as O from"sinon";import i from"assert";import*as c from"../../../../../base/common/json.js";import{Event as T}from"../../../../../base/common/event.js";import{Registry as A}from"../../../../../platform/registry/common/platform.js";import{IEnvironmentService as L}from"../../../../../platform/environment/common/environment.js";import{IWorkspaceContextService as P}from"../../../../../platform/workspace/common/workspace.js";import{TestEnvironmentService as h,TestTextFileService as U,workbenchInstantiationService as q}from"../../../../test/browser/workbenchTestServices.js";import*as C from"../../../../../base/common/uuid.js";import{Extensions as D}from"../../../../../platform/configuration/common/configurationRegistry.js";import{WorkspaceService as b}from"../../browser/configurationService.js";import{ConfigurationEditing as W,ConfigurationEditingErrorCode as S,EditableConfigurationTarget as n}from"../../common/configurationEditing.js";import{WORKSPACE_STANDALONE_CONFIGURATIONS as y,FOLDER_SETTINGS_PATH as N,USER_STANDALONE_CONFIGURATIONS as p}from"../../common/configuration.js";import{IConfigurationService as I}from"../../../../../platform/configuration/common/configuration.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ITextFileService as E}from"../../../textfile/common/textfiles.js";import{ITextModelService as x}from"../../../../../editor/common/services/resolverService.js";import{TextModelResolverService as K}from"../../../textmodelResolver/common/textModelResolverService.js";import{INotificationService as G}from"../../../../../platform/notification/common/notification.js";import{ICommandService as J}from"../../../../../platform/commands/common/commands.js";import{CommandService as Y}from"../../../commands/common/commandService.js";import{URI as H}from"../../../../../base/common/uri.js";import{IRemoteAgentService as j}from"../../../remote/common/remoteAgentService.js";import{FileService as V}from"../../../../../platform/files/common/fileService.js";import{NullLogService as F}from"../../../../../platform/log/common/log.js";import{Schemas as _}from"../../../../../base/common/network.js";import{IFileService as B}from"../../../../../platform/files/common/files.js";import{KeybindingsEditingService as M,IKeybindingEditingService as z}from"../../../keybinding/common/keybindingEditing.js";import{FileUserDataProvider as Q}from"../../../../../platform/userData/common/fileUserDataProvider.js";import{UriIdentityService as X}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{toDisposable as Z}from"../../../../../base/common/lifecycle.js";import{InMemoryFileSystemProvider as $}from"../../../../../platform/files/common/inMemoryFilesystemProvider.js";import{joinPath as u}from"../../../../../base/common/resources.js";import{VSBuffer as m}from"../../../../../base/common/buffer.js";import{RemoteAgentService as tt}from"../../../remote/browser/remoteAgentService.js";import{getSingleFolderWorkspaceIdentifier as et}from"../../../workspaces/browser/workspaces.js";import{IUserDataProfilesService as it,UserDataProfilesService as rt}from"../../../../../platform/userDataProfile/common/userDataProfile.js";import{hash as st}from"../../../../../base/common/hash.js";import{FilePolicyService as at}from"../../../../../platform/policy/common/filePolicyService.js";import{runWithFakedTimers as nt}from"../../../../../base/test/common/timeTravelScheduler.js";import{UserDataProfileService as ot}from"../../../userDataProfile/common/userDataProfileService.js";import"../../../userDataProfile/common/userDataProfile.js";import"../../../environment/browser/environmentService.js";import{ensureNoDisposablesAreLeakedInTestSuite as ct}from"../../../../../base/test/common/utils.js";const k=H.file("tests").with({scheme:"vscode-tests"});class ut{needsCaching(d){return!1}async read(){return""}async write(){}async remove(){}}suite("ConfigurationEditing",()=>{let o,d,g,s,f,a;suiteSetup(()=>{A.as(D.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationEditing.service.testSetting":{type:"string",default:"isSet"},"configurationEditing.service.testSettingTwo":{type:"string",default:"isSet"},"configurationEditing.service.testSettingThree":{type:"string",default:"isSet"},"configurationEditing.service.policySetting":{type:"string",default:"isSet",policy:{name:"configurationEditing.service.policySetting",minimumVersion:"1.0.0"}}}})});const l=ct();setup(async()=>{l.add(Z(()=>O.restore()));const t=new F;s=l.add(new V(t));const e=l.add(new $);l.add(s.registerProvider(k.scheme,e));const r=u(k,C.generateUuid());await s.createFolder(r),o=q(void 0,l),g=h,g.policyFile=u(r,"policies.json"),o.stub(L,g);const v=l.add(new X(s)),w=o.stub(it,l.add(new rt(g,s,v,t)));d=l.add(new ot(w.defaultProfile));const R=l.add(o.createInstance(tt));l.add(s.registerProvider(_.vscodeUserData,l.add(new Q(k.scheme,e,_.vscodeUserData,w,v,t)))),o.stub(B,s),o.stub(j,R),f=l.add(new b({configurationCache:new ut},g,d,w,s,R,v,new F,l.add(new at(g.policyFile,s,t)))),await f.initialize({id:st(r.toString()).toString(16),uri:r}),o.stub(P,f),await f.initialize(et(r)),o.stub(I,f),o.stub(z,l.add(o.createInstance(M))),o.stub(E,l.add(o.createInstance(U))),o.stub(x,l.add(o.createInstance(K))),o.stub(J,Y),a=o.createInstance(W,null)}),test("errors cases - invalid key",async()=>{try{await a.writeConfiguration(n.WORKSPACE,{key:"unknown.key",value:"value"},{donotNotifyError:!0})}catch(t){i.strictEqual(t.code,S.ERROR_UNKNOWN_KEY);return}i.fail("Should fail with ERROR_UNKNOWN_KEY")}),test("errors cases - no workspace",async()=>{await f.initialize({id:C.generateUuid()});try{await a.writeConfiguration(n.WORKSPACE,{key:"configurationEditing.service.testSetting",value:"value"},{donotNotifyError:!0})}catch(t){i.strictEqual(t.code,S.ERROR_NO_WORKSPACE_OPENED);return}i.fail("Should fail with ERROR_NO_WORKSPACE_OPENED")}),test("errors cases - invalid configuration",async()=>{await s.writeFile(d.currentProfile.settingsResource,m.fromString(",,,,,,,,,,,,,,"));try{await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:"value"},{donotNotifyError:!0})}catch(t){i.strictEqual(t.code,S.ERROR_INVALID_CONFIGURATION);return}i.fail("Should fail with ERROR_INVALID_CONFIGURATION")}),test("errors cases - invalid global tasks configuration",async()=>{const t=u(g.userRoamingDataHome,p.tasks);await s.writeFile(t,m.fromString(",,,,,,,,,,,,,,"));try{await a.writeConfiguration(n.USER_LOCAL,{key:"tasks.configurationEditing.service.testSetting",value:"value"},{donotNotifyError:!0})}catch(e){i.strictEqual(e.code,S.ERROR_INVALID_CONFIGURATION);return}i.fail("Should fail with ERROR_INVALID_CONFIGURATION")}),test("errors cases - dirty",async()=>{o.stub(E,"isDirty",!0);try{await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:"value"},{donotNotifyError:!0})}catch(t){i.strictEqual(t.code,S.ERROR_CONFIGURATION_FILE_DIRTY);return}i.fail("Should fail with ERROR_CONFIGURATION_FILE_DIRTY error.")}),test("do not notify error",async()=>{o.stub(E,"isDirty",!0);const t=O.stub();o.stub(G,{prompt:t,_serviceBrand:void 0,filter:!1,onDidAddNotification:void 0,onDidRemoveNotification:void 0,onDidChangeFilter:void 0,notify:null,error:null,info:null,warn:null,status:null,setFilter:null,getFilter:null,getFilters:null,removeFilter:null});try{await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:"value"},{donotNotifyError:!0})}catch(e){i.strictEqual(!1,t.calledOnce),i.strictEqual(e.code,S.ERROR_CONFIGURATION_FILE_DIRTY);return}i.fail("Should fail with ERROR_CONFIGURATION_FILE_DIRTY error.")}),test("errors cases - ERROR_POLICY_CONFIGURATION",async()=>{await nt({useFakeTimers:!0},async()=>{const t=T.toPromise(o.get(I).onDidChangeConfiguration);await s.writeFile(g.policyFile,m.fromString('{ "configurationEditing.service.policySetting": "policyValue" }')),await t});try{await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.policySetting",value:"value"},{donotNotifyError:!0})}catch(t){i.strictEqual(t.code,S.ERROR_POLICY_CONFIGURATION);return}i.fail("Should fail with ERROR_POLICY_CONFIGURATION")}),test("write policy setting - when not set",async()=>{await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.policySetting",value:"value"},{donotNotifyError:!0});const t=await s.readFile(d.currentProfile.settingsResource),e=c.parse(t.value.toString());i.strictEqual(e["configurationEditing.service.policySetting"],"value")}),test("write one setting - empty file",async()=>{await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:"value"});const t=await s.readFile(d.currentProfile.settingsResource),e=c.parse(t.value.toString());i.strictEqual(e["configurationEditing.service.testSetting"],"value")}),test("write one setting - existing file",async()=>{await s.writeFile(d.currentProfile.settingsResource,m.fromString('{ "my.super.setting": "my.super.value" }')),await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:"value"});const t=await s.readFile(d.currentProfile.settingsResource),e=c.parse(t.value.toString());i.strictEqual(e["configurationEditing.service.testSetting"],"value"),i.strictEqual(e["my.super.setting"],"my.super.value")}),test("remove an existing setting - existing file",async()=>{await s.writeFile(d.currentProfile.settingsResource,m.fromString('{ "my.super.setting": "my.super.value", "configurationEditing.service.testSetting": "value" }')),await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:void 0});const t=await s.readFile(d.currentProfile.settingsResource),e=c.parse(t.value.toString());i.deepStrictEqual(Object.keys(e),["my.super.setting"]),i.strictEqual(e["my.super.setting"],"my.super.value")}),test("remove non existing setting - existing file",async()=>{await s.writeFile(d.currentProfile.settingsResource,m.fromString('{ "my.super.setting": "my.super.value" }')),await a.writeConfiguration(n.USER_LOCAL,{key:"configurationEditing.service.testSetting",value:void 0});const t=await s.readFile(d.currentProfile.settingsResource),e=c.parse(t.value.toString());i.deepStrictEqual(Object.keys(e),["my.super.setting"]),i.strictEqual(e["my.super.setting"],"my.super.value")}),test("write overridable settings to user settings",async()=>{const t="[language]",e={"configurationEditing.service.testSetting":"overridden value"};await a.writeConfiguration(n.USER_LOCAL,{key:t,value:e});const r=await s.readFile(d.currentProfile.settingsResource),v=c.parse(r.value.toString());i.deepStrictEqual(v[t],e)}),test("write overridable settings to workspace settings",async()=>{const t="[language]",e={"configurationEditing.service.testSetting":"overridden value"};await a.writeConfiguration(n.WORKSPACE,{key:t,value:e});const r=await s.readFile(u(f.getWorkspace().folders[0].uri,N)),v=c.parse(r.value.toString());i.deepStrictEqual(v[t],e)}),test("write overridable settings to workspace folder settings",async()=>{const t="[language]",e={"configurationEditing.service.testSetting":"overridden value"},r=u(f.getWorkspace().folders[0].uri,N);await a.writeConfiguration(n.WORKSPACE_FOLDER,{key:t,value:e},{scopes:{resource:r}});const v=await s.readFile(r),w=c.parse(v.value.toString());i.deepStrictEqual(w[t],e)}),test("write workspace standalone setting - empty file",async()=>{const t=u(f.getWorkspace().folders[0].uri,y.tasks);await a.writeConfiguration(n.WORKSPACE,{key:"tasks.service.testSetting",value:"value"});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r["service.testSetting"],"value")}),test("write user standalone setting - empty file",async()=>{const t=u(g.userRoamingDataHome,p.tasks);await a.writeConfiguration(n.USER_LOCAL,{key:"tasks.service.testSetting",value:"value"});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r["service.testSetting"],"value")}),test("write workspace standalone setting - existing file",async()=>{const t=u(f.getWorkspace().folders[0].uri,y.tasks);await s.writeFile(t,m.fromString('{ "my.super.setting": "my.super.value" }')),await a.writeConfiguration(n.WORKSPACE,{key:"tasks.service.testSetting",value:"value"});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r["service.testSetting"],"value"),i.strictEqual(r["my.super.setting"],"my.super.value")}),test("write user standalone setting - existing file",async()=>{const t=u(g.userRoamingDataHome,p.tasks);await s.writeFile(t,m.fromString('{ "my.super.setting": "my.super.value" }')),await a.writeConfiguration(n.USER_LOCAL,{key:"tasks.service.testSetting",value:"value"});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r["service.testSetting"],"value"),i.strictEqual(r["my.super.setting"],"my.super.value")}),test("write workspace standalone setting - empty file - full JSON",async()=>{await a.writeConfiguration(n.WORKSPACE,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask"}]}});const t=u(f.getWorkspace().folders[0].uri,y.tasks),e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r.version,"1.0.0"),i.strictEqual(r.tasks[0].taskName,"myTask")}),test("write user standalone setting - empty file - full JSON",async()=>{await a.writeConfiguration(n.USER_LOCAL,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask"}]}});const t=u(g.userRoamingDataHome,p.tasks),e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r.version,"1.0.0"),i.strictEqual(r.tasks[0].taskName,"myTask")}),test("write workspace standalone setting - existing file - full JSON",async()=>{const t=u(f.getWorkspace().folders[0].uri,y.tasks);await s.writeFile(t,m.fromString('{ "my.super.setting": "my.super.value" }')),await a.writeConfiguration(n.WORKSPACE,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask"}]}});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r.version,"1.0.0"),i.strictEqual(r.tasks[0].taskName,"myTask")}),test("write user standalone setting - existing file - full JSON",async()=>{const t=u(g.userRoamingDataHome,p.tasks);await s.writeFile(t,m.fromString('{ "my.super.setting": "my.super.value" }')),await a.writeConfiguration(n.USER_LOCAL,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask"}]}});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r.version,"1.0.0"),i.strictEqual(r.tasks[0].taskName,"myTask")}),test("write workspace standalone setting - existing file with JSON errors - full JSON",async()=>{const t=u(f.getWorkspace().folders[0].uri,y.tasks);await s.writeFile(t,m.fromString('{ "my.super.setting": ')),await a.writeConfiguration(n.WORKSPACE,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask"}]}});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r.version,"1.0.0"),i.strictEqual(r.tasks[0].taskName,"myTask")}),test("write user standalone setting - existing file with JSON errors - full JSON",async()=>{const t=u(g.userRoamingDataHome,p.tasks);await s.writeFile(t,m.fromString('{ "my.super.setting": ')),await a.writeConfiguration(n.USER_LOCAL,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask"}]}});const e=await s.readFile(t),r=c.parse(e.value.toString());i.strictEqual(r.version,"1.0.0"),i.strictEqual(r.tasks[0].taskName,"myTask")}),test("write workspace standalone setting should replace complete file",async()=>{const t=u(f.getWorkspace().folders[0].uri,y.tasks);await s.writeFile(t,m.fromString(`{
			"version": "1.0.0",
			"tasks": [
				{
					"taskName": "myTask1"
				},
				{
					"taskName": "myTask2"
				}
			]
		}`)),await a.writeConfiguration(n.WORKSPACE,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask1"}]}});const e=await s.readFile(t),r=JSON.stringify({version:"1.0.0",tasks:[{taskName:"myTask1"}]},null,"	");i.strictEqual(e.value.toString(),r)}),test("write user standalone setting should replace complete file",async()=>{const t=u(g.userRoamingDataHome,p.tasks);await s.writeFile(t,m.fromString(`{
			"version": "1.0.0",
			"tasks": [
				{
					"taskName": "myTask1"
				},
				{
					"taskName": "myTask2"
				}
			]
		}`)),await a.writeConfiguration(n.USER_LOCAL,{key:"tasks",value:{version:"1.0.0",tasks:[{taskName:"myTask1"}]}});const e=await s.readFile(t),r=JSON.stringify({version:"1.0.0",tasks:[{taskName:"myTask1"}]},null,"	");i.strictEqual(e.value.toString(),r)})});
