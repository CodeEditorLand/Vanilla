import a from"assert";import*as d from"../../../../../base/common/path.js";import{CancellationTokenSource as P}from"../../../../../base/common/cancellation.js";import"../../../../../base/common/glob.js";import{URI as i}from"../../../../../base/common/uri.js";import{deserializeSearchError as u,QueryType as n,SearchErrorCode as l}from"../../common/search.js";import{TextSearchEngineAdapter as I}from"../../node/textSearchAdapter.js";import{flakySuite as S}from"../../../../../base/test/node/testUtils.js";import{FileAccess as R}from"../../../../../base/common/network.js";const p=d.normalize(R.asFileUri("vs/workbench/services/search/test/node/fixtures").fsPath),h=d.join(p,"examples"),m=d.join(p,"more"),E={folder:i.file(p)},o=[E],T=[{folder:i.file(h)},{folder:i.file(m)}];function r(e,t){const s=new I(e);let c=0;const g=[];return s.search(new P().token,f=>{f&&(c+=f.reduce((y,Q)=>y+Q.numMatches,0),g.push(...f))},()=>{}).then(()=>(typeof t=="function"?a(t(c)):a.strictEqual(c,t,`rg ${c} !== ${t}`),g))}S("TextSearch-integration",function(){test("Text: GameOfLife",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"GameOfLife"}};return r(e,4)}),test("Text: GameOfLife (RegExp)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"Game.?fL\\w?fe",isRegExp:!0}};return r(e,4)}),test("Text: GameOfLife (unicode escape sequences)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"G\\u{0061}m\\u0065OfLife",isRegExp:!0}};return r(e,4)}),test("Text: GameOfLife (unicode escape sequences, force PCRE2)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"(?<!a)G\\u{0061}m\\u0065OfLife",isRegExp:!0}};return r(e,4)}),test("Text: GameOfLife (PCRE2 RegExp)",()=>{const e={type:n.Text,folderQueries:o,usePCRE2:!0,contentPattern:{pattern:"Life(?!P)",isRegExp:!0}};return r(e,8)}),test("Text: GameOfLife (RegExp to EOL)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"GameOfLife.*",isRegExp:!0}};return r(e,4)}),test("Text: GameOfLife (Word Match, Case Sensitive)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"GameOfLife",isWordMatch:!0,isCaseSensitive:!0}};return r(e,4)}),test("Text: GameOfLife (Word Match, Spaces)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:" GameOfLife ",isWordMatch:!0}};return r(e,1)}),test("Text: GameOfLife (Word Match, Punctuation and Spaces)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:", as =",isWordMatch:!0}};return r(e,1)}),test("Text: Helvetica (UTF 16)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"Helvetica"}};return r(e,3)}),test("Text: e",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"e"}};return r(e,785)}),test("Text: e (with excludes)",()=>r({folderQueries:o,contentPattern:{pattern:"e"},excludePattern:{"**/examples":!0}},391)),test("Text: e (with includes)",()=>r({folderQueries:o,contentPattern:{pattern:"e"},includePattern:{"**/examples/**":!0}},394)),test("Text: sibling exclude",()=>{const e={folderQueries:o,contentPattern:{pattern:"m"},includePattern:x("**/site*"),excludePattern:{"*.css":{when:"$(basename).less"}}};return r(e,1)}),test("Text: e (with includes and exclude)",()=>r({folderQueries:o,contentPattern:{pattern:"e"},includePattern:{"**/examples/**":!0},excludePattern:{"**/examples/small.js":!0}},371)),test("Text: a (capped)",()=>{const t={type:n.Text,folderQueries:o,contentPattern:{pattern:"a"},maxResults:520};return r(t,520)}),test("Text: a (no results)",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"ahsogehtdas"}};return r(e,0)}),test("Text: -size",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"-size"}};return r(e,9)}),test("Multiroot: Conway",()=>{const e={type:n.Text,folderQueries:T,contentPattern:{pattern:"conway"}};return r(e,8)}),test("Multiroot: e with partial global exclude",()=>{const e={type:n.Text,folderQueries:T,contentPattern:{pattern:"e"},excludePattern:x("**/*.txt")};return r(e,394)}),test("Multiroot: e with global excludes",()=>{const e={type:n.Text,folderQueries:T,contentPattern:{pattern:"e"},excludePattern:x("**/*.txt","**/*.js")};return r(e,0)}),test("Multiroot: e with folder exclude",()=>{const e={type:n.Text,folderQueries:[{folder:i.file(h),excludePattern:[{pattern:x("**/e*.js")}]},{folder:i.file(m)}],contentPattern:{pattern:"e"}};return r(e,298)}),test("Text: \u8BED",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"\u8BED"}};return r(e,1).then(t=>{const s=t[0].results[0].rangeLocations.map(c=>c.source);a.deepStrictEqual(s,[{startLineNumber:0,startColumn:1,endLineNumber:0,endColumn:2}])})}),test("Multiple matches on line: h\\d,",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"h\\d,",isRegExp:!0}};return r(e,15).then(t=>{a.strictEqual(t.length,3),a.strictEqual(t[0].results.length,1);const s=t[0].results[0];a.strictEqual(s.rangeLocations.map(c=>c.source).length,5)})}),test("Search with context matches",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"compiler.typeCheck();"},surroundingContext:1};return r(e,3).then(t=>{a.strictEqual(t.length,3),a.strictEqual(t[0].results[0].lineNumber,24),a.strictEqual(t[0].results[0].text,'        compiler.addUnit(prog,"input.ts");'),a.strictEqual(t[2].results[0].lineNumber,26),a.strictEqual(t[2].results[0].text,"        compiler.emit();")})}),suite("error messages",()=>{test("invalid encoding",()=>{const e={type:n.Text,folderQueries:[{...E,fileEncoding:"invalidEncoding"}],contentPattern:{pattern:"test"}};return r(e,0).then(()=>{throw new Error("expected fail")},t=>{const s=u(t);a.strictEqual(s.message,"Unknown encoding: invalidEncoding"),a.strictEqual(s.code,l.unknownEncoding)})}),test("invalid regex case 1",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:")",isRegExp:!0}};return r(e,0).then(()=>{throw new Error("expected fail")},t=>{const s=u(t);a.strictEqual(s.message,"Regex parse error: unmatched closing parenthesis"),a.strictEqual(s.code,l.regexParseError)})}),test("invalid regex case 2",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"(?<!a.*)",isRegExp:!0}};return r(e,0).then(()=>{throw new Error("expected fail")},t=>{const s=u(t);a.strictEqual(s.message,"Regex parse error: lookbehind assertion is not fixed length"),a.strictEqual(s.code,l.regexParseError)})}),test("invalid glob",()=>{const e={type:n.Text,folderQueries:o,contentPattern:{pattern:"foo"},includePattern:{"{{}":!0}};return r(e,0).then(()=>{throw new Error("expected fail")},t=>{const s=u(t);a.strictEqual(s.message,"Error parsing glob '/{{}': nested alternate groups are not allowed"),a.strictEqual(s.code,l.globParseError)})})})});function x(...e){return e.reduce((t,s)=>(s=s.replace(/\\/g,"/"),t[s]=!0,t),Object.create(null))}
