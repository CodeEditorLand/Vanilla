import r from"assert";import{createCancelablePromise as R}from"../../../../../base/common/async.js";import{Emitter as M}from"../../../../../base/common/event.js";import"../../../../../base/common/lifecycle.js";import{FileAccess as C}from"../../../../../base/common/network.js";import*as l from"../../../../../base/common/path.js";import{URI as w}from"../../../../../base/common/uri.js";import{flakySuite as q}from"../../../../../base/test/node/testUtils.js";import{isSerializedSearchComplete as Q,isSerializedSearchSuccess as x,QueryType as m}from"../../common/search.js";import{SearchService as d}from"../../node/rawSearchService.js";const g=[{folder:w.file(l.normalize("/some/where"))}],P=l.normalize(C.asFileUri("vs/workbench/services/search/test/node/fixtures").fsPath),F=[{folder:w.file(l.join(P,"examples"))},{folder:w.file(l.join(P,"more"))}],z={fileWalkTime:0,cmdTime:1,directoriesWalked:2,filesWalked:3};class S{constructor(o,p){this.result=o;this.config=p;S.last=this}static last;isCanceled=!1;search(o,p,a){const s=this;(function e(){process.nextTick(()=>{if(s.isCanceled){a(null,{limitHit:!1,stats:z,messages:[]});return}const n=s.result();n?(o(n),e()):a(null,{limitHit:!1,stats:z,messages:[]})})})()}cancel(){this.isCanceled=!0}}q("RawSearchService",()=>{const y={type:m.File,folderQueries:g,filePattern:"a"},o={base:l.normalize("/some"),relativePath:"where",searchPath:void 0},p={path:l.normalize("/some/where")};test("Individual results",async function(){let a=5;const s=S.bind(null,()=>a--?o:null),e=new d;let n=0;const c=i=>{i.message||(Array.isArray(i)?r.fail(JSON.stringify(i)):(r.deepStrictEqual(i,p),n++))};return await e.doFileSearchWithEngine(s,y,c,null,0),r.strictEqual(n,5)}),test("Batch results",async function(){let a=25;const s=S.bind(null,()=>a--?o:null),e=new d,n=[],c=i=>{i.message||(Array.isArray(i)?(i.forEach(t=>{r.deepStrictEqual(t,p)}),n.push(i.length)):r.fail(JSON.stringify(i)))};await e.doFileSearchWithEngine(s,y,c,void 0,10),r.deepStrictEqual(n,[10,10,5])}),test("Collect batched results",async function(){const a="/some/where";let s=25;const e=S.bind(null,()=>s--?o:null),n=new d;function c(t,f){let h;const u=new M({onWillAddFirstListener:()=>{h=R(E=>n.doFileSearchWithEngine(e,t,I=>u.fire(I),E,f).then(I=>u.fire(I),I=>u.fire({type:"error",error:I})))},onDidRemoveLastListener:()=>{h.cancel()}});return u.event}const i=await b(c(y,10));i.files.forEach(t=>{r.strictEqual(t.path.replace(/\\/g,"/"),a)}),r.strictEqual(i.files.length,25,"Result")}),test("Multi-root with include pattern and maxResults",async function(){const a=new d,s={type:m.File,folderQueries:F,maxResults:1,includePattern:{"*.txt":!0,"*.js":!0}},e=await b(a.fileSearch(s));r.strictEqual(e.files.length,1,"Result")}),test("Handles maxResults=0 correctly",async function(){const a=new d,s={type:m.File,folderQueries:F,maxResults:0,sortByScore:!0,includePattern:{"*.txt":!0,"*.js":!0}},e=await b(a.fileSearch(s));r.strictEqual(e.files.length,0,"Result")}),test("Multi-root with include pattern and exists",async function(){const a=new d,s={type:m.File,folderQueries:F,exists:!0,includePattern:{"*.txt":!0,"*.js":!0}},e=await b(a.fileSearch(s));r.strictEqual(e.files.length,0,"Result"),r.ok(e.limitHit)}),test("Sorted results",async function(){const s=["bab","bbc","abb"].map(t=>({base:l.normalize("/some/where"),relativePath:t,basename:t,size:3,searchPath:void 0})),e=S.bind(null,()=>s.shift()),n=new d,c=[],i=t=>{t.message||(Array.isArray(t)?c.push(...t.map(f=>f.path)):r.fail(JSON.stringify(t)))};await n.doFileSearchWithEngine(e,{type:m.File,folderQueries:g,filePattern:"bb",sortByScore:!0,maxResults:2},i,void 0,1),r.notStrictEqual(typeof S.last.config.maxResults,"number"),r.deepStrictEqual(c,[l.normalize("/some/where/bbc"),l.normalize("/some/where/bab")])}),test("Sorted result batches",async function(){let a=25;const s=S.bind(null,()=>a--?o:null),e=new d,n=[],c=i=>{i.message||(Array.isArray(i)?(i.forEach(t=>{r.deepStrictEqual(t,p)}),n.push(i.length)):r.fail(JSON.stringify(i)))};await e.doFileSearchWithEngine(s,{type:m.File,folderQueries:g,filePattern:"a",sortByScore:!0,maxResults:23},c,void 0,10),r.deepStrictEqual(n,[10,10,3])}),test("Cached results",function(){const s=["bcb","bbc","aab"].map(t=>({base:l.normalize("/some/where"),relativePath:t,basename:t,size:3,searchPath:void 0})),e=S.bind(null,()=>s.shift()),n=new d,c=[],i=t=>{t.message||(Array.isArray(t)?c.push(...t.map(f=>f.path)):r.fail(JSON.stringify(t)))};return n.doFileSearchWithEngine(e,{type:m.File,folderQueries:g,filePattern:"b",sortByScore:!0,cacheKey:"x"},i,void 0,-1).then(t=>{r.strictEqual(t.stats.fromCache,!1),r.deepStrictEqual(c,[l.normalize("/some/where/bcb"),l.normalize("/some/where/bbc"),l.normalize("/some/where/aab")])}).then(async()=>{const t=[],f=h=>{Array.isArray(h)?t.push(...h.map(u=>u.path)):r.fail(JSON.stringify(h))};try{const h=await n.doFileSearchWithEngine(e,{type:m.File,folderQueries:g,filePattern:"bc",sortByScore:!0,cacheKey:"x"},f,void 0,-1);r.ok(h.stats.fromCache),r.deepStrictEqual(t,[l.normalize("/some/where/bcb"),l.normalize("/some/where/bbc")])}catch{}}).then(()=>n.clearCache("x")).then(async()=>{s.push({base:l.normalize("/some/where"),relativePath:"bc",searchPath:void 0});const t=[],f=u=>{u.message||(Array.isArray(u)?t.push(...u.map(E=>E.path)):r.fail(JSON.stringify(u)))},h=await n.doFileSearchWithEngine(e,{type:m.File,folderQueries:g,filePattern:"bc",sortByScore:!0,cacheKey:"x"},f,void 0,-1);r.strictEqual(h.stats.fromCache,!1),r.deepStrictEqual(t,[l.normalize("/some/where/bc")])})})});function b(y){const o=[];let p;return new Promise((a,s)=>{p=y(e=>{Q(e)?(x(e)?a({files:o,limitHit:e.limitHit}):s(e.error),p.dispose()):Array.isArray(e)?o.push(...e):e.path&&o.push(e)})})}
