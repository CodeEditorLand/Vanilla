import i from"assert";import{workbenchInstantiationService as c,TestServiceAccessor as u}from"../../../../test/browser/workbenchTestServices.js";import{ensureNoDisposablesAreLeakedInTestSuite as d,toResource as a}from"../../../../../base/test/common/utils.js";import"../../../../../platform/instantiation/common/instantiation.js";import{TextFileEditorModel as l}from"../../common/textFileEditorModel.js";import{FileOperation as g}from"../../../../../platform/files/common/files.js";import{DisposableStore as S}from"../../../../../base/common/lifecycle.js";suite("Files - TextFileService",()=>{const r=new S;let o,t;setup(()=>{o=c(void 0,r),t=o.createInstance(u),r.add(t.textFileService.files)}),teardown(()=>{r.clear()}),test("isDirty/getDirty - files and untitled",async function(){const e=r.add(o.createInstance(l,a.call(this,"/path/file.txt"),"utf8",void 0));t.textFileService.files.add(e.resource,e),await e.resolve(),i.ok(!t.textFileService.isDirty(e.resource)),e.textEditorModel.setValue("foo"),i.ok(t.textFileService.isDirty(e.resource));const s=r.add(await t.textFileService.untitled.resolve());i.ok(!t.textFileService.isDirty(s.resource)),s.textEditorModel?.setValue("changed"),i.ok(t.textFileService.isDirty(s.resource))}),test("save - file",async function(){const e=r.add(o.createInstance(l,a.call(this,"/path/file.txt"),"utf8",void 0));t.textFileService.files.add(e.resource,e),await e.resolve(),e.textEditorModel.setValue("foo"),i.ok(t.textFileService.isDirty(e.resource));const s=await t.textFileService.save(e.resource);i.strictEqual(s?.toString(),e.resource.toString()),i.ok(!t.textFileService.isDirty(e.resource))}),test("saveAll - file",async function(){const e=r.add(o.createInstance(l,a.call(this,"/path/file.txt"),"utf8",void 0));t.textFileService.files.add(e.resource,e),await e.resolve(),e.textEditorModel.setValue("foo"),i.ok(t.textFileService.isDirty(e.resource));const s=await t.textFileService.save(e.resource);i.strictEqual(s?.toString(),e.resource.toString()),i.ok(!t.textFileService.isDirty(e.resource))}),test("saveAs - file",async function(){const e=r.add(o.createInstance(l,a.call(this,"/path/file.txt"),"utf8",void 0));t.textFileService.files.add(e.resource,e),t.fileDialogService.setPickFileToSave(e.resource),await e.resolve(),e.textEditorModel.setValue("foo"),i.ok(t.textFileService.isDirty(e.resource));const s=await t.textFileService.saveAs(e.resource);i.strictEqual(s.toString(),e.resource.toString()),i.ok(!t.textFileService.isDirty(e.resource))}),test("revert - file",async function(){const e=r.add(o.createInstance(l,a.call(this,"/path/file.txt"),"utf8",void 0));t.textFileService.files.add(e.resource,e),t.fileDialogService.setPickFileToSave(e.resource),await e.resolve(),e.textEditorModel.setValue("foo"),i.ok(t.textFileService.isDirty(e.resource)),await t.textFileService.revert(e.resource),i.ok(!t.textFileService.isDirty(e.resource))}),test("create does not overwrite existing model",async function(){const e=r.add(o.createInstance(l,a.call(this,"/path/file.txt"),"utf8",void 0));t.textFileService.files.add(e.resource,e),await e.resolve(),e.textEditorModel.setValue("foo"),i.ok(t.textFileService.isDirty(e.resource));let s=0;r.add(t.workingCopyFileService.addFileOperationParticipant({participate:async n=>{i.strictEqual(n[0].target.toString(),e.resource.toString()),s++}})),r.add(t.workingCopyFileService.onDidRunWorkingCopyFileOperation(n=>{i.strictEqual(n.operation,g.CREATE),i.strictEqual(n.files[0].target.toString(),e.resource.toString()),s++})),await t.textFileService.create([{resource:e.resource,value:"Foo"}]),i.ok(!t.textFileService.isDirty(e.resource)),i.strictEqual(s,2)}),test("Filename Suggestion - Suggest prefix only when there are no relevant extensions",()=>{r.add(t.languageService.registerLanguage({id:"plumbus0",extensions:[".one",".two"]}));const e=t.textFileService.suggestFilename("shleem","Untitled-1");i.strictEqual(e,"Untitled-1")}),test("Filename Suggestion - Suggest prefix with first extension",()=>{r.add(t.languageService.registerLanguage({id:"plumbus1",extensions:[".shleem",".gazorpazorp"],filenames:["plumbus"]}));const e=t.textFileService.suggestFilename("plumbus1","Untitled-1");i.strictEqual(e,"Untitled-1.shleem")}),test("Filename Suggestion - Preserve extension if it matchers",()=>{r.add(t.languageService.registerLanguage({id:"plumbus2",extensions:[".shleem",".gazorpazorp"]}));const e=t.textFileService.suggestFilename("plumbus2","Untitled-1.gazorpazorp");i.strictEqual(e,"Untitled-1.gazorpazorp")}),test("Filename Suggestion - Rewrite extension according to language",()=>{r.add(t.languageService.registerLanguage({id:"plumbus2",extensions:[".shleem",".gazorpazorp"]}));const e=t.textFileService.suggestFilename("plumbus2","Untitled-1.foobar");i.strictEqual(e,"Untitled-1.shleem")}),test("Filename Suggestion - Suggest filename if there are no extensions",()=>{r.add(t.languageService.registerLanguage({id:"plumbus2",filenames:["plumbus","shleem","gazorpazorp"]}));const e=t.textFileService.suggestFilename("plumbus2","Untitled-1");i.strictEqual(e,"plumbus")}),test("Filename Suggestion - Preserve filename if it matches",()=>{r.add(t.languageService.registerLanguage({id:"plumbus2",filenames:["plumbus","shleem","gazorpazorp"]}));const e=t.textFileService.suggestFilename("plumbus2","gazorpazorp");i.strictEqual(e,"gazorpazorp")}),test("Filename Suggestion - Rewrites filename according to language",()=>{r.add(t.languageService.registerLanguage({id:"plumbus2",filenames:["plumbus","shleem","gazorpazorp"]}));const e=t.textFileService.suggestFilename("plumbus2","foobar");i.strictEqual(e,"plumbus")}),d()});
