import s from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../base/test/common/utils.js";import{AtomicTabMoveOperations as l,Direction as p}from"../../../common/cursor/cursorAtomicMoveOperations.js";suite("Cursor move command test",()=>{d(),test("Test whitespaceVisibleColumn",()=>{const i=[{lineContent:"        ",tabSize:4,expectedPrevTabStopPosition:[-1,0,0,0,0,4,4,4,4,-1],expectedPrevTabStopVisibleColumn:[-1,0,0,0,0,4,4,4,4,-1],expectedVisibleColumn:[0,1,2,3,4,5,6,7,8,-1]},{lineContent:"  ",tabSize:4,expectedPrevTabStopPosition:[-1,0,0,-1],expectedPrevTabStopVisibleColumn:[-1,0,0,-1],expectedVisibleColumn:[0,1,2,-1]},{lineContent:"	",tabSize:4,expectedPrevTabStopPosition:[-1,0,-1],expectedPrevTabStopVisibleColumn:[-1,0,-1],expectedVisibleColumn:[0,4,-1]},{lineContent:"	 ",tabSize:4,expectedPrevTabStopPosition:[-1,0,1,-1],expectedPrevTabStopVisibleColumn:[-1,0,4,-1],expectedVisibleColumn:[0,4,5,-1]},{lineContent:" 		 ",tabSize:4,expectedPrevTabStopPosition:[-1,0,0,2,3,-1],expectedPrevTabStopVisibleColumn:[-1,0,0,4,8,-1],expectedVisibleColumn:[0,1,4,8,9,-1]},{lineContent:" 	A",tabSize:4,expectedPrevTabStopPosition:[-1,0,0,-1,-1],expectedPrevTabStopVisibleColumn:[-1,0,0,-1,-1],expectedVisibleColumn:[0,1,4,-1,-1]},{lineContent:"A",tabSize:4,expectedPrevTabStopPosition:[-1,-1,-1],expectedPrevTabStopVisibleColumn:[-1,-1,-1],expectedVisibleColumn:[0,-1,-1]},{lineContent:"",tabSize:4,expectedPrevTabStopPosition:[-1,-1],expectedPrevTabStopVisibleColumn:[-1,-1],expectedVisibleColumn:[0,-1]}];for(const e of i){const o=e.expectedVisibleColumn.length;for(let t=0;t<o;t++){const n=l.whitespaceVisibleColumn(e.lineContent,t,e.tabSize),c=[e.expectedPrevTabStopPosition[t],e.expectedPrevTabStopVisibleColumn[t],e.expectedVisibleColumn[t]];s.deepStrictEqual(n,c)}}}),test("Test atomicPosition",()=>{const i=[{lineContent:"        ",tabSize:4,expectedLeft:[-1,0,0,0,0,4,4,4,4,-1],expectedRight:[4,4,4,4,8,8,8,8,-1,-1],expectedNearest:[0,0,0,4,4,4,4,8,8,-1]},{lineContent:" 	",tabSize:4,expectedLeft:[-1,0,0,-1],expectedRight:[2,2,-1,-1],expectedNearest:[0,0,2,-1]},{lineContent:"	 ",tabSize:4,expectedLeft:[-1,0,-1,-1],expectedRight:[1,-1,-1,-1],expectedNearest:[0,1,-1,-1]},{lineContent:" 	 ",tabSize:4,expectedLeft:[-1,0,0,-1,-1],expectedRight:[2,2,-1,-1,-1],expectedNearest:[0,0,2,-1,-1]},{lineContent:"        A",tabSize:4,expectedLeft:[-1,0,0,0,0,4,4,4,4,-1,-1],expectedRight:[4,4,4,4,8,8,8,8,-1,-1,-1],expectedNearest:[0,0,0,4,4,4,4,8,8,-1,-1]},{lineContent:"      foo",tabSize:4,expectedLeft:[-1,0,0,0,0,-1,-1,-1,-1,-1,-1],expectedRight:[4,4,4,4,-1,-1,-1,-1,-1,-1,-1],expectedNearest:[0,0,0,4,4,-1,-1,-1,-1,-1,-1]}];for(const e of i)for(const{direction:o,expected:t}of[{direction:p.Left,expected:e.expectedLeft},{direction:p.Right,expected:e.expectedRight},{direction:p.Nearest,expected:e.expectedNearest}]){const n=t.map((c,a)=>l.atomicPosition(e.lineContent,a,e.tabSize,o));s.deepStrictEqual(n,t)}})});
