import r from"assert";import{DisposableStore as T}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as m}from"../../../../../base/test/common/utils.js";import{ILanguageConfigurationService as b}from"../../../../common/languages/languageConfigurationRegistry.js";import{createTextModel as l}from"../../../../test/common/testTextModel.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{Range as I}from"../../../../common/core/range.js";import{Selection as d}from"../../../../common/core/selection.js";import{MetadataConsts as V,StandardTokenType as i}from"../../../../common/encodedTokenAttributes.js";import{EncodedTokenizationResult as D,TokenizationRegistry as A}from"../../../../common/languages.js";import{ILanguageService as k}from"../../../../common/languages/language.js";import{NullState as B}from"../../../../common/languages/nullTokenize.js";import{AutoIndentOnPaste as f,IndentationToSpacesCommand as H,IndentationToTabsCommand as z}from"../../browser/indentation.js";import{withTestCodeEditor as u}from"../../../../test/browser/testCodeEditor.js";import{testCommand as R}from"../../../../test/browser/testCommand.js";import{goIndentationRules as _,htmlIndentationRules as J,javascriptIndentationRules as G,latexIndentationRules as N,luaIndentationRules as K,phpIndentationRules as W,rubyIndentationRules as F}from"../../../../test/common/modes/supports/indentationRules.js";import{cppOnEnterRules as U,htmlOnEnterRules as Y,javascriptOnEnterRules as Q,phpOnEnterRules as X}from"../../../../test/common/modes/supports/onEnterRules.js";import{TypeOperations as L}from"../../../../common/cursor/cursorTypeOperations.js";import{cppBracketRules as Z,goBracketRules as $,htmlBracketRules as M,latexBracketRules as ee,luaBracketRules as te,phpBracketRules as ne,rubyBracketRules as oe,typescriptBracketRules as ae,vbBracketRules as se}from"../../../../test/common/modes/supports/bracketRules.js";import{javascriptAutoClosingPairsRules as ie,latexAutoClosingPairsRules as re}from"../../../../test/common/modes/supports/autoClosingPairsRules.js";import{LanguageService as h}from"../../../../common/services/languageService.js";import{ServiceCollection as w}from"../../../../../platform/instantiation/common/serviceCollection.js";import{TestLanguageConfigurationService as S}from"../../../../test/common/modes/testLanguageConfigurationService.js";var de=(g=>(g.TypeScript="ts-test",g.Ruby="ruby-test",g.PHP="php-test",g.Go="go-test",g.CPP="cpp-test",g.HTML="html-test",g.VB="vb-test",g.Latex="latex-test",g.Lua="lua-test",g))(de||{});function O(a,n,s,e,t){R(a,null,n,(o,p)=>new H(p,s),e,t)}function q(a,n,s,e,t){R(a,null,n,(o,p)=>new z(p,s),e,t)}function C(a,n){return a.registerLanguage({id:n})}function x(a,n){switch(n){case"ts-test":return a.register(n,{brackets:ae,comments:{lineComment:"//",blockComment:["/*","*/"]},autoClosingPairs:ie,indentationRules:G,onEnterRules:Q});case"ruby-test":return a.register(n,{brackets:oe,indentationRules:F});case"php-test":return a.register(n,{brackets:ne,indentationRules:W,onEnterRules:X});case"go-test":return a.register(n,{brackets:$,indentationRules:_});case"cpp-test":return a.register(n,{brackets:Z,onEnterRules:U});case"html-test":return a.register(n,{brackets:M,indentationRules:J,onEnterRules:Y});case"vb-test":return a.register(n,{brackets:se});case"latex-test":return a.register(n,{brackets:ee,autoClosingPairs:re,indentationRules:N});case"lua-test":return a.register(n,{brackets:te,indentationRules:K})}}function E(a,n,s){let e=0;const t=a.get(k),o={getInitialState:()=>B,tokenize:void 0,tokenizeEncoded:(p,c,y)=>{const g=n[e++],P=t.languageIdCodec.encodeLanguageId(s),v=new Uint32Array(2*g.length);for(let j=0;j<g.length;j++)v[2*j]=g[j].startIndex,v[2*j+1]=P<<V.LANGUAGEID_OFFSET|g[j].standardTokenType<<V.TOKEN_TYPE_OFFSET;return new D(v,y)}};return A.register(s,o)}suite("Change Indentation to Spaces - TypeScript/Javascript",()=>{m(),test("single tabs only at start of line",function(){O(["first","second line","third line","	fourth line","	fifth"],new d(2,3,2,3),4,["first","second line","third line","    fourth line","    fifth"],new d(2,3,2,3))}),test("multiple tabs at start of line",function(){O(["		first","	second line","			 third line","fourth line","fifth"],new d(1,5,1,5),3,["      first","   second line","          third line","fourth line","fifth"],new d(1,9,1,9))}),test("multiple tabs",function(){O(["		first	","	second  	 line 	","			 third line"," 	fourth line","fifth"],new d(1,5,1,5),2,["    first	","  second  	 line 	","       third line","   fourth line","fifth"],new d(1,7,1,7))}),test("empty lines",function(){O(["			","	","		"],new d(1,4,1,4),2,["      ","  ","    "],new d(1,4,1,4))})}),suite("Change Indentation to Tabs -  TypeScript/Javascript",()=>{m(),test("spaces only at start of line",function(){q(["    first","second line","    third line","fourth line","fifth"],new d(2,3,2,3),4,["	first","second line","	third line","fourth line","fifth"],new d(2,3,2,3))}),test("multiple spaces at start of line",function(){q(["first","   second line","          third line","fourth line","     fifth"],new d(1,5,1,5),3,["first","	second line","			 third line","fourth line","	  fifth"],new d(1,5,1,5))}),test("multiple spaces",function(){q(["      first   ","  second     line 	","       third line","   fourth line","fifth"],new d(1,8,1,8),2,["			first   ","	second     line 	","			 third line","	 fourth line","fifth"],new d(1,5,1,5))}),test("issue #45996",function(){O(["	abc"],new d(1,3,1,3),4,["    abc"],new d(1,6,1,6))})}),suite("Indent With Tab - TypeScript/JavaScript",()=>{const a="ts-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #63388: perserve correct indentation on tab 1",()=>{const e=l(["/*"," * Comment"," * /"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(1,1,3,5)),t.executeCommands("editor.action.indentLines",L.indent(o.cursorConfig,t.getModel(),t.getSelections())),r.strictEqual(e.getValue(),["    /*","     * Comment","     * /"].join(`
`))})}),test.skip("issue #63388: perserve correct indentation on tab 2",()=>{const e=l(["switch (something) {","  case 1:","    whatever();","    break;","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(1,1,5,2)),t.executeCommands("editor.action.indentLines",L.indent(o.cursorConfig,t.getModel(),t.getSelections())),r.strictEqual(e.getValue(),["    switch (something) {","        case 1:","            whatever();","            break;","    }"].join(`
`))})})}),suite("Auto Indent On Paste - TypeScript/JavaScript",()=>{const a="ts-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("issue #119225: Do not add extra leading space when pasting JSDoc",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=["/**"," * JSDoc"," */","function a() {}"].join(`
`),y=[[{startIndex:0,standardTokenType:i.Comment},{startIndex:3,standardTokenType:i.Comment}],[{startIndex:0,standardTokenType:i.Comment},{startIndex:2,standardTokenType:i.Comment},{startIndex:8,standardTokenType:i.Comment}],[{startIndex:0,standardTokenType:i.Comment},{startIndex:1,standardTokenType:i.Comment},{startIndex:3,standardTokenType:i.Other}],[{startIndex:0,standardTokenType:i.Other},{startIndex:8,standardTokenType:i.Other},{startIndex:9,standardTokenType:i.Other},{startIndex:10,standardTokenType:i.Other},{startIndex:11,standardTokenType:i.Other},{startIndex:12,standardTokenType:i.Other},{startIndex:13,standardTokenType:i.Other},{startIndex:14,standardTokenType:i.Other},{startIndex:15,standardTokenType:i.Other}]];n.add(E(p,y,a));const g=t.registerAndInstantiateContribution(f.ID,f);o.paste(c,!0,void 0,"keyboard"),g.trigger(new I(1,1,4,16)),r.strictEqual(e.getValue(),c)})}),test("issue #167299: Blank line removes indent",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=["","export type IncludeReference =","	| BaseReference","	| SelfReference","	| RelativeReference;","","export const enum IncludeReferenceKind {","	Base,","	Self,","	RelativeReference,","}"].join(`
`),y=t.registerAndInstantiateContribution(f.ID,f);o.paste(c,!0,void 0,"keyboard"),y.trigger(new I(1,1,11,2)),r.strictEqual(e.getValue(),c)})}),test("issue #29803: do not indent when pasting text with only one line",()=>{const e=l(["const linkHandler = new Class(a, b, c,","    d)"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(2,6,2,6)),o.paste(", null",!0,void 0,"keyboard"),t.registerAndInstantiateContribution(f.ID,f).trigger(new I(2,6,2,11)),r.strictEqual(e.getValue(),["const linkHandler = new Class(a, b, c,","    d, null)"].join(`
`))})}),test("issue #29753: incorrect indentation after comment",()=>{const e=l(["class A {","    /**","     * used only for debug purposes.","     */","    private _codeInfo: KeyMapping[];","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(5,24,5,34)),o.paste("IMacLinuxKeyMapping",!0,void 0,"keyboard"),t.registerAndInstantiateContribution(f.ID,f).trigger(new I(5,24,5,43)),r.strictEqual(e.getValue(),["class A {","    /**","     * used only for debug purposes.","     */","    private _codeInfo: IMacLinuxKeyMapping[];","}"].join(`
`))})}),test("issue #29753: incorrect indentation of header comment",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=["/*----------------"," *  Copyright (c) "," *  Licensed under ..."," *-----------------*/"].join(`
`);o.paste(c,!0,void 0,"keyboard"),t.registerAndInstantiateContribution(f.ID,f).trigger(new I(1,1,4,22)),r.strictEqual(e.getValue(),c)})}),test("issue #209859: do not do change indentation when pasted inside of a string",()=>{const e=['const foo = "some text',"         which is strangely",'    indented"'].join(`
`),t=l(e,a,{});n.add(t),u(t,{autoIndent:"full",serviceCollection:s},(o,p,c)=>{const y=[[{startIndex:0,standardTokenType:i.Other},{startIndex:12,standardTokenType:i.String}],[{startIndex:0,standardTokenType:i.String}],[{startIndex:0,standardTokenType:i.String}]];n.add(E(c,y,a)),o.setSelection(new d(2,10,2,15)),p.paste("which",!0,void 0,"keyboard"),o.registerAndInstantiateContribution(f.ID,f).trigger(new I(2,1,2,28)),r.strictEqual(t.getValue(),e)})}),test.skip("issue #181065: Incorrect paste of object within comment",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=["/**"," * @typedef {"," * }"," */"].join(`
`),y=[[{startIndex:0,standardTokenType:i.Comment},{startIndex:3,standardTokenType:i.Comment}],[{startIndex:0,standardTokenType:i.Comment},{startIndex:2,standardTokenType:i.Comment},{startIndex:3,standardTokenType:i.Comment},{startIndex:11,standardTokenType:i.Comment},{startIndex:12,standardTokenType:i.Other},{startIndex:13,standardTokenType:i.Other}],[{startIndex:0,standardTokenType:i.Comment},{startIndex:2,standardTokenType:i.Other},{startIndex:3,standardTokenType:i.Other},{startIndex:4,standardTokenType:i.Other}],[{startIndex:0,standardTokenType:i.Comment},{startIndex:1,standardTokenType:i.Comment},{startIndex:3,standardTokenType:i.Other}]];n.add(E(p,y,a));const g=t.registerAndInstantiateContribution(f.ID,f);o.paste(c,!0,void 0,"keyboard"),g.trigger(new I(1,1,4,4)),r.strictEqual(e.getValue(),c)})}),test.skip("issue #86301: preserve cursor at inserted indentation level",()=>{const e=l(["() => {","","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(2,1,2,1));const c=["() => {","","}",""].join(`
`),y=t.registerAndInstantiateContribution(f.ID,f);o.paste(c,!0,void 0,"keyboard"),y.trigger(new I(2,1,5,1)),r.strictEqual(e.getValue(),["() => {","    () => {","    ","    }","    ","}"].join(`
`));const g=o.getSelection();r.deepStrictEqual(g,new d(5,5,5,5))})}),test.skip("issue #85781: indent line with extra white space",()=>{const e=l(["() => {",'    console.log("a");',"}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(2,5,2,5));const c=["() => {",'    console.log("b")',"}"," "].join(`
`),y=t.registerAndInstantiateContribution(f.ID,f);o.paste(c,!0,void 0,"keyboard"),y.trigger(new I(2,5,5,6)),r.strictEqual(e.getValue(),["() => {","    () => {",'        console.log("b")',"    }",'    console.log("a");',"}"].join(`
`))})}),test.skip("issue #29589: incorrect indentation of closing brace on paste",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(2,5,2,5));const c=["function makeSub(a,b) {","subsent = sent.substring(a,b);","return subsent;","}"].join(`
`),y=t.registerAndInstantiateContribution(f.ID,f);o.paste(c,!0,void 0,"keyboard"),y.trigger(new I(1,1,4,2)),r.strictEqual(e.getValue(),["function makeSub(a,b) {","subsent = sent.substring(a,b);","return subsent;","}"].join(`
`))})}),test.skip("issue #201420: incorrect indentation when first line is comment",()=>{const e=l(["function bar() {","","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=[[{startIndex:0,standardTokenType:i.Other},{startIndex:8,standardTokenType:i.Other},{startIndex:9,standardTokenType:i.Other},{startIndex:12,standardTokenType:i.Other},{startIndex:13,standardTokenType:i.Other},{startIndex:14,standardTokenType:i.Other},{startIndex:15,standardTokenType:i.Other},{startIndex:16,standardTokenType:i.Other}],[{startIndex:0,standardTokenType:i.Comment},{startIndex:2,standardTokenType:i.Comment},{startIndex:3,standardTokenType:i.Comment},{startIndex:10,standardTokenType:i.Comment}],[{startIndex:0,standardTokenType:i.Other},{startIndex:5,standardTokenType:i.Other},{startIndex:6,standardTokenType:i.Other},{startIndex:9,standardTokenType:i.Other},{startIndex:10,standardTokenType:i.Other},{startIndex:11,standardTokenType:i.Other},{startIndex:12,standardTokenType:i.Other},{startIndex:14,standardTokenType:i.Other}],[{startIndex:0,standardTokenType:i.Other},{startIndex:1,standardTokenType:i.Other}]];n.add(E(p,c,a)),t.setSelection(new d(2,1,2,1));const y=["// comment","const foo = 42"].join(`
`),g=t.registerAndInstantiateContribution(f.ID,f);o.paste(y,!0,void 0,"keyboard"),g.trigger(new I(2,1,3,15)),r.strictEqual(e.getValue(),["function bar() {","    // comment","    const foo = 42","}"].join(`
`))})})}),suite("Auto Indent On Type - TypeScript/JavaScript",()=>{const a="ts-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("issue #208215: indent after arrow function",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{o.type("const add1 = (n) =>"),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const add1 = (n) =>","    "].join(`
`))})}),test("issue #208215: indent after arrow function 2",()=>{const e=l(["const array = [1, 2, 3, 4, 5];","array.map(","    v =>"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(3,9,3,9)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const array = [1, 2, 3, 4, 5];","array.map(","    v =>","        "].join(`
`))})}),test("issue #116843: indent after arrow function",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{o.type(["const add1 = (n) =>","    n + 1;"].join(`
`)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const add1 = (n) =>","    n + 1;",""].join(`
`))})}),test("issue #29755: do not add indentation on enter if indentation is already valid",()=>{const e=l(["function f() {","    const one = 1;","    const two = 2;","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(3,1,3,1)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["function f() {","    const one = 1;","","    const two = 2;","}"].join(`
`))})}),test("issue #36090",()=>{const e=l(["class ItemCtrl {","    getPropertiesByItemId(id) {","        return this.fetchItem(id)","            .then(item => {","                return this.getPropertiesOfItem(item);","            });","    }","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"advanced",serviceCollection:s},(t,o)=>{t.setSelection(new d(7,6,7,6)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["class ItemCtrl {","    getPropertiesByItemId(id) {","        return this.fetchItem(id)","            .then(item => {","                return this.getPropertiesOfItem(item);","            });","    }","    ","}"].join(`
`)),r.deepStrictEqual(t.getSelection(),new d(8,5,8,5))})}),test("issue #115304: indent block comment onEnter",()=>{const e=l(["/** */","function f() {}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"advanced",serviceCollection:s},(t,o)=>{t.setSelection(new d(1,4,1,4)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["/**"," * "," */","function f() {}"].join(`
`)),r.deepStrictEqual(t.getSelection(),new d(2,4,2,4))})}),test("issue #43244: indent when lambda arrow function is detected, outdent when end is reached",()=>{const e=l(["const array = [1, 2, 3, 4, 5];","array.map(_)"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,12,2,12)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const array = [1, 2, 3, 4, 5];","array.map(_","    ",")"].join(`
`))})}),test("issue #43244: incorrect indentation after if/for/while without braces",()=>{const e=l(["function f() {","    if (condition)","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,19,2,19)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["function f() {","    if (condition)","        ","}"].join(`
`)),o.type("return;"),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["function f() {","    if (condition)","        return;","    ","}"].join(`
`))})}),test("issue #208232: incorrect indentation inside of comments",()=>{const e=l(["/**","indentation done for {","*/"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=[[{startIndex:0,standardTokenType:i.Comment}],[{startIndex:0,standardTokenType:i.Comment}],[{startIndex:0,standardTokenType:i.Comment}]];n.add(E(p,c,a)),t.setSelection(new d(2,23,2,23)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["/**","indentation done for {","","*/"].join(`
`))})}),test("issue #209802: allman style braces in JavaScript",()=>{const e=l(["if (/*condition*/)"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(1,19,1,19)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["if (/*condition*/)","    "].join(`
`)),o.type("{","keyboard"),r.strictEqual(e.getValue(),["if (/*condition*/)","{}"].join(`
`)),t.setSelection(new d(2,2,2,2)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["if (/*condition*/)","{","    ","}"].join(`
`))})}),test.skip("issue #43244: indent after equal sign is detected",()=>{const e=l(["const array ="].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(1,14,1,14)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const array =","    "].join(`
`))})}),test.skip("issue #43244: indent after dot detected after object/array signifying a method call",()=>{const e=l(["const array = [1, 2, 3];","array."].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,7,2,7)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const array = [1, 2, 3];","array.","    "].join(`
`))})}),test.skip("issue #43244: indent after dot detected on a subsequent line after object/array signifying a method call",()=>{const e=l(["const array = [1, 2, 3]"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,7,2,7)),o.type(`
`,"keyboard"),o.type("."),r.strictEqual(e.getValue(),["const array = [1, 2, 3]","    ."].join(`
`))})}),test.skip("issue #43244: keep indentation when methods called on object/array",()=>{const e=l(["const array = [1, 2, 3]","    .filter(() => true)"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,24,2,24)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const array = [1, 2, 3]","    .filter(() => true)","    "].join(`
`))})}),test.skip("issue #43244: keep indentation when chained methods called on object/array",()=>{const e=l(["const array = [1, 2, 3]","    .filter(() => true)","    "].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(3,5,3,5)),o.type("."),r.strictEqual(e.getValue(),["const array = [1, 2, 3]","    .filter(() => true)","    ."].join(`
`))})}),test.skip("issue #43244: outdent when a semi-color is detected indicating the end of the assignment",()=>{const e=l(["const array = [1, 2, 3]","    .filter(() => true);"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,25,2,25)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["const array = [1, 2, 3]","    .filter(() => true);",""].join(`
`))})}),test.skip("issue #40115: keep indentation when added",()=>{const e=l("function foo() {}",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(1,17,1,17)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["function foo() {","    ","}"].join(`
`)),t.setSelection(new d(2,5,2,5)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["function foo() {","    ","    ","}"].join(`
`))})}),test.skip("issue #193875: incorrect indentation on enter",()=>{const e=l(["{","    for(;;)","    for(;;) {}","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(3,14,3,14)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["{","    for(;;)","    for(;;) {","        ","    }","}"].join(`
`))})}),test.skip("issue #67678: indent on typing curly brace",()=>{const e=l(["if (true) {",'console.log("a")','console.log("b")',""].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(4,1,4,1)),o.type("}","keyboard"),r.strictEqual(e.getValue(),["if (true) {",'    console.log("a")','    console.log("b")',"}"].join(`
`))})}),test.skip("issue #46401: outdent when encountering bracket on line - allman style indentation",()=>{const e=l(["if (true)","    "].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,5,2,5)),o.type("{}","keyboard"),r.strictEqual(e.getValue(),["if (true)","{}"].join(`
`)),t.setSelection(new d(2,2,2,2)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["if (true)","{","    ","}"].join(`
`))})}),test.skip("issue #125261: typing closing brace does not keep the current indentation",()=>{const e=l(["foo {","    "].join(`
`),a,{});n.add(e),u(e,{autoIndent:"keep",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,5,2,5)),o.type("}","keyboard"),r.strictEqual(e.getValue(),["foo {","}"].join(`
`))})})}),suite("Auto Indent On Type - Ruby",()=>{const a="ruby-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("issue #198350: in or when incorrectly match non keywords for Ruby",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{o.type(`def foo
        i`),o.type("n","keyboard"),r.strictEqual(e.getValue(),`def foo
        in`),o.type(" ","keyboard"),r.strictEqual(e.getValue(),`def foo
in `),o.model.setValue(""),o.type("  # in"),r.strictEqual(e.getValue(),"  # in"),o.type(" ","keyboard"),r.strictEqual(e.getValue(),"  # in ")})}),test.skip("issue #199846: in or when incorrectly match non keywords for Ruby",()=>{const e=l("",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{o.type("method('#foo') do"),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["method('#foo') do","    "].join(`
`))})})}),suite("Auto Indent On Type - PHP",()=>{const a="php-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("issue #199050: should not indent after { detected in a string",()=>{const e=l("preg_replace('{');",a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{const c=[[{startIndex:0,standardTokenType:i.Other},{startIndex:13,standardTokenType:i.String},{startIndex:16,standardTokenType:i.Other}]];n.add(E(p,c,a)),t.setSelection(new d(1,54,1,54)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["preg_replace('{');",""].join(`
`))})})}),suite("Auto Indent On Paste - Go",()=>{const a="go-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #199050: should not indent after { detected in a string",()=>{const e=l(["var s = `","quick  brown","fox","`"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(3,1,3,1));const p="  ",c=t.registerAndInstantiateContribution(f.ID,f);o.paste(p,!0,void 0,"keyboard"),c.trigger(new I(3,1,3,3)),r.strictEqual(e.getValue(),["var s = `","quick  brown","  fox","`"].join(`
`))})})}),suite("Auto Indent On Type - CPP",()=>{const a="cpp-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #178334: incorrect outdent of } when signature spans multiple lines",()=>{const e=l(["int WINAPI WinMain(bool instance,","    int nshowcmd) {}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,20,2,20)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["int WINAPI WinMain(bool instance,","    int nshowcmd) {","    ","}"].join(`
`))})}),test.skip("issue #118929: incorrect indent when // follows curly brace",()=>{const e=l(["if (true) { // jaja","}"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(1,20,1,20)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["if (true) { // jaja","    ","}"].join(`
`))})}),test.skip('issue #111265: auto indentation set to "none" still changes the indentation',()=>{const e=l(["int func() {","		"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"none",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,3,2,3)),o.type("}","keyboard"),r.strictEqual(e.getValue(),["int func() {","		}"].join(`
`))})})}),suite("Auto Indent On Type - HTML",()=>{const a="html-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #61510: incorrect indentation after // in html file",()=>{const e=l(["<pre>","  foo //I press <Enter> at the end of this line","</pre>"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,48,2,48)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),["<pre>","  foo //I press <Enter> at the end of this line","  ","</pre>"].join(`
`))})})}),suite("Auto Indent On Type - Visual Basic",()=>{const a="vb-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #118932: no indentation in visual basic files",()=>{const e=l(["if True then","    Some code","    end i"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o,p)=>{t.setSelection(new d(3,10,3,10)),o.type("f","keyboard"),r.strictEqual(e.getValue(),["if True then","    Some code","end if"].join(`
`))})})}),suite("Auto Indent On Type - Latex",()=>{const a="latex-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #178075: no auto closing pair when indentation done",()=>{const e=l(["\\begin{theorem}","    \\end"].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(2,9,2,9)),o.type("{","keyboard"),r.strictEqual(e.getValue(),["\\begin{theorem}","\\end{}"].join(`
`))})})}),suite("Auto Indent On Type - Lua",()=>{const a="lua-test";let n,s;setup(()=>{n=new T;const e=new h,t=new S;n.add(e),n.add(t),n.add(C(e,a)),n.add(x(t,a)),s=new w([k,e],[b,t])}),teardown(()=>{n.dispose()}),m(),test("temp issue because there should be at least one passing test in a suite",()=>{r.ok(!0)}),test.skip("issue #178075: no auto closing pair when indentation done",()=>{const e=l(['print("asdf function asdf")'].join(`
`),a,{});n.add(e),u(e,{autoIndent:"full",serviceCollection:s},(t,o)=>{t.setSelection(new d(1,28,1,28)),o.type(`
`,"keyboard"),r.strictEqual(e.getValue(),['print("asdf function asdf")',""].join(`
`))})})});export{de as Language,C as registerLanguage,x as registerLanguageConfiguration,E as registerTokenizationSupport};
