import{timeout as u}from"../../../../../base/common/async.js";import"../../../../../base/common/cancellation.js";import{Disposable as d}from"../../../../../base/common/lifecycle.js";import{CoreEditingCommands as a,CoreNavigationCommands as n}from"../../../../browser/coreCommands.js";import"../../../../common/core/position.js";import"../../../../common/model.js";import"../../../../common/languages.js";import"../../../../test/browser/testCodeEditor.js";import"../../browser/model/inlineCompletionsModel.js";import{autorun as m}from"../../../../../base/common/observable.js";class k{returnValue=[];delayMs=0;callHistory=new Array;calledTwiceIn50Ms=!1;setReturnValue(t,e=0){this.returnValue=t?[t]:[],this.delayMs=e}setReturnValues(t,e=0){this.returnValue=t,this.delayMs=e}getAndClearCallHistory(){const t=[...this.callHistory];return this.callHistory=[],t}assertNotCalledTwiceWithin50ms(){if(this.calledTwiceIn50Ms)throw new Error("provideInlineCompletions has been called at least twice within 50ms. This should not happen.")}lastTimeMs=void 0;async provideInlineCompletions(t,e,o,l){const r=new Date().getTime();this.lastTimeMs&&r-this.lastTimeMs<50&&(this.calledTwiceIn50Ms=!0),this.lastTimeMs=r,this.callHistory.push({position:e.toString(),triggerKind:o.triggerKind,text:t.getValue()});const i=new Array;return i.push(...this.returnValue),this.delayMs>0&&await u(this.delayMs),{items:i}}freeInlineCompletions(){}handleItemDidShow(){}}class D extends d{constructor(e,o){super();this.editor=o;this._register(m(l=>{const r=e.primaryGhostText.read(l);let i;r?i=r.render(this.editor.getValue(),!0):i=this.editor.getValue(),this._currentPrettyViewState!==i&&this.prettyViewStates.push(i),this._currentPrettyViewState=i}))}prettyViewStates=new Array;_currentPrettyViewState;get currentPrettyViewState(){return this._currentPrettyViewState}getAndClearViewStates(){const e=[...this.prettyViewStates];return this.prettyViewStates.length=0,e}keyboardType(e){this.editor.trigger("keyboard","type",{text:e})}cursorUp(){n.CursorUp.runEditorCommand(null,this.editor,null)}cursorRight(){n.CursorRight.runEditorCommand(null,this.editor,null)}cursorLeft(){n.CursorLeft.runEditorCommand(null,this.editor,null)}cursorDown(){n.CursorDown.runEditorCommand(null,this.editor,null)}cursorLineEnd(){n.CursorLineEnd.runEditorCommand(null,this.editor,null)}leftDelete(){a.DeleteLeft.runEditorCommand(null,this.editor,null)}}export{D as GhostTextContext,k as MockInlineCompletionsProvider};
