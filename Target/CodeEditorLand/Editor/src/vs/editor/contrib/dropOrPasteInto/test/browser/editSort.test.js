import d from"assert";import{HierarchicalKind as o}from"../../../../../base/common/hierarchicalKind.js";import{ensureNoDisposablesAreLeakedInTestSuite as r}from"../../../../../base/test/common/utils.js";import"../../../../common/languages.js";import{sortEditsByYieldTo as n}from"../../browser/edit.js";function t(e,i){return{title:"",insertText:"",kind:new o(e),...i}}suite("sortEditsByYieldTo",()=>{test("Should noop for empty edits",()=>{const e=[];d.deepStrictEqual(n(e),[])}),test("Yielded to edit should get sorted after target",()=>{const e=[t("a",{yieldTo:[{kind:new o("b")}]}),t("b")];d.deepStrictEqual(n(e).map(i=>i.kind?.value),["b","a"])}),test("Should handle chain of yield to",()=>{{const e=[t("c",{yieldTo:[{kind:new o("a")}]}),t("a",{yieldTo:[{kind:new o("b")}]}),t("b")];d.deepStrictEqual(n(e).map(i=>i.kind?.value),["b","a","c"])}{const e=[t("a",{yieldTo:[{kind:new o("b")}]}),t("c",{yieldTo:[{kind:new o("a")}]}),t("b")];d.deepStrictEqual(n(e).map(i=>i.kind?.value),["b","a","c"])}}),test("Should not reorder when yield to isn't used",()=>{const e=[t("c",{yieldTo:[{kind:new o("x")}]}),t("a",{yieldTo:[{kind:new o("y")}]}),t("b")];d.deepStrictEqual(n(e).map(i=>i.kind?.value),["c","a","b"])}),r()});
