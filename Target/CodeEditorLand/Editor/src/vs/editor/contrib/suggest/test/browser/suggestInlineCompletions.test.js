import l from"assert";import{CancellationToken as m}from"../../../../../base/common/cancellation.js";import{DisposableStore as I}from"../../../../../base/common/lifecycle.js";import{URI as h}from"../../../../../base/common/uri.js";import{mock as S}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../../../base/test/common/utils.js";import{Position as p}from"../../../../common/core/position.js";import{Range as w}from"../../../../common/core/range.js";import{CompletionItemKind as u,InlineCompletionTriggerKind as d}from"../../../../common/languages.js";import"../../../../common/model.js";import"../../../../common/model/textModel.js";import{ILanguageFeaturesService as T}from"../../../../common/services/languageFeatures.js";import{SuggestInlineCompletions as f}from"../../browser/suggestInlineCompletions.js";import{ISuggestMemoryService as x}from"../../browser/suggestMemory.js";import{createCodeEditorServices as b,instantiateTestCodeEditor as k}from"../../../../test/browser/testCodeEditor.js";import{createTextModel as E}from"../../../../test/common/testTextModel.js";import{ServiceCollection as y}from"../../../../../platform/instantiation/common/serviceCollection.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";suite("Suggest Inline Completions",function(){const o=new I,C=new y([x,new class extends S(){select(){return 0}}]);let i,n,s;setup(function(){i=b(o,C),n=E("he",void 0,void 0,h.from({scheme:"foo",path:"foo.bar"})),s=k(i,n),s.updateOptions({quickSuggestions:{comments:"inline",strings:"inline",other:"inline"}}),i.invokeFunction(t=>{o.add(t.get(T).completionProvider.register({pattern:"*.bar",scheme:"foo"},new class{_debugDisplayName="test";triggerCharacters;provideCompletionItems(e,a,N,P){const g=e.getWordUntilPosition(a),c=new w(a.lineNumber,g.startColumn,a.lineNumber,g.endColumn),r=[];return r.push({insertText:"hello",label:"hello",range:c,kind:u.Class}),r.push({insertText:"hell",label:"hell",range:c,kind:u.Class}),r.push({insertText:"hey",label:"hey",range:c,kind:u.Snippet}),{suggestions:r}}}))})}),teardown(function(){o.clear(),n.dispose(),s.dispose()}),v(),test("Aggressive inline completions when typing within line #146948",async function(){const t=o.add(i.createInstance(f));{const e=await t.provideInlineCompletions(n,new p(1,3),{triggerKind:d.Explicit,selectedSuggestionInfo:void 0},m.None);l.strictEqual(e?.items.length,3),t.freeInlineCompletions(e)}{const e=await t.provideInlineCompletions(n,new p(1,2),{triggerKind:d.Explicit,selectedSuggestionInfo:void 0},m.None);l.ok(e===void 0)}}),test("Snippets show in inline suggestions even though they are turned off #175190",async function(){const t=o.add(i.createInstance(f));{const e=await t.provideInlineCompletions(n,new p(1,3),{triggerKind:d.Explicit,selectedSuggestionInfo:void 0},m.None);l.strictEqual(e?.items.length,3),t.freeInlineCompletions(e)}{s.updateOptions({suggest:{showSnippets:!1}});const e=await t.provideInlineCompletions(n,new p(1,3),{triggerKind:d.Explicit,selectedSuggestionInfo:void 0},m.None);l.strictEqual(e?.items.length,2),t.freeInlineCompletions(e)}})});
