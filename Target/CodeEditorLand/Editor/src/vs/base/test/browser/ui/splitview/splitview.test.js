import e from"assert";import{SashState as u}from"../../../../browser/ui/sash/sash.js";import{LayoutPriority as m,Sizing as o,SplitView as w}from"../../../../browser/ui/splitview/splitview.js";import{Emitter as I}from"../../../../common/event.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../common/utils.js";class n{constructor(l,i,s=m.Normal){this._minimumSize=l;this._maximumSize=i;this.priority=s;e(l<=i,"splitview view minimum size must be <= maximum size")}_onDidChange=new I;onDidChange=this._onDidChange.event;get minimumSize(){return this._minimumSize}set minimumSize(l){this._minimumSize=l,this._onDidChange.fire(void 0)}get maximumSize(){return this._maximumSize}set maximumSize(l){this._maximumSize=l,this._onDidChange.fire(void 0)}_element=document.createElement("div");get element(){return this._onDidGetElement.fire(),this._element}_onDidGetElement=new I;onDidGetElement=this._onDidGetElement.event;_size=0;get size(){return this._size}_orthogonalSize=0;get orthogonalSize(){return this._orthogonalSize}_onDidLayout=new I;onDidLayout=this._onDidLayout.event;_onDidFocus=new I;onDidFocus=this._onDidFocus.event;layout(l,i,s){this._size=l,this._orthogonalSize=s,this._onDidLayout.fire({size:l,orthogonalSize:s})}focus(){this._onDidFocus.fire()}dispose(){this._onDidChange.dispose(),this._onDidGetElement.dispose(),this._onDidLayout.dispose(),this._onDidFocus.dispose()}}function E(d){return d.sashItems.map(l=>l.sash)}suite("Splitview",()=>{const d=v();let l;setup(()=>{l=document.createElement("div"),l.style.position="absolute",l.style.width="200px",l.style.height="200px"}),test("empty splitview has empty DOM",()=>{d.add(new w(l)),e.strictEqual(l.firstElementChild.firstElementChild.childElementCount,0,"split view should be empty")}),test("has views and sashes as children",()=>{const i=d.add(new n(20,20)),s=d.add(new n(20,20)),a=d.add(new n(20,20)),t=d.add(new w(l));t.addView(i,20),t.addView(s,20),t.addView(a,20);let r=l.querySelectorAll(".monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view");e.strictEqual(r.length,3,"split view should have 3 views");let c=l.querySelectorAll(".monaco-split-view2 > .sash-container > .monaco-sash");e.strictEqual(c.length,2,"split view should have 2 sashes"),t.removeView(2),r=l.querySelectorAll(".monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view"),e.strictEqual(r.length,2,"split view should have 2 views"),c=l.querySelectorAll(".monaco-split-view2 > .sash-container > .monaco-sash"),e.strictEqual(c.length,1,"split view should have 1 sash"),t.removeView(0),r=l.querySelectorAll(".monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view"),e.strictEqual(r.length,1,"split view should have 1 view"),c=l.querySelectorAll(".monaco-split-view2 > .sash-container > .monaco-sash"),e.strictEqual(c.length,0,"split view should have no sashes"),t.removeView(0),r=l.querySelectorAll(".monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view"),e.strictEqual(r.length,0,"split view should have no views"),c=l.querySelectorAll(".monaco-split-view2 > .sash-container > .monaco-sash"),e.strictEqual(c.length,0,"split view should have no sashes")}),test("calls view methods on addView and removeView",()=>{const i=d.add(new n(20,20)),s=d.add(new w(l));let a=!1;d.add(i.onDidLayout(()=>a=!0)),d.add(i.onDidGetElement(()=>{})),s.addView(i,20),e.strictEqual(i.size,20,"view has right size"),e(a,"layout is called"),e(a,"render is called")}),test("stretches view to viewport",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new w(l));s.layout(200),s.addView(i,20),e.strictEqual(i.size,200,"view is stretched"),s.layout(200),e.strictEqual(i.size,200,"view stayed the same"),s.layout(100),e.strictEqual(i.size,100,"view is collapsed"),s.layout(20),e.strictEqual(i.size,20,"view is collapsed"),s.layout(10),e.strictEqual(i.size,20,"view is clamped"),s.layout(200),e.strictEqual(i.size,200,"view is stretched")}),test("can resize views",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.layout(200),t.addView(i,20),t.addView(s,20),t.addView(a,20),e.strictEqual(i.size,160,"view1 is stretched"),e.strictEqual(s.size,20,"view2 size is 20"),e.strictEqual(a.size,20,"view3 size is 20"),t.resizeView(1,40),e.strictEqual(i.size,140,"view1 is collapsed"),e.strictEqual(s.size,40,"view2 is stretched"),e.strictEqual(a.size,20,"view3 stays the same"),t.resizeView(0,70),e.strictEqual(i.size,70,"view1 is collapsed"),e.strictEqual(s.size,40,"view2 stays the same"),e.strictEqual(a.size,90,"view3 is stretched"),t.resizeView(2,40),e.strictEqual(i.size,70,"view1 stays the same"),e.strictEqual(s.size,90,"view2 is collapsed"),e.strictEqual(a.size,40,"view3 is stretched")}),test("reacts to view changes",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.layout(200),t.addView(i,20),t.addView(s,20),t.addView(a,20),e.strictEqual(i.size,160,"view1 is stretched"),e.strictEqual(s.size,20,"view2 size is 20"),e.strictEqual(a.size,20,"view3 size is 20"),i.maximumSize=20,e.strictEqual(i.size,20,"view1 is collapsed"),e.strictEqual(s.size,20,"view2 stays the same"),e.strictEqual(a.size,160,"view3 is stretched"),a.maximumSize=40,e.strictEqual(i.size,20,"view1 stays the same"),e.strictEqual(s.size,140,"view2 is stretched"),e.strictEqual(a.size,40,"view3 is collapsed"),s.maximumSize=200,e.strictEqual(i.size,20,"view1 stays the same"),e.strictEqual(s.size,140,"view2 stays the same"),e.strictEqual(a.size,40,"view3 stays the same"),a.maximumSize=Number.POSITIVE_INFINITY,a.minimumSize=100,e.strictEqual(i.size,20,"view1 is collapsed"),e.strictEqual(s.size,80,"view2 is collapsed"),e.strictEqual(a.size,100,"view3 is stretched")}),test("sashes are properly enabled/disabled",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.layout(200),t.addView(i,o.Distribute),t.addView(s,o.Distribute),t.addView(a,o.Distribute);const r=E(t);e.strictEqual(r.length,2,"there are two sashes"),e.strictEqual(r[0].state,u.Enabled,"first sash is enabled"),e.strictEqual(r[1].state,u.Enabled,"second sash is enabled"),t.layout(60),e.strictEqual(r[0].state,u.Disabled,"first sash is disabled"),e.strictEqual(r[1].state,u.Disabled,"second sash is disabled"),t.layout(20),e.strictEqual(r[0].state,u.Disabled,"first sash is disabled"),e.strictEqual(r[1].state,u.Disabled,"second sash is disabled"),t.layout(200),e.strictEqual(r[0].state,u.Enabled,"first sash is enabled"),e.strictEqual(r[1].state,u.Enabled,"second sash is enabled"),i.maximumSize=20,e.strictEqual(r[0].state,u.Disabled,"first sash is disabled"),e.strictEqual(r[1].state,u.Enabled,"second sash is enabled"),s.maximumSize=20,e.strictEqual(r[0].state,u.Disabled,"first sash is disabled"),e.strictEqual(r[1].state,u.Disabled,"second sash is disabled"),i.maximumSize=300,e.strictEqual(r[0].state,u.AtMinimum,"first sash is enabled"),e.strictEqual(r[1].state,u.AtMinimum,"second sash is enabled"),s.maximumSize=200,e.strictEqual(r[0].state,u.AtMinimum,"first sash is enabled"),e.strictEqual(r[1].state,u.AtMinimum,"second sash is enabled"),t.resizeView(0,40),e.strictEqual(r[0].state,u.Enabled,"first sash is enabled"),e.strictEqual(r[1].state,u.Enabled,"second sash is enabled")}),test("issue #35497",()=>{const i=d.add(new n(160,Number.POSITIVE_INFINITY)),s=d.add(new n(66,66)),a=d.add(new w(l));a.layout(986),a.addView(i,142,0),e.strictEqual(i.size,986,"first view is stretched"),d.add(s.onDidGetElement(()=>{e.throws(()=>a.resizeView(1,922)),e.throws(()=>a.resizeView(1,922))})),a.addView(s,66,0),e.strictEqual(s.size,66,"second view is fixed"),e.strictEqual(i.size,920,"first view is collapsed");const t=l.querySelectorAll(".split-view-view");e.strictEqual(t.length,2,"there are two view containers"),e.strictEqual(t.item(0).style.height,"66px","second view container is 66px"),e.strictEqual(t.item(1).style.height,"920px","first view container is 66px")}),test("automatic size distribution",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.layout(200),t.addView(i,o.Distribute),e.strictEqual(i.size,200),t.addView(s,50),e.deepStrictEqual([i.size,s.size],[150,50]),t.addView(a,o.Distribute),e.deepStrictEqual([i.size,s.size,a.size],[66,66,68]),t.removeView(1,o.Distribute),e.deepStrictEqual([i.size,a.size],[100,100])}),test("add views before layout",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.addView(i,100),t.addView(s,75),t.addView(a,25),t.layout(200),e.deepStrictEqual([i.size,s.size,a.size],[67,67,66])}),test("split sizing",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.layout(200),t.addView(i,o.Distribute),e.strictEqual(i.size,200),t.addView(s,o.Split(0)),e.deepStrictEqual([i.size,s.size],[100,100]),t.addView(a,o.Split(1)),e.deepStrictEqual([i.size,s.size,a.size],[100,50,50])}),test("split sizing 2",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l));t.layout(200),t.addView(i,o.Distribute),e.strictEqual(i.size,200),t.addView(s,o.Split(0)),e.deepStrictEqual([i.size,s.size],[100,100]),t.addView(a,o.Split(0)),e.deepStrictEqual([i.size,s.size,a.size],[50,100,50])}),test("proportional layout",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new w(l));a.layout(200),a.addView(i,o.Distribute),a.addView(s,o.Distribute),e.deepStrictEqual([i.size,s.size],[100,100]),a.layout(100),e.deepStrictEqual([i.size,s.size],[50,50])}),test("disable proportional layout",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new w(l,{proportionalLayout:!1}));a.layout(200),a.addView(i,o.Distribute),a.addView(s,o.Distribute),e.deepStrictEqual([i.size,s.size],[100,100]),a.layout(100),e.deepStrictEqual([i.size,s.size],[80,20])}),test("high layout priority",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY,m.High)),a=d.add(new n(20,Number.POSITIVE_INFINITY)),t=d.add(new w(l,{proportionalLayout:!1}));t.layout(200),t.addView(i,o.Distribute),t.addView(s,o.Distribute),t.addView(a,o.Distribute),e.deepStrictEqual([i.size,s.size,a.size],[66,68,66]),t.layout(180),e.deepStrictEqual([i.size,s.size,a.size],[66,48,66]),t.layout(124),e.deepStrictEqual([i.size,s.size,a.size],[66,20,38]),t.layout(60),e.deepStrictEqual([i.size,s.size,a.size],[20,20,20]),t.layout(200),e.deepStrictEqual([i.size,s.size,a.size],[20,160,20])}),test("low layout priority",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY,m.Low)),t=d.add(new w(l,{proportionalLayout:!1}));t.layout(200),t.addView(i,o.Distribute),t.addView(s,o.Distribute),t.addView(a,o.Distribute),e.deepStrictEqual([i.size,s.size,a.size],[66,68,66]),t.layout(180),e.deepStrictEqual([i.size,s.size,a.size],[66,48,66]),t.layout(132),e.deepStrictEqual([i.size,s.size,a.size],[46,20,66]),t.layout(60),e.deepStrictEqual([i.size,s.size,a.size],[20,20,20]),t.layout(200),e.deepStrictEqual([i.size,s.size,a.size],[20,160,20])}),test("context propagates to views",()=>{const i=d.add(new n(20,Number.POSITIVE_INFINITY)),s=d.add(new n(20,Number.POSITIVE_INFINITY)),a=d.add(new n(20,Number.POSITIVE_INFINITY,m.Low)),t=d.add(new w(l,{proportionalLayout:!1}));t.layout(200),t.addView(i,o.Distribute),t.addView(s,o.Distribute),t.addView(a,o.Distribute),t.layout(200,100),e.deepStrictEqual([i.orthogonalSize,s.orthogonalSize,a.orthogonalSize],[100,100,100])})});
