import t from"assert";import{FileService as c}from"../../../files/common/fileService.js";import{NullLogService as d}from"../../../log/common/log.js";import{Schemas as u}from"../../../../base/common/network.js";import{URI as p}from"../../../../base/common/uri.js";import{joinPath as l}from"../../../../base/common/resources.js";import{InMemoryFileSystemProvider as m}from"../../../files/common/inMemoryFilesystemProvider.js";import{AbstractNativeEnvironmentService as S}from"../../../environment/common/environmentService.js";import g from"../../../product/common/product.js";import{InMemoryUserDataProfilesService as E}from"../../common/userDataProfile.js";import{UriIdentityService as q}from"../../../uriIdentity/common/uriIdentityService.js";import{ensureNoDisposablesAreLeakedInTestSuite as P}from"../../../../base/test/common/utils.js";const f=p.file("tests").with({scheme:"vscode-tests"});class w extends S{constructor(r){super(Object.create(null),Object.create(null),{_serviceBrand:void 0,...g});this._appSettingsHome=r}get userRoamingDataHome(){return this._appSettingsHome.with({scheme:u.vscodeUserData})}get cacheHome(){return this.userRoamingDataHome}}suite("UserDataProfileService (Common)",()=>{const s=P();let e,r;setup(async()=>{const i=new d,a=s.add(new c(i)),o=s.add(new m);s.add(a.registerProvider(f.scheme,o)),s.add(a.registerProvider(u.vscodeUserData,o)),r=new w(l(f,"User")),e=s.add(new E(r,a,s.add(new q(a)),i))}),test("default profile",()=>{t.strictEqual(e.defaultProfile.isDefault,!0),t.strictEqual(e.defaultProfile.useDefaultFlags,void 0),t.strictEqual(e.defaultProfile.location.toString(),r.userRoamingDataHome.toString()),t.strictEqual(e.defaultProfile.globalStorageHome.toString(),l(r.userRoamingDataHome,"globalStorage").toString()),t.strictEqual(e.defaultProfile.keybindingsResource.toString(),l(r.userRoamingDataHome,"keybindings.json").toString()),t.strictEqual(e.defaultProfile.settingsResource.toString(),l(r.userRoamingDataHome,"settings.json").toString()),t.strictEqual(e.defaultProfile.snippetsHome.toString(),l(r.userRoamingDataHome,"snippets").toString()),t.strictEqual(e.defaultProfile.tasksResource.toString(),l(r.userRoamingDataHome,"tasks.json").toString()),t.strictEqual(e.defaultProfile.extensionsResource.toString(),l(r.userRoamingDataHome,"extensions.json").toString())}),test("profiles always include default profile",()=>{t.deepStrictEqual(e.profiles.length,1),t.deepStrictEqual(e.profiles[0].isDefault,!0)}),test("create profile with id",async()=>{const i=await e.createProfile("id","name");t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(i.id,"id"),t.deepStrictEqual(i.name,"name"),t.deepStrictEqual(!!i.isTransient,!1),t.deepStrictEqual(e.profiles[1].id,i.id),t.deepStrictEqual(e.profiles[1].name,i.name)}),test("create profile with id, name and transient",async()=>{const i=await e.createProfile("id","name",{transient:!0});t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(i.id,"id"),t.deepStrictEqual(i.name,"name"),t.deepStrictEqual(!!i.isTransient,!0),t.deepStrictEqual(e.profiles[1].id,i.id)}),test("create transient profiles",async()=>{const i=await e.createTransientProfile(),a=await e.createTransientProfile(),o=await e.createTransientProfile(),n=await e.createProfile("id","name",{transient:!0});t.deepStrictEqual(e.profiles.length,5),t.deepStrictEqual(i.name,"Temp 1"),t.deepStrictEqual(i.isTransient,!0),t.deepStrictEqual(e.profiles[1].id,i.id),t.deepStrictEqual(a.name,"Temp 2"),t.deepStrictEqual(a.isTransient,!0),t.deepStrictEqual(e.profiles[2].id,a.id),t.deepStrictEqual(o.name,"Temp 3"),t.deepStrictEqual(o.isTransient,!0),t.deepStrictEqual(e.profiles[3].id,o.id),t.deepStrictEqual(n.name,"name"),t.deepStrictEqual(n.isTransient,!0),t.deepStrictEqual(e.profiles[4].id,n.id)}),test("create transient profile when a normal profile with Temp is already created",async()=>{await e.createNamedProfile("Temp 1");const i=await e.createTransientProfile();t.deepStrictEqual(i.name,"Temp 2"),t.deepStrictEqual(i.isTransient,!0)}),test("profiles include default profile with extension resource defined when transiet prrofile is created",async()=>{await e.createTransientProfile(),t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(e.profiles[0].isDefault,!0)}),test("profiles include default profile with extension resource undefined when transiet prrofile is removed",async()=>{const i=await e.createTransientProfile();await e.removeProfile(i),t.deepStrictEqual(e.profiles.length,1),t.deepStrictEqual(e.profiles[0].isDefault,!0)}),test("update named profile",async()=>{const i=await e.createNamedProfile("name");await e.updateProfile(i,{name:"name changed"}),t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(e.profiles[1].name,"name changed"),t.deepStrictEqual(!!e.profiles[1].isTransient,!1),t.deepStrictEqual(e.profiles[1].id,i.id)}),test("persist transient profile",async()=>{const i=await e.createTransientProfile();await e.updateProfile(i,{name:"saved",transient:!1}),t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(e.profiles[1].name,"saved"),t.deepStrictEqual(!!e.profiles[1].isTransient,!1),t.deepStrictEqual(e.profiles[1].id,i.id)}),test("persist transient profile (2)",async()=>{const i=await e.createProfile("id","name",{transient:!0});await e.updateProfile(i,{name:"saved",transient:!1}),t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(e.profiles[1].name,"saved"),t.deepStrictEqual(!!e.profiles[1].isTransient,!1),t.deepStrictEqual(e.profiles[1].id,i.id)}),test("save transient profile",async()=>{const i=await e.createTransientProfile();await e.updateProfile(i,{name:"saved"}),t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(e.profiles[1].name,"saved"),t.deepStrictEqual(!!e.profiles[1].isTransient,!0),t.deepStrictEqual(e.profiles[1].id,i.id)}),test("short name",async()=>{const i=await e.createNamedProfile("name",{shortName:"short"});t.strictEqual(i.shortName,"short"),await e.updateProfile(i,{shortName:"short changed"}),t.deepStrictEqual(e.profiles.length,2),t.deepStrictEqual(e.profiles[1].name,"name"),t.deepStrictEqual(e.profiles[1].shortName,"short changed"),t.deepStrictEqual(!!e.profiles[1].isTransient,!1),t.deepStrictEqual(e.profiles[1].id,i.id)}),test("profile using default profile for settings",async()=>{const i=await e.createNamedProfile("name",{useDefaultFlags:{settings:!0}});t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{settings:!0}),t.strictEqual(i.settingsResource.toString(),e.defaultProfile.settingsResource.toString())}),test("profile using default profile for keybindings",async()=>{const i=await e.createNamedProfile("name",{useDefaultFlags:{keybindings:!0}});t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{keybindings:!0}),t.strictEqual(i.keybindingsResource.toString(),e.defaultProfile.keybindingsResource.toString())}),test("profile using default profile for snippets",async()=>{const i=await e.createNamedProfile("name",{useDefaultFlags:{snippets:!0}});t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{snippets:!0}),t.strictEqual(i.snippetsHome.toString(),e.defaultProfile.snippetsHome.toString())}),test("profile using default profile for tasks",async()=>{const i=await e.createNamedProfile("name",{useDefaultFlags:{tasks:!0}});t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{tasks:!0}),t.strictEqual(i.tasksResource.toString(),e.defaultProfile.tasksResource.toString())}),test("profile using default profile for global state",async()=>{const i=await e.createNamedProfile("name",{useDefaultFlags:{globalState:!0}});t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{globalState:!0}),t.strictEqual(i.globalStorageHome.toString(),e.defaultProfile.globalStorageHome.toString())}),test("profile using default profile for extensions",async()=>{const i=await e.createNamedProfile("name",{useDefaultFlags:{extensions:!0}});t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{extensions:!0}),t.strictEqual(i.extensionsResource.toString(),e.defaultProfile.extensionsResource.toString())}),test("update profile using default profile for keybindings",async()=>{let i=await e.createNamedProfile("name");i=await e.updateProfile(i,{useDefaultFlags:{keybindings:!0}}),t.strictEqual(i.isDefault,!1),t.deepStrictEqual(i.useDefaultFlags,{keybindings:!0}),t.strictEqual(i.keybindingsResource.toString(),e.defaultProfile.keybindingsResource.toString())})});
