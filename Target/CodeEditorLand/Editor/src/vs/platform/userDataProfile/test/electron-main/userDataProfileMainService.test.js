import i from"assert";import{FileService as f}from"../../../files/common/fileService.js";import{NullLogService as d}from"../../../log/common/log.js";import{Schemas as l}from"../../../../base/common/network.js";import{URI as m}from"../../../../base/common/uri.js";import{joinPath as s}from"../../../../base/common/resources.js";import{InMemoryFileSystemProvider as p}from"../../../files/common/inMemoryFilesystemProvider.js";import{AbstractNativeEnvironmentService as u}from"../../../environment/common/environmentService.js";import v from"../../../product/common/product.js";import{UserDataProfilesMainService as P}from"../../electron-main/userDataProfile.js";import{SaveStrategy as g,StateService as w}from"../../../state/node/stateService.js";import{UriIdentityService as S}from"../../../uriIdentity/common/uriIdentityService.js";import{ensureNoDisposablesAreLeakedInTestSuite as h}from"../../../../base/test/common/utils.js";const D=m.file("tests").with({scheme:"vscode-tests"});class k extends u{constructor(o){super(Object.create(null),Object.create(null),{_serviceBrand:void 0,...v});this._appSettingsHome=o}get userRoamingDataHome(){return this._appSettingsHome.with({scheme:l.vscodeUserData})}get extensionsPath(){return s(this.userRoamingDataHome,"extensions.json").path}get stateResource(){return s(this.userRoamingDataHome,"state.json")}get cacheHome(){return s(this.userRoamingDataHome,"cache")}}suite("UserDataProfileMainService",()=>{const a=h();let e,o,n;setup(async()=>{const t=new d,r=a.add(new f(t)),c=a.add(new p);a.add(r.registerProvider(l.vscodeUserData,c)),o=new k(s(D,"User")),n=a.add(new w(g.DELAYED,o,t,r)),e=a.add(new P(n,a.add(new S(r)),o,r,t)),await n.init()}),test("default profile",()=>{i.strictEqual(e.defaultProfile.isDefault,!0)}),test("profiles always include default profile",()=>{i.deepStrictEqual(e.profiles.length,1),i.deepStrictEqual(e.profiles[0].isDefault,!0)}),test("default profile when there are profiles",async()=>{await e.createNamedProfile("test"),i.strictEqual(e.defaultProfile.isDefault,!0)}),test("default profile when profiles are removed",async()=>{const t=await e.createNamedProfile("test");await e.removeProfile(t),i.strictEqual(e.defaultProfile.isDefault,!0)}),test("when no profile is set",async()=>{await e.createNamedProfile("profile1"),i.equal(e.getProfileForWorkspace({id:"id"}),void 0),i.equal(e.getProfileForWorkspace({id:"id",configPath:o.userRoamingDataHome}),void 0),i.equal(e.getProfileForWorkspace({id:"id",uri:o.userRoamingDataHome}),void 0)}),test("set profile to a workspace",async()=>{const t={id:"id",configPath:o.userRoamingDataHome},r=await e.createNamedProfile("profile1");e.setProfileForWorkspace(t,r),i.strictEqual(e.getProfileForWorkspace(t)?.id,r.id)}),test("set profile to a folder",async()=>{const t={id:"id",uri:o.userRoamingDataHome},r=await e.createNamedProfile("profile1");e.setProfileForWorkspace(t,r),i.strictEqual(e.getProfileForWorkspace(t)?.id,r.id)}),test("set profile to a window",async()=>{const t={id:"id"},r=await e.createNamedProfile("profile1");e.setProfileForWorkspace(t,r),i.strictEqual(e.getProfileForWorkspace(t)?.id,r.id)})});
