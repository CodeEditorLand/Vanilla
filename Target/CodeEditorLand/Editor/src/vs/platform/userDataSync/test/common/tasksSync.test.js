import i from"assert";import{VSBuffer as l}from"../../../../base/common/buffer.js";import{runWithFakedTimers as v}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as U}from"../../../../base/test/common/utils.js";import{IFileService as w}from"../../../files/common/files.js";import{ILogService as f}from"../../../log/common/log.js";import{IUserDataProfilesService as u}from"../../../userDataProfile/common/userDataProfile.js";import{getTasksContentFromSyncContent as y}from"../../common/tasksSync.js";import{Change as R,IUserDataSyncStoreService as h,MergeState as q,SyncResource as E,SyncStatus as d}from"../../common/userDataSync.js";import{UserDataSyncClient as k,UserDataSyncTestServer as F}from"./userDataSyncClient.js";suite("TasksSync",()=>{const S=new F;let e,t;teardown(async()=>{await e.instantiationService.get(h).clear()});const p=U();setup(async()=>{e=p.add(new k(S)),await e.setUp(!0),t=e.getSynchronizer(E.Tasks)}),test("when tasks file does not exist",async()=>{await v({},async()=>{const a=e.instantiationService.get(w),n=e.instantiationService.get(u).defaultProfile.tasksResource;i.deepStrictEqual(await t.getLastSyncUserData(),null);let s=await e.getResourceManifest();S.reset(),await t.sync(s),i.deepStrictEqual(S.requests,[{type:"GET",url:`${S.url}/v1/resource/${t.resource}/latest`,headers:{}}]),i.ok(!await a.exists(n));const c=await t.getLastSyncUserData(),o=await t.getRemoteUserData(null);i.deepStrictEqual(c.ref,o.ref),i.deepStrictEqual(c.syncData,o.syncData),i.strictEqual(c.syncData,null),s=await e.getResourceManifest(),S.reset(),await t.sync(s),i.deepStrictEqual(S.requests,[]),s=await e.getResourceManifest(),S.reset(),await t.sync(s),i.deepStrictEqual(S.requests,[])})}),test("when tasks file does not exist and remote has changes",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]}),s=a.instantiationService.get(u).defaultProfile.tasksResource;await a.instantiationService.get(w).writeFile(s,l.fromString(n)),await a.sync();const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const r=await t.getLastSyncUserData(),g=await t.getRemoteUserData(null);i.strictEqual(y(r.syncData.content,e.instantiationService.get(f)),n),i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),n),i.strictEqual((await c.readFile(o)).value.toString(),n)})}),test("when tasks file exists locally and remote has no tasks",async()=>{await v({},async()=>{const a=e.instantiationService.get(w),n=e.instantiationService.get(u).defaultProfile.tasksResource,s=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});a.writeFile(n,l.fromString(s)),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const c=await t.getLastSyncUserData(),o=await t.getRemoteUserData(null);i.strictEqual(y(c.syncData.content,e.instantiationService.get(f)),s),i.strictEqual(y(o.syncData.content,e.instantiationService.get(f)),s)})}),test("first time sync: when tasks file exists locally with same content as remote",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]}),s=a.instantiationService.get(u).defaultProfile.tasksResource;await a.instantiationService.get(w).writeFile(s,l.fromString(n)),await a.sync();const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await c.writeFile(o,l.fromString(n)),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const r=await t.getLastSyncUserData(),g=await t.getRemoteUserData(null);i.strictEqual(y(r.syncData.content,e.instantiationService.get(f)),n),i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),n),i.strictEqual((await c.readFile(o)).value.toString(),n)})}),test("when tasks file locally has moved forward",async()=>{await v({},async()=>{const a=e.instantiationService.get(w),n=e.instantiationService.get(u).defaultProfile.tasksResource;a.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]}))),await t.sync(await e.getResourceManifest());const s=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});a.writeFile(n,l.fromString(s)),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const c=await t.getLastSyncUserData(),o=await t.getRemoteUserData(null);i.strictEqual(y(c.syncData.content,e.instantiationService.get(f)),s),i.strictEqual(y(o.syncData.content,e.instantiationService.get(f)),s)})}),test("when tasks file remotely has moved forward",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=a.instantiationService.get(u).defaultProfile.tasksResource,s=a.instantiationService.get(w);await s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]})));const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await a.sync(),await t.sync(await e.getResourceManifest());const r=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});s.writeFile(n,l.fromString(r)),await a.sync(),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const g=await t.getLastSyncUserData(),m=await t.getRemoteUserData(null);i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),r),i.strictEqual(y(m.syncData.content,e.instantiationService.get(f)),r),i.strictEqual((await c.readFile(o)).value.toString(),r)})}),test("when tasks file has moved forward locally and remotely with same changes",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=a.instantiationService.get(u).defaultProfile.tasksResource,s=a.instantiationService.get(w);await s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]})));const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await a.sync(),await t.sync(await e.getResourceManifest());const r=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});s.writeFile(n,l.fromString(r)),await a.sync(),c.writeFile(o,l.fromString(r)),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const g=await t.getLastSyncUserData(),m=await t.getRemoteUserData(null);i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),r),i.strictEqual(y(m.syncData.content,e.instantiationService.get(f)),r),i.strictEqual((await c.readFile(o)).value.toString(),r)})}),test("when tasks file has moved forward locally and remotely - accept preview",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=a.instantiationService.get(u).defaultProfile.tasksResource,s=a.instantiationService.get(w);await s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]})));const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await a.sync(),await t.sync(await e.getResourceManifest()),s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch"}]}))),await a.sync();const r=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});c.writeFile(o,l.fromString(r)),await t.sync(await e.getResourceManifest());const g=(await c.readFile(t.conflicts.conflicts[0].previewResource)).value.toString();i.deepStrictEqual(t.status,d.HasConflicts),i.deepStrictEqual(t.conflicts.conflicts.length,1),i.deepStrictEqual(t.conflicts.conflicts[0].mergeState,q.Conflict),i.deepStrictEqual(t.conflicts.conflicts[0].localChange,R.Modified),i.deepStrictEqual(t.conflicts.conflicts[0].remoteChange,R.Modified),await t.accept(t.conflicts.conflicts[0].previewResource),await t.apply(!1),i.deepStrictEqual(t.status,d.Idle);const m=await t.getLastSyncUserData(),D=await t.getRemoteUserData(null);i.strictEqual(y(m.syncData.content,e.instantiationService.get(f)),g),i.strictEqual(y(D.syncData.content,e.instantiationService.get(f)),g),i.strictEqual((await c.readFile(o)).value.toString(),g)})}),test("when tasks file has moved forward locally and remotely - accept modified preview",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=a.instantiationService.get(u).defaultProfile.tasksResource,s=a.instantiationService.get(w);await s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]})));const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await a.sync(),await t.sync(await e.getResourceManifest()),s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch"}]}))),await a.sync(),c.writeFile(o,l.fromString(JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]}))),await t.sync(await e.getResourceManifest());const r=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch 2"}]});await t.accept(t.conflicts.conflicts[0].previewResource,r),await t.apply(!1),i.deepStrictEqual(t.status,d.Idle);const g=await t.getLastSyncUserData(),m=await t.getRemoteUserData(null);i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),r),i.strictEqual(y(m.syncData.content,e.instantiationService.get(f)),r),i.strictEqual((await c.readFile(o)).value.toString(),r)})}),test("when tasks file has moved forward locally and remotely - accept remote",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=a.instantiationService.get(u).defaultProfile.tasksResource,s=a.instantiationService.get(w);await s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]})));const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await a.sync(),await t.sync(await e.getResourceManifest());const r=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch"}]});s.writeFile(n,l.fromString(r)),await a.sync(),c.writeFile(o,l.fromString(JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]}))),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.HasConflicts),await t.accept(t.conflicts.conflicts[0].remoteResource),await t.apply(!1),i.deepStrictEqual(t.status,d.Idle);const g=await t.getLastSyncUserData(),m=await t.getRemoteUserData(null);i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),r),i.strictEqual(y(m.syncData.content,e.instantiationService.get(f)),r),i.strictEqual((await c.readFile(o)).value.toString(),r)})}),test("when tasks file has moved forward locally and remotely - accept local",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=a.instantiationService.get(u).defaultProfile.tasksResource,s=a.instantiationService.get(w);await s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]})));const c=e.instantiationService.get(w),o=e.instantiationService.get(u).defaultProfile.tasksResource;await a.sync(),await t.sync(await e.getResourceManifest()),s.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch"}]}))),await a.sync();const r=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});c.writeFile(o,l.fromString(r)),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.HasConflicts),await t.accept(t.conflicts.conflicts[0].localResource),await t.apply(!1),i.deepStrictEqual(t.status,d.Idle);const g=await t.getLastSyncUserData(),m=await t.getRemoteUserData(null);i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),r),i.strictEqual(y(m.syncData.content,e.instantiationService.get(f)),r),i.strictEqual((await c.readFile(o)).value.toString(),r)})}),test("when tasks file was removed in one client",async()=>{await v({},async()=>{const a=e.instantiationService.get(w),n=e.instantiationService.get(u).defaultProfile.tasksResource;await a.writeFile(n,l.fromString(JSON.stringify({version:"2.0.0",tasks:[]}))),await t.sync(await e.getResourceManifest());const s=p.add(new k(S));await s.setUp(!0),await s.sync();const c=s.instantiationService.get(u).defaultProfile.tasksResource;s.instantiationService.get(w).del(c),await s.sync(),await t.sync(await e.getResourceManifest()),i.deepStrictEqual(t.status,d.Idle);const r=await t.getLastSyncUserData(),g=await t.getRemoteUserData(null);i.strictEqual(y(r.syncData.content,e.instantiationService.get(f)),null),i.strictEqual(y(g.syncData.content,e.instantiationService.get(f)),null),i.strictEqual(await a.exists(n),!1)})}),test("when tasks file is created after first sync",async()=>{await v({},async()=>{const a=e.instantiationService.get(w),n=e.instantiationService.get(u).defaultProfile.tasksResource;await t.sync(await e.getResourceManifest());const s=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});await a.createFile(n,l.fromString(s));let c=await t.getLastSyncUserData();const o=await e.getResourceManifest();S.reset(),await t.sync(o),i.deepStrictEqual(S.requests,[{type:"POST",url:`${S.url}/v1/resource/${t.resource}`,headers:{"If-Match":c?.ref}}]),c=await t.getLastSyncUserData();const r=await t.getRemoteUserData(null);i.deepStrictEqual(c.ref,r.ref),i.deepStrictEqual(c.syncData,r.syncData),i.strictEqual(y(c.syncData.content,e.instantiationService.get(f)),s)})}),test("apply remote when tasks file does not exist",async()=>{await v({},async()=>{const a=e.instantiationService.get(w),n=e.instantiationService.get(u).defaultProfile.tasksResource;await a.exists(n)&&await a.del(n);const s=await t.preview(await e.getResourceManifest(),{});S.reset();const c=await t.resolveContent(s.resourcePreviews[0].remoteResource);await t.accept(s.resourcePreviews[0].remoteResource,c),await t.apply(!1),i.deepStrictEqual(S.requests,[])})}),test("sync profile tasks",async()=>{await v({},async()=>{const a=p.add(new k(S));await a.setUp(!0);const n=await a.instantiationService.get(u).createNamedProfile("profile1"),s=JSON.stringify({version:"2.0.0",tasks:[{type:"npm",script:"watch",label:"Watch"}]});await a.instantiationService.get(w).createFile(n.tasksResource,l.fromString(s)),await a.sync(),await e.sync();const c=e.instantiationService.get(u).profiles.find(r=>r.id===n.id),o=(await e.instantiationService.get(w).readFile(c.tasksResource)).value.toString();i.strictEqual(o,s)})})});
