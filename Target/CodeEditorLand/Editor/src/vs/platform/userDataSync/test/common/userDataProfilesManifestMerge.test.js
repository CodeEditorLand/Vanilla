import l from"assert";import{URI as e}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../base/test/common/utils.js";import{toUserDataProfile as i}from"../../../userDataProfile/common/userDataProfile.js";import{merge as r}from"../../common/userDataProfilesManifestMerge.js";import"../../common/userDataSync.js";suite("UserDataProfilesManifestMerge",()=>{d(),test("merge returns local profiles if remote does not exist",()=>{const c=[i("1","1",e.file("1"),e.file("cache")),i("2","2",e.file("2"),e.file("cache"))],a=r(c,null,null,[]);l.deepStrictEqual(a.local.added,[]),l.deepStrictEqual(a.local.removed,[]),l.deepStrictEqual(a.local.updated,[]),l.deepStrictEqual(a.remote?.added,c),l.deepStrictEqual(a.remote?.updated,[]),l.deepStrictEqual(a.remote?.removed,[])}),test("merge returns local profiles if remote does not exist with ignored profiles",()=>{const c=[i("1","1",e.file("1"),e.file("cache")),i("2","2",e.file("2"),e.file("cache"))],a=r(c,null,null,["2"]);l.deepStrictEqual(a.local.added,[]),l.deepStrictEqual(a.local.removed,[]),l.deepStrictEqual(a.local.updated,[]),l.deepStrictEqual(a.remote?.added,[c[0]]),l.deepStrictEqual(a.remote?.updated,[]),l.deepStrictEqual(a.remote?.removed,[])}),test("merge local and remote profiles when there is no base",()=>{const c=[i("1","1",e.file("1"),e.file("cache")),i("2","2",e.file("2"),e.file("cache"))],a=[{id:"1",name:"changed",collection:"1"},{id:"3",name:"3",collection:"3"}],o=r(c,a,null,[]);l.deepStrictEqual(o.local.added,[a[1]]),l.deepStrictEqual(o.local.removed,[]),l.deepStrictEqual(o.local.updated,[a[0]]),l.deepStrictEqual(o.remote?.added,[c[1]]),l.deepStrictEqual(o.remote?.updated,[]),l.deepStrictEqual(o.remote?.removed,[])}),test("merge local and remote profiles when there is base",()=>{const c=[i("1","changed 1",e.file("1"),e.file("cache")),i("3","3",e.file("3"),e.file("cache")),i("4","changed local",e.file("4"),e.file("cache")),i("5","5",e.file("5"),e.file("cache")),i("6","6",e.file("6"),e.file("cache")),i("8","8",e.file("8"),e.file("cache")),i("10","10",e.file("8"),e.file("cache"),{useDefaultFlags:{tasks:!0}}),i("11","11",e.file("1"),e.file("cache"),{useDefaultFlags:{keybindings:!0}})],a=[{id:"1",name:"1",collection:"1"},{id:"2",name:"2",collection:"2"},{id:"3",name:"3",collection:"3"},{id:"4",name:"4",collection:"4"},{id:"5",name:"5",collection:"5"},{id:"6",name:"6",collection:"6"},{id:"10",name:"10",collection:"10",useDefaultFlags:{tasks:!0}},{id:"11",name:"11",collection:"11"}],o=[{id:"1",name:"1",collection:"1"},{id:"2",name:"2",collection:"2"},{id:"3",name:"3",collection:"3",shortName:"short 3"},{id:"4",name:"changed remote",collection:"4"},{id:"5",name:"5",collection:"5"},{id:"7",name:"7",collection:"7"},{id:"9",name:"9",collection:"9",useDefaultFlags:{snippets:!0}},{id:"10",name:"10",collection:"10"},{id:"11",name:"11",collection:"11"}],t=r(c,o,a,[]);l.deepStrictEqual(t.local.added,[o[5],o[6]]),l.deepStrictEqual(t.local.removed,[c[4]]),l.deepStrictEqual(t.local.updated,[o[2],o[3],o[7]]),l.deepStrictEqual(t.remote?.added,[c[5]]),l.deepStrictEqual(t.remote?.updated,[c[0],c[7]]),l.deepStrictEqual(t.remote?.removed,[o[1]])}),test("merge local and remote profiles when there is base with ignored profiles",()=>{const c=[i("1","changed 1",e.file("1"),e.file("cache")),i("3","3",e.file("3"),e.file("cache")),i("4","changed local",e.file("4"),e.file("cache")),i("5","5",e.file("5"),e.file("cache")),i("6","6",e.file("6"),e.file("cache")),i("8","8",e.file("8"),e.file("cache"))],a=[{id:"1",name:"1",collection:"1"},{id:"2",name:"2",collection:"2"},{id:"3",name:"3",collection:"3"},{id:"4",name:"4",collection:"4"},{id:"5",name:"5",collection:"5"},{id:"6",name:"6",collection:"6"}],o=[{id:"1",name:"1",collection:"1"},{id:"2",name:"2",collection:"2"},{id:"3",name:"changed 3",collection:"3"},{id:"4",name:"changed remote",collection:"4"},{id:"5",name:"5",collection:"5"},{id:"7",name:"7",collection:"7"}],t=r(c,o,a,["4","8"]);l.deepStrictEqual(t.local.added,[o[5]]),l.deepStrictEqual(t.local.removed,[c[4]]),l.deepStrictEqual(t.local.updated,[o[2]]),l.deepStrictEqual(t.remote?.added,[]),l.deepStrictEqual(t.remote?.updated,[c[0]]),l.deepStrictEqual(t.remote?.removed,[o[1]])}),test("merge when there are no remote changes",()=>{const c=[i("1","1",e.file("1"),e.file("cache"))],a=[{id:"1",name:"1",collection:"1"}],o=[{id:"1",name:"name changed",collection:"1"}],t=r(c,o,a,[]);l.deepStrictEqual(t.local.added,[]),l.deepStrictEqual(t.local.removed,[]),l.deepStrictEqual(t.local.updated,[o[0]]),l.strictEqual(t.remote,null)}),test("merge when there are no local and remote changes",()=>{const c=[i("1","1",e.file("1"),e.file("cache"))],t=r(c,[{id:"1",name:"1",collection:"1"}],[{id:"1",name:"1",collection:"1"}],[]);l.deepStrictEqual(t.local.added,[]),l.deepStrictEqual(t.local.removed,[]),l.deepStrictEqual(t.local.updated,[]),l.strictEqual(t.remote,null)}),test("merge when profile is removed locally, but not exists in remote",()=>{const c=[i("1","1",e.file("1"),e.file("cache"))],a=[{id:"1",name:"1",collection:"1"},{id:"2",name:"2",collection:"2"}],o=[{id:"1",name:"3",collection:"1"}],t=r(c,o,a,[]);l.deepStrictEqual(t.local.added,[]),l.deepStrictEqual(t.local.removed,[]),l.deepStrictEqual(t.local.updated,o),l.strictEqual(t.remote,null)})});
