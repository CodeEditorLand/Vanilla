import c from"assert";import{VSBuffer as S}from"../../../../base/common/buffer.js";import{Event as h}from"../../../../base/common/event.js";import{joinPath as E}from"../../../../base/common/resources.js";import{runWithFakedTimers as o}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as U}from"../../../../base/test/common/utils.js";import{IEnvironmentService as I}from"../../../environment/common/environment.js";import{IFileService as $}from"../../../files/common/files.js";import{IUserDataProfilesService as q}from"../../../userDataProfile/common/userDataProfile.js";import{UserDataAutoSyncService as b}from"../../common/userDataAutoSyncService.js";import{IUserDataSyncService as y,SyncResource as p,UserDataAutoSyncError as v,UserDataSyncErrorCode as w,UserDataSyncStoreError as O}from"../../common/userDataSync.js";import{IUserDataSyncMachinesService as g}from"../../common/userDataSyncMachines.js";import{UserDataSyncClient as i,UserDataSyncTestServer as u}from"./userDataSyncClient.js";class l extends b{startAutoSync(){return!1}getSyncTriggerDelayTime(){return 50}sync(){return this.triggerSync(["sync"],!1,!1)}}suite("UserDataAutoSyncService",()=>{const s=U();test("test auto sync with sync resource change triggers sync",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await(await t.instantiationService.get(y).createSyncTask(null)).run(),e.reset(),await s.add(t.instantiationService.createInstance(l)).triggerSync([p.Settings],!1,!1);const r=e.requests.filter(n=>!n.url.startsWith(`${e.url}/v1/resource/machines`));c.deepStrictEqual(r,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{}}])})}),test("test auto sync with sync resource change triggers sync for every change",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await(await t.instantiationService.get(y).createSyncTask(null)).run(),e.reset();const a=s.add(t.instantiationService.createInstance(l));for(let n=0;n<2;n++)await a.triggerSync([p.Settings],!1,!1);const r=e.requests.filter(n=>!n.url.startsWith(`${e.url}/v1/resource/machines`));c.deepStrictEqual(r,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{}},{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}}])})}),test("test auto sync with non sync resource change triggers sync",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await(await t.instantiationService.get(y).createSyncTask(null)).run(),e.reset(),await s.add(t.instantiationService.createInstance(l)).triggerSync(["windowFocus"],!0,!1);const r=e.requests.filter(n=>!n.url.startsWith(`${e.url}/v1/resource/machines`));c.deepStrictEqual(r,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{}}])})}),test("test auto sync with non sync resource change does not trigger continuous syncs",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await(await t.instantiationService.get(y).createSyncTask(null)).run(),e.reset();const a=s.add(t.instantiationService.createInstance(l));for(let n=0;n<2;n++)await a.triggerSync(["windowFocus"],!0,!1);const r=e.requests.filter(n=>!n.url.startsWith(`${e.url}/v1/resource/machines`));c.deepStrictEqual(r,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{}}])})}),test("test first auto sync requests",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await s.add(t.instantiationService.createInstance(l)).sync(),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{}},{type:"GET",url:`${e.url}/v1/resource/machines/latest`,headers:{}},{type:"GET",url:`${e.url}/v1/resource/settings/latest`,headers:{}},{type:"POST",url:`${e.url}/v1/resource/settings`,headers:{"If-Match":"0"}},{type:"GET",url:`${e.url}/v1/resource/keybindings/latest`,headers:{}},{type:"POST",url:`${e.url}/v1/resource/keybindings`,headers:{"If-Match":"0"}},{type:"GET",url:`${e.url}/v1/resource/snippets/latest`,headers:{}},{type:"POST",url:`${e.url}/v1/resource/snippets`,headers:{"If-Match":"0"}},{type:"GET",url:`${e.url}/v1/resource/tasks/latest`,headers:{}},{type:"POST",url:`${e.url}/v1/resource/tasks`,headers:{"If-Match":"0"}},{type:"GET",url:`${e.url}/v1/resource/globalState/latest`,headers:{}},{type:"POST",url:`${e.url}/v1/resource/globalState`,headers:{"If-Match":"0"}},{type:"GET",url:`${e.url}/v1/resource/extensions/latest`,headers:{}},{type:"GET",url:`${e.url}/v1/resource/profiles/latest`,headers:{}},{type:"GET",url:`${e.url}/v1/manifest`,headers:{}},{type:"POST",url:`${e.url}/v1/resource/machines`,headers:{"If-Match":"0"}}])})}),test("test further auto sync requests without changes",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l));await a.sync(),e.reset(),await a.sync(),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}}])})}),test("test further auto sync requests with changes",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l));await a.sync(),e.reset();const r=t.instantiationService.get($),n=t.instantiationService.get(I),d=t.instantiationService.get(q);await r.writeFile(d.defaultProfile.settingsResource,S.fromString(JSON.stringify({"editor.fontSize":14}))),await r.writeFile(d.defaultProfile.keybindingsResource,S.fromString(JSON.stringify([{command:"abcd",key:"cmd+c"}]))),await r.writeFile(E(d.defaultProfile.snippetsHome,"html.json"),S.fromString("{}")),await r.writeFile(n.argvResource,S.fromString(JSON.stringify({locale:"de"}))),await a.sync(),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}},{type:"POST",url:`${e.url}/v1/resource/settings`,headers:{"If-Match":"1"}},{type:"POST",url:`${e.url}/v1/resource/keybindings`,headers:{"If-Match":"1"}},{type:"POST",url:`${e.url}/v1/resource/snippets`,headers:{"If-Match":"1"}},{type:"POST",url:`${e.url}/v1/resource/globalState`,headers:{"If-Match":"1"}}])})}),test("test auto sync send execution id header",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l));await a.sync(),e.reset(),await a.sync();for(const r of e.requestsWithAllHeaders){const n=r.headers&&r.headers["X-Execution-Id"]&&r.headers["X-Execution-Id"].length>0;r.url.startsWith(`${e.url}/v1/resource/machines`)?c.ok(!n,`Should not have execution header: ${r.url}`):c.ok(n,`Should have execution header: ${r.url}`)}})}),test("test delete on one client throws turned off error on other client while syncing",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await(await t.instantiationService.get(y).createSyncTask(null)).run();const a=s.add(new i(e));await a.setUp();const r=s.add(a.instantiationService.createInstance(l));await r.sync(),await t.instantiationService.get(y).reset(),e.reset();const n=h.toPromise(r.onError);await r.sync();const d=await n;c.ok(d instanceof v),c.deepStrictEqual(d.code,w.TurnedOff),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}},{type:"GET",url:`${e.url}/v1/resource/machines/latest`,headers:{"If-None-Match":"1"}}])})}),test("test disabling the machine turns off sync",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l));await a.sync();const r=t.instantiationService.get(g),d=(await r.getMachines()).find(T=>T.isCurrent);await r.setEnablements([[d.id,!1]]),e.reset();const m=h.toPromise(a.onError);await a.sync();const f=await m;c.ok(f instanceof v),c.deepStrictEqual(f.code,w.TurnedOff),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}},{type:"GET",url:`${e.url}/v1/resource/machines/latest`,headers:{"If-None-Match":"2"}},{type:"POST",url:`${e.url}/v1/resource/machines`,headers:{"If-Match":"2"}}])})}),test("test removing the machine adds machine back",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l));await a.sync(),await t.instantiationService.get(g).removeCurrentMachine(),e.reset(),await a.sync(),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}},{type:"POST",url:`${e.url}/v1/resource/machines`,headers:{"If-Match":"2"}}])})}),test("test creating new session from one client throws session expired error on another client while syncing",async()=>{await o({},async()=>{const e=new u,t=s.add(new i(e));await t.setUp(),await(await t.instantiationService.get(y).createSyncTask(null)).run();const a=s.add(new i(e));await a.setUp();const r=s.add(a.instantiationService.createInstance(l));await r.sync(),await t.instantiationService.get(y).reset(),await(await t.instantiationService.get(y).createSyncTask(null)).run(),e.reset();const n=h.toPromise(r.onError);await r.sync();const d=await n;c.ok(d instanceof v),c.deepStrictEqual(d.code,w.SessionExpired),c.deepStrictEqual(e.requests,[{type:"GET",url:`${e.url}/v1/manifest`,headers:{"If-None-Match":"1"}},{type:"GET",url:`${e.url}/v1/resource/machines/latest`,headers:{"If-None-Match":"1"}}])})}),test("test rate limit on server",async()=>{await o({},async()=>{const e=new u(5),t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l)),r=h.toPromise(a.onError);for(;e.requests.length<5;)await a.sync();const n=await r;c.ok(n instanceof O),c.deepStrictEqual(n.code,w.TooManyRequests)})}),test("test auto sync is suspended when server donot accepts requests",async()=>{await o({},async()=>{const e=new u(5,1),t=s.add(new i(e));await t.setUp();const a=s.add(t.instantiationService.createInstance(l));for(;e.requests.length<5;)await a.sync();e.reset(),await a.sync(),c.deepStrictEqual(e.requests,[])})}),test("test cache control header with no cache is sent when triggered with disable cache option",async()=>{await o({},async()=>{const e=new u(5,1),t=s.add(new i(e));await t.setUp(),await s.add(t.instantiationService.createInstance(l)).triggerSync(["some reason"],!0,!0),c.strictEqual(e.requestsWithAllHeaders[0].headers["Cache-Control"],"no-cache")})}),test("test cache control header is not sent when triggered without disable cache option",async()=>{await o({},async()=>{const e=new u(5,1),t=s.add(new i(e));await t.setUp(),await s.add(t.instantiationService.createInstance(l)).triggerSync(["some reason"],!0,!1),c.strictEqual(e.requestsWithAllHeaders[0].headers["Cache-Control"],void 0)})})});
