import{Color as i}from"../../../../base/common/color.js";import{Emitter as t}from"../../../../base/common/event.js";import"../../common/iconRegistry.js";import{ColorScheme as h}from"../../common/theme.js";import"../../common/themeService.js";class m{constructor(e={},n=h.DARK,o=!1){this.colors=e;this.type=n;this.semanticHighlighting=o}label="test";getColor(e,n){const o=this.colors[e];if(o)return i.fromHex(o)}defines(e){throw new Error("Method not implemented.")}getTokenStyleMetadata(e,n,o){}get tokenColorMap(){return[]}}class c{hasFileIcons=!1;hasFolderIcons=!1;hidesExplorerArrows=!1}class l{getIcon(e){}}class F{_colorTheme;_fileIconTheme;_productIconTheme;_onThemeChange=new t;_onFileIconThemeChange=new t;_onProductIconThemeChange=new t;constructor(e=new m,n=new c,o=new l){this._colorTheme=e,this._fileIconTheme=n,this._productIconTheme=o}getColorTheme(){return this._colorTheme}setTheme(e){this._colorTheme=e,this.fireThemeChange()}fireThemeChange(){this._onThemeChange.fire(this._colorTheme)}get onDidColorThemeChange(){return this._onThemeChange.event}getFileIconTheme(){return this._fileIconTheme}get onDidFileIconThemeChange(){return this._onFileIconThemeChange.event}getProductIconTheme(){return this._productIconTheme}get onDidProductIconThemeChange(){return this._onProductIconThemeChange.event}}export{m as TestColorTheme,F as TestThemeService};
