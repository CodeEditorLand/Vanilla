{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/server-main.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-check\n'use strict';\n\n/**\n * @import { INLSConfiguration } from './vs/nls'\n * @import { IServerAPI } from './vs/server/node/remoteExtensionHostAgentServer'\n */\n\n// ESM-comment-begin\n// // Keep bootstrap-amd.js from redefining 'fs'.\n// delete process.env['ELECTRON_RUN_AS_NODE'];\n//\n// const path = require('path');\n// const http = require('http');\n// const os = require('os');\n// const readline = require('readline');\n// const performance = require('perf_hooks').performance;\n// const bootstrapNode = require('./bootstrap-node');\n// const bootstrapAmd = require('./bootstrap-amd');\n// const { resolveNLSConfiguration } = require('./vs/base/node/nls');\n// const product = require('./bootstrap-meta').product;\n// const perf = require(`./vs/base/common/performance`);\n// const minimist = require('minimist');\n// ESM-comment-end\n// ESM-uncomment-begin\nimport './bootstrap-server.js'; // this MUST come before other imports as it changes global state\nimport * as path from 'path';\nimport * as http from 'http';\nimport * as os from 'os';\nimport * as readline from 'readline';\nimport { performance } from 'perf_hooks';\nimport { fileURLToPath } from 'url';\nimport minimist from 'minimist';\nimport * as bootstrapNode from './bootstrap-node.js';\nimport * as bootstrapAmd from './bootstrap-amd.js';\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\nimport { product } from './bootstrap-meta.js';\nimport * as perf from './vs/base/common/performance.js';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n// ESM-uncomment-end\n\nperf.mark('code/server/start');\n// @ts-ignore\nglobal.vscodeServerStartTime = performance.now();\n\nasync function start() {\n\n\t// Do a quick parse to determine if a server or the cli needs to be started\n\tconst parsedArgs = minimist(process.argv.slice(2), {\n\t\tboolean: ['start-server', 'list-extensions', 'print-ip-address', 'help', 'version', 'accept-server-license-terms', 'update-extensions'],\n\t\tstring: ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'locate-extension', 'socket-path', 'host', 'port', 'compatibility'],\n\t\talias: { help: 'h', version: 'v' }\n\t});\n\t['host', 'port', 'accept-server-license-terms'].forEach(e => {\n\t\tif (!parsedArgs[e]) {\n\t\t\tconst envValue = process.env[`VSCODE_SERVER_${e.toUpperCase().replace('-', '_')}`];\n\t\t\tif (envValue) {\n\t\t\t\tparsedArgs[e] = envValue;\n\t\t\t}\n\t\t}\n\t});\n\n\tconst extensionLookupArgs = ['list-extensions', 'locate-extension'];\n\tconst extensionInstallArgs = ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'update-extensions'];\n\n\tconst shouldSpawnCli = parsedArgs.help || parsedArgs.version || extensionLookupArgs.some(a => !!parsedArgs[a]) || (extensionInstallArgs.some(a => !!parsedArgs[a]) && !parsedArgs['start-server']);\n\n\tconst nlsConfiguration = await resolveNLSConfiguration({ userLocale: 'en', osLocale: 'en', commit: product.commit, userDataPath: '', nlsMetadataPath: __dirname });\n\n\tif (shouldSpawnCli) {\n\t\tloadCode(nlsConfiguration).then((mod) => {\n\t\t\tmod.spawnCli();\n\t\t});\n\t\treturn;\n\t}\n\n\t/** @type {IServerAPI | null} */\n\tlet _remoteExtensionHostAgentServer = null;\n\t/** @type {Promise<IServerAPI> | null} */\n\tlet _remoteExtensionHostAgentServerPromise = null;\n\t/** @returns {Promise<IServerAPI>} */\n\tconst getRemoteExtensionHostAgentServer = () => {\n\t\tif (!_remoteExtensionHostAgentServerPromise) {\n\t\t\t_remoteExtensionHostAgentServerPromise = loadCode(nlsConfiguration).then(async (mod) => {\n\t\t\t\tconst server = await mod.createServer(address);\n\t\t\t\t_remoteExtensionHostAgentServer = server;\n\t\t\t\treturn server;\n\t\t\t});\n\t\t}\n\t\treturn _remoteExtensionHostAgentServerPromise;\n\t};\n\n\tif (Array.isArray(product.serverLicense) && product.serverLicense.length) {\n\t\tconsole.log(product.serverLicense.join('\\n'));\n\t\tif (product.serverLicensePrompt && parsedArgs['accept-server-license-terms'] !== true) {\n\t\t\tif (hasStdinWithoutTty()) {\n\t\t\t\tconsole.log('To accept the license terms, start the server with --accept-server-license-terms');\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst accept = await prompt(product.serverLicensePrompt);\n\t\t\t\tif (!accept) {\n\t\t\t\t\tprocess.exit(1);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t}\n\t}\n\n\tlet firstRequest = true;\n\tlet firstWebSocket = true;\n\n\t/** @type {string | import('net').AddressInfo | null} */\n\tlet address = null;\n\tconst server = http.createServer(async (req, res) => {\n\t\tif (firstRequest) {\n\t\t\tfirstRequest = false;\n\t\t\tperf.mark('code/server/firstRequest');\n\t\t}\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\n\t\treturn remoteExtensionHostAgentServer.handleRequest(req, res);\n\t});\n\tserver.on('upgrade', async (req, socket) => {\n\t\tif (firstWebSocket) {\n\t\t\tfirstWebSocket = false;\n\t\t\tperf.mark('code/server/firstWebSocket');\n\t\t}\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\n\t\t// @ts-ignore\n\t\treturn remoteExtensionHostAgentServer.handleUpgrade(req, socket);\n\t});\n\tserver.on('error', async (err) => {\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\n\t\treturn remoteExtensionHostAgentServer.handleServerError(err);\n\t});\n\n\tconst host = sanitizeStringArg(parsedArgs['host']) || (parsedArgs['compatibility'] !== '1.63' ? 'localhost' : undefined);\n\tconst nodeListenOptions = (\n\t\tparsedArgs['socket-path']\n\t\t\t? { path: sanitizeStringArg(parsedArgs['socket-path']) }\n\t\t\t: { host, port: await parsePort(host, sanitizeStringArg(parsedArgs['port'])) }\n\t);\n\tserver.listen(nodeListenOptions, async () => {\n\t\tlet output = Array.isArray(product.serverGreeting) && product.serverGreeting.length ? `\\n\\n${product.serverGreeting.join('\\n')}\\n\\n` : ``;\n\n\t\tif (typeof nodeListenOptions.port === 'number' && parsedArgs['print-ip-address']) {\n\t\t\tconst ifaces = os.networkInterfaces();\n\t\t\tObject.keys(ifaces).forEach(function (ifname) {\n\t\t\t\tifaces[ifname]?.forEach(function (iface) {\n\t\t\t\t\tif (!iface.internal && iface.family === 'IPv4') {\n\t\t\t\t\t\toutput += `IP Address: ${iface.address}\\n`;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\taddress = server.address();\n\t\tif (address === null) {\n\t\t\tthrow new Error('Unexpected server address');\n\t\t}\n\n\t\toutput += `Server bound to ${typeof address === 'string' ? address : `${address.address}:${address.port} (${address.family})`}\\n`;\n\t\t// Do not change this line. VS Code looks for this in the output.\n\t\toutput += `Extension host agent listening on ${typeof address === 'string' ? address : address.port}\\n`;\n\t\tconsole.log(output);\n\n\t\tperf.mark('code/server/started');\n\t\t// @ts-ignore\n\t\tglobal.vscodeServerListenTime = performance.now();\n\n\t\tawait getRemoteExtensionHostAgentServer();\n\t});\n\n\tprocess.on('exit', () => {\n\t\tserver.close();\n\t\tif (_remoteExtensionHostAgentServer) {\n\t\t\t_remoteExtensionHostAgentServer.dispose();\n\t\t}\n\t});\n}\n/**\n * @param {any} val\n * @returns {string | undefined}\n */\nfunction sanitizeStringArg(val) {\n\tif (Array.isArray(val)) { // if an argument is passed multiple times, minimist creates an array\n\t\tval = val.pop(); // take the last item\n\t}\n\treturn typeof val === 'string' ? val : undefined;\n}\n\n/**\n * If `--port` is specified and describes a single port, connect to that port.\n *\n * If `--port`describes a port range\n * then find a free port in that range. Throw error if no\n * free port available in range.\n *\n * In absence of specified ports, connect to port 8000.\n * @param {string | undefined} host\n * @param {string | undefined} strPort\n * @returns {Promise<number>}\n * @throws\n */\nasync function parsePort(host, strPort) {\n\tif (strPort) {\n\t\tlet range;\n\t\tif (strPort.match(/^\\d+$/)) {\n\t\t\treturn parseInt(strPort, 10);\n\t\t} else if (range = parseRange(strPort)) {\n\t\t\tconst port = await findFreePort(host, range.start, range.end);\n\t\t\tif (port !== undefined) {\n\t\t\t\treturn port;\n\t\t\t}\n\t\t\t// Remote-SSH extension relies on this exact port error message, treat as an API\n\t\t\tconsole.warn(`--port: Could not find free port in range: ${range.start} - ${range.end} (inclusive).`);\n\t\t\tprocess.exit(1);\n\n\t\t} else {\n\t\t\tconsole.warn(`--port \"${strPort}\" is not a valid number or range. Ranges must be in the form 'from-to' with 'from' an integer larger than 0 and not larger than 'end'.`);\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\treturn 8000;\n}\n\n/**\n * @param {string} strRange\n * @returns {{ start: number; end: number } | undefined}\n */\nfunction parseRange(strRange) {\n\tconst match = strRange.match(/^(\\d+)-(\\d+)$/);\n\tif (match) {\n\t\tconst start = parseInt(match[1], 10), end = parseInt(match[2], 10);\n\t\tif (start > 0 && start <= end && end <= 65535) {\n\t\t\treturn { start, end };\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Starting at the `start` port, look for a free port incrementing\n * by 1 until `end` inclusive. If no free port is found, undefined is returned.\n *\n * @param {string | undefined} host\n * @param {number} start\n * @param {number} end\n * @returns {Promise<number | undefined>}\n * @throws\n */\nasync function findFreePort(host, start, end) {\n\tconst testPort = (/** @type {number} */ port) => {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst server = http.createServer();\n\t\t\tserver.listen(port, host, () => {\n\t\t\t\tserver.close();\n\t\t\t\tresolve(true);\n\t\t\t}).on('error', () => {\n\t\t\t\tresolve(false);\n\t\t\t});\n\t\t});\n\t};\n\tfor (let port = start; port <= end; port++) {\n\t\tif (await testPort(port)) {\n\t\t\treturn port;\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * @param {INLSConfiguration} nlsConfiguration\n * @returns { Promise<typeof import('./vs/server/node/server.main')> }\n */\nfunction loadCode(nlsConfiguration) {\n\treturn new Promise((resolve, reject) => {\n\n\t\t/** @type {INLSConfiguration} */\n\t\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfiguration); // required for `bootstrap-amd` to pick up NLS messages\n\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\n\t\t// We would normally install a SIGPIPE listener in bootstrap-node.js\n\t\t// But in certain situations, the console itself can be in a broken pipe state\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\n\t\tprocess.env['VSCODE_HANDLES_SIGPIPE'] = 'true';\n\n\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t// When running out of sources, we need to load node modules from remote/node_modules,\n\t\t\t// which are compiled against nodejs, not electron\n\t\t\tprocess.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] || path.join(__dirname, '..', 'remote', 'node_modules');\n\t\t\tbootstrapNode.devInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\n\t\t} else {\n\t\t\tdelete process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'];\n\t\t}\n\t\tbootstrapAmd.load('vs/server/node/server.main', resolve, reject);\n\t});\n}\n\nfunction hasStdinWithoutTty() {\n\ttry {\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\n\t} catch (error) {\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\n\t}\n\treturn false;\n}\n\n/**\n * @param {string} question\n * @returns { Promise<boolean> }\n */\nfunction prompt(question) {\n\tconst rl = readline.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stdout\n\t});\n\treturn new Promise((resolve, reject) => {\n\t\trl.question(question + ' ', async function (data) {\n\t\t\trl.close();\n\t\t\tconst str = data.toString().trim().toLowerCase();\n\t\t\tif (str === '' || str === 'y' || str === 'yes') {\n\t\t\t\tresolve(true);\n\t\t\t} else if (str === 'n' || str === 'no') {\n\t\t\t\tresolve(false);\n\t\t\t} else {\n\t\t\t\tprocess.stdout.write('\\nInvalid Response. Answer either yes (y, yes) or no (n, no)\\n');\n\t\t\t\tresolve(await prompt(question));\n\t\t\t}\n\t\t});\n\t});\n}\n\nstart();\n"],
  "mappings": ";;AA8BA,OAAO;AACP,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,QAAQ;AACpB,YAAY,cAAc;AAC1B,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,OAAO,cAAc;AACrB,YAAY,mBAAmB;AAC/B,YAAY,kBAAkB;AAC9B,SAAS,+BAA+B;AACxC,SAAS,eAAe;AACxB,YAAY,UAAU;AAEtB,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAG7D,KAAK,KAAK,mBAAmB;AAE7B,OAAO,wBAAwB,YAAY,IAAI;AAE/C,eAAe,QAAQ;AAGtB,QAAM,aAAa,SAAS,QAAQ,KAAK,MAAM,CAAC,GAAG;AAAA,IAClD,SAAS,CAAC,gBAAgB,mBAAmB,oBAAoB,QAAQ,WAAW,+BAA+B,mBAAmB;AAAA,IACtI,QAAQ,CAAC,qBAAqB,6BAA6B,uBAAuB,oBAAoB,eAAe,QAAQ,QAAQ,eAAe;AAAA,IACpJ,OAAO,EAAE,MAAM,KAAK,SAAS,IAAI;AAAA,EAClC,CAAC;AACD,GAAC,QAAQ,QAAQ,6BAA6B,EAAE,QAAQ,OAAK;AAC5D,QAAI,CAAC,WAAW,CAAC,GAAG;AACnB,YAAM,WAAW,QAAQ,IAAI,iBAAiB,EAAE,YAAY,EAAE,QAAQ,KAAK,GAAG,CAAC,EAAE;AACjF,UAAI,UAAU;AACb,mBAAW,CAAC,IAAI;AAAA,MACjB;AAAA,IACD;AAAA,EACD,CAAC;AAED,QAAM,sBAAsB,CAAC,mBAAmB,kBAAkB;AAClE,QAAM,uBAAuB,CAAC,qBAAqB,6BAA6B,uBAAuB,mBAAmB;AAE1H,QAAM,iBAAiB,WAAW,QAAQ,WAAW,WAAW,oBAAoB,KAAK,OAAK,CAAC,CAAC,WAAW,CAAC,CAAC,KAAM,qBAAqB,KAAK,OAAK,CAAC,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,WAAW,cAAc;AAEhM,QAAM,mBAAmB,MAAM,wBAAwB,EAAE,YAAY,MAAM,UAAU,MAAM,QAAQ,QAAQ,QAAQ,cAAc,IAAI,iBAAiB,UAAU,CAAC;AAEjK,MAAI,gBAAgB;AACnB,aAAS,gBAAgB,EAAE,KAAK,CAAC,QAAQ;AACxC,UAAI,SAAS;AAAA,IACd,CAAC;AACD;AAAA,EACD;AAGA,MAAI,kCAAkC;AAEtC,MAAI,yCAAyC;AAE7C,QAAM,oCAAoC,6BAAM;AAC/C,QAAI,CAAC,wCAAwC;AAC5C,+CAAyC,SAAS,gBAAgB,EAAE,KAAK,OAAO,QAAQ;AACvF,cAAMA,UAAS,MAAM,IAAI,aAAa,OAAO;AAC7C,0CAAkCA;AAClC,eAAOA;AAAA,MACR,CAAC;AAAA,IACF;AACA,WAAO;AAAA,EACR,GAT0C;AAW1C,MAAI,MAAM,QAAQ,QAAQ,aAAa,KAAK,QAAQ,cAAc,QAAQ;AACzE,YAAQ,IAAI,QAAQ,cAAc,KAAK,IAAI,CAAC;AAC5C,QAAI,QAAQ,uBAAuB,WAAW,6BAA6B,MAAM,MAAM;AACtF,UAAI,mBAAmB,GAAG;AACzB,gBAAQ,IAAI,kFAAkF;AAC9F,gBAAQ,KAAK,CAAC;AAAA,MACf;AACA,UAAI;AACH,cAAM,SAAS,MAAM,OAAO,QAAQ,mBAAmB;AACvD,YAAI,CAAC,QAAQ;AACZ,kBAAQ,KAAK,CAAC;AAAA,QACf;AAAA,MACD,SAAS,GAAG;AACX,gBAAQ,IAAI,CAAC;AACb,gBAAQ,KAAK,CAAC;AAAA,MACf;AAAA,IACD;AAAA,EACD;AAEA,MAAI,eAAe;AACnB,MAAI,iBAAiB;AAGrB,MAAI,UAAU;AACd,QAAM,SAAS,KAAK,aAAa,OAAO,KAAK,QAAQ;AACpD,QAAI,cAAc;AACjB,qBAAe;AACf,WAAK,KAAK,0BAA0B;AAAA,IACrC;AACA,UAAM,iCAAiC,MAAM,kCAAkC;AAC/E,WAAO,+BAA+B,cAAc,KAAK,GAAG;AAAA,EAC7D,CAAC;AACD,SAAO,GAAG,WAAW,OAAO,KAAK,WAAW;AAC3C,QAAI,gBAAgB;AACnB,uBAAiB;AACjB,WAAK,KAAK,4BAA4B;AAAA,IACvC;AACA,UAAM,iCAAiC,MAAM,kCAAkC;AAE/E,WAAO,+BAA+B,cAAc,KAAK,MAAM;AAAA,EAChE,CAAC;AACD,SAAO,GAAG,SAAS,OAAO,QAAQ;AACjC,UAAM,iCAAiC,MAAM,kCAAkC;AAC/E,WAAO,+BAA+B,kBAAkB,GAAG;AAAA,EAC5D,CAAC;AAED,QAAM,OAAO,kBAAkB,WAAW,MAAM,CAAC,MAAM,WAAW,eAAe,MAAM,SAAS,cAAc;AAC9G,QAAM,oBACL,WAAW,aAAa,IACrB,EAAE,MAAM,kBAAkB,WAAW,aAAa,CAAC,EAAE,IACrD,EAAE,MAAM,MAAM,MAAM,UAAU,MAAM,kBAAkB,WAAW,MAAM,CAAC,CAAC,EAAE;AAE/E,SAAO,OAAO,mBAAmB,YAAY;AAC5C,QAAI,SAAS,MAAM,QAAQ,QAAQ,cAAc,KAAK,QAAQ,eAAe,SAAS;AAAA;AAAA,EAAO,QAAQ,eAAe,KAAK,IAAI,CAAC;AAAA;AAAA,IAAS;AAEvI,QAAI,OAAO,kBAAkB,SAAS,YAAY,WAAW,kBAAkB,GAAG;AACjF,YAAM,SAAS,GAAG,kBAAkB;AACpC,aAAO,KAAK,MAAM,EAAE,QAAQ,SAAU,QAAQ;AAC7C,eAAO,MAAM,GAAG,QAAQ,SAAU,OAAO;AACxC,cAAI,CAAC,MAAM,YAAY,MAAM,WAAW,QAAQ;AAC/C,sBAAU,eAAe,MAAM,OAAO;AAAA;AAAA,UACvC;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAEA,cAAU,OAAO,QAAQ;AACzB,QAAI,YAAY,MAAM;AACrB,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC5C;AAEA,cAAU,mBAAmB,OAAO,YAAY,WAAW,UAAU,GAAG,QAAQ,OAAO,IAAI,QAAQ,IAAI,KAAK,QAAQ,MAAM,GAAG;AAAA;AAE7H,cAAU,qCAAqC,OAAO,YAAY,WAAW,UAAU,QAAQ,IAAI;AAAA;AACnG,YAAQ,IAAI,MAAM;AAElB,SAAK,KAAK,qBAAqB;AAE/B,WAAO,yBAAyB,YAAY,IAAI;AAEhD,UAAM,kCAAkC;AAAA,EACzC,CAAC;AAED,UAAQ,GAAG,QAAQ,MAAM;AACxB,WAAO,MAAM;AACb,QAAI,iCAAiC;AACpC,sCAAgC,QAAQ;AAAA,IACzC;AAAA,EACD,CAAC;AACF;AAxIe;AA6If,SAAS,kBAAkB,KAAK;AAC/B,MAAI,MAAM,QAAQ,GAAG,GAAG;AACvB,UAAM,IAAI,IAAI;AAAA,EACf;AACA,SAAO,OAAO,QAAQ,WAAW,MAAM;AACxC;AALS;AAoBT,eAAe,UAAU,MAAM,SAAS;AACvC,MAAI,SAAS;AACZ,QAAI;AACJ,QAAI,QAAQ,MAAM,OAAO,GAAG;AAC3B,aAAO,SAAS,SAAS,EAAE;AAAA,IAC5B,WAAW,QAAQ,WAAW,OAAO,GAAG;AACvC,YAAM,OAAO,MAAM,aAAa,MAAM,MAAM,OAAO,MAAM,GAAG;AAC5D,UAAI,SAAS,QAAW;AACvB,eAAO;AAAA,MACR;AAEA,cAAQ,KAAK,8CAA8C,MAAM,KAAK,MAAM,MAAM,GAAG,eAAe;AACpG,cAAQ,KAAK,CAAC;AAAA,IAEf,OAAO;AACN,cAAQ,KAAK,WAAW,OAAO,wIAAwI;AACvK,cAAQ,KAAK,CAAC;AAAA,IACf;AAAA,EACD;AACA,SAAO;AACR;AApBe;AA0Bf,SAAS,WAAW,UAAU;AAC7B,QAAM,QAAQ,SAAS,MAAM,eAAe;AAC5C,MAAI,OAAO;AACV,UAAMC,SAAQ,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,MAAM,SAAS,MAAM,CAAC,GAAG,EAAE;AACjE,QAAIA,SAAQ,KAAKA,UAAS,OAAO,OAAO,OAAO;AAC9C,aAAO,EAAE,OAAAA,QAAO,IAAI;AAAA,IACrB;AAAA,EACD;AACA,SAAO;AACR;AATS;AAqBT,eAAe,aAAa,MAAMA,QAAO,KAAK;AAC7C,QAAM,WAAW,wBAAuB,SAAS;AAChD,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC/B,YAAM,SAAS,KAAK,aAAa;AACjC,aAAO,OAAO,MAAM,MAAM,MAAM;AAC/B,eAAO,MAAM;AACb,gBAAQ,IAAI;AAAA,MACb,CAAC,EAAE,GAAG,SAAS,MAAM;AACpB,gBAAQ,KAAK;AAAA,MACd,CAAC;AAAA,IACF,CAAC;AAAA,EACF,GAViB;AAWjB,WAAS,OAAOA,QAAO,QAAQ,KAAK,QAAQ;AAC3C,QAAI,MAAM,SAAS,IAAI,GAAG;AACzB,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;AAlBe;AAwBf,SAAS,SAAS,kBAAkB;AACnC,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAGvC,YAAQ,IAAI,mBAAmB,IAAI,KAAK,UAAU,gBAAgB;AAMlE,YAAQ,IAAI,wBAAwB,IAAI;AAExC,QAAI,QAAQ,IAAI,YAAY,GAAG;AAG9B,cAAQ,IAAI,2CAA2C,IAAI,QAAQ,IAAI,2CAA2C,KAAK,KAAK,KAAK,WAAW,MAAM,UAAU,cAAc;AAC1K,oBAAc,8BAA8B,QAAQ,IAAI,2CAA2C,CAAC;AAAA,IACrG,OAAO;AACN,aAAO,QAAQ,IAAI,2CAA2C;AAAA,IAC/D;AACA,iBAAa,KAAK,8BAA8B,SAAS,MAAM;AAAA,EAChE,CAAC;AACF;AAtBS;AAwBT,SAAS,qBAAqB;AAC7B,MAAI;AACH,WAAO,CAAC,QAAQ,MAAM;AAAA,EACvB,SAAS,OAAO;AAAA,EAEhB;AACA,SAAO;AACR;AAPS;AAaT,SAAS,OAAO,UAAU;AACzB,QAAM,KAAK,SAAS,gBAAgB;AAAA,IACnC,OAAO,QAAQ;AAAA,IACf,QAAQ,QAAQ;AAAA,EACjB,CAAC;AACD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,OAAG,SAAS,WAAW,KAAK,eAAgB,MAAM;AACjD,SAAG,MAAM;AACT,YAAM,MAAM,KAAK,SAAS,EAAE,KAAK,EAAE,YAAY;AAC/C,UAAI,QAAQ,MAAM,QAAQ,OAAO,QAAQ,OAAO;AAC/C,gBAAQ,IAAI;AAAA,MACb,WAAW,QAAQ,OAAO,QAAQ,MAAM;AACvC,gBAAQ,KAAK;AAAA,MACd,OAAO;AACN,gBAAQ,OAAO,MAAM,gEAAgE;AACrF,gBAAQ,MAAM,OAAO,QAAQ,CAAC;AAAA,MAC/B;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;AAnBS;AAqBT,MAAM;",
  "names": ["server", "start"]
}
