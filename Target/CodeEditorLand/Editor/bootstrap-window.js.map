{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/bootstrap-window.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/// <reference path=\"typings/require.d.ts\" />\n\n//@ts-check\n'use strict';\n\n/**\n * @import { ISandboxConfiguration } from './vs/base/parts/sandbox/common/sandboxTypes'\n * @typedef {any} LoaderConfig\n */\n\n/* eslint-disable no-restricted-globals */\n\n(function (factory) {\n\t// @ts-ignore\n\tglobalThis.MonacoBootstrapWindow = factory();\n}(function () {\n\tconst preloadGlobals = sandboxGlobals();\n\tconst safeProcess = preloadGlobals.process;\n\n\t// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\tError.stackTraceLimit = 100;\n\n\t/**\n\t * @param {string[]} modulePaths\n\t * @param {(result: unknown, configuration: ISandboxConfiguration) => Promise<unknown> | undefined} resultCallback\n\t * @param {{\n\t *  configureDeveloperSettings?: (config: ISandboxConfiguration) => {\n\t * \t\tforceDisableShowDevtoolsOnError?: boolean,\n\t * \t\tforceEnableDeveloperKeybindings?: boolean,\n\t * \t\tdisallowReloadKeybinding?: boolean,\n\t * \t\tremoveDeveloperKeybindingsAfterLoad?: boolean\n\t * \t},\n\t * \tcanModifyDOM?: (config: ISandboxConfiguration) => void,\n\t * \tbeforeLoaderConfig?: (loaderConfig: object) => void,\n\t *  beforeRequire?: (config: ISandboxConfiguration) => void\n\t * }} [options]\n\t */\n\tasync function load(modulePaths, resultCallback, options) {\n\n\t\t// Await window configuration from preload\n\t\tconst timeout = setTimeout(() => { console.error(`[resolve window config] Could not resolve window configuration within 10 seconds, but will continue to wait...`); }, 10000);\n\t\tperformance.mark('code/willWaitForWindowConfig');\n\t\t/** @type {ISandboxConfiguration} */\n\t\tconst configuration = await preloadGlobals.context.resolveConfiguration();\n\t\tperformance.mark('code/didWaitForWindowConfig');\n\t\tclearTimeout(timeout);\n\n\t\t// Signal DOM modifications are now OK\n\t\tif (typeof options?.canModifyDOM === 'function') {\n\t\t\toptions.canModifyDOM(configuration);\n\t\t}\n\n\t\t// Developer settings\n\t\tconst {\n\t\t\tforceEnableDeveloperKeybindings,\n\t\t\tdisallowReloadKeybinding,\n\t\t\tremoveDeveloperKeybindingsAfterLoad\n\t\t} = typeof options?.configureDeveloperSettings === 'function' ? options.configureDeveloperSettings(configuration) : {\n\t\t\tforceEnableDeveloperKeybindings: false,\n\t\t\tdisallowReloadKeybinding: false,\n\t\t\tremoveDeveloperKeybindingsAfterLoad: false\n\t\t};\n\t\tconst isDev = !!safeProcess.env['VSCODE_DEV'];\n\t\tconst enableDeveloperKeybindings = isDev || forceEnableDeveloperKeybindings;\n\t\t/**\n\t\t * @type {() => void | undefined}\n\t\t */\n\t\tlet developerDeveloperKeybindingsDisposable;\n\t\tif (enableDeveloperKeybindings) {\n\t\t\tdeveloperDeveloperKeybindingsDisposable = registerDeveloperKeybindings(disallowReloadKeybinding);\n\t\t}\n\n\t\tglobalThis._VSCODE_NLS_MESSAGES = configuration.nls.messages;\n\t\tglobalThis._VSCODE_NLS_LANGUAGE = configuration.nls.language;\n\t\tlet language = configuration.nls.language || 'en';\n\t\tif (language === 'zh-tw') {\n\t\t\tlanguage = 'zh-Hant';\n\t\t} else if (language === 'zh-cn') {\n\t\t\tlanguage = 'zh-Hans';\n\t\t}\n\n\t\twindow.document.documentElement.setAttribute('lang', language);\n\n\t\twindow['MonacoEnvironment'] = {};\n\n\t\t// ESM-uncomment-begin\n\t\t// Signal before require()\n\t\tif (typeof options?.beforeRequire === 'function') {\n\t\t\toptions.beforeRequire(configuration);\n\t\t}\n\n\t\tconst baseUrl = new URL(`${fileUriFromPath(configuration.appRoot, { isWindows: safeProcess.platform === 'win32', scheme: 'vscode-file', fallbackAuthority: 'vscode-app' })}/out/`);\n\t\tglobalThis._VSCODE_FILE_ROOT = baseUrl.toString();\n\n\t\t// DEV ---------------------------------------------------------------------------------------\n\t\t// DEV: This is for development and enables loading CSS via import-statements via import-maps.\n\t\t// DEV: For each CSS modules that we have we defined an entry in the import map that maps to\n\t\t// DEV: a blob URL that loads the CSS via a dynamic @import-rule.\n\t\t// DEV ---------------------------------------------------------------------------------------\n\t\tif (Array.isArray(configuration.cssModules) && configuration.cssModules.length > 0) {\n\t\t\tperformance.mark('code/willAddCssLoader');\n\n\t\t\tconst style = document.createElement('style');\n\t\t\tstyle.type = 'text/css';\n\t\t\tstyle.media = 'screen';\n\t\t\tstyle.id = 'vscode-css-loading';\n\t\t\tdocument.head.appendChild(style);\n\n\t\t\tglobalThis._VSCODE_CSS_LOAD = function (url) {\n\t\t\t\tstyle.textContent += `@import url(${url});\\n`;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @type { { imports: Record<string, string> }}\n\t\t\t */\n\t\t\tconst importMap = { imports: {} };\n\t\t\tfor (const cssModule of configuration.cssModules) {\n\t\t\t\tconst cssUrl = new URL(cssModule, baseUrl).href;\n\t\t\t\tconst jsSrc = `globalThis._VSCODE_CSS_LOAD('${cssUrl}');\\n`;\n\t\t\t\tconst blob = new Blob([jsSrc], { type: 'application/javascript' });\n\t\t\t\timportMap.imports[cssUrl] = URL.createObjectURL(blob);\n\t\t\t}\n\n\t\t\tconst ttp = window.trustedTypes?.createPolicy('vscode-bootstrapImportMap', { createScript(value) { return value; }, });\n\t\t\tconst importMapSrc = JSON.stringify(importMap, undefined, 2);\n\t\t\tconst importMapScript = document.createElement('script');\n\t\t\timportMapScript.type = 'importmap';\n\t\t\timportMapScript.setAttribute('nonce', '0c6a828f1297');\n\t\t\t// @ts-ignore\n\t\t\timportMapScript.textContent = ttp?.createScript(importMapSrc) ?? importMapSrc;\n\t\t\tdocument.head.appendChild(importMapScript);\n\n\t\t\tperformance.mark('code/didAddCssLoader');\n\t\t}\n\n\t\tconst result = Promise.all(modulePaths.map(modulePath => {\n\t\t\tif (modulePath.includes('vs/css!')) {\n\t\t\t\t// ESM/CSS when seeing the old `vs/css!` prefix we use that as a signal to\n\t\t\t\t// load CSS via a <link> tag\n\t\t\t\tconst cssModule = modulePath.replace('vs/css!', '');\n\t\t\t\tconst link = document.createElement('link');\n\t\t\t\tlink.rel = 'stylesheet';\n\t\t\t\tlink.href = new URL(`${cssModule}.css`, baseUrl).href;\n\t\t\t\tdocument.head.appendChild(link);\n\t\t\t\treturn Promise.resolve();\n\n\t\t\t} else {\n\t\t\t\t// ESM/JS module loading\n\t\t\t\treturn import(new URL(`${modulePath}.js`, baseUrl).href);\n\t\t\t}\n\t\t}));\n\n\t\tresult.then((res) => invokeResult(res[0]), onUnexpectedError);\n\t\t// ESM-uncomment-end\n\n\t\t// ESM-comment-begin\n\t\t// /** @type {LoaderConfig} */\n\t\t// const loaderConfig = {\n\t\t// baseUrl: `${fileUriFromPath(configuration.appRoot, { isWindows: safeProcess.platform === 'win32', scheme: 'vscode-file', fallbackAuthority: 'vscode-app' })}/out`,\n\t\t// preferScriptTags: true\n\t\t// };\n\t\t//\n\t\t// // use a trusted types policy when loading via script tags\n\t\t// loaderConfig.trustedTypesPolicy = window.trustedTypes?.createPolicy('amdLoader', {\n\t\t// createScriptURL(value) {\n\t\t// if (value.startsWith(window.location.origin)) {\n\t\t// return value;\n\t\t// }\n\t\t// throw new Error(`Invalid script url: ${value}`);\n\t\t// }\n\t\t// });\n\t\t//\n\t\t// // Teach the loader the location of the node modules we use in renderers\n\t\t// // This will enable to load these modules via <script> tags instead of\n\t\t// // using a fallback such as node.js require which does not exist in sandbox\n\t\t// const baseNodeModulesPath = isDev ? '../node_modules' : '../node_modules.asar';\n\t\t// loaderConfig.paths = {\n\t\t// '@vscode/tree-sitter-wasm': `${baseNodeModulesPath}/@vscode/tree-sitter-wasm/wasm/tree-sitter.js`,\n\t\t// 'vscode-textmate': `${baseNodeModulesPath}/vscode-textmate/release/main.js`,\n\t\t// 'vscode-oniguruma': `${baseNodeModulesPath}/vscode-oniguruma/release/main.js`,\n\t\t// 'vsda': `${baseNodeModulesPath}/vsda/index.js`,\n\t\t// '@xterm/xterm': `${baseNodeModulesPath}/@xterm/xterm/lib/xterm.js`,\n\t\t// '@xterm/addon-clipboard': `${baseNodeModulesPath}/@xterm/addon-clipboard/lib/addon-clipboard.js`,\n\t\t// '@xterm/addon-image': `${baseNodeModulesPath}/@xterm/addon-image/lib/addon-image.js`,\n\t\t// '@xterm/addon-search': `${baseNodeModulesPath}/@xterm/addon-search/lib/addon-search.js`,\n\t\t// '@xterm/addon-serialize': `${baseNodeModulesPath}/@xterm/addon-serialize/lib/addon-serialize.js`,\n\t\t// '@xterm/addon-unicode11': `${baseNodeModulesPath}/@xterm/addon-unicode11/lib/addon-unicode11.js`,\n\t\t// '@xterm/addon-webgl': `${baseNodeModulesPath}/@xterm/addon-webgl/lib/addon-webgl.js`,\n\t\t// '@vscode/iconv-lite-umd': `${baseNodeModulesPath}/@vscode/iconv-lite-umd/lib/iconv-lite-umd.js`,\n\t\t// 'jschardet': `${baseNodeModulesPath}/jschardet/dist/jschardet.min.js`,\n\t\t// '@vscode/vscode-languagedetection': `${baseNodeModulesPath}/@vscode/vscode-languagedetection/dist/lib/index.js`,\n\t\t// 'vscode-regexp-languagedetection': `${baseNodeModulesPath}/vscode-regexp-languagedetection/dist/index.js`,\n\t\t// 'tas-client-umd': `${baseNodeModulesPath}/tas-client-umd/lib/tas-client-umd.js`\n\t\t// };\n\t\t//\n\t\t// // Signal before require.config()\n\t\t// if (typeof options?.beforeLoaderConfig === 'function') {\n\t\t// options.beforeLoaderConfig(loaderConfig);\n\t\t// }\n\t\t//\n\t\t// // Configure loader\n\t\t// require.config(loaderConfig);\n\t\t//\n\t\t// // Signal before require()\n\t\t// if (typeof options?.beforeRequire === 'function') {\n\t\t// options.beforeRequire(configuration);\n\t\t// }\n\t\t//\n\t\t// // Actually require the main module as specified\n\t\t// require(modulePaths, invokeResult, onUnexpectedError);\n\t\t// ESM-comment-end\n\n\t\t/**\n\t\t * @param {any} firstModule\n\t\t */\n\t\tasync function invokeResult(firstModule) {\n\t\t\ttry {\n\n\t\t\t\t// Callback only after process environment is resolved\n\t\t\t\tconst callbackResult = resultCallback(firstModule, configuration);\n\t\t\t\tif (callbackResult instanceof Promise) {\n\t\t\t\t\tawait callbackResult;\n\n\t\t\t\t\tif (developerDeveloperKeybindingsDisposable && removeDeveloperKeybindingsAfterLoad) {\n\t\t\t\t\t\tdeveloperDeveloperKeybindingsDisposable();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tonUnexpectedError(error, enableDeveloperKeybindings);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {boolean | undefined} disallowReloadKeybinding\n\t * @returns {() => void}\n\t */\n\tfunction registerDeveloperKeybindings(disallowReloadKeybinding) {\n\t\tconst ipcRenderer = preloadGlobals.ipcRenderer;\n\n\t\tconst extractKey =\n\t\t\t/**\n\t\t\t * @param {KeyboardEvent} e\n\t\t\t */\n\t\t\tfunction (e) {\n\t\t\t\treturn [\n\t\t\t\t\te.ctrlKey ? 'ctrl-' : '',\n\t\t\t\t\te.metaKey ? 'meta-' : '',\n\t\t\t\t\te.altKey ? 'alt-' : '',\n\t\t\t\t\te.shiftKey ? 'shift-' : '',\n\t\t\t\t\te.keyCode\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\t// Devtools & reload support\n\t\tconst TOGGLE_DEV_TOOLS_KB = (safeProcess.platform === 'darwin' ? 'meta-alt-73' : 'ctrl-shift-73'); // mac: Cmd-Alt-I, rest: Ctrl-Shift-I\n\t\tconst TOGGLE_DEV_TOOLS_KB_ALT = '123'; // F12\n\t\tconst RELOAD_KB = (safeProcess.platform === 'darwin' ? 'meta-82' : 'ctrl-82'); // mac: Cmd-R, rest: Ctrl-R\n\n\t\t/** @type {((e: KeyboardEvent) => void) | undefined} */\n\t\tlet listener = function (e) {\n\t\t\tconst key = extractKey(e);\n\t\t\tif (key === TOGGLE_DEV_TOOLS_KB || key === TOGGLE_DEV_TOOLS_KB_ALT) {\n\t\t\t\tipcRenderer.send('vscode:toggleDevTools');\n\t\t\t} else if (key === RELOAD_KB && !disallowReloadKeybinding) {\n\t\t\t\tipcRenderer.send('vscode:reloadWindow');\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener('keydown', listener);\n\n\t\treturn function () {\n\t\t\tif (listener) {\n\t\t\t\twindow.removeEventListener('keydown', listener);\n\t\t\t\tlistener = undefined;\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * @param {string | Error} error\n\t * @param {boolean} [showDevtoolsOnError]\n\t */\n\tfunction onUnexpectedError(error, showDevtoolsOnError) {\n\t\tif (showDevtoolsOnError) {\n\t\t\tconst ipcRenderer = preloadGlobals.ipcRenderer;\n\t\t\tipcRenderer.send('vscode:openDevTools');\n\t\t}\n\n\t\tconsole.error(`[uncaught exception]: ${error}`);\n\n\t\tif (error && typeof error !== 'string' && error.stack) {\n\t\t\tconsole.error(error.stack);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} path\n\t * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config\n\t * @returns {string}\n\t */\n\tfunction fileUriFromPath(path, config) {\n\n\t\t// Since we are building a URI, we normalize any backslash\n\t\t// to slashes and we ensure that the path begins with a '/'.\n\t\tlet pathName = path.replace(/\\\\/g, '/');\n\t\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\t\tpathName = `/${pathName}`;\n\t\t}\n\n\t\t/** @type {string} */\n\t\tlet uri;\n\n\t\t// Windows: in order to support UNC paths (which start with '//')\n\t\t// that have their own authority, we do not use the provided authority\n\t\t// but rather preserve it.\n\t\tif (config.isWindows && pathName.startsWith('//')) {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}:${pathName}`);\n\t\t}\n\n\t\t// Otherwise we optionally add the provided authority if specified\n\t\telse {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}://${config.fallbackAuthority || ''}${pathName}`);\n\t\t}\n\n\t\treturn uri.replace(/#/g, '%23');\n\t}\n\n\t/**\n\t * @return {typeof import('./vs/base/parts/sandbox/electron-sandbox/globals')}\n\t */\n\tfunction sandboxGlobals() {\n\t\t// @ts-ignore (defined in globals.js)\n\t\treturn window.vscode;\n\t}\n\n\treturn {\n\t\tload\n\t};\n}));\n"],
  "mappings": "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",
  "names": []
}
