{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/bootstrap-node.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n// ESM-comment-begin\n// const path = require('path');\n// const fs = require('fs');\n// const Module = require('module');\n// ESM-comment-end\n// ESM-uncomment-begin\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { createRequire } from 'node:module';\n\n/** @ts-ignore */\nconst require = createRequire(import.meta.url);\n/** @type any */\nconst module = { exports: {} };\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n// ESM-uncomment-end\n\n// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\nError.stackTraceLimit = 100;\n\nif (!process.env['VSCODE_HANDLES_SIGPIPE']) {\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t// (https://github.com/electron/electron/issues/13254)\n\tlet didLogAboutSIGPIPE = false;\n\tprocess.on('SIGPIPE', () => {\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\n\t\t// In certain situations, the console itself can be in a broken pipe state\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\n\t\tif (!didLogAboutSIGPIPE) {\n\t\t\tdidLogAboutSIGPIPE = true;\n\t\t\tconsole.error(new Error(`Unexpected SIGPIPE`));\n\t\t}\n\t});\n}\n\n// Setup current working directory in all our node & electron processes\n// - Windows: call `process.chdir()` to always set application folder as cwd\n// -  all OS: store the `process.cwd()` inside `VSCODE_CWD` for consistent lookups\nfunction setupCurrentWorkingDirectory() {\n\ttry {\n\n\t\t// Store the `process.cwd()` inside `VSCODE_CWD`\n\t\t// for consistent lookups, but make sure to only\n\t\t// do this once unless defined already from e.g.\n\t\t// a parent process.\n\t\tif (typeof process.env['VSCODE_CWD'] !== 'string') {\n\t\t\tprocess.env['VSCODE_CWD'] = process.cwd();\n\t\t}\n\n\t\t// Windows: always set application folder as current working dir\n\t\tif (process.platform === 'win32') {\n\t\t\tprocess.chdir(path.dirname(process.execPath));\n\t\t}\n\t} catch (err) {\n\t\tconsole.error(err);\n\t}\n}\n\nsetupCurrentWorkingDirectory();\n\n/**\n * Add support for redirecting the loading of node modules\n *\n * Note: only applies when running out of sources.\n *\n * @param {string} injectPath\n */\nmodule.exports.devInjectNodeModuleLookupPath = function (injectPath) {\n\tif (!process.env['VSCODE_DEV']) {\n\t\treturn; // only applies running out of sources\n\t}\n\n\tif (!injectPath) {\n\t\tthrow new Error('Missing injectPath');\n\t}\n\n\tconst Module = require('node:module');\n\t// ESM-uncomment-begin\n\t// register a loader hook\n\tModule.register('./bootstrap-import.js', { parentURL: import.meta.url, data: injectPath });\n\t// ESM-uncomment-end\n\t// ESM-comment-begin\n\t// const nodeModulesPath = path.join(__dirname, '../node_modules');\n\t//\n\t// // @ts-ignore\n\t// const originalResolveLookupPaths = Module._resolveLookupPaths;\n\t//\n\t// // @ts-ignore\n\t// Module._resolveLookupPaths = function (moduleName, parent) {\n\t// const paths = originalResolveLookupPaths(moduleName, parent);\n\t// if (Array.isArray(paths)) {\n\t// for (let i = 0, len = paths.length; i < len; i++) {\n\t// if (paths[i] === nodeModulesPath) {\n\t// paths.splice(i, 0, injectPath);\n\t// break;\n\t// }\n\t// }\n\t// }\n\t//\n\t// return paths;\n\t// };\n\t// ESM-comment-end\n};\n\nmodule.exports.removeGlobalNodeJsModuleLookupPaths = function () {\n\tif (typeof process?.versions?.electron === 'string') {\n\t\treturn; // Electron disables global search paths in https://github.com/electron/electron/blob/3186c2f0efa92d275dc3d57b5a14a60ed3846b0e/shell/common/node_bindings.cc#L653\n\t}\n\n\tconst Module = require('module');\n\t// @ts-ignore\n\tconst globalPaths = Module.globalPaths;\n\n\t// @ts-ignore\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t// @ts-ignore\n\tModule._resolveLookupPaths = function (moduleName, parent) {\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\n\t\tif (Array.isArray(paths)) {\n\t\t\tlet commonSuffixLength = 0;\n\t\t\twhile (commonSuffixLength < paths.length && paths[paths.length - 1 - commonSuffixLength] === globalPaths[globalPaths.length - 1 - commonSuffixLength]) {\n\t\t\t\tcommonSuffixLength++;\n\t\t\t}\n\t\t\treturn paths.slice(0, paths.length - commonSuffixLength);\n\t\t}\n\t\treturn paths;\n\t};\n};\n\n/**\n * Helper to enable portable mode.\n *\n * @param {Partial<import('./vs/base/common/product').IProductConfiguration>} product\n * @returns {{ portableDataPath: string; isPortable: boolean; }}\n */\nmodule.exports.configurePortable = function (product) {\n\tconst appRoot = path.dirname(__dirname);\n\n\t/**\n\t * @param {import('path')} path\n\t */\n\tfunction getApplicationPath(path) {\n\t\tif (process.env['VSCODE_DEV']) {\n\t\t\treturn appRoot;\n\t\t}\n\n\t\tif (process.platform === 'darwin') {\n\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\n\t\t}\n\n\t\treturn path.dirname(path.dirname(appRoot));\n\t}\n\n\t/**\n\t * @param {import('path')} path\n\t */\n\tfunction getPortableDataPath(path) {\n\t\tif (process.env['VSCODE_PORTABLE']) {\n\t\t\treturn process.env['VSCODE_PORTABLE'];\n\t\t}\n\n\t\tif (process.platform === 'win32' || process.platform === 'linux') {\n\t\t\treturn path.join(getApplicationPath(path), 'data');\n\t\t}\n\n\t\t// @ts-ignore\n\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\n\t\treturn path.join(path.dirname(getApplicationPath(path)), portableDataName);\n\t}\n\n\tconst portableDataPath = getPortableDataPath(path);\n\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\n\tconst portableTempPath = path.join(portableDataPath, 'tmp');\n\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\n\n\tif (isPortable) {\n\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\n\t} else {\n\t\tdelete process.env['VSCODE_PORTABLE'];\n\t}\n\n\tif (isTempPortable) {\n\t\tif (process.platform === 'win32') {\n\t\t\tprocess.env['TMP'] = portableTempPath;\n\t\t\tprocess.env['TEMP'] = portableTempPath;\n\t\t} else {\n\t\t\tprocess.env['TMPDIR'] = portableTempPath;\n\t\t}\n\t}\n\n\treturn {\n\t\tportableDataPath,\n\t\tisPortable\n\t};\n};\n\n/**\n * Helper to enable ASAR support.\n */\nmodule.exports.enableASARSupport = function () {\n\t// ESM-comment-begin\n\t// const NODE_MODULES_PATH = path.join(__dirname, '../node_modules');\n\t// const NODE_MODULES_ASAR_PATH = `${NODE_MODULES_PATH}.asar`;\n\t//\n\t// // @ts-ignore\n\t// const originalResolveLookupPaths = Module._resolveLookupPaths;\n\t//\n\t// // @ts-ignore\n\t// Module._resolveLookupPaths = function (request, parent) {\n\t// const paths = originalResolveLookupPaths(request, parent);\n\t// if (Array.isArray(paths)) {\n\t// for (let i = 0, len = paths.length; i < len; i++) {\n\t// if (paths[i] === NODE_MODULES_PATH) {\n\t// paths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t// break;\n\t// }\n\t// }\n\t// }\n\t//\n\t// return paths;\n\t// };\n\t// ESM-comment-end\n};\n\n/**\n * Helper to convert a file path to a URI.\n *\n * TODO@bpasero TODO@esm check for removal once ESM has landed.\n *\n * @param {string} path\n * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config\n * @returns {string}\n */\nmodule.exports.fileUriFromPath = function (path, config) {\n\n\t// Since we are building a URI, we normalize any backslash\n\t// to slashes and we ensure that the path begins with a '/'.\n\tlet pathName = path.replace(/\\\\/g, '/');\n\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\tpathName = `/${pathName}`;\n\t}\n\n\t/** @type {string} */\n\tlet uri;\n\n\t// Windows: in order to support UNC paths (which start with '//')\n\t// that have their own authority, we do not use the provided authority\n\t// but rather preserve it.\n\tif (config.isWindows && pathName.startsWith('//')) {\n\t\turi = encodeURI(`${config.scheme || 'file'}:${pathName}`);\n\t}\n\n\t// Otherwise we optionally add the provided authority if specified\n\telse {\n\t\turi = encodeURI(`${config.scheme || 'file'}://${config.fallbackAuthority || ''}${pathName}`);\n\t}\n\n\treturn uri.replace(/#/g, '%23');\n};\n\n//#endregion\n\n// ESM-uncomment-begin\nexport const devInjectNodeModuleLookupPath = module.exports.devInjectNodeModuleLookupPath;\nexport const removeGlobalNodeJsModuleLookupPaths = module.exports.removeGlobalNodeJsModuleLookupPaths;\nexport const configurePortable = module.exports.configurePortable;\nexport const enableASARSupport = module.exports.enableASARSupport;\nexport const fileUriFromPath = module.exports.fileUriFromPath;\n// ESM-uncomment-end\n"],
  "mappings": ";;AAcA,YAAY,UAAU;AACtB,YAAY,QAAQ;AACpB,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAG9B,MAAMA,WAAU,cAAc,YAAY,GAAG;AAE7C,MAAM,SAAS,EAAE,SAAS,CAAC,EAAE;AAC7B,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAI7D,MAAM,kBAAkB;AAExB,IAAI,CAAC,QAAQ,IAAI,wBAAwB,GAAG;AAG3C,MAAI,qBAAqB;AACzB,UAAQ,GAAG,WAAW,MAAM;AAI3B,QAAI,CAAC,oBAAoB;AACxB,2BAAqB;AACrB,cAAQ,MAAM,IAAI,MAAM,oBAAoB,CAAC;AAAA,IAC9C;AAAA,EACD,CAAC;AACF;AAKA,SAAS,+BAA+B;AACvC,MAAI;AAMH,QAAI,OAAO,QAAQ,IAAI,YAAY,MAAM,UAAU;AAClD,cAAQ,IAAI,YAAY,IAAI,QAAQ,IAAI;AAAA,IACzC;AAGA,QAAI,QAAQ,aAAa,SAAS;AACjC,cAAQ,MAAM,KAAK,QAAQ,QAAQ,QAAQ,CAAC;AAAA,IAC7C;AAAA,EACD,SAAS,KAAK;AACb,YAAQ,MAAM,GAAG;AAAA,EAClB;AACD;AAlBS;AAoBT,6BAA6B;AAS7B,OAAO,QAAQ,gCAAgC,SAAU,YAAY;AACpE,MAAI,CAAC,QAAQ,IAAI,YAAY,GAAG;AAC/B;AAAA,EACD;AAEA,MAAI,CAAC,YAAY;AAChB,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACrC;AAEA,QAAM,SAASA,SAAQ,aAAa;AAGpC,SAAO,SAAS,yBAAyB,EAAE,WAAW,YAAY,KAAK,MAAM,WAAW,CAAC;AAuB1F;AAEA,OAAO,QAAQ,sCAAsC,WAAY;AAChE,MAAI,OAAO,SAAS,UAAU,aAAa,UAAU;AACpD;AAAA,EACD;AAEA,QAAM,SAASA,SAAQ,QAAQ;AAE/B,QAAM,cAAc,OAAO;AAG3B,QAAM,6BAA6B,OAAO;AAG1C,SAAO,sBAAsB,SAAU,YAAY,QAAQ;AAC1D,UAAM,QAAQ,2BAA2B,YAAY,MAAM;AAC3D,QAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,UAAI,qBAAqB;AACzB,aAAO,qBAAqB,MAAM,UAAU,MAAM,MAAM,SAAS,IAAI,kBAAkB,MAAM,YAAY,YAAY,SAAS,IAAI,kBAAkB,GAAG;AACtJ;AAAA,MACD;AACA,aAAO,MAAM,MAAM,GAAG,MAAM,SAAS,kBAAkB;AAAA,IACxD;AACA,WAAO;AAAA,EACR;AACD;AAQA,OAAO,QAAQ,oBAAoB,SAAU,SAAS;AACrD,QAAM,UAAU,KAAK,QAAQ,SAAS;AAKtC,WAAS,mBAAmBC,OAAM;AACjC,QAAI,QAAQ,IAAI,YAAY,GAAG;AAC9B,aAAO;AAAA,IACR;AAEA,QAAI,QAAQ,aAAa,UAAU;AAClC,aAAOA,MAAK,QAAQA,MAAK,QAAQA,MAAK,QAAQ,OAAO,CAAC,CAAC;AAAA,IACxD;AAEA,WAAOA,MAAK,QAAQA,MAAK,QAAQ,OAAO,CAAC;AAAA,EAC1C;AAVS;AAeT,WAAS,oBAAoBA,OAAM;AAClC,QAAI,QAAQ,IAAI,iBAAiB,GAAG;AACnC,aAAO,QAAQ,IAAI,iBAAiB;AAAA,IACrC;AAEA,QAAI,QAAQ,aAAa,WAAW,QAAQ,aAAa,SAAS;AACjE,aAAOA,MAAK,KAAK,mBAAmBA,KAAI,GAAG,MAAM;AAAA,IAClD;AAGA,UAAM,mBAAmB,QAAQ,YAAY,GAAG,QAAQ,eAAe;AACvE,WAAOA,MAAK,KAAKA,MAAK,QAAQ,mBAAmBA,KAAI,CAAC,GAAG,gBAAgB;AAAA,EAC1E;AAZS;AAcT,QAAM,mBAAmB,oBAAoB,IAAI;AACjD,QAAM,aAAa,EAAE,YAAY,YAAY,GAAG,WAAW,gBAAgB;AAC3E,QAAM,mBAAmB,KAAK,KAAK,kBAAkB,KAAK;AAC1D,QAAM,iBAAiB,cAAc,GAAG,WAAW,gBAAgB;AAEnE,MAAI,YAAY;AACf,YAAQ,IAAI,iBAAiB,IAAI;AAAA,EAClC,OAAO;AACN,WAAO,QAAQ,IAAI,iBAAiB;AAAA,EACrC;AAEA,MAAI,gBAAgB;AACnB,QAAI,QAAQ,aAAa,SAAS;AACjC,cAAQ,IAAI,KAAK,IAAI;AACrB,cAAQ,IAAI,MAAM,IAAI;AAAA,IACvB,OAAO;AACN,cAAQ,IAAI,QAAQ,IAAI;AAAA,IACzB;AAAA,EACD;AAEA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,EACD;AACD;AAKA,OAAO,QAAQ,oBAAoB,WAAY;AAuB/C;AAWA,OAAO,QAAQ,kBAAkB,SAAUA,OAAM,QAAQ;AAIxD,MAAI,WAAWA,MAAK,QAAQ,OAAO,GAAG;AACtC,MAAI,SAAS,SAAS,KAAK,SAAS,OAAO,CAAC,MAAM,KAAK;AACtD,eAAW,IAAI,QAAQ;AAAA,EACxB;AAGA,MAAI;AAKJ,MAAI,OAAO,aAAa,SAAS,WAAW,IAAI,GAAG;AAClD,UAAM,UAAU,GAAG,OAAO,UAAU,MAAM,IAAI,QAAQ,EAAE;AAAA,EACzD,OAGK;AACJ,UAAM,UAAU,GAAG,OAAO,UAAU,MAAM,MAAM,OAAO,qBAAqB,EAAE,GAAG,QAAQ,EAAE;AAAA,EAC5F;AAEA,SAAO,IAAI,QAAQ,MAAM,KAAK;AAC/B;AAKO,MAAM,gCAAgC,OAAO,QAAQ;AACrD,MAAM,sCAAsC,OAAO,QAAQ;AAC3D,MAAM,oBAAoB,OAAO,QAAQ;AACzC,MAAM,oBAAoB,OAAO,QAAQ;AACzC,MAAM,kBAAkB,OAAO,QAAQ;",
  "names": ["require", "path"]
}
