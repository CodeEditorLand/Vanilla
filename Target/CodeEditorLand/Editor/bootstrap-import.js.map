{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/bootstrap-import.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n\n// *********************************************************************\n// *                                                                   *\n// *  We need this to redirect to node_modules from the remote-folder. *\n// *  This ONLY applies  when running out of source.                   *\n// *                                                                   *\n// *********************************************************************\n\nimport { promises } from \"node:fs\";\nimport { join } from \"node:path\";\nimport { fileURLToPath, pathToFileURL } from \"node:url\";\n\n// SEE https://nodejs.org/docs/latest/api/module.html#initialize\n\n/**\n * @type {Object.<string, string>}\n */\nconst _specifierToUrl = {};\n\n/**\n * @param {string} injectPath\n */\nexport async function initialize(injectPath) {\n\t// populate mappings\n\n\tconst injectPackageJSONPath = fileURLToPath(\n\t\tnew URL(\"../package.json\", pathToFileURL(injectPath)),\n\t);\n\tconst packageJSON = JSON.parse(\n\t\tString(await promises.readFile(injectPackageJSONPath)),\n\t);\n\n\tfor (const [name] of Object.entries(packageJSON.dependencies)) {\n\t\ttry {\n\t\t\tconst path = join(\n\t\t\t\tinjectPackageJSONPath,\n\t\t\t\t`../node_modules/${name}/package.json`,\n\t\t\t);\n\t\t\tlet { main } = JSON.parse(String(await promises.readFile(path)));\n\n\t\t\tif (!main) {\n\t\t\t\tmain = \"index.js\";\n\t\t\t}\n\t\t\tif (!main.endsWith(\".js\")) {\n\t\t\t\tmain += \".js\";\n\t\t\t}\n\t\t\tconst mainPath = join(\n\t\t\t\tinjectPackageJSONPath,\n\t\t\t\t`../node_modules/${name}/${main}`,\n\t\t\t);\n\t\t\t_specifierToUrl[name] = pathToFileURL(mainPath).href;\n\t\t} catch (err) {\n\t\t\tconsole.error(name);\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n\n\tconsole.log(\n\t\t`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`,\n\t);\n}\n\n/**\n * @param {string | number} specifier\n * @param {any} context\n * @param {(arg0: any, arg1: any) => any} nextResolve\n */\nexport async function resolve(specifier, context, nextResolve) {\n\tconst newSpecifier = _specifierToUrl[specifier];\n\tif (newSpecifier !== undefined) {\n\t\t// console.log('[HOOKS]', specifier, '--->', newSpecifier);\n\t\treturn {\n\t\t\tformat: \"commonjs\",\n\t\t\tshortCircuit: true,\n\t\t\turl: newSpecifier,\n\t\t};\n\t}\n\n\t// Defer to the next hook in the chain, which would be the\n\t// Node.js default resolve if this is the last user-specified loader.\n\treturn nextResolve(specifier, context);\n}\n"],
  "mappings": ";;AAcA,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,eAAe,qBAAqB;AAO7C,MAAM,kBAAkB,CAAC;AAKzB,eAAsB,WAAW,YAAY;AAG5C,QAAM,wBAAwB;AAAA,IAC7B,IAAI,IAAI,mBAAmB,cAAc,UAAU,CAAC;AAAA,EACrD;AACA,QAAM,cAAc,KAAK;AAAA,IACxB,OAAO,MAAM,SAAS,SAAS,qBAAqB,CAAC;AAAA,EACtD;AAEA,aAAW,CAAC,IAAI,KAAK,OAAO,QAAQ,YAAY,YAAY,GAAG;AAC9D,QAAI;AACH,YAAM,OAAO;AAAA,QACZ;AAAA,QACA,mBAAmB,IAAI;AAAA,MACxB;AACA,UAAI,EAAE,KAAK,IAAI,KAAK,MAAM,OAAO,MAAM,SAAS,SAAS,IAAI,CAAC,CAAC;AAE/D,UAAI,CAAC,MAAM;AACV,eAAO;AAAA,MACR;AACA,UAAI,CAAC,KAAK,SAAS,KAAK,GAAG;AAC1B,gBAAQ;AAAA,MACT;AACA,YAAM,WAAW;AAAA,QAChB;AAAA,QACA,mBAAmB,IAAI,IAAI,IAAI;AAAA,MAChC;AACA,sBAAgB,IAAI,IAAI,cAAc,QAAQ,EAAE;AAAA,IACjD,SAAS,KAAK;AACb,cAAQ,MAAM,IAAI;AAClB,cAAQ,MAAM,GAAG;AAAA,IAClB;AAAA,EACD;AAEA,UAAQ;AAAA,IACP,+DAA+D,UAAU;AAAA,EAC1E;AACD;AAtCsB;AA6CtB,eAAsB,QAAQ,WAAW,SAAS,aAAa;AAC9D,QAAM,eAAe,gBAAgB,SAAS;AAC9C,MAAI,iBAAiB,QAAW;AAE/B,WAAO;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,KAAK;AAAA,IACN;AAAA,EACD;AAIA,SAAO,YAAY,WAAW,OAAO;AACtC;AAdsB;",
  "names": []
}
