{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/server-cli.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-check\n'use strict';\n\n// ESM-comment-begin\n// // Keep bootstrap-amd.js from redefining 'fs'.\n// delete process.env['ELECTRON_RUN_AS_NODE'];\n// const path = require('path');\n// const bootstrapNode = require('./bootstrap-node');\n// const bootstrapAmd = require('./bootstrap-amd');\n// const { resolveNLSConfiguration } = require('./vs/base/node/nls');\n// const product = require('./bootstrap-meta').product;\n// ESM-comment-end\n// ESM-uncomment-begin\nimport './bootstrap-server.js'; // this MUST come before other imports as it changes global state\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\nimport * as bootstrapNode from './bootstrap-node.js';\nimport * as bootstrapAmd from './bootstrap-amd.js';\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\nimport { product } from './bootstrap-meta.js';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n// ESM-uncomment-end\n\nasync function start() {\n\n\t// NLS\n\tconst nlsConfiguration = await resolveNLSConfiguration({ userLocale: 'en', osLocale: 'en', commit: product.commit, userDataPath: '', nlsMetadataPath: __dirname });\n\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfiguration); // required for `bootstrap-amd` to pick up NLS messages\n\n\tif (process.env['VSCODE_DEV']) {\n\t\t// When running out of sources, we need to load node modules from remote/node_modules,\n\t\t// which are compiled against nodejs, not electron\n\t\tprocess.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] || path.join(__dirname, '..', 'remote', 'node_modules');\n\t\tbootstrapNode.devInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\n\t} else {\n\t\tdelete process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'];\n\t}\n\tbootstrapAmd.load('vs/server/node/server.cli');\n}\n\nstart();\n"],
  "mappings": ";;AAkBA,OAAO;AACP,YAAY,UAAU;AACtB,SAAS,qBAAqB;AAC9B,YAAY,mBAAmB;AAC/B,YAAY,kBAAkB;AAC9B,SAAS,+BAA+B;AACxC,SAAS,eAAe;AAExB,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAG7D,eAAe,QAAQ;AAGtB,QAAM,mBAAmB,MAAM,wBAAwB,EAAE,YAAY,MAAM,UAAU,MAAM,QAAQ,QAAQ,QAAQ,cAAc,IAAI,iBAAiB,UAAU,CAAC;AACjK,UAAQ,IAAI,mBAAmB,IAAI,KAAK,UAAU,gBAAgB;AAElE,MAAI,QAAQ,IAAI,YAAY,GAAG;AAG9B,YAAQ,IAAI,2CAA2C,IAAI,QAAQ,IAAI,2CAA2C,KAAK,KAAK,KAAK,WAAW,MAAM,UAAU,cAAc;AAC1K,kBAAc,8BAA8B,QAAQ,IAAI,2CAA2C,CAAC;AAAA,EACrG,OAAO;AACN,WAAO,QAAQ,IAAI,2CAA2C;AAAA,EAC/D;AACA,eAAa,KAAK,2BAA2B;AAC9C;AAfe;AAiBf,MAAM;",
  "names": []
}
