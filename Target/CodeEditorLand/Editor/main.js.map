{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/main.js"],
  "sourcesContent": ["/**\n * @import { INLSConfiguration } from './vs/nls'\n * @import { NativeParsedArgs } from './vs/platform/environment/common/argv'\n */\n\nimport * as os from \"os\";\n// ESM-comment-begin\n// const path = require('path');\n// const fs = require('original-fs');\n// const os = require('os');\n// const bootstrapNode = require('./bootstrap-node');\n// const bootstrapAmd = require('./bootstrap-amd');\n// const { getUserDataPath } = require(`./vs/platform/environment/node/userDataPath`);\n// const { parse } = require('./vs/base/common/jsonc');\n// const perf = require('./vs/base/common/performance');\n// const { resolveNLSConfiguration } = require('./vs/base/node/nls');\n// const { getUNCHost, addUNCHostToAllowlist } = require('./vs/base/node/unc');\n// const product = require('./bootstrap-meta').product;\n// const { app, protocol, crashReporter, Menu, contentTracing } = require('electron');\n// ESM-comment-end\n// ESM-uncomment-begin\nimport * as path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { Menu, app, contentTracing, crashReporter, protocol } from \"electron\";\nimport minimist from \"minimist\";\nimport * as fs from \"original-fs\";\nimport * as bootstrapAmd from \"./bootstrap-amd.js\";\nimport { product } from \"./bootstrap-meta.js\";\nimport * as bootstrapNode from \"./bootstrap-node.js\";\nimport { parse } from \"./vs/base/common/jsonc.js\";\nimport * as perf from \"./vs/base/common/performance.js\";\nimport { resolveNLSConfiguration } from \"./vs/base/node/nls.js\";\nimport { addUNCHostToAllowlist, getUNCHost } from \"./vs/base/node/unc.js\";\nimport { getUserDataPath } from \"./vs/platform/environment/node/userDataPath.js\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n// ESM-uncomment-end\n\nperf.mark(\"code/didStartMain\");\n\n// Enable portable support\nconst portable = bootstrapNode.configurePortable(product);\n\n// Enable ASAR support\nbootstrapNode.enableASARSupport();\n\n// ESM-comment-begin\n// const minimist = require('minimist'); // !!! IMPORTANT: MUST come after bootstrap#enableASARSupport\n// ESM-comment-end\n\nconst args = parseCLIArgs();\n// Configure static command line arguments\nconst argvConfig = configureCommandlineSwitchesSync(args);\n// Enable sandbox globally unless\n// 1) disabled via command line using either\n//    `--no-sandbox` or `--disable-chromium-sandbox` argument.\n// 2) argv.json contains `disable-chromium-sandbox: true`.\nif (\n\targs[\"sandbox\"] &&\n\t!args[\"disable-chromium-sandbox\"] &&\n\t!argvConfig[\"disable-chromium-sandbox\"]\n) {\n\tapp.enableSandbox();\n} else if (\n\tapp.commandLine.hasSwitch(\"no-sandbox\") &&\n\t!app.commandLine.hasSwitch(\"disable-gpu-sandbox\")\n) {\n\t// Disable GPU sandbox whenever --no-sandbox is used.\n\tapp.commandLine.appendSwitch(\"disable-gpu-sandbox\");\n} else {\n\tapp.commandLine.appendSwitch(\"no-sandbox\");\n\tapp.commandLine.appendSwitch(\"disable-gpu-sandbox\");\n}\n\n// Set userData path before app 'ready' event\nconst userDataPath = getUserDataPath(args, product.nameShort ?? \"code-oss-dev\");\nif (process.platform === \"win32\") {\n\tconst userDataUNCHost = getUNCHost(userDataPath);\n\tif (userDataUNCHost) {\n\t\taddUNCHostToAllowlist(userDataUNCHost); // enables to use UNC paths in userDataPath\n\t}\n}\napp.setPath(\"userData\", userDataPath);\n\n// Resolve code cache path\nconst codeCachePath = getCodeCachePath();\n\n// Disable default menu (https://github.com/electron/electron/issues/35512)\nMenu.setApplicationMenu(null);\n\n// Configure crash reporter\nperf.mark(\"code/willStartCrashReporter\");\n// If a crash-reporter-directory is specified we store the crash reports\n// in the specified directory and don't upload them to the crash server.\n//\n// Appcenter crash reporting is enabled if\n// * enable-crash-reporter runtime argument is set to 'true'\n// * --disable-crash-reporter command line parameter is not set\n//\n// Disable crash reporting in all other cases.\nif (\n\targs[\"crash-reporter-directory\"] ||\n\t(argvConfig[\"enable-crash-reporter\"] && !args[\"disable-crash-reporter\"])\n) {\n\tconfigureCrashReporter();\n}\nperf.mark(\"code/didStartCrashReporter\");\n\n// Set logs path before app 'ready' event if running portable\n// to ensure that no 'logs' folder is created on disk at a\n// location outside of the portable directory\n// (https://github.com/microsoft/vscode/issues/56651)\nif (portable && portable.isPortable) {\n\tapp.setAppLogsPath(path.join(userDataPath, \"logs\"));\n}\n\n// Register custom schemes with privileges\nprotocol.registerSchemesAsPrivileged([\n\t{\n\t\tscheme: \"vscode-webview\",\n\t\tprivileges: {\n\t\t\tstandard: true,\n\t\t\tsecure: true,\n\t\t\tsupportFetchAPI: true,\n\t\t\tcorsEnabled: true,\n\t\t\tallowServiceWorkers: true,\n\t\t\tcodeCache: true,\n\t\t},\n\t},\n\t{\n\t\tscheme: \"vscode-file\",\n\t\tprivileges: {\n\t\t\tsecure: true,\n\t\t\tstandard: true,\n\t\t\tsupportFetchAPI: true,\n\t\t\tcorsEnabled: true,\n\t\t\tcodeCache: true,\n\t\t},\n\t},\n]);\n\n// Global app listeners\nregisterListeners();\n\n/**\n * We can resolve the NLS configuration early if it is defined\n * in argv.json before `app.ready` event. Otherwise we can only\n * resolve NLS after `app.ready` event to resolve the OS locale.\n *\n * @type {Promise<INLSConfiguration> | undefined}\n */\nlet nlsConfigurationPromise;\n\n// Use the most preferred OS language for language recommendation.\n// The API might return an empty array on Linux, such as when\n// the 'C' locale is the user's only configured locale.\n// No matter the OS, if the array is empty, default back to 'en'.\nconst osLocale = processZhLocale(\n\t(app.getPreferredSystemLanguages()?.[0] ?? \"en\").toLowerCase(),\n);\nconst userLocale = getUserDefinedLocale(argvConfig);\nif (userLocale) {\n\tnlsConfigurationPromise = resolveNLSConfiguration({\n\t\tuserLocale,\n\t\tosLocale,\n\t\tcommit: product.commit,\n\t\tuserDataPath,\n\t\tnlsMetadataPath: __dirname,\n\t});\n}\n\n// Pass in the locale to Electron so that the\n// Windows Control Overlay is rendered correctly on Windows.\n// For now, don't pass in the locale on macOS due to\n// https://github.com/microsoft/vscode/issues/167543.\n// If the locale is `qps-ploc`, the Microsoft\n// Pseudo Language Language Pack is being used.\n// In that case, use `en` as the Electron locale.\n\nif (process.platform === \"win32\" || process.platform === \"linux\") {\n\tconst electronLocale =\n\t\t!userLocale || userLocale === \"qps-ploc\" ? \"en\" : userLocale;\n\tapp.commandLine.appendSwitch(\"lang\", electronLocale);\n}\n\n// Load our code once ready\napp.once(\"ready\", () => {\n\tif (args[\"trace\"]) {\n\t\tconst traceOptions = {\n\t\t\tcategoryFilter: args[\"trace-category-filter\"] || \"*\",\n\t\t\ttraceOptions:\n\t\t\t\targs[\"trace-options\"] || \"record-until-full,enable-sampling\",\n\t\t};\n\n\t\tcontentTracing.startRecording(traceOptions).finally(() => onReady());\n\t} else {\n\t\tonReady();\n\t}\n});\n\nasync function onReady() {\n\tperf.mark(\"code/mainAppReady\");\n\n\ttry {\n\t\tconst [, nlsConfig] = await Promise.all([\n\t\t\tmkdirpIgnoreError(codeCachePath),\n\t\t\tresolveNlsConfiguration(),\n\t\t]);\n\n\t\tstartup(codeCachePath, nlsConfig);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\n/**\n * Main startup routine\n *\n * @param {string | undefined} codeCachePath\n * @param {INLSConfiguration} nlsConfig\n */\nfunction startup(codeCachePath, nlsConfig) {\n\tprocess.env[\"VSCODE_NLS_CONFIG\"] = JSON.stringify(nlsConfig);\n\tprocess.env[\"VSCODE_CODE_CACHE_PATH\"] = codeCachePath || \"\";\n\n\t// Load main in AMD\n\tperf.mark(\"code/willLoadMainBundle\");\n\tbootstrapAmd.load(\"vs/code/electron-main/main\", () => {\n\t\tperf.mark(\"code/didLoadMainBundle\");\n\t});\n}\n\n/**\n * @param {NativeParsedArgs} cliArgs\n */\nfunction configureCommandlineSwitchesSync(cliArgs) {\n\tconst SUPPORTED_ELECTRON_SWITCHES = [\n\t\t// alias from us for --disable-gpu\n\t\t\"disable-hardware-acceleration\",\n\n\t\t// override for the color profile to use\n\t\t\"force-color-profile\",\n\n\t\t// disable LCD font rendering, a Chromium flag\n\t\t\"disable-lcd-text\",\n\n\t\t// bypass any specified proxy for the given semi-colon-separated list of hosts\n\t\t\"proxy-bypass-list\",\n\t];\n\n\tif (process.platform === \"linux\") {\n\t\t// Force enable screen readers on Linux via this flag\n\t\tSUPPORTED_ELECTRON_SWITCHES.push(\"force-renderer-accessibility\");\n\n\t\t// override which password-store is used on Linux\n\t\tSUPPORTED_ELECTRON_SWITCHES.push(\"password-store\");\n\t}\n\n\tconst SUPPORTED_MAIN_PROCESS_SWITCHES = [\n\t\t// Persistently enable proposed api via argv.json: https://github.com/microsoft/vscode/issues/99775\n\t\t\"enable-proposed-api\",\n\n\t\t// Log level to use. Default is 'info'. Allowed values are 'error', 'warn', 'info', 'debug', 'trace', 'off'.\n\t\t\"log-level\",\n\n\t\t// Use an in-memory storage for secrets\n\t\t\"use-inmemory-secretstorage\",\n\t];\n\n\t// Read argv config\n\tconst argvConfig = readArgvConfigSync();\n\n\tObject.keys(argvConfig).forEach((argvKey) => {\n\t\tconst argvValue = argvConfig[argvKey];\n\n\t\t// Append Electron flags to Electron\n\t\tif (SUPPORTED_ELECTRON_SWITCHES.indexOf(argvKey) !== -1) {\n\t\t\tif (argvValue === true || argvValue === \"true\") {\n\t\t\t\tif (argvKey === \"disable-hardware-acceleration\") {\n\t\t\t\t\tapp.disableHardwareAcceleration(); // needs to be called explicitly\n\t\t\t\t} else {\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey);\n\t\t\t\t}\n\t\t\t} else if (argvValue) {\n\t\t\t\tif (argvKey === \"password-store\") {\n\t\t\t\t\t// Password store\n\t\t\t\t\t// TODO@TylerLeonhardt: Remove this migration in 3 months\n\t\t\t\t\tlet migratedArgvValue = argvValue;\n\t\t\t\t\tif (\n\t\t\t\t\t\targvValue === \"gnome\" ||\n\t\t\t\t\t\targvValue === \"gnome-keyring\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tmigratedArgvValue = \"gnome-libsecret\";\n\t\t\t\t\t}\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, migratedArgvValue);\n\t\t\t\t} else {\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, argvValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Append main process flags to process.argv\n\t\telse if (SUPPORTED_MAIN_PROCESS_SWITCHES.indexOf(argvKey) !== -1) {\n\t\t\tswitch (argvKey) {\n\t\t\t\tcase \"enable-proposed-api\":\n\t\t\t\t\tif (Array.isArray(argvValue)) {\n\t\t\t\t\t\targvValue.forEach(\n\t\t\t\t\t\t\t(id) =>\n\t\t\t\t\t\t\t\tid &&\n\t\t\t\t\t\t\t\ttypeof id === \"string\" &&\n\t\t\t\t\t\t\t\tprocess.argv.push(\"--enable-proposed-api\", id),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t`Unexpected value for \\`enable-proposed-api\\` in argv.json. Expected array of extension ids.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"log-level\":\n\t\t\t\t\tif (typeof argvValue === \"string\") {\n\t\t\t\t\t\tprocess.argv.push(\"--log\", argvValue);\n\t\t\t\t\t} else if (Array.isArray(argvValue)) {\n\t\t\t\t\t\tfor (const value of argvValue) {\n\t\t\t\t\t\t\tprocess.argv.push(\"--log\", value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"use-inmemory-secretstorage\":\n\t\t\t\t\tif (argvValue) {\n\t\t\t\t\t\tprocess.argv.push(\"--use-inmemory-secretstorage\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Following features are disabled from the runtime:\n\t// `CalculateNativeWinOcclusion` - Disable native window occlusion tracker (https://groups.google.com/a/chromium.org/g/embedder-dev/c/ZF3uHHyWLKw/m/VDN2hDXMAAAJ)\n\tconst featuresToDisable = `CalculateNativeWinOcclusion,${app.commandLine.getSwitchValue(\"disable-features\")}`;\n\tapp.commandLine.appendSwitch(\"disable-features\", featuresToDisable);\n\n\t// Blink features to configure.\n\t// `FontMatchingCTMigration` - Siwtch font matching on macOS to Appkit (Refs https://github.com/microsoft/vscode/issues/224496#issuecomment-2270418470).\n\tconst blinkFeaturesToDisable = `FontMatchingCTMigration,${app.commandLine.getSwitchValue(\"disable-blink-features\")}`;\n\tapp.commandLine.appendSwitch(\n\t\t\"disable-blink-features\",\n\t\tblinkFeaturesToDisable,\n\t);\n\n\t// Support JS Flags\n\tconst jsFlags = getJSFlags(cliArgs);\n\tif (jsFlags) {\n\t\tapp.commandLine.appendSwitch(\"js-flags\", jsFlags);\n\t}\n\n\treturn argvConfig;\n}\n\nfunction readArgvConfigSync() {\n\t// Read or create the argv.json config file sync before app('ready')\n\tconst argvConfigPath = getArgvConfigPath();\n\tlet argvConfig;\n\ttry {\n\t\targvConfig = parse(fs.readFileSync(argvConfigPath).toString());\n\t} catch (error) {\n\t\tif (error && error.code === \"ENOENT\") {\n\t\t\tcreateDefaultArgvConfigSync(argvConfigPath);\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`Unable to read argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Fallback to default\n\tif (!argvConfig) {\n\t\targvConfig = {};\n\t}\n\n\treturn argvConfig;\n}\n\n/**\n * @param {string} argvConfigPath\n */\nfunction createDefaultArgvConfigSync(argvConfigPath) {\n\ttry {\n\t\t// Ensure argv config parent exists\n\t\tconst argvConfigPathDirname = path.dirname(argvConfigPath);\n\t\tif (!fs.existsSync(argvConfigPathDirname)) {\n\t\t\tfs.mkdirSync(argvConfigPathDirname);\n\t\t}\n\n\t\t// Default argv content\n\t\tconst defaultArgvConfigContent = [\n\t\t\t\"// This configuration file allows you to pass permanent command line arguments to VS Code.\",\n\t\t\t\"// Only a subset of arguments is currently supported to reduce the likelihood of breaking\",\n\t\t\t\"// the installation.\",\n\t\t\t\"//\",\n\t\t\t\"// PLEASE DO NOT CHANGE WITHOUT UNDERSTANDING THE IMPACT\",\n\t\t\t\"//\",\n\t\t\t\"// NOTE: Changing this file requires a restart of VS Code.\",\n\t\t\t\"{\",\n\t\t\t\"\t// Use software rendering instead of hardware accelerated rendering.\",\n\t\t\t\"\t// This can help in cases where you see rendering issues in VS Code.\",\n\t\t\t'\t// \"disable-hardware-acceleration\": true',\n\t\t\t\"}\",\n\t\t];\n\n\t\t// Create initial argv.json with default content\n\t\tfs.writeFileSync(argvConfigPath, defaultArgvConfigContent.join(\"\\n\"));\n\t} catch (error) {\n\t\tconsole.error(\n\t\t\t`Unable to create argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`,\n\t\t);\n\t}\n}\n\nfunction getArgvConfigPath() {\n\tconst vscodePortable = process.env[\"VSCODE_PORTABLE\"];\n\tif (vscodePortable) {\n\t\treturn path.join(vscodePortable, \"argv.json\");\n\t}\n\n\tlet dataFolderName = product.dataFolderName;\n\tif (process.env[\"VSCODE_DEV\"]) {\n\t\tdataFolderName = `${dataFolderName}-dev`;\n\t}\n\n\t// @ts-ignore\n\treturn path.join(os.homedir(), dataFolderName, \"argv.json\");\n}\n\nfunction configureCrashReporter() {\n\tlet crashReporterDirectory = args[\"crash-reporter-directory\"];\n\tlet submitURL = \"\";\n\tif (crashReporterDirectory) {\n\t\tcrashReporterDirectory = path.normalize(crashReporterDirectory);\n\n\t\tif (!path.isAbsolute(crashReporterDirectory)) {\n\t\t\tconsole.error(\n\t\t\t\t`The path '${crashReporterDirectory}' specified for --crash-reporter-directory must be absolute.`,\n\t\t\t);\n\t\t\tapp.exit(1);\n\t\t}\n\n\t\tif (!fs.existsSync(crashReporterDirectory)) {\n\t\t\ttry {\n\t\t\t\tfs.mkdirSync(crashReporterDirectory, { recursive: true });\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`The path '${crashReporterDirectory}' specified for --crash-reporter-directory does not seem to exist or cannot be created.`,\n\t\t\t\t);\n\t\t\t\tapp.exit(1);\n\t\t\t}\n\t\t}\n\n\t\t// Crashes are stored in the crashDumps directory by default, so we\n\t\t// need to change that directory to the provided one\n\t\tconsole.log(\n\t\t\t`Found --crash-reporter-directory argument. Setting crashDumps directory to be '${crashReporterDirectory}'`,\n\t\t);\n\t\tapp.setPath(\"crashDumps\", crashReporterDirectory);\n\t}\n\n\t// Otherwise we configure the crash reporter from product.json\n\telse {\n\t\tconst appCenter = product.appCenter;\n\t\tif (appCenter) {\n\t\t\tconst isWindows = process.platform === \"win32\";\n\t\t\tconst isLinux = process.platform === \"linux\";\n\t\t\tconst isDarwin = process.platform === \"darwin\";\n\t\t\tconst crashReporterId = argvConfig[\"crash-reporter-id\"];\n\t\t\tconst uuidPattern =\n\t\t\t\t/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\t\t\tif (uuidPattern.test(crashReporterId)) {\n\t\t\t\tif (isWindows) {\n\t\t\t\t\tswitch (process.arch) {\n\t\t\t\t\t\tcase \"x64\":\n\t\t\t\t\t\t\tsubmitURL = appCenter[\"win32-x64\"];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"arm64\":\n\t\t\t\t\t\t\tsubmitURL = appCenter[\"win32-arm64\"];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (isDarwin) {\n\t\t\t\t\tif (product.darwinUniversalAssetId) {\n\t\t\t\t\t\tsubmitURL = appCenter[\"darwin-universal\"];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (process.arch) {\n\t\t\t\t\t\t\tcase \"x64\":\n\t\t\t\t\t\t\t\tsubmitURL = appCenter[\"darwin\"];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"arm64\":\n\t\t\t\t\t\t\t\tsubmitURL = appCenter[\"darwin-arm64\"];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (isLinux) {\n\t\t\t\t\tsubmitURL = appCenter[\"linux-x64\"];\n\t\t\t\t}\n\t\t\t\tsubmitURL = submitURL.concat(\n\t\t\t\t\t\"&uid=\",\n\t\t\t\t\tcrashReporterId,\n\t\t\t\t\t\"&iid=\",\n\t\t\t\t\tcrashReporterId,\n\t\t\t\t\t\"&sid=\",\n\t\t\t\t\tcrashReporterId,\n\t\t\t\t);\n\t\t\t\t// Send the id for child node process that are explicitly starting crash reporter.\n\t\t\t\t// For vscode this is ExtensionHost process currently.\n\t\t\t\tconst argv = process.argv;\n\t\t\t\tconst endOfArgsMarkerIndex = argv.indexOf(\"--\");\n\t\t\t\tif (endOfArgsMarkerIndex === -1) {\n\t\t\t\t\targv.push(\"--crash-reporter-id\", crashReporterId);\n\t\t\t\t} else {\n\t\t\t\t\t// if the we have an argument \"--\" (end of argument marker)\n\t\t\t\t\t// we cannot add arguments at the end. rather, we add\n\t\t\t\t\t// arguments before the \"--\" marker.\n\t\t\t\t\targv.splice(\n\t\t\t\t\t\tendOfArgsMarkerIndex,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t\"--crash-reporter-id\",\n\t\t\t\t\t\tcrashReporterId,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Start crash reporter for all processes\n\tconst productName =\n\t\t(product.crashReporter\n\t\t\t? product.crashReporter.productName\n\t\t\t: undefined) || product.nameShort;\n\tconst companyName =\n\t\t(product.crashReporter\n\t\t\t? product.crashReporter.companyName\n\t\t\t: undefined) || \"Microsoft\";\n\tconst uploadToServer = Boolean(\n\t\t!process.env[\"VSCODE_DEV\"] && submitURL && !crashReporterDirectory,\n\t);\n\tcrashReporter.start({\n\t\tcompanyName,\n\t\tproductName: process.env[\"VSCODE_DEV\"]\n\t\t\t? `${productName} Dev`\n\t\t\t: productName,\n\t\tsubmitURL,\n\t\tuploadToServer,\n\t\tcompress: true,\n\t});\n}\n\n/**\n * @param {NativeParsedArgs} cliArgs\n * @returns {string | null}\n */\nfunction getJSFlags(cliArgs) {\n\tconst jsFlags = [];\n\n\t// Add any existing JS flags we already got from the command line\n\tif (cliArgs[\"js-flags\"]) {\n\t\tjsFlags.push(cliArgs[\"js-flags\"]);\n\t}\n\n\treturn jsFlags.length > 0 ? jsFlags.join(\" \") : null;\n}\n\n/**\n * @returns {NativeParsedArgs}\n */\nfunction parseCLIArgs() {\n\treturn minimist(process.argv, {\n\t\tstring: [\n\t\t\t\"user-data-dir\",\n\t\t\t\"locale\",\n\t\t\t\"js-flags\",\n\t\t\t\"crash-reporter-directory\",\n\t\t],\n\t\tboolean: [\"disable-chromium-sandbox\"],\n\t\tdefault: {\n\t\t\tsandbox: true,\n\t\t},\n\t\talias: {\n\t\t\t\"no-sandbox\": \"sandbox\",\n\t\t},\n\t});\n}\n\nfunction registerListeners() {\n\t/**\n\t * macOS: when someone drops a file to the not-yet running VSCode, the open-file event fires even before\n\t * the app-ready event. We listen very early for open-file and remember this upon startup as path to open.\n\t *\n\t * @type {string[]}\n\t */\n\tconst macOpenFiles = [];\n\t// @ts-ignore\n\tglobal[\"macOpenFiles\"] = macOpenFiles;\n\tapp.on(\"open-file\", (event, path) => {\n\t\tmacOpenFiles.push(path);\n\t});\n\n\t/**\n\t * macOS: react to open-url requests.\n\t *\n\t * @type {string[]}\n\t */\n\tconst openUrls = [];\n\tconst onOpenUrl =\n\t\t/**\n\t\t * @param {{ preventDefault: () => void; }} event\n\t\t * @param {string} url\n\t\t */\n\t\t(event, url) => {\n\t\t\tevent.preventDefault();\n\n\t\t\topenUrls.push(url);\n\t\t};\n\n\tapp.on(\"will-finish-launching\", () => {\n\t\tapp.on(\"open-url\", onOpenUrl);\n\t});\n\n\t// @ts-ignore\n\tglobal[\"getOpenUrls\"] = () => {\n\t\tapp.removeListener(\"open-url\", onOpenUrl);\n\n\t\treturn openUrls;\n\t};\n}\n\n/**\n * @returns {string | undefined} the location to use for the code cache\n * or `undefined` if disabled.\n */\nfunction getCodeCachePath() {\n\t// explicitly disabled via CLI args\n\tif (process.argv.indexOf(\"--no-cached-data\") > 0) {\n\t\treturn undefined;\n\t}\n\n\t// running out of sources\n\tif (process.env[\"VSCODE_DEV\"]) {\n\t\treturn undefined;\n\t}\n\n\t// require commit id\n\tconst commit = product.commit;\n\tif (!commit) {\n\t\treturn undefined;\n\t}\n\n\treturn path.join(userDataPath, \"CachedData\", commit);\n}\n\n/**\n * @param {string | undefined} dir\n * @returns {Promise<string | undefined>}\n */\nasync function mkdirpIgnoreError(dir) {\n\tif (typeof dir === \"string\") {\n\t\ttry {\n\t\t\tawait fs.promises.mkdir(dir, { recursive: true });\n\n\t\t\treturn dir;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n//#region NLS Support\n\n/**\n * @param {string} appLocale\n * @returns string\n */\nfunction processZhLocale(appLocale) {\n\tif (appLocale.startsWith(\"zh\")) {\n\t\tconst region = appLocale.split(\"-\")[1];\n\t\t// On Windows and macOS, Chinese languages returned by\n\t\t// app.getPreferredSystemLanguages() start with zh-hans\n\t\t// for Simplified Chinese or zh-hant for Traditional Chinese,\n\t\t// so we can easily determine whether to use Simplified or Traditional.\n\t\t// However, on Linux, Chinese languages returned by that same API\n\t\t// are of the form zh-XY, where XY is a country code.\n\t\t// For China (CN), Singapore (SG), and Malaysia (MY)\n\t\t// country codes, assume they use Simplified Chinese.\n\t\t// For other cases, assume they use Traditional.\n\t\tif ([\"hans\", \"cn\", \"sg\", \"my\"].includes(region)) {\n\t\t\treturn \"zh-cn\";\n\t\t}\n\t\treturn \"zh-tw\";\n\t}\n\treturn appLocale;\n}\n\n/**\n * Resolve the NLS configuration\n *\n * @return {Promise<INLSConfiguration>}\n */\nasync function resolveNlsConfiguration() {\n\t// First, we need to test a user defined locale.\n\t// If it fails we try the app locale.\n\t// If that fails we fall back to English.\n\n\tconst nlsConfiguration = nlsConfigurationPromise\n\t\t? await nlsConfigurationPromise\n\t\t: undefined;\n\tif (nlsConfiguration) {\n\t\treturn nlsConfiguration;\n\t}\n\n\t// Try to use the app locale which is only valid\n\t// after the app ready event has been fired.\n\n\tlet userLocale = app.getLocale();\n\tif (!userLocale) {\n\t\treturn {\n\t\t\tuserLocale: \"en\",\n\t\t\tosLocale,\n\t\t\tresolvedLanguage: \"en\",\n\t\t\tdefaultMessagesFile: path.join(__dirname, \"nls.messages.json\"),\n\n\t\t\t// NLS: below 2 are a relic from old times only used by vscode-nls and deprecated\n\t\t\tlocale: \"en\",\n\t\t\tavailableLanguages: {},\n\t\t};\n\t}\n\n\t// See above the comment about the loader and case sensitiveness\n\tuserLocale = processZhLocale(userLocale.toLowerCase());\n\n\treturn resolveNLSConfiguration({\n\t\tuserLocale,\n\t\tosLocale,\n\t\tcommit: product.commit,\n\t\tuserDataPath,\n\t\tnlsMetadataPath: __dirname,\n\t});\n}\n\n/**\n * Language tags are case insensitive however an amd loader is case sensitive\n * To make this work on case preserving & insensitive FS we do the following:\n * the language bundles have lower case language tags and we always lower case\n * the locale we receive from the user or OS.\n *\n * @param {{ locale: string | undefined; }} argvConfig\n * @returns {string | undefined}\n */\nfunction getUserDefinedLocale(argvConfig) {\n\tconst locale = args[\"locale\"];\n\tif (locale) {\n\t\treturn locale.toLowerCase(); // a directly provided --locale always wins\n\t}\n\n\treturn typeof argvConfig?.locale === \"string\"\n\t\t? argvConfig.locale.toLowerCase()\n\t\t: undefined;\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["codeCachePath", "argvConfig", "path", "userLocale"]
}
