{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/bootstrap-fork.js"],
  "sourcesContent": ["import * as bootstrapAmd from \"./bootstrap-amd.js\";\nimport * as bootstrapNode from \"./bootstrap-node.js\";\n// ESM-comment-begin\n// const performance = require('./vs/base/common/performance');\n// const bootstrapNode = require('./bootstrap-node');\n// const bootstrapAmd = require('./bootstrap-amd');\n// ESM-comment-end\n// ESM-uncomment-begin\nimport * as performance from \"./vs/base/common/performance.js\";\n// ESM-uncomment-end\n\nperformance.mark(\"code/fork/start\");\n\n// Crash reporter\nconfigureCrashReporter();\n\n// Remove global paths from the node module lookup (node.js only)\nbootstrapNode.removeGlobalNodeJsModuleLookupPaths();\n\n// Enable ASAR in our forked processes\nbootstrapNode.enableASARSupport();\n\nif (process.env[\"VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH\"]) {\n\tbootstrapNode.devInjectNodeModuleLookupPath(\n\t\tprocess.env[\"VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH\"],\n\t);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env[\"VSCODE_PIPE_LOGGING\"] === \"true\") {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env[\"VSCODE_HANDLES_UNCAUGHT_ERRORS\"]) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env[\"VSCODE_PARENT_PID\"]) {\n\tterminateWhenParentTerminates();\n}\n\n// Load AMD entry point\nbootstrapAmd.load(process.env[\"VSCODE_AMD_ENTRYPOINT\"]);\n\n//#region Helpers\n\nfunction pipeLoggingToParent() {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t *\n\t * @param {ArrayLike<unknown>} args\n\t */\n\tfunction safeToArray(args) {\n\t\t/**\n\t\t * @type {string[]}\n\t\t */\n\t\tconst seen = [];\n\t\tconst argsArray = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === \"undefined\") {\n\t\t\t\t\targ = \"undefined\";\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, (key, value) => {\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn \"[Circular]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn \"Output omitted for a large object that exceeds the limits\";\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {{ type: string; severity: string; arguments: string; }} arg\n\t */\n\tfunction safeSend(arg) {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\t/**\n\t * @param {unknown} obj\n\t */\n\tfunction isObject(obj) {\n\t\treturn (\n\t\t\ttypeof obj === \"object\" &&\n\t\t\tobj !== null &&\n\t\t\t!Array.isArray(obj) &&\n\t\t\t!(obj instanceof RegExp) &&\n\t\t\t!(obj instanceof Date)\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {'log' | 'warn' | 'error'} severity\n\t * @param {string} args\n\t */\n\tfunction safeSendConsoleMessage(severity, args) {\n\t\tsafeSend({ type: \"__$console\", severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t *\n\t * @param {'log' | 'info' | 'warn' | 'error'} method\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapConsoleMethod(method, severity) {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => {},\n\t\t\tget: () => () => {\n\t\t\t\tsafeSendConsoleMessage(severity, safeToArray(arguments));\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t *\n\t * @param {'stdout' | 'stderr'} streamName\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapStream(streamName, severity) {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\t/** @type string */\n\t\tlet buf = \"\";\n\n\t\tObject.defineProperty(stream, \"write\", {\n\t\t\tset: () => {},\n\t\t\tget:\n\t\t\t\t() =>\n\t\t\t\t(\n\t\t\t\t\t/** @type {string | Buffer | Uint8Array} */ chunk,\n\t\t\t\t\t/** @type {BufferEncoding | undefined} */ encoding,\n\t\t\t\t\t/** @type {((err?: Error | undefined) => void) | undefined} */ callback,\n\t\t\t\t) => {\n\t\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\t\tconst eol =\n\t\t\t\t\t\tbuf.length > MAX_STREAM_BUFFER_LENGTH\n\t\t\t\t\t\t\t? buf.length\n\t\t\t\t\t\t\t: buf.lastIndexOf(\"\\n\");\n\t\t\t\t\tif (eol !== -1) {\n\t\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env[\"VSCODE_VERBOSE_LOGGING\"] === \"true\") {\n\t\twrapConsoleMethod(\"info\", \"log\");\n\t\twrapConsoleMethod(\"log\", \"log\");\n\t\twrapConsoleMethod(\"warn\", \"warn\");\n\t\twrapConsoleMethod(\"error\", \"error\");\n\t} else {\n\t\tconsole.log = () => {\n\t\t\t/* ignore */\n\t\t};\n\t\tconsole.warn = () => {\n\t\t\t/* ignore */\n\t\t};\n\t\tconsole.info = () => {\n\t\t\t/* ignore */\n\t\t};\n\t\twrapConsoleMethod(\"error\", \"error\");\n\t}\n\n\twrapStream(\"stderr\", \"error\");\n\twrapStream(\"stdout\", \"log\");\n}\n\nfunction handleExceptions() {\n\t// Handle uncaught exceptions\n\tprocess.on(\"uncaughtException\", (err) => {\n\t\tconsole.error(\"Uncaught Exception: \", err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on(\"unhandledRejection\", (reason) => {\n\t\tconsole.error(\"Unhandled Promise Rejection: \", reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates() {\n\tconst parentPid = Number(process.env[\"VSCODE_PARENT_PID\"]);\n\n\tif (typeof parentPid === \"number\" && !isNaN(parentPid)) {\n\t\tsetInterval(() => {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter() {\n\tconst crashReporterProcessType =\n\t\tprocess.env[\"VSCODE_CRASH_REPORTER_PROCESS_TYPE\"];\n\tif (crashReporterProcessType) {\n\t\ttry {\n\t\t\t// @ts-ignore\n\t\t\tif (\n\t\t\t\tprocess[\"crashReporter\"] &&\n\t\t\t\ttypeof process[\"crashReporter\"].addExtraParameter ===\n\t\t\t\t\t\"function\" /* Electron only */\n\t\t\t) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tprocess[\"crashReporter\"].addExtraParameter(\n\t\t\t\t\t\"processType\",\n\t\t\t\t\tcrashReporterProcessType,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
