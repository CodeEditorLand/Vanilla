import*as b from"path";import*as S from"fs";import{fileURLToPath as M}from"url";import{createRequire as A,register as U}from"node:module";import{createRequire as T}from"node:module";var N=T(import.meta.url),d={exports:{}},_={BUILD_INSERT_PRODUCT_CONFIGURATION:"BUILD_INSERT_PRODUCT_CONFIGURATION"};_.BUILD_INSERT_PRODUCT_CONFIGURATION&&(_=N("../product.json"));var h={BUILD_INSERT_PACKAGE_CONFIGURATION:"BUILD_INSERT_PACKAGE_CONFIGURATION"};h.BUILD_INSERT_PACKAGE_CONFIGURATION&&(h=N("../package.json"));d.exports.product=_;d.exports.pkg=h;var P=d.exports.product,C=d.exports.pkg;import*as l from"path";import*as O from"fs";import{fileURLToPath as k}from"url";import{createRequire as L}from"node:module";var D=L(import.meta.url),c={exports:{}},I=l.dirname(k(import.meta.url));Error.stackTraceLimit=100;if(!process.env.VSCODE_HANDLES_SIGPIPE){let e=!1;process.on("SIGPIPE",()=>{e||(e=!0,console.error(new Error("Unexpected SIGPIPE")))})}function R(){try{typeof process.env.VSCODE_CWD!="string"&&(process.env.VSCODE_CWD=process.cwd()),process.platform==="win32"&&process.chdir(l.dirname(process.execPath))}catch(e){console.error(e)}}R();c.exports.devInjectNodeModuleLookupPath=function(e){if(!process.env.VSCODE_DEV)return;if(!e)throw new Error("Missing injectPath");D("node:module").register("./bootstrap-import.js",{parentURL:import.meta.url,data:e})};c.exports.removeGlobalNodeJsModuleLookupPaths=function(){if(typeof process?.versions?.electron=="string")return;let e=D("module"),r=e.globalPaths,t=e._resolveLookupPaths;e._resolveLookupPaths=function(n,i){let o=t(n,i);if(Array.isArray(o)){let s=0;for(;s<o.length&&o[o.length-1-s]===r[r.length-1-s];)s++;return o.slice(0,o.length-s)}return o}};c.exports.configurePortable=function(e){let r=l.dirname(I);function t(a){return process.env.VSCODE_DEV?r:process.platform==="darwin"?a.dirname(a.dirname(a.dirname(r))):a.dirname(a.dirname(r))}function n(a){if(process.env.VSCODE_PORTABLE)return process.env.VSCODE_PORTABLE;if(process.platform==="win32"||process.platform==="linux")return a.join(t(a),"data");let f=e.portable||`${e.applicationName}-portable-data`;return a.join(a.dirname(t(a)),f)}let i=n(l),o=!("target"in e)&&O.existsSync(i),s=l.join(i,"tmp"),p=o&&O.existsSync(s);return o?process.env.VSCODE_PORTABLE=i:delete process.env.VSCODE_PORTABLE,p&&(process.platform==="win32"?(process.env.TMP=s,process.env.TEMP=s):process.env.TMPDIR=s),{portableDataPath:i,isPortable:o}};c.exports.enableASARSupport=function(){};c.exports.fileUriFromPath=function(e,r){let t=e.replace(/\\/g,"/");t.length>0&&t.charAt(0)!=="/"&&(t=`/${t}`);let n;return r.isWindows&&t.startsWith("//")?n=encodeURI(`${r.scheme||"file"}:${t}`):n=encodeURI(`${r.scheme||"file"}://${r.fallbackAuthority||""}${t}`),n.replace(/#/g,"%23")};var J=c.exports.devInjectNodeModuleLookupPath,q=c.exports.removeGlobalNodeJsModuleLookupPaths,W=c.exports.configurePortable,K=c.exports.enableASARSupport,H=c.exports.fileUriFromPath;var u={exports:{}};(function(){function r(o){let s=[];typeof o=="number"&&s.push("code/timeOrigin",o);function p(f){s.push(f,Date.now())}function a(){let f=[];for(let m=0;m<s.length;m+=2)f.push({name:s[m],startTime:s[m+1]});return f}return{mark:p,getMarks:a}}function t(){if(typeof performance=="object"&&typeof performance.mark=="function"&&!performance.nodeTiming)return typeof performance.timeOrigin!="number"&&!performance.timing?r():{mark(o){performance.mark(o)},getMarks(){let o=performance.timeOrigin;typeof o!="number"&&(o=performance.timing.navigationStart||performance.timing.redirectStart||performance.timing.fetchStart);let s=[{name:"code/timeOrigin",startTime:Math.round(o)}];for(let p of performance.getEntriesByType("mark"))s.push({name:p.name,startTime:Math.round(o+p.startTime)});return s}};if(typeof process=="object"){let o=performance?.timeOrigin;return r(o)}else return console.trace("perf-util loaded in UNKNOWN environment"),r()}function n(o){return o.MonacoPerformanceMarks||(o.MonacoPerformanceMarks=t()),o.MonacoPerformanceMarks}var i;typeof global=="object"?i=global:typeof self=="object"?i=self:i={},typeof u=="object"&&typeof u.exports=="object"?u.exports=n(i):(console.trace("perf-util defined in UNKNOWN context (neither requirejs or commonjs)"),i.perf=n(i))})();var g=u.exports.mark,Q=u.exports.getMarks;var y=A(import.meta.url),x={exports:{}},F=b.dirname(M(import.meta.url));(process.env.ELECTRON_RUN_AS_NODE||process.versions.electron)&&U(`data:text/javascript;base64,${Buffer.from(`
	export async function resolve(specifier, context, nextResolve) {
		if (specifier === 'fs') {
			return {
				format: 'builtin',
				shortCircuit: true,
				url: 'node:original-fs'
			};
		}

		// Defer to the next hook in the chain, which would be the
		// Node.js default resolve if this is the last user-specified loader.
		return nextResolve(specifier, context);
	}`).toString("base64")}`,import.meta.url);globalThis._VSCODE_PRODUCT_JSON={...P};if(process.env.VSCODE_DEV)try{let e=y("../product.overrides.json");globalThis._VSCODE_PRODUCT_JSON=Object.assign(globalThis._VSCODE_PRODUCT_JSON,e)}catch{}globalThis._VSCODE_PACKAGE_JSON={...C};globalThis._VSCODE_FILE_ROOT=F;var E;function j(){return E||(E=V()),E}async function V(){g("code/amd/willLoadNls");let e,r;if(process.env.VSCODE_NLS_CONFIG)try{e=JSON.parse(process.env.VSCODE_NLS_CONFIG),e?.languagePack?.messagesFile?r=e.languagePack.messagesFile:e?.defaultMessagesFile&&(r=e.defaultMessagesFile),globalThis._VSCODE_NLS_LANGUAGE=e?.resolvedLanguage}catch(t){console.error(`Error reading VSCODE_NLS_CONFIG from environment: ${t}`)}if(!(process.env.VSCODE_DEV||!r)){try{globalThis._VSCODE_NLS_MESSAGES=JSON.parse((await S.promises.readFile(r)).toString())}catch(t){if(console.error(`Error reading NLS messages file ${r}: ${t}`),e?.languagePack?.corruptMarkerFile)try{await S.promises.writeFile(e.languagePack.corruptMarkerFile,"corrupted")}catch(n){console.error(`Error writing corrupted NLS marker file: ${n}`)}if(e?.defaultMessagesFile&&e.defaultMessagesFile!==r)try{globalThis._VSCODE_NLS_MESSAGES=JSON.parse((await S.promises.readFile(e.defaultMessagesFile)).toString())}catch(n){console.error(`Error reading default NLS messages file ${e.defaultMessagesFile}: ${n}`)}}return g("code/amd/didLoadNls"),e}}x.exports.load=function(e,r,t){e&&(e=`./${e}.js`,r=r||function(){},t=t||function(n){console.error(n)},j().then(()=>{g("code/fork/willLoadCode"),import(e).then(r,t)}))};var re=x.exports.load;export{re as load};
