{
  "version": 3,
  "sources": ["../../../Dependency/CodeEditorLand/Editor/Source/bootstrap-amd.js"],
  "sourcesContent": ["/**\n * @import { INLSConfiguration } from './vs/nls'\n * @import { IProductConfiguration } from './vs/base/common/product'\n */\n\nimport * as fs from \"fs\";\nimport { createRequire, register } from \"node:module\";\n// ESM-uncomment-begin\nimport * as path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { pkg, product } from \"./bootstrap-meta.js\";\nimport \"./bootstrap-node.js\";\nimport * as performance from \"./vs/base/common/performance.js\";\n\n/** @ts-ignore */\nconst require = createRequire(import.meta.url);\n/** @type any */\nconst module = { exports: {} };\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Install a hook to module resolution to map 'fs' to 'original-fs'\nif (process.env[\"ELECTRON_RUN_AS_NODE\"] || process.versions[\"electron\"]) {\n\tconst jsCode = `\n\texport async function resolve(specifier, context, nextResolve) {\n\t\tif (specifier === 'fs') {\n\t\t\treturn {\n\t\t\t\tformat: 'builtin',\n\t\t\t\tshortCircuit: true,\n\t\t\t\turl: 'node:original-fs'\n\t\t\t};\n\t\t}\n\n\t\t// Defer to the next hook in the chain, which would be the\n\t\t// Node.js default resolve if this is the last user-specified loader.\n\t\treturn nextResolve(specifier, context);\n\t}`;\n\tregister(\n\t\t`data:text/javascript;base64,${Buffer.from(jsCode).toString(\"base64\")}`,\n\t\timport.meta.url,\n\t);\n}\n// ESM-uncomment-end\n\n// VSCODE_GLOBALS: package/product.json\n/** @type Partial<IProductConfiguration> */\n// ESM-comment-begin\n// globalThis._VSCODE_PRODUCT_JSON = require('./bootstrap-meta').product;\n// ESM-comment-end\n// ESM-uncomment-begin\nglobalThis._VSCODE_PRODUCT_JSON = { ...product };\n// ESM-uncomment-end\nif (process.env[\"VSCODE_DEV\"]) {\n\t// Patch product overrides when running out of sources\n\ttry {\n\t\t// @ts-ignore\n\t\tconst overrides = require(\"../product.overrides.json\");\n\t\tglobalThis._VSCODE_PRODUCT_JSON = Object.assign(\n\t\t\tglobalThis._VSCODE_PRODUCT_JSON,\n\t\t\toverrides,\n\t\t);\n\t} catch (error) {\n\t\t/* ignore */\n\t}\n}\n// ESM-comment-begin\n// globalThis._VSCODE_PACKAGE_JSON = require('./bootstrap-meta').pkg;\n// ESM-comment-end\n// ESM-uncomment-begin\nglobalThis._VSCODE_PACKAGE_JSON = { ...pkg };\n// ESM-uncomment-end\n\n// VSCODE_GLOBALS: file root of all resources\nglobalThis._VSCODE_FILE_ROOT = __dirname;\n\n// ESM-comment-begin\n// const bootstrapNode = require('./bootstrap-node');\n// const performance = require(`./vs/base/common/performance`);\n// const fs = require('fs');\n// ESM-comment-end\n\n//#region NLS helpers\n\n/** @type {Promise<INLSConfiguration | undefined> | undefined} */\nlet setupNLSResult;\n\n/**\n * @returns {Promise<INLSConfiguration | undefined>}\n */\nfunction setupNLS() {\n\tif (!setupNLSResult) {\n\t\tsetupNLSResult = doSetupNLS();\n\t}\n\n\treturn setupNLSResult;\n}\n\n/**\n * @returns {Promise<INLSConfiguration | undefined>}\n */\nasync function doSetupNLS() {\n\tperformance.mark(\"code/amd/willLoadNls\");\n\n\t/** @type {INLSConfiguration | undefined} */\n\tlet nlsConfig;\n\n\t/** @type {string | undefined} */\n\tlet messagesFile;\n\tif (process.env[\"VSCODE_NLS_CONFIG\"]) {\n\t\ttry {\n\t\t\t/** @type {INLSConfiguration} */\n\t\t\tnlsConfig = JSON.parse(process.env[\"VSCODE_NLS_CONFIG\"]);\n\t\t\tif (nlsConfig?.languagePack?.messagesFile) {\n\t\t\t\tmessagesFile = nlsConfig.languagePack.messagesFile;\n\t\t\t} else if (nlsConfig?.defaultMessagesFile) {\n\t\t\t\tmessagesFile = nlsConfig.defaultMessagesFile;\n\t\t\t}\n\n\t\t\tglobalThis._VSCODE_NLS_LANGUAGE = nlsConfig?.resolvedLanguage;\n\t\t} catch (e) {\n\t\t\tconsole.error(\n\t\t\t\t`Error reading VSCODE_NLS_CONFIG from environment: ${e}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tif (\n\t\tprocess.env[\"VSCODE_DEV\"] || // no NLS support in dev mode\n\t\t!messagesFile // no NLS messages file\n\t) {\n\t\treturn undefined;\n\t}\n\n\ttry {\n\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse(\n\t\t\t(await fs.promises.readFile(messagesFile)).toString(),\n\t\t);\n\t} catch (error) {\n\t\tconsole.error(\n\t\t\t`Error reading NLS messages file ${messagesFile}: ${error}`,\n\t\t);\n\n\t\t// Mark as corrupt: this will re-create the language pack cache next startup\n\t\tif (nlsConfig?.languagePack?.corruptMarkerFile) {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.writeFile(\n\t\t\t\t\tnlsConfig.languagePack.corruptMarkerFile,\n\t\t\t\t\t\"corrupted\",\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Error writing corrupted NLS marker file: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to the default message file to ensure english translation at least\n\t\tif (\n\t\t\tnlsConfig?.defaultMessagesFile &&\n\t\t\tnlsConfig.defaultMessagesFile !== messagesFile\n\t\t) {\n\t\t\ttry {\n\t\t\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse(\n\t\t\t\t\t(\n\t\t\t\t\t\tawait fs.promises.readFile(\n\t\t\t\t\t\t\tnlsConfig.defaultMessagesFile,\n\t\t\t\t\t\t)\n\t\t\t\t\t).toString(),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Error reading default NLS messages file ${nlsConfig.defaultMessagesFile}: ${error}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tperformance.mark(\"code/amd/didLoadNls\");\n\n\treturn nlsConfig;\n}\n\n//#endregion\n\n//#region Loader Config\n\n// ESM-uncomment-begin\n/**\n * @param {string=} entrypoint\n * @param {(value: any) => void} [onLoad]\n * @param {(err: Error) => void} [onError]\n */\nmodule.exports.load = (entrypoint, onLoad, onError) => {\n\tif (!entrypoint) {\n\t\treturn;\n\t}\n\n\tentrypoint = `./${entrypoint}.js`;\n\n\tonLoad = onLoad || (() => {});\n\tonError =\n\t\tonError ||\n\t\t((err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\n\tsetupNLS().then(() => {\n\t\tperformance.mark(`code/fork/willLoadCode`);\n\t\timport(entrypoint).then(onLoad, onError);\n\t});\n};\n// ESM-uncomment-end\n\n// ESM-comment-begin\n// // @ts-ignore\n// const loader = require('./vs/loader');\n//\n// loader.config({\n// baseUrl: bootstrapNode.fileUriFromPath(__dirname, { isWindows: process.platform === 'win32' }),\n// catchError: true,\n// nodeRequire,\n// amdModulesPattern: /^vs\\//,\n// recordStats: true\n// });\n//\n// // Running in Electron\n// if (process.env['ELECTRON_RUN_AS_NODE'] || process.versions['electron']) {\n// loader.define('fs', ['original-fs'], function (/** @type {import('fs')} */originalFS) {\n// return originalFS;  // replace the patched electron fs with the original node fs for all AMD code\n// });\n// }\n//\n// /**\n// * @param {string=} entrypoint\n// * @param {(value: any) => void} [onLoad]\n// * @param {(err: Error) => void} [onError]\n// */\n// module.exports.load = function (entrypoint, onLoad, onError) {\n// if (!entrypoint) {\n// return;\n// }\n//\n// // code cache config\n// if (process.env['VSCODE_CODE_CACHE_PATH']) {\n// loader.config({\n// nodeCachedData: {\n// path: process.env['VSCODE_CODE_CACHE_PATH'],\n// seed: entrypoint\n// }\n// });\n// }\n//\n// onLoad = onLoad || function () { };\n// onError = onError || function (err) { console.error(err); };\n//\n// setupNLS().then(() => {\n// performance.mark('code/fork/willLoadCode');\n// loader([entrypoint], onLoad, onError);\n// });\n// };\n// ESM-comment-end\n\n//#endregion\n\n// ESM-uncomment-begin\nexport const load = module.exports.load;\n// ESM-uncomment-end\n"],
  "mappings": "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",
  "names": ["require", "error"]
}
