{
  "version": 3,
  "sources": ["../../../../Dependency/CodeEditorLand/Editor/Source/vs/css.build.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ninterface ICSSPluginConfig {\n\tinlineResources?: boolean | 'base64';\n\tinlineResourcesLimit?: number;\n}\n\ninterface ICSSEntryPointData {\n\tmoduleName: string;\n\tcontents: string;\n\tfsPath: string;\n}\n\n// This file gets compiled also with the standalone editor,\n// so we cannot depend on types from node.d.ts\ninterface INodeFS {\n\treadFileSync(path: string, encoding: 'utf8'): string;\n\treadFileSync(path: string): INodeBuffer;\n}\ninterface INodeBuffer {\n\tlength: number;\n\ttoString(encoding?: 'base64'): string;\n}\ninterface INodePath {\n\tdirname(p: string): string;\n\tjoin(...paths: string[]): string;\n}\n\nconst nodeReq = <T>(module: string): T | undefined => {\n\tif (typeof (<any>require).__$__nodeRequire === 'function') {\n\t\treturn (<any>require).__$__nodeRequire(module);\n\t}\n\treturn undefined;\n};\n\nconst fs = nodeReq<INodeFS>('fs');\nconst path = nodeReq<INodePath>('path');\n\nlet inlineResources: boolean | 'base64' = false;\nlet inlineResourcesLimit: number = 5000;\n\nconst contentsMap: { [moduleName: string]: string } = {};\nconst pathMap: { [moduleName: string]: string } = {};\nconst entryPoints: { [entryPoint: string]: ICSSEntryPointData[] } = {};\nconst inlinedResources: string[] = [];\n\n/**\n * Invoked by the loader at build-time\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (!fs) {\n\t\tthrow new Error(`Cannot load files without 'fs'!`);\n\t}\n\tconfig = config || {};\n\tconst myConfig = <ICSSPluginConfig>(config['vs/css'] || {});\n\tinlineResources = (typeof myConfig.inlineResources === 'undefined' ? false : myConfig.inlineResources);\n\tinlineResourcesLimit = (myConfig.inlineResourcesLimit || 5000);\n\tconst cssUrl = req.toUrl(name + '.css');\n\tlet contents = fs.readFileSync(cssUrl, 'utf8');\n\tif (contents.charCodeAt(0) === 65279 /* BOM */) {\n\t\t// Remove BOM\n\t\tcontents = contents.substring(1);\n\t}\n\tif (config.isBuild) {\n\t\tcontentsMap[name] = contents;\n\t\tpathMap[name] = cssUrl;\n\t}\n\tload({});\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function write(pluginName: string, moduleName: string, write: AMDLoader.IPluginWriteCallback): void {\n\tconst entryPoint = write.getEntryPoint();\n\n\tentryPoints[entryPoint] = entryPoints[entryPoint] || [];\n\tentryPoints[entryPoint].push({\n\t\tmoduleName: moduleName,\n\t\tcontents: contentsMap[moduleName],\n\t\tfsPath: pathMap[moduleName],\n\t});\n\n\twrite.asModule(pluginName + '!' + moduleName,\n\t\t'define([\\'vs/css!' + entryPoint + '\\'], {});'\n\t);\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function writeFile(pluginName: string, moduleName: string, req: AMDLoader.IRelativeRequire, write: AMDLoader.IPluginWriteFileCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (entryPoints && entryPoints.hasOwnProperty(moduleName)) {\n\t\tconst fileName = req.toUrl(moduleName + '.css');\n\t\tconst contents = [\n\t\t\t'/*---------------------------------------------------------',\n\t\t\t' * Copyright (c) Microsoft Corporation. All rights reserved.',\n\t\t\t' *--------------------------------------------------------*/'\n\t\t],\n\t\t\tentries = entryPoints[moduleName];\n\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\tif (inlineResources) {\n\t\t\t\tcontents.push(rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents, inlineResources === 'base64', inlineResourcesLimit));\n\t\t\t} else {\n\t\t\t\tcontents.push(rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\n\t\t\t}\n\t\t}\n\t\twrite(fileName, contents.join('\\r\\n'));\n\t}\n}\n\nexport function getInlinedResources(): string[] {\n\treturn inlinedResources || [];\n}\n\nfunction rewriteOrInlineUrls(originalFileFSPath: string, originalFile: string, newFile: string, contents: string, forceBase64: boolean, inlineByteLimit: number): string {\n\tif (!fs || !path) {\n\t\tthrow new Error(`Cannot rewrite or inline urls without 'fs' or 'path'!`);\n\t}\n\treturn CSSPluginUtilities.replaceURL(contents, (url) => {\n\t\tif (/\\.(svg|png)$/.test(url)) {\n\t\t\tconst fsPath = path.join(path.dirname(originalFileFSPath), url);\n\t\t\tconst fileContents = fs.readFileSync(fsPath);\n\n\t\t\tif (fileContents.length < inlineByteLimit) {\n\t\t\t\tconst normalizedFSPath = fsPath.replace(/\\\\/g, '/');\n\t\t\t\tinlinedResources.push(normalizedFSPath);\n\n\t\t\t\tconst MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\n\t\t\t\tlet DATA = ';base64,' + fileContents.toString('base64');\n\n\t\t\t\tif (!forceBase64 && /\\.svg$/.test(url)) {\n\t\t\t\t\t// .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n\t\t\t\t\tconst newText = fileContents.toString()\n\t\t\t\t\t\t.replace(/\"/g, '\\'')\n\t\t\t\t\t\t.replace(/%/g, '%25')\n\t\t\t\t\t\t.replace(/</g, '%3C')\n\t\t\t\t\t\t.replace(/>/g, '%3E')\n\t\t\t\t\t\t.replace(/&/g, '%26')\n\t\t\t\t\t\t.replace(/#/g, '%23')\n\t\t\t\t\t\t.replace(/\\s+/g, ' ');\n\t\t\t\t\tconst encodedData = ',' + newText;\n\t\t\t\t\tif (encodedData.length < DATA.length) {\n\t\t\t\t\t\tDATA = encodedData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn '\"data:' + MIME + DATA + '\"';\n\t\t\t}\n\t\t}\n\n\t\tconst absoluteUrl = CSSPluginUtilities.joinPaths(CSSPluginUtilities.pathOf(originalFile), url);\n\t\treturn CSSPluginUtilities.relativePath(newFile, absoluteUrl);\n\t});\n}\n\nexport function rewriteUrls(originalFile: string, newFile: string, contents: string): string {\n\treturn CSSPluginUtilities.replaceURL(contents, (url) => {\n\t\tconst absoluteUrl = CSSPluginUtilities.joinPaths(CSSPluginUtilities.pathOf(originalFile), url);\n\t\treturn CSSPluginUtilities.relativePath(newFile, absoluteUrl);\n\t});\n}\n\nexport class CSSPluginUtilities {\n\n\tpublic static startsWith(haystack: string, needle: string): boolean {\n\t\treturn haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n\t}\n\n\t/**\n\t * Find the path of a file.\n\t */\n\tpublic static pathOf(filename: string): string {\n\t\tconst lastSlash = filename.lastIndexOf('/');\n\t\tif (lastSlash !== -1) {\n\t\t\treturn filename.substr(0, lastSlash + 1);\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * A conceptual a + b for paths.\n\t * Takes into account if `a` contains a protocol.\n\t * Also normalizes the result: e.g.: a/b/ + ../c => a/c\n\t */\n\tpublic static joinPaths(a: string, b: string): string {\n\n\t\tfunction findSlashIndexAfterPrefix(haystack: string, prefix: string): number {\n\t\t\tif (CSSPluginUtilities.startsWith(haystack, prefix)) {\n\t\t\t\treturn Math.max(prefix.length, haystack.indexOf('/', prefix.length));\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet aPathStartIndex = 0;\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\n\n\t\tfunction pushPiece(pieces: string[], piece: string): void {\n\t\t\tif (piece === './') {\n\t\t\t\t// Ignore\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (piece === '../') {\n\t\t\t\tconst prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\n\t\t\t\tif (prevPiece && prevPiece === '/') {\n\t\t\t\t\t// Ignore\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (prevPiece && prevPiece !== '../') {\n\t\t\t\t\t// Pop\n\t\t\t\t\tpieces.pop();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Push\n\t\t\tpieces.push(piece);\n\t\t}\n\n\t\tfunction push(pieces: string[], path: string): void {\n\t\t\twhile (path.length > 0) {\n\t\t\t\tconst slashIndex = path.indexOf('/');\n\t\t\t\tconst piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\n\t\t\t\tpath = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\n\t\t\t\tpushPiece(pieces, piece);\n\t\t\t}\n\t\t}\n\n\t\tlet pieces: string[] = [];\n\t\tpush(pieces, a.substr(aPathStartIndex));\n\t\tif (b.length > 0 && b.charAt(0) === '/') {\n\t\t\tpieces = [];\n\t\t}\n\t\tpush(pieces, b);\n\n\t\treturn a.substring(0, aPathStartIndex) + pieces.join('');\n\t}\n\n\tpublic static commonPrefix(str1: string, str2: string): string {\n\t\tconst len = Math.min(str1.length, str2.length);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tif (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\n\t\t\t\treturn str1.substring(0, i);\n\t\t\t}\n\t\t}\n\t\treturn str1.substring(0, len);\n\t}\n\n\tpublic static commonFolderPrefix(fromPath: string, toPath: string): string {\n\t\tconst prefix = CSSPluginUtilities.commonPrefix(fromPath, toPath);\n\t\tconst slashIndex = prefix.lastIndexOf('/');\n\t\tif (slashIndex === -1) {\n\t\t\treturn '';\n\t\t}\n\t\treturn prefix.substring(0, slashIndex + 1);\n\t}\n\n\tpublic static relativePath(fromPath: string, toPath: string): string {\n\t\tif (CSSPluginUtilities.startsWith(toPath, '/') || CSSPluginUtilities.startsWith(toPath, 'http://') || CSSPluginUtilities.startsWith(toPath, 'https://')) {\n\t\t\treturn toPath;\n\t\t}\n\n\t\t// Ignore common folder prefix\n\t\tconst prefix = CSSPluginUtilities.commonFolderPrefix(fromPath, toPath);\n\t\tfromPath = fromPath.substr(prefix.length);\n\t\ttoPath = toPath.substr(prefix.length);\n\n\t\tconst upCount = fromPath.split('/').length;\n\t\tlet result = '';\n\t\tfor (let i = 1; i < upCount; i++) {\n\t\t\tresult += '../';\n\t\t}\n\t\treturn result + toPath;\n\t}\n\n\tpublic static replaceURL(contents: string, replacer: (url: string) => string): string {\n\t\t// Use \")\" as the terminator as quotes are oftentimes not used at all\n\t\treturn contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, (_: string, ...matches: string[]) => {\n\t\t\tlet url = matches[0];\n\t\t\t// Eliminate starting quotes (the initial whitespace is not captured)\n\t\t\tif (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\n\t\t\t\turl = url.substring(1);\n\t\t\t}\n\t\t\t// The ending whitespace is captured\n\t\t\twhile (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\n\t\t\t\turl = url.substring(0, url.length - 1);\n\t\t\t}\n\t\t\t// Eliminate ending quotes\n\t\t\tif (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\n\t\t\t\turl = url.substring(0, url.length - 1);\n\t\t\t}\n\n\t\t\tif (!CSSPluginUtilities.startsWith(url, 'data:') && !CSSPluginUtilities.startsWith(url, 'http://') && !CSSPluginUtilities.startsWith(url, 'https://')) {\n\t\t\t\turl = replacer(url);\n\t\t\t}\n\n\t\t\treturn 'url(' + url + ')';\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["load", "write", "pieces", "path"]
}
