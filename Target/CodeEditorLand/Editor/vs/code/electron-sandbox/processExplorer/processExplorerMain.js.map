{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/processExplorer.css';\nimport '../../../base/browser/ui/codicons/codiconStyles.js'; // make sure codicon css is loaded\nimport { localize } from '../../../nls.js';\nimport { $, append, createStyleSheet } from '../../../base/browser/dom.js';\nimport { IListVirtualDelegate } from '../../../base/browser/ui/list/list.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { IDataSource, ITreeNode, ITreeRenderer } from '../../../base/browser/ui/tree/tree.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { ProcessItem } from '../../../base/common/processes.js';\nimport { IContextMenuItem } from '../../../base/parts/contextmenu/common/contextmenu.js';\nimport { popup } from '../../../base/parts/contextmenu/electron-sandbox/contextmenu.js';\nimport { ipcRenderer } from '../../../base/parts/sandbox/electron-sandbox/globals.js';\nimport { IRemoteDiagnosticError, isRemoteDiagnosticError } from '../../../platform/diagnostics/common/diagnostics.js';\nimport { ByteSize } from '../../../platform/files/common/files.js';\nimport { ElectronIPCMainProcessService } from '../../../platform/ipc/electron-sandbox/mainProcessService.js';\nimport { ProcessExplorerData, ProcessExplorerStyles, ProcessExplorerWindowConfiguration } from '../../../platform/issue/common/issue.js';\nimport { INativeHostService } from '../../../platform/native/common/native.js';\nimport { NativeHostService } from '../../../platform/native/common/nativeHostService.js';\nimport { getIconsStyleSheet } from '../../../platform/theme/browser/iconsStyleSheet.js';\nimport { applyZoom, zoomIn, zoomOut } from '../../../platform/window/electron-sandbox/window.js';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent.js';\nimport { KeyCode } from '../../../base/common/keyCodes.js';\nimport { mainWindow } from '../../../base/browser/window.js';\n\nconst DEBUG_FLAGS_PATTERN = /\\s--inspect(?:-brk|port)?=(?<port>\\d+)?/;\nconst DEBUG_PORT_PATTERN = /\\s--inspect-port=(?<port>\\d+)/;\n\nclass ProcessListDelegate implements IListVirtualDelegate<MachineProcessInformation | ProcessItem | IRemoteDiagnosticError> {\n\tgetHeight(element: MachineProcessInformation | ProcessItem | IRemoteDiagnosticError) {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: ProcessInformation | MachineProcessInformation | ProcessItem | IRemoteDiagnosticError) {\n\t\tif (isProcessItem(element)) {\n\t\t\treturn 'process';\n\t\t}\n\n\t\tif (isMachineProcessInformation(element)) {\n\t\t\treturn 'machine';\n\t\t}\n\n\t\tif (isRemoteDiagnosticError(element)) {\n\t\t\treturn 'error';\n\t\t}\n\n\t\tif (isProcessInformation(element)) {\n\t\t\treturn 'header';\n\t\t}\n\n\t\treturn '';\n\t}\n}\n\ninterface IProcessItemTemplateData extends IProcessRowTemplateData {\n\treadonly CPU: HTMLElement;\n\treadonly memory: HTMLElement;\n\treadonly PID: HTMLElement;\n}\n\ninterface IProcessRowTemplateData {\n\treadonly name: HTMLElement;\n}\n\nclass ProcessTreeDataSource implements IDataSource<ProcessTree, ProcessInformation | MachineProcessInformation | ProcessItem | IRemoteDiagnosticError> {\n\thasChildren(element: ProcessTree | ProcessInformation | MachineProcessInformation | ProcessItem | IRemoteDiagnosticError): boolean {\n\t\tif (isRemoteDiagnosticError(element)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isProcessItem(element)) {\n\t\t\treturn !!element.children?.length;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tgetChildren(element: ProcessTree | ProcessInformation | MachineProcessInformation | ProcessItem | IRemoteDiagnosticError) {\n\t\tif (isProcessItem(element)) {\n\t\t\treturn element.children ? element.children : [];\n\t\t}\n\n\t\tif (isRemoteDiagnosticError(element)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (isProcessInformation(element)) {\n\t\t\t// If there are multiple process roots, return these, otherwise go directly to the root process\n\t\t\tif (element.processRoots.length > 1) {\n\t\t\t\treturn element.processRoots;\n\t\t\t} else {\n\t\t\t\treturn [element.processRoots[0].rootProcess];\n\t\t\t}\n\t\t}\n\n\t\tif (isMachineProcessInformation(element)) {\n\t\t\treturn [element.rootProcess];\n\t\t}\n\n\t\treturn [element.processes];\n\t}\n}\n\nclass ProcessHeaderTreeRenderer implements ITreeRenderer<ProcessInformation, void, IProcessItemTemplateData> {\n\ttemplateId: string = 'header';\n\n\trenderTemplate(container: HTMLElement): IProcessItemTemplateData {\n\t\tconst row = append(container, $('.row'));\n\t\tconst name = append(row, $('.nameLabel'));\n\t\tconst CPU = append(row, $('.cpu'));\n\t\tconst memory = append(row, $('.memory'));\n\t\tconst PID = append(row, $('.pid'));\n\t\treturn { name, CPU, memory, PID };\n\t}\n\n\trenderElement(node: ITreeNode<ProcessInformation, void>, index: number, templateData: IProcessItemTemplateData, height: number | undefined): void {\n\t\ttemplateData.name.textContent = localize('name', \"Process Name\");\n\t\ttemplateData.CPU.textContent = localize('cpu', \"CPU (%)\");\n\t\ttemplateData.PID.textContent = localize('pid', \"PID\");\n\t\ttemplateData.memory.textContent = localize('memory', \"Memory (MB)\");\n\n\t}\n\n\tdisposeTemplate(templateData: any): void {\n\t\t// Nothing to do\n\t}\n}\n\nclass MachineRenderer implements ITreeRenderer<MachineProcessInformation, void, IProcessRowTemplateData> {\n\ttemplateId: string = 'machine';\n\trenderTemplate(container: HTMLElement): IProcessRowTemplateData {\n\t\tconst data = Object.create(null);\n\t\tconst row = append(container, $('.row'));\n\t\tdata.name = append(row, $('.nameLabel'));\n\t\treturn data;\n\t}\n\trenderElement(node: ITreeNode<MachineProcessInformation, void>, index: number, templateData: IProcessRowTemplateData, height: number | undefined): void {\n\t\ttemplateData.name.textContent = node.element.name;\n\t}\n\tdisposeTemplate(templateData: IProcessRowTemplateData): void {\n\t\t// Nothing to do\n\t}\n}\n\nclass ErrorRenderer implements ITreeRenderer<IRemoteDiagnosticError, void, IProcessRowTemplateData> {\n\ttemplateId: string = 'error';\n\trenderTemplate(container: HTMLElement): IProcessRowTemplateData {\n\t\tconst data = Object.create(null);\n\t\tconst row = append(container, $('.row'));\n\t\tdata.name = append(row, $('.nameLabel'));\n\t\treturn data;\n\t}\n\trenderElement(node: ITreeNode<IRemoteDiagnosticError, void>, index: number, templateData: IProcessRowTemplateData, height: number | undefined): void {\n\t\ttemplateData.name.textContent = node.element.errorMessage;\n\t}\n\tdisposeTemplate(templateData: IProcessRowTemplateData): void {\n\t\t// Nothing to do\n\t}\n}\n\n\nclass ProcessRenderer implements ITreeRenderer<ProcessItem, void, IProcessItemTemplateData> {\n\tconstructor(private platform: string, private totalMem: number, private mapPidToName: Map<number, string>) { }\n\n\ttemplateId: string = 'process';\n\trenderTemplate(container: HTMLElement): IProcessItemTemplateData {\n\t\tconst row = append(container, $('.row'));\n\n\t\tconst name = append(row, $('.nameLabel'));\n\t\tconst CPU = append(row, $('.cpu'));\n\t\tconst memory = append(row, $('.memory'));\n\t\tconst PID = append(row, $('.pid'));\n\n\t\treturn { name, CPU, PID, memory };\n\t}\n\trenderElement(node: ITreeNode<ProcessItem, void>, index: number, templateData: IProcessItemTemplateData, height: number | undefined): void {\n\t\tconst { element } = node;\n\n\t\tconst pid = element.pid.toFixed(0);\n\n\t\tlet name = element.name;\n\t\tif (this.mapPidToName.has(element.pid)) {\n\t\t\tname = this.mapPidToName.get(element.pid)!;\n\t\t}\n\n\t\ttemplateData.name.textContent = name;\n\t\ttemplateData.name.title = element.cmd;\n\n\t\ttemplateData.CPU.textContent = element.load.toFixed(0);\n\t\ttemplateData.PID.textContent = pid;\n\t\ttemplateData.PID.parentElement!.id = `pid-${pid}`;\n\n\t\tconst memory = this.platform === 'win32' ? element.mem : (this.totalMem * (element.mem / 100));\n\t\ttemplateData.memory.textContent = (memory / ByteSize.MB).toFixed(0);\n\t}\n\n\tdisposeTemplate(templateData: IProcessItemTemplateData): void {\n\t\t// Nothing to do\n\t}\n}\n\ninterface MachineProcessInformation {\n\tname: string;\n\trootProcess: ProcessItem | IRemoteDiagnosticError;\n}\n\ninterface ProcessInformation {\n\tprocessRoots: MachineProcessInformation[];\n}\n\ninterface ProcessTree {\n\tprocesses: ProcessInformation;\n}\n\nfunction isMachineProcessInformation(item: any): item is MachineProcessInformation {\n\treturn !!item.name && !!item.rootProcess;\n}\n\nfunction isProcessInformation(item: any): item is ProcessInformation {\n\treturn !!item.processRoots;\n}\n\nfunction isProcessItem(item: any): item is ProcessItem {\n\treturn !!item.pid;\n}\n\nclass ProcessExplorer {\n\tprivate lastRequestTime: number;\n\n\tprivate mapPidToName = new Map<number, string>();\n\n\tprivate nativeHostService: INativeHostService;\n\n\tprivate tree: DataTree<any, ProcessTree | MachineProcessInformation | ProcessItem | ProcessInformation | IRemoteDiagnosticError, any> | undefined;\n\n\tconstructor(windowId: number, private data: ProcessExplorerData) {\n\t\tconst mainProcessService = new ElectronIPCMainProcessService(windowId);\n\t\tthis.nativeHostService = new NativeHostService(windowId, mainProcessService) as INativeHostService;\n\n\t\tthis.applyStyles(data.styles);\n\t\tthis.setEventHandlers(data);\n\n\t\tipcRenderer.on('vscode:pidToNameResponse', (event: unknown, pidToNames: [number, string][]) => {\n\t\t\tthis.mapPidToName.clear();\n\n\t\t\tfor (const [pid, name] of pidToNames) {\n\t\t\t\tthis.mapPidToName.set(pid, name);\n\t\t\t}\n\t\t});\n\n\t\tipcRenderer.on('vscode:listProcessesResponse', async (event: unknown, processRoots: MachineProcessInformation[]) => {\n\t\t\tprocessRoots.forEach((info, index) => {\n\t\t\t\tif (isProcessItem(info.rootProcess)) {\n\t\t\t\t\tinfo.rootProcess.name = index === 0 ? `${this.data.applicationName} main` : 'remote agent';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!this.tree) {\n\t\t\t\tawait this.createProcessTree(processRoots);\n\t\t\t} else {\n\t\t\t\tthis.tree.setInput({ processes: { processRoots } });\n\t\t\t\tthis.tree.layout(mainWindow.innerHeight, mainWindow.innerWidth);\n\t\t\t}\n\n\t\t\tthis.requestProcessList(0);\n\t\t});\n\n\t\tthis.lastRequestTime = Date.now();\n\t\tipcRenderer.send('vscode:pidToNameRequest');\n\t\tipcRenderer.send('vscode:listProcesses');\n\t}\n\n\tprivate setEventHandlers(data: ProcessExplorerData): void {\n\t\tmainWindow.document.onkeydown = (e: KeyboardEvent) => {\n\t\t\tconst cmdOrCtrlKey = data.platform === 'darwin' ? e.metaKey : e.ctrlKey;\n\n\t\t\t// Cmd/Ctrl + w closes issue window\n\t\t\tif (cmdOrCtrlKey && e.keyCode === 87) {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\n\t\t\t\tipcRenderer.send('vscode:closeProcessExplorer');\n\t\t\t}\n\n\t\t\t// Cmd/Ctrl + zooms in\n\t\t\tif (cmdOrCtrlKey && e.keyCode === 187) {\n\t\t\t\tzoomIn(mainWindow);\n\t\t\t}\n\n\t\t\t// Cmd/Ctrl - zooms out\n\t\t\tif (cmdOrCtrlKey && e.keyCode === 189) {\n\t\t\t\tzoomOut(mainWindow);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async createProcessTree(processRoots: MachineProcessInformation[]): Promise<void> {\n\t\tconst container = mainWindow.document.getElementById('process-list');\n\t\tif (!container) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { totalmem } = await this.nativeHostService.getOSStatistics();\n\n\t\tconst renderers = [\n\t\t\tnew ProcessRenderer(this.data.platform, totalmem, this.mapPidToName),\n\t\t\tnew ProcessHeaderTreeRenderer(),\n\t\t\tnew MachineRenderer(),\n\t\t\tnew ErrorRenderer()\n\t\t];\n\n\t\tthis.tree = new DataTree('processExplorer',\n\t\t\tcontainer,\n\t\t\tnew ProcessListDelegate(),\n\t\t\trenderers,\n\t\t\tnew ProcessTreeDataSource(),\n\t\t\t{\n\t\t\t\tidentityProvider: {\n\t\t\t\t\tgetId: (element: ProcessTree | ProcessItem | MachineProcessInformation | ProcessInformation | IRemoteDiagnosticError) => {\n\t\t\t\t\t\tif (isProcessItem(element)) {\n\t\t\t\t\t\t\treturn element.pid.toString();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isRemoteDiagnosticError(element)) {\n\t\t\t\t\t\t\treturn element.hostName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isProcessInformation(element)) {\n\t\t\t\t\t\t\treturn 'processes';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isMachineProcessInformation(element)) {\n\t\t\t\t\t\t\treturn element.name;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn 'header';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.tree.setInput({ processes: { processRoots } });\n\t\tthis.tree.layout(mainWindow.innerHeight, mainWindow.innerWidth);\n\t\tthis.tree.onKeyDown(e => {\n\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\tif (event.keyCode === KeyCode.KeyE && event.altKey) {\n\t\t\t\tconst selectionPids = this.getSelectedPids();\n\t\t\t\tvoid Promise.all(selectionPids.map((pid) => this.nativeHostService.killProcess(pid, 'SIGTERM'))).then(() => this.tree?.refresh());\n\t\t\t}\n\t\t});\n\t\tthis.tree.onContextMenu(e => {\n\t\t\tif (isProcessItem(e.element)) {\n\t\t\t\tthis.showContextMenu(e.element, true);\n\t\t\t}\n\t\t});\n\n\t\tcontainer.style.height = `${mainWindow.innerHeight}px`;\n\n\t\tmainWindow.addEventListener('resize', () => {\n\t\t\tcontainer.style.height = `${mainWindow.innerHeight}px`;\n\t\t\tthis.tree?.layout(mainWindow.innerHeight, mainWindow.innerWidth);\n\t\t});\n\t}\n\n\tprivate isDebuggable(cmd: string): boolean {\n\t\tconst matches = DEBUG_FLAGS_PATTERN.exec(cmd);\n\t\treturn (matches && matches.groups!.port !== '0') || cmd.indexOf('node ') >= 0 || cmd.indexOf('node.exe') >= 0;\n\t}\n\n\tprivate attachTo(item: ProcessItem) {\n\t\tconst config: any = {\n\t\t\ttype: 'node',\n\t\t\trequest: 'attach',\n\t\t\tname: `process ${item.pid}`\n\t\t};\n\n\t\tlet matches = DEBUG_FLAGS_PATTERN.exec(item.cmd);\n\t\tif (matches) {\n\t\t\tconfig.port = Number(matches.groups!.port);\n\t\t} else {\n\t\t\t// no port -> try to attach via pid (send SIGUSR1)\n\t\t\tconfig.processId = String(item.pid);\n\t\t}\n\n\t\t// a debug-port=n or inspect-port=n overrides the port\n\t\tmatches = DEBUG_PORT_PATTERN.exec(item.cmd);\n\t\tif (matches) {\n\t\t\t// override port\n\t\t\tconfig.port = Number(matches.groups!.port);\n\t\t}\n\n\t\tipcRenderer.send('vscode:workbenchCommand', { id: 'debug.startFromConfig', from: 'processExplorer', args: [config] });\n\t}\n\n\tprivate applyStyles(styles: ProcessExplorerStyles): void {\n\t\tconst styleElement = createStyleSheet();\n\t\tconst content: string[] = [];\n\n\t\tif (styles.listFocusBackground) {\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.focused { background-color: ${styles.listFocusBackground}; }`);\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.focused:hover { background-color: ${styles.listFocusBackground}; }`);\n\t\t}\n\n\t\tif (styles.listFocusForeground) {\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`);\n\t\t}\n\n\t\tif (styles.listActiveSelectionBackground) {\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.selected { background-color: ${styles.listActiveSelectionBackground}; }`);\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.selected:hover { background-color: ${styles.listActiveSelectionBackground}; }`);\n\t\t}\n\n\t\tif (styles.listActiveSelectionForeground) {\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.selected { color: ${styles.listActiveSelectionForeground}; }`);\n\t\t}\n\n\t\tif (styles.listHoverBackground) {\n\t\t\tcontent.push(`.monaco-list-row:hover:not(.selected):not(.focused) { background-color: ${styles.listHoverBackground}; }`);\n\t\t}\n\n\t\tif (styles.listHoverForeground) {\n\t\t\tcontent.push(`.monaco-list-row:hover:not(.selected):not(.focused) { color: ${styles.listHoverForeground}; }`);\n\t\t}\n\n\t\tif (styles.listFocusOutline) {\n\t\t\tcontent.push(`.monaco-list:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n\t\t}\n\n\t\tif (styles.listHoverOutline) {\n\t\t\tcontent.push(`.monaco-list-row:hover { outline: 1px dashed ${styles.listHoverOutline}; outline-offset: -1px; }`);\n\t\t}\n\n\t\t// Scrollbars\n\t\tif (styles.scrollbarShadowColor) {\n\t\t\tcontent.push(`\n\t\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\t\tbox-shadow: ${styles.scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t\t}\n\n\t\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\t\tbox-shadow: ${styles.scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t\t}\n\n\t\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\t\tbox-shadow: ${styles.scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tif (styles.scrollbarSliderBackgroundColor) {\n\t\t\tcontent.push(`\n\t\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\t\tbackground: ${styles.scrollbarSliderBackgroundColor};\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tif (styles.scrollbarSliderHoverBackgroundColor) {\n\t\t\tcontent.push(`\n\t\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\t\tbackground: ${styles.scrollbarSliderHoverBackgroundColor};\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tif (styles.scrollbarSliderActiveBackgroundColor) {\n\t\t\tcontent.push(`\n\t\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\t\tbackground: ${styles.scrollbarSliderActiveBackgroundColor};\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tstyleElement.textContent = content.join('\\n');\n\n\t\tif (styles.color) {\n\t\t\tmainWindow.document.body.style.color = styles.color;\n\t\t}\n\t}\n\n\tprivate showContextMenu(item: ProcessItem, isLocal: boolean) {\n\t\tconst items: IContextMenuItem[] = [];\n\t\tconst pid = Number(item.pid);\n\n\t\tif (isLocal) {\n\t\t\titems.push({\n\t\t\t\taccelerator: 'Alt+E',\n\t\t\t\tlabel: localize('killProcess', \"Kill Process\"),\n\t\t\t\tclick: () => {\n\t\t\t\t\tthis.nativeHostService.killProcess(pid, 'SIGTERM');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\titems.push({\n\t\t\t\tlabel: localize('forceKillProcess', \"Force Kill Process\"),\n\t\t\t\tclick: () => {\n\t\t\t\t\tthis.nativeHostService.killProcess(pid, 'SIGKILL');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\titems.push({\n\t\t\t\ttype: 'separator'\n\t\t\t});\n\t\t}\n\n\t\titems.push({\n\t\t\tlabel: localize('copy', \"Copy\"),\n\t\t\tclick: () => {\n\t\t\t\t// Collect the selected pids\n\t\t\t\tconst selectionPids = this.getSelectedPids();\n\t\t\t\t// If the selection does not contain the right clicked item, copy the right clicked\n\t\t\t\t// item only.\n\t\t\t\tif (!selectionPids?.includes(pid)) {\n\t\t\t\t\tselectionPids.length = 0;\n\t\t\t\t\tselectionPids.push(pid);\n\t\t\t\t}\n\t\t\t\tconst rows = selectionPids?.map(e => mainWindow.document.getElementById(`pid-${e}`)).filter(e => !!e) as HTMLElement[];\n\t\t\t\tif (rows) {\n\t\t\t\t\tconst text = rows.map(e => e.innerText).filter(e => !!e) as string[];\n\t\t\t\t\tthis.nativeHostService.writeClipboardText(text.join('\\n'));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\titems.push({\n\t\t\tlabel: localize('copyAll', \"Copy All\"),\n\t\t\tclick: () => {\n\t\t\t\tconst processList = mainWindow.document.getElementById('process-list');\n\t\t\t\tif (processList) {\n\t\t\t\t\tthis.nativeHostService.writeClipboardText(processList.innerText);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (item && isLocal && this.isDebuggable(item.cmd)) {\n\t\t\titems.push({\n\t\t\t\ttype: 'separator'\n\t\t\t});\n\n\t\t\titems.push({\n\t\t\t\tlabel: localize('debug', \"Debug\"),\n\t\t\t\tclick: () => {\n\t\t\t\t\tthis.attachTo(item);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpopup(items);\n\t}\n\n\tprivate requestProcessList(totalWaitTime: number): void {\n\t\tsetTimeout(() => {\n\t\t\tconst nextRequestTime = Date.now();\n\t\t\tconst waited = totalWaitTime + nextRequestTime - this.lastRequestTime;\n\t\t\tthis.lastRequestTime = nextRequestTime;\n\n\t\t\t// Wait at least a second between requests.\n\t\t\tif (waited > 1000) {\n\t\t\t\tipcRenderer.send('vscode:pidToNameRequest');\n\t\t\t\tipcRenderer.send('vscode:listProcesses');\n\t\t\t} else {\n\t\t\t\tthis.requestProcessList(waited);\n\t\t\t}\n\t\t}, 200);\n\t}\n\n\tprivate getSelectedPids() {\n\t\treturn this.tree?.getSelection()?.map(e => {\n\t\t\tif (!e || !('pid' in e)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn e.pid;\n\t\t}).filter(e => !!e) as number[];\n\t}\n}\n\nfunction createCodiconStyleSheet() {\n\tconst codiconStyleSheet = createStyleSheet();\n\tcodiconStyleSheet.id = 'codiconStyles';\n\n\tconst iconsStyleSheet = getIconsStyleSheet(undefined);\n\tfunction updateAll() {\n\t\tcodiconStyleSheet.textContent = iconsStyleSheet.getCSS();\n\t}\n\n\tconst delayer = new RunOnceScheduler(updateAll, 0);\n\ticonsStyleSheet.onDidChange(() => delayer.schedule());\n\tdelayer.schedule();\n}\n\nexport function startup(configuration: ProcessExplorerWindowConfiguration): void {\n\tconst platformClass = configuration.data.platform === 'win32' ? 'windows' : configuration.data.platform === 'linux' ? 'linux' : 'mac';\n\tmainWindow.document.body.classList.add(platformClass); // used by our fonts\n\tcreateCodiconStyleSheet();\n\tapplyZoom(configuration.data.zoomLevel, mainWindow);\n\n\tnew ProcessExplorer(configuration.windowId, configuration.data);\n}\n"],
  "mappings": "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",
  "names": []
}
