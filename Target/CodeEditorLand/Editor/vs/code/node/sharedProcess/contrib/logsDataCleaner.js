var d=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=(t,i,e,o)=>{for(var r=o>1?void 0:o?g(i,e):i,l=t.length-1,s;l>=0;l--)(s=t[l])&&(r=(o?s(i,e,r):s(r))||r);return o&&r&&d(i,e,r),r},a=(t,i)=>(e,o)=>i(e,o,t);import{RunOnceScheduler as h}from"../../../../../vs/base/common/async.js";import{onUnexpectedError as S}from"../../../../../vs/base/common/errors.js";import{Disposable as f}from"../../../../../vs/base/common/lifecycle.js";import{Schemas as u}from"../../../../../vs/base/common/network.js";import{join as w}from"../../../../../vs/base/common/path.js";import{basename as x,dirname as y}from"../../../../../vs/base/common/resources.js";import{Promises as v}from"../../../../../vs/base/node/pfs.js";import{IEnvironmentService as I}from"../../../../../vs/platform/environment/common/environment.js";import{ILogService as P}from"../../../../../vs/platform/log/common/log.js";let c=class extends f{constructor(e,o){super();this.environmentService=e;this.logService=o;this._register(new h(()=>{this.cleanUpOldLogs()},10*1e3)).schedule()}async cleanUpOldLogs(){this.logService.trace("[logs cleanup]: Starting to clean up old logs.");try{const e=x(this.environmentService.logsHome),o=y(this.environmentService.logsHome.with({scheme:u.file})).fsPath,s=(await v.readdir(o)).filter(n=>/^\d{8}T\d{6}$/.test(n)).sort().filter(n=>n!==e),m=s.slice(0,Math.max(0,s.length-9));m.length>0&&(this.logService.trace(`[logs cleanup]: Removing log folders '${m.join(", ")}'`),await Promise.all(m.map(n=>v.rm(w(o,n)))))}catch(e){S(e)}}};c=p([a(0,I),a(1,P)],c);export{c as LogsDataCleaner};
