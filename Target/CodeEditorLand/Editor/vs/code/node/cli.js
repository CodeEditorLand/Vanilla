import{spawn as S}from"child_process";import{chmodSync as I,existsSync as M,readFileSync as j,statSync as C,truncateSync as q,unlinkSync as D}from"fs";import{homedir as B,release as W,tmpdir as G}from"os";import{DeferredPromise as z}from"../../base/common/async.js";import{CancellationTokenSource as J}from"../../base/common/cancellation.js";import{Event as w}from"../../base/common/event.js";import{isUNC as K,randomPath as L}from"../../base/common/extpath.js";import{FileAccess as Q}from"../../base/common/network.js";import{dirname as N,isAbsolute as H,join as F,resolve as X}from"../../base/common/path.js";import{isMacintosh as Y,isWindows as E}from"../../base/common/platform.js";import{randomPort as Z}from"../../base/common/ports.js";import{cwd as ee}from"../../base/common/process.js";import{URI as te}from"../../base/common/uri.js";import{whenDeleted as U,writeFileSync as g}from"../../base/node/pfs.js";import{findFreePort as R}from"../../base/node/ports.js";import{addUNCHostToAllowlist as oe}from"../../base/node/unc.js";import{NATIVE_CLI_COMMANDS as re}from"../../platform/environment/node/argv.js";import{addArg as d,parseCLIProcessArgv as se}from"../../platform/environment/node/argvHelper.js";import{getStdinFilePath as ie,hasStdinWithoutTty as ne,readFromStdin as ae,stdinDataListener as ce}from"../../platform/environment/node/stdin.js";import{createWaitMarkerFileSync as le}from"../../platform/environment/node/wait.js";import{watchFileContents as pe}from"../../platform/files/node/watcher/nodejs/nodejsWatcherLib.js";import T from"../../platform/product/common/product.js";import{Utils as fe}from"../../platform/profiling/common/profiling.js";function de(o){return!!o["install-source"]||!!o["list-extensions"]||!!o["install-extension"]||!!o["uninstall-extension"]||!!o["update-extensions"]||!!o["locate-extension"]||!!o.telemetry}async function me(o){let t;try{t=se(o)}catch{return}for(const r of re)if(t[r]){if(!T.tunnelApplicationName)return;const s={...process.env};delete s.ELECTRON_RUN_AS_NODE;const n=o.slice(o.indexOf(r)+1);return new Promise((c,m)=>{let l;const u=["ignore","pipe","pipe"];if(process.env.VSCODE_DEV)l=S("cargo",["run","--",r,...n],{cwd:F(ue(),"cli"),stdio:u,env:s});else{const P=process.platform==="darwin"?F(N(N(process.execPath)),"Resources","app"):N(process.execPath),e=F(P,"bin",`${T.tunnelApplicationName}${E?".exe":""}`);l=S(e,[r,...n],{cwd:ee(),stdio:u,env:s})}l.stdout.pipe(process.stdout),l.stderr.pipe(process.stderr),l.on("exit",c),l.on("error",m)})}if(t.help){const r=`${T.applicationName}${E?".exe":""}`}else if(!t.version)if(t["locate-shell-integration-path"]){let r;switch(t["locate-shell-integration-path"]){case"bash":r="shellIntegration-bash.sh";break;case"pwsh":r="shellIntegration.ps1";break;case"zsh":r="shellIntegration-rc.zsh";break;case"fish":r="fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish";break;default:throw new Error("Error using --locate-shell-integration-path: Invalid shell type")}}else if(de(t)){await(await import(["./cliProcessMain.js"].join("/"))).main(t);return}else if(t["file-write"]){const r=t._[0],s=t._[1];if(E)for(const n of[r,s])K(n)&&oe(te.file(n).authority);if(!r||!s||r===s||!H(r)||!H(s)||!M(r)||!C(r).isFile()||!M(s)||!C(s).isFile())throw new Error("Using --file-write with invalid arguments.");try{let n=0,c=!1;t["file-chmod"]&&(n=C(s).mode,n&128||(I(s,n|128),c=!0));const m=j(r);E?(q(s,0),g(s,m,{flag:"r+"})):g(s,m),c&&I(s,n)}catch(n){throw n.message=`Error using --file-write: ${n.message}`,n}}else{const r={...process.env,ELECTRON_NO_ATTACH_CONSOLE:"1"};delete r.ELECTRON_RUN_AS_NODE;const s=[];t.verbose&&(r.ELECTRON_ENABLE_LOGGING="1"),(t.verbose||t.status)&&s.push(async e=>{e.stdout?.on("data",i=>{}),e.stderr?.on("data",i=>{}),await w.toPromise(w.fromNodeEventEmitter(e,"exit"))});const n=t._.some(e=>e==="-");n&&(t._=t._.filter(e=>e!=="-"),o=o.filter(e=>e!=="-"));let c;if(ne())if(n){c=ie();try{const e=new z;await ae(c,!!t.verbose,()=>e.complete()),t.wait||s.push(()=>e.p),d(o,c),d(o,"--skip-add-to-recently-opened")}catch{c=void 0}}else s.push(e=>ce(1e3).then(i=>{}));const m=Y&&W()>"20.0.0";let l;if(t.wait&&(l=le(t.verbose),l&&d(o,"--waitMarkerFilePath",l),s.push(async e=>{let i;m?i=new Promise(a=>{e.on("exit",(h,p)=>{(h!==0||p)&&a()})}):i=w.toPromise(w.fromNodeEventEmitter(e,"exit"));try{await Promise.race([U(l),w.toPromise(w.fromNodeEventEmitter(e,"error")),i])}finally{c&&D(c)}})),t["prof-startup"]){const e="127.0.0.1",i=await R(Z(),10,3e3),a=await R(i+1,10,3e3),h=await R(a+1,10,3e3);if(i*a*h===0)throw new Error("Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.");const p=L(B(),"prof");d(o,`--inspect-brk=${e}:${i}`),d(o,`--remote-debugging-port=${e}:${a}`),d(o,`--inspect-brk-extensions=${e}:${h}`),d(o,"--prof-startup-prefix",p),d(o,"--no-cached-data"),g(p,o.slice(-6).join("|")),s.push(async O=>{class b{static async start($,k,_){const A=await import("v8-inspect-profiler");let x;try{x=await A.startProfiling({..._,host:e})}catch{}return{async stop(){if(!x)return;let y="";const f=await x.stop();process.env.VSCODE_DEV||(f.profile=fe.rewriteAbsolutePaths(f.profile,"piiRemoved"),y=".txt"),g(`${k}.${$}.cpuprofile${y}`,JSON.stringify(f.profile,void 0,4))}}}}try{const v=b.start("main",p,{port:i}),$=b.start("extHost",p,{port:h,tries:300}),k=b.start("renderer",p,{port:a,tries:200,target:y=>y.filter(f=>f.webSocketDebuggerUrl?f.type==="page"?f.url.indexOf("workbench/workbench.html")>0||f.url.indexOf("workbench/workbench-dev.html")>0||f.url.indexOf("workbench/workbench.esm.html")>0||f.url.indexOf("workbench/workbench-dev.esm.html")>0:!0:!1)[0]}),_=await v,A=await $,x=await k;await U(p),await _.stop(),await x.stop(),await A.stop(),g(p,"")}catch{}})}const u={detached:!0,env:r};t.verbose||(u.stdio="ignore");let P;if(m){const e=["-n","-g"];if(e.push("-a",process.execPath),t.verbose||t.status){e.push("--wait-apps");for(const i of t.verbose?["stdout","stderr"]:["stdout"]){const a=L(G(),`code-${i}`);g(a,""),e.push(`--${i}`,a),s.push(async h=>{try{const p=i==="stdout"?process.stdout:process.stderr,O=new J;h.on("close",()=>{setTimeout(()=>O.dispose(!0),200)}),await pe(a,b=>p.write(b),()=>{},O.token)}finally{D(a)}})}}for(const i in r)i!=="_"&&(e.push("--env"),e.push(`${i}=${r[i]}`));if(e.push("--args",...o.slice(2)),r.VSCODE_DEV){const i=".",a=e.indexOf(i);a!==-1&&(e[a]=X(i))}P=S("open",e,{...u,env:{}})}else!t.verbose&&t.status&&(u.stdio=["ignore","pipe","ignore"]),P=S(process.execPath,o.slice(2),u);return Promise.all(s.map(e=>e(P)))}}function ue(){return N(Q.asFileUri("").fsPath)}function V(o){setTimeout(()=>process.exit(o),0)}me(process.argv).then(()=>V(0)).then(null,o=>{V(1)});export{me as main};
