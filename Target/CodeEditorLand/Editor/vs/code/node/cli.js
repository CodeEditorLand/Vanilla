import{spawn as y}from"child_process";import{chmodSync as I,existsSync as M,readFileSync as j,statSync as C,truncateSync as q,unlinkSync as D}from"fs";import{homedir as B,release as W,tmpdir as G}from"os";import{Event as w}from"../../base/common/event.js";import{isAbsolute as L,resolve as z,join as F,dirname as N}from"../../base/common/path.js";import{isMacintosh as J,isWindows as S}from"../../base/common/platform.js";import{randomPort as K}from"../../base/common/ports.js";import{whenDeleted as H,writeFileSync as g}from"../../base/node/pfs.js";import{findFreePort as R}from"../../base/node/ports.js";import{watchFileContents as Q}from"../../platform/files/node/watcher/nodejs/nodejsWatcherLib.js";import"../../platform/environment/common/argv.js";import{NATIVE_CLI_COMMANDS as X}from"../../platform/environment/node/argv.js";import{addArg as d,parseCLIProcessArgv as Y}from"../../platform/environment/node/argvHelper.js";import{getStdinFilePath as Z,hasStdinWithoutTty as ee,readFromStdin as te,stdinDataListener as oe}from"../../platform/environment/node/stdin.js";import{createWaitMarkerFileSync as re}from"../../platform/environment/node/wait.js";import T from"../../platform/product/common/product.js";import{CancellationTokenSource as ie}from"../../base/common/cancellation.js";import{isUNC as se,randomPath as U}from"../../base/common/extpath.js";import{Utils as ne}from"../../platform/profiling/common/profiling.js";import{FileAccess as ae}from"../../base/common/network.js";import{cwd as ce}from"../../base/common/process.js";import{addUNCHostToAllowlist as le}from"../../base/node/unc.js";import{URI as pe}from"../../base/common/uri.js";import{DeferredPromise as fe}from"../../base/common/async.js";function de(o){return!!o["install-source"]||!!o["list-extensions"]||!!o["install-extension"]||!!o["uninstall-extension"]||!!o["update-extensions"]||!!o["locate-extension"]||!!o.telemetry}async function me(o){let t;try{t=Y(o)}catch{return}for(const r of X)if(t[r]){if(!T.tunnelApplicationName)return;const i={...process.env};delete i.ELECTRON_RUN_AS_NODE;const n=o.slice(o.indexOf(r)+1);return new Promise((c,m)=>{let l;const u=["ignore","pipe","pipe"];if(process.env.VSCODE_DEV)l=y("cargo",["run","--",r,...n],{cwd:F(ue(),"cli"),stdio:u,env:i});else{const P=process.platform==="darwin"?F(N(N(process.execPath)),"Resources","app"):N(process.execPath),e=F(P,"bin",`${T.tunnelApplicationName}${S?".exe":""}`);l=y(e,[r,...n],{cwd:ce(),stdio:u,env:i})}l.stdout.pipe(process.stdout),l.stderr.pipe(process.stderr),l.on("exit",c),l.on("error",m)})}if(t.help){const r=`${T.applicationName}${S?".exe":""}`}else if(!t.version)if(t["locate-shell-integration-path"]){let r;switch(t["locate-shell-integration-path"]){case"bash":r="shellIntegration-bash.sh";break;case"pwsh":r="shellIntegration.ps1";break;case"zsh":r="shellIntegration-rc.zsh";break;case"fish":r="fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish";break;default:throw new Error("Error using --locate-shell-integration-path: Invalid shell type")}}else if(de(t)){await(await import(["./cliProcessMain.js"].join("/"))).main(t);return}else if(t["file-write"]){const r=t._[0],i=t._[1];if(S)for(const n of[r,i])se(n)&&le(pe.file(n).authority);if(!r||!i||r===i||!L(r)||!L(i)||!M(r)||!C(r).isFile()||!M(i)||!C(i).isFile())throw new Error("Using --file-write with invalid arguments.");try{let n=0,c=!1;t["file-chmod"]&&(n=C(i).mode,n&128||(I(i,n|128),c=!0));const m=j(r);S?(q(i,0),g(i,m,{flag:"r+"})):g(i,m),c&&I(i,n)}catch(n){throw n.message=`Error using --file-write: ${n.message}`,n}}else{const r={...process.env,ELECTRON_NO_ATTACH_CONSOLE:"1"};delete r.ELECTRON_RUN_AS_NODE;const i=[];t.verbose&&(r.ELECTRON_ENABLE_LOGGING="1"),(t.verbose||t.status)&&i.push(async e=>{e.stdout?.on("data",s=>{}),e.stderr?.on("data",s=>{}),await w.toPromise(w.fromNodeEventEmitter(e,"exit"))});const n=t._.some(e=>e==="-");n&&(t._=t._.filter(e=>e!=="-"),o=o.filter(e=>e!=="-"));let c;if(ee())if(n){c=Z();try{const e=new fe;await te(c,!!t.verbose,()=>e.complete()),t.wait||i.push(()=>e.p),d(o,c),d(o,"--skip-add-to-recently-opened")}catch{c=void 0}}else i.push(e=>oe(1e3).then(s=>{}));const m=J&&W()>"20.0.0";let l;if(t.wait&&(l=re(t.verbose),l&&d(o,"--waitMarkerFilePath",l),i.push(async e=>{let s;m?s=new Promise(a=>{e.on("exit",(h,p)=>{(h!==0||p)&&a()})}):s=w.toPromise(w.fromNodeEventEmitter(e,"exit"));try{await Promise.race([H(l),w.toPromise(w.fromNodeEventEmitter(e,"error")),s])}finally{c&&D(c)}})),t["prof-startup"]){const e="127.0.0.1",s=await R(K(),10,3e3),a=await R(s+1,10,3e3),h=await R(a+1,10,3e3);if(s*a*h===0)throw new Error("Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.");const p=U(B(),"prof");d(o,`--inspect-brk=${e}:${s}`),d(o,`--remote-debugging-port=${e}:${a}`),d(o,`--inspect-brk-extensions=${e}:${h}`),d(o,"--prof-startup-prefix",p),d(o,"--no-cached-data"),g(p,o.slice(-6).join("|")),i.push(async O=>{class b{static async start(k,_,v){const A=await import("v8-inspect-profiler");let x;try{x=await A.startProfiling({...v,host:e})}catch{}return{async stop(){if(!x)return;let E="";const f=await x.stop();process.env.VSCODE_DEV||(f.profile=ne.rewriteAbsolutePaths(f.profile,"piiRemoved"),E=".txt"),g(`${_}.${k}.cpuprofile${E}`,JSON.stringify(f.profile,void 0,4))}}}}try{const $=b.start("main",p,{port:s}),k=b.start("extHost",p,{port:h,tries:300}),_=b.start("renderer",p,{port:a,tries:200,target:function(E){return E.filter(f=>f.webSocketDebuggerUrl?f.type==="page"?f.url.indexOf("workbench/workbench.html")>0||f.url.indexOf("workbench/workbench-dev.html")>0||f.url.indexOf("workbench/workbench.esm.html")>0||f.url.indexOf("workbench/workbench-dev.esm.html")>0:!0:!1)[0]}}),v=await $,A=await k,x=await _;await H(p),await v.stop(),await x.stop(),await A.stop(),g(p,"")}catch{}})}const u={detached:!0,env:r};t.verbose||(u.stdio="ignore");let P;if(!m)!t.verbose&&t.status&&(u.stdio=["ignore","pipe","ignore"]),P=y(process.execPath,o.slice(2),u);else{const e=["-n","-g"];if(e.push("-a",process.execPath),t.verbose||t.status){e.push("--wait-apps");for(const s of t.verbose?["stdout","stderr"]:["stdout"]){const a=U(G(),`code-${s}`);g(a,""),e.push(`--${s}`,a),i.push(async h=>{try{const p=s==="stdout"?process.stdout:process.stderr,O=new ie;h.on("close",()=>{setTimeout(()=>O.dispose(!0),200)}),await Q(a,b=>p.write(b),()=>{},O.token)}finally{D(a)}})}}for(const s in r)s!=="_"&&(e.push("--env"),e.push(`${s}=${r[s]}`));if(e.push("--args",...o.slice(2)),r.VSCODE_DEV){const s=".",a=e.indexOf(s);a!==-1&&(e[a]=z(s))}P=y("open",e,{...u,env:{}})}return Promise.all(i.map(e=>e(P)))}}function ue(){return N(ae.asFileUri("").fsPath)}function V(o){setTimeout(()=>process.exit(o),0)}me(process.argv).then(()=>V(0)).then(null,o=>{V(1)});export{me as main};
