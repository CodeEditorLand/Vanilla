{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/node/cli.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype ChildProcess,\n\ttype SpawnOptions,\n\ttype StdioOptions,\n\tspawn,\n} from \"child_process\";\nimport {\n\tchmodSync,\n\texistsSync,\n\treadFileSync,\n\tstatSync,\n\ttruncateSync,\n\tunlinkSync,\n} from \"fs\";\nimport { homedir, release, tmpdir } from \"os\";\nimport type { ProfilingSession, Target } from \"v8-inspect-profiler\";\nimport { DeferredPromise } from \"../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../base/common/cancellation.js\";\nimport { Event } from \"../../base/common/event.js\";\nimport { isUNC, randomPath } from \"../../base/common/extpath.js\";\nimport { FileAccess } from \"../../base/common/network.js\";\nimport { dirname, isAbsolute, join, resolve } from \"../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisMacintosh,\n\tisWindows,\n} from \"../../base/common/platform.js\";\nimport { randomPort } from \"../../base/common/ports.js\";\nimport { cwd } from \"../../base/common/process.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport { whenDeleted, writeFileSync } from \"../../base/node/pfs.js\";\nimport { findFreePort } from \"../../base/node/ports.js\";\nimport { addUNCHostToAllowlist } from \"../../base/node/unc.js\";\nimport type { NativeParsedArgs } from \"../../platform/environment/common/argv.js\";\nimport {\n\tNATIVE_CLI_COMMANDS,\n\tOPTIONS,\n\tbuildHelpMessage,\n\tbuildVersionMessage,\n} from \"../../platform/environment/node/argv.js\";\nimport {\n\taddArg,\n\tparseCLIProcessArgv,\n} from \"../../platform/environment/node/argvHelper.js\";\nimport {\n\tgetStdinFilePath,\n\thasStdinWithoutTty,\n\treadFromStdin,\n\tstdinDataListener,\n} from \"../../platform/environment/node/stdin.js\";\nimport { createWaitMarkerFileSync } from \"../../platform/environment/node/wait.js\";\nimport { watchFileContents } from \"../../platform/files/node/watcher/nodejs/nodejsWatcherLib.js\";\nimport product from \"../../platform/product/common/product.js\";\nimport { Utils } from \"../../platform/profiling/common/profiling.js\";\n\nfunction shouldSpawnCliProcess(argv: NativeParsedArgs): boolean {\n\treturn (\n\t\t!!argv[\"install-source\"] ||\n\t\t!!argv[\"list-extensions\"] ||\n\t\t!!argv[\"install-extension\"] ||\n\t\t!!argv[\"uninstall-extension\"] ||\n\t\t!!argv[\"update-extensions\"] ||\n\t\t!!argv[\"locate-extension\"] ||\n\t\t!!argv[\"telemetry\"]\n\t);\n}\n\nexport async function main(argv: string[]): Promise<any> {\n\tlet args: NativeParsedArgs;\n\n\ttry {\n\t\targs = parseCLIProcessArgv(argv);\n\t} catch (err) {\n\t\tconsole.error(err.message);\n\t\treturn;\n\t}\n\n\tfor (const subcommand of NATIVE_CLI_COMMANDS) {\n\t\tif (args[subcommand]) {\n\t\t\tif (!product.tunnelApplicationName) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`'${subcommand}' command not supported in ${product.applicationName}`,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\t...process.env,\n\t\t\t};\n\t\t\t// bootstrap-amd.js determines the electron environment based\n\t\t\t// on the following variable. For the server we need to unset\n\t\t\t// it to prevent importing any electron specific modules.\n\t\t\t// Refs https://github.com/microsoft/vscode/issues/221883\n\t\t\tdelete env[\"ELECTRON_RUN_AS_NODE\"];\n\n\t\t\tconst tunnelArgs = argv.slice(argv.indexOf(subcommand) + 1); // all arguments behind `tunnel`\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet tunnelProcess: ChildProcess;\n\t\t\t\tconst stdio: StdioOptions = [\"ignore\", \"pipe\", \"pipe\"];\n\t\t\t\tif (process.env[\"VSCODE_DEV\"]) {\n\t\t\t\t\ttunnelProcess = spawn(\n\t\t\t\t\t\t\"cargo\",\n\t\t\t\t\t\t[\"run\", \"--\", subcommand, ...tunnelArgs],\n\t\t\t\t\t\t{ cwd: join(getAppRoot(), \"cli\"), stdio, env },\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst appPath =\n\t\t\t\t\t\tprocess.platform === \"darwin\"\n\t\t\t\t\t\t\t? // ./Contents/MacOS/Electron => ./Contents/Resources/app/bin/code-tunnel-insiders\n\t\t\t\t\t\t\t\tjoin(\n\t\t\t\t\t\t\t\t\tdirname(dirname(process.execPath)),\n\t\t\t\t\t\t\t\t\t\"Resources\",\n\t\t\t\t\t\t\t\t\t\"app\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: dirname(process.execPath);\n\t\t\t\t\tconst tunnelCommand = join(\n\t\t\t\t\t\tappPath,\n\t\t\t\t\t\t\"bin\",\n\t\t\t\t\t\t`${product.tunnelApplicationName}${isWindows ? \".exe\" : \"\"}`,\n\t\t\t\t\t);\n\t\t\t\t\ttunnelProcess = spawn(\n\t\t\t\t\t\ttunnelCommand,\n\t\t\t\t\t\t[subcommand, ...tunnelArgs],\n\t\t\t\t\t\t{ cwd: cwd(), stdio, env },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\ttunnelProcess.stdout!.pipe(process.stdout);\n\t\t\t\ttunnelProcess.stderr!.pipe(process.stderr);\n\t\t\t\ttunnelProcess.on(\"exit\", resolve);\n\t\t\t\ttunnelProcess.on(\"error\", reject);\n\t\t\t});\n\t\t}\n\t}\n\n\t// Help\n\tif (args.help) {\n\t\tconst executable = `${product.applicationName}${isWindows ? \".exe\" : \"\"}`;\n\t\tconsole.log(\n\t\t\tbuildHelpMessage(\n\t\t\t\tproduct.nameLong,\n\t\t\t\texecutable,\n\t\t\t\tproduct.version,\n\t\t\t\tOPTIONS,\n\t\t\t),\n\t\t);\n\t}\n\n\t// Version Info\n\telse if (args.version) {\n\t\tconsole.log(buildVersionMessage(product.version, product.commit));\n\t}\n\n\t// Shell integration\n\telse if (args[\"locate-shell-integration-path\"]) {\n\t\tlet file: string;\n\t\tswitch (args[\"locate-shell-integration-path\"]) {\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"`\n\t\t\tcase \"bash\":\n\t\t\t\tfile = \"shellIntegration-bash.sh\";\n\t\t\t\tbreak;\n\t\t\t// Usage: `if ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }`\n\t\t\tcase \"pwsh\":\n\t\t\t\tfile = \"shellIntegration.ps1\";\n\t\t\t\tbreak;\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"`\n\t\t\tcase \"zsh\":\n\t\t\t\tfile = \"shellIntegration-rc.zsh\";\n\t\t\t\tbreak;\n\t\t\t// Usage: `string match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)`\n\t\t\tcase \"fish\":\n\t\t\t\tfile = \"fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Error using --locate-shell-integration-path: Invalid shell type\",\n\t\t\t\t);\n\t\t}\n\t\tconsole.log(\n\t\t\tjoin(\n\t\t\t\tgetAppRoot(),\n\t\t\t\t\"out\",\n\t\t\t\t\"vs\",\n\t\t\t\t\"workbench\",\n\t\t\t\t\"contrib\",\n\t\t\t\t\"terminal\",\n\t\t\t\t\"common\",\n\t\t\t\t\"scripts\",\n\t\t\t\tfile,\n\t\t\t),\n\t\t);\n\t}\n\n\t// Extensions Management\n\telse if (shouldSpawnCliProcess(args)) {\n\t\tconst cli = await import(\n\t\t\t[\"./cliProcessMain.js\"].join(\n\t\t\t\t\"/\",\n\t\t\t) /* TODO@esm workaround to prevent esbuild from inlining this */\n\t\t);\n\t\tawait cli.main(args);\n\n\t\treturn;\n\t}\n\n\t// Write File\n\telse if (args[\"file-write\"]) {\n\t\tconst source = args._[0];\n\t\tconst target = args._[1];\n\n\t\t// Windows: set the paths as allowed UNC paths given\n\t\t// they are explicitly provided by the user as arguments\n\t\tif (isWindows) {\n\t\t\tfor (const path of [source, target]) {\n\t\t\t\tif (isUNC(path)) {\n\t\t\t\t\taddUNCHostToAllowlist(URI.file(path).authority);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate\n\t\tif (\n\t\t\t!source ||\n\t\t\t!target ||\n\t\t\tsource === target || // make sure source and target are provided and are not the same\n\t\t\t!isAbsolute(source) ||\n\t\t\t!isAbsolute(target) || // make sure both source and target are absolute paths\n\t\t\t!existsSync(source) ||\n\t\t\t!statSync(source).isFile() || // make sure source exists as file\n\t\t\t!existsSync(target) ||\n\t\t\t!statSync(target).isFile() // make sure target exists as file\n\t\t) {\n\t\t\tthrow new Error(\"Using --file-write with invalid arguments.\");\n\t\t}\n\n\t\ttry {\n\t\t\t// Check for readonly status and chmod if so if we are told so\n\t\t\tlet targetMode = 0;\n\t\t\tlet restoreMode = false;\n\t\t\tif (!!args[\"file-chmod\"]) {\n\t\t\t\ttargetMode = statSync(target).mode;\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\ttargetMode & 0o200\n\t\t\t\t\t\t) /* File mode indicating writable by owner */\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tchmodSync(target, targetMode | 0o200);\n\t\t\t\t\trestoreMode = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Write source to target\n\t\t\tconst data = readFileSync(source);\n\t\t\tif (isWindows) {\n\t\t\t\t// On Windows we use a different strategy of saving the file\n\t\t\t\t// by first truncating the file and then writing with r+ mode.\n\t\t\t\t// This helps to save hidden files on Windows\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/931) and\n\t\t\t\t// prevent removing alternate data streams\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/6363)\n\t\t\t\ttruncateSync(target, 0);\n\t\t\t\twriteFileSync(target, data, { flag: \"r+\" });\n\t\t\t} else {\n\t\t\t\twriteFileSync(target, data);\n\t\t\t}\n\n\t\t\t// Restore previous mode as needed\n\t\t\tif (restoreMode) {\n\t\t\t\tchmodSync(target, targetMode);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\terror.message = `Error using --file-write: ${error.message}`;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Just Code\n\telse {\n\t\tconst env: IProcessEnvironment = {\n\t\t\t...process.env,\n\t\t\tELECTRON_NO_ATTACH_CONSOLE: \"1\",\n\t\t};\n\n\t\tdelete env[\"ELECTRON_RUN_AS_NODE\"];\n\n\t\tconst processCallbacks: ((child: ChildProcess) => Promise<void>)[] = [];\n\n\t\tif (args.verbose) {\n\t\t\tenv[\"ELECTRON_ENABLE_LOGGING\"] = \"1\";\n\t\t}\n\n\t\tif (args.verbose || args.status) {\n\t\t\tprocessCallbacks.push(async (child) => {\n\t\t\t\tchild.stdout?.on(\"data\", (data: Buffer) =>\n\t\t\t\t\tconsole.log(data.toString(\"utf8\").trim()),\n\t\t\t\t);\n\t\t\t\tchild.stderr?.on(\"data\", (data: Buffer) =>\n\t\t\t\t\tconsole.log(data.toString(\"utf8\").trim()),\n\t\t\t\t);\n\n\t\t\t\tawait Event.toPromise(\n\t\t\t\t\tEvent.fromNodeEventEmitter(child, \"exit\"),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tconst hasReadStdinArg = args._.some((arg) => arg === \"-\");\n\t\tif (hasReadStdinArg) {\n\t\t\t// remove the \"-\" argument when we read from stdin\n\t\t\targs._ = args._.filter((a) => a !== \"-\");\n\t\t\targv = argv.filter((a) => a !== \"-\");\n\t\t}\n\n\t\tlet stdinFilePath: string | undefined;\n\t\tif (hasStdinWithoutTty()) {\n\t\t\t// Read from stdin: we require a single \"-\" argument to be passed in order to start reading from\n\t\t\t// stdin. We do this because there is no reliable way to find out if data is piped to stdin. Just\n\t\t\t// checking for stdin being connected to a TTY is not enough (https://github.com/microsoft/vscode/issues/40351)\n\n\t\t\tif (hasReadStdinArg) {\n\t\t\t\tstdinFilePath = getStdinFilePath();\n\n\t\t\t\ttry {\n\t\t\t\t\tconst readFromStdinDone = new DeferredPromise<void>();\n\t\t\t\t\tawait readFromStdin(stdinFilePath, !!args.verbose, () =>\n\t\t\t\t\t\treadFromStdinDone.complete(),\n\t\t\t\t\t);\n\t\t\t\t\tif (!args.wait) {\n\t\t\t\t\t\t// if `--wait` is not provided, we keep this process alive\n\t\t\t\t\t\t// for at least as long as the stdin stream is open to\n\t\t\t\t\t\t// ensure that we read all the data.\n\t\t\t\t\t\t// the downside is that the Code CLI process will then not\n\t\t\t\t\t\t// terminate until stdin is closed, but users can always\n\t\t\t\t\t\t// pass `--wait` to prevent that from happening (this is\n\t\t\t\t\t\t// actually what we enforced until v1.85.x but then was\n\t\t\t\t\t\t// changed to not enforce it anymore).\n\t\t\t\t\t\t// a solution in the future would possibly be to exit, when\n\t\t\t\t\t\t// the Code process exits. this would require some careful\n\t\t\t\t\t\t// solution though in case Code is already running and this\n\t\t\t\t\t\t// is a second instance telling the first instance what to\n\t\t\t\t\t\t// open.\n\n\t\t\t\t\t\tprocessCallbacks.push(() => readFromStdinDone.p);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure to open tmp file as editor but ignore it in the \"recently open\" list\n\t\t\t\t\taddArg(argv, stdinFilePath);\n\t\t\t\t\taddArg(argv, \"--skip-add-to-recently-opened\");\n\n\t\t\t\t\tconsole.log(`Reading from stdin via: ${stdinFilePath}`);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`Failed to create file to read via stdin: ${e.toString()}`,\n\t\t\t\t\t);\n\t\t\t\t\tstdinFilePath = undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If the user pipes data via stdin but forgot to add the \"-\" argument, help by printing a message\n\t\t\t\t// if we detect that data flows into via stdin after a certain timeout.\n\t\t\t\tprocessCallbacks.push((_) =>\n\t\t\t\t\tstdinDataListener(1000).then((dataReceived) => {\n\t\t\t\t\t\tif (dataReceived) {\n\t\t\t\t\t\t\tif (isWindows) {\n\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t`Run with '${product.applicationName} -' to read output from another program (e.g. 'echo Hello World | ${product.applicationName} -').`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t`Run with '${product.applicationName} -' to read from stdin (e.g. 'ps aux | grep code | ${product.applicationName} -').`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isMacOSBigSurOrNewer = isMacintosh && release() > \"20.0.0\";\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\tlet waitMarkerFilePath: string | undefined;\n\t\tif (args.wait) {\n\t\t\twaitMarkerFilePath = createWaitMarkerFileSync(args.verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(argv, \"--waitMarkerFilePath\", waitMarkerFilePath);\n\t\t\t}\n\n\t\t\t// When running with --wait, we want to continue running CLI process\n\t\t\t// until either:\n\t\t\t// - the wait marker file has been deleted (e.g. when closing the editor)\n\t\t\t// - the launched process terminates (e.g. due to a crash)\n\t\t\tprocessCallbacks.push(async (child) => {\n\t\t\t\tlet childExitPromise;\n\t\t\t\tif (isMacOSBigSurOrNewer) {\n\t\t\t\t\t// On Big Sur, we resolve the following promise only when the child,\n\t\t\t\t\t// i.e. the open command, exited with a signal or error. Otherwise, we\n\t\t\t\t\t// wait for the marker file to be deleted or for the child to error.\n\t\t\t\t\tchildExitPromise = new Promise<void>((resolve) => {\n\t\t\t\t\t\t// Only resolve this promise if the child (i.e. open) exited with an error\n\t\t\t\t\t\tchild.on(\"exit\", (code, signal) => {\n\t\t\t\t\t\t\tif (code !== 0 || signal) {\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// On other platforms, we listen for exit in case the child exits before the\n\t\t\t\t\t// marker file is deleted.\n\t\t\t\t\tchildExitPromise = Event.toPromise(\n\t\t\t\t\t\tEvent.fromNodeEventEmitter(child, \"exit\"),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.race([\n\t\t\t\t\t\twhenDeleted(waitMarkerFilePath!),\n\t\t\t\t\t\tEvent.toPromise(\n\t\t\t\t\t\t\tEvent.fromNodeEventEmitter(child, \"error\"),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tchildExitPromise,\n\t\t\t\t\t]);\n\t\t\t\t} finally {\n\t\t\t\t\tif (stdinFilePath) {\n\t\t\t\t\t\tunlinkSync(stdinFilePath); // Make sure to delete the tmp stdin file if we have any\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// If we have been started with `--prof-startup` we need to find free ports to profile\n\t\t// the main process, the renderer, and the extension host. We also disable v8 cached data\n\t\t// to get better profile traces. Last, we listen on stdout for a signal that tells us to\n\t\t// stop profiling.\n\t\tif (args[\"prof-startup\"]) {\n\t\t\tconst profileHost = \"127.0.0.1\";\n\t\t\tconst portMain = await findFreePort(randomPort(), 10, 3000);\n\t\t\tconst portRenderer = await findFreePort(portMain + 1, 10, 3000);\n\t\t\tconst portExthost = await findFreePort(portRenderer + 1, 10, 3000);\n\n\t\t\t// fail the operation when one of the ports couldn't be acquired.\n\t\t\tif (portMain * portRenderer * portExthost === 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst filenamePrefix = randomPath(homedir(), \"prof\");\n\n\t\t\taddArg(argv, `--inspect-brk=${profileHost}:${portMain}`);\n\t\t\taddArg(\n\t\t\t\targv,\n\t\t\t\t`--remote-debugging-port=${profileHost}:${portRenderer}`,\n\t\t\t);\n\t\t\taddArg(\n\t\t\t\targv,\n\t\t\t\t`--inspect-brk-extensions=${profileHost}:${portExthost}`,\n\t\t\t);\n\t\t\taddArg(argv, `--prof-startup-prefix`, filenamePrefix);\n\t\t\taddArg(argv, `--no-cached-data`);\n\n\t\t\twriteFileSync(filenamePrefix, argv.slice(-6).join(\"|\"));\n\n\t\t\tprocessCallbacks.push(async (_child) => {\n\t\t\t\tclass Profiler {\n\t\t\t\t\tstatic async start(\n\t\t\t\t\t\tname: string,\n\t\t\t\t\t\tfilenamePrefix: string,\n\t\t\t\t\t\topts: {\n\t\t\t\t\t\t\tport: number;\n\t\t\t\t\t\t\ttries?: number;\n\t\t\t\t\t\t\ttarget?: (targets: Target[]) => Target;\n\t\t\t\t\t\t},\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst profiler = await import(\"v8-inspect-profiler\");\n\n\t\t\t\t\t\tlet session: ProfilingSession;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsession = await profiler.startProfiling({\n\t\t\t\t\t\t\t\t...opts,\n\t\t\t\t\t\t\t\thost: profileHost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t`FAILED to start profiling for '${name}' on port '${opts.port}'`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tasync stop() {\n\t\t\t\t\t\t\t\tif (!session) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet suffix = \"\";\n\t\t\t\t\t\t\t\tconst result = await session.stop();\n\t\t\t\t\t\t\t\tif (!process.env[\"VSCODE_DEV\"]) {\n\t\t\t\t\t\t\t\t\t// when running from a not-development-build we remove\n\t\t\t\t\t\t\t\t\t// absolute filenames because we don't want to reveal anything\n\t\t\t\t\t\t\t\t\t// about users. We also append the `.txt` suffix to make it\n\t\t\t\t\t\t\t\t\t// easier to attach these files to GH issues\n\t\t\t\t\t\t\t\t\tresult.profile = Utils.rewriteAbsolutePaths(\n\t\t\t\t\t\t\t\t\t\tresult.profile,\n\t\t\t\t\t\t\t\t\t\t\"piiRemoved\",\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tsuffix = \".txt\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\twriteFileSync(\n\t\t\t\t\t\t\t\t\t`${filenamePrefix}.${name}.cpuprofile${suffix}`,\n\t\t\t\t\t\t\t\t\tJSON.stringify(\n\t\t\t\t\t\t\t\t\t\tresult.profile,\n\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t4,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// load and start profiler\n\t\t\t\t\tconst mainProfileRequest = Profiler.start(\n\t\t\t\t\t\t\"main\",\n\t\t\t\t\t\tfilenamePrefix,\n\t\t\t\t\t\t{ port: portMain },\n\t\t\t\t\t);\n\t\t\t\t\tconst extHostProfileRequest = Profiler.start(\n\t\t\t\t\t\t\"extHost\",\n\t\t\t\t\t\tfilenamePrefix,\n\t\t\t\t\t\t{ port: portExthost, tries: 300 },\n\t\t\t\t\t);\n\t\t\t\t\tconst rendererProfileRequest = Profiler.start(\n\t\t\t\t\t\t\"renderer\",\n\t\t\t\t\t\tfilenamePrefix,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tport: portRenderer,\n\t\t\t\t\t\t\ttries: 200,\n\t\t\t\t\t\t\ttarget: (targets) =>\n\t\t\t\t\t\t\t\ttargets.filter((target) => {\n\t\t\t\t\t\t\t\t\tif (!target.webSocketDebuggerUrl) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (target.type === \"page\") {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\ttarget.url.indexOf(\n\t\t\t\t\t\t\t\t\t\t\t\t\"workbench/workbench.html\",\n\t\t\t\t\t\t\t\t\t\t\t) > 0 ||\n\t\t\t\t\t\t\t\t\t\t\ttarget.url.indexOf(\n\t\t\t\t\t\t\t\t\t\t\t\t\"workbench/workbench-dev.html\",\n\t\t\t\t\t\t\t\t\t\t\t) > 0 ||\n\t\t\t\t\t\t\t\t\t\t\ttarget.url.indexOf(\n\t\t\t\t\t\t\t\t\t\t\t\t\"workbench/workbench.esm.html\",\n\t\t\t\t\t\t\t\t\t\t\t) > 0 ||\n\t\t\t\t\t\t\t\t\t\t\ttarget.url.indexOf(\n\t\t\t\t\t\t\t\t\t\t\t\t\"workbench/workbench-dev.esm.html\",\n\t\t\t\t\t\t\t\t\t\t\t) > 0\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})[0],\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tconst main = await mainProfileRequest;\n\t\t\t\t\tconst extHost = await extHostProfileRequest;\n\t\t\t\t\tconst renderer = await rendererProfileRequest;\n\n\t\t\t\t\t// wait for the renderer to delete the marker file\n\t\t\t\t\tawait whenDeleted(filenamePrefix);\n\n\t\t\t\t\t// stop profiling\n\t\t\t\t\tawait main.stop();\n\t\t\t\t\tawait renderer.stop();\n\t\t\t\t\tawait extHost.stop();\n\n\t\t\t\t\t// re-create the marker file to signal that profiling is done\n\t\t\t\t\twriteFileSync(filenamePrefix, \"\");\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\"Failed to profile startup. Make sure to quit Code first.\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst options: SpawnOptions = {\n\t\t\tdetached: true,\n\t\t\tenv,\n\t\t};\n\n\t\tif (!args.verbose) {\n\t\t\toptions[\"stdio\"] = \"ignore\";\n\t\t}\n\n\t\tlet child: ChildProcess;\n\t\tif (isMacOSBigSurOrNewer) {\n\t\t\t// On Big Sur, we spawn using the open command to obtain behavior\n\t\t\t// similar to if the app was launched from the dock\n\t\t\t// https://github.com/microsoft/vscode/issues/102975\n\n\t\t\t// The following args are for the open command itself, rather than for VS Code:\n\t\t\t// -n creates a new instance.\n\t\t\t//    Without -n, the open command re-opens the existing instance as-is.\n\t\t\t// -g starts the new instance in the background.\n\t\t\t//    Later, Electron brings the instance to the foreground.\n\t\t\t//    This way, Mac does not automatically try to foreground the new instance, which causes\n\t\t\t//    focusing issues when the new instance only sends data to a previous instance and then closes.\n\t\t\tconst spawnArgs = [\"-n\", \"-g\"];\n\t\t\t// -a opens the given application.\n\t\t\tspawnArgs.push(\"-a\", process.execPath); // -a: opens a specific application\n\n\t\t\tif (args.verbose || args.status) {\n\t\t\t\tspawnArgs.push(\"--wait-apps\"); // `open --wait-apps`: blocks until the launched app is closed (even if they were already running)\n\n\t\t\t\t// The open command only allows for redirecting stderr and stdout to files,\n\t\t\t\t// so we make it redirect those to temp files, and then use a logger to\n\t\t\t\t// redirect the file output to the console\n\t\t\t\tfor (const outputType of args.verbose\n\t\t\t\t\t? [\"stdout\", \"stderr\"]\n\t\t\t\t\t: [\"stdout\"]) {\n\t\t\t\t\t// Tmp file to target output to\n\t\t\t\t\tconst tmpName = randomPath(tmpdir(), `code-${outputType}`);\n\t\t\t\t\twriteFileSync(tmpName, \"\");\n\t\t\t\t\tspawnArgs.push(`--${outputType}`, tmpName);\n\n\t\t\t\t\t// Listener to redirect content to stdout/stderr\n\t\t\t\t\tprocessCallbacks.push(async (child) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst stream =\n\t\t\t\t\t\t\t\toutputType === \"stdout\"\n\t\t\t\t\t\t\t\t\t? process.stdout\n\t\t\t\t\t\t\t\t\t: process.stderr;\n\n\t\t\t\t\t\t\tconst cts = new CancellationTokenSource();\n\t\t\t\t\t\t\tchild.on(\"close\", () => {\n\t\t\t\t\t\t\t\t// We must dispose the token to stop watching,\n\t\t\t\t\t\t\t\t// but the watcher might still be reading data.\n\t\t\t\t\t\t\t\tsetTimeout(() => cts.dispose(true), 200);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait watchFileContents(\n\t\t\t\t\t\t\t\ttmpName,\n\t\t\t\t\t\t\t\t(chunk) => stream.write(chunk),\n\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t/* ignore */\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcts.token,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tunlinkSync(tmpName);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const e in env) {\n\t\t\t\t// Ignore the _ env var, because the open command\n\t\t\t\t// ignores it anyway.\n\t\t\t\t// Pass the rest of the env vars in to fix\n\t\t\t\t// https://github.com/microsoft/vscode/issues/134696.\n\t\t\t\tif (e !== \"_\") {\n\t\t\t\t\tspawnArgs.push(\"--env\");\n\t\t\t\t\tspawnArgs.push(`${e}=${env[e]}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tspawnArgs.push(\"--args\", ...argv.slice(2)); // pass on our arguments\n\n\t\t\tif (env[\"VSCODE_DEV\"]) {\n\t\t\t\t// If we're in development mode, replace the . arg with the\n\t\t\t\t// vscode source arg. Because the OSS app isn't bundled,\n\t\t\t\t// it needs the full vscode source arg to launch properly.\n\t\t\t\tconst curdir = \".\";\n\t\t\t\tconst launchDirIndex = spawnArgs.indexOf(curdir);\n\t\t\t\tif (launchDirIndex !== -1) {\n\t\t\t\t\tspawnArgs[launchDirIndex] = resolve(curdir);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We already passed over the env variables\n\t\t\t// using the --env flags, so we can leave them out here.\n\t\t\t// Also, we don't need to pass env._, which is different from argv._\n\t\t\tchild = spawn(\"open\", spawnArgs, { ...options, env: {} });\n\t\t} else {\n\t\t\tif (!args.verbose && args.status) {\n\t\t\t\toptions[\"stdio\"] = [\"ignore\", \"pipe\", \"ignore\"]; // restore ability to see output when --status is used\n\t\t\t}\n\n\t\t\t// We spawn process.execPath directly\n\t\t\tchild = spawn(process.execPath, argv.slice(2), options);\n\t\t}\n\n\t\treturn Promise.all(processCallbacks.map((callback) => callback(child)));\n\t}\n}\n\nfunction getAppRoot() {\n\treturn dirname(FileAccess.asFileUri(\"\").fsPath);\n}\n\nfunction eventuallyExit(code: number): void {\n\tsetTimeout(() => process.exit(code), 0);\n}\n\nmain(process.argv)\n\t.then(() => eventuallyExit(0))\n\t.then(null, (err) => {\n\t\tconsole.error(err.message || err.stack || err);\n\t\teventuallyExit(1);\n\t});\n"],
  "mappings": "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",
  "names": ["resolve", "child", "filenamePrefix", "main"]
}
