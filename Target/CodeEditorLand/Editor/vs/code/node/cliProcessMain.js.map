{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/node/cliProcessMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { hostname, release } from 'os';\nimport { raceTimeout } from '../../base/common/async.js';\nimport { toErrorMessage } from '../../base/common/errorMessage.js';\nimport { isSigPipeError, onUnexpectedError, setUnexpectedErrorHandler } from '../../base/common/errors.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport { Schemas } from '../../base/common/network.js';\nimport { isAbsolute, join } from '../../base/common/path.js';\nimport { isWindows } from '../../base/common/platform.js';\nimport { cwd } from '../../base/common/process.js';\nimport { URI } from '../../base/common/uri.js';\nimport { IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { ConfigurationService } from '../../platform/configuration/common/configurationService.js';\nimport { IDownloadService } from '../../platform/download/common/download.js';\nimport { DownloadService } from '../../platform/download/common/downloadService.js';\nimport { NativeParsedArgs } from '../../platform/environment/common/argv.js';\nimport { INativeEnvironmentService } from '../../platform/environment/common/environment.js';\nimport { NativeEnvironmentService } from '../../platform/environment/node/environmentService.js';\nimport { ExtensionGalleryServiceWithNoStorageService } from '../../platform/extensionManagement/common/extensionGalleryService.js';\nimport { IExtensionGalleryService, InstallOptions } from '../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from '../../platform/extensionManagement/node/extensionSignatureVerificationService.js';\nimport { ExtensionManagementCLI } from '../../platform/extensionManagement/common/extensionManagementCLI.js';\nimport { IExtensionsProfileScannerService } from '../../platform/extensionManagement/common/extensionsProfileScannerService.js';\nimport { IExtensionsScannerService } from '../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from '../../platform/extensionManagement/node/extensionManagementService.js';\nimport { ExtensionsScannerService } from '../../platform/extensionManagement/node/extensionsScannerService.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { FileService } from '../../platform/files/common/fileService.js';\nimport { DiskFileSystemProvider } from '../../platform/files/node/diskFileSystemProvider.js';\nimport { SyncDescriptor } from '../../platform/instantiation/common/descriptors.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { InstantiationService } from '../../platform/instantiation/common/instantiationService.js';\nimport { ServiceCollection } from '../../platform/instantiation/common/serviceCollection.js';\nimport { ILanguagePackService } from '../../platform/languagePacks/common/languagePacks.js';\nimport { NativeLanguagePackService } from '../../platform/languagePacks/node/languagePacks.js';\nimport { ConsoleLogger, getLogLevel, ILogger, ILoggerService, ILogService, LogLevel } from '../../platform/log/common/log.js';\nimport { FilePolicyService } from '../../platform/policy/common/filePolicyService.js';\nimport { IPolicyService, NullPolicyService } from '../../platform/policy/common/policy.js';\nimport { NativePolicyService } from '../../platform/policy/node/nativePolicyService.js';\nimport product from '../../platform/product/common/product.js';\nimport { IProductService } from '../../platform/product/common/productService.js';\nimport { IRequestService } from '../../platform/request/common/request.js';\nimport { RequestService } from '../../platform/request/node/requestService.js';\nimport { SaveStrategy, StateReadonlyService } from '../../platform/state/node/stateService.js';\nimport { resolveCommonProperties } from '../../platform/telemetry/common/commonProperties.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { ITelemetryServiceConfig, TelemetryService } from '../../platform/telemetry/common/telemetryService.js';\nimport { supportsTelemetry, NullTelemetryService, getPiiPathsFromEnvironment, isInternalTelemetry, ITelemetryAppender } from '../../platform/telemetry/common/telemetryUtils.js';\nimport { OneDataSystemAppender } from '../../platform/telemetry/node/1dsAppender.js';\nimport { buildTelemetryMessage } from '../../platform/telemetry/node/telemetry.js';\nimport { IUriIdentityService } from '../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../platform/uriIdentity/common/uriIdentityService.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../platform/userDataProfile/common/userDataProfile.js';\nimport { UserDataProfilesReadonlyService } from '../../platform/userDataProfile/node/userDataProfile.js';\nimport { resolveMachineId, resolveSqmId, resolvedevDeviceId } from '../../platform/telemetry/node/telemetryUtils.js';\nimport { ExtensionsProfileScannerService } from '../../platform/extensionManagement/node/extensionsProfileScannerService.js';\nimport { LogService } from '../../platform/log/common/logService.js';\nimport { LoggerService } from '../../platform/log/node/loggerService.js';\nimport { localize } from '../../nls.js';\nimport { FileUserDataProvider } from '../../platform/userData/common/fileUserDataProvider.js';\nimport { addUNCHostToAllowlist, getUNCHost } from '../../base/node/unc.js';\n\nclass CliMain extends Disposable {\n\n\tconstructor(\n\t\tprivate argv: NativeParsedArgs\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Dispose on exit\n\t\tprocess.once('exit', () => this.dispose());\n\t}\n\n\tasync run(): Promise<void> {\n\n\t\t// Services\n\t\tconst [instantiationService, appenders] = await this.initServices();\n\n\t\treturn instantiationService.invokeFunction(async accessor => {\n\t\t\tconst logService = accessor.get(ILogService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst environmentService = accessor.get(INativeEnvironmentService);\n\t\t\tconst userDataProfilesService = accessor.get(IUserDataProfilesService);\n\n\t\t\t// Log info\n\t\t\tlogService.info('CLI main', this.argv);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\n\t\t\t// Run based on argv\n\t\t\tawait this.doRun(environmentService, fileService, userDataProfilesService, instantiationService);\n\n\t\t\t// Flush the remaining data in AI adapter (with 1s timeout)\n\t\t\tawait Promise.all(appenders.map(a => {\n\t\t\t\traceTimeout(a.flush(), 1000);\n\t\t\t}));\n\t\t\treturn;\n\t\t});\n\t}\n\n\tprivate async initServices(): Promise<[IInstantiationService, ITelemetryAppender[]]> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(this.argv, productService);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Init folders\n\t\tawait Promise.all([\n\t\t\tthis.allowWindowsUNCPath(environmentService.appSettingsHome.with({ scheme: Schemas.file }).fsPath),\n\t\t\tthis.allowWindowsUNCPath(environmentService.extensionsPath)\n\t\t].map(path => path ? fs.promises.mkdir(path, { recursive: true }) : undefined));\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logger = this._register(loggerService.createLogger('cli', { name: localize('cli', \"CLI\") }));\n\t\tconst otherLoggers: ILogger[] = [];\n\t\tif (loggerService.getLogLevel() === LogLevel.Trace) {\n\t\t\totherLoggers.push(new ConsoleLogger(loggerService.getLogLevel()));\n\t\t}\n\n\t\tconst logService = this._register(new LogService(logger, otherLoggers));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// Uri Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst stateService = new StateReadonlyService(SaveStrategy.DELAYED, environmentService, logService, fileService);\n\t\tconst userDataProfilesService = new UserDataProfilesReadonlyService(stateService, uriIdentityService, environmentService, fileService, logService);\n\t\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\t// Use FileUserDataProvider for user data to\n\t\t// enable atomic read / write operations.\n\t\tfileService.registerProvider(Schemas.vscodeUserData, new FileUserDataProvider(Schemas.file, diskFileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService));\n\n\t\t// Policy\n\t\tconst policyService = isWindows && productService.win32RegValueName ? this._register(new NativePolicyService(logService, productService.win32RegValueName))\n\t\t\t: environmentService.policyFile ? this._register(new FilePolicyService(environmentService.policyFile, fileService, logService))\n\t\t\t\t: new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(userDataProfilesService.defaultProfile.settingsResource, fileService, policyService, logService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Initialize\n\t\tawait Promise.all([\n\t\t\tstateService.init(),\n\t\t\tconfigurationService.initialize()\n\t\t]);\n\n\t\t// Get machine ID\n\t\tlet machineId: string | undefined = undefined;\n\t\ttry {\n\t\t\tmachineId = await resolveMachineId(stateService, logService);\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t\tconst sqmId = await resolveSqmId(stateService, logService);\n\t\tconst devDeviceId = await resolvedevDeviceId(stateService, logService);\n\n\t\t// Initialize user data profiles after initializing the state\n\t\tuserDataProfilesService.init();\n\n\t\t// URI Identity\n\t\tservices.set(IUriIdentityService, new UriIdentityService(fileService));\n\n\t\t// Request\n\t\tconst requestService = new RequestService(configurationService, environmentService, logService);\n\t\tservices.set(IRequestService, requestService);\n\n\t\t// Download Service\n\t\tservices.set(IDownloadService, new SyncDescriptor(DownloadService, undefined, true));\n\n\t\t// Extensions\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService, undefined, true));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService, undefined, true));\n\t\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService, undefined, true));\n\t\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService, undefined, true));\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryServiceWithNoStorageService, undefined, true));\n\n\t\t// Localizations\n\t\tservices.set(ILanguagePackService, new SyncDescriptor(NativeLanguagePackService, undefined, false));\n\n\t\t// Telemetry\n\t\tconst appenders: ITelemetryAppender[] = [];\n\t\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tif (productService.aiConfig && productService.aiConfig.ariaKey) {\n\t\t\t\tappenders.push(new OneDataSystemAppender(requestService, isInternal, 'monacoworkbench', null, productService.aiConfig.ariaKey));\n\t\t\t}\n\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders,\n\t\t\t\tsendErrorTelemetry: false,\n\t\t\t\tcommonProperties: resolveCommonProperties(release(), hostname(), process.arch, productService.commit, productService.version, machineId, sqmId, devDeviceId, isInternal),\n\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService)\n\t\t\t};\n\n\t\t\tservices.set(ITelemetryService, new SyncDescriptor(TelemetryService, [config], false));\n\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\treturn [new InstantiationService(services), appenders];\n\t}\n\n\tprivate allowWindowsUNCPath(path: string): string {\n\t\tif (isWindows) {\n\t\t\tconst host = getUNCHost(path);\n\t\t\tif (host) {\n\t\t\t\taddUNCHostToAllowlist(host);\n\t\t\t}\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler(error => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(`[uncaught exception in CLI]: ${message}`);\n\t\t});\n\n\t\t// Handle unhandled errors that can occur\n\t\tprocess.on('uncaughtException', err => {\n\t\t\tif (!isSigPipeError(err)) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t});\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\t}\n\n\tprivate async doRun(environmentService: INativeEnvironmentService, fileService: IFileService, userDataProfilesService: IUserDataProfilesService, instantiationService: IInstantiationService): Promise<void> {\n\t\tlet profile: IUserDataProfile | undefined = undefined;\n\t\tif (environmentService.args.profile) {\n\t\t\tprofile = userDataProfilesService.profiles.find(p => p.name === environmentService.args.profile);\n\t\t\tif (!profile) {\n\t\t\t\tthrow new Error(`Profile '${environmentService.args.profile}' not found.`);\n\t\t\t}\n\t\t}\n\t\tconst profileLocation = (profile ?? userDataProfilesService.defaultProfile).extensionsResource;\n\n\t\t// List Extensions\n\t\tif (this.argv['list-extensions']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).listExtensions(!!this.argv['show-versions'], this.argv['category'], profileLocation);\n\t\t}\n\n\t\t// Install Extension\n\t\telse if (this.argv['install-extension'] || this.argv['install-builtin-extension']) {\n\t\t\tconst installOptions: InstallOptions = { isMachineScoped: !!this.argv['do-not-sync'], installPreReleaseVersion: !!this.argv['pre-release'], profileLocation };\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).installExtensions(this.asExtensionIdOrVSIX(this.argv['install-extension'] || []), this.asExtensionIdOrVSIX(this.argv['install-builtin-extension'] || []), installOptions, !!this.argv['force']);\n\t\t}\n\n\t\t// Uninstall Extension\n\t\telse if (this.argv['uninstall-extension']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).uninstallExtensions(this.asExtensionIdOrVSIX(this.argv['uninstall-extension']), !!this.argv['force'], profileLocation);\n\t\t}\n\n\t\telse if (this.argv['update-extensions']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).updateExtensions(profileLocation);\n\t\t}\n\n\t\t// Locate Extension\n\t\telse if (this.argv['locate-extension']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).locateExtension(this.argv['locate-extension']);\n\t\t}\n\n\t\t// Telemetry\n\t\telse if (this.argv['telemetry']) {\n\t\t\tconsole.log(await buildTelemetryMessage(environmentService.appRoot, environmentService.extensionsPath));\n\t\t}\n\t}\n\n\tprivate asExtensionIdOrVSIX(inputs: string[]): (string | URI)[] {\n\t\treturn inputs.map(input => /\\.vsix$/i.test(input) ? URI.file(isAbsolute(input) ? input : join(cwd(), input)) : input);\n\t}\n}\n\nexport async function main(argv: NativeParsedArgs): Promise<void> {\n\tconst cliMain = new CliMain(argv);\n\n\ttry {\n\t\tawait cliMain.run();\n\t} finally {\n\t\tcliMain.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
