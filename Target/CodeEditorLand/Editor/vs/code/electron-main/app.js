var Oe=Object.defineProperty;var Le=Object.getOwnPropertyDescriptor;var z=(L,C,i,t)=>{for(var n=t>1?void 0:t?Le(C,i):C,e=L.length-1,r;e>=0;e--)(r=L[e])&&(n=(t?r(C,i,n):r(n))||n);return t&&n&&Oe(C,i,n),n},y=(L,C)=>(i,t)=>C(i,t,L);import{app as R,BrowserWindow as Ee,protocol as j,session as U,systemPreferences as J}from"electron";import{addUNCHostToAllowlist as xe,disableUNCAccessRestrictions as Te}from"../../base/node/unc.js";import{validatedIpcMain as W}from"../../base/parts/ipc/electron-main/ipcMain.js";import{hostname as ke,release as Ne}from"os";import{VSBuffer as Z}from"../../base/common/buffer.js";import{toErrorMessage as Ae}from"../../base/common/errorMessage.js";import{isSigPipeError as Fe,onUnexpectedError as Q,setUnexpectedErrorHandler as He}from"../../base/common/errors.js";import{Event as F}from"../../base/common/event.js";import{parse as De}from"../../base/common/jsonc.js";import{getPathLabel as H}from"../../base/common/labels.js";import{Disposable as _e,DisposableStore as qe}from"../../base/common/lifecycle.js";import{Schemas as v,VSCODE_AUTHORITY as Be}from"../../base/common/network.js";import{join as $e,posix as Ke}from"../../base/common/path.js";import{isLinux as Ve,isLinuxSnap as Ge,isMacintosh as E,isWindows as x,OS as D}from"../../base/common/platform.js";import{assertType as Ye}from"../../base/common/types.js";import{URI as w}from"../../base/common/uri.js";import{generateUuid as ze}from"../../base/common/uuid.js";import{registerContextMenuListener as je}from"../../base/parts/contextmenu/electron-main/contextmenu.js";import{getDelayedChannel as X,ProxyChannel as h,StaticRouter as Je}from"../../base/parts/ipc/common/ipc.js";import{Server as Ze}from"../../base/parts/ipc/electron-main/ipc.electron.js";import{Client as Qe}from"../../base/parts/ipc/electron-main/ipc.mp.js";import{IProxyAuthService as ee,ProxyAuthService as Xe}from"../../platform/native/electron-main/auth.js";import{localize as M}from"../../nls.js";import{IBackupMainService as er}from"../../platform/backup/electron-main/backup.js";import{BackupMainService as rr}from"../../platform/backup/electron-main/backupMainService.js";import{IConfigurationService as ir}from"../../platform/configuration/common/configuration.js";import{ElectronExtensionHostDebugBroadcastChannel as tr}from"../../platform/debug/electron-main/extensionHostDebugIpc.js";import{IDiagnosticsService as nr}from"../../platform/diagnostics/common/diagnostics.js";import{DiagnosticsMainService as or,IDiagnosticsMainService as re}from"../../platform/diagnostics/electron-main/diagnosticsMainService.js";import{DialogMainService as sr,IDialogMainService as ie}from"../../platform/dialogs/electron-main/dialogMainService.js";import{IEncryptionMainService as te}from"../../platform/encryption/common/encryptionService.js";import{EncryptionMainService as ar}from"../../platform/encryption/electron-main/encryptionMainService.js";import{IEnvironmentMainService as cr}from"../../platform/environment/electron-main/environmentMainService.js";import{isLaunchedFromCli as lr}from"../../platform/environment/node/argvHelper.js";import{getResolvedShellEnv as dr}from"../../platform/shell/node/shellEnv.js";import{IExtensionHostStarter as ne,ipcExtensionHostStarterChannelName as pr}from"../../platform/extensions/common/extensionHostStarter.js";import{ExtensionHostStarter as vr}from"../../platform/extensions/electron-main/extensionHostStarter.js";import{IExternalTerminalMainService as T}from"../../platform/externalTerminal/electron-main/externalTerminal.js";import{LinuxExternalTerminalService as mr,MacExternalTerminalService as hr,WindowsExternalTerminalService as ur}from"../../platform/externalTerminal/node/externalTerminalService.js";import{LOCAL_FILE_SYSTEM_CHANNEL_NAME as oe}from"../../platform/files/common/diskFileSystemProviderClient.js";import{IFileService as fr}from"../../platform/files/common/files.js";import{DiskFileSystemProviderChannel as Sr}from"../../platform/files/electron-main/diskFileSystemProviderServer.js";import{DiskFileSystemProvider as gr}from"../../platform/files/node/diskFileSystemProvider.js";import{SyncDescriptor as p}from"../../platform/instantiation/common/descriptors.js";import{IInstantiationService as wr}from"../../platform/instantiation/common/instantiation.js";import{ServiceCollection as yr}from"../../platform/instantiation/common/serviceCollection.js";import{IProcessMainService as se,IIssueMainService as ae}from"../../platform/issue/common/issue.js";import{IssueMainService as Mr}from"../../platform/issue/electron-main/issueMainService.js";import{ProcessMainService as Ir}from"../../platform/issue/electron-main/processMainService.js";import{IKeyboardLayoutMainService as ce,KeyboardLayoutMainService as Cr}from"../../platform/keyboardLayout/electron-main/keyboardLayoutMainService.js";import{ILaunchMainService as le,LaunchMainService as Pr}from"../../platform/launch/electron-main/launchMainService.js";import{ILifecycleMainService as Rr,LifecycleMainPhase as _,ShutdownReason as Ur}from"../../platform/lifecycle/electron-main/lifecycleMainService.js";import{ILoggerService as br,ILogService as Wr}from"../../platform/log/common/log.js";import{IMenubarMainService as de,MenubarMainService as Or}from"../../platform/menubar/electron-main/menubarMainService.js";import{INativeHostMainService as q,NativeHostMainService as Lr}from"../../platform/native/electron-main/nativeHostMainService.js";import{IProductService as Er}from"../../platform/product/common/productService.js";import{getRemoteAuthority as xr}from"../../platform/remote/common/remoteHosts.js";import{SharedProcess as Tr}from"../../platform/sharedProcess/electron-main/sharedProcess.js";import{ISignService as kr}from"../../platform/sign/common/sign.js";import{IStateService as Nr}from"../../platform/state/node/state.js";import{StorageDatabaseChannel as Ar}from"../../platform/storage/electron-main/storageIpc.js";import{ApplicationStorageMainService as Fr,IApplicationStorageMainService as Hr,IStorageMainService as B,StorageMainService as Dr}from"../../platform/storage/electron-main/storageMainService.js";import{resolveCommonProperties as _r}from"../../platform/telemetry/common/commonProperties.js";import{ITelemetryService as pe,TelemetryLevel as qr}from"../../platform/telemetry/common/telemetry.js";import{TelemetryAppenderClient as Br}from"../../platform/telemetry/common/telemetryIpc.js";import{TelemetryService as $r}from"../../platform/telemetry/common/telemetryService.js";import{getPiiPathsFromEnvironment as Kr,getTelemetryLevel as Vr,isInternalTelemetry as Gr,NullTelemetryService as Yr,supportsTelemetry as zr}from"../../platform/telemetry/common/telemetryUtils.js";import{IUpdateService as O}from"../../platform/update/common/update.js";import{UpdateChannel as jr}from"../../platform/update/common/updateIpc.js";import{DarwinUpdateService as Jr}from"../../platform/update/electron-main/updateService.darwin.js";import{LinuxUpdateService as Zr}from"../../platform/update/electron-main/updateService.linux.js";import{SnapUpdateService as Qr}from"../../platform/update/electron-main/updateService.snap.js";import{Win32UpdateService as Xr}from"../../platform/update/electron-main/updateService.win32.js";import{IURLService as $}from"../../platform/url/common/url.js";import{URLHandlerChannelClient as ei,URLHandlerRouter as ri}from"../../platform/url/common/urlIpc.js";import{NativeURLService as ii}from"../../platform/url/common/urlService.js";import{ElectronURLListener as ti}from"../../platform/url/electron-main/electronUrlListener.js";import{IWebviewManagerService as ve}from"../../platform/webview/common/webviewManagerService.js";import{WebviewMainService as ni}from"../../platform/webview/electron-main/webviewMainService.js";import{isFolderToOpen as oi,isWorkspaceToOpen as si}from"../../platform/window/common/window.js";import{IWindowsMainService as k,OpenContext as I}from"../../platform/windows/electron-main/windows.js";import{WindowsMainService as ai}from"../../platform/windows/electron-main/windowsMainService.js";import{ActiveWindowManager as ci}from"../../platform/windows/node/windowTracker.js";import{hasWorkspaceFileExtension as N}from"../../platform/workspace/common/workspace.js";import{IWorkspacesService as me}from"../../platform/workspaces/common/workspaces.js";import{IWorkspacesHistoryMainService as li,WorkspacesHistoryMainService as di}from"../../platform/workspaces/electron-main/workspacesHistoryMainService.js";import{WorkspacesMainService as pi}from"../../platform/workspaces/electron-main/workspacesMainService.js";import{IWorkspacesManagementMainService as vi,WorkspacesManagementMainService as mi}from"../../platform/workspaces/electron-main/workspacesManagementMainService.js";import{IPolicyService as hi}from"../../platform/policy/common/policy.js";import{PolicyChannel as ui}from"../../platform/policy/common/policyIpc.js";import{IUserDataProfilesMainService as K}from"../../platform/userDataProfile/electron-main/userDataProfile.js";import{RequestChannel as fi}from"../../platform/request/common/requestIpc.js";import{IRequestService as Si}from"../../platform/request/common/request.js";import{IExtensionsProfileScannerService as gi}from"../../platform/extensionManagement/common/extensionsProfileScannerService.js";import{IExtensionsScannerService as wi}from"../../platform/extensionManagement/common/extensionsScannerService.js";import{ExtensionsScannerService as yi}from"../../platform/extensionManagement/node/extensionsScannerService.js";import{UserDataProfilesHandler as Mi}from"../../platform/userDataProfile/electron-main/userDataProfilesHandler.js";import{ProfileStorageChangesListenerChannel as Ii}from"../../platform/userDataProfile/electron-main/userDataProfileStorageIpc.js";import{Promises as Ci,RunOnceScheduler as Pi,runWhenGlobalIdle as Ri}from"../../base/common/async.js";import{resolveMachineId as Ui,resolveSqmId as bi,resolvedevDeviceId as Wi}from"../../platform/telemetry/electron-main/telemetryUtils.js";import{ExtensionsProfileScannerService as Oi}from"../../platform/extensionManagement/node/extensionsProfileScannerService.js";import{LoggerChannel as Li}from"../../platform/log/electron-main/logIpc.js";import{ILoggerMainService as Ei}from"../../platform/log/electron-main/loggerService.js";import{IUtilityProcessWorkerMainService as he,UtilityProcessWorkerMainService as xi}from"../../platform/utilityProcess/electron-main/utilityProcessWorkerMainService.js";import{ipcUtilityProcessWorkerChannelName as Ti}from"../../platform/utilityProcess/common/utilityProcessWorkerService.js";import{ILocalPtyService as ue,LocalReconnectConstants as fe,TerminalIpcChannels as ki,TerminalSettingId as Ni}from"../../platform/terminal/common/terminal.js";import{ElectronPtyHostStarter as Ai}from"../../platform/terminal/electron-main/electronPtyHostStarter.js";import{PtyHostService as Fi}from"../../platform/terminal/node/ptyHostService.js";import{NODE_REMOTE_RESOURCE_CHANNEL_NAME as Hi,NODE_REMOTE_RESOURCE_IPC_METHOD_NAME as Di,NodeRemoteResourceRouter as _i}from"../../platform/remote/common/electronRemoteResources.js";import{Lazy as qi}from"../../base/common/lazy.js";import{IAuxiliaryWindowsMainService as Se}from"../../platform/auxiliaryWindow/electron-main/auxiliaryWindows.js";import{AuxiliaryWindowsMainService as Bi}from"../../platform/auxiliaryWindow/electron-main/auxiliaryWindowsMainService.js";import{normalizeNFC as ge}from"../../base/common/normalization.js";import{ICSSDevelopmentService as $i,CSSDevelopmentService as Ki}from"../../platform/cssDev/node/cssDevService.js";let b=class extends _e{constructor(i,t,n,e,r,a,l,d,o,c,s,m){super();this.mainProcessNodeIpcServer=i;this.userEnv=t;this.mainInstantiationService=n;this.logService=e;this.loggerService=r;this.environmentMainService=a;this.lifecycleMainService=l;this.configurationService=d;this.stateService=o;this.fileService=c;this.productService=s;this.userDataProfilesMainService=m;this.configureSession(),this.registerListeners()}static SECURITY_PROTOCOL_HANDLING_CONFIRMATION_SETTING_KEY={[v.file]:"security.promptForLocalFileProtocolHandling",[v.vscodeRemote]:"security.promptForRemoteFileProtocolHandling"};windowsMainService;auxiliaryWindowsMainService;nativeHostMainService;configureSession(){const i=o=>o?.startsWith(`${v.vscodeWebview}://`),t=new Set(["clipboard-read","clipboard-sanitized-write"]);U.defaultSession.setPermissionRequestHandler((o,c,s,m)=>i(m.requestingUrl)?s(t.has(c)):s(!1)),U.defaultSession.setPermissionCheckHandler((o,c,s,m)=>i(m.requestingUrl)?t.has(c):!1);const n=new Set([v.file,v.vscodeFileResource,v.vscodeRemoteResource,v.vscodeManagedRemoteResource,"devtools"]),e=o=>{for(let c=o;c;c=c.parent)if(c.url.startsWith(`${v.vscodeWebview}://`))return!0;return!1},r=o=>o.resourceType==="xhr"||e(o.frame),a=o=>{const c=o.frame;if(!c||!this.windowsMainService)return!1;const s=Ee.getAllWindows();for(const m of s)if(c.processId===m.webContents.mainFrame.processId)return!0;return!1},l=(o,c)=>{if(o.path!=="/index.html")return!0;const s=c.frame;if(!s||!this.windowsMainService)return!1;for(const m of this.windowsMainService.getWindows())if(m.win&&s.processId===m.win.webContents.mainFrame.processId)return!0;return!1};U.defaultSession.webRequest.onBeforeRequest((o,c)=>{const s=w.parse(o.url);return s.scheme===v.vscodeWebview&&!l(s,o)?(this.logService.error("Blocked vscode-webview request",o.url),c({cancel:!0})):s.scheme===v.vscodeFileResource&&!a(o)?(this.logService.error("Blocked vscode-file request",o.url),c({cancel:!0})):s.path.endsWith(".svg")&&!n.has(s.scheme)?c({cancel:!r(o)}):c({cancel:!1})}),U.defaultSession.webRequest.onHeadersReceived((o,c)=>{const s=o.responseHeaders,m=s["content-type"]||s["Content-Type"];if(m&&Array.isArray(m)){const u=w.parse(o.url);if(u.path.endsWith(".svg")&&n.has(u.scheme))return s["Content-Type"]=["image/svg+xml"],c({cancel:!1,responseHeaders:s});if(!u.path.endsWith(v.vscodeRemoteResource)&&m.some(g=>g.toLowerCase().includes("image/svg")))return c({cancel:!r(o)})}return c({cancel:!1})}),U.defaultSession.webRequest.onHeadersReceived((o,c)=>{if(o.url.startsWith("https://vscode.download.prss.microsoft.com/")){const s=o.responseHeaders??Object.create(null);if(s["Access-Control-Allow-Origin"]===void 0)return s["Access-Control-Allow-Origin"]=["*"],c({cancel:!1,responseHeaders:s})}return c({cancel:!1})});const d=U.defaultSession;typeof d.setCodeCachePath=="function"&&this.environmentMainService.codeCachePath&&d.setCodeCachePath($e(this.environmentMainService.codeCachePath,"chrome")),x&&(this.configurationService.getValue("security.restrictUNCAccess")===!1?Te():xe(this.configurationService.getValue("security.allowedUNCHosts")))}registerListeners(){He(n=>this.onUnexpectedError(n)),process.on("uncaughtException",n=>{Fe(n)||Q(n)}),process.on("unhandledRejection",n=>Q(n)),F.once(this.lifecycleMainService.onWillShutdown)(()=>this.dispose()),je(),R.on("accessibility-support-changed",(n,e)=>{this.windowsMainService?.sendToAll("vscode:accessibilitySupportChanged",e)}),R.on("activate",async(n,e)=>{this.logService.trace("app#activate"),e||await this.windowsMainService?.openEmptyWindow({context:I.DOCK})}),R.on("web-contents-created",(n,e)=>{e?.opener?.url.startsWith(`${v.vscodeFileResource}://${Be}/`)&&(this.logService.trace('[aux window]  app.on("web-contents-created"): Registering auxiliary window'),this.auxiliaryWindowsMainService?.registerWindow(e)),e.on("will-navigate",r=>{this.logService.error("webContents#will-navigate: Prevented webcontent navigation"),r.preventDefault()}),e.setWindowOpenHandler(r=>r.url==="about:blank"?(this.logService.trace("[aux window] webContents#setWindowOpenHandler: Allowing auxiliary window to open on about:blank"),{action:"allow",overrideBrowserWindowOptions:this.auxiliaryWindowsMainService?.createWindow(r)}):(this.logService.trace(`webContents#setWindowOpenHandler: Prevented opening window with URL ${r.url}}`),this.nativeHostMainService?.openExternal(void 0,r.url),{action:"deny"}))});let i=[],t;R.on("open-file",(n,e)=>{e=ge(e),this.logService.trace("app#open-file: ",e),n.preventDefault(),i.push(N(e)?{workspaceUri:w.file(e)}:{fileUri:w.file(e)}),t!==void 0&&(clearTimeout(t),t=void 0),t=setTimeout(async()=>{await this.windowsMainService?.open({context:I.DOCK,cli:this.environmentMainService.args,urisToOpen:i,gotoLineMode:!1,preferNewWindow:!0}),i=[],t=void 0},100)}),R.on("new-window-for-tab",async()=>{await this.windowsMainService?.openEmptyWindow({context:I.DESKTOP})}),W.handle("vscode:fetchShellEnv",n=>{const e=this.windowsMainService?.getWindowByWebContents(n.sender);let r,a;return e?.config?(r=e.config,a={...process.env,...e.config.userEnv}):(r=this.environmentMainService.args,a=process.env),this.resolveShellEnvironment(r,a,!1)}),W.on("vscode:toggleDevTools",n=>n.sender.toggleDevTools()),W.on("vscode:openDevTools",n=>n.sender.openDevTools()),W.on("vscode:reloadWindow",n=>n.sender.reload()),W.handle("vscode:notifyZoomLevel",async(n,e)=>{const r=this.windowsMainService?.getWindowByWebContents(n.sender);r&&r.notifyZoomLevel(e)})}onUnexpectedError(i){if(i){const t={message:`[uncaught exception in main]: ${i.message}`,stack:i.stack};this.windowsMainService?.sendToFocused("vscode:reportError",JSON.stringify(t))}this.logService.error(`[uncaught exception in main]: ${i}`),i.stack&&this.logService.error(i.stack)}async startup(){this.logService.debug("Starting VS Code"),this.logService.debug(`from: ${this.environmentMainService.appRoot}`),this.logService.debug("args:",this.environmentMainService.args);const i=this.productService.win32AppUserModelId;x&&i&&R.setAppUserModelId(i);try{E&&this.configurationService.getValue("window.nativeTabs")===!0&&!J.getUserDefault("NSUseImprovedLayoutPass","boolean")&&J.setUserDefault("NSUseImprovedLayoutPass","boolean",!0)}catch(s){this.logService.error(s)}const t=new Ze;F.once(this.lifecycleMainService.onWillShutdown)(s=>{s.reason===Ur.KILL&&t.dispose()}),this.logService.trace("Resolving machine identifier...");const[n,e,r]=await Promise.all([Ui(this.stateService,this.logService),bi(this.stateService,this.logService),Wi(this.stateService,this.logService)]);this.logService.trace(`Resolved machine identifier: ${n}`);const{sharedProcessReady:a,sharedProcessClient:l}=this.setupSharedProcess(n,e,r),d=await this.initServices(n,e,r,a);d.invokeFunction(s=>s.get(ee)),this._register(d.createInstance(Mi)),d.invokeFunction(s=>this.initChannels(s,t,l));const o=await d.invokeFunction(s=>this.setupProtocolUrlHandlers(s,t));this.setupManagedRemoteResourceUrlHandler(t),this.lifecycleMainService.phase=_.Ready,await d.invokeFunction(s=>this.openFirstWindow(s,o)),this.lifecycleMainService.phase=_.AfterWindowOpen,this.afterWindowOpen(),this._register(new Pi(()=>{this._register(Ri(()=>this.lifecycleMainService.phase=_.Eventually,2500))},2500)).schedule()}async setupProtocolUrlHandlers(i,t){const n=this.windowsMainService=i.get(k),e=i.get($),r=this.nativeHostMainService=i.get(q),a=i.get(ie),l=this;e.registerHandler({async handleURL(u,g){return l.handleProtocolUrl(n,a,e,u,g)}});const d=this._register(new ci({onDidOpenMainWindow:r.onDidOpenMainWindow,onDidFocusMainWindow:r.onDidFocusMainWindow,getActiveWindowId:()=>r.getActiveWindowId(-1)})),o=new Je(u=>d.getActiveClientId().then(g=>u===g)),c=new ri(o,this.logService),s=t.getChannel("urlHandler",c);e.registerHandler(new ei(s));const m=await this.resolveInitialProtocolUrls(n,a);return this._register(new ti(m?.urls,e,n,this.environmentMainService,this.productService,this.logService)),m}setupManagedRemoteResourceUrlHandler(i){const t=()=>({statusCode:404,data:"Not found"}),n=new qi(()=>i.getChannel(Hi,new _i));j.registerBufferProtocol(v.vscodeManagedRemoteResource,(e,r)=>{const a=w.parse(e.url);if(!a.authority.startsWith("window:"))return r(t());n.value.call(Di,[a]).then(l=>r({...l,data:Buffer.from(l.body,"base64")}),l=>{this.logService.warn("error dispatching remote resource call",l),r({statusCode:500,data:String(l)})})})}async resolveInitialProtocolUrls(i,t){const n=this.environmentMainService.args["open-url"]?this.environmentMainService.args._urls||[]:[];n.length>0&&this.logService.trace("app#resolveInitialProtocolUrls() protocol urls from command line:",n);const e=global.getOpenUrls()||[];if(e.length>0&&this.logService.trace("app#resolveInitialProtocolUrls() protocol urls from macOS 'open-url' event:",e),n.length+e.length===0)return;const r=[...n,...e].map(d=>{try{return{uri:w.parse(d),originalUrl:d}}catch{this.logService.trace("app#resolveInitialProtocolUrls() protocol url failed to parse:",d);return}}),a=[],l=[];for(const d of r){if(!d)continue;const o=this.getWindowOpenableFromProtocolUrl(d.uri);if(o)if(await this.shouldBlockOpenable(o,i,t)){this.logService.trace("app#resolveInitialProtocolUrls() protocol url was blocked:",d.uri.toString(!0));continue}else this.logService.trace("app#resolveInitialProtocolUrls() protocol url will be handled as window to open:",d.uri.toString(!0),o),a.push(o);else this.logService.trace("app#resolveInitialProtocolUrls() protocol url will be passed to active window for handling:",d.uri.toString(!0)),l.push(d)}return{urls:l,openables:a}}async shouldBlockOpenable(i,t,n){let e,r;if(si(i)?(e=i.workspaceUri,r=M("confirmOpenMessageWorkspace","An external application wants to open '{0}' in {1}. Do you want to open this workspace file?",e.scheme===v.file?H(e,{os:D,tildify:this.environmentMainService}):e.toString(!0),this.productService.nameShort)):oi(i)?(e=i.folderUri,r=M("confirmOpenMessageFolder","An external application wants to open '{0}' in {1}. Do you want to open this folder?",e.scheme===v.file?H(e,{os:D,tildify:this.environmentMainService}):e.toString(!0),this.productService.nameShort)):(e=i.fileUri,r=M("confirmOpenMessageFileOrFolder","An external application wants to open '{0}' in {1}. Do you want to open this file or folder?",e.scheme===v.file?H(e,{os:D,tildify:this.environmentMainService}):e.toString(!0),this.productService.nameShort)),e.scheme!==v.file&&e.scheme!==v.vscodeRemote||this.configurationService.getValue(b.SECURITY_PROTOCOL_HANDLING_CONFIRMATION_SETTING_KEY[e.scheme])===!1)return!1;const{response:l,checkboxChecked:d}=await n.showMessageBox({type:"warning",buttons:[M({key:"open",comment:["&& denotes a mnemonic"]},"&&Yes"),M({key:"cancel",comment:["&& denotes a mnemonic"]},"&&No")],message:r,detail:M("confirmOpenDetail","If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'"),checkboxLabel:e.scheme===v.file?M("doNotAskAgainLocal","Allow opening local paths without asking"):M("doNotAskAgainRemote","Allow opening remote paths without asking"),cancelId:1});if(l!==0)return!0;if(d){const o={channel:"vscode:disablePromptForProtocolHandling",args:e.scheme===v.file?"local":"remote"};t.sendToFocused(o.channel,o.args),t.sendToOpeningWindow(o.channel,o.args)}return!1}getWindowOpenableFromProtocolUrl(i){if(i.path){if(i.authority===v.file){const t=w.file(i.fsPath);return N(t)?{workspaceUri:t}:{fileUri:t}}else if(i.authority===v.vscodeRemote){const t=i.path.indexOf(Ke.sep,1);let n,e;t!==-1?(n=i.path.substring(1,t),e=i.path.substring(t)):(n=i.path.substring(1),e="/");let r=i.query;const a=new URLSearchParams(i.query);a.get("windowId")==="_blank"&&(a.delete("windowId"),r=a.toString());const l=w.from({scheme:v.vscodeRemote,authority:n,path:e,query:r,fragment:i.fragment});return N(e)?{workspaceUri:l}:/:[\d]+$/.test(e)?{fileUri:l}:{folderUri:l}}}}async handleProtocolUrl(i,t,n,e,r){this.logService.trace("app#handleProtocolUrl():",e.toString(!0),r),e.scheme===this.productService.urlProtocol&&e.path==="workspace"&&(e=e.with({authority:"file",path:w.parse(e.query).path,query:""}));let a=!1;const l=new URLSearchParams(e.query);l.get("windowId")==="_blank"?(this.logService.trace("app#handleProtocolUrl() found 'windowId=_blank' as parameter, setting shouldOpenInNewWindow=true:",e.toString(!0)),l.delete("windowId"),e=e.with({query:l.toString()}),a=!0):E&&i.getWindowCount()===0&&(this.logService.trace("app#handleProtocolUrl() running on macOS with no window open, setting shouldOpenInNewWindow=true:",e.toString(!0)),a=!0);const d=l.get("continueOn");d!==null&&(this.logService.trace("app#handleProtocolUrl() found 'continueOn' as parameter:",e.toString(!0)),l.delete("continueOn"),e=e.with({query:l.toString()}),this.environmentMainService.continueOn=d??void 0);const o=this.getWindowOpenableFromProtocolUrl(e);return o?await this.shouldBlockOpenable(o,i,t)?(this.logService.trace("app#handleProtocolUrl() protocol url was blocked:",e.toString(!0)),!0):(this.logService.trace("app#handleProtocolUrl() opening protocol url as window:",o,e.toString(!0)),(await i.open({context:I.LINK,cli:{...this.environmentMainService.args},urisToOpen:[o],forceNewWindow:a,gotoLineMode:!0})).at(0)?.focus(),!0):a?(this.logService.trace("app#handleProtocolUrl() opening empty window and passing in protocol url:",e.toString(!0)),await(await i.open({context:I.LINK,cli:{...this.environmentMainService.args},forceNewWindow:!0,forceEmpty:!0,gotoLineMode:!0,remoteAuthority:xr(e)})).at(0)?.ready(),n.open(e,r)):(this.logService.trace("app#handleProtocolUrl(): not handled",e.toString(!0),r),!1)}setupSharedProcess(i,t,n){const e=this._register(this.mainInstantiationService.createInstance(Tr,i,t,n));this._register(e.onDidCrash(()=>this.windowsMainService?.sendToFocused("vscode:reportSharedProcessCrash")));const r=(async()=>{this.logService.trace("Main->SharedProcess#connect");const l=await e.connect();return this.logService.trace("Main->SharedProcess#connect: connection established"),new Qe(l,"main")})();return{sharedProcessReady:(async()=>(await e.whenReady(),r))(),sharedProcessClient:r}}async initServices(i,t,n,e){const r=new yr;switch(process.platform){case"win32":r.set(O,new p(Xr));break;case"linux":Ge?r.set(O,new p(Qr,[process.env.SNAP,process.env.SNAP_REVISION])):r.set(O,new p(Zr));break;case"darwin":r.set(O,new p(Jr));break}r.set(k,new p(ai,[i,t,n,this.userEnv],!1)),r.set(Se,new p(Bi,void 0,!1));const a=new sr(this.logService,this.productService);r.set(ie,a),r.set(le,new p(Pr,void 0,!1)),r.set(re,new p(or,void 0,!1)),r.set(nr,h.toService(X(e.then(s=>s.getChannel("diagnostics"))))),r.set(ae,new p(Mr,[this.userEnv])),r.set(se,new p(Ir,[this.userEnv])),r.set(te,new p(ar)),r.set(ce,new p(Cr)),r.set(q,new p(Lr,void 0,!1)),r.set(ve,new p(ni)),r.set(de,new p(Or)),r.set(ne,new p(vr)),r.set(B,new p(Dr)),r.set(Hr,new p(Fr));const l=new Ai({graceTime:fe.GraceTime,shortGraceTime:fe.ShortGraceTime,scrollback:this.configurationService.getValue(Ni.PersistentSessionScrollback)??100},this.configurationService,this.environmentMainService,this.lifecycleMainService,this.logService),d=new Fi(l,this.configurationService,this.logService,this.loggerService);r.set(ue,d),x?r.set(T,new p(ur)):E?r.set(T,new p(hr)):Ve&&r.set(T,new p(mr));const o=new rr(this.environmentMainService,this.configurationService,this.logService,this.stateService);r.set(er,o);const c=new mi(this.environmentMainService,this.logService,this.userDataProfilesMainService,o,a);if(r.set(vi,c),r.set(me,new p(pi,void 0,!1)),r.set(li,new p(di,void 0,!1)),r.set($,new p(ii,void 0,!1)),zr(this.productService,this.environmentMainService)){const s=Gr(this.productService,this.configurationService),m=X(e.then(A=>A.getChannel("telemetryAppender"))),u=new Br(m),g=_r(Ne(),ke(),process.arch,this.productService.commit,this.productService.version,i,t,n,s),f=Kr(this.environmentMainService),P={appenders:[u],commonProperties:g,piiPaths:f,sendErrorTelemetry:!0};r.set(pe,new p($r,[P],!1))}else r.set(pe,Yr);return r.set(gi,new p(Oi,void 0,!0)),r.set(wi,new p(yi,void 0,!0)),r.set(he,new p(xi,void 0,!0)),r.set(ee,new p(Xe)),r.set($i,new p(Ki,void 0,!0)),await Ci.settled([o.initialize(),c.initialize()]),this.mainInstantiationService.createChild(r)}initChannels(i,t,n){const e=this._register(new qe),r=h.fromService(i.get(le),e,{disableMarshalling:!0});this.mainProcessNodeIpcServer.registerChannel("launch",r);const a=h.fromService(i.get(re),e,{disableMarshalling:!0});this.mainProcessNodeIpcServer.registerChannel("diagnostics",a);const l=e.add(new ui(i.get(hi)));t.registerChannel("policy",l),n.then(S=>S.registerChannel("policy",l));const d=this.fileService.getProvider(v.file);Ye(d instanceof gr);const o=e.add(new Sr(d,this.logService,this.environmentMainService));t.registerChannel(oe,o),n.then(S=>S.registerChannel(oe,o));const c=h.fromService(i.get(K),e);t.registerChannel("userDataProfiles",c),n.then(S=>S.registerChannel("userDataProfiles",c));const s=new fi(i.get(Si));n.then(S=>S.registerChannel("request",s));const m=new jr(i.get(O));t.registerChannel("update",m);const u=h.fromService(i.get(ae),e);t.registerChannel("issue",u);const g=h.fromService(i.get(se),e);t.registerChannel("process",g);const f=h.fromService(i.get(te),e);t.registerChannel("encryption",f);const P=h.fromService(i.get(kr),e);t.registerChannel("sign",P);const A=h.fromService(i.get(ce),e);t.registerChannel("keyboardLayout",A),this.nativeHostMainService=i.get(q);const V=h.fromService(this.nativeHostMainService,e);t.registerChannel("nativeHost",V),n.then(S=>S.registerChannel("nativeHost",V));const we=h.fromService(i.get(me),e);t.registerChannel("workspaces",we);const ye=h.fromService(i.get(de),e);t.registerChannel("menubar",ye);const Me=h.fromService(i.get($),e);t.registerChannel("url",Me);const Ie=h.fromService(i.get(ve),e);t.registerChannel("webview",Ie);const G=e.add(new Ar(this.logService,i.get(B)));t.registerChannel("storage",G),n.then(S=>S.registerChannel("storage",G));const Ce=e.add(new Ii(i.get(B),i.get(K),this.logService));n.then(S=>S.registerChannel("profileStorageListener",Ce));const Pe=h.fromService(i.get(ue),e);t.registerChannel(ki.LocalPty,Pe);const Re=h.fromService(i.get(T),e);t.registerChannel("externalTerminal",Re);const Y=new Li(i.get(Ei));t.registerChannel("logger",Y),n.then(S=>S.registerChannel("logger",Y));const Ue=new tr(i.get(k));t.registerChannel("extensionhostdebugservice",Ue);const be=h.fromService(i.get(ne),e);t.registerChannel(pr,be);const We=h.fromService(i.get(he),e);t.registerChannel(Ti,We)}async openFirstWindow(i,t){const n=this.windowsMainService=i.get(k);this.auxiliaryWindowsMainService=i.get(Se);const e=lr(process.env)?I.CLI:I.DESKTOP,r=this.environmentMainService.args;if(t){if(t.openables.length>0)return n.open({context:e,cli:r,urisToOpen:t.openables,gotoLineMode:!0,initialStartup:!0});if(t.urls.length>0)for(const f of t.urls){const P=new URLSearchParams(f.uri.query);if(P.get("windowId")==="_blank")return P.delete("windowId"),f.originalUrl=f.uri.toString(!0),f.uri=f.uri.with({query:P.toString()}),n.open({context:e,cli:r,forceNewWindow:!0,forceEmpty:!0,gotoLineMode:!0,initialStartup:!0})}}const a=global.macOpenFiles,l=r._.length,d=!!r["folder-uri"],o=!!r["file-uri"],c=r["skip-add-to-recently-opened"]===!0,s=r.wait&&r.waitMarkerFilePath?w.file(r.waitMarkerFilePath):void 0,m=r.remote||void 0,u=r.profile,g=r["profile-temp"];if(!l&&!d&&!o){if(r["new-window"]||u||g)return n.open({context:e,cli:r,forceNewWindow:!0,forceEmpty:!0,noRecentEntry:c,waitMarkerFileURI:s,initialStartup:!0,remoteAuthority:m,forceProfile:u,forceTempProfile:g});if(a.length)return n.open({context:I.DOCK,cli:r,urisToOpen:a.map(f=>(f=ge(f),N(f)?{workspaceUri:w.file(f)}:{fileUri:w.file(f)})),noRecentEntry:c,waitMarkerFileURI:s,initialStartup:!0})}return n.open({context:e,cli:r,forceNewWindow:r["new-window"],diffMode:r.diff,mergeMode:r.merge,noRecentEntry:c,waitMarkerFileURI:s,gotoLineMode:r.goto,initialStartup:!0,remoteAuthority:m,forceProfile:u,forceTempProfile:g})}afterWindowOpen(){this.installMutex(),j.registerHttpProtocol(v.vscodeRemoteResource,(i,t)=>{t({url:i.url.replace(/^vscode-remote-resource:/,"http:"),method:i.method})}),this.resolveShellEnvironment(this.environmentMainService.args,process.env,!0),this.updateCrashReporterEnablement(),E&&R.runningUnderARM64Translation&&this.windowsMainService?.sendToFocused("vscode:showTranslatedBuildWarning")}async installMutex(){const i=this.productService.win32MutexName;if(x&&i)try{const t=await import("@vscode/windows-mutex"),n=new t.Mutex(i);F.once(this.lifecycleMainService.onWillShutdown)(()=>n.release())}catch(t){this.logService.error(t)}}async resolveShellEnvironment(i,t,n){try{return await dr(this.configurationService,this.logService,i,t)}catch(e){const r=Ae(e);n?this.windowsMainService?.sendToFocused("vscode:showResolveShellEnvError",r):this.logService.error(r)}return{}}async updateCrashReporterEnablement(){try{const t=(await this.fileService.readFile(this.environmentMainService.argvResource)).value.toString(),n=De(t),r=Vr(this.configurationService)>=qr.CRASH;if(n["enable-crash-reporter"]===void 0){const a=["","	// Allows to disable crash reporting.","	// Should restart the app if the value is changed.",`	"enable-crash-reporter": ${r},`,"","	// Unique id used for correlating crash reports sent from this instance.","	// Do not edit this value.",`	"crash-reporter-id": "${ze()}"`,"}"],l=t.substring(0,t.length-2).concat(`,
`,a.join(`
`));await this.fileService.writeFile(this.environmentMainService.argvResource,Z.fromString(l))}else{const a=t.replace(/"enable-crash-reporter": .*,/,`"enable-crash-reporter": ${r},`);a!==t&&await this.fileService.writeFile(this.environmentMainService.argvResource,Z.fromString(a))}}catch(i){this.logService.error(i),this.windowsMainService?.sendToFocused("vscode:showArgvParseWarning")}}};b=z([y(2,wr),y(3,Wr),y(4,br),y(5,cr),y(6,Rr),y(7,ir),y(8,Nr),y(9,fr),y(10,Er),y(11,K)],b);export{b as CodeApplication};
