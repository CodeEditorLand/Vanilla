{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-main/main.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"../../platform/update/common/update.config.contribution.js\";\n\nimport { promises, unlinkSync } from \"fs\";\nimport { app, dialog } from \"electron\";\nimport { coalesce, distinct } from \"../../base/common/arrays.js\";\nimport { Promises } from \"../../base/common/async.js\";\nimport { toErrorMessage } from \"../../base/common/errorMessage.js\";\nimport {\n\tExpectedError,\n\tsetUnexpectedErrorHandler,\n} from \"../../base/common/errors.js\";\nimport { Event } from \"../../base/common/event.js\";\nimport {\n\ttype IPathWithLineAndColumn,\n\tisValidBasename,\n\tparseLineAndColumnAware,\n\tsanitizeFilePath,\n} from \"../../base/common/extpath.js\";\nimport { getPathLabel } from \"../../base/common/labels.js\";\nimport { DisposableStore } from \"../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../base/common/network.js\";\nimport { basename, resolve } from \"../../base/common/path.js\";\nimport { mark } from \"../../base/common/performance.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\tisMacintosh,\n\tisWindows,\n} from \"../../base/common/platform.js\";\nimport { cwd } from \"../../base/common/process.js\";\nimport { rtrim, trim } from \"../../base/common/strings.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport { Promises as FSPromises } from \"../../base/node/pfs.js\";\nimport { addUNCHostToAllowlist, getUNCHost } from \"../../base/node/unc.js\";\nimport { ProxyChannel } from \"../../base/parts/ipc/common/ipc.js\";\nimport type { Client as NodeIPCClient } from \"../../base/parts/ipc/common/ipc.net.js\";\nimport {\n\ttype Server as NodeIPCServer,\n\tXDG_RUNTIME_DIR,\n\tconnect as nodeIPCConnect,\n\tserve as nodeIPCServe,\n} from \"../../base/parts/ipc/node/ipc.net.js\";\nimport { localize } from \"../../nls.js\";\nimport { IConfigurationService } from \"../../platform/configuration/common/configuration.js\";\nimport { ConfigurationService } from \"../../platform/configuration/common/configurationService.js\";\nimport type { IDiagnosticsMainService } from \"../../platform/diagnostics/electron-main/diagnosticsMainService.js\";\nimport { DiagnosticsService } from \"../../platform/diagnostics/node/diagnosticsService.js\";\nimport { massageMessageBoxOptions } from \"../../platform/dialogs/common/dialogs.js\";\nimport type { NativeParsedArgs } from \"../../platform/environment/common/argv.js\";\nimport {\n\tEnvironmentMainService,\n\tIEnvironmentMainService,\n} from \"../../platform/environment/electron-main/environmentMainService.js\";\nimport {\n\taddArg,\n\tparseMainProcessArgv,\n} from \"../../platform/environment/node/argvHelper.js\";\nimport { createWaitMarkerFileSync } from \"../../platform/environment/node/wait.js\";\nimport { FileService } from \"../../platform/files/common/fileService.js\";\nimport { IFileService } from \"../../platform/files/common/files.js\";\nimport { DiskFileSystemProvider } from \"../../platform/files/node/diskFileSystemProvider.js\";\nimport { SyncDescriptor } from \"../../platform/instantiation/common/descriptors.js\";\nimport type {\n\tIInstantiationService,\n\tServicesAccessor,\n} from \"../../platform/instantiation/common/instantiation.js\";\nimport { InstantiationService } from \"../../platform/instantiation/common/instantiationService.js\";\nimport { ServiceCollection } from \"../../platform/instantiation/common/serviceCollection.js\";\nimport type { ILaunchMainService } from \"../../platform/launch/electron-main/launchMainService.js\";\nimport {\n\tILifecycleMainService,\n\tLifecycleMainService,\n} from \"../../platform/lifecycle/electron-main/lifecycleMainService.js\";\nimport { BufferLogger } from \"../../platform/log/common/bufferLog.js\";\nimport {\n\tConsoleMainLogger,\n\tILogService,\n\tILoggerService,\n\tgetLogLevel,\n} from \"../../platform/log/common/log.js\";\nimport { LogService } from \"../../platform/log/common/logService.js\";\nimport {\n\tILoggerMainService,\n\tLoggerMainService,\n} from \"../../platform/log/electron-main/loggerService.js\";\nimport { FilePolicyService } from \"../../platform/policy/common/filePolicyService.js\";\nimport {\n\tIPolicyService,\n\tNullPolicyService,\n} from \"../../platform/policy/common/policy.js\";\nimport { NativePolicyService } from \"../../platform/policy/node/nativePolicyService.js\";\nimport product from \"../../platform/product/common/product.js\";\nimport { IProductService } from \"../../platform/product/common/productService.js\";\nimport { IProtocolMainService } from \"../../platform/protocol/electron-main/protocol.js\";\nimport { ProtocolMainService } from \"../../platform/protocol/electron-main/protocolMainService.js\";\nimport { IRequestService } from \"../../platform/request/common/request.js\";\nimport { RequestService } from \"../../platform/request/electron-utility/requestService.js\";\nimport { ISignService } from \"../../platform/sign/common/sign.js\";\nimport { SignService } from \"../../platform/sign/node/signService.js\";\nimport {\n\tIStateReadService,\n\tIStateService,\n} from \"../../platform/state/node/state.js\";\nimport {\n\tSaveStrategy,\n\tStateService,\n} from \"../../platform/state/node/stateService.js\";\nimport { NullTelemetryService } from \"../../platform/telemetry/common/telemetryUtils.js\";\nimport {\n\tIThemeMainService,\n\tThemeMainService,\n} from \"../../platform/theme/electron-main/themeMainService.js\";\nimport { ITunnelService } from \"../../platform/tunnel/common/tunnel.js\";\nimport { TunnelService } from \"../../platform/tunnel/node/tunnelService.js\";\nimport { IUriIdentityService } from \"../../platform/uriIdentity/common/uriIdentity.js\";\nimport { UriIdentityService } from \"../../platform/uriIdentity/common/uriIdentityService.js\";\nimport { FileUserDataProvider } from \"../../platform/userData/common/fileUserDataProvider.js\";\nimport {\n\tIUserDataProfilesMainService,\n\tUserDataProfilesMainService,\n} from \"../../platform/userDataProfile/electron-main/userDataProfile.js\";\nimport { CodeApplication } from \"./app.js\";\n\n/**\n * The main VS Code entry point.\n *\n * Note: This class can exist more than once for example when VS Code is already\n * running and a second instance is started from the command line. It will always\n * try to communicate with an existing instance to prevent that 2 VS Code instances\n * are running at the same time.\n */\nclass CodeMain {\n\tmain(): void {\n\t\ttry {\n\t\t\tthis.startup();\n\t\t} catch (error) {\n\t\t\tconsole.error(error.message);\n\t\t\tapp.exit(1);\n\t\t}\n\t}\n\n\tprivate async startup(): Promise<void> {\n\t\t// Set the error handler early enough so that we are not getting the\n\t\t// default electron error dialog popping up\n\t\tsetUnexpectedErrorHandler((err) => console.error(err));\n\n\t\t// Create services\n\t\tconst [\n\t\t\tinstantiationService,\n\t\t\tinstanceEnvironment,\n\t\t\tenvironmentMainService,\n\t\t\tconfigurationService,\n\t\t\tstateMainService,\n\t\t\tbufferLogService,\n\t\t\tproductService,\n\t\t\tuserDataProfilesMainService,\n\t\t] = this.createServices();\n\n\t\ttry {\n\t\t\t// Init services\n\t\t\ttry {\n\t\t\t\tawait this.initServices(\n\t\t\t\t\tenvironmentMainService,\n\t\t\t\t\tuserDataProfilesMainService,\n\t\t\t\t\tconfigurationService,\n\t\t\t\t\tstateMainService,\n\t\t\t\t\tproductService,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(\n\t\t\t\t\tenvironmentMainService,\n\t\t\t\t\tproductService,\n\t\t\t\t\terror,\n\t\t\t\t);\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// Startup\n\t\t\tawait instantiationService.invokeFunction(async (accessor) => {\n\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\tconst lifecycleMainService = accessor.get(\n\t\t\t\t\tILifecycleMainService,\n\t\t\t\t);\n\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\tconst loggerService = accessor.get(ILoggerService);\n\n\t\t\t\t// Create the main IPC server by trying to be the server\n\t\t\t\t// If this throws an error it means we are not the first\n\t\t\t\t// instance of VS Code running and so we would quit.\n\t\t\t\tconst mainProcessNodeIpcServer = await this.claimInstance(\n\t\t\t\t\tlogService,\n\t\t\t\t\tenvironmentMainService,\n\t\t\t\t\tlifecycleMainService,\n\t\t\t\t\tinstantiationService,\n\t\t\t\t\tproductService,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\n\t\t\t\t// Write a lockfile to indicate an instance is running\n\t\t\t\t// (https://github.com/microsoft/vscode/issues/127861#issuecomment-877417451)\n\t\t\t\tFSPromises.writeFile(\n\t\t\t\t\tenvironmentMainService.mainLockfile,\n\t\t\t\t\tString(process.pid),\n\t\t\t\t).catch((err) => {\n\t\t\t\t\tlogService.warn(\n\t\t\t\t\t\t`app#startup(): Error writing main lockfile: ${err.stack}`,\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\t// Delay creation of spdlog for perf reasons (https://github.com/microsoft/vscode/issues/72906)\n\t\t\t\tbufferLogService.logger = loggerService.createLogger(\"main\", {\n\t\t\t\t\tname: localize(\"mainLog\", \"Main\"),\n\t\t\t\t});\n\n\t\t\t\t// Lifecycle\n\t\t\t\tEvent.once(lifecycleMainService.onWillShutdown)((evt) => {\n\t\t\t\t\tfileService.dispose();\n\t\t\t\t\tconfigurationService.dispose();\n\t\t\t\t\tevt.join(\n\t\t\t\t\t\t\"instanceLockfile\",\n\t\t\t\t\t\tpromises\n\t\t\t\t\t\t\t.unlink(environmentMainService.mainLockfile)\n\t\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t\t/* ignored */\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\treturn instantiationService\n\t\t\t\t\t.createInstance(\n\t\t\t\t\t\tCodeApplication,\n\t\t\t\t\t\tmainProcessNodeIpcServer,\n\t\t\t\t\t\tinstanceEnvironment,\n\t\t\t\t\t)\n\t\t\t\t\t.startup();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tinstantiationService.invokeFunction(this.quit, error);\n\t\t}\n\t}\n\n\tprivate createServices(): [\n\t\tIInstantiationService,\n\t\tIProcessEnvironment,\n\t\tIEnvironmentMainService,\n\t\tConfigurationService,\n\t\tStateService,\n\t\tBufferLogger,\n\t\tIProductService,\n\t\tUserDataProfilesMainService,\n\t] {\n\t\tconst services = new ServiceCollection();\n\t\tconst disposables = new DisposableStore();\n\t\tprocess.once(\"exit\", () => disposables.dispose());\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentMainService = new EnvironmentMainService(\n\t\t\tthis.resolveArgs(),\n\t\t\tproductService,\n\t\t);\n\t\tconst instanceEnvironment = this.patchEnvironment(\n\t\t\tenvironmentMainService,\n\t\t); // Patch `process.env` with the instance's environment\n\t\tservices.set(IEnvironmentMainService, environmentMainService);\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerMainService(\n\t\t\tgetLogLevel(environmentMainService),\n\t\t\tenvironmentMainService.logsHome,\n\t\t);\n\t\tservices.set(ILoggerMainService, loggerService);\n\n\t\t// Log: We need to buffer the spdlog logs until we are sure\n\t\t// we are the only instance running, otherwise we'll have concurrent\n\t\t// log file access on Windows (https://github.com/microsoft/vscode/issues/41218)\n\t\tconst bufferLogger = new BufferLogger(loggerService.getLogLevel());\n\t\tconst logService = disposables.add(\n\t\t\tnew LogService(bufferLogger, [\n\t\t\t\tnew ConsoleMainLogger(loggerService.getLogLevel()),\n\t\t\t]),\n\t\t);\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = new FileService(logService);\n\t\tservices.set(IFileService, fileService);\n\t\tconst diskFileSystemProvider = new DiskFileSystemProvider(logService);\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// State\n\t\tconst stateService = new StateService(\n\t\t\tSaveStrategy.DELAYED,\n\t\t\tenvironmentMainService,\n\t\t\tlogService,\n\t\t\tfileService,\n\t\t);\n\t\tservices.set(IStateReadService, stateService);\n\t\tservices.set(IStateService, stateService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesMainService = new UserDataProfilesMainService(\n\t\t\tstateService,\n\t\t\turiIdentityService,\n\t\t\tenvironmentMainService,\n\t\t\tfileService,\n\t\t\tlogService,\n\t\t);\n\t\tservices.set(IUserDataProfilesMainService, userDataProfilesMainService);\n\n\t\t// Use FileUserDataProvider for user data to\n\t\t// enable atomic read / write operations.\n\t\tfileService.registerProvider(\n\t\t\tSchemas.vscodeUserData,\n\t\t\tnew FileUserDataProvider(\n\t\t\t\tSchemas.file,\n\t\t\t\tdiskFileSystemProvider,\n\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\tuserDataProfilesMainService,\n\t\t\t\turiIdentityService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\n\t\t// Policy\n\t\tconst policyService =\n\t\t\tisWindows && productService.win32RegValueName\n\t\t\t\t? disposables.add(\n\t\t\t\t\t\tnew NativePolicyService(\n\t\t\t\t\t\t\tlogService,\n\t\t\t\t\t\t\tproductService.win32RegValueName,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t: environmentMainService.policyFile\n\t\t\t\t\t? disposables.add(\n\t\t\t\t\t\t\tnew FilePolicyService(\n\t\t\t\t\t\t\t\tenvironmentMainService.policyFile,\n\t\t\t\t\t\t\t\tfileService,\n\t\t\t\t\t\t\t\tlogService,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t: new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Configuration\n\t\tconst configurationService = new ConfigurationService(\n\t\t\tuserDataProfilesMainService.defaultProfile.settingsResource,\n\t\t\tfileService,\n\t\t\tpolicyService,\n\t\t\tlogService,\n\t\t);\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Lifecycle\n\t\tservices.set(\n\t\t\tILifecycleMainService,\n\t\t\tnew SyncDescriptor(LifecycleMainService, undefined, false),\n\t\t);\n\n\t\t// Request\n\t\tservices.set(\n\t\t\tIRequestService,\n\t\t\tnew SyncDescriptor(RequestService, undefined, true),\n\t\t);\n\n\t\t// Themes\n\t\tservices.set(IThemeMainService, new SyncDescriptor(ThemeMainService));\n\n\t\t// Signing\n\t\tservices.set(\n\t\t\tISignService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tSignService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Tunnel\n\t\tservices.set(ITunnelService, new SyncDescriptor(TunnelService));\n\n\t\t// Protocol (instantiated early and not using sync descriptor for security reasons)\n\t\tservices.set(\n\t\t\tIProtocolMainService,\n\t\t\tnew ProtocolMainService(\n\t\t\t\tenvironmentMainService,\n\t\t\t\tuserDataProfilesMainService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\n\t\treturn [\n\t\t\tnew InstantiationService(services, true),\n\t\t\tinstanceEnvironment,\n\t\t\tenvironmentMainService,\n\t\t\tconfigurationService,\n\t\t\tstateService,\n\t\t\tbufferLogger,\n\t\t\tproductService,\n\t\t\tuserDataProfilesMainService,\n\t\t];\n\t}\n\n\tprivate patchEnvironment(\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t): IProcessEnvironment {\n\t\tconst instanceEnvironment: IProcessEnvironment = {\n\t\t\tVSCODE_IPC_HOOK: environmentMainService.mainIPCHandle,\n\t\t};\n\n\t\t[\"VSCODE_NLS_CONFIG\", \"VSCODE_PORTABLE\"].forEach((key) => {\n\t\t\tconst value = process.env[key];\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tinstanceEnvironment[key] = value;\n\t\t\t}\n\t\t});\n\n\t\tObject.assign(process.env, instanceEnvironment);\n\n\t\treturn instanceEnvironment;\n\t}\n\n\tprivate async initServices(\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tuserDataProfilesMainService: UserDataProfilesMainService,\n\t\tconfigurationService: ConfigurationService,\n\t\tstateService: StateService,\n\t\tproductService: IProductService,\n\t): Promise<void> {\n\t\tawait Promises.settled<unknown>([\n\t\t\t// Environment service (paths)\n\t\t\tPromise.all<string | undefined>(\n\t\t\t\t[\n\t\t\t\t\tthis.allowWindowsUNCPath(\n\t\t\t\t\t\tenvironmentMainService.extensionsPath,\n\t\t\t\t\t), // enable extension paths on UNC drives...\n\t\t\t\t\tenvironmentMainService.codeCachePath, // ...other user-data-derived paths should already be enlisted from `main.js`\n\t\t\t\t\tenvironmentMainService.logsHome.with({\n\t\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t\t}).fsPath,\n\t\t\t\t\tuserDataProfilesMainService.defaultProfile.globalStorageHome.with(\n\t\t\t\t\t\t{ scheme: Schemas.file },\n\t\t\t\t\t).fsPath,\n\t\t\t\t\tenvironmentMainService.workspaceStorageHome.with({\n\t\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t\t}).fsPath,\n\t\t\t\t\tenvironmentMainService.localHistoryHome.with({\n\t\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t\t}).fsPath,\n\t\t\t\t\tenvironmentMainService.backupHome,\n\t\t\t\t].map((path) =>\n\t\t\t\t\tpath\n\t\t\t\t\t\t? promises.mkdir(path, { recursive: true })\n\t\t\t\t\t\t: undefined,\n\t\t\t\t),\n\t\t\t),\n\n\t\t\t// State service\n\t\t\tstateService.init(),\n\n\t\t\t// Configuration service\n\t\t\tconfigurationService.initialize(),\n\t\t]);\n\n\t\t// Initialize user data profiles after initializing the state\n\t\tuserDataProfilesMainService.init();\n\t}\n\n\tprivate allowWindowsUNCPath(path: string): string {\n\t\tif (isWindows) {\n\t\t\tconst host = getUNCHost(path);\n\t\t\tif (host) {\n\t\t\t\taddUNCHostToAllowlist(host);\n\t\t\t}\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate async claimInstance(\n\t\tlogService: ILogService,\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tlifecycleMainService: ILifecycleMainService,\n\t\tinstantiationService: IInstantiationService,\n\t\tproductService: IProductService,\n\t\tretry: boolean,\n\t): Promise<NodeIPCServer> {\n\t\t// Try to setup a server for running. If that succeeds it means\n\t\t// we are the first instance to startup. Otherwise it is likely\n\t\t// that another instance is already running.\n\t\tlet mainProcessNodeIpcServer: NodeIPCServer;\n\t\ttry {\n\t\t\tmark(\"code/willStartMainServer\");\n\t\t\tmainProcessNodeIpcServer = await nodeIPCServe(\n\t\t\t\tenvironmentMainService.mainIPCHandle,\n\t\t\t);\n\t\t\tmark(\"code/didStartMainServer\");\n\t\t\tEvent.once(lifecycleMainService.onWillShutdown)(() =>\n\t\t\t\tmainProcessNodeIpcServer.dispose(),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\t// Handle unexpected errors (the only expected error is EADDRINUSE that\n\t\t\t// indicates another instance of VS Code is running)\n\t\t\tif (error.code !== \"EADDRINUSE\") {\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(\n\t\t\t\t\tenvironmentMainService,\n\t\t\t\t\tproductService,\n\t\t\t\t\terror,\n\t\t\t\t);\n\n\t\t\t\t// Any other runtime error is just printed to the console\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// there's a running instance, let's connect to it\n\t\t\tlet client: NodeIPCClient<string>;\n\t\t\ttry {\n\t\t\t\tclient = await nodeIPCConnect(\n\t\t\t\t\tenvironmentMainService.mainIPCHandle,\n\t\t\t\t\t\"main\",\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Handle unexpected connection errors by showing a dialog to the user\n\t\t\t\tif (!retry || isWindows || error.code !== \"ECONNREFUSED\") {\n\t\t\t\t\tif (error.code === \"EPERM\") {\n\t\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"secondInstanceAdmin\",\n\t\t\t\t\t\t\t\t\"Another instance of {0} is already running as administrator.\",\n\t\t\t\t\t\t\t\tproductService.nameShort,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"secondInstanceAdminDetail\",\n\t\t\t\t\t\t\t\t\"Please close the other instance and try again.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tproductService,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// it happens on Linux and OS X that the pipe is left behind\n\t\t\t\t// let's delete it, since we can't connect to it and then\n\t\t\t\t// retry the whole thing\n\t\t\t\ttry {\n\t\t\t\t\tunlinkSync(environmentMainService.mainIPCHandle);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlogService.warn(\n\t\t\t\t\t\t\"Could not delete obsolete instance handle\",\n\t\t\t\t\t\terror,\n\t\t\t\t\t);\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\treturn this.claimInstance(\n\t\t\t\t\tlogService,\n\t\t\t\t\tenvironmentMainService,\n\t\t\t\t\tlifecycleMainService,\n\t\t\t\t\tinstantiationService,\n\t\t\t\t\tproductService,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Tests from CLI require to be the only instance currently\n\t\t\tif (\n\t\t\t\tenvironmentMainService.extensionTestsLocationURI &&\n\t\t\t\t!environmentMainService.debugExtensionHost.break\n\t\t\t) {\n\t\t\t\tconst msg = `Running extension tests from the command line is currently only supported if no other instance of ${productService.nameShort} is running.`;\n\t\t\t\tlogService.error(msg);\n\t\t\t\tclient.dispose();\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\t// Show a warning dialog after some timeout if it takes long to talk to the other instance\n\t\t\t// Skip this if we are running with --wait where it is expected that we wait for a while.\n\t\t\t// Also skip when gathering diagnostics (--status) which can take a longer time.\n\t\t\tlet startupWarningDialogHandle: NodeJS.Timeout | undefined;\n\t\t\tif (\n\t\t\t\t!environmentMainService.args.wait &&\n\t\t\t\t!environmentMainService.args.status\n\t\t\t) {\n\t\t\t\tstartupWarningDialogHandle = setTimeout(() => {\n\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"secondInstanceNoResponse\",\n\t\t\t\t\t\t\t\"Another instance of {0} is running but not responding\",\n\t\t\t\t\t\t\tproductService.nameShort,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"secondInstanceNoResponseDetail\",\n\t\t\t\t\t\t\t\"Please close all other instances and try again.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tproductService,\n\t\t\t\t\t);\n\t\t\t\t}, 10000);\n\t\t\t}\n\n\t\t\tconst otherInstanceLaunchMainService =\n\t\t\t\tProxyChannel.toService<ILaunchMainService>(\n\t\t\t\t\tclient.getChannel(\"launch\"),\n\t\t\t\t\t{ disableMarshalling: true },\n\t\t\t\t);\n\t\t\tconst otherInstanceDiagnosticsMainService =\n\t\t\t\tProxyChannel.toService<IDiagnosticsMainService>(\n\t\t\t\t\tclient.getChannel(\"diagnostics\"),\n\t\t\t\t\t{ disableMarshalling: true },\n\t\t\t\t);\n\n\t\t\t// Process Info\n\t\t\tif (environmentMainService.args.status) {\n\t\t\t\treturn instantiationService.invokeFunction(async () => {\n\t\t\t\t\tconst diagnosticsService = new DiagnosticsService(\n\t\t\t\t\t\tNullTelemetryService,\n\t\t\t\t\t\tproductService,\n\t\t\t\t\t);\n\t\t\t\t\tconst mainDiagnostics =\n\t\t\t\t\t\tawait otherInstanceDiagnosticsMainService.getMainDiagnostics();\n\t\t\t\t\tconst remoteDiagnostics =\n\t\t\t\t\t\tawait otherInstanceDiagnosticsMainService.getRemoteDiagnostics(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tincludeProcesses: true,\n\t\t\t\t\t\t\t\tincludeWorkspaceMetadata: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\tconst diagnostics = await diagnosticsService.getDiagnostics(\n\t\t\t\t\t\tmainDiagnostics,\n\t\t\t\t\t\tremoteDiagnostics,\n\t\t\t\t\t);\n\t\t\t\t\tconsole.log(diagnostics);\n\n\t\t\t\t\tthrow new ExpectedError();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Windows: allow to set foreground\n\t\t\tif (isWindows) {\n\t\t\t\tawait this.windowsAllowSetForegroundWindow(\n\t\t\t\t\totherInstanceLaunchMainService,\n\t\t\t\t\tlogService,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Send environment over...\n\t\t\tlogService.trace(\"Sending env to running instance...\");\n\t\t\tawait otherInstanceLaunchMainService.start(\n\t\t\t\tenvironmentMainService.args,\n\t\t\t\tprocess.env as IProcessEnvironment,\n\t\t\t);\n\n\t\t\t// Cleanup\n\t\t\tclient.dispose();\n\n\t\t\t// Now that we started, make sure the warning dialog is prevented\n\t\t\tif (startupWarningDialogHandle) {\n\t\t\t\tclearTimeout(startupWarningDialogHandle);\n\t\t\t}\n\n\t\t\tthrow new ExpectedError(\n\t\t\t\t\"Sent env to running instance. Terminating...\",\n\t\t\t);\n\t\t}\n\n\t\t// Print --status usage info\n\t\tif (environmentMainService.args.status) {\n\t\t\tconsole.log(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"statusWarning\",\n\t\t\t\t\t\"Warning: The --status argument can only be used if {0} is already running. Please run it again after {0} has started.\",\n\t\t\t\t\tproductService.nameShort,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tthrow new ExpectedError(\"Terminating...\");\n\t\t}\n\n\t\t// Set the VSCODE_PID variable here when we are sure we are the first\n\t\t// instance to startup. Otherwise we would wrongly overwrite the PID\n\t\tprocess.env[\"VSCODE_PID\"] = String(process.pid);\n\n\t\treturn mainProcessNodeIpcServer;\n\t}\n\n\tprivate handleStartupDataDirError(\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tproductService: IProductService,\n\t\terror: NodeJS.ErrnoException,\n\t): void {\n\t\tif (error.code === \"EACCES\" || error.code === \"EPERM\") {\n\t\t\tconst directories = coalesce([\n\t\t\t\tenvironmentMainService.userDataPath,\n\t\t\t\tenvironmentMainService.extensionsPath,\n\t\t\t\tXDG_RUNTIME_DIR,\n\t\t\t]).map((folder) =>\n\t\t\t\tgetPathLabel(URI.file(folder), {\n\t\t\t\t\tos: OS,\n\t\t\t\t\ttildify: environmentMainService,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis.showStartupWarningDialog(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"startupDataDirError\",\n\t\t\t\t\t\"Unable to write program user data.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"startupUserDataAndExtensionsDirErrorDetail\",\n\t\t\t\t\t\"{0}\\n\\nPlease make sure the following directories are writeable:\\n\\n{1}\",\n\t\t\t\t\ttoErrorMessage(error),\n\t\t\t\t\tdirectories.join(\"\\n\"),\n\t\t\t\t),\n\t\t\t\tproductService,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate showStartupWarningDialog(\n\t\tmessage: string,\n\t\tdetail: string,\n\t\tproductService: IProductService,\n\t): void {\n\t\t// use sync variant here because we likely exit after this method\n\t\t// due to startup issues and otherwise the dialog seems to disappear\n\t\t// https://github.com/microsoft/vscode/issues/104493\n\n\t\tdialog.showMessageBoxSync(\n\t\t\tmassageMessageBoxOptions(\n\t\t\t\t{\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tbuttons: [\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"close\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Close\",\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t\tmessage,\n\t\t\t\t\tdetail,\n\t\t\t\t},\n\t\t\t\tproductService,\n\t\t\t).options,\n\t\t);\n\t}\n\n\tprivate async windowsAllowSetForegroundWindow(\n\t\tlaunchMainService: ILaunchMainService,\n\t\tlogService: ILogService,\n\t): Promise<void> {\n\t\tif (isWindows) {\n\t\t\tconst processId = await launchMainService.getMainProcessId();\n\n\t\t\tlogService.trace(\n\t\t\t\t\"Sending some foreground love to the running instance:\",\n\t\t\t\tprocessId,\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\t(\n\t\t\t\t\tawait import(\"windows-foreground-love\")\n\t\t\t\t).allowSetForegroundWindow(processId);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate quit(\n\t\taccessor: ServicesAccessor,\n\t\treason?: ExpectedError | Error,\n\t): void {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\n\t\tlet exitCode = 0;\n\n\t\tif (reason) {\n\t\t\tif ((reason as ExpectedError).isExpected) {\n\t\t\t\tif (reason.message) {\n\t\t\t\t\tlogService.trace(reason.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texitCode = 1; // signal error to the outside\n\n\t\t\t\tif (reason.stack) {\n\t\t\t\t\tlogService.error(reason.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogService.error(`Startup error: ${reason.toString()}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlifecycleMainService.kill(exitCode);\n\t}\n\n\t//#region Command line arguments utilities\n\n\tprivate resolveArgs(): NativeParsedArgs {\n\t\t// Parse arguments\n\t\tconst args = this.validatePaths(parseMainProcessArgv(process.argv));\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\t//\n\t\t// Note: we are not doing this if the wait marker has been already\n\t\t// added as argument. This can happen if VS Code was started from CLI.\n\n\t\tif (args.wait && !args.waitMarkerFilePath) {\n\t\t\tconst waitMarkerFilePath = createWaitMarkerFileSync(args.verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(\n\t\t\t\t\tprocess.argv,\n\t\t\t\t\t\"--waitMarkerFilePath\",\n\t\t\t\t\twaitMarkerFilePath,\n\t\t\t\t);\n\t\t\t\targs.waitMarkerFilePath = waitMarkerFilePath;\n\t\t\t}\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate validatePaths(args: NativeParsedArgs): NativeParsedArgs {\n\t\t// Track URLs if they're going to be used\n\t\tif (args[\"open-url\"]) {\n\t\t\targs._urls = args._;\n\t\t\targs._ = [];\n\t\t}\n\n\t\t// Normalize paths and watch out for goto line mode\n\t\tif (!args[\"remote\"]) {\n\t\t\tconst paths = this.doValidatePaths(args._, args.goto);\n\t\t\targs._ = paths;\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate doValidatePaths(args: string[], gotoLineMode?: boolean): string[] {\n\t\tconst currentWorkingDir = cwd();\n\t\tconst result = args.map((arg) => {\n\t\t\tlet pathCandidate = String(arg);\n\n\t\t\tlet parsedPath: IPathWithLineAndColumn | undefined;\n\t\t\tif (gotoLineMode) {\n\t\t\t\tparsedPath = parseLineAndColumnAware(pathCandidate);\n\t\t\t\tpathCandidate = parsedPath.path;\n\t\t\t}\n\n\t\t\tif (pathCandidate) {\n\t\t\t\tpathCandidate = this.preparePath(\n\t\t\t\t\tcurrentWorkingDir,\n\t\t\t\t\tpathCandidate,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst sanitizedFilePath = sanitizeFilePath(\n\t\t\t\tpathCandidate,\n\t\t\t\tcurrentWorkingDir,\n\t\t\t);\n\n\t\t\tconst filePathBasename = basename(sanitizedFilePath);\n\t\t\tif (\n\t\t\t\tfilePathBasename /* can be empty if code is opened on root */ &&\n\t\t\t\t!isValidBasename(filePathBasename)\n\t\t\t) {\n\t\t\t\treturn null; // do not allow invalid file names\n\t\t\t}\n\n\t\t\tif (gotoLineMode && parsedPath) {\n\t\t\t\tparsedPath.path = sanitizedFilePath;\n\n\t\t\t\treturn this.toPath(parsedPath);\n\t\t\t}\n\n\t\t\treturn sanitizedFilePath;\n\t\t});\n\n\t\tconst caseInsensitive = isWindows || isMacintosh;\n\t\tconst distinctPaths = distinct(result, (path) =>\n\t\t\tpath && caseInsensitive ? path.toLowerCase() : path || \"\",\n\t\t);\n\n\t\treturn coalesce(distinctPaths);\n\t}\n\n\tprivate preparePath(cwd: string, path: string): string {\n\t\t// Trim trailing quotes\n\t\tif (isWindows) {\n\t\t\tpath = rtrim(path, '\"'); // https://github.com/microsoft/vscode/issues/1498\n\t\t}\n\n\t\t// Trim whitespaces\n\t\tpath = trim(trim(path, \" \"), \"\\t\");\n\n\t\tif (isWindows) {\n\t\t\t// Resolve the path against cwd if it is relative\n\t\t\tpath = resolve(cwd, path);\n\n\t\t\t// Trim trailing '.' chars on Windows to prevent invalid file names\n\t\t\tpath = rtrim(path, \".\");\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate toPath(pathWithLineAndCol: IPathWithLineAndColumn): string {\n\t\tconst segments = [pathWithLineAndCol.path];\n\n\t\tif (typeof pathWithLineAndCol.line === \"number\") {\n\t\t\tsegments.push(String(pathWithLineAndCol.line));\n\t\t}\n\n\t\tif (typeof pathWithLineAndCol.column === \"number\") {\n\t\t\tsegments.push(String(pathWithLineAndCol.column));\n\t\t}\n\n\t\treturn segments.join(\":\");\n\t}\n\n\t//#endregion\n}\n\n// Main Startup\nconst code = new CodeMain();\ncode.main();\n"],
  "mappings": "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",
  "names": ["error", "cwd"]
}
