{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-main/main.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport '../../platform/update/common/update.config.contribution.js';\n\nimport { app, dialog } from 'electron';\nimport { unlinkSync, promises } from 'fs';\nimport { URI } from '../../base/common/uri.js';\nimport { coalesce, distinct } from '../../base/common/arrays.js';\nimport { Promises } from '../../base/common/async.js';\nimport { toErrorMessage } from '../../base/common/errorMessage.js';\nimport { ExpectedError, setUnexpectedErrorHandler } from '../../base/common/errors.js';\nimport { IPathWithLineAndColumn, isValidBasename, parseLineAndColumnAware, sanitizeFilePath } from '../../base/common/extpath.js';\nimport { Event } from '../../base/common/event.js';\nimport { getPathLabel } from '../../base/common/labels.js';\nimport { Schemas } from '../../base/common/network.js';\nimport { basename, resolve } from '../../base/common/path.js';\nimport { mark } from '../../base/common/performance.js';\nimport { IProcessEnvironment, isMacintosh, isWindows, OS } from '../../base/common/platform.js';\nimport { cwd } from '../../base/common/process.js';\nimport { rtrim, trim } from '../../base/common/strings.js';\nimport { Promises as FSPromises } from '../../base/node/pfs.js';\nimport { ProxyChannel } from '../../base/parts/ipc/common/ipc.js';\nimport { Client as NodeIPCClient } from '../../base/parts/ipc/common/ipc.net.js';\nimport { connect as nodeIPCConnect, serve as nodeIPCServe, Server as NodeIPCServer, XDG_RUNTIME_DIR } from '../../base/parts/ipc/node/ipc.net.js';\nimport { CodeApplication } from './app.js';\nimport { localize } from '../../nls.js';\nimport { IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { ConfigurationService } from '../../platform/configuration/common/configurationService.js';\nimport { IDiagnosticsMainService } from '../../platform/diagnostics/electron-main/diagnosticsMainService.js';\nimport { DiagnosticsService } from '../../platform/diagnostics/node/diagnosticsService.js';\nimport { NativeParsedArgs } from '../../platform/environment/common/argv.js';\nimport { EnvironmentMainService, IEnvironmentMainService } from '../../platform/environment/electron-main/environmentMainService.js';\nimport { addArg, parseMainProcessArgv } from '../../platform/environment/node/argvHelper.js';\nimport { createWaitMarkerFileSync } from '../../platform/environment/node/wait.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { FileService } from '../../platform/files/common/fileService.js';\nimport { DiskFileSystemProvider } from '../../platform/files/node/diskFileSystemProvider.js';\nimport { SyncDescriptor } from '../../platform/instantiation/common/descriptors.js';\nimport { IInstantiationService, ServicesAccessor } from '../../platform/instantiation/common/instantiation.js';\nimport { InstantiationService } from '../../platform/instantiation/common/instantiationService.js';\nimport { ServiceCollection } from '../../platform/instantiation/common/serviceCollection.js';\nimport { ILaunchMainService } from '../../platform/launch/electron-main/launchMainService.js';\nimport { ILifecycleMainService, LifecycleMainService } from '../../platform/lifecycle/electron-main/lifecycleMainService.js';\nimport { BufferLogger } from '../../platform/log/common/bufferLog.js';\nimport { ConsoleMainLogger, getLogLevel, ILoggerService, ILogService } from '../../platform/log/common/log.js';\nimport product from '../../platform/product/common/product.js';\nimport { IProductService } from '../../platform/product/common/productService.js';\nimport { IProtocolMainService } from '../../platform/protocol/electron-main/protocol.js';\nimport { ProtocolMainService } from '../../platform/protocol/electron-main/protocolMainService.js';\nimport { ITunnelService } from '../../platform/tunnel/common/tunnel.js';\nimport { TunnelService } from '../../platform/tunnel/node/tunnelService.js';\nimport { IRequestService } from '../../platform/request/common/request.js';\nimport { RequestService } from '../../platform/request/electron-utility/requestService.js';\nimport { ISignService } from '../../platform/sign/common/sign.js';\nimport { SignService } from '../../platform/sign/node/signService.js';\nimport { IStateReadService, IStateService } from '../../platform/state/node/state.js';\nimport { NullTelemetryService } from '../../platform/telemetry/common/telemetryUtils.js';\nimport { IThemeMainService, ThemeMainService } from '../../platform/theme/electron-main/themeMainService.js';\nimport { IUserDataProfilesMainService, UserDataProfilesMainService } from '../../platform/userDataProfile/electron-main/userDataProfile.js';\nimport { IPolicyService, NullPolicyService } from '../../platform/policy/common/policy.js';\nimport { NativePolicyService } from '../../platform/policy/node/nativePolicyService.js';\nimport { FilePolicyService } from '../../platform/policy/common/filePolicyService.js';\nimport { DisposableStore } from '../../base/common/lifecycle.js';\nimport { IUriIdentityService } from '../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../platform/uriIdentity/common/uriIdentityService.js';\nimport { ILoggerMainService, LoggerMainService } from '../../platform/log/electron-main/loggerService.js';\nimport { LogService } from '../../platform/log/common/logService.js';\nimport { massageMessageBoxOptions } from '../../platform/dialogs/common/dialogs.js';\nimport { SaveStrategy, StateService } from '../../platform/state/node/stateService.js';\nimport { FileUserDataProvider } from '../../platform/userData/common/fileUserDataProvider.js';\nimport { addUNCHostToAllowlist, getUNCHost } from '../../base/node/unc.js';\n\n/**\n * The main VS Code entry point.\n *\n * Note: This class can exist more than once for example when VS Code is already\n * running and a second instance is started from the command line. It will always\n * try to communicate with an existing instance to prevent that 2 VS Code instances\n * are running at the same time.\n */\nclass CodeMain {\n\n\tmain(): void {\n\t\ttry {\n\t\t\tthis.startup();\n\t\t} catch (error) {\n\t\t\tconsole.error(error.message);\n\t\t\tapp.exit(1);\n\t\t}\n\t}\n\n\tprivate async startup(): Promise<void> {\n\n\t\t// Set the error handler early enough so that we are not getting the\n\t\t// default electron error dialog popping up\n\t\tsetUnexpectedErrorHandler(err => console.error(err));\n\n\t\t// Create services\n\t\tconst [instantiationService, instanceEnvironment, environmentMainService, configurationService, stateMainService, bufferLogService, productService, userDataProfilesMainService] = this.createServices();\n\n\t\ttry {\n\n\t\t\t// Init services\n\t\t\ttry {\n\t\t\t\tawait this.initServices(environmentMainService, userDataProfilesMainService, configurationService, stateMainService, productService);\n\t\t\t} catch (error) {\n\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(environmentMainService, productService, error);\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// Startup\n\t\t\tawait instantiationService.invokeFunction(async accessor => {\n\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\tconst loggerService = accessor.get(ILoggerService);\n\n\t\t\t\t// Create the main IPC server by trying to be the server\n\t\t\t\t// If this throws an error it means we are not the first\n\t\t\t\t// instance of VS Code running and so we would quit.\n\t\t\t\tconst mainProcessNodeIpcServer = await this.claimInstance(logService, environmentMainService, lifecycleMainService, instantiationService, productService, true);\n\n\t\t\t\t// Write a lockfile to indicate an instance is running\n\t\t\t\t// (https://github.com/microsoft/vscode/issues/127861#issuecomment-877417451)\n\t\t\t\tFSPromises.writeFile(environmentMainService.mainLockfile, String(process.pid)).catch(err => {\n\t\t\t\t\tlogService.warn(`app#startup(): Error writing main lockfile: ${err.stack}`);\n\t\t\t\t});\n\n\t\t\t\t// Delay creation of spdlog for perf reasons (https://github.com/microsoft/vscode/issues/72906)\n\t\t\t\tbufferLogService.logger = loggerService.createLogger('main', { name: localize('mainLog', \"Main\") });\n\n\t\t\t\t// Lifecycle\n\t\t\t\tEvent.once(lifecycleMainService.onWillShutdown)(evt => {\n\t\t\t\t\tfileService.dispose();\n\t\t\t\t\tconfigurationService.dispose();\n\t\t\t\t\tevt.join('instanceLockfile', promises.unlink(environmentMainService.mainLockfile).catch(() => { /* ignored */ }));\n\t\t\t\t});\n\n\t\t\t\treturn instantiationService.createInstance(CodeApplication, mainProcessNodeIpcServer, instanceEnvironment).startup();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tinstantiationService.invokeFunction(this.quit, error);\n\t\t}\n\t}\n\n\tprivate createServices(): [IInstantiationService, IProcessEnvironment, IEnvironmentMainService, ConfigurationService, StateService, BufferLogger, IProductService, UserDataProfilesMainService] {\n\t\tconst services = new ServiceCollection();\n\t\tconst disposables = new DisposableStore();\n\t\tprocess.once('exit', () => disposables.dispose());\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentMainService = new EnvironmentMainService(this.resolveArgs(), productService);\n\t\tconst instanceEnvironment = this.patchEnvironment(environmentMainService); // Patch `process.env` with the instance's environment\n\t\tservices.set(IEnvironmentMainService, environmentMainService);\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerMainService(getLogLevel(environmentMainService), environmentMainService.logsHome);\n\t\tservices.set(ILoggerMainService, loggerService);\n\n\t\t// Log: We need to buffer the spdlog logs until we are sure\n\t\t// we are the only instance running, otherwise we'll have concurrent\n\t\t// log file access on Windows (https://github.com/microsoft/vscode/issues/41218)\n\t\tconst bufferLogger = new BufferLogger(loggerService.getLogLevel());\n\t\tconst logService = disposables.add(new LogService(bufferLogger, [new ConsoleMainLogger(loggerService.getLogLevel())]));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = new FileService(logService);\n\t\tservices.set(IFileService, fileService);\n\t\tconst diskFileSystemProvider = new DiskFileSystemProvider(logService);\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// State\n\t\tconst stateService = new StateService(SaveStrategy.DELAYED, environmentMainService, logService, fileService);\n\t\tservices.set(IStateReadService, stateService);\n\t\tservices.set(IStateService, stateService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesMainService = new UserDataProfilesMainService(stateService, uriIdentityService, environmentMainService, fileService, logService);\n\t\tservices.set(IUserDataProfilesMainService, userDataProfilesMainService);\n\n\t\t// Use FileUserDataProvider for user data to\n\t\t// enable atomic read / write operations.\n\t\tfileService.registerProvider(Schemas.vscodeUserData, new FileUserDataProvider(Schemas.file, diskFileSystemProvider, Schemas.vscodeUserData, userDataProfilesMainService, uriIdentityService, logService));\n\n\t\t// Policy\n\t\tconst policyService = isWindows && productService.win32RegValueName ? disposables.add(new NativePolicyService(logService, productService.win32RegValueName))\n\t\t\t: environmentMainService.policyFile ? disposables.add(new FilePolicyService(environmentMainService.policyFile, fileService, logService))\n\t\t\t\t: new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Configuration\n\t\tconst configurationService = new ConfigurationService(userDataProfilesMainService.defaultProfile.settingsResource, fileService, policyService, logService);\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Lifecycle\n\t\tservices.set(ILifecycleMainService, new SyncDescriptor(LifecycleMainService, undefined, false));\n\n\t\t// Request\n\t\tservices.set(IRequestService, new SyncDescriptor(RequestService, undefined, true));\n\n\t\t// Themes\n\t\tservices.set(IThemeMainService, new SyncDescriptor(ThemeMainService));\n\n\t\t// Signing\n\t\tservices.set(ISignService, new SyncDescriptor(SignService, undefined, false /* proxied to other processes */));\n\n\t\t// Tunnel\n\t\tservices.set(ITunnelService, new SyncDescriptor(TunnelService));\n\n\t\t// Protocol (instantiated early and not using sync descriptor for security reasons)\n\t\tservices.set(IProtocolMainService, new ProtocolMainService(environmentMainService, userDataProfilesMainService, logService));\n\n\t\treturn [new InstantiationService(services, true), instanceEnvironment, environmentMainService, configurationService, stateService, bufferLogger, productService, userDataProfilesMainService];\n\t}\n\n\tprivate patchEnvironment(environmentMainService: IEnvironmentMainService): IProcessEnvironment {\n\t\tconst instanceEnvironment: IProcessEnvironment = {\n\t\t\tVSCODE_IPC_HOOK: environmentMainService.mainIPCHandle\n\t\t};\n\n\t\t['VSCODE_NLS_CONFIG', 'VSCODE_PORTABLE'].forEach(key => {\n\t\t\tconst value = process.env[key];\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tinstanceEnvironment[key] = value;\n\t\t\t}\n\t\t});\n\n\t\tObject.assign(process.env, instanceEnvironment);\n\n\t\treturn instanceEnvironment;\n\t}\n\n\tprivate async initServices(environmentMainService: IEnvironmentMainService, userDataProfilesMainService: UserDataProfilesMainService, configurationService: ConfigurationService, stateService: StateService, productService: IProductService): Promise<void> {\n\t\tawait Promises.settled<unknown>([\n\n\t\t\t// Environment service (paths)\n\t\t\tPromise.all<string | undefined>([\n\t\t\t\tthis.allowWindowsUNCPath(environmentMainService.extensionsPath), // enable extension paths on UNC drives...\n\t\t\t\tenvironmentMainService.codeCachePath,\t\t\t\t\t\t\t // ...other user-data-derived paths should already be enlisted from `main.js`\n\t\t\t\tenvironmentMainService.logsHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tuserDataProfilesMainService.defaultProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tenvironmentMainService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tenvironmentMainService.localHistoryHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tenvironmentMainService.backupHome\n\t\t\t].map(path => path ? promises.mkdir(path, { recursive: true }) : undefined)),\n\n\t\t\t// State service\n\t\t\tstateService.init(),\n\n\t\t\t// Configuration service\n\t\t\tconfigurationService.initialize()\n\t\t]);\n\n\t\t// Initialize user data profiles after initializing the state\n\t\tuserDataProfilesMainService.init();\n\t}\n\n\tprivate allowWindowsUNCPath(path: string): string {\n\t\tif (isWindows) {\n\t\t\tconst host = getUNCHost(path);\n\t\t\tif (host) {\n\t\t\t\taddUNCHostToAllowlist(host);\n\t\t\t}\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate async claimInstance(logService: ILogService, environmentMainService: IEnvironmentMainService, lifecycleMainService: ILifecycleMainService, instantiationService: IInstantiationService, productService: IProductService, retry: boolean): Promise<NodeIPCServer> {\n\n\t\t// Try to setup a server for running. If that succeeds it means\n\t\t// we are the first instance to startup. Otherwise it is likely\n\t\t// that another instance is already running.\n\t\tlet mainProcessNodeIpcServer: NodeIPCServer;\n\t\ttry {\n\t\t\tmark('code/willStartMainServer');\n\t\t\tmainProcessNodeIpcServer = await nodeIPCServe(environmentMainService.mainIPCHandle);\n\t\t\tmark('code/didStartMainServer');\n\t\t\tEvent.once(lifecycleMainService.onWillShutdown)(() => mainProcessNodeIpcServer.dispose());\n\t\t} catch (error) {\n\n\t\t\t// Handle unexpected errors (the only expected error is EADDRINUSE that\n\t\t\t// indicates another instance of VS Code is running)\n\t\t\tif (error.code !== 'EADDRINUSE') {\n\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(environmentMainService, productService, error);\n\n\t\t\t\t// Any other runtime error is just printed to the console\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// there's a running instance, let's connect to it\n\t\t\tlet client: NodeIPCClient<string>;\n\t\t\ttry {\n\t\t\t\tclient = await nodeIPCConnect(environmentMainService.mainIPCHandle, 'main');\n\t\t\t} catch (error) {\n\n\t\t\t\t// Handle unexpected connection errors by showing a dialog to the user\n\t\t\t\tif (!retry || isWindows || error.code !== 'ECONNREFUSED') {\n\t\t\t\t\tif (error.code === 'EPERM') {\n\t\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\t\tlocalize('secondInstanceAdmin', \"Another instance of {0} is already running as administrator.\", productService.nameShort),\n\t\t\t\t\t\t\tlocalize('secondInstanceAdminDetail', \"Please close the other instance and try again.\"),\n\t\t\t\t\t\t\tproductService\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// it happens on Linux and OS X that the pipe is left behind\n\t\t\t\t// let's delete it, since we can't connect to it and then\n\t\t\t\t// retry the whole thing\n\t\t\t\ttry {\n\t\t\t\t\tunlinkSync(environmentMainService.mainIPCHandle);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlogService.warn('Could not delete obsolete instance handle', error);\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\treturn this.claimInstance(logService, environmentMainService, lifecycleMainService, instantiationService, productService, false);\n\t\t\t}\n\n\t\t\t// Tests from CLI require to be the only instance currently\n\t\t\tif (environmentMainService.extensionTestsLocationURI && !environmentMainService.debugExtensionHost.break) {\n\t\t\t\tconst msg = `Running extension tests from the command line is currently only supported if no other instance of ${productService.nameShort} is running.`;\n\t\t\t\tlogService.error(msg);\n\t\t\t\tclient.dispose();\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\t// Show a warning dialog after some timeout if it takes long to talk to the other instance\n\t\t\t// Skip this if we are running with --wait where it is expected that we wait for a while.\n\t\t\t// Also skip when gathering diagnostics (--status) which can take a longer time.\n\t\t\tlet startupWarningDialogHandle: NodeJS.Timeout | undefined = undefined;\n\t\t\tif (!environmentMainService.args.wait && !environmentMainService.args.status) {\n\t\t\t\tstartupWarningDialogHandle = setTimeout(() => {\n\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\tlocalize('secondInstanceNoResponse', \"Another instance of {0} is running but not responding\", productService.nameShort),\n\t\t\t\t\t\tlocalize('secondInstanceNoResponseDetail', \"Please close all other instances and try again.\"),\n\t\t\t\t\t\tproductService\n\t\t\t\t\t);\n\t\t\t\t}, 10000);\n\t\t\t}\n\n\t\t\tconst otherInstanceLaunchMainService = ProxyChannel.toService<ILaunchMainService>(client.getChannel('launch'), { disableMarshalling: true });\n\t\t\tconst otherInstanceDiagnosticsMainService = ProxyChannel.toService<IDiagnosticsMainService>(client.getChannel('diagnostics'), { disableMarshalling: true });\n\n\t\t\t// Process Info\n\t\t\tif (environmentMainService.args.status) {\n\t\t\t\treturn instantiationService.invokeFunction(async () => {\n\t\t\t\t\tconst diagnosticsService = new DiagnosticsService(NullTelemetryService, productService);\n\t\t\t\t\tconst mainDiagnostics = await otherInstanceDiagnosticsMainService.getMainDiagnostics();\n\t\t\t\t\tconst remoteDiagnostics = await otherInstanceDiagnosticsMainService.getRemoteDiagnostics({ includeProcesses: true, includeWorkspaceMetadata: true });\n\t\t\t\t\tconst diagnostics = await diagnosticsService.getDiagnostics(mainDiagnostics, remoteDiagnostics);\n\t\t\t\t\tconsole.log(diagnostics);\n\n\t\t\t\t\tthrow new ExpectedError();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Windows: allow to set foreground\n\t\t\tif (isWindows) {\n\t\t\t\tawait this.windowsAllowSetForegroundWindow(otherInstanceLaunchMainService, logService);\n\t\t\t}\n\n\t\t\t// Send environment over...\n\t\t\tlogService.trace('Sending env to running instance...');\n\t\t\tawait otherInstanceLaunchMainService.start(environmentMainService.args, process.env as IProcessEnvironment);\n\n\t\t\t// Cleanup\n\t\t\tclient.dispose();\n\n\t\t\t// Now that we started, make sure the warning dialog is prevented\n\t\t\tif (startupWarningDialogHandle) {\n\t\t\t\tclearTimeout(startupWarningDialogHandle);\n\t\t\t}\n\n\t\t\tthrow new ExpectedError('Sent env to running instance. Terminating...');\n\t\t}\n\n\t\t// Print --status usage info\n\t\tif (environmentMainService.args.status) {\n\t\t\tconsole.log(localize('statusWarning', \"Warning: The --status argument can only be used if {0} is already running. Please run it again after {0} has started.\", productService.nameShort));\n\n\t\t\tthrow new ExpectedError('Terminating...');\n\t\t}\n\n\t\t// Set the VSCODE_PID variable here when we are sure we are the first\n\t\t// instance to startup. Otherwise we would wrongly overwrite the PID\n\t\tprocess.env['VSCODE_PID'] = String(process.pid);\n\n\t\treturn mainProcessNodeIpcServer;\n\t}\n\n\tprivate handleStartupDataDirError(environmentMainService: IEnvironmentMainService, productService: IProductService, error: NodeJS.ErrnoException): void {\n\t\tif (error.code === 'EACCES' || error.code === 'EPERM') {\n\t\t\tconst directories = coalesce([environmentMainService.userDataPath, environmentMainService.extensionsPath, XDG_RUNTIME_DIR]).map(folder => getPathLabel(URI.file(folder), { os: OS, tildify: environmentMainService }));\n\n\t\t\tthis.showStartupWarningDialog(\n\t\t\t\tlocalize('startupDataDirError', \"Unable to write program user data.\"),\n\t\t\t\tlocalize('startupUserDataAndExtensionsDirErrorDetail', \"{0}\\n\\nPlease make sure the following directories are writeable:\\n\\n{1}\", toErrorMessage(error), directories.join('\\n')),\n\t\t\t\tproductService\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate showStartupWarningDialog(message: string, detail: string, productService: IProductService): void {\n\n\t\t// use sync variant here because we likely exit after this method\n\t\t// due to startup issues and otherwise the dialog seems to disappear\n\t\t// https://github.com/microsoft/vscode/issues/104493\n\n\t\tdialog.showMessageBoxSync(massageMessageBoxOptions({\n\t\t\ttype: 'warning',\n\t\t\tbuttons: [localize({ key: 'close', comment: ['&& denotes a mnemonic'] }, \"&&Close\")],\n\t\t\tmessage,\n\t\t\tdetail\n\t\t}, productService).options);\n\t}\n\n\tprivate async windowsAllowSetForegroundWindow(launchMainService: ILaunchMainService, logService: ILogService): Promise<void> {\n\t\tif (isWindows) {\n\t\t\tconst processId = await launchMainService.getMainProcessId();\n\n\t\t\tlogService.trace('Sending some foreground love to the running instance:', processId);\n\n\t\t\ttry {\n\t\t\t\t(await import('windows-foreground-love')).allowSetForegroundWindow(processId);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate quit(accessor: ServicesAccessor, reason?: ExpectedError | Error): void {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\n\t\tlet exitCode = 0;\n\n\t\tif (reason) {\n\t\t\tif ((reason as ExpectedError).isExpected) {\n\t\t\t\tif (reason.message) {\n\t\t\t\t\tlogService.trace(reason.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texitCode = 1; // signal error to the outside\n\n\t\t\t\tif (reason.stack) {\n\t\t\t\t\tlogService.error(reason.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogService.error(`Startup error: ${reason.toString()}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlifecycleMainService.kill(exitCode);\n\t}\n\n\t//#region Command line arguments utilities\n\n\tprivate resolveArgs(): NativeParsedArgs {\n\n\t\t// Parse arguments\n\t\tconst args = this.validatePaths(parseMainProcessArgv(process.argv));\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\t//\n\t\t// Note: we are not doing this if the wait marker has been already\n\t\t// added as argument. This can happen if VS Code was started from CLI.\n\n\t\tif (args.wait && !args.waitMarkerFilePath) {\n\t\t\tconst waitMarkerFilePath = createWaitMarkerFileSync(args.verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(process.argv, '--waitMarkerFilePath', waitMarkerFilePath);\n\t\t\t\targs.waitMarkerFilePath = waitMarkerFilePath;\n\t\t\t}\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate validatePaths(args: NativeParsedArgs): NativeParsedArgs {\n\n\t\t// Track URLs if they're going to be used\n\t\tif (args['open-url']) {\n\t\t\targs._urls = args._;\n\t\t\targs._ = [];\n\t\t}\n\n\t\t// Normalize paths and watch out for goto line mode\n\t\tif (!args['remote']) {\n\t\t\tconst paths = this.doValidatePaths(args._, args.goto);\n\t\t\targs._ = paths;\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate doValidatePaths(args: string[], gotoLineMode?: boolean): string[] {\n\t\tconst currentWorkingDir = cwd();\n\t\tconst result = args.map(arg => {\n\t\t\tlet pathCandidate = String(arg);\n\n\t\t\tlet parsedPath: IPathWithLineAndColumn | undefined = undefined;\n\t\t\tif (gotoLineMode) {\n\t\t\t\tparsedPath = parseLineAndColumnAware(pathCandidate);\n\t\t\t\tpathCandidate = parsedPath.path;\n\t\t\t}\n\n\t\t\tif (pathCandidate) {\n\t\t\t\tpathCandidate = this.preparePath(currentWorkingDir, pathCandidate);\n\t\t\t}\n\n\t\t\tconst sanitizedFilePath = sanitizeFilePath(pathCandidate, currentWorkingDir);\n\n\t\t\tconst filePathBasename = basename(sanitizedFilePath);\n\t\t\tif (filePathBasename /* can be empty if code is opened on root */ && !isValidBasename(filePathBasename)) {\n\t\t\t\treturn null; // do not allow invalid file names\n\t\t\t}\n\n\t\t\tif (gotoLineMode && parsedPath) {\n\t\t\t\tparsedPath.path = sanitizedFilePath;\n\n\t\t\t\treturn this.toPath(parsedPath);\n\t\t\t}\n\n\t\t\treturn sanitizedFilePath;\n\t\t});\n\n\t\tconst caseInsensitive = isWindows || isMacintosh;\n\t\tconst distinctPaths = distinct(result, path => path && caseInsensitive ? path.toLowerCase() : (path || ''));\n\n\t\treturn coalesce(distinctPaths);\n\t}\n\n\tprivate preparePath(cwd: string, path: string): string {\n\n\t\t// Trim trailing quotes\n\t\tif (isWindows) {\n\t\t\tpath = rtrim(path, '\"'); // https://github.com/microsoft/vscode/issues/1498\n\t\t}\n\n\t\t// Trim whitespaces\n\t\tpath = trim(trim(path, ' '), '\\t');\n\n\t\tif (isWindows) {\n\n\t\t\t// Resolve the path against cwd if it is relative\n\t\t\tpath = resolve(cwd, path);\n\n\t\t\t// Trim trailing '.' chars on Windows to prevent invalid file names\n\t\t\tpath = rtrim(path, '.');\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate toPath(pathWithLineAndCol: IPathWithLineAndColumn): string {\n\t\tconst segments = [pathWithLineAndCol.path];\n\n\t\tif (typeof pathWithLineAndCol.line === 'number') {\n\t\t\tsegments.push(String(pathWithLineAndCol.line));\n\t\t}\n\n\t\tif (typeof pathWithLineAndCol.column === 'number') {\n\t\t\tsegments.push(String(pathWithLineAndCol.column));\n\t\t}\n\n\t\treturn segments.join(':');\n\t}\n\n\t//#endregion\n}\n\n// Main Startup\nconst code = new CodeMain();\ncode.main();\n"],
  "mappings": "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",
  "names": ["error", "cwd"]
}
