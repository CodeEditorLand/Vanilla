{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-main/app.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, BrowserWindow, protocol, session, Session, systemPreferences, WebFrameMain } from 'electron';\nimport { addUNCHostToAllowlist, disableUNCAccessRestrictions } from '../../base/node/unc.js';\nimport { validatedIpcMain } from '../../base/parts/ipc/electron-main/ipcMain.js';\nimport { hostname, release } from 'os';\nimport { VSBuffer } from '../../base/common/buffer.js';\nimport { toErrorMessage } from '../../base/common/errorMessage.js';\nimport { isSigPipeError, onUnexpectedError, setUnexpectedErrorHandler } from '../../base/common/errors.js';\nimport { Event } from '../../base/common/event.js';\nimport { parse } from '../../base/common/jsonc.js';\nimport { getPathLabel } from '../../base/common/labels.js';\nimport { Disposable, DisposableStore } from '../../base/common/lifecycle.js';\nimport { Schemas, VSCODE_AUTHORITY } from '../../base/common/network.js';\nimport { join, posix } from '../../base/common/path.js';\nimport { IProcessEnvironment, isLinux, isLinuxSnap, isMacintosh, isWindows, OS } from '../../base/common/platform.js';\nimport { assertType } from '../../base/common/types.js';\nimport { URI } from '../../base/common/uri.js';\nimport { generateUuid } from '../../base/common/uuid.js';\nimport { registerContextMenuListener } from '../../base/parts/contextmenu/electron-main/contextmenu.js';\nimport { getDelayedChannel, ProxyChannel, StaticRouter } from '../../base/parts/ipc/common/ipc.js';\nimport { Server as ElectronIPCServer } from '../../base/parts/ipc/electron-main/ipc.electron.js';\nimport { Client as MessagePortClient } from '../../base/parts/ipc/electron-main/ipc.mp.js';\nimport { Server as NodeIPCServer } from '../../base/parts/ipc/node/ipc.net.js';\nimport { IProxyAuthService, ProxyAuthService } from '../../platform/native/electron-main/auth.js';\nimport { localize } from '../../nls.js';\nimport { IBackupMainService } from '../../platform/backup/electron-main/backup.js';\nimport { BackupMainService } from '../../platform/backup/electron-main/backupMainService.js';\nimport { IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { ElectronExtensionHostDebugBroadcastChannel } from '../../platform/debug/electron-main/extensionHostDebugIpc.js';\nimport { IDiagnosticsService } from '../../platform/diagnostics/common/diagnostics.js';\nimport { DiagnosticsMainService, IDiagnosticsMainService } from '../../platform/diagnostics/electron-main/diagnosticsMainService.js';\nimport { DialogMainService, IDialogMainService } from '../../platform/dialogs/electron-main/dialogMainService.js';\nimport { IEncryptionMainService } from '../../platform/encryption/common/encryptionService.js';\nimport { EncryptionMainService } from '../../platform/encryption/electron-main/encryptionMainService.js';\nimport { NativeParsedArgs } from '../../platform/environment/common/argv.js';\nimport { IEnvironmentMainService } from '../../platform/environment/electron-main/environmentMainService.js';\nimport { isLaunchedFromCli } from '../../platform/environment/node/argvHelper.js';\nimport { getResolvedShellEnv } from '../../platform/shell/node/shellEnv.js';\nimport { IExtensionHostStarter, ipcExtensionHostStarterChannelName } from '../../platform/extensions/common/extensionHostStarter.js';\nimport { ExtensionHostStarter } from '../../platform/extensions/electron-main/extensionHostStarter.js';\nimport { IExternalTerminalMainService } from '../../platform/externalTerminal/electron-main/externalTerminal.js';\nimport { LinuxExternalTerminalService, MacExternalTerminalService, WindowsExternalTerminalService } from '../../platform/externalTerminal/node/externalTerminalService.js';\nimport { LOCAL_FILE_SYSTEM_CHANNEL_NAME } from '../../platform/files/common/diskFileSystemProviderClient.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { DiskFileSystemProviderChannel } from '../../platform/files/electron-main/diskFileSystemProviderServer.js';\nimport { DiskFileSystemProvider } from '../../platform/files/node/diskFileSystemProvider.js';\nimport { SyncDescriptor } from '../../platform/instantiation/common/descriptors.js';\nimport { IInstantiationService, ServicesAccessor } from '../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../platform/instantiation/common/serviceCollection.js';\nimport { IProcessMainService, IIssueMainService } from '../../platform/issue/common/issue.js';\nimport { IssueMainService } from '../../platform/issue/electron-main/issueMainService.js';\nimport { ProcessMainService } from '../../platform/issue/electron-main/processMainService.js';\nimport { IKeyboardLayoutMainService, KeyboardLayoutMainService } from '../../platform/keyboardLayout/electron-main/keyboardLayoutMainService.js';\nimport { ILaunchMainService, LaunchMainService } from '../../platform/launch/electron-main/launchMainService.js';\nimport { ILifecycleMainService, LifecycleMainPhase, ShutdownReason } from '../../platform/lifecycle/electron-main/lifecycleMainService.js';\nimport { ILoggerService, ILogService } from '../../platform/log/common/log.js';\nimport { IMenubarMainService, MenubarMainService } from '../../platform/menubar/electron-main/menubarMainService.js';\nimport { INativeHostMainService, NativeHostMainService } from '../../platform/native/electron-main/nativeHostMainService.js';\nimport { IProductService } from '../../platform/product/common/productService.js';\nimport { getRemoteAuthority } from '../../platform/remote/common/remoteHosts.js';\nimport { SharedProcess } from '../../platform/sharedProcess/electron-main/sharedProcess.js';\nimport { ISignService } from '../../platform/sign/common/sign.js';\nimport { IStateService } from '../../platform/state/node/state.js';\nimport { StorageDatabaseChannel } from '../../platform/storage/electron-main/storageIpc.js';\nimport { ApplicationStorageMainService, IApplicationStorageMainService, IStorageMainService, StorageMainService } from '../../platform/storage/electron-main/storageMainService.js';\nimport { resolveCommonProperties } from '../../platform/telemetry/common/commonProperties.js';\nimport { ITelemetryService, TelemetryLevel } from '../../platform/telemetry/common/telemetry.js';\nimport { TelemetryAppenderClient } from '../../platform/telemetry/common/telemetryIpc.js';\nimport { ITelemetryServiceConfig, TelemetryService } from '../../platform/telemetry/common/telemetryService.js';\nimport { getPiiPathsFromEnvironment, getTelemetryLevel, isInternalTelemetry, NullTelemetryService, supportsTelemetry } from '../../platform/telemetry/common/telemetryUtils.js';\nimport { IUpdateService } from '../../platform/update/common/update.js';\nimport { UpdateChannel } from '../../platform/update/common/updateIpc.js';\nimport { DarwinUpdateService } from '../../platform/update/electron-main/updateService.darwin.js';\nimport { LinuxUpdateService } from '../../platform/update/electron-main/updateService.linux.js';\nimport { SnapUpdateService } from '../../platform/update/electron-main/updateService.snap.js';\nimport { Win32UpdateService } from '../../platform/update/electron-main/updateService.win32.js';\nimport { IOpenURLOptions, IURLService } from '../../platform/url/common/url.js';\nimport { URLHandlerChannelClient, URLHandlerRouter } from '../../platform/url/common/urlIpc.js';\nimport { NativeURLService } from '../../platform/url/common/urlService.js';\nimport { ElectronURLListener } from '../../platform/url/electron-main/electronUrlListener.js';\nimport { IWebviewManagerService } from '../../platform/webview/common/webviewManagerService.js';\nimport { WebviewMainService } from '../../platform/webview/electron-main/webviewMainService.js';\nimport { isFolderToOpen, isWorkspaceToOpen, IWindowOpenable } from '../../platform/window/common/window.js';\nimport { IWindowsMainService, OpenContext } from '../../platform/windows/electron-main/windows.js';\nimport { ICodeWindow } from '../../platform/window/electron-main/window.js';\nimport { WindowsMainService } from '../../platform/windows/electron-main/windowsMainService.js';\nimport { ActiveWindowManager } from '../../platform/windows/node/windowTracker.js';\nimport { hasWorkspaceFileExtension } from '../../platform/workspace/common/workspace.js';\nimport { IWorkspacesService } from '../../platform/workspaces/common/workspaces.js';\nimport { IWorkspacesHistoryMainService, WorkspacesHistoryMainService } from '../../platform/workspaces/electron-main/workspacesHistoryMainService.js';\nimport { WorkspacesMainService } from '../../platform/workspaces/electron-main/workspacesMainService.js';\nimport { IWorkspacesManagementMainService, WorkspacesManagementMainService } from '../../platform/workspaces/electron-main/workspacesManagementMainService.js';\nimport { IPolicyService } from '../../platform/policy/common/policy.js';\nimport { PolicyChannel } from '../../platform/policy/common/policyIpc.js';\nimport { IUserDataProfilesMainService } from '../../platform/userDataProfile/electron-main/userDataProfile.js';\nimport { RequestChannel } from '../../platform/request/common/requestIpc.js';\nimport { IRequestService } from '../../platform/request/common/request.js';\nimport { IExtensionsProfileScannerService } from '../../platform/extensionManagement/common/extensionsProfileScannerService.js';\nimport { IExtensionsScannerService } from '../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { ExtensionsScannerService } from '../../platform/extensionManagement/node/extensionsScannerService.js';\nimport { UserDataProfilesHandler } from '../../platform/userDataProfile/electron-main/userDataProfilesHandler.js';\nimport { ProfileStorageChangesListenerChannel } from '../../platform/userDataProfile/electron-main/userDataProfileStorageIpc.js';\nimport { Promises, RunOnceScheduler, runWhenGlobalIdle } from '../../base/common/async.js';\nimport { resolveMachineId, resolveSqmId, resolvedevDeviceId } from '../../platform/telemetry/electron-main/telemetryUtils.js';\nimport { ExtensionsProfileScannerService } from '../../platform/extensionManagement/node/extensionsProfileScannerService.js';\nimport { LoggerChannel } from '../../platform/log/electron-main/logIpc.js';\nimport { ILoggerMainService } from '../../platform/log/electron-main/loggerService.js';\nimport { IInitialProtocolUrls, IProtocolUrl } from '../../platform/url/electron-main/url.js';\nimport { IUtilityProcessWorkerMainService, UtilityProcessWorkerMainService } from '../../platform/utilityProcess/electron-main/utilityProcessWorkerMainService.js';\nimport { ipcUtilityProcessWorkerChannelName } from '../../platform/utilityProcess/common/utilityProcessWorkerService.js';\nimport { ILocalPtyService, LocalReconnectConstants, TerminalIpcChannels, TerminalSettingId } from '../../platform/terminal/common/terminal.js';\nimport { ElectronPtyHostStarter } from '../../platform/terminal/electron-main/electronPtyHostStarter.js';\nimport { PtyHostService } from '../../platform/terminal/node/ptyHostService.js';\nimport { NODE_REMOTE_RESOURCE_CHANNEL_NAME, NODE_REMOTE_RESOURCE_IPC_METHOD_NAME, NodeRemoteResourceResponse, NodeRemoteResourceRouter } from '../../platform/remote/common/electronRemoteResources.js';\nimport { Lazy } from '../../base/common/lazy.js';\nimport { IAuxiliaryWindowsMainService } from '../../platform/auxiliaryWindow/electron-main/auxiliaryWindows.js';\nimport { AuxiliaryWindowsMainService } from '../../platform/auxiliaryWindow/electron-main/auxiliaryWindowsMainService.js';\nimport { normalizeNFC } from '../../base/common/normalization.js';\nimport { ICSSDevelopmentService, CSSDevelopmentService } from '../../platform/cssDev/node/cssDevService.js';\n\n/**\n * The main VS Code application. There will only ever be one instance,\n * even if the user starts many instances (e.g. from the command line).\n */\nexport class CodeApplication extends Disposable {\n\n\tprivate static readonly SECURITY_PROTOCOL_HANDLING_CONFIRMATION_SETTING_KEY = {\n\t\t[Schemas.file]: 'security.promptForLocalFileProtocolHandling' as const,\n\t\t[Schemas.vscodeRemote]: 'security.promptForRemoteFileProtocolHandling' as const\n\t};\n\n\tprivate windowsMainService: IWindowsMainService | undefined;\n\tprivate auxiliaryWindowsMainService: IAuxiliaryWindowsMainService | undefined;\n\tprivate nativeHostMainService: INativeHostMainService | undefined;\n\n\tconstructor(\n\t\tprivate readonly mainProcessNodeIpcServer: NodeIPCServer,\n\t\tprivate readonly userEnv: IProcessEnvironment,\n\t\t@IInstantiationService private readonly mainInstantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesMainService: IUserDataProfilesMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.configureSession();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate configureSession(): void {\n\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\n\t\tconst isUrlFromWebview = (requestingUrl: string | undefined) => requestingUrl?.startsWith(`${Schemas.vscodeWebview}://`);\n\n\t\tconst allowedPermissionsInWebview = new Set([\n\t\t\t'clipboard-read',\n\t\t\t'clipboard-sanitized-write',\n\t\t]);\n\n\t\tsession.defaultSession.setPermissionRequestHandler((_webContents, permission, callback, details) => {\n\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\treturn callback(allowedPermissionsInWebview.has(permission));\n\t\t\t}\n\n\t\t\treturn callback(false);\n\t\t});\n\n\t\tsession.defaultSession.setPermissionCheckHandler((_webContents, permission, _origin, details) => {\n\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\treturn allowedPermissionsInWebview.has(permission);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\t//#endregion\n\n\t\t//#region Request filtering\n\n\t\t// Block all SVG requests from unsupported origins\n\t\tconst supportedSvgSchemes = new Set([Schemas.file, Schemas.vscodeFileResource, Schemas.vscodeRemoteResource, Schemas.vscodeManagedRemoteResource, 'devtools']);\n\n\t\t// But allow them if they are made from inside an webview\n\t\tconst isSafeFrame = (requestFrame: WebFrameMain | undefined): boolean => {\n\t\t\tfor (let frame: WebFrameMain | null | undefined = requestFrame; frame; frame = frame.parent) {\n\t\t\t\tif (frame.url.startsWith(`${Schemas.vscodeWebview}://`)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tconst isSvgRequestFromSafeContext = (details: Electron.OnBeforeRequestListenerDetails | Electron.OnHeadersReceivedListenerDetails): boolean => {\n\t\t\treturn details.resourceType === 'xhr' || isSafeFrame(details.frame);\n\t\t};\n\n\t\tconst isAllowedVsCodeFileRequest = (details: Electron.OnBeforeRequestListenerDetails) => {\n\t\t\tconst frame = details.frame;\n\t\t\tif (!frame || !this.windowsMainService) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check to see if the request comes from one of the main windows (or shared process) and not from embedded content\n\t\t\tconst windows = BrowserWindow.getAllWindows();\n\t\t\tfor (const window of windows) {\n\t\t\t\tif (frame.processId === window.webContents.mainFrame.processId) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tconst isAllowedWebviewRequest = (uri: URI, details: Electron.OnBeforeRequestListenerDetails): boolean => {\n\t\t\tif (uri.path !== '/index.html') {\n\t\t\t\treturn true; // Only restrict top level page of webviews: index.html\n\t\t\t}\n\n\t\t\tconst frame = details.frame;\n\t\t\tif (!frame || !this.windowsMainService) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check to see if the request comes from one of the main editor windows.\n\t\t\tfor (const window of this.windowsMainService.getWindows()) {\n\t\t\t\tif (window.win) {\n\t\t\t\t\tif (frame.processId === window.win.webContents.mainFrame.processId) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tsession.defaultSession.webRequest.onBeforeRequest((details, callback) => {\n\t\t\tconst uri = URI.parse(details.url);\n\t\t\tif (uri.scheme === Schemas.vscodeWebview) {\n\t\t\t\tif (!isAllowedWebviewRequest(uri, details)) {\n\t\t\t\t\tthis.logService.error('Blocked vscode-webview request', details.url);\n\t\t\t\t\treturn callback({ cancel: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uri.scheme === Schemas.vscodeFileResource) {\n\t\t\t\tif (!isAllowedVsCodeFileRequest(details)) {\n\t\t\t\t\tthis.logService.error('Blocked vscode-file request', details.url);\n\t\t\t\t\treturn callback({ cancel: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Block most svgs\n\t\t\tif (uri.path.endsWith('.svg')) {\n\t\t\t\tconst isSafeResourceUrl = supportedSvgSchemes.has(uri.scheme);\n\t\t\t\tif (!isSafeResourceUrl) {\n\t\t\t\t\treturn callback({ cancel: !isSvgRequestFromSafeContext(details) });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn callback({ cancel: false });\n\t\t});\n\n\t\t// Configure SVG header content type properly\n\t\t// https://github.com/microsoft/vscode/issues/97564\n\t\tsession.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n\t\t\tconst responseHeaders = details.responseHeaders as Record<string, (string) | (string[])>;\n\t\t\tconst contentTypes = (responseHeaders['content-type'] || responseHeaders['Content-Type']);\n\n\t\t\tif (contentTypes && Array.isArray(contentTypes)) {\n\t\t\t\tconst uri = URI.parse(details.url);\n\t\t\t\tif (uri.path.endsWith('.svg')) {\n\t\t\t\t\tif (supportedSvgSchemes.has(uri.scheme)) {\n\t\t\t\t\t\tresponseHeaders['Content-Type'] = ['image/svg+xml'];\n\n\t\t\t\t\t\treturn callback({ cancel: false, responseHeaders });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// remote extension schemes have the following format\n\t\t\t\t// http://127.0.0.1:<port>/vscode-remote-resource?path=\n\t\t\t\tif (!uri.path.endsWith(Schemas.vscodeRemoteResource) && contentTypes.some(contentType => contentType.toLowerCase().includes('image/svg'))) {\n\t\t\t\t\treturn callback({ cancel: !isSvgRequestFromSafeContext(details) });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn callback({ cancel: false });\n\t\t});\n\n\t\t//#endregion\n\n\t\t//#region Allow CORS for the PRSS CDN\n\n\t\t// https://github.com/microsoft/vscode-remote-release/issues/9246\n\t\tsession.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n\t\t\tif (details.url.startsWith('https://vscode.download.prss.microsoft.com/')) {\n\t\t\t\tconst responseHeaders = details.responseHeaders ?? Object.create(null);\n\n\t\t\t\tif (responseHeaders['Access-Control-Allow-Origin'] === undefined) {\n\t\t\t\t\tresponseHeaders['Access-Control-Allow-Origin'] = ['*'];\n\t\t\t\t\treturn callback({ cancel: false, responseHeaders });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn callback({ cancel: false });\n\t\t});\n\n\t\t//#endregion\n\n\t\t//#region Code Cache\n\n\t\ttype SessionWithCodeCachePathSupport = Session & {\n\t\t\t/**\n\t\t\t * Sets code cache directory. By default, the directory will be `Code Cache` under\n\t\t\t * the respective user data folder.\n\t\t\t */\n\t\t\tsetCodeCachePath?(path: string): void;\n\t\t};\n\n\t\tconst defaultSession = session.defaultSession as unknown as SessionWithCodeCachePathSupport;\n\t\tif (typeof defaultSession.setCodeCachePath === 'function' && this.environmentMainService.codeCachePath) {\n\t\t\t// Make sure to partition Chrome's code cache folder\n\t\t\t// in the same way as our code cache path to help\n\t\t\t// invalidate caches that we know are invalid\n\t\t\t// (https://github.com/microsoft/vscode/issues/120655)\n\t\t\tdefaultSession.setCodeCachePath(join(this.environmentMainService.codeCachePath, 'chrome'));\n\t\t}\n\n\t\t//#endregion\n\n\t\t//#region UNC Host Allowlist (Windows)\n\n\t\tif (isWindows) {\n\t\t\tif (this.configurationService.getValue('security.restrictUNCAccess') === false) {\n\t\t\t\tdisableUNCAccessRestrictions();\n\t\t\t} else {\n\t\t\t\taddUNCHostToAllowlist(this.configurationService.getValue('security.allowedUNCHosts'));\n\t\t\t}\n\t\t}\n\n\t\t//#endregion\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// We handle uncaught exceptions here to prevent electron from opening a dialog to the user\n\t\tsetUnexpectedErrorHandler(error => this.onUnexpectedError(error));\n\t\tprocess.on('uncaughtException', error => {\n\t\t\tif (!isSigPipeError(error)) {\n\t\t\t\tonUnexpectedError(error);\n\t\t\t}\n\t\t});\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\n\t\t// Dispose on shutdown\n\t\tEvent.once(this.lifecycleMainService.onWillShutdown)(() => this.dispose());\n\n\t\t// Contextmenu via IPC support\n\t\tregisterContextMenuListener();\n\n\t\t// Accessibility change event\n\t\tapp.on('accessibility-support-changed', (event, accessibilitySupportEnabled) => {\n\t\t\tthis.windowsMainService?.sendToAll('vscode:accessibilitySupportChanged', accessibilitySupportEnabled);\n\t\t});\n\n\t\t// macOS dock activate\n\t\tapp.on('activate', async (event, hasVisibleWindows) => {\n\t\t\tthis.logService.trace('app#activate');\n\n\t\t\t// Mac only event: open new window when we get activated\n\t\t\tif (!hasVisibleWindows) {\n\t\t\t\tawait this.windowsMainService?.openEmptyWindow({ context: OpenContext.DOCK });\n\t\t\t}\n\t\t});\n\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\t\tapp.on('web-contents-created', (event, contents) => {\n\n\t\t\t// Auxiliary Window: delegate to `AuxiliaryWindow` class\n\t\t\tif (contents?.opener?.url.startsWith(`${Schemas.vscodeFileResource}://${VSCODE_AUTHORITY}/`)) {\n\t\t\t\tthis.logService.trace('[aux window]  app.on(\"web-contents-created\"): Registering auxiliary window');\n\n\t\t\t\tthis.auxiliaryWindowsMainService?.registerWindow(contents);\n\t\t\t}\n\n\t\t\t// Block any in-page navigation\n\t\t\tcontents.on('will-navigate', event => {\n\t\t\t\tthis.logService.error('webContents#will-navigate: Prevented webcontent navigation');\n\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\n\t\t\t// All Windows: only allow about:blank auxiliary windows to open\n\t\t\t// For all other URLs, delegate to the OS.\n\t\t\tcontents.setWindowOpenHandler(details => {\n\n\t\t\t\t// about:blank windows can open as window witho our default options\n\t\t\t\tif (details.url === 'about:blank') {\n\t\t\t\t\tthis.logService.trace('[aux window] webContents#setWindowOpenHandler: Allowing auxiliary window to open on about:blank');\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\taction: 'allow',\n\t\t\t\t\t\toverrideBrowserWindowOptions: this.auxiliaryWindowsMainService?.createWindow(details)\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Any other URL: delegate to OS\n\t\t\t\telse {\n\t\t\t\t\tthis.logService.trace(`webContents#setWindowOpenHandler: Prevented opening window with URL ${details.url}}`);\n\n\t\t\t\t\tthis.nativeHostMainService?.openExternal(undefined, details.url);\n\n\t\t\t\t\treturn { action: 'deny' };\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t//#endregion\n\n\t\tlet macOpenFileURIs: IWindowOpenable[] = [];\n\t\tlet runningTimeout: NodeJS.Timeout | undefined = undefined;\n\t\tapp.on('open-file', (event, path) => {\n\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\n\t\t\tthis.logService.trace('app#open-file: ', path);\n\t\t\tevent.preventDefault();\n\n\t\t\t// Keep in array because more might come!\n\t\t\tmacOpenFileURIs.push(hasWorkspaceFileExtension(path) ? { workspaceUri: URI.file(path) } : { fileUri: URI.file(path) });\n\n\t\t\t// Clear previous handler if any\n\t\t\tif (runningTimeout !== undefined) {\n\t\t\t\tclearTimeout(runningTimeout);\n\t\t\t\trunningTimeout = undefined;\n\t\t\t}\n\n\t\t\t// Handle paths delayed in case more are coming!\n\t\t\trunningTimeout = setTimeout(async () => {\n\t\t\t\tawait this.windowsMainService?.open({\n\t\t\t\t\tcontext: OpenContext.DOCK /* can also be opening from finder while app is running */,\n\t\t\t\t\tcli: this.environmentMainService.args,\n\t\t\t\t\turisToOpen: macOpenFileURIs,\n\t\t\t\t\tgotoLineMode: false,\n\t\t\t\t\tpreferNewWindow: true /* dropping on the dock or opening from finder prefers to open in a new window */\n\t\t\t\t});\n\n\t\t\t\tmacOpenFileURIs = [];\n\t\t\t\trunningTimeout = undefined;\n\t\t\t}, 100);\n\t\t});\n\n\t\tapp.on('new-window-for-tab', async () => {\n\t\t\tawait this.windowsMainService?.openEmptyWindow({ context: OpenContext.DESKTOP }); //macOS native tab \"+\" button\n\t\t});\n\n\t\t//#region Bootstrap IPC Handlers\n\n\t\tvalidatedIpcMain.handle('vscode:fetchShellEnv', event => {\n\n\t\t\t// Prefer to use the args and env from the target window\n\t\t\t// when resolving the shell env. It is possible that\n\t\t\t// a first window was opened from the UI but a second\n\t\t\t// from the CLI and that has implications for whether to\n\t\t\t// resolve the shell environment or not.\n\t\t\t//\n\t\t\t// Window can be undefined for e.g. the shared process\n\t\t\t// that is not part of our windows registry!\n\t\t\tconst window = this.windowsMainService?.getWindowByWebContents(event.sender); // Note: this can be `undefined` for the shared process\n\t\t\tlet args: NativeParsedArgs;\n\t\t\tlet env: IProcessEnvironment;\n\t\t\tif (window?.config) {\n\t\t\t\targs = window.config;\n\t\t\t\tenv = { ...process.env, ...window.config.userEnv };\n\t\t\t} else {\n\t\t\t\targs = this.environmentMainService.args;\n\t\t\t\tenv = process.env;\n\t\t\t}\n\n\t\t\t// Resolve shell env\n\t\t\treturn this.resolveShellEnvironment(args, env, false);\n\t\t});\n\n\t\tvalidatedIpcMain.on('vscode:toggleDevTools', event => event.sender.toggleDevTools());\n\t\tvalidatedIpcMain.on('vscode:openDevTools', event => event.sender.openDevTools());\n\n\t\tvalidatedIpcMain.on('vscode:reloadWindow', event => event.sender.reload());\n\n\t\tvalidatedIpcMain.handle('vscode:notifyZoomLevel', async (event, zoomLevel: number | undefined) => {\n\t\t\tconst window = this.windowsMainService?.getWindowByWebContents(event.sender);\n\t\t\tif (window) {\n\t\t\t\twindow.notifyZoomLevel(zoomLevel);\n\t\t\t}\n\t\t});\n\n\t\t//#endregion\n\t}\n\n\tprivate onUnexpectedError(error: Error): void {\n\t\tif (error) {\n\n\t\t\t// take only the message and stack property\n\t\t\tconst friendlyError = {\n\t\t\t\tmessage: `[uncaught exception in main]: ${error.message}`,\n\t\t\t\tstack: error.stack\n\t\t\t};\n\n\t\t\t// handle on client side\n\t\t\tthis.windowsMainService?.sendToFocused('vscode:reportError', JSON.stringify(friendlyError));\n\t\t}\n\n\t\tthis.logService.error(`[uncaught exception in main]: ${error}`);\n\t\tif (error.stack) {\n\t\t\tthis.logService.error(error.stack);\n\t\t}\n\t}\n\n\tasync startup(): Promise<void> {\n\t\tthis.logService.debug('Starting VS Code');\n\t\tthis.logService.debug(`from: ${this.environmentMainService.appRoot}`);\n\t\tthis.logService.debug('args:', this.environmentMainService.args);\n\n\t\t// Make sure we associate the program with the app user model id\n\t\t// This will help Windows to associate the running program with\n\t\t// any shortcut that is pinned to the taskbar and prevent showing\n\t\t// two icons in the taskbar for the same app.\n\t\tconst win32AppUserModelId = this.productService.win32AppUserModelId;\n\t\tif (isWindows && win32AppUserModelId) {\n\t\t\tapp.setAppUserModelId(win32AppUserModelId);\n\t\t}\n\n\t\t// Fix native tabs on macOS 10.13\n\t\t// macOS enables a compatibility patch for any bundle ID beginning with\n\t\t// \"com.microsoft.\", which breaks native tabs for VS Code when using this\n\t\t// identifier (from the official build).\n\t\t// Explicitly opt out of the patch here before creating any windows.\n\t\t// See: https://github.com/microsoft/vscode/issues/35361#issuecomment-399794085\n\t\ttry {\n\t\t\tif (isMacintosh && this.configurationService.getValue('window.nativeTabs') === true && !systemPreferences.getUserDefault('NSUseImprovedLayoutPass', 'boolean')) {\n\t\t\t\tsystemPreferences.setUserDefault('NSUseImprovedLayoutPass', 'boolean', true as any);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\t// Main process server (electron IPC based)\n\t\tconst mainProcessElectronServer = new ElectronIPCServer();\n\t\tEvent.once(this.lifecycleMainService.onWillShutdown)(e => {\n\t\t\tif (e.reason === ShutdownReason.KILL) {\n\t\t\t\t// When we go down abnormally, make sure to free up\n\t\t\t\t// any IPC we accept from other windows to reduce\n\t\t\t\t// the chance of doing work after we go down. Kill\n\t\t\t\t// is special in that it does not orderly shutdown\n\t\t\t\t// windows.\n\t\t\t\tmainProcessElectronServer.dispose();\n\t\t\t}\n\t\t});\n\n\t\t// Resolve unique machine ID\n\t\tthis.logService.trace('Resolving machine identifier...');\n\t\tconst [machineId, sqmId, devDeviceId] = await Promise.all([\n\t\t\tresolveMachineId(this.stateService, this.logService),\n\t\t\tresolveSqmId(this.stateService, this.logService),\n\t\t\tresolvedevDeviceId(this.stateService, this.logService)\n\t\t]);\n\t\tthis.logService.trace(`Resolved machine identifier: ${machineId}`);\n\n\t\t// Shared process\n\t\tconst { sharedProcessReady, sharedProcessClient } = this.setupSharedProcess(machineId, sqmId, devDeviceId);\n\n\t\t// Services\n\t\tconst appInstantiationService = await this.initServices(machineId, sqmId, devDeviceId, sharedProcessReady);\n\n\t\t// Auth Handler\n\t\tappInstantiationService.invokeFunction(accessor => accessor.get(IProxyAuthService));\n\n\t\t// Transient profiles handler\n\t\tthis._register(appInstantiationService.createInstance(UserDataProfilesHandler));\n\n\t\t// Init Channels\n\t\tappInstantiationService.invokeFunction(accessor => this.initChannels(accessor, mainProcessElectronServer, sharedProcessClient));\n\n\t\t// Setup Protocol URL Handlers\n\t\tconst initialProtocolUrls = await appInstantiationService.invokeFunction(accessor => this.setupProtocolUrlHandlers(accessor, mainProcessElectronServer));\n\n\t\t// Setup vscode-remote-resource protocol handler.\n\t\tthis.setupManagedRemoteResourceUrlHandler(mainProcessElectronServer);\n\n\t\t// Signal phase: ready - before opening first window\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.Ready;\n\n\t\t// Open Windows\n\t\tawait appInstantiationService.invokeFunction(accessor => this.openFirstWindow(accessor, initialProtocolUrls));\n\n\t\t// Signal phase: after window open\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.AfterWindowOpen;\n\n\t\t// Post Open Windows Tasks\n\t\tthis.afterWindowOpen();\n\n\t\t// Set lifecycle phase to `Eventually` after a short delay and when idle (min 2.5sec, max 5sec)\n\t\tconst eventuallyPhaseScheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._register(runWhenGlobalIdle(() => this.lifecycleMainService.phase = LifecycleMainPhase.Eventually, 2500));\n\t\t}, 2500));\n\t\teventuallyPhaseScheduler.schedule();\n\t}\n\n\tprivate async setupProtocolUrlHandlers(accessor: ServicesAccessor, mainProcessElectronServer: ElectronIPCServer): Promise<IInitialProtocolUrls | undefined> {\n\t\tconst windowsMainService = this.windowsMainService = accessor.get(IWindowsMainService);\n\t\tconst urlService = accessor.get(IURLService);\n\t\tconst nativeHostMainService = this.nativeHostMainService = accessor.get(INativeHostMainService);\n\t\tconst dialogMainService = accessor.get(IDialogMainService);\n\n\t\t// Install URL handlers that deal with protocl URLs either\n\t\t// from this process by opening windows and/or by forwarding\n\t\t// the URLs into a window process to be handled there.\n\n\t\tconst app = this;\n\t\turlService.registerHandler({\n\t\t\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\t\t\treturn app.handleProtocolUrl(windowsMainService, dialogMainService, urlService, uri, options);\n\t\t\t}\n\t\t});\n\n\t\tconst activeWindowManager = this._register(new ActiveWindowManager({\n\t\t\tonDidOpenMainWindow: nativeHostMainService.onDidOpenMainWindow,\n\t\t\tonDidFocusMainWindow: nativeHostMainService.onDidFocusMainWindow,\n\t\t\tgetActiveWindowId: () => nativeHostMainService.getActiveWindowId(-1)\n\t\t}));\n\t\tconst activeWindowRouter = new StaticRouter(ctx => activeWindowManager.getActiveClientId().then(id => ctx === id));\n\t\tconst urlHandlerRouter = new URLHandlerRouter(activeWindowRouter, this.logService);\n\t\tconst urlHandlerChannel = mainProcessElectronServer.getChannel('urlHandler', urlHandlerRouter);\n\t\turlService.registerHandler(new URLHandlerChannelClient(urlHandlerChannel));\n\n\t\tconst initialProtocolUrls = await this.resolveInitialProtocolUrls(windowsMainService, dialogMainService);\n\t\tthis._register(new ElectronURLListener(initialProtocolUrls?.urls, urlService, windowsMainService, this.environmentMainService, this.productService, this.logService));\n\n\t\treturn initialProtocolUrls;\n\t}\n\n\tprivate setupManagedRemoteResourceUrlHandler(mainProcessElectronServer: ElectronIPCServer) {\n\t\tconst notFound = (): Electron.ProtocolResponse => ({ statusCode: 404, data: 'Not found' });\n\t\tconst remoteResourceChannel = new Lazy(() => mainProcessElectronServer.getChannel(\n\t\t\tNODE_REMOTE_RESOURCE_CHANNEL_NAME,\n\t\t\tnew NodeRemoteResourceRouter(),\n\t\t));\n\n\t\tprotocol.registerBufferProtocol(Schemas.vscodeManagedRemoteResource, (request, callback) => {\n\t\t\tconst url = URI.parse(request.url);\n\t\t\tif (!url.authority.startsWith('window:')) {\n\t\t\t\treturn callback(notFound());\n\t\t\t}\n\n\t\t\tremoteResourceChannel.value.call<NodeRemoteResourceResponse>(NODE_REMOTE_RESOURCE_IPC_METHOD_NAME, [url]).then(\n\t\t\t\tr => callback({ ...r, data: Buffer.from(r.body, 'base64') }),\n\t\t\t\terr => {\n\t\t\t\t\tthis.logService.warn('error dispatching remote resource call', err);\n\t\t\t\t\tcallback({ statusCode: 500, data: String(err) });\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate async resolveInitialProtocolUrls(windowsMainService: IWindowsMainService, dialogMainService: IDialogMainService): Promise<IInitialProtocolUrls | undefined> {\n\n\t\t/**\n\t\t * Protocol URL handling on startup is complex, refer to\n\t\t * {@link IInitialProtocolUrls} for an explainer.\n\t\t */\n\n\t\t// Windows/Linux: protocol handler invokes CLI with --open-url\n\t\tconst protocolUrlsFromCommandLine = this.environmentMainService.args['open-url'] ? this.environmentMainService.args._urls || [] : [];\n\t\tif (protocolUrlsFromCommandLine.length > 0) {\n\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol urls from command line:', protocolUrlsFromCommandLine);\n\t\t}\n\n\t\t// macOS: open-url events that were received before the app is ready\n\t\tconst protocolUrlsFromEvent = ((<any>global).getOpenUrls() || []) as string[];\n\t\tif (protocolUrlsFromEvent.length > 0) {\n\t\t\tthis.logService.trace(`app#resolveInitialProtocolUrls() protocol urls from macOS 'open-url' event:`, protocolUrlsFromEvent);\n\t\t}\n\n\t\tif (protocolUrlsFromCommandLine.length + protocolUrlsFromEvent.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst protocolUrls = [\n\t\t\t...protocolUrlsFromCommandLine,\n\t\t\t...protocolUrlsFromEvent\n\t\t].map(url => {\n\t\t\ttry {\n\t\t\t\treturn { uri: URI.parse(url), originalUrl: url };\n\t\t\t} catch {\n\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url failed to parse:', url);\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tconst openables: IWindowOpenable[] = [];\n\t\tconst urls: IProtocolUrl[] = [];\n\t\tfor (const protocolUrl of protocolUrls) {\n\t\t\tif (!protocolUrl) {\n\t\t\t\tcontinue; // invalid\n\t\t\t}\n\n\t\t\tconst windowOpenable = this.getWindowOpenableFromProtocolUrl(protocolUrl.uri);\n\t\t\tif (windowOpenable) {\n\t\t\t\tif (await this.shouldBlockOpenable(windowOpenable, windowsMainService, dialogMainService)) {\n\t\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url was blocked:', protocolUrl.uri.toString(true));\n\n\t\t\t\t\tcontinue; // blocked\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url will be handled as window to open:', protocolUrl.uri.toString(true), windowOpenable);\n\n\t\t\t\t\topenables.push(windowOpenable); // handled as window to open\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url will be passed to active window for handling:', protocolUrl.uri.toString(true));\n\n\t\t\t\turls.push(protocolUrl); // handled within active window\n\t\t\t}\n\t\t}\n\n\t\treturn { urls, openables };\n\t}\n\n\tprivate async shouldBlockOpenable(openable: IWindowOpenable, windowsMainService: IWindowsMainService, dialogMainService: IDialogMainService): Promise<boolean> {\n\t\tlet openableUri: URI;\n\t\tlet message: string;\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\topenableUri = openable.workspaceUri;\n\t\t\tmessage = localize('confirmOpenMessageWorkspace', \"An external application wants to open '{0}' in {1}. Do you want to open this workspace file?\", openableUri.scheme === Schemas.file ? getPathLabel(openableUri, { os: OS, tildify: this.environmentMainService }) : openableUri.toString(true), this.productService.nameShort);\n\t\t} else if (isFolderToOpen(openable)) {\n\t\t\topenableUri = openable.folderUri;\n\t\t\tmessage = localize('confirmOpenMessageFolder', \"An external application wants to open '{0}' in {1}. Do you want to open this folder?\", openableUri.scheme === Schemas.file ? getPathLabel(openableUri, { os: OS, tildify: this.environmentMainService }) : openableUri.toString(true), this.productService.nameShort);\n\t\t} else {\n\t\t\topenableUri = openable.fileUri;\n\t\t\tmessage = localize('confirmOpenMessageFileOrFolder', \"An external application wants to open '{0}' in {1}. Do you want to open this file or folder?\", openableUri.scheme === Schemas.file ? getPathLabel(openableUri, { os: OS, tildify: this.environmentMainService }) : openableUri.toString(true), this.productService.nameShort);\n\t\t}\n\n\t\tif (openableUri.scheme !== Schemas.file && openableUri.scheme !== Schemas.vscodeRemote) {\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t//\n\t\t\t// NOTE: we currently only ask for confirmation for `file` and `vscode-remote`\n\t\t\t// authorities here. There is an additional confirmation for `extension.id`\n\t\t\t// authorities from within the window.\n\t\t\t//\n\t\t\t// IF YOU ARE PLANNING ON ADDING ANOTHER AUTHORITY HERE, MAKE SURE TO ALSO\n\t\t\t// ADD IT TO THE CONFIRMATION CODE BELOW OR INSIDE THE WINDOW!\n\t\t\t//\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst askForConfirmation = this.configurationService.getValue<unknown>(CodeApplication.SECURITY_PROTOCOL_HANDLING_CONFIRMATION_SETTING_KEY[openableUri.scheme]);\n\t\tif (askForConfirmation === false) {\n\t\t\treturn false; // not blocked via settings\n\t\t}\n\n\t\tconst { response, checkboxChecked } = await dialogMainService.showMessageBox({\n\t\t\ttype: 'warning',\n\t\t\tbuttons: [\n\t\t\t\tlocalize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n\t\t\t\tlocalize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, \"&&No\")\n\t\t\t],\n\t\t\tmessage,\n\t\t\tdetail: localize('confirmOpenDetail', \"If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'\"),\n\t\t\tcheckboxLabel: openableUri.scheme === Schemas.file ? localize('doNotAskAgainLocal', \"Allow opening local paths without asking\") : localize('doNotAskAgainRemote', \"Allow opening remote paths without asking\"),\n\t\t\tcancelId: 1\n\t\t});\n\n\t\tif (response !== 0) {\n\t\t\treturn true; // blocked by user choice\n\t\t}\n\n\t\tif (checkboxChecked) {\n\t\t\t// Due to https://github.com/microsoft/vscode/issues/195436, we can only\n\t\t\t// update settings from within a window. But we do not know if a window\n\t\t\t// is about to open or can already handle the request, so we have to send\n\t\t\t// to any current window and any newly opening window.\n\t\t\tconst request = { channel: 'vscode:disablePromptForProtocolHandling', args: openableUri.scheme === Schemas.file ? 'local' : 'remote' };\n\t\t\twindowsMainService.sendToFocused(request.channel, request.args);\n\t\t\twindowsMainService.sendToOpeningWindow(request.channel, request.args);\n\t\t}\n\n\t\treturn false; // not blocked by user choice\n\t}\n\n\tprivate getWindowOpenableFromProtocolUrl(uri: URI): IWindowOpenable | undefined {\n\t\tif (!uri.path) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// File path\n\t\tif (uri.authority === Schemas.file) {\n\t\t\tconst fileUri = URI.file(uri.fsPath);\n\n\t\t\tif (hasWorkspaceFileExtension(fileUri)) {\n\t\t\t\treturn { workspaceUri: fileUri };\n\t\t\t}\n\n\t\t\treturn { fileUri };\n\t\t}\n\n\t\t// Remote path\n\t\telse if (uri.authority === Schemas.vscodeRemote) {\n\n\t\t\t// Example conversion:\n\t\t\t// From: vscode://vscode-remote/wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\t\t\t//   To: vscode-remote://wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\n\t\t\tconst secondSlash = uri.path.indexOf(posix.sep, 1 /* skip over the leading slash */);\n\t\t\tlet authority: string;\n\t\t\tlet path: string;\n\t\t\tif (secondSlash !== -1) {\n\t\t\t\tauthority = uri.path.substring(1, secondSlash);\n\t\t\t\tpath = uri.path.substring(secondSlash);\n\t\t\t} else {\n\t\t\t\tauthority = uri.path.substring(1);\n\t\t\t\tpath = '/';\n\t\t\t}\n\n\t\t\tlet query = uri.query;\n\t\t\tconst params = new URLSearchParams(uri.query);\n\t\t\tif (params.get('windowId') === '_blank') {\n\t\t\t\t// Make sure to unset any `windowId=_blank` here\n\t\t\t\t// https://github.com/microsoft/vscode/issues/191902\n\t\t\t\tparams.delete('windowId');\n\t\t\t\tquery = params.toString();\n\t\t\t}\n\n\t\t\tconst remoteUri = URI.from({ scheme: Schemas.vscodeRemote, authority, path, query, fragment: uri.fragment });\n\n\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\treturn { workspaceUri: remoteUri };\n\t\t\t}\n\n\t\t\tif (/:[\\d]+$/.test(path)) {\n\t\t\t\t// path with :line:column syntax\n\t\t\t\treturn { fileUri: remoteUri };\n\t\t\t}\n\n\t\t\treturn { folderUri: remoteUri };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async handleProtocolUrl(windowsMainService: IWindowsMainService, dialogMainService: IDialogMainService, urlService: IURLService, uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tthis.logService.trace('app#handleProtocolUrl():', uri.toString(true), options);\n\n\t\t// Support 'workspace' URLs (https://github.com/microsoft/vscode/issues/124263)\n\t\tif (uri.scheme === this.productService.urlProtocol && uri.path === 'workspace') {\n\t\t\turi = uri.with({\n\t\t\t\tauthority: 'file',\n\t\t\t\tpath: URI.parse(uri.query).path,\n\t\t\t\tquery: ''\n\t\t\t});\n\t\t}\n\n\t\tlet shouldOpenInNewWindow = false;\n\n\t\t// We should handle the URI in a new window if the URL contains `windowId=_blank`\n\t\tconst params = new URLSearchParams(uri.query);\n\t\tif (params.get('windowId') === '_blank') {\n\t\t\tthis.logService.trace(`app#handleProtocolUrl() found 'windowId=_blank' as parameter, setting shouldOpenInNewWindow=true:`, uri.toString(true));\n\n\t\t\tparams.delete('windowId');\n\t\t\turi = uri.with({ query: params.toString() });\n\n\t\t\tshouldOpenInNewWindow = true;\n\t\t}\n\n\t\t// or if no window is open (macOS only)\n\t\telse if (isMacintosh && windowsMainService.getWindowCount() === 0) {\n\t\t\tthis.logService.trace(`app#handleProtocolUrl() running on macOS with no window open, setting shouldOpenInNewWindow=true:`, uri.toString(true));\n\n\t\t\tshouldOpenInNewWindow = true;\n\t\t}\n\n\t\t// Pass along whether the application is being opened via a Continue On flow\n\t\tconst continueOn = params.get('continueOn');\n\t\tif (continueOn !== null) {\n\t\t\tthis.logService.trace(`app#handleProtocolUrl() found 'continueOn' as parameter:`, uri.toString(true));\n\n\t\t\tparams.delete('continueOn');\n\t\t\turi = uri.with({ query: params.toString() });\n\n\t\t\tthis.environmentMainService.continueOn = continueOn ?? undefined;\n\t\t}\n\n\t\t// Check if the protocol URL is a window openable to open...\n\t\tconst windowOpenableFromProtocolUrl = this.getWindowOpenableFromProtocolUrl(uri);\n\t\tif (windowOpenableFromProtocolUrl) {\n\t\t\tif (await this.shouldBlockOpenable(windowOpenableFromProtocolUrl, windowsMainService, dialogMainService)) {\n\t\t\t\tthis.logService.trace('app#handleProtocolUrl() protocol url was blocked:', uri.toString(true));\n\n\t\t\t\treturn true; // If openable should be blocked, behave as if it's handled\n\t\t\t} else {\n\t\t\t\tthis.logService.trace('app#handleProtocolUrl() opening protocol url as window:', windowOpenableFromProtocolUrl, uri.toString(true));\n\n\t\t\t\tconst window = (await windowsMainService.open({\n\t\t\t\t\tcontext: OpenContext.LINK,\n\t\t\t\t\tcli: { ...this.environmentMainService.args },\n\t\t\t\t\turisToOpen: [windowOpenableFromProtocolUrl],\n\t\t\t\t\tforceNewWindow: shouldOpenInNewWindow,\n\t\t\t\t\tgotoLineMode: true\n\t\t\t\t\t// remoteAuthority: will be determined based on windowOpenableFromProtocolUrl\n\t\t\t\t})).at(0);\n\n\t\t\t\twindow?.focus(); // this should help ensuring that the right window gets focus when multiple are opened\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// ...or if we should open in a new window and then handle it within that window\n\t\tif (shouldOpenInNewWindow) {\n\t\t\tthis.logService.trace('app#handleProtocolUrl() opening empty window and passing in protocol url:', uri.toString(true));\n\n\t\t\tconst window = (await windowsMainService.open({\n\t\t\t\tcontext: OpenContext.LINK,\n\t\t\t\tcli: { ...this.environmentMainService.args },\n\t\t\t\tforceNewWindow: true,\n\t\t\t\tforceEmpty: true,\n\t\t\t\tgotoLineMode: true,\n\t\t\t\tremoteAuthority: getRemoteAuthority(uri)\n\t\t\t})).at(0);\n\n\t\t\tawait window?.ready();\n\n\t\t\treturn urlService.open(uri, options);\n\t\t}\n\n\t\tthis.logService.trace('app#handleProtocolUrl(): not handled', uri.toString(true), options);\n\n\t\treturn false;\n\t}\n\n\tprivate setupSharedProcess(machineId: string, sqmId: string, devDeviceId: string): { sharedProcessReady: Promise<MessagePortClient>; sharedProcessClient: Promise<MessagePortClient> } {\n\t\tconst sharedProcess = this._register(this.mainInstantiationService.createInstance(SharedProcess, machineId, sqmId, devDeviceId));\n\n\t\tthis._register(sharedProcess.onDidCrash(() => this.windowsMainService?.sendToFocused('vscode:reportSharedProcessCrash')));\n\n\t\tconst sharedProcessClient = (async () => {\n\t\t\tthis.logService.trace('Main->SharedProcess#connect');\n\n\t\t\tconst port = await sharedProcess.connect();\n\n\t\t\tthis.logService.trace('Main->SharedProcess#connect: connection established');\n\n\t\t\treturn new MessagePortClient(port, 'main');\n\t\t})();\n\n\t\tconst sharedProcessReady = (async () => {\n\t\t\tawait sharedProcess.whenReady();\n\n\t\t\treturn sharedProcessClient;\n\t\t})();\n\n\t\treturn { sharedProcessReady, sharedProcessClient };\n\t}\n\n\tprivate async initServices(machineId: string, sqmId: string, devDeviceId: string, sharedProcessReady: Promise<MessagePortClient>): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Update\n\t\tswitch (process.platform) {\n\t\t\tcase 'win32':\n\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(Win32UpdateService));\n\t\t\t\tbreak;\n\n\t\t\tcase 'linux':\n\t\t\t\tif (isLinuxSnap) {\n\t\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(SnapUpdateService, [process.env['SNAP'], process.env['SNAP_REVISION']]));\n\t\t\t\t} else {\n\t\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(LinuxUpdateService));\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'darwin':\n\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(DarwinUpdateService));\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Windows\n\t\tservices.set(IWindowsMainService, new SyncDescriptor(WindowsMainService, [machineId, sqmId, devDeviceId, this.userEnv], false));\n\t\tservices.set(IAuxiliaryWindowsMainService, new SyncDescriptor(AuxiliaryWindowsMainService, undefined, false));\n\n\t\t// Dialogs\n\t\tconst dialogMainService = new DialogMainService(this.logService, this.productService);\n\t\tservices.set(IDialogMainService, dialogMainService);\n\n\t\t// Launch\n\t\tservices.set(ILaunchMainService, new SyncDescriptor(LaunchMainService, undefined, false /* proxied to other processes */));\n\n\t\t// Diagnostics\n\t\tservices.set(IDiagnosticsMainService, new SyncDescriptor(DiagnosticsMainService, undefined, false /* proxied to other processes */));\n\t\tservices.set(IDiagnosticsService, ProxyChannel.toService(getDelayedChannel(sharedProcessReady.then(client => client.getChannel('diagnostics')))));\n\n\t\t// Issues\n\t\tservices.set(IIssueMainService, new SyncDescriptor(IssueMainService, [this.userEnv]));\n\n\t\t// Process\n\t\tservices.set(IProcessMainService, new SyncDescriptor(ProcessMainService, [this.userEnv]));\n\n\t\t// Encryption\n\t\tservices.set(IEncryptionMainService, new SyncDescriptor(EncryptionMainService));\n\n\t\t// Keyboard Layout\n\t\tservices.set(IKeyboardLayoutMainService, new SyncDescriptor(KeyboardLayoutMainService));\n\n\t\t// Native Host\n\t\tservices.set(INativeHostMainService, new SyncDescriptor(NativeHostMainService, undefined, false /* proxied to other processes */));\n\n\t\t// Webview Manager\n\t\tservices.set(IWebviewManagerService, new SyncDescriptor(WebviewMainService));\n\n\t\t// Menubar\n\t\tservices.set(IMenubarMainService, new SyncDescriptor(MenubarMainService));\n\n\t\t// Extension Host Starter\n\t\tservices.set(IExtensionHostStarter, new SyncDescriptor(ExtensionHostStarter));\n\n\t\t// Storage\n\t\tservices.set(IStorageMainService, new SyncDescriptor(StorageMainService));\n\t\tservices.set(IApplicationStorageMainService, new SyncDescriptor(ApplicationStorageMainService));\n\n\t\t// Terminal\n\t\tconst ptyHostStarter = new ElectronPtyHostStarter({\n\t\t\tgraceTime: LocalReconnectConstants.GraceTime,\n\t\t\tshortGraceTime: LocalReconnectConstants.ShortGraceTime,\n\t\t\tscrollback: this.configurationService.getValue<number>(TerminalSettingId.PersistentSessionScrollback) ?? 100\n\t\t}, this.configurationService, this.environmentMainService, this.lifecycleMainService, this.logService);\n\t\tconst ptyHostService = new PtyHostService(\n\t\t\tptyHostStarter,\n\t\t\tthis.configurationService,\n\t\t\tthis.logService,\n\t\t\tthis.loggerService\n\t\t);\n\t\tservices.set(ILocalPtyService, ptyHostService);\n\n\t\t// External terminal\n\t\tif (isWindows) {\n\t\t\tservices.set(IExternalTerminalMainService, new SyncDescriptor(WindowsExternalTerminalService));\n\t\t} else if (isMacintosh) {\n\t\t\tservices.set(IExternalTerminalMainService, new SyncDescriptor(MacExternalTerminalService));\n\t\t} else if (isLinux) {\n\t\t\tservices.set(IExternalTerminalMainService, new SyncDescriptor(LinuxExternalTerminalService));\n\t\t}\n\n\t\t// Backups\n\t\tconst backupMainService = new BackupMainService(this.environmentMainService, this.configurationService, this.logService, this.stateService);\n\t\tservices.set(IBackupMainService, backupMainService);\n\n\t\t// Workspaces\n\t\tconst workspacesManagementMainService = new WorkspacesManagementMainService(this.environmentMainService, this.logService, this.userDataProfilesMainService, backupMainService, dialogMainService);\n\t\tservices.set(IWorkspacesManagementMainService, workspacesManagementMainService);\n\t\tservices.set(IWorkspacesService, new SyncDescriptor(WorkspacesMainService, undefined, false /* proxied to other processes */));\n\t\tservices.set(IWorkspacesHistoryMainService, new SyncDescriptor(WorkspacesHistoryMainService, undefined, false));\n\n\t\t// URL handling\n\t\tservices.set(IURLService, new SyncDescriptor(NativeURLService, undefined, false /* proxied to other processes */));\n\n\t\t// Telemetry\n\t\tif (supportsTelemetry(this.productService, this.environmentMainService)) {\n\t\t\tconst isInternal = isInternalTelemetry(this.productService, this.configurationService);\n\t\t\tconst channel = getDelayedChannel(sharedProcessReady.then(client => client.getChannel('telemetryAppender')));\n\t\t\tconst appender = new TelemetryAppenderClient(channel);\n\t\t\tconst commonProperties = resolveCommonProperties(release(), hostname(), process.arch, this.productService.commit, this.productService.version, machineId, sqmId, devDeviceId, isInternal);\n\t\t\tconst piiPaths = getPiiPathsFromEnvironment(this.environmentMainService);\n\t\t\tconst config: ITelemetryServiceConfig = { appenders: [appender], commonProperties, piiPaths, sendErrorTelemetry: true };\n\n\t\t\tservices.set(ITelemetryService, new SyncDescriptor(TelemetryService, [config], false));\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\t// Default Extensions Profile Init\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService, undefined, true));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService, undefined, true));\n\n\t\t// Utility Process Worker\n\t\tservices.set(IUtilityProcessWorkerMainService, new SyncDescriptor(UtilityProcessWorkerMainService, undefined, true));\n\n\t\t// Proxy Auth\n\t\tservices.set(IProxyAuthService, new SyncDescriptor(ProxyAuthService));\n\n\t\t// Dev Only: CSS service (for ESM)\n\t\tservices.set(ICSSDevelopmentService, new SyncDescriptor(CSSDevelopmentService, undefined, true));\n\n\t\t// Init services that require it\n\t\tawait Promises.settled([\n\t\t\tbackupMainService.initialize(),\n\t\t\tworkspacesManagementMainService.initialize()\n\t\t]);\n\n\t\treturn this.mainInstantiationService.createChild(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor, mainProcessElectronServer: ElectronIPCServer, sharedProcessClient: Promise<MessagePortClient>): void {\n\n\t\t// Channels registered to node.js are exposed to second instances\n\t\t// launching because that is the only way the second instance\n\t\t// can talk to the first instance. Electron IPC does not work\n\t\t// across apps until `requestSingleInstance` APIs are adopted.\n\n\t\tconst disposables = this._register(new DisposableStore());\n\n\t\tconst launchChannel = ProxyChannel.fromService(accessor.get(ILaunchMainService), disposables, { disableMarshalling: true });\n\t\tthis.mainProcessNodeIpcServer.registerChannel('launch', launchChannel);\n\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(accessor.get(IDiagnosticsMainService), disposables, { disableMarshalling: true });\n\t\tthis.mainProcessNodeIpcServer.registerChannel('diagnostics', diagnosticsChannel);\n\n\t\t// Policies (main & shared process)\n\t\tconst policyChannel = disposables.add(new PolicyChannel(accessor.get(IPolicyService)));\n\t\tmainProcessElectronServer.registerChannel('policy', policyChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('policy', policyChannel));\n\n\t\t// Local Files\n\t\tconst diskFileSystemProvider = this.fileService.getProvider(Schemas.file);\n\t\tassertType(diskFileSystemProvider instanceof DiskFileSystemProvider);\n\t\tconst fileSystemProviderChannel = disposables.add(new DiskFileSystemProviderChannel(diskFileSystemProvider, this.logService, this.environmentMainService));\n\t\tmainProcessElectronServer.registerChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME, fileSystemProviderChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME, fileSystemProviderChannel));\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = ProxyChannel.fromService(accessor.get(IUserDataProfilesMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('userDataProfiles', userDataProfilesService);\n\t\tsharedProcessClient.then(client => client.registerChannel('userDataProfiles', userDataProfilesService));\n\n\t\t// Request\n\t\tconst requestService = new RequestChannel(accessor.get(IRequestService));\n\t\tsharedProcessClient.then(client => client.registerChannel('request', requestService));\n\n\t\t// Update\n\t\tconst updateChannel = new UpdateChannel(accessor.get(IUpdateService));\n\t\tmainProcessElectronServer.registerChannel('update', updateChannel);\n\n\t\t// Issues\n\t\tconst issueChannel = ProxyChannel.fromService(accessor.get(IIssueMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('issue', issueChannel);\n\n\t\t// Process\n\t\tconst processChannel = ProxyChannel.fromService(accessor.get(IProcessMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('process', processChannel);\n\n\t\t// Encryption\n\t\tconst encryptionChannel = ProxyChannel.fromService(accessor.get(IEncryptionMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('encryption', encryptionChannel);\n\n\t\t// Signing\n\t\tconst signChannel = ProxyChannel.fromService(accessor.get(ISignService), disposables);\n\t\tmainProcessElectronServer.registerChannel('sign', signChannel);\n\n\t\t// Keyboard Layout\n\t\tconst keyboardLayoutChannel = ProxyChannel.fromService(accessor.get(IKeyboardLayoutMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('keyboardLayout', keyboardLayoutChannel);\n\n\t\t// Native host (main & shared process)\n\t\tthis.nativeHostMainService = accessor.get(INativeHostMainService);\n\t\tconst nativeHostChannel = ProxyChannel.fromService(this.nativeHostMainService, disposables);\n\t\tmainProcessElectronServer.registerChannel('nativeHost', nativeHostChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('nativeHost', nativeHostChannel));\n\n\t\t// Workspaces\n\t\tconst workspacesChannel = ProxyChannel.fromService(accessor.get(IWorkspacesService), disposables);\n\t\tmainProcessElectronServer.registerChannel('workspaces', workspacesChannel);\n\n\t\t// Menubar\n\t\tconst menubarChannel = ProxyChannel.fromService(accessor.get(IMenubarMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('menubar', menubarChannel);\n\n\t\t// URL handling\n\t\tconst urlChannel = ProxyChannel.fromService(accessor.get(IURLService), disposables);\n\t\tmainProcessElectronServer.registerChannel('url', urlChannel);\n\n\t\t// Webview Manager\n\t\tconst webviewChannel = ProxyChannel.fromService(accessor.get(IWebviewManagerService), disposables);\n\t\tmainProcessElectronServer.registerChannel('webview', webviewChannel);\n\n\t\t// Storage (main & shared process)\n\t\tconst storageChannel = disposables.add((new StorageDatabaseChannel(this.logService, accessor.get(IStorageMainService))));\n\t\tmainProcessElectronServer.registerChannel('storage', storageChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('storage', storageChannel));\n\n\t\t// Profile Storage Changes Listener (shared process)\n\t\tconst profileStorageListener = disposables.add((new ProfileStorageChangesListenerChannel(accessor.get(IStorageMainService), accessor.get(IUserDataProfilesMainService), this.logService)));\n\t\tsharedProcessClient.then(client => client.registerChannel('profileStorageListener', profileStorageListener));\n\n\t\t// Terminal\n\t\tconst ptyHostChannel = ProxyChannel.fromService(accessor.get(ILocalPtyService), disposables);\n\t\tmainProcessElectronServer.registerChannel(TerminalIpcChannels.LocalPty, ptyHostChannel);\n\n\t\t// External Terminal\n\t\tconst externalTerminalChannel = ProxyChannel.fromService(accessor.get(IExternalTerminalMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('externalTerminal', externalTerminalChannel);\n\n\t\t// Logger\n\t\tconst loggerChannel = new LoggerChannel(accessor.get(ILoggerMainService),);\n\t\tmainProcessElectronServer.registerChannel('logger', loggerChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('logger', loggerChannel));\n\n\t\t// Extension Host Debug Broadcasting\n\t\tconst electronExtensionHostDebugBroadcastChannel = new ElectronExtensionHostDebugBroadcastChannel(accessor.get(IWindowsMainService));\n\t\tmainProcessElectronServer.registerChannel('extensionhostdebugservice', electronExtensionHostDebugBroadcastChannel);\n\n\t\t// Extension Host Starter\n\t\tconst extensionHostStarterChannel = ProxyChannel.fromService(accessor.get(IExtensionHostStarter), disposables);\n\t\tmainProcessElectronServer.registerChannel(ipcExtensionHostStarterChannelName, extensionHostStarterChannel);\n\n\t\t// Utility Process Worker\n\t\tconst utilityProcessWorkerChannel = ProxyChannel.fromService(accessor.get(IUtilityProcessWorkerMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel(ipcUtilityProcessWorkerChannelName, utilityProcessWorkerChannel);\n\t}\n\n\tprivate async openFirstWindow(accessor: ServicesAccessor, initialProtocolUrls: IInitialProtocolUrls | undefined): Promise<ICodeWindow[]> {\n\t\tconst windowsMainService = this.windowsMainService = accessor.get(IWindowsMainService);\n\t\tthis.auxiliaryWindowsMainService = accessor.get(IAuxiliaryWindowsMainService);\n\n\t\tconst context = isLaunchedFromCli(process.env) ? OpenContext.CLI : OpenContext.DESKTOP;\n\t\tconst args = this.environmentMainService.args;\n\n\t\t// First check for windows from protocol links to open\n\t\tif (initialProtocolUrls) {\n\n\t\t\t// Openables can open as windows directly\n\t\t\tif (initialProtocolUrls.openables.length > 0) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\turisToOpen: initialProtocolUrls.openables,\n\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\tinitialStartup: true\n\t\t\t\t\t// remoteAuthority: will be determined based on openables\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Protocol links with `windowId=_blank` on startup\n\t\t\t// should be handled in a special way:\n\t\t\t// We take the first one of these and open an empty\n\t\t\t// window for it. This ensures we are not restoring\n\t\t\t// all windows of the previous session.\n\t\t\t// If there are any more URLs like these, they will\n\t\t\t// be handled from the URL listeners installed later.\n\n\t\t\tif (initialProtocolUrls.urls.length > 0) {\n\t\t\t\tfor (const protocolUrl of initialProtocolUrls.urls) {\n\t\t\t\t\tconst params = new URLSearchParams(protocolUrl.uri.query);\n\t\t\t\t\tif (params.get('windowId') === '_blank') {\n\n\t\t\t\t\t\t// It is important here that we remove `windowId=_blank` from\n\t\t\t\t\t\t// this URL because here we open an empty window for it.\n\n\t\t\t\t\t\tparams.delete('windowId');\n\t\t\t\t\t\tprotocolUrl.originalUrl = protocolUrl.uri.toString(true);\n\t\t\t\t\t\tprotocolUrl.uri = protocolUrl.uri.with({ query: params.toString() });\n\n\t\t\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tcli: args,\n\t\t\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\t\t\tinitialStartup: true\n\t\t\t\t\t\t\t// remoteAuthority: will be determined based on openables\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst macOpenFiles: string[] = (<any>global).macOpenFiles;\n\t\tconst hasCliArgs = args._.length;\n\t\tconst hasFolderURIs = !!args['folder-uri'];\n\t\tconst hasFileURIs = !!args['file-uri'];\n\t\tconst noRecentEntry = args['skip-add-to-recently-opened'] === true;\n\t\tconst waitMarkerFileURI = args.wait && args.waitMarkerFilePath ? URI.file(args.waitMarkerFilePath) : undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\t\tconst forceProfile = args.profile;\n\t\tconst forceTempProfile = args['profile-temp'];\n\n\t\t// Started without file/folder arguments\n\t\tif (!hasCliArgs && !hasFolderURIs && !hasFileURIs) {\n\n\t\t\t// Force new window\n\t\t\tif (args['new-window'] || forceProfile || forceTempProfile) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\tnoRecentEntry,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\tforceProfile,\n\t\t\t\t\tforceTempProfile\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// mac: open-file event received on startup\n\t\t\tif (macOpenFiles.length) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext: OpenContext.DOCK,\n\t\t\t\t\tcli: args,\n\t\t\t\t\turisToOpen: macOpenFiles.map(path => {\n\t\t\t\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\n\t\t\t\t\t\treturn (hasWorkspaceFileExtension(path) ? { workspaceUri: URI.file(path) } : { fileUri: URI.file(path) });\n\t\t\t\t\t}),\n\t\t\t\t\tnoRecentEntry,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\t// remoteAuthority: will be determined based on macOpenFiles\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// default: read paths from cli\n\t\treturn windowsMainService.open({\n\t\t\tcontext,\n\t\t\tcli: args,\n\t\t\tforceNewWindow: args['new-window'],\n\t\t\tdiffMode: args.diff,\n\t\t\tmergeMode: args.merge,\n\t\t\tnoRecentEntry,\n\t\t\twaitMarkerFileURI,\n\t\t\tgotoLineMode: args.goto,\n\t\t\tinitialStartup: true,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile,\n\t\t\tforceTempProfile\n\t\t});\n\t}\n\n\tprivate afterWindowOpen(): void {\n\n\t\t// Windows: mutex\n\t\tthis.installMutex();\n\n\t\t// Remote Authorities\n\t\tprotocol.registerHttpProtocol(Schemas.vscodeRemoteResource, (request, callback) => {\n\t\t\tcallback({\n\t\t\t\turl: request.url.replace(/^vscode-remote-resource:/, 'http:'),\n\t\t\t\tmethod: request.method\n\t\t\t});\n\t\t});\n\n\t\t// Start to fetch shell environment (if needed) after window has opened\n\t\t// Since this operation can take a long time, we want to warm it up while\n\t\t// the window is opening.\n\t\t// We also show an error to the user in case this fails.\n\t\tthis.resolveShellEnvironment(this.environmentMainService.args, process.env, true);\n\n\t\t// Crash reporter\n\t\tthis.updateCrashReporterEnablement();\n\n\t\t// macOS: rosetta translation warning\n\t\tif (isMacintosh && app.runningUnderARM64Translation) {\n\t\t\tthis.windowsMainService?.sendToFocused('vscode:showTranslatedBuildWarning');\n\t\t}\n\t}\n\n\tprivate async installMutex(): Promise<void> {\n\t\tconst win32MutexName = this.productService.win32MutexName;\n\t\tif (isWindows && win32MutexName) {\n\t\t\ttry {\n\t\t\t\tconst WindowsMutex = await import('@vscode/windows-mutex');\n\t\t\t\tconst mutex = new WindowsMutex.Mutex(win32MutexName);\n\t\t\t\tEvent.once(this.lifecycleMainService.onWillShutdown)(() => mutex.release());\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async resolveShellEnvironment(args: NativeParsedArgs, env: IProcessEnvironment, notifyOnError: boolean): Promise<typeof process.env> {\n\t\ttry {\n\t\t\treturn await getResolvedShellEnv(this.configurationService, this.logService, args, env);\n\t\t} catch (error) {\n\t\t\tconst errorMessage = toErrorMessage(error);\n\t\t\tif (notifyOnError) {\n\t\t\t\tthis.windowsMainService?.sendToFocused('vscode:showResolveShellEnvError', errorMessage);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(errorMessage);\n\t\t\t}\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tprivate async updateCrashReporterEnablement(): Promise<void> {\n\n\t\t// If enable-crash-reporter argv is undefined then this is a fresh start,\n\t\t// based on `telemetry.enableCrashreporter` settings, generate a UUID which\n\t\t// will be used as crash reporter id and also update the json file.\n\n\t\ttry {\n\t\t\tconst argvContent = await this.fileService.readFile(this.environmentMainService.argvResource);\n\t\t\tconst argvString = argvContent.value.toString();\n\t\t\tconst argvJSON = parse(argvString);\n\t\t\tconst telemetryLevel = getTelemetryLevel(this.configurationService);\n\t\t\tconst enableCrashReporter = telemetryLevel >= TelemetryLevel.CRASH;\n\n\t\t\t// Initial startup\n\t\t\tif (argvJSON['enable-crash-reporter'] === undefined) {\n\t\t\t\tconst additionalArgvContent = [\n\t\t\t\t\t'',\n\t\t\t\t\t'\t// Allows to disable crash reporting.',\n\t\t\t\t\t'\t// Should restart the app if the value is changed.',\n\t\t\t\t\t`\t\"enable-crash-reporter\": ${enableCrashReporter},`,\n\t\t\t\t\t'',\n\t\t\t\t\t'\t// Unique id used for correlating crash reports sent from this instance.',\n\t\t\t\t\t'\t// Do not edit this value.',\n\t\t\t\t\t`\t\"crash-reporter-id\": \"${generateUuid()}\"`,\n\t\t\t\t\t'}'\n\t\t\t\t];\n\t\t\t\tconst newArgvString = argvString.substring(0, argvString.length - 2).concat(',\\n', additionalArgvContent.join('\\n'));\n\n\t\t\t\tawait this.fileService.writeFile(this.environmentMainService.argvResource, VSBuffer.fromString(newArgvString));\n\t\t\t}\n\n\t\t\t// Subsequent startup: update crash reporter value if changed\n\t\t\telse {\n\t\t\t\tconst newArgvString = argvString.replace(/\"enable-crash-reporter\": .*,/, `\"enable-crash-reporter\": ${enableCrashReporter},`);\n\t\t\t\tif (newArgvString !== argvString) {\n\t\t\t\t\tawait this.fileService.writeFile(this.environmentMainService.argvResource, VSBuffer.fromString(newArgvString));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\n\t\t\t// Inform the user via notification\n\t\t\tthis.windowsMainService?.sendToFocused('vscode:showArgvParseWarning');\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["event", "app"]
}
