{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-main/app.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from \"os\";\nimport {\n\tBrowserWindow,\n\ttype Session,\n\ttype WebFrameMain,\n\tapp,\n\tprotocol,\n\tsession,\n\tsystemPreferences,\n} from \"electron\";\nimport {\n\tPromises,\n\tRunOnceScheduler,\n\trunWhenGlobalIdle,\n} from \"../../base/common/async.js\";\nimport { VSBuffer } from \"../../base/common/buffer.js\";\nimport { toErrorMessage } from \"../../base/common/errorMessage.js\";\nimport {\n\tisSigPipeError,\n\tonUnexpectedError,\n\tsetUnexpectedErrorHandler,\n} from \"../../base/common/errors.js\";\nimport { Event } from \"../../base/common/event.js\";\nimport { parse } from \"../../base/common/jsonc.js\";\nimport { getPathLabel } from \"../../base/common/labels.js\";\nimport { Lazy } from \"../../base/common/lazy.js\";\nimport { Disposable, DisposableStore } from \"../../base/common/lifecycle.js\";\nimport { Schemas, VSCODE_AUTHORITY } from \"../../base/common/network.js\";\nimport { normalizeNFC } from \"../../base/common/normalization.js\";\nimport { join, posix } from \"../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\tisLinux,\n\tisLinuxSnap,\n\tisMacintosh,\n\tisWindows,\n} from \"../../base/common/platform.js\";\nimport { assertType } from \"../../base/common/types.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport { generateUuid } from \"../../base/common/uuid.js\";\nimport {\n\taddUNCHostToAllowlist,\n\tdisableUNCAccessRestrictions,\n} from \"../../base/node/unc.js\";\nimport { registerContextMenuListener } from \"../../base/parts/contextmenu/electron-main/contextmenu.js\";\nimport {\n\tProxyChannel,\n\tStaticRouter,\n\tgetDelayedChannel,\n} from \"../../base/parts/ipc/common/ipc.js\";\nimport { Server as ElectronIPCServer } from \"../../base/parts/ipc/electron-main/ipc.electron.js\";\nimport { Client as MessagePortClient } from \"../../base/parts/ipc/electron-main/ipc.mp.js\";\nimport { validatedIpcMain } from \"../../base/parts/ipc/electron-main/ipcMain.js\";\nimport type { Server as NodeIPCServer } from \"../../base/parts/ipc/node/ipc.net.js\";\nimport { localize } from \"../../nls.js\";\nimport { IAuxiliaryWindowsMainService } from \"../../platform/auxiliaryWindow/electron-main/auxiliaryWindows.js\";\nimport { AuxiliaryWindowsMainService } from \"../../platform/auxiliaryWindow/electron-main/auxiliaryWindowsMainService.js\";\nimport { IBackupMainService } from \"../../platform/backup/electron-main/backup.js\";\nimport { BackupMainService } from \"../../platform/backup/electron-main/backupMainService.js\";\nimport { IConfigurationService } from \"../../platform/configuration/common/configuration.js\";\nimport {\n\tCSSDevelopmentService,\n\tICSSDevelopmentService,\n} from \"../../platform/cssDev/node/cssDevService.js\";\nimport { ElectronExtensionHostDebugBroadcastChannel } from \"../../platform/debug/electron-main/extensionHostDebugIpc.js\";\nimport { IDiagnosticsService } from \"../../platform/diagnostics/common/diagnostics.js\";\nimport {\n\tDiagnosticsMainService,\n\tIDiagnosticsMainService,\n} from \"../../platform/diagnostics/electron-main/diagnosticsMainService.js\";\nimport {\n\tDialogMainService,\n\tIDialogMainService,\n} from \"../../platform/dialogs/electron-main/dialogMainService.js\";\nimport { IEncryptionMainService } from \"../../platform/encryption/common/encryptionService.js\";\nimport { EncryptionMainService } from \"../../platform/encryption/electron-main/encryptionMainService.js\";\nimport type { NativeParsedArgs } from \"../../platform/environment/common/argv.js\";\nimport { IEnvironmentMainService } from \"../../platform/environment/electron-main/environmentMainService.js\";\nimport { isLaunchedFromCli } from \"../../platform/environment/node/argvHelper.js\";\nimport { IExtensionsProfileScannerService } from \"../../platform/extensionManagement/common/extensionsProfileScannerService.js\";\nimport { IExtensionsScannerService } from \"../../platform/extensionManagement/common/extensionsScannerService.js\";\nimport { ExtensionsProfileScannerService } from \"../../platform/extensionManagement/node/extensionsProfileScannerService.js\";\nimport { ExtensionsScannerService } from \"../../platform/extensionManagement/node/extensionsScannerService.js\";\nimport {\n\tIExtensionHostStarter,\n\tipcExtensionHostStarterChannelName,\n} from \"../../platform/extensions/common/extensionHostStarter.js\";\nimport { ExtensionHostStarter } from \"../../platform/extensions/electron-main/extensionHostStarter.js\";\nimport { IExternalTerminalMainService } from \"../../platform/externalTerminal/electron-main/externalTerminal.js\";\nimport {\n\tLinuxExternalTerminalService,\n\tMacExternalTerminalService,\n\tWindowsExternalTerminalService,\n} from \"../../platform/externalTerminal/node/externalTerminalService.js\";\nimport { LOCAL_FILE_SYSTEM_CHANNEL_NAME } from \"../../platform/files/common/diskFileSystemProviderClient.js\";\nimport { IFileService } from \"../../platform/files/common/files.js\";\nimport { DiskFileSystemProviderChannel } from \"../../platform/files/electron-main/diskFileSystemProviderServer.js\";\nimport { DiskFileSystemProvider } from \"../../platform/files/node/diskFileSystemProvider.js\";\nimport { SyncDescriptor } from \"../../platform/instantiation/common/descriptors.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../platform/instantiation/common/serviceCollection.js\";\nimport {\n\tIIssueMainService,\n\tIProcessMainService,\n} from \"../../platform/issue/common/issue.js\";\nimport { IssueMainService } from \"../../platform/issue/electron-main/issueMainService.js\";\nimport { ProcessMainService } from \"../../platform/issue/electron-main/processMainService.js\";\nimport {\n\tIKeyboardLayoutMainService,\n\tKeyboardLayoutMainService,\n} from \"../../platform/keyboardLayout/electron-main/keyboardLayoutMainService.js\";\nimport {\n\tILaunchMainService,\n\tLaunchMainService,\n} from \"../../platform/launch/electron-main/launchMainService.js\";\nimport {\n\tILifecycleMainService,\n\tLifecycleMainPhase,\n\tShutdownReason,\n} from \"../../platform/lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService, ILoggerService } from \"../../platform/log/common/log.js\";\nimport { LoggerChannel } from \"../../platform/log/electron-main/logIpc.js\";\nimport { ILoggerMainService } from \"../../platform/log/electron-main/loggerService.js\";\nimport {\n\tIMenubarMainService,\n\tMenubarMainService,\n} from \"../../platform/menubar/electron-main/menubarMainService.js\";\nimport {\n\tIProxyAuthService,\n\tProxyAuthService,\n} from \"../../platform/native/electron-main/auth.js\";\nimport {\n\tINativeHostMainService,\n\tNativeHostMainService,\n} from \"../../platform/native/electron-main/nativeHostMainService.js\";\nimport { IPolicyService } from \"../../platform/policy/common/policy.js\";\nimport { PolicyChannel } from \"../../platform/policy/common/policyIpc.js\";\nimport { IProductService } from \"../../platform/product/common/productService.js\";\nimport {\n\tNODE_REMOTE_RESOURCE_CHANNEL_NAME,\n\tNODE_REMOTE_RESOURCE_IPC_METHOD_NAME,\n\ttype NodeRemoteResourceResponse,\n\tNodeRemoteResourceRouter,\n} from \"../../platform/remote/common/electronRemoteResources.js\";\nimport { getRemoteAuthority } from \"../../platform/remote/common/remoteHosts.js\";\nimport { IRequestService } from \"../../platform/request/common/request.js\";\nimport { RequestChannel } from \"../../platform/request/common/requestIpc.js\";\nimport { SharedProcess } from \"../../platform/sharedProcess/electron-main/sharedProcess.js\";\nimport { getResolvedShellEnv } from \"../../platform/shell/node/shellEnv.js\";\nimport { ISignService } from \"../../platform/sign/common/sign.js\";\nimport { IStateService } from \"../../platform/state/node/state.js\";\nimport { StorageDatabaseChannel } from \"../../platform/storage/electron-main/storageIpc.js\";\nimport {\n\tApplicationStorageMainService,\n\tIApplicationStorageMainService,\n\tIStorageMainService,\n\tStorageMainService,\n} from \"../../platform/storage/electron-main/storageMainService.js\";\nimport { resolveCommonProperties } from \"../../platform/telemetry/common/commonProperties.js\";\nimport {\n\tITelemetryService,\n\tTelemetryLevel,\n} from \"../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryAppenderClient } from \"../../platform/telemetry/common/telemetryIpc.js\";\nimport {\n\ttype ITelemetryServiceConfig,\n\tTelemetryService,\n} from \"../../platform/telemetry/common/telemetryService.js\";\nimport {\n\tNullTelemetryService,\n\tgetPiiPathsFromEnvironment,\n\tgetTelemetryLevel,\n\tisInternalTelemetry,\n\tsupportsTelemetry,\n} from \"../../platform/telemetry/common/telemetryUtils.js\";\nimport {\n\tresolveMachineId,\n\tresolveSqmId,\n\tresolvedevDeviceId,\n} from \"../../platform/telemetry/electron-main/telemetryUtils.js\";\nimport {\n\tILocalPtyService,\n\tLocalReconnectConstants,\n\tTerminalIpcChannels,\n\tTerminalSettingId,\n} from \"../../platform/terminal/common/terminal.js\";\nimport { ElectronPtyHostStarter } from \"../../platform/terminal/electron-main/electronPtyHostStarter.js\";\nimport { PtyHostService } from \"../../platform/terminal/node/ptyHostService.js\";\nimport { IUpdateService } from \"../../platform/update/common/update.js\";\nimport { UpdateChannel } from \"../../platform/update/common/updateIpc.js\";\nimport { DarwinUpdateService } from \"../../platform/update/electron-main/updateService.darwin.js\";\nimport { LinuxUpdateService } from \"../../platform/update/electron-main/updateService.linux.js\";\nimport { SnapUpdateService } from \"../../platform/update/electron-main/updateService.snap.js\";\nimport { Win32UpdateService } from \"../../platform/update/electron-main/updateService.win32.js\";\nimport {\n\ttype IOpenURLOptions,\n\tIURLService,\n} from \"../../platform/url/common/url.js\";\nimport {\n\tURLHandlerChannelClient,\n\tURLHandlerRouter,\n} from \"../../platform/url/common/urlIpc.js\";\nimport { NativeURLService } from \"../../platform/url/common/urlService.js\";\nimport { ElectronURLListener } from \"../../platform/url/electron-main/electronUrlListener.js\";\nimport type {\n\tIInitialProtocolUrls,\n\tIProtocolUrl,\n} from \"../../platform/url/electron-main/url.js\";\nimport { IUserDataProfilesMainService } from \"../../platform/userDataProfile/electron-main/userDataProfile.js\";\nimport { ProfileStorageChangesListenerChannel } from \"../../platform/userDataProfile/electron-main/userDataProfileStorageIpc.js\";\nimport { UserDataProfilesHandler } from \"../../platform/userDataProfile/electron-main/userDataProfilesHandler.js\";\nimport { ipcUtilityProcessWorkerChannelName } from \"../../platform/utilityProcess/common/utilityProcessWorkerService.js\";\nimport {\n\tIUtilityProcessWorkerMainService,\n\tUtilityProcessWorkerMainService,\n} from \"../../platform/utilityProcess/electron-main/utilityProcessWorkerMainService.js\";\nimport { IWebviewManagerService } from \"../../platform/webview/common/webviewManagerService.js\";\nimport { WebviewMainService } from \"../../platform/webview/electron-main/webviewMainService.js\";\nimport {\n\ttype IWindowOpenable,\n\tisFolderToOpen,\n\tisWorkspaceToOpen,\n} from \"../../platform/window/common/window.js\";\nimport type { ICodeWindow } from \"../../platform/window/electron-main/window.js\";\nimport {\n\tIWindowsMainService,\n\tOpenContext,\n} from \"../../platform/windows/electron-main/windows.js\";\nimport { WindowsMainService } from \"../../platform/windows/electron-main/windowsMainService.js\";\nimport { ActiveWindowManager } from \"../../platform/windows/node/windowTracker.js\";\nimport { hasWorkspaceFileExtension } from \"../../platform/workspace/common/workspace.js\";\nimport { IWorkspacesService } from \"../../platform/workspaces/common/workspaces.js\";\nimport {\n\tIWorkspacesHistoryMainService,\n\tWorkspacesHistoryMainService,\n} from \"../../platform/workspaces/electron-main/workspacesHistoryMainService.js\";\nimport { WorkspacesMainService } from \"../../platform/workspaces/electron-main/workspacesMainService.js\";\nimport {\n\tIWorkspacesManagementMainService,\n\tWorkspacesManagementMainService,\n} from \"../../platform/workspaces/electron-main/workspacesManagementMainService.js\";\n\n/**\n * The main VS Code application. There will only ever be one instance,\n * even if the user starts many instances (e.g. from the command line).\n */\nexport class CodeApplication extends Disposable {\n\tprivate static readonly SECURITY_PROTOCOL_HANDLING_CONFIRMATION_SETTING_KEY =\n\t\t{\n\t\t\t[Schemas.file]:\n\t\t\t\t\"security.promptForLocalFileProtocolHandling\" as const,\n\t\t\t[Schemas.vscodeRemote]:\n\t\t\t\t\"security.promptForRemoteFileProtocolHandling\" as const,\n\t\t};\n\n\tprivate windowsMainService: IWindowsMainService | undefined;\n\tprivate auxiliaryWindowsMainService:\n\t\t| IAuxiliaryWindowsMainService\n\t\t| undefined;\n\tprivate nativeHostMainService: INativeHostMainService | undefined;\n\n\tconstructor(\n\t\tprivate readonly mainProcessNodeIpcServer: NodeIPCServer,\n\t\tprivate readonly userEnv: IProcessEnvironment,\n\t\t@IInstantiationService private readonly mainInstantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesMainService: IUserDataProfilesMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.configureSession();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate configureSession(): void {\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\n\t\tconst isUrlFromWebview = (requestingUrl: string | undefined) =>\n\t\t\trequestingUrl?.startsWith(`${Schemas.vscodeWebview}://`);\n\n\t\tconst allowedPermissionsInWebview = new Set([\n\t\t\t\"clipboard-read\",\n\t\t\t\"clipboard-sanitized-write\",\n\t\t]);\n\n\t\tsession.defaultSession.setPermissionRequestHandler(\n\t\t\t(_webContents, permission, callback, details) => {\n\t\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tallowedPermissionsInWebview.has(permission),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn callback(false);\n\t\t\t},\n\t\t);\n\n\t\tsession.defaultSession.setPermissionCheckHandler(\n\t\t\t(_webContents, permission, _origin, details) => {\n\t\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\t\treturn allowedPermissionsInWebview.has(permission);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t);\n\n\t\t//#endregion\n\n\t\t//#region Request filtering\n\n\t\t// Block all SVG requests from unsupported origins\n\t\tconst supportedSvgSchemes = new Set([\n\t\t\tSchemas.file,\n\t\t\tSchemas.vscodeFileResource,\n\t\t\tSchemas.vscodeRemoteResource,\n\t\t\tSchemas.vscodeManagedRemoteResource,\n\t\t\t\"devtools\",\n\t\t]);\n\n\t\t// But allow them if they are made from inside an webview\n\t\tconst isSafeFrame = (\n\t\t\trequestFrame: WebFrameMain | undefined,\n\t\t): boolean => {\n\t\t\tfor (\n\t\t\t\tlet frame: WebFrameMain | null | undefined = requestFrame;\n\t\t\t\tframe;\n\t\t\t\tframe = frame.parent\n\t\t\t) {\n\t\t\t\tif (frame.url.startsWith(`${Schemas.vscodeWebview}://`)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tconst isSvgRequestFromSafeContext = (\n\t\t\tdetails:\n\t\t\t\t| Electron.OnBeforeRequestListenerDetails\n\t\t\t\t| Electron.OnHeadersReceivedListenerDetails,\n\t\t): boolean => {\n\t\t\treturn details.resourceType === \"xhr\" || isSafeFrame(details.frame);\n\t\t};\n\n\t\tconst isAllowedVsCodeFileRequest = (\n\t\t\tdetails: Electron.OnBeforeRequestListenerDetails,\n\t\t) => {\n\t\t\tconst frame = details.frame;\n\t\t\tif (!frame || !this.windowsMainService) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check to see if the request comes from one of the main windows (or shared process) and not from embedded content\n\t\t\tconst windows = BrowserWindow.getAllWindows();\n\t\t\tfor (const window of windows) {\n\t\t\t\tif (\n\t\t\t\t\tframe.processId === window.webContents.mainFrame.processId\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tconst isAllowedWebviewRequest = (\n\t\t\turi: URI,\n\t\t\tdetails: Electron.OnBeforeRequestListenerDetails,\n\t\t): boolean => {\n\t\t\tif (uri.path !== \"/index.html\") {\n\t\t\t\treturn true; // Only restrict top level page of webviews: index.html\n\t\t\t}\n\n\t\t\tconst frame = details.frame;\n\t\t\tif (!frame || !this.windowsMainService) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check to see if the request comes from one of the main editor windows.\n\t\t\tfor (const window of this.windowsMainService.getWindows()) {\n\t\t\t\tif (window.win) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tframe.processId ===\n\t\t\t\t\t\twindow.win.webContents.mainFrame.processId\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tsession.defaultSession.webRequest.onBeforeRequest(\n\t\t\t(details, callback) => {\n\t\t\t\tconst uri = URI.parse(details.url);\n\t\t\t\tif (uri.scheme === Schemas.vscodeWebview) {\n\t\t\t\t\tif (!isAllowedWebviewRequest(uri, details)) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\"Blocked vscode-webview request\",\n\t\t\t\t\t\t\tdetails.url,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn callback({ cancel: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (uri.scheme === Schemas.vscodeFileResource) {\n\t\t\t\t\tif (!isAllowedVsCodeFileRequest(details)) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\"Blocked vscode-file request\",\n\t\t\t\t\t\t\tdetails.url,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn callback({ cancel: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Block most svgs\n\t\t\t\tif (uri.path.endsWith(\".svg\")) {\n\t\t\t\t\tconst isSafeResourceUrl = supportedSvgSchemes.has(\n\t\t\t\t\t\turi.scheme,\n\t\t\t\t\t);\n\t\t\t\t\tif (!isSafeResourceUrl) {\n\t\t\t\t\t\treturn callback({\n\t\t\t\t\t\t\tcancel: !isSvgRequestFromSafeContext(details),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn callback({ cancel: false });\n\t\t\t},\n\t\t);\n\n\t\t// Configure SVG header content type properly\n\t\t// https://github.com/microsoft/vscode/issues/97564\n\t\tsession.defaultSession.webRequest.onHeadersReceived(\n\t\t\t(details, callback) => {\n\t\t\t\tconst responseHeaders = details.responseHeaders as Record<\n\t\t\t\t\tstring,\n\t\t\t\t\tstring | string[]\n\t\t\t\t>;\n\t\t\t\tconst contentTypes =\n\t\t\t\t\tresponseHeaders[\"content-type\"] ||\n\t\t\t\t\tresponseHeaders[\"Content-Type\"];\n\n\t\t\t\tif (contentTypes && Array.isArray(contentTypes)) {\n\t\t\t\t\tconst uri = URI.parse(details.url);\n\t\t\t\t\tif (uri.path.endsWith(\".svg\")) {\n\t\t\t\t\t\tif (supportedSvgSchemes.has(uri.scheme)) {\n\t\t\t\t\t\t\tresponseHeaders[\"Content-Type\"] = [\"image/svg+xml\"];\n\n\t\t\t\t\t\t\treturn callback({ cancel: false, responseHeaders });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// remote extension schemes have the following format\n\t\t\t\t\t// http://127.0.0.1:<port>/vscode-remote-resource?path=\n\t\t\t\t\tif (\n\t\t\t\t\t\t!uri.path.endsWith(Schemas.vscodeRemoteResource) &&\n\t\t\t\t\t\tcontentTypes.some((contentType) =>\n\t\t\t\t\t\t\tcontentType.toLowerCase().includes(\"image/svg\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn callback({\n\t\t\t\t\t\t\tcancel: !isSvgRequestFromSafeContext(details),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn callback({ cancel: false });\n\t\t\t},\n\t\t);\n\n\t\t//#endregion\n\n\t\t//#region Allow CORS for the PRSS CDN\n\n\t\t// https://github.com/microsoft/vscode-remote-release/issues/9246\n\t\tsession.defaultSession.webRequest.onHeadersReceived(\n\t\t\t(details, callback) => {\n\t\t\t\tif (\n\t\t\t\t\tdetails.url.startsWith(\n\t\t\t\t\t\t\"https://vscode.download.prss.microsoft.com/\",\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst responseHeaders =\n\t\t\t\t\t\tdetails.responseHeaders ?? Object.create(null);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tresponseHeaders[\"Access-Control-Allow-Origin\"] ===\n\t\t\t\t\t\tundefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tresponseHeaders[\"Access-Control-Allow-Origin\"] = [\"*\"];\n\t\t\t\t\t\treturn callback({ cancel: false, responseHeaders });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn callback({ cancel: false });\n\t\t\t},\n\t\t);\n\n\t\t//#endregion\n\n\t\t//#region Code Cache\n\n\t\ttype SessionWithCodeCachePathSupport = Session & {\n\t\t\t/**\n\t\t\t * Sets code cache directory. By default, the directory will be `Code Cache` under\n\t\t\t * the respective user data folder.\n\t\t\t */\n\t\t\tsetCodeCachePath?(path: string): void;\n\t\t};\n\n\t\tconst defaultSession =\n\t\t\tsession.defaultSession as unknown as SessionWithCodeCachePathSupport;\n\t\tif (\n\t\t\ttypeof defaultSession.setCodeCachePath === \"function\" &&\n\t\t\tthis.environmentMainService.codeCachePath\n\t\t) {\n\t\t\t// Make sure to partition Chrome's code cache folder\n\t\t\t// in the same way as our code cache path to help\n\t\t\t// invalidate caches that we know are invalid\n\t\t\t// (https://github.com/microsoft/vscode/issues/120655)\n\t\t\tdefaultSession.setCodeCachePath(\n\t\t\t\tjoin(this.environmentMainService.codeCachePath, \"chrome\"),\n\t\t\t);\n\t\t}\n\n\t\t//#endregion\n\n\t\t//#region UNC Host Allowlist (Windows)\n\n\t\tif (isWindows) {\n\t\t\tif (\n\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\t\"security.restrictUNCAccess\",\n\t\t\t\t) === false\n\t\t\t) {\n\t\t\t\tdisableUNCAccessRestrictions();\n\t\t\t} else {\n\t\t\t\taddUNCHostToAllowlist(\n\t\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\t\t\"security.allowedUNCHosts\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t//#endregion\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// We handle uncaught exceptions here to prevent electron from opening a dialog to the user\n\t\tsetUnexpectedErrorHandler((error) => this.onUnexpectedError(error));\n\t\tprocess.on(\"uncaughtException\", (error) => {\n\t\t\tif (!isSigPipeError(error)) {\n\t\t\t\tonUnexpectedError(error);\n\t\t\t}\n\t\t});\n\t\tprocess.on(\"unhandledRejection\", (reason: unknown) =>\n\t\t\tonUnexpectedError(reason),\n\t\t);\n\n\t\t// Dispose on shutdown\n\t\tEvent.once(this.lifecycleMainService.onWillShutdown)(() =>\n\t\t\tthis.dispose(),\n\t\t);\n\n\t\t// Contextmenu via IPC support\n\t\tregisterContextMenuListener();\n\n\t\t// Accessibility change event\n\t\tapp.on(\n\t\t\t\"accessibility-support-changed\",\n\t\t\t(event, accessibilitySupportEnabled) => {\n\t\t\t\tthis.windowsMainService?.sendToAll(\n\t\t\t\t\t\"vscode:accessibilitySupportChanged\",\n\t\t\t\t\taccessibilitySupportEnabled,\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\n\t\t// macOS dock activate\n\t\tapp.on(\"activate\", async (event, hasVisibleWindows) => {\n\t\t\tthis.logService.trace(\"app#activate\");\n\n\t\t\t// Mac only event: open new window when we get activated\n\t\t\tif (!hasVisibleWindows) {\n\t\t\t\tawait this.windowsMainService?.openEmptyWindow({\n\t\t\t\t\tcontext: OpenContext.DOCK,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\t\tapp.on(\"web-contents-created\", (event, contents) => {\n\t\t\t// Auxiliary Window: delegate to `AuxiliaryWindow` class\n\t\t\tif (\n\t\t\t\tcontents?.opener?.url.startsWith(\n\t\t\t\t\t`${Schemas.vscodeFileResource}://${VSCODE_AUTHORITY}/`,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t'[aux window]  app.on(\"web-contents-created\"): Registering auxiliary window',\n\t\t\t\t);\n\n\t\t\t\tthis.auxiliaryWindowsMainService?.registerWindow(contents);\n\t\t\t}\n\n\t\t\t// Block any in-page navigation\n\t\t\tcontents.on(\"will-navigate\", (event) => {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t\"webContents#will-navigate: Prevented webcontent navigation\",\n\t\t\t\t);\n\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\n\t\t\t// All Windows: only allow about:blank auxiliary windows to open\n\t\t\t// For all other URLs, delegate to the OS.\n\t\t\tcontents.setWindowOpenHandler((details) => {\n\t\t\t\t// about:blank windows can open as window witho our default options\n\t\t\t\tif (details.url === \"about:blank\") {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"[aux window] webContents#setWindowOpenHandler: Allowing auxiliary window to open on about:blank\",\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\taction: \"allow\",\n\t\t\t\t\t\toverrideBrowserWindowOptions:\n\t\t\t\t\t\t\tthis.auxiliaryWindowsMainService?.createWindow(\n\t\t\t\t\t\t\t\tdetails,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Any other URL: delegate to OS\n\t\t\t\telse {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`webContents#setWindowOpenHandler: Prevented opening window with URL ${details.url}}`,\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.nativeHostMainService?.openExternal(\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tdetails.url,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn { action: \"deny\" };\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t//#endregion\n\n\t\tlet macOpenFileURIs: IWindowOpenable[] = [];\n\t\tlet runningTimeout: NodeJS.Timeout | undefined;\n\t\tapp.on(\"open-file\", (event, path) => {\n\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\n\t\t\tthis.logService.trace(\"app#open-file: \", path);\n\t\t\tevent.preventDefault();\n\n\t\t\t// Keep in array because more might come!\n\t\t\tmacOpenFileURIs.push(\n\t\t\t\thasWorkspaceFileExtension(path)\n\t\t\t\t\t? { workspaceUri: URI.file(path) }\n\t\t\t\t\t: { fileUri: URI.file(path) },\n\t\t\t);\n\n\t\t\t// Clear previous handler if any\n\t\t\tif (runningTimeout !== undefined) {\n\t\t\t\tclearTimeout(runningTimeout);\n\t\t\t\trunningTimeout = undefined;\n\t\t\t}\n\n\t\t\t// Handle paths delayed in case more are coming!\n\t\t\trunningTimeout = setTimeout(async () => {\n\t\t\t\tawait this.windowsMainService?.open({\n\t\t\t\t\tcontext:\n\t\t\t\t\t\tOpenContext.DOCK /* can also be opening from finder while app is running */,\n\t\t\t\t\tcli: this.environmentMainService.args,\n\t\t\t\t\turisToOpen: macOpenFileURIs,\n\t\t\t\t\tgotoLineMode: false,\n\t\t\t\t\tpreferNewWindow: true /* dropping on the dock or opening from finder prefers to open in a new window */,\n\t\t\t\t});\n\n\t\t\t\tmacOpenFileURIs = [];\n\t\t\t\trunningTimeout = undefined;\n\t\t\t}, 100);\n\t\t});\n\n\t\tapp.on(\"new-window-for-tab\", async () => {\n\t\t\tawait this.windowsMainService?.openEmptyWindow({\n\t\t\t\tcontext: OpenContext.DESKTOP,\n\t\t\t}); //macOS native tab \"+\" button\n\t\t});\n\n\t\t//#region Bootstrap IPC Handlers\n\n\t\tvalidatedIpcMain.handle(\"vscode:fetchShellEnv\", (event) => {\n\t\t\t// Prefer to use the args and env from the target window\n\t\t\t// when resolving the shell env. It is possible that\n\t\t\t// a first window was opened from the UI but a second\n\t\t\t// from the CLI and that has implications for whether to\n\t\t\t// resolve the shell environment or not.\n\t\t\t//\n\t\t\t// Window can be undefined for e.g. the shared process\n\t\t\t// that is not part of our windows registry!\n\t\t\tconst window = this.windowsMainService?.getWindowByWebContents(\n\t\t\t\tevent.sender,\n\t\t\t); // Note: this can be `undefined` for the shared process\n\t\t\tlet args: NativeParsedArgs;\n\t\t\tlet env: IProcessEnvironment;\n\t\t\tif (window?.config) {\n\t\t\t\targs = window.config;\n\t\t\t\tenv = { ...process.env, ...window.config.userEnv };\n\t\t\t} else {\n\t\t\t\targs = this.environmentMainService.args;\n\t\t\t\tenv = process.env;\n\t\t\t}\n\n\t\t\t// Resolve shell env\n\t\t\treturn this.resolveShellEnvironment(args, env, false);\n\t\t});\n\n\t\tvalidatedIpcMain.on(\"vscode:toggleDevTools\", (event) =>\n\t\t\tevent.sender.toggleDevTools(),\n\t\t);\n\t\tvalidatedIpcMain.on(\"vscode:openDevTools\", (event) =>\n\t\t\tevent.sender.openDevTools(),\n\t\t);\n\n\t\tvalidatedIpcMain.on(\"vscode:reloadWindow\", (event) =>\n\t\t\tevent.sender.reload(),\n\t\t);\n\n\t\tvalidatedIpcMain.handle(\n\t\t\t\"vscode:notifyZoomLevel\",\n\t\t\tasync (event, zoomLevel: number | undefined) => {\n\t\t\t\tconst window = this.windowsMainService?.getWindowByWebContents(\n\t\t\t\t\tevent.sender,\n\t\t\t\t);\n\t\t\t\tif (window) {\n\t\t\t\t\twindow.notifyZoomLevel(zoomLevel);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\t//#endregion\n\t}\n\n\tprivate onUnexpectedError(error: Error): void {\n\t\tif (error) {\n\t\t\t// take only the message and stack property\n\t\t\tconst friendlyError = {\n\t\t\t\tmessage: `[uncaught exception in main]: ${error.message}`,\n\t\t\t\tstack: error.stack,\n\t\t\t};\n\n\t\t\t// handle on client side\n\t\t\tthis.windowsMainService?.sendToFocused(\n\t\t\t\t\"vscode:reportError\",\n\t\t\t\tJSON.stringify(friendlyError),\n\t\t\t);\n\t\t}\n\n\t\tthis.logService.error(`[uncaught exception in main]: ${error}`);\n\t\tif (error.stack) {\n\t\t\tthis.logService.error(error.stack);\n\t\t}\n\t}\n\n\tasync startup(): Promise<void> {\n\t\tthis.logService.debug(\"Starting VS Code\");\n\t\tthis.logService.debug(`from: ${this.environmentMainService.appRoot}`);\n\t\tthis.logService.debug(\"args:\", this.environmentMainService.args);\n\n\t\t// Make sure we associate the program with the app user model id\n\t\t// This will help Windows to associate the running program with\n\t\t// any shortcut that is pinned to the taskbar and prevent showing\n\t\t// two icons in the taskbar for the same app.\n\t\tconst win32AppUserModelId = this.productService.win32AppUserModelId;\n\t\tif (isWindows && win32AppUserModelId) {\n\t\t\tapp.setAppUserModelId(win32AppUserModelId);\n\t\t}\n\n\t\t// Fix native tabs on macOS 10.13\n\t\t// macOS enables a compatibility patch for any bundle ID beginning with\n\t\t// \"com.microsoft.\", which breaks native tabs for VS Code when using this\n\t\t// identifier (from the official build).\n\t\t// Explicitly opt out of the patch here before creating any windows.\n\t\t// See: https://github.com/microsoft/vscode/issues/35361#issuecomment-399794085\n\t\ttry {\n\t\t\tif (\n\t\t\t\tisMacintosh &&\n\t\t\t\tthis.configurationService.getValue(\"window.nativeTabs\") ===\n\t\t\t\t\ttrue &&\n\t\t\t\t!systemPreferences.getUserDefault(\n\t\t\t\t\t\"NSUseImprovedLayoutPass\",\n\t\t\t\t\t\"boolean\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tsystemPreferences.setUserDefault(\n\t\t\t\t\t\"NSUseImprovedLayoutPass\",\n\t\t\t\t\t\"boolean\",\n\t\t\t\t\ttrue as any,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\t// Main process server (electron IPC based)\n\t\tconst mainProcessElectronServer = new ElectronIPCServer();\n\t\tEvent.once(this.lifecycleMainService.onWillShutdown)((e) => {\n\t\t\tif (e.reason === ShutdownReason.KILL) {\n\t\t\t\t// When we go down abnormally, make sure to free up\n\t\t\t\t// any IPC we accept from other windows to reduce\n\t\t\t\t// the chance of doing work after we go down. Kill\n\t\t\t\t// is special in that it does not orderly shutdown\n\t\t\t\t// windows.\n\t\t\t\tmainProcessElectronServer.dispose();\n\t\t\t}\n\t\t});\n\n\t\t// Resolve unique machine ID\n\t\tthis.logService.trace(\"Resolving machine identifier...\");\n\t\tconst [machineId, sqmId, devDeviceId] = await Promise.all([\n\t\t\tresolveMachineId(this.stateService, this.logService),\n\t\t\tresolveSqmId(this.stateService, this.logService),\n\t\t\tresolvedevDeviceId(this.stateService, this.logService),\n\t\t]);\n\t\tthis.logService.trace(`Resolved machine identifier: ${machineId}`);\n\n\t\t// Shared process\n\t\tconst { sharedProcessReady, sharedProcessClient } =\n\t\t\tthis.setupSharedProcess(machineId, sqmId, devDeviceId);\n\n\t\t// Services\n\t\tconst appInstantiationService = await this.initServices(\n\t\t\tmachineId,\n\t\t\tsqmId,\n\t\t\tdevDeviceId,\n\t\t\tsharedProcessReady,\n\t\t);\n\n\t\t// Auth Handler\n\t\tappInstantiationService.invokeFunction((accessor) =>\n\t\t\taccessor.get(IProxyAuthService),\n\t\t);\n\n\t\t// Transient profiles handler\n\t\tthis._register(\n\t\t\tappInstantiationService.createInstance(UserDataProfilesHandler),\n\t\t);\n\n\t\t// Init Channels\n\t\tappInstantiationService.invokeFunction((accessor) =>\n\t\t\tthis.initChannels(\n\t\t\t\taccessor,\n\t\t\t\tmainProcessElectronServer,\n\t\t\t\tsharedProcessClient,\n\t\t\t),\n\t\t);\n\n\t\t// Setup Protocol URL Handlers\n\t\tconst initialProtocolUrls =\n\t\t\tawait appInstantiationService.invokeFunction((accessor) =>\n\t\t\t\tthis.setupProtocolUrlHandlers(\n\t\t\t\t\taccessor,\n\t\t\t\t\tmainProcessElectronServer,\n\t\t\t\t),\n\t\t\t);\n\n\t\t// Setup vscode-remote-resource protocol handler.\n\t\tthis.setupManagedRemoteResourceUrlHandler(mainProcessElectronServer);\n\n\t\t// Signal phase: ready - before opening first window\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.Ready;\n\n\t\t// Open Windows\n\t\tawait appInstantiationService.invokeFunction((accessor) =>\n\t\t\tthis.openFirstWindow(accessor, initialProtocolUrls),\n\t\t);\n\n\t\t// Signal phase: after window open\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.AfterWindowOpen;\n\n\t\t// Post Open Windows Tasks\n\t\tthis.afterWindowOpen();\n\n\t\t// Set lifecycle phase to `Eventually` after a short delay and when idle (min 2.5sec, max 5sec)\n\t\tconst eventuallyPhaseScheduler = this._register(\n\t\t\tnew RunOnceScheduler(() => {\n\t\t\t\tthis._register(\n\t\t\t\t\trunWhenGlobalIdle(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t(this.lifecycleMainService.phase =\n\t\t\t\t\t\t\t\tLifecycleMainPhase.Eventually),\n\t\t\t\t\t\t2500,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}, 2500),\n\t\t);\n\t\teventuallyPhaseScheduler.schedule();\n\t}\n\n\tprivate async setupProtocolUrlHandlers(\n\t\taccessor: ServicesAccessor,\n\t\tmainProcessElectronServer: ElectronIPCServer,\n\t): Promise<IInitialProtocolUrls | undefined> {\n\t\tconst windowsMainService = (this.windowsMainService =\n\t\t\taccessor.get(IWindowsMainService));\n\t\tconst urlService = accessor.get(IURLService);\n\t\tconst nativeHostMainService = (this.nativeHostMainService =\n\t\t\taccessor.get(INativeHostMainService));\n\t\tconst dialogMainService = accessor.get(IDialogMainService);\n\n\t\t// Install URL handlers that deal with protocl URLs either\n\t\t// from this process by opening windows and/or by forwarding\n\t\t// the URLs into a window process to be handled there.\n\n\t\tconst app = this;\n\t\turlService.registerHandler({\n\t\t\tasync handleURL(\n\t\t\t\turi: URI,\n\t\t\t\toptions?: IOpenURLOptions,\n\t\t\t): Promise<boolean> {\n\t\t\t\treturn app.handleProtocolUrl(\n\t\t\t\t\twindowsMainService,\n\t\t\t\t\tdialogMainService,\n\t\t\t\t\turlService,\n\t\t\t\t\turi,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\n\t\tconst activeWindowManager = this._register(\n\t\t\tnew ActiveWindowManager({\n\t\t\t\tonDidOpenMainWindow: nativeHostMainService.onDidOpenMainWindow,\n\t\t\t\tonDidFocusMainWindow:\n\t\t\t\t\tnativeHostMainService.onDidFocusMainWindow,\n\t\t\t\tgetActiveWindowId: () =>\n\t\t\t\t\tnativeHostMainService.getActiveWindowId(-1),\n\t\t\t}),\n\t\t);\n\t\tconst activeWindowRouter = new StaticRouter((ctx) =>\n\t\t\tactiveWindowManager.getActiveClientId().then((id) => ctx === id),\n\t\t);\n\t\tconst urlHandlerRouter = new URLHandlerRouter(\n\t\t\tactiveWindowRouter,\n\t\t\tthis.logService,\n\t\t);\n\t\tconst urlHandlerChannel = mainProcessElectronServer.getChannel(\n\t\t\t\"urlHandler\",\n\t\t\turlHandlerRouter,\n\t\t);\n\t\turlService.registerHandler(\n\t\t\tnew URLHandlerChannelClient(urlHandlerChannel),\n\t\t);\n\n\t\tconst initialProtocolUrls = await this.resolveInitialProtocolUrls(\n\t\t\twindowsMainService,\n\t\t\tdialogMainService,\n\t\t);\n\t\tthis._register(\n\t\t\tnew ElectronURLListener(\n\t\t\t\tinitialProtocolUrls?.urls,\n\t\t\t\turlService,\n\t\t\t\twindowsMainService,\n\t\t\t\tthis.environmentMainService,\n\t\t\t\tthis.productService,\n\t\t\t\tthis.logService,\n\t\t\t),\n\t\t);\n\n\t\treturn initialProtocolUrls;\n\t}\n\n\tprivate setupManagedRemoteResourceUrlHandler(\n\t\tmainProcessElectronServer: ElectronIPCServer,\n\t) {\n\t\tconst notFound = (): Electron.ProtocolResponse => ({\n\t\t\tstatusCode: 404,\n\t\t\tdata: \"Not found\",\n\t\t});\n\t\tconst remoteResourceChannel = new Lazy(() =>\n\t\t\tmainProcessElectronServer.getChannel(\n\t\t\t\tNODE_REMOTE_RESOURCE_CHANNEL_NAME,\n\t\t\t\tnew NodeRemoteResourceRouter(),\n\t\t\t),\n\t\t);\n\n\t\tprotocol.registerBufferProtocol(\n\t\t\tSchemas.vscodeManagedRemoteResource,\n\t\t\t(request, callback) => {\n\t\t\t\tconst url = URI.parse(request.url);\n\t\t\t\tif (!url.authority.startsWith(\"window:\")) {\n\t\t\t\t\treturn callback(notFound());\n\t\t\t\t}\n\n\t\t\t\tremoteResourceChannel.value\n\t\t\t\t\t.call<NodeRemoteResourceResponse>(\n\t\t\t\t\t\tNODE_REMOTE_RESOURCE_IPC_METHOD_NAME,\n\t\t\t\t\t\t[url],\n\t\t\t\t\t)\n\t\t\t\t\t.then(\n\t\t\t\t\t\t(r) =>\n\t\t\t\t\t\t\tcallback({\n\t\t\t\t\t\t\t\t...r,\n\t\t\t\t\t\t\t\tdata: Buffer.from(r.body, \"base64\"),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\"error dispatching remote resource call\",\n\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcallback({ statusCode: 500, data: String(err) });\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate async resolveInitialProtocolUrls(\n\t\twindowsMainService: IWindowsMainService,\n\t\tdialogMainService: IDialogMainService,\n\t): Promise<IInitialProtocolUrls | undefined> {\n\t\t/**\n\t\t * Protocol URL handling on startup is complex, refer to\n\t\t * {@link IInitialProtocolUrls} for an explainer.\n\t\t */\n\n\t\t// Windows/Linux: protocol handler invokes CLI with --open-url\n\t\tconst protocolUrlsFromCommandLine = this.environmentMainService.args[\n\t\t\t\"open-url\"\n\t\t]\n\t\t\t? this.environmentMainService.args._urls || []\n\t\t\t: [];\n\t\tif (protocolUrlsFromCommandLine.length > 0) {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"app#resolveInitialProtocolUrls() protocol urls from command line:\",\n\t\t\t\tprotocolUrlsFromCommandLine,\n\t\t\t);\n\t\t}\n\n\t\t// macOS: open-url events that were received before the app is ready\n\t\tconst protocolUrlsFromEvent = ((<any>global).getOpenUrls() ||\n\t\t\t[]) as string[];\n\t\tif (protocolUrlsFromEvent.length > 0) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`app#resolveInitialProtocolUrls() protocol urls from macOS 'open-url' event:`,\n\t\t\t\tprotocolUrlsFromEvent,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tprotocolUrlsFromCommandLine.length +\n\t\t\t\tprotocolUrlsFromEvent.length ===\n\t\t\t0\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst protocolUrls = [\n\t\t\t...protocolUrlsFromCommandLine,\n\t\t\t...protocolUrlsFromEvent,\n\t\t].map((url) => {\n\t\t\ttry {\n\t\t\t\treturn { uri: URI.parse(url), originalUrl: url };\n\t\t\t} catch {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"app#resolveInitialProtocolUrls() protocol url failed to parse:\",\n\t\t\t\t\turl,\n\t\t\t\t);\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tconst openables: IWindowOpenable[] = [];\n\t\tconst urls: IProtocolUrl[] = [];\n\t\tfor (const protocolUrl of protocolUrls) {\n\t\t\tif (!protocolUrl) {\n\t\t\t\tcontinue; // invalid\n\t\t\t}\n\n\t\t\tconst windowOpenable = this.getWindowOpenableFromProtocolUrl(\n\t\t\t\tprotocolUrl.uri,\n\t\t\t);\n\t\t\tif (windowOpenable) {\n\t\t\t\tif (\n\t\t\t\t\tawait this.shouldBlockOpenable(\n\t\t\t\t\t\twindowOpenable,\n\t\t\t\t\t\twindowsMainService,\n\t\t\t\t\t\tdialogMainService,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"app#resolveInitialProtocolUrls() protocol url was blocked:\",\n\t\t\t\t\t\tprotocolUrl.uri.toString(true),\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue; // blocked\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"app#resolveInitialProtocolUrls() protocol url will be handled as window to open:\",\n\t\t\t\t\t\tprotocolUrl.uri.toString(true),\n\t\t\t\t\t\twindowOpenable,\n\t\t\t\t\t);\n\n\t\t\t\t\topenables.push(windowOpenable); // handled as window to open\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"app#resolveInitialProtocolUrls() protocol url will be passed to active window for handling:\",\n\t\t\t\t\tprotocolUrl.uri.toString(true),\n\t\t\t\t);\n\n\t\t\t\turls.push(protocolUrl); // handled within active window\n\t\t\t}\n\t\t}\n\n\t\treturn { urls, openables };\n\t}\n\n\tprivate async shouldBlockOpenable(\n\t\topenable: IWindowOpenable,\n\t\twindowsMainService: IWindowsMainService,\n\t\tdialogMainService: IDialogMainService,\n\t): Promise<boolean> {\n\t\tlet openableUri: URI;\n\t\tlet message: string;\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\topenableUri = openable.workspaceUri;\n\t\t\tmessage = localize(\n\t\t\t\t\"confirmOpenMessageWorkspace\",\n\t\t\t\t\"An external application wants to open '{0}' in {1}. Do you want to open this workspace file?\",\n\t\t\t\topenableUri.scheme === Schemas.file\n\t\t\t\t\t? getPathLabel(openableUri, {\n\t\t\t\t\t\t\tos: OS,\n\t\t\t\t\t\t\ttildify: this.environmentMainService,\n\t\t\t\t\t\t})\n\t\t\t\t\t: openableUri.toString(true),\n\t\t\t\tthis.productService.nameShort,\n\t\t\t);\n\t\t} else if (isFolderToOpen(openable)) {\n\t\t\topenableUri = openable.folderUri;\n\t\t\tmessage = localize(\n\t\t\t\t\"confirmOpenMessageFolder\",\n\t\t\t\t\"An external application wants to open '{0}' in {1}. Do you want to open this folder?\",\n\t\t\t\topenableUri.scheme === Schemas.file\n\t\t\t\t\t? getPathLabel(openableUri, {\n\t\t\t\t\t\t\tos: OS,\n\t\t\t\t\t\t\ttildify: this.environmentMainService,\n\t\t\t\t\t\t})\n\t\t\t\t\t: openableUri.toString(true),\n\t\t\t\tthis.productService.nameShort,\n\t\t\t);\n\t\t} else {\n\t\t\topenableUri = openable.fileUri;\n\t\t\tmessage = localize(\n\t\t\t\t\"confirmOpenMessageFileOrFolder\",\n\t\t\t\t\"An external application wants to open '{0}' in {1}. Do you want to open this file or folder?\",\n\t\t\t\topenableUri.scheme === Schemas.file\n\t\t\t\t\t? getPathLabel(openableUri, {\n\t\t\t\t\t\t\tos: OS,\n\t\t\t\t\t\t\ttildify: this.environmentMainService,\n\t\t\t\t\t\t})\n\t\t\t\t\t: openableUri.toString(true),\n\t\t\t\tthis.productService.nameShort,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\topenableUri.scheme !== Schemas.file &&\n\t\t\topenableUri.scheme !== Schemas.vscodeRemote\n\t\t) {\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t//\n\t\t\t// NOTE: we currently only ask for confirmation for `file` and `vscode-remote`\n\t\t\t// authorities here. There is an additional confirmation for `extension.id`\n\t\t\t// authorities from within the window.\n\t\t\t//\n\t\t\t// IF YOU ARE PLANNING ON ADDING ANOTHER AUTHORITY HERE, MAKE SURE TO ALSO\n\t\t\t// ADD IT TO THE CONFIRMATION CODE BELOW OR INSIDE THE WINDOW!\n\t\t\t//\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst askForConfirmation = this.configurationService.getValue<unknown>(\n\t\t\tCodeApplication.SECURITY_PROTOCOL_HANDLING_CONFIRMATION_SETTING_KEY[\n\t\t\t\topenableUri.scheme\n\t\t\t],\n\t\t);\n\t\tif (askForConfirmation === false) {\n\t\t\treturn false; // not blocked via settings\n\t\t}\n\n\t\tconst { response, checkboxChecked } =\n\t\t\tawait dialogMainService.showMessageBox({\n\t\t\t\ttype: \"warning\",\n\t\t\t\tbuttons: [\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{ key: \"open\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&Yes\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{ key: \"cancel\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&No\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\tmessage,\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"confirmOpenDetail\",\n\t\t\t\t\t\"If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'\",\n\t\t\t\t),\n\t\t\t\tcheckboxLabel:\n\t\t\t\t\topenableUri.scheme === Schemas.file\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"doNotAskAgainLocal\",\n\t\t\t\t\t\t\t\t\"Allow opening local paths without asking\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"doNotAskAgainRemote\",\n\t\t\t\t\t\t\t\t\"Allow opening remote paths without asking\",\n\t\t\t\t\t\t\t),\n\t\t\t\tcancelId: 1,\n\t\t\t});\n\n\t\tif (response !== 0) {\n\t\t\treturn true; // blocked by user choice\n\t\t}\n\n\t\tif (checkboxChecked) {\n\t\t\t// Due to https://github.com/microsoft/vscode/issues/195436, we can only\n\t\t\t// update settings from within a window. But we do not know if a window\n\t\t\t// is about to open or can already handle the request, so we have to send\n\t\t\t// to any current window and any newly opening window.\n\t\t\tconst request = {\n\t\t\t\tchannel: \"vscode:disablePromptForProtocolHandling\",\n\t\t\t\targs: openableUri.scheme === Schemas.file ? \"local\" : \"remote\",\n\t\t\t};\n\t\t\twindowsMainService.sendToFocused(request.channel, request.args);\n\t\t\twindowsMainService.sendToOpeningWindow(\n\t\t\t\trequest.channel,\n\t\t\t\trequest.args,\n\t\t\t);\n\t\t}\n\n\t\treturn false; // not blocked by user choice\n\t}\n\n\tprivate getWindowOpenableFromProtocolUrl(\n\t\turi: URI,\n\t): IWindowOpenable | undefined {\n\t\tif (!uri.path) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// File path\n\t\tif (uri.authority === Schemas.file) {\n\t\t\tconst fileUri = URI.file(uri.fsPath);\n\n\t\t\tif (hasWorkspaceFileExtension(fileUri)) {\n\t\t\t\treturn { workspaceUri: fileUri };\n\t\t\t}\n\n\t\t\treturn { fileUri };\n\t\t}\n\n\t\t// Remote path\n\t\telse if (uri.authority === Schemas.vscodeRemote) {\n\t\t\t// Example conversion:\n\t\t\t// From: vscode://vscode-remote/wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\t\t\t//   To: vscode-remote://wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\n\t\t\tconst secondSlash = uri.path.indexOf(\n\t\t\t\tposix.sep,\n\t\t\t\t1 /* skip over the leading slash */,\n\t\t\t);\n\t\t\tlet authority: string;\n\t\t\tlet path: string;\n\t\t\tif (secondSlash !== -1) {\n\t\t\t\tauthority = uri.path.substring(1, secondSlash);\n\t\t\t\tpath = uri.path.substring(secondSlash);\n\t\t\t} else {\n\t\t\t\tauthority = uri.path.substring(1);\n\t\t\t\tpath = \"/\";\n\t\t\t}\n\n\t\t\tlet query = uri.query;\n\t\t\tconst params = new URLSearchParams(uri.query);\n\t\t\tif (params.get(\"windowId\") === \"_blank\") {\n\t\t\t\t// Make sure to unset any `windowId=_blank` here\n\t\t\t\t// https://github.com/microsoft/vscode/issues/191902\n\t\t\t\tparams.delete(\"windowId\");\n\t\t\t\tquery = params.toString();\n\t\t\t}\n\n\t\t\tconst remoteUri = URI.from({\n\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\tauthority,\n\t\t\t\tpath,\n\t\t\t\tquery,\n\t\t\t\tfragment: uri.fragment,\n\t\t\t});\n\n\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\treturn { workspaceUri: remoteUri };\n\t\t\t}\n\n\t\t\tif (/:[\\d]+$/.test(path)) {\n\t\t\t\t// path with :line:column syntax\n\t\t\t\treturn { fileUri: remoteUri };\n\t\t\t}\n\n\t\t\treturn { folderUri: remoteUri };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async handleProtocolUrl(\n\t\twindowsMainService: IWindowsMainService,\n\t\tdialogMainService: IDialogMainService,\n\t\turlService: IURLService,\n\t\turi: URI,\n\t\toptions?: IOpenURLOptions,\n\t): Promise<boolean> {\n\t\tthis.logService.trace(\n\t\t\t\"app#handleProtocolUrl():\",\n\t\t\turi.toString(true),\n\t\t\toptions,\n\t\t);\n\n\t\t// Support 'workspace' URLs (https://github.com/microsoft/vscode/issues/124263)\n\t\tif (\n\t\t\turi.scheme === this.productService.urlProtocol &&\n\t\t\turi.path === \"workspace\"\n\t\t) {\n\t\t\turi = uri.with({\n\t\t\t\tauthority: \"file\",\n\t\t\t\tpath: URI.parse(uri.query).path,\n\t\t\t\tquery: \"\",\n\t\t\t});\n\t\t}\n\n\t\tlet shouldOpenInNewWindow = false;\n\n\t\t// We should handle the URI in a new window if the URL contains `windowId=_blank`\n\t\tconst params = new URLSearchParams(uri.query);\n\t\tif (params.get(\"windowId\") === \"_blank\") {\n\t\t\tthis.logService.trace(\n\t\t\t\t`app#handleProtocolUrl() found 'windowId=_blank' as parameter, setting shouldOpenInNewWindow=true:`,\n\t\t\t\turi.toString(true),\n\t\t\t);\n\n\t\t\tparams.delete(\"windowId\");\n\t\t\turi = uri.with({ query: params.toString() });\n\n\t\t\tshouldOpenInNewWindow = true;\n\t\t}\n\n\t\t// or if no window is open (macOS only)\n\t\telse if (isMacintosh && windowsMainService.getWindowCount() === 0) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`app#handleProtocolUrl() running on macOS with no window open, setting shouldOpenInNewWindow=true:`,\n\t\t\t\turi.toString(true),\n\t\t\t);\n\n\t\t\tshouldOpenInNewWindow = true;\n\t\t}\n\n\t\t// Pass along whether the application is being opened via a Continue On flow\n\t\tconst continueOn = params.get(\"continueOn\");\n\t\tif (continueOn !== null) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`app#handleProtocolUrl() found 'continueOn' as parameter:`,\n\t\t\t\turi.toString(true),\n\t\t\t);\n\n\t\t\tparams.delete(\"continueOn\");\n\t\t\turi = uri.with({ query: params.toString() });\n\n\t\t\tthis.environmentMainService.continueOn = continueOn ?? undefined;\n\t\t}\n\n\t\t// Check if the protocol URL is a window openable to open...\n\t\tconst windowOpenableFromProtocolUrl =\n\t\t\tthis.getWindowOpenableFromProtocolUrl(uri);\n\t\tif (windowOpenableFromProtocolUrl) {\n\t\t\tif (\n\t\t\t\tawait this.shouldBlockOpenable(\n\t\t\t\t\twindowOpenableFromProtocolUrl,\n\t\t\t\t\twindowsMainService,\n\t\t\t\t\tdialogMainService,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"app#handleProtocolUrl() protocol url was blocked:\",\n\t\t\t\t\turi.toString(true),\n\t\t\t\t);\n\n\t\t\t\treturn true; // If openable should be blocked, behave as if it's handled\n\t\t\t} else {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"app#handleProtocolUrl() opening protocol url as window:\",\n\t\t\t\t\twindowOpenableFromProtocolUrl,\n\t\t\t\t\turi.toString(true),\n\t\t\t\t);\n\n\t\t\t\tconst window = (\n\t\t\t\t\tawait windowsMainService.open({\n\t\t\t\t\t\tcontext: OpenContext.LINK,\n\t\t\t\t\t\tcli: { ...this.environmentMainService.args },\n\t\t\t\t\t\turisToOpen: [windowOpenableFromProtocolUrl],\n\t\t\t\t\t\tforceNewWindow: shouldOpenInNewWindow,\n\t\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\t\t// remoteAuthority: will be determined based on windowOpenableFromProtocolUrl\n\t\t\t\t\t})\n\t\t\t\t).at(0);\n\n\t\t\t\twindow?.focus(); // this should help ensuring that the right window gets focus when multiple are opened\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// ...or if we should open in a new window and then handle it within that window\n\t\tif (shouldOpenInNewWindow) {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"app#handleProtocolUrl() opening empty window and passing in protocol url:\",\n\t\t\t\turi.toString(true),\n\t\t\t);\n\n\t\t\tconst window = (\n\t\t\t\tawait windowsMainService.open({\n\t\t\t\t\tcontext: OpenContext.LINK,\n\t\t\t\t\tcli: { ...this.environmentMainService.args },\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\tremoteAuthority: getRemoteAuthority(uri),\n\t\t\t\t})\n\t\t\t).at(0);\n\n\t\t\tawait window?.ready();\n\n\t\t\treturn urlService.open(uri, options);\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"app#handleProtocolUrl(): not handled\",\n\t\t\turi.toString(true),\n\t\t\toptions,\n\t\t);\n\n\t\treturn false;\n\t}\n\n\tprivate setupSharedProcess(\n\t\tmachineId: string,\n\t\tsqmId: string,\n\t\tdevDeviceId: string,\n\t): {\n\t\tsharedProcessReady: Promise<MessagePortClient>;\n\t\tsharedProcessClient: Promise<MessagePortClient>;\n\t} {\n\t\tconst sharedProcess = this._register(\n\t\t\tthis.mainInstantiationService.createInstance(\n\t\t\t\tSharedProcess,\n\t\t\t\tmachineId,\n\t\t\t\tsqmId,\n\t\t\t\tdevDeviceId,\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tsharedProcess.onDidCrash(() =>\n\t\t\t\tthis.windowsMainService?.sendToFocused(\n\t\t\t\t\t\"vscode:reportSharedProcessCrash\",\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tconst sharedProcessClient = (async () => {\n\t\t\tthis.logService.trace(\"Main->SharedProcess#connect\");\n\n\t\t\tconst port = await sharedProcess.connect();\n\n\t\t\tthis.logService.trace(\n\t\t\t\t\"Main->SharedProcess#connect: connection established\",\n\t\t\t);\n\n\t\t\treturn new MessagePortClient(port, \"main\");\n\t\t})();\n\n\t\tconst sharedProcessReady = (async () => {\n\t\t\tawait sharedProcess.whenReady();\n\n\t\t\treturn sharedProcessClient;\n\t\t})();\n\n\t\treturn { sharedProcessReady, sharedProcessClient };\n\t}\n\n\tprivate async initServices(\n\t\tmachineId: string,\n\t\tsqmId: string,\n\t\tdevDeviceId: string,\n\t\tsharedProcessReady: Promise<MessagePortClient>,\n\t): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Update\n\t\tswitch (process.platform) {\n\t\t\tcase \"win32\":\n\t\t\t\tservices.set(\n\t\t\t\t\tIUpdateService,\n\t\t\t\t\tnew SyncDescriptor(Win32UpdateService),\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase \"linux\":\n\t\t\t\tif (isLinuxSnap) {\n\t\t\t\t\tservices.set(\n\t\t\t\t\t\tIUpdateService,\n\t\t\t\t\t\tnew SyncDescriptor(SnapUpdateService, [\n\t\t\t\t\t\t\tprocess.env[\"SNAP\"],\n\t\t\t\t\t\t\tprocess.env[\"SNAP_REVISION\"],\n\t\t\t\t\t\t]),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tservices.set(\n\t\t\t\t\t\tIUpdateService,\n\t\t\t\t\t\tnew SyncDescriptor(LinuxUpdateService),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"darwin\":\n\t\t\t\tservices.set(\n\t\t\t\t\tIUpdateService,\n\t\t\t\t\tnew SyncDescriptor(DarwinUpdateService),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Windows\n\t\tservices.set(\n\t\t\tIWindowsMainService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tWindowsMainService,\n\t\t\t\t[machineId, sqmId, devDeviceId, this.userEnv],\n\t\t\t\tfalse,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIAuxiliaryWindowsMainService,\n\t\t\tnew SyncDescriptor(AuxiliaryWindowsMainService, undefined, false),\n\t\t);\n\n\t\t// Dialogs\n\t\tconst dialogMainService = new DialogMainService(\n\t\t\tthis.logService,\n\t\t\tthis.productService,\n\t\t);\n\t\tservices.set(IDialogMainService, dialogMainService);\n\n\t\t// Launch\n\t\tservices.set(\n\t\t\tILaunchMainService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tLaunchMainService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Diagnostics\n\t\tservices.set(\n\t\t\tIDiagnosticsMainService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tDiagnosticsMainService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIDiagnosticsService,\n\t\t\tProxyChannel.toService(\n\t\t\t\tgetDelayedChannel(\n\t\t\t\t\tsharedProcessReady.then((client) =>\n\t\t\t\t\t\tclient.getChannel(\"diagnostics\"),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Issues\n\t\tservices.set(\n\t\t\tIIssueMainService,\n\t\t\tnew SyncDescriptor(IssueMainService, [this.userEnv]),\n\t\t);\n\n\t\t// Process\n\t\tservices.set(\n\t\t\tIProcessMainService,\n\t\t\tnew SyncDescriptor(ProcessMainService, [this.userEnv]),\n\t\t);\n\n\t\t// Encryption\n\t\tservices.set(\n\t\t\tIEncryptionMainService,\n\t\t\tnew SyncDescriptor(EncryptionMainService),\n\t\t);\n\n\t\t// Keyboard Layout\n\t\tservices.set(\n\t\t\tIKeyboardLayoutMainService,\n\t\t\tnew SyncDescriptor(KeyboardLayoutMainService),\n\t\t);\n\n\t\t// Native Host\n\t\tservices.set(\n\t\t\tINativeHostMainService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tNativeHostMainService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Webview Manager\n\t\tservices.set(\n\t\t\tIWebviewManagerService,\n\t\t\tnew SyncDescriptor(WebviewMainService),\n\t\t);\n\n\t\t// Menubar\n\t\tservices.set(\n\t\t\tIMenubarMainService,\n\t\t\tnew SyncDescriptor(MenubarMainService),\n\t\t);\n\n\t\t// Extension Host Starter\n\t\tservices.set(\n\t\t\tIExtensionHostStarter,\n\t\t\tnew SyncDescriptor(ExtensionHostStarter),\n\t\t);\n\n\t\t// Storage\n\t\tservices.set(\n\t\t\tIStorageMainService,\n\t\t\tnew SyncDescriptor(StorageMainService),\n\t\t);\n\t\tservices.set(\n\t\t\tIApplicationStorageMainService,\n\t\t\tnew SyncDescriptor(ApplicationStorageMainService),\n\t\t);\n\n\t\t// Terminal\n\t\tconst ptyHostStarter = new ElectronPtyHostStarter(\n\t\t\t{\n\t\t\t\tgraceTime: LocalReconnectConstants.GraceTime,\n\t\t\t\tshortGraceTime: LocalReconnectConstants.ShortGraceTime,\n\t\t\t\tscrollback:\n\t\t\t\t\tthis.configurationService.getValue<number>(\n\t\t\t\t\t\tTerminalSettingId.PersistentSessionScrollback,\n\t\t\t\t\t) ?? 100,\n\t\t\t},\n\t\t\tthis.configurationService,\n\t\t\tthis.environmentMainService,\n\t\t\tthis.lifecycleMainService,\n\t\t\tthis.logService,\n\t\t);\n\t\tconst ptyHostService = new PtyHostService(\n\t\t\tptyHostStarter,\n\t\t\tthis.configurationService,\n\t\t\tthis.logService,\n\t\t\tthis.loggerService,\n\t\t);\n\t\tservices.set(ILocalPtyService, ptyHostService);\n\n\t\t// External terminal\n\t\tif (isWindows) {\n\t\t\tservices.set(\n\t\t\t\tIExternalTerminalMainService,\n\t\t\t\tnew SyncDescriptor(WindowsExternalTerminalService),\n\t\t\t);\n\t\t} else if (isMacintosh) {\n\t\t\tservices.set(\n\t\t\t\tIExternalTerminalMainService,\n\t\t\t\tnew SyncDescriptor(MacExternalTerminalService),\n\t\t\t);\n\t\t} else if (isLinux) {\n\t\t\tservices.set(\n\t\t\t\tIExternalTerminalMainService,\n\t\t\t\tnew SyncDescriptor(LinuxExternalTerminalService),\n\t\t\t);\n\t\t}\n\n\t\t// Backups\n\t\tconst backupMainService = new BackupMainService(\n\t\t\tthis.environmentMainService,\n\t\t\tthis.configurationService,\n\t\t\tthis.logService,\n\t\t\tthis.stateService,\n\t\t);\n\t\tservices.set(IBackupMainService, backupMainService);\n\n\t\t// Workspaces\n\t\tconst workspacesManagementMainService =\n\t\t\tnew WorkspacesManagementMainService(\n\t\t\t\tthis.environmentMainService,\n\t\t\t\tthis.logService,\n\t\t\t\tthis.userDataProfilesMainService,\n\t\t\t\tbackupMainService,\n\t\t\t\tdialogMainService,\n\t\t\t);\n\t\tservices.set(\n\t\t\tIWorkspacesManagementMainService,\n\t\t\tworkspacesManagementMainService,\n\t\t);\n\t\tservices.set(\n\t\t\tIWorkspacesService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tWorkspacesMainService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIWorkspacesHistoryMainService,\n\t\t\tnew SyncDescriptor(WorkspacesHistoryMainService, undefined, false),\n\t\t);\n\n\t\t// URL handling\n\t\tservices.set(\n\t\t\tIURLService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tNativeURLService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Telemetry\n\t\tif (\n\t\t\tsupportsTelemetry(this.productService, this.environmentMainService)\n\t\t) {\n\t\t\tconst isInternal = isInternalTelemetry(\n\t\t\t\tthis.productService,\n\t\t\t\tthis.configurationService,\n\t\t\t);\n\t\t\tconst channel = getDelayedChannel(\n\t\t\t\tsharedProcessReady.then((client) =>\n\t\t\t\t\tclient.getChannel(\"telemetryAppender\"),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst appender = new TelemetryAppenderClient(channel);\n\t\t\tconst commonProperties = resolveCommonProperties(\n\t\t\t\trelease(),\n\t\t\t\thostname(),\n\t\t\t\tprocess.arch,\n\t\t\t\tthis.productService.commit,\n\t\t\t\tthis.productService.version,\n\t\t\t\tmachineId,\n\t\t\t\tsqmId,\n\t\t\t\tdevDeviceId,\n\t\t\t\tisInternal,\n\t\t\t);\n\t\t\tconst piiPaths = getPiiPathsFromEnvironment(\n\t\t\t\tthis.environmentMainService,\n\t\t\t);\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders: [appender],\n\t\t\t\tcommonProperties,\n\t\t\t\tpiiPaths,\n\t\t\t\tsendErrorTelemetry: true,\n\t\t\t};\n\n\t\t\tservices.set(\n\t\t\t\tITelemetryService,\n\t\t\t\tnew SyncDescriptor(TelemetryService, [config], false),\n\t\t\t);\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\t// Default Extensions Profile Init\n\t\tservices.set(\n\t\t\tIExtensionsProfileScannerService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tExtensionsProfileScannerService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIExtensionsScannerService,\n\t\t\tnew SyncDescriptor(ExtensionsScannerService, undefined, true),\n\t\t);\n\n\t\t// Utility Process Worker\n\t\tservices.set(\n\t\t\tIUtilityProcessWorkerMainService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tUtilityProcessWorkerMainService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\n\t\t// Proxy Auth\n\t\tservices.set(IProxyAuthService, new SyncDescriptor(ProxyAuthService));\n\n\t\t// Dev Only: CSS service (for ESM)\n\t\tservices.set(\n\t\t\tICSSDevelopmentService,\n\t\t\tnew SyncDescriptor(CSSDevelopmentService, undefined, true),\n\t\t);\n\n\t\t// Init services that require it\n\t\tawait Promises.settled([\n\t\t\tbackupMainService.initialize(),\n\t\t\tworkspacesManagementMainService.initialize(),\n\t\t]);\n\n\t\treturn this.mainInstantiationService.createChild(services);\n\t}\n\n\tprivate initChannels(\n\t\taccessor: ServicesAccessor,\n\t\tmainProcessElectronServer: ElectronIPCServer,\n\t\tsharedProcessClient: Promise<MessagePortClient>,\n\t): void {\n\t\t// Channels registered to node.js are exposed to second instances\n\t\t// launching because that is the only way the second instance\n\t\t// can talk to the first instance. Electron IPC does not work\n\t\t// across apps until `requestSingleInstance` APIs are adopted.\n\n\t\tconst disposables = this._register(new DisposableStore());\n\n\t\tconst launchChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(ILaunchMainService),\n\t\t\tdisposables,\n\t\t\t{ disableMarshalling: true },\n\t\t);\n\t\tthis.mainProcessNodeIpcServer.registerChannel(\"launch\", launchChannel);\n\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IDiagnosticsMainService),\n\t\t\tdisposables,\n\t\t\t{ disableMarshalling: true },\n\t\t);\n\t\tthis.mainProcessNodeIpcServer.registerChannel(\n\t\t\t\"diagnostics\",\n\t\t\tdiagnosticsChannel,\n\t\t);\n\n\t\t// Policies (main & shared process)\n\t\tconst policyChannel = disposables.add(\n\t\t\tnew PolicyChannel(accessor.get(IPolicyService)),\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"policy\", policyChannel);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\"policy\", policyChannel),\n\t\t);\n\n\t\t// Local Files\n\t\tconst diskFileSystemProvider = this.fileService.getProvider(\n\t\t\tSchemas.file,\n\t\t);\n\t\tassertType(diskFileSystemProvider instanceof DiskFileSystemProvider);\n\t\tconst fileSystemProviderChannel = disposables.add(\n\t\t\tnew DiskFileSystemProviderChannel(\n\t\t\t\tdiskFileSystemProvider,\n\t\t\t\tthis.logService,\n\t\t\t\tthis.environmentMainService,\n\t\t\t),\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\tLOCAL_FILE_SYSTEM_CHANNEL_NAME,\n\t\t\tfileSystemProviderChannel,\n\t\t);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\n\t\t\t\tLOCAL_FILE_SYSTEM_CHANNEL_NAME,\n\t\t\t\tfileSystemProviderChannel,\n\t\t\t),\n\t\t);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = ProxyChannel.fromService(\n\t\t\taccessor.get(IUserDataProfilesMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"userDataProfiles\",\n\t\t\tuserDataProfilesService,\n\t\t);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\"userDataProfiles\", userDataProfilesService),\n\t\t);\n\n\t\t// Request\n\t\tconst requestService = new RequestChannel(\n\t\t\taccessor.get(IRequestService),\n\t\t);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\"request\", requestService),\n\t\t);\n\n\t\t// Update\n\t\tconst updateChannel = new UpdateChannel(accessor.get(IUpdateService));\n\t\tmainProcessElectronServer.registerChannel(\"update\", updateChannel);\n\n\t\t// Issues\n\t\tconst issueChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IIssueMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"issue\", issueChannel);\n\n\t\t// Process\n\t\tconst processChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IProcessMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"process\", processChannel);\n\n\t\t// Encryption\n\t\tconst encryptionChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IEncryptionMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"encryption\",\n\t\t\tencryptionChannel,\n\t\t);\n\n\t\t// Signing\n\t\tconst signChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(ISignService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"sign\", signChannel);\n\n\t\t// Keyboard Layout\n\t\tconst keyboardLayoutChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IKeyboardLayoutMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"keyboardLayout\",\n\t\t\tkeyboardLayoutChannel,\n\t\t);\n\n\t\t// Native host (main & shared process)\n\t\tthis.nativeHostMainService = accessor.get(INativeHostMainService);\n\t\tconst nativeHostChannel = ProxyChannel.fromService(\n\t\t\tthis.nativeHostMainService,\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"nativeHost\",\n\t\t\tnativeHostChannel,\n\t\t);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\"nativeHost\", nativeHostChannel),\n\t\t);\n\n\t\t// Workspaces\n\t\tconst workspacesChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IWorkspacesService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"workspaces\",\n\t\t\tworkspacesChannel,\n\t\t);\n\n\t\t// Menubar\n\t\tconst menubarChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IMenubarMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"menubar\", menubarChannel);\n\n\t\t// URL handling\n\t\tconst urlChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IURLService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"url\", urlChannel);\n\n\t\t// Webview Manager\n\t\tconst webviewChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IWebviewManagerService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"webview\", webviewChannel);\n\n\t\t// Storage (main & shared process)\n\t\tconst storageChannel = disposables.add(\n\t\t\tnew StorageDatabaseChannel(\n\t\t\t\tthis.logService,\n\t\t\t\taccessor.get(IStorageMainService),\n\t\t\t),\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"storage\", storageChannel);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\"storage\", storageChannel),\n\t\t);\n\n\t\t// Profile Storage Changes Listener (shared process)\n\t\tconst profileStorageListener = disposables.add(\n\t\t\tnew ProfileStorageChangesListenerChannel(\n\t\t\t\taccessor.get(IStorageMainService),\n\t\t\t\taccessor.get(IUserDataProfilesMainService),\n\t\t\t\tthis.logService,\n\t\t\t),\n\t\t);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\n\t\t\t\t\"profileStorageListener\",\n\t\t\t\tprofileStorageListener,\n\t\t\t),\n\t\t);\n\n\t\t// Terminal\n\t\tconst ptyHostChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(ILocalPtyService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\tTerminalIpcChannels.LocalPty,\n\t\t\tptyHostChannel,\n\t\t);\n\n\t\t// External Terminal\n\t\tconst externalTerminalChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IExternalTerminalMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"externalTerminal\",\n\t\t\texternalTerminalChannel,\n\t\t);\n\n\t\t// Logger\n\t\tconst loggerChannel = new LoggerChannel(\n\t\t\taccessor.get(ILoggerMainService),\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\"logger\", loggerChannel);\n\t\tsharedProcessClient.then((client) =>\n\t\t\tclient.registerChannel(\"logger\", loggerChannel),\n\t\t);\n\n\t\t// Extension Host Debug Broadcasting\n\t\tconst electronExtensionHostDebugBroadcastChannel =\n\t\t\tnew ElectronExtensionHostDebugBroadcastChannel(\n\t\t\t\taccessor.get(IWindowsMainService),\n\t\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\t\"extensionhostdebugservice\",\n\t\t\telectronExtensionHostDebugBroadcastChannel,\n\t\t);\n\n\t\t// Extension Host Starter\n\t\tconst extensionHostStarterChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IExtensionHostStarter),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\tipcExtensionHostStarterChannelName,\n\t\t\textensionHostStarterChannel,\n\t\t);\n\n\t\t// Utility Process Worker\n\t\tconst utilityProcessWorkerChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IUtilityProcessWorkerMainService),\n\t\t\tdisposables,\n\t\t);\n\t\tmainProcessElectronServer.registerChannel(\n\t\t\tipcUtilityProcessWorkerChannelName,\n\t\t\tutilityProcessWorkerChannel,\n\t\t);\n\t}\n\n\tprivate async openFirstWindow(\n\t\taccessor: ServicesAccessor,\n\t\tinitialProtocolUrls: IInitialProtocolUrls | undefined,\n\t): Promise<ICodeWindow[]> {\n\t\tconst windowsMainService = (this.windowsMainService =\n\t\t\taccessor.get(IWindowsMainService));\n\t\tthis.auxiliaryWindowsMainService = accessor.get(\n\t\t\tIAuxiliaryWindowsMainService,\n\t\t);\n\n\t\tconst context = isLaunchedFromCli(process.env)\n\t\t\t? OpenContext.CLI\n\t\t\t: OpenContext.DESKTOP;\n\t\tconst args = this.environmentMainService.args;\n\n\t\t// First check for windows from protocol links to open\n\t\tif (initialProtocolUrls) {\n\t\t\t// Openables can open as windows directly\n\t\t\tif (initialProtocolUrls.openables.length > 0) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\turisToOpen: initialProtocolUrls.openables,\n\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\t// remoteAuthority: will be determined based on openables\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Protocol links with `windowId=_blank` on startup\n\t\t\t// should be handled in a special way:\n\t\t\t// We take the first one of these and open an empty\n\t\t\t// window for it. This ensures we are not restoring\n\t\t\t// all windows of the previous session.\n\t\t\t// If there are any more URLs like these, they will\n\t\t\t// be handled from the URL listeners installed later.\n\n\t\t\tif (initialProtocolUrls.urls.length > 0) {\n\t\t\t\tfor (const protocolUrl of initialProtocolUrls.urls) {\n\t\t\t\t\tconst params = new URLSearchParams(protocolUrl.uri.query);\n\t\t\t\t\tif (params.get(\"windowId\") === \"_blank\") {\n\t\t\t\t\t\t// It is important here that we remove `windowId=_blank` from\n\t\t\t\t\t\t// this URL because here we open an empty window for it.\n\n\t\t\t\t\t\tparams.delete(\"windowId\");\n\t\t\t\t\t\tprotocolUrl.originalUrl =\n\t\t\t\t\t\t\tprotocolUrl.uri.toString(true);\n\t\t\t\t\t\tprotocolUrl.uri = protocolUrl.uri.with({\n\t\t\t\t\t\t\tquery: params.toString(),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tcli: args,\n\t\t\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\t\t\t// remoteAuthority: will be determined based on openables\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst macOpenFiles: string[] = (<any>global).macOpenFiles;\n\t\tconst hasCliArgs = args._.length;\n\t\tconst hasFolderURIs = !!args[\"folder-uri\"];\n\t\tconst hasFileURIs = !!args[\"file-uri\"];\n\t\tconst noRecentEntry = args[\"skip-add-to-recently-opened\"] === true;\n\t\tconst waitMarkerFileURI =\n\t\t\targs.wait && args.waitMarkerFilePath\n\t\t\t\t? URI.file(args.waitMarkerFilePath)\n\t\t\t\t: undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\t\tconst forceProfile = args.profile;\n\t\tconst forceTempProfile = args[\"profile-temp\"];\n\n\t\t// Started without file/folder arguments\n\t\tif (!hasCliArgs && !hasFolderURIs && !hasFileURIs) {\n\t\t\t// Force new window\n\t\t\tif (args[\"new-window\"] || forceProfile || forceTempProfile) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\tnoRecentEntry,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\tforceProfile,\n\t\t\t\t\tforceTempProfile,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// mac: open-file event received on startup\n\t\t\tif (macOpenFiles.length) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext: OpenContext.DOCK,\n\t\t\t\t\tcli: args,\n\t\t\t\t\turisToOpen: macOpenFiles.map((path) => {\n\t\t\t\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\n\t\t\t\t\t\treturn hasWorkspaceFileExtension(path)\n\t\t\t\t\t\t\t? { workspaceUri: URI.file(path) }\n\t\t\t\t\t\t\t: { fileUri: URI.file(path) };\n\t\t\t\t\t}),\n\t\t\t\t\tnoRecentEntry,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\t// remoteAuthority: will be determined based on macOpenFiles\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// default: read paths from cli\n\t\treturn windowsMainService.open({\n\t\t\tcontext,\n\t\t\tcli: args,\n\t\t\tforceNewWindow: args[\"new-window\"],\n\t\t\tdiffMode: args.diff,\n\t\t\tmergeMode: args.merge,\n\t\t\tnoRecentEntry,\n\t\t\twaitMarkerFileURI,\n\t\t\tgotoLineMode: args.goto,\n\t\t\tinitialStartup: true,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile,\n\t\t\tforceTempProfile,\n\t\t});\n\t}\n\n\tprivate afterWindowOpen(): void {\n\t\t// Windows: mutex\n\t\tthis.installMutex();\n\n\t\t// Remote Authorities\n\t\tprotocol.registerHttpProtocol(\n\t\t\tSchemas.vscodeRemoteResource,\n\t\t\t(request, callback) => {\n\t\t\t\tcallback({\n\t\t\t\t\turl: request.url.replace(\n\t\t\t\t\t\t/^vscode-remote-resource:/,\n\t\t\t\t\t\t\"http:\",\n\t\t\t\t\t),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\n\t\t// Start to fetch shell environment (if needed) after window has opened\n\t\t// Since this operation can take a long time, we want to warm it up while\n\t\t// the window is opening.\n\t\t// We also show an error to the user in case this fails.\n\t\tthis.resolveShellEnvironment(\n\t\t\tthis.environmentMainService.args,\n\t\t\tprocess.env,\n\t\t\ttrue,\n\t\t);\n\n\t\t// Crash reporter\n\t\tthis.updateCrashReporterEnablement();\n\n\t\t// macOS: rosetta translation warning\n\t\tif (isMacintosh && app.runningUnderARM64Translation) {\n\t\t\tthis.windowsMainService?.sendToFocused(\n\t\t\t\t\"vscode:showTranslatedBuildWarning\",\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async installMutex(): Promise<void> {\n\t\tconst win32MutexName = this.productService.win32MutexName;\n\t\tif (isWindows && win32MutexName) {\n\t\t\ttry {\n\t\t\t\tconst WindowsMutex = await import(\"@vscode/windows-mutex\");\n\t\t\t\tconst mutex = new WindowsMutex.Mutex(win32MutexName);\n\t\t\t\tEvent.once(this.lifecycleMainService.onWillShutdown)(() =>\n\t\t\t\t\tmutex.release(),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async resolveShellEnvironment(\n\t\targs: NativeParsedArgs,\n\t\tenv: IProcessEnvironment,\n\t\tnotifyOnError: boolean,\n\t): Promise<typeof process.env> {\n\t\ttry {\n\t\t\treturn await getResolvedShellEnv(\n\t\t\t\tthis.configurationService,\n\t\t\t\tthis.logService,\n\t\t\t\targs,\n\t\t\t\tenv,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tconst errorMessage = toErrorMessage(error);\n\t\t\tif (notifyOnError) {\n\t\t\t\tthis.windowsMainService?.sendToFocused(\n\t\t\t\t\t\"vscode:showResolveShellEnvError\",\n\t\t\t\t\terrorMessage,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(errorMessage);\n\t\t\t}\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tprivate async updateCrashReporterEnablement(): Promise<void> {\n\t\t// If enable-crash-reporter argv is undefined then this is a fresh start,\n\t\t// based on `telemetry.enableCrashreporter` settings, generate a UUID which\n\t\t// will be used as crash reporter id and also update the json file.\n\n\t\ttry {\n\t\t\tconst argvContent = await this.fileService.readFile(\n\t\t\t\tthis.environmentMainService.argvResource,\n\t\t\t);\n\t\t\tconst argvString = argvContent.value.toString();\n\t\t\tconst argvJSON = parse(argvString);\n\t\t\tconst telemetryLevel = getTelemetryLevel(this.configurationService);\n\t\t\tconst enableCrashReporter = telemetryLevel >= TelemetryLevel.CRASH;\n\n\t\t\t// Initial startup\n\t\t\tif (argvJSON[\"enable-crash-reporter\"] === undefined) {\n\t\t\t\tconst additionalArgvContent = [\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"\t// Allows to disable crash reporting.\",\n\t\t\t\t\t\"\t// Should restart the app if the value is changed.\",\n\t\t\t\t\t`\t\"enable-crash-reporter\": ${enableCrashReporter},`,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"\t// Unique id used for correlating crash reports sent from this instance.\",\n\t\t\t\t\t\"\t// Do not edit this value.\",\n\t\t\t\t\t`\t\"crash-reporter-id\": \"${generateUuid()}\"`,\n\t\t\t\t\t\"}\",\n\t\t\t\t];\n\t\t\t\tconst newArgvString = argvString\n\t\t\t\t\t.substring(0, argvString.length - 2)\n\t\t\t\t\t.concat(\",\\n\", additionalArgvContent.join(\"\\n\"));\n\n\t\t\t\tawait this.fileService.writeFile(\n\t\t\t\t\tthis.environmentMainService.argvResource,\n\t\t\t\t\tVSBuffer.fromString(newArgvString),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Subsequent startup: update crash reporter value if changed\n\t\t\telse {\n\t\t\t\tconst newArgvString = argvString.replace(\n\t\t\t\t\t/\"enable-crash-reporter\": .*,/,\n\t\t\t\t\t`\"enable-crash-reporter\": ${enableCrashReporter},`,\n\t\t\t\t);\n\t\t\t\tif (newArgvString !== argvString) {\n\t\t\t\t\tawait this.fileService.writeFile(\n\t\t\t\t\t\tthis.environmentMainService.argvResource,\n\t\t\t\t\t\tVSBuffer.fromString(newArgvString),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\n\t\t\t// Inform the user via notification\n\t\t\tthis.windowsMainService?.sendToFocused(\n\t\t\t\t\"vscode:showArgvParseWarning\",\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["event", "app"]
}
