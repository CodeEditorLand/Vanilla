import{hostname as ie,release as ne}from"os";import{getDesktopEnvironment as oe}from"../../../base/common/desktopEnvironmentInfo.js";import{toErrorMessage as se}from"../../../base/common/errorMessage.js";import{onUnexpectedError as A,setUnexpectedErrorHandler as ae}from"../../../base/common/errors.js";import{Emitter as ce}from"../../../base/common/event.js";import{combinedDisposable as me,Disposable as le,toDisposable as R}from"../../../base/common/lifecycle.js";import{Schemas as P}from"../../../base/common/network.js";import{isLinux as F}from"../../../base/common/platform.js";import{URI as b}from"../../../base/common/uri.js";import{getCodeDisplayProtocol as fe,getDisplayProtocol as pe}from"../../../base/node/osDisplayProtocolInfo.js";import{getOSReleaseInfo as Se}from"../../../base/node/osReleaseInfo.js";import{ProxyChannel as c,StaticRouter as N}from"../../../base/parts/ipc/common/ipc.js";import{once as ve,Server as de}from"../../../base/parts/ipc/node/ipc.mp.js";import"../../../base/parts/sandbox/node/electronTypes.js";import{localize as H}from"../../../nls.js";import{IChecksumService as O}from"../../../platform/checksum/common/checksumService.js";import{ChecksumService as ge}from"../../../platform/checksum/node/checksumService.js";import{IConfigurationService as ue}from"../../../platform/configuration/common/configuration.js";import{ConfigurationService as he}from"../../../platform/configuration/common/configurationService.js";import{IDiagnosticsService as W}from"../../../platform/diagnostics/common/diagnostics.js";import{DiagnosticsService as ye}from"../../../platform/diagnostics/node/diagnosticsService.js";import{IDownloadService as Ie}from"../../../platform/download/common/download.js";import{DownloadService as Pe}from"../../../platform/download/common/downloadService.js";import{INativeEnvironmentService as Ce}from"../../../platform/environment/common/environment.js";import{NativeEnvironmentService as we}from"../../../platform/environment/node/environmentService.js";import{GlobalExtensionEnablementService as De}from"../../../platform/extensionManagement/common/extensionEnablementService.js";import{ExtensionGalleryService as Ee}from"../../../platform/extensionManagement/common/extensionGalleryService.js";import{IExtensionGalleryService as Ue,IExtensionManagementService as xe,IExtensionTipsService as V,IGlobalExtensionEnablementService as Le}from"../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionManagementChannel as Me,ExtensionTipsChannel as Te}from"../../../platform/extensionManagement/common/extensionManagementIpc.js";import{IExtensionsProfileScannerService as ke}from"../../../platform/extensionManagement/common/extensionsProfileScannerService.js";import{IExtensionsScannerService as _e}from"../../../platform/extensionManagement/common/extensionsScannerService.js";import{ExtensionStorageService as Ae,IExtensionStorageService as Re}from"../../../platform/extensionManagement/common/extensionStorage.js";import{ExtensionManagementService as Fe,INativeServerExtensionManagementService as be}from"../../../platform/extensionManagement/node/extensionManagementService.js";import{ExtensionSignatureVerificationService as Ne,IExtensionSignatureVerificationService as He}from"../../../platform/extensionManagement/node/extensionSignatureVerificationService.js";import{ExtensionsProfileScannerService as Oe}from"../../../platform/extensionManagement/node/extensionsProfileScannerService.js";import{ExtensionsScannerService as We}from"../../../platform/extensionManagement/node/extensionsScannerService.js";import{ExtensionTipsService as Ve}from"../../../platform/extensionManagement/node/extensionTipsService.js";import{IExtensionRecommendationNotificationService as ze}from"../../../platform/extensionRecommendations/common/extensionRecommendations.js";import{ExtensionRecommendationNotificationServiceChannelClient as qe}from"../../../platform/extensionRecommendations/common/extensionRecommendationsIpc.js";import{DiskFileSystemProviderClient as Ge,LOCAL_FILE_SYSTEM_CHANNEL_NAME as je}from"../../../platform/files/common/diskFileSystemProviderClient.js";import{IFileService as Ke}from"../../../platform/files/common/files.js";import{FileService as Be}from"../../../platform/files/common/fileService.js";import{DiskFileSystemProvider as Je}from"../../../platform/files/node/diskFileSystemProvider.js";import{SyncDescriptor as t}from"../../../platform/instantiation/common/descriptors.js";import{IInstantiationService as Ye}from"../../../platform/instantiation/common/instantiation.js";import{InstantiationService as $e}from"../../../platform/instantiation/common/instantiationService.js";import{ServiceCollection as Qe}from"../../../platform/instantiation/common/serviceCollection.js";import{IMainProcessService as Xe,MainProcessService as Ze}from"../../../platform/ipc/common/mainProcessService.js";import{ILanguagePackService as z}from"../../../platform/languagePacks/common/languagePacks.js";import{NativeLanguagePackService as er}from"../../../platform/languagePacks/node/languagePacks.js";import{ISharedProcessLifecycleService as rr,SharedProcessLifecycleService as tr}from"../../../platform/lifecycle/node/sharedProcessLifecycleService.js";import{ConsoleLogger as ir,ILoggerService as nr,ILogService as U}from"../../../platform/log/common/log.js";import{LoggerChannelClient as or}from"../../../platform/log/common/logIpc.js";import{LogService as sr}from"../../../platform/log/common/logService.js";import{INativeHostService as ar}from"../../../platform/native/common/native.js";import{NativeHostService as cr}from"../../../platform/native/common/nativeHostService.js";import{IPolicyService as mr,NullPolicyService as lr}from"../../../platform/policy/common/policy.js";import{PolicyChannelClient as fr}from"../../../platform/policy/common/policyIpc.js";import pr from"../../../platform/product/common/product.js";import{IProductService as Sr}from"../../../platform/product/common/productService.js";import{IV8InspectProfilingService as q}from"../../../platform/profiling/common/profiling.js";import{InspectProfilingService as vr}from"../../../platform/profiling/node/profilingService.js";import{RemoteConnectionType as dr}from"../../../platform/remote/common/remoteAuthorityResolver.js";import{IRemoteSocketFactoryService as gr,RemoteSocketFactoryService as ur}from"../../../platform/remote/common/remoteSocketFactoryService.js";import{ipcSharedProcessTunnelChannelName as hr,ISharedProcessTunnelService as G}from"../../../platform/remote/common/sharedProcessTunnelService.js";import{nodeSocketFactory as yr}from"../../../platform/remote/node/nodeSocketFactory.js";import{IRemoteTunnelService as j}from"../../../platform/remoteTunnel/common/remoteTunnel.js";import{RemoteTunnelService as Ir}from"../../../platform/remoteTunnel/node/remoteTunnelService.js";import{IRequestService as Pr}from"../../../platform/request/common/request.js";import{RequestService as Cr}from"../../../platform/request/electron-utility/requestService.js";import{SharedProcessLifecycle as x,SharedProcessRawConnection as wr}from"../../../platform/sharedProcess/common/sharedProcess.js";import"../../../platform/sharedProcess/node/sharedProcess.js";import{ISignService as Dr}from"../../../platform/sign/common/sign.js";import{SignService as Er}from"../../../platform/sign/node/signService.js";import{IStorageService as Ur}from"../../../platform/storage/common/storage.js";import{RemoteStorageService as xr}from"../../../platform/storage/common/storageService.js";import{resolveCommonProperties as Lr}from"../../../platform/telemetry/common/commonProperties.js";import{ICustomEndpointTelemetryService as K,ITelemetryService as B}from"../../../platform/telemetry/common/telemetry.js";import{TelemetryAppenderChannel as Mr}from"../../../platform/telemetry/common/telemetryIpc.js";import{TelemetryLogAppender as Tr}from"../../../platform/telemetry/common/telemetryLogAppender.js";import{TelemetryService as kr}from"../../../platform/telemetry/common/telemetryService.js";import{getPiiPathsFromEnvironment as _r,isInternalTelemetry as Ar,isLoggingOnly as Rr,NullAppender as Fr,NullTelemetryService as br,supportsTelemetry as Nr}from"../../../platform/telemetry/common/telemetryUtils.js";import{OneDataSystemAppender as Hr}from"../../../platform/telemetry/node/1dsAppender.js";import{CustomEndpointTelemetryService as Or}from"../../../platform/telemetry/node/customEndpointTelemetryService.js";import{ISharedTunnelsService as Wr}from"../../../platform/tunnel/common/tunnel.js";import{SharedProcessTunnelService as Vr}from"../../../platform/tunnel/node/sharedProcessTunnelService.js";import{SharedTunnelsService as zr}from"../../../platform/tunnel/node/tunnelService.js";import{IUriIdentityService as qr}from"../../../platform/uriIdentity/common/uriIdentity.js";import{UriIdentityService as Gr}from"../../../platform/uriIdentity/common/uriIdentityService.js";import{FileUserDataProvider as jr}from"../../../platform/userData/common/fileUserDataProvider.js";import{IUserDataProfilesService as L}from"../../../platform/userDataProfile/common/userDataProfile.js";import{UserDataProfilesService as Kr}from"../../../platform/userDataProfile/common/userDataProfileIpc.js";import{IUserDataProfileStorageService as Br}from"../../../platform/userDataProfile/common/userDataProfileStorageService.js";import{SharedProcessUserDataProfileStorageService as Jr}from"../../../platform/userDataProfile/node/userDataProfileStorageService.js";import{IgnoredExtensionsManagementService as Yr,IIgnoredExtensionsManagementService as $r}from"../../../platform/userDataSync/common/ignoredExtensions.js";import{IUserDataSyncEnablementService as Qr,IUserDataSyncLocalStoreService as Xr,IUserDataSyncLogService as Zr,IUserDataSyncResourceProviderService as J,IUserDataSyncService as Y,IUserDataSyncStoreManagementService as $,IUserDataSyncStoreService as et,IUserDataSyncUtilService as rt,registerConfiguration as tt}from"../../../platform/userDataSync/common/userDataSync.js";import{IUserDataSyncAccountService as Q,UserDataSyncAccountService as it}from"../../../platform/userDataSync/common/userDataSyncAccount.js";import{UserDataSyncEnablementService as nt}from"../../../platform/userDataSync/common/userDataSyncEnablementService.js";import{UserDataSyncAccountServiceChannel as ot,UserDataSyncStoreManagementServiceChannel as st}from"../../../platform/userDataSync/common/userDataSyncIpc.js";import{UserDataSyncLocalStoreService as at}from"../../../platform/userDataSync/common/userDataSyncLocalStoreService.js";import{UserDataSyncLogService as ct}from"../../../platform/userDataSync/common/userDataSyncLog.js";import{IUserDataSyncMachinesService as X,UserDataSyncMachinesService as mt}from"../../../platform/userDataSync/common/userDataSyncMachines.js";import{UserDataSyncResourceProviderService as lt}from"../../../platform/userDataSync/common/userDataSyncResourceProvider.js";import{UserDataSyncService as ft}from"../../../platform/userDataSync/common/userDataSyncService.js";import{UserDataSyncServiceChannel as pt}from"../../../platform/userDataSync/common/userDataSyncServiceIpc.js";import{UserDataSyncStoreManagementService as St,UserDataSyncStoreService as vt}from"../../../platform/userDataSync/common/userDataSyncStoreService.js";import{UserDataAutoSyncService as dt}from"../../../platform/userDataSync/node/userDataAutoSyncService.js";import{ActiveWindowManager as gt}from"../../../platform/windows/node/windowTracker.js";import{CodeCacheCleaner as ut}from"./contrib/codeCacheCleaner.js";import{ExtensionsContributions as ht}from"./contrib/extensions.js";import{LanguagePackCachedDataCleaner as yt}from"./contrib/languagePackCachedDataCleaner.js";import{LocalizationsUpdater as It}from"./contrib/localizationsUpdater.js";import{LogsDataCleaner as Pt}from"./contrib/logsDataCleaner.js";import{UnusedWorkspaceStorageDataCleaner as Ct}from"./contrib/storageDataCleaner.js";import{UserDataProfilesCleaner as wt}from"./contrib/userDataProfilesCleaner.js";class Dt extends le{constructor(e){super();this.configuration=e;this.registerListeners()}server=this._register(new de(this));lifecycleService=void 0;onDidWindowConnectRaw=this._register(new ce);registerListeners(){let e=!1;const r=()=>{e||(e=!0,this.lifecycleService?.fireOnWillShutdown(),this.dispose())};process.once("exit",r),ve(process.parentPort,x.exit,r)}async init(){const e=await this.initServices();tt(),e.invokeFunction(r=>{const n=r.get(U),i=r.get(B),m=r.get(L);n.trace("sharedProcess configuration",JSON.stringify(this.configuration)),this.initChannels(r),this.registerErrorHandler(n),this.reportProfilesInfo(i,m),this._register(m.onDidChangeProfiles(()=>this.reportProfilesInfo(i,m))),this.reportClientOSInfo(i,n)}),this._register(me(e.createInstance(ut,this.configuration.codeCachePath),e.createInstance(yt),e.createInstance(Ct),e.createInstance(Pt),e.createInstance(It),e.createInstance(ht),e.createInstance(wt)))}async initServices(){const e=new Qe,r={_serviceBrand:void 0,...pr};e.set(Sr,r);const n=new N(s=>s==="main"),i=new Ze(this.server,n);e.set(Xe,i);const m=this.configuration.policiesData?new fr(this.configuration.policiesData,i.getChannel("policy")):new lr;e.set(mr,m);const o=new we(this.configuration.args,r);e.set(Ce,o);const l=new or(void 0,this.configuration.logLevel,o.logsHome,this.configuration.loggers.map(s=>({...s,resource:b.revive(s.resource)})),i.getChannel("logger"));e.set(nr,l);const u=this._register(l.createLogger("sharedprocess",{name:H("sharedLog","Shared")})),C=this._register(new ir(u.getLevel())),a=this._register(new sr(u,[C]));e.set(U,a),this.lifecycleService=this._register(new tr(a)),e.set(rr,this.lifecycleService);const f=this._register(new Be(a));e.set(Ke,f);const w=this._register(new Je(a));f.registerProvider(P.file,w);const h=new Gr(f);e.set(qr,h);const p=this._register(new Kr(this.configuration.profiles.all,b.revive(this.configuration.profiles.home).with({scheme:o.userRoamingDataHome.scheme}),i.getChannel("userDataProfiles")));e.set(L,p);const D=this._register(new jr(P.file,this._register(new Ge(i.getChannel(je),{pathCaseSensitive:F})),P.vscodeUserData,p,h,a));f.registerProvider(P.vscodeUserData,D);const S=this._register(new he(p.defaultProfile.settingsResource,f,m,a));e.set(ue,S);const E=new xr(void 0,{defaultProfile:p.defaultProfile,currentProfile:p.defaultProfile},i,o);e.set(Ur,E),this._register(R(()=>E.flush())),await Promise.all([S.initialize(),E.initialize()]);const Z=l.createLogger("network-shared",{name:H("network-shared","Network (Shared)"),hidden:!0}),M=new Cr(Z,S,o,a);e.set(Pr,M),e.set(O,new t(ge,void 0,!1)),e.set(q,new t(vr,void 0,!1));const T=new cr(-1,i);e.set(ar,T),e.set(Ie,new t(Pe,void 0,!0));const ee=this._register(new gt(T)),re=new N(s=>ee.getActiveClientId().then(I=>s===I));e.set(ze,new qe(this.server.getChannel("extensionRecommendationNotification",re)));let y;const v=[],k=Ar(r,S);if(Nr(r,o)){const s=new Tr(a,l,o,r);if(v.push(s),!Rr(r,o)&&r.aiConfig?.ariaKey){const I=new Hr(M,k,"monacoworkbench",null,r.aiConfig.ariaKey);this._register(R(()=>I.flush())),v.push(I)}y=new kr({appenders:v,commonProperties:Lr(ne(),ie(),process.arch,r.commit,r.version,this.configuration.machineId,this.configuration.sqmId,this.configuration.devDeviceId,k),sendErrorTelemetry:!0,piiPaths:_r(o)},S,r)}else{y=br;const s=Fr;v.push(s)}this.server.registerChannel("telemetryAppender",new Mr(v)),e.set(B,y);const te=new Or(S,y,a,l,o,r);e.set(K,te),e.set(ke,new t(Oe,void 0,!0)),e.set(_e,new t(We,void 0,!0)),e.set(He,new t(Ne,void 0,!0)),e.set(be,new t(Fe,void 0,!0)),e.set(Ue,new t(Ee,void 0,!0)),e.set(V,new t(Ve,void 0,!1)),e.set(z,new t(er,void 0,!1)),e.set(W,new t(ye,void 0,!1)),e.set(Q,new t(it,void 0,!0)),e.set(Zr,new t(ct,void 0,!0)),e.set(rt,c.toService(this.server.getChannel("userDataSyncUtil",s=>s.ctx!=="main"))),e.set(Le,new t(De,void 0,!1)),e.set($r,new t(Yr,void 0,!0)),e.set(Re,new t(Ae)),e.set($,new t(St,void 0,!0)),e.set(et,new t(vt,void 0,!0)),e.set(X,new t(mt,void 0,!0)),e.set(Xr,new t(at,void 0,!1)),e.set(Qr,new t(nt,void 0,!0)),e.set(Y,new t(ft,void 0,!1)),e.set(Br,new t(Jr,void 0,!0)),e.set(J,new t(lt,void 0,!0)),e.set(Dr,new t(Er,void 0,!1));const _=new ur;return e.set(gr,_),_.register(dr.WebSocket,yr),e.set(Wr,new t(zr)),e.set(G,new t(Vr)),e.set(j,new t(Ir)),new $e(e)}initChannels(e){const r=new Me(e.get(xe),()=>null);this.server.registerChannel("extensions",r);const n=c.fromService(e.get(z),this._store);this.server.registerChannel("languagePacks",n);const i=c.fromService(e.get(W),this._store);this.server.registerChannel("diagnostics",i);const m=new Te(e.get(V));this.server.registerChannel("extensionTipsService",m);const o=c.fromService(e.get(O),this._store);this.server.registerChannel("checksum",o);const l=c.fromService(e.get(q),this._store);this.server.registerChannel("v8InspectProfiling",l);const u=c.fromService(e.get(X),this._store);this.server.registerChannel("userDataSyncMachines",u);const C=c.fromService(e.get(K),this._store);this.server.registerChannel("customEndpointTelemetry",C);const a=new ot(e.get(Q));this.server.registerChannel("userDataSyncAccount",a);const f=new st(e.get($));this.server.registerChannel("userDataSyncStoreManagement",f);const w=new pt(e.get(Y),e.get(L),e.get(U));this.server.registerChannel("userDataSync",w);const h=this._register(e.get(Ye).createInstance(dt));this.server.registerChannel("userDataAutoSync",c.fromService(h,this._store)),this.server.registerChannel("IUserDataSyncResourceProviderService",c.fromService(e.get(J),this._store));const p=c.fromService(e.get(G),this._store);this.server.registerChannel(hr,p);const D=c.fromService(e.get(j),this._store);this.server.registerChannel("remoteTunnel",D)}registerErrorHandler(e){process.on("uncaughtException",r=>A(r)),process.on("unhandledRejection",r=>A(r)),ae(r=>{const n=se(r,!0);n&&e.error(`[uncaught exception in sharedProcess]: ${n}`)})}reportProfilesInfo(e,r){e.publicLog2("profilesInfo",{count:r.profiles.length})}async reportClientOSInfo(e,r){if(F){const[n,i]=await Promise.all([Se(r.error.bind(r)),pe(r.error.bind(r))]),m=oe(),o=fe(i,this.configuration.args["ozone-platform"]);n&&e.publicLog2("clientPlatformInfo",{platformId:n.id,platformVersionId:n.version_id,platformIdLike:n.id_like,desktopEnvironment:m,displayProtocol:i,codeDisplayProtocol:o})}}handledClientConnection(e){if(e.data!==wr.response)return!1;const r=e.ports.at(0);return r?(this.onDidWindowConnectRaw.fire(r),!0):!1}}async function Et(d){try{const g=new Dt(d);process.parentPort.postMessage(x.ipcReady),await g.init(),process.parentPort.postMessage(x.initDone)}catch(g){process.parentPort.postMessage({error:g.toString()})}}const Ut=setTimeout(()=>{process.parentPort.postMessage({warning:"[SharedProcess] did not receive configuration within 30s..."})},3e4);process.parentPort.once("message",d=>{clearTimeout(Ut),Et(d.data)});export{Et as main};
