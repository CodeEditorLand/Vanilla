import{hostname as re,release as te}from"os";import"../../../base/parts/sandbox/node/electronTypes.js";import{toErrorMessage as ie}from"../../../base/common/errorMessage.js";import{onUnexpectedError as A,setUnexpectedErrorHandler as ne}from"../../../base/common/errors.js";import{combinedDisposable as oe,Disposable as se,toDisposable as R}from"../../../base/common/lifecycle.js";import{Schemas as P}from"../../../base/common/network.js";import{URI as F}from"../../../base/common/uri.js";import{Emitter as ae}from"../../../base/common/event.js";import{ProxyChannel as c,StaticRouter as b}from"../../../base/parts/ipc/common/ipc.js";import{Server as ce,once as me}from"../../../base/parts/ipc/node/ipc.mp.js";import{CodeCacheCleaner as le}from"./contrib/codeCacheCleaner.js";import{LanguagePackCachedDataCleaner as fe}from"./contrib/languagePackCachedDataCleaner.js";import{LocalizationsUpdater as pe}from"./contrib/localizationsUpdater.js";import{LogsDataCleaner as Se}from"./contrib/logsDataCleaner.js";import{UnusedWorkspaceStorageDataCleaner as ve}from"./contrib/storageDataCleaner.js";import{IChecksumService as N}from"../../../platform/checksum/common/checksumService.js";import{ChecksumService as de}from"../../../platform/checksum/node/checksumService.js";import{IConfigurationService as ge}from"../../../platform/configuration/common/configuration.js";import{ConfigurationService as ue}from"../../../platform/configuration/common/configurationService.js";import{IDiagnosticsService as H}from"../../../platform/diagnostics/common/diagnostics.js";import{DiagnosticsService as he}from"../../../platform/diagnostics/node/diagnosticsService.js";import{IDownloadService as ye}from"../../../platform/download/common/download.js";import{DownloadService as Ie}from"../../../platform/download/common/downloadService.js";import{INativeEnvironmentService as Pe}from"../../../platform/environment/common/environment.js";import{GlobalExtensionEnablementService as Ce}from"../../../platform/extensionManagement/common/extensionEnablementService.js";import{ExtensionGalleryService as we}from"../../../platform/extensionManagement/common/extensionGalleryService.js";import{IExtensionGalleryService as De,IExtensionManagementService as Ee,IExtensionTipsService as O,IGlobalExtensionEnablementService as Ue}from"../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionSignatureVerificationService as xe,IExtensionSignatureVerificationService as Me}from"../../../platform/extensionManagement/node/extensionSignatureVerificationService.js";import{ExtensionManagementChannel as Le,ExtensionTipsChannel as Te}from"../../../platform/extensionManagement/common/extensionManagementIpc.js";import{ExtensionManagementService as _e,INativeServerExtensionManagementService as ke}from"../../../platform/extensionManagement/node/extensionManagementService.js";import{IExtensionRecommendationNotificationService as Ae}from"../../../platform/extensionRecommendations/common/extensionRecommendations.js";import{IFileService as Re}from"../../../platform/files/common/files.js";import{FileService as Fe}from"../../../platform/files/common/fileService.js";import{DiskFileSystemProvider as be}from"../../../platform/files/node/diskFileSystemProvider.js";import{SyncDescriptor as t}from"../../../platform/instantiation/common/descriptors.js";import{IInstantiationService as Ne}from"../../../platform/instantiation/common/instantiation.js";import{InstantiationService as He}from"../../../platform/instantiation/common/instantiationService.js";import{ServiceCollection as Oe}from"../../../platform/instantiation/common/serviceCollection.js";import{ILanguagePackService as W}from"../../../platform/languagePacks/common/languagePacks.js";import{NativeLanguagePackService as We}from"../../../platform/languagePacks/node/languagePacks.js";import{ConsoleLogger as Ve,ILoggerService as ze,ILogService as U}from"../../../platform/log/common/log.js";import{LoggerChannelClient as qe}from"../../../platform/log/common/logIpc.js";import Ge from"../../../platform/product/common/product.js";import{IProductService as je}from"../../../platform/product/common/productService.js";import{IRequestService as Ke}from"../../../platform/request/common/request.js";import"../../../platform/sharedProcess/node/sharedProcess.js";import{IStorageService as Be}from"../../../platform/storage/common/storage.js";import{resolveCommonProperties as Je}from"../../../platform/telemetry/common/commonProperties.js";import{ICustomEndpointTelemetryService as V,ITelemetryService as z}from"../../../platform/telemetry/common/telemetry.js";import{TelemetryAppenderChannel as Ye}from"../../../platform/telemetry/common/telemetryIpc.js";import{TelemetryLogAppender as $e}from"../../../platform/telemetry/common/telemetryLogAppender.js";import{TelemetryService as Qe}from"../../../platform/telemetry/common/telemetryService.js";import{supportsTelemetry as Xe,NullAppender as Ze,NullTelemetryService as er,getPiiPathsFromEnvironment as rr,isInternalTelemetry as tr,isLoggingOnly as ir}from"../../../platform/telemetry/common/telemetryUtils.js";import{CustomEndpointTelemetryService as nr}from"../../../platform/telemetry/node/customEndpointTelemetryService.js";import{ExtensionStorageService as or,IExtensionStorageService as sr}from"../../../platform/extensionManagement/common/extensionStorage.js";import{IgnoredExtensionsManagementService as ar,IIgnoredExtensionsManagementService as cr}from"../../../platform/userDataSync/common/ignoredExtensions.js";import{IUserDataSyncLocalStoreService as mr,IUserDataSyncLogService as lr,IUserDataSyncEnablementService as fr,IUserDataSyncService as q,IUserDataSyncStoreManagementService as G,IUserDataSyncStoreService as pr,IUserDataSyncUtilService as Sr,registerConfiguration as vr,IUserDataSyncResourceProviderService as j}from"../../../platform/userDataSync/common/userDataSync.js";import{IUserDataSyncAccountService as K,UserDataSyncAccountService as dr}from"../../../platform/userDataSync/common/userDataSyncAccount.js";import{UserDataSyncLocalStoreService as gr}from"../../../platform/userDataSync/common/userDataSyncLocalStoreService.js";import{UserDataSyncAccountServiceChannel as ur,UserDataSyncStoreManagementServiceChannel as hr}from"../../../platform/userDataSync/common/userDataSyncIpc.js";import{UserDataSyncLogService as yr}from"../../../platform/userDataSync/common/userDataSyncLog.js";import{IUserDataSyncMachinesService as B,UserDataSyncMachinesService as Ir}from"../../../platform/userDataSync/common/userDataSyncMachines.js";import{UserDataSyncEnablementService as Pr}from"../../../platform/userDataSync/common/userDataSyncEnablementService.js";import{UserDataSyncService as Cr}from"../../../platform/userDataSync/common/userDataSyncService.js";import{UserDataSyncServiceChannel as wr}from"../../../platform/userDataSync/common/userDataSyncServiceIpc.js";import{UserDataSyncStoreManagementService as Dr,UserDataSyncStoreService as Er}from"../../../platform/userDataSync/common/userDataSyncStoreService.js";import{IUserDataProfileStorageService as Ur}from"../../../platform/userDataProfile/common/userDataProfileStorageService.js";import{SharedProcessUserDataProfileStorageService as xr}from"../../../platform/userDataProfile/node/userDataProfileStorageService.js";import{ActiveWindowManager as Mr}from"../../../platform/windows/node/windowTracker.js";import{ISignService as Lr}from"../../../platform/sign/common/sign.js";import{SignService as Tr}from"../../../platform/sign/node/signService.js";import{ISharedTunnelsService as _r}from"../../../platform/tunnel/common/tunnel.js";import{SharedTunnelsService as kr}from"../../../platform/tunnel/node/tunnelService.js";import{ipcSharedProcessTunnelChannelName as Ar,ISharedProcessTunnelService as J}from"../../../platform/remote/common/sharedProcessTunnelService.js";import{SharedProcessTunnelService as Rr}from"../../../platform/tunnel/node/sharedProcessTunnelService.js";import{IUriIdentityService as Fr}from"../../../platform/uriIdentity/common/uriIdentity.js";import{UriIdentityService as br}from"../../../platform/uriIdentity/common/uriIdentityService.js";import{isLinux as Y}from"../../../base/common/platform.js";import{FileUserDataProvider as Nr}from"../../../platform/userData/common/fileUserDataProvider.js";import{DiskFileSystemProviderClient as Hr,LOCAL_FILE_SYSTEM_CHANNEL_NAME as Or}from"../../../platform/files/common/diskFileSystemProviderClient.js";import{InspectProfilingService as Wr}from"../../../platform/profiling/node/profilingService.js";import{IV8InspectProfilingService as $}from"../../../platform/profiling/common/profiling.js";import{IExtensionsScannerService as Vr}from"../../../platform/extensionManagement/common/extensionsScannerService.js";import{ExtensionsScannerService as zr}from"../../../platform/extensionManagement/node/extensionsScannerService.js";import{IUserDataProfilesService as x}from"../../../platform/userDataProfile/common/userDataProfile.js";import{IExtensionsProfileScannerService as qr}from"../../../platform/extensionManagement/common/extensionsProfileScannerService.js";import{PolicyChannelClient as Gr}from"../../../platform/policy/common/policyIpc.js";import{IPolicyService as jr,NullPolicyService as Kr}from"../../../platform/policy/common/policy.js";import{UserDataProfilesService as Br}from"../../../platform/userDataProfile/common/userDataProfileIpc.js";import{OneDataSystemAppender as Jr}from"../../../platform/telemetry/node/1dsAppender.js";import{UserDataProfilesCleaner as Yr}from"./contrib/userDataProfilesCleaner.js";import{IRemoteTunnelService as Q}from"../../../platform/remoteTunnel/common/remoteTunnel.js";import{UserDataSyncResourceProviderService as $r}from"../../../platform/userDataSync/common/userDataSyncResourceProvider.js";import{ExtensionsContributions as Qr}from"./contrib/extensions.js";import{localize as Xr}from"../../../nls.js";import{LogService as Zr}from"../../../platform/log/common/logService.js";import{ISharedProcessLifecycleService as et,SharedProcessLifecycleService as rt}from"../../../platform/lifecycle/node/sharedProcessLifecycleService.js";import{RemoteTunnelService as tt}from"../../../platform/remoteTunnel/node/remoteTunnelService.js";import{ExtensionsProfileScannerService as it}from"../../../platform/extensionManagement/node/extensionsProfileScannerService.js";import{ExtensionRecommendationNotificationServiceChannelClient as nt}from"../../../platform/extensionRecommendations/common/extensionRecommendationsIpc.js";import{INativeHostService as ot}from"../../../platform/native/common/native.js";import{NativeHostService as st}from"../../../platform/native/common/nativeHostService.js";import{UserDataAutoSyncService as at}from"../../../platform/userDataSync/node/userDataAutoSyncService.js";import{ExtensionTipsService as ct}from"../../../platform/extensionManagement/node/extensionTipsService.js";import{IMainProcessService as mt,MainProcessService as lt}from"../../../platform/ipc/common/mainProcessService.js";import{RemoteStorageService as ft}from"../../../platform/storage/common/storageService.js";import{IRemoteSocketFactoryService as pt,RemoteSocketFactoryService as St}from"../../../platform/remote/common/remoteSocketFactoryService.js";import{RemoteConnectionType as vt}from"../../../platform/remote/common/remoteAuthorityResolver.js";import{nodeSocketFactory as dt}from"../../../platform/remote/node/nodeSocketFactory.js";import{NativeEnvironmentService as gt}from"../../../platform/environment/node/environmentService.js";import{SharedProcessRawConnection as ut,SharedProcessLifecycle as M}from"../../../platform/sharedProcess/common/sharedProcess.js";import{getOSReleaseInfo as ht}from"../../../base/node/osReleaseInfo.js";import{getDesktopEnvironment as yt}from"../../../base/common/desktopEnvironmentInfo.js";import{getCodeDisplayProtocol as It,getDisplayProtocol as Pt}from"../../../base/node/osDisplayProtocolInfo.js";import{RequestService as Ct}from"../../../platform/request/electron-utility/requestService.js";class wt extends se{constructor(e){super();this.configuration=e;this.registerListeners()}server=this._register(new ce(this));lifecycleService=void 0;onDidWindowConnectRaw=this._register(new ae);registerListeners(){let e=!1;const r=()=>{e||(e=!0,this.lifecycleService?.fireOnWillShutdown(),this.dispose())};process.once("exit",r),me(process.parentPort,M.exit,r)}async init(){const e=await this.initServices();vr(),e.invokeFunction(r=>{const n=r.get(U),i=r.get(z),m=r.get(x);n.trace("sharedProcess configuration",JSON.stringify(this.configuration)),this.initChannels(r),this.registerErrorHandler(n),this.reportProfilesInfo(i,m),this._register(m.onDidChangeProfiles(()=>this.reportProfilesInfo(i,m))),this.reportClientOSInfo(i,n)}),this._register(oe(e.createInstance(le,this.configuration.codeCachePath),e.createInstance(fe),e.createInstance(ve),e.createInstance(Se),e.createInstance(pe),e.createInstance(Qr),e.createInstance(Yr)))}async initServices(){const e=new Oe,r={_serviceBrand:void 0,...Ge};e.set(je,r);const n=new b(s=>s==="main"),i=new lt(this.server,n);e.set(mt,i);const m=this.configuration.policiesData?new Gr(this.configuration.policiesData,i.getChannel("policy")):new Kr;e.set(jr,m);const o=new gt(this.configuration.args,r);e.set(Pe,o);const p=new qe(void 0,this.configuration.logLevel,o.logsHome,this.configuration.loggers.map(s=>({...s,resource:F.revive(s.resource)})),i.getChannel("logger"));e.set(ze,p);const u=this._register(p.createLogger("sharedprocess",{name:Xr("sharedLog","Shared")})),C=this._register(new Ve(u.getLevel())),a=this._register(new Zr(u,[C]));e.set(U,a),this.lifecycleService=this._register(new rt(a)),e.set(et,this.lifecycleService);const l=this._register(new Fe(a));e.set(Re,l);const w=this._register(new be(a));l.registerProvider(P.file,w);const h=new br(l);e.set(Fr,h);const f=this._register(new Br(this.configuration.profiles.all,F.revive(this.configuration.profiles.home).with({scheme:o.userRoamingDataHome.scheme}),i.getChannel("userDataProfiles")));e.set(x,f);const D=this._register(new Nr(P.file,this._register(new Hr(i.getChannel(Or),{pathCaseSensitive:Y})),P.vscodeUserData,f,h,a));l.registerProvider(P.vscodeUserData,D);const S=this._register(new ue(f.defaultProfile.settingsResource,l,m,a));e.set(ge,S);const E=new ft(void 0,{defaultProfile:f.defaultProfile,currentProfile:f.defaultProfile},i,o);e.set(Be,E),this._register(R(()=>E.flush())),await Promise.all([S.initialize(),E.initialize()]);const L=new Ct(S,o,a);e.set(Ke,L),e.set(N,new t(de,void 0,!1)),e.set($,new t(Wr,void 0,!1));const T=new st(-1,i);e.set(ot,T),e.set(ye,new t(Ie,void 0,!0));const X=this._register(new Mr(T)),Z=new b(s=>X.getActiveClientId().then(I=>s===I));e.set(Ae,new nt(this.server.getChannel("extensionRecommendationNotification",Z)));let y;const v=[],_=tr(r,S);if(Xe(r,o)){const s=new $e(a,p,o,r);if(v.push(s),!ir(r,o)&&r.aiConfig?.ariaKey){const I=new Jr(L,_,"monacoworkbench",null,r.aiConfig.ariaKey);this._register(R(()=>I.flush())),v.push(I)}y=new Qe({appenders:v,commonProperties:Je(te(),re(),process.arch,r.commit,r.version,this.configuration.machineId,this.configuration.sqmId,this.configuration.devDeviceId,_),sendErrorTelemetry:!0,piiPaths:rr(o)},S,r)}else{y=er;const s=Ze;v.push(s)}this.server.registerChannel("telemetryAppender",new Ye(v)),e.set(z,y);const ee=new nr(S,y,a,p,o,r);e.set(V,ee),e.set(qr,new t(it,void 0,!0)),e.set(Vr,new t(zr,void 0,!0)),e.set(Me,new t(xe,void 0,!0)),e.set(ke,new t(_e,void 0,!0)),e.set(De,new t(we,void 0,!0)),e.set(O,new t(ct,void 0,!1)),e.set(W,new t(We,void 0,!1)),e.set(H,new t(he,void 0,!1)),e.set(K,new t(dr,void 0,!0)),e.set(lr,new t(yr,void 0,!0)),e.set(Sr,c.toService(this.server.getChannel("userDataSyncUtil",s=>s.ctx!=="main"))),e.set(Ue,new t(Ce,void 0,!1)),e.set(cr,new t(ar,void 0,!0)),e.set(sr,new t(or)),e.set(G,new t(Dr,void 0,!0)),e.set(pr,new t(Er,void 0,!0)),e.set(B,new t(Ir,void 0,!0)),e.set(mr,new t(gr,void 0,!1)),e.set(fr,new t(Pr,void 0,!0)),e.set(q,new t(Cr,void 0,!1)),e.set(Ur,new t(xr,void 0,!0)),e.set(j,new t($r,void 0,!0)),e.set(Lr,new t(Tr,void 0,!1));const k=new St;return e.set(pt,k),k.register(vt.WebSocket,dt),e.set(_r,new t(kr)),e.set(J,new t(Rr)),e.set(Q,new t(tt)),new He(e)}initChannels(e){const r=new Le(e.get(Ee),()=>null);this.server.registerChannel("extensions",r);const n=c.fromService(e.get(W),this._store);this.server.registerChannel("languagePacks",n);const i=c.fromService(e.get(H),this._store);this.server.registerChannel("diagnostics",i);const m=new Te(e.get(O));this.server.registerChannel("extensionTipsService",m);const o=c.fromService(e.get(N),this._store);this.server.registerChannel("checksum",o);const p=c.fromService(e.get($),this._store);this.server.registerChannel("v8InspectProfiling",p);const u=c.fromService(e.get(B),this._store);this.server.registerChannel("userDataSyncMachines",u);const C=c.fromService(e.get(V),this._store);this.server.registerChannel("customEndpointTelemetry",C);const a=new ur(e.get(K));this.server.registerChannel("userDataSyncAccount",a);const l=new hr(e.get(G));this.server.registerChannel("userDataSyncStoreManagement",l);const w=new wr(e.get(q),e.get(x),e.get(U));this.server.registerChannel("userDataSync",w);const h=this._register(e.get(Ne).createInstance(at));this.server.registerChannel("userDataAutoSync",c.fromService(h,this._store)),this.server.registerChannel("IUserDataSyncResourceProviderService",c.fromService(e.get(j),this._store));const f=c.fromService(e.get(J),this._store);this.server.registerChannel(Ar,f);const D=c.fromService(e.get(Q),this._store);this.server.registerChannel("remoteTunnel",D)}registerErrorHandler(e){process.on("uncaughtException",r=>A(r)),process.on("unhandledRejection",r=>A(r)),ne(r=>{const n=ie(r,!0);n&&e.error(`[uncaught exception in sharedProcess]: ${n}`)})}reportProfilesInfo(e,r){e.publicLog2("profilesInfo",{count:r.profiles.length})}async reportClientOSInfo(e,r){if(Y){const[n,i]=await Promise.all([ht(r.error.bind(r)),Pt(r.error.bind(r))]),m=yt(),o=It(i,this.configuration.args["ozone-platform"]);n&&e.publicLog2("clientPlatformInfo",{platformId:n.id,platformVersionId:n.version_id,platformIdLike:n.id_like,desktopEnvironment:m,displayProtocol:i,codeDisplayProtocol:o})}}handledClientConnection(e){if(e.data!==ut.response)return!1;const r=e.ports.at(0);return r?(this.onDidWindowConnectRaw.fire(r),!0):!1}}async function Dt(d){try{const g=new wt(d);process.parentPort.postMessage(M.ipcReady),await g.init(),process.parentPort.postMessage(M.initDone)}catch(g){process.parentPort.postMessage({error:g.toString()})}}const Et=setTimeout(()=>{process.parentPort.postMessage({warning:"[SharedProcess] did not receive configuration within 30s..."})},3e4);process.parentPort.once("message",d=>{clearTimeout(Et),Dt(d.data)});export{Dt as main};
