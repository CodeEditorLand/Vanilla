{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-utility/sharedProcess/sharedProcessMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from 'os';\nimport { MessagePortMain, MessageEvent } from '../../../base/parts/sandbox/node/electronTypes.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { onUnexpectedError, setUnexpectedErrorHandler } from '../../../base/common/errors.js';\nimport { combinedDisposable, Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { ProxyChannel, StaticRouter } from '../../../base/parts/ipc/common/ipc.js';\nimport { IClientConnectionFilter, Server as UtilityProcessMessagePortServer, once } from '../../../base/parts/ipc/node/ipc.mp.js';\nimport { CodeCacheCleaner } from './contrib/codeCacheCleaner.js';\nimport { LanguagePackCachedDataCleaner } from './contrib/languagePackCachedDataCleaner.js';\nimport { LocalizationsUpdater } from './contrib/localizationsUpdater.js';\nimport { LogsDataCleaner } from './contrib/logsDataCleaner.js';\nimport { UnusedWorkspaceStorageDataCleaner } from './contrib/storageDataCleaner.js';\nimport { IChecksumService } from '../../../platform/checksum/common/checksumService.js';\nimport { ChecksumService } from '../../../platform/checksum/node/checksumService.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ConfigurationService } from '../../../platform/configuration/common/configurationService.js';\nimport { IDiagnosticsService } from '../../../platform/diagnostics/common/diagnostics.js';\nimport { DiagnosticsService } from '../../../platform/diagnostics/node/diagnosticsService.js';\nimport { IDownloadService } from '../../../platform/download/common/download.js';\nimport { DownloadService } from '../../../platform/download/common/downloadService.js';\nimport { INativeEnvironmentService } from '../../../platform/environment/common/environment.js';\nimport { GlobalExtensionEnablementService } from '../../../platform/extensionManagement/common/extensionEnablementService.js';\nimport { ExtensionGalleryService } from '../../../platform/extensionManagement/common/extensionGalleryService.js';\nimport { IExtensionGalleryService, IExtensionManagementService, IExtensionTipsService, IGlobalExtensionEnablementService } from '../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from '../../../platform/extensionManagement/node/extensionSignatureVerificationService.js';\nimport { ExtensionManagementChannel, ExtensionTipsChannel } from '../../../platform/extensionManagement/common/extensionManagementIpc.js';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from '../../../platform/extensionManagement/node/extensionManagementService.js';\nimport { IExtensionRecommendationNotificationService } from '../../../platform/extensionRecommendations/common/extensionRecommendations.js';\nimport { IFileService } from '../../../platform/files/common/files.js';\nimport { FileService } from '../../../platform/files/common/fileService.js';\nimport { DiskFileSystemProvider } from '../../../platform/files/node/diskFileSystemProvider.js';\nimport { SyncDescriptor } from '../../../platform/instantiation/common/descriptors.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { InstantiationService } from '../../../platform/instantiation/common/instantiationService.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { ILanguagePackService } from '../../../platform/languagePacks/common/languagePacks.js';\nimport { NativeLanguagePackService } from '../../../platform/languagePacks/node/languagePacks.js';\nimport { ConsoleLogger, ILoggerService, ILogService } from '../../../platform/log/common/log.js';\nimport { LoggerChannelClient } from '../../../platform/log/common/logIpc.js';\nimport product from '../../../platform/product/common/product.js';\nimport { IProductService } from '../../../platform/product/common/productService.js';\nimport { IRequestService } from '../../../platform/request/common/request.js';\nimport { ISharedProcessConfiguration } from '../../../platform/sharedProcess/node/sharedProcess.js';\nimport { IStorageService } from '../../../platform/storage/common/storage.js';\nimport { resolveCommonProperties } from '../../../platform/telemetry/common/commonProperties.js';\nimport { ICustomEndpointTelemetryService, ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';\nimport { TelemetryAppenderChannel } from '../../../platform/telemetry/common/telemetryIpc.js';\nimport { TelemetryLogAppender } from '../../../platform/telemetry/common/telemetryLogAppender.js';\nimport { TelemetryService } from '../../../platform/telemetry/common/telemetryService.js';\nimport { supportsTelemetry, ITelemetryAppender, NullAppender, NullTelemetryService, getPiiPathsFromEnvironment, isInternalTelemetry, isLoggingOnly } from '../../../platform/telemetry/common/telemetryUtils.js';\nimport { CustomEndpointTelemetryService } from '../../../platform/telemetry/node/customEndpointTelemetryService.js';\nimport { ExtensionStorageService, IExtensionStorageService } from '../../../platform/extensionManagement/common/extensionStorage.js';\nimport { IgnoredExtensionsManagementService, IIgnoredExtensionsManagementService } from '../../../platform/userDataSync/common/ignoredExtensions.js';\nimport { IUserDataSyncLocalStoreService, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService, IUserDataSyncUtilService, registerConfiguration as registerUserDataSyncConfiguration, IUserDataSyncResourceProviderService } from '../../../platform/userDataSync/common/userDataSync.js';\nimport { IUserDataSyncAccountService, UserDataSyncAccountService } from '../../../platform/userDataSync/common/userDataSyncAccount.js';\nimport { UserDataSyncLocalStoreService } from '../../../platform/userDataSync/common/userDataSyncLocalStoreService.js';\nimport { UserDataSyncAccountServiceChannel, UserDataSyncStoreManagementServiceChannel } from '../../../platform/userDataSync/common/userDataSyncIpc.js';\nimport { UserDataSyncLogService } from '../../../platform/userDataSync/common/userDataSyncLog.js';\nimport { IUserDataSyncMachinesService, UserDataSyncMachinesService } from '../../../platform/userDataSync/common/userDataSyncMachines.js';\nimport { UserDataSyncEnablementService } from '../../../platform/userDataSync/common/userDataSyncEnablementService.js';\nimport { UserDataSyncService } from '../../../platform/userDataSync/common/userDataSyncService.js';\nimport { UserDataSyncServiceChannel } from '../../../platform/userDataSync/common/userDataSyncServiceIpc.js';\nimport { UserDataSyncStoreManagementService, UserDataSyncStoreService } from '../../../platform/userDataSync/common/userDataSyncStoreService.js';\nimport { IUserDataProfileStorageService } from '../../../platform/userDataProfile/common/userDataProfileStorageService.js';\nimport { SharedProcessUserDataProfileStorageService } from '../../../platform/userDataProfile/node/userDataProfileStorageService.js';\nimport { ActiveWindowManager } from '../../../platform/windows/node/windowTracker.js';\nimport { ISignService } from '../../../platform/sign/common/sign.js';\nimport { SignService } from '../../../platform/sign/node/signService.js';\nimport { ISharedTunnelsService } from '../../../platform/tunnel/common/tunnel.js';\nimport { SharedTunnelsService } from '../../../platform/tunnel/node/tunnelService.js';\nimport { ipcSharedProcessTunnelChannelName, ISharedProcessTunnelService } from '../../../platform/remote/common/sharedProcessTunnelService.js';\nimport { SharedProcessTunnelService } from '../../../platform/tunnel/node/sharedProcessTunnelService.js';\nimport { IUriIdentityService } from '../../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { isLinux } from '../../../base/common/platform.js';\nimport { FileUserDataProvider } from '../../../platform/userData/common/fileUserDataProvider.js';\nimport { DiskFileSystemProviderClient, LOCAL_FILE_SYSTEM_CHANNEL_NAME } from '../../../platform/files/common/diskFileSystemProviderClient.js';\nimport { InspectProfilingService as V8InspectProfilingService } from '../../../platform/profiling/node/profilingService.js';\nimport { IV8InspectProfilingService } from '../../../platform/profiling/common/profiling.js';\nimport { IExtensionsScannerService } from '../../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { ExtensionsScannerService } from '../../../platform/extensionManagement/node/extensionsScannerService.js';\nimport { IUserDataProfilesService } from '../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IExtensionsProfileScannerService } from '../../../platform/extensionManagement/common/extensionsProfileScannerService.js';\nimport { PolicyChannelClient } from '../../../platform/policy/common/policyIpc.js';\nimport { IPolicyService, NullPolicyService } from '../../../platform/policy/common/policy.js';\nimport { UserDataProfilesService } from '../../../platform/userDataProfile/common/userDataProfileIpc.js';\nimport { OneDataSystemAppender } from '../../../platform/telemetry/node/1dsAppender.js';\nimport { UserDataProfilesCleaner } from './contrib/userDataProfilesCleaner.js';\nimport { IRemoteTunnelService } from '../../../platform/remoteTunnel/common/remoteTunnel.js';\nimport { UserDataSyncResourceProviderService } from '../../../platform/userDataSync/common/userDataSyncResourceProvider.js';\nimport { ExtensionsContributions } from './contrib/extensions.js';\nimport { localize } from '../../../nls.js';\nimport { LogService } from '../../../platform/log/common/logService.js';\nimport { ISharedProcessLifecycleService, SharedProcessLifecycleService } from '../../../platform/lifecycle/node/sharedProcessLifecycleService.js';\nimport { RemoteTunnelService } from '../../../platform/remoteTunnel/node/remoteTunnelService.js';\nimport { ExtensionsProfileScannerService } from '../../../platform/extensionManagement/node/extensionsProfileScannerService.js';\nimport { ExtensionRecommendationNotificationServiceChannelClient } from '../../../platform/extensionRecommendations/common/extensionRecommendationsIpc.js';\nimport { INativeHostService } from '../../../platform/native/common/native.js';\nimport { NativeHostService } from '../../../platform/native/common/nativeHostService.js';\nimport { UserDataAutoSyncService } from '../../../platform/userDataSync/node/userDataAutoSyncService.js';\nimport { ExtensionTipsService } from '../../../platform/extensionManagement/node/extensionTipsService.js';\nimport { IMainProcessService, MainProcessService } from '../../../platform/ipc/common/mainProcessService.js';\nimport { RemoteStorageService } from '../../../platform/storage/common/storageService.js';\nimport { IRemoteSocketFactoryService, RemoteSocketFactoryService } from '../../../platform/remote/common/remoteSocketFactoryService.js';\nimport { RemoteConnectionType } from '../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { nodeSocketFactory } from '../../../platform/remote/node/nodeSocketFactory.js';\nimport { NativeEnvironmentService } from '../../../platform/environment/node/environmentService.js';\nimport { SharedProcessRawConnection, SharedProcessLifecycle } from '../../../platform/sharedProcess/common/sharedProcess.js';\nimport { getOSReleaseInfo } from '../../../base/node/osReleaseInfo.js';\nimport { getDesktopEnvironment } from '../../../base/common/desktopEnvironmentInfo.js';\nimport { getCodeDisplayProtocol, getDisplayProtocol } from '../../../base/node/osDisplayProtocolInfo.js';\nimport { RequestService } from '../../../platform/request/electron-utility/requestService.js';\n\nclass SharedProcessMain extends Disposable implements IClientConnectionFilter {\n\n\tprivate readonly server = this._register(new UtilityProcessMessagePortServer(this));\n\n\tprivate lifecycleService: SharedProcessLifecycleService | undefined = undefined;\n\n\tprivate readonly onDidWindowConnectRaw = this._register(new Emitter<MessagePortMain>());\n\n\tconstructor(private configuration: ISharedProcessConfiguration) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Shared process lifecycle\n\t\tlet didExit = false;\n\t\tconst onExit = () => {\n\t\t\tif (!didExit) {\n\t\t\t\tdidExit = true;\n\n\t\t\t\tthis.lifecycleService?.fireOnWillShutdown();\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t};\n\t\tprocess.once('exit', onExit);\n\t\tonce(process.parentPort, SharedProcessLifecycle.exit, onExit);\n\t}\n\n\tasync init(): Promise<void> {\n\n\t\t// Services\n\t\tconst instantiationService = await this.initServices();\n\n\t\t// Config\n\t\tregisterUserDataSyncConfiguration();\n\n\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\tconst logService = accessor.get(ILogService);\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tconst userDataProfilesService = accessor.get(IUserDataProfilesService);\n\n\t\t\t// Log info\n\t\t\tlogService.trace('sharedProcess configuration', JSON.stringify(this.configuration));\n\n\t\t\t// Channels\n\t\t\tthis.initChannels(accessor);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\n\t\t\t// Report Profiles Info\n\t\t\tthis.reportProfilesInfo(telemetryService, userDataProfilesService);\n\t\t\tthis._register(userDataProfilesService.onDidChangeProfiles(() => this.reportProfilesInfo(telemetryService, userDataProfilesService)));\n\n\t\t\t// Report Client OS/DE Info\n\t\t\tthis.reportClientOSInfo(telemetryService, logService);\n\t\t});\n\n\t\t// Instantiate Contributions\n\t\tthis._register(combinedDisposable(\n\t\t\tinstantiationService.createInstance(CodeCacheCleaner, this.configuration.codeCachePath),\n\t\t\tinstantiationService.createInstance(LanguagePackCachedDataCleaner),\n\t\t\tinstantiationService.createInstance(UnusedWorkspaceStorageDataCleaner),\n\t\t\tinstantiationService.createInstance(LogsDataCleaner),\n\t\t\tinstantiationService.createInstance(LocalizationsUpdater),\n\t\t\tinstantiationService.createInstance(ExtensionsContributions),\n\t\t\tinstantiationService.createInstance(UserDataProfilesCleaner)\n\t\t));\n\t}\n\n\tprivate async initServices(): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Main Process\n\t\tconst mainRouter = new StaticRouter(ctx => ctx === 'main');\n\t\tconst mainProcessService = new MainProcessService(this.server, mainRouter);\n\t\tservices.set(IMainProcessService, mainProcessService);\n\n\t\t// Policies\n\t\tconst policyService = this.configuration.policiesData ? new PolicyChannelClient(this.configuration.policiesData, mainProcessService.getChannel('policy')) : new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(this.configuration.args, productService);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerChannelClient(undefined, this.configuration.logLevel, environmentService.logsHome, this.configuration.loggers.map(loggerResource => ({ ...loggerResource, resource: URI.revive(loggerResource.resource) })), mainProcessService.getChannel('logger'));\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logger = this._register(loggerService.createLogger('sharedprocess', { name: localize('sharedLog', \"Shared\") }));\n\t\tconst consoleLogger = this._register(new ConsoleLogger(logger.getLevel()));\n\t\tconst logService = this._register(new LogService(logger, [consoleLogger]));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService = this._register(new SharedProcessLifecycleService(logService));\n\t\tservices.set(ISharedProcessLifecycleService, this.lifecycleService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = this._register(new UserDataProfilesService(this.configuration.profiles.all, URI.revive(this.configuration.profiles.home).with({ scheme: environmentService.userRoamingDataHome.scheme }), mainProcessService.getChannel('userDataProfiles')));\n\t\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\tconst userDataFileSystemProvider = this._register(new FileUserDataProvider(\n\t\t\tSchemas.file,\n\t\t\t// Specifically for user data, use the disk file system provider\n\t\t\t// from the main process to enable atomic read/write operations.\n\t\t\t// Since user data can change very frequently across multiple\n\t\t\t// processes, we want a single process handling these operations.\n\t\t\tthis._register(new DiskFileSystemProviderClient(mainProcessService.getChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME), { pathCaseSensitive: isLinux })),\n\t\t\tSchemas.vscodeUserData,\n\t\t\tuserDataProfilesService,\n\t\t\turiIdentityService,\n\t\t\tlogService\n\t\t));\n\t\tfileService.registerProvider(Schemas.vscodeUserData, userDataFileSystemProvider);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(userDataProfilesService.defaultProfile.settingsResource, fileService, policyService, logService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Storage (global access only)\n\t\tconst storageService = new RemoteStorageService(undefined, { defaultProfile: userDataProfilesService.defaultProfile, currentProfile: userDataProfilesService.defaultProfile }, mainProcessService, environmentService);\n\t\tservices.set(IStorageService, storageService);\n\t\tthis._register(toDisposable(() => storageService.flush()));\n\n\t\t// Initialize config & storage in parallel\n\t\tawait Promise.all([\n\t\t\tconfigurationService.initialize(),\n\t\t\tstorageService.initialize()\n\t\t]);\n\n\t\t// Request\n\t\tconst requestService = new RequestService(configurationService, environmentService, logService);\n\t\tservices.set(IRequestService, requestService);\n\n\t\t// Checksum\n\t\tservices.set(IChecksumService, new SyncDescriptor(ChecksumService, undefined, false /* proxied to other processes */));\n\n\t\t// V8 Inspect profiler\n\t\tservices.set(IV8InspectProfilingService, new SyncDescriptor(V8InspectProfilingService, undefined, false /* proxied to other processes */));\n\n\t\t// Native Host\n\t\tconst nativeHostService = new NativeHostService(-1 /* we are not running in a browser window context */, mainProcessService) as INativeHostService;\n\t\tservices.set(INativeHostService, nativeHostService);\n\n\t\t// Download\n\t\tservices.set(IDownloadService, new SyncDescriptor(DownloadService, undefined, true));\n\n\t\t// Extension recommendations\n\t\tconst activeWindowManager = this._register(new ActiveWindowManager(nativeHostService));\n\t\tconst activeWindowRouter = new StaticRouter(ctx => activeWindowManager.getActiveClientId().then(id => ctx === id));\n\t\tservices.set(IExtensionRecommendationNotificationService, new ExtensionRecommendationNotificationServiceChannelClient(this.server.getChannel('extensionRecommendationNotification', activeWindowRouter)));\n\n\t\t// Telemetry\n\t\tlet telemetryService: ITelemetryService;\n\t\tconst appenders: ITelemetryAppender[] = [];\n\t\tconst internalTelemetry = isInternalTelemetry(productService, configurationService);\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tconst logAppender = new TelemetryLogAppender(logService, loggerService, environmentService, productService);\n\t\t\tappenders.push(logAppender);\n\t\t\tif (!isLoggingOnly(productService, environmentService) && productService.aiConfig?.ariaKey) {\n\t\t\t\tconst collectorAppender = new OneDataSystemAppender(requestService, internalTelemetry, 'monacoworkbench', null, productService.aiConfig.ariaKey);\n\t\t\t\tthis._register(toDisposable(() => collectorAppender.flush())); // Ensure the 1DS appender is disposed so that it flushes remaining data\n\t\t\t\tappenders.push(collectorAppender);\n\t\t\t}\n\n\t\t\ttelemetryService = new TelemetryService({\n\t\t\t\tappenders,\n\t\t\t\tcommonProperties: resolveCommonProperties(release(), hostname(), process.arch, productService.commit, productService.version, this.configuration.machineId, this.configuration.sqmId, this.configuration.devDeviceId, internalTelemetry),\n\t\t\t\tsendErrorTelemetry: true,\n\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService),\n\t\t\t}, configurationService, productService);\n\t\t} else {\n\t\t\ttelemetryService = NullTelemetryService;\n\t\t\tconst nullAppender = NullAppender;\n\t\t\tappenders.push(nullAppender);\n\t\t}\n\n\t\tthis.server.registerChannel('telemetryAppender', new TelemetryAppenderChannel(appenders));\n\t\tservices.set(ITelemetryService, telemetryService);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryService = new CustomEndpointTelemetryService(configurationService, telemetryService, logService, loggerService, environmentService, productService);\n\t\tservices.set(ICustomEndpointTelemetryService, customEndpointTelemetryService);\n\n\t\t// Extension Management\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService, undefined, true));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService, undefined, true));\n\t\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService, undefined, true));\n\t\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService, undefined, true));\n\n\t\t// Extension Gallery\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryService, undefined, true));\n\n\t\t// Extension Tips\n\t\tservices.set(IExtensionTipsService, new SyncDescriptor(ExtensionTipsService, undefined, false /* Eagerly scans and computes exe based recommendations */));\n\n\t\t// Localizations\n\t\tservices.set(ILanguagePackService, new SyncDescriptor(NativeLanguagePackService, undefined, false /* proxied to other processes */));\n\n\t\t// Diagnostics\n\t\tservices.set(IDiagnosticsService, new SyncDescriptor(DiagnosticsService, undefined, false /* proxied to other processes */));\n\n\t\t// Settings Sync\n\t\tservices.set(IUserDataSyncAccountService, new SyncDescriptor(UserDataSyncAccountService, undefined, true));\n\t\tservices.set(IUserDataSyncLogService, new SyncDescriptor(UserDataSyncLogService, undefined, true));\n\t\tservices.set(IUserDataSyncUtilService, ProxyChannel.toService(this.server.getChannel('userDataSyncUtil', client => client.ctx !== 'main')));\n\t\tservices.set(IGlobalExtensionEnablementService, new SyncDescriptor(GlobalExtensionEnablementService, undefined, false /* Eagerly resets installed extensions */));\n\t\tservices.set(IIgnoredExtensionsManagementService, new SyncDescriptor(IgnoredExtensionsManagementService, undefined, true));\n\t\tservices.set(IExtensionStorageService, new SyncDescriptor(ExtensionStorageService));\n\t\tservices.set(IUserDataSyncStoreManagementService, new SyncDescriptor(UserDataSyncStoreManagementService, undefined, true));\n\t\tservices.set(IUserDataSyncStoreService, new SyncDescriptor(UserDataSyncStoreService, undefined, true));\n\t\tservices.set(IUserDataSyncMachinesService, new SyncDescriptor(UserDataSyncMachinesService, undefined, true));\n\t\tservices.set(IUserDataSyncLocalStoreService, new SyncDescriptor(UserDataSyncLocalStoreService, undefined, false /* Eagerly cleans up old backups */));\n\t\tservices.set(IUserDataSyncEnablementService, new SyncDescriptor(UserDataSyncEnablementService, undefined, true));\n\t\tservices.set(IUserDataSyncService, new SyncDescriptor(UserDataSyncService, undefined, false /* Initializes the Sync State */));\n\t\tservices.set(IUserDataProfileStorageService, new SyncDescriptor(SharedProcessUserDataProfileStorageService, undefined, true));\n\t\tservices.set(IUserDataSyncResourceProviderService, new SyncDescriptor(UserDataSyncResourceProviderService, undefined, true));\n\n\t\t// Signing\n\t\tservices.set(ISignService, new SyncDescriptor(SignService, undefined, false /* proxied to other processes */));\n\n\t\t// Tunnel\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tservices.set(IRemoteSocketFactoryService, remoteSocketFactoryService);\n\t\tremoteSocketFactoryService.register(RemoteConnectionType.WebSocket, nodeSocketFactory);\n\t\tservices.set(ISharedTunnelsService, new SyncDescriptor(SharedTunnelsService));\n\t\tservices.set(ISharedProcessTunnelService, new SyncDescriptor(SharedProcessTunnelService));\n\n\t\t// Remote Tunnel\n\t\tservices.set(IRemoteTunnelService, new SyncDescriptor(RemoteTunnelService));\n\n\t\treturn new InstantiationService(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor): void {\n\n\t\t// const disposables = this._register(new DisposableStore());\n\n\t\t// Extensions Management\n\t\tconst channel = new ExtensionManagementChannel(accessor.get(IExtensionManagementService), () => null);\n\t\tthis.server.registerChannel('extensions', channel);\n\n\t\t// Language Packs\n\t\tconst languagePacksChannel = ProxyChannel.fromService(accessor.get(ILanguagePackService), this._store);\n\t\tthis.server.registerChannel('languagePacks', languagePacksChannel);\n\n\t\t// Diagnostics\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(accessor.get(IDiagnosticsService), this._store);\n\t\tthis.server.registerChannel('diagnostics', diagnosticsChannel);\n\n\t\t// Extension Tips\n\t\tconst extensionTipsChannel = new ExtensionTipsChannel(accessor.get(IExtensionTipsService));\n\t\tthis.server.registerChannel('extensionTipsService', extensionTipsChannel);\n\n\t\t// Checksum\n\t\tconst checksumChannel = ProxyChannel.fromService(accessor.get(IChecksumService), this._store);\n\t\tthis.server.registerChannel('checksum', checksumChannel);\n\n\t\t// Profiling\n\t\tconst profilingChannel = ProxyChannel.fromService(accessor.get(IV8InspectProfilingService), this._store);\n\t\tthis.server.registerChannel('v8InspectProfiling', profilingChannel);\n\n\t\t// Settings Sync\n\t\tconst userDataSyncMachineChannel = ProxyChannel.fromService(accessor.get(IUserDataSyncMachinesService), this._store);\n\t\tthis.server.registerChannel('userDataSyncMachines', userDataSyncMachineChannel);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryChannel = ProxyChannel.fromService(accessor.get(ICustomEndpointTelemetryService), this._store);\n\t\tthis.server.registerChannel('customEndpointTelemetry', customEndpointTelemetryChannel);\n\n\t\tconst userDataSyncAccountChannel = new UserDataSyncAccountServiceChannel(accessor.get(IUserDataSyncAccountService));\n\t\tthis.server.registerChannel('userDataSyncAccount', userDataSyncAccountChannel);\n\n\t\tconst userDataSyncStoreManagementChannel = new UserDataSyncStoreManagementServiceChannel(accessor.get(IUserDataSyncStoreManagementService));\n\t\tthis.server.registerChannel('userDataSyncStoreManagement', userDataSyncStoreManagementChannel);\n\n\t\tconst userDataSyncChannel = new UserDataSyncServiceChannel(accessor.get(IUserDataSyncService), accessor.get(IUserDataProfilesService), accessor.get(ILogService));\n\t\tthis.server.registerChannel('userDataSync', userDataSyncChannel);\n\n\t\tconst userDataAutoSync = this._register(accessor.get(IInstantiationService).createInstance(UserDataAutoSyncService));\n\t\tthis.server.registerChannel('userDataAutoSync', ProxyChannel.fromService(userDataAutoSync, this._store));\n\n\t\tthis.server.registerChannel('IUserDataSyncResourceProviderService', ProxyChannel.fromService(accessor.get(IUserDataSyncResourceProviderService), this._store));\n\n\t\t// Tunnel\n\t\tconst sharedProcessTunnelChannel = ProxyChannel.fromService(accessor.get(ISharedProcessTunnelService), this._store);\n\t\tthis.server.registerChannel(ipcSharedProcessTunnelChannelName, sharedProcessTunnelChannel);\n\n\t\t// Remote Tunnel\n\t\tconst remoteTunnelChannel = ProxyChannel.fromService(accessor.get(IRemoteTunnelService), this._store);\n\t\tthis.server.registerChannel('remoteTunnel', remoteTunnelChannel);\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\n\t\t// Listen on global error events\n\t\tprocess.on('uncaughtException', error => onUnexpectedError(error));\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler(error => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(`[uncaught exception in sharedProcess]: ${message}`);\n\t\t});\n\t}\n\n\tprivate reportProfilesInfo(telemetryService: ITelemetryService, userDataProfilesService: IUserDataProfilesService): void {\n\t\ttype ProfilesInfoClassification = {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Report profiles information';\n\t\t\tcount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of profiles' };\n\t\t};\n\t\ttype ProfilesInfoEvent = {\n\t\t\tcount: number;\n\t\t};\n\t\ttelemetryService.publicLog2<ProfilesInfoEvent, ProfilesInfoClassification>('profilesInfo', {\n\t\t\tcount: userDataProfilesService.profiles.length\n\t\t});\n\t}\n\n\tprivate async reportClientOSInfo(telemetryService: ITelemetryService, logService: ILogService): Promise<void> {\n\t\tif (isLinux) {\n\t\t\tconst [releaseInfo, displayProtocol] = await Promise.all([\n\t\t\t\tgetOSReleaseInfo(logService.error.bind(logService)),\n\t\t\t\tgetDisplayProtocol(logService.error.bind(logService))\n\t\t\t]);\n\t\t\tconst desktopEnvironment = getDesktopEnvironment();\n\t\t\tconst codeSessionType = getCodeDisplayProtocol(displayProtocol, this.configuration.args['ozone-platform']);\n\t\t\tif (releaseInfo) {\n\t\t\t\ttype ClientPlatformInfoClassification = {\n\t\t\t\t\tplatformId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the operating system without any version information.' };\n\t\t\t\t\tplatformVersionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the operating system version excluding any name information or release code.' };\n\t\t\t\t\tplatformIdLike: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the operating system the current OS derivate is closely related to.' };\n\t\t\t\t\tdesktopEnvironment: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the desktop environment the user is using.' };\n\t\t\t\t\tdisplayProtocol: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the users display protocol type.' };\n\t\t\t\t\tcodeDisplayProtocol: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the vscode display protocol type.' };\n\t\t\t\t\towner: 'benibenj';\n\t\t\t\t\tcomment: 'Provides insight into the distro and desktop environment information on Linux.';\n\t\t\t\t};\n\t\t\t\ttype ClientPlatformInfoEvent = {\n\t\t\t\t\tplatformId: string;\n\t\t\t\t\tplatformVersionId: string | undefined;\n\t\t\t\t\tplatformIdLike: string | undefined;\n\t\t\t\t\tdesktopEnvironment: string | undefined;\n\t\t\t\t\tdisplayProtocol: string | undefined;\n\t\t\t\t\tcodeDisplayProtocol: string | undefined;\n\t\t\t\t};\n\t\t\t\ttelemetryService.publicLog2<ClientPlatformInfoEvent, ClientPlatformInfoClassification>('clientPlatformInfo', {\n\t\t\t\t\tplatformId: releaseInfo.id,\n\t\t\t\t\tplatformVersionId: releaseInfo.version_id,\n\t\t\t\t\tplatformIdLike: releaseInfo.id_like,\n\t\t\t\t\tdesktopEnvironment: desktopEnvironment,\n\t\t\t\t\tdisplayProtocol: displayProtocol,\n\t\t\t\t\tcodeDisplayProtocol: codeSessionType\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandledClientConnection(e: MessageEvent): boolean {\n\n\t\t// This filter on message port messages will look for\n\t\t// attempts of a window to connect raw to the shared\n\t\t// process to handle these connections separate from\n\t\t// our IPC based protocol.\n\n\t\tif (e.data !== SharedProcessRawConnection.response) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst port = e.ports.at(0);\n\t\tif (port) {\n\t\t\tthis.onDidWindowConnectRaw.fire(port);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport async function main(configuration: ISharedProcessConfiguration): Promise<void> {\n\n\t// create shared process and signal back to main that we are\n\t// ready to accept message ports as client connections\n\n\ttry {\n\t\tconst sharedProcess = new SharedProcessMain(configuration);\n\t\tprocess.parentPort.postMessage(SharedProcessLifecycle.ipcReady);\n\n\t\t// await initialization and signal this back to electron-main\n\t\tawait sharedProcess.init();\n\n\t\tprocess.parentPort.postMessage(SharedProcessLifecycle.initDone);\n\t} catch (error) {\n\t\tprocess.parentPort.postMessage({ error: error.toString() });\n\t}\n}\n\nconst handle = setTimeout(() => {\n\tprocess.parentPort.postMessage({ warning: '[SharedProcess] did not receive configuration within 30s...' });\n}, 30000);\n\nprocess.parentPort.once('message', (e: Electron.MessageEvent) => {\n\tclearTimeout(handle);\n\tmain(e.data as ISharedProcessConfiguration);\n});\n"],
  "mappings": ";;AAKA,SAAS,UAAU,eAAe;AAClC,SAAS,iBAAiB,oBAAoB;AAC9C,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB,iCAAiC;AAC7D,SAAS,oBAAoB,YAAY,oBAAoB;AAC7D,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,eAAe;AACxB,SAAS,cAAc,oBAAoB;AAC3C,SAAS,yBAAyB,UAAU,iCAAiC,YAAY;AACzF,SAAS,wBAAwB;AACjC,SAAS,qCAAqC;AAC9C,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC,SAAS,yCAAyC;AAClD,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,2BAA2B;AACpC,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,iCAAiC;AAC1C,SAAS,wCAAwC;AACjD,SAAS,+BAA+B;AACxC,SAAS,0BAA0B,6BAA6B,uBAAuB,yCAAyC;AAChI,SAAS,uCAAuC,8CAA8C;AAC9F,SAAS,4BAA4B,4BAA4B;AACjE,SAAS,4BAA4B,+CAA+C;AACpF,SAAS,mDAAmD;AAC5D,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AACvC,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB,wBAAwB;AACxD,SAAS,4BAA4B;AACrC,SAAS,yBAAyB;AAClC,SAAS,4BAA4B;AACrC,SAAS,iCAAiC;AAC1C,SAAS,eAAe,gBAAgB,mBAAmB;AAC3D,SAAS,2BAA2B;AACpC,OAAO,aAAa;AACpB,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,mCAAmC;AAC5C,SAAS,uBAAuB;AAChC,SAAS,+BAA+B;AACxC,SAAS,iCAAiC,yBAAyB;AACnE,SAAS,gCAAgC;AACzC,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AACjC,SAAS,mBAAmB,oBAAoB,cAAc,sBAAsB,4BAA4B,qBAAqB,qBAAqB;AAC1J,SAAS,sCAAsC;AAC/C,SAAS,yBAAyB,gCAAgC;AAClE,SAAS,oCAAoC,2CAA2C;AACxF,SAAS,gCAAgC,yBAAyB,gCAAgC,sBAAsB,qCAAqC,2BAA2B,0BAA0B,yBAAyB,mCAAmC,4CAA4C;AAC1T,SAAS,6BAA6B,kCAAkC;AACxE,SAAS,qCAAqC;AAC9C,SAAS,mCAAmC,iDAAiD;AAC7F,SAAS,8BAA8B;AACvC,SAAS,8BAA8B,mCAAmC;AAC1E,SAAS,qCAAqC;AAC9C,SAAS,2BAA2B;AACpC,SAAS,kCAAkC;AAC3C,SAAS,oCAAoC,gCAAgC;AAC7E,SAAS,sCAAsC;AAC/C,SAAS,kDAAkD;AAC3D,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,mCAAmC,mCAAmC;AAC/E,SAAS,kCAAkC;AAC3C,SAAS,2BAA2B;AACpC,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,4BAA4B;AACrC,SAAS,8BAA8B,sCAAsC;AAC7E,SAAS,2BAA2B,iCAAiC;AACrE,SAAS,kCAAkC;AAC3C,SAAS,iCAAiC;AAC1C,SAAS,gCAAgC;AACzC,SAAS,gCAAgC;AACzC,SAAS,wCAAwC;AACjD,SAAS,2BAA2B;AACpC,SAAS,gBAAgB,yBAAyB;AAClD,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,4BAA4B;AACrC,SAAS,2CAA2C;AACpD,SAAS,+BAA+B;AACxC,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,gCAAgC,qCAAqC;AAC9E,SAAS,2BAA2B;AACpC,SAAS,uCAAuC;AAChD,SAAS,+DAA+D;AACxE,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAClC,SAAS,+BAA+B;AACxC,SAAS,4BAA4B;AACrC,SAAS,qBAAqB,0BAA0B;AACxD,SAAS,4BAA4B;AACrC,SAAS,6BAA6B,kCAAkC;AACxE,SAAS,4BAA4B;AACrC,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AACzC,SAAS,4BAA4B,8BAA8B;AACnE,SAAS,wBAAwB;AACjC,SAAS,6BAA6B;AACtC,SAAS,wBAAwB,0BAA0B;AAC3D,SAAS,sBAAsB;AAE/B,MAAM,0BAA0B,WAA8C;AAAA,EAQ7E,YAAoB,eAA4C;AAC/D,UAAM;AADa;AAGnB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EArID,OAyH8E;AAAA;AAAA;AAAA,EAE5D,SAAS,KAAK,UAAU,IAAI,gCAAgC,IAAI,CAAC;AAAA,EAE1E,mBAA8D;AAAA,EAErD,wBAAwB,KAAK,UAAU,IAAI,QAAyB,CAAC;AAAA,EAQ9E,oBAA0B;AAGjC,QAAI,UAAU;AACd,UAAM,SAAS,6BAAM;AACpB,UAAI,CAAC,SAAS;AACb,kBAAU;AAEV,aAAK,kBAAkB,mBAAmB;AAC1C,aAAK,QAAQ;AAAA,MACd;AAAA,IACD,GAPe;AAQf,YAAQ,KAAK,QAAQ,MAAM;AAC3B,SAAK,QAAQ,YAAY,uBAAuB,MAAM,MAAM;AAAA,EAC7D;AAAA,EAEA,MAAM,OAAsB;AAG3B,UAAM,uBAAuB,MAAM,KAAK,aAAa;AAGrD,sCAAkC;AAElC,yBAAqB,eAAe,cAAY;AAC/C,YAAM,aAAa,SAAS,IAAI,WAAW;AAC3C,YAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,YAAM,0BAA0B,SAAS,IAAI,wBAAwB;AAGrE,iBAAW,MAAM,+BAA+B,KAAK,UAAU,KAAK,aAAa,CAAC;AAGlF,WAAK,aAAa,QAAQ;AAG1B,WAAK,qBAAqB,UAAU;AAGpC,WAAK,mBAAmB,kBAAkB,uBAAuB;AACjE,WAAK,UAAU,wBAAwB,oBAAoB,MAAM,KAAK,mBAAmB,kBAAkB,uBAAuB,CAAC,CAAC;AAGpI,WAAK,mBAAmB,kBAAkB,UAAU;AAAA,IACrD,CAAC;AAGD,SAAK,UAAU;AAAA,MACd,qBAAqB,eAAe,kBAAkB,KAAK,cAAc,aAAa;AAAA,MACtF,qBAAqB,eAAe,6BAA6B;AAAA,MACjE,qBAAqB,eAAe,iCAAiC;AAAA,MACrE,qBAAqB,eAAe,eAAe;AAAA,MACnD,qBAAqB,eAAe,oBAAoB;AAAA,MACxD,qBAAqB,eAAe,uBAAuB;AAAA,MAC3D,qBAAqB,eAAe,uBAAuB;AAAA,IAC5D,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,eAA+C;AAC5D,UAAM,WAAW,IAAI,kBAAkB;AAGvC,UAAM,iBAAiB,EAAE,eAAe,QAAW,GAAG,QAAQ;AAC9D,aAAS,IAAI,iBAAiB,cAAc;AAG5C,UAAM,aAAa,IAAI,aAAa,SAAO,QAAQ,MAAM;AACzD,UAAM,qBAAqB,IAAI,mBAAmB,KAAK,QAAQ,UAAU;AACzE,aAAS,IAAI,qBAAqB,kBAAkB;AAGpD,UAAM,gBAAgB,KAAK,cAAc,eAAe,IAAI,oBAAoB,KAAK,cAAc,cAAc,mBAAmB,WAAW,QAAQ,CAAC,IAAI,IAAI,kBAAkB;AAClL,aAAS,IAAI,gBAAgB,aAAa;AAG1C,UAAM,qBAAqB,IAAI,yBAAyB,KAAK,cAAc,MAAM,cAAc;AAC/F,aAAS,IAAI,2BAA2B,kBAAkB;AAG1D,UAAM,gBAAgB,IAAI,oBAAoB,QAAW,KAAK,cAAc,UAAU,mBAAmB,UAAU,KAAK,cAAc,QAAQ,IAAI,qBAAmB,EAAE,GAAG,gBAAgB,UAAU,IAAI,OAAO,eAAe,QAAQ,EAAE,EAAE,GAAG,mBAAmB,WAAW,QAAQ,CAAC;AACpR,aAAS,IAAI,gBAAgB,aAAa;AAG1C,UAAM,SAAS,KAAK,UAAU,cAAc,aAAa,iBAAiB,EAAE,MAAM,SAAS,aAAa,QAAQ,EAAE,CAAC,CAAC;AACpH,UAAM,gBAAgB,KAAK,UAAU,IAAI,cAAc,OAAO,SAAS,CAAC,CAAC;AACzE,UAAM,aAAa,KAAK,UAAU,IAAI,WAAW,QAAQ,CAAC,aAAa,CAAC,CAAC;AACzE,aAAS,IAAI,aAAa,UAAU;AAGpC,SAAK,mBAAmB,KAAK,UAAU,IAAI,8BAA8B,UAAU,CAAC;AACpF,aAAS,IAAI,gCAAgC,KAAK,gBAAgB;AAGlE,UAAM,cAAc,KAAK,UAAU,IAAI,YAAY,UAAU,CAAC;AAC9D,aAAS,IAAI,cAAc,WAAW;AAEtC,UAAM,yBAAyB,KAAK,UAAU,IAAI,uBAAuB,UAAU,CAAC;AACpF,gBAAY,iBAAiB,QAAQ,MAAM,sBAAsB;AAGjE,UAAM,qBAAqB,IAAI,mBAAmB,WAAW;AAC7D,aAAS,IAAI,qBAAqB,kBAAkB;AAGpD,UAAM,0BAA0B,KAAK,UAAU,IAAI,wBAAwB,KAAK,cAAc,SAAS,KAAK,IAAI,OAAO,KAAK,cAAc,SAAS,IAAI,EAAE,KAAK,EAAE,QAAQ,mBAAmB,oBAAoB,OAAO,CAAC,GAAG,mBAAmB,WAAW,kBAAkB,CAAC,CAAC;AAC5Q,aAAS,IAAI,0BAA0B,uBAAuB;AAE9D,UAAM,6BAA6B,KAAK,UAAU,IAAI;AAAA,MACrD,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,MAKR,KAAK,UAAU,IAAI,6BAA6B,mBAAmB,WAAW,8BAA8B,GAAG,EAAE,mBAAmB,QAAQ,CAAC,CAAC;AAAA,MAC9I,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AACD,gBAAY,iBAAiB,QAAQ,gBAAgB,0BAA0B;AAG/E,UAAM,uBAAuB,KAAK,UAAU,IAAI,qBAAqB,wBAAwB,eAAe,kBAAkB,aAAa,eAAe,UAAU,CAAC;AACrK,aAAS,IAAI,uBAAuB,oBAAoB;AAGxD,UAAM,iBAAiB,IAAI,qBAAqB,QAAW,EAAE,gBAAgB,wBAAwB,gBAAgB,gBAAgB,wBAAwB,eAAe,GAAG,oBAAoB,kBAAkB;AACrN,aAAS,IAAI,iBAAiB,cAAc;AAC5C,SAAK,UAAU,aAAa,MAAM,eAAe,MAAM,CAAC,CAAC;AAGzD,UAAM,QAAQ,IAAI;AAAA,MACjB,qBAAqB,WAAW;AAAA,MAChC,eAAe,WAAW;AAAA,IAC3B,CAAC;AAGD,UAAM,iBAAiB,IAAI,eAAe,sBAAsB,oBAAoB,UAAU;AAC9F,aAAS,IAAI,iBAAiB,cAAc;AAG5C,aAAS,IAAI,kBAAkB,IAAI;AAAA,MAAe;AAAA,MAAiB;AAAA,MAAW;AAAA;AAAA,IAAsC,CAAC;AAGrH,aAAS,IAAI,4BAA4B,IAAI;AAAA,MAAe;AAAA,MAA2B;AAAA,MAAW;AAAA;AAAA,IAAsC,CAAC;AAGzI,UAAM,oBAAoB,IAAI,kBAAkB,IAAyD,kBAAkB;AAC3H,aAAS,IAAI,oBAAoB,iBAAiB;AAGlD,aAAS,IAAI,kBAAkB,IAAI,eAAe,iBAAiB,QAAW,IAAI,CAAC;AAGnF,UAAM,sBAAsB,KAAK,UAAU,IAAI,oBAAoB,iBAAiB,CAAC;AACrF,UAAM,qBAAqB,IAAI,aAAa,SAAO,oBAAoB,kBAAkB,EAAE,KAAK,QAAM,QAAQ,EAAE,CAAC;AACjH,aAAS,IAAI,6CAA6C,IAAI,wDAAwD,KAAK,OAAO,WAAW,uCAAuC,kBAAkB,CAAC,CAAC;AAGxM,QAAI;AACJ,UAAM,YAAkC,CAAC;AACzC,UAAM,oBAAoB,oBAAoB,gBAAgB,oBAAoB;AAClF,QAAI,kBAAkB,gBAAgB,kBAAkB,GAAG;AAC1D,YAAM,cAAc,IAAI,qBAAqB,YAAY,eAAe,oBAAoB,cAAc;AAC1G,gBAAU,KAAK,WAAW;AAC1B,UAAI,CAAC,cAAc,gBAAgB,kBAAkB,KAAK,eAAe,UAAU,SAAS;AAC3F,cAAM,oBAAoB,IAAI,sBAAsB,gBAAgB,mBAAmB,mBAAmB,MAAM,eAAe,SAAS,OAAO;AAC/I,aAAK,UAAU,aAAa,MAAM,kBAAkB,MAAM,CAAC,CAAC;AAC5D,kBAAU,KAAK,iBAAiB;AAAA,MACjC;AAEA,yBAAmB,IAAI,iBAAiB;AAAA,QACvC;AAAA,QACA,kBAAkB,wBAAwB,QAAQ,GAAG,SAAS,GAAG,QAAQ,MAAM,eAAe,QAAQ,eAAe,SAAS,KAAK,cAAc,WAAW,KAAK,cAAc,OAAO,KAAK,cAAc,aAAa,iBAAiB;AAAA,QACvO,oBAAoB;AAAA,QACpB,UAAU,2BAA2B,kBAAkB;AAAA,MACxD,GAAG,sBAAsB,cAAc;AAAA,IACxC,OAAO;AACN,yBAAmB;AACnB,YAAM,eAAe;AACrB,gBAAU,KAAK,YAAY;AAAA,IAC5B;AAEA,SAAK,OAAO,gBAAgB,qBAAqB,IAAI,yBAAyB,SAAS,CAAC;AACxF,aAAS,IAAI,mBAAmB,gBAAgB;AAGhD,UAAM,iCAAiC,IAAI,+BAA+B,sBAAsB,kBAAkB,YAAY,eAAe,oBAAoB,cAAc;AAC/K,aAAS,IAAI,iCAAiC,8BAA8B;AAG5E,aAAS,IAAI,kCAAkC,IAAI,eAAe,iCAAiC,QAAW,IAAI,CAAC;AACnH,aAAS,IAAI,2BAA2B,IAAI,eAAe,0BAA0B,QAAW,IAAI,CAAC;AACrG,aAAS,IAAI,wCAAwC,IAAI,eAAe,uCAAuC,QAAW,IAAI,CAAC;AAC/H,aAAS,IAAI,yCAAyC,IAAI,eAAe,4BAA4B,QAAW,IAAI,CAAC;AAGrH,aAAS,IAAI,0BAA0B,IAAI,eAAe,yBAAyB,QAAW,IAAI,CAAC;AAGnG,aAAS,IAAI,uBAAuB,IAAI;AAAA,MAAe;AAAA,MAAsB;AAAA,MAAW;AAAA;AAAA,IAAgE,CAAC;AAGzJ,aAAS,IAAI,sBAAsB,IAAI;AAAA,MAAe;AAAA,MAA2B;AAAA,MAAW;AAAA;AAAA,IAAsC,CAAC;AAGnI,aAAS,IAAI,qBAAqB,IAAI;AAAA,MAAe;AAAA,MAAoB;AAAA,MAAW;AAAA;AAAA,IAAsC,CAAC;AAG3H,aAAS,IAAI,6BAA6B,IAAI,eAAe,4BAA4B,QAAW,IAAI,CAAC;AACzG,aAAS,IAAI,yBAAyB,IAAI,eAAe,wBAAwB,QAAW,IAAI,CAAC;AACjG,aAAS,IAAI,0BAA0B,aAAa,UAAU,KAAK,OAAO,WAAW,oBAAoB,YAAU,OAAO,QAAQ,MAAM,CAAC,CAAC;AAC1I,aAAS,IAAI,mCAAmC,IAAI;AAAA,MAAe;AAAA,MAAkC;AAAA,MAAW;AAAA;AAAA,IAA+C,CAAC;AAChK,aAAS,IAAI,qCAAqC,IAAI,eAAe,oCAAoC,QAAW,IAAI,CAAC;AACzH,aAAS,IAAI,0BAA0B,IAAI,eAAe,uBAAuB,CAAC;AAClF,aAAS,IAAI,qCAAqC,IAAI,eAAe,oCAAoC,QAAW,IAAI,CAAC;AACzH,aAAS,IAAI,2BAA2B,IAAI,eAAe,0BAA0B,QAAW,IAAI,CAAC;AACrG,aAAS,IAAI,8BAA8B,IAAI,eAAe,6BAA6B,QAAW,IAAI,CAAC;AAC3G,aAAS,IAAI,gCAAgC,IAAI;AAAA,MAAe;AAAA,MAA+B;AAAA,MAAW;AAAA;AAAA,IAAyC,CAAC;AACpJ,aAAS,IAAI,gCAAgC,IAAI,eAAe,+BAA+B,QAAW,IAAI,CAAC;AAC/G,aAAS,IAAI,sBAAsB,IAAI;AAAA,MAAe;AAAA,MAAqB;AAAA,MAAW;AAAA;AAAA,IAAsC,CAAC;AAC7H,aAAS,IAAI,gCAAgC,IAAI,eAAe,4CAA4C,QAAW,IAAI,CAAC;AAC5H,aAAS,IAAI,sCAAsC,IAAI,eAAe,qCAAqC,QAAW,IAAI,CAAC;AAG3H,aAAS,IAAI,cAAc,IAAI;AAAA,MAAe;AAAA,MAAa;AAAA,MAAW;AAAA;AAAA,IAAsC,CAAC;AAG7G,UAAM,6BAA6B,IAAI,2BAA2B;AAClE,aAAS,IAAI,6BAA6B,0BAA0B;AACpE,+BAA2B,SAAS,qBAAqB,WAAW,iBAAiB;AACrF,aAAS,IAAI,uBAAuB,IAAI,eAAe,oBAAoB,CAAC;AAC5E,aAAS,IAAI,6BAA6B,IAAI,eAAe,0BAA0B,CAAC;AAGxF,aAAS,IAAI,sBAAsB,IAAI,eAAe,mBAAmB,CAAC;AAE1E,WAAO,IAAI,qBAAqB,QAAQ;AAAA,EACzC;AAAA,EAEQ,aAAa,UAAkC;AAKtD,UAAM,UAAU,IAAI,2BAA2B,SAAS,IAAI,2BAA2B,GAAG,MAAM,IAAI;AACpG,SAAK,OAAO,gBAAgB,cAAc,OAAO;AAGjD,UAAM,uBAAuB,aAAa,YAAY,SAAS,IAAI,oBAAoB,GAAG,KAAK,MAAM;AACrG,SAAK,OAAO,gBAAgB,iBAAiB,oBAAoB;AAGjE,UAAM,qBAAqB,aAAa,YAAY,SAAS,IAAI,mBAAmB,GAAG,KAAK,MAAM;AAClG,SAAK,OAAO,gBAAgB,eAAe,kBAAkB;AAG7D,UAAM,uBAAuB,IAAI,qBAAqB,SAAS,IAAI,qBAAqB,CAAC;AACzF,SAAK,OAAO,gBAAgB,wBAAwB,oBAAoB;AAGxE,UAAM,kBAAkB,aAAa,YAAY,SAAS,IAAI,gBAAgB,GAAG,KAAK,MAAM;AAC5F,SAAK,OAAO,gBAAgB,YAAY,eAAe;AAGvD,UAAM,mBAAmB,aAAa,YAAY,SAAS,IAAI,0BAA0B,GAAG,KAAK,MAAM;AACvG,SAAK,OAAO,gBAAgB,sBAAsB,gBAAgB;AAGlE,UAAM,6BAA6B,aAAa,YAAY,SAAS,IAAI,4BAA4B,GAAG,KAAK,MAAM;AACnH,SAAK,OAAO,gBAAgB,wBAAwB,0BAA0B;AAG9E,UAAM,iCAAiC,aAAa,YAAY,SAAS,IAAI,+BAA+B,GAAG,KAAK,MAAM;AAC1H,SAAK,OAAO,gBAAgB,2BAA2B,8BAA8B;AAErF,UAAM,6BAA6B,IAAI,kCAAkC,SAAS,IAAI,2BAA2B,CAAC;AAClH,SAAK,OAAO,gBAAgB,uBAAuB,0BAA0B;AAE7E,UAAM,qCAAqC,IAAI,0CAA0C,SAAS,IAAI,mCAAmC,CAAC;AAC1I,SAAK,OAAO,gBAAgB,+BAA+B,kCAAkC;AAE7F,UAAM,sBAAsB,IAAI,2BAA2B,SAAS,IAAI,oBAAoB,GAAG,SAAS,IAAI,wBAAwB,GAAG,SAAS,IAAI,WAAW,CAAC;AAChK,SAAK,OAAO,gBAAgB,gBAAgB,mBAAmB;AAE/D,UAAM,mBAAmB,KAAK,UAAU,SAAS,IAAI,qBAAqB,EAAE,eAAe,uBAAuB,CAAC;AACnH,SAAK,OAAO,gBAAgB,oBAAoB,aAAa,YAAY,kBAAkB,KAAK,MAAM,CAAC;AAEvG,SAAK,OAAO,gBAAgB,wCAAwC,aAAa,YAAY,SAAS,IAAI,oCAAoC,GAAG,KAAK,MAAM,CAAC;AAG7J,UAAM,6BAA6B,aAAa,YAAY,SAAS,IAAI,2BAA2B,GAAG,KAAK,MAAM;AAClH,SAAK,OAAO,gBAAgB,mCAAmC,0BAA0B;AAGzF,UAAM,sBAAsB,aAAa,YAAY,SAAS,IAAI,oBAAoB,GAAG,KAAK,MAAM;AACpG,SAAK,OAAO,gBAAgB,gBAAgB,mBAAmB;AAAA,EAChE;AAAA,EAEQ,qBAAqB,YAA+B;AAG3D,YAAQ,GAAG,qBAAqB,WAAS,kBAAkB,KAAK,CAAC;AACjE,YAAQ,GAAG,sBAAsB,CAAC,WAAoB,kBAAkB,MAAM,CAAC;AAG/E,8BAA0B,WAAS;AAClC,YAAM,UAAU,eAAe,OAAO,IAAI;AAC1C,UAAI,CAAC,SAAS;AACb;AAAA,MACD;AAEA,iBAAW,MAAM,0CAA0C,OAAO,EAAE;AAAA,IACrE,CAAC;AAAA,EACF;AAAA,EAEQ,mBAAmB,kBAAqC,yBAAyD;AASxH,qBAAiB,WAA0D,gBAAgB;AAAA,MAC1F,OAAO,wBAAwB,SAAS;AAAA,IACzC,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB,kBAAqC,YAAwC;AAC7G,QAAI,SAAS;AACZ,YAAM,CAAC,aAAa,eAAe,IAAI,MAAM,QAAQ,IAAI;AAAA,QACxD,iBAAiB,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,QAClD,mBAAmB,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,MACrD,CAAC;AACD,YAAM,qBAAqB,sBAAsB;AACjD,YAAM,kBAAkB,uBAAuB,iBAAiB,KAAK,cAAc,KAAK,gBAAgB,CAAC;AACzG,UAAI,aAAa;AAmBhB,yBAAiB,WAAsE,sBAAsB;AAAA,UAC5G,YAAY,YAAY;AAAA,UACxB,mBAAmB,YAAY;AAAA,UAC/B,gBAAgB,YAAY;AAAA,UAC5B;AAAA,UACA;AAAA,UACA,qBAAqB;AAAA,QACtB,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,wBAAwB,GAA0B;AAOjD,QAAI,EAAE,SAAS,2BAA2B,UAAU;AACnD,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,EAAE,MAAM,GAAG,CAAC;AACzB,QAAI,MAAM;AACT,WAAK,sBAAsB,KAAK,IAAI;AAEpC,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AACD;AAEA,eAAsB,KAAK,eAA2D;AAKrF,MAAI;AACH,UAAM,gBAAgB,IAAI,kBAAkB,aAAa;AACzD,YAAQ,WAAW,YAAY,uBAAuB,QAAQ;AAG9D,UAAM,cAAc,KAAK;AAEzB,YAAQ,WAAW,YAAY,uBAAuB,QAAQ;AAAA,EAC/D,SAAS,OAAO;AACf,YAAQ,WAAW,YAAY,EAAE,OAAO,MAAM,SAAS,EAAE,CAAC;AAAA,EAC3D;AACD;AAhBsB;AAkBtB,MAAM,SAAS,WAAW,MAAM;AAC/B,UAAQ,WAAW,YAAY,EAAE,SAAS,8DAA8D,CAAC;AAC1G,GAAG,GAAK;AAER,QAAQ,WAAW,KAAK,WAAW,CAAC,MAA6B;AAChE,eAAa,MAAM;AACnB,OAAK,EAAE,IAAmC;AAC3C,CAAC;",
  "names": []
}
