{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-utility/sharedProcess/sharedProcessMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from \"os\";\nimport { getDesktopEnvironment } from \"../../../base/common/desktopEnvironmentInfo.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport {\n\tonUnexpectedError,\n\tsetUnexpectedErrorHandler,\n} from \"../../../base/common/errors.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tcombinedDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { isLinux } from \"../../../base/common/platform.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\tgetCodeDisplayProtocol,\n\tgetDisplayProtocol,\n} from \"../../../base/node/osDisplayProtocolInfo.js\";\nimport { getOSReleaseInfo } from \"../../../base/node/osReleaseInfo.js\";\nimport {\n\tProxyChannel,\n\tStaticRouter,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport {\n\ttype IClientConnectionFilter,\n\tServer as UtilityProcessMessagePortServer,\n\tonce,\n} from \"../../../base/parts/ipc/node/ipc.mp.js\";\nimport type {\n\tMessageEvent,\n\tMessagePortMain,\n} from \"../../../base/parts/sandbox/node/electronTypes.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IChecksumService } from \"../../../platform/checksum/common/checksumService.js\";\nimport { ChecksumService } from \"../../../platform/checksum/node/checksumService.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport { ConfigurationService } from \"../../../platform/configuration/common/configurationService.js\";\nimport { IDiagnosticsService } from \"../../../platform/diagnostics/common/diagnostics.js\";\nimport { DiagnosticsService } from \"../../../platform/diagnostics/node/diagnosticsService.js\";\nimport { IDownloadService } from \"../../../platform/download/common/download.js\";\nimport { DownloadService } from \"../../../platform/download/common/downloadService.js\";\nimport { INativeEnvironmentService } from \"../../../platform/environment/common/environment.js\";\nimport { NativeEnvironmentService } from \"../../../platform/environment/node/environmentService.js\";\nimport { GlobalExtensionEnablementService } from \"../../../platform/extensionManagement/common/extensionEnablementService.js\";\nimport { ExtensionGalleryService } from \"../../../platform/extensionManagement/common/extensionGalleryService.js\";\nimport {\n\tIExtensionGalleryService,\n\tIExtensionManagementService,\n\tIExtensionTipsService,\n\tIGlobalExtensionEnablementService,\n} from \"../../../platform/extensionManagement/common/extensionManagement.js\";\nimport {\n\tExtensionManagementChannel,\n\tExtensionTipsChannel,\n} from \"../../../platform/extensionManagement/common/extensionManagementIpc.js\";\nimport {\n\tExtensionStorageService,\n\tIExtensionStorageService,\n} from \"../../../platform/extensionManagement/common/extensionStorage.js\";\nimport { IExtensionsProfileScannerService } from \"../../../platform/extensionManagement/common/extensionsProfileScannerService.js\";\nimport { IExtensionsScannerService } from \"../../../platform/extensionManagement/common/extensionsScannerService.js\";\nimport {\n\tExtensionManagementService,\n\tINativeServerExtensionManagementService,\n} from \"../../../platform/extensionManagement/node/extensionManagementService.js\";\nimport {\n\tExtensionSignatureVerificationService,\n\tIExtensionSignatureVerificationService,\n} from \"../../../platform/extensionManagement/node/extensionSignatureVerificationService.js\";\nimport { ExtensionTipsService } from \"../../../platform/extensionManagement/node/extensionTipsService.js\";\nimport { ExtensionsProfileScannerService } from \"../../../platform/extensionManagement/node/extensionsProfileScannerService.js\";\nimport { ExtensionsScannerService } from \"../../../platform/extensionManagement/node/extensionsScannerService.js\";\nimport { IExtensionRecommendationNotificationService } from \"../../../platform/extensionRecommendations/common/extensionRecommendations.js\";\nimport { ExtensionRecommendationNotificationServiceChannelClient } from \"../../../platform/extensionRecommendations/common/extensionRecommendationsIpc.js\";\nimport {\n\tDiskFileSystemProviderClient,\n\tLOCAL_FILE_SYSTEM_CHANNEL_NAME,\n} from \"../../../platform/files/common/diskFileSystemProviderClient.js\";\nimport { FileService } from \"../../../platform/files/common/fileService.js\";\nimport { IFileService } from \"../../../platform/files/common/files.js\";\nimport { DiskFileSystemProvider } from \"../../../platform/files/node/diskFileSystemProvider.js\";\nimport { SyncDescriptor } from \"../../../platform/instantiation/common/descriptors.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../platform/instantiation/common/instantiation.js\";\nimport { InstantiationService } from \"../../../platform/instantiation/common/instantiationService.js\";\nimport { ServiceCollection } from \"../../../platform/instantiation/common/serviceCollection.js\";\nimport {\n\tIMainProcessService,\n\tMainProcessService,\n} from \"../../../platform/ipc/common/mainProcessService.js\";\nimport { ILanguagePackService } from \"../../../platform/languagePacks/common/languagePacks.js\";\nimport { NativeLanguagePackService } from \"../../../platform/languagePacks/node/languagePacks.js\";\nimport {\n\tISharedProcessLifecycleService,\n\tSharedProcessLifecycleService,\n} from \"../../../platform/lifecycle/node/sharedProcessLifecycleService.js\";\nimport {\n\tConsoleLogger,\n\tILogService,\n\tILoggerService,\n} from \"../../../platform/log/common/log.js\";\nimport { LoggerChannelClient } from \"../../../platform/log/common/logIpc.js\";\nimport { LogService } from \"../../../platform/log/common/logService.js\";\nimport { INativeHostService } from \"../../../platform/native/common/native.js\";\nimport { NativeHostService } from \"../../../platform/native/common/nativeHostService.js\";\nimport {\n\tIPolicyService,\n\tNullPolicyService,\n} from \"../../../platform/policy/common/policy.js\";\nimport { PolicyChannelClient } from \"../../../platform/policy/common/policyIpc.js\";\nimport product from \"../../../platform/product/common/product.js\";\nimport { IProductService } from \"../../../platform/product/common/productService.js\";\nimport { IV8InspectProfilingService } from \"../../../platform/profiling/common/profiling.js\";\nimport { InspectProfilingService as V8InspectProfilingService } from \"../../../platform/profiling/node/profilingService.js\";\nimport { RemoteConnectionType } from \"../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tIRemoteSocketFactoryService,\n\tRemoteSocketFactoryService,\n} from \"../../../platform/remote/common/remoteSocketFactoryService.js\";\nimport {\n\tISharedProcessTunnelService,\n\tipcSharedProcessTunnelChannelName,\n} from \"../../../platform/remote/common/sharedProcessTunnelService.js\";\nimport { nodeSocketFactory } from \"../../../platform/remote/node/nodeSocketFactory.js\";\nimport { IRemoteTunnelService } from \"../../../platform/remoteTunnel/common/remoteTunnel.js\";\nimport { RemoteTunnelService } from \"../../../platform/remoteTunnel/node/remoteTunnelService.js\";\nimport { IRequestService } from \"../../../platform/request/common/request.js\";\nimport { RequestService } from \"../../../platform/request/electron-utility/requestService.js\";\nimport {\n\tSharedProcessLifecycle,\n\tSharedProcessRawConnection,\n} from \"../../../platform/sharedProcess/common/sharedProcess.js\";\nimport type { ISharedProcessConfiguration } from \"../../../platform/sharedProcess/node/sharedProcess.js\";\nimport { ISignService } from \"../../../platform/sign/common/sign.js\";\nimport { SignService } from \"../../../platform/sign/node/signService.js\";\nimport { IStorageService } from \"../../../platform/storage/common/storage.js\";\nimport { RemoteStorageService } from \"../../../platform/storage/common/storageService.js\";\nimport { resolveCommonProperties } from \"../../../platform/telemetry/common/commonProperties.js\";\nimport {\n\tICustomEndpointTelemetryService,\n\tITelemetryService,\n} from \"../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryAppenderChannel } from \"../../../platform/telemetry/common/telemetryIpc.js\";\nimport { TelemetryLogAppender } from \"../../../platform/telemetry/common/telemetryLogAppender.js\";\nimport { TelemetryService } from \"../../../platform/telemetry/common/telemetryService.js\";\nimport {\n\ttype ITelemetryAppender,\n\tNullAppender,\n\tNullTelemetryService,\n\tgetPiiPathsFromEnvironment,\n\tisInternalTelemetry,\n\tisLoggingOnly,\n\tsupportsTelemetry,\n} from \"../../../platform/telemetry/common/telemetryUtils.js\";\nimport { OneDataSystemAppender } from \"../../../platform/telemetry/node/1dsAppender.js\";\nimport { CustomEndpointTelemetryService } from \"../../../platform/telemetry/node/customEndpointTelemetryService.js\";\nimport { ISharedTunnelsService } from \"../../../platform/tunnel/common/tunnel.js\";\nimport { SharedProcessTunnelService } from \"../../../platform/tunnel/node/sharedProcessTunnelService.js\";\nimport { SharedTunnelsService } from \"../../../platform/tunnel/node/tunnelService.js\";\nimport { IUriIdentityService } from \"../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { UriIdentityService } from \"../../../platform/uriIdentity/common/uriIdentityService.js\";\nimport { FileUserDataProvider } from \"../../../platform/userData/common/fileUserDataProvider.js\";\nimport { IUserDataProfilesService } from \"../../../platform/userDataProfile/common/userDataProfile.js\";\nimport { UserDataProfilesService } from \"../../../platform/userDataProfile/common/userDataProfileIpc.js\";\nimport { IUserDataProfileStorageService } from \"../../../platform/userDataProfile/common/userDataProfileStorageService.js\";\nimport { SharedProcessUserDataProfileStorageService } from \"../../../platform/userDataProfile/node/userDataProfileStorageService.js\";\nimport {\n\tIIgnoredExtensionsManagementService,\n\tIgnoredExtensionsManagementService,\n} from \"../../../platform/userDataSync/common/ignoredExtensions.js\";\nimport {\n\tIUserDataSyncEnablementService,\n\tIUserDataSyncLocalStoreService,\n\tIUserDataSyncLogService,\n\tIUserDataSyncResourceProviderService,\n\tIUserDataSyncService,\n\tIUserDataSyncStoreManagementService,\n\tIUserDataSyncStoreService,\n\tIUserDataSyncUtilService,\n\tregisterConfiguration as registerUserDataSyncConfiguration,\n} from \"../../../platform/userDataSync/common/userDataSync.js\";\nimport {\n\tIUserDataSyncAccountService,\n\tUserDataSyncAccountService,\n} from \"../../../platform/userDataSync/common/userDataSyncAccount.js\";\nimport { UserDataSyncEnablementService } from \"../../../platform/userDataSync/common/userDataSyncEnablementService.js\";\nimport {\n\tUserDataSyncAccountServiceChannel,\n\tUserDataSyncStoreManagementServiceChannel,\n} from \"../../../platform/userDataSync/common/userDataSyncIpc.js\";\nimport { UserDataSyncLocalStoreService } from \"../../../platform/userDataSync/common/userDataSyncLocalStoreService.js\";\nimport { UserDataSyncLogService } from \"../../../platform/userDataSync/common/userDataSyncLog.js\";\nimport {\n\tIUserDataSyncMachinesService,\n\tUserDataSyncMachinesService,\n} from \"../../../platform/userDataSync/common/userDataSyncMachines.js\";\nimport { UserDataSyncResourceProviderService } from \"../../../platform/userDataSync/common/userDataSyncResourceProvider.js\";\nimport { UserDataSyncService } from \"../../../platform/userDataSync/common/userDataSyncService.js\";\nimport { UserDataSyncServiceChannel } from \"../../../platform/userDataSync/common/userDataSyncServiceIpc.js\";\nimport {\n\tUserDataSyncStoreManagementService,\n\tUserDataSyncStoreService,\n} from \"../../../platform/userDataSync/common/userDataSyncStoreService.js\";\nimport { UserDataAutoSyncService } from \"../../../platform/userDataSync/node/userDataAutoSyncService.js\";\nimport { ActiveWindowManager } from \"../../../platform/windows/node/windowTracker.js\";\nimport { CodeCacheCleaner } from \"./contrib/codeCacheCleaner.js\";\nimport { ExtensionsContributions } from \"./contrib/extensions.js\";\nimport { LanguagePackCachedDataCleaner } from \"./contrib/languagePackCachedDataCleaner.js\";\nimport { LocalizationsUpdater } from \"./contrib/localizationsUpdater.js\";\nimport { LogsDataCleaner } from \"./contrib/logsDataCleaner.js\";\nimport { UnusedWorkspaceStorageDataCleaner } from \"./contrib/storageDataCleaner.js\";\nimport { UserDataProfilesCleaner } from \"./contrib/userDataProfilesCleaner.js\";\n\nclass SharedProcessMain extends Disposable implements IClientConnectionFilter {\n\tprivate readonly server = this._register(\n\t\tnew UtilityProcessMessagePortServer(this),\n\t);\n\n\tprivate lifecycleService: SharedProcessLifecycleService | undefined =\n\t\tundefined;\n\n\tprivate readonly onDidWindowConnectRaw = this._register(\n\t\tnew Emitter<MessagePortMain>(),\n\t);\n\n\tconstructor(private configuration: ISharedProcessConfiguration) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Shared process lifecycle\n\t\tlet didExit = false;\n\t\tconst onExit = () => {\n\t\t\tif (!didExit) {\n\t\t\t\tdidExit = true;\n\n\t\t\t\tthis.lifecycleService?.fireOnWillShutdown();\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t};\n\t\tprocess.once(\"exit\", onExit);\n\t\tonce(process.parentPort, SharedProcessLifecycle.exit, onExit);\n\t}\n\n\tasync init(): Promise<void> {\n\t\t// Services\n\t\tconst instantiationService = await this.initServices();\n\n\t\t// Config\n\t\tregisterUserDataSyncConfiguration();\n\n\t\tinstantiationService.invokeFunction((accessor) => {\n\t\t\tconst logService = accessor.get(ILogService);\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tconst userDataProfilesService = accessor.get(\n\t\t\t\tIUserDataProfilesService,\n\t\t\t);\n\n\t\t\t// Log info\n\t\t\tlogService.trace(\n\t\t\t\t\"sharedProcess configuration\",\n\t\t\t\tJSON.stringify(this.configuration),\n\t\t\t);\n\n\t\t\t// Channels\n\t\t\tthis.initChannels(accessor);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\n\t\t\t// Report Profiles Info\n\t\t\tthis.reportProfilesInfo(telemetryService, userDataProfilesService);\n\t\t\tthis._register(\n\t\t\t\tuserDataProfilesService.onDidChangeProfiles(() =>\n\t\t\t\t\tthis.reportProfilesInfo(\n\t\t\t\t\t\ttelemetryService,\n\t\t\t\t\t\tuserDataProfilesService,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// Report Client OS/DE Info\n\t\t\tthis.reportClientOSInfo(telemetryService, logService);\n\t\t});\n\n\t\t// Instantiate Contributions\n\t\tthis._register(\n\t\t\tcombinedDisposable(\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tCodeCacheCleaner,\n\t\t\t\t\tthis.configuration.codeCachePath,\n\t\t\t\t),\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tLanguagePackCachedDataCleaner,\n\t\t\t\t),\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tUnusedWorkspaceStorageDataCleaner,\n\t\t\t\t),\n\t\t\t\tinstantiationService.createInstance(LogsDataCleaner),\n\t\t\t\tinstantiationService.createInstance(LocalizationsUpdater),\n\t\t\t\tinstantiationService.createInstance(ExtensionsContributions),\n\t\t\t\tinstantiationService.createInstance(UserDataProfilesCleaner),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async initServices(): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Main Process\n\t\tconst mainRouter = new StaticRouter((ctx) => ctx === \"main\");\n\t\tconst mainProcessService = new MainProcessService(\n\t\t\tthis.server,\n\t\t\tmainRouter,\n\t\t);\n\t\tservices.set(IMainProcessService, mainProcessService);\n\n\t\t// Policies\n\t\tconst policyService = this.configuration.policiesData\n\t\t\t? new PolicyChannelClient(\n\t\t\t\t\tthis.configuration.policiesData,\n\t\t\t\t\tmainProcessService.getChannel(\"policy\"),\n\t\t\t\t)\n\t\t\t: new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(\n\t\t\tthis.configuration.args,\n\t\t\tproductService,\n\t\t);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerChannelClient(\n\t\t\tundefined,\n\t\t\tthis.configuration.logLevel,\n\t\t\tenvironmentService.logsHome,\n\t\t\tthis.configuration.loggers.map((loggerResource) => ({\n\t\t\t\t...loggerResource,\n\t\t\t\tresource: URI.revive(loggerResource.resource),\n\t\t\t})),\n\t\t\tmainProcessService.getChannel(\"logger\"),\n\t\t);\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logger = this._register(\n\t\t\tloggerService.createLogger(\"sharedprocess\", {\n\t\t\t\tname: localize(\"sharedLog\", \"Shared\"),\n\t\t\t}),\n\t\t);\n\t\tconst consoleLogger = this._register(\n\t\t\tnew ConsoleLogger(logger.getLevel()),\n\t\t);\n\t\tconst logService = this._register(\n\t\t\tnew LogService(logger, [consoleLogger]),\n\t\t);\n\t\tservices.set(ILogService, logService);\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService = this._register(\n\t\t\tnew SharedProcessLifecycleService(logService),\n\t\t);\n\t\tservices.set(ISharedProcessLifecycleService, this.lifecycleService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(\n\t\t\tnew DiskFileSystemProvider(logService),\n\t\t);\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = this._register(\n\t\t\tnew UserDataProfilesService(\n\t\t\t\tthis.configuration.profiles.all,\n\t\t\t\tURI.revive(this.configuration.profiles.home).with({\n\t\t\t\t\tscheme: environmentService.userRoamingDataHome.scheme,\n\t\t\t\t}),\n\t\t\t\tmainProcessService.getChannel(\"userDataProfiles\"),\n\t\t\t),\n\t\t);\n\t\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\tconst userDataFileSystemProvider = this._register(\n\t\t\tnew FileUserDataProvider(\n\t\t\t\tSchemas.file,\n\t\t\t\t// Specifically for user data, use the disk file system provider\n\t\t\t\t// from the main process to enable atomic read/write operations.\n\t\t\t\t// Since user data can change very frequently across multiple\n\t\t\t\t// processes, we want a single process handling these operations.\n\t\t\t\tthis._register(\n\t\t\t\t\tnew DiskFileSystemProviderClient(\n\t\t\t\t\t\tmainProcessService.getChannel(\n\t\t\t\t\t\t\tLOCAL_FILE_SYSTEM_CHANNEL_NAME,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{ pathCaseSensitive: isLinux },\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\tuserDataProfilesService,\n\t\t\t\turiIdentityService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tfileService.registerProvider(\n\t\t\tSchemas.vscodeUserData,\n\t\t\tuserDataFileSystemProvider,\n\t\t);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(\n\t\t\tnew ConfigurationService(\n\t\t\t\tuserDataProfilesService.defaultProfile.settingsResource,\n\t\t\t\tfileService,\n\t\t\t\tpolicyService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Storage (global access only)\n\t\tconst storageService = new RemoteStorageService(\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tdefaultProfile: userDataProfilesService.defaultProfile,\n\t\t\t\tcurrentProfile: userDataProfilesService.defaultProfile,\n\t\t\t},\n\t\t\tmainProcessService,\n\t\t\tenvironmentService,\n\t\t);\n\t\tservices.set(IStorageService, storageService);\n\t\tthis._register(toDisposable(() => storageService.flush()));\n\n\t\t// Initialize config & storage in parallel\n\t\tawait Promise.all([\n\t\t\tconfigurationService.initialize(),\n\t\t\tstorageService.initialize(),\n\t\t]);\n\n\t\t// Request\n\t\tconst requestService = new RequestService(\n\t\t\tconfigurationService,\n\t\t\tenvironmentService,\n\t\t\tlogService,\n\t\t);\n\t\tservices.set(IRequestService, requestService);\n\n\t\t// Checksum\n\t\tservices.set(\n\t\t\tIChecksumService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tChecksumService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// V8 Inspect profiler\n\t\tservices.set(\n\t\t\tIV8InspectProfilingService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tV8InspectProfilingService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Native Host\n\t\tconst nativeHostService = new NativeHostService(\n\t\t\t-1 /* we are not running in a browser window context */,\n\t\t\tmainProcessService,\n\t\t) as INativeHostService;\n\t\tservices.set(INativeHostService, nativeHostService);\n\n\t\t// Download\n\t\tservices.set(\n\t\t\tIDownloadService,\n\t\t\tnew SyncDescriptor(DownloadService, undefined, true),\n\t\t);\n\n\t\t// Extension recommendations\n\t\tconst activeWindowManager = this._register(\n\t\t\tnew ActiveWindowManager(nativeHostService),\n\t\t);\n\t\tconst activeWindowRouter = new StaticRouter((ctx) =>\n\t\t\tactiveWindowManager.getActiveClientId().then((id) => ctx === id),\n\t\t);\n\t\tservices.set(\n\t\t\tIExtensionRecommendationNotificationService,\n\t\t\tnew ExtensionRecommendationNotificationServiceChannelClient(\n\t\t\t\tthis.server.getChannel(\n\t\t\t\t\t\"extensionRecommendationNotification\",\n\t\t\t\t\tactiveWindowRouter,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Telemetry\n\t\tlet telemetryService: ITelemetryService;\n\t\tconst appenders: ITelemetryAppender[] = [];\n\t\tconst internalTelemetry = isInternalTelemetry(\n\t\t\tproductService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tconst logAppender = new TelemetryLogAppender(\n\t\t\t\tlogService,\n\t\t\t\tloggerService,\n\t\t\t\tenvironmentService,\n\t\t\t\tproductService,\n\t\t\t);\n\t\t\tappenders.push(logAppender);\n\t\t\tif (\n\t\t\t\t!isLoggingOnly(productService, environmentService) &&\n\t\t\t\tproductService.aiConfig?.ariaKey\n\t\t\t) {\n\t\t\t\tconst collectorAppender = new OneDataSystemAppender(\n\t\t\t\t\trequestService,\n\t\t\t\t\tinternalTelemetry,\n\t\t\t\t\t\"monacoworkbench\",\n\t\t\t\t\tnull,\n\t\t\t\t\tproductService.aiConfig.ariaKey,\n\t\t\t\t);\n\t\t\t\tthis._register(toDisposable(() => collectorAppender.flush())); // Ensure the 1DS appender is disposed so that it flushes remaining data\n\t\t\t\tappenders.push(collectorAppender);\n\t\t\t}\n\n\t\t\ttelemetryService = new TelemetryService(\n\t\t\t\t{\n\t\t\t\t\tappenders,\n\t\t\t\t\tcommonProperties: resolveCommonProperties(\n\t\t\t\t\t\trelease(),\n\t\t\t\t\t\thostname(),\n\t\t\t\t\t\tprocess.arch,\n\t\t\t\t\t\tproductService.commit,\n\t\t\t\t\t\tproductService.version,\n\t\t\t\t\t\tthis.configuration.machineId,\n\t\t\t\t\t\tthis.configuration.sqmId,\n\t\t\t\t\t\tthis.configuration.devDeviceId,\n\t\t\t\t\t\tinternalTelemetry,\n\t\t\t\t\t),\n\t\t\t\t\tsendErrorTelemetry: true,\n\t\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService),\n\t\t\t\t},\n\t\t\t\tconfigurationService,\n\t\t\t\tproductService,\n\t\t\t);\n\t\t} else {\n\t\t\ttelemetryService = NullTelemetryService;\n\t\t\tconst nullAppender = NullAppender;\n\t\t\tappenders.push(nullAppender);\n\t\t}\n\n\t\tthis.server.registerChannel(\n\t\t\t\"telemetryAppender\",\n\t\t\tnew TelemetryAppenderChannel(appenders),\n\t\t);\n\t\tservices.set(ITelemetryService, telemetryService);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryService =\n\t\t\tnew CustomEndpointTelemetryService(\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogService,\n\t\t\t\tloggerService,\n\t\t\t\tenvironmentService,\n\t\t\t\tproductService,\n\t\t\t);\n\t\tservices.set(\n\t\t\tICustomEndpointTelemetryService,\n\t\t\tcustomEndpointTelemetryService,\n\t\t);\n\n\t\t// Extension Management\n\t\tservices.set(\n\t\t\tIExtensionsProfileScannerService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tExtensionsProfileScannerService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIExtensionsScannerService,\n\t\t\tnew SyncDescriptor(ExtensionsScannerService, undefined, true),\n\t\t);\n\n\t\tif (productService.quality === \"stable\") {\n\t\t\tservices.set(\n\t\t\t\tIExtensionSignatureVerificationService,\n\t\t\t\tnew SyncDescriptor(\n\t\t\t\t\tExtensionSignatureVerificationService,\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\t// Do extension signature verification in the main process in insiders\n\t\t\tservices.set(\n\t\t\t\tIExtensionSignatureVerificationService,\n\t\t\t\tProxyChannel.toService(\n\t\t\t\t\tmainProcessService.getChannel(\n\t\t\t\t\t\t\"signatureVerificationService\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tservices.set(\n\t\t\tINativeServerExtensionManagementService,\n\t\t\tnew SyncDescriptor(ExtensionManagementService, undefined, true),\n\t\t);\n\n\t\t// Extension Gallery\n\t\tservices.set(\n\t\t\tIExtensionGalleryService,\n\t\t\tnew SyncDescriptor(ExtensionGalleryService, undefined, true),\n\t\t);\n\n\t\t// Extension Tips\n\t\tservices.set(\n\t\t\tIExtensionTipsService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tExtensionTipsService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* Eagerly scans and computes exe based recommendations */,\n\t\t\t),\n\t\t);\n\n\t\t// Localizations\n\t\tservices.set(\n\t\t\tILanguagePackService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tNativeLanguagePackService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Diagnostics\n\t\tservices.set(\n\t\t\tIDiagnosticsService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tDiagnosticsService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Settings Sync\n\t\tservices.set(\n\t\t\tIUserDataSyncAccountService,\n\t\t\tnew SyncDescriptor(UserDataSyncAccountService, undefined, true),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncLogService,\n\t\t\tnew SyncDescriptor(UserDataSyncLogService, undefined, true),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncUtilService,\n\t\t\tProxyChannel.toService(\n\t\t\t\tthis.server.getChannel(\n\t\t\t\t\t\"userDataSyncUtil\",\n\t\t\t\t\t(client) => client.ctx !== \"main\",\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIGlobalExtensionEnablementService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tGlobalExtensionEnablementService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* Eagerly resets installed extensions */,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIIgnoredExtensionsManagementService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tIgnoredExtensionsManagementService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIExtensionStorageService,\n\t\t\tnew SyncDescriptor(ExtensionStorageService),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncStoreManagementService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tUserDataSyncStoreManagementService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncStoreService,\n\t\t\tnew SyncDescriptor(UserDataSyncStoreService, undefined, true),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncMachinesService,\n\t\t\tnew SyncDescriptor(UserDataSyncMachinesService, undefined, true),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncLocalStoreService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tUserDataSyncLocalStoreService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* Eagerly cleans up old backups */,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncEnablementService,\n\t\t\tnew SyncDescriptor(UserDataSyncEnablementService, undefined, true),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tUserDataSyncService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* Initializes the Sync State */,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataProfileStorageService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tSharedProcessUserDataProfileStorageService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tservices.set(\n\t\t\tIUserDataSyncResourceProviderService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tUserDataSyncResourceProviderService,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\n\t\t// Signing\n\t\tservices.set(\n\t\t\tISignService,\n\t\t\tnew SyncDescriptor(\n\t\t\t\tSignService,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* proxied to other processes */,\n\t\t\t),\n\t\t);\n\n\t\t// Tunnel\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tservices.set(IRemoteSocketFactoryService, remoteSocketFactoryService);\n\t\tremoteSocketFactoryService.register(\n\t\t\tRemoteConnectionType.WebSocket,\n\t\t\tnodeSocketFactory,\n\t\t);\n\t\tservices.set(\n\t\t\tISharedTunnelsService,\n\t\t\tnew SyncDescriptor(SharedTunnelsService),\n\t\t);\n\t\tservices.set(\n\t\t\tISharedProcessTunnelService,\n\t\t\tnew SyncDescriptor(SharedProcessTunnelService),\n\t\t);\n\n\t\t// Remote Tunnel\n\t\tservices.set(\n\t\t\tIRemoteTunnelService,\n\t\t\tnew SyncDescriptor(RemoteTunnelService),\n\t\t);\n\n\t\treturn new InstantiationService(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor): void {\n\t\t// const disposables = this._register(new DisposableStore());\n\n\t\t// Extensions Management\n\t\tconst channel = new ExtensionManagementChannel(\n\t\t\taccessor.get(IExtensionManagementService),\n\t\t\t() => null,\n\t\t);\n\t\tthis.server.registerChannel(\"extensions\", channel);\n\n\t\t// Language Packs\n\t\tconst languagePacksChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(ILanguagePackService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\"languagePacks\", languagePacksChannel);\n\n\t\t// Diagnostics\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IDiagnosticsService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\"diagnostics\", diagnosticsChannel);\n\n\t\t// Extension Tips\n\t\tconst extensionTipsChannel = new ExtensionTipsChannel(\n\t\t\taccessor.get(IExtensionTipsService),\n\t\t);\n\t\tthis.server.registerChannel(\n\t\t\t\"extensionTipsService\",\n\t\t\textensionTipsChannel,\n\t\t);\n\n\t\t// Checksum\n\t\tconst checksumChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IChecksumService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\"checksum\", checksumChannel);\n\n\t\t// Profiling\n\t\tconst profilingChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IV8InspectProfilingService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\"v8InspectProfiling\", profilingChannel);\n\n\t\t// Settings Sync\n\t\tconst userDataSyncMachineChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IUserDataSyncMachinesService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\n\t\t\t\"userDataSyncMachines\",\n\t\t\tuserDataSyncMachineChannel,\n\t\t);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(ICustomEndpointTelemetryService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\n\t\t\t\"customEndpointTelemetry\",\n\t\t\tcustomEndpointTelemetryChannel,\n\t\t);\n\n\t\tconst userDataSyncAccountChannel =\n\t\t\tnew UserDataSyncAccountServiceChannel(\n\t\t\t\taccessor.get(IUserDataSyncAccountService),\n\t\t\t);\n\t\tthis.server.registerChannel(\n\t\t\t\"userDataSyncAccount\",\n\t\t\tuserDataSyncAccountChannel,\n\t\t);\n\n\t\tconst userDataSyncStoreManagementChannel =\n\t\t\tnew UserDataSyncStoreManagementServiceChannel(\n\t\t\t\taccessor.get(IUserDataSyncStoreManagementService),\n\t\t\t);\n\t\tthis.server.registerChannel(\n\t\t\t\"userDataSyncStoreManagement\",\n\t\t\tuserDataSyncStoreManagementChannel,\n\t\t);\n\n\t\tconst userDataSyncChannel = new UserDataSyncServiceChannel(\n\t\t\taccessor.get(IUserDataSyncService),\n\t\t\taccessor.get(IUserDataProfilesService),\n\t\t\taccessor.get(ILogService),\n\t\t);\n\t\tthis.server.registerChannel(\"userDataSync\", userDataSyncChannel);\n\n\t\tconst userDataAutoSync = this._register(\n\t\t\taccessor\n\t\t\t\t.get(IInstantiationService)\n\t\t\t\t.createInstance(UserDataAutoSyncService),\n\t\t);\n\t\tthis.server.registerChannel(\n\t\t\t\"userDataAutoSync\",\n\t\t\tProxyChannel.fromService(userDataAutoSync, this._store),\n\t\t);\n\n\t\tthis.server.registerChannel(\n\t\t\t\"IUserDataSyncResourceProviderService\",\n\t\t\tProxyChannel.fromService(\n\t\t\t\taccessor.get(IUserDataSyncResourceProviderService),\n\t\t\t\tthis._store,\n\t\t\t),\n\t\t);\n\n\t\t// Tunnel\n\t\tconst sharedProcessTunnelChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(ISharedProcessTunnelService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\n\t\t\tipcSharedProcessTunnelChannelName,\n\t\t\tsharedProcessTunnelChannel,\n\t\t);\n\n\t\t// Remote Tunnel\n\t\tconst remoteTunnelChannel = ProxyChannel.fromService(\n\t\t\taccessor.get(IRemoteTunnelService),\n\t\t\tthis._store,\n\t\t);\n\t\tthis.server.registerChannel(\"remoteTunnel\", remoteTunnelChannel);\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\t\t// Listen on global error events\n\t\tprocess.on(\"uncaughtException\", (error) => onUnexpectedError(error));\n\t\tprocess.on(\"unhandledRejection\", (reason: unknown) =>\n\t\t\tonUnexpectedError(reason),\n\t\t);\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler((error) => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(\n\t\t\t\t`[uncaught exception in sharedProcess]: ${message}`,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate reportProfilesInfo(\n\t\ttelemetryService: ITelemetryService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t): void {\n\t\ttype ProfilesInfoClassification = {\n\t\t\towner: \"sandy081\";\n\t\t\tcomment: \"Report profiles information\";\n\t\t\tcount: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"Number of profiles\";\n\t\t\t};\n\t\t};\n\t\ttype ProfilesInfoEvent = {\n\t\t\tcount: number;\n\t\t};\n\t\ttelemetryService.publicLog2<\n\t\t\tProfilesInfoEvent,\n\t\t\tProfilesInfoClassification\n\t\t>(\"profilesInfo\", {\n\t\t\tcount: userDataProfilesService.profiles.length,\n\t\t});\n\t}\n\n\tprivate async reportClientOSInfo(\n\t\ttelemetryService: ITelemetryService,\n\t\tlogService: ILogService,\n\t): Promise<void> {\n\t\tif (isLinux) {\n\t\t\tconst [releaseInfo, displayProtocol] = await Promise.all([\n\t\t\t\tgetOSReleaseInfo(logService.error.bind(logService)),\n\t\t\t\tgetDisplayProtocol(logService.error.bind(logService)),\n\t\t\t]);\n\t\t\tconst desktopEnvironment = getDesktopEnvironment();\n\t\t\tconst codeSessionType = getCodeDisplayProtocol(\n\t\t\t\tdisplayProtocol,\n\t\t\t\tthis.configuration.args[\"ozone-platform\"],\n\t\t\t);\n\t\t\tif (releaseInfo) {\n\t\t\t\ttype ClientPlatformInfoClassification = {\n\t\t\t\t\tplatformId: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A string identifying the operating system without any version information.\";\n\t\t\t\t\t};\n\t\t\t\t\tplatformVersionId: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A string identifying the operating system version excluding any name information or release code.\";\n\t\t\t\t\t};\n\t\t\t\t\tplatformIdLike: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A string identifying the operating system the current OS derivate is closely related to.\";\n\t\t\t\t\t};\n\t\t\t\t\tdesktopEnvironment: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A string identifying the desktop environment the user is using.\";\n\t\t\t\t\t};\n\t\t\t\t\tdisplayProtocol: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A string identifying the users display protocol type.\";\n\t\t\t\t\t};\n\t\t\t\t\tcodeDisplayProtocol: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A string identifying the vscode display protocol type.\";\n\t\t\t\t\t};\n\t\t\t\t\towner: \"benibenj\";\n\t\t\t\t\tcomment: \"Provides insight into the distro and desktop environment information on Linux.\";\n\t\t\t\t};\n\t\t\t\ttype ClientPlatformInfoEvent = {\n\t\t\t\t\tplatformId: string;\n\t\t\t\t\tplatformVersionId: string | undefined;\n\t\t\t\t\tplatformIdLike: string | undefined;\n\t\t\t\t\tdesktopEnvironment: string | undefined;\n\t\t\t\t\tdisplayProtocol: string | undefined;\n\t\t\t\t\tcodeDisplayProtocol: string | undefined;\n\t\t\t\t};\n\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\tClientPlatformInfoEvent,\n\t\t\t\t\tClientPlatformInfoClassification\n\t\t\t\t>(\"clientPlatformInfo\", {\n\t\t\t\t\tplatformId: releaseInfo.id,\n\t\t\t\t\tplatformVersionId: releaseInfo.version_id,\n\t\t\t\t\tplatformIdLike: releaseInfo.id_like,\n\t\t\t\t\tdesktopEnvironment: desktopEnvironment,\n\t\t\t\t\tdisplayProtocol: displayProtocol,\n\t\t\t\t\tcodeDisplayProtocol: codeSessionType,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thandledClientConnection(e: MessageEvent): boolean {\n\t\t// This filter on message port messages will look for\n\t\t// attempts of a window to connect raw to the shared\n\t\t// process to handle these connections separate from\n\t\t// our IPC based protocol.\n\n\t\tif (e.data !== SharedProcessRawConnection.response) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst port = e.ports.at(0);\n\t\tif (port) {\n\t\t\tthis.onDidWindowConnectRaw.fire(port);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport async function main(\n\tconfiguration: ISharedProcessConfiguration,\n): Promise<void> {\n\t// create shared process and signal back to main that we are\n\t// ready to accept message ports as client connections\n\n\ttry {\n\t\tconst sharedProcess = new SharedProcessMain(configuration);\n\t\tprocess.parentPort.postMessage(SharedProcessLifecycle.ipcReady);\n\n\t\t// await initialization and signal this back to electron-main\n\t\tawait sharedProcess.init();\n\n\t\tprocess.parentPort.postMessage(SharedProcessLifecycle.initDone);\n\t} catch (error) {\n\t\tprocess.parentPort.postMessage({ error: error.toString() });\n\t}\n}\n\nconst handle = setTimeout(() => {\n\tprocess.parentPort.postMessage({\n\t\twarning: \"[SharedProcess] did not receive configuration within 30s...\",\n\t});\n}, 30000);\n\nprocess.parentPort.once(\"message\", (e: Electron.MessageEvent) => {\n\tclearTimeout(handle);\n\tmain(e.data as ISharedProcessConfiguration);\n});\n"],
  "mappings": "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",
  "names": []
}
