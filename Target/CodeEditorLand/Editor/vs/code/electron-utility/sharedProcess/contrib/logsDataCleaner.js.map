{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-utility/sharedProcess/contrib/logsDataCleaner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { join } from \"../../../../base/common/path.js\";\nimport { basename, dirname } from \"../../../../base/common/resources.js\";\nimport { Promises } from \"../../../../base/node/pfs.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\n\nexport class LogsDataCleaner extends Disposable {\n\tconstructor(\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis.cleanUpOldLogs();\n\t\t}, 10 * 1000 /* after 10s */));\n\t\tscheduler.schedule();\n\t}\n\n\tprivate async cleanUpOldLogs(): Promise<void> {\n\t\tthis.logService.trace(\"[logs cleanup]: Starting to clean up old logs.\");\n\n\t\ttry {\n\t\t\tconst currentLog = basename(this.environmentService.logsHome);\n\t\t\tconst logsRoot = dirname(\n\t\t\t\tthis.environmentService.logsHome.with({ scheme: Schemas.file }),\n\t\t\t).fsPath;\n\t\t\tconst logFiles = await Promises.readdir(logsRoot);\n\n\t\t\tconst allSessions = logFiles.filter((logFile) =>\n\t\t\t\t/^\\d{8}T\\d{6}$/.test(logFile),\n\t\t\t);\n\t\t\tconst oldSessions = allSessions\n\t\t\t\t.sort()\n\t\t\t\t.filter((session) => session !== currentLog);\n\t\t\tconst sessionsToDelete = oldSessions.slice(\n\t\t\t\t0,\n\t\t\t\tMath.max(0, oldSessions.length - 9),\n\t\t\t);\n\n\t\t\tif (sessionsToDelete.length > 0) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`[logs cleanup]: Removing log folders '${sessionsToDelete.join(\", \")}'`,\n\t\t\t\t);\n\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tsessionsToDelete.map((sessionToDelete) =>\n\t\t\t\t\t\tPromises.rm(join(logsRoot, sessionToDelete)),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,UAAU,eAAe;AAClC,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAErB,IAAM,kBAAN,cAA8B,WAAW;AAAA,EAC/C,YACuC,oBACR,YAC7B;AACD,UAAM;AAHgC;AACR;AAI9B,UAAM,YAAY,KAAK,UAAU,IAAI;AAAA,MAAiB,MAAM;AAC3D,aAAK,eAAe;AAAA,MACrB;AAAA,MAAG,KAAK;AAAA;AAAA,IAAoB,CAAC;AAC7B,cAAU,SAAS;AAAA,EACpB;AAAA,EA1BD,OAegD;AAAA;AAAA;AAAA,EAa/C,MAAc,iBAAgC;AAC7C,SAAK,WAAW,MAAM,gDAAgD;AAEtE,QAAI;AACH,YAAM,aAAa,SAAS,KAAK,mBAAmB,QAAQ;AAC5D,YAAM,WAAW;AAAA,QAChB,KAAK,mBAAmB,SAAS,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC;AAAA,MAC/D,EAAE;AACF,YAAM,WAAW,MAAM,SAAS,QAAQ,QAAQ;AAEhD,YAAM,cAAc,SAAS;AAAA,QAAO,CAAC,YACpC,gBAAgB,KAAK,OAAO;AAAA,MAC7B;AACA,YAAM,cAAc,YAClB,KAAK,EACL,OAAO,CAAC,YAAY,YAAY,UAAU;AAC5C,YAAM,mBAAmB,YAAY;AAAA,QACpC;AAAA,QACA,KAAK,IAAI,GAAG,YAAY,SAAS,CAAC;AAAA,MACnC;AAEA,UAAI,iBAAiB,SAAS,GAAG;AAChC,aAAK,WAAW;AAAA,UACf,yCAAyC,iBAAiB,KAAK,IAAI,CAAC;AAAA,QACrE;AAEA,cAAM,QAAQ;AAAA,UACb,iBAAiB;AAAA,YAAI,CAAC,oBACrB,SAAS,GAAG,KAAK,UAAU,eAAe,CAAC;AAAA,UAC5C;AAAA,QACD;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,wBAAkB,KAAK;AAAA,IACxB;AAAA,EACD;AACD;AAjDa,kBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,GAHU;",
  "names": []
}
