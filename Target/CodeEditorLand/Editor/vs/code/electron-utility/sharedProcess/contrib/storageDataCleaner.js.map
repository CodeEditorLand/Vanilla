{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-utility/sharedProcess/contrib/storageDataCleaner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { join } from \"../../../../base/common/path.js\";\nimport { Promises } from \"../../../../base/node/pfs.js\";\nimport { INativeEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IMainProcessService } from \"../../../../platform/ipc/common/mainProcessService.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { StorageClient } from \"../../../../platform/storage/common/storageIpc.js\";\nimport { EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE } from \"../../../../platform/workspace/common/workspace.js\";\nimport { NON_EMPTY_WORKSPACE_ID_LENGTH } from \"../../../../platform/workspaces/node/workspaces.js\";\n\nexport class UnusedWorkspaceStorageDataCleaner extends Disposable {\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IMainProcessService private readonly mainProcessService: IMainProcessService\n\t) {\n\t\tsuper();\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis.cleanUpStorage();\n\t\t}, 30 * 1000 /* after 30s */));\n\t\tscheduler.schedule();\n\t}\n\n\tprivate async cleanUpStorage(): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"[storage cleanup]: Starting to clean up workspace storage folders for unused empty workspaces.\",\n\t\t);\n\n\t\ttry {\n\t\t\tconst workspaceStorageHome =\n\t\t\t\tthis.environmentService.workspaceStorageHome.with({\n\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t}).fsPath;\n\t\t\tconst workspaceStorageFolders =\n\t\t\t\tawait Promises.readdir(workspaceStorageHome);\n\t\t\tconst storageClient = new StorageClient(\n\t\t\t\tthis.mainProcessService.getChannel(\"storage\"),\n\t\t\t);\n\n\t\t\tawait Promise.all(\n\t\t\t\tworkspaceStorageFolders.map(async (workspaceStorageFolder) => {\n\t\t\t\t\tconst workspaceStoragePath = join(\n\t\t\t\t\t\tworkspaceStorageHome,\n\t\t\t\t\t\tworkspaceStorageFolder,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tworkspaceStorageFolder.length ===\n\t\t\t\t\t\tNON_EMPTY_WORKSPACE_ID_LENGTH\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn; // keep workspace storage for folders/workspaces that can be accessed still\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tworkspaceStorageFolder ===\n\t\t\t\t\t\tEXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE.id\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn; // keep workspace storage for empty extension development workspaces\n\t\t\t\t\t}\n\n\t\t\t\t\tconst windows = await this.nativeHostService.getWindows({\n\t\t\t\t\t\tincludeAuxiliaryWindows: false,\n\t\t\t\t\t});\n\t\t\t\t\tif (\n\t\t\t\t\t\twindows.some(\n\t\t\t\t\t\t\t(window) =>\n\t\t\t\t\t\t\t\twindow.workspace?.id === workspaceStorageFolder,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn; // keep workspace storage for empty workspaces opened as window\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isStorageUsed =\n\t\t\t\t\t\tawait storageClient.isUsed(workspaceStoragePath);\n\t\t\t\t\tif (isStorageUsed) {\n\t\t\t\t\t\treturn; // keep workspace storage for empty workspaces that are in use\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`[storage cleanup]: Deleting workspace storage folder ${workspaceStorageFolder} as it seems to be an unused empty workspace.`,\n\t\t\t\t\t);\n\n\t\t\t\t\tawait Promises.rm(workspaceStoragePath);\n\t\t\t\t}),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,gBAAgB;AACzB,SAAS,iCAAiC;AAC1C,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,qBAAqB;AAC9B,SAAS,oDAAoD;AAC7D,SAAS,qCAAqC;AAEvC,IAAM,oCAAN,cAAgD,WAAW;AAAA,EACjE,YAC6C,oBACd,YACO,mBACC,oBACrC;AACD,UAAM;AALsC;AACd;AACO;AACC;AAItC,UAAM,YAAY,KAAK,UAAU,IAAI;AAAA,MAAiB,MAAM;AAC3D,aAAK,eAAe;AAAA,MACrB;AAAA,MAAG,KAAK;AAAA;AAAA,IAAoB,CAAC;AAC7B,cAAU,SAAS;AAAA,EACpB;AAAA,EAhCD,OAmBkE;AAAA;AAAA;AAAA,EAejE,MAAc,iBAAgC;AAC7C,SAAK,WAAW;AAAA,MACf;AAAA,IACD;AAEA,QAAI;AACH,YAAM,uBACL,KAAK,mBAAmB,qBAAqB,KAAK;AAAA,QACjD,QAAQ,QAAQ;AAAA,MACjB,CAAC,EAAE;AACJ,YAAM,0BACL,MAAM,SAAS,QAAQ,oBAAoB;AAC5C,YAAM,gBAAgB,IAAI;AAAA,QACzB,KAAK,mBAAmB,WAAW,SAAS;AAAA,MAC7C;AAEA,YAAM,QAAQ;AAAA,QACb,wBAAwB,IAAI,OAAO,2BAA2B;AAC7D,gBAAM,uBAAuB;AAAA,YAC5B;AAAA,YACA;AAAA,UACD;AAEA,cACC,uBAAuB,WACvB,+BACC;AACD;AAAA,UACD;AAEA,cACC,2BACA,6CAA6C,IAC5C;AACD;AAAA,UACD;AAEA,gBAAM,UAAU,MAAM,KAAK,kBAAkB,WAAW;AAAA,YACvD,yBAAyB;AAAA,UAC1B,CAAC;AACD,cACC,QAAQ;AAAA,YACP,CAAC,WACA,OAAO,WAAW,OAAO;AAAA,UAC3B,GACC;AACD;AAAA,UACD;AAEA,gBAAM,gBACL,MAAM,cAAc,OAAO,oBAAoB;AAChD,cAAI,eAAe;AAClB;AAAA,UACD;AAEA,eAAK,WAAW;AAAA,YACf,wDAAwD,sBAAsB;AAAA,UAC/E;AAEA,gBAAM,SAAS,GAAG,oBAAoB;AAAA,QACvC,CAAC;AAAA,MACF;AAAA,IACD,SAAS,OAAO;AACf,wBAAkB,KAAK;AAAA,IACxB;AAAA,EACD;AACD;AAjFa,oCAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALU;",
  "names": []
}
