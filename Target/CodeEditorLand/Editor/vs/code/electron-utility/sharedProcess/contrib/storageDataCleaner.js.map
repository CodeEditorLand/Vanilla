{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-utility/sharedProcess/contrib/storageDataCleaner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { join } from '../../../../base/common/path.js';\nimport { Promises } from '../../../../base/node/pfs.js';\nimport { INativeEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { StorageClient } from '../../../../platform/storage/common/storageIpc.js';\nimport { EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE } from '../../../../platform/workspace/common/workspace.js';\nimport { NON_EMPTY_WORKSPACE_ID_LENGTH } from '../../../../platform/workspaces/node/workspaces.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IMainProcessService } from '../../../../platform/ipc/common/mainProcessService.js';\nimport { Schemas } from '../../../../base/common/network.js';\n\nexport class UnusedWorkspaceStorageDataCleaner extends Disposable {\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IMainProcessService private readonly mainProcessService: IMainProcessService\n\t) {\n\t\tsuper();\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis.cleanUpStorage();\n\t\t}, 30 * 1000 /* after 30s */));\n\t\tscheduler.schedule();\n\t}\n\n\tprivate async cleanUpStorage(): Promise<void> {\n\t\tthis.logService.trace('[storage cleanup]: Starting to clean up workspace storage folders for unused empty workspaces.');\n\n\t\ttry {\n\t\t\tconst workspaceStorageHome = this.environmentService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t\tconst workspaceStorageFolders = await Promises.readdir(workspaceStorageHome);\n\t\t\tconst storageClient = new StorageClient(this.mainProcessService.getChannel('storage'));\n\n\t\t\tawait Promise.all(workspaceStorageFolders.map(async workspaceStorageFolder => {\n\t\t\t\tconst workspaceStoragePath = join(workspaceStorageHome, workspaceStorageFolder);\n\n\t\t\t\tif (workspaceStorageFolder.length === NON_EMPTY_WORKSPACE_ID_LENGTH) {\n\t\t\t\t\treturn; // keep workspace storage for folders/workspaces that can be accessed still\n\t\t\t\t}\n\n\t\t\t\tif (workspaceStorageFolder === EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE.id) {\n\t\t\t\t\treturn; // keep workspace storage for empty extension development workspaces\n\t\t\t\t}\n\n\t\t\t\tconst windows = await this.nativeHostService.getWindows({ includeAuxiliaryWindows: false });\n\t\t\t\tif (windows.some(window => window.workspace?.id === workspaceStorageFolder)) {\n\t\t\t\t\treturn; // keep workspace storage for empty workspaces opened as window\n\t\t\t\t}\n\n\t\t\t\tconst isStorageUsed = await storageClient.isUsed(workspaceStoragePath);\n\t\t\t\tif (isStorageUsed) {\n\t\t\t\t\treturn; // keep workspace storage for empty workspaces that are in use\n\t\t\t\t}\n\n\t\t\t\tthis.logService.trace(`[storage cleanup]: Deleting workspace storage folder ${workspaceStorageFolder} as it seems to be an unused empty workspace.`);\n\n\t\t\t\tawait Promises.rm(workspaceStoragePath);\n\t\t\t}));\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,gBAAgB;AACzB,SAAS,iCAAiC;AAC1C,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,oDAAoD;AAC7D,SAAS,qCAAqC;AAC9C,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC,SAAS,eAAe;AAEjB,IAAM,oCAAN,cAAgD,WAAW;AAAA,EAEjE,YAC6C,oBACd,YACO,mBACC,oBACrC;AACD,UAAM;AALsC;AACd;AACO;AACC;AAItC,UAAM,YAAY,KAAK,UAAU,IAAI;AAAA,MAAiB,MAAM;AAC3D,aAAK,eAAe;AAAA,MACrB;AAAA,MAAG,KAAK;AAAA;AAAA,IAAoB,CAAC;AAC7B,cAAU,SAAS;AAAA,EACpB;AAAA,EAjCD,OAmBkE;AAAA;AAAA;AAAA,EAgBjE,MAAc,iBAAgC;AAC7C,SAAK,WAAW,MAAM,gGAAgG;AAEtH,QAAI;AACH,YAAM,uBAAuB,KAAK,mBAAmB,qBAAqB,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC,EAAE;AACzG,YAAM,0BAA0B,MAAM,SAAS,QAAQ,oBAAoB;AAC3E,YAAM,gBAAgB,IAAI,cAAc,KAAK,mBAAmB,WAAW,SAAS,CAAC;AAErF,YAAM,QAAQ,IAAI,wBAAwB,IAAI,OAAM,2BAA0B;AAC7E,cAAM,uBAAuB,KAAK,sBAAsB,sBAAsB;AAE9E,YAAI,uBAAuB,WAAW,+BAA+B;AACpE;AAAA,QACD;AAEA,YAAI,2BAA2B,6CAA6C,IAAI;AAC/E;AAAA,QACD;AAEA,cAAM,UAAU,MAAM,KAAK,kBAAkB,WAAW,EAAE,yBAAyB,MAAM,CAAC;AAC1F,YAAI,QAAQ,KAAK,YAAU,OAAO,WAAW,OAAO,sBAAsB,GAAG;AAC5E;AAAA,QACD;AAEA,cAAM,gBAAgB,MAAM,cAAc,OAAO,oBAAoB;AACrE,YAAI,eAAe;AAClB;AAAA,QACD;AAEA,aAAK,WAAW,MAAM,wDAAwD,sBAAsB,+CAA+C;AAEnJ,cAAM,SAAS,GAAG,oBAAoB;AAAA,MACvC,CAAC,CAAC;AAAA,IACH,SAAS,OAAO;AACf,wBAAkB,KAAK;AAAA,IACxB;AAAA,EACD;AACD;AArDa,oCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GANU;",
  "names": []
}
