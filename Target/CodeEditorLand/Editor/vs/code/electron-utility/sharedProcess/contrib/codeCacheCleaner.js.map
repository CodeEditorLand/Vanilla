{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/electron-utility/sharedProcess/contrib/codeCacheCleaner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { basename, dirname, join } from \"../../../../base/common/path.js\";\nimport { Promises } from \"../../../../base/node/pfs.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\n\nexport class CodeCacheCleaner extends Disposable {\n\tprivate readonly _DataMaxAge =\n\t\tthis.productService.quality !== \"stable\"\n\t\t\t? 1000 * 60 * 60 * 24 * 7 // roughly 1 week (insiders)\n\t\t\t: 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months (stable)\n\n\tconstructor(\n\t\tcurrentCodeCachePath: string | undefined,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Cached data is stored as user data and we run a cleanup task every time\n\t\t// the editor starts. The strategy is to delete all files that are older than\n\t\t// 3 months (1 week respectively)\n\t\tif (currentCodeCachePath) {\n\t\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\t\tthis.cleanUpCodeCaches(currentCodeCachePath);\n\t\t\t}, 30 * 1000 /* after 30s */));\n\t\t\tscheduler.schedule();\n\t\t}\n\t}\n\n\tprivate async cleanUpCodeCaches(\n\t\tcurrentCodeCachePath: string,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"[code cache cleanup]: Starting to clean up old code cache folders.\",\n\t\t);\n\n\t\ttry {\n\t\t\tconst now = Date.now();\n\n\t\t\t// The folder which contains folders of cached data.\n\t\t\t// Each of these folders is partioned per commit\n\t\t\tconst codeCacheRootPath = dirname(currentCodeCachePath);\n\t\t\tconst currentCodeCache = basename(currentCodeCachePath);\n\n\t\t\tconst codeCaches = await Promises.readdir(codeCacheRootPath);\n\t\t\tawait Promise.all(\n\t\t\t\tcodeCaches.map(async (codeCache) => {\n\t\t\t\t\tif (codeCache === currentCodeCache) {\n\t\t\t\t\t\treturn; // not the current cache folder\n\t\t\t\t\t}\n\n\t\t\t\t\t// Delete cache folder if old enough\n\t\t\t\t\tconst codeCacheEntryPath = join(\n\t\t\t\t\t\tcodeCacheRootPath,\n\t\t\t\t\t\tcodeCache,\n\t\t\t\t\t);\n\t\t\t\t\tconst codeCacheEntryStat =\n\t\t\t\t\t\tawait fs.promises.stat(codeCacheEntryPath);\n\t\t\t\t\tif (\n\t\t\t\t\t\tcodeCacheEntryStat.isDirectory() &&\n\t\t\t\t\t\tnow - codeCacheEntryStat.mtime.getTime() >\n\t\t\t\t\t\t\tthis._DataMaxAge\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t`[code cache cleanup]: Removing code cache folder ${codeCache}.`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn Promises.rm(codeCacheEntryPath);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,QAAQ;AACpB,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,kBAAkB;AAC3B,SAAS,UAAU,SAAS,YAAY;AACxC,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAEzB,IAAM,mBAAN,cAA+B,WAAW;AAAA;AAAA,EAMhD,YACC,sBACkC,gBACJ,YAC7B;AACD,UAAM;AAH4B;AACJ;AAO9B,QAAI,sBAAsB;AACzB,YAAM,YAAY,KAAK,UAAU,IAAI;AAAA,QAAiB,MAAM;AAC3D,eAAK,kBAAkB,oBAAoB;AAAA,QAC5C;AAAA,QAAG,KAAK;AAAA;AAAA,MAAoB,CAAC;AAC7B,gBAAU,SAAS;AAAA,IACpB;AAAA,EACD;AAAA,EApCD,OAciD;AAAA;AAAA;AAAA,EAC/B,cAChB,KAAK,eAAe,YAAY,WAC7B,MAAO,KAAK,KAAK,KAAK,IACtB,MAAO,KAAK,KAAK,KAAK,KAAK;AAAA,EAoB/B,MAAc,kBACb,sBACgB;AAChB,SAAK,WAAW;AAAA,MACf;AAAA,IACD;AAEA,QAAI;AACH,YAAM,MAAM,KAAK,IAAI;AAIrB,YAAM,oBAAoB,QAAQ,oBAAoB;AACtD,YAAM,mBAAmB,SAAS,oBAAoB;AAEtD,YAAM,aAAa,MAAM,SAAS,QAAQ,iBAAiB;AAC3D,YAAM,QAAQ;AAAA,QACb,WAAW,IAAI,OAAO,cAAc;AACnC,cAAI,cAAc,kBAAkB;AACnC;AAAA,UACD;AAGA,gBAAM,qBAAqB;AAAA,YAC1B;AAAA,YACA;AAAA,UACD;AACA,gBAAM,qBACL,MAAM,GAAG,SAAS,KAAK,kBAAkB;AAC1C,cACC,mBAAmB,YAAY,KAC/B,MAAM,mBAAmB,MAAM,QAAQ,IACtC,KAAK,aACL;AACD,iBAAK,WAAW;AAAA,cACf,oDAAoD,SAAS;AAAA,YAC9D;AAEA,mBAAO,SAAS,GAAG,kBAAkB;AAAA,UACtC;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD,SAAS,OAAO;AACf,wBAAkB,KAAK;AAAA,IACxB;AAAA,EACD;AACD;AAtEa,mBAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;",
  "names": []
}
