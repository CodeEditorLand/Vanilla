{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/code/browser/workbench/workbench.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isStandalone } from '../../../base/browser/browser.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { VSBuffer, decodeBase64, encodeBase64 } from '../../../base/common/buffer.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { parse } from '../../../base/common/marshalling.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { posix } from '../../../base/common/path.js';\nimport { isEqual } from '../../../base/common/resources.js';\nimport { ltrim } from '../../../base/common/strings.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport product from '../../../platform/product/common/product.js';\nimport { ISecretStorageProvider } from '../../../platform/secrets/common/secrets.js';\nimport { isFolderToOpen, isWorkspaceToOpen } from '../../../platform/window/common/window.js';\nimport type { IWorkbenchConstructionOptions, IWorkspace, IWorkspaceProvider } from '../../../workbench/browser/web.api.js';\nimport { AuthenticationSessionInfo } from '../../../workbench/services/authentication/browser/authenticationService.js';\nimport type { IURLCallbackProvider } from '../../../workbench/services/url/browser/urlService.js';\nimport { create } from '../../../workbench/workbench.web.main.internal.js';\n\ninterface ISecretStorageCrypto {\n\tseal(data: string): Promise<string>;\n\tunseal(data: string): Promise<string>;\n}\n\nclass TransparentCrypto implements ISecretStorageCrypto {\n\tasync seal(data: string): Promise<string> {\n\t\treturn data;\n\t}\n\n\tasync unseal(data: string): Promise<string> {\n\t\treturn data;\n\t}\n}\n\nconst enum AESConstants {\n\tALGORITHM = 'AES-GCM',\n\tKEY_LENGTH = 256,\n\tIV_LENGTH = 12,\n}\n\nclass ServerKeyedAESCrypto implements ISecretStorageCrypto {\n\tprivate _serverKey: Uint8Array | undefined;\n\n\t/** Gets whether the algorithm is supported; requires a secure context */\n\tpublic static supported() {\n\t\treturn !!crypto.subtle;\n\t}\n\n\tconstructor(private readonly authEndpoint: string) { }\n\n\tasync seal(data: string): Promise<string> {\n\t\t// Get a new key and IV on every change, to avoid the risk of reusing the same key and IV pair with AES-GCM\n\t\t// (see also: https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams#properties)\n\t\tconst iv = mainWindow.crypto.getRandomValues(new Uint8Array(AESConstants.IV_LENGTH));\n\t\t// crypto.getRandomValues isn't a good-enough PRNG to generate crypto keys, so we need to use crypto.subtle.generateKey and export the key instead\n\t\tconst clientKeyObj = await mainWindow.crypto.subtle.generateKey(\n\t\t\t{ name: AESConstants.ALGORITHM as const, length: AESConstants.KEY_LENGTH as const },\n\t\t\ttrue,\n\t\t\t['encrypt', 'decrypt']\n\t\t);\n\n\t\tconst clientKey = new Uint8Array(await mainWindow.crypto.subtle.exportKey('raw', clientKeyObj));\n\t\tconst key = await this.getKey(clientKey);\n\t\tconst dataUint8Array = new TextEncoder().encode(data);\n\t\tconst cipherText: ArrayBuffer = await mainWindow.crypto.subtle.encrypt(\n\t\t\t{ name: AESConstants.ALGORITHM as const, iv },\n\t\t\tkey,\n\t\t\tdataUint8Array\n\t\t);\n\n\t\t// Base64 encode the result and store the ciphertext, the key, and the IV in localStorage\n\t\t// Note that the clientKey and IV don't need to be secret\n\t\tconst result = new Uint8Array([...clientKey, ...iv, ...new Uint8Array(cipherText)]);\n\t\treturn encodeBase64(VSBuffer.wrap(result));\n\t}\n\n\tasync unseal(data: string): Promise<string> {\n\t\t// encrypted should contain, in order: the key (32-byte), the IV for AES-GCM (12-byte) and the ciphertext (which has the GCM auth tag at the end)\n\t\t// Minimum length must be 44 (key+IV length) + 16 bytes (1 block encrypted with AES - regardless of key size)\n\t\tconst dataUint8Array = decodeBase64(data);\n\n\t\tif (dataUint8Array.byteLength < 60) {\n\t\t\tthrow Error('Invalid length for the value for credentials.crypto');\n\t\t}\n\n\t\tconst keyLength = AESConstants.KEY_LENGTH / 8;\n\t\tconst clientKey = dataUint8Array.slice(0, keyLength);\n\t\tconst iv = dataUint8Array.slice(keyLength, keyLength + AESConstants.IV_LENGTH);\n\t\tconst cipherText = dataUint8Array.slice(keyLength + AESConstants.IV_LENGTH);\n\n\t\t// Do the decryption and parse the result as JSON\n\t\tconst key = await this.getKey(clientKey.buffer);\n\t\tconst decrypted = await mainWindow.crypto.subtle.decrypt(\n\t\t\t{ name: AESConstants.ALGORITHM as const, iv: iv.buffer },\n\t\t\tkey,\n\t\t\tcipherText.buffer\n\t\t);\n\n\t\treturn new TextDecoder().decode(new Uint8Array(decrypted));\n\t}\n\n\t/**\n\t * Given a clientKey, returns the CryptoKey object that is used to encrypt/decrypt the data.\n\t * The actual key is (clientKey XOR serverKey)\n\t */\n\tprivate async getKey(clientKey: Uint8Array): Promise<CryptoKey> {\n\t\tif (!clientKey || clientKey.byteLength !== AESConstants.KEY_LENGTH / 8) {\n\t\t\tthrow Error('Invalid length for clientKey');\n\t\t}\n\n\t\tconst serverKey = await this.getServerKeyPart();\n\t\tconst keyData = new Uint8Array(AESConstants.KEY_LENGTH / 8);\n\n\t\tfor (let i = 0; i < keyData.byteLength; i++) {\n\t\t\tkeyData[i] = clientKey[i]! ^ serverKey[i]!;\n\t\t}\n\n\t\treturn mainWindow.crypto.subtle.importKey(\n\t\t\t'raw',\n\t\t\tkeyData,\n\t\t\t{\n\t\t\t\tname: AESConstants.ALGORITHM as const,\n\t\t\t\tlength: AESConstants.KEY_LENGTH as const,\n\t\t\t},\n\t\t\ttrue,\n\t\t\t['encrypt', 'decrypt']\n\t\t);\n\t}\n\n\tprivate async getServerKeyPart(): Promise<Uint8Array> {\n\t\tif (this._serverKey) {\n\t\t\treturn this._serverKey;\n\t\t}\n\n\t\tlet attempt = 0;\n\t\tlet lastError: unknown | undefined;\n\n\t\twhile (attempt <= 3) {\n\t\t\ttry {\n\t\t\t\tconst res = await fetch(this.authEndpoint, { credentials: 'include', method: 'POST' });\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow new Error(res.statusText);\n\t\t\t\t}\n\t\t\t\tconst serverKey = new Uint8Array(await await res.arrayBuffer());\n\t\t\t\tif (serverKey.byteLength !== AESConstants.KEY_LENGTH / 8) {\n\t\t\t\t\tthrow Error(`The key retrieved by the server is not ${AESConstants.KEY_LENGTH} bit long.`);\n\t\t\t\t}\n\t\t\t\tthis._serverKey = serverKey;\n\t\t\t\treturn this._serverKey;\n\t\t\t} catch (e) {\n\t\t\t\tlastError = e;\n\t\t\t\tattempt++;\n\n\t\t\t\t// exponential backoff\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, attempt * attempt * 100));\n\t\t\t}\n\t\t}\n\n\t\tthrow lastError;\n\t}\n}\n\nexport class LocalStorageSecretStorageProvider implements ISecretStorageProvider {\n\tprivate readonly _storageKey = 'secrets.provider';\n\n\tprivate _secretsPromise: Promise<Record<string, string>> = this.load();\n\n\ttype: 'in-memory' | 'persisted' | 'unknown' = 'persisted';\n\n\tconstructor(\n\t\tprivate readonly crypto: ISecretStorageCrypto,\n\t) { }\n\n\tprivate async load(): Promise<Record<string, string>> {\n\t\tconst record = this.loadAuthSessionFromElement();\n\t\t// Get the secrets from localStorage\n\t\tconst encrypted = localStorage.getItem(this._storageKey);\n\t\tif (encrypted) {\n\t\t\ttry {\n\t\t\t\tconst decrypted = JSON.parse(await this.crypto.unseal(encrypted));\n\t\t\t\treturn { ...record, ...decrypted };\n\t\t\t} catch (err) {\n\t\t\t\t// TODO: send telemetry\n\t\t\t\tconsole.error('Failed to decrypt secrets from localStorage', err);\n\t\t\t\tlocalStorage.removeItem(this._storageKey);\n\t\t\t}\n\t\t}\n\n\t\treturn record;\n\t}\n\n\tprivate loadAuthSessionFromElement(): Record<string, string> {\n\t\tlet authSessionInfo: (AuthenticationSessionInfo & { scopes: string[][] }) | undefined;\n\t\tconst authSessionElement = mainWindow.document.getElementById('vscode-workbench-auth-session');\n\t\tconst authSessionElementAttribute = authSessionElement ? authSessionElement.getAttribute('data-settings') : undefined;\n\t\tif (authSessionElementAttribute) {\n\t\t\ttry {\n\t\t\t\tauthSessionInfo = JSON.parse(authSessionElementAttribute);\n\t\t\t} catch (error) { /* Invalid session is passed. Ignore. */ }\n\t\t}\n\n\t\tif (!authSessionInfo) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst record: Record<string, string> = {};\n\n\t\t// Settings Sync Entry\n\t\trecord[`${product.urlProtocol}.loginAccount`] = JSON.stringify(authSessionInfo);\n\n\t\t// Auth extension Entry\n\t\tif (authSessionInfo.providerId !== 'github') {\n\t\t\tconsole.error(`Unexpected auth provider: ${authSessionInfo.providerId}. Expected 'github'.`);\n\t\t\treturn record;\n\t\t}\n\n\t\tconst authAccount = JSON.stringify({ extensionId: 'vscode.github-authentication', key: 'github.auth' });\n\t\trecord[authAccount] = JSON.stringify(authSessionInfo.scopes.map(scopes => ({\n\t\t\tid: authSessionInfo.id,\n\t\t\tscopes,\n\t\t\taccessToken: authSessionInfo.accessToken\n\t\t})));\n\n\t\treturn record;\n\t}\n\n\tasync get(key: string): Promise<string | undefined> {\n\t\tconst secrets = await this._secretsPromise;\n\t\treturn secrets[key];\n\t}\n\tasync set(key: string, value: string): Promise<void> {\n\t\tconst secrets = await this._secretsPromise;\n\t\tsecrets[key] = value;\n\t\tthis._secretsPromise = Promise.resolve(secrets);\n\t\tthis.save();\n\t}\n\tasync delete(key: string): Promise<void> {\n\t\tconst secrets = await this._secretsPromise;\n\t\tdelete secrets[key];\n\t\tthis._secretsPromise = Promise.resolve(secrets);\n\t\tthis.save();\n\t}\n\n\tprivate async save(): Promise<void> {\n\t\ttry {\n\t\t\tconst encrypted = await this.crypto.seal(JSON.stringify(await this._secretsPromise));\n\t\t\tlocalStorage.setItem(this._storageKey, encrypted);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n}\n\n\nclass LocalStorageURLCallbackProvider extends Disposable implements IURLCallbackProvider {\n\n\tprivate static REQUEST_ID = 0;\n\n\tprivate static QUERY_KEYS: ('scheme' | 'authority' | 'path' | 'query' | 'fragment')[] = [\n\t\t'scheme',\n\t\t'authority',\n\t\t'path',\n\t\t'query',\n\t\t'fragment'\n\t];\n\n\tprivate readonly _onCallback = this._register(new Emitter<URI>());\n\treadonly onCallback = this._onCallback.event;\n\n\tprivate pendingCallbacks = new Set<number>();\n\tprivate lastTimeChecked = Date.now();\n\tprivate checkCallbacksTimeout: unknown | undefined = undefined;\n\tprivate onDidChangeLocalStorageDisposable: IDisposable | undefined;\n\n\tconstructor(private readonly _callbackRoute: string) {\n\t\tsuper();\n\t}\n\n\tcreate(options: Partial<UriComponents> = {}): URI {\n\t\tconst id = ++LocalStorageURLCallbackProvider.REQUEST_ID;\n\t\tconst queryParams: string[] = [`vscode-reqid=${id}`];\n\n\t\tfor (const key of LocalStorageURLCallbackProvider.QUERY_KEYS) {\n\t\t\tconst value = options[key];\n\n\t\t\tif (value) {\n\t\t\t\tqueryParams.push(`vscode-${key}=${encodeURIComponent(value)}`);\n\t\t\t}\n\t\t}\n\n\t\t// TODO@joao remove eventually\n\t\t// https://github.com/microsoft/vscode-dev/issues/62\n\t\t// https://github.com/microsoft/vscode/blob/159479eb5ae451a66b5dac3c12d564f32f454796/extensions/github-authentication/src/githubServer.ts#L50-L50\n\t\tif (!(options.authority === 'vscode.github-authentication' && options.path === '/dummy')) {\n\t\t\tconst key = `vscode-web.url-callbacks[${id}]`;\n\t\t\tlocalStorage.removeItem(key);\n\n\t\t\tthis.pendingCallbacks.add(id);\n\t\t\tthis.startListening();\n\t\t}\n\n\t\treturn URI.parse(mainWindow.location.href).with({ path: this._callbackRoute, query: queryParams.join('&') });\n\t}\n\n\tprivate startListening(): void {\n\t\tif (this.onDidChangeLocalStorageDisposable) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fn = () => this.onDidChangeLocalStorage();\n\t\tmainWindow.addEventListener('storage', fn);\n\t\tthis.onDidChangeLocalStorageDisposable = { dispose: () => mainWindow.removeEventListener('storage', fn) };\n\t}\n\n\tprivate stopListening(): void {\n\t\tthis.onDidChangeLocalStorageDisposable?.dispose();\n\t\tthis.onDidChangeLocalStorageDisposable = undefined;\n\t}\n\n\t// this fires every time local storage changes, but we\n\t// don't want to check more often than once a second\n\tprivate async onDidChangeLocalStorage(): Promise<void> {\n\t\tconst ellapsed = Date.now() - this.lastTimeChecked;\n\n\t\tif (ellapsed > 1000) {\n\t\t\tthis.checkCallbacks();\n\t\t} else if (this.checkCallbacksTimeout === undefined) {\n\t\t\tthis.checkCallbacksTimeout = setTimeout(() => {\n\t\t\t\tthis.checkCallbacksTimeout = undefined;\n\t\t\t\tthis.checkCallbacks();\n\t\t\t}, 1000 - ellapsed);\n\t\t}\n\t}\n\n\tprivate checkCallbacks(): void {\n\t\tlet pendingCallbacks: Set<number> | undefined;\n\n\t\tfor (const id of this.pendingCallbacks) {\n\t\t\tconst key = `vscode-web.url-callbacks[${id}]`;\n\t\t\tconst result = localStorage.getItem(key);\n\n\t\t\tif (result !== null) {\n\t\t\t\ttry {\n\t\t\t\t\tthis._onCallback.fire(URI.revive(JSON.parse(result)));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t}\n\n\t\t\t\tpendingCallbacks = pendingCallbacks ?? new Set(this.pendingCallbacks);\n\t\t\t\tpendingCallbacks.delete(id);\n\t\t\t\tlocalStorage.removeItem(key);\n\t\t\t}\n\t\t}\n\n\t\tif (pendingCallbacks) {\n\t\t\tthis.pendingCallbacks = pendingCallbacks;\n\n\t\t\tif (this.pendingCallbacks.size === 0) {\n\t\t\t\tthis.stopListening();\n\t\t\t}\n\t\t}\n\n\t\tthis.lastTimeChecked = Date.now();\n\t}\n}\n\nclass WorkspaceProvider implements IWorkspaceProvider {\n\n\tprivate static QUERY_PARAM_EMPTY_WINDOW = 'ew';\n\tprivate static QUERY_PARAM_FOLDER = 'folder';\n\tprivate static QUERY_PARAM_WORKSPACE = 'workspace';\n\n\tprivate static QUERY_PARAM_PAYLOAD = 'payload';\n\n\tstatic create(config: IWorkbenchConstructionOptions & { folderUri?: UriComponents; workspaceUri?: UriComponents }) {\n\t\tlet foundWorkspace = false;\n\t\tlet workspace: IWorkspace;\n\t\tlet payload = Object.create(null);\n\n\t\tconst query = new URL(document.location.href).searchParams;\n\t\tquery.forEach((value, key) => {\n\t\t\tswitch (key) {\n\n\t\t\t\t// Folder\n\t\t\t\tcase WorkspaceProvider.QUERY_PARAM_FOLDER:\n\t\t\t\t\tif (config.remoteAuthority && value.startsWith(posix.sep)) {\n\t\t\t\t\t\t// when connected to a remote and having a value\n\t\t\t\t\t\t// that is a path (begins with a `/`), assume this\n\t\t\t\t\t\t// is a vscode-remote resource as simplified URL.\n\t\t\t\t\t\tworkspace = { folderUri: URI.from({ scheme: Schemas.vscodeRemote, path: value, authority: config.remoteAuthority }) };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tworkspace = { folderUri: URI.parse(value) };\n\t\t\t\t\t}\n\t\t\t\t\tfoundWorkspace = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Workspace\n\t\t\t\tcase WorkspaceProvider.QUERY_PARAM_WORKSPACE:\n\t\t\t\t\tif (config.remoteAuthority && value.startsWith(posix.sep)) {\n\t\t\t\t\t\t// when connected to a remote and having a value\n\t\t\t\t\t\t// that is a path (begins with a `/`), assume this\n\t\t\t\t\t\t// is a vscode-remote resource as simplified URL.\n\t\t\t\t\t\tworkspace = { workspaceUri: URI.from({ scheme: Schemas.vscodeRemote, path: value, authority: config.remoteAuthority }) };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tworkspace = { workspaceUri: URI.parse(value) };\n\t\t\t\t\t}\n\t\t\t\t\tfoundWorkspace = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Empty\n\t\t\t\tcase WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW:\n\t\t\t\t\tworkspace = undefined;\n\t\t\t\t\tfoundWorkspace = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Payload\n\t\t\t\tcase WorkspaceProvider.QUERY_PARAM_PAYLOAD:\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayload = parse(value); // use marshalling#parse() to revive potential URIs\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error(error); // possible invalid JSON\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t// If no workspace is provided through the URL, check for config\n\t\t// attribute from server\n\t\tif (!foundWorkspace) {\n\t\t\tif (config.folderUri) {\n\t\t\t\tworkspace = { folderUri: URI.revive(config.folderUri) };\n\t\t\t} else if (config.workspaceUri) {\n\t\t\t\tworkspace = { workspaceUri: URI.revive(config.workspaceUri) };\n\t\t\t}\n\t\t}\n\n\t\treturn new WorkspaceProvider(workspace, payload, config);\n\t}\n\n\treadonly trusted = true;\n\n\tprivate constructor(\n\t\treadonly workspace: IWorkspace,\n\t\treadonly payload: object,\n\t\tprivate readonly config: IWorkbenchConstructionOptions\n\t) {\n\t}\n\n\tasync open(workspace: IWorkspace, options?: { reuse?: boolean; payload?: object }): Promise<boolean> {\n\t\tif (options?.reuse && !options.payload && this.isSame(this.workspace, workspace)) {\n\t\t\treturn true; // return early if workspace and environment is not changing and we are reusing window\n\t\t}\n\n\t\tconst targetHref = this.createTargetUrl(workspace, options);\n\t\tif (targetHref) {\n\t\t\tif (options?.reuse) {\n\t\t\t\tmainWindow.location.href = targetHref;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tlet result;\n\t\t\t\tif (isStandalone()) {\n\t\t\t\t\tresult = mainWindow.open(targetHref, '_blank', 'toolbar=no'); // ensures to open another 'standalone' window!\n\t\t\t\t} else {\n\t\t\t\t\tresult = mainWindow.open(targetHref);\n\t\t\t\t}\n\n\t\t\t\treturn !!result;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate createTargetUrl(workspace: IWorkspace, options?: { reuse?: boolean; payload?: object }): string | undefined {\n\n\t\t// Empty\n\t\tlet targetHref: string | undefined = undefined;\n\t\tif (!workspace) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW}=true`;\n\t\t}\n\n\t\t// Folder\n\t\telse if (isFolderToOpen(workspace)) {\n\t\t\tconst queryParamFolder = this.encodeWorkspacePath(workspace.folderUri);\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_FOLDER}=${queryParamFolder}`;\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(workspace)) {\n\t\t\tconst queryParamWorkspace = this.encodeWorkspacePath(workspace.workspaceUri);\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_WORKSPACE}=${queryParamWorkspace}`;\n\t\t}\n\n\t\t// Append payload if any\n\t\tif (options?.payload) {\n\t\t\ttargetHref += `&${WorkspaceProvider.QUERY_PARAM_PAYLOAD}=${encodeURIComponent(JSON.stringify(options.payload))}`;\n\t\t}\n\n\t\treturn targetHref;\n\t}\n\n\tprivate encodeWorkspacePath(uri: URI): string {\n\t\tif (this.config.remoteAuthority && uri.scheme === Schemas.vscodeRemote) {\n\n\t\t\t// when connected to a remote and having a folder\n\t\t\t// or workspace for that remote, only use the path\n\t\t\t// as query value to form shorter, nicer URLs.\n\t\t\t// however, we still need to `encodeURIComponent`\n\t\t\t// to ensure to preserve special characters, such\n\t\t\t// as `+` in the path.\n\n\t\t\treturn encodeURIComponent(`${posix.sep}${ltrim(uri.path, posix.sep)}`).replaceAll('%2F', '/');\n\t\t}\n\n\t\treturn encodeURIComponent(uri.toString(true));\n\t}\n\n\tprivate isSame(workspaceA: IWorkspace, workspaceB: IWorkspace): boolean {\n\t\tif (!workspaceA || !workspaceB) {\n\t\t\treturn workspaceA === workspaceB; // both empty\n\t\t}\n\n\t\tif (isFolderToOpen(workspaceA) && isFolderToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.folderUri, workspaceB.folderUri); // same workspace\n\t\t}\n\n\t\tif (isWorkspaceToOpen(workspaceA) && isWorkspaceToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.workspaceUri, workspaceB.workspaceUri); // same workspace\n\t\t}\n\n\t\treturn false;\n\t}\n\n\thasRemote(): boolean {\n\t\tif (this.workspace) {\n\t\t\tif (isFolderToOpen(this.workspace)) {\n\t\t\t\treturn this.workspace.folderUri.scheme === Schemas.vscodeRemote;\n\t\t\t}\n\n\t\t\tif (isWorkspaceToOpen(this.workspace)) {\n\t\t\t\treturn this.workspace.workspaceUri.scheme === Schemas.vscodeRemote;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nfunction readCookie(name: string): string | undefined {\n\tconst cookies = document.cookie.split('; ');\n\tfor (const cookie of cookies) {\n\t\tif (cookie.startsWith(name + '=')) {\n\t\t\treturn cookie.substring(name.length + 1);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n(function () {\n\n\t// Find config by checking for DOM\n\tconst configElement = mainWindow.document.getElementById('vscode-workbench-web-configuration');\n\tconst configElementAttribute = configElement ? configElement.getAttribute('data-settings') : undefined;\n\tif (!configElement || !configElementAttribute) {\n\t\tthrow new Error('Missing web configuration element');\n\t}\n\tconst config: IWorkbenchConstructionOptions & { folderUri?: UriComponents; workspaceUri?: UriComponents; callbackRoute: string } = JSON.parse(configElementAttribute);\n\tconst secretStorageKeyPath = readCookie('vscode-secret-key-path');\n\tconst secretStorageCrypto = secretStorageKeyPath && ServerKeyedAESCrypto.supported()\n\t\t? new ServerKeyedAESCrypto(secretStorageKeyPath) : new TransparentCrypto();\n\n\t// Create workbench\n\tcreate(mainWindow.document.body, {\n\t\t...config,\n\t\twindowIndicator: config.windowIndicator ?? { label: '$(remote)', tooltip: `${product.nameShort} Web` },\n\t\tsettingsSyncOptions: config.settingsSyncOptions ? { enabled: config.settingsSyncOptions.enabled, } : undefined,\n\t\tworkspaceProvider: WorkspaceProvider.create(config),\n\t\turlCallbackProvider: new LocalStorageURLCallbackProvider(config.callbackRoute),\n\t\tsecretStorageProvider: config.remoteAuthority && !secretStorageKeyPath\n\t\t\t? undefined /* with a remote without embedder-preferred storage, store on the remote */\n\t\t\t: new LocalStorageSecretStorageProvider(secretStorageCrypto),\n\t});\n})();\n"],
  "mappings": "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",
  "names": ["AESConstants", "crypto"]
}
