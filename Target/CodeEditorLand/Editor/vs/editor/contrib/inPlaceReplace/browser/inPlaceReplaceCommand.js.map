{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplaceCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../../../common/editorCommon.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nexport class InPlaceReplaceCommand implements ICommand {\n\tprivate readonly _editRange: Range;\n\tprivate readonly _originalSelection: Selection;\n\tprivate readonly _text: string;\n\n\tconstructor(editRange: Range, originalSelection: Selection, text: string) {\n\t\tthis._editRange = editRange;\n\t\tthis._originalSelection = originalSelection;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tbuilder.addTrackedEditOperation(this._editRange, this._text);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\n\t\tif (!this._originalSelection.isEmpty()) {\n\t\t\t// Preserve selection and extends to typed text\n\t\t\treturn new Selection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn - this._text.length,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn,\n\t\t\t);\n\t\t}\n\n\t\treturn new Selection(\n\t\t\tsrcRange.endLineNumber,\n\t\t\tMath.min(\n\t\t\t\tthis._originalSelection.positionColumn,\n\t\t\t\tsrcRange.endColumn,\n\t\t\t),\n\t\t\tsrcRange.endLineNumber,\n\t\t\tMath.min(\n\t\t\t\tthis._originalSelection.positionColumn,\n\t\t\t\tsrcRange.endColumn,\n\t\t\t),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,iBAAiB;AAQnB,MAAM,sBAA0C;AAAA,EAdvD,OAcuD;AAAA;AAAA;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,WAAkB,mBAA8B,MAAc;AACzE,SAAK,aAAa;AAClB,SAAK,qBAAqB;AAC1B,SAAK,QAAQ;AAAA,EACd;AAAA,EAEO,kBACN,OACA,SACO;AACP,YAAQ,wBAAwB,KAAK,YAAY,KAAK,KAAK;AAAA,EAC5D;AAAA,EAEO,mBACN,OACA,QACY;AACZ,UAAM,wBAAwB,OAAO,yBAAyB;AAC9D,UAAM,WAAW,sBAAsB,CAAC,EAAE;AAE1C,QAAI,CAAC,KAAK,mBAAmB,QAAQ,GAAG;AAEvC,aAAO,IAAI;AAAA,QACV,SAAS;AAAA,QACT,SAAS,YAAY,KAAK,MAAM;AAAA,QAChC,SAAS;AAAA,QACT,SAAS;AAAA,MACV;AAAA,IACD;AAEA,WAAO,IAAI;AAAA,MACV,SAAS;AAAA,MACT,KAAK;AAAA,QACJ,KAAK,mBAAmB;AAAA,QACxB,SAAS;AAAA,MACV;AAAA,MACA,SAAS;AAAA,MACT,KAAK;AAAA,QACJ,KAAK,mBAAmB;AAAA,QACxB,SAAS;AAAA,MACV;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
