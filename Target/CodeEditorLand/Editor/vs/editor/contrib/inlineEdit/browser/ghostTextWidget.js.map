{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineEdit/browser/ghostTextWidget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, toDisposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tderived,\n\tobservableFromEvent,\n\tobservableValue,\n} from \"../../../../base/common/observable.js\";\nimport \"./inlineEdit.css\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport { observableCodeEditor } from \"../../../browser/observableCodeEditor.js\";\nimport {\n\tdiffDeleteDecoration,\n\tdiffLineDeleteDecorationBackgroundWithIndicator,\n} from \"../../../browser/widget/diffEditor/registrations.contribution.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { type IRange, Range } from \"../../../common/core/range.js\";\nimport { ILanguageService } from \"../../../common/languages/language.js\";\nimport {\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\tInjectedTextCursorStops,\n} from \"../../../common/model.js\";\nimport { LineTokens } from \"../../../common/tokens/lineTokens.js\";\nimport { LineDecoration } from \"../../../common/viewLayout/lineDecorations.js\";\nimport { InlineDecorationType } from \"../../../common/viewModel.js\";\nimport type { GhostText } from \"../../inlineCompletions/browser/model/ghostText.js\";\nimport { ColumnRange } from \"../../inlineCompletions/browser/utils.js\";\nimport {\n\tAdditionalLinesWidget,\n\ttype LineData,\n} from \"../../inlineCompletions/browser/view/ghostTextView.js\";\n\nexport const INLINE_EDIT_DESCRIPTION = \"inline-edit\";\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n\treadonly range: IObservable<IRange | undefined>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(\n\t\tthis,\n\t\tthis._editor.onDidChangeModel,\n\t\t() => /** @description editor.model */ this._editor.getModel(),\n\t);\n\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\treadonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\n\t\tthis._register(this._editorObs.setDecorations(this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, (reader) => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet range = this.model.range?.read(reader);\n\t\t//if range is empty, we want to remove it\n\t\tif (\n\t\t\trange &&\n\t\t\trange.startLineNumber === range.endLineNumber &&\n\t\t\trange.startColumn === range.endColumn\n\t\t) {\n\t\t\trange = undefined;\n\t\t}\n\t\t//check if both range and text are single line - in this case we want to do inline replacement\n\t\t//rather than replacing whole lines\n\t\tconst isSingleLine =\n\t\t\t(range ? range.startLineNumber === range.endLineNumber : true) &&\n\t\t\tghostText.parts.length === 1 &&\n\t\t\tghostText.parts[0].lines.length === 1;\n\n\t\t//check if we're just removing code\n\t\tconst isPureRemove =\n\t\t\tghostText.parts.length === 1 &&\n\t\t\tghostText.parts[0].lines.every((l) => l.length === 0);\n\n\t\tconst inlineTexts: {\n\t\t\tcolumn: number;\n\t\t\ttext: string;\n\t\t\tpreview: boolean;\n\t\t}[] = [];\n\t\tconst additionalLines: {\n\t\t\tcontent: string;\n\t\t\tdecorations: LineDecoration[];\n\t\t}[] = [];\n\n\t\tfunction addToAdditionalLines(\n\t\t\tlines: readonly string[],\n\t\t\tclassName: string | undefined,\n\t\t) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(\n\t\t\t\t\t\tnew LineDecoration(\n\t\t\t\t\t\t\tlastLine.content.length + 1,\n\t\t\t\t\t\t\tlastLine.content.length + 1 + lines[0].length,\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className\n\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\tnew LineDecoration(\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\tline.length + 1,\n\t\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t: [],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined;\n\t\tlet lastIdx = 0;\n\t\tif (!isPureRemove && (isSingleLine || !range)) {\n\t\t\tfor (const part of ghostText.parts) {\n\t\t\t\tlet lines = part.lines;\n\t\t\t\t//If remove range is set, we want to push all new liens to virtual area\n\t\t\t\tif (range && !isSingleLine) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tlines = [];\n\t\t\t\t}\n\t\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\t\tinlineTexts.push({\n\t\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\t\ttext: lines[0],\n\t\t\t\t\t\tpreview: part.preview,\n\t\t\t\t\t});\n\t\t\t\t\tlines = lines.slice(1);\n\t\t\t\t} else {\n\t\t\t\t\taddToAdditionalLines(\n\t\t\t\t\t\t[textBufferLine.substring(lastIdx, part.column - 1)],\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (lines.length > 0) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tif (\n\t\t\t\t\t\thiddenTextStartColumn === undefined &&\n\t\t\t\t\t\tpart.column <= textBufferLine.length\n\t\t\t\t\t) {\n\t\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlastIdx = part.column - 1;\n\t\t\t}\n\t\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\t\taddToAdditionalLines(\n\t\t\t\t\t[textBufferLine.substring(lastIdx)],\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst hiddenRange =\n\t\t\thiddenTextStartColumn !== undefined\n\t\t\t\t? new ColumnRange(\n\t\t\t\t\t\thiddenTextStartColumn,\n\t\t\t\t\t\ttextBufferLine.length + 1,\n\t\t\t\t\t)\n\t\t\t\t: undefined;\n\n\t\tconst lineNumber =\n\t\t\tisSingleLine || !range\n\t\t\t\t? ghostText.lineNumber\n\t\t\t\t: range.endLineNumber - 1;\n\n\t\treturn {\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber,\n\t\t\tadditionalReservedLineCount:\n\t\t\t\tthis.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t\trange,\n\t\t\tisSingleLine,\n\t\t\tisPureRemove,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, (reader) => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: {\n\t\t\t\t\tinlineClassName: \"inline-edit-hidden\",\n\t\t\t\t\tdescription: \"inline-edit-hidden\",\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.range) {\n\t\t\tconst ranges = [];\n\t\t\tif (uiState.isSingleLine) {\n\t\t\t\tranges.push(uiState.range);\n\t\t\t} else if (!uiState.isPureRemove) {\n\t\t\t\tconst lines =\n\t\t\t\t\tuiState.range.endLineNumber - uiState.range.startLineNumber;\n\t\t\t\tfor (let i = 0; i < lines; i++) {\n\t\t\t\t\tconst line = uiState.range.startLineNumber + i;\n\t\t\t\t\tconst firstNonWhitespace =\n\t\t\t\t\t\tuiState.targetTextModel.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst lastNonWhitespace =\n\t\t\t\t\t\tuiState.targetTextModel.getLineLastNonWhitespaceColumn(\n\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst range = new Range(\n\t\t\t\t\t\tline,\n\t\t\t\t\t\tfirstNonWhitespace,\n\t\t\t\t\t\tline,\n\t\t\t\t\t\tlastNonWhitespace,\n\t\t\t\t\t);\n\t\t\t\t\tranges.push(range);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const range of ranges) {\n\t\t\t\tdecorations.push({\n\t\t\t\t\trange,\n\t\t\t\t\toptions: diffDeleteDecoration,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (uiState.range && !uiState.isSingleLine && uiState.isPureRemove) {\n\t\t\tconst r = new Range(\n\t\t\t\tuiState.range.startLineNumber,\n\t\t\t\t1,\n\t\t\t\tuiState.range.endLineNumber - 1,\n\t\t\t\t1,\n\t\t\t);\n\n\t\t\tdecorations.push({\n\t\t\t\trange: r,\n\t\t\t\toptions: diffLineDeleteDecorationBackgroundWithIndicator,\n\t\t\t});\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(\n\t\t\t\t\tnew Position(uiState.lineNumber, p.column),\n\t\t\t\t),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: INLINE_EDIT_DESCRIPTION,\n\t\t\t\t\tafter: {\n\t\t\t\t\t\tcontent: p.text,\n\t\t\t\t\t\tinlineClassName: p.preview\n\t\t\t\t\t\t\t? \"inline-edit-decoration-preview\"\n\t\t\t\t\t\t\t: \"inline-edit-decoration\",\n\t\t\t\t\t\tcursorStops: InjectedTextCursorStops.Left,\n\t\t\t\t\t},\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis._editor,\n\t\t\tderived((reader) => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState &&\n\t\t\t\t\t!uiState.isPureRemove &&\n\t\t\t\t\t(uiState.isSingleLine || !uiState.range)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\t\t\tadditionalLines: uiState.additionalLines.map(\n\t\t\t\t\t\t\t\t(l) =>\n\t\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\t\tcontent: LineTokens.createEmpty(\n\t\t\t\t\t\t\t\t\t\t\tl.content,\n\t\t\t\t\t\t\t\t\t\t\tthis.languageService\n\t\t\t\t\t\t\t\t\t\t\t\t.languageIdCodec,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tdecorations: l.decorations,\n\t\t\t\t\t\t\t\t\t}) satisfies LineData,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tminReservedLineCount:\n\t\t\t\t\t\t\t\tuiState.additionalReservedLineCount,\n\t\t\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined;\n\t\t\t}),\n\t\t),\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
