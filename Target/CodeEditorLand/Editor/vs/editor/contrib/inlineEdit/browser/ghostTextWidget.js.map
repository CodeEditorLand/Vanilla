{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineEdit/browser/ghostTextWidget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, derived, observableFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport './inlineEdit.css';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops } from '../../../common/model.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { InlineDecorationType } from '../../../common/viewModel.js';\nimport { AdditionalLinesWidget, LineData } from '../../inlineCompletions/browser/view/ghostTextView.js';\nimport { GhostText } from '../../inlineCompletions/browser/model/ghostText.js';\nimport { ColumnRange } from '../../inlineCompletions/browser/utils.js';\nimport { diffDeleteDecoration, diffLineDeleteDecorationBackgroundWithIndicator } from '../../../browser/widget/diffEditor/registrations.contribution.js';\nimport { LineTokens } from '../../../common/tokens/lineTokens.js';\nimport { observableCodeEditor } from '../../../browser/observableCodeEditor.js';\n\nexport const INLINE_EDIT_DESCRIPTION = 'inline-edit';\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n\treadonly range: IObservable<IRange | undefined>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(this, this._editor.onDidChangeModel, () => /** @description editor.model */ this._editor.getModel());\n\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\treadonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\n\t\tthis._register(this._editorObs.setDecorations(this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet range = this.model.range?.read(reader);\n\t\t//if range is empty, we want to remove it\n\t\tif (range && range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\trange = undefined;\n\t\t}\n\t\t//check if both range and text are single line - in this case we want to do inline replacement\n\t\t//rather than replacing whole lines\n\t\tconst isSingleLine = (range ? range.startLineNumber === range.endLineNumber : true) && ghostText.parts.length === 1 && ghostText.parts[0].lines.length === 1;\n\n\t\t//check if we're just removing code\n\t\tconst isPureRemove = ghostText.parts.length === 1 && ghostText.parts[0].lines.every(l => l.length === 0);\n\n\t\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\t\tconst additionalLines: { content: string; decorations: LineDecoration[] }[] = [];\n\n\t\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(\n\t\t\t\t\t\tnew LineDecoration(\n\t\t\t\t\t\t\tlastLine.content.length + 1,\n\t\t\t\t\t\t\tlastLine.content.length + 1 + lines[0].length,\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\tInlineDecorationType.Regular\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className ? [new LineDecoration(1, line.length + 1, className, InlineDecorationType.Regular)] : []\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined = undefined;\n\t\tlet lastIdx = 0;\n\t\tif (!isPureRemove && (isSingleLine || !range)) {\n\t\t\tfor (const part of ghostText.parts) {\n\t\t\t\tlet lines = part.lines;\n\t\t\t\t//If remove range is set, we want to push all new liens to virtual area\n\t\t\t\tif (range && !isSingleLine) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tlines = [];\n\t\t\t\t}\n\t\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\t\tinlineTexts.push({\n\t\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\t\ttext: lines[0],\n\t\t\t\t\t\tpreview: part.preview,\n\t\t\t\t\t});\n\t\t\t\t\tlines = lines.slice(1);\n\t\t\t\t} else {\n\t\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t\t\t}\n\n\t\t\t\tif (lines.length > 0) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlastIdx = part.column - 1;\n\t\t\t}\n\t\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t\t\t}\n\t\t}\n\n\t\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\t\tconst lineNumber =\n\t\t\t(isSingleLine || !range) ? ghostText.lineNumber : range.endLineNumber - 1;\n\n\t\treturn {\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber,\n\t\t\tadditionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t\trange,\n\t\t\tisSingleLine,\n\t\t\tisPureRemove,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-edit-hidden', description: 'inline-edit-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.range) {\n\t\t\tconst ranges = [];\n\t\t\tif (uiState.isSingleLine) {\n\t\t\t\tranges.push(uiState.range);\n\t\t\t}\n\t\t\telse if (!uiState.isPureRemove) {\n\t\t\t\tconst lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n\t\t\t\tfor (let i = 0; i < lines; i++) {\n\t\t\t\t\tconst line = uiState.range.startLineNumber + i;\n\t\t\t\t\tconst firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n\t\t\t\t\tconst lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n\t\t\t\t\tconst range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n\t\t\t\t\tranges.push(range);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const range of ranges) {\n\t\t\t\tdecorations.push({\n\t\t\t\t\trange,\n\t\t\t\t\toptions: diffDeleteDecoration\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (uiState.range && !uiState.isSingleLine && uiState.isPureRemove) {\n\t\t\tconst r = new Range(uiState.range.startLineNumber, 1, uiState.range.endLineNumber - 1, 1);\n\n\t\t\tdecorations.push({\n\t\t\t\trange: r,\n\t\t\t\toptions: diffLineDeleteDecorationBackgroundWithIndicator\n\t\t\t});\n\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: INLINE_EDIT_DESCRIPTION,\n\t\t\t\t\tafter: { content: p.text, inlineClassName: p.preview ? 'inline-edit-decoration-preview' : 'inline-edit-decoration', cursorStops: InjectedTextCursorStops.Left },\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis._editor,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState && !uiState.isPureRemove && (uiState.isSingleLine || !uiState.range) ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines.map(l => ({\n\t\t\t\t\t\tcontent: LineTokens.createEmpty(l.content, this.languageService.languageIdCodec),\n\t\t\t\t\t\tdecorations: l.decorations\n\t\t\t\t\t} satisfies LineData)),\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
