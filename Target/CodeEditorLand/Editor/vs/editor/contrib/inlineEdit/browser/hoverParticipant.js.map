{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineEdit/browser/hoverParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { constObservable } from '../../../../base/common/observable.js';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IModelDecoration } from '../../../common/model.js';\nimport { HoverAnchor, HoverAnchorType, HoverForeignElementAnchor, IEditorHoverParticipant, IEditorHoverRenderContext, IHoverPart, IRenderedHoverPart, IRenderedHoverParts, RenderedHoverParts } from '../../hover/browser/hoverTypes.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { InlineEditController } from './inlineEditController.js';\nimport { InlineEditHintsContentWidget } from './inlineEditHintsWidget.js';\nimport * as nls from '../../../../nls.js';\n\nexport class InlineEditHover implements IHoverPart {\n\tconstructor(\n\t\tpublic readonly owner: IEditorHoverParticipant<InlineEditHover>,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly controller: InlineEditController\n\t) { }\n\n\tpublic isValidForHoverAnchor(anchor: HoverAnchor): boolean {\n\t\treturn (\n\t\t\tanchor.type === HoverAnchorType.Range\n\t\t\t&& this.range.startColumn <= anchor.range.startColumn\n\t\t\t&& this.range.endColumn >= anchor.range.endColumn\n\t\t);\n\t}\n}\n\nexport class InlineEditHoverParticipant implements IEditorHoverParticipant<InlineEditHover> {\n\n\tpublic readonly hoverOrdinal: number = 5;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t}\n\n\tsuggestHoverAnchor(mouseEvent: IEditorMouseEvent): HoverAnchor | null {\n\t\tconst controller = InlineEditController.get(this._editor);\n\t\tif (!controller) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\t\tif (target.type === MouseTargetType.CONTENT_VIEW_ZONE) {\n\t\t\t// handle the case where the mouse is over the view zone\n\t\t\tconst viewZoneData = target.detail;\n\t\t\tif (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {\n\t\t\t\t// const range = Range.fromPositions(this._editor.getModel()!.validatePosition(viewZoneData.positionBefore || viewZoneData.position));\n\t\t\t\tconst range = target.range;\n\t\t\t\treturn new HoverForeignElementAnchor(1000, this, range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n\t\t\t}\n\t\t}\n\t\tif (target.type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\t// handle the case where the mouse is over the empty portion of a line following ghost text\n\t\t\tif (controller.shouldShowHoverAt(target.range)) {\n\t\t\t\treturn new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n\t\t\t}\n\t\t}\n\t\tif (target.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\t// handle the case where the mouse is directly over ghost text\n\t\t\tconst mightBeForeignElement = target.detail.mightBeForeignElement;\n\t\t\tif (mightBeForeignElement && controller.shouldShowHoverAt(target.range)) {\n\t\t\t\treturn new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomputeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[]): InlineEditHover[] {\n\t\tif (this._editor.getOption(EditorOption.inlineEdit).showToolbar !== 'onHover') {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst controller = InlineEditController.get(this._editor);\n\t\tif (controller && controller.shouldShowHoverAt(anchor.range)) {\n\t\t\treturn [new InlineEditHover(this, anchor.range, controller)];\n\t\t}\n\t\treturn [];\n\t}\n\n\trenderHoverParts(context: IEditorHoverRenderContext, hoverParts: InlineEditHover[]): IRenderedHoverParts<InlineEditHover> {\n\t\tconst disposables = new DisposableStore();\n\n\t\tthis._telemetryService.publicLog2<{}, {\n\t\t\towner: 'hediet';\n\t\t\tcomment: 'This event tracks whenever an inline edit hover is shown.';\n\t\t}>('inlineEditHover.shown');\n\n\t\tconst w = this._instantiationService.createInstance(InlineEditHintsContentWidget, this._editor, false,\n\t\t\tconstObservable(null),\n\t\t);\n\t\tdisposables.add(w);\n\t\tconst widgetNode: HTMLElement = w.getDomNode();\n\t\tconst renderedHoverPart: IRenderedHoverPart<InlineEditHover> = {\n\t\t\thoverPart: hoverParts[0],\n\t\t\thoverElement: widgetNode,\n\t\t\tdispose: () => disposables.dispose()\n\t\t};\n\t\treturn new RenderedHoverParts([renderedHoverPart]);\n\t}\n\n\tgetAccessibleContent(hoverPart: InlineEditHover): string {\n\t\treturn nls.localize('hoverAccessibilityInlineEdits', 'There are inline edits here.');\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
