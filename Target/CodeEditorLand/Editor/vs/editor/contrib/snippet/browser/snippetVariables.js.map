{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/browser/snippetVariables.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport * as path from '../../../../base/common/path.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { commonPrefixLength, getLeadingWhitespace, isFalsyOrWhitespace, splitLines } from '../../../../base/common/strings.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { Text, Variable, VariableResolver } from './snippetParser.js';\nimport { OvertypingCapturer } from '../../suggest/browser/suggestOvertypingCapturer.js';\nimport * as nls from '../../../../nls.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { WORKSPACE_EXTENSION, isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, IWorkspaceContextService, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier, isEmptyWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\n\nexport const KnownSnippetVariableNames = Object.freeze<{ [key: string]: true }>({\n\t'CURRENT_YEAR': true,\n\t'CURRENT_YEAR_SHORT': true,\n\t'CURRENT_MONTH': true,\n\t'CURRENT_DATE': true,\n\t'CURRENT_HOUR': true,\n\t'CURRENT_MINUTE': true,\n\t'CURRENT_SECOND': true,\n\t'CURRENT_DAY_NAME': true,\n\t'CURRENT_DAY_NAME_SHORT': true,\n\t'CURRENT_MONTH_NAME': true,\n\t'CURRENT_MONTH_NAME_SHORT': true,\n\t'CURRENT_SECONDS_UNIX': true,\n\t'CURRENT_TIMEZONE_OFFSET': true,\n\t'SELECTION': true,\n\t'CLIPBOARD': true,\n\t'TM_SELECTED_TEXT': true,\n\t'TM_CURRENT_LINE': true,\n\t'TM_CURRENT_WORD': true,\n\t'TM_LINE_INDEX': true,\n\t'TM_LINE_NUMBER': true,\n\t'TM_FILENAME': true,\n\t'TM_FILENAME_BASE': true,\n\t'TM_DIRECTORY': true,\n\t'TM_FILEPATH': true,\n\t'CURSOR_INDEX': true, // 0-offset\n\t'CURSOR_NUMBER': true, // 1-offset\n\t'RELATIVE_FILEPATH': true,\n\t'BLOCK_COMMENT_START': true,\n\t'BLOCK_COMMENT_END': true,\n\t'LINE_COMMENT': true,\n\t'WORKSPACE_NAME': true,\n\t'WORKSPACE_FOLDER': true,\n\t'RANDOM': true,\n\t'RANDOM_HEX': true,\n\t'UUID': true\n});\n\nexport class CompositeSnippetVariableResolver implements VariableResolver {\n\n\tconstructor(private readonly _delegates: VariableResolver[]) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tfor (const delegate of this._delegates) {\n\t\t\tconst value = delegate.resolve(variable);\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class SelectionBasedVariableResolver implements VariableResolver {\n\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _selection: Selection,\n\t\tprivate readonly _selectionIdx: number,\n\t\tprivate readonly _overtypingCapturer: OvertypingCapturer | undefined\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\n\t\tconst { name } = variable;\n\n\t\tif (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n\t\t\tlet value = this._model.getValueInRange(this._selection) || undefined;\n\t\t\tlet isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;\n\n\t\t\t// If there was no selected text, try to get last overtyped text\n\t\t\tif (!value && this._overtypingCapturer) {\n\t\t\t\tconst info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\n\t\t\t\tif (info) {\n\t\t\t\t\tvalue = info.value;\n\t\t\t\t\tisMultiline = info.multiline;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value && isMultiline && variable.snippet) {\n\t\t\t\t// Selection is a multiline string which we indentation we now\n\t\t\t\t// need to adjust. We compare the indentation of this variable\n\t\t\t\t// with the indentation at the editor position and add potential\n\t\t\t\t// extra indentation to the value\n\n\t\t\t\tconst line = this._model.getLineContent(this._selection.startLineNumber);\n\t\t\t\tconst lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n\n\t\t\t\tlet varLeadingWhitespace = lineLeadingWhitespace;\n\t\t\t\tvariable.snippet.walk(marker => {\n\t\t\t\t\tif (marker === variable) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (marker instanceof Text) {\n\t\t\t\t\t\tvarLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop()!);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t\tconst whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n\n\t\t\t\tvalue = value.replace(\n\t\t\t\t\t/(\\r\\n|\\r|\\n)(.*)/g,\n\t\t\t\t\t(m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\n\t\t} else if (name === 'TM_CURRENT_LINE') {\n\t\t\treturn this._model.getLineContent(this._selection.positionLineNumber);\n\n\t\t} else if (name === 'TM_CURRENT_WORD') {\n\t\t\tconst info = this._model.getWordAtPosition({\n\t\t\t\tlineNumber: this._selection.positionLineNumber,\n\t\t\t\tcolumn: this._selection.positionColumn\n\t\t\t});\n\t\t\treturn info && info.word || undefined;\n\n\t\t} else if (name === 'TM_LINE_INDEX') {\n\t\t\treturn String(this._selection.positionLineNumber - 1);\n\n\t\t} else if (name === 'TM_LINE_NUMBER') {\n\t\t\treturn String(this._selection.positionLineNumber);\n\n\t\t} else if (name === 'CURSOR_INDEX') {\n\t\t\treturn String(this._selectionIdx);\n\n\t\t} else if (name === 'CURSOR_NUMBER') {\n\t\t\treturn String(this._selectionIdx + 1);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ModelBasedVariableResolver implements VariableResolver {\n\n\tconstructor(\n\t\tprivate readonly _labelService: ILabelService,\n\t\tprivate readonly _model: ITextModel\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\n\t\tconst { name } = variable;\n\n\t\tif (name === 'TM_FILENAME') {\n\t\t\treturn path.basename(this._model.uri.fsPath);\n\n\t\t} else if (name === 'TM_FILENAME_BASE') {\n\t\t\tconst name = path.basename(this._model.uri.fsPath);\n\t\t\tconst idx = name.lastIndexOf('.');\n\t\t\tif (idx <= 0) {\n\t\t\t\treturn name;\n\t\t\t} else {\n\t\t\t\treturn name.slice(0, idx);\n\t\t\t}\n\n\t\t} else if (name === 'TM_DIRECTORY') {\n\t\t\tif (path.dirname(this._model.uri.fsPath) === '.') {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn this._labelService.getUriLabel(dirname(this._model.uri));\n\n\t\t} else if (name === 'TM_FILEPATH') {\n\t\t\treturn this._labelService.getUriLabel(this._model.uri);\n\t\t} else if (name === 'RELATIVE_FILEPATH') {\n\t\t\treturn this._labelService.getUriLabel(this._model.uri, { relative: true, noPrefix: true });\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport interface IReadClipboardText {\n\t(): string | undefined;\n}\n\nexport class ClipboardBasedVariableResolver implements VariableResolver {\n\n\tconstructor(\n\t\tprivate readonly _readClipboardText: IReadClipboardText,\n\t\tprivate readonly _selectionIdx: number,\n\t\tprivate readonly _selectionCount: number,\n\t\tprivate readonly _spread: boolean\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tif (variable.name !== 'CLIPBOARD') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst clipboardText = this._readClipboardText();\n\t\tif (!clipboardText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// `spread` is assigning each cursor a line of the clipboard\n\t\t// text whenever there the line count equals the cursor count\n\t\t// and when enabled\n\t\tif (this._spread) {\n\t\t\tconst lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n\t\t\tif (lines.length === this._selectionCount) {\n\t\t\t\treturn lines[this._selectionIdx];\n\t\t\t}\n\t\t}\n\t\treturn clipboardText;\n\t}\n}\nexport class CommentBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _selection: Selection,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\t//\n\t}\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\t\tconst langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\n\t\tconst config = this._languageConfigurationService.getLanguageConfiguration(langId).comments;\n\t\tif (!config) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (name === 'LINE_COMMENT') {\n\t\t\treturn config.lineCommentToken || undefined;\n\t\t} else if (name === 'BLOCK_COMMENT_START') {\n\t\t\treturn config.blockCommentStartToken || undefined;\n\t\t} else if (name === 'BLOCK_COMMENT_END') {\n\t\t\treturn config.blockCommentEndToken || undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n}\nexport class TimeBasedVariableResolver implements VariableResolver {\n\n\tprivate static readonly dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n\tprivate static readonly dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n\tprivate static readonly monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n\tprivate static readonly monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n\n\tprivate readonly _date = new Date();\n\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === 'CURRENT_YEAR') {\n\t\t\treturn String(this._date.getFullYear());\n\t\t} else if (name === 'CURRENT_YEAR_SHORT') {\n\t\t\treturn String(this._date.getFullYear()).slice(-2);\n\t\t} else if (name === 'CURRENT_MONTH') {\n\t\t\treturn String(this._date.getMonth().valueOf() + 1).padStart(2, '0');\n\t\t} else if (name === 'CURRENT_DATE') {\n\t\t\treturn String(this._date.getDate().valueOf()).padStart(2, '0');\n\t\t} else if (name === 'CURRENT_HOUR') {\n\t\t\treturn String(this._date.getHours().valueOf()).padStart(2, '0');\n\t\t} else if (name === 'CURRENT_MINUTE') {\n\t\t\treturn String(this._date.getMinutes().valueOf()).padStart(2, '0');\n\t\t} else if (name === 'CURRENT_SECOND') {\n\t\t\treturn String(this._date.getSeconds().valueOf()).padStart(2, '0');\n\t\t} else if (name === 'CURRENT_DAY_NAME') {\n\t\t\treturn TimeBasedVariableResolver.dayNames[this._date.getDay()];\n\t\t} else if (name === 'CURRENT_DAY_NAME_SHORT') {\n\t\t\treturn TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];\n\t\t} else if (name === 'CURRENT_MONTH_NAME') {\n\t\t\treturn TimeBasedVariableResolver.monthNames[this._date.getMonth()];\n\t\t} else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n\t\t\treturn TimeBasedVariableResolver.monthNamesShort[this._date.getMonth()];\n\t\t} else if (name === 'CURRENT_SECONDS_UNIX') {\n\t\t\treturn String(Math.floor(this._date.getTime() / 1000));\n\t\t} else if (name === 'CURRENT_TIMEZONE_OFFSET') {\n\t\t\tconst rawTimeOffset = this._date.getTimezoneOffset();\n\t\t\tconst sign = rawTimeOffset > 0 ? '-' : '+';\n\t\t\tconst hours = Math.trunc(Math.abs(rawTimeOffset / 60));\n\t\t\tconst hoursString = (hours < 10 ? '0' + hours : hours);\n\t\t\tconst minutes = Math.abs(rawTimeOffset) - hours * 60;\n\t\t\tconst minutesString = (minutes < 10 ? '0' + minutes : minutes);\n\t\t\treturn sign + hoursString + ':' + minutesString;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class WorkspaceBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _workspaceService: IWorkspaceContextService | undefined,\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tif (!this._workspaceService) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n\t\tif (isEmptyWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (variable.name === 'WORKSPACE_NAME') {\n\t\t\treturn this._resolveWorkspaceName(workspaceIdentifier);\n\t\t} else if (variable.name === 'WORKSPACE_FOLDER') {\n\t\t\treturn this._resoveWorkspacePath(workspaceIdentifier);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\tprivate _resolveWorkspaceName(workspaceIdentifier: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier): string | undefined {\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn path.basename(workspaceIdentifier.uri.path);\n\t\t}\n\n\t\tlet filename = path.basename(workspaceIdentifier.configPath.path);\n\t\tif (filename.endsWith(WORKSPACE_EXTENSION)) {\n\t\t\tfilename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\t\t}\n\t\treturn filename;\n\t}\n\tprivate _resoveWorkspacePath(workspaceIdentifier: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier): string | undefined {\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n\t\t}\n\n\t\tconst filename = path.basename(workspaceIdentifier.configPath.path);\n\t\tlet folderpath = workspaceIdentifier.configPath.fsPath;\n\t\tif (folderpath.endsWith(filename)) {\n\t\t\tfolderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n\t\t}\n\t\treturn (folderpath ? normalizeDriveLetter(folderpath) : '/');\n\t}\n}\n\nexport class RandomBasedVariableResolver implements VariableResolver {\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === 'RANDOM') {\n\t\t\treturn Math.random().toString().slice(-6);\n\t\t} else if (name === 'RANDOM_HEX') {\n\t\t\treturn Math.random().toString(16).slice(-6);\n\t\t} else if (name === 'UUID') {\n\t\t\treturn generateUuid();\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["name"]
}
