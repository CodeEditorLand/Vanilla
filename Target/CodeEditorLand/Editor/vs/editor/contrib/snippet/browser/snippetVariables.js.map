{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/browser/snippetVariables.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { normalizeDriveLetter } from \"../../../../base/common/labels.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport { dirname } from \"../../../../base/common/resources.js\";\nimport {\n\tcommonPrefixLength,\n\tgetLeadingWhitespace,\n\tisFalsyOrWhitespace,\n\tsplitLines,\n} from \"../../../../base/common/strings.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport {\n\ttype ISingleFolderWorkspaceIdentifier,\n\ttype IWorkspaceContextService,\n\ttype IWorkspaceIdentifier,\n\tWORKSPACE_EXTENSION,\n\tisEmptyWorkspaceIdentifier,\n\tisSingleFolderWorkspaceIdentifier,\n\ttoWorkspaceIdentifier,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport type { Selection } from \"../../../common/core/selection.js\";\nimport { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport type { OvertypingCapturer } from \"../../suggest/browser/suggestOvertypingCapturer.js\";\nimport { Text, type Variable, type VariableResolver } from \"./snippetParser.js\";\n\nexport const KnownSnippetVariableNames = Object.freeze<{ [key: string]: true }>(\n\t{\n\t\tCURRENT_YEAR: true,\n\t\tCURRENT_YEAR_SHORT: true,\n\t\tCURRENT_MONTH: true,\n\t\tCURRENT_DATE: true,\n\t\tCURRENT_HOUR: true,\n\t\tCURRENT_MINUTE: true,\n\t\tCURRENT_SECOND: true,\n\t\tCURRENT_DAY_NAME: true,\n\t\tCURRENT_DAY_NAME_SHORT: true,\n\t\tCURRENT_MONTH_NAME: true,\n\t\tCURRENT_MONTH_NAME_SHORT: true,\n\t\tCURRENT_SECONDS_UNIX: true,\n\t\tCURRENT_TIMEZONE_OFFSET: true,\n\t\tSELECTION: true,\n\t\tCLIPBOARD: true,\n\t\tTM_SELECTED_TEXT: true,\n\t\tTM_CURRENT_LINE: true,\n\t\tTM_CURRENT_WORD: true,\n\t\tTM_LINE_INDEX: true,\n\t\tTM_LINE_NUMBER: true,\n\t\tTM_FILENAME: true,\n\t\tTM_FILENAME_BASE: true,\n\t\tTM_DIRECTORY: true,\n\t\tTM_FILEPATH: true,\n\t\tCURSOR_INDEX: true, // 0-offset\n\t\tCURSOR_NUMBER: true, // 1-offset\n\t\tRELATIVE_FILEPATH: true,\n\t\tBLOCK_COMMENT_START: true,\n\t\tBLOCK_COMMENT_END: true,\n\t\tLINE_COMMENT: true,\n\t\tWORKSPACE_NAME: true,\n\t\tWORKSPACE_FOLDER: true,\n\t\tRANDOM: true,\n\t\tRANDOM_HEX: true,\n\t\tUUID: true,\n\t},\n);\n\nexport class CompositeSnippetVariableResolver implements VariableResolver {\n\tconstructor(private readonly _delegates: VariableResolver[]) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tfor (const delegate of this._delegates) {\n\t\t\tconst value = delegate.resolve(variable);\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class SelectionBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _selection: Selection,\n\t\tprivate readonly _selectionIdx: number,\n\t\tprivate readonly _overtypingCapturer: OvertypingCapturer | undefined,\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === \"SELECTION\" || name === \"TM_SELECTED_TEXT\") {\n\t\t\tlet value =\n\t\t\t\tthis._model.getValueInRange(this._selection) || undefined;\n\t\t\tlet isMultiline =\n\t\t\t\tthis._selection.startLineNumber !==\n\t\t\t\tthis._selection.endLineNumber;\n\n\t\t\t// If there was no selected text, try to get last overtyped text\n\t\t\tif (!value && this._overtypingCapturer) {\n\t\t\t\tconst info = this._overtypingCapturer.getLastOvertypedInfo(\n\t\t\t\t\tthis._selectionIdx,\n\t\t\t\t);\n\t\t\t\tif (info) {\n\t\t\t\t\tvalue = info.value;\n\t\t\t\t\tisMultiline = info.multiline;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value && isMultiline && variable.snippet) {\n\t\t\t\t// Selection is a multiline string which we indentation we now\n\t\t\t\t// need to adjust. We compare the indentation of this variable\n\t\t\t\t// with the indentation at the editor position and add potential\n\t\t\t\t// extra indentation to the value\n\n\t\t\t\tconst line = this._model.getLineContent(\n\t\t\t\t\tthis._selection.startLineNumber,\n\t\t\t\t);\n\t\t\t\tconst lineLeadingWhitespace = getLeadingWhitespace(\n\t\t\t\t\tline,\n\t\t\t\t\t0,\n\t\t\t\t\tthis._selection.startColumn - 1,\n\t\t\t\t);\n\n\t\t\t\tlet varLeadingWhitespace = lineLeadingWhitespace;\n\t\t\t\tvariable.snippet.walk((marker) => {\n\t\t\t\t\tif (marker === variable) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (marker instanceof Text) {\n\t\t\t\t\t\tvarLeadingWhitespace = getLeadingWhitespace(\n\t\t\t\t\t\t\tsplitLines(marker.value).pop()!,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t\tconst whitespaceCommonLength = commonPrefixLength(\n\t\t\t\t\tvarLeadingWhitespace,\n\t\t\t\t\tlineLeadingWhitespace,\n\t\t\t\t);\n\n\t\t\t\tvalue = value.replace(\n\t\t\t\t\t/(\\r\\n|\\r|\\n)(.*)/g,\n\t\t\t\t\t(m, newline, rest) =>\n\t\t\t\t\t\t`${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t} else if (name === \"TM_CURRENT_LINE\") {\n\t\t\treturn this._model.getLineContent(\n\t\t\t\tthis._selection.positionLineNumber,\n\t\t\t);\n\t\t} else if (name === \"TM_CURRENT_WORD\") {\n\t\t\tconst info = this._model.getWordAtPosition({\n\t\t\t\tlineNumber: this._selection.positionLineNumber,\n\t\t\t\tcolumn: this._selection.positionColumn,\n\t\t\t});\n\t\t\treturn (info && info.word) || undefined;\n\t\t} else if (name === \"TM_LINE_INDEX\") {\n\t\t\treturn String(this._selection.positionLineNumber - 1);\n\t\t} else if (name === \"TM_LINE_NUMBER\") {\n\t\t\treturn String(this._selection.positionLineNumber);\n\t\t} else if (name === \"CURSOR_INDEX\") {\n\t\t\treturn String(this._selectionIdx);\n\t\t} else if (name === \"CURSOR_NUMBER\") {\n\t\t\treturn String(this._selectionIdx + 1);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ModelBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _labelService: ILabelService,\n\t\tprivate readonly _model: ITextModel,\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === \"TM_FILENAME\") {\n\t\t\treturn path.basename(this._model.uri.fsPath);\n\t\t} else if (name === \"TM_FILENAME_BASE\") {\n\t\t\tconst name = path.basename(this._model.uri.fsPath);\n\t\t\tconst idx = name.lastIndexOf(\".\");\n\t\t\tif (idx <= 0) {\n\t\t\t\treturn name;\n\t\t\t} else {\n\t\t\t\treturn name.slice(0, idx);\n\t\t\t}\n\t\t} else if (name === \"TM_DIRECTORY\") {\n\t\t\tif (path.dirname(this._model.uri.fsPath) === \".\") {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn this._labelService.getUriLabel(dirname(this._model.uri));\n\t\t} else if (name === \"TM_FILEPATH\") {\n\t\t\treturn this._labelService.getUriLabel(this._model.uri);\n\t\t} else if (name === \"RELATIVE_FILEPATH\") {\n\t\t\treturn this._labelService.getUriLabel(this._model.uri, {\n\t\t\t\trelative: true,\n\t\t\t\tnoPrefix: true,\n\t\t\t});\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport interface IReadClipboardText {\n\t(): string | undefined;\n}\n\nexport class ClipboardBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _readClipboardText: IReadClipboardText,\n\t\tprivate readonly _selectionIdx: number,\n\t\tprivate readonly _selectionCount: number,\n\t\tprivate readonly _spread: boolean,\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tif (variable.name !== \"CLIPBOARD\") {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst clipboardText = this._readClipboardText();\n\t\tif (!clipboardText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// `spread` is assigning each cursor a line of the clipboard\n\t\t// text whenever there the line count equals the cursor count\n\t\t// and when enabled\n\t\tif (this._spread) {\n\t\t\tconst lines = clipboardText\n\t\t\t\t.split(/\\r\\n|\\n|\\r/)\n\t\t\t\t.filter((s) => !isFalsyOrWhitespace(s));\n\t\t\tif (lines.length === this._selectionCount) {\n\t\t\t\treturn lines[this._selectionIdx];\n\t\t\t}\n\t\t}\n\t\treturn clipboardText;\n\t}\n}\nexport class CommentBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _selection: Selection,\n\t\t@ILanguageConfigurationService\n\t\tprivate readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\t//\n\t}\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\t\tconst langId = this._model.getLanguageIdAtPosition(\n\t\t\tthis._selection.selectionStartLineNumber,\n\t\t\tthis._selection.selectionStartColumn,\n\t\t);\n\t\tconst config =\n\t\t\tthis._languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlangId,\n\t\t\t).comments;\n\t\tif (!config) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (name === \"LINE_COMMENT\") {\n\t\t\treturn config.lineCommentToken || undefined;\n\t\t} else if (name === \"BLOCK_COMMENT_START\") {\n\t\t\treturn config.blockCommentStartToken || undefined;\n\t\t} else if (name === \"BLOCK_COMMENT_END\") {\n\t\t\treturn config.blockCommentEndToken || undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n}\nexport class TimeBasedVariableResolver implements VariableResolver {\n\tprivate static readonly dayNames = [\n\t\tnls.localize(\"Sunday\", \"Sunday\"),\n\t\tnls.localize(\"Monday\", \"Monday\"),\n\t\tnls.localize(\"Tuesday\", \"Tuesday\"),\n\t\tnls.localize(\"Wednesday\", \"Wednesday\"),\n\t\tnls.localize(\"Thursday\", \"Thursday\"),\n\t\tnls.localize(\"Friday\", \"Friday\"),\n\t\tnls.localize(\"Saturday\", \"Saturday\"),\n\t];\n\tprivate static readonly dayNamesShort = [\n\t\tnls.localize(\"SundayShort\", \"Sun\"),\n\t\tnls.localize(\"MondayShort\", \"Mon\"),\n\t\tnls.localize(\"TuesdayShort\", \"Tue\"),\n\t\tnls.localize(\"WednesdayShort\", \"Wed\"),\n\t\tnls.localize(\"ThursdayShort\", \"Thu\"),\n\t\tnls.localize(\"FridayShort\", \"Fri\"),\n\t\tnls.localize(\"SaturdayShort\", \"Sat\"),\n\t];\n\tprivate static readonly monthNames = [\n\t\tnls.localize(\"January\", \"January\"),\n\t\tnls.localize(\"February\", \"February\"),\n\t\tnls.localize(\"March\", \"March\"),\n\t\tnls.localize(\"April\", \"April\"),\n\t\tnls.localize(\"May\", \"May\"),\n\t\tnls.localize(\"June\", \"June\"),\n\t\tnls.localize(\"July\", \"July\"),\n\t\tnls.localize(\"August\", \"August\"),\n\t\tnls.localize(\"September\", \"September\"),\n\t\tnls.localize(\"October\", \"October\"),\n\t\tnls.localize(\"November\", \"November\"),\n\t\tnls.localize(\"December\", \"December\"),\n\t];\n\tprivate static readonly monthNamesShort = [\n\t\tnls.localize(\"JanuaryShort\", \"Jan\"),\n\t\tnls.localize(\"FebruaryShort\", \"Feb\"),\n\t\tnls.localize(\"MarchShort\", \"Mar\"),\n\t\tnls.localize(\"AprilShort\", \"Apr\"),\n\t\tnls.localize(\"MayShort\", \"May\"),\n\t\tnls.localize(\"JuneShort\", \"Jun\"),\n\t\tnls.localize(\"JulyShort\", \"Jul\"),\n\t\tnls.localize(\"AugustShort\", \"Aug\"),\n\t\tnls.localize(\"SeptemberShort\", \"Sep\"),\n\t\tnls.localize(\"OctoberShort\", \"Oct\"),\n\t\tnls.localize(\"NovemberShort\", \"Nov\"),\n\t\tnls.localize(\"DecemberShort\", \"Dec\"),\n\t];\n\n\tprivate readonly _date = new Date();\n\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === \"CURRENT_YEAR\") {\n\t\t\treturn String(this._date.getFullYear());\n\t\t} else if (name === \"CURRENT_YEAR_SHORT\") {\n\t\t\treturn String(this._date.getFullYear()).slice(-2);\n\t\t} else if (name === \"CURRENT_MONTH\") {\n\t\t\treturn String(this._date.getMonth().valueOf() + 1).padStart(2, \"0\");\n\t\t} else if (name === \"CURRENT_DATE\") {\n\t\t\treturn String(this._date.getDate().valueOf()).padStart(2, \"0\");\n\t\t} else if (name === \"CURRENT_HOUR\") {\n\t\t\treturn String(this._date.getHours().valueOf()).padStart(2, \"0\");\n\t\t} else if (name === \"CURRENT_MINUTE\") {\n\t\t\treturn String(this._date.getMinutes().valueOf()).padStart(2, \"0\");\n\t\t} else if (name === \"CURRENT_SECOND\") {\n\t\t\treturn String(this._date.getSeconds().valueOf()).padStart(2, \"0\");\n\t\t} else if (name === \"CURRENT_DAY_NAME\") {\n\t\t\treturn TimeBasedVariableResolver.dayNames[this._date.getDay()];\n\t\t} else if (name === \"CURRENT_DAY_NAME_SHORT\") {\n\t\t\treturn TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];\n\t\t} else if (name === \"CURRENT_MONTH_NAME\") {\n\t\t\treturn TimeBasedVariableResolver.monthNames[this._date.getMonth()];\n\t\t} else if (name === \"CURRENT_MONTH_NAME_SHORT\") {\n\t\t\treturn TimeBasedVariableResolver.monthNamesShort[\n\t\t\t\tthis._date.getMonth()\n\t\t\t];\n\t\t} else if (name === \"CURRENT_SECONDS_UNIX\") {\n\t\t\treturn String(Math.floor(this._date.getTime() / 1000));\n\t\t} else if (name === \"CURRENT_TIMEZONE_OFFSET\") {\n\t\t\tconst rawTimeOffset = this._date.getTimezoneOffset();\n\t\t\tconst sign = rawTimeOffset > 0 ? \"-\" : \"+\";\n\t\t\tconst hours = Math.trunc(Math.abs(rawTimeOffset / 60));\n\t\t\tconst hoursString = hours < 10 ? \"0\" + hours : hours;\n\t\t\tconst minutes = Math.abs(rawTimeOffset) - hours * 60;\n\t\t\tconst minutesString = minutes < 10 ? \"0\" + minutes : minutes;\n\t\t\treturn sign + hoursString + \":\" + minutesString;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class WorkspaceBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _workspaceService:\n\t\t\t| IWorkspaceContextService\n\t\t\t| undefined,\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tif (!this._workspaceService) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(\n\t\t\tthis._workspaceService.getWorkspace(),\n\t\t);\n\t\tif (isEmptyWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (variable.name === \"WORKSPACE_NAME\") {\n\t\t\treturn this._resolveWorkspaceName(workspaceIdentifier);\n\t\t} else if (variable.name === \"WORKSPACE_FOLDER\") {\n\t\t\treturn this._resoveWorkspacePath(workspaceIdentifier);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\tprivate _resolveWorkspaceName(\n\t\tworkspaceIdentifier:\n\t\t\t| IWorkspaceIdentifier\n\t\t\t| ISingleFolderWorkspaceIdentifier,\n\t): string | undefined {\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn path.basename(workspaceIdentifier.uri.path);\n\t\t}\n\n\t\tlet filename = path.basename(workspaceIdentifier.configPath.path);\n\t\tif (filename.endsWith(WORKSPACE_EXTENSION)) {\n\t\t\tfilename = filename.substr(\n\t\t\t\t0,\n\t\t\t\tfilename.length - WORKSPACE_EXTENSION.length - 1,\n\t\t\t);\n\t\t}\n\t\treturn filename;\n\t}\n\tprivate _resoveWorkspacePath(\n\t\tworkspaceIdentifier:\n\t\t\t| IWorkspaceIdentifier\n\t\t\t| ISingleFolderWorkspaceIdentifier,\n\t): string | undefined {\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n\t\t}\n\n\t\tconst filename = path.basename(workspaceIdentifier.configPath.path);\n\t\tlet folderpath = workspaceIdentifier.configPath.fsPath;\n\t\tif (folderpath.endsWith(filename)) {\n\t\t\tfolderpath = folderpath.substr(\n\t\t\t\t0,\n\t\t\t\tfolderpath.length - filename.length - 1,\n\t\t\t);\n\t\t}\n\t\treturn folderpath ? normalizeDriveLetter(folderpath) : \"/\";\n\t}\n}\n\nexport class RandomBasedVariableResolver implements VariableResolver {\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === \"RANDOM\") {\n\t\t\treturn Math.random().toString().slice(-6);\n\t\t} else if (name === \"RANDOM_HEX\") {\n\t\t\treturn Math.random().toString(16).slice(-6);\n\t\t} else if (name === \"UUID\") {\n\t\t\treturn generateUuid();\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["name"]
}
