{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/browser/snippetParser.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../../base/common/charCode.js';\n\nexport const enum TokenType {\n\tDollar,\n\tColon,\n\tComma,\n\tCurlyOpen,\n\tCurlyClose,\n\tBackslash,\n\tForwardslash,\n\tPipe,\n\tInt,\n\tVariableName,\n\tFormat,\n\tPlus,\n\tDash,\n\tQuestionMark,\n\tEOF\n}\n\nexport interface Token {\n\ttype: TokenType;\n\tpos: number;\n\tlen: number;\n}\n\n\nexport class Scanner {\n\n\tprivate static _table: { [ch: number]: TokenType } = {\n\t\t[CharCode.DollarSign]: TokenType.Dollar,\n\t\t[CharCode.Colon]: TokenType.Colon,\n\t\t[CharCode.Comma]: TokenType.Comma,\n\t\t[CharCode.OpenCurlyBrace]: TokenType.CurlyOpen,\n\t\t[CharCode.CloseCurlyBrace]: TokenType.CurlyClose,\n\t\t[CharCode.Backslash]: TokenType.Backslash,\n\t\t[CharCode.Slash]: TokenType.Forwardslash,\n\t\t[CharCode.Pipe]: TokenType.Pipe,\n\t\t[CharCode.Plus]: TokenType.Plus,\n\t\t[CharCode.Dash]: TokenType.Dash,\n\t\t[CharCode.QuestionMark]: TokenType.QuestionMark,\n\t};\n\n\tstatic isDigitCharacter(ch: number): boolean {\n\t\treturn ch >= CharCode.Digit0 && ch <= CharCode.Digit9;\n\t}\n\n\tstatic isVariableCharacter(ch: number): boolean {\n\t\treturn ch === CharCode.Underline\n\t\t\t|| (ch >= CharCode.a && ch <= CharCode.z)\n\t\t\t|| (ch >= CharCode.A && ch <= CharCode.Z);\n\t}\n\n\tvalue: string = '';\n\tpos: number = 0;\n\n\ttext(value: string) {\n\t\tthis.value = value;\n\t\tthis.pos = 0;\n\t}\n\n\ttokenText(token: Token): string {\n\t\treturn this.value.substr(token.pos, token.len);\n\t}\n\n\tnext(): Token {\n\n\t\tif (this.pos >= this.value.length) {\n\t\t\treturn { type: TokenType.EOF, pos: this.pos, len: 0 };\n\t\t}\n\n\t\tconst pos = this.pos;\n\t\tlet len = 0;\n\t\tlet ch = this.value.charCodeAt(pos);\n\t\tlet type: TokenType;\n\n\t\t// static types\n\t\ttype = Scanner._table[ch];\n\t\tif (typeof type === 'number') {\n\t\t\tthis.pos += 1;\n\t\t\treturn { type, pos, len: 1 };\n\t\t}\n\n\t\t// number\n\t\tif (Scanner.isDigitCharacter(ch)) {\n\t\t\ttype = TokenType.Int;\n\t\t\tdo {\n\t\t\t\tlen += 1;\n\t\t\t\tch = this.value.charCodeAt(pos + len);\n\t\t\t} while (Scanner.isDigitCharacter(ch));\n\n\t\t\tthis.pos += len;\n\t\t\treturn { type, pos, len };\n\t\t}\n\n\t\t// variable name\n\t\tif (Scanner.isVariableCharacter(ch)) {\n\t\t\ttype = TokenType.VariableName;\n\t\t\tdo {\n\t\t\t\tch = this.value.charCodeAt(pos + (++len));\n\t\t\t} while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n\n\t\t\tthis.pos += len;\n\t\t\treturn { type, pos, len };\n\t\t}\n\n\n\t\t// format\n\t\ttype = TokenType.Format;\n\t\tdo {\n\t\t\tlen += 1;\n\t\t\tch = this.value.charCodeAt(pos + len);\n\t\t} while (\n\t\t\t!isNaN(ch)\n\t\t\t&& typeof Scanner._table[ch] === 'undefined' // not static token\n\t\t\t&& !Scanner.isDigitCharacter(ch) // not number\n\t\t\t&& !Scanner.isVariableCharacter(ch) // not variable\n\t\t);\n\n\t\tthis.pos += len;\n\t\treturn { type, pos, len };\n\t}\n}\n\nexport abstract class Marker {\n\n\treadonly _markerBrand: any;\n\n\tpublic parent!: Marker;\n\tprotected _children: Marker[] = [];\n\n\tappendChild(child: Marker): this {\n\t\tif (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n\t\t\t// this and previous child are text -> merge them\n\t\t\t(<Text>this._children[this._children.length - 1]).value += child.value;\n\t\t} else {\n\t\t\t// normal adoption of child\n\t\t\tchild.parent = this;\n\t\t\tthis._children.push(child);\n\t\t}\n\t\treturn this;\n\t}\n\n\treplace(child: Marker, others: Marker[]): void {\n\t\tconst { parent } = child;\n\t\tconst idx = parent.children.indexOf(child);\n\t\tconst newChildren = parent.children.slice(0);\n\t\tnewChildren.splice(idx, 1, ...others);\n\t\tparent._children = newChildren;\n\n\t\t(function _fixParent(children: Marker[], parent: Marker) {\n\t\t\tfor (const child of children) {\n\t\t\t\tchild.parent = parent;\n\t\t\t\t_fixParent(child.children, child);\n\t\t\t}\n\t\t})(others, parent);\n\t}\n\n\tget children(): Marker[] {\n\t\treturn this._children;\n\t}\n\n\tget rightMostDescendant(): Marker {\n\t\tif (this._children.length > 0) {\n\t\t\treturn this._children[this._children.length - 1].rightMostDescendant;\n\t\t}\n\t\treturn this;\n\t}\n\n\tget snippet(): TextmateSnippet | undefined {\n\t\tlet candidate: Marker = this;\n\t\twhile (true) {\n\t\t\tif (!candidate) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (candidate instanceof TextmateSnippet) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\tcandidate = candidate.parent;\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\treturn this.children.reduce((prev, cur) => prev + cur.toString(), '');\n\t}\n\n\tabstract toTextmateString(): string;\n\n\tlen(): number {\n\t\treturn 0;\n\t}\n\n\tabstract clone(): Marker;\n}\n\nexport class Text extends Marker {\n\n\tstatic escape(value: string): string {\n\t\treturn value.replace(/\\$|}|\\\\/g, '\\\\$&');\n\t}\n\n\tconstructor(public value: string) {\n\t\tsuper();\n\t}\n\toverride toString() {\n\t\treturn this.value;\n\t}\n\ttoTextmateString(): string {\n\t\treturn Text.escape(this.value);\n\t}\n\toverride len(): number {\n\t\treturn this.value.length;\n\t}\n\tclone(): Text {\n\t\treturn new Text(this.value);\n\t}\n}\n\nexport abstract class TransformableMarker extends Marker {\n\tpublic transform?: Transform;\n}\n\nexport class Placeholder extends TransformableMarker {\n\tstatic compareByIndex(a: Placeholder, b: Placeholder): number {\n\t\tif (a.index === b.index) {\n\t\t\treturn 0;\n\t\t} else if (a.isFinalTabstop) {\n\t\t\treturn 1;\n\t\t} else if (b.isFinalTabstop) {\n\t\t\treturn -1;\n\t\t} else if (a.index < b.index) {\n\t\t\treturn -1;\n\t\t} else if (a.index > b.index) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tconstructor(public index: number) {\n\t\tsuper();\n\t}\n\n\tget isFinalTabstop() {\n\t\treturn this.index === 0;\n\t}\n\n\tget choice(): Choice | undefined {\n\t\treturn this._children.length === 1 && this._children[0] instanceof Choice\n\t\t\t? this._children[0] as Choice\n\t\t\t: undefined;\n\t}\n\n\ttoTextmateString(): string {\n\t\tlet transformString = '';\n\t\tif (this.transform) {\n\t\t\ttransformString = this.transform.toTextmateString();\n\t\t}\n\t\tif (this.children.length === 0 && !this.transform) {\n\t\t\treturn `\\$${this.index}`;\n\t\t} else if (this.children.length === 0) {\n\t\t\treturn `\\${${this.index}${transformString}}`;\n\t\t} else if (this.choice) {\n\t\t\treturn `\\${${this.index}|${this.choice.toTextmateString()}|${transformString}}`;\n\t\t} else {\n\t\t\treturn `\\${${this.index}:${this.children.map(child => child.toTextmateString()).join('')}${transformString}}`;\n\t\t}\n\t}\n\n\tclone(): Placeholder {\n\t\tconst ret = new Placeholder(this.index);\n\t\tif (this.transform) {\n\t\t\tret.transform = this.transform.clone();\n\t\t}\n\t\tret._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n}\n\nexport class Choice extends Marker {\n\n\treadonly options: Text[] = [];\n\n\toverride appendChild(marker: Marker): this {\n\t\tif (marker instanceof Text) {\n\t\t\tmarker.parent = this;\n\t\t\tthis.options.push(marker);\n\t\t}\n\t\treturn this;\n\t}\n\n\toverride toString() {\n\t\treturn this.options[0].value;\n\t}\n\n\ttoTextmateString(): string {\n\t\treturn this.options\n\t\t\t.map(option => option.value.replace(/\\||,|\\\\/g, '\\\\$&'))\n\t\t\t.join(',');\n\t}\n\n\toverride len(): number {\n\t\treturn this.options[0].len();\n\t}\n\n\tclone(): Choice {\n\t\tconst ret = new Choice();\n\t\tthis.options.forEach(ret.appendChild, ret);\n\t\treturn ret;\n\t}\n}\n\nexport class Transform extends Marker {\n\n\tregexp: RegExp = new RegExp('');\n\n\tresolve(value: string): string {\n\t\tconst _this = this;\n\t\tlet didMatch = false;\n\t\tlet ret = value.replace(this.regexp, function () {\n\t\t\tdidMatch = true;\n\t\t\treturn _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n\t\t});\n\t\t// when the regex didn't match and when the transform has\n\t\t// else branches, then run those\n\t\tif (!didMatch && this._children.some(child => child instanceof FormatString && Boolean(child.elseValue))) {\n\t\t\tret = this._replace([]);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate _replace(groups: string[]): string {\n\t\tlet ret = '';\n\t\tfor (const marker of this._children) {\n\t\t\tif (marker instanceof FormatString) {\n\t\t\t\tlet value = groups[marker.index] || '';\n\t\t\t\tvalue = marker.resolve(value);\n\t\t\t\tret += value;\n\t\t\t} else {\n\t\t\t\tret += marker.toString();\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\toverride toString(): string {\n\t\treturn '';\n\t}\n\n\ttoTextmateString(): string {\n\t\treturn `/${this.regexp.source}/${this.children.map(c => c.toTextmateString())}/${(this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : '')}`;\n\t}\n\n\tclone(): Transform {\n\t\tconst ret = new Transform();\n\t\tret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n\t\tret._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n\n}\n\nexport class FormatString extends Marker {\n\n\tconstructor(\n\t\treadonly index: number,\n\t\treadonly shorthandName?: string,\n\t\treadonly ifValue?: string,\n\t\treadonly elseValue?: string,\n\t) {\n\t\tsuper();\n\t}\n\n\tresolve(value?: string): string {\n\t\tif (this.shorthandName === 'upcase') {\n\t\t\treturn !value ? '' : value.toLocaleUpperCase();\n\t\t} else if (this.shorthandName === 'downcase') {\n\t\t\treturn !value ? '' : value.toLocaleLowerCase();\n\t\t} else if (this.shorthandName === 'capitalize') {\n\t\t\treturn !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n\t\t} else if (this.shorthandName === 'pascalcase') {\n\t\t\treturn !value ? '' : this._toPascalCase(value);\n\t\t} else if (this.shorthandName === 'camelcase') {\n\t\t\treturn !value ? '' : this._toCamelCase(value);\n\t\t} else if (Boolean(value) && typeof this.ifValue === 'string') {\n\t\t\treturn this.ifValue;\n\t\t} else if (!Boolean(value) && typeof this.elseValue === 'string') {\n\t\t\treturn this.elseValue;\n\t\t} else {\n\t\t\treturn value || '';\n\t\t}\n\t}\n\n\tprivate _toPascalCase(value: string): string {\n\t\tconst match = value.match(/[a-z0-9]+/gi);\n\t\tif (!match) {\n\t\t\treturn value;\n\t\t}\n\t\treturn match.map(word => {\n\t\t\treturn word.charAt(0).toUpperCase() + word.substr(1);\n\t\t})\n\t\t\t.join('');\n\t}\n\n\tprivate _toCamelCase(value: string): string {\n\t\tconst match = value.match(/[a-z0-9]+/gi);\n\t\tif (!match) {\n\t\t\treturn value;\n\t\t}\n\t\treturn match.map((word, index) => {\n\t\t\tif (index === 0) {\n\t\t\t\treturn word.charAt(0).toLowerCase() + word.substr(1);\n\t\t\t}\n\t\t\treturn word.charAt(0).toUpperCase() + word.substr(1);\n\t\t})\n\t\t\t.join('');\n\t}\n\n\ttoTextmateString(): string {\n\t\tlet value = '${';\n\t\tvalue += this.index;\n\t\tif (this.shorthandName) {\n\t\t\tvalue += `:/${this.shorthandName}`;\n\n\t\t} else if (this.ifValue && this.elseValue) {\n\t\t\tvalue += `:?${this.ifValue}:${this.elseValue}`;\n\t\t} else if (this.ifValue) {\n\t\t\tvalue += `:+${this.ifValue}`;\n\t\t} else if (this.elseValue) {\n\t\t\tvalue += `:-${this.elseValue}`;\n\t\t}\n\t\tvalue += '}';\n\t\treturn value;\n\t}\n\n\tclone(): FormatString {\n\t\tconst ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n\t\treturn ret;\n\t}\n}\n\nexport class Variable extends TransformableMarker {\n\n\tconstructor(public name: string) {\n\t\tsuper();\n\t}\n\n\tresolve(resolver: VariableResolver): boolean {\n\t\tlet value = resolver.resolve(this);\n\t\tif (this.transform) {\n\t\t\tvalue = this.transform.resolve(value || '');\n\t\t}\n\t\tif (value !== undefined) {\n\t\t\tthis._children = [new Text(value)];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\ttoTextmateString(): string {\n\t\tlet transformString = '';\n\t\tif (this.transform) {\n\t\t\ttransformString = this.transform.toTextmateString();\n\t\t}\n\t\tif (this.children.length === 0) {\n\t\t\treturn `\\${${this.name}${transformString}}`;\n\t\t} else {\n\t\t\treturn `\\${${this.name}:${this.children.map(child => child.toTextmateString()).join('')}${transformString}}`;\n\t\t}\n\t}\n\n\tclone(): Variable {\n\t\tconst ret = new Variable(this.name);\n\t\tif (this.transform) {\n\t\t\tret.transform = this.transform.clone();\n\t\t}\n\t\tret._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n}\n\nexport interface VariableResolver {\n\tresolve(variable: Variable): string | undefined;\n}\n\nfunction walk(marker: Marker[], visitor: (marker: Marker) => boolean): void {\n\tconst stack = [...marker];\n\twhile (stack.length > 0) {\n\t\tconst marker = stack.shift()!;\n\t\tconst recurse = visitor(marker);\n\t\tif (!recurse) {\n\t\t\tbreak;\n\t\t}\n\t\tstack.unshift(...marker.children);\n\t}\n}\n\nexport class TextmateSnippet extends Marker {\n\n\tprivate _placeholders?: { all: Placeholder[]; last?: Placeholder };\n\n\tget placeholderInfo() {\n\t\tif (!this._placeholders) {\n\t\t\t// fill in placeholders\n\t\t\tconst all: Placeholder[] = [];\n\t\t\tlet last: Placeholder | undefined;\n\t\t\tthis.walk(function (candidate) {\n\t\t\t\tif (candidate instanceof Placeholder) {\n\t\t\t\t\tall.push(candidate);\n\t\t\t\t\tlast = !last || last.index < candidate.index ? candidate : last;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tthis._placeholders = { all, last };\n\t\t}\n\t\treturn this._placeholders;\n\t}\n\n\tget placeholders(): Placeholder[] {\n\t\tconst { all } = this.placeholderInfo;\n\t\treturn all;\n\t}\n\n\toffset(marker: Marker): number {\n\t\tlet pos = 0;\n\t\tlet found = false;\n\t\tthis.walk(candidate => {\n\t\t\tif (candidate === marker) {\n\t\t\t\tfound = true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpos += candidate.len();\n\t\t\treturn true;\n\t\t});\n\n\t\tif (!found) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn pos;\n\t}\n\n\tfullLen(marker: Marker): number {\n\t\tlet ret = 0;\n\t\twalk([marker], marker => {\n\t\t\tret += marker.len();\n\t\t\treturn true;\n\t\t});\n\t\treturn ret;\n\t}\n\n\tenclosingPlaceholders(placeholder: Placeholder): Placeholder[] {\n\t\tconst ret: Placeholder[] = [];\n\t\tlet { parent } = placeholder;\n\t\twhile (parent) {\n\t\t\tif (parent instanceof Placeholder) {\n\t\t\t\tret.push(parent);\n\t\t\t}\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tresolveVariables(resolver: VariableResolver): this {\n\t\tthis.walk(candidate => {\n\t\t\tif (candidate instanceof Variable) {\n\t\t\t\tif (candidate.resolve(resolver)) {\n\t\t\t\t\tthis._placeholders = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\treturn this;\n\t}\n\n\toverride appendChild(child: Marker) {\n\t\tthis._placeholders = undefined;\n\t\treturn super.appendChild(child);\n\t}\n\n\toverride replace(child: Marker, others: Marker[]): void {\n\t\tthis._placeholders = undefined;\n\t\treturn super.replace(child, others);\n\t}\n\n\ttoTextmateString(): string {\n\t\treturn this.children.reduce((prev, cur) => prev + cur.toTextmateString(), '');\n\t}\n\n\tclone(): TextmateSnippet {\n\t\tconst ret = new TextmateSnippet();\n\t\tthis._children = this.children.map(child => child.clone());\n\t\treturn ret;\n\t}\n\n\twalk(visitor: (marker: Marker) => boolean): void {\n\t\twalk(this.children, visitor);\n\t}\n}\n\nexport class SnippetParser {\n\n\tstatic escape(value: string): string {\n\t\treturn value.replace(/\\$|}|\\\\/g, '\\\\$&');\n\t}\n\n\t/**\n\t * Takes a snippet and returns the insertable string, e.g return the snippet-string\n\t * without any placeholder, tabstop, variables etc...\n\t */\n\tstatic asInsertText(value: string): string {\n\t\treturn new SnippetParser().parse(value).toString();\n\t}\n\n\tstatic guessNeedsClipboard(template: string): boolean {\n\t\treturn /\\${?CLIPBOARD/.test(template);\n\t}\n\n\tprivate _scanner: Scanner = new Scanner();\n\tprivate _token: Token = { type: TokenType.EOF, pos: 0, len: 0 };\n\n\tparse(value: string, insertFinalTabstop?: boolean, enforceFinalTabstop?: boolean): TextmateSnippet {\n\t\tconst snippet = new TextmateSnippet();\n\t\tthis.parseFragment(value, snippet);\n\t\tthis.ensureFinalTabstop(snippet, enforceFinalTabstop ?? false, insertFinalTabstop ?? false);\n\t\treturn snippet;\n\t}\n\n\tparseFragment(value: string, snippet: TextmateSnippet): readonly Marker[] {\n\n\t\tconst offset = snippet.children.length;\n\t\tthis._scanner.text(value);\n\t\tthis._token = this._scanner.next();\n\t\twhile (this._parse(snippet)) {\n\t\t\t// nothing\n\t\t}\n\n\t\t// fill in values for placeholders. the first placeholder of an index\n\t\t// that has a value defines the value for all placeholders with that index\n\t\tconst placeholderDefaultValues = new Map<number, Marker[] | undefined>();\n\t\tconst incompletePlaceholders: Placeholder[] = [];\n\t\tsnippet.walk(marker => {\n\t\t\tif (marker instanceof Placeholder) {\n\t\t\t\tif (marker.isFinalTabstop) {\n\t\t\t\t\tplaceholderDefaultValues.set(0, undefined);\n\t\t\t\t} else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n\t\t\t\t\tplaceholderDefaultValues.set(marker.index, marker.children);\n\t\t\t\t} else {\n\t\t\t\t\tincompletePlaceholders.push(marker);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\tconst fillInIncompletePlaceholder = (placeholder: Placeholder, stack: Set<number>) => {\n\t\t\tconst defaultValues = placeholderDefaultValues.get(placeholder.index);\n\t\t\tif (!defaultValues) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst clone = new Placeholder(placeholder.index);\n\t\t\tclone.transform = placeholder.transform;\n\t\t\tfor (const child of defaultValues) {\n\t\t\t\tconst newChild = child.clone();\n\t\t\t\tclone.appendChild(newChild);\n\n\t\t\t\t// \"recurse\" on children that are again placeholders\n\t\t\t\tif (newChild instanceof Placeholder && placeholderDefaultValues.has(newChild.index) && !stack.has(newChild.index)) {\n\t\t\t\t\tstack.add(newChild.index);\n\t\t\t\t\tfillInIncompletePlaceholder(newChild, stack);\n\t\t\t\t\tstack.delete(newChild.index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsnippet.replace(placeholder, [clone]);\n\t\t};\n\n\t\tconst stack = new Set<number>();\n\t\tfor (const placeholder of incompletePlaceholders) {\n\t\t\tfillInIncompletePlaceholder(placeholder, stack);\n\t\t}\n\n\t\treturn snippet.children.slice(offset);\n\t}\n\n\tensureFinalTabstop(snippet: TextmateSnippet, enforceFinalTabstop: boolean, insertFinalTabstop: boolean) {\n\n\t\tif (enforceFinalTabstop || insertFinalTabstop && snippet.placeholders.length > 0) {\n\t\t\tconst finalTabstop = snippet.placeholders.find(p => p.index === 0);\n\t\t\tif (!finalTabstop) {\n\t\t\t\t// the snippet uses placeholders but has no\n\t\t\t\t// final tabstop defined -> insert at the end\n\t\t\t\tsnippet.appendChild(new Placeholder(0));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprivate _accept(type?: TokenType): boolean;\n\tprivate _accept(type: TokenType | undefined, value: true): string;\n\tprivate _accept(type: TokenType, value?: boolean): boolean | string {\n\t\tif (type === undefined || this._token.type === type) {\n\t\t\tconst ret = !value ? true : this._scanner.tokenText(this._token);\n\t\t\tthis._token = this._scanner.next();\n\t\t\treturn ret;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _backTo(token: Token): false {\n\t\tthis._scanner.pos = token.pos + token.len;\n\t\tthis._token = token;\n\t\treturn false;\n\t}\n\n\tprivate _until(type: TokenType): false | string {\n\t\tconst start = this._token;\n\t\twhile (this._token.type !== type) {\n\t\t\tif (this._token.type === TokenType.EOF) {\n\t\t\t\treturn false;\n\t\t\t} else if (this._token.type === TokenType.Backslash) {\n\t\t\t\tconst nextToken = this._scanner.next();\n\t\t\t\tif (nextToken.type !== TokenType.Dollar\n\t\t\t\t\t&& nextToken.type !== TokenType.CurlyClose\n\t\t\t\t\t&& nextToken.type !== TokenType.Backslash) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._token = this._scanner.next();\n\t\t}\n\t\tconst value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\\\(\\$|}|\\\\)/g, '$1');\n\t\tthis._token = this._scanner.next();\n\t\treturn value;\n\t}\n\n\tprivate _parse(marker: Marker): boolean {\n\t\treturn this._parseEscaped(marker)\n\t\t\t|| this._parseTabstopOrVariableName(marker)\n\t\t\t|| this._parseComplexPlaceholder(marker)\n\t\t\t|| this._parseComplexVariable(marker)\n\t\t\t|| this._parseAnything(marker);\n\t}\n\n\t// \\$, \\\\, \\} -> just text\n\tprivate _parseEscaped(marker: Marker): boolean {\n\t\tlet value: string;\n\t\tif (value = this._accept(TokenType.Backslash, true)) {\n\t\t\t// saw a backslash, append escaped token or that backslash\n\t\t\tvalue = this._accept(TokenType.Dollar, true)\n\t\t\t\t|| this._accept(TokenType.CurlyClose, true)\n\t\t\t\t|| this._accept(TokenType.Backslash, true)\n\t\t\t\t|| value;\n\n\t\t\tmarker.appendChild(new Text(value));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// $foo -> variable, $1 -> tabstop\n\tprivate _parseTabstopOrVariableName(parent: Marker): boolean {\n\t\tlet value: string;\n\t\tconst token = this._token;\n\t\tconst match = this._accept(TokenType.Dollar)\n\t\t\t&& (value = this._accept(TokenType.VariableName, true) || this._accept(TokenType.Int, true));\n\n\t\tif (!match) {\n\t\t\treturn this._backTo(token);\n\t\t}\n\n\t\tparent.appendChild(/^\\d+$/.test(value!)\n\t\t\t? new Placeholder(Number(value!))\n\t\t\t: new Variable(value!)\n\t\t);\n\t\treturn true;\n\t}\n\n\t// ${1:<children>}, ${1} -> placeholder\n\tprivate _parseComplexPlaceholder(parent: Marker): boolean {\n\t\tlet index: string;\n\t\tconst token = this._token;\n\t\tconst match = this._accept(TokenType.Dollar)\n\t\t\t&& this._accept(TokenType.CurlyOpen)\n\t\t\t&& (index = this._accept(TokenType.Int, true));\n\n\t\tif (!match) {\n\t\t\treturn this._backTo(token);\n\t\t}\n\n\t\tconst placeholder = new Placeholder(Number(index!));\n\n\t\tif (this._accept(TokenType.Colon)) {\n\t\t\t// ${1:<children>}\n\t\t\twhile (true) {\n\n\t\t\t\t// ...} -> done\n\t\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\t\tparent.appendChild(placeholder);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._parse(placeholder)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// fallback\n\t\t\t\tparent.appendChild(new Text('${' + index! + ':'));\n\t\t\t\tplaceholder.children.forEach(parent.appendChild, parent);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (placeholder.index > 0 && this._accept(TokenType.Pipe)) {\n\t\t\t// ${1|one,two,three|}\n\t\t\tconst choice = new Choice();\n\n\t\t\twhile (true) {\n\t\t\t\tif (this._parseChoiceElement(choice)) {\n\n\t\t\t\t\tif (this._accept(TokenType.Comma)) {\n\t\t\t\t\t\t// opt, -> more\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._accept(TokenType.Pipe)) {\n\t\t\t\t\t\tplaceholder.appendChild(choice);\n\t\t\t\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\t\t\t\t// ..|} -> done\n\t\t\t\t\t\t\tparent.appendChild(placeholder);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._backTo(token);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Forwardslash)) {\n\t\t\t// ${1/<regex>/<format>/<options>}\n\t\t\tif (this._parseTransform(placeholder)) {\n\t\t\t\tparent.appendChild(placeholder);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\n\t\t} else if (this._accept(TokenType.CurlyClose)) {\n\t\t\t// ${1}\n\t\t\tparent.appendChild(placeholder);\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\t// ${1 <- missing curly or colon\n\t\t\treturn this._backTo(token);\n\t\t}\n\t}\n\n\tprivate _parseChoiceElement(parent: Choice): boolean {\n\t\tconst token = this._token;\n\t\tconst values: string[] = [];\n\n\t\twhile (true) {\n\t\t\tif (this._token.type === TokenType.Comma || this._token.type === TokenType.Pipe) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet value: string;\n\t\t\tif (value = this._accept(TokenType.Backslash, true)) {\n\t\t\t\t// \\, \\|, or \\\\\n\t\t\t\tvalue = this._accept(TokenType.Comma, true)\n\t\t\t\t\t|| this._accept(TokenType.Pipe, true)\n\t\t\t\t\t|| this._accept(TokenType.Backslash, true)\n\t\t\t\t\t|| value;\n\t\t\t} else {\n\t\t\t\tvalue = this._accept(undefined, true);\n\t\t\t}\n\t\t\tif (!value) {\n\t\t\t\t// EOF\n\t\t\t\tthis._backTo(token);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvalues.push(value);\n\t\t}\n\n\t\tif (values.length === 0) {\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\t\t}\n\n\t\tparent.appendChild(new Text(values.join('')));\n\t\treturn true;\n\t}\n\n\t// ${foo:<children>}, ${foo} -> variable\n\tprivate _parseComplexVariable(parent: Marker): boolean {\n\t\tlet name: string;\n\t\tconst token = this._token;\n\t\tconst match = this._accept(TokenType.Dollar)\n\t\t\t&& this._accept(TokenType.CurlyOpen)\n\t\t\t&& (name = this._accept(TokenType.VariableName, true));\n\n\t\tif (!match) {\n\t\t\treturn this._backTo(token);\n\t\t}\n\n\t\tconst variable = new Variable(name!);\n\n\t\tif (this._accept(TokenType.Colon)) {\n\t\t\t// ${foo:<children>}\n\t\t\twhile (true) {\n\n\t\t\t\t// ...} -> done\n\t\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\t\tparent.appendChild(variable);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._parse(variable)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// fallback\n\t\t\t\tparent.appendChild(new Text('${' + name! + ':'));\n\t\t\t\tvariable.children.forEach(parent.appendChild, parent);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Forwardslash)) {\n\t\t\t// ${foo/<regex>/<format>/<options>}\n\t\t\tif (this._parseTransform(variable)) {\n\t\t\t\tparent.appendChild(variable);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\n\t\t} else if (this._accept(TokenType.CurlyClose)) {\n\t\t\t// ${foo}\n\t\t\tparent.appendChild(variable);\n\t\t\treturn true;\n\n\t\t} else {\n\t\t\t// ${foo <- missing curly or colon\n\t\t\treturn this._backTo(token);\n\t\t}\n\t}\n\n\tprivate _parseTransform(parent: TransformableMarker): boolean {\n\t\t// ...<regex>/<format>/<options>}\n\n\t\tconst transform = new Transform();\n\t\tlet regexValue = '';\n\t\tlet regexOptions = '';\n\n\t\t// (1) /regex\n\t\twhile (true) {\n\t\t\tif (this._accept(TokenType.Forwardslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet escaped: string;\n\t\t\tif (escaped = this._accept(TokenType.Backslash, true)) {\n\t\t\t\tescaped = this._accept(TokenType.Forwardslash, true) || escaped;\n\t\t\t\tregexValue += escaped;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this._token.type !== TokenType.EOF) {\n\t\t\t\tregexValue += this._accept(undefined, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// (2) /format\n\t\twhile (true) {\n\t\t\tif (this._accept(TokenType.Forwardslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet escaped: string;\n\t\t\tif (escaped = this._accept(TokenType.Backslash, true)) {\n\t\t\t\tescaped = this._accept(TokenType.Backslash, true) || this._accept(TokenType.Forwardslash, true) || escaped;\n\t\t\t\ttransform.appendChild(new Text(escaped));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this._parseFormatString(transform) || this._parseAnything(transform)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// (3) /option\n\t\twhile (true) {\n\t\t\tif (this._accept(TokenType.CurlyClose)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._token.type !== TokenType.EOF) {\n\t\t\t\tregexOptions += this._accept(undefined, true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\ttransform.regexp = new RegExp(regexValue, regexOptions);\n\t\t} catch (e) {\n\t\t\t// invalid regexp\n\t\t\treturn false;\n\t\t}\n\n\t\tparent.transform = transform;\n\t\treturn true;\n\t}\n\n\tprivate _parseFormatString(parent: Transform): boolean {\n\n\t\tconst token = this._token;\n\t\tif (!this._accept(TokenType.Dollar)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet complex = false;\n\t\tif (this._accept(TokenType.CurlyOpen)) {\n\t\t\tcomplex = true;\n\t\t}\n\n\t\tconst index = this._accept(TokenType.Int, true);\n\n\t\tif (!index) {\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\n\t\t} else if (!complex) {\n\t\t\t// $1\n\t\t\tparent.appendChild(new FormatString(Number(index)));\n\t\t\treturn true;\n\n\t\t} else if (this._accept(TokenType.CurlyClose)) {\n\t\t\t// ${1}\n\t\t\tparent.appendChild(new FormatString(Number(index)));\n\t\t\treturn true;\n\n\t\t} else if (!this._accept(TokenType.Colon)) {\n\t\t\tthis._backTo(token);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._accept(TokenType.Forwardslash)) {\n\t\t\t// ${1:/upcase}\n\t\t\tconst shorthand = this._accept(TokenType.VariableName, true);\n\t\t\tif (!shorthand || !this._accept(TokenType.CurlyClose)) {\n\t\t\t\tthis._backTo(token);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), shorthand));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Plus)) {\n\t\t\t// ${1:+<if>}\n\t\t\tconst ifValue = this._until(TokenType.CurlyClose);\n\t\t\tif (ifValue) {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.Dash)) {\n\t\t\t// ${2:-<else>}\n\t\t\tconst elseValue = this._until(TokenType.CurlyClose);\n\t\t\tif (elseValue) {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} else if (this._accept(TokenType.QuestionMark)) {\n\t\t\t// ${2:?<if>:<else>}\n\t\t\tconst ifValue = this._until(TokenType.Colon);\n\t\t\tif (ifValue) {\n\t\t\t\tconst elseValue = this._until(TokenType.CurlyClose);\n\t\t\t\tif (elseValue) {\n\t\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\t// ${1:<else>}\n\t\t\tconst elseValue = this._until(TokenType.CurlyClose);\n\t\t\tif (elseValue) {\n\t\t\t\tparent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tthis._backTo(token);\n\t\treturn false;\n\t}\n\n\tprivate _parseAnything(marker: Marker): boolean {\n\t\tif (this._token.type !== TokenType.EOF) {\n\t\t\tmarker.appendChild(new Text(this._scanner.tokenText(this._token)));\n\t\t\tthis._accept(undefined);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TokenType", "parent", "child", "marker", "stack"]
}
