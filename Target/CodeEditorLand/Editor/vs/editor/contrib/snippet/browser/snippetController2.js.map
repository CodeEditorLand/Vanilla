{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/browser/snippetController2.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { assertType } from \"../../../../base/common/types.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorCommand,\n\tEditorContributionInstantiation,\n\tregisterEditorCommand,\n\tregisterEditorContribution,\n} from \"../../../browser/editorExtensions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport type { Range } from \"../../../common/core/range.js\";\nimport type { IEditorContribution } from \"../../../common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport {\n\ttype CompletionItem,\n\tCompletionItemKind,\n\ttype CompletionItemProvider,\n} from \"../../../common/languages.js\";\nimport { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { ILanguageFeaturesService } from \"../../../common/services/languageFeatures.js\";\nimport { showSimpleSuggestions } from \"../../suggest/browser/suggest.js\";\nimport type { OvertypingCapturer } from \"../../suggest/browser/suggestOvertypingCapturer.js\";\nimport type { Choice } from \"./snippetParser.js\";\nimport { type ISnippetEdit, SnippetSession } from \"./snippetSession.js\";\n\nexport interface ISnippetInsertOptions {\n\toverwriteBefore: number;\n\toverwriteAfter: number;\n\tadjustWhitespace: boolean;\n\tundoStopBefore: boolean;\n\tundoStopAfter: boolean;\n\tclipboardText: string | undefined;\n\tovertypingCapturer: OvertypingCapturer | undefined;\n}\n\nconst _defaultOptions: ISnippetInsertOptions = {\n\toverwriteBefore: 0,\n\toverwriteAfter: 0,\n\tundoStopBefore: true,\n\tundoStopAfter: true,\n\tadjustWhitespace: true,\n\tclipboardText: undefined,\n\tovertypingCapturer: undefined,\n};\n\nexport class SnippetController2 implements IEditorContribution {\n\tpublic static readonly ID = \"snippetController2\";\n\n\tstatic get(editor: ICodeEditor): SnippetController2 | null {\n\t\treturn editor.getContribution<SnippetController2>(\n\t\t\tSnippetController2.ID,\n\t\t);\n\t}\n\n\tstatic readonly InSnippetMode = new RawContextKey(\n\t\t\"inSnippetMode\",\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"inSnippetMode\",\n\t\t\t\"Whether the editor in current in snippet mode\",\n\t\t),\n\t);\n\tstatic readonly HasNextTabstop = new RawContextKey(\n\t\t\"hasNextTabstop\",\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"hasNextTabstop\",\n\t\t\t\"Whether there is a next tab stop when in snippet mode\",\n\t\t),\n\t);\n\tstatic readonly HasPrevTabstop = new RawContextKey(\n\t\t\"hasPrevTabstop\",\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"hasPrevTabstop\",\n\t\t\t\"Whether there is a previous tab stop when in snippet mode\",\n\t\t),\n\t);\n\n\tprivate readonly _inSnippet: IContextKey<boolean>;\n\tprivate readonly _hasNextTabstop: IContextKey<boolean>;\n\tprivate readonly _hasPrevTabstop: IContextKey<boolean>;\n\n\tprivate _session?: SnippetSession;\n\tprivate readonly _snippetListener = new DisposableStore();\n\tprivate _modelVersionId = -1;\n\tprivate _currentChoice?: Choice;\n\n\tprivate _choiceCompletions?: {\n\t\tprovider: CompletionItemProvider;\n\t\tenable(): void;\n\t\tdisable(): void;\n\t};\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILanguageFeaturesService\n\t\tprivate readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILanguageConfigurationService\n\t\tprivate readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._inSnippet =\n\t\t\tSnippetController2.InSnippetMode.bindTo(contextKeyService);\n\t\tthis._hasNextTabstop =\n\t\t\tSnippetController2.HasNextTabstop.bindTo(contextKeyService);\n\t\tthis._hasPrevTabstop =\n\t\t\tSnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n\t}\n\n\tdispose(): void {\n\t\tthis._inSnippet.reset();\n\t\tthis._hasPrevTabstop.reset();\n\t\tthis._hasNextTabstop.reset();\n\t\tthis._session?.dispose();\n\t\tthis._snippetListener.dispose();\n\t}\n\n\tapply(edits: ISnippetEdit[], opts?: Partial<ISnippetInsertOptions>) {\n\t\ttry {\n\t\t\tthis._doInsert(\n\t\t\t\tedits,\n\t\t\t\ttypeof opts === \"undefined\"\n\t\t\t\t\t? _defaultOptions\n\t\t\t\t\t: { ..._defaultOptions, ...opts },\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tthis.cancel();\n\t\t\tthis._logService.error(e);\n\t\t\tthis._logService.error(\"snippet_error\");\n\t\t\tthis._logService.error(\"insert_edits=\", edits);\n\t\t\tthis._logService.error(\n\t\t\t\t\"existing_template=\",\n\t\t\t\tthis._session ? this._session._logInfo() : \"<no_session>\",\n\t\t\t);\n\t\t}\n\t}\n\n\tinsert(template: string, opts?: Partial<ISnippetInsertOptions>): void {\n\t\t// this is here to find out more about the yet-not-understood\n\t\t// error that sometimes happens when we fail to inserted a nested\n\t\t// snippet\n\t\ttry {\n\t\t\tthis._doInsert(\n\t\t\t\ttemplate,\n\t\t\t\ttypeof opts === \"undefined\"\n\t\t\t\t\t? _defaultOptions\n\t\t\t\t\t: { ..._defaultOptions, ...opts },\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tthis.cancel();\n\t\t\tthis._logService.error(e);\n\t\t\tthis._logService.error(\"snippet_error\");\n\t\t\tthis._logService.error(\"insert_template=\", template);\n\t\t\tthis._logService.error(\n\t\t\t\t\"existing_template=\",\n\t\t\t\tthis._session ? this._session._logInfo() : \"<no_session>\",\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _doInsert(\n\t\ttemplate: string | ISnippetEdit[],\n\t\topts: ISnippetInsertOptions,\n\t): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// don't listen while inserting the snippet\n\t\t// as that is the inflight state causing cancelation\n\t\tthis._snippetListener.clear();\n\n\t\tif (opts.undoStopBefore) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t}\n\n\t\t// don't merge\n\t\tif (this._session && typeof template !== \"string\") {\n\t\t\tthis.cancel();\n\t\t}\n\n\t\tif (this._session) {\n\t\t\tassertType(typeof template === \"string\");\n\t\t\tthis._session.merge(template, opts);\n\t\t} else {\n\t\t\tthis._modelVersionId = this._editor\n\t\t\t\t.getModel()\n\t\t\t\t.getAlternativeVersionId();\n\t\t\tthis._session = new SnippetSession(\n\t\t\t\tthis._editor,\n\t\t\t\ttemplate,\n\t\t\t\topts,\n\t\t\t\tthis._languageConfigurationService,\n\t\t\t);\n\t\t\tthis._session.insert();\n\t\t}\n\n\t\tif (opts.undoStopAfter) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t}\n\n\t\t// regster completion item provider when there is any choice element\n\t\tif (this._session?.hasChoice) {\n\t\t\tconst provider: CompletionItemProvider = {\n\t\t\t\t_debugDisplayName: \"snippetChoiceCompletions\",\n\t\t\t\tprovideCompletionItems: (\n\t\t\t\t\tmodel: ITextModel,\n\t\t\t\t\tposition: Position,\n\t\t\t\t) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this._session ||\n\t\t\t\t\t\tmodel !== this._editor.getModel() ||\n\t\t\t\t\t\t!Position.equals(this._editor.getPosition(), position)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst { activeChoice } = this._session;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!activeChoice ||\n\t\t\t\t\t\tactiveChoice.choice.options.length === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst word = model.getValueInRange(activeChoice.range);\n\t\t\t\t\tconst isAnyOfOptions = Boolean(\n\t\t\t\t\t\tactiveChoice.choice.options.find(\n\t\t\t\t\t\t\t(o) => o.value === word,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tconst suggestions: CompletionItem[] = [];\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\ti < activeChoice.choice.options.length;\n\t\t\t\t\t\ti++\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst option = activeChoice.choice.options[i];\n\t\t\t\t\t\tsuggestions.push({\n\t\t\t\t\t\t\tkind: CompletionItemKind.Value,\n\t\t\t\t\t\t\tlabel: option.value,\n\t\t\t\t\t\t\tinsertText: option.value,\n\t\t\t\t\t\t\tsortText: \"a\".repeat(i + 1),\n\t\t\t\t\t\t\trange: activeChoice.range,\n\t\t\t\t\t\t\tfilterText: isAnyOfOptions\n\t\t\t\t\t\t\t\t? `${word}_${option.value}`\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tcommand: {\n\t\t\t\t\t\t\t\tid: \"jumpToNextSnippetPlaceholder\",\n\t\t\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\t\t\"next\",\n\t\t\t\t\t\t\t\t\t\"Go to next placeholder...\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn { suggestions };\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst model = this._editor.getModel();\n\n\t\t\tlet registration: IDisposable | undefined;\n\t\t\tlet isRegistered = false;\n\t\t\tconst disable = () => {\n\t\t\t\tregistration?.dispose();\n\t\t\t\tisRegistered = false;\n\t\t\t};\n\n\t\t\tconst enable = () => {\n\t\t\t\tif (!isRegistered) {\n\t\t\t\t\tregistration =\n\t\t\t\t\t\tthis._languageFeaturesService.completionProvider.register(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlanguage: model.getLanguageId(),\n\t\t\t\t\t\t\t\tpattern: model.uri.fsPath,\n\t\t\t\t\t\t\t\tscheme: model.uri.scheme,\n\t\t\t\t\t\t\t\texclusive: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._snippetListener.add(registration);\n\t\t\t\t\tisRegistered = true;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._choiceCompletions = { provider, enable, disable };\n\t\t}\n\n\t\tthis._updateState();\n\n\t\tthis._snippetListener.add(\n\t\t\tthis._editor.onDidChangeModelContent(\n\t\t\t\t(e) => e.isFlush && this.cancel(),\n\t\t\t),\n\t\t);\n\t\tthis._snippetListener.add(\n\t\t\tthis._editor.onDidChangeModel(() => this.cancel()),\n\t\t);\n\t\tthis._snippetListener.add(\n\t\t\tthis._editor.onDidChangeCursorSelection(() => this._updateState()),\n\t\t);\n\t}\n\n\tprivate _updateState(): void {\n\t\tif (!this._session || !this._editor.hasModel()) {\n\t\t\t// canceled in the meanwhile\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis._modelVersionId ===\n\t\t\tthis._editor.getModel().getAlternativeVersionId()\n\t\t) {\n\t\t\t// undo until the 'before' state happened\n\t\t\t// and makes use cancel snippet mode\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tif (!this._session.hasPlaceholder) {\n\t\t\t// don't listen for selection changes and don't\n\t\t\t// update context keys when the snippet is plain text\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tif (\n\t\t\tthis._session.isAtLastPlaceholder ||\n\t\t\t!this._session.isSelectionWithinPlaceholders()\n\t\t) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tthis._inSnippet.set(true);\n\t\tthis._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n\t\tthis._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n\n\t\tthis._handleChoice();\n\t}\n\n\tprivate _handleChoice(): void {\n\t\tif (!this._session || !this._editor.hasModel()) {\n\t\t\tthis._currentChoice = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tconst { activeChoice } = this._session;\n\t\tif (!activeChoice || !this._choiceCompletions) {\n\t\t\tthis._choiceCompletions?.disable();\n\t\t\tthis._currentChoice = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._currentChoice !== activeChoice.choice) {\n\t\t\tthis._currentChoice = activeChoice.choice;\n\n\t\t\tthis._choiceCompletions.enable();\n\n\t\t\t// trigger suggest with the special choice completion provider\n\t\t\tqueueMicrotask(() => {\n\t\t\t\tshowSimpleSuggestions(\n\t\t\t\t\tthis._editor,\n\t\t\t\t\tthis._choiceCompletions!.provider,\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t}\n\n\tfinish(): void {\n\t\twhile (this._inSnippet.get()) {\n\t\t\tthis.next();\n\t\t}\n\t}\n\n\tcancel(resetSelection = false): void {\n\t\tthis._inSnippet.reset();\n\t\tthis._hasPrevTabstop.reset();\n\t\tthis._hasNextTabstop.reset();\n\t\tthis._snippetListener.clear();\n\n\t\tthis._currentChoice = undefined;\n\n\t\tthis._session?.dispose();\n\t\tthis._session = undefined;\n\t\tthis._modelVersionId = -1;\n\t\tif (resetSelection) {\n\t\t\t// reset selection to the primary cursor when being asked\n\t\t\t// for. this happens when explicitly cancelling snippet mode,\n\t\t\t// e.g. when pressing ESC\n\t\t\tthis._editor.setSelections([this._editor.getSelection()!]);\n\t\t}\n\t}\n\n\tprev(): void {\n\t\tthis._session?.prev();\n\t\tthis._updateState();\n\t}\n\n\tnext(): void {\n\t\tthis._session?.next();\n\t\tthis._updateState();\n\t}\n\n\tisInSnippet(): boolean {\n\t\treturn Boolean(this._inSnippet.get());\n\t}\n\n\tgetSessionEnclosingRange(): Range | undefined {\n\t\tif (this._session) {\n\t\t\treturn this._session.getEnclosingRange();\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nregisterEditorContribution(\n\tSnippetController2.ID,\n\tSnippetController2,\n\tEditorContributionInstantiation.Lazy,\n);\n\nconst CommandCtor = EditorCommand.bindToContribution<SnippetController2>(\n\tSnippetController2.get,\n);\n\nregisterEditorCommand(\n\tnew CommandCtor({\n\t\tid: \"jumpToNextSnippetPlaceholder\",\n\t\tprecondition: ContextKeyExpr.and(\n\t\t\tSnippetController2.InSnippetMode,\n\t\t\tSnippetController2.HasNextTabstop,\n\t\t),\n\t\thandler: (ctrl) => ctrl.next(),\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.Tab,\n\t\t},\n\t}),\n);\nregisterEditorCommand(\n\tnew CommandCtor({\n\t\tid: \"jumpToPrevSnippetPlaceholder\",\n\t\tprecondition: ContextKeyExpr.and(\n\t\t\tSnippetController2.InSnippetMode,\n\t\t\tSnippetController2.HasPrevTabstop,\n\t\t),\n\t\thandler: (ctrl) => ctrl.prev(),\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.Tab,\n\t\t},\n\t}),\n);\nregisterEditorCommand(\n\tnew CommandCtor({\n\t\tid: \"leaveSnippet\",\n\t\tprecondition: SnippetController2.InSnippetMode,\n\t\thandler: (ctrl) => ctrl.cancel(true),\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.Escape,\n\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape],\n\t\t},\n\t}),\n);\n\nregisterEditorCommand(\n\tnew CommandCtor({\n\t\tid: \"acceptSnippet\",\n\t\tprecondition: SnippetController2.InSnippetMode,\n\t\thandler: (ctrl) => ctrl.finish(),\n\t\t// kbOpts: {\n\t\t// \tweight: KeybindingWeight.EditorContrib + 30,\n\t\t// \tkbExpr: EditorContextKeys.textFocus,\n\t\t// \tprimary: KeyCode.Enter,\n\t\t// }\n\t}),\n);\n"],
  "mappings": "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",
  "names": ["model"]
}
