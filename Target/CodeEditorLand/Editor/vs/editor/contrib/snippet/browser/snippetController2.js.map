{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/browser/snippetController2.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorCommand, EditorContributionInstantiation, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CompletionItem, CompletionItemKind, CompletionItemProvider } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Choice } from './snippetParser.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { OvertypingCapturer } from '../../suggest/browser/suggestOvertypingCapturer.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ISnippetEdit, SnippetSession } from './snippetSession.js';\n\nexport interface ISnippetInsertOptions {\n\toverwriteBefore: number;\n\toverwriteAfter: number;\n\tadjustWhitespace: boolean;\n\tundoStopBefore: boolean;\n\tundoStopAfter: boolean;\n\tclipboardText: string | undefined;\n\tovertypingCapturer: OvertypingCapturer | undefined;\n}\n\nconst _defaultOptions: ISnippetInsertOptions = {\n\toverwriteBefore: 0,\n\toverwriteAfter: 0,\n\tundoStopBefore: true,\n\tundoStopAfter: true,\n\tadjustWhitespace: true,\n\tclipboardText: undefined,\n\tovertypingCapturer: undefined\n};\n\nexport class SnippetController2 implements IEditorContribution {\n\n\tpublic static readonly ID = 'snippetController2';\n\n\tstatic get(editor: ICodeEditor): SnippetController2 | null {\n\t\treturn editor.getContribution<SnippetController2>(SnippetController2.ID);\n\t}\n\n\tstatic readonly InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\"));\n\tstatic readonly HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\"));\n\tstatic readonly HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\"));\n\n\tprivate readonly _inSnippet: IContextKey<boolean>;\n\tprivate readonly _hasNextTabstop: IContextKey<boolean>;\n\tprivate readonly _hasPrevTabstop: IContextKey<boolean>;\n\n\tprivate _session?: SnippetSession;\n\tprivate readonly _snippetListener = new DisposableStore();\n\tprivate _modelVersionId: number = -1;\n\tprivate _currentChoice?: Choice;\n\n\tprivate _choiceCompletions?: { provider: CompletionItemProvider; enable(): void; disable(): void };\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n\t\tthis._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n\t\tthis._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n\t}\n\n\tdispose(): void {\n\t\tthis._inSnippet.reset();\n\t\tthis._hasPrevTabstop.reset();\n\t\tthis._hasNextTabstop.reset();\n\t\tthis._session?.dispose();\n\t\tthis._snippetListener.dispose();\n\t}\n\n\tapply(edits: ISnippetEdit[], opts?: Partial<ISnippetInsertOptions>) {\n\t\ttry {\n\t\t\tthis._doInsert(edits, typeof opts === 'undefined' ? _defaultOptions : { ..._defaultOptions, ...opts });\n\n\t\t} catch (e) {\n\t\t\tthis.cancel();\n\t\t\tthis._logService.error(e);\n\t\t\tthis._logService.error('snippet_error');\n\t\t\tthis._logService.error('insert_edits=', edits);\n\t\t\tthis._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n\t\t}\n\t}\n\n\tinsert(\n\t\ttemplate: string,\n\t\topts?: Partial<ISnippetInsertOptions>\n\t): void {\n\t\t// this is here to find out more about the yet-not-understood\n\t\t// error that sometimes happens when we fail to inserted a nested\n\t\t// snippet\n\t\ttry {\n\t\t\tthis._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : { ..._defaultOptions, ...opts });\n\n\t\t} catch (e) {\n\t\t\tthis.cancel();\n\t\t\tthis._logService.error(e);\n\t\t\tthis._logService.error('snippet_error');\n\t\t\tthis._logService.error('insert_template=', template);\n\t\t\tthis._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n\t\t}\n\t}\n\n\tprivate _doInsert(\n\t\ttemplate: string | ISnippetEdit[],\n\t\topts: ISnippetInsertOptions\n\t): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// don't listen while inserting the snippet\n\t\t// as that is the inflight state causing cancelation\n\t\tthis._snippetListener.clear();\n\n\t\tif (opts.undoStopBefore) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t}\n\n\t\t// don't merge\n\t\tif (this._session && typeof template !== 'string') {\n\t\t\tthis.cancel();\n\t\t}\n\n\t\tif (!this._session) {\n\t\t\tthis._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n\t\t\tthis._session = new SnippetSession(this._editor, template, opts, this._languageConfigurationService);\n\t\t\tthis._session.insert();\n\t\t} else {\n\t\t\tassertType(typeof template === 'string');\n\t\t\tthis._session.merge(template, opts);\n\t\t}\n\n\t\tif (opts.undoStopAfter) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t}\n\n\t\t// regster completion item provider when there is any choice element\n\t\tif (this._session?.hasChoice) {\n\t\t\tconst provider: CompletionItemProvider = {\n\t\t\t\t_debugDisplayName: 'snippetChoiceCompletions',\n\t\t\t\tprovideCompletionItems: (model: ITextModel, position: Position) => {\n\t\t\t\t\tif (!this._session || model !== this._editor.getModel() || !Position.equals(this._editor.getPosition(), position)) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst { activeChoice } = this._session;\n\t\t\t\t\tif (!activeChoice || activeChoice.choice.options.length === 0) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst word = model.getValueInRange(activeChoice.range);\n\t\t\t\t\tconst isAnyOfOptions = Boolean(activeChoice.choice.options.find(o => o.value === word));\n\t\t\t\t\tconst suggestions: CompletionItem[] = [];\n\t\t\t\t\tfor (let i = 0; i < activeChoice.choice.options.length; i++) {\n\t\t\t\t\t\tconst option = activeChoice.choice.options[i];\n\t\t\t\t\t\tsuggestions.push({\n\t\t\t\t\t\t\tkind: CompletionItemKind.Value,\n\t\t\t\t\t\t\tlabel: option.value,\n\t\t\t\t\t\t\tinsertText: option.value,\n\t\t\t\t\t\t\tsortText: 'a'.repeat(i + 1),\n\t\t\t\t\t\t\trange: activeChoice.range,\n\t\t\t\t\t\t\tfilterText: isAnyOfOptions ? `${word}_${option.value}` : undefined,\n\t\t\t\t\t\t\tcommand: { id: 'jumpToNextSnippetPlaceholder', title: localize('next', 'Go to next placeholder...') }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn { suggestions };\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst model = this._editor.getModel();\n\n\t\t\tlet registration: IDisposable | undefined;\n\t\t\tlet isRegistered = false;\n\t\t\tconst disable = () => {\n\t\t\t\tregistration?.dispose();\n\t\t\t\tisRegistered = false;\n\t\t\t};\n\n\t\t\tconst enable = () => {\n\t\t\t\tif (!isRegistered) {\n\t\t\t\t\tregistration = this._languageFeaturesService.completionProvider.register({\n\t\t\t\t\t\tlanguage: model.getLanguageId(),\n\t\t\t\t\t\tpattern: model.uri.fsPath,\n\t\t\t\t\t\tscheme: model.uri.scheme,\n\t\t\t\t\t\texclusive: true\n\t\t\t\t\t}, provider);\n\t\t\t\t\tthis._snippetListener.add(registration);\n\t\t\t\t\tisRegistered = true;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._choiceCompletions = { provider, enable, disable };\n\t\t}\n\n\t\tthis._updateState();\n\n\t\tthis._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n\t\tthis._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n\t\tthis._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n\t}\n\n\tprivate _updateState(): void {\n\t\tif (!this._session || !this._editor.hasModel()) {\n\t\t\t// canceled in the meanwhile\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n\t\t\t// undo until the 'before' state happened\n\t\t\t// and makes use cancel snippet mode\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tif (!this._session.hasPlaceholder) {\n\t\t\t// don't listen for selection changes and don't\n\t\t\t// update context keys when the snippet is plain text\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tif (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tthis._inSnippet.set(true);\n\t\tthis._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n\t\tthis._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n\n\t\tthis._handleChoice();\n\t}\n\n\tprivate _handleChoice(): void {\n\t\tif (!this._session || !this._editor.hasModel()) {\n\t\t\tthis._currentChoice = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tconst { activeChoice } = this._session;\n\t\tif (!activeChoice || !this._choiceCompletions) {\n\t\t\tthis._choiceCompletions?.disable();\n\t\t\tthis._currentChoice = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._currentChoice !== activeChoice.choice) {\n\t\t\tthis._currentChoice = activeChoice.choice;\n\n\t\t\tthis._choiceCompletions.enable();\n\n\t\t\t// trigger suggest with the special choice completion provider\n\t\t\tqueueMicrotask(() => {\n\t\t\t\tshowSimpleSuggestions(this._editor, this._choiceCompletions!.provider);\n\t\t\t});\n\t\t}\n\t}\n\n\tfinish(): void {\n\t\twhile (this._inSnippet.get()) {\n\t\t\tthis.next();\n\t\t}\n\t}\n\n\tcancel(resetSelection: boolean = false): void {\n\t\tthis._inSnippet.reset();\n\t\tthis._hasPrevTabstop.reset();\n\t\tthis._hasNextTabstop.reset();\n\t\tthis._snippetListener.clear();\n\n\t\tthis._currentChoice = undefined;\n\n\t\tthis._session?.dispose();\n\t\tthis._session = undefined;\n\t\tthis._modelVersionId = -1;\n\t\tif (resetSelection) {\n\t\t\t// reset selection to the primary cursor when being asked\n\t\t\t// for. this happens when explicitly cancelling snippet mode,\n\t\t\t// e.g. when pressing ESC\n\t\t\tthis._editor.setSelections([this._editor.getSelection()!]);\n\t\t}\n\t}\n\n\tprev(): void {\n\t\tthis._session?.prev();\n\t\tthis._updateState();\n\t}\n\n\tnext(): void {\n\t\tthis._session?.next();\n\t\tthis._updateState();\n\t}\n\n\tisInSnippet(): boolean {\n\t\treturn Boolean(this._inSnippet.get());\n\t}\n\n\tgetSessionEnclosingRange(): Range | undefined {\n\t\tif (this._session) {\n\t\t\treturn this._session.getEnclosingRange();\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\n\nregisterEditorContribution(SnippetController2.ID, SnippetController2, EditorContributionInstantiation.Lazy);\n\nconst CommandCtor = EditorCommand.bindToContribution<SnippetController2>(SnippetController2.get);\n\nregisterEditorCommand(new CommandCtor({\n\tid: 'jumpToNextSnippetPlaceholder',\n\tprecondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n\thandler: ctrl => ctrl.next(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\tprimary: KeyCode.Tab\n\t}\n}));\nregisterEditorCommand(new CommandCtor({\n\tid: 'jumpToPrevSnippetPlaceholder',\n\tprecondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n\thandler: ctrl => ctrl.prev(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\tprimary: KeyMod.Shift | KeyCode.Tab\n\t}\n}));\nregisterEditorCommand(new CommandCtor({\n\tid: 'leaveSnippet',\n\tprecondition: SnippetController2.InSnippetMode,\n\thandler: ctrl => ctrl.cancel(true),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\n\nregisterEditorCommand(new CommandCtor({\n\tid: 'acceptSnippet',\n\tprecondition: SnippetController2.InSnippetMode,\n\thandler: ctrl => ctrl.finish(),\n\t// kbOpts: {\n\t// \tweight: KeybindingWeight.EditorContrib + 30,\n\t// \tkbExpr: EditorContextKeys.textFocus,\n\t// \tprimary: KeyCode.Enter,\n\t// }\n}));\n"],
  "mappings": "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",
  "names": ["model"]
}
