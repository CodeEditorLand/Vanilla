{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/browser/snippetSession.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { IActiveCodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IPosition } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { TextChange } from '../../../common/core/textChange.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IIdentifiedSingleEditOperation, ITextModel, TrackedRangeStickiness } from '../../../common/model.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { OvertypingCapturer } from '../../suggest/browser/suggestOvertypingCapturer.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { Choice, Marker, Placeholder, SnippetParser, Text, TextmateSnippet } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CommentBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, RandomBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from './snippetVariables.js';\n\nexport class OneSnippet {\n\n\tprivate _placeholderDecorations?: Map<Placeholder, string>;\n\tprivate _placeholderGroups: Placeholder[][];\n\tprivate _offset: number = -1;\n\t_placeholderGroupsIdx: number;\n\t_nestingLevel: number = 1;\n\n\tprivate static readonly _decor = {\n\t\tactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-1', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tinactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-2', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-3', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t\tinactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-4', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t};\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _snippet: TextmateSnippet,\n\t\tprivate readonly _snippetLineLeadingWhitespace: string\n\t) {\n\t\tthis._placeholderGroups = groupBy(_snippet.placeholders, Placeholder.compareByIndex);\n\t\tthis._placeholderGroupsIdx = -1;\n\t}\n\n\tinitialize(textChange: TextChange): void {\n\t\tthis._offset = textChange.newPosition;\n\t}\n\n\tdispose(): void {\n\t\tif (this._placeholderDecorations) {\n\t\t\tthis._editor.removeDecorations([...this._placeholderDecorations.values()]);\n\t\t}\n\t\tthis._placeholderGroups.length = 0;\n\t}\n\n\tprivate _initDecorations(): void {\n\n\t\tif (this._offset === -1) {\n\t\t\tthrow new Error(`Snippet not initialized!`);\n\t\t}\n\n\t\tif (this._placeholderDecorations) {\n\t\t\t// already initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis._placeholderDecorations = new Map<Placeholder, string>();\n\t\tconst model = this._editor.getModel();\n\n\t\tthis._editor.changeDecorations(accessor => {\n\t\t\t// create a decoration for each placeholder\n\t\t\tfor (const placeholder of this._snippet.placeholders) {\n\t\t\t\tconst placeholderOffset = this._snippet.offset(placeholder);\n\t\t\t\tconst placeholderLen = this._snippet.fullLen(placeholder);\n\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset),\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset + placeholderLen)\n\t\t\t\t);\n\t\t\t\tconst options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n\t\t\t\tconst handle = accessor.addDecoration(range, options);\n\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t}\n\t\t});\n\t}\n\n\tmove(fwd: boolean | undefined): Selection[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._initDecorations();\n\n\t\t// Transform placeholder text if necessary\n\t\tif (this._placeholderGroupsIdx >= 0) {\n\t\t\tconst operations: ISingleEditOperation[] = [];\n\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\t// Check if the placeholder has a transformation\n\t\t\t\tif (placeholder.transform) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\t\tconst currentValue = this._editor.getModel().getValueInRange(range);\n\t\t\t\t\tconst transformedValueLines = placeholder.transform.resolve(currentValue).split(/\\r\\n|\\r|\\n/);\n\t\t\t\t\t// fix indentation for transformed lines\n\t\t\t\t\tfor (let i = 1; i < transformedValueLines.length; i++) {\n\t\t\t\t\t\ttransformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);\n\t\t\t\t\t}\n\t\t\t\t\toperations.push(EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operations.length > 0) {\n\t\t\t\tthis._editor.executeEdits('snippet.placeholderTransform', operations);\n\t\t\t}\n\t\t}\n\n\t\tlet couldSkipThisPlaceholder = false;\n\t\tif (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n\t\t\tthis._placeholderGroupsIdx += 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else if (fwd === false && this._placeholderGroupsIdx > 0) {\n\t\t\tthis._placeholderGroupsIdx -= 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else {\n\t\t\t// the selection of the current placeholder might\n\t\t\t// not acurate any more -> simply restore it\n\t\t}\n\n\t\tconst newSelections = this._editor.getModel().changeDecorations(accessor => {\n\n\t\t\tconst activePlaceholders = new Set<Placeholder>();\n\n\t\t\t// change stickiness to always grow when typing at its edges\n\t\t\t// because these decorations represent the currently active\n\t\t\t// tabstop.\n\t\t\t// Special case #1: reaching the final tabstop\n\t\t\t// Special case #2: placeholders enclosing active placeholders\n\t\t\tconst selections: Selection[] = [];\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tselections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n\n\t\t\t\t// consider to skip this placeholder index when the decoration\n\t\t\t\t// range is empty but when the placeholder wasn't. that's a strong\n\t\t\t\t// hint that the placeholder has been deleted. (all placeholder must match this)\n\t\t\t\tcouldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);\n\n\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\tactivePlaceholders.add(placeholder);\n\n\t\t\t\tfor (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(enclosingPlaceholder)!;\n\t\t\t\t\taccessor.changeDecorationOptions(id, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\t\tactivePlaceholders.add(enclosingPlaceholder);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// change stickness to never grow when typing at its edges\n\t\t\t// so that in-active tabstops never grow\n\t\t\tfor (const [placeholder, id] of this._placeholderDecorations!) {\n\t\t\t\tif (!activePlaceholders.has(placeholder)) {\n\t\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn selections;\n\t\t});\n\n\t\treturn !couldSkipThisPlaceholder ? newSelections ?? [] : this.move(fwd);\n\t}\n\n\tprivate _hasPlaceholderBeenCollapsed(placeholder: Placeholder): boolean {\n\t\t// A placeholder is empty when it wasn't empty when authored but\n\t\t// when its tracking decoration is empty. This also applies to all\n\t\t// potential parent placeholders\n\t\tlet marker: Marker | undefined = placeholder;\n\t\twhile (marker) {\n\t\t\tif (marker instanceof Placeholder) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(marker)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tif (range.isEmpty() && marker.toString().length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarker = marker.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippet.placeholders.length > 0;\n\t}\n\n\t/**\n\t * A snippet is trivial when it has no placeholder or only a final placeholder at\n\t * its very end\n\t */\n\tget isTrivialSnippet(): boolean {\n\t\tif (this._snippet.placeholders.length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._snippet.placeholders.length === 1) {\n\t\t\tconst [placeholder] = this._snippet.placeholders;\n\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\tif (this._snippet.rightMostDescendant === placeholder) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tcomputePossibleSelections() {\n\t\tconst result = new Map<number, Range[]>();\n\t\tfor (const placeholdersWithEqualIndex of this._placeholderGroups) {\n\t\t\tlet ranges: Range[] | undefined;\n\n\t\t\tfor (const placeholder of placeholdersWithEqualIndex) {\n\t\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\t\t// ignore those\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!ranges) {\n\t\t\t\t\tranges = [];\n\t\t\t\t\tresult.set(placeholder.index, ranges);\n\t\t\t\t}\n\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\t\t\tif (!range) {\n\t\t\t\t\t// one of the placeholder lost its decoration and\n\t\t\t\t\t// therefore we bail out and pretend the placeholder\n\t\t\t\t\t// (with its mirrors) doesn't exist anymore.\n\t\t\t\t\tresult.delete(placeholder.index);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tranges.push(range);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\tif (!this._placeholderDecorations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst placeholder = this._placeholderGroups[this._placeholderGroupsIdx][0];\n\t\tif (!placeholder?.choice) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst id = this._placeholderDecorations.get(placeholder);\n\t\tif (!id) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\tif (!range) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { range, choice: placeholder.choice };\n\t}\n\n\tget hasChoice(): boolean {\n\t\tlet result = false;\n\t\tthis._snippet.walk(marker => {\n\t\t\tresult = marker instanceof Choice;\n\t\t\treturn !result;\n\t\t});\n\t\treturn result;\n\t}\n\n\tmerge(others: OneSnippet[]): void {\n\n\t\tconst model = this._editor.getModel();\n\t\tthis._nestingLevel *= 10;\n\n\t\tthis._editor.changeDecorations(accessor => {\n\n\t\t\t// For each active placeholder take one snippet and merge it\n\t\t\t// in that the placeholder (can be many for `$1foo$1foo`). Because\n\t\t\t// everything is sorted by editor selection we can simply remove\n\t\t\t// elements from the beginning of the array\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst nested = others.shift()!;\n\t\t\t\tconsole.assert(nested._offset !== -1);\n\t\t\t\tconsole.assert(!nested._placeholderDecorations);\n\n\t\t\t\t// Massage placeholder-indicies of the nested snippet to be\n\t\t\t\t// sorted right after the insertion point. This ensures we move\n\t\t\t\t// through the placeholders in the correct order\n\t\t\t\tconst indexLastPlaceholder = nested._snippet.placeholderInfo.last!.index;\n\n\t\t\t\tfor (const nestedPlaceholder of nested._snippet.placeholderInfo.all) {\n\t\t\t\t\tif (nestedPlaceholder.isFinalTabstop) {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / this._nestingLevel);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / this._nestingLevel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._snippet.replace(placeholder, nested._snippet.children);\n\n\t\t\t\t// Remove the placeholder at which position are inserting\n\t\t\t\t// the snippet and also remove its decoration.\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\taccessor.removeDecoration(id);\n\t\t\t\tthis._placeholderDecorations!.delete(placeholder);\n\n\t\t\t\t// For each *new* placeholder we create decoration to monitor\n\t\t\t\t// how and if it grows/shrinks.\n\t\t\t\tfor (const placeholder of nested._snippet.placeholders) {\n\t\t\t\t\tconst placeholderOffset = nested._snippet.offset(placeholder);\n\t\t\t\t\tconst placeholderLen = nested._snippet.fullLen(placeholder);\n\t\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset),\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset + placeholderLen)\n\t\t\t\t\t);\n\t\t\t\t\tconst handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n\t\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Last, re-create the placeholder groups by sorting placeholders by their index.\n\t\t\tthis._placeholderGroups = groupBy(this._snippet.placeholders, Placeholder.compareByIndex);\n\t\t});\n\t}\n\n\tgetEnclosingRange(): Range | undefined {\n\t\tlet result: Range | undefined;\n\t\tconst model = this._editor.getModel();\n\t\tfor (const decorationId of this._placeholderDecorations!.values()) {\n\t\t\tconst placeholderRange = model.getDecorationRange(decorationId) ?? undefined;\n\t\t\tif (!result) {\n\t\t\t\tresult = placeholderRange;\n\t\t\t} else {\n\t\t\t\tresult = result.plusRange(placeholderRange!);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport interface ISnippetSessionInsertOptions {\n\toverwriteBefore: number;\n\toverwriteAfter: number;\n\tadjustWhitespace: boolean;\n\tclipboardText: string | undefined;\n\tovertypingCapturer: OvertypingCapturer | undefined;\n}\n\nconst _defaultOptions: ISnippetSessionInsertOptions = {\n\toverwriteBefore: 0,\n\toverwriteAfter: 0,\n\tadjustWhitespace: true,\n\tclipboardText: undefined,\n\tovertypingCapturer: undefined\n};\n\nexport interface ISnippetEdit {\n\trange: Range;\n\ttemplate: string;\n}\n\nexport class SnippetSession {\n\n\tstatic adjustWhitespace(model: ITextModel, position: IPosition, adjustIndentation: boolean, snippet: TextmateSnippet, filter?: Set<Marker>): string {\n\t\tconst line = model.getLineContent(position.lineNumber);\n\t\tconst lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n\n\t\t// the snippet as inserted\n\t\tlet snippetTextString: string | undefined;\n\n\t\tsnippet.walk(marker => {\n\t\t\t// all text elements that are not inside choice\n\t\t\tif (!(marker instanceof Text) || marker.parent instanceof Choice) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// check with filter (iff provided)\n\t\t\tif (filter && !filter.has(marker)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst lines = marker.value.split(/\\r\\n|\\r|\\n/);\n\n\t\t\tif (adjustIndentation) {\n\t\t\t\t// adjust indentation of snippet test\n\t\t\t\t// -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized\n\t\t\t\t// -all N+1 lines get extra-indented and normalized\n\t\t\t\t// -the text start get extra-indented and normalized when following a linebreak\n\t\t\t\tconst offset = snippet.offset(marker);\n\t\t\t\tif (offset === 0) {\n\t\t\t\t\t// snippet start\n\t\t\t\t\tlines[0] = model.normalizeIndentation(lines[0]);\n\n\t\t\t\t} else {\n\t\t\t\t\t// check if text start is after a linebreak\n\t\t\t\t\tsnippetTextString = snippetTextString ?? snippet.toString();\n\t\t\t\t\tconst prevChar = snippetTextString.charCodeAt(offset - 1);\n\t\t\t\t\tif (prevChar === CharCode.LineFeed || prevChar === CharCode.CarriageReturn) {\n\t\t\t\t\t\tlines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\t\t\tlines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst newValue = lines.join(model.getEOL());\n\t\t\tif (newValue !== marker.value) {\n\t\t\t\tmarker.parent.replace(marker, [new Text(newValue)]);\n\t\t\t\tsnippetTextString = undefined;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\treturn lineLeadingWhitespace;\n\t}\n\n\tstatic adjustSelection(model: ITextModel, selection: Selection, overwriteBefore: number, overwriteAfter: number): Selection {\n\t\tif (overwriteBefore !== 0 || overwriteAfter !== 0) {\n\t\t\t// overwrite[Before|After] is compute using the position, not the whole\n\t\t\t// selection. therefore we adjust the selection around that position\n\t\t\tconst { positionLineNumber, positionColumn } = selection;\n\t\t\tconst positionColumnBefore = positionColumn - overwriteBefore;\n\t\t\tconst positionColumnAfter = positionColumn + overwriteAfter;\n\n\t\t\tconst range = model.validateRange({\n\t\t\t\tstartLineNumber: positionLineNumber,\n\t\t\t\tstartColumn: positionColumnBefore,\n\t\t\t\tendLineNumber: positionLineNumber,\n\t\t\t\tendColumn: positionColumnAfter\n\t\t\t});\n\n\t\t\tselection = Selection.createWithDirection(\n\t\t\t\trange.startLineNumber, range.startColumn,\n\t\t\t\trange.endLineNumber, range.endColumn,\n\t\t\t\tselection.getDirection()\n\t\t\t);\n\t\t}\n\t\treturn selection;\n\t}\n\n\tstatic createEditsAndSnippetsFromSelections(editor: IActiveCodeEditor, template: string, overwriteBefore: number, overwriteAfter: number, enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst snippets: OneSnippet[] = [];\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn { edits, snippets };\n\t\t}\n\t\tconst model = editor.getModel();\n\n\t\tconst workspaceService = editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService));\n\t\tconst modelBasedVariableResolver = editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model));\n\t\tconst readClipboardText = () => clipboardText;\n\n\t\t// know what text the overwrite[Before|After] extensions\n\t\t// of the primary curser have selected because only when\n\t\t// secondary selections extend to the same text we can grow them\n\t\tconst firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n\t\tconst firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n\n\t\t// remember the first non-whitespace column to decide if\n\t\t// `keepWhitespace` should be overruled for secondary selections\n\t\tconst firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n\n\t\t// sort selections by their start position but remeber\n\t\t// the original index. that allows you to create correct\n\t\t// offset-based selection logic without changing the\n\t\t// primary selection\n\t\tconst indexedSelections = editor.getSelections()\n\t\t\t.map((selection, idx) => ({ selection, idx }))\n\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\tfor (const { selection, idx } of indexedSelections) {\n\n\t\t\t// extend selection with the `overwriteBefore` and `overwriteAfter` and then\n\t\t\t// compare if this matches the extensions of the primary selection\n\t\t\tlet extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n\t\t\tlet extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n\t\t\tif (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n\t\t\t\textensionBefore = selection;\n\t\t\t}\n\t\t\tif (firstAfterText !== model.getValueInRange(extensionAfter)) {\n\t\t\t\textensionAfter = selection;\n\t\t\t}\n\n\t\t\t// merge the before and after selection into one\n\t\t\tconst snippetSelection = selection\n\t\t\t\t.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\n\t\t\t\t.setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n\n\t\t\tconst snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n\n\t\t\t// adjust the template string to match the indentation and\n\t\t\t// whitespace rules of this insert location (can be different for each cursor)\n\t\t\t// happens when being asked for (default) or when this is a secondary\n\t\t\t// cursor and the leading whitespace is different\n\t\t\tconst start = snippetSelection.getStartPosition();\n\t\t\tconst snippetLineLeadingWhitespace = SnippetSession.adjustWhitespace(\n\t\t\t\tmodel, start,\n\t\t\t\tadjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)),\n\t\t\t\tsnippet,\n\t\t\t);\n\n\t\t\tsnippet.resolveVariables(new CompositeSnippetVariableResolver([\n\t\t\t\tmodelBasedVariableResolver,\n\t\t\t\tnew ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\t\tnew SelectionBasedVariableResolver(model, selection, idx, overtypingCapturer),\n\t\t\t\tnew CommentBasedVariableResolver(model, selection, languageConfigurationService),\n\t\t\t\tnew TimeBasedVariableResolver,\n\t\t\t\tnew WorkspaceBasedVariableResolver(workspaceService),\n\t\t\t\tnew RandomBasedVariableResolver,\n\t\t\t]));\n\n\t\t\t// store snippets with the index of their originating selection.\n\t\t\t// that ensures the primiary cursor stays primary despite not being\n\t\t\t// the one with lowest start position\n\t\t\tedits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n\t\t\tedits[idx].identifier = { major: idx, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedits[idx]._isTracked = true;\n\t\t\tsnippets[idx] = new OneSnippet(editor, snippet, snippetLineLeadingWhitespace);\n\t\t}\n\n\t\treturn { edits, snippets };\n\t}\n\n\tstatic createEditsAndSnippetsFromEdits(editor: IActiveCodeEditor, snippetEdits: ISnippetEdit[], enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\n\t\tif (!editor.hasModel() || snippetEdits.length === 0) {\n\t\t\treturn { edits: [], snippets: [] };\n\t\t}\n\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst model = editor.getModel();\n\n\t\tconst parser = new SnippetParser();\n\t\tconst snippet = new TextmateSnippet();\n\n\t\t// snippet variables resolver\n\t\tconst resolver = new CompositeSnippetVariableResolver([\n\t\t\teditor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model)),\n\t\t\tnew ClipboardBasedVariableResolver(() => clipboardText, 0, editor.getSelections().length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\tnew SelectionBasedVariableResolver(model, editor.getSelection(), 0, overtypingCapturer),\n\t\t\tnew CommentBasedVariableResolver(model, editor.getSelection(), languageConfigurationService),\n\t\t\tnew TimeBasedVariableResolver,\n\t\t\tnew WorkspaceBasedVariableResolver(editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService))),\n\t\t\tnew RandomBasedVariableResolver,\n\t\t]);\n\n\t\t//\n\t\tsnippetEdits = snippetEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < snippetEdits.length; i++) {\n\n\t\t\tconst { range, template } = snippetEdits[i];\n\n\t\t\t// gaps between snippet edits are appended as text nodes. this\n\t\t\t// ensures placeholder-offsets are later correct\n\t\t\tif (i > 0) {\n\t\t\t\tconst lastRange = snippetEdits[i - 1].range;\n\t\t\t\tconst textRange = Range.fromPositions(lastRange.getEndPosition(), range.getStartPosition());\n\t\t\t\tconst textNode = new Text(model.getValueInRange(textRange));\n\t\t\t\tsnippet.appendChild(textNode);\n\t\t\t\toffset += textNode.value.length;\n\t\t\t}\n\n\t\t\tconst newNodes = parser.parseFragment(template, snippet);\n\t\t\tSnippetSession.adjustWhitespace(model, range.getStartPosition(), true, snippet, new Set(newNodes));\n\t\t\tsnippet.resolveVariables(resolver);\n\n\t\t\tconst snippetText = snippet.toString();\n\t\t\tconst snippetFragmentText = snippetText.slice(offset);\n\t\t\toffset = snippetText.length;\n\n\t\t\t// make edit\n\t\t\tconst edit: IIdentifiedSingleEditOperation = EditOperation.replace(range, snippetFragmentText);\n\t\t\tedit.identifier = { major: i, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedit._isTracked = true;\n\t\t\tedits.push(edit);\n\t\t}\n\n\t\t//\n\t\tparser.ensureFinalTabstop(snippet, enforceFinalTabstop, true);\n\n\t\treturn {\n\t\t\tedits,\n\t\t\tsnippets: [new OneSnippet(editor, snippet, '')]\n\t\t};\n\t}\n\n\tprivate readonly _templateMerges: [number, number, string | ISnippetEdit[]][] = [];\n\tprivate _snippets: OneSnippet[] = [];\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _template: string | ISnippetEdit[],\n\t\tprivate readonly _options: ISnippetSessionInsertOptions = _defaultOptions,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) { }\n\n\tdispose(): void {\n\t\tdispose(this._snippets);\n\t}\n\n\t_logInfo(): string {\n\t\treturn `template=\"${this._template}\", merged_templates=\"${this._templateMerges.join(' -> ')}\"`;\n\t}\n\n\tinsert(): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// make insert edit and start with first selections\n\t\tconst { edits, snippets } = typeof this._template === 'string'\n\t\t\t? SnippetSession.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService)\n\t\t\t: SnippetSession.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._snippets = snippets;\n\n\t\tthis._editor.executeEdits('snippet', edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder) {\n\t\t\t\treturn this._move(true);\n\t\t\t} else {\n\t\t\t\treturn undoEdits\n\t\t\t\t\t.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t\tthis._editor.revealRange(this._editor.getSelections()[0]);\n\t}\n\n\tmerge(template: string, options: ISnippetSessionInsertOptions = _defaultOptions): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n\t\tconst { edits, snippets } = SnippetSession.createEditsAndSnippetsFromSelections(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._editor.executeEdits('snippet', edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\t// Trivial snippets have no placeholder or are just the final placeholder. That means they\n\t\t\t// are just text insertions and we don't need to merge the nested snippet into the existing\n\t\t\t// snippet\n\t\t\tconst isTrivialSnippet = snippets[0].isTrivialSnippet;\n\t\t\tif (!isTrivialSnippet) {\n\t\t\t\tfor (const snippet of this._snippets) {\n\t\t\t\t\tsnippet.merge(snippets);\n\t\t\t\t}\n\t\t\t\tconsole.assert(snippets.length === 0);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder && !isTrivialSnippet) {\n\t\t\t\treturn this._move(undefined);\n\t\t\t} else {\n\t\t\t\treturn undoEdits.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t}\n\n\tnext(): void {\n\t\tconst newSelections = this._move(true);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprev(): void {\n\t\tconst newSelections = this._move(false);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprivate _move(fwd: boolean | undefined): Selection[] {\n\t\tconst selections: Selection[] = [];\n\t\tfor (const snippet of this._snippets) {\n\t\t\tconst oneSelection = snippet.move(fwd);\n\t\t\tselections.push(...oneSelection);\n\t\t}\n\t\treturn selections;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._snippets[0].isAtFirstPlaceholder;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._snippets[0].isAtLastPlaceholder;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippets[0].hasPlaceholder;\n\t}\n\n\tget hasChoice(): boolean {\n\t\treturn this._snippets[0].hasChoice;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\treturn this._snippets[0].activeChoice;\n\t}\n\n\tisSelectionWithinPlaceholders(): boolean {\n\n\t\tif (!this.hasPlaceholder) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selections = this._editor.getSelections();\n\t\tif (selections.length < this._snippets.length) {\n\t\t\t// this means we started snippet mode with N\n\t\t\t// selections and have M (N > M) selections.\n\t\t\t// So one snippet is without selection -> cancel\n\t\t\treturn false;\n\t\t}\n\n\t\tconst allPossibleSelections = new Map<number, Range[]>();\n\t\tfor (const snippet of this._snippets) {\n\n\t\t\tconst possibleSelections = snippet.computePossibleSelections();\n\n\t\t\t// for the first snippet find the placeholder (and its ranges)\n\t\t\t// that contain at least one selection. for all remaining snippets\n\t\t\t// the same placeholder (and their ranges) must be used.\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\tfor (const [index, ranges] of possibleSelections) {\n\t\t\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\t\t\t\t\tfor (const selection of selections) {\n\t\t\t\t\t\tif (ranges[0].containsRange(selection)) {\n\t\t\t\t\t\t\tallPossibleSelections.set(index, []);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\t// return false if we couldn't associate a selection to\n\t\t\t\t// this (the first) snippet\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// add selections from 'this' snippet so that we know all\n\t\t\t// selections for this placeholder\n\t\t\tallPossibleSelections.forEach((array, index) => {\n\t\t\t\tarray.push(...possibleSelections.get(index)!);\n\t\t\t});\n\t\t}\n\n\t\t// sort selections (and later placeholder-ranges). then walk both\n\t\t// arrays and make sure the placeholder-ranges contain the corresponding\n\t\t// selection\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (const [index, ranges] of allPossibleSelections) {\n\t\t\tif (ranges.length !== selections.length) {\n\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\n\t\t\tfor (let i = 0; i < ranges.length; i++) {\n\t\t\t\tif (!ranges[i].containsRange(selections[i])) {\n\t\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// from all possible selections we have deleted those\n\t\t// that don't match with the current selection. if we don't\n\t\t// have any left, we don't have a selection anymore\n\t\treturn allPossibleSelections.size > 0;\n\t}\n\n\tpublic getEnclosingRange(): Range | undefined {\n\t\tlet result: Range | undefined;\n\t\tfor (const snippet of this._snippets) {\n\t\t\tconst snippetRange = snippet.getEnclosingRange();\n\t\t\tif (!result) {\n\t\t\t\tresult = snippetRange;\n\t\t\t} else {\n\t\t\t\tresult = result.plusRange(snippetRange!);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["id", "placeholder"]
}
