import t from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";import{Choice as g,FormatString as f,Placeholder as l,Scanner as T,SnippetParser as i,Text as o,TextmateSnippet as y,TokenType as a,Transform as m,Variable as c}from"../../browser/snippetParser.js";suite("SnippetParser",()=>{w(),test("Scanner",()=>{const e=new T;t.strictEqual(e.next().type,a.EOF),e.text("abc"),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.EOF),e.text("{{abc}}"),t.strictEqual(e.next().type,a.CurlyOpen),t.strictEqual(e.next().type,a.CurlyOpen),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.CurlyClose),t.strictEqual(e.next().type,a.CurlyClose),t.strictEqual(e.next().type,a.EOF),e.text("abc() "),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.Format),t.strictEqual(e.next().type,a.EOF),e.text("abc 123"),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.Format),t.strictEqual(e.next().type,a.Int),t.strictEqual(e.next().type,a.EOF),e.text("$foo"),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.EOF),e.text("$foo_bar"),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.EOF),e.text("$foo-bar"),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.Dash),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.EOF),e.text("${foo}"),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.CurlyOpen),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.CurlyClose),t.strictEqual(e.next().type,a.EOF),e.text("${1223:foo}"),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.CurlyOpen),t.strictEqual(e.next().type,a.Int),t.strictEqual(e.next().type,a.Colon),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.CurlyClose),t.strictEqual(e.next().type,a.EOF),e.text("\\${}"),t.strictEqual(e.next().type,a.Backslash),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.CurlyOpen),t.strictEqual(e.next().type,a.CurlyClose),e.text("${foo/regex/format/option}"),t.strictEqual(e.next().type,a.Dollar),t.strictEqual(e.next().type,a.CurlyOpen),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.Forwardslash),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.Forwardslash),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.Forwardslash),t.strictEqual(e.next().type,a.VariableName),t.strictEqual(e.next().type,a.CurlyClose),t.strictEqual(e.next().type,a.EOF)});function p(e,r){const s=i.asInsertText(e);t.strictEqual(s,r)}function u(e,...r){let s;for(e instanceof y?s=[...e.children]:typeof e=="string"?s=new i().parse(e).children:s=[...e];s.length>0;){const d=s.pop(),$=r.pop();t.ok(d instanceof $)}t.strictEqual(s.length,r.length),t.strictEqual(s.length,0)}function n(e,r,...s){p(e,r),u(e,...s)}function b(e,r){const s=i.escape(e);t.strictEqual(s,r)}test("Parser, escaped",function(){b("foo$0","foo\\$0"),b("foo\\$0","foo\\\\\\$0"),b("f$1oo$0","f\\$1oo\\$0"),b("${1:foo}$0","\\${1:foo\\}\\$0"),b("$","\\$")}),test("Parser, text",()=>{p("$","$"),p("\\\\$","\\$"),p("{","{"),p("\\}","}"),p("\\abc","\\abc"),p("foo${f:\\}}bar","foo}bar"),p("\\{","\\{"),p("I need \\\\\\$","I need \\$"),p("\\","\\"),p("\\{{","\\{{"),p("{{","{{"),p("{{dd","{{dd"),p("}}","}}"),p("ff}}","ff}}"),p("farboo","farboo"),p("far{{}}boo","far{{}}boo"),p("far{{123}}boo","far{{123}}boo"),p("far\\{{123}}boo","far\\{{123}}boo"),p("far{{id:bern}}boo","far{{id:bern}}boo"),p("far{{id:bern {{basel}}}}boo","far{{id:bern {{basel}}}}boo"),p("far{{id:bern {{id:basel}}}}boo","far{{id:bern {{id:basel}}}}boo"),p("far{{id:bern {{id2:basel}}}}boo","far{{id:bern {{id2:basel}}}}boo")}),test("Parser, TM text",()=>{n("foo${1:bar}}","foobar}",o,l,o),n("foo${1:bar}${2:foo}}","foobarfoo}",o,l,l,o),n("foo${1:bar\\}${2:foo}}","foobar}foo",o,l);const[,e]=new i().parse("foo${1:bar\\}${2:foo}}").children,{children:r}=e;t.strictEqual(e.index,1),t.ok(r[0]instanceof o),t.strictEqual(r[0].toString(),"bar}"),t.ok(r[1]instanceof l),t.strictEqual(r[1].toString(),"foo")}),test("Parser, placeholder",()=>{n("farboo","farboo",o),n("far{{}}boo","far{{}}boo",o),n("far{{123}}boo","far{{123}}boo",o),n("far\\{{123}}boo","far\\{{123}}boo",o)}),test("Parser, literal code",()=>{n("far`123`boo","far`123`boo",o),n("far\\`123\\`boo","far\\`123\\`boo",o)}),test("Parser, variables/tabstop",()=>{n("$far-boo","-boo",c,o),n("\\$far-boo","$far-boo",o),n("far$farboo","far",o,c),n("far${farboo}","far",o,c),n("$123","",l),n("$farboo","",c),n("$far12boo","",c),n("000_${far}_000","000__000",o,c,o),n("FFF_${TM_SELECTED_TEXT}_FFF$0","FFF__FFF",o,c,o,l)}),test("Parser, variables/placeholder with defaults",()=>{n("${name:value}","value",c),n("${1:value}","value",l),n("${1:bar${2:foo}bar}","barfoobar",l),n("${name:value","${name:value",o),n("${1:bar${2:foobar}","${1:barfoobar",o,l)}),test("Parser, variable transforms",function(){n("${foo///}","",c),n("${foo/regex/format/gmi}","",c),n("${foo/([A-Z][a-z])/format/}","",c),n("${foo/([A-Z][a-z])/format/GMI}","${foo/([A-Z][a-z])/format/GMI}",o),n("${foo/([A-Z][a-z])/format/funky}","${foo/([A-Z][a-z])/format/funky}",o),n("${foo/([A-Z][a-z]/format/}","${foo/([A-Z][a-z]/format/}",o),n("${foo/m\\/atch/$1/i}","",c),u("${foo/regex/format/options}",o),n("${foo///","${foo///",o),n("${foo/regex/format/options","${foo/regex/format/options",o),u("${foo/.*/${0:fooo}/i}",c),u("${foo/.*/${1}/i}",c),u("${foo/.*/$1/i}",c),u("${foo/.*/This-$1-encloses/i}",c),u("${foo/.*/complex${1:else}/i}",c),u("${foo/.*/complex${1:-else}/i}",c),u("${foo/.*/complex${1:+if}/i}",c),u("${foo/.*/complex${1:?if:else}/i}",c),u("${foo/.*/complex${1:/upcase}/i}",c)}),test("Parser, placeholder transforms",function(){n("${1///}","",l),n("${1/regex/format/gmi}","",l),n("${1/([A-Z][a-z])/format/}","",l),n("${1/m\\/atch/$1/i}","",l),u("${1/regex/format/options}",o),n("${1///","${1///",o),n("${1/regex/format/options","${1/regex/format/options",o)}),test("No way to escape forward slash in snippet regex #36715",function(){u("${TM_DIRECTORY/src\\//$1/}",c)}),test("No way to escape forward slash in snippet format section #37562",function(){u("${TM_SELECTED_TEXT/a/\\/$1/g}",c),u("${TM_SELECTED_TEXT/a/in\\/$1ner/g}",c),u("${TM_SELECTED_TEXT/a/end\\//g}",c)}),test("Parser, placeholder with choice",()=>{n("${1|one,two,three|}","one",l),n("${1|one|}","one",l),n("${1|one1,two2|}","one1",l),n("${1|one1\\,two2|}","one1,two2",l),n("${1|one1\\|two2|}","one1|two2",l),n("${1|one1\\atwo2|}","one1\\atwo2",l),n("${1|one,two,three,|}","${1|one,two,three,|}",o),n("${1|one,","${1|one,",o);const e=new i().parse("${1|one,two,three|}"),r=[s=>s instanceof l,s=>s instanceof g&&s.options.length===3&&s.options.every(d=>d instanceof o)];e.walk(s=>(t.ok(r.shift()(s)),!0))}),test("Snippet choices: unable to escape comma and pipe, #31521",function(){n("console.log(${1|not\\, not, five, 5, 1   23|});","console.log(not, not);",o,l,o)}),test("Marker, toTextmateString()",function(){function e(r,s){const $=new i().parse(r).toTextmateString();t.strictEqual($,s)}e("$1","$1"),e("\\$1","\\$1"),e("console.log(${1|not\\, not, five, 5, 1   23|});","console.log(${1|not\\, not, five, 5, 1   23|});"),e("console.log(${1|not\\, not, \\| five, 5, 1   23|});","console.log(${1|not\\, not, \\| five, 5, 1   23|});"),e("${1|cho\\,ices,wi\\|th,esc\\\\aping,chall\\\\\\,enges|}","${1|cho\\,ices,wi\\|th,esc\\\\aping,chall\\\\\\,enges|}"),e("this is text","this is text"),e("this ${1:is ${2:nested with $var}}","this ${1:is ${2:nested with ${var}}}"),e("this ${1:is ${2:nested with $var}}}","this ${1:is ${2:nested with ${var}}}\\}")}),test("Marker, toTextmateString() <-> identity",function(){function e(r){const s=new i().parse(r),d=s.toTextmateString(),$=new i().parse(d);function h(E,q){t.ok(E instanceof Object.getPrototypeOf(q).constructor),t.ok(q instanceof Object.getPrototypeOf(E).constructor),t.strictEqual(E.children.length,q.children.length),t.strictEqual(E.toString(),q.toString());for(let x=0;x<E.children.length;x++)h(E.children[x],q.children[x])}h(s,$)}e("$1"),e("\\$1"),e("console.log(${1|not\\, not, five, 5, 1   23|});"),e("console.log(${1|not\\, not, \\| five, 5, 1   23|});"),e("this is text"),e("this ${1:is ${2:nested with $var}}"),e("this ${1:is ${2:nested with $var}}}"),e("this ${1:is ${2:nested with $var}} and repeating $1")}),test("Parser, choise marker",()=>{const{placeholders:e}=new i().parse("${1|one,two,three|}");t.strictEqual(e.length,1),t.ok(e[0].choice instanceof g),t.ok(e[0].children[0]instanceof g),t.strictEqual(e[0].children[0].options.length,3),p("${1|one,two,three|}","one"),p("\\${1|one,two,three|}","${1|one,two,three|}"),p("${1\\|one,two,three|}","${1\\|one,two,three|}"),p("${1||}","${1||}")}),test("Backslash character escape in choice tabstop doesn't work #58494",function(){const{placeholders:e}=new i().parse("${1|\\,,},$,\\|,\\\\|}");t.strictEqual(e.length,1),t.ok(e[0].choice instanceof g)}),test("Parser, only textmate",()=>{const e=new i;u(e.parse("far{{}}boo"),o),u(e.parse("far{{123}}boo"),o),u(e.parse("far\\{{123}}boo"),o),u(e.parse("far$0boo"),o,l,o),u(e.parse("far${123}boo"),o,l,o),u(e.parse("far\\${123}boo"),o)}),test("Parser, real world",()=>{let e=new i().parse("console.warn(${1: $TM_SELECTED_TEXT })").children;t.strictEqual(e[0].toString(),"console.warn("),t.ok(e[1]instanceof l),t.strictEqual(e[2].toString(),")");const r=e[1];t.strictEqual(r.index,1),t.strictEqual(r.children.length,3),t.ok(r.children[0]instanceof o),t.ok(r.children[1]instanceof c),t.ok(r.children[2]instanceof o),t.strictEqual(r.children[0].toString()," "),t.strictEqual(r.children[1].toString(),""),t.strictEqual(r.children[2].toString()," ");const s=r.children[1];t.strictEqual(s.name,"TM_SELECTED_TEXT"),t.strictEqual(s.children.length,0),e=new i().parse("$TM_SELECTED_TEXT").children,t.strictEqual(e.length,1),t.ok(e[0]instanceof c)}),test("Parser, transform example",()=>{const{children:e}=new i().parse("${1:name} : ${2:type}${3/\\s:=(.*)/${1:+ :=}${1}/};\n$0");t.ok(e[0]instanceof l),t.strictEqual(e[0].children.length,1),t.strictEqual(e[0].children[0].toString(),"name"),t.strictEqual(e[0].transform,void 0),t.ok(e[1]instanceof o),t.strictEqual(e[1].toString()," : "),t.ok(e[2]instanceof l),t.strictEqual(e[2].children.length,1),t.strictEqual(e[2].children[0].toString(),"type"),t.ok(e[3]instanceof l),t.strictEqual(e[3].children.length,0),t.notStrictEqual(e[3].transform,void 0);const r=e[3].transform;t.deepStrictEqual(r.regexp,/\s:=(.*)/),t.strictEqual(r.children.length,2),t.ok(r.children[0]instanceof f),t.strictEqual(r.children[0].index,1),t.strictEqual(r.children[0].ifValue," :="),t.ok(r.children[1]instanceof f),t.strictEqual(r.children[1].index,1),t.ok(e[4]instanceof o),t.strictEqual(e[4].toString(),`;
`)}),test("Parser, default placeholder values",()=>{u("errorContext: `${1:err}`, error: $1",o,l,o,l);const[,e,,r]=new i().parse("errorContext: `${1:err}`, error:$1").children;t.strictEqual(e.index,1),t.strictEqual(e.children.length,1),t.strictEqual(e.children[0].toString(),"err"),t.strictEqual(r.index,1),t.strictEqual(r.children.length,1),t.strictEqual(r.children[0].toString(),"err")}),test("Parser, default placeholder values and one transform",()=>{u("errorContext: `${1:err}`, error: ${1/err/ok/}",o,l,o,l);const[,e,,r]=new i().parse("errorContext: `${1:err}`, error:${1/err/ok/}").children;t.strictEqual(e.index,1),t.strictEqual(e.children.length,1),t.strictEqual(e.children[0].toString(),"err"),t.strictEqual(e.transform,void 0),t.strictEqual(r.index,1),t.strictEqual(r.children.length,1),t.strictEqual(r.children[0].toString(),"err"),t.notStrictEqual(r.transform,void 0)}),test("Repeated snippet placeholder should always inherit, #31040",function(){p("${1:foo}-abc-$1","foo-abc-foo"),p("${1:foo}-abc-${1}","foo-abc-foo"),p("${1:foo}-abc-${1:bar}","foo-abc-foo"),p("${1}-abc-${1:foo}","foo-abc-foo")}),test("backspace esapce in TM only, #16212",()=>{const e=i.asInsertText("Foo \\\\${abc}bar");t.strictEqual(e,"Foo \\bar")}),test("colon as variable/placeholder value, #16717",()=>{let e=i.asInsertText("${TM_SELECTED_TEXT:foo:bar}");t.strictEqual(e,"foo:bar"),e=i.asInsertText("${1:foo:bar}"),t.strictEqual(e,"foo:bar")}),test("incomplete placeholder",()=>{n("${1:}","",l)}),test("marker#len",()=>{function e(r,...s){new i().parse(r,!0).walk($=>{const h=s.shift();return t.strictEqual($.len(),h),!0}),t.strictEqual(s.length,0)}e("text$0",4,0),e("$1text$0",0,4,0),e("te$1xt$0",2,0,2,0),e("errorContext: `${1:err}`, error: $0",15,0,3,10,0),e("errorContext: `${1:err}`, error: $1$0",15,0,3,10,0,3,0),e("$TM_SELECTED_TEXT$0",0,0),e("${TM_SELECTED_TEXT:def}$0",0,3,0)}),test("parser, parent node",function(){let e=new i().parse("This ${1:is ${2:nested}}$0",!0);t.strictEqual(e.placeholders.length,3);let[r,s]=e.placeholders;t.strictEqual(r.index,1),t.strictEqual(s.index,2),t.ok(s.parent===r),t.ok(r.parent===e),e=new i().parse("${VAR:default${1:value}}$0",!0),t.strictEqual(e.placeholders.length,2),[r]=e.placeholders,t.strictEqual(r.index,1),t.ok(e.children[0]instanceof c),t.ok(r.parent===e.children[0])}),test("TextmateSnippet#enclosingPlaceholders",()=>{const e=new i().parse("This ${1:is ${2:nested}}$0",!0),[r,s]=e.placeholders;t.deepStrictEqual(e.enclosingPlaceholders(r),[]),t.deepStrictEqual(e.enclosingPlaceholders(s),[r])}),test("TextmateSnippet#offset",()=>{let e=new i().parse("te$1xt",!0);t.strictEqual(e.offset(e.children[0]),0),t.strictEqual(e.offset(e.children[1]),2),t.strictEqual(e.offset(e.children[2]),2),e=new i().parse("${TM_SELECTED_TEXT:def}",!0),t.strictEqual(e.offset(e.children[0]),0),t.strictEqual(e.offset(e.children[0].children[0]),0),t.strictEqual(e.offset(new o("foo")),-1)}),test("TextmateSnippet#placeholder",()=>{let e=new i().parse("te$1xt$0",!0),r=e.placeholders;t.strictEqual(r.length,2),e=new i().parse("te$1xt$1$0",!0),r=e.placeholders,t.strictEqual(r.length,3),e=new i().parse("te$1xt$2$0",!0),r=e.placeholders,t.strictEqual(r.length,3),e=new i().parse("${1:bar${2:foo}bar}$0",!0),r=e.placeholders,t.strictEqual(r.length,3)}),test("TextmateSnippet#replace 1/2",function(){const e=new i().parse("aaa${1:bbb${2:ccc}}$0",!0);t.strictEqual(e.placeholders.length,3);const[,r]=e.placeholders;t.strictEqual(r.index,2);const s=e.enclosingPlaceholders(r);t.strictEqual(s.length,1),t.strictEqual(s[0].index,1);const d=new i().parse("ddd$1eee$0",!0);e.replace(r,d.children),t.strictEqual(e.toString(),"aaabbbdddeee"),t.strictEqual(e.placeholders.length,4),t.strictEqual(e.placeholders[0].index,1),t.strictEqual(e.placeholders[1].index,1),t.strictEqual(e.placeholders[2].index,0),t.strictEqual(e.placeholders[3].index,0);const $=e.enclosingPlaceholders(e.placeholders[1]);t.ok($[0]===e.placeholders[0]),t.strictEqual($.length,1),t.strictEqual($[0].index,1)}),test("TextmateSnippet#replace 2/2",function(){const e=new i().parse("aaa${1:bbb${2:ccc}}$0",!0);t.strictEqual(e.placeholders.length,3);const[,r]=e.placeholders;t.strictEqual(r.index,2);const s=new i().parse("dddeee$0",!0);e.replace(r,s.children),t.strictEqual(e.toString(),"aaabbbdddeee"),t.strictEqual(e.placeholders.length,3)}),test("Snippet order for placeholders, #28185",function(){const e=new l(10),r=new l(2);t.strictEqual(l.compareByIndex(e,r),1)}),test("Maximum call stack size exceeded, #28983",function(){new i().parse("${1:${foo:${1}}}")}),test("Snippet can freeze the editor, #30407",function(){const e=new Set;e.clear(),new i().parse("class ${1:${TM_FILENAME/(?:\\A|_)([A-Za-z0-9]+)(?:\\.rb)?/(?2::\\u$1)/g}} < ${2:Application}Controller\n  $3\nend").walk(r=>(t.ok(!e.has(r)),e.add(r),!0)),e.clear(),new i().parse("${1:${FOO:abc$1def}}").walk(r=>(t.ok(!e.has(r)),e.add(r),!0))}),test("Snippets: make parser ignore `${0|choice|}`, #31599",function(){n("${0|foo,bar|}","${0|foo,bar|}",o),n("${1|foo,bar|}","foo",l)}),test("Transform -> FormatString#resolve",function(){t.strictEqual(new f(1,"upcase").resolve("foo"),"FOO"),t.strictEqual(new f(1,"downcase").resolve("FOO"),"foo"),t.strictEqual(new f(1,"capitalize").resolve("bar"),"Bar"),t.strictEqual(new f(1,"capitalize").resolve("bar no repeat"),"Bar no repeat"),t.strictEqual(new f(1,"pascalcase").resolve("bar-foo"),"BarFoo"),t.strictEqual(new f(1,"pascalcase").resolve("bar-42-foo"),"Bar42Foo"),t.strictEqual(new f(1,"pascalcase").resolve("snake_AndPascalCase"),"SnakeAndPascalCase"),t.strictEqual(new f(1,"pascalcase").resolve("kebab-AndPascalCase"),"KebabAndPascalCase"),t.strictEqual(new f(1,"pascalcase").resolve("_justPascalCase"),"JustPascalCase"),t.strictEqual(new f(1,"camelcase").resolve("bar-foo"),"barFoo"),t.strictEqual(new f(1,"camelcase").resolve("bar-42-foo"),"bar42Foo"),t.strictEqual(new f(1,"camelcase").resolve("snake_AndCamelCase"),"snakeAndCamelCase"),t.strictEqual(new f(1,"camelcase").resolve("kebab-AndCamelCase"),"kebabAndCamelCase"),t.strictEqual(new f(1,"camelcase").resolve("_JustCamelCase"),"justCamelCase"),t.strictEqual(new f(1,"notKnown").resolve("input"),"input"),t.strictEqual(new f(1,void 0,"foo",void 0).resolve(void 0),""),t.strictEqual(new f(1,void 0,"foo",void 0).resolve(""),""),t.strictEqual(new f(1,void 0,"foo",void 0).resolve("bar"),"foo"),t.strictEqual(new f(1,void 0,void 0,"foo").resolve(void 0),"foo"),t.strictEqual(new f(1,void 0,void 0,"foo").resolve(""),"foo"),t.strictEqual(new f(1,void 0,void 0,"foo").resolve("bar"),"bar"),t.strictEqual(new f(1,void 0,"bar","foo").resolve(void 0),"foo"),t.strictEqual(new f(1,void 0,"bar","foo").resolve(""),"foo"),t.strictEqual(new f(1,void 0,"bar","foo").resolve("baz"),"bar")}),test("Snippet variable transformation doesn't work if regex is complicated and snippet body contains '$$' #55627",function(){const e=new i().parse('const fileName = "${TM_FILENAME/(.*)\\..+$/$1/}"');t.strictEqual(e.toTextmateString(),'const fileName = "${TM_FILENAME/(.*)\\..+$/${1}/}"')}),test("[BUG] HTML attribute suggestions: Snippet session does not have end-position set, #33147",function(){const{placeholders:e}=new i().parse('src="$1"',!0),[r,s]=e;t.strictEqual(e.length,2),t.strictEqual(r.index,1),t.strictEqual(s.index,0)}),test("Snippet optional transforms are not applied correctly when reusing the same variable, #37702",function(){const e=new m;e.appendChild(new f(1,"upcase")),e.appendChild(new f(2,"upcase")),e.regexp=/^(.)|-(.)/g,t.strictEqual(e.resolve("my-file-name"),"MyFileName");const r=e.clone();t.strictEqual(r.resolve("my-file-name"),"MyFileName")}),test("problem with snippets regex #40570",function(){const e=new i().parse("${TM_DIRECTORY/.*src[\\/](.*)/$1/}");u(e,c)}),test("Variable transformation doesn't work if undefined variables are used in the same snippet #51769",function(){const e=new m;e.appendChild(new o("bar")),e.regexp=new RegExp("foo","gi"),t.strictEqual(e.toTextmateString(),"/foo/bar/ig")}),test("Snippet parser freeze #53144",function(){const e=new i().parse("${1/(void$)|(.+)/${1:?-	return nil;}/}");u(e,l)}),test("snippets variable not resolved in JSON proposal #52931",function(){n("FOO${1:/bin/bash}","FOO/bin/bash",o,l)}),test("Mirroring sequence of nested placeholders not selected properly on backjumping #58736",function(){const e=new i().parse("${3:nest1 ${1:nest2 ${2:nest3}}} $3");t.strictEqual(e.children.length,3),t.ok(e.children[0]instanceof l),t.ok(e.children[1]instanceof o),t.ok(e.children[2]instanceof l);function r(d){if(d.children.forEach(r),!(d instanceof l))return;let $=!1,h=d;for(;h&&!$;)h.parent===e&&($=!0),h=h.parent;t.ok($)}const[,,s]=e.children;r(s)}),test("Backspace can't be escaped in snippet variable transforms #65412",function(){const e=new i().parse("namespace ${TM_DIRECTORY/[\\/]/\\\\/g};");u(e,o,c,o)}),test("Snippet cannot escape closing bracket inside conditional insertion variable replacement #78883",function(){const e=new i().parse("${TM_DIRECTORY/(.+)/${1:+import { hello \\} from world}/}"),r=e.children[0];t.strictEqual(e.children.length,1),t.ok(r instanceof c),t.ok(r.transform),t.strictEqual(r.transform.children.length,1),t.ok(r.transform.children[0]instanceof f),t.strictEqual(r.transform.children[0].ifValue,"import { hello } from world"),t.strictEqual(r.transform.children[0].elseValue,void 0)}),test("Snippet escape backslashes inside conditional insertion variable replacement #80394",function(){const e=new i().parse("${CURRENT_YEAR/(.+)/${1:+\\\\}/}"),r=e.children[0];t.strictEqual(e.children.length,1),t.ok(r instanceof c),t.ok(r.transform),t.strictEqual(r.transform.children.length,1),t.ok(r.transform.children[0]instanceof f),t.strictEqual(r.transform.children[0].ifValue,"\\"),t.strictEqual(r.transform.children[0].elseValue,void 0)}),test("Snippet placeholder empty right after expansion #152553",function(){const r=new i().parse("${1:prog}: ${2:$1.cc} - $2").toString();t.strictEqual(r,"prog: prog.cc - prog.cc");const d=new i().parse("${1:prog}: ${3:${2:$1.cc}.33} - $2 $3").toString();t.strictEqual(d,"prog: prog.cc.33 - prog.cc prog.cc.33");const h=new i().parse("${1:$2.one} <> ${2:$1.two}").toString();t.strictEqual(h,".two.one.two.one <> .one.two.one.two")}),test("Snippet choices are incorrectly escaped/applied #180132",function(){n("${1|aaa$aaa|}bbb\\$bbb","aaa$aaabbb$bbb",l,o)})});
