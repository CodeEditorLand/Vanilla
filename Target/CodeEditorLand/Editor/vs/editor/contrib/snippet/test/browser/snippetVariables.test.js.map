{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/test/browser/snippetVariables.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { sep } from '../../../../../base/common/path.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { TextModel } from '../../../../common/model/textModel.js';\nimport { SnippetParser, Variable, VariableResolver } from '../../browser/snippetParser.js';\nimport { ClipboardBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from '../../browser/snippetVariables.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { IWorkspace, IWorkspaceContextService, toWorkspaceFolder } from '../../../../../platform/workspace/common/workspace.js';\nimport { Workspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { toWorkspaceFolders } from '../../../../../platform/workspaces/common/workspaces.js';\n\nsuite('Snippet Variables Resolver', function () {\n\n\n\tconst labelService = new class extends mock<ILabelService>() {\n\t\toverride getUriLabel(uri: URI) {\n\t\t\treturn uri.fsPath;\n\t\t}\n\t};\n\n\tlet model: TextModel;\n\tlet resolver: VariableResolver;\n\n\tsetup(function () {\n\t\tmodel = createTextModel([\n\t\t\t'this is line one',\n\t\t\t'this is line two',\n\t\t\t'    this is line three'\n\t\t].join('\\n'), undefined, undefined, URI.parse('file:///foo/files/text.txt'));\n\n\t\tresolver = new CompositeSnippetVariableResolver([\n\t\t\tnew ModelBasedVariableResolver(labelService, model),\n\t\t\tnew SelectionBasedVariableResolver(model, new Selection(1, 1, 1, 1), 0, undefined),\n\t\t]);\n\t});\n\n\tteardown(function () {\n\t\tmodel.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\n\tfunction assertVariableResolve(resolver: VariableResolver, varName: string, expected?: string) {\n\t\tconst snippet = new SnippetParser().parse(`$${varName}`);\n\t\tconst variable = <Variable>snippet.children[0];\n\t\tvariable.resolve(resolver);\n\t\tif (variable.children.length === 0) {\n\t\t\tassert.strictEqual(undefined, expected);\n\t\t} else {\n\t\t\tassert.strictEqual(variable.toString(), expected);\n\t\t}\n\t}\n\n\ttest('editor variables, basics', function () {\n\t\tassertVariableResolve(resolver, 'TM_FILENAME', 'text.txt');\n\t\tassertVariableResolve(resolver, 'something', undefined);\n\t});\n\n\ttest('editor variables, file/dir', function () {\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tassertVariableResolve(resolver, 'TM_FILENAME', 'text.txt');\n\t\tif (!isWindows) {\n\t\t\tassertVariableResolve(resolver, 'TM_DIRECTORY', '/foo/files');\n\t\t\tassertVariableResolve(resolver, 'TM_FILEPATH', '/foo/files/text.txt');\n\t\t}\n\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tlabelService,\n\t\t\tdisposables.add(createTextModel('', undefined, undefined, URI.parse('http://www.pb.o/abc/def/ghi')))\n\t\t);\n\t\tassertVariableResolve(resolver, 'TM_FILENAME', 'ghi');\n\t\tif (!isWindows) {\n\t\t\tassertVariableResolve(resolver, 'TM_DIRECTORY', '/abc/def');\n\t\t\tassertVariableResolve(resolver, 'TM_FILEPATH', '/abc/def/ghi');\n\t\t}\n\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tlabelService,\n\t\t\tdisposables.add(createTextModel('', undefined, undefined, URI.parse('mem:fff.ts')))\n\t\t);\n\t\tassertVariableResolve(resolver, 'TM_DIRECTORY', '');\n\t\tassertVariableResolve(resolver, 'TM_FILEPATH', 'fff.ts');\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('Path delimiters in code snippet variables aren\\'t specific to remote OS #76840', function () {\n\n\t\tconst labelService = new class extends mock<ILabelService>() {\n\t\t\toverride getUriLabel(uri: URI) {\n\t\t\t\treturn uri.fsPath.replace(/\\/|\\\\/g, '|');\n\t\t\t}\n\t\t};\n\n\t\tconst model = createTextModel([].join('\\n'), undefined, undefined, URI.parse('foo:///foo/files/text.txt'));\n\n\t\tconst resolver = new CompositeSnippetVariableResolver([new ModelBasedVariableResolver(labelService, model)]);\n\n\t\tassertVariableResolve(resolver, 'TM_FILEPATH', '|foo|files|text.txt');\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('editor variables, selection', function () {\n\n\t\tresolver = new SelectionBasedVariableResolver(model, new Selection(1, 2, 2, 3), 0, undefined);\n\t\tassertVariableResolve(resolver, 'TM_SELECTED_TEXT', 'his is line one\\nth');\n\t\tassertVariableResolve(resolver, 'TM_CURRENT_LINE', 'this is line two');\n\t\tassertVariableResolve(resolver, 'TM_LINE_INDEX', '1');\n\t\tassertVariableResolve(resolver, 'TM_LINE_NUMBER', '2');\n\t\tassertVariableResolve(resolver, 'CURSOR_INDEX', '0');\n\t\tassertVariableResolve(resolver, 'CURSOR_NUMBER', '1');\n\n\t\tresolver = new SelectionBasedVariableResolver(model, new Selection(1, 2, 2, 3), 4, undefined);\n\t\tassertVariableResolve(resolver, 'CURSOR_INDEX', '4');\n\t\tassertVariableResolve(resolver, 'CURSOR_NUMBER', '5');\n\n\t\tresolver = new SelectionBasedVariableResolver(model, new Selection(2, 3, 1, 2), 0, undefined);\n\t\tassertVariableResolve(resolver, 'TM_SELECTED_TEXT', 'his is line one\\nth');\n\t\tassertVariableResolve(resolver, 'TM_CURRENT_LINE', 'this is line one');\n\t\tassertVariableResolve(resolver, 'TM_LINE_INDEX', '0');\n\t\tassertVariableResolve(resolver, 'TM_LINE_NUMBER', '1');\n\n\t\tresolver = new SelectionBasedVariableResolver(model, new Selection(1, 2, 1, 2), 0, undefined);\n\t\tassertVariableResolve(resolver, 'TM_SELECTED_TEXT', undefined);\n\n\t\tassertVariableResolve(resolver, 'TM_CURRENT_WORD', 'this');\n\n\t\tresolver = new SelectionBasedVariableResolver(model, new Selection(3, 1, 3, 1), 0, undefined);\n\t\tassertVariableResolve(resolver, 'TM_CURRENT_WORD', undefined);\n\n\t});\n\n\ttest('TextmateSnippet, resolve variable', function () {\n\t\tconst snippet = new SnippetParser().parse('\"$TM_CURRENT_WORD\"', true);\n\t\tassert.strictEqual(snippet.toString(), '\"\"');\n\t\tsnippet.resolveVariables(resolver);\n\t\tassert.strictEqual(snippet.toString(), '\"this\"');\n\n\t});\n\n\ttest('TextmateSnippet, resolve variable with default', function () {\n\t\tconst snippet = new SnippetParser().parse('\"${TM_CURRENT_WORD:foo}\"', true);\n\t\tassert.strictEqual(snippet.toString(), '\"foo\"');\n\t\tsnippet.resolveVariables(resolver);\n\t\tassert.strictEqual(snippet.toString(), '\"this\"');\n\t});\n\n\ttest('More useful environment variables for snippets, #32737', function () {\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tassertVariableResolve(resolver, 'TM_FILENAME_BASE', 'text');\n\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tlabelService,\n\t\t\tdisposables.add(createTextModel('', undefined, undefined, URI.parse('http://www.pb.o/abc/def/ghi')))\n\t\t);\n\t\tassertVariableResolve(resolver, 'TM_FILENAME_BASE', 'ghi');\n\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tlabelService,\n\t\t\tdisposables.add(createTextModel('', undefined, undefined, URI.parse('mem:.git')))\n\t\t);\n\t\tassertVariableResolve(resolver, 'TM_FILENAME_BASE', '.git');\n\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tlabelService,\n\t\t\tdisposables.add(createTextModel('', undefined, undefined, URI.parse('mem:foo.')))\n\t\t);\n\t\tassertVariableResolve(resolver, 'TM_FILENAME_BASE', 'foo');\n\n\t\tdisposables.dispose();\n\t});\n\n\n\tfunction assertVariableResolve2(input: string, expected: string, varValue?: string) {\n\t\tconst snippet = new SnippetParser().parse(input)\n\t\t\t.resolveVariables({ resolve(variable) { return varValue || variable.name; } });\n\n\t\tconst actual = snippet.toString();\n\t\tassert.strictEqual(actual, expected);\n\t}\n\n\ttest('Variable Snippet Transform', function () {\n\n\t\tconst snippet = new SnippetParser().parse('name=${TM_FILENAME/(.*)\\\\..+$/$1/}', true);\n\t\tsnippet.resolveVariables(resolver);\n\t\tassert.strictEqual(snippet.toString(), 'name=text');\n\n\t\tassertVariableResolve2('${ThisIsAVar/([A-Z]).*(Var)/$2/}', 'Var');\n\t\tassertVariableResolve2('${ThisIsAVar/([A-Z]).*(Var)/$2-${1:/downcase}/}', 'Var-t');\n\t\tassertVariableResolve2('${Foo/(.*)/${1:+Bar}/img}', 'Bar');\n\n\t\t//https://github.com/microsoft/vscode/issues/33162\n\t\tassertVariableResolve2('export default class ${TM_FILENAME/(\\\\w+)\\\\.js/$1/g}', 'export default class FooFile', 'FooFile.js');\n\n\t\tassertVariableResolve2('${foobarfoobar/(foo)/${1:+FAR}/g}', 'FARbarFARbar'); // global\n\t\tassertVariableResolve2('${foobarfoobar/(foo)/${1:+FAR}/}', 'FARbarfoobar'); // first match\n\t\tassertVariableResolve2('${foobarfoobar/(bazz)/${1:+FAR}/g}', 'foobarfoobar'); // no match, no else\n\t\t// assertVariableResolve2('${foobarfoobar/(bazz)/${1:+FAR}/g}', ''); // no match\n\n\t\tassertVariableResolve2('${foobarfoobar/(foo)/${2:+FAR}/g}', 'barbar'); // bad group reference\n\t});\n\n\ttest('Snippet transforms do not handle regex with alternatives or optional matches, #36089', function () {\n\n\t\tassertVariableResolve2(\n\t\t\t'${TM_FILENAME/^(.)|(?:-(.))|(\\\\.js)/${1:/upcase}${2:/upcase}/g}',\n\t\t\t'MyClass',\n\t\t\t'my-class.js'\n\t\t);\n\n\t\t// no hyphens\n\t\tassertVariableResolve2(\n\t\t\t'${TM_FILENAME/^(.)|(?:-(.))|(\\\\.js)/${1:/upcase}${2:/upcase}/g}',\n\t\t\t'Myclass',\n\t\t\t'myclass.js'\n\t\t);\n\n\t\t// none matching suffix\n\t\tassertVariableResolve2(\n\t\t\t'${TM_FILENAME/^(.)|(?:-(.))|(\\\\.js)/${1:/upcase}${2:/upcase}/g}',\n\t\t\t'Myclass.foo',\n\t\t\t'myclass.foo'\n\t\t);\n\n\t\t// more than one hyphen\n\t\tassertVariableResolve2(\n\t\t\t'${TM_FILENAME/^(.)|(?:-(.))|(\\\\.js)/${1:/upcase}${2:/upcase}/g}',\n\t\t\t'ThisIsAFile',\n\t\t\t'this-is-a-file.js'\n\t\t);\n\n\t\t// KEBAB CASE\n\t\tassertVariableResolve2(\n\t\t\t'${TM_FILENAME_BASE/([A-Z][a-z]+)([A-Z][a-z]+$)?/${1:/downcase}-${2:/downcase}/g}',\n\t\t\t'capital-case',\n\t\t\t'CapitalCase'\n\t\t);\n\n\t\tassertVariableResolve2(\n\t\t\t'${TM_FILENAME_BASE/([A-Z][a-z]+)([A-Z][a-z]+$)?/${1:/downcase}-${2:/downcase}/g}',\n\t\t\t'capital-case-more',\n\t\t\t'CapitalCaseMore'\n\t\t);\n\t});\n\n\ttest('Add variable to insert value from clipboard to a snippet #40153', function () {\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => undefined, 1, 0, true), 'CLIPBOARD', undefined);\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => null!, 1, 0, true), 'CLIPBOARD', undefined);\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => '', 1, 0, true), 'CLIPBOARD', undefined);\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'foo', 1, 0, true), 'CLIPBOARD', 'foo');\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'foo', 1, 0, true), 'foo', undefined);\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'foo', 1, 0, true), 'cLIPBOARD', undefined);\n\t});\n\n\ttest('Add variable to insert value from clipboard to a snippet #40153, 2', function () {\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'line1', 1, 2, true), 'CLIPBOARD', 'line1');\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'line1\\nline2\\nline3', 1, 2, true), 'CLIPBOARD', 'line1\\nline2\\nline3');\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'line1\\nline2', 1, 2, true), 'CLIPBOARD', 'line2');\n\t\tresolver = new ClipboardBasedVariableResolver(() => 'line1\\nline2', 0, 2, true);\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'line1\\nline2', 0, 2, true), 'CLIPBOARD', 'line1');\n\n\t\tassertVariableResolve(new ClipboardBasedVariableResolver(() => 'line1\\nline2', 0, 2, false), 'CLIPBOARD', 'line1\\nline2');\n\t});\n\n\n\tfunction assertVariableResolve3(resolver: VariableResolver, varName: string) {\n\t\tconst snippet = new SnippetParser().parse(`$${varName}`);\n\t\tconst variable = <Variable>snippet.children[0];\n\n\t\tassert.strictEqual(variable.resolve(resolver), true, `${varName} failed to resolve`);\n\t}\n\n\ttest('Add time variables for snippets #41631, #43140', function () {\n\n\t\tconst resolver = new TimeBasedVariableResolver;\n\n\t\tassertVariableResolve3(resolver, 'CURRENT_YEAR');\n\t\tassertVariableResolve3(resolver, 'CURRENT_YEAR_SHORT');\n\t\tassertVariableResolve3(resolver, 'CURRENT_MONTH');\n\t\tassertVariableResolve3(resolver, 'CURRENT_DATE');\n\t\tassertVariableResolve3(resolver, 'CURRENT_HOUR');\n\t\tassertVariableResolve3(resolver, 'CURRENT_MINUTE');\n\t\tassertVariableResolve3(resolver, 'CURRENT_SECOND');\n\t\tassertVariableResolve3(resolver, 'CURRENT_DAY_NAME');\n\t\tassertVariableResolve3(resolver, 'CURRENT_DAY_NAME_SHORT');\n\t\tassertVariableResolve3(resolver, 'CURRENT_MONTH_NAME');\n\t\tassertVariableResolve3(resolver, 'CURRENT_MONTH_NAME_SHORT');\n\t\tassertVariableResolve3(resolver, 'CURRENT_SECONDS_UNIX');\n\t\tassertVariableResolve3(resolver, 'CURRENT_TIMEZONE_OFFSET');\n\t});\n\n\ttest('Time-based snippet variables resolve to the same values even as time progresses', async function () {\n\t\tconst snippetText = `\n\t\t\t$CURRENT_YEAR\n\t\t\t$CURRENT_YEAR_SHORT\n\t\t\t$CURRENT_MONTH\n\t\t\t$CURRENT_DATE\n\t\t\t$CURRENT_HOUR\n\t\t\t$CURRENT_MINUTE\n\t\t\t$CURRENT_SECOND\n\t\t\t$CURRENT_DAY_NAME\n\t\t\t$CURRENT_DAY_NAME_SHORT\n\t\t\t$CURRENT_MONTH_NAME\n\t\t\t$CURRENT_MONTH_NAME_SHORT\n\t\t\t$CURRENT_SECONDS_UNIX\n\t\t\t$CURRENT_TIMEZONE_OFFSET\n\t\t`;\n\n\t\tconst clock = sinon.useFakeTimers();\n\t\ttry {\n\t\t\tconst resolver = new TimeBasedVariableResolver;\n\n\t\t\tconst firstResolve = new SnippetParser().parse(snippetText).resolveVariables(resolver);\n\t\t\tclock.tick((365 * 24 * 3600 * 1000) + (24 * 3600 * 1000) + (3661 * 1000));  // 1 year + 1 day + 1 hour + 1 minute + 1 second\n\t\t\tconst secondResolve = new SnippetParser().parse(snippetText).resolveVariables(resolver);\n\n\t\t\tassert.strictEqual(firstResolve.toString(), secondResolve.toString(), `Time-based snippet variables resolved differently`);\n\t\t} finally {\n\t\t\tclock.restore();\n\t\t}\n\t});\n\n\ttest('creating snippet - format-condition doesn\\'t work #53617', function () {\n\n\t\tconst snippet = new SnippetParser().parse('${TM_LINE_NUMBER/(10)/${1:?It is:It is not}/} line 10', true);\n\t\tsnippet.resolveVariables({ resolve() { return '10'; } });\n\t\tassert.strictEqual(snippet.toString(), 'It is line 10');\n\n\t\tsnippet.resolveVariables({ resolve() { return '11'; } });\n\t\tassert.strictEqual(snippet.toString(), 'It is not line 10');\n\t});\n\n\ttest('Add workspace name and folder variables for snippets #68261', function () {\n\n\t\tlet workspace: IWorkspace;\n\t\tconst workspaceService = new class implements IWorkspaceContextService {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\t_throw = () => { throw new Error(); };\n\t\t\tonDidChangeWorkbenchState = this._throw;\n\t\t\tonDidChangeWorkspaceName = this._throw;\n\t\t\tonWillChangeWorkspaceFolders = this._throw;\n\t\t\tonDidChangeWorkspaceFolders = this._throw;\n\t\t\tgetCompleteWorkspace = this._throw;\n\t\t\tgetWorkspace(): IWorkspace { return workspace; }\n\t\t\tgetWorkbenchState = this._throw;\n\t\t\tgetWorkspaceFolder = this._throw;\n\t\t\tisCurrentWorkspace = this._throw;\n\t\t\tisInsideWorkspace = this._throw;\n\t\t};\n\n\t\tconst resolver = new WorkspaceBasedVariableResolver(workspaceService);\n\n\t\t// empty workspace\n\t\tworkspace = new Workspace('');\n\t\tassertVariableResolve(resolver, 'WORKSPACE_NAME', undefined);\n\t\tassertVariableResolve(resolver, 'WORKSPACE_FOLDER', undefined);\n\n\t\t// single folder workspace without config\n\t\tworkspace = new Workspace('', [toWorkspaceFolder(URI.file('/folderName'))]);\n\t\tassertVariableResolve(resolver, 'WORKSPACE_NAME', 'folderName');\n\t\tif (!isWindows) {\n\t\t\tassertVariableResolve(resolver, 'WORKSPACE_FOLDER', '/folderName');\n\t\t}\n\n\t\t// workspace with config\n\t\tconst workspaceConfigPath = URI.file('testWorkspace.code-workspace');\n\t\tworkspace = new Workspace('', toWorkspaceFolders([{ path: 'folderName' }], workspaceConfigPath, extUriBiasedIgnorePathCase), workspaceConfigPath);\n\t\tassertVariableResolve(resolver, 'WORKSPACE_NAME', 'testWorkspace');\n\t\tif (!isWindows) {\n\t\t\tassertVariableResolve(resolver, 'WORKSPACE_FOLDER', '/');\n\t\t}\n\t});\n\n\ttest('Add RELATIVE_FILEPATH snippet variable #114208', function () {\n\n\t\tlet resolver: VariableResolver;\n\n\t\t// Mock a label service (only coded for file uris)\n\t\tconst workspaceLabelService = ((rootPath: string): ILabelService => {\n\t\t\tconst labelService = new class extends mock<ILabelService>() {\n\t\t\t\toverride getUriLabel(uri: URI, options: { relative?: boolean } = {}) {\n\t\t\t\t\tconst rootFsPath = URI.file(rootPath).fsPath + sep;\n\t\t\t\t\tconst fsPath = uri.fsPath;\n\t\t\t\t\tif (options.relative && rootPath && fsPath.startsWith(rootFsPath)) {\n\t\t\t\t\t\treturn fsPath.substring(rootFsPath.length);\n\t\t\t\t\t}\n\t\t\t\t\treturn fsPath;\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn labelService;\n\t\t});\n\n\t\tconst model = createTextModel('', undefined, undefined, URI.parse('file:///foo/files/text.txt'));\n\n\t\t// empty workspace\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tworkspaceLabelService(''),\n\t\t\tmodel\n\t\t);\n\n\t\tif (!isWindows) {\n\t\t\tassertVariableResolve(resolver, 'RELATIVE_FILEPATH', '/foo/files/text.txt');\n\t\t} else {\n\t\t\tassertVariableResolve(resolver, 'RELATIVE_FILEPATH', '\\\\foo\\\\files\\\\text.txt');\n\t\t}\n\n\t\t// single folder workspace\n\t\tresolver = new ModelBasedVariableResolver(\n\t\t\tworkspaceLabelService('/foo'),\n\t\t\tmodel\n\t\t);\n\t\tif (!isWindows) {\n\t\t\tassertVariableResolve(resolver, 'RELATIVE_FILEPATH', 'files/text.txt');\n\t\t} else {\n\t\t\tassertVariableResolve(resolver, 'RELATIVE_FILEPATH', 'files\\\\text.txt');\n\t\t}\n\n\t\tmodel.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": ["resolver", "labelService", "model"]
}
