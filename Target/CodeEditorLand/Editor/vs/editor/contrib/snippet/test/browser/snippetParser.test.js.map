{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/snippet/test/browser/snippetParser.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Choice, FormatString, Marker, Placeholder, Scanner, SnippetParser, Text, TextmateSnippet, TokenType, Transform, Variable } from '../../browser/snippetParser.js';\n\nsuite('SnippetParser', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Scanner', () => {\n\n\t\tconst scanner = new Scanner();\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('abc');\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('{{abc}}');\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyOpen);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyOpen);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyClose);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyClose);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('abc() ');\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Format);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('abc 123');\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Format);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Int);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('$foo');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('$foo_bar');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('$foo-bar');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dash);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('${foo}');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyOpen);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyClose);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('${1223:foo}');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyOpen);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Int);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Colon);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyClose);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\n\t\tscanner.text('\\\\${}');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Backslash);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyOpen);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyClose);\n\n\t\tscanner.text('${foo/regex/format/option}');\n\t\tassert.strictEqual(scanner.next().type, TokenType.Dollar);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyOpen);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Forwardslash);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Forwardslash);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.Forwardslash);\n\t\tassert.strictEqual(scanner.next().type, TokenType.VariableName);\n\t\tassert.strictEqual(scanner.next().type, TokenType.CurlyClose);\n\t\tassert.strictEqual(scanner.next().type, TokenType.EOF);\n\t});\n\n\tfunction assertText(value: string, expected: string) {\n\t\tconst actual = SnippetParser.asInsertText(value);\n\t\tassert.strictEqual(actual, expected);\n\t}\n\n\tfunction assertMarker(input: TextmateSnippet | Marker[] | string, ...ctors: Function[]) {\n\t\tlet marker: Marker[];\n\t\tif (input instanceof TextmateSnippet) {\n\t\t\tmarker = [...input.children];\n\t\t} else if (typeof input === 'string') {\n\t\t\tconst p = new SnippetParser();\n\t\t\tmarker = p.parse(input).children;\n\t\t} else {\n\t\t\tmarker = [...input];\n\t\t}\n\t\twhile (marker.length > 0) {\n\t\t\tconst m = marker.pop();\n\t\t\tconst ctor = ctors.pop()!;\n\t\t\tassert.ok(m instanceof ctor);\n\t\t}\n\t\tassert.strictEqual(marker.length, ctors.length);\n\t\tassert.strictEqual(marker.length, 0);\n\t}\n\n\tfunction assertTextAndMarker(value: string, escaped: string, ...ctors: Function[]) {\n\t\tassertText(value, escaped);\n\t\tassertMarker(value, ...ctors);\n\t}\n\n\tfunction assertEscaped(value: string, expected: string) {\n\t\tconst actual = SnippetParser.escape(value);\n\t\tassert.strictEqual(actual, expected);\n\t}\n\n\ttest('Parser, escaped', function () {\n\t\tassertEscaped('foo$0', 'foo\\\\$0');\n\t\tassertEscaped('foo\\\\$0', 'foo\\\\\\\\\\\\$0');\n\t\tassertEscaped('f$1oo$0', 'f\\\\$1oo\\\\$0');\n\t\tassertEscaped('${1:foo}$0', '\\\\${1:foo\\\\}\\\\$0');\n\t\tassertEscaped('$', '\\\\$');\n\t});\n\n\ttest('Parser, text', () => {\n\t\tassertText('$', '$');\n\t\tassertText('\\\\\\\\$', '\\\\$');\n\t\tassertText('{', '{');\n\t\tassertText('\\\\}', '}');\n\t\tassertText('\\\\abc', '\\\\abc');\n\t\tassertText('foo${f:\\\\}}bar', 'foo}bar');\n\t\tassertText('\\\\{', '\\\\{');\n\t\tassertText('I need \\\\\\\\\\\\$', 'I need \\\\$');\n\t\tassertText('\\\\', '\\\\');\n\t\tassertText('\\\\{{', '\\\\{{');\n\t\tassertText('{{', '{{');\n\t\tassertText('{{dd', '{{dd');\n\t\tassertText('}}', '}}');\n\t\tassertText('ff}}', 'ff}}');\n\n\t\tassertText('farboo', 'farboo');\n\t\tassertText('far{{}}boo', 'far{{}}boo');\n\t\tassertText('far{{123}}boo', 'far{{123}}boo');\n\t\tassertText('far\\\\{{123}}boo', 'far\\\\{{123}}boo');\n\t\tassertText('far{{id:bern}}boo', 'far{{id:bern}}boo');\n\t\tassertText('far{{id:bern {{basel}}}}boo', 'far{{id:bern {{basel}}}}boo');\n\t\tassertText('far{{id:bern {{id:basel}}}}boo', 'far{{id:bern {{id:basel}}}}boo');\n\t\tassertText('far{{id:bern {{id2:basel}}}}boo', 'far{{id:bern {{id2:basel}}}}boo');\n\t});\n\n\n\ttest('Parser, TM text', () => {\n\t\tassertTextAndMarker('foo${1:bar}}', 'foobar}', Text, Placeholder, Text);\n\t\tassertTextAndMarker('foo${1:bar}${2:foo}}', 'foobarfoo}', Text, Placeholder, Placeholder, Text);\n\n\t\tassertTextAndMarker('foo${1:bar\\\\}${2:foo}}', 'foobar}foo', Text, Placeholder);\n\n\t\tconst [, placeholder] = new SnippetParser().parse('foo${1:bar\\\\}${2:foo}}').children;\n\t\tconst { children } = (<Placeholder>placeholder);\n\n\t\tassert.strictEqual((<Placeholder>placeholder).index, 1);\n\t\tassert.ok(children[0] instanceof Text);\n\t\tassert.strictEqual(children[0].toString(), 'bar}');\n\t\tassert.ok(children[1] instanceof Placeholder);\n\t\tassert.strictEqual(children[1].toString(), 'foo');\n\t});\n\n\ttest('Parser, placeholder', () => {\n\t\tassertTextAndMarker('farboo', 'farboo', Text);\n\t\tassertTextAndMarker('far{{}}boo', 'far{{}}boo', Text);\n\t\tassertTextAndMarker('far{{123}}boo', 'far{{123}}boo', Text);\n\t\tassertTextAndMarker('far\\\\{{123}}boo', 'far\\\\{{123}}boo', Text);\n\t});\n\n\ttest('Parser, literal code', () => {\n\t\tassertTextAndMarker('far`123`boo', 'far`123`boo', Text);\n\t\tassertTextAndMarker('far\\\\`123\\\\`boo', 'far\\\\`123\\\\`boo', Text);\n\t});\n\n\ttest('Parser, variables/tabstop', () => {\n\t\tassertTextAndMarker('$far-boo', '-boo', Variable, Text);\n\t\tassertTextAndMarker('\\\\$far-boo', '$far-boo', Text);\n\t\tassertTextAndMarker('far$farboo', 'far', Text, Variable);\n\t\tassertTextAndMarker('far${farboo}', 'far', Text, Variable);\n\t\tassertTextAndMarker('$123', '', Placeholder);\n\t\tassertTextAndMarker('$farboo', '', Variable);\n\t\tassertTextAndMarker('$far12boo', '', Variable);\n\t\tassertTextAndMarker('000_${far}_000', '000__000', Text, Variable, Text);\n\t\tassertTextAndMarker('FFF_${TM_SELECTED_TEXT}_FFF$0', 'FFF__FFF', Text, Variable, Text, Placeholder);\n\t});\n\n\ttest('Parser, variables/placeholder with defaults', () => {\n\t\tassertTextAndMarker('${name:value}', 'value', Variable);\n\t\tassertTextAndMarker('${1:value}', 'value', Placeholder);\n\t\tassertTextAndMarker('${1:bar${2:foo}bar}', 'barfoobar', Placeholder);\n\n\t\tassertTextAndMarker('${name:value', '${name:value', Text);\n\t\tassertTextAndMarker('${1:bar${2:foobar}', '${1:barfoobar', Text, Placeholder);\n\t});\n\n\ttest('Parser, variable transforms', function () {\n\t\tassertTextAndMarker('${foo///}', '', Variable);\n\t\tassertTextAndMarker('${foo/regex/format/gmi}', '', Variable);\n\t\tassertTextAndMarker('${foo/([A-Z][a-z])/format/}', '', Variable);\n\n\t\t// invalid regex\n\t\tassertTextAndMarker('${foo/([A-Z][a-z])/format/GMI}', '${foo/([A-Z][a-z])/format/GMI}', Text);\n\t\tassertTextAndMarker('${foo/([A-Z][a-z])/format/funky}', '${foo/([A-Z][a-z])/format/funky}', Text);\n\t\tassertTextAndMarker('${foo/([A-Z][a-z]/format/}', '${foo/([A-Z][a-z]/format/}', Text);\n\n\t\t// tricky regex\n\t\tassertTextAndMarker('${foo/m\\\\/atch/$1/i}', '', Variable);\n\t\tassertMarker('${foo/regex\\/format/options}', Text);\n\n\t\t// incomplete\n\t\tassertTextAndMarker('${foo///', '${foo///', Text);\n\t\tassertTextAndMarker('${foo/regex/format/options', '${foo/regex/format/options', Text);\n\n\t\t// format string\n\t\tassertMarker('${foo/.*/${0:fooo}/i}', Variable);\n\t\tassertMarker('${foo/.*/${1}/i}', Variable);\n\t\tassertMarker('${foo/.*/$1/i}', Variable);\n\t\tassertMarker('${foo/.*/This-$1-encloses/i}', Variable);\n\t\tassertMarker('${foo/.*/complex${1:else}/i}', Variable);\n\t\tassertMarker('${foo/.*/complex${1:-else}/i}', Variable);\n\t\tassertMarker('${foo/.*/complex${1:+if}/i}', Variable);\n\t\tassertMarker('${foo/.*/complex${1:?if:else}/i}', Variable);\n\t\tassertMarker('${foo/.*/complex${1:/upcase}/i}', Variable);\n\n\t});\n\n\ttest('Parser, placeholder transforms', function () {\n\t\tassertTextAndMarker('${1///}', '', Placeholder);\n\t\tassertTextAndMarker('${1/regex/format/gmi}', '', Placeholder);\n\t\tassertTextAndMarker('${1/([A-Z][a-z])/format/}', '', Placeholder);\n\n\t\t// tricky regex\n\t\tassertTextAndMarker('${1/m\\\\/atch/$1/i}', '', Placeholder);\n\t\tassertMarker('${1/regex\\/format/options}', Text);\n\n\t\t// incomplete\n\t\tassertTextAndMarker('${1///', '${1///', Text);\n\t\tassertTextAndMarker('${1/regex/format/options', '${1/regex/format/options', Text);\n\t});\n\n\ttest('No way to escape forward slash in snippet regex #36715', function () {\n\t\tassertMarker('${TM_DIRECTORY/src\\\\//$1/}', Variable);\n\t});\n\n\ttest('No way to escape forward slash in snippet format section #37562', function () {\n\t\tassertMarker('${TM_SELECTED_TEXT/a/\\\\/$1/g}', Variable);\n\t\tassertMarker('${TM_SELECTED_TEXT/a/in\\\\/$1ner/g}', Variable);\n\t\tassertMarker('${TM_SELECTED_TEXT/a/end\\\\//g}', Variable);\n\t});\n\n\ttest('Parser, placeholder with choice', () => {\n\n\t\tassertTextAndMarker('${1|one,two,three|}', 'one', Placeholder);\n\t\tassertTextAndMarker('${1|one|}', 'one', Placeholder);\n\t\tassertTextAndMarker('${1|one1,two2|}', 'one1', Placeholder);\n\t\tassertTextAndMarker('${1|one1\\\\,two2|}', 'one1,two2', Placeholder);\n\t\tassertTextAndMarker('${1|one1\\\\|two2|}', 'one1|two2', Placeholder);\n\t\tassertTextAndMarker('${1|one1\\\\atwo2|}', 'one1\\\\atwo2', Placeholder);\n\t\tassertTextAndMarker('${1|one,two,three,|}', '${1|one,two,three,|}', Text);\n\t\tassertTextAndMarker('${1|one,', '${1|one,', Text);\n\n\t\tconst snippet = new SnippetParser().parse('${1|one,two,three|}');\n\t\tconst expected: ((m: Marker) => boolean)[] = [\n\t\t\tm => m instanceof Placeholder,\n\t\t\tm => m instanceof Choice && m.options.length === 3 && m.options.every(x => x instanceof Text),\n\t\t];\n\t\tsnippet.walk(marker => {\n\t\t\tassert.ok(expected.shift()!(marker));\n\t\t\treturn true;\n\t\t});\n\t});\n\n\ttest('Snippet choices: unable to escape comma and pipe, #31521', function () {\n\t\tassertTextAndMarker('console.log(${1|not\\\\, not, five, 5, 1   23|});', 'console.log(not, not);', Text, Placeholder, Text);\n\t});\n\n\ttest('Marker, toTextmateString()', function () {\n\n\t\tfunction assertTextsnippetString(input: string, expected: string): void {\n\t\t\tconst snippet = new SnippetParser().parse(input);\n\t\t\tconst actual = snippet.toTextmateString();\n\t\t\tassert.strictEqual(actual, expected);\n\t\t}\n\n\t\tassertTextsnippetString('$1', '$1');\n\t\tassertTextsnippetString('\\\\$1', '\\\\$1');\n\t\tassertTextsnippetString('console.log(${1|not\\\\, not, five, 5, 1   23|});', 'console.log(${1|not\\\\, not, five, 5, 1   23|});');\n\t\tassertTextsnippetString('console.log(${1|not\\\\, not, \\\\| five, 5, 1   23|});', 'console.log(${1|not\\\\, not, \\\\| five, 5, 1   23|});');\n\t\tassertTextsnippetString('${1|cho\\\\,ices,wi\\\\|th,esc\\\\\\\\aping,chall\\\\\\\\\\\\,enges|}', '${1|cho\\\\,ices,wi\\\\|th,esc\\\\\\\\aping,chall\\\\\\\\\\\\,enges|}');\n\t\tassertTextsnippetString('this is text', 'this is text');\n\t\tassertTextsnippetString('this ${1:is ${2:nested with $var}}', 'this ${1:is ${2:nested with ${var}}}');\n\t\tassertTextsnippetString('this ${1:is ${2:nested with $var}}}', 'this ${1:is ${2:nested with ${var}}}\\\\}');\n\t});\n\n\ttest('Marker, toTextmateString() <-> identity', function () {\n\n\t\tfunction assertIdent(input: string): void {\n\t\t\t// full loop: (1) parse input, (2) generate textmate string, (3) parse, (4) ensure both trees are equal\n\t\t\tconst snippet = new SnippetParser().parse(input);\n\t\t\tconst input2 = snippet.toTextmateString();\n\t\t\tconst snippet2 = new SnippetParser().parse(input2);\n\n\t\t\tfunction checkCheckChildren(marker1: Marker, marker2: Marker) {\n\t\t\t\tassert.ok(marker1 instanceof Object.getPrototypeOf(marker2).constructor);\n\t\t\t\tassert.ok(marker2 instanceof Object.getPrototypeOf(marker1).constructor);\n\n\t\t\t\tassert.strictEqual(marker1.children.length, marker2.children.length);\n\t\t\t\tassert.strictEqual(marker1.toString(), marker2.toString());\n\n\t\t\t\tfor (let i = 0; i < marker1.children.length; i++) {\n\t\t\t\t\tcheckCheckChildren(marker1.children[i], marker2.children[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckCheckChildren(snippet, snippet2);\n\t\t}\n\n\t\tassertIdent('$1');\n\t\tassertIdent('\\\\$1');\n\t\tassertIdent('console.log(${1|not\\\\, not, five, 5, 1   23|});');\n\t\tassertIdent('console.log(${1|not\\\\, not, \\\\| five, 5, 1   23|});');\n\t\tassertIdent('this is text');\n\t\tassertIdent('this ${1:is ${2:nested with $var}}');\n\t\tassertIdent('this ${1:is ${2:nested with $var}}}');\n\t\tassertIdent('this ${1:is ${2:nested with $var}} and repeating $1');\n\t});\n\n\ttest('Parser, choise marker', () => {\n\t\tconst { placeholders } = new SnippetParser().parse('${1|one,two,three|}');\n\n\t\tassert.strictEqual(placeholders.length, 1);\n\t\tassert.ok(placeholders[0].choice instanceof Choice);\n\t\tassert.ok(placeholders[0].children[0] instanceof Choice);\n\t\tassert.strictEqual((<Choice>placeholders[0].children[0]).options.length, 3);\n\n\t\tassertText('${1|one,two,three|}', 'one');\n\t\tassertText('\\\\${1|one,two,three|}', '${1|one,two,three|}');\n\t\tassertText('${1\\\\|one,two,three|}', '${1\\\\|one,two,three|}');\n\t\tassertText('${1||}', '${1||}');\n\t});\n\n\ttest('Backslash character escape in choice tabstop doesn\\'t work #58494', function () {\n\n\t\tconst { placeholders } = new SnippetParser().parse('${1|\\\\,,},$,\\\\|,\\\\\\\\|}');\n\t\tassert.strictEqual(placeholders.length, 1);\n\t\tassert.ok(placeholders[0].choice instanceof Choice);\n\t});\n\n\ttest('Parser, only textmate', () => {\n\t\tconst p = new SnippetParser();\n\t\tassertMarker(p.parse('far{{}}boo'), Text);\n\t\tassertMarker(p.parse('far{{123}}boo'), Text);\n\t\tassertMarker(p.parse('far\\\\{{123}}boo'), Text);\n\n\t\tassertMarker(p.parse('far$0boo'), Text, Placeholder, Text);\n\t\tassertMarker(p.parse('far${123}boo'), Text, Placeholder, Text);\n\t\tassertMarker(p.parse('far\\\\${123}boo'), Text);\n\t});\n\n\ttest('Parser, real world', () => {\n\t\tlet marker = new SnippetParser().parse('console.warn(${1: $TM_SELECTED_TEXT })').children;\n\n\t\tassert.strictEqual(marker[0].toString(), 'console.warn(');\n\t\tassert.ok(marker[1] instanceof Placeholder);\n\t\tassert.strictEqual(marker[2].toString(), ')');\n\n\t\tconst placeholder = <Placeholder>marker[1];\n\t\tassert.strictEqual(placeholder.index, 1);\n\t\tassert.strictEqual(placeholder.children.length, 3);\n\t\tassert.ok(placeholder.children[0] instanceof Text);\n\t\tassert.ok(placeholder.children[1] instanceof Variable);\n\t\tassert.ok(placeholder.children[2] instanceof Text);\n\t\tassert.strictEqual(placeholder.children[0].toString(), ' ');\n\t\tassert.strictEqual(placeholder.children[1].toString(), '');\n\t\tassert.strictEqual(placeholder.children[2].toString(), ' ');\n\n\t\tconst nestedVariable = <Variable>placeholder.children[1];\n\t\tassert.strictEqual(nestedVariable.name, 'TM_SELECTED_TEXT');\n\t\tassert.strictEqual(nestedVariable.children.length, 0);\n\n\t\tmarker = new SnippetParser().parse('$TM_SELECTED_TEXT').children;\n\t\tassert.strictEqual(marker.length, 1);\n\t\tassert.ok(marker[0] instanceof Variable);\n\t});\n\n\ttest('Parser, transform example', () => {\n\t\tconst { children } = new SnippetParser().parse('${1:name} : ${2:type}${3/\\\\s:=(.*)/${1:+ :=}${1}/};\\n$0');\n\n\t\t//${1:name}\n\t\tassert.ok(children[0] instanceof Placeholder);\n\t\tassert.strictEqual(children[0].children.length, 1);\n\t\tassert.strictEqual(children[0].children[0].toString(), 'name');\n\t\tassert.strictEqual((<Placeholder>children[0]).transform, undefined);\n\n\t\t// :\n\t\tassert.ok(children[1] instanceof Text);\n\t\tassert.strictEqual(children[1].toString(), ' : ');\n\n\t\t//${2:type}\n\t\tassert.ok(children[2] instanceof Placeholder);\n\t\tassert.strictEqual(children[2].children.length, 1);\n\t\tassert.strictEqual(children[2].children[0].toString(), 'type');\n\n\t\t//${3/\\\\s:=(.*)/${1:+ :=}${1}/}\n\t\tassert.ok(children[3] instanceof Placeholder);\n\t\tassert.strictEqual(children[3].children.length, 0);\n\t\tassert.notStrictEqual((<Placeholder>children[3]).transform, undefined);\n\t\tconst transform = (<Placeholder>children[3]).transform!;\n\t\tassert.deepStrictEqual(transform.regexp, /\\s:=(.*)/);\n\t\tassert.strictEqual(transform.children.length, 2);\n\t\tassert.ok(transform.children[0] instanceof FormatString);\n\t\tassert.strictEqual((<FormatString>transform.children[0]).index, 1);\n\t\tassert.strictEqual((<FormatString>transform.children[0]).ifValue, ' :=');\n\t\tassert.ok(transform.children[1] instanceof FormatString);\n\t\tassert.strictEqual((<FormatString>transform.children[1]).index, 1);\n\t\tassert.ok(children[4] instanceof Text);\n\t\tassert.strictEqual(children[4].toString(), ';\\n');\n\n\t});\n\n\t// TODO @jrieken making this strictEqul causes circular json conversion errors\n\ttest('Parser, default placeholder values', () => {\n\n\t\tassertMarker('errorContext: `${1:err}`, error: $1', Text, Placeholder, Text, Placeholder);\n\n\t\tconst [, p1, , p2] = new SnippetParser().parse('errorContext: `${1:err}`, error:$1').children;\n\n\t\tassert.strictEqual((<Placeholder>p1).index, 1);\n\t\tassert.strictEqual((<Placeholder>p1).children.length, 1);\n\t\tassert.strictEqual((<Text>(<Placeholder>p1).children[0]).toString(), 'err');\n\n\t\tassert.strictEqual((<Placeholder>p2).index, 1);\n\t\tassert.strictEqual((<Placeholder>p2).children.length, 1);\n\t\tassert.strictEqual((<Text>(<Placeholder>p2).children[0]).toString(), 'err');\n\t});\n\n\t// TODO @jrieken making this strictEqul causes circular json conversion errors\n\ttest('Parser, default placeholder values and one transform', () => {\n\n\t\tassertMarker('errorContext: `${1:err}`, error: ${1/err/ok/}', Text, Placeholder, Text, Placeholder);\n\n\t\tconst [, p3, , p4] = new SnippetParser().parse('errorContext: `${1:err}`, error:${1/err/ok/}').children;\n\n\t\tassert.strictEqual((<Placeholder>p3).index, 1);\n\t\tassert.strictEqual((<Placeholder>p3).children.length, 1);\n\t\tassert.strictEqual((<Text>(<Placeholder>p3).children[0]).toString(), 'err');\n\t\tassert.strictEqual((<Placeholder>p3).transform, undefined);\n\n\t\tassert.strictEqual((<Placeholder>p4).index, 1);\n\t\tassert.strictEqual((<Placeholder>p4).children.length, 1);\n\t\tassert.strictEqual((<Text>(<Placeholder>p4).children[0]).toString(), 'err');\n\t\tassert.notStrictEqual((<Placeholder>p4).transform, undefined);\n\t});\n\n\ttest('Repeated snippet placeholder should always inherit, #31040', function () {\n\t\tassertText('${1:foo}-abc-$1', 'foo-abc-foo');\n\t\tassertText('${1:foo}-abc-${1}', 'foo-abc-foo');\n\t\tassertText('${1:foo}-abc-${1:bar}', 'foo-abc-foo');\n\t\tassertText('${1}-abc-${1:foo}', 'foo-abc-foo');\n\t});\n\n\ttest('backspace esapce in TM only, #16212', () => {\n\t\tconst actual = SnippetParser.asInsertText('Foo \\\\\\\\${abc}bar');\n\t\tassert.strictEqual(actual, 'Foo \\\\bar');\n\t});\n\n\ttest('colon as variable/placeholder value, #16717', () => {\n\t\tlet actual = SnippetParser.asInsertText('${TM_SELECTED_TEXT:foo:bar}');\n\t\tassert.strictEqual(actual, 'foo:bar');\n\n\t\tactual = SnippetParser.asInsertText('${1:foo:bar}');\n\t\tassert.strictEqual(actual, 'foo:bar');\n\t});\n\n\ttest('incomplete placeholder', () => {\n\t\tassertTextAndMarker('${1:}', '', Placeholder);\n\t});\n\n\ttest('marker#len', () => {\n\n\t\tfunction assertLen(template: string, ...lengths: number[]): void {\n\t\t\tconst snippet = new SnippetParser().parse(template, true);\n\t\t\tsnippet.walk(m => {\n\t\t\t\tconst expected = lengths.shift();\n\t\t\t\tassert.strictEqual(m.len(), expected);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tassert.strictEqual(lengths.length, 0);\n\t\t}\n\n\t\tassertLen('text$0', 4, 0);\n\t\tassertLen('$1text$0', 0, 4, 0);\n\t\tassertLen('te$1xt$0', 2, 0, 2, 0);\n\t\tassertLen('errorContext: `${1:err}`, error: $0', 15, 0, 3, 10, 0);\n\t\tassertLen('errorContext: `${1:err}`, error: $1$0', 15, 0, 3, 10, 0, 3, 0);\n\t\tassertLen('$TM_SELECTED_TEXT$0', 0, 0);\n\t\tassertLen('${TM_SELECTED_TEXT:def}$0', 0, 3, 0);\n\t});\n\n\ttest('parser, parent node', function () {\n\t\tlet snippet = new SnippetParser().parse('This ${1:is ${2:nested}}$0', true);\n\n\t\tassert.strictEqual(snippet.placeholders.length, 3);\n\t\tlet [first, second] = snippet.placeholders;\n\t\tassert.strictEqual(first.index, 1);\n\t\tassert.strictEqual(second.index, 2);\n\t\tassert.ok(second.parent === first);\n\t\tassert.ok(first.parent === snippet);\n\n\t\tsnippet = new SnippetParser().parse('${VAR:default${1:value}}$0', true);\n\t\tassert.strictEqual(snippet.placeholders.length, 2);\n\t\t[first] = snippet.placeholders;\n\t\tassert.strictEqual(first.index, 1);\n\n\t\tassert.ok(snippet.children[0] instanceof Variable);\n\t\tassert.ok(first.parent === snippet.children[0]);\n\t});\n\n\ttest('TextmateSnippet#enclosingPlaceholders', () => {\n\t\tconst snippet = new SnippetParser().parse('This ${1:is ${2:nested}}$0', true);\n\t\tconst [first, second] = snippet.placeholders;\n\n\t\tassert.deepStrictEqual(snippet.enclosingPlaceholders(first), []);\n\t\tassert.deepStrictEqual(snippet.enclosingPlaceholders(second), [first]);\n\t});\n\n\ttest('TextmateSnippet#offset', () => {\n\t\tlet snippet = new SnippetParser().parse('te$1xt', true);\n\t\tassert.strictEqual(snippet.offset(snippet.children[0]), 0);\n\t\tassert.strictEqual(snippet.offset(snippet.children[1]), 2);\n\t\tassert.strictEqual(snippet.offset(snippet.children[2]), 2);\n\n\t\tsnippet = new SnippetParser().parse('${TM_SELECTED_TEXT:def}', true);\n\t\tassert.strictEqual(snippet.offset(snippet.children[0]), 0);\n\t\tassert.strictEqual(snippet.offset((<Variable>snippet.children[0]).children[0]), 0);\n\n\t\t// forgein marker\n\t\tassert.strictEqual(snippet.offset(new Text('foo')), -1);\n\t});\n\n\ttest('TextmateSnippet#placeholder', () => {\n\t\tlet snippet = new SnippetParser().parse('te$1xt$0', true);\n\t\tlet placeholders = snippet.placeholders;\n\t\tassert.strictEqual(placeholders.length, 2);\n\n\t\tsnippet = new SnippetParser().parse('te$1xt$1$0', true);\n\t\tplaceholders = snippet.placeholders;\n\t\tassert.strictEqual(placeholders.length, 3);\n\n\n\t\tsnippet = new SnippetParser().parse('te$1xt$2$0', true);\n\t\tplaceholders = snippet.placeholders;\n\t\tassert.strictEqual(placeholders.length, 3);\n\n\t\tsnippet = new SnippetParser().parse('${1:bar${2:foo}bar}$0', true);\n\t\tplaceholders = snippet.placeholders;\n\t\tassert.strictEqual(placeholders.length, 3);\n\t});\n\n\ttest('TextmateSnippet#replace 1/2', function () {\n\t\tconst snippet = new SnippetParser().parse('aaa${1:bbb${2:ccc}}$0', true);\n\n\t\tassert.strictEqual(snippet.placeholders.length, 3);\n\t\tconst [, second] = snippet.placeholders;\n\t\tassert.strictEqual(second.index, 2);\n\n\t\tconst enclosing = snippet.enclosingPlaceholders(second);\n\t\tassert.strictEqual(enclosing.length, 1);\n\t\tassert.strictEqual(enclosing[0].index, 1);\n\n\t\tconst nested = new SnippetParser().parse('ddd$1eee$0', true);\n\t\tsnippet.replace(second, nested.children);\n\n\t\tassert.strictEqual(snippet.toString(), 'aaabbbdddeee');\n\t\tassert.strictEqual(snippet.placeholders.length, 4);\n\t\tassert.strictEqual(snippet.placeholders[0].index, 1);\n\t\tassert.strictEqual(snippet.placeholders[1].index, 1);\n\t\tassert.strictEqual(snippet.placeholders[2].index, 0);\n\t\tassert.strictEqual(snippet.placeholders[3].index, 0);\n\n\t\tconst newEnclosing = snippet.enclosingPlaceholders(snippet.placeholders[1]);\n\t\tassert.ok(newEnclosing[0] === snippet.placeholders[0]);\n\t\tassert.strictEqual(newEnclosing.length, 1);\n\t\tassert.strictEqual(newEnclosing[0].index, 1);\n\t});\n\n\ttest('TextmateSnippet#replace 2/2', function () {\n\t\tconst snippet = new SnippetParser().parse('aaa${1:bbb${2:ccc}}$0', true);\n\n\t\tassert.strictEqual(snippet.placeholders.length, 3);\n\t\tconst [, second] = snippet.placeholders;\n\t\tassert.strictEqual(second.index, 2);\n\n\t\tconst nested = new SnippetParser().parse('dddeee$0', true);\n\t\tsnippet.replace(second, nested.children);\n\n\t\tassert.strictEqual(snippet.toString(), 'aaabbbdddeee');\n\t\tassert.strictEqual(snippet.placeholders.length, 3);\n\t});\n\n\ttest('Snippet order for placeholders, #28185', function () {\n\n\t\tconst _10 = new Placeholder(10);\n\t\tconst _2 = new Placeholder(2);\n\n\t\tassert.strictEqual(Placeholder.compareByIndex(_10, _2), 1);\n\t});\n\n\ttest('Maximum call stack size exceeded, #28983', function () {\n\t\tnew SnippetParser().parse('${1:${foo:${1}}}');\n\t});\n\n\ttest('Snippet can freeze the editor, #30407', function () {\n\n\t\tconst seen = new Set<Marker>();\n\n\t\tseen.clear();\n\t\tnew SnippetParser().parse('class ${1:${TM_FILENAME/(?:\\\\A|_)([A-Za-z0-9]+)(?:\\\\.rb)?/(?2::\\\\u$1)/g}} < ${2:Application}Controller\\n  $3\\nend').walk(marker => {\n\t\t\tassert.ok(!seen.has(marker));\n\t\t\tseen.add(marker);\n\t\t\treturn true;\n\t\t});\n\n\t\tseen.clear();\n\t\tnew SnippetParser().parse('${1:${FOO:abc$1def}}').walk(marker => {\n\t\t\tassert.ok(!seen.has(marker));\n\t\t\tseen.add(marker);\n\t\t\treturn true;\n\t\t});\n\t});\n\n\ttest('Snippets: make parser ignore `${0|choice|}`, #31599', function () {\n\t\tassertTextAndMarker('${0|foo,bar|}', '${0|foo,bar|}', Text);\n\t\tassertTextAndMarker('${1|foo,bar|}', 'foo', Placeholder);\n\t});\n\n\n\ttest('Transform -> FormatString#resolve', function () {\n\n\t\t// shorthand functions\n\t\tassert.strictEqual(new FormatString(1, 'upcase').resolve('foo'), 'FOO');\n\t\tassert.strictEqual(new FormatString(1, 'downcase').resolve('FOO'), 'foo');\n\t\tassert.strictEqual(new FormatString(1, 'capitalize').resolve('bar'), 'Bar');\n\t\tassert.strictEqual(new FormatString(1, 'capitalize').resolve('bar no repeat'), 'Bar no repeat');\n\t\tassert.strictEqual(new FormatString(1, 'pascalcase').resolve('bar-foo'), 'BarFoo');\n\t\tassert.strictEqual(new FormatString(1, 'pascalcase').resolve('bar-42-foo'), 'Bar42Foo');\n\t\tassert.strictEqual(new FormatString(1, 'pascalcase').resolve('snake_AndPascalCase'), 'SnakeAndPascalCase');\n\t\tassert.strictEqual(new FormatString(1, 'pascalcase').resolve('kebab-AndPascalCase'), 'KebabAndPascalCase');\n\t\tassert.strictEqual(new FormatString(1, 'pascalcase').resolve('_justPascalCase'), 'JustPascalCase');\n\t\tassert.strictEqual(new FormatString(1, 'camelcase').resolve('bar-foo'), 'barFoo');\n\t\tassert.strictEqual(new FormatString(1, 'camelcase').resolve('bar-42-foo'), 'bar42Foo');\n\t\tassert.strictEqual(new FormatString(1, 'camelcase').resolve('snake_AndCamelCase'), 'snakeAndCamelCase');\n\t\tassert.strictEqual(new FormatString(1, 'camelcase').resolve('kebab-AndCamelCase'), 'kebabAndCamelCase');\n\t\tassert.strictEqual(new FormatString(1, 'camelcase').resolve('_JustCamelCase'), 'justCamelCase');\n\t\tassert.strictEqual(new FormatString(1, 'notKnown').resolve('input'), 'input');\n\n\t\t// if\n\t\tassert.strictEqual(new FormatString(1, undefined, 'foo', undefined).resolve(undefined), '');\n\t\tassert.strictEqual(new FormatString(1, undefined, 'foo', undefined).resolve(''), '');\n\t\tassert.strictEqual(new FormatString(1, undefined, 'foo', undefined).resolve('bar'), 'foo');\n\n\t\t// else\n\t\tassert.strictEqual(new FormatString(1, undefined, undefined, 'foo').resolve(undefined), 'foo');\n\t\tassert.strictEqual(new FormatString(1, undefined, undefined, 'foo').resolve(''), 'foo');\n\t\tassert.strictEqual(new FormatString(1, undefined, undefined, 'foo').resolve('bar'), 'bar');\n\n\t\t// if-else\n\t\tassert.strictEqual(new FormatString(1, undefined, 'bar', 'foo').resolve(undefined), 'foo');\n\t\tassert.strictEqual(new FormatString(1, undefined, 'bar', 'foo').resolve(''), 'foo');\n\t\tassert.strictEqual(new FormatString(1, undefined, 'bar', 'foo').resolve('baz'), 'bar');\n\t});\n\n\ttest('Snippet variable transformation doesn\\'t work if regex is complicated and snippet body contains \\'$$\\' #55627', function () {\n\t\tconst snippet = new SnippetParser().parse('const fileName = \"${TM_FILENAME/(.*)\\\\..+$/$1/}\"');\n\t\tassert.strictEqual(snippet.toTextmateString(), 'const fileName = \"${TM_FILENAME/(.*)\\\\..+$/${1}/}\"');\n\t});\n\n\ttest('[BUG] HTML attribute suggestions: Snippet session does not have end-position set, #33147', function () {\n\n\t\tconst { placeholders } = new SnippetParser().parse('src=\"$1\"', true);\n\t\tconst [first, second] = placeholders;\n\n\t\tassert.strictEqual(placeholders.length, 2);\n\t\tassert.strictEqual(first.index, 1);\n\t\tassert.strictEqual(second.index, 0);\n\n\t});\n\n\ttest('Snippet optional transforms are not applied correctly when reusing the same variable, #37702', function () {\n\n\t\tconst transform = new Transform();\n\t\ttransform.appendChild(new FormatString(1, 'upcase'));\n\t\ttransform.appendChild(new FormatString(2, 'upcase'));\n\t\ttransform.regexp = /^(.)|-(.)/g;\n\n\t\tassert.strictEqual(transform.resolve('my-file-name'), 'MyFileName');\n\n\t\tconst clone = transform.clone();\n\t\tassert.strictEqual(clone.resolve('my-file-name'), 'MyFileName');\n\t});\n\n\ttest('problem with snippets regex #40570', function () {\n\n\t\tconst snippet = new SnippetParser().parse('${TM_DIRECTORY/.*src[\\\\/](.*)/$1/}');\n\t\tassertMarker(snippet, Variable);\n\t});\n\n\ttest('Variable transformation doesn\\'t work if undefined variables are used in the same snippet #51769', function () {\n\t\tconst transform = new Transform();\n\t\ttransform.appendChild(new Text('bar'));\n\t\ttransform.regexp = new RegExp('foo', 'gi');\n\t\tassert.strictEqual(transform.toTextmateString(), '/foo/bar/ig');\n\t});\n\n\ttest('Snippet parser freeze #53144', function () {\n\t\tconst snippet = new SnippetParser().parse('${1/(void$)|(.+)/${1:?-\\treturn nil;}/}');\n\t\tassertMarker(snippet, Placeholder);\n\t});\n\n\ttest('snippets variable not resolved in JSON proposal #52931', function () {\n\t\tassertTextAndMarker('FOO${1:/bin/bash}', 'FOO/bin/bash', Text, Placeholder);\n\t});\n\n\ttest('Mirroring sequence of nested placeholders not selected properly on backjumping #58736', function () {\n\t\tconst snippet = new SnippetParser().parse('${3:nest1 ${1:nest2 ${2:nest3}}} $3');\n\t\tassert.strictEqual(snippet.children.length, 3);\n\t\tassert.ok(snippet.children[0] instanceof Placeholder);\n\t\tassert.ok(snippet.children[1] instanceof Text);\n\t\tassert.ok(snippet.children[2] instanceof Placeholder);\n\n\t\tfunction assertParent(marker: Marker) {\n\t\t\tmarker.children.forEach(assertParent);\n\t\t\tif (!(marker instanceof Placeholder)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet found = false;\n\t\t\tlet m: Marker = marker;\n\t\t\twhile (m && !found) {\n\t\t\t\tif (m.parent === snippet) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t\tm = m.parent;\n\t\t\t}\n\t\t\tassert.ok(found);\n\t\t}\n\t\tconst [, , clone] = snippet.children;\n\t\tassertParent(clone);\n\t});\n\n\ttest('Backspace can\\'t be escaped in snippet variable transforms #65412', function () {\n\n\t\tconst snippet = new SnippetParser().parse('namespace ${TM_DIRECTORY/[\\\\/]/\\\\\\\\/g};');\n\t\tassertMarker(snippet, Text, Variable, Text);\n\t});\n\n\ttest('Snippet cannot escape closing bracket inside conditional insertion variable replacement #78883', function () {\n\n\t\tconst snippet = new SnippetParser().parse('${TM_DIRECTORY/(.+)/${1:+import { hello \\\\} from world}/}');\n\t\tconst variable = <Variable>snippet.children[0];\n\t\tassert.strictEqual(snippet.children.length, 1);\n\t\tassert.ok(variable instanceof Variable);\n\t\tassert.ok(variable.transform);\n\t\tassert.strictEqual(variable.transform.children.length, 1);\n\t\tassert.ok(variable.transform.children[0] instanceof FormatString);\n\t\tassert.strictEqual((<FormatString>variable.transform.children[0]).ifValue, 'import { hello } from world');\n\t\tassert.strictEqual((<FormatString>variable.transform.children[0]).elseValue, undefined);\n\t});\n\n\ttest('Snippet escape backslashes inside conditional insertion variable replacement #80394', function () {\n\n\t\tconst snippet = new SnippetParser().parse('${CURRENT_YEAR/(.+)/${1:+\\\\\\\\}/}');\n\t\tconst variable = <Variable>snippet.children[0];\n\t\tassert.strictEqual(snippet.children.length, 1);\n\t\tassert.ok(variable instanceof Variable);\n\t\tassert.ok(variable.transform);\n\t\tassert.strictEqual(variable.transform.children.length, 1);\n\t\tassert.ok(variable.transform.children[0] instanceof FormatString);\n\t\tassert.strictEqual((<FormatString>variable.transform.children[0]).ifValue, '\\\\');\n\t\tassert.strictEqual((<FormatString>variable.transform.children[0]).elseValue, undefined);\n\t});\n\n\ttest('Snippet placeholder empty right after expansion #152553', function () {\n\n\t\tconst snippet = new SnippetParser().parse('${1:prog}: ${2:$1.cc} - $2');\n\t\tconst actual = snippet.toString();\n\t\tassert.strictEqual(actual, 'prog: prog.cc - prog.cc');\n\n\t\tconst snippet2 = new SnippetParser().parse('${1:prog}: ${3:${2:$1.cc}.33} - $2 $3');\n\t\tconst actual2 = snippet2.toString();\n\t\tassert.strictEqual(actual2, 'prog: prog.cc.33 - prog.cc prog.cc.33');\n\n\t\t// cyclic references of placeholders\n\t\tconst snippet3 = new SnippetParser().parse('${1:$2.one} <> ${2:$1.two}');\n\t\tconst actual3 = snippet3.toString();\n\t\tassert.strictEqual(actual3, '.two.one.two.one <> .one.two.one.two');\n\t});\n\n\ttest('Snippet choices are incorrectly escaped/applied #180132', function () {\n\t\tassertTextAndMarker('${1|aaa$aaa|}bbb\\\\$bbb', 'aaa$aaabbb$bbb', Placeholder, Text);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
