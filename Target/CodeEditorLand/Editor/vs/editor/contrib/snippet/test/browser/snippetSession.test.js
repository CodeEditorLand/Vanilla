import s from"assert";import{mock as f}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../../base/test/common/utils.js";import"../../../../browser/editorBrowser.js";import{Position as d}from"../../../../common/core/position.js";import{Range as c}from"../../../../common/core/range.js";import{Selection as n}from"../../../../common/core/selection.js";import{ILanguageConfigurationService as E}from"../../../../common/languages/languageConfigurationRegistry.js";import"../../../../common/model/textModel.js";import{SnippetParser as x}from"../../browser/snippetParser.js";import{SnippetSession as i}from"../../browser/snippetSession.js";import{createTestCodeEditor as $}from"../../../../test/browser/testCodeEditor.js";import{TestLanguageConfigurationService as b}from"../../../../test/common/modes/testLanguageConfigurationService.js";import{createTextModel as S}from"../../../../test/common/testTextModel.js";import{ServiceCollection as m}from"../../../../../platform/instantiation/common/serviceCollection.js";import{ILabelService as q}from"../../../../../platform/label/common/label.js";import{IWorkspaceContextService as h}from"../../../../../platform/workspace/common/workspace.js";suite("SnippetSession",function(){let r,e,a;function o(t,...l){for(const p of t.getSelections()){const u=l.shift();s.ok(p.equalsSelection(u),`actual=${p.toString()} <> expected=${u.toString()}`)}s.strictEqual(l.length,0)}setup(function(){a=S(`function foo() {
    console.log(a);
}`),r=new b;const t=new m([q,new class extends f(){}],[E,r],[h,new class extends f(){getWorkspace(){return{id:"workspace-id",folders:[]}}}]);e=$(a,{serviceCollection:t}),e.setSelections([new n(1,1,1,1),new n(2,5,2,5)]),s.strictEqual(a.getEOL(),`
`)}),teardown(function(){a.dispose(),e.dispose()}),g(),test("normalize whitespace",function(){function t(l,p,u){const w=new x().parse(p);i.adjustWhitespace(a,l,!0,w),s.strictEqual(w.toTextmateString(),u)}t(new d(1,1),"foo","foo"),t(new d(1,1),"foo\rbar",`foo
bar`),t(new d(1,1),"foo\rbar",`foo
bar`),t(new d(2,5),"foo\r	bar",`foo
        bar`),t(new d(2,3),"foo\r	bar",`foo
    bar`),t(new d(2,5),`foo\r	bar
foo`,`foo
        bar
    foo`),t(new d(2,5),`a
b\${1|foo,
bar|}`,`a
    b\${1|foo,
bar|}`)}),test("adjust selection (overwrite[Before|After])",function(){let t=i.adjustSelection(a,new n(1,2,1,2),1,0);s.ok(t.equalsRange(new c(1,1,1,2))),t=i.adjustSelection(a,new n(1,2,1,2),1111,0),s.ok(t.equalsRange(new c(1,1,1,2))),t=i.adjustSelection(a,new n(1,2,1,2),0,10),s.ok(t.equalsRange(new c(1,2,1,12))),t=i.adjustSelection(a,new n(1,2,1,2),0,10111),s.ok(t.equalsRange(new c(1,2,1,17)))}),test("text edits & selection",function(){const t=new i(e,"foo${1:bar}foo$0",void 0,r);t.insert(),s.strictEqual(e.getModel().getValue(),`foobarfoofunction foo() {
    foobarfooconsole.log(a);
}`),o(e,new n(1,4,1,7),new n(2,8,2,11)),t.next(),o(e,new n(1,10,1,10),new n(2,14,2,14))}),test("text edit with reversed selection",function(){const t=new i(e,"${1:bar}$0",void 0,r);e.setSelections([new n(2,5,2,5),new n(1,1,1,1)]),t.insert(),s.strictEqual(a.getValue(),`barfunction foo() {
    barconsole.log(a);
}`),o(e,new n(2,5,2,8),new n(1,1,1,4))}),test("snippets, repeated tabstops",function(){const t=new i(e,"${1:abc}foo${1:abc}$0",void 0,r);t.insert(),o(e,new n(1,1,1,4),new n(1,7,1,10),new n(2,5,2,8),new n(2,11,2,14)),t.next(),o(e,new n(1,10,1,10),new n(2,14,2,14))}),test("snippets, just text",function(){new i(e,"foobar",void 0,r).insert(),s.strictEqual(a.getValue(),`foobarfunction foo() {
    foobarconsole.log(a);
}`),o(e,new n(1,7,1,7),new n(2,11,2,11))}),test("snippets, selections and new text with newlines",()=>{const t=new i(e,`foo
	\${1:bar}
$0`,void 0,r);t.insert(),s.strictEqual(e.getModel().getValue(),`foo
    bar
function foo() {
    foo
        bar
    console.log(a);
}`),o(e,new n(2,5,2,8),new n(5,9,5,12)),t.next(),o(e,new n(3,1,3,1),new n(6,5,6,5))}),test("snippets, newline NO whitespace adjust",()=>{e.setSelection(new n(2,5,2,5)),new i(e,`abc
    foo
        bar
$0`,{overwriteBefore:0,overwriteAfter:0,adjustWhitespace:!1,clipboardText:void 0,overtypingCapturer:void 0},r).insert(),s.strictEqual(e.getModel().getValue(),`function foo() {
    abc
    foo
        bar
console.log(a);
}`)}),test("snippets, selections -> next/prev",()=>{const t=new i(e,"f$1oo${2:bar}foo$0",void 0,r);t.insert(),o(e,new n(1,2,1,2),new n(2,6,2,6)),t.next(),o(e,new n(1,4,1,7),new n(2,8,2,11)),t.prev(),o(e,new n(1,2,1,2),new n(2,6,2,6)),t.next(),o(e,new n(1,4,1,7),new n(2,8,2,11)),t.next(),o(e,new n(1,10,1,10),new n(2,14,2,14))}),test("snippets, selections & typing",function(){const t=new i(e,"f${1:oo}_$2_$0",void 0,r);t.insert(),e.trigger("test","type",{text:"X"}),t.next(),e.trigger("test","type",{text:"bar"}),t.prev(),o(e,new n(1,2,1,3),new n(2,6,2,7)),t.next(),o(e,new n(1,4,1,7),new n(2,8,2,11)),t.next(),s.strictEqual(a.getValue(),`fX_bar_function foo() {
    fX_bar_console.log(a);
}`),o(e,new n(1,8,1,8),new n(2,12,2,12))}),test("snippets, insert shorter snippet into non-empty selection",function(){a.setValue("foo_bar_foo"),e.setSelections([new n(1,1,1,4),new n(1,9,1,12)]),new i(e,"x$0",void 0,r).insert(),s.strictEqual(a.getValue(),"x_bar_x"),o(e,new n(1,2,1,2),new n(1,8,1,8))}),test("snippets, insert longer snippet into non-empty selection",function(){a.setValue("foo_bar_foo"),e.setSelections([new n(1,1,1,4),new n(1,9,1,12)]),new i(e,"LONGER$0",void 0,r).insert(),s.strictEqual(a.getValue(),"LONGER_bar_LONGER"),o(e,new n(1,7,1,7),new n(1,18,1,18))}),test("snippets, don't grow final tabstop",function(){a.setValue("foo_zzz_foo"),e.setSelection(new n(1,5,1,8));const t=new i(e,"$1bar$0",void 0,r);t.insert(),o(e,new n(1,5,1,5)),e.trigger("test","type",{text:"foo-"}),t.next(),s.strictEqual(a.getValue(),"foo_foo-bar_foo"),o(e,new n(1,12,1,12)),e.trigger("test","type",{text:"XXX"}),s.strictEqual(a.getValue(),"foo_foo-barXXX_foo"),t.prev(),o(e,new n(1,5,1,9)),t.next(),o(e,new n(1,15,1,15))}),test("snippets, don't merge touching tabstops 1/2",function(){const t=new i(e,"$1$2$3$0",void 0,r);t.insert(),o(e,new n(1,1,1,1),new n(2,5,2,5)),t.next(),o(e,new n(1,1,1,1),new n(2,5,2,5)),t.next(),o(e,new n(1,1,1,1),new n(2,5,2,5)),t.next(),o(e,new n(1,1,1,1),new n(2,5,2,5)),t.prev(),t.prev(),t.prev(),o(e,new n(1,1,1,1),new n(2,5,2,5)),e.trigger("test","type",{text:"111"}),t.next(),e.trigger("test","type",{text:"222"}),t.next(),e.trigger("test","type",{text:"333"}),t.next(),s.strictEqual(a.getValue(),`111222333function foo() {
    111222333console.log(a);
}`),o(e,new n(1,10,1,10),new n(2,14,2,14)),t.prev(),o(e,new n(1,7,1,10),new n(2,11,2,14)),t.prev(),o(e,new n(1,4,1,7),new n(2,8,2,11)),t.prev(),o(e,new n(1,1,1,4),new n(2,5,2,8))}),test("snippets, don't merge touching tabstops 2/2",function(){const t=new i(e,"$1$2$3$0",void 0,r);t.insert(),o(e,new n(1,1,1,1),new n(2,5,2,5)),e.trigger("test","type",{text:"111"}),t.next(),o(e,new n(1,4,1,4),new n(2,8,2,8)),e.trigger("test","type",{text:"222"}),t.next(),o(e,new n(1,7,1,7),new n(2,11,2,11)),e.trigger("test","type",{text:"333"}),t.next(),s.strictEqual(t.isAtLastPlaceholder,!0)}),test("snippets, gracefully move over final tabstop",function(){const t=new i(e,"${1}bar$0",void 0,r);t.insert(),s.strictEqual(t.isAtLastPlaceholder,!1),o(e,new n(1,1,1,1),new n(2,5,2,5)),t.next(),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,4,1,4),new n(2,8,2,8)),t.next(),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,4,1,4),new n(2,8,2,8))}),test("snippets, overwriting nested placeholder",function(){const t=new i(e,'log(${1:"$2"});$0',void 0,r);t.insert(),o(e,new n(1,5,1,7),new n(2,9,2,11)),e.trigger("test","type",{text:"XXX"}),s.strictEqual(a.getValue(),`log(XXX);function foo() {
    log(XXX);console.log(a);
}`),t.next(),s.strictEqual(t.isAtLastPlaceholder,!1),t.next(),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,10,1,10),new n(2,14,2,14))}),test("snippets, selections and snippet ranges",function(){const t=new i(e,"${1:foo}farboo${2:bar}$0",void 0,r);t.insert(),s.strictEqual(a.getValue(),`foofarboobarfunction foo() {
    foofarboobarconsole.log(a);
}`),o(e,new n(1,1,1,4),new n(2,5,2,8)),s.strictEqual(t.isSelectionWithinPlaceholders(),!0),e.setSelections([new n(1,1,1,1)]),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),e.setSelections([new n(1,6,1,6),new n(2,10,2,10)]),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),e.setSelections([new n(1,6,1,6),new n(2,10,2,10),new n(1,1,1,1)]),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),e.setSelections([new n(1,6,1,6),new n(2,10,2,10),new n(2,20,2,21)]),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),t.next(),s.strictEqual(t.isSelectionWithinPlaceholders(),!0),o(e,new n(1,10,1,13),new n(2,14,2,17)),t.next(),s.strictEqual(t.isSelectionWithinPlaceholders(),!0),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,13,1,13),new n(2,17,2,17))}),test("snippets, nested sessions",function(){a.setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"foo${2:bar}foo$0",void 0,r);t.insert(),s.strictEqual(a.getValue(),"foobarfoo"),o(e,new n(1,4,1,7));const l=new i(e,"ba${1:zzzz}$0",void 0,r);l.insert(),s.strictEqual(a.getValue(),"foobazzzzfoo"),o(e,new n(1,6,1,10)),l.next(),s.strictEqual(l.isAtLastPlaceholder,!0),o(e,new n(1,10,1,10)),t.next(),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,13,1,13))}),test("snippets, typing at final tabstop",function(){const t=new i(e,"farboo$0",void 0,r);t.insert(),s.strictEqual(t.isAtLastPlaceholder,!0),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),e.trigger("test","type",{text:"XXX"}),s.strictEqual(t.isSelectionWithinPlaceholders(),!1)}),test("snippets, typing at beginning",function(){e.setSelection(new n(1,2,1,2));const t=new i(e,"farboo$0",void 0,r);t.insert(),e.setSelection(new n(1,2,1,2)),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),s.strictEqual(t.isAtLastPlaceholder,!0),e.trigger("test","type",{text:"XXX"}),s.strictEqual(a.getLineContent(1),"fXXXfarboounction foo() {"),s.strictEqual(t.isSelectionWithinPlaceholders(),!1),t.next(),o(e,new n(1,11,1,11))}),test("snippets, typing with nested placeholder",function(){e.setSelection(new n(1,1,1,1));const t=new i(e,"This ${1:is ${2:nested}}.$0",void 0,r);t.insert(),o(e,new n(1,6,1,15)),t.next(),o(e,new n(1,9,1,15)),e.trigger("test","cut",{}),o(e,new n(1,9,1,9)),e.trigger("test","type",{text:"XXX"}),t.prev(),o(e,new n(1,6,1,12))}),test("snippets, snippet with variables",function(){new i(e,"@line=$TM_LINE_NUMBER$0",void 0,r).insert(),s.strictEqual(a.getValue(),`@line=1function foo() {
    @line=2console.log(a);
}`),o(e,new n(1,8,1,8),new n(2,12,2,12))}),test("snippets, merge",function(){e.setSelection(new n(1,1,1,1));const t=new i(e,"This ${1:is ${2:nested}}.$0",void 0,r);t.insert(),t.next(),o(e,new n(1,9,1,15)),t.merge("really ${1:nested}$0"),o(e,new n(1,16,1,22)),t.next(),o(e,new n(1,22,1,22)),s.strictEqual(t.isAtLastPlaceholder,!1),t.next(),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,23,1,23)),t.prev(),e.trigger("test","type",{text:"AAA"}),t.prev(),o(e,new n(1,16,1,22)),t.prev(),o(e,new n(1,6,1,25))}),test("snippets, transform",function(){e.getModel().setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"${1/foo/bar/}$0",void 0,r);t.insert(),o(e,new n(1,1,1,1)),e.trigger("test","type",{text:"foo"}),t.next(),s.strictEqual(a.getValue(),"bar"),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,4,1,4))}),test("snippets, multi placeholder same index one transform",function(){e.getModel().setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"$1 baz ${1/foo/bar/}$0",void 0,r);t.insert(),o(e,new n(1,1,1,1),new n(1,6,1,6)),e.trigger("test","type",{text:"foo"}),t.next(),s.strictEqual(a.getValue(),"foo baz bar"),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,12,1,12))}),test("snippets, transform example",function(){e.getModel().setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"${1:name} : ${2:type}${3/\\s:=(.*)/${1:+ :=}${1}/};\n$0",void 0,r);t.insert(),o(e,new n(1,1,1,5)),e.trigger("test","type",{text:"clk"}),t.next(),o(e,new n(1,7,1,11)),e.trigger("test","type",{text:"std_logic"}),t.next(),o(e,new n(1,16,1,16)),t.next(),s.strictEqual(a.getValue(),`clk : std_logic;
`),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(2,1,2,1))}),test("snippets, transform with indent",function(){const t=["private readonly ${1} = new Emitter<$2>();","readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event;","$0"].join(`
`),l=["{","	private readonly _prop = new Emitter<string>();","	readonly prop: Event<string> = this._prop.event;","	","}"].join(`
`),p=["{","	","}"].join(`
`);e.getModel().setValue(p),e.getModel().updateOptions({insertSpaces:!1}),e.setSelection(new n(2,2,2,2));const u=new i(e,t,void 0,r);u.insert(),o(e,new n(2,19,2,19),new n(3,11,3,11),new n(3,28,3,28)),e.trigger("test","type",{text:"_prop"}),u.next(),o(e,new n(2,39,2,39),new n(3,23,3,23)),e.trigger("test","type",{text:"string"}),u.next(),s.strictEqual(a.getValue(),l),s.strictEqual(u.isAtLastPlaceholder,!0),o(e,new n(4,2,4,2))}),test("snippets, transform example hit if",function(){e.getModel().setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"${1:name} : ${2:type}${3/\\s:=(.*)/${1:+ :=}${1}/};\n$0",void 0,r);t.insert(),o(e,new n(1,1,1,5)),e.trigger("test","type",{text:"clk"}),t.next(),o(e,new n(1,7,1,11)),e.trigger("test","type",{text:"std_logic"}),t.next(),o(e,new n(1,16,1,16)),e.trigger("test","type",{text:" := '1'"}),t.next(),s.strictEqual(a.getValue(),`clk : std_logic := '1';
`),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(2,1,2,1))}),test("Snippet tab stop selection issue #96545, snippets, transform adjacent to previous placeholder",function(){e.getModel().setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"${1:{}${2:fff}${1/{/}/}",void 0,r);t.insert(),o(e,new n(1,1,1,2),new n(1,5,1,6)),t.next(),s.strictEqual(a.getValue(),"{fff}"),o(e,new n(1,2,1,5)),e.trigger("test","type",{text:"ggg"}),t.next(),s.strictEqual(a.getValue(),"{ggg}"),s.strictEqual(t.isAtLastPlaceholder,!0),o(e,new n(1,6,1,6))}),test("Snippet tab stop selection issue #96545",function(){e.getModel().setValue("");const t=new i(e,"${1:{}${2:fff}${1/[\\{]/}/}$0",void 0,r);t.insert(),s.strictEqual(e.getModel().getValue(),"{fff{"),o(e,new n(1,1,1,2),new n(1,5,1,6)),t.next(),o(e,new n(1,2,1,5))}),test("Snippet placeholder index incorrect after using 2+ snippets in a row that each end with a placeholder, #30769",function(){e.getModel().setValue(""),e.setSelection(new n(1,1,1,1));const t=new i(e,"test ${1:replaceme}",void 0,r);t.insert(),e.trigger("test","type",{text:"1"}),e.trigger("test","type",{text:`
`}),s.strictEqual(e.getModel().getValue(),`test 1
`),t.merge("test ${1:replaceme}"),e.trigger("test","type",{text:"2"}),e.trigger("test","type",{text:`
`}),s.strictEqual(e.getModel().getValue(),`test 1
test 2
`),t.merge("test ${1:replaceme}"),e.trigger("test","type",{text:"3"}),e.trigger("test","type",{text:`
`}),s.strictEqual(e.getModel().getValue(),`test 1
test 2
test 3
`),t.merge("test ${1:replaceme}"),e.trigger("test","type",{text:"4"}),e.trigger("test","type",{text:`
`}),s.strictEqual(e.getModel().getValue(),`test 1
test 2
test 3
test 4
`)}),test("Snippet variable text isn't whitespace normalised, #31124",function(){e.getModel().setValue(["start","		-one","		-two","end"].join(`
`)),e.getModel().updateOptions({insertSpaces:!1}),e.setSelection(new n(2,2,3,7)),new i(e,`<div>
	$TM_SELECTED_TEXT
</div>$0`,void 0,r).insert();let t=["start","	<div>","			-one","			-two","	</div>","end"].join(`
`);s.strictEqual(e.getModel().getValue(),t),e.getModel().setValue(["start","		-one","	-two","end"].join(`
`)),e.getModel().updateOptions({insertSpaces:!1}),e.setSelection(new n(2,2,3,7)),new i(e,`<div>
	$TM_SELECTED_TEXT
</div>$0`,void 0,r).insert(),t=["start","	<div>","			-one","		-two","	</div>","end"].join(`
`),s.strictEqual(e.getModel().getValue(),t)}),test("Selecting text from left to right, and choosing item messes up code, #31199",function(){const t=e.getModel();t.setValue("console.log");let l=i.adjustSelection(t,new n(1,12,1,9),3,0);s.ok(l.equalsSelection(new n(1,9,1,6))),l=i.adjustSelection(t,new n(1,9,1,12),3,0),s.ok(l.equalsSelection(new n(1,9,1,12))),e.setSelections([new n(1,9,1,12)]),new i(e,"far",{overwriteBefore:3,overwriteAfter:0,adjustWhitespace:!0,clipboardText:void 0,overtypingCapturer:void 0},r).insert(),s.strictEqual(t.getValue(),"console.far")}),test("Tabs don't get replaced with spaces in snippet transformations #103818",function(){const t=e.getModel();t.setValue(`
{
  
}`),t.updateOptions({insertSpaces:!0,indentSize:2}),e.setSelections([new n(1,1,1,1),new n(3,6,3,6)]);const l=new i(e,["function animate () {","	var ${1:a} = 12;",`	console.log(\${1/(.*)/
		$1
	/})`,"}"].join(`
`),void 0,r);l.insert(),s.strictEqual(t.getValue(),["function animate () {","  var a = 12;","  console.log(a)","}","{","  function animate () {","    var a = 12;","    console.log(a)","  }","}"].join(`
`)),e.trigger("test","type",{text:"bbb"}),l.next(),s.strictEqual(t.getValue(),["function animate () {","  var bbb = 12;","  console.log(","    bbb","  )","}","{","  function animate () {","    var bbb = 12;","    console.log(","      bbb","    )","  }","}"].join(`
`))}),suite("createEditsAndSnippetsFromEdits",function(){test("empty",function(){const t=i.createEditsAndSnippetsFromEdits(e,[],!0,!0,void 0,void 0,r);s.deepStrictEqual(t.edits,[]),s.deepStrictEqual(t.snippets,[])}),test("basic",function(){e.getModel().setValue('foo("bar")');const t=i.createEditsAndSnippetsFromEdits(e,[{range:new c(1,5,1,9),template:"$1"},{range:new c(1,1,1,1),template:'const ${1:new_const} = "bar"'}],!0,!0,void 0,void 0,r);s.strictEqual(t.edits.length,2),s.deepStrictEqual(t.edits[0].range,new c(1,1,1,1)),s.deepStrictEqual(t.edits[0].text,'const new_const = "bar"'),s.deepStrictEqual(t.edits[1].range,new c(1,5,1,9)),s.deepStrictEqual(t.edits[1].text,"new_const"),s.strictEqual(t.snippets.length,1),s.strictEqual(t.snippets[0].isTrivialSnippet,!1)}),test("with $SELECTION variable",function(){e.getModel().setValue("Some text and a selection"),e.setSelections([new n(1,17,1,26)]);const t=i.createEditsAndSnippetsFromEdits(e,[{range:new c(1,17,1,26),template:"wrapped <$SELECTION>"}],!0,!0,void 0,void 0,r);s.strictEqual(t.edits.length,1),s.deepStrictEqual(t.edits[0].range,new c(1,17,1,26)),s.deepStrictEqual(t.edits[0].text,"wrapped <selection>"),s.strictEqual(t.snippets.length,1),s.strictEqual(t.snippets[0].isTrivialSnippet,!0)})})});
