{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/parameterHints/test/browser/parameterHintsModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { promiseWithResolvers } from '../../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Handler } from '../../../../common/editorCommon.js';\nimport { LanguageFeatureRegistry } from '../../../../common/languageFeatureRegistry.js';\nimport * as languages from '../../../../common/languages.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { ParameterHintsModel } from '../../browser/parameterHintsModel.js';\nimport { createTestCodeEditor } from '../../../../test/browser/testCodeEditor.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { InMemoryStorageService, IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\n\nconst mockFile = URI.parse('test:somefile.ttt');\nconst mockFileSelector = { scheme: 'test' };\n\n\nconst emptySigHelp: languages.SignatureHelp = {\n\tsignatures: [{\n\t\tlabel: 'none',\n\t\tparameters: []\n\t}],\n\tactiveParameter: 0,\n\tactiveSignature: 0\n};\n\nconst emptySigHelpResult: languages.SignatureHelpResult = {\n\tvalue: emptySigHelp,\n\tdispose: () => { }\n};\n\nsuite('ParameterHintsModel', () => {\n\tconst disposables = new DisposableStore();\n\tlet registry: LanguageFeatureRegistry<languages.SignatureHelpProvider>;\n\n\tsetup(() => {\n\t\tdisposables.clear();\n\t\tregistry = new LanguageFeatureRegistry<languages.SignatureHelpProvider>();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createMockEditor(fileContents: string) {\n\t\tconst textModel = disposables.add(createTextModel(fileContents, undefined, undefined, mockFile));\n\t\tconst editor = disposables.add(createTestCodeEditor(textModel, {\n\t\t\tserviceCollection: new ServiceCollection(\n\t\t\t\t[ITelemetryService, NullTelemetryService],\n\t\t\t\t[IStorageService, disposables.add(new InMemoryStorageService())]\n\t\t\t)\n\t\t}));\n\t\treturn editor;\n\t}\n\n\tfunction getNextHint(model: ParameterHintsModel) {\n\t\treturn new Promise<languages.SignatureHelpResult | undefined>(resolve => {\n\t\t\tconst sub = disposables.add(model.onChangedHints(e => {\n\t\t\t\tsub.dispose();\n\t\t\t\treturn resolve(e ? { value: e, dispose: () => { } } : undefined);\n\t\t\t}));\n\t\t});\n\t}\n\n\ttest('Provider should get trigger character on type', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext) {\n\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\tdone();\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\tawait donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should be retriggered if already active', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\t++invokeCount;\n\t\t\t\ttry {\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\n\t\t\t\t\t\t// Retrigger\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: triggerChar }), 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 2);\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, true);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, emptySigHelp);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\tawait donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should not be retriggered if previous help is canceled first', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tconst hintModel = disposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\n\t\t\t\t\t\t// Cancel and retrigger\n\t\t\t\t\t\thintModel.cancel();\n\t\t\t\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 2);\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, true);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should get last trigger character when triggered multiple times and only be invoked once', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = ['a', 'b', 'c'];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext) {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'c');\n\n\t\t\t\t\t// Give some time to allow for later triggers\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 1);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}, 50);\n\t\t\t\t\treturn undefined;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'a' });\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'b' });\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'c' });\n\n\t\t\tawait donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should be retriggered if already active', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tlet invokeCount = 0;\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = ['a', 'b'];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'a');\n\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: 'b' }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.ok(context.isRetrigger);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'b');\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'a' });\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('Should cancel existing request when new request comes in', async () => {\n\n\t\tconst editor = createMockEditor('abc def');\n\t\tconst hintsModel = disposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tlet didRequestCancellationOf = -1;\n\t\tlet invokeCount = 0;\n\t\tconst longRunningProvider = new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, token: CancellationToken): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\tconst count = invokeCount++;\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => { didRequestCancellationOf = count; }));\n\n\t\t\t\t\t// retrigger on first request\n\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\thintsModel.trigger({ triggerKind: languages.SignatureHelpTriggerKind.Invoke }, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Promise<languages.SignatureHelpResult>(resolve => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\t\t\tlabel: '' + count,\n\t\t\t\t\t\t\t\t\t\tparameters: []\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\t\t\tactiveSignature: 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(registry.register(mockFileSelector, longRunningProvider));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\n\t\t\thintsModel.trigger({ triggerKind: languages.SignatureHelpTriggerKind.Invoke }, 0);\n\t\t\tassert.strictEqual(-1, didRequestCancellationOf);\n\n\t\t\treturn new Promise<void>((resolve, reject) =>\n\t\t\t\tdisposables.add(hintsModel.onChangedHints(newParamterHints => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tassert.strictEqual(0, didRequestCancellationOf);\n\t\t\t\t\t\tassert.strictEqual('1', newParamterHints!.signatures[0].label);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t})));\n\t\t});\n\t});\n\n\ttest('Provider should be retriggered by retrigger character', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst triggerChar = 'a';\n\t\tconst retriggerChar = 'b';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [retriggerChar];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerChar }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.ok(context.isRetrigger);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, retriggerChar);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\t// This should not trigger anything\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: retriggerChar });\n\n\t\t\t// But a trigger character should\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('should use first result from multiple providers', async () => {\n\t\tconst triggerChar = 'a';\n\t\tconst firstProviderId = 'firstProvider';\n\t\tconst secondProviderId = 'secondProvider';\n\t\tconst paramterLabel = 'parameter';\n\n\t\tconst editor = createMockEditor('');\n\t\tconst model = disposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): Promise<languages.SignatureHelpResult | undefined> {\n\t\t\t\ttry {\n\t\t\t\t\tif (!context.isRetrigger) {\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: triggerChar }), 50);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\t\tactiveSignature: 0,\n\t\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\t\tlabel: firstProviderId,\n\t\t\t\t\t\t\t\t\tparameters: [\n\t\t\t\t\t\t\t\t\t\t{ label: paramterLabel }\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): Promise<languages.SignatureHelpResult | undefined> {\n\t\t\t\tif (context.isRetrigger) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\tactiveSignature: context.activeSignatureHelp ? context.activeSignatureHelp.activeSignature + 1 : 0,\n\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\tlabel: secondProviderId,\n\t\t\t\t\t\t\t\tparameters: context.activeSignatureHelp ? context.activeSignatureHelp.signatures[0].parameters : []\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\n\t\t\tconst firstHint = (await getNextHint(model))!.value;\n\t\t\tassert.strictEqual(firstHint.signatures[0].label, firstProviderId);\n\t\t\tassert.strictEqual(firstHint.activeSignature, 0);\n\t\t\tassert.strictEqual(firstHint.signatures[0].parameters[0].label, paramterLabel);\n\n\t\t\tconst secondHint = (await getNextHint(model))!.value;\n\t\t\tassert.strictEqual(secondHint.signatures[0].label, secondProviderId);\n\t\t\tassert.strictEqual(secondHint.activeSignature, 1);\n\t\t\tassert.strictEqual(secondHint.signatures[0].parameters[0].label, paramterLabel);\n\t\t});\n\t});\n\n\ttest('Quick typing should use the first trigger character', async () => {\n\t\tconst editor = createMockEditor('');\n\t\tconst model = disposables.add(new ParameterHintsModel(editor, registry, 50));\n\n\t\tconst triggerCharacter = 'a';\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerCharacter];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerCharacter);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerCharacter });\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'x' });\n\n\t\t\tawait getNextHint(model);\n\t\t});\n\t});\n\n\ttest('Retrigger while a pending resolve is still going on should preserve last active signature #96702', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tconst editor = createMockEditor('');\n\t\tconst model = disposables.add(new ParameterHintsModel(editor, registry, 50));\n\n\t\tconst triggerCharacter = 'a';\n\t\tconst retriggerCharacter = 'b';\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerCharacter];\n\t\t\tsignatureHelpRetriggerCharacters = [retriggerCharacter];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerCharacter);\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerCharacter }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\t// Trigger again while we wait for resolve to take place\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerCharacter }), 50);\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\t\t} else if (invokeCount === 3) {\n\t\t\t\t\t\t// Make sure that in a retrigger during a pending resolve, we still have the old active signature.\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, emptySigHelp);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tdone(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerCharacter });\n\n\t\t\tawait getNextHint(model);\n\t\t\tawait getNextHint(model);\n\n\t\t\tawait donePromise;\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
