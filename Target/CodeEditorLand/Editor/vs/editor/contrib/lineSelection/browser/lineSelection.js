import{KeyCode as t,KeyMod as i}from"../../../../base/common/keyCodes.js";import*as n from"../../../../nls.js";import{KeybindingWeight as s}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{EditorAction as c,registerEditorAction as d}from"../../../browser/editorExtensions.js";import{CursorMoveCommands as p}from"../../../common/cursor/cursorMoveCommands.js";import{CursorChangeReason as l}from"../../../common/cursorEvents.js";import{EditorContextKeys as m}from"../../../common/editorContextKeys.js";class a extends c{constructor(){super({id:"expandLineSelection",label:n.localize("expandLineSelection","Expand Line Selection"),alias:"Expand Line Selection",precondition:void 0,kbOpts:{weight:s.EditorCore,kbExpr:m.textInputFocus,primary:i.CtrlCmd|t.KeyL}})}run(C,r,o){if(o=o||{},!r.hasModel())return;const e=r._getViewModel();e.model.pushStackElement(),e.setCursorStates(o.source,l.Explicit,p.expandLineSelection(e,e.getCursorStates())),e.revealAllCursors(o.source,!0)}}d(a);export{a as ExpandLineSelectionAction};
