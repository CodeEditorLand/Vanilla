import{KeyCode as t,KeyMod as i}from"../../../../../vs/base/common/keyCodes.js";import"../../../../../vs/editor/browser/editorBrowser.js";import{EditorAction as n,registerEditorAction as s}from"../../../../../vs/editor/browser/editorExtensions.js";import{CursorMoveCommands as c}from"../../../../../vs/editor/common/cursor/cursorMoveCommands.js";import{CursorChangeReason as d}from"../../../../../vs/editor/common/cursorEvents.js";import{EditorContextKeys as l}from"../../../../../vs/editor/common/editorContextKeys.js";import*as p from"../../../../../vs/nls.js";import{KeybindingWeight as m}from"../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";class a extends n{constructor(){super({id:"expandLineSelection",label:p.localize("expandLineSelection","Expand Line Selection"),alias:"Expand Line Selection",precondition:void 0,kbOpts:{weight:m.EditorCore,kbExpr:l.textInputFocus,primary:i.CtrlCmd|t.KeyL}})}run(C,r,o){if(o=o||{},!r.hasModel())return;const e=r._getViewModel();e.model.pushStackElement(),e.setCursorStates(o.source,d.Explicit,c.expandLineSelection(e,e.getCursorStates())),e.revealAllCursors(o.source,!0)}}s(a);export{a as ExpandLineSelectionAction};
