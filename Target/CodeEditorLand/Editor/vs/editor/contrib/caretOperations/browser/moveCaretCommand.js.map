{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/caretOperations/browser/moveCaretCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../../../common/editorCommon.js';\nimport { ITextModel } from '../../../common/model.js';\n\nexport class MoveCaretCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _isMovingLeft: boolean;\n\n\tconstructor(selection: Selection, isMovingLeft: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingLeft = isMovingLeft;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tif (this._selection.startLineNumber !== this._selection.endLineNumber || this._selection.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tconst lineNumber = this._selection.startLineNumber;\n\t\tconst startColumn = this._selection.startColumn;\n\t\tconst endColumn = this._selection.endColumn;\n\t\tif (this._isMovingLeft && startColumn === 1) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._isMovingLeft && endColumn === model.getLineMaxColumn(lineNumber)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._isMovingLeft) {\n\t\t\tconst rangeBefore = new Range(lineNumber, startColumn - 1, lineNumber, startColumn);\n\t\t\tconst charBefore = model.getValueInRange(rangeBefore);\n\t\t\tbuilder.addEditOperation(rangeBefore, null);\n\t\t\tbuilder.addEditOperation(new Range(lineNumber, endColumn, lineNumber, endColumn), charBefore);\n\t\t} else {\n\t\t\tconst rangeAfter = new Range(lineNumber, endColumn, lineNumber, endColumn + 1);\n\t\t\tconst charAfter = model.getValueInRange(rangeAfter);\n\t\t\tbuilder.addEditOperation(rangeAfter, null);\n\t\t\tbuilder.addEditOperation(new Range(lineNumber, startColumn, lineNumber, startColumn), charAfter);\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tif (this._isMovingLeft) {\n\t\t\treturn new Selection(this._selection.startLineNumber, this._selection.startColumn - 1, this._selection.endLineNumber, this._selection.endColumn - 1);\n\t\t} else {\n\t\t\treturn new Selection(this._selection.startLineNumber, this._selection.startColumn + 1, this._selection.endLineNumber, this._selection.endColumn + 1);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,UAAU,0BAA0B,6BAA6B;AAC1E,SAAS,kBAAkB;AAEpB,MAAM,iBAAqC;AAAA,EAVlD,OAUkD;AAAA;AAAA;AAAA,EAEhC;AAAA,EACA;AAAA,EAEjB,YAAY,WAAsB,cAAuB;AACxD,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAAA,EACtB;AAAA,EAEO,kBAAkB,OAAmB,SAAsC;AACjF,QAAI,KAAK,WAAW,oBAAoB,KAAK,WAAW,iBAAiB,KAAK,WAAW,QAAQ,GAAG;AACnG;AAAA,IACD;AACA,UAAM,aAAa,KAAK,WAAW;AACnC,UAAM,cAAc,KAAK,WAAW;AACpC,UAAM,YAAY,KAAK,WAAW;AAClC,QAAI,KAAK,iBAAiB,gBAAgB,GAAG;AAC5C;AAAA,IACD;AACA,QAAI,CAAC,KAAK,iBAAiB,cAAc,MAAM,iBAAiB,UAAU,GAAG;AAC5E;AAAA,IACD;AAEA,QAAI,KAAK,eAAe;AACvB,YAAM,cAAc,IAAI,MAAM,YAAY,cAAc,GAAG,YAAY,WAAW;AAClF,YAAM,aAAa,MAAM,gBAAgB,WAAW;AACpD,cAAQ,iBAAiB,aAAa,IAAI;AAC1C,cAAQ,iBAAiB,IAAI,MAAM,YAAY,WAAW,YAAY,SAAS,GAAG,UAAU;AAAA,IAC7F,OAAO;AACN,YAAM,aAAa,IAAI,MAAM,YAAY,WAAW,YAAY,YAAY,CAAC;AAC7E,YAAM,YAAY,MAAM,gBAAgB,UAAU;AAClD,cAAQ,iBAAiB,YAAY,IAAI;AACzC,cAAQ,iBAAiB,IAAI,MAAM,YAAY,aAAa,YAAY,WAAW,GAAG,SAAS;AAAA,IAChG;AAAA,EACD;AAAA,EAEO,mBAAmB,OAAmB,QAA6C;AACzF,QAAI,KAAK,eAAe;AACvB,aAAO,IAAI,UAAU,KAAK,WAAW,iBAAiB,KAAK,WAAW,cAAc,GAAG,KAAK,WAAW,eAAe,KAAK,WAAW,YAAY,CAAC;AAAA,IACpJ,OAAO;AACN,aAAO,IAAI,UAAU,KAAK,WAAW,iBAAiB,KAAK,WAAW,cAAc,GAAG,KAAK,WAAW,eAAe,KAAK,WAAW,YAAY,CAAC;AAAA,IACpJ;AAAA,EACD;AACD;",
  "names": []
}
