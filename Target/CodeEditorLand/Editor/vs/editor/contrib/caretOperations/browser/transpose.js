import{KeyCode as b,KeyMod as h}from"../../../../base/common/keyCodes.js";import*as P from"../../../../nls.js";import{KeybindingWeight as y}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{EditorAction as E,registerEditorAction as I}from"../../../browser/editorExtensions.js";import{ReplaceCommand as L}from"../../../common/commands/replaceCommand.js";import{Range as m}from"../../../common/core/range.js";import{MoveOperations as c}from"../../../common/cursor/cursorMoveOperations.js";import{EditorContextKeys as d}from"../../../common/editorContextKeys.js";class x extends E{constructor(){super({id:"editor.action.transposeLetters",label:P.localize("transposeLetters.label","Transpose Letters"),alias:"Transpose Letters",precondition:d.writable,kbOpts:{kbExpr:d.textInputFocus,primary:0,mac:{primary:h.WinCtrl|b.KeyT},weight:y.EditorContrib}})}run(A,o){if(!o.hasModel())return;const t=o.getModel(),n=[],u=o.getSelections();for(const e of u){if(!e.isEmpty())continue;const a=e.startLineNumber,s=e.startColumn,l=t.getLineMaxColumn(a);if(a===1&&(s===1||s===2&&l===2))continue;const i=s===l?e.getPosition():c.rightPosition(t,e.getPosition().lineNumber,e.getPosition().column),r=c.leftPosition(t,i),p=c.leftPosition(t,r),f=t.getValueInRange(m.fromPositions(p,r)),g=t.getValueInRange(m.fromPositions(r,i)),C=m.fromPositions(p,i);n.push(new L(C,g+f))}n.length>0&&(o.pushUndoStop(),o.executeCommands(this.id,n),o.pushUndoStop())}}I(x);
