{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/gpu/browser/gpuActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport type { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction, type ServicesAccessor } from '../../../browser/editorExtensions.js';\nimport { ensureNonNullable } from '../../../browser/gpu/gpuUtils.js';\nimport { GlyphRasterizer } from '../../../browser/gpu/raster/glyphRasterizer.js';\nimport { ViewLinesGpu } from '../../../browser/viewParts/linesGpu/viewLinesGpu.js';\n\nclass DebugEditorGpuRendererAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.debugEditorGpuRenderer',\n\t\t\tlabel: localize('gpuDebug.label', \"Developer: Debug Editor GPU Renderer\"),\n\t\t\talias: 'Developer: Debug Editor GPU Renderer',\n\t\t\t// TODO: Why doesn't `ContextKeyExpr.equals('config:editor.experimentalGpuAcceleration', 'on')` work?\n\t\t\tprecondition: ContextKeyExpr.true(),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst choice = await quickInputService.pick([\n\t\t\t{\n\t\t\t\tlabel: localize('logTextureAtlasStats.label', \"Log Texture Atlas Stats\"),\n\t\t\t\tid: 'logTextureAtlasStats',\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('saveTextureAtlas.label', \"Save Texture Atlas\"),\n\t\t\t\tid: 'saveTextureAtlas',\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('drawGlyph.label', \"Draw Glyph\"),\n\t\t\t\tid: 'drawGlyph',\n\t\t\t},\n\t\t], { canPickMany: false });\n\t\tif (!choice) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (choice.id) {\n\t\t\tcase 'logTextureAtlasStats':\n\t\t\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t\t\tconst atlas = ViewLinesGpu.atlas;\n\t\t\t\t\tif (!ViewLinesGpu.atlas) {\n\t\t\t\t\t\tlogService.error('No texture atlas found');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst stats = atlas.getStats();\n\t\t\t\t\tlogService.info(['Texture atlas stats', ...stats].join('\\n\\n'));\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'saveTextureAtlas':\n\t\t\t\tinstantiationService.invokeFunction(async accessor => {\n\t\t\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\t\t\tif (folders.length > 0) {\n\t\t\t\t\t\tconst atlas = ViewLinesGpu.atlas;\n\t\t\t\t\t\tconst promises = [];\n\t\t\t\t\t\tfor (const [layerIndex, page] of atlas.pages.entries()) {\n\t\t\t\t\t\t\tpromises.push(...[\n\t\t\t\t\t\t\t\tfileService.writeFile(\n\t\t\t\t\t\t\t\t\tURI.joinPath(folders[0].uri, `textureAtlasPage${layerIndex}_actual.png`),\n\t\t\t\t\t\t\t\t\tVSBuffer.wrap(new Uint8Array(await (await page.source.convertToBlob()).arrayBuffer()))\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tfileService.writeFile(\n\t\t\t\t\t\t\t\t\tURI.joinPath(folders[0].uri, `textureAtlasPage${layerIndex}_usage.png`),\n\t\t\t\t\t\t\t\t\tVSBuffer.wrap(new Uint8Array(await (await page.getUsagePreview()).arrayBuffer()))\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'drawGlyph':\n\t\t\t\tinstantiationService.invokeFunction(async accessor => {\n\t\t\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\n\t\t\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\t\t\tif (folders.length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst atlas = ViewLinesGpu.atlas;\n\t\t\t\t\tif (!ViewLinesGpu.atlas) {\n\t\t\t\t\t\tlogService.error('No texture atlas found');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fontFamily = configurationService.getValue<string>('editor.fontFamily');\n\t\t\t\t\tconst fontSize = configurationService.getValue<number>('editor.fontSize');\n\t\t\t\t\tconst rasterizer = new GlyphRasterizer(fontSize, fontFamily);\n\t\t\t\t\tlet chars = await quickInputService.input({\n\t\t\t\t\t\tprompt: 'Enter a character to draw (prefix with 0x for code point))'\n\t\t\t\t\t});\n\t\t\t\t\tif (!chars) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst codePoint = chars.match(/0x(?<codePoint>[0-9a-f]+)/i)?.groups?.codePoint;\n\t\t\t\t\tif (codePoint !== undefined) {\n\t\t\t\t\t\tchars = String.fromCodePoint(parseInt(codePoint, 16));\n\t\t\t\t\t}\n\t\t\t\t\tconst metadata = 0;\n\t\t\t\t\tconst rasterizedGlyph = atlas.getGlyph(rasterizer, chars, metadata);\n\t\t\t\t\tif (!rasterizedGlyph) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst imageData = atlas.pages[rasterizedGlyph.pageIndex].source.getContext('2d')?.getImageData(\n\t\t\t\t\t\trasterizedGlyph.x,\n\t\t\t\t\t\trasterizedGlyph.y,\n\t\t\t\t\t\trasterizedGlyph.w,\n\t\t\t\t\t\trasterizedGlyph.h\n\t\t\t\t\t);\n\t\t\t\t\tif (!imageData) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst canvas = new OffscreenCanvas(imageData.width, imageData.height);\n\t\t\t\t\tconst ctx = ensureNonNullable(canvas.getContext('2d'));\n\t\t\t\t\tctx.putImageData(imageData, 0, 0);\n\t\t\t\t\tconst blob = await canvas.convertToBlob({ type: 'image/png' });\n\t\t\t\t\tconst resource = URI.joinPath(folders[0].uri, `glyph_${chars}_${metadata}_${fontSize}px_${fontFamily.replaceAll(/[,\\\\\\/\\.'\\s]/g, '_')}.png`);\n\t\t\t\t\tawait fileService.writeFile(resource, VSBuffer.wrap(new Uint8Array(await blob.arrayBuffer())));\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nregisterEditorAction(DebugEditorGpuRendererAction);\n"],
  "mappings": "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",
  "names": ["accessor", "quickInputService"]
}
