{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/gpu/browser/gpuActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n} from \"../../../browser/editorExtensions.js\";\nimport { ensureNonNullable } from \"../../../browser/gpu/gpuUtils.js\";\nimport { GlyphRasterizer } from \"../../../browser/gpu/raster/glyphRasterizer.js\";\nimport { ViewGpuContext } from \"../../../browser/gpu/viewGpuContext.js\";\n\nclass DebugEditorGpuRendererAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.debugEditorGpuRenderer\",\n\t\t\tlabel: localize(\n\t\t\t\t\"gpuDebug.label\",\n\t\t\t\t\"Developer: Debug Editor GPU Renderer\",\n\t\t\t),\n\t\t\talias: \"Developer: Debug Editor GPU Renderer\",\n\t\t\t// TODO: Why doesn't `ContextKeyExpr.equals('config:editor.experimentalGpuAcceleration', 'on')` work?\n\t\t\tprecondition: ContextKeyExpr.true(),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst choice = await quickInputService.pick(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"logTextureAtlasStats.label\",\n\t\t\t\t\t\t\"Log Texture Atlas Stats\",\n\t\t\t\t\t),\n\t\t\t\t\tid: \"logTextureAtlasStats\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"saveTextureAtlas.label\",\n\t\t\t\t\t\t\"Save Texture Atlas\",\n\t\t\t\t\t),\n\t\t\t\t\tid: \"saveTextureAtlas\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\"drawGlyph.label\", \"Draw Glyph\"),\n\t\t\t\t\tid: \"drawGlyph\",\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ canPickMany: false },\n\t\t);\n\t\tif (!choice) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (choice.id) {\n\t\t\tcase \"logTextureAtlasStats\":\n\t\t\t\tinstantiationService.invokeFunction((accessor) => {\n\t\t\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t\t\tconst atlas = ViewGpuContext.atlas;\n\t\t\t\t\tif (!ViewGpuContext.atlas) {\n\t\t\t\t\t\tlogService.error(\"No texture atlas found\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst stats = atlas.getStats();\n\t\t\t\t\tlogService.info(\n\t\t\t\t\t\t[\"Texture atlas stats\", ...stats].join(\"\\n\\n\"),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"saveTextureAtlas\":\n\t\t\t\tinstantiationService.invokeFunction(async (accessor) => {\n\t\t\t\t\tconst workspaceContextService = accessor.get(\n\t\t\t\t\t\tIWorkspaceContextService,\n\t\t\t\t\t);\n\t\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\t\tconst folders =\n\t\t\t\t\t\tworkspaceContextService.getWorkspace().folders;\n\t\t\t\t\tif (folders.length > 0) {\n\t\t\t\t\t\tconst atlas = ViewGpuContext.atlas;\n\t\t\t\t\t\tconst promises = [];\n\t\t\t\t\t\tfor (const [\n\t\t\t\t\t\t\tlayerIndex,\n\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t] of atlas.pages.entries()) {\n\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t...[\n\t\t\t\t\t\t\t\t\tfileService.writeFile(\n\t\t\t\t\t\t\t\t\t\tURI.joinPath(\n\t\t\t\t\t\t\t\t\t\t\tfolders[0].uri,\n\t\t\t\t\t\t\t\t\t\t\t`textureAtlasPage${layerIndex}_actual.png`,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tVSBuffer.wrap(\n\t\t\t\t\t\t\t\t\t\t\tnew Uint8Array(\n\t\t\t\t\t\t\t\t\t\t\t\tawait (\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait page.source.convertToBlob()\n\t\t\t\t\t\t\t\t\t\t\t\t).arrayBuffer(),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfileService.writeFile(\n\t\t\t\t\t\t\t\t\t\tURI.joinPath(\n\t\t\t\t\t\t\t\t\t\t\tfolders[0].uri,\n\t\t\t\t\t\t\t\t\t\t\t`textureAtlasPage${layerIndex}_usage.png`,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tVSBuffer.wrap(\n\t\t\t\t\t\t\t\t\t\t\tnew Uint8Array(\n\t\t\t\t\t\t\t\t\t\t\t\tawait (\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait page.getUsagePreview()\n\t\t\t\t\t\t\t\t\t\t\t\t).arrayBuffer(),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"drawGlyph\":\n\t\t\t\tinstantiationService.invokeFunction(async (accessor) => {\n\t\t\t\t\tconst configurationService = accessor.get(\n\t\t\t\t\t\tIConfigurationService,\n\t\t\t\t\t);\n\t\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\t\t\tconst workspaceContextService = accessor.get(\n\t\t\t\t\t\tIWorkspaceContextService,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst folders =\n\t\t\t\t\t\tworkspaceContextService.getWorkspace().folders;\n\t\t\t\t\tif (folders.length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst atlas = ViewGpuContext.atlas;\n\t\t\t\t\tconst fontFamily =\n\t\t\t\t\t\tconfigurationService.getValue<string>(\n\t\t\t\t\t\t\t\"editor.fontFamily\",\n\t\t\t\t\t\t);\n\t\t\t\t\tconst fontSize =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\t\"editor.fontSize\",\n\t\t\t\t\t\t);\n\t\t\t\t\tconst rasterizer = new GlyphRasterizer(\n\t\t\t\t\t\tfontSize,\n\t\t\t\t\t\tfontFamily,\n\t\t\t\t\t);\n\t\t\t\t\tlet chars = await quickInputService.input({\n\t\t\t\t\t\tprompt: \"Enter a character to draw (prefix with 0x for code point))\",\n\t\t\t\t\t});\n\t\t\t\t\tif (!chars) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst codePoint = chars.match(/0x(?<codePoint>[0-9a-f]+)/i)\n\t\t\t\t\t\t?.groups?.codePoint;\n\t\t\t\t\tif (codePoint !== undefined) {\n\t\t\t\t\t\tchars = String.fromCodePoint(\n\t\t\t\t\t\t\tNumber.parseInt(codePoint, 16),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst metadata = 0;\n\t\t\t\t\tconst rasterizedGlyph = atlas.getGlyph(\n\t\t\t\t\t\trasterizer,\n\t\t\t\t\t\tchars,\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t);\n\t\t\t\t\tif (!rasterizedGlyph) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst imageData = atlas.pages[\n\t\t\t\t\t\trasterizedGlyph.pageIndex\n\t\t\t\t\t].source\n\t\t\t\t\t\t.getContext(\"2d\")\n\t\t\t\t\t\t?.getImageData(\n\t\t\t\t\t\t\trasterizedGlyph.x,\n\t\t\t\t\t\t\trasterizedGlyph.y,\n\t\t\t\t\t\t\trasterizedGlyph.w,\n\t\t\t\t\t\t\trasterizedGlyph.h,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (!imageData) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst canvas = new OffscreenCanvas(\n\t\t\t\t\t\timageData.width,\n\t\t\t\t\t\timageData.height,\n\t\t\t\t\t);\n\t\t\t\t\tconst ctx = ensureNonNullable(canvas.getContext(\"2d\"));\n\t\t\t\t\tctx.putImageData(imageData, 0, 0);\n\t\t\t\t\tconst blob = await canvas.convertToBlob({\n\t\t\t\t\t\ttype: \"image/png\",\n\t\t\t\t\t});\n\t\t\t\t\tconst resource = URI.joinPath(\n\t\t\t\t\t\tfolders[0].uri,\n\t\t\t\t\t\t`glyph_${chars}_${metadata}_${fontSize}px_${fontFamily.replaceAll(/[,\\\\/.'\\s]/g, \"_\")}.png`,\n\t\t\t\t\t);\n\t\t\t\t\tawait fileService.writeFile(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tVSBuffer.wrap(new Uint8Array(await blob.arrayBuffer())),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nregisterEditorAction(DebugEditorGpuRendererAction);\n"],
  "mappings": "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",
  "names": ["accessor", "quickInputService"]
}
