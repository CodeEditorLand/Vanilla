import{VSBuffer as d}from"../../../../base/common/buffer.js";import{URI as m}from"../../../../base/common/uri.js";import{localize as u}from"../../../../nls.js";import{IConfigurationService as D}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as E}from"../../../../platform/contextkey/common/contextkey.js";import{IFileService as A}from"../../../../platform/files/common/files.js";import{IInstantiationService as F}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as I}from"../../../../platform/log/common/log.js";import{IQuickInputService as k}from"../../../../platform/quickinput/common/quickInput.js";import{IWorkspaceContextService as P}from"../../../../platform/workspace/common/workspace.js";import{EditorAction as B,registerEditorAction as U}from"../../../browser/editorExtensions.js";import{ensureNonNullable as _}from"../../../browser/gpu/gpuUtils.js";import{GlyphRasterizer as z}from"../../../browser/gpu/raster/glyphRasterizer.js";import{ViewLinesGpu as c}from"../../../browser/viewParts/linesGpu/viewLinesGpu.js";class R extends B{constructor(){super({id:"editor.action.debugEditorGpuRenderer",label:u("gpuDebug.label","Developer: Debug Editor GPU Renderer"),alias:"Developer: Debug Editor GPU Renderer",precondition:E.true()})}async run(w,j){const p=w.get(F),v=await w.get(k).pick([{label:u("logTextureAtlasStats.label","Log Texture Atlas Stats"),id:"logTextureAtlasStats"},{label:u("saveTextureAtlas.label","Save Texture Atlas"),id:"saveTextureAtlas"},{label:u("drawGlyph.label","Draw Glyph"),id:"drawGlyph"}],{canPickMany:!1});if(v)switch(v.id){case"logTextureAtlasStats":p.invokeFunction(e=>{const t=e.get(I),o=c.atlas;if(!c.atlas){t.error("No texture atlas found");return}const r=o.getStats();t.info(["Texture atlas stats",...r].join(`

`))});break;case"saveTextureAtlas":p.invokeFunction(async e=>{const t=e.get(P),o=e.get(A),r=t.getWorkspace().folders;if(r.length>0){const g=c.atlas,f=[];for(const[i,n]of g.pages.entries())f.push(o.writeFile(m.joinPath(r[0].uri,`textureAtlasPage${i}_actual.png`),d.wrap(new Uint8Array(await(await n.source.convertToBlob()).arrayBuffer()))),o.writeFile(m.joinPath(r[0].uri,`textureAtlasPage${i}_usage.png`),d.wrap(new Uint8Array(await(await n.getUsagePreview()).arrayBuffer()))));await Promise.all(f)}});break;case"drawGlyph":p.invokeFunction(async e=>{const t=e.get(D),o=e.get(A),r=e.get(I),g=e.get(k),i=e.get(P).getWorkspace().folders;if(i.length===0)return;const n=c.atlas;if(!c.atlas){r.error("No texture atlas found");return}const x=t.getValue("editor.fontFamily"),S=t.getValue("editor.fontSize"),C=new z(S,x);let s=await g.input({prompt:"Enter a character to draw (prefix with 0x for code point))"});if(!s)return;const y=s.match(/0x(?<codePoint>[0-9a-f]+)/i)?.groups?.codePoint;y!==void 0&&(s=String.fromCodePoint(Number.parseInt(y,16)));const b=0,a=n.getGlyph(C,s,b);if(!a)return;const l=n.pages[a.pageIndex].source.getContext("2d")?.getImageData(a.x,a.y,a.w,a.h);if(!l)return;const h=new OffscreenCanvas(l.width,l.height);_(h.getContext("2d")).putImageData(l,0,0);const G=await h.convertToBlob({type:"image/png"}),T=m.joinPath(i[0].uri,`glyph_${s}_${b}_${S}px_${x.replaceAll(/[,\\/.'\s]/g,"_")}.png`);await o.writeFile(T,d.wrap(new Uint8Array(await G.arrayBuffer())))});break}}}U(R);
