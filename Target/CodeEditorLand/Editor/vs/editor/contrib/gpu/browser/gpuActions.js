import{VSBuffer as f}from"../../../../base/common/buffer.js";import{URI as d}from"../../../../base/common/uri.js";import{localize as p}from"../../../../nls.js";import{IConfigurationService as G}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as T}from"../../../../platform/contextkey/common/contextkey.js";import{IFileService as b}from"../../../../platform/files/common/files.js";import{IInstantiationService as D}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as E}from"../../../../platform/log/common/log.js";import{IQuickInputService as A}from"../../../../platform/quickinput/common/quickInput.js";import{IWorkspaceContextService as I}from"../../../../platform/workspace/common/workspace.js";import{EditorAction as F,registerEditorAction as B}from"../../../browser/editorExtensions.js";import{ensureNonNullable as U}from"../../../browser/gpu/gpuUtils.js";import{GlyphRasterizer as _}from"../../../browser/gpu/raster/glyphRasterizer.js";import{ViewGpuContext as u}from"../../../browser/gpu/viewGpuContext.js";class z extends F{constructor(){super({id:"editor.action.debugEditorGpuRenderer",label:p("gpuDebug.label","Developer: Debug Editor GPU Renderer"),alias:"Developer: Debug Editor GPU Renderer",precondition:T.true()})}async run(m,$){const g=m.get(D),w=await m.get(A).pick([{label:p("logTextureAtlasStats.label","Log Texture Atlas Stats"),id:"logTextureAtlasStats"},{label:p("saveTextureAtlas.label","Save Texture Atlas"),id:"saveTextureAtlas"},{label:p("drawGlyph.label","Draw Glyph"),id:"drawGlyph"}],{canPickMany:!1});if(w)switch(w.id){case"logTextureAtlasStats":g.invokeFunction(e=>{const t=e.get(E),o=u.atlas;if(!u.atlas){t.error("No texture atlas found");return}const r=o.getStats();t.info(["Texture atlas stats",...r].join(`

`))});break;case"saveTextureAtlas":g.invokeFunction(async e=>{const t=e.get(I),o=e.get(b),r=t.getWorkspace().folders;if(r.length>0){const v=u.atlas,i=[];for(const[n,s]of v.pages.entries())i.push(o.writeFile(d.joinPath(r[0].uri,`textureAtlasPage${n}_actual.png`),f.wrap(new Uint8Array(await(await s.source.convertToBlob()).arrayBuffer()))),o.writeFile(d.joinPath(r[0].uri,`textureAtlasPage${n}_usage.png`),f.wrap(new Uint8Array(await(await s.getUsagePreview()).arrayBuffer()))));await Promise.all(i)}});break;case"drawGlyph":g.invokeFunction(async e=>{const t=e.get(G),o=e.get(b),r=e.get(A),i=e.get(I).getWorkspace().folders;if(i.length===0)return;const n=u.atlas,s=t.getValue("editor.fontFamily"),x=t.getValue("editor.fontSize"),k=new _(x,s);let c=await r.input({prompt:"Enter a character to draw (prefix with 0x for code point))"});if(!c)return;const S=c.match(/0x(?<codePoint>[0-9a-f]+)/i)?.groups?.codePoint;S!==void 0&&(c=String.fromCodePoint(parseInt(S,16)));const y=0,a=n.getGlyph(k,c,y);if(!a)return;const l=n.pages[a.pageIndex].source.getContext("2d")?.getImageData(a.x,a.y,a.w,a.h);if(!l)return;const h=new OffscreenCanvas(l.width,l.height);U(h.getContext("2d")).putImageData(l,0,0);const P=await h.convertToBlob({type:"image/png"}),C=d.joinPath(i[0].uri,`glyph_${c}_${y}_${x}px_${s.replaceAll(/[,\\\/\.'\s]/g,"_")}.png`);await o.writeFile(C,f.wrap(new Uint8Array(await P.arrayBuffer())))});break}}}B(z);
