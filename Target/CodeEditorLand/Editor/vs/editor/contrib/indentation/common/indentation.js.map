{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/indentation/common/indentation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { ShiftCommand } from \"../../../common/commands/shiftCommand.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../common/core/editOperation.js\";\nimport { normalizeIndentation } from \"../../../common/core/indentation.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport { StandardTokenType } from \"../../../common/encodedTokenAttributes.js\";\nimport type { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport { ProcessedIndentRulesSupport } from \"../../../common/languages/supports/indentationLineProcessor.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nexport function getReindentEditOperations(\n\tmodel: ITextModel,\n\tlanguageConfigurationService: ILanguageConfigurationService,\n\tstartLineNumber: number,\n\tendLineNumber: number,\n): ISingleEditOperation[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tconst indentationRulesSupport =\n\t\tlanguageConfigurationService.getLanguageConfiguration(\n\t\t\tmodel.getLanguageId(),\n\t\t).indentRulesSupport;\n\tif (!indentationRulesSupport) {\n\t\treturn [];\n\t}\n\n\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(\n\t\tmodel,\n\t\tindentationRulesSupport,\n\t\tlanguageConfigurationService,\n\t);\n\tendLineNumber = Math.min(endLineNumber, model.getLineCount());\n\n\t// Skip `unIndentedLinePattern` lines\n\twhile (startLineNumber <= endLineNumber) {\n\t\tif (!processedIndentRulesSupport.shouldIgnore(startLineNumber)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tstartLineNumber++;\n\t}\n\n\tif (startLineNumber > endLineNumber - 1) {\n\t\treturn [];\n\t}\n\n\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\tconst shiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.shiftIndent(\n\t\t\tindentation,\n\t\t\tindentation.length + count,\n\t\t\ttabSize,\n\t\t\tindentSize,\n\t\t\tinsertSpaces,\n\t\t);\n\t};\n\tconst unshiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.unshiftIndent(\n\t\t\tindentation,\n\t\t\tindentation.length + count,\n\t\t\ttabSize,\n\t\t\tindentSize,\n\t\t\tinsertSpaces,\n\t\t);\n\t};\n\tconst indentEdits: ISingleEditOperation[] = [];\n\n\t// indentation being passed to lines below\n\n\t// Calculate indentation for the first line\n\t// If there is no passed-in indentation, we use the indentation of the first line as base.\n\tconst currentLineText = model.getLineContent(startLineNumber);\n\tlet globalIndent = strings.getLeadingWhitespace(currentLineText);\n\t// idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n\tlet idealIndentForNextLine: string = globalIndent;\n\n\tif (processedIndentRulesSupport.shouldIncrease(startLineNumber)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\tglobalIndent = shiftIndent(globalIndent);\n\t} else if (\n\t\tprocessedIndentRulesSupport.shouldIndentNextLine(startLineNumber)\n\t) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t}\n\n\tstartLineNumber++;\n\n\t// Calculate indentation adjustment for all following lines\n\tfor (\n\t\tlet lineNumber = startLineNumber;\n\t\tlineNumber <= endLineNumber;\n\t\tlineNumber++\n\t) {\n\t\tif (doesLineStartWithString(model, lineNumber)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst text = model.getLineContent(lineNumber);\n\t\tconst oldIndentation = strings.getLeadingWhitespace(text);\n\t\tconst currentIdealIndent = idealIndentForNextLine;\n\n\t\tif (\n\t\t\tprocessedIndentRulesSupport.shouldDecrease(\n\t\t\t\tlineNumber,\n\t\t\t\tcurrentIdealIndent,\n\t\t\t)\n\t\t) {\n\t\t\tidealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t}\n\n\t\tif (oldIndentation !== idealIndentForNextLine) {\n\t\t\tindentEdits.push(\n\t\t\t\tEditOperation.replaceMove(\n\t\t\t\t\tnew Selection(\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\toldIndentation.length + 1,\n\t\t\t\t\t),\n\t\t\t\t\tnormalizeIndentation(\n\t\t\t\t\t\tidealIndentForNextLine,\n\t\t\t\t\t\tindentSize,\n\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// calculate idealIndentForNextLine\n\t\tif (processedIndentRulesSupport.shouldIgnore(lineNumber)) {\n\t\t\t// In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n\t\t\t// but don't change globalIndent and idealIndentForNextLine.\n\t\t\tcontinue;\n\t\t} else if (\n\t\t\tprocessedIndentRulesSupport.shouldIncrease(\n\t\t\t\tlineNumber,\n\t\t\t\tcurrentIdealIndent,\n\t\t\t)\n\t\t) {\n\t\t\tglobalIndent = shiftIndent(globalIndent);\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t} else if (\n\t\t\tprocessedIndentRulesSupport.shouldIndentNextLine(\n\t\t\t\tlineNumber,\n\t\t\t\tcurrentIdealIndent,\n\t\t\t)\n\t\t) {\n\t\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\t} else {\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t}\n\t}\n\n\treturn indentEdits;\n}\n\nfunction doesLineStartWithString(\n\tmodel: ITextModel,\n\tlineNumber: number,\n): boolean {\n\tif (!model.tokenization.isCheapToTokenize(lineNumber)) {\n\t\treturn false;\n\t}\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\treturn lineTokens.getStandardTokenType(0) === StandardTokenType.String;\n}\n"],
  "mappings": "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",
  "names": []
}
