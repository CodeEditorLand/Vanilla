import*as T from"../../../../../vs/base/common/strings.js";import{ShiftCommand as x}from"../../../../../vs/editor/common/commands/shiftCommand.js";import{EditOperation as C}from"../../../../../vs/editor/common/core/editOperation.js";import{normalizeIndentation as m}from"../../../../../vs/editor/common/core/indentation.js";import{Selection as z}from"../../../../../vs/editor/common/core/selection.js";import{StandardTokenType as E}from"../../../../../vs/editor/common/encodedTokenAttributes.js";import"../../../../../vs/editor/common/languages/languageConfigurationRegistry.js";import{ProcessedIndentRulesSupport as M}from"../../../../../vs/editor/common/languages/supports/indentationLineProcessor.js";import"../../../../../vs/editor/common/model.js";function A(t,g,i,a){if(t.getLineCount()===1&&t.getLineMaxColumn(1)===1)return[];const u=g.getLanguageConfiguration(t.getLanguageId()).indentRulesSupport;if(!u)return[];const s=new M(t,u,g);for(a=Math.min(a,t.getLineCount());i<=a&&s.shouldIgnore(i);)i++;if(i>a-1)return[];const{tabSize:I,indentSize:f,insertSpaces:p}=t.getOptions(),d=(n,r)=>(r=r||1,x.shiftIndent(n,n.length+r,I,f,p)),c=(n,r)=>(r=r||1,x.unshiftIndent(n,n.length+r,I,f,p)),h=[],k=t.getLineContent(i);let o=T.getLeadingWhitespace(k),e=o;s.shouldIncrease(i)?(e=d(e),o=d(o)):s.shouldIndentNextLine(i)&&(e=d(e)),i++;for(let n=i;n<=a;n++){if(O(t,n))continue;const r=t.getLineContent(n),S=T.getLeadingWhitespace(r),l=e;s.shouldDecrease(n,l)&&(e=c(e),o=c(o)),S!==e&&h.push(C.replaceMove(new z(n,1,n,S.length+1),m(e,f,p))),!s.shouldIgnore(n)&&(s.shouldIncrease(n,l)?(o=d(o),e=o):s.shouldIndentNextLine(n,l)?e=d(e):e=o)}return h}function O(t,g){return t.tokenization.isCheapToTokenize(g)?t.tokenization.getLineTokens(g).getStandardTokenType(0)===E.String:!1}export{A as getReindentEditOperations};
