import*as T from"../../../../base/common/strings.js";import{ShiftCommand as m}from"../../../common/commands/shiftCommand.js";import{EditOperation as C}from"../../../common/core/editOperation.js";import{normalizeIndentation as k}from"../../../common/core/indentation.js";import{Selection as y}from"../../../common/core/selection.js";import{StandardTokenType as z}from"../../../common/encodedTokenAttributes.js";import{ProcessedIndentRulesSupport as E}from"../../../common/languages/supports/indentationLineProcessor.js";function v(t,g,i,a){if(t.getLineCount()===1&&t.getLineMaxColumn(1)===1)return[];const u=g.getLanguageConfiguration(t.getLanguageId()).indentRulesSupport;if(!u)return[];const s=new E(t,u,g);for(a=Math.min(a,t.getLineCount());i<=a&&s.shouldIgnore(i);)i++;if(i>a-1)return[];const{tabSize:I,indentSize:d,insertSpaces:f}=t.getOptions(),p=(n,r)=>(r=r||1,m.shiftIndent(n,n.length+r,I,d,f)),c=(n,r)=>(r=r||1,m.unshiftIndent(n,n.length+r,I,d,f)),h=[],x=t.getLineContent(i);let o=T.getLeadingWhitespace(x),e=o;s.shouldIncrease(i)?(e=p(e),o=p(o)):s.shouldIndentNextLine(i)&&(e=p(e)),i++;for(let n=i;n<=a;n++){if(M(t,n))continue;const r=t.getLineContent(n),S=T.getLeadingWhitespace(r),l=e;s.shouldDecrease(n,l)&&(e=c(e),o=c(o)),S!==e&&h.push(C.replaceMove(new y(n,1,n,S.length+1),k(e,d,f))),!s.shouldIgnore(n)&&(s.shouldIncrease(n,l)?(o=p(o),e=o):s.shouldIndentNextLine(n,l)?e=p(e):e=o)}return h}function M(t,g){return t.tokenization.isCheapToTokenize(g)?t.tokenization.getLineTokens(g).getStandardTokenType(0)===z.String:!1}export{v as getReindentEditOperations};
