import s from"assert";import{DisposableStore as S}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as C}from"../../../../../base/test/common/utils.js";import{StandardTokenType as t}from"../../../../common/encodedTokenAttributes.js";import{ILanguageConfigurationService as p}from"../../../../common/languages/languageConfigurationRegistry.js";import{IndentationContextProcessor as f,ProcessedIndentRulesSupport as k}from"../../../../common/languages/supports/indentationLineProcessor.js";import{Language as y,registerLanguage as h,registerLanguageConfiguration as R,registerTokenizationSupport as g}from"./indentation.test.js";import{withTestCodeEditor as T}from"../../../../test/browser/testCodeEditor.js";import{createTextModel as m}from"../../../../test/common/testTextModel.js";import{Range as I}from"../../../../common/core/range.js";import{ServiceCollection as w}from"../../../../../platform/instantiation/common/serviceCollection.js";import{LanguageService as L}from"../../../../common/services/languageService.js";import{TestLanguageConfigurationService as v}from"../../../../test/common/modes/testLanguageConfigurationService.js";import{ILanguageService as E}from"../../../../common/languages/language.js";suite("Indentation Context Processor - TypeScript/JavaScript",()=>{const a=y.TypeScript;let n,l;setup(()=>{n=new S;const e=new L,i=new v;n.add(e),n.add(i),n.add(h(e,a)),n.add(R(i,a)),l=new w([E,e],[p,i])}),teardown(()=>{n.dispose()}),C(),test("brackets inside of string",()=>{const e=m(['const someVar = "{some text}"'].join(`
`),a,{});n.add(e),T(e,{autoIndent:"full",serviceCollection:l},(i,x,r)=>{const c=[[{startIndex:0,standardTokenType:t.Other},{startIndex:16,standardTokenType:t.String},{startIndex:28,standardTokenType:t.String}]];n.add(g(r,c,a));const d=r.get(p),o=new f(e,d).getProcessedTokenContextAroundRange(new I(1,23,1,23));s.strictEqual(o.beforeRangeProcessedTokens.getLineContent(),'const someVar = "some'),s.strictEqual(o.afterRangeProcessedTokens.getLineContent(),' text"'),s.strictEqual(o.previousLineProcessedTokens.getLineContent(),"")})}),test("brackets inside of comment",()=>{const e=m(["const someVar2 = /*(a])*/",'const someVar = /* [()] some other t{e}xt() */ "some text"'].join(`
`),a,{});n.add(e),T(e,{autoIndent:"full",serviceCollection:l},(i,x,r)=>{const c=[[{startIndex:0,standardTokenType:t.Other},{startIndex:17,standardTokenType:t.Comment}],[{startIndex:0,standardTokenType:t.Other},{startIndex:16,standardTokenType:t.Comment},{startIndex:46,standardTokenType:t.Other},{startIndex:47,standardTokenType:t.String}]];n.add(g(r,c,a));const d=r.get(p),o=new f(e,d).getProcessedTokenContextAroundRange(new I(2,29,2,35));s.strictEqual(o.beforeRangeProcessedTokens.getLineContent(),"const someVar = /*  some"),s.strictEqual(o.afterRangeProcessedTokens.getLineContent(),' text */ "some text"'),s.strictEqual(o.previousLineProcessedTokens.getLineContent(),"const someVar2 = /*a*/")})}),test("brackets inside of regex",()=>{const e=m(["const someRegex2 = /(()))]/;","const someRegex = /()a{h}{s}[(a}87(9a9()))]/;"].join(`
`),a,{});n.add(e),T(e,{autoIndent:"full",serviceCollection:l},(i,x,r)=>{const c=[[{startIndex:0,standardTokenType:t.Other},{startIndex:19,standardTokenType:t.RegEx},{startIndex:27,standardTokenType:t.Other}],[{startIndex:0,standardTokenType:t.Other},{startIndex:18,standardTokenType:t.RegEx},{startIndex:44,standardTokenType:t.Other}]];n.add(g(r,c,a));const d=r.get(p),o=new f(e,d).getProcessedTokenContextAroundRange(new I(1,25,2,33));s.strictEqual(o.beforeRangeProcessedTokens.getLineContent(),"const someRegex2 = /"),s.strictEqual(o.afterRangeProcessedTokens.getLineContent(),"879a9/;"),s.strictEqual(o.previousLineProcessedTokens.getLineContent(),"")})})}),suite("Processed Indent Rules Support - TypeScript/JavaScript",()=>{const a=y.TypeScript;let n,l;setup(()=>{n=new S;const e=new L,i=new v;n.add(e),n.add(i),n.add(h(e,a)),n.add(R(i,a)),l=new w([E,e],[p,i])}),teardown(()=>{n.dispose()}),C(),test("should increase",()=>{const e=m(["const someVar = {",'const someVar2 = "{"',"const someVar3 = /*{*/"].join(`
`),a,{});n.add(e),T(e,{autoIndent:"full",serviceCollection:l},(i,x,r)=>{const c=[[{startIndex:0,standardTokenType:t.Other}],[{startIndex:0,standardTokenType:t.Other},{startIndex:17,standardTokenType:t.String}],[{startIndex:0,standardTokenType:t.Other},{startIndex:17,standardTokenType:t.Comment}]];n.add(g(r,c,a));const d=r.get(p),u=d.getLanguageConfiguration(a).indentRulesSupport;u||s.fail("indentationRulesSupport should be defined");const o=new k(e,u,d);s.strictEqual(o.shouldIncrease(1),!0),s.strictEqual(o.shouldIncrease(2),!1),s.strictEqual(o.shouldIncrease(3),!1)})}),test("should decrease",()=>{const e=m(["}",'"])some text}"',"])*/"].join(`
`),a,{});n.add(e),T(e,{autoIndent:"full",serviceCollection:l},(i,x,r)=>{const c=[[{startIndex:0,standardTokenType:t.Other}],[{startIndex:0,standardTokenType:t.String}],[{startIndex:0,standardTokenType:t.Comment}]];n.add(g(r,c,a));const d=r.get(p),u=d.getLanguageConfiguration(a).indentRulesSupport;u||s.fail("indentationRulesSupport should be defined");const o=new k(e,u,d);s.strictEqual(o.shouldDecrease(1),!0),s.strictEqual(o.shouldDecrease(2),!1),s.strictEqual(o.shouldDecrease(3),!1)})}),test("should increase next line",()=>{const e=m(["if()",'const someString = "if()"',"const someRegex = /if()/"].join(`
`),a,{});n.add(e),T(e,{autoIndent:"full",serviceCollection:l},(i,x,r)=>{const c=[[{startIndex:0,standardTokenType:t.Other}],[{startIndex:0,standardTokenType:t.Other},{startIndex:19,standardTokenType:t.String}],[{startIndex:0,standardTokenType:t.Other},{startIndex:18,standardTokenType:t.RegEx}]];n.add(g(r,c,a));const d=r.get(p),u=d.getLanguageConfiguration(a).indentRulesSupport;u||s.fail("indentationRulesSupport should be defined");const o=new k(e,u,d);s.strictEqual(o.shouldIndentNextLine(1),!0),s.strictEqual(o.shouldIndentNextLine(2),!1),s.strictEqual(o.shouldIndentNextLine(3),!1)})})});
