{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/indentation/test/browser/indentationLineProcessor.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { StandardTokenType } from '../../../../common/encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { IndentationContextProcessor, ProcessedIndentRulesSupport } from '../../../../common/languages/supports/indentationLineProcessor.js';\nimport { Language, registerLanguage, registerLanguageConfiguration, registerTokenizationSupport, StandardTokenTypeData } from './indentation.test.js';\nimport { withTestCodeEditor } from '../../../../test/browser/testCodeEditor.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { LanguageService } from '../../../../common/services/languageService.js';\nimport { TestLanguageConfigurationService } from '../../../../test/common/modes/testLanguageConfigurationService.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\n\nsuite('Indentation Context Processor - TypeScript/JavaScript', () => {\n\n\tconst languageId = Language.TypeScript;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('brackets inside of string', () => {\n\n\t\tconst model = createTextModel([\n\t\t\t'const someVar = \"{some text}\"',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [[\n\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t{ startIndex: 16, standardTokenType: StandardTokenType.String },\n\t\t\t\t{ startIndex: 28, standardTokenType: StandardTokenType.String }\n\t\t\t]];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\t\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\t\t\tconst processedContext = indentationContextProcessor.getProcessedTokenContextAroundRange(new Range(1, 23, 1, 23));\n\t\t\tassert.strictEqual(processedContext.beforeRangeProcessedTokens.getLineContent(), 'const someVar = \"some');\n\t\t\tassert.strictEqual(processedContext.afterRangeProcessedTokens.getLineContent(), ' text\"');\n\t\t\tassert.strictEqual(processedContext.previousLineProcessedTokens.getLineContent(), '');\n\t\t});\n\t});\n\n\ttest('brackets inside of comment', () => {\n\n\t\tconst model = createTextModel([\n\t\t\t'const someVar2 = /*(a])*/',\n\t\t\t'const someVar = /* [()] some other t{e}xt() */ \"some text\"',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 17, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 16, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 46, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 47, standardTokenType: StandardTokenType.String }\n\t\t\t\t]];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\t\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\t\t\tconst processedContext = indentationContextProcessor.getProcessedTokenContextAroundRange(new Range(2, 29, 2, 35));\n\t\t\tassert.strictEqual(processedContext.beforeRangeProcessedTokens.getLineContent(), 'const someVar = /*  some');\n\t\t\tassert.strictEqual(processedContext.afterRangeProcessedTokens.getLineContent(), ' text */ \"some text\"');\n\t\t\tassert.strictEqual(processedContext.previousLineProcessedTokens.getLineContent(), 'const someVar2 = /*a*/');\n\t\t});\n\t});\n\n\ttest('brackets inside of regex', () => {\n\n\t\tconst model = createTextModel([\n\t\t\t'const someRegex2 = /(()))]/;',\n\t\t\t'const someRegex = /()a{h}{s}[(a}87(9a9()))]/;',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 19, standardTokenType: StandardTokenType.RegEx },\n\t\t\t\t\t{ startIndex: 27, standardTokenType: StandardTokenType.Other },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 18, standardTokenType: StandardTokenType.RegEx },\n\t\t\t\t\t{ startIndex: 44, standardTokenType: StandardTokenType.Other },\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\t\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\t\t\tconst processedContext = indentationContextProcessor.getProcessedTokenContextAroundRange(new Range(1, 25, 2, 33));\n\t\t\tassert.strictEqual(processedContext.beforeRangeProcessedTokens.getLineContent(), 'const someRegex2 = /');\n\t\t\tassert.strictEqual(processedContext.afterRangeProcessedTokens.getLineContent(), '879a9/;');\n\t\t\tassert.strictEqual(processedContext.previousLineProcessedTokens.getLineContent(), '');\n\t\t});\n\t});\n});\n\nsuite('Processed Indent Rules Support - TypeScript/JavaScript', () => {\n\n\tconst languageId = Language.TypeScript;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should increase', () => {\n\n\t\tconst model = createTextModel([\n\t\t\t'const someVar = {',\n\t\t\t'const someVar2 = \"{\"',\n\t\t\t'const someVar3 = /*{*/'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 17, standardTokenType: StandardTokenType.String },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 17, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\t\tconst indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\t\t\tif (!indentationRulesSupport) {\n\t\t\t\tassert.fail('indentationRulesSupport should be defined');\n\t\t\t}\n\t\t\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldIncrease(1), true);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldIncrease(2), false);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldIncrease(3), false);\n\t\t});\n\t});\n\n\ttest('should decrease', () => {\n\n\t\tconst model = createTextModel([\n\t\t\t'}',\n\t\t\t'\"])some text}\"',\n\t\t\t'])*/'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[{ startIndex: 0, standardTokenType: StandardTokenType.Other }],\n\t\t\t\t[{ startIndex: 0, standardTokenType: StandardTokenType.String }],\n\t\t\t\t[{ startIndex: 0, standardTokenType: StandardTokenType.Comment }]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\t\tconst indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\t\t\tif (!indentationRulesSupport) {\n\t\t\t\tassert.fail('indentationRulesSupport should be defined');\n\t\t\t}\n\t\t\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldDecrease(1), true);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldDecrease(2), false);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldDecrease(3), false);\n\t\t});\n\t});\n\n\ttest('should increase next line', () => {\n\n\t\tconst model = createTextModel([\n\t\t\t'if()',\n\t\t\t'const someString = \"if()\"',\n\t\t\t'const someRegex = /if()/'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 19, standardTokenType: StandardTokenType.String }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 18, standardTokenType: StandardTokenType.RegEx }\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\t\tconst indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\t\t\tif (!indentationRulesSupport) {\n\t\t\t\tassert.fail('indentationRulesSupport should be defined');\n\t\t\t}\n\t\t\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldIndentNextLine(1), true);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldIndentNextLine(2), false);\n\t\t\tassert.strictEqual(processedIndentRulesSupport.shouldIndentNextLine(3), false);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
