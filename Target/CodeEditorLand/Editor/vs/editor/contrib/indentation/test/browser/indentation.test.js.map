{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/indentation/test/browser/indentation.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { MetadataConsts, StandardTokenType } from '../../../../common/encodedTokenAttributes.js';\nimport { EncodedTokenizationResult, IState, ITokenizationSupport, TokenizationRegistry } from '../../../../common/languages.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { NullState } from '../../../../common/languages/nullTokenize.js';\nimport { AutoIndentOnPaste, IndentationToSpacesCommand, IndentationToTabsCommand } from '../../browser/indentation.js';\nimport { withTestCodeEditor } from '../../../../test/browser/testCodeEditor.js';\nimport { testCommand } from '../../../../test/browser/testCommand.js';\nimport { goIndentationRules, htmlIndentationRules, javascriptIndentationRules, latexIndentationRules, luaIndentationRules, phpIndentationRules, rubyIndentationRules } from '../../../../test/common/modes/supports/indentationRules.js';\nimport { cppOnEnterRules, htmlOnEnterRules, javascriptOnEnterRules, phpOnEnterRules } from '../../../../test/common/modes/supports/onEnterRules.js';\nimport { TypeOperations } from '../../../../common/cursor/cursorTypeOperations.js';\nimport { cppBracketRules, goBracketRules, htmlBracketRules, latexBracketRules, luaBracketRules, phpBracketRules, rubyBracketRules, typescriptBracketRules, vbBracketRules } from '../../../../test/common/modes/supports/bracketRules.js';\nimport { javascriptAutoClosingPairsRules, latexAutoClosingPairsRules } from '../../../../test/common/modes/supports/autoClosingPairsRules.js';\nimport { LanguageService } from '../../../../common/services/languageService.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { TestLanguageConfigurationService } from '../../../../test/common/modes/testLanguageConfigurationService.js';\n\nexport enum Language {\n\tTypeScript = 'ts-test',\n\tRuby = 'ruby-test',\n\tPHP = 'php-test',\n\tGo = 'go-test',\n\tCPP = 'cpp-test',\n\tHTML = 'html-test',\n\tVB = 'vb-test',\n\tLatex = 'latex-test',\n\tLua = 'lua-test'\n}\n\nfunction testIndentationToSpacesCommand(lines: string[], selection: Selection, tabSize: number, expectedLines: string[], expectedSelection: Selection): void {\n\ttestCommand(lines, null, selection, (accessor, sel) => new IndentationToSpacesCommand(sel, tabSize), expectedLines, expectedSelection);\n}\n\nfunction testIndentationToTabsCommand(lines: string[], selection: Selection, tabSize: number, expectedLines: string[], expectedSelection: Selection): void {\n\ttestCommand(lines, null, selection, (accessor, sel) => new IndentationToTabsCommand(sel, tabSize), expectedLines, expectedSelection);\n}\n\nexport function registerLanguage(languageService: ILanguageService, language: Language): IDisposable {\n\treturn languageService.registerLanguage({ id: language });\n}\n\nexport function registerLanguageConfiguration(languageConfigurationService: ILanguageConfigurationService, language: Language): IDisposable {\n\tswitch (language) {\n\t\tcase Language.TypeScript:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: typescriptBracketRules,\n\t\t\t\tcomments: {\n\t\t\t\t\tlineComment: '//',\n\t\t\t\t\tblockComment: ['/*', '*/']\n\t\t\t\t},\n\t\t\t\tautoClosingPairs: javascriptAutoClosingPairsRules,\n\t\t\t\tindentationRules: javascriptIndentationRules,\n\t\t\t\tonEnterRules: javascriptOnEnterRules\n\t\t\t});\n\t\tcase Language.Ruby:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: rubyBracketRules,\n\t\t\t\tindentationRules: rubyIndentationRules,\n\t\t\t});\n\t\tcase Language.PHP:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: phpBracketRules,\n\t\t\t\tindentationRules: phpIndentationRules,\n\t\t\t\tonEnterRules: phpOnEnterRules\n\t\t\t});\n\t\tcase Language.Go:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: goBracketRules,\n\t\t\t\tindentationRules: goIndentationRules\n\t\t\t});\n\t\tcase Language.CPP:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: cppBracketRules,\n\t\t\t\tonEnterRules: cppOnEnterRules\n\t\t\t});\n\t\tcase Language.HTML:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: htmlBracketRules,\n\t\t\t\tindentationRules: htmlIndentationRules,\n\t\t\t\tonEnterRules: htmlOnEnterRules\n\t\t\t});\n\t\tcase Language.VB:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: vbBracketRules,\n\t\t\t});\n\t\tcase Language.Latex:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: latexBracketRules,\n\t\t\t\tautoClosingPairs: latexAutoClosingPairsRules,\n\t\t\t\tindentationRules: latexIndentationRules\n\t\t\t});\n\t\tcase Language.Lua:\n\t\t\treturn languageConfigurationService.register(language, {\n\t\t\t\tbrackets: luaBracketRules,\n\t\t\t\tindentationRules: luaIndentationRules\n\t\t\t});\n\t}\n}\n\nexport interface StandardTokenTypeData {\n\tstartIndex: number;\n\tstandardTokenType: StandardTokenType;\n}\n\nexport function registerTokenizationSupport(instantiationService: TestInstantiationService, tokens: StandardTokenTypeData[][], languageId: Language): IDisposable {\n\tlet lineIndex = 0;\n\tconst languageService = instantiationService.get(ILanguageService);\n\tconst tokenizationSupport: ITokenizationSupport = {\n\t\tgetInitialState: () => NullState,\n\t\ttokenize: undefined!,\n\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult => {\n\t\t\tconst tokensOnLine = tokens[lineIndex++];\n\t\t\tconst encodedLanguageId = languageService.languageIdCodec.encodeLanguageId(languageId);\n\t\t\tconst result = new Uint32Array(2 * tokensOnLine.length);\n\t\t\tfor (let i = 0; i < tokensOnLine.length; i++) {\n\t\t\t\tresult[2 * i] = tokensOnLine[i].startIndex;\n\t\t\t\tresult[2 * i + 1] =\n\t\t\t\t\t(\n\t\t\t\t\t\t(encodedLanguageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t\t\t\t\t| (tokensOnLine[i].standardTokenType << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t\t\t\t);\n\t\t\t}\n\t\t\treturn new EncodedTokenizationResult(result, state);\n\t\t}\n\t};\n\treturn TokenizationRegistry.register(languageId, tokenizationSupport);\n}\n\nsuite('Change Indentation to Spaces - TypeScript/Javascript', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('single tabs only at start of line', function () {\n\t\ttestIndentationToSpacesCommand(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'\\tfourth line',\n\t\t\t\t'\\tfifth'\n\t\t\t],\n\t\t\tnew Selection(2, 3, 2, 3),\n\t\t\t4,\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'    fourth line',\n\t\t\t\t'    fifth'\n\t\t\t],\n\t\t\tnew Selection(2, 3, 2, 3)\n\t\t);\n\t});\n\n\ttest('multiple tabs at start of line', function () {\n\t\ttestIndentationToSpacesCommand(\n\t\t\t[\n\t\t\t\t'\\t\\tfirst',\n\t\t\t\t'\\tsecond line',\n\t\t\t\t'\\t\\t\\t third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 5, 1, 5),\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'      first',\n\t\t\t\t'   second line',\n\t\t\t\t'          third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 9, 1, 9)\n\t\t);\n\t});\n\n\ttest('multiple tabs', function () {\n\t\ttestIndentationToSpacesCommand(\n\t\t\t[\n\t\t\t\t'\\t\\tfirst\\t',\n\t\t\t\t'\\tsecond  \\t line \\t',\n\t\t\t\t'\\t\\t\\t third line',\n\t\t\t\t' \\tfourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 5, 1, 5),\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'    first\\t',\n\t\t\t\t'  second  \\t line \\t',\n\t\t\t\t'       third line',\n\t\t\t\t'   fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 7, 1, 7)\n\t\t);\n\t});\n\n\ttest('empty lines', function () {\n\t\ttestIndentationToSpacesCommand(\n\t\t\t[\n\t\t\t\t'\\t\\t\\t',\n\t\t\t\t'\\t',\n\t\t\t\t'\\t\\t'\n\t\t\t],\n\t\t\tnew Selection(1, 4, 1, 4),\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'      ',\n\t\t\t\t'  ',\n\t\t\t\t'    '\n\t\t\t],\n\t\t\tnew Selection(1, 4, 1, 4)\n\t\t);\n\t});\n});\n\nsuite('Change Indentation to Tabs -  TypeScript/Javascript', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('spaces only at start of line', function () {\n\t\ttestIndentationToTabsCommand(\n\t\t\t[\n\t\t\t\t'    first',\n\t\t\t\t'second line',\n\t\t\t\t'    third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(2, 3, 2, 3),\n\t\t\t4,\n\t\t\t[\n\t\t\t\t'\\tfirst',\n\t\t\t\t'second line',\n\t\t\t\t'\\tthird line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(2, 3, 2, 3)\n\t\t);\n\t});\n\n\ttest('multiple spaces at start of line', function () {\n\t\ttestIndentationToTabsCommand(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'   second line',\n\t\t\t\t'          third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'     fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 5, 1, 5),\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'\\tsecond line',\n\t\t\t\t'\\t\\t\\t third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'\\t  fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 5, 1, 5)\n\t\t);\n\t});\n\n\ttest('multiple spaces', function () {\n\t\ttestIndentationToTabsCommand(\n\t\t\t[\n\t\t\t\t'      first   ',\n\t\t\t\t'  second     line \\t',\n\t\t\t\t'       third line',\n\t\t\t\t'   fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 8, 1, 8),\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'\\t\\t\\tfirst   ',\n\t\t\t\t'\\tsecond     line \\t',\n\t\t\t\t'\\t\\t\\t third line',\n\t\t\t\t'\\t fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(1, 5, 1, 5)\n\t\t);\n\t});\n\n\ttest('issue #45996', function () {\n\t\ttestIndentationToSpacesCommand(\n\t\t\t[\n\t\t\t\t'\\tabc',\n\t\t\t],\n\t\t\tnew Selection(1, 3, 1, 3),\n\t\t\t4,\n\t\t\t[\n\t\t\t\t'    abc',\n\t\t\t],\n\t\t\tnew Selection(1, 6, 1, 6)\n\t\t);\n\t});\n});\n\nsuite('Indent With Tab - TypeScript/JavaScript', () => {\n\n\tconst languageId = Language.TypeScript;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #63388: perserve correct indentation on tab 1', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/63388\n\n\t\tconst model = createTextModel([\n\t\t\t'/*',\n\t\t\t' * Comment',\n\t\t\t' * /',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(1, 1, 3, 5));\n\t\t\teditor.executeCommands('editor.action.indentLines', TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'    /*',\n\t\t\t\t'     * Comment',\n\t\t\t\t'     * /',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #63388: perserve correct indentation on tab 2', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/63388\n\n\t\tconst model = createTextModel([\n\t\t\t'switch (something) {',\n\t\t\t'  case 1:',\n\t\t\t'    whatever();',\n\t\t\t'    break;',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(1, 1, 5, 2));\n\t\t\teditor.executeCommands('editor.action.indentLines', TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'    switch (something) {',\n\t\t\t\t'        case 1:',\n\t\t\t\t'            whatever();',\n\t\t\t\t'            break;',\n\t\t\t\t'    }',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Paste - TypeScript/JavaScript', () => {\n\n\tconst languageId = Language.TypeScript;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #119225: Do not add extra leading space when pasting JSDoc', () => {\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst pasteText = [\n\t\t\t\t'/**',\n\t\t\t\t' * JSDoc',\n\t\t\t\t' */',\n\t\t\t\t'function a() {}'\n\t\t\t].join('\\n');\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 2, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 8, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 1, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Other },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 8, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 9, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 10, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 11, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 12, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 13, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 14, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 15, standardTokenType: StandardTokenType.Other },\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(pasteText, true, undefined, 'keyboard');\n\t\t\tautoIndentOnPasteController.trigger(new Range(1, 1, 4, 16));\n\t\t\tassert.strictEqual(model.getValue(), pasteText);\n\t\t});\n\t});\n\n\ttest('issue #167299: Blank line removes indent', () => {\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\n\t\t\t// no need for tokenization because there are no comments\n\t\t\tconst pasteText = [\n\t\t\t\t'',\n\t\t\t\t'export type IncludeReference =',\n\t\t\t\t'\t| BaseReference',\n\t\t\t\t'\t| SelfReference',\n\t\t\t\t'\t| RelativeReference;',\n\t\t\t\t'',\n\t\t\t\t'export const enum IncludeReferenceKind {',\n\t\t\t\t'\tBase,',\n\t\t\t\t'\tSelf,',\n\t\t\t\t'\tRelativeReference,',\n\t\t\t\t'}'\n\t\t\t].join('\\n');\n\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(pasteText, true, undefined, 'keyboard');\n\t\t\tautoIndentOnPasteController.trigger(new Range(1, 1, 11, 2));\n\t\t\tassert.strictEqual(model.getValue(), pasteText);\n\t\t});\n\t});\n\n\ttest('issue #29803: do not indent when pasting text with only one line', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/29803\n\n\t\tconst model = createTextModel([\n\t\t\t'const linkHandler = new Class(a, b, c,',\n\t\t\t'    d)'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(2, 6, 2, 6));\n\t\t\tconst text = ', null';\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tautoIndentOnPasteController.trigger(new Range(2, 6, 2, 11));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const linkHandler = new Class(a, b, c,',\n\t\t\t\t'    d, null)'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #29753: incorrect indentation after comment', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/29753\n\n\t\tconst model = createTextModel([\n\t\t\t'class A {',\n\t\t\t'    /**',\n\t\t\t'     * used only for debug purposes.',\n\t\t\t'     */',\n\t\t\t'    private _codeInfo: KeyMapping[];',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(5, 24, 5, 34));\n\t\t\tconst text = 'IMacLinuxKeyMapping';\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tautoIndentOnPasteController.trigger(new Range(5, 24, 5, 43));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'class A {',\n\t\t\t\t'    /**',\n\t\t\t\t'     * used only for debug purposes.',\n\t\t\t\t'     */',\n\t\t\t\t'    private _codeInfo: IMacLinuxKeyMapping[];',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #29753: incorrect indentation of header comment', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/29753\n\n\t\tconst model = createTextModel('', languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst text = [\n\t\t\t\t'/*----------------',\n\t\t\t\t' *  Copyright (c) ',\n\t\t\t\t' *  Licensed under ...',\n\t\t\t\t' *-----------------*/',\n\t\t\t].join('\\n');\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tautoIndentOnPasteController.trigger(new Range(1, 1, 4, 22));\n\t\t\tassert.strictEqual(model.getValue(), text);\n\t\t});\n\t});\n\n\ttest('issue #209859: do not do change indentation when pasted inside of a string', () => {\n\n\t\t// issue: https://github.com/microsoft/vscode/issues/209859\n\t\t// issue: https://github.com/microsoft/vscode/issues/209418\n\n\t\tconst initialText = [\n\t\t\t'const foo = \"some text',\n\t\t\t'         which is strangely',\n\t\t\t'    indented\"'\n\t\t].join('\\n');\n\t\tconst model = createTextModel(initialText, languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 12, standardTokenType: StandardTokenType.String },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.String },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.String },\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\n\t\t\teditor.setSelection(new Selection(2, 10, 2, 15));\n\t\t\tviewModel.paste('which', true, undefined, 'keyboard');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tautoIndentOnPasteController.trigger(new Range(2, 1, 2, 28));\n\t\t\tassert.strictEqual(model.getValue(), initialText);\n\t\t});\n\t});\n\n\t// Failing tests found in issues...\n\n\ttest.skip('issue #181065: Incorrect paste of object within comment', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/181065\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst text = [\n\t\t\t\t'/**',\n\t\t\t\t' * @typedef {',\n\t\t\t\t' * }',\n\t\t\t\t' */'\n\t\t\t].join('\\n');\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 2, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 11, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 12, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 13, standardTokenType: StandardTokenType.Other },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 2, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 4, standardTokenType: StandardTokenType.Other },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 1, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Other },\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tautoIndentOnPasteController.trigger(new Range(1, 1, 4, 4));\n\t\t\tassert.strictEqual(model.getValue(), text);\n\t\t});\n\t});\n\n\ttest.skip('issue #86301: preserve cursor at inserted indentation level', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/86301\n\n\t\tconst model = createTextModel([\n\t\t\t'() => {',\n\t\t\t'',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(2, 1, 2, 1));\n\t\t\tconst text = [\n\t\t\t\t'() => {',\n\t\t\t\t'',\n\t\t\t\t'}',\n\t\t\t\t''\n\t\t\t].join('\\n');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tautoIndentOnPasteController.trigger(new Range(2, 1, 5, 1));\n\n\t\t\t// notes:\n\t\t\t// why is line 3 not indented to the same level as line 2?\n\t\t\t// looks like the indentation is inserted correctly at line 5, but the cursor does not appear at the maximum indentation level?\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'() => {',\n\t\t\t\t'    () => {',\n\t\t\t\t'    ', // <- should also be indented\n\t\t\t\t'    }',\n\t\t\t\t'    ', // <- cursor should be at the end of the indentation\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\n\t\t\tconst selection = viewModel.getSelection();\n\t\t\tassert.deepStrictEqual(selection, new Selection(5, 5, 5, 5));\n\t\t});\n\t});\n\n\ttest.skip('issue #85781: indent line with extra white space', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/85781\n\t\t// note: still to determine whether this is a bug or not\n\n\t\tconst model = createTextModel([\n\t\t\t'() => {',\n\t\t\t'    console.log(\"a\");',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(2, 5, 2, 5));\n\t\t\tconst text = [\n\t\t\t\t'() => {',\n\t\t\t\t'    console.log(\"b\")',\n\t\t\t\t'}',\n\t\t\t\t' '\n\t\t\t].join('\\n');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\t// todo@aiday-mar, make sure range is correct, and make test work as in real life\n\t\t\tautoIndentOnPasteController.trigger(new Range(2, 5, 5, 6));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'() => {',\n\t\t\t\t'    () => {',\n\t\t\t\t'        console.log(\"b\")',\n\t\t\t\t'    }',\n\t\t\t\t'    console.log(\"a\");',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #29589: incorrect indentation of closing brace on paste', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/29589\n\n\t\tconst model = createTextModel('', languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(2, 5, 2, 5));\n\t\t\tconst text = [\n\t\t\t\t'function makeSub(a,b) {',\n\t\t\t\t'subsent = sent.substring(a,b);',\n\t\t\t\t'return subsent;',\n\t\t\t\t'}',\n\t\t\t].join('\\n');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\t// todo@aiday-mar, make sure range is correct, and make test work as in real life\n\t\t\tautoIndentOnPasteController.trigger(new Range(1, 1, 4, 2));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function makeSub(a,b) {',\n\t\t\t\t'subsent = sent.substring(a,b);',\n\t\t\t\t'return subsent;',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #201420: incorrect indentation when first line is comment', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/201420\n\n\t\tconst model = createTextModel([\n\t\t\t'function bar() {',\n\t\t\t'',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'full', serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 8, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 9, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 12, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 13, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 14, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 15, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 16, standardTokenType: StandardTokenType.Other }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 2, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 3, standardTokenType: StandardTokenType.Comment },\n\t\t\t\t\t{ startIndex: 10, standardTokenType: StandardTokenType.Comment }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 5, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 6, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 9, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 10, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 11, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 12, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 14, standardTokenType: StandardTokenType.Other }],\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 1, standardTokenType: StandardTokenType.Other }]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\n\t\t\teditor.setSelection(new Selection(2, 1, 2, 1));\n\t\t\tconst text = [\n\t\t\t\t'// comment',\n\t\t\t\t'const foo = 42',\n\t\t\t].join('\\n');\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tautoIndentOnPasteController.trigger(new Range(2, 1, 3, 15));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function bar() {',\n\t\t\t\t'    // comment',\n\t\t\t\t'    const foo = 42',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Type - TypeScript/JavaScript', () => {\n\n\tconst languageId = Language.TypeScript;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\t// Failing tests from issues...\n\n\ttest('issue #208215: indent after arrow function', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/208215\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\tviewModel.type('const add1 = (n) =>');\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const add1 = (n) =>',\n\t\t\t\t'    ',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #208215: indent after arrow function 2', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/208215\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3, 4, 5];',\n\t\t\t'array.map(',\n\t\t\t'    v =>',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(3, 9, 3, 9));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3, 4, 5];',\n\t\t\t\t'array.map(',\n\t\t\t\t'    v =>',\n\t\t\t\t'        '\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #116843: indent after arrow function', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/116843\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\tviewModel.type([\n\t\t\t\t'const add1 = (n) =>',\n\t\t\t\t'    n + 1;',\n\t\t\t].join('\\n'));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const add1 = (n) =>',\n\t\t\t\t'    n + 1;',\n\t\t\t\t'',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #29755: do not add indentation on enter if indentation is already valid', () => {\n\n\t\t//https://github.com/microsoft/vscode/issues/29755\n\n\t\tconst model = createTextModel([\n\t\t\t'function f() {',\n\t\t\t'    const one = 1;',\n\t\t\t'    const two = 2;',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(3, 1, 3, 1));\n\t\t\tviewModel.type('\\n', 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function f() {',\n\t\t\t\t'    const one = 1;',\n\t\t\t\t'',\n\t\t\t\t'    const two = 2;',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #36090', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/36090\n\n\t\tconst model = createTextModel([\n\t\t\t'class ItemCtrl {',\n\t\t\t'    getPropertiesByItemId(id) {',\n\t\t\t'        return this.fetchItem(id)',\n\t\t\t'            .then(item => {',\n\t\t\t'                return this.getPropertiesOfItem(item);',\n\t\t\t'            });',\n\t\t\t'    }',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'advanced', serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(7, 6, 7, 6));\n\t\t\tviewModel.type('\\n', 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(),\n\t\t\t\t[\n\t\t\t\t\t'class ItemCtrl {',\n\t\t\t\t\t'    getPropertiesByItemId(id) {',\n\t\t\t\t\t'        return this.fetchItem(id)',\n\t\t\t\t\t'            .then(item => {',\n\t\t\t\t\t'                return this.getPropertiesOfItem(item);',\n\t\t\t\t\t'            });',\n\t\t\t\t\t'    }',\n\t\t\t\t\t'    ',\n\t\t\t\t\t'}',\n\t\t\t\t].join('\\n')\n\t\t\t);\n\t\t\tassert.deepStrictEqual(editor.getSelection(), new Selection(8, 5, 8, 5));\n\t\t});\n\t});\n\n\ttest('issue #115304: indent block comment onEnter', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/115304\n\n\t\tconst model = createTextModel([\n\t\t\t'/** */',\n\t\t\t'function f() {}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: 'advanced', serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(1, 4, 1, 4));\n\t\t\tviewModel.type('\\n', 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(),\n\t\t\t\t[\n\t\t\t\t\t'/**',\n\t\t\t\t\t' * ',\n\t\t\t\t\t' */',\n\t\t\t\t\t'function f() {}',\n\t\t\t\t].join('\\n')\n\t\t\t);\n\t\t\tassert.deepStrictEqual(editor.getSelection(), new Selection(2, 4, 2, 4));\n\t\t});\n\t});\n\n\ttest('issue #43244: indent when lambda arrow function is detected, outdent when end is reached', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3, 4, 5];',\n\t\t\t'array.map(_)'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 12, 2, 12));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3, 4, 5];',\n\t\t\t\t'array.map(_',\n\t\t\t\t'    ',\n\t\t\t\t')'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #43244: incorrect indentation after if/for/while without braces', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\n\t\tconst model = createTextModel([\n\t\t\t'function f() {',\n\t\t\t'    if (condition)',\n\t\t\t'}'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 19, 2, 19));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function f() {',\n\t\t\t\t'    if (condition)',\n\t\t\t\t'        ',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\n\t\t\tviewModel.type(\"return;\");\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function f() {',\n\t\t\t\t'    if (condition)',\n\t\t\t\t'        return;',\n\t\t\t\t'    ',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #208232: incorrect indentation inside of comments', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/208232\n\n\t\tconst model = createTextModel([\n\t\t\t'/**',\n\t\t\t'indentation done for {',\n\t\t\t'*/'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[{ startIndex: 0, standardTokenType: StandardTokenType.Comment }],\n\t\t\t\t[{ startIndex: 0, standardTokenType: StandardTokenType.Comment }],\n\t\t\t\t[{ startIndex: 0, standardTokenType: StandardTokenType.Comment }]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\teditor.setSelection(new Selection(2, 23, 2, 23));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'/**',\n\t\t\t\t'indentation done for {',\n\t\t\t\t'',\n\t\t\t\t'*/'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest('issue #209802: allman style braces in JavaScript', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/209802\n\n\t\tconst model = createTextModel([\n\t\t\t'if (/*condition*/)',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(1, 19, 1, 19));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (/*condition*/)',\n\t\t\t\t'    '\n\t\t\t].join('\\n'));\n\t\t\tviewModel.type(\"{\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (/*condition*/)',\n\t\t\t\t'{}'\n\t\t\t].join('\\n'));\n\t\t\teditor.setSelection(new Selection(2, 2, 2, 2));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (/*condition*/)',\n\t\t\t\t'{',\n\t\t\t\t'    ',\n\t\t\t\t'}'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\t// Failing tests...\n\n\ttest.skip('issue #43244: indent after equal sign is detected', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\t\t// issue: Should indent after an equal sign is detected followed by whitespace characters.\n\t\t// This should be outdented when a semi-colon is detected indicating the end of the assignment.\n\n\t\t// TODO: requires exploring indent/outdent pairs instead\n\n\t\tconst model = createTextModel([\n\t\t\t'const array ='\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(1, 14, 1, 14));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array =',\n\t\t\t\t'    '\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #43244: indent after dot detected after object/array signifying a method call', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\t\t// issue: When a dot is written, we should detect that this is a method call and indent accordingly\n\n\t\t// TODO: requires exploring indent/outdent pairs instead\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3];',\n\t\t\t'array.'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 7, 2, 7));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3];',\n\t\t\t\t'array.',\n\t\t\t\t'    '\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #43244: indent after dot detected on a subsequent line after object/array signifying a method call', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\t\t// issue: When a dot is written, we should detect that this is a method call and indent accordingly\n\n\t\t// TODO: requires exploring indent/outdent pairs instead\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3]',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 7, 2, 7));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tviewModel.type(\".\");\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3]',\n\t\t\t\t'    .'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #43244: keep indentation when methods called on object/array', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\t\t// Currently passes, but should pass with all the tests above too\n\n\t\t// TODO: requires exploring indent/outdent pairs instead\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3]',\n\t\t\t'    .filter(() => true)'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 24, 2, 24));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3]',\n\t\t\t\t'    .filter(() => true)',\n\t\t\t\t'    '\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #43244: keep indentation when chained methods called on object/array', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\t\t// When the call chain is not finished yet, and we type a dot, we do not want to change the indentation\n\n\t\t// TODO: requires exploring indent/outdent pairs instead\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3]',\n\t\t\t'    .filter(() => true)',\n\t\t\t'    '\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(3, 5, 3, 5));\n\t\t\tviewModel.type(\".\");\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3]',\n\t\t\t\t'    .filter(() => true)',\n\t\t\t\t'    .' // here we don't want to increase the indentation because we have chained methods\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #43244: outdent when a semi-color is detected indicating the end of the assignment', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/43244\n\n\t\t// TODO: requires exploring indent/outdent pairs instead\n\n\t\tconst model = createTextModel([\n\t\t\t'const array = [1, 2, 3]',\n\t\t\t'    .filter(() => true);'\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 25, 2, 25));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'const array = [1, 2, 3]',\n\t\t\t\t'    .filter(() => true);',\n\t\t\t\t''\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\n\ttest.skip('issue #40115: keep indentation when added', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/40115\n\n\t\tconst model = createTextModel('function foo() {}', languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(1, 17, 1, 17));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function foo() {',\n\t\t\t\t'    ',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t\teditor.setSelection(new Selection(2, 5, 2, 5));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'function foo() {',\n\t\t\t\t'    ',\n\t\t\t\t'    ',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #193875: incorrect indentation on enter', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/193875\n\n\t\tconst model = createTextModel([\n\t\t\t'{',\n\t\t\t'    for(;;)',\n\t\t\t'    for(;;) {}',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(3, 14, 3, 14));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'{',\n\t\t\t\t'    for(;;)',\n\t\t\t\t'    for(;;) {',\n\t\t\t\t'        ',\n\t\t\t\t'    }',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #67678: indent on typing curly brace', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/67678\n\n\t\tconst model = createTextModel([\n\t\t\t'if (true) {',\n\t\t\t'console.log(\"a\")',\n\t\t\t'console.log(\"b\")',\n\t\t\t'',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(4, 1, 4, 1));\n\t\t\tviewModel.type(\"}\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (true) {',\n\t\t\t\t'    console.log(\"a\")',\n\t\t\t\t'    console.log(\"b\")',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #46401: outdent when encountering bracket on line - allman style indentation', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/46401\n\n\t\tconst model = createTextModel([\n\t\t\t'if (true)',\n\t\t\t'    ',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 5, 2, 5));\n\t\t\tviewModel.type(\"{}\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (true)',\n\t\t\t\t'{}',\n\t\t\t].join('\\n'));\n\t\t\teditor.setSelection(new Selection(2, 2, 2, 2));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (true)',\n\t\t\t\t'{',\n\t\t\t\t'    ',\n\t\t\t\t'}'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #125261: typing closing brace does not keep the current indentation', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/125261\n\n\t\tconst model = createTextModel([\n\t\t\t'foo {',\n\t\t\t'    ',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"keep\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 5, 2, 5));\n\t\t\tviewModel.type(\"}\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'foo {',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Type - Ruby', () => {\n\n\tconst languageId = Language.Ruby;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #198350: in or when incorrectly match non keywords for Ruby', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/198350\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\tviewModel.type(\"def foo\\n        i\");\n\t\t\tviewModel.type(\"n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), \"def foo\\n        in\");\n\t\t\tviewModel.type(\" \", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), \"def foo\\nin \");\n\n\t\t\tviewModel.model.setValue(\"\");\n\t\t\tviewModel.type(\"  # in\");\n\t\t\tassert.strictEqual(model.getValue(), \"  # in\");\n\t\t\tviewModel.type(\" \", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), \"  # in \");\n\t\t});\n\t});\n\n\t// Failing tests...\n\n\ttest.skip('issue #199846: in or when incorrectly match non keywords for Ruby', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/199846\n\t\t// explanation: happening because the # is detected probably as a comment\n\n\t\tconst model = createTextModel(\"\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\tviewModel.type(\"method('#foo') do\");\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t\"method('#foo') do\",\n\t\t\t\t\"    \"\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Type - PHP', () => {\n\n\tconst languageId = Language.PHP;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #199050: should not indent after { detected in a string', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/199050\n\n\t\tconst model = createTextModel(\"preg_replace('{');\", languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\tconst tokens: StandardTokenTypeData[][] = [\n\t\t\t\t[\n\t\t\t\t\t{ startIndex: 0, standardTokenType: StandardTokenType.Other },\n\t\t\t\t\t{ startIndex: 13, standardTokenType: StandardTokenType.String },\n\t\t\t\t\t{ startIndex: 16, standardTokenType: StandardTokenType.Other },\n\t\t\t\t]\n\t\t\t];\n\t\t\tdisposables.add(registerTokenizationSupport(instantiationService, tokens, languageId));\n\t\t\teditor.setSelection(new Selection(1, 54, 1, 54));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t\"preg_replace('{');\",\n\t\t\t\t\"\"\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Paste - Go', () => {\n\n\tconst languageId = Language.Go;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #199050: should not indent after { detected in a string', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/199050\n\n\t\tconst model = createTextModel([\n\t\t\t'var s = `',\n\t\t\t'quick  brown',\n\t\t\t'fox',\n\t\t\t'`',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(3, 1, 3, 1));\n\t\t\tconst text = '  ';\n\t\t\tconst autoIndentOnPasteController = editor.registerAndInstantiateContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste);\n\t\t\tviewModel.paste(text, true, undefined, 'keyboard');\n\t\t\tautoIndentOnPasteController.trigger(new Range(3, 1, 3, 3));\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'var s = `',\n\t\t\t\t'quick  brown',\n\t\t\t\t'  fox',\n\t\t\t\t'`',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Type - CPP', () => {\n\n\tconst languageId = Language.CPP;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #178334: incorrect outdent of } when signature spans multiple lines', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/178334\n\n\t\tconst model = createTextModel([\n\t\t\t'int WINAPI WinMain(bool instance,',\n\t\t\t'    int nshowcmd) {}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 20, 2, 20));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'int WINAPI WinMain(bool instance,',\n\t\t\t\t'    int nshowcmd) {',\n\t\t\t\t'    ',\n\t\t\t\t'}'\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #118929: incorrect indent when // follows curly brace', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/118929\n\n\t\tconst model = createTextModel([\n\t\t\t'if (true) { // jaja',\n\t\t\t'}',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(1, 20, 1, 20));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if (true) { // jaja',\n\t\t\t\t'    ',\n\t\t\t\t'}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n\ttest.skip('issue #111265: auto indentation set to \"none\" still changes the indentation', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/111265\n\n\t\tconst model = createTextModel([\n\t\t\t'int func() {',\n\t\t\t'\t\t',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"none\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 3, 2, 3));\n\t\t\tviewModel.type(\"}\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'int func() {',\n\t\t\t\t'\t\t}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n\n});\n\nsuite('Auto Indent On Type - HTML', () => {\n\n\tconst languageId = Language.HTML;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #61510: incorrect indentation after // in html file', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/178334\n\n\t\tconst model = createTextModel([\n\t\t\t'<pre>',\n\t\t\t'  foo //I press <Enter> at the end of this line',\n\t\t\t'</pre>',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 48, 2, 48));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'<pre>',\n\t\t\t\t'  foo //I press <Enter> at the end of this line',\n\t\t\t\t'  ',\n\t\t\t\t'</pre>',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Type - Visual Basic', () => {\n\n\tconst languageId = Language.VB;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #118932: no indentation in visual basic files', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/118932\n\n\t\tconst model = createTextModel([\n\t\t\t'if True then',\n\t\t\t'    Some code',\n\t\t\t'    end i',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel, instantiationService) => {\n\t\t\teditor.setSelection(new Selection(3, 10, 3, 10));\n\t\t\tviewModel.type(\"f\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'if True then',\n\t\t\t\t'    Some code',\n\t\t\t\t'end if',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\n\nsuite('Auto Indent On Type - Latex', () => {\n\n\tconst languageId = Language.Latex;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #178075: no auto closing pair when indentation done', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/178075\n\n\t\tconst model = createTextModel([\n\t\t\t'\\\\begin{theorem}',\n\t\t\t'    \\\\end',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(2, 9, 2, 9));\n\t\t\tviewModel.type(\"{\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'\\\\begin{theorem}',\n\t\t\t\t'\\\\end{}',\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n\nsuite('Auto Indent On Type - Lua', () => {\n\n\tconst languageId = Language.Lua;\n\tlet disposables: DisposableStore;\n\tlet serviceCollection: ServiceCollection;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst languageService = new LanguageService();\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tdisposables.add(languageService);\n\t\tdisposables.add(languageConfigurationService);\n\t\tdisposables.add(registerLanguage(languageService, languageId));\n\t\tdisposables.add(registerLanguageConfiguration(languageConfigurationService, languageId));\n\t\tserviceCollection = new ServiceCollection(\n\t\t\t[ILanguageService, languageService],\n\t\t\t[ILanguageConfigurationService, languageConfigurationService]\n\t\t);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('temp issue because there should be at least one passing test in a suite', () => {\n\t\tassert.ok(true);\n\t});\n\n\ttest.skip('issue #178075: no auto closing pair when indentation done', () => {\n\n\t\t// https://github.com/microsoft/vscode/issues/178075\n\n\t\tconst model = createTextModel([\n\t\t\t'print(\"asdf function asdf\")',\n\t\t].join('\\n'), languageId, {});\n\t\tdisposables.add(model);\n\n\t\twithTestCodeEditor(model, { autoIndent: \"full\", serviceCollection }, (editor, viewModel) => {\n\t\t\teditor.setSelection(new Selection(1, 28, 1, 28));\n\t\t\tviewModel.type(\"\\n\", 'keyboard');\n\t\t\tassert.strictEqual(model.getValue(), [\n\t\t\t\t'print(\"asdf function asdf\")',\n\t\t\t\t''\n\t\t\t].join('\\n'));\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["Language"]
}
