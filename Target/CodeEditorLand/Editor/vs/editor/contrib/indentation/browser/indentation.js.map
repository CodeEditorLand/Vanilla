{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/indentation/browser/indentation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\tEditorContributionInstantiation,\n\ttype IActionOptions,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n\tregisterEditorContribution,\n} from \"../../../browser/editorExtensions.js\";\nimport { ShiftCommand } from \"../../../common/commands/shiftCommand.js\";\nimport {\n\tEditorAutoIndentStrategy,\n\tEditorOption,\n} from \"../../../common/config/editorOptions.js\";\nimport type { ISingleEditOperation } from \"../../../common/core/editOperation.js\";\nimport type { Position } from \"../../../common/core/position.js\";\nimport { type IRange, Range } from \"../../../common/core/range.js\";\nimport type { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n\tIEditorContribution,\n} from \"../../../common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport { StandardTokenType } from \"../../../common/encodedTokenAttributes.js\";\nimport type { TextEdit } from \"../../../common/languages.js\";\nimport {\n\tgetGoodIndentForLine,\n\tgetIndentMetadata,\n} from \"../../../common/languages/autoIndent.js\";\nimport { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport { IndentConsts } from \"../../../common/languages/supports/indentRules.js\";\nimport type { EndOfLineSequence, ITextModel } from \"../../../common/model.js\";\nimport { IModelService } from \"../../../common/services/model.js\";\nimport { getStandardTokenTypeAtPosition } from \"../../../common/tokens/lineTokens.js\";\nimport * as indentUtils from \"../common/indentUtils.js\";\nimport { getReindentEditOperations } from \"../common/indentation.js\";\n\nexport class IndentationToSpacesAction extends EditorAction {\n\tpublic static readonly ID = \"editor.action.indentationToSpaces\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToSpacesAction.ID,\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"indentationToSpaces\",\n\t\t\t\t\"Convert Indentation to Spaces\",\n\t\t\t),\n\t\t\talias: \"Convert Indentation to Spaces\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"indentationToSpacesDescription\",\n\t\t\t\t\t\"Convert the tab indentation to spaces.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst modelOpts = model.getOptions();\n\t\tconst selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToSpacesCommand(\n\t\t\tselection,\n\t\t\tmodelOpts.tabSize,\n\t\t);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: true,\n\t\t});\n\t}\n}\n\nexport class IndentationToTabsAction extends EditorAction {\n\tpublic static readonly ID = \"editor.action.indentationToTabs\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToTabsAction.ID,\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"indentationToTabs\",\n\t\t\t\t\"Convert Indentation to Tabs\",\n\t\t\t),\n\t\t\talias: \"Convert Indentation to Tabs\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"indentationToTabsDescription\",\n\t\t\t\t\t\"Convert the spaces indentation to tabs.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst modelOpts = model.getOptions();\n\t\tconst selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToTabsCommand(\n\t\t\tselection,\n\t\t\tmodelOpts.tabSize,\n\t\t);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: false,\n\t\t});\n\t}\n}\n\nexport class ChangeIndentationSizeAction extends EditorAction {\n\tconstructor(\n\t\tprivate readonly insertSpaces: boolean,\n\t\tprivate readonly displaySizeOnly: boolean,\n\t\topts: IActionOptions,\n\t) {\n\t\tsuper(opts);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creationOpts = modelService.getCreationOptions(\n\t\t\tmodel.getLanguageId(),\n\t\t\tmodel.uri,\n\t\t\tmodel.isForSimpleWidget,\n\t\t);\n\t\tconst modelOpts = model.getOptions();\n\t\tconst picks = [1, 2, 3, 4, 5, 6, 7, 8].map((n) => ({\n\t\t\tid: n.toString(),\n\t\t\tlabel: n.toString(),\n\t\t\t// add description for tabSize value set in the configuration\n\t\t\tdescription:\n\t\t\t\tn === creationOpts.tabSize && n === modelOpts.tabSize\n\t\t\t\t\t? nls.localize(\"configuredTabSize\", \"Configured Tab Size\")\n\t\t\t\t\t: n === creationOpts.tabSize\n\t\t\t\t\t\t? nls.localize(\"defaultTabSize\", \"Default Tab Size\")\n\t\t\t\t\t\t: n === modelOpts.tabSize\n\t\t\t\t\t\t\t? nls.localize(\"currentTabSize\", \"Current Tab Size\")\n\t\t\t\t\t\t\t: undefined,\n\t\t}));\n\n\t\t// auto focus the tabSize set for the current editor\n\t\tconst autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n\n\t\tsetTimeout(() => {\n\t\t\tquickInputService\n\t\t\t\t.pick(picks, {\n\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"selectTabWidth\",\n\t\t\t\t\t\t\tcomment: [\"Tab corresponds to the tab key\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Select Tab Size for Current File\",\n\t\t\t\t\t),\n\t\t\t\t\tactiveItem: picks[autoFocusIndex],\n\t\t\t\t})\n\t\t\t\t.then((pick) => {\n\t\t\t\t\tif (pick) {\n\t\t\t\t\t\tif (model && !model.isDisposed()) {\n\t\t\t\t\t\t\tconst pickedVal = Number.parseInt(pick.label, 10);\n\t\t\t\t\t\t\tif (this.displaySizeOnly) {\n\t\t\t\t\t\t\t\tmodel.updateOptions({\n\t\t\t\t\t\t\t\t\ttabSize: pickedVal,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmodel.updateOptions({\n\t\t\t\t\t\t\t\t\ttabSize: pickedVal,\n\t\t\t\t\t\t\t\t\tindentSize: pickedVal,\n\t\t\t\t\t\t\t\t\tinsertSpaces: this.insertSpaces,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}, 50 /* quick input is sensitive to being opened so soon after another */);\n\t}\n}\n\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n\tpublic static readonly ID = \"editor.action.indentUsingTabs\";\n\n\tconstructor() {\n\t\tsuper(false, false, {\n\t\t\tid: IndentUsingTabs.ID,\n\t\t\tlabel: nls.localize(\"indentUsingTabs\", \"Indent Using Tabs\"),\n\t\t\talias: \"Indent Using Tabs\",\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"indentUsingTabsDescription\",\n\t\t\t\t\t\"Use indentation with tabs.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n\tpublic static readonly ID = \"editor.action.indentUsingSpaces\";\n\n\tconstructor() {\n\t\tsuper(true, false, {\n\t\t\tid: IndentUsingSpaces.ID,\n\t\t\tlabel: nls.localize(\"indentUsingSpaces\", \"Indent Using Spaces\"),\n\t\t\talias: \"Indent Using Spaces\",\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"indentUsingSpacesDescription\",\n\t\t\t\t\t\"Use indentation with spaces.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n\tpublic static readonly ID = \"editor.action.changeTabDisplaySize\";\n\n\tconstructor() {\n\t\tsuper(true, true, {\n\t\t\tid: ChangeTabDisplaySize.ID,\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"changeTabDisplaySize\",\n\t\t\t\t\"Change Tab Display Size\",\n\t\t\t),\n\t\t\talias: \"Change Tab Display Size\",\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"changeTabDisplaySizeDescription\",\n\t\t\t\t\t\"Change the space size equivalent of the tab.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport class DetectIndentation extends EditorAction {\n\tpublic static readonly ID = \"editor.action.detectIndentation\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DetectIndentation.ID,\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"detectIndentation\",\n\t\t\t\t\"Detect Indentation from Content\",\n\t\t\t),\n\t\t\talias: \"Detect Indentation from Content\",\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"detectIndentationDescription\",\n\t\t\t\t\t\"Detect the indentation from content.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creationOpts = modelService.getCreationOptions(\n\t\t\tmodel.getLanguageId(),\n\t\t\tmodel.uri,\n\t\t\tmodel.isForSimpleWidget,\n\t\t);\n\t\tmodel.detectIndentation(\n\t\t\tcreationOpts.insertSpaces,\n\t\t\tcreationOpts.tabSize,\n\t\t);\n\t}\n}\n\nexport class ReindentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.reindentlines\",\n\t\t\tlabel: nls.localize(\"editor.reindentlines\", \"Reindent Lines\"),\n\t\t\talias: \"Reindent Lines\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"editor.reindentlinesDescription\",\n\t\t\t\t\t\"Reindent the lines of the editor.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(\n\t\t\tILanguageConfigurationService,\n\t\t);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst edits = getReindentEditOperations(\n\t\t\tmodel,\n\t\t\tlanguageConfigurationService,\n\t\t\t1,\n\t\t\tmodel.getLineCount(),\n\t\t);\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class ReindentSelectedLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.reindentselectedlines\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.reindentselectedlines\",\n\t\t\t\t\"Reindent Selected Lines\",\n\t\t\t),\n\t\t\talias: \"Reindent Selected Lines\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"editor.reindentselectedlinesDescription\",\n\t\t\t\t\t\"Reindent the selected lines of the editor.\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(\n\t\t\tILanguageConfigurationService,\n\t\t);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits: ISingleEditOperation[] = [];\n\n\t\tfor (const selection of selections) {\n\t\t\tlet startLineNumber = selection.startLineNumber;\n\t\t\tlet endLineNumber = selection.endLineNumber;\n\n\t\t\tif (\n\t\t\t\tstartLineNumber !== endLineNumber &&\n\t\t\t\tselection.endColumn === 1\n\t\t\t) {\n\t\t\t\tendLineNumber--;\n\t\t\t}\n\n\t\t\tif (startLineNumber === 1) {\n\t\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber--;\n\t\t\t}\n\n\t\t\tconst editOperations = getReindentEditOperations(\n\t\t\t\tmodel,\n\t\t\t\tlanguageConfigurationService,\n\t\t\t\tstartLineNumber,\n\t\t\t\tendLineNumber,\n\t\t\t);\n\t\t\tedits.push(...editOperations);\n\t\t}\n\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class AutoIndentOnPasteCommand implements ICommand {\n\tprivate readonly _edits: {\n\t\trange: IRange;\n\t\ttext: string;\n\t\teol?: EndOfLineSequence;\n\t}[];\n\n\tprivate readonly _initialSelection: Selection;\n\tprivate _selectionId: string | null;\n\n\tconstructor(edits: TextEdit[], initialSelection: Selection) {\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._edits = [];\n\t\tthis._selectionId = null;\n\n\t\tfor (const edit of edits) {\n\t\t\tif (edit.range && typeof edit.text === \"string\") {\n\t\t\t\tthis._edits.push(\n\t\t\t\t\tedit as {\n\t\t\t\t\t\trange: IRange;\n\t\t\t\t\t\ttext: string;\n\t\t\t\t\t\teol?: EndOfLineSequence;\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tfor (const edit of this._edits) {\n\t\t\tbuilder.addEditOperation(Range.lift(edit.range), edit.text);\n\t\t}\n\n\t\tlet selectionIsSet = false;\n\t\tif (\n\t\t\tArray.isArray(this._edits) &&\n\t\t\tthis._edits.length === 1 &&\n\t\t\tthis._initialSelection.isEmpty()\n\t\t) {\n\t\t\tif (\n\t\t\t\tthis._edits[0].range.startColumn ===\n\t\t\t\t\tthis._initialSelection.endColumn &&\n\t\t\t\tthis._edits[0].range.startLineNumber ===\n\t\t\t\t\tthis._initialSelection.endLineNumber\n\t\t\t) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(\n\t\t\t\t\tthis._initialSelection,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\tthis._edits[0].range.endColumn ===\n\t\t\t\t\tthis._initialSelection.startColumn &&\n\t\t\t\tthis._edits[0].range.endLineNumber ===\n\t\t\t\t\tthis._initialSelection.startLineNumber\n\t\t\t) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(\n\t\t\t\t\tthis._initialSelection,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!selectionIsSet) {\n\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t\t}\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\nexport class AutoIndentOnPaste implements IEditorContribution {\n\tpublic static readonly ID = \"editor.contrib.autoIndentOnPaste\";\n\n\tprivate readonly callOnDispose = new DisposableStore();\n\tprivate readonly callOnModel = new DisposableStore();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\n\t\tthis.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n\t\tthis.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n\t\tthis.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n\t}\n\n\tprivate update(): void {\n\t\t// clean up\n\t\tthis.callOnModel.clear();\n\n\t\t// we are disabled\n\t\tif (\n\t\t\tthis.editor.getOption(EditorOption.autoIndent) <\n\t\t\t\tEditorAutoIndentStrategy.Full ||\n\t\t\tthis.editor.getOption(EditorOption.formatOnPaste)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.callOnModel.add(\n\t\t\tthis.editor.onDidPaste(({ range }) => {\n\t\t\t\tthis.trigger(range);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic trigger(range: Range): void {\n\t\tconst selections = this.editor.getSelections();\n\t\tif (selections === null || selections.length > 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst containsOnlyWhitespace =\n\t\t\tthis.rangeContainsOnlyWhitespaceCharacters(model, range);\n\t\tif (containsOnlyWhitespace) {\n\t\t\treturn;\n\t\t}\n\t\tif (isStartOrEndInString(model, range)) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!model.tokenization.isCheapToTokenize(\n\t\t\t\trange.getStartPosition().lineNumber,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst autoIndent = this.editor.getOption(EditorOption.autoIndent);\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tconst textEdits: TextEdit[] = [];\n\n\t\tconst indentConverter = {\n\t\t\tshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(\n\t\t\t\t\tindentation,\n\t\t\t\t\tindentation.length + 1,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tindentSize,\n\t\t\t\t\tinsertSpaces,\n\t\t\t\t);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(\n\t\t\t\t\tindentation,\n\t\t\t\t\tindentation.length + 1,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tindentSize,\n\t\t\t\t\tinsertSpaces,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\n\t\tlet startLineNumber = range.startLineNumber;\n\n\t\twhile (startLineNumber <= range.endLineNumber) {\n\t\t\tif (this.shouldIgnoreLine(model, startLineNumber)) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber > range.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet firstLineText = model.getLineContent(startLineNumber);\n\t\tif (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n\t\t\tconst indentOfFirstLine = getGoodIndentForLine(\n\t\t\t\tautoIndent,\n\t\t\t\tmodel,\n\t\t\t\tmodel.getLanguageId(),\n\t\t\t\tstartLineNumber,\n\t\t\t\tindentConverter,\n\t\t\t\tthis._languageConfigurationService,\n\t\t\t);\n\n\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\tconst oldIndentation =\n\t\t\t\t\tstrings.getLeadingWhitespace(firstLineText);\n\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\tindentOfFirstLine,\n\t\t\t\t\ttabSize,\n\t\t\t\t);\n\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\toldIndentation,\n\t\t\t\t\ttabSize,\n\t\t\t\t);\n\n\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\tconst newIndent = indentUtils.generateIndent(\n\t\t\t\t\t\tnewSpaceCnt,\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t);\n\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\trange: new Range(\n\t\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\t\toldIndentation.length + 1,\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttext: newIndent,\n\t\t\t\t\t});\n\t\t\t\t\tfirstLineText =\n\t\t\t\t\t\tnewIndent +\n\t\t\t\t\t\tfirstLineText.substring(oldIndentation.length);\n\t\t\t\t} else {\n\t\t\t\t\tconst indentMetadata = getIndentMetadata(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tthis._languageConfigurationService,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tindentMetadata === 0 ||\n\t\t\t\t\t\tindentMetadata === IndentConsts.UNINDENT_MASK\n\t\t\t\t\t) {\n\t\t\t\t\t\t// we paste content into a line where only contains whitespaces\n\t\t\t\t\t\t// after pasting, the indentation of the first line is already correct\n\t\t\t\t\t\t// the first line doesn't match any indentation rule\n\t\t\t\t\t\t// then no-op.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst firstLineNumber = startLineNumber;\n\n\t\t// ignore empty or ignored lines\n\t\twhile (startLineNumber < range.endLineNumber) {\n\t\t\tif (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber !== range.endLineNumber) {\n\t\t\tconst virtualModel = {\n\t\t\t\ttokenization: {\n\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t\t},\n\t\t\t\t\tgetLanguageId: () => {\n\t\t\t\t\t\treturn model.getLanguageId();\n\t\t\t\t\t},\n\t\t\t\t\tgetLanguageIdAtPosition: (\n\t\t\t\t\t\tlineNumber: number,\n\t\t\t\t\t\tcolumn: number,\n\t\t\t\t\t) => {\n\t\t\t\t\t\treturn model.getLanguageIdAtPosition(\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\tif (lineNumber === firstLineNumber) {\n\t\t\t\t\t\treturn firstLineText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst indentOfSecondLine = getGoodIndentForLine(\n\t\t\t\tautoIndent,\n\t\t\t\tvirtualModel,\n\t\t\t\tmodel.getLanguageId(),\n\t\t\t\tstartLineNumber + 1,\n\t\t\t\tindentConverter,\n\t\t\t\tthis._languageConfigurationService,\n\t\t\t);\n\t\t\tif (indentOfSecondLine !== null) {\n\t\t\t\tconst newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(\n\t\t\t\t\tindentOfSecondLine,\n\t\t\t\t\ttabSize,\n\t\t\t\t);\n\t\t\t\tconst oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(\n\t\t\t\t\tstrings.getLeadingWhitespace(\n\t\t\t\t\t\tmodel.getLineContent(startLineNumber + 1),\n\t\t\t\t\t),\n\t\t\t\t\ttabSize,\n\t\t\t\t);\n\n\t\t\t\tif (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n\t\t\t\t\tconst spaceCntOffset =\n\t\t\t\t\t\tnewSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet i = startLineNumber + 1;\n\t\t\t\t\t\ti <= range.endLineNumber;\n\t\t\t\t\t\ti++\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\t\t\t\tconst originalIndent =\n\t\t\t\t\t\t\tstrings.getLeadingWhitespace(lineContent);\n\t\t\t\t\t\tconst originalSpacesCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\toriginalIndent,\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n\t\t\t\t\t\tconst newIndent = indentUtils.generateIndent(\n\t\t\t\t\t\t\tnewSpacesCnt,\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\t\t\trange: new Range(\n\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\toriginalIndent.length + 1,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\ttext: newIndent,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (textEdits.length > 0) {\n\t\t\tthis.editor.pushUndoStop();\n\t\t\tconst cmd = new AutoIndentOnPasteCommand(\n\t\t\t\ttextEdits,\n\t\t\t\tthis.editor.getSelection()!,\n\t\t\t);\n\t\t\tthis.editor.executeCommand(\"autoIndentOnPaste\", cmd);\n\t\t\tthis.editor.pushUndoStop();\n\t\t}\n\t}\n\n\tprivate rangeContainsOnlyWhitespaceCharacters(\n\t\tmodel: ITextModel,\n\t\trange: Range,\n\t): boolean {\n\t\tconst lineContainsOnlyWhitespace = (content: string): boolean => {\n\t\t\treturn content.trim().length === 0;\n\t\t};\n\t\tlet containsOnlyWhitespace = true;\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\tconst lineContent = model.getLineContent(range.startLineNumber);\n\t\t\tconst linePart = lineContent.substring(\n\t\t\t\trange.startColumn - 1,\n\t\t\t\trange.endColumn - 1,\n\t\t\t);\n\t\t\tcontainsOnlyWhitespace = lineContainsOnlyWhitespace(linePart);\n\t\t} else {\n\t\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\t\tif (i === range.startLineNumber) {\n\t\t\t\t\tconst linePart = lineContent.substring(\n\t\t\t\t\t\trange.startColumn - 1,\n\t\t\t\t\t);\n\t\t\t\t\tcontainsOnlyWhitespace =\n\t\t\t\t\t\tlineContainsOnlyWhitespace(linePart);\n\t\t\t\t} else if (i === range.endLineNumber) {\n\t\t\t\t\tconst linePart = lineContent.substring(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\trange.endColumn - 1,\n\t\t\t\t\t);\n\t\t\t\t\tcontainsOnlyWhitespace =\n\t\t\t\t\t\tlineContainsOnlyWhitespace(linePart);\n\t\t\t\t} else {\n\t\t\t\t\tcontainsOnlyWhitespace =\n\t\t\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(i) === 0;\n\t\t\t\t}\n\t\t\t\tif (!containsOnlyWhitespace) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containsOnlyWhitespace;\n\t}\n\n\tprivate shouldIgnoreLine(model: ITextModel, lineNumber: number): boolean {\n\t\tmodel.tokenization.forceTokenization(lineNumber);\n\t\tconst nonWhitespaceColumn =\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (nonWhitespaceColumn === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tconst tokens = model.tokenization.getLineTokens(lineNumber);\n\t\tif (tokens.getCount() > 0) {\n\t\t\tconst firstNonWhitespaceTokenIndex =\n\t\t\t\ttokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n\t\t\tif (\n\t\t\t\tfirstNonWhitespaceTokenIndex >= 0 &&\n\t\t\t\ttokens.getStandardTokenType(firstNonWhitespaceTokenIndex) ===\n\t\t\t\t\tStandardTokenType.Comment\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.callOnDispose.dispose();\n\t\tthis.callOnModel.dispose();\n\t}\n}\n\nfunction isStartOrEndInString(model: ITextModel, range: Range): boolean {\n\tconst isPositionInString = (position: Position): boolean => {\n\t\tconst tokenType = getStandardTokenTypeAtPosition(model, position);\n\t\treturn tokenType === StandardTokenType.String;\n\t};\n\treturn (\n\t\tisPositionInString(range.getStartPosition()) ||\n\t\tisPositionInString(range.getEndPosition())\n\t);\n}\n\nfunction getIndentationEditOperations(\n\tmodel: ITextModel,\n\tbuilder: IEditOperationBuilder,\n\ttabSize: number,\n\ttabsToSpaces: boolean,\n): void {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn;\n\t}\n\n\tlet spaces = \"\";\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += \" \";\n\t}\n\n\tconst spacesRegExp = new RegExp(spaces, \"gi\");\n\n\tfor (\n\t\tlet lineNumber = 1, lineCount = model.getLineCount();\n\t\tlineNumber <= lineCount;\n\t\tlineNumber++\n\t) {\n\t\tlet lastIndentationColumn =\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\tif (lastIndentationColumn === 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst originalIndentationRange = new Range(\n\t\t\tlineNumber,\n\t\t\t1,\n\t\t\tlineNumber,\n\t\t\tlastIndentationColumn,\n\t\t);\n\t\tconst originalIndentation = model.getValueInRange(\n\t\t\toriginalIndentationRange,\n\t\t);\n\t\tconst newIndentation = tabsToSpaces\n\t\t\t? originalIndentation.replace(/\\t/gi, spaces)\n\t\t\t: originalIndentation.replace(spacesRegExp, \"\\t\");\n\n\t\tbuilder.addEditOperation(originalIndentationRange, newIndentation);\n\t}\n}\n\nexport class IndentationToSpacesCommand implements ICommand {\n\tprivate selectionId: string | null = null;\n\n\tconstructor(\n\t\tprivate readonly selection: Selection,\n\t\tprivate tabSize: number,\n\t) {}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, true);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n}\n\nexport class IndentationToTabsCommand implements ICommand {\n\tprivate selectionId: string | null = null;\n\n\tconstructor(\n\t\tprivate readonly selection: Selection,\n\t\tprivate tabSize: number,\n\t) {}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, false);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n}\n\nregisterEditorContribution(\n\tAutoIndentOnPaste.ID,\n\tAutoIndentOnPaste,\n\tEditorContributionInstantiation.BeforeFirstInteraction,\n);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);\n"],
  "mappings": "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",
  "names": []
}
