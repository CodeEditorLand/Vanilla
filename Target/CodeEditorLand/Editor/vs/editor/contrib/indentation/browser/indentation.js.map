{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/indentation/browser/indentation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, EditorContributionInstantiation, IActionOptions, registerEditorAction, registerEditorContribution, ServicesAccessor } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditorAutoIndentStrategy, EditorOption } from '../../../common/config/editorOptions.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorContribution } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { EndOfLineSequence, ITextModel } from '../../../common/model.js';\nimport { TextEdit } from '../../../common/languages.js';\nimport { StandardTokenType } from '../../../common/encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IndentConsts } from '../../../common/languages/supports/indentRules.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from '../common/indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getReindentEditOperations } from '../common/indentation.js';\nimport { getStandardTokenTypeAtPosition } from '../../../common/tokens/lineTokens.js';\nimport { Position } from '../../../common/core/position.js';\n\nexport class IndentationToSpacesAction extends EditorAction {\n\tpublic static readonly ID = 'editor.action.indentationToSpaces';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToSpacesAction.ID,\n\t\t\tlabel: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n\t\t\talias: 'Convert Indentation to Spaces',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('indentationToSpacesDescription', \"Convert the tab indentation to spaces.\"),\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst modelOpts = model.getOptions();\n\t\tconst selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: true\n\t\t});\n\t}\n}\n\nexport class IndentationToTabsAction extends EditorAction {\n\tpublic static readonly ID = 'editor.action.indentationToTabs';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToTabsAction.ID,\n\t\t\tlabel: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n\t\t\talias: 'Convert Indentation to Tabs',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('indentationToTabsDescription', \"Convert the spaces indentation to tabs.\"),\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst modelOpts = model.getOptions();\n\t\tconst selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: false\n\t\t});\n\t}\n}\n\nexport class ChangeIndentationSizeAction extends EditorAction {\n\n\tconstructor(private readonly insertSpaces: boolean, private readonly displaySizeOnly: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n\t\tconst modelOpts = model.getOptions();\n\t\tconst picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n\t\t\tid: n.toString(),\n\t\t\tlabel: n.toString(),\n\t\t\t// add description for tabSize value set in the configuration\n\t\t\tdescription: (\n\t\t\t\tn === creationOpts.tabSize && n === modelOpts.tabSize\n\t\t\t\t\t? nls.localize('configuredTabSize', \"Configured Tab Size\")\n\t\t\t\t\t: n === creationOpts.tabSize\n\t\t\t\t\t\t? nls.localize('defaultTabSize', \"Default Tab Size\")\n\t\t\t\t\t\t: n === modelOpts.tabSize\n\t\t\t\t\t\t\t? nls.localize('currentTabSize', \"Current Tab Size\")\n\t\t\t\t\t\t\t: undefined\n\t\t\t)\n\t\t}));\n\n\t\t// auto focus the tabSize set for the current editor\n\t\tconst autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n\n\t\tsetTimeout(() => {\n\t\t\tquickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tif (model && !model.isDisposed()) {\n\t\t\t\t\t\tconst pickedVal = parseInt(pick.label, 10);\n\t\t\t\t\t\tif (this.displaySizeOnly) {\n\t\t\t\t\t\t\tmodel.updateOptions({\n\t\t\t\t\t\t\t\ttabSize: pickedVal\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmodel.updateOptions({\n\t\t\t\t\t\t\t\ttabSize: pickedVal,\n\t\t\t\t\t\t\t\tindentSize: pickedVal,\n\t\t\t\t\t\t\t\tinsertSpaces: this.insertSpaces\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}, 50/* quick input is sensitive to being opened so soon after another */);\n\t}\n}\n\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.indentUsingTabs';\n\n\tconstructor() {\n\t\tsuper(false, false, {\n\t\t\tid: IndentUsingTabs.ID,\n\t\t\tlabel: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n\t\t\talias: 'Indent Using Tabs',\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('indentUsingTabsDescription', \"Use indentation with tabs.\"),\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.indentUsingSpaces';\n\n\tconstructor() {\n\t\tsuper(true, false, {\n\t\t\tid: IndentUsingSpaces.ID,\n\t\t\tlabel: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n\t\t\talias: 'Indent Using Spaces',\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('indentUsingSpacesDescription', \"Use indentation with spaces.\"),\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.changeTabDisplaySize';\n\n\tconstructor() {\n\t\tsuper(true, true, {\n\t\t\tid: ChangeTabDisplaySize.ID,\n\t\t\tlabel: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n\t\t\talias: 'Change Tab Display Size',\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('changeTabDisplaySizeDescription', \"Change the space size equivalent of the tab.\"),\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class DetectIndentation extends EditorAction {\n\n\tpublic static readonly ID = 'editor.action.detectIndentation';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DetectIndentation.ID,\n\t\t\tlabel: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n\t\t\talias: 'Detect Indentation from Content',\n\t\t\tprecondition: undefined,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('detectIndentationDescription', \"Detect the indentation from content.\"),\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n\t\tmodel.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n\t}\n}\n\nexport class ReindentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.reindentlines',\n\t\t\tlabel: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n\t\t\talias: 'Reindent Lines',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('editor.reindentlinesDescription', \"Reindent the lines of the editor.\"),\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class ReindentSelectedLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.reindentselectedlines',\n\t\t\tlabel: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n\t\t\talias: 'Reindent Selected Lines',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('editor.reindentselectedlinesDescription', \"Reindent the selected lines of the editor.\"),\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits: ISingleEditOperation[] = [];\n\n\t\tfor (const selection of selections) {\n\t\t\tlet startLineNumber = selection.startLineNumber;\n\t\t\tlet endLineNumber = selection.endLineNumber;\n\n\t\t\tif (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n\t\t\t\tendLineNumber--;\n\t\t\t}\n\n\t\t\tif (startLineNumber === 1) {\n\t\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber--;\n\t\t\t}\n\n\t\t\tconst editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n\t\t\tedits.push(...editOperations);\n\t\t}\n\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class AutoIndentOnPasteCommand implements ICommand {\n\n\tprivate readonly _edits: { range: IRange; text: string; eol?: EndOfLineSequence }[];\n\n\tprivate readonly _initialSelection: Selection;\n\tprivate _selectionId: string | null;\n\n\tconstructor(edits: TextEdit[], initialSelection: Selection) {\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._edits = [];\n\t\tthis._selectionId = null;\n\n\t\tfor (const edit of edits) {\n\t\t\tif (edit.range && typeof edit.text === 'string') {\n\t\t\t\tthis._edits.push(edit as { range: IRange; text: string; eol?: EndOfLineSequence });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tfor (const edit of this._edits) {\n\t\t\tbuilder.addEditOperation(Range.lift(edit.range), edit.text);\n\t\t}\n\n\t\tlet selectionIsSet = false;\n\t\tif (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n\t\t\tif (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n\t\t\t\tthis._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, true);\n\t\t\t} else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n\t\t\t\tthis._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, false);\n\t\t\t}\n\t\t}\n\n\t\tif (!selectionIsSet) {\n\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\nexport class AutoIndentOnPaste implements IEditorContribution {\n\tpublic static readonly ID = 'editor.contrib.autoIndentOnPaste';\n\n\tprivate readonly callOnDispose = new DisposableStore();\n\tprivate readonly callOnModel = new DisposableStore();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\n\t\tthis.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n\t\tthis.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n\t\tthis.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n\t}\n\n\tprivate update(): void {\n\n\t\t// clean up\n\t\tthis.callOnModel.clear();\n\n\t\t// we are disabled\n\t\tif (this.editor.getOption(EditorOption.autoIndent) < EditorAutoIndentStrategy.Full || this.editor.getOption(EditorOption.formatOnPaste)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.callOnModel.add(this.editor.onDidPaste(({ range }) => {\n\t\t\tthis.trigger(range);\n\t\t}));\n\t}\n\n\tpublic trigger(range: Range): void {\n\t\tconst selections = this.editor.getSelections();\n\t\tif (selections === null || selections.length > 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst containsOnlyWhitespace = this.rangeContainsOnlyWhitespaceCharacters(model, range);\n\t\tif (containsOnlyWhitespace) {\n\t\t\treturn;\n\t\t}\n\t\tif (isStartOrEndInString(model, range)) {\n\t\t\treturn;\n\t\t}\n\t\tif (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n\t\t\treturn;\n\t\t}\n\t\tconst autoIndent = this.editor.getOption(EditorOption.autoIndent);\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tconst textEdits: TextEdit[] = [];\n\n\t\tconst indentConverter = {\n\t\t\tshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t}\n\t\t};\n\n\t\tlet startLineNumber = range.startLineNumber;\n\n\t\twhile (startLineNumber <= range.endLineNumber) {\n\t\t\tif (this.shouldIgnoreLine(model, startLineNumber)) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber > range.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet firstLineText = model.getLineContent(startLineNumber);\n\t\tif (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n\t\t\tconst indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n\n\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(firstLineText);\n\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\n\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\tconst newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\trange: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n\t\t\t\t\t\ttext: newIndent\n\t\t\t\t\t});\n\t\t\t\t\tfirstLineText = newIndent + firstLineText.substring(oldIndentation.length);\n\t\t\t\t} else {\n\t\t\t\t\tconst indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n\n\t\t\t\t\tif (indentMetadata === 0 || indentMetadata === IndentConsts.UNINDENT_MASK) {\n\t\t\t\t\t\t// we paste content into a line where only contains whitespaces\n\t\t\t\t\t\t// after pasting, the indentation of the first line is already correct\n\t\t\t\t\t\t// the first line doesn't match any indentation rule\n\t\t\t\t\t\t// then no-op.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst firstLineNumber = startLineNumber;\n\n\t\t// ignore empty or ignored lines\n\t\twhile (startLineNumber < range.endLineNumber) {\n\t\t\tif (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber !== range.endLineNumber) {\n\t\t\tconst virtualModel = {\n\t\t\t\ttokenization: {\n\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t\t},\n\t\t\t\t\tgetLanguageId: () => {\n\t\t\t\t\t\treturn model.getLanguageId();\n\t\t\t\t\t},\n\t\t\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\tif (lineNumber === firstLineNumber) {\n\t\t\t\t\t\treturn firstLineText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n\t\t\tif (indentOfSecondLine !== null) {\n\t\t\t\tconst newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n\t\t\t\tconst oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n\n\t\t\t\tif (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n\t\t\t\t\tconst spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n\t\t\t\t\tfor (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n\t\t\t\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\t\t\t\tconst originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\t\t\t\tconst originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n\t\t\t\t\t\tconst newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n\t\t\t\t\t\tconst newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n\t\t\t\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\t\t\trange: new Range(i, 1, i, originalIndent.length + 1),\n\t\t\t\t\t\t\t\ttext: newIndent\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (textEdits.length > 0) {\n\t\t\tthis.editor.pushUndoStop();\n\t\t\tconst cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection()!);\n\t\t\tthis.editor.executeCommand('autoIndentOnPaste', cmd);\n\t\t\tthis.editor.pushUndoStop();\n\t\t}\n\t}\n\n\tprivate rangeContainsOnlyWhitespaceCharacters(model: ITextModel, range: Range): boolean {\n\t\tconst lineContainsOnlyWhitespace = (content: string): boolean => {\n\t\t\treturn content.trim().length === 0;\n\t\t};\n\t\tlet containsOnlyWhitespace: boolean = true;\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\tconst lineContent = model.getLineContent(range.startLineNumber);\n\t\t\tconst linePart = lineContent.substring(range.startColumn - 1, range.endColumn - 1);\n\t\t\tcontainsOnlyWhitespace = lineContainsOnlyWhitespace(linePart);\n\t\t} else {\n\t\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\t\tif (i === range.startLineNumber) {\n\t\t\t\t\tconst linePart = lineContent.substring(range.startColumn - 1);\n\t\t\t\t\tcontainsOnlyWhitespace = lineContainsOnlyWhitespace(linePart);\n\t\t\t\t} else if (i === range.endLineNumber) {\n\t\t\t\t\tconst linePart = lineContent.substring(0, range.endColumn - 1);\n\t\t\t\t\tcontainsOnlyWhitespace = lineContainsOnlyWhitespace(linePart);\n\t\t\t\t} else {\n\t\t\t\t\tcontainsOnlyWhitespace = model.getLineFirstNonWhitespaceColumn(i) === 0;\n\t\t\t\t}\n\t\t\t\tif (!containsOnlyWhitespace) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containsOnlyWhitespace;\n\t}\n\n\tprivate shouldIgnoreLine(model: ITextModel, lineNumber: number): boolean {\n\t\tmodel.tokenization.forceTokenization(lineNumber);\n\t\tconst nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (nonWhitespaceColumn === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tconst tokens = model.tokenization.getLineTokens(lineNumber);\n\t\tif (tokens.getCount() > 0) {\n\t\t\tconst firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n\t\t\tif (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === StandardTokenType.Comment) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.callOnDispose.dispose();\n\t\tthis.callOnModel.dispose();\n\t}\n}\n\nfunction isStartOrEndInString(model: ITextModel, range: Range): boolean {\n\tconst isPositionInString = (position: Position): boolean => {\n\t\tconst tokenType = getStandardTokenTypeAtPosition(model, position);\n\t\treturn tokenType === StandardTokenType.String;\n\t};\n\treturn isPositionInString(range.getStartPosition()) || isPositionInString(range.getEndPosition());\n}\n\nfunction getIndentationEditOperations(model: ITextModel, builder: IEditOperationBuilder, tabSize: number, tabsToSpaces: boolean): void {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn;\n\t}\n\n\tlet spaces = '';\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += ' ';\n\t}\n\n\tconst spacesRegExp = new RegExp(spaces, 'gi');\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tlet lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\tif (lastIndentationColumn === 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n\t\tconst originalIndentation = model.getValueInRange(originalIndentationRange);\n\t\tconst newIndentation = (\n\t\t\ttabsToSpaces\n\t\t\t\t? originalIndentation.replace(/\\t/ig, spaces)\n\t\t\t\t: originalIndentation.replace(spacesRegExp, '\\t')\n\t\t);\n\n\t\tbuilder.addEditOperation(originalIndentationRange, newIndentation);\n\t}\n}\n\nexport class IndentationToSpacesCommand implements ICommand {\n\n\tprivate selectionId: string | null = null;\n\n\tconstructor(private readonly selection: Selection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, true);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n}\n\nexport class IndentationToTabsCommand implements ICommand {\n\n\tprivate selectionId: string | null = null;\n\n\tconstructor(private readonly selection: Selection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, false);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n}\n\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, EditorContributionInstantiation.BeforeFirstInteraction);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);\n"],
  "mappings": "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",
  "names": []
}
