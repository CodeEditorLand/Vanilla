{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/semanticTokens/common/semanticTokensConfig.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nexport const SEMANTIC_HIGHLIGHTING_SETTING_ID = \"editor.semanticHighlighting\";\n\nexport interface IEditorSemanticHighlightingOptions {\n\tenabled: true | false | \"configuredByTheme\";\n}\n\nexport function isSemanticColoringEnabled(\n\tmodel: ITextModel,\n\tthemeService: IThemeService,\n\tconfigurationService: IConfigurationService,\n): boolean {\n\tconst setting =\n\t\tconfigurationService.getValue<IEditorSemanticHighlightingOptions>(\n\t\t\tSEMANTIC_HIGHLIGHTING_SETTING_ID,\n\t\t\t{ overrideIdentifier: model.getLanguageId(), resource: model.uri },\n\t\t)?.enabled;\n\tif (typeof setting === \"boolean\") {\n\t\treturn setting;\n\t}\n\treturn themeService.getColorTheme().semanticHighlighting;\n}\n"],
  "mappings": ";;AASO,MAAM,mCAAmC;AAMzC,SAAS,0BACf,OACA,cACA,sBACU;AACV,QAAM,UACL,qBAAqB;AAAA,IACpB;AAAA,IACA,EAAE,oBAAoB,MAAM,cAAc,GAAG,UAAU,MAAM,IAAI;AAAA,EAClE,GAAG;AACJ,MAAI,OAAO,YAAY,WAAW;AACjC,WAAO;AAAA,EACR;AACA,SAAO,aAAa,cAAc,EAAE;AACrC;AAdgB;",
  "names": []
}
