{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/semanticTokens/test/browser/documentSemanticTokens.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Barrier, timeout } from '../../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { DocumentSemanticTokensProvider, SemanticTokens, SemanticTokensEdits, SemanticTokensLegend } from '../../../../common/languages.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { LanguageFeatureDebounceService } from '../../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../../common/services/languageFeatures.js';\nimport { LanguageFeaturesService } from '../../../../common/services/languageFeaturesService.js';\nimport { LanguageService } from '../../../../common/services/languageService.js';\nimport { IModelService } from '../../../../common/services/model.js';\nimport { ModelService } from '../../../../common/services/modelService.js';\nimport { SemanticTokensStylingService } from '../../../../common/services/semanticTokensStylingService.js';\nimport { DocumentSemanticTokensFeature } from '../../browser/documentSemanticTokens.js';\nimport { getDocumentSemanticTokens, isSemanticTokens } from '../../common/getSemanticTokens.js';\nimport { TestLanguageConfigurationService } from '../../../../test/common/modes/testLanguageConfigurationService.js';\nimport { TestTextResourcePropertiesService } from '../../../../test/common/services/testTextResourcePropertiesService.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestDialogService } from '../../../../../platform/dialogs/test/common/testDialogService.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { TestNotificationService } from '../../../../../platform/notification/test/common/testNotificationService.js';\nimport { ColorScheme } from '../../../../../platform/theme/common/theme.js';\nimport { TestColorTheme, TestThemeService } from '../../../../../platform/theme/test/common/testThemeService.js';\nimport { UndoRedoService } from '../../../../../platform/undoRedo/common/undoRedoService.js';\n\nsuite('ModelSemanticColoring', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet modelService: IModelService;\n\tlet languageService: ILanguageService;\n\tlet languageFeaturesService: ILanguageFeaturesService;\n\n\tsetup(() => {\n\t\tconst configService = new TestConfigurationService({ editor: { semanticHighlighting: true } });\n\t\tconst themeService = new TestThemeService();\n\t\tthemeService.setTheme(new TestColorTheme({}, ColorScheme.DARK, true));\n\t\tconst logService = new NullLogService();\n\t\tlanguageFeaturesService = new LanguageFeaturesService();\n\t\tlanguageService = disposables.add(new LanguageService(false));\n\t\tconst semanticTokensStylingService = disposables.add(new SemanticTokensStylingService(themeService, logService, languageService));\n\t\tconst instantiationService = new TestInstantiationService();\n\t\tinstantiationService.set(ILanguageService, languageService);\n\t\tinstantiationService.set(ILanguageConfigurationService, new TestLanguageConfigurationService());\n\t\tmodelService = disposables.add(new ModelService(\n\t\t\tconfigService,\n\t\t\tnew TestTextResourcePropertiesService(configService),\n\t\t\tnew UndoRedoService(new TestDialogService(), new TestNotificationService()),\n\t\t\tinstantiationService\n\t\t));\n\t\tconst envService = new class extends mock<IEnvironmentService>() {\n\t\t\toverride isBuilt: boolean = true;\n\t\t\toverride isExtensionDevelopment: boolean = false;\n\t\t};\n\t\tdisposables.add(new DocumentSemanticTokensFeature(semanticTokensStylingService, modelService, themeService, configService, new LanguageFeatureDebounceService(logService, envService), languageFeaturesService));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('DocumentSemanticTokens should be fetched when the result is empty if there are pending changes', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode' }));\n\n\t\t\tconst inFirstCall = new Barrier();\n\t\t\tconst delayFirstResult = new Barrier();\n\t\t\tconst secondResultProvided = new Barrier();\n\t\t\tlet callCount = 0;\n\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tcallCount++;\n\t\t\t\t\tif (callCount === 1) {\n\t\t\t\t\t\tassert.ok('called once');\n\t\t\t\t\t\tinFirstCall.open();\n\t\t\t\t\t\tawait delayFirstResult.wait();\n\t\t\t\t\t\tawait timeout(0); // wait for the simple scheduler to fire to check that we do actually get rescheduled\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (callCount === 2) {\n\t\t\t\t\t\tassert.ok('called twice');\n\t\t\t\t\t\tsecondResultProvided.open();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tassert.fail('Unexpected call');\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst textModel = disposables.add(modelService.createModel('Hello world', languageService.createById('testMode')));\n\t\t\t// pretend the text model is attached to an editor (so that semantic tokens are computed)\n\t\t\ttextModel.onBeforeAttached();\n\n\t\t\t// wait for the provider to be called\n\t\t\tawait inFirstCall.wait();\n\n\t\t\t// the provider is now in the provide call\n\t\t\t// change the text buffer while the provider is running\n\t\t\ttextModel.applyEdits([{ range: new Range(1, 1, 1, 1), text: 'x' }]);\n\n\t\t\t// let the provider finish its first result\n\t\t\tdelayFirstResult.open();\n\n\t\t\t// we need to check that the provider is called again, even if it returns null\n\t\t\tawait secondResultProvided.wait();\n\n\t\t\t// assert that it got called twice\n\t\t\tassert.strictEqual(callCount, 2);\n\t\t});\n\t});\n\n\ttest('issue #149412: VS Code hangs when bad semantic token data is received', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode' }));\n\n\t\t\tlet lastResult: SemanticTokens | SemanticTokensEdits | null = null;\n\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tif (!lastResultId) {\n\t\t\t\t\t\t// this is the first call\n\t\t\t\t\t\tlastResult = {\n\t\t\t\t\t\t\tresultId: '1',\n\t\t\t\t\t\t\tdata: new Uint32Array([4294967293, 0, 7, 16, 0, 1, 4, 3, 11, 1])\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this is the second call\n\t\t\t\t\t\tlastResult = {\n\t\t\t\t\t\t\tresultId: '2',\n\t\t\t\t\t\t\tedits: [{\n\t\t\t\t\t\t\t\tstart: 4294967276,\n\t\t\t\t\t\t\t\tdeleteCount: 0,\n\t\t\t\t\t\t\t\tdata: new Uint32Array([2, 0, 3, 11, 0])\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn lastResult;\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst textModel = disposables.add(modelService.createModel('', languageService.createById('testMode')));\n\t\t\t// pretend the text model is attached to an editor (so that semantic tokens are computed)\n\t\t\ttextModel.onBeforeAttached();\n\n\t\t\t// wait for the semantic tokens to be fetched\n\t\t\tawait Event.toPromise(textModel.onDidChangeTokens);\n\t\t\tassert.strictEqual(lastResult!.resultId, '1');\n\n\t\t\t// edit the text\n\t\t\ttextModel.applyEdits([{ range: new Range(1, 1, 1, 1), text: 'foo' }]);\n\n\t\t\t// wait for the semantic tokens to be fetched again\n\t\t\tawait Event.toPromise(textModel.onDidChangeTokens);\n\t\t\tassert.strictEqual(lastResult!.resultId, '2');\n\t\t});\n\t});\n\n\ttest('issue #161573: onDidChangeSemanticTokens doesn\\'t consistently trigger provideDocumentSemanticTokens', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode' }));\n\n\t\t\tconst emitter = new Emitter<void>();\n\t\t\tlet requestCount = 0;\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tonDidChange = emitter.event;\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\trequestCount++;\n\t\t\t\t\tif (requestCount === 1) {\n\t\t\t\t\t\tawait timeout(1000);\n\t\t\t\t\t\t// send a change event\n\t\t\t\t\t\temitter.fire();\n\t\t\t\t\t\tawait timeout(1000);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst textModel = disposables.add(modelService.createModel('', languageService.createById('testMode')));\n\t\t\t// pretend the text model is attached to an editor (so that semantic tokens are computed)\n\t\t\ttextModel.onBeforeAttached();\n\n\t\t\tawait timeout(5000);\n\t\t\tassert.deepStrictEqual(requestCount, 2);\n\t\t});\n\t});\n\n\ttest('DocumentSemanticTokens should be pick the token provider with actual items', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tlet callCount = 0;\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode2' }));\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode2', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class1'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tcallCount++;\n\t\t\t\t\t// For a secondary request return a different value\n\t\t\t\t\tif (lastResultId) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: new Uint32Array([2, 1, 1, 1, 1, 0, 2, 1, 1, 1])\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresultId: '1',\n\t\t\t\t\t\tdata: new Uint32Array([0, 1, 1, 1, 1, 0, 2, 1, 1, 1])\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode2', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class2'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tcallCount++;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tfunction toArr(arr: Uint32Array): number[] {\n\t\t\t\tconst result: number[] = [];\n\t\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\t\tresult[i] = arr[i];\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tconst textModel = modelService.createModel('Hello world 2', languageService.createById('testMode2'));\n\t\t\ttry {\n\t\t\t\tlet result = await getDocumentSemanticTokens(languageFeaturesService.documentSemanticTokensProvider, textModel, null, null, CancellationToken.None);\n\t\t\t\tassert.ok(result, `We should have tokens (1)`);\n\t\t\t\tassert.ok(result.tokens, `Tokens are found from multiple providers (1)`);\n\t\t\t\tassert.ok(isSemanticTokens(result.tokens), `Tokens are full (1)`);\n\t\t\t\tassert.ok(result.tokens.resultId, `Token result id found from multiple providers (1)`);\n\t\t\t\tassert.deepStrictEqual(toArr(result.tokens.data), [0, 1, 1, 1, 1, 0, 2, 1, 1, 1], `Token data returned for multiple providers (1)`);\n\t\t\t\tassert.deepStrictEqual(callCount, 2, `Called both token providers (1)`);\n\t\t\t\tassert.deepStrictEqual(result.provider.getLegend(), { tokenTypes: ['class1'], tokenModifiers: [] }, `Legend matches the tokens (1)`);\n\n\t\t\t\t// Make a second request. Make sure we get the secondary value\n\t\t\t\tresult = await getDocumentSemanticTokens(languageFeaturesService.documentSemanticTokensProvider, textModel, result.provider, result.tokens.resultId, CancellationToken.None);\n\t\t\t\tassert.ok(result, `We should have tokens (2)`);\n\t\t\t\tassert.ok(result.tokens, `Tokens are found from multiple providers (2)`);\n\t\t\t\tassert.ok(isSemanticTokens(result.tokens), `Tokens are full (2)`);\n\t\t\t\tassert.ok(!result.tokens.resultId, `Token result id found from multiple providers (2)`);\n\t\t\t\tassert.deepStrictEqual(toArr(result.tokens.data), [2, 1, 1, 1, 1, 0, 2, 1, 1, 1], `Token data returned for multiple providers (2)`);\n\t\t\t\tassert.deepStrictEqual(callCount, 4, `Called both token providers (2)`);\n\t\t\t\tassert.deepStrictEqual(result.provider.getLegend(), { tokenTypes: ['class1'], tokenModifiers: [] }, `Legend matches the tokens (2)`);\n\t\t\t} finally {\n\t\t\t\tdisposables.clear();\n\n\t\t\t\t// Wait for scheduler to finish\n\t\t\t\tawait timeout(0);\n\n\t\t\t\t// Now dispose the text model\n\t\t\t\ttextModel.dispose();\n\t\t\t}\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
