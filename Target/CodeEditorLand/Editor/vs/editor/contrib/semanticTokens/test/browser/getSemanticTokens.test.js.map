{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/semanticTokens/test/browser/getSemanticTokens.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { canceled } from '../../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { LanguageFeatureRegistry } from '../../../../common/languageFeatureRegistry.js';\nimport { DocumentSemanticTokensProvider, ProviderResult, SemanticTokens, SemanticTokensEdits, SemanticTokensLegend } from '../../../../common/languages.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { getDocumentSemanticTokens } from '../../common/getSemanticTokens.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\n\nsuite('getSemanticTokens', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #136540: semantic highlighting flickers', async () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst registry = new LanguageFeatureRegistry<DocumentSemanticTokensProvider>();\n\t\tconst provider = new class implements DocumentSemanticTokensProvider {\n\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\treturn { tokenTypes: ['test'], tokenModifiers: [] };\n\t\t\t}\n\t\t\tprovideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits> {\n\t\t\t\tthrow canceled();\n\t\t\t}\n\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(registry.register('testLang', provider));\n\n\t\tconst textModel = disposables.add(createTextModel('example', 'testLang'));\n\n\t\tawait getDocumentSemanticTokens(registry, textModel, null, null, CancellationToken.None).then((res) => {\n\t\t\tassert.fail();\n\t\t}, (err) => {\n\t\t\tassert.ok(!!err);\n\t\t});\n\n\t\tdisposables.dispose();\n\t});\n\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,yBAAyB;AAClC,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AACxD,SAAS,+BAA+B;AACxC,SAAS,gCAAgC,gBAAgB,gBAAgB,qBAAqB,4BAA4B;AAC1H,SAAS,kBAAkB;AAC3B,SAAS,iCAAiC;AAC1C,SAAS,uBAAuB;AAEhC,MAAM,qBAAqB,MAAM;AAEhC,0CAAwC;AAExC,OAAK,iDAAiD,YAAY;AACjE,UAAM,cAAc,IAAI,gBAAgB;AACxC,UAAM,WAAW,IAAI,wBAAwD;AAC7E,UAAM,WAAW,IAAI,MAAgD;AAAA,MACpE,YAAkC;AACjC,eAAO,EAAE,YAAY,CAAC,MAAM,GAAG,gBAAgB,CAAC,EAAE;AAAA,MACnD;AAAA,MACA,8BAA8B,OAAmB,cAA6B,OAAgF;AAC7J,cAAM,SAAS;AAAA,MAChB;AAAA,MACA,8BAA8B,UAAoC;AAAA,MAClE;AAAA,IACD;AAEA,gBAAY,IAAI,SAAS,SAAS,YAAY,QAAQ,CAAC;AAEvD,UAAM,YAAY,YAAY,IAAI,gBAAgB,WAAW,UAAU,CAAC;AAExE,UAAM,0BAA0B,UAAU,WAAW,MAAM,MAAM,kBAAkB,IAAI,EAAE,KAAK,CAAC,QAAQ;AACtG,aAAO,KAAK;AAAA,IACb,GAAG,CAAC,QAAQ;AACX,aAAO,GAAG,CAAC,CAAC,GAAG;AAAA,IAChB,CAAC;AAED,gBAAY,QAAQ;AAAA,EACrB,CAAC;AAEF,CAAC;",
  "names": []
}
