{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/clipboard/browser/clipboard.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from '../../../../base/browser/browser.js';\nimport { getActiveDocument } from '../../../../base/browser/dom.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/editContext/clipboardUtils.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { Command, EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Handler } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyPasteController } from '../../dropOrPasteInto/browser/copyPasteController.js';\n\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\n\nconst supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\nconst supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste = (typeof navigator.clipboard === 'undefined' || browser.isFirefox) ? document.queryCommandSupported('paste') : true;\n\nfunction registerCommand<T extends Command>(command: T): T {\n\tcommand.register();\n\treturn command;\n}\n\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n\tid: 'editor.action.clipboardCutAction',\n\tprecondition: undefined,\n\tkbOpts: (\n\t\t// Do not bind cut keybindings in the browser,\n\t\t// since browsers do that for us and it avoids security prompts\n\t\tplatform.isNative ? {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyX,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyX, secondary: [KeyMod.Shift | KeyCode.Delete] },\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t} : undefined\n\t),\n\tmenuOpts: [{\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '2_ccp',\n\t\ttitle: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n\t\torder: 1\n\t}, {\n\t\tmenuId: MenuId.EditorContext,\n\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\ttitle: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n\t\twhen: EditorContextKeys.writable,\n\t\torder: 1,\n\t}, {\n\t\tmenuId: MenuId.CommandPalette,\n\t\tgroup: '',\n\t\ttitle: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n\t\torder: 1\n\t}, {\n\t\tmenuId: MenuId.SimpleEditorContext,\n\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\ttitle: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n\t\twhen: EditorContextKeys.writable,\n\t\torder: 1,\n\t}]\n})) : undefined;\n\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n\tid: 'editor.action.clipboardCopyAction',\n\tprecondition: undefined,\n\tkbOpts: (\n\t\t// Do not bind copy keybindings in the browser,\n\t\t// since browsers do that for us and it avoids security prompts\n\t\tplatform.isNative ? {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyC, secondary: [KeyMod.CtrlCmd | KeyCode.Insert] },\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t} : undefined\n\t),\n\tmenuOpts: [{\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '2_ccp',\n\t\ttitle: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n\t\torder: 2\n\t}, {\n\t\tmenuId: MenuId.EditorContext,\n\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\ttitle: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n\t\torder: 2,\n\t}, {\n\t\tmenuId: MenuId.CommandPalette,\n\t\tgroup: '',\n\t\ttitle: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n\t\torder: 1\n\t}, {\n\t\tmenuId: MenuId.SimpleEditorContext,\n\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\ttitle: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n\t\torder: 2,\n\t}]\n})) : undefined;\n\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: nls.localize2('copy as', \"Copy As\"), group: '2_ccp', order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: nls.localize2('copy as', \"Copy As\"), group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextShare, title: nls.localize2('share', \"Share\"), group: '11_share', order: -1, when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus) });\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, { submenu: MenuId.ExplorerContextShare, title: nls.localize2('share', \"Share\"), group: '11_share', order: -1 });\n\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n\tid: 'editor.action.clipboardPasteAction',\n\tprecondition: undefined,\n\tkbOpts: (\n\t\t// Do not bind paste keybindings in the browser,\n\t\t// since browsers do that for us and it avoids security prompts\n\t\tplatform.isNative ? {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyV, secondary: [KeyMod.Shift | KeyCode.Insert] },\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyCode.KeyV, secondary: [KeyMod.Shift | KeyCode.Insert] },\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t} : undefined\n\t),\n\tmenuOpts: [{\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '2_ccp',\n\t\ttitle: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n\t\torder: 4\n\t}, {\n\t\tmenuId: MenuId.EditorContext,\n\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\ttitle: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n\t\twhen: EditorContextKeys.writable,\n\t\torder: 4,\n\t}, {\n\t\tmenuId: MenuId.CommandPalette,\n\t\tgroup: '',\n\t\ttitle: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n\t\torder: 1\n\t}, {\n\t\tmenuId: MenuId.SimpleEditorContext,\n\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\ttitle: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n\t\twhen: EditorContextKeys.writable,\n\t\torder: 4,\n\t}]\n})) : undefined;\n\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n\t\t\tlabel: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n\t\t\talias: 'Copy With Syntax Highlighting',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst emptySelectionClipboard = editor.getOption(EditorOption.emptySelectionClipboard);\n\n\t\tif (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tCopyOptions.forceCopyWithSyntaxHighlighting = true;\n\t\teditor.focus();\n\t\teditor.getContainerDomNode().ownerDocument.execCommand('copy');\n\t\tCopyOptions.forceCopyWithSyntaxHighlighting = false;\n\t}\n}\n\nfunction registerExecCommandImpl(target: MultiCommand | undefined, browserCommand: 'cut' | 'copy'): void {\n\tif (!target) {\n\t\treturn;\n\t}\n\n\t// 1. handle case when focus is in editor.\n\ttarget.addImplementation(10000, 'code-editor', (accessor: ServicesAccessor, args: any) => {\n\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\tconst focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\t// Do not execute if there is no selection and empty selection clipboard is off\n\t\t\tconst emptySelectionClipboard = focusedEditor.getOption(EditorOption.emptySelectionClipboard);\n\t\t\tconst selection = focusedEditor.getSelection();\n\t\t\tif (selection && selection.isEmpty() && !emptySelectionClipboard) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// TODO this is very ugly. The entire copy/paste/cut system needs a complete refactoring.\n\t\t\tif (focusedEditor.getOption(EditorOption.experimentalEditContextEnabled) && browserCommand === 'cut') {\n\t\t\t\t// execCommand(copy) works for edit context, but not execCommand(cut).\n\t\t\t\tfocusedEditor.getContainerDomNode().ownerDocument.execCommand('copy');\n\t\t\t\tfocusedEditor.trigger(undefined, Handler.Cut, undefined);\n\t\t\t} else {\n\t\t\t\tfocusedEditor.getContainerDomNode().ownerDocument.execCommand(browserCommand);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n\n\t// 2. (default) handle case when focus is somewhere else.\n\ttarget.addImplementation(0, 'generic-dom', (accessor: ServicesAccessor, args: any) => {\n\t\tgetActiveDocument().execCommand(browserCommand);\n\t\treturn true;\n\t});\n}\n\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\n\nif (PasteAction) {\n\t// 1. Paste: handle case when focus is in editor.\n\tPasteAction.addImplementation(10000, 'code-editor', (accessor: ServicesAccessor, args: any) => {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\tconst focusedEditor = codeEditorService.getFocusedCodeEditor();\n\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\t// execCommand(paste) does not work with edit context\n\t\t\tconst canDoDocumentExecCommand = !focusedEditor.getOption(EditorOption.experimentalEditContextEnabled);\n\t\t\tconst result = canDoDocumentExecCommand && focusedEditor.getContainerDomNode().ownerDocument.execCommand('paste');\n\t\t\tif (result) {\n\t\t\t\treturn CopyPasteController.get(focusedEditor)?.finishedPaste() ?? Promise.resolve();\n\t\t\t} else if (platform.isWeb || !canDoDocumentExecCommand) {\n\t\t\t\t// Use the clipboard service if document.execCommand('paste') was not successful\n\t\t\t\treturn (async () => {\n\t\t\t\t\tconst clipboardText = await clipboardService.readText();\n\t\t\t\t\tif (clipboardText !== '') {\n\t\t\t\t\t\tconst metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n\t\t\t\t\t\tlet pasteOnNewLine = false;\n\t\t\t\t\t\tlet multicursorText: string[] | null = null;\n\t\t\t\t\t\tlet mode: string | null = null;\n\t\t\t\t\t\tif (metadata) {\n\t\t\t\t\t\t\tpasteOnNewLine = (focusedEditor.getOption(EditorOption.emptySelectionClipboard) && !!metadata.isFromEmptySelection);\n\t\t\t\t\t\t\tmulticursorText = (typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null);\n\t\t\t\t\t\t\tmode = metadata.mode;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfocusedEditor.trigger('keyboard', Handler.Paste, {\n\t\t\t\t\t\t\ttext: clipboardText,\n\t\t\t\t\t\t\tpasteOnNewLine,\n\t\t\t\t\t\t\tmulticursorText,\n\t\t\t\t\t\t\tmode\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n\n\t// 2. Paste: (default) handle case when focus is somewhere else.\n\tPasteAction.addImplementation(0, 'generic-dom', (accessor: ServicesAccessor, args: any) => {\n\t\tgetActiveDocument().execCommand('paste');\n\t\treturn true;\n\t});\n}\n\nif (supportsCopy) {\n\tregisterEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n"],
  "mappings": "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",
  "names": []
}
