{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/clipboard/browser/clipboard.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from \"../../../../base/browser/browser.js\";\nimport { getActiveDocument } from \"../../../../base/browser/dom.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tCopyOptions,\n\tInMemoryClipboardMetadataManager,\n} from \"../../../browser/controller/editContext/clipboardUtils.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\ttype Command,\n\tEditorAction,\n\tMultiCommand,\n\tregisterEditorAction,\n} from \"../../../browser/editorExtensions.js\";\nimport { ICodeEditorService } from \"../../../browser/services/codeEditorService.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Handler } from \"../../../common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport { CopyPasteController } from \"../../dropOrPasteInto/browser/copyPasteController.js\";\n\nconst CLIPBOARD_CONTEXT_MENU_GROUP = \"9_cutcopypaste\";\n\nconst supportsCut = platform.isNative || document.queryCommandSupported(\"cut\");\nconst supportsCopy =\n\tplatform.isNative || document.queryCommandSupported(\"copy\");\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste =\n\ttypeof navigator.clipboard === \"undefined\" || browser.isFirefox\n\t\t? document.queryCommandSupported(\"paste\")\n\t\t: true;\n\nfunction registerCommand<T extends Command>(command: T): T {\n\tcommand.register();\n\treturn command;\n}\n\nexport const CutAction = supportsCut\n\t? registerCommand(\n\t\t\tnew MultiCommand({\n\t\t\t\tid: \"editor.action.clipboardCutAction\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts:\n\t\t\t\t\t// Do not bind cut keybindings in the browser,\n\t\t\t\t\t// since browsers do that for us and it avoids security prompts\n\t\t\t\t\tplatform.isNative\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyX,\n\t\t\t\t\t\t\t\twin: {\n\t\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyX,\n\t\t\t\t\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Delete],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\tmenuOpts: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\t\t\tgroup: \"2_ccp\",\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"miCut\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Cu&&t\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.cutLabel\",\n\t\t\t\t\t\t\t\"Cut\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\twhen: EditorContextKeys.writable,\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.CommandPalette,\n\t\t\t\t\t\tgroup: \"\",\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.cutLabel\",\n\t\t\t\t\t\t\t\"Cut\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.SimpleEditorContext,\n\t\t\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.cutLabel\",\n\t\t\t\t\t\t\t\"Cut\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\twhen: EditorContextKeys.writable,\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t)\n\t: undefined;\n\nexport const CopyAction = supportsCopy\n\t? registerCommand(\n\t\t\tnew MultiCommand({\n\t\t\t\tid: \"editor.action.clipboardCopyAction\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts:\n\t\t\t\t\t// Do not bind copy keybindings in the browser,\n\t\t\t\t\t// since browsers do that for us and it avoids security prompts\n\t\t\t\t\tplatform.isNative\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t\t\t\t\t\twin: {\n\t\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t\t\t\t\t\t\tsecondary: [\n\t\t\t\t\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Insert,\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\tmenuOpts: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\t\t\tgroup: \"2_ccp\",\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"miCopy\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Copy\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.copyLabel\",\n\t\t\t\t\t\t\t\"Copy\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.CommandPalette,\n\t\t\t\t\t\tgroup: \"\",\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.copyLabel\",\n\t\t\t\t\t\t\t\"Copy\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.SimpleEditorContext,\n\t\t\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.copyLabel\",\n\t\t\t\t\t\t\t\"Copy\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 2,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t)\n\t: undefined;\n\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, {\n\tsubmenu: MenuId.MenubarCopy,\n\ttitle: nls.localize2(\"copy as\", \"Copy As\"),\n\tgroup: \"2_ccp\",\n\torder: 3,\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n\tsubmenu: MenuId.EditorContextCopy,\n\ttitle: nls.localize2(\"copy as\", \"Copy As\"),\n\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\torder: 3,\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n\tsubmenu: MenuId.EditorContextShare,\n\ttitle: nls.localize2(\"share\", \"Share\"),\n\tgroup: \"11_share\",\n\torder: -1,\n\twhen: ContextKeyExpr.and(\n\t\tContextKeyExpr.notEquals(\"resourceScheme\", \"output\"),\n\t\tEditorContextKeys.editorTextFocus,\n\t),\n});\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n\tsubmenu: MenuId.ExplorerContextShare,\n\ttitle: nls.localize2(\"share\", \"Share\"),\n\tgroup: \"11_share\",\n\torder: -1,\n});\n\nexport const PasteAction = supportsPaste\n\t? registerCommand(\n\t\t\tnew MultiCommand({\n\t\t\t\tid: \"editor.action.clipboardPasteAction\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts:\n\t\t\t\t\t// Do not bind paste keybindings in the browser,\n\t\t\t\t\t// since browsers do that for us and it avoids security prompts\n\t\t\t\t\tplatform.isNative\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\t\t\t\t\t\twin: {\n\t\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\t\t\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Insert],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\t\t\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Insert],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\tmenuOpts: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\t\t\tgroup: \"2_ccp\",\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"miPaste\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Paste\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 4,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.pasteLabel\",\n\t\t\t\t\t\t\t\"Paste\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\twhen: EditorContextKeys.writable,\n\t\t\t\t\t\torder: 4,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.CommandPalette,\n\t\t\t\t\t\tgroup: \"\",\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.pasteLabel\",\n\t\t\t\t\t\t\t\"Paste\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmenuId: MenuId.SimpleEditorContext,\n\t\t\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\t\"actions.clipboard.pasteLabel\",\n\t\t\t\t\t\t\t\"Paste\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\twhen: EditorContextKeys.writable,\n\t\t\t\t\t\torder: 4,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t)\n\t: undefined;\n\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.clipboardCopyWithSyntaxHighlightingAction\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"actions.clipboard.copyWithSyntaxHighlightingLabel\",\n\t\t\t\t\"Copy With Syntax Highlighting\",\n\t\t\t),\n\t\t\talias: \"Copy With Syntax Highlighting\",\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst emptySelectionClipboard = editor.getOption(\n\t\t\tEditorOption.emptySelectionClipboard,\n\t\t);\n\n\t\tif (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tCopyOptions.forceCopyWithSyntaxHighlighting = true;\n\t\teditor.focus();\n\t\teditor.getContainerDomNode().ownerDocument.execCommand(\"copy\");\n\t\tCopyOptions.forceCopyWithSyntaxHighlighting = false;\n\t}\n}\n\nfunction registerExecCommandImpl(\n\ttarget: MultiCommand | undefined,\n\tbrowserCommand: \"cut\" | \"copy\",\n): void {\n\tif (!target) {\n\t\treturn;\n\t}\n\n\t// 1. handle case when focus is in editor.\n\ttarget.addImplementation(\n\t\t10000,\n\t\t\"code-editor\",\n\t\t(accessor: ServicesAccessor, args: any) => {\n\t\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\t\tconst focusedEditor = accessor\n\t\t\t\t.get(ICodeEditorService)\n\t\t\t\t.getFocusedCodeEditor();\n\t\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\t\t// Do not execute if there is no selection and empty selection clipboard is off\n\t\t\t\tconst emptySelectionClipboard = focusedEditor.getOption(\n\t\t\t\t\tEditorOption.emptySelectionClipboard,\n\t\t\t\t);\n\t\t\t\tconst selection = focusedEditor.getSelection();\n\t\t\t\tif (\n\t\t\t\t\tselection &&\n\t\t\t\t\tselection.isEmpty() &&\n\t\t\t\t\t!emptySelectionClipboard\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// TODO this is very ugly. The entire copy/paste/cut system needs a complete refactoring.\n\t\t\t\tif (\n\t\t\t\t\tfocusedEditor.getOption(\n\t\t\t\t\t\tEditorOption.experimentalEditContextEnabled,\n\t\t\t\t\t) &&\n\t\t\t\t\tbrowserCommand === \"cut\"\n\t\t\t\t) {\n\t\t\t\t\t// execCommand(copy) works for edit context, but not execCommand(cut).\n\t\t\t\t\tfocusedEditor\n\t\t\t\t\t\t.getContainerDomNode()\n\t\t\t\t\t\t.ownerDocument.execCommand(\"copy\");\n\t\t\t\t\tfocusedEditor.trigger(undefined, Handler.Cut, undefined);\n\t\t\t\t} else {\n\t\t\t\t\tfocusedEditor\n\t\t\t\t\t\t.getContainerDomNode()\n\t\t\t\t\t\t.ownerDocument.execCommand(browserCommand);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t);\n\n\t// 2. (default) handle case when focus is somewhere else.\n\ttarget.addImplementation(\n\t\t0,\n\t\t\"generic-dom\",\n\t\t(accessor: ServicesAccessor, args: any) => {\n\t\t\tgetActiveDocument().execCommand(browserCommand);\n\t\t\treturn true;\n\t\t},\n\t);\n}\n\nregisterExecCommandImpl(CutAction, \"cut\");\nregisterExecCommandImpl(CopyAction, \"copy\");\n\nif (PasteAction) {\n\t// 1. Paste: handle case when focus is in editor.\n\tPasteAction.addImplementation(\n\t\t10000,\n\t\t\"code-editor\",\n\t\t(accessor: ServicesAccessor, args: any) => {\n\t\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\t\tconst focusedEditor = codeEditorService.getFocusedCodeEditor();\n\t\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\t\t// execCommand(paste) does not work with edit context\n\t\t\t\tconst canDoDocumentExecCommand = !focusedEditor.getOption(\n\t\t\t\t\tEditorOption.experimentalEditContextEnabled,\n\t\t\t\t);\n\t\t\t\tconst result =\n\t\t\t\t\tcanDoDocumentExecCommand &&\n\t\t\t\t\tfocusedEditor\n\t\t\t\t\t\t.getContainerDomNode()\n\t\t\t\t\t\t.ownerDocument.execCommand(\"paste\");\n\t\t\t\tif (result) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tCopyPasteController.get(\n\t\t\t\t\t\t\tfocusedEditor,\n\t\t\t\t\t\t)?.finishedPaste() ?? Promise.resolve()\n\t\t\t\t\t);\n\t\t\t\t} else if (platform.isWeb || !canDoDocumentExecCommand) {\n\t\t\t\t\t// Use the clipboard service if document.execCommand('paste') was not successful\n\t\t\t\t\treturn (async () => {\n\t\t\t\t\t\tconst clipboardText = await clipboardService.readText();\n\t\t\t\t\t\tif (clipboardText !== \"\") {\n\t\t\t\t\t\t\tconst metadata =\n\t\t\t\t\t\t\t\tInMemoryClipboardMetadataManager.INSTANCE.get(\n\t\t\t\t\t\t\t\t\tclipboardText,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tlet pasteOnNewLine = false;\n\t\t\t\t\t\t\tlet multicursorText: string[] | null = null;\n\t\t\t\t\t\t\tlet mode: string | null = null;\n\t\t\t\t\t\t\tif (metadata) {\n\t\t\t\t\t\t\t\tpasteOnNewLine =\n\t\t\t\t\t\t\t\t\tfocusedEditor.getOption(\n\t\t\t\t\t\t\t\t\t\tEditorOption.emptySelectionClipboard,\n\t\t\t\t\t\t\t\t\t) && !!metadata.isFromEmptySelection;\n\t\t\t\t\t\t\t\tmulticursorText =\n\t\t\t\t\t\t\t\t\ttypeof metadata.multicursorText !==\n\t\t\t\t\t\t\t\t\t\"undefined\"\n\t\t\t\t\t\t\t\t\t\t? metadata.multicursorText\n\t\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\t\tmode = metadata.mode;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfocusedEditor.trigger(\"keyboard\", Handler.Paste, {\n\t\t\t\t\t\t\t\ttext: clipboardText,\n\t\t\t\t\t\t\t\tpasteOnNewLine,\n\t\t\t\t\t\t\t\tmulticursorText,\n\t\t\t\t\t\t\t\tmode,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t);\n\n\t// 2. Paste: (default) handle case when focus is somewhere else.\n\tPasteAction.addImplementation(\n\t\t0,\n\t\t\"generic-dom\",\n\t\t(accessor: ServicesAccessor, args: any) => {\n\t\t\tgetActiveDocument().execCommand(\"paste\");\n\t\t\treturn true;\n\t\t},\n\t);\n}\n\nif (supportsCopy) {\n\tregisterEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n"],
  "mappings": "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",
  "names": []
}
