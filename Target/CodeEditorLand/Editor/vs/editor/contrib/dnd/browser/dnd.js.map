{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dnd/browser/dnd.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport type { IMouseEvent } from \"../../../../base/browser/mouseEvent.js\";\nimport { KeyCode } from \"../../../../base/common/keyCodes.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport \"./dnd.css\";\nimport {\n\ttype ICodeEditor,\n\ttype IEditorMouseEvent,\n\ttype IMouseTarget,\n\ttype IPartialEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorContributionInstantiation,\n\tregisterEditorContribution,\n} from \"../../../browser/editorExtensions.js\";\nimport type { CodeEditorWidget } from \"../../../browser/widget/codeEditor/codeEditorWidget.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport { CursorChangeReason } from \"../../../common/cursorEvents.js\";\nimport {\n\ttype IEditorContribution,\n\ttype IEditorDecorationsCollection,\n\tScrollType,\n} from \"../../../common/editorCommon.js\";\nimport { ModelDecorationOptions } from \"../../../common/model/textModel.js\";\nimport { DragAndDropCommand } from \"./dragAndDropCommand.js\";\n\nfunction hasTriggerModifier(e: IKeyboardEvent | IMouseEvent): boolean {\n\tif (isMacintosh) {\n\t\treturn e.altKey;\n\t} else {\n\t\treturn e.ctrlKey;\n\t}\n}\n\nexport class DragAndDropController\n\textends Disposable\n\timplements IEditorContribution\n{\n\tpublic static readonly ID = \"editor.contrib.dragAndDrop\";\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _dragSelection: Selection | null;\n\tprivate readonly _dndDecorationIds: IEditorDecorationsCollection;\n\tprivate _mouseDown: boolean;\n\tprivate _modifierPressed: boolean;\n\tstatic readonly TRIGGER_KEY_VALUE = isMacintosh\n\t\t? KeyCode.Alt\n\t\t: KeyCode.Ctrl;\n\n\tstatic get(editor: ICodeEditor): DragAndDropController | null {\n\t\treturn editor.getContribution<DragAndDropController>(\n\t\t\tDragAndDropController.ID,\n\t\t);\n\t}\n\n\tconstructor(editor: ICodeEditor) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._dndDecorationIds = this._editor.createDecorationsCollection();\n\t\tthis._register(\n\t\t\tthis._editor.onMouseDown((e: IEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseDown(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseUp((e: IEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseUp(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseDrag((e: IEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseDrag(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseDrop((e: IPartialEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseDrop(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseDropCanceled(() =>\n\t\t\t\tthis._onEditorMouseDropCanceled(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onKeyDown((e: IKeyboardEvent) =>\n\t\t\t\tthis.onEditorKeyDown(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onKeyUp((e: IKeyboardEvent) => this.onEditorKeyUp(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onDidBlurEditorWidget(() => this.onEditorBlur()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onDidBlurEditorText(() => this.onEditorBlur()),\n\t\t);\n\t\tthis._mouseDown = false;\n\t\tthis._modifierPressed = false;\n\t\tthis._dragSelection = null;\n\t}\n\n\tprivate onEditorBlur() {\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t\tthis._modifierPressed = false;\n\t}\n\n\tprivate onEditorKeyDown(e: IKeyboardEvent): void {\n\t\tif (\n\t\t\t!this._editor.getOption(EditorOption.dragAndDrop) ||\n\t\t\tthis._editor.getOption(EditorOption.columnSelection)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (hasTriggerModifier(e)) {\n\t\t\tthis._modifierPressed = true;\n\t\t}\n\n\t\tif (this._mouseDown && hasTriggerModifier(e)) {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: \"copy\",\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onEditorKeyUp(e: IKeyboardEvent): void {\n\t\tif (\n\t\t\t!this._editor.getOption(EditorOption.dragAndDrop) ||\n\t\t\tthis._editor.getOption(EditorOption.columnSelection)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (hasTriggerModifier(e)) {\n\t\t\tthis._modifierPressed = false;\n\t\t}\n\n\t\tif (\n\t\t\tthis._mouseDown &&\n\t\t\te.keyCode === DragAndDropController.TRIGGER_KEY_VALUE\n\t\t) {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: \"default\",\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _onEditorMouseDown(mouseEvent: IEditorMouseEvent): void {\n\t\tthis._mouseDown = true;\n\t}\n\n\tprivate _onEditorMouseUp(mouseEvent: IEditorMouseEvent): void {\n\t\tthis._mouseDown = false;\n\t\t// Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n\t\tthis._editor.updateOptions({\n\t\t\tmouseStyle: \"text\",\n\t\t});\n\t}\n\n\tprivate _onEditorMouseDrag(mouseEvent: IEditorMouseEvent): void {\n\t\tconst target = mouseEvent.target;\n\n\t\tif (this._dragSelection === null) {\n\t\t\tconst selections = this._editor.getSelections() || [];\n\t\t\tconst possibleSelections = selections.filter(\n\t\t\t\t(selection) =>\n\t\t\t\t\ttarget.position &&\n\t\t\t\t\tselection.containsPosition(target.position),\n\t\t\t);\n\t\t\tif (possibleSelections.length === 1) {\n\t\t\t\tthis._dragSelection = possibleSelections[0];\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (hasTriggerModifier(mouseEvent.event)) {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: \"copy\",\n\t\t\t});\n\t\t} else {\n\t\t\tthis._editor.updateOptions({\n\t\t\t\tmouseStyle: \"default\",\n\t\t\t});\n\t\t}\n\n\t\tif (target.position) {\n\t\t\tif (this._dragSelection.containsPosition(target.position)) {\n\t\t\t\tthis._removeDecoration();\n\t\t\t} else {\n\t\t\t\tthis.showAt(target.position);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _onEditorMouseDropCanceled() {\n\t\tthis._editor.updateOptions({\n\t\t\tmouseStyle: \"text\",\n\t\t});\n\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t}\n\n\tprivate _onEditorMouseDrop(mouseEvent: IPartialEditorMouseEvent): void {\n\t\tif (\n\t\t\tmouseEvent.target &&\n\t\t\t(this._hitContent(mouseEvent.target) ||\n\t\t\t\tthis._hitMargin(mouseEvent.target)) &&\n\t\t\tmouseEvent.target.position\n\t\t) {\n\t\t\tconst newCursorPosition = new Position(\n\t\t\t\tmouseEvent.target.position.lineNumber,\n\t\t\t\tmouseEvent.target.position.column,\n\t\t\t);\n\n\t\t\tif (this._dragSelection === null) {\n\t\t\t\tlet newSelections: Selection[] | null = null;\n\t\t\t\tif (mouseEvent.event.shiftKey) {\n\t\t\t\t\tconst primarySelection = this._editor.getSelection();\n\t\t\t\t\tif (primarySelection) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tselectionStartLineNumber,\n\t\t\t\t\t\t\tselectionStartColumn,\n\t\t\t\t\t\t} = primarySelection;\n\t\t\t\t\t\tnewSelections = [\n\t\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\t\tselectionStartLineNumber,\n\t\t\t\t\t\t\t\tselectionStartColumn,\n\t\t\t\t\t\t\t\tnewCursorPosition.lineNumber,\n\t\t\t\t\t\t\t\tnewCursorPosition.column,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnewSelections = (this._editor.getSelections() || []).map(\n\t\t\t\t\t\t(selection) => {\n\t\t\t\t\t\t\tif (selection.containsPosition(newCursorPosition)) {\n\t\t\t\t\t\t\t\treturn new Selection(\n\t\t\t\t\t\t\t\t\tnewCursorPosition.lineNumber,\n\t\t\t\t\t\t\t\t\tnewCursorPosition.column,\n\t\t\t\t\t\t\t\t\tnewCursorPosition.lineNumber,\n\t\t\t\t\t\t\t\t\tnewCursorPosition.column,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn selection;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Use `mouse` as the source instead of `api` and setting the reason to explicit (to behave like any other mouse operation).\n\t\t\t\t(<CodeEditorWidget>this._editor).setSelections(\n\t\t\t\t\tnewSelections || [],\n\t\t\t\t\t\"mouse\",\n\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\t!this._dragSelection.containsPosition(newCursorPosition) ||\n\t\t\t\t((hasTriggerModifier(mouseEvent.event) ||\n\t\t\t\t\tthis._modifierPressed) &&\n\t\t\t\t\t(this._dragSelection\n\t\t\t\t\t\t.getEndPosition()\n\t\t\t\t\t\t.equals(newCursorPosition) ||\n\t\t\t\t\t\tthis._dragSelection\n\t\t\t\t\t\t\t.getStartPosition()\n\t\t\t\t\t\t\t.equals(newCursorPosition))) // we allow users to paste content beside the selection\n\t\t\t) {\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t\tthis._editor.executeCommand(\n\t\t\t\t\tDragAndDropController.ID,\n\t\t\t\t\tnew DragAndDropCommand(\n\t\t\t\t\t\tthis._dragSelection,\n\t\t\t\t\t\tnewCursorPosition,\n\t\t\t\t\t\thasTriggerModifier(mouseEvent.event) ||\n\t\t\t\t\t\t\tthis._modifierPressed,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t}\n\t\t}\n\n\t\tthis._editor.updateOptions({\n\t\t\tmouseStyle: \"text\",\n\t\t});\n\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t}\n\n\tprivate static readonly _DECORATION_OPTIONS =\n\t\tModelDecorationOptions.register({\n\t\t\tdescription: \"dnd-target\",\n\t\t\tclassName: \"dnd-target\",\n\t\t});\n\n\tpublic showAt(position: Position): void {\n\t\tthis._dndDecorationIds.set([\n\t\t\t{\n\t\t\t\trange: new Range(\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t),\n\t\t\t\toptions: DragAndDropController._DECORATION_OPTIONS,\n\t\t\t},\n\t\t]);\n\t\tthis._editor.revealPosition(position, ScrollType.Immediate);\n\t}\n\n\tprivate _removeDecoration(): void {\n\t\tthis._dndDecorationIds.clear();\n\t}\n\n\tprivate _hitContent(target: IMouseTarget): boolean {\n\t\treturn (\n\t\t\ttarget.type === MouseTargetType.CONTENT_TEXT ||\n\t\t\ttarget.type === MouseTargetType.CONTENT_EMPTY\n\t\t);\n\t}\n\n\tprivate _hitMargin(target: IMouseTarget): boolean {\n\t\treturn (\n\t\t\ttarget.type === MouseTargetType.GUTTER_GLYPH_MARGIN ||\n\t\t\ttarget.type === MouseTargetType.GUTTER_LINE_NUMBERS ||\n\t\t\ttarget.type === MouseTargetType.GUTTER_LINE_DECORATIONS\n\t\t);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._removeDecoration();\n\t\tthis._dragSelection = null;\n\t\tthis._mouseDown = false;\n\t\tthis._modifierPressed = false;\n\t\tsuper.dispose();\n\t}\n}\n\nregisterEditorContribution(\n\tDragAndDropController.ID,\n\tDragAndDropController,\n\tEditorContributionInstantiation.BeforeFirstInteraction,\n);\n"],
  "mappings": "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",
  "names": []
}
