{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { DisposableStore, IDisposable, isDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { ITextModel } from '../../../common/model.js';\nimport * as languages from '../../../common/languages.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { historyNavigationVisible } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';\nimport { InternalQuickSuggestionsOptions, QuickSuggestionsValue } from '../../../common/config/editorOptions.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { StandardTokenType } from '../../../common/encodedTokenAttributes.js';\n\nexport const Context = {\n\tVisible: historyNavigationVisible,\n\tHasFocusedSuggestion: new RawContextKey<boolean>('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', \"Whether any suggestion is focused\")),\n\tDetailsVisible: new RawContextKey<boolean>('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', \"Whether suggestion details are visible\")),\n\tMultipleSuggestions: new RawContextKey<boolean>('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', \"Whether there are multiple suggestions to pick from\")),\n\tMakesTextEdit: new RawContextKey<boolean>('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', \"Whether inserting the current suggestion yields in a change or has everything already been typed\")),\n\tAcceptSuggestionsOnEnter: new RawContextKey<boolean>('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', \"Whether suggestions are inserted when pressing Enter\")),\n\tHasInsertAndReplaceRange: new RawContextKey<boolean>('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', \"Whether the current suggestion has insert and replace behaviour\")),\n\tInsertMode: new RawContextKey<'insert' | 'replace'>('suggestionInsertMode', undefined, { type: 'string', description: localize('suggestionInsertMode', \"Whether the default behaviour is to insert or replace\") }),\n\tCanResolve: new RawContextKey<boolean>('suggestionCanResolve', false, localize('suggestionCanResolve', \"Whether the current suggestion supports to resolve further details\")),\n};\n\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\n\nexport class CompletionItem {\n\n\t_brand!: 'ISuggestionItem';\n\n\t//\n\treadonly editStart: IPosition;\n\treadonly editInsertEnd: IPosition;\n\treadonly editReplaceEnd: IPosition;\n\n\t//\n\treadonly textLabel: string;\n\n\t// perf\n\treadonly labelLow: string;\n\treadonly sortTextLow?: string;\n\treadonly filterTextLow?: string;\n\n\t// validation\n\treadonly isInvalid: boolean = false;\n\n\t// sorting, filtering\n\tscore: FuzzyScore = FuzzyScore.Default;\n\tdistance: number = 0;\n\tidx?: number;\n\tword?: string;\n\n\t// instrumentation\n\treadonly extensionId?: ExtensionIdentifier;\n\n\t// resolving\n\tprivate _resolveDuration?: number;\n\tprivate _resolveCache?: Promise<void>;\n\n\tconstructor(\n\t\treadonly position: IPosition,\n\t\treadonly completion: languages.CompletionItem,\n\t\treadonly container: languages.CompletionList,\n\t\treadonly provider: languages.CompletionItemProvider,\n\t) {\n\t\tthis.textLabel = typeof completion.label === 'string'\n\t\t\t? completion.label\n\t\t\t: completion.label?.label;\n\n\t\t// ensure lower-variants (perf)\n\t\tthis.labelLow = this.textLabel.toLowerCase();\n\n\t\t// validate label\n\t\tthis.isInvalid = !this.textLabel;\n\n\t\tthis.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n\t\tthis.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n\n\t\tthis.extensionId = completion.extensionId;\n\n\t\t// normalize ranges\n\t\tif (Range.isIRange(completion.range)) {\n\t\t\tthis.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\n\t\t\tthis.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n\t\t\tthis.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n\n\t\t\t// validate range\n\t\t\tthis.isInvalid = this.isInvalid\n\t\t\t\t|| Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\n\n\t\t} else {\n\t\t\tthis.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\n\t\t\tthis.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\n\t\t\tthis.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\n\n\t\t\t// validate ranges\n\t\t\tthis.isInvalid = this.isInvalid\n\t\t\t\t|| Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace)\n\t\t\t\t|| completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber\n\t\t\t\t|| completion.range.insert.startColumn !== completion.range.replace.startColumn;\n\t\t}\n\n\t\t// create the suggestion resolver\n\t\tif (typeof provider.resolveCompletionItem !== 'function') {\n\t\t\tthis._resolveCache = Promise.resolve();\n\t\t\tthis._resolveDuration = 0;\n\t\t}\n\t}\n\n\t// ---- resolving\n\n\tget isResolved(): boolean {\n\t\treturn this._resolveDuration !== undefined;\n\t}\n\n\tget resolveDuration(): number {\n\t\treturn this._resolveDuration !== undefined ? this._resolveDuration : -1;\n\t}\n\n\tasync resolve(token: CancellationToken) {\n\t\tif (!this._resolveCache) {\n\t\t\tconst sub = token.onCancellationRequested(() => {\n\t\t\t\tthis._resolveCache = undefined;\n\t\t\t\tthis._resolveDuration = undefined;\n\t\t\t});\n\t\t\tconst sw = new StopWatch(true);\n\t\t\tthis._resolveCache = Promise.resolve(this.provider.resolveCompletionItem!(this.completion, token)).then(value => {\n\t\t\t\tObject.assign(this.completion, value);\n\t\t\t\tthis._resolveDuration = sw.elapsed();\n\t\t\t}, err => {\n\t\t\t\tif (isCancellationError(err)) {\n\t\t\t\t\t// the IPC queue will reject the request with the\n\t\t\t\t\t// cancellation error -> reset cached\n\t\t\t\t\tthis._resolveCache = undefined;\n\t\t\t\t\tthis._resolveDuration = undefined;\n\t\t\t\t}\n\t\t\t}).finally(() => {\n\t\t\t\tsub.dispose();\n\t\t\t});\n\t\t}\n\t\treturn this._resolveCache;\n\t}\n}\n\nexport const enum SnippetSortOrder {\n\tTop, Inline, Bottom\n}\n\nexport class CompletionOptions {\n\n\tstatic readonly default = new CompletionOptions();\n\n\tconstructor(\n\t\treadonly snippetSortOrder = SnippetSortOrder.Bottom,\n\t\treadonly kindFilter = new Set<languages.CompletionItemKind>(),\n\t\treadonly providerFilter = new Set<languages.CompletionItemProvider>(),\n\t\treadonly providerItemsToReuse: ReadonlyMap<languages.CompletionItemProvider, CompletionItem[]> = new Map<languages.CompletionItemProvider, CompletionItem[]>(),\n\t\treadonly showDeprecated = true\n\t) { }\n}\n\nlet _snippetSuggestSupport: languages.CompletionItemProvider | undefined;\n\nexport function getSnippetSuggestSupport(): languages.CompletionItemProvider | undefined {\n\treturn _snippetSuggestSupport;\n}\n\nexport function setSnippetSuggestSupport(support: languages.CompletionItemProvider | undefined): languages.CompletionItemProvider | undefined {\n\tconst old = _snippetSuggestSupport;\n\t_snippetSuggestSupport = support;\n\treturn old;\n}\n\nexport interface CompletionDurationEntry {\n\treadonly providerName: string;\n\treadonly elapsedProvider: number;\n\treadonly elapsedOverall: number;\n}\n\nexport interface CompletionDurations {\n\treadonly entries: readonly CompletionDurationEntry[];\n\treadonly elapsed: number;\n}\n\nexport class CompletionItemModel {\n\tconstructor(\n\t\treadonly items: CompletionItem[],\n\t\treadonly needsClipboard: boolean,\n\t\treadonly durations: CompletionDurations,\n\t\treadonly disposable: IDisposable,\n\t) { }\n}\n\nexport async function provideSuggestionItems(\n\tregistry: LanguageFeatureRegistry<languages.CompletionItemProvider>,\n\tmodel: ITextModel,\n\tposition: Position,\n\toptions: CompletionOptions = CompletionOptions.default,\n\tcontext: languages.CompletionContext = { triggerKind: languages.CompletionTriggerKind.Invoke },\n\ttoken: CancellationToken = CancellationToken.None\n): Promise<CompletionItemModel> {\n\n\tconst sw = new StopWatch();\n\tposition = position.clone();\n\n\tconst word = model.getWordAtPosition(position);\n\tconst defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\n\tconst defaultRange = { replace: defaultReplaceRange, insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column) };\n\n\tconst result: CompletionItem[] = [];\n\tconst disposables = new DisposableStore();\n\tconst durations: CompletionDurationEntry[] = [];\n\tlet needsClipboard = false;\n\n\tconst onCompletionList = (provider: languages.CompletionItemProvider, container: languages.CompletionList | null | undefined, sw: StopWatch): boolean => {\n\t\tlet didAddResult = false;\n\t\tif (!container) {\n\t\t\treturn didAddResult;\n\t\t}\n\t\tfor (const suggestion of container.suggestions) {\n\t\t\tif (!options.kindFilter.has(suggestion.kind)) {\n\t\t\t\t// skip if not showing deprecated suggestions\n\t\t\t\tif (!options.showDeprecated && suggestion?.tags?.includes(languages.CompletionItemTag.Deprecated)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// fill in default range when missing\n\t\t\t\tif (!suggestion.range) {\n\t\t\t\t\tsuggestion.range = defaultRange;\n\t\t\t\t}\n\t\t\t\t// fill in default sortText when missing\n\t\t\t\tif (!suggestion.sortText) {\n\t\t\t\t\tsuggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.label;\n\t\t\t\t}\n\t\t\t\tif (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & languages.CompletionItemInsertTextRule.InsertAsSnippet) {\n\t\t\t\t\tneedsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\n\t\t\t\t}\n\t\t\t\tresult.push(new CompletionItem(position, suggestion, container, provider));\n\t\t\t\tdidAddResult = true;\n\t\t\t}\n\t\t}\n\t\tif (isDisposable(container)) {\n\t\t\tdisposables.add(container);\n\t\t}\n\t\tdurations.push({\n\t\t\tproviderName: provider._debugDisplayName ?? 'unknown_provider', elapsedProvider: container.duration ?? -1, elapsedOverall: sw.elapsed()\n\t\t});\n\t\treturn didAddResult;\n\t};\n\n\t// ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\n\t// do so - no snippet filter, no special-providers-only request\n\tconst snippetCompletions = (async () => {\n\t\tif (!_snippetSuggestSupport || options.kindFilter.has(languages.CompletionItemKind.Snippet)) {\n\t\t\treturn;\n\t\t}\n\t\t// we have items from a previous session that we can reuse\n\t\tconst reuseItems = options.providerItemsToReuse.get(_snippetSuggestSupport);\n\t\tif (reuseItems) {\n\t\t\treuseItems.forEach(item => result.push(item));\n\t\t\treturn;\n\t\t}\n\t\tif (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\n\t\t\treturn;\n\t\t}\n\t\tconst sw = new StopWatch();\n\t\tconst list = await _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\n\t\tonCompletionList(_snippetSuggestSupport, list, sw);\n\t})();\n\n\t// add suggestions from contributed providers - providers are ordered in groups of\n\t// equal score and once a group produces a result the process stops\n\t// get provider groups, always add snippet suggestion provider\n\tfor (const providerGroup of registry.orderedGroups(model)) {\n\n\t\t// for each support in the group ask for suggestions\n\t\tlet didAddResult = false;\n\t\tawait Promise.all(providerGroup.map(async provider => {\n\t\t\t// we have items from a previous session that we can reuse\n\t\t\tif (options.providerItemsToReuse.has(provider)) {\n\t\t\t\tconst items = options.providerItemsToReuse.get(provider)!;\n\t\t\t\titems.forEach(item => result.push(item));\n\t\t\t\tdidAddResult = didAddResult || items.length > 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check if this provider is filtered out\n\t\t\tif (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst sw = new StopWatch();\n\t\t\t\tconst list = await provider.provideCompletionItems(model, position, context, token);\n\t\t\t\tdidAddResult = onCompletionList(provider, list, sw) || didAddResult;\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t}\n\t\t}));\n\n\t\tif (didAddResult || token.isCancellationRequested) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tawait snippetCompletions;\n\n\tif (token.isCancellationRequested) {\n\t\tdisposables.dispose();\n\t\treturn Promise.reject<any>(new CancellationError());\n\t}\n\n\treturn new CompletionItemModel(\n\t\tresult.sort(getSuggestionComparator(options.snippetSortOrder)),\n\t\tneedsClipboard,\n\t\t{ entries: durations, elapsed: sw.elapsed() },\n\t\tdisposables,\n\t);\n}\n\n\nfunction defaultComparator(a: CompletionItem, b: CompletionItem): number {\n\t// check with 'sortText'\n\tif (a.sortTextLow && b.sortTextLow) {\n\t\tif (a.sortTextLow < b.sortTextLow) {\n\t\t\treturn -1;\n\t\t} else if (a.sortTextLow > b.sortTextLow) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t// check with 'label'\n\tif (a.textLabel < b.textLabel) {\n\t\treturn -1;\n\t} else if (a.textLabel > b.textLabel) {\n\t\treturn 1;\n\t}\n\t// check with 'type'\n\treturn a.completion.kind - b.completion.kind;\n}\n\nfunction snippetUpComparator(a: CompletionItem, b: CompletionItem): number {\n\tif (a.completion.kind !== b.completion.kind) {\n\t\tif (a.completion.kind === languages.CompletionItemKind.Snippet) {\n\t\t\treturn -1;\n\t\t} else if (b.completion.kind === languages.CompletionItemKind.Snippet) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn defaultComparator(a, b);\n}\n\nfunction snippetDownComparator(a: CompletionItem, b: CompletionItem): number {\n\tif (a.completion.kind !== b.completion.kind) {\n\t\tif (a.completion.kind === languages.CompletionItemKind.Snippet) {\n\t\t\treturn 1;\n\t\t} else if (b.completion.kind === languages.CompletionItemKind.Snippet) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn defaultComparator(a, b);\n}\n\ninterface Comparator<T> { (a: T, b: T): number }\nconst _snippetComparators = new Map<SnippetSortOrder, Comparator<CompletionItem>>();\n_snippetComparators.set(SnippetSortOrder.Top, snippetUpComparator);\n_snippetComparators.set(SnippetSortOrder.Bottom, snippetDownComparator);\n_snippetComparators.set(SnippetSortOrder.Inline, defaultComparator);\n\nexport function getSuggestionComparator(snippetConfig: SnippetSortOrder): (a: CompletionItem, b: CompletionItem) => number {\n\treturn _snippetComparators.get(snippetConfig)!;\n}\n\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', async (accessor, ...args: [URI, IPosition, string?, number?]) => {\n\tconst [uri, position, triggerCharacter, maxItemsToResolve] = args;\n\tassertType(URI.isUri(uri));\n\tassertType(Position.isIPosition(position));\n\tassertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n\tassertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\n\n\tconst { completionProvider } = accessor.get(ILanguageFeaturesService);\n\tconst ref = await accessor.get(ITextModelService).createModelReference(uri);\n\ttry {\n\n\t\tconst result: languages.CompletionList = {\n\t\t\tincomplete: false,\n\t\t\tsuggestions: []\n\t\t};\n\n\t\tconst resolving: Promise<any>[] = [];\n\t\tconst actualPosition = ref.object.textEditorModel.validatePosition(position);\n\t\tconst completions = await provideSuggestionItems(completionProvider, ref.object.textEditorModel, actualPosition, undefined, { triggerCharacter: triggerCharacter ?? undefined, triggerKind: triggerCharacter ? languages.CompletionTriggerKind.TriggerCharacter : languages.CompletionTriggerKind.Invoke });\n\t\tfor (const item of completions.items) {\n\t\t\tif (resolving.length < (maxItemsToResolve ?? 0)) {\n\t\t\t\tresolving.push(item.resolve(CancellationToken.None));\n\t\t\t}\n\t\t\tresult.incomplete = result.incomplete || item.container.incomplete;\n\t\t\tresult.suggestions.push(item.completion);\n\t\t}\n\n\t\ttry {\n\t\t\tawait Promise.all(resolving);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tsetTimeout(() => completions.disposable.dispose(), 100);\n\t\t}\n\n\t} finally {\n\t\tref.dispose();\n\t}\n\n});\n\ninterface SuggestController extends IEditorContribution {\n\ttriggerSuggest(onlyFrom?: Set<languages.CompletionItemProvider>, auto?: boolean, noFilter?: boolean): void;\n}\n\nexport function showSimpleSuggestions(editor: ICodeEditor, provider: languages.CompletionItemProvider) {\n\teditor.getContribution<SuggestController>('editor.contrib.suggestController')?.triggerSuggest(\n\t\tnew Set<languages.CompletionItemProvider>().add(provider), undefined, true\n\t);\n}\n\nexport interface ISuggestItemPreselector {\n\t/**\n\t * The preselector with highest priority is asked first.\n\t*/\n\treadonly priority: number;\n\n\t/**\n\t * Is called to preselect a suggest item.\n\t * When -1 is returned, item preselectors with lower priority are asked.\n\t*/\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number | -1;\n}\n\n\nexport abstract class QuickSuggestionsOptions {\n\n\tstatic isAllOff(config: InternalQuickSuggestionsOptions): boolean {\n\t\treturn config.other === 'off' && config.comments === 'off' && config.strings === 'off';\n\t}\n\n\tstatic isAllOn(config: InternalQuickSuggestionsOptions): boolean {\n\t\treturn config.other === 'on' && config.comments === 'on' && config.strings === 'on';\n\t}\n\n\tstatic valueFor(config: InternalQuickSuggestionsOptions, tokenType: StandardTokenType): QuickSuggestionsValue {\n\t\tswitch (tokenType) {\n\t\t\tcase StandardTokenType.Comment: return config.comments;\n\t\t\tcase StandardTokenType.String: return config.strings;\n\t\t\tdefault: return config.other;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SnippetSortOrder", "sw"]
}
