{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggestInlineCompletions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { FuzzyScore } from \"../../../../base/common/filters.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\tRefCountedDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../browser/services/codeEditorService.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport type { ISingleEditOperation } from \"../../../common/core/editOperation.js\";\nimport type { IPosition, Position } from \"../../../common/core/position.js\";\nimport { type IRange, Range } from \"../../../common/core/range.js\";\nimport type { IWordAtPosition } from \"../../../common/core/wordHelper.js\";\nimport { registerEditorFeature } from \"../../../common/editorFeatures.js\";\nimport {\n\ttype Command,\n\tCompletionItemInsertTextRule,\n\ttype CompletionItemProvider,\n\tCompletionTriggerKind,\n\ttype InlineCompletion,\n\ttype InlineCompletionContext,\n\ttype InlineCompletions,\n\ttype InlineCompletionsProvider,\n} from \"../../../common/languages.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { ILanguageFeaturesService } from \"../../../common/services/languageFeatures.js\";\nimport { CompletionModel, LineContext } from \"./completionModel.js\";\nimport {\n\ttype CompletionItem,\n\ttype CompletionItemModel,\n\tCompletionOptions,\n\tQuickSuggestionsOptions,\n\tprovideSuggestionItems,\n} from \"./suggest.js\";\nimport { ISuggestMemoryService } from \"./suggestMemory.js\";\nimport { SuggestModel } from \"./suggestModel.js\";\nimport { WordDistance } from \"./wordDistance.js\";\n\nclass SuggestInlineCompletion implements InlineCompletion {\n\tconstructor(\n\t\treadonly range: IRange,\n\t\treadonly insertText: string | { snippet: string },\n\t\treadonly filterText: string,\n\t\treadonly additionalTextEdits: ISingleEditOperation[] | undefined,\n\t\treadonly command: Command | undefined,\n\t\treadonly completion: CompletionItem,\n\t) {}\n}\n\nclass InlineCompletionResults\n\textends RefCountedDisposable\n\timplements InlineCompletions<SuggestInlineCompletion>\n{\n\tconstructor(\n\t\treadonly model: ITextModel,\n\t\treadonly line: number,\n\t\treadonly word: IWordAtPosition,\n\t\treadonly completionModel: CompletionModel,\n\t\tcompletions: CompletionItemModel,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t) {\n\t\tsuper(completions.disposable);\n\t}\n\n\tcanBeReused(model: ITextModel, line: number, word: IWordAtPosition) {\n\t\treturn (\n\t\t\tthis.model === model && // same model\n\t\t\tthis.line === line &&\n\t\t\tthis.word.word.length > 0 &&\n\t\t\tthis.word.startColumn === word.startColumn &&\n\t\t\tthis.word.endColumn < word.endColumn && // same word\n\t\t\tthis.completionModel.getIncompleteProvider().size === 0\n\t\t); // no incomplete results\n\t}\n\n\tget items(): SuggestInlineCompletion[] {\n\t\tconst result: SuggestInlineCompletion[] = [];\n\n\t\t// Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n\t\t// ranked items are before/after\n\t\tconst { items } = this.completionModel;\n\t\tconst selectedIndex = this._suggestMemoryService.select(\n\t\t\tthis.model,\n\t\t\t{\n\t\t\t\tlineNumber: this.line,\n\t\t\t\tcolumn:\n\t\t\t\t\tthis.word.endColumn +\n\t\t\t\t\tthis.completionModel.lineContext.characterCountDelta,\n\t\t\t},\n\t\t\titems,\n\t\t);\n\t\tconst first = Iterable.slice(items, selectedIndex);\n\t\tconst second = Iterable.slice(items, 0, selectedIndex);\n\n\t\tlet resolveCount = 5;\n\n\t\tfor (const item of Iterable.concat(first, second)) {\n\t\t\tif (item.score === FuzzyScore.Default) {\n\t\t\t\t// skip items that have no overlap\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\titem.editStart.lineNumber,\n\t\t\t\titem.editStart.column,\n\t\t\t\titem.editInsertEnd.lineNumber,\n\t\t\t\titem.editInsertEnd.column +\n\t\t\t\t\tthis.completionModel.lineContext.characterCountDelta, // end PLUS character delta\n\t\t\t);\n\t\t\tconst insertText =\n\t\t\t\titem.completion.insertTextRules &&\n\t\t\t\titem.completion.insertTextRules &\n\t\t\t\t\tCompletionItemInsertTextRule.InsertAsSnippet\n\t\t\t\t\t? { snippet: item.completion.insertText }\n\t\t\t\t\t: item.completion.insertText;\n\n\t\t\tresult.push(\n\t\t\t\tnew SuggestInlineCompletion(\n\t\t\t\t\trange,\n\t\t\t\t\tinsertText,\n\t\t\t\t\titem.filterTextLow ?? item.labelLow,\n\t\t\t\t\titem.completion.additionalTextEdits,\n\t\t\t\t\titem.completion.command,\n\t\t\t\t\titem,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// resolve the first N suggestions eagerly\n\t\t\tif (resolveCount-- >= 0) {\n\t\t\t\titem.resolve(CancellationToken.None);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class SuggestInlineCompletions\n\textends Disposable\n\timplements InlineCompletionsProvider<InlineCompletionResults>\n{\n\tprivate _lastResult?: InlineCompletionResults;\n\n\tconstructor(\n\t\t@ILanguageFeaturesService private readonly _languageFeatureService: ILanguageFeaturesService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t\t@ICodeEditorService private readonly _editorService: ICodeEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n\t}\n\n\tasync provideInlineCompletions(\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\tcontext: InlineCompletionContext,\n\t\ttoken: CancellationToken,\n\t): Promise<InlineCompletionResults | undefined> {\n\t\tif (context.selectedSuggestionInfo) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet editor: ICodeEditor | undefined;\n\t\tfor (const candidate of this._editorService.listCodeEditors()) {\n\t\t\tif (candidate.getModel() === model) {\n\t\t\t\teditor = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = editor.getOption(EditorOption.quickSuggestions);\n\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t// quick suggest is off (for this model/language)\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst lineTokens = model.tokenization.getLineTokens(\n\t\t\tposition.lineNumber,\n\t\t);\n\t\tconst tokenType = lineTokens.getStandardTokenType(\n\t\t\tlineTokens.findTokenIndexAtOffset(\n\t\t\t\tMath.max(position.column - 1 - 1, 0),\n\t\t\t),\n\t\t);\n\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== \"inline\") {\n\t\t\t// quick suggest is off (for this token)\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We consider non-empty leading words and trigger characters. The latter only\n\t\t// when no word is being typed (word characters superseed trigger characters)\n\t\tlet wordInfo = model.getWordAtPosition(position);\n\t\tlet triggerCharacterInfo:\n\t\t\t| { ch: string; providers: Set<CompletionItemProvider> }\n\t\t\t| undefined;\n\n\t\tif (!wordInfo?.word) {\n\t\t\ttriggerCharacterInfo = this._getTriggerCharacterInfo(\n\t\t\t\tmodel,\n\t\t\t\tposition,\n\t\t\t);\n\t\t}\n\n\t\tif (!wordInfo?.word && !triggerCharacterInfo) {\n\t\t\t// not at word, not a trigger character\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that we have word information and that we are at the end of a word\n\t\t// otherwise we stop because we don't want to do quick suggestions inside words\n\t\tif (!wordInfo) {\n\t\t\twordInfo = model.getWordUntilPosition(position);\n\t\t}\n\t\tif (wordInfo.endColumn !== position.column) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: InlineCompletionResults;\n\t\tconst leadingLineContents = model.getValueInRange(\n\t\t\tnew Range(\n\t\t\t\tposition.lineNumber,\n\t\t\t\t1,\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column,\n\t\t\t),\n\t\t);\n\t\tif (\n\t\t\t!triggerCharacterInfo &&\n\t\t\tthis._lastResult?.canBeReused(model, position.lineNumber, wordInfo)\n\t\t) {\n\t\t\t// reuse a previous result iff possible, only a refilter is needed\n\t\t\t// TODO@jrieken this can be improved further and only incomplete results can be updated\n\t\t\t// console.log(`REUSE with ${wordInfo.word}`);\n\t\t\tconst newLineContext = new LineContext(\n\t\t\t\tleadingLineContents,\n\t\t\t\tposition.column - this._lastResult.word.endColumn,\n\t\t\t);\n\t\t\tthis._lastResult.completionModel.lineContext = newLineContext;\n\t\t\tthis._lastResult.acquire();\n\t\t\tresult = this._lastResult;\n\t\t} else {\n\t\t\t// refesh model is required\n\t\t\tconst completions = await provideSuggestionItems(\n\t\t\t\tthis._languageFeatureService.completionProvider,\n\t\t\t\tmodel,\n\t\t\t\tposition,\n\t\t\t\tnew CompletionOptions(\n\t\t\t\t\tundefined,\n\t\t\t\t\tSuggestModel.createSuggestFilter(editor).itemKind,\n\t\t\t\t\ttriggerCharacterInfo?.providers,\n\t\t\t\t),\n\t\t\t\ttriggerCharacterInfo && {\n\t\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerCharacter,\n\t\t\t\t\ttriggerCharacter: triggerCharacterInfo.ch,\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t);\n\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tconst completionModel = new CompletionModel(\n\t\t\t\tcompletions.items,\n\t\t\t\tposition.column,\n\t\t\t\tnew LineContext(leadingLineContents, 0),\n\t\t\t\tWordDistance.None,\n\t\t\t\teditor.getOption(EditorOption.suggest),\n\t\t\t\teditor.getOption(EditorOption.snippetSuggestions),\n\t\t\t\t{ boostFullMatch: false, firstMatchCanBeWeak: false },\n\t\t\t\tclipboardText,\n\t\t\t);\n\t\t\tresult = new InlineCompletionResults(\n\t\t\t\tmodel,\n\t\t\t\tposition.lineNumber,\n\t\t\t\twordInfo,\n\t\t\t\tcompletionModel,\n\t\t\t\tcompletions,\n\t\t\t\tthis._suggestMemoryService,\n\t\t\t);\n\t\t}\n\n\t\tthis._lastResult = result;\n\t\treturn result;\n\t}\n\n\thandleItemDidShow(\n\t\t_completions: InlineCompletionResults,\n\t\titem: SuggestInlineCompletion,\n\t): void {\n\t\titem.completion.resolve(CancellationToken.None);\n\t}\n\n\tfreeInlineCompletions(result: InlineCompletionResults): void {\n\t\tresult.release();\n\t}\n\n\tprivate _getTriggerCharacterInfo(model: ITextModel, position: IPosition) {\n\t\tconst ch = model.getValueInRange(\n\t\t\tRange.fromPositions(\n\t\t\t\t{\n\t\t\t\t\tlineNumber: position.lineNumber,\n\t\t\t\t\tcolumn: position.column - 1,\n\t\t\t\t},\n\t\t\t\tposition,\n\t\t\t),\n\t\t);\n\t\tconst providers = new Set<CompletionItemProvider>();\n\t\tfor (const provider of this._languageFeatureService.completionProvider.all(\n\t\t\tmodel,\n\t\t)) {\n\t\t\tif (provider.triggerCharacters?.includes(ch)) {\n\t\t\t\tproviders.add(provider);\n\t\t\t}\n\t\t}\n\t\tif (providers.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { providers, ch };\n\t}\n}\n\nregisterEditorFeature(SuggestInlineCompletions);\n"],
  "mappings": "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",
  "names": []
}
