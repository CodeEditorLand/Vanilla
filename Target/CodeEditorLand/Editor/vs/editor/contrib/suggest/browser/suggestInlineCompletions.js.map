{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggestInlineCompletions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { IWordAtPosition } from '../../../common/core/wordHelper.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { Command, CompletionItemInsertTextRule, CompletionItemProvider, CompletionTriggerKind, InlineCompletion, InlineCompletionContext, InlineCompletions, InlineCompletionsProvider } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionItem, CompletionItemModel, CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\n\nclass SuggestInlineCompletion implements InlineCompletion {\n\n\tconstructor(\n\t\treadonly range: IRange,\n\t\treadonly insertText: string | { snippet: string },\n\t\treadonly filterText: string,\n\t\treadonly additionalTextEdits: ISingleEditOperation[] | undefined,\n\t\treadonly command: Command | undefined,\n\t\treadonly completion: CompletionItem,\n\t) { }\n}\n\nclass InlineCompletionResults extends RefCountedDisposable implements InlineCompletions<SuggestInlineCompletion> {\n\n\tconstructor(\n\t\treadonly model: ITextModel,\n\t\treadonly line: number,\n\t\treadonly word: IWordAtPosition,\n\t\treadonly completionModel: CompletionModel,\n\t\tcompletions: CompletionItemModel,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t) {\n\t\tsuper(completions.disposable);\n\t}\n\n\tcanBeReused(model: ITextModel, line: number, word: IWordAtPosition) {\n\t\treturn this.model === model // same model\n\t\t\t&& this.line === line\n\t\t\t&& this.word.word.length > 0\n\t\t\t&& this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n\t\t\t&& this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n\t}\n\n\tget items(): SuggestInlineCompletion[] {\n\t\tconst result: SuggestInlineCompletion[] = [];\n\n\t\t// Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n\t\t// ranked items are before/after\n\t\tconst { items } = this.completionModel;\n\t\tconst selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n\t\tconst first = Iterable.slice(items, selectedIndex);\n\t\tconst second = Iterable.slice(items, 0, selectedIndex);\n\n\t\tlet resolveCount = 5;\n\n\t\tfor (const item of Iterable.concat(first, second)) {\n\n\t\t\tif (item.score === FuzzyScore.Default) {\n\t\t\t\t// skip items that have no overlap\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\titem.editStart.lineNumber, item.editStart.column,\n\t\t\t\titem.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n\t\t\t);\n\t\t\tconst insertText = item.completion.insertTextRules && (item.completion.insertTextRules & CompletionItemInsertTextRule.InsertAsSnippet)\n\t\t\t\t? { snippet: item.completion.insertText }\n\t\t\t\t: item.completion.insertText;\n\n\t\t\tresult.push(new SuggestInlineCompletion(\n\t\t\t\trange,\n\t\t\t\tinsertText,\n\t\t\t\titem.filterTextLow ?? item.labelLow,\n\t\t\t\titem.completion.additionalTextEdits,\n\t\t\t\titem.completion.command,\n\t\t\t\titem\n\t\t\t));\n\n\t\t\t// resolve the first N suggestions eagerly\n\t\t\tif (resolveCount-- >= 0) {\n\t\t\t\titem.resolve(CancellationToken.None);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\nexport class SuggestInlineCompletions extends Disposable implements InlineCompletionsProvider<InlineCompletionResults> {\n\n\tprivate _lastResult?: InlineCompletionResults;\n\n\tconstructor(\n\t\t@ILanguageFeaturesService private readonly _languageFeatureService: ILanguageFeaturesService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t\t@ICodeEditorService private readonly _editorService: ICodeEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n\t}\n\n\tasync provideInlineCompletions(model: ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): Promise<InlineCompletionResults | undefined> {\n\n\t\tif (context.selectedSuggestionInfo) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet editor: ICodeEditor | undefined;\n\t\tfor (const candidate of this._editorService.listCodeEditors()) {\n\t\t\tif (candidate.getModel() === model) {\n\t\t\t\teditor = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = editor.getOption(EditorOption.quickSuggestions);\n\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t// quick suggest is off (for this model/language)\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n\t\t\t// quick suggest is off (for this token)\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We consider non-empty leading words and trigger characters. The latter only\n\t\t// when no word is being typed (word characters superseed trigger characters)\n\t\tlet wordInfo = model.getWordAtPosition(position);\n\t\tlet triggerCharacterInfo: { ch: string; providers: Set<CompletionItemProvider> } | undefined;\n\n\t\tif (!wordInfo?.word) {\n\t\t\ttriggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n\t\t}\n\n\t\tif (!wordInfo?.word && !triggerCharacterInfo) {\n\t\t\t// not at word, not a trigger character\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that we have word information and that we are at the end of a word\n\t\t// otherwise we stop because we don't want to do quick suggestions inside words\n\t\tif (!wordInfo) {\n\t\t\twordInfo = model.getWordUntilPosition(position);\n\t\t}\n\t\tif (wordInfo.endColumn !== position.column) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: InlineCompletionResults;\n\t\tconst leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n\t\tif (!triggerCharacterInfo && this._lastResult?.canBeReused(model, position.lineNumber, wordInfo)) {\n\t\t\t// reuse a previous result iff possible, only a refilter is needed\n\t\t\t// TODO@jrieken this can be improved further and only incomplete results can be updated\n\t\t\t// console.log(`REUSE with ${wordInfo.word}`);\n\t\t\tconst newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n\t\t\tthis._lastResult.completionModel.lineContext = newLineContext;\n\t\t\tthis._lastResult.acquire();\n\t\t\tresult = this._lastResult;\n\n\t\t} else {\n\t\t\t// refesh model is required\n\t\t\tconst completions = await provideSuggestionItems(\n\t\t\t\tthis._languageFeatureService.completionProvider,\n\t\t\t\tmodel, position,\n\t\t\t\tnew CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo?.providers),\n\t\t\t\ttriggerCharacterInfo && { triggerKind: CompletionTriggerKind.TriggerCharacter, triggerCharacter: triggerCharacterInfo.ch },\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tconst completionModel = new CompletionModel(\n\t\t\t\tcompletions.items,\n\t\t\t\tposition.column,\n\t\t\t\tnew LineContext(leadingLineContents, 0),\n\t\t\t\tWordDistance.None,\n\t\t\t\teditor.getOption(EditorOption.suggest),\n\t\t\t\teditor.getOption(EditorOption.snippetSuggestions),\n\t\t\t\t{ boostFullMatch: false, firstMatchCanBeWeak: false },\n\t\t\t\tclipboardText\n\t\t\t);\n\t\t\tresult = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n\t\t}\n\n\t\tthis._lastResult = result;\n\t\treturn result;\n\t}\n\n\thandleItemDidShow(_completions: InlineCompletionResults, item: SuggestInlineCompletion): void {\n\t\titem.completion.resolve(CancellationToken.None);\n\t}\n\n\tfreeInlineCompletions(result: InlineCompletionResults): void {\n\t\tresult.release();\n\t}\n\n\tprivate _getTriggerCharacterInfo(model: ITextModel, position: IPosition) {\n\t\tconst ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n\t\tconst providers = new Set<CompletionItemProvider>();\n\t\tfor (const provider of this._languageFeatureService.completionProvider.all(model)) {\n\t\t\tif (provider.triggerCharacters?.includes(ch)) {\n\t\t\t\tproviders.add(provider);\n\t\t\t}\n\t\t}\n\t\tif (providers.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { providers, ch };\n\t}\n}\n\n\nregisterEditorFeature(SuggestInlineCompletions);\n"],
  "mappings": "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",
  "names": []
}
