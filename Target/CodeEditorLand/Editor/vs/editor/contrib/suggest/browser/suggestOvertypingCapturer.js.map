{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggestOvertypingCapturer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport type { SuggestModel } from \"./suggestModel.js\";\n\nexport class OvertypingCapturer implements IDisposable {\n\tprivate static readonly _maxSelectionLength = 51200;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate _lastOvertyped: { value: string; multiline: boolean }[] = [];\n\tprivate _locked = false;\n\n\tconstructor(editor: ICodeEditor, suggestModel: SuggestModel) {\n\t\tthis._disposables.add(\n\t\t\teditor.onWillType(() => {\n\t\t\t\tif (this._locked || !editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selections = editor.getSelections();\n\t\t\t\tconst selectionsLength = selections.length;\n\n\t\t\t\t// Check if it will overtype any selections\n\t\t\t\tlet willOvertype = false;\n\t\t\t\tfor (let i = 0; i < selectionsLength; i++) {\n\t\t\t\t\tif (!selections[i].isEmpty()) {\n\t\t\t\t\t\twillOvertype = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!willOvertype) {\n\t\t\t\t\tif (this._lastOvertyped.length !== 0) {\n\t\t\t\t\t\tthis._lastOvertyped.length = 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._lastOvertyped = [];\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tfor (let i = 0; i < selectionsLength; i++) {\n\t\t\t\t\tconst selection = selections[i];\n\t\t\t\t\t// Check for overtyping capturer restrictions\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodel.getValueLengthInRange(selection) >\n\t\t\t\t\t\tOvertypingCapturer._maxSelectionLength\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._lastOvertyped[i] = {\n\t\t\t\t\t\tvalue: model.getValueInRange(selection),\n\t\t\t\t\t\tmultiline:\n\t\t\t\t\t\t\tselection.startLineNumber !==\n\t\t\t\t\t\t\tselection.endLineNumber,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._disposables.add(\n\t\t\tsuggestModel.onDidTrigger((e) => {\n\t\t\t\tthis._locked = true;\n\t\t\t}),\n\t\t);\n\n\t\tthis._disposables.add(\n\t\t\tsuggestModel.onDidCancel((e) => {\n\t\t\t\tthis._locked = false;\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetLastOvertypedInfo(\n\t\tidx: number,\n\t): { value: string; multiline: boolean } | undefined {\n\t\tif (idx >= 0 && idx < this._lastOvertyped.length) {\n\t\t\treturn this._lastOvertyped[idx];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tdispose() {\n\t\tthis._disposables.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,OAEM;AAIA,MAAM,mBAA0C;AAAA,EAZvD,OAYuD;AAAA;AAAA;AAAA,EACtD,OAAwB,sBAAsB;AAAA,EAC7B,eAAe,IAAI,gBAAgB;AAAA,EAE5C,iBAA0D,CAAC;AAAA,EAC3D,UAAU;AAAA,EAElB,YAAY,QAAqB,cAA4B;AAC5D,SAAK,aAAa;AAAA,MACjB,OAAO,WAAW,MAAM;AACvB,YAAI,KAAK,WAAW,CAAC,OAAO,SAAS,GAAG;AACvC;AAAA,QACD;AAEA,cAAM,aAAa,OAAO,cAAc;AACxC,cAAM,mBAAmB,WAAW;AAGpC,YAAI,eAAe;AACnB,iBAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AAC1C,cAAI,CAAC,WAAW,CAAC,EAAE,QAAQ,GAAG;AAC7B,2BAAe;AACf;AAAA,UACD;AAAA,QACD;AACA,YAAI,CAAC,cAAc;AAClB,cAAI,KAAK,eAAe,WAAW,GAAG;AACrC,iBAAK,eAAe,SAAS;AAAA,UAC9B;AACA;AAAA,QACD;AAEA,aAAK,iBAAiB,CAAC;AACvB,cAAM,QAAQ,OAAO,SAAS;AAC9B,iBAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AAC1C,gBAAM,YAAY,WAAW,CAAC;AAE9B,cACC,MAAM,sBAAsB,SAAS,IACrC,mBAAmB,qBAClB;AACD;AAAA,UACD;AACA,eAAK,eAAe,CAAC,IAAI;AAAA,YACxB,OAAO,MAAM,gBAAgB,SAAS;AAAA,YACtC,WACC,UAAU,oBACV,UAAU;AAAA,UACZ;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK,aAAa;AAAA,MACjB,aAAa,aAAa,CAAC,MAAM;AAChC,aAAK,UAAU;AAAA,MAChB,CAAC;AAAA,IACF;AAEA,SAAK,aAAa;AAAA,MACjB,aAAa,YAAY,CAAC,MAAM;AAC/B,aAAK,UAAU;AAAA,MAChB,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,qBACC,KACoD;AACpD,QAAI,OAAO,KAAK,MAAM,KAAK,eAAe,QAAQ;AACjD,aAAO,KAAK,eAAe,GAAG;AAAA,IAC/B;AACA,WAAO;AAAA,EACR;AAAA,EAEA,UAAU;AACT,SAAK,aAAa,QAAQ;AAAA,EAC3B;AACD;",
  "names": []
}
