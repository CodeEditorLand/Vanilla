{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggestOvertypingCapturer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { SuggestModel } from './suggestModel.js';\n\nexport class OvertypingCapturer implements IDisposable {\n\n\tprivate static readonly _maxSelectionLength = 51200;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate _lastOvertyped: { value: string; multiline: boolean }[] = [];\n\tprivate _locked: boolean = false;\n\n\tconstructor(editor: ICodeEditor, suggestModel: SuggestModel) {\n\n\t\tthis._disposables.add(editor.onWillType(() => {\n\t\t\tif (this._locked || !editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selections = editor.getSelections();\n\t\t\tconst selectionsLength = selections.length;\n\n\t\t\t// Check if it will overtype any selections\n\t\t\tlet willOvertype = false;\n\t\t\tfor (let i = 0; i < selectionsLength; i++) {\n\t\t\t\tif (!selections[i].isEmpty()) {\n\t\t\t\t\twillOvertype = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!willOvertype) {\n\t\t\t\tif (this._lastOvertyped.length !== 0) {\n\t\t\t\t\tthis._lastOvertyped.length = 0;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._lastOvertyped = [];\n\t\t\tconst model = editor.getModel();\n\t\t\tfor (let i = 0; i < selectionsLength; i++) {\n\t\t\t\tconst selection = selections[i];\n\t\t\t\t// Check for overtyping capturer restrictions\n\t\t\t\tif (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastOvertyped[i] = { value: model.getValueInRange(selection), multiline: selection.startLineNumber !== selection.endLineNumber };\n\t\t\t}\n\t\t}));\n\n\t\tthis._disposables.add(suggestModel.onDidTrigger(e => {\n\t\t\tthis._locked = true;\n\t\t}));\n\n\t\tthis._disposables.add(suggestModel.onDidCancel(e => {\n\t\t\tthis._locked = false;\n\t\t}));\n\t}\n\n\tgetLastOvertypedInfo(idx: number): { value: string; multiline: boolean } | undefined {\n\t\tif (idx >= 0 && idx < this._lastOvertyped.length) {\n\t\t\treturn this._lastOvertyped[idx];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tdispose() {\n\t\tthis._disposables.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAEtB,MAAM,mBAA0C;AAAA,EATvD,OASuD;AAAA;AAAA;AAAA,EAEtD,OAAwB,sBAAsB;AAAA,EAC7B,eAAe,IAAI,gBAAgB;AAAA,EAE5C,iBAA0D,CAAC;AAAA,EAC3D,UAAmB;AAAA,EAE3B,YAAY,QAAqB,cAA4B;AAE5D,SAAK,aAAa,IAAI,OAAO,WAAW,MAAM;AAC7C,UAAI,KAAK,WAAW,CAAC,OAAO,SAAS,GAAG;AACvC;AAAA,MACD;AAEA,YAAM,aAAa,OAAO,cAAc;AACxC,YAAM,mBAAmB,WAAW;AAGpC,UAAI,eAAe;AACnB,eAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AAC1C,YAAI,CAAC,WAAW,CAAC,EAAE,QAAQ,GAAG;AAC7B,yBAAe;AACf;AAAA,QACD;AAAA,MACD;AACA,UAAI,CAAC,cAAc;AAClB,YAAI,KAAK,eAAe,WAAW,GAAG;AACrC,eAAK,eAAe,SAAS;AAAA,QAC9B;AACA;AAAA,MACD;AAEA,WAAK,iBAAiB,CAAC;AACvB,YAAM,QAAQ,OAAO,SAAS;AAC9B,eAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AAC1C,cAAM,YAAY,WAAW,CAAC;AAE9B,YAAI,MAAM,sBAAsB,SAAS,IAAI,mBAAmB,qBAAqB;AACpF;AAAA,QACD;AACA,aAAK,eAAe,CAAC,IAAI,EAAE,OAAO,MAAM,gBAAgB,SAAS,GAAG,WAAW,UAAU,oBAAoB,UAAU,cAAc;AAAA,MACtI;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,aAAa,IAAI,aAAa,aAAa,OAAK;AACpD,WAAK,UAAU;AAAA,IAChB,CAAC,CAAC;AAEF,SAAK,aAAa,IAAI,aAAa,YAAY,OAAK;AACnD,WAAK,UAAU;AAAA,IAChB,CAAC,CAAC;AAAA,EACH;AAAA,EAEA,qBAAqB,KAAgE;AACpF,QAAI,OAAO,KAAK,MAAM,KAAK,eAAe,QAAQ;AACjD,aAAO,KAAK,eAAe,GAAG;AAAA,IAC/B;AACA,WAAO;AAAA,EACR;AAAA,EAEA,UAAU;AACT,SAAK,aAAa,QAAQ;AAAA,EAC3B;AACD;",
  "names": []
}
