import{isNonEmptyArray as a}from"../../../../base/common/arrays.js";import{DisposableStore as d}from"../../../../base/common/lifecycle.js";import{EditorOption as c}from"../../../common/config/editorOptions.js";import{CharacterSet as n}from"../../../common/core/characterClassifier.js";import{State as h}from"./suggestModel.js";class u{_disposables=new d;_active;constructor(t,e,i,o){this._disposables.add(i.onDidSuggest(s=>{s.completionModel.items.length===0&&this.reset()})),this._disposables.add(i.onDidCancel(s=>{this.reset()})),this._disposables.add(e.onDidShow(()=>this._onItem(e.getFocusedItem()))),this._disposables.add(e.onDidFocus(this._onItem,this)),this._disposables.add(e.onDidHide(this.reset,this)),this._disposables.add(t.onWillType(s=>{if(this._active&&!e.isFrozen()&&i.state!==h.Idle){const r=s.charCodeAt(s.length-1);this._active.acceptCharacters.has(r)&&t.getOption(c.acceptSuggestionOnCommitCharacter)&&o(this._active.item)}}))}_onItem(t){if(!t||!a(t.item.completion.commitCharacters)){this.reset();return}if(this._active&&this._active.item.item===t.item)return;const e=new n;for(const i of t.item.completion.commitCharacters)i.length>0&&e.add(i.charCodeAt(0));this._active={acceptCharacters:e,item:t}}reset(){this._active=void 0}dispose(){this._disposables.dispose()}}export{u as CommitCharacterController};
