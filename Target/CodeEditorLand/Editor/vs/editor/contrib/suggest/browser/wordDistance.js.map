{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/wordDistance.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tbinarySearch,\n\tisFalsyOrEmpty,\n} from \"../../../../base/common/arrays.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport type { IPosition } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport {\n\ttype CompletionItem,\n\tCompletionItemKind,\n} from \"../../../common/languages.js\";\nimport type { IEditorWorkerService } from \"../../../common/services/editorWorker.js\";\nimport { BracketSelectionRangeProvider } from \"../../smartSelect/browser/bracketSelections.js\";\n\nexport abstract class WordDistance {\n\tstatic readonly None = new (class extends WordDistance {\n\t\tdistance() {\n\t\t\treturn 0;\n\t\t}\n\t})();\n\n\tstatic async create(\n\t\tservice: IEditorWorkerService,\n\t\teditor: ICodeEditor,\n\t): Promise<WordDistance> {\n\t\tif (!editor.getOption(EditorOption.suggest).localityBonus) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst position = editor.getPosition();\n\n\t\tif (!service.canComputeWordRanges(model.uri)) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tconst [ranges] =\n\t\t\tawait new BracketSelectionRangeProvider().provideSelectionRanges(\n\t\t\t\tmodel,\n\t\t\t\t[position],\n\t\t\t);\n\t\tif (ranges.length === 0) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tconst wordRanges = await service.computeWordRanges(\n\t\t\tmodel.uri,\n\t\t\tranges[0].range,\n\t\t);\n\t\tif (!wordRanges) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\t// remove current word\n\t\tconst wordUntilPos = model.getWordUntilPosition(position);\n\t\tdelete wordRanges[wordUntilPos.word];\n\n\t\treturn new (class extends WordDistance {\n\t\t\tdistance(anchor: IPosition, item: CompletionItem) {\n\t\t\t\tif (!position.equals(editor.getPosition())) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif (item.kind === CompletionItemKind.Keyword) {\n\t\t\t\t\treturn 2 << 20;\n\t\t\t\t}\n\t\t\t\tconst word =\n\t\t\t\t\ttypeof item.label === \"string\"\n\t\t\t\t\t\t? item.label\n\t\t\t\t\t\t: item.label.label;\n\t\t\t\tconst wordLines = wordRanges[word];\n\t\t\t\tif (isFalsyOrEmpty(wordLines)) {\n\t\t\t\t\treturn 2 << 20;\n\t\t\t\t}\n\t\t\t\tconst idx = binarySearch(\n\t\t\t\t\twordLines,\n\t\t\t\t\tRange.fromPositions(anchor),\n\t\t\t\t\tRange.compareRangesUsingStarts,\n\t\t\t\t);\n\t\t\t\tconst bestWordRange =\n\t\t\t\t\tidx >= 0\n\t\t\t\t\t\t? wordLines[idx]\n\t\t\t\t\t\t: wordLines[Math.max(0, ~idx - 1)];\n\t\t\t\tlet blockDistance = ranges.length;\n\t\t\t\tfor (const range of ranges) {\n\t\t\t\t\tif (!Range.containsRange(range.range, bestWordRange)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tblockDistance -= 1;\n\t\t\t\t}\n\t\t\t\treturn blockDistance;\n\t\t\t}\n\t\t})();\n\t}\n\n\tabstract distance(anchor: IPosition, suggestion: CompletionItem): number;\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,oBAAoB;AAE7B,SAAS,aAAa;AACtB;AAAA,EAEC;AAAA,OACM;AAEP,SAAS,qCAAqC;AAEvC,MAAe,aAAa;AAAA,EApBnC,OAoBmC;AAAA;AAAA;AAAA,EAClC,OAAgB,OAAO,IAAK,cAAc,aAAa;AAAA,IACtD,WAAW;AACV,aAAO;AAAA,IACR;AAAA,EACD,EAAG;AAAA,EAEH,aAAa,OACZ,SACA,QACwB;AACxB,QAAI,CAAC,OAAO,UAAU,aAAa,OAAO,EAAE,eAAe;AAC1D,aAAO,aAAa;AAAA,IACrB;AAEA,QAAI,CAAC,OAAO,SAAS,GAAG;AACvB,aAAO,aAAa;AAAA,IACrB;AAEA,UAAM,QAAQ,OAAO,SAAS;AAC9B,UAAM,WAAW,OAAO,YAAY;AAEpC,QAAI,CAAC,QAAQ,qBAAqB,MAAM,GAAG,GAAG;AAC7C,aAAO,aAAa;AAAA,IACrB;AAEA,UAAM,CAAC,MAAM,IACZ,MAAM,IAAI,8BAA8B,EAAE;AAAA,MACzC;AAAA,MACA,CAAC,QAAQ;AAAA,IACV;AACD,QAAI,OAAO,WAAW,GAAG;AACxB,aAAO,aAAa;AAAA,IACrB;AAEA,UAAM,aAAa,MAAM,QAAQ;AAAA,MAChC,MAAM;AAAA,MACN,OAAO,CAAC,EAAE;AAAA,IACX;AACA,QAAI,CAAC,YAAY;AAChB,aAAO,aAAa;AAAA,IACrB;AAGA,UAAM,eAAe,MAAM,qBAAqB,QAAQ;AACxD,WAAO,WAAW,aAAa,IAAI;AAEnC,WAAO,IAAK,cAAc,aAAa;AAAA,MACtC,SAAS,QAAmB,MAAsB;AACjD,YAAI,CAAC,SAAS,OAAO,OAAO,YAAY,CAAC,GAAG;AAC3C,iBAAO;AAAA,QACR;AACA,YAAI,KAAK,SAAS,mBAAmB,SAAS;AAC7C,iBAAO,KAAK;AAAA,QACb;AACA,cAAM,OACL,OAAO,KAAK,UAAU,WACnB,KAAK,QACL,KAAK,MAAM;AACf,cAAM,YAAY,WAAW,IAAI;AACjC,YAAI,eAAe,SAAS,GAAG;AAC9B,iBAAO,KAAK;AAAA,QACb;AACA,cAAM,MAAM;AAAA,UACX;AAAA,UACA,MAAM,cAAc,MAAM;AAAA,UAC1B,MAAM;AAAA,QACP;AACA,cAAM,gBACL,OAAO,IACJ,UAAU,GAAG,IACb,UAAU,KAAK,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;AACnC,YAAI,gBAAgB,OAAO;AAC3B,mBAAW,SAAS,QAAQ;AAC3B,cAAI,CAAC,MAAM,cAAc,MAAM,OAAO,aAAa,GAAG;AACrD;AAAA,UACD;AACA,2BAAiB;AAAA,QAClB;AACA,eAAO;AAAA,MACR;AAAA,IACD,EAAG;AAAA,EACJ;AAGD;",
  "names": []
}
