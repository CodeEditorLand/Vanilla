{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggestMemory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache } from \"../../../../base/common/map.js\";\nimport { TernarySearchTree } from \"../../../../base/common/ternarySearchTree.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n\tWillSaveStateReason,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { IPosition } from \"../../../common/core/position.js\";\nimport {\n\ttype CompletionItemKind,\n\tCompletionItemKinds,\n} from \"../../../common/languages.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport type { CompletionItem } from \"./suggest.js\";\n\nexport abstract class Memory {\n\tconstructor(readonly name: MemMode) {}\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\tif (items.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst topScore = items[0].score[0];\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst { score, completion: suggestion } = items[i];\n\t\t\tif (score[0] !== topScore) {\n\t\t\t\t// stop when leaving the group of top matches\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (suggestion.preselect) {\n\t\t\t\t// stop when seeing an auto-select-item\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tabstract memorize(\n\t\tmodel: ITextModel,\n\t\tpos: IPosition,\n\t\titem: CompletionItem,\n\t): void;\n\n\tabstract toJSON(): object | undefined;\n\n\tabstract fromJSON(data: object): void;\n}\n\nexport class NoMemory extends Memory {\n\tconstructor() {\n\t\tsuper(\"first\");\n\t}\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\t// no-op\n\t}\n\n\ttoJSON() {\n\t\treturn undefined;\n\t}\n\n\tfromJSON() {\n\t\t//\n\t}\n}\n\nexport interface MemItem {\n\ttype: string | CompletionItemKind;\n\tinsertText: string;\n\ttouch: number;\n}\n\nexport class LRUMemory extends Memory {\n\tconstructor() {\n\t\tsuper(\"recentlyUsed\");\n\t}\n\n\tprivate _cache = new LRUCache<string, MemItem>(300, 0.66);\n\tprivate _seq = 0;\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tconst key = `${model.getLanguageId()}/${item.textLabel}`;\n\t\tthis._cache.set(key, {\n\t\t\ttouch: this._seq++,\n\t\t\ttype: item.completion.kind,\n\t\t\tinsertText: item.completion.insertText,\n\t\t});\n\t}\n\n\toverride select(\n\t\tmodel: ITextModel,\n\t\tpos: IPosition,\n\t\titems: CompletionItem[],\n\t): number {\n\t\tif (items.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst lineSuffix = model\n\t\t\t.getLineContent(pos.lineNumber)\n\t\t\t.substr(pos.column - 10, pos.column - 1);\n\t\tif (/\\s$/.test(lineSuffix)) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\n\t\tconst topScore = items[0].score[0];\n\t\tlet indexPreselect = -1;\n\t\tlet indexRecency = -1;\n\t\tlet seq = -1;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].score[0] !== topScore) {\n\t\t\t\t// consider only top items\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst key = `${model.getLanguageId()}/${items[i].textLabel}`;\n\t\t\tconst item = this._cache.peek(key);\n\t\t\tif (\n\t\t\t\titem &&\n\t\t\t\titem.touch > seq &&\n\t\t\t\titem.type === items[i].completion.kind &&\n\t\t\t\titem.insertText === items[i].completion.insertText\n\t\t\t) {\n\t\t\t\tseq = item.touch;\n\t\t\t\tindexRecency = i;\n\t\t\t}\n\t\t\tif (items[i].completion.preselect && indexPreselect === -1) {\n\t\t\t\t// stop when seeing an auto-select-item\n\t\t\t\treturn (indexPreselect = i);\n\t\t\t}\n\t\t}\n\t\tif (indexRecency !== -1) {\n\t\t\treturn indexRecency;\n\t\t} else if (indexPreselect !== -1) {\n\t\t\treturn indexPreselect;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\ttoJSON(): object {\n\t\treturn this._cache.toJSON();\n\t}\n\n\tfromJSON(data: [string, MemItem][]): void {\n\t\tthis._cache.clear();\n\t\tconst seq = 0;\n\t\tfor (const [key, value] of data) {\n\t\t\tvalue.touch = seq;\n\t\t\tvalue.type =\n\t\t\t\ttypeof value.type === \"number\"\n\t\t\t\t\t? value.type\n\t\t\t\t\t: CompletionItemKinds.fromString(value.type);\n\t\t\tthis._cache.set(key, value);\n\t\t}\n\t\tthis._seq = this._cache.size;\n\t}\n}\n\nexport class PrefixMemory extends Memory {\n\tconstructor() {\n\t\tsuper(\"recentlyUsedByPrefix\");\n\t}\n\n\tprivate _trie = TernarySearchTree.forStrings<MemItem>();\n\tprivate _seq = 0;\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tconst { word } = model.getWordUntilPosition(pos);\n\t\tconst key = `${model.getLanguageId()}/${word}`;\n\t\tthis._trie.set(key, {\n\t\t\ttype: item.completion.kind,\n\t\t\tinsertText: item.completion.insertText,\n\t\t\ttouch: this._seq++,\n\t\t});\n\t}\n\n\toverride select(\n\t\tmodel: ITextModel,\n\t\tpos: IPosition,\n\t\titems: CompletionItem[],\n\t): number {\n\t\tconst { word } = model.getWordUntilPosition(pos);\n\t\tif (!word) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\t\tconst key = `${model.getLanguageId()}/${word}`;\n\t\tlet item = this._trie.get(key);\n\t\tif (!item) {\n\t\t\titem = this._trie.findSubstr(key);\n\t\t}\n\t\tif (item) {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tconst { kind, insertText } = items[i].completion;\n\t\t\t\tif (kind === item.type && insertText === item.insertText) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn super.select(model, pos, items);\n\t}\n\n\ttoJSON(): object {\n\t\tconst entries: [string, MemItem][] = [];\n\t\tthis._trie.forEach((value, key) => entries.push([key, value]));\n\n\t\t// sort by last recently used (touch), then\n\t\t// take the top 200 item and normalize their\n\t\t// touch\n\t\tentries\n\t\t\t.sort((a, b) => -(a[1].touch - b[1].touch))\n\t\t\t.forEach((value, i) => (value[1].touch = i));\n\n\t\treturn entries.slice(0, 200);\n\t}\n\n\tfromJSON(data: [string, MemItem][]): void {\n\t\tthis._trie.clear();\n\t\tif (data.length > 0) {\n\t\t\tthis._seq = data[0][1].touch + 1;\n\t\t\tfor (const [key, value] of data) {\n\t\t\t\tvalue.type =\n\t\t\t\t\ttypeof value.type === \"number\"\n\t\t\t\t\t\t? value.type\n\t\t\t\t\t\t: CompletionItemKinds.fromString(value.type);\n\t\t\t\tthis._trie.set(key, value);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport type MemMode = \"first\" | \"recentlyUsed\" | \"recentlyUsedByPrefix\";\n\nexport class SuggestMemoryService implements ISuggestMemoryService {\n\tprivate static readonly _strategyCtors = new Map<\n\t\tMemMode,\n\t\t{ new (): Memory }\n\t>([\n\t\t[\"recentlyUsedByPrefix\", PrefixMemory],\n\t\t[\"recentlyUsed\", LRUMemory],\n\t\t[\"first\", NoMemory],\n\t]);\n\n\tprivate static readonly _storagePrefix = \"suggest/memories\";\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _persistSoon: RunOnceScheduler;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate _strategy?: Memory;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configService: IConfigurationService,\n\t) {\n\t\tthis._persistSoon = new RunOnceScheduler(() => this._saveState(), 500);\n\t\tthis._disposables.add(\n\t\t\t_storageService.onWillSaveState((e) => {\n\t\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\t\tthis._saveState();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._persistSoon.dispose();\n\t}\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tthis._withStrategy(model, pos).memorize(model, pos, item);\n\t\tthis._persistSoon.schedule();\n\t}\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\treturn this._withStrategy(model, pos).select(model, pos, items);\n\t}\n\n\tprivate _withStrategy(model: ITextModel, pos: IPosition): Memory {\n\t\tconst mode = this._configService.getValue<MemMode>(\n\t\t\t\"editor.suggestSelection\",\n\t\t\t{\n\t\t\t\toverrideIdentifier: model.getLanguageIdAtPosition(\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\tpos.column,\n\t\t\t\t),\n\t\t\t\tresource: model.uri,\n\t\t\t},\n\t\t);\n\n\t\tif (this._strategy?.name !== mode) {\n\t\t\tthis._saveState();\n\t\t\tconst ctor =\n\t\t\t\tSuggestMemoryService._strategyCtors.get(mode) || NoMemory;\n\t\t\tthis._strategy = new ctor();\n\n\t\t\ttry {\n\t\t\t\tconst share = this._configService.getValue<boolean>(\n\t\t\t\t\t\"editor.suggest.shareSuggestSelections\",\n\t\t\t\t);\n\t\t\t\tconst scope = share\n\t\t\t\t\t? StorageScope.PROFILE\n\t\t\t\t\t: StorageScope.WORKSPACE;\n\t\t\t\tconst raw = this._storageService.get(\n\t\t\t\t\t`${SuggestMemoryService._storagePrefix}/${mode}`,\n\t\t\t\t\tscope,\n\t\t\t\t);\n\t\t\t\tif (raw) {\n\t\t\t\t\tthis._strategy.fromJSON(JSON.parse(raw));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// things can go wrong with JSON...\n\t\t\t}\n\t\t}\n\n\t\treturn this._strategy;\n\t}\n\n\tprivate _saveState() {\n\t\tif (this._strategy) {\n\t\t\tconst share = this._configService.getValue<boolean>(\n\t\t\t\t\"editor.suggest.shareSuggestSelections\",\n\t\t\t);\n\t\t\tconst scope = share ? StorageScope.PROFILE : StorageScope.WORKSPACE;\n\t\t\tconst raw = JSON.stringify(this._strategy);\n\t\t\tthis._storageService.store(\n\t\t\t\t`${SuggestMemoryService._storagePrefix}/${this._strategy.name}`,\n\t\t\t\traw,\n\t\t\t\tscope,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport const ISuggestMemoryService =\n\tcreateDecorator<ISuggestMemoryService>(\"ISuggestMemories\");\n\nexport interface ISuggestMemoryService {\n\treadonly _serviceBrand: undefined;\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void;\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number;\n}\n\nregisterSingleton(\n\tISuggestMemoryService,\n\tSuggestMemoryService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
