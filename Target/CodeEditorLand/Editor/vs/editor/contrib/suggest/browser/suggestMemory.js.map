{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/browser/suggestMemory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { TernarySearchTree } from '../../../../base/common/ternarySearchTree.js';\nimport { IPosition } from '../../../common/core/position.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { CompletionItemKind, CompletionItemKinds } from '../../../common/languages.js';\nimport { CompletionItem } from './suggest.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from '../../../../platform/storage/common/storage.js';\n\nexport abstract class Memory {\n\n\tconstructor(readonly name: MemMode) { }\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\tif (items.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst topScore = items[0].score[0];\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst { score, completion: suggestion } = items[i];\n\t\t\tif (score[0] !== topScore) {\n\t\t\t\t// stop when leaving the group of top matches\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (suggestion.preselect) {\n\t\t\t\t// stop when seeing an auto-select-item\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tabstract memorize(model: ITextModel, pos: IPosition, item: CompletionItem): void;\n\n\tabstract toJSON(): object | undefined;\n\n\tabstract fromJSON(data: object): void;\n}\n\nexport class NoMemory extends Memory {\n\n\tconstructor() {\n\t\tsuper('first');\n\t}\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\t// no-op\n\t}\n\n\ttoJSON() {\n\t\treturn undefined;\n\t}\n\n\tfromJSON() {\n\t\t//\n\t}\n}\n\nexport interface MemItem {\n\ttype: string | CompletionItemKind;\n\tinsertText: string;\n\ttouch: number;\n}\n\nexport class LRUMemory extends Memory {\n\n\tconstructor() {\n\t\tsuper('recentlyUsed');\n\t}\n\n\tprivate _cache = new LRUCache<string, MemItem>(300, 0.66);\n\tprivate _seq = 0;\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tconst key = `${model.getLanguageId()}/${item.textLabel}`;\n\t\tthis._cache.set(key, {\n\t\t\ttouch: this._seq++,\n\t\t\ttype: item.completion.kind,\n\t\t\tinsertText: item.completion.insertText\n\t\t});\n\t}\n\n\toverride select(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\n\t\tif (items.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\n\t\tif (/\\s$/.test(lineSuffix)) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\n\t\tconst topScore = items[0].score[0];\n\t\tlet indexPreselect = -1;\n\t\tlet indexRecency = -1;\n\t\tlet seq = -1;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].score[0] !== topScore) {\n\t\t\t\t// consider only top items\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst key = `${model.getLanguageId()}/${items[i].textLabel}`;\n\t\t\tconst item = this._cache.peek(key);\n\t\t\tif (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {\n\t\t\t\tseq = item.touch;\n\t\t\t\tindexRecency = i;\n\t\t\t}\n\t\t\tif (items[i].completion.preselect && indexPreselect === -1) {\n\t\t\t\t// stop when seeing an auto-select-item\n\t\t\t\treturn indexPreselect = i;\n\t\t\t}\n\t\t}\n\t\tif (indexRecency !== -1) {\n\t\t\treturn indexRecency;\n\t\t} else if (indexPreselect !== -1) {\n\t\t\treturn indexPreselect;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\ttoJSON(): object {\n\t\treturn this._cache.toJSON();\n\t}\n\n\tfromJSON(data: [string, MemItem][]): void {\n\t\tthis._cache.clear();\n\t\tconst seq = 0;\n\t\tfor (const [key, value] of data) {\n\t\t\tvalue.touch = seq;\n\t\t\tvalue.type = typeof value.type === 'number' ? value.type : CompletionItemKinds.fromString(value.type);\n\t\t\tthis._cache.set(key, value);\n\t\t}\n\t\tthis._seq = this._cache.size;\n\t}\n}\n\n\nexport class PrefixMemory extends Memory {\n\n\tconstructor() {\n\t\tsuper('recentlyUsedByPrefix');\n\t}\n\n\tprivate _trie = TernarySearchTree.forStrings<MemItem>();\n\tprivate _seq = 0;\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tconst { word } = model.getWordUntilPosition(pos);\n\t\tconst key = `${model.getLanguageId()}/${word}`;\n\t\tthis._trie.set(key, {\n\t\t\ttype: item.completion.kind,\n\t\t\tinsertText: item.completion.insertText,\n\t\t\ttouch: this._seq++\n\t\t});\n\t}\n\n\toverride select(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\tconst { word } = model.getWordUntilPosition(pos);\n\t\tif (!word) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\t\tconst key = `${model.getLanguageId()}/${word}`;\n\t\tlet item = this._trie.get(key);\n\t\tif (!item) {\n\t\t\titem = this._trie.findSubstr(key);\n\t\t}\n\t\tif (item) {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tconst { kind, insertText } = items[i].completion;\n\t\t\t\tif (kind === item.type && insertText === item.insertText) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn super.select(model, pos, items);\n\t}\n\n\ttoJSON(): object {\n\n\t\tconst entries: [string, MemItem][] = [];\n\t\tthis._trie.forEach((value, key) => entries.push([key, value]));\n\n\t\t// sort by last recently used (touch), then\n\t\t// take the top 200 item and normalize their\n\t\t// touch\n\t\tentries\n\t\t\t.sort((a, b) => -(a[1].touch - b[1].touch))\n\t\t\t.forEach((value, i) => value[1].touch = i);\n\n\t\treturn entries.slice(0, 200);\n\t}\n\n\tfromJSON(data: [string, MemItem][]): void {\n\t\tthis._trie.clear();\n\t\tif (data.length > 0) {\n\t\t\tthis._seq = data[0][1].touch + 1;\n\t\t\tfor (const [key, value] of data) {\n\t\t\t\tvalue.type = typeof value.type === 'number' ? value.type : CompletionItemKinds.fromString(value.type);\n\t\t\t\tthis._trie.set(key, value);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport type MemMode = 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';\n\nexport class SuggestMemoryService implements ISuggestMemoryService {\n\n\tprivate static readonly _strategyCtors = new Map<MemMode, { new(): Memory }>([\n\t\t['recentlyUsedByPrefix', PrefixMemory],\n\t\t['recentlyUsed', LRUMemory],\n\t\t['first', NoMemory]\n\t]);\n\n\tprivate static readonly _storagePrefix = 'suggest/memories';\n\n\treadonly _serviceBrand: undefined;\n\n\n\tprivate readonly _persistSoon: RunOnceScheduler;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate _strategy?: Memory;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t) {\n\t\tthis._persistSoon = new RunOnceScheduler(() => this._saveState(), 500);\n\t\tthis._disposables.add(_storageService.onWillSaveState(e => {\n\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\tthis._saveState();\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._persistSoon.dispose();\n\t}\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tthis._withStrategy(model, pos).memorize(model, pos, item);\n\t\tthis._persistSoon.schedule();\n\t}\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\treturn this._withStrategy(model, pos).select(model, pos, items);\n\t}\n\n\tprivate _withStrategy(model: ITextModel, pos: IPosition): Memory {\n\n\t\tconst mode = this._configService.getValue<MemMode>('editor.suggestSelection', {\n\t\t\toverrideIdentifier: model.getLanguageIdAtPosition(pos.lineNumber, pos.column),\n\t\t\tresource: model.uri\n\t\t});\n\n\t\tif (this._strategy?.name !== mode) {\n\n\t\t\tthis._saveState();\n\t\t\tconst ctor = SuggestMemoryService._strategyCtors.get(mode) || NoMemory;\n\t\t\tthis._strategy = new ctor();\n\n\t\t\ttry {\n\t\t\t\tconst share = this._configService.getValue<boolean>('editor.suggest.shareSuggestSelections');\n\t\t\t\tconst scope = share ? StorageScope.PROFILE : StorageScope.WORKSPACE;\n\t\t\t\tconst raw = this._storageService.get(`${SuggestMemoryService._storagePrefix}/${mode}`, scope);\n\t\t\t\tif (raw) {\n\t\t\t\t\tthis._strategy.fromJSON(JSON.parse(raw));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// things can go wrong with JSON...\n\t\t\t}\n\t\t}\n\n\t\treturn this._strategy;\n\t}\n\n\tprivate _saveState() {\n\t\tif (this._strategy) {\n\t\t\tconst share = this._configService.getValue<boolean>('editor.suggest.shareSuggestSelections');\n\t\t\tconst scope = share ? StorageScope.PROFILE : StorageScope.WORKSPACE;\n\t\t\tconst raw = JSON.stringify(this._strategy);\n\t\t\tthis._storageService.store(`${SuggestMemoryService._storagePrefix}/${this._strategy.name}`, raw, scope, StorageTarget.MACHINE);\n\t\t}\n\t}\n}\n\n\nexport const ISuggestMemoryService = createDecorator<ISuggestMemoryService>('ISuggestMemories');\n\nexport interface ISuggestMemoryService {\n\treadonly _serviceBrand: undefined;\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void;\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number;\n}\n\nregisterSingleton(ISuggestMemoryService, SuggestMemoryService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
