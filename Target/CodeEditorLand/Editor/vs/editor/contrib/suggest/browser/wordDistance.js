import{binarySearch as b,isFalsyOrEmpty as y}from"../../../../base/common/arrays.js";import{EditorOption as I}from"../../../common/config/editorOptions.js";import{Range as m}from"../../../common/core/range.js";import{CompletionItemKind as P}from"../../../common/languages.js";import{BracketSelectionRangeProvider as R}from"../../smartSelect/browser/bracketSelections.js";class o{static None=new class extends o{distance(){return 0}};static async create(l,e){if(!e.getOption(I.suggest).localityBonus||!e.hasModel())return o.None;const t=e.getModel(),s=e.getPosition();if(!l.canComputeWordRanges(t.uri))return o.None;const[r]=await new R().provideSelectionRanges(t,[s]);if(r.length===0)return o.None;const a=await l.computeWordRanges(t.uri,r[0].range);if(!a)return o.None;const g=t.getWordUntilPosition(s);return delete a[g.word],new class extends o{distance(d,n){if(!s.equals(e.getPosition()))return 0;if(n.kind===P.Keyword)return 2<<20;const f=typeof n.label=="string"?n.label:n.label.label,i=a[f];if(y(i))return 2<<20;const c=b(i,m.fromPositions(d),m.compareRangesUsingStarts),u=c>=0?i[c]:i[Math.max(0,~c-1)];let p=r.length;for(const w of r){if(!m.containsRange(w.range,u))break;p-=1}return p}}}}export{o as WordDistance};
