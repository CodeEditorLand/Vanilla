import o from"assert";import{timeout as w}from"../../../../../base/common/async.js";import{Event as r}from"../../../../../base/common/event.js";import{DisposableStore as y}from"../../../../../base/common/lifecycle.js";import{URI as I}from"../../../../../base/common/uri.js";import{mock as f}from"../../../../../base/test/common/mock.js";import{Range as g}from"../../../../common/core/range.js";import{Selection as c}from"../../../../common/core/selection.js";import"../../../../common/model/textModel.js";import{CompletionItemInsertTextRule as P,CompletionItemKind as m}from"../../../../common/languages.js";import{IEditorWorkerService as T}from"../../../../common/services/editorWorker.js";import{SnippetController2 as C}from"../../../snippet/browser/snippetController2.js";import{SuggestController as E}from"../../browser/suggestController.js";import{ISuggestMemoryService as N}from"../../browser/suggestMemory.js";import{createTestCodeEditor as q}from"../../../../test/browser/testCodeEditor.js";import{createTextModel as D}from"../../../../test/common/testTextModel.js";import{IMenuService as k}from"../../../../../platform/actions/common/actions.js";import{ServiceCollection as L}from"../../../../../platform/instantiation/common/serviceCollection.js";import{IKeybindingService as V}from"../../../../../platform/keybinding/common/keybinding.js";import{MockKeybindingService as M}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{ILabelService as _}from"../../../../../platform/label/common/label.js";import{ILogService as F,NullLogService as W}from"../../../../../platform/log/common/log.js";import{InMemoryStorageService as G,IStorageService as R}from"../../../../../platform/storage/common/storage.js";import{ITelemetryService as Y}from"../../../../../platform/telemetry/common/telemetry.js";import{NullTelemetryService as A}from"../../../../../platform/telemetry/common/telemetryUtils.js";import{IWorkspaceContextService as B}from"../../../../../platform/workspace/common/workspace.js";import{LanguageFeaturesService as z}from"../../../../common/services/languageFeaturesService.js";import{ILanguageFeaturesService as K}from"../../../../common/services/languageFeatures.js";import{IEnvironmentService as U}from"../../../../../platform/environment/common/environment.js";import{DeleteLinesAction as $}from"../../../linesOperations/browser/linesOperations.js";suite("SuggestController",function(){const u=new y;let t,e,v;const p=new z;teardown(function(){u.clear()}),setup(function(){const i=new L([K,p],[Y,A],[F,new W],[R,u.add(new G)],[V,new M],[T,new class extends f(){computeWordRanges(){return Promise.resolve({})}}],[N,new class extends f(){memorize(){}select(){return 0}}],[k,new class extends f(){createMenu(){return new class extends f(){onDidChange=r.None;dispose(){}}}}],[_,new class extends f(){}],[B,new class extends f(){}],[U,new class extends f(){isBuilt=!0;isExtensionDevelopment=!1}]);v=u.add(D("",void 0,void 0,I.from({scheme:"test-ctrl",path:"/path.tst"}))),e=u.add(q(v,{serviceCollection:i})),e.registerAndInstantiateContribution(C.ID,C),t=e.registerAndInstantiateContribution(E.ID,E)}),test("postfix completion reports incorrect position #86984",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(a,l){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"let ${1:name} = foo$0",insertTextRules:P.InsertAsSnippet,range:{startLineNumber:1,startColumn:9,endLineNumber:1,endColumn:11},additionalTextEdits:[{text:"",range:{startLineNumber:1,startColumn:5,endLineNumber:1,endColumn:9}}]}]}}})),e.setValue("    foo.le"),e.setSelection(new c(1,11,1,11));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await i;const n=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!1,!1),await n,o.strictEqual(e.getValue(),"    let name = foo")}),test("use additionalTextEdits sync when possible",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(a,l){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"hello",range:g.fromPositions(l),additionalTextEdits:[{text:"I came sync",range:{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:1}}]}]}},async resolveCompletionItem(a){return a}})),e.setValue(`hello
hallo`),e.setSelection(new c(2,6,2,6));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await i;const n=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!1,!1),await n,o.strictEqual(e.getValue(),`I came synchello
hallohello`)}),test("resolve additionalTextEdits async when needed",async function(){let i=0;u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(l,s){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"hello",range:g.fromPositions(s)}]}},async resolveCompletionItem(l){return i+=1,await w(10),l.additionalTextEdits=[{text:"I came late",range:{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:1}}],l}})),e.setValue(`hello
hallo`),e.setSelection(new c(2,6,2,6));const n=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await n;const a=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!1,!1),await a,o.strictEqual(e.getValue(),`hello
hallohello`),o.strictEqual(i,1),await w(20),o.strictEqual(e.getValue(),`I came latehello
hallohello`),e.getModel()?.undo(),o.strictEqual(e.getValue(),`hello
hallo`)}),test("resolve additionalTextEdits async when needed (typing)",async function(){let i=0,n=()=>{};u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(s,d){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"hello",range:g.fromPositions(d)}]}},async resolveCompletionItem(s){return i+=1,await new Promise(d=>n=d),s.additionalTextEdits=[{text:"I came late",range:{startLineNumber:1,startColumn:1,endLineNumber:1,endColumn:1}}],s}})),e.setValue(`hello
hallo`),e.setSelection(new c(2,6,2,6));const a=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await a;const l=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!1,!1),await l,o.strictEqual(e.getValue(),`hello
hallohello`),o.strictEqual(i,1),o.ok(e.getSelection()?.equalsSelection(new c(2,11,2,11))),e.trigger("test","type",{text:"TYPING"}),o.strictEqual(e.getValue(),`hello
hallohelloTYPING`),n(),await w(10),o.strictEqual(e.getValue(),`I came latehello
hallohelloTYPING`),o.ok(e.getSelection()?.equalsSelection(new c(2,17,2,17)))}),test("resolve additionalTextEdits async when needed (simple conflict)",async function(){let i=0,n=()=>{};u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(s,d){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"hello",range:g.fromPositions(d)}]}},async resolveCompletionItem(s){return i+=1,await new Promise(d=>n=d),s.additionalTextEdits=[{text:"I came late",range:{startLineNumber:1,startColumn:6,endLineNumber:1,endColumn:6}}],s}})),e.setValue(""),e.setSelection(new c(1,1,1,1));const a=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await a;const l=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!1,!1),await l,o.strictEqual(e.getValue(),"hello"),o.strictEqual(i,1),n(),await w(10),o.strictEqual(e.getValue(),"hello")}),test("resolve additionalTextEdits async when needed (conflict)",async function(){let i=0,n=()=>{};u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(s,d){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"hello",range:g.fromPositions(d)}]}},async resolveCompletionItem(s){return i+=1,await new Promise(d=>n=d),s.additionalTextEdits=[{text:"I came late",range:{startLineNumber:1,startColumn:2,endLineNumber:1,endColumn:2}}],s}})),e.setValue(`hello
hallo`),e.setSelection(new c(2,6,2,6));const a=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await a;const l=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!1,!1),await l,o.strictEqual(e.getValue(),`hello
hallohello`),o.strictEqual(i,1),e.setSelection(new c(1,1,1,1)),e.trigger("test","type",{text:"TYPING"}),o.strictEqual(e.getValue(),`TYPINGhello
hallohello`),n(),await w(10),o.strictEqual(e.getValue(),`TYPINGhello
hallohello`),o.ok(e.getSelection()?.equalsSelection(new c(1,7,1,7)))}),test("resolve additionalTextEdits async when needed (cancel)",async function(){const i=[];u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(l,s){return{suggestions:[{kind:m.Snippet,label:"let",insertText:"hello",range:g.fromPositions(s)},{kind:m.Snippet,label:"let",insertText:"hallo",range:g.fromPositions(s)}]}},async resolveCompletionItem(l){return await new Promise(s=>i.push(s)),l.additionalTextEdits=[{text:"additionalTextEdits",range:{startLineNumber:1,startColumn:2,endLineNumber:1,endColumn:2}}],l}})),e.setValue("abc"),e.setSelection(new c(1,1,1,1));const n=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await n;const a=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!0,!1),await a,o.strictEqual(e.getValue(),"helloabc"),t.acceptNextSuggestion(),i.forEach(l=>l),i.length=0,await w(10),o.strictEqual(e.getValue(),"halloabc")}),test("Completion edits are applied inconsistently when additionalTextEdits and textEdit start at the same offset #143888",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(a,l){return{suggestions:[{kind:m.Text,label:"MyClassName",insertText:"MyClassName",range:g.fromPositions(l),additionalTextEdits:[{range:g.fromPositions(l),text:`import "my_class.txt";
`}]}]}}})),e.setValue(""),e.setSelection(new c(1,1,1,1));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await i;const n=r.toPromise(t.model.onDidCancel);t.acceptSelectedSuggestion(!0,!1),await n,o.strictEqual(e.getValue(),`import "my_class.txt";
MyClassName`)}),test("Pressing enter on autocomplete should always apply the selected dropdown completion, not a different, hidden one #161883",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(s,d){const S=s.getWordUntilPosition(d),h=new g(d.lineNumber,S.startColumn,d.lineNumber,S.endColumn);return{suggestions:[{kind:m.Text,label:"filterBankSize",insertText:"filterBankSize",sortText:"a",range:h},{kind:m.Text,label:"filter",insertText:"filter",sortText:"b",range:h}]}}})),e.setValue("filte"),e.setSelection(new c(1,6,1,6));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest();const{completionModel:n}=await i;o.strictEqual(n.items.length,2);const[a,l]=n.items;o.strictEqual(a.textLabel,"filterBankSize"),o.strictEqual(l.textLabel,"filter"),o.deepStrictEqual(e.getSelection(),new c(1,6,1,6)),e.trigger("keyboard","type",{text:"r"}),o.deepStrictEqual(e.getSelection(),new c(1,7,1,7)),t.acceptSelectedSuggestion(!1,!1),o.strictEqual(e.getValue(),"filter")}),test("Fast autocomple typing selects the previous autocomplete suggestion, #71795",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(S,h){const b=S.getWordUntilPosition(h),x=new g(h.lineNumber,b.startColumn,h.lineNumber,b.endColumn);return{suggestions:[{kind:m.Text,label:"false",insertText:"false",range:x},{kind:m.Text,label:"float",insertText:"float",range:x},{kind:m.Text,label:"for",insertText:"for",range:x},{kind:m.Text,label:"foreach",insertText:"foreach",range:x}]}}})),e.setValue("f"),e.setSelection(new c(1,2,1,2));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest();const{completionModel:n}=await i;o.strictEqual(n.items.length,4);const[a,l,s,d]=n.items;o.strictEqual(a.textLabel,"false"),o.strictEqual(l.textLabel,"float"),o.strictEqual(s.textLabel,"for"),o.strictEqual(d.textLabel,"foreach"),o.deepStrictEqual(e.getSelection(),new c(1,2,1,2)),e.trigger("keyboard","type",{text:"o"}),o.deepStrictEqual(e.getSelection(),new c(1,3,1,3)),t.acceptSelectedSuggestion(!1,!1),o.strictEqual(e.getValue(),"for")}),test.skip("Suggest widget gets orphaned in editor #187779",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(a,l){const s=a.getLineContent(l.lineNumber),d=new g(l.lineNumber,1,l.lineNumber,l.column);return{suggestions:[{kind:m.Text,label:s,insertText:s,range:d}]}}})),e.setValue(`console.log(example.)
console.log(EXAMPLE.not)`),e.setSelection(new c(1,21,1,21));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest(),await i;const n=r.toPromise(t.model.onDidCancel);new $().run(null,e),await n}),test("Ranges where additionalTextEdits are applied are not appropriate when characters are typed #177591",async function(){u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(i,n){return{suggestions:[{kind:m.Snippet,label:"aaa",insertText:"aaa",range:g.fromPositions(n),additionalTextEdits:[{range:g.fromPositions(n.delta(0,10)),text:"aaa"}]}]}}}));{e.setValue("123456789123456789"),e.setSelection(new c(1,1,1,1));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest();const n=await i;o.strictEqual(n.completionModel.items.length,1),o.strictEqual(n.completionModel.items[0].textLabel,"aaa"),t.acceptSelectedSuggestion(!1,!1),o.strictEqual(e.getValue(),"aaa1234567891aaa23456789")}{e.setValue("123456789123456789"),e.setSelection(new c(1,1,1,1));const i=r.toPromise(t.model.onDidSuggest);t.triggerSuggest();const n=await i;o.strictEqual(n.completionModel.items.length,1),o.strictEqual(n.completionModel.items[0].textLabel,"aaa"),e.trigger("keyboard","type",{text:"aa"}),t.acceptSelectedSuggestion(!1,!1),o.strictEqual(e.getValue(),"aaa1234567891aaa23456789")}}),test.skip('[Bug] "No suggestions" persists while typing if the completion helper is set to return an empty list for empty content#3557',async function(){let i=0;u.add(p.completionProvider.register({scheme:"test-ctrl"},{_debugDisplayName:"test",provideCompletionItems(d,S){if(i+=1,i!==1)return{suggestions:[{kind:m.Text,label:"foo",insertText:"foo",range:new g(S.lineNumber,1,S.lineNumber,S.column)}]}}}));const n=r.toPromise(t.model.onDidSuggest);t.triggerSuggest();const a=await n;o.strictEqual(a.completionModel.items.length,0),o.strictEqual(i,1);const l=r.toPromise(t.model.onDidSuggest);e.trigger("keyboard","type",{text:"f"});const s=await l;o.strictEqual(s.completionModel.items.length,1),o.strictEqual(i,2)})});
