{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/suggest/test/browser/suggestMemory.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IPosition } from '../../../../common/core/position.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { CompletionItem } from '../../browser/suggest.js';\nimport { LRUMemory, Memory, NoMemory, PrefixMemory } from '../../browser/suggestMemory.js';\nimport { createSuggestItem } from './completionModel.test.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\n\nsuite('SuggestMemories', function () {\n\n\tlet pos: IPosition;\n\tlet buffer: ITextModel;\n\tlet items: CompletionItem[];\n\n\tsetup(function () {\n\t\tpos = { lineNumber: 1, column: 1 };\n\t\tbuffer = createTextModel('This is some text.\\nthis.\\nfoo: ,');\n\t\titems = [\n\t\t\tcreateSuggestItem('foo', 0),\n\t\t\tcreateSuggestItem('bar', 0)\n\t\t];\n\t});\n\n\tteardown(() => {\n\t\tbuffer.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('AbstractMemory, select', function () {\n\n\t\tconst mem = new class extends Memory {\n\t\t\tconstructor() {\n\t\t\t\tsuper('first');\n\t\t\t}\n\t\t\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\t\t\tthrow new Error('Method not implemented.');\n\t\t\t} toJSON(): object {\n\t\t\t\tthrow new Error('Method not implemented.');\n\t\t\t}\n\t\t\tfromJSON(data: object): void {\n\t\t\t\tthrow new Error('Method not implemented.');\n\t\t\t}\n\t\t};\n\n\t\tconst item1 = createSuggestItem('fazz', 0);\n\t\tconst item2 = createSuggestItem('bazz', 0);\n\t\tconst item3 = createSuggestItem('bazz', 0);\n\t\tconst item4 = createSuggestItem('bazz', 0);\n\t\titem1.completion.preselect = false;\n\t\titem2.completion.preselect = true;\n\t\titem3.completion.preselect = true;\n\n\t\tassert.strictEqual(mem.select(buffer, pos, [item1, item2, item3, item4]), 1);\n\t});\n\n\ttest('[No|Prefix|LRU]Memory honor selection boost', function () {\n\t\tconst item1 = createSuggestItem('fazz', 0);\n\t\tconst item2 = createSuggestItem('bazz', 0);\n\t\tconst item3 = createSuggestItem('bazz', 0);\n\t\tconst item4 = createSuggestItem('bazz', 0);\n\t\titem1.completion.preselect = false;\n\t\titem2.completion.preselect = true;\n\t\titem3.completion.preselect = true;\n\t\tconst items = [item1, item2, item3, item4];\n\n\n\t\tassert.strictEqual(new NoMemory().select(buffer, pos, items), 1);\n\t\tassert.strictEqual(new LRUMemory().select(buffer, pos, items), 1);\n\t\tassert.strictEqual(new PrefixMemory().select(buffer, pos, items), 1);\n\t});\n\n\ttest('NoMemory', () => {\n\n\t\tconst mem = new NoMemory();\n\n\t\tassert.strictEqual(mem.select(buffer, pos, items), 0);\n\t\tassert.strictEqual(mem.select(buffer, pos, []), 0);\n\n\t\tmem.memorize(buffer, pos, items[0]);\n\t\tmem.memorize(buffer, pos, null!);\n\t});\n\n\ttest('LRUMemory', () => {\n\n\t\tpos = { lineNumber: 2, column: 6 };\n\n\t\tconst mem = new LRUMemory();\n\t\tmem.memorize(buffer, pos, items[1]);\n\n\t\tassert.strictEqual(mem.select(buffer, pos, items), 1);\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 3 }, items), 0);\n\n\t\tmem.memorize(buffer, pos, items[0]);\n\t\tassert.strictEqual(mem.select(buffer, pos, items), 0);\n\n\t\tassert.strictEqual(mem.select(buffer, pos, [\n\t\t\tcreateSuggestItem('new', 0),\n\t\t\tcreateSuggestItem('bar', 0)\n\t\t]), 1);\n\n\t\tassert.strictEqual(mem.select(buffer, pos, [\n\t\t\tcreateSuggestItem('new1', 0),\n\t\t\tcreateSuggestItem('new2', 0)\n\t\t]), 0);\n\t});\n\n\ttest('`\"editor.suggestSelection\": \"recentlyUsed\"` should be a little more sticky #78571', function () {\n\n\t\tconst item1 = createSuggestItem('gamma', 0);\n\t\tconst item2 = createSuggestItem('game', 0);\n\t\titems = [item1, item2];\n\n\t\tconst mem = new LRUMemory();\n\t\tbuffer.setValue('    foo.');\n\t\tmem.memorize(buffer, { lineNumber: 1, column: 1 }, item2);\n\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 2 }, items), 0); // leading whitespace -> ignore recent items\n\n\t\tmem.memorize(buffer, { lineNumber: 1, column: 9 }, item2);\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 9 }, items), 1); // foo.\n\n\t\tbuffer.setValue('    foo.g');\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 10 }, items), 1); // foo.g, 'gamma' and 'game' have the same score\n\n\t\titem1.score = [10, 0, 0];\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 10 }, items), 0); // foo.g, 'gamma' has higher score\n\n\t});\n\n\ttest('intellisense is not showing top options first #43429', function () {\n\t\t// ensure we don't memorize for whitespace prefixes\n\n\t\tpos = { lineNumber: 2, column: 6 };\n\t\tconst mem = new LRUMemory();\n\n\t\tmem.memorize(buffer, pos, items[1]);\n\t\tassert.strictEqual(mem.select(buffer, pos, items), 1);\n\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 3, column: 5 }, items), 0); // foo: |,\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 3, column: 6 }, items), 1); // foo: ,|\n\t});\n\n\ttest('PrefixMemory', () => {\n\n\t\tconst mem = new PrefixMemory();\n\t\tbuffer.setValue('constructor');\n\t\tconst item0 = createSuggestItem('console', 0);\n\t\tconst item1 = createSuggestItem('const', 0);\n\t\tconst item2 = createSuggestItem('constructor', 0);\n\t\tconst item3 = createSuggestItem('constant', 0);\n\t\tconst items = [item0, item1, item2, item3];\n\n\t\tmem.memorize(buffer, { lineNumber: 1, column: 2 }, item1); // c -> const\n\t\tmem.memorize(buffer, { lineNumber: 1, column: 3 }, item0); // co -> console\n\t\tmem.memorize(buffer, { lineNumber: 1, column: 4 }, item2); // con -> constructor\n\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 1 }, items), 0);\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 2 }, items), 1);\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 3 }, items), 0);\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 4 }, items), 2);\n\t\tassert.strictEqual(mem.select(buffer, { lineNumber: 1, column: 7 }, items), 2); // find substr\n\t});\n\n});\n"],
  "mappings": "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",
  "names": ["pos", "items"]
}
