import o from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../../../../../base/test/common/utils.js";import"../../../../common/core/position.js";import"../../../../common/model.js";import"../../browser/suggest.js";import{LRUMemory as a,Memory as z,NoMemory as b,PrefixMemory as p}from"../../browser/suggestMemory.js";import{createSuggestItem as m}from"./completionModel.test.js";import{createTextModel as E}from"../../../../test/common/testTextModel.js";suite("SuggestMemories",function(){let s,e,l;setup(function(){s={lineNumber:1,column:1},e=E(`This is some text.
this.
foo: ,`),l=[m("foo",0),m("bar",0)]}),teardown(()=>{e.dispose()}),f(),test("AbstractMemory, select",function(){const t=new class extends z{constructor(){super("first")}memorize(u,N,q){throw new Error("Method not implemented.")}toJSON(){throw new Error("Method not implemented.")}fromJSON(u){throw new Error("Method not implemented.")}},r=m("fazz",0),n=m("bazz",0),i=m("bazz",0),c=m("bazz",0);r.completion.preselect=!1,n.completion.preselect=!0,i.completion.preselect=!0,o.strictEqual(t.select(e,s,[r,n,i,c]),1)}),test("[No|Prefix|LRU]Memory honor selection boost",function(){const t=m("fazz",0),r=m("bazz",0),n=m("bazz",0),i=m("bazz",0);t.completion.preselect=!1,r.completion.preselect=!0,n.completion.preselect=!0;const c=[t,r,n,i];o.strictEqual(new b().select(e,s,c),1),o.strictEqual(new a().select(e,s,c),1),o.strictEqual(new p().select(e,s,c),1)}),test("NoMemory",()=>{const t=new b;o.strictEqual(t.select(e,s,l),0),o.strictEqual(t.select(e,s,[]),0),t.memorize(e,s,l[0]),t.memorize(e,s,null)}),test("LRUMemory",()=>{s={lineNumber:2,column:6};const t=new a;t.memorize(e,s,l[1]),o.strictEqual(t.select(e,s,l),1),o.strictEqual(t.select(e,{lineNumber:1,column:3},l),0),t.memorize(e,s,l[0]),o.strictEqual(t.select(e,s,l),0),o.strictEqual(t.select(e,s,[m("new",0),m("bar",0)]),1),o.strictEqual(t.select(e,s,[m("new1",0),m("new2",0)]),0)}),test('`"editor.suggestSelection": "recentlyUsed"` should be a little more sticky #78571',function(){const t=m("gamma",0),r=m("game",0);l=[t,r];const n=new a;e.setValue("    foo."),n.memorize(e,{lineNumber:1,column:1},r),o.strictEqual(n.select(e,{lineNumber:1,column:2},l),0),n.memorize(e,{lineNumber:1,column:9},r),o.strictEqual(n.select(e,{lineNumber:1,column:9},l),1),e.setValue("    foo.g"),o.strictEqual(n.select(e,{lineNumber:1,column:10},l),1),t.score=[10,0,0],o.strictEqual(n.select(e,{lineNumber:1,column:10},l),0)}),test("intellisense is not showing top options first #43429",function(){s={lineNumber:2,column:6};const t=new a;t.memorize(e,s,l[1]),o.strictEqual(t.select(e,s,l),1),o.strictEqual(t.select(e,{lineNumber:3,column:5},l),0),o.strictEqual(t.select(e,{lineNumber:3,column:6},l),1)}),test("PrefixMemory",()=>{const t=new p;e.setValue("constructor");const r=m("console",0),n=m("const",0),i=m("constructor",0),c=m("constant",0),u=[r,n,i,c];t.memorize(e,{lineNumber:1,column:2},n),t.memorize(e,{lineNumber:1,column:3},r),t.memorize(e,{lineNumber:1,column:4},i),o.strictEqual(t.select(e,{lineNumber:1,column:1},u),0),o.strictEqual(t.select(e,{lineNumber:1,column:2},u),1),o.strictEqual(t.select(e,{lineNumber:1,column:3},u),0),o.strictEqual(t.select(e,{lineNumber:1,column:4},u),2),o.strictEqual(t.select(e,{lineNumber:1,column:7},u),2)})});
