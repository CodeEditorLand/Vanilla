{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codelens/browser/codeLensCache.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenWindowIdle } from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { LRUCache } from \"../../../../base/common/map.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n\tWillSaveStateReason,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type {\n\tCodeLens,\n\tCodeLensList,\n\tCodeLensProvider,\n} from \"../../../common/languages.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { CodeLensModel } from \"./codelens.js\";\n\nexport const ICodeLensCache = createDecorator<ICodeLensCache>(\"ICodeLensCache\");\n\nexport interface ICodeLensCache {\n\treadonly _serviceBrand: undefined;\n\tput(model: ITextModel, data: CodeLensModel): void;\n\tget(model: ITextModel): CodeLensModel | undefined;\n\tdelete(model: ITextModel): void;\n}\n\ninterface ISerializedCacheData {\n\tlineCount: number;\n\tlines: number[];\n}\n\nclass CacheItem {\n\tconstructor(\n\t\treadonly lineCount: number,\n\t\treadonly data: CodeLensModel,\n\t) {}\n}\n\nexport class CodeLensCache implements ICodeLensCache {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _fakeProvider = new (class implements CodeLensProvider {\n\t\tprovideCodeLenses(): CodeLensList {\n\t\t\tthrow new Error(\"not supported\");\n\t\t}\n\t})();\n\n\tprivate readonly _cache = new LRUCache<string, CacheItem>(20, 0.75);\n\n\tconstructor(@IStorageService storageService: IStorageService) {\n\t\t// remove old data\n\t\tconst oldkey = \"codelens/cache\";\n\t\trunWhenWindowIdle(mainWindow, () =>\n\t\t\tstorageService.remove(oldkey, StorageScope.WORKSPACE),\n\t\t);\n\n\t\t// restore lens data on start\n\t\tconst key = \"codelens/cache2\";\n\t\tconst raw = storageService.get(key, StorageScope.WORKSPACE, \"{}\");\n\t\tthis._deserialize(raw);\n\n\t\t// store lens data on shutdown\n\t\tconst onWillSaveStateBecauseOfShutdown = Event.filter(\n\t\t\tstorageService.onWillSaveState,\n\t\t\t(e) => e.reason === WillSaveStateReason.SHUTDOWN,\n\t\t);\n\t\tEvent.once(onWillSaveStateBecauseOfShutdown)((e) => {\n\t\t\tstorageService.store(\n\t\t\t\tkey,\n\t\t\t\tthis._serialize(),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t});\n\t}\n\n\tput(model: ITextModel, data: CodeLensModel): void {\n\t\t// create a copy of the model that is without command-ids\n\t\t// but with comand-labels\n\t\tconst copyItems = data.lenses.map((item): CodeLens => {\n\t\t\treturn {\n\t\t\t\trange: item.symbol.range,\n\t\t\t\tcommand: item.symbol.command && {\n\t\t\t\t\tid: \"\",\n\t\t\t\t\ttitle: item.symbol.command?.title,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t\tconst copyModel = new CodeLensModel();\n\t\tcopyModel.add(\n\t\t\t{ lenses: copyItems, dispose: () => {} },\n\t\t\tthis._fakeProvider,\n\t\t);\n\n\t\tconst item = new CacheItem(model.getLineCount(), copyModel);\n\t\tthis._cache.set(model.uri.toString(), item);\n\t}\n\n\tget(model: ITextModel) {\n\t\tconst item = this._cache.get(model.uri.toString());\n\t\treturn item && item.lineCount === model.getLineCount()\n\t\t\t? item.data\n\t\t\t: undefined;\n\t}\n\n\tdelete(model: ITextModel): void {\n\t\tthis._cache.delete(model.uri.toString());\n\t}\n\n\t// --- persistence\n\n\tprivate _serialize(): string {\n\t\tconst data: Record<string, ISerializedCacheData> = Object.create(null);\n\t\tfor (const [key, value] of this._cache) {\n\t\t\tconst lines = new Set<number>();\n\t\t\tfor (const d of value.data.lenses) {\n\t\t\t\tlines.add(d.symbol.range.startLineNumber);\n\t\t\t}\n\t\t\tdata[key] = {\n\t\t\t\tlineCount: value.lineCount,\n\t\t\t\tlines: [...lines.values()],\n\t\t\t};\n\t\t}\n\t\treturn JSON.stringify(data);\n\t}\n\n\tprivate _deserialize(raw: string): void {\n\t\ttry {\n\t\t\tconst data: Record<string, ISerializedCacheData> = JSON.parse(raw);\n\t\t\tfor (const key in data) {\n\t\t\t\tconst element = data[key];\n\t\t\t\tconst lenses: CodeLens[] = [];\n\t\t\t\tfor (const line of element.lines) {\n\t\t\t\t\tlenses.push({ range: new Range(line, 1, line, 11) });\n\t\t\t\t}\n\n\t\t\t\tconst model = new CodeLensModel();\n\t\t\t\tmodel.add({ lenses, dispose() {} }, this._fakeProvider);\n\t\t\t\tthis._cache.set(key, new CacheItem(element.lineCount, model));\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignore...\n\t\t}\n\t}\n}\n\nregisterSingleton(ICodeLensCache, CodeLensCache, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["item"]
}
