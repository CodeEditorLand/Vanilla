var F=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var v=(u,e,n,s)=>{for(var o=s>1?void 0:s?T(e,n):e,t=u.length-1,i;t>=0;t--)(i=u[t])&&(o=(s?i(e,n,o):i(o))||o);return s&&o&&F(e,n,o),o},L=(u,e)=>(n,s)=>e(n,s,u);import{createCancelablePromise as y,disposableTimeout as N,RunOnceScheduler as b}from"../../../../base/common/async.js";import{onUnexpectedError as D,onUnexpectedExternalError as x}from"../../../../base/common/errors.js";import{DisposableStore as f,toDisposable as S}from"../../../../base/common/lifecycle.js";import{StableEditorScrollState as I}from"../../../browser/stableEditorScroll.js";import{MouseTargetType as O}from"../../../browser/editorBrowser.js";import{EditorAction as V,EditorContributionInstantiation as A,registerEditorAction as H,registerEditorContribution as z}from"../../../browser/editorExtensions.js";import{EditorOption as m,EDITOR_FONT_DEFAULTS as R}from"../../../common/config/editorOptions.js";import{EditorContextKeys as k}from"../../../common/editorContextKeys.js";import{getCodeLensModel as W}from"./codelens.js";import{ICodeLensCache as U}from"./codeLensCache.js";import{CodeLensHelper as g,CodeLensWidget as M}from"./codelensWidget.js";import{localize as P}from"../../../../nls.js";import{ICommandService as w}from"../../../../platform/commands/common/commands.js";import{INotificationService as E}from"../../../../platform/notification/common/notification.js";import{IQuickInputService as G}from"../../../../platform/quickinput/common/quickInput.js";import{ILanguageFeatureDebounceService as Z}from"../../../common/services/languageFeatureDebounce.js";import{ILanguageFeaturesService as $}from"../../../common/services/languageFeatures.js";let p=class{constructor(e,n,s,o,t,i){this._editor=e;this._languageFeaturesService=n;this._commandService=o;this._notificationService=t;this._codeLensCache=i;this._provideCodeLensDebounce=s.for(n.codeLensProvider,"CodeLensProvide",{min:250}),this._resolveCodeLensesDebounce=s.for(n.codeLensProvider,"CodeLensResolve",{min:250,salt:"resolve"}),this._resolveCodeLensesScheduler=new b(()=>this._resolveCodeLensesInViewport(),this._resolveCodeLensesDebounce.default()),this._disposables.add(this._editor.onDidChangeModel(()=>this._onModelChange())),this._disposables.add(this._editor.onDidChangeModelLanguage(()=>this._onModelChange())),this._disposables.add(this._editor.onDidChangeConfiguration(r=>{(r.hasChanged(m.fontInfo)||r.hasChanged(m.codeLensFontSize)||r.hasChanged(m.codeLensFontFamily))&&this._updateLensStyle(),r.hasChanged(m.codeLens)&&this._onModelChange()})),this._disposables.add(n.codeLensProvider.onDidChange(this._onModelChange,this)),this._onModelChange(),this._updateLensStyle()}static ID="css.editor.codeLens";_disposables=new f;_localToDispose=new f;_lenses=[];_provideCodeLensDebounce;_resolveCodeLensesDebounce;_resolveCodeLensesScheduler;_getCodeLensModelPromise;_oldCodeLensModels=new f;_currentCodeLensModel;_resolveCodeLensesPromise;dispose(){this._localDispose(),this._disposables.dispose(),this._oldCodeLensModels.dispose(),this._currentCodeLensModel?.dispose()}_getLayoutInfo(){const e=Math.max(1.3,this._editor.getOption(m.lineHeight)/this._editor.getOption(m.fontSize));let n=this._editor.getOption(m.codeLensFontSize);return(!n||n<5)&&(n=this._editor.getOption(m.fontSize)*.9|0),{fontSize:n,codeLensHeight:n*e|0}}_updateLensStyle(){const{codeLensHeight:e,fontSize:n}=this._getLayoutInfo(),s=this._editor.getOption(m.codeLensFontFamily),o=this._editor.getOption(m.fontInfo),{style:t}=this._editor.getContainerDomNode();t.setProperty("--vscode-editorCodeLens-lineHeight",`${e}px`),t.setProperty("--vscode-editorCodeLens-fontSize",`${n}px`),t.setProperty("--vscode-editorCodeLens-fontFeatureSettings",o.fontFeatureSettings),s&&(t.setProperty("--vscode-editorCodeLens-fontFamily",s),t.setProperty("--vscode-editorCodeLens-fontFamilyDefault",R.fontFamily)),this._editor.changeViewZones(i=>{for(const r of this._lenses)r.updateHeight(e,i)})}_localDispose(){this._getCodeLensModelPromise?.cancel(),this._getCodeLensModelPromise=void 0,this._resolveCodeLensesPromise?.cancel(),this._resolveCodeLensesPromise=void 0,this._localToDispose.clear(),this._oldCodeLensModels.clear(),this._currentCodeLensModel?.dispose()}_onModelChange(){this._localDispose();const e=this._editor.getModel();if(!e||!this._editor.getOption(m.codeLens)||e.isTooLargeForTokenization())return;const n=this._codeLensCache.get(e);if(n&&this._renderCodeLensSymbols(n),!this._languageFeaturesService.codeLensProvider.has(e)){n&&N(()=>{const o=this._codeLensCache.get(e);n===o&&(this._codeLensCache.delete(e),this._onModelChange())},30*1e3,this._localToDispose);return}for(const o of this._languageFeaturesService.codeLensProvider.all(e))if(typeof o.onDidChange=="function"){const t=o.onDidChange(()=>s.schedule());this._localToDispose.add(t)}const s=new b(()=>{const o=Date.now();this._getCodeLensModelPromise?.cancel(),this._getCodeLensModelPromise=y(t=>W(this._languageFeaturesService.codeLensProvider,e,t)),this._getCodeLensModelPromise.then(t=>{this._currentCodeLensModel&&this._oldCodeLensModels.add(this._currentCodeLensModel),this._currentCodeLensModel=t,this._codeLensCache.put(e,t);const i=this._provideCodeLensDebounce.update(e,Date.now()-o);s.delay=i,this._renderCodeLensSymbols(t),this._resolveCodeLensesInViewportSoon()},D)},this._provideCodeLensDebounce.get(e));this._localToDispose.add(s),this._localToDispose.add(S(()=>this._resolveCodeLensesScheduler.cancel())),this._localToDispose.add(this._editor.onDidChangeModelContent(()=>{this._editor.changeDecorations(o=>{this._editor.changeViewZones(t=>{const i=[];let r=-1;this._lenses.forEach(d=>{!d.isValid()||r===d.getLineNumber()?i.push(d):(d.update(t),r=d.getLineNumber())});const l=new g;i.forEach(d=>{d.dispose(l,t),this._lenses.splice(this._lenses.indexOf(d),1)}),l.commit(o)})}),s.schedule(),this._resolveCodeLensesScheduler.cancel(),this._resolveCodeLensesPromise?.cancel(),this._resolveCodeLensesPromise=void 0})),this._localToDispose.add(this._editor.onDidFocusEditorText(()=>{s.schedule()})),this._localToDispose.add(this._editor.onDidBlurEditorText(()=>{s.cancel()})),this._localToDispose.add(this._editor.onDidScrollChange(o=>{o.scrollTopChanged&&this._lenses.length>0&&this._resolveCodeLensesInViewportSoon()})),this._localToDispose.add(this._editor.onDidLayoutChange(()=>{this._resolveCodeLensesInViewportSoon()})),this._localToDispose.add(S(()=>{if(this._editor.getModel()){const o=I.capture(this._editor);this._editor.changeDecorations(t=>{this._editor.changeViewZones(i=>{this._disposeAllLenses(t,i)})}),o.restore(this._editor)}else this._disposeAllLenses(void 0,void 0)})),this._localToDispose.add(this._editor.onMouseDown(o=>{if(o.target.type!==O.CONTENT_WIDGET)return;let t=o.target.element;if(t?.tagName==="SPAN"&&(t=t.parentElement),t?.tagName==="A")for(const i of this._lenses){const r=i.getCommand(t);if(r){this._commandService.executeCommand(r.id,...r.arguments||[]).catch(l=>this._notificationService.error(l));break}}})),s.schedule()}_disposeAllLenses(e,n){const s=new g;for(const o of this._lenses)o.dispose(s,n);e&&s.commit(e),this._lenses.length=0}_renderCodeLensSymbols(e){if(!this._editor.hasModel())return;const n=this._editor.getModel().getLineCount(),s=[];let o;for(const r of e.lenses){const l=r.symbol.range.startLineNumber;l<1||l>n||(o&&o[o.length-1].symbol.range.startLineNumber===l?o.push(r):(o=[r],s.push(o)))}if(!s.length&&!this._lenses.length)return;const t=I.capture(this._editor),i=this._getLayoutInfo();this._editor.changeDecorations(r=>{this._editor.changeViewZones(l=>{const d=new g;let a=0,c=0;for(;c<s.length&&a<this._lenses.length;){const h=s[c][0].symbol.range.startLineNumber,_=this._lenses[a].getLineNumber();_<h?(this._lenses[a].dispose(d,l),this._lenses.splice(a,1)):_===h?(this._lenses[a].updateCodeLensSymbols(s[c],d),c++,a++):(this._lenses.splice(a,0,new M(s[c],this._editor,d,l,i.codeLensHeight,()=>this._resolveCodeLensesInViewportSoon())),a++,c++)}for(;a<this._lenses.length;)this._lenses[a].dispose(d,l),this._lenses.splice(a,1);for(;c<s.length;)this._lenses.push(new M(s[c],this._editor,d,l,i.codeLensHeight,()=>this._resolveCodeLensesInViewportSoon())),c++;d.commit(r)})}),t.restore(this._editor)}_resolveCodeLensesInViewportSoon(){this._editor.getModel()&&this._resolveCodeLensesScheduler.schedule()}_resolveCodeLensesInViewport(){this._resolveCodeLensesPromise?.cancel(),this._resolveCodeLensesPromise=void 0;const e=this._editor.getModel();if(!e)return;const n=[],s=[];if(this._lenses.forEach(i=>{const r=i.computeIfNecessary(e);r&&(n.push(r),s.push(i))}),n.length===0)return;const o=Date.now(),t=y(i=>{const r=n.map((l,d)=>{const a=new Array(l.length),c=l.map((h,_)=>!h.symbol.command&&typeof h.provider.resolveCodeLens=="function"?Promise.resolve(h.provider.resolveCodeLens(e,h.symbol,i)).then(C=>{a[_]=C},x):(a[_]=h.symbol,Promise.resolve(void 0)));return Promise.all(c).then(()=>{!i.isCancellationRequested&&!s[d].isDisposed()&&s[d].updateCommands(a)})});return Promise.all(r)});this._resolveCodeLensesPromise=t,this._resolveCodeLensesPromise.then(()=>{const i=this._resolveCodeLensesDebounce.update(e,Date.now()-o);this._resolveCodeLensesScheduler.delay=i,this._currentCodeLensModel&&this._codeLensCache.put(e,this._currentCodeLensModel),this._oldCodeLensModels.clear(),t===this._resolveCodeLensesPromise&&(this._resolveCodeLensesPromise=void 0)},i=>{D(i),t===this._resolveCodeLensesPromise&&(this._resolveCodeLensesPromise=void 0)})}async getModel(){return await this._getCodeLensModelPromise,await this._resolveCodeLensesPromise,this._currentCodeLensModel?.isDisposed?void 0:this._currentCodeLensModel}};p=v([L(1,$),L(2,Z),L(3,w),L(4,E),L(5,U)],p),z(p.ID,p,A.AfterFirstRender),H(class extends V{constructor(){super({id:"codelens.showLensesInCurrentLine",precondition:k.hasCodeLensProvider,label:P("showLensOnLine","Show CodeLens Commands For Current Line"),alias:"Show CodeLens Commands For Current Line"})}async run(e,n){if(!n.hasModel())return;const s=e.get(G),o=e.get(w),t=e.get(E),i=n.getSelection().positionLineNumber,r=n.getContribution(p.ID);if(!r)return;const l=await r.getModel();if(!l)return;const d=[];for(const h of l.lenses)h.symbol.command&&h.symbol.range.startLineNumber===i&&d.push({label:h.symbol.command.title,command:h.symbol.command});if(d.length===0)return;const a=await s.pick(d,{canPickMany:!1,placeHolder:P("placeHolder","Select a command")});if(!a)return;let c=a.command;if(l.isDisposed){const _=(await r.getModel())?.lenses.find(C=>C.symbol.range.startLineNumber===i&&C.symbol.command?.title===c.title);if(!_||!_.symbol.command)return;c=_.symbol.command}try{await o.executeCommand(c.id,...c.arguments||[])}catch(h){t.error(h)}}});export{p as CodeLensContribution};
