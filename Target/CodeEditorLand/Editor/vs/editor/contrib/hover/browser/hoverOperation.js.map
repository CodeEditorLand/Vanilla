{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/hover/browser/hoverOperation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableObject, CancelableAsyncIterableObject, createCancelableAsyncIterable, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\n\nexport interface IHoverComputer<TArgs, TResult> {\n\t/**\n\t * This is called after half the hover time\n\t */\n\tcomputeAsync?: (args: TArgs, token: CancellationToken) => AsyncIterableObject<TResult>;\n\t/**\n\t * This is called after all the hover time\n\t */\n\tcomputeSync?: (args: TArgs) => TResult[];\n}\n\nconst enum HoverOperationState {\n\tIdle,\n\tFirstWait,\n\tSecondWait,\n\tWaitingForAsync = 3,\n\tWaitingForAsyncShowingLoading = 4,\n}\n\nexport const enum HoverStartMode {\n\tDelayed = 0,\n\tImmediate = 1\n}\n\nexport const enum HoverStartSource {\n\tMouse = 0,\n\tKeyboard = 1\n}\n\nexport class HoverResult<TArgs, TResult> {\n\tconstructor(\n\t\tpublic readonly value: TResult[],\n\t\tpublic readonly isComplete: boolean,\n\t\tpublic readonly hasLoadingMessage: boolean,\n\t\tpublic readonly options: TArgs\n\t) { }\n}\n\n/**\n * Computing the hover is very fine tuned.\n *\n * Suppose the hover delay is 300ms (the default). Then, when resting the mouse at an anchor:\n * - at 150ms, the async computation is triggered (i.e. semantic hover)\n *   - if async results already come in, they are not rendered yet.\n * - at 300ms, the sync computation is triggered (i.e. decorations, markers)\n *   - if there are sync or async results, they are rendered.\n * - at 900ms, if the async computation hasn't finished, a \"Loading...\" result is added.\n */\nexport class HoverOperation<TArgs, TResult> extends Disposable {\n\n\tprivate readonly _onResult = this._register(new Emitter<HoverResult<TArgs, TResult>>());\n\tpublic readonly onResult = this._onResult.event;\n\n\tprivate readonly _asyncComputationScheduler = this._register(new Debouncer((options: TArgs) => this._triggerAsyncComputation(options), 0));\n\tprivate readonly _syncComputationScheduler = this._register(new Debouncer((options: TArgs) => this._triggerSyncComputation(options), 0));\n\tprivate readonly _loadingMessageScheduler = this._register(new Debouncer((options: TArgs) => this._triggerLoadingMessage(options), 0));\n\n\tprivate _state = HoverOperationState.Idle;\n\tprivate _asyncIterable: CancelableAsyncIterableObject<TResult> | null = null;\n\tprivate _asyncIterableDone: boolean = false;\n\tprivate _result: TResult[] = [];\n\tprivate _options: TArgs | undefined;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _computer: IHoverComputer<TArgs, TResult>\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tif (this._asyncIterable) {\n\t\t\tthis._asyncIterable.cancel();\n\t\t\tthis._asyncIterable = null;\n\t\t}\n\t\tthis._options = undefined;\n\t\tsuper.dispose();\n\t}\n\n\tprivate get _hoverTime(): number {\n\t\treturn this._editor.getOption(EditorOption.hover).delay;\n\t}\n\n\tprivate get _firstWaitTime(): number {\n\t\treturn this._hoverTime / 2;\n\t}\n\n\tprivate get _secondWaitTime(): number {\n\t\treturn this._hoverTime - this._firstWaitTime;\n\t}\n\n\tprivate get _loadingMessageTime(): number {\n\t\treturn 3 * this._hoverTime;\n\t}\n\n\tprivate _setState(state: HoverOperationState, options: TArgs): void {\n\t\tthis._state = state;\n\t\tthis._fireResult(options);\n\t}\n\n\tprivate _triggerAsyncComputation(options: TArgs): void {\n\t\tthis._setState(HoverOperationState.SecondWait, options);\n\t\tthis._syncComputationScheduler.schedule(options, this._secondWaitTime);\n\n\t\tif (this._computer.computeAsync) {\n\t\t\tthis._asyncIterableDone = false;\n\t\t\tthis._asyncIterable = createCancelableAsyncIterable(token => this._computer.computeAsync!(options, token));\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tfor await (const item of this._asyncIterable!) {\n\t\t\t\t\t\tif (item) {\n\t\t\t\t\t\t\tthis._result.push(item);\n\t\t\t\t\t\t\tthis._fireResult(options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._asyncIterableDone = true;\n\n\t\t\t\t\tif (this._state === HoverOperationState.WaitingForAsync || this._state === HoverOperationState.WaitingForAsyncShowingLoading) {\n\t\t\t\t\t\tthis._setState(HoverOperationState.Idle, options);\n\t\t\t\t\t}\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonUnexpectedError(e);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t} else {\n\t\t\tthis._asyncIterableDone = true;\n\t\t}\n\t}\n\n\tprivate _triggerSyncComputation(options: TArgs): void {\n\t\tif (this._computer.computeSync) {\n\t\t\tthis._result = this._result.concat(this._computer.computeSync(options));\n\t\t}\n\t\tthis._setState(this._asyncIterableDone ? HoverOperationState.Idle : HoverOperationState.WaitingForAsync, options);\n\t}\n\n\tprivate _triggerLoadingMessage(options: TArgs): void {\n\t\tif (this._state === HoverOperationState.WaitingForAsync) {\n\t\t\tthis._setState(HoverOperationState.WaitingForAsyncShowingLoading, options);\n\t\t}\n\t}\n\n\tprivate _fireResult(options: TArgs): void {\n\t\tif (this._state === HoverOperationState.FirstWait || this._state === HoverOperationState.SecondWait) {\n\t\t\t// Do not send out results before the hover time\n\t\t\treturn;\n\t\t}\n\t\tconst isComplete = (this._state === HoverOperationState.Idle);\n\t\tconst hasLoadingMessage = (this._state === HoverOperationState.WaitingForAsyncShowingLoading);\n\t\tthis._onResult.fire(new HoverResult(this._result.slice(0), isComplete, hasLoadingMessage, options));\n\t}\n\n\tpublic start(mode: HoverStartMode, options: TArgs): void {\n\t\tif (mode === HoverStartMode.Delayed) {\n\t\t\tif (this._state === HoverOperationState.Idle) {\n\t\t\t\tthis._setState(HoverOperationState.FirstWait, options);\n\t\t\t\tthis._asyncComputationScheduler.schedule(options, this._firstWaitTime);\n\t\t\t\tthis._loadingMessageScheduler.schedule(options, this._loadingMessageTime);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (this._state) {\n\t\t\t\tcase HoverOperationState.Idle:\n\t\t\t\t\tthis._triggerAsyncComputation(options);\n\t\t\t\t\tthis._syncComputationScheduler.cancel();\n\t\t\t\t\tthis._triggerSyncComputation(options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase HoverOperationState.SecondWait:\n\t\t\t\t\tthis._syncComputationScheduler.cancel();\n\t\t\t\t\tthis._triggerSyncComputation(options);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic cancel(): void {\n\t\tthis._asyncComputationScheduler.cancel();\n\t\tthis._syncComputationScheduler.cancel();\n\t\tthis._loadingMessageScheduler.cancel();\n\t\tif (this._asyncIterable) {\n\t\t\tthis._asyncIterable.cancel();\n\t\t\tthis._asyncIterable = null;\n\t\t}\n\t\tthis._result = [];\n\t\tthis._options = undefined;\n\t\tthis._state = HoverOperationState.Idle;\n\t}\n\n\tpublic get options(): TArgs | undefined {\n\t\treturn this._options;\n\t}\n}\n\nclass Debouncer<TArgs> extends Disposable {\n\n\tprivate readonly _scheduler: RunOnceScheduler;\n\n\tprivate _options: TArgs | undefined;\n\n\tconstructor(runner: (options: TArgs) => void, debounceTimeMs: number) {\n\t\tsuper();\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => runner(this._options!), debounceTimeMs));\n\t}\n\n\tschedule(options: TArgs, debounceTimeMs: number): void {\n\t\tthis._options = options;\n\t\tthis._scheduler.schedule(debounceTimeMs);\n\t}\n\n\tcancel(): void {\n\t\tthis._scheduler.cancel();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["HoverOperationState", "HoverStartMode", "HoverStartSource"]
}
