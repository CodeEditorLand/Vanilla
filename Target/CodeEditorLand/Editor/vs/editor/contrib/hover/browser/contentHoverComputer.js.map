{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/hover/browser/contentHoverComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport { AsyncIterableObject } from \"../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n} from \"../../../browser/editorBrowser.js\";\nimport type { IModelDecoration } from \"../../../common/model.js\";\nimport type { HoverStartSource, IHoverComputer } from \"./hoverOperation.js\";\nimport {\n\ttype HoverAnchor,\n\tHoverAnchorType,\n\ttype IEditorHoverParticipant,\n\ttype IHoverPart,\n} from \"./hoverTypes.js\";\n\nexport interface ContentHoverComputerOptions {\n\tshouldFocus: boolean;\n\tanchor: HoverAnchor;\n\tsource: HoverStartSource;\n\tinsistOnKeepingHoverVisible: boolean;\n}\n\nexport class ContentHoverComputer\n\timplements IHoverComputer<ContentHoverComputerOptions, IHoverPart>\n{\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _participants: readonly IEditorHoverParticipant[],\n\t) {}\n\n\tprivate static _getLineDecorations(\n\t\teditor: IActiveCodeEditor,\n\t\tanchor: HoverAnchor,\n\t): IModelDecoration[] {\n\t\tif (\n\t\t\tanchor.type !== HoverAnchorType.Range &&\n\t\t\t!anchor.supportsMarkerHover\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst lineNumber = anchor.range.startLineNumber;\n\n\t\tif (lineNumber > model.getLineCount()) {\n\t\t\t// invalid line\n\t\t\treturn [];\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\n\t\treturn editor.getLineDecorations(lineNumber).filter((d) => {\n\t\t\tif (d.options.isWholeLine) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst startColumn =\n\t\t\t\td.range.startLineNumber === lineNumber\n\t\t\t\t\t? d.range.startColumn\n\t\t\t\t\t: 1;\n\t\t\tconst endColumn =\n\t\t\t\td.range.endLineNumber === lineNumber\n\t\t\t\t\t? d.range.endColumn\n\t\t\t\t\t: maxColumn;\n\n\t\t\tif (d.options.showIfCollapsed) {\n\t\t\t\t// Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n\t\t\t\tif (\n\t\t\t\t\tstartColumn > anchor.range.startColumn + 1 ||\n\t\t\t\t\tanchor.range.endColumn - 1 > endColumn\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tstartColumn > anchor.range.startColumn ||\n\t\t\t\tanchor.range.endColumn > endColumn\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tpublic computeAsync(\n\t\toptions: ContentHoverComputerOptions,\n\t\ttoken: CancellationToken,\n\t): AsyncIterableObject<IHoverPart> {\n\t\tconst anchor = options.anchor;\n\n\t\tif (!this._editor.hasModel() || !anchor) {\n\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t}\n\n\t\tconst lineDecorations = ContentHoverComputer._getLineDecorations(\n\t\t\tthis._editor,\n\t\t\tanchor,\n\t\t);\n\n\t\treturn AsyncIterableObject.merge(\n\t\t\tthis._participants.map((participant) => {\n\t\t\t\tif (!participant.computeAsync) {\n\t\t\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t\t\t}\n\t\t\t\treturn participant.computeAsync(anchor, lineDecorations, token);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic computeSync(options: ContentHoverComputerOptions): IHoverPart[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst anchor = options.anchor;\n\t\tconst lineDecorations = ContentHoverComputer._getLineDecorations(\n\t\t\tthis._editor,\n\t\t\tanchor,\n\t\t);\n\n\t\tlet result: IHoverPart[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tresult = result.concat(\n\t\t\t\tparticipant.computeSync(anchor, lineDecorations),\n\t\t\t);\n\t\t}\n\n\t\treturn coalesce(result);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AAQpC;AAAA,EAEC;AAAA,OAGM;AASA,MAAM,qBAEb;AAAA,EACC,YACkB,SACA,eAChB;AAFgB;AACA;AAAA,EACf;AAAA,EAlCJ,OA8BA;AAAA;AAAA;AAAA,EAMC,OAAe,oBACd,QACA,QACqB;AACrB,QACC,OAAO,SAAS,gBAAgB,SAChC,CAAC,OAAO,qBACP;AACD,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,QAAQ,OAAO,SAAS;AAC9B,UAAM,aAAa,OAAO,MAAM;AAEhC,QAAI,aAAa,MAAM,aAAa,GAAG;AAEtC,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,YAAY,MAAM,iBAAiB,UAAU;AAEnD,WAAO,OAAO,mBAAmB,UAAU,EAAE,OAAO,CAAC,MAAM;AAC1D,UAAI,EAAE,QAAQ,aAAa;AAC1B,eAAO;AAAA,MACR;AAEA,YAAM,cACL,EAAE,MAAM,oBAAoB,aACzB,EAAE,MAAM,cACR;AACJ,YAAM,YACL,EAAE,MAAM,kBAAkB,aACvB,EAAE,MAAM,YACR;AAEJ,UAAI,EAAE,QAAQ,iBAAiB;AAE9B,YACC,cAAc,OAAO,MAAM,cAAc,KACzC,OAAO,MAAM,YAAY,IAAI,WAC5B;AACD,iBAAO;AAAA,QACR;AAAA,MACD,WACC,cAAc,OAAO,MAAM,eAC3B,OAAO,MAAM,YAAY,WACxB;AACD,eAAO;AAAA,MACR;AAEA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AAAA,EAEO,aACN,SACA,OACkC;AAClC,UAAM,SAAS,QAAQ;AAEvB,QAAI,CAAC,KAAK,QAAQ,SAAS,KAAK,CAAC,QAAQ;AACxC,aAAO,oBAAoB;AAAA,IAC5B;AAEA,UAAM,kBAAkB,qBAAqB;AAAA,MAC5C,KAAK;AAAA,MACL;AAAA,IACD;AAEA,WAAO,oBAAoB;AAAA,MAC1B,KAAK,cAAc,IAAI,CAAC,gBAAgB;AACvC,YAAI,CAAC,YAAY,cAAc;AAC9B,iBAAO,oBAAoB;AAAA,QAC5B;AACA,eAAO,YAAY,aAAa,QAAQ,iBAAiB,KAAK;AAAA,MAC/D,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEO,YAAY,SAAoD;AACtE,QAAI,CAAC,KAAK,QAAQ,SAAS,GAAG;AAC7B,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,SAAS,QAAQ;AACvB,UAAM,kBAAkB,qBAAqB;AAAA,MAC5C,KAAK;AAAA,MACL;AAAA,IACD;AAEA,QAAI,SAAuB,CAAC;AAC5B,eAAW,eAAe,KAAK,eAAe;AAC7C,eAAS,OAAO;AAAA,QACf,YAAY,YAAY,QAAQ,eAAe;AAAA,MAChD;AAAA,IACD;AAEA,WAAO,SAAS,MAAM;AAAA,EACvB;AACD;",
  "names": []
}
