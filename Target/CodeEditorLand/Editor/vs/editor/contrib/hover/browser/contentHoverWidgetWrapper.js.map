{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/hover/browser/contentHoverWidgetWrapper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { HoverOperation, HoverResult, HoverStartMode, HoverStartSource } from './hoverOperation.js';\nimport { HoverAnchor, HoverParticipantRegistry, HoverRangeAnchor, IEditorHoverContext, IEditorHoverParticipant, IHoverPart, IHoverWidget } from './hoverTypes.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { HoverVerbosityAction } from '../../../common/standalone/standaloneEnums.js';\nimport { ContentHoverWidget } from './contentHoverWidget.js';\nimport { ContentHoverComputer, ContentHoverComputerOptions } from './contentHoverComputer.js';\nimport { ContentHoverResult } from './contentHoverTypes.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { RenderedContentHover } from './contentHoverRendered.js';\nimport { isMousePositionWithinElement } from './hoverUtils.js';\n\nexport class ContentHoverWidgetWrapper extends Disposable implements IHoverWidget {\n\n\tprivate _currentResult: ContentHoverResult | null = null;\n\tprivate _renderedContentHover: RenderedContentHover | undefined;\n\n\tprivate readonly _contentHoverWidget: ContentHoverWidget;\n\tprivate readonly _participants: IEditorHoverParticipant[];\n\tprivate readonly _hoverOperation: HoverOperation<ContentHoverComputerOptions, IHoverPart>;\n\n\tprivate readonly _onContentsChanged = this._register(new Emitter<void>());\n\tpublic readonly onContentsChanged = this._onContentsChanged.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\t\tthis._contentHoverWidget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n\t\tthis._participants = this._initializeHoverParticipants();\n\t\tthis._hoverOperation = this._register(new HoverOperation(this._editor, new ContentHoverComputer(this._editor, this._participants)));\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _initializeHoverParticipants(): IEditorHoverParticipant[] {\n\t\tconst participants: IEditorHoverParticipant[] = [];\n\t\tfor (const participant of HoverParticipantRegistry.getAll()) {\n\t\t\tconst participantInstance = this._instantiationService.createInstance(participant, this._editor);\n\t\t\tparticipants.push(participantInstance);\n\t\t}\n\t\tparticipants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n\t\tthis._register(this._contentHoverWidget.onDidResize(() => {\n\t\t\tthis._participants.forEach(participant => participant.handleResize?.());\n\t\t}));\n\t\treturn participants;\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._register(this._hoverOperation.onResult((result) => {\n\t\t\tconst messages = (result.hasLoadingMessage ? this._addLoadingMessage(result) : result.value);\n\t\t\tthis._withResult(new ContentHoverResult(messages, result.isComplete, result.options));\n\t\t}));\n\t\tconst contentHoverWidgetNode = this._contentHoverWidget.getDomNode();\n\t\tthis._register(dom.addStandardDisposableListener(contentHoverWidgetNode, 'keydown', (e) => {\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addStandardDisposableListener(contentHoverWidgetNode, 'mouseleave', (e) => {\n\t\t\tthis._onMouseLeave(e);\n\t\t}));\n\t\tthis._register(TokenizationRegistry.onDidChange(() => {\n\t\t\tif (this._contentHoverWidget.position && this._currentResult) {\n\t\t\t\tthis._setCurrentResult(this._currentResult); // render again\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tprivate _startShowingOrUpdateHover(\n\t\tanchor: HoverAnchor | null,\n\t\tmode: HoverStartMode,\n\t\tsource: HoverStartSource,\n\t\tfocus: boolean,\n\t\tmouseEvent: IEditorMouseEvent | null\n\t): boolean {\n\t\tconst contentHoverIsVisible = this._contentHoverWidget.position && this._currentResult;\n\t\tif (!contentHoverIsVisible) {\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tconst isHoverSticky = this._editor.getOption(EditorOption.hover).sticky;\n\t\tconst isMouseGettingCloser = mouseEvent && this._contentHoverWidget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy);\n\t\tconst isHoverStickyAndIsMouseGettingCloser = isHoverSticky && isMouseGettingCloser;\n\t\t// The mouse is getting closer to the hover, so we will keep the hover untouched\n\t\t// But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n\t\tif (isHoverStickyAndIsMouseGettingCloser) {\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t// If mouse is not getting closer and anchor not defined, hide the hover\n\t\tif (!anchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\treturn false;\n\t\t}\n\t\t// If mouse if not getting closer and anchor is defined, and the new anchor is the same as the previous anchor\n\t\tconst currentAnchorEqualsPreviousAnchor = this._currentResult && this._currentResult.options.anchor.equals(anchor);\n\t\tif (currentAnchorEqualsPreviousAnchor) {\n\t\t\treturn true;\n\t\t}\n\t\t// If mouse if not getting closer and anchor is defined, and the new anchor is not compatible with the previous anchor\n\t\tconst currentAnchorCompatibleWithPreviousAnchor = this._currentResult && anchor.canAdoptVisibleHover(this._currentResult.options.anchor, this._contentHoverWidget.position);\n\t\tif (!currentAnchorCompatibleWithPreviousAnchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\treturn true;\n\t\t}\n\t\t// We aren't getting any closer to the hover, so we will filter existing results\n\t\t// and keep those which also apply to the new anchor.\n\t\tif (this._currentResult) {\n\t\t\tthis._setCurrentResult(this._currentResult.filter(anchor));\n\t\t}\n\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\treturn true;\n\t}\n\n\tprivate _startHoverOperationIfNecessary(anchor: HoverAnchor, mode: HoverStartMode, source: HoverStartSource, shouldFocus: boolean, insistOnKeepingHoverVisible: boolean): void {\n\t\tconst currentAnchorEqualToPreviousHover = this._hoverOperation.options && this._hoverOperation.options.anchor.equals(anchor);\n\t\tif (currentAnchorEqualToPreviousHover) {\n\t\t\treturn;\n\t\t}\n\t\tthis._hoverOperation.cancel();\n\t\tconst contentHoverComputerOptions: ContentHoverComputerOptions = {\n\t\t\tanchor,\n\t\t\tsource,\n\t\t\tshouldFocus,\n\t\t\tinsistOnKeepingHoverVisible\n\t\t};\n\t\tthis._hoverOperation.start(mode, contentHoverComputerOptions);\n\t}\n\n\tprivate _setCurrentResult(hoverResult: ContentHoverResult | null): void {\n\t\tlet currentHoverResult = hoverResult;\n\t\tconst currentResultEqualToPreviousResult = this._currentResult === currentHoverResult;\n\t\tif (currentResultEqualToPreviousResult) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentHoverResultIsEmpty = currentHoverResult && currentHoverResult.hoverParts.length === 0;\n\t\tif (currentHoverResultIsEmpty) {\n\t\t\tcurrentHoverResult = null;\n\t\t}\n\t\tthis._currentResult = currentHoverResult;\n\t\tif (this._currentResult) {\n\t\t\tthis._showHover(this._currentResult);\n\t\t} else {\n\t\t\tthis._hideHover();\n\t\t}\n\t}\n\n\tprivate _addLoadingMessage(hoverResult: HoverResult<ContentHoverComputerOptions, IHoverPart>): IHoverPart[] {\n\t\tfor (const participant of this._participants) {\n\t\t\tif (!participant.createLoadingMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst loadingMessage = participant.createLoadingMessage(hoverResult.options.anchor);\n\t\t\tif (!loadingMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn hoverResult.value.slice(0).concat([loadingMessage]);\n\t\t}\n\t\treturn hoverResult.value;\n\t}\n\n\tprivate _withResult(hoverResult: ContentHoverResult): void {\n\t\tconst previousHoverIsVisibleWithCompleteResult = this._contentHoverWidget.position && this._currentResult && this._currentResult.isComplete;\n\t\tif (!previousHoverIsVisibleWithCompleteResult) {\n\t\t\tthis._setCurrentResult(hoverResult);\n\t\t}\n\t\t// The hover is visible with a previous complete result.\n\t\tconst isCurrentHoverResultComplete = hoverResult.isComplete;\n\t\tif (!isCurrentHoverResultComplete) {\n\t\t\t// Instead of rendering the new partial result, we wait for the result to be complete.\n\t\t\treturn;\n\t\t}\n\t\tconst currentHoverResultIsEmpty = hoverResult.hoverParts.length === 0;\n\t\tconst insistOnKeepingPreviousHoverVisible = hoverResult.options.insistOnKeepingHoverVisible;\n\t\tconst shouldKeepPreviousHoverVisible = currentHoverResultIsEmpty && insistOnKeepingPreviousHoverVisible;\n\t\tif (shouldKeepPreviousHoverVisible) {\n\t\t\t// The hover would now hide normally, so we'll keep the previous messages\n\t\t\treturn;\n\t\t}\n\t\tthis._setCurrentResult(hoverResult);\n\t}\n\n\tprivate _showHover(hoverResult: ContentHoverResult): void {\n\t\tconst context = this._getHoverContext();\n\t\tthis._renderedContentHover = new RenderedContentHover(this._editor, hoverResult, this._participants, context, this._keybindingService);\n\t\tif (this._renderedContentHover.domNodeHasChildren) {\n\t\t\tthis._contentHoverWidget.show(this._renderedContentHover);\n\t\t} else {\n\t\t\tthis._renderedContentHover.dispose();\n\t\t}\n\t}\n\n\tprivate _hideHover(): void {\n\t\tthis._contentHoverWidget.hide();\n\t}\n\n\tprivate _getHoverContext(): IEditorHoverContext {\n\t\tconst hide = () => {\n\t\t\tthis.hide();\n\t\t};\n\t\tconst onContentsChanged = () => {\n\t\t\tthis._onContentsChanged.fire();\n\t\t\tthis._contentHoverWidget.onContentsChanged();\n\t\t};\n\t\tconst setMinimumDimensions = (dimensions: dom.Dimension) => {\n\t\t\tthis._contentHoverWidget.setMinimumDimensions(dimensions);\n\t\t};\n\t\treturn { hide, onContentsChanged, setMinimumDimensions };\n\t}\n\n\n\tpublic showsOrWillShow(mouseEvent: IEditorMouseEvent): boolean {\n\t\tconst isContentWidgetResizing = this._contentHoverWidget.isResizing;\n\t\tif (isContentWidgetResizing) {\n\t\t\treturn true;\n\t\t}\n\t\tconst anchorCandidates: HoverAnchor[] = this._findHoverAnchorCandidates(mouseEvent);\n\t\tconst anchorCandidatesExist = anchorCandidates.length > 0;\n\t\tif (!anchorCandidatesExist) {\n\t\t\treturn this._startShowingOrUpdateHover(null, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t\t}\n\t\tconst anchor = anchorCandidates[0];\n\t\treturn this._startShowingOrUpdateHover(anchor, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t}\n\n\tprivate _findHoverAnchorCandidates(mouseEvent: IEditorMouseEvent): HoverAnchor[] {\n\t\tconst anchorCandidates: HoverAnchor[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tif (!participant.suggestHoverAnchor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst anchor = participant.suggestHoverAnchor(mouseEvent);\n\t\t\tif (!anchor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tanchorCandidates.push(anchor);\n\t\t}\n\t\tconst target = mouseEvent.target;\n\t\tswitch (target.type) {\n\t\t\tcase MouseTargetType.CONTENT_TEXT: {\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MouseTargetType.CONTENT_EMPTY: {\n\t\t\t\tconst epsilon = this._editor.getOption(EditorOption.fontInfo).typicalHalfwidthCharacterWidth / 2;\n\t\t\t\t// Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n\t\t\t\tconst mouseIsWithinLinesAndCloseToHover = !target.detail.isAfterLines\n\t\t\t\t\t&& typeof target.detail.horizontalDistanceToText === 'number'\n\t\t\t\t\t&& target.detail.horizontalDistanceToText < epsilon;\n\t\t\t\tif (!mouseIsWithinLinesAndCloseToHover) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tanchorCandidates.sort((a, b) => b.priority - a.priority);\n\t\treturn anchorCandidates;\n\t}\n\n\tprivate _onMouseLeave(e: MouseEvent): void {\n\t\tconst editorDomNode = this._editor.getDomNode();\n\t\tconst isMousePositionOutsideOfEditor = !editorDomNode || !isMousePositionWithinElement(editorDomNode, e.x, e.y);\n\t\tif (isMousePositionOutsideOfEditor) {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\tpublic startShowingAtRange(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean): void {\n\t\tthis._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n\t}\n\n\tpublic getWidgetContent(): string | undefined {\n\t\tconst node = this._contentHoverWidget.getDomNode();\n\t\tif (!node.textContent) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn node.textContent;\n\t}\n\n\tpublic async updateHoverVerbosityLevel(action: HoverVerbosityAction, index: number, focus?: boolean): Promise<void> {\n\t\tthis._renderedContentHover?.updateHoverVerbosityLevel(action, index, focus);\n\t}\n\n\tpublic doesHoverAtIndexSupportVerbosityAction(index: number, action: HoverVerbosityAction): boolean {\n\t\treturn this._renderedContentHover?.doesHoverAtIndexSupportVerbosityAction(index, action) ?? false;\n\t}\n\n\tpublic getAccessibleWidgetContent(): string | undefined {\n\t\treturn this._renderedContentHover?.getAccessibleWidgetContent();\n\t}\n\n\tpublic getAccessibleWidgetContentAtIndex(index: number): string | undefined {\n\t\treturn this._renderedContentHover?.getAccessibleWidgetContentAtIndex(index);\n\t}\n\n\tpublic focusedHoverPartIndex(): number {\n\t\treturn this._renderedContentHover?.focusedHoverPartIndex ?? -1;\n\t}\n\n\tpublic containsNode(node: Node | null | undefined): boolean {\n\t\treturn (node ? this._contentHoverWidget.getDomNode().contains(node) : false);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._contentHoverWidget.focus();\n\t}\n\n\tpublic focusHoverPartWithIndex(index: number): void {\n\t\tthis._renderedContentHover?.focusHoverPartWithIndex(index);\n\t}\n\n\tpublic scrollUp(): void {\n\t\tthis._contentHoverWidget.scrollUp();\n\t}\n\n\tpublic scrollDown(): void {\n\t\tthis._contentHoverWidget.scrollDown();\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tthis._contentHoverWidget.scrollLeft();\n\t}\n\n\tpublic scrollRight(): void {\n\t\tthis._contentHoverWidget.scrollRight();\n\t}\n\n\tpublic pageUp(): void {\n\t\tthis._contentHoverWidget.pageUp();\n\t}\n\n\tpublic pageDown(): void {\n\t\tthis._contentHoverWidget.pageDown();\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._contentHoverWidget.goToTop();\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._contentHoverWidget.goToBottom();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._hoverOperation.cancel();\n\t\tthis._setCurrentResult(null);\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._contentHoverWidget.getDomNode();\n\t}\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn this._renderedContentHover?.isColorPickerVisible() ?? false;\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn this._contentHoverWidget.isVisibleFromKeyboard;\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._contentHoverWidget.isVisible;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._contentHoverWidget.isFocused;\n\t}\n\n\tpublic get isResizing(): boolean {\n\t\treturn this._contentHoverWidget.isResizing;\n\t}\n\n\tpublic get widget() {\n\t\treturn this._contentHoverWidget;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
