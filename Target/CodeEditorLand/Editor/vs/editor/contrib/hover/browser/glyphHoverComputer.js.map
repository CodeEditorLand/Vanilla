{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/hover/browser/glyphHoverComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from '../../../../base/common/arrays.js';\nimport { IMarkdownString, isEmptyMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { IHoverComputer } from './hoverOperation.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n\nexport type LaneOrLineNumber = GlyphMarginLane | 'lineNo';\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nexport interface GlyphHoverComputerOptions {\n\tlineNumber: number;\n\tlaneOrLine: LaneOrLineNumber;\n}\n\nexport class GlyphHoverComputer implements IHoverComputer<GlyphHoverComputerOptions, IHoverMessage> {\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor\n\t) {\n\t}\n\n\tpublic computeSync(opts: GlyphHoverComputerOptions): IHoverMessage[] {\n\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(opts.lineNumber);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tconst isLineHover = opts.laneOrLine === 'lineNo';\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tconst lane = d.options.glyphMargin?.position ?? GlyphMarginLane.Center;\n\t\t\tif (!isLineHover && lane !== opts.laneOrLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = isLineHover ? d.options.lineNumberHoverMessage : d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,iBAAiB,6BAA6B;AACvD,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAazB,MAAM,mBAAuF;AAAA,EAEnG,YACkB,SAChB;AADgB;AAAA,EAElB;AAAA,EA3BD,OAsBoG;AAAA;AAAA;AAAA,EAO5F,YAAY,MAAkD;AAEpE,UAAM,iBAAiB,wBAAC,aAA6C;AACpE,aAAO;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD,GAJuB;AAMvB,UAAM,kBAAkB,KAAK,QAAQ,mBAAmB,KAAK,UAAU;AAEvE,UAAM,SAA0B,CAAC;AACjC,UAAM,cAAc,KAAK,eAAe;AACxC,QAAI,CAAC,iBAAiB;AACrB,aAAO;AAAA,IACR;AAEA,eAAW,KAAK,iBAAiB;AAChC,YAAM,OAAO,EAAE,QAAQ,aAAa,YAAY,gBAAgB;AAChE,UAAI,CAAC,eAAe,SAAS,KAAK,YAAY;AAC7C;AAAA,MACD;AAEA,YAAM,eAAe,cAAc,EAAE,QAAQ,yBAAyB,EAAE,QAAQ;AAChF,UAAI,CAAC,gBAAgB,sBAAsB,YAAY,GAAG;AACzD;AAAA,MACD;AAEA,aAAO,KAAK,GAAG,QAAQ,YAAY,EAAE,IAAI,cAAc,CAAC;AAAA,IACzD;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
