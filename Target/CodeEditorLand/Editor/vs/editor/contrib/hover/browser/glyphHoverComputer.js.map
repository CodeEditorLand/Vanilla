{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/hover/browser/glyphHoverComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from \"../../../../base/common/arrays.js\";\nimport {\n\ttype IMarkdownString,\n\tisEmptyMarkdownString,\n} from \"../../../../base/common/htmlContent.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport { GlyphMarginLane } from \"../../../common/model.js\";\nimport type { IHoverComputer } from \"./hoverOperation.js\";\n\nexport type LaneOrLineNumber = GlyphMarginLane | \"lineNo\";\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nexport interface GlyphHoverComputerOptions {\n\tlineNumber: number;\n\tlaneOrLine: LaneOrLineNumber;\n}\n\nexport class GlyphHoverComputer\n\timplements IHoverComputer<GlyphHoverComputerOptions, IHoverMessage>\n{\n\tconstructor(private readonly _editor: ICodeEditor) {}\n\n\tpublic computeSync(opts: GlyphHoverComputerOptions): IHoverMessage[] {\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents,\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(\n\t\t\topts.lineNumber,\n\t\t);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tconst isLineHover = opts.laneOrLine === \"lineNo\";\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tconst lane =\n\t\t\t\td.options.glyphMargin?.position ?? GlyphMarginLane.Center;\n\t\t\tif (!isLineHover && lane !== opts.laneOrLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = isLineHover\n\t\t\t\t? d.options.lineNumberHoverMessage\n\t\t\t\t: d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB;AAAA,EAEC;AAAA,OACM;AAEP,SAAS,uBAAuB;AAczB,MAAM,mBAEb;AAAA,EACC,YAA6B,SAAsB;AAAtB;AAAA,EAAuB;AAAA,EA5BrD,OA2BA;AAAA;AAAA;AAAA,EAGQ,YAAY,MAAkD;AACpE,UAAM,iBAAiB,wBAAC,aAA6C;AACpE,aAAO;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD,GAJuB;AAMvB,UAAM,kBAAkB,KAAK,QAAQ;AAAA,MACpC,KAAK;AAAA,IACN;AAEA,UAAM,SAA0B,CAAC;AACjC,UAAM,cAAc,KAAK,eAAe;AACxC,QAAI,CAAC,iBAAiB;AACrB,aAAO;AAAA,IACR;AAEA,eAAW,KAAK,iBAAiB;AAChC,YAAM,OACL,EAAE,QAAQ,aAAa,YAAY,gBAAgB;AACpD,UAAI,CAAC,eAAe,SAAS,KAAK,YAAY;AAC7C;AAAA,MACD;AAEA,YAAM,eAAe,cAClB,EAAE,QAAQ,yBACV,EAAE,QAAQ;AACb,UAAI,CAAC,gBAAgB,sBAAsB,YAAY,GAAG;AACzD;AAAA,MACD;AAEA,aAAO,KAAK,GAAG,QAAQ,YAAY,EAAE,IAAI,cAAc,CAAC;AAAA,IACzD;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
