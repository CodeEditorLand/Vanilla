import { Disposable } from "vs/base/common/lifecycle";
import { ICodeEditor } from "vs/editor/browser/editorBrowser";
import { IEditorContribution } from "vs/editor/common/editorCommon";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import "vs/css!./hover";
export declare class MarginHoverController extends Disposable implements IEditorContribution {
    private readonly _editor;
    private readonly _instantiationService;
    static readonly ID = "editor.contrib.marginHover";
    shouldKeepOpenOnEditorMouseMoveOrLeave: boolean;
    private readonly _listenersStore;
    private _glyphWidget;
    private _mouseMoveEvent;
    private _reactToEditorMouseMoveRunner;
    private _hoverSettings;
    private _hoverState;
    constructor(_editor: ICodeEditor, _instantiationService: IInstantiationService);
    static get(editor: ICodeEditor): MarginHoverController | null;
    private _hookListeners;
    private _unhookListeners;
    private _cancelScheduler;
    private _onEditorScrollChanged;
    private _onEditorMouseDown;
    private _isMouseOnMarginHoverWidget;
    private _onEditorMouseUp;
    private _onEditorMouseLeave;
    private _shouldNotRecomputeCurrentHoverWidget;
    private _onEditorMouseMove;
    private _reactToEditorMouseMove;
    private _tryShowHoverWidget;
    private _onKeyDown;
    private _hideWidgets;
    private _getOrCreateGlyphWidget;
    hideContentHover(): void;
    dispose(): void;
}
