{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/hover/browser/hoverTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Dimension } from \"../../../../base/browser/dom.js\";\nimport type { AsyncIterableObject } from \"../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type {\n\tBrandedService,\n\tIConstructorSignature,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tICodeEditor,\n\tIEditorMouseEvent,\n} from \"../../../browser/editorBrowser.js\";\nimport type { Position } from \"../../../common/core/position.js\";\nimport type { Range } from \"../../../common/core/range.js\";\nimport type { IModelDecoration } from \"../../../common/model.js\";\n\nexport interface IHoverPart {\n\t/**\n\t * The creator of this hover part.\n\t */\n\treadonly owner: IEditorHoverParticipant;\n\t/**\n\t * The range where this hover part applies.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Force the hover to always be rendered at this specific range,\n\t * even in the case of multiple hover parts.\n\t */\n\treadonly forceShowAtRange?: boolean;\n\n\t/**\n\t * If true, the hover item should appear before content\n\t */\n\treadonly isBeforeContent?: boolean;\n\t/**\n\t * Is this hover part still valid for this new anchor?\n\t */\n\tisValidForHoverAnchor(anchor: HoverAnchor): boolean;\n}\n\nexport enum HoverAnchorType {\n\tRange = 1,\n\tForeignElement = 2,\n}\n\nexport class HoverRangeAnchor {\n\tpublic readonly type = HoverAnchorType.Range;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t) {}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (\n\t\t\tother.type === HoverAnchorType.Range &&\n\t\t\tthis.range.equalsRange(other.range)\n\t\t);\n\t}\n\tpublic canAdoptVisibleHover(\n\t\tlastAnchor: HoverAnchor,\n\t\tshowAtPosition: Position,\n\t): boolean {\n\t\treturn (\n\t\t\tlastAnchor.type === HoverAnchorType.Range &&\n\t\t\tshowAtPosition.lineNumber === this.range.startLineNumber\n\t\t);\n\t}\n}\n\nexport class HoverForeignElementAnchor {\n\tpublic readonly type = HoverAnchorType.ForeignElement;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly owner: IEditorHoverParticipant,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t\tpublic readonly supportsMarkerHover: boolean | undefined,\n\t) {}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (\n\t\t\tother.type === HoverAnchorType.ForeignElement &&\n\t\t\tthis.owner === other.owner\n\t\t);\n\t}\n\tpublic canAdoptVisibleHover(\n\t\tlastAnchor: HoverAnchor,\n\t\tshowAtPosition: Position,\n\t): boolean {\n\t\treturn (\n\t\t\tlastAnchor.type === HoverAnchorType.ForeignElement &&\n\t\t\tthis.owner === lastAnchor.owner\n\t\t);\n\t}\n}\n\nexport type HoverAnchor = HoverRangeAnchor | HoverForeignElementAnchor;\n\nexport interface IEditorHoverStatusBar {\n\taddAction(actionOptions: {\n\t\tlabel: string;\n\t\ticonClass?: string;\n\t\trun: (target: HTMLElement) => void;\n\t\tcommandId: string;\n\t}): IEditorHoverAction;\n\tappend(element: HTMLElement): HTMLElement;\n}\n\nexport interface IEditorHoverAction {\n\tsetEnabled(enabled: boolean): void;\n}\n\nexport interface IEditorHoverColorPickerWidget {\n\tlayout(): void;\n}\n\nexport interface IEditorHoverContext {\n\t/**\n\t * The contents rendered inside the fragment have been changed, which means that the hover should relayout.\n\t */\n\tonContentsChanged(): void;\n\t/**\n\t * Set the minimum dimensions of the resizable hover\n\t */\n\tsetMinimumDimensions?(dimensions: Dimension): void;\n\t/**\n\t * Hide the hover.\n\t */\n\thide(): void;\n}\n\nexport interface IEditorHoverRenderContext extends IEditorHoverContext {\n\t/**\n\t * The fragment where dom elements should be attached.\n\t */\n\treadonly fragment: DocumentFragment;\n\t/**\n\t * The status bar for actions for this hover.\n\t */\n\treadonly statusBar: IEditorHoverStatusBar;\n}\n\nexport interface IRenderedHoverPart<T extends IHoverPart> extends IDisposable {\n\t/**\n\t * The rendered hover part.\n\t */\n\thoverPart: T;\n\t/**\n\t * The HTML element containing the hover part.\n\t */\n\thoverElement: HTMLElement;\n}\n\nexport interface IRenderedHoverParts<T extends IHoverPart> extends IDisposable {\n\t/**\n\t * Array of rendered hover parts.\n\t */\n\trenderedHoverParts: IRenderedHoverPart<T>[];\n}\n\n/**\n * Default implementation of IRenderedHoverParts.\n */\nexport class RenderedHoverParts<T extends IHoverPart>\n\timplements IRenderedHoverParts<T>\n{\n\tconstructor(public readonly renderedHoverParts: IRenderedHoverPart<T>[]) {}\n\n\tdispose() {\n\t\tfor (const part of this.renderedHoverParts) {\n\t\t\tpart.dispose();\n\t\t}\n\t}\n}\n\nexport interface IEditorHoverParticipant<T extends IHoverPart = IHoverPart> {\n\treadonly hoverOrdinal: number;\n\tsuggestHoverAnchor?(mouseEvent: IEditorMouseEvent): HoverAnchor | null;\n\tcomputeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[]): T[];\n\tcomputeAsync?(\n\t\tanchor: HoverAnchor,\n\t\tlineDecorations: IModelDecoration[],\n\t\ttoken: CancellationToken,\n\t): AsyncIterableObject<T>;\n\tcreateLoadingMessage?(anchor: HoverAnchor): T | null;\n\trenderHoverParts(\n\t\tcontext: IEditorHoverRenderContext,\n\t\thoverParts: T[],\n\t): IRenderedHoverParts<T>;\n\tgetAccessibleContent(hoverPart: T): string;\n\thandleResize?(): void;\n}\n\nexport type IEditorHoverParticipantCtor = IConstructorSignature<\n\tIEditorHoverParticipant,\n\t[ICodeEditor]\n>;\n\nexport const HoverParticipantRegistry = new (class HoverParticipantRegistry {\n\t_participants: IEditorHoverParticipantCtor[] = [];\n\n\tpublic register<Services extends BrandedService[]>(ctor: {\n\t\tnew (\n\t\t\teditor: ICodeEditor,\n\t\t\t...services: Services\n\t\t): IEditorHoverParticipant;\n\t}): void {\n\t\tthis._participants.push(ctor as IEditorHoverParticipantCtor);\n\t}\n\n\tpublic getAll(): IEditorHoverParticipantCtor[] {\n\t\treturn this._participants;\n\t}\n})();\n\nexport interface IHoverWidget {\n\t/**\n\t * Returns whether the hover widget is shown or should show in the future.\n\t * If the widget should show, this triggers the display.\n\t * @param mouseEvent editor mouse event\n\t */\n\tshowsOrWillShow(mouseEvent: IEditorMouseEvent): boolean;\n\n\t/**\n\t * Hides the hover.\n\t */\n\thide(): void;\n}\n"],
  "mappings": ";;AA8CO,IAAK,kBAAL,kBAAKA,qBAAL;AACN,EAAAA,kCAAA,WAAQ,KAAR;AACA,EAAAA,kCAAA,oBAAiB,KAAjB;AAFW,SAAAA;AAAA,GAAA;AAKL,MAAM,iBAAiB;AAAA,EAE7B,YACiB,UACA,OACA,kBACA,kBACf;AAJe;AACA;AACA;AACA;AAAA,EACd;AAAA,EA1DJ,OAmD8B;AAAA;AAAA;AAAA,EACb,OAAO;AAAA,EAOhB,OAAO,OAAoB;AACjC,WACC,MAAM,SAAS,iBACf,KAAK,MAAM,YAAY,MAAM,KAAK;AAAA,EAEpC;AAAA,EACO,qBACN,YACA,gBACU;AACV,WACC,WAAW,SAAS,iBACpB,eAAe,eAAe,KAAK,MAAM;AAAA,EAE3C;AACD;AAEO,MAAM,0BAA0B;AAAA,EAEtC,YACiB,UACA,OACA,OACA,kBACA,kBACA,qBACf;AANe;AACA;AACA;AACA;AACA;AACA;AAAA,EACd;AAAA,EArFJ,OA4EuC;AAAA;AAAA;AAAA,EACtB,OAAO;AAAA,EAShB,OAAO,OAAoB;AACjC,WACC,MAAM,SAAS,0BACf,KAAK,UAAU,MAAM;AAAA,EAEvB;AAAA,EACO,qBACN,YACA,gBACU;AACV,WACC,WAAW,SAAS,0BACpB,KAAK,UAAU,WAAW;AAAA,EAE5B;AACD;AAqEO,MAAM,mBAEb;AAAA,EACC,YAA4B,oBAA6C;AAA7C;AAAA,EAA8C;AAAA,EA7K3E,OA4KA;AAAA;AAAA;AAAA,EAGC,UAAU;AACT,eAAW,QAAQ,KAAK,oBAAoB;AAC3C,WAAK,QAAQ;AAAA,IACd;AAAA,EACD;AACD;AAyBO,MAAM,2BAA2B,IAAK,MAAMC,0BAAyB;AAAA,EA7M5E,OA6M4E;AAAA;AAAA;AAAA,EAC3E,gBAA+C,CAAC;AAAA,EAEzC,SAA4C,MAK1C;AACR,SAAK,cAAc,KAAK,IAAmC;AAAA,EAC5D;AAAA,EAEO,SAAwC;AAC9C,WAAO,KAAK;AAAA,EACb;AACD,EAAG;",
  "names": ["HoverAnchorType", "HoverParticipantRegistry"]
}
