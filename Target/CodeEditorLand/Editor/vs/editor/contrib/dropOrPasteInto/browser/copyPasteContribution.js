import{HierarchicalKind as h}from"../../../../../vs/base/common/hierarchicalKind.js";import"../../../../../vs/base/common/jsonSchema.js";import{KeyCode as a,KeyMod as y}from"../../../../../vs/base/common/keyCodes.js";import"../../../../../vs/editor/browser/editorBrowser.js";import{EditorAction as d,EditorCommand as n,EditorContributionInstantiation as C,registerEditorAction as c,registerEditorCommand as p,registerEditorContribution as A}from"../../../../../vs/editor/browser/editorExtensions.js";import{EditorContextKeys as m}from"../../../../../vs/editor/common/editorContextKeys.js";import{registerEditorFeature as E}from"../../../../../vs/editor/common/editorFeatures.js";import{changePasteTypeCommandId as b,CopyPasteController as t,pasteWidgetVisibleCtx as l}from"../../../../../vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js";import{DefaultPasteProvidersFeature as P,DefaultTextPasteOrDropEditProvider as v}from"../../../../../vs/editor/contrib/dropOrPasteInto/browser/defaultProviders.js";import*as o from"../../../../../vs/nls.js";import{KeybindingWeight as u}from"../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";A(t.ID,t,C.Eager),E(P),p(new class extends n{constructor(){super({id:b,precondition:l,kbOpts:{weight:u.EditorContrib,primary:y.CtrlCmd|a.Period}})}runEditorCommand(s,e){return t.get(e)?.changePasteType()}}),p(new class extends n{constructor(){super({id:"editor.hidePasteWidget",precondition:l,kbOpts:{weight:u.EditorContrib,primary:a.Escape}})}runEditorCommand(s,e){t.get(e)?.clearWidgets()}}),c(class f extends d{static argsSchema={type:"object",properties:{kind:{type:"string",description:o.localize("pasteAs.kind","The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.")}}};constructor(){super({id:"editor.action.pasteAs",label:o.localize("pasteAs","Paste As..."),alias:"Paste As...",precondition:m.writable,metadata:{description:"Paste as",args:[{name:"args",schema:f.argsSchema}]}})}run(e,g,r){let i=typeof r?.kind=="string"?r.kind:void 0;return!i&&r&&(i=typeof r.id=="string"?r.id:void 0),t.get(g)?.pasteAs(i?new h(i):void 0)}}),c(class extends d{constructor(){super({id:"editor.action.pasteAsText",label:o.localize("pasteAsText","Paste as Text"),alias:"Paste as Text",precondition:m.writable})}run(s,e){return t.get(e)?.pasteAs({providerId:v.id})}});
