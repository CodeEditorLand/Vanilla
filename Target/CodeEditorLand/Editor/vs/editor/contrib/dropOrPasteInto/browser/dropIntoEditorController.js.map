{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { CancelablePromise, createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { VSDataTransfer, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { toExternalVSDataTransfer } from '../../../browser/dnd.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { IPosition } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { DocumentDropEdit, DocumentDropEditProvider } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DraggedTreeItemsIdentifier } from '../../../common/services/treeViewsDnd.js';\nimport { ITreeViewsDnDService } from '../../../common/services/treeViewsDndService.js';\nimport { CodeEditorStateFlag, EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { LocalSelectionTransfer } from '../../../../platform/dnd/browser/dnd.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { sortEditsByYieldTo } from './edit.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\n\nexport const defaultProviderConfig = 'editor.experimental.dropIntoEditor.defaultProvider';\n\nexport const changeDropTypeCommandId = 'editor.changeDropType';\n\nexport const dropWidgetVisibleCtx = new RawContextKey<boolean>('dropWidgetVisible', false, localize('dropWidgetVisible', \"Whether the drop widget is showing\"));\n\nexport class DropIntoEditorController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.dropIntoEditorController';\n\n\tpublic static get(editor: ICodeEditor): DropIntoEditorController | null {\n\t\treturn editor.getContribution<DropIntoEditorController>(DropIntoEditorController.ID);\n\t}\n\n\tprivate _currentOperation?: CancelablePromise<void>;\n\n\tprivate readonly _dropProgressManager: InlineProgressManager;\n\tprivate readonly _postDropWidgetManager: PostEditWidgetManager<DocumentDropEdit>;\n\n\tprivate readonly treeItemsTransfer = LocalSelectionTransfer.getInstance<DraggedTreeItemsIdentifier>();\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ITreeViewsDnDService private readonly _treeViewsDragAndDropService: ITreeViewsDnDService\n\t) {\n\t\tsuper();\n\n\t\tthis._dropProgressManager = this._register(instantiationService.createInstance(InlineProgressManager, 'dropIntoEditor', editor));\n\t\tthis._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, { id: changeDropTypeCommandId, label: localize('postDropWidgetTitle', \"Show drop options...\") }));\n\n\t\tthis._register(editor.onDropIntoEditor(e => this.onDropIntoEditor(editor, e.position, e.event)));\n\t}\n\n\tpublic clearWidgets() {\n\t\tthis._postDropWidgetManager.clear();\n\t}\n\n\tpublic changeDropType() {\n\t\tthis._postDropWidgetManager.tryShowSelector();\n\t}\n\n\tprivate async onDropIntoEditor(editor: ICodeEditor, position: IPosition, dragEvent: DragEvent) {\n\t\tif (!dragEvent.dataTransfer || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentOperation?.cancel();\n\n\t\teditor.focus();\n\t\teditor.setPosition(position);\n\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst disposables = new DisposableStore();\n\n\t\t\tconst tokenSource = disposables.add(new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value, undefined, token));\n\t\t\ttry {\n\t\t\t\tconst ourDataTransfer = await this.extractDataTransferData(dragEvent);\n\t\t\t\tif (ourDataTransfer.size === 0 || tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst providers = this._languageFeaturesService.documentDropEditProvider\n\t\t\t\t\t.ordered(model)\n\t\t\t\t\t.filter(provider => {\n\t\t\t\t\t\tif (!provider.dropMimeTypes) {\n\t\t\t\t\t\t\t// Keep all providers that don't specify mime types\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn provider.dropMimeTypes.some(mime => ourDataTransfer.matches(mime));\n\t\t\t\t\t});\n\n\t\t\t\tconst editSession = disposables.add(await this.getDropEdits(providers, model, position, ourDataTransfer, tokenSource));\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (editSession.edits.length) {\n\t\t\t\t\tconst activeEditIndex = this.getInitialActiveEditIndex(model, editSession.edits);\n\t\t\t\t\tconst canShowWidget = editor.getOption(EditorOption.dropIntoEditor).showDropSelector === 'afterDrop';\n\t\t\t\t\t// Pass in the parent token here as it tracks cancelling the entire drop operation\n\t\t\t\t\tawait this._postDropWidgetManager.applyEditAndShowIfNeeded([Range.fromPositions(position)], { activeEditIndex, allEdits: editSession.edits }, canShowWidget, async edit => edit, token);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tif (this._currentOperation === p) {\n\t\t\t\t\tthis._currentOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._dropProgressManager.showWhile(position, localize('dropIntoEditorProgress', \"Running drop handlers. Click to cancel\"), p, { cancel: () => p.cancel() });\n\t\tthis._currentOperation = p;\n\t}\n\n\tprivate async getDropEdits(providers: readonly DocumentDropEditProvider[], model: ITextModel, position: IPosition, dataTransfer: VSDataTransfer, tokenSource: EditorStateCancellationTokenSource) {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst results = await raceCancellation(Promise.all(providers.map(async provider => {\n\t\t\ttry {\n\t\t\t\tconst edits = await provider.provideDocumentDropEdits(model, position, dataTransfer, tokenSource.token);\n\t\t\t\tif (edits) {\n\t\t\t\t\tdisposables.add(edits);\n\t\t\t\t}\n\t\t\t\treturn edits?.edits.map(edit => ({ ...edit, providerId: provider.id }));\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t})), tokenSource.token);\n\n\t\tconst edits = coalesce(results ?? []).flat();\n\t\treturn {\n\t\t\tedits: sortEditsByYieldTo(edits),\n\t\t\tdispose: () => disposables.dispose()\n\t\t};\n\t}\n\n\tprivate getInitialActiveEditIndex(model: ITextModel, edits: ReadonlyArray<DocumentDropEdit & { readonly providerId?: string }>) {\n\t\tconst preferredProviders = this._configService.getValue<Record<string, string>>(defaultProviderConfig, { resource: model.uri });\n\t\tfor (const [configMime, desiredKindStr] of Object.entries(preferredProviders)) {\n\t\t\tconst desiredKind = new HierarchicalKind(desiredKindStr);\n\t\t\tconst editIndex = edits.findIndex(edit =>\n\t\t\t\tdesiredKind.value === edit.providerId\n\t\t\t\t&& edit.handledMimeType && matchesMimeType(configMime, [edit.handledMimeType]));\n\t\t\tif (editIndex >= 0) {\n\t\t\t\treturn editIndex;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate async extractDataTransferData(dragEvent: DragEvent): Promise<VSDataTransfer> {\n\t\tif (!dragEvent.dataTransfer) {\n\t\t\treturn new VSDataTransfer();\n\t\t}\n\n\t\tconst dataTransfer = toExternalVSDataTransfer(dragEvent.dataTransfer);\n\n\t\tif (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n\t\t\tconst data = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype);\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (const id of data) {\n\t\t\t\t\tconst treeDataTransfer = await this._treeViewsDragAndDropService.removeDragOperationTransfer(id.identifier);\n\t\t\t\t\tif (treeDataTransfer) {\n\t\t\t\t\t\tfor (const [type, value] of treeDataTransfer) {\n\t\t\t\t\t\t\tdataTransfer.replace(type, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dataTransfer;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["edits"]
}
