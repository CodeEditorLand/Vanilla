{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { IJSONSchema, SchemaToType } from '../../../../base/common/jsonSchema.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, EditorCommand, EditorContributionInstantiation, ServicesAccessor, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\n\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, EditorContributionInstantiation.Eager); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: changePasteTypeCommandId,\n\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor | null, editor: ICodeEditor) {\n\t\treturn CopyPasteController.get(editor)?.changePasteType();\n\t}\n});\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.hidePasteWidget',\n\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor | null, editor: ICodeEditor) {\n\t\tCopyPasteController.get(editor)?.clearWidgets();\n\t}\n});\n\n\nregisterEditorAction(class PasteAsAction extends EditorAction {\n\tprivate static readonly argsSchema = {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tkind: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\"),\n\t\t\t}\n\t\t},\n\t} as const satisfies IJSONSchema;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.pasteAs',\n\t\t\tlabel: nls.localize('pasteAs', \"Paste As...\"),\n\t\t\talias: 'Paste As...',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Paste as',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: PasteAsAction.argsSchema\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor, args?: SchemaToType<typeof PasteAsAction.argsSchema>) {\n\t\tlet kind = typeof args?.kind === 'string' ? args.kind : undefined;\n\t\tif (!kind && args) {\n\t\t\t// Support old id property\n\t\t\t// TODO: remove this in the future\n\t\t\tkind = typeof (args as any).id === 'string' ? (args as any).id : undefined;\n\t\t}\n\t\treturn CopyPasteController.get(editor)?.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n\t}\n});\n\nregisterEditorAction(class extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.pasteAsText',\n\t\t\tlabel: nls.localize('pasteAsText', \"Paste as Text\"),\n\t\t\talias: 'Paste as Text',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\treturn CopyPasteController.get(editor)?.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n\t}\n});\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB;AACjC,SAAS,aAAa,oBAAoB;AAC1C,SAAS,SAAS,cAAc;AAChC,SAAS,mBAAmB;AAC5B,SAAS,cAAc,eAAe,iCAAiC,kBAAkB,sBAAsB,uBAAuB,kCAAkC;AACxK,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,qBAAqB,0BAA0B,6BAA6B;AACrF,SAAS,8BAA8B,0CAA0C;AACjF,YAAY,SAAS;AACrB,SAAS,wBAAwB;AAEjC,2BAA2B,oBAAoB,IAAI,qBAAqB,gCAAgC,KAAK;AAC7G,sBAAsB,4BAA4B;AAElD,sBAAsB,IAAI,cAAc,cAAc;AAAA,EACrD,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,cAAc;AAAA,MACd,QAAQ;AAAA,QACP,QAAQ,iBAAiB;AAAA,QACzB,SAAS,OAAO,UAAU,QAAQ;AAAA,MACnC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEgB,iBAAiB,WAAoC,QAAqB;AACzF,WAAO,oBAAoB,IAAI,MAAM,GAAG,gBAAgB;AAAA,EACzD;AACD,GAAC;AAED,sBAAsB,IAAI,cAAc,cAAc;AAAA,EACrD,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,cAAc;AAAA,MACd,QAAQ;AAAA,QACP,QAAQ,iBAAiB;AAAA,QACzB,SAAS,QAAQ;AAAA,MAClB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEgB,iBAAiB,WAAoC,QAAqB;AACzF,wBAAoB,IAAI,MAAM,GAAG,aAAa;AAAA,EAC/C;AACD,GAAC;AAGD,qBAAqB,MAAM,sBAAsB,aAAa;AAAA,EAvD9D,OAuD8D;AAAA;AAAA;AAAA,EAC7D,OAAwB,aAAa;AAAA,IACpC,MAAM;AAAA,IACN,YAAY;AAAA,MACX,MAAM;AAAA,QACL,MAAM;AAAA,QACN,aAAa,IAAI,SAAS,gBAAgB,uIAAuI;AAAA,MAClL;AAAA,IACD;AAAA,EACD;AAAA,EAEA,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI,SAAS,WAAW,aAAa;AAAA,MAC5C,OAAO;AAAA,MACP,cAAc,kBAAkB;AAAA,MAChC,UAAU;AAAA,QACT,aAAa;AAAA,QACb,MAAM,CAAC;AAAA,UACN,MAAM;AAAA,UACN,QAAQ,cAAc;AAAA,QACvB,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEgB,IAAI,WAA6B,QAAqB,MAAsD;AAC3H,QAAI,OAAO,OAAO,MAAM,SAAS,WAAW,KAAK,OAAO;AACxD,QAAI,CAAC,QAAQ,MAAM;AAGlB,aAAO,OAAQ,KAAa,OAAO,WAAY,KAAa,KAAK;AAAA,IAClE;AACA,WAAO,oBAAoB,IAAI,MAAM,GAAG,QAAQ,OAAO,IAAI,iBAAiB,IAAI,IAAI,MAAS;AAAA,EAC9F;AACD,CAAC;AAED,qBAAqB,cAAc,aAAa;AAAA,EAC/C,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI,SAAS,eAAe,eAAe;AAAA,MAClD,OAAO;AAAA,MACP,cAAc,kBAAkB;AAAA,IACjC,CAAC;AAAA,EACF;AAAA,EAEgB,IAAI,WAA6B,QAAqB;AACrE,WAAO,oBAAoB,IAAI,MAAM,GAAG,QAAQ,EAAE,YAAY,mCAAmC,GAAG,CAAC;AAAA,EACtG;AACD,CAAC;",
  "names": []
}
