{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { HierarchicalKind } from \"../../../../base/common/hierarchicalKind.js\";\nimport type {\n\tIJSONSchema,\n\tSchemaToType,\n} from \"../../../../base/common/jsonSchema.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\tEditorCommand,\n\tEditorContributionInstantiation,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n\tregisterEditorCommand,\n\tregisterEditorContribution,\n} from \"../../../browser/editorExtensions.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport { registerEditorFeature } from \"../../../common/editorFeatures.js\";\nimport {\n\tCopyPasteController,\n\tchangePasteTypeCommandId,\n\tpasteWidgetVisibleCtx,\n} from \"./copyPasteController.js\";\nimport {\n\tDefaultPasteProvidersFeature,\n\tDefaultTextPasteOrDropEditProvider,\n} from \"./defaultProviders.js\";\n\nregisterEditorContribution(\n\tCopyPasteController.ID,\n\tCopyPasteController,\n\tEditorContributionInstantiation.Eager,\n); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\n\nregisterEditorCommand(\n\tnew (class extends EditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: changePasteTypeCommandId,\n\t\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tpublic override runEditorCommand(\n\t\t\t_accessor: ServicesAccessor | null,\n\t\t\teditor: ICodeEditor,\n\t\t) {\n\t\t\treturn CopyPasteController.get(editor)?.changePasteType();\n\t\t}\n\t})(),\n);\n\nregisterEditorCommand(\n\tnew (class extends EditorCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"editor.hidePasteWidget\",\n\t\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tpublic override runEditorCommand(\n\t\t\t_accessor: ServicesAccessor | null,\n\t\t\teditor: ICodeEditor,\n\t\t) {\n\t\t\tCopyPasteController.get(editor)?.clearWidgets();\n\t\t}\n\t})(),\n);\n\nregisterEditorAction(\n\tclass PasteAsAction extends EditorAction {\n\t\tprivate static readonly argsSchema = {\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tkind: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"pasteAs.kind\",\n\t\t\t\t\t\t\"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t} as const satisfies IJSONSchema;\n\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"editor.action.pasteAs\",\n\t\t\t\tlabel: nls.localize(\"pasteAs\", \"Paste As...\"),\n\t\t\t\talias: \"Paste As...\",\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tmetadata: {\n\t\t\t\t\tdescription: \"Paste as\",\n\t\t\t\t\targs: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\t\tschema: PasteAsAction.argsSchema,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tpublic override run(\n\t\t\t_accessor: ServicesAccessor,\n\t\t\teditor: ICodeEditor,\n\t\t\targs?: SchemaToType<typeof PasteAsAction.argsSchema>,\n\t\t) {\n\t\t\tlet kind = typeof args?.kind === \"string\" ? args.kind : undefined;\n\t\t\tif (!kind && args) {\n\t\t\t\t// Support old id property\n\t\t\t\t// TODO: remove this in the future\n\t\t\t\tkind =\n\t\t\t\t\ttypeof (args as any).id === \"string\"\n\t\t\t\t\t\t? (args as any).id\n\t\t\t\t\t\t: undefined;\n\t\t\t}\n\t\t\treturn CopyPasteController.get(editor)?.pasteAs(\n\t\t\t\tkind ? new HierarchicalKind(kind) : undefined,\n\t\t\t);\n\t\t}\n\t},\n);\n\nregisterEditorAction(\n\tclass extends EditorAction {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"editor.action.pasteAsText\",\n\t\t\t\tlabel: nls.localize(\"pasteAsText\", \"Paste as Text\"),\n\t\t\t\talias: \"Paste as Text\",\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t});\n\t\t}\n\n\t\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\t\treturn CopyPasteController.get(editor)?.pasteAs({\n\t\t\t\tproviderId: DefaultTextPasteOrDropEditProvider.id,\n\t\t\t});\n\t\t}\n\t},\n);\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB;AAKjC,SAAS,SAAS,cAAc;AAChC,YAAY,SAAS;AACrB,SAAS,wBAAwB;AAEjC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP;AAAA,EACC,oBAAoB;AAAA,EACpB;AAAA,EACA,gCAAgC;AACjC;AACA,sBAAsB,4BAA4B;AAElD;AAAA,EACC,IAAK,cAAc,cAAc;AAAA,IAChC,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,cAAc;AAAA,QACd,QAAQ;AAAA,UACP,QAAQ,iBAAiB;AAAA,UACzB,SAAS,OAAO,UAAU,QAAQ;AAAA,QACnC;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEgB,iBACf,WACA,QACC;AACD,aAAO,oBAAoB,IAAI,MAAM,GAAG,gBAAgB;AAAA,IACzD;AAAA,EACD,EAAG;AACJ;AAEA;AAAA,EACC,IAAK,cAAc,cAAc;AAAA,IAChC,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,cAAc;AAAA,QACd,QAAQ;AAAA,UACP,QAAQ,iBAAiB;AAAA,UACzB,SAAS,QAAQ;AAAA,QAClB;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEgB,iBACf,WACA,QACC;AACD,0BAAoB,IAAI,MAAM,GAAG,aAAa;AAAA,IAC/C;AAAA,EACD,EAAG;AACJ;AAEA;AAAA,EACC,MAAM,sBAAsB,aAAa;AAAA,IAvF1C,OAuF0C;AAAA;AAAA;AAAA,IACxC,OAAwB,aAAa;AAAA,MACpC,MAAM;AAAA,MACN,YAAY;AAAA,QACX,MAAM;AAAA,UACL,MAAM;AAAA,UACN,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,IAEA,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,IAAI,SAAS,WAAW,aAAa;AAAA,QAC5C,OAAO;AAAA,QACP,cAAc,kBAAkB;AAAA,QAChC,UAAU;AAAA,UACT,aAAa;AAAA,UACb,MAAM;AAAA,YACL;AAAA,cACC,MAAM;AAAA,cACN,QAAQ,cAAc;AAAA,YACvB;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEgB,IACf,WACA,QACA,MACC;AACD,UAAI,OAAO,OAAO,MAAM,SAAS,WAAW,KAAK,OAAO;AACxD,UAAI,CAAC,QAAQ,MAAM;AAGlB,eACC,OAAQ,KAAa,OAAO,WACxB,KAAa,KACd;AAAA,MACL;AACA,aAAO,oBAAoB,IAAI,MAAM,GAAG;AAAA,QACvC,OAAO,IAAI,iBAAiB,IAAI,IAAI;AAAA,MACrC;AAAA,IACD;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc,aAAa;AAAA,IAC1B,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,IAAI,SAAS,eAAe,eAAe;AAAA,QAClD,OAAO;AAAA,QACP,cAAc,kBAAkB;AAAA,MACjC,CAAC;AAAA,IACF;AAAA,IAEgB,IAAI,WAA6B,QAAqB;AACrE,aAAO,oBAAoB,IAAI,MAAM,GAAG,QAAQ;AAAA,QAC/C,YAAY,mCAAmC;AAAA,MAChD,CAAC;AAAA,IACF;AAAA,EACD;AACD;",
  "names": []
}
