var E=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var h=(g,d,e,r)=>{for(var t=r>1?void 0:r?S(d,e):d,o=g.length-1,i;o>=0;o--)(i=g[o])&&(t=(r?i(d,e,t):i(t))||t);return r&&t&&E(d,e,t),t},f=(g,d)=>(e,r)=>d(e,r,g);import{coalesce as w}from"../../../../base/common/arrays.js";import{createCancelablePromise as P,raceCancellation as M}from"../../../../base/common/async.js";import{matchesMimeType as C,VSDataTransfer as b}from"../../../../base/common/dataTransfer.js";import{HierarchicalKind as _}from"../../../../base/common/hierarchicalKind.js";import{Disposable as x,DisposableStore as v}from"../../../../base/common/lifecycle.js";import{localize as I}from"../../../../nls.js";import{IConfigurationService as W}from"../../../../platform/configuration/common/configuration.js";import{RawContextKey as V}from"../../../../platform/contextkey/common/contextkey.js";import{LocalSelectionTransfer as O}from"../../../../platform/dnd/browser/dnd.js";import{IInstantiationService as A}from"../../../../platform/instantiation/common/instantiation.js";import{toExternalVSDataTransfer as R}from"../../../browser/dnd.js";import"../../../browser/editorBrowser.js";import{EditorOption as k}from"../../../common/config/editorOptions.js";import"../../../common/core/position.js";import{Range as F}from"../../../common/core/range.js";import"../../../common/editorCommon.js";import"../../../common/languages.js";import"../../../common/model.js";import{ILanguageFeaturesService as K}from"../../../common/services/languageFeatures.js";import{DraggedTreeItemsIdentifier as y}from"../../../common/services/treeViewsDnd.js";import{ITreeViewsDnDService as L}from"../../../common/services/treeViewsDndService.js";import{CodeEditorStateFlag as q,EditorStateCancellationTokenSource as z}from"../../editorState/browser/editorState.js";import{InlineProgressManager as j}from"../../inlineProgress/browser/inlineProgress.js";import{sortEditsByYieldTo as B}from"./edit.js";import{PostEditWidgetManager as H}from"./postEditWidget.js";const N="editor.experimental.dropIntoEditor.defaultProvider",Y="editor.changeDropType",G=new V("dropWidgetVisible",!1,I("dropWidgetVisible","Whether the drop widget is showing"));let l=class extends x{constructor(e,r,t,o,i){super();this._configService=t;this._languageFeaturesService=o;this._treeViewsDragAndDropService=i;this._dropProgressManager=this._register(r.createInstance(j,"dropIntoEditor",e)),this._postDropWidgetManager=this._register(r.createInstance(H,"dropIntoEditor",e,G,{id:Y,label:I("postDropWidgetTitle","Show drop options...")})),this._register(e.onDropIntoEditor(n=>this.onDropIntoEditor(e,n.position,n.event)))}static ID="editor.contrib.dropIntoEditorController";static get(e){return e.getContribution(l.ID)}_currentOperation;_dropProgressManager;_postDropWidgetManager;treeItemsTransfer=O.getInstance();clearWidgets(){this._postDropWidgetManager.clear()}changeDropType(){this._postDropWidgetManager.tryShowSelector()}async onDropIntoEditor(e,r,t){if(!t.dataTransfer||!e.hasModel())return;this._currentOperation?.cancel(),e.focus(),e.setPosition(r);const o=P(async i=>{const n=new v,a=n.add(new z(e,q.Value,void 0,i));try{const s=await this.extractDataTransferData(t);if(s.size===0||a.token.isCancellationRequested)return;const p=e.getModel();if(!p)return;const c=this._languageFeaturesService.documentDropEditProvider.ordered(p).filter(u=>u.dropMimeTypes?u.dropMimeTypes.some(D=>s.matches(D)):!0),m=n.add(await this.getDropEdits(c,p,r,s,a));if(a.token.isCancellationRequested)return;if(m.edits.length){const u=this.getInitialActiveEditIndex(p,m.edits),D=e.getOption(k.dropIntoEditor).showDropSelector==="afterDrop";await this._postDropWidgetManager.applyEditAndShowIfNeeded([F.fromPositions(r)],{activeEditIndex:u,allEdits:m.edits},D,async T=>T,i)}}finally{n.dispose(),this._currentOperation===o&&(this._currentOperation=void 0)}});this._dropProgressManager.showWhile(r,I("dropIntoEditorProgress","Running drop handlers. Click to cancel"),o,{cancel:()=>o.cancel()}),this._currentOperation=o}async getDropEdits(e,r,t,o,i){const n=new v,a=await M(Promise.all(e.map(async p=>{try{const c=await p.provideDocumentDropEdits(r,t,o,i.token);return c&&n.add(c),c?.edits.map(m=>({...m,providerId:p.id}))}catch(c){console.error(c)}})),i.token),s=w(a??[]).flat();return{edits:B(s),dispose:()=>n.dispose()}}getInitialActiveEditIndex(e,r){const t=this._configService.getValue(N,{resource:e.uri});for(const[o,i]of Object.entries(t)){const n=new _(i),a=r.findIndex(s=>n.value===s.providerId&&s.handledMimeType&&C(o,[s.handledMimeType]));if(a>=0)return a}return 0}async extractDataTransferData(e){if(!e.dataTransfer)return new b;const r=R(e.dataTransfer);if(this.treeItemsTransfer.hasData(y.prototype)){const t=this.treeItemsTransfer.getData(y.prototype);if(Array.isArray(t))for(const o of t){const i=await this._treeViewsDragAndDropService.removeDragOperationTransfer(o.identifier);if(i)for(const[n,a]of i)r.replace(n,a)}}return r}};l=h([f(1,A),f(2,W),f(3,K),f(4,L)],l);export{l as DropIntoEditorController,Y as changeDropTypeCommandId,N as defaultProviderConfig,G as dropWidgetVisibleCtx};
