import{ResourceTextEdit as c}from"../../../browser/services/bulkEditService.js";import{SnippetParser as m}from"../../snippet/browser/snippetParser.js";function T(n,d,t){return(typeof t.insertText=="string"?t.insertText==="":t.insertText.snippet==="")?{edits:t.additionalEdit?.edits??[]}:{edits:[...d.map(s=>new c(n,{range:s,text:typeof t.insertText=="string"?m.escape(t.insertText)+"$0":t.insertText.snippet,insertAsSnippet:!0})),...t.additionalEdit?.edits??[]]}}function u(n){function d(e,r){return"mimeType"in e?e.mimeType===r.handledMimeType:!!r.kind&&e.kind.contains(r.kind)}const t=new Map;for(const e of n)for(const r of e.yieldTo??[])for(const o of n)if(o!==e&&d(r,o)){let i=t.get(e);i||(i=[],t.set(e,i)),i.push(o)}if(!t.size)return Array.from(n);const s=new Set,p=[];function a(e){if(!e.length)return[];const r=e[0];if(p.includes(r))return e;if(s.has(r))return a(e.slice(1));let o=[];const i=t.get(r);return i&&(p.push(r),o=a(i),p.pop()),s.add(r),[...o,r,...a(e.slice(1))]}return a(Array.from(n))}export{T as createCombinedWorkspaceEdit,u as sortEditsByYieldTo};
