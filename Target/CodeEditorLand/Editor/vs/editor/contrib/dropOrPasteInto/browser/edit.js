import"../../../../base/common/uri.js";import{ResourceTextEdit as c}from"../../../browser/services/bulkEditService.js";import"../../../common/languages.js";import"../../../common/core/range.js";import{SnippetParser as f}from"../../snippet/browser/snippetParser.js";import"../../../../base/common/hierarchicalKind.js";function w(n,p,t){return(typeof t.insertText=="string"?t.insertText==="":t.insertText.snippet==="")?{edits:t.additionalEdit?.edits??[]}:{edits:[...p.map(s=>new c(n,{range:s,text:typeof t.insertText=="string"?f.escape(t.insertText)+"$0":t.insertText.snippet,insertAsSnippet:!0})),...t.additionalEdit?.edits??[]]}}function M(n){function p(e,i){return"mimeType"in e?e.mimeType===i.handledMimeType:!!i.kind&&e.kind.contains(i.kind)}const t=new Map;for(const e of n)for(const i of e.yieldTo??[])for(const o of n)if(o!==e&&p(i,o)){let r=t.get(e);r||(r=[],t.set(e,r)),r.push(o)}if(!t.size)return Array.from(n);const s=new Set,a=[];function d(e){if(!e.length)return[];const i=e[0];if(a.includes(i))return console.warn("Yield to cycle detected",i),e;if(s.has(i))return d(e.slice(1));let o=[];const r=t.get(i);return r&&(a.push(i),o=d(r),a.pop()),s.add(i),[...o,i,...d(e.slice(1))]}return d(Array.from(n))}export{w as createCombinedWorkspaceEdit,M as sortEditsByYieldTo};
