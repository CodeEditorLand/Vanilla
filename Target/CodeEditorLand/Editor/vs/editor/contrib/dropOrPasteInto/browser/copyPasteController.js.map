{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\taddDisposableListener,\n\tgetActiveDocument,\n} from \"../../../../base/browser/dom.js\";\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport {\n\ttype CancelablePromise,\n\tDeferredPromise,\n\tcreateCancelablePromise,\n\traceCancellation,\n} from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport {\n\tUriList,\n\ttype VSDataTransfer,\n\tcreateStringDataTransferItem,\n\tmatchesMimeType,\n} from \"../../../../base/common/dataTransfer.js\";\nimport {\n\tCancellationError,\n\tisCancellationError,\n} from \"../../../../base/common/errors.js\";\nimport { HierarchicalKind } from \"../../../../base/common/hierarchicalKind.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Mimes } from \"../../../../base/common/mime.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { ClipboardEventUtils } from \"../../../browser/controller/editContext/textArea/textAreaEditContextInput.js\";\nimport {\n\ttoExternalVSDataTransfer,\n\ttoVSDataTransfer,\n} from \"../../../browser/dnd.js\";\nimport type {\n\tICodeEditor,\n\tPastePayload,\n} from \"../../../browser/editorBrowser.js\";\nimport { IBulkEditService } from \"../../../browser/services/bulkEditService.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { type IRange, Range } from \"../../../common/core/range.js\";\nimport type { Selection } from \"../../../common/core/selection.js\";\nimport {\n\tHandler,\n\ttype IEditorContribution,\n} from \"../../../common/editorCommon.js\";\nimport {\n\ttype DocumentPasteContext,\n\ttype DocumentPasteEdit,\n\ttype DocumentPasteEditProvider,\n\tDocumentPasteTriggerKind,\n} from \"../../../common/languages.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { ILanguageFeaturesService } from \"../../../common/services/languageFeatures.js\";\nimport {\n\tCodeEditorStateFlag,\n\tEditorStateCancellationTokenSource,\n} from \"../../editorState/browser/editorState.js\";\nimport { InlineProgressManager } from \"../../inlineProgress/browser/inlineProgress.js\";\nimport { MessageController } from \"../../message/browser/messageController.js\";\nimport { DefaultTextPasteOrDropEditProvider } from \"./defaultProviders.js\";\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from \"./edit.js\";\nimport { PostEditWidgetManager } from \"./postEditWidget.js\";\n\nexport const changePasteTypeCommandId = \"editor.changePasteType\";\n\nexport const pasteWidgetVisibleCtx = new RawContextKey<boolean>(\n\t\"pasteWidgetVisible\",\n\tfalse,\n\tlocalize(\"pasteWidgetVisible\", \"Whether the paste widget is showing\"),\n);\n\nconst vscodeClipboardMime = \"application/vnd.code.copyMetadata\";\n\ninterface CopyMetadata {\n\treadonly id?: string;\n\treadonly providerCopyMimeTypes?: readonly string[];\n\n\treadonly defaultPastePayload: Omit<PastePayload, \"text\">;\n}\n\ntype PasteEditWithProvider = DocumentPasteEdit & {\n\tprovider: DocumentPasteEditProvider;\n};\n\ninterface DocumentPasteWithProviderEditsSession {\n\tedits: readonly PasteEditWithProvider[];\n\tdispose(): void;\n}\n\ntype PastePreference = HierarchicalKind | { providerId: string };\n\nexport class CopyPasteController\n\textends Disposable\n\timplements IEditorContribution\n{\n\tpublic static readonly ID = \"editor.contrib.copyPasteActionController\";\n\n\tpublic static get(editor: ICodeEditor): CopyPasteController | null {\n\t\treturn editor.getContribution<CopyPasteController>(\n\t\t\tCopyPasteController.ID,\n\t\t);\n\t}\n\n\t/**\n\t * Global tracking the last copy operation.\n\t *\n\t * This is shared across all editors so that you can copy and paste between groups.\n\t *\n\t * TODO: figure out how to make this work with multiple windows\n\t */\n\tprivate static _currentCopyOperation?: {\n\t\treadonly handle: string;\n\t\treadonly dataTransferPromise: CancelablePromise<VSDataTransfer>;\n\t};\n\n\tprivate readonly _editor: ICodeEditor;\n\n\tprivate _currentPasteOperation?: CancelablePromise<void>;\n\tprivate _pasteAsActionContext?: { readonly preferred?: PastePreference };\n\n\tprivate readonly _pasteProgressManager: InlineProgressManager;\n\tprivate readonly _postPasteWidgetManager: PostEditWidgetManager<PasteEditWithProvider>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IClipboardService\n\t\tprivate readonly _clipboardService: IClipboardService,\n\t\t@ILanguageFeaturesService\n\t\tprivate readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IQuickInputService\n\t\tprivate readonly _quickInputService: IQuickInputService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\n\t\tconst container = editor.getContainerDomNode();\n\t\tthis._register(\n\t\t\taddDisposableListener(container, \"copy\", (e) => this.handleCopy(e)),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(container, \"cut\", (e) => this.handleCopy(e)),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tcontainer,\n\t\t\t\t\"paste\",\n\t\t\t\t(e) => this.handlePaste(e),\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\n\t\tthis._pasteProgressManager = this._register(\n\t\t\tnew InlineProgressManager(\n\t\t\t\t\"pasteIntoEditor\",\n\t\t\t\teditor,\n\t\t\t\tinstantiationService,\n\t\t\t),\n\t\t);\n\n\t\tthis._postPasteWidgetManager = this._register(\n\t\t\tinstantiationService.createInstance(\n\t\t\t\tPostEditWidgetManager,\n\t\t\t\t\"pasteIntoEditor\",\n\t\t\t\teditor,\n\t\t\t\tpasteWidgetVisibleCtx,\n\t\t\t\t{\n\t\t\t\t\tid: changePasteTypeCommandId,\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"postPasteWidgetTitle\",\n\t\t\t\t\t\t\"Show paste options...\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic changePasteType() {\n\t\tthis._postPasteWidgetManager.tryShowSelector();\n\t}\n\n\tpublic pasteAs(preferred?: PastePreference) {\n\t\tthis._editor.focus();\n\t\ttry {\n\t\t\tthis._pasteAsActionContext = { preferred };\n\t\t\tgetActiveDocument().execCommand(\"paste\");\n\t\t} finally {\n\t\t\tthis._pasteAsActionContext = undefined;\n\t\t}\n\t}\n\n\tpublic clearWidgets() {\n\t\tthis._postPasteWidgetManager.clear();\n\t}\n\n\tprivate isPasteAsEnabled(): boolean {\n\t\treturn this._editor.getOption(EditorOption.pasteAs).enabled;\n\t}\n\n\tpublic async finishedPaste(): Promise<void> {\n\t\tawait this._currentPasteOperation;\n\t}\n\n\tprivate handleCopy(e: ClipboardEvent) {\n\t\tif (!this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Explicitly clear the clipboard internal state.\n\t\t// This is needed because on web, the browser clipboard is faked out using an in-memory store.\n\t\t// This means the resources clipboard is not properly updated when copying from the editor.\n\t\tthis._clipboardService.clearInternalState?.();\n\n\t\tif (!e.clipboardData || !this.isPasteAsEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!model || !selections?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst enableEmptySelectionClipboard = this._editor.getOption(\n\t\t\tEditorOption.emptySelectionClipboard,\n\t\t);\n\n\t\tlet ranges: readonly IRange[] = selections;\n\t\tconst wasFromEmptySelection =\n\t\t\tselections.length === 1 && selections[0].isEmpty();\n\t\tif (wasFromEmptySelection) {\n\t\t\tif (!enableEmptySelectionClipboard) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tranges = [\n\t\t\t\tnew Range(\n\t\t\t\t\tranges[0].startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tranges[0].startLineNumber,\n\t\t\t\t\t1 + model.getLineLength(ranges[0].startLineNumber),\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\n\t\tconst toCopy = this._editor\n\t\t\t._getViewModel()\n\t\t\t?.getPlainTextToCopy(\n\t\t\t\tselections,\n\t\t\t\tenableEmptySelectionClipboard,\n\t\t\t\tplatform.isWindows,\n\t\t\t);\n\t\tconst multicursorText = Array.isArray(toCopy) ? toCopy : null;\n\n\t\tconst defaultPastePayload = {\n\t\t\tmulticursorText,\n\t\t\tpasteOnNewLine: wasFromEmptySelection,\n\t\t\tmode: null,\n\t\t};\n\n\t\tconst providers =\n\t\t\tthis._languageFeaturesService.documentPasteEditProvider\n\t\t\t\t.ordered(model)\n\t\t\t\t.filter((x) => !!x.prepareDocumentPaste);\n\t\tif (!providers.length) {\n\t\t\tthis.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataTransfer = toVSDataTransfer(e.clipboardData);\n\t\tconst providerCopyMimeTypes = providers.flatMap(\n\t\t\t(x) => x.copyMimeTypes ?? [],\n\t\t);\n\n\t\t// Save off a handle pointing to data that VS Code maintains.\n\t\tconst handle = generateUuid();\n\t\tthis.setCopyMetadata(e.clipboardData, {\n\t\t\tid: handle,\n\t\t\tproviderCopyMimeTypes,\n\t\t\tdefaultPastePayload,\n\t\t});\n\n\t\tconst promise = createCancelablePromise(async (token) => {\n\t\t\tconst results = coalesce(\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tproviders.map(async (provider) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn await provider.prepareDocumentPaste!(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tranges,\n\t\t\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// Values from higher priority providers should overwrite values from lower priority ones.\n\t\t\t// Reverse the array to so that the calls to `replace` below will do this\n\t\t\tresults.reverse();\n\n\t\t\tfor (const result of results) {\n\t\t\t\tfor (const [mime, value] of result) {\n\t\t\t\t\tdataTransfer.replace(mime, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dataTransfer;\n\t\t});\n\n\t\tCopyPasteController._currentCopyOperation?.dataTransferPromise.cancel();\n\t\tCopyPasteController._currentCopyOperation = {\n\t\t\thandle: handle,\n\t\t\tdataTransferPromise: promise,\n\t\t};\n\t}\n\n\tprivate async handlePaste(e: ClipboardEvent) {\n\t\tif (!e.clipboardData || !this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessageController.get(this._editor)?.closeMessage();\n\t\tthis._currentPasteOperation?.cancel();\n\t\tthis._currentPasteOperation = undefined;\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!selections?.length || !model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis._editor.getOption(EditorOption.readOnly) || // Never enabled if editor is readonly.\n\t\t\t(!this.isPasteAsEnabled() && !this._pasteAsActionContext) // Or feature disabled (but still enable if paste was explicitly requested)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst metadata = this.fetchCopyMetadata(e);\n\t\tconst dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n\t\tdataTransfer.delete(vscodeClipboardMime);\n\n\t\tconst allPotentialMimeTypes = [\n\t\t\t...e.clipboardData.types,\n\t\t\t...(metadata?.providerCopyMimeTypes ?? []),\n\t\t\t// TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n\t\t\t// However we can only check the system clipboard async. For this early check, just add it in.\n\t\t\t// We filter providers again once we have the final dataTransfer we will use.\n\t\t\tMimes.uriList,\n\t\t];\n\n\t\tconst allProviders =\n\t\t\tthis._languageFeaturesService.documentPasteEditProvider\n\t\t\t\t.ordered(model)\n\t\t\t\t.filter((provider) => {\n\t\t\t\t\t// Filter out providers that don't match the requested paste types\n\t\t\t\t\tconst preference = this._pasteAsActionContext?.preferred;\n\t\t\t\t\tif (preference) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tprovider.providedPasteEditKinds &&\n\t\t\t\t\t\t\t!this.providerMatchesPreference(\n\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\tpreference,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// And providers that don't handle any of mime types in the clipboard\n\t\t\t\t\treturn provider.pasteMimeTypes?.some((type) =>\n\t\t\t\t\t\tmatchesMimeType(type, allPotentialMimeTypes),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\tif (!allProviders.length) {\n\t\t\tif (this._pasteAsActionContext?.preferred) {\n\t\t\t\tthis.showPasteAsNoEditMessage(\n\t\t\t\t\tselections,\n\t\t\t\t\tthis._pasteAsActionContext.preferred,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Prevent the editor's default paste handler from running.\n\t\t// Note that after this point, we are fully responsible for handling paste.\n\t\t// If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n\t\te.preventDefault();\n\t\te.stopImmediatePropagation();\n\n\t\tif (this._pasteAsActionContext) {\n\t\t\tthis.showPasteAsPick(\n\t\t\t\tthis._pasteAsActionContext.preferred,\n\t\t\t\tallProviders,\n\t\t\t\tselections,\n\t\t\t\tdataTransfer,\n\t\t\t\tmetadata,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.doPasteInline(\n\t\t\t\tallProviders,\n\t\t\t\tselections,\n\t\t\t\tdataTransfer,\n\t\t\t\tmetadata,\n\t\t\t\te,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate showPasteAsNoEditMessage(\n\t\tselections: readonly Selection[],\n\t\tpreference: PastePreference,\n\t) {\n\t\tMessageController.get(this._editor)?.showMessage(\n\t\t\tlocalize(\n\t\t\t\t\"pasteAsError\",\n\t\t\t\t\"No paste edits for '{0}' found\",\n\t\t\t\tpreference instanceof HierarchicalKind\n\t\t\t\t\t? preference.value\n\t\t\t\t\t: preference.providerId,\n\t\t\t),\n\t\t\tselections[0].getStartPosition(),\n\t\t);\n\t}\n\n\tprivate doPasteInline(\n\t\tallProviders: readonly DocumentPasteEditProvider[],\n\t\tselections: readonly Selection[],\n\t\tdataTransfer: VSDataTransfer,\n\t\tmetadata: CopyMetadata | undefined,\n\t\tclipboardEvent: ClipboardEvent,\n\t): void {\n\t\tconst editor = this._editor;\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorStateCts = new EditorStateCancellationTokenSource(\n\t\t\teditor,\n\t\t\tCodeEditorStateFlag.Value | CodeEditorStateFlag.Selection,\n\t\t\tundefined,\n\t\t);\n\n\t\tconst p = createCancelablePromise(async (pToken) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst cts = disposables.add(new CancellationTokenSource(pToken));\n\t\t\tdisposables.add(\n\t\t\t\teditorStateCts.token.onCancellationRequested(() =>\n\t\t\t\t\tcts.cancel(),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst token = cts.token;\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, token);\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst supportedProviders = allProviders.filter((provider) =>\n\t\t\t\t\tthis.isSupportedPasteProvider(provider, dataTransfer),\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!supportedProviders.length ||\n\t\t\t\t\t(supportedProviders.length === 1 &&\n\t\t\t\t\t\tsupportedProviders[0] instanceof\n\t\t\t\t\t\t\tDefaultTextPasteOrDropEditProvider) // Only our default text provider is active\n\t\t\t\t) {\n\t\t\t\t\treturn this.applyDefaultPasteHandler(\n\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\tclipboardEvent,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst context: DocumentPasteContext = {\n\t\t\t\t\ttriggerKind: DocumentPasteTriggerKind.Automatic,\n\t\t\t\t};\n\t\t\t\tconst editSession = await this.getPasteEdits(\n\t\t\t\t\tsupportedProviders,\n\t\t\t\t\tdataTransfer,\n\t\t\t\t\tmodel,\n\t\t\t\t\tselections,\n\t\t\t\t\tcontext,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t\tdisposables.add(editSession);\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If the only edit returned is our default text edit, use the default paste handler\n\t\t\t\tif (\n\t\t\t\t\teditSession.edits.length === 1 &&\n\t\t\t\t\teditSession.edits[0].provider instanceof\n\t\t\t\t\t\tDefaultTextPasteOrDropEditProvider\n\t\t\t\t) {\n\t\t\t\t\treturn this.applyDefaultPasteHandler(\n\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\tclipboardEvent,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (editSession.edits.length) {\n\t\t\t\t\tconst canShowWidget =\n\t\t\t\t\t\teditor.getOption(EditorOption.pasteAs)\n\t\t\t\t\t\t\t.showPasteSelector === \"afterPaste\";\n\t\t\t\t\treturn this._postPasteWidgetManager.applyEditAndShowIfNeeded(\n\t\t\t\t\t\tselections,\n\t\t\t\t\t\t{ activeEditIndex: 0, allEdits: editSession.edits },\n\t\t\t\t\t\tcanShowWidget,\n\t\t\t\t\t\t(edit, token) => {\n\t\t\t\t\t\t\treturn new Promise<PasteEditWithProvider>(\n\t\t\t\t\t\t\t\t(resolve, reject) => {\n\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tconst resolveP =\n\t\t\t\t\t\t\t\t\t\t\t\tedit.provider.resolveDocumentPasteEdit?.(\n\t\t\t\t\t\t\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst showP =\n\t\t\t\t\t\t\t\t\t\t\t\tnew DeferredPromise<void>();\n\t\t\t\t\t\t\t\t\t\t\tconst resolved =\n\t\t\t\t\t\t\t\t\t\t\t\tresolveP &&\n\t\t\t\t\t\t\t\t\t\t\t\t(await this._pasteProgressManager.showWhile(\n\t\t\t\t\t\t\t\t\t\t\t\t\tselections[0].getEndPosition(),\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"resolveProcess\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Resolving paste edit. Click to cancel\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\tPromise.race([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowP.p,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolveP,\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcancel: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowP.cancel();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew CancellationError(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\t\t\t\tif (resolved) {\n\t\t\t\t\t\t\t\t\t\t\t\tedit.additionalEdit =\n\t\t\t\t\t\t\t\t\t\t\t\t\tresolved.additionalEdit;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn resolve(edit);\n\t\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tawait this.applyDefaultPasteHandler(\n\t\t\t\t\tdataTransfer,\n\t\t\t\t\tmetadata,\n\t\t\t\t\ttoken,\n\t\t\t\t\tclipboardEvent,\n\t\t\t\t);\n\t\t\t} finally {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._pasteProgressManager\n\t\t\t.showWhile(\n\t\t\t\tselections[0].getEndPosition(),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"pasteIntoEditorProgress\",\n\t\t\t\t\t\"Running paste handlers. Click to cancel and do basic paste\",\n\t\t\t\t),\n\t\t\t\tp,\n\t\t\t\t{\n\t\t\t\t\tcancel: async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tp.cancel();\n\n\t\t\t\t\t\t\tif (editorStateCts.token.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait this.applyDefaultPasteHandler(\n\t\t\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\t\t\teditorStateCts.token,\n\t\t\t\t\t\t\t\tclipboardEvent,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\teditorStateCts.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t\t.then(() => {\n\t\t\t\teditorStateCts.dispose();\n\t\t\t});\n\t\tthis._currentPasteOperation = p;\n\t}\n\n\tprivate showPasteAsPick(\n\t\tpreference: PastePreference | undefined,\n\t\tallProviders: readonly DocumentPasteEditProvider[],\n\t\tselections: readonly Selection[],\n\t\tdataTransfer: VSDataTransfer,\n\t\tmetadata: CopyMetadata | undefined,\n\t): void {\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst tokenSource = disposables.add(\n\t\t\t\tnew EditorStateCancellationTokenSource(\n\t\t\t\t\teditor,\n\t\t\t\t\tCodeEditorStateFlag.Value | CodeEditorStateFlag.Selection,\n\t\t\t\t\tundefined,\n\t\t\t\t\ttoken,\n\t\t\t\t),\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(\n\t\t\t\t\tdataTransfer,\n\t\t\t\t\tmetadata,\n\t\t\t\t\ttokenSource.token,\n\t\t\t\t);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any providers the don't match the full data transfer we will send them.\n\t\t\t\tlet supportedProviders = allProviders.filter((provider) =>\n\t\t\t\t\tthis.isSupportedPasteProvider(\n\t\t\t\t\t\tprovider,\n\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\tpreference,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (preference) {\n\t\t\t\t\t// We are looking for a specific edit\n\t\t\t\t\tsupportedProviders = supportedProviders.filter((provider) =>\n\t\t\t\t\t\tthis.providerMatchesPreference(provider, preference),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst context: DocumentPasteContext = {\n\t\t\t\t\ttriggerKind: DocumentPasteTriggerKind.PasteAs,\n\t\t\t\t\tonly:\n\t\t\t\t\t\tpreference && preference instanceof HierarchicalKind\n\t\t\t\t\t\t\t? preference\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t};\n\t\t\t\tlet editSession = disposables.add(\n\t\t\t\t\tawait this.getPasteEdits(\n\t\t\t\t\t\tsupportedProviders,\n\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tselections,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\ttokenSource.token,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any edits that don't match the requested kind\n\t\t\t\tif (preference) {\n\t\t\t\t\teditSession = {\n\t\t\t\t\t\tedits: editSession.edits.filter((edit) => {\n\t\t\t\t\t\t\tif (preference instanceof HierarchicalKind) {\n\t\t\t\t\t\t\t\treturn preference.contains(edit.kind);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tpreference.providerId === edit.provider.id\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdispose: editSession.dispose,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (!editSession.edits.length) {\n\t\t\t\t\tif (context.only) {\n\t\t\t\t\t\tthis.showPasteAsNoEditMessage(selections, context.only);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet pickedEdit: DocumentPasteEdit | undefined;\n\t\t\t\tif (preference) {\n\t\t\t\t\tpickedEdit = editSession.edits.at(0);\n\t\t\t\t} else {\n\t\t\t\t\tconst selected = await this._quickInputService.pick(\n\t\t\t\t\t\teditSession.edits.map(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t\t): IQuickPickItem & {\n\t\t\t\t\t\t\t\tedit: DocumentPasteEdit;\n\t\t\t\t\t\t\t} => ({\n\t\t\t\t\t\t\t\tlabel: edit.title,\n\t\t\t\t\t\t\t\tdescription: edit.kind?.value,\n\t\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplaceHolder: localize(\n\t\t\t\t\t\t\t\t\"pasteAsPickerPlaceholder\",\n\t\t\t\t\t\t\t\t\"Select Paste Action\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tpickedEdit = selected?.edit;\n\t\t\t\t}\n\n\t\t\t\tif (!pickedEdit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst combinedWorkspaceEdit = createCombinedWorkspaceEdit(\n\t\t\t\t\tmodel.uri,\n\t\t\t\t\tselections,\n\t\t\t\t\tpickedEdit,\n\t\t\t\t);\n\t\t\t\tawait this._bulkEditService.apply(combinedWorkspaceEdit, {\n\t\t\t\t\teditor: this._editor,\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\ttitle: localize(\"pasteAsProgress\", \"Running paste handlers\"),\n\t\t\t},\n\t\t\t() => p,\n\t\t);\n\t}\n\n\tprivate setCopyMetadata(\n\t\tdataTransfer: DataTransfer,\n\t\tmetadata: CopyMetadata,\n\t) {\n\t\tdataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n\t}\n\n\tprivate fetchCopyMetadata(e: ClipboardEvent): CopyMetadata | undefined {\n\t\tif (!e.clipboardData) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Prefer using the clipboard data we saved off\n\t\tconst rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n\t\tif (rawMetadata) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(rawMetadata);\n\t\t\t} catch {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise try to extract the generic text editor metadata\n\t\tconst [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\tif (metadata) {\n\t\t\treturn {\n\t\t\t\tdefaultPastePayload: {\n\t\t\t\t\tmode: metadata.mode,\n\t\t\t\t\tmulticursorText: metadata.multicursorText ?? null,\n\t\t\t\t\tpasteOnNewLine: !!metadata.isFromEmptySelection,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async mergeInDataFromCopy(\n\t\tdataTransfer: VSDataTransfer,\n\t\tmetadata: CopyMetadata | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (\n\t\t\tmetadata?.id &&\n\t\t\tCopyPasteController._currentCopyOperation?.handle === metadata.id\n\t\t) {\n\t\t\tconst toMergeDataTransfer =\n\t\t\t\tawait CopyPasteController._currentCopyOperation\n\t\t\t\t\t.dataTransferPromise;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const [key, value] of toMergeDataTransfer) {\n\t\t\t\tdataTransfer.replace(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (!dataTransfer.has(Mimes.uriList)) {\n\t\t\tconst resources = await this._clipboardService.readResources();\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resources.length) {\n\t\t\t\tdataTransfer.append(\n\t\t\t\t\tMimes.uriList,\n\t\t\t\t\tcreateStringDataTransferItem(UriList.create(resources)),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPasteEdits(\n\t\tproviders: readonly DocumentPasteEditProvider[],\n\t\tdataTransfer: VSDataTransfer,\n\t\tmodel: ITextModel,\n\t\tselections: readonly Selection[],\n\t\tcontext: DocumentPasteContext,\n\t\ttoken: CancellationToken,\n\t): Promise<DocumentPasteWithProviderEditsSession> {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst results = await raceCancellation(\n\t\t\tPromise.all(\n\t\t\t\tproviders.map(async (provider) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst edits =\n\t\t\t\t\t\t\tawait provider.provideDocumentPasteEdits?.(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tselections,\n\t\t\t\t\t\t\t\tdataTransfer,\n\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (edits) {\n\t\t\t\t\t\t\tdisposables.add(edits);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn edits?.edits?.map((edit) => ({\n\t\t\t\t\t\t\t...edit,\n\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t}));\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tif (!isCancellationError(err)) {\n\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t),\n\t\t\ttoken,\n\t\t);\n\t\tconst edits = coalesce(results ?? [])\n\t\t\t.flat()\n\t\t\t.filter((edit) => {\n\t\t\t\treturn !context.only || context.only.contains(edit.kind);\n\t\t\t});\n\t\treturn {\n\t\t\tedits: sortEditsByYieldTo(edits),\n\t\t\tdispose: () => disposables.dispose(),\n\t\t};\n\t}\n\n\tprivate async applyDefaultPasteHandler(\n\t\tdataTransfer: VSDataTransfer,\n\t\tmetadata: CopyMetadata | undefined,\n\t\ttoken: CancellationToken,\n\t\tclipboardEvent: ClipboardEvent,\n\t) {\n\t\tconst textDataTransfer =\n\t\t\tdataTransfer.get(Mimes.text) ?? dataTransfer.get(\"text\");\n\t\tconst text = (await textDataTransfer?.asString()) ?? \"\";\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst payload: PastePayload = {\n\t\t\tclipboardEvent,\n\t\t\ttext,\n\t\t\tpasteOnNewLine:\n\t\t\t\tmetadata?.defaultPastePayload.pasteOnNewLine ?? false,\n\t\t\tmulticursorText:\n\t\t\t\tmetadata?.defaultPastePayload.multicursorText ?? null,\n\t\t\tmode: null,\n\t\t};\n\t\tthis._editor.trigger(\"keyboard\", Handler.Paste, payload);\n\t}\n\n\t/**\n\t * Filter out providers if they:\n\t * - Don't handle any of the data transfer types we have\n\t * - Don't match the preferred paste kind\n\t */\n\tprivate isSupportedPasteProvider(\n\t\tprovider: DocumentPasteEditProvider,\n\t\tdataTransfer: VSDataTransfer,\n\t\tpreference?: PastePreference,\n\t): boolean {\n\t\tif (\n\t\t\t!provider.pasteMimeTypes?.some((type) => dataTransfer.matches(type))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (\n\t\t\t!preference || this.providerMatchesPreference(provider, preference)\n\t\t);\n\t}\n\n\tprivate providerMatchesPreference(\n\t\tprovider: DocumentPasteEditProvider,\n\t\tpreference: PastePreference,\n\t): boolean {\n\t\tif (preference instanceof HierarchicalKind) {\n\t\t\tif (!provider.providedPasteEditKinds) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn provider.providedPasteEditKinds.some((providedKind) =>\n\t\t\t\tpreference.contains(providedKind),\n\t\t\t);\n\t\t} else {\n\t\t\treturn provider.id === preference.providerId;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["editor", "token", "edits"]
}
