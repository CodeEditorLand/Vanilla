{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { CancelablePromise, createCancelablePromise, DeferredPromise, raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { UriList, VSDataTransfer, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { ICodeEditor, PastePayload } from '../../../browser/editorBrowser.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { Handler, IEditorContribution } from '../../../common/editorCommon.js';\nimport { DocumentPasteContext, DocumentPasteEdit, DocumentPasteEditProvider, DocumentPasteTriggerKind } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit.js';\nimport { CodeEditorStateFlag, EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nimport { CancellationError, isCancellationError } from '../../../../base/common/errors.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/editContext/textArea/textAreaEditContextInput.js';\n\nexport const changePasteTypeCommandId = 'editor.changePasteType';\n\nexport const pasteWidgetVisibleCtx = new RawContextKey<boolean>('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\n\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\n\ninterface CopyMetadata {\n\treadonly id?: string;\n\treadonly providerCopyMimeTypes?: readonly string[];\n\n\treadonly defaultPastePayload: Omit<PastePayload, 'text'>;\n}\n\ntype PasteEditWithProvider = DocumentPasteEdit & {\n\tprovider: DocumentPasteEditProvider;\n};\n\n\ninterface DocumentPasteWithProviderEditsSession {\n\tedits: readonly PasteEditWithProvider[];\n\tdispose(): void;\n}\n\ntype PastePreference =\n\t| HierarchicalKind\n\t| { providerId: string };\n\nexport class CopyPasteController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.copyPasteActionController';\n\n\tpublic static get(editor: ICodeEditor): CopyPasteController | null {\n\t\treturn editor.getContribution<CopyPasteController>(CopyPasteController.ID);\n\t}\n\n\t/**\n\t * Global tracking the last copy operation.\n\t *\n\t * This is shared across all editors so that you can copy and paste between groups.\n\t *\n\t * TODO: figure out how to make this work with multiple windows\n\t */\n\tprivate static _currentCopyOperation?: {\n\t\treadonly handle: string;\n\t\treadonly dataTransferPromise: CancelablePromise<VSDataTransfer>;\n\t};\n\n\tprivate readonly _editor: ICodeEditor;\n\n\tprivate _currentPasteOperation?: CancelablePromise<void>;\n\tprivate _pasteAsActionContext?: { readonly preferred?: PastePreference };\n\n\tprivate readonly _pasteProgressManager: InlineProgressManager;\n\tprivate readonly _postPasteWidgetManager: PostEditWidgetManager<PasteEditWithProvider>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\n\t\tconst container = editor.getContainerDomNode();\n\t\tthis._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n\t\tthis._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n\t\tthis._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n\n\t\tthis._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n\n\t\tthis._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n\t}\n\n\tpublic changePasteType() {\n\t\tthis._postPasteWidgetManager.tryShowSelector();\n\t}\n\n\tpublic pasteAs(preferred?: PastePreference) {\n\t\tthis._editor.focus();\n\t\ttry {\n\t\t\tthis._pasteAsActionContext = { preferred };\n\t\t\tgetActiveDocument().execCommand('paste');\n\t\t} finally {\n\t\t\tthis._pasteAsActionContext = undefined;\n\t\t}\n\t}\n\n\tpublic clearWidgets() {\n\t\tthis._postPasteWidgetManager.clear();\n\t}\n\n\tprivate isPasteAsEnabled(): boolean {\n\t\treturn this._editor.getOption(EditorOption.pasteAs).enabled;\n\t}\n\n\tpublic async finishedPaste(): Promise<void> {\n\t\tawait this._currentPasteOperation;\n\t}\n\n\tprivate handleCopy(e: ClipboardEvent) {\n\t\tif (!this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Explicitly clear the clipboard internal state.\n\t\t// This is needed because on web, the browser clipboard is faked out using an in-memory store.\n\t\t// This means the resources clipboard is not properly updated when copying from the editor.\n\t\tthis._clipboardService.clearInternalState?.();\n\n\t\tif (!e.clipboardData || !this.isPasteAsEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!model || !selections?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst enableEmptySelectionClipboard = this._editor.getOption(EditorOption.emptySelectionClipboard);\n\n\t\tlet ranges: readonly IRange[] = selections;\n\t\tconst wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n\t\tif (wasFromEmptySelection) {\n\t\t\tif (!enableEmptySelectionClipboard) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n\t\t}\n\n\t\tconst toCopy = this._editor._getViewModel()?.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n\t\tconst multicursorText = Array.isArray(toCopy) ? toCopy : null;\n\n\t\tconst defaultPastePayload = {\n\t\t\tmulticursorText,\n\t\t\tpasteOnNewLine: wasFromEmptySelection,\n\t\t\tmode: null\n\t\t};\n\n\t\tconst providers = this._languageFeaturesService.documentPasteEditProvider\n\t\t\t.ordered(model)\n\t\t\t.filter(x => !!x.prepareDocumentPaste);\n\t\tif (!providers.length) {\n\t\t\tthis.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataTransfer = toVSDataTransfer(e.clipboardData);\n\t\tconst providerCopyMimeTypes = providers.flatMap(x => x.copyMimeTypes ?? []);\n\n\t\t// Save off a handle pointing to data that VS Code maintains.\n\t\tconst handle = generateUuid();\n\t\tthis.setCopyMetadata(e.clipboardData, {\n\t\t\tid: handle,\n\t\t\tproviderCopyMimeTypes,\n\t\t\tdefaultPastePayload\n\t\t});\n\n\t\tconst promise = createCancelablePromise(async token => {\n\t\t\tconst results = coalesce(await Promise.all(providers.map(async provider => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await provider.prepareDocumentPaste!(model, ranges, dataTransfer, token);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})));\n\n\t\t\t// Values from higher priority providers should overwrite values from lower priority ones.\n\t\t\t// Reverse the array to so that the calls to `replace` below will do this\n\t\t\tresults.reverse();\n\n\t\t\tfor (const result of results) {\n\t\t\t\tfor (const [mime, value] of result) {\n\t\t\t\t\tdataTransfer.replace(mime, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dataTransfer;\n\t\t});\n\n\t\tCopyPasteController._currentCopyOperation?.dataTransferPromise.cancel();\n\t\tCopyPasteController._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n\t}\n\n\tprivate async handlePaste(e: ClipboardEvent) {\n\t\tif (!e.clipboardData || !this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessageController.get(this._editor)?.closeMessage();\n\t\tthis._currentPasteOperation?.cancel();\n\t\tthis._currentPasteOperation = undefined;\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!selections?.length || !model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis._editor.getOption(EditorOption.readOnly) // Never enabled if editor is readonly.\n\t\t\t|| (!this.isPasteAsEnabled() && !this._pasteAsActionContext) // Or feature disabled (but still enable if paste was explicitly requested)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst metadata = this.fetchCopyMetadata(e);\n\t\tconst dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n\t\tdataTransfer.delete(vscodeClipboardMime);\n\n\t\tconst allPotentialMimeTypes = [\n\t\t\t...e.clipboardData.types,\n\t\t\t...metadata?.providerCopyMimeTypes ?? [],\n\t\t\t// TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n\t\t\t// However we can only check the system clipboard async. For this early check, just add it in.\n\t\t\t// We filter providers again once we have the final dataTransfer we will use.\n\t\t\tMimes.uriList,\n\t\t];\n\n\t\tconst allProviders = this._languageFeaturesService.documentPasteEditProvider\n\t\t\t.ordered(model)\n\t\t\t.filter(provider => {\n\t\t\t\t// Filter out providers that don't match the requested paste types\n\t\t\t\tconst preference = this._pasteAsActionContext?.preferred;\n\t\t\t\tif (preference) {\n\t\t\t\t\tif (provider.providedPasteEditKinds && !this.providerMatchesPreference(provider, preference)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// And providers that don't handle any of mime types in the clipboard\n\t\t\t\treturn provider.pasteMimeTypes?.some(type => matchesMimeType(type, allPotentialMimeTypes));\n\t\t\t});\n\t\tif (!allProviders.length) {\n\t\t\tif (this._pasteAsActionContext?.preferred) {\n\t\t\t\tthis.showPasteAsNoEditMessage(selections, this._pasteAsActionContext.preferred);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Prevent the editor's default paste handler from running.\n\t\t// Note that after this point, we are fully responsible for handling paste.\n\t\t// If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n\t\te.preventDefault();\n\t\te.stopImmediatePropagation();\n\n\t\tif (this._pasteAsActionContext) {\n\t\t\tthis.showPasteAsPick(this._pasteAsActionContext.preferred, allProviders, selections, dataTransfer, metadata);\n\t\t} else {\n\t\t\tthis.doPasteInline(allProviders, selections, dataTransfer, metadata, e);\n\t\t}\n\t}\n\n\tprivate showPasteAsNoEditMessage(selections: readonly Selection[], preference: PastePreference) {\n\t\tMessageController.get(this._editor)?.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", preference instanceof HierarchicalKind ? preference.value : preference.providerId), selections[0].getStartPosition());\n\t}\n\n\tprivate doPasteInline(allProviders: readonly DocumentPasteEditProvider[], selections: readonly Selection[], dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, clipboardEvent: ClipboardEvent): void {\n\t\tconst editor = this._editor;\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorStateCts = new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection, undefined);\n\n\t\tconst p = createCancelablePromise(async (pToken) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst cts = disposables.add(new CancellationTokenSource(pToken));\n\t\t\tdisposables.add(editorStateCts.token.onCancellationRequested(() => cts.cancel()));\n\n\t\t\tconst token = cts.token;\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, token);\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst supportedProviders = allProviders.filter(provider => this.isSupportedPasteProvider(provider, dataTransfer));\n\t\t\t\tif (!supportedProviders.length\n\t\t\t\t\t|| (supportedProviders.length === 1 && supportedProviders[0] instanceof DefaultTextPasteOrDropEditProvider) // Only our default text provider is active\n\t\t\t\t) {\n\t\t\t\t\treturn this.applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent);\n\t\t\t\t}\n\n\t\t\t\tconst context: DocumentPasteContext = {\n\t\t\t\t\ttriggerKind: DocumentPasteTriggerKind.Automatic,\n\t\t\t\t};\n\t\t\t\tconst editSession = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, token);\n\t\t\t\tdisposables.add(editSession);\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If the only edit returned is our default text edit, use the default paste handler\n\t\t\t\tif (editSession.edits.length === 1 && editSession.edits[0].provider instanceof DefaultTextPasteOrDropEditProvider) {\n\t\t\t\t\treturn this.applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent);\n\t\t\t\t}\n\n\t\t\t\tif (editSession.edits.length) {\n\t\t\t\t\tconst canShowWidget = editor.getOption(EditorOption.pasteAs).showPasteSelector === 'afterPaste';\n\t\t\t\t\treturn this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: editSession.edits }, canShowWidget, (edit, token) => {\n\t\t\t\t\t\treturn new Promise<PasteEditWithProvider>((resolve, reject) => {\n\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst resolveP = edit.provider.resolveDocumentPasteEdit?.(edit, token);\n\t\t\t\t\t\t\t\t\tconst showP = new DeferredPromise<void>();\n\t\t\t\t\t\t\t\t\tconst resolved = resolveP && await this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('resolveProcess', \"Resolving paste edit. Click to cancel\"), Promise.race([showP.p, resolveP]), {\n\t\t\t\t\t\t\t\t\t\tcancel: () => {\n\t\t\t\t\t\t\t\t\t\t\tshowP.cancel();\n\t\t\t\t\t\t\t\t\t\t\treturn reject(new CancellationError());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\t\t\t\tif (resolved) {\n\t\t\t\t\t\t\t\t\t\tedit.additionalEdit = resolved.additionalEdit;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn resolve(edit);\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t});\n\t\t\t\t\t}, token);\n\t\t\t\t}\n\n\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent);\n\t\t\t} finally {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel and do basic paste\"), p, {\n\t\t\tcancel: async () => {\n\t\t\t\ttry {\n\t\t\t\t\tp.cancel();\n\n\t\t\t\t\tif (editorStateCts.token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, editorStateCts.token, clipboardEvent);\n\t\t\t\t} finally {\n\t\t\t\t\teditorStateCts.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(() => {\n\t\t\teditorStateCts.dispose();\n\t\t});\n\t\tthis._currentPasteOperation = p;\n\t}\n\n\tprivate showPasteAsPick(preference: PastePreference | undefined, allProviders: readonly DocumentPasteEditProvider[], selections: readonly Selection[], dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined): void {\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst tokenSource = disposables.add(new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection, undefined, token));\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any providers the don't match the full data transfer we will send them.\n\t\t\t\tlet supportedProviders = allProviders.filter(provider => this.isSupportedPasteProvider(provider, dataTransfer, preference));\n\t\t\t\tif (preference) {\n\t\t\t\t\t// We are looking for a specific edit\n\t\t\t\t\tsupportedProviders = supportedProviders.filter(provider => this.providerMatchesPreference(provider, preference));\n\t\t\t\t}\n\n\t\t\t\tconst context: DocumentPasteContext = {\n\t\t\t\t\ttriggerKind: DocumentPasteTriggerKind.PasteAs,\n\t\t\t\t\tonly: preference && preference instanceof HierarchicalKind ? preference : undefined,\n\t\t\t\t};\n\t\t\t\tlet editSession = disposables.add(await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token));\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any edits that don't match the requested kind\n\t\t\t\tif (preference) {\n\t\t\t\t\teditSession = {\n\t\t\t\t\t\tedits: editSession.edits.filter(edit => {\n\t\t\t\t\t\t\tif (preference instanceof HierarchicalKind) {\n\t\t\t\t\t\t\t\treturn preference.contains(edit.kind);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn preference.providerId === edit.provider.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdispose: editSession.dispose\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (!editSession.edits.length) {\n\t\t\t\t\tif (context.only) {\n\t\t\t\t\t\tthis.showPasteAsNoEditMessage(selections, context.only);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet pickedEdit: DocumentPasteEdit | undefined;\n\t\t\t\tif (preference) {\n\t\t\t\t\tpickedEdit = editSession.edits.at(0);\n\t\t\t\t} else {\n\t\t\t\t\tconst selected = await this._quickInputService.pick(\n\t\t\t\t\t\teditSession.edits.map((edit): IQuickPickItem & { edit: DocumentPasteEdit } => ({\n\t\t\t\t\t\t\tlabel: edit.title,\n\t\t\t\t\t\t\tdescription: edit.kind?.value,\n\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t})), {\n\t\t\t\t\t\tplaceHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n\t\t\t\t\t});\n\t\t\t\t\tpickedEdit = selected?.edit;\n\t\t\t\t}\n\n\t\t\t\tif (!pickedEdit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n\t\t\t\tawait this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n\t\t\t} finally {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('pasteAsProgress', \"Running paste handlers\"),\n\t\t}, () => p);\n\t}\n\n\tprivate setCopyMetadata(dataTransfer: DataTransfer, metadata: CopyMetadata) {\n\t\tdataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n\t}\n\n\tprivate fetchCopyMetadata(e: ClipboardEvent): CopyMetadata | undefined {\n\t\tif (!e.clipboardData) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Prefer using the clipboard data we saved off\n\t\tconst rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n\t\tif (rawMetadata) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(rawMetadata);\n\t\t\t} catch {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise try to extract the generic text editor metadata\n\t\tconst [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\tif (metadata) {\n\t\t\treturn {\n\t\t\t\tdefaultPastePayload: {\n\t\t\t\t\tmode: metadata.mode,\n\t\t\t\t\tmulticursorText: metadata.multicursorText ?? null,\n\t\t\t\t\tpasteOnNewLine: !!metadata.isFromEmptySelection,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async mergeInDataFromCopy(dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, token: CancellationToken): Promise<void> {\n\t\tif (metadata?.id && CopyPasteController._currentCopyOperation?.handle === metadata.id) {\n\t\t\tconst toMergeDataTransfer = await CopyPasteController._currentCopyOperation.dataTransferPromise;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const [key, value] of toMergeDataTransfer) {\n\t\t\t\tdataTransfer.replace(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (!dataTransfer.has(Mimes.uriList)) {\n\t\t\tconst resources = await this._clipboardService.readResources();\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resources.length) {\n\t\t\t\tdataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPasteEdits(providers: readonly DocumentPasteEditProvider[], dataTransfer: VSDataTransfer, model: ITextModel, selections: readonly Selection[], context: DocumentPasteContext, token: CancellationToken): Promise<DocumentPasteWithProviderEditsSession> {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst results = await raceCancellation(\n\t\t\tPromise.all(providers.map(async provider => {\n\t\t\t\ttry {\n\t\t\t\t\tconst edits = await provider.provideDocumentPasteEdits?.(model, selections, dataTransfer, context, token);\n\t\t\t\t\tif (edits) {\n\t\t\t\t\t\tdisposables.add(edits);\n\t\t\t\t\t}\n\t\t\t\t\treturn edits?.edits?.map(edit => ({ ...edit, provider }));\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!isCancellationError(err)) {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})),\n\t\t\ttoken);\n\t\tconst edits = coalesce(results ?? []).flat().filter(edit => {\n\t\t\treturn !context.only || context.only.contains(edit.kind);\n\t\t});\n\t\treturn {\n\t\t\tedits: sortEditsByYieldTo(edits),\n\t\t\tdispose: () => disposables.dispose()\n\t\t};\n\t}\n\n\tprivate async applyDefaultPasteHandler(dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, token: CancellationToken, clipboardEvent: ClipboardEvent) {\n\t\tconst textDataTransfer = dataTransfer.get(Mimes.text) ?? dataTransfer.get('text');\n\t\tconst text = (await textDataTransfer?.asString()) ?? '';\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst payload: PastePayload = {\n\t\t\tclipboardEvent,\n\t\t\ttext,\n\t\t\tpasteOnNewLine: metadata?.defaultPastePayload.pasteOnNewLine ?? false,\n\t\t\tmulticursorText: metadata?.defaultPastePayload.multicursorText ?? null,\n\t\t\tmode: null,\n\t\t};\n\t\tthis._editor.trigger('keyboard', Handler.Paste, payload);\n\t}\n\n\t/**\n\t * Filter out providers if they:\n\t * - Don't handle any of the data transfer types we have\n\t * - Don't match the preferred paste kind\n\t */\n\tprivate isSupportedPasteProvider(provider: DocumentPasteEditProvider, dataTransfer: VSDataTransfer, preference?: PastePreference): boolean {\n\t\tif (!provider.pasteMimeTypes?.some(type => dataTransfer.matches(type))) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !preference || this.providerMatchesPreference(provider, preference);\n\t}\n\n\tprivate providerMatchesPreference(provider: DocumentPasteEditProvider, preference: PastePreference): boolean {\n\t\tif (preference instanceof HierarchicalKind) {\n\t\t\tif (!provider.providedPasteEditKinds) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn provider.providedPasteEditKinds.some(providedKind => preference.contains(providedKind));\n\t\t} else {\n\t\t\treturn provider.id === preference.providerId;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["editor", "token", "edits"]
}
