{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/dropOrPasteInto/browser/edit.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { HierarchicalKind } from \"../../../../base/common/hierarchicalKind.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ResourceTextEdit } from \"../../../browser/services/bulkEditService.js\";\nimport type { Range } from \"../../../common/core/range.js\";\nimport type {\n\tDocumentDropEdit,\n\tDocumentPasteEdit,\n\tDropYieldTo,\n\tWorkspaceEdit,\n} from \"../../../common/languages.js\";\nimport { SnippetParser } from \"../../snippet/browser/snippetParser.js\";\n\n/**\n * Given a {@link DropOrPasteEdit} and set of ranges, creates a {@link WorkspaceEdit} that applies the insert text from\n * the {@link DropOrPasteEdit} at each range plus any additional edits.\n */\nexport function createCombinedWorkspaceEdit(\n\turi: URI,\n\tranges: readonly Range[],\n\tedit: DocumentPasteEdit | DocumentDropEdit,\n): WorkspaceEdit {\n\t// If the edit insert text is empty, skip applying at each range\n\tif (\n\t\ttypeof edit.insertText === \"string\"\n\t\t\t? edit.insertText === \"\"\n\t\t\t: edit.insertText.snippet === \"\"\n\t) {\n\t\treturn {\n\t\t\tedits: edit.additionalEdit?.edits ?? [],\n\t\t};\n\t}\n\n\treturn {\n\t\tedits: [\n\t\t\t...ranges.map(\n\t\t\t\t(range) =>\n\t\t\t\t\tnew ResourceTextEdit(uri, {\n\t\t\t\t\t\trange,\n\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\ttypeof edit.insertText === \"string\"\n\t\t\t\t\t\t\t\t? SnippetParser.escape(edit.insertText) + \"$0\"\n\t\t\t\t\t\t\t\t: edit.insertText.snippet,\n\t\t\t\t\t\tinsertAsSnippet: true,\n\t\t\t\t\t}),\n\t\t\t),\n\t\t\t...(edit.additionalEdit?.edits ?? []),\n\t\t],\n\t};\n}\n\nexport function sortEditsByYieldTo<\n\tT extends {\n\t\treadonly kind: HierarchicalKind | undefined;\n\t\treadonly handledMimeType?: string;\n\t\treadonly yieldTo?: readonly DropYieldTo[];\n\t},\n>(edits: readonly T[]): T[] {\n\tfunction yieldsTo(yTo: DropYieldTo, other: T): boolean {\n\t\tif (\"mimeType\" in yTo) {\n\t\t\treturn yTo.mimeType === other.handledMimeType;\n\t\t}\n\t\treturn !!other.kind && yTo.kind.contains(other.kind);\n\t}\n\n\t// Build list of nodes each node yields to\n\tconst yieldsToMap = new Map<T, T[]>();\n\tfor (const edit of edits) {\n\t\tfor (const yTo of edit.yieldTo ?? []) {\n\t\t\tfor (const other of edits) {\n\t\t\t\tif (other === edit) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (yieldsTo(yTo, other)) {\n\t\t\t\t\tlet arr = yieldsToMap.get(edit);\n\t\t\t\t\tif (!arr) {\n\t\t\t\t\t\tarr = [];\n\t\t\t\t\t\tyieldsToMap.set(edit, arr);\n\t\t\t\t\t}\n\t\t\t\t\tarr.push(other);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!yieldsToMap.size) {\n\t\treturn Array.from(edits);\n\t}\n\n\t// Topological sort\n\tconst visited = new Set<T>();\n\tconst tempStack: T[] = [];\n\n\tfunction visit(nodes: T[]): T[] {\n\t\tif (!nodes.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tif (tempStack.includes(node)) {\n\t\t\tconsole.warn(\"Yield to cycle detected\", node);\n\t\t\treturn nodes;\n\t\t}\n\n\t\tif (visited.has(node)) {\n\t\t\treturn visit(nodes.slice(1));\n\t\t}\n\n\t\tlet pre: T[] = [];\n\t\tconst yTo = yieldsToMap.get(node);\n\t\tif (yTo) {\n\t\t\ttempStack.push(node);\n\t\t\tpre = visit(yTo);\n\t\t\ttempStack.pop();\n\t\t}\n\n\t\tvisited.add(node);\n\n\t\treturn [...pre, node, ...visit(nodes.slice(1))];\n\t}\n\n\treturn visit(Array.from(edits));\n}\n"],
  "mappings": ";;AAOA,SAAS,wBAAwB;AAQjC,SAAS,qBAAqB;AAMvB,SAAS,4BACf,KACA,QACA,MACgB;AAEhB,MACC,OAAO,KAAK,eAAe,WACxB,KAAK,eAAe,KACpB,KAAK,WAAW,YAAY,IAC9B;AACD,WAAO;AAAA,MACN,OAAO,KAAK,gBAAgB,SAAS,CAAC;AAAA,IACvC;AAAA,EACD;AAEA,SAAO;AAAA,IACN,OAAO;AAAA,MACN,GAAG,OAAO;AAAA,QACT,CAAC,UACA,IAAI,iBAAiB,KAAK;AAAA,UACzB;AAAA,UACA,MACC,OAAO,KAAK,eAAe,WACxB,cAAc,OAAO,KAAK,UAAU,IAAI,OACxC,KAAK,WAAW;AAAA,UACpB,iBAAiB;AAAA,QAClB,CAAC;AAAA,MACH;AAAA,MACA,GAAI,KAAK,gBAAgB,SAAS,CAAC;AAAA,IACpC;AAAA,EACD;AACD;AAhCgB;AAkCT,SAAS,mBAMd,OAA0B;AAC3B,WAAS,SAAS,KAAkB,OAAmB;AACtD,QAAI,cAAc,KAAK;AACtB,aAAO,IAAI,aAAa,MAAM;AAAA,IAC/B;AACA,WAAO,CAAC,CAAC,MAAM,QAAQ,IAAI,KAAK,SAAS,MAAM,IAAI;AAAA,EACpD;AALS;AAQT,QAAM,cAAc,oBAAI,IAAY;AACpC,aAAW,QAAQ,OAAO;AACzB,eAAW,OAAO,KAAK,WAAW,CAAC,GAAG;AACrC,iBAAW,SAAS,OAAO;AAC1B,YAAI,UAAU,MAAM;AACnB;AAAA,QACD;AAEA,YAAI,SAAS,KAAK,KAAK,GAAG;AACzB,cAAI,MAAM,YAAY,IAAI,IAAI;AAC9B,cAAI,CAAC,KAAK;AACT,kBAAM,CAAC;AACP,wBAAY,IAAI,MAAM,GAAG;AAAA,UAC1B;AACA,cAAI,KAAK,KAAK;AAAA,QACf;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,MAAI,CAAC,YAAY,MAAM;AACtB,WAAO,MAAM,KAAK,KAAK;AAAA,EACxB;AAGA,QAAM,UAAU,oBAAI,IAAO;AAC3B,QAAM,YAAiB,CAAC;AAExB,WAAS,MAAM,OAAiB;AAC/B,QAAI,CAAC,MAAM,QAAQ;AAClB,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,OAAO,MAAM,CAAC;AACpB,QAAI,UAAU,SAAS,IAAI,GAAG;AAC7B,cAAQ,KAAK,2BAA2B,IAAI;AAC5C,aAAO;AAAA,IACR;AAEA,QAAI,QAAQ,IAAI,IAAI,GAAG;AACtB,aAAO,MAAM,MAAM,MAAM,CAAC,CAAC;AAAA,IAC5B;AAEA,QAAI,MAAW,CAAC;AAChB,UAAM,MAAM,YAAY,IAAI,IAAI;AAChC,QAAI,KAAK;AACR,gBAAU,KAAK,IAAI;AACnB,YAAM,MAAM,GAAG;AACf,gBAAU,IAAI;AAAA,IACf;AAEA,YAAQ,IAAI,IAAI;AAEhB,WAAO,CAAC,GAAG,KAAK,MAAM,GAAG,MAAM,MAAM,MAAM,CAAC,CAAC,CAAC;AAAA,EAC/C;AA1BS;AA4BT,SAAO,MAAM,MAAM,KAAK,KAAK,CAAC;AAC/B;AAxEgB;",
  "names": []
}
