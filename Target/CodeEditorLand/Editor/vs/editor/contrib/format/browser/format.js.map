{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/format/browser/format.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray, isNonEmptyArray } from \"../../../../base/common/arrays.js\";\nimport {\n\tCancellationToken,\n\ttype CancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { onUnexpectedExternalError } from \"../../../../base/common/errors.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../../base/common/linkedList.js\";\nimport { assertType } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tAccessibilitySignal,\n\tIAccessibilitySignalService,\n} from \"../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { ExtensionIdentifierSet } from \"../../../../platform/extensions/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { IProgress } from \"../../../../platform/progress/common/progress.js\";\nimport {\n\ttype IActiveCodeEditor,\n\tisCodeEditor,\n} from \"../../../browser/editorBrowser.js\";\nimport type { ServicesAccessor } from \"../../../browser/editorExtensions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport { ScrollType } from \"../../../common/editorCommon.js\";\nimport type { LanguageFeatureRegistry } from \"../../../common/languageFeatureRegistry.js\";\nimport type {\n\tDocumentFormattingEditProvider,\n\tDocumentRangeFormattingEditProvider,\n\tFormattingOptions,\n\tTextEdit,\n} from \"../../../common/languages.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { IEditorWorkerService } from \"../../../common/services/editorWorker.js\";\nimport { ILanguageFeaturesService } from \"../../../common/services/languageFeatures.js\";\nimport { ITextModelService } from \"../../../common/services/resolverService.js\";\nimport {\n\tCodeEditorStateFlag,\n\tEditorStateCancellationTokenSource,\n\tTextModelCancellationTokenSource,\n} from \"../../editorState/browser/editorState.js\";\nimport { FormattingEdit } from \"./formattingEdit.js\";\n\nexport function getRealAndSyntheticDocumentFormattersOrdered(\n\tdocumentFormattingEditProvider: LanguageFeatureRegistry<DocumentFormattingEditProvider>,\n\tdocumentRangeFormattingEditProvider: LanguageFeatureRegistry<DocumentRangeFormattingEditProvider>,\n\tmodel: ITextModel,\n): DocumentFormattingEditProvider[] {\n\tconst result: DocumentFormattingEditProvider[] = [];\n\tconst seen = new ExtensionIdentifierSet();\n\n\t// (1) add all document formatter\n\tconst docFormatter = documentFormattingEditProvider.ordered(model);\n\tfor (const formatter of docFormatter) {\n\t\tresult.push(formatter);\n\t\tif (formatter.extensionId) {\n\t\t\tseen.add(formatter.extensionId);\n\t\t}\n\t}\n\n\t// (2) add all range formatter as document formatter (unless the same extension already did that)\n\tconst rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n\tfor (const formatter of rangeFormatter) {\n\t\tif (formatter.extensionId) {\n\t\t\tif (seen.has(formatter.extensionId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tseen.add(formatter.extensionId);\n\t\t}\n\t\tresult.push({\n\t\t\tdisplayName: formatter.displayName,\n\t\t\textensionId: formatter.extensionId,\n\t\t\tprovideDocumentFormattingEdits(model, options, token) {\n\t\t\t\treturn formatter.provideDocumentRangeFormattingEdits(\n\t\t\t\t\tmodel,\n\t\t\t\t\tmodel.getFullModelRange(),\n\t\t\t\t\toptions,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n\treturn result;\n}\n\nexport enum FormattingKind {\n\tFile = 1,\n\tSelection = 2,\n}\n\nexport enum FormattingMode {\n\tExplicit = 1,\n\tSilent = 2,\n}\n\nexport interface IFormattingEditProviderSelector {\n\t<\n\t\tT extends\n\t\t\t| DocumentFormattingEditProvider\n\t\t\t| DocumentRangeFormattingEditProvider,\n\t>(\n\t\tformatter: T[],\n\t\tdocument: ITextModel,\n\t\tmode: FormattingMode,\n\t\tkind: FormattingKind,\n\t): Promise<T | undefined>;\n}\n\nexport abstract class FormattingConflicts {\n\tprivate static readonly _selectors =\n\t\tnew LinkedList<IFormattingEditProviderSelector>();\n\n\tstatic setFormatterSelector(\n\t\tselector: IFormattingEditProviderSelector,\n\t): IDisposable {\n\t\tconst remove = FormattingConflicts._selectors.unshift(selector);\n\t\treturn { dispose: remove };\n\t}\n\n\tstatic async select<\n\t\tT extends\n\t\t\t| DocumentFormattingEditProvider\n\t\t\t| DocumentRangeFormattingEditProvider,\n\t>(\n\t\tformatter: T[],\n\t\tdocument: ITextModel,\n\t\tmode: FormattingMode,\n\t\tkind: FormattingKind,\n\t): Promise<T | undefined> {\n\t\tif (formatter.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selector = Iterable.first(FormattingConflicts._selectors);\n\t\tif (selector) {\n\t\t\treturn await selector(formatter, document, mode, kind);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport async function formatDocumentRangesWithSelectedProvider(\n\taccessor: ServicesAccessor,\n\teditorOrModel: ITextModel | IActiveCodeEditor,\n\trangeOrRanges: Range | Range[],\n\tmode: FormattingMode,\n\tprogress: IProgress<DocumentRangeFormattingEditProvider>,\n\ttoken: CancellationToken,\n\tuserGesture: boolean,\n): Promise<void> {\n\tconst instaService = accessor.get(IInstantiationService);\n\tconst {\n\t\tdocumentRangeFormattingEditProvider:\n\t\t\tdocumentRangeFormattingEditProviderRegistry,\n\t} = accessor.get(ILanguageFeaturesService);\n\tconst model = isCodeEditor(editorOrModel)\n\t\t? editorOrModel.getModel()\n\t\t: editorOrModel;\n\tconst provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n\tconst selected = await FormattingConflicts.select(\n\t\tprovider,\n\t\tmodel,\n\t\tmode,\n\t\tFormattingKind.Selection,\n\t);\n\tif (selected) {\n\t\tprogress.report(selected);\n\t\tawait instaService.invokeFunction(\n\t\t\tformatDocumentRangesWithProvider,\n\t\t\tselected,\n\t\t\teditorOrModel,\n\t\t\trangeOrRanges,\n\t\t\ttoken,\n\t\t\tuserGesture,\n\t\t);\n\t}\n}\n\nexport async function formatDocumentRangesWithProvider(\n\taccessor: ServicesAccessor,\n\tprovider: DocumentRangeFormattingEditProvider,\n\teditorOrModel: ITextModel | IActiveCodeEditor,\n\trangeOrRanges: Range | Range[],\n\ttoken: CancellationToken,\n\tuserGesture: boolean,\n): Promise<boolean> {\n\tconst workerService = accessor.get(IEditorWorkerService);\n\tconst logService = accessor.get(ILogService);\n\tconst accessibilitySignalService = accessor.get(\n\t\tIAccessibilitySignalService,\n\t);\n\n\tlet model: ITextModel;\n\tlet cts: CancellationTokenSource;\n\tif (isCodeEditor(editorOrModel)) {\n\t\tmodel = editorOrModel.getModel();\n\t\tcts = new EditorStateCancellationTokenSource(\n\t\t\teditorOrModel,\n\t\t\tCodeEditorStateFlag.Value | CodeEditorStateFlag.Position,\n\t\t\tundefined,\n\t\t\ttoken,\n\t\t);\n\t} else {\n\t\tmodel = editorOrModel;\n\t\tcts = new TextModelCancellationTokenSource(editorOrModel, token);\n\t}\n\n\t// make sure that ranges don't overlap nor touch each other\n\tconst ranges: Range[] = [];\n\tlet len = 0;\n\tfor (const range of asArray(rangeOrRanges).sort(\n\t\tRange.compareRangesUsingStarts,\n\t)) {\n\t\tif (\n\t\t\tlen > 0 &&\n\t\t\tRange.areIntersectingOrTouching(ranges[len - 1], range)\n\t\t) {\n\t\t\tranges[len - 1] = Range.fromPositions(\n\t\t\t\tranges[len - 1].getStartPosition(),\n\t\t\t\trange.getEndPosition(),\n\t\t\t);\n\t\t} else {\n\t\t\tlen = ranges.push(range);\n\t\t}\n\t}\n\n\tconst computeEdits = async (range: Range) => {\n\t\tlogService.trace(\n\t\t\t`[format][provideDocumentRangeFormattingEdits] (request)`,\n\t\t\tprovider.extensionId?.value,\n\t\t\trange,\n\t\t);\n\n\t\tconst result =\n\t\t\t(await provider.provideDocumentRangeFormattingEdits(\n\t\t\t\tmodel,\n\t\t\t\trange,\n\t\t\t\tmodel.getFormattingOptions(),\n\t\t\t\tcts.token,\n\t\t\t)) || [];\n\n\t\tlogService.trace(\n\t\t\t`[format][provideDocumentRangeFormattingEdits] (response)`,\n\t\t\tprovider.extensionId?.value,\n\t\t\tresult,\n\t\t);\n\n\t\treturn result;\n\t};\n\n\tconst hasIntersectingEdit = (a: TextEdit[], b: TextEdit[]) => {\n\t\tif (!a.length || !b.length) {\n\t\t\treturn false;\n\t\t}\n\t\t// quick exit if the list of ranges are completely unrelated [O(n)]\n\t\tconst mergedA = a.reduce((acc, val) => {\n\t\t\treturn Range.plusRange(acc, val.range);\n\t\t}, a[0].range);\n\t\tif (\n\t\t\t!b.some((x) => {\n\t\t\t\treturn Range.intersectRanges(mergedA, x.range);\n\t\t\t})\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\t// fallback to a complete check [O(n^2)]\n\t\tfor (const edit of a) {\n\t\t\tfor (const otherEdit of b) {\n\t\t\t\tif (Range.intersectRanges(edit.range, otherEdit.range)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst allEdits: TextEdit[] = [];\n\tconst rawEditsList: TextEdit[][] = [];\n\ttry {\n\t\tif (\n\t\t\ttypeof provider.provideDocumentRangesFormattingEdits === \"function\"\n\t\t) {\n\t\t\tlogService.trace(\n\t\t\t\t`[format][provideDocumentRangeFormattingEdits] (request)`,\n\t\t\t\tprovider.extensionId?.value,\n\t\t\t\tranges,\n\t\t\t);\n\t\t\tconst result =\n\t\t\t\t(await provider.provideDocumentRangesFormattingEdits(\n\t\t\t\t\tmodel,\n\t\t\t\t\tranges,\n\t\t\t\t\tmodel.getFormattingOptions(),\n\t\t\t\t\tcts.token,\n\t\t\t\t)) || [];\n\t\t\tlogService.trace(\n\t\t\t\t`[format][provideDocumentRangeFormattingEdits] (response)`,\n\t\t\t\tprovider.extensionId?.value,\n\t\t\t\tresult,\n\t\t\t);\n\t\t\trawEditsList.push(result);\n\t\t} else {\n\t\t\tfor (const range of ranges) {\n\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\trawEditsList.push(await computeEdits(range));\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < ranges.length; ++i) {\n\t\t\t\tfor (let j = i + 1; j < ranges.length; ++j) {\n\t\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n\t\t\t\t\t\t// Merge ranges i and j into a single range, recompute the associated edits\n\t\t\t\t\t\tconst mergedRange = Range.plusRange(\n\t\t\t\t\t\t\tranges[i],\n\t\t\t\t\t\t\tranges[j],\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst edits = await computeEdits(mergedRange);\n\t\t\t\t\t\tranges.splice(j, 1);\n\t\t\t\t\t\tranges.splice(i, 1);\n\t\t\t\t\t\tranges.push(mergedRange);\n\t\t\t\t\t\trawEditsList.splice(j, 1);\n\t\t\t\t\t\trawEditsList.splice(i, 1);\n\t\t\t\t\t\trawEditsList.push(edits);\n\t\t\t\t\t\t// Restart scanning\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const rawEdits of rawEditsList) {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst minimalEdits = await workerService.computeMoreMinimalEdits(\n\t\t\t\tmodel.uri,\n\t\t\t\trawEdits,\n\t\t\t);\n\t\t\tif (minimalEdits) {\n\t\t\t\tallEdits.push(...minimalEdits);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tcts.dispose();\n\t}\n\n\tif (allEdits.length === 0) {\n\t\treturn false;\n\t}\n\n\tif (isCodeEditor(editorOrModel)) {\n\t\t// use editor to apply edits\n\t\tFormattingEdit.execute(editorOrModel, allEdits, true);\n\t\teditorOrModel.revealPositionInCenterIfOutsideViewport(\n\t\t\teditorOrModel.getPosition(),\n\t\t\tScrollType.Immediate,\n\t\t);\n\t} else {\n\t\t// use model to apply edits\n\t\tconst [{ range }] = allEdits;\n\t\tconst initialSelection = new Selection(\n\t\t\trange.startLineNumber,\n\t\t\trange.startColumn,\n\t\t\trange.endLineNumber,\n\t\t\trange.endColumn,\n\t\t);\n\t\tmodel.pushEditOperations(\n\t\t\t[initialSelection],\n\t\t\tallEdits.map((edit) => {\n\t\t\t\treturn {\n\t\t\t\t\ttext: edit.text,\n\t\t\t\t\trange: Range.lift(edit.range),\n\t\t\t\t\tforceMoveMarkers: true,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t(undoEdits) => {\n\t\t\t\tfor (const { range } of undoEdits) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tRange.areIntersectingOrTouching(range, initialSelection)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t);\n\t}\n\taccessibilitySignalService.playSignal(AccessibilitySignal.format, {\n\t\tuserGesture,\n\t});\n\treturn true;\n}\n\nexport async function formatDocumentWithSelectedProvider(\n\taccessor: ServicesAccessor,\n\teditorOrModel: ITextModel | IActiveCodeEditor,\n\tmode: FormattingMode,\n\tprogress: IProgress<DocumentFormattingEditProvider>,\n\ttoken: CancellationToken,\n\tuserGesture?: boolean,\n): Promise<void> {\n\tconst instaService = accessor.get(IInstantiationService);\n\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\tconst model = isCodeEditor(editorOrModel)\n\t\t? editorOrModel.getModel()\n\t\t: editorOrModel;\n\tconst provider = getRealAndSyntheticDocumentFormattersOrdered(\n\t\tlanguageFeaturesService.documentFormattingEditProvider,\n\t\tlanguageFeaturesService.documentRangeFormattingEditProvider,\n\t\tmodel,\n\t);\n\tconst selected = await FormattingConflicts.select(\n\t\tprovider,\n\t\tmodel,\n\t\tmode,\n\t\tFormattingKind.File,\n\t);\n\tif (selected) {\n\t\tprogress.report(selected);\n\t\tawait instaService.invokeFunction(\n\t\t\tformatDocumentWithProvider,\n\t\t\tselected,\n\t\t\teditorOrModel,\n\t\t\tmode,\n\t\t\ttoken,\n\t\t\tuserGesture,\n\t\t);\n\t}\n}\n\nexport async function formatDocumentWithProvider(\n\taccessor: ServicesAccessor,\n\tprovider: DocumentFormattingEditProvider,\n\teditorOrModel: ITextModel | IActiveCodeEditor,\n\tmode: FormattingMode,\n\ttoken: CancellationToken,\n\tuserGesture?: boolean,\n): Promise<boolean> {\n\tconst workerService = accessor.get(IEditorWorkerService);\n\tconst accessibilitySignalService = accessor.get(\n\t\tIAccessibilitySignalService,\n\t);\n\n\tlet model: ITextModel;\n\tlet cts: CancellationTokenSource;\n\tif (isCodeEditor(editorOrModel)) {\n\t\tmodel = editorOrModel.getModel();\n\t\tcts = new EditorStateCancellationTokenSource(\n\t\t\teditorOrModel,\n\t\t\tCodeEditorStateFlag.Value | CodeEditorStateFlag.Position,\n\t\t\tundefined,\n\t\t\ttoken,\n\t\t);\n\t} else {\n\t\tmodel = editorOrModel;\n\t\tcts = new TextModelCancellationTokenSource(editorOrModel, token);\n\t}\n\n\tlet edits: TextEdit[] | undefined;\n\ttry {\n\t\tconst rawEdits = await provider.provideDocumentFormattingEdits(\n\t\t\tmodel,\n\t\t\tmodel.getFormattingOptions(),\n\t\t\tcts.token,\n\t\t);\n\n\t\tedits = await workerService.computeMoreMinimalEdits(\n\t\t\tmodel.uri,\n\t\t\trawEdits,\n\t\t);\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\treturn true;\n\t\t}\n\t} finally {\n\t\tcts.dispose();\n\t}\n\n\tif (!edits || edits.length === 0) {\n\t\treturn false;\n\t}\n\n\tif (isCodeEditor(editorOrModel)) {\n\t\t// use editor to apply edits\n\t\tFormattingEdit.execute(\n\t\t\teditorOrModel,\n\t\t\tedits,\n\t\t\tmode !== FormattingMode.Silent,\n\t\t);\n\n\t\tif (mode !== FormattingMode.Silent) {\n\t\t\teditorOrModel.revealPositionInCenterIfOutsideViewport(\n\t\t\t\teditorOrModel.getPosition(),\n\t\t\t\tScrollType.Immediate,\n\t\t\t);\n\t\t}\n\t} else {\n\t\t// use model to apply edits\n\t\tconst [{ range }] = edits;\n\t\tconst initialSelection = new Selection(\n\t\t\trange.startLineNumber,\n\t\t\trange.startColumn,\n\t\t\trange.endLineNumber,\n\t\t\trange.endColumn,\n\t\t);\n\t\tmodel.pushEditOperations(\n\t\t\t[initialSelection],\n\t\t\tedits.map((edit) => {\n\t\t\t\treturn {\n\t\t\t\t\ttext: edit.text,\n\t\t\t\t\trange: Range.lift(edit.range),\n\t\t\t\t\tforceMoveMarkers: true,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t(undoEdits) => {\n\t\t\t\tfor (const { range } of undoEdits) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tRange.areIntersectingOrTouching(range, initialSelection)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t);\n\t}\n\taccessibilitySignalService.playSignal(AccessibilitySignal.format, {\n\t\tuserGesture,\n\t});\n\treturn true;\n}\n\nexport async function getDocumentRangeFormattingEditsUntilResult(\n\tworkerService: IEditorWorkerService,\n\tlanguageFeaturesService: ILanguageFeaturesService,\n\tmodel: ITextModel,\n\trange: Range,\n\toptions: FormattingOptions,\n\ttoken: CancellationToken,\n): Promise<TextEdit[] | undefined> {\n\tconst providers =\n\t\tlanguageFeaturesService.documentRangeFormattingEditProvider.ordered(\n\t\t\tmodel,\n\t\t);\n\tfor (const provider of providers) {\n\t\tconst rawEdits = await Promise.resolve(\n\t\t\tprovider.provideDocumentRangeFormattingEdits(\n\t\t\t\tmodel,\n\t\t\t\trange,\n\t\t\t\toptions,\n\t\t\t\ttoken,\n\t\t\t),\n\t\t).catch(onUnexpectedExternalError);\n\t\tif (isNonEmptyArray(rawEdits)) {\n\t\t\treturn await workerService.computeMoreMinimalEdits(\n\t\t\t\tmodel.uri,\n\t\t\t\trawEdits,\n\t\t\t);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport async function getDocumentFormattingEditsUntilResult(\n\tworkerService: IEditorWorkerService,\n\tlanguageFeaturesService: ILanguageFeaturesService,\n\tmodel: ITextModel,\n\toptions: FormattingOptions,\n\ttoken: CancellationToken,\n): Promise<TextEdit[] | undefined> {\n\tconst providers = getRealAndSyntheticDocumentFormattersOrdered(\n\t\tlanguageFeaturesService.documentFormattingEditProvider,\n\t\tlanguageFeaturesService.documentRangeFormattingEditProvider,\n\t\tmodel,\n\t);\n\tfor (const provider of providers) {\n\t\tconst rawEdits = await Promise.resolve(\n\t\t\tprovider.provideDocumentFormattingEdits(model, options, token),\n\t\t).catch(onUnexpectedExternalError);\n\t\tif (isNonEmptyArray(rawEdits)) {\n\t\t\treturn await workerService.computeMoreMinimalEdits(\n\t\t\t\tmodel.uri,\n\t\t\t\trawEdits,\n\t\t\t);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport async function getDocumentFormattingEditsWithSelectedProvider(\n\tworkerService: IEditorWorkerService,\n\tlanguageFeaturesService: ILanguageFeaturesService,\n\teditorOrModel: ITextModel | IActiveCodeEditor,\n\tmode: FormattingMode,\n\ttoken: CancellationToken,\n): Promise<TextEdit[] | undefined> {\n\tconst model = isCodeEditor(editorOrModel)\n\t\t? editorOrModel.getModel()\n\t\t: editorOrModel;\n\tconst provider = getRealAndSyntheticDocumentFormattersOrdered(\n\t\tlanguageFeaturesService.documentFormattingEditProvider,\n\t\tlanguageFeaturesService.documentRangeFormattingEditProvider,\n\t\tmodel,\n\t);\n\tconst selected = await FormattingConflicts.select(\n\t\tprovider,\n\t\tmodel,\n\t\tmode,\n\t\tFormattingKind.File,\n\t);\n\tif (selected) {\n\t\tconst rawEdits = await Promise.resolve(\n\t\t\tselected.provideDocumentFormattingEdits(\n\t\t\t\tmodel,\n\t\t\t\tmodel.getOptions(),\n\t\t\t\ttoken,\n\t\t\t),\n\t\t).catch(onUnexpectedExternalError);\n\t\treturn await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n\t}\n\treturn undefined;\n}\n\nexport function getOnTypeFormattingEdits(\n\tworkerService: IEditorWorkerService,\n\tlanguageFeaturesService: ILanguageFeaturesService,\n\tmodel: ITextModel,\n\tposition: Position,\n\tch: string,\n\toptions: FormattingOptions,\n\ttoken: CancellationToken,\n): Promise<TextEdit[] | null | undefined> {\n\tconst providers =\n\t\tlanguageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n\n\tif (providers.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tif (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\treturn Promise.resolve(\n\t\tproviders[0].provideOnTypeFormattingEdits(\n\t\t\tmodel,\n\t\t\tposition,\n\t\t\tch,\n\t\t\toptions,\n\t\t\ttoken,\n\t\t),\n\t)\n\t\t.catch(onUnexpectedExternalError)\n\t\t.then((edits) => {\n\t\t\treturn workerService.computeMoreMinimalEdits(model.uri, edits);\n\t\t});\n}\n\nCommandsRegistry.registerCommand(\n\t\"_executeFormatRangeProvider\",\n\tasync (accessor, ...args) => {\n\t\tconst [resource, range, options] = args;\n\t\tassertType(URI.isUri(resource));\n\t\tassertType(Range.isIRange(range));\n\n\t\tconst resolverService = accessor.get(ITextModelService);\n\t\tconst workerService = accessor.get(IEditorWorkerService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst reference = await resolverService.createModelReference(resource);\n\t\ttry {\n\t\t\treturn getDocumentRangeFormattingEditsUntilResult(\n\t\t\t\tworkerService,\n\t\t\t\tlanguageFeaturesService,\n\t\t\t\treference.object.textEditorModel,\n\t\t\t\tRange.lift(range),\n\t\t\t\toptions,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t},\n);\n\nCommandsRegistry.registerCommand(\n\t\"_executeFormatDocumentProvider\",\n\tasync (accessor, ...args) => {\n\t\tconst [resource, options] = args;\n\t\tassertType(URI.isUri(resource));\n\n\t\tconst resolverService = accessor.get(ITextModelService);\n\t\tconst workerService = accessor.get(IEditorWorkerService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst reference = await resolverService.createModelReference(resource);\n\t\ttry {\n\t\t\treturn getDocumentFormattingEditsUntilResult(\n\t\t\t\tworkerService,\n\t\t\t\tlanguageFeaturesService,\n\t\t\t\treference.object.textEditorModel,\n\t\t\t\toptions,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t},\n);\n\nCommandsRegistry.registerCommand(\n\t\"_executeFormatOnTypeProvider\",\n\tasync (accessor, ...args) => {\n\t\tconst [resource, position, ch, options] = args;\n\t\tassertType(URI.isUri(resource));\n\t\tassertType(Position.isIPosition(position));\n\t\tassertType(typeof ch === \"string\");\n\n\t\tconst resolverService = accessor.get(ITextModelService);\n\t\tconst workerService = accessor.get(IEditorWorkerService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst reference = await resolverService.createModelReference(resource);\n\t\ttry {\n\t\t\treturn getOnTypeFormattingEdits(\n\t\t\t\tworkerService,\n\t\t\t\tlanguageFeaturesService,\n\t\t\t\treference.object.textEditorModel,\n\t\t\t\tPosition.lift(position),\n\t\t\t\tch,\n\t\t\t\toptions,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": ["model", "FormattingKind", "FormattingMode", "range"]
}
