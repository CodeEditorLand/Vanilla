{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/format/browser/formattingEdit.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EndOfLineSequence } from '../../../common/model.js';\nimport { TextEdit } from '../../../common/languages.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\n\nexport class FormattingEdit {\n\n\tprivate static _handleEolEdits(editor: ICodeEditor, edits: TextEdit[]): ISingleEditOperation[] {\n\t\tlet newEol: EndOfLineSequence | undefined = undefined;\n\t\tconst singleEdits: ISingleEditOperation[] = [];\n\n\t\tfor (const edit of edits) {\n\t\t\tif (typeof edit.eol === 'number') {\n\t\t\t\tnewEol = edit.eol;\n\t\t\t}\n\t\t\tif (edit.range && typeof edit.text === 'string') {\n\t\t\t\tsingleEdits.push(edit);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof newEol === 'number') {\n\t\t\tif (editor.hasModel()) {\n\t\t\t\teditor.getModel().pushEOL(newEol);\n\t\t\t}\n\t\t}\n\n\t\treturn singleEdits;\n\t}\n\n\tprivate static _isFullModelReplaceEdit(editor: ICodeEditor, edit: ISingleEditOperation): boolean {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tconst editRange = model.validateRange(edit.range);\n\t\tconst fullModelRange = model.getFullModelRange();\n\t\treturn fullModelRange.equalsRange(editRange);\n\t}\n\n\tstatic execute(editor: ICodeEditor, _edits: TextEdit[], addUndoStops: boolean) {\n\t\tif (addUndoStops) {\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t\tconst scrollState = StableEditorScrollState.capture(editor);\n\t\tconst edits = FormattingEdit._handleEolEdits(editor, _edits);\n\t\tif (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {\n\t\t\t// We use replace semantics and hope that markers stay put...\n\t\t\teditor.executeEdits('formatEditsCommand', edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));\n\t\t} else {\n\t\t\teditor.executeEdits('formatEditsCommand', edits.map(edit => EditOperation.replaceMove(Range.lift(edit.range), edit.text)));\n\t\t}\n\t\tif (addUndoStops) {\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t\tscrollState.restoreRelativeVerticalPositionOfCursor(editor);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,eAAe,4BAA4B;AACpD,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AAEjC,MAAM,eAAe;AAAA,EAZ5B,OAY4B;AAAA;AAAA;AAAA,EAE3B,OAAe,gBAAgB,QAAqB,OAA2C;AAC9F,QAAI,SAAwC;AAC5C,UAAM,cAAsC,CAAC;AAE7C,eAAW,QAAQ,OAAO;AACzB,UAAI,OAAO,KAAK,QAAQ,UAAU;AACjC,iBAAS,KAAK;AAAA,MACf;AACA,UAAI,KAAK,SAAS,OAAO,KAAK,SAAS,UAAU;AAChD,oBAAY,KAAK,IAAI;AAAA,MACtB;AAAA,IACD;AAEA,QAAI,OAAO,WAAW,UAAU;AAC/B,UAAI,OAAO,SAAS,GAAG;AACtB,eAAO,SAAS,EAAE,QAAQ,MAAM;AAAA,MACjC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,wBAAwB,QAAqB,MAAqC;AAChG,QAAI,CAAC,OAAO,SAAS,GAAG;AACvB,aAAO;AAAA,IACR;AACA,UAAM,QAAQ,OAAO,SAAS;AAC9B,UAAM,YAAY,MAAM,cAAc,KAAK,KAAK;AAChD,UAAM,iBAAiB,MAAM,kBAAkB;AAC/C,WAAO,eAAe,YAAY,SAAS;AAAA,EAC5C;AAAA,EAEA,OAAO,QAAQ,QAAqB,QAAoB,cAAuB;AAC9E,QAAI,cAAc;AACjB,aAAO,aAAa;AAAA,IACrB;AACA,UAAM,cAAc,wBAAwB,QAAQ,MAAM;AAC1D,UAAM,QAAQ,eAAe,gBAAgB,QAAQ,MAAM;AAC3D,QAAI,MAAM,WAAW,KAAK,eAAe,wBAAwB,QAAQ,MAAM,CAAC,CAAC,GAAG;AAEnF,aAAO,aAAa,sBAAsB,MAAM,IAAI,UAAQ,cAAc,QAAQ,MAAM,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;AAAA,IACtH,OAAO;AACN,aAAO,aAAa,sBAAsB,MAAM,IAAI,UAAQ,cAAc,YAAY,MAAM,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;AAAA,IAC1H;AACA,QAAI,cAAc;AACjB,aAAO,aAAa;AAAA,IACrB;AACA,gBAAY,wCAAwC,MAAM;AAAA,EAC3D;AACD;",
  "names": []
}
