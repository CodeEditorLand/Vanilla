{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlayHints/browser/inlayHintsController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tModifierKeyEmitter,\n\tisHTMLElement,\n} from \"../../../../base/browser/dom.js\";\nimport { isNonEmptyArray } from \"../../../../base/common/arrays.js\";\nimport {\n\tRunOnceScheduler,\n\tdisposableTimeout,\n} from \"../../../../base/common/async.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache } from \"../../../../base/common/map.js\";\nimport type { IRange } from \"../../../../base/common/range.js\";\nimport { assertType } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tCommandsRegistry,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport * as colors from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { themeColorFromId } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype IActiveCodeEditor,\n\ttype ICodeEditor,\n\ttype IEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../browser/editorBrowser.js\";\nimport {\n\ttype ClassNameReference,\n\ttype CssProperties,\n\tDynamicCssRules,\n} from \"../../../browser/editorDom.js\";\nimport { StableEditorScrollState } from \"../../../browser/stableEditorScroll.js\";\nimport {\n\tEDITOR_FONT_DEFAULTS,\n\tEditorOption,\n} from \"../../../common/config/editorOptions.js\";\nimport { EditOperation } from \"../../../common/core/editOperation.js\";\nimport type { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type { IEditorContribution } from \"../../../common/editorCommon.js\";\nimport * as languages from \"../../../common/languages.js\";\nimport {\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\tInjectedTextCursorStops,\n\ttype InjectedTextOptions,\n\tTrackedRangeStickiness,\n} from \"../../../common/model.js\";\nimport { ModelDecorationInjectedTextOptions } from \"../../../common/model/textModel.js\";\nimport {\n\ttype IFeatureDebounceInformation,\n\tILanguageFeatureDebounceService,\n} from \"../../../common/services/languageFeatureDebounce.js\";\nimport { ILanguageFeaturesService } from \"../../../common/services/languageFeatures.js\";\nimport { ITextModelService } from \"../../../common/services/resolverService.js\";\nimport {\n\tClickLinkGesture,\n\ttype ClickLinkMouseEvent,\n} from \"../../gotoSymbol/browser/link/clickLinkGesture.js\";\nimport {\n\tInlayHintAnchor,\n\ttype InlayHintItem,\n\tInlayHintsFragments,\n} from \"./inlayHints.js\";\nimport {\n\tgoToDefinitionWithLocation,\n\tshowGoToContextMenu,\n} from \"./inlayHintsLocations.js\";\n\n// --- hint caching service (per session)\n\nclass InlayHintsCache {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _entries = new LRUCache<string, InlayHintItem[]>(50);\n\n\tget(model: ITextModel): InlayHintItem[] | undefined {\n\t\tconst key = InlayHintsCache._key(model);\n\t\treturn this._entries.get(key);\n\t}\n\n\tset(model: ITextModel, value: InlayHintItem[]): void {\n\t\tconst key = InlayHintsCache._key(model);\n\t\tthis._entries.set(key, value);\n\t}\n\n\tprivate static _key(model: ITextModel): string {\n\t\treturn `${model.uri.toString()}/${model.getVersionId()}`;\n\t}\n}\n\ninterface IInlayHintsCache extends InlayHintsCache {}\nconst IInlayHintsCache = createDecorator<IInlayHintsCache>(\"IInlayHintsCache\");\nregisterSingleton(IInlayHintsCache, InlayHintsCache, InstantiationType.Delayed);\n\n// --- rendered label\n\nexport class RenderedInlayHintLabelPart {\n\tconstructor(\n\t\treadonly item: InlayHintItem,\n\t\treadonly index: number,\n\t) {}\n\n\tget part() {\n\t\tconst label = this.item.hint.label;\n\t\tif (typeof label === \"string\") {\n\t\t\treturn { label };\n\t\t} else {\n\t\t\treturn label[this.index];\n\t\t}\n\t}\n}\n\nclass ActiveInlayHintInfo {\n\tconstructor(\n\t\treadonly part: RenderedInlayHintLabelPart,\n\t\treadonly hasTriggerModifier: boolean,\n\t) {}\n}\n\ntype InlayHintDecorationRenderInfo = {\n\titem: InlayHintItem;\n\tdecoration: IModelDeltaDecoration;\n\tclassNameRef: ClassNameReference;\n};\n\nenum RenderMode {\n\tNormal = 0,\n\tInvisible = 1,\n}\n\n// --- controller\n\nexport class InlayHintsController implements IEditorContribution {\n\tstatic readonly ID: string = \"editor.contrib.InlayHints\";\n\n\tprivate static readonly _MAX_DECORATORS = 1500;\n\tprivate static readonly _whitespaceData = {};\n\n\tstatic get(editor: ICodeEditor): InlayHintsController | undefined {\n\t\treturn (\n\t\t\teditor.getContribution<InlayHintsController>(\n\t\t\t\tInlayHintsController.ID,\n\t\t\t) ?? undefined\n\t\t);\n\t}\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _sessionDisposables = new DisposableStore();\n\tprivate readonly _debounceInfo: IFeatureDebounceInformation;\n\tprivate readonly _decorationsMetadata = new Map<\n\t\tstring,\n\t\tInlayHintDecorationRenderInfo\n\t>();\n\tprivate readonly _ruleFactory = new DynamicCssRules(this._editor);\n\n\tprivate _cursorInfo?: { position: Position; notEarlierThan: number };\n\tprivate _activeRenderMode = RenderMode.Normal;\n\tprivate _activeInlayHintPart?: ActiveInlayHintInfo;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ILanguageFeaturesService\n\t\tprivate readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageFeatureDebounceService\n\t\t_featureDebounce: ILanguageFeatureDebounceService,\n\t\t@IInlayHintsCache private readonly _inlayHintsCache: IInlayHintsCache,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instaService: IInstantiationService,\n\t) {\n\t\tthis._debounceInfo = _featureDebounce.for(\n\t\t\t_languageFeaturesService.inlayHintsProvider,\n\t\t\t\"InlayHint\",\n\t\t\t{ min: 25 },\n\t\t);\n\t\tthis._disposables.add(\n\t\t\t_languageFeaturesService.inlayHintsProvider.onDidChange(() =>\n\t\t\t\tthis._update(),\n\t\t\t),\n\t\t);\n\t\tthis._disposables.add(_editor.onDidChangeModel(() => this._update()));\n\t\tthis._disposables.add(\n\t\t\t_editor.onDidChangeModelLanguage(() => this._update()),\n\t\t);\n\t\tthis._disposables.add(\n\t\t\t_editor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.hasChanged(EditorOption.inlayHints)) {\n\t\t\t\t\tthis._update();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._update();\n\t}\n\n\tdispose(): void {\n\t\tthis._sessionDisposables.dispose();\n\t\tthis._removeAllDecorations();\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tthis._sessionDisposables.clear();\n\t\tthis._removeAllDecorations();\n\n\t\tconst options = this._editor.getOption(EditorOption.inlayHints);\n\t\tif (options.enabled === \"off\") {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tif (\n\t\t\t!model ||\n\t\t\t!this._languageFeaturesService.inlayHintsProvider.has(model)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.enabled === \"on\") {\n\t\t\t// different \"on\" modes: always\n\t\t\tthis._activeRenderMode = RenderMode.Normal;\n\t\t} else {\n\t\t\t// different \"on\" modes: offUnlessPressed, or onUnlessPressed\n\t\t\tlet defaultMode: RenderMode;\n\t\t\tlet altMode: RenderMode;\n\t\t\tif (options.enabled === \"onUnlessPressed\") {\n\t\t\t\tdefaultMode = RenderMode.Normal;\n\t\t\t\taltMode = RenderMode.Invisible;\n\t\t\t} else {\n\t\t\t\tdefaultMode = RenderMode.Invisible;\n\t\t\t\taltMode = RenderMode.Normal;\n\t\t\t}\n\t\t\tthis._activeRenderMode = defaultMode;\n\n\t\t\tthis._sessionDisposables.add(\n\t\t\t\tModifierKeyEmitter.getInstance().event((e) => {\n\t\t\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst newRenderMode =\n\t\t\t\t\t\te.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey)\n\t\t\t\t\t\t\t? altMode\n\t\t\t\t\t\t\t: defaultMode;\n\t\t\t\t\tif (newRenderMode !== this._activeRenderMode) {\n\t\t\t\t\t\tthis._activeRenderMode = newRenderMode;\n\t\t\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\t\t\tconst copies =\n\t\t\t\t\t\t\tthis._copyInlayHintsWithCurrentAnchor(model);\n\t\t\t\t\t\tthis._updateHintsDecorators(\n\t\t\t\t\t\t\t[model.getFullModelRange()],\n\t\t\t\t\t\t\tcopies,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tscheduler.schedule(0);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\t// iff possible, quickly update from cache\n\t\tconst cached = this._inlayHintsCache.get(model);\n\t\tif (cached) {\n\t\t\tthis._updateHintsDecorators([model.getFullModelRange()], cached);\n\t\t}\n\t\tthis._sessionDisposables.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\t// cache items when switching files etc\n\t\t\t\tif (!model.isDisposed()) {\n\t\t\t\t\tthis._cacheHintsForFastRestore(model);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tlet cts: CancellationTokenSource | undefined;\n\t\tconst watchedProviders = new Set<languages.InlayHintsProvider>();\n\n\t\tconst scheduler = new RunOnceScheduler(async () => {\n\t\t\tconst t1 = Date.now();\n\n\t\t\tcts?.dispose(true);\n\t\t\tcts = new CancellationTokenSource();\n\t\t\tconst listener = model.onWillDispose(() => cts?.cancel());\n\n\t\t\ttry {\n\t\t\t\tconst myToken = cts.token;\n\t\t\t\tconst inlayHints = await InlayHintsFragments.create(\n\t\t\t\t\tthis._languageFeaturesService.inlayHintsProvider,\n\t\t\t\t\tmodel,\n\t\t\t\t\tthis._getHintsRanges(),\n\t\t\t\t\tmyToken,\n\t\t\t\t);\n\t\t\t\tscheduler.delay = this._debounceInfo.update(\n\t\t\t\t\tmodel,\n\t\t\t\t\tDate.now() - t1,\n\t\t\t\t);\n\t\t\t\tif (myToken.isCancellationRequested) {\n\t\t\t\t\tinlayHints.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// listen to provider changes\n\t\t\t\tfor (const provider of inlayHints.provider) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof provider.onDidChangeInlayHints === \"function\" &&\n\t\t\t\t\t\t!watchedProviders.has(provider)\n\t\t\t\t\t) {\n\t\t\t\t\t\twatchedProviders.add(provider);\n\t\t\t\t\t\tthis._sessionDisposables.add(\n\t\t\t\t\t\t\tprovider.onDidChangeInlayHints(() => {\n\t\t\t\t\t\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\t\t\t\t\t\t// ignore event when request is already scheduled\n\t\t\t\t\t\t\t\t\tscheduler.schedule();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._sessionDisposables.add(inlayHints);\n\t\t\t\tthis._updateHintsDecorators(\n\t\t\t\t\tinlayHints.ranges,\n\t\t\t\t\tinlayHints.items,\n\t\t\t\t);\n\t\t\t\tthis._cacheHintsForFastRestore(model);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t} finally {\n\t\t\t\tcts.dispose();\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t}, this._debounceInfo.get(model));\n\n\t\tthis._sessionDisposables.add(scheduler);\n\t\tthis._sessionDisposables.add(toDisposable(() => cts?.dispose(true)));\n\t\tscheduler.schedule(0);\n\n\t\tthis._sessionDisposables.add(\n\t\t\tthis._editor.onDidScrollChange((e) => {\n\t\t\t\t// update when scroll position changes\n\t\t\t\t// uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n\t\t\t\t// typing or due to \"actual\" scrolling\n\t\t\t\tif (e.scrollTopChanged || !scheduler.isScheduled()) {\n\t\t\t\t\tscheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst cursor = this._sessionDisposables.add(new MutableDisposable());\n\t\tthis._sessionDisposables.add(\n\t\t\tthis._editor.onDidChangeModelContent((e) => {\n\t\t\t\tcts?.cancel();\n\n\t\t\t\t// mark current cursor position and time after which the whole can be updated/redrawn\n\t\t\t\tconst delay = Math.max(scheduler.delay, 800);\n\t\t\t\tthis._cursorInfo = {\n\t\t\t\t\tposition: this._editor.getPosition()!,\n\t\t\t\t\tnotEarlierThan: Date.now() + delay,\n\t\t\t\t};\n\t\t\t\tcursor.value = disposableTimeout(\n\t\t\t\t\t() => scheduler.schedule(0),\n\t\t\t\t\tdelay,\n\t\t\t\t);\n\n\t\t\t\tscheduler.schedule();\n\t\t\t}),\n\t\t);\n\n\t\tthis._sessionDisposables.add(\n\t\t\tthis._editor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.hasChanged(EditorOption.inlayHints)) {\n\t\t\t\t\tscheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// mouse gestures\n\t\tthis._sessionDisposables.add(\n\t\t\tthis._installDblClickGesture(() => scheduler.schedule(0)),\n\t\t);\n\t\tthis._sessionDisposables.add(this._installLinkGesture());\n\t\tthis._sessionDisposables.add(this._installContextMenu());\n\t}\n\n\tprivate _installLinkGesture(): IDisposable {\n\t\tconst store = new DisposableStore();\n\t\tconst gesture = store.add(new ClickLinkGesture(this._editor));\n\n\t\t// let removeHighlight = () => { };\n\n\t\tconst sessionStore = new DisposableStore();\n\t\tstore.add(sessionStore);\n\n\t\tstore.add(\n\t\t\tgesture.onMouseMoveOrRelevantKeyDown((e) => {\n\t\t\t\tconst [mouseEvent] = e;\n\t\t\t\tconst labelPart = this._getInlayHintLabelPart(mouseEvent);\n\t\t\t\tconst model = this._editor.getModel();\n\n\t\t\t\tif (!labelPart || !model) {\n\t\t\t\t\tsessionStore.clear();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// resolve the item\n\t\t\t\tconst cts = new CancellationTokenSource();\n\t\t\t\tsessionStore.add(toDisposable(() => cts.dispose(true)));\n\t\t\t\tlabelPart.item.resolve(cts.token);\n\n\t\t\t\t// render link => when the modifier is pressed and when there is a command or location\n\t\t\t\tthis._activeInlayHintPart =\n\t\t\t\t\tlabelPart.part.command || labelPart.part.location\n\t\t\t\t\t\t? new ActiveInlayHintInfo(\n\t\t\t\t\t\t\t\tlabelPart,\n\t\t\t\t\t\t\t\tmouseEvent.hasTriggerModifier,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: undefined;\n\n\t\t\t\tconst lineNumber = model.validatePosition(\n\t\t\t\t\tlabelPart.item.hint.position,\n\t\t\t\t).lineNumber;\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tmodel.getLineMaxColumn(lineNumber),\n\t\t\t\t);\n\t\t\t\tconst lineHints = this._getInlineHintsForRange(range);\n\t\t\t\tthis._updateHintsDecorators([range], lineHints);\n\t\t\t\tsessionStore.add(\n\t\t\t\t\ttoDisposable(() => {\n\t\t\t\t\t\tthis._activeInlayHintPart = undefined;\n\t\t\t\t\t\tthis._updateHintsDecorators([range], lineHints);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tstore.add(gesture.onCancel(() => sessionStore.clear()));\n\t\tstore.add(\n\t\t\tgesture.onExecute(async (e) => {\n\t\t\t\tconst label = this._getInlayHintLabelPart(e);\n\t\t\t\tif (label) {\n\t\t\t\t\tconst part = label.part;\n\t\t\t\t\tif (part.location) {\n\t\t\t\t\t\t// location -> execute go to def\n\t\t\t\t\t\tthis._instaService.invokeFunction(\n\t\t\t\t\t\t\tgoToDefinitionWithLocation,\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\tthis._editor as IActiveCodeEditor,\n\t\t\t\t\t\t\tpart.location,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (languages.Command.is(part.command)) {\n\t\t\t\t\t\t// command -> execute it\n\t\t\t\t\t\tawait this._invokeCommand(part.command, label.item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\treturn store;\n\t}\n\n\tprivate _getInlineHintsForRange(range: Range) {\n\t\tconst lineHints = new Set<InlayHintItem>();\n\t\tfor (const data of this._decorationsMetadata.values()) {\n\t\t\tif (range.containsRange(data.item.anchor.range)) {\n\t\t\t\tlineHints.add(data.item);\n\t\t\t}\n\t\t}\n\t\treturn Array.from(lineHints);\n\t}\n\n\tprivate _installDblClickGesture(updateInlayHints: Function): IDisposable {\n\t\treturn this._editor.onMouseUp(async (e) => {\n\t\t\tif (e.event.detail !== 2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst part = this._getInlayHintLabelPart(e);\n\t\t\tif (!part) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\te.event.preventDefault();\n\t\t\tawait part.item.resolve(CancellationToken.None);\n\t\t\tif (isNonEmptyArray(part.item.hint.textEdits)) {\n\t\t\t\tconst edits = part.item.hint.textEdits.map((edit) =>\n\t\t\t\t\tEditOperation.replace(Range.lift(edit.range), edit.text),\n\t\t\t\t);\n\t\t\t\tthis._editor.executeEdits(\"inlayHint.default\", edits);\n\t\t\t\tupdateInlayHints();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _installContextMenu(): IDisposable {\n\t\treturn this._editor.onContextMenu(async (e) => {\n\t\t\tif (!isHTMLElement(e.event.target)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst part = this._getInlayHintLabelPart(e);\n\t\t\tif (part) {\n\t\t\t\tawait this._instaService.invokeFunction(\n\t\t\t\t\tshowGoToContextMenu,\n\t\t\t\t\tthis._editor,\n\t\t\t\t\te.event.target,\n\t\t\t\t\tpart,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getInlayHintLabelPart(\n\t\te: IEditorMouseEvent | ClickLinkMouseEvent,\n\t): RenderedInlayHintLabelPart | undefined {\n\t\tif (e.target.type !== MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst options = e.target.detail.injectedText?.options;\n\t\tif (\n\t\t\toptions instanceof ModelDecorationInjectedTextOptions &&\n\t\t\toptions?.attachedData instanceof RenderedInlayHintLabelPart\n\t\t) {\n\t\t\treturn options.attachedData;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _invokeCommand(\n\t\tcommand: languages.Command,\n\t\titem: InlayHintItem,\n\t) {\n\t\ttry {\n\t\t\tawait this._commandService.executeCommand(\n\t\t\t\tcommand.id,\n\t\t\t\t...(command.arguments ?? []),\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tsource: item.provider.displayName,\n\t\t\t\tmessage: err,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _cacheHintsForFastRestore(model: ITextModel): void {\n\t\tconst hints = this._copyInlayHintsWithCurrentAnchor(model);\n\t\tthis._inlayHintsCache.set(model, hints);\n\t}\n\n\t// return inlay hints but with an anchor that reflects \"updates\"\n\t// that happened after receiving them, e.g adding new lines before a hint\n\tprivate _copyInlayHintsWithCurrentAnchor(\n\t\tmodel: ITextModel,\n\t): InlayHintItem[] {\n\t\tconst items = new Map<InlayHintItem, InlayHintItem>();\n\t\tfor (const [id, obj] of this._decorationsMetadata) {\n\t\t\tif (items.has(obj.item)) {\n\t\t\t\t// an inlay item can be rendered as multiple decorations\n\t\t\t\t// but they will all uses the same range\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst range = model.getDecorationRange(id);\n\t\t\tif (range) {\n\t\t\t\t// update range with whatever the editor has tweaked it to\n\t\t\t\tconst anchor = new InlayHintAnchor(\n\t\t\t\t\trange,\n\t\t\t\t\tobj.item.anchor.direction,\n\t\t\t\t);\n\t\t\t\tconst copy = obj.item.with({ anchor });\n\t\t\t\titems.set(obj.item, copy);\n\t\t\t}\n\t\t}\n\t\treturn Array.from(items.values());\n\t}\n\n\tprivate _getHintsRanges(): Range[] {\n\t\tconst extra = 30;\n\t\tconst model = this._editor.getModel()!;\n\t\tconst visibleRanges =\n\t\t\tthis._editor.getVisibleRangesPlusViewportAboveBelow();\n\t\tconst result: Range[] = [];\n\t\tfor (const range of visibleRanges.sort(\n\t\t\tRange.compareRangesUsingStarts,\n\t\t)) {\n\t\t\tconst extendedRange = model.validateRange(\n\t\t\t\tnew Range(\n\t\t\t\t\trange.startLineNumber - extra,\n\t\t\t\t\trange.startColumn,\n\t\t\t\t\trange.endLineNumber + extra,\n\t\t\t\t\trange.endColumn,\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (\n\t\t\t\tresult.length === 0 ||\n\t\t\t\t!Range.areIntersectingOrTouching(\n\t\t\t\t\tresult[result.length - 1],\n\t\t\t\t\textendedRange,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tresult.push(extendedRange);\n\t\t\t} else {\n\t\t\t\tresult[result.length - 1] = Range.plusRange(\n\t\t\t\t\tresult[result.length - 1],\n\t\t\t\t\textendedRange,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _updateHintsDecorators(\n\t\tranges: readonly Range[],\n\t\titems: readonly InlayHintItem[],\n\t): void {\n\t\tconst itemFixedLengths = new Map<InlayHintItem, number>();\n\n\t\tif (\n\t\t\tthis._cursorInfo &&\n\t\t\tthis._cursorInfo.notEarlierThan > Date.now() &&\n\t\t\tranges.some((range) =>\n\t\t\t\trange.containsPosition(this._cursorInfo!.position),\n\t\t\t)\n\t\t) {\n\t\t\t// collect inlay hints that are on the same line and before the cursor. Those \"old\" hints\n\t\t\t// define fixed lengths so that the cursor does not jump back and worth while typing.\n\t\t\tconst { position } = this._cursorInfo;\n\t\t\tthis._cursorInfo = undefined;\n\n\t\t\tconst lengths = new Map<InlayHintItem, number>();\n\n\t\t\tfor (const deco of this._editor.getLineDecorations(\n\t\t\t\tposition.lineNumber,\n\t\t\t) ?? []) {\n\t\t\t\tconst data = this._decorationsMetadata.get(deco.id);\n\t\t\t\tif (deco.range.startColumn > position.column) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst opts =\n\t\t\t\t\tdata?.decoration.options[data.item.anchor.direction];\n\t\t\t\tif (\n\t\t\t\t\topts &&\n\t\t\t\t\topts.attachedData !== InlayHintsController._whitespaceData\n\t\t\t\t) {\n\t\t\t\t\tconst len = lengths.get(data.item) ?? 0;\n\t\t\t\t\tlengths.set(data.item, len + opts.content.length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// on the cursor line and before the cursor-column\n\t\t\tconst newItemsWithFixedLength = items.filter(\n\t\t\t\t(item) =>\n\t\t\t\t\titem.anchor.range.startLineNumber === position.lineNumber &&\n\t\t\t\t\titem.anchor.range.endColumn <= position.column,\n\t\t\t);\n\t\t\tconst fixedLengths = Array.from(lengths.values());\n\n\t\t\t// match up fixed lengths with items and distribute the remaining lengths to the last item\n\t\t\tlet lastItem: InlayHintItem | undefined;\n\t\t\twhile (true) {\n\t\t\t\tconst targetItem = newItemsWithFixedLength.shift();\n\t\t\t\tconst fixedLength = fixedLengths.shift();\n\n\t\t\t\tif (!fixedLength && !targetItem) {\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\n\t\t\t\tif (targetItem) {\n\t\t\t\t\titemFixedLengths.set(targetItem, fixedLength ?? 0);\n\t\t\t\t\tlastItem = targetItem;\n\t\t\t\t} else if (lastItem && fixedLength) {\n\t\t\t\t\t// still lengths but no more item. give it all to the last\n\t\t\t\t\tlet len = itemFixedLengths.get(lastItem)!;\n\t\t\t\t\tlen += fixedLength;\n\t\t\t\t\tlen += fixedLengths.reduce((p, c) => p + c, 0);\n\t\t\t\t\tfixedLengths.length = 0;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// utils to collect/create injected text decorations\n\t\tconst newDecorationsData: InlayHintDecorationRenderInfo[] = [];\n\t\tconst addInjectedText = (\n\t\t\titem: InlayHintItem,\n\t\t\tref: ClassNameReference,\n\t\t\tcontent: string,\n\t\t\tcursorStops: InjectedTextCursorStops,\n\t\t\tattachedData?: RenderedInlayHintLabelPart | object,\n\t\t): void => {\n\t\t\tconst opts: InjectedTextOptions = {\n\t\t\t\tcontent,\n\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\tinlineClassName: ref.className,\n\t\t\t\tcursorStops,\n\t\t\t\tattachedData,\n\t\t\t};\n\t\t\tnewDecorationsData.push({\n\t\t\t\titem,\n\t\t\t\tclassNameRef: ref,\n\t\t\t\tdecoration: {\n\t\t\t\t\trange: item.anchor.range,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t// className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n\t\t\t\t\t\tdescription: \"InlayHint\",\n\t\t\t\t\t\tshowIfCollapsed: item.anchor.range.isEmpty(), // \"original\" range is empty\n\t\t\t\t\t\tcollapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n\t\t\t\t\t\tstickiness:\n\t\t\t\t\t\t\tTrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t\t\t\t\t\t[item.anchor.direction]:\n\t\t\t\t\t\t\tthis._activeRenderMode === RenderMode.Normal\n\t\t\t\t\t\t\t\t? opts\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tconst addInjectedWhitespace = (\n\t\t\titem: InlayHintItem,\n\t\t\tisLast: boolean,\n\t\t): void => {\n\t\t\tconst marginRule = this._ruleFactory.createClassNameRef({\n\t\t\t\twidth: `${(fontSize / 3) | 0}px`,\n\t\t\t\tdisplay: \"inline-block\",\n\t\t\t});\n\t\t\taddInjectedText(\n\t\t\t\titem,\n\t\t\t\tmarginRule,\n\t\t\t\t\"\\u200a\",\n\t\t\t\tisLast\n\t\t\t\t\t? InjectedTextCursorStops.Right\n\t\t\t\t\t: InjectedTextCursorStops.None,\n\t\t\t\tInlayHintsController._whitespaceData,\n\t\t\t);\n\t\t};\n\n\t\t//\n\t\tconst { fontSize, fontFamily, padding, isUniform } =\n\t\t\tthis._getLayoutInfo();\n\t\tconst maxLength = this._editor.getOption(\n\t\t\tEditorOption.inlayHints,\n\t\t).maximumLength;\n\t\tconst fontFamilyVar = \"--code-editorInlayHintsFontFamily\";\n\t\tthis._editor\n\t\t\t.getContainerDomNode()\n\t\t\t.style.setProperty(fontFamilyVar, fontFamily);\n\n\t\ttype ILineInfo = { line: number; totalLen: number };\n\t\tlet currentLineInfo: ILineInfo = { line: 0, totalLen: 0 };\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst item = items[i];\n\n\t\t\tif (currentLineInfo.line !== item.anchor.range.startLineNumber) {\n\t\t\t\tcurrentLineInfo = {\n\t\t\t\t\tline: item.anchor.range.startLineNumber,\n\t\t\t\t\ttotalLen: 0,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (maxLength && currentLineInfo.totalLen > maxLength) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// whitespace leading the actual label\n\t\t\tif (item.hint.paddingLeft) {\n\t\t\t\taddInjectedWhitespace(item, false);\n\t\t\t}\n\n\t\t\t// the label with its parts\n\t\t\tconst parts: languages.InlayHintLabelPart[] =\n\t\t\t\ttypeof item.hint.label === \"string\"\n\t\t\t\t\t? [{ label: item.hint.label }]\n\t\t\t\t\t: item.hint.label;\n\n\t\t\tconst itemFixedLength = itemFixedLengths.get(item);\n\t\t\tlet itemActualLength = 0;\n\n\t\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tconst isFirst = i === 0;\n\t\t\t\tconst isLast = i === parts.length - 1;\n\n\t\t\t\tconst cssProperties: CssProperties = {\n\t\t\t\t\tfontSize: `${fontSize}px`,\n\t\t\t\t\tfontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n\t\t\t\t\tverticalAlign: isUniform ? \"baseline\" : \"middle\",\n\t\t\t\t\tunicodeBidi: \"isolate\",\n\t\t\t\t};\n\n\t\t\t\tif (isNonEmptyArray(item.hint.textEdits)) {\n\t\t\t\t\tcssProperties.cursor = \"default\";\n\t\t\t\t}\n\n\t\t\t\tthis._fillInColors(cssProperties, item.hint);\n\n\t\t\t\tif (\n\t\t\t\t\t(part.command || part.location) &&\n\t\t\t\t\tthis._activeInlayHintPart?.part.item === item &&\n\t\t\t\t\tthis._activeInlayHintPart.part.index === i\n\t\t\t\t) {\n\t\t\t\t\t// active link!\n\t\t\t\t\tcssProperties.textDecoration = \"underline\";\n\t\t\t\t\tif (this._activeInlayHintPart.hasTriggerModifier) {\n\t\t\t\t\t\tcssProperties.color = themeColorFromId(\n\t\t\t\t\t\t\tcolors.editorActiveLinkForeground,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcssProperties.cursor = \"pointer\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet textlabel = part.label;\n\t\t\t\tcurrentLineInfo.totalLen += textlabel.length;\n\t\t\t\tlet tooLong = false;\n\t\t\t\tconst over =\n\t\t\t\t\tmaxLength !== 0 ? currentLineInfo.totalLen - maxLength : 0;\n\t\t\t\tif (over > 0) {\n\t\t\t\t\ttextlabel = textlabel.slice(0, -over) + \"\u2026\";\n\t\t\t\t\ttooLong = true;\n\t\t\t\t}\n\n\t\t\t\titemActualLength += textlabel.length;\n\n\t\t\t\tconst overFixedLength =\n\t\t\t\t\titemFixedLength !== undefined\n\t\t\t\t\t\t? itemActualLength - itemFixedLength\n\t\t\t\t\t\t: 0;\n\t\t\t\tif (overFixedLength > 0) {\n\t\t\t\t\t// longer than fixed length, trim\n\t\t\t\t\titemActualLength -= overFixedLength;\n\t\t\t\t\ttextlabel =\n\t\t\t\t\t\ttextlabel.slice(0, -(1 + overFixedLength)) + \"\u2026\";\n\t\t\t\t\ttooLong = true;\n\t\t\t\t}\n\n\t\t\t\tif (padding) {\n\t\t\t\t\tif (isFirst && (isLast || tooLong)) {\n\t\t\t\t\t\t// only element\n\t\t\t\t\t\tcssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n\t\t\t\t\t\tcssProperties.borderRadius = `${(fontSize / 4) | 0}px`;\n\t\t\t\t\t} else if (isFirst) {\n\t\t\t\t\t\t// first element\n\t\t\t\t\t\tcssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n\t\t\t\t\t\tcssProperties.borderRadius = `${(fontSize / 4) | 0}px 0 0 ${(fontSize / 4) | 0}px`;\n\t\t\t\t\t} else if (isLast || tooLong) {\n\t\t\t\t\t\t// last element\n\t\t\t\t\t\tcssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n\t\t\t\t\t\tcssProperties.borderRadius = `0 ${(fontSize / 4) | 0}px ${(fontSize / 4) | 0}px 0`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcssProperties.padding = `1px 0 1px 0`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\taddInjectedText(\n\t\t\t\t\titem,\n\t\t\t\t\tthis._ruleFactory.createClassNameRef(cssProperties),\n\t\t\t\t\tfixSpace(textlabel),\n\t\t\t\t\tisLast && !item.hint.paddingRight\n\t\t\t\t\t\t? InjectedTextCursorStops.Right\n\t\t\t\t\t\t: InjectedTextCursorStops.None,\n\t\t\t\t\tnew RenderedInlayHintLabelPart(item, i),\n\t\t\t\t);\n\n\t\t\t\tif (tooLong) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\titemFixedLength !== undefined &&\n\t\t\t\titemActualLength < itemFixedLength\n\t\t\t) {\n\t\t\t\t// shorter than fixed length, pad\n\t\t\t\tconst pad = itemFixedLength - itemActualLength;\n\t\t\t\taddInjectedText(\n\t\t\t\t\titem,\n\t\t\t\t\tthis._ruleFactory.createClassNameRef({}),\n\t\t\t\t\t\"\\u200a\".repeat(pad),\n\t\t\t\t\tInjectedTextCursorStops.None,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// whitespace trailing the actual label\n\t\t\tif (item.hint.paddingRight) {\n\t\t\t\taddInjectedWhitespace(item, true);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnewDecorationsData.length > InlayHintsController._MAX_DECORATORS\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// collect all decoration ids that are affected by the ranges\n\t\t// and only update those decorations\n\t\tconst decorationIdsToReplace: string[] = [];\n\t\tfor (const [id, metadata] of this._decorationsMetadata) {\n\t\t\tconst range = this._editor.getModel()?.getDecorationRange(id);\n\t\t\tif (range && ranges.some((r) => r.containsRange(range))) {\n\t\t\t\tdecorationIdsToReplace.push(id);\n\t\t\t\tmetadata.classNameRef.dispose();\n\t\t\t\tthis._decorationsMetadata.delete(id);\n\t\t\t}\n\t\t}\n\n\t\tconst scrollState = StableEditorScrollState.capture(this._editor);\n\n\t\tthis._editor.changeDecorations((accessor) => {\n\t\t\tconst newDecorationIds = accessor.deltaDecorations(\n\t\t\t\tdecorationIdsToReplace,\n\t\t\t\tnewDecorationsData.map((d) => d.decoration),\n\t\t\t);\n\t\t\tfor (let i = 0; i < newDecorationIds.length; i++) {\n\t\t\t\tconst data = newDecorationsData[i];\n\t\t\t\tthis._decorationsMetadata.set(newDecorationIds[i], data);\n\t\t\t}\n\t\t});\n\n\t\tscrollState.restore(this._editor);\n\t}\n\n\tprivate _fillInColors(\n\t\tprops: CssProperties,\n\t\thint: languages.InlayHint,\n\t): void {\n\t\tif (hint.kind === languages.InlayHintKind.Parameter) {\n\t\t\tprops.backgroundColor = themeColorFromId(\n\t\t\t\tcolors.editorInlayHintParameterBackground,\n\t\t\t);\n\t\t\tprops.color = themeColorFromId(\n\t\t\t\tcolors.editorInlayHintParameterForeground,\n\t\t\t);\n\t\t} else if (hint.kind === languages.InlayHintKind.Type) {\n\t\t\tprops.backgroundColor = themeColorFromId(\n\t\t\t\tcolors.editorInlayHintTypeBackground,\n\t\t\t);\n\t\t\tprops.color = themeColorFromId(\n\t\t\t\tcolors.editorInlayHintTypeForeground,\n\t\t\t);\n\t\t} else {\n\t\t\tprops.backgroundColor = themeColorFromId(\n\t\t\t\tcolors.editorInlayHintBackground,\n\t\t\t);\n\t\t\tprops.color = themeColorFromId(colors.editorInlayHintForeground);\n\t\t}\n\t}\n\n\tprivate _getLayoutInfo() {\n\t\tconst options = this._editor.getOption(EditorOption.inlayHints);\n\t\tconst padding = options.padding;\n\n\t\tconst editorFontSize = this._editor.getOption(EditorOption.fontSize);\n\t\tconst editorFontFamily = this._editor.getOption(\n\t\t\tEditorOption.fontFamily,\n\t\t);\n\n\t\tlet fontSize = options.fontSize;\n\t\tif (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n\t\t\tfontSize = editorFontSize;\n\t\t}\n\n\t\tconst fontFamily = options.fontFamily || editorFontFamily;\n\n\t\tconst isUniform =\n\t\t\t!padding &&\n\t\t\tfontFamily === editorFontFamily &&\n\t\t\tfontSize === editorFontSize;\n\n\t\treturn { fontSize, fontFamily, padding, isUniform };\n\t}\n\n\tprivate _removeAllDecorations(): void {\n\t\tthis._editor.removeDecorations(\n\t\t\tArray.from(this._decorationsMetadata.keys()),\n\t\t);\n\t\tfor (const obj of this._decorationsMetadata.values()) {\n\t\t\tobj.classNameRef.dispose();\n\t\t}\n\t\tthis._decorationsMetadata.clear();\n\t}\n\n\t// --- accessibility\n\n\tgetInlayHintsForLine(line: number): InlayHintItem[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\t\tconst set = new Set<languages.InlayHint>();\n\t\tconst result: InlayHintItem[] = [];\n\t\tfor (const deco of this._editor.getLineDecorations(line)) {\n\t\t\tconst data = this._decorationsMetadata.get(deco.id);\n\t\t\tif (data && !set.has(data.item.hint)) {\n\t\t\t\tset.add(data.item.hint);\n\t\t\t\tresult.push(data.item);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str: string): string {\n\tconst noBreakWhitespace = \"\\xa0\";\n\treturn str.replace(/[ \\t]/g, noBreakWhitespace);\n}\n\nCommandsRegistry.registerCommand(\n\t\"_executeInlayHintProvider\",\n\tasync (\n\t\taccessor,\n\t\t...args: [URI, IRange]\n\t): Promise<languages.InlayHint[]> => {\n\t\tconst [uri, range] = args;\n\t\tassertType(URI.isUri(uri));\n\t\tassertType(Range.isIRange(range));\n\n\t\tconst { inlayHintsProvider } = accessor.get(ILanguageFeaturesService);\n\t\tconst ref = await accessor\n\t\t\t.get(ITextModelService)\n\t\t\t.createModelReference(uri);\n\t\ttry {\n\t\t\tconst model = await InlayHintsFragments.create(\n\t\t\t\tinlayHintsProvider,\n\t\t\t\tref.object.textEditorModel,\n\t\t\t\t[Range.lift(range)],\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t\tconst result = model.items.map((i) => i.hint);\n\t\t\tsetTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tref.dispose();\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": ["RenderMode", "model", "i"]
}
