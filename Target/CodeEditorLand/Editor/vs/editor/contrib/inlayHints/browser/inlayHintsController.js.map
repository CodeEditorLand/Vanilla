{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlayHints/browser/inlayHintsController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isHTMLElement, ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { disposableTimeout, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { IRange } from '../../../../base/common/range.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IActiveCodeEditor, ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser.js';\nimport { ClassNameReference, CssProperties, DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorOption, EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport * as languages from '../../../common/languages.js';\nimport { IModelDeltaDecoration, InjectedTextCursorStops, InjectedTextOptions, ITextModel, TrackedRangeStickiness } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { IFeatureDebounceInformation, ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture, ClickLinkMouseEvent } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintItem, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\n\n// --- hint caching service (per session)\n\nclass InlayHintsCache {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _entries = new LRUCache<string, InlayHintItem[]>(50);\n\n\tget(model: ITextModel): InlayHintItem[] | undefined {\n\t\tconst key = InlayHintsCache._key(model);\n\t\treturn this._entries.get(key);\n\t}\n\n\tset(model: ITextModel, value: InlayHintItem[]): void {\n\t\tconst key = InlayHintsCache._key(model);\n\t\tthis._entries.set(key, value);\n\t}\n\n\tprivate static _key(model: ITextModel): string {\n\t\treturn `${model.uri.toString()}/${model.getVersionId()}`;\n\t}\n}\n\ninterface IInlayHintsCache extends InlayHintsCache { }\nconst IInlayHintsCache = createDecorator<IInlayHintsCache>('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, InstantiationType.Delayed);\n\n// --- rendered label\n\nexport class RenderedInlayHintLabelPart {\n\tconstructor(readonly item: InlayHintItem, readonly index: number) { }\n\n\tget part() {\n\t\tconst label = this.item.hint.label;\n\t\tif (typeof label === 'string') {\n\t\t\treturn { label };\n\t\t} else {\n\t\t\treturn label[this.index];\n\t\t}\n\t}\n}\n\nclass ActiveInlayHintInfo {\n\tconstructor(readonly part: RenderedInlayHintLabelPart, readonly hasTriggerModifier: boolean) { }\n}\n\ntype InlayHintDecorationRenderInfo = {\n\titem: InlayHintItem;\n\tdecoration: IModelDeltaDecoration;\n\tclassNameRef: ClassNameReference;\n};\n\nconst enum RenderMode {\n\tNormal,\n\tInvisible\n}\n\n// --- controller\n\nexport class InlayHintsController implements IEditorContribution {\n\n\tstatic readonly ID: string = 'editor.contrib.InlayHints';\n\n\tprivate static readonly _MAX_DECORATORS = 1500;\n\tprivate static readonly _whitespaceData = {};\n\n\tstatic get(editor: ICodeEditor): InlayHintsController | undefined {\n\t\treturn editor.getContribution<InlayHintsController>(InlayHintsController.ID) ?? undefined;\n\t}\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _sessionDisposables = new DisposableStore();\n\tprivate readonly _debounceInfo: IFeatureDebounceInformation;\n\tprivate readonly _decorationsMetadata = new Map<string, InlayHintDecorationRenderInfo>();\n\tprivate readonly _ruleFactory = new DynamicCssRules(this._editor);\n\n\tprivate _cursorInfo?: { position: Position; notEarlierThan: number };\n\tprivate _activeRenderMode = RenderMode.Normal;\n\tprivate _activeInlayHintPart?: ActiveInlayHintInfo;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageFeatureDebounceService _featureDebounce: ILanguageFeatureDebounceService,\n\t\t@IInlayHintsCache private readonly _inlayHintsCache: IInlayHintsCache,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t) {\n\t\tthis._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', { min: 25 });\n\t\tthis._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n\t\tthis._disposables.add(_editor.onDidChangeModel(() => this._update()));\n\t\tthis._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._disposables.add(_editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.inlayHints)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._update();\n\n\t}\n\n\tdispose(): void {\n\t\tthis._sessionDisposables.dispose();\n\t\tthis._removeAllDecorations();\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tthis._sessionDisposables.clear();\n\t\tthis._removeAllDecorations();\n\n\t\tconst options = this._editor.getOption(EditorOption.inlayHints);\n\t\tif (options.enabled === 'off') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tif (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.enabled === 'on') {\n\t\t\t// different \"on\" modes: always\n\t\t\tthis._activeRenderMode = RenderMode.Normal;\n\t\t} else {\n\t\t\t// different \"on\" modes: offUnlessPressed, or onUnlessPressed\n\t\t\tlet defaultMode: RenderMode;\n\t\t\tlet altMode: RenderMode;\n\t\t\tif (options.enabled === 'onUnlessPressed') {\n\t\t\t\tdefaultMode = RenderMode.Normal;\n\t\t\t\taltMode = RenderMode.Invisible;\n\t\t\t} else {\n\t\t\t\tdefaultMode = RenderMode.Invisible;\n\t\t\t\taltMode = RenderMode.Normal;\n\t\t\t}\n\t\t\tthis._activeRenderMode = defaultMode;\n\n\t\t\tthis._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n\t\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n\t\t\t\tif (newRenderMode !== this._activeRenderMode) {\n\t\t\t\t\tthis._activeRenderMode = newRenderMode;\n\t\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\t\tconst copies = this._copyInlayHintsWithCurrentAnchor(model);\n\t\t\t\t\tthis._updateHintsDecorators([model.getFullModelRange()], copies);\n\t\t\t\t\tscheduler.schedule(0);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\t// iff possible, quickly update from cache\n\t\tconst cached = this._inlayHintsCache.get(model);\n\t\tif (cached) {\n\t\t\tthis._updateHintsDecorators([model.getFullModelRange()], cached);\n\t\t}\n\t\tthis._sessionDisposables.add(toDisposable(() => {\n\t\t\t// cache items when switching files etc\n\t\t\tif (!model.isDisposed()) {\n\t\t\t\tthis._cacheHintsForFastRestore(model);\n\t\t\t}\n\t\t}));\n\n\t\tlet cts: CancellationTokenSource | undefined;\n\t\tconst watchedProviders = new Set<languages.InlayHintsProvider>();\n\n\t\tconst scheduler = new RunOnceScheduler(async () => {\n\t\t\tconst t1 = Date.now();\n\n\t\t\tcts?.dispose(true);\n\t\t\tcts = new CancellationTokenSource();\n\t\t\tconst listener = model.onWillDispose(() => cts?.cancel());\n\n\t\t\ttry {\n\t\t\t\tconst myToken = cts.token;\n\t\t\t\tconst inlayHints = await InlayHintsFragments.create(this._languageFeaturesService.inlayHintsProvider, model, this._getHintsRanges(), myToken);\n\t\t\t\tscheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n\t\t\t\tif (myToken.isCancellationRequested) {\n\t\t\t\t\tinlayHints.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// listen to provider changes\n\t\t\t\tfor (const provider of inlayHints.provider) {\n\t\t\t\t\tif (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n\t\t\t\t\t\twatchedProviders.add(provider);\n\t\t\t\t\t\tthis._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n\t\t\t\t\t\t\tif (!scheduler.isScheduled()) { // ignore event when request is already scheduled\n\t\t\t\t\t\t\t\tscheduler.schedule();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._sessionDisposables.add(inlayHints);\n\t\t\t\tthis._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n\t\t\t\tthis._cacheHintsForFastRestore(model);\n\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\n\t\t\t} finally {\n\t\t\t\tcts.dispose();\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\n\t\t}, this._debounceInfo.get(model));\n\n\t\tthis._sessionDisposables.add(scheduler);\n\t\tthis._sessionDisposables.add(toDisposable(() => cts?.dispose(true)));\n\t\tscheduler.schedule(0);\n\n\t\tthis._sessionDisposables.add(this._editor.onDidScrollChange((e) => {\n\t\t\t// update when scroll position changes\n\t\t\t// uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n\t\t\t// typing or due to \"actual\" scrolling\n\t\t\tif (e.scrollTopChanged || !scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tconst cursor = this._sessionDisposables.add(new MutableDisposable());\n\t\tthis._sessionDisposables.add(this._editor.onDidChangeModelContent((e) => {\n\t\t\tcts?.cancel();\n\n\t\t\t// mark current cursor position and time after which the whole can be updated/redrawn\n\t\t\tconst delay = Math.max(scheduler.delay, 800);\n\t\t\tthis._cursorInfo = { position: this._editor.getPosition()!, notEarlierThan: Date.now() + delay };\n\t\t\tcursor.value = disposableTimeout(() => scheduler.schedule(0), delay);\n\n\t\t\tscheduler.schedule();\n\t\t}));\n\n\t\tthis._sessionDisposables.add(this._editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.inlayHints)) {\n\t\t\t\tscheduler.schedule();\n\t\t\t}\n\t\t}));\n\n\t\t// mouse gestures\n\t\tthis._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n\t\tthis._sessionDisposables.add(this._installLinkGesture());\n\t\tthis._sessionDisposables.add(this._installContextMenu());\n\t}\n\n\tprivate _installLinkGesture(): IDisposable {\n\n\t\tconst store = new DisposableStore();\n\t\tconst gesture = store.add(new ClickLinkGesture(this._editor));\n\n\t\t// let removeHighlight = () => { };\n\n\t\tconst sessionStore = new DisposableStore();\n\t\tstore.add(sessionStore);\n\n\t\tstore.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n\t\t\tconst [mouseEvent] = e;\n\t\t\tconst labelPart = this._getInlayHintLabelPart(mouseEvent);\n\t\t\tconst model = this._editor.getModel();\n\n\t\t\tif (!labelPart || !model) {\n\t\t\t\tsessionStore.clear();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// resolve the item\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tsessionStore.add(toDisposable(() => cts.dispose(true)));\n\t\t\tlabelPart.item.resolve(cts.token);\n\n\t\t\t// render link => when the modifier is pressed and when there is a command or location\n\t\t\tthis._activeInlayHintPart = labelPart.part.command || labelPart.part.location\n\t\t\t\t? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier)\n\t\t\t\t: undefined;\n\n\t\t\tconst lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n\t\t\tconst range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n\t\t\tconst lineHints = this._getInlineHintsForRange(range);\n\t\t\tthis._updateHintsDecorators([range], lineHints);\n\t\t\tsessionStore.add(toDisposable(() => {\n\t\t\t\tthis._activeInlayHintPart = undefined;\n\t\t\t\tthis._updateHintsDecorators([range], lineHints);\n\t\t\t}));\n\t\t}));\n\t\tstore.add(gesture.onCancel(() => sessionStore.clear()));\n\t\tstore.add(gesture.onExecute(async e => {\n\t\t\tconst label = this._getInlayHintLabelPart(e);\n\t\t\tif (label) {\n\t\t\t\tconst part = label.part;\n\t\t\t\tif (part.location) {\n\t\t\t\t\t// location -> execute go to def\n\t\t\t\t\tthis._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor as IActiveCodeEditor, part.location);\n\t\t\t\t} else if (languages.Command.is(part.command)) {\n\t\t\t\t\t// command -> execute it\n\t\t\t\t\tawait this._invokeCommand(part.command, label.item);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\treturn store;\n\t}\n\n\tprivate _getInlineHintsForRange(range: Range) {\n\t\tconst lineHints = new Set<InlayHintItem>();\n\t\tfor (const data of this._decorationsMetadata.values()) {\n\t\t\tif (range.containsRange(data.item.anchor.range)) {\n\t\t\t\tlineHints.add(data.item);\n\t\t\t}\n\t\t}\n\t\treturn Array.from(lineHints);\n\t}\n\n\tprivate _installDblClickGesture(updateInlayHints: Function): IDisposable {\n\t\treturn this._editor.onMouseUp(async e => {\n\t\t\tif (e.event.detail !== 2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst part = this._getInlayHintLabelPart(e);\n\t\t\tif (!part) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\te.event.preventDefault();\n\t\t\tawait part.item.resolve(CancellationToken.None);\n\t\t\tif (isNonEmptyArray(part.item.hint.textEdits)) {\n\t\t\t\tconst edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n\t\t\t\tthis._editor.executeEdits('inlayHint.default', edits);\n\t\t\t\tupdateInlayHints();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _installContextMenu(): IDisposable {\n\t\treturn this._editor.onContextMenu(async e => {\n\t\t\tif (!(isHTMLElement(e.event.target))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst part = this._getInlayHintLabelPart(e);\n\t\t\tif (part) {\n\t\t\t\tawait this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getInlayHintLabelPart(e: IEditorMouseEvent | ClickLinkMouseEvent): RenderedInlayHintLabelPart | undefined {\n\t\tif (e.target.type !== MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst options = e.target.detail.injectedText?.options;\n\t\tif (options instanceof ModelDecorationInjectedTextOptions && options?.attachedData instanceof RenderedInlayHintLabelPart) {\n\t\t\treturn options.attachedData;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _invokeCommand(command: languages.Command, item: InlayHintItem) {\n\t\ttry {\n\t\t\tawait this._commandService.executeCommand(command.id, ...(command.arguments ?? []));\n\t\t} catch (err) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tsource: item.provider.displayName,\n\t\t\t\tmessage: err\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _cacheHintsForFastRestore(model: ITextModel): void {\n\t\tconst hints = this._copyInlayHintsWithCurrentAnchor(model);\n\t\tthis._inlayHintsCache.set(model, hints);\n\t}\n\n\t// return inlay hints but with an anchor that reflects \"updates\"\n\t// that happened after receiving them, e.g adding new lines before a hint\n\tprivate _copyInlayHintsWithCurrentAnchor(model: ITextModel): InlayHintItem[] {\n\t\tconst items = new Map<InlayHintItem, InlayHintItem>();\n\t\tfor (const [id, obj] of this._decorationsMetadata) {\n\t\t\tif (items.has(obj.item)) {\n\t\t\t\t// an inlay item can be rendered as multiple decorations\n\t\t\t\t// but they will all uses the same range\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst range = model.getDecorationRange(id);\n\t\t\tif (range) {\n\t\t\t\t// update range with whatever the editor has tweaked it to\n\t\t\t\tconst anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n\t\t\t\tconst copy = obj.item.with({ anchor });\n\t\t\t\titems.set(obj.item, copy);\n\t\t\t}\n\t\t}\n\t\treturn Array.from(items.values());\n\t}\n\n\tprivate _getHintsRanges(): Range[] {\n\t\tconst extra = 30;\n\t\tconst model = this._editor.getModel()!;\n\t\tconst visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n\t\tconst result: Range[] = [];\n\t\tfor (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n\t\t\tconst extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n\t\t\tif (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n\t\t\t\tresult.push(extendedRange);\n\t\t\t} else {\n\t\t\t\tresult[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _updateHintsDecorators(ranges: readonly Range[], items: readonly InlayHintItem[]): void {\n\n\t\tconst itemFixedLengths = new Map<InlayHintItem, number>();\n\n\t\tif (this._cursorInfo\n\t\t\t&& this._cursorInfo.notEarlierThan > Date.now()\n\t\t\t&& ranges.some(range => range.containsPosition(this._cursorInfo!.position))\n\t\t) {\n\t\t\t// collect inlay hints that are on the same line and before the cursor. Those \"old\" hints\n\t\t\t// define fixed lengths so that the cursor does not jump back and worth while typing.\n\t\t\tconst { position } = this._cursorInfo;\n\t\t\tthis._cursorInfo = undefined;\n\n\t\t\tconst lengths = new Map<InlayHintItem, number>();\n\n\t\t\tfor (const deco of this._editor.getLineDecorations(position.lineNumber) ?? []) {\n\n\t\t\t\tconst data = this._decorationsMetadata.get(deco.id);\n\t\t\t\tif (deco.range.startColumn > position.column) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst opts = data?.decoration.options[data.item.anchor.direction];\n\t\t\t\tif (opts && opts.attachedData !== InlayHintsController._whitespaceData) {\n\t\t\t\t\tconst len = lengths.get(data.item) ?? 0;\n\t\t\t\t\tlengths.set(data.item, len + opts.content.length);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// on the cursor line and before the cursor-column\n\t\t\tconst newItemsWithFixedLength = items.filter(item => item.anchor.range.startLineNumber === position.lineNumber && item.anchor.range.endColumn <= position.column);\n\t\t\tconst fixedLengths = Array.from(lengths.values());\n\n\t\t\t// match up fixed lengths with items and distribute the remaining lengths to the last item\n\t\t\tlet lastItem: InlayHintItem | undefined;\n\t\t\twhile (true) {\n\t\t\t\tconst targetItem = newItemsWithFixedLength.shift();\n\t\t\t\tconst fixedLength = fixedLengths.shift();\n\n\t\t\t\tif (!fixedLength && !targetItem) {\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\n\t\t\t\tif (targetItem) {\n\t\t\t\t\titemFixedLengths.set(targetItem, fixedLength ?? 0);\n\t\t\t\t\tlastItem = targetItem;\n\n\t\t\t\t} else if (lastItem && fixedLength) {\n\t\t\t\t\t// still lengths but no more item. give it all to the last\n\t\t\t\t\tlet len = itemFixedLengths.get(lastItem)!;\n\t\t\t\t\tlen += fixedLength;\n\t\t\t\t\tlen += fixedLengths.reduce((p, c) => p + c, 0);\n\t\t\t\t\tfixedLengths.length = 0;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// utils to collect/create injected text decorations\n\t\tconst newDecorationsData: InlayHintDecorationRenderInfo[] = [];\n\t\tconst addInjectedText = (item: InlayHintItem, ref: ClassNameReference, content: string, cursorStops: InjectedTextCursorStops, attachedData?: RenderedInlayHintLabelPart | object): void => {\n\t\t\tconst opts: InjectedTextOptions = {\n\t\t\t\tcontent,\n\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\tinlineClassName: ref.className,\n\t\t\t\tcursorStops,\n\t\t\t\tattachedData\n\t\t\t};\n\t\t\tnewDecorationsData.push({\n\t\t\t\titem,\n\t\t\t\tclassNameRef: ref,\n\t\t\t\tdecoration: {\n\t\t\t\t\trange: item.anchor.range,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t// className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n\t\t\t\t\t\tdescription: 'InlayHint',\n\t\t\t\t\t\tshowIfCollapsed: item.anchor.range.isEmpty(), // \"original\" range is empty\n\t\t\t\t\t\tcollapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n\t\t\t\t\t\tstickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t\t\t\t\t\t[item.anchor.direction]: this._activeRenderMode === RenderMode.Normal ? opts : undefined\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tconst addInjectedWhitespace = (item: InlayHintItem, isLast: boolean): void => {\n\t\t\tconst marginRule = this._ruleFactory.createClassNameRef({\n\t\t\t\twidth: `${(fontSize / 3) | 0}px`,\n\t\t\t\tdisplay: 'inline-block'\n\t\t\t});\n\t\t\taddInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, InlayHintsController._whitespaceData);\n\t\t};\n\n\n\t\t//\n\t\tconst { fontSize, fontFamily, padding, isUniform } = this._getLayoutInfo();\n\t\tconst maxLength = this._editor.getOption(EditorOption.inlayHints).maximumLength;\n\t\tconst fontFamilyVar = '--code-editorInlayHintsFontFamily';\n\t\tthis._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n\n\n\t\ttype ILineInfo = { line: number; totalLen: number };\n\t\tlet currentLineInfo: ILineInfo = { line: 0, totalLen: 0 };\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst item = items[i];\n\n\t\t\tif (currentLineInfo.line !== item.anchor.range.startLineNumber) {\n\t\t\t\tcurrentLineInfo = { line: item.anchor.range.startLineNumber, totalLen: 0 };\n\t\t\t}\n\n\t\t\tif (maxLength && currentLineInfo.totalLen > maxLength) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// whitespace leading the actual label\n\t\t\tif (item.hint.paddingLeft) {\n\t\t\t\taddInjectedWhitespace(item, false);\n\t\t\t}\n\n\t\t\t// the label with its parts\n\t\t\tconst parts: languages.InlayHintLabelPart[] = typeof item.hint.label === 'string'\n\t\t\t\t? [{ label: item.hint.label }]\n\t\t\t\t: item.hint.label;\n\n\t\t\tconst itemFixedLength = itemFixedLengths.get(item);\n\t\t\tlet itemActualLength = 0;\n\n\t\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\t\tconst part = parts[i];\n\n\t\t\t\tconst isFirst = i === 0;\n\t\t\t\tconst isLast = i === parts.length - 1;\n\n\t\t\t\tconst cssProperties: CssProperties = {\n\t\t\t\t\tfontSize: `${fontSize}px`,\n\t\t\t\t\tfontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n\t\t\t\t\tverticalAlign: isUniform ? 'baseline' : 'middle',\n\t\t\t\t\tunicodeBidi: 'isolate'\n\t\t\t\t};\n\n\t\t\t\tif (isNonEmptyArray(item.hint.textEdits)) {\n\t\t\t\t\tcssProperties.cursor = 'default';\n\t\t\t\t}\n\n\t\t\t\tthis._fillInColors(cssProperties, item.hint);\n\n\t\t\t\tif ((part.command || part.location) && this._activeInlayHintPart?.part.item === item && this._activeInlayHintPart.part.index === i) {\n\t\t\t\t\t// active link!\n\t\t\t\t\tcssProperties.textDecoration = 'underline';\n\t\t\t\t\tif (this._activeInlayHintPart.hasTriggerModifier) {\n\t\t\t\t\t\tcssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n\t\t\t\t\t\tcssProperties.cursor = 'pointer';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet textlabel = part.label;\n\t\t\t\tcurrentLineInfo.totalLen += textlabel.length;\n\t\t\t\tlet tooLong = false;\n\t\t\t\tconst over = maxLength !== 0 ? (currentLineInfo.totalLen - maxLength) : 0;\n\t\t\t\tif (over > 0) {\n\t\t\t\t\ttextlabel = textlabel.slice(0, -over) + '\u2026';\n\t\t\t\t\ttooLong = true;\n\t\t\t\t}\n\n\t\t\t\titemActualLength += textlabel.length;\n\n\t\t\t\tconst overFixedLength = itemFixedLength !== undefined ? (itemActualLength - itemFixedLength) : 0;\n\t\t\t\tif (overFixedLength > 0) {\n\t\t\t\t\t// longer than fixed length, trim\n\t\t\t\t\titemActualLength -= overFixedLength;\n\t\t\t\t\ttextlabel = textlabel.slice(0, -(1 + overFixedLength)) + '\u2026';\n\t\t\t\t\ttooLong = true;\n\t\t\t\t}\n\n\t\t\t\tif (padding) {\n\t\t\t\t\tif (isFirst && (isLast || tooLong)) {\n\t\t\t\t\t\t// only element\n\t\t\t\t\t\tcssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n\t\t\t\t\t\tcssProperties.borderRadius = `${(fontSize / 4) | 0}px`;\n\t\t\t\t\t} else if (isFirst) {\n\t\t\t\t\t\t// first element\n\t\t\t\t\t\tcssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n\t\t\t\t\t\tcssProperties.borderRadius = `${(fontSize / 4) | 0}px 0 0 ${(fontSize / 4) | 0}px`;\n\t\t\t\t\t} else if ((isLast || tooLong)) {\n\t\t\t\t\t\t// last element\n\t\t\t\t\t\tcssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n\t\t\t\t\t\tcssProperties.borderRadius = `0 ${(fontSize / 4) | 0}px ${(fontSize / 4) | 0}px 0`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcssProperties.padding = `1px 0 1px 0`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\taddInjectedText(\n\t\t\t\t\titem,\n\t\t\t\t\tthis._ruleFactory.createClassNameRef(cssProperties),\n\t\t\t\t\tfixSpace(textlabel),\n\t\t\t\t\tisLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None,\n\t\t\t\t\tnew RenderedInlayHintLabelPart(item, i)\n\t\t\t\t);\n\n\t\t\t\tif (tooLong) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (itemFixedLength !== undefined && itemActualLength < itemFixedLength) {\n\t\t\t\t// shorter than fixed length, pad\n\t\t\t\tconst pad = (itemFixedLength - itemActualLength);\n\t\t\t\taddInjectedText(\n\t\t\t\t\titem,\n\t\t\t\t\tthis._ruleFactory.createClassNameRef({}),\n\t\t\t\t\t'\\u200a'.repeat(pad),\n\t\t\t\t\tInjectedTextCursorStops.None\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// whitespace trailing the actual label\n\t\t\tif (item.hint.paddingRight) {\n\t\t\t\taddInjectedWhitespace(item, true);\n\t\t\t}\n\n\t\t\tif (newDecorationsData.length > InlayHintsController._MAX_DECORATORS) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// collect all decoration ids that are affected by the ranges\n\t\t// and only update those decorations\n\t\tconst decorationIdsToReplace: string[] = [];\n\t\tfor (const [id, metadata] of this._decorationsMetadata) {\n\t\t\tconst range = this._editor.getModel()?.getDecorationRange(id);\n\t\t\tif (range && ranges.some(r => r.containsRange(range))) {\n\t\t\t\tdecorationIdsToReplace.push(id);\n\t\t\t\tmetadata.classNameRef.dispose();\n\t\t\t\tthis._decorationsMetadata.delete(id);\n\t\t\t}\n\t\t}\n\n\t\tconst scrollState = StableEditorScrollState.capture(this._editor);\n\n\t\tthis._editor.changeDecorations(accessor => {\n\t\t\tconst newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n\t\t\tfor (let i = 0; i < newDecorationIds.length; i++) {\n\t\t\t\tconst data = newDecorationsData[i];\n\t\t\t\tthis._decorationsMetadata.set(newDecorationIds[i], data);\n\t\t\t}\n\t\t});\n\n\t\tscrollState.restore(this._editor);\n\t}\n\n\tprivate _fillInColors(props: CssProperties, hint: languages.InlayHint): void {\n\t\tif (hint.kind === languages.InlayHintKind.Parameter) {\n\t\t\tprops.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n\t\t\tprops.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n\t\t} else if (hint.kind === languages.InlayHintKind.Type) {\n\t\t\tprops.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n\t\t\tprops.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n\t\t} else {\n\t\t\tprops.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n\t\t\tprops.color = themeColorFromId(colors.editorInlayHintForeground);\n\t\t}\n\t}\n\n\tprivate _getLayoutInfo() {\n\t\tconst options = this._editor.getOption(EditorOption.inlayHints);\n\t\tconst padding = options.padding;\n\n\t\tconst editorFontSize = this._editor.getOption(EditorOption.fontSize);\n\t\tconst editorFontFamily = this._editor.getOption(EditorOption.fontFamily);\n\n\t\tlet fontSize = options.fontSize;\n\t\tif (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n\t\t\tfontSize = editorFontSize;\n\t\t}\n\n\t\tconst fontFamily = options.fontFamily || editorFontFamily;\n\n\t\tconst isUniform = !padding\n\t\t\t&& fontFamily === editorFontFamily\n\t\t\t&& fontSize === editorFontSize;\n\n\t\treturn { fontSize, fontFamily, padding, isUniform };\n\t}\n\n\tprivate _removeAllDecorations(): void {\n\t\tthis._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n\t\tfor (const obj of this._decorationsMetadata.values()) {\n\t\t\tobj.classNameRef.dispose();\n\t\t}\n\t\tthis._decorationsMetadata.clear();\n\t}\n\n\n\t// --- accessibility\n\n\tgetInlayHintsForLine(line: number): InlayHintItem[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\t\tconst set = new Set<languages.InlayHint>();\n\t\tconst result: InlayHintItem[] = [];\n\t\tfor (const deco of this._editor.getLineDecorations(line)) {\n\t\t\tconst data = this._decorationsMetadata.get(deco.id);\n\t\t\tif (data && !set.has(data.item.hint)) {\n\t\t\t\tset.add(data.item.hint);\n\t\t\t\tresult.push(data.item);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str: string): string {\n\tconst noBreakWhitespace = '\\xa0';\n\treturn str.replace(/[ \\t]/g, noBreakWhitespace);\n}\n\nCommandsRegistry.registerCommand('_executeInlayHintProvider', async (accessor, ...args: [URI, IRange]): Promise<languages.InlayHint[]> => {\n\n\tconst [uri, range] = args;\n\tassertType(URI.isUri(uri));\n\tassertType(Range.isIRange(range));\n\n\tconst { inlayHintsProvider } = accessor.get(ILanguageFeaturesService);\n\tconst ref = await accessor.get(ITextModelService).createModelReference(uri);\n\ttry {\n\t\tconst model = await InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n\t\tconst result = model.items.map(i => i.hint);\n\t\tsetTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n\t\treturn result;\n\t} finally {\n\t\tref.dispose();\n\t}\n});\n"],
  "mappings": "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",
  "names": ["RenderMode", "model", "i"]
}
