{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlayHints/browser/inlayHints.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry.js';\nimport { InlayHint, InlayHintList, InlayHintsProvider, Command } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\n\nexport class InlayHintAnchor {\n\tconstructor(readonly range: Range, readonly direction: 'before' | 'after') { }\n}\n\nexport class InlayHintItem {\n\n\tprivate _isResolved: boolean = false;\n\tprivate _currentResolve?: Promise<void>;\n\n\tconstructor(readonly hint: InlayHint, readonly anchor: InlayHintAnchor, readonly provider: InlayHintsProvider) { }\n\n\twith(delta: { anchor: InlayHintAnchor }): InlayHintItem {\n\t\tconst result = new InlayHintItem(this.hint, delta.anchor, this.provider);\n\t\tresult._isResolved = this._isResolved;\n\t\tresult._currentResolve = this._currentResolve;\n\t\treturn result;\n\t}\n\n\tasync resolve(token: CancellationToken): Promise<void> {\n\t\tif (typeof this.provider.resolveInlayHint !== 'function') {\n\t\t\treturn;\n\t\t}\n\t\tif (this._currentResolve) {\n\t\t\t// wait for an active resolve operation and try again\n\t\t\t// when that's done.\n\t\t\tawait this._currentResolve;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.resolve(token);\n\t\t}\n\t\tif (!this._isResolved) {\n\t\t\tthis._currentResolve = this._doResolve(token)\n\t\t\t\t.finally(() => this._currentResolve = undefined);\n\t\t}\n\t\tawait this._currentResolve;\n\t}\n\n\tprivate async _doResolve(token: CancellationToken) {\n\t\ttry {\n\t\t\tconst newHint = await Promise.resolve(this.provider.resolveInlayHint!(this.hint, token));\n\t\t\tthis.hint.tooltip = newHint?.tooltip ?? this.hint.tooltip;\n\t\t\tthis.hint.label = newHint?.label ?? this.hint.label;\n\t\t\tthis.hint.textEdits = newHint?.textEdits ?? this.hint.textEdits;\n\t\t\tthis._isResolved = true;\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t\tthis._isResolved = false;\n\t\t}\n\t}\n}\n\nexport class InlayHintsFragments {\n\n\tprivate static _emptyInlayHintList: InlayHintList = Object.freeze({ dispose() { }, hints: [] });\n\n\tstatic async create(registry: LanguageFeatureRegistry<InlayHintsProvider>, model: ITextModel, ranges: Range[], token: CancellationToken): Promise<InlayHintsFragments> {\n\n\t\tconst data: [InlayHintList, InlayHintsProvider][] = [];\n\n\t\tconst promises = registry.ordered(model).reverse().map(provider => ranges.map(async range => {\n\t\t\ttry {\n\t\t\t\tconst result = await provider.provideInlayHints(model, range, token);\n\t\t\t\tif (result?.hints.length || provider.onDidChangeInlayHints) {\n\t\t\t\t\tdata.push([result ?? InlayHintsFragments._emptyInlayHintList, provider]);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t}\n\t\t}));\n\n\t\tawait Promise.all(promises.flat());\n\n\t\tif (token.isCancellationRequested || model.isDisposed()) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\treturn new InlayHintsFragments(ranges, data, model);\n\t}\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\treadonly items: readonly InlayHintItem[];\n\treadonly ranges: readonly Range[];\n\treadonly provider: Set<InlayHintsProvider>;\n\n\tprivate constructor(ranges: Range[], data: [InlayHintList, InlayHintsProvider][], model: ITextModel) {\n\t\tthis.ranges = ranges;\n\t\tthis.provider = new Set();\n\t\tconst items: InlayHintItem[] = [];\n\t\tfor (const [list, provider] of data) {\n\t\t\tthis._disposables.add(list);\n\t\t\tthis.provider.add(provider);\n\n\t\t\tfor (const hint of list.hints) {\n\t\t\t\t// compute the range to which the item should be attached to\n\t\t\t\tconst position = model.validatePosition(hint.position);\n\t\t\t\tlet direction: 'before' | 'after' = 'before';\n\n\t\t\t\tconst wordRange = InlayHintsFragments._getRangeAtPosition(model, position);\n\t\t\t\tlet range: Range;\n\n\t\t\t\tif (wordRange.getStartPosition().isBefore(position)) {\n\t\t\t\t\trange = Range.fromPositions(wordRange.getStartPosition(), position);\n\t\t\t\t\tdirection = 'after';\n\t\t\t\t} else {\n\t\t\t\t\trange = Range.fromPositions(position, wordRange.getEndPosition());\n\t\t\t\t\tdirection = 'before';\n\t\t\t\t}\n\n\t\t\t\titems.push(new InlayHintItem(hint, new InlayHintAnchor(range, direction), provider));\n\t\t\t}\n\t\t}\n\t\tthis.items = items.sort((a, b) => Position.compare(a.hint.position, b.hint.position));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate static _getRangeAtPosition(model: ITextModel, position: IPosition): Range {\n\t\tconst line = position.lineNumber;\n\t\tconst word = model.getWordAtPosition(position);\n\t\tif (word) {\n\t\t\t// always prefer the word range\n\t\t\treturn new Range(line, word.startColumn, line, word.endColumn);\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(line);\n\t\tconst tokens = model.tokenization.getLineTokens(line);\n\t\tconst offset = position.column - 1;\n\t\tconst idx = tokens.findTokenIndexAtOffset(offset);\n\n\t\tlet start = tokens.getStartOffset(idx);\n\t\tlet end = tokens.getEndOffset(idx);\n\n\t\tif (end - start === 1) {\n\t\t\t// single character token, when at its end try leading/trailing token instead\n\t\t\tif (start === offset && idx > 1) {\n\t\t\t\t// leading token\n\t\t\t\tstart = tokens.getStartOffset(idx - 1);\n\t\t\t\tend = tokens.getEndOffset(idx - 1);\n\t\t\t} else if (end === offset && idx < tokens.getCount() - 1) {\n\t\t\t\t// trailing token\n\t\t\t\tstart = tokens.getStartOffset(idx + 1);\n\t\t\t\tend = tokens.getEndOffset(idx + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Range(line, start + 1, line, end + 1);\n\t}\n}\n\nexport function asCommandLink(command: Command): string {\n\treturn URI.from({\n\t\tscheme: Schemas.command,\n\t\tpath: command.id,\n\t\tquery: command.arguments && encodeURIComponent(JSON.stringify(command.arguments))\n\t}).toString();\n}\n"],
  "mappings": "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",
  "names": []
}
