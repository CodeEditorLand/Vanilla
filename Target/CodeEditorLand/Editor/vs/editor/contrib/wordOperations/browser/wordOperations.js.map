{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/wordOperations/browser/wordOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, EditorCommand, ICommandOptions, registerEditorAction, registerEditorCommand, ServicesAccessor } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../../common/commands/replaceCommand.js';\nimport { EditorOption, EditorOptions } from '../../../common/config/editorOptions.js';\nimport { CursorState } from '../../../common/cursorCommon.js';\nimport { CursorChangeReason } from '../../../common/cursorEvents.js';\nimport { DeleteWordContext, WordNavigationType, WordOperations } from '../../../common/cursor/cursorWordOperations.js';\nimport { getMapForWordSeparators, WordCharacterClassifier } from '../../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ScrollType } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as nls from '../../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IsWindowsContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\n\nexport interface MoveWordOptions extends ICommandOptions {\n\tinSelectionMode: boolean;\n\twordNavigationType: WordNavigationType;\n}\n\nexport abstract class MoveWordCommand extends EditorCommand {\n\n\tprivate readonly _inSelectionMode: boolean;\n\tprivate readonly _wordNavigationType: WordNavigationType;\n\n\tconstructor(opts: MoveWordOptions) {\n\t\tsuper(opts);\n\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\tthis._wordNavigationType = opts.wordNavigationType;\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst wordSeparators = getMapForWordSeparators(editor.getOption(EditorOption.wordSeparators), editor.getOption(EditorOption.wordSegmenterLocales));\n\t\tconst model = editor.getModel();\n\t\tconst selections = editor.getSelections();\n\t\tconst hasMulticursor = selections.length > 1;\n\t\tconst result = selections.map((sel) => {\n\t\t\tconst inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n\t\t\tconst outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType, hasMulticursor);\n\t\t\treturn this._moveTo(sel, outPosition, this._inSelectionMode);\n\t\t});\n\n\t\tmodel.pushStackElement();\n\t\teditor._getViewModel().setCursorStates('moveWordCommand', CursorChangeReason.Explicit, result.map(r => CursorState.fromModelSelection(r)));\n\t\tif (result.length === 1) {\n\t\t\tconst pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n\t\t\teditor.revealPosition(pos, ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprivate _moveTo(from: Selection, to: Position, inSelectionMode: boolean): Selection {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new Selection(\n\t\t\t\tfrom.selectionStartLineNumber,\n\t\t\t\tfrom.selectionStartColumn,\n\t\t\t\tto.lineNumber,\n\t\t\t\tto.column\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new Selection(\n\t\t\t\tto.lineNumber,\n\t\t\t\tto.column,\n\t\t\t\tto.lineNumber,\n\t\t\t\tto.column\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected abstract _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position;\n}\n\nexport class WordLeftCommand extends MoveWordCommand {\n\tprotected _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position {\n\t\treturn WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType, hasMulticursor);\n\t}\n}\n\nexport class WordRightCommand extends MoveWordCommand {\n\tprotected _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position {\n\t\treturn WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n\t}\n}\n\nexport class CursorWordStartLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartLeft',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordEndLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndLeft',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStartFast,\n\t\t\tid: 'cursorWordLeft',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.LeftArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartLeftSelect',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndLeftSelect',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStartFast,\n\t\t\tid: 'cursorWordLeftSelect',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyMod.Shift | KeyCode.LeftArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordAccessibility,\n\t\t\tid: 'cursorWordAccessibilityLeft',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n\n\tprotected override _move(wordCharacterClassifier: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position {\n\t\treturn super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n\t}\n}\n\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordAccessibility,\n\t\t\tid: 'cursorWordAccessibilityLeftSelect',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n\n\tprotected override _move(wordCharacterClassifier: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position {\n\t\treturn super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n\t}\n}\n\nexport class CursorWordStartRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartRight',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordEndRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndRight',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.RightArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.RightArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordRight',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordStartRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartRightSelect',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordEndRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndRightSelect',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyMod.Shift | KeyCode.RightArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordRightSelect',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n}\n\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordAccessibility,\n\t\t\tid: 'cursorWordAccessibilityRight',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n\n\tprotected override _move(wordCharacterClassifier: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position {\n\t\treturn super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n\t}\n}\n\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordAccessibility,\n\t\t\tid: 'cursorWordAccessibilityRightSelect',\n\t\t\tprecondition: undefined\n\t\t});\n\t}\n\n\tprotected override _move(wordCharacterClassifier: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType, hasMulticursor: boolean): Position {\n\t\treturn super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n\t}\n}\n\nexport interface DeleteWordOptions extends ICommandOptions {\n\twhitespaceHeuristics: boolean;\n\twordNavigationType: WordNavigationType;\n}\n\nexport abstract class DeleteWordCommand extends EditorCommand {\n\tprivate readonly _whitespaceHeuristics: boolean;\n\tprivate readonly _wordNavigationType: WordNavigationType;\n\n\tconstructor(opts: DeleteWordOptions) {\n\t\tsuper(opts);\n\t\tthis._whitespaceHeuristics = opts.whitespaceHeuristics;\n\t\tthis._wordNavigationType = opts.wordNavigationType;\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst wordSeparators = getMapForWordSeparators(editor.getOption(EditorOption.wordSeparators), editor.getOption(EditorOption.wordSegmenterLocales));\n\t\tconst model = editor.getModel();\n\t\tconst selections = editor.getSelections();\n\t\tconst autoClosingBrackets = editor.getOption(EditorOption.autoClosingBrackets);\n\t\tconst autoClosingQuotes = editor.getOption(EditorOption.autoClosingQuotes);\n\t\tconst autoClosingPairs = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getAutoClosingPairs();\n\t\tconst viewModel = editor._getViewModel();\n\n\t\tconst commands = selections.map((sel) => {\n\t\t\tconst deleteRange = this._delete({\n\t\t\t\twordSeparators,\n\t\t\t\tmodel,\n\t\t\t\tselection: sel,\n\t\t\t\twhitespaceHeuristics: this._whitespaceHeuristics,\n\t\t\t\tautoClosingDelete: editor.getOption(EditorOption.autoClosingDelete),\n\t\t\t\tautoClosingBrackets,\n\t\t\t\tautoClosingQuotes,\n\t\t\t\tautoClosingPairs,\n\t\t\t\tautoClosedCharacters: viewModel.getCursorAutoClosedCharacters(),\n\t\t\t}, this._wordNavigationType);\n\t\t\treturn new ReplaceCommand(deleteRange, '');\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprotected abstract _delete(ctx: DeleteWordContext, wordNavigationType: WordNavigationType): Range;\n}\n\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n\tprotected _delete(ctx: DeleteWordContext, wordNavigationType: WordNavigationType): Range {\n\t\tconst r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\treturn new Range(1, 1, 1, 1);\n\t}\n}\n\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n\tprotected _delete(ctx: DeleteWordContext, wordNavigationType: WordNavigationType): Range {\n\t\tconst r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\tconst lineCount = ctx.model.getLineCount();\n\t\tconst maxColumn = ctx.model.getLineMaxColumn(lineCount);\n\t\treturn new Range(lineCount, maxColumn, lineCount, maxColumn);\n\t}\n}\n\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordStartLeft',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordEndLeft',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordLeft',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordStartRight',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordEndRight',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordRight extends DeleteWordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordRight',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Delete,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.Delete },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class DeleteInsideWord extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteInsideWord',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tlabel: nls.localize('deleteInsideWord', \"Delete Word\"),\n\t\t\talias: 'Delete Word'\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst wordSeparators = getMapForWordSeparators(editor.getOption(EditorOption.wordSeparators), editor.getOption(EditorOption.wordSegmenterLocales));\n\t\tconst model = editor.getModel();\n\t\tconst selections = editor.getSelections();\n\n\t\tconst commands = selections.map((sel) => {\n\t\t\tconst deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n\t\t\treturn new ReplaceCommand(deleteRange, '');\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);\n"],
  "mappings": "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",
  "names": []
}
