{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/comment/browser/comment.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { MenuId } from \"../../../../platform/actions/common/actions.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\ttype IActionOptions,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n} from \"../../../browser/editorExtensions.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type { ICommand } from \"../../../common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport { BlockCommentCommand } from \"./blockCommentCommand.js\";\nimport { LineCommentCommand, Type } from \"./lineCommentCommand.js\";\n\nabstract class CommentLineAction extends EditorAction {\n\tprivate readonly _type: Type;\n\n\tconstructor(type: Type, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis._type = type;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(\n\t\t\tILanguageConfigurationService,\n\t\t);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst commands: ICommand[] = [];\n\t\tconst modelOptions = model.getOptions();\n\t\tconst commentsOptions = editor.getOption(EditorOption.comments);\n\n\t\tconst selections = editor\n\t\t\t.getSelections()\n\t\t\t.map((selection, index) => ({\n\t\t\t\tselection,\n\t\t\t\tindex,\n\t\t\t\tignoreFirstLine: false,\n\t\t\t}));\n\t\tselections.sort((a, b) =>\n\t\t\tRange.compareRangesUsingStarts(a.selection, b.selection),\n\t\t);\n\n\t\t// Remove selections that would result in copying the same line\n\t\tlet prev = selections[0];\n\t\tfor (let i = 1; i < selections.length; i++) {\n\t\t\tconst curr = selections[i];\n\t\t\tif (\n\t\t\t\tprev.selection.endLineNumber === curr.selection.startLineNumber\n\t\t\t) {\n\t\t\t\t// these two selections would copy the same line\n\t\t\t\tif (prev.index < curr.index) {\n\t\t\t\t\t// prev wins\n\t\t\t\t\tcurr.ignoreFirstLine = true;\n\t\t\t\t} else {\n\t\t\t\t\t// curr wins\n\t\t\t\t\tprev.ignoreFirstLine = true;\n\t\t\t\t\tprev = curr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(\n\t\t\t\tnew LineCommentCommand(\n\t\t\t\t\tlanguageConfigurationService,\n\t\t\t\t\tselection.selection,\n\t\t\t\t\tmodelOptions.indentSize,\n\t\t\t\t\tthis._type,\n\t\t\t\t\tcommentsOptions.insertSpace,\n\t\t\t\t\tcommentsOptions.ignoreEmptyLines,\n\t\t\t\t\tselection.ignoreFirstLine,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass ToggleCommentLineAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.Toggle, {\n\t\t\tid: \"editor.action.commentLine\",\n\t\t\tlabel: nls.localize(\"comment.line\", \"Toggle Line Comment\"),\n\t\t\talias: \"Toggle Line Comment\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Slash,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: \"5_insert\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miToggleLineComment\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Toggle Line Comment\",\n\t\t\t\t),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass AddLineCommentAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.ForceAdd, {\n\t\t\tid: \"editor.action.addCommentLine\",\n\t\t\tlabel: nls.localize(\"comment.line.add\", \"Add Line Comment\"),\n\t\t\talias: \"Add Line Comment\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t\t),\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass RemoveLineCommentAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.ForceRemove, {\n\t\t\tid: \"editor.action.removeCommentLine\",\n\t\t\tlabel: nls.localize(\"comment.line.remove\", \"Remove Line Comment\"),\n\t\t\talias: \"Remove Line Comment\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyU,\n\t\t\t\t),\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass BlockCommentAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.blockComment\",\n\t\t\tlabel: nls.localize(\"comment.block\", \"Toggle Block Comment\"),\n\t\t\talias: \"Toggle Block Comment\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: \"5_insert\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miToggleBlockComment\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Toggle &&Block Comment\",\n\t\t\t\t),\n\t\t\t\torder: 2,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(\n\t\t\tILanguageConfigurationService,\n\t\t);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commentsOptions = editor.getOption(EditorOption.comments);\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(\n\t\t\t\tnew BlockCommentCommand(\n\t\t\t\t\tselection,\n\t\t\t\t\tcommentsOptions.insertSpace,\n\t\t\t\t\tlanguageConfigurationService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);\n"],
  "mappings": "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",
  "names": []
}
