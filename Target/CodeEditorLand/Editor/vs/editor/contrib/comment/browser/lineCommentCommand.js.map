{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/comment/browser/lineCommentCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { Constants } from \"../../../../base/common/uint.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../common/core/editOperation.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../../../common/editorCommon.js\";\nimport type { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { BlockCommentCommand } from \"./blockCommentCommand.js\";\n\nexport interface IInsertionPoint {\n\tignore: boolean;\n\tcommentStrOffset: number;\n}\n\nexport interface ILinePreflightData {\n\tignore: boolean;\n\tcommentStr: string;\n\tcommentStrOffset: number;\n\tcommentStrLength: number;\n}\n\nexport interface IPreflightDataSupported {\n\tsupported: true;\n\tshouldRemoveComments: boolean;\n\tlines: ILinePreflightData[];\n}\nexport interface IPreflightDataUnsupported {\n\tsupported: false;\n}\nexport type IPreflightData =\n\t| IPreflightDataSupported\n\t| IPreflightDataUnsupported;\n\nexport interface ISimpleModel {\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport enum Type {\n\tToggle = 0,\n\tForceAdd = 1,\n\tForceRemove = 2,\n}\n\nexport class LineCommentCommand implements ICommand {\n\tprivate readonly _selection: Selection;\n\tprivate readonly _indentSize: number;\n\tprivate readonly _type: Type;\n\tprivate readonly _insertSpace: boolean;\n\tprivate readonly _ignoreEmptyLines: boolean;\n\tprivate _selectionId: string | null;\n\tprivate _deltaColumn: number;\n\tprivate _moveEndPositionDown: boolean;\n\tprivate _ignoreFirstLine: boolean;\n\n\tconstructor(\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService,\n\t\tselection: Selection,\n\t\tindentSize: number,\n\t\ttype: Type,\n\t\tinsertSpace: boolean,\n\t\tignoreEmptyLines: boolean,\n\t\tignoreFirstLine?: boolean,\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._indentSize = indentSize;\n\t\tthis._type = type;\n\t\tthis._insertSpace = insertSpace;\n\t\tthis._selectionId = null;\n\t\tthis._deltaColumn = 0;\n\t\tthis._moveEndPositionDown = false;\n\t\tthis._ignoreEmptyLines = ignoreEmptyLines;\n\t\tthis._ignoreFirstLine = ignoreFirstLine || false;\n\t}\n\n\t/**\n\t * Do an initial pass over the lines and gather info about the line comment string.\n\t * Returns null if any of the lines doesn't support a line comment string.\n\t */\n\tprivate static _gatherPreflightCommentStrings(\n\t\tmodel: ITextModel,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tlanguageConfigurationService: ILanguageConfigurationService,\n\t): ILinePreflightData[] | null {\n\t\tmodel.tokenization.tokenizeIfCheap(startLineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(startLineNumber, 1);\n\n\t\tconst config =\n\t\t\tlanguageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlanguageId,\n\t\t\t).comments;\n\t\tconst commentStr = config ? config.lineCommentToken : null;\n\t\tif (!commentStr) {\n\t\t\t// Mode does not support line comments\n\t\t\treturn null;\n\t\t}\n\n\t\tconst lines: ILinePreflightData[] = [];\n\t\tfor (\n\t\t\tlet i = 0, lineCount = endLineNumber - startLineNumber + 1;\n\t\t\ti < lineCount;\n\t\t\ti++\n\t\t) {\n\t\t\tlines[i] = {\n\t\t\t\tignore: false,\n\t\t\t\tcommentStr: commentStr,\n\t\t\t\tcommentStrOffset: 0,\n\t\t\t\tcommentStrLength: commentStr.length,\n\t\t\t};\n\t\t}\n\n\t\treturn lines;\n\t}\n\n\t/**\n\t * Analyze lines and decide which lines are relevant and what the toggle should do.\n\t * Also, build up several offsets and lengths useful in the generation of editor operations.\n\t */\n\tpublic static _analyzeLines(\n\t\ttype: Type,\n\t\tinsertSpace: boolean,\n\t\tmodel: ISimpleModel,\n\t\tlines: ILinePreflightData[],\n\t\tstartLineNumber: number,\n\t\tignoreEmptyLines: boolean,\n\t\tignoreFirstLine: boolean,\n\t\tlanguageConfigurationService: ILanguageConfigurationService,\n\t): IPreflightData {\n\t\tlet onlyWhitespaceLines = true;\n\n\t\tlet shouldRemoveComments: boolean;\n\t\tif (type === Type.Toggle) {\n\t\t\tshouldRemoveComments = true;\n\t\t} else if (type === Type.ForceAdd) {\n\t\t\tshouldRemoveComments = false;\n\t\t} else {\n\t\t\tshouldRemoveComments = true;\n\t\t}\n\n\t\tfor (let i = 0, lineCount = lines.length; i < lineCount; i++) {\n\t\t\tconst lineData = lines[i];\n\t\t\tconst lineNumber = startLineNumber + i;\n\n\t\t\tif (lineNumber === startLineNumber && ignoreFirstLine) {\n\t\t\t\t// first line ignored\n\t\t\t\tlineData.ignore = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst lineContentStartOffset =\n\t\t\t\tstrings.firstNonWhitespaceIndex(lineContent);\n\n\t\t\tif (lineContentStartOffset === -1) {\n\t\t\t\t// Empty or whitespace only line\n\t\t\t\tlineData.ignore = ignoreEmptyLines;\n\t\t\t\tlineData.commentStrOffset = lineContent.length;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tonlyWhitespaceLines = false;\n\t\t\tlineData.ignore = false;\n\t\t\tlineData.commentStrOffset = lineContentStartOffset;\n\n\t\t\tif (\n\t\t\t\tshouldRemoveComments &&\n\t\t\t\t!BlockCommentCommand._haystackHasNeedleAtOffset(\n\t\t\t\t\tlineContent,\n\t\t\t\t\tlineData.commentStr,\n\t\t\t\t\tlineContentStartOffset,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (type === Type.Toggle) {\n\t\t\t\t\t// Every line so far has been a line comment, but this one is not\n\t\t\t\t\tshouldRemoveComments = false;\n\t\t\t\t} else if (type === Type.ForceAdd) {\n\t\t\t\t\t// Will not happen\n\t\t\t\t} else {\n\t\t\t\t\tlineData.ignore = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shouldRemoveComments && insertSpace) {\n\t\t\t\t// Remove a following space if present\n\t\t\t\tconst commentStrEndOffset =\n\t\t\t\t\tlineContentStartOffset + lineData.commentStrLength;\n\t\t\t\tif (\n\t\t\t\t\tcommentStrEndOffset < lineContent.length &&\n\t\t\t\t\tlineContent.charCodeAt(commentStrEndOffset) ===\n\t\t\t\t\t\tCharCode.Space\n\t\t\t\t) {\n\t\t\t\t\tlineData.commentStrLength += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (type === Type.Toggle && onlyWhitespaceLines) {\n\t\t\t// For only whitespace lines, we insert comments\n\t\t\tshouldRemoveComments = false;\n\n\t\t\t// Also, no longer ignore them\n\t\t\tfor (let i = 0, lineCount = lines.length; i < lineCount; i++) {\n\t\t\t\tlines[i].ignore = false;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsupported: true,\n\t\t\tshouldRemoveComments: shouldRemoveComments,\n\t\t\tlines: lines,\n\t\t};\n\t}\n\n\t/**\n\t * Analyze all lines and decide exactly what to do => not supported | insert line comments | remove line comments\n\t */\n\tpublic static _gatherPreflightData(\n\t\ttype: Type,\n\t\tinsertSpace: boolean,\n\t\tmodel: ITextModel,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tignoreEmptyLines: boolean,\n\t\tignoreFirstLine: boolean,\n\t\tlanguageConfigurationService: ILanguageConfigurationService,\n\t): IPreflightData {\n\t\tconst lines = LineCommentCommand._gatherPreflightCommentStrings(\n\t\t\tmodel,\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t\tlanguageConfigurationService,\n\t\t);\n\t\tif (lines === null) {\n\t\t\treturn {\n\t\t\t\tsupported: false,\n\t\t\t};\n\t\t}\n\n\t\treturn LineCommentCommand._analyzeLines(\n\t\t\ttype,\n\t\t\tinsertSpace,\n\t\t\tmodel,\n\t\t\tlines,\n\t\t\tstartLineNumber,\n\t\t\tignoreEmptyLines,\n\t\t\tignoreFirstLine,\n\t\t\tlanguageConfigurationService,\n\t\t);\n\t}\n\n\t/**\n\t * Given a successful analysis, execute either insert line comments, either remove line comments\n\t */\n\tprivate _executeLineComments(\n\t\tmodel: ISimpleModel,\n\t\tbuilder: IEditOperationBuilder,\n\t\tdata: IPreflightDataSupported,\n\t\ts: Selection,\n\t): void {\n\t\tlet ops: ISingleEditOperation[];\n\n\t\tif (data.shouldRemoveComments) {\n\t\t\tops = LineCommentCommand._createRemoveLineCommentsOperations(\n\t\t\t\tdata.lines,\n\t\t\t\ts.startLineNumber,\n\t\t\t);\n\t\t} else {\n\t\t\tLineCommentCommand._normalizeInsertionPoint(\n\t\t\t\tmodel,\n\t\t\t\tdata.lines,\n\t\t\t\ts.startLineNumber,\n\t\t\t\tthis._indentSize,\n\t\t\t);\n\t\t\tops = this._createAddLineCommentsOperations(\n\t\t\t\tdata.lines,\n\t\t\t\ts.startLineNumber,\n\t\t\t);\n\t\t}\n\n\t\tconst cursorPosition = new Position(\n\t\t\ts.positionLineNumber,\n\t\t\ts.positionColumn,\n\t\t);\n\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tbuilder.addEditOperation(ops[i].range, ops[i].text);\n\t\t\tif (\n\t\t\t\tRange.isEmpty(ops[i].range) &&\n\t\t\t\tRange.getStartPosition(ops[i].range).equals(cursorPosition)\n\t\t\t) {\n\t\t\t\tconst lineContent = model.getLineContent(\n\t\t\t\t\tcursorPosition.lineNumber,\n\t\t\t\t);\n\t\t\t\tif (lineContent.length + 1 === cursorPosition.column) {\n\t\t\t\t\tthis._deltaColumn = (ops[i].text || \"\").length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate _attemptRemoveBlockComment(\n\t\tmodel: ITextModel,\n\t\ts: Selection,\n\t\tstartToken: string,\n\t\tendToken: string,\n\t): ISingleEditOperation[] | null {\n\t\tlet startLineNumber = s.startLineNumber;\n\t\tlet endLineNumber = s.endLineNumber;\n\n\t\tconst startTokenAllowedBeforeColumn =\n\t\t\tendToken.length +\n\t\t\tMath.max(\n\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(s.startLineNumber),\n\t\t\t\ts.startColumn,\n\t\t\t);\n\n\t\tlet startTokenIndex = model\n\t\t\t.getLineContent(startLineNumber)\n\t\t\t.lastIndexOf(startToken, startTokenAllowedBeforeColumn - 1);\n\t\tlet endTokenIndex = model\n\t\t\t.getLineContent(endLineNumber)\n\t\t\t.indexOf(endToken, s.endColumn - 1 - startToken.length);\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex === -1) {\n\t\t\tendTokenIndex = model\n\t\t\t\t.getLineContent(startLineNumber)\n\t\t\t\t.indexOf(endToken, startTokenIndex + startToken.length);\n\t\t\tendLineNumber = startLineNumber;\n\t\t}\n\n\t\tif (startTokenIndex === -1 && endTokenIndex !== -1) {\n\t\t\tstartTokenIndex = model\n\t\t\t\t.getLineContent(endLineNumber)\n\t\t\t\t.lastIndexOf(startToken, endTokenIndex);\n\t\t\tstartLineNumber = endLineNumber;\n\t\t}\n\n\t\tif (s.isEmpty() && (startTokenIndex === -1 || endTokenIndex === -1)) {\n\t\t\tstartTokenIndex = model\n\t\t\t\t.getLineContent(startLineNumber)\n\t\t\t\t.indexOf(startToken);\n\t\t\tif (startTokenIndex !== -1) {\n\t\t\t\tendTokenIndex = model\n\t\t\t\t\t.getLineContent(startLineNumber)\n\t\t\t\t\t.indexOf(endToken, startTokenIndex + startToken.length);\n\t\t\t}\n\t\t}\n\n\t\t// We have to adjust to possible inner white space.\n\t\t// For Space after startToken, add Space to startToken - range math will work out.\n\t\tif (\n\t\t\tstartTokenIndex !== -1 &&\n\t\t\tmodel\n\t\t\t\t.getLineContent(startLineNumber)\n\t\t\t\t.charCodeAt(startTokenIndex + startToken.length) ===\n\t\t\t\tCharCode.Space\n\t\t) {\n\t\t\tstartToken += \" \";\n\t\t}\n\n\t\t// For Space before endToken, add Space before endToken and shift index one left.\n\t\tif (\n\t\t\tendTokenIndex !== -1 &&\n\t\t\tmodel\n\t\t\t\t.getLineContent(endLineNumber)\n\t\t\t\t.charCodeAt(endTokenIndex - 1) === CharCode.Space\n\t\t) {\n\t\t\tendToken = \" \" + endToken;\n\t\t\tendTokenIndex -= 1;\n\t\t}\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\treturn BlockCommentCommand._createRemoveBlockCommentOperations(\n\t\t\t\tnew Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tstartTokenIndex + startToken.length + 1,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tendTokenIndex + 1,\n\t\t\t\t),\n\t\t\t\tstartToken,\n\t\t\t\tendToken,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Given an unsuccessful analysis, delegate to the block comment command\n\t */\n\tprivate _executeBlockComment(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t\ts: Selection,\n\t): void {\n\t\tmodel.tokenization.tokenizeIfCheap(s.startLineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(s.startLineNumber, 1);\n\t\tconst config =\n\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlanguageId,\n\t\t\t).comments;\n\t\tif (\n\t\t\t!config ||\n\t\t\t!config.blockCommentStartToken ||\n\t\t\t!config.blockCommentEndToken\n\t\t) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tconst startToken = config.blockCommentStartToken;\n\t\tconst endToken = config.blockCommentEndToken;\n\n\t\tlet ops = this._attemptRemoveBlockComment(\n\t\t\tmodel,\n\t\t\ts,\n\t\t\tstartToken,\n\t\t\tendToken,\n\t\t);\n\t\tif (!ops) {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\tconst lineContent = model.getLineContent(s.startLineNumber);\n\t\t\t\tlet firstNonWhitespaceIndex =\n\t\t\t\t\tstrings.firstNonWhitespaceIndex(lineContent);\n\t\t\t\tif (firstNonWhitespaceIndex === -1) {\n\t\t\t\t\t// Line is empty or contains only whitespace\n\t\t\t\t\tfirstNonWhitespaceIndex = lineContent.length;\n\t\t\t\t}\n\t\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\tfirstNonWhitespaceIndex + 1,\n\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\tlineContent.length + 1,\n\t\t\t\t\t),\n\t\t\t\t\tstartToken,\n\t\t\t\t\tendToken,\n\t\t\t\t\tthis._insertSpace,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\t),\n\t\t\t\t\t\ts.endLineNumber,\n\t\t\t\t\t\tmodel.getLineMaxColumn(s.endLineNumber),\n\t\t\t\t\t),\n\t\t\t\t\tstartToken,\n\t\t\t\t\tendToken,\n\t\t\t\t\tthis._insertSpace,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (ops.length === 1) {\n\t\t\t\t// Leave cursor after token and Space\n\t\t\t\tthis._deltaColumn = startToken.length + 1;\n\t\t\t}\n\t\t}\n\t\tthis._selectionId = builder.trackSelection(s);\n\t\tfor (const op of ops) {\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tlet s = this._selection;\n\t\tthis._moveEndPositionDown = false;\n\n\t\tif (s.startLineNumber === s.endLineNumber && this._ignoreFirstLine) {\n\t\t\tbuilder.addEditOperation(\n\t\t\t\tnew Range(\n\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\tmodel.getLineMaxColumn(s.startLineNumber),\n\t\t\t\t\ts.startLineNumber + 1,\n\t\t\t\t\t1,\n\t\t\t\t),\n\t\t\t\ts.startLineNumber === model.getLineCount() ? \"\" : \"\\n\",\n\t\t\t);\n\t\t\tthis._selectionId = builder.trackSelection(s);\n\t\t\treturn;\n\t\t}\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(\n\t\t\t\ts.endLineNumber - 1,\n\t\t\t\tmodel.getLineMaxColumn(s.endLineNumber - 1),\n\t\t\t);\n\t\t}\n\n\t\tconst data = LineCommentCommand._gatherPreflightData(\n\t\t\tthis._type,\n\t\t\tthis._insertSpace,\n\t\t\tmodel,\n\t\t\ts.startLineNumber,\n\t\t\ts.endLineNumber,\n\t\t\tthis._ignoreEmptyLines,\n\t\t\tthis._ignoreFirstLine,\n\t\t\tthis.languageConfigurationService,\n\t\t);\n\n\t\tif (data.supported) {\n\t\t\treturn this._executeLineComments(model, builder, data, s);\n\t\t}\n\n\t\treturn this._executeBlockComment(model, builder, s);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\treturn new Selection(\n\t\t\tresult.selectionStartLineNumber,\n\t\t\tresult.selectionStartColumn + this._deltaColumn,\n\t\t\tresult.positionLineNumber,\n\t\t\tresult.positionColumn + this._deltaColumn,\n\t\t);\n\t}\n\n\t/**\n\t * Generate edit operations in the remove line comment case\n\t */\n\tpublic static _createRemoveLineCommentsOperations(\n\t\tlines: ILinePreflightData[],\n\t\tstartLineNumber: number,\n\t): ISingleEditOperation[] {\n\t\tconst res: ISingleEditOperation[] = [];\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst lineData = lines[i];\n\n\t\t\tif (lineData.ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tres.push(\n\t\t\t\tEditOperation.delete(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tstartLineNumber + i,\n\t\t\t\t\t\tlineData.commentStrOffset + 1,\n\t\t\t\t\t\tstartLineNumber + i,\n\t\t\t\t\t\tlineData.commentStrOffset +\n\t\t\t\t\t\t\tlineData.commentStrLength +\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Generate edit operations in the add line comment case\n\t */\n\tprivate _createAddLineCommentsOperations(\n\t\tlines: ILinePreflightData[],\n\t\tstartLineNumber: number,\n\t): ISingleEditOperation[] {\n\t\tconst res: ISingleEditOperation[] = [];\n\t\tconst afterCommentStr = this._insertSpace ? \" \" : \"\";\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst lineData = lines[i];\n\n\t\t\tif (lineData.ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tres.push(\n\t\t\t\tEditOperation.insert(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\tstartLineNumber + i,\n\t\t\t\t\t\tlineData.commentStrOffset + 1,\n\t\t\t\t\t),\n\t\t\t\t\tlineData.commentStr + afterCommentStr,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tprivate static nextVisibleColumn(\n\t\tcurrentVisibleColumn: number,\n\t\tindentSize: number,\n\t\tisTab: boolean,\n\t\tcolumnSize: number,\n\t): number {\n\t\tif (isTab) {\n\t\t\treturn (\n\t\t\t\tcurrentVisibleColumn +\n\t\t\t\t(indentSize - (currentVisibleColumn % indentSize))\n\t\t\t);\n\t\t}\n\t\treturn currentVisibleColumn + columnSize;\n\t}\n\n\t/**\n\t * Adjust insertion points to have them vertically aligned in the add line comment case\n\t */\n\tpublic static _normalizeInsertionPoint(\n\t\tmodel: ISimpleModel,\n\t\tlines: IInsertionPoint[],\n\t\tstartLineNumber: number,\n\t\tindentSize: number,\n\t): void {\n\t\tlet minVisibleColumn = Constants.MAX_SAFE_SMALL_INTEGER;\n\t\tlet j: number;\n\t\tlet lenJ: number;\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineContent = model.getLineContent(startLineNumber + i);\n\n\t\t\tlet currentVisibleColumn = 0;\n\t\t\tfor (\n\t\t\t\tlet j = 0, lenJ = lines[i].commentStrOffset;\n\t\t\t\tcurrentVisibleColumn < minVisibleColumn && j < lenJ;\n\t\t\t\tj++\n\t\t\t) {\n\t\t\t\tcurrentVisibleColumn = LineCommentCommand.nextVisibleColumn(\n\t\t\t\t\tcurrentVisibleColumn,\n\t\t\t\t\tindentSize,\n\t\t\t\t\tlineContent.charCodeAt(j) === CharCode.Tab,\n\t\t\t\t\t1,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (currentVisibleColumn < minVisibleColumn) {\n\t\t\t\tminVisibleColumn = currentVisibleColumn;\n\t\t\t}\n\t\t}\n\n\t\tminVisibleColumn =\n\t\t\tMath.floor(minVisibleColumn / indentSize) * indentSize;\n\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].ignore) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineContent = model.getLineContent(startLineNumber + i);\n\n\t\t\tlet currentVisibleColumn = 0;\n\t\t\tfor (\n\t\t\t\tj = 0, lenJ = lines[i].commentStrOffset;\n\t\t\t\tcurrentVisibleColumn < minVisibleColumn && j < lenJ;\n\t\t\t\tj++\n\t\t\t) {\n\t\t\t\tcurrentVisibleColumn = LineCommentCommand.nextVisibleColumn(\n\t\t\t\t\tcurrentVisibleColumn,\n\t\t\t\t\tindentSize,\n\t\t\t\t\tlineContent.charCodeAt(j) === CharCode.Tab,\n\t\t\t\t\t1,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (currentVisibleColumn > minVisibleColumn) {\n\t\t\t\tlines[i].commentStrOffset = j - 1;\n\t\t\t} else {\n\t\t\t\tlines[i].commentStrOffset = j;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Type", "j", "lenJ"]
}
