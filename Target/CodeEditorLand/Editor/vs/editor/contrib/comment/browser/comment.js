import{KeyChord as h,KeyCode as m,KeyMod as t}from"../../../../base/common/keyCodes.js";import"../../../browser/editorBrowser.js";import{EditorAction as x,registerEditorAction as g}from"../../../browser/editorExtensions.js";import{EditorOption as A}from"../../../common/config/editorOptions.js";import{Range as E}from"../../../common/core/range.js";import"../../../common/editorCommon.js";import{EditorContextKeys as i}from"../../../common/editorContextKeys.js";import{ILanguageConfigurationService as S}from"../../../common/languages/languageConfigurationRegistry.js";import{BlockCommentCommand as T}from"./blockCommentCommand.js";import{LineCommentCommand as v,Type as y}from"./lineCommentCommand.js";import*as r from"../../../../nls.js";import{MenuId as k}from"../../../../platform/actions/common/actions.js";import{KeybindingWeight as C}from"../../../../platform/keybinding/common/keybindingsRegistry.js";class L extends x{_type;constructor(s,e){super(e),this._type=s}run(s,e){const u=s.get(S);if(!e.hasModel())return;const b=e.getModel(),c=[],f=b.getOptions(),a=e.getOption(A.comments),l=e.getSelections().map((o,n)=>({selection:o,index:n,ignoreFirstLine:!1}));l.sort((o,n)=>E.compareRangesUsingStarts(o.selection,n.selection));let p=l[0];for(let o=1;o<l.length;o++){const n=l[o];p.selection.endLineNumber===n.selection.startLineNumber&&(p.index<n.index?n.ignoreFirstLine=!0:(p.ignoreFirstLine=!0,p=n))}for(const o of l)c.push(new v(u,o.selection,f.indentSize,this._type,a.insertSpace,a.ignoreEmptyLines,o.ignoreFirstLine));e.pushUndoStop(),e.executeCommands(this.id,c),e.pushUndoStop()}}class O extends L{constructor(){super(y.Toggle,{id:"editor.action.commentLine",label:r.localize("comment.line","Toggle Line Comment"),alias:"Toggle Line Comment",precondition:i.writable,kbOpts:{kbExpr:i.editorTextFocus,primary:t.CtrlCmd|m.Slash,weight:C.EditorContrib},menuOpts:{menuId:k.MenubarEditMenu,group:"5_insert",title:r.localize({key:"miToggleLineComment",comment:["&& denotes a mnemonic"]},"&&Toggle Line Comment"),order:1}})}}class K extends L{constructor(){super(y.ForceAdd,{id:"editor.action.addCommentLine",label:r.localize("comment.line.add","Add Line Comment"),alias:"Add Line Comment",precondition:i.writable,kbOpts:{kbExpr:i.editorTextFocus,primary:h(t.CtrlCmd|m.KeyK,t.CtrlCmd|m.KeyC),weight:C.EditorContrib}})}}class I extends L{constructor(){super(y.ForceRemove,{id:"editor.action.removeCommentLine",label:r.localize("comment.line.remove","Remove Line Comment"),alias:"Remove Line Comment",precondition:i.writable,kbOpts:{kbExpr:i.editorTextFocus,primary:h(t.CtrlCmd|m.KeyK,t.CtrlCmd|m.KeyU),weight:C.EditorContrib}})}}class w extends x{constructor(){super({id:"editor.action.blockComment",label:r.localize("comment.block","Toggle Block Comment"),alias:"Toggle Block Comment",precondition:i.writable,kbOpts:{kbExpr:i.editorTextFocus,primary:t.Shift|t.Alt|m.KeyA,linux:{primary:t.CtrlCmd|t.Shift|m.KeyA},weight:C.EditorContrib},menuOpts:{menuId:k.MenubarEditMenu,group:"5_insert",title:r.localize({key:"miToggleBlockComment",comment:["&& denotes a mnemonic"]},"Toggle &&Block Comment"),order:2}})}run(s,e){const u=s.get(S);if(!e.hasModel())return;const b=e.getOption(A.comments),c=[],f=e.getSelections();for(const a of f)c.push(new T(a,b.insertSpace,u));e.pushUndoStop(),e.executeCommands(this.id,c),e.pushUndoStop()}}g(O),g(K),g(I),g(w);
