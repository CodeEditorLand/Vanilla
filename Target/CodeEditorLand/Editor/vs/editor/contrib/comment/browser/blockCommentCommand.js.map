{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/comment/browser/blockCommentCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../common/core/editOperation.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../../../common/editorCommon.js\";\nimport type { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nexport class BlockCommentCommand implements ICommand {\n\tprivate readonly _selection: Selection;\n\tprivate readonly _insertSpace: boolean;\n\tprivate _usedEndToken: string | null;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\tinsertSpace: boolean,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._insertSpace = insertSpace;\n\t\tthis._usedEndToken = null;\n\t}\n\n\tpublic static _haystackHasNeedleAtOffset(\n\t\thaystack: string,\n\t\tneedle: string,\n\t\toffset: number,\n\t): boolean {\n\t\tif (offset < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst needleLength = needle.length;\n\t\tconst haystackLength = haystack.length;\n\t\tif (offset + needleLength > haystackLength) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < needleLength; i++) {\n\t\t\tconst codeA = haystack.charCodeAt(offset + i);\n\t\t\tconst codeB = needle.charCodeAt(i);\n\n\t\t\tif (codeA === codeB) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tcodeA >= CharCode.A &&\n\t\t\t\tcodeA <= CharCode.Z &&\n\t\t\t\tcodeA + 32 === codeB\n\t\t\t) {\n\t\t\t\t// codeA is upper-case variant of codeB\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tcodeB >= CharCode.A &&\n\t\t\t\tcodeB <= CharCode.Z &&\n\t\t\t\tcodeB + 32 === codeA\n\t\t\t) {\n\t\t\t\t// codeB is upper-case variant of codeA\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _createOperationsForBlockComment(\n\t\tselection: Range,\n\t\tstartToken: string,\n\t\tendToken: string,\n\t\tinsertSpace: boolean,\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tconst startLineNumber = selection.startLineNumber;\n\t\tconst startColumn = selection.startColumn;\n\t\tconst endLineNumber = selection.endLineNumber;\n\t\tconst endColumn = selection.endColumn;\n\n\t\tconst startLineText = model.getLineContent(startLineNumber);\n\t\tconst endLineText = model.getLineContent(endLineNumber);\n\n\t\tlet startTokenIndex = startLineText.lastIndexOf(\n\t\t\tstartToken,\n\t\t\tstartColumn - 1 + startToken.length,\n\t\t);\n\t\tlet endTokenIndex = endLineText.indexOf(\n\t\t\tendToken,\n\t\t\tendColumn - 1 - endToken.length,\n\t\t);\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\tconst lineBetweenTokens = startLineText.substring(\n\t\t\t\t\tstartTokenIndex + startToken.length,\n\t\t\t\t\tendTokenIndex,\n\t\t\t\t);\n\n\t\t\t\tif (lineBetweenTokens.indexOf(endToken) >= 0) {\n\t\t\t\t\t// force to add a block comment\n\t\t\t\t\tstartTokenIndex = -1;\n\t\t\t\t\tendTokenIndex = -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst startLineAfterStartToken = startLineText.substring(\n\t\t\t\t\tstartTokenIndex + startToken.length,\n\t\t\t\t);\n\t\t\t\tconst endLineBeforeEndToken = endLineText.substring(\n\t\t\t\t\t0,\n\t\t\t\t\tendTokenIndex,\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tstartLineAfterStartToken.indexOf(endToken) >= 0 ||\n\t\t\t\t\tendLineBeforeEndToken.indexOf(endToken) >= 0\n\t\t\t\t) {\n\t\t\t\t\t// force to add a block comment\n\t\t\t\t\tstartTokenIndex = -1;\n\t\t\t\t\tendTokenIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet ops: ISingleEditOperation[];\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\t// Consider spaces as part of the comment tokens\n\t\t\tif (\n\t\t\t\tinsertSpace &&\n\t\t\t\tstartTokenIndex + startToken.length < startLineText.length &&\n\t\t\t\tstartLineText.charCodeAt(\n\t\t\t\t\tstartTokenIndex + startToken.length,\n\t\t\t\t) === CharCode.Space\n\t\t\t) {\n\t\t\t\t// Pretend the start token contains a trailing space\n\t\t\t\tstartToken = startToken + \" \";\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tinsertSpace &&\n\t\t\t\tendTokenIndex > 0 &&\n\t\t\t\tendLineText.charCodeAt(endTokenIndex - 1) === CharCode.Space\n\t\t\t) {\n\t\t\t\t// Pretend the end token contains a leading space\n\t\t\t\tendToken = \" \" + endToken;\n\t\t\t\tendTokenIndex -= 1;\n\t\t\t}\n\t\t\tops = BlockCommentCommand._createRemoveBlockCommentOperations(\n\t\t\t\tnew Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tstartTokenIndex + startToken.length + 1,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tendTokenIndex + 1,\n\t\t\t\t),\n\t\t\t\tstartToken,\n\t\t\t\tendToken,\n\t\t\t);\n\t\t} else {\n\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(\n\t\t\t\tselection,\n\t\t\t\tstartToken,\n\t\t\t\tendToken,\n\t\t\t\tthis._insertSpace,\n\t\t\t);\n\t\t\tthis._usedEndToken = ops.length === 1 ? endToken : null;\n\t\t}\n\n\t\tfor (const op of ops) {\n\t\t\tbuilder.addTrackedEditOperation(op.range, op.text);\n\t\t}\n\t}\n\n\tpublic static _createRemoveBlockCommentOperations(\n\t\tr: Range,\n\t\tstartToken: string,\n\t\tendToken: string,\n\t): ISingleEditOperation[] {\n\t\tconst res: ISingleEditOperation[] = [];\n\n\t\tif (Range.isEmpty(r)) {\n\t\t\t// Remove both continuously\n\t\t\tres.push(\n\t\t\t\tEditOperation.delete(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tr.startLineNumber,\n\t\t\t\t\t\tr.startColumn - startToken.length,\n\t\t\t\t\t\tr.endLineNumber,\n\t\t\t\t\t\tr.endColumn + endToken.length,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\t// Remove block comment start\n\t\t\tres.push(\n\t\t\t\tEditOperation.delete(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tr.startLineNumber,\n\t\t\t\t\t\tr.startColumn - startToken.length,\n\t\t\t\t\t\tr.startLineNumber,\n\t\t\t\t\t\tr.startColumn,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// Remove block comment end\n\t\t\tres.push(\n\t\t\t\tEditOperation.delete(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tr.endLineNumber,\n\t\t\t\t\t\tr.endColumn,\n\t\t\t\t\t\tr.endLineNumber,\n\t\t\t\t\t\tr.endColumn + endToken.length,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic static _createAddBlockCommentOperations(\n\t\tr: Range,\n\t\tstartToken: string,\n\t\tendToken: string,\n\t\tinsertSpace: boolean,\n\t): ISingleEditOperation[] {\n\t\tconst res: ISingleEditOperation[] = [];\n\n\t\tif (Range.isEmpty(r)) {\n\t\t\t// Insert both continuously\n\t\t\tres.push(\n\t\t\t\tEditOperation.replace(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tr.startLineNumber,\n\t\t\t\t\t\tr.startColumn,\n\t\t\t\t\t\tr.endLineNumber,\n\t\t\t\t\t\tr.endColumn,\n\t\t\t\t\t),\n\t\t\t\t\tstartToken + \"  \" + endToken,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\t// Insert block comment start\n\t\t\tres.push(\n\t\t\t\tEditOperation.insert(\n\t\t\t\t\tnew Position(r.startLineNumber, r.startColumn),\n\t\t\t\t\tstartToken + (insertSpace ? \" \" : \"\"),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// Insert block comment end\n\t\t\tres.push(\n\t\t\t\tEditOperation.insert(\n\t\t\t\t\tnew Position(r.endLineNumber, r.endColumn),\n\t\t\t\t\t(insertSpace ? \" \" : \"\") + endToken,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tconst startLineNumber = this._selection.startLineNumber;\n\t\tconst startColumn = this._selection.startColumn;\n\n\t\tmodel.tokenization.tokenizeIfCheap(startLineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t);\n\t\tconst config =\n\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlanguageId,\n\t\t\t).comments;\n\t\tif (\n\t\t\t!config ||\n\t\t\t!config.blockCommentStartToken ||\n\t\t\t!config.blockCommentEndToken\n\t\t) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tthis._createOperationsForBlockComment(\n\t\t\tthis._selection,\n\t\t\tconfig.blockCommentStartToken,\n\t\t\tconfig.blockCommentEndToken,\n\t\t\tthis._insertSpace,\n\t\t\tmodel,\n\t\t\tbuilder,\n\t\t);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tif (inverseEditOperations.length === 2) {\n\t\t\tconst startTokenEditOperation = inverseEditOperations[0];\n\t\t\tconst endTokenEditOperation = inverseEditOperations[1];\n\n\t\t\treturn new Selection(\n\t\t\t\tstartTokenEditOperation.range.endLineNumber,\n\t\t\t\tstartTokenEditOperation.range.endColumn,\n\t\t\t\tendTokenEditOperation.range.startLineNumber,\n\t\t\t\tendTokenEditOperation.range.startColumn,\n\t\t\t);\n\t\t} else {\n\t\t\tconst srcRange = inverseEditOperations[0].range;\n\t\t\tconst deltaColumn = this._usedEndToken\n\t\t\t\t? -this._usedEndToken.length - 1\n\t\t\t\t: 0; // minus 1 space before endToken\n\t\t\treturn new Selection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
