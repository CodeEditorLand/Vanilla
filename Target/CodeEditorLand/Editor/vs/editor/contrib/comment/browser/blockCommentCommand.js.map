{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/comment/browser/blockCommentCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../../../common/editorCommon.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\n\nexport class BlockCommentCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _insertSpace: boolean;\n\tprivate _usedEndToken: string | null;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\tinsertSpace: boolean,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._insertSpace = insertSpace;\n\t\tthis._usedEndToken = null;\n\t}\n\n\tpublic static _haystackHasNeedleAtOffset(haystack: string, needle: string, offset: number): boolean {\n\t\tif (offset < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst needleLength = needle.length;\n\t\tconst haystackLength = haystack.length;\n\t\tif (offset + needleLength > haystackLength) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < needleLength; i++) {\n\t\t\tconst codeA = haystack.charCodeAt(offset + i);\n\t\t\tconst codeB = needle.charCodeAt(i);\n\n\t\t\tif (codeA === codeB) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (codeA >= CharCode.A && codeA <= CharCode.Z && codeA + 32 === codeB) {\n\t\t\t\t// codeA is upper-case variant of codeB\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (codeB >= CharCode.A && codeB <= CharCode.Z && codeB + 32 === codeA) {\n\t\t\t\t// codeB is upper-case variant of codeA\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _createOperationsForBlockComment(selection: Range, startToken: string, endToken: string, insertSpace: boolean, model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLineNumber = selection.startLineNumber;\n\t\tconst startColumn = selection.startColumn;\n\t\tconst endLineNumber = selection.endLineNumber;\n\t\tconst endColumn = selection.endColumn;\n\n\t\tconst startLineText = model.getLineContent(startLineNumber);\n\t\tconst endLineText = model.getLineContent(endLineNumber);\n\n\t\tlet startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\n\t\tlet endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\n\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\tconst lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\n\n\t\t\t\tif (lineBetweenTokens.indexOf(endToken) >= 0) {\n\t\t\t\t\t// force to add a block comment\n\t\t\t\t\tstartTokenIndex = -1;\n\t\t\t\t\tendTokenIndex = -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\n\t\t\t\tconst endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\n\n\t\t\t\tif (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\n\t\t\t\t\t// force to add a block comment\n\t\t\t\t\tstartTokenIndex = -1;\n\t\t\t\t\tendTokenIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet ops: ISingleEditOperation[];\n\n\t\tif (startTokenIndex !== -1 && endTokenIndex !== -1) {\n\t\t\t// Consider spaces as part of the comment tokens\n\t\t\tif (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === CharCode.Space) {\n\t\t\t\t// Pretend the start token contains a trailing space\n\t\t\t\tstartToken = startToken + ' ';\n\t\t\t}\n\n\t\t\tif (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === CharCode.Space) {\n\t\t\t\t// Pretend the end token contains a leading space\n\t\t\t\tendToken = ' ' + endToken;\n\t\t\t\tendTokenIndex -= 1;\n\t\t\t}\n\t\t\tops = BlockCommentCommand._createRemoveBlockCommentOperations(\n\t\t\t\tnew Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken\n\t\t\t);\n\t\t} else {\n\t\t\tops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\n\t\t\tthis._usedEndToken = ops.length === 1 ? endToken : null;\n\t\t}\n\n\t\tfor (const op of ops) {\n\t\t\tbuilder.addTrackedEditOperation(op.range, op.text);\n\t\t}\n\t}\n\n\tpublic static _createRemoveBlockCommentOperations(r: Range, startToken: string, endToken: string): ISingleEditOperation[] {\n\t\tconst res: ISingleEditOperation[] = [];\n\n\t\tif (!Range.isEmpty(r)) {\n\t\t\t// Remove block comment start\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn - startToken.length,\n\t\t\t\tr.startLineNumber, r.startColumn\n\t\t\t)));\n\n\t\t\t// Remove block comment end\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.endLineNumber, r.endColumn,\n\t\t\t\tr.endLineNumber, r.endColumn + endToken.length\n\t\t\t)));\n\t\t} else {\n\t\t\t// Remove both continuously\n\t\t\tres.push(EditOperation.delete(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn - startToken.length,\n\t\t\t\tr.endLineNumber, r.endColumn + endToken.length\n\t\t\t)));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic static _createAddBlockCommentOperations(r: Range, startToken: string, endToken: string, insertSpace: boolean): ISingleEditOperation[] {\n\t\tconst res: ISingleEditOperation[] = [];\n\n\t\tif (!Range.isEmpty(r)) {\n\t\t\t// Insert block comment start\n\t\t\tres.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\n\n\t\t\t// Insert block comment end\n\t\t\tres.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\n\t\t} else {\n\t\t\t// Insert both continuously\n\t\t\tres.push(EditOperation.replace(new Range(\n\t\t\t\tr.startLineNumber, r.startColumn,\n\t\t\t\tr.endLineNumber, r.endColumn\n\t\t\t), startToken + '  ' + endToken));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLineNumber = this._selection.startLineNumber;\n\t\tconst startColumn = this._selection.startColumn;\n\n\t\tmodel.tokenization.tokenizeIfCheap(startLineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\n\t\tconst config = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n\t\tif (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n\t\t\t// Mode does not support block comments\n\t\t\treturn;\n\t\t}\n\n\t\tthis._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tif (inverseEditOperations.length === 2) {\n\t\t\tconst startTokenEditOperation = inverseEditOperations[0];\n\t\t\tconst endTokenEditOperation = inverseEditOperations[1];\n\n\t\t\treturn new Selection(\n\t\t\t\tstartTokenEditOperation.range.endLineNumber,\n\t\t\t\tstartTokenEditOperation.range.endColumn,\n\t\t\t\tendTokenEditOperation.range.startLineNumber,\n\t\t\t\tendTokenEditOperation.range.startColumn\n\t\t\t);\n\t\t} else {\n\t\t\tconst srcRange = inverseEditOperations[0].range;\n\t\t\tconst deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\n\t\t\treturn new Selection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn + deltaColumn\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
