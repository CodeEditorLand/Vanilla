{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/wordPartOperations/browser/wordPartOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { registerEditorCommand } from \"../../../browser/editorExtensions.js\";\nimport type { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type { WordCharacterClassifier } from \"../../../common/core/wordCharacterClassifier.js\";\nimport {\n\ttype DeleteWordContext,\n\tWordNavigationType,\n\tWordPartOperations,\n} from \"../../../common/cursor/cursorWordOperations.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport {\n\tDeleteWordCommand,\n\tMoveWordCommand,\n} from \"../../wordOperations/browser/wordOperations.js\";\n\nexport class DeleteWordPartLeft extends DeleteWordCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: \"deleteWordPartLeft\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.Backspace,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected _delete(\n\t\tctx: DeleteWordContext,\n\t\twordNavigationType: WordNavigationType,\n\t): Range {\n\t\tconst r = WordPartOperations.deleteWordPartLeft(ctx);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\treturn new Range(1, 1, 1, 1);\n\t}\n}\n\nexport class DeleteWordPartRight extends DeleteWordCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: \"deleteWordPartRight\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.Delete },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected _delete(\n\t\tctx: DeleteWordContext,\n\t\twordNavigationType: WordNavigationType,\n\t): Range {\n\t\tconst r = WordPartOperations.deleteWordPartRight(ctx);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\tconst lineCount = ctx.model.getLineCount();\n\t\tconst maxColumn = ctx.model.getLineMaxColumn(lineCount);\n\t\treturn new Range(lineCount, maxColumn, lineCount, maxColumn);\n\t}\n}\n\nexport class WordPartLeftCommand extends MoveWordCommand {\n\tprotected _move(\n\t\twordSeparators: WordCharacterClassifier,\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\twordNavigationType: WordNavigationType,\n\t\thasMulticursor: boolean,\n\t): Position {\n\t\treturn WordPartOperations.moveWordPartLeft(\n\t\t\twordSeparators,\n\t\t\tmodel,\n\t\t\tposition,\n\t\t\thasMulticursor,\n\t\t);\n\t}\n}\nexport class CursorWordPartLeft extends WordPartLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: \"cursorWordPartLeft\",\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.LeftArrow,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n}\n// Register previous id for compatibility purposes\nCommandsRegistry.registerCommandAlias(\n\t\"cursorWordPartStartLeft\",\n\t\"cursorWordPartLeft\",\n);\n\nexport class CursorWordPartLeftSelect extends WordPartLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: \"cursorWordPartLeftSelect\",\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.WinCtrl |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyCode.LeftArrow,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n}\n// Register previous id for compatibility purposes\nCommandsRegistry.registerCommandAlias(\n\t\"cursorWordPartStartLeftSelect\",\n\t\"cursorWordPartLeftSelect\",\n);\n\nexport class WordPartRightCommand extends MoveWordCommand {\n\tprotected _move(\n\t\twordSeparators: WordCharacterClassifier,\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\twordNavigationType: WordNavigationType,\n\t\thasMulticursor: boolean,\n\t): Position {\n\t\treturn WordPartOperations.moveWordPartRight(\n\t\t\twordSeparators,\n\t\t\tmodel,\n\t\t\tposition,\n\t\t);\n\t}\n}\nexport class CursorWordPartRight extends WordPartRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: \"cursorWordPartRight\",\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.RightArrow,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n}\nexport class CursorWordPartRightSelect extends WordPartRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: \"cursorWordPartRightSelect\",\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.WinCtrl |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyCode.RightArrow,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n}\n\nregisterEditorCommand(new DeleteWordPartLeft());\nregisterEditorCommand(new DeleteWordPartRight());\nregisterEditorCommand(new CursorWordPartLeft());\nregisterEditorCommand(new CursorWordPartLeftSelect());\nregisterEditorCommand(new CursorWordPartRight());\nregisterEditorCommand(new CursorWordPartRightSelect());\n"],
  "mappings": "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",
  "names": []
}
