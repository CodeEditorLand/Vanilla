{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/wordPartOperations/test/browser/wordPartOperations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { EditorCommand } from '../../../../browser/editorExtensions.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { deserializePipePositions, serializePipePositions, testRepeatedActionAndExtractPositions } from '../../../wordOperations/test/browser/wordTestUtils.js';\nimport { CursorWordPartLeft, CursorWordPartLeftSelect, CursorWordPartRight, CursorWordPartRightSelect, DeleteWordPartLeft, DeleteWordPartRight } from '../../browser/wordPartOperations.js';\nimport { StaticServiceAccessor } from './utils.js';\nimport { TestLanguageConfigurationService } from '../../../../test/common/modes/testLanguageConfigurationService.js';\n\nsuite('WordPartOperations', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst _deleteWordPartLeft = new DeleteWordPartLeft();\n\tconst _deleteWordPartRight = new DeleteWordPartRight();\n\tconst _cursorWordPartLeft = new CursorWordPartLeft();\n\tconst _cursorWordPartLeftSelect = new CursorWordPartLeftSelect();\n\tconst _cursorWordPartRight = new CursorWordPartRight();\n\tconst _cursorWordPartRightSelect = new CursorWordPartRightSelect();\n\n\tconst serviceAccessor = new StaticServiceAccessor().withService(\n\t\tILanguageConfigurationService,\n\t\tnew TestLanguageConfigurationService()\n\t);\n\n\tfunction runEditorCommand(editor: ICodeEditor, command: EditorCommand): void {\n\t\tcommand.runEditorCommand(serviceAccessor, editor, null);\n\t}\n\tfunction cursorWordPartLeft(editor: ICodeEditor, inSelectionmode: boolean = false): void {\n\t\trunEditorCommand(editor, inSelectionmode ? _cursorWordPartLeftSelect : _cursorWordPartLeft);\n\t}\n\tfunction cursorWordPartRight(editor: ICodeEditor, inSelectionmode: boolean = false): void {\n\t\trunEditorCommand(editor, inSelectionmode ? _cursorWordPartRightSelect : _cursorWordPartRight);\n\t}\n\tfunction deleteWordPartLeft(editor: ICodeEditor): void {\n\t\trunEditorCommand(editor, _deleteWordPartLeft);\n\t}\n\tfunction deleteWordPartRight(editor: ICodeEditor): void {\n\t\trunEditorCommand(editor, _deleteWordPartRight);\n\t}\n\n\ttest('cursorWordPartLeft - basic', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|start| |line|',\n\t\t\t'|this|Is|A|Camel|Case|Var|  |this_|is_|a_|snake_|case_|var| |THIS_|IS_|CAPS_|SNAKE| |this_|IS|Mixed|Use|',\n\t\t\t'|end| |line'\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartLeft - issue #53899: whitespace', () => {\n\t\tconst EXPECTED = '|myvar| |=| |\\'|demonstration|     |of| |selection| |with| |space|\\'';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartLeft - issue #53899: underscores', () => {\n\t\tconst EXPECTED = '|myvar| |=| |\\'|demonstration_____|of| |selection| |with| |space|\\'';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - basic', () => {\n\t\tconst EXPECTED = [\n\t\t\t'start| |line|',\n\t\t\t'|this|Is|A|Camel|Case|Var|  |this|_is|_a|_snake|_case|_var| |THIS|_IS|_CAPS|_SNAKE| |this|_IS|Mixed|Use|',\n\t\t\t'|end| |line|'\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(3, 9))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - issue #53899: whitespace', () => {\n\t\tconst EXPECTED = 'myvar| |=| |\\'|demonstration|     |of| |selection| |with| |space|\\'|';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 52))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - issue #53899: underscores', () => {\n\t\tconst EXPECTED = 'myvar| |=| |\\'|demonstration|_____of| |selection| |with| |space|\\'|';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 52))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - issue #53899: second case', () => {\n\t\tconst EXPECTED = [\n\t\t\t';| |--| |1|',\n\t\t\t'|;|        |--| |2|',\n\t\t\t'|;|    |#|3|',\n\t\t\t'|;|   |#|4|'\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(4, 7))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #93239 - cursorWordPartRight', () => {\n\t\tconst EXPECTED = [\n\t\t\t'foo|_bar|',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 8))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #93239 - cursorWordPartLeft', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|foo_|bar',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 8),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('deleteWordPartLeft - basic', () => {\n\t\tconst EXPECTED = '|   |/*| |Just| |some| |text| |a|+=| |3| |+|5|-|3| |*/|  |this|Is|A|Camel|Case|Var|  |this_|is_|a_|snake_|case_|var| |THIS_|IS_|CAPS_|SNAKE| |this_|IS|Mixed|Use';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1000),\n\t\t\ted => deleteWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getValue().length === 0\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('deleteWordPartRight - basic', () => {\n\t\tconst EXPECTED = '   |/*| |Just| |some| |text| |a|+=| |3| |+|5|-|3| |*/|  |this|Is|A|Camel|Case|Var|  |this|_is|_a|_snake|_case|_var| |THIS|_IS|_CAPS|_SNAKE| |this|_IS|Mixed|Use|';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => deleteWordPartRight(ed),\n\t\t\ted => new Position(1, text.length - ed.getValue().length + 1),\n\t\t\ted => ed.getValue().length === 0\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: cursorWordPartLeft stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|this-|is-|a-|kebab-|case-|var| |THIS-|IS-|CAPS-|KEBAB| |this-|IS|Mixed|Use',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1)),\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}\u00B7\" } // default characters sans '$-%~' plus '\u00B7'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: cursorWordPartRight stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'this|-is|-a|-kebab|-case|-var| |THIS|-IS|-CAPS|-KEBAB| |this|-IS|Mixed|Use|',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 60)),\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}\u00B7\" } // default characters sans '$-%~' plus '\u00B7'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: deleteWordPartLeft stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|this-|is-|a-|kebab-|case-|var| |THIS-|IS-|CAPS-|KEBAB| |this-|IS|Mixed|Use',\n\t\t].join(' ');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => deleteWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getValue().length === 0,\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}\u00B7\" } // default characters sans '$-%~' plus '\u00B7'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: deleteWordPartRight stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'this|-is|-a|-kebab|-case|-var| |THIS|-IS|-CAPS|-KEBAB| |this|-IS|Mixed|Use|',\n\t\t].join(' ');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => deleteWordPartRight(ed),\n\t\t\ted => new Position(1, text.length - ed.getValue().length + 1),\n\t\t\ted => ed.getValue().length === 0,\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}\u00B7\" } // default characters sans '$-%~' plus '\u00B7'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
