var A=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var x=(b,n,i,o)=>{for(var r=o>1?void 0:o?P(n,i):n,s=b.length-1,t;s>=0;s--)(t=b[s])&&(r=(o?t(n,i,r):t(r))||r);return o&&r&&A(n,i,r),r},O=(b,n)=>(i,o)=>n(i,o,b);import*as h from"../../../../../vs/base/common/strings.js";import{ShiftCommand as T}from"../../../../../vs/editor/common/commands/shiftCommand.js";import{EditorAutoIndentStrategy as D}from"../../../../../vs/editor/common/config/editorOptions.js";import{Range as f}from"../../../../../vs/editor/common/core/range.js";import{Selection as W}from"../../../../../vs/editor/common/core/selection.js";import"../../../../../vs/editor/common/editorCommon.js";import{getGoodIndentForLine as N,getIndentMetadata as R}from"../../../../../vs/editor/common/languages/autoIndent.js";import{getEnterAction as w}from"../../../../../vs/editor/common/languages/enterAction.js";import{IndentAction as _}from"../../../../../vs/editor/common/languages/languageConfiguration.js";import{ILanguageConfigurationService as z}from"../../../../../vs/editor/common/languages/languageConfigurationRegistry.js";import{IndentConsts as B}from"../../../../../vs/editor/common/languages/supports/indentRules.js";import"../../../../../vs/editor/common/model.js";import*as L from"../../../../../vs/editor/contrib/indentation/common/indentUtils.js";let M=class{constructor(n,i,o,r){this._languageConfigurationService=r;this._selection=n,this._isMovingDown=i,this._autoIndent=o,this._selectionId=null,this._moveEndLineSelectionShrink=!1}_selection;_isMovingDown;_autoIndent;_selectionId;_moveEndPositionDown;_moveEndLineSelectionShrink;getEditOperations(n,i){const o=()=>n.getLanguageId(),r=(a,g)=>n.getLanguageIdAtPosition(a,g),s=n.getLineCount();if(this._isMovingDown&&this._selection.endLineNumber===s){this._selectionId=i.trackSelection(this._selection);return}if(!this._isMovingDown&&this._selection.startLineNumber===1){this._selectionId=i.trackSelection(this._selection);return}this._moveEndPositionDown=!1;let t=this._selection;t.startLineNumber<t.endLineNumber&&t.endColumn===1&&(this._moveEndPositionDown=!0,t=t.setEndPosition(t.endLineNumber-1,n.getLineMaxColumn(t.endLineNumber-1)));const{tabSize:e,indentSize:l,insertSpaces:c}=n.getOptions(),d=this.buildIndentConverter(e,l,c);if(t.startLineNumber===t.endLineNumber&&n.getLineMaxColumn(t.startLineNumber)===1){const a=t.startLineNumber,g=this._isMovingDown?a+1:a-1;n.getLineMaxColumn(g)===1?i.addEditOperation(new f(1,1,1,1),null):(i.addEditOperation(new f(a,1,a,1),n.getLineContent(g)),i.addEditOperation(new f(g,1,g,n.getLineMaxColumn(g)),null)),t=new W(g,1,g,1)}else{let a,g;if(this._isMovingDown){a=t.endLineNumber+1,g=n.getLineContent(a),i.addEditOperation(new f(a-1,n.getLineMaxColumn(a-1),a,n.getLineMaxColumn(a)),null);let C=g;if(this.shouldAutoIndent(n,t)){const v=this.matchEnterRule(n,d,e,a,t.startLineNumber-1);if(v!==null){const m=h.getLeadingWhitespace(n.getLineContent(a)),p=v+L.getSpaceCnt(m,e);C=L.generateIndent(p,e,c)+this.trimStart(g)}else{const m={tokenization:{getLineTokens:u=>u===t.startLineNumber?n.tokenization.getLineTokens(a):n.tokenization.getLineTokens(u),getLanguageId:o,getLanguageIdAtPosition:r},getLineContent:u=>u===t.startLineNumber?n.getLineContent(a):n.getLineContent(u)},p=N(this._autoIndent,m,n.getLanguageIdAtPosition(a,1),t.startLineNumber,d,this._languageConfigurationService);if(p!==null){const u=h.getLeadingWhitespace(n.getLineContent(a)),S=L.getSpaceCnt(p,e),E=L.getSpaceCnt(u,e);S!==E&&(C=L.generateIndent(S,e,c)+this.trimStart(g))}}i.addEditOperation(new f(t.startLineNumber,1,t.startLineNumber,1),C+`
`);const I=this.matchEnterRuleMovingDown(n,d,e,t.startLineNumber,a,C);if(I!==null)I!==0&&this.getIndentEditsOfMovingBlock(n,i,t,e,c,I);else{const m={tokenization:{getLineTokens:u=>u===t.startLineNumber?n.tokenization.getLineTokens(a):u>=t.startLineNumber+1&&u<=t.endLineNumber+1?n.tokenization.getLineTokens(u-1):n.tokenization.getLineTokens(u),getLanguageId:o,getLanguageIdAtPosition:r},getLineContent:u=>u===t.startLineNumber?C:u>=t.startLineNumber+1&&u<=t.endLineNumber+1?n.getLineContent(u-1):n.getLineContent(u)},p=N(this._autoIndent,m,n.getLanguageIdAtPosition(a,1),t.startLineNumber+1,d,this._languageConfigurationService);if(p!==null){const u=h.getLeadingWhitespace(n.getLineContent(t.startLineNumber)),S=L.getSpaceCnt(p,e),E=L.getSpaceCnt(u,e);if(S!==E){const k=S-E;this.getIndentEditsOfMovingBlock(n,i,t,e,c,k)}}}}else i.addEditOperation(new f(t.startLineNumber,1,t.startLineNumber,1),C+`
`)}else if(a=t.startLineNumber-1,g=n.getLineContent(a),i.addEditOperation(new f(a,1,a+1,1),null),i.addEditOperation(new f(t.endLineNumber,n.getLineMaxColumn(t.endLineNumber),t.endLineNumber,n.getLineMaxColumn(t.endLineNumber)),`
`+g),this.shouldAutoIndent(n,t)){const C={tokenization:{getLineTokens:I=>I===a?n.tokenization.getLineTokens(t.startLineNumber):n.tokenization.getLineTokens(I),getLanguageId:o,getLanguageIdAtPosition:r},getLineContent:I=>I===a?n.getLineContent(t.startLineNumber):n.getLineContent(I)},v=this.matchEnterRule(n,d,e,t.startLineNumber,t.startLineNumber-2);if(v!==null)v!==0&&this.getIndentEditsOfMovingBlock(n,i,t,e,c,v);else{const I=N(this._autoIndent,C,n.getLanguageIdAtPosition(t.startLineNumber,1),a,d,this._languageConfigurationService);if(I!==null){const m=h.getLeadingWhitespace(n.getLineContent(t.startLineNumber)),p=L.getSpaceCnt(I,e),u=L.getSpaceCnt(m,e);if(p!==u){const S=p-u;this.getIndentEditsOfMovingBlock(n,i,t,e,c,S)}}}}}this._selectionId=i.trackSelection(t)}buildIndentConverter(n,i,o){return{shiftIndent:r=>T.shiftIndent(r,r.length+1,n,i,o),unshiftIndent:r=>T.unshiftIndent(r,r.length+1,n,i,o)}}parseEnterResult(n,i,o,r,s){if(s){let t=s.indentation;s.indentAction===_.None||s.indentAction===_.Indent?t=s.indentation+s.appendText:s.indentAction===_.IndentOutdent?t=s.indentation:s.indentAction===_.Outdent&&(t=i.unshiftIndent(s.indentation)+s.appendText);const e=n.getLineContent(r);if(this.trimStart(e).indexOf(this.trimStart(t))>=0){const l=h.getLeadingWhitespace(n.getLineContent(r));let c=h.getLeadingWhitespace(t);const d=R(n,r,this._languageConfigurationService);d!==null&&d&B.DECREASE_MASK&&(c=i.unshiftIndent(c));const a=L.getSpaceCnt(c,o),g=L.getSpaceCnt(l,o);return a-g}}return null}matchEnterRuleMovingDown(n,i,o,r,s,t){if(h.lastNonWhitespaceIndex(t)>=0){const e=n.getLineMaxColumn(s),l=w(this._autoIndent,n,new f(s,e,s,e),this._languageConfigurationService);return this.parseEnterResult(n,i,o,r,l)}else{let e=r-1;for(;e>=1;){const d=n.getLineContent(e);if(h.lastNonWhitespaceIndex(d)>=0)break;e--}if(e<1||r>n.getLineCount())return null;const l=n.getLineMaxColumn(e),c=w(this._autoIndent,n,new f(e,l,e,l),this._languageConfigurationService);return this.parseEnterResult(n,i,o,r,c)}}matchEnterRule(n,i,o,r,s,t){let e=s;for(;e>=1;){let d;if(e===s&&t!==void 0?d=t:d=n.getLineContent(e),h.lastNonWhitespaceIndex(d)>=0)break;e--}if(e<1||r>n.getLineCount())return null;const l=n.getLineMaxColumn(e),c=w(this._autoIndent,n,new f(e,l,e,l),this._languageConfigurationService);return this.parseEnterResult(n,i,o,r,c)}trimStart(n){return n.replace(/^\s+/,"")}shouldAutoIndent(n,i){if(this._autoIndent<D.Full||!n.tokenization.isCheapToTokenize(i.startLineNumber))return!1;const o=n.getLanguageIdAtPosition(i.startLineNumber,1),r=n.getLanguageIdAtPosition(i.endLineNumber,1);return!(o!==r||this._languageConfigurationService.getLanguageConfiguration(o).indentRulesSupport===null)}getIndentEditsOfMovingBlock(n,i,o,r,s,t){for(let e=o.startLineNumber;e<=o.endLineNumber;e++){const l=n.getLineContent(e),c=h.getLeadingWhitespace(l),a=L.getSpaceCnt(c,r)+t,g=L.generateIndent(a,r,s);g!==c&&(i.addEditOperation(new f(e,1,e,c.length+1),g),e===o.endLineNumber&&o.endColumn<=c.length+1&&g===""&&(this._moveEndLineSelectionShrink=!0))}}computeCursorState(n,i){let o=i.getTrackedSelection(this._selectionId);return this._moveEndPositionDown&&(o=o.setEndPosition(o.endLineNumber+1,1)),this._moveEndLineSelectionShrink&&o.startLineNumber<o.endLineNumber&&(o=o.setEndPosition(o.endLineNumber,2)),o}};M=x([O(3,z)],M);export{M as MoveLinesCommand};
