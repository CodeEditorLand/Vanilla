{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/linesOperations/browser/linesOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { MenuId } from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { CoreEditingCommands } from \"../../../browser/coreCommands.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n} from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\ttype IActionOptions,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n} from \"../../../browser/editorExtensions.js\";\nimport {\n\tReplaceCommand,\n\tReplaceCommandThatPreservesSelection,\n\tReplaceCommandThatSelectsText,\n} from \"../../../common/commands/replaceCommand.js\";\nimport { TrimTrailingWhitespaceCommand } from \"../../../common/commands/trimTrailingWhitespaceCommand.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../common/core/editOperation.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport { EnterOperation } from \"../../../common/cursor/cursorTypeEditOperations.js\";\nimport { TypeOperations } from \"../../../common/cursor/cursorTypeOperations.js\";\nimport type { ICommand } from \"../../../common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../common/editorContextKeys.js\";\nimport { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { CopyLinesCommand } from \"./copyLinesCommand.js\";\nimport { MoveLinesCommand } from \"./moveLinesCommand.js\";\nimport { SortLinesCommand } from \"./sortLinesCommand.js\";\n\n// copy lines\n\nabstract class AbstractCopyLinesAction extends EditorAction {\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor\n\t\t\t.getSelections()\n\t\t\t.map((selection, index) => ({ selection, index, ignore: false }));\n\t\tselections.sort((a, b) =>\n\t\t\tRange.compareRangesUsingStarts(a.selection, b.selection),\n\t\t);\n\n\t\t// Remove selections that would result in copying the same line\n\t\tlet prev = selections[0];\n\t\tfor (let i = 1; i < selections.length; i++) {\n\t\t\tconst curr = selections[i];\n\t\t\tif (\n\t\t\t\tprev.selection.endLineNumber === curr.selection.startLineNumber\n\t\t\t) {\n\t\t\t\t// these two selections would copy the same line\n\t\t\t\tif (prev.index < curr.index) {\n\t\t\t\t\t// prev wins\n\t\t\t\t\tcurr.ignore = true;\n\t\t\t\t} else {\n\t\t\t\t\t// curr wins\n\t\t\t\t\tprev.ignore = true;\n\t\t\t\t\tprev = curr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(\n\t\t\t\tnew CopyLinesCommand(\n\t\t\t\t\tselection.selection,\n\t\t\t\t\tthis.down,\n\t\t\t\t\tselection.ignore,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: \"editor.action.copyLinesUpAction\",\n\t\t\tlabel: nls.localize(\"lines.copyUp\", \"Copy Line Up\"),\n\t\t\talias: \"Copy Line Up\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyCode.UpArrow,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"2_line\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miCopyLinesUp\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Copy Line Up\",\n\t\t\t\t),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: \"editor.action.copyLinesDownAction\",\n\t\t\tlabel: nls.localize(\"lines.copyDown\", \"Copy Line Down\"),\n\t\t\talias: \"Copy Line Down\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyCode.DownArrow,\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"2_line\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miCopyLinesDown\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Co&&py Line Down\",\n\t\t\t\t),\n\t\t\t\torder: 2,\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport class DuplicateSelectionAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.duplicateSelection\",\n\t\t\tlabel: nls.localize(\"duplicateSelection\", \"Duplicate Selection\"),\n\t\t\talias: \"Duplicate Selection\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"2_line\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miDuplicateSelection\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Duplicate Selection\",\n\t\t\t\t),\n\t\t\t\torder: 5,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tconst model = editor.getModel();\n\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tcommands.push(new CopyLinesCommand(selection, true));\n\t\t\t} else {\n\t\t\t\tconst insertSelection = new Selection(\n\t\t\t\t\tselection.endLineNumber,\n\t\t\t\t\tselection.endColumn,\n\t\t\t\t\tselection.endLineNumber,\n\t\t\t\t\tselection.endColumn,\n\t\t\t\t);\n\t\t\t\tcommands.push(\n\t\t\t\t\tnew ReplaceCommandThatSelectsText(\n\t\t\t\t\t\tinsertSelection,\n\t\t\t\t\t\tmodel.getValueInRange(selection),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// move lines\n\nabstract class AbstractMoveLinesAction extends EditorAction {\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(\n\t\t\tILanguageConfigurationService,\n\t\t);\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections() || [];\n\t\tconst autoIndent = editor.getOption(EditorOption.autoIndent);\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(\n\t\t\t\tnew MoveLinesCommand(\n\t\t\t\t\tselection,\n\t\t\t\t\tthis.down,\n\t\t\t\t\tautoIndent,\n\t\t\t\t\tlanguageConfigurationService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: \"editor.action.moveLinesUpAction\",\n\t\t\tlabel: nls.localize(\"lines.moveUp\", \"Move Line Up\"),\n\t\t\talias: \"Move Line Up\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"2_line\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miMoveLinesUp\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Mo&&ve Line Up\",\n\t\t\t\t),\n\t\t\t\torder: 3,\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: \"editor.action.moveLinesDownAction\",\n\t\t\tlabel: nls.localize(\"lines.moveDown\", \"Move Line Down\"),\n\t\t\talias: \"Move Line Down\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"2_line\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miMoveLinesDown\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Move &&Line Down\",\n\t\t\t\t),\n\t\t\t\torder: 4,\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport abstract class AbstractSortLinesAction extends EditorAction {\n\tprivate readonly descending: boolean;\n\n\tconstructor(descending: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.descending = descending;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tlet selections = editor.getSelections();\n\t\tif (selections.length === 1 && selections[0].isEmpty()) {\n\t\t\t// Apply to whole document.\n\t\t\tselections = [\n\t\t\t\tnew Selection(\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tmodel.getLineCount(),\n\t\t\t\t\tmodel.getLineMaxColumn(model.getLineCount()),\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\n\t\tfor (const selection of selections) {\n\t\t\tif (\n\t\t\t\t!SortLinesCommand.canRun(\n\t\t\t\t\teditor.getModel(),\n\t\t\t\t\tselection,\n\t\t\t\t\tthis.descending,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new SortLinesCommand(selections[i], this.descending);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: \"editor.action.sortLinesAscending\",\n\t\t\tlabel: nls.localize(\"lines.sortAscending\", \"Sort Lines Ascending\"),\n\t\t\talias: \"Sort Lines Ascending\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n}\n\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: \"editor.action.sortLinesDescending\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"lines.sortDescending\",\n\t\t\t\t\"Sort Lines Descending\",\n\t\t\t),\n\t\t\talias: \"Sort Lines Descending\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n}\n\nexport class DeleteDuplicateLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.removeDuplicateLines\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"lines.deleteDuplicates\",\n\t\t\t\t\"Delete Duplicate Lines\",\n\t\t\t),\n\t\t\talias: \"Delete Duplicate Lines\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model: ITextModel = editor.getModel();\n\t\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst endCursorState: Selection[] = [];\n\n\t\tlet linesDeleted = 0;\n\t\tlet updateSelection = true;\n\n\t\tlet selections = editor.getSelections();\n\t\tif (selections.length === 1 && selections[0].isEmpty()) {\n\t\t\t// Apply to whole document.\n\t\t\tselections = [\n\t\t\t\tnew Selection(\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tmodel.getLineCount(),\n\t\t\t\t\tmodel.getLineMaxColumn(model.getLineCount()),\n\t\t\t\t),\n\t\t\t];\n\t\t\tupdateSelection = false;\n\t\t}\n\n\t\tfor (const selection of selections) {\n\t\t\tconst uniqueLines = new Set();\n\t\t\tconst lines = [];\n\n\t\t\tfor (\n\t\t\t\tlet i = selection.startLineNumber;\n\t\t\t\ti <= selection.endLineNumber;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\tconst line = model.getLineContent(i);\n\n\t\t\t\tif (uniqueLines.has(line)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlines.push(line);\n\t\t\t\tuniqueLines.add(line);\n\t\t\t}\n\n\t\t\tconst selectionToReplace = new Selection(\n\t\t\t\tselection.startLineNumber,\n\t\t\t\t1,\n\t\t\t\tselection.endLineNumber,\n\t\t\t\tmodel.getLineMaxColumn(selection.endLineNumber),\n\t\t\t);\n\n\t\t\tconst adjustedSelectionStart =\n\t\t\t\tselection.startLineNumber - linesDeleted;\n\t\t\tconst finalSelection = new Selection(\n\t\t\t\tadjustedSelectionStart,\n\t\t\t\t1,\n\t\t\t\tadjustedSelectionStart + lines.length - 1,\n\t\t\t\tlines[lines.length - 1].length,\n\t\t\t);\n\n\t\t\tedits.push(\n\t\t\t\tEditOperation.replace(selectionToReplace, lines.join(\"\\n\")),\n\t\t\t);\n\t\t\tendCursorState.push(finalSelection);\n\n\t\t\tlinesDeleted +=\n\t\t\t\tselection.endLineNumber -\n\t\t\t\tselection.startLineNumber +\n\t\t\t\t1 -\n\t\t\t\tlines.length;\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(\n\t\t\tthis.id,\n\t\t\tedits,\n\t\t\tupdateSelection ? endCursorState : undefined,\n\t\t);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n\tpublic static readonly ID = \"editor.action.trimTrailingWhitespace\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TrimTrailingWhitespaceAction.ID,\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"lines.trimTrailingWhitespace\",\n\t\t\t\t\"Trim Trailing Whitespace\",\n\t\t\t),\n\t\t\talias: \"Trim Trailing Whitespace\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyX,\n\t\t\t\t),\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(\n\t\t_accessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): void {\n\t\tlet cursors: Position[] = [];\n\t\tif (args.reason === \"auto-save\") {\n\t\t\t// See https://github.com/editorconfig/editorconfig-vscode/issues/47\n\t\t\t// It is very convenient for the editor config extension to invoke this action.\n\t\t\t// So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n\t\t\tcursors = (editor.getSelections() || []).map(\n\t\t\t\t(s) => new Position(s.positionLineNumber, s.positionColumn),\n\t\t\t);\n\t\t}\n\n\t\tconst selection = editor.getSelection();\n\t\tif (selection === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = _accessor.get(IConfigurationService);\n\t\tconst model = editor.getModel();\n\t\tconst trimInRegexAndStrings = config.getValue<boolean>(\n\t\t\t\"files.trimTrailingWhitespaceInRegexAndStrings\",\n\t\t\t{\n\t\t\t\toverrideIdentifier: model?.getLanguageId(),\n\t\t\t\tresource: model?.uri,\n\t\t\t},\n\t\t);\n\n\t\tconst command = new TrimTrailingWhitespaceCommand(\n\t\t\tselection,\n\t\t\tcursors,\n\t\t\ttrimInRegexAndStrings,\n\t\t);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// delete lines\n\ninterface IDeleteLinesOperation {\n\tstartLineNumber: number;\n\tselectionStartColumn: number;\n\tendLineNumber: number;\n\tpositionColumn: number;\n}\n\nexport class DeleteLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.deleteLines\",\n\t\t\tlabel: nls.localize(\"lines.delete\", \"Delete Line\"),\n\t\t\talias: \"Delete Line\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyK,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops = this._getLinesToRemove(editor);\n\n\t\tconst model: ITextModel = editor.getModel();\n\t\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t\t// Model is empty\n\t\t\treturn;\n\t\t}\n\n\t\tlet linesDeleted = 0;\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst cursorState: Selection[] = [];\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tlet startLineNumber = op.startLineNumber;\n\t\t\tlet endLineNumber = op.endLineNumber;\n\n\t\t\tlet startColumn = 1;\n\t\t\tlet endColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\tif (endLineNumber < model.getLineCount()) {\n\t\t\t\tendLineNumber += 1;\n\t\t\t\tendColumn = 1;\n\t\t\t} else if (startLineNumber > 1) {\n\t\t\t\tstartLineNumber -= 1;\n\t\t\t\tstartColumn = model.getLineMaxColumn(startLineNumber);\n\t\t\t}\n\n\t\t\tedits.push(\n\t\t\t\tEditOperation.replace(\n\t\t\t\t\tnew Selection(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tstartColumn,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tendColumn,\n\t\t\t\t\t),\n\t\t\t\t\t\"\",\n\t\t\t\t),\n\t\t\t);\n\t\t\tcursorState.push(\n\t\t\t\tnew Selection(\n\t\t\t\t\tstartLineNumber - linesDeleted,\n\t\t\t\t\top.positionColumn,\n\t\t\t\t\tstartLineNumber - linesDeleted,\n\t\t\t\t\top.positionColumn,\n\t\t\t\t),\n\t\t\t);\n\t\t\tlinesDeleted += op.endLineNumber - op.startLineNumber + 1;\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, cursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprivate _getLinesToRemove(\n\t\teditor: IActiveCodeEditor,\n\t): IDeleteLinesOperation[] {\n\t\t// Construct delete operations\n\t\tconst operations: IDeleteLinesOperation[] = editor\n\t\t\t.getSelections()\n\t\t\t.map((s) => {\n\t\t\t\tlet endLineNumber = s.endLineNumber;\n\t\t\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\t\t\tendLineNumber -= 1;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstartLineNumber: s.startLineNumber,\n\t\t\t\t\tselectionStartColumn: s.selectionStartColumn,\n\t\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\t\tpositionColumn: s.positionColumn,\n\t\t\t\t};\n\t\t\t});\n\n\t\t// Sort delete operations\n\t\toperations.sort((a, b) => {\n\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t}\n\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t});\n\n\t\t// Merge delete operations which are adjacent or overlapping\n\t\tconst mergedOperations: IDeleteLinesOperation[] = [];\n\t\tlet previousOperation = operations[0];\n\t\tfor (let i = 1; i < operations.length; i++) {\n\t\t\tif (\n\t\t\t\tpreviousOperation.endLineNumber + 1 >=\n\t\t\t\toperations[i].startLineNumber\n\t\t\t) {\n\t\t\t\t// Merge current operations into the previous one\n\t\t\t\tpreviousOperation.endLineNumber = operations[i].endLineNumber;\n\t\t\t} else {\n\t\t\t\t// Push previous operation\n\t\t\t\tmergedOperations.push(previousOperation);\n\t\t\t\tpreviousOperation = operations[i];\n\t\t\t}\n\t\t}\n\t\t// Push the last operation\n\t\tmergedOperations.push(previousOperation);\n\n\t\treturn mergedOperations;\n\t}\n}\n\nexport class IndentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.indentLines\",\n\t\t\tlabel: nls.localize(\"lines.indent\", \"Indent Line\"),\n\t\t\talias: \"Indent Line\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.BracketRight,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(\n\t\t\tthis.id,\n\t\t\tTypeOperations.indent(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\teditor.getModel(),\n\t\t\t\teditor.getSelections(),\n\t\t\t),\n\t\t);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass OutdentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.outdentLines\",\n\t\t\tlabel: nls.localize(\"lines.outdent\", \"Outdent Line\"),\n\t\t\talias: \"Outdent Line\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.BracketLeft,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tCoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n\t}\n}\n\nexport class InsertLineBeforeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.insertLineBefore\",\n\t\t\tlabel: nls.localize(\"lines.insertBefore\", \"Insert Line Above\"),\n\t\t\talias: \"Insert Line Above\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(\n\t\t\tthis.id,\n\t\t\tEnterOperation.lineInsertBefore(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\teditor.getModel(),\n\t\t\t\teditor.getSelections(),\n\t\t\t),\n\t\t);\n\t}\n}\n\nexport class InsertLineAfterAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.insertLineAfter\",\n\t\t\tlabel: nls.localize(\"lines.insertAfter\", \"Insert Line Below\"),\n\t\t\talias: \"Insert Line Below\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(\n\t\t\tthis.id,\n\t\t\tEnterOperation.lineInsertAfter(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\teditor.getModel(),\n\t\t\t\teditor.getSelections(),\n\t\t\t),\n\t\t);\n\t}\n}\n\nexport abstract class AbstractDeleteAllToBoundaryAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst primaryCursor = editor.getSelection();\n\n\t\tconst rangesToDelete = this._getRangesToDelete(editor);\n\t\t// merge overlapping selections\n\t\tconst effectiveRanges: Range[] = [];\n\n\t\tfor (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n\t\t\tconst range = rangesToDelete[i];\n\t\t\tconst nextRange = rangesToDelete[i + 1];\n\n\t\t\tif (Range.intersectRanges(range, nextRange) === null) {\n\t\t\t\teffectiveRanges.push(range);\n\t\t\t} else {\n\t\t\t\trangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n\t\t\t}\n\t\t}\n\n\t\teffectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n\n\t\tconst endCursorState = this._getEndCursorState(\n\t\t\tprimaryCursor,\n\t\t\teffectiveRanges,\n\t\t);\n\n\t\tconst edits: ISingleEditOperation[] = effectiveRanges.map((range) => {\n\t\t\treturn EditOperation.replace(range, \"\");\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t */\n\tprotected abstract _getEndCursorState(\n\t\tprimaryCursor: Range,\n\t\trangesToDelete: Range[],\n\t): Selection[];\n\n\tprotected abstract _getRangesToDelete(editor: IActiveCodeEditor): Range[];\n}\n\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"deleteAllLeft\",\n\t\t\tlabel: nls.localize(\"lines.deleteAllLeft\", \"Delete All Left\"),\n\t\t\talias: \"Delete All Left\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected _getEndCursorState(\n\t\tprimaryCursor: Range,\n\t\trangesToDelete: Range[],\n\t): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tconst endCursorState: Selection[] = [];\n\t\tlet deletedLines = 0;\n\n\t\trangesToDelete.forEach((range) => {\n\t\t\tlet endCursor;\n\t\t\tif (range.endColumn === 1 && deletedLines > 0) {\n\t\t\t\tconst newStartLine = range.startLineNumber - deletedLines;\n\t\t\t\tendCursor = new Selection(\n\t\t\t\t\tnewStartLine,\n\t\t\t\t\trange.startColumn,\n\t\t\t\t\tnewStartLine,\n\t\t\t\t\trange.startColumn,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tendCursor = new Selection(\n\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\trange.startColumn,\n\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\trange.startColumn,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdeletedLines += range.endLineNumber - range.startLineNumber;\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t});\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\tprotected _getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet rangesToDelete: Range[] = selections;\n\t\tconst model = editor.getModel();\n\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\trangesToDelete = rangesToDelete.map((selection) => {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (selection.startColumn === 1) {\n\t\t\t\t\tconst deleteFromLine = Math.max(\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tselection.startLineNumber - 1,\n\t\t\t\t\t);\n\t\t\t\t\tconst deleteFromColumn =\n\t\t\t\t\t\tselection.startLineNumber === 1\n\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t: model.getLineLength(deleteFromLine) + 1;\n\t\t\t\t\treturn new Range(\n\t\t\t\t\t\tdeleteFromLine,\n\t\t\t\t\t\tdeleteFromColumn,\n\t\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(\n\t\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t\tselection.startColumn,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Range(\n\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tselection.endLineNumber,\n\t\t\t\t\tselection.endColumn,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"deleteAllRight\",\n\t\t\tlabel: nls.localize(\"lines.deleteAllRight\", \"Delete All Right\"),\n\t\t\talias: \"Delete All Right\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyCode.KeyK,\n\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.Delete],\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected _getEndCursorState(\n\t\tprimaryCursor: Range,\n\t\trangesToDelete: Range[],\n\t): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tconst endCursorState: Selection[] = [];\n\t\tfor (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n\t\t\tconst range = rangesToDelete[i];\n\t\t\tconst endCursor = new Selection(\n\t\t\t\trange.startLineNumber - offset,\n\t\t\t\trange.startColumn,\n\t\t\t\trange.startLineNumber - offset,\n\t\t\t\trange.startColumn,\n\t\t\t);\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t}\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\tprotected _getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst selections = editor.getSelections();\n\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst rangesToDelete: Range[] = selections.map((sel) => {\n\t\t\tif (sel.isEmpty()) {\n\t\t\t\tconst maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n\n\t\t\t\tif (sel.startColumn === maxColumn) {\n\t\t\t\t\treturn new Range(\n\t\t\t\t\t\tsel.startLineNumber,\n\t\t\t\t\t\tsel.startColumn,\n\t\t\t\t\t\tsel.startLineNumber + 1,\n\t\t\t\t\t\t1,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(\n\t\t\t\t\t\tsel.startLineNumber,\n\t\t\t\t\t\tsel.startColumn,\n\t\t\t\t\t\tsel.startLineNumber,\n\t\t\t\t\t\tmaxColumn,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sel;\n\t\t});\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class JoinLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.joinLines\",\n\t\t\tlabel: nls.localize(\"lines.joinLines\", \"Join Lines\"),\n\t\t\talias: \"Join Lines\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyJ },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet primaryCursor = editor.getSelection();\n\t\tif (primaryCursor === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\t\tconst reducedSelections: Selection[] = [];\n\n\t\tconst lastSelection = selections.reduce(\n\t\t\t(previousValue, currentValue) => {\n\t\t\t\tif (previousValue.isEmpty()) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tpreviousValue.endLineNumber ===\n\t\t\t\t\t\tcurrentValue.startLineNumber\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (primaryCursor!.equalsSelection(previousValue)) {\n\t\t\t\t\t\t\tprimaryCursor = currentValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn currentValue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tcurrentValue.startLineNumber >\n\t\t\t\t\t\tpreviousValue.endLineNumber + 1\n\t\t\t\t\t) {\n\t\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\t\treturn currentValue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new Selection(\n\t\t\t\t\t\t\tpreviousValue.startLineNumber,\n\t\t\t\t\t\t\tpreviousValue.startColumn,\n\t\t\t\t\t\t\tcurrentValue.endLineNumber,\n\t\t\t\t\t\t\tcurrentValue.endColumn,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\tcurrentValue.startLineNumber > previousValue.endLineNumber\n\t\t\t\t) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(\n\t\t\t\t\t\tpreviousValue.startLineNumber,\n\t\t\t\t\t\tpreviousValue.startColumn,\n\t\t\t\t\t\tcurrentValue.endLineNumber,\n\t\t\t\t\t\tcurrentValue.endColumn,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\treducedSelections.push(lastSelection);\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst endCursorState: Selection[] = [];\n\t\tlet endPrimaryCursor = primaryCursor;\n\t\tlet lineOffset = 0;\n\n\t\tfor (let i = 0, len = reducedSelections.length; i < len; i++) {\n\t\t\tconst selection = reducedSelections[i];\n\t\t\tconst startLineNumber = selection.startLineNumber;\n\t\t\tconst startColumn = 1;\n\t\t\tlet columnDeltaOffset = 0;\n\t\t\tlet endLineNumber: number, endColumn: number;\n\n\t\t\tconst selectionEndPositionOffset =\n\t\t\t\tmodel.getLineLength(selection.endLineNumber) -\n\t\t\t\tselection.endColumn;\n\n\t\t\tif (\n\t\t\t\tselection.isEmpty() ||\n\t\t\t\tselection.startLineNumber === selection.endLineNumber\n\t\t\t) {\n\t\t\t\tconst position = selection.getStartPosition();\n\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\tendLineNumber = startLineNumber + 1;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t\t} else {\n\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tendLineNumber = selection.endLineNumber;\n\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t}\n\n\t\t\tlet trimmedLinesContent = model.getLineContent(startLineNumber);\n\n\t\t\tfor (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n\t\t\t\tconst lineText = model.getLineContent(i);\n\t\t\t\tconst firstNonWhitespaceIdx =\n\t\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(i);\n\n\t\t\t\tif (firstNonWhitespaceIdx >= 1) {\n\t\t\t\t\tlet insertSpace = true;\n\t\t\t\t\tif (trimmedLinesContent === \"\") {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tinsertSpace &&\n\t\t\t\t\t\t(trimmedLinesContent.charAt(\n\t\t\t\t\t\t\ttrimmedLinesContent.length - 1,\n\t\t\t\t\t\t) === \" \" ||\n\t\t\t\t\t\t\ttrimmedLinesContent.charAt(\n\t\t\t\t\t\t\t\ttrimmedLinesContent.length - 1,\n\t\t\t\t\t\t\t) === \"\\t\")\n\t\t\t\t\t) {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t\ttrimmedLinesContent = trimmedLinesContent.replace(\n\t\t\t\t\t\t\t/[\\s\\uFEFF\\xA0]+$/g,\n\t\t\t\t\t\t\t\" \",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst lineTextWithoutIndent = lineText.substr(\n\t\t\t\t\t\tfirstNonWhitespaceIdx - 1,\n\t\t\t\t\t);\n\n\t\t\t\t\ttrimmedLinesContent +=\n\t\t\t\t\t\t(insertSpace ? \" \" : \"\") + lineTextWithoutIndent;\n\n\t\t\t\t\tif (insertSpace) {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcolumnDeltaOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst deleteSelection = new Range(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn,\n\t\t\t);\n\n\t\t\tif (!deleteSelection.isEmpty()) {\n\t\t\t\tlet resultSelection: Selection;\n\n\t\t\t\tif (selection.isEmpty()) {\n\t\t\t\t\tedits.push(\n\t\t\t\t\t\tEditOperation.replace(\n\t\t\t\t\t\t\tdeleteSelection,\n\t\t\t\t\t\t\ttrimmedLinesContent,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tresultSelection = new Selection(\n\t\t\t\t\t\tdeleteSelection.startLineNumber - lineOffset,\n\t\t\t\t\t\ttrimmedLinesContent.length - columnDeltaOffset + 1,\n\t\t\t\t\t\tstartLineNumber - lineOffset,\n\t\t\t\t\t\ttrimmedLinesContent.length - columnDeltaOffset + 1,\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\tselection.startLineNumber === selection.endLineNumber\n\t\t\t\t) {\n\t\t\t\t\tedits.push(\n\t\t\t\t\t\tEditOperation.replace(\n\t\t\t\t\t\t\tdeleteSelection,\n\t\t\t\t\t\t\ttrimmedLinesContent,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tresultSelection = new Selection(\n\t\t\t\t\t\tselection.startLineNumber - lineOffset,\n\t\t\t\t\t\tselection.startColumn,\n\t\t\t\t\t\tselection.endLineNumber - lineOffset,\n\t\t\t\t\t\tselection.endColumn,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tedits.push(\n\t\t\t\t\t\tEditOperation.replace(\n\t\t\t\t\t\t\tdeleteSelection,\n\t\t\t\t\t\t\ttrimmedLinesContent,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tresultSelection = new Selection(\n\t\t\t\t\t\tselection.startLineNumber - lineOffset,\n\t\t\t\t\t\tselection.startColumn,\n\t\t\t\t\t\tselection.startLineNumber - lineOffset,\n\t\t\t\t\t\ttrimmedLinesContent.length - selectionEndPositionOffset,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tRange.intersectRanges(deleteSelection, primaryCursor) !==\n\t\t\t\t\tnull\n\t\t\t\t) {\n\t\t\t\t\tendPrimaryCursor = resultSelection;\n\t\t\t\t} else {\n\t\t\t\t\tendCursorState.push(resultSelection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlineOffset +=\n\t\t\t\tdeleteSelection.endLineNumber - deleteSelection.startLineNumber;\n\t\t}\n\n\t\tendCursorState.unshift(endPrimaryCursor);\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class TransposeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transpose\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transpose\",\n\t\t\t\t\"Transpose Characters around the Cursor\",\n\t\t\t),\n\t\t\talias: \"Transpose Characters around the Cursor\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst cursor = selection.getStartPosition();\n\t\t\tconst maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n\n\t\t\tif (cursor.column >= maxColumn) {\n\t\t\t\tif (cursor.lineNumber === model.getLineCount()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// The cursor is at the end of current line and current line is not empty\n\t\t\t\t// then we transpose the character before the cursor and the line break if there is any following line.\n\t\t\t\tconst deleteSelection = new Range(\n\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\tMath.max(1, cursor.column - 1),\n\t\t\t\t\tcursor.lineNumber + 1,\n\t\t\t\t\t1,\n\t\t\t\t);\n\t\t\t\tconst chars = model\n\t\t\t\t\t.getValueInRange(deleteSelection)\n\t\t\t\t\t.split(\"\")\n\t\t\t\t\t.reverse()\n\t\t\t\t\t.join(\"\");\n\n\t\t\t\tcommands.push(\n\t\t\t\t\tnew ReplaceCommand(\n\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\t\t\tMath.max(1, cursor.column - 1),\n\t\t\t\t\t\t\tcursor.lineNumber + 1,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tchars,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst deleteSelection = new Range(\n\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\tMath.max(1, cursor.column - 1),\n\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\tcursor.column + 1,\n\t\t\t\t);\n\t\t\t\tconst chars = model\n\t\t\t\t\t.getValueInRange(deleteSelection)\n\t\t\t\t\t.split(\"\")\n\t\t\t\t\t.reverse()\n\t\t\t\t\t.join(\"\");\n\t\t\t\tcommands.push(\n\t\t\t\t\tnew ReplaceCommandThatPreservesSelection(\n\t\t\t\t\t\tdeleteSelection,\n\t\t\t\t\t\tchars,\n\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\t\t\tcursor.column + 1,\n\t\t\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\t\t\tcursor.column + 1,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport abstract class AbstractCaseAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wordSeparators = editor.getOption(EditorOption.wordSeparators);\n\t\tconst textEdits: ISingleEditOperation[] = [];\n\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tconst cursor = selection.getStartPosition();\n\t\t\t\tconst word = editor.getConfiguredWordAtPosition(cursor);\n\n\t\t\t\tif (!word) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst wordRange = new Range(\n\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\tword.startColumn,\n\t\t\t\t\tcursor.lineNumber,\n\t\t\t\t\tword.endColumn,\n\t\t\t\t);\n\t\t\t\tconst text = model.getValueInRange(wordRange);\n\t\t\t\ttextEdits.push(\n\t\t\t\t\tEditOperation.replace(\n\t\t\t\t\t\twordRange,\n\t\t\t\t\t\tthis._modifyText(text, wordSeparators),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst text = model.getValueInRange(selection);\n\t\t\t\ttextEdits.push(\n\t\t\t\t\tEditOperation.replace(\n\t\t\t\t\t\tselection,\n\t\t\t\t\t\tthis._modifyText(text, wordSeparators),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, textEdits);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprotected abstract _modifyText(\n\t\ttext: string,\n\t\twordSeparators: string,\n\t): string;\n}\n\nexport class UpperCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToUppercase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToUppercase\",\n\t\t\t\t\"Transform to Uppercase\",\n\t\t\t),\n\t\t\talias: \"Transform to Uppercase\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn text.toLocaleUpperCase();\n\t}\n}\n\nexport class LowerCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToLowercase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToLowercase\",\n\t\t\t\t\"Transform to Lowercase\",\n\t\t\t),\n\t\t\talias: \"Transform to Lowercase\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn text.toLocaleLowerCase();\n\t}\n}\n\nclass BackwardsCompatibleRegExp {\n\tprivate _actual: RegExp | null;\n\tprivate _evaluated: boolean;\n\n\tconstructor(\n\t\tprivate readonly _pattern: string,\n\t\tprivate readonly _flags: string,\n\t) {\n\t\tthis._actual = null;\n\t\tthis._evaluated = false;\n\t}\n\n\tpublic get(): RegExp | null {\n\t\tif (!this._evaluated) {\n\t\t\tthis._evaluated = true;\n\t\t\ttry {\n\t\t\t\tthis._actual = new RegExp(this._pattern, this._flags);\n\t\t\t} catch (err) {\n\t\t\t\t// this browser does not support this regular expression\n\t\t\t}\n\t\t}\n\t\treturn this._actual;\n\t}\n\n\tpublic isSupported(): boolean {\n\t\treturn this.get() !== null;\n\t}\n}\n\nexport class TitleCaseAction extends AbstractCaseAction {\n\tpublic static titleBoundary = new BackwardsCompatibleRegExp(\n\t\t\"(^|[^\\\\p{L}\\\\p{N}']|((^|\\\\P{L})'))\\\\p{L}\",\n\t\t\"gmu\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToTitlecase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToTitlecase\",\n\t\t\t\t\"Transform to Title Case\",\n\t\t\t),\n\t\t\talias: \"Transform to Title Case\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst titleBoundary = TitleCaseAction.titleBoundary.get();\n\t\tif (!titleBoundary) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\t\treturn text\n\t\t\t.toLocaleLowerCase()\n\t\t\t.replace(titleBoundary, (b) => b.toLocaleUpperCase());\n\t}\n}\n\nexport class SnakeCaseAction extends AbstractCaseAction {\n\tpublic static caseBoundary = new BackwardsCompatibleRegExp(\n\t\t\"(\\\\p{Ll})(\\\\p{Lu})\",\n\t\t\"gmu\",\n\t);\n\tpublic static singleLetters = new BackwardsCompatibleRegExp(\n\t\t\"(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})\",\n\t\t\"gmu\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToSnakecase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToSnakecase\",\n\t\t\t\t\"Transform to Snake Case\",\n\t\t\t),\n\t\t\talias: \"Transform to Snake Case\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst caseBoundary = SnakeCaseAction.caseBoundary.get();\n\t\tconst singleLetters = SnakeCaseAction.singleLetters.get();\n\t\tif (!caseBoundary || !singleLetters) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\t\treturn text\n\t\t\t.replace(caseBoundary, \"$1_$2\")\n\t\t\t.replace(singleLetters, \"$1_$2$3\")\n\t\t\t.toLocaleLowerCase();\n\t}\n}\n\nexport class CamelCaseAction extends AbstractCaseAction {\n\tpublic static wordBoundary = new BackwardsCompatibleRegExp(\"[_\\\\s-]\", \"gm\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToCamelcase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToCamelcase\",\n\t\t\t\t\"Transform to Camel Case\",\n\t\t\t),\n\t\t\talias: \"Transform to Camel Case\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst wordBoundary = CamelCaseAction.wordBoundary.get();\n\t\tif (!wordBoundary) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\t\tconst words = text.split(wordBoundary);\n\t\tconst firstWord = words.shift();\n\t\treturn (\n\t\t\tfirstWord +\n\t\t\twords\n\t\t\t\t.map(\n\t\t\t\t\t(word: string) =>\n\t\t\t\t\t\tword.substring(0, 1).toLocaleUpperCase() +\n\t\t\t\t\t\tword.substring(1),\n\t\t\t\t)\n\t\t\t\t.join(\"\")\n\t\t);\n\t}\n}\n\nexport class PascalCaseAction extends AbstractCaseAction {\n\tpublic static wordBoundary = new BackwardsCompatibleRegExp(\"[_\\\\s-]\", \"gm\");\n\tpublic static wordBoundaryToMaintain = new BackwardsCompatibleRegExp(\n\t\t\"(?<=\\\\.)\",\n\t\t\"gm\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToPascalcase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToPascalcase\",\n\t\t\t\t\"Transform to Pascal Case\",\n\t\t\t),\n\t\t\talias: \"Transform to Pascal Case\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst wordBoundary = PascalCaseAction.wordBoundary.get();\n\t\tconst wordBoundaryToMaintain =\n\t\t\tPascalCaseAction.wordBoundaryToMaintain.get();\n\n\t\tif (!wordBoundary || !wordBoundaryToMaintain) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\n\t\tconst wordsWithMaintainBoundaries = text.split(wordBoundaryToMaintain);\n\t\tconst words = wordsWithMaintainBoundaries.flatMap((word: string) =>\n\t\t\tword.split(wordBoundary),\n\t\t);\n\t\treturn words\n\t\t\t.map(\n\t\t\t\t(word: string) =>\n\t\t\t\t\tword.substring(0, 1).toLocaleUpperCase() +\n\t\t\t\t\tword.substring(1),\n\t\t\t)\n\t\t\t.join(\"\");\n\t}\n}\n\nexport class KebabCaseAction extends AbstractCaseAction {\n\tpublic static isSupported(): boolean {\n\t\tconst areAllRegexpsSupported = [\n\t\t\tthis.caseBoundary,\n\t\t\tthis.singleLetters,\n\t\t\tthis.underscoreBoundary,\n\t\t].every((regexp) => regexp.isSupported());\n\n\t\treturn areAllRegexpsSupported;\n\t}\n\n\tprivate static caseBoundary = new BackwardsCompatibleRegExp(\n\t\t\"(\\\\p{Ll})(\\\\p{Lu})\",\n\t\t\"gmu\",\n\t);\n\tprivate static singleLetters = new BackwardsCompatibleRegExp(\n\t\t\"(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})\",\n\t\t\"gmu\",\n\t);\n\tprivate static underscoreBoundary = new BackwardsCompatibleRegExp(\n\t\t\"(\\\\S)(_)(\\\\S)\",\n\t\t\"gm\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.transformToKebabcase\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"editor.transformToKebabcase\",\n\t\t\t\t\"Transform to Kebab Case\",\n\t\t\t),\n\t\t\talias: \"Transform to Kebab Case\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, _: string): string {\n\t\tconst caseBoundary = KebabCaseAction.caseBoundary.get();\n\t\tconst singleLetters = KebabCaseAction.singleLetters.get();\n\t\tconst underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n\n\t\tif (!caseBoundary || !singleLetters || !underscoreBoundary) {\n\t\t\t// one or more regexps aren't supported\n\t\t\treturn text;\n\t\t}\n\n\t\treturn text\n\t\t\t.replace(underscoreBoundary, \"$1-$3\")\n\t\t\t.replace(caseBoundary, \"$1-$2\")\n\t\t\t.replace(singleLetters, \"$1-$2\")\n\t\t\t.toLocaleLowerCase();\n\t}\n}\n\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\n\nif (\n\tSnakeCaseAction.caseBoundary.isSupported() &&\n\tSnakeCaseAction.singleLetters.isSupported()\n) {\n\tregisterEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n\tregisterEditorAction(CamelCaseAction);\n}\nif (PascalCaseAction.wordBoundary.isSupported()) {\n\tregisterEditorAction(PascalCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n\tregisterEditorAction(TitleCaseAction);\n}\n\nif (KebabCaseAction.isSupported()) {\n\tregisterEditorAction(KebabCaseAction);\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
