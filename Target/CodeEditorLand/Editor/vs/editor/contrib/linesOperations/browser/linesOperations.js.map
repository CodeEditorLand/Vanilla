{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/linesOperations/browser/linesOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, IActionOptions, registerEditorAction, ServicesAccessor } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EnterOperation } from '../../../common/cursor/cursorTypeEditOperations.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ICommand } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\n// copy lines\n\nabstract class AbstractCopyLinesAction extends EditorAction {\n\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n\t\tselections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\t// Remove selections that would result in copying the same line\n\t\tlet prev = selections[0];\n\t\tfor (let i = 1; i < selections.length; i++) {\n\t\t\tconst curr = selections[i];\n\t\t\tif (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n\t\t\t\t// these two selections would copy the same line\n\t\t\t\tif (prev.index < curr.index) {\n\t\t\t\t\t// prev wins\n\t\t\t\t\tcurr.ignore = true;\n\t\t\t\t} else {\n\t\t\t\t\t// curr wins\n\t\t\t\t\tprev.ignore = true;\n\t\t\t\t\tprev = curr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.copyLinesUpAction',\n\t\t\tlabel: nls.localize('lines.copyUp', \"Copy Line Up\"),\n\t\t\talias: 'Copy Line Up',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.copyLinesDownAction',\n\t\t\tlabel: nls.localize('lines.copyDown', \"Copy Line Down\"),\n\t\t\talias: 'Copy Line Down',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class DuplicateSelectionAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.duplicateSelection',\n\t\t\tlabel: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n\t\t\talias: 'Duplicate Selection',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n\t\t\t\torder: 5\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tconst model = editor.getModel();\n\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tcommands.push(new CopyLinesCommand(selection, true));\n\t\t\t} else {\n\t\t\t\tconst insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n\t\t\t\tcommands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// move lines\n\nabstract class AbstractMoveLinesAction extends EditorAction {\n\n\tprivate readonly down: boolean;\n\n\tconstructor(down: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.down = down;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections() || [];\n\t\tconst autoIndent = editor.getOption(EditorOption.autoIndent);\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.moveLinesUpAction',\n\t\t\tlabel: nls.localize('lines.moveUp', \"Move Line Up\"),\n\t\t\talias: 'Move Line Up',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.UpArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n\t\t\t\torder: 3\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.moveLinesDownAction',\n\t\t\tlabel: nls.localize('lines.moveDown', \"Move Line Down\"),\n\t\t\talias: 'Move Line Down',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.DownArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '2_line',\n\t\t\t\ttitle: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n\t\t\t\torder: 4\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport abstract class AbstractSortLinesAction extends EditorAction {\n\tprivate readonly descending: boolean;\n\n\tconstructor(descending: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.descending = descending;\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tlet selections = editor.getSelections();\n\t\tif (selections.length === 1 && selections[0].isEmpty()) {\n\t\t\t// Apply to whole document.\n\t\t\tselections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n\t\t}\n\n\t\tfor (const selection of selections) {\n\t\t\tif (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new SortLinesCommand(selections[i], this.descending);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.sortLinesAscending',\n\t\t\tlabel: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n\t\t\talias: 'Sort Lines Ascending',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.sortLinesDescending',\n\t\t\tlabel: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n\t\t\talias: 'Sort Lines Descending',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteDuplicateLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.removeDuplicateLines',\n\t\t\tlabel: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n\t\t\talias: 'Delete Duplicate Lines',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model: ITextModel = editor.getModel();\n\t\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst endCursorState: Selection[] = [];\n\n\t\tlet linesDeleted = 0;\n\t\tlet updateSelection = true;\n\n\t\tlet selections = editor.getSelections();\n\t\tif (selections.length === 1 && selections[0].isEmpty()) {\n\t\t\t// Apply to whole document.\n\t\t\tselections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n\t\t\tupdateSelection = false;\n\t\t}\n\n\t\tfor (const selection of selections) {\n\t\t\tconst uniqueLines = new Set();\n\t\t\tconst lines = [];\n\n\t\t\tfor (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n\t\t\t\tconst line = model.getLineContent(i);\n\n\t\t\t\tif (uniqueLines.has(line)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlines.push(line);\n\t\t\t\tuniqueLines.add(line);\n\t\t\t}\n\n\n\t\t\tconst selectionToReplace = new Selection(\n\t\t\t\tselection.startLineNumber,\n\t\t\t\t1,\n\t\t\t\tselection.endLineNumber,\n\t\t\t\tmodel.getLineMaxColumn(selection.endLineNumber)\n\t\t\t);\n\n\t\t\tconst adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n\t\t\tconst finalSelection = new Selection(\n\t\t\t\tadjustedSelectionStart,\n\t\t\t\t1,\n\t\t\t\tadjustedSelectionStart + lines.length - 1,\n\t\t\t\tlines[lines.length - 1].length\n\t\t\t);\n\n\t\t\tedits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n\t\t\tendCursorState.push(finalSelection);\n\n\t\t\tlinesDeleted += (selection.endLineNumber - selection.startLineNumber + 1) - lines.length;\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, updateSelection ? endCursorState : undefined);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.action.trimTrailingWhitespace';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TrimTrailingWhitespaceAction.ID,\n\t\t\tlabel: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n\t\t\talias: 'Trim Trailing Whitespace',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\n\t\tlet cursors: Position[] = [];\n\t\tif (args.reason === 'auto-save') {\n\t\t\t// See https://github.com/editorconfig/editorconfig-vscode/issues/47\n\t\t\t// It is very convenient for the editor config extension to invoke this action.\n\t\t\t// So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n\t\t\tcursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n\t\t}\n\n\t\tconst selection = editor.getSelection();\n\t\tif (selection === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = _accessor.get(IConfigurationService);\n\t\tconst model = editor.getModel();\n\t\tconst trimInRegexAndStrings = config.getValue<boolean>('files.trimTrailingWhitespaceInRegexAndStrings', { overrideIdentifier: model?.getLanguageId(), resource: model?.uri });\n\n\t\tconst command = new TrimTrailingWhitespaceCommand(selection, cursors, trimInRegexAndStrings);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\t}\n}\n\n// delete lines\n\ninterface IDeleteLinesOperation {\n\tstartLineNumber: number;\n\tselectionStartColumn: number;\n\tendLineNumber: number;\n\tpositionColumn: number;\n}\n\nexport class DeleteLinesAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.deleteLines',\n\t\t\tlabel: nls.localize('lines.delete', \"Delete Line\"),\n\t\t\talias: 'Delete Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyK,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops = this._getLinesToRemove(editor);\n\n\t\tconst model: ITextModel = editor.getModel();\n\t\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t\t// Model is empty\n\t\t\treturn;\n\t\t}\n\n\t\tlet linesDeleted = 0;\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst cursorState: Selection[] = [];\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tlet startLineNumber = op.startLineNumber;\n\t\t\tlet endLineNumber = op.endLineNumber;\n\n\t\t\tlet startColumn = 1;\n\t\t\tlet endColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\tif (endLineNumber < model.getLineCount()) {\n\t\t\t\tendLineNumber += 1;\n\t\t\t\tendColumn = 1;\n\t\t\t} else if (startLineNumber > 1) {\n\t\t\t\tstartLineNumber -= 1;\n\t\t\t\tstartColumn = model.getLineMaxColumn(startLineNumber);\n\t\t\t}\n\n\t\t\tedits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n\t\t\tcursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n\t\t\tlinesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, cursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprivate _getLinesToRemove(editor: IActiveCodeEditor): IDeleteLinesOperation[] {\n\t\t// Construct delete operations\n\t\tconst operations: IDeleteLinesOperation[] = editor.getSelections().map((s) => {\n\n\t\t\tlet endLineNumber = s.endLineNumber;\n\t\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\t\tendLineNumber -= 1;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tstartLineNumber: s.startLineNumber,\n\t\t\t\tselectionStartColumn: s.selectionStartColumn,\n\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\tpositionColumn: s.positionColumn\n\t\t\t};\n\t\t});\n\n\t\t// Sort delete operations\n\t\toperations.sort((a, b) => {\n\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t}\n\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t});\n\n\t\t// Merge delete operations which are adjacent or overlapping\n\t\tconst mergedOperations: IDeleteLinesOperation[] = [];\n\t\tlet previousOperation = operations[0];\n\t\tfor (let i = 1; i < operations.length; i++) {\n\t\t\tif (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n\t\t\t\t// Merge current operations into the previous one\n\t\t\t\tpreviousOperation.endLineNumber = operations[i].endLineNumber;\n\t\t\t} else {\n\t\t\t\t// Push previous operation\n\t\t\t\tmergedOperations.push(previousOperation);\n\t\t\t\tpreviousOperation = operations[i];\n\t\t\t}\n\t\t}\n\t\t// Push the last operation\n\t\tmergedOperations.push(previousOperation);\n\n\t\treturn mergedOperations;\n\t}\n}\n\nexport class IndentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.indentLines',\n\t\t\tlabel: nls.localize('lines.indent', \"Indent Line\"),\n\t\t\talias: 'Indent Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.BracketRight,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass OutdentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.outdentLines',\n\t\t\tlabel: nls.localize('lines.outdent', \"Outdent Line\"),\n\t\t\talias: 'Outdent Line',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.BracketLeft,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tCoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n\t}\n}\n\nexport class InsertLineBeforeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertLineBefore',\n\t\t\tlabel: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n\t\t\talias: 'Insert Line Above',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, EnterOperation.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t}\n}\n\nexport class InsertLineAfterAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertLineAfter',\n\t\t\tlabel: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n\t\t\talias: 'Insert Line Below',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, EnterOperation.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n\t}\n}\n\nexport abstract class AbstractDeleteAllToBoundaryAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst primaryCursor = editor.getSelection();\n\n\t\tconst rangesToDelete = this._getRangesToDelete(editor);\n\t\t// merge overlapping selections\n\t\tconst effectiveRanges: Range[] = [];\n\n\t\tfor (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n\t\t\tconst range = rangesToDelete[i];\n\t\t\tconst nextRange = rangesToDelete[i + 1];\n\n\t\t\tif (Range.intersectRanges(range, nextRange) === null) {\n\t\t\t\teffectiveRanges.push(range);\n\t\t\t} else {\n\t\t\t\trangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n\t\t\t}\n\t\t}\n\n\t\teffectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n\n\t\tconst endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n\n\t\tconst edits: ISingleEditOperation[] = effectiveRanges.map(range => {\n\t\t\treturn EditOperation.replace(range, '');\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t */\n\tprotected abstract _getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[];\n\n\tprotected abstract _getRangesToDelete(editor: IActiveCodeEditor): Range[];\n}\n\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteAllLeft',\n\t\t\tlabel: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n\t\t\talias: 'Delete All Left',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tconst endCursorState: Selection[] = [];\n\t\tlet deletedLines = 0;\n\n\t\trangesToDelete.forEach(range => {\n\t\t\tlet endCursor;\n\t\t\tif (range.endColumn === 1 && deletedLines > 0) {\n\t\t\t\tconst newStartLine = range.startLineNumber - deletedLines;\n\t\t\t\tendCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n\t\t\t} else {\n\t\t\t\tendCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n\t\t\t}\n\n\t\t\tdeletedLines += range.endLineNumber - range.startLineNumber;\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t});\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\tprotected _getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet rangesToDelete: Range[] = selections;\n\t\tconst model = editor.getModel();\n\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\trangesToDelete = rangesToDelete.map(selection => {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (selection.startColumn === 1) {\n\t\t\t\t\tconst deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n\t\t\t\t\tconst deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n\t\t\t\t\treturn new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n\t\t\t}\n\t\t});\n\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'deleteAllRight',\n\t\t\tlabel: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n\t\t\talias: 'Delete All Right',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyK, secondary: [KeyMod.CtrlCmd | KeyCode.Delete] },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _getEndCursorState(primaryCursor: Range, rangesToDelete: Range[]): Selection[] {\n\t\tlet endPrimaryCursor: Selection | null = null;\n\t\tconst endCursorState: Selection[] = [];\n\t\tfor (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n\t\t\tconst range = rangesToDelete[i];\n\t\t\tconst endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n\n\t\t\tif (range.intersectRanges(primaryCursor)) {\n\t\t\t\tendPrimaryCursor = endCursor;\n\t\t\t} else {\n\t\t\t\tendCursorState.push(endCursor);\n\t\t\t}\n\t\t}\n\n\t\tif (endPrimaryCursor) {\n\t\t\tendCursorState.unshift(endPrimaryCursor);\n\t\t}\n\n\t\treturn endCursorState;\n\t}\n\n\tprotected _getRangesToDelete(editor: IActiveCodeEditor): Range[] {\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst selections = editor.getSelections();\n\n\t\tif (selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst rangesToDelete: Range[] = selections.map((sel) => {\n\t\t\tif (sel.isEmpty()) {\n\t\t\t\tconst maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n\n\t\t\t\tif (sel.startColumn === maxColumn) {\n\t\t\t\t\treturn new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sel;\n\t\t});\n\n\t\trangesToDelete.sort(Range.compareRangesUsingStarts);\n\t\treturn rangesToDelete;\n\t}\n}\n\nexport class JoinLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.joinLines',\n\t\t\tlabel: nls.localize('lines.joinLines', \"Join Lines\"),\n\t\t\talias: 'Join Lines',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyJ },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet primaryCursor = editor.getSelection();\n\t\tif (primaryCursor === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\t\tconst reducedSelections: Selection[] = [];\n\n\t\tconst lastSelection = selections.reduce((previousValue, currentValue) => {\n\t\t\tif (previousValue.isEmpty()) {\n\t\t\t\tif (previousValue.endLineNumber === currentValue.startLineNumber) {\n\t\t\t\t\tif (primaryCursor!.equalsSelection(previousValue)) {\n\t\t\t\t\t\tprimaryCursor = currentValue;\n\t\t\t\t\t}\n\t\t\t\t\treturn currentValue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentValue.startLineNumber > previousValue.endLineNumber) {\n\t\t\t\t\treducedSelections.push(previousValue);\n\t\t\t\t\treturn currentValue;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treducedSelections.push(lastSelection);\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst endCursorState: Selection[] = [];\n\t\tlet endPrimaryCursor = primaryCursor;\n\t\tlet lineOffset = 0;\n\n\t\tfor (let i = 0, len = reducedSelections.length; i < len; i++) {\n\t\t\tconst selection = reducedSelections[i];\n\t\t\tconst startLineNumber = selection.startLineNumber;\n\t\t\tconst startColumn = 1;\n\t\t\tlet columnDeltaOffset = 0;\n\t\t\tlet endLineNumber: number,\n\t\t\t\tendColumn: number;\n\n\t\t\tconst selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n\n\t\t\tif (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n\t\t\t\tconst position = selection.getStartPosition();\n\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\tendLineNumber = startLineNumber + 1;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t\t} else {\n\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tendLineNumber = selection.endLineNumber;\n\t\t\t\tendColumn = model.getLineMaxColumn(endLineNumber);\n\t\t\t}\n\n\t\t\tlet trimmedLinesContent = model.getLineContent(startLineNumber);\n\n\t\t\tfor (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n\t\t\t\tconst lineText = model.getLineContent(i);\n\t\t\t\tconst firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n\n\t\t\t\tif (firstNonWhitespaceIdx >= 1) {\n\t\t\t\t\tlet insertSpace = true;\n\t\t\t\t\tif (trimmedLinesContent === '') {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n\t\t\t\t\t\ttrimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n\t\t\t\t\t\tinsertSpace = false;\n\t\t\t\t\t\ttrimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n\n\t\t\t\t\ttrimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n\n\t\t\t\t\tif (insertSpace) {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnDeltaOffset = lineTextWithoutIndent.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcolumnDeltaOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\n\t\t\tif (!deleteSelection.isEmpty()) {\n\t\t\t\tlet resultSelection: Selection;\n\n\t\t\t\tif (selection.isEmpty()) {\n\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\tresultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n\t\t\t\t} else {\n\t\t\t\t\tif (selection.startLineNumber === selection.endLineNumber) {\n\t\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\t\tresultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn,\n\t\t\t\t\t\t\tselection.endLineNumber - lineOffset, selection.endColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n\t\t\t\t\t\tresultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn,\n\t\t\t\t\t\t\tselection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n\t\t\t\t\tendPrimaryCursor = resultSelection;\n\t\t\t\t} else {\n\t\t\t\t\tendCursorState.push(resultSelection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n\t\t}\n\n\t\tendCursorState.unshift(endPrimaryCursor);\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, edits, endCursorState);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport class TransposeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transpose',\n\t\t\tlabel: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n\t\t\talias: 'Transpose Characters around the Cursor',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst cursor = selection.getStartPosition();\n\t\t\tconst maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n\n\t\t\tif (cursor.column >= maxColumn) {\n\t\t\t\tif (cursor.lineNumber === model.getLineCount()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// The cursor is at the end of current line and current line is not empty\n\t\t\t\t// then we transpose the character before the cursor and the line break if there is any following line.\n\t\t\t\tconst deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n\t\t\t\tconst chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n\n\t\t\t\tcommands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n\t\t\t} else {\n\t\t\t\tconst deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n\t\t\t\tconst chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n\t\t\t\tcommands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,\n\t\t\t\t\tnew Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nexport abstract class AbstractCaseAction extends EditorAction {\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tif (model === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wordSeparators = editor.getOption(EditorOption.wordSeparators);\n\t\tconst textEdits: ISingleEditOperation[] = [];\n\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tconst cursor = selection.getStartPosition();\n\t\t\t\tconst word = editor.getConfiguredWordAtPosition(cursor);\n\n\t\t\t\tif (!word) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n\t\t\t\tconst text = model.getValueInRange(wordRange);\n\t\t\t\ttextEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n\t\t\t} else {\n\t\t\t\tconst text = model.getValueInRange(selection);\n\t\t\t\ttextEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n\t\t\t}\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeEdits(this.id, textEdits);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprotected abstract _modifyText(text: string, wordSeparators: string): string;\n}\n\nexport class UpperCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToUppercase',\n\t\t\tlabel: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n\t\t\talias: 'Transform to Uppercase',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn text.toLocaleUpperCase();\n\t}\n}\n\nexport class LowerCaseAction extends AbstractCaseAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToLowercase',\n\t\t\tlabel: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n\t\t\talias: 'Transform to Lowercase',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\treturn text.toLocaleLowerCase();\n\t}\n}\n\nclass BackwardsCompatibleRegExp {\n\n\tprivate _actual: RegExp | null;\n\tprivate _evaluated: boolean;\n\n\tconstructor(\n\t\tprivate readonly _pattern: string,\n\t\tprivate readonly _flags: string\n\t) {\n\t\tthis._actual = null;\n\t\tthis._evaluated = false;\n\t}\n\n\tpublic get(): RegExp | null {\n\t\tif (!this._evaluated) {\n\t\t\tthis._evaluated = true;\n\t\t\ttry {\n\t\t\t\tthis._actual = new RegExp(this._pattern, this._flags);\n\t\t\t} catch (err) {\n\t\t\t\t// this browser does not support this regular expression\n\t\t\t}\n\t\t}\n\t\treturn this._actual;\n\t}\n\n\tpublic isSupported(): boolean {\n\t\treturn (this.get() !== null);\n\t}\n}\n\nexport class TitleCaseAction extends AbstractCaseAction {\n\n\tpublic static titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToTitlecase',\n\t\t\tlabel: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n\t\t\talias: 'Transform to Title Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst titleBoundary = TitleCaseAction.titleBoundary.get();\n\t\tif (!titleBoundary) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\t\treturn text\n\t\t\t.toLocaleLowerCase()\n\t\t\t.replace(titleBoundary, (b) => b.toLocaleUpperCase());\n\t}\n}\n\nexport class SnakeCaseAction extends AbstractCaseAction {\n\n\tpublic static caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\n\tpublic static singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToSnakecase',\n\t\t\tlabel: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n\t\t\talias: 'Transform to Snake Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst caseBoundary = SnakeCaseAction.caseBoundary.get();\n\t\tconst singleLetters = SnakeCaseAction.singleLetters.get();\n\t\tif (!caseBoundary || !singleLetters) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\t\treturn (text\n\t\t\t.replace(caseBoundary, '$1_$2')\n\t\t\t.replace(singleLetters, '$1_$2$3')\n\t\t\t.toLocaleLowerCase()\n\t\t);\n\t}\n}\n\nexport class CamelCaseAction extends AbstractCaseAction {\n\tpublic static wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToCamelcase',\n\t\t\tlabel: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n\t\t\talias: 'Transform to Camel Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst wordBoundary = CamelCaseAction.wordBoundary.get();\n\t\tif (!wordBoundary) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\t\tconst words = text.split(wordBoundary);\n\t\tconst firstWord = words.shift();\n\t\treturn firstWord + words.map((word: string) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n\t\t\t.join('');\n\t}\n}\n\nexport class PascalCaseAction extends AbstractCaseAction {\n\tpublic static wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\n\tpublic static wordBoundaryToMaintain = new BackwardsCompatibleRegExp('(?<=\\\\.)', 'gm');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToPascalcase',\n\t\t\tlabel: nls.localize('editor.transformToPascalcase', \"Transform to Pascal Case\"),\n\t\t\talias: 'Transform to Pascal Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, wordSeparators: string): string {\n\t\tconst wordBoundary = PascalCaseAction.wordBoundary.get();\n\t\tconst wordBoundaryToMaintain = PascalCaseAction.wordBoundaryToMaintain.get();\n\n\t\tif (!wordBoundary || !wordBoundaryToMaintain) {\n\t\t\t// cannot support this\n\t\t\treturn text;\n\t\t}\n\n\t\tconst wordsWithMaintainBoundaries = text.split(wordBoundaryToMaintain);\n\t\tconst words = wordsWithMaintainBoundaries.map((word: string) => word.split(wordBoundary)).flat();\n\t\treturn words.map((word: string) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n\t\t\t.join('');\n\t}\n}\n\nexport class KebabCaseAction extends AbstractCaseAction {\n\n\tpublic static isSupported(): boolean {\n\t\tconst areAllRegexpsSupported = [\n\t\t\tthis.caseBoundary,\n\t\t\tthis.singleLetters,\n\t\t\tthis.underscoreBoundary,\n\t\t].every((regexp) => regexp.isSupported());\n\n\t\treturn areAllRegexpsSupported;\n\t}\n\n\tprivate static caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\n\tprivate static singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu');\n\tprivate static underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transformToKebabcase',\n\t\t\tlabel: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n\t\t\talias: 'Transform to Kebab Case',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tprotected _modifyText(text: string, _: string): string {\n\t\tconst caseBoundary = KebabCaseAction.caseBoundary.get();\n\t\tconst singleLetters = KebabCaseAction.singleLetters.get();\n\t\tconst underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n\n\t\tif (!caseBoundary || !singleLetters || !underscoreBoundary) {\n\t\t\t// one or more regexps aren't supported\n\t\t\treturn text;\n\t\t}\n\n\t\treturn text\n\t\t\t.replace(underscoreBoundary, '$1-$3')\n\t\t\t.replace(caseBoundary, '$1-$2')\n\t\t\t.replace(singleLetters, '$1-$2')\n\t\t\t.toLocaleLowerCase();\n\t}\n}\n\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\n\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n\tregisterEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n\tregisterEditorAction(CamelCaseAction);\n}\nif (PascalCaseAction.wordBoundary.isSupported()) {\n\tregisterEditorAction(PascalCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n\tregisterEditorAction(TitleCaseAction);\n}\n\nif (KebabCaseAction.isSupported()) {\n\tregisterEditorAction(KebabCaseAction);\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
