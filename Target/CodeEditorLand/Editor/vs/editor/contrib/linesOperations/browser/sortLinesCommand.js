import{EditOperation as c}from"../../../common/core/editOperation.js";import{Range as d}from"../../../common/core/range.js";class l{static _COLLATOR=null;static getCollator(){return l._COLLATOR||(l._COLLATOR=new Intl.Collator),l._COLLATOR}selection;descending;selectionId;constructor(t,n){this.selection=t,this.descending=n,this.selectionId=null}getEditOperations(t,n){const e=m(t,this.selection,this.descending);e&&n.addEditOperation(e.range,e.text),this.selectionId=n.trackSelection(this.selection)}computeCursorState(t,n){return n.getTrackedSelection(this.selectionId)}static canRun(t,n,e){if(t===null)return!1;const o=u(t,n,e);if(!o)return!1;for(let r=0,i=o.before.length;r<i;r++)if(o.before[r]!==o.after[r])return!0;return!1}}function u(a,t,n){const e=t.startLineNumber;let o=t.endLineNumber;if(t.endColumn===1&&o--,e>=o)return null;const r=[];for(let s=e;s<=o;s++)r.push(a.getLineContent(s));let i=r.slice(0);return i.sort(l.getCollator().compare),n===!0&&(i=i.reverse()),{startLineNumber:e,endLineNumber:o,before:r,after:i}}function m(a,t,n){const e=u(a,t,n);return e?c.replace(new d(e.startLineNumber,1,e.endLineNumber,a.getLineMaxColumn(e.endLineNumber)),e.after.join(`
`)):null}export{l as SortLinesCommand};
