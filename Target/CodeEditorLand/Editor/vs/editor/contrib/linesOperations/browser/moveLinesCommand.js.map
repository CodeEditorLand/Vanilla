{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/linesOperations/browser/moveLinesCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { ShiftCommand } from \"../../../common/commands/shiftCommand.js\";\nimport { EditorAutoIndentStrategy } from \"../../../common/config/editorOptions.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../../../common/editorCommon.js\";\nimport {\n\ttype IIndentConverter,\n\ttype IVirtualModel,\n\tgetGoodIndentForLine,\n\tgetIndentMetadata,\n} from \"../../../common/languages/autoIndent.js\";\nimport { getEnterAction } from \"../../../common/languages/enterAction.js\";\nimport {\n\ttype CompleteEnterAction,\n\tIndentAction,\n} from \"../../../common/languages/languageConfiguration.js\";\nimport { ILanguageConfigurationService } from \"../../../common/languages/languageConfigurationRegistry.js\";\nimport { IndentConsts } from \"../../../common/languages/supports/indentRules.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport * as indentUtils from \"../../indentation/common/indentUtils.js\";\n\nexport class MoveLinesCommand implements ICommand {\n\tprivate readonly _selection: Selection;\n\tprivate readonly _isMovingDown: boolean;\n\tprivate readonly _autoIndent: EditorAutoIndentStrategy;\n\n\tprivate _selectionId: string | null;\n\tprivate _moveEndPositionDown?: boolean;\n\tprivate _moveEndLineSelectionShrink: boolean;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\tisMovingDown: boolean,\n\t\tautoIndent: EditorAutoIndentStrategy,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingDown = isMovingDown;\n\t\tthis._autoIndent = autoIndent;\n\t\tthis._selectionId = null;\n\t\tthis._moveEndLineSelectionShrink = false;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tconst getLanguageId = () => {\n\t\t\treturn model.getLanguageId();\n\t\t};\n\t\tconst getLanguageIdAtPosition = (\n\t\t\tlineNumber: number,\n\t\t\tcolumn: number,\n\t\t) => {\n\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t};\n\n\t\tconst modelLineCount = model.getLineCount();\n\n\t\tif (\n\t\t\tthis._isMovingDown &&\n\t\t\tthis._selection.endLineNumber === modelLineCount\n\t\t) {\n\t\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t\t\treturn;\n\t\t}\n\t\tif (!this._isMovingDown && this._selection.startLineNumber === 1) {\n\t\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._moveEndPositionDown = false;\n\t\tlet s = this._selection;\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(\n\t\t\t\ts.endLineNumber - 1,\n\t\t\t\tmodel.getLineMaxColumn(s.endLineNumber - 1),\n\t\t\t);\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tconst indentConverter = this.buildIndentConverter(\n\t\t\ttabSize,\n\t\t\tindentSize,\n\t\t\tinsertSpaces,\n\t\t);\n\n\t\tif (\n\t\t\ts.startLineNumber === s.endLineNumber &&\n\t\t\tmodel.getLineMaxColumn(s.startLineNumber) === 1\n\t\t) {\n\t\t\t// Current line is empty\n\t\t\tconst lineNumber = s.startLineNumber;\n\t\t\tconst otherLineNumber = this._isMovingDown\n\t\t\t\t? lineNumber + 1\n\t\t\t\t: lineNumber - 1;\n\n\t\t\tif (model.getLineMaxColumn(otherLineNumber) === 1) {\n\t\t\t\t// Other line number is empty too, so no editing is needed\n\t\t\t\t// Add a no-op to force running by the model\n\t\t\t\tbuilder.addEditOperation(new Range(1, 1, 1, 1), null);\n\t\t\t} else {\n\t\t\t\t// Type content from other line number on line number\n\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\tnew Range(lineNumber, 1, lineNumber, 1),\n\t\t\t\t\tmodel.getLineContent(otherLineNumber),\n\t\t\t\t);\n\n\t\t\t\t// Remove content from other line number\n\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\totherLineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\totherLineNumber,\n\t\t\t\t\t\tmodel.getLineMaxColumn(otherLineNumber),\n\t\t\t\t\t),\n\t\t\t\t\tnull,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Track selection at the other line number\n\t\t\ts = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n\t\t} else {\n\t\t\tlet movingLineNumber: number;\n\t\t\tlet movingLineText: string;\n\n\t\t\tif (this._isMovingDown) {\n\t\t\t\tmovingLineNumber = s.endLineNumber + 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tmovingLineNumber - 1,\n\t\t\t\t\t\tmodel.getLineMaxColumn(movingLineNumber - 1),\n\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\tmodel.getLineMaxColumn(movingLineNumber),\n\t\t\t\t\t),\n\t\t\t\t\tnull,\n\t\t\t\t);\n\n\t\t\t\tlet insertingText = movingLineText;\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tconst movingLineMatchResult = this.matchEnterRule(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\ts.startLineNumber - 1,\n\t\t\t\t\t);\n\t\t\t\t\t// if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n\t\t\t\t\tif (movingLineMatchResult !== null) {\n\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(\n\t\t\t\t\t\t\tmodel.getLineContent(movingLineNumber),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst newSpaceCnt =\n\t\t\t\t\t\t\tmovingLineMatchResult +\n\t\t\t\t\t\t\tindentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\tconst newIndentation = indentUtils.generateIndent(\n\t\t\t\t\t\t\tnewSpaceCnt,\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tinsertingText =\n\t\t\t\t\t\t\tnewIndentation + this.trimStart(movingLineText);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// no enter rule matches, let's check indentatin rules then.\n\t\t\t\t\t\tconst virtualModel: IVirtualModel = {\n\t\t\t\t\t\t\ttokenization: {\n\t\t\t\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tgetLanguageId,\n\t\t\t\t\t\t\t\tgetLanguageIdAtPosition,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(\n\t\t\t\t\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst indentOfMovingLine = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(movingLineNumber, 1),\n\t\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (indentOfMovingLine !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(\n\t\t\t\t\t\t\t\tmodel.getLineContent(movingLineNumber),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\t\tindentOfMovingLine,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\t\toldIndentation,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst newIndentation =\n\t\t\t\t\t\t\t\t\tindentUtils.generateIndent(\n\t\t\t\t\t\t\t\t\t\tnewSpaceCnt,\n\t\t\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tinsertingText =\n\t\t\t\t\t\t\t\t\tnewIndentation +\n\t\t\t\t\t\t\t\t\tthis.trimStart(movingLineText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add edit operations for moving line first to make sure it's executed after we make indentation change\n\t\t\t\t\t// to s.startLineNumber\n\t\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\t\tnew Range(s.startLineNumber, 1, s.startLineNumber, 1),\n\t\t\t\t\t\tinsertingText + \"\\n\",\n\t\t\t\t\t);\n\n\t\t\t\t\tconst ret = this.matchEnterRuleMovingDown(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\tinsertingText,\n\t\t\t\t\t);\n\n\t\t\t\t\t// check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tbuilder,\n\t\t\t\t\t\t\t\ts,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t\t\tret,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match onEnter rules, let's check indentation rules then.\n\t\t\t\t\t\tconst virtualModel: IVirtualModel = {\n\t\t\t\t\t\t\ttokenization: {\n\t\t\t\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\t\t// TODO@aiday-mar: the tokens here don't correspond exactly to the corresponding content (after indentation adjustment), have to fix this.\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\tlineNumber >= s.startLineNumber + 1 &&\n\t\t\t\t\t\t\t\t\t\tlineNumber <= s.endLineNumber + 1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\t\tlineNumber - 1,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tgetLanguageId,\n\t\t\t\t\t\t\t\tgetLanguageIdAtPosition,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\treturn insertingText;\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\tlineNumber >= s.startLineNumber + 1 &&\n\t\t\t\t\t\t\t\t\tlineNumber <= s.endLineNumber + 1\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber - 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst newIndentatOfMovingBlock = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(movingLineNumber, 1),\n\t\t\t\t\t\t\ts.startLineNumber + 1,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (newIndentatOfMovingBlock !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(\n\t\t\t\t\t\t\t\tmodel.getLineContent(s.startLineNumber),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\t\tnewIndentatOfMovingBlock,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\t\toldIndentation,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset =\n\t\t\t\t\t\t\t\t\tnewSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tbuilder,\n\t\t\t\t\t\t\t\t\ts,\n\t\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t\t\t\tspaceCntOffset,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Insert line that needs to be moved before\n\t\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\t\tnew Range(s.startLineNumber, 1, s.startLineNumber, 1),\n\t\t\t\t\t\tinsertingText + \"\\n\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmovingLineNumber = s.startLineNumber - 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\tnew Range(movingLineNumber, 1, movingLineNumber + 1, 1),\n\t\t\t\t\tnull,\n\t\t\t\t);\n\n\t\t\t\t// Insert line that needs to be moved after\n\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\ts.endLineNumber,\n\t\t\t\t\t\tmodel.getLineMaxColumn(s.endLineNumber),\n\t\t\t\t\t\ts.endLineNumber,\n\t\t\t\t\t\tmodel.getLineMaxColumn(s.endLineNumber),\n\t\t\t\t\t),\n\t\t\t\t\t\"\\n\" + movingLineText,\n\t\t\t\t);\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tconst virtualModel: IVirtualModel = {\n\t\t\t\t\t\ttokenization: {\n\t\t\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\t\t\tif (lineNumber === movingLineNumber) {\n\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(\n\t\t\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetLanguageId,\n\t\t\t\t\t\t\tgetLanguageIdAtPosition,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\t\t\tif (lineNumber === movingLineNumber) {\n\t\t\t\t\t\t\t\treturn model.getLineContent(s.startLineNumber);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst ret = this.matchEnterRule(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\ts.startLineNumber - 2,\n\t\t\t\t\t);\n\t\t\t\t\t// check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tbuilder,\n\t\t\t\t\t\t\t\ts,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t\t\tret,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match any onEnter rule, let's check indentation rules then.\n\t\t\t\t\t\tconst indentOfFirstLine = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(s.startLineNumber, 1),\n\t\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\t\t\t\t// adjust the indentation of the moving block\n\t\t\t\t\t\t\tconst oldIndent = strings.getLeadingWhitespace(\n\t\t\t\t\t\t\t\tmodel.getLineContent(s.startLineNumber),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\t\tindentOfFirstLine,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\t\t\t\toldIndent,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset =\n\t\t\t\t\t\t\t\t\tnewSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tbuilder,\n\t\t\t\t\t\t\t\t\ts,\n\t\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t\t\t\tspaceCntOffset,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate buildIndentConverter(\n\t\ttabSize: number,\n\t\tindentSize: number,\n\t\tinsertSpaces: boolean,\n\t): IIndentConverter {\n\t\treturn {\n\t\t\tshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(\n\t\t\t\t\tindentation,\n\t\t\t\t\tindentation.length + 1,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tindentSize,\n\t\t\t\t\tinsertSpaces,\n\t\t\t\t);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(\n\t\t\t\t\tindentation,\n\t\t\t\t\tindentation.length + 1,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tindentSize,\n\t\t\t\t\tinsertSpaces,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate parseEnterResult(\n\t\tmodel: ITextModel,\n\t\tindentConverter: IIndentConverter,\n\t\ttabSize: number,\n\t\tline: number,\n\t\tenter: CompleteEnterAction | null,\n\t) {\n\t\tif (enter) {\n\t\t\tlet enterPrefix = enter.indentation;\n\n\t\t\tif (enter.indentAction === IndentAction.None) {\n\t\t\t\tenterPrefix = enter.indentation + enter.appendText;\n\t\t\t} else if (enter.indentAction === IndentAction.Indent) {\n\t\t\t\tenterPrefix = enter.indentation + enter.appendText;\n\t\t\t} else if (enter.indentAction === IndentAction.IndentOutdent) {\n\t\t\t\tenterPrefix = enter.indentation;\n\t\t\t} else if (enter.indentAction === IndentAction.Outdent) {\n\t\t\t\tenterPrefix =\n\t\t\t\t\tindentConverter.unshiftIndent(enter.indentation) +\n\t\t\t\t\tenter.appendText;\n\t\t\t}\n\t\t\tconst movingLineText = model.getLineContent(line);\n\t\t\tif (\n\t\t\t\tthis.trimStart(movingLineText).indexOf(\n\t\t\t\t\tthis.trimStart(enterPrefix),\n\t\t\t\t) >= 0\n\t\t\t) {\n\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(\n\t\t\t\t\tmodel.getLineContent(line),\n\t\t\t\t);\n\t\t\t\tlet newIndentation = strings.getLeadingWhitespace(enterPrefix);\n\t\t\t\tconst indentMetadataOfMovelingLine = getIndentMetadata(\n\t\t\t\t\tmodel,\n\t\t\t\t\tline,\n\t\t\t\t\tthis._languageConfigurationService,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tindentMetadataOfMovelingLine !== null &&\n\t\t\t\t\tindentMetadataOfMovelingLine & IndentConsts.DECREASE_MASK\n\t\t\t\t) {\n\t\t\t\t\tnewIndentation =\n\t\t\t\t\t\tindentConverter.unshiftIndent(newIndentation);\n\t\t\t\t}\n\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\tnewIndentation,\n\t\t\t\t\ttabSize,\n\t\t\t\t);\n\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(\n\t\t\t\t\toldIndentation,\n\t\t\t\t\ttabSize,\n\t\t\t\t);\n\t\t\t\treturn newSpaceCnt - oldSpaceCnt;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t *\n\t * @param model\n\t * @param indentConverter\n\t * @param tabSize\n\t * @param line the line moving down\n\t * @param futureAboveLineNumber the line which will be at the `line` position\n\t * @param futureAboveLineText\n\t */\n\tprivate matchEnterRuleMovingDown(\n\t\tmodel: ITextModel,\n\t\tindentConverter: IIndentConverter,\n\t\ttabSize: number,\n\t\tline: number,\n\t\tfutureAboveLineNumber: number,\n\t\tfutureAboveLineText: string,\n\t) {\n\t\tif (strings.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {\n\t\t\t// break\n\t\t\tconst maxColumn = model.getLineMaxColumn(futureAboveLineNumber);\n\t\t\tconst enter = getEnterAction(\n\t\t\t\tthis._autoIndent,\n\t\t\t\tmodel,\n\t\t\t\tnew Range(\n\t\t\t\t\tfutureAboveLineNumber,\n\t\t\t\t\tmaxColumn,\n\t\t\t\t\tfutureAboveLineNumber,\n\t\t\t\t\tmaxColumn,\n\t\t\t\t),\n\t\t\t\tthis._languageConfigurationService,\n\t\t\t);\n\t\t\treturn this.parseEnterResult(\n\t\t\t\tmodel,\n\t\t\t\tindentConverter,\n\t\t\t\ttabSize,\n\t\t\t\tline,\n\t\t\t\tenter,\n\t\t\t);\n\t\t} else {\n\t\t\t// go upwards, starting from `line - 1`\n\t\t\tlet validPrecedingLine = line - 1;\n\t\t\twhile (validPrecedingLine >= 1) {\n\t\t\t\tconst lineContent = model.getLineContent(validPrecedingLine);\n\t\t\t\tconst nonWhitespaceIdx =\n\t\t\t\t\tstrings.lastNonWhitespaceIndex(lineContent);\n\n\t\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvalidPrecedingLine--;\n\t\t\t}\n\n\t\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\t\tconst enter = getEnterAction(\n\t\t\t\tthis._autoIndent,\n\t\t\t\tmodel,\n\t\t\t\tnew Range(\n\t\t\t\t\tvalidPrecedingLine,\n\t\t\t\t\tmaxColumn,\n\t\t\t\t\tvalidPrecedingLine,\n\t\t\t\t\tmaxColumn,\n\t\t\t\t),\n\t\t\t\tthis._languageConfigurationService,\n\t\t\t);\n\t\t\treturn this.parseEnterResult(\n\t\t\t\tmodel,\n\t\t\t\tindentConverter,\n\t\t\t\ttabSize,\n\t\t\t\tline,\n\t\t\t\tenter,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate matchEnterRule(\n\t\tmodel: ITextModel,\n\t\tindentConverter: IIndentConverter,\n\t\ttabSize: number,\n\t\tline: number,\n\t\toneLineAbove: number,\n\t\tpreviousLineText?: string,\n\t) {\n\t\tlet validPrecedingLine = oneLineAbove;\n\t\twhile (validPrecedingLine >= 1) {\n\t\t\t// ship empty lines as empty lines just inherit indentation\n\t\t\tlet lineContent;\n\t\t\tif (\n\t\t\t\tvalidPrecedingLine === oneLineAbove &&\n\t\t\t\tpreviousLineText !== undefined\n\t\t\t) {\n\t\t\t\tlineContent = previousLineText;\n\t\t\t} else {\n\t\t\t\tlineContent = model.getLineContent(validPrecedingLine);\n\t\t\t}\n\n\t\t\tconst nonWhitespaceIdx =\n\t\t\t\tstrings.lastNonWhitespaceIndex(lineContent);\n\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvalidPrecedingLine--;\n\t\t}\n\n\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\tconst enter = getEnterAction(\n\t\t\tthis._autoIndent,\n\t\t\tmodel,\n\t\t\tnew Range(\n\t\t\t\tvalidPrecedingLine,\n\t\t\t\tmaxColumn,\n\t\t\t\tvalidPrecedingLine,\n\t\t\t\tmaxColumn,\n\t\t\t),\n\t\t\tthis._languageConfigurationService,\n\t\t);\n\t\treturn this.parseEnterResult(\n\t\t\tmodel,\n\t\t\tindentConverter,\n\t\t\ttabSize,\n\t\t\tline,\n\t\t\tenter,\n\t\t);\n\t}\n\n\tprivate trimStart(str: string) {\n\t\treturn str.replace(/^\\s+/, \"\");\n\t}\n\n\tprivate shouldAutoIndent(model: ITextModel, selection: Selection) {\n\t\tif (this._autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn false;\n\t\t}\n\t\t// if it's not easy to tokenize, we stop auto indent.\n\t\tif (!model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst languageAtSelectionStart = model.getLanguageIdAtPosition(\n\t\t\tselection.startLineNumber,\n\t\t\t1,\n\t\t);\n\t\tconst languageAtSelectionEnd = model.getLanguageIdAtPosition(\n\t\t\tselection.endLineNumber,\n\t\t\t1,\n\t\t);\n\n\t\tif (languageAtSelectionStart !== languageAtSelectionEnd) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\tthis._languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlanguageAtSelectionStart,\n\t\t\t).indentRulesSupport === null\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getIndentEditsOfMovingBlock(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t\ts: Selection,\n\t\ttabSize: number,\n\t\tinsertSpaces: boolean,\n\t\toffset: number,\n\t) {\n\t\tfor (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\tconst originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\tconst originalSpacesCnt = indentUtils.getSpaceCnt(\n\t\t\t\toriginalIndent,\n\t\t\t\ttabSize,\n\t\t\t);\n\t\t\tconst newSpacesCnt = originalSpacesCnt + offset;\n\t\t\tconst newIndent = indentUtils.generateIndent(\n\t\t\t\tnewSpacesCnt,\n\t\t\t\ttabSize,\n\t\t\t\tinsertSpaces,\n\t\t\t);\n\n\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\tbuilder.addEditOperation(\n\t\t\t\t\tnew Range(i, 1, i, originalIndent.length + 1),\n\t\t\t\t\tnewIndent,\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\ti === s.endLineNumber &&\n\t\t\t\t\ts.endColumn <= originalIndent.length + 1 &&\n\t\t\t\t\tnewIndent === \"\"\n\t\t\t\t) {\n\t\t\t\t\t// as users select part of the original indent white spaces\n\t\t\t\t\t// when we adjust the indentation of endLine, we should adjust the cursor position as well.\n\t\t\t\t\tthis._moveEndLineSelectionShrink = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\tif (\n\t\t\tthis._moveEndLineSelectionShrink &&\n\t\t\tresult.startLineNumber < result.endLineNumber\n\t\t) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber, 2);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
