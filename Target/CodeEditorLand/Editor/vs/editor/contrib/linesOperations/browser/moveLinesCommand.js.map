{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/linesOperations/browser/moveLinesCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditorAutoIndentStrategy } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../../../common/editorCommon.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { CompleteEnterAction, IndentAction } from '../../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IndentConsts } from '../../../common/languages/supports/indentRules.js';\nimport * as indentUtils from '../../indentation/common/indentUtils.js';\nimport { getGoodIndentForLine, getIndentMetadata, IIndentConverter, IVirtualModel } from '../../../common/languages/autoIndent.js';\nimport { getEnterAction } from '../../../common/languages/enterAction.js';\n\nexport class MoveLinesCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _isMovingDown: boolean;\n\tprivate readonly _autoIndent: EditorAutoIndentStrategy;\n\n\tprivate _selectionId: string | null;\n\tprivate _moveEndPositionDown?: boolean;\n\tprivate _moveEndLineSelectionShrink: boolean;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\tisMovingDown: boolean,\n\t\tautoIndent: EditorAutoIndentStrategy,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingDown = isMovingDown;\n\t\tthis._autoIndent = autoIndent;\n\t\tthis._selectionId = null;\n\t\tthis._moveEndLineSelectionShrink = false;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\n\t\tconst getLanguageId = () => {\n\t\t\treturn model.getLanguageId();\n\t\t};\n\t\tconst getLanguageIdAtPosition = (lineNumber: number, column: number) => {\n\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t};\n\n\t\tconst modelLineCount = model.getLineCount();\n\n\t\tif (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n\t\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t\t\treturn;\n\t\t}\n\t\tif (!this._isMovingDown && this._selection.startLineNumber === 1) {\n\t\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._moveEndPositionDown = false;\n\t\tlet s = this._selection;\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tconst indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n\n\t\tif (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n\t\t\t// Current line is empty\n\t\t\tconst lineNumber = s.startLineNumber;\n\t\t\tconst otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n\n\t\t\tif (model.getLineMaxColumn(otherLineNumber) === 1) {\n\t\t\t\t// Other line number is empty too, so no editing is needed\n\t\t\t\t// Add a no-op to force running by the model\n\t\t\t\tbuilder.addEditOperation(new Range(1, 1, 1, 1), null);\n\t\t\t} else {\n\t\t\t\t// Type content from other line number on line number\n\t\t\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n\n\t\t\t\t// Remove content from other line number\n\t\t\t\tbuilder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n\t\t\t}\n\t\t\t// Track selection at the other line number\n\t\t\ts = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n\n\t\t} else {\n\n\t\t\tlet movingLineNumber: number;\n\t\t\tlet movingLineText: string;\n\n\t\t\tif (this._isMovingDown) {\n\t\t\t\tmovingLineNumber = s.endLineNumber + 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);\n\n\t\t\t\tlet insertingText = movingLineText;\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tconst movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);\n\t\t\t\t\t// if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n\t\t\t\t\tif (movingLineMatchResult !== null) {\n\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n\t\t\t\t\t\tconst newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\tconst newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\t\tinsertingText = newIndentation + this.trimStart(movingLineText);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// no enter rule matches, let's check indentatin rules then.\n\t\t\t\t\t\tconst virtualModel: IVirtualModel = {\n\t\t\t\t\t\t\ttokenization: {\n\t\t\t\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(movingLineNumber);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tgetLanguageId,\n\t\t\t\t\t\t\t\tgetLanguageIdAtPosition,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(movingLineNumber);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst indentOfMovingLine = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(movingLineNumber, 1),\n\t\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (indentOfMovingLine !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\t\t\t\tinsertingText = newIndentation + this.trimStart(movingLineText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add edit operations for moving line first to make sure it's executed after we make indentation change\n\t\t\t\t\t// to s.startLineNumber\n\t\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n\n\t\t\t\t\tconst ret = this.matchEnterRuleMovingDown(model, indentConverter, tabSize, s.startLineNumber, movingLineNumber, insertingText);\n\n\t\t\t\t\t// check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match onEnter rules, let's check indentation rules then.\n\t\t\t\t\t\tconst virtualModel: IVirtualModel = {\n\t\t\t\t\t\t\ttokenization: {\n\t\t\t\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\t\t// TODO@aiday-mar: the tokens here don't correspond exactly to the corresponding content (after indentation adjustment), have to fix this.\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(movingLineNumber);\n\t\t\t\t\t\t\t\t\t} else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber - 1);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tgetLanguageId,\n\t\t\t\t\t\t\t\tgetLanguageIdAtPosition,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\t\treturn insertingText;\n\t\t\t\t\t\t\t\t} else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber - 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst newIndentatOfMovingBlock = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(movingLineNumber, 1),\n\t\t\t\t\t\t\ts.startLineNumber + 1,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (newIndentatOfMovingBlock !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Insert line that needs to be moved before\n\t\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmovingLineNumber = s.startLineNumber - 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);\n\n\t\t\t\t// Insert line that needs to be moved after\n\t\t\t\tbuilder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tconst virtualModel: IVirtualModel = {\n\t\t\t\t\t\ttokenization: {\n\t\t\t\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\t\t\t\tif (lineNumber === movingLineNumber) {\n\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(s.startLineNumber);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetLanguageId,\n\t\t\t\t\t\t\tgetLanguageIdAtPosition,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\t\t\tif (lineNumber === movingLineNumber) {\n\t\t\t\t\t\t\t\treturn model.getLineContent(s.startLineNumber);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n\t\t\t\t\t// check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match any onEnter rule, let's check indentation rules then.\n\t\t\t\t\t\tconst indentOfFirstLine = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(s.startLineNumber, 1),\n\t\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\t\t\t\t// adjust the indentation of the moving block\n\t\t\t\t\t\t\tconst oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate buildIndentConverter(tabSize: number, indentSize: number, insertSpaces: boolean): IIndentConverter {\n\t\treturn {\n\t\t\tshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate parseEnterResult(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, enter: CompleteEnterAction | null) {\n\t\tif (enter) {\n\t\t\tlet enterPrefix = enter.indentation;\n\n\t\t\tif (enter.indentAction === IndentAction.None) {\n\t\t\t\tenterPrefix = enter.indentation + enter.appendText;\n\t\t\t} else if (enter.indentAction === IndentAction.Indent) {\n\t\t\t\tenterPrefix = enter.indentation + enter.appendText;\n\t\t\t} else if (enter.indentAction === IndentAction.IndentOutdent) {\n\t\t\t\tenterPrefix = enter.indentation;\n\t\t\t} else if (enter.indentAction === IndentAction.Outdent) {\n\t\t\t\tenterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\n\t\t\t}\n\t\t\tconst movingLineText = model.getLineContent(line);\n\t\t\tif (this.trimStart(movingLineText).indexOf(this.trimStart(enterPrefix)) >= 0) {\n\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n\t\t\t\tlet newIndentation = strings.getLeadingWhitespace(enterPrefix);\n\t\t\t\tconst indentMetadataOfMovelingLine = getIndentMetadata(model, line, this._languageConfigurationService);\n\t\t\t\tif (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & IndentConsts.DECREASE_MASK) {\n\t\t\t\t\tnewIndentation = indentConverter.unshiftIndent(newIndentation);\n\t\t\t\t}\n\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\treturn newSpaceCnt - oldSpaceCnt;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t *\n\t * @param model\n\t * @param indentConverter\n\t * @param tabSize\n\t * @param line the line moving down\n\t * @param futureAboveLineNumber the line which will be at the `line` position\n\t * @param futureAboveLineText\n\t */\n\tprivate matchEnterRuleMovingDown(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, futureAboveLineNumber: number, futureAboveLineText: string) {\n\t\tif (strings.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {\n\t\t\t// break\n\t\t\tconst maxColumn = model.getLineMaxColumn(futureAboveLineNumber);\n\t\t\tconst enter = getEnterAction(this._autoIndent, model, new Range(futureAboveLineNumber, maxColumn, futureAboveLineNumber, maxColumn), this._languageConfigurationService);\n\t\t\treturn this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n\t\t} else {\n\t\t\t// go upwards, starting from `line - 1`\n\t\t\tlet validPrecedingLine = line - 1;\n\t\t\twhile (validPrecedingLine >= 1) {\n\t\t\t\tconst lineContent = model.getLineContent(validPrecedingLine);\n\t\t\t\tconst nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvalidPrecedingLine--;\n\t\t\t}\n\n\t\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\t\tconst enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n\t\t\treturn this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n\t\t}\n\t}\n\n\tprivate matchEnterRule(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, oneLineAbove: number, previousLineText?: string) {\n\t\tlet validPrecedingLine = oneLineAbove;\n\t\twhile (validPrecedingLine >= 1) {\n\t\t\t// ship empty lines as empty lines just inherit indentation\n\t\t\tlet lineContent;\n\t\t\tif (validPrecedingLine === oneLineAbove && previousLineText !== undefined) {\n\t\t\t\tlineContent = previousLineText;\n\t\t\t} else {\n\t\t\t\tlineContent = model.getLineContent(validPrecedingLine);\n\t\t\t}\n\n\t\t\tconst nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvalidPrecedingLine--;\n\t\t}\n\n\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\tconst enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n\t\treturn this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n\t}\n\n\tprivate trimStart(str: string) {\n\t\treturn str.replace(/^\\s+/, '');\n\t}\n\n\tprivate shouldAutoIndent(model: ITextModel, selection: Selection) {\n\t\tif (this._autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn false;\n\t\t}\n\t\t// if it's not easy to tokenize, we stop auto indent.\n\t\tif (!model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n\t\tconst languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n\n\t\tif (languageAtSelectionStart !== languageAtSelectionEnd) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._languageConfigurationService.getLanguageConfiguration(languageAtSelectionStart).indentRulesSupport === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getIndentEditsOfMovingBlock(model: ITextModel, builder: IEditOperationBuilder, s: Selection, tabSize: number, insertSpaces: boolean, offset: number) {\n\t\tfor (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\tconst originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\tconst originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n\t\t\tconst newSpacesCnt = originalSpacesCnt + offset;\n\t\t\tconst newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\tbuilder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n\n\t\t\t\tif (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n\t\t\t\t\t// as users select part of the original indent white spaces\n\t\t\t\t\t// when we adjust the indentation of endLine, we should adjust the cursor position as well.\n\t\t\t\t\tthis._moveEndLineSelectionShrink = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\tif (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber, 2);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
