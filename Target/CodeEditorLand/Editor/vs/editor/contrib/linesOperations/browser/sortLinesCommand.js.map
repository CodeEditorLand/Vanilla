{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/linesOperations/browser/sortLinesCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../common/core/editOperation.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../../../common/editorCommon.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nexport class SortLinesCommand implements ICommand {\n\tprivate static _COLLATOR: Intl.Collator | null = null;\n\tpublic static getCollator(): Intl.Collator {\n\t\tif (!SortLinesCommand._COLLATOR) {\n\t\t\tSortLinesCommand._COLLATOR = new Intl.Collator();\n\t\t}\n\t\treturn SortLinesCommand._COLLATOR;\n\t}\n\n\tprivate readonly selection: Selection;\n\tprivate readonly descending: boolean;\n\tprivate selectionId: string | null;\n\n\tconstructor(selection: Selection, descending: boolean) {\n\t\tthis.selection = selection;\n\t\tthis.descending = descending;\n\t\tthis.selectionId = null;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tconst op = sortLines(model, this.selection, this.descending);\n\t\tif (op) {\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n\n\tpublic static canRun(\n\t\tmodel: ITextModel | null,\n\t\tselection: Selection,\n\t\tdescending: boolean,\n\t): boolean {\n\t\tif (model === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = getSortData(model, selection, descending);\n\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0, len = data.before.length; i < len; i++) {\n\t\t\tif (data.before[i] !== data.after[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nfunction getSortData(\n\tmodel: ITextModel,\n\tselection: Selection,\n\tdescending: boolean,\n) {\n\tconst startLineNumber = selection.startLineNumber;\n\tlet endLineNumber = selection.endLineNumber;\n\n\tif (selection.endColumn === 1) {\n\t\tendLineNumber--;\n\t}\n\n\t// Nothing to sort if user didn't select anything.\n\tif (startLineNumber >= endLineNumber) {\n\t\treturn null;\n\t}\n\n\tconst linesToSort: string[] = [];\n\n\t// Get the contents of the selection to be sorted.\n\tfor (\n\t\tlet lineNumber = startLineNumber;\n\t\tlineNumber <= endLineNumber;\n\t\tlineNumber++\n\t) {\n\t\tlinesToSort.push(model.getLineContent(lineNumber));\n\t}\n\n\tlet sorted = linesToSort.slice(0);\n\tsorted.sort(SortLinesCommand.getCollator().compare);\n\n\t// If descending, reverse the order.\n\tif (descending === true) {\n\t\tsorted = sorted.reverse();\n\t}\n\n\treturn {\n\t\tstartLineNumber: startLineNumber,\n\t\tendLineNumber: endLineNumber,\n\t\tbefore: linesToSort,\n\t\tafter: sorted,\n\t};\n}\n\n/**\n * Generate commands for sorting lines on a model.\n */\nfunction sortLines(\n\tmodel: ITextModel,\n\tselection: Selection,\n\tdescending: boolean,\n): ISingleEditOperation | null {\n\tconst data = getSortData(model, selection, descending);\n\n\tif (!data) {\n\t\treturn null;\n\t}\n\n\treturn EditOperation.replace(\n\t\tnew Range(\n\t\t\tdata.startLineNumber,\n\t\t\t1,\n\t\t\tdata.endLineNumber,\n\t\t\tmodel.getLineMaxColumn(data.endLineNumber),\n\t\t),\n\t\tdata.after.join(\"\\n\"),\n\t);\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,OAEM;AACP,SAAS,aAAa;AASf,MAAM,iBAAqC;AAAA,EAlBlD,OAkBkD;AAAA;AAAA;AAAA,EACjD,OAAe,YAAkC;AAAA,EACjD,OAAc,cAA6B;AAC1C,QAAI,CAAC,iBAAiB,WAAW;AAChC,uBAAiB,YAAY,IAAI,KAAK,SAAS;AAAA,IAChD;AACA,WAAO,iBAAiB;AAAA,EACzB;AAAA,EAEiB;AAAA,EACA;AAAA,EACT;AAAA,EAER,YAAY,WAAsB,YAAqB;AACtD,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,cAAc;AAAA,EACpB;AAAA,EAEO,kBACN,OACA,SACO;AACP,UAAM,KAAK,UAAU,OAAO,KAAK,WAAW,KAAK,UAAU;AAC3D,QAAI,IAAI;AACP,cAAQ,iBAAiB,GAAG,OAAO,GAAG,IAAI;AAAA,IAC3C;AAEA,SAAK,cAAc,QAAQ,eAAe,KAAK,SAAS;AAAA,EACzD;AAAA,EAEO,mBACN,OACA,QACY;AACZ,WAAO,OAAO,oBAAoB,KAAK,WAAY;AAAA,EACpD;AAAA,EAEA,OAAc,OACb,OACA,WACA,YACU;AACV,QAAI,UAAU,MAAM;AACnB,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,YAAY,OAAO,WAAW,UAAU;AAErD,QAAI,CAAC,MAAM;AACV,aAAO;AAAA,IACR;AAEA,aAAS,IAAI,GAAG,MAAM,KAAK,OAAO,QAAQ,IAAI,KAAK,KAAK;AACvD,UAAI,KAAK,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC,GAAG;AACrC,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAEA,SAAS,YACR,OACA,WACA,YACC;AACD,QAAM,kBAAkB,UAAU;AAClC,MAAI,gBAAgB,UAAU;AAE9B,MAAI,UAAU,cAAc,GAAG;AAC9B;AAAA,EACD;AAGA,MAAI,mBAAmB,eAAe;AACrC,WAAO;AAAA,EACR;AAEA,QAAM,cAAwB,CAAC;AAG/B,WACK,aAAa,iBACjB,cAAc,eACd,cACC;AACD,gBAAY,KAAK,MAAM,eAAe,UAAU,CAAC;AAAA,EAClD;AAEA,MAAI,SAAS,YAAY,MAAM,CAAC;AAChC,SAAO,KAAK,iBAAiB,YAAY,EAAE,OAAO;AAGlD,MAAI,eAAe,MAAM;AACxB,aAAS,OAAO,QAAQ;AAAA,EACzB;AAEA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR,OAAO;AAAA,EACR;AACD;AA1CS;AA+CT,SAAS,UACR,OACA,WACA,YAC8B;AAC9B,QAAM,OAAO,YAAY,OAAO,WAAW,UAAU;AAErD,MAAI,CAAC,MAAM;AACV,WAAO;AAAA,EACR;AAEA,SAAO,cAAc;AAAA,IACpB,IAAI;AAAA,MACH,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,MACL,MAAM,iBAAiB,KAAK,aAAa;AAAA,IAC1C;AAAA,IACA,KAAK,MAAM,KAAK,IAAI;AAAA,EACrB;AACD;AApBS;",
  "names": []
}
