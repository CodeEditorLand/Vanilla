import{CharCode as d}from"../../../../../vs/base/common/charCode.js";import{isLowerAsciiLetter as m,isUpperAsciiLetter as h}from"../../../../../vs/base/common/strings.js";import"../../../../../vs/editor/common/core/position.js";import{Range as g}from"../../../../../vs/editor/common/core/range.js";import"../../../../../vs/editor/common/languages.js";import"../../../../../vs/editor/common/model.js";class w{constructor(n=!0){this.selectSubwords=n}provideSelectionRanges(n,t){const e=[];for(const i of t){const o=[];e.push(o),this.selectSubwords&&this._addInWordRanges(o,n,i),this._addWordRanges(o,n,i),this._addWhitespaceLine(o,n,i),o.push({range:n.getFullModelRange()})}return e}_addInWordRanges(n,t,e){const i=t.getWordAtPosition(e);if(!i)return;const{word:o,startColumn:c}=i,u=e.column-c;let a=u,s=u,l=0;for(;a>=0;a--){const r=o.charCodeAt(a);if(a!==u&&(r===d.Underline||r===d.Dash))break;if(m(r)&&h(l))break;l=r}for(a+=1;s<o.length;s++){const r=o.charCodeAt(s);if(h(r)&&m(l))break;if(r===d.Underline||r===d.Dash)break;l=r}a<s&&n.push({range:new g(e.lineNumber,c+a,e.lineNumber,c+s)})}_addWordRanges(n,t,e){const i=t.getWordAtPosition(e);i&&n.push({range:new g(e.lineNumber,i.startColumn,e.lineNumber,i.endColumn)})}_addWhitespaceLine(n,t,e){t.getLineLength(e.lineNumber)>0&&t.getLineFirstNonWhitespaceColumn(e.lineNumber)===0&&t.getLineLastNonWhitespaceColumn(e.lineNumber)===0&&n.push({range:new g(e.lineNumber,1,e.lineNumber,t.getLineMaxColumn(e.lineNumber))})}}export{w as WordSelectionRangeProvider};
