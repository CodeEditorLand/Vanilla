import{CharCode as c}from"../../../../base/common/charCode.js";import{isLowerAsciiLetter as u,isUpperAsciiLetter as h}from"../../../../base/common/strings.js";import{Range as m}from"../../../common/core/range.js";class S{constructor(n=!0){this.selectSubwords=n}provideSelectionRanges(n,t){const e=[];for(const i of t){const o=[];e.push(o),this.selectSubwords&&this._addInWordRanges(o,n,i),this._addWordRanges(o,n,i),this._addWhitespaceLine(o,n,i),o.push({range:n.getFullModelRange()})}return e}_addInWordRanges(n,t,e){const i=t.getWordAtPosition(e);if(!i)return;const{word:o,startColumn:d}=i,g=e.column-d;let a=g,s=g,l=0;for(;a>=0;a--){const r=o.charCodeAt(a);if(a!==g&&(r===c.Underline||r===c.Dash))break;if(u(r)&&h(l))break;l=r}for(a+=1;s<o.length;s++){const r=o.charCodeAt(s);if(h(r)&&u(l))break;if(r===c.Underline||r===c.Dash)break;l=r}a<s&&n.push({range:new m(e.lineNumber,d+a,e.lineNumber,d+s)})}_addWordRanges(n,t,e){const i=t.getWordAtPosition(e);i&&n.push({range:new m(e.lineNumber,i.startColumn,e.lineNumber,i.endColumn)})}_addWhitespaceLine(n,t,e){t.getLineLength(e.lineNumber)>0&&t.getLineFirstNonWhitespaceColumn(e.lineNumber)===0&&t.getLineLastNonWhitespaceColumn(e.lineNumber)===0&&n.push({range:new m(e.lineNumber,1,e.lineNumber,t.getLineMaxColumn(e.lineNumber))})}}export{S as WordSelectionRangeProvider};
