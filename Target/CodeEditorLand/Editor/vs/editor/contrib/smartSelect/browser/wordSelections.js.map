{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/smartSelect/browser/wordSelections.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport {\n\tisLowerAsciiLetter,\n\tisUpperAsciiLetter,\n} from \"../../../../base/common/strings.js\";\nimport type { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type {\n\tSelectionRange,\n\tSelectionRangeProvider,\n} from \"../../../common/languages.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nexport class WordSelectionRangeProvider implements SelectionRangeProvider {\n\tconstructor(private readonly selectSubwords = true) {}\n\n\tprovideSelectionRanges(\n\t\tmodel: ITextModel,\n\t\tpositions: Position[],\n\t): SelectionRange[][] {\n\t\tconst result: SelectionRange[][] = [];\n\t\tfor (const position of positions) {\n\t\t\tconst bucket: SelectionRange[] = [];\n\t\t\tresult.push(bucket);\n\t\t\tif (this.selectSubwords) {\n\t\t\t\tthis._addInWordRanges(bucket, model, position);\n\t\t\t}\n\t\t\tthis._addWordRanges(bucket, model, position);\n\t\t\tthis._addWhitespaceLine(bucket, model, position);\n\t\t\tbucket.push({ range: model.getFullModelRange() });\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _addInWordRanges(\n\t\tbucket: SelectionRange[],\n\t\tmodel: ITextModel,\n\t\tpos: Position,\n\t): void {\n\t\tconst obj = model.getWordAtPosition(pos);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { word, startColumn } = obj;\n\t\tconst offset = pos.column - startColumn;\n\t\tlet start = offset;\n\t\tlet end = offset;\n\t\tlet lastCh = 0;\n\n\t\t// LEFT anchor (start)\n\t\tfor (; start >= 0; start--) {\n\t\t\tconst ch = word.charCodeAt(start);\n\t\t\tif (\n\t\t\t\tstart !== offset &&\n\t\t\t\t(ch === CharCode.Underline || ch === CharCode.Dash)\n\t\t\t) {\n\t\t\t\t// foo-bar OR foo_bar\n\t\t\t\tbreak;\n\t\t\t} else if (isLowerAsciiLetter(ch) && isUpperAsciiLetter(lastCh)) {\n\t\t\t\t// fooBar\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastCh = ch;\n\t\t}\n\t\tstart += 1;\n\n\t\t// RIGHT anchor (end)\n\t\tfor (; end < word.length; end++) {\n\t\t\tconst ch = word.charCodeAt(end);\n\t\t\tif (isUpperAsciiLetter(ch) && isLowerAsciiLetter(lastCh)) {\n\t\t\t\t// fooBar\n\t\t\t\tbreak;\n\t\t\t} else if (ch === CharCode.Underline || ch === CharCode.Dash) {\n\t\t\t\t// foo-bar OR foo_bar\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastCh = ch;\n\t\t}\n\n\t\tif (start < end) {\n\t\t\tbucket.push({\n\t\t\t\trange: new Range(\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\tstartColumn + start,\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\tstartColumn + end,\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _addWordRanges(\n\t\tbucket: SelectionRange[],\n\t\tmodel: ITextModel,\n\t\tpos: Position,\n\t): void {\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tif (word) {\n\t\t\tbucket.push({\n\t\t\t\trange: new Range(\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\tword.startColumn,\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\tword.endColumn,\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _addWhitespaceLine(\n\t\tbucket: SelectionRange[],\n\t\tmodel: ITextModel,\n\t\tpos: Position,\n\t): void {\n\t\tif (\n\t\t\tmodel.getLineLength(pos.lineNumber) > 0 &&\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0 &&\n\t\t\tmodel.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0\n\t\t) {\n\t\t\tbucket.push({\n\t\t\t\trange: new Range(\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tpos.lineNumber,\n\t\t\t\t\tmodel.getLineMaxColumn(pos.lineNumber),\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,aAAa;AAOf,MAAM,2BAA6D;AAAA,EACzE,YAA6B,iBAAiB,MAAM;AAAvB;AAAA,EAAwB;AAAA,EAnBtD,OAkB0E;AAAA;AAAA;AAAA,EAGzE,uBACC,OACA,WACqB;AACrB,UAAM,SAA6B,CAAC;AACpC,eAAW,YAAY,WAAW;AACjC,YAAM,SAA2B,CAAC;AAClC,aAAO,KAAK,MAAM;AAClB,UAAI,KAAK,gBAAgB;AACxB,aAAK,iBAAiB,QAAQ,OAAO,QAAQ;AAAA,MAC9C;AACA,WAAK,eAAe,QAAQ,OAAO,QAAQ;AAC3C,WAAK,mBAAmB,QAAQ,OAAO,QAAQ;AAC/C,aAAO,KAAK,EAAE,OAAO,MAAM,kBAAkB,EAAE,CAAC;AAAA,IACjD;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,iBACP,QACA,OACA,KACO;AACP,UAAM,MAAM,MAAM,kBAAkB,GAAG;AACvC,QAAI,CAAC,KAAK;AACT;AAAA,IACD;AAEA,UAAM,EAAE,MAAM,YAAY,IAAI;AAC9B,UAAM,SAAS,IAAI,SAAS;AAC5B,QAAI,QAAQ;AACZ,QAAI,MAAM;AACV,QAAI,SAAS;AAGb,WAAO,SAAS,GAAG,SAAS;AAC3B,YAAM,KAAK,KAAK,WAAW,KAAK;AAChC,UACC,UAAU,WACT,OAAO,SAAS,aAAa,OAAO,SAAS,OAC7C;AAED;AAAA,MACD,WAAW,mBAAmB,EAAE,KAAK,mBAAmB,MAAM,GAAG;AAEhE;AAAA,MACD;AACA,eAAS;AAAA,IACV;AACA,aAAS;AAGT,WAAO,MAAM,KAAK,QAAQ,OAAO;AAChC,YAAM,KAAK,KAAK,WAAW,GAAG;AAC9B,UAAI,mBAAmB,EAAE,KAAK,mBAAmB,MAAM,GAAG;AAEzD;AAAA,MACD,WAAW,OAAO,SAAS,aAAa,OAAO,SAAS,MAAM;AAE7D;AAAA,MACD;AACA,eAAS;AAAA,IACV;AAEA,QAAI,QAAQ,KAAK;AAChB,aAAO,KAAK;AAAA,QACX,OAAO,IAAI;AAAA,UACV,IAAI;AAAA,UACJ,cAAc;AAAA,UACd,IAAI;AAAA,UACJ,cAAc;AAAA,QACf;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,eACP,QACA,OACA,KACO;AACP,UAAM,OAAO,MAAM,kBAAkB,GAAG;AACxC,QAAI,MAAM;AACT,aAAO,KAAK;AAAA,QACX,OAAO,IAAI;AAAA,UACV,IAAI;AAAA,UACJ,KAAK;AAAA,UACL,IAAI;AAAA,UACJ,KAAK;AAAA,QACN;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,mBACP,QACA,OACA,KACO;AACP,QACC,MAAM,cAAc,IAAI,UAAU,IAAI,KACtC,MAAM,gCAAgC,IAAI,UAAU,MAAM,KAC1D,MAAM,+BAA+B,IAAI,UAAU,MAAM,GACxD;AACD,aAAO,KAAK;AAAA,QACX,OAAO,IAAI;AAAA,UACV,IAAI;AAAA,UACJ;AAAA,UACA,IAAI;AAAA,UACJ,MAAM,iBAAiB,IAAI,UAAU;AAAA,QACtC;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;",
  "names": []
}
