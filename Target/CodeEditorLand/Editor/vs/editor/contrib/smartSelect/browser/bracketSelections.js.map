{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/smartSelect/browser/bracketSelections.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { SelectionRange, SelectionRangeProvider } from '../../../common/languages.js';\n\nexport class BracketSelectionRangeProvider implements SelectionRangeProvider {\n\n\tasync provideSelectionRanges(model: ITextModel, positions: Position[]): Promise<SelectionRange[][]> {\n\t\tconst result: SelectionRange[][] = [];\n\n\t\tfor (const position of positions) {\n\t\t\tconst bucket: SelectionRange[] = [];\n\t\t\tresult.push(bucket);\n\n\t\t\tconst ranges = new Map<string, LinkedList<Range>>();\n\t\t\tawait new Promise<void>(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n\t\t\tawait new Promise<void>(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic static _maxDuration = 30;\n\tprivate static readonly _maxRounds = 2;\n\n\tprivate static _bracketsRightYield(resolve: () => void, round: number, model: ITextModel, pos: Position, ranges: Map<string, LinkedList<Range>>): void {\n\t\tconst counts = new Map<string, number>();\n\t\tconst t1 = Date.now();\n\t\twhile (true) {\n\t\t\tif (round >= BracketSelectionRangeProvider._maxRounds) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!pos) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst bracket = model.bracketPairs.findNextBracket(pos);\n\t\t\tif (!bracket) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst d = Date.now() - t1;\n\t\t\tif (d > BracketSelectionRangeProvider._maxDuration) {\n\t\t\t\tsetTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (bracket.bracketInfo.isOpeningBracket) {\n\t\t\t\tconst key = bracket.bracketInfo.bracketText;\n\t\t\t\t// wait for closing\n\t\t\t\tconst val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tcounts.set(key, val + 1);\n\t\t\t} else {\n\t\t\t\tconst key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n\t\t\t\t// process closing\n\t\t\t\tlet val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tval -= 1;\n\t\t\t\tcounts.set(key, Math.max(0, val));\n\t\t\t\tif (val < 0) {\n\t\t\t\t\tlet list = ranges.get(key);\n\t\t\t\t\tif (!list) {\n\t\t\t\t\t\tlist = new LinkedList();\n\t\t\t\t\t\tranges.set(key, list);\n\t\t\t\t\t}\n\t\t\t\t\tlist.push(bracket.range);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos = bracket.range.getEndPosition();\n\t\t}\n\t}\n\n\tprivate static _bracketsLeftYield(resolve: () => void, round: number, model: ITextModel, pos: Position, ranges: Map<string, LinkedList<Range>>, bucket: SelectionRange[]): void {\n\t\tconst counts = new Map<string, number>();\n\t\tconst t1 = Date.now();\n\t\twhile (true) {\n\t\t\tif (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!pos) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst bracket = model.bracketPairs.findPrevBracket(pos);\n\t\t\tif (!bracket) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst d = Date.now() - t1;\n\t\t\tif (d > BracketSelectionRangeProvider._maxDuration) {\n\t\t\t\tsetTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!bracket.bracketInfo.isOpeningBracket) {\n\t\t\t\tconst key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n\t\t\t\t// wait for opening\n\t\t\t\tconst val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tcounts.set(key, val + 1);\n\t\t\t} else {\n\t\t\t\tconst key = bracket.bracketInfo.bracketText;\n\t\t\t\t// opening\n\t\t\t\tlet val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tval -= 1;\n\t\t\t\tcounts.set(key, Math.max(0, val));\n\t\t\t\tif (val < 0) {\n\t\t\t\t\tconst list = ranges.get(key);\n\t\t\t\t\tif (list) {\n\t\t\t\t\t\tconst closing = list.shift();\n\t\t\t\t\t\tif (list.size === 0) {\n\t\t\t\t\t\t\tranges.delete(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing!.getStartPosition());\n\t\t\t\t\t\tconst outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing!.getEndPosition());\n\t\t\t\t\t\tbucket.push({ range: innerBracket });\n\t\t\t\t\t\tbucket.push({ range: outerBracket });\n\t\t\t\t\t\tBracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos = bracket.range.getStartPosition();\n\t\t}\n\t}\n\n\tprivate static _addBracketLeading(model: ITextModel, bracket: Range, bucket: SelectionRange[]): void {\n\t\tif (bracket.startLineNumber === bracket.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\t\t// xxxxxxxx {\n\t\t//\n\t\t// }\n\t\tconst startLine = bracket.startLineNumber;\n\t\tconst column = model.getLineFirstNonWhitespaceColumn(startLine);\n\t\tif (column !== 0 && column !== bracket.startColumn) {\n\t\t\tbucket.push({ range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition()) });\n\t\t\tbucket.push({ range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition()) });\n\t\t}\n\n\t\t// xxxxxxxx\n\t\t// {\n\t\t//\n\t\t// }\n\t\tconst aboveLine = startLine - 1;\n\t\tif (aboveLine > 0) {\n\t\t\tconst column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n\t\t\tif (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n\t\t\t\tbucket.push({ range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition()) });\n\t\t\t\tbucket.push({ range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition()) });\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["column"]
}
