import S from"assert";import{CancellationToken as P}from"../../../../../base/common/cancellation.js";import{Event as L}from"../../../../../base/common/event.js";import{DisposableStore as C}from"../../../../../base/common/lifecycle.js";import{URI as h}from"../../../../../base/common/uri.js";import{Position as T}from"../../../../common/core/position.js";import{Range as e}from"../../../../common/core/range.js";import"../../../../common/languages.js";import{ILanguageConfigurationService as _}from"../../../../common/languages/languageConfigurationRegistry.js";import{IModelService as I}from"../../../../common/services/model.js";import{BracketSelectionRangeProvider as a}from"../../browser/bracketSelections.js";import{provideSelectionRanges as N}from"../../browser/smartSelect.js";import{WordSelectionRangeProvider as t}from"../../browser/wordSelections.js";import{createModelServices as A}from"../../../../test/common/testTextModel.js";import{javascriptOnEnterRules as D}from"../../../../test/common/modes/supports/onEnterRules.js";import{LanguageFeatureRegistry as x}from"../../../../common/languageFeatureRegistry.js";import{ILanguageService as E}from"../../../../common/languages/language.js";import{ensureNoDisposablesAreLeakedInTestSuite as M}from"../../../../../base/test/common/utils.js";class k{constructor(c){this.languageId=c}onDidChange=L.None}suite("SmartSelect",()=>{const R=a._maxDuration;suiteSetup(()=>{a._maxDuration=5e3}),suiteTeardown(()=>{a._maxDuration=R});const c="mockJSMode";let l,g;const v=new x;setup(()=>{l=new C;const r=A(l);g=r.get(I);const w=r.get(_),i=r.get(E);l.add(i.registerLanguage({id:c})),l.add(w.register(c,{brackets:[["(",")"],["{","}"],["[","]"]],onEnterRules:D,wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\$\%\^\&\*\(\)\=\+\[\{\]\}\\\;\:\'\"\,\.\<\>\/\?\s]+)/g}))}),teardown(()=>{l.dispose()}),M();async function o(r,w,i,p,d=!0){const f=h.file("test.js"),y=g.createModel(r.join(`
`),new k(c),f),[b]=await N(v,y,[new T(w,i)],{selectLeadingAndTrailingWhitespace:d,selectSubwords:!0},P.None),u=b.map(s=>new e(s.startLineNumber,s.startColumn,s.endLineNumber,s.endColumn).toString()),m=p.reverse().map(s=>String(s));S.deepStrictEqual(u,m,`
A: ${u} VS 
E: ${m}`),g.destroyModel(f)}test("getRangesToPosition #1",()=>o(["function a(bar, foo){","	if (bar) {","		return (bar + (2 * foo))","	}","}"],3,20,[new e(1,1,5,2),new e(1,21,5,2),new e(1,22,5,1),new e(2,1,4,3),new e(2,1,4,3),new e(2,2,4,3),new e(2,11,4,3),new e(2,12,4,2),new e(3,1,3,27),new e(3,3,3,27),new e(3,10,3,27),new e(3,11,3,26),new e(3,17,3,26),new e(3,18,3,25)])),test("config: selectLeadingAndTrailingWhitespace",async()=>{await o(["aaa","	bbb",""],2,3,[new e(1,1,3,1),new e(2,1,2,5),new e(2,2,2,5)],!0),await o(["aaa","	bbb",""],2,3,[new e(1,1,3,1),new e(2,2,2,5)],!1)}),test("getRangesToPosition #56886. Skip empty lines correctly.",()=>o(["function a(bar, foo){","	if (bar) {","","	}","}"],3,1,[new e(1,1,5,2),new e(1,21,5,2),new e(1,22,5,1),new e(2,1,4,3),new e(2,1,4,3),new e(2,2,4,3),new e(2,11,4,3),new e(2,12,4,2)])),test("getRangesToPosition #56886. Do not skip lines with only whitespaces.",()=>o(["function a(bar, foo){","	if (bar) {"," ","	}","}"],3,1,[new e(1,1,5,2),new e(1,21,5,2),new e(1,22,5,1),new e(2,1,4,3),new e(2,1,4,3),new e(2,2,4,3),new e(2,11,4,3),new e(2,12,4,2),new e(3,1,3,2),new e(3,1,3,2)])),test("getRangesToPosition #40658. Cursor at first position inside brackets should select line inside.",()=>o([" [ ]"," { } ","( ) "],2,3,[new e(1,1,3,5),new e(2,1,2,6),new e(2,2,2,5),new e(2,3,2,4)])),test("getRangesToPosition #40658. Cursor in empty brackets should reveal brackets first.",()=>o([" [] "," { } ","  ( ) "],1,3,[new e(1,1,3,7),new e(1,1,1,5),new e(1,2,1,4),new e(1,3,1,3)])),test("getRangesToPosition #40658. Tokens before bracket will be revealed first.",()=>o(["  [] "," { } ","selectthis( ) "],3,11,[new e(1,1,3,15),new e(3,1,3,15),new e(3,1,3,14),new e(3,1,3,11)]));async function n(r,w,...i){const p=w.indexOf("|");w=w.replace("|","");const d=g.createModel(w,new k(c),h.parse("fake:lang")),f=d.getPositionAt(p),b=(await r.provideSelectionRanges(d,[f],P.None))[0];g.destroyModel(d.uri),S.strictEqual(i.length,b.length);for(const u of b){const m=i.shift()||null;S.ok(e.equalsRange(u.range,m),`A=${u.range} <> E=${m}`)}}test("bracket selection",async()=>{await n(new a,"(|)",new e(1,2,1,2),new e(1,1,1,3)),await n(new a,"[[[](|)]]",new e(1,6,1,6),new e(1,5,1,7),new e(1,3,1,7),new e(1,2,1,8),new e(1,2,1,8),new e(1,1,1,9)),await n(new a,"[a[](|)a]",new e(1,6,1,6),new e(1,5,1,7),new e(1,2,1,8),new e(1,1,1,9)),await n(new a,"fofof|fofo"),await n(new a,"[[[]()]]|"),await n(new a,"|[[[]()]]"),await n(new a,"[|[[]()]]",new e(1,2,1,8),new e(1,1,1,9)),await n(new a,"[[[]()]|]",new e(1,2,1,8),new e(1,1,1,9)),await n(new a,"aaa(aaa)bbb(b|b)ccc(ccc)",new e(1,13,1,15),new e(1,12,1,16)),await n(new a,"(aaa(aaa)bbb(b|b)ccc(ccc))",new e(1,14,1,16),new e(1,13,1,17),new e(1,2,1,25),new e(1,1,1,26))}),test("bracket with leading/trailing",async()=>{await n(new a,`for(a of b){
  foo(|);
}`,new e(2,7,2,7),new e(2,6,2,8),new e(1,13,3,1),new e(1,12,3,2),new e(1,1,3,2),new e(1,1,3,2)),await n(new a,`for(a of b)
{
  foo(|);
}`,new e(3,7,3,7),new e(3,6,3,8),new e(2,2,4,1),new e(2,1,4,2),new e(1,1,4,2),new e(1,1,4,2))}),test("in-word ranges",async()=>{await n(new t,"f|ooBar",new e(1,1,1,4),new e(1,1,1,7),new e(1,1,1,7)),await n(new t,"f|oo_Ba",new e(1,1,1,4),new e(1,1,1,7),new e(1,1,1,7)),await n(new t,"f|oo-Ba",new e(1,1,1,4),new e(1,1,1,7),new e(1,1,1,7))}),test("in-word ranges with selectSubwords=false",async()=>{await n(new t(!1),"f|ooBar",new e(1,1,1,7),new e(1,1,1,7)),await n(new t(!1),"f|oo_Ba",new e(1,1,1,7),new e(1,1,1,7)),await n(new t(!1),"f|oo-Ba",new e(1,1,1,7),new e(1,1,1,7))}),test("Default selection should select current word/hump first in camelCase #67493",async function(){await n(new t,"Abs|tractSmartSelect",new e(1,1,1,9),new e(1,1,1,20),new e(1,1,1,20)),await n(new t,"AbstractSma|rtSelect",new e(1,9,1,14),new e(1,1,1,20),new e(1,1,1,20)),await n(new t,"Abstrac-Sma|rt-elect",new e(1,9,1,14),new e(1,1,1,20),new e(1,1,1,20)),await n(new t,"Abstrac_Sma|rt_elect",new e(1,9,1,14),new e(1,1,1,20),new e(1,1,1,20)),await n(new t,"Abstrac_Sma|rt-elect",new e(1,9,1,14),new e(1,1,1,20),new e(1,1,1,20)),await n(new t,"Abstrac_Sma|rtSelect",new e(1,9,1,14),new e(1,1,1,20),new e(1,1,1,20))}),test("Smart select: only add line ranges if they're contained by the next range #73850",async function(){const r=v.register("*",{provideSelectionRanges(){return[[{range:{startLineNumber:1,startColumn:10,endLineNumber:1,endColumn:11}},{range:{startLineNumber:1,startColumn:10,endLineNumber:3,endColumn:2}},{range:{startLineNumber:1,startColumn:1,endLineNumber:3,endColumn:2}}]]}});await o(["type T = {","	x: number","}"],1,10,[new e(1,1,3,2),new e(1,10,3,2),new e(1,10,1,11)]),r.dispose()}),test("Expand selection in words with underscores is inconsistent #90589",async function(){await n(new t,"Hel|lo_World",new e(1,1,1,6),new e(1,1,1,12),new e(1,1,1,12)),await n(new t,"Hello_Wo|rld",new e(1,7,1,12),new e(1,1,1,12),new e(1,1,1,12)),await n(new t,"Hello|_World",new e(1,1,1,6),new e(1,1,1,12),new e(1,1,1,12)),await n(new t,"Hello_|World",new e(1,7,1,12),new e(1,1,1,12),new e(1,1,1,12)),await n(new t,"Hello|-World",new e(1,1,1,6),new e(1,1,1,12),new e(1,1,1,12)),await n(new t,"Hello-|World",new e(1,7,1,12),new e(1,1,1,12),new e(1,1,1,12)),await n(new t,"Hello|World",new e(1,6,1,11),new e(1,1,1,11),new e(1,1,1,11))})});
