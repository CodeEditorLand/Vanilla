{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/gotoSymbol/browser/link/clickLinkGesture.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IKeyboardEvent } from \"../../../../../base/browser/keyboardEvent.js\";\nimport { Emitter, type Event } from \"../../../../../base/common/event.js\";\nimport { KeyCode } from \"../../../../../base/common/keyCodes.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport * as platform from \"../../../../../base/common/platform.js\";\nimport type {\n\tICodeEditor,\n\tIEditorMouseEvent,\n\tIMouseTarget,\n} from \"../../../../browser/editorBrowser.js\";\nimport { EditorOption } from \"../../../../common/config/editorOptions.js\";\nimport type { ICursorSelectionChangedEvent } from \"../../../../common/cursorEvents.js\";\n\nfunction hasModifier(\n\te: {\n\t\tctrlKey: boolean;\n\t\tshiftKey: boolean;\n\t\taltKey: boolean;\n\t\tmetaKey: boolean;\n\t},\n\tmodifier: \"ctrlKey\" | \"shiftKey\" | \"altKey\" | \"metaKey\",\n): boolean {\n\treturn !!e[modifier];\n}\n\n/**\n * An event that encapsulates the various trigger modifiers logic needed for go to definition.\n */\nexport class ClickLinkMouseEvent {\n\tpublic readonly target: IMouseTarget;\n\tpublic readonly hasTriggerModifier: boolean;\n\tpublic readonly hasSideBySideModifier: boolean;\n\tpublic readonly isNoneOrSingleMouseDown: boolean;\n\tpublic readonly isLeftClick: boolean;\n\tpublic readonly isMiddleClick: boolean;\n\tpublic readonly isRightClick: boolean;\n\n\tconstructor(source: IEditorMouseEvent, opts: ClickLinkOptions) {\n\t\tthis.target = source.target;\n\t\tthis.isLeftClick = source.event.leftButton;\n\t\tthis.isMiddleClick = source.event.middleButton;\n\t\tthis.isRightClick = source.event.rightButton;\n\t\tthis.hasTriggerModifier = hasModifier(\n\t\t\tsource.event,\n\t\t\topts.triggerModifier,\n\t\t);\n\t\tthis.hasSideBySideModifier = hasModifier(\n\t\t\tsource.event,\n\t\t\topts.triggerSideBySideModifier,\n\t\t);\n\t\tthis.isNoneOrSingleMouseDown = source.event.detail <= 1;\n\t}\n}\n\n/**\n * An event that encapsulates the various trigger modifiers logic needed for go to definition.\n */\nexport class ClickLinkKeyboardEvent {\n\tpublic readonly keyCodeIsTriggerKey: boolean;\n\tpublic readonly keyCodeIsSideBySideKey: boolean;\n\tpublic readonly hasTriggerModifier: boolean;\n\n\tconstructor(source: IKeyboardEvent, opts: ClickLinkOptions) {\n\t\tthis.keyCodeIsTriggerKey = source.keyCode === opts.triggerKey;\n\t\tthis.keyCodeIsSideBySideKey =\n\t\t\tsource.keyCode === opts.triggerSideBySideKey;\n\t\tthis.hasTriggerModifier = hasModifier(source, opts.triggerModifier);\n\t}\n}\nexport type TriggerModifier = \"ctrlKey\" | \"shiftKey\" | \"altKey\" | \"metaKey\";\n\nexport class ClickLinkOptions {\n\tpublic readonly triggerKey: KeyCode;\n\tpublic readonly triggerModifier: TriggerModifier;\n\tpublic readonly triggerSideBySideKey: KeyCode;\n\tpublic readonly triggerSideBySideModifier: TriggerModifier;\n\n\tconstructor(\n\t\ttriggerKey: KeyCode,\n\t\ttriggerModifier: TriggerModifier,\n\t\ttriggerSideBySideKey: KeyCode,\n\t\ttriggerSideBySideModifier: TriggerModifier,\n\t) {\n\t\tthis.triggerKey = triggerKey;\n\t\tthis.triggerModifier = triggerModifier;\n\t\tthis.triggerSideBySideKey = triggerSideBySideKey;\n\t\tthis.triggerSideBySideModifier = triggerSideBySideModifier;\n\t}\n\n\tpublic equals(other: ClickLinkOptions): boolean {\n\t\treturn (\n\t\t\tthis.triggerKey === other.triggerKey &&\n\t\t\tthis.triggerModifier === other.triggerModifier &&\n\t\t\tthis.triggerSideBySideKey === other.triggerSideBySideKey &&\n\t\t\tthis.triggerSideBySideModifier === other.triggerSideBySideModifier\n\t\t);\n\t}\n}\n\nfunction createOptions(\n\tmultiCursorModifier: \"altKey\" | \"ctrlKey\" | \"metaKey\",\n): ClickLinkOptions {\n\tif (multiCursorModifier === \"altKey\") {\n\t\tif (platform.isMacintosh) {\n\t\t\treturn new ClickLinkOptions(\n\t\t\t\tKeyCode.Meta,\n\t\t\t\t\"metaKey\",\n\t\t\t\tKeyCode.Alt,\n\t\t\t\t\"altKey\",\n\t\t\t);\n\t\t}\n\t\treturn new ClickLinkOptions(\n\t\t\tKeyCode.Ctrl,\n\t\t\t\"ctrlKey\",\n\t\t\tKeyCode.Alt,\n\t\t\t\"altKey\",\n\t\t);\n\t}\n\n\tif (platform.isMacintosh) {\n\t\treturn new ClickLinkOptions(\n\t\t\tKeyCode.Alt,\n\t\t\t\"altKey\",\n\t\t\tKeyCode.Meta,\n\t\t\t\"metaKey\",\n\t\t);\n\t}\n\treturn new ClickLinkOptions(KeyCode.Alt, \"altKey\", KeyCode.Ctrl, \"ctrlKey\");\n}\n\nexport interface IClickLinkGestureOptions {\n\t/**\n\t * Return 0 if the mouse event should not be considered.\n\t */\n\textractLineNumberFromMouseEvent?: (e: ClickLinkMouseEvent) => number;\n}\n\nexport class ClickLinkGesture extends Disposable {\n\tprivate readonly _onMouseMoveOrRelevantKeyDown: Emitter<\n\t\t[ClickLinkMouseEvent, ClickLinkKeyboardEvent | null]\n\t> = this._register(\n\t\tnew Emitter<[ClickLinkMouseEvent, ClickLinkKeyboardEvent | null]>(),\n\t);\n\tpublic readonly onMouseMoveOrRelevantKeyDown: Event<\n\t\t[ClickLinkMouseEvent, ClickLinkKeyboardEvent | null]\n\t> = this._onMouseMoveOrRelevantKeyDown.event;\n\n\tprivate readonly _onExecute: Emitter<ClickLinkMouseEvent> = this._register(\n\t\tnew Emitter<ClickLinkMouseEvent>(),\n\t);\n\tpublic readonly onExecute: Event<ClickLinkMouseEvent> =\n\t\tthis._onExecute.event;\n\n\tprivate readonly _onCancel: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onCancel: Event<void> = this._onCancel.event;\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate readonly _extractLineNumberFromMouseEvent: (\n\t\te: ClickLinkMouseEvent,\n\t) => number;\n\tprivate _opts: ClickLinkOptions;\n\n\tprivate _lastMouseMoveEvent: ClickLinkMouseEvent | null;\n\tprivate _hasTriggerKeyOnMouseDown: boolean;\n\tprivate _lineNumberOnMouseDown: number;\n\n\tconstructor(editor: ICodeEditor, opts?: IClickLinkGestureOptions) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\t\tthis._extractLineNumberFromMouseEvent =\n\t\t\topts?.extractLineNumberFromMouseEvent ??\n\t\t\t((e) => (e.target.position ? e.target.position.lineNumber : 0));\n\t\tthis._opts = createOptions(\n\t\t\tthis._editor.getOption(EditorOption.multiCursorModifier),\n\t\t);\n\n\t\tthis._lastMouseMoveEvent = null;\n\t\tthis._hasTriggerKeyOnMouseDown = false;\n\t\tthis._lineNumberOnMouseDown = 0;\n\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.hasChanged(EditorOption.multiCursorModifier)) {\n\t\t\t\t\tconst newOpts = createOptions(\n\t\t\t\t\t\tthis._editor.getOption(\n\t\t\t\t\t\t\tEditorOption.multiCursorModifier,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (this._opts.equals(newOpts)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._opts = newOpts;\n\t\t\t\t\tthis._lastMouseMoveEvent = null;\n\t\t\t\t\tthis._hasTriggerKeyOnMouseDown = false;\n\t\t\t\t\tthis._lineNumberOnMouseDown = 0;\n\t\t\t\t\tthis._onCancel.fire();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseMove((e: IEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseMove(new ClickLinkMouseEvent(e, this._opts)),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseDown((e: IEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseDown(new ClickLinkMouseEvent(e, this._opts)),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onMouseUp((e: IEditorMouseEvent) =>\n\t\t\t\tthis._onEditorMouseUp(new ClickLinkMouseEvent(e, this._opts)),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onKeyDown((e: IKeyboardEvent) =>\n\t\t\t\tthis._onEditorKeyDown(\n\t\t\t\t\tnew ClickLinkKeyboardEvent(e, this._opts),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onKeyUp((e: IKeyboardEvent) =>\n\t\t\t\tthis._onEditorKeyUp(new ClickLinkKeyboardEvent(e, this._opts)),\n\t\t\t),\n\t\t);\n\t\tthis._register(this._editor.onMouseDrag(() => this._resetHandler()));\n\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeCursorSelection((e) =>\n\t\t\t\tthis._onDidChangeCursorSelection(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeModel((e) => this._resetHandler()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeModelContent(() => this._resetHandler()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onDidScrollChange((e) => {\n\t\t\t\tif (e.scrollTopChanged || e.scrollLeftChanged) {\n\t\t\t\t\tthis._resetHandler();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _onDidChangeCursorSelection(e: ICursorSelectionChangedEvent): void {\n\t\tif (e.selection && e.selection.startColumn !== e.selection.endColumn) {\n\t\t\tthis._resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/microsoft/vscode/issues/7827)\n\t\t}\n\t}\n\n\tprivate _onEditorMouseMove(mouseEvent: ClickLinkMouseEvent): void {\n\t\tthis._lastMouseMoveEvent = mouseEvent;\n\n\t\tthis._onMouseMoveOrRelevantKeyDown.fire([mouseEvent, null]);\n\t}\n\n\tprivate _onEditorMouseDown(mouseEvent: ClickLinkMouseEvent): void {\n\t\t// We need to record if we had the trigger key on mouse down because someone might select something in the editor\n\t\t// holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then\n\t\t// release the mouse button without wanting to do the navigation.\n\t\t// With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.\n\t\tthis._hasTriggerKeyOnMouseDown = mouseEvent.hasTriggerModifier;\n\t\tthis._lineNumberOnMouseDown =\n\t\t\tthis._extractLineNumberFromMouseEvent(mouseEvent);\n\t}\n\n\tprivate _onEditorMouseUp(mouseEvent: ClickLinkMouseEvent): void {\n\t\tconst currentLineNumber =\n\t\t\tthis._extractLineNumberFromMouseEvent(mouseEvent);\n\t\tif (\n\t\t\tthis._hasTriggerKeyOnMouseDown &&\n\t\t\tthis._lineNumberOnMouseDown &&\n\t\t\tthis._lineNumberOnMouseDown === currentLineNumber\n\t\t) {\n\t\t\tthis._onExecute.fire(mouseEvent);\n\t\t}\n\t}\n\n\tprivate _onEditorKeyDown(e: ClickLinkKeyboardEvent): void {\n\t\tif (\n\t\t\tthis._lastMouseMoveEvent &&\n\t\t\t(e.keyCodeIsTriggerKey || // User just pressed Ctrl/Cmd (normal goto definition)\n\t\t\t\t(e.keyCodeIsSideBySideKey && e.hasTriggerModifier)) // User pressed Ctrl/Cmd+Alt (goto definition to the side)\n\t\t) {\n\t\t\tthis._onMouseMoveOrRelevantKeyDown.fire([\n\t\t\t\tthis._lastMouseMoveEvent,\n\t\t\t\te,\n\t\t\t]);\n\t\t} else if (e.hasTriggerModifier) {\n\t\t\tthis._onCancel.fire(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration\n\t\t}\n\t}\n\n\tprivate _onEditorKeyUp(e: ClickLinkKeyboardEvent): void {\n\t\tif (e.keyCodeIsTriggerKey) {\n\t\t\tthis._onCancel.fire();\n\t\t}\n\t}\n\n\tprivate _resetHandler(): void {\n\t\tthis._lastMouseMoveEvent = null;\n\t\tthis._hasTriggerKeyOnMouseDown = false;\n\t\tthis._onCancel.fire();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
