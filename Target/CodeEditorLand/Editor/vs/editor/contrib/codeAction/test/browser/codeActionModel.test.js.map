{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/test/browser/codeActionModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { promiseWithResolvers } from '../../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../../base/common/types.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { LanguageFeatureRegistry } from '../../../../common/languageFeatureRegistry.js';\nimport * as languages from '../../../../common/languages.js';\nimport { TextModel } from '../../../../common/model/textModel.js';\nimport { CodeActionModel, CodeActionsState } from '../../browser/codeActionModel.js';\nimport { createTestCodeEditor } from '../../../../test/browser/testCodeEditor.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { MarkerService } from '../../../../../platform/markers/common/markerService.js';\n\nconst testProvider = {\n\tprovideCodeActions(): languages.CodeActionList {\n\t\treturn {\n\t\t\tactions: [\n\t\t\t\t{ title: 'test', command: { id: 'test-command', title: 'test', arguments: [] } }\n\t\t\t],\n\t\t\tdispose() { /* noop*/ }\n\t\t};\n\t}\n};\n\nsuite('CodeActionModel', () => {\n\n\tconst languageId = 'foo-lang';\n\tconst uri = URI.parse('untitled:path');\n\tlet model: TextModel;\n\tlet markerService: MarkerService;\n\tlet editor: ICodeEditor;\n\tlet registry: LanguageFeatureRegistry<languages.CodeActionProvider>;\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.clear();\n\t\tmarkerService = new MarkerService();\n\t\tmodel = createTextModel('foobar  foo bar\\nfarboo far boo', languageId, undefined, uri);\n\t\teditor = createTestCodeEditor(model);\n\t\teditor.setPosition({ lineNumber: 1, column: 1 });\n\t\tregistry = new LanguageFeatureRegistry();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t\teditor.dispose();\n\t\tmodel.dispose();\n\t\tmarkerService.dispose();\n\t});\n\n\ttest('Oracle -> marker added', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\tconst reg = registry.register(languageId, testProvider);\n\t\t\tdisposables.add(reg);\n\n\t\t\tconst contextKeys = new MockContextKeyService();\n\t\t\tconst model = disposables.add(new CodeActionModel(editor, registry, markerService, contextKeys, undefined));\n\t\t\tdisposables.add(model.onDidChangeState((e: CodeActionsState.State) => {\n\t\t\t\tassertType(e.type === CodeActionsState.Type.Triggered);\n\n\t\t\t\tassert.strictEqual(e.trigger.type, languages.CodeActionTriggerType.Auto);\n\t\t\t\tassert.ok(e.actions);\n\n\t\t\t\te.actions.then(fixes => {\n\t\t\t\t\tmodel.dispose();\n\t\t\t\t\tassert.strictEqual(fixes.validActions.length, 1);\n\t\t\t\t\tdone();\n\t\t\t\t}, done);\n\t\t\t}));\n\n\t\t\t// start here\n\t\t\tmarkerService.changeOne('fake', uri, [{\n\t\t\t\tstartLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 6,\n\t\t\t\tmessage: 'error',\n\t\t\t\tseverity: 1,\n\t\t\t\tcode: '',\n\t\t\t\tsource: ''\n\t\t\t}]);\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('Oracle -> position changed', async () => {\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\tconst reg = registry.register(languageId, testProvider);\n\t\t\tdisposables.add(reg);\n\n\t\t\tmarkerService.changeOne('fake', uri, [{\n\t\t\t\tstartLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 6,\n\t\t\t\tmessage: 'error',\n\t\t\t\tseverity: 1,\n\t\t\t\tcode: '',\n\t\t\t\tsource: ''\n\t\t\t}]);\n\n\t\t\teditor.setPosition({ lineNumber: 2, column: 1 });\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst contextKeys = new MockContextKeyService();\n\t\t\t\tconst model = disposables.add(new CodeActionModel(editor, registry, markerService, contextKeys, undefined));\n\t\t\t\tdisposables.add(model.onDidChangeState((e: CodeActionsState.State) => {\n\t\t\t\t\tassertType(e.type === CodeActionsState.Type.Triggered);\n\n\t\t\t\t\tassert.strictEqual(e.trigger.type, languages.CodeActionTriggerType.Auto);\n\t\t\t\t\tassert.ok(e.actions);\n\t\t\t\t\te.actions.then(fixes => {\n\t\t\t\t\t\tmodel.dispose();\n\t\t\t\t\t\tassert.strictEqual(fixes.validActions.length, 1);\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}, reject);\n\t\t\t\t}));\n\t\t\t\t// start here\n\t\t\t\teditor.setPosition({ lineNumber: 1, column: 1 });\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Oracle -> should only auto trigger once for cursor and marker update right after each other', async () => {\n\t\tconst { promise: donePromise, resolve: done } = promiseWithResolvers<void>();\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\tconst reg = registry.register(languageId, testProvider);\n\t\t\tdisposables.add(reg);\n\n\t\t\tlet triggerCount = 0;\n\t\t\tconst contextKeys = new MockContextKeyService();\n\t\t\tconst model = disposables.add(new CodeActionModel(editor, registry, markerService, contextKeys, undefined));\n\t\t\tdisposables.add(model.onDidChangeState((e: CodeActionsState.State) => {\n\t\t\t\tassertType(e.type === CodeActionsState.Type.Triggered);\n\n\t\t\t\tassert.strictEqual(e.trigger.type, languages.CodeActionTriggerType.Auto);\n\t\t\t\t++triggerCount;\n\n\t\t\t\t// give time for second trigger before completing test\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tmodel.dispose();\n\t\t\t\t\tassert.strictEqual(triggerCount, 1);\n\t\t\t\t\tdone();\n\t\t\t\t}, 0);\n\t\t\t}, 5 /*delay*/));\n\n\t\t\tmarkerService.changeOne('fake', uri, [{\n\t\t\t\tstartLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 6,\n\t\t\t\tmessage: 'error',\n\t\t\t\tseverity: 1,\n\t\t\t\tcode: '',\n\t\t\t\tsource: ''\n\t\t\t}]);\n\n\t\t\teditor.setSelection({ startLineNumber: 1, startColumn: 1, endLineNumber: 4, endColumn: 1 });\n\n\t\t\treturn donePromise;\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["model"]
}
