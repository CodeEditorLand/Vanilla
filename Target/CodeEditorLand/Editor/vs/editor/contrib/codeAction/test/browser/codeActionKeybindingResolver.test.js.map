{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/test/browser/codeActionKeybindingResolver.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { KeyCodeChord } from '../../../../../base/common/keybindings.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { organizeImportsCommandId, refactorCommandId } from '../../browser/codeAction.js';\nimport { CodeActionKeybindingResolver } from '../../browser/codeActionKeybindingResolver.js';\nimport { CodeActionKind } from '../../common/types.js';\nimport { IKeybindingService } from '../../../../../platform/keybinding/common/keybinding.js';\nimport { ResolvedKeybindingItem } from '../../../../../platform/keybinding/common/resolvedKeybindingItem.js';\nimport { USLayoutResolvedKeybinding } from '../../../../../platform/keybinding/common/usLayoutResolvedKeybinding.js';\n\nsuite('CodeActionKeybindingResolver', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst refactorKeybinding = createCodeActionKeybinding(\n\t\tKeyCode.KeyA,\n\t\trefactorCommandId,\n\t\t{ kind: CodeActionKind.Refactor.value });\n\n\tconst refactorExtractKeybinding = createCodeActionKeybinding(\n\t\tKeyCode.KeyB,\n\t\trefactorCommandId,\n\t\t{ kind: CodeActionKind.Refactor.append('extract').value });\n\n\tconst organizeImportsKeybinding = createCodeActionKeybinding(\n\t\tKeyCode.KeyC,\n\t\torganizeImportsCommandId,\n\t\tundefined);\n\n\ttest('Should match refactor keybindings', async function () {\n\t\tconst resolver = new CodeActionKeybindingResolver(\n\t\t\tcreateMockKeyBindingService([refactorKeybinding])\n\t\t).getResolver();\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '' }),\n\t\t\tundefined);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.value }),\n\t\t\trefactorKeybinding.resolvedKeybinding);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.append('extract').value }),\n\t\t\trefactorKeybinding.resolvedKeybinding);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.QuickFix.value }),\n\t\t\tundefined);\n\t});\n\n\ttest('Should prefer most specific keybinding', async function () {\n\t\tconst resolver = new CodeActionKeybindingResolver(\n\t\t\tcreateMockKeyBindingService([refactorKeybinding, refactorExtractKeybinding, organizeImportsKeybinding])\n\t\t).getResolver();\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.value }),\n\t\t\trefactorKeybinding.resolvedKeybinding);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.append('extract').value }),\n\t\t\trefactorExtractKeybinding.resolvedKeybinding);\n\t});\n\n\ttest('Organize imports should still return a keybinding even though it does not have args', async function () {\n\t\tconst resolver = new CodeActionKeybindingResolver(\n\t\t\tcreateMockKeyBindingService([refactorKeybinding, refactorExtractKeybinding, organizeImportsKeybinding])\n\t\t).getResolver();\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.SourceOrganizeImports.value }),\n\t\t\torganizeImportsKeybinding.resolvedKeybinding);\n\t});\n});\n\nfunction createMockKeyBindingService(items: ResolvedKeybindingItem[]): IKeybindingService {\n\treturn <IKeybindingService>{\n\t\tgetKeybindings: (): readonly ResolvedKeybindingItem[] => {\n\t\t\treturn items;\n\t\t},\n\t};\n}\n\nfunction createCodeActionKeybinding(keycode: KeyCode, command: string, commandArgs: any) {\n\treturn new ResolvedKeybindingItem(\n\t\tnew USLayoutResolvedKeybinding(\n\t\t\t[new KeyCodeChord(false, true, false, false, keycode)],\n\t\t\tOperatingSystem.Linux),\n\t\tcommand,\n\t\tcommandArgs,\n\t\tundefined,\n\t\tfalse,\n\t\tnull,\n\t\tfalse);\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,oBAAoB;AAC7B,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AACxD,SAAS,0BAA0B,yBAAyB;AAC5D,SAAS,oCAAoC;AAC7C,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,8BAA8B;AACvC,SAAS,kCAAkC;AAE3C,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,QAAM,qBAAqB;AAAA,IAC1B,QAAQ;AAAA,IACR;AAAA,IACA,EAAE,MAAM,eAAe,SAAS,MAAM;AAAA,EAAC;AAExC,QAAM,4BAA4B;AAAA,IACjC,QAAQ;AAAA,IACR;AAAA,IACA,EAAE,MAAM,eAAe,SAAS,OAAO,SAAS,EAAE,MAAM;AAAA,EAAC;AAE1D,QAAM,4BAA4B;AAAA,IACjC,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EAAS;AAEV,OAAK,qCAAqC,iBAAkB;AAC3D,UAAM,WAAW,IAAI;AAAA,MACpB,4BAA4B,CAAC,kBAAkB,CAAC;AAAA,IACjD,EAAE,YAAY;AAEd,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,GAAG,CAAC;AAAA,MACtB;AAAA,IAAS;AAEV,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,IAAI,MAAM,eAAe,SAAS,MAAM,CAAC;AAAA,MAC3D,mBAAmB;AAAA,IAAkB;AAEtC,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,IAAI,MAAM,eAAe,SAAS,OAAO,SAAS,EAAE,MAAM,CAAC;AAAA,MAC7E,mBAAmB;AAAA,IAAkB;AAEtC,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,IAAI,MAAM,eAAe,SAAS,MAAM,CAAC;AAAA,MAC3D;AAAA,IAAS;AAAA,EACX,CAAC;AAED,OAAK,0CAA0C,iBAAkB;AAChE,UAAM,WAAW,IAAI;AAAA,MACpB,4BAA4B,CAAC,oBAAoB,2BAA2B,yBAAyB,CAAC;AAAA,IACvG,EAAE,YAAY;AAEd,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,IAAI,MAAM,eAAe,SAAS,MAAM,CAAC;AAAA,MAC3D,mBAAmB;AAAA,IAAkB;AAEtC,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,IAAI,MAAM,eAAe,SAAS,OAAO,SAAS,EAAE,MAAM,CAAC;AAAA,MAC7E,0BAA0B;AAAA,IAAkB;AAAA,EAC9C,CAAC;AAED,OAAK,uFAAuF,iBAAkB;AAC7G,UAAM,WAAW,IAAI;AAAA,MACpB,4BAA4B,CAAC,oBAAoB,2BAA2B,yBAAyB,CAAC;AAAA,IACvG,EAAE,YAAY;AAEd,WAAO;AAAA,MACN,SAAS,EAAE,OAAO,IAAI,MAAM,eAAe,sBAAsB,MAAM,CAAC;AAAA,MACxE,0BAA0B;AAAA,IAAkB;AAAA,EAC9C,CAAC;AACF,CAAC;AAED,SAAS,4BAA4B,OAAqD;AACzF,SAA2B;AAAA,IAC1B,gBAAgB,6BAAyC;AACxD,aAAO;AAAA,IACR,GAFgB;AAAA,EAGjB;AACD;AANS;AAQT,SAAS,2BAA2B,SAAkB,SAAiB,aAAkB;AACxF,SAAO,IAAI;AAAA,IACV,IAAI;AAAA,MACH,CAAC,IAAI,aAAa,OAAO,MAAM,OAAO,OAAO,OAAO,CAAC;AAAA,MACrD,gBAAgB;AAAA,IAAK;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAK;AACP;AAXS;",
  "names": []
}
