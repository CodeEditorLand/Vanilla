{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/common/types.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Position } from '../../../common/core/position.js';\nimport * as languages from '../../../common/languages.js';\nimport { ActionSet } from '../../../../platform/actionWidget/common/actionWidget.js';\n\nexport const CodeActionKind = new class {\n\tpublic readonly QuickFix = new HierarchicalKind('quickfix');\n\n\tpublic readonly Refactor = new HierarchicalKind('refactor');\n\tpublic readonly RefactorExtract = this.Refactor.append('extract');\n\tpublic readonly RefactorInline = this.Refactor.append('inline');\n\tpublic readonly RefactorMove = this.Refactor.append('move');\n\tpublic readonly RefactorRewrite = this.Refactor.append('rewrite');\n\n\tpublic readonly Notebook = new HierarchicalKind('notebook');\n\n\tpublic readonly Source = new HierarchicalKind('source');\n\tpublic readonly SourceOrganizeImports = this.Source.append('organizeImports');\n\tpublic readonly SourceFixAll = this.Source.append('fixAll');\n\tpublic readonly SurroundWith = this.Refactor.append('surround');\n};\n\nexport const enum CodeActionAutoApply {\n\tIfSingle = 'ifSingle',\n\tFirst = 'first',\n\tNever = 'never',\n}\n\nexport enum CodeActionTriggerSource {\n\tRefactor = 'refactor',\n\tRefactorPreview = 'refactor preview',\n\tLightbulb = 'lightbulb',\n\tDefault = 'other (default)',\n\tSourceAction = 'source action',\n\tQuickFix = 'quick fix action',\n\tFixAll = 'fix all',\n\tOrganizeImports = 'organize imports',\n\tAutoFix = 'auto fix',\n\tQuickFixHover = 'quick fix hover window',\n\tOnSave = 'save participants',\n\tProblemsView = 'problems view'\n}\n\nexport interface CodeActionFilter {\n\treadonly include?: HierarchicalKind;\n\treadonly excludes?: readonly HierarchicalKind[];\n\treadonly includeSourceActions?: boolean;\n\treadonly onlyIncludePreferredActions?: boolean;\n}\n\nexport function mayIncludeActionsOfKind(filter: CodeActionFilter, providedKind: HierarchicalKind): boolean {\n\t// A provided kind may be a subset or superset of our filtered kind.\n\tif (filter.include && !filter.include.intersects(providedKind)) {\n\t\treturn false;\n\t}\n\n\tif (filter.excludes) {\n\t\tif (filter.excludes.some(exclude => excludesAction(providedKind, exclude, filter.include))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Don't return source actions unless they are explicitly requested\n\tif (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function filtersAction(filter: CodeActionFilter, action: languages.CodeAction): boolean {\n\tconst actionKind = action.kind ? new HierarchicalKind(action.kind) : undefined;\n\n\t// Filter out actions by kind\n\tif (filter.include) {\n\t\tif (!actionKind || !filter.include.contains(actionKind)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (filter.excludes) {\n\t\tif (actionKind && filter.excludes.some(exclude => excludesAction(actionKind, exclude, filter.include))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Don't return source actions unless they are explicitly requested\n\tif (!filter.includeSourceActions) {\n\t\tif (actionKind && CodeActionKind.Source.contains(actionKind)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (filter.onlyIncludePreferredActions) {\n\t\tif (!action.isPreferred) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction excludesAction(providedKind: HierarchicalKind, exclude: HierarchicalKind, include: HierarchicalKind | undefined): boolean {\n\tif (!exclude.contains(providedKind)) {\n\t\treturn false;\n\t}\n\tif (include && exclude.contains(include)) {\n\t\t// The include is more specific, don't filter out\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport interface CodeActionTrigger {\n\treadonly type: languages.CodeActionTriggerType;\n\treadonly triggerAction: CodeActionTriggerSource;\n\treadonly filter?: CodeActionFilter;\n\treadonly autoApply?: CodeActionAutoApply;\n\treadonly context?: {\n\t\treadonly notAvailableMessage: string;\n\t\treadonly position: Position;\n\t};\n}\n\nexport class CodeActionCommandArgs {\n\tpublic static fromUser(arg: any, defaults: { kind: HierarchicalKind; apply: CodeActionAutoApply }): CodeActionCommandArgs {\n\t\tif (!arg || typeof arg !== 'object') {\n\t\t\treturn new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n\t\t}\n\t\treturn new CodeActionCommandArgs(\n\t\t\tCodeActionCommandArgs.getKindFromUser(arg, defaults.kind),\n\t\t\tCodeActionCommandArgs.getApplyFromUser(arg, defaults.apply),\n\t\t\tCodeActionCommandArgs.getPreferredUser(arg));\n\t}\n\n\tprivate static getApplyFromUser(arg: any, defaultAutoApply: CodeActionAutoApply) {\n\t\tswitch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n\t\t\tcase 'first': return CodeActionAutoApply.First;\n\t\t\tcase 'never': return CodeActionAutoApply.Never;\n\t\t\tcase 'ifsingle': return CodeActionAutoApply.IfSingle;\n\t\t\tdefault: return defaultAutoApply;\n\t\t}\n\t}\n\n\tprivate static getKindFromUser(arg: any, defaultKind: HierarchicalKind) {\n\t\treturn typeof arg.kind === 'string'\n\t\t\t? new HierarchicalKind(arg.kind)\n\t\t\t: defaultKind;\n\t}\n\n\tprivate static getPreferredUser(arg: any): boolean {\n\t\treturn typeof arg.preferred === 'boolean'\n\t\t\t? arg.preferred\n\t\t\t: false;\n\t}\n\n\tprivate constructor(\n\t\tpublic readonly kind: HierarchicalKind,\n\t\tpublic readonly apply: CodeActionAutoApply,\n\t\tpublic readonly preferred: boolean,\n\t) { }\n}\n\nexport class CodeActionItem {\n\n\tconstructor(\n\t\tpublic readonly action: languages.CodeAction,\n\t\tpublic readonly provider: languages.CodeActionProvider | undefined,\n\t\tpublic highlightRange?: boolean,\n\t) { }\n\n\tasync resolve(token: CancellationToken): Promise<this> {\n\t\tif (this.provider?.resolveCodeAction && !this.action.edit) {\n\t\t\tlet action: languages.CodeAction | undefined | null;\n\t\t\ttry {\n\t\t\t\taction = await this.provider.resolveCodeAction(this.action, token);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t}\n\t\t\tif (action) {\n\t\t\t\tthis.action.edit = action.edit;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport interface CodeActionSet extends ActionSet<CodeActionItem> {\n\treadonly validActions: readonly CodeActionItem[];\n\treadonly allActions: readonly CodeActionItem[];\n\n\treadonly documentation: readonly languages.Command[];\n}\n"],
  "mappings": "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",
  "names": ["CodeActionAutoApply", "CodeActionTriggerSource"]
}
