{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/browser/codeAction.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, equals, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry.js';\nimport * as languages from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IProgress, Progress } from '../../../../platform/progress/common/progress.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CodeActionFilter, CodeActionItem, CodeActionKind, CodeActionSet, CodeActionTrigger, CodeActionTriggerSource, filtersAction, mayIncludeActionsOfKind } from '../common/types.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\n\n\n\nexport const codeActionCommandId = 'editor.action.codeAction';\nexport const quickFixCommandId = 'editor.action.quickFix';\nexport const autoFixCommandId = 'editor.action.autoFix';\nexport const refactorCommandId = 'editor.action.refactor';\nexport const refactorPreviewCommandId = 'editor.action.refactor.preview';\nexport const sourceActionCommandId = 'editor.action.sourceAction';\nexport const organizeImportsCommandId = 'editor.action.organizeImports';\nexport const fixAllCommandId = 'editor.action.fixAll';\n\nclass ManagedCodeActionSet extends Disposable implements CodeActionSet {\n\n\tprivate static codeActionsPreferredComparator(a: languages.CodeAction, b: languages.CodeAction): number {\n\t\tif (a.isPreferred && !b.isPreferred) {\n\t\t\treturn -1;\n\t\t} else if (!a.isPreferred && b.isPreferred) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate static codeActionsComparator({ action: a }: CodeActionItem, { action: b }: CodeActionItem): number {\n\t\tif (a.isAI && !b.isAI) {\n\t\t\treturn 1;\n\t\t} else if (!a.isAI && b.isAI) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (isNonEmptyArray(a.diagnostics)) {\n\t\t\treturn isNonEmptyArray(b.diagnostics) ? ManagedCodeActionSet.codeActionsPreferredComparator(a, b) : -1;\n\t\t} else if (isNonEmptyArray(b.diagnostics)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn ManagedCodeActionSet.codeActionsPreferredComparator(a, b); // both have no diagnostics\n\t\t}\n\t}\n\n\tpublic readonly validActions: readonly CodeActionItem[];\n\tpublic readonly allActions: readonly CodeActionItem[];\n\n\tpublic constructor(\n\t\tactions: readonly CodeActionItem[],\n\t\tpublic readonly documentation: readonly languages.Command[],\n\t\tdisposables: DisposableStore,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(disposables);\n\n\t\tthis.allActions = [...actions].sort(ManagedCodeActionSet.codeActionsComparator);\n\t\tthis.validActions = this.allActions.filter(({ action }) => !action.disabled);\n\t}\n\n\tpublic get hasAutoFix() {\n\t\treturn this.validActions.some(({ action: fix }) => !!fix.kind && CodeActionKind.QuickFix.contains(new HierarchicalKind(fix.kind)) && !!fix.isPreferred);\n\t}\n\n\tpublic get hasAIFix() {\n\t\treturn this.validActions.some(({ action: fix }) => !!fix.isAI);\n\t}\n\n\tpublic get allAIFixes() {\n\t\treturn this.validActions.every(({ action: fix }) => !!fix.isAI);\n\t}\n}\n\nconst emptyCodeActionsResponse = { actions: [] as CodeActionItem[], documentation: undefined };\n\nexport async function getCodeActions(\n\tregistry: LanguageFeatureRegistry<languages.CodeActionProvider>,\n\tmodel: ITextModel,\n\trangeOrSelection: Range | Selection,\n\ttrigger: CodeActionTrigger,\n\tprogress: IProgress<languages.CodeActionProvider>,\n\ttoken: CancellationToken,\n): Promise<CodeActionSet> {\n\tconst filter = trigger.filter || {};\n\tconst notebookFilter: CodeActionFilter = {\n\t\t...filter,\n\t\texcludes: [...(filter.excludes || []), CodeActionKind.Notebook],\n\t};\n\n\tconst codeActionContext: languages.CodeActionContext = {\n\t\tonly: filter.include?.value,\n\t\ttrigger: trigger.type,\n\t};\n\n\tconst cts = new TextModelCancellationTokenSource(model, token);\n\t// if the trigger is auto (autosave, lightbulb, etc), we should exclude notebook codeActions\n\tconst excludeNotebookCodeActions = (trigger.type === languages.CodeActionTriggerType.Auto);\n\tconst providers = getCodeActionProviders(registry, model, (excludeNotebookCodeActions) ? notebookFilter : filter);\n\n\tconst disposables = new DisposableStore();\n\tconst promises = providers.map(async provider => {\n\t\ttry {\n\t\t\tprogress.report(provider);\n\t\t\tconst providedCodeActions = await provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token);\n\t\t\tif (providedCodeActions) {\n\t\t\t\tdisposables.add(providedCodeActions);\n\t\t\t}\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn emptyCodeActionsResponse;\n\t\t\t}\n\n\t\t\tconst filteredActions = (providedCodeActions?.actions || []).filter(action => action && filtersAction(filter, action));\n\t\t\tconst documentation = getDocumentationFromProvider(provider, filteredActions, filter.include);\n\t\t\treturn {\n\t\t\t\tactions: filteredActions.map(action => new CodeActionItem(action, provider)),\n\t\t\t\tdocumentation\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tif (isCancellationError(err)) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tonUnexpectedExternalError(err);\n\t\t\treturn emptyCodeActionsResponse;\n\t\t}\n\t});\n\n\tconst listener = registry.onDidChange(() => {\n\t\tconst newProviders = registry.all(model);\n\t\tif (!equals(newProviders, providers)) {\n\t\t\tcts.cancel();\n\t\t}\n\t});\n\n\ttry {\n\t\tconst actions = await Promise.all(promises);\n\t\tconst allActions = actions.map(x => x.actions).flat();\n\t\tconst allDocumentation = [\n\t\t\t...coalesce(actions.map(x => x.documentation)),\n\t\t\t...getAdditionalDocumentationForShowingActions(registry, model, trigger, allActions)\n\t\t];\n\t\treturn new ManagedCodeActionSet(allActions, allDocumentation, disposables);\n\t} finally {\n\t\tlistener.dispose();\n\t\tcts.dispose();\n\t}\n}\n\nfunction getCodeActionProviders(\n\tregistry: LanguageFeatureRegistry<languages.CodeActionProvider>,\n\tmodel: ITextModel,\n\tfilter: CodeActionFilter\n) {\n\treturn registry.all(model)\n\t\t// Don't include providers that we know will not return code actions of interest\n\t\t.filter(provider => {\n\t\t\tif (!provider.providedCodeActionKinds) {\n\t\t\t\t// We don't know what type of actions this provider will return.\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn provider.providedCodeActionKinds.some(kind => mayIncludeActionsOfKind(filter, new HierarchicalKind(kind)));\n\t\t});\n}\n\nfunction* getAdditionalDocumentationForShowingActions(\n\tregistry: LanguageFeatureRegistry<languages.CodeActionProvider>,\n\tmodel: ITextModel,\n\ttrigger: CodeActionTrigger,\n\tactionsToShow: readonly CodeActionItem[],\n): Iterable<languages.Command> {\n\tif (model && actionsToShow.length) {\n\t\tfor (const provider of registry.all(model)) {\n\t\t\tif (provider._getAdditionalMenuItems) {\n\t\t\t\tyield* provider._getAdditionalMenuItems?.({ trigger: trigger.type, only: trigger.filter?.include?.value }, actionsToShow.map(item => item.action));\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getDocumentationFromProvider(\n\tprovider: languages.CodeActionProvider,\n\tprovidedCodeActions: readonly languages.CodeAction[],\n\tonly?: HierarchicalKind\n): languages.Command | undefined {\n\tif (!provider.documentation) {\n\t\treturn undefined;\n\t}\n\n\tconst documentation = provider.documentation.map(entry => ({ kind: new HierarchicalKind(entry.kind), command: entry.command }));\n\n\tif (only) {\n\t\tlet currentBest: { readonly kind: HierarchicalKind; readonly command: languages.Command } | undefined;\n\t\tfor (const entry of documentation) {\n\t\t\tif (entry.kind.contains(only)) {\n\t\t\t\tif (!currentBest) {\n\t\t\t\t\tcurrentBest = entry;\n\t\t\t\t} else {\n\t\t\t\t\t// Take best match\n\t\t\t\t\tif (currentBest.kind.contains(entry.kind)) {\n\t\t\t\t\t\tcurrentBest = entry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (currentBest) {\n\t\t\treturn currentBest?.command;\n\t\t}\n\t}\n\n\t// Otherwise, check to see if any of the provided actions match.\n\tfor (const action of providedCodeActions) {\n\t\tif (!action.kind) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const entry of documentation) {\n\t\t\tif (entry.kind.contains(new HierarchicalKind(action.kind))) {\n\t\t\t\treturn entry.command;\n\t\t\t}\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport enum ApplyCodeActionReason {\n\tOnSave = 'onSave',\n\tFromProblemsView = 'fromProblemsView',\n\tFromCodeActions = 'fromCodeActions',\n\tFromAILightbulb = 'fromAILightbulb' // direct invocation when clicking on the AI lightbulb\n}\n\nexport async function applyCodeAction(\n\taccessor: ServicesAccessor,\n\titem: CodeActionItem,\n\tcodeActionReason: ApplyCodeActionReason,\n\toptions?: { readonly preview?: boolean; readonly editor?: ICodeEditor },\n\ttoken: CancellationToken = CancellationToken.None,\n): Promise<void> {\n\tconst bulkEditService = accessor.get(IBulkEditService);\n\tconst commandService = accessor.get(ICommandService);\n\tconst telemetryService = accessor.get(ITelemetryService);\n\tconst notificationService = accessor.get(INotificationService);\n\n\ttype ApplyCodeActionEvent = {\n\t\tcodeActionTitle: string;\n\t\tcodeActionKind: string | undefined;\n\t\tcodeActionIsPreferred: boolean;\n\t\treason: ApplyCodeActionReason;\n\t};\n\ttype ApplyCodeEventClassification = {\n\t\tcodeActionTitle: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The display label of the applied code action' };\n\t\tcodeActionKind: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The kind (refactor, quickfix) of the applied code action' };\n\t\tcodeActionIsPreferred: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Was the code action marked as being a preferred action?' };\n\t\treason: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The kind of action used to trigger apply code action.' };\n\t\towner: 'justschen';\n\t\tcomment: 'Event used to gain insights into which code actions are being triggered';\n\t};\n\n\ttelemetryService.publicLog2<ApplyCodeActionEvent, ApplyCodeEventClassification>('codeAction.applyCodeAction', {\n\t\tcodeActionTitle: item.action.title,\n\t\tcodeActionKind: item.action.kind,\n\t\tcodeActionIsPreferred: !!item.action.isPreferred,\n\t\treason: codeActionReason,\n\t});\n\n\tawait item.resolve(token);\n\tif (token.isCancellationRequested) {\n\t\treturn;\n\t}\n\n\tif (item.action.edit?.edits.length) {\n\t\tconst result = await bulkEditService.apply(item.action.edit, {\n\t\t\teditor: options?.editor,\n\t\t\tlabel: item.action.title,\n\t\t\tquotableLabel: item.action.title,\n\t\t\tcode: 'undoredo.codeAction',\n\t\t\trespectAutoSaveConfig: codeActionReason !== ApplyCodeActionReason.OnSave,\n\t\t\tshowPreview: options?.preview,\n\t\t});\n\n\t\tif (!result.isApplied) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (item.action.command) {\n\t\ttry {\n\t\t\tawait commandService.executeCommand(item.action.command.id, ...(item.action.command.arguments || []));\n\t\t} catch (err) {\n\t\t\tconst message = asMessage(err);\n\t\t\tnotificationService.error(\n\t\t\t\ttypeof message === 'string'\n\t\t\t\t\t? message\n\t\t\t\t\t: nls.localize('applyCodeActionFailed', \"An unknown error occurred while applying the code action\"));\n\t\t}\n\t}\n}\n\nfunction asMessage(err: any): string | undefined {\n\tif (typeof err === 'string') {\n\t\treturn err;\n\t} else if (err instanceof Error && typeof err.message === 'string') {\n\t\treturn err.message;\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nCommandsRegistry.registerCommand('_executeCodeActionProvider', async function (accessor, resource: URI, rangeOrSelection: Range | Selection, kind?: string, itemResolveCount?: number): Promise<ReadonlyArray<languages.CodeAction>> {\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst { codeActionProvider } = accessor.get(ILanguageFeaturesService);\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst validatedRangeOrSelection = Selection.isISelection(rangeOrSelection)\n\t\t? Selection.liftSelection(rangeOrSelection)\n\t\t: Range.isIRange(rangeOrSelection)\n\t\t\t? model.validateRange(rangeOrSelection)\n\t\t\t: undefined;\n\n\tif (!validatedRangeOrSelection) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst include = typeof kind === 'string' ? new HierarchicalKind(kind) : undefined;\n\tconst codeActionSet = await getCodeActions(\n\t\tcodeActionProvider,\n\t\tmodel,\n\t\tvalidatedRangeOrSelection,\n\t\t{ type: languages.CodeActionTriggerType.Invoke, triggerAction: CodeActionTriggerSource.Default, filter: { includeSourceActions: true, include } },\n\t\tProgress.None,\n\t\tCancellationToken.None);\n\n\tconst resolving: Promise<any>[] = [];\n\tconst resolveCount = Math.min(codeActionSet.validActions.length, typeof itemResolveCount === 'number' ? itemResolveCount : 0);\n\tfor (let i = 0; i < resolveCount; i++) {\n\t\tresolving.push(codeActionSet.validActions[i].resolve(CancellationToken.None));\n\t}\n\n\ttry {\n\t\tawait Promise.all(resolving);\n\t\treturn codeActionSet.validActions.map(item => item.action);\n\t} finally {\n\t\tsetTimeout(() => codeActionSet.dispose(), 100);\n\t}\n});\n"],
  "mappings": "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",
  "names": ["ApplyCodeActionReason"]
}
