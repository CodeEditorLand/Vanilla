var y=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=(t,i,e,d)=>{for(var n=d>1?void 0:d?u(i,e):i,o=t.length-1,c;o>=0;o--)(c=t[o])&&(n=(d?c(i,e,n):c(n))||n);return d&&n&&y(i,e,n),n},m=(t,i)=>(e,d)=>i(e,d,t);import{HierarchicalKind as a}from"../../../../base/common/hierarchicalKind.js";import"../../../../base/common/keybindings.js";import{Lazy as b}from"../../../../base/common/lazy.js";import{IKeybindingService as v}from"../../../../platform/keybinding/common/keybinding.js";import"../../../common/languages.js";import{CodeActionAutoApply as A,CodeActionCommandArgs as p,CodeActionKind as s}from"../common/types.js";import{codeActionCommandId as C,fixAllCommandId as f,organizeImportsCommandId as g,refactorCommandId as K,sourceActionCommandId as k}from"./codeAction.js";let r=class{constructor(i){this.keybindingService=i}static codeActionCommands=[K,C,k,g,f];getResolver(){const i=new b(()=>this.keybindingService.getKeybindings().filter(e=>r.codeActionCommands.indexOf(e.command)>=0).filter(e=>e.resolvedKeybinding).map(e=>{let d=e.commandArgs;return e.command===g?d={kind:s.SourceOrganizeImports.value}:e.command===f&&(d={kind:s.SourceFixAll.value}),{resolvedKeybinding:e.resolvedKeybinding,...p.fromUser(d,{kind:a.None,apply:A.Never})}}));return e=>{if(e.kind)return this.bestKeybindingForCodeAction(e,i.value)?.resolvedKeybinding}}bestKeybindingForCodeAction(i,e){if(!i.kind)return;const d=new a(i.kind);return e.filter(n=>n.kind.contains(d)).filter(n=>n.preferred?i.isPreferred:!0).reduceRight((n,o)=>n?n.kind.contains(o.kind)?o:n:o,void 0)}};r=l([m(0,v)],r);export{r as CodeActionKeybindingResolver};
