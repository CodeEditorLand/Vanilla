var y=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var c=(t,i,e,o)=>{for(var n=o>1?void 0:o?u(i,e):i,d=t.length-1,m;d>=0;d--)(m=t[d])&&(n=(o?m(i,e,n):m(n))||n);return o&&n&&y(i,e,n),n},a=(t,i)=>(e,o)=>i(e,o,t);import{HierarchicalKind as l}from"../../../../base/common/hierarchicalKind.js";import{Lazy as b}from"../../../../base/common/lazy.js";import{IKeybindingService as p}from"../../../../platform/keybinding/common/keybinding.js";import{CodeActionAutoApply as v,CodeActionCommandArgs as A,CodeActionKind as s}from"../common/types.js";import{codeActionCommandId as C,fixAllCommandId as g,organizeImportsCommandId as f,refactorCommandId as K,sourceActionCommandId as k}from"./codeAction.js";let r=class{constructor(i){this.keybindingService=i}static codeActionCommands=[K,C,k,f,g];getResolver(){const i=new b(()=>this.keybindingService.getKeybindings().filter(e=>r.codeActionCommands.indexOf(e.command)>=0).filter(e=>e.resolvedKeybinding).map(e=>{let o=e.commandArgs;return e.command===f?o={kind:s.SourceOrganizeImports.value}:e.command===g&&(o={kind:s.SourceFixAll.value}),{resolvedKeybinding:e.resolvedKeybinding,...A.fromUser(o,{kind:l.None,apply:v.Never})}}));return e=>{if(e.kind)return this.bestKeybindingForCodeAction(e,i.value)?.resolvedKeybinding}}bestKeybindingForCodeAction(i,e){if(!i.kind)return;const o=new l(i.kind);return e.filter(n=>n.kind.contains(o)).filter(n=>n.preferred?i.isPreferred:!0).reduceRight((n,d)=>n?n.kind.contains(d.kind)?d:n:d,void 0)}};r=c([a(0,p)],r);export{r as CodeActionKeybindingResolver};
