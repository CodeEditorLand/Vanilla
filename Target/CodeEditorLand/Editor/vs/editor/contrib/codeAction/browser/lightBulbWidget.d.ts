import { Disposable } from "vs/base/common/lifecycle";
import "vs/css!./lightBulbWidget";
import { ICodeEditor, IContentWidget, IContentWidgetPosition } from "vs/editor/browser/editorBrowser";
import { IPosition } from "vs/editor/common/core/position";
import { CodeActionSet, CodeActionTrigger } from "vs/editor/contrib/codeAction/common/types";
import { IKeybindingService } from "vs/platform/keybinding/common/keybinding";
export declare class LightBulbWidget extends Disposable implements IContentWidget {
    private readonly _editor;
    private readonly _keybindingService;
    private _gutterDecorationID;
    private static readonly GUTTER_DECORATION;
    static readonly ID = "editor.contrib.lightbulbWidget";
    private static readonly _posPref;
    private readonly _domNode;
    private readonly _onClick;
    readonly onClick: any;
    private _state;
    private _gutterState;
    private _iconClasses;
    private _preferredKbLabel?;
    private _quickFixKbLabel?;
    private gutterDecoration;
    constructor(_editor: ICodeEditor, _keybindingService: IKeybindingService);
    dispose(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IContentWidgetPosition | null;
    update(actions: CodeActionSet, trigger: CodeActionTrigger, atPosition: IPosition): void;
    hide(): void;
    gutterHide(): void;
    private get state();
    private set state(value);
    private get gutterState();
    private set gutterState(value);
    private _updateLightBulbTitleAndIcon;
    private _updateGutterLightBulbTitleAndIcon;
    private renderGutterLightbub;
    private _addGutterDecoration;
    private _removeGutterDecoration;
    private _updateGutterDecoration;
    private _updateLightbulbTitle;
    private set title(value);
}
