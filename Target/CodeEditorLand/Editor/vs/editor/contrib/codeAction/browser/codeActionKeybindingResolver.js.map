{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/browser/codeActionKeybindingResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { ResolvedKeybinding } from '../../../../base/common/keybindings.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\nimport { CodeAction } from '../../../common/languages.js';\nimport { codeActionCommandId, fixAllCommandId, organizeImportsCommandId, refactorCommandId, sourceActionCommandId } from './codeAction.js';\nimport { CodeActionAutoApply, CodeActionCommandArgs, CodeActionKind } from '../common/types.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\n\ninterface ResolveCodeActionKeybinding {\n\treadonly kind: HierarchicalKind;\n\treadonly preferred: boolean;\n\treadonly resolvedKeybinding: ResolvedKeybinding;\n}\n\nexport class CodeActionKeybindingResolver {\n\tprivate static readonly codeActionCommands: readonly string[] = [\n\t\trefactorCommandId,\n\t\tcodeActionCommandId,\n\t\tsourceActionCommandId,\n\t\torganizeImportsCommandId,\n\t\tfixAllCommandId\n\t];\n\n\tconstructor(\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) { }\n\n\tpublic getResolver(): (action: CodeAction) => ResolvedKeybinding | undefined {\n\t\t// Lazy since we may not actually ever read the value\n\t\tconst allCodeActionBindings = new Lazy<readonly ResolveCodeActionKeybinding[]>(() => this.keybindingService.getKeybindings()\n\t\t\t.filter(item => CodeActionKeybindingResolver.codeActionCommands.indexOf(item.command!) >= 0)\n\t\t\t.filter(item => item.resolvedKeybinding)\n\t\t\t.map((item): ResolveCodeActionKeybinding => {\n\t\t\t\t// Special case these commands since they come built-in with VS Code and don't use 'commandArgs'\n\t\t\t\tlet commandArgs = item.commandArgs;\n\t\t\t\tif (item.command === organizeImportsCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceOrganizeImports.value };\n\t\t\t\t} else if (item.command === fixAllCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceFixAll.value };\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tresolvedKeybinding: item.resolvedKeybinding!,\n\t\t\t\t\t...CodeActionCommandArgs.fromUser(commandArgs, {\n\t\t\t\t\t\tkind: HierarchicalKind.None,\n\t\t\t\t\t\tapply: CodeActionAutoApply.Never\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}));\n\n\t\treturn (action) => {\n\t\t\tif (action.kind) {\n\t\t\t\tconst binding = this.bestKeybindingForCodeAction(action, allCodeActionBindings.value);\n\t\t\t\treturn binding?.resolvedKeybinding;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\tprivate bestKeybindingForCodeAction(\n\t\taction: CodeAction,\n\t\tcandidates: readonly ResolveCodeActionKeybinding[]\n\t): ResolveCodeActionKeybinding | undefined {\n\t\tif (!action.kind) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = new HierarchicalKind(action.kind);\n\n\t\treturn candidates\n\t\t\t.filter(candidate => candidate.kind.contains(kind))\n\t\t\t.filter(candidate => {\n\t\t\t\tif (candidate.preferred) {\n\t\t\t\t\t// If the candidate keybinding only applies to preferred actions, the this action must also be preferred\n\t\t\t\t\treturn action.isPreferred;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.reduceRight((currentBest, candidate) => {\n\t\t\t\tif (!currentBest) {\n\t\t\t\t\treturn candidate;\n\t\t\t\t}\n\t\t\t\t// Select the more specific binding\n\t\t\t\treturn currentBest.kind.contains(candidate.kind) ? candidate : currentBest;\n\t\t\t}, undefined as ResolveCodeActionKeybinding | undefined);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,qBAAqB,iBAAiB,0BAA0B,mBAAmB,6BAA6B;AACzH,SAAS,qBAAqB,uBAAuB,sBAAsB;AAC3E,SAAS,0BAA0B;AAQ5B,IAAM,+BAAN,MAAmC;AAAA,EASzC,YACsC,mBACpC;AADoC;AAAA,EAClC;AAAA,EA9BL,OAmB0C;AAAA;AAAA;AAAA,EACzC,OAAwB,qBAAwC;AAAA,IAC/D;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EAMO,cAAsE;AAE5E,UAAM,wBAAwB,IAAI,KAA6C,MAAM,KAAK,kBAAkB,eAAe,EACzH,OAAO,UAAQ,6BAA6B,mBAAmB,QAAQ,KAAK,OAAQ,KAAK,CAAC,EAC1F,OAAO,UAAQ,KAAK,kBAAkB,EACtC,IAAI,CAAC,SAAsC;AAE3C,UAAI,cAAc,KAAK;AACvB,UAAI,KAAK,YAAY,0BAA0B;AAC9C,sBAAc,EAAE,MAAM,eAAe,sBAAsB,MAAM;AAAA,MAClE,WAAW,KAAK,YAAY,iBAAiB;AAC5C,sBAAc,EAAE,MAAM,eAAe,aAAa,MAAM;AAAA,MACzD;AAEA,aAAO;AAAA,QACN,oBAAoB,KAAK;AAAA,QACzB,GAAG,sBAAsB,SAAS,aAAa;AAAA,UAC9C,MAAM,iBAAiB;AAAA,UACvB,OAAO,oBAAoB;AAAA,QAC5B,CAAC;AAAA,MACF;AAAA,IACD,CAAC,CAAC;AAEH,WAAO,CAAC,WAAW;AAClB,UAAI,OAAO,MAAM;AAChB,cAAM,UAAU,KAAK,4BAA4B,QAAQ,sBAAsB,KAAK;AACpF,eAAO,SAAS;AAAA,MACjB;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEQ,4BACP,QACA,YAC0C;AAC1C,QAAI,CAAC,OAAO,MAAM;AACjB,aAAO;AAAA,IACR;AACA,UAAM,OAAO,IAAI,iBAAiB,OAAO,IAAI;AAE7C,WAAO,WACL,OAAO,eAAa,UAAU,KAAK,SAAS,IAAI,CAAC,EACjD,OAAO,eAAa;AACpB,UAAI,UAAU,WAAW;AAExB,eAAO,OAAO;AAAA,MACf;AACA,aAAO;AAAA,IACR,CAAC,EACA,YAAY,CAAC,aAAa,cAAc;AACxC,UAAI,CAAC,aAAa;AACjB,eAAO;AAAA,MACR;AAEA,aAAO,YAAY,KAAK,SAAS,UAAU,IAAI,IAAI,YAAY;AAAA,IAChE,GAAG,MAAoD;AAAA,EACzD;AACD;AAvEa,+BAAN;AAAA,EAUJ;AAAA,GAVU;",
  "names": []
}
