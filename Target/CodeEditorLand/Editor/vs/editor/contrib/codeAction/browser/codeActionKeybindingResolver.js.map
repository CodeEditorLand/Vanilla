{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/browser/codeActionKeybindingResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { HierarchicalKind } from \"../../../../base/common/hierarchicalKind.js\";\nimport type { ResolvedKeybinding } from \"../../../../base/common/keybindings.js\";\nimport { Lazy } from \"../../../../base/common/lazy.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport type { CodeAction } from \"../../../common/languages.js\";\nimport {\n\tCodeActionAutoApply,\n\tCodeActionCommandArgs,\n\tCodeActionKind,\n} from \"../common/types.js\";\nimport {\n\tcodeActionCommandId,\n\tfixAllCommandId,\n\torganizeImportsCommandId,\n\trefactorCommandId,\n\tsourceActionCommandId,\n} from \"./codeAction.js\";\n\ninterface ResolveCodeActionKeybinding {\n\treadonly kind: HierarchicalKind;\n\treadonly preferred: boolean;\n\treadonly resolvedKeybinding: ResolvedKeybinding;\n}\n\nexport class CodeActionKeybindingResolver {\n\tprivate static readonly codeActionCommands: readonly string[] = [\n\t\trefactorCommandId,\n\t\tcodeActionCommandId,\n\t\tsourceActionCommandId,\n\t\torganizeImportsCommandId,\n\t\tfixAllCommandId,\n\t];\n\n\tconstructor(\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) { }\n\n\tpublic getResolver(): (\n\t\taction: CodeAction,\n\t) => ResolvedKeybinding | undefined {\n\t\t// Lazy since we may not actually ever read the value\n\t\tconst allCodeActionBindings = new Lazy<\n\t\t\treadonly ResolveCodeActionKeybinding[]\n\t\t>(() =>\n\t\t\tthis.keybindingService\n\t\t\t\t.getKeybindings()\n\t\t\t\t.filter(\n\t\t\t\t\t(item) =>\n\t\t\t\t\t\tCodeActionKeybindingResolver.codeActionCommands.indexOf(\n\t\t\t\t\t\t\titem.command!,\n\t\t\t\t\t\t) >= 0,\n\t\t\t\t)\n\t\t\t\t.filter((item) => item.resolvedKeybinding)\n\t\t\t\t.map((item): ResolveCodeActionKeybinding => {\n\t\t\t\t\t// Special case these commands since they come built-in with VS Code and don't use 'commandArgs'\n\t\t\t\t\tlet commandArgs = item.commandArgs;\n\t\t\t\t\tif (item.command === organizeImportsCommandId) {\n\t\t\t\t\t\tcommandArgs = {\n\t\t\t\t\t\t\tkind: CodeActionKind.SourceOrganizeImports.value,\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (item.command === fixAllCommandId) {\n\t\t\t\t\t\tcommandArgs = {\n\t\t\t\t\t\t\tkind: CodeActionKind.SourceFixAll.value,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresolvedKeybinding: item.resolvedKeybinding!,\n\t\t\t\t\t\t...CodeActionCommandArgs.fromUser(commandArgs, {\n\t\t\t\t\t\t\tkind: HierarchicalKind.None,\n\t\t\t\t\t\t\tapply: CodeActionAutoApply.Never,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t);\n\n\t\treturn (action) => {\n\t\t\tif (action.kind) {\n\t\t\t\tconst binding = this.bestKeybindingForCodeAction(\n\t\t\t\t\taction,\n\t\t\t\t\tallCodeActionBindings.value,\n\t\t\t\t);\n\t\t\t\treturn binding?.resolvedKeybinding;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\tprivate bestKeybindingForCodeAction(\n\t\taction: CodeAction,\n\t\tcandidates: readonly ResolveCodeActionKeybinding[],\n\t): ResolveCodeActionKeybinding | undefined {\n\t\tif (!action.kind) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = new HierarchicalKind(action.kind);\n\n\t\treturn candidates\n\t\t\t.filter((candidate) => candidate.kind.contains(kind))\n\t\t\t.filter((candidate) => {\n\t\t\t\tif (candidate.preferred) {\n\t\t\t\t\t// If the candidate keybinding only applies to preferred actions, the this action must also be preferred\n\t\t\t\t\treturn action.isPreferred;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.reduceRight(\n\t\t\t\t(currentBest, candidate) => {\n\t\t\t\t\tif (!currentBest) {\n\t\t\t\t\t\treturn candidate;\n\t\t\t\t\t}\n\t\t\t\t\t// Select the more specific binding\n\t\t\t\t\treturn currentBest.kind.contains(candidate.kind)\n\t\t\t\t\t\t? candidate\n\t\t\t\t\t\t: currentBest;\n\t\t\t\t},\n\t\t\t\tundefined as ResolveCodeActionKeybinding | undefined,\n\t\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AAEjC,SAAS,YAAY;AACrB,SAAS,0BAA0B;AAEnC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAQA,IAAM,+BAAN,MAAmC;AAAA,EASzC,YACsC,mBACpC;AADoC;AAAA,EAClC;AAAA,EAxCL,OA6B0C;AAAA;AAAA;AAAA,EACzC,OAAwB,qBAAwC;AAAA,IAC/D;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EAMO,cAE6B;AAEnC,UAAM,wBAAwB,IAAI;AAAA,MAEhC,MACD,KAAK,kBACH,eAAe,EACf;AAAA,QACA,CAAC,SACA,6BAA6B,mBAAmB;AAAA,UAC/C,KAAK;AAAA,QACN,KAAK;AAAA,MACP,EACC,OAAO,CAAC,SAAS,KAAK,kBAAkB,EACxC,IAAI,CAAC,SAAsC;AAE3C,YAAI,cAAc,KAAK;AACvB,YAAI,KAAK,YAAY,0BAA0B;AAC9C,wBAAc;AAAA,YACb,MAAM,eAAe,sBAAsB;AAAA,UAC5C;AAAA,QACD,WAAW,KAAK,YAAY,iBAAiB;AAC5C,wBAAc;AAAA,YACb,MAAM,eAAe,aAAa;AAAA,UACnC;AAAA,QACD;AAEA,eAAO;AAAA,UACN,oBAAoB,KAAK;AAAA,UACzB,GAAG,sBAAsB,SAAS,aAAa;AAAA,YAC9C,MAAM,iBAAiB;AAAA,YACvB,OAAO,oBAAoB;AAAA,UAC5B,CAAC;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACH;AAEA,WAAO,CAAC,WAAW;AAClB,UAAI,OAAO,MAAM;AAChB,cAAM,UAAU,KAAK;AAAA,UACpB;AAAA,UACA,sBAAsB;AAAA,QACvB;AACA,eAAO,SAAS;AAAA,MACjB;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEQ,4BACP,QACA,YAC0C;AAC1C,QAAI,CAAC,OAAO,MAAM;AACjB,aAAO;AAAA,IACR;AACA,UAAM,OAAO,IAAI,iBAAiB,OAAO,IAAI;AAE7C,WAAO,WACL,OAAO,CAAC,cAAc,UAAU,KAAK,SAAS,IAAI,CAAC,EACnD,OAAO,CAAC,cAAc;AACtB,UAAI,UAAU,WAAW;AAExB,eAAO,OAAO;AAAA,MACf;AACA,aAAO;AAAA,IACR,CAAC,EACA;AAAA,MACA,CAAC,aAAa,cAAc;AAC3B,YAAI,CAAC,aAAa;AACjB,iBAAO;AAAA,QACR;AAEA,eAAO,YAAY,KAAK,SAAS,UAAU,IAAI,IAC5C,YACA;AAAA,MACJ;AAAA,MACA;AAAA,IACD;AAAA,EACF;AACD;AA/Fa,+BAAN;AAAA,EAUJ;AAAA,GAVU;",
  "names": []
}
