{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/browser/codeActionModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption, ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry.js';\nimport { CodeActionProvider, CodeActionTriggerType } from '../../../common/languages.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IMarkerService } from '../../../../platform/markers/common/markers.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nimport { CodeActionKind, CodeActionSet, CodeActionTrigger, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey<string>('supportedCodeAction', '');\n\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\n\ntype TriggeredCodeAction = {\n\treadonly selection: Selection;\n\treadonly trigger: CodeActionTrigger;\n};\n\nclass CodeActionOracle extends Disposable {\n\n\tprivate readonly _autoTriggerTimer = this._register(new TimeoutTimer());\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tprivate readonly _signalChange: (triggered: TriggeredCodeAction | undefined) => void,\n\t\tprivate readonly _delay: number = 250,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n\t\tthis._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger): void {\n\t\tconst selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n\t\tthis._signalChange(selection ? { trigger, selection } : undefined);\n\t}\n\n\tprivate _onMarkerChanges(resources: readonly URI[]): void {\n\t\tconst model = this._editor.getModel();\n\t\tif (model && resources.some(resource => isEqual(resource, model.uri))) {\n\t\t\tthis._tryAutoTrigger();\n\t\t}\n\t}\n\n\tprivate _tryAutoTrigger() {\n\t\tthis._autoTriggerTimer.cancelAndSet(() => {\n\t\t\tthis.trigger({ type: CodeActionTriggerType.Auto, triggerAction: CodeActionTriggerSource.Default });\n\t\t}, this._delay);\n\t}\n\n\tprivate _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger: CodeActionTrigger): Selection | undefined {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selection = this._editor.getSelection();\n\t\tif (trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst enabled = this._editor.getOption(EditorOption.lightbulb).enabled;\n\t\tif (enabled === ShowLightbulbIconMode.Off) {\n\t\t\treturn undefined;\n\t\t} else if (enabled === ShowLightbulbIconMode.On) {\n\t\t\treturn selection;\n\t\t} else if (enabled === ShowLightbulbIconMode.OnCode) {\n\t\t\tconst isSelectionEmpty = selection.isEmpty();\n\t\t\tif (!isSelectionEmpty) {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst { lineNumber, column } = selection.getPosition();\n\t\t\tconst line = model.getLineContent(lineNumber);\n\t\t\tif (line.length === 0) {\n\t\t\t\t// empty line\n\t\t\t\treturn undefined;\n\t\t\t} else if (column === 1) {\n\t\t\t\t// look only right\n\t\t\t\tif (/\\s/.test(line[0])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else if (column === model.getLineMaxColumn(lineNumber)) {\n\t\t\t\t// look only left\n\t\t\t\tif (/\\s/.test(line[line.length - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// look left and right\n\t\t\t\tif (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn selection;\n\t}\n}\n\nexport namespace CodeActionsState {\n\n\texport const enum Type { Empty, Triggered }\n\n\texport const Empty = { type: Type.Empty } as const;\n\n\texport class Triggered {\n\t\treadonly type = Type.Triggered;\n\n\t\tpublic readonly actions: Promise<CodeActionSet>;\n\n\t\tconstructor(\n\t\t\tpublic readonly trigger: CodeActionTrigger,\n\t\t\tpublic readonly position: Position,\n\t\t\tprivate readonly _cancellablePromise: CancelablePromise<CodeActionSet>,\n\t\t) {\n\t\t\tthis.actions = _cancellablePromise.catch((e): CodeActionSet => {\n\t\t\t\tif (isCancellationError(e)) {\n\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t});\n\t\t}\n\n\t\tpublic cancel() {\n\t\t\tthis._cancellablePromise.cancel();\n\t\t}\n\t}\n\n\texport type State = typeof Empty | Triggered;\n}\n\nconst emptyCodeActionSet = Object.freeze<CodeActionSet>({\n\tallActions: [],\n\tvalidActions: [],\n\tdispose: () => { },\n\tdocumentation: [],\n\thasAutoFix: false,\n\thasAIFix: false,\n\tallAIFixes: false,\n});\n\n\nexport class CodeActionModel extends Disposable {\n\n\tprivate readonly _codeActionOracle = this._register(new MutableDisposable<CodeActionOracle>());\n\tprivate _state: CodeActionsState.State = CodeActionsState.Empty;\n\n\tprivate readonly _supportedCodeActions: IContextKey<string>;\n\n\tprivate readonly _onDidChangeState = this._register(new Emitter<CodeActionsState.State>());\n\tpublic readonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _registry: LanguageFeatureRegistry<CodeActionProvider>,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tcontextKeyService: IContextKeyService,\n\t\tprivate readonly _progressService?: IEditorProgressService,\n\t\tprivate readonly _configurationService?: IConfigurationService,\n\t\tprivate readonly _telemetryService?: ITelemetryService\n\t) {\n\t\tsuper();\n\t\tthis._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n\n\t\tthis._register(this._editor.onDidChangeModel(() => this._update()));\n\t\tthis._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._register(this._registry.onDidChange(() => this._update()));\n\t\tthis._register(this._editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.lightbulb)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._update();\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\n\t\tsuper.dispose();\n\t\tthis.setState(CodeActionsState.Empty, true);\n\t}\n\n\tprivate _settingEnabledNearbyQuickfixes(): boolean {\n\t\tconst model = this._editor?.getModel();\n\t\treturn this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', { resource: model?.uri }) : false;\n\t}\n\n\tprivate _update(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._codeActionOracle.value = undefined;\n\n\t\tthis.setState(CodeActionsState.Empty);\n\n\t\tconst model = this._editor.getModel();\n\t\tif (model\n\t\t\t&& this._registry.has(model)\n\t\t\t&& !this._editor.getOption(EditorOption.readOnly)\n\t\t) {\n\t\t\tconst supportedActions: string[] = this._registry.all(model).flatMap(provider => provider.providedCodeActionKinds ?? []);\n\t\t\tthis._supportedCodeActions.set(supportedActions.join(' '));\n\n\t\t\tthis._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n\t\t\t\tif (!trigger) {\n\t\t\t\t\tthis.setState(CodeActionsState.Empty);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst startPosition = trigger.selection.getStartPosition();\n\n\t\t\t\tconst actions = createCancelablePromise(async token => {\n\t\t\t\t\tif (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === CodeActionTriggerType.Invoke && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || trigger.trigger.filter?.include?.contains(CodeActionKind.QuickFix))) {\n\t\t\t\t\t\tconst codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\t\tconst allCodeActions = [...codeActionSet.allActions];\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Search for quickfixes in the curret code action set.\n\t\t\t\t\t\tconst foundQuickfix = codeActionSet.validActions?.some(action => action.action.kind ? CodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) : false);\n\t\t\t\t\t\tconst allMarkers = this._markerService.read({ resource: model.uri });\n\t\t\t\t\t\tif (foundQuickfix) {\n\t\t\t\t\t\t\tfor (const action of codeActionSet.validActions) {\n\t\t\t\t\t\t\t\tif (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n\t\t\t\t\t\t\t\t\taction.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn { validActions: codeActionSet.validActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { codeActionSet.dispose(); } };\n\t\t\t\t\t\t} else if (!foundQuickfix) {\n\t\t\t\t\t\t\t// If markers exists, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n\t\t\t\t\t\t\tif (allMarkers.length > 0) {\n\t\t\t\t\t\t\t\tconst currPosition = trigger.selection.getPosition();\n\t\t\t\t\t\t\t\tlet trackedPosition = currPosition;\n\t\t\t\t\t\t\t\tlet distance = Number.MAX_VALUE;\n\t\t\t\t\t\t\t\tconst currentActions = [...codeActionSet.validActions];\n\n\t\t\t\t\t\t\t\tfor (const marker of allMarkers) {\n\t\t\t\t\t\t\t\t\tconst col = marker.endColumn;\n\t\t\t\t\t\t\t\t\tconst row = marker.endLineNumber;\n\t\t\t\t\t\t\t\t\tconst startRow = marker.startLineNumber;\n\n\t\t\t\t\t\t\t\t\t// Found quickfix on the same line and check relative distance to other markers\n\t\t\t\t\t\t\t\t\tif ((row === currPosition.lineNumber || startRow === currPosition.lineNumber)) {\n\t\t\t\t\t\t\t\t\t\ttrackedPosition = new Position(row, col);\n\t\t\t\t\t\t\t\t\t\tconst newCodeActionTrigger: CodeActionTrigger = {\n\t\t\t\t\t\t\t\t\t\t\ttype: trigger.trigger.type,\n\t\t\t\t\t\t\t\t\t\t\ttriggerAction: trigger.trigger.triggerAction,\n\t\t\t\t\t\t\t\t\t\t\tfilter: { include: trigger.trigger.filter?.include ? trigger.trigger.filter?.include : CodeActionKind.QuickFix },\n\t\t\t\t\t\t\t\t\t\t\tautoApply: trigger.trigger.autoApply,\n\t\t\t\t\t\t\t\t\t\t\tcontext: { notAvailableMessage: trigger.trigger.context?.notAvailableMessage || '', position: trackedPosition }\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tconst selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n\t\t\t\t\t\t\t\t\t\tconst actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n\n\t\t\t\t\t\t\t\t\t\tif (actionsAtMarker.validActions.length !== 0) {\n\t\t\t\t\t\t\t\t\t\t\tfor (const action of actionsAtMarker.validActions) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (codeActionSet.allActions.length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tallCodeActions.push(...actionsAtMarker.allActions);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Already filtered through to only get quickfixes, so no need to filter again.\n\t\t\t\t\t\t\t\t\t\t\tif (Math.abs(currPosition.column - col) < distance) {\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.unshift(...actionsAtMarker.validActions);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.push(...actionsAtMarker.validActions);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdistance = Math.abs(currPosition.column - col);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst filteredActions = currentActions.filter((action, index, self) =>\n\t\t\t\t\t\t\t\t\tself.findIndex((a) => a.action.title === action.action.title) === index);\n\n\t\t\t\t\t\t\t\tfilteredActions.sort((a, b) => {\n\t\t\t\t\t\t\t\t\tif (a.action.isPreferred && !b.action.isPreferred) {\n\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t} else if (!a.action.isPreferred && b.action.isPreferred) {\n\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t} else if (a.action.isAI && !b.action.isAI) {\n\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t} else if (!a.action.isAI && b.action.isAI) {\n\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Only retriggers if actually found quickfix on the same line as cursor\n\t\t\t\t\t\t\t\treturn { validActions: filteredActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { codeActionSet.dispose(); } };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Case for manual triggers - specifically Source Actions and Refactors\n\t\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\t\tconst sw = new StopWatch();\n\t\t\t\t\t\tconst codeActions = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\n\t\t\t\t\t\t// Telemetry for duration of each code action on save.\n\t\t\t\t\t\tif (this._telemetryService) {\n\t\t\t\t\t\t\ttype RenderActionMenu = {\n\t\t\t\t\t\t\t\tcodeActions: number;\n\t\t\t\t\t\t\t\tduration: number;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\ttype RenderActionMenuClassification = {\n\t\t\t\t\t\t\t\towner: 'justschen';\n\t\t\t\t\t\t\t\tcomment: 'Information about how long it took for code actions to be received from the provider and shown in the UI.';\n\t\t\t\t\t\t\t\tcodeActions: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of valid code actions received from TS.' };\n\t\t\t\t\t\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Duration it took for TS to return the action to run for each kind. ' };\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._telemetryService.publicLog2<RenderActionMenu, RenderActionMenuClassification>('codeAction.invokedDurations', {\n\t\t\t\t\t\t\t\tcodeActions: codeActions.validActions.length,\n\t\t\t\t\t\t\t\tduration: sw.elapsed()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn codeActions;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t});\n\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\tthis._progressService?.showWhile(actions, 250);\n\t\t\t\t}\n\t\t\t\tconst newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n\t\t\t\tlet isManualToAutoTransition = false;\n\t\t\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\t\t\t// Check if the current state is manual and the new state is automatic\n\t\t\t\t\tisManualToAutoTransition = this._state.trigger.type === CodeActionTriggerType.Invoke &&\n\t\t\t\t\t\tnewState.type === CodeActionsState.Type.Triggered &&\n\t\t\t\t\t\tnewState.trigger.type === CodeActionTriggerType.Auto &&\n\t\t\t\t\t\tthis._state.position !== newState.position;\n\t\t\t\t}\n\n\t\t\t\t// Do not trigger state if current state is manual and incoming state is automatic\n\t\t\t\tif (!isManualToAutoTransition) {\n\t\t\t\t\tthis.setState(newState);\n\t\t\t\t} else {\n\t\t\t\t\t// Reset the new state after getting code actions back.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.setState(newState);\n\t\t\t\t\t}, 500);\n\t\t\t\t}\n\t\t\t}, undefined);\n\t\t\tthis._codeActionOracle.value.trigger({ type: CodeActionTriggerType.Auto, triggerAction: CodeActionTriggerSource.Default });\n\t\t} else {\n\t\t\tthis._supportedCodeActions.reset();\n\t\t}\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger) {\n\t\tthis._codeActionOracle.value?.trigger(trigger);\n\t}\n\n\tprivate setState(newState: CodeActionsState.State, skipNotify?: boolean) {\n\t\tif (newState === this._state) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Cancel old request\n\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\tthis._state.cancel();\n\t\t}\n\n\t\tthis._state = newState;\n\n\t\tif (!skipNotify && !this._disposed) {\n\t\t\tthis._onDidChangeState.fire(newState);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["CodeActionsState", "Type", "marker"]
}
