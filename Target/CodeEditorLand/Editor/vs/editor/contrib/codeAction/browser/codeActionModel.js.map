{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/codeAction/browser/codeActionModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype CancelablePromise,\n\tTimeoutTimer,\n\tcreateCancelablePromise,\n} from \"../../../../base/common/async.js\";\nimport { isCancellationError } from \"../../../../base/common/errors.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { HierarchicalKind } from \"../../../../base/common/hierarchicalKind.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\ttype IContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { IMarkerService } from \"../../../../platform/markers/common/markers.js\";\nimport {\n\ttype IEditorProgressService,\n\tProgress,\n} from \"../../../../platform/progress/common/progress.js\";\nimport type { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorOption,\n\tShowLightbulbIconMode,\n} from \"../../../common/config/editorOptions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport type { LanguageFeatureRegistry } from \"../../../common/languageFeatureRegistry.js\";\nimport {\n\ttype CodeActionProvider,\n\tCodeActionTriggerType,\n} from \"../../../common/languages.js\";\nimport {\n\tCodeActionKind,\n\ttype CodeActionSet,\n\ttype CodeActionTrigger,\n\tCodeActionTriggerSource,\n} from \"../common/types.js\";\nimport { getCodeActions } from \"./codeAction.js\";\n\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey<string>(\n\t\"supportedCodeAction\",\n\t\"\",\n);\n\nexport const APPLY_FIX_ALL_COMMAND_ID = \"_typescript.applyFixAllCodeAction\";\n\ntype TriggeredCodeAction = {\n\treadonly selection: Selection;\n\treadonly trigger: CodeActionTrigger;\n};\n\nclass CodeActionOracle extends Disposable {\n\tprivate readonly _autoTriggerTimer = this._register(new TimeoutTimer());\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tprivate readonly _signalChange: (\n\t\t\ttriggered: TriggeredCodeAction | undefined,\n\t\t) => void,\n\t\tprivate readonly _delay: number = 250,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tthis._markerService.onMarkerChanged((e) =>\n\t\t\t\tthis._onMarkerChanges(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeCursorPosition(() =>\n\t\t\t\tthis._tryAutoTrigger(),\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger): void {\n\t\tconst selection =\n\t\t\tthis._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n\t\tthis._signalChange(selection ? { trigger, selection } : undefined);\n\t}\n\n\tprivate _onMarkerChanges(resources: readonly URI[]): void {\n\t\tconst model = this._editor.getModel();\n\t\tif (\n\t\t\tmodel &&\n\t\t\tresources.some((resource) => isEqual(resource, model.uri))\n\t\t) {\n\t\t\tthis._tryAutoTrigger();\n\t\t}\n\t}\n\n\tprivate _tryAutoTrigger() {\n\t\tthis._autoTriggerTimer.cancelAndSet(() => {\n\t\t\tthis.trigger({\n\t\t\t\ttype: CodeActionTriggerType.Auto,\n\t\t\t\ttriggerAction: CodeActionTriggerSource.Default,\n\t\t\t});\n\t\t}, this._delay);\n\t}\n\n\tprivate _getRangeOfSelectionUnlessWhitespaceEnclosed(\n\t\ttrigger: CodeActionTrigger,\n\t): Selection | undefined {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selection = this._editor.getSelection();\n\t\tif (trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst enabled = this._editor.getOption(EditorOption.lightbulb).enabled;\n\t\tif (enabled === ShowLightbulbIconMode.Off) {\n\t\t\treturn undefined;\n\t\t} else if (enabled === ShowLightbulbIconMode.On) {\n\t\t\treturn selection;\n\t\t} else if (enabled === ShowLightbulbIconMode.OnCode) {\n\t\t\tconst isSelectionEmpty = selection.isEmpty();\n\t\t\tif (!isSelectionEmpty) {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst { lineNumber, column } = selection.getPosition();\n\t\t\tconst line = model.getLineContent(lineNumber);\n\t\t\tif (line.length === 0) {\n\t\t\t\t// empty line\n\t\t\t\treturn undefined;\n\t\t\t} else if (column === 1) {\n\t\t\t\t// look only right\n\t\t\t\tif (/\\s/.test(line[0])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else if (column === model.getLineMaxColumn(lineNumber)) {\n\t\t\t\t// look only left\n\t\t\t\tif (/\\s/.test(line[line.length - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// look left and right\n\t\t\t\tif (\n\t\t\t\t\t/\\s/.test(line[column - 2]) &&\n\t\t\t\t\t/\\s/.test(line[column - 1])\n\t\t\t\t) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn selection;\n\t}\n}\n\nexport namespace CodeActionsState {\n\texport enum Type {\n\t\tEmpty = 0,\n\t\tTriggered = 1,\n\t}\n\n\texport const Empty = { type: Type.Empty } as const;\n\n\texport class Triggered {\n\t\treadonly type = Type.Triggered;\n\n\t\tpublic readonly actions: Promise<CodeActionSet>;\n\n\t\tconstructor(\n\t\t\tpublic readonly trigger: CodeActionTrigger,\n\t\t\tpublic readonly position: Position,\n\t\t\tprivate readonly _cancellablePromise: CancelablePromise<CodeActionSet>,\n\t\t) {\n\t\t\tthis.actions = _cancellablePromise.catch((e): CodeActionSet => {\n\t\t\t\tif (isCancellationError(e)) {\n\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t});\n\t\t}\n\n\t\tpublic cancel() {\n\t\t\tthis._cancellablePromise.cancel();\n\t\t}\n\t}\n\n\texport type State = typeof Empty | Triggered;\n}\n\nconst emptyCodeActionSet = Object.freeze<CodeActionSet>({\n\tallActions: [],\n\tvalidActions: [],\n\tdispose: () => {},\n\tdocumentation: [],\n\thasAutoFix: false,\n\thasAIFix: false,\n\tallAIFixes: false,\n});\n\nexport class CodeActionModel extends Disposable {\n\tprivate readonly _codeActionOracle = this._register(\n\t\tnew MutableDisposable<CodeActionOracle>(),\n\t);\n\tprivate _state: CodeActionsState.State = CodeActionsState.Empty;\n\n\tprivate readonly _supportedCodeActions: IContextKey<string>;\n\n\tprivate readonly _onDidChangeState = this._register(\n\t\tnew Emitter<CodeActionsState.State>(),\n\t);\n\tpublic readonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _registry: LanguageFeatureRegistry<CodeActionProvider>,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tcontextKeyService: IContextKeyService,\n\t\tprivate readonly _progressService?: IEditorProgressService,\n\t\tprivate readonly _configurationService?: IConfigurationService,\n\t\tprivate readonly _telemetryService?: ITelemetryService,\n\t) {\n\t\tsuper();\n\t\tthis._supportedCodeActions =\n\t\t\tSUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n\n\t\tthis._register(this._editor.onDidChangeModel(() => this._update()));\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeModelLanguage(() => this._update()),\n\t\t);\n\t\tthis._register(this._registry.onDidChange(() => this._update()));\n\t\tthis._register(\n\t\t\tthis._editor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.hasChanged(EditorOption.lightbulb)) {\n\t\t\t\t\tthis._update();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._update();\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\n\t\tsuper.dispose();\n\t\tthis.setState(CodeActionsState.Empty, true);\n\t}\n\n\tprivate _settingEnabledNearbyQuickfixes(): boolean {\n\t\tconst model = this._editor?.getModel();\n\t\treturn this._configurationService\n\t\t\t? this._configurationService.getValue(\n\t\t\t\t\t\"editor.codeActionWidget.includeNearbyQuickFixes\",\n\t\t\t\t\t{ resource: model?.uri },\n\t\t\t\t)\n\t\t\t: false;\n\t}\n\n\tprivate _update(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._codeActionOracle.value = undefined;\n\n\t\tthis.setState(CodeActionsState.Empty);\n\n\t\tconst model = this._editor.getModel();\n\t\tif (\n\t\t\tmodel &&\n\t\t\tthis._registry.has(model) &&\n\t\t\t!this._editor.getOption(EditorOption.readOnly)\n\t\t) {\n\t\t\tconst supportedActions: string[] = this._registry\n\t\t\t\t.all(model)\n\t\t\t\t.flatMap((provider) => provider.providedCodeActionKinds ?? []);\n\t\t\tthis._supportedCodeActions.set(supportedActions.join(\" \"));\n\n\t\t\tthis._codeActionOracle.value = new CodeActionOracle(\n\t\t\t\tthis._editor,\n\t\t\t\tthis._markerService,\n\t\t\t\t(trigger) => {\n\t\t\t\t\tif (!trigger) {\n\t\t\t\t\t\tthis.setState(CodeActionsState.Empty);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startPosition = trigger.selection.getStartPosition();\n\n\t\t\t\t\tconst actions = createCancelablePromise(async (token) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis._settingEnabledNearbyQuickfixes() &&\n\t\t\t\t\t\t\ttrigger.trigger.type ===\n\t\t\t\t\t\t\t\tCodeActionTriggerType.Invoke &&\n\t\t\t\t\t\t\t(trigger.trigger.triggerAction ===\n\t\t\t\t\t\t\t\tCodeActionTriggerSource.QuickFix ||\n\t\t\t\t\t\t\t\ttrigger.trigger.filter?.include?.contains(\n\t\t\t\t\t\t\t\t\tCodeActionKind.QuickFix,\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst codeActionSet = await getCodeActions(\n\t\t\t\t\t\t\t\tthis._registry,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\ttrigger.selection,\n\t\t\t\t\t\t\t\ttrigger.trigger,\n\t\t\t\t\t\t\t\tProgress.None,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst allCodeActions = [\n\t\t\t\t\t\t\t\t...codeActionSet.allActions,\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Search for quickfixes in the curret code action set.\n\t\t\t\t\t\t\tconst foundQuickfix =\n\t\t\t\t\t\t\t\tcodeActionSet.validActions?.some((action) =>\n\t\t\t\t\t\t\t\t\taction.action.kind\n\t\t\t\t\t\t\t\t\t\t? CodeActionKind.QuickFix.contains(\n\t\t\t\t\t\t\t\t\t\t\t\tnew HierarchicalKind(\n\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.kind,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst allMarkers = this._markerService.read({\n\t\t\t\t\t\t\t\tresource: model.uri,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (foundQuickfix) {\n\t\t\t\t\t\t\t\tfor (const action of codeActionSet.validActions) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\taction.action.command?.arguments?.some(\n\t\t\t\t\t\t\t\t\t\t\t(arg) =>\n\t\t\t\t\t\t\t\t\t\t\t\ttypeof arg === \"string\" &&\n\t\t\t\t\t\t\t\t\t\t\t\targ.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\tAPPLY_FIX_ALL_COMMAND_ID,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\taction.action.diagnostics = [\n\t\t\t\t\t\t\t\t\t\t\t...allMarkers.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t(marker) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tmarker.relatedInformation,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tvalidActions: codeActionSet.validActions,\n\t\t\t\t\t\t\t\t\tallActions: allCodeActions,\n\t\t\t\t\t\t\t\t\tdocumentation: codeActionSet.documentation,\n\t\t\t\t\t\t\t\t\thasAutoFix: codeActionSet.hasAutoFix,\n\t\t\t\t\t\t\t\t\thasAIFix: codeActionSet.hasAIFix,\n\t\t\t\t\t\t\t\t\tallAIFixes: codeActionSet.allAIFixes,\n\t\t\t\t\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t\t\t\t\tcodeActionSet.dispose();\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else if (!foundQuickfix) {\n\t\t\t\t\t\t\t\t// If markers exists, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n\t\t\t\t\t\t\t\tif (allMarkers.length > 0) {\n\t\t\t\t\t\t\t\t\tconst currPosition =\n\t\t\t\t\t\t\t\t\t\ttrigger.selection.getPosition();\n\t\t\t\t\t\t\t\t\tlet trackedPosition = currPosition;\n\t\t\t\t\t\t\t\t\tlet distance = Number.MAX_VALUE;\n\t\t\t\t\t\t\t\t\tconst currentActions = [\n\t\t\t\t\t\t\t\t\t\t...codeActionSet.validActions,\n\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\tfor (const marker of allMarkers) {\n\t\t\t\t\t\t\t\t\t\tconst col = marker.endColumn;\n\t\t\t\t\t\t\t\t\t\tconst row = marker.endLineNumber;\n\t\t\t\t\t\t\t\t\t\tconst startRow = marker.startLineNumber;\n\n\t\t\t\t\t\t\t\t\t\t// Found quickfix on the same line and check relative distance to other markers\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\trow === currPosition.lineNumber ||\n\t\t\t\t\t\t\t\t\t\t\tstartRow === currPosition.lineNumber\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\ttrackedPosition = new Position(\n\t\t\t\t\t\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\t\t\t\t\t\tcol,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst newCodeActionTrigger: CodeActionTrigger =\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: trigger.trigger.type,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttriggerAction:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger.trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.triggerAction,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfilter: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tinclude: trigger.trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.filter?.include\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? trigger.trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.filter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?.include\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: CodeActionKind.QuickFix,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tautoApply:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger.trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.autoApply,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnotAvailableMessage:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrigger.trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.context\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t?.notAvailableMessage ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposition:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrackedPosition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tconst selectionAsPosition =\n\t\t\t\t\t\t\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\t\t\t\t\t\t\ttrackedPosition.lineNumber,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttrackedPosition.column,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttrackedPosition.lineNumber,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttrackedPosition.column,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst actionsAtMarker =\n\t\t\t\t\t\t\t\t\t\t\t\tawait getCodeActions(\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis._registry,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectionAsPosition,\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewCodeActionTrigger,\n\t\t\t\t\t\t\t\t\t\t\t\t\tProgress.None,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\tactionsAtMarker.validActions\n\t\t\t\t\t\t\t\t\t\t\t\t\t.length !== 0\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor (const action of actionsAtMarker.validActions) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.command?.arguments?.some(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(arg) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttypeof arg ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string\" &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\targ.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAPPLY_FIX_ALL_COMMAND_ID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.diagnostics =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...allMarkers.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(marker) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarker.relatedInformation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tcodeActionSet.allActions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.length === 0\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tallCodeActions.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...actionsAtMarker.allActions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Already filtered through to only get quickfixes, so no need to filter again.\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tMath.abs(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrPosition.column -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcol,\n\t\t\t\t\t\t\t\t\t\t\t\t\t) < distance\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.unshift(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...actionsAtMarker.validActions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...actionsAtMarker.validActions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tdistance = Math.abs(\n\t\t\t\t\t\t\t\t\t\t\t\tcurrPosition.column - col,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst filteredActions =\n\t\t\t\t\t\t\t\t\t\tcurrentActions.filter(\n\t\t\t\t\t\t\t\t\t\t\t(action, index, self) =>\n\t\t\t\t\t\t\t\t\t\t\t\tself.findIndex(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(a) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ta.action.title ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.title,\n\t\t\t\t\t\t\t\t\t\t\t\t) === index,\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tfilteredActions.sort((a, b) => {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\ta.action.isPreferred &&\n\t\t\t\t\t\t\t\t\t\t\t!b.action.isPreferred\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t!a.action.isPreferred &&\n\t\t\t\t\t\t\t\t\t\t\tb.action.isPreferred\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\ta.action.isAI &&\n\t\t\t\t\t\t\t\t\t\t\t!b.action.isAI\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t\t\t!a.action.isAI &&\n\t\t\t\t\t\t\t\t\t\t\tb.action.isAI\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Only retriggers if actually found quickfix on the same line as cursor\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tvalidActions: filteredActions,\n\t\t\t\t\t\t\t\t\t\tallActions: allCodeActions,\n\t\t\t\t\t\t\t\t\t\tdocumentation:\n\t\t\t\t\t\t\t\t\t\t\tcodeActionSet.documentation,\n\t\t\t\t\t\t\t\t\t\thasAutoFix: codeActionSet.hasAutoFix,\n\t\t\t\t\t\t\t\t\t\thasAIFix: codeActionSet.hasAIFix,\n\t\t\t\t\t\t\t\t\t\tallAIFixes: codeActionSet.allAIFixes,\n\t\t\t\t\t\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t\t\t\t\t\tcodeActionSet.dispose();\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Case for manual triggers - specifically Source Actions and Refactors\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrigger.trigger.type ===\n\t\t\t\t\t\t\tCodeActionTriggerType.Invoke\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst sw = new StopWatch();\n\t\t\t\t\t\t\tconst codeActions = await getCodeActions(\n\t\t\t\t\t\t\t\tthis._registry,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\ttrigger.selection,\n\t\t\t\t\t\t\t\ttrigger.trigger,\n\t\t\t\t\t\t\t\tProgress.None,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Telemetry for duration of each code action on save.\n\t\t\t\t\t\t\tif (this._telemetryService) {\n\t\t\t\t\t\t\t\ttype RenderActionMenu = {\n\t\t\t\t\t\t\t\t\tcodeActions: number;\n\t\t\t\t\t\t\t\t\tduration: number;\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\ttype RenderActionMenuClassification = {\n\t\t\t\t\t\t\t\t\towner: \"justschen\";\n\t\t\t\t\t\t\t\t\tcomment: \"Information about how long it took for code actions to be received from the provider and shown in the UI.\";\n\t\t\t\t\t\t\t\t\tcodeActions: {\n\t\t\t\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\t\t\t\tcomment: \"Number of valid code actions received from TS.\";\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tduration: {\n\t\t\t\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\t\t\t\tcomment: \"Duration it took for TS to return the action to run for each kind. \";\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\t\t\t\t\t\tRenderActionMenu,\n\t\t\t\t\t\t\t\t\tRenderActionMenuClassification\n\t\t\t\t\t\t\t\t>(\"codeAction.invokedDurations\", {\n\t\t\t\t\t\t\t\t\tcodeActions:\n\t\t\t\t\t\t\t\t\t\tcodeActions.validActions.length,\n\t\t\t\t\t\t\t\t\tduration: sw.elapsed(),\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn codeActions;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn getCodeActions(\n\t\t\t\t\t\t\tthis._registry,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\ttrigger.selection,\n\t\t\t\t\t\t\ttrigger.trigger,\n\t\t\t\t\t\t\tProgress.None,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\t\tthis._progressService?.showWhile(actions, 250);\n\t\t\t\t\t}\n\t\t\t\t\tconst newState = new CodeActionsState.Triggered(\n\t\t\t\t\t\ttrigger.trigger,\n\t\t\t\t\t\tstartPosition,\n\t\t\t\t\t\tactions,\n\t\t\t\t\t);\n\t\t\t\t\tlet isManualToAutoTransition = false;\n\t\t\t\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\t\t\t\t// Check if the current state is manual and the new state is automatic\n\t\t\t\t\t\tisManualToAutoTransition =\n\t\t\t\t\t\t\tthis._state.trigger.type ===\n\t\t\t\t\t\t\t\tCodeActionTriggerType.Invoke &&\n\t\t\t\t\t\t\tnewState.type === CodeActionsState.Type.Triggered &&\n\t\t\t\t\t\t\tnewState.trigger.type ===\n\t\t\t\t\t\t\t\tCodeActionTriggerType.Auto &&\n\t\t\t\t\t\t\tthis._state.position !== newState.position;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do not trigger state if current state is manual and incoming state is automatic\n\t\t\t\t\tif (isManualToAutoTransition) {\n\t\t\t\t\t\t// Reset the new state after getting code actions back.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.setState(newState);\n\t\t\t\t\t\t}, 500);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState(newState);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t);\n\t\t\tthis._codeActionOracle.value.trigger({\n\t\t\t\ttype: CodeActionTriggerType.Auto,\n\t\t\t\ttriggerAction: CodeActionTriggerSource.Default,\n\t\t\t});\n\t\t} else {\n\t\t\tthis._supportedCodeActions.reset();\n\t\t}\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger) {\n\t\tthis._codeActionOracle.value?.trigger(trigger);\n\t}\n\n\tprivate setState(newState: CodeActionsState.State, skipNotify?: boolean) {\n\t\tif (newState === this._state) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Cancel old request\n\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\tthis._state.cancel();\n\t\t}\n\n\t\tthis._state = newState;\n\n\t\tif (!skipNotify && !this._disposed) {\n\t\t\tthis._onDidChangeState.fire(newState);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["CodeActionsState", "Type", "marker"]
}
