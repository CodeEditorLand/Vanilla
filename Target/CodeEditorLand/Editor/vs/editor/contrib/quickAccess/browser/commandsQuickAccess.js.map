{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { IEditor } from '../../../common/editorCommon.js';\nimport { ILocalizedString } from '../../../../nls.js';\nimport { isLocalizedString } from '../../../../platform/action/common/action.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { AbstractCommandsQuickAccessProvider, ICommandQuickPick, ICommandsQuickAccessOptions } from '../../../../platform/quickinput/browser/commandsQuickAccess.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService\n\t) {\n\t\tsuper(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\tlet commandDescription: undefined | ILocalizedString;\n\t\t\tif (editorAction.metadata?.description) {\n\t\t\t\tif (isLocalizedString(editorAction.metadata.description)) {\n\t\t\t\t\tcommandDescription = editorAction.metadata.description;\n\t\t\t\t} else {\n\t\t\t\t\tcommandDescription = { original: editorAction.metadata.description, value: editorAction.metadata.description };\n\t\t\t\t}\n\t\t\t}\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tcommandDescription,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC,SAAS,qCAAqC,mBAAmB,mCAAmC;AACpG,SAAS,yBAAyB;AAE3B,MAAe,kDAAkD,oCAAoC;AAAA,EAhB5G,OAgB4G;AAAA;AAAA;AAAA,EAE3G,YACC,SACA,sBACA,mBACA,gBACA,kBACA,eACC;AACD,UAAM,SAAS,sBAAsB,mBAAmB,gBAAgB,kBAAkB,aAAa;AAAA,EACxG;AAAA,EAOU,4BAAiD;AAC1D,UAAM,0BAA0B,KAAK;AACrC,QAAI,CAAC,yBAAyB;AAC7B,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,qBAA0C,CAAC;AACjD,eAAW,gBAAgB,wBAAwB,oBAAoB,GAAG;AACzE,UAAI;AACJ,UAAI,aAAa,UAAU,aAAa;AACvC,YAAI,kBAAkB,aAAa,SAAS,WAAW,GAAG;AACzD,+BAAqB,aAAa,SAAS;AAAA,QAC5C,OAAO;AACN,+BAAqB,EAAE,UAAU,aAAa,SAAS,aAAa,OAAO,aAAa,SAAS,YAAY;AAAA,QAC9G;AAAA,MACD;AACA,yBAAmB,KAAK;AAAA,QACvB,WAAW,aAAa;AAAA,QACxB,cAAc,aAAa;AAAA,QAC3B;AAAA,QACA,OAAO,WAAW,aAAa,KAAK,KAAK,aAAa;AAAA,MACvD,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
