{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from \"../../../../base/common/iconLabels.js\";\nimport type { ILocalizedString } from \"../../../../nls.js\";\nimport { isLocalizedString } from \"../../../../platform/action/common/action.js\";\nimport type { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport type { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tAbstractCommandsQuickAccessProvider,\n\ttype ICommandQuickPick,\n\ttype ICommandsQuickAccessOptions,\n} from \"../../../../platform/quickinput/browser/commandsQuickAccess.js\";\nimport type { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IEditor } from \"../../../common/editorCommon.js\";\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService,\n\t) {\n\t\tsuper(\n\t\t\toptions,\n\t\t\tinstantiationService,\n\t\t\tkeybindingService,\n\t\t\tcommandService,\n\t\t\ttelemetryService,\n\t\t\tdialogService,\n\t\t);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\tlet commandDescription: undefined | ILocalizedString;\n\t\t\tif (editorAction.metadata?.description) {\n\t\t\t\tif (isLocalizedString(editorAction.metadata.description)) {\n\t\t\t\t\tcommandDescription = editorAction.metadata.description;\n\t\t\t\t} else {\n\t\t\t\t\tcommandDescription = {\n\t\t\t\t\t\toriginal: editorAction.metadata.description,\n\t\t\t\t\t\tvalue: editorAction.metadata.description,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tcommandDescription,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAE3B,SAAS,yBAAyB;AAKlC;AAAA,EACC;AAAA,OAGM;AAIA,MAAe,kDAAkD,oCAAoC;AAAA,EApB5G,OAoB4G;AAAA;AAAA;AAAA,EAC3G,YACC,SACA,sBACA,mBACA,gBACA,kBACA,eACC;AACD;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAOU,4BAAiD;AAC1D,UAAM,0BAA0B,KAAK;AACrC,QAAI,CAAC,yBAAyB;AAC7B,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,qBAA0C,CAAC;AACjD,eAAW,gBAAgB,wBAAwB,oBAAoB,GAAG;AACzE,UAAI;AACJ,UAAI,aAAa,UAAU,aAAa;AACvC,YAAI,kBAAkB,aAAa,SAAS,WAAW,GAAG;AACzD,+BAAqB,aAAa,SAAS;AAAA,QAC5C,OAAO;AACN,+BAAqB;AAAA,YACpB,UAAU,aAAa,SAAS;AAAA,YAChC,OAAO,aAAa,SAAS;AAAA,UAC9B;AAAA,QACD;AAAA,MACD;AACA,yBAAmB,KAAK;AAAA,QACvB,WAAW,aAAa;AAAA,QACxB,cAAc,aAAa;AAAA,QAC3B;AAAA,QACA,OAAO,WAAW,aAAa,KAAK,KAAK,aAAa;AAAA,MACvD,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
