{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { IRange } from '../../../common/core/range.js';\nimport { IDiffEditor, IEditor, ScrollType } from '../../../common/editorCommon.js';\nimport { IModelDeltaDecoration, ITextModel, OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { IQuickAccessProvider, IQuickAccessProviderRunOptions } from '../../../../platform/quickinput/common/quickAccess.js';\nimport { IKeyMods, IQuickPick, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\nimport { TextEditorSelectionSource } from '../../../../platform/editor/common/editor.js';\n\ninterface IEditorLineDecoration {\n\treadonly rangeHighlightId: string;\n\treadonly overviewRulerDecorationId: string;\n}\n\nexport interface IEditorNavigationQuickAccessOptions {\n\tcanAcceptInBackground?: boolean;\n}\n\nexport interface IQuickAccessTextEditorContext {\n\n\t/**\n\t * The current active editor.\n\t */\n\treadonly editor: IEditor;\n\n\t/**\n\t * If defined, allows to restore the original view state\n\t * the text editor had before quick access opened.\n\t */\n\trestoreViewState?: () => void;\n}\n\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport abstract class AbstractEditorNavigationQuickAccessProvider implements IQuickAccessProvider {\n\n\tconstructor(protected options?: IEditorNavigationQuickAccessOptions) { }\n\n\t//#region Provider methods\n\n\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n\n\t\t// Provide based on current active editor\n\t\tconst pickerDisposable = disposables.add(new MutableDisposable());\n\t\tpickerDisposable.value = this.doProvide(picker, token, runOptions);\n\n\t\t// Re-create whenever the active editor changes\n\t\tdisposables.add(this.onDidActiveTextEditorControlChange(() => {\n\n\t\t\t// Clear old\n\t\t\tpickerDisposable.value = undefined;\n\n\t\t\t// Add new\n\t\t\tpickerDisposable.value = this.doProvide(picker, token);\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tprivate doProvide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// With text control\n\t\tconst editor = this.activeTextEditorControl;\n\t\tif (editor && this.canProvideWithTextEditor(editor)) {\n\t\t\tconst context: IQuickAccessTextEditorContext = { editor };\n\n\t\t\t// Restore any view state if this picker was closed\n\t\t\t// without actually going to a line\n\t\t\tconst codeEditor = getCodeEditor(editor);\n\t\t\tif (codeEditor) {\n\n\t\t\t\t// Remember view state and update it when the cursor position\n\t\t\t\t// changes even later because it could be that the user has\n\t\t\t\t// configured quick access to remain open when focus is lost and\n\t\t\t\t// we always want to restore the current location.\n\t\t\t\tlet lastKnownEditorViewState = editor.saveViewState() ?? undefined;\n\t\t\t\tdisposables.add(codeEditor.onDidChangeCursorPosition(() => {\n\t\t\t\t\tlastKnownEditorViewState = editor.saveViewState() ?? undefined;\n\t\t\t\t}));\n\n\t\t\t\tcontext.restoreViewState = () => {\n\t\t\t\t\tif (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n\t\t\t\t\t\teditor.restoreViewState(lastKnownEditorViewState);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tdisposables.add(createSingleCallFunction(token.onCancellationRequested)(() => context.restoreViewState?.()));\n\t\t\t}\n\n\t\t\t// Clean up decorations on dispose\n\t\t\tdisposables.add(toDisposable(() => this.clearDecorations(editor)));\n\n\t\t\t// Ask subclass for entries\n\t\t\tdisposables.add(this.provideWithTextEditor(context, picker, token, runOptions));\n\t\t}\n\n\t\t// Without text control\n\t\telse {\n\t\t\tdisposables.add(this.provideWithoutTextEditor(picker, token));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Subclasses to implement if they can operate on the text editor.\n\t */\n\tprotected canProvideWithTextEditor(editor: IEditor): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when an editor is active.\n\t */\n\tprotected abstract provideWithTextEditor(context: IQuickAccessTextEditorContext, picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable;\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when no editor is active.\n\t */\n\tprotected abstract provideWithoutTextEditor(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable;\n\n\tprotected gotoLocation({ editor }: IQuickAccessTextEditorContext, options: { range: IRange; keyMods: IKeyMods; forceSideBySide?: boolean; preserveFocus?: boolean }): void {\n\t\teditor.setSelection(options.range, TextEditorSelectionSource.JUMP);\n\t\teditor.revealRangeInCenter(options.range, ScrollType.Smooth);\n\t\tif (!options.preserveFocus) {\n\t\t\teditor.focus();\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tif (model && 'getLineContent' in model) {\n\t\t\tstatus(`${model.getLineContent(options.range.startLineNumber)}`);\n\t\t}\n\t}\n\n\tprotected getModel(editor: IEditor | IDiffEditor): ITextModel | undefined {\n\t\treturn isDiffEditor(editor) ?\n\t\t\teditor.getModel()?.modified :\n\t\t\teditor.getModel() as ITextModel;\n\t}\n\n\t//#endregion\n\n\n\t//#region Editor access\n\n\t/**\n\t * Subclasses to provide an event when the active editor control changes.\n\t */\n\tprotected abstract readonly onDidActiveTextEditorControlChange: Event<void>;\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\t//#endregion\n\n\n\t//#region Decorations Utils\n\n\tprivate rangeHighlightDecorationId: IEditorLineDecoration | undefined = undefined;\n\n\taddDecorations(editor: IEditor, range: IRange): void {\n\t\teditor.changeDecorations(changeAccessor => {\n\n\t\t\t// Reset old decorations if any\n\t\t\tconst deleteDecorations: string[] = [];\n\t\t\tif (this.rangeHighlightDecorationId) {\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n\n\t\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t\t}\n\n\t\t\t// Add new decorations for the range\n\t\t\tconst newDecorations: IModelDeltaDecoration[] = [\n\n\t\t\t\t// highlight the entire line on the range\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: 'quick-access-range-highlight',\n\t\t\t\t\t\tclassName: 'rangeHighlight',\n\t\t\t\t\t\tisWholeLine: true\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// also add overview ruler highlight\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: 'quick-access-range-highlight-overview',\n\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\tcolor: themeColorFromId(overviewRulerRangeHighlight),\n\t\t\t\t\t\t\tposition: OverviewRulerLane.Full\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tconst [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n\n\t\t\tthis.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n\t\t});\n\t}\n\n\tclearDecorations(editor: IEditor): void {\n\t\tconst rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\t\tif (rangeHighlightDecorationId) {\n\t\t\teditor.changeDecorations(changeAccessor => {\n\t\t\t\tchangeAccessor.deltaDecorations([\n\t\t\t\t\trangeHighlightDecorationId.overviewRulerDecorationId,\n\t\t\t\t\trangeHighlightDecorationId.rangeHighlightId\n\t\t\t\t], []);\n\t\t\t});\n\n\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t}\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,gCAAgC;AACzC,SAAS,iBAAiB,aAAa,mBAAmB,oBAAoB;AAC9E,SAAS,eAAe,oBAAoB;AAC5C,SAAS,cAAc;AACvB,SAAS,aAAa,SAAS,kBAAkB;AACjD,SAAS,uBAAuB,YAAY,yBAAyB;AACrE,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB,sCAAsC;AACrE,SAAS,UAAU,YAAY,sBAAsB;AACrD,SAAS,wBAAwB;AACjC,SAAS,cAAc;AACvB,SAAS,iCAAiC;AA8BnC,MAAe,4CAA4E;AAAA,EAEjG,YAAsB,SAA+C;AAA/C;AAAA,EAAiD;AAAA,EAlDxE,OAgDkG;AAAA;AAAA;AAAA;AAAA,EAMjG,QAAQ,QAA6D,OAA0B,YAA0D;AACxJ,UAAM,cAAc,IAAI,gBAAgB;AAGxC,WAAO,wBAAwB,CAAC,CAAC,KAAK,SAAS;AAG/C,WAAO,eAAe,OAAO,qBAAqB,OAAO,gBAAgB,OAAO,cAAc;AAG9F,UAAM,mBAAmB,YAAY,IAAI,IAAI,kBAAkB,CAAC;AAChE,qBAAiB,QAAQ,KAAK,UAAU,QAAQ,OAAO,UAAU;AAGjE,gBAAY,IAAI,KAAK,mCAAmC,MAAM;AAG7D,uBAAiB,QAAQ;AAGzB,uBAAiB,QAAQ,KAAK,UAAU,QAAQ,KAAK;AAAA,IACtD,CAAC,CAAC;AAEF,WAAO;AAAA,EACR;AAAA,EAEQ,UAAU,QAA6D,OAA0B,YAA0D;AAClK,UAAM,cAAc,IAAI,gBAAgB;AAGxC,UAAM,SAAS,KAAK;AACpB,QAAI,UAAU,KAAK,yBAAyB,MAAM,GAAG;AACpD,YAAM,UAAyC,EAAE,OAAO;AAIxD,YAAM,aAAa,cAAc,MAAM;AACvC,UAAI,YAAY;AAMf,YAAI,2BAA2B,OAAO,cAAc,KAAK;AACzD,oBAAY,IAAI,WAAW,0BAA0B,MAAM;AAC1D,qCAA2B,OAAO,cAAc,KAAK;AAAA,QACtD,CAAC,CAAC;AAEF,gBAAQ,mBAAmB,MAAM;AAChC,cAAI,4BAA4B,WAAW,KAAK,yBAAyB;AACxE,mBAAO,iBAAiB,wBAAwB;AAAA,UACjD;AAAA,QACD;AAEA,oBAAY,IAAI,yBAAyB,MAAM,uBAAuB,EAAE,MAAM,QAAQ,mBAAmB,CAAC,CAAC;AAAA,MAC5G;AAGA,kBAAY,IAAI,aAAa,MAAM,KAAK,iBAAiB,MAAM,CAAC,CAAC;AAGjE,kBAAY,IAAI,KAAK,sBAAsB,SAAS,QAAQ,OAAO,UAAU,CAAC;AAAA,IAC/E,OAGK;AACJ,kBAAY,IAAI,KAAK,yBAAyB,QAAQ,KAAK,CAAC;AAAA,IAC7D;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKU,yBAAyB,QAA0B;AAC5D,WAAO;AAAA,EACR;AAAA,EAYU,aAAa,EAAE,OAAO,GAAkC,SAAyG;AAC1K,WAAO,aAAa,QAAQ,OAAO,0BAA0B,IAAI;AACjE,WAAO,oBAAoB,QAAQ,OAAO,WAAW,MAAM;AAC3D,QAAI,CAAC,QAAQ,eAAe;AAC3B,aAAO,MAAM;AAAA,IACd;AACA,UAAM,QAAQ,OAAO,SAAS;AAC9B,QAAI,SAAS,oBAAoB,OAAO;AACvC,aAAO,GAAG,MAAM,eAAe,QAAQ,MAAM,eAAe,CAAC,EAAE;AAAA,IAChE;AAAA,EACD;AAAA,EAEU,SAAS,QAAuD;AACzE,WAAO,aAAa,MAAM,IACzB,OAAO,SAAS,GAAG,WACnB,OAAO,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA,EAsBQ,6BAAgE;AAAA,EAExE,eAAe,QAAiB,OAAqB;AACpD,WAAO,kBAAkB,oBAAkB;AAG1C,YAAM,oBAA8B,CAAC;AACrC,UAAI,KAAK,4BAA4B;AACpC,0BAAkB,KAAK,KAAK,2BAA2B,yBAAyB;AAChF,0BAAkB,KAAK,KAAK,2BAA2B,gBAAgB;AAEvE,aAAK,6BAA6B;AAAA,MACnC;AAGA,YAAM,iBAA0C;AAAA;AAAA,QAG/C;AAAA,UACC;AAAA,UACA,SAAS;AAAA,YACR,aAAa;AAAA,YACb,WAAW;AAAA,YACX,aAAa;AAAA,UACd;AAAA,QACD;AAAA;AAAA,QAGA;AAAA,UACC;AAAA,UACA,SAAS;AAAA,YACR,aAAa;AAAA,YACb,eAAe;AAAA,cACd,OAAO,iBAAiB,2BAA2B;AAAA,cACnD,UAAU,kBAAkB;AAAA,YAC7B;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,CAAC,kBAAkB,yBAAyB,IAAI,eAAe,iBAAiB,mBAAmB,cAAc;AAEvH,WAAK,6BAA6B,EAAE,kBAAkB,0BAA0B;AAAA,IACjF,CAAC;AAAA,EACF;AAAA,EAEA,iBAAiB,QAAuB;AACvC,UAAM,6BAA6B,KAAK;AACxC,QAAI,4BAA4B;AAC/B,aAAO,kBAAkB,oBAAkB;AAC1C,uBAAe,iBAAiB;AAAA,UAC/B,2BAA2B;AAAA,UAC3B,2BAA2B;AAAA,QAC5B,GAAG,CAAC,CAAC;AAAA,MACN,CAAC;AAED,WAAK,6BAA6B;AAAA,IACnC;AAAA,EACD;AAAA;AAGD;",
  "names": []
}
