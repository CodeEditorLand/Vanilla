{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { status } from \"../../../../base/browser/ui/aria/aria.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { createSingleCallFunction } from \"../../../../base/common/functional.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { TextEditorSelectionSource } from \"../../../../platform/editor/common/editor.js\";\nimport type {\n\tIQuickAccessProvider,\n\tIQuickAccessProviderRunOptions,\n} from \"../../../../platform/quickinput/common/quickAccess.js\";\nimport type {\n\tIKeyMods,\n\tIQuickPick,\n\tIQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { themeColorFromId } from \"../../../../platform/theme/common/themeService.js\";\nimport { getCodeEditor, isDiffEditor } from \"../../../browser/editorBrowser.js\";\nimport { overviewRulerRangeHighlight } from \"../../../common/core/editorColorRegistry.js\";\nimport type { IRange } from \"../../../common/core/range.js\";\nimport {\n\ttype IDiffEditor,\n\ttype IEditor,\n\tScrollType,\n} from \"../../../common/editorCommon.js\";\nimport {\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\tOverviewRulerLane,\n} from \"../../../common/model.js\";\n\ninterface IEditorLineDecoration {\n\treadonly rangeHighlightId: string;\n\treadonly overviewRulerDecorationId: string;\n}\n\nexport interface IEditorNavigationQuickAccessOptions {\n\tcanAcceptInBackground?: boolean;\n}\n\nexport interface IQuickAccessTextEditorContext {\n\t/**\n\t * The current active editor.\n\t */\n\treadonly editor: IEditor;\n\n\t/**\n\t * If defined, allows to restore the original view state\n\t * the text editor had before quick access opened.\n\t */\n\trestoreViewState?: () => void;\n}\n\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport abstract class AbstractEditorNavigationQuickAccessProvider\n\timplements IQuickAccessProvider\n{\n\tconstructor(protected options?: IEditorNavigationQuickAccessOptions) {}\n\n\t//#region Provider methods\n\n\tprovide(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\ttoken: CancellationToken,\n\t\trunOptions?: IQuickAccessProviderRunOptions,\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel =\n\t\t\tpicker.matchOnDescription =\n\t\t\tpicker.matchOnDetail =\n\t\t\tpicker.sortByLabel =\n\t\t\t\tfalse;\n\n\t\t// Provide based on current active editor\n\t\tconst pickerDisposable = disposables.add(new MutableDisposable());\n\t\tpickerDisposable.value = this.doProvide(picker, token, runOptions);\n\n\t\t// Re-create whenever the active editor changes\n\t\tdisposables.add(\n\t\t\tthis.onDidActiveTextEditorControlChange(() => {\n\t\t\t\t// Clear old\n\t\t\t\tpickerDisposable.value = undefined;\n\n\t\t\t\t// Add new\n\t\t\t\tpickerDisposable.value = this.doProvide(picker, token);\n\t\t\t}),\n\t\t);\n\n\t\treturn disposables;\n\t}\n\n\tprivate doProvide(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\ttoken: CancellationToken,\n\t\trunOptions?: IQuickAccessProviderRunOptions,\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// With text control\n\t\tconst editor = this.activeTextEditorControl;\n\t\tif (editor && this.canProvideWithTextEditor(editor)) {\n\t\t\tconst context: IQuickAccessTextEditorContext = { editor };\n\n\t\t\t// Restore any view state if this picker was closed\n\t\t\t// without actually going to a line\n\t\t\tconst codeEditor = getCodeEditor(editor);\n\t\t\tif (codeEditor) {\n\t\t\t\t// Remember view state and update it when the cursor position\n\t\t\t\t// changes even later because it could be that the user has\n\t\t\t\t// configured quick access to remain open when focus is lost and\n\t\t\t\t// we always want to restore the current location.\n\t\t\t\tlet lastKnownEditorViewState =\n\t\t\t\t\teditor.saveViewState() ?? undefined;\n\t\t\t\tdisposables.add(\n\t\t\t\t\tcodeEditor.onDidChangeCursorPosition(() => {\n\t\t\t\t\t\tlastKnownEditorViewState =\n\t\t\t\t\t\t\teditor.saveViewState() ?? undefined;\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tcontext.restoreViewState = () => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastKnownEditorViewState &&\n\t\t\t\t\t\teditor === this.activeTextEditorControl\n\t\t\t\t\t) {\n\t\t\t\t\t\teditor.restoreViewState(lastKnownEditorViewState);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tdisposables.add(\n\t\t\t\t\tcreateSingleCallFunction(token.onCancellationRequested)(\n\t\t\t\t\t\t() => context.restoreViewState?.(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Clean up decorations on dispose\n\t\t\tdisposables.add(toDisposable(() => this.clearDecorations(editor)));\n\n\t\t\t// Ask subclass for entries\n\t\t\tdisposables.add(\n\t\t\t\tthis.provideWithTextEditor(context, picker, token, runOptions),\n\t\t\t);\n\t\t}\n\n\t\t// Without text control\n\t\telse {\n\t\t\tdisposables.add(this.provideWithoutTextEditor(picker, token));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Subclasses to implement if they can operate on the text editor.\n\t */\n\tprotected canProvideWithTextEditor(editor: IEditor): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when an editor is active.\n\t */\n\tprotected abstract provideWithTextEditor(\n\t\tcontext: IQuickAccessTextEditorContext,\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\ttoken: CancellationToken,\n\t\trunOptions?: IQuickAccessProviderRunOptions,\n\t): IDisposable;\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when no editor is active.\n\t */\n\tprotected abstract provideWithoutTextEditor(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\ttoken: CancellationToken,\n\t): IDisposable;\n\n\tprotected gotoLocation(\n\t\t{ editor }: IQuickAccessTextEditorContext,\n\t\toptions: {\n\t\t\trange: IRange;\n\t\t\tkeyMods: IKeyMods;\n\t\t\tforceSideBySide?: boolean;\n\t\t\tpreserveFocus?: boolean;\n\t\t},\n\t): void {\n\t\teditor.setSelection(options.range, TextEditorSelectionSource.JUMP);\n\t\teditor.revealRangeInCenter(options.range, ScrollType.Smooth);\n\t\tif (!options.preserveFocus) {\n\t\t\teditor.focus();\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tif (model && \"getLineContent\" in model) {\n\t\t\tstatus(`${model.getLineContent(options.range.startLineNumber)}`);\n\t\t}\n\t}\n\n\tprotected getModel(editor: IEditor | IDiffEditor): ITextModel | undefined {\n\t\treturn isDiffEditor(editor)\n\t\t\t? editor.getModel()?.modified\n\t\t\t: (editor.getModel() as ITextModel);\n\t}\n\n\t//#endregion\n\n\t//#region Editor access\n\n\t/**\n\t * Subclasses to provide an event when the active editor control changes.\n\t */\n\tprotected abstract readonly onDidActiveTextEditorControlChange: Event<void>;\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\t//#endregion\n\n\t//#region Decorations Utils\n\n\tprivate rangeHighlightDecorationId: IEditorLineDecoration | undefined =\n\t\tundefined;\n\n\taddDecorations(editor: IEditor, range: IRange): void {\n\t\teditor.changeDecorations((changeAccessor) => {\n\t\t\t// Reset old decorations if any\n\t\t\tconst deleteDecorations: string[] = [];\n\t\t\tif (this.rangeHighlightDecorationId) {\n\t\t\t\tdeleteDecorations.push(\n\t\t\t\t\tthis.rangeHighlightDecorationId.overviewRulerDecorationId,\n\t\t\t\t);\n\t\t\t\tdeleteDecorations.push(\n\t\t\t\t\tthis.rangeHighlightDecorationId.rangeHighlightId,\n\t\t\t\t);\n\n\t\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t\t}\n\n\t\t\t// Add new decorations for the range\n\t\t\tconst newDecorations: IModelDeltaDecoration[] = [\n\t\t\t\t// highlight the entire line on the range\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: \"quick-access-range-highlight\",\n\t\t\t\t\t\tclassName: \"rangeHighlight\",\n\t\t\t\t\t\tisWholeLine: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\t// also add overview ruler highlight\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: \"quick-access-range-highlight-overview\",\n\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\tcolor: themeColorFromId(\n\t\t\t\t\t\t\t\toverviewRulerRangeHighlight,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tposition: OverviewRulerLane.Full,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tconst [rangeHighlightId, overviewRulerDecorationId] =\n\t\t\t\tchangeAccessor.deltaDecorations(\n\t\t\t\t\tdeleteDecorations,\n\t\t\t\t\tnewDecorations,\n\t\t\t\t);\n\n\t\t\tthis.rangeHighlightDecorationId = {\n\t\t\t\trangeHighlightId,\n\t\t\t\toverviewRulerDecorationId,\n\t\t\t};\n\t\t});\n\t}\n\n\tclearDecorations(editor: IEditor): void {\n\t\tconst rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\t\tif (rangeHighlightDecorationId) {\n\t\t\teditor.changeDecorations((changeAccessor) => {\n\t\t\t\tchangeAccessor.deltaDecorations(\n\t\t\t\t\t[\n\t\t\t\t\t\trangeHighlightDecorationId.overviewRulerDecorationId,\n\t\t\t\t\t\trangeHighlightDecorationId.rangeHighlightId,\n\t\t\t\t\t],\n\t\t\t\t\t[],\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t}\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
