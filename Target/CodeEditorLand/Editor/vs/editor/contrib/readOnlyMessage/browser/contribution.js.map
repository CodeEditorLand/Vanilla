{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/readOnlyMessage/browser/contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport * as nls from '../../../../nls.js';\n\nexport class ReadOnlyMessageController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.readOnlyMessageController';\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor\n\t) {\n\t\tsuper();\n\t\tthis._register(this.editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));\n\t}\n\n\tprivate _onDidAttemptReadOnlyEdit(): void {\n\t\tconst messageController = MessageController.get(this.editor);\n\t\tif (messageController && this.editor.hasModel()) {\n\t\t\tlet message = this.editor.getOptions().get(EditorOption.readOnlyMessage);\n\t\t\tif (!message) {\n\t\t\t\tif (this.editor.isSimpleWidget) {\n\t\t\t\t\tmessage = new MarkdownString(nls.localize('editor.simple.readonly', \"Cannot edit in read-only input\"));\n\t\t\t\t} else {\n\t\t\t\t\tmessage = new MarkdownString(nls.localize('editor.readonly', \"Cannot edit in read-only editor\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmessageController.showMessage(message, this.editor.getPosition());\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ReadOnlyMessageController.ID, ReadOnlyMessageController, EditorContributionInstantiation.BeforeFirstInteraction);\n"],
  "mappings": ";;AAKA,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,iCAAiC,kCAAkC;AAC5E,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AACpC,SAAS,yBAAyB;AAClC,YAAY,SAAS;AAEd,MAAM,kCAAkC,WAA0C;AAAA,EAIxF,YACkB,QAChB;AACD,UAAM;AAFW;AAGjB,SAAK,UAAU,KAAK,OAAO,yBAAyB,MAAM,KAAK,0BAA0B,CAAC,CAAC;AAAA,EAC5F;AAAA,EAvBD,OAcyF;AAAA;AAAA;AAAA,EAExF,OAAuB,KAAK;AAAA,EASpB,4BAAkC;AACzC,UAAM,oBAAoB,kBAAkB,IAAI,KAAK,MAAM;AAC3D,QAAI,qBAAqB,KAAK,OAAO,SAAS,GAAG;AAChD,UAAI,UAAU,KAAK,OAAO,WAAW,EAAE,IAAI,aAAa,eAAe;AACvE,UAAI,CAAC,SAAS;AACb,YAAI,KAAK,OAAO,gBAAgB;AAC/B,oBAAU,IAAI,eAAe,IAAI,SAAS,0BAA0B,gCAAgC,CAAC;AAAA,QACtG,OAAO;AACN,oBAAU,IAAI,eAAe,IAAI,SAAS,mBAAmB,iCAAiC,CAAC;AAAA,QAChG;AAAA,MACD;AAEA,wBAAkB,YAAY,SAAS,KAAK,OAAO,YAAY,CAAC;AAAA,IACjE;AAAA,EACD;AACD;AAEA,2BAA2B,0BAA0B,IAAI,2BAA2B,gCAAgC,sBAAsB;",
  "names": []
}
