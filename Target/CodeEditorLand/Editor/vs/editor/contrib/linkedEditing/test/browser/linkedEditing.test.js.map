{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/linkedEditing/test/browser/linkedEditing.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { CoreEditingCommands } from '../../../../browser/coreCommands.js';\nimport { IPosition, Position } from '../../../../common/core/position.js';\nimport { IRange, Range } from '../../../../common/core/range.js';\nimport { USUAL_WORD_SEPARATORS } from '../../../../common/core/wordHelper.js';\nimport { Handler } from '../../../../common/editorCommon.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../../common/services/languageFeatures.js';\nimport { DeleteAllLeftAction } from '../../../linesOperations/browser/linesOperations.js';\nimport { LinkedEditingContribution } from '../../browser/linkedEditing.js';\nimport { DeleteWordLeft } from '../../../wordOperations/browser/wordOperations.js';\nimport { ITestCodeEditor, createCodeEditorServices, instantiateTestCodeEditor } from '../../../../test/browser/testCodeEditor.js';\nimport { instantiateTextModel } from '../../../../test/common/testTextModel.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\n\nconst mockFile = URI.parse('test:somefile.ttt');\nconst mockFileSelector = { scheme: 'test' };\nconst timeout = 30;\n\ninterface TestEditor {\n\tsetPosition(pos: Position): Promise<any>;\n\tsetSelection(sel: IRange): Promise<any>;\n\ttrigger(source: string | null | undefined, handlerId: string, payload: any): Promise<any>;\n\tundo(): void;\n\tredo(): void;\n}\n\nconst languageId = 'linkedEditingTestLangage';\n\nsuite('linked editing', () => {\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet languageFeaturesService: ILanguageFeaturesService;\n\tlet languageConfigurationService: ILanguageConfigurationService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = createCodeEditorServices(disposables);\n\t\tlanguageFeaturesService = instantiationService.get(ILanguageFeaturesService);\n\t\tlanguageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\n\t\tdisposables.add(languageConfigurationService.register(languageId, {\n\t\t\twordPattern: /[a-zA-Z]+/\n\t\t}));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createMockEditor(text: string | string[]): ITestCodeEditor {\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, typeof text === 'string' ? text : text.join('\\n'), languageId, undefined, mockFile));\n\t\tconst editor = disposables.add(instantiateTestCodeEditor(instantiationService, model));\n\t\treturn editor;\n\t}\n\n\tfunction testCase(\n\t\tname: string,\n\t\tinitialState: { text: string | string[]; responseWordPattern?: RegExp },\n\t\toperations: (editor: TestEditor) => Promise<void>,\n\t\texpectedEndText: string | string[]\n\t) {\n\t\ttest(name, async () => {\n\t\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\t\tdisposables.add(languageFeaturesService.linkedEditingRangeProvider.register(mockFileSelector, {\n\t\t\t\t\tprovideLinkedEditingRanges(model: ITextModel, pos: IPosition) {\n\t\t\t\t\t\tconst wordAtPos = model.getWordAtPosition(pos);\n\t\t\t\t\t\tif (wordAtPos) {\n\t\t\t\t\t\t\tconst matches = model.findMatches(wordAtPos.word, false, false, true, USUAL_WORD_SEPARATORS, false);\n\t\t\t\t\t\t\treturn { ranges: matches.map(m => m.range), wordPattern: initialState.responseWordPattern };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { ranges: [], wordPattern: initialState.responseWordPattern };\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\tconst editor = createMockEditor(initialState.text);\n\t\t\t\teditor.updateOptions({ linkedEditing: true });\n\t\t\t\tconst linkedEditingContribution = disposables.add(editor.registerAndInstantiateContribution(\n\t\t\t\t\tLinkedEditingContribution.ID,\n\t\t\t\t\tLinkedEditingContribution,\n\t\t\t\t));\n\t\t\t\tlinkedEditingContribution.setDebounceDuration(0);\n\n\t\t\t\tconst testEditor: TestEditor = {\n\t\t\t\t\tsetPosition(pos: Position) {\n\t\t\t\t\t\teditor.setPosition(pos);\n\t\t\t\t\t\treturn linkedEditingContribution.currentUpdateTriggerPromise;\n\t\t\t\t\t},\n\t\t\t\t\tsetSelection(sel: IRange) {\n\t\t\t\t\t\teditor.setSelection(sel);\n\t\t\t\t\t\treturn linkedEditingContribution.currentUpdateTriggerPromise;\n\t\t\t\t\t},\n\t\t\t\t\ttrigger(source: string | null | undefined, handlerId: string, payload: any) {\n\t\t\t\t\t\tif (handlerId === Handler.Type || handlerId === Handler.Paste) {\n\t\t\t\t\t\t\teditor.trigger(source, handlerId, payload);\n\t\t\t\t\t\t} else if (handlerId === 'deleteLeft') {\n\t\t\t\t\t\t\tCoreEditingCommands.DeleteLeft.runEditorCommand(null, editor, payload);\n\t\t\t\t\t\t} else if (handlerId === 'deleteWordLeft') {\n\t\t\t\t\t\t\tinstantiationService.invokeFunction((accessor) => (new DeleteWordLeft()).runEditorCommand(accessor, editor, payload));\n\t\t\t\t\t\t} else if (handlerId === 'deleteAllLeft') {\n\t\t\t\t\t\t\tinstantiationService.invokeFunction((accessor) => (new DeleteAllLeftAction()).runEditorCommand(accessor, editor, payload));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`Unknown handler ${handlerId}!`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn linkedEditingContribution.currentSyncTriggerPromise;\n\t\t\t\t\t},\n\t\t\t\t\tundo() {\n\t\t\t\t\t\tCoreEditingCommands.Undo.runEditorCommand(null, editor, null);\n\t\t\t\t\t},\n\t\t\t\t\tredo() {\n\t\t\t\t\t\tCoreEditingCommands.Redo.runEditorCommand(null, editor, null);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tawait operations(testEditor);\n\n\t\t\t\treturn new Promise<void>((resolve) => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (typeof expectedEndText === 'string') {\n\t\t\t\t\t\t\tassert.strictEqual(editor.getModel()!.getValue(), expectedEndText);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassert.strictEqual(editor.getModel()!.getValue(), expectedEndText.join('\\n'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}, timeout);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tconst state = {\n\t\ttext: '<ooo></ooo>'\n\t};\n\n\t/**\n\t * Simple insertion\n\t */\n\ttestCase('Simple insert - initial', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<iooo></iooo>');\n\n\ttestCase('Simple insert - middle', state, async (editor) => {\n\t\tconst pos = new Position(1, 3);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<oioo></oioo>');\n\n\ttestCase('Simple insert - end', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<oooi></oooi>');\n\n\t/**\n\t * Simple insertion - end\n\t */\n\ttestCase('Simple insert end - initial', state, async (editor) => {\n\t\tconst pos = new Position(1, 8);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<iooo></iooo>');\n\n\ttestCase('Simple insert end - middle', state, async (editor) => {\n\t\tconst pos = new Position(1, 9);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<oioo></oioo>');\n\n\ttestCase('Simple insert end - end', state, async (editor) => {\n\t\tconst pos = new Position(1, 11);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<oooi></oooi>');\n\n\t/**\n\t * Boundary insertion\n\t */\n\ttestCase('Simple insert - out of boundary', state, async (editor) => {\n\t\tconst pos = new Position(1, 1);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, 'i<ooo></ooo>');\n\n\ttestCase('Simple insert - out of boundary 2', state, async (editor) => {\n\t\tconst pos = new Position(1, 6);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<ooo>i</ooo>');\n\n\ttestCase('Simple insert - out of boundary 3', state, async (editor) => {\n\t\tconst pos = new Position(1, 7);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<ooo><i/ooo>');\n\n\ttestCase('Simple insert - out of boundary 4', state, async (editor) => {\n\t\tconst pos = new Position(1, 12);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<ooo></ooo>i');\n\n\t/**\n\t * Insert + Move\n\t */\n\ttestCase('Continuous insert', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<iiooo></iiooo>');\n\n\ttestCase('Insert - move - insert', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t\tawait editor.setPosition(new Position(1, 4));\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<ioioo></ioioo>');\n\n\ttestCase('Insert - move - insert outside region', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t\tawait editor.setPosition(new Position(1, 7));\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<iooo>i</iooo>');\n\n\t/**\n\t * Selection insert\n\t */\n\ttestCase('Selection insert - simple', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.setSelection(new Range(1, 2, 1, 3));\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<ioo></ioo>');\n\n\ttestCase('Selection insert - whole', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.setSelection(new Range(1, 2, 1, 5));\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<i></i>');\n\n\ttestCase('Selection insert - across boundary', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.setSelection(new Range(1, 1, 1, 3));\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, 'ioo></oo>');\n\n\t/**\n\t * @todo\n\t * Undefined behavior\n\t */\n\t// testCase('Selection insert - across two boundary', state, async (editor) => {\n\t// \tconst pos = new Position(1, 2);\n\t// \tawait editor.setPosition(pos);\n\t// \tawait linkedEditingContribution.updateLinkedUI(pos);\n\t// \tawait editor.setSelection(new Range(1, 4, 1, 9));\n\t// \tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t// }, '<ooioo>');\n\n\t/**\n\t * Break out behavior\n\t */\n\ttestCase('Breakout - type space', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: ' ' });\n\t}, '<ooo ></ooo>');\n\n\ttestCase('Breakout - type space then undo', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: ' ' });\n\t\teditor.undo();\n\t}, '<ooo></ooo>');\n\n\ttestCase('Breakout - type space in middle', state, async (editor) => {\n\t\tconst pos = new Position(1, 4);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: ' ' });\n\t}, '<oo o></ooo>');\n\n\ttestCase('Breakout - paste content starting with space', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Paste, { text: ' i=\"i\"' });\n\t}, '<ooo i=\"i\"></ooo>');\n\n\ttestCase('Breakout - paste content starting with space then undo', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Paste, { text: ' i=\"i\"' });\n\t\teditor.undo();\n\t}, '<ooo></ooo>');\n\n\ttestCase('Breakout - paste content starting with space in middle', state, async (editor) => {\n\t\tconst pos = new Position(1, 4);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Paste, { text: ' i' });\n\t}, '<oo io></ooo>');\n\n\t/**\n\t * Break out with custom provider wordPattern\n\t */\n\n\tconst state3 = {\n\t\t...state,\n\t\tresponseWordPattern: /[a-yA-Y]+/\n\t};\n\n\ttestCase('Breakout with stop pattern - insert', state3, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<iooo></iooo>');\n\n\ttestCase('Breakout with stop pattern - insert stop char', state3, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'z' });\n\t}, '<zooo></ooo>');\n\n\ttestCase('Breakout with stop pattern - paste char', state3, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Paste, { text: 'z' });\n\t}, '<zooo></ooo>');\n\n\ttestCase('Breakout with stop pattern - paste string', state3, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Paste, { text: 'zo' });\n\t}, '<zoooo></ooo>');\n\n\ttestCase('Breakout with stop pattern - insert at end', state3, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'z' });\n\t}, '<oooz></ooo>');\n\n\tconst state4 = {\n\t\t...state,\n\t\tresponseWordPattern: /[a-eA-E]+/\n\t};\n\n\ttestCase('Breakout with stop pattern - insert stop char, respos', state4, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, '<iooo></ooo>');\n\n\t/**\n\t * Delete\n\t */\n\ttestCase('Delete - left char', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', 'deleteLeft', {});\n\t}, '<oo></oo>');\n\n\ttestCase('Delete - left char then undo', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', 'deleteLeft', {});\n\t\teditor.undo();\n\t}, '<ooo></ooo>');\n\n\ttestCase('Delete - left word', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', 'deleteWordLeft', {});\n\t}, '<></>');\n\n\ttestCase('Delete - left word then undo', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', 'deleteWordLeft', {});\n\t\teditor.undo();\n\t\teditor.undo();\n\t}, '<ooo></ooo>');\n\n\t/**\n\t * Todo: Fix test\n\t */\n\t// testCase('Delete - left all', state, async (editor) => {\n\t// \tconst pos = new Position(1, 3);\n\t// \tawait editor.setPosition(pos);\n\t// \tawait linkedEditingContribution.updateLinkedUI(pos);\n\t// \tawait editor.trigger('keyboard', 'deleteAllLeft', {});\n\t// }, '></>');\n\n\t/**\n\t * Todo: Fix test\n\t */\n\t// testCase('Delete - left all then undo', state, async (editor) => {\n\t// \tconst pos = new Position(1, 5);\n\t// \tawait editor.setPosition(pos);\n\t// \tawait linkedEditingContribution.updateLinkedUI(pos);\n\t// \tawait editor.trigger('keyboard', 'deleteAllLeft', {});\n\t// \teditor.undo();\n\t// }, '></ooo>');\n\n\ttestCase('Delete - left all then undo twice', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', 'deleteAllLeft', {});\n\t\teditor.undo();\n\t\teditor.undo();\n\t}, '<ooo></ooo>');\n\n\ttestCase('Delete - selection', state, async (editor) => {\n\t\tconst pos = new Position(1, 5);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.setSelection(new Range(1, 2, 1, 3));\n\t\tawait editor.trigger('keyboard', 'deleteLeft', {});\n\t}, '<oo></oo>');\n\n\ttestCase('Delete - selection across boundary', state, async (editor) => {\n\t\tconst pos = new Position(1, 3);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.setSelection(new Range(1, 1, 1, 3));\n\t\tawait editor.trigger('keyboard', 'deleteLeft', {});\n\t}, 'oo></oo>');\n\n\t/**\n\t * Undo / redo\n\t */\n\ttestCase('Undo/redo - simple undo', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t\teditor.undo();\n\t\teditor.undo();\n\t}, '<ooo></ooo>');\n\n\ttestCase('Undo/redo - simple undo/redo', state, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t\teditor.undo();\n\t\teditor.redo();\n\t}, '<iooo></iooo>');\n\n\t/**\n\t * Multi line\n\t */\n\tconst state2 = {\n\t\ttext: [\n\t\t\t'<ooo>',\n\t\t\t'</ooo>'\n\t\t]\n\t};\n\n\ttestCase('Multiline insert', state2, async (editor) => {\n\t\tconst pos = new Position(1, 2);\n\t\tawait editor.setPosition(pos);\n\t\tawait editor.trigger('keyboard', Handler.Type, { text: 'i' });\n\t}, [\n\t\t'<iooo>',\n\t\t'</iooo>'\n\t]);\n});\n"],
  "mappings": "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",
  "names": []
}
