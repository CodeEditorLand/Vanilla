import T from"assert";import{DisposableStore as v}from"../../../../../base/common/lifecycle.js";import{URI as C}from"../../../../../base/common/uri.js";import{runWithFakedTimers as D}from"../../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as I}from"../../../../../base/test/common/utils.js";import{CoreEditingCommands as P}from"../../../../browser/coreCommands.js";import{Position as e}from"../../../../common/core/position.js";import{Range as y}from"../../../../common/core/range.js";import{USUAL_WORD_SEPARATORS as A}from"../../../../common/core/wordHelper.js";import{Handler as n}from"../../../../common/editorCommon.js";import{ILanguageConfigurationService as B}from"../../../../common/languages/languageConfigurationRegistry.js";import"../../../../common/model.js";import{ILanguageFeaturesService as R}from"../../../../common/services/languageFeatures.js";import{DeleteAllLeftAction as W}from"../../../linesOperations/browser/linesOperations.js";import{LinkedEditingContribution as S}from"../../browser/linkedEditing.js";import{DeleteWordLeft as z}from"../../../wordOperations/browser/wordOperations.js";import{createCodeEditorServices as U,instantiateTestCodeEditor as F}from"../../../../test/browser/testCodeEditor.js";import{instantiateTextModel as M}from"../../../../test/common/testTextModel.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";const O=C.parse("test:somefile.ttt"),j={scheme:"test"},q=30,x="linkedEditingTestLangage";suite("linked editing",()=>{let w,c,k,f;setup(()=>{w=new v,c=U(w),k=c.get(R),f=c.get(B),w.add(f.register(x,{wordPattern:/[a-zA-Z]+/}))}),teardown(()=>{w.dispose()}),I();function E(t){const o=w.add(M(c,typeof t=="string"?t:t.join(`
`),x,void 0,O));return w.add(F(c,o))}function i(t,o,b,m){test(t,async()=>{await D({},async()=>{w.add(k.linkedEditingRangeProvider.register(j,{provideLinkedEditingRanges(r,g){const p=r.getWordAtPosition(g);return p?{ranges:r.findMatches(p.word,!1,!1,!0,A,!1).map(L=>L.range),wordPattern:o.responseWordPattern}:{ranges:[],wordPattern:o.responseWordPattern}}}));const a=E(o.text);a.updateOptions({linkedEditing:!0});const l=w.add(a.registerAndInstantiateContribution(S.ID,S));return l.setDebounceDuration(0),await b({setPosition(r){return a.setPosition(r),l.currentUpdateTriggerPromise},setSelection(r){return a.setSelection(r),l.currentUpdateTriggerPromise},trigger(r,g,p){if(g===n.Type||g===n.Paste)a.trigger(r,g,p);else if(g==="deleteLeft")P.DeleteLeft.runEditorCommand(null,a,p);else if(g==="deleteWordLeft")c.invokeFunction(u=>new z().runEditorCommand(u,a,p));else if(g==="deleteAllLeft")c.invokeFunction(u=>new W().runEditorCommand(u,a,p));else throw new Error(`Unknown handler ${g}!`);return l.currentSyncTriggerPromise},undo(){P.Undo.runEditorCommand(null,a,null)},redo(){P.Redo.runEditorCommand(null,a,null)}}),new Promise(r=>{setTimeout(()=>{typeof m=="string"?T.strictEqual(a.getModel().getValue(),m):T.strictEqual(a.getModel().getValue(),m.join(`
`)),r()},q)})})})}const s={text:"<ooo></ooo>"};i("Simple insert - initial",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<iooo></iooo>"),i("Simple insert - middle",s,async t=>{const o=new e(1,3);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<oioo></oioo>"),i("Simple insert - end",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<oooi></oooi>"),i("Simple insert end - initial",s,async t=>{const o=new e(1,8);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<iooo></iooo>"),i("Simple insert end - middle",s,async t=>{const o=new e(1,9);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<oioo></oioo>"),i("Simple insert end - end",s,async t=>{const o=new e(1,11);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<oooi></oooi>"),i("Simple insert - out of boundary",s,async t=>{const o=new e(1,1);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"i<ooo></ooo>"),i("Simple insert - out of boundary 2",s,async t=>{const o=new e(1,6);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<ooo>i</ooo>"),i("Simple insert - out of boundary 3",s,async t=>{const o=new e(1,7);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<ooo><i/ooo>"),i("Simple insert - out of boundary 4",s,async t=>{const o=new e(1,12);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<ooo></ooo>i"),i("Continuous insert",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"}),await t.trigger("keyboard",n.Type,{text:"i"})},"<iiooo></iiooo>"),i("Insert - move - insert",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"}),await t.setPosition(new e(1,4)),await t.trigger("keyboard",n.Type,{text:"i"})},"<ioioo></ioioo>"),i("Insert - move - insert outside region",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"}),await t.setPosition(new e(1,7)),await t.trigger("keyboard",n.Type,{text:"i"})},"<iooo>i</iooo>"),i("Selection insert - simple",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.setSelection(new y(1,2,1,3)),await t.trigger("keyboard",n.Type,{text:"i"})},"<ioo></ioo>"),i("Selection insert - whole",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.setSelection(new y(1,2,1,5)),await t.trigger("keyboard",n.Type,{text:"i"})},"<i></i>"),i("Selection insert - across boundary",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.setSelection(new y(1,1,1,3)),await t.trigger("keyboard",n.Type,{text:"i"})},"ioo></oo>"),i("Breakout - type space",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:" "})},"<ooo ></ooo>"),i("Breakout - type space then undo",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:" "}),t.undo()},"<ooo></ooo>"),i("Breakout - type space in middle",s,async t=>{const o=new e(1,4);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:" "})},"<oo o></ooo>"),i("Breakout - paste content starting with space",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard",n.Paste,{text:' i="i"'})},'<ooo i="i"></ooo>'),i("Breakout - paste content starting with space then undo",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard",n.Paste,{text:' i="i"'}),t.undo()},"<ooo></ooo>"),i("Breakout - paste content starting with space in middle",s,async t=>{const o=new e(1,4);await t.setPosition(o),await t.trigger("keyboard",n.Paste,{text:" i"})},"<oo io></ooo>");const d={...s,responseWordPattern:/[a-yA-Y]+/};i("Breakout with stop pattern - insert",d,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<iooo></iooo>"),i("Breakout with stop pattern - insert stop char",d,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"z"})},"<zooo></ooo>"),i("Breakout with stop pattern - paste char",d,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Paste,{text:"z"})},"<zooo></ooo>"),i("Breakout with stop pattern - paste string",d,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Paste,{text:"zo"})},"<zoooo></ooo>"),i("Breakout with stop pattern - insert at end",d,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"z"})},"<oooz></ooo>");const h={...s,responseWordPattern:/[a-eA-E]+/};i("Breakout with stop pattern - insert stop char, respos",h,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},"<iooo></ooo>"),i("Delete - left char",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard","deleteLeft",{})},"<oo></oo>"),i("Delete - left char then undo",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard","deleteLeft",{}),t.undo()},"<ooo></ooo>"),i("Delete - left word",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard","deleteWordLeft",{})},"<></>"),i("Delete - left word then undo",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard","deleteWordLeft",{}),t.undo(),t.undo()},"<ooo></ooo>"),i("Delete - left all then undo twice",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.trigger("keyboard","deleteAllLeft",{}),t.undo(),t.undo()},"<ooo></ooo>"),i("Delete - selection",s,async t=>{const o=new e(1,5);await t.setPosition(o),await t.setSelection(new y(1,2,1,3)),await t.trigger("keyboard","deleteLeft",{})},"<oo></oo>"),i("Delete - selection across boundary",s,async t=>{const o=new e(1,3);await t.setPosition(o),await t.setSelection(new y(1,1,1,3)),await t.trigger("keyboard","deleteLeft",{})},"oo></oo>"),i("Undo/redo - simple undo",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"}),t.undo(),t.undo()},"<ooo></ooo>"),i("Undo/redo - simple undo/redo",s,async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"}),t.undo(),t.redo()},"<iooo></iooo>"),i("Multiline insert",{text:["<ooo>","</ooo>"]},async t=>{const o=new e(1,2);await t.setPosition(o),await t.trigger("keyboard",n.Type,{text:"i"})},["<iooo>","</iooo>"])});
