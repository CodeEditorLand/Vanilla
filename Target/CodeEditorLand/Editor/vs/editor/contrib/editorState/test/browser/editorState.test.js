import i from"assert";import{URI as l}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as m}from"../../../../../base/test/common/utils.js";import"../../../../browser/editorBrowser.js";import{Position as a}from"../../../../common/core/position.js";import{Selection as f}from"../../../../common/core/selection.js";import"../../../../common/model.js";import{CodeEditorStateFlag as r,EditorState as p}from"../../browser/editorState.js";suite("Editor Core - Editor State",()=>{m();const c=r.Value|r.Selection|r.Position|r.Scroll;test("empty editor state should be valid",()=>{const t=e({},{});i.strictEqual(t,!0)}),test("different model URIs should be invalid",()=>{const t=e({model:{uri:l.parse("http://test1")}},{model:{uri:l.parse("http://test2")}});i.strictEqual(t,!1)}),test("different model versions should be invalid",()=>{const t=e({model:{version:1}},{model:{version:2}});i.strictEqual(t,!1)}),test("different positions should be invalid",()=>{const t=e({position:new a(1,2)},{position:new a(2,3)});i.strictEqual(t,!1)}),test("different selections should be invalid",()=>{const t=e({selection:new f(1,2,3,4)},{selection:new f(5,2,3,4)});i.strictEqual(t,!1)}),test("different scroll positions should be invalid",()=>{const t=e({scroll:{left:1,top:2}},{scroll:{left:3,top:2}});i.strictEqual(t,!1)});function e(t,s){const n=d(t),o=d(s);return new p(n,c).validate(o)}function d({model:t,position:s,selection:n,scroll:o}={}){const u=t?{uri:t.uri?t.uri:l.parse("http://dummy.org"),getVersionId:()=>t.version}:null;return{getModel:()=>u,getPosition:()=>s,getSelection:()=>n,getScrollLeft:()=>o&&o.left,getScrollTop:()=>o&&o.top}}});
