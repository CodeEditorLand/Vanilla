{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/find/test/browser/replacePattern.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { buildReplaceStringWithCasePreserved } from '../../../../../base/common/search.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { parseReplaceString, ReplacePattern, ReplacePiece } from '../../browser/replacePattern.js';\n\nsuite('Replace Pattern test', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('parse replace string', () => {\n\t\tconst testParse = (input: string, expectedPieces: ReplacePiece[]) => {\n\t\t\tconst actual = parseReplaceString(input);\n\t\t\tconst expected = new ReplacePattern(expectedPieces);\n\t\t\tassert.deepStrictEqual(actual, expected, 'Parsing ' + input);\n\t\t};\n\n\t\t// no backslash => no treatment\n\t\ttestParse('hello', [ReplacePiece.staticValue('hello')]);\n\n\t\t// \\t => TAB\n\t\ttestParse('\\\\thello', [ReplacePiece.staticValue('\\thello')]);\n\t\ttestParse('h\\\\tello', [ReplacePiece.staticValue('h\\tello')]);\n\t\ttestParse('hello\\\\t', [ReplacePiece.staticValue('hello\\t')]);\n\n\t\t// \\n => LF\n\t\ttestParse('\\\\nhello', [ReplacePiece.staticValue('\\nhello')]);\n\n\t\t// \\\\t => \\t\n\t\ttestParse('\\\\\\\\thello', [ReplacePiece.staticValue('\\\\thello')]);\n\t\ttestParse('h\\\\\\\\tello', [ReplacePiece.staticValue('h\\\\tello')]);\n\t\ttestParse('hello\\\\\\\\t', [ReplacePiece.staticValue('hello\\\\t')]);\n\n\t\t// \\\\\\t => \\TAB\n\t\ttestParse('\\\\\\\\\\\\thello', [ReplacePiece.staticValue('\\\\\\thello')]);\n\n\t\t// \\\\\\\\t => \\\\t\n\t\ttestParse('\\\\\\\\\\\\\\\\thello', [ReplacePiece.staticValue('\\\\\\\\thello')]);\n\n\t\t// \\ at the end => no treatment\n\t\ttestParse('hello\\\\', [ReplacePiece.staticValue('hello\\\\')]);\n\n\t\t// \\ with unknown char => no treatment\n\t\ttestParse('hello\\\\x', [ReplacePiece.staticValue('hello\\\\x')]);\n\n\t\t// \\ with back reference => no treatment\n\t\ttestParse('hello\\\\0', [ReplacePiece.staticValue('hello\\\\0')]);\n\n\t\ttestParse('hello$&', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(0)]);\n\t\ttestParse('hello$0', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(0)]);\n\t\ttestParse('hello$02', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(0), ReplacePiece.staticValue('2')]);\n\t\ttestParse('hello$1', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(1)]);\n\t\ttestParse('hello$2', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(2)]);\n\t\ttestParse('hello$9', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(9)]);\n\t\ttestParse('$9hello', [ReplacePiece.matchIndex(9), ReplacePiece.staticValue('hello')]);\n\n\t\ttestParse('hello$12', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(12)]);\n\t\ttestParse('hello$99', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(99)]);\n\t\ttestParse('hello$99a', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(99), ReplacePiece.staticValue('a')]);\n\t\ttestParse('hello$1a', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(1), ReplacePiece.staticValue('a')]);\n\t\ttestParse('hello$100', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(10), ReplacePiece.staticValue('0')]);\n\t\ttestParse('hello$100a', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(10), ReplacePiece.staticValue('0a')]);\n\t\ttestParse('hello$10a0', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(10), ReplacePiece.staticValue('a0')]);\n\t\ttestParse('hello$$', [ReplacePiece.staticValue('hello$')]);\n\t\ttestParse('hello$$0', [ReplacePiece.staticValue('hello$0')]);\n\n\t\ttestParse('hello$`', [ReplacePiece.staticValue('hello$`')]);\n\t\ttestParse('hello$\\'', [ReplacePiece.staticValue('hello$\\'')]);\n\t});\n\n\ttest('parse replace string with case modifiers', () => {\n\t\tconst testParse = (input: string, expectedPieces: ReplacePiece[]) => {\n\t\t\tconst actual = parseReplaceString(input);\n\t\t\tconst expected = new ReplacePattern(expectedPieces);\n\t\t\tassert.deepStrictEqual(actual, expected, 'Parsing ' + input);\n\t\t};\n\t\tfunction assertReplace(target: string, search: RegExp, replaceString: string, expected: string): void {\n\t\t\tconst replacePattern = parseReplaceString(replaceString);\n\t\t\tconst m = search.exec(target);\n\t\t\tconst actual = replacePattern.buildReplaceString(m);\n\n\t\t\tassert.strictEqual(actual, expected, `${target}.replace(${search}, ${replaceString}) === ${expected}`);\n\t\t}\n\n\t\t// \\U, \\u => uppercase  \\L, \\l => lowercase  \\E => cancel\n\n\t\ttestParse('hello\\\\U$1', [ReplacePiece.staticValue('hello'), ReplacePiece.caseOps(1, ['U'])]);\n\t\tassertReplace('func privateFunc(', /func (\\w+)\\(/, 'func \\\\U$1(', 'func PRIVATEFUNC(');\n\n\t\ttestParse('hello\\\\u$1', [ReplacePiece.staticValue('hello'), ReplacePiece.caseOps(1, ['u'])]);\n\t\tassertReplace('func privateFunc(', /func (\\w+)\\(/, 'func \\\\u$1(', 'func PrivateFunc(');\n\n\t\ttestParse('hello\\\\L$1', [ReplacePiece.staticValue('hello'), ReplacePiece.caseOps(1, ['L'])]);\n\t\tassertReplace('func privateFunc(', /func (\\w+)\\(/, 'func \\\\L$1(', 'func privatefunc(');\n\n\t\ttestParse('hello\\\\l$1', [ReplacePiece.staticValue('hello'), ReplacePiece.caseOps(1, ['l'])]);\n\t\tassertReplace('func PrivateFunc(', /func (\\w+)\\(/, 'func \\\\l$1(', 'func privateFunc(');\n\n\t\ttestParse('hello$1\\\\u\\\\u\\\\U$4goodbye', [ReplacePiece.staticValue('hello'), ReplacePiece.matchIndex(1), ReplacePiece.caseOps(4, ['u', 'u', 'U']), ReplacePiece.staticValue('goodbye')]);\n\t\tassertReplace('hellogooDbye', /hello(\\w+)/, 'hello\\\\u\\\\u\\\\l\\\\l\\\\U$1', 'helloGOodBYE');\n\t});\n\n\ttest('replace has JavaScript semantics', () => {\n\t\tconst testJSReplaceSemantics = (target: string, search: RegExp, replaceString: string, expected: string) => {\n\t\t\tconst replacePattern = parseReplaceString(replaceString);\n\t\t\tconst m = search.exec(target);\n\t\t\tconst actual = replacePattern.buildReplaceString(m);\n\n\t\t\tassert.deepStrictEqual(actual, expected, `${target}.replace(${search}, ${replaceString})`);\n\t\t};\n\n\t\ttestJSReplaceSemantics('hi', /hi/, 'hello', 'hi'.replace(/hi/, 'hello'));\n\t\ttestJSReplaceSemantics('hi', /hi/, '\\\\t', 'hi'.replace(/hi/, '\\t'));\n\t\ttestJSReplaceSemantics('hi', /hi/, '\\\\n', 'hi'.replace(/hi/, '\\n'));\n\t\ttestJSReplaceSemantics('hi', /hi/, '\\\\\\\\t', 'hi'.replace(/hi/, '\\\\t'));\n\t\ttestJSReplaceSemantics('hi', /hi/, '\\\\\\\\n', 'hi'.replace(/hi/, '\\\\n'));\n\n\t\t// implicit capture group 0\n\t\ttestJSReplaceSemantics('hi', /hi/, 'hello$&', 'hi'.replace(/hi/, 'hello$&'));\n\t\ttestJSReplaceSemantics('hi', /hi/, 'hello$0', 'hi'.replace(/hi/, 'hello$&'));\n\t\ttestJSReplaceSemantics('hi', /hi/, 'hello$&1', 'hi'.replace(/hi/, 'hello$&1'));\n\t\ttestJSReplaceSemantics('hi', /hi/, 'hello$01', 'hi'.replace(/hi/, 'hello$&1'));\n\n\t\t// capture groups have funny semantics in replace strings\n\t\t// the replace string interprets $nn as a captured group only if it exists in the search regex\n\t\ttestJSReplaceSemantics('hi', /(hi)/, 'hello$10', 'hi'.replace(/(hi)/, 'hello$10'));\n\t\ttestJSReplaceSemantics('hi', /(hi)()()()()()()()()()/, 'hello$10', 'hi'.replace(/(hi)()()()()()()()()()/, 'hello$10'));\n\t\ttestJSReplaceSemantics('hi', /(hi)/, 'hello$100', 'hi'.replace(/(hi)/, 'hello$100'));\n\t\ttestJSReplaceSemantics('hi', /(hi)/, 'hello$20', 'hi'.replace(/(hi)/, 'hello$20'));\n\t});\n\n\ttest('get replace string if given text is a complete match', () => {\n\t\tfunction assertReplace(target: string, search: RegExp, replaceString: string, expected: string): void {\n\t\t\tconst replacePattern = parseReplaceString(replaceString);\n\t\t\tconst m = search.exec(target);\n\t\t\tconst actual = replacePattern.buildReplaceString(m);\n\n\t\t\tassert.strictEqual(actual, expected, `${target}.replace(${search}, ${replaceString}) === ${expected}`);\n\t\t}\n\n\t\tassertReplace('bla', /bla/, 'hello', 'hello');\n\t\tassertReplace('bla', /(bla)/, 'hello', 'hello');\n\t\tassertReplace('bla', /(bla)/, 'hello$0', 'hellobla');\n\n\t\tconst searchRegex = /let\\s+(\\w+)\\s*=\\s*require\\s*\\(\\s*['\"]([\\w\\.\\-/]+)\\s*['\"]\\s*\\)\\s*/;\n\t\tassertReplace('let fs = require(\\'fs\\')', searchRegex, 'import * as $1 from \\'$2\\';', 'import * as fs from \\'fs\\';');\n\t\tassertReplace('let something = require(\\'fs\\')', searchRegex, 'import * as $1 from \\'$2\\';', 'import * as something from \\'fs\\';');\n\t\tassertReplace('let something = require(\\'fs\\')', searchRegex, 'import * as $1 from \\'$1\\';', 'import * as something from \\'something\\';');\n\t\tassertReplace('let something = require(\\'fs\\')', searchRegex, 'import * as $2 from \\'$1\\';', 'import * as fs from \\'something\\';');\n\t\tassertReplace('let something = require(\\'fs\\')', searchRegex, 'import * as $0 from \\'$0\\';', 'import * as let something = require(\\'fs\\') from \\'let something = require(\\'fs\\')\\';');\n\t\tassertReplace('let fs = require(\\'fs\\')', searchRegex, 'import * as $1 from \\'$2\\';', 'import * as fs from \\'fs\\';');\n\t\tassertReplace('for ()', /for(.*)/, 'cat$1', 'cat ()');\n\n\t\t// issue #18111\n\t\tassertReplace('HRESULT OnAmbientPropertyChange(DISPID   dispid);', /\\b\\s{3}\\b/, ' ', ' ');\n\t});\n\n\ttest('get replace string if match is sub-string of the text', () => {\n\t\tfunction assertReplace(target: string, search: RegExp, replaceString: string, expected: string): void {\n\t\t\tconst replacePattern = parseReplaceString(replaceString);\n\t\t\tconst m = search.exec(target);\n\t\t\tconst actual = replacePattern.buildReplaceString(m);\n\n\t\t\tassert.strictEqual(actual, expected, `${target}.replace(${search}, ${replaceString}) === ${expected}`);\n\t\t}\n\t\tassertReplace('this is a bla text', /bla/, 'hello', 'hello');\n\t\tassertReplace('this is a bla text', /this(?=.*bla)/, 'that', 'that');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, '$1at', 'that');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, '$1e', 'the');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, '$1ere', 'there');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, '$1', 'th');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, 'ma$1', 'math');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, 'ma$1s', 'maths');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, '$0', 'this');\n\t\tassertReplace('this is a bla text', /(th)is(?=.*bla)/, '$0$1', 'thisth');\n\t\tassertReplace('this is a bla text', /bla(?=\\stext$)/, 'foo', 'foo');\n\t\tassertReplace('this is a bla text', /b(la)(?=\\stext$)/, 'f$1', 'fla');\n\t\tassertReplace('this is a bla text', /b(la)(?=\\stext$)/, 'f$0', 'fbla');\n\t\tassertReplace('this is a bla text', /b(la)(?=\\stext$)/, '$0ah', 'blaah');\n\t});\n\n\ttest('issue #19740 Find and replace capture group/backreference inserts `undefined` instead of empty string', () => {\n\t\tconst replacePattern = parseReplaceString('a{$1}');\n\t\tconst matches = /a(z)?/.exec('abcd');\n\t\tconst actual = replacePattern.buildReplaceString(matches);\n\t\tassert.strictEqual(actual, 'a{}');\n\t});\n\n\ttest('buildReplaceStringWithCasePreserved test', () => {\n\t\tfunction assertReplace(target: string[], replaceString: string, expected: string): void {\n\t\t\tlet actual: string = '';\n\t\t\tactual = buildReplaceStringWithCasePreserved(target, replaceString);\n\t\t\tassert.strictEqual(actual, expected);\n\t\t}\n\n\t\tassertReplace(['abc'], 'Def', 'def');\n\t\tassertReplace(['Abc'], 'Def', 'Def');\n\t\tassertReplace(['ABC'], 'Def', 'DEF');\n\t\tassertReplace(['abc', 'Abc'], 'Def', 'def');\n\t\tassertReplace(['Abc', 'abc'], 'Def', 'Def');\n\t\tassertReplace(['ABC', 'abc'], 'Def', 'DEF');\n\t\tassertReplace(['aBc', 'abc'], 'Def', 'def');\n\t\tassertReplace(['AbC'], 'Def', 'Def');\n\t\tassertReplace(['aBC'], 'Def', 'def');\n\t\tassertReplace(['aBc'], 'DeF', 'deF');\n\t\tassertReplace(['Foo-Bar'], 'newfoo-newbar', 'Newfoo-Newbar');\n\t\tassertReplace(['Foo-Bar-Abc'], 'newfoo-newbar-newabc', 'Newfoo-Newbar-Newabc');\n\t\tassertReplace(['Foo-Bar-abc'], 'newfoo-newbar', 'Newfoo-newbar');\n\t\tassertReplace(['foo-Bar'], 'newfoo-newbar', 'newfoo-Newbar');\n\t\tassertReplace(['foo-BAR'], 'newfoo-newbar', 'newfoo-NEWBAR');\n\t\tassertReplace(['foO-BAR'], 'NewFoo-NewBar', 'newFoo-NEWBAR');\n\t\tassertReplace(['Foo_Bar'], 'newfoo_newbar', 'Newfoo_Newbar');\n\t\tassertReplace(['Foo_Bar_Abc'], 'newfoo_newbar_newabc', 'Newfoo_Newbar_Newabc');\n\t\tassertReplace(['Foo_Bar_abc'], 'newfoo_newbar', 'Newfoo_newbar');\n\t\tassertReplace(['Foo_Bar-abc'], 'newfoo_newbar-abc', 'Newfoo_newbar-abc');\n\t\tassertReplace(['foo_Bar'], 'newfoo_newbar', 'newfoo_Newbar');\n\t\tassertReplace(['Foo_BAR'], 'newfoo_newbar', 'Newfoo_NEWBAR');\n\t});\n\n\ttest('preserve case', () => {\n\t\tfunction assertReplace(target: string[], replaceString: string, expected: string): void {\n\t\t\tconst replacePattern = parseReplaceString(replaceString);\n\t\t\tconst actual = replacePattern.buildReplaceString(target, true);\n\t\t\tassert.strictEqual(actual, expected);\n\t\t}\n\n\t\tassertReplace(['abc'], 'Def', 'def');\n\t\tassertReplace(['Abc'], 'Def', 'Def');\n\t\tassertReplace(['ABC'], 'Def', 'DEF');\n\t\tassertReplace(['abc', 'Abc'], 'Def', 'def');\n\t\tassertReplace(['Abc', 'abc'], 'Def', 'Def');\n\t\tassertReplace(['ABC', 'abc'], 'Def', 'DEF');\n\t\tassertReplace(['aBc', 'abc'], 'Def', 'def');\n\t\tassertReplace(['AbC'], 'Def', 'Def');\n\t\tassertReplace(['aBC'], 'Def', 'def');\n\t\tassertReplace(['aBc'], 'DeF', 'deF');\n\t\tassertReplace(['Foo-Bar'], 'newfoo-newbar', 'Newfoo-Newbar');\n\t\tassertReplace(['Foo-Bar-Abc'], 'newfoo-newbar-newabc', 'Newfoo-Newbar-Newabc');\n\t\tassertReplace(['Foo-Bar-abc'], 'newfoo-newbar', 'Newfoo-newbar');\n\t\tassertReplace(['foo-Bar'], 'newfoo-newbar', 'newfoo-Newbar');\n\t\tassertReplace(['foo-BAR'], 'newfoo-newbar', 'newfoo-NEWBAR');\n\t\tassertReplace(['foO-BAR'], 'NewFoo-NewBar', 'newFoo-NEWBAR');\n\t\tassertReplace(['Foo_Bar'], 'newfoo_newbar', 'Newfoo_Newbar');\n\t\tassertReplace(['Foo_Bar_Abc'], 'newfoo_newbar_newabc', 'Newfoo_Newbar_Newabc');\n\t\tassertReplace(['Foo_Bar_abc'], 'newfoo_newbar', 'Newfoo_newbar');\n\t\tassertReplace(['Foo_Bar-abc'], 'newfoo_newbar-abc', 'Newfoo_newbar-abc');\n\t\tassertReplace(['foo_Bar'], 'newfoo_newbar', 'newfoo_Newbar');\n\t\tassertReplace(['foo_BAR'], 'newfoo_newbar', 'newfoo_NEWBAR');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
