{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/find/test/browser/find.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { getSelectionSearchString } from '../../browser/findController.js';\nimport { withTestCodeEditor } from '../../../../test/browser/testCodeEditor.js';\n\n\nsuite('Find', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('search string at position', () => {\n\t\twithTestCodeEditor([\n\t\t\t'ABC DEF',\n\t\t\t'0123 456'\n\t\t], {}, (editor) => {\n\n\t\t\t// The cursor is at the very top, of the file, at the first ABC\n\t\t\tconst searchStringAtTop = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringAtTop, 'ABC');\n\n\t\t\t// Move cursor to the end of ABC\n\t\t\teditor.setPosition(new Position(1, 3));\n\t\t\tconst searchStringAfterABC = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringAfterABC, 'ABC');\n\n\t\t\t// Move cursor to DEF\n\t\t\teditor.setPosition(new Position(1, 5));\n\t\t\tconst searchStringInsideDEF = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringInsideDEF, 'DEF');\n\n\t\t});\n\t});\n\n\ttest('search string with selection', () => {\n\t\twithTestCodeEditor([\n\t\t\t'ABC DEF',\n\t\t\t'0123 456'\n\t\t], {}, (editor) => {\n\n\t\t\t// Select A of ABC\n\t\t\teditor.setSelection(new Range(1, 1, 1, 2));\n\t\t\tconst searchStringSelectionA = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionA, 'A');\n\n\t\t\t// Select BC of ABC\n\t\t\teditor.setSelection(new Range(1, 2, 1, 4));\n\t\t\tconst searchStringSelectionBC = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionBC, 'BC');\n\n\t\t\t// Select BC DE\n\t\t\teditor.setSelection(new Range(1, 2, 1, 7));\n\t\t\tconst searchStringSelectionBCDE = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionBCDE, 'BC DE');\n\n\t\t});\n\t});\n\n\ttest('search string with multiline selection', () => {\n\t\twithTestCodeEditor([\n\t\t\t'ABC DEF',\n\t\t\t'0123 456'\n\t\t], {}, (editor) => {\n\n\t\t\t// Select first line and newline\n\t\t\teditor.setSelection(new Range(1, 1, 2, 1));\n\t\t\tconst searchStringSelectionWholeLine = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionWholeLine, null);\n\n\t\t\t// Select first line and chunk of second\n\t\t\teditor.setSelection(new Range(1, 1, 2, 4));\n\t\t\tconst searchStringSelectionTwoLines = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionTwoLines, null);\n\n\t\t\t// Select end of first line newline and chunk of second\n\t\t\teditor.setSelection(new Range(1, 7, 2, 4));\n\t\t\tconst searchStringSelectionSpanLines = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionSpanLines, null);\n\n\t\t});\n\t});\n\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,gCAAgC;AACzC,SAAS,0BAA0B;AAGnC,MAAM,QAAQ,MAAM;AAEnB,0CAAwC;AAExC,OAAK,6BAA6B,MAAM;AACvC,uBAAmB;AAAA,MAClB;AAAA,MACA;AAAA,IACD,GAAG,CAAC,GAAG,CAAC,WAAW;AAGlB,YAAM,oBAAoB,yBAAyB,MAAM;AACzD,aAAO,YAAY,mBAAmB,KAAK;AAG3C,aAAO,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;AACrC,YAAM,uBAAuB,yBAAyB,MAAM;AAC5D,aAAO,YAAY,sBAAsB,KAAK;AAG9C,aAAO,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;AACrC,YAAM,wBAAwB,yBAAyB,MAAM;AAC7D,aAAO,YAAY,uBAAuB,KAAK;AAAA,IAEhD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,gCAAgC,MAAM;AAC1C,uBAAmB;AAAA,MAClB;AAAA,MACA;AAAA,IACD,GAAG,CAAC,GAAG,CAAC,WAAW;AAGlB,aAAO,aAAa,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACzC,YAAM,yBAAyB,yBAAyB,MAAM;AAC9D,aAAO,YAAY,wBAAwB,GAAG;AAG9C,aAAO,aAAa,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACzC,YAAM,0BAA0B,yBAAyB,MAAM;AAC/D,aAAO,YAAY,yBAAyB,IAAI;AAGhD,aAAO,aAAa,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACzC,YAAM,4BAA4B,yBAAyB,MAAM;AACjE,aAAO,YAAY,2BAA2B,OAAO;AAAA,IAEtD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0CAA0C,MAAM;AACpD,uBAAmB;AAAA,MAClB;AAAA,MACA;AAAA,IACD,GAAG,CAAC,GAAG,CAAC,WAAW;AAGlB,aAAO,aAAa,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACzC,YAAM,iCAAiC,yBAAyB,MAAM;AACtE,aAAO,YAAY,gCAAgC,IAAI;AAGvD,aAAO,aAAa,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACzC,YAAM,gCAAgC,yBAAyB,MAAM;AACrE,aAAO,YAAY,+BAA+B,IAAI;AAGtD,aAAO,aAAa,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACzC,YAAM,iCAAiC,yBAAyB,MAAM;AACtE,aAAO,YAAY,gCAAgC,IAAI;AAAA,IAExD,CAAC;AAAA,EACF,CAAC;AAEF,CAAC;",
  "names": []
}
