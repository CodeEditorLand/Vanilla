{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/find/browser/replacePattern.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { buildReplaceStringWithCasePreserved } from '../../../../base/common/search.js';\n\nconst enum ReplacePatternKind {\n\tStaticValue = 0,\n\tDynamicPieces = 1\n}\n\n/**\n * Assigned when the replace pattern is entirely static.\n */\nclass StaticValueReplacePattern {\n\tpublic readonly kind = ReplacePatternKind.StaticValue;\n\tconstructor(public readonly staticValue: string) { }\n}\n\n/**\n * Assigned when the replace pattern has replacement patterns.\n */\nclass DynamicPiecesReplacePattern {\n\tpublic readonly kind = ReplacePatternKind.DynamicPieces;\n\tconstructor(public readonly pieces: ReplacePiece[]) { }\n}\n\nexport class ReplacePattern {\n\n\tpublic static fromStaticValue(value: string): ReplacePattern {\n\t\treturn new ReplacePattern([ReplacePiece.staticValue(value)]);\n\t}\n\n\tprivate readonly _state: StaticValueReplacePattern | DynamicPiecesReplacePattern;\n\n\tpublic get hasReplacementPatterns(): boolean {\n\t\treturn (this._state.kind === ReplacePatternKind.DynamicPieces);\n\t}\n\n\tconstructor(pieces: ReplacePiece[] | null) {\n\t\tif (!pieces || pieces.length === 0) {\n\t\t\tthis._state = new StaticValueReplacePattern('');\n\t\t} else if (pieces.length === 1 && pieces[0].staticValue !== null) {\n\t\t\tthis._state = new StaticValueReplacePattern(pieces[0].staticValue);\n\t\t} else {\n\t\t\tthis._state = new DynamicPiecesReplacePattern(pieces);\n\t\t}\n\t}\n\n\tpublic buildReplaceString(matches: string[] | null, preserveCase?: boolean): string {\n\t\tif (this._state.kind === ReplacePatternKind.StaticValue) {\n\t\t\tif (preserveCase) {\n\t\t\t\treturn buildReplaceStringWithCasePreserved(matches, this._state.staticValue);\n\t\t\t} else {\n\t\t\t\treturn this._state.staticValue;\n\t\t\t}\n\t\t}\n\n\t\tlet result = '';\n\t\tfor (let i = 0, len = this._state.pieces.length; i < len; i++) {\n\t\t\tconst piece = this._state.pieces[i];\n\t\t\tif (piece.staticValue !== null) {\n\t\t\t\t// static value ReplacePiece\n\t\t\t\tresult += piece.staticValue;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// match index ReplacePiece\n\t\t\tlet match: string = ReplacePattern._substitute(piece.matchIndex, matches);\n\t\t\tif (piece.caseOps !== null && piece.caseOps.length > 0) {\n\t\t\t\tconst repl: string[] = [];\n\t\t\t\tconst lenOps: number = piece.caseOps.length;\n\t\t\t\tlet opIdx: number = 0;\n\t\t\t\tfor (let idx: number = 0, len: number = match.length; idx < len; idx++) {\n\t\t\t\t\tif (opIdx >= lenOps) {\n\t\t\t\t\t\trepl.push(match.slice(idx));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tswitch (piece.caseOps[opIdx]) {\n\t\t\t\t\t\tcase 'U':\n\t\t\t\t\t\t\trepl.push(match[idx].toUpperCase());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'u':\n\t\t\t\t\t\t\trepl.push(match[idx].toUpperCase());\n\t\t\t\t\t\t\topIdx++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'L':\n\t\t\t\t\t\t\trepl.push(match[idx].toLowerCase());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\trepl.push(match[idx].toLowerCase());\n\t\t\t\t\t\t\topIdx++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\trepl.push(match[idx]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmatch = repl.join('');\n\t\t\t}\n\t\t\tresult += match;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _substitute(matchIndex: number, matches: string[] | null): string {\n\t\tif (matches === null) {\n\t\t\treturn '';\n\t\t}\n\t\tif (matchIndex === 0) {\n\t\t\treturn matches[0];\n\t\t}\n\n\t\tlet remainder = '';\n\t\twhile (matchIndex > 0) {\n\t\t\tif (matchIndex < matches.length) {\n\t\t\t\t// A match can be undefined\n\t\t\t\tconst match = (matches[matchIndex] || '');\n\t\t\t\treturn match + remainder;\n\t\t\t}\n\t\t\tremainder = String(matchIndex % 10) + remainder;\n\t\t\tmatchIndex = Math.floor(matchIndex / 10);\n\t\t}\n\t\treturn '$' + remainder;\n\t}\n}\n\n/**\n * A replace piece can either be a static string or an index to a specific match.\n */\nexport class ReplacePiece {\n\n\tpublic static staticValue(value: string): ReplacePiece {\n\t\treturn new ReplacePiece(value, -1, null);\n\t}\n\n\tpublic static matchIndex(index: number): ReplacePiece {\n\t\treturn new ReplacePiece(null, index, null);\n\t}\n\n\tpublic static caseOps(index: number, caseOps: string[]): ReplacePiece {\n\t\treturn new ReplacePiece(null, index, caseOps);\n\t}\n\n\tpublic readonly staticValue: string | null;\n\tpublic readonly matchIndex: number;\n\tpublic readonly caseOps: string[] | null;\n\n\tprivate constructor(staticValue: string | null, matchIndex: number, caseOps: string[] | null) {\n\t\tthis.staticValue = staticValue;\n\t\tthis.matchIndex = matchIndex;\n\t\tif (!caseOps || caseOps.length === 0) {\n\t\t\tthis.caseOps = null;\n\t\t} else {\n\t\t\tthis.caseOps = caseOps.slice(0);\n\t\t}\n\t}\n}\n\nclass ReplacePieceBuilder {\n\n\tprivate readonly _source: string;\n\tprivate _lastCharIndex: number;\n\tprivate readonly _result: ReplacePiece[];\n\tprivate _resultLen: number;\n\tprivate _currentStaticPiece: string;\n\n\tconstructor(source: string) {\n\t\tthis._source = source;\n\t\tthis._lastCharIndex = 0;\n\t\tthis._result = [];\n\t\tthis._resultLen = 0;\n\t\tthis._currentStaticPiece = '';\n\t}\n\n\tpublic emitUnchanged(toCharIndex: number): void {\n\t\tthis._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));\n\t\tthis._lastCharIndex = toCharIndex;\n\t}\n\n\tpublic emitStatic(value: string, toCharIndex: number): void {\n\t\tthis._emitStatic(value);\n\t\tthis._lastCharIndex = toCharIndex;\n\t}\n\n\tprivate _emitStatic(value: string): void {\n\t\tif (value.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentStaticPiece += value;\n\t}\n\n\tpublic emitMatchIndex(index: number, toCharIndex: number, caseOps: string[]): void {\n\t\tif (this._currentStaticPiece.length !== 0) {\n\t\t\tthis._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n\t\t\tthis._currentStaticPiece = '';\n\t\t}\n\t\tthis._result[this._resultLen++] = ReplacePiece.caseOps(index, caseOps);\n\t\tthis._lastCharIndex = toCharIndex;\n\t}\n\n\n\tpublic finalize(): ReplacePattern {\n\t\tthis.emitUnchanged(this._source.length);\n\t\tif (this._currentStaticPiece.length !== 0) {\n\t\t\tthis._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n\t\t\tthis._currentStaticPiece = '';\n\t\t}\n\t\treturn new ReplacePattern(this._result);\n\t}\n}\n\n/**\n * \\n\t\t\t=> inserts a LF\n * \\t\t\t\t=> inserts a TAB\n * \\\\\t\t\t=> inserts a \"\\\".\n * \\u\t\t\t=> upper-cases one character in a match.\n * \\U\t\t\t=> upper-cases ALL remaining characters in a match.\n * \\l\t\t\t=> lower-cases one character in a match.\n * \\L\t\t\t=> lower-cases ALL remaining characters in a match.\n * $$\t\t\t=> inserts a \"$\".\n * $& and $0\t=> inserts the matched substring.\n * $n\t\t\t=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string\n * everything else stays untouched\n *\n * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n */\nexport function parseReplaceString(replaceString: string): ReplacePattern {\n\tif (!replaceString || replaceString.length === 0) {\n\t\treturn new ReplacePattern(null);\n\t}\n\n\tconst caseOps: string[] = [];\n\tconst result = new ReplacePieceBuilder(replaceString);\n\n\tfor (let i = 0, len = replaceString.length; i < len; i++) {\n\t\tconst chCode = replaceString.charCodeAt(i);\n\n\t\tif (chCode === CharCode.Backslash) {\n\n\t\t\t// move to next char\n\t\t\ti++;\n\n\t\t\tif (i >= len) {\n\t\t\t\t// string ends with a \\\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst nextChCode = replaceString.charCodeAt(i);\n\t\t\t// let replaceWithCharacter: string | null = null;\n\n\t\t\tswitch (nextChCode) {\n\t\t\t\tcase CharCode.Backslash:\n\t\t\t\t\t// \\\\ => inserts a \"\\\"\n\t\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\t\tresult.emitStatic('\\\\', i + 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.n:\n\t\t\t\t\t// \\n => inserts a LF\n\t\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\t\tresult.emitStatic('\\n', i + 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.t:\n\t\t\t\t\t// \\t => inserts a TAB\n\t\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\t\tresult.emitStatic('\\t', i + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t// Case modification of string replacements, patterned after Boost, but only applied\n\t\t\t\t// to the replacement text, not subsequent content.\n\t\t\t\tcase CharCode.u:\n\t\t\t\t// \\u => upper-cases one character.\n\t\t\t\tcase CharCode.U:\n\t\t\t\t// \\U => upper-cases ALL following characters.\n\t\t\t\tcase CharCode.l:\n\t\t\t\t// \\l => lower-cases one character.\n\t\t\t\tcase CharCode.L:\n\t\t\t\t\t// \\L => lower-cases ALL following characters.\n\t\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\t\tresult.emitStatic('', i + 1);\n\t\t\t\t\tcaseOps.push(String.fromCharCode(nextChCode));\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (chCode === CharCode.DollarSign) {\n\n\t\t\t// move to next char\n\t\t\ti++;\n\n\t\t\tif (i >= len) {\n\t\t\t\t// string ends with a $\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst nextChCode = replaceString.charCodeAt(i);\n\n\t\t\tif (nextChCode === CharCode.DollarSign) {\n\t\t\t\t// $$ => inserts a \"$\"\n\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\tresult.emitStatic('$', i + 1);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (nextChCode === CharCode.Digit0 || nextChCode === CharCode.Ampersand) {\n\t\t\t\t// $& and $0 => inserts the matched substring.\n\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\tresult.emitMatchIndex(0, i + 1, caseOps);\n\t\t\t\tcaseOps.length = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (CharCode.Digit1 <= nextChCode && nextChCode <= CharCode.Digit9) {\n\t\t\t\t// $n\n\n\t\t\t\tlet matchIndex = nextChCode - CharCode.Digit0;\n\n\t\t\t\t// peek next char to probe for $nn\n\t\t\t\tif (i + 1 < len) {\n\t\t\t\t\tconst nextNextChCode = replaceString.charCodeAt(i + 1);\n\t\t\t\t\tif (CharCode.Digit0 <= nextNextChCode && nextNextChCode <= CharCode.Digit9) {\n\t\t\t\t\t\t// $nn\n\n\t\t\t\t\t\t// move to next char\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tmatchIndex = matchIndex * 10 + (nextNextChCode - CharCode.Digit0);\n\n\t\t\t\t\t\tresult.emitUnchanged(i - 2);\n\t\t\t\t\t\tresult.emitMatchIndex(matchIndex, i + 1, caseOps);\n\t\t\t\t\t\tcaseOps.length = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult.emitUnchanged(i - 1);\n\t\t\t\tresult.emitMatchIndex(matchIndex, i + 1, caseOps);\n\t\t\t\tcaseOps.length = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result.finalize();\n}\n"],
  "mappings": "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",
  "names": ["ReplacePatternKind", "len"]
}
