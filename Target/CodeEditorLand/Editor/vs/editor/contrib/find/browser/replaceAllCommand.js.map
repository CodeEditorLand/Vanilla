{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/find/browser/replaceAllCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from \"../../../common/core/range.js\";\nimport type { Selection } from \"../../../common/core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../../../common/editorCommon.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\ninterface IEditOperation {\n\trange: Range;\n\ttext: string;\n}\n\nexport class ReplaceAllCommand implements ICommand {\n\tprivate readonly _editorSelection: Selection;\n\tprivate _trackedEditorSelectionId: string | null;\n\tprivate readonly _ranges: Range[];\n\tprivate readonly _replaceStrings: string[];\n\n\tconstructor(\n\t\teditorSelection: Selection,\n\t\tranges: Range[],\n\t\treplaceStrings: string[],\n\t) {\n\t\tthis._editorSelection = editorSelection;\n\t\tthis._ranges = ranges;\n\t\tthis._replaceStrings = replaceStrings;\n\t\tthis._trackedEditorSelectionId = null;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tif (this._ranges.length > 0) {\n\t\t\t// Collect all edit operations\n\t\t\tconst ops: IEditOperation[] = [];\n\t\t\tfor (let i = 0; i < this._ranges.length; i++) {\n\t\t\t\tops.push({\n\t\t\t\t\trange: this._ranges[i],\n\t\t\t\t\ttext: this._replaceStrings[i],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Sort them in ascending order by range starts\n\t\t\tops.sort((o1, o2) => {\n\t\t\t\treturn Range.compareRangesUsingStarts(o1.range, o2.range);\n\t\t\t});\n\n\t\t\t// Merge operations that touch each other\n\t\t\tconst resultOps: IEditOperation[] = [];\n\t\t\tlet previousOp = ops[0];\n\t\t\tfor (let i = 1; i < ops.length; i++) {\n\t\t\t\tif (\n\t\t\t\t\tpreviousOp.range.endLineNumber ===\n\t\t\t\t\t\tops[i].range.startLineNumber &&\n\t\t\t\t\tpreviousOp.range.endColumn === ops[i].range.startColumn\n\t\t\t\t) {\n\t\t\t\t\t// These operations are one after another and can be merged\n\t\t\t\t\tpreviousOp.range = previousOp.range.plusRange(ops[i].range);\n\t\t\t\t\tpreviousOp.text = previousOp.text + ops[i].text;\n\t\t\t\t} else {\n\t\t\t\t\tresultOps.push(previousOp);\n\t\t\t\t\tpreviousOp = ops[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tresultOps.push(previousOp);\n\n\t\t\tfor (const op of resultOps) {\n\t\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t\t}\n\t\t}\n\n\t\tthis._trackedEditorSelectionId = builder.trackSelection(\n\t\t\tthis._editorSelection,\n\t\t);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this._trackedEditorSelectionId!);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AAcf,MAAM,kBAAsC;AAAA,EAnBnD,OAmBmD;AAAA;AAAA;AAAA,EACjC;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EAEjB,YACC,iBACA,QACA,gBACC;AACD,SAAK,mBAAmB;AACxB,SAAK,UAAU;AACf,SAAK,kBAAkB;AACvB,SAAK,4BAA4B;AAAA,EAClC;AAAA,EAEO,kBACN,OACA,SACO;AACP,QAAI,KAAK,QAAQ,SAAS,GAAG;AAE5B,YAAM,MAAwB,CAAC;AAC/B,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,YAAI,KAAK;AAAA,UACR,OAAO,KAAK,QAAQ,CAAC;AAAA,UACrB,MAAM,KAAK,gBAAgB,CAAC;AAAA,QAC7B,CAAC;AAAA,MACF;AAGA,UAAI,KAAK,CAAC,IAAI,OAAO;AACpB,eAAO,MAAM,yBAAyB,GAAG,OAAO,GAAG,KAAK;AAAA,MACzD,CAAC;AAGD,YAAM,YAA8B,CAAC;AACrC,UAAI,aAAa,IAAI,CAAC;AACtB,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACpC,YACC,WAAW,MAAM,kBAChB,IAAI,CAAC,EAAE,MAAM,mBACd,WAAW,MAAM,cAAc,IAAI,CAAC,EAAE,MAAM,aAC3C;AAED,qBAAW,QAAQ,WAAW,MAAM,UAAU,IAAI,CAAC,EAAE,KAAK;AAC1D,qBAAW,OAAO,WAAW,OAAO,IAAI,CAAC,EAAE;AAAA,QAC5C,OAAO;AACN,oBAAU,KAAK,UAAU;AACzB,uBAAa,IAAI,CAAC;AAAA,QACnB;AAAA,MACD;AACA,gBAAU,KAAK,UAAU;AAEzB,iBAAW,MAAM,WAAW;AAC3B,gBAAQ,iBAAiB,GAAG,OAAO,GAAG,IAAI;AAAA,MAC3C;AAAA,IACD;AAEA,SAAK,4BAA4B,QAAQ;AAAA,MACxC,KAAK;AAAA,IACN;AAAA,EACD;AAAA,EAEO,mBACN,OACA,QACY;AACZ,WAAO,OAAO,oBAAoB,KAAK,yBAA0B;AAAA,EAClE;AACD;",
  "names": []
}
