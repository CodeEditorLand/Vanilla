import{Range as s}from"../../../../../vs/editor/common/core/range.js";import"../../../../../vs/editor/common/core/selection.js";import"../../../../../vs/editor/common/editorCommon.js";import"../../../../../vs/editor/common/model.js";class _{_editorSelection;_trackedEditorSelectionId;_ranges;_replaceStrings;constructor(i,n,t){this._editorSelection=i,this._ranges=n,this._replaceStrings=t,this._trackedEditorSelectionId=null}getEditOperations(i,n){if(this._ranges.length>0){const t=[];for(let e=0;e<this._ranges.length;e++)t.push({range:this._ranges[e],text:this._replaceStrings[e]});t.sort((e,a)=>s.compareRangesUsingStarts(e.range,a.range));const o=[];let r=t[0];for(let e=1;e<t.length;e++)r.range.endLineNumber===t[e].range.startLineNumber&&r.range.endColumn===t[e].range.startColumn?(r.range=r.range.plusRange(t[e].range),r.text=r.text+t[e].text):(o.push(r),r=t[e]);o.push(r);for(const e of o)n.addEditOperation(e.range,e.text)}this._trackedEditorSelectionId=n.trackSelection(this._editorSelection)}computeCursorState(i,n){return n.getTrackedSelection(this._trackedEditorSelectionId)}}export{_ as ReplaceAllCommand};
