{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/find/browser/findModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstIdxMonotonousOrArrLen } from '../../../../base/common/arraysFind.js';\nimport { RunOnceScheduler, TimeoutTimer } from '../../../../base/common/async.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore, dispose } from '../../../../base/common/lifecycle.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { IActiveCodeEditor } from '../../../browser/editorBrowser.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection } from '../../../common/commands/replaceCommand.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { CursorChangeReason, ICursorPositionChangedEvent } from '../../../common/cursorEvents.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ICommand, ScrollType } from '../../../common/editorCommon.js';\nimport { EndOfLinePreference, FindMatch, ITextModel } from '../../../common/model.js';\nimport { SearchParams } from '../../../common/model/textModelSearch.js';\nimport { FindDecorations } from './findDecorations.js';\nimport { FindReplaceState, FindReplaceStateChangedEvent } from './findState.js';\nimport { ReplaceAllCommand } from './replaceAllCommand.js';\nimport { parseReplaceString, ReplacePattern } from './replacePattern.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IKeybindings } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\n\nexport const CONTEXT_FIND_WIDGET_VISIBLE = new RawContextKey<boolean>('findWidgetVisible', false);\nexport const CONTEXT_FIND_WIDGET_NOT_VISIBLE = CONTEXT_FIND_WIDGET_VISIBLE.toNegated();\n// Keep ContextKey use of 'Focussed' to not break when clauses\nexport const CONTEXT_FIND_INPUT_FOCUSED = new RawContextKey<boolean>('findInputFocussed', false);\nexport const CONTEXT_REPLACE_INPUT_FOCUSED = new RawContextKey<boolean>('replaceInputFocussed', false);\n\nexport const ToggleCaseSensitiveKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyC,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyC }\n};\nexport const ToggleWholeWordKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyW,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyW }\n};\nexport const ToggleRegexKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyR,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyR }\n};\nexport const ToggleSearchScopeKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyL,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyL }\n};\nexport const TogglePreserveCaseKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyP,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyP }\n};\n\nexport const FIND_IDS = {\n\tStartFindAction: 'actions.find',\n\tStartFindWithSelection: 'actions.findWithSelection',\n\tStartFindWithArgs: 'editor.actions.findWithArgs',\n\tNextMatchFindAction: 'editor.action.nextMatchFindAction',\n\tPreviousMatchFindAction: 'editor.action.previousMatchFindAction',\n\tGoToMatchFindAction: 'editor.action.goToMatchFindAction',\n\tNextSelectionMatchFindAction: 'editor.action.nextSelectionMatchFindAction',\n\tPreviousSelectionMatchFindAction: 'editor.action.previousSelectionMatchFindAction',\n\tStartFindReplaceAction: 'editor.action.startFindReplaceAction',\n\tCloseFindWidgetCommand: 'closeFindWidget',\n\tToggleCaseSensitiveCommand: 'toggleFindCaseSensitive',\n\tToggleWholeWordCommand: 'toggleFindWholeWord',\n\tToggleRegexCommand: 'toggleFindRegex',\n\tToggleSearchScopeCommand: 'toggleFindInSelection',\n\tTogglePreserveCaseCommand: 'togglePreserveCase',\n\tReplaceOneAction: 'editor.action.replaceOne',\n\tReplaceAllAction: 'editor.action.replaceAll',\n\tSelectAllMatchesAction: 'editor.action.selectAllMatches'\n};\n\nexport const MATCHES_LIMIT = 19999;\nconst RESEARCH_DELAY = 240;\n\nexport class FindModelBoundToEditorModel {\n\n\tprivate readonly _editor: IActiveCodeEditor;\n\tprivate readonly _state: FindReplaceState;\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _decorations: FindDecorations;\n\tprivate _ignoreModelContentChanged: boolean;\n\tprivate readonly _startSearchingTimer: TimeoutTimer;\n\n\tprivate readonly _updateDecorationsScheduler: RunOnceScheduler;\n\tprivate _isDisposed: boolean;\n\n\tconstructor(editor: IActiveCodeEditor, state: FindReplaceState) {\n\t\tthis._editor = editor;\n\t\tthis._state = state;\n\t\tthis._isDisposed = false;\n\t\tthis._startSearchingTimer = new TimeoutTimer();\n\n\t\tthis._decorations = new FindDecorations(editor);\n\t\tthis._toDispose.add(this._decorations);\n\n\t\tthis._updateDecorationsScheduler = new RunOnceScheduler(() => {\n\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.research(false);\n\t\t}, 100);\n\t\tthis._toDispose.add(this._updateDecorationsScheduler);\n\n\t\tthis._toDispose.add(this._editor.onDidChangeCursorPosition((e: ICursorPositionChangedEvent) => {\n\t\t\tif (\n\t\t\t\te.reason === CursorChangeReason.Explicit\n\t\t\t\t|| e.reason === CursorChangeReason.Undo\n\t\t\t\t|| e.reason === CursorChangeReason.Redo\n\t\t\t) {\n\t\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\t}\n\t\t}));\n\n\t\tthis._ignoreModelContentChanged = false;\n\t\tthis._toDispose.add(this._editor.onDidChangeModelContent((e) => {\n\t\t\tif (this._ignoreModelContentChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.isFlush) {\n\t\t\t\t// a model.setValue() was called\n\t\t\t\tthis._decorations.reset();\n\t\t\t}\n\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\tthis._updateDecorationsScheduler.schedule();\n\t\t}));\n\n\t\tthis._toDispose.add(this._state.onFindReplaceStateChange((e) => this._onStateChanged(e)));\n\n\t\tthis.research(false, this._state.searchScope);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tdispose(this._startSearchingTimer);\n\t\tthis._toDispose.dispose();\n\t}\n\n\tprivate _onStateChanged(e: FindReplaceStateChangedEvent): void {\n\t\tif (this._isDisposed) {\n\t\t\t// The find model is disposed during a find state changed event\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\t// The find model will be disposed momentarily\n\t\t\treturn;\n\t\t}\n\t\tif (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {\n\t\t\tconst model = this._editor.getModel();\n\n\t\t\tif (model.isTooLargeForSyncing()) {\n\t\t\t\tthis._startSearchingTimer.cancel();\n\n\t\t\t\tthis._startSearchingTimer.setIfNotSet(() => {\n\t\t\t\t\tif (e.searchScope) {\n\t\t\t\t\t\tthis.research(e.moveCursor, this._state.searchScope);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.research(e.moveCursor);\n\t\t\t\t\t}\n\t\t\t\t}, RESEARCH_DELAY);\n\t\t\t} else {\n\t\t\t\tif (e.searchScope) {\n\t\t\t\t\tthis.research(e.moveCursor, this._state.searchScope);\n\t\t\t\t} else {\n\t\t\t\t\tthis.research(e.moveCursor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static _getSearchRange(model: ITextModel, findScope: Range | null): Range {\n\t\t// If we have set now or before a find scope, use it for computing the search range\n\t\tif (findScope) {\n\t\t\treturn findScope;\n\t\t}\n\n\t\treturn model.getFullModelRange();\n\t}\n\n\tprivate research(moveCursor: boolean, newFindScope?: Range | Range[] | null): void {\n\t\tlet findScopes: Range[] | null = null;\n\t\tif (typeof newFindScope !== 'undefined') {\n\t\t\tif (newFindScope !== null) {\n\t\t\t\tif (!Array.isArray(newFindScope)) {\n\t\t\t\t\tfindScopes = [newFindScope as Range];\n\t\t\t\t} else {\n\t\t\t\t\tfindScopes = newFindScope;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfindScopes = this._decorations.getFindScopes();\n\t\t}\n\t\tif (findScopes !== null) {\n\t\t\tfindScopes = findScopes.map(findScope => {\n\t\t\t\tif (findScope.startLineNumber !== findScope.endLineNumber) {\n\t\t\t\t\tlet endLineNumber = findScope.endLineNumber;\n\n\t\t\t\t\tif (findScope.endColumn === 1) {\n\t\t\t\t\t\tendLineNumber = endLineNumber - 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Range(findScope.startLineNumber, 1, endLineNumber, this._editor.getModel().getLineMaxColumn(endLineNumber));\n\t\t\t\t}\n\t\t\t\treturn findScope;\n\t\t\t});\n\t\t}\n\n\t\tconst findMatches = this._findMatches(findScopes, false, MATCHES_LIMIT);\n\t\tthis._decorations.set(findMatches, findScopes);\n\n\t\tconst editorSelection = this._editor.getSelection();\n\t\tlet currentMatchesPosition = this._decorations.getCurrentMatchesPosition(editorSelection);\n\t\tif (currentMatchesPosition === 0 && findMatches.length > 0) {\n\t\t\t// current selection is not on top of a match\n\t\t\t// try to find its nearest result from the top of the document\n\t\t\tconst matchAfterSelection = findFirstIdxMonotonousOrArrLen(findMatches.map(match => match.range), range => Range.compareRangesUsingStarts(range, editorSelection) >= 0);\n\t\t\tcurrentMatchesPosition = matchAfterSelection > 0 ? matchAfterSelection - 1 + 1 /** match position is one based */ : currentMatchesPosition;\n\t\t}\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tcurrentMatchesPosition,\n\t\t\tthis._decorations.getCount(),\n\t\t\tundefined\n\t\t);\n\n\t\tif (moveCursor && this._editor.getOption(EditorOption.find).cursorMoveOnType) {\n\t\t\tthis._moveToNextMatch(this._decorations.getStartPosition());\n\t\t}\n\t}\n\n\tprivate _hasMatches(): boolean {\n\t\treturn (this._state.matchesCount > 0);\n\t}\n\n\tprivate _cannotFind(): boolean {\n\t\tif (!this._hasMatches()) {\n\t\t\tconst findScope = this._decorations.getFindScope();\n\t\t\tif (findScope) {\n\t\t\t\t// Reveal the selection so user is reminded that 'selection find' is on.\n\t\t\t\tthis._editor.revealRangeInCenterIfOutsideViewport(findScope, ScrollType.Smooth);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _setCurrentFindMatch(match: Range): void {\n\t\tconst matchesPosition = this._decorations.setCurrentFindMatch(match);\n\t\tthis._state.changeMatchInfo(\n\t\t\tmatchesPosition,\n\t\t\tthis._decorations.getCount(),\n\t\t\tmatch\n\t\t);\n\n\t\tthis._editor.setSelection(match);\n\t\tthis._editor.revealRangeInCenterIfOutsideViewport(match, ScrollType.Smooth);\n\t}\n\n\tprivate _prevSearchPosition(before: Position) {\n\t\tconst isUsingLineStops = this._state.isRegex && (\n\t\t\tthis._state.searchString.indexOf('^') >= 0\n\t\t\t|| this._state.searchString.indexOf('$') >= 0\n\t\t);\n\t\tlet { lineNumber, column } = before;\n\t\tconst model = this._editor.getModel();\n\n\t\tif (isUsingLineStops || column === 1) {\n\t\t\tif (lineNumber === 1) {\n\t\t\t\tlineNumber = model.getLineCount();\n\t\t\t} else {\n\t\t\t\tlineNumber--;\n\t\t\t}\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t} else {\n\t\t\tcolumn--;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _moveToPrevMatch(before: Position, isRecursed: boolean = false): void {\n\t\tif (!this._state.canNavigateBack()) {\n\t\t\t// we are beyond the first matched find result\n\t\t\t// instead of doing nothing, we should refocus the first item\n\t\t\tconst nextMatchRange = this._decorations.matchAfterPosition(before);\n\n\t\t\tif (nextMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(nextMatchRange);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (this._decorations.getCount() < MATCHES_LIMIT) {\n\t\t\tlet prevMatchRange = this._decorations.matchBeforePosition(before);\n\n\t\t\tif (prevMatchRange && prevMatchRange.isEmpty() && prevMatchRange.getStartPosition().equals(before)) {\n\t\t\t\tbefore = this._prevSearchPosition(before);\n\t\t\t\tprevMatchRange = this._decorations.matchBeforePosition(before);\n\t\t\t}\n\n\t\t\tif (prevMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(prevMatchRange);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._cannotFind()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScope = this._decorations.getFindScope();\n\t\tconst searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n\n\t\t// ...(----)...|...\n\t\tif (searchRange.getEndPosition().isBefore(before)) {\n\t\t\tbefore = searchRange.getEndPosition();\n\t\t}\n\n\t\t// ...|...(----)...\n\t\tif (before.isBefore(searchRange.getStartPosition())) {\n\t\t\tbefore = searchRange.getEndPosition();\n\t\t}\n\n\t\tconst { lineNumber, column } = before;\n\t\tconst model = this._editor.getModel();\n\n\t\tlet position = new Position(lineNumber, column);\n\n\t\tlet prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(EditorOption.wordSeparators) : null, false);\n\n\t\tif (prevMatch && prevMatch.range.isEmpty() && prevMatch.range.getStartPosition().equals(position)) {\n\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\tposition = this._prevSearchPosition(position);\n\t\t\tprevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(EditorOption.wordSeparators) : null, false);\n\t\t}\n\n\t\tif (!prevMatch) {\n\t\t\t// there is precisely one match and selection is on top of it\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isRecursed && !searchRange.containsRange(prevMatch.range)) {\n\t\t\treturn this._moveToPrevMatch(prevMatch.range.getStartPosition(), true);\n\t\t}\n\n\t\tthis._setCurrentFindMatch(prevMatch.range);\n\t}\n\n\tpublic moveToPrevMatch(): void {\n\t\tthis._moveToPrevMatch(this._editor.getSelection().getStartPosition());\n\t}\n\n\tprivate _nextSearchPosition(after: Position) {\n\t\tconst isUsingLineStops = this._state.isRegex && (\n\t\t\tthis._state.searchString.indexOf('^') >= 0\n\t\t\t|| this._state.searchString.indexOf('$') >= 0\n\t\t);\n\n\t\tlet { lineNumber, column } = after;\n\t\tconst model = this._editor.getModel();\n\n\t\tif (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {\n\t\t\tif (lineNumber === model.getLineCount()) {\n\t\t\t\tlineNumber = 1;\n\t\t\t} else {\n\t\t\t\tlineNumber++;\n\t\t\t}\n\t\t\tcolumn = 1;\n\t\t} else {\n\t\t\tcolumn++;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _moveToNextMatch(after: Position): void {\n\t\tif (!this._state.canNavigateForward()) {\n\t\t\t// we are beyond the last matched find result\n\t\t\t// instead of doing nothing, we should refocus the last item\n\t\t\tconst prevMatchRange = this._decorations.matchBeforePosition(after);\n\n\t\t\tif (prevMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(prevMatchRange);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (this._decorations.getCount() < MATCHES_LIMIT) {\n\t\t\tlet nextMatchRange = this._decorations.matchAfterPosition(after);\n\n\t\t\tif (nextMatchRange && nextMatchRange.isEmpty() && nextMatchRange.getStartPosition().equals(after)) {\n\t\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\t\tafter = this._nextSearchPosition(after);\n\t\t\t\tnextMatchRange = this._decorations.matchAfterPosition(after);\n\t\t\t}\n\t\t\tif (nextMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(nextMatchRange);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextMatch = this._getNextMatch(after, false, true);\n\t\tif (nextMatch) {\n\t\t\tthis._setCurrentFindMatch(nextMatch.range);\n\t\t}\n\t}\n\n\tprivate _getNextMatch(after: Position, captureMatches: boolean, forceMove: boolean, isRecursed: boolean = false): FindMatch | null {\n\t\tif (this._cannotFind()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst findScope = this._decorations.getFindScope();\n\t\tconst searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), findScope);\n\n\t\t// ...(----)...|...\n\t\tif (searchRange.getEndPosition().isBefore(after)) {\n\t\t\tafter = searchRange.getStartPosition();\n\t\t}\n\n\t\t// ...|...(----)...\n\t\tif (after.isBefore(searchRange.getStartPosition())) {\n\t\t\tafter = searchRange.getStartPosition();\n\t\t}\n\n\t\tconst { lineNumber, column } = after;\n\t\tconst model = this._editor.getModel();\n\n\t\tlet position = new Position(lineNumber, column);\n\n\t\tlet nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(EditorOption.wordSeparators) : null, captureMatches);\n\n\t\tif (forceMove && nextMatch && nextMatch.range.isEmpty() && nextMatch.range.getStartPosition().equals(position)) {\n\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\tposition = this._nextSearchPosition(position);\n\t\t\tnextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(EditorOption.wordSeparators) : null, captureMatches);\n\t\t}\n\n\t\tif (!nextMatch) {\n\t\t\t// there is precisely one match and selection is on top of it\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!isRecursed && !searchRange.containsRange(nextMatch.range)) {\n\t\t\treturn this._getNextMatch(nextMatch.range.getEndPosition(), captureMatches, forceMove, true);\n\t\t}\n\n\t\treturn nextMatch;\n\t}\n\n\tpublic moveToNextMatch(): void {\n\t\tthis._moveToNextMatch(this._editor.getSelection().getEndPosition());\n\t}\n\n\tprivate _moveToMatch(index: number): void {\n\t\tconst decorationRange = this._decorations.getDecorationRangeAt(index);\n\t\tif (decorationRange) {\n\t\t\tthis._setCurrentFindMatch(decorationRange);\n\t\t}\n\t}\n\n\tpublic moveToMatch(index: number): void {\n\t\tthis._moveToMatch(index);\n\t}\n\n\tprivate _getReplacePattern(): ReplacePattern {\n\t\tif (this._state.isRegex) {\n\t\t\treturn parseReplaceString(this._state.replaceString);\n\t\t}\n\t\treturn ReplacePattern.fromStaticValue(this._state.replaceString);\n\t}\n\n\tpublic replace(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst replacePattern = this._getReplacePattern();\n\t\tconst selection = this._editor.getSelection();\n\t\tconst nextMatch = this._getNextMatch(selection.getStartPosition(), true, false);\n\t\tif (nextMatch) {\n\t\t\tif (selection.equalsRange(nextMatch.range)) {\n\t\t\t\t// selection sits on a find match => replace it!\n\t\t\t\tconst replaceString = replacePattern.buildReplaceString(nextMatch.matches, this._state.preserveCase);\n\n\t\t\t\tconst command = new ReplaceCommand(selection, replaceString);\n\n\t\t\t\tthis._executeEditorCommand('replace', command);\n\n\t\t\t\tthis._decorations.setStartPosition(new Position(selection.startLineNumber, selection.startColumn + replaceString.length));\n\t\t\t\tthis.research(true);\n\t\t\t} else {\n\t\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\t\tthis._setCurrentFindMatch(nextMatch.range);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _findMatches(findScopes: Range[] | null, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\tconst searchRanges = (findScopes as [] || [null]).map((scope: Range | null) =>\n\t\t\tFindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), scope)\n\t\t);\n\n\t\treturn this._editor.getModel().findMatches(this._state.searchString, searchRanges, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(EditorOption.wordSeparators) : null, captureMatches, limitResultCount);\n\t}\n\n\tpublic replaceAll(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScopes = this._decorations.getFindScopes();\n\n\t\tif (findScopes === null && this._state.matchesCount >= MATCHES_LIMIT) {\n\t\t\t// Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches\n\t\t\tthis._largeReplaceAll();\n\t\t} else {\n\t\t\tthis._regularReplaceAll(findScopes);\n\t\t}\n\n\t\tthis.research(false);\n\t}\n\n\tprivate _largeReplaceAll(): void {\n\t\tconst searchParams = new SearchParams(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(EditorOption.wordSeparators) : null);\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet searchRegex = searchData.regex;\n\t\tif (!searchRegex.multiline) {\n\t\t\tlet mod = 'mu';\n\t\t\tif (searchRegex.ignoreCase) {\n\t\t\t\tmod += 'i';\n\t\t\t}\n\t\t\tif (searchRegex.global) {\n\t\t\t\tmod += 'g';\n\t\t\t}\n\t\t\tsearchRegex = new RegExp(searchRegex.source, mod);\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst modelText = model.getValue(EndOfLinePreference.LF);\n\t\tconst fullModelRange = model.getFullModelRange();\n\n\t\tconst replacePattern = this._getReplacePattern();\n\t\tlet resultText: string;\n\t\tconst preserveCase = this._state.preserveCase;\n\n\t\tif (replacePattern.hasReplacementPatterns || preserveCase) {\n\t\t\tresultText = modelText.replace(searchRegex, function () {\n\t\t\t\treturn replacePattern.buildReplaceString(<string[]><any>arguments, preserveCase);\n\t\t\t});\n\t\t} else {\n\t\t\tresultText = modelText.replace(searchRegex, replacePattern.buildReplaceString(null, preserveCase));\n\t\t}\n\n\t\tconst command = new ReplaceCommandThatPreservesSelection(fullModelRange, resultText, this._editor.getSelection());\n\t\tthis._executeEditorCommand('replaceAll', command);\n\t}\n\n\tprivate _regularReplaceAll(findScopes: Range[] | null): void {\n\t\tconst replacePattern = this._getReplacePattern();\n\t\t// Get all the ranges (even more than the highlighted ones)\n\t\tconst matches = this._findMatches(findScopes, replacePattern.hasReplacementPatterns || this._state.preserveCase, Constants.MAX_SAFE_SMALL_INTEGER);\n\n\t\tconst replaceStrings: string[] = [];\n\t\tfor (let i = 0, len = matches.length; i < len; i++) {\n\t\t\treplaceStrings[i] = replacePattern.buildReplaceString(matches[i].matches, this._state.preserveCase);\n\t\t}\n\n\t\tconst command = new ReplaceAllCommand(this._editor.getSelection(), matches.map(m => m.range), replaceStrings);\n\t\tthis._executeEditorCommand('replaceAll', command);\n\t}\n\n\tpublic selectAllMatches(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScopes = this._decorations.getFindScopes();\n\n\t\t// Get all the ranges (even more than the highlighted ones)\n\t\tconst matches = this._findMatches(findScopes, false, Constants.MAX_SAFE_SMALL_INTEGER);\n\t\tlet selections = matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn));\n\n\t\t// If one of the ranges is the editor selection, then maintain it as primary\n\t\tconst editorSelection = this._editor.getSelection();\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst sel = selections[i];\n\t\t\tif (sel.equalsRange(editorSelection)) {\n\t\t\t\tselections = [editorSelection].concat(selections.slice(0, i)).concat(selections.slice(i + 1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._editor.setSelections(selections);\n\t}\n\n\tprivate _executeEditorCommand(source: string, command: ICommand): void {\n\t\ttry {\n\t\t\tthis._ignoreModelContentChanged = true;\n\t\t\tthis._editor.pushUndoStop();\n\t\t\tthis._editor.executeCommand(source, command);\n\t\t\tthis._editor.pushUndoStop();\n\t\t} finally {\n\t\t\tthis._ignoreModelContentChanged = false;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
