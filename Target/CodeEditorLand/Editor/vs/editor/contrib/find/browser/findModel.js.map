{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/find/browser/findModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstIdxMonotonousOrArrLen } from \"../../../../base/common/arraysFind.js\";\nimport {\n\tRunOnceScheduler,\n\tTimeoutTimer,\n} from \"../../../../base/common/async.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { DisposableStore, dispose } from \"../../../../base/common/lifecycle.js\";\nimport { Constants } from \"../../../../base/common/uint.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { IKeybindings } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport type { IActiveCodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tReplaceCommand,\n\tReplaceCommandThatPreservesSelection,\n} from \"../../../common/commands/replaceCommand.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport {\n\tCursorChangeReason,\n\ttype ICursorPositionChangedEvent,\n} from \"../../../common/cursorEvents.js\";\nimport { type ICommand, ScrollType } from \"../../../common/editorCommon.js\";\nimport {\n\tEndOfLinePreference,\n\ttype FindMatch,\n\ttype ITextModel,\n} from \"../../../common/model.js\";\nimport { SearchParams } from \"../../../common/model/textModelSearch.js\";\nimport { FindDecorations } from \"./findDecorations.js\";\nimport type {\n\tFindReplaceState,\n\tFindReplaceStateChangedEvent,\n} from \"./findState.js\";\nimport { ReplaceAllCommand } from \"./replaceAllCommand.js\";\nimport { ReplacePattern, parseReplaceString } from \"./replacePattern.js\";\n\nexport const CONTEXT_FIND_WIDGET_VISIBLE = new RawContextKey<boolean>(\n\t\"findWidgetVisible\",\n\tfalse,\n);\nexport const CONTEXT_FIND_WIDGET_NOT_VISIBLE =\n\tCONTEXT_FIND_WIDGET_VISIBLE.toNegated();\n// Keep ContextKey use of 'Focussed' to not break when clauses\nexport const CONTEXT_FIND_INPUT_FOCUSED = new RawContextKey<boolean>(\n\t\"findInputFocussed\",\n\tfalse,\n);\nexport const CONTEXT_REPLACE_INPUT_FOCUSED = new RawContextKey<boolean>(\n\t\"replaceInputFocussed\",\n\tfalse,\n);\n\nexport const ToggleCaseSensitiveKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyC,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyC },\n};\nexport const ToggleWholeWordKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyW,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyW },\n};\nexport const ToggleRegexKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyR,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyR },\n};\nexport const ToggleSearchScopeKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyL,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyL },\n};\nexport const TogglePreserveCaseKeybinding: IKeybindings = {\n\tprimary: KeyMod.Alt | KeyCode.KeyP,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyP },\n};\n\nexport const FIND_IDS = {\n\tStartFindAction: \"actions.find\",\n\tStartFindWithSelection: \"actions.findWithSelection\",\n\tStartFindWithArgs: \"editor.actions.findWithArgs\",\n\tNextMatchFindAction: \"editor.action.nextMatchFindAction\",\n\tPreviousMatchFindAction: \"editor.action.previousMatchFindAction\",\n\tGoToMatchFindAction: \"editor.action.goToMatchFindAction\",\n\tNextSelectionMatchFindAction: \"editor.action.nextSelectionMatchFindAction\",\n\tPreviousSelectionMatchFindAction:\n\t\t\"editor.action.previousSelectionMatchFindAction\",\n\tStartFindReplaceAction: \"editor.action.startFindReplaceAction\",\n\tCloseFindWidgetCommand: \"closeFindWidget\",\n\tToggleCaseSensitiveCommand: \"toggleFindCaseSensitive\",\n\tToggleWholeWordCommand: \"toggleFindWholeWord\",\n\tToggleRegexCommand: \"toggleFindRegex\",\n\tToggleSearchScopeCommand: \"toggleFindInSelection\",\n\tTogglePreserveCaseCommand: \"togglePreserveCase\",\n\tReplaceOneAction: \"editor.action.replaceOne\",\n\tReplaceAllAction: \"editor.action.replaceAll\",\n\tSelectAllMatchesAction: \"editor.action.selectAllMatches\",\n};\n\nexport const MATCHES_LIMIT = 19999;\nconst RESEARCH_DELAY = 240;\n\nexport class FindModelBoundToEditorModel {\n\tprivate readonly _editor: IActiveCodeEditor;\n\tprivate readonly _state: FindReplaceState;\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _decorations: FindDecorations;\n\tprivate _ignoreModelContentChanged: boolean;\n\tprivate readonly _startSearchingTimer: TimeoutTimer;\n\n\tprivate readonly _updateDecorationsScheduler: RunOnceScheduler;\n\tprivate _isDisposed: boolean;\n\n\tconstructor(editor: IActiveCodeEditor, state: FindReplaceState) {\n\t\tthis._editor = editor;\n\t\tthis._state = state;\n\t\tthis._isDisposed = false;\n\t\tthis._startSearchingTimer = new TimeoutTimer();\n\n\t\tthis._decorations = new FindDecorations(editor);\n\t\tthis._toDispose.add(this._decorations);\n\n\t\tthis._updateDecorationsScheduler = new RunOnceScheduler(() => {\n\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.research(false);\n\t\t}, 100);\n\t\tthis._toDispose.add(this._updateDecorationsScheduler);\n\n\t\tthis._toDispose.add(\n\t\t\tthis._editor.onDidChangeCursorPosition(\n\t\t\t\t(e: ICursorPositionChangedEvent) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.reason === CursorChangeReason.Explicit ||\n\t\t\t\t\t\te.reason === CursorChangeReason.Undo ||\n\t\t\t\t\t\te.reason === CursorChangeReason.Redo\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._decorations.setStartPosition(\n\t\t\t\t\t\t\tthis._editor.getPosition(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._ignoreModelContentChanged = false;\n\t\tthis._toDispose.add(\n\t\t\tthis._editor.onDidChangeModelContent((e) => {\n\t\t\t\tif (this._ignoreModelContentChanged) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.isFlush) {\n\t\t\t\t\t// a model.setValue() was called\n\t\t\t\t\tthis._decorations.reset();\n\t\t\t\t}\n\t\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\t\tthis._updateDecorationsScheduler.schedule();\n\t\t\t}),\n\t\t);\n\n\t\tthis._toDispose.add(\n\t\t\tthis._state.onFindReplaceStateChange((e) =>\n\t\t\t\tthis._onStateChanged(e),\n\t\t\t),\n\t\t);\n\n\t\tthis.research(false, this._state.searchScope);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tdispose(this._startSearchingTimer);\n\t\tthis._toDispose.dispose();\n\t}\n\n\tprivate _onStateChanged(e: FindReplaceStateChangedEvent): void {\n\t\tif (this._isDisposed) {\n\t\t\t// The find model is disposed during a find state changed event\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\t// The find model will be disposed momentarily\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\te.searchString ||\n\t\t\te.isReplaceRevealed ||\n\t\t\te.isRegex ||\n\t\t\te.wholeWord ||\n\t\t\te.matchCase ||\n\t\t\te.searchScope\n\t\t) {\n\t\t\tconst model = this._editor.getModel();\n\n\t\t\tif (model.isTooLargeForSyncing()) {\n\t\t\t\tthis._startSearchingTimer.cancel();\n\n\t\t\t\tthis._startSearchingTimer.setIfNotSet(() => {\n\t\t\t\t\tif (e.searchScope) {\n\t\t\t\t\t\tthis.research(e.moveCursor, this._state.searchScope);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.research(e.moveCursor);\n\t\t\t\t\t}\n\t\t\t\t}, RESEARCH_DELAY);\n\t\t\t} else if (e.searchScope) {\n\t\t\t\tthis.research(e.moveCursor, this._state.searchScope);\n\t\t\t} else {\n\t\t\t\tthis.research(e.moveCursor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static _getSearchRange(\n\t\tmodel: ITextModel,\n\t\tfindScope: Range | null,\n\t): Range {\n\t\t// If we have set now or before a find scope, use it for computing the search range\n\t\tif (findScope) {\n\t\t\treturn findScope;\n\t\t}\n\n\t\treturn model.getFullModelRange();\n\t}\n\n\tprivate research(\n\t\tmoveCursor: boolean,\n\t\tnewFindScope?: Range | Range[] | null,\n\t): void {\n\t\tlet findScopes: Range[] | null = null;\n\t\tif (typeof newFindScope !== \"undefined\") {\n\t\t\tif (newFindScope !== null) {\n\t\t\t\tif (Array.isArray(newFindScope)) {\n\t\t\t\t\tfindScopes = newFindScope;\n\t\t\t\t} else {\n\t\t\t\t\tfindScopes = [newFindScope as Range];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfindScopes = this._decorations.getFindScopes();\n\t\t}\n\t\tif (findScopes !== null) {\n\t\t\tfindScopes = findScopes.map((findScope) => {\n\t\t\t\tif (findScope.startLineNumber !== findScope.endLineNumber) {\n\t\t\t\t\tlet endLineNumber = findScope.endLineNumber;\n\n\t\t\t\t\tif (findScope.endColumn === 1) {\n\t\t\t\t\t\tendLineNumber = endLineNumber - 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Range(\n\t\t\t\t\t\tfindScope.startLineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tthis._editor.getModel().getLineMaxColumn(endLineNumber),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn findScope;\n\t\t\t});\n\t\t}\n\n\t\tconst findMatches = this._findMatches(findScopes, false, MATCHES_LIMIT);\n\t\tthis._decorations.set(findMatches, findScopes);\n\n\t\tconst editorSelection = this._editor.getSelection();\n\t\tlet currentMatchesPosition =\n\t\t\tthis._decorations.getCurrentMatchesPosition(editorSelection);\n\t\tif (currentMatchesPosition === 0 && findMatches.length > 0) {\n\t\t\t// current selection is not on top of a match\n\t\t\t// try to find its nearest result from the top of the document\n\t\t\tconst matchAfterSelection = findFirstIdxMonotonousOrArrLen(\n\t\t\t\tfindMatches.map((match) => match.range),\n\t\t\t\t(range) =>\n\t\t\t\t\tRange.compareRangesUsingStarts(range, editorSelection) >= 0,\n\t\t\t);\n\t\t\tcurrentMatchesPosition =\n\t\t\t\tmatchAfterSelection > 0\n\t\t\t\t\t? matchAfterSelection -\n\t\t\t\t\t\t1 +\n\t\t\t\t\t\t1 /** match position is one based */\n\t\t\t\t\t: currentMatchesPosition;\n\t\t}\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tcurrentMatchesPosition,\n\t\t\tthis._decorations.getCount(),\n\t\t\tundefined,\n\t\t);\n\n\t\tif (\n\t\t\tmoveCursor &&\n\t\t\tthis._editor.getOption(EditorOption.find).cursorMoveOnType\n\t\t) {\n\t\t\tthis._moveToNextMatch(this._decorations.getStartPosition());\n\t\t}\n\t}\n\n\tprivate _hasMatches(): boolean {\n\t\treturn this._state.matchesCount > 0;\n\t}\n\n\tprivate _cannotFind(): boolean {\n\t\tif (!this._hasMatches()) {\n\t\t\tconst findScope = this._decorations.getFindScope();\n\t\t\tif (findScope) {\n\t\t\t\t// Reveal the selection so user is reminded that 'selection find' is on.\n\t\t\t\tthis._editor.revealRangeInCenterIfOutsideViewport(\n\t\t\t\t\tfindScope,\n\t\t\t\t\tScrollType.Smooth,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _setCurrentFindMatch(match: Range): void {\n\t\tconst matchesPosition = this._decorations.setCurrentFindMatch(match);\n\t\tthis._state.changeMatchInfo(\n\t\t\tmatchesPosition,\n\t\t\tthis._decorations.getCount(),\n\t\t\tmatch,\n\t\t);\n\n\t\tthis._editor.setSelection(match);\n\t\tthis._editor.revealRangeInCenterIfOutsideViewport(\n\t\t\tmatch,\n\t\t\tScrollType.Smooth,\n\t\t);\n\t}\n\n\tprivate _prevSearchPosition(before: Position) {\n\t\tconst isUsingLineStops =\n\t\t\tthis._state.isRegex &&\n\t\t\t(this._state.searchString.indexOf(\"^\") >= 0 ||\n\t\t\t\tthis._state.searchString.indexOf(\"$\") >= 0);\n\t\tlet { lineNumber, column } = before;\n\t\tconst model = this._editor.getModel();\n\n\t\tif (isUsingLineStops || column === 1) {\n\t\t\tif (lineNumber === 1) {\n\t\t\t\tlineNumber = model.getLineCount();\n\t\t\t} else {\n\t\t\t\tlineNumber--;\n\t\t\t}\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t} else {\n\t\t\tcolumn--;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _moveToPrevMatch(before: Position, isRecursed = false): void {\n\t\tif (!this._state.canNavigateBack()) {\n\t\t\t// we are beyond the first matched find result\n\t\t\t// instead of doing nothing, we should refocus the first item\n\t\t\tconst nextMatchRange = this._decorations.matchAfterPosition(before);\n\n\t\t\tif (nextMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(nextMatchRange);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (this._decorations.getCount() < MATCHES_LIMIT) {\n\t\t\tlet prevMatchRange = this._decorations.matchBeforePosition(before);\n\n\t\t\tif (\n\t\t\t\tprevMatchRange &&\n\t\t\t\tprevMatchRange.isEmpty() &&\n\t\t\t\tprevMatchRange.getStartPosition().equals(before)\n\t\t\t) {\n\t\t\t\tbefore = this._prevSearchPosition(before);\n\t\t\t\tprevMatchRange = this._decorations.matchBeforePosition(before);\n\t\t\t}\n\n\t\t\tif (prevMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(prevMatchRange);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._cannotFind()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScope = this._decorations.getFindScope();\n\t\tconst searchRange = FindModelBoundToEditorModel._getSearchRange(\n\t\t\tthis._editor.getModel(),\n\t\t\tfindScope,\n\t\t);\n\n\t\t// ...(----)...|...\n\t\tif (searchRange.getEndPosition().isBefore(before)) {\n\t\t\tbefore = searchRange.getEndPosition();\n\t\t}\n\n\t\t// ...|...(----)...\n\t\tif (before.isBefore(searchRange.getStartPosition())) {\n\t\t\tbefore = searchRange.getEndPosition();\n\t\t}\n\n\t\tconst { lineNumber, column } = before;\n\t\tconst model = this._editor.getModel();\n\n\t\tlet position = new Position(lineNumber, column);\n\n\t\tlet prevMatch = model.findPreviousMatch(\n\t\t\tthis._state.searchString,\n\t\t\tposition,\n\t\t\tthis._state.isRegex,\n\t\t\tthis._state.matchCase,\n\t\t\tthis._state.wholeWord\n\t\t\t\t? this._editor.getOption(EditorOption.wordSeparators)\n\t\t\t\t: null,\n\t\t\tfalse,\n\t\t);\n\n\t\tif (\n\t\t\tprevMatch &&\n\t\t\tprevMatch.range.isEmpty() &&\n\t\t\tprevMatch.range.getStartPosition().equals(position)\n\t\t) {\n\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\tposition = this._prevSearchPosition(position);\n\t\t\tprevMatch = model.findPreviousMatch(\n\t\t\t\tthis._state.searchString,\n\t\t\t\tposition,\n\t\t\t\tthis._state.isRegex,\n\t\t\t\tthis._state.matchCase,\n\t\t\t\tthis._state.wholeWord\n\t\t\t\t\t? this._editor.getOption(EditorOption.wordSeparators)\n\t\t\t\t\t: null,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\n\t\tif (!prevMatch) {\n\t\t\t// there is precisely one match and selection is on top of it\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isRecursed && !searchRange.containsRange(prevMatch.range)) {\n\t\t\treturn this._moveToPrevMatch(\n\t\t\t\tprevMatch.range.getStartPosition(),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\n\t\tthis._setCurrentFindMatch(prevMatch.range);\n\t}\n\n\tpublic moveToPrevMatch(): void {\n\t\tthis._moveToPrevMatch(this._editor.getSelection().getStartPosition());\n\t}\n\n\tprivate _nextSearchPosition(after: Position) {\n\t\tconst isUsingLineStops =\n\t\t\tthis._state.isRegex &&\n\t\t\t(this._state.searchString.indexOf(\"^\") >= 0 ||\n\t\t\t\tthis._state.searchString.indexOf(\"$\") >= 0);\n\n\t\tlet { lineNumber, column } = after;\n\t\tconst model = this._editor.getModel();\n\n\t\tif (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {\n\t\t\tif (lineNumber === model.getLineCount()) {\n\t\t\t\tlineNumber = 1;\n\t\t\t} else {\n\t\t\t\tlineNumber++;\n\t\t\t}\n\t\t\tcolumn = 1;\n\t\t} else {\n\t\t\tcolumn++;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _moveToNextMatch(after: Position): void {\n\t\tif (!this._state.canNavigateForward()) {\n\t\t\t// we are beyond the last matched find result\n\t\t\t// instead of doing nothing, we should refocus the last item\n\t\t\tconst prevMatchRange = this._decorations.matchBeforePosition(after);\n\n\t\t\tif (prevMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(prevMatchRange);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (this._decorations.getCount() < MATCHES_LIMIT) {\n\t\t\tlet nextMatchRange = this._decorations.matchAfterPosition(after);\n\n\t\t\tif (\n\t\t\t\tnextMatchRange &&\n\t\t\t\tnextMatchRange.isEmpty() &&\n\t\t\t\tnextMatchRange.getStartPosition().equals(after)\n\t\t\t) {\n\t\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\t\tafter = this._nextSearchPosition(after);\n\t\t\t\tnextMatchRange = this._decorations.matchAfterPosition(after);\n\t\t\t}\n\t\t\tif (nextMatchRange) {\n\t\t\t\tthis._setCurrentFindMatch(nextMatchRange);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextMatch = this._getNextMatch(after, false, true);\n\t\tif (nextMatch) {\n\t\t\tthis._setCurrentFindMatch(nextMatch.range);\n\t\t}\n\t}\n\n\tprivate _getNextMatch(\n\t\tafter: Position,\n\t\tcaptureMatches: boolean,\n\t\tforceMove: boolean,\n\t\tisRecursed = false,\n\t): FindMatch | null {\n\t\tif (this._cannotFind()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst findScope = this._decorations.getFindScope();\n\t\tconst searchRange = FindModelBoundToEditorModel._getSearchRange(\n\t\t\tthis._editor.getModel(),\n\t\t\tfindScope,\n\t\t);\n\n\t\t// ...(----)...|...\n\t\tif (searchRange.getEndPosition().isBefore(after)) {\n\t\t\tafter = searchRange.getStartPosition();\n\t\t}\n\n\t\t// ...|...(----)...\n\t\tif (after.isBefore(searchRange.getStartPosition())) {\n\t\t\tafter = searchRange.getStartPosition();\n\t\t}\n\n\t\tconst { lineNumber, column } = after;\n\t\tconst model = this._editor.getModel();\n\n\t\tlet position = new Position(lineNumber, column);\n\n\t\tlet nextMatch = model.findNextMatch(\n\t\t\tthis._state.searchString,\n\t\t\tposition,\n\t\t\tthis._state.isRegex,\n\t\t\tthis._state.matchCase,\n\t\t\tthis._state.wholeWord\n\t\t\t\t? this._editor.getOption(EditorOption.wordSeparators)\n\t\t\t\t: null,\n\t\t\tcaptureMatches,\n\t\t);\n\n\t\tif (\n\t\t\tforceMove &&\n\t\t\tnextMatch &&\n\t\t\tnextMatch.range.isEmpty() &&\n\t\t\tnextMatch.range.getStartPosition().equals(position)\n\t\t) {\n\t\t\t// Looks like we're stuck at this position, unacceptable!\n\t\t\tposition = this._nextSearchPosition(position);\n\t\t\tnextMatch = model.findNextMatch(\n\t\t\t\tthis._state.searchString,\n\t\t\t\tposition,\n\t\t\t\tthis._state.isRegex,\n\t\t\t\tthis._state.matchCase,\n\t\t\t\tthis._state.wholeWord\n\t\t\t\t\t? this._editor.getOption(EditorOption.wordSeparators)\n\t\t\t\t\t: null,\n\t\t\t\tcaptureMatches,\n\t\t\t);\n\t\t}\n\n\t\tif (!nextMatch) {\n\t\t\t// there is precisely one match and selection is on top of it\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!isRecursed && !searchRange.containsRange(nextMatch.range)) {\n\t\t\treturn this._getNextMatch(\n\t\t\t\tnextMatch.range.getEndPosition(),\n\t\t\t\tcaptureMatches,\n\t\t\t\tforceMove,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\n\t\treturn nextMatch;\n\t}\n\n\tpublic moveToNextMatch(): void {\n\t\tthis._moveToNextMatch(this._editor.getSelection().getEndPosition());\n\t}\n\n\tprivate _moveToMatch(index: number): void {\n\t\tconst decorationRange = this._decorations.getDecorationRangeAt(index);\n\t\tif (decorationRange) {\n\t\t\tthis._setCurrentFindMatch(decorationRange);\n\t\t}\n\t}\n\n\tpublic moveToMatch(index: number): void {\n\t\tthis._moveToMatch(index);\n\t}\n\n\tprivate _getReplacePattern(): ReplacePattern {\n\t\tif (this._state.isRegex) {\n\t\t\treturn parseReplaceString(this._state.replaceString);\n\t\t}\n\t\treturn ReplacePattern.fromStaticValue(this._state.replaceString);\n\t}\n\n\tpublic replace(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst replacePattern = this._getReplacePattern();\n\t\tconst selection = this._editor.getSelection();\n\t\tconst nextMatch = this._getNextMatch(\n\t\t\tselection.getStartPosition(),\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t);\n\t\tif (nextMatch) {\n\t\t\tif (selection.equalsRange(nextMatch.range)) {\n\t\t\t\t// selection sits on a find match => replace it!\n\t\t\t\tconst replaceString = replacePattern.buildReplaceString(\n\t\t\t\t\tnextMatch.matches,\n\t\t\t\t\tthis._state.preserveCase,\n\t\t\t\t);\n\n\t\t\t\tconst command = new ReplaceCommand(selection, replaceString);\n\n\t\t\t\tthis._executeEditorCommand(\"replace\", command);\n\n\t\t\t\tthis._decorations.setStartPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t\tselection.startColumn + replaceString.length,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis.research(true);\n\t\t\t} else {\n\t\t\t\tthis._decorations.setStartPosition(this._editor.getPosition());\n\t\t\t\tthis._setCurrentFindMatch(nextMatch.range);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _findMatches(\n\t\tfindScopes: Range[] | null,\n\t\tcaptureMatches: boolean,\n\t\tlimitResultCount: number,\n\t): FindMatch[] {\n\t\tconst searchRanges = ((findScopes as []) || [null]).map(\n\t\t\t(scope: Range | null) =>\n\t\t\t\tFindModelBoundToEditorModel._getSearchRange(\n\t\t\t\t\tthis._editor.getModel(),\n\t\t\t\t\tscope,\n\t\t\t\t),\n\t\t);\n\n\t\treturn this._editor\n\t\t\t.getModel()\n\t\t\t.findMatches(\n\t\t\t\tthis._state.searchString,\n\t\t\t\tsearchRanges,\n\t\t\t\tthis._state.isRegex,\n\t\t\t\tthis._state.matchCase,\n\t\t\t\tthis._state.wholeWord\n\t\t\t\t\t? this._editor.getOption(EditorOption.wordSeparators)\n\t\t\t\t\t: null,\n\t\t\t\tcaptureMatches,\n\t\t\t\tlimitResultCount,\n\t\t\t);\n\t}\n\n\tpublic replaceAll(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScopes = this._decorations.getFindScopes();\n\n\t\tif (findScopes === null && this._state.matchesCount >= MATCHES_LIMIT) {\n\t\t\t// Doing a replace on the entire file that is over ${MATCHES_LIMIT} matches\n\t\t\tthis._largeReplaceAll();\n\t\t} else {\n\t\t\tthis._regularReplaceAll(findScopes);\n\t\t}\n\n\t\tthis.research(false);\n\t}\n\n\tprivate _largeReplaceAll(): void {\n\t\tconst searchParams = new SearchParams(\n\t\t\tthis._state.searchString,\n\t\t\tthis._state.isRegex,\n\t\t\tthis._state.matchCase,\n\t\t\tthis._state.wholeWord\n\t\t\t\t? this._editor.getOption(EditorOption.wordSeparators)\n\t\t\t\t: null,\n\t\t);\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet searchRegex = searchData.regex;\n\t\tif (!searchRegex.multiline) {\n\t\t\tlet mod = \"mu\";\n\t\t\tif (searchRegex.ignoreCase) {\n\t\t\t\tmod += \"i\";\n\t\t\t}\n\t\t\tif (searchRegex.global) {\n\t\t\t\tmod += \"g\";\n\t\t\t}\n\t\t\tsearchRegex = new RegExp(searchRegex.source, mod);\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst modelText = model.getValue(EndOfLinePreference.LF);\n\t\tconst fullModelRange = model.getFullModelRange();\n\n\t\tconst replacePattern = this._getReplacePattern();\n\t\tlet resultText: string;\n\t\tconst preserveCase = this._state.preserveCase;\n\n\t\tif (replacePattern.hasReplacementPatterns || preserveCase) {\n\t\t\tresultText = modelText.replace(searchRegex, () =>\n\t\t\t\treplacePattern.buildReplaceString(\n\t\t\t\t\t<string[]>(<any>arguments),\n\t\t\t\t\tpreserveCase,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tresultText = modelText.replace(\n\t\t\t\tsearchRegex,\n\t\t\t\treplacePattern.buildReplaceString(null, preserveCase),\n\t\t\t);\n\t\t}\n\n\t\tconst command = new ReplaceCommandThatPreservesSelection(\n\t\t\tfullModelRange,\n\t\t\tresultText,\n\t\t\tthis._editor.getSelection(),\n\t\t);\n\t\tthis._executeEditorCommand(\"replaceAll\", command);\n\t}\n\n\tprivate _regularReplaceAll(findScopes: Range[] | null): void {\n\t\tconst replacePattern = this._getReplacePattern();\n\t\t// Get all the ranges (even more than the highlighted ones)\n\t\tconst matches = this._findMatches(\n\t\t\tfindScopes,\n\t\t\treplacePattern.hasReplacementPatterns || this._state.preserveCase,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t);\n\n\t\tconst replaceStrings: string[] = [];\n\t\tfor (let i = 0, len = matches.length; i < len; i++) {\n\t\t\treplaceStrings[i] = replacePattern.buildReplaceString(\n\t\t\t\tmatches[i].matches,\n\t\t\t\tthis._state.preserveCase,\n\t\t\t);\n\t\t}\n\n\t\tconst command = new ReplaceAllCommand(\n\t\t\tthis._editor.getSelection(),\n\t\t\tmatches.map((m) => m.range),\n\t\t\treplaceStrings,\n\t\t);\n\t\tthis._executeEditorCommand(\"replaceAll\", command);\n\t}\n\n\tpublic selectAllMatches(): void {\n\t\tif (!this._hasMatches()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findScopes = this._decorations.getFindScopes();\n\n\t\t// Get all the ranges (even more than the highlighted ones)\n\t\tconst matches = this._findMatches(\n\t\t\tfindScopes,\n\t\t\tfalse,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t);\n\t\tlet selections = matches.map(\n\t\t\t(m) =>\n\t\t\t\tnew Selection(\n\t\t\t\t\tm.range.startLineNumber,\n\t\t\t\t\tm.range.startColumn,\n\t\t\t\t\tm.range.endLineNumber,\n\t\t\t\t\tm.range.endColumn,\n\t\t\t\t),\n\t\t);\n\n\t\t// If one of the ranges is the editor selection, then maintain it as primary\n\t\tconst editorSelection = this._editor.getSelection();\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst sel = selections[i];\n\t\t\tif (sel.equalsRange(editorSelection)) {\n\t\t\t\tselections = [editorSelection]\n\t\t\t\t\t.concat(selections.slice(0, i))\n\t\t\t\t\t.concat(selections.slice(i + 1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._editor.setSelections(selections);\n\t}\n\n\tprivate _executeEditorCommand(source: string, command: ICommand): void {\n\t\ttry {\n\t\t\tthis._ignoreModelContentChanged = true;\n\t\t\tthis._editor.pushUndoStop();\n\t\t\tthis._editor.executeCommand(source, command);\n\t\t\tthis._editor.pushUndoStop();\n\t\t} finally {\n\t\t\tthis._ignoreModelContentChanged = false;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
