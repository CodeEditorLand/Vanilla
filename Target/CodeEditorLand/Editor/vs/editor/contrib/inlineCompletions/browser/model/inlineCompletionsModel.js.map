{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/inlineCompletionsModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFindFirst } from '../../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedError, onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, IReader, ITransaction, autorun, derived, derivedHandleChanges, derivedOpts, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../../base/common/observable.js';\nimport { commonPrefixLength } from '../../../../../base/common/strings.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { EditOperation } from '../../../../common/core/editOperation.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { SingleTextEdit } from '../../../../common/core/textEdit.js';\nimport { TextLength } from '../../../../common/core/textLength.js';\nimport { ScrollType } from '../../../../common/editorCommon.js';\nimport { Command, InlineCompletionContext, InlineCompletionTriggerKind, PartialAcceptTriggerKind } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\nimport { IFeatureDebounceInformation } from '../../../../common/services/languageFeatureDebounce.js';\nimport { IModelContentChangedEvent } from '../../../../common/textModelEvents.js';\nimport { SnippetController2 } from '../../../snippet/browser/snippetController2.js';\nimport { addPositions, getEndPositionsAfterApplying, substringPos, subtractPositions } from '../utils.js';\nimport { computeGhostText } from './computeGhostText.js';\nimport { GhostText, GhostTextOrReplacement, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionWithUpdatedRange, InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEditHelpers.js';\nimport { SuggestItemInfo } from './suggestWidgetAdaptor.js';\n\nexport class InlineCompletionsModel extends Disposable {\n\tprivate readonly _source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this._textModelVersionId, this._debounceValue));\n\tprivate readonly _isActive = observableValue<boolean>(this, false);\n\tprivate readonly _forceUpdateExplicitlySignal = observableSignal(this);\n\n\t// We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n\tprivate readonly _selectedInlineCompletionId = observableValue<string | undefined>(this, undefined);\n\tprivate readonly _primaryPosition = derived(this, reader => this._positions.read(reader)[0] ?? new Position(1, 1));\n\n\tprivate _isAcceptingPartially = false;\n\tpublic get isAcceptingPartially() { return this._isAcceptingPartially; }\n\n\tconstructor(\n\t\tpublic readonly textModel: ITextModel,\n\t\tpublic readonly selectedSuggestItem: IObservable<SuggestItemInfo | undefined>,\n\t\tpublic readonly _textModelVersionId: IObservable<number | null, IModelContentChangedEvent | undefined>,\n\t\tprivate readonly _positions: IObservable<readonly Position[]>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\tprivate readonly _suggestPreviewEnabled: IObservable<boolean>,\n\t\tprivate readonly _suggestPreviewMode: IObservable<'prefix' | 'subword' | 'subwordSmart'>,\n\t\tprivate readonly _inlineSuggestMode: IObservable<'prefix' | 'subword' | 'subwordSmart'>,\n\t\tprivate readonly _enabled: IObservable<boolean>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n\n\t\tlet lastItem: InlineCompletionWithUpdatedRange | undefined = undefined;\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description call handleItemDidShow */\n\t\t\tconst item = this.state.read(reader);\n\t\t\tconst completion = item?.inlineCompletion;\n\t\t\tif (completion?.semanticId !== lastItem?.semanticId) {\n\t\t\t\tlastItem = completion;\n\t\t\t\tif (completion) {\n\t\t\t\t\tconst i = completion.inlineCompletion;\n\t\t\t\t\tconst src = i.source;\n\t\t\t\t\tsrc.provider.handleItemDidShow?.(src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate readonly _preserveCurrentCompletionReasons = new Set([\n\t\tVersionIdChangeReason.Redo,\n\t\tVersionIdChangeReason.Undo,\n\t\tVersionIdChangeReason.AcceptWord,\n\t]);\n\n\tprivate _getReason(e: IModelContentChangedEvent | undefined): VersionIdChangeReason {\n\t\tif (e?.isUndoing) { return VersionIdChangeReason.Undo; }\n\t\tif (e?.isRedoing) { return VersionIdChangeReason.Redo; }\n\t\tif (this.isAcceptingPartially) { return VersionIdChangeReason.AcceptWord; }\n\t\treturn VersionIdChangeReason.Other;\n\t}\n\n\tprivate readonly _fetchInlineCompletionsPromise = derivedHandleChanges({\n\t\towner: this,\n\t\tcreateEmptyChangeSummary: () => ({\n\t\t\tpreserveCurrentCompletion: false,\n\t\t\tinlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n\t\t}),\n\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t/** @description fetch inline completions */\n\t\t\tif (ctx.didChange(this._textModelVersionId) && this._preserveCurrentCompletionReasons.has(this._getReason(ctx.change))) {\n\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t} else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n\t\t\t\tchangeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t}, (reader, changeSummary) => {\n\t\tthis._forceUpdateExplicitlySignal.read(reader);\n\t\tconst shouldUpdate = (this._enabled.read(reader) && this.selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n\t\tif (!shouldUpdate) {\n\t\t\tthis._source.cancelUpdate();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._textModelVersionId.read(reader); // Refetch on text change\n\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n\t\tconst suggestItem = this.selectedSuggestItem.read(reader);\n\t\tif (suggestWidgetInlineCompletions && !suggestItem) {\n\t\t\tconst inlineCompletions = this._source.inlineCompletions.get();\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Seed inline completions with (newer) suggest widget inline completions */\n\t\t\t\tif (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n\t\t\t\t\tthis._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n\t\t\t\t}\n\t\t\t\tthis._source.clearSuggestWidgetInlineCompletions(tx);\n\t\t\t});\n\t\t}\n\n\t\tconst cursorPosition = this._primaryPosition.read(reader);\n\t\tconst context: InlineCompletionContext = {\n\t\t\ttriggerKind: changeSummary.inlineCompletionTriggerKind,\n\t\t\tselectedSuggestionInfo: suggestItem?.toSelectedSuggestionInfo(),\n\t\t};\n\t\tconst itemToPreserveCandidate = this.selectedInlineCompletion.get();\n\t\tconst itemToPreserve = changeSummary.preserveCurrentCompletion || itemToPreserveCandidate?.forwardStable\n\t\t\t? itemToPreserveCandidate : undefined;\n\t\treturn this._source.fetch(cursorPosition, context, itemToPreserve);\n\t});\n\n\tpublic async trigger(tx?: ITransaction): Promise<void> {\n\t\tthis._isActive.set(true, tx);\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic async triggerExplicitly(tx?: ITransaction): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tthis._isActive.set(true, tx);\n\t\t\tthis._forceUpdateExplicitlySignal.trigger(tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic stop(tx?: ITransaction): void {\n\t\tsubtransaction(tx, tx => {\n\t\t\tthis._isActive.set(false, tx);\n\t\t\tthis._source.clear(tx);\n\t\t});\n\t}\n\n\tprivate readonly _filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n\t\tconst c = this._source.inlineCompletions.read(reader);\n\t\tif (!c) { return []; }\n\t\tconst cursorPosition = this._primaryPosition.read(reader);\n\t\tconst filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n\t\treturn filteredCompletions;\n\t});\n\n\tpublic readonly selectedInlineCompletionIndex = derived<number>(this, (reader) => {\n\t\tconst selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this._selectedInlineCompletionId === undefined ? -1\n\t\t\t: filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n\t\tif (idx === -1) {\n\t\t\t// Reset the selection so that the selection does not jump back when it appears again\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t\treturn 0;\n\t\t}\n\t\treturn idx;\n\t});\n\n\tpublic readonly selectedInlineCompletion = derived<InlineCompletionWithUpdatedRange | undefined>(this, (reader) => {\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this.selectedInlineCompletionIndex.read(reader);\n\t\treturn filteredCompletions[idx];\n\t});\n\n\tpublic readonly activeCommands = derivedOpts<Command[]>({ owner: this, equalsFn: itemsEquals() },\n\t\tr => this.selectedInlineCompletion.read(r)?.inlineCompletion.source.inlineCompletions.commands ?? []\n\t);\n\n\tpublic readonly lastTriggerKind: IObservable<InlineCompletionTriggerKind | undefined>\n\t\t= this._source.inlineCompletions.map(this, v => v?.request.context.triggerKind);\n\n\tpublic readonly inlineCompletionsCount = derived<number | undefined>(this, reader => {\n\t\tif (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n\t\t\treturn this._filteredInlineCompletionItems.read(reader).length;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tpublic readonly state = derivedOpts<{\n\t\tedits: readonly SingleTextEdit[];\n\t\tprimaryGhostText: GhostTextOrReplacement;\n\t\tghostTexts: readonly GhostTextOrReplacement[];\n\t\tsuggestItem: SuggestItemInfo | undefined;\n\t\tinlineCompletion: InlineCompletionWithUpdatedRange | undefined;\n\t} | undefined>({\n\t\towner: this,\n\t\tequalsFn: (a, b) => {\n\t\t\tif (!a || !b) { return a === b; }\n\t\t\treturn ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n\t\t\t\t&& a.inlineCompletion === b.inlineCompletion\n\t\t\t\t&& a.suggestItem === b.suggestItem;\n\t\t}\n\t}, (reader) => {\n\t\tconst model = this.textModel;\n\n\t\tconst suggestItem = this.selectedSuggestItem.read(reader);\n\t\tif (suggestItem) {\n\t\t\tconst suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.toSingleTextEdit(), model);\n\t\t\tconst augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n\n\t\t\tconst isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n\t\t\tif (!isSuggestionPreviewEnabled && !augmentation) { return undefined; }\n\n\t\t\tconst fullEdit = augmentation?.edit ?? suggestCompletionEdit;\n\t\t\tconst fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n\n\t\t\tconst mode = this._suggestPreviewMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst edits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n\t\t\tconst ghostTexts = edits\n\t\t\t\t.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength))\n\t\t\t\t.filter(isDefined);\n\t\t\tconst primaryGhostText = ghostTexts[0] ?? new GhostText(fullEdit.range.endLineNumber, []);\n\t\t\treturn { edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation?.completion, suggestItem };\n\t\t} else {\n\t\t\tif (!this._isActive.read(reader)) { return undefined; }\n\t\t\tconst inlineCompletion = this.selectedInlineCompletion.read(reader);\n\t\t\tif (!inlineCompletion) { return undefined; }\n\n\t\t\tconst replacement = inlineCompletion.toSingleTextEdit(reader);\n\t\t\tconst mode = this._inlineSuggestMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst edits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n\t\t\tconst ghostTexts = edits\n\t\t\t\t.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], 0))\n\t\t\t\t.filter(isDefined);\n\t\t\tif (!ghostTexts[0]) { return undefined; }\n\t\t\treturn { edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n\t\t}\n\t});\n\n\tprivate _computeAugmentation(suggestCompletion: SingleTextEdit, reader: IReader | undefined) {\n\t\tconst model = this.textModel;\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n\t\tconst candidateInlineCompletions = suggestWidgetInlineCompletions\n\t\t\t? suggestWidgetInlineCompletions.inlineCompletions\n\t\t\t: [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n\n\t\tconst augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n\t\t\tlet r = completion.toSingleTextEdit(reader);\n\t\t\tr = singleTextRemoveCommonPrefix(\n\t\t\t\tr,\n\t\t\t\tmodel,\n\t\t\t\tRange.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition())\n\t\t\t);\n\t\t\treturn singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n\t\t});\n\n\t\treturn augmentedCompletion;\n\t}\n\n\tpublic readonly ghostTexts = derivedOpts({ owner: this, equalsFn: ghostTextsOrReplacementsEqual }, reader => {\n\t\tconst v = this.state.read(reader);\n\t\tif (!v) { return undefined; }\n\t\treturn v.ghostTexts;\n\t});\n\n\tpublic readonly primaryGhostText = derivedOpts({ owner: this, equalsFn: ghostTextOrReplacementEquals }, reader => {\n\t\tconst v = this.state.read(reader);\n\t\tif (!v) { return undefined; }\n\t\treturn v?.primaryGhostText;\n\t});\n\n\tprivate async _deltaSelectedInlineCompletionIndex(delta: 1 | -1): Promise<void> {\n\t\tawait this.triggerExplicitly();\n\n\t\tconst completions = this._filteredInlineCompletionItems.get() || [];\n\t\tif (completions.length > 0) {\n\t\t\tconst newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n\t\t\tthis._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n\t\t} else {\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t}\n\t}\n\n\tpublic async next(): Promise<void> {\n\t\tawait this._deltaSelectedInlineCompletionIndex(1);\n\t}\n\n\tpublic async previous(): Promise<void> {\n\t\tawait this._deltaSelectedInlineCompletionIndex(-1);\n\t}\n\n\tpublic async accept(editor: ICodeEditor): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst state = this.state.get();\n\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\treturn;\n\t\t}\n\t\tconst completion = state.inlineCompletion.toInlineCompletion(undefined);\n\n\t\tif (completion.command) {\n\t\t\t// Make sure the completion list will not be disposed.\n\t\t\tcompletion.source.addRef();\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\tif (completion.snippetInfo) {\n\t\t\teditor.executeEdits(\n\t\t\t\t'inlineSuggestion.accept',\n\t\t\t\t[\n\t\t\t\t\tEditOperation.replace(completion.range, ''),\n\t\t\t\t\t...completion.additionalTextEdits\n\t\t\t\t]\n\t\t\t);\n\t\t\teditor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n\t\t\tSnippetController2.get(editor)?.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n\t\t} else {\n\t\t\tconst edits = state.edits;\n\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\t\t\teditor.executeEdits('inlineSuggestion.accept', [\n\t\t\t\t...edits.map(edit => EditOperation.replace(edit.range, edit.text)),\n\t\t\t\t...completion.additionalTextEdits\n\t\t\t]);\n\t\t\teditor.setSelections(selections, 'inlineCompletionAccept');\n\t\t}\n\n\t\t// Reset before invoking the command, as the command might cause a follow up trigger (which we don't want to reset).\n\t\tthis.stop();\n\n\t\tif (completion.command) {\n\t\t\tawait this._commandService\n\t\t\t\t.executeCommand(completion.command.id, ...(completion.command.arguments || []))\n\t\t\t\t.then(undefined, onUnexpectedExternalError);\n\t\t\tcompletion.source.removeRef();\n\t\t}\n\t}\n\n\tpublic async acceptNextWord(editor: ICodeEditor): Promise<void> {\n\t\tawait this._acceptNext(editor, (pos, text) => {\n\t\t\tconst langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n\t\t\tconst config = this._languageConfigurationService.getLanguageConfiguration(langId);\n\t\t\tconst wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n\n\t\t\tconst m1 = text.match(wordRegExp);\n\t\t\tlet acceptUntilIndexExclusive = 0;\n\t\t\tif (m1 && m1.index !== undefined) {\n\t\t\t\tif (m1.index === 0) {\n\t\t\t\t\tacceptUntilIndexExclusive = m1[0].length;\n\t\t\t\t} else {\n\t\t\t\t\tacceptUntilIndexExclusive = m1.index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tacceptUntilIndexExclusive = text.length;\n\t\t\t}\n\n\t\t\tconst wsRegExp = /\\s+/g;\n\t\t\tconst m2 = wsRegExp.exec(text);\n\t\t\tif (m2 && m2.index !== undefined) {\n\t\t\t\tif (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n\t\t\t\t\tacceptUntilIndexExclusive = m2.index + m2[0].length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acceptUntilIndexExclusive;\n\t\t}, PartialAcceptTriggerKind.Word);\n\t}\n\n\tpublic async acceptNextLine(editor: ICodeEditor): Promise<void> {\n\t\tawait this._acceptNext(editor, (pos, text) => {\n\t\t\tconst m = text.match(/\\n/);\n\t\t\tif (m && m.index !== undefined) {\n\t\t\t\treturn m.index + 1;\n\t\t\t}\n\t\t\treturn text.length;\n\t\t}, PartialAcceptTriggerKind.Line);\n\t}\n\n\tprivate async _acceptNext(editor: ICodeEditor, getAcceptUntilIndex: (position: Position, text: string) => number, kind: PartialAcceptTriggerKind): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst state = this.state.get();\n\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\treturn;\n\t\t}\n\t\tconst ghostText = state.primaryGhostText;\n\t\tconst completion = state.inlineCompletion.toInlineCompletion(undefined);\n\n\t\tif (completion.snippetInfo || completion.filterText !== completion.insertText) {\n\t\t\t// not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n\t\t\tawait this.accept(editor);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstPart = ghostText.parts[0];\n\t\tconst ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n\t\tconst ghostTextVal = firstPart.text;\n\t\tconst acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n\t\tif (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n\t\t\tthis.accept(editor);\n\t\t\treturn;\n\t\t}\n\t\tconst partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n\n\t\tconst positions = this._positions.get();\n\t\tconst cursorPosition = positions[0];\n\n\t\t// Executing the edit might free the completion, so we have to hold a reference on it.\n\t\tcompletion.source.addRef();\n\t\ttry {\n\t\t\tthis._isAcceptingPartially = true;\n\t\t\ttry {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\tconst replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n\t\t\t\tconst newText = editor.getModel()!.getValueInRange(replaceRange) + partialGhostTextVal;\n\t\t\t\tconst primaryEdit = new SingleTextEdit(replaceRange, newText);\n\t\t\t\tconst edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)];\n\t\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\t\t\t\teditor.executeEdits('inlineSuggestion.accept', edits.map(edit => EditOperation.replace(edit.range, edit.text)));\n\t\t\t\teditor.setSelections(selections, 'inlineCompletionPartialAccept');\n\t\t\t\teditor.revealPositionInCenterIfOutsideViewport(editor.getPosition()!, ScrollType.Immediate);\n\t\t\t} finally {\n\t\t\t\tthis._isAcceptingPartially = false;\n\t\t\t}\n\n\t\t\tif (completion.source.provider.handlePartialAccept) {\n\t\t\t\tconst acceptedRange = Range.fromPositions(completion.range.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n\t\t\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\t\t\tconst text = editor.getModel()!.getValueInRange(acceptedRange, EndOfLinePreference.LF);\n\t\t\t\tcompletion.source.provider.handlePartialAccept(\n\t\t\t\t\tcompletion.source.inlineCompletions,\n\t\t\t\t\tcompletion.sourceInlineCompletion,\n\t\t\t\t\ttext.length,\n\t\t\t\t\t{ kind, }\n\t\t\t\t);\n\t\t\t}\n\t\t} finally {\n\t\t\tcompletion.source.removeRef();\n\t\t}\n\t}\n\n\tpublic handleSuggestAccepted(item: SuggestItemInfo) {\n\t\tconst itemEdit = singleTextRemoveCommonPrefix(item.toSingleTextEdit(), this.textModel);\n\t\tconst augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n\t\tif (!augmentedCompletion) { return; }\n\n\t\tconst inlineCompletion = augmentedCompletion.completion.inlineCompletion;\n\t\tinlineCompletion.source.provider.handlePartialAccept?.(\n\t\t\tinlineCompletion.source.inlineCompletions,\n\t\t\tinlineCompletion.sourceInlineCompletion,\n\t\t\titemEdit.text.length,\n\t\t\t{\n\t\t\t\tkind: PartialAcceptTriggerKind.Suggest,\n\t\t\t}\n\t\t);\n\t}\n}\n\nexport enum VersionIdChangeReason {\n\tUndo,\n\tRedo,\n\tAcceptWord,\n\tOther,\n}\n\nexport function getSecondaryEdits(textModel: ITextModel, positions: readonly Position[], primaryEdit: SingleTextEdit): SingleTextEdit[] {\n\tif (positions.length === 1) {\n\t\t// No secondary cursor positions\n\t\treturn [];\n\t}\n\tconst primaryPosition = positions[0];\n\tconst secondaryPositions = positions.slice(1);\n\tconst primaryEditStartPosition = primaryEdit.range.getStartPosition();\n\tconst primaryEditEndPosition = primaryEdit.range.getEndPosition();\n\tconst replacedTextAfterPrimaryCursor = textModel.getValueInRange(\n\t\tRange.fromPositions(primaryPosition, primaryEditEndPosition)\n\t);\n\tconst positionWithinTextEdit = subtractPositions(primaryPosition, primaryEditStartPosition);\n\tif (positionWithinTextEdit.lineNumber < 1) {\n\t\tonUnexpectedError(new BugIndicatingError(\n\t\t\t`positionWithinTextEdit line number should be bigger than 0.\n\t\t\tInvalid subtraction between ${primaryPosition.toString()} and ${primaryEditStartPosition.toString()}`\n\t\t));\n\t\treturn [];\n\t}\n\tconst secondaryEditText = substringPos(primaryEdit.text, positionWithinTextEdit);\n\treturn secondaryPositions.map(pos => {\n\t\tconst posEnd = addPositions(subtractPositions(pos, primaryEditStartPosition), primaryEditEndPosition);\n\t\tconst textAfterSecondaryCursor = textModel.getValueInRange(\n\t\t\tRange.fromPositions(pos, posEnd)\n\t\t);\n\t\tconst l = commonPrefixLength(replacedTextAfterPrimaryCursor, textAfterSecondaryCursor);\n\t\tconst range = Range.fromPositions(pos, pos.delta(0, l));\n\t\treturn new SingleTextEdit(range, secondaryEditText);\n\t});\n}\n"],
  "mappings": "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",
  "names": ["tx", "c", "VersionIdChangeReason"]
}
