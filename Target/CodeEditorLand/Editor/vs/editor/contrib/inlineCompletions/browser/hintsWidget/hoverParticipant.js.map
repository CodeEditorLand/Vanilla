{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { MarkdownString } from \"../../../../../base/common/htmlContent.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport {\n\tautorun,\n\tconstObservable,\n} from \"../../../../../base/common/observable.js\";\nimport * as nls from \"../../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../../platform/accessibility/common/accessibility.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { IOpenerService } from \"../../../../../platform/opener/common/opener.js\";\nimport { ITelemetryService } from \"../../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype ICodeEditor,\n\ttype IEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../../browser/editorBrowser.js\";\nimport { MarkdownRenderer } from \"../../../../browser/widget/markdownRenderer/browser/markdownRenderer.js\";\nimport { EditorOption } from \"../../../../common/config/editorOptions.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { ILanguageService } from \"../../../../common/languages/language.js\";\nimport type { IModelDecoration } from \"../../../../common/model.js\";\nimport {\n\ttype HoverAnchor,\n\tHoverAnchorType,\n\tHoverForeignElementAnchor,\n\ttype IEditorHoverParticipant,\n\ttype IEditorHoverRenderContext,\n\ttype IHoverPart,\n\ttype IRenderedHoverPart,\n\ttype IRenderedHoverParts,\n\tRenderedHoverParts,\n} from \"../../../hover/browser/hoverTypes.js\";\nimport { InlineCompletionsController } from \"../controller/inlineCompletionsController.js\";\nimport { InlineSuggestionHintsContentWidget } from \"./inlineCompletionsHintsWidget.js\";\n\nexport class InlineCompletionsHover implements IHoverPart {\n\tconstructor(\n\t\tpublic readonly owner: IEditorHoverParticipant<InlineCompletionsHover>,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly controller: InlineCompletionsController,\n\t) {}\n\n\tpublic isValidForHoverAnchor(anchor: HoverAnchor): boolean {\n\t\treturn (\n\t\t\tanchor.type === HoverAnchorType.Range &&\n\t\t\tthis.range.startColumn <= anchor.range.startColumn &&\n\t\t\tthis.range.endColumn >= anchor.range.endColumn\n\t\t);\n\t}\n}\n\nexport class InlineCompletionsHoverParticipant\n\timplements IEditorHoverParticipant<InlineCompletionsHover>\n{\n\tpublic readonly hoverOrdinal: number = 4;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t}\n\n\tsuggestHoverAnchor(mouseEvent: IEditorMouseEvent): HoverAnchor | null {\n\t\tconst controller = InlineCompletionsController.get(this._editor);\n\t\tif (!controller) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\t\tif (target.type === MouseTargetType.CONTENT_VIEW_ZONE) {\n\t\t\t// handle the case where the mouse is over the view zone\n\t\t\tconst viewZoneData = target.detail;\n\t\t\tif (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {\n\t\t\t\treturn new HoverForeignElementAnchor(\n\t\t\t\t\t1000,\n\t\t\t\t\tthis,\n\t\t\t\t\tRange.fromPositions(\n\t\t\t\t\t\tthis._editor\n\t\t\t\t\t\t\t.getModel()!\n\t\t\t\t\t\t\t.validatePosition(\n\t\t\t\t\t\t\t\tviewZoneData.positionBefore ||\n\t\t\t\t\t\t\t\t\tviewZoneData.position,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\tmouseEvent.event.posx,\n\t\t\t\t\tmouseEvent.event.posy,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (target.type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\t// handle the case where the mouse is over the empty portion of a line following ghost text\n\t\t\tif (controller.shouldShowHoverAt(target.range)) {\n\t\t\t\treturn new HoverForeignElementAnchor(\n\t\t\t\t\t1000,\n\t\t\t\t\tthis,\n\t\t\t\t\ttarget.range,\n\t\t\t\t\tmouseEvent.event.posx,\n\t\t\t\t\tmouseEvent.event.posy,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (target.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\t// handle the case where the mouse is directly over ghost text\n\t\t\tconst mightBeForeignElement = target.detail.mightBeForeignElement;\n\t\t\tif (\n\t\t\t\tmightBeForeignElement &&\n\t\t\t\tcontroller.shouldShowHoverAt(target.range)\n\t\t\t) {\n\t\t\t\treturn new HoverForeignElementAnchor(\n\t\t\t\t\t1000,\n\t\t\t\t\tthis,\n\t\t\t\t\ttarget.range,\n\t\t\t\t\tmouseEvent.event.posx,\n\t\t\t\t\tmouseEvent.event.posy,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tcomputeSync(\n\t\tanchor: HoverAnchor,\n\t\tlineDecorations: IModelDecoration[],\n\t): InlineCompletionsHover[] {\n\t\tif (\n\t\t\tthis._editor.getOption(EditorOption.inlineSuggest).showToolbar !==\n\t\t\t\"onHover\"\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst controller = InlineCompletionsController.get(this._editor);\n\t\tif (controller && controller.shouldShowHoverAt(anchor.range)) {\n\t\t\treturn [new InlineCompletionsHover(this, anchor.range, controller)];\n\t\t}\n\t\treturn [];\n\t}\n\n\trenderHoverParts(\n\t\tcontext: IEditorHoverRenderContext,\n\t\thoverParts: InlineCompletionsHover[],\n\t): IRenderedHoverParts<InlineCompletionsHover> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst part = hoverParts[0];\n\n\t\tthis._telemetryService.publicLog2<\n\t\t\t{},\n\t\t\t{\n\t\t\t\towner: \"hediet\";\n\t\t\t\tcomment: \"This event tracks whenever an inline completion hover is shown.\";\n\t\t\t}\n\t\t>(\"inlineCompletionHover.shown\");\n\n\t\tif (\n\t\t\tthis.accessibilityService.isScreenReaderOptimized() &&\n\t\t\t!this._editor.getOption(\n\t\t\t\tEditorOption.screenReaderAnnounceInlineSuggestion,\n\t\t\t)\n\t\t) {\n\t\t\tdisposables.add(this.renderScreenReaderText(context, part));\n\t\t}\n\n\t\tconst model = part.controller.model.get()!;\n\n\t\tconst w = this._instantiationService.createInstance(\n\t\t\tInlineSuggestionHintsContentWidget,\n\t\t\tthis._editor,\n\t\t\tfalse,\n\t\t\tconstObservable(null),\n\t\t\tmodel.selectedInlineCompletionIndex,\n\t\t\tmodel.inlineCompletionsCount,\n\t\t\tmodel.activeCommands,\n\t\t);\n\t\tconst widgetNode: HTMLElement = w.getDomNode();\n\t\tcontext.fragment.appendChild(widgetNode);\n\n\t\tmodel.triggerExplicitly();\n\n\t\tdisposables.add(w);\n\t\tconst renderedHoverPart: IRenderedHoverPart<InlineCompletionsHover> = {\n\t\t\thoverPart: part,\n\t\t\thoverElement: widgetNode,\n\t\t\tdispose() {\n\t\t\t\tdisposables.dispose();\n\t\t\t},\n\t\t};\n\t\treturn new RenderedHoverParts([renderedHoverPart]);\n\t}\n\n\tgetAccessibleContent(hoverPart: InlineCompletionsHover): string {\n\t\treturn nls.localize(\n\t\t\t\"hoverAccessibilityStatusBar\",\n\t\t\t\"There are inline completions here\",\n\t\t);\n\t}\n\n\tprivate renderScreenReaderText(\n\t\tcontext: IEditorHoverRenderContext,\n\t\tpart: InlineCompletionsHover,\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tconst $ = dom.$;\n\t\tconst markdownHoverElement = $(\"div.hover-row.markdown-hover\");\n\t\tconst hoverContentsElement = dom.append(\n\t\t\tmarkdownHoverElement,\n\t\t\t$(\"div.hover-contents\", { [\"aria-live\"]: \"assertive\" }),\n\t\t);\n\t\tconst renderer = disposables.add(\n\t\t\tnew MarkdownRenderer(\n\t\t\t\t{ editor: this._editor },\n\t\t\t\tthis._languageService,\n\t\t\t\tthis._openerService,\n\t\t\t),\n\t\t);\n\t\tconst render = (code: string) => {\n\t\t\tdisposables.add(\n\t\t\t\trenderer.onDidRenderAsync(() => {\n\t\t\t\t\thoverContentsElement.className =\n\t\t\t\t\t\t\"hover-contents code-hover-contents\";\n\t\t\t\t\tcontext.onContentsChanged();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst inlineSuggestionAvailable = nls.localize(\n\t\t\t\t\"inlineSuggestionFollows\",\n\t\t\t\t\"Suggestion:\",\n\t\t\t);\n\t\t\tconst renderedContents = disposables.add(\n\t\t\t\trenderer.render(\n\t\t\t\t\tnew MarkdownString()\n\t\t\t\t\t\t.appendText(inlineSuggestionAvailable)\n\t\t\t\t\t\t.appendCodeblock(\"text\", code),\n\t\t\t\t),\n\t\t\t);\n\t\t\thoverContentsElement.replaceChildren(renderedContents.element);\n\t\t};\n\n\t\tdisposables.add(\n\t\t\tautorun((reader) => {\n\t\t\t\t/** @description update hover */\n\t\t\t\tconst ghostText = part.controller.model\n\t\t\t\t\t.read(reader)\n\t\t\t\t\t?.primaryGhostText.read(reader);\n\t\t\t\tif (ghostText) {\n\t\t\t\t\tconst lineText = this._editor\n\t\t\t\t\t\t.getModel()!\n\t\t\t\t\t\t.getLineContent(ghostText.lineNumber);\n\t\t\t\t\trender(ghostText.renderForScreenReader(lineText));\n\t\t\t\t} else {\n\t\t\t\t\tdom.reset(hoverContentsElement);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tcontext.fragment.appendChild(markdownHoverElement);\n\t\treturn disposables;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
