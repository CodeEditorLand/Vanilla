{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/inlineCompletionsSource.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { equalsIfDefined, itemEquals } from '../../../../../base/common/equals.js';\nimport { matchesSubString } from '../../../../../base/common/filters.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, IReader, ITransaction, derivedOpts, disposableObservableValue, transaction } from '../../../../../base/common/observable.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { SingleTextEdit } from '../../../../common/core/textEdit.js';\nimport { TextLength } from '../../../../common/core/textLength.js';\nimport { InlineCompletionContext, InlineCompletionTriggerKind } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\nimport { IFeatureDebounceInformation } from '../../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../../common/services/languageFeatures.js';\nimport { InlineCompletionItem, InlineCompletionProviderResult, provideInlineCompletions } from './provideInlineCompletions.js';\nimport { singleTextRemoveCommonPrefix } from './singleTextEditHelpers.js';\n\nexport class InlineCompletionsSource extends Disposable {\n\tprivate readonly _updateOperation = this._register(new MutableDisposable<UpdateOperation>());\n\tpublic readonly inlineCompletions = disposableObservableValue<UpToDateInlineCompletions | undefined>('inlineCompletions', undefined);\n\tpublic readonly suggestWidgetInlineCompletions = disposableObservableValue<UpToDateInlineCompletions | undefined>('suggestWidgetInlineCompletions', undefined);\n\n\tconstructor(\n\t\tprivate readonly _textModel: ITextModel,\n\t\tprivate readonly _versionId: IObservable<number | null>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._textModel.onDidChangeContent(() => {\n\t\t\tthis._updateOperation.clear();\n\t\t}));\n\t}\n\n\tpublic fetch(position: Position, context: InlineCompletionContext, activeInlineCompletion: InlineCompletionWithUpdatedRange | undefined): Promise<boolean> {\n\t\tconst request = new UpdateRequest(position, context, this._textModel.getVersionId());\n\n\t\tconst target = context.selectedSuggestionInfo ? this.suggestWidgetInlineCompletions : this.inlineCompletions;\n\n\t\tif (this._updateOperation.value?.request.satisfies(request)) {\n\t\t\treturn this._updateOperation.value.promise;\n\t\t} else if (target.get()?.request.satisfies(request)) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tconst updateOngoing = !!this._updateOperation.value;\n\t\tthis._updateOperation.clear();\n\n\t\tconst source = new CancellationTokenSource();\n\n\t\tconst promise = (async () => {\n\t\t\tconst shouldDebounce = updateOngoing || context.triggerKind === InlineCompletionTriggerKind.Automatic;\n\t\t\tif (shouldDebounce) {\n\t\t\t\t// This debounces the operation\n\t\t\t\tawait wait(this._debounceValue.get(this._textModel), source.token);\n\t\t\t}\n\n\t\t\tif (source.token.isCancellationRequested || this._store.isDisposed || this._textModel.getVersionId() !== request.versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst startTime = new Date();\n\t\t\tconst updatedCompletions = await provideInlineCompletions(\n\t\t\t\tthis._languageFeaturesService.inlineCompletionsProvider,\n\t\t\t\tposition,\n\t\t\t\tthis._textModel,\n\t\t\t\tcontext,\n\t\t\t\tsource.token,\n\t\t\t\tthis._languageConfigurationService\n\t\t\t);\n\n\t\t\tif (source.token.isCancellationRequested || this._store.isDisposed || this._textModel.getVersionId() !== request.versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst endTime = new Date();\n\t\t\tthis._debounceValue.update(this._textModel, endTime.getTime() - startTime.getTime());\n\n\t\t\tconst completions = new UpToDateInlineCompletions(updatedCompletions, request, this._textModel, this._versionId);\n\t\t\tif (activeInlineCompletion) {\n\t\t\t\tconst asInlineCompletion = activeInlineCompletion.toInlineCompletion(undefined);\n\t\t\t\tif (activeInlineCompletion.canBeReused(this._textModel, position) && !updatedCompletions.has(asInlineCompletion)) {\n\t\t\t\t\tcompletions.prepend(activeInlineCompletion.inlineCompletion, asInlineCompletion.range, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._updateOperation.clear();\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Update completions with provider result */\n\t\t\t\ttarget.set(completions, tx);\n\t\t\t});\n\n\t\t\treturn true;\n\t\t})();\n\n\t\tconst updateOperation = new UpdateOperation(request, source, promise);\n\t\tthis._updateOperation.value = updateOperation;\n\n\t\treturn promise;\n\t}\n\n\tpublic clear(tx: ITransaction): void {\n\t\tthis._updateOperation.clear();\n\t\tthis.inlineCompletions.set(undefined, tx);\n\t\tthis.suggestWidgetInlineCompletions.set(undefined, tx);\n\t}\n\n\tpublic clearSuggestWidgetInlineCompletions(tx: ITransaction): void {\n\t\tif (this._updateOperation.value?.request.context.selectedSuggestionInfo) {\n\t\t\tthis._updateOperation.clear();\n\t\t}\n\t\tthis.suggestWidgetInlineCompletions.set(undefined, tx);\n\t}\n\n\tpublic cancelUpdate(): void {\n\t\tthis._updateOperation.clear();\n\t}\n}\n\nfunction wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n\nclass UpdateRequest {\n\tconstructor(\n\t\tpublic readonly position: Position,\n\t\tpublic readonly context: InlineCompletionContext,\n\t\tpublic readonly versionId: number,\n\t) {\n\t}\n\n\tpublic satisfies(other: UpdateRequest): boolean {\n\t\treturn this.position.equals(other.position)\n\t\t\t&& equalsIfDefined(this.context.selectedSuggestionInfo, other.context.selectedSuggestionInfo, itemEquals())\n\t\t\t&& (other.context.triggerKind === InlineCompletionTriggerKind.Automatic\n\t\t\t\t|| this.context.triggerKind === InlineCompletionTriggerKind.Explicit)\n\t\t\t&& this.versionId === other.versionId;\n\t}\n}\n\nclass UpdateOperation implements IDisposable {\n\tconstructor(\n\t\tpublic readonly request: UpdateRequest,\n\t\tpublic readonly cancellationTokenSource: CancellationTokenSource,\n\t\tpublic readonly promise: Promise<boolean>,\n\t) {\n\t}\n\n\tdispose() {\n\t\tthis.cancellationTokenSource.cancel();\n\t}\n}\n\nexport class UpToDateInlineCompletions implements IDisposable {\n\tprivate readonly _inlineCompletions: InlineCompletionWithUpdatedRange[];\n\tpublic get inlineCompletions(): ReadonlyArray<InlineCompletionWithUpdatedRange> { return this._inlineCompletions; }\n\n\tprivate _refCount = 1;\n\tprivate readonly _prependedInlineCompletionItems: InlineCompletionItem[] = [];\n\n\tconstructor(\n\t\tprivate readonly inlineCompletionProviderResult: InlineCompletionProviderResult,\n\t\tpublic readonly request: UpdateRequest,\n\t\tprivate readonly _textModel: ITextModel,\n\t\tprivate readonly _versionId: IObservable<number | null>,\n\t) {\n\t\tconst ids = _textModel.deltaDecorations([], inlineCompletionProviderResult.completions.map(i => ({\n\t\t\trange: i.range,\n\t\t\toptions: {\n\t\t\t\tdescription: 'inline-completion-tracking-range'\n\t\t\t},\n\t\t})));\n\n\t\tthis._inlineCompletions = inlineCompletionProviderResult.completions.map(\n\t\t\t(i, index) => new InlineCompletionWithUpdatedRange(i, ids[index], this._textModel, this._versionId)\n\t\t);\n\t}\n\n\tpublic clone(): this {\n\t\tthis._refCount++;\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._refCount--;\n\t\tif (this._refCount === 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t// To fix https://github.com/microsoft/vscode/issues/188348\n\t\t\t\tif (!this._textModel.isDisposed()) {\n\t\t\t\t\t// This is just cleanup. It's ok if it happens with a delay.\n\t\t\t\t\tthis._textModel.deltaDecorations(this._inlineCompletions.map(i => i.decorationId), []);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t\tthis.inlineCompletionProviderResult.dispose();\n\t\t\tfor (const i of this._prependedInlineCompletionItems) {\n\t\t\t\ti.source.removeRef();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic prepend(inlineCompletion: InlineCompletionItem, range: Range, addRefToSource: boolean): void {\n\t\tif (addRefToSource) {\n\t\t\tinlineCompletion.source.addRef();\n\t\t}\n\n\t\tconst id = this._textModel.deltaDecorations([], [{\n\t\t\trange,\n\t\t\toptions: {\n\t\t\t\tdescription: 'inline-completion-tracking-range'\n\t\t\t},\n\t\t}])[0];\n\t\tthis._inlineCompletions.unshift(new InlineCompletionWithUpdatedRange(inlineCompletion, id, this._textModel, this._versionId));\n\t\tthis._prependedInlineCompletionItems.push(inlineCompletion);\n\t}\n}\n\nexport class InlineCompletionWithUpdatedRange {\n\tpublic readonly semanticId = JSON.stringify([\n\t\tthis.inlineCompletion.filterText,\n\t\tthis.inlineCompletion.insertText,\n\t\tthis.inlineCompletion.range.getStartPosition().toString()\n\t]);\n\n\tpublic get forwardStable() {\n\t\treturn this.inlineCompletion.source.inlineCompletions.enableForwardStability ?? false;\n\t}\n\n\tprivate readonly _updatedRange = derivedOpts<Range | null>({ owner: this, equalsFn: Range.equalsRange }, reader => {\n\t\tthis._modelVersion.read(reader);\n\t\treturn this._textModel.getDecorationRange(this.decorationId);\n\t});\n\n\tconstructor(\n\t\tpublic readonly inlineCompletion: InlineCompletionItem,\n\t\tpublic readonly decorationId: string,\n\t\tprivate readonly _textModel: ITextModel,\n\t\tprivate readonly _modelVersion: IObservable<number | null>,\n\t) {\n\t}\n\n\tpublic toInlineCompletion(reader: IReader | undefined): InlineCompletionItem {\n\t\treturn this.inlineCompletion.withRange(this._updatedRange.read(reader) ?? emptyRange);\n\t}\n\n\tpublic toSingleTextEdit(reader: IReader | undefined): SingleTextEdit {\n\t\treturn new SingleTextEdit(this._updatedRange.read(reader) ?? emptyRange, this.inlineCompletion.insertText);\n\t}\n\n\tpublic isVisible(model: ITextModel, cursorPosition: Position, reader: IReader | undefined): boolean {\n\t\tconst minimizedReplacement = singleTextRemoveCommonPrefix(this._toFilterTextReplacement(reader), model);\n\t\tconst updatedRange = this._updatedRange.read(reader);\n\t\tif (\n\t\t\t!updatedRange\n\t\t\t|| !this.inlineCompletion.range.getStartPosition().equals(updatedRange.getStartPosition())\n\t\t\t|| cursorPosition.lineNumber !== minimizedReplacement.range.startLineNumber\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We might consider comparing by .toLowerText, but this requires GhostTextReplacement\n\t\tconst originalValue = model.getValueInRange(minimizedReplacement.range, EndOfLinePreference.LF);\n\t\tconst filterText = minimizedReplacement.text;\n\n\t\tconst cursorPosIndex = Math.max(0, cursorPosition.column - minimizedReplacement.range.startColumn);\n\n\t\tlet filterTextBefore = filterText.substring(0, cursorPosIndex);\n\t\tlet filterTextAfter = filterText.substring(cursorPosIndex);\n\n\t\tlet originalValueBefore = originalValue.substring(0, cursorPosIndex);\n\t\tlet originalValueAfter = originalValue.substring(cursorPosIndex);\n\n\t\tconst originalValueIndent = model.getLineIndentColumn(minimizedReplacement.range.startLineNumber);\n\t\tif (minimizedReplacement.range.startColumn <= originalValueIndent) {\n\t\t\t// Remove indentation\n\t\t\toriginalValueBefore = originalValueBefore.trimStart();\n\t\t\tif (originalValueBefore.length === 0) {\n\t\t\t\toriginalValueAfter = originalValueAfter.trimStart();\n\t\t\t}\n\t\t\tfilterTextBefore = filterTextBefore.trimStart();\n\t\t\tif (filterTextBefore.length === 0) {\n\t\t\t\tfilterTextAfter = filterTextAfter.trimStart();\n\t\t\t}\n\t\t}\n\n\t\treturn filterTextBefore.startsWith(originalValueBefore)\n\t\t\t&& !!matchesSubString(originalValueAfter, filterTextAfter);\n\t}\n\n\tpublic canBeReused(model: ITextModel, position: Position): boolean {\n\t\tconst updatedRange = this._updatedRange.read(undefined);\n\t\tconst result = !!updatedRange\n\t\t\t&& updatedRange.containsPosition(position)\n\t\t\t&& this.isVisible(model, position, undefined)\n\t\t\t&& TextLength.ofRange(updatedRange).isGreaterThanOrEqualTo(TextLength.ofRange(this.inlineCompletion.range));\n\t\treturn result;\n\t}\n\n\tprivate _toFilterTextReplacement(reader: IReader | undefined): SingleTextEdit {\n\t\treturn new SingleTextEdit(this._updatedRange.read(reader) ?? emptyRange, this.inlineCompletion.filterText);\n\t}\n}\n\nconst emptyRange = new Range(1, 1, 1, 1);\n"],
  "mappings": "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",
  "names": []
}
