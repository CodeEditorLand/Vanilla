import{autorun as d}from"../../../../../base/common/observable.js";import{firstNonWhitespaceIndex as b}from"../../../../../base/common/strings.js";import{CursorColumns as c}from"../../../../common/core/cursorColumns.js";import"../model/inlineCompletionsModel.js";import{RawContextKey as a}from"../../../../../platform/contextkey/common/contextkey.js";import{Disposable as S}from"../../../../../base/common/lifecycle.js";import{localize as r}from"../../../../../nls.js";class t extends S{constructor(T,f){super();this.contextKeyService=T;this.model=f;this._register(d(n=>{const e=this.model.read(n)?.state.read(n),s=!!e?.inlineCompletion&&e?.primaryGhostText!==void 0&&!e?.primaryGhostText.isEmpty();this.inlineCompletionVisible.set(s),e?.primaryGhostText&&e?.inlineCompletion&&this.suppressSuggestions.set(e.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions)})),this._register(d(n=>{const i=this.model.read(n);let e=!1,s=!0;const o=i?.primaryGhostText.read(n);if(i?.selectedSuggestItem&&o&&o.parts.length>0){const{column:p,lines:h}=o.parts[0],u=h[0],m=i.textModel.getLineIndentColumn(o.lineNumber);if(p<=m){let l=b(u);l===-1&&(l=u.length-1),e=l>0;const g=i.textModel.getOptions().tabSize;s=c.visibleColumnFromColumn(u,l+1,g)<g}}this.inlineCompletionSuggestsIndentation.set(e),this.inlineCompletionSuggestsIndentationLessThanTabSize.set(s)}))}static inlineSuggestionVisible=new a("inlineSuggestionVisible",!1,r("inlineSuggestionVisible","Whether an inline suggestion is visible"));static inlineSuggestionHasIndentation=new a("inlineSuggestionHasIndentation",!1,r("inlineSuggestionHasIndentation","Whether the inline suggestion starts with whitespace"));static inlineSuggestionHasIndentationLessThanTabSize=new a("inlineSuggestionHasIndentationLessThanTabSize",!0,r("inlineSuggestionHasIndentationLessThanTabSize","Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab"));static suppressSuggestions=new a("inlineSuggestionSuppressSuggestions",void 0,r("suppressSuggestions","Whether suggestions should be suppressed for the current suggestion"));inlineCompletionVisible=t.inlineSuggestionVisible.bindTo(this.contextKeyService);inlineCompletionSuggestsIndentation=t.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);inlineCompletionSuggestsIndentationLessThanTabSize=t.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);suppressSuggestions=t.suppressSuggestions.bindTo(this.contextKeyService)}export{t as InlineCompletionContextKeys};
