{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/utils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Permutation, compareBy } from '../../../../base/common/arrays.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IObservable, observableValue, ISettableObservable, autorun, transaction } from '../../../../base/common/observable.js';\nimport { splitLinesIncludeSeparators } from '../../../../base/common/strings.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\n\nconst array: ReadonlyArray<any> = [];\nexport function getReadonlyEmptyArray<T>(): readonly T[] {\n\treturn array;\n}\n\nexport class ColumnRange {\n\tconstructor(\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumnExclusive: number,\n\t) {\n\t\tif (startColumn > endColumnExclusive) {\n\t\t\tthrow new BugIndicatingError(`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`);\n\t\t}\n\t}\n\n\ttoRange(lineNumber: number): Range {\n\t\treturn new Range(lineNumber, this.startColumn, lineNumber, this.endColumnExclusive);\n\t}\n\n\tequals(other: ColumnRange): boolean {\n\t\treturn this.startColumn === other.startColumn\n\t\t\t&& this.endColumnExclusive === other.endColumnExclusive;\n\t}\n}\n\nexport function addPositions(pos1: Position, pos2: Position): Position {\n\treturn new Position(pos1.lineNumber + pos2.lineNumber - 1, pos2.lineNumber === 1 ? pos1.column + pos2.column - 1 : pos2.column);\n}\n\nexport function subtractPositions(pos1: Position, pos2: Position): Position {\n\treturn new Position(pos1.lineNumber - pos2.lineNumber + 1, pos1.lineNumber - pos2.lineNumber === 0 ? pos1.column - pos2.column + 1 : pos1.column);\n}\n\nexport function substringPos(text: string, pos: Position): string {\n\tlet subtext = '';\n\tconst lines = splitLinesIncludeSeparators(text);\n\tfor (let i = pos.lineNumber - 1; i < lines.length; i++) {\n\t\tsubtext += lines[i].substring(i === pos.lineNumber - 1 ? pos.column - 1 : 0);\n\t}\n\treturn subtext;\n}\n\nexport function getEndPositionsAfterApplying(edits: readonly SingleTextEdit[]): Position[] {\n\tconst sortPerm = Permutation.createSortPermutation(edits, compareBy(e => e.range, Range.compareRangesUsingStarts));\n\tconst edit = new TextEdit(sortPerm.apply(edits));\n\tconst sortedNewRanges = edit.getNewRanges();\n\tconst newRanges = sortPerm.inverse().apply(sortedNewRanges);\n\treturn newRanges.map(range => range.getEndPosition());\n}\n\nexport function convertItemsToStableObservables<T>(items: IObservable<readonly T[]>, store: DisposableStore): IObservable<IObservable<T>[]> {\n\tconst result = observableValue<IObservable<T>[]>('result', []);\n\tconst innerObservables: ISettableObservable<T>[] = [];\n\n\tstore.add(autorun(reader => {\n\t\tconst itemsValue = items.read(reader);\n\n\t\ttransaction(tx => {\n\t\t\tif (itemsValue.length !== innerObservables.length) {\n\t\t\t\tinnerObservables.length = itemsValue.length;\n\t\t\t\tfor (let i = 0; i < innerObservables.length; i++) {\n\t\t\t\t\tif (!innerObservables[i]) {\n\t\t\t\t\t\tinnerObservables[i] = observableValue<T>('item', itemsValue[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.set([...innerObservables], tx);\n\t\t\t}\n\t\t\tinnerObservables.forEach((o, i) => o.set(itemsValue[i], tx));\n\t\t});\n\t}));\n\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa,iBAAiB;AACvC,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,aAAa,iBAAiB,qBAAqB,SAAS,mBAAmB;AACxF,SAAS,mCAAmC;AAC5C,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,gBAAgB,gBAAgB;AAEzC,MAAM,QAA4B,CAAC;AAC5B,SAAS,wBAAyC;AACxD,SAAO;AACR;AAFgB;AAIT,MAAM,YAAY;AAAA,EACxB,YACiB,aACA,oBACf;AAFe;AACA;AAEhB,QAAI,cAAc,oBAAoB;AACrC,YAAM,IAAI,mBAAmB,eAAe,WAAW,uCAAuC,kBAAkB,EAAE;AAAA,IACnH;AAAA,EACD;AAAA,EA3BD,OAmByB;AAAA;AAAA;AAAA,EAUxB,QAAQ,YAA2B;AAClC,WAAO,IAAI,MAAM,YAAY,KAAK,aAAa,YAAY,KAAK,kBAAkB;AAAA,EACnF;AAAA,EAEA,OAAO,OAA6B;AACnC,WAAO,KAAK,gBAAgB,MAAM,eAC9B,KAAK,uBAAuB,MAAM;AAAA,EACvC;AACD;AAEO,SAAS,aAAa,MAAgB,MAA0B;AACtE,SAAO,IAAI,SAAS,KAAK,aAAa,KAAK,aAAa,GAAG,KAAK,eAAe,IAAI,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,MAAM;AAC/H;AAFgB;AAIT,SAAS,kBAAkB,MAAgB,MAA0B;AAC3E,SAAO,IAAI,SAAS,KAAK,aAAa,KAAK,aAAa,GAAG,KAAK,aAAa,KAAK,eAAe,IAAI,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,MAAM;AACjJ;AAFgB;AAIT,SAAS,aAAa,MAAc,KAAuB;AACjE,MAAI,UAAU;AACd,QAAM,QAAQ,4BAA4B,IAAI;AAC9C,WAAS,IAAI,IAAI,aAAa,GAAG,IAAI,MAAM,QAAQ,KAAK;AACvD,eAAW,MAAM,CAAC,EAAE,UAAU,MAAM,IAAI,aAAa,IAAI,IAAI,SAAS,IAAI,CAAC;AAAA,EAC5E;AACA,SAAO;AACR;AAPgB;AAST,SAAS,6BAA6B,OAA8C;AAC1F,QAAM,WAAW,YAAY,sBAAsB,OAAO,UAAU,OAAK,EAAE,OAAO,MAAM,wBAAwB,CAAC;AACjH,QAAM,OAAO,IAAI,SAAS,SAAS,MAAM,KAAK,CAAC;AAC/C,QAAM,kBAAkB,KAAK,aAAa;AAC1C,QAAM,YAAY,SAAS,QAAQ,EAAE,MAAM,eAAe;AAC1D,SAAO,UAAU,IAAI,WAAS,MAAM,eAAe,CAAC;AACrD;AANgB;AAQT,SAAS,gCAAmC,OAAkC,OAAuD;AAC3I,QAAM,SAAS,gBAAkC,UAAU,CAAC,CAAC;AAC7D,QAAM,mBAA6C,CAAC;AAEpD,QAAM,IAAI,QAAQ,YAAU;AAC3B,UAAM,aAAa,MAAM,KAAK,MAAM;AAEpC,gBAAY,QAAM;AACjB,UAAI,WAAW,WAAW,iBAAiB,QAAQ;AAClD,yBAAiB,SAAS,WAAW;AACrC,iBAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AACjD,cAAI,CAAC,iBAAiB,CAAC,GAAG;AACzB,6BAAiB,CAAC,IAAI,gBAAmB,QAAQ,WAAW,CAAC,CAAC;AAAA,UAC/D;AAAA,QACD;AACA,eAAO,IAAI,CAAC,GAAG,gBAAgB,GAAG,EAAE;AAAA,MACrC;AACA,uBAAiB,QAAQ,CAAC,GAAG,MAAM,EAAE,IAAI,WAAW,CAAC,GAAG,EAAE,CAAC;AAAA,IAC5D,CAAC;AAAA,EACF,CAAC,CAAC;AAEF,SAAO;AACR;AAtBgB;",
  "names": []
}
