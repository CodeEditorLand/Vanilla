{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/utils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Permutation, compareBy } from \"../../../../base/common/arrays.js\";\nimport { BugIndicatingError } from \"../../../../base/common/errors.js\";\nimport type { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\ttype ISettableObservable,\n\tautorun,\n\tobservableValue,\n\ttransaction,\n} from \"../../../../base/common/observable.js\";\nimport { splitLinesIncludeSeparators } from \"../../../../base/common/strings.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport {\n\ttype SingleTextEdit,\n\tTextEdit,\n} from \"../../../common/core/textEdit.js\";\n\nconst array: ReadonlyArray<any> = [];\nexport function getReadonlyEmptyArray<T>(): readonly T[] {\n\treturn array;\n}\n\nexport class ColumnRange {\n\tconstructor(\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumnExclusive: number,\n\t) {\n\t\tif (startColumn > endColumnExclusive) {\n\t\t\tthrow new BugIndicatingError(\n\t\t\t\t`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`,\n\t\t\t);\n\t\t}\n\t}\n\n\ttoRange(lineNumber: number): Range {\n\t\treturn new Range(\n\t\t\tlineNumber,\n\t\t\tthis.startColumn,\n\t\t\tlineNumber,\n\t\t\tthis.endColumnExclusive,\n\t\t);\n\t}\n\n\tequals(other: ColumnRange): boolean {\n\t\treturn (\n\t\t\tthis.startColumn === other.startColumn &&\n\t\t\tthis.endColumnExclusive === other.endColumnExclusive\n\t\t);\n\t}\n}\n\nexport function addPositions(pos1: Position, pos2: Position): Position {\n\treturn new Position(\n\t\tpos1.lineNumber + pos2.lineNumber - 1,\n\t\tpos2.lineNumber === 1 ? pos1.column + pos2.column - 1 : pos2.column,\n\t);\n}\n\nexport function subtractPositions(pos1: Position, pos2: Position): Position {\n\treturn new Position(\n\t\tpos1.lineNumber - pos2.lineNumber + 1,\n\t\tpos1.lineNumber - pos2.lineNumber === 0\n\t\t\t? pos1.column - pos2.column + 1\n\t\t\t: pos1.column,\n\t);\n}\n\nexport function substringPos(text: string, pos: Position): string {\n\tlet subtext = \"\";\n\tconst lines = splitLinesIncludeSeparators(text);\n\tfor (let i = pos.lineNumber - 1; i < lines.length; i++) {\n\t\tsubtext += lines[i].substring(\n\t\t\ti === pos.lineNumber - 1 ? pos.column - 1 : 0,\n\t\t);\n\t}\n\treturn subtext;\n}\n\nexport function getEndPositionsAfterApplying(\n\tedits: readonly SingleTextEdit[],\n): Position[] {\n\tconst sortPerm = Permutation.createSortPermutation(\n\t\tedits,\n\t\tcompareBy((e) => e.range, Range.compareRangesUsingStarts),\n\t);\n\tconst edit = new TextEdit(sortPerm.apply(edits));\n\tconst sortedNewRanges = edit.getNewRanges();\n\tconst newRanges = sortPerm.inverse().apply(sortedNewRanges);\n\treturn newRanges.map((range) => range.getEndPosition());\n}\n\nexport function convertItemsToStableObservables<T>(\n\titems: IObservable<readonly T[]>,\n\tstore: DisposableStore,\n): IObservable<IObservable<T>[]> {\n\tconst result = observableValue<IObservable<T>[]>(\"result\", []);\n\tconst innerObservables: ISettableObservable<T>[] = [];\n\n\tstore.add(\n\t\tautorun((reader) => {\n\t\t\tconst itemsValue = items.read(reader);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tif (itemsValue.length !== innerObservables.length) {\n\t\t\t\t\tinnerObservables.length = itemsValue.length;\n\t\t\t\t\tfor (let i = 0; i < innerObservables.length; i++) {\n\t\t\t\t\t\tif (!innerObservables[i]) {\n\t\t\t\t\t\t\tinnerObservables[i] = observableValue<T>(\n\t\t\t\t\t\t\t\t\"item\",\n\t\t\t\t\t\t\t\titemsValue[i],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult.set([...innerObservables], tx);\n\t\t\t\t}\n\t\t\t\tinnerObservables.forEach((o, i) => o.set(itemsValue[i], tx));\n\t\t\t});\n\t\t}),\n\t);\n\n\treturn result;\n}\n"],
  "mappings": "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",
  "names": []
}
