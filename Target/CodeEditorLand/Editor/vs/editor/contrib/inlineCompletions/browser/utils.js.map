{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/utils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, autorunOpts } from '../../../../base/common/observable.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IModelDeltaDecoration } from '../../../common/model.js';\n\nconst array: ReadonlyArray<any> = [];\nexport function getReadonlyEmptyArray<T>(): readonly T[] {\n\treturn array;\n}\n\nexport class ColumnRange {\n\tconstructor(\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumnExclusive: number,\n\t) {\n\t\tif (startColumn > endColumnExclusive) {\n\t\t\tthrow new BugIndicatingError(`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`);\n\t\t}\n\t}\n\n\ttoRange(lineNumber: number): Range {\n\t\treturn new Range(lineNumber, this.startColumn, lineNumber, this.endColumnExclusive);\n\t}\n\n\tequals(other: ColumnRange): boolean {\n\t\treturn this.startColumn === other.startColumn\n\t\t\t&& this.endColumnExclusive === other.endColumnExclusive;\n\t}\n}\n\n/**\n * Use observableCodeEditor(editor).applyDecorations(decorations) instead.\n * @deprecated\n*/\nexport function applyObservableDecorations(editor: ICodeEditor, decorations: IObservable<IModelDeltaDecoration[]>): IDisposable {\n\tconst d = new DisposableStore();\n\tconst decorationsCollection = editor.createDecorationsCollection();\n\td.add(autorunOpts({ debugName: () => `Apply decorations from ${decorations.debugName}` }, reader => {\n\t\tconst d = decorations.read(reader);\n\t\tdecorationsCollection.set(d);\n\t}));\n\td.add({\n\t\tdispose: () => {\n\t\t\tdecorationsCollection.clear();\n\t\t}\n\t});\n\treturn d;\n}\n\nexport function addPositions(pos1: Position, pos2: Position): Position {\n\treturn new Position(pos1.lineNumber + pos2.lineNumber - 1, pos2.lineNumber === 1 ? pos1.column + pos2.column - 1 : pos2.column);\n}\n\nexport function subtractPositions(pos1: Position, pos2: Position): Position {\n\treturn new Position(pos1.lineNumber - pos2.lineNumber + 1, pos1.lineNumber - pos2.lineNumber === 0 ? pos1.column - pos2.column + 1 : pos1.column);\n}\n"],
  "mappings": ";;AAKA,SAAS,0BAA0B;AACnC,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,aAAa,mBAAmB;AACzC,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,6BAA6B;AAEtC,MAAM,QAA4B,CAAC;AAC5B,SAAS,wBAAyC;AACxD,SAAO;AACR;AAFgB;AAIT,MAAM,YAAY;AAAA,EACxB,YACiB,aACA,oBACf;AAFe;AACA;AAEhB,QAAI,cAAc,oBAAoB;AACrC,YAAM,IAAI,mBAAmB,eAAe,WAAW,uCAAuC,kBAAkB,EAAE;AAAA,IACnH;AAAA,EACD;AAAA,EA1BD,OAkByB;AAAA;AAAA;AAAA,EAUxB,QAAQ,YAA2B;AAClC,WAAO,IAAI,MAAM,YAAY,KAAK,aAAa,YAAY,KAAK,kBAAkB;AAAA,EACnF;AAAA,EAEA,OAAO,OAA6B;AACnC,WAAO,KAAK,gBAAgB,MAAM,eAC9B,KAAK,uBAAuB,MAAM;AAAA,EACvC;AACD;AAMO,SAAS,2BAA2B,QAAqB,aAAgE;AAC/H,QAAM,IAAI,IAAI,gBAAgB;AAC9B,QAAM,wBAAwB,OAAO,4BAA4B;AACjE,IAAE,IAAI,YAAY,EAAE,WAAW,6BAAM,0BAA0B,YAAY,SAAS,IAArD,aAAwD,GAAG,YAAU;AACnG,UAAMA,KAAI,YAAY,KAAK,MAAM;AACjC,0BAAsB,IAAIA,EAAC;AAAA,EAC5B,CAAC,CAAC;AACF,IAAE,IAAI;AAAA,IACL,SAAS,6BAAM;AACd,4BAAsB,MAAM;AAAA,IAC7B,GAFS;AAAA,EAGV,CAAC;AACD,SAAO;AACR;AAbgB;AAeT,SAAS,aAAa,MAAgB,MAA0B;AACtE,SAAO,IAAI,SAAS,KAAK,aAAa,KAAK,aAAa,GAAG,KAAK,eAAe,IAAI,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,MAAM;AAC/H;AAFgB;AAIT,SAAS,kBAAkB,MAAgB,MAA0B;AAC3E,SAAO,IAAI,SAAS,KAAK,aAAa,KAAK,aAAa,GAAG,KAAK,aAAa,KAAK,eAAe,IAAI,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,MAAM;AACjJ;AAFgB;",
  "names": ["d"]
}
