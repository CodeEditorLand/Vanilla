{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/ghostText.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from \"../../../../../base/common/arrays.js\";\nimport { splitLines } from \"../../../../../base/common/strings.js\";\nimport { Position } from \"../../../../common/core/position.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { SingleTextEdit, TextEdit } from \"../../../../common/core/textEdit.js\";\nimport type { ColumnRange } from \"../utils.js\";\n\nexport class GhostText {\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly parts: GhostTextPart[],\n\t) {}\n\n\tequals(other: GhostText): boolean {\n\t\treturn (\n\t\t\tthis.lineNumber === other.lineNumber &&\n\t\t\tthis.parts.length === other.parts.length &&\n\t\t\tthis.parts.every((part, index) => part.equals(other.parts[index]))\n\t\t);\n\t}\n\n\t/**\n\t * Only used for testing/debugging.\n\t */\n\trender(documentText: string, debug = false): string {\n\t\treturn new TextEdit([\n\t\t\t...this.parts.map(\n\t\t\t\t(p) =>\n\t\t\t\t\tnew SingleTextEdit(\n\t\t\t\t\t\tRange.fromPositions(\n\t\t\t\t\t\t\tnew Position(this.lineNumber, p.column),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdebug ? `[${p.lines.join(\"\\n\")}]` : p.lines.join(\"\\n\"),\n\t\t\t\t\t),\n\t\t\t),\n\t\t]).applyToString(documentText);\n\t}\n\n\trenderForScreenReader(lineText: string): string {\n\t\tif (this.parts.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst lastPart = this.parts[this.parts.length - 1];\n\n\t\tconst cappedLineText = lineText.substr(0, lastPart.column - 1);\n\t\tconst text = new TextEdit([\n\t\t\t...this.parts.map(\n\t\t\t\t(p) =>\n\t\t\t\t\tnew SingleTextEdit(\n\t\t\t\t\t\tRange.fromPositions(new Position(1, p.column)),\n\t\t\t\t\t\tp.lines.join(\"\\n\"),\n\t\t\t\t\t),\n\t\t\t),\n\t\t]).applyToString(cappedLineText);\n\n\t\treturn text.substring(this.parts[0].column - 1);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.parts.every((p) => p.lines.length === 0);\n\t}\n\n\tget lineCount(): number {\n\t\treturn 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n\t}\n}\n\nexport class GhostTextPart {\n\tconstructor(\n\t\treadonly column: number,\n\t\treadonly text: string,\n\t\t/**\n\t\t * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n\t\t */\n\t\treadonly preview: boolean,\n\t) {}\n\n\treadonly lines = splitLines(this.text);\n\n\tequals(other: GhostTextPart): boolean {\n\t\treturn (\n\t\t\tthis.column === other.column &&\n\t\t\tthis.lines.length === other.lines.length &&\n\t\t\tthis.lines.every((line, index) => line === other.lines[index])\n\t\t);\n\t}\n}\n\nexport class GhostTextReplacement {\n\tpublic readonly parts: ReadonlyArray<GhostTextPart> = [\n\t\tnew GhostTextPart(\n\t\t\tthis.columnRange.endColumnExclusive,\n\t\t\tthis.text,\n\t\t\tfalse,\n\t\t),\n\t];\n\n\tconstructor(\n\t\treadonly lineNumber: number,\n\t\treadonly columnRange: ColumnRange,\n\t\treadonly text: string,\n\t\tpublic readonly additionalReservedLineCount: number = 0,\n\t) {}\n\n\treadonly newLines = splitLines(this.text);\n\n\trenderForScreenReader(_lineText: string): string {\n\t\treturn this.newLines.join(\"\\n\");\n\t}\n\n\trender(documentText: string, debug = false): string {\n\t\tconst replaceRange = this.columnRange.toRange(this.lineNumber);\n\n\t\tif (debug) {\n\t\t\treturn new TextEdit([\n\t\t\t\tnew SingleTextEdit(\n\t\t\t\t\tRange.fromPositions(replaceRange.getStartPosition()),\n\t\t\t\t\t\"(\",\n\t\t\t\t),\n\t\t\t\tnew SingleTextEdit(\n\t\t\t\t\tRange.fromPositions(replaceRange.getEndPosition()),\n\t\t\t\t\t`)[${this.newLines.join(\"\\n\")}]`,\n\t\t\t\t),\n\t\t\t]).applyToString(documentText);\n\t\t} else {\n\t\t\treturn new TextEdit([\n\t\t\t\tnew SingleTextEdit(replaceRange, this.newLines.join(\"\\n\")),\n\t\t\t]).applyToString(documentText);\n\t\t}\n\t}\n\n\tget lineCount(): number {\n\t\treturn this.newLines.length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.parts.every((p) => p.lines.length === 0);\n\t}\n\n\tequals(other: GhostTextReplacement): boolean {\n\t\treturn (\n\t\t\tthis.lineNumber === other.lineNumber &&\n\t\t\tthis.columnRange.equals(other.columnRange) &&\n\t\t\tthis.newLines.length === other.newLines.length &&\n\t\t\tthis.newLines.every(\n\t\t\t\t(line, index) => line === other.newLines[index],\n\t\t\t) &&\n\t\t\tthis.additionalReservedLineCount ===\n\t\t\t\tother.additionalReservedLineCount\n\t\t);\n\t}\n}\n\nexport type GhostTextOrReplacement = GhostText | GhostTextReplacement;\n\nexport function ghostTextsOrReplacementsEqual(\n\ta: readonly GhostTextOrReplacement[] | undefined,\n\tb: readonly GhostTextOrReplacement[] | undefined,\n): boolean {\n\treturn equals(a, b, ghostTextOrReplacementEquals);\n}\n\nexport function ghostTextOrReplacementEquals(\n\ta: GhostTextOrReplacement | undefined,\n\tb: GhostTextOrReplacement | undefined,\n): boolean {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\tif (a instanceof GhostText && b instanceof GhostText) {\n\t\treturn a.equals(b);\n\t}\n\tif (\n\t\ta instanceof GhostTextReplacement &&\n\t\tb instanceof GhostTextReplacement\n\t) {\n\t\treturn a.equals(b);\n\t}\n\treturn false;\n}\n"],
  "mappings": "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",
  "names": []
}
