{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/view/ghostTextView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, autorun, derived, observableSignalFromEvent, observableValue } from '../../../../../base/common/observable.js';\nimport * as strings from '../../../../../base/common/strings.js';\nimport './ghostTextView.css';\nimport { applyFontInfo } from '../../../../browser/config/domFontInfo.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { EditorFontLigatures, EditorOption, IComputedEditorOptions } from '../../../../common/config/editorOptions.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { StringBuilder } from '../../../../common/core/stringBuilder.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops, PositionAffinity } from '../../../../common/model.js';\nimport { LineTokens } from '../../../../common/tokens/lineTokens.js';\nimport { LineDecoration } from '../../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecorationType } from '../../../../common/viewModel.js';\nimport { GhostText, GhostTextReplacement } from '../model/ghostText.js';\nimport { ColumnRange } from '../utils.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { OffsetEdit, SingleOffsetEdit } from '../../../../common/core/offsetEdit.js';\nimport { LineEditWithAdditionalLines } from '../../../../common/tokenizationTextModelPart.js';\n\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | GhostTextReplacement | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n}\n\nexport class GhostTextView extends Disposable {\n\tprivate readonly _isDisposed = observableValue(this, false);\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this._isDisposed.set(true, undefined); }));\n\t\tthis._register(this._editorObs.setDecorations(this.decorations));\n\t}\n\n\tprivate readonly _useSyntaxHighlighting = this._editorObs.getOption(EditorOption.inlineSuggest).map(v => v.syntaxHighlightingEnabled);\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this._isDisposed.read(reader)) { return undefined; }\n\t\tconst textModel = this._editorObs.model.read(reader);\n\t\tif (textModel !== this._model.targetTextModel.read(reader)) { return undefined; }\n\t\tconst ghostText = this._model.ghostText.read(reader);\n\t\tif (!ghostText) { return undefined; }\n\n\t\tconst replacedRange = ghostText instanceof GhostTextReplacement ? ghostText.columnRange : undefined;\n\n\t\tconst syntaxHighlightingEnabled = this._useSyntaxHighlighting.read(reader);\n\t\tconst extraClassName = syntaxHighlightingEnabled ? ' syntax-highlighted' : '';\n\t\tconst { inlineTexts, additionalLines, hiddenRange } = computeGhostTextViewData(ghostText, textModel, 'ghost-text' + extraClassName);\n\n\t\tconst edit = new OffsetEdit(inlineTexts.map(t => SingleOffsetEdit.insert(t.column - 1, t.text)));\n\t\tconst tokens = syntaxHighlightingEnabled ? textModel.tokenization.tokenizeLineWithEdit(ghostText.lineNumber, new LineEditWithAdditionalLines(\n\t\t\tedit,\n\t\t\tadditionalLines.map(l => l.content)\n\t\t)) : undefined;\n\t\tconst newRanges = edit.getNewTextRanges();\n\t\tconst inlineTextsWithTokens = inlineTexts.map((t, idx) => ({ ...t, tokens: tokens?.mainLineTokens?.getTokensInRange(newRanges[idx]) }));\n\n\t\tconst tokenizedAdditionalLines: LineData[] = additionalLines.map((l, idx) => ({\n\t\t\tcontent: tokens?.additionalLines?.[idx] ?? LineTokens.createEmpty(l.content, this._languageService.languageIdCodec),\n\t\t\tdecorations: l.decorations,\n\t\t}));\n\n\t\treturn {\n\t\t\treplacedRange,\n\t\t\tinlineTexts: inlineTextsWithTokens,\n\t\t\tadditionalLines: tokenizedAdditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber: ghostText.lineNumber,\n\t\t\tadditionalReservedLineCount: this._model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t\tsyntaxHighlightingEnabled,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) { return []; }\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tconst extraClassName = uiState.syntaxHighlightingEnabled ? ' syntax-highlighted' : '';\n\n\t\tif (uiState.replacedRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.replacedRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-completion-text-to-replace' + extraClassName, description: 'GhostTextReplacement' }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'ghost-text-hidden', description: 'ghost-text-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'ghost-text-decoration',\n\t\t\t\t\tafter: {\n\t\t\t\t\t\tcontent: p.text,\n\t\t\t\t\t\ttokens: p.tokens,\n\t\t\t\t\t\tinlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration' + extraClassName,\n\t\t\t\t\t\tcursorStops: InjectedTextCursorStops.Left\n\t\t\t\t\t},\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis._editor,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n\nfunction computeGhostTextViewData(ghostText: GhostText | GhostTextReplacement, textModel: ITextModel, ghostTextClassName: string) {\n\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\tconst additionalLines: { content: string; decorations: LineDecoration[] }[] = [];\n\n\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\tif (additionalLines.length > 0) {\n\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\tif (className) {\n\t\t\t\tlastLine.decorations.push(new LineDecoration(\n\t\t\t\t\tlastLine.content.length + 1,\n\t\t\t\t\tlastLine.content.length + 1 + lines[0].length,\n\t\t\t\t\tclassName,\n\t\t\t\t\tInlineDecorationType.Regular\n\t\t\t\t));\n\t\t\t}\n\t\t\tlastLine.content += lines[0];\n\n\t\t\tlines = lines.slice(1);\n\t\t}\n\t\tfor (const line of lines) {\n\t\t\tadditionalLines.push({\n\t\t\t\tcontent: line,\n\t\t\t\tdecorations: className ? [new LineDecoration(\n\t\t\t\t\t1,\n\t\t\t\t\tline.length + 1,\n\t\t\t\t\tclassName,\n\t\t\t\t\tInlineDecorationType.Regular\n\t\t\t\t)] : []\n\t\t\t});\n\t\t}\n\t}\n\n\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\tlet hiddenTextStartColumn: number | undefined = undefined;\n\tlet lastIdx = 0;\n\tfor (const part of ghostText.parts) {\n\t\tlet lines = part.lines;\n\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\tinlineTexts.push({ column: part.column, text: lines[0], preview: part.preview });\n\t\t\tlines = lines.slice(1);\n\t\t} else {\n\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t}\n\n\t\tif (lines.length > 0) {\n\t\t\taddToAdditionalLines(lines, ghostTextClassName);\n\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t}\n\t\t}\n\n\t\tlastIdx = part.column - 1;\n\t}\n\tif (hiddenTextStartColumn !== undefined) {\n\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t}\n\n\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\treturn {\n\t\tinlineTexts,\n\t\tadditionalLines,\n\t\thiddenRange,\n\t};\n}\n\nexport class AdditionalLinesWidget extends Disposable {\n\tprivate _viewZoneId: string | undefined = undefined;\n\tpublic get viewZoneId(): string | undefined { return this._viewZoneId; }\n\n\tprivate readonly editorOptionsChanged = observableSignalFromEvent('editorOptionChanged', Event.filter(\n\t\tthis.editor.onDidChangeConfiguration,\n\t\te => e.hasChanged(EditorOption.disableMonospaceOptimizations)\n\t\t\t|| e.hasChanged(EditorOption.stopRenderingLineAfter)\n\t\t\t|| e.hasChanged(EditorOption.renderWhitespace)\n\t\t\t|| e.hasChanged(EditorOption.renderControlCharacters)\n\t\t\t|| e.hasChanged(EditorOption.fontLigatures)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.lineHeight)\n\t));\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly lines: IObservable<{\n\t\t\ttargetTextModel: ITextModel;\n\t\t\tlineNumber: number;\n\t\t\tadditionalLines: LineData[];\n\t\t\tminReservedLineCount: number;\n\t\t} | undefined>\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update view zone */\n\t\t\tconst lines = this.lines.read(reader);\n\t\t\tthis.editorOptionsChanged.read(reader);\n\n\t\t\tif (lines) {\n\t\t\t\tthis.updateLines(lines.lineNumber, lines.additionalLines, lines.minReservedLineCount);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tprivate clear(): void {\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateLines(lineNumber: number, additionalLines: LineData[], minReservedLineCount: number): void {\n\t\tconst textModel = this.editor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { tabSize } = textModel.getOptions();\n\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\n\t\t\tconst heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n\t\t\tif (heightInLines > 0) {\n\t\t\t\tconst domNode = document.createElement('div');\n\t\t\t\trenderLines(domNode, tabSize, additionalLines, this.editor.getOptions());\n\n\t\t\t\tthis._viewZoneId = changeAccessor.addZone({\n\t\t\t\t\tafterLineNumber: lineNumber,\n\t\t\t\t\theightInLines: heightInLines,\n\t\t\t\t\tdomNode,\n\t\t\t\t\tafterColumnAffinity: PositionAffinity.Right\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface LineData {\n\tcontent: LineTokens; // Must not contain a linebreak!\n\tdecorations: LineDecoration[];\n}\n\nfunction renderLines(domNode: HTMLElement, tabSize: number, lines: LineData[], opts: IComputedEditorOptions): void {\n\tconst disableMonospaceOptimizations = opts.get(EditorOption.disableMonospaceOptimizations);\n\tconst stopRenderingLineAfter = opts.get(EditorOption.stopRenderingLineAfter);\n\t// To avoid visual confusion, we don't want to render visible whitespace\n\tconst renderWhitespace = 'none';\n\tconst renderControlCharacters = opts.get(EditorOption.renderControlCharacters);\n\tconst fontLigatures = opts.get(EditorOption.fontLigatures);\n\tconst fontInfo = opts.get(EditorOption.fontInfo);\n\tconst lineHeight = opts.get(EditorOption.lineHeight);\n\n\tconst sb = new StringBuilder(10000);\n\tsb.appendString('<div class=\"suggest-preview-text\">');\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst lineData = lines[i];\n\t\tconst lineTokens = lineData.content;\n\t\tsb.appendString('<div class=\"view-line');\n\t\tsb.appendString('\" style=\"top:');\n\t\tsb.appendString(String(i * lineHeight));\n\t\tsb.appendString('px;width:1000000px;\">');\n\n\t\tconst line = lineTokens.getLineContent();\n\t\tconst isBasicASCII = strings.isBasicASCII(line);\n\t\tconst containsRTL = strings.containsRTL(line);\n\n\t\trenderViewLine(new RenderLineInput(\n\t\t\t(fontInfo.isMonospace && !disableMonospaceOptimizations),\n\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\tlineData.decorations,\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\tfontInfo.spaceWidth,\n\t\t\tfontInfo.middotWidth,\n\t\t\tfontInfo.wsmiddotWidth,\n\t\t\tstopRenderingLineAfter,\n\t\t\trenderWhitespace,\n\t\t\trenderControlCharacters,\n\t\t\tfontLigatures !== EditorFontLigatures.OFF,\n\t\t\tnull\n\t\t), sb);\n\n\t\tsb.appendString('</div>');\n\t}\n\tsb.appendString('</div>');\n\n\tapplyFontInfo(domNode, fontInfo);\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n}\n\nexport const ttPolicy = createTrustedTypesPolicy('editorGhostText', { createHTML: value => value });\n"],
  "mappings": "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",
  "names": ["lines"]
}
