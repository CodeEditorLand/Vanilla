{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/view/ghostTextView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from \"../../../../../base/browser/trustedTypes.js\";\nimport { Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tautorun,\n\tderived,\n\tobservableSignalFromEvent,\n\tobservableValue,\n} from \"../../../../../base/common/observable.js\";\nimport * as strings from \"../../../../../base/common/strings.js\";\nimport \"./ghostTextView.css\";\nimport { applyFontInfo } from \"../../../../browser/config/domFontInfo.js\";\nimport type { ICodeEditor } from \"../../../../browser/editorBrowser.js\";\nimport { observableCodeEditor } from \"../../../../browser/observableCodeEditor.js\";\nimport {\n\tEditorFontLigatures,\n\tEditorOption,\n\ttype IComputedEditorOptions,\n} from \"../../../../common/config/editorOptions.js\";\nimport {\n\tOffsetEdit,\n\tSingleOffsetEdit,\n} from \"../../../../common/core/offsetEdit.js\";\nimport { Position } from \"../../../../common/core/position.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { StringBuilder } from \"../../../../common/core/stringBuilder.js\";\nimport { ILanguageService } from \"../../../../common/languages/language.js\";\nimport {\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\tInjectedTextCursorStops,\n\tPositionAffinity,\n} from \"../../../../common/model.js\";\nimport { LineEditWithAdditionalLines } from \"../../../../common/tokenizationTextModelPart.js\";\nimport { LineTokens } from \"../../../../common/tokens/lineTokens.js\";\nimport { LineDecoration } from \"../../../../common/viewLayout/lineDecorations.js\";\nimport {\n\tRenderLineInput,\n\trenderViewLine,\n} from \"../../../../common/viewLayout/viewLineRenderer.js\";\nimport { InlineDecorationType } from \"../../../../common/viewModel.js\";\nimport { type GhostText, GhostTextReplacement } from \"../model/ghostText.js\";\nimport { ColumnRange } from \"../utils.js\";\n\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<\n\t\tGhostText | GhostTextReplacement | undefined\n\t>;\n\treadonly minReservedLineCount: IObservable<number>;\n}\n\nexport class GhostTextView extends Disposable {\n\tprivate readonly _isDisposed = observableValue(this, false);\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this._isDisposed.set(true, undefined); }));\n\t\tthis._register(this._editorObs.setDecorations(this.decorations));\n\t}\n\n\tprivate readonly _useSyntaxHighlighting = this._editorObs\n\t\t.getOption(EditorOption.inlineSuggest)\n\t\t.map((v) => v.syntaxHighlightingEnabled);\n\n\tprivate readonly uiState = derived(this, (reader) => {\n\t\tif (this._isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this._editorObs.model.read(reader);\n\t\tif (textModel !== this._model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this._model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst replacedRange =\n\t\t\tghostText instanceof GhostTextReplacement\n\t\t\t\t? ghostText.columnRange\n\t\t\t\t: undefined;\n\n\t\tconst syntaxHighlightingEnabled =\n\t\t\tthis._useSyntaxHighlighting.read(reader);\n\t\tconst extraClassName = syntaxHighlightingEnabled\n\t\t\t? \" syntax-highlighted\"\n\t\t\t: \"\";\n\t\tconst { inlineTexts, additionalLines, hiddenRange } =\n\t\t\tcomputeGhostTextViewData(\n\t\t\t\tghostText,\n\t\t\t\ttextModel,\n\t\t\t\t\"ghost-text\" + extraClassName,\n\t\t\t);\n\n\t\tconst edit = new OffsetEdit(\n\t\t\tinlineTexts.map((t) =>\n\t\t\t\tSingleOffsetEdit.insert(t.column - 1, t.text),\n\t\t\t),\n\t\t);\n\t\tconst tokens = syntaxHighlightingEnabled\n\t\t\t? textModel.tokenization.tokenizeLineWithEdit(\n\t\t\t\t\tghostText.lineNumber,\n\t\t\t\t\tnew LineEditWithAdditionalLines(\n\t\t\t\t\t\tedit,\n\t\t\t\t\t\tadditionalLines.map((l) => l.content),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tconst newRanges = edit.getNewTextRanges();\n\t\tconst inlineTextsWithTokens = inlineTexts.map((t, idx) => ({\n\t\t\t...t,\n\t\t\ttokens: tokens?.mainLineTokens?.getTokensInRange(newRanges[idx]),\n\t\t}));\n\n\t\tconst tokenizedAdditionalLines: LineData[] = additionalLines.map(\n\t\t\t(l, idx) => ({\n\t\t\t\tcontent:\n\t\t\t\t\ttokens?.additionalLines?.[idx] ??\n\t\t\t\t\tLineTokens.createEmpty(\n\t\t\t\t\t\tl.content,\n\t\t\t\t\t\tthis._languageService.languageIdCodec,\n\t\t\t\t\t),\n\t\t\t\tdecorations: l.decorations,\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\treplacedRange,\n\t\t\tinlineTexts: inlineTextsWithTokens,\n\t\t\tadditionalLines: tokenizedAdditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber: ghostText.lineNumber,\n\t\t\tadditionalReservedLineCount:\n\t\t\t\tthis._model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t\tsyntaxHighlightingEnabled,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, (reader) => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tconst extraClassName = uiState.syntaxHighlightingEnabled\n\t\t\t? \" syntax-highlighted\"\n\t\t\t: \"\";\n\n\t\tif (uiState.replacedRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.replacedRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: {\n\t\t\t\t\tinlineClassName:\n\t\t\t\t\t\t\"inline-completion-text-to-replace\" + extraClassName,\n\t\t\t\t\tdescription: \"GhostTextReplacement\",\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: {\n\t\t\t\t\tinlineClassName: \"ghost-text-hidden\",\n\t\t\t\t\tdescription: \"ghost-text-hidden\",\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(\n\t\t\t\t\tnew Position(uiState.lineNumber, p.column),\n\t\t\t\t),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"ghost-text-decoration\",\n\t\t\t\t\tafter: {\n\t\t\t\t\t\tcontent: p.text,\n\t\t\t\t\t\ttokens: p.tokens,\n\t\t\t\t\t\tinlineClassName: p.preview\n\t\t\t\t\t\t\t? \"ghost-text-decoration-preview\"\n\t\t\t\t\t\t\t: \"ghost-text-decoration\" + extraClassName,\n\t\t\t\t\t\tcursorStops: InjectedTextCursorStops.Left,\n\t\t\t\t\t},\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis._editor,\n\t\t\tderived((reader) => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\t\t\tminReservedLineCount:\n\t\t\t\t\t\t\t\tuiState.additionalReservedLineCount,\n\t\t\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined;\n\t\t\t}),\n\t\t),\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n\nfunction computeGhostTextViewData(\n\tghostText: GhostText | GhostTextReplacement,\n\ttextModel: ITextModel,\n\tghostTextClassName: string,\n) {\n\tconst inlineTexts: { column: number; text: string; preview: boolean }[] =\n\t\t[];\n\tconst additionalLines: {\n\t\tcontent: string;\n\t\tdecorations: LineDecoration[];\n\t}[] = [];\n\n\tfunction addToAdditionalLines(\n\t\tlines: readonly string[],\n\t\tclassName: string | undefined,\n\t) {\n\t\tif (additionalLines.length > 0) {\n\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\tif (className) {\n\t\t\t\tlastLine.decorations.push(\n\t\t\t\t\tnew LineDecoration(\n\t\t\t\t\t\tlastLine.content.length + 1,\n\t\t\t\t\t\tlastLine.content.length + 1 + lines[0].length,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tlastLine.content += lines[0];\n\n\t\t\tlines = lines.slice(1);\n\t\t}\n\t\tfor (const line of lines) {\n\t\t\tadditionalLines.push({\n\t\t\t\tcontent: line,\n\t\t\t\tdecorations: className\n\t\t\t\t\t? [\n\t\t\t\t\t\t\tnew LineDecoration(\n\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\tline.length + 1,\n\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t]\n\t\t\t\t\t: [],\n\t\t\t});\n\t\t}\n\t}\n\n\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\tlet hiddenTextStartColumn: number | undefined;\n\tlet lastIdx = 0;\n\tfor (const part of ghostText.parts) {\n\t\tlet lines = part.lines;\n\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\tinlineTexts.push({\n\t\t\t\tcolumn: part.column,\n\t\t\t\ttext: lines[0],\n\t\t\t\tpreview: part.preview,\n\t\t\t});\n\t\t\tlines = lines.slice(1);\n\t\t} else {\n\t\t\taddToAdditionalLines(\n\t\t\t\t[textBufferLine.substring(lastIdx, part.column - 1)],\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\tif (lines.length > 0) {\n\t\t\taddToAdditionalLines(lines, ghostTextClassName);\n\t\t\tif (\n\t\t\t\thiddenTextStartColumn === undefined &&\n\t\t\t\tpart.column <= textBufferLine.length\n\t\t\t) {\n\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t}\n\t\t}\n\n\t\tlastIdx = part.column - 1;\n\t}\n\tif (hiddenTextStartColumn !== undefined) {\n\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t}\n\n\tconst hiddenRange =\n\t\thiddenTextStartColumn !== undefined\n\t\t\t? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1)\n\t\t\t: undefined;\n\n\treturn {\n\t\tinlineTexts,\n\t\tadditionalLines,\n\t\thiddenRange,\n\t};\n}\n\nexport class AdditionalLinesWidget extends Disposable {\n\tprivate _viewZoneId: string | undefined = undefined;\n\tpublic get viewZoneId(): string | undefined {\n\t\treturn this._viewZoneId;\n\t}\n\n\tprivate readonly editorOptionsChanged = observableSignalFromEvent(\n\t\t\"editorOptionChanged\",\n\t\tEvent.filter(\n\t\t\tthis.editor.onDidChangeConfiguration,\n\t\t\t(e) =>\n\t\t\t\te.hasChanged(EditorOption.disableMonospaceOptimizations) ||\n\t\t\t\te.hasChanged(EditorOption.stopRenderingLineAfter) ||\n\t\t\t\te.hasChanged(EditorOption.renderWhitespace) ||\n\t\t\t\te.hasChanged(EditorOption.renderControlCharacters) ||\n\t\t\t\te.hasChanged(EditorOption.fontLigatures) ||\n\t\t\t\te.hasChanged(EditorOption.fontInfo) ||\n\t\t\t\te.hasChanged(EditorOption.lineHeight),\n\t\t),\n\t);\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly lines: IObservable<\n\t\t\t| {\n\t\t\t\t\ttargetTextModel: ITextModel;\n\t\t\t\t\tlineNumber: number;\n\t\t\t\t\tadditionalLines: LineData[];\n\t\t\t\t\tminReservedLineCount: number;\n\t\t\t  }\n\t\t\t| undefined\n\t\t>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\t/** @description update view zone */\n\t\t\t\tconst lines = this.lines.read(reader);\n\t\t\t\tthis.editorOptionsChanged.read(reader);\n\n\t\t\t\tif (lines) {\n\t\t\t\t\tthis.updateLines(\n\t\t\t\t\t\tlines.lineNumber,\n\t\t\t\t\t\tlines.additionalLines,\n\t\t\t\t\t\tlines.minReservedLineCount,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tprivate clear(): void {\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateLines(\n\t\tlineNumber: number,\n\t\tadditionalLines: LineData[],\n\t\tminReservedLineCount: number,\n\t): void {\n\t\tconst textModel = this.editor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { tabSize } = textModel.getOptions();\n\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\n\t\t\tconst heightInLines = Math.max(\n\t\t\t\tadditionalLines.length,\n\t\t\t\tminReservedLineCount,\n\t\t\t);\n\t\t\tif (heightInLines > 0) {\n\t\t\t\tconst domNode = document.createElement(\"div\");\n\t\t\t\trenderLines(\n\t\t\t\t\tdomNode,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tadditionalLines,\n\t\t\t\t\tthis.editor.getOptions(),\n\t\t\t\t);\n\n\t\t\t\tthis._viewZoneId = changeAccessor.addZone({\n\t\t\t\t\tafterLineNumber: lineNumber,\n\t\t\t\t\theightInLines: heightInLines,\n\t\t\t\t\tdomNode,\n\t\t\t\t\tafterColumnAffinity: PositionAffinity.Right,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface LineData {\n\tcontent: LineTokens; // Must not contain a linebreak!\n\tdecorations: LineDecoration[];\n}\n\nfunction renderLines(\n\tdomNode: HTMLElement,\n\ttabSize: number,\n\tlines: LineData[],\n\topts: IComputedEditorOptions,\n): void {\n\tconst disableMonospaceOptimizations = opts.get(\n\t\tEditorOption.disableMonospaceOptimizations,\n\t);\n\tconst stopRenderingLineAfter = opts.get(\n\t\tEditorOption.stopRenderingLineAfter,\n\t);\n\t// To avoid visual confusion, we don't want to render visible whitespace\n\tconst renderWhitespace = \"none\";\n\tconst renderControlCharacters = opts.get(\n\t\tEditorOption.renderControlCharacters,\n\t);\n\tconst fontLigatures = opts.get(EditorOption.fontLigatures);\n\tconst fontInfo = opts.get(EditorOption.fontInfo);\n\tconst lineHeight = opts.get(EditorOption.lineHeight);\n\n\tconst sb = new StringBuilder(10000);\n\tsb.appendString('<div class=\"suggest-preview-text\">');\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst lineData = lines[i];\n\t\tconst lineTokens = lineData.content;\n\t\tsb.appendString('<div class=\"view-line');\n\t\tsb.appendString('\" style=\"top:');\n\t\tsb.appendString(String(i * lineHeight));\n\t\tsb.appendString('px;width:1000000px;\">');\n\n\t\tconst line = lineTokens.getLineContent();\n\t\tconst isBasicASCII = strings.isBasicASCII(line);\n\t\tconst containsRTL = strings.containsRTL(line);\n\n\t\trenderViewLine(\n\t\t\tnew RenderLineInput(\n\t\t\t\tfontInfo.isMonospace && !disableMonospaceOptimizations,\n\t\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\t\tline,\n\t\t\t\tfalse,\n\t\t\t\tisBasicASCII,\n\t\t\t\tcontainsRTL,\n\t\t\t\t0,\n\t\t\t\tlineTokens,\n\t\t\t\tlineData.decorations,\n\t\t\t\ttabSize,\n\t\t\t\t0,\n\t\t\t\tfontInfo.spaceWidth,\n\t\t\t\tfontInfo.middotWidth,\n\t\t\t\tfontInfo.wsmiddotWidth,\n\t\t\t\tstopRenderingLineAfter,\n\t\t\t\trenderWhitespace,\n\t\t\t\trenderControlCharacters,\n\t\t\t\tfontLigatures !== EditorFontLigatures.OFF,\n\t\t\t\tnull,\n\t\t\t),\n\t\t\tsb,\n\t\t);\n\n\t\tsb.appendString(\"</div>\");\n\t}\n\tsb.appendString(\"</div>\");\n\n\tapplyFontInfo(domNode, fontInfo);\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n}\n\nexport const ttPolicy = createTrustedTypesPolicy(\"editorGhostText\", {\n\tcreateHTML: (value) => value,\n});\n"],
  "mappings": "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",
  "names": ["lines"]
}
