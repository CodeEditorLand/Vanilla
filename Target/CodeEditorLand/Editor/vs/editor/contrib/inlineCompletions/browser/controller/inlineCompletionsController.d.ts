import { Disposable } from "vs/base/common/lifecycle";
import { ITransaction } from "vs/base/common/observable";
import { ICodeEditor } from "vs/editor/browser/editorBrowser";
import { Range } from "vs/editor/common/core/range";
import { ILanguageFeatureDebounceService } from "vs/editor/common/services/languageFeatureDebounce";
import { ILanguageFeaturesService } from "vs/editor/common/services/languageFeatures";
import { IAccessibilityService } from "vs/platform/accessibility/common/accessibility";
import { IAccessibilitySignalService } from "vs/platform/accessibilitySignal/browser/accessibilitySignalService";
import { ICommandService } from "vs/platform/commands/common/commands";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "vs/platform/keybinding/common/keybinding";
export declare class InlineCompletionsController extends Disposable {
    readonly editor: ICodeEditor;
    private readonly _instantiationService;
    private readonly _contextKeyService;
    private readonly _configurationService;
    private readonly _commandService;
    private readonly _debounceService;
    private readonly _languageFeaturesService;
    private readonly _accessibilitySignalService;
    private readonly _keybindingService;
    private readonly _accessibilityService;
    static ID: string;
    static get(editor: ICodeEditor): InlineCompletionsController | null;
    private readonly _editorObs;
    private readonly _positions;
    private readonly _suggestWidgetAdaptor;
    private readonly _suggestWidgetSelectedItem;
    private readonly _enabledInConfig;
    private readonly _isScreenReaderEnabled;
    private readonly _editorDictationInProgress;
    private readonly _enabled;
    private readonly _debounceValue;
    readonly model: any;
    private readonly _ghostTexts;
    private readonly _stablizedGhostTexts;
    private readonly _ghostTextWidgets;
    private readonly _playAccessibilitySignal;
    private readonly _fontFamily;
    constructor(editor: ICodeEditor, _instantiationService: IInstantiationService, _contextKeyService: IContextKeyService, _configurationService: IConfigurationService, _commandService: ICommandService, _debounceService: ILanguageFeatureDebounceService, _languageFeaturesService: ILanguageFeaturesService, _accessibilitySignalService: IAccessibilitySignalService, _keybindingService: IKeybindingService, _accessibilityService: IAccessibilityService);
    playAccessibilitySignal(tx: ITransaction): void;
    private _provideScreenReaderUpdate;
    shouldShowHoverAt(range: Range): any;
    shouldShowHoverAtViewZone(viewZoneId: string): boolean;
    hide(): void;
}
