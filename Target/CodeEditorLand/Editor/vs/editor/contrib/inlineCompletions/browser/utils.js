import{BugIndicatingError as a}from"../../../../../vs/base/common/errors.js";import{DisposableStore as u}from"../../../../../vs/base/common/lifecycle.js";import{autorunOpts as m}from"../../../../../vs/base/common/observable.js";import"../../../../../vs/editor/browser/editorBrowser.js";import{Position as t}from"../../../../../vs/editor/common/core/position.js";import{Range as s}from"../../../../../vs/editor/common/core/range.js";import"../../../../../vs/editor/common/model.js";const c=[];function N(){return c}class E{constructor(o,n){this.startColumn=o;this.endColumnExclusive=n;if(o>n)throw new a(`startColumn ${o} cannot be after endColumnExclusive ${n}`)}toRange(o){return new s(o,this.startColumn,o,this.endColumnExclusive)}equals(o){return this.startColumn===o.startColumn&&this.endColumnExclusive===o.endColumnExclusive}}function R(e,o){const n=new u,r=e.createDecorationsCollection();return n.add(m({debugName:()=>`Apply decorations from ${o.debugName}`},i=>{const l=o.read(i);r.set(l)})),n.add({dispose:()=>{r.clear()}}),n}function v(e,o){return new t(e.lineNumber+o.lineNumber-1,o.lineNumber===1?e.column+o.column-1:o.column)}function w(e,o){return new t(e.lineNumber-o.lineNumber+1,e.lineNumber-o.lineNumber===0?e.column-o.column+1:e.column)}export{E as ColumnRange,v as addPositions,R as applyObservableDecorations,N as getReadonlyEmptyArray,w as subtractPositions};
