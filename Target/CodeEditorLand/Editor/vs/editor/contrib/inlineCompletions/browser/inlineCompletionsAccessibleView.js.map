{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsAccessibleView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tAccessibleViewProviderId,\n\tAccessibleViewType,\n\ttype IAccessibleViewContentProvider,\n} from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport type { IAccessibleViewImplentation } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../browser/services/codeEditorService.js\";\nimport { InlineCompletionContextKeys } from \"./controller/inlineCompletionContextKeys.js\";\nimport { InlineCompletionsController } from \"./controller/inlineCompletionsController.js\";\nimport type { InlineCompletionsModel } from \"./model/inlineCompletionsModel.js\";\n\nexport class InlineCompletionsAccessibleView\n\timplements IAccessibleViewImplentation\n{\n\treadonly type = AccessibleViewType.View;\n\treadonly priority = 95;\n\treadonly name = \"inline-completions\";\n\treadonly when = ContextKeyExpr.and(\n\t\tInlineCompletionContextKeys.inlineSuggestionVisible,\n\t);\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor =\n\t\t\tcodeEditorService.getActiveCodeEditor() ||\n\t\t\tcodeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = InlineCompletionsController.get(editor)?.model.get();\n\t\tif (!model?.state.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new InlineCompletionsAccessibleViewContentProvider(\n\t\t\teditor,\n\t\t\tmodel,\n\t\t);\n\t}\n}\n\nclass InlineCompletionsAccessibleViewContentProvider\n\textends Disposable\n\timplements IAccessibleViewContentProvider\n{\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeContent: Event<void> =\n\t\tthis._onDidChangeContent.event;\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: InlineCompletionsModel,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic readonly id = AccessibleViewProviderId.InlineCompletions;\n\tpublic readonly verbositySettingKey =\n\t\t\"accessibility.verbosity.inlineCompletions\";\n\tpublic readonly options = {\n\t\tlanguage: this._editor.getModel()?.getLanguageId() ?? undefined,\n\t\ttype: AccessibleViewType.View,\n\t};\n\n\tpublic provideContent(): string {\n\t\tconst state = this._model.state.get();\n\t\tif (!state) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Inline completion is visible but state is not available\",\n\t\t\t);\n\t\t}\n\t\tconst lineText = this._model.textModel.getLineContent(\n\t\t\tstate.primaryGhostText.lineNumber,\n\t\t);\n\t\tconst ghostText =\n\t\t\tstate.primaryGhostText.renderForScreenReader(lineText);\n\t\tif (!ghostText) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Inline completion is visible but ghost text is not available\",\n\t\t\t);\n\t\t}\n\t\treturn lineText + ghostText;\n\t}\n\tpublic provideNextContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.next().then(() => this._onDidChangeContent.fire());\n\t\treturn;\n\t}\n\tpublic providePreviousContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.previous().then(() => this._onDidChangeContent.fire());\n\t\treturn;\n\t}\n\tpublic onClose(): void {\n\t\tthis._model.stop();\n\t\tthis._editor.focus();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAEP,SAAS,sBAAsB;AAG/B,SAAS,0BAA0B;AACnC,SAAS,mCAAmC;AAC5C,SAAS,mCAAmC;AAGrC,MAAM,gCAEb;AAAA,EAvBA,OAuBA;AAAA;AAAA;AAAA,EACU,OAAO,mBAAmB;AAAA,EAC1B,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,eAAe;AAAA,IAC9B,4BAA4B;AAAA,EAC7B;AAAA,EACA,YAAY,UAA4B;AACvC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,SACL,kBAAkB,oBAAoB,KACtC,kBAAkB,qBAAqB;AACxC,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AAEA,UAAM,QAAQ,4BAA4B,IAAI,MAAM,GAAG,MAAM,IAAI;AACjE,QAAI,CAAC,OAAO,MAAM,IAAI,GAAG;AACxB;AAAA,IACD;AAEA,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,uDACG,WAET;AAAA,EAMC,YACkB,SACA,QAChB;AACD,UAAM;AAHW;AACA;AAAA,EAGlB;AAAA,EAjED,OAsDA;AAAA;AAAA;AAAA,EACkB,sBAAqC,KAAK;AAAA,IAC1D,IAAI,QAAc;AAAA,EACnB;AAAA,EACgB,qBACf,KAAK,oBAAoB;AAAA,EAQV,KAAK,yBAAyB;AAAA,EAC9B,sBACf;AAAA,EACe,UAAU;AAAA,IACzB,UAAU,KAAK,QAAQ,SAAS,GAAG,cAAc,KAAK;AAAA,IACtD,MAAM,mBAAmB;AAAA,EAC1B;AAAA,EAEO,iBAAyB;AAC/B,UAAM,QAAQ,KAAK,OAAO,MAAM,IAAI;AACpC,QAAI,CAAC,OAAO;AACX,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AACA,UAAM,WAAW,KAAK,OAAO,UAAU;AAAA,MACtC,MAAM,iBAAiB;AAAA,IACxB;AACA,UAAM,YACL,MAAM,iBAAiB,sBAAsB,QAAQ;AACtD,QAAI,CAAC,WAAW;AACf,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AACA,WAAO,WAAW;AAAA,EACnB;AAAA,EACO,qBAAyC;AAE/C,SAAK,OAAO,KAAK,EAAE,KAAK,MAAM,KAAK,oBAAoB,KAAK,CAAC;AAC7D;AAAA,EACD;AAAA,EACO,yBAA6C;AAEnD,SAAK,OAAO,SAAS,EAAE,KAAK,MAAM,KAAK,oBAAoB,KAAK,CAAC;AACjE;AAAA,EACD;AAAA,EACO,UAAgB;AACtB,SAAK,OAAO,KAAK;AACjB,SAAK,QAAQ,MAAM;AAAA,EACpB;AACD;",
  "names": []
}
