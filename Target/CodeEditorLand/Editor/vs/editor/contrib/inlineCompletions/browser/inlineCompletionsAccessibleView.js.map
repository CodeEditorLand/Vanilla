{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsAccessibleView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { InlineCompletionContextKeys } from './controller/inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './controller/inlineCompletionsController.js';\nimport { AccessibleViewType, AccessibleViewProviderId, IAccessibleViewContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplentation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InlineCompletionsModel } from './model/inlineCompletionsModel.js';\n\nexport class InlineCompletionsAccessibleView implements IAccessibleViewImplentation {\n\treadonly type = AccessibleViewType.View;\n\treadonly priority = 95;\n\treadonly name = 'inline-completions';\n\treadonly when = ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible);\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = InlineCompletionsController.get(editor)?.model.get();\n\t\tif (!model?.state.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new InlineCompletionsAccessibleViewContentProvider(editor, model);\n\t}\n}\n\nclass InlineCompletionsAccessibleViewContentProvider extends Disposable implements IAccessibleViewContentProvider {\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: InlineCompletionsModel,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic readonly id = AccessibleViewProviderId.InlineCompletions;\n\tpublic readonly verbositySettingKey = 'accessibility.verbosity.inlineCompletions';\n\tpublic readonly options = { language: this._editor.getModel()?.getLanguageId() ?? undefined, type: AccessibleViewType.View };\n\n\tpublic provideContent(): string {\n\t\tconst state = this._model.state.get();\n\t\tif (!state) {\n\t\t\tthrow new Error('Inline completion is visible but state is not available');\n\t\t}\n\t\tconst lineText = this._model.textModel.getLineContent(state.primaryGhostText.lineNumber);\n\t\tconst ghostText = state.primaryGhostText.renderForScreenReader(lineText);\n\t\tif (!ghostText) {\n\t\t\tthrow new Error('Inline completion is visible but ghost text is not available');\n\t\t}\n\t\treturn lineText + ghostText;\n\t}\n\tpublic provideNextContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.next().then((() => this._onDidChangeContent.fire()));\n\t\treturn;\n\t}\n\tpublic providePreviousContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.previous().then((() => this._onDidChangeContent.fire()));\n\t\treturn;\n\t}\n\tpublic onClose(): void {\n\t\tthis._model.stop();\n\t\tthis._editor.focus();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,mCAAmC;AAC5C,SAAS,mCAAmC;AAC5C,SAAS,oBAAoB,0BAA0B,sCAAsC;AAC7F,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,8BAA8B;AAEhC,MAAM,gCAAuE;AAAA,EAjBpF,OAiBoF;AAAA;AAAA;AAAA,EAC1E,OAAO,mBAAmB;AAAA,EAC1B,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,eAAe,IAAI,4BAA4B,uBAAuB;AAAA,EACtF,YAAY,UAA4B;AACvC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,SAAS,kBAAkB,oBAAoB,KAAK,kBAAkB,qBAAqB;AACjG,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AAEA,UAAM,QAAQ,4BAA4B,IAAI,MAAM,GAAG,MAAM,IAAI;AACjE,QAAI,CAAC,OAAO,MAAM,IAAI,GAAG;AACxB;AAAA,IACD;AAEA,WAAO,IAAI,+CAA+C,QAAQ,KAAK;AAAA,EACxE;AACD;AAEA,MAAM,uDAAuD,WAAqD;AAAA,EAGjH,YACkB,SACA,QAChB;AACD,UAAM;AAHW;AACA;AAAA,EAGlB;AAAA,EA9CD,OAsCkH;AAAA;AAAA;AAAA,EAChG,sBAAqC,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACxE,qBAAkC,KAAK,oBAAoB;AAAA,EAQ3D,KAAK,yBAAyB;AAAA,EAC9B,sBAAsB;AAAA,EACtB,UAAU,EAAE,UAAU,KAAK,QAAQ,SAAS,GAAG,cAAc,KAAK,QAAW,MAAM,mBAAmB,KAAK;AAAA,EAEpH,iBAAyB;AAC/B,UAAM,QAAQ,KAAK,OAAO,MAAM,IAAI;AACpC,QAAI,CAAC,OAAO;AACX,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC1E;AACA,UAAM,WAAW,KAAK,OAAO,UAAU,eAAe,MAAM,iBAAiB,UAAU;AACvF,UAAM,YAAY,MAAM,iBAAiB,sBAAsB,QAAQ;AACvE,QAAI,CAAC,WAAW;AACf,YAAM,IAAI,MAAM,8DAA8D;AAAA,IAC/E;AACA,WAAO,WAAW;AAAA,EACnB;AAAA,EACO,qBAAyC;AAE/C,SAAK,OAAO,KAAK,EAAE,KAAM,MAAM,KAAK,oBAAoB,KAAK,CAAE;AAC/D;AAAA,EACD;AAAA,EACO,yBAA6C;AAEnD,SAAK,OAAO,SAAS,EAAE,KAAM,MAAM,KAAK,oBAAoB,KAAK,CAAE;AACnE;AAAA,EACD;AAAA,EACO,UAAgB;AACtB,SAAK,OAAO,KAAK;AACjB,SAAK,QAAQ,MAAM;AAAA,EACpB;AACD;",
  "names": []
}
