{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tautorun,\n} from \"../../../../../base/common/observable.js\";\nimport { firstNonWhitespaceIndex } from \"../../../../../base/common/strings.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport {\n\ttype IContextKeyService,\n\tRawContextKey,\n} from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { CursorColumns } from \"../../../../common/core/cursorColumns.js\";\nimport type { InlineCompletionsModel } from \"../model/inlineCompletionsModel.js\";\n\nexport class InlineCompletionContextKeys extends Disposable {\n\tpublic static readonly inlineSuggestionVisible = new RawContextKey<boolean>(\n\t\t\"inlineSuggestionVisible\",\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"inlineSuggestionVisible\",\n\t\t\t\"Whether an inline suggestion is visible\",\n\t\t),\n\t);\n\tpublic static readonly inlineSuggestionHasIndentation =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"inlineSuggestionHasIndentation\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"inlineSuggestionHasIndentation\",\n\t\t\t\t\"Whether the inline suggestion starts with whitespace\",\n\t\t\t),\n\t\t);\n\tpublic static readonly inlineSuggestionHasIndentationLessThanTabSize =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"inlineSuggestionHasIndentationLessThanTabSize\",\n\t\t\ttrue,\n\t\t\tlocalize(\n\t\t\t\t\"inlineSuggestionHasIndentationLessThanTabSize\",\n\t\t\t\t\"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\",\n\t\t\t),\n\t\t);\n\tpublic static readonly suppressSuggestions = new RawContextKey<\n\t\tboolean | undefined\n\t>(\n\t\t\"inlineSuggestionSuppressSuggestions\",\n\t\tundefined,\n\t\tlocalize(\n\t\t\t\"suppressSuggestions\",\n\t\t\t\"Whether suggestions should be suppressed for the current suggestion\",\n\t\t),\n\t);\n\n\tpublic readonly inlineCompletionVisible =\n\t\tInlineCompletionContextKeys.inlineSuggestionVisible.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\tpublic readonly inlineCompletionSuggestsIndentation =\n\t\tInlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\tpublic readonly inlineCompletionSuggestsIndentationLessThanTabSize =\n\t\tInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\tpublic readonly suppressSuggestions =\n\t\tInlineCompletionContextKeys.suppressSuggestions.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\n\tconstructor(\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\tprivate readonly model: IObservable<InlineCompletionsModel | undefined>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\t/** @description update context key: inlineCompletionVisible, suppressSuggestions */\n\t\t\t\tconst model = this.model.read(reader);\n\t\t\t\tconst state = model?.state.read(reader);\n\n\t\t\t\tconst isInlineCompletionVisible =\n\t\t\t\t\t!!state?.inlineCompletion &&\n\t\t\t\t\tstate?.primaryGhostText !== undefined &&\n\t\t\t\t\t!state?.primaryGhostText.isEmpty();\n\t\t\t\tthis.inlineCompletionVisible.set(isInlineCompletionVisible);\n\n\t\t\t\tif (state?.primaryGhostText && state?.inlineCompletion) {\n\t\t\t\t\tthis.suppressSuggestions.set(\n\t\t\t\t\t\tstate.inlineCompletion.inlineCompletion.source\n\t\t\t\t\t\t\t.inlineCompletions.suppressSuggestions,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\t/** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n\t\t\t\tconst model = this.model.read(reader);\n\n\t\t\t\tlet startsWithIndentation = false;\n\t\t\t\tlet startsWithIndentationLessThanTabSize = true;\n\n\t\t\t\tconst ghostText = model?.primaryGhostText.read(reader);\n\t\t\t\tif (\n\t\t\t\t\t!!model?.selectedSuggestItem &&\n\t\t\t\t\tghostText &&\n\t\t\t\t\tghostText.parts.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\t\t\tconst firstLine = lines[0];\n\n\t\t\t\t\tconst indentationEndColumn =\n\t\t\t\t\t\tmodel.textModel.getLineIndentColumn(\n\t\t\t\t\t\t\tghostText.lineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\t\t\tif (inIndentation) {\n\t\t\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\t\t\tconst tabSize = model.textModel.getOptions().tabSize;\n\t\t\t\t\t\tconst visibleColumnIndentation =\n\t\t\t\t\t\t\tCursorColumns.visibleColumnFromColumn(\n\t\t\t\t\t\t\t\tfirstLine,\n\t\t\t\t\t\t\t\tfirstNonWsIdx + 1,\n\t\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tstartsWithIndentationLessThanTabSize =\n\t\t\t\t\t\t\tvisibleColumnIndentation < tabSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.inlineCompletionSuggestsIndentation.set(\n\t\t\t\t\tstartsWithIndentation,\n\t\t\t\t);\n\t\t\t\tthis.inlineCompletionSuggestsIndentationLessThanTabSize.set(\n\t\t\t\t\tstartsWithIndentationLessThanTabSize,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B;AAAA,EAEC;AAAA,OACM;AACP,SAAS,+BAA+B;AACxC,SAAS,gBAAgB;AACzB;AAAA,EAEC;AAAA,OACM;AACP,SAAS,qBAAqB;AAGvB,MAAM,oCAAoC,WAAW;AAAA,EAuD3D,YACkB,mBACA,OAChB;AACD,UAAM;AAHW;AACA;AAIjB,SAAK;AAAA,MACJ,QAAQ,CAAC,WAAW;AAEnB,cAAMA,SAAQ,KAAK,MAAM,KAAK,MAAM;AACpC,cAAM,QAAQA,QAAO,MAAM,KAAK,MAAM;AAEtC,cAAM,4BACL,CAAC,CAAC,OAAO,oBACT,OAAO,qBAAqB,UAC5B,CAAC,OAAO,iBAAiB,QAAQ;AAClC,aAAK,wBAAwB,IAAI,yBAAyB;AAE1D,YAAI,OAAO,oBAAoB,OAAO,kBAAkB;AACvD,eAAK,oBAAoB;AAAA,YACxB,MAAM,iBAAiB,iBAAiB,OACtC,kBAAkB;AAAA,UACrB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,QAAQ,CAAC,WAAW;AAEnB,cAAMA,SAAQ,KAAK,MAAM,KAAK,MAAM;AAEpC,YAAI,wBAAwB;AAC5B,YAAI,uCAAuC;AAE3C,cAAM,YAAYA,QAAO,iBAAiB,KAAK,MAAM;AACrD,YACC,CAAC,CAACA,QAAO,uBACT,aACA,UAAU,MAAM,SAAS,GACxB;AACD,gBAAM,EAAE,QAAQ,MAAM,IAAI,UAAU,MAAM,CAAC;AAE3C,gBAAM,YAAY,MAAM,CAAC;AAEzB,gBAAM,uBACLA,OAAM,UAAU;AAAA,YACf,UAAU;AAAA,UACX;AACD,gBAAM,gBAAgB,UAAU;AAEhC,cAAI,eAAe;AAClB,gBAAI,gBAAgB,wBAAwB,SAAS;AACrD,gBAAI,kBAAkB,IAAI;AACzB,8BAAgB,UAAU,SAAS;AAAA,YACpC;AACA,oCAAwB,gBAAgB;AAExC,kBAAM,UAAUA,OAAM,UAAU,WAAW,EAAE;AAC7C,kBAAM,2BACL,cAAc;AAAA,cACb;AAAA,cACA,gBAAgB;AAAA,cAChB;AAAA,YACD;AACD,mDACC,2BAA2B;AAAA,UAC7B;AAAA,QACD;AAEA,aAAK,oCAAoC;AAAA,UACxC;AAAA,QACD;AACA,aAAK,mDAAmD;AAAA,UACvD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAxJD,OAmB4D;AAAA;AAAA;AAAA,EAC3D,OAAuB,0BAA0B,IAAI;AAAA,IACpD;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EACA,OAAuB,iCACtB,IAAI;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EACD,OAAuB,gDACtB,IAAI;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EACD,OAAuB,sBAAsB,IAAI;AAAA,IAGhD;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEgB,0BACf,4BAA4B,wBAAwB;AAAA,IACnD,KAAK;AAAA,EACN;AAAA,EACe,sCACf,4BAA4B,+BAA+B;AAAA,IAC1D,KAAK;AAAA,EACN;AAAA,EACe,qDACf,4BAA4B,8CAA8C;AAAA,IACzE,KAAK;AAAA,EACN;AAAA,EACe,sBACf,4BAA4B,oBAAoB;AAAA,IAC/C,KAAK;AAAA,EACN;AAiFF;",
  "names": ["model"]
}
