{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, autorun } from '../../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../../base/common/strings.js';\nimport { CursorColumns } from '../../../../common/core/cursorColumns.js';\nimport { InlineCompletionsModel } from '../model/inlineCompletionsModel.js';\nimport { RawContextKey, IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../../nls.js';\n\nexport class InlineCompletionContextKeys extends Disposable {\n\tpublic static readonly inlineSuggestionVisible = new RawContextKey<boolean>('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\n\tpublic static readonly inlineSuggestionHasIndentation = new RawContextKey<boolean>('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\n\tpublic static readonly inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey<boolean>('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\n\tpublic static readonly suppressSuggestions = new RawContextKey<boolean | undefined>('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n\n\tpublic readonly inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n\tpublic readonly inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n\tpublic readonly inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n\tpublic readonly suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n\n\tconstructor(\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\tprivate readonly model: IObservable<InlineCompletionsModel | undefined>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update context key: inlineCompletionVisible, suppressSuggestions */\n\t\t\tconst model = this.model.read(reader);\n\t\t\tconst state = model?.state.read(reader);\n\n\t\t\tconst isInlineCompletionVisible = !!state?.inlineCompletion && state?.primaryGhostText !== undefined && !state?.primaryGhostText.isEmpty();\n\t\t\tthis.inlineCompletionVisible.set(isInlineCompletionVisible);\n\n\t\t\tif (state?.primaryGhostText && state?.inlineCompletion) {\n\t\t\t\tthis.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n\t\t\tconst model = this.model.read(reader);\n\n\t\t\tlet startsWithIndentation = false;\n\t\t\tlet startsWithIndentationLessThanTabSize = true;\n\n\t\t\tconst ghostText = model?.primaryGhostText.read(reader);\n\t\t\tif (!!model?.selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\t\tconst firstLine = lines[0];\n\n\t\t\t\tconst indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\t\tif (inIndentation) {\n\t\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\t\tconst tabSize = model.textModel.getOptions().tabSize;\n\t\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n\t\t\tthis.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n\t\t}));\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa,eAAe;AACrC,SAAS,+BAA+B;AACxC,SAAS,qBAAqB;AAC9B,SAAS,8BAA8B;AACvC,SAAS,eAAe,0BAA0B;AAClD,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AAElB,MAAM,oCAAoC,WAAW;AAAA,EAW3D,YACkB,mBACA,OAChB;AACD,UAAM;AAHW;AACA;AAIjB,SAAK,UAAU,QAAQ,YAAU;AAEhC,YAAMA,SAAQ,KAAK,MAAM,KAAK,MAAM;AACpC,YAAM,QAAQA,QAAO,MAAM,KAAK,MAAM;AAEtC,YAAM,4BAA4B,CAAC,CAAC,OAAO,oBAAoB,OAAO,qBAAqB,UAAa,CAAC,OAAO,iBAAiB,QAAQ;AACzI,WAAK,wBAAwB,IAAI,yBAAyB;AAE1D,UAAI,OAAO,oBAAoB,OAAO,kBAAkB;AACvD,aAAK,oBAAoB,IAAI,MAAM,iBAAiB,iBAAiB,OAAO,kBAAkB,mBAAmB;AAAA,MAClH;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,UAAU,QAAQ,YAAU;AAEhC,YAAMA,SAAQ,KAAK,MAAM,KAAK,MAAM;AAEpC,UAAI,wBAAwB;AAC5B,UAAI,uCAAuC;AAE3C,YAAM,YAAYA,QAAO,iBAAiB,KAAK,MAAM;AACrD,UAAI,CAAC,CAACA,QAAO,uBAAuB,aAAa,UAAU,MAAM,SAAS,GAAG;AAC5E,cAAM,EAAE,QAAQ,MAAM,IAAI,UAAU,MAAM,CAAC;AAE3C,cAAM,YAAY,MAAM,CAAC;AAEzB,cAAM,uBAAuBA,OAAM,UAAU,oBAAoB,UAAU,UAAU;AACrF,cAAM,gBAAgB,UAAU;AAEhC,YAAI,eAAe;AAClB,cAAI,gBAAgB,wBAAwB,SAAS;AACrD,cAAI,kBAAkB,IAAI;AACzB,4BAAgB,UAAU,SAAS;AAAA,UACpC;AACA,kCAAwB,gBAAgB;AAExC,gBAAM,UAAUA,OAAM,UAAU,WAAW,EAAE;AAC7C,gBAAM,2BAA2B,cAAc,wBAAwB,WAAW,gBAAgB,GAAG,OAAO;AAC5G,iDAAuC,2BAA2B;AAAA,QACnE;AAAA,MACD;AAEA,WAAK,oCAAoC,IAAI,qBAAqB;AAClE,WAAK,mDAAmD,IAAI,oCAAoC;AAAA,IACjG,CAAC,CAAC;AAAA,EACH;AAAA,EA3ED,OAa4D;AAAA;AAAA;AAAA,EAC3D,OAAuB,0BAA0B,IAAI,cAAuB,2BAA2B,OAAO,SAAS,2BAA2B,yCAAyC,CAAC;AAAA,EAC5L,OAAuB,iCAAiC,IAAI,cAAuB,kCAAkC,OAAO,SAAS,kCAAkC,sDAAsD,CAAC;AAAA,EAC9N,OAAuB,gDAAgD,IAAI,cAAuB,iDAAiD,MAAM,SAAS,iDAAiD,sGAAsG,CAAC;AAAA,EAC1T,OAAuB,sBAAsB,IAAI,cAAmC,uCAAuC,QAAW,SAAS,uBAAuB,qEAAqE,CAAC;AAAA,EAE5N,0BAA0B,4BAA4B,wBAAwB,OAAO,KAAK,iBAAiB;AAAA,EAC3G,sCAAsC,4BAA4B,+BAA+B,OAAO,KAAK,iBAAiB;AAAA,EAC9H,qDAAqD,4BAA4B,8CAA8C,OAAO,KAAK,iBAAiB;AAAA,EAC5J,sBAAsB,4BAA4B,oBAAoB,OAAO,KAAK,iBAAiB;AAsDpH;",
  "names": ["model"]
}
