import{LcsDiff as y}from"../../../../../base/common/diff/diff.js";import{commonPrefixLength as D,getLeadingWhitespace as L}from"../../../../../base/common/strings.js";import{Range as P}from"../../../../common/core/range.js";import{SingleTextEdit as I}from"../../../../common/core/textEdit.js";import{TextLength as N}from"../../../../common/core/textLength.js";import{EndOfLinePreference as A}from"../../../../common/model.js";import{GhostText as M,GhostTextPart as S}from"./ghostText.js";function v(t,n,r){const f=r?t.range.intersectRanges(r):t.range;if(!f)return t;const u=n.getValueInRange(f,A.LF),e=D(u,t.text),c=N.ofText(u.substring(0,e)).addToPosition(t.range.getStartPosition()),h=t.text.substring(e),p=P.fromPositions(c,t.range.getEndPosition());return new I(p,h)}function H(t,n){return t.text.startsWith(n.text)&&G(t.range,n.range)}function J(t,n,r,f,u=0){let e=v(t,n);if(e.range.endLineNumber!==e.range.startLineNumber)return;const c=n.getLineContent(e.range.startLineNumber),h=L(c).length;if(e.range.startColumn-1<=h){const o=L(e.text).length,a=c.substring(e.range.startColumn-1,h),[x,m]=[e.range.getStartPosition(),e.range.getEndPosition()],C=x.column+a.length<=m.column?x.delta(0,a.length):m,T=P.fromPositions(C,m),R=e.text.startsWith(a)?e.text.substring(a.length):e.text.substring(o);e=new I(T,R)}const i=n.getValueInRange(e.range),s=q(i,e.text);if(!s)return;const l=e.range.startLineNumber,d=new Array;if(r==="prefix"){const o=s.filter(a=>a.originalLength===0);if(o.length>1||o.length===1&&o[0].originalStart!==i.length)return}const g=e.text.length-u;for(const o of s){const a=e.range.startColumn+o.originalStart+o.originalLength;if(r==="subwordSmart"&&f&&f.lineNumber===e.range.startLineNumber&&a<f.column||o.originalLength>0)return;if(o.modifiedLength===0)continue;const x=o.modifiedStart+o.modifiedLength,m=Math.max(o.modifiedStart,Math.min(x,g)),C=e.text.substring(o.modifiedStart,m),T=e.text.substring(m,Math.max(o.modifiedStart,x));C.length>0&&d.push(new S(a,C,!1)),T.length>0&&d.push(new S(a,T,!0))}return new M(l,d)}function G(t,n){return n.getStartPosition().equals(t.getStartPosition())&&n.getEndPosition().isBeforeOrEqual(t.getEndPosition())}let b;function q(t,n){if(b?.originalValue===t&&b?.newValue===n)return b?.changes;{let r=w(t,n,!0);if(r){const f=E(r);if(f>0){const u=w(t,n,!1);u&&E(u)<f&&(r=u)}}return b={originalValue:t,newValue:n,changes:r},r}}function E(t){let n=0;for(const r of t)n+=r.originalLength;return n}function w(t,n,r){if(t.length>5e3||n.length>5e3)return;function f(i){let s=0;for(let l=0,d=i.length;l<d;l++){const g=i.charCodeAt(l);g>s&&(s=g)}return s}const u=Math.max(f(t),f(n));function e(i){if(i<0)throw new Error("unexpected");return u+i+1}function c(i){let s=0,l=0;const d=new Int32Array(i.length);for(let g=0,o=i.length;g<o;g++)if(r&&i[g]==="("){const a=l*100+s;d[g]=e(2*a),s++}else if(r&&i[g]===")"){s=Math.max(s-1,0);const a=l*100+s;d[g]=e(2*a+1),s===0&&l++}else d[g]=i.charCodeAt(g);return d}const h=c(t),p=c(n);return new y({getElements:()=>h},{getElements:()=>p}).ComputeDiff(!1).changes}export{J as computeGhostText,H as singleTextEditAugments,v as singleTextRemoveCommonPrefix};
