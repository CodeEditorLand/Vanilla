{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/singleTextEditHelpers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { commonPrefixLength } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { TextLength } from '../../../../common/core/textLength.js';\nimport { SingleTextEdit } from '../../../../common/core/textEdit.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\n\nexport function singleTextRemoveCommonPrefix(edit: SingleTextEdit, model: ITextModel, validModelRange?: Range): SingleTextEdit {\n\tconst modelRange = validModelRange ? edit.range.intersectRanges(validModelRange) : edit.range;\n\tif (!modelRange) {\n\t\treturn edit;\n\t}\n\tconst valueToReplace = model.getValueInRange(modelRange, EndOfLinePreference.LF);\n\tconst commonPrefixLen = commonPrefixLength(valueToReplace, edit.text);\n\tconst start = TextLength.ofText(valueToReplace.substring(0, commonPrefixLen)).addToPosition(edit.range.getStartPosition());\n\tconst text = edit.text.substring(commonPrefixLen);\n\tconst range = Range.fromPositions(start, edit.range.getEndPosition());\n\treturn new SingleTextEdit(range, text);\n}\n\nexport function singleTextEditAugments(edit: SingleTextEdit, base: SingleTextEdit): boolean {\n\t// The augmented completion must replace the base range, but can replace even more\n\treturn edit.text.startsWith(base.text) && rangeExtends(edit.range, base.range);\n}\n\nfunction rangeExtends(extendingRange: Range, rangeToExtend: Range): boolean {\n\treturn rangeToExtend.getStartPosition().equals(extendingRange.getStartPosition())\n\t\t&& rangeToExtend.getEndPosition().isBeforeOrEqual(extendingRange.getEndPosition());\n}\n"],
  "mappings": ";;AAKA,SAAS,0BAA0B;AACnC,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB,kBAAkB;AAEzC,SAAS,6BAA6B,MAAsB,OAAmB,iBAAyC;AAC9H,QAAM,aAAa,kBAAkB,KAAK,MAAM,gBAAgB,eAAe,IAAI,KAAK;AACxF,MAAI,CAAC,YAAY;AAChB,WAAO;AAAA,EACR;AACA,QAAM,iBAAiB,MAAM,gBAAgB,YAAY,oBAAoB,EAAE;AAC/E,QAAM,kBAAkB,mBAAmB,gBAAgB,KAAK,IAAI;AACpE,QAAM,QAAQ,WAAW,OAAO,eAAe,UAAU,GAAG,eAAe,CAAC,EAAE,cAAc,KAAK,MAAM,iBAAiB,CAAC;AACzH,QAAM,OAAO,KAAK,KAAK,UAAU,eAAe;AAChD,QAAM,QAAQ,MAAM,cAAc,OAAO,KAAK,MAAM,eAAe,CAAC;AACpE,SAAO,IAAI,eAAe,OAAO,IAAI;AACtC;AAXgB;AAaT,SAAS,uBAAuB,MAAsB,MAA+B;AAE3F,SAAO,KAAK,KAAK,WAAW,KAAK,IAAI,KAAK,aAAa,KAAK,OAAO,KAAK,KAAK;AAC9E;AAHgB;AAKhB,SAAS,aAAa,gBAAuB,eAA+B;AAC3E,SAAO,cAAc,iBAAiB,EAAE,OAAO,eAAe,iBAAiB,CAAC,KAC5E,cAAc,eAAe,EAAE,gBAAgB,eAAe,eAAe,CAAC;AACnF;AAHS;",
  "names": []
}
