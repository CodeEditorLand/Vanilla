{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/singleTextEditHelpers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { commonPrefixLength } from \"../../../../../base/common/strings.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { SingleTextEdit } from \"../../../../common/core/textEdit.js\";\nimport { TextLength } from \"../../../../common/core/textLength.js\";\nimport {\n\tEndOfLinePreference,\n\ttype ITextModel,\n} from \"../../../../common/model.js\";\n\nexport function singleTextRemoveCommonPrefix(\n\tedit: SingleTextEdit,\n\tmodel: ITextModel,\n\tvalidModelRange?: Range,\n): SingleTextEdit {\n\tconst modelRange = validModelRange\n\t\t? edit.range.intersectRanges(validModelRange)\n\t\t: edit.range;\n\tif (!modelRange) {\n\t\treturn edit;\n\t}\n\tconst valueToReplace = model.getValueInRange(\n\t\tmodelRange,\n\t\tEndOfLinePreference.LF,\n\t);\n\tconst commonPrefixLen = commonPrefixLength(valueToReplace, edit.text);\n\tconst start = TextLength.ofText(\n\t\tvalueToReplace.substring(0, commonPrefixLen),\n\t).addToPosition(edit.range.getStartPosition());\n\tconst text = edit.text.substring(commonPrefixLen);\n\tconst range = Range.fromPositions(start, edit.range.getEndPosition());\n\treturn new SingleTextEdit(range, text);\n}\n\nexport function singleTextEditAugments(\n\tedit: SingleTextEdit,\n\tbase: SingleTextEdit,\n): boolean {\n\t// The augmented completion must replace the base range, but can replace even more\n\treturn (\n\t\tedit.text.startsWith(base.text) && rangeExtends(edit.range, base.range)\n\t);\n}\n\nfunction rangeExtends(extendingRange: Range, rangeToExtend: Range): boolean {\n\treturn (\n\t\trangeToExtend\n\t\t\t.getStartPosition()\n\t\t\t.equals(extendingRange.getStartPosition()) &&\n\t\trangeToExtend\n\t\t\t.getEndPosition()\n\t\t\t.isBeforeOrEqual(extendingRange.getEndPosition())\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAS,0BAA0B;AACnC,SAAS,aAAa;AACtB,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,OAEM;AAEA,SAAS,6BACf,MACA,OACA,iBACiB;AACjB,QAAM,aAAa,kBAChB,KAAK,MAAM,gBAAgB,eAAe,IAC1C,KAAK;AACR,MAAI,CAAC,YAAY;AAChB,WAAO;AAAA,EACR;AACA,QAAM,iBAAiB,MAAM;AAAA,IAC5B;AAAA,IACA,oBAAoB;AAAA,EACrB;AACA,QAAM,kBAAkB,mBAAmB,gBAAgB,KAAK,IAAI;AACpE,QAAM,QAAQ,WAAW;AAAA,IACxB,eAAe,UAAU,GAAG,eAAe;AAAA,EAC5C,EAAE,cAAc,KAAK,MAAM,iBAAiB,CAAC;AAC7C,QAAM,OAAO,KAAK,KAAK,UAAU,eAAe;AAChD,QAAM,QAAQ,MAAM,cAAc,OAAO,KAAK,MAAM,eAAe,CAAC;AACpE,SAAO,IAAI,eAAe,OAAO,IAAI;AACtC;AAtBgB;AAwBT,SAAS,uBACf,MACA,MACU;AAEV,SACC,KAAK,KAAK,WAAW,KAAK,IAAI,KAAK,aAAa,KAAK,OAAO,KAAK,KAAK;AAExE;AARgB;AAUhB,SAAS,aAAa,gBAAuB,eAA+B;AAC3E,SACC,cACE,iBAAiB,EACjB,OAAO,eAAe,iBAAiB,CAAC,KAC1C,cACE,eAAe,EACf,gBAAgB,eAAe,eAAe,CAAC;AAEnD;AATS;",
  "names": []
}
