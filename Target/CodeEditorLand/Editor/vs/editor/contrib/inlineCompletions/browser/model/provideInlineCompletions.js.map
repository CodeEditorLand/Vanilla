{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/provideInlineCompletions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from '../../../../../base/common/assert.js';\nimport { DeferredPromise } from '../../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { SetMap } from '../../../../../base/common/map.js';\nimport { onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ISingleEditOperation } from '../../../../common/core/editOperation.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { LanguageFeatureRegistry } from '../../../../common/languageFeatureRegistry.js';\nimport { Command, InlineCompletion, InlineCompletionContext, InlineCompletionProviderGroupId, InlineCompletions, InlineCompletionsProvider } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { fixBracketsInLine } from '../../../../common/model/bracketPairsTextModelPart/fixBrackets.js';\nimport { SingleTextEdit } from '../../../../common/core/textEdit.js';\nimport { getReadonlyEmptyArray } from '../utils.js';\nimport { SnippetParser, Text } from '../../../snippet/browser/snippetParser.js';\nimport { LineEditWithAdditionalLines } from '../../../../common/tokenizationTextModelPart.js';\nimport { OffsetRange } from '../../../../common/core/offsetRange.js';\n\nexport async function provideInlineCompletions(\n\tregistry: LanguageFeatureRegistry<InlineCompletionsProvider>,\n\tpositionOrRange: Position | Range,\n\tmodel: ITextModel,\n\tcontext: InlineCompletionContext,\n\ttoken: CancellationToken = CancellationToken.None,\n\tlanguageConfigurationService?: ILanguageConfigurationService,\n): Promise<InlineCompletionProviderResult> {\n\t// Important: Don't use position after the await calls, as the model could have been changed in the meantime!\n\tconst defaultReplaceRange = positionOrRange instanceof Position ? getDefaultRange(positionOrRange, model) : positionOrRange;\n\tconst providers = registry.all(model);\n\n\tconst multiMap = new SetMap<InlineCompletionProviderGroupId, InlineCompletionsProvider<any>>();\n\tfor (const provider of providers) {\n\t\tif (provider.groupId) {\n\t\t\tmultiMap.add(provider.groupId, provider);\n\t\t}\n\t}\n\n\tfunction getPreferredProviders(provider: InlineCompletionsProvider<any>): InlineCompletionsProvider<any>[] {\n\t\tif (!provider.yieldsToGroupIds) { return []; }\n\t\tconst result: InlineCompletionsProvider<any>[] = [];\n\t\tfor (const groupId of provider.yieldsToGroupIds || []) {\n\t\t\tconst providers = multiMap.get(groupId);\n\t\t\tfor (const p of providers) {\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\ttype Result = Promise<InlineCompletions<InlineCompletion> | null | undefined>;\n\tconst states = new Map<InlineCompletionsProvider<InlineCompletions<InlineCompletion>>, Result>();\n\n\tconst seen = new Set<InlineCompletionsProvider<InlineCompletions<InlineCompletion>>>();\n\tfunction findPreferredProviderCircle(provider: InlineCompletionsProvider<any>, stack: InlineCompletionsProvider[]): InlineCompletionsProvider[] | undefined {\n\t\tstack = [...stack, provider];\n\t\tif (seen.has(provider)) { return stack; }\n\n\t\tseen.add(provider);\n\t\ttry {\n\t\t\tconst preferred = getPreferredProviders(provider);\n\t\t\tfor (const p of preferred) {\n\t\t\t\tconst c = findPreferredProviderCircle(p, stack);\n\t\t\t\tif (c) { return c; }\n\t\t\t}\n\t\t} finally {\n\t\t\tseen.delete(provider);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tfunction processProvider(provider: InlineCompletionsProvider<any>): Result {\n\t\tconst state = states.get(provider);\n\t\tif (state) {\n\t\t\treturn state;\n\t\t}\n\n\t\tconst circle = findPreferredProviderCircle(provider, []);\n\t\tif (circle) {\n\t\t\tonUnexpectedExternalError(new Error(`Inline completions: cyclic yield-to dependency detected. Path: ${circle.map(s => s.toString ? s.toString() : ('' + s)).join(' -> ')}`));\n\t\t}\n\n\t\tconst deferredPromise = new DeferredPromise<InlineCompletions<InlineCompletion> | null | undefined>();\n\t\tstates.set(provider, deferredPromise.p);\n\n\t\t(async () => {\n\t\t\tif (!circle) {\n\t\t\t\tconst preferred = getPreferredProviders(provider);\n\t\t\t\tfor (const p of preferred) {\n\t\t\t\t\tconst result = await processProvider(p);\n\t\t\t\t\tif (result && result.items.length > 0) {\n\t\t\t\t\t\t// Skip provider\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (positionOrRange instanceof Position) {\n\t\t\t\t\tconst completions = await provider.provideInlineCompletions(model, positionOrRange, context, token);\n\t\t\t\t\treturn completions;\n\t\t\t\t} else {\n\t\t\t\t\tconst completions = await provider.provideInlineEdits?.(model, positionOrRange, context, token);\n\t\t\t\t\treturn completions;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})().then(c => deferredPromise.complete(c), e => deferredPromise.error(e));\n\n\t\treturn deferredPromise.p;\n\t}\n\n\tconst providerResults = await Promise.all(providers.map(async provider => ({ provider, completions: await processProvider(provider) })));\n\n\tconst itemsByHash = new Map<string, InlineCompletionItem>();\n\tconst lists: InlineCompletionList[] = [];\n\tfor (const result of providerResults) {\n\t\tconst completions = result.completions;\n\t\tif (!completions) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst list = new InlineCompletionList(completions, result.provider);\n\t\tlists.push(list);\n\n\t\tfor (const item of completions.items) {\n\t\t\tconst inlineCompletionItem = InlineCompletionItem.from(\n\t\t\t\titem,\n\t\t\t\tlist,\n\t\t\t\tdefaultReplaceRange,\n\t\t\t\tmodel,\n\t\t\t\tlanguageConfigurationService\n\t\t\t);\n\t\t\titemsByHash.set(inlineCompletionItem.hash(), inlineCompletionItem);\n\t\t}\n\t}\n\n\treturn new InlineCompletionProviderResult(Array.from(itemsByHash.values()), new Set(itemsByHash.keys()), lists);\n}\n\nexport class InlineCompletionProviderResult implements IDisposable {\n\n\tconstructor(\n\t\t/**\n\t\t * Free of duplicates.\n\t\t */\n\t\tpublic readonly completions: readonly InlineCompletionItem[],\n\t\tprivate readonly hashs: Set<string>,\n\t\tprivate readonly providerResults: readonly InlineCompletionList[],\n\t) { }\n\n\tpublic has(item: InlineCompletionItem): boolean {\n\t\treturn this.hashs.has(item.hash());\n\t}\n\n\tdispose(): void {\n\t\tfor (const result of this.providerResults) {\n\t\t\tresult.removeRef();\n\t\t}\n\t}\n}\n\n/**\n * A ref counted pointer to the computed `InlineCompletions` and the `InlineCompletionsProvider` that\n * computed them.\n */\nexport class InlineCompletionList {\n\tprivate refCount = 1;\n\tconstructor(\n\t\tpublic readonly inlineCompletions: InlineCompletions,\n\t\tpublic readonly provider: InlineCompletionsProvider,\n\t) { }\n\n\taddRef(): void {\n\t\tthis.refCount++;\n\t}\n\n\tremoveRef(): void {\n\t\tthis.refCount--;\n\t\tif (this.refCount === 0) {\n\t\t\tthis.provider.freeInlineCompletions(this.inlineCompletions);\n\t\t}\n\t}\n}\n\nexport class InlineCompletionItem {\n\tpublic static from(\n\t\tinlineCompletion: InlineCompletion,\n\t\tsource: InlineCompletionList,\n\t\tdefaultReplaceRange: Range,\n\t\ttextModel: ITextModel,\n\t\tlanguageConfigurationService: ILanguageConfigurationService | undefined,\n\t) {\n\t\tlet insertText: string;\n\t\tlet snippetInfo: SnippetInfo | undefined;\n\t\tlet range = inlineCompletion.range ? Range.lift(inlineCompletion.range) : defaultReplaceRange;\n\n\t\tif (typeof inlineCompletion.insertText === 'string') {\n\t\t\tinsertText = inlineCompletion.insertText;\n\n\t\t\tif (languageConfigurationService && inlineCompletion.completeBracketPairs) {\n\t\t\t\tinsertText = closeBrackets(\n\t\t\t\t\tinsertText,\n\t\t\t\t\trange.getStartPosition(),\n\t\t\t\t\ttextModel,\n\t\t\t\t\tlanguageConfigurationService\n\t\t\t\t);\n\n\t\t\t\t// Modify range depending on if brackets are added or removed\n\t\t\t\tconst diff = insertText.length - inlineCompletion.insertText.length;\n\t\t\t\tif (diff !== 0) {\n\t\t\t\t\trange = new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn + diff);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsnippetInfo = undefined;\n\t\t} else if ('snippet' in inlineCompletion.insertText) {\n\t\t\tconst preBracketCompletionLength = inlineCompletion.insertText.snippet.length;\n\n\t\t\tif (languageConfigurationService && inlineCompletion.completeBracketPairs) {\n\t\t\t\tinlineCompletion.insertText.snippet = closeBrackets(\n\t\t\t\t\tinlineCompletion.insertText.snippet,\n\t\t\t\t\trange.getStartPosition(),\n\t\t\t\t\ttextModel,\n\t\t\t\t\tlanguageConfigurationService\n\t\t\t\t);\n\n\t\t\t\t// Modify range depending on if brackets are added or removed\n\t\t\t\tconst diff = inlineCompletion.insertText.snippet.length - preBracketCompletionLength;\n\t\t\t\tif (diff !== 0) {\n\t\t\t\t\trange = new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn + diff);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst snippet = new SnippetParser().parse(inlineCompletion.insertText.snippet);\n\n\t\t\tif (snippet.children.length === 1 && snippet.children[0] instanceof Text) {\n\t\t\t\tinsertText = snippet.children[0].value;\n\t\t\t\tsnippetInfo = undefined;\n\t\t\t} else {\n\t\t\t\tinsertText = snippet.toString();\n\t\t\t\tsnippetInfo = {\n\t\t\t\t\tsnippet: inlineCompletion.insertText.snippet,\n\t\t\t\t\trange: range\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tassertNever(inlineCompletion.insertText);\n\t\t}\n\n\t\treturn new InlineCompletionItem(\n\t\t\tinsertText,\n\t\t\tinlineCompletion.command,\n\t\t\trange,\n\t\t\tinsertText,\n\t\t\tsnippetInfo,\n\t\t\tinlineCompletion.additionalTextEdits || getReadonlyEmptyArray(),\n\t\t\tinlineCompletion,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tconstructor(\n\t\treadonly filterText: string,\n\t\treadonly command: Command | undefined,\n\t\treadonly range: Range,\n\t\treadonly insertText: string,\n\t\treadonly snippetInfo: SnippetInfo | undefined,\n\n\t\treadonly additionalTextEdits: readonly ISingleEditOperation[],\n\n\n\t\t/**\n\t\t * A reference to the original inline completion this inline completion has been constructed from.\n\t\t * Used for event data to ensure referential equality.\n\t\t*/\n\t\treadonly sourceInlineCompletion: InlineCompletion,\n\n\t\t/**\n\t\t * A reference to the original inline completion list this inline completion has been constructed from.\n\t\t * Used for event data to ensure referential equality.\n\t\t*/\n\t\treadonly source: InlineCompletionList,\n\t) {\n\t\tfilterText = filterText.replace(/\\r\\n|\\r/g, '\\n');\n\t\tinsertText = filterText.replace(/\\r\\n|\\r/g, '\\n');\n\t}\n\n\tpublic withRange(updatedRange: Range): InlineCompletionItem {\n\t\treturn new InlineCompletionItem(\n\t\t\tthis.filterText,\n\t\t\tthis.command,\n\t\t\tupdatedRange,\n\t\t\tthis.insertText,\n\t\t\tthis.snippetInfo,\n\t\t\tthis.additionalTextEdits,\n\t\t\tthis.sourceInlineCompletion,\n\t\t\tthis.source,\n\t\t);\n\t}\n\n\tpublic hash(): string {\n\t\treturn JSON.stringify({ insertText: this.insertText, range: this.range.toString() });\n\t}\n\n\tpublic toSingleTextEdit(): SingleTextEdit {\n\t\treturn new SingleTextEdit(this.range, this.insertText);\n\t}\n}\n\nexport interface SnippetInfo {\n\tsnippet: string;\n\t/* Could be different than the main range */\n\trange: Range;\n}\n\nfunction getDefaultRange(position: Position, model: ITextModel): Range {\n\tconst word = model.getWordAtPosition(position);\n\tconst maxColumn = model.getLineMaxColumn(position.lineNumber);\n\t// By default, always replace up until the end of the current line.\n\t// This default might be subject to change!\n\treturn word\n\t\t? new Range(position.lineNumber, word.startColumn, position.lineNumber, maxColumn)\n\t\t: Range.fromPositions(position, position.with(undefined, maxColumn));\n}\n\nfunction closeBrackets(text: string, position: Position, model: ITextModel, languageConfigurationService: ILanguageConfigurationService): string {\n\tconst lineStart = model.getLineContent(position.lineNumber).substring(0, position.column - 1);\n\tconst newLine = lineStart + text;\n\n\tconst edit = LineEditWithAdditionalLines.replace(OffsetRange.ofStartAndLength(position.column - 1, newLine.length - (position.column - 1)), text);\n\tconst newTokens = model.tokenization.tokenizeLineWithEdit(position.lineNumber, edit);\n\tconst slicedTokens = newTokens?.mainLineTokens?.sliceAndInflate(position.column - 1, newLine.length, 0);\n\tif (!slicedTokens) {\n\t\treturn text;\n\t}\n\n\tconst newText = fixBracketsInLine(slicedTokens, languageConfigurationService);\n\n\treturn newText;\n}\n"],
  "mappings": "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",
  "names": ["providers"]
}
