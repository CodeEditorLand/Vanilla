{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/inlineCompletions/browser/model/provideInlineCompletions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from \"../../../../../base/common/assert.js\";\nimport { DeferredPromise } from \"../../../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../../../base/common/cancellation.js\";\nimport { onUnexpectedExternalError } from \"../../../../../base/common/errors.js\";\nimport type { IDisposable } from \"../../../../../base/common/lifecycle.js\";\nimport { SetMap } from \"../../../../../base/common/map.js\";\nimport type { ISingleEditOperation } from \"../../../../common/core/editOperation.js\";\nimport { OffsetRange } from \"../../../../common/core/offsetRange.js\";\nimport { Position } from \"../../../../common/core/position.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { SingleTextEdit } from \"../../../../common/core/textEdit.js\";\nimport type { LanguageFeatureRegistry } from \"../../../../common/languageFeatureRegistry.js\";\nimport type {\n\tCommand,\n\tInlineCompletion,\n\tInlineCompletionContext,\n\tInlineCompletionProviderGroupId,\n\tInlineCompletions,\n\tInlineCompletionsProvider,\n} from \"../../../../common/languages.js\";\nimport type { ILanguageConfigurationService } from \"../../../../common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../../common/model.js\";\nimport { fixBracketsInLine } from \"../../../../common/model/bracketPairsTextModelPart/fixBrackets.js\";\nimport { LineEditWithAdditionalLines } from \"../../../../common/tokenizationTextModelPart.js\";\nimport { SnippetParser, Text } from \"../../../snippet/browser/snippetParser.js\";\nimport { getReadonlyEmptyArray } from \"../utils.js\";\n\nexport async function provideInlineCompletions(\n\tregistry: LanguageFeatureRegistry<InlineCompletionsProvider>,\n\tpositionOrRange: Position | Range,\n\tmodel: ITextModel,\n\tcontext: InlineCompletionContext,\n\ttoken: CancellationToken = CancellationToken.None,\n\tlanguageConfigurationService?: ILanguageConfigurationService,\n): Promise<InlineCompletionProviderResult> {\n\t// Important: Don't use position after the await calls, as the model could have been changed in the meantime!\n\tconst defaultReplaceRange =\n\t\tpositionOrRange instanceof Position\n\t\t\t? getDefaultRange(positionOrRange, model)\n\t\t\t: positionOrRange;\n\tconst providers = registry.all(model);\n\n\tconst multiMap = new SetMap<\n\t\tInlineCompletionProviderGroupId,\n\t\tInlineCompletionsProvider<any>\n\t>();\n\tfor (const provider of providers) {\n\t\tif (provider.groupId) {\n\t\t\tmultiMap.add(provider.groupId, provider);\n\t\t}\n\t}\n\n\tfunction getPreferredProviders(\n\t\tprovider: InlineCompletionsProvider<any>,\n\t): InlineCompletionsProvider<any>[] {\n\t\tif (!provider.yieldsToGroupIds) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: InlineCompletionsProvider<any>[] = [];\n\t\tfor (const groupId of provider.yieldsToGroupIds || []) {\n\t\t\tconst providers = multiMap.get(groupId);\n\t\t\tfor (const p of providers) {\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\ttype Result = Promise<\n\t\tInlineCompletions<InlineCompletion> | null | undefined\n\t>;\n\tconst states = new Map<\n\t\tInlineCompletionsProvider<InlineCompletions<InlineCompletion>>,\n\t\tResult\n\t>();\n\n\tconst seen = new Set<\n\t\tInlineCompletionsProvider<InlineCompletions<InlineCompletion>>\n\t>();\n\tfunction findPreferredProviderCircle(\n\t\tprovider: InlineCompletionsProvider<any>,\n\t\tstack: InlineCompletionsProvider[],\n\t): InlineCompletionsProvider[] | undefined {\n\t\tstack = [...stack, provider];\n\t\tif (seen.has(provider)) {\n\t\t\treturn stack;\n\t\t}\n\n\t\tseen.add(provider);\n\t\ttry {\n\t\t\tconst preferred = getPreferredProviders(provider);\n\t\t\tfor (const p of preferred) {\n\t\t\t\tconst c = findPreferredProviderCircle(p, stack);\n\t\t\t\tif (c) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tseen.delete(provider);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tfunction processProvider(provider: InlineCompletionsProvider<any>): Result {\n\t\tconst state = states.get(provider);\n\t\tif (state) {\n\t\t\treturn state;\n\t\t}\n\n\t\tconst circle = findPreferredProviderCircle(provider, []);\n\t\tif (circle) {\n\t\t\tonUnexpectedExternalError(\n\t\t\t\tnew Error(\n\t\t\t\t\t`Inline completions: cyclic yield-to dependency detected. Path: ${circle.map((s) => (s.toString ? s.toString() : \"\" + s)).join(\" -> \")}`,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst deferredPromise = new DeferredPromise<\n\t\t\tInlineCompletions<InlineCompletion> | null | undefined\n\t\t>();\n\t\tstates.set(provider, deferredPromise.p);\n\n\t\t(async () => {\n\t\t\tif (!circle) {\n\t\t\t\tconst preferred = getPreferredProviders(provider);\n\t\t\t\tfor (const p of preferred) {\n\t\t\t\t\tconst result = await processProvider(p);\n\t\t\t\t\tif (result && result.items.length > 0) {\n\t\t\t\t\t\t// Skip provider\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (positionOrRange instanceof Position) {\n\t\t\t\t\tconst completions = await provider.provideInlineCompletions(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tpositionOrRange,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\treturn completions;\n\t\t\t\t} else {\n\t\t\t\t\tconst completions = await provider.provideInlineEdits?.(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tpositionOrRange,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\treturn completions;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})().then(\n\t\t\t(c) => deferredPromise.complete(c),\n\t\t\t(e) => deferredPromise.error(e),\n\t\t);\n\n\t\treturn deferredPromise.p;\n\t}\n\n\tconst providerResults = await Promise.all(\n\t\tproviders.map(async (provider) => ({\n\t\t\tprovider,\n\t\t\tcompletions: await processProvider(provider),\n\t\t})),\n\t);\n\n\tconst itemsByHash = new Map<string, InlineCompletionItem>();\n\tconst lists: InlineCompletionList[] = [];\n\tfor (const result of providerResults) {\n\t\tconst completions = result.completions;\n\t\tif (!completions) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst list = new InlineCompletionList(completions, result.provider);\n\t\tlists.push(list);\n\n\t\tfor (const item of completions.items) {\n\t\t\tconst inlineCompletionItem = InlineCompletionItem.from(\n\t\t\t\titem,\n\t\t\t\tlist,\n\t\t\t\tdefaultReplaceRange,\n\t\t\t\tmodel,\n\t\t\t\tlanguageConfigurationService,\n\t\t\t);\n\t\t\titemsByHash.set(inlineCompletionItem.hash(), inlineCompletionItem);\n\t\t}\n\t}\n\n\treturn new InlineCompletionProviderResult(\n\t\tArray.from(itemsByHash.values()),\n\t\tnew Set(itemsByHash.keys()),\n\t\tlists,\n\t);\n}\n\nexport class InlineCompletionProviderResult implements IDisposable {\n\tconstructor(\n\t\t/**\n\t\t * Free of duplicates.\n\t\t */\n\t\tpublic readonly completions: readonly InlineCompletionItem[],\n\t\tprivate readonly hashs: Set<string>,\n\t\tprivate readonly providerResults: readonly InlineCompletionList[],\n\t) {}\n\n\tpublic has(item: InlineCompletionItem): boolean {\n\t\treturn this.hashs.has(item.hash());\n\t}\n\n\tdispose(): void {\n\t\tfor (const result of this.providerResults) {\n\t\t\tresult.removeRef();\n\t\t}\n\t}\n}\n\n/**\n * A ref counted pointer to the computed `InlineCompletions` and the `InlineCompletionsProvider` that\n * computed them.\n */\nexport class InlineCompletionList {\n\tprivate refCount = 1;\n\tconstructor(\n\t\tpublic readonly inlineCompletions: InlineCompletions,\n\t\tpublic readonly provider: InlineCompletionsProvider,\n\t) {}\n\n\taddRef(): void {\n\t\tthis.refCount++;\n\t}\n\n\tremoveRef(): void {\n\t\tthis.refCount--;\n\t\tif (this.refCount === 0) {\n\t\t\tthis.provider.freeInlineCompletions(this.inlineCompletions);\n\t\t}\n\t}\n}\n\nexport class InlineCompletionItem {\n\tpublic static from(\n\t\tinlineCompletion: InlineCompletion,\n\t\tsource: InlineCompletionList,\n\t\tdefaultReplaceRange: Range,\n\t\ttextModel: ITextModel,\n\t\tlanguageConfigurationService: ILanguageConfigurationService | undefined,\n\t) {\n\t\tlet insertText: string;\n\t\tlet snippetInfo: SnippetInfo | undefined;\n\t\tlet range = inlineCompletion.range\n\t\t\t? Range.lift(inlineCompletion.range)\n\t\t\t: defaultReplaceRange;\n\n\t\tif (typeof inlineCompletion.insertText === \"string\") {\n\t\t\tinsertText = inlineCompletion.insertText;\n\n\t\t\tif (\n\t\t\t\tlanguageConfigurationService &&\n\t\t\t\tinlineCompletion.completeBracketPairs\n\t\t\t) {\n\t\t\t\tinsertText = closeBrackets(\n\t\t\t\t\tinsertText,\n\t\t\t\t\trange.getStartPosition(),\n\t\t\t\t\ttextModel,\n\t\t\t\t\tlanguageConfigurationService,\n\t\t\t\t);\n\n\t\t\t\t// Modify range depending on if brackets are added or removed\n\t\t\t\tconst diff =\n\t\t\t\t\tinsertText.length - inlineCompletion.insertText.length;\n\t\t\t\tif (diff !== 0) {\n\t\t\t\t\trange = new Range(\n\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\trange.endColumn + diff,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsnippetInfo = undefined;\n\t\t} else if (\"snippet\" in inlineCompletion.insertText) {\n\t\t\tconst preBracketCompletionLength =\n\t\t\t\tinlineCompletion.insertText.snippet.length;\n\n\t\t\tif (\n\t\t\t\tlanguageConfigurationService &&\n\t\t\t\tinlineCompletion.completeBracketPairs\n\t\t\t) {\n\t\t\t\tinlineCompletion.insertText.snippet = closeBrackets(\n\t\t\t\t\tinlineCompletion.insertText.snippet,\n\t\t\t\t\trange.getStartPosition(),\n\t\t\t\t\ttextModel,\n\t\t\t\t\tlanguageConfigurationService,\n\t\t\t\t);\n\n\t\t\t\t// Modify range depending on if brackets are added or removed\n\t\t\t\tconst diff =\n\t\t\t\t\tinlineCompletion.insertText.snippet.length -\n\t\t\t\t\tpreBracketCompletionLength;\n\t\t\t\tif (diff !== 0) {\n\t\t\t\t\trange = new Range(\n\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\trange.endColumn + diff,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst snippet = new SnippetParser().parse(\n\t\t\t\tinlineCompletion.insertText.snippet,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tsnippet.children.length === 1 &&\n\t\t\t\tsnippet.children[0] instanceof Text\n\t\t\t) {\n\t\t\t\tinsertText = snippet.children[0].value;\n\t\t\t\tsnippetInfo = undefined;\n\t\t\t} else {\n\t\t\t\tinsertText = snippet.toString();\n\t\t\t\tsnippetInfo = {\n\t\t\t\t\tsnippet: inlineCompletion.insertText.snippet,\n\t\t\t\t\trange: range,\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tassertNever(inlineCompletion.insertText);\n\t\t}\n\n\t\treturn new InlineCompletionItem(\n\t\t\tinsertText,\n\t\t\tinlineCompletion.command,\n\t\t\trange,\n\t\t\tinsertText,\n\t\t\tsnippetInfo,\n\t\t\tinlineCompletion.additionalTextEdits || getReadonlyEmptyArray(),\n\t\t\tinlineCompletion,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tconstructor(\n\t\treadonly filterText: string,\n\t\treadonly command: Command | undefined,\n\t\treadonly range: Range,\n\t\treadonly insertText: string,\n\t\treadonly snippetInfo: SnippetInfo | undefined,\n\n\t\treadonly additionalTextEdits: readonly ISingleEditOperation[],\n\n\t\t/**\n\t\t * A reference to the original inline completion this inline completion has been constructed from.\n\t\t * Used for event data to ensure referential equality.\n\t\t */\n\t\treadonly sourceInlineCompletion: InlineCompletion,\n\n\t\t/**\n\t\t * A reference to the original inline completion list this inline completion has been constructed from.\n\t\t * Used for event data to ensure referential equality.\n\t\t */\n\t\treadonly source: InlineCompletionList,\n\t) {\n\t\tfilterText = filterText.replace(/\\r\\n|\\r/g, \"\\n\");\n\t\tinsertText = filterText.replace(/\\r\\n|\\r/g, \"\\n\");\n\t}\n\n\tpublic withRange(updatedRange: Range): InlineCompletionItem {\n\t\treturn new InlineCompletionItem(\n\t\t\tthis.filterText,\n\t\t\tthis.command,\n\t\t\tupdatedRange,\n\t\t\tthis.insertText,\n\t\t\tthis.snippetInfo,\n\t\t\tthis.additionalTextEdits,\n\t\t\tthis.sourceInlineCompletion,\n\t\t\tthis.source,\n\t\t);\n\t}\n\n\tpublic hash(): string {\n\t\treturn JSON.stringify({\n\t\t\tinsertText: this.insertText,\n\t\t\trange: this.range.toString(),\n\t\t});\n\t}\n\n\tpublic toSingleTextEdit(): SingleTextEdit {\n\t\treturn new SingleTextEdit(this.range, this.insertText);\n\t}\n}\n\nexport interface SnippetInfo {\n\tsnippet: string;\n\t/* Could be different than the main range */\n\trange: Range;\n}\n\nfunction getDefaultRange(position: Position, model: ITextModel): Range {\n\tconst word = model.getWordAtPosition(position);\n\tconst maxColumn = model.getLineMaxColumn(position.lineNumber);\n\t// By default, always replace up until the end of the current line.\n\t// This default might be subject to change!\n\treturn word\n\t\t? new Range(\n\t\t\t\tposition.lineNumber,\n\t\t\t\tword.startColumn,\n\t\t\t\tposition.lineNumber,\n\t\t\t\tmaxColumn,\n\t\t\t)\n\t\t: Range.fromPositions(position, position.with(undefined, maxColumn));\n}\n\nfunction closeBrackets(\n\ttext: string,\n\tposition: Position,\n\tmodel: ITextModel,\n\tlanguageConfigurationService: ILanguageConfigurationService,\n): string {\n\tconst lineStart = model\n\t\t.getLineContent(position.lineNumber)\n\t\t.substring(0, position.column - 1);\n\tconst newLine = lineStart + text;\n\n\tconst edit = LineEditWithAdditionalLines.replace(\n\t\tOffsetRange.ofStartAndLength(\n\t\t\tposition.column - 1,\n\t\t\tnewLine.length - (position.column - 1),\n\t\t),\n\t\ttext,\n\t);\n\tconst newTokens = model.tokenization.tokenizeLineWithEdit(\n\t\tposition.lineNumber,\n\t\tedit,\n\t);\n\tconst slicedTokens = newTokens?.mainLineTokens?.sliceAndInflate(\n\t\tposition.column - 1,\n\t\tnewLine.length,\n\t\t0,\n\t);\n\tif (!slicedTokens) {\n\t\treturn text;\n\t}\n\n\tconst newText = fixBracketsInLine(\n\t\tslicedTokens,\n\t\tlanguageConfigurationService,\n\t);\n\n\treturn newText;\n}\n"],
  "mappings": "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",
  "names": ["providers"]
}
