{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/folding/browser/folding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser.js';\nimport { EditorAction, EditorContributionInstantiation, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction, ServicesAccessor } from '../../../browser/editorExtensions.js';\nimport { ConfigurationChangedEvent, EditorOption } from '../../../common/config/editorOptions.js';\nimport { IPosition } from '../../../common/core/position.js';\nimport { IRange } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorContribution, ScrollType } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { IModelContentChangedEvent } from '../../../common/textModelEvents.js';\nimport { FoldingRange, FoldingRangeKind, FoldingRangeProvider } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { CollapseMemento, FoldingModel, getNextFoldLine, getParentFoldLine as getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegion, FoldingRegions, FoldRange, FoldSource, ILineRange } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IFeatureDebounceInformation, ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey<boolean>('foldingEnabled', false);\n\nexport interface RangeProvider {\n\treadonly id: string;\n\tcompute(cancelationToken: CancellationToken): Promise<FoldingRegions | null>;\n\tdispose(): void;\n}\n\ninterface FoldingStateMemento {\n\tcollapsedRegions?: CollapseMemento;\n\tlineCount?: number;\n\tprovider?: string;\n\tfoldedImports?: boolean;\n}\n\nexport interface FoldingLimitReporter {\n\treadonly limit: number;\n\tupdate(computed: number, limited: number | false): void;\n}\n\nexport type FoldingRangeProviderSelector = (provider: FoldingRangeProvider[], document: ITextModel) => FoldingRangeProvider[] | undefined;\n\nexport class FoldingController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.folding';\n\n\tpublic static get(editor: ICodeEditor): FoldingController | null {\n\t\treturn editor.getContribution<FoldingController>(FoldingController.ID);\n\t}\n\n\tprivate static _foldingRangeSelector: FoldingRangeProviderSelector | undefined;\n\n\tpublic static getFoldingRangeProviders(languageFeaturesService: ILanguageFeaturesService, model: ITextModel): FoldingRangeProvider[] {\n\t\tconst foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n\t\treturn (FoldingController._foldingRangeSelector?.(foldingRangeProviders, model)) ?? foldingRangeProviders;\n\t}\n\n\tpublic static setFoldingRangeProviderSelector(foldingRangeSelector: FoldingRangeProviderSelector): IDisposable {\n\t\tFoldingController._foldingRangeSelector = foldingRangeSelector;\n\t\treturn { dispose: () => { FoldingController._foldingRangeSelector = undefined; } };\n\t}\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate _isEnabled: boolean;\n\tprivate _useFoldingProviders: boolean;\n\tprivate _unfoldOnClickAfterEndOfLine: boolean;\n\tprivate _restoringViewState: boolean;\n\tprivate _foldingImportsByDefault: boolean;\n\tprivate _currentModelHasFoldedImports: boolean;\n\n\tprivate readonly foldingDecorationProvider: FoldingDecorationProvider;\n\n\tprivate foldingModel: FoldingModel | null;\n\tprivate hiddenRangeModel: HiddenRangeModel | null;\n\n\tprivate rangeProvider: RangeProvider | null;\n\tprivate foldingRegionPromise: CancelablePromise<FoldingRegions | null> | null;\n\n\tprivate foldingModelPromise: Promise<FoldingModel | null> | null;\n\tprivate updateScheduler: Delayer<FoldingModel | null> | null;\n\tprivate readonly updateDebounceInfo: IFeatureDebounceInformation;\n\n\tprivate foldingEnabled: IContextKey<boolean>;\n\tprivate cursorChangedScheduler: RunOnceScheduler | null;\n\n\tprivate readonly localToDispose = this._register(new DisposableStore());\n\tprivate mouseDownInfo: { lineNumber: number; iconClicked: boolean } | null;\n\n\tpublic readonly _foldingLimitReporter: RangesLimitReporter;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILanguageConfigurationService private readonly languageConfigurationService: ILanguageConfigurationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ILanguageFeatureDebounceService languageFeatureDebounceService: ILanguageFeatureDebounceService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\t\tthis.editor = editor;\n\n\t\tthis._foldingLimitReporter = new RangesLimitReporter(editor);\n\n\t\tconst options = this.editor.getOptions();\n\t\tthis._isEnabled = options.get(EditorOption.folding);\n\t\tthis._useFoldingProviders = options.get(EditorOption.foldingStrategy) !== 'indentation';\n\t\tthis._unfoldOnClickAfterEndOfLine = options.get(EditorOption.unfoldOnClickAfterEndOfLine);\n\t\tthis._restoringViewState = false;\n\t\tthis._currentModelHasFoldedImports = false;\n\t\tthis._foldingImportsByDefault = options.get(EditorOption.foldingImportsByDefault);\n\t\tthis.updateDebounceInfo = languageFeatureDebounceService.for(languageFeaturesService.foldingRangeProvider, 'Folding', { min: 200 });\n\n\t\tthis.foldingModel = null;\n\t\tthis.hiddenRangeModel = null;\n\t\tthis.rangeProvider = null;\n\t\tthis.foldingRegionPromise = null;\n\t\tthis.foldingModelPromise = null;\n\t\tthis.updateScheduler = null;\n\t\tthis.cursorChangedScheduler = null;\n\t\tthis.mouseDownInfo = null;\n\n\t\tthis.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n\t\tthis.foldingDecorationProvider.showFoldingControls = options.get(EditorOption.showFoldingControls);\n\t\tthis.foldingDecorationProvider.showFoldingHighlights = options.get(EditorOption.foldingHighlight);\n\t\tthis.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n\t\tthis.foldingEnabled.set(this._isEnabled);\n\n\t\tthis._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n\n\t\tthis._register(this.editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\tif (e.hasChanged(EditorOption.folding)) {\n\t\t\t\tthis._isEnabled = this.editor.getOptions().get(EditorOption.folding);\n\t\t\t\tthis.foldingEnabled.set(this._isEnabled);\n\t\t\t\tthis.onModelChanged();\n\t\t\t}\n\t\t\tif (e.hasChanged(EditorOption.foldingMaximumRegions)) {\n\t\t\t\tthis.onModelChanged();\n\t\t\t}\n\t\t\tif (e.hasChanged(EditorOption.showFoldingControls) || e.hasChanged(EditorOption.foldingHighlight)) {\n\t\t\t\tconst options = this.editor.getOptions();\n\t\t\t\tthis.foldingDecorationProvider.showFoldingControls = options.get(EditorOption.showFoldingControls);\n\t\t\t\tthis.foldingDecorationProvider.showFoldingHighlights = options.get(EditorOption.foldingHighlight);\n\t\t\t\tthis.triggerFoldingModelChanged();\n\t\t\t}\n\t\t\tif (e.hasChanged(EditorOption.foldingStrategy)) {\n\t\t\t\tthis._useFoldingProviders = this.editor.getOptions().get(EditorOption.foldingStrategy) !== 'indentation';\n\t\t\t\tthis.onFoldingStrategyChanged();\n\t\t\t}\n\t\t\tif (e.hasChanged(EditorOption.unfoldOnClickAfterEndOfLine)) {\n\t\t\t\tthis._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(EditorOption.unfoldOnClickAfterEndOfLine);\n\t\t\t}\n\t\t\tif (e.hasChanged(EditorOption.foldingImportsByDefault)) {\n\t\t\t\tthis._foldingImportsByDefault = this.editor.getOptions().get(EditorOption.foldingImportsByDefault);\n\t\t\t}\n\t\t}));\n\t\tthis.onModelChanged();\n\t}\n\n\tpublic get limitReporter() {\n\t\treturn this._foldingLimitReporter;\n\t}\n\n\t/**\n\t * Store view state.\n\t */\n\tpublic saveViewState(): FoldingStateMemento | undefined {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n\t\t\treturn {};\n\t\t}\n\t\tif (this.foldingModel) { // disposed ?\n\t\t\tconst collapsedRegions = this.foldingModel.getMemento();\n\t\t\tconst provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n\t\t\treturn { collapsedRegions, lineCount: model.getLineCount(), provider, foldedImports: this._currentModelHasFoldedImports };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Restore view state.\n\t */\n\tpublic restoreViewState(state: FoldingStateMemento): void {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentModelHasFoldedImports = !!state.foldedImports;\n\t\tif (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n\t\t\tthis._restoringViewState = true;\n\t\t\ttry {\n\t\t\t\tthis.foldingModel.applyMemento(state.collapsedRegions);\n\t\t\t} finally {\n\t\t\t\tthis._restoringViewState = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onModelChanged(): void {\n\t\tthis.localToDispose.clear();\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n\t\t\t// huge files get no view model, so they cannot support hidden areas\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentModelHasFoldedImports = false;\n\t\tthis.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n\t\tthis.localToDispose.add(this.foldingModel);\n\n\t\tthis.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n\t\tthis.localToDispose.add(this.hiddenRangeModel);\n\t\tthis.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n\n\t\tthis.updateScheduler = new Delayer<FoldingModel>(this.updateDebounceInfo.get(model));\n\n\t\tthis.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n\t\tthis.localToDispose.add(this.cursorChangedScheduler);\n\t\tthis.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged()));\n\t\tthis.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n\t\tthis.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n\t\tthis.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n\t\tthis.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n\t\tthis.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n\t\tthis.localToDispose.add({\n\t\t\tdispose: () => {\n\t\t\t\tif (this.foldingRegionPromise) {\n\t\t\t\t\tthis.foldingRegionPromise.cancel();\n\t\t\t\t\tthis.foldingRegionPromise = null;\n\t\t\t\t}\n\t\t\t\tthis.updateScheduler?.cancel();\n\t\t\t\tthis.updateScheduler = null;\n\t\t\t\tthis.foldingModel = null;\n\t\t\t\tthis.foldingModelPromise = null;\n\t\t\t\tthis.hiddenRangeModel = null;\n\t\t\t\tthis.cursorChangedScheduler = null;\n\t\t\t\tthis.rangeProvider?.dispose();\n\t\t\t\tthis.rangeProvider = null;\n\t\t\t}\n\t\t});\n\t\tthis.triggerFoldingModelChanged();\n\t}\n\n\tprivate onFoldingStrategyChanged() {\n\t\tthis.rangeProvider?.dispose();\n\t\tthis.rangeProvider = null;\n\t\tthis.triggerFoldingModelChanged();\n\t}\n\n\tprivate getRangeProvider(editorModel: ITextModel): RangeProvider {\n\t\tif (this.rangeProvider) {\n\t\t\treturn this.rangeProvider;\n\t\t}\n\t\tconst indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n\t\tthis.rangeProvider = indentRangeProvider; // fallback\n\t\tif (this._useFoldingProviders && this.foldingModel) {\n\t\t\tconst selectedProviders = FoldingController.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n\t\t\tif (selectedProviders.length > 0) {\n\t\t\t\tthis.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, indentRangeProvider);\n\t\t\t}\n\t\t}\n\t\treturn this.rangeProvider;\n\t}\n\n\tpublic getFoldingModel(): Promise<FoldingModel | null> | null {\n\t\treturn this.foldingModelPromise;\n\t}\n\n\tprivate onDidChangeModelContent(e: IModelContentChangedEvent) {\n\t\tthis.hiddenRangeModel?.notifyChangeModelContent(e);\n\t\tthis.triggerFoldingModelChanged();\n\t}\n\n\n\tpublic triggerFoldingModelChanged() {\n\t\tif (this.updateScheduler) {\n\t\t\tif (this.foldingRegionPromise) {\n\t\t\t\tthis.foldingRegionPromise.cancel();\n\t\t\t\tthis.foldingRegionPromise = null;\n\t\t\t}\n\t\t\tthis.foldingModelPromise = this.updateScheduler.trigger(() => {\n\t\t\t\tconst foldingModel = this.foldingModel;\n\t\t\t\tif (!foldingModel) { // null if editor has been disposed, or folding turned off\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst sw = new StopWatch();\n\t\t\t\tconst provider = this.getRangeProvider(foldingModel.textModel);\n\t\t\t\tconst foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token));\n\t\t\t\treturn foldingRegionPromise.then(foldingRanges => {\n\t\t\t\t\tif (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\n\t\t\t\t\t\tlet scrollState: StableEditorScrollState | undefined;\n\n\t\t\t\t\t\tif (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n\t\t\t\t\t\t\tconst hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n\t\t\t\t\t\t\tif (hasChanges) {\n\t\t\t\t\t\t\t\tscrollState = StableEditorScrollState.capture(this.editor);\n\t\t\t\t\t\t\t\tthis._currentModelHasFoldedImports = hasChanges;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// some cursors might have moved into hidden regions, make sure they are in expanded regions\n\t\t\t\t\t\tconst selections = this.editor.getSelections();\n\t\t\t\t\t\tfoldingModel.update(foldingRanges, toSelectedLines(selections));\n\n\t\t\t\t\t\tscrollState?.restore(this.editor);\n\n\t\t\t\t\t\t// update debounce info\n\t\t\t\t\t\tconst newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n\t\t\t\t\t\tif (this.updateScheduler) {\n\t\t\t\t\t\t\tthis.updateScheduler.defaultDelay = newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn foldingModel;\n\t\t\t\t});\n\t\t\t}).then(undefined, (err) => {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onHiddenRangesChanges(hiddenRanges: IRange[]) {\n\t\tif (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n\t\t\tconst selections = this.editor.getSelections();\n\t\t\tif (selections) {\n\t\t\t\tif (this.hiddenRangeModel.adjustSelections(selections)) {\n\t\t\t\t\tthis.editor.setSelections(selections);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.editor.setHiddenAreas(hiddenRanges, this);\n\t}\n\n\tprivate onCursorPositionChanged() {\n\t\tif (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n\t\t\tthis.cursorChangedScheduler!.schedule();\n\t\t}\n\t}\n\n\tprivate revealCursor() {\n\t\tconst foldingModel = this.getFoldingModel();\n\t\tif (!foldingModel) {\n\t\t\treturn;\n\t\t}\n\t\tfoldingModel.then(foldingModel => { // null is returned if folding got disabled in the meantime\n\t\t\tif (foldingModel) {\n\t\t\t\tconst selections = this.editor.getSelections();\n\t\t\t\tif (selections && selections.length > 0) {\n\t\t\t\t\tconst toToggle: FoldingRegion[] = [];\n\t\t\t\t\tfor (const selection of selections) {\n\t\t\t\t\t\tconst lineNumber = selection.selectionStartLineNumber;\n\t\t\t\t\t\tif (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n\t\t\t\t\t\t\ttoToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (toToggle.length) {\n\t\t\t\t\t\tfoldingModel.toggleCollapseState(toToggle);\n\t\t\t\t\t\tthis.reveal(selections[0].getPosition());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(undefined, onUnexpectedError);\n\n\t}\n\n\tprivate onEditorMouseDown(e: IEditorMouseEvent): void {\n\t\tthis.mouseDownInfo = null;\n\n\n\t\tif (!this.hiddenRangeModel || !e.target || !e.target.range) {\n\t\t\treturn;\n\t\t}\n\t\tif (!e.event.leftButton && !e.event.middleButton) {\n\t\t\treturn;\n\t\t}\n\t\tconst range = e.target.range;\n\t\tlet iconClicked = false;\n\t\tswitch (e.target.type) {\n\t\t\tcase MouseTargetType.GUTTER_LINE_DECORATIONS: {\n\t\t\t\tconst data = e.target.detail;\n\t\t\t\tconst offsetLeftInGutter = e.target.element!.offsetLeft;\n\t\t\t\tconst gutterOffsetX = data.offsetX - offsetLeftInGutter;\n\n\t\t\t\t// const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n\n\t\t\t\t// TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n\t\t\t\tif (gutterOffsetX < 4) { // the whitespace between the border and the real folding icon border is 4px\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ticonClicked = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MouseTargetType.CONTENT_EMPTY: {\n\t\t\t\tif (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n\t\t\t\t\tconst data = e.target.detail;\n\t\t\t\t\tif (!data.isAfterLines) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase MouseTargetType.CONTENT_TEXT: {\n\t\t\t\tif (this.hiddenRangeModel.hasRanges()) {\n\t\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\t\tif (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\tthis.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\n\t}\n\n\tprivate onEditorMouseUp(e: IEditorMouseEvent): void {\n\t\tconst foldingModel = this.foldingModel;\n\t\tif (!foldingModel || !this.mouseDownInfo || !e.target) {\n\t\t\treturn;\n\t\t}\n\t\tconst lineNumber = this.mouseDownInfo.lineNumber;\n\t\tconst iconClicked = this.mouseDownInfo.iconClicked;\n\n\t\tconst range = e.target.range;\n\t\tif (!range || range.startLineNumber !== lineNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (iconClicked) {\n\t\t\tif (e.target.type !== MouseTargetType.GUTTER_LINE_DECORATIONS) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = this.editor.getModel();\n\t\t\tif (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst region = foldingModel.getRegionAtLine(lineNumber);\n\t\tif (region && region.startLineNumber === lineNumber) {\n\t\t\tconst isCollapsed = region.isCollapsed;\n\t\t\tif (iconClicked || isCollapsed) {\n\t\t\t\tconst surrounding = e.event.altKey;\n\t\t\t\tlet toToggle = [];\n\t\t\t\tif (surrounding) {\n\t\t\t\t\tconst filter = (otherRegion: FoldingRegion) => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n\t\t\t\t\tconst toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n\t\t\t\t\tfor (const r of toMaybeToggle) {\n\t\t\t\t\t\tif (r.isCollapsed) {\n\t\t\t\t\t\t\ttoToggle.push(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n\t\t\t\t\tif (toToggle.length === 0) {\n\t\t\t\t\t\ttoToggle = toMaybeToggle;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst recursive = e.event.middleButton || e.event.shiftKey;\n\t\t\t\t\tif (recursive) {\n\t\t\t\t\t\tfor (const r of foldingModel.getRegionsInside(region)) {\n\t\t\t\t\t\t\tif (r.isCollapsed === isCollapsed) {\n\t\t\t\t\t\t\t\ttoToggle.push(r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n\t\t\t\t\tif (isCollapsed || !recursive || toToggle.length === 0) {\n\t\t\t\t\t\ttoToggle.push(region);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfoldingModel.toggleCollapseState(toToggle);\n\t\t\t\tthis.reveal({ lineNumber, column: 1 });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic reveal(position: IPosition): void {\n\t\tthis.editor.revealPositionInCenterIfOutsideViewport(position, ScrollType.Smooth);\n\t}\n}\n\nexport class RangesLimitReporter implements FoldingLimitReporter {\n\tconstructor(private readonly editor: ICodeEditor) {\n\t}\n\n\tpublic get limit() {\n\t\treturn this.editor.getOptions().get(EditorOption.foldingMaximumRegions);\n\t}\n\n\tprivate _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _computed: number = 0;\n\tprivate _limited: number | false = false;\n\tpublic get computed(): number {\n\t\treturn this._computed;\n\t}\n\tpublic get limited(): number | false {\n\t\treturn this._limited;\n\t}\n\tpublic update(computed: number, limited: number | false) {\n\t\tif (computed !== this._computed || limited !== this._limited) {\n\t\t\tthis._computed = computed;\n\t\t\tthis._limited = limited;\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n}\n\nabstract class FoldingAction<T> extends EditorAction {\n\n\tabstract invoke(foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: T, languageConfigurationService: ILanguageConfigurationService): void;\n\n\tpublic override runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: T): void | Promise<void> {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\t\tconst foldingController = FoldingController.get(editor);\n\t\tif (!foldingController) {\n\t\t\treturn;\n\t\t}\n\t\tconst foldingModelPromise = foldingController.getFoldingModel();\n\t\tif (foldingModelPromise) {\n\t\t\tthis.reportTelemetry(accessor, editor);\n\t\t\treturn foldingModelPromise.then(foldingModel => {\n\t\t\t\tif (foldingModel) {\n\t\t\t\t\tthis.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n\t\t\t\t\tconst selection = editor.getSelection();\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tfoldingController.reveal(selection.getStartPosition());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected getSelectedLines(editor: ICodeEditor) {\n\t\tconst selections = editor.getSelections();\n\t\treturn selections ? selections.map(s => s.startLineNumber) : [];\n\t}\n\n\tprotected getLineNumbers(args: FoldingArguments, editor: ICodeEditor) {\n\t\tif (args && args.selectionLines) {\n\t\t\treturn args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n\t\t}\n\t\treturn this.getSelectedLines(editor);\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, _editor: ICodeEditor): void {\n\t}\n}\n\nexport interface SelectedLines {\n\tstartsInside(startLine: number, endLine: number): boolean;\n}\n\nexport function toSelectedLines(selections: Selection[] | null): SelectedLines {\n\tif (!selections || selections.length === 0) {\n\t\treturn {\n\t\t\tstartsInside: () => false\n\t\t};\n\t}\n\treturn {\n\t\tstartsInside(startLine: number, endLine: number): boolean {\n\t\t\tfor (const s of selections) {\n\t\t\t\tconst line = s.startLineNumber;\n\t\t\t\tif (line >= startLine && line <= endLine) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t};\n}\n\ninterface FoldingArguments {\n\tlevels?: number;\n\tdirection?: 'up' | 'down';\n\tselectionLines?: number[];\n}\n\nfunction foldingArgumentsConstraint(args: any) {\n\tif (!types.isUndefined(args)) {\n\t\tif (!types.isObject(args)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst foldingArgs: FoldingArguments = args;\n\t\tif (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nclass UnfoldAction extends FoldingAction<FoldingArguments> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfold',\n\t\t\tlabel: nls.localize('unfoldAction.label', \"Unfold\"),\n\t\t\talias: 'Unfold',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.BracketRight,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.BracketRight\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Unfold the content in the editor',\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Unfold editor argument',\n\t\t\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tconstraint: foldingArgumentsConstraint,\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t\t'levels': {\n\t\t\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'direction': {\n\t\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t\t'enum': ['up', 'down'],\n\t\t\t\t\t\t\t\t\t'default': 'down'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'selectionLines': {\n\t\t\t\t\t\t\t\t\t'type': 'array',\n\t\t\t\t\t\t\t\t\t'items': {\n\t\t\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: FoldingArguments): void {\n\t\tconst levels = args && args.levels || 1;\n\t\tconst lineNumbers = this.getLineNumbers(args, editor);\n\t\tif (args && args.direction === 'up') {\n\t\t\tsetCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n\t\t} else {\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n\t\t}\n\t}\n}\n\nclass UnFoldRecursivelyAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldRecursively',\n\t\t\tlabel: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n\t\t\talias: 'Unfold Recursively',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.BracketRight),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, _args: any): void {\n\t\tsetCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n\t}\n}\n\nclass FoldAction extends FoldingAction<FoldingArguments> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.fold',\n\t\t\tlabel: nls.localize('foldAction.label', \"Fold\"),\n\t\t\talias: 'Fold',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.BracketLeft,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.BracketLeft\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Fold the content in the editor',\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Fold editor argument',\n\t\t\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n\t\t\t\t\t\tconstraint: foldingArgumentsConstraint,\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t\t'levels': {\n\t\t\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'direction': {\n\t\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t\t'enum': ['up', 'down'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'selectionLines': {\n\t\t\t\t\t\t\t\t\t'type': 'array',\n\t\t\t\t\t\t\t\t\t'items': {\n\t\t\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: FoldingArguments): void {\n\t\tconst lineNumbers = this.getLineNumbers(args, editor);\n\n\t\tconst levels = args && args.levels;\n\t\tconst direction = args && args.direction;\n\n\t\tif (typeof levels !== 'number' && typeof direction !== 'string') {\n\t\t\t// fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n\t\t\tsetCollapseStateUp(foldingModel, true, lineNumbers);\n\t\t} else {\n\t\t\tif (direction === 'up') {\n\t\t\t\tsetCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n\t\t\t} else {\n\t\t\t\tsetCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nclass ToggleFoldAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.toggleFold',\n\t\t\tlabel: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n\t\t\talias: 'Toggle Fold',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyL),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\ttoggleCollapseState(foldingModel, 1, selectedLines);\n\t}\n}\n\n\nclass FoldRecursivelyAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldRecursively',\n\t\t\tlabel: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n\t\t\talias: 'Fold Recursively',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.BracketLeft),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\tsetCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n\t}\n}\n\n\nclass ToggleFoldRecursivelyAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.toggleFoldRecursively',\n\t\t\tlabel: nls.localize('toggleFoldRecursivelyAction.label', \"Toggle Fold Recursively\"),\n\t\t\talias: 'Toggle Fold Recursively',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyL),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\ttoggleCollapseState(foldingModel, Number.MAX_VALUE, selectedLines);\n\t}\n}\n\n\nclass FoldAllBlockCommentsAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAllBlockComments',\n\t\t\tlabel: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n\t\t\talias: 'Fold All Block Comments',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Slash),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: void, languageConfigurationService: ILanguageConfigurationService): void {\n\t\tif (foldingModel.regions.hasTypes()) {\n\t\t\tsetCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n\t\t} else {\n\t\t\tconst editorModel = editor.getModel();\n\t\t\tif (!editorModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n\t\t\tif (comments && comments.blockCommentStartToken) {\n\t\t\t\tconst regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n\t\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, true);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass FoldAllRegionsAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAllMarkerRegions',\n\t\t\tlabel: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n\t\t\talias: 'Fold All Regions',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Digit8),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: void, languageConfigurationService: ILanguageConfigurationService): void {\n\t\tif (foldingModel.regions.hasTypes()) {\n\t\t\tsetCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n\t\t} else {\n\t\t\tconst editorModel = editor.getModel();\n\t\t\tif (!editorModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n\t\t\tif (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n\t\t\t\tconst regExp = new RegExp(foldingRules.markers.start);\n\t\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, true);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass UnfoldAllRegionsAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldAllMarkerRegions',\n\t\t\tlabel: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n\t\t\talias: 'Unfold All Regions',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Digit9),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor, args: void, languageConfigurationService: ILanguageConfigurationService): void {\n\t\tif (foldingModel.regions.hasTypes()) {\n\t\t\tsetCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n\t\t} else {\n\t\t\tconst editorModel = editor.getModel();\n\t\t\tif (!editorModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n\t\t\tif (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n\t\t\t\tconst regExp = new RegExp(foldingRules.markers.start);\n\t\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, false);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass FoldAllExceptAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAllExcept',\n\t\t\tlabel: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n\t\t\talias: 'Fold All Except Selected',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Minus),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\tsetCollapseStateForRest(foldingModel, true, selectedLines);\n\t}\n\n}\n\nclass UnfoldAllExceptAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldAllExcept',\n\t\t\tlabel: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n\t\t\talias: 'Unfold All Except Selected',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\tsetCollapseStateForRest(foldingModel, false, selectedLines);\n\t}\n}\n\nclass FoldAllAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.foldAll',\n\t\t\tlabel: nls.localize('foldAllAction.label', \"Fold All\"),\n\t\t\talias: 'Fold All',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Digit0),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, _editor: ICodeEditor): void {\n\t\tsetCollapseStateLevelsDown(foldingModel, true);\n\t}\n}\n\nclass UnfoldAllAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.unfoldAll',\n\t\t\tlabel: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n\t\t\talias: 'Unfold All',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyJ),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, _editor: ICodeEditor): void {\n\t\tsetCollapseStateLevelsDown(foldingModel, false);\n\t}\n}\n\nclass FoldLevelAction extends FoldingAction<void> {\n\tprivate static readonly ID_PREFIX = 'editor.foldLevel';\n\tpublic static readonly ID = (level: number) => FoldLevelAction.ID_PREFIX + level;\n\n\tprivate getFoldingLevel() {\n\t\treturn parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tsetCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n\t}\n}\n\n/** Action to go to the parent fold of current line */\nclass GotoParentFoldAction extends FoldingAction<void> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.gotoParentFold',\n\t\t\tlabel: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n\t\t\talias: 'Go to Parent Fold',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\tif (selectedLines.length > 0) {\n\t\t\tconst startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n\t\t\tif (startLineNumber !== null) {\n\t\t\t\teditor.setSelection({\n\t\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: startLineNumber,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction<void> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.gotoPreviousFold',\n\t\t\tlabel: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n\t\t\talias: 'Go to Previous Folding Range',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\tif (selectedLines.length > 0) {\n\t\t\tconst startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n\t\t\tif (startLineNumber !== null) {\n\t\t\t\teditor.setSelection({\n\t\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: startLineNumber,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction<void> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.gotoNextFold',\n\t\t\tlabel: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n\t\t\talias: 'Go to Next Folding Range',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selectedLines = this.getSelectedLines(editor);\n\t\tif (selectedLines.length > 0) {\n\t\t\tconst startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n\t\t\tif (startLineNumber !== null) {\n\t\t\t\teditor.setSelection({\n\t\t\t\t\tstartLineNumber: startLineNumber,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: startLineNumber,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass FoldRangeFromSelectionAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.createFoldingRangeFromSelection',\n\t\t\tlabel: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n\t\t\talias: 'Create Folding Range from Selection',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Comma),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(_foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst collapseRanges: FoldRange[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tif (selections) {\n\t\t\tfor (const selection of selections) {\n\t\t\t\tlet endLineNumber = selection.endLineNumber;\n\t\t\t\tif (selection.endColumn === 1) {\n\t\t\t\t\t--endLineNumber;\n\t\t\t\t}\n\t\t\t\tif (endLineNumber > selection.startLineNumber) {\n\t\t\t\t\tcollapseRanges.push({\n\t\t\t\t\t\tstartLineNumber: selection.startLineNumber,\n\t\t\t\t\t\tendLineNumber: endLineNumber,\n\t\t\t\t\t\ttype: undefined,\n\t\t\t\t\t\tisCollapsed: true,\n\t\t\t\t\t\tsource: FoldSource.userDefined\n\t\t\t\t\t});\n\t\t\t\t\teditor.setSelection({\n\t\t\t\t\t\tstartLineNumber: selection.startLineNumber,\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tendLineNumber: selection.startLineNumber,\n\t\t\t\t\t\tendColumn: 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (collapseRanges.length > 0) {\n\t\t\t\tcollapseRanges.sort((a, b) => {\n\t\t\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t\t\t});\n\t\t\t\tconst newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, editor.getModel()?.getLineCount());\n\t\t\t\tfoldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass RemoveFoldRangeFromSelectionAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.removeManualFoldingRanges',\n\t\t\tlabel: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n\t\t\talias: 'Remove Manual Folding Ranges',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Period),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tinvoke(foldingController: FoldingController, foldingModel: FoldingModel, editor: ICodeEditor): void {\n\t\tconst selections = editor.getSelections();\n\t\tif (selections) {\n\t\t\tconst ranges: ILineRange[] = [];\n\t\t\tfor (const selection of selections) {\n\t\t\t\tconst { startLineNumber, endLineNumber } = selection;\n\t\t\t\tranges.push(endLineNumber >= startLineNumber ? { startLineNumber, endLineNumber } : { endLineNumber, startLineNumber });\n\t\t\t}\n\t\t\tfoldingModel.removeManualRanges(ranges);\n\t\t\tfoldingController.triggerFoldingModelChanged();\n\t\t}\n\t}\n}\n\n\nclass ToggleImportFoldAction extends FoldingAction<void> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.toggleImportFold',\n\t\t\tlabel: nls.localize('toggleImportFold.label', \"Toggle Import Fold\"),\n\t\t\talias: 'Toggle Import Fold',\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tasync invoke(foldingController: FoldingController, foldingModel: FoldingModel): Promise<void> {\n\t\tconst regionsToToggle: FoldingRegion[] = [];\n\t\tconst regions = foldingModel.regions;\n\t\tfor (let i = regions.length - 1; i >= 0; i--) {\n\t\t\tif (regions.getType(i) === FoldingRangeKind.Imports.value) {\n\t\t\t\tregionsToToggle.push(regions.toRegion(i));\n\t\t\t}\n\t\t}\n\t\tfoldingModel.toggleCollapseState(regionsToToggle);\n\t\tfoldingController.triggerFoldingModelChanged();\n\t}\n}\n\n\nregisterEditorContribution(FoldingController.ID, FoldingController, EditorContributionInstantiation.Eager); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(ToggleFoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nregisterEditorAction(ToggleImportFoldAction);\n\nfor (let i = 1; i <= 7; i++) {\n\tregisterInstantiatedEditorAction(\n\t\tnew FoldLevelAction({\n\t\t\tid: FoldLevelAction.ID(i),\n\t\t\tlabel: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n\t\t\talias: `Fold Level ${i}`,\n\t\t\tprecondition: CONTEXT_FOLDING_ENABLED,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | (KeyCode.Digit0 + i)),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})\n\t);\n}\n\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', async function (accessor, ...args) {\n\tconst [resource] = args;\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst configurationService = accessor.get(IConfigurationService);\n\tif (!configurationService.getValue('editor.folding', { resource })) {\n\t\treturn [];\n\t}\n\n\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\tconst strategy = configurationService.getValue('editor.foldingStrategy', { resource });\n\tconst foldingLimitReporter = {\n\t\tget limit() {\n\t\t\treturn <number>configurationService.getValue('editor.foldingMaximumRegions', { resource });\n\t\t},\n\t\tupdate: (computed: number, limited: number | false) => { }\n\t};\n\n\tconst indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n\tlet rangeProvider: RangeProvider = indentRangeProvider;\n\tif (strategy !== 'indentation') {\n\t\tconst providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n\t\tif (providers.length) {\n\t\t\trangeProvider = new SyntaxRangeProvider(model, providers, () => { }, foldingLimitReporter, indentRangeProvider);\n\t\t}\n\t}\n\tconst ranges = await rangeProvider.compute(CancellationToken.None);\n\tconst result: FoldingRange[] = [];\n\ttry {\n\t\tif (ranges) {\n\t\t\tfor (let i = 0; i < ranges.length; i++) {\n\t\t\t\tconst type = ranges.getType(i);\n\t\t\t\tresult.push({ start: ranges.getStartLineNumber(i), end: ranges.getEndLineNumber(i), kind: type ? FoldingRangeKind.fromValue(type) : undefined });\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t} finally {\n\t\trangeProvider.dispose();\n\t}\n});\n"],
  "mappings": "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",
  "names": ["options", "foldingModel"]
}
