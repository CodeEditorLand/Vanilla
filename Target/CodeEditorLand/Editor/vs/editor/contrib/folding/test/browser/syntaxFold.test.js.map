{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/folding/test/browser/syntaxFold.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { ITextModel } from '../../../../common/model.js';\nimport { FoldingContext, FoldingRange, FoldingRangeProvider, ProviderResult } from '../../../../common/languages.js';\nimport { SyntaxRangeProvider } from '../../browser/syntaxRangeProvider.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { FoldingLimitReporter } from '../../browser/folding.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\ninterface IndentRange {\n\tstart: number;\n\tend: number;\n}\n\nclass TestFoldingRangeProvider implements FoldingRangeProvider {\n\tconstructor(private model: ITextModel, private ranges: IndentRange[]) {\n\t}\n\n\tprovideFoldingRanges(model: ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]> {\n\t\tif (model === this.model) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\treturn null;\n\t}\n}\n\nsuite('Syntax folding', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction r(start: number, end: number): IndentRange {\n\t\treturn { start, end };\n\t}\n\n\ttest('Limit by nesting level', async () => {\n\t\tconst lines = [\n\t\t\t/* 1*/\t'{',\n\t\t\t/* 2*/\t'  A',\n\t\t\t/* 3*/\t'  {',\n\t\t\t/* 4*/\t'    {',\n\t\t\t/* 5*/\t'      B',\n\t\t\t/* 6*/\t'    }',\n\t\t\t/* 7*/\t'    {',\n\t\t\t/* 8*/\t'      A',\n\t\t\t/* 9*/\t'      {',\n\t\t\t/* 10*/\t'         A',\n\t\t\t/* 11*/\t'      }',\n\t\t\t/* 12*/\t'      {',\n\t\t\t/* 13*/\t'        {',\n\t\t\t/* 14*/\t'          {',\n\t\t\t/* 15*/\t'             A',\n\t\t\t/* 16*/\t'          }',\n\t\t\t/* 17*/\t'        }',\n\t\t\t/* 18*/\t'      }',\n\t\t\t/* 19*/\t'    }',\n\t\t\t/* 20*/\t'  }',\n\t\t\t/* 21*/\t'}',\n\t\t\t/* 22*/\t'{',\n\t\t\t/* 23*/\t'  A',\n\t\t\t/* 24*/\t'}',\n\t\t];\n\n\t\tconst r1 = r(1, 20);  //0\n\t\tconst r2 = r(3, 19);  //1\n\t\tconst r3 = r(4, 5);   //2\n\t\tconst r4 = r(7, 18);  //2\n\t\tconst r5 = r(9, 10);  //3\n\t\tconst r6 = r(12, 17); //4\n\t\tconst r7 = r(13, 16); //5\n\t\tconst r8 = r(14, 15); //6\n\t\tconst r9 = r(22, 23); //0\n\n\t\tconst model = createTextModel(lines.join('\\n'));\n\t\tconst ranges = [r1, r2, r3, r4, r5, r6, r7, r8, r9];\n\t\tconst providers = [new TestFoldingRangeProvider(model, ranges)];\n\n\t\tasync function assertLimit(maxEntries: number, expectedRanges: IndentRange[], message: string) {\n\t\t\tlet reported: number | false = false;\n\t\t\tconst foldingRangesLimit: FoldingLimitReporter = { limit: maxEntries, update: (computed, limited) => reported = limited };\n\t\t\tconst syntaxRangeProvider = new SyntaxRangeProvider(model, providers, () => { }, foldingRangesLimit, undefined);\n\t\t\ttry {\n\t\t\t\tconst indentRanges = await syntaxRangeProvider.compute(CancellationToken.None);\n\t\t\t\tconst actual: IndentRange[] = [];\n\t\t\t\tif (indentRanges) {\n\t\t\t\t\tfor (let i = 0; i < indentRanges.length; i++) {\n\t\t\t\t\t\tactual.push({ start: indentRanges.getStartLineNumber(i), end: indentRanges.getEndLineNumber(i) });\n\t\t\t\t\t}\n\t\t\t\t\tassert.equal(reported, 9 <= maxEntries ? false : maxEntries, 'limited');\n\t\t\t\t}\n\t\t\t\tassert.deepStrictEqual(actual, expectedRanges, message);\n\t\t\t} finally {\n\t\t\t\tsyntaxRangeProvider.dispose();\n\t\t\t}\n\n\t\t}\n\n\t\tawait assertLimit(1000, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '1000');\n\t\tawait assertLimit(9, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '9');\n\t\tawait assertLimit(8, [r1, r2, r3, r4, r5, r6, r7, r9], '8');\n\t\tawait assertLimit(7, [r1, r2, r3, r4, r5, r6, r9], '7');\n\t\tawait assertLimit(6, [r1, r2, r3, r4, r5, r9], '6');\n\t\tawait assertLimit(5, [r1, r2, r3, r4, r9], '5');\n\t\tawait assertLimit(4, [r1, r2, r3, r9], '4');\n\t\tawait assertLimit(3, [r1, r2, r9], '3');\n\t\tawait assertLimit(2, [r1, r9], '2');\n\t\tawait assertLimit(1, [r1], '1');\n\t\tawait assertLimit(0, [], '0');\n\n\t\tmodel.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
