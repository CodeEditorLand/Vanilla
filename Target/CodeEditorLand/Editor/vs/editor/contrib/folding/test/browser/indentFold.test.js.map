{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/folding/test/browser/indentFold.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { computeRanges } from '../../browser/indentRangeProvider.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\n\ninterface IndentRange {\n\tstart: number;\n\tend: number;\n}\n\nsuite('Indentation Folding', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction r(start: number, end: number): IndentRange {\n\t\treturn { start, end };\n\t}\n\n\ttest('Limit by indent', () => {\n\n\n\t\tconst lines = [\n\t\t/* 1*/\t'A',\n\t\t/* 2*/\t'  A',\n\t\t/* 3*/\t'  A',\n\t\t/* 4*/\t'    A',\n\t\t/* 5*/\t'      A',\n\t\t/* 6*/\t'    A',\n\t\t/* 7*/\t'      A',\n\t\t/* 8*/\t'      A',\n\t\t/* 9*/\t'         A',\n\t\t/* 10*/\t'      A',\n\t\t/* 11*/\t'         A',\n\t\t/* 12*/\t'  A',\n\t\t/* 13*/\t'              A',\n\t\t/* 14*/\t'                 A',\n\t\t/* 15*/\t'A',\n\t\t/* 16*/\t'  A'\n\t\t];\n\t\tconst r1 = r(1, 14); //0\n\t\tconst r2 = r(3, 11); //1\n\t\tconst r3 = r(4, 5); //2\n\t\tconst r4 = r(6, 11); //2\n\t\tconst r5 = r(8, 9); //3\n\t\tconst r6 = r(10, 11); //3\n\t\tconst r7 = r(12, 14); //1\n\t\tconst r8 = r(13, 14);//4\n\t\tconst r9 = r(15, 16);//0\n\n\t\tconst model = createTextModel(lines.join('\\n'));\n\n\t\tfunction assertLimit(maxEntries: number, expectedRanges: IndentRange[], message: string) {\n\t\t\tlet reported: number | false = false;\n\t\t\tconst indentRanges = computeRanges(model, true, undefined, { limit: maxEntries, update: (computed, limited) => reported = limited });\n\t\t\tassert.ok(indentRanges.length <= maxEntries, 'max ' + message);\n\t\t\tconst actual: IndentRange[] = [];\n\t\t\tfor (let i = 0; i < indentRanges.length; i++) {\n\t\t\t\tactual.push({ start: indentRanges.getStartLineNumber(i), end: indentRanges.getEndLineNumber(i) });\n\t\t\t}\n\t\t\tassert.deepStrictEqual(actual, expectedRanges, message);\n\t\t\tassert.equal(reported, 9 <= maxEntries ? false : maxEntries, 'limited');\n\t\t}\n\n\t\tassertLimit(1000, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '1000');\n\t\tassertLimit(9, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '9');\n\t\tassertLimit(8, [r1, r2, r3, r4, r5, r6, r7, r9], '8');\n\t\tassertLimit(7, [r1, r2, r3, r4, r5, r7, r9], '7');\n\t\tassertLimit(6, [r1, r2, r3, r4, r7, r9], '6');\n\t\tassertLimit(5, [r1, r2, r3, r7, r9], '5');\n\t\tassertLimit(4, [r1, r2, r7, r9], '4');\n\t\tassertLimit(3, [r1, r2, r9], '3');\n\t\tassertLimit(2, [r1, r9], '2');\n\t\tassertLimit(1, [r1], '1');\n\t\tassertLimit(0, [], '0');\n\n\t\tmodel.dispose();\n\t});\n\n});\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAOhC,MAAM,uBAAuB,MAAM;AAClC,0CAAwC;AAExC,WAAS,EAAE,OAAe,KAA0B;AACnD,WAAO,EAAE,OAAO,IAAI;AAAA,EACrB;AAFS;AAIT,OAAK,mBAAmB,MAAM;AAG7B,UAAM,QAAQ;AAAA;AAAA,MACP;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACC;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA,IACR;AACA,UAAM,KAAK,EAAE,GAAG,EAAE;AAClB,UAAM,KAAK,EAAE,GAAG,EAAE;AAClB,UAAM,KAAK,EAAE,GAAG,CAAC;AACjB,UAAM,KAAK,EAAE,GAAG,EAAE;AAClB,UAAM,KAAK,EAAE,GAAG,CAAC;AACjB,UAAM,KAAK,EAAE,IAAI,EAAE;AACnB,UAAM,KAAK,EAAE,IAAI,EAAE;AACnB,UAAM,KAAK,EAAE,IAAI,EAAE;AACnB,UAAM,KAAK,EAAE,IAAI,EAAE;AAEnB,UAAM,QAAQ,gBAAgB,MAAM,KAAK,IAAI,CAAC;AAE9C,aAAS,YAAY,YAAoB,gBAA+B,SAAiB;AACxF,UAAI,WAA2B;AAC/B,YAAM,eAAe,cAAc,OAAO,MAAM,QAAW,EAAE,OAAO,YAAY,QAAQ,wBAAC,UAAU,YAAY,WAAW,SAAlC,UAA0C,CAAC;AACnI,aAAO,GAAG,aAAa,UAAU,YAAY,SAAS,OAAO;AAC7D,YAAM,SAAwB,CAAC;AAC/B,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC7C,eAAO,KAAK,EAAE,OAAO,aAAa,mBAAmB,CAAC,GAAG,KAAK,aAAa,iBAAiB,CAAC,EAAE,CAAC;AAAA,MACjG;AACA,aAAO,gBAAgB,QAAQ,gBAAgB,OAAO;AACtD,aAAO,MAAM,UAAU,KAAK,aAAa,QAAQ,YAAY,SAAS;AAAA,IACvE;AAVS;AAYT,gBAAY,KAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,MAAM;AAC9D,gBAAY,GAAG,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,GAAG;AACxD,gBAAY,GAAG,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,GAAG;AACpD,gBAAY,GAAG,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,GAAG;AAChD,gBAAY,GAAG,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,GAAG;AAC5C,gBAAY,GAAG,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,GAAG;AACxC,gBAAY,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,GAAG,GAAG;AACpC,gBAAY,GAAG,CAAC,IAAI,IAAI,EAAE,GAAG,GAAG;AAChC,gBAAY,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG;AAC5B,gBAAY,GAAG,CAAC,EAAE,GAAG,GAAG;AACxB,gBAAY,GAAG,CAAC,GAAG,GAAG;AAEtB,UAAM,QAAQ;AAAA,EACf,CAAC;AAEF,CAAC;",
  "names": []
}
