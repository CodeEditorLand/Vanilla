{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/folding/test/browser/hiddenRangeModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { IRange } from '../../../../common/core/range.js';\nimport { FoldingModel } from '../../browser/foldingModel.js';\nimport { HiddenRangeModel } from '../../browser/hiddenRangeModel.js';\nimport { computeRanges } from '../../browser/indentRangeProvider.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\nimport { TestDecorationProvider } from './foldingModel.test.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\n\ninterface ExpectedRange {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n}\n\nsuite('Hidden Range Model', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction r(startLineNumber: number, endLineNumber: number): ExpectedRange {\n\t\treturn { startLineNumber, endLineNumber };\n\t}\n\n\tfunction assertRanges(actual: IRange[], expectedRegions: ExpectedRange[], message?: string) {\n\t\tassert.deepStrictEqual(actual.map(r => ({ startLineNumber: r.startLineNumber, endLineNumber: r.endLineNumber })), expectedRegions, message);\n\t}\n\n\ttest('hasRanges', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'/**',\n\t\t/* 2*/\t' * Comment',\n\t\t/* 3*/\t' */',\n\t\t/* 4*/\t'class A {',\n\t\t/* 5*/\t'  void foo() {',\n\t\t/* 6*/\t'    if (true) {',\n\t\t/* 7*/\t'      //hello',\n\t\t/* 8*/\t'    }',\n\t\t/* 9*/\t'  }',\n\t\t/* 10*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\t\tconst hiddenRangeModel = new HiddenRangeModel(foldingModel);\n\t\ttry {\n\t\t\tassert.strictEqual(hiddenRangeModel.hasRanges(), false);\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(1)!, foldingModel.getRegionAtLine(6)!]);\n\t\t\tassertRanges(hiddenRangeModel.hiddenRanges, [r(2, 3), r(7, 7)]);\n\n\t\t\tassert.strictEqual(hiddenRangeModel.hasRanges(), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(1), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(2), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(3), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(4), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(5), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(6), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(7), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(8), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(9), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(10), false);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(4)!]);\n\t\t\tassertRanges(hiddenRangeModel.hiddenRanges, [r(2, 3), r(5, 9)]);\n\n\t\t\tassert.strictEqual(hiddenRangeModel.hasRanges(), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(1), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(2), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(3), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(4), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(5), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(6), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(7), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(8), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(9), true);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(10), false);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(1)!, foldingModel.getRegionAtLine(6)!, foldingModel.getRegionAtLine(4)!]);\n\t\t\tassertRanges(hiddenRangeModel.hiddenRanges, []);\n\t\t\tassert.strictEqual(hiddenRangeModel.hasRanges(), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(1), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(2), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(3), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(4), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(5), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(6), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(7), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(8), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(9), false);\n\t\t\tassert.strictEqual(hiddenRangeModel.isHidden(10), false);\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t\thiddenRangeModel.dispose();\n\t\t}\n\t});\n});\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,SAAS,cAAc;AACvB,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,8BAA8B;AACvC,SAAS,+CAA+C;AAQxD,MAAM,sBAAsB,MAAM;AACjC,0CAAwC;AAExC,WAAS,EAAE,iBAAyB,eAAsC;AACzE,WAAO,EAAE,iBAAiB,cAAc;AAAA,EACzC;AAFS;AAIT,WAAS,aAAa,QAAkB,iBAAkC,SAAkB;AAC3F,WAAO,gBAAgB,OAAO,IAAI,CAAAA,QAAM,EAAE,iBAAiBA,GAAE,iBAAiB,eAAeA,GAAE,cAAc,EAAE,GAAG,iBAAiB,OAAO;AAAA,EAC3I;AAFS;AAIT,OAAK,aAAa,MAAM;AACvB,UAAM,QAAQ;AAAA;AAAA,MACP;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACC;AAAA,IAAG;AAEX,UAAM,YAAY,gBAAgB,MAAM,KAAK,IAAI,CAAC;AAClD,UAAM,eAAe,IAAI,aAAa,WAAW,IAAI,uBAAuB,SAAS,CAAC;AACtF,UAAM,mBAAmB,IAAI,iBAAiB,YAAY;AAC1D,QAAI;AACH,aAAO,YAAY,iBAAiB,UAAU,GAAG,KAAK;AAEtD,YAAM,SAAS,cAAc,WAAW,OAAO,MAAS;AACxD,mBAAa,OAAO,MAAM;AAE1B,mBAAa,oBAAoB,CAAC,aAAa,gBAAgB,CAAC,GAAI,aAAa,gBAAgB,CAAC,CAAE,CAAC;AACrG,mBAAa,iBAAiB,cAAc,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAE9D,aAAO,YAAY,iBAAiB,UAAU,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,EAAE,GAAG,KAAK;AAEvD,mBAAa,oBAAoB,CAAC,aAAa,gBAAgB,CAAC,CAAE,CAAC;AACnE,mBAAa,iBAAiB,cAAc,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAE9D,aAAO,YAAY,iBAAiB,UAAU,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,IAAI;AACrD,aAAO,YAAY,iBAAiB,SAAS,EAAE,GAAG,KAAK;AAEvD,mBAAa,oBAAoB,CAAC,aAAa,gBAAgB,CAAC,GAAI,aAAa,gBAAgB,CAAC,GAAI,aAAa,gBAAgB,CAAC,CAAE,CAAC;AACvI,mBAAa,iBAAiB,cAAc,CAAC,CAAC;AAC9C,aAAO,YAAY,iBAAiB,UAAU,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,CAAC,GAAG,KAAK;AACtD,aAAO,YAAY,iBAAiB,SAAS,EAAE,GAAG,KAAK;AAAA,IACxD,UAAE;AACD,gBAAU,QAAQ;AAClB,uBAAiB,QAAQ;AAAA,IAC1B;AAAA,EACD,CAAC;AACF,CAAC;",
  "names": ["r"]
}
