{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/folding/test/browser/foldingModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { escapeRegExpCharacters } from '../../../../../base/common/strings.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { EditOperation } from '../../../../common/core/editOperation.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { IModelDecorationsChangeAccessor, ITextModel, TrackedRangeStickiness } from '../../../../common/model.js';\nimport { ModelDecorationOptions } from '../../../../common/model/textModel.js';\nimport { toSelectedLines } from '../../browser/folding.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp } from '../../browser/foldingModel.js';\nimport { FoldingRegion } from '../../browser/foldingRanges.js';\nimport { computeRanges } from '../../browser/indentRangeProvider.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\n\n\ninterface ExpectedRegion {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n\tisCollapsed: boolean;\n}\n\ninterface ExpectedDecoration {\n\tline: number;\n\ttype: 'hidden' | 'collapsed' | 'expanded';\n}\n\nexport class TestDecorationProvider {\n\n\tprivate static readonly collapsedDecoration = ModelDecorationOptions.register({\n\t\tdescription: 'test',\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tlinesDecorationsClassName: 'folding'\n\t});\n\n\tprivate static readonly expandedDecoration = ModelDecorationOptions.register({\n\t\tdescription: 'test',\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tlinesDecorationsClassName: 'folding'\n\t});\n\n\tprivate static readonly hiddenDecoration = ModelDecorationOptions.register({\n\t\tdescription: 'test',\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tlinesDecorationsClassName: 'folding'\n\t});\n\n\tconstructor(private model: ITextModel) {\n\t}\n\n\tgetDecorationOption(isCollapsed: boolean, isHidden: boolean): ModelDecorationOptions {\n\t\tif (isHidden) {\n\t\t\treturn TestDecorationProvider.hiddenDecoration;\n\t\t}\n\t\tif (isCollapsed) {\n\t\t\treturn TestDecorationProvider.collapsedDecoration;\n\t\t}\n\t\treturn TestDecorationProvider.expandedDecoration;\n\t}\n\n\tchangeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): (T | null) {\n\t\treturn this.model.changeDecorations(callback);\n\t}\n\n\tremoveDecorations(decorationIds: string[]): void {\n\t\tthis.model.changeDecorations((changeAccessor) => {\n\t\t\tchangeAccessor.deltaDecorations(decorationIds, []);\n\t\t});\n\t}\n\n\tgetDecorations(): ExpectedDecoration[] {\n\t\tconst decorations = this.model.getAllDecorations();\n\t\tconst res: ExpectedDecoration[] = [];\n\t\tfor (const decoration of decorations) {\n\t\t\tif (decoration.options === TestDecorationProvider.hiddenDecoration) {\n\t\t\t\tres.push({ line: decoration.range.startLineNumber, type: 'hidden' });\n\t\t\t} else if (decoration.options === TestDecorationProvider.collapsedDecoration) {\n\t\t\t\tres.push({ line: decoration.range.startLineNumber, type: 'collapsed' });\n\t\t\t} else if (decoration.options === TestDecorationProvider.expandedDecoration) {\n\t\t\t\tres.push({ line: decoration.range.startLineNumber, type: 'expanded' });\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n\nsuite('Folding Model', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\tfunction r(startLineNumber: number, endLineNumber: number, isCollapsed: boolean = false): ExpectedRegion {\n\t\treturn { startLineNumber, endLineNumber, isCollapsed };\n\t}\n\n\tfunction d(line: number, type: 'hidden' | 'collapsed' | 'expanded'): ExpectedDecoration {\n\t\treturn { line, type };\n\t}\n\n\tfunction assertRegion(actual: FoldingRegion | null, expected: ExpectedRegion | null, message?: string) {\n\t\tassert.strictEqual(!!actual, !!expected, message);\n\t\tif (actual && expected) {\n\t\t\tassert.strictEqual(actual.startLineNumber, expected.startLineNumber, message);\n\t\t\tassert.strictEqual(actual.endLineNumber, expected.endLineNumber, message);\n\t\t\tassert.strictEqual(actual.isCollapsed, expected.isCollapsed, message);\n\t\t}\n\t}\n\n\tfunction assertFoldedRanges(foldingModel: FoldingModel, expectedRegions: ExpectedRegion[], message?: string) {\n\t\tconst actualRanges: ExpectedRegion[] = [];\n\t\tconst actual = foldingModel.regions;\n\t\tfor (let i = 0; i < actual.length; i++) {\n\t\t\tif (actual.isCollapsed(i)) {\n\t\t\t\tactualRanges.push(r(actual.getStartLineNumber(i), actual.getEndLineNumber(i)));\n\t\t\t}\n\t\t}\n\t\tassert.deepStrictEqual(actualRanges, expectedRegions, message);\n\t}\n\n\tfunction assertRanges(foldingModel: FoldingModel, expectedRegions: ExpectedRegion[], message?: string) {\n\t\tconst actualRanges: ExpectedRegion[] = [];\n\t\tconst actual = foldingModel.regions;\n\t\tfor (let i = 0; i < actual.length; i++) {\n\t\t\tactualRanges.push(r(actual.getStartLineNumber(i), actual.getEndLineNumber(i), actual.isCollapsed(i)));\n\t\t}\n\t\tassert.deepStrictEqual(actualRanges, expectedRegions, message);\n\t}\n\n\tfunction assertDecorations(foldingModel: FoldingModel, expectedDecoration: ExpectedDecoration[], message?: string) {\n\t\tconst decorationProvider = foldingModel.decorationProvider as TestDecorationProvider;\n\t\tassert.deepStrictEqual(decorationProvider.getDecorations(), expectedDecoration, message);\n\t}\n\n\tfunction assertRegions(actual: FoldingRegion[], expectedRegions: ExpectedRegion[], message?: string) {\n\t\tassert.deepStrictEqual(actual.map(r => ({ startLineNumber: r.startLineNumber, endLineNumber: r.endLineNumber, isCollapsed: r.isCollapsed })), expectedRegions, message);\n\t}\n\n\ttest('getRegionAtLine', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'/**',\n\t\t/* 2*/\t' * Comment',\n\t\t/* 3*/\t' */',\n\t\t/* 4*/\t'class A {',\n\t\t/* 5*/\t'  void foo() {',\n\t\t/* 6*/\t'    // comment {',\n\t\t/* 7*/\t'  }',\n\t\t/* 8*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 3, false);\n\t\t\tconst r2 = r(4, 7, false);\n\t\t\tconst r3 = r(5, 6, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3]);\n\n\t\t\tassertRegion(foldingModel.getRegionAtLine(1), r1, '1');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(2), r1, '2');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(3), r1, '3');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(4), r2, '4');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(5), r3, '5');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(6), r3, '5');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(7), r2, '6');\n\t\t\tassertRegion(foldingModel.getRegionAtLine(8), null, '7');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\n\t});\n\n\ttest('collapse', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'/**',\n\t\t/* 2*/\t' * Comment',\n\t\t/* 3*/\t' */',\n\t\t/* 4*/\t'class A {',\n\t\t/* 5*/\t'  void foo() {',\n\t\t/* 6*/\t'    // comment {',\n\t\t/* 7*/\t'  }',\n\t\t/* 8*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 3, false);\n\t\t\tconst r2 = r(4, 7, false);\n\t\t\tconst r3 = r(5, 6, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3]);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(1)!]);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tassertRanges(foldingModel, [r(1, 3, true), r2, r3]);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(5)!]);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tassertRanges(foldingModel, [r(1, 3, true), r2, r(5, 6, true)]);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(7)!]);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tassertRanges(foldingModel, [r(1, 3, true), r(4, 7, true), r(5, 6, true)]);\n\n\t\t\ttextModel.dispose();\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('update', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'/**',\n\t\t/* 2*/\t' * Comment',\n\t\t/* 3*/\t' */',\n\t\t/* 4*/\t'class A {',\n\t\t/* 5*/\t'  void foo() {',\n\t\t/* 6*/\t'    // comment {',\n\t\t/* 7*/\t'  }',\n\t\t/* 8*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 3, false);\n\t\t\tconst r2 = r(4, 7, false);\n\t\t\tconst r3 = r(5, 6, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3]);\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(2)!, foldingModel.getRegionAtLine(5)!]);\n\n\t\t\ttextModel.applyEdits([EditOperation.insert(new Position(4, 1), '//hello\\n')]);\n\n\t\t\tfoldingModel.update(computeRanges(textModel, false, undefined));\n\n\t\t\tassertRanges(foldingModel, [r(1, 3, true), r(5, 8, false), r(6, 7, true)]);\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\t});\n\n\ttest('delete', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'function foo() {',\n\t\t/* 2*/\t'  switch (x) {',\n\t\t/* 3*/\t'    case 1:',\n\t\t/* 4*/\t'      //hello1',\n\t\t/* 5*/\t'      break;',\n\t\t/* 6*/\t'    case 2:',\n\t\t/* 7*/\t'      //hello2',\n\t\t/* 8*/\t'      break;',\n\t\t/* 9*/\t'    case 3:',\n\t\t/* 10*/\t'      //hello3',\n\t\t/* 11*/\t'      break;',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 12, false);\n\t\t\tconst r2 = r(2, 11, false);\n\t\t\tconst r3 = r(3, 5, false);\n\t\t\tconst r4 = r(6, 8, false);\n\t\t\tconst r5 = r(9, 11, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(6)!]);\n\n\t\t\ttextModel.applyEdits([EditOperation.delete(new Range(6, 11, 9, 0))]);\n\n\t\t\tfoldingModel.update(computeRanges(textModel, true, undefined), toSelectedLines([new Selection(7, 1, 7, 1)]));\n\n\t\t\tassertRanges(foldingModel, [r(1, 9, false), r(2, 8, false), r(3, 5, false), r(6, 8, false)]);\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\t});\n\n\ttest('getRegionsInside', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'/**',\n\t\t/* 2*/\t' * Comment',\n\t\t/* 3*/\t' */',\n\t\t/* 4*/\t'class A {',\n\t\t/* 5*/\t'  void foo() {',\n\t\t/* 6*/\t'    // comment {',\n\t\t/* 7*/\t'  }',\n\t\t/* 8*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 3, false);\n\t\t\tconst r2 = r(4, 7, false);\n\t\t\tconst r3 = r(5, 6, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3]);\n\t\t\tconst region1 = foldingModel.getRegionAtLine(r1.startLineNumber);\n\t\t\tconst region2 = foldingModel.getRegionAtLine(r2.startLineNumber);\n\t\t\tconst region3 = foldingModel.getRegionAtLine(r3.startLineNumber);\n\n\t\t\tassertRegions(foldingModel.getRegionsInside(null), [r1, r2, r3], '1');\n\t\t\tassertRegions(foldingModel.getRegionsInside(region1), [], '2');\n\t\t\tassertRegions(foldingModel.getRegionsInside(region2), [r3], '3');\n\t\t\tassertRegions(foldingModel.getRegionsInside(region3), [], '4');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('getRegionsInsideWithLevel', () => {\n\t\tconst lines = [\n\t\t\t/* 1*/\t'//#region',\n\t\t\t/* 2*/\t'//#endregion',\n\t\t\t/* 3*/\t'class A {',\n\t\t\t/* 4*/\t'  void foo() {',\n\t\t\t/* 5*/\t'    if (true) {',\n\t\t\t/* 6*/\t'        return;',\n\t\t\t/* 7*/\t'    }',\n\t\t\t/* 8*/\t'    if (true) {',\n\t\t\t/* 9*/\t'      return;',\n\t\t\t/* 10*/\t'    }',\n\t\t\t/* 11*/\t'  }',\n\t\t\t/* 12*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 11, false);\n\t\t\tconst r3 = r(4, 10, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(8, 9, false);\n\n\t\t\tconst region1 = foldingModel.getRegionAtLine(r1.startLineNumber);\n\t\t\tconst region2 = foldingModel.getRegionAtLine(r2.startLineNumber);\n\t\t\tconst region3 = foldingModel.getRegionAtLine(r3.startLineNumber);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tassertRegions(foldingModel.getRegionsInside(null, (r, level) => level === 1), [r1, r2], '1');\n\t\t\tassertRegions(foldingModel.getRegionsInside(null, (r, level) => level === 2), [r3], '2');\n\t\t\tassertRegions(foldingModel.getRegionsInside(null, (r, level) => level === 3), [r4, r5], '3');\n\n\t\t\tassertRegions(foldingModel.getRegionsInside(region2, (r, level) => level === 1), [r3], '4');\n\t\t\tassertRegions(foldingModel.getRegionsInside(region2, (r, level) => level === 2), [r4, r5], '5');\n\t\t\tassertRegions(foldingModel.getRegionsInside(region3, (r, level) => level === 1), [r4, r5], '6');\n\n\t\t\tassertRegions(foldingModel.getRegionsInside(region2, (r, level) => r.hidesLine(9)), [r3, r5], '7');\n\n\t\t\tassertRegions(foldingModel.getRegionsInside(region1, (r, level) => level === 1), [], '8');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('getRegionAtLine2', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'class A {',\n\t\t/* 3*/\t'  void foo() {',\n\t\t/* 4*/\t'    if (true) {',\n\t\t/* 5*/\t'      //hello',\n\t\t/* 6*/\t'    }',\n\t\t/* 7*/\t'',\n\t\t/* 8*/\t'  }',\n\t\t/* 9*/\t'}',\n\t\t/* 10*/\t'//#endregion',\n\t\t/* 11*/\t''];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 10, false);\n\t\t\tconst r2 = r(2, 8, false);\n\t\t\tconst r3 = r(3, 7, false);\n\t\t\tconst r4 = r(4, 5, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4]);\n\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(1), [r1], '1');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(2), [r1, r2].reverse(), '2');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(3), [r1, r2, r3].reverse(), '3');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(4), [r1, r2, r3, r4].reverse(), '4');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(5), [r1, r2, r3, r4].reverse(), '5');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(6), [r1, r2, r3].reverse(), '6');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(7), [r1, r2, r3].reverse(), '7');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(8), [r1, r2].reverse(), '8');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(9), [r1], '9');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(10), [r1], '10');\n\t\t\tassertRegions(foldingModel.getAllRegionsAtLine(11), [], '10');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\t});\n\n\ttest('setCollapseStateRecursivly', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'//#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 12, false);\n\t\t\tconst r3 = r(4, 11, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(9, 10, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, [4]);\n\t\t\tassertFoldedRanges(foldingModel, [r3, r4, r5], '1');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, [8]);\n\t\t\tassertFoldedRanges(foldingModel, [], '2');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, [12]);\n\t\t\tassertFoldedRanges(foldingModel, [r2, r3, r4, r5], '1');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, [7]);\n\t\t\tassertFoldedRanges(foldingModel, [r2], '1');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false);\n\t\t\tassertFoldedRanges(foldingModel, [], '1');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true);\n\t\t\tassertFoldedRanges(foldingModel, [r1, r2, r3, r4, r5], '1');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('setCollapseStateAtLevel', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'//#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'  //#region',\n\t\t/* 14*/\t'  const bar = 9;',\n\t\t/* 15*/\t'  //#endregion',\n\t\t/* 16*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\s*\\/\\/#region$/, end: /^\\s*\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 15, false);\n\t\t\tconst r3 = r(4, 11, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(9, 10, false);\n\t\t\tconst r6 = r(13, 15, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5, r6]);\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 1, true, []);\n\t\t\tassertFoldedRanges(foldingModel, [r1, r2], '1');\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 1, false, [5]);\n\t\t\tassertFoldedRanges(foldingModel, [r2], '2');\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 1, false, [1]);\n\t\t\tassertFoldedRanges(foldingModel, [], '3');\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 2, true, []);\n\t\t\tassertFoldedRanges(foldingModel, [r3, r6], '4');\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 2, false, [5, 6]);\n\t\t\tassertFoldedRanges(foldingModel, [r3], '5');\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 3, true, [4, 9]);\n\t\t\tassertFoldedRanges(foldingModel, [r3, r4], '6');\n\n\t\t\tsetCollapseStateAtLevel(foldingModel, 3, false, [4, 9]);\n\t\t\tassertFoldedRanges(foldingModel, [r3], '7');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\t});\n\n\ttest('setCollapseStateLevelsDown', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'//#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 12, false);\n\t\t\tconst r3 = r(4, 11, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(9, 10, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true, 1, [4]);\n\t\t\tassertFoldedRanges(foldingModel, [r3], '1');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true, 2, [4]);\n\t\t\tassertFoldedRanges(foldingModel, [r3, r4, r5], '2');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, 2, [3]);\n\t\t\tassertFoldedRanges(foldingModel, [r4, r5], '3');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, 2, [2]);\n\t\t\tassertFoldedRanges(foldingModel, [r4, r5], '4');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, true, 4, [2]);\n\t\t\tassertFoldedRanges(foldingModel, [r1, r4, r5], '5');\n\n\t\t\tsetCollapseStateLevelsDown(foldingModel, false, 4, [2, 3]);\n\t\t\tassertFoldedRanges(foldingModel, [], '6');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\t});\n\n\ttest('setCollapseStateLevelsUp', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'//#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 12, false);\n\t\t\tconst r3 = r(4, 11, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(9, 10, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tsetCollapseStateLevelsUp(foldingModel, true, 1, [4]);\n\t\t\tassertFoldedRanges(foldingModel, [r3], '1');\n\n\t\t\tsetCollapseStateLevelsUp(foldingModel, true, 2, [4]);\n\t\t\tassertFoldedRanges(foldingModel, [r2, r3], '2');\n\n\t\t\tsetCollapseStateLevelsUp(foldingModel, false, 4, [1, 3, 4]);\n\t\t\tassertFoldedRanges(foldingModel, [], '3');\n\n\t\t\tsetCollapseStateLevelsUp(foldingModel, true, 2, [10]);\n\t\t\tassertFoldedRanges(foldingModel, [r3, r5], '4');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('setCollapseStateUp', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'//#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 12, false);\n\t\t\tconst r3 = r(4, 11, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(9, 10, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tsetCollapseStateUp(foldingModel, true, [5]);\n\t\t\tassertFoldedRanges(foldingModel, [r4], '1');\n\n\t\t\tsetCollapseStateUp(foldingModel, true, [5]);\n\t\t\tassertFoldedRanges(foldingModel, [r3, r4], '2');\n\n\t\t\tsetCollapseStateUp(foldingModel, true, [4]);\n\t\t\tassertFoldedRanges(foldingModel, [r2, r3, r4], '2');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\n\ttest('setCollapseStateForMatchingLines', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'/**',\n\t\t/* 2*/\t' * the class',\n\t\t/* 3*/\t' */',\n\t\t/* 4*/\t'class A {',\n\t\t/* 5*/\t'  /**',\n\t\t/* 6*/\t'   * the foo',\n\t\t/* 7*/\t'   */',\n\t\t/* 8*/\t'  void foo() {',\n\t\t/* 9*/\t'    /*',\n\t\t/* 10*/\t'     * the comment',\n\t\t/* 11*/\t'     */',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 3, false);\n\t\t\tconst r2 = r(4, 12, false);\n\t\t\tconst r3 = r(5, 7, false);\n\t\t\tconst r4 = r(8, 11, false);\n\t\t\tconst r5 = r(9, 11, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tconst regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters('/*'));\n\t\t\tsetCollapseStateForMatchingLines(foldingModel, regExp, true);\n\t\t\tassertFoldedRanges(foldingModel, [r1, r3, r5], '1');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\n\ttest('setCollapseStateForRest', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'//#region',\n\t\t/* 2*/\t'//#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, { start: /^\\/\\/#region$/, end: /^\\/\\/#endregion$/ });\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 2, false);\n\t\t\tconst r2 = r(3, 12, false);\n\t\t\tconst r3 = r(4, 11, false);\n\t\t\tconst r4 = r(5, 6, false);\n\t\t\tconst r5 = r(9, 10, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5]);\n\n\t\t\tsetCollapseStateForRest(foldingModel, true, [5]);\n\t\t\tassertFoldedRanges(foldingModel, [r1, r5], '1');\n\n\t\t\tsetCollapseStateForRest(foldingModel, false, [5]);\n\t\t\tassertFoldedRanges(foldingModel, [], '2');\n\n\t\t\tsetCollapseStateForRest(foldingModel, true, [1]);\n\t\t\tassertFoldedRanges(foldingModel, [r2, r3, r4, r5], '3');\n\n\t\t\tsetCollapseStateForRest(foldingModel, true, [3]);\n\t\t\tassertFoldedRanges(foldingModel, [r1, r2, r3, r4, r5], '3');\n\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\n\ttest('folding decoration', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'class A {',\n\t\t/* 2*/\t'  void foo() {',\n\t\t/* 3*/\t'    if (true) {',\n\t\t/* 4*/\t'      hoo();',\n\t\t/* 5*/\t'    }',\n\t\t/* 6*/\t'  }',\n\t\t/* 7*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 6, false);\n\t\t\tconst r2 = r(2, 5, false);\n\t\t\tconst r3 = r(3, 4, false);\n\n\t\t\tassertRanges(foldingModel, [r1, r2, r3]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'expanded'), d(2, 'expanded'), d(3, 'expanded')]);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(2)!]);\n\n\t\t\tassertRanges(foldingModel, [r1, r(2, 5, true), r3]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'expanded'), d(2, 'collapsed'), d(3, 'hidden')]);\n\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tassertRanges(foldingModel, [r1, r(2, 5, true), r3]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'expanded'), d(2, 'collapsed'), d(3, 'hidden')]);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(1)!]);\n\n\t\t\tassertRanges(foldingModel, [r(1, 6, true), r(2, 5, true), r3]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'collapsed'), d(2, 'hidden'), d(3, 'hidden')]);\n\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tassertRanges(foldingModel, [r(1, 6, true), r(2, 5, true), r3]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'collapsed'), d(2, 'hidden'), d(3, 'hidden')]);\n\n\t\t\tfoldingModel.toggleCollapseState([foldingModel.getRegionAtLine(1)!, foldingModel.getRegionAtLine(3)!]);\n\n\t\t\tassertRanges(foldingModel, [r1, r(2, 5, true), r(3, 4, true)]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'expanded'), d(2, 'collapsed'), d(3, 'hidden')]);\n\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tassertRanges(foldingModel, [r1, r(2, 5, true), r(3, 4, true)]);\n\t\t\tassertDecorations(foldingModel, [d(1, 'expanded'), d(2, 'collapsed'), d(3, 'hidden')]);\n\n\t\t\ttextModel.dispose();\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('fold jumping', () => {\n\t\tconst lines = [\n\t\t\t/* 1*/\t'class A {',\n\t\t\t/* 2*/\t'  void foo() {',\n\t\t\t/* 3*/\t'    if (1) {',\n\t\t\t/* 4*/\t'      a();',\n\t\t\t/* 5*/\t'    } else if (2) {',\n\t\t\t/* 6*/\t'      if (true) {',\n\t\t\t/* 7*/\t'        b();',\n\t\t\t/* 8*/\t'      }',\n\t\t\t/* 9*/\t'    } else {',\n\t\t\t/* 10*/\t'      c();',\n\t\t\t/* 11*/\t'    }',\n\t\t\t/* 12*/\t'  }',\n\t\t\t/* 13*/\t'}'\n\t\t];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(1, 12, false);\n\t\t\tconst r2 = r(2, 11, false);\n\t\t\tconst r3 = r(3, 4, false);\n\t\t\tconst r4 = r(5, 8, false);\n\t\t\tconst r5 = r(6, 7, false);\n\t\t\tconst r6 = r(9, 10, false);\n\t\t\tassertRanges(foldingModel, [r1, r2, r3, r4, r5, r6]);\n\n\t\t\t// Test jump to parent.\n\t\t\tassert.strictEqual(getParentFoldLine(7, foldingModel), 6);\n\t\t\tassert.strictEqual(getParentFoldLine(6, foldingModel), 5);\n\t\t\tassert.strictEqual(getParentFoldLine(5, foldingModel), 2);\n\t\t\tassert.strictEqual(getParentFoldLine(2, foldingModel), 1);\n\t\t\tassert.strictEqual(getParentFoldLine(1, foldingModel), null);\n\n\t\t\t// Test jump to previous.\n\t\t\tassert.strictEqual(getPreviousFoldLine(10, foldingModel), 9);\n\t\t\tassert.strictEqual(getPreviousFoldLine(9, foldingModel), 5);\n\t\t\tassert.strictEqual(getPreviousFoldLine(5, foldingModel), 3);\n\t\t\tassert.strictEqual(getPreviousFoldLine(3, foldingModel), null);\n\t\t\t// Test when not on a folding region start line.\n\t\t\tassert.strictEqual(getPreviousFoldLine(4, foldingModel), 3);\n\t\t\tassert.strictEqual(getPreviousFoldLine(7, foldingModel), 6);\n\t\t\tassert.strictEqual(getPreviousFoldLine(8, foldingModel), 6);\n\n\t\t\t// Test jump to next.\n\t\t\tassert.strictEqual(getNextFoldLine(3, foldingModel), 5);\n\t\t\tassert.strictEqual(getNextFoldLine(5, foldingModel), 9);\n\t\t\tassert.strictEqual(getNextFoldLine(9, foldingModel), null);\n\t\t\t// Test when not on a folding region start line.\n\t\t\tassert.strictEqual(getNextFoldLine(4, foldingModel), 5);\n\t\t\tassert.strictEqual(getNextFoldLine(7, foldingModel), 9);\n\t\t\tassert.strictEqual(getNextFoldLine(8, foldingModel), 9);\n\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\t});\n\n\ttest('fold jumping issue #129503', () => {\n\t\tconst lines = [\n\t\t\t/* 1*/\t'',\n\t\t\t/* 2*/\t'if True:',\n\t\t\t/* 3*/\t'  print(1)',\n\t\t\t/* 4*/\t'if True:',\n\t\t\t/* 5*/\t'  print(1)',\n\t\t\t/* 6*/\t''\n\t\t];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst foldingModel = new FoldingModel(textModel, new TestDecorationProvider(textModel));\n\n\t\t\tconst ranges = computeRanges(textModel, false, undefined);\n\t\t\tfoldingModel.update(ranges);\n\n\t\t\tconst r1 = r(2, 3, false);\n\t\t\tconst r2 = r(4, 6, false);\n\t\t\tassertRanges(foldingModel, [r1, r2]);\n\n\t\t\t// Test jump to next.\n\t\t\tassert.strictEqual(getNextFoldLine(1, foldingModel), 2);\n\t\t\tassert.strictEqual(getNextFoldLine(2, foldingModel), 4);\n\t\t\tassert.strictEqual(getNextFoldLine(3, foldingModel), 4);\n\t\t\tassert.strictEqual(getNextFoldLine(4, foldingModel), null);\n\t\t\tassert.strictEqual(getNextFoldLine(5, foldingModel), null);\n\t\t\tassert.strictEqual(getNextFoldLine(6, foldingModel), null);\n\n\t\t\t// Test jump to previous.\n\t\t\tassert.strictEqual(getPreviousFoldLine(1, foldingModel), null);\n\t\t\tassert.strictEqual(getPreviousFoldLine(2, foldingModel), null);\n\t\t\tassert.strictEqual(getPreviousFoldLine(3, foldingModel), 2);\n\t\t\tassert.strictEqual(getPreviousFoldLine(4, foldingModel), 2);\n\t\t\tassert.strictEqual(getPreviousFoldLine(5, foldingModel), 4);\n\t\t\tassert.strictEqual(getPreviousFoldLine(6, foldingModel), 4);\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": ["r"]
}
