{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/folding/test/browser/foldingRanges.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { FoldingMarkers } from '../../../../common/languages/languageConfiguration.js';\nimport { MAX_FOLDING_REGIONS, FoldRange, FoldingRegions, FoldSource } from '../../browser/foldingRanges.js';\nimport { RangesCollector, computeRanges } from '../../browser/indentRangeProvider.js';\nimport { createTextModel } from '../../../../test/common/testTextModel.js';\n\nconst markers: FoldingMarkers = {\n\tstart: /^#region$/,\n\tend: /^#endregion$/\n};\n\nsuite('FoldingRanges', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\tconst foldRange = (from: number, to: number, collapsed: boolean | undefined = undefined, source: FoldSource = FoldSource.provider, type: string | undefined = undefined) =>\n\t\t<FoldRange>{\n\t\t\tstartLineNumber: from,\n\t\t\tendLineNumber: to,\n\t\t\ttype: type,\n\t\t\tisCollapsed: collapsed || false,\n\t\t\tsource\n\t\t};\n\tconst assertEqualRanges = (range1: FoldRange, range2: FoldRange, msg: string) => {\n\t\tassert.strictEqual(range1.startLineNumber, range2.startLineNumber, msg + ' start');\n\t\tassert.strictEqual(range1.endLineNumber, range2.endLineNumber, msg + ' end');\n\t\tassert.strictEqual(range1.type, range2.type, msg + ' type');\n\t\tassert.strictEqual(range1.isCollapsed, range2.isCollapsed, msg + ' collapsed');\n\t\tassert.strictEqual(range1.source, range2.source, msg + ' source');\n\t};\n\n\ttest('test max folding regions', () => {\n\t\tconst lines: string[] = [];\n\t\tconst nRegions = MAX_FOLDING_REGIONS;\n\t\tconst collector = new RangesCollector({ limit: MAX_FOLDING_REGIONS, update: () => { } });\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tconst startLineNumber = lines.length;\n\t\t\tlines.push('#region');\n\t\t\tconst endLineNumber = lines.length;\n\t\t\tlines.push('#endregion');\n\t\t\tcollector.insertFirst(startLineNumber, endLineNumber, 0);\n\t\t}\n\t\tconst model = createTextModel(lines.join('\\n'));\n\t\tconst actual = collector.toIndentRanges(model);\n\t\tassert.strictEqual(actual.length, nRegions, 'len');\n\t\tmodel.dispose();\n\n\t});\n\n\ttest('findRange', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'#region',\n\t\t/* 2*/\t'#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst actual = computeRanges(textModel, false, markers);\n\t\t\t// let r0 = r(1, 2);\n\t\t\t// let r1 = r(3, 12);\n\t\t\t// let r2 = r(4, 11);\n\t\t\t// let r3 = r(5, 6);\n\t\t\t// let r4 = r(9, 10);\n\n\t\t\tassert.strictEqual(actual.findRange(1), 0, '1');\n\t\t\tassert.strictEqual(actual.findRange(2), 0, '2');\n\t\t\tassert.strictEqual(actual.findRange(3), 1, '3');\n\t\t\tassert.strictEqual(actual.findRange(4), 2, '4');\n\t\t\tassert.strictEqual(actual.findRange(5), 3, '5');\n\t\t\tassert.strictEqual(actual.findRange(6), 3, '6');\n\t\t\tassert.strictEqual(actual.findRange(7), 2, '7');\n\t\t\tassert.strictEqual(actual.findRange(8), 2, '8');\n\t\t\tassert.strictEqual(actual.findRange(9), 4, '9');\n\t\t\tassert.strictEqual(actual.findRange(10), 4, '10');\n\t\t\tassert.strictEqual(actual.findRange(11), 2, '11');\n\t\t\tassert.strictEqual(actual.findRange(12), 1, '12');\n\t\t\tassert.strictEqual(actual.findRange(13), -1, '13');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\n\t});\n\n\ttest('setCollapsed', () => {\n\t\tconst lines: string[] = [];\n\t\tconst nRegions = 500;\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#region');\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#endregion');\n\t\t}\n\t\tconst model = createTextModel(lines.join('\\n'));\n\t\tconst actual = computeRanges(model, false, markers);\n\t\tassert.strictEqual(actual.length, nRegions, 'len');\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tactual.setCollapsed(i, i % 3 === 0);\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tassert.strictEqual(actual.isCollapsed(i), i % 3 === 0, 'line' + i);\n\t\t}\n\t\tmodel.dispose();\n\t});\n\n\ttest('sanitizeAndMerge1', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(0, 100),\t\t\t// invalid, should be removed\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'A'),\t\t// valid\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'Z'),\t\t// invalid, duplicate start\n\t\t\tfoldRange(10, 10, false),\t\t\t\t\t\t// invalid, should be removed\n\t\t\tfoldRange(20, 80, false, FoldSource.provider, 'C1'),\t\t// valid inside 'B'\n\t\t\tfoldRange(22, 80, true, FoldSource.provider, 'D1'),\t\t// valid inside 'C1'\n\t\t\tfoldRange(90, 101),\t\t\t\t\t\t\t\t// invalid, should be removed\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(20, 80, true),\t\t\t    \t\t// should merge with C1\n\t\t\tfoldRange(18, 80, true),\t\t\t\t\t\t// invalid, out of order\n\t\t\tfoldRange(21, 81, true, FoldSource.provider, 'Z'),\t\t// invalid, overlapping\n\t\t\tfoldRange(22, 80, true, FoldSource.provider, 'D2'),\t\t// should merge with D1\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 3, 'result length1');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'A'), 'A1');\n\t\tassertEqualRanges(result[1], foldRange(20, 80, true, FoldSource.provider, 'C1'), 'C1');\n\t\tassertEqualRanges(result[2], foldRange(22, 80, true, FoldSource.provider, 'D1'), 'D1');\n\t});\n\n\ttest('sanitizeAndMerge2', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'a1'),\t\t\t// valid\n\t\t\tfoldRange(2, 100, false, FoldSource.provider, 'a2'),\t\t\t// valid\n\t\t\tfoldRange(3, 19, false, FoldSource.provider, 'a3'),\t\t\t// valid\n\t\t\tfoldRange(20, 71, false, FoldSource.provider, 'a4'),\t\t\t// overlaps b3\n\t\t\tfoldRange(21, 29, false, FoldSource.provider, 'a5'),\t\t\t// valid\n\t\t\tfoldRange(81, 91, false, FoldSource.provider, 'a6'),\t\t\t// overlaps b4\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(30, 39, true, FoldSource.provider, 'b1'),\t\t\t// valid, will be recovered\n\t\t\tfoldRange(40, 49, true, FoldSource.userDefined, 'b2'),\t// valid\n\t\t\tfoldRange(50, 100, true, FoldSource.userDefined, 'b3'),\t// overlaps a4\n\t\t\tfoldRange(80, 90, true, FoldSource.userDefined, 'b4'),\t// overlaps a6\n\t\t\tfoldRange(92, 100, true, FoldSource.userDefined, 'b5'),\t// valid\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 9, 'result length1');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'a1'), 'P1');\n\t\tassertEqualRanges(result[1], foldRange(2, 100, false, FoldSource.provider, 'a2'), 'P2');\n\t\tassertEqualRanges(result[2], foldRange(3, 19, false, FoldSource.provider, 'a3'), 'P3');\n\t\tassertEqualRanges(result[3], foldRange(21, 29, false, FoldSource.provider, 'a5'), 'P4');\n\t\tassertEqualRanges(result[4], foldRange(30, 39, true, FoldSource.recovered, 'b1'), 'P5');\n\t\tassertEqualRanges(result[5], foldRange(40, 49, true, FoldSource.userDefined, 'b2'), 'P6');\n\t\tassertEqualRanges(result[6], foldRange(50, 100, true, FoldSource.userDefined, 'b3'), 'P7');\n\t\tassertEqualRanges(result[7], foldRange(80, 90, true, FoldSource.userDefined, 'b4'), 'P8');\n\t\tassertEqualRanges(result[8], foldRange(92, 100, true, FoldSource.userDefined, 'b5'), 'P9');\n\t});\n\n\ttest('sanitizeAndMerge3', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'a1'),\t\t\t// valid\n\t\t\tfoldRange(10, 29, false, FoldSource.provider, 'a2'),\t\t\t// matches manual hidden\n\t\t\tfoldRange(35, 39, true, FoldSource.recovered, 'a3'),\t\t// valid\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(10, 29, true, FoldSource.recovered, 'b1'),\t\t// matches a\n\t\t\tfoldRange(20, 28, true, FoldSource.provider, 'b2'),\t\t\t// should remain\n\t\t\tfoldRange(30, 39, true, FoldSource.recovered, 'b3'),\t\t// should remain\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 5, 'result length3');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'a1'), 'R1');\n\t\tassertEqualRanges(result[1], foldRange(10, 29, true, FoldSource.provider, 'a2'), 'R2');\n\t\tassertEqualRanges(result[2], foldRange(20, 28, true, FoldSource.recovered, 'b2'), 'R3');\n\t\tassertEqualRanges(result[3], foldRange(30, 39, true, FoldSource.recovered, 'b3'), 'R3');\n\t\tassertEqualRanges(result[4], foldRange(35, 39, true, FoldSource.recovered, 'a3'), 'R4');\n\t});\n\n\ttest('sanitizeAndMerge4', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'a1'),\t\t\t// valid\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(20, 28, true, FoldSource.provider, 'b1'),\t\t\t// hidden\n\t\t\tfoldRange(30, 38, true, FoldSource.provider, 'b2'),\t\t\t// hidden\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 3, 'result length4');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'a1'), 'R1');\n\t\tassertEqualRanges(result[1], foldRange(20, 28, true, FoldSource.recovered, 'b1'), 'R2');\n\t\tassertEqualRanges(result[2], foldRange(30, 38, true, FoldSource.recovered, 'b2'), 'R3');\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
