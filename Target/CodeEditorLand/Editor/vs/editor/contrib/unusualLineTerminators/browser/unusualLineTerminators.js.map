{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { ITextModel } from '../../../common/model.js';\nimport * as nls from '../../../../nls.js';\nimport { IConfirmationResult, IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\n\nconst ignoreUnusualLineTerminators = 'ignoreUnusualLineTerminators';\n\nfunction writeIgnoreState(codeEditorService: ICodeEditorService, model: ITextModel, state: boolean): void {\n\tcodeEditorService.setModelProperty(model.uri, ignoreUnusualLineTerminators, state);\n}\n\nfunction readIgnoreState(codeEditorService: ICodeEditorService, model: ITextModel): boolean | undefined {\n\treturn codeEditorService.getModelProperty(model.uri, ignoreUnusualLineTerminators);\n}\n\nexport class UnusualLineTerminatorsDetector extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.unusualLineTerminatorsDetector';\n\n\tprivate _config: 'auto' | 'off' | 'prompt';\n\tprivate _isPresentingDialog: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis._config = this._editor.getOption(EditorOption.unusualLineTerminators);\n\t\tthis._register(this._editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.unusualLineTerminators)) {\n\t\t\t\tthis._config = this._editor.getOption(EditorOption.unusualLineTerminators);\n\t\t\t\tthis._checkForUnusualLineTerminators();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._editor.onDidChangeModel(() => {\n\t\t\tthis._checkForUnusualLineTerminators();\n\t\t}));\n\n\t\tthis._register(this._editor.onDidChangeModelContent((e) => {\n\t\t\tif (e.isUndoing) {\n\t\t\t\t// skip checking in case of undoing\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._checkForUnusualLineTerminators();\n\t\t}));\n\n\t\tthis._checkForUnusualLineTerminators();\n\t}\n\n\tprivate async _checkForUnusualLineTerminators(): Promise<void> {\n\t\tif (this._config === 'off') {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._editor.getModel();\n\t\tif (!model.mightContainUnusualLineTerminators()) {\n\t\t\treturn;\n\t\t}\n\t\tconst ignoreState = readIgnoreState(this._codeEditorService, model);\n\t\tif (ignoreState === true) {\n\t\t\t// this model should be ignored\n\t\t\treturn;\n\t\t}\n\t\tif (this._editor.getOption(EditorOption.readOnly)) {\n\t\t\t// read only editor => sorry!\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._config === 'auto') {\n\t\t\t// just do it!\n\t\t\tmodel.removeUnusualLineTerminators(this._editor.getSelections());\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._isPresentingDialog) {\n\t\t\t// we're currently showing the dialog, which is async.\n\t\t\t// avoid spamming the user\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: IConfirmationResult;\n\t\ttry {\n\t\t\tthis._isPresentingDialog = true;\n\t\t\tresult = await this._dialogService.confirm({\n\t\t\t\ttitle: nls.localize('unusualLineTerminators.title', \"Unusual Line Terminators\"),\n\t\t\t\tmessage: nls.localize('unusualLineTerminators.message', \"Detected unusual line terminators\"),\n\t\t\t\tdetail: nls.localize('unusualLineTerminators.detail', \"The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\\n\\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.\", basename(model.uri)),\n\t\t\t\tprimaryButton: nls.localize({ key: 'unusualLineTerminators.fix', comment: ['&& denotes a mnemonic'] }, \"&&Remove Unusual Line Terminators\"),\n\t\t\t\tcancelButton: nls.localize('unusualLineTerminators.ignore', \"Ignore\")\n\t\t\t});\n\t\t} finally {\n\t\t\tthis._isPresentingDialog = false;\n\t\t}\n\n\t\tif (!result.confirmed) {\n\t\t\t// this model should be ignored\n\t\t\twriteIgnoreState(this._codeEditorService, model, true);\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.removeUnusualLineTerminators(this._editor.getSelections());\n\t}\n}\n\nregisterEditorContribution(UnusualLineTerminatorsDetector.ID, UnusualLineTerminatorsDetector, EditorContributionInstantiation.AfterFirstRender);\n"],
  "mappings": "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",
  "names": []
}
