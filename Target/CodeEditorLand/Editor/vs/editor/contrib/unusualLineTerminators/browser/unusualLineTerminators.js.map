{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\ttype IConfirmationResult,\n\tIDialogService,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport type { ICodeEditor } from \"../../../browser/editorBrowser.js\";\nimport {\n\tEditorContributionInstantiation,\n\tregisterEditorContribution,\n} from \"../../../browser/editorExtensions.js\";\nimport { ICodeEditorService } from \"../../../browser/services/codeEditorService.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport type { IEditorContribution } from \"../../../common/editorCommon.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\n\nconst ignoreUnusualLineTerminators = \"ignoreUnusualLineTerminators\";\n\nfunction writeIgnoreState(\n\tcodeEditorService: ICodeEditorService,\n\tmodel: ITextModel,\n\tstate: boolean,\n): void {\n\tcodeEditorService.setModelProperty(\n\t\tmodel.uri,\n\t\tignoreUnusualLineTerminators,\n\t\tstate,\n\t);\n}\n\nfunction readIgnoreState(\n\tcodeEditorService: ICodeEditorService,\n\tmodel: ITextModel,\n): boolean | undefined {\n\treturn codeEditorService.getModelProperty(\n\t\tmodel.uri,\n\t\tignoreUnusualLineTerminators,\n\t);\n}\n\nexport class UnusualLineTerminatorsDetector\n\textends Disposable\n\timplements IEditorContribution\n{\n\tpublic static readonly ID = \"editor.contrib.unusualLineTerminatorsDetector\";\n\n\tprivate _config: \"auto\" | \"off\" | \"prompt\";\n\tprivate _isPresentingDialog = false;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis._config = this._editor.getOption(EditorOption.unusualLineTerminators);\n\t\tthis._register(this._editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.unusualLineTerminators)) {\n\t\t\t\tthis._config = this._editor.getOption(EditorOption.unusualLineTerminators);\n\t\t\t\tthis._checkForUnusualLineTerminators();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._editor.onDidChangeModel(() => {\n\t\t\tthis._checkForUnusualLineTerminators();\n\t\t}));\n\n\t\tthis._register(this._editor.onDidChangeModelContent((e) => {\n\t\t\tif (e.isUndoing) {\n\t\t\t\t// skip checking in case of undoing\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._checkForUnusualLineTerminators();\n\t\t}));\n\n\t\tthis._checkForUnusualLineTerminators();\n\t}\n\n\tprivate async _checkForUnusualLineTerminators(): Promise<void> {\n\t\tif (this._config === \"off\") {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._editor.getModel();\n\t\tif (!model.mightContainUnusualLineTerminators()) {\n\t\t\treturn;\n\t\t}\n\t\tconst ignoreState = readIgnoreState(this._codeEditorService, model);\n\t\tif (ignoreState === true) {\n\t\t\t// this model should be ignored\n\t\t\treturn;\n\t\t}\n\t\tif (this._editor.getOption(EditorOption.readOnly)) {\n\t\t\t// read only editor => sorry!\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._config === \"auto\") {\n\t\t\t// just do it!\n\t\t\tmodel.removeUnusualLineTerminators(this._editor.getSelections());\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._isPresentingDialog) {\n\t\t\t// we're currently showing the dialog, which is async.\n\t\t\t// avoid spamming the user\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: IConfirmationResult;\n\t\ttry {\n\t\t\tthis._isPresentingDialog = true;\n\t\t\tresult = await this._dialogService.confirm({\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\"unusualLineTerminators.title\",\n\t\t\t\t\t\"Unusual Line Terminators\",\n\t\t\t\t),\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"unusualLineTerminators.message\",\n\t\t\t\t\t\"Detected unusual line terminators\",\n\t\t\t\t),\n\t\t\t\tdetail: nls.localize(\n\t\t\t\t\t\"unusualLineTerminators.detail\",\n\t\t\t\t\t\"The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\\n\\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.\",\n\t\t\t\t\tbasename(model.uri),\n\t\t\t\t),\n\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"unusualLineTerminators.fix\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Remove Unusual Line Terminators\",\n\t\t\t\t),\n\t\t\t\tcancelButton: nls.localize(\n\t\t\t\t\t\"unusualLineTerminators.ignore\",\n\t\t\t\t\t\"Ignore\",\n\t\t\t\t),\n\t\t\t});\n\t\t} finally {\n\t\t\tthis._isPresentingDialog = false;\n\t\t}\n\n\t\tif (!result.confirmed) {\n\t\t\t// this model should be ignored\n\t\t\twriteIgnoreState(this._codeEditorService, model, true);\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.removeUnusualLineTerminators(this._editor.getSelections());\n\t}\n}\n\nregisterEditorContribution(\n\tUnusualLineTerminatorsDetector.ID,\n\tUnusualLineTerminatorsDetector,\n\tEditorContributionInstantiation.AfterFirstRender,\n);\n"],
  "mappings": "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",
  "names": []
}
