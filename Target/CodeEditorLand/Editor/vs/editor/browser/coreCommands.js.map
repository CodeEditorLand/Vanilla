{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/coreCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport { KeyCode, KeyMod } from '../../base/common/keyCodes.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { ICodeEditor } from './editorBrowser.js';\nimport { Command, EditorCommand, ICommandOptions, registerEditorCommand, MultiCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection, IColumnSelectResult } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState, EditOperationType, IColumnSelectData, PartialCursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorChangeReason } from '../common/cursorEvents.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { IPosition, Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { Handler, ScrollType } from '../common/editorCommon.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { VerticalRevealType } from '../common/viewEvents.js';\nimport { ICommandMetadata } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight, KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { EditorOption } from '../common/config/editorOptions.js';\nimport { IViewModel } from '../common/viewModel.js';\nimport { ISelection } from '../common/core/selection.js';\nimport { getActiveElement, isEditableElement } from '../../base/browser/dom.js';\nimport { EnterOperation } from '../common/cursor/cursorTypeEditOperations.js';\n\nconst CORE_WEIGHT = KeybindingWeight.EditorCore;\n\nexport abstract class CoreEditorCommand<T> extends EditorCommand {\n\tpublic runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args?: Partial<T> | null): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\t// the editor has no view => has no cursors\n\t\t\treturn;\n\t\t}\n\t\tthis.runCoreEditorCommand(viewModel, args || {});\n\t}\n\n\tpublic abstract runCoreEditorCommand(viewModel: IViewModel, args: Partial<T>): void;\n}\n\nexport namespace EditorScroll_ {\n\n\tconst isEditorScrollArgs = function (arg: any): boolean {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst scrollArg: RawArguments = arg;\n\n\t\tif (!types.isString(scrollArg.to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const metadata: ICommandMetadata = {\n\t\tdescription: 'Scroll editor in the given direction',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'Editor scroll argument object',\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n\t\t\t\tconstraint: isEditorScrollArgs,\n\t\t\t\tschema: {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'required': ['to'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'to': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['up', 'down']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'by': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'revealCursor': {\n\t\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\t/**\n\t * Directions in the view for editor scroll command.\n\t */\n\texport const RawDirection = {\n\t\tUp: 'up',\n\t\tRight: 'right',\n\t\tDown: 'down',\n\t\tLeft: 'left'\n\t};\n\n\t/**\n\t * Units for editor scroll 'by' argument\n\t */\n\texport const RawUnit = {\n\t\tLine: 'line',\n\t\tWrappedLine: 'wrappedLine',\n\t\tPage: 'page',\n\t\tHalfPage: 'halfPage',\n\t\tEditor: 'editor',\n\t\tColumn: 'column'\n\t};\n\n\t/**\n\t * Arguments for editor scroll command\n\t */\n\texport interface RawArguments {\n\t\tto: string;\n\t\tby?: string;\n\t\tvalue?: number;\n\t\trevealCursor?: boolean;\n\t\tselect?: boolean;\n\t}\n\n\texport function parse(args: Partial<RawArguments>): ParsedArguments | null {\n\t\tlet direction: Direction;\n\t\tswitch (args.to) {\n\t\t\tcase RawDirection.Up:\n\t\t\t\tdirection = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Right:\n\t\t\t\tdirection = Direction.Right;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Down:\n\t\t\t\tdirection = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Left:\n\t\t\t\tdirection = Direction.Left;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Illegal arguments\n\t\t\t\treturn null;\n\t\t}\n\n\t\tlet unit: Unit;\n\t\tswitch (args.by) {\n\t\t\tcase RawUnit.Line:\n\t\t\t\tunit = Unit.Line;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.WrappedLine:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Page:\n\t\t\t\tunit = Unit.Page;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.HalfPage:\n\t\t\t\tunit = Unit.HalfPage;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Editor:\n\t\t\t\tunit = Unit.Editor;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Column:\n\t\t\t\tunit = Unit.Column;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t}\n\n\t\tconst value = Math.floor(args.value || 1);\n\t\tconst revealCursor = !!args.revealCursor;\n\n\t\treturn {\n\t\t\tdirection: direction,\n\t\t\tunit: unit,\n\t\t\tvalue: value,\n\t\t\trevealCursor: revealCursor,\n\t\t\tselect: (!!args.select)\n\t\t};\n\t}\n\n\texport interface ParsedArguments {\n\t\tdirection: Direction;\n\t\tunit: Unit;\n\t\tvalue: number;\n\t\trevealCursor: boolean;\n\t\tselect: boolean;\n\t}\n\n\n\texport const enum Direction {\n\t\tUp = 1,\n\t\tRight = 2,\n\t\tDown = 3,\n\t\tLeft = 4\n\t}\n\n\texport const enum Unit {\n\t\tLine = 1,\n\t\tWrappedLine = 2,\n\t\tPage = 3,\n\t\tHalfPage = 4,\n\t\tEditor = 5,\n\t\tColumn = 6\n\t}\n}\n\nexport namespace RevealLine_ {\n\n\tconst isRevealLineArgs = function (arg: any): boolean {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst reveaLineArg: RawArguments = arg;\n\n\t\tif (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const metadata: ICommandMetadata = {\n\t\tdescription: 'Reveal the given line at the given logical position',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'Reveal line argument object',\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n\t\t\t\tconstraint: isRevealLineArgs,\n\t\t\t\tschema: {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'required': ['lineNumber'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'lineNumber': {\n\t\t\t\t\t\t\t'type': ['number', 'string'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'at': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['top', 'center', 'bottom']\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\t/**\n\t * Arguments for reveal line command\n\t */\n\texport interface RawArguments {\n\t\tlineNumber?: number | string;\n\t\tat?: string;\n\t}\n\n\t/**\n\t * Values for reveal line 'at' argument\n\t */\n\texport const RawAtArgument = {\n\t\tTop: 'top',\n\t\tCenter: 'center',\n\t\tBottom: 'bottom'\n\t};\n}\n\nabstract class EditorOrNativeTextInputCommand {\n\n\tconstructor(target: MultiCommand) {\n\t\t// 1. handle case when focus is in editor.\n\t\ttarget.addImplementation(10000, 'code-editor', (accessor: ServicesAccessor, args: unknown) => {\n\t\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\t\tconst focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\t\treturn this._runEditorCommand(accessor, focusedEditor, args);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\t// 2. handle case when focus is in some other `input` / `textarea`.\n\t\ttarget.addImplementation(1000, 'generic-dom-input-textarea', (accessor: ServicesAccessor, args: unknown) => {\n\t\t\t// Only if focused on an element that allows for entering text\n\t\t\tconst activeElement = getActiveElement();\n\t\t\tif (activeElement && isEditableElement(activeElement)) {\n\t\t\t\tthis.runDOMCommand(activeElement);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\t// 3. (default) handle case when focus is somewhere else.\n\t\ttarget.addImplementation(0, 'generic-dom', (accessor: ServicesAccessor, args: unknown) => {\n\t\t\t// Redirecting to active editor\n\t\t\tconst activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\t\t\tif (activeEditor) {\n\t\t\t\tactiveEditor.focus();\n\t\t\t\treturn this._runEditorCommand(accessor, activeEditor, args);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tpublic _runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: unknown): boolean | Promise<void> {\n\t\tconst result = this.runEditorCommand(accessor, editor, args);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic abstract runDOMCommand(activeElement: Element): void;\n\tpublic abstract runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: unknown): void | Promise<void>;\n}\n\nexport const enum NavigationCommandRevealType {\n\t/**\n\t * Do regular revealing.\n\t */\n\tRegular = 0,\n\t/**\n\t * Do only minimal revealing.\n\t */\n\tMinimal = 1,\n\t/**\n\t * Do not reveal the position.\n\t */\n\tNone = 2\n}\n\nexport namespace CoreNavigationCommands {\n\n\texport interface BaseCommandOptions {\n\t\tsource?: 'mouse' | 'keyboard' | string;\n\t}\n\n\texport interface MoveCommandOptions extends BaseCommandOptions {\n\t\tposition: IPosition;\n\t\tviewPosition?: IPosition;\n\t\trevealType: NavigationCommandRevealType;\n\t}\n\n\tclass BaseMoveToCommand extends CoreEditorCommand<MoveCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<MoveCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tconst cursorStateChanged = viewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n\t\t\t\t]\n\t\t\t);\n\t\t\tif (cursorStateChanged && args.revealType !== NavigationCommandRevealType.None) {\n\t\t\t\tviewModel.revealAllCursors(args.source, true, true);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const MoveTo: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new BaseMoveToCommand({\n\t\tid: '_moveTo',\n\t\tinSelectionMode: false,\n\t\tprecondition: undefined\n\t}));\n\n\texport const MoveToSelect: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new BaseMoveToCommand({\n\t\tid: '_moveToSelect',\n\t\tinSelectionMode: true,\n\t\tprecondition: undefined\n\t}));\n\n\tabstract class ColumnSelectCommand<T extends BaseCommandOptions = BaseCommandOptions> extends CoreEditorCommand<T> {\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<T>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tconst result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n\t\t\tif (result === null) {\n\t\t\t\t// invalid arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.setCursorStates(args.source, CursorChangeReason.Explicit, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n\t\t\tviewModel.setCursorColumnSelectData({\n\t\t\t\tisReal: true,\n\t\t\t\tfromViewLineNumber: result.fromLineNumber,\n\t\t\t\tfromViewVisualColumn: result.fromVisualColumn,\n\t\t\t\ttoViewLineNumber: result.toLineNumber,\n\t\t\t\ttoViewVisualColumn: result.toVisualColumn\n\t\t\t});\n\t\t\tif (result.reversed) {\n\t\t\t\tviewModel.revealTopMostCursor(args.source);\n\t\t\t} else {\n\t\t\t\tviewModel.revealBottomMostCursor(args.source);\n\t\t\t}\n\t\t}\n\n\t\tprotected abstract _getColumnSelectResult(viewModel: IViewModel, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: Partial<T>): IColumnSelectResult | null;\n\n\t}\n\n\texport interface ColumnSelectCommandOptions extends BaseCommandOptions {\n\t\tposition: IPosition;\n\t\tviewPosition: IPosition;\n\t\tmouseColumn: number;\n\t\tdoColumnSelect: boolean;\n\t}\n\n\texport const ColumnSelect: CoreEditorCommand<ColumnSelectCommandOptions> = registerEditorCommand(new class extends ColumnSelectCommand<ColumnSelectCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'columnSelect',\n\t\t\t\tprecondition: undefined\n\t\t\t});\n\t\t}\n\n\t\tprotected _getColumnSelectResult(viewModel: IViewModel, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: Partial<ColumnSelectCommandOptions>): IColumnSelectResult | null {\n\t\t\tif (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// validate `args`\n\t\t\tconst validatedPosition = viewModel.model.validatePosition(args.position);\n\t\t\tconst validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n\n\t\t\tconst fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n\t\t\tconst fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n\t\t\treturn ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n\t\t}\n\t});\n\n\texport const CursorColumnSelectLeft: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends ColumnSelectCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorColumnSelectLeft',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.LeftArrow,\n\t\t\t\t\tlinux: { primary: 0 }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprotected _getColumnSelectResult(viewModel: IViewModel, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: Partial<BaseCommandOptions>): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n\t\t}\n\t});\n\n\texport const CursorColumnSelectRight: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends ColumnSelectCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorColumnSelectRight',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.RightArrow,\n\t\t\t\t\tlinux: { primary: 0 }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprotected _getColumnSelectResult(viewModel: IViewModel, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: Partial<BaseCommandOptions>): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n\t\t}\n\t});\n\n\tclass ColumnSelectUpCommand extends ColumnSelectCommand {\n\n\t\tprivate readonly _isPaged: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { isPaged: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._isPaged = opts.isPaged;\n\t\t}\n\n\t\tprotected _getColumnSelectResult(viewModel: IViewModel, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: Partial<BaseCommandOptions>): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n\t\t}\n\t}\n\n\texport const CursorColumnSelectUp: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new ColumnSelectUpCommand({\n\t\tisPaged: false,\n\t\tid: 'cursorColumnSelectUp',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.UpArrow,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\texport const CursorColumnSelectPageUp: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new ColumnSelectUpCommand({\n\t\tisPaged: true,\n\t\tid: 'cursorColumnSelectPageUp',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.PageUp,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\tclass ColumnSelectDownCommand extends ColumnSelectCommand {\n\n\t\tprivate readonly _isPaged: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { isPaged: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._isPaged = opts.isPaged;\n\t\t}\n\n\t\tprotected _getColumnSelectResult(viewModel: IViewModel, primary: CursorState, prevColumnSelectData: IColumnSelectData, args: Partial<BaseCommandOptions>): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n\t\t}\n\t}\n\n\texport const CursorColumnSelectDown: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new ColumnSelectDownCommand({\n\t\tisPaged: false,\n\t\tid: 'cursorColumnSelectDown',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.DownArrow,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\texport const CursorColumnSelectPageDown: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new ColumnSelectDownCommand({\n\t\tisPaged: true,\n\t\tid: 'cursorColumnSelectPageDown',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.PageDown,\n\t\t\tlinux: { primary: 0 }\n\t\t}\n\t}));\n\n\texport class CursorMoveImpl extends CoreEditorCommand<CursorMove_.RawArguments> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cursorMove',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tmetadata: CursorMove_.metadata\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions & CursorMove_.RawArguments>): void {\n\t\t\tconst parsed = CursorMove_.parse(args);\n\t\t\tif (!parsed) {\n\t\t\t\t// illegal arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._runCursorMove(viewModel, args.source, parsed);\n\t\t}\n\n\t\tprivate _runCursorMove(viewModel: IViewModel, source: string | null | undefined, args: CursorMove_.ParsedArguments): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\tsource,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args)\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(source, true);\n\t\t}\n\n\t\tprivate static _move(viewModel: IViewModel, cursors: CursorState[], args: CursorMove_.ParsedArguments): PartialCursorState[] | null {\n\t\t\tconst inSelectionMode = args.select;\n\t\t\tconst value = args.value;\n\n\t\t\tswitch (args.direction) {\n\t\t\t\tcase CursorMove_.Direction.Left:\n\t\t\t\tcase CursorMove_.Direction.Right:\n\t\t\t\tcase CursorMove_.Direction.Up:\n\t\t\t\tcase CursorMove_.Direction.Down:\n\t\t\t\tcase CursorMove_.Direction.PrevBlankLine:\n\t\t\t\tcase CursorMove_.Direction.NextBlankLine:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineStart:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineColumnCenter:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineEnd:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter:\n\t\t\t\t\treturn CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n\n\t\t\t\tcase CursorMove_.Direction.ViewPortTop:\n\t\t\t\tcase CursorMove_.Direction.ViewPortBottom:\n\t\t\t\tcase CursorMove_.Direction.ViewPortCenter:\n\t\t\t\tcase CursorMove_.Direction.ViewPortIfOutside:\n\t\t\t\t\treturn CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\texport const CursorMove: CursorMoveImpl = registerEditorCommand(new CursorMoveImpl());\n\n\tconst enum Constants {\n\t\tPAGE_SIZE_MARKER = -1\n\t}\n\n\texport interface CursorMoveCommandOptions extends BaseCommandOptions {\n\t\tpageSize?: number;\n\t}\n\n\tclass CursorMoveBasedCommand extends CoreEditorCommand<CursorMoveCommandOptions> {\n\n\t\tprivate readonly _staticArgs: CursorMove_.SimpleMoveArguments;\n\n\t\tconstructor(opts: ICommandOptions & { args: CursorMove_.SimpleMoveArguments }) {\n\t\t\tsuper(opts);\n\t\t\tthis._staticArgs = opts.args;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, dynamicArgs: Partial<CursorMoveCommandOptions>): void {\n\t\t\tlet args = this._staticArgs;\n\t\t\tif (this._staticArgs.value === Constants.PAGE_SIZE_MARKER) {\n\t\t\t\t// -1 is a marker for page size\n\t\t\t\targs = {\n\t\t\t\t\tdirection: this._staticArgs.direction,\n\t\t\t\t\tunit: this._staticArgs.unit,\n\t\t\t\t\tselect: this._staticArgs.select,\n\t\t\t\t\tvalue: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\tdynamicArgs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit)\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(dynamicArgs.source, true);\n\t\t}\n\t}\n\n\texport const CursorLeft: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Left,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorLeft',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.LeftArrow,\n\t\t\tmac: { primary: KeyCode.LeftArrow, secondary: [KeyMod.WinCtrl | KeyCode.KeyB] }\n\t\t}\n\t}));\n\n\texport const CursorLeftSelect: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Left,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorLeftSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.LeftArrow\n\t\t}\n\t}));\n\n\texport const CursorRight: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Right,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorRight',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.RightArrow,\n\t\t\tmac: { primary: KeyCode.RightArrow, secondary: [KeyMod.WinCtrl | KeyCode.KeyF] }\n\t\t}\n\t}));\n\n\texport const CursorRightSelect: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Right,\n\t\t\tunit: CursorMove_.Unit.None,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorRightSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.RightArrow\n\t\t}\n\t}));\n\n\texport const CursorUp: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorUp',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.UpArrow,\n\t\t\tmac: { primary: KeyCode.UpArrow, secondary: [KeyMod.WinCtrl | KeyCode.KeyP] }\n\t\t}\n\t}));\n\n\texport const CursorUpSelect: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorUpSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.UpArrow,\n\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow],\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.UpArrow },\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.UpArrow }\n\t\t}\n\t}));\n\n\texport const CursorPageUp: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageUp',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.PageUp\n\t\t}\n\t}));\n\n\texport const CursorPageUpSelect: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageUpSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageUp\n\t\t}\n\t}));\n\n\texport const CursorDown: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorDown',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.DownArrow,\n\t\t\tmac: { primary: KeyCode.DownArrow, secondary: [KeyMod.WinCtrl | KeyCode.KeyN] }\n\t\t}\n\t}));\n\n\texport const CursorDownSelect: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: 1\n\t\t},\n\t\tid: 'cursorDownSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.DownArrow,\n\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow],\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.DownArrow },\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.DownArrow }\n\t\t}\n\t}));\n\n\texport const CursorPageDown: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: false,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageDown',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.PageDown\n\t\t}\n\t}));\n\n\texport const CursorPageDownSelect: CoreEditorCommand<CursorMoveCommandOptions> = registerEditorCommand(new CursorMoveBasedCommand({\n\t\targs: {\n\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\tselect: true,\n\t\t\tvalue: Constants.PAGE_SIZE_MARKER\n\t\t},\n\t\tid: 'cursorPageDownSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageDown\n\t\t}\n\t}));\n\n\texport interface CreateCursorCommandOptions extends MoveCommandOptions {\n\t\twholeLine?: boolean;\n\t}\n\n\texport const CreateCursor: CoreEditorCommand<CreateCursorCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<CreateCursorCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'createCursor',\n\t\t\t\tprecondition: undefined\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<CreateCursorCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet newState: PartialCursorState;\n\t\t\tif (args.wholeLine) {\n\t\t\t\tnewState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n\t\t\t} else {\n\t\t\t\tnewState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n\t\t\t}\n\n\t\t\tconst states: PartialCursorState[] = viewModel.getCursorStates();\n\n\t\t\t// Check if we should remove a cursor (sort of like a toggle)\n\t\t\tif (states.length > 1) {\n\t\t\t\tconst newModelPosition = (newState.modelState ? newState.modelState.position : null);\n\t\t\t\tconst newViewPosition = (newState.viewState ? newState.viewState.position : null);\n\n\t\t\t\tfor (let i = 0, len = states.length; i < len; i++) {\n\t\t\t\t\tconst state = states[i];\n\n\t\t\t\t\tif (newModelPosition && !state.modelState!.selection.containsPosition(newModelPosition)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newViewPosition && !state.viewState!.selection.containsPosition(newViewPosition)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// => Remove the cursor\n\t\t\t\t\tstates.splice(i, 1);\n\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\tstates\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// => Add the new cursor\n\t\t\tstates.push(newState);\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tstates\n\t\t\t);\n\t\t}\n\t});\n\n\texport const LastCursorMoveToSelect: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<MoveCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: '_lastCursorMoveToSelect',\n\t\t\t\tprecondition: undefined\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<MoveCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n\n\t\t\tconst states = viewModel.getCursorStates();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates\n\t\t\t);\n\t\t}\n\t});\n\n\tclass HomeCommand extends CoreEditorCommand<BaseCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode)\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorHome: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new HomeCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorHome',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.Home,\n\t\t\tmac: { primary: KeyCode.Home, secondary: [KeyMod.CtrlCmd | KeyCode.LeftArrow] }\n\t\t}\n\t}));\n\n\texport const CursorHomeSelect: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new HomeCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorHomeSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.Home,\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.Home, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow] }\n\t\t}\n\t}));\n\n\tclass LineStartCommand extends CoreEditorCommand<BaseCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tthis._exec(viewModel.getCursorStates())\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\n\t\tprivate _exec(cursors: CursorState[]): PartialCursorState[] {\n\t\t\tconst result: PartialCursorState[] = [];\n\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\tconst cursor = cursors[i];\n\t\t\t\tconst lineNumber = cursor.modelState.position.lineNumber;\n\t\t\t\tresult[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\texport const CursorLineStart: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new LineStartCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorLineStart',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: 0,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyA }\n\t\t}\n\t}));\n\n\texport const CursorLineStartSelect: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new LineStartCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorLineStartSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: 0,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyA }\n\t\t}\n\t}));\n\n\texport interface EndCommandOptions extends BaseCommandOptions {\n\t\tsticky?: boolean;\n\t}\n\n\tclass EndCommand extends CoreEditorCommand<EndCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<EndCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false)\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorEnd: CoreEditorCommand<EndCommandOptions> = registerEditorCommand(new EndCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorEnd',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\targs: { sticky: false },\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyCode.End,\n\t\t\tmac: { primary: KeyCode.End, secondary: [KeyMod.CtrlCmd | KeyCode.RightArrow] }\n\t\t},\n\t\tmetadata: {\n\t\t\tdescription: `Go to End`,\n\t\t\targs: [{\n\t\t\t\tname: 'args',\n\t\t\t\tschema: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t'sticky': {\n\t\t\t\t\t\t\tdescription: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t}));\n\n\texport const CursorEndSelect: CoreEditorCommand<EndCommandOptions> = registerEditorCommand(new EndCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorEndSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\targs: { sticky: false },\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.Shift | KeyCode.End,\n\t\t\tmac: { primary: KeyMod.Shift | KeyCode.End, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow] }\n\t\t},\n\t\tmetadata: {\n\t\t\tdescription: `Select to End`,\n\t\t\targs: [{\n\t\t\t\tname: 'args',\n\t\t\t\tschema: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t'sticky': {\n\t\t\t\t\t\t\tdescription: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t}));\n\n\tclass LineEndCommand extends CoreEditorCommand<BaseCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tthis._exec(viewModel, viewModel.getCursorStates())\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\n\t\tprivate _exec(viewModel: IViewModel, cursors: CursorState[]): PartialCursorState[] {\n\t\t\tconst result: PartialCursorState[] = [];\n\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\tconst cursor = cursors[i];\n\t\t\t\tconst lineNumber = cursor.modelState.position.lineNumber;\n\t\t\t\tconst maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n\t\t\t\tresult[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\texport const CursorLineEnd: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new LineEndCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorLineEnd',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: 0,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyE }\n\t\t}\n\t}));\n\n\texport const CursorLineEndSelect: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new LineEndCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorLineEndSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: 0,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyE }\n\t\t}\n\t}));\n\n\tclass TopCommand extends CoreEditorCommand<BaseCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode)\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorTop: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new TopCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorTop',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Home,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.UpArrow }\n\t\t}\n\t}));\n\n\texport const CursorTopSelect: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new TopCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorTopSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Home,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow }\n\t\t}\n\t}));\n\n\tclass BottomCommand extends CoreEditorCommand<BaseCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode)\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorBottom: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new BottomCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'cursorBottom',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.End,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.DownArrow }\n\t\t}\n\t}));\n\n\texport const CursorBottomSelect: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new BottomCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'cursorBottomSelect',\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: CORE_WEIGHT,\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.End,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow }\n\t\t}\n\t}));\n\n\texport type EditorScrollCommandOptions = EditorScroll_.RawArguments & BaseCommandOptions;\n\n\texport class EditorScrollImpl extends CoreEditorCommand<EditorScrollCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'editorScroll',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tmetadata: EditorScroll_.metadata\n\t\t\t});\n\t\t}\n\n\t\tdetermineScrollMethod(args: EditorScroll_.ParsedArguments) {\n\t\t\tconst horizontalUnits = [EditorScroll_.Unit.Column];\n\t\t\tconst verticalUnits = [\n\t\t\t\tEditorScroll_.Unit.Line,\n\t\t\t\tEditorScroll_.Unit.WrappedLine,\n\t\t\t\tEditorScroll_.Unit.Page,\n\t\t\t\tEditorScroll_.Unit.HalfPage,\n\t\t\t\tEditorScroll_.Unit.Editor,\n\t\t\t\tEditorScroll_.Unit.Column\n\t\t\t];\n\t\t\tconst horizontalDirections = [EditorScroll_.Direction.Left, EditorScroll_.Direction.Right];\n\t\t\tconst verticalDirections = [EditorScroll_.Direction.Up, EditorScroll_.Direction.Down];\n\n\t\t\tif (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n\t\t\t\treturn this._runHorizontalEditorScroll.bind(this);\n\t\t\t}\n\t\t\tif (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n\t\t\t\treturn this._runVerticalEditorScroll.bind(this);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<EditorScrollCommandOptions>): void {\n\t\t\tconst parsed = EditorScroll_.parse(args);\n\t\t\tif (!parsed) {\n\t\t\t\t// illegal arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst runEditorScroll = this.determineScrollMethod(parsed);\n\t\t\tif (!runEditorScroll) {\n\t\t\t\t// Incompatible unit and direction\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trunEditorScroll(viewModel, args.source, parsed);\n\t\t}\n\n\t\t_runVerticalEditorScroll(viewModel: IViewModel, source: string | null | undefined, args: EditorScroll_.ParsedArguments): void {\n\n\t\t\tconst desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n\n\t\t\tif (args.revealCursor) {\n\t\t\t\t// must ensure cursor is in new visible range\n\t\t\t\tconst desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\tsource,\n\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t[\n\t\t\t\t\t\tCursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tviewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, ScrollType.Smooth);\n\t\t}\n\n\t\tprivate _computeDesiredScrollTop(viewModel: IViewModel, args: EditorScroll_.ParsedArguments): number {\n\n\t\t\tif (args.unit === EditorScroll_.Unit.Line) {\n\t\t\t\t// scrolling by model lines\n\t\t\t\tconst futureViewport = viewModel.viewLayout.getFutureViewport();\n\t\t\t\tconst visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n\t\t\t\tconst visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\n\t\t\t\tlet desiredTopModelLineNumber: number;\n\t\t\t\tif (args.direction === EditorScroll_.Direction.Up) {\n\t\t\t\t\t// must go x model lines up\n\t\t\t\t\tdesiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n\t\t\t\t} else {\n\t\t\t\t\t// must go x model lines down\n\t\t\t\t\tdesiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n\t\t\t\t}\n\n\t\t\t\tconst viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n\t\t\t\treturn viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\t\t}\n\n\t\t\tif (args.unit === EditorScroll_.Unit.Editor) {\n\t\t\t\tlet desiredTopModelLineNumber = 0;\n\t\t\t\tif (args.direction === EditorScroll_.Direction.Down) {\n\t\t\t\t\tdesiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n\t\t\t\t}\n\t\t\t\treturn viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n\t\t\t}\n\n\t\t\tlet noOfLines: number;\n\t\t\tif (args.unit === EditorScroll_.Unit.Page) {\n\t\t\t\tnoOfLines = viewModel.cursorConfig.pageSize * args.value;\n\t\t\t} else if (args.unit === EditorScroll_.Unit.HalfPage) {\n\t\t\t\tnoOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n\t\t\t} else {\n\t\t\t\tnoOfLines = args.value;\n\t\t\t}\n\t\t\tconst deltaLines = (args.direction === EditorScroll_.Direction.Up ? -1 : 1) * noOfLines;\n\t\t\treturn viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n\t\t}\n\n\t\t_runHorizontalEditorScroll(viewModel: IViewModel, source: string | null | undefined, args: EditorScroll_.ParsedArguments): void {\n\t\t\tconst desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n\t\t\tviewModel.viewLayout.setScrollPosition({ scrollLeft: desiredScrollLeft }, ScrollType.Smooth);\n\t\t}\n\n\t\t_computeDesiredScrollLeft(viewModel: IViewModel, args: EditorScroll_.ParsedArguments) {\n\t\t\tconst deltaColumns = (args.direction === EditorScroll_.Direction.Left ? -1 : 1) * args.value;\n\t\t\treturn viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n\t\t}\n\t}\n\n\texport const EditorScroll: EditorScrollImpl = registerEditorCommand(new EditorScrollImpl());\n\n\texport const ScrollLineUp: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollLineUp',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.PageUp }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Up,\n\t\t\t\tby: EditorScroll_.RawUnit.WrappedLine,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollPageUp: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollPageUp',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageUp,\n\t\t\t\t\twin: { primary: KeyMod.Alt | KeyCode.PageUp },\n\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.PageUp }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Up,\n\t\t\t\tby: EditorScroll_.RawUnit.Page,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollEditorTop: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollEditorTop',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Up,\n\t\t\t\tby: EditorScroll_.RawUnit.Editor,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollLineDown: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollLineDown',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.PageDown }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Down,\n\t\t\t\tby: EditorScroll_.RawUnit.WrappedLine,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollPageDown: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollPageDown',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageDown,\n\t\t\t\t\twin: { primary: KeyMod.Alt | KeyCode.PageDown },\n\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.PageDown }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Down,\n\t\t\t\tby: EditorScroll_.RawUnit.Page,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollEditorBottom: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollEditorBottom',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Down,\n\t\t\t\tby: EditorScroll_.RawUnit.Editor,\n\t\t\t\tvalue: 1,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollLeft: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollLeft',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Left,\n\t\t\t\tby: EditorScroll_.RawUnit.Column,\n\t\t\t\tvalue: 2,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\texport const ScrollRight: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'scrollRight',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\tto: EditorScroll_.RawDirection.Right,\n\t\t\t\tby: EditorScroll_.RawUnit.Column,\n\t\t\t\tvalue: 2,\n\t\t\t\trevealCursor: false,\n\t\t\t\tselect: false,\n\t\t\t\tsource: args.source\n\t\t\t});\n\t\t}\n\t});\n\n\tclass WordCommand extends CoreEditorCommand<MoveCommandOptions> {\n\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<MoveCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n\t\t\t\t]\n\t\t\t);\n\t\t\tif (args.revealType !== NavigationCommandRevealType.None) {\n\t\t\t\tviewModel.revealAllCursors(args.source, true, true);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const WordSelect: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new WordCommand({\n\t\tinSelectionMode: false,\n\t\tid: '_wordSelect',\n\t\tprecondition: undefined\n\t}));\n\n\texport const WordSelectDrag: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new WordCommand({\n\t\tinSelectionMode: true,\n\t\tid: '_wordSelectDrag',\n\t\tprecondition: undefined\n\t}));\n\n\texport const LastCursorWordSelect: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<MoveCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'lastCursorWordSelect',\n\t\t\t\tprecondition: undefined\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<MoveCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n\n\t\t\tconst states = viewModel.getCursorStates();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tconst lastAddedState = states[lastAddedCursorIndex];\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates\n\t\t\t);\n\t\t}\n\t});\n\n\tclass LineCommand extends CoreEditorCommand<MoveCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<MoveCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n\t\t\t\t]\n\t\t\t);\n\t\t\tif (args.revealType !== NavigationCommandRevealType.None) {\n\t\t\t\tviewModel.revealAllCursors(args.source, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const LineSelect: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new LineCommand({\n\t\tinSelectionMode: false,\n\t\tid: '_lineSelect',\n\t\tprecondition: undefined\n\t}));\n\n\texport const LineSelectDrag: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new LineCommand({\n\t\tinSelectionMode: true,\n\t\tid: '_lineSelectDrag',\n\t\tprecondition: undefined\n\t}));\n\n\tclass LastCursorLineCommand extends CoreEditorCommand<MoveCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<MoveCommandOptions>): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n\n\t\t\tconst states = viewModel.getCursorStates();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates\n\t\t\t);\n\t\t}\n\t}\n\n\texport const LastCursorLineSelect: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new LastCursorLineCommand({\n\t\tinSelectionMode: false,\n\t\tid: 'lastCursorLineSelect',\n\t\tprecondition: undefined\n\t}));\n\n\texport const LastCursorLineSelectDrag: CoreEditorCommand<MoveCommandOptions> = registerEditorCommand(new LastCursorLineCommand({\n\t\tinSelectionMode: true,\n\t\tid: 'lastCursorLineSelectDrag',\n\t\tprecondition: undefined\n\t}));\n\n\texport const CancelSelection: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'cancelSelection',\n\t\t\t\tprecondition: EditorContextKeys.hasNonEmptySelection,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n\t\t\t\t]\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t});\n\n\texport const RemoveSecondaryCursors: CoreEditorCommand<BaseCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<BaseCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'removeSecondaryCursors',\n\t\t\t\tprecondition: EditorContextKeys.hasMultipleSelections,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT + 1,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<BaseCommandOptions>): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tviewModel.getPrimaryCursorState()\n\t\t\t\t]\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t\tstatus(nls.localize('removedCursor', \"Removed secondary cursors\"));\n\t\t}\n\t});\n\n\texport type RevealLineCommandOptions = RevealLine_.RawArguments & BaseCommandOptions;\n\n\texport const RevealLine: CoreEditorCommand<RevealLineCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<RevealLineCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'revealLine',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tmetadata: RevealLine_.metadata\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<RevealLineCommandOptions>): void {\n\t\t\tconst revealLineArg = args;\n\t\t\tconst lineNumberArg = revealLineArg.lineNumber || 0;\n\t\t\tlet lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n\t\t\tif (lineNumber < 1) {\n\t\t\t\tlineNumber = 1;\n\t\t\t}\n\t\t\tconst lineCount = viewModel.model.getLineCount();\n\t\t\tif (lineNumber > lineCount) {\n\t\t\t\tlineNumber = lineCount;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\tlineNumber, 1,\n\t\t\t\tlineNumber, viewModel.model.getLineMaxColumn(lineNumber)\n\t\t\t);\n\n\t\t\tlet revealAt = VerticalRevealType.Simple;\n\t\t\tif (revealLineArg.at) {\n\t\t\t\tswitch (revealLineArg.at) {\n\t\t\t\t\tcase RevealLine_.RawAtArgument.Top:\n\t\t\t\t\t\trevealAt = VerticalRevealType.Top;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RevealLine_.RawAtArgument.Center:\n\t\t\t\t\t\trevealAt = VerticalRevealType.Center;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RevealLine_.RawAtArgument.Bottom:\n\t\t\t\t\t\trevealAt = VerticalRevealType.Bottom;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n\n\t\t\tviewModel.revealRange(args.source, false, viewRange, revealAt, ScrollType.Smooth);\n\t\t}\n\t});\n\n\texport const SelectAll = new class extends EditorOrNativeTextInputCommand {\n\t\tconstructor() {\n\t\t\tsuper(SelectAllCommand);\n\t\t}\n\t\tpublic runDOMCommand(activeElement: Element): void {\n\t\t\tif (isFirefox) {\n\t\t\t\t(<HTMLInputElement>activeElement).focus();\n\t\t\t\t(<HTMLInputElement>activeElement).select();\n\t\t\t}\n\n\t\t\tactiveElement.ownerDocument.execCommand('selectAll');\n\t\t}\n\t\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: unknown): void {\n\t\t\tconst viewModel = editor._getViewModel();\n\t\t\tif (!viewModel) {\n\t\t\t\t// the editor has no view => has no cursors\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runCoreEditorCommand(viewModel, args);\n\t\t}\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: unknown): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\t'keyboard',\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n\t\t\t\t]\n\t\t\t);\n\t\t}\n\t}();\n\n\texport interface SetSelectionCommandOptions extends BaseCommandOptions {\n\t\tselection: ISelection;\n\t}\n\n\texport const SetSelection: CoreEditorCommand<SetSelectionCommandOptions> = registerEditorCommand(new class extends CoreEditorCommand<SetSelectionCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'setSelection',\n\t\t\t\tprecondition: undefined\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(viewModel: IViewModel, args: Partial<SetSelectionCommandOptions>): void {\n\t\t\tif (!args.selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorState.fromModelSelection(args.selection)\n\t\t\t\t]\n\t\t\t);\n\t\t}\n\t});\n}\n\nconst columnSelectionCondition = ContextKeyExpr.and(\n\tEditorContextKeys.textInputFocus,\n\tEditorContextKeys.columnSelection\n);\nfunction registerColumnSelection(id: string, keybinding: number): void {\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: id,\n\t\tprimary: keybinding,\n\t\twhen: columnSelectionCondition,\n\t\tweight: CORE_WEIGHT + 1\n\t});\n}\n\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, KeyMod.Shift | KeyCode.LeftArrow);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, KeyMod.Shift | KeyCode.RightArrow);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, KeyMod.Shift | KeyCode.UpArrow);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, KeyMod.Shift | KeyCode.PageUp);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, KeyMod.Shift | KeyCode.DownArrow);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, KeyMod.Shift | KeyCode.PageDown);\n\nfunction registerCommand<T extends Command>(command: T): T {\n\tcommand.register();\n\treturn command;\n}\n\nexport namespace CoreEditingCommands {\n\n\texport abstract class CoreEditingCommand extends EditorCommand {\n\t\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: unknown): void {\n\t\t\tconst viewModel = editor._getViewModel();\n\t\t\tif (!viewModel) {\n\t\t\t\t// the editor has no view => has no cursors\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runCoreEditingCommand(editor, viewModel, args || {});\n\t\t}\n\n\t\tpublic abstract runCoreEditingCommand(editor: ICodeEditor, viewModel: IViewModel, args: unknown): void;\n\t}\n\n\texport const LineBreakInsert: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'lineBreakInsert',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyO }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, viewModel: IViewModel, args: unknown): void {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, EnterOperation.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n\t\t}\n\t});\n\n\texport const Outdent: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'outdent',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus\n\t\t\t\t\t),\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.Tab\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, viewModel: IViewModel, args: unknown): void {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t});\n\n\texport const Tab: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'tab',\n\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus\n\t\t\t\t\t),\n\t\t\t\t\tprimary: KeyCode.Tab\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, viewModel: IViewModel, args: unknown): void {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t});\n\n\texport const DeleteLeft: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'deleteLeft',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Backspace,\n\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Backspace],\n\t\t\t\t\tmac: { primary: KeyCode.Backspace, secondary: [KeyMod.Shift | KeyCode.Backspace, KeyMod.WinCtrl | KeyCode.KeyH, KeyMod.WinCtrl | KeyCode.Backspace] }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, viewModel: IViewModel, args: unknown): void {\n\t\t\tconst [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n\t\t\tif (shouldPushStackElementBefore) {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t}\n\t\t\teditor.executeCommands(this.id, commands);\n\t\t\tviewModel.setPrevEditOperationType(EditOperationType.DeletingLeft);\n\t\t}\n\t});\n\n\texport const DeleteRight: EditorCommand = registerEditorCommand(new class extends CoreEditingCommand {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'deleteRight',\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Delete,\n\t\t\t\t\tmac: { primary: KeyCode.Delete, secondary: [KeyMod.WinCtrl | KeyCode.KeyD, KeyMod.WinCtrl | KeyCode.Delete] }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditingCommand(editor: ICodeEditor, viewModel: IViewModel, args: unknown): void {\n\t\t\tconst [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n\t\t\tif (shouldPushStackElementBefore) {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t}\n\t\t\teditor.executeCommands(this.id, commands);\n\t\t\tviewModel.setPrevEditOperationType(EditOperationType.DeletingRight);\n\t\t}\n\t});\n\n\texport const Undo = new class extends EditorOrNativeTextInputCommand {\n\t\tconstructor() {\n\t\t\tsuper(UndoCommand);\n\t\t}\n\t\tpublic runDOMCommand(activeElement: Element): void {\n\t\t\tactiveElement.ownerDocument.execCommand('undo');\n\t\t}\n\t\tpublic runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: unknown): void | Promise<void> {\n\t\t\tif (!editor.hasModel() || editor.getOption(EditorOption.readOnly) === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn editor.getModel().undo();\n\t\t}\n\t}();\n\n\texport const Redo = new class extends EditorOrNativeTextInputCommand {\n\t\tconstructor() {\n\t\t\tsuper(RedoCommand);\n\t\t}\n\t\tpublic runDOMCommand(activeElement: Element): void {\n\t\t\tactiveElement.ownerDocument.execCommand('redo');\n\t\t}\n\t\tpublic runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: unknown): void | Promise<void> {\n\t\t\tif (!editor.hasModel() || editor.getOption(EditorOption.readOnly) === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn editor.getModel().redo();\n\t\t}\n\t}();\n}\n\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n\n\tprivate readonly _handlerId: string;\n\n\tconstructor(id: string, handlerId: string, metadata?: ICommandMetadata) {\n\t\tsuper({\n\t\t\tid: id,\n\t\t\tprecondition: undefined,\n\t\t\tmetadata\n\t\t});\n\t\tthis._handlerId = handlerId;\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: unknown): void {\n\t\tconst editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.trigger('keyboard', this._handlerId, args);\n\t}\n}\n\nfunction registerOverwritableCommand(handlerId: string, metadata?: ICommandMetadata): void {\n\tregisterCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n\tregisterCommand(new EditorHandlerCommand(handlerId, handlerId, metadata));\n}\n\nregisterOverwritableCommand(Handler.Type, {\n\tdescription: `Type`,\n\targs: [{\n\t\tname: 'args',\n\t\tschema: {\n\t\t\t'type': 'object',\n\t\t\t'required': ['text'],\n\t\t\t'properties': {\n\t\t\t\t'text': {\n\t\t\t\t\t'type': 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t}]\n});\nregisterOverwritableCommand(Handler.ReplacePreviousChar);\nregisterOverwritableCommand(Handler.CompositionType);\nregisterOverwritableCommand(Handler.CompositionStart);\nregisterOverwritableCommand(Handler.CompositionEnd);\nregisterOverwritableCommand(Handler.Paste);\nregisterOverwritableCommand(Handler.Cut);\n"],
  "mappings": "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",
  "names": ["EditorScroll_", "Direction", "Unit", "RevealLine_", "NavigationCommandRevealType", "CoreNavigationCommands", "Constants", "CoreEditingCommands"]
}
