{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/coreCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isFirefox } from \"../../base/browser/browser.js\";\nimport { getActiveElement, isEditableElement } from \"../../base/browser/dom.js\";\nimport { status } from \"../../base/browser/ui/aria/aria.js\";\nimport { KeyCode, KeyMod } from \"../../base/common/keyCodes.js\";\nimport * as types from \"../../base/common/types.js\";\nimport * as nls from \"../../nls.js\";\nimport type { ICommandMetadata } from \"../../platform/commands/common/commands.js\";\nimport { ContextKeyExpr } from \"../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../platform/instantiation/common/instantiation.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { EditorOption } from \"../common/config/editorOptions.js\";\nimport { type IPosition, Position } from \"../common/core/position.js\";\nimport { Range } from \"../common/core/range.js\";\nimport type { ISelection } from \"../common/core/selection.js\";\nimport {\n\tColumnSelection,\n\ttype IColumnSelectResult,\n} from \"../common/cursor/cursorColumnSelection.js\";\nimport { DeleteOperations } from \"../common/cursor/cursorDeleteOperations.js\";\nimport {\n\tCursorMoveCommands,\n\tCursorMove as CursorMove_,\n} from \"../common/cursor/cursorMoveCommands.js\";\nimport { EnterOperation } from \"../common/cursor/cursorTypeEditOperations.js\";\nimport { TypeOperations } from \"../common/cursor/cursorTypeOperations.js\";\nimport {\n\tCursorState,\n\tEditOperationType,\n\ttype IColumnSelectData,\n\ttype PartialCursorState,\n} from \"../common/cursorCommon.js\";\nimport { CursorChangeReason } from \"../common/cursorEvents.js\";\nimport { Handler, ScrollType } from \"../common/editorCommon.js\";\nimport { EditorContextKeys } from \"../common/editorContextKeys.js\";\nimport { VerticalRevealType } from \"../common/viewEvents.js\";\nimport type { IViewModel } from \"../common/viewModel.js\";\nimport type { ICodeEditor } from \"./editorBrowser.js\";\nimport {\n\tCommand,\n\tEditorCommand,\n\ttype ICommandOptions,\n\ttype MultiCommand,\n\tRedoCommand,\n\tSelectAllCommand,\n\tUndoCommand,\n\tregisterEditorCommand,\n} from \"./editorExtensions.js\";\nimport { ICodeEditorService } from \"./services/codeEditorService.js\";\n\nconst CORE_WEIGHT = KeybindingWeight.EditorCore;\n\nexport abstract class CoreEditorCommand<T> extends EditorCommand {\n\tpublic runEditorCommand(\n\t\taccessor: ServicesAccessor | null,\n\t\teditor: ICodeEditor,\n\t\targs?: Partial<T> | null,\n\t): void {\n\t\tconst viewModel = editor._getViewModel();\n\t\tif (!viewModel) {\n\t\t\t// the editor has no view => has no cursors\n\t\t\treturn;\n\t\t}\n\t\tthis.runCoreEditorCommand(viewModel, args || {});\n\t}\n\n\tpublic abstract runCoreEditorCommand(\n\t\tviewModel: IViewModel,\n\t\targs: Partial<T>,\n\t): void;\n}\n\nexport namespace EditorScroll_ {\n\tconst isEditorScrollArgs = (arg: any): boolean => {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst scrollArg: RawArguments = arg;\n\n\t\tif (!types.isString(scrollArg.to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!types.isUndefined(scrollArg.value) &&\n\t\t\t!types.isNumber(scrollArg.value)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!types.isUndefined(scrollArg.revealCursor) &&\n\t\t\t!types.isBoolean(scrollArg.revealCursor)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const metadata: ICommandMetadata = {\n\t\tdescription: \"Scroll editor in the given direction\",\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: \"Editor scroll argument object\",\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n\t\t\t\tconstraint: isEditorScrollArgs,\n\t\t\t\tschema: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\trequired: [\"to\"],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tto: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tenum: [\"up\", \"down\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tby: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tenum: [\n\t\t\t\t\t\t\t\t\"line\",\n\t\t\t\t\t\t\t\t\"wrappedLine\",\n\t\t\t\t\t\t\t\t\"page\",\n\t\t\t\t\t\t\t\t\"halfPage\",\n\t\t\t\t\t\t\t\t\"editor\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\tdefault: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\trevealCursor: {\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\t/**\n\t * Directions in the view for editor scroll command.\n\t */\n\texport const RawDirection = {\n\t\tUp: \"up\",\n\t\tRight: \"right\",\n\t\tDown: \"down\",\n\t\tLeft: \"left\",\n\t};\n\n\t/**\n\t * Units for editor scroll 'by' argument\n\t */\n\texport const RawUnit = {\n\t\tLine: \"line\",\n\t\tWrappedLine: \"wrappedLine\",\n\t\tPage: \"page\",\n\t\tHalfPage: \"halfPage\",\n\t\tEditor: \"editor\",\n\t\tColumn: \"column\",\n\t};\n\n\t/**\n\t * Arguments for editor scroll command\n\t */\n\texport interface RawArguments {\n\t\tto: string;\n\t\tby?: string;\n\t\tvalue?: number;\n\t\trevealCursor?: boolean;\n\t\tselect?: boolean;\n\t}\n\n\texport function parse(args: Partial<RawArguments>): ParsedArguments | null {\n\t\tlet direction: Direction;\n\t\tswitch (args.to) {\n\t\t\tcase RawDirection.Up:\n\t\t\t\tdirection = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Right:\n\t\t\t\tdirection = Direction.Right;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Down:\n\t\t\t\tdirection = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Left:\n\t\t\t\tdirection = Direction.Left;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Illegal arguments\n\t\t\t\treturn null;\n\t\t}\n\n\t\tlet unit: Unit;\n\t\tswitch (args.by) {\n\t\t\tcase RawUnit.Line:\n\t\t\t\tunit = Unit.Line;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.WrappedLine:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Page:\n\t\t\t\tunit = Unit.Page;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.HalfPage:\n\t\t\t\tunit = Unit.HalfPage;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Editor:\n\t\t\t\tunit = Unit.Editor;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Column:\n\t\t\t\tunit = Unit.Column;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t}\n\n\t\tconst value = Math.floor(args.value || 1);\n\t\tconst revealCursor = !!args.revealCursor;\n\n\t\treturn {\n\t\t\tdirection: direction,\n\t\t\tunit: unit,\n\t\t\tvalue: value,\n\t\t\trevealCursor: revealCursor,\n\t\t\tselect: !!args.select,\n\t\t};\n\t}\n\n\texport interface ParsedArguments {\n\t\tdirection: Direction;\n\t\tunit: Unit;\n\t\tvalue: number;\n\t\trevealCursor: boolean;\n\t\tselect: boolean;\n\t}\n\n\texport enum Direction {\n\t\tUp = 1,\n\t\tRight = 2,\n\t\tDown = 3,\n\t\tLeft = 4,\n\t}\n\n\texport enum Unit {\n\t\tLine = 1,\n\t\tWrappedLine = 2,\n\t\tPage = 3,\n\t\tHalfPage = 4,\n\t\tEditor = 5,\n\t\tColumn = 6,\n\t}\n}\n\nexport namespace RevealLine_ {\n\tconst isRevealLineArgs = (arg: any): boolean => {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst reveaLineArg: RawArguments = arg;\n\n\t\tif (\n\t\t\t!types.isNumber(reveaLineArg.lineNumber) &&\n\t\t\t!types.isString(reveaLineArg.lineNumber)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!types.isUndefined(reveaLineArg.at) &&\n\t\t\t!types.isString(reveaLineArg.at)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const metadata: ICommandMetadata = {\n\t\tdescription: \"Reveal the given line at the given logical position\",\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: \"Reveal line argument object\",\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n\t\t\t\tconstraint: isRevealLineArgs,\n\t\t\t\tschema: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\trequired: [\"lineNumber\"],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tlineNumber: {\n\t\t\t\t\t\t\ttype: [\"number\", \"string\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tat: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tenum: [\"top\", \"center\", \"bottom\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\t/**\n\t * Arguments for reveal line command\n\t */\n\texport interface RawArguments {\n\t\tlineNumber?: number | string;\n\t\tat?: string;\n\t}\n\n\t/**\n\t * Values for reveal line 'at' argument\n\t */\n\texport const RawAtArgument = {\n\t\tTop: \"top\",\n\t\tCenter: \"center\",\n\t\tBottom: \"bottom\",\n\t};\n}\n\nabstract class EditorOrNativeTextInputCommand {\n\tconstructor(target: MultiCommand) {\n\t\t// 1. handle case when focus is in editor.\n\t\ttarget.addImplementation(\n\t\t\t10000,\n\t\t\t\"code-editor\",\n\t\t\t(accessor: ServicesAccessor, args: unknown) => {\n\t\t\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\t\t\tconst focusedEditor = accessor\n\t\t\t\t\t.get(ICodeEditorService)\n\t\t\t\t\t.getFocusedCodeEditor();\n\t\t\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\t\t\treturn this._runEditorCommand(\n\t\t\t\t\t\taccessor,\n\t\t\t\t\t\tfocusedEditor,\n\t\t\t\t\t\targs,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t);\n\n\t\t// 2. handle case when focus is in some other `input` / `textarea`.\n\t\ttarget.addImplementation(\n\t\t\t1000,\n\t\t\t\"generic-dom-input-textarea\",\n\t\t\t(accessor: ServicesAccessor, args: unknown) => {\n\t\t\t\t// Only if focused on an element that allows for entering text\n\t\t\t\tconst activeElement = getActiveElement();\n\t\t\t\tif (activeElement && isEditableElement(activeElement)) {\n\t\t\t\t\tthis.runDOMCommand(activeElement);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t);\n\n\t\t// 3. (default) handle case when focus is somewhere else.\n\t\ttarget.addImplementation(\n\t\t\t0,\n\t\t\t\"generic-dom\",\n\t\t\t(accessor: ServicesAccessor, args: unknown) => {\n\t\t\t\t// Redirecting to active editor\n\t\t\t\tconst activeEditor = accessor\n\t\t\t\t\t.get(ICodeEditorService)\n\t\t\t\t\t.getActiveCodeEditor();\n\t\t\t\tif (activeEditor) {\n\t\t\t\t\tactiveEditor.focus();\n\t\t\t\t\treturn this._runEditorCommand(accessor, activeEditor, args);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic _runEditorCommand(\n\t\taccessor: ServicesAccessor | null,\n\t\teditor: ICodeEditor,\n\t\targs: unknown,\n\t): boolean | Promise<void> {\n\t\tconst result = this.runEditorCommand(accessor, editor, args);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic abstract runDOMCommand(activeElement: Element): void;\n\tpublic abstract runEditorCommand(\n\t\taccessor: ServicesAccessor | null,\n\t\teditor: ICodeEditor,\n\t\targs: unknown,\n\t): void | Promise<void>;\n}\n\nexport enum NavigationCommandRevealType {\n\t/**\n\t * Do regular revealing.\n\t */\n\tRegular = 0,\n\t/**\n\t * Do only minimal revealing.\n\t */\n\tMinimal = 1,\n\t/**\n\t * Do not reveal the position.\n\t */\n\tNone = 2,\n}\n\nexport namespace CoreNavigationCommands {\n\texport interface BaseCommandOptions {\n\t\tsource?: \"mouse\" | \"keyboard\" | string;\n\t}\n\n\texport interface MoveCommandOptions extends BaseCommandOptions {\n\t\tposition: IPosition;\n\t\tviewPosition?: IPosition;\n\t\trevealType: NavigationCommandRevealType;\n\t}\n\n\tclass BaseMoveToCommand extends CoreEditorCommand<MoveCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<MoveCommandOptions>,\n\t\t): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tconst cursorStateChanged = viewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.moveTo(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t\t\targs.position,\n\t\t\t\t\t\targs.viewPosition,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t);\n\t\t\tif (\n\t\t\t\tcursorStateChanged &&\n\t\t\t\targs.revealType !== NavigationCommandRevealType.None\n\t\t\t) {\n\t\t\t\tviewModel.revealAllCursors(args.source, true, true);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const MoveTo: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew BaseMoveToCommand({\n\t\t\t\tid: \"_moveTo\",\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\texport const MoveToSelect: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew BaseMoveToCommand({\n\t\t\t\tid: \"_moveToSelect\",\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\tabstract class ColumnSelectCommand<\n\t\tT extends BaseCommandOptions = BaseCommandOptions,\n\t> extends CoreEditorCommand<T> {\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<T>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tconst result = this._getColumnSelectResult(\n\t\t\t\tviewModel,\n\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\tviewModel.getCursorColumnSelectData(),\n\t\t\t\targs,\n\t\t\t);\n\t\t\tif (result === null) {\n\t\t\t\t// invalid arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tresult.viewStates.map((viewState) =>\n\t\t\t\t\tCursorState.fromViewState(viewState),\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.setCursorColumnSelectData({\n\t\t\t\tisReal: true,\n\t\t\t\tfromViewLineNumber: result.fromLineNumber,\n\t\t\t\tfromViewVisualColumn: result.fromVisualColumn,\n\t\t\t\ttoViewLineNumber: result.toLineNumber,\n\t\t\t\ttoViewVisualColumn: result.toVisualColumn,\n\t\t\t});\n\t\t\tif (result.reversed) {\n\t\t\t\tviewModel.revealTopMostCursor(args.source);\n\t\t\t} else {\n\t\t\t\tviewModel.revealBottomMostCursor(args.source);\n\t\t\t}\n\t\t}\n\n\t\tprotected abstract _getColumnSelectResult(\n\t\t\tviewModel: IViewModel,\n\t\t\tprimary: CursorState,\n\t\t\tprevColumnSelectData: IColumnSelectData,\n\t\t\targs: Partial<T>,\n\t\t): IColumnSelectResult | null;\n\t}\n\n\texport interface ColumnSelectCommandOptions extends BaseCommandOptions {\n\t\tposition: IPosition;\n\t\tviewPosition: IPosition;\n\t\tmouseColumn: number;\n\t\tdoColumnSelect: boolean;\n\t}\n\n\texport const ColumnSelect: CoreEditorCommand<ColumnSelectCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends ColumnSelectCommand<ColumnSelectCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"columnSelect\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tprotected _getColumnSelectResult(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\tprimary: CursorState,\n\t\t\t\t\tprevColumnSelectData: IColumnSelectData,\n\t\t\t\t\targs: Partial<ColumnSelectCommandOptions>,\n\t\t\t\t): IColumnSelectResult | null {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof args.position === \"undefined\" ||\n\t\t\t\t\t\ttypeof args.viewPosition === \"undefined\" ||\n\t\t\t\t\t\ttypeof args.mouseColumn === \"undefined\"\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\t// validate `args`\n\t\t\t\t\tconst validatedPosition = viewModel.model.validatePosition(\n\t\t\t\t\t\targs.position,\n\t\t\t\t\t);\n\t\t\t\t\tconst validatedViewPosition =\n\t\t\t\t\t\tviewModel.coordinatesConverter.validateViewPosition(\n\t\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\t\targs.viewPosition.lineNumber,\n\t\t\t\t\t\t\t\targs.viewPosition.column,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tvalidatedPosition,\n\t\t\t\t\t\t);\n\n\t\t\t\t\tconst fromViewLineNumber = args.doColumnSelect\n\t\t\t\t\t\t? prevColumnSelectData.fromViewLineNumber\n\t\t\t\t\t\t: validatedViewPosition.lineNumber;\n\t\t\t\t\tconst fromViewVisualColumn = args.doColumnSelect\n\t\t\t\t\t\t? prevColumnSelectData.fromViewVisualColumn\n\t\t\t\t\t\t: args.mouseColumn - 1;\n\t\t\t\t\treturn ColumnSelection.columnSelect(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tfromViewLineNumber,\n\t\t\t\t\t\tfromViewVisualColumn,\n\t\t\t\t\t\tvalidatedViewPosition.lineNumber,\n\t\t\t\t\t\targs.mouseColumn - 1,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const CursorColumnSelectLeft: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends ColumnSelectCommand {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"cursorColumnSelectLeft\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary:\n\t\t\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\t\t\tKeyCode.LeftArrow,\n\t\t\t\t\t\t\tlinux: { primary: 0 },\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tprotected _getColumnSelectResult(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\tprimary: CursorState,\n\t\t\t\t\tprevColumnSelectData: IColumnSelectData,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): IColumnSelectResult {\n\t\t\t\t\treturn ColumnSelection.columnSelectLeft(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tprevColumnSelectData,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const CursorColumnSelectRight: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends ColumnSelectCommand {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"cursorColumnSelectRight\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary:\n\t\t\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\t\t\tKeyCode.RightArrow,\n\t\t\t\t\t\t\tlinux: { primary: 0 },\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tprotected _getColumnSelectResult(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\tprimary: CursorState,\n\t\t\t\t\tprevColumnSelectData: IColumnSelectData,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): IColumnSelectResult {\n\t\t\t\t\treturn ColumnSelection.columnSelectRight(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tprevColumnSelectData,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\tclass ColumnSelectUpCommand extends ColumnSelectCommand {\n\t\tprivate readonly _isPaged: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { isPaged: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._isPaged = opts.isPaged;\n\t\t}\n\n\t\tprotected _getColumnSelectResult(\n\t\t\tviewModel: IViewModel,\n\t\t\tprimary: CursorState,\n\t\t\tprevColumnSelectData: IColumnSelectData,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectUp(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel,\n\t\t\t\tprevColumnSelectData,\n\t\t\t\tthis._isPaged,\n\t\t\t);\n\t\t}\n\t}\n\n\texport const CursorColumnSelectUp: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew ColumnSelectUpCommand({\n\t\t\t\tisPaged: false,\n\t\t\t\tid: \"cursorColumnSelectUp\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyCode.UpArrow,\n\t\t\t\t\tlinux: { primary: 0 },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorColumnSelectPageUp: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew ColumnSelectUpCommand({\n\t\t\t\tisPaged: true,\n\t\t\t\tid: \"cursorColumnSelectPageUp\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyCode.PageUp,\n\t\t\t\t\tlinux: { primary: 0 },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\tclass ColumnSelectDownCommand extends ColumnSelectCommand {\n\t\tprivate readonly _isPaged: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { isPaged: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._isPaged = opts.isPaged;\n\t\t}\n\n\t\tprotected _getColumnSelectResult(\n\t\t\tviewModel: IViewModel,\n\t\t\tprimary: CursorState,\n\t\t\tprevColumnSelectData: IColumnSelectData,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): IColumnSelectResult {\n\t\t\treturn ColumnSelection.columnSelectDown(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel,\n\t\t\t\tprevColumnSelectData,\n\t\t\t\tthis._isPaged,\n\t\t\t);\n\t\t}\n\t}\n\n\texport const CursorColumnSelectDown: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew ColumnSelectDownCommand({\n\t\t\t\tisPaged: false,\n\t\t\t\tid: \"cursorColumnSelectDown\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyCode.DownArrow,\n\t\t\t\t\tlinux: { primary: 0 },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorColumnSelectPageDown: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew ColumnSelectDownCommand({\n\t\t\t\tisPaged: true,\n\t\t\t\tid: \"cursorColumnSelectPageDown\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary:\n\t\t\t\t\t\tKeyMod.CtrlCmd |\n\t\t\t\t\t\tKeyMod.Shift |\n\t\t\t\t\t\tKeyMod.Alt |\n\t\t\t\t\t\tKeyCode.PageDown,\n\t\t\t\t\tlinux: { primary: 0 },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport class CursorMoveImpl extends CoreEditorCommand<CursorMove_.RawArguments> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"cursorMove\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tmetadata: CursorMove_.metadata,\n\t\t\t});\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<BaseCommandOptions & CursorMove_.RawArguments>,\n\t\t): void {\n\t\t\tconst parsed = CursorMove_.parse(args);\n\t\t\tif (!parsed) {\n\t\t\t\t// illegal arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._runCursorMove(viewModel, args.source, parsed);\n\t\t}\n\n\t\tprivate _runCursorMove(\n\t\t\tviewModel: IViewModel,\n\t\t\tsource: string | null | undefined,\n\t\t\targs: CursorMove_.ParsedArguments,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\tsource,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveImpl._move(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getCursorStates(),\n\t\t\t\t\targs,\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(source, true);\n\t\t}\n\n\t\tprivate static _move(\n\t\t\tviewModel: IViewModel,\n\t\t\tcursors: CursorState[],\n\t\t\targs: CursorMove_.ParsedArguments,\n\t\t): PartialCursorState[] | null {\n\t\t\tconst inSelectionMode = args.select;\n\t\t\tconst value = args.value;\n\n\t\t\tswitch (args.direction) {\n\t\t\t\tcase CursorMove_.Direction.Left:\n\t\t\t\tcase CursorMove_.Direction.Right:\n\t\t\t\tcase CursorMove_.Direction.Up:\n\t\t\t\tcase CursorMove_.Direction.Down:\n\t\t\t\tcase CursorMove_.Direction.PrevBlankLine:\n\t\t\t\tcase CursorMove_.Direction.NextBlankLine:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineStart:\n\t\t\t\tcase CursorMove_.Direction\n\t\t\t\t\t.WrappedLineFirstNonWhitespaceCharacter:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineColumnCenter:\n\t\t\t\tcase CursorMove_.Direction.WrappedLineEnd:\n\t\t\t\tcase CursorMove_.Direction\n\t\t\t\t\t.WrappedLineLastNonWhitespaceCharacter:\n\t\t\t\t\treturn CursorMoveCommands.simpleMove(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\targs.direction,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\targs.unit,\n\t\t\t\t\t);\n\n\t\t\t\tcase CursorMove_.Direction.ViewPortTop:\n\t\t\t\tcase CursorMove_.Direction.ViewPortBottom:\n\t\t\t\tcase CursorMove_.Direction.ViewPortCenter:\n\t\t\t\tcase CursorMove_.Direction.ViewPortIfOutside:\n\t\t\t\t\treturn CursorMoveCommands.viewportMove(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\targs.direction,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\texport const CursorMove: CursorMoveImpl = registerEditorCommand(\n\t\tnew CursorMoveImpl(),\n\t);\n\n\tenum Constants {\n\t\tPAGE_SIZE_MARKER = -1,\n\t}\n\n\texport interface CursorMoveCommandOptions extends BaseCommandOptions {\n\t\tpageSize?: number;\n\t}\n\n\tclass CursorMoveBasedCommand extends CoreEditorCommand<CursorMoveCommandOptions> {\n\t\tprivate readonly _staticArgs: CursorMove_.SimpleMoveArguments;\n\n\t\tconstructor(\n\t\t\topts: ICommandOptions & { args: CursorMove_.SimpleMoveArguments },\n\t\t) {\n\t\t\tsuper(opts);\n\t\t\tthis._staticArgs = opts.args;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\tdynamicArgs: Partial<CursorMoveCommandOptions>,\n\t\t): void {\n\t\t\tlet args = this._staticArgs;\n\t\t\tif (this._staticArgs.value === Constants.PAGE_SIZE_MARKER) {\n\t\t\t\t// -1 is a marker for page size\n\t\t\t\targs = {\n\t\t\t\t\tdirection: this._staticArgs.direction,\n\t\t\t\t\tunit: this._staticArgs.unit,\n\t\t\t\t\tselect: this._staticArgs.select,\n\t\t\t\t\tvalue:\n\t\t\t\t\t\tdynamicArgs.pageSize || viewModel.cursorConfig.pageSize,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\tdynamicArgs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.simpleMove(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getCursorStates(),\n\t\t\t\t\targs.direction,\n\t\t\t\t\targs.select,\n\t\t\t\t\targs.value,\n\t\t\t\t\targs.unit,\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(dynamicArgs.source, true);\n\t\t}\n\t}\n\n\texport const CursorLeft: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Left,\n\t\t\t\t\tunit: CursorMove_.Unit.None,\n\t\t\t\t\tselect: false,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorLeft\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.LeftArrow,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyCode.LeftArrow,\n\t\t\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyB],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorLeftSelect: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Left,\n\t\t\t\t\tunit: CursorMove_.Unit.None,\n\t\t\t\t\tselect: true,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorLeftSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.LeftArrow,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorRight: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Right,\n\t\t\t\t\tunit: CursorMove_.Unit.None,\n\t\t\t\t\tselect: false,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorRight\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.RightArrow,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyCode.RightArrow,\n\t\t\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyF],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorRightSelect: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Right,\n\t\t\t\t\tunit: CursorMove_.Unit.None,\n\t\t\t\t\tselect: true,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorRightSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.RightArrow,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorUp: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: false,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorUp\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.UpArrow,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyCode.UpArrow,\n\t\t\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyP],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorUpSelect: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: true,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorUpSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\t\tsecondary: [\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\t\t],\n\t\t\t\t\tmac: { primary: KeyMod.Shift | KeyCode.UpArrow },\n\t\t\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.UpArrow },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorPageUp: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: false,\n\t\t\t\t\tvalue: Constants.PAGE_SIZE_MARKER,\n\t\t\t\t},\n\t\t\t\tid: \"cursorPageUp\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.PageUp,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorPageUpSelect: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Up,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: true,\n\t\t\t\t\tvalue: Constants.PAGE_SIZE_MARKER,\n\t\t\t\t},\n\t\t\t\tid: \"cursorPageUpSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.PageUp,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorDown: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: false,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorDown\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.DownArrow,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyCode.DownArrow,\n\t\t\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyN],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorDownSelect: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: true,\n\t\t\t\t\tvalue: 1,\n\t\t\t\t},\n\t\t\t\tid: \"cursorDownSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\t\tsecondary: [\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\t\t],\n\t\t\t\t\tmac: { primary: KeyMod.Shift | KeyCode.DownArrow },\n\t\t\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.DownArrow },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorPageDown: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: false,\n\t\t\t\t\tvalue: Constants.PAGE_SIZE_MARKER,\n\t\t\t\t},\n\t\t\t\tid: \"cursorPageDown\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.PageDown,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorPageDownSelect: CoreEditorCommand<CursorMoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew CursorMoveBasedCommand({\n\t\t\t\targs: {\n\t\t\t\t\tdirection: CursorMove_.Direction.Down,\n\t\t\t\t\tunit: CursorMove_.Unit.WrappedLine,\n\t\t\t\t\tselect: true,\n\t\t\t\t\tvalue: Constants.PAGE_SIZE_MARKER,\n\t\t\t\t},\n\t\t\t\tid: \"cursorPageDownSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.PageDown,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport interface CreateCursorCommandOptions extends MoveCommandOptions {\n\t\twholeLine?: boolean;\n\t}\n\n\texport const CreateCursor: CoreEditorCommand<CreateCursorCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<CreateCursorCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"createCursor\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<CreateCursorCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tif (!args.position) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet newState: PartialCursorState;\n\t\t\t\t\tif (args.wholeLine) {\n\t\t\t\t\t\tnewState = CursorMoveCommands.line(\n\t\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\targs.position,\n\t\t\t\t\t\t\targs.viewPosition,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewState = CursorMoveCommands.moveTo(\n\t\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\targs.position,\n\t\t\t\t\t\t\targs.viewPosition,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst states: PartialCursorState[] =\n\t\t\t\t\t\tviewModel.getCursorStates();\n\n\t\t\t\t\t// Check if we should remove a cursor (sort of like a toggle)\n\t\t\t\t\tif (states.length > 1) {\n\t\t\t\t\t\tconst newModelPosition = newState.modelState\n\t\t\t\t\t\t\t? newState.modelState.position\n\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\tconst newViewPosition = newState.viewState\n\t\t\t\t\t\t\t? newState.viewState.position\n\t\t\t\t\t\t\t: null;\n\n\t\t\t\t\t\tfor (let i = 0, len = states.length; i < len; i++) {\n\t\t\t\t\t\t\tconst state = states[i];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tnewModelPosition &&\n\t\t\t\t\t\t\t\t!state.modelState!.selection.containsPosition(\n\t\t\t\t\t\t\t\t\tnewModelPosition,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tnewViewPosition &&\n\t\t\t\t\t\t\t\t!state.viewState!.selection.containsPosition(\n\t\t\t\t\t\t\t\t\tnewViewPosition,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// => Remove the cursor\n\t\t\t\t\t\t\tstates.splice(i, 1);\n\n\t\t\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\t\t\targs.source,\n\t\t\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\t\t\tstates,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// => Add the new cursor\n\t\t\t\t\tstates.push(newState);\n\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\tstates,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const LastCursorMoveToSelect: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<MoveCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"_lastCursorMoveToSelect\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<MoveCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tif (!args.position) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst lastAddedCursorIndex =\n\t\t\t\t\t\tviewModel.getLastAddedCursorIndex();\n\n\t\t\t\t\tconst states = viewModel.getCursorStates();\n\t\t\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tstates[lastAddedCursorIndex],\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\targs.position,\n\t\t\t\t\t\targs.viewPosition,\n\t\t\t\t\t);\n\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\tnewStates,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\tclass HomeCommand extends CoreEditorCommand<BaseCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToBeginningOfLine(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getCursorStates(),\n\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorHome: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew HomeCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"cursorHome\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Home,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyCode.Home,\n\t\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.LeftArrow],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorHomeSelect: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew HomeCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"cursorHomeSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.Home,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.Home,\n\t\t\t\t\t\tsecondary: [\n\t\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\tclass LineStartCommand extends CoreEditorCommand<BaseCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tthis._exec(viewModel.getCursorStates()),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\n\t\tprivate _exec(cursors: CursorState[]): PartialCursorState[] {\n\t\t\tconst result: PartialCursorState[] = [];\n\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\tconst cursor = cursors[i];\n\t\t\t\tconst lineNumber = cursor.modelState.position.lineNumber;\n\t\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\t\tcursor.modelState.move(\n\t\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t0,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\texport const CursorLineStart: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LineStartCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"cursorLineStart\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyA },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorLineStartSelect: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LineStartCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"cursorLineStartSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyA,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport interface EndCommandOptions extends BaseCommandOptions {\n\t\tsticky?: boolean;\n\t}\n\n\tclass EndCommand extends CoreEditorCommand<EndCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<EndCommandOptions>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToEndOfLine(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getCursorStates(),\n\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t\targs.sticky || false,\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorEnd: CoreEditorCommand<EndCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew EndCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"cursorEnd\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\targs: { sticky: false },\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.End,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyCode.End,\n\t\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.RightArrow],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmetadata: {\n\t\t\t\t\tdescription: `Go to End`,\n\t\t\t\t\targs: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tsticky: {\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"stickydesc\",\n\t\t\t\t\t\t\t\t\t\t\t\"Stick to the end even when going to longer lines\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorEndSelect: CoreEditorCommand<EndCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew EndCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"cursorEndSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\targs: { sticky: false },\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.End,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.End,\n\t\t\t\t\t\tsecondary: [\n\t\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmetadata: {\n\t\t\t\t\tdescription: `Select to End`,\n\t\t\t\t\targs: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tsticky: {\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"stickydesc\",\n\t\t\t\t\t\t\t\t\t\t\t\"Stick to the end even when going to longer lines\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\tclass LineEndCommand extends CoreEditorCommand<BaseCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tthis._exec(viewModel, viewModel.getCursorStates()),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\n\t\tprivate _exec(\n\t\t\tviewModel: IViewModel,\n\t\t\tcursors: CursorState[],\n\t\t): PartialCursorState[] {\n\t\t\tconst result: PartialCursorState[] = [];\n\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\tconst cursor = cursors[i];\n\t\t\t\tconst lineNumber = cursor.modelState.position.lineNumber;\n\t\t\t\tconst maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n\t\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\t\tcursor.modelState.move(\n\t\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\tmaxColumn,\n\t\t\t\t\t\t0,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\texport const CursorLineEnd: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LineEndCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"cursorLineEnd\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyE },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorLineEndSelect: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LineEndCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"cursorLineEndSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: 0,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyE,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\tclass TopCommand extends CoreEditorCommand<BaseCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToBeginningOfBuffer(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getCursorStates(),\n\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorTop: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew TopCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"cursorTop\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Home,\n\t\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.UpArrow },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorTopSelect: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew TopCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"cursorTopSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Home,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary:\n\t\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\tclass BottomCommand extends CoreEditorCommand<BaseCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<BaseCommandOptions>,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tCursorMoveCommands.moveToEndOfBuffer(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getCursorStates(),\n\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t),\n\t\t\t);\n\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t}\n\t}\n\n\texport const CursorBottom: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew BottomCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"cursorBottom\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.End,\n\t\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.DownArrow },\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport const CursorBottomSelect: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew BottomCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"cursorBottomSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.End,\n\t\t\t\t\tmac: {\n\t\t\t\t\t\tprimary:\n\t\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\texport type EditorScrollCommandOptions = EditorScroll_.RawArguments &\n\t\tBaseCommandOptions;\n\n\texport class EditorScrollImpl extends CoreEditorCommand<EditorScrollCommandOptions> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"editorScroll\",\n\t\t\t\tprecondition: undefined,\n\t\t\t\tmetadata: EditorScroll_.metadata,\n\t\t\t});\n\t\t}\n\n\t\tdetermineScrollMethod(args: EditorScroll_.ParsedArguments) {\n\t\t\tconst horizontalUnits = [EditorScroll_.Unit.Column];\n\t\t\tconst verticalUnits = [\n\t\t\t\tEditorScroll_.Unit.Line,\n\t\t\t\tEditorScroll_.Unit.WrappedLine,\n\t\t\t\tEditorScroll_.Unit.Page,\n\t\t\t\tEditorScroll_.Unit.HalfPage,\n\t\t\t\tEditorScroll_.Unit.Editor,\n\t\t\t\tEditorScroll_.Unit.Column,\n\t\t\t];\n\t\t\tconst horizontalDirections = [\n\t\t\t\tEditorScroll_.Direction.Left,\n\t\t\t\tEditorScroll_.Direction.Right,\n\t\t\t];\n\t\t\tconst verticalDirections = [\n\t\t\t\tEditorScroll_.Direction.Up,\n\t\t\t\tEditorScroll_.Direction.Down,\n\t\t\t];\n\n\t\t\tif (\n\t\t\t\thorizontalUnits.includes(args.unit) &&\n\t\t\t\thorizontalDirections.includes(args.direction)\n\t\t\t) {\n\t\t\t\treturn this._runHorizontalEditorScroll.bind(this);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tverticalUnits.includes(args.unit) &&\n\t\t\t\tverticalDirections.includes(args.direction)\n\t\t\t) {\n\t\t\t\treturn this._runVerticalEditorScroll.bind(this);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<EditorScrollCommandOptions>,\n\t\t): void {\n\t\t\tconst parsed = EditorScroll_.parse(args);\n\t\t\tif (!parsed) {\n\t\t\t\t// illegal arguments\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst runEditorScroll = this.determineScrollMethod(parsed);\n\t\t\tif (!runEditorScroll) {\n\t\t\t\t// Incompatible unit and direction\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trunEditorScroll(viewModel, args.source, parsed);\n\t\t}\n\n\t\t_runVerticalEditorScroll(\n\t\t\tviewModel: IViewModel,\n\t\t\tsource: string | null | undefined,\n\t\t\targs: EditorScroll_.ParsedArguments,\n\t\t): void {\n\t\t\tconst desiredScrollTop = this._computeDesiredScrollTop(\n\t\t\t\tviewModel,\n\t\t\t\targs,\n\t\t\t);\n\n\t\t\tif (args.revealCursor) {\n\t\t\t\t// must ensure cursor is in new visible range\n\t\t\t\tconst desiredVisibleViewRange =\n\t\t\t\t\tviewModel.getCompletelyVisibleViewRangeAtScrollTop(\n\t\t\t\t\t\tdesiredScrollTop,\n\t\t\t\t\t);\n\t\t\t\tviewModel.setCursorStates(source, CursorChangeReason.Explicit, [\n\t\t\t\t\tCursorMoveCommands.findPositionInViewportIfOutside(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\tdesiredVisibleViewRange,\n\t\t\t\t\t\targs.select,\n\t\t\t\t\t),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tviewModel.viewLayout.setScrollPosition(\n\t\t\t\t{ scrollTop: desiredScrollTop },\n\t\t\t\tScrollType.Smooth,\n\t\t\t);\n\t\t}\n\n\t\tprivate _computeDesiredScrollTop(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: EditorScroll_.ParsedArguments,\n\t\t): number {\n\t\t\tif (args.unit === EditorScroll_.Unit.Line) {\n\t\t\t\t// scrolling by model lines\n\t\t\t\tconst futureViewport = viewModel.viewLayout.getFutureViewport();\n\t\t\t\tconst visibleViewRange =\n\t\t\t\t\tviewModel.getCompletelyVisibleViewRangeAtScrollTop(\n\t\t\t\t\t\tfutureViewport.top,\n\t\t\t\t\t);\n\t\t\t\tconst visibleModelRange =\n\t\t\t\t\tviewModel.coordinatesConverter.convertViewRangeToModelRange(\n\t\t\t\t\t\tvisibleViewRange,\n\t\t\t\t\t);\n\n\t\t\t\tlet desiredTopModelLineNumber: number;\n\t\t\t\tif (args.direction === EditorScroll_.Direction.Up) {\n\t\t\t\t\t// must go x model lines up\n\t\t\t\t\tdesiredTopModelLineNumber = Math.max(\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tvisibleModelRange.startLineNumber - args.value,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// must go x model lines down\n\t\t\t\t\tdesiredTopModelLineNumber = Math.min(\n\t\t\t\t\t\tviewModel.model.getLineCount(),\n\t\t\t\t\t\tvisibleModelRange.startLineNumber + args.value,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst viewPosition =\n\t\t\t\t\tviewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\t\tnew Position(desiredTopModelLineNumber, 1),\n\t\t\t\t\t);\n\t\t\t\treturn viewModel.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\t\tviewPosition.lineNumber,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (args.unit === EditorScroll_.Unit.Editor) {\n\t\t\t\tlet desiredTopModelLineNumber = 0;\n\t\t\t\tif (args.direction === EditorScroll_.Direction.Down) {\n\t\t\t\t\tdesiredTopModelLineNumber =\n\t\t\t\t\t\tviewModel.model.getLineCount() -\n\t\t\t\t\t\tviewModel.cursorConfig.pageSize;\n\t\t\t\t}\n\t\t\t\treturn viewModel.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\t\tdesiredTopModelLineNumber,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet noOfLines: number;\n\t\t\tif (args.unit === EditorScroll_.Unit.Page) {\n\t\t\t\tnoOfLines = viewModel.cursorConfig.pageSize * args.value;\n\t\t\t} else if (args.unit === EditorScroll_.Unit.HalfPage) {\n\t\t\t\tnoOfLines =\n\t\t\t\t\tMath.round(viewModel.cursorConfig.pageSize / 2) *\n\t\t\t\t\targs.value;\n\t\t\t} else {\n\t\t\t\tnoOfLines = args.value;\n\t\t\t}\n\t\t\tconst deltaLines =\n\t\t\t\t(args.direction === EditorScroll_.Direction.Up ? -1 : 1) *\n\t\t\t\tnoOfLines;\n\t\t\treturn (\n\t\t\t\tviewModel.viewLayout.getCurrentScrollTop() +\n\t\t\t\tdeltaLines * viewModel.cursorConfig.lineHeight\n\t\t\t);\n\t\t}\n\n\t\t_runHorizontalEditorScroll(\n\t\t\tviewModel: IViewModel,\n\t\t\tsource: string | null | undefined,\n\t\t\targs: EditorScroll_.ParsedArguments,\n\t\t): void {\n\t\t\tconst desiredScrollLeft = this._computeDesiredScrollLeft(\n\t\t\t\tviewModel,\n\t\t\t\targs,\n\t\t\t);\n\t\t\tviewModel.viewLayout.setScrollPosition(\n\t\t\t\t{ scrollLeft: desiredScrollLeft },\n\t\t\t\tScrollType.Smooth,\n\t\t\t);\n\t\t}\n\n\t\t_computeDesiredScrollLeft(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: EditorScroll_.ParsedArguments,\n\t\t) {\n\t\t\tconst deltaColumns =\n\t\t\t\t(args.direction === EditorScroll_.Direction.Left ? -1 : 1) *\n\t\t\t\targs.value;\n\t\t\treturn (\n\t\t\t\tviewModel.viewLayout.getCurrentScrollLeft() +\n\t\t\t\tdeltaColumns *\n\t\t\t\t\tviewModel.cursorConfig.typicalHalfwidthCharacterWidth\n\t\t\t);\n\t\t}\n\t}\n\n\texport const EditorScroll: EditorScrollImpl = registerEditorCommand(\n\t\tnew EditorScrollImpl(),\n\t);\n\n\texport const ScrollLineUp: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollLineUp\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.PageUp },\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Up,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.WrappedLine,\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollPageUp: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollPageUp\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageUp,\n\t\t\t\t\t\t\twin: { primary: KeyMod.Alt | KeyCode.PageUp },\n\t\t\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.PageUp },\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Up,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.Page,\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollEditorTop: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollEditorTop\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Up,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.Editor,\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollLineDown: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollLineDown\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.PageDown },\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Down,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.WrappedLine,\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollPageDown: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollPageDown\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageDown,\n\t\t\t\t\t\t\twin: { primary: KeyMod.Alt | KeyCode.PageDown },\n\t\t\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.PageDown },\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Down,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.Page,\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollEditorBottom: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollEditorBottom\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Down,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.Editor,\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollLeft: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollLeft\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Left,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.Column,\n\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const ScrollRight: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"scrollRight\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\trunCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tEditorScroll.runCoreEditorCommand(viewModel, {\n\t\t\t\t\t\tto: EditorScroll_.RawDirection.Right,\n\t\t\t\t\t\tby: EditorScroll_.RawUnit.Column,\n\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t\trevealCursor: false,\n\t\t\t\t\t\tselect: false,\n\t\t\t\t\t\tsource: args.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\tclass WordCommand extends CoreEditorCommand<MoveCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<MoveCommandOptions>,\n\t\t): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.word(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t\t\targs.position,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t);\n\t\t\tif (args.revealType !== NavigationCommandRevealType.None) {\n\t\t\t\tviewModel.revealAllCursors(args.source, true, true);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const WordSelect: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew WordCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"_wordSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\texport const WordSelectDrag: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew WordCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"_wordSelectDrag\",\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\texport const LastCursorWordSelect: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<MoveCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"lastCursorWordSelect\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<MoveCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tif (!args.position) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst lastAddedCursorIndex =\n\t\t\t\t\t\tviewModel.getLastAddedCursorIndex();\n\n\t\t\t\t\tconst states = viewModel.getCursorStates();\n\t\t\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\t\t\tconst lastAddedState = states[lastAddedCursorIndex];\n\t\t\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.word(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tlastAddedState,\n\t\t\t\t\t\tlastAddedState.modelState.hasSelection(),\n\t\t\t\t\t\targs.position,\n\t\t\t\t\t);\n\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\tnewStates,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\tclass LineCommand extends CoreEditorCommand<MoveCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<MoveCommandOptions>,\n\t\t): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t[\n\t\t\t\t\tCursorMoveCommands.line(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\tthis._inSelectionMode,\n\t\t\t\t\t\targs.position,\n\t\t\t\t\t\targs.viewPosition,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t);\n\t\t\tif (args.revealType !== NavigationCommandRevealType.None) {\n\t\t\t\tviewModel.revealAllCursors(args.source, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const LineSelect: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LineCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"_lineSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\texport const LineSelectDrag: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LineCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"_lineSelectDrag\",\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\tclass LastCursorLineCommand extends CoreEditorCommand<MoveCommandOptions> {\n\t\tprivate readonly _inSelectionMode: boolean;\n\n\t\tconstructor(opts: ICommandOptions & { inSelectionMode: boolean }) {\n\t\t\tsuper(opts);\n\t\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\t}\n\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: Partial<MoveCommandOptions>,\n\t\t): void {\n\t\t\tif (!args.position) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n\n\t\t\tconst states = viewModel.getCursorStates();\n\t\t\tconst newStates: PartialCursorState[] = states.slice(0);\n\t\t\tnewStates[lastAddedCursorIndex] = CursorMoveCommands.line(\n\t\t\t\tviewModel,\n\t\t\t\tstates[lastAddedCursorIndex],\n\t\t\t\tthis._inSelectionMode,\n\t\t\t\targs.position,\n\t\t\t\targs.viewPosition,\n\t\t\t);\n\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\n\t\t\t\targs.source,\n\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\tnewStates,\n\t\t\t);\n\t\t}\n\t}\n\n\texport const LastCursorLineSelect: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LastCursorLineCommand({\n\t\t\t\tinSelectionMode: false,\n\t\t\t\tid: \"lastCursorLineSelect\",\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\texport const LastCursorLineSelectDrag: CoreEditorCommand<MoveCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew LastCursorLineCommand({\n\t\t\t\tinSelectionMode: true,\n\t\t\t\tid: \"lastCursorLineSelectDrag\",\n\t\t\t\tprecondition: undefined,\n\t\t\t}),\n\t\t);\n\n\texport const CancelSelection: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"cancelSelection\",\n\t\t\t\t\t\tprecondition: EditorContextKeys.hasNonEmptySelection,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape],\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tCursorMoveCommands.cancelSelection(\n\t\t\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t],\n\t\t\t\t\t);\n\t\t\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const RemoveSecondaryCursors: CoreEditorCommand<BaseCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<BaseCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"removeSecondaryCursors\",\n\t\t\t\t\t\tprecondition: EditorContextKeys.hasMultipleSelections,\n\t\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\t\tweight: CORE_WEIGHT + 1,\n\t\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape],\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<BaseCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\t[viewModel.getPrimaryCursorState()],\n\t\t\t\t\t);\n\t\t\t\t\tviewModel.revealAllCursors(args.source, true);\n\t\t\t\t\tstatus(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"removedCursor\",\n\t\t\t\t\t\t\t\"Removed secondary cursors\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport type RevealLineCommandOptions = RevealLine_.RawArguments &\n\t\tBaseCommandOptions;\n\n\texport const RevealLine: CoreEditorCommand<RevealLineCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<RevealLineCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"revealLine\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t\tmetadata: RevealLine_.metadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<RevealLineCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tconst revealLineArg = args;\n\t\t\t\t\tconst lineNumberArg = revealLineArg.lineNumber || 0;\n\t\t\t\t\tlet lineNumber =\n\t\t\t\t\t\ttypeof lineNumberArg === \"number\"\n\t\t\t\t\t\t\t? lineNumberArg + 1\n\t\t\t\t\t\t\t: Number.parseInt(lineNumberArg) + 1;\n\t\t\t\t\tif (lineNumber < 1) {\n\t\t\t\t\t\tlineNumber = 1;\n\t\t\t\t\t}\n\t\t\t\t\tconst lineCount = viewModel.model.getLineCount();\n\t\t\t\t\tif (lineNumber > lineCount) {\n\t\t\t\t\t\tlineNumber = lineCount;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst range = new Range(\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\tviewModel.model.getLineMaxColumn(lineNumber),\n\t\t\t\t\t);\n\n\t\t\t\t\tlet revealAt = VerticalRevealType.Simple;\n\t\t\t\t\tif (revealLineArg.at) {\n\t\t\t\t\t\tswitch (revealLineArg.at) {\n\t\t\t\t\t\t\tcase RevealLine_.RawAtArgument.Top:\n\t\t\t\t\t\t\t\trevealAt = VerticalRevealType.Top;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase RevealLine_.RawAtArgument.Center:\n\t\t\t\t\t\t\t\trevealAt = VerticalRevealType.Center;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase RevealLine_.RawAtArgument.Bottom:\n\t\t\t\t\t\t\t\trevealAt = VerticalRevealType.Bottom;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst viewRange =\n\t\t\t\t\t\tviewModel.coordinatesConverter.convertModelRangeToViewRange(\n\t\t\t\t\t\t\trange,\n\t\t\t\t\t\t);\n\n\t\t\t\t\tviewModel.revealRange(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tviewRange,\n\t\t\t\t\t\trevealAt,\n\t\t\t\t\t\tScrollType.Smooth,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n\n\texport const SelectAll = new (class extends EditorOrNativeTextInputCommand {\n\t\tconstructor() {\n\t\t\tsuper(SelectAllCommand);\n\t\t}\n\t\tpublic runDOMCommand(activeElement: Element): void {\n\t\t\tif (isFirefox) {\n\t\t\t\t(<HTMLInputElement>activeElement).focus();\n\t\t\t\t(<HTMLInputElement>activeElement).select();\n\t\t\t}\n\n\t\t\tactiveElement.ownerDocument.execCommand(\"selectAll\");\n\t\t}\n\t\tpublic runEditorCommand(\n\t\t\taccessor: ServicesAccessor,\n\t\t\teditor: ICodeEditor,\n\t\t\targs: unknown,\n\t\t): void {\n\t\t\tconst viewModel = editor._getViewModel();\n\t\t\tif (!viewModel) {\n\t\t\t\t// the editor has no view => has no cursors\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runCoreEditorCommand(viewModel, args);\n\t\t}\n\t\tpublic runCoreEditorCommand(\n\t\t\tviewModel: IViewModel,\n\t\t\targs: unknown,\n\t\t): void {\n\t\t\tviewModel.model.pushStackElement();\n\t\t\tviewModel.setCursorStates(\"keyboard\", CursorChangeReason.Explicit, [\n\t\t\t\tCursorMoveCommands.selectAll(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewModel.getPrimaryCursorState(),\n\t\t\t\t),\n\t\t\t]);\n\t\t}\n\t})();\n\n\texport interface SetSelectionCommandOptions extends BaseCommandOptions {\n\t\tselection: ISelection;\n\t}\n\n\texport const SetSelection: CoreEditorCommand<SetSelectionCommandOptions> =\n\t\tregisterEditorCommand(\n\t\t\tnew (class extends CoreEditorCommand<SetSelectionCommandOptions> {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: \"setSelection\",\n\t\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpublic runCoreEditorCommand(\n\t\t\t\t\tviewModel: IViewModel,\n\t\t\t\t\targs: Partial<SetSelectionCommandOptions>,\n\t\t\t\t): void {\n\t\t\t\t\tif (!args.selection) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tviewModel.model.pushStackElement();\n\t\t\t\t\tviewModel.setCursorStates(\n\t\t\t\t\t\targs.source,\n\t\t\t\t\t\tCursorChangeReason.Explicit,\n\t\t\t\t\t\t[CursorState.fromModelSelection(args.selection)],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})(),\n\t\t);\n}\n\nconst columnSelectionCondition = ContextKeyExpr.and(\n\tEditorContextKeys.textInputFocus,\n\tEditorContextKeys.columnSelection,\n);\nfunction registerColumnSelection(id: string, keybinding: number): void {\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: id,\n\t\tprimary: keybinding,\n\t\twhen: columnSelectionCondition,\n\t\tweight: CORE_WEIGHT + 1,\n\t});\n}\n\nregisterColumnSelection(\n\tCoreNavigationCommands.CursorColumnSelectLeft.id,\n\tKeyMod.Shift | KeyCode.LeftArrow,\n);\nregisterColumnSelection(\n\tCoreNavigationCommands.CursorColumnSelectRight.id,\n\tKeyMod.Shift | KeyCode.RightArrow,\n);\nregisterColumnSelection(\n\tCoreNavigationCommands.CursorColumnSelectUp.id,\n\tKeyMod.Shift | KeyCode.UpArrow,\n);\nregisterColumnSelection(\n\tCoreNavigationCommands.CursorColumnSelectPageUp.id,\n\tKeyMod.Shift | KeyCode.PageUp,\n);\nregisterColumnSelection(\n\tCoreNavigationCommands.CursorColumnSelectDown.id,\n\tKeyMod.Shift | KeyCode.DownArrow,\n);\nregisterColumnSelection(\n\tCoreNavigationCommands.CursorColumnSelectPageDown.id,\n\tKeyMod.Shift | KeyCode.PageDown,\n);\n\nfunction registerCommand<T extends Command>(command: T): T {\n\tcommand.register();\n\treturn command;\n}\n\nexport namespace CoreEditingCommands {\n\texport abstract class CoreEditingCommand extends EditorCommand {\n\t\tpublic runEditorCommand(\n\t\t\taccessor: ServicesAccessor,\n\t\t\teditor: ICodeEditor,\n\t\t\targs: unknown,\n\t\t): void {\n\t\t\tconst viewModel = editor._getViewModel();\n\t\t\tif (!viewModel) {\n\t\t\t\t// the editor has no view => has no cursors\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runCoreEditingCommand(editor, viewModel, args || {});\n\t\t}\n\n\t\tpublic abstract runCoreEditingCommand(\n\t\t\teditor: ICodeEditor,\n\t\t\tviewModel: IViewModel,\n\t\t\targs: unknown,\n\t\t): void;\n\t}\n\n\texport const LineBreakInsert: EditorCommand = registerEditorCommand(\n\t\tnew (class extends CoreEditingCommand {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: \"lineBreakInsert\",\n\t\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\tprimary: 0,\n\t\t\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyO },\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpublic runCoreEditingCommand(\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\tviewModel: IViewModel,\n\t\t\t\targs: unknown,\n\t\t\t): void {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\teditor.executeCommands(\n\t\t\t\t\tthis.id,\n\t\t\t\t\tEnterOperation.lineBreakInsert(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tviewModel\n\t\t\t\t\t\t\t.getCursorStates()\n\t\t\t\t\t\t\t.map((s) => s.modelState.selection),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t})(),\n\t);\n\n\texport const Outdent: EditorCommand = registerEditorCommand(\n\t\tnew (class extends CoreEditingCommand {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: \"outdent\",\n\t\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tprimary: KeyMod.Shift | KeyCode.Tab,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpublic runCoreEditingCommand(\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\tviewModel: IViewModel,\n\t\t\t\targs: unknown,\n\t\t\t): void {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\teditor.executeCommands(\n\t\t\t\t\tthis.id,\n\t\t\t\t\tTypeOperations.outdent(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tviewModel\n\t\t\t\t\t\t\t.getCursorStates()\n\t\t\t\t\t\t\t.map((s) => s.modelState.selection),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\teditor.pushUndoStop();\n\t\t\t}\n\t\t})(),\n\t);\n\n\texport const Tab: EditorCommand = registerEditorCommand(\n\t\tnew (class extends CoreEditingCommand {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: \"tab\",\n\t\t\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tprimary: KeyCode.Tab,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpublic runCoreEditingCommand(\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\tviewModel: IViewModel,\n\t\t\t\targs: unknown,\n\t\t\t): void {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\teditor.executeCommands(\n\t\t\t\t\tthis.id,\n\t\t\t\t\tTypeOperations.tab(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tviewModel\n\t\t\t\t\t\t\t.getCursorStates()\n\t\t\t\t\t\t\t.map((s) => s.modelState.selection),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\teditor.pushUndoStop();\n\t\t\t}\n\t\t})(),\n\t);\n\n\texport const DeleteLeft: EditorCommand = registerEditorCommand(\n\t\tnew (class extends CoreEditingCommand {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: \"deleteLeft\",\n\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\tprimary: KeyCode.Backspace,\n\t\t\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Backspace],\n\t\t\t\t\t\tmac: {\n\t\t\t\t\t\t\tprimary: KeyCode.Backspace,\n\t\t\t\t\t\t\tsecondary: [\n\t\t\t\t\t\t\t\tKeyMod.Shift | KeyCode.Backspace,\n\t\t\t\t\t\t\t\tKeyMod.WinCtrl | KeyCode.KeyH,\n\t\t\t\t\t\t\t\tKeyMod.WinCtrl | KeyCode.Backspace,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpublic runCoreEditingCommand(\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\tviewModel: IViewModel,\n\t\t\t\targs: unknown,\n\t\t\t): void {\n\t\t\t\tconst [shouldPushStackElementBefore, commands] =\n\t\t\t\t\tDeleteOperations.deleteLeft(\n\t\t\t\t\t\tviewModel.getPrevEditOperationType(),\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tviewModel\n\t\t\t\t\t\t\t.getCursorStates()\n\t\t\t\t\t\t\t.map((s) => s.modelState.selection),\n\t\t\t\t\t\tviewModel.getCursorAutoClosedCharacters(),\n\t\t\t\t\t);\n\t\t\t\tif (shouldPushStackElementBefore) {\n\t\t\t\t\teditor.pushUndoStop();\n\t\t\t\t}\n\t\t\t\teditor.executeCommands(this.id, commands);\n\t\t\t\tviewModel.setPrevEditOperationType(\n\t\t\t\t\tEditOperationType.DeletingLeft,\n\t\t\t\t);\n\t\t\t}\n\t\t})(),\n\t);\n\n\texport const DeleteRight: EditorCommand = registerEditorCommand(\n\t\tnew (class extends CoreEditingCommand {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: \"deleteRight\",\n\t\t\t\t\tprecondition: undefined,\n\t\t\t\t\tkbOpts: {\n\t\t\t\t\t\tweight: CORE_WEIGHT,\n\t\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\t\tprimary: KeyCode.Delete,\n\t\t\t\t\t\tmac: {\n\t\t\t\t\t\t\tprimary: KeyCode.Delete,\n\t\t\t\t\t\t\tsecondary: [\n\t\t\t\t\t\t\t\tKeyMod.WinCtrl | KeyCode.KeyD,\n\t\t\t\t\t\t\t\tKeyMod.WinCtrl | KeyCode.Delete,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpublic runCoreEditingCommand(\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\tviewModel: IViewModel,\n\t\t\t\targs: unknown,\n\t\t\t): void {\n\t\t\t\tconst [shouldPushStackElementBefore, commands] =\n\t\t\t\t\tDeleteOperations.deleteRight(\n\t\t\t\t\t\tviewModel.getPrevEditOperationType(),\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tviewModel\n\t\t\t\t\t\t\t.getCursorStates()\n\t\t\t\t\t\t\t.map((s) => s.modelState.selection),\n\t\t\t\t\t);\n\t\t\t\tif (shouldPushStackElementBefore) {\n\t\t\t\t\teditor.pushUndoStop();\n\t\t\t\t}\n\t\t\t\teditor.executeCommands(this.id, commands);\n\t\t\t\tviewModel.setPrevEditOperationType(\n\t\t\t\t\tEditOperationType.DeletingRight,\n\t\t\t\t);\n\t\t\t}\n\t\t})(),\n\t);\n\n\texport const Undo = new (class extends EditorOrNativeTextInputCommand {\n\t\tconstructor() {\n\t\t\tsuper(UndoCommand);\n\t\t}\n\t\tpublic runDOMCommand(activeElement: Element): void {\n\t\t\tactiveElement.ownerDocument.execCommand(\"undo\");\n\t\t}\n\t\tpublic runEditorCommand(\n\t\t\taccessor: ServicesAccessor | null,\n\t\t\teditor: ICodeEditor,\n\t\t\targs: unknown,\n\t\t): void | Promise<void> {\n\t\t\tif (\n\t\t\t\t!editor.hasModel() ||\n\t\t\t\teditor.getOption(EditorOption.readOnly) === true\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn editor.getModel().undo();\n\t\t}\n\t})();\n\n\texport const Redo = new (class extends EditorOrNativeTextInputCommand {\n\t\tconstructor() {\n\t\t\tsuper(RedoCommand);\n\t\t}\n\t\tpublic runDOMCommand(activeElement: Element): void {\n\t\t\tactiveElement.ownerDocument.execCommand(\"redo\");\n\t\t}\n\t\tpublic runEditorCommand(\n\t\t\taccessor: ServicesAccessor | null,\n\t\t\teditor: ICodeEditor,\n\t\t\targs: unknown,\n\t\t): void | Promise<void> {\n\t\t\tif (\n\t\t\t\t!editor.hasModel() ||\n\t\t\t\teditor.getOption(EditorOption.readOnly) === true\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn editor.getModel().redo();\n\t\t}\n\t})();\n}\n\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n\tprivate readonly _handlerId: string;\n\n\tconstructor(id: string, handlerId: string, metadata?: ICommandMetadata) {\n\t\tsuper({\n\t\t\tid: id,\n\t\t\tprecondition: undefined,\n\t\t\tmetadata,\n\t\t});\n\t\tthis._handlerId = handlerId;\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: unknown): void {\n\t\tconst editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.trigger(\"keyboard\", this._handlerId, args);\n\t}\n}\n\nfunction registerOverwritableCommand(\n\thandlerId: string,\n\tmetadata?: ICommandMetadata,\n): void {\n\tregisterCommand(\n\t\tnew EditorHandlerCommand(\"default:\" + handlerId, handlerId),\n\t);\n\tregisterCommand(new EditorHandlerCommand(handlerId, handlerId, metadata));\n}\n\nregisterOverwritableCommand(Handler.Type, {\n\tdescription: `Type`,\n\targs: [\n\t\t{\n\t\t\tname: \"args\",\n\t\t\tschema: {\n\t\t\t\ttype: \"object\",\n\t\t\t\trequired: [\"text\"],\n\t\t\t\tproperties: {\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\nregisterOverwritableCommand(Handler.ReplacePreviousChar);\nregisterOverwritableCommand(Handler.CompositionType);\nregisterOverwritableCommand(Handler.CompositionStart);\nregisterOverwritableCommand(Handler.CompositionEnd);\nregisterOverwritableCommand(Handler.Paste);\nregisterOverwritableCommand(Handler.Cut);\n"],
  "mappings": "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",
  "names": ["EditorScroll_", "Direction", "Unit", "RevealLine_", "NavigationCommandRevealType", "CoreNavigationCommands", "Constants", "CoreEditingCommands"]
}
