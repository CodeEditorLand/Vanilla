{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode, createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { IEditorConfiguration } from '../../../common/config/editorConfiguration.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground, editorMultiCursorSecondaryForeground, editorMultiCursorPrimaryForeground } from '../../../common/core/editorColorRegistry.js';\nimport { RenderingContext, RestrictedRenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport { EditorTheme } from '../../../common/editorTheme.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\n\nclass Settings {\n\n\tpublic readonly lineHeight: number;\n\tpublic readonly pixelRatio: number;\n\tpublic readonly overviewRulerLanes: number;\n\n\tpublic readonly renderBorder: boolean;\n\tpublic readonly borderColor: string | null;\n\n\tpublic readonly hideCursor: boolean;\n\tpublic readonly cursorColorSingle: string | null;\n\tpublic readonly cursorColorPrimary: string | null;\n\tpublic readonly cursorColorSecondary: string | null;\n\n\tpublic readonly themeType: 'light' | 'dark' | 'hcLight' | 'hcDark';\n\tpublic readonly backgroundColor: Color | null;\n\n\tpublic readonly top: number;\n\tpublic readonly right: number;\n\tpublic readonly domWidth: number;\n\tpublic readonly domHeight: number;\n\tpublic readonly canvasWidth: number;\n\tpublic readonly canvasHeight: number;\n\n\tpublic readonly x: number[];\n\tpublic readonly w: number[];\n\n\tconstructor(config: IEditorConfiguration, theme: EditorTheme) {\n\t\tconst options = config.options;\n\t\tthis.lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis.pixelRatio = options.get(EditorOption.pixelRatio);\n\t\tthis.overviewRulerLanes = options.get(EditorOption.overviewRulerLanes);\n\n\t\tthis.renderBorder = options.get(EditorOption.overviewRulerBorder);\n\t\tconst borderColor = theme.getColor(editorOverviewRulerBorder);\n\t\tthis.borderColor = borderColor ? borderColor.toString() : null;\n\n\t\tthis.hideCursor = options.get(EditorOption.hideCursorInOverviewRuler);\n\t\tconst cursorColorSingle = theme.getColor(editorCursorForeground);\n\t\tthis.cursorColorSingle = cursorColorSingle ? cursorColorSingle.transparent(0.7).toString() : null;\n\t\tconst cursorColorPrimary = theme.getColor(editorMultiCursorPrimaryForeground);\n\t\tthis.cursorColorPrimary = cursorColorPrimary ? cursorColorPrimary.transparent(0.7).toString() : null;\n\t\tconst cursorColorSecondary = theme.getColor(editorMultiCursorSecondaryForeground);\n\t\tthis.cursorColorSecondary = cursorColorSecondary ? cursorColorSecondary.transparent(0.7).toString() : null;\n\n\t\tthis.themeType = theme.type;\n\n\t\tconst minimapOpts = options.get(EditorOption.minimap);\n\t\tconst minimapEnabled = minimapOpts.enabled;\n\t\tconst minimapSide = minimapOpts.side;\n\t\tconst themeColor = theme.getColor(editorOverviewRulerBackground);\n\t\tconst defaultBackground = TokenizationRegistry.getDefaultBackground();\n\n\t\tif (themeColor) {\n\t\t\tthis.backgroundColor = themeColor;\n\t\t} else if (minimapEnabled && minimapSide === 'right') {\n\t\t\tthis.backgroundColor = defaultBackground;\n\t\t} else {\n\t\t\tthis.backgroundColor = null;\n\t\t}\n\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst position = layoutInfo.overviewRuler;\n\t\tthis.top = position.top;\n\t\tthis.right = position.right;\n\t\tthis.domWidth = position.width;\n\t\tthis.domHeight = position.height;\n\t\tif (this.overviewRulerLanes === 0) {\n\t\t\t// overview ruler is off\n\t\t\tthis.canvasWidth = 0;\n\t\t\tthis.canvasHeight = 0;\n\t\t} else {\n\t\t\tthis.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n\t\t\tthis.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n\t\t}\n\n\t\tconst [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n\t\tthis.x = x;\n\t\tthis.w = w;\n\t}\n\n\tprivate _initLanes(canvasLeftOffset: number, canvasWidth: number, laneCount: number): [number[], number[]] {\n\t\tconst remainingWidth = canvasWidth - canvasLeftOffset;\n\n\t\tif (laneCount >= 3) {\n\t\t\tconst leftWidth = Math.floor(remainingWidth / 3);\n\t\t\tconst rightWidth = Math.floor(remainingWidth / 3);\n\t\t\tconst centerWidth = remainingWidth - leftWidth - rightWidth;\n\t\t\tconst leftOffset = canvasLeftOffset;\n\t\t\tconst centerOffset = leftOffset + leftWidth;\n\t\t\tconst rightOffset = leftOffset + leftWidth + centerWidth;\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\tleftOffset, // Left\n\t\t\t\t\tcenterOffset, // Center\n\t\t\t\t\tleftOffset, // Left | Center\n\t\t\t\t\trightOffset, // Right\n\t\t\t\t\tleftOffset, // Left | Right\n\t\t\t\t\tcenterOffset, // Center | Right\n\t\t\t\t\tleftOffset, // Left | Center | Right\n\t\t\t\t], [\n\t\t\t\t\t0,\n\t\t\t\t\tleftWidth, // Left\n\t\t\t\t\tcenterWidth, // Center\n\t\t\t\t\tleftWidth + centerWidth, // Left | Center\n\t\t\t\t\trightWidth, // Right\n\t\t\t\t\tleftWidth + centerWidth + rightWidth, // Left | Right\n\t\t\t\t\tcenterWidth + rightWidth, // Center | Right\n\t\t\t\t\tleftWidth + centerWidth + rightWidth, // Left | Center | Right\n\t\t\t\t]\n\t\t\t];\n\t\t} else if (laneCount === 2) {\n\t\t\tconst leftWidth = Math.floor(remainingWidth / 2);\n\t\t\tconst rightWidth = remainingWidth - leftWidth;\n\t\t\tconst leftOffset = canvasLeftOffset;\n\t\t\tconst rightOffset = leftOffset + leftWidth;\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\tleftOffset, // Left\n\t\t\t\t\tleftOffset, // Center\n\t\t\t\t\tleftOffset, // Left | Center\n\t\t\t\t\trightOffset, // Right\n\t\t\t\t\tleftOffset, // Left | Right\n\t\t\t\t\tleftOffset, // Center | Right\n\t\t\t\t\tleftOffset, // Left | Center | Right\n\t\t\t\t], [\n\t\t\t\t\t0,\n\t\t\t\t\tleftWidth, // Left\n\t\t\t\t\tleftWidth, // Center\n\t\t\t\t\tleftWidth, // Left | Center\n\t\t\t\t\trightWidth, // Right\n\t\t\t\t\tleftWidth + rightWidth, // Left | Right\n\t\t\t\t\tleftWidth + rightWidth, // Center | Right\n\t\t\t\t\tleftWidth + rightWidth, // Left | Center | Right\n\t\t\t\t]\n\t\t\t];\n\t\t} else {\n\t\t\tconst offset = canvasLeftOffset;\n\t\t\tconst width = remainingWidth;\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\toffset, // Left\n\t\t\t\t\toffset, // Center\n\t\t\t\t\toffset, // Left | Center\n\t\t\t\t\toffset, // Right\n\t\t\t\t\toffset, // Left | Right\n\t\t\t\t\toffset, // Center | Right\n\t\t\t\t\toffset, // Left | Center | Right\n\t\t\t\t], [\n\t\t\t\t\t0,\n\t\t\t\t\twidth, // Left\n\t\t\t\t\twidth, // Center\n\t\t\t\t\twidth, // Left | Center\n\t\t\t\t\twidth, // Right\n\t\t\t\t\twidth, // Left | Right\n\t\t\t\t\twidth, // Center | Right\n\t\t\t\t\twidth, // Left | Center | Right\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\t}\n\n\tpublic equals(other: Settings): boolean {\n\t\treturn (\n\t\t\tthis.lineHeight === other.lineHeight\n\t\t\t&& this.pixelRatio === other.pixelRatio\n\t\t\t&& this.overviewRulerLanes === other.overviewRulerLanes\n\t\t\t&& this.renderBorder === other.renderBorder\n\t\t\t&& this.borderColor === other.borderColor\n\t\t\t&& this.hideCursor === other.hideCursor\n\t\t\t&& this.cursorColorSingle === other.cursorColorSingle\n\t\t\t&& this.cursorColorPrimary === other.cursorColorPrimary\n\t\t\t&& this.cursorColorSecondary === other.cursorColorSecondary\n\t\t\t&& this.themeType === other.themeType\n\t\t\t&& Color.equals(this.backgroundColor, other.backgroundColor)\n\t\t\t&& this.top === other.top\n\t\t\t&& this.right === other.right\n\t\t\t&& this.domWidth === other.domWidth\n\t\t\t&& this.domHeight === other.domHeight\n\t\t\t&& this.canvasWidth === other.canvasWidth\n\t\t\t&& this.canvasHeight === other.canvasHeight\n\t\t);\n\t}\n}\n\nconst enum Constants {\n\tMIN_DECORATION_HEIGHT = 6\n}\n\nconst enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\ntype Cursor = {\n\tposition: Position;\n\tcolor: string | null;\n};\n\nconst enum ShouldRenderValue {\n\tNotNeeded = 0,\n\tMaybe = 1,\n\tNeeded = 2\n}\n\nexport class DecorationsOverviewRuler extends ViewPart {\n\n\tprivate _actualShouldRender: ShouldRenderValue = ShouldRenderValue.NotNeeded;\n\n\tprivate readonly _tokensColorTrackerListener: IDisposable;\n\tprivate readonly _domNode: FastDomNode<HTMLCanvasElement>;\n\tprivate _settings!: Settings;\n\tprivate _cursorPositions: Cursor[];\n\n\tprivate _renderedDecorations: OverviewRulerDecorationsGroup[] = [];\n\tprivate _renderedCursorPositions: Cursor[] = [];\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis._domNode = createFastDomNode(document.createElement('canvas'));\n\t\tthis._domNode.setClassName('decorationsOverviewRuler');\n\t\tthis._domNode.setPosition('absolute');\n\t\tthis._domNode.setLayerHinting(true);\n\t\tthis._domNode.setContain('strict');\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._updateSettings(false);\n\n\t\tthis._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n\t\t\tif (e.changedColorMap) {\n\t\t\t\tthis._updateSettings(true);\n\t\t\t}\n\t\t});\n\n\t\tthis._cursorPositions = [{ position: new Position(1, 1), color: this._settings.cursorColorSingle }];\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._tokensColorTrackerListener.dispose();\n\t}\n\n\tprivate _updateSettings(renderNow: boolean): boolean {\n\t\tconst newSettings = new Settings(this._context.configuration, this._context.theme);\n\t\tif (this._settings && this._settings.equals(newSettings)) {\n\t\t\t// nothing to do\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._settings = newSettings;\n\n\t\tthis._domNode.setTop(this._settings.top);\n\t\tthis._domNode.setRight(this._settings.right);\n\t\tthis._domNode.setWidth(this._settings.domWidth);\n\t\tthis._domNode.setHeight(this._settings.domHeight);\n\t\tthis._domNode.domNode.width = this._settings.canvasWidth;\n\t\tthis._domNode.domNode.height = this._settings.canvasHeight;\n\n\t\tif (renderNow) {\n\t\t\tthis._render();\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// ---- begin view event handlers\n\n\tprivate _markRenderingIsNeeded(): true {\n\t\tthis._actualShouldRender = ShouldRenderValue.Needed;\n\t\treturn true;\n\t}\n\n\tprivate _markRenderingIsMaybeNeeded(): true {\n\t\tthis._actualShouldRender = ShouldRenderValue.Maybe;\n\t\treturn true;\n\t}\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\treturn this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._cursorPositions = [];\n\t\tfor (let i = 0, len = e.selections.length; i < len; i++) {\n\t\t\tlet color = this._settings.cursorColorSingle;\n\t\t\tif (len > 1) {\n\t\t\t\tcolor = i === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary;\n\t\t\t}\n\t\t\tthis._cursorPositions.push({ position: e.selections[i].getPosition(), color });\n\t\t}\n\t\tthis._cursorPositions.sort((a, b) => Position.compare(a.position, b.position));\n\t\treturn this._markRenderingIsMaybeNeeded();\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\tif (e.affectsOverviewRuler) {\n\t\t\treturn this._markRenderingIsMaybeNeeded();\n\t\t}\n\t\treturn false;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn this._markRenderingIsNeeded();\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn this._markRenderingIsNeeded();\n\t}\n\tpublic override onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n\t}\n\n\t// ---- end view event handlers\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._domNode.domNode;\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\t// Nothing to read\n\t}\n\n\tpublic render(editorCtx: RestrictedRenderingContext): void {\n\t\tthis._render();\n\t\tthis._actualShouldRender = ShouldRenderValue.NotNeeded;\n\t}\n\n\tprivate _render(): void {\n\t\tconst backgroundColor = this._settings.backgroundColor;\n\t\tif (this._settings.overviewRulerLanes === 0) {\n\t\t\t// overview ruler is off\n\t\t\tthis._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n\t\t\tthis._domNode.setDisplay('none');\n\t\t\treturn;\n\t\t}\n\n\t\tconst decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n\t\tdecorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n\n\t\tif (this._actualShouldRender === ShouldRenderValue.Maybe && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n\t\t\tthis._actualShouldRender = ShouldRenderValue.Needed;\n\t\t}\n\t\tif (this._actualShouldRender === ShouldRenderValue.Maybe && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.position.lineNumber === b.position.lineNumber && a.color === b.color)) {\n\t\t\tthis._actualShouldRender = ShouldRenderValue.Needed;\n\t\t}\n\t\tif (this._actualShouldRender === ShouldRenderValue.Maybe) {\n\t\t\t// both decorations and cursor positions are unchanged, nothing to do\n\t\t\treturn;\n\t\t}\n\t\tthis._renderedDecorations = decorations;\n\t\tthis._renderedCursorPositions = this._cursorPositions;\n\n\t\tthis._domNode.setDisplay('block');\n\t\tconst canvasWidth = this._settings.canvasWidth;\n\t\tconst canvasHeight = this._settings.canvasHeight;\n\t\tconst lineHeight = this._settings.lineHeight;\n\t\tconst viewLayout = this._context.viewLayout;\n\t\tconst outerHeight = this._context.viewLayout.getScrollHeight();\n\t\tconst heightRatio = canvasHeight / outerHeight;\n\n\t\tconst minDecorationHeight = (Constants.MIN_DECORATION_HEIGHT * this._settings.pixelRatio) | 0;\n\t\tconst halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n\n\t\tconst canvasCtx = this._domNode.domNode.getContext('2d')!;\n\t\tif (backgroundColor) {\n\t\t\tif (backgroundColor.isOpaque()) {\n\t\t\t\t// We have a background color which is opaque, we can just paint the entire surface with it\n\t\t\t\tcanvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n\t\t\t\tcanvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\t\t} else {\n\t\t\t\t// We have a background color which is transparent, we need to first clear the surface and\n\t\t\t\t// then fill it\n\t\t\t\tcanvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t\t\t\tcanvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n\t\t\t\tcanvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\t\t}\n\t\t} else {\n\t\t\t// We don't have a background color\n\t\t\tcanvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t\t}\n\n\t\tconst x = this._settings.x;\n\t\tconst w = this._settings.w;\n\n\n\n\t\tfor (const decorationGroup of decorations) {\n\t\t\tconst color = decorationGroup.color;\n\t\t\tconst decorationGroupData = decorationGroup.data;\n\n\t\t\tcanvasCtx.fillStyle = color;\n\n\t\t\tlet prevLane = 0;\n\t\t\tlet prevY1 = 0;\n\t\t\tlet prevY2 = 0;\n\t\t\tfor (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n\t\t\t\tconst lane = decorationGroupData[3 * i];\n\t\t\t\tconst startLineNumber = decorationGroupData[3 * i + 1];\n\t\t\t\tconst endLineNumber = decorationGroupData[3 * i + 2];\n\n\t\t\t\tlet y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n\t\t\t\tlet y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n\t\t\t\tconst height = y2 - y1;\n\t\t\t\tif (height < minDecorationHeight) {\n\t\t\t\t\tlet yCenter = ((y1 + y2) / 2) | 0;\n\t\t\t\t\tif (yCenter < halfMinDecorationHeight) {\n\t\t\t\t\t\tyCenter = halfMinDecorationHeight;\n\t\t\t\t\t} else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n\t\t\t\t\t\tyCenter = canvasHeight - halfMinDecorationHeight;\n\t\t\t\t\t}\n\t\t\t\t\ty1 = yCenter - halfMinDecorationHeight;\n\t\t\t\t\ty2 = yCenter + halfMinDecorationHeight;\n\t\t\t\t}\n\n\t\t\t\tif (y1 > prevY2 + 1 || lane !== prevLane) {\n\t\t\t\t\t// flush prev\n\t\t\t\t\tif (i !== 0) {\n\t\t\t\t\t\tcanvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n\t\t\t\t\t}\n\t\t\t\t\tprevLane = lane;\n\t\t\t\t\tprevY1 = y1;\n\t\t\t\t\tprevY2 = y2;\n\t\t\t\t} else {\n\t\t\t\t\t// merge into prev\n\t\t\t\t\tif (y2 > prevY2) {\n\t\t\t\t\t\tprevY2 = y2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcanvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n\t\t}\n\n\t\t// Draw cursors\n\t\tif (!this._settings.hideCursor) {\n\t\t\tconst cursorHeight = (2 * this._settings.pixelRatio) | 0;\n\t\t\tconst halfCursorHeight = (cursorHeight / 2) | 0;\n\t\t\tconst cursorX = this._settings.x[OverviewRulerLane.Full];\n\t\t\tconst cursorW = this._settings.w[OverviewRulerLane.Full];\n\n\t\t\tlet prevY1 = -100;\n\t\t\tlet prevY2 = -100;\n\t\t\tlet prevColor: string | null = null;\n\t\t\tfor (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n\t\t\t\tconst color = this._cursorPositions[i].color;\n\t\t\t\tif (!color) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst cursor = this._cursorPositions[i].position;\n\n\t\t\t\tlet yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n\t\t\t\tif (yCenter < halfCursorHeight) {\n\t\t\t\t\tyCenter = halfCursorHeight;\n\t\t\t\t} else if (yCenter + halfCursorHeight > canvasHeight) {\n\t\t\t\t\tyCenter = canvasHeight - halfCursorHeight;\n\t\t\t\t}\n\t\t\t\tconst y1 = yCenter - halfCursorHeight;\n\t\t\t\tconst y2 = y1 + cursorHeight;\n\n\t\t\t\tif (y1 > prevY2 + 1 || color !== prevColor) {\n\t\t\t\t\t// flush prev\n\t\t\t\t\tif (i !== 0 && prevColor) {\n\t\t\t\t\t\tcanvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n\t\t\t\t\t}\n\t\t\t\t\tprevY1 = y1;\n\t\t\t\t\tprevY2 = y2;\n\t\t\t\t} else {\n\t\t\t\t\t// merge into prev\n\t\t\t\t\tif (y2 > prevY2) {\n\t\t\t\t\t\tprevY2 = y2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprevColor = color;\n\t\t\t\tcanvasCtx.fillStyle = color;\n\t\t\t}\n\t\t\tif (prevColor) {\n\t\t\t\tcanvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n\t\t\t}\n\t\t}\n\n\t\tif (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n\t\t\tcanvasCtx.beginPath();\n\t\t\tcanvasCtx.lineWidth = 1;\n\t\t\tcanvasCtx.strokeStyle = this._settings.borderColor;\n\t\t\tcanvasCtx.moveTo(0, 0);\n\t\t\tcanvasCtx.lineTo(0, canvasHeight);\n\t\t\tcanvasCtx.moveTo(1, 0);\n\t\t\tcanvasCtx.lineTo(canvasWidth, 0);\n\t\t\tcanvasCtx.stroke();\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants", "OverviewRulerLane", "ShouldRenderValue"]
}
