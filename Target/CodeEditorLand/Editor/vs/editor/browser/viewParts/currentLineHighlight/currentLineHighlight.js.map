{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport { RenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\n\nexport abstract class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n\tprivate readonly _context: ViewContext;\n\tprotected _renderLineHighlight: 'none' | 'gutter' | 'line' | 'all';\n\tprotected _wordWrap: boolean;\n\tprotected _contentLeft: number;\n\tprotected _contentWidth: number;\n\tprotected _selectionIsEmpty: boolean;\n\tprotected _renderLineHighlightOnlyWhenFocus: boolean;\n\tprotected _focused: boolean;\n\t/**\n\t * Unique sorted list of view line numbers which have cursors sitting on them.\n\t */\n\tprivate _cursorLineNumbers: number[];\n\tprivate _selections: Selection[];\n\tprivate _renderData: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis._renderLineHighlight = options.get(EditorOption.renderLineHighlight);\n\t\tthis._renderLineHighlightOnlyWhenFocus = options.get(EditorOption.renderLineHighlightOnlyWhenFocus);\n\t\tthis._wordWrap = layoutInfo.isViewportWrapping;\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\tthis._selectionIsEmpty = true;\n\t\tthis._focused = false;\n\t\tthis._cursorLineNumbers = [1];\n\t\tthis._selections = [new Selection(1, 1, 1, 1)];\n\t\tthis._renderData = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tsuper.dispose();\n\t}\n\n\tprivate _readFromSelections(): boolean {\n\t\tlet hasChanged = false;\n\n\t\tconst lineNumbers = new Set<number>();\n\t\tfor (const selection of this._selections) {\n\t\t\tlineNumbers.add(selection.positionLineNumber);\n\t\t}\n\t\tconst cursorsLineNumbers = Array.from(lineNumbers);\n\t\tcursorsLineNumbers.sort((a, b) => a - b);\n\t\tif (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n\t\t\tthis._cursorLineNumbers = cursorsLineNumbers;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst selectionIsEmpty = this._selections.every(s => s.isEmpty());\n\t\tif (this._selectionIsEmpty !== selectionIsEmpty) {\n\t\t\tthis._selectionIsEmpty = selectionIsEmpty;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\treturn hasChanged;\n\t}\n\n\t// --- begin event handlers\n\tpublic override onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn this._readFromSelections();\n\t}\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis._renderLineHighlight = options.get(EditorOption.renderLineHighlight);\n\t\tthis._renderLineHighlightOnlyWhenFocus = options.get(EditorOption.renderLineHighlightOnlyWhenFocus);\n\t\tthis._wordWrap = layoutInfo.isViewportWrapping;\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\treturn true;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections;\n\t\treturn this._readFromSelections();\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollWidthChanged || e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean {\n\t\tif (!this._renderLineHighlightOnlyWhenFocus) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._focused = e.isFocused;\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._shouldRenderThis()) {\n\t\t\tthis._renderData = null;\n\t\t\treturn;\n\t\t}\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\t// initialize renderData\n\t\tconst renderData: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\trenderData[lineIndex] = '';\n\t\t}\n\n\t\tif (this._wordWrap) {\n\t\t\t// do a first pass to render wrapped lines\n\t\t\tconst renderedLineWrapped = this._renderOne(ctx, false);\n\t\t\tfor (const cursorLineNumber of this._cursorLineNumbers) {\n\n\t\t\t\tconst coordinatesConverter = this._context.viewModel.coordinatesConverter;\n\t\t\t\tconst modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n\t\t\t\tconst firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n\t\t\t\tconst lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n\n\t\t\t\tconst firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n\t\t\t\tconst lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n\t\t\t\tfor (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n\t\t\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\t\t\trenderData[lineIndex] = renderedLineWrapped;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// do a second pass to render exact lines\n\t\tconst renderedLineExact = this._renderOne(ctx, true);\n\t\tfor (const cursorLineNumber of this._cursorLineNumbers) {\n\t\t\tif (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lineIndex = cursorLineNumber - visibleStartLineNumber;\n\t\t\trenderData[lineIndex] = renderedLineExact;\n\t\t}\n\n\t\tthis._renderData = renderData;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderData) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex >= this._renderData.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderData[lineIndex];\n\t}\n\n\tprotected _shouldRenderInMargin(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n\t\t\t&& (!this._renderLineHighlightOnlyWhenFocus || this._focused)\n\t\t);\n\t}\n\n\tprotected _shouldRenderInContent(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n\t\t\t&& this._selectionIsEmpty\n\t\t\t&& (!this._renderLineHighlightOnlyWhenFocus || this._focused)\n\t\t);\n\t}\n\n\tprotected abstract _shouldRenderThis(): boolean;\n\tprotected abstract _shouldRenderOther(): boolean;\n\tprotected abstract _renderOne(ctx: RenderingContext, exact: boolean): string;\n}\n\n/**\n * Emphasizes the current line by drawing a border around it.\n */\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n\n\tprotected _renderOne(ctx: RenderingContext, exact: boolean): string {\n\t\tconst className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n\t\treturn `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px;\"></div>`;\n\t}\n\tprotected _shouldRenderThis(): boolean {\n\t\treturn this._shouldRenderInContent();\n\t}\n\tprotected _shouldRenderOther(): boolean {\n\t\treturn this._shouldRenderInMargin();\n\t}\n}\n\n/**\n * Emphasizes the current line margin/gutter by drawing a border around it.\n */\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n\tprotected _renderOne(ctx: RenderingContext, exact: boolean): string {\n\t\tconst className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n\t\treturn `<div class=\"${className}\" style=\"width:${this._contentLeft}px\"></div>`;\n\t}\n\tprotected _shouldRenderThis(): boolean {\n\t\treturn true;\n\t}\n\tprotected _shouldRenderOther(): boolean {\n\t\treturn this._shouldRenderInContent();\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst lineHighlight = theme.getColor(editorLineHighlight);\n\tif (lineHighlight) {\n\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n\t}\n\tif (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n\t\tconst lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\t\tif (lineHighlightBorder) {\n\t\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t\tif (isHighContrast(theme.type)) {\n\t\t\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n\t\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n\t\t\t}\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
