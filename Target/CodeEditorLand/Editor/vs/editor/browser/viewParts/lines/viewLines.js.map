{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/lines/viewLines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { FastDomNode } from \"../../../../base/browser/fastDomNode.js\";\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from \"../../../../base/browser/ui/mouseCursor/mouseCursor.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport { Constants } from \"../../../../base/common/uint.js\";\nimport \"./viewLines.css\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type { Selection } from \"../../../common/core/selection.js\";\nimport { ScrollType } from \"../../../common/editorCommon.js\";\nimport * as viewEvents from \"../../../common/viewEvents.js\";\nimport type { ViewportData } from \"../../../common/viewLayout/viewLinesViewportData.js\";\nimport type { Viewport } from \"../../../common/viewModel.js\";\nimport type { ViewContext } from \"../../../common/viewModel/viewContext.js\";\nimport { applyFontInfo } from \"../../config/domFontInfo.js\";\nimport {\n\tHorizontalPosition,\n\tHorizontalRange,\n\ttype IViewLines,\n\tLineVisibleRanges,\n\ttype VisibleRanges,\n} from \"../../view/renderingContext.js\";\nimport { VisibleLinesCollection } from \"../../view/viewLayer.js\";\nimport {\n\tPartFingerprint,\n\tPartFingerprints,\n\tViewPart,\n} from \"../../view/viewPart.js\";\nimport { DomReadingContext } from \"./domReadingContext.js\";\nimport { ViewLine } from \"./viewLine.js\";\nimport { ViewLineOptions } from \"./viewLineOptions.js\";\n\nclass LastRenderedData {\n\tprivate _currentVisibleRange: Range;\n\n\tconstructor() {\n\t\tthis._currentVisibleRange = new Range(1, 1, 1, 1);\n\t}\n\n\tpublic getCurrentVisibleRange(): Range {\n\t\treturn this._currentVisibleRange;\n\t}\n\n\tpublic setCurrentVisibleRange(currentVisibleRange: Range): void {\n\t\tthis._currentVisibleRange = currentVisibleRange;\n\t}\n}\n\nclass HorizontalRevealRangeRequest {\n\tpublic readonly type = \"range\";\n\tpublic readonly minLineNumber: number;\n\tpublic readonly maxLineNumber: number;\n\n\tconstructor(\n\t\tpublic readonly minimalReveal: boolean,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumn: number,\n\t\tpublic readonly startScrollTop: number,\n\t\tpublic readonly stopScrollTop: number,\n\t\tpublic readonly scrollType: ScrollType,\n\t) {\n\t\tthis.minLineNumber = lineNumber;\n\t\tthis.maxLineNumber = lineNumber;\n\t}\n}\n\nclass HorizontalRevealSelectionsRequest {\n\tpublic readonly type = \"selections\";\n\tpublic readonly minLineNumber: number;\n\tpublic readonly maxLineNumber: number;\n\n\tconstructor(\n\t\tpublic readonly minimalReveal: boolean,\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly startScrollTop: number,\n\t\tpublic readonly stopScrollTop: number,\n\t\tpublic readonly scrollType: ScrollType,\n\t) {\n\t\tlet minLineNumber = selections[0].startLineNumber;\n\t\tlet maxLineNumber = selections[0].endLineNumber;\n\t\tfor (let i = 1, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\t\t\tminLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n\t\t\tmaxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n\t\t}\n\t\tthis.minLineNumber = minLineNumber;\n\t\tthis.maxLineNumber = maxLineNumber;\n\t}\n}\n\ntype HorizontalRevealRequest =\n\t| HorizontalRevealRangeRequest\n\t| HorizontalRevealSelectionsRequest;\n\n/**\n * The view lines part is responsible for rendering the actual content of a\n * file.\n */\nexport class ViewLines extends ViewPart implements IViewLines {\n\t/**\n\t * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n\t */\n\tprivate static readonly HORIZONTAL_EXTRA_PX = 30;\n\n\tprivate readonly _linesContent: FastDomNode<HTMLElement>;\n\tprivate readonly _textRangeRestingSpot: HTMLElement;\n\tprivate readonly _visibleLines: VisibleLinesCollection<ViewLine>;\n\tprivate readonly domNode: FastDomNode<HTMLElement>;\n\n\t// --- config\n\tprivate _lineHeight: number;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _isViewportWrapping: boolean;\n\tprivate _revealHorizontalRightPadding: number;\n\tprivate _cursorSurroundingLines: number;\n\tprivate _cursorSurroundingLinesStyle: \"default\" | \"all\";\n\tprivate _canUseLayerHinting: boolean;\n\tprivate _viewLineOptions: ViewLineOptions;\n\n\t// --- width\n\tprivate _maxLineWidth: number;\n\tprivate readonly _asyncUpdateLineWidths: RunOnceScheduler;\n\tprivate readonly _asyncCheckMonospaceFontAssumptions: RunOnceScheduler;\n\n\tprivate _horizontalRevealRequest: HorizontalRevealRequest | null;\n\tprivate readonly _lastRenderedData: LastRenderedData;\n\n\t// Sticky Scroll\n\tprivate _stickyScrollEnabled: boolean;\n\tprivate _maxNumberStickyLines: number;\n\n\tconstructor(context: ViewContext, linesContent: FastDomNode<HTMLElement>) {\n\t\tsuper(context);\n\n\t\tconst conf = this._context.configuration;\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._typicalHalfwidthCharacterWidth =\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._isViewportWrapping = wrappingInfo.isViewportWrapping;\n\t\tthis._revealHorizontalRightPadding = options.get(\n\t\t\tEditorOption.revealHorizontalRightPadding,\n\t\t);\n\t\tthis._cursorSurroundingLines = options.get(\n\t\t\tEditorOption.cursorSurroundingLines,\n\t\t);\n\t\tthis._cursorSurroundingLinesStyle = options.get(\n\t\t\tEditorOption.cursorSurroundingLinesStyle,\n\t\t);\n\t\tthis._canUseLayerHinting = !options.get(\n\t\t\tEditorOption.disableLayerHinting,\n\t\t);\n\t\tthis._viewLineOptions = new ViewLineOptions(\n\t\t\tconf,\n\t\t\tthis._context.theme.type,\n\t\t);\n\n\t\tthis._linesContent = linesContent;\n\t\tthis._textRangeRestingSpot = document.createElement(\"div\");\n\t\tthis._visibleLines = new VisibleLinesCollection({\n\t\t\tcreateLine: () => new ViewLine(this._viewLineOptions),\n\t\t});\n\t\tthis.domNode = this._visibleLines.domNode;\n\n\t\tPartFingerprints.write(this.domNode, PartFingerprint.ViewLines);\n\t\tthis.domNode.setClassName(\n\t\t\t`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`,\n\t\t);\n\t\tapplyFontInfo(this.domNode, fontInfo);\n\n\t\t// --- width & height\n\t\tthis._maxLineWidth = 0;\n\t\tthis._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n\t\t\tthis._updateLineWidthsSlow();\n\t\t}, 200);\n\t\tthis._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n\t\t\tthis._checkMonospaceFontAssumptions();\n\t\t}, 2000);\n\n\t\tthis._lastRenderedData = new LastRenderedData();\n\n\t\tthis._horizontalRevealRequest = null;\n\n\t\t// sticky scroll widget\n\t\tthis._stickyScrollEnabled = options.get(\n\t\t\tEditorOption.stickyScroll,\n\t\t).enabled;\n\t\tthis._maxNumberStickyLines = options.get(\n\t\t\tEditorOption.stickyScroll,\n\t\t).maxLineCount;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._asyncUpdateLineWidths.dispose();\n\t\tthis._asyncCheckMonospaceFontAssumptions.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this.domNode;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic override onConfigurationChanged(\n\t\te: viewEvents.ViewConfigurationChangedEvent,\n\t): boolean {\n\t\tthis._visibleLines.onConfigurationChanged(e);\n\t\tif (e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\tthis._maxLineWidth = 0;\n\t\t}\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._typicalHalfwidthCharacterWidth =\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._isViewportWrapping = wrappingInfo.isViewportWrapping;\n\t\tthis._revealHorizontalRightPadding = options.get(\n\t\t\tEditorOption.revealHorizontalRightPadding,\n\t\t);\n\t\tthis._cursorSurroundingLines = options.get(\n\t\t\tEditorOption.cursorSurroundingLines,\n\t\t);\n\t\tthis._cursorSurroundingLinesStyle = options.get(\n\t\t\tEditorOption.cursorSurroundingLinesStyle,\n\t\t);\n\t\tthis._canUseLayerHinting = !options.get(\n\t\t\tEditorOption.disableLayerHinting,\n\t\t);\n\n\t\t// sticky scroll\n\t\tthis._stickyScrollEnabled = options.get(\n\t\t\tEditorOption.stickyScroll,\n\t\t).enabled;\n\t\tthis._maxNumberStickyLines = options.get(\n\t\t\tEditorOption.stickyScroll,\n\t\t).maxLineCount;\n\n\t\tapplyFontInfo(this.domNode, fontInfo);\n\n\t\tthis._onOptionsMaybeChanged();\n\n\t\tif (e.hasChanged(EditorOption.layoutInfo)) {\n\t\t\tthis._maxLineWidth = 0;\n\t\t}\n\n\t\treturn true;\n\t}\n\tprivate _onOptionsMaybeChanged(): boolean {\n\t\tconst conf = this._context.configuration;\n\n\t\tconst newViewLineOptions = new ViewLineOptions(\n\t\t\tconf,\n\t\t\tthis._context.theme.type,\n\t\t);\n\t\tif (!this._viewLineOptions.equals(newViewLineOptions)) {\n\t\t\tthis._viewLineOptions = newViewLineOptions;\n\n\t\t\tconst startLineNumber = this._visibleLines.getStartLineNumber();\n\t\t\tconst endLineNumber = this._visibleLines.getEndLineNumber();\n\t\t\tfor (\n\t\t\t\tlet lineNumber = startLineNumber;\n\t\t\t\tlineNumber <= endLineNumber;\n\t\t\t\tlineNumber++\n\t\t\t) {\n\t\t\t\tconst line = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\t\tline.onOptionsChanged(this._viewLineOptions);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\tpublic override onCursorStateChanged(\n\t\te: viewEvents.ViewCursorStateChangedEvent,\n\t): boolean {\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tlet r = false;\n\t\tfor (\n\t\t\tlet lineNumber = rendStartLineNumber;\n\t\t\tlineNumber <= rendEndLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tr =\n\t\t\t\tthis._visibleLines\n\t\t\t\t\t.getVisibleLine(lineNumber)\n\t\t\t\t\t.onSelectionChanged() || r;\n\t\t}\n\t\treturn r;\n\t}\n\tpublic override onDecorationsChanged(\n\t\te: viewEvents.ViewDecorationsChangedEvent,\n\t): boolean {\n\t\tif (true /*e.inlineDecorationsChanged*/) {\n\t\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\t\tfor (\n\t\t\t\tlet lineNumber = rendStartLineNumber;\n\t\t\t\tlineNumber <= rendEndLineNumber;\n\t\t\t\tlineNumber++\n\t\t\t) {\n\t\t\t\tthis._visibleLines\n\t\t\t\t\t.getVisibleLine(lineNumber)\n\t\t\t\t\t.onDecorationsChanged();\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\tconst shouldRender = this._visibleLines.onFlushed(e);\n\t\tthis._maxLineWidth = 0;\n\t\treturn shouldRender;\n\t}\n\tpublic override onLinesChanged(\n\t\te: viewEvents.ViewLinesChangedEvent,\n\t): boolean {\n\t\treturn this._visibleLines.onLinesChanged(e);\n\t}\n\tpublic override onLinesDeleted(\n\t\te: viewEvents.ViewLinesDeletedEvent,\n\t): boolean {\n\t\treturn this._visibleLines.onLinesDeleted(e);\n\t}\n\tpublic override onLinesInserted(\n\t\te: viewEvents.ViewLinesInsertedEvent,\n\t): boolean {\n\t\treturn this._visibleLines.onLinesInserted(e);\n\t}\n\tpublic override onRevealRangeRequest(\n\t\te: viewEvents.ViewRevealRangeRequestEvent,\n\t): boolean {\n\t\t// Using the future viewport here in order to handle multiple\n\t\t// incoming reveal range requests that might all desire to be animated\n\t\tconst desiredScrollTop = this._computeScrollTopToRevealRange(\n\t\t\tthis._context.viewLayout.getFutureViewport(),\n\t\t\te.source,\n\t\t\te.minimalReveal,\n\t\t\te.range,\n\t\t\te.selections,\n\t\t\te.verticalType,\n\t\t);\n\n\t\tif (desiredScrollTop === -1) {\n\t\t\t// marker to abort the reveal range request\n\t\t\treturn false;\n\t\t}\n\n\t\t// validate the new desired scroll top\n\t\tlet newScrollPosition = this._context.viewLayout.validateScrollPosition(\n\t\t\t{ scrollTop: desiredScrollTop },\n\t\t);\n\n\t\tif (e.revealHorizontal) {\n\t\t\tif (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n\t\t\t\t// Two or more lines? => scroll to base (That's how you see most of the two lines)\n\t\t\t\tnewScrollPosition = {\n\t\t\t\t\tscrollTop: newScrollPosition.scrollTop,\n\t\t\t\t\tscrollLeft: 0,\n\t\t\t\t};\n\t\t\t} else if (e.range) {\n\t\t\t\t// We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n\t\t\t\tthis._horizontalRevealRequest =\n\t\t\t\t\tnew HorizontalRevealRangeRequest(\n\t\t\t\t\t\te.minimalReveal,\n\t\t\t\t\t\te.range.startLineNumber,\n\t\t\t\t\t\te.range.startColumn,\n\t\t\t\t\t\te.range.endColumn,\n\t\t\t\t\t\tthis._context.viewLayout.getCurrentScrollTop(),\n\t\t\t\t\t\tnewScrollPosition.scrollTop,\n\t\t\t\t\t\te.scrollType,\n\t\t\t\t\t);\n\t\t\t} else if (e.selections && e.selections.length > 0) {\n\t\t\t\tthis._horizontalRevealRequest =\n\t\t\t\t\tnew HorizontalRevealSelectionsRequest(\n\t\t\t\t\t\te.minimalReveal,\n\t\t\t\t\t\te.selections,\n\t\t\t\t\t\tthis._context.viewLayout.getCurrentScrollTop(),\n\t\t\t\t\t\tnewScrollPosition.scrollTop,\n\t\t\t\t\t\te.scrollType,\n\t\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._horizontalRevealRequest = null;\n\t\t}\n\n\t\tconst scrollTopDelta = Math.abs(\n\t\t\tthis._context.viewLayout.getCurrentScrollTop() -\n\t\t\t\tnewScrollPosition.scrollTop,\n\t\t);\n\t\tconst scrollType =\n\t\t\tscrollTopDelta <= this._lineHeight\n\t\t\t\t? ScrollType.Immediate\n\t\t\t\t: e.scrollType;\n\t\tthis._context.viewModel.viewLayout.setScrollPosition(\n\t\t\tnewScrollPosition,\n\t\t\tscrollType,\n\t\t);\n\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(\n\t\te: viewEvents.ViewScrollChangedEvent,\n\t): boolean {\n\t\tif (this._horizontalRevealRequest && e.scrollLeftChanged) {\n\t\t\t// cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n\t\t\tthis._horizontalRevealRequest = null;\n\t\t}\n\t\tif (this._horizontalRevealRequest && e.scrollTopChanged) {\n\t\t\tconst min = Math.min(\n\t\t\t\tthis._horizontalRevealRequest.startScrollTop,\n\t\t\t\tthis._horizontalRevealRequest.stopScrollTop,\n\t\t\t);\n\t\t\tconst max = Math.max(\n\t\t\t\tthis._horizontalRevealRequest.startScrollTop,\n\t\t\t\tthis._horizontalRevealRequest.stopScrollTop,\n\t\t\t);\n\t\t\tif (e.scrollTop < min || e.scrollTop > max) {\n\t\t\t\t// cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n\t\t\t\tthis._horizontalRevealRequest = null;\n\t\t\t}\n\t\t}\n\t\tthis.domNode.setWidth(e.scrollWidth);\n\t\treturn this._visibleLines.onScrollChanged(e) || true;\n\t}\n\n\tpublic override onTokensChanged(\n\t\te: viewEvents.ViewTokensChangedEvent,\n\t): boolean {\n\t\treturn this._visibleLines.onTokensChanged(e);\n\t}\n\tpublic override onZonesChanged(\n\t\te: viewEvents.ViewZonesChangedEvent,\n\t): boolean {\n\t\tthis._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n\t\treturn this._visibleLines.onZonesChanged(e);\n\t}\n\tpublic override onThemeChanged(\n\t\te: viewEvents.ViewThemeChangedEvent,\n\t): boolean {\n\t\treturn this._onOptionsMaybeChanged();\n\t}\n\n\t// ---- end view event handlers\n\n\t// ----------- HELPERS FOR OTHERS\n\n\tpublic getPositionFromDOMInfo(\n\t\tspanNode: HTMLElement,\n\t\toffset: number,\n\t): Position | null {\n\t\tconst viewLineDomNode = this._getViewLineDomNode(spanNode);\n\t\tif (viewLineDomNode === null) {\n\t\t\t// Couldn't find view line node\n\t\t\treturn null;\n\t\t}\n\t\tconst lineNumber = this._getLineNumberFor(viewLineDomNode);\n\n\t\tif (lineNumber === -1) {\n\t\t\t// Couldn't find view line node\n\t\t\treturn null;\n\t\t}\n\n\t\tif (\n\t\t\tlineNumber < 1 ||\n\t\t\tlineNumber > this._context.viewModel.getLineCount()\n\t\t) {\n\t\t\t// lineNumber is outside range\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n\t\t\t// Line is empty\n\t\t\treturn new Position(lineNumber, 1);\n\t\t}\n\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tif (\n\t\t\tlineNumber < rendStartLineNumber ||\n\t\t\tlineNumber > rendEndLineNumber\n\t\t) {\n\t\t\t// Couldn't find line\n\t\t\treturn null;\n\t\t}\n\n\t\tlet column = this._visibleLines\n\t\t\t.getVisibleLine(lineNumber)\n\t\t\t.getColumnOfNodeOffset(spanNode, offset);\n\t\tconst minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n\t\tif (column < minColumn) {\n\t\t\tcolumn = minColumn;\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _getViewLineDomNode(node: HTMLElement | null): HTMLElement | null {\n\t\twhile (node && node.nodeType === 1) {\n\t\t\tif (node.className === ViewLine.CLASS_NAME) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t\tnode = node.parentElement;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @returns the line number of this view line dom node.\n\t */\n\tprivate _getLineNumberFor(domNode: HTMLElement): number {\n\t\tconst startLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst endLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (\n\t\t\tlet lineNumber = startLineNumber;\n\t\t\tlineNumber <= endLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst line = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\tif (domNode === line.getDomNode()) {\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic getLineWidth(lineNumber: number): number {\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tif (\n\t\t\tlineNumber < rendStartLineNumber ||\n\t\t\tlineNumber > rendEndLineNumber\n\t\t) {\n\t\t\t// Couldn't find line\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst context = new DomReadingContext(\n\t\t\tthis.domNode.domNode,\n\t\t\tthis._textRangeRestingSpot,\n\t\t);\n\t\tconst result = this._visibleLines\n\t\t\t.getVisibleLine(lineNumber)\n\t\t\t.getWidth(context);\n\t\tthis._updateLineWidthsSlowIfDomDidLayout(context);\n\n\t\treturn result;\n\t}\n\n\tpublic linesVisibleRangesForRange(\n\t\t_range: Range,\n\t\tincludeNewLines: boolean,\n\t): LineVisibleRanges[] | null {\n\t\tif (this.shouldRender()) {\n\t\t\t// Cannot read from the DOM because it is dirty\n\t\t\t// i.e. the model & the dom are out of sync, so I'd be reading something stale\n\t\t\treturn null;\n\t\t}\n\n\t\tconst originalEndLineNumber = _range.endLineNumber;\n\t\tconst range = Range.intersectRanges(\n\t\t\t_range,\n\t\t\tthis._lastRenderedData.getCurrentVisibleRange(),\n\t\t);\n\t\tif (!range) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst visibleRanges: LineVisibleRanges[] = [];\n\t\tlet visibleRangesLen = 0;\n\t\tconst domReadingContext = new DomReadingContext(\n\t\t\tthis.domNode.domNode,\n\t\t\tthis._textRangeRestingSpot,\n\t\t);\n\n\t\tlet nextLineModelLineNumber = 0;\n\t\tif (includeNewLines) {\n\t\t\tnextLineModelLineNumber =\n\t\t\t\tthis._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\tnew Position(range.startLineNumber, 1),\n\t\t\t\t).lineNumber;\n\t\t}\n\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (\n\t\t\tlet lineNumber = range.startLineNumber;\n\t\t\tlineNumber <= range.endLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tif (\n\t\t\t\tlineNumber < rendStartLineNumber ||\n\t\t\t\tlineNumber > rendEndLineNumber\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst startColumn =\n\t\t\t\tlineNumber === range.startLineNumber ? range.startColumn : 1;\n\t\t\tconst continuesInNextLine = lineNumber !== range.endLineNumber;\n\t\t\tconst endColumn = continuesInNextLine\n\t\t\t\t? this._context.viewModel.getLineMaxColumn(lineNumber)\n\t\t\t\t: range.endColumn;\n\t\t\tconst visibleRangesForLine = this._visibleLines\n\t\t\t\t.getVisibleLine(lineNumber)\n\t\t\t\t.getVisibleRangesForRange(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tstartColumn,\n\t\t\t\t\tendColumn,\n\t\t\t\t\tdomReadingContext,\n\t\t\t\t);\n\n\t\t\tif (!visibleRangesForLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (includeNewLines && lineNumber < originalEndLineNumber) {\n\t\t\t\tconst currentLineModelLineNumber = nextLineModelLineNumber;\n\t\t\t\tnextLineModelLineNumber =\n\t\t\t\t\tthis._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\t\tnew Position(lineNumber + 1, 1),\n\t\t\t\t\t).lineNumber;\n\n\t\t\t\tif (currentLineModelLineNumber !== nextLineModelLineNumber) {\n\t\t\t\t\tvisibleRangesForLine.ranges[\n\t\t\t\t\t\tvisibleRangesForLine.ranges.length - 1\n\t\t\t\t\t].width += this._typicalHalfwidthCharacterWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvisibleRanges[visibleRangesLen++] = new LineVisibleRanges(\n\t\t\t\tvisibleRangesForLine.outsideRenderedLine,\n\t\t\t\tlineNumber,\n\t\t\t\tHorizontalRange.from(visibleRangesForLine.ranges),\n\t\t\t\tcontinuesInNextLine,\n\t\t\t);\n\t\t}\n\n\t\tthis._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n\n\t\tif (visibleRangesLen === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn visibleRanges;\n\t}\n\n\tprivate _visibleRangesForLineRange(\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t): VisibleRanges | null {\n\t\tif (this.shouldRender()) {\n\t\t\t// Cannot read from the DOM because it is dirty\n\t\t\t// i.e. the model & the dom are out of sync, so I'd be reading something stale\n\t\t\treturn null;\n\t\t}\n\n\t\tif (\n\t\t\tlineNumber < this._visibleLines.getStartLineNumber() ||\n\t\t\tlineNumber > this._visibleLines.getEndLineNumber()\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst domReadingContext = new DomReadingContext(\n\t\t\tthis.domNode.domNode,\n\t\t\tthis._textRangeRestingSpot,\n\t\t);\n\t\tconst result = this._visibleLines\n\t\t\t.getVisibleLine(lineNumber)\n\t\t\t.getVisibleRangesForRange(\n\t\t\t\tlineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendColumn,\n\t\t\t\tdomReadingContext,\n\t\t\t);\n\t\tthis._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n\n\t\treturn result;\n\t}\n\n\tpublic visibleRangeForPosition(\n\t\tposition: Position,\n\t): HorizontalPosition | null {\n\t\tconst visibleRanges = this._visibleRangesForLineRange(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t\tposition.column,\n\t\t);\n\t\tif (!visibleRanges) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new HorizontalPosition(\n\t\t\tvisibleRanges.outsideRenderedLine,\n\t\t\tvisibleRanges.ranges[0].left,\n\t\t);\n\t}\n\n\t// --- implementation\n\n\tpublic updateLineWidths(): void {\n\t\tthis._updateLineWidths(false);\n\t}\n\n\t/**\n\t * Updates the max line width if it is fast to compute.\n\t * Returns true if all lines were taken into account.\n\t * Returns false if some lines need to be reevaluated (in a slow fashion).\n\t */\n\tprivate _updateLineWidthsFast(): boolean {\n\t\treturn this._updateLineWidths(true);\n\t}\n\n\tprivate _updateLineWidthsSlow(): void {\n\t\tthis._updateLineWidths(false);\n\t}\n\n\t/**\n\t * Update the line widths using DOM layout information after someone else\n\t * has caused a synchronous layout.\n\t */\n\tprivate _updateLineWidthsSlowIfDomDidLayout(\n\t\tdomReadingContext: DomReadingContext,\n\t): void {\n\t\tif (!domReadingContext.didDomLayout) {\n\t\t\t// only proceed if we just did a layout\n\t\t\treturn;\n\t\t}\n\t\tif (this._asyncUpdateLineWidths.isScheduled()) {\n\t\t\t// reading widths is not scheduled => widths are up-to-date\n\t\t\treturn;\n\t\t}\n\t\tthis._asyncUpdateLineWidths.cancel();\n\t\tthis._updateLineWidthsSlow();\n\t}\n\n\tprivate _updateLineWidths(fast: boolean): boolean {\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n\t\tlet localMaxLineWidth = 1;\n\t\tlet allWidthsComputed = true;\n\t\tfor (\n\t\t\tlet lineNumber = rendStartLineNumber;\n\t\t\tlineNumber <= rendEndLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\n\t\t\tif (fast && !visibleLine.getWidthIsFast()) {\n\t\t\t\t// Cannot compute width in a fast way for this line\n\t\t\t\tallWidthsComputed = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlocalMaxLineWidth = Math.max(\n\t\t\t\tlocalMaxLineWidth,\n\t\t\t\tvisibleLine.getWidth(null),\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tallWidthsComputed &&\n\t\t\trendStartLineNumber === 1 &&\n\t\t\trendEndLineNumber === this._context.viewModel.getLineCount()\n\t\t) {\n\t\t\t// we know the max line width for all the lines\n\t\t\tthis._maxLineWidth = 0;\n\t\t}\n\n\t\tthis._ensureMaxLineWidth(localMaxLineWidth);\n\n\t\treturn allWidthsComputed;\n\t}\n\n\tprivate _checkMonospaceFontAssumptions(): void {\n\t\t// Problems with monospace assumptions are more apparent for longer lines,\n\t\t// as small rounding errors start to sum up, so we will select the longest\n\t\t// line for a closer inspection\n\t\tlet longestLineNumber = -1;\n\t\tlet longestWidth = -1;\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (\n\t\t\tlet lineNumber = rendStartLineNumber;\n\t\t\tlineNumber <= rendEndLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\tif (visibleLine.needsMonospaceFontCheck()) {\n\t\t\t\tconst lineWidth = visibleLine.getWidth(null);\n\t\t\t\tif (lineWidth > longestWidth) {\n\t\t\t\t\tlongestWidth = lineWidth;\n\t\t\t\t\tlongestLineNumber = lineNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (longestLineNumber === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this._visibleLines\n\t\t\t\t.getVisibleLine(longestLineNumber)\n\t\t\t\t.monospaceAssumptionsAreValid()\n\t\t) {\n\t\t\tfor (\n\t\t\t\tlet lineNumber = rendStartLineNumber;\n\t\t\t\tlineNumber <= rendEndLineNumber;\n\t\t\t\tlineNumber++\n\t\t\t) {\n\t\t\t\tconst visibleLine =\n\t\t\t\t\tthis._visibleLines.getVisibleLine(lineNumber);\n\t\t\t\tvisibleLine.onMonospaceAssumptionsInvalidated();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic prepareRender(): void {\n\t\tthrow new Error(\"Not supported\");\n\t}\n\n\tpublic render(): void {\n\t\tthrow new Error(\"Not supported\");\n\t}\n\n\tpublic renderText(viewportData: ViewportData): void {\n\t\t// (1) render lines - ensures lines are in the DOM\n\t\tthis._visibleLines.renderLines(viewportData);\n\t\tthis._lastRenderedData.setCurrentVisibleRange(\n\t\t\tviewportData.visibleRange,\n\t\t);\n\t\tthis.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n\t\tthis.domNode.setHeight(\n\t\t\tMath.min(this._context.viewLayout.getScrollHeight(), 1000000),\n\t\t);\n\n\t\t// (2) compute horizontal scroll position:\n\t\t//  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n\t\t//  - it might change `scrollWidth` and `scrollLeft`\n\t\tif (this._horizontalRevealRequest) {\n\t\t\tconst horizontalRevealRequest = this._horizontalRevealRequest;\n\n\t\t\t// Check that we have the line that contains the horizontal range in the viewport\n\t\t\tif (\n\t\t\t\tviewportData.startLineNumber <=\n\t\t\t\t\thorizontalRevealRequest.minLineNumber &&\n\t\t\t\thorizontalRevealRequest.maxLineNumber <=\n\t\t\t\t\tviewportData.endLineNumber\n\t\t\t) {\n\t\t\t\tthis._horizontalRevealRequest = null;\n\n\t\t\t\t// allow `visibleRangesForRange2` to work\n\t\t\t\tthis.onDidRender();\n\n\t\t\t\t// compute new scroll position\n\t\t\t\tconst newScrollLeft = this._computeScrollLeftToReveal(\n\t\t\t\t\thorizontalRevealRequest,\n\t\t\t\t);\n\n\t\t\t\tif (newScrollLeft) {\n\t\t\t\t\tif (!this._isViewportWrapping) {\n\t\t\t\t\t\t// ensure `scrollWidth` is large enough\n\t\t\t\t\t\tthis._ensureMaxLineWidth(\n\t\t\t\t\t\t\tnewScrollLeft.maxHorizontalOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// set `scrollLeft`\n\t\t\t\t\tthis._context.viewModel.viewLayout.setScrollPosition(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tscrollLeft: newScrollLeft.scrollLeft,\n\t\t\t\t\t\t},\n\t\t\t\t\t\thorizontalRevealRequest.scrollType,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n\t\tif (this._updateLineWidthsFast()) {\n\t\t\tthis._asyncUpdateLineWidths.cancel();\n\t\t} else {\n\t\t\t// Computing the width of some lines would be slow => delay it\n\t\t\tthis._asyncUpdateLineWidths.schedule();\n\t\t}\n\n\t\tif (\n\t\t\tplatform.isLinux &&\n\t\t\t!this._asyncCheckMonospaceFontAssumptions.isScheduled()\n\t\t) {\n\t\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\t\tfor (\n\t\t\t\tlet lineNumber = rendStartLineNumber;\n\t\t\t\tlineNumber <= rendEndLineNumber;\n\t\t\t\tlineNumber++\n\t\t\t) {\n\t\t\t\tconst visibleLine =\n\t\t\t\t\tthis._visibleLines.getVisibleLine(lineNumber);\n\t\t\t\tif (visibleLine.needsMonospaceFontCheck()) {\n\t\t\t\t\tthis._asyncCheckMonospaceFontAssumptions.schedule();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) handle scrolling\n\t\tthis._linesContent.setLayerHinting(this._canUseLayerHinting);\n\t\tthis._linesContent.setContain(\"strict\");\n\t\tconst adjustedScrollTop =\n\t\t\tthis._context.viewLayout.getCurrentScrollTop() -\n\t\t\tviewportData.bigNumbersDelta;\n\t\tthis._linesContent.setTop(-adjustedScrollTop);\n\t\tthis._linesContent.setLeft(\n\t\t\t-this._context.viewLayout.getCurrentScrollLeft(),\n\t\t);\n\t}\n\n\t// --- width\n\n\tprivate _ensureMaxLineWidth(lineWidth: number): void {\n\t\tconst iLineWidth = Math.ceil(lineWidth);\n\t\tif (this._maxLineWidth < iLineWidth) {\n\t\t\tthis._maxLineWidth = iLineWidth;\n\t\t\tthis._context.viewModel.viewLayout.setMaxLineWidth(\n\t\t\t\tthis._maxLineWidth,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _computeScrollTopToRevealRange(\n\t\tviewport: Viewport,\n\t\tsource: string | null | undefined,\n\t\tminimalReveal: boolean,\n\t\trange: Range | null,\n\t\tselections: Selection[] | null,\n\t\tverticalType: viewEvents.VerticalRevealType,\n\t): number {\n\t\tconst viewportStartY = viewport.top;\n\t\tconst viewportHeight = viewport.height;\n\t\tconst viewportEndY = viewportStartY + viewportHeight;\n\t\tlet boxIsSingleRange: boolean;\n\t\tlet boxStartY: number;\n\t\tlet boxEndY: number;\n\n\t\tif (selections && selections.length > 0) {\n\t\t\tlet minLineNumber = selections[0].startLineNumber;\n\t\t\tlet maxLineNumber = selections[0].endLineNumber;\n\t\t\tfor (let i = 1, len = selections.length; i < len; i++) {\n\t\t\t\tconst selection = selections[i];\n\t\t\t\tminLineNumber = Math.min(\n\t\t\t\t\tminLineNumber,\n\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t);\n\t\t\t\tmaxLineNumber = Math.max(\n\t\t\t\t\tmaxLineNumber,\n\t\t\t\t\tselection.endLineNumber,\n\t\t\t\t);\n\t\t\t}\n\t\t\tboxIsSingleRange = false;\n\t\t\tboxStartY =\n\t\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\t\tminLineNumber,\n\t\t\t\t);\n\t\t\tboxEndY =\n\t\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\t\tmaxLineNumber,\n\t\t\t\t) + this._lineHeight;\n\t\t} else if (range) {\n\t\t\tboxIsSingleRange = true;\n\t\t\tboxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\trange.startLineNumber,\n\t\t\t);\n\t\t\tboxEndY =\n\t\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\t\trange.endLineNumber,\n\t\t\t\t) + this._lineHeight;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst shouldIgnoreScrollOff =\n\t\t\t(source === \"mouse\" || minimalReveal) &&\n\t\t\tthis._cursorSurroundingLinesStyle === \"default\";\n\n\t\tlet paddingTop = 0;\n\t\tlet paddingBottom = 0;\n\n\t\tif (shouldIgnoreScrollOff) {\n\t\t\tif (!minimalReveal) {\n\t\t\t\t// Reveal one more line above (this case is hit when dragging)\n\t\t\t\tpaddingTop = this._lineHeight;\n\t\t\t}\n\t\t} else {\n\t\t\tconst maxLinesInViewport = viewportHeight / this._lineHeight;\n\t\t\tconst surroundingLines = Math.max(\n\t\t\t\tthis._cursorSurroundingLines,\n\t\t\t\tthis._stickyScrollEnabled ? this._maxNumberStickyLines : 0,\n\t\t\t);\n\t\t\tconst context = Math.min(maxLinesInViewport / 2, surroundingLines);\n\t\t\tpaddingTop = context * this._lineHeight;\n\t\t\tpaddingBottom = Math.max(0, context - 1) * this._lineHeight;\n\t\t}\n\t\tif (!minimalReveal) {\n\t\t\tif (\n\t\t\t\tverticalType === viewEvents.VerticalRevealType.Simple ||\n\t\t\t\tverticalType === viewEvents.VerticalRevealType.Bottom\n\t\t\t) {\n\t\t\t\t// Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n\t\t\t\tpaddingBottom += this._lineHeight;\n\t\t\t}\n\t\t}\n\n\t\tboxStartY -= paddingTop;\n\t\tboxEndY += paddingBottom;\n\t\tlet newScrollTop: number;\n\n\t\tif (boxEndY - boxStartY > viewportHeight) {\n\t\t\t// the box is larger than the viewport ... scroll to its top\n\t\t\tif (!boxIsSingleRange) {\n\t\t\t\t// do not reveal multiple cursors if there are more than fit the viewport\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tnewScrollTop = boxStartY;\n\t\t} else if (\n\t\t\tverticalType === viewEvents.VerticalRevealType.NearTop ||\n\t\t\tverticalType ===\n\t\t\t\tviewEvents.VerticalRevealType.NearTopIfOutsideViewport\n\t\t) {\n\t\t\tif (\n\t\t\t\tverticalType ===\n\t\t\t\t\tviewEvents.VerticalRevealType.NearTopIfOutsideViewport &&\n\t\t\t\tviewportStartY <= boxStartY &&\n\t\t\t\tboxEndY <= viewportEndY\n\t\t\t) {\n\t\t\t\t// Box is already in the viewport... do nothing\n\t\t\t\tnewScrollTop = viewportStartY;\n\t\t\t} else {\n\t\t\t\t// We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n\t\t\t\tconst desiredGapAbove = Math.max(\n\t\t\t\t\t5 * this._lineHeight,\n\t\t\t\t\tviewportHeight * 0.2,\n\t\t\t\t);\n\t\t\t\t// Try to scroll just above the box with the desired gap\n\t\t\t\tconst desiredScrollTop = boxStartY - desiredGapAbove;\n\t\t\t\t// But ensure that the box is not pushed out of viewport\n\t\t\t\tconst minScrollTop = boxEndY - viewportHeight;\n\t\t\t\tnewScrollTop = Math.max(minScrollTop, desiredScrollTop);\n\t\t\t}\n\t\t} else if (\n\t\t\tverticalType === viewEvents.VerticalRevealType.Center ||\n\t\t\tverticalType ===\n\t\t\t\tviewEvents.VerticalRevealType.CenterIfOutsideViewport\n\t\t) {\n\t\t\tif (\n\t\t\t\tverticalType ===\n\t\t\t\t\tviewEvents.VerticalRevealType.CenterIfOutsideViewport &&\n\t\t\t\tviewportStartY <= boxStartY &&\n\t\t\t\tboxEndY <= viewportEndY\n\t\t\t) {\n\t\t\t\t// Box is already in the viewport... do nothing\n\t\t\t\tnewScrollTop = viewportStartY;\n\t\t\t} else {\n\t\t\t\t// Box is outside the viewport... center it\n\t\t\t\tconst boxMiddleY = (boxStartY + boxEndY) / 2;\n\t\t\t\tnewScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n\t\t\t}\n\t\t} else {\n\t\t\tnewScrollTop = this._computeMinimumScrolling(\n\t\t\t\tviewportStartY,\n\t\t\t\tviewportEndY,\n\t\t\t\tboxStartY,\n\t\t\t\tboxEndY,\n\t\t\t\tverticalType === viewEvents.VerticalRevealType.Top,\n\t\t\t\tverticalType === viewEvents.VerticalRevealType.Bottom,\n\t\t\t);\n\t\t}\n\n\t\treturn newScrollTop;\n\t}\n\n\tprivate _computeScrollLeftToReveal(\n\t\thorizontalRevealRequest: HorizontalRevealRequest,\n\t): { scrollLeft: number; maxHorizontalOffset: number } | null {\n\t\tconst viewport = this._context.viewLayout.getCurrentViewport();\n\t\tconst layoutInfo = this._context.configuration.options.get(\n\t\t\tEditorOption.layoutInfo,\n\t\t);\n\t\tconst viewportStartX = viewport.left;\n\t\tconst viewportEndX =\n\t\t\tviewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n\n\t\tlet boxStartX = Constants.MAX_SAFE_SMALL_INTEGER;\n\t\tlet boxEndX = 0;\n\t\tif (horizontalRevealRequest.type === \"range\") {\n\t\t\tconst visibleRanges = this._visibleRangesForLineRange(\n\t\t\t\thorizontalRevealRequest.lineNumber,\n\t\t\t\thorizontalRevealRequest.startColumn,\n\t\t\t\thorizontalRevealRequest.endColumn,\n\t\t\t);\n\t\t\tif (!visibleRanges) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (const visibleRange of visibleRanges.ranges) {\n\t\t\t\tboxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n\t\t\t\tboxEndX = Math.max(\n\t\t\t\t\tboxEndX,\n\t\t\t\t\tMath.round(visibleRange.left + visibleRange.width),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const selection of horizontalRevealRequest.selections) {\n\t\t\t\tif (selection.startLineNumber !== selection.endLineNumber) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst visibleRanges = this._visibleRangesForLineRange(\n\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\tselection.startColumn,\n\t\t\t\t\tselection.endColumn,\n\t\t\t\t);\n\t\t\t\tif (!visibleRanges) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tfor (const visibleRange of visibleRanges.ranges) {\n\t\t\t\t\tboxStartX = Math.min(\n\t\t\t\t\t\tboxStartX,\n\t\t\t\t\t\tMath.round(visibleRange.left),\n\t\t\t\t\t);\n\t\t\t\t\tboxEndX = Math.max(\n\t\t\t\t\t\tboxEndX,\n\t\t\t\t\t\tMath.round(visibleRange.left + visibleRange.width),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontalRevealRequest.minimalReveal) {\n\t\t\tboxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n\t\t\tboxEndX += this._revealHorizontalRightPadding;\n\t\t}\n\n\t\tif (\n\t\t\thorizontalRevealRequest.type === \"selections\" &&\n\t\t\tboxEndX - boxStartX > viewport.width\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst newScrollLeft = this._computeMinimumScrolling(\n\t\t\tviewportStartX,\n\t\t\tviewportEndX,\n\t\t\tboxStartX,\n\t\t\tboxEndX,\n\t\t);\n\t\treturn {\n\t\t\tscrollLeft: newScrollLeft,\n\t\t\tmaxHorizontalOffset: boxEndX,\n\t\t};\n\t}\n\n\tprivate _computeMinimumScrolling(\n\t\tviewportStart: number,\n\t\tviewportEnd: number,\n\t\tboxStart: number,\n\t\tboxEnd: number,\n\t\trevealAtStart?: boolean,\n\t\trevealAtEnd?: boolean,\n\t): number {\n\t\tviewportStart = viewportStart | 0;\n\t\tviewportEnd = viewportEnd | 0;\n\t\tboxStart = boxStart | 0;\n\t\tboxEnd = boxEnd | 0;\n\t\trevealAtStart = !!revealAtStart;\n\t\trevealAtEnd = !!revealAtEnd;\n\n\t\tconst viewportLength = viewportEnd - viewportStart;\n\t\tconst boxLength = boxEnd - boxStart;\n\n\t\tif (boxLength < viewportLength) {\n\t\t\t// The box would fit in the viewport\n\n\t\t\tif (revealAtStart) {\n\t\t\t\treturn boxStart;\n\t\t\t}\n\n\t\t\tif (revealAtEnd) {\n\t\t\t\treturn Math.max(0, boxEnd - viewportLength);\n\t\t\t}\n\n\t\t\tif (boxStart < viewportStart) {\n\t\t\t\t// The box is above the viewport\n\t\t\t\treturn boxStart;\n\t\t\t} else if (boxEnd > viewportEnd) {\n\t\t\t\t// The box is below the viewport\n\t\t\t\treturn Math.max(0, boxEnd - viewportLength);\n\t\t\t}\n\t\t} else {\n\t\t\t// The box would not fit in the viewport\n\t\t\t// Reveal the beginning of the box\n\t\t\treturn boxStart;\n\t\t}\n\n\t\treturn viewportStart;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,wCAAwC;AACjD,SAAS,wBAAwB;AACjC,YAAY,cAAc;AAC1B,SAAS,iBAAiB;AAC1B,OAAO;AACP,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,aAAa;AAEtB,SAAS,kBAAkB;AAC3B,YAAY,gBAAgB;AAI5B,SAAS,qBAAqB;AAC9B;AAAA,EACC;AAAA,EACA;AAAA,EAEA;AAAA,OAEM;AACP,SAAS,8BAA8B;AACvC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAEhC,MAAM,iBAAiB;AAAA,EAtCvB,OAsCuB;AAAA;AAAA;AAAA,EACd;AAAA,EAER,cAAc;AACb,SAAK,uBAAuB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,EACjD;AAAA,EAEO,yBAAgC;AACtC,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,uBAAuB,qBAAkC;AAC/D,SAAK,uBAAuB;AAAA,EAC7B;AACD;AAEA,MAAM,6BAA6B;AAAA,EAKlC,YACiB,eACA,YACA,aACA,WACA,gBACA,eACA,YACf;AAPe;AACA;AACA;AACA;AACA;AACA;AACA;AAEhB,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAAA,EACtB;AAAA,EAtED,OAsDmC;AAAA;AAAA;AAAA,EAClB,OAAO;AAAA,EACP;AAAA,EACA;AAcjB;AAEA,MAAM,kCAAkC;AAAA,EAKvC,YACiB,eACA,YACA,gBACA,eACA,YACf;AALe;AACA;AACA;AACA;AACA;AAEhB,QAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,QAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,aAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK;AACtD,YAAM,YAAY,WAAW,CAAC;AAC9B,sBAAgB,KAAK,IAAI,eAAe,UAAU,eAAe;AACjE,sBAAgB,KAAK,IAAI,eAAe,UAAU,aAAa;AAAA,IAChE;AACA,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAAA,EACtB;AAAA,EA9FD,OAyEwC;AAAA;AAAA;AAAA,EACvB,OAAO;AAAA,EACP;AAAA,EACA;AAmBjB;AAUO,MAAM,kBAAkB,SAA+B;AAAA,EAzG9D,OAyG8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAI7D,OAAwB,sBAAsB;AAAA,EAE7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACS;AAAA,EACA;AAAA,EAET;AAAA,EACS;AAAA;AAAA,EAGT;AAAA,EACA;AAAA,EAER,YAAY,SAAsB,cAAwC;AACzE,UAAM,OAAO;AAEb,UAAM,OAAO,KAAK,SAAS;AAC3B,UAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,UAAM,WAAW,QAAQ,IAAI,aAAa,QAAQ;AAClD,UAAM,eAAe,QAAQ,IAAI,aAAa,YAAY;AAE1D,SAAK,cAAc,QAAQ,IAAI,aAAa,UAAU;AACtD,SAAK,kCACJ,SAAS;AACV,SAAK,sBAAsB,aAAa;AACxC,SAAK,gCAAgC,QAAQ;AAAA,MAC5C,aAAa;AAAA,IACd;AACA,SAAK,0BAA0B,QAAQ;AAAA,MACtC,aAAa;AAAA,IACd;AACA,SAAK,+BAA+B,QAAQ;AAAA,MAC3C,aAAa;AAAA,IACd;AACA,SAAK,sBAAsB,CAAC,QAAQ;AAAA,MACnC,aAAa;AAAA,IACd;AACA,SAAK,mBAAmB,IAAI;AAAA,MAC3B;AAAA,MACA,KAAK,SAAS,MAAM;AAAA,IACrB;AAEA,SAAK,gBAAgB;AACrB,SAAK,wBAAwB,SAAS,cAAc,KAAK;AACzD,SAAK,gBAAgB,IAAI,uBAAuB;AAAA,MAC/C,YAAY,6BAAM,IAAI,SAAS,KAAK,gBAAgB,GAAxC;AAAA,IACb,CAAC;AACD,SAAK,UAAU,KAAK,cAAc;AAElC,qBAAiB,MAAM,KAAK,SAAS,gBAAgB,SAAS;AAC9D,SAAK,QAAQ;AAAA,MACZ,cAAc,gCAAgC;AAAA,IAC/C;AACA,kBAAc,KAAK,SAAS,QAAQ;AAGpC,SAAK,gBAAgB;AACrB,SAAK,yBAAyB,IAAI,iBAAiB,MAAM;AACxD,WAAK,sBAAsB;AAAA,IAC5B,GAAG,GAAG;AACN,SAAK,sCAAsC,IAAI,iBAAiB,MAAM;AACrE,WAAK,+BAA+B;AAAA,IACrC,GAAG,GAAI;AAEP,SAAK,oBAAoB,IAAI,iBAAiB;AAE9C,SAAK,2BAA2B;AAGhC,SAAK,uBAAuB,QAAQ;AAAA,MACnC,aAAa;AAAA,IACd,EAAE;AACF,SAAK,wBAAwB,QAAQ;AAAA,MACpC,aAAa;AAAA,IACd,EAAE;AAAA,EACH;AAAA,EAEgB,UAAgB;AAC/B,SAAK,uBAAuB,QAAQ;AACpC,SAAK,oCAAoC,QAAQ;AACjD,UAAM,QAAQ;AAAA,EACf;AAAA,EAEO,aAAuC;AAC7C,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAIgB,uBACf,GACU;AACV,SAAK,cAAc,uBAAuB,CAAC;AAC3C,QAAI,EAAE,WAAW,aAAa,YAAY,GAAG;AAC5C,WAAK,gBAAgB;AAAA,IACtB;AAEA,UAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,UAAM,WAAW,QAAQ,IAAI,aAAa,QAAQ;AAClD,UAAM,eAAe,QAAQ,IAAI,aAAa,YAAY;AAE1D,SAAK,cAAc,QAAQ,IAAI,aAAa,UAAU;AACtD,SAAK,kCACJ,SAAS;AACV,SAAK,sBAAsB,aAAa;AACxC,SAAK,gCAAgC,QAAQ;AAAA,MAC5C,aAAa;AAAA,IACd;AACA,SAAK,0BAA0B,QAAQ;AAAA,MACtC,aAAa;AAAA,IACd;AACA,SAAK,+BAA+B,QAAQ;AAAA,MAC3C,aAAa;AAAA,IACd;AACA,SAAK,sBAAsB,CAAC,QAAQ;AAAA,MACnC,aAAa;AAAA,IACd;AAGA,SAAK,uBAAuB,QAAQ;AAAA,MACnC,aAAa;AAAA,IACd,EAAE;AACF,SAAK,wBAAwB,QAAQ;AAAA,MACpC,aAAa;AAAA,IACd,EAAE;AAEF,kBAAc,KAAK,SAAS,QAAQ;AAEpC,SAAK,uBAAuB;AAE5B,QAAI,EAAE,WAAW,aAAa,UAAU,GAAG;AAC1C,WAAK,gBAAgB;AAAA,IACtB;AAEA,WAAO;AAAA,EACR;AAAA,EACQ,yBAAkC;AACzC,UAAM,OAAO,KAAK,SAAS;AAE3B,UAAM,qBAAqB,IAAI;AAAA,MAC9B;AAAA,MACA,KAAK,SAAS,MAAM;AAAA,IACrB;AACA,QAAI,CAAC,KAAK,iBAAiB,OAAO,kBAAkB,GAAG;AACtD,WAAK,mBAAmB;AAExB,YAAM,kBAAkB,KAAK,cAAc,mBAAmB;AAC9D,YAAM,gBAAgB,KAAK,cAAc,iBAAiB;AAC1D,eACK,aAAa,iBACjB,cAAc,eACd,cACC;AACD,cAAM,OAAO,KAAK,cAAc,eAAe,UAAU;AACzD,aAAK,iBAAiB,KAAK,gBAAgB;AAAA,MAC5C;AACA,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EACgB,qBACf,GACU;AACV,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,QAAI,IAAI;AACR,aACK,aAAa,qBACjB,cAAc,mBACd,cACC;AACD,UACC,KAAK,cACH,eAAe,UAAU,EACzB,mBAAmB,KAAK;AAAA,IAC5B;AACA,WAAO;AAAA,EACR;AAAA,EACgB,qBACf,GACU;AACV,QAAI,MAAqC;AACxC,YAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,YAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,eACK,aAAa,qBACjB,cAAc,mBACd,cACC;AACD,aAAK,cACH,eAAe,UAAU,EACzB,qBAAqB;AAAA,MACxB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACgB,UAAU,GAAyC;AAClE,UAAM,eAAe,KAAK,cAAc,UAAU,CAAC;AACnD,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACR;AAAA,EACgB,eACf,GACU;AACV,WAAO,KAAK,cAAc,eAAe,CAAC;AAAA,EAC3C;AAAA,EACgB,eACf,GACU;AACV,WAAO,KAAK,cAAc,eAAe,CAAC;AAAA,EAC3C;AAAA,EACgB,gBACf,GACU;AACV,WAAO,KAAK,cAAc,gBAAgB,CAAC;AAAA,EAC5C;AAAA,EACgB,qBACf,GACU;AAGV,UAAM,mBAAmB,KAAK;AAAA,MAC7B,KAAK,SAAS,WAAW,kBAAkB;AAAA,MAC3C,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,IACH;AAEA,QAAI,qBAAqB,IAAI;AAE5B,aAAO;AAAA,IACR;AAGA,QAAI,oBAAoB,KAAK,SAAS,WAAW;AAAA,MAChD,EAAE,WAAW,iBAAiB;AAAA,IAC/B;AAEA,QAAI,EAAE,kBAAkB;AACvB,UAAI,EAAE,SAAS,EAAE,MAAM,oBAAoB,EAAE,MAAM,eAAe;AAEjE,4BAAoB;AAAA,UACnB,WAAW,kBAAkB;AAAA,UAC7B,YAAY;AAAA,QACb;AAAA,MACD,WAAW,EAAE,OAAO;AAEnB,aAAK,2BACJ,IAAI;AAAA,UACH,EAAE;AAAA,UACF,EAAE,MAAM;AAAA,UACR,EAAE,MAAM;AAAA,UACR,EAAE,MAAM;AAAA,UACR,KAAK,SAAS,WAAW,oBAAoB;AAAA,UAC7C,kBAAkB;AAAA,UAClB,EAAE;AAAA,QACH;AAAA,MACF,WAAW,EAAE,cAAc,EAAE,WAAW,SAAS,GAAG;AACnD,aAAK,2BACJ,IAAI;AAAA,UACH,EAAE;AAAA,UACF,EAAE;AAAA,UACF,KAAK,SAAS,WAAW,oBAAoB;AAAA,UAC7C,kBAAkB;AAAA,UAClB,EAAE;AAAA,QACH;AAAA,MACF;AAAA,IACD,OAAO;AACN,WAAK,2BAA2B;AAAA,IACjC;AAEA,UAAM,iBAAiB,KAAK;AAAA,MAC3B,KAAK,SAAS,WAAW,oBAAoB,IAC5C,kBAAkB;AAAA,IACpB;AACA,UAAM,aACL,kBAAkB,KAAK,cACpB,WAAW,YACX,EAAE;AACN,SAAK,SAAS,UAAU,WAAW;AAAA,MAClC;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EACgB,gBACf,GACU;AACV,QAAI,KAAK,4BAA4B,EAAE,mBAAmB;AAEzD,WAAK,2BAA2B;AAAA,IACjC;AACA,QAAI,KAAK,4BAA4B,EAAE,kBAAkB;AACxD,YAAM,MAAM,KAAK;AAAA,QAChB,KAAK,yBAAyB;AAAA,QAC9B,KAAK,yBAAyB;AAAA,MAC/B;AACA,YAAM,MAAM,KAAK;AAAA,QAChB,KAAK,yBAAyB;AAAA,QAC9B,KAAK,yBAAyB;AAAA,MAC/B;AACA,UAAI,EAAE,YAAY,OAAO,EAAE,YAAY,KAAK;AAE3C,aAAK,2BAA2B;AAAA,MACjC;AAAA,IACD;AACA,SAAK,QAAQ,SAAS,EAAE,WAAW;AACnC,WAAO,KAAK,cAAc,gBAAgB,CAAC,KAAK;AAAA,EACjD;AAAA,EAEgB,gBACf,GACU;AACV,WAAO,KAAK,cAAc,gBAAgB,CAAC;AAAA,EAC5C;AAAA,EACgB,eACf,GACU;AACV,SAAK,SAAS,UAAU,WAAW,gBAAgB,KAAK,aAAa;AACrE,WAAO,KAAK,cAAc,eAAe,CAAC;AAAA,EAC3C;AAAA,EACgB,eACf,GACU;AACV,WAAO,KAAK,uBAAuB;AAAA,EACpC;AAAA;AAAA;AAAA,EAMO,uBACN,UACA,QACkB;AAClB,UAAM,kBAAkB,KAAK,oBAAoB,QAAQ;AACzD,QAAI,oBAAoB,MAAM;AAE7B,aAAO;AAAA,IACR;AACA,UAAM,aAAa,KAAK,kBAAkB,eAAe;AAEzD,QAAI,eAAe,IAAI;AAEtB,aAAO;AAAA,IACR;AAEA,QACC,aAAa,KACb,aAAa,KAAK,SAAS,UAAU,aAAa,GACjD;AAED,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,UAAU,iBAAiB,UAAU,MAAM,GAAG;AAE/D,aAAO,IAAI,SAAS,YAAY,CAAC;AAAA,IAClC;AAEA,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,QACC,aAAa,uBACb,aAAa,mBACZ;AAED,aAAO;AAAA,IACR;AAEA,QAAI,SAAS,KAAK,cAChB,eAAe,UAAU,EACzB,sBAAsB,UAAU,MAAM;AACxC,UAAM,YAAY,KAAK,SAAS,UAAU,iBAAiB,UAAU;AACrE,QAAI,SAAS,WAAW;AACvB,eAAS;AAAA,IACV;AACA,WAAO,IAAI,SAAS,YAAY,MAAM;AAAA,EACvC;AAAA,EAEQ,oBAAoB,MAA8C;AACzE,WAAO,QAAQ,KAAK,aAAa,GAAG;AACnC,UAAI,KAAK,cAAc,SAAS,YAAY;AAC3C,eAAO;AAAA,MACR;AACA,aAAO,KAAK;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKQ,kBAAkB,SAA8B;AACvD,UAAM,kBAAkB,KAAK,cAAc,mBAAmB;AAC9D,UAAM,gBAAgB,KAAK,cAAc,iBAAiB;AAC1D,aACK,aAAa,iBACjB,cAAc,eACd,cACC;AACD,YAAM,OAAO,KAAK,cAAc,eAAe,UAAU;AACzD,UAAI,YAAY,KAAK,WAAW,GAAG;AAClC,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEO,aAAa,YAA4B;AAC/C,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,QACC,aAAa,uBACb,aAAa,mBACZ;AAED,aAAO;AAAA,IACR;AAEA,UAAM,UAAU,IAAI;AAAA,MACnB,KAAK,QAAQ;AAAA,MACb,KAAK;AAAA,IACN;AACA,UAAM,SAAS,KAAK,cAClB,eAAe,UAAU,EACzB,SAAS,OAAO;AAClB,SAAK,oCAAoC,OAAO;AAEhD,WAAO;AAAA,EACR;AAAA,EAEO,2BACN,QACA,iBAC6B;AAC7B,QAAI,KAAK,aAAa,GAAG;AAGxB,aAAO;AAAA,IACR;AAEA,UAAM,wBAAwB,OAAO;AACrC,UAAM,QAAQ,MAAM;AAAA,MACnB;AAAA,MACA,KAAK,kBAAkB,uBAAuB;AAAA,IAC/C;AACA,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AAEA,UAAM,gBAAqC,CAAC;AAC5C,QAAI,mBAAmB;AACvB,UAAM,oBAAoB,IAAI;AAAA,MAC7B,KAAK,QAAQ;AAAA,MACb,KAAK;AAAA,IACN;AAEA,QAAI,0BAA0B;AAC9B,QAAI,iBAAiB;AACpB,gCACC,KAAK,SAAS,UAAU,qBAAqB;AAAA,QAC5C,IAAI,SAAS,MAAM,iBAAiB,CAAC;AAAA,MACtC,EAAE;AAAA,IACJ;AAEA,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,aACK,aAAa,MAAM,iBACvB,cAAc,MAAM,eACpB,cACC;AACD,UACC,aAAa,uBACb,aAAa,mBACZ;AACD;AAAA,MACD;AAEA,YAAM,cACL,eAAe,MAAM,kBAAkB,MAAM,cAAc;AAC5D,YAAM,sBAAsB,eAAe,MAAM;AACjD,YAAM,YAAY,sBACf,KAAK,SAAS,UAAU,iBAAiB,UAAU,IACnD,MAAM;AACT,YAAM,uBAAuB,KAAK,cAChC,eAAe,UAAU,EACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAED,UAAI,CAAC,sBAAsB;AAC1B;AAAA,MACD;AAEA,UAAI,mBAAmB,aAAa,uBAAuB;AAC1D,cAAM,6BAA6B;AACnC,kCACC,KAAK,SAAS,UAAU,qBAAqB;AAAA,UAC5C,IAAI,SAAS,aAAa,GAAG,CAAC;AAAA,QAC/B,EAAE;AAEH,YAAI,+BAA+B,yBAAyB;AAC3D,+BAAqB,OACpB,qBAAqB,OAAO,SAAS,CACtC,EAAE,SAAS,KAAK;AAAA,QACjB;AAAA,MACD;AAEA,oBAAc,kBAAkB,IAAI,IAAI;AAAA,QACvC,qBAAqB;AAAA,QACrB;AAAA,QACA,gBAAgB,KAAK,qBAAqB,MAAM;AAAA,QAChD;AAAA,MACD;AAAA,IACD;AAEA,SAAK,oCAAoC,iBAAiB;AAE1D,QAAI,qBAAqB,GAAG;AAC3B,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,2BACP,YACA,aACA,WACuB;AACvB,QAAI,KAAK,aAAa,GAAG;AAGxB,aAAO;AAAA,IACR;AAEA,QACC,aAAa,KAAK,cAAc,mBAAmB,KACnD,aAAa,KAAK,cAAc,iBAAiB,GAChD;AACD,aAAO;AAAA,IACR;AAEA,UAAM,oBAAoB,IAAI;AAAA,MAC7B,KAAK,QAAQ;AAAA,MACb,KAAK;AAAA,IACN;AACA,UAAM,SAAS,KAAK,cAClB,eAAe,UAAU,EACzB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACD,SAAK,oCAAoC,iBAAiB;AAE1D,WAAO;AAAA,EACR;AAAA,EAEO,wBACN,UAC4B;AAC5B,UAAM,gBAAgB,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,IACV;AACA,QAAI,CAAC,eAAe;AACnB,aAAO;AAAA,IACR;AACA,WAAO,IAAI;AAAA,MACV,cAAc;AAAA,MACd,cAAc,OAAO,CAAC,EAAE;AAAA,IACzB;AAAA,EACD;AAAA;AAAA,EAIO,mBAAyB;AAC/B,SAAK,kBAAkB,KAAK;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,wBAAiC;AACxC,WAAO,KAAK,kBAAkB,IAAI;AAAA,EACnC;AAAA,EAEQ,wBAA8B;AACrC,SAAK,kBAAkB,KAAK;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,oCACP,mBACO;AACP,QAAI,CAAC,kBAAkB,cAAc;AAEpC;AAAA,IACD;AACA,QAAI,KAAK,uBAAuB,YAAY,GAAG;AAE9C;AAAA,IACD;AACA,SAAK,uBAAuB,OAAO;AACnC,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEQ,kBAAkB,MAAwB;AACjD,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAE9D,QAAI,oBAAoB;AACxB,QAAI,oBAAoB;AACxB,aACK,aAAa,qBACjB,cAAc,mBACd,cACC;AACD,YAAM,cAAc,KAAK,cAAc,eAAe,UAAU;AAEhE,UAAI,QAAQ,CAAC,YAAY,eAAe,GAAG;AAE1C,4BAAoB;AACpB;AAAA,MACD;AAEA,0BAAoB,KAAK;AAAA,QACxB;AAAA,QACA,YAAY,SAAS,IAAI;AAAA,MAC1B;AAAA,IACD;AAEA,QACC,qBACA,wBAAwB,KACxB,sBAAsB,KAAK,SAAS,UAAU,aAAa,GAC1D;AAED,WAAK,gBAAgB;AAAA,IACtB;AAEA,SAAK,oBAAoB,iBAAiB;AAE1C,WAAO;AAAA,EACR;AAAA,EAEQ,iCAAuC;AAI9C,QAAI,oBAAoB;AACxB,QAAI,eAAe;AACnB,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,aACK,aAAa,qBACjB,cAAc,mBACd,cACC;AACD,YAAM,cAAc,KAAK,cAAc,eAAe,UAAU;AAChE,UAAI,YAAY,wBAAwB,GAAG;AAC1C,cAAM,YAAY,YAAY,SAAS,IAAI;AAC3C,YAAI,YAAY,cAAc;AAC7B,yBAAe;AACf,8BAAoB;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAEA,QAAI,sBAAsB,IAAI;AAC7B;AAAA,IACD;AAEA,QACC,CAAC,KAAK,cACJ,eAAe,iBAAiB,EAChC,6BAA6B,GAC9B;AACD,eACK,aAAa,qBACjB,cAAc,mBACd,cACC;AACD,cAAM,cACL,KAAK,cAAc,eAAe,UAAU;AAC7C,oBAAY,kCAAkC;AAAA,MAC/C;AAAA,IACD;AAAA,EACD;AAAA,EAEO,gBAAsB;AAC5B,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEO,SAAe;AACrB,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEO,WAAW,cAAkC;AAEnD,SAAK,cAAc,YAAY,YAAY;AAC3C,SAAK,kBAAkB;AAAA,MACtB,aAAa;AAAA,IACd;AACA,SAAK,QAAQ,SAAS,KAAK,SAAS,WAAW,eAAe,CAAC;AAC/D,SAAK,QAAQ;AAAA,MACZ,KAAK,IAAI,KAAK,SAAS,WAAW,gBAAgB,GAAG,GAAO;AAAA,IAC7D;AAKA,QAAI,KAAK,0BAA0B;AAClC,YAAM,0BAA0B,KAAK;AAGrC,UACC,aAAa,mBACZ,wBAAwB,iBACzB,wBAAwB,iBACvB,aAAa,eACb;AACD,aAAK,2BAA2B;AAGhC,aAAK,YAAY;AAGjB,cAAM,gBAAgB,KAAK;AAAA,UAC1B;AAAA,QACD;AAEA,YAAI,eAAe;AAClB,cAAI,CAAC,KAAK,qBAAqB;AAE9B,iBAAK;AAAA,cACJ,cAAc;AAAA,YACf;AAAA,UACD;AAEA,eAAK,SAAS,UAAU,WAAW;AAAA,YAClC;AAAA,cACC,YAAY,cAAc;AAAA,YAC3B;AAAA,YACA,wBAAwB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,QAAI,KAAK,sBAAsB,GAAG;AACjC,WAAK,uBAAuB,OAAO;AAAA,IACpC,OAAO;AAEN,WAAK,uBAAuB,SAAS;AAAA,IACtC;AAEA,QACC,SAAS,WACT,CAAC,KAAK,oCAAoC,YAAY,GACrD;AACD,YAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,YAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,eACK,aAAa,qBACjB,cAAc,mBACd,cACC;AACD,cAAM,cACL,KAAK,cAAc,eAAe,UAAU;AAC7C,YAAI,YAAY,wBAAwB,GAAG;AAC1C,eAAK,oCAAoC,SAAS;AAClD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,SAAK,cAAc,gBAAgB,KAAK,mBAAmB;AAC3D,SAAK,cAAc,WAAW,QAAQ;AACtC,UAAM,oBACL,KAAK,SAAS,WAAW,oBAAoB,IAC7C,aAAa;AACd,SAAK,cAAc,OAAO,CAAC,iBAAiB;AAC5C,SAAK,cAAc;AAAA,MAClB,CAAC,KAAK,SAAS,WAAW,qBAAqB;AAAA,IAChD;AAAA,EACD;AAAA;AAAA,EAIQ,oBAAoB,WAAyB;AACpD,UAAM,aAAa,KAAK,KAAK,SAAS;AACtC,QAAI,KAAK,gBAAgB,YAAY;AACpC,WAAK,gBAAgB;AACrB,WAAK,SAAS,UAAU,WAAW;AAAA,QAClC,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,+BACP,UACA,QACA,eACA,OACA,YACA,cACS;AACT,UAAM,iBAAiB,SAAS;AAChC,UAAM,iBAAiB,SAAS;AAChC,UAAM,eAAe,iBAAiB;AACtC,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,QAAI,cAAc,WAAW,SAAS,GAAG;AACxC,UAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,UAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,eAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK;AACtD,cAAM,YAAY,WAAW,CAAC;AAC9B,wBAAgB,KAAK;AAAA,UACpB;AAAA,UACA,UAAU;AAAA,QACX;AACA,wBAAgB,KAAK;AAAA,UACpB;AAAA,UACA,UAAU;AAAA,QACX;AAAA,MACD;AACA,yBAAmB;AACnB,kBACC,KAAK,SAAS,WAAW;AAAA,QACxB;AAAA,MACD;AACD,gBACC,KAAK,SAAS,WAAW;AAAA,QACxB;AAAA,MACD,IAAI,KAAK;AAAA,IACX,WAAW,OAAO;AACjB,yBAAmB;AACnB,kBAAY,KAAK,SAAS,WAAW;AAAA,QACpC,MAAM;AAAA,MACP;AACA,gBACC,KAAK,SAAS,WAAW;AAAA,QACxB,MAAM;AAAA,MACP,IAAI,KAAK;AAAA,IACX,OAAO;AACN,aAAO;AAAA,IACR;AAEA,UAAM,yBACJ,WAAW,WAAW,kBACvB,KAAK,iCAAiC;AAEvC,QAAI,aAAa;AACjB,QAAI,gBAAgB;AAEpB,QAAI,uBAAuB;AAC1B,UAAI,CAAC,eAAe;AAEnB,qBAAa,KAAK;AAAA,MACnB;AAAA,IACD,OAAO;AACN,YAAM,qBAAqB,iBAAiB,KAAK;AACjD,YAAM,mBAAmB,KAAK;AAAA,QAC7B,KAAK;AAAA,QACL,KAAK,uBAAuB,KAAK,wBAAwB;AAAA,MAC1D;AACA,YAAM,UAAU,KAAK,IAAI,qBAAqB,GAAG,gBAAgB;AACjE,mBAAa,UAAU,KAAK;AAC5B,sBAAgB,KAAK,IAAI,GAAG,UAAU,CAAC,IAAI,KAAK;AAAA,IACjD;AACA,QAAI,CAAC,eAAe;AACnB,UACC,iBAAiB,WAAW,mBAAmB,UAC/C,iBAAiB,WAAW,mBAAmB,QAC9C;AAED,yBAAiB,KAAK;AAAA,MACvB;AAAA,IACD;AAEA,iBAAa;AACb,eAAW;AACX,QAAI;AAEJ,QAAI,UAAU,YAAY,gBAAgB;AAEzC,UAAI,CAAC,kBAAkB;AAEtB,eAAO;AAAA,MACR;AACA,qBAAe;AAAA,IAChB,WACC,iBAAiB,WAAW,mBAAmB,WAC/C,iBACC,WAAW,mBAAmB,0BAC9B;AACD,UACC,iBACC,WAAW,mBAAmB,4BAC/B,kBAAkB,aAClB,WAAW,cACV;AAED,uBAAe;AAAA,MAChB,OAAO;AAEN,cAAM,kBAAkB,KAAK;AAAA,UAC5B,IAAI,KAAK;AAAA,UACT,iBAAiB;AAAA,QAClB;AAEA,cAAM,mBAAmB,YAAY;AAErC,cAAM,eAAe,UAAU;AAC/B,uBAAe,KAAK,IAAI,cAAc,gBAAgB;AAAA,MACvD;AAAA,IACD,WACC,iBAAiB,WAAW,mBAAmB,UAC/C,iBACC,WAAW,mBAAmB,yBAC9B;AACD,UACC,iBACC,WAAW,mBAAmB,2BAC/B,kBAAkB,aAClB,WAAW,cACV;AAED,uBAAe;AAAA,MAChB,OAAO;AAEN,cAAM,cAAc,YAAY,WAAW;AAC3C,uBAAe,KAAK,IAAI,GAAG,aAAa,iBAAiB,CAAC;AAAA,MAC3D;AAAA,IACD,OAAO;AACN,qBAAe,KAAK;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB,WAAW,mBAAmB;AAAA,QAC/C,iBAAiB,WAAW,mBAAmB;AAAA,MAChD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,2BACP,yBAC6D;AAC7D,UAAM,WAAW,KAAK,SAAS,WAAW,mBAAmB;AAC7D,UAAM,aAAa,KAAK,SAAS,cAAc,QAAQ;AAAA,MACtD,aAAa;AAAA,IACd;AACA,UAAM,iBAAiB,SAAS;AAChC,UAAM,eACL,iBAAiB,SAAS,QAAQ,WAAW;AAE9C,QAAI,YAAY,UAAU;AAC1B,QAAI,UAAU;AACd,QAAI,wBAAwB,SAAS,SAAS;AAC7C,YAAM,gBAAgB,KAAK;AAAA,QAC1B,wBAAwB;AAAA,QACxB,wBAAwB;AAAA,QACxB,wBAAwB;AAAA,MACzB;AACA,UAAI,CAAC,eAAe;AACnB,eAAO;AAAA,MACR;AACA,iBAAW,gBAAgB,cAAc,QAAQ;AAChD,oBAAY,KAAK,IAAI,WAAW,KAAK,MAAM,aAAa,IAAI,CAAC;AAC7D,kBAAU,KAAK;AAAA,UACd;AAAA,UACA,KAAK,MAAM,aAAa,OAAO,aAAa,KAAK;AAAA,QAClD;AAAA,MACD;AAAA,IACD,OAAO;AACN,iBAAW,aAAa,wBAAwB,YAAY;AAC3D,YAAI,UAAU,oBAAoB,UAAU,eAAe;AAC1D,iBAAO;AAAA,QACR;AACA,cAAM,gBAAgB,KAAK;AAAA,UAC1B,UAAU;AAAA,UACV,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AACA,YAAI,CAAC,eAAe;AACnB,iBAAO;AAAA,QACR;AACA,mBAAW,gBAAgB,cAAc,QAAQ;AAChD,sBAAY,KAAK;AAAA,YAChB;AAAA,YACA,KAAK,MAAM,aAAa,IAAI;AAAA,UAC7B;AACA,oBAAU,KAAK;AAAA,YACd;AAAA,YACA,KAAK,MAAM,aAAa,OAAO,aAAa,KAAK;AAAA,UAClD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,CAAC,wBAAwB,eAAe;AAC3C,kBAAY,KAAK,IAAI,GAAG,YAAY,UAAU,mBAAmB;AACjE,iBAAW,KAAK;AAAA,IACjB;AAEA,QACC,wBAAwB,SAAS,gBACjC,UAAU,YAAY,SAAS,OAC9B;AACD,aAAO;AAAA,IACR;AAEA,UAAM,gBAAgB,KAAK;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,WAAO;AAAA,MACN,YAAY;AAAA,MACZ,qBAAqB;AAAA,IACtB;AAAA,EACD;AAAA,EAEQ,yBACP,eACA,aACA,UACA,QACA,eACA,aACS;AACT,oBAAgB,gBAAgB;AAChC,kBAAc,cAAc;AAC5B,eAAW,WAAW;AACtB,aAAS,SAAS;AAClB,oBAAgB,CAAC,CAAC;AAClB,kBAAc,CAAC,CAAC;AAEhB,UAAM,iBAAiB,cAAc;AACrC,UAAM,YAAY,SAAS;AAE3B,QAAI,YAAY,gBAAgB;AAG/B,UAAI,eAAe;AAClB,eAAO;AAAA,MACR;AAEA,UAAI,aAAa;AAChB,eAAO,KAAK,IAAI,GAAG,SAAS,cAAc;AAAA,MAC3C;AAEA,UAAI,WAAW,eAAe;AAE7B,eAAO;AAAA,MACR,WAAW,SAAS,aAAa;AAEhC,eAAO,KAAK,IAAI,GAAG,SAAS,cAAc;AAAA,MAC3C;AAAA,IACD,OAAO;AAGN,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
