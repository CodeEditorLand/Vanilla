{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/lines/viewLines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, IViewLines, LineVisibleRanges, VisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprint, PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine } from './viewLine.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ScrollType } from '../../../common/editorCommon.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { ViewportData } from '../../../common/viewLayout/viewLinesViewportData.js';\nimport { Viewport } from '../../../common/viewModel.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport { ViewLineOptions } from './viewLineOptions.js';\n\nclass LastRenderedData {\n\n\tprivate _currentVisibleRange: Range;\n\n\tconstructor() {\n\t\tthis._currentVisibleRange = new Range(1, 1, 1, 1);\n\t}\n\n\tpublic getCurrentVisibleRange(): Range {\n\t\treturn this._currentVisibleRange;\n\t}\n\n\tpublic setCurrentVisibleRange(currentVisibleRange: Range): void {\n\t\tthis._currentVisibleRange = currentVisibleRange;\n\t}\n}\n\nclass HorizontalRevealRangeRequest {\n\tpublic readonly type = 'range';\n\tpublic readonly minLineNumber: number;\n\tpublic readonly maxLineNumber: number;\n\n\tconstructor(\n\t\tpublic readonly minimalReveal: boolean,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumn: number,\n\t\tpublic readonly startScrollTop: number,\n\t\tpublic readonly stopScrollTop: number,\n\t\tpublic readonly scrollType: ScrollType\n\t) {\n\t\tthis.minLineNumber = lineNumber;\n\t\tthis.maxLineNumber = lineNumber;\n\t}\n}\n\nclass HorizontalRevealSelectionsRequest {\n\tpublic readonly type = 'selections';\n\tpublic readonly minLineNumber: number;\n\tpublic readonly maxLineNumber: number;\n\n\tconstructor(\n\t\tpublic readonly minimalReveal: boolean,\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly startScrollTop: number,\n\t\tpublic readonly stopScrollTop: number,\n\t\tpublic readonly scrollType: ScrollType\n\t) {\n\t\tlet minLineNumber = selections[0].startLineNumber;\n\t\tlet maxLineNumber = selections[0].endLineNumber;\n\t\tfor (let i = 1, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\t\t\tminLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n\t\t\tmaxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n\t\t}\n\t\tthis.minLineNumber = minLineNumber;\n\t\tthis.maxLineNumber = maxLineNumber;\n\t}\n}\n\ntype HorizontalRevealRequest = HorizontalRevealRangeRequest | HorizontalRevealSelectionsRequest;\n\n/**\n * The view lines part is responsible for rendering the actual content of a\n * file.\n */\nexport class ViewLines extends ViewPart implements IViewLines {\n\t/**\n\t * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n\t */\n\tprivate static readonly HORIZONTAL_EXTRA_PX = 30;\n\n\tprivate readonly _linesContent: FastDomNode<HTMLElement>;\n\tprivate readonly _textRangeRestingSpot: HTMLElement;\n\tprivate readonly _visibleLines: VisibleLinesCollection<ViewLine>;\n\tprivate readonly domNode: FastDomNode<HTMLElement>;\n\n\t// --- config\n\tprivate _lineHeight: number;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _isViewportWrapping: boolean;\n\tprivate _revealHorizontalRightPadding: number;\n\tprivate _cursorSurroundingLines: number;\n\tprivate _cursorSurroundingLinesStyle: 'default' | 'all';\n\tprivate _canUseLayerHinting: boolean;\n\tprivate _viewLineOptions: ViewLineOptions;\n\n\t// --- width\n\tprivate _maxLineWidth: number;\n\tprivate readonly _asyncUpdateLineWidths: RunOnceScheduler;\n\tprivate readonly _asyncCheckMonospaceFontAssumptions: RunOnceScheduler;\n\n\tprivate _horizontalRevealRequest: HorizontalRevealRequest | null;\n\tprivate readonly _lastRenderedData: LastRenderedData;\n\n\t// Sticky Scroll\n\tprivate _stickyScrollEnabled: boolean;\n\tprivate _maxNumberStickyLines: number;\n\n\tconstructor(context: ViewContext, linesContent: FastDomNode<HTMLElement>) {\n\t\tsuper(context);\n\n\t\tconst conf = this._context.configuration;\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._isViewportWrapping = wrappingInfo.isViewportWrapping;\n\t\tthis._revealHorizontalRightPadding = options.get(EditorOption.revealHorizontalRightPadding);\n\t\tthis._cursorSurroundingLines = options.get(EditorOption.cursorSurroundingLines);\n\t\tthis._cursorSurroundingLinesStyle = options.get(EditorOption.cursorSurroundingLinesStyle);\n\t\tthis._canUseLayerHinting = !options.get(EditorOption.disableLayerHinting);\n\t\tthis._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n\n\t\tthis._linesContent = linesContent;\n\t\tthis._textRangeRestingSpot = document.createElement('div');\n\t\tthis._visibleLines = new VisibleLinesCollection({\n\t\t\tcreateLine: () => new ViewLine(this._viewLineOptions),\n\t\t});\n\t\tthis.domNode = this._visibleLines.domNode;\n\n\t\tPartFingerprints.write(this.domNode, PartFingerprint.ViewLines);\n\t\tthis.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n\t\tapplyFontInfo(this.domNode, fontInfo);\n\n\t\t// --- width & height\n\t\tthis._maxLineWidth = 0;\n\t\tthis._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n\t\t\tthis._updateLineWidthsSlow();\n\t\t}, 200);\n\t\tthis._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n\t\t\tthis._checkMonospaceFontAssumptions();\n\t\t}, 2000);\n\n\t\tthis._lastRenderedData = new LastRenderedData();\n\n\t\tthis._horizontalRevealRequest = null;\n\n\t\t// sticky scroll widget\n\t\tthis._stickyScrollEnabled = options.get(EditorOption.stickyScroll).enabled;\n\t\tthis._maxNumberStickyLines = options.get(EditorOption.stickyScroll).maxLineCount;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._asyncUpdateLineWidths.dispose();\n\t\tthis._asyncCheckMonospaceFontAssumptions.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this.domNode;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tthis._visibleLines.onConfigurationChanged(e);\n\t\tif (e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\tthis._maxLineWidth = 0;\n\t\t}\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._isViewportWrapping = wrappingInfo.isViewportWrapping;\n\t\tthis._revealHorizontalRightPadding = options.get(EditorOption.revealHorizontalRightPadding);\n\t\tthis._cursorSurroundingLines = options.get(EditorOption.cursorSurroundingLines);\n\t\tthis._cursorSurroundingLinesStyle = options.get(EditorOption.cursorSurroundingLinesStyle);\n\t\tthis._canUseLayerHinting = !options.get(EditorOption.disableLayerHinting);\n\n\t\t// sticky scroll\n\t\tthis._stickyScrollEnabled = options.get(EditorOption.stickyScroll).enabled;\n\t\tthis._maxNumberStickyLines = options.get(EditorOption.stickyScroll).maxLineCount;\n\n\t\tapplyFontInfo(this.domNode, fontInfo);\n\n\t\tthis._onOptionsMaybeChanged();\n\n\t\tif (e.hasChanged(EditorOption.layoutInfo)) {\n\t\t\tthis._maxLineWidth = 0;\n\t\t}\n\n\t\treturn true;\n\t}\n\tprivate _onOptionsMaybeChanged(): boolean {\n\t\tconst conf = this._context.configuration;\n\n\t\tconst newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n\t\tif (!this._viewLineOptions.equals(newViewLineOptions)) {\n\t\t\tthis._viewLineOptions = newViewLineOptions;\n\n\t\t\tconst startLineNumber = this._visibleLines.getStartLineNumber();\n\t\t\tconst endLineNumber = this._visibleLines.getEndLineNumber();\n\t\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\t\tconst line = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\t\tline.onOptionsChanged(this._viewLineOptions);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tlet r = false;\n\t\tfor (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n\t\t\tr = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n\t\t}\n\t\treturn r;\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\tif (true/*e.inlineDecorationsChanged*/) {\n\t\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\t\tfor (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n\t\t\t\tthis._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\tconst shouldRender = this._visibleLines.onFlushed(e);\n\t\tthis._maxLineWidth = 0;\n\t\treturn shouldRender;\n\t}\n\tpublic override onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn this._visibleLines.onLinesChanged(e);\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn this._visibleLines.onLinesDeleted(e);\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn this._visibleLines.onLinesInserted(e);\n\t}\n\tpublic override onRevealRangeRequest(e: viewEvents.ViewRevealRangeRequestEvent): boolean {\n\t\t// Using the future viewport here in order to handle multiple\n\t\t// incoming reveal range requests that might all desire to be animated\n\t\tconst desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n\n\t\tif (desiredScrollTop === -1) {\n\t\t\t// marker to abort the reveal range request\n\t\t\treturn false;\n\t\t}\n\n\t\t// validate the new desired scroll top\n\t\tlet newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n\n\t\tif (e.revealHorizontal) {\n\t\t\tif (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n\t\t\t\t// Two or more lines? => scroll to base (That's how you see most of the two lines)\n\t\t\t\tnewScrollPosition = {\n\t\t\t\t\tscrollTop: newScrollPosition.scrollTop,\n\t\t\t\t\tscrollLeft: 0\n\t\t\t\t};\n\t\t\t} else if (e.range) {\n\t\t\t\t// We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n\t\t\t\tthis._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n\t\t\t} else if (e.selections && e.selections.length > 0) {\n\t\t\t\tthis._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._horizontalRevealRequest = null;\n\t\t}\n\n\t\tconst scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n\t\tconst scrollType = (scrollTopDelta <= this._lineHeight ? ScrollType.Immediate : e.scrollType);\n\t\tthis._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\tif (this._horizontalRevealRequest && e.scrollLeftChanged) {\n\t\t\t// cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n\t\t\tthis._horizontalRevealRequest = null;\n\t\t}\n\t\tif (this._horizontalRevealRequest && e.scrollTopChanged) {\n\t\t\tconst min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n\t\t\tconst max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n\t\t\tif (e.scrollTop < min || e.scrollTop > max) {\n\t\t\t\t// cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n\t\t\t\tthis._horizontalRevealRequest = null;\n\t\t\t}\n\t\t}\n\t\tthis.domNode.setWidth(e.scrollWidth);\n\t\treturn this._visibleLines.onScrollChanged(e) || true;\n\t}\n\n\tpublic override onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\treturn this._visibleLines.onTokensChanged(e);\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\tthis._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n\t\treturn this._visibleLines.onZonesChanged(e);\n\t}\n\tpublic override onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn this._onOptionsMaybeChanged();\n\t}\n\n\t// ---- end view event handlers\n\n\t// ----------- HELPERS FOR OTHERS\n\n\tpublic getPositionFromDOMInfo(spanNode: HTMLElement, offset: number): Position | null {\n\t\tconst viewLineDomNode = this._getViewLineDomNode(spanNode);\n\t\tif (viewLineDomNode === null) {\n\t\t\t// Couldn't find view line node\n\t\t\treturn null;\n\t\t}\n\t\tconst lineNumber = this._getLineNumberFor(viewLineDomNode);\n\n\t\tif (lineNumber === -1) {\n\t\t\t// Couldn't find view line node\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n\t\t\t// lineNumber is outside range\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n\t\t\t// Line is empty\n\t\t\treturn new Position(lineNumber, 1);\n\t\t}\n\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tif (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n\t\t\t// Couldn't find line\n\t\t\treturn null;\n\t\t}\n\n\t\tlet column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n\t\tconst minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n\t\tif (column < minColumn) {\n\t\t\tcolumn = minColumn;\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate _getViewLineDomNode(node: HTMLElement | null): HTMLElement | null {\n\t\twhile (node && node.nodeType === 1) {\n\t\t\tif (node.className === ViewLine.CLASS_NAME) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t\tnode = node.parentElement;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @returns the line number of this view line dom node.\n\t */\n\tprivate _getLineNumberFor(domNode: HTMLElement): number {\n\t\tconst startLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst endLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst line = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\tif (domNode === line.getDomNode()) {\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic getLineWidth(lineNumber: number): number {\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tif (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n\t\t\t// Couldn't find line\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n\t\tconst result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n\t\tthis._updateLineWidthsSlowIfDomDidLayout(context);\n\n\t\treturn result;\n\t}\n\n\tpublic linesVisibleRangesForRange(_range: Range, includeNewLines: boolean): LineVisibleRanges[] | null {\n\t\tif (this.shouldRender()) {\n\t\t\t// Cannot read from the DOM because it is dirty\n\t\t\t// i.e. the model & the dom are out of sync, so I'd be reading something stale\n\t\t\treturn null;\n\t\t}\n\n\t\tconst originalEndLineNumber = _range.endLineNumber;\n\t\tconst range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n\t\tif (!range) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst visibleRanges: LineVisibleRanges[] = [];\n\t\tlet visibleRangesLen = 0;\n\t\tconst domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n\n\t\tlet nextLineModelLineNumber: number = 0;\n\t\tif (includeNewLines) {\n\t\t\tnextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n\t\t}\n\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\n\t\t\tif (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n\t\t\tconst continuesInNextLine = lineNumber !== range.endLineNumber;\n\t\t\tconst endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n\t\t\tconst visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n\n\t\t\tif (!visibleRangesForLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (includeNewLines && lineNumber < originalEndLineNumber) {\n\t\t\t\tconst currentLineModelLineNumber = nextLineModelLineNumber;\n\t\t\t\tnextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n\n\t\t\t\tif (currentLineModelLineNumber !== nextLineModelLineNumber) {\n\t\t\t\t\tvisibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvisibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n\t\t}\n\n\t\tthis._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n\n\t\tif (visibleRangesLen === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn visibleRanges;\n\t}\n\n\tprivate _visibleRangesForLineRange(lineNumber: number, startColumn: number, endColumn: number): VisibleRanges | null {\n\t\tif (this.shouldRender()) {\n\t\t\t// Cannot read from the DOM because it is dirty\n\t\t\t// i.e. the model & the dom are out of sync, so I'd be reading something stale\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n\t\tconst result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n\t\tthis._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n\n\t\treturn result;\n\t}\n\n\tpublic visibleRangeForPosition(position: Position): HorizontalPosition | null {\n\t\tconst visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n\t\tif (!visibleRanges) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n\t}\n\n\t// --- implementation\n\n\tpublic updateLineWidths(): void {\n\t\tthis._updateLineWidths(false);\n\t}\n\n\t/**\n\t * Updates the max line width if it is fast to compute.\n\t * Returns true if all lines were taken into account.\n\t * Returns false if some lines need to be reevaluated (in a slow fashion).\n\t */\n\tprivate _updateLineWidthsFast(): boolean {\n\t\treturn this._updateLineWidths(true);\n\t}\n\n\tprivate _updateLineWidthsSlow(): void {\n\t\tthis._updateLineWidths(false);\n\t}\n\n\t/**\n\t * Update the line widths using DOM layout information after someone else\n\t * has caused a synchronous layout.\n\t */\n\tprivate _updateLineWidthsSlowIfDomDidLayout(domReadingContext: DomReadingContext): void {\n\t\tif (!domReadingContext.didDomLayout) {\n\t\t\t// only proceed if we just did a layout\n\t\t\treturn;\n\t\t}\n\t\tif (this._asyncUpdateLineWidths.isScheduled()) {\n\t\t\t// reading widths is not scheduled => widths are up-to-date\n\t\t\treturn;\n\t\t}\n\t\tthis._asyncUpdateLineWidths.cancel();\n\t\tthis._updateLineWidthsSlow();\n\t}\n\n\tprivate _updateLineWidths(fast: boolean): boolean {\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n\t\tlet localMaxLineWidth = 1;\n\t\tlet allWidthsComputed = true;\n\t\tfor (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n\t\t\tconst visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\n\t\t\tif (fast && !visibleLine.getWidthIsFast()) {\n\t\t\t\t// Cannot compute width in a fast way for this line\n\t\t\t\tallWidthsComputed = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlocalMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n\t\t}\n\n\t\tif (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n\t\t\t// we know the max line width for all the lines\n\t\t\tthis._maxLineWidth = 0;\n\t\t}\n\n\t\tthis._ensureMaxLineWidth(localMaxLineWidth);\n\n\t\treturn allWidthsComputed;\n\t}\n\n\tprivate _checkMonospaceFontAssumptions(): void {\n\t\t// Problems with monospace assumptions are more apparent for longer lines,\n\t\t// as small rounding errors start to sum up, so we will select the longest\n\t\t// line for a closer inspection\n\t\tlet longestLineNumber = -1;\n\t\tlet longestWidth = -1;\n\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n\t\t\tconst visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\tif (visibleLine.needsMonospaceFontCheck()) {\n\t\t\t\tconst lineWidth = visibleLine.getWidth(null);\n\t\t\t\tif (lineWidth > longestWidth) {\n\t\t\t\t\tlongestWidth = lineWidth;\n\t\t\t\t\tlongestLineNumber = lineNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (longestLineNumber === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n\t\t\tfor (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n\t\t\t\tconst visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\t\tvisibleLine.onMonospaceAssumptionsInvalidated();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic prepareRender(): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic render(): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic renderText(viewportData: ViewportData): void {\n\t\t// (1) render lines - ensures lines are in the DOM\n\t\tthis._visibleLines.renderLines(viewportData);\n\t\tthis._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n\t\tthis.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n\t\tthis.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n\n\t\t// (2) compute horizontal scroll position:\n\t\t//  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n\t\t//  - it might change `scrollWidth` and `scrollLeft`\n\t\tif (this._horizontalRevealRequest) {\n\n\t\t\tconst horizontalRevealRequest = this._horizontalRevealRequest;\n\n\t\t\t// Check that we have the line that contains the horizontal range in the viewport\n\t\t\tif (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n\n\t\t\t\tthis._horizontalRevealRequest = null;\n\n\t\t\t\t// allow `visibleRangesForRange2` to work\n\t\t\t\tthis.onDidRender();\n\n\t\t\t\t// compute new scroll position\n\t\t\t\tconst newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n\n\t\t\t\tif (newScrollLeft) {\n\t\t\t\t\tif (!this._isViewportWrapping) {\n\t\t\t\t\t\t// ensure `scrollWidth` is large enough\n\t\t\t\t\t\tthis._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n\t\t\t\t\t}\n\t\t\t\t\t// set `scrollLeft`\n\t\t\t\t\tthis._context.viewModel.viewLayout.setScrollPosition({\n\t\t\t\t\t\tscrollLeft: newScrollLeft.scrollLeft\n\t\t\t\t\t}, horizontalRevealRequest.scrollType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n\t\tif (!this._updateLineWidthsFast()) {\n\t\t\t// Computing the width of some lines would be slow => delay it\n\t\t\tthis._asyncUpdateLineWidths.schedule();\n\t\t} else {\n\t\t\tthis._asyncUpdateLineWidths.cancel();\n\t\t}\n\n\t\tif (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n\t\t\tconst rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\t\t\tconst rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\t\t\tfor (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n\t\t\t\tconst visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\t\tif (visibleLine.needsMonospaceFontCheck()) {\n\t\t\t\t\tthis._asyncCheckMonospaceFontAssumptions.schedule();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) handle scrolling\n\t\tthis._linesContent.setLayerHinting(this._canUseLayerHinting);\n\t\tthis._linesContent.setContain('strict');\n\t\tconst adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n\t\tthis._linesContent.setTop(-adjustedScrollTop);\n\t\tthis._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n\t}\n\n\t// --- width\n\n\tprivate _ensureMaxLineWidth(lineWidth: number): void {\n\t\tconst iLineWidth = Math.ceil(lineWidth);\n\t\tif (this._maxLineWidth < iLineWidth) {\n\t\t\tthis._maxLineWidth = iLineWidth;\n\t\t\tthis._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n\t\t}\n\t}\n\n\tprivate _computeScrollTopToRevealRange(viewport: Viewport, source: string | null | undefined, minimalReveal: boolean, range: Range | null, selections: Selection[] | null, verticalType: viewEvents.VerticalRevealType): number {\n\t\tconst viewportStartY = viewport.top;\n\t\tconst viewportHeight = viewport.height;\n\t\tconst viewportEndY = viewportStartY + viewportHeight;\n\t\tlet boxIsSingleRange: boolean;\n\t\tlet boxStartY: number;\n\t\tlet boxEndY: number;\n\n\t\tif (selections && selections.length > 0) {\n\t\t\tlet minLineNumber = selections[0].startLineNumber;\n\t\t\tlet maxLineNumber = selections[0].endLineNumber;\n\t\t\tfor (let i = 1, len = selections.length; i < len; i++) {\n\t\t\t\tconst selection = selections[i];\n\t\t\t\tminLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n\t\t\t\tmaxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n\t\t\t}\n\t\t\tboxIsSingleRange = false;\n\t\t\tboxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n\t\t\tboxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n\t\t} else if (range) {\n\t\t\tboxIsSingleRange = true;\n\t\t\tboxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n\t\t\tboxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n\n\t\tlet paddingTop: number = 0;\n\t\tlet paddingBottom: number = 0;\n\n\t\tif (!shouldIgnoreScrollOff) {\n\t\t\tconst maxLinesInViewport = (viewportHeight / this._lineHeight);\n\t\t\tconst surroundingLines = Math.max(this._cursorSurroundingLines, this._stickyScrollEnabled ? this._maxNumberStickyLines : 0);\n\t\t\tconst context = Math.min(maxLinesInViewport / 2, surroundingLines);\n\t\t\tpaddingTop = context * this._lineHeight;\n\t\t\tpaddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n\t\t} else {\n\t\t\tif (!minimalReveal) {\n\t\t\t\t// Reveal one more line above (this case is hit when dragging)\n\t\t\t\tpaddingTop = this._lineHeight;\n\t\t\t}\n\t\t}\n\t\tif (!minimalReveal) {\n\t\t\tif (verticalType === viewEvents.VerticalRevealType.Simple || verticalType === viewEvents.VerticalRevealType.Bottom) {\n\t\t\t\t// Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n\t\t\t\tpaddingBottom += this._lineHeight;\n\t\t\t}\n\t\t}\n\n\t\tboxStartY -= paddingTop;\n\t\tboxEndY += paddingBottom;\n\t\tlet newScrollTop: number;\n\n\t\tif (boxEndY - boxStartY > viewportHeight) {\n\t\t\t// the box is larger than the viewport ... scroll to its top\n\t\t\tif (!boxIsSingleRange) {\n\t\t\t\t// do not reveal multiple cursors if there are more than fit the viewport\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tnewScrollTop = boxStartY;\n\t\t} else if (verticalType === viewEvents.VerticalRevealType.NearTop || verticalType === viewEvents.VerticalRevealType.NearTopIfOutsideViewport) {\n\t\t\tif (verticalType === viewEvents.VerticalRevealType.NearTopIfOutsideViewport && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n\t\t\t\t// Box is already in the viewport... do nothing\n\t\t\t\tnewScrollTop = viewportStartY;\n\t\t\t} else {\n\t\t\t\t// We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n\t\t\t\tconst desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n\t\t\t\t// Try to scroll just above the box with the desired gap\n\t\t\t\tconst desiredScrollTop = boxStartY - desiredGapAbove;\n\t\t\t\t// But ensure that the box is not pushed out of viewport\n\t\t\t\tconst minScrollTop = boxEndY - viewportHeight;\n\t\t\t\tnewScrollTop = Math.max(minScrollTop, desiredScrollTop);\n\t\t\t}\n\t\t} else if (verticalType === viewEvents.VerticalRevealType.Center || verticalType === viewEvents.VerticalRevealType.CenterIfOutsideViewport) {\n\t\t\tif (verticalType === viewEvents.VerticalRevealType.CenterIfOutsideViewport && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n\t\t\t\t// Box is already in the viewport... do nothing\n\t\t\t\tnewScrollTop = viewportStartY;\n\t\t\t} else {\n\t\t\t\t// Box is outside the viewport... center it\n\t\t\t\tconst boxMiddleY = (boxStartY + boxEndY) / 2;\n\t\t\t\tnewScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n\t\t\t}\n\t\t} else {\n\t\t\tnewScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === viewEvents.VerticalRevealType.Top, verticalType === viewEvents.VerticalRevealType.Bottom);\n\t\t}\n\n\t\treturn newScrollTop;\n\t}\n\n\tprivate _computeScrollLeftToReveal(horizontalRevealRequest: HorizontalRevealRequest): { scrollLeft: number; maxHorizontalOffset: number } | null {\n\n\t\tconst viewport = this._context.viewLayout.getCurrentViewport();\n\t\tconst layoutInfo = this._context.configuration.options.get(EditorOption.layoutInfo);\n\t\tconst viewportStartX = viewport.left;\n\t\tconst viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n\n\t\tlet boxStartX = Constants.MAX_SAFE_SMALL_INTEGER;\n\t\tlet boxEndX = 0;\n\t\tif (horizontalRevealRequest.type === 'range') {\n\t\t\tconst visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n\t\t\tif (!visibleRanges) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (const visibleRange of visibleRanges.ranges) {\n\t\t\t\tboxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n\t\t\t\tboxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const selection of horizontalRevealRequest.selections) {\n\t\t\t\tif (selection.startLineNumber !== selection.endLineNumber) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n\t\t\t\tif (!visibleRanges) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tfor (const visibleRange of visibleRanges.ranges) {\n\t\t\t\t\tboxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n\t\t\t\t\tboxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontalRevealRequest.minimalReveal) {\n\t\t\tboxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n\t\t\tboxEndX += this._revealHorizontalRightPadding;\n\t\t}\n\n\t\tif (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n\t\treturn {\n\t\t\tscrollLeft: newScrollLeft,\n\t\t\tmaxHorizontalOffset: boxEndX\n\t\t};\n\t}\n\n\tprivate _computeMinimumScrolling(viewportStart: number, viewportEnd: number, boxStart: number, boxEnd: number, revealAtStart?: boolean, revealAtEnd?: boolean): number {\n\t\tviewportStart = viewportStart | 0;\n\t\tviewportEnd = viewportEnd | 0;\n\t\tboxStart = boxStart | 0;\n\t\tboxEnd = boxEnd | 0;\n\t\trevealAtStart = !!revealAtStart;\n\t\trevealAtEnd = !!revealAtEnd;\n\n\t\tconst viewportLength = viewportEnd - viewportStart;\n\t\tconst boxLength = boxEnd - boxStart;\n\n\t\tif (boxLength < viewportLength) {\n\t\t\t// The box would fit in the viewport\n\n\t\t\tif (revealAtStart) {\n\t\t\t\treturn boxStart;\n\t\t\t}\n\n\t\t\tif (revealAtEnd) {\n\t\t\t\treturn Math.max(0, boxEnd - viewportLength);\n\t\t\t}\n\n\t\t\tif (boxStart < viewportStart) {\n\t\t\t\t// The box is above the viewport\n\t\t\t\treturn boxStart;\n\t\t\t} else if (boxEnd > viewportEnd) {\n\t\t\t\t// The box is below the viewport\n\t\t\t\treturn Math.max(0, boxEnd - viewportLength);\n\t\t\t}\n\t\t} else {\n\t\t\t// The box would not fit in the viewport\n\t\t\t// Reveal the beginning of the box\n\t\t\treturn boxStart;\n\t\t}\n\n\t\treturn viewportStart;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,wCAAwC;AACjD,SAAS,wBAAwB;AACjC,YAAY,cAAc;AAC1B,SAAS,iBAAiB;AAC1B,OAAO;AACP,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB,iBAAiB,YAAY,mBAAmB,qBAAqB;AAClG,SAAS,8BAA8B;AACvC,SAAS,iBAAiB,kBAAkB,gBAAgB;AAC5D,SAAS,yBAAyB;AAClC,SAAS,gBAAgB;AACzB,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,YAAY,gBAAgB;AAC5B,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAEhC,MAAM,iBAAiB;AAAA,EA5BvB,OA4BuB;AAAA;AAAA;AAAA,EAEd;AAAA,EAER,cAAc;AACb,SAAK,uBAAuB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,EACjD;AAAA,EAEO,yBAAgC;AACtC,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,uBAAuB,qBAAkC;AAC/D,SAAK,uBAAuB;AAAA,EAC7B;AACD;AAEA,MAAM,6BAA6B;AAAA,EAKlC,YACiB,eACA,YACA,aACA,WACA,gBACA,eACA,YACf;AAPe;AACA;AACA;AACA;AACA;AACA;AACA;AAEhB,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAAA,EACtB;AAAA,EA7DD,OA6CmC;AAAA;AAAA;AAAA,EAClB,OAAO;AAAA,EACP;AAAA,EACA;AAcjB;AAEA,MAAM,kCAAkC;AAAA,EAKvC,YACiB,eACA,YACA,gBACA,eACA,YACf;AALe;AACA;AACA;AACA;AACA;AAEhB,QAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,QAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,aAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK;AACtD,YAAM,YAAY,WAAW,CAAC;AAC9B,sBAAgB,KAAK,IAAI,eAAe,UAAU,eAAe;AACjE,sBAAgB,KAAK,IAAI,eAAe,UAAU,aAAa;AAAA,IAChE;AACA,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAAA,EACtB;AAAA,EArFD,OAgEwC;AAAA;AAAA;AAAA,EACvB,OAAO;AAAA,EACP;AAAA,EACA;AAmBjB;AAQO,MAAM,kBAAkB,SAA+B;AAAA,EA9F9D,OA8F8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAI7D,OAAwB,sBAAsB;AAAA,EAE7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACS;AAAA,EACA;AAAA,EAET;AAAA,EACS;AAAA;AAAA,EAGT;AAAA,EACA;AAAA,EAER,YAAY,SAAsB,cAAwC;AACzE,UAAM,OAAO;AAEb,UAAM,OAAO,KAAK,SAAS;AAC3B,UAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,UAAM,WAAW,QAAQ,IAAI,aAAa,QAAQ;AAClD,UAAM,eAAe,QAAQ,IAAI,aAAa,YAAY;AAE1D,SAAK,cAAc,QAAQ,IAAI,aAAa,UAAU;AACtD,SAAK,kCAAkC,SAAS;AAChD,SAAK,sBAAsB,aAAa;AACxC,SAAK,gCAAgC,QAAQ,IAAI,aAAa,4BAA4B;AAC1F,SAAK,0BAA0B,QAAQ,IAAI,aAAa,sBAAsB;AAC9E,SAAK,+BAA+B,QAAQ,IAAI,aAAa,2BAA2B;AACxF,SAAK,sBAAsB,CAAC,QAAQ,IAAI,aAAa,mBAAmB;AACxE,SAAK,mBAAmB,IAAI,gBAAgB,MAAM,KAAK,SAAS,MAAM,IAAI;AAE1E,SAAK,gBAAgB;AACrB,SAAK,wBAAwB,SAAS,cAAc,KAAK;AACzD,SAAK,gBAAgB,IAAI,uBAAuB;AAAA,MAC/C,YAAY,6BAAM,IAAI,SAAS,KAAK,gBAAgB,GAAxC;AAAA,IACb,CAAC;AACD,SAAK,UAAU,KAAK,cAAc;AAElC,qBAAiB,MAAM,KAAK,SAAS,gBAAgB,SAAS;AAC9D,SAAK,QAAQ,aAAa,cAAc,gCAAgC,EAAE;AAC1E,kBAAc,KAAK,SAAS,QAAQ;AAGpC,SAAK,gBAAgB;AACrB,SAAK,yBAAyB,IAAI,iBAAiB,MAAM;AACxD,WAAK,sBAAsB;AAAA,IAC5B,GAAG,GAAG;AACN,SAAK,sCAAsC,IAAI,iBAAiB,MAAM;AACrE,WAAK,+BAA+B;AAAA,IACrC,GAAG,GAAI;AAEP,SAAK,oBAAoB,IAAI,iBAAiB;AAE9C,SAAK,2BAA2B;AAGhC,SAAK,uBAAuB,QAAQ,IAAI,aAAa,YAAY,EAAE;AACnE,SAAK,wBAAwB,QAAQ,IAAI,aAAa,YAAY,EAAE;AAAA,EACrE;AAAA,EAEgB,UAAgB;AAC/B,SAAK,uBAAuB,QAAQ;AACpC,SAAK,oCAAoC,QAAQ;AACjD,UAAM,QAAQ;AAAA,EACf;AAAA,EAEO,aAAuC;AAC7C,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAIgB,uBAAuB,GAAsD;AAC5F,SAAK,cAAc,uBAAuB,CAAC;AAC3C,QAAI,EAAE,WAAW,aAAa,YAAY,GAAG;AAC5C,WAAK,gBAAgB;AAAA,IACtB;AAEA,UAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,UAAM,WAAW,QAAQ,IAAI,aAAa,QAAQ;AAClD,UAAM,eAAe,QAAQ,IAAI,aAAa,YAAY;AAE1D,SAAK,cAAc,QAAQ,IAAI,aAAa,UAAU;AACtD,SAAK,kCAAkC,SAAS;AAChD,SAAK,sBAAsB,aAAa;AACxC,SAAK,gCAAgC,QAAQ,IAAI,aAAa,4BAA4B;AAC1F,SAAK,0BAA0B,QAAQ,IAAI,aAAa,sBAAsB;AAC9E,SAAK,+BAA+B,QAAQ,IAAI,aAAa,2BAA2B;AACxF,SAAK,sBAAsB,CAAC,QAAQ,IAAI,aAAa,mBAAmB;AAGxE,SAAK,uBAAuB,QAAQ,IAAI,aAAa,YAAY,EAAE;AACnE,SAAK,wBAAwB,QAAQ,IAAI,aAAa,YAAY,EAAE;AAEpE,kBAAc,KAAK,SAAS,QAAQ;AAEpC,SAAK,uBAAuB;AAE5B,QAAI,EAAE,WAAW,aAAa,UAAU,GAAG;AAC1C,WAAK,gBAAgB;AAAA,IACtB;AAEA,WAAO;AAAA,EACR;AAAA,EACQ,yBAAkC;AACzC,UAAM,OAAO,KAAK,SAAS;AAE3B,UAAM,qBAAqB,IAAI,gBAAgB,MAAM,KAAK,SAAS,MAAM,IAAI;AAC7E,QAAI,CAAC,KAAK,iBAAiB,OAAO,kBAAkB,GAAG;AACtD,WAAK,mBAAmB;AAExB,YAAM,kBAAkB,KAAK,cAAc,mBAAmB;AAC9D,YAAM,gBAAgB,KAAK,cAAc,iBAAiB;AAC1D,eAAS,aAAa,iBAAiB,cAAc,eAAe,cAAc;AACjF,cAAM,OAAO,KAAK,cAAc,eAAe,UAAU;AACzD,aAAK,iBAAiB,KAAK,gBAAgB;AAAA,MAC5C;AACA,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EACgB,qBAAqB,GAAoD;AACxF,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,QAAI,IAAI;AACR,aAAS,aAAa,qBAAqB,cAAc,mBAAmB,cAAc;AACzF,UAAI,KAAK,cAAc,eAAe,UAAU,EAAE,mBAAmB,KAAK;AAAA,IAC3E;AACA,WAAO;AAAA,EACR;AAAA,EACgB,qBAAqB,GAAoD;AACxF,QAAI,MAAoC;AACvC,YAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,YAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,eAAS,aAAa,qBAAqB,cAAc,mBAAmB,cAAc;AACzF,aAAK,cAAc,eAAe,UAAU,EAAE,qBAAqB;AAAA,MACpE;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACgB,UAAU,GAAyC;AAClE,UAAM,eAAe,KAAK,cAAc,UAAU,CAAC;AACnD,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACR;AAAA,EACgB,eAAe,GAA8C;AAC5E,WAAO,KAAK,cAAc,eAAe,CAAC;AAAA,EAC3C;AAAA,EACgB,eAAe,GAA8C;AAC5E,WAAO,KAAK,cAAc,eAAe,CAAC;AAAA,EAC3C;AAAA,EACgB,gBAAgB,GAA+C;AAC9E,WAAO,KAAK,cAAc,gBAAgB,CAAC;AAAA,EAC5C;AAAA,EACgB,qBAAqB,GAAoD;AAGxF,UAAM,mBAAmB,KAAK,+BAA+B,KAAK,SAAS,WAAW,kBAAkB,GAAG,EAAE,QAAQ,EAAE,eAAe,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY;AAE3K,QAAI,qBAAqB,IAAI;AAE5B,aAAO;AAAA,IACR;AAGA,QAAI,oBAAoB,KAAK,SAAS,WAAW,uBAAuB,EAAE,WAAW,iBAAiB,CAAC;AAEvG,QAAI,EAAE,kBAAkB;AACvB,UAAI,EAAE,SAAS,EAAE,MAAM,oBAAoB,EAAE,MAAM,eAAe;AAEjE,4BAAoB;AAAA,UACnB,WAAW,kBAAkB;AAAA,UAC7B,YAAY;AAAA,QACb;AAAA,MACD,WAAW,EAAE,OAAO;AAEnB,aAAK,2BAA2B,IAAI,6BAA6B,EAAE,eAAe,EAAE,MAAM,iBAAiB,EAAE,MAAM,aAAa,EAAE,MAAM,WAAW,KAAK,SAAS,WAAW,oBAAoB,GAAG,kBAAkB,WAAW,EAAE,UAAU;AAAA,MAC7O,WAAW,EAAE,cAAc,EAAE,WAAW,SAAS,GAAG;AACnD,aAAK,2BAA2B,IAAI,kCAAkC,EAAE,eAAe,EAAE,YAAY,KAAK,SAAS,WAAW,oBAAoB,GAAG,kBAAkB,WAAW,EAAE,UAAU;AAAA,MAC/L;AAAA,IACD,OAAO;AACN,WAAK,2BAA2B;AAAA,IACjC;AAEA,UAAM,iBAAiB,KAAK,IAAI,KAAK,SAAS,WAAW,oBAAoB,IAAI,kBAAkB,SAAS;AAC5G,UAAM,aAAc,kBAAkB,KAAK,cAAc,WAAW,YAAY,EAAE;AAClF,SAAK,SAAS,UAAU,WAAW,kBAAkB,mBAAmB,UAAU;AAElF,WAAO;AAAA,EACR;AAAA,EACgB,gBAAgB,GAA+C;AAC9E,QAAI,KAAK,4BAA4B,EAAE,mBAAmB;AAEzD,WAAK,2BAA2B;AAAA,IACjC;AACA,QAAI,KAAK,4BAA4B,EAAE,kBAAkB;AACxD,YAAM,MAAM,KAAK,IAAI,KAAK,yBAAyB,gBAAgB,KAAK,yBAAyB,aAAa;AAC9G,YAAM,MAAM,KAAK,IAAI,KAAK,yBAAyB,gBAAgB,KAAK,yBAAyB,aAAa;AAC9G,UAAI,EAAE,YAAY,OAAO,EAAE,YAAY,KAAK;AAE3C,aAAK,2BAA2B;AAAA,MACjC;AAAA,IACD;AACA,SAAK,QAAQ,SAAS,EAAE,WAAW;AACnC,WAAO,KAAK,cAAc,gBAAgB,CAAC,KAAK;AAAA,EACjD;AAAA,EAEgB,gBAAgB,GAA+C;AAC9E,WAAO,KAAK,cAAc,gBAAgB,CAAC;AAAA,EAC5C;AAAA,EACgB,eAAe,GAA8C;AAC5E,SAAK,SAAS,UAAU,WAAW,gBAAgB,KAAK,aAAa;AACrE,WAAO,KAAK,cAAc,eAAe,CAAC;AAAA,EAC3C;AAAA,EACgB,eAAe,GAA8C;AAC5E,WAAO,KAAK,uBAAuB;AAAA,EACpC;AAAA;AAAA;AAAA,EAMO,uBAAuB,UAAuB,QAAiC;AACrF,UAAM,kBAAkB,KAAK,oBAAoB,QAAQ;AACzD,QAAI,oBAAoB,MAAM;AAE7B,aAAO;AAAA,IACR;AACA,UAAM,aAAa,KAAK,kBAAkB,eAAe;AAEzD,QAAI,eAAe,IAAI;AAEtB,aAAO;AAAA,IACR;AAEA,QAAI,aAAa,KAAK,aAAa,KAAK,SAAS,UAAU,aAAa,GAAG;AAE1E,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,UAAU,iBAAiB,UAAU,MAAM,GAAG;AAE/D,aAAO,IAAI,SAAS,YAAY,CAAC;AAAA,IAClC;AAEA,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,QAAI,aAAa,uBAAuB,aAAa,mBAAmB;AAEvE,aAAO;AAAA,IACR;AAEA,QAAI,SAAS,KAAK,cAAc,eAAe,UAAU,EAAE,sBAAsB,UAAU,MAAM;AACjG,UAAM,YAAY,KAAK,SAAS,UAAU,iBAAiB,UAAU;AACrE,QAAI,SAAS,WAAW;AACvB,eAAS;AAAA,IACV;AACA,WAAO,IAAI,SAAS,YAAY,MAAM;AAAA,EACvC;AAAA,EAEQ,oBAAoB,MAA8C;AACzE,WAAO,QAAQ,KAAK,aAAa,GAAG;AACnC,UAAI,KAAK,cAAc,SAAS,YAAY;AAC3C,eAAO;AAAA,MACR;AACA,aAAO,KAAK;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKQ,kBAAkB,SAA8B;AACvD,UAAM,kBAAkB,KAAK,cAAc,mBAAmB;AAC9D,UAAM,gBAAgB,KAAK,cAAc,iBAAiB;AAC1D,aAAS,aAAa,iBAAiB,cAAc,eAAe,cAAc;AACjF,YAAM,OAAO,KAAK,cAAc,eAAe,UAAU;AACzD,UAAI,YAAY,KAAK,WAAW,GAAG;AAClC,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEO,aAAa,YAA4B;AAC/C,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,QAAI,aAAa,uBAAuB,aAAa,mBAAmB;AAEvE,aAAO;AAAA,IACR;AAEA,UAAM,UAAU,IAAI,kBAAkB,KAAK,QAAQ,SAAS,KAAK,qBAAqB;AACtF,UAAM,SAAS,KAAK,cAAc,eAAe,UAAU,EAAE,SAAS,OAAO;AAC7E,SAAK,oCAAoC,OAAO;AAEhD,WAAO;AAAA,EACR;AAAA,EAEO,2BAA2B,QAAe,iBAAsD;AACtG,QAAI,KAAK,aAAa,GAAG;AAGxB,aAAO;AAAA,IACR;AAEA,UAAM,wBAAwB,OAAO;AACrC,UAAM,QAAQ,MAAM,gBAAgB,QAAQ,KAAK,kBAAkB,uBAAuB,CAAC;AAC3F,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AAEA,UAAM,gBAAqC,CAAC;AAC5C,QAAI,mBAAmB;AACvB,UAAM,oBAAoB,IAAI,kBAAkB,KAAK,QAAQ,SAAS,KAAK,qBAAqB;AAEhG,QAAI,0BAAkC;AACtC,QAAI,iBAAiB;AACpB,gCAA0B,KAAK,SAAS,UAAU,qBAAqB,mCAAmC,IAAI,SAAS,MAAM,iBAAiB,CAAC,CAAC,EAAE;AAAA,IACnJ;AAEA,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,aAAS,aAAa,MAAM,iBAAiB,cAAc,MAAM,eAAe,cAAc;AAE7F,UAAI,aAAa,uBAAuB,aAAa,mBAAmB;AACvE;AAAA,MACD;AAEA,YAAM,cAAc,eAAe,MAAM,kBAAkB,MAAM,cAAc;AAC/E,YAAM,sBAAsB,eAAe,MAAM;AACjD,YAAM,YAAY,sBAAsB,KAAK,SAAS,UAAU,iBAAiB,UAAU,IAAI,MAAM;AACrG,YAAM,uBAAuB,KAAK,cAAc,eAAe,UAAU,EAAE,yBAAyB,YAAY,aAAa,WAAW,iBAAiB;AAEzJ,UAAI,CAAC,sBAAsB;AAC1B;AAAA,MACD;AAEA,UAAI,mBAAmB,aAAa,uBAAuB;AAC1D,cAAM,6BAA6B;AACnC,kCAA0B,KAAK,SAAS,UAAU,qBAAqB,mCAAmC,IAAI,SAAS,aAAa,GAAG,CAAC,CAAC,EAAE;AAE3I,YAAI,+BAA+B,yBAAyB;AAC3D,+BAAqB,OAAO,qBAAqB,OAAO,SAAS,CAAC,EAAE,SAAS,KAAK;AAAA,QACnF;AAAA,MACD;AAEA,oBAAc,kBAAkB,IAAI,IAAI,kBAAkB,qBAAqB,qBAAqB,YAAY,gBAAgB,KAAK,qBAAqB,MAAM,GAAG,mBAAmB;AAAA,IACvL;AAEA,SAAK,oCAAoC,iBAAiB;AAE1D,QAAI,qBAAqB,GAAG;AAC3B,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,2BAA2B,YAAoB,aAAqB,WAAyC;AACpH,QAAI,KAAK,aAAa,GAAG;AAGxB,aAAO;AAAA,IACR;AAEA,QAAI,aAAa,KAAK,cAAc,mBAAmB,KAAK,aAAa,KAAK,cAAc,iBAAiB,GAAG;AAC/G,aAAO;AAAA,IACR;AAEA,UAAM,oBAAoB,IAAI,kBAAkB,KAAK,QAAQ,SAAS,KAAK,qBAAqB;AAChG,UAAM,SAAS,KAAK,cAAc,eAAe,UAAU,EAAE,yBAAyB,YAAY,aAAa,WAAW,iBAAiB;AAC3I,SAAK,oCAAoC,iBAAiB;AAE1D,WAAO;AAAA,EACR;AAAA,EAEO,wBAAwB,UAA+C;AAC7E,UAAM,gBAAgB,KAAK,2BAA2B,SAAS,YAAY,SAAS,QAAQ,SAAS,MAAM;AAC3G,QAAI,CAAC,eAAe;AACnB,aAAO;AAAA,IACR;AACA,WAAO,IAAI,mBAAmB,cAAc,qBAAqB,cAAc,OAAO,CAAC,EAAE,IAAI;AAAA,EAC9F;AAAA;AAAA,EAIO,mBAAyB;AAC/B,SAAK,kBAAkB,KAAK;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,wBAAiC;AACxC,WAAO,KAAK,kBAAkB,IAAI;AAAA,EACnC;AAAA,EAEQ,wBAA8B;AACrC,SAAK,kBAAkB,KAAK;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,oCAAoC,mBAA4C;AACvF,QAAI,CAAC,kBAAkB,cAAc;AAEpC;AAAA,IACD;AACA,QAAI,KAAK,uBAAuB,YAAY,GAAG;AAE9C;AAAA,IACD;AACA,SAAK,uBAAuB,OAAO;AACnC,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEQ,kBAAkB,MAAwB;AACjD,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAE9D,QAAI,oBAAoB;AACxB,QAAI,oBAAoB;AACxB,aAAS,aAAa,qBAAqB,cAAc,mBAAmB,cAAc;AACzF,YAAM,cAAc,KAAK,cAAc,eAAe,UAAU;AAEhE,UAAI,QAAQ,CAAC,YAAY,eAAe,GAAG;AAE1C,4BAAoB;AACpB;AAAA,MACD;AAEA,0BAAoB,KAAK,IAAI,mBAAmB,YAAY,SAAS,IAAI,CAAC;AAAA,IAC3E;AAEA,QAAI,qBAAqB,wBAAwB,KAAK,sBAAsB,KAAK,SAAS,UAAU,aAAa,GAAG;AAEnH,WAAK,gBAAgB;AAAA,IACtB;AAEA,SAAK,oBAAoB,iBAAiB;AAE1C,WAAO;AAAA,EACR;AAAA,EAEQ,iCAAuC;AAI9C,QAAI,oBAAoB;AACxB,QAAI,eAAe;AACnB,UAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,UAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,aAAS,aAAa,qBAAqB,cAAc,mBAAmB,cAAc;AACzF,YAAM,cAAc,KAAK,cAAc,eAAe,UAAU;AAChE,UAAI,YAAY,wBAAwB,GAAG;AAC1C,cAAM,YAAY,YAAY,SAAS,IAAI;AAC3C,YAAI,YAAY,cAAc;AAC7B,yBAAe;AACf,8BAAoB;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAEA,QAAI,sBAAsB,IAAI;AAC7B;AAAA,IACD;AAEA,QAAI,CAAC,KAAK,cAAc,eAAe,iBAAiB,EAAE,6BAA6B,GAAG;AACzF,eAAS,aAAa,qBAAqB,cAAc,mBAAmB,cAAc;AACzF,cAAM,cAAc,KAAK,cAAc,eAAe,UAAU;AAChE,oBAAY,kCAAkC;AAAA,MAC/C;AAAA,IACD;AAAA,EACD;AAAA,EAEO,gBAAsB;AAC5B,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEO,SAAe;AACrB,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEO,WAAW,cAAkC;AAEnD,SAAK,cAAc,YAAY,YAAY;AAC3C,SAAK,kBAAkB,uBAAuB,aAAa,YAAY;AACvE,SAAK,QAAQ,SAAS,KAAK,SAAS,WAAW,eAAe,CAAC;AAC/D,SAAK,QAAQ,UAAU,KAAK,IAAI,KAAK,SAAS,WAAW,gBAAgB,GAAG,GAAO,CAAC;AAKpF,QAAI,KAAK,0BAA0B;AAElC,YAAM,0BAA0B,KAAK;AAGrC,UAAI,aAAa,mBAAmB,wBAAwB,iBAAiB,wBAAwB,iBAAiB,aAAa,eAAe;AAEjJ,aAAK,2BAA2B;AAGhC,aAAK,YAAY;AAGjB,cAAM,gBAAgB,KAAK,2BAA2B,uBAAuB;AAE7E,YAAI,eAAe;AAClB,cAAI,CAAC,KAAK,qBAAqB;AAE9B,iBAAK,oBAAoB,cAAc,mBAAmB;AAAA,UAC3D;AAEA,eAAK,SAAS,UAAU,WAAW,kBAAkB;AAAA,YACpD,YAAY,cAAc;AAAA,UAC3B,GAAG,wBAAwB,UAAU;AAAA,QACtC;AAAA,MACD;AAAA,IACD;AAGA,QAAI,CAAC,KAAK,sBAAsB,GAAG;AAElC,WAAK,uBAAuB,SAAS;AAAA,IACtC,OAAO;AACN,WAAK,uBAAuB,OAAO;AAAA,IACpC;AAEA,QAAI,SAAS,WAAW,CAAC,KAAK,oCAAoC,YAAY,GAAG;AAChF,YAAM,sBAAsB,KAAK,cAAc,mBAAmB;AAClE,YAAM,oBAAoB,KAAK,cAAc,iBAAiB;AAC9D,eAAS,aAAa,qBAAqB,cAAc,mBAAmB,cAAc;AACzF,cAAM,cAAc,KAAK,cAAc,eAAe,UAAU;AAChE,YAAI,YAAY,wBAAwB,GAAG;AAC1C,eAAK,oCAAoC,SAAS;AAClD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,SAAK,cAAc,gBAAgB,KAAK,mBAAmB;AAC3D,SAAK,cAAc,WAAW,QAAQ;AACtC,UAAM,oBAAoB,KAAK,SAAS,WAAW,oBAAoB,IAAI,aAAa;AACxF,SAAK,cAAc,OAAO,CAAC,iBAAiB;AAC5C,SAAK,cAAc,QAAQ,CAAC,KAAK,SAAS,WAAW,qBAAqB,CAAC;AAAA,EAC5E;AAAA;AAAA,EAIQ,oBAAoB,WAAyB;AACpD,UAAM,aAAa,KAAK,KAAK,SAAS;AACtC,QAAI,KAAK,gBAAgB,YAAY;AACpC,WAAK,gBAAgB;AACrB,WAAK,SAAS,UAAU,WAAW,gBAAgB,KAAK,aAAa;AAAA,IACtE;AAAA,EACD;AAAA,EAEQ,+BAA+B,UAAoB,QAAmC,eAAwB,OAAqB,YAAgC,cAAqD;AAC/N,UAAM,iBAAiB,SAAS;AAChC,UAAM,iBAAiB,SAAS;AAChC,UAAM,eAAe,iBAAiB;AACtC,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,QAAI,cAAc,WAAW,SAAS,GAAG;AACxC,UAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,UAAI,gBAAgB,WAAW,CAAC,EAAE;AAClC,eAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK;AACtD,cAAM,YAAY,WAAW,CAAC;AAC9B,wBAAgB,KAAK,IAAI,eAAe,UAAU,eAAe;AACjE,wBAAgB,KAAK,IAAI,eAAe,UAAU,aAAa;AAAA,MAChE;AACA,yBAAmB;AACnB,kBAAY,KAAK,SAAS,WAAW,+BAA+B,aAAa;AACjF,gBAAU,KAAK,SAAS,WAAW,+BAA+B,aAAa,IAAI,KAAK;AAAA,IACzF,WAAW,OAAO;AACjB,yBAAmB;AACnB,kBAAY,KAAK,SAAS,WAAW,+BAA+B,MAAM,eAAe;AACzF,gBAAU,KAAK,SAAS,WAAW,+BAA+B,MAAM,aAAa,IAAI,KAAK;AAAA,IAC/F,OAAO;AACN,aAAO;AAAA,IACR;AAEA,UAAM,yBAAyB,WAAW,WAAW,kBAAkB,KAAK,iCAAiC;AAE7G,QAAI,aAAqB;AACzB,QAAI,gBAAwB;AAE5B,QAAI,CAAC,uBAAuB;AAC3B,YAAM,qBAAsB,iBAAiB,KAAK;AAClD,YAAM,mBAAmB,KAAK,IAAI,KAAK,yBAAyB,KAAK,uBAAuB,KAAK,wBAAwB,CAAC;AAC1H,YAAM,UAAU,KAAK,IAAI,qBAAqB,GAAG,gBAAgB;AACjE,mBAAa,UAAU,KAAK;AAC5B,sBAAgB,KAAK,IAAI,GAAI,UAAU,CAAE,IAAI,KAAK;AAAA,IACnD,OAAO;AACN,UAAI,CAAC,eAAe;AAEnB,qBAAa,KAAK;AAAA,MACnB;AAAA,IACD;AACA,QAAI,CAAC,eAAe;AACnB,UAAI,iBAAiB,WAAW,mBAAmB,UAAU,iBAAiB,WAAW,mBAAmB,QAAQ;AAEnH,yBAAiB,KAAK;AAAA,MACvB;AAAA,IACD;AAEA,iBAAa;AACb,eAAW;AACX,QAAI;AAEJ,QAAI,UAAU,YAAY,gBAAgB;AAEzC,UAAI,CAAC,kBAAkB;AAEtB,eAAO;AAAA,MACR;AACA,qBAAe;AAAA,IAChB,WAAW,iBAAiB,WAAW,mBAAmB,WAAW,iBAAiB,WAAW,mBAAmB,0BAA0B;AAC7I,UAAI,iBAAiB,WAAW,mBAAmB,4BAA4B,kBAAkB,aAAa,WAAW,cAAc;AAEtI,uBAAe;AAAA,MAChB,OAAO;AAEN,cAAM,kBAAkB,KAAK,IAAI,IAAI,KAAK,aAAa,iBAAiB,GAAG;AAE3E,cAAM,mBAAmB,YAAY;AAErC,cAAM,eAAe,UAAU;AAC/B,uBAAe,KAAK,IAAI,cAAc,gBAAgB;AAAA,MACvD;AAAA,IACD,WAAW,iBAAiB,WAAW,mBAAmB,UAAU,iBAAiB,WAAW,mBAAmB,yBAAyB;AAC3I,UAAI,iBAAiB,WAAW,mBAAmB,2BAA2B,kBAAkB,aAAa,WAAW,cAAc;AAErI,uBAAe;AAAA,MAChB,OAAO;AAEN,cAAM,cAAc,YAAY,WAAW;AAC3C,uBAAe,KAAK,IAAI,GAAG,aAAa,iBAAiB,CAAC;AAAA,MAC3D;AAAA,IACD,OAAO;AACN,qBAAe,KAAK,yBAAyB,gBAAgB,cAAc,WAAW,SAAS,iBAAiB,WAAW,mBAAmB,KAAK,iBAAiB,WAAW,mBAAmB,MAAM;AAAA,IACzM;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,2BAA2B,yBAA8G;AAEhJ,UAAM,WAAW,KAAK,SAAS,WAAW,mBAAmB;AAC7D,UAAM,aAAa,KAAK,SAAS,cAAc,QAAQ,IAAI,aAAa,UAAU;AAClF,UAAM,iBAAiB,SAAS;AAChC,UAAM,eAAe,iBAAiB,SAAS,QAAQ,WAAW;AAElE,QAAI,YAAY,UAAU;AAC1B,QAAI,UAAU;AACd,QAAI,wBAAwB,SAAS,SAAS;AAC7C,YAAM,gBAAgB,KAAK,2BAA2B,wBAAwB,YAAY,wBAAwB,aAAa,wBAAwB,SAAS;AAChK,UAAI,CAAC,eAAe;AACnB,eAAO;AAAA,MACR;AACA,iBAAW,gBAAgB,cAAc,QAAQ;AAChD,oBAAY,KAAK,IAAI,WAAW,KAAK,MAAM,aAAa,IAAI,CAAC;AAC7D,kBAAU,KAAK,IAAI,SAAS,KAAK,MAAM,aAAa,OAAO,aAAa,KAAK,CAAC;AAAA,MAC/E;AAAA,IACD,OAAO;AACN,iBAAW,aAAa,wBAAwB,YAAY;AAC3D,YAAI,UAAU,oBAAoB,UAAU,eAAe;AAC1D,iBAAO;AAAA,QACR;AACA,cAAM,gBAAgB,KAAK,2BAA2B,UAAU,iBAAiB,UAAU,aAAa,UAAU,SAAS;AAC3H,YAAI,CAAC,eAAe;AACnB,iBAAO;AAAA,QACR;AACA,mBAAW,gBAAgB,cAAc,QAAQ;AAChD,sBAAY,KAAK,IAAI,WAAW,KAAK,MAAM,aAAa,IAAI,CAAC;AAC7D,oBAAU,KAAK,IAAI,SAAS,KAAK,MAAM,aAAa,OAAO,aAAa,KAAK,CAAC;AAAA,QAC/E;AAAA,MACD;AAAA,IACD;AAEA,QAAI,CAAC,wBAAwB,eAAe;AAC3C,kBAAY,KAAK,IAAI,GAAG,YAAY,UAAU,mBAAmB;AACjE,iBAAW,KAAK;AAAA,IACjB;AAEA,QAAI,wBAAwB,SAAS,gBAAgB,UAAU,YAAY,SAAS,OAAO;AAC1F,aAAO;AAAA,IACR;AAEA,UAAM,gBAAgB,KAAK,yBAAyB,gBAAgB,cAAc,WAAW,OAAO;AACpG,WAAO;AAAA,MACN,YAAY;AAAA,MACZ,qBAAqB;AAAA,IACtB;AAAA,EACD;AAAA,EAEQ,yBAAyB,eAAuB,aAAqB,UAAkB,QAAgB,eAAyB,aAA+B;AACtK,oBAAgB,gBAAgB;AAChC,kBAAc,cAAc;AAC5B,eAAW,WAAW;AACtB,aAAS,SAAS;AAClB,oBAAgB,CAAC,CAAC;AAClB,kBAAc,CAAC,CAAC;AAEhB,UAAM,iBAAiB,cAAc;AACrC,UAAM,YAAY,SAAS;AAE3B,QAAI,YAAY,gBAAgB;AAG/B,UAAI,eAAe;AAClB,eAAO;AAAA,MACR;AAEA,UAAI,aAAa;AAChB,eAAO,KAAK,IAAI,GAAG,SAAS,cAAc;AAAA,MAC3C;AAEA,UAAI,WAAW,eAAe;AAE7B,eAAO;AAAA,MACR,WAAW,SAAS,aAAa;AAEhC,eAAO,KAAK,IAAI,GAAG,SAAS,cAAc;AAAA,MAC3C;AAAA,IACD,OAAO;AAGN,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
