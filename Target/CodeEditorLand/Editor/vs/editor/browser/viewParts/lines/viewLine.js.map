{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/lines/viewLine.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from \"../../../../base/browser/browser.js\";\nimport {\n\ttype FastDomNode,\n\tcreateFastDomNode,\n} from \"../../../../base/browser/fastDomNode.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport { isHighContrast } from \"../../../../platform/theme/common/theme.js\";\nimport { EditorFontLigatures } from \"../../../common/config/editorOptions.js\";\nimport type { StringBuilder } from \"../../../common/core/stringBuilder.js\";\nimport { LineDecoration } from \"../../../common/viewLayout/lineDecorations.js\";\nimport {\n\ttype CharacterMapping,\n\tDomPosition,\n\tForeignElementType,\n\tLineRange,\n\tRenderLineInput,\n\trenderViewLine,\n} from \"../../../common/viewLayout/viewLineRenderer.js\";\nimport type { ViewportData } from \"../../../common/viewLayout/viewLinesViewportData.js\";\nimport { InlineDecorationType } from \"../../../common/viewModel.js\";\nimport {\n\tFloatHorizontalRange,\n\tVisibleRanges,\n} from \"../../view/renderingContext.js\";\nimport type { IVisibleLine } from \"../../view/viewLayer.js\";\nimport { ViewLinesGpu } from \"../linesGpu/viewLinesGpu.js\";\nimport type { DomReadingContext } from \"./domReadingContext.js\";\nimport { RangeUtil } from \"./rangeUtil.js\";\nimport type { ViewLineOptions } from \"./viewLineOptions.js\";\n\nconst canUseFastRenderedViewLine = (() => {\n\tif (platform.isNative) {\n\t\t// In VSCode we know very well when the zoom level changes\n\t\treturn true;\n\t}\n\n\tif (platform.isLinux || browser.isFirefox || browser.isSafari) {\n\t\t// On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n\t\t// --\n\t\t// Even though we read character widths correctly, having read them at a specific zoom level\n\t\t// does not mean they are the same at the current zoom level.\n\t\t// --\n\t\t// This could be improved if we ever figure out how to get an event when browsers zoom,\n\t\t// but until then we have to stick with reading client rects.\n\t\t// --\n\t\t// The same has been observed with Firefox on Windows7\n\t\t// --\n\t\t// The same has been oversved with Safari\n\t\treturn false;\n\t}\n\n\treturn true;\n})();\n\nlet monospaceAssumptionsAreValid = true;\n\nexport class ViewLine implements IVisibleLine {\n\tpublic static readonly CLASS_NAME = \"view-line\";\n\n\tprivate _options: ViewLineOptions;\n\tprivate _isMaybeInvalid: boolean;\n\tprivate _renderedViewLine: IRenderedViewLine | null;\n\n\tconstructor(options: ViewLineOptions) {\n\t\tthis._options = options;\n\t\tthis._isMaybeInvalid = true;\n\t\tthis._renderedViewLine = null;\n\t}\n\n\t// --- begin IVisibleLineData\n\n\tpublic getDomNode(): HTMLElement | null {\n\t\tif (this._renderedViewLine && this._renderedViewLine.domNode) {\n\t\t\treturn this._renderedViewLine.domNode.domNode;\n\t\t}\n\t\treturn null;\n\t}\n\tpublic setDomNode(domNode: HTMLElement): void {\n\t\tif (this._renderedViewLine) {\n\t\t\tthis._renderedViewLine.domNode = createFastDomNode(domNode);\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t\"I have no rendered view line to set the dom node to...\",\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic onContentChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onTokensChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onDecorationsChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onOptionsChanged(newOptions: ViewLineOptions): void {\n\t\tthis._isMaybeInvalid = true;\n\t\tthis._options = newOptions;\n\t}\n\tpublic onSelectionChanged(): boolean {\n\t\tif (\n\t\t\tisHighContrast(this._options.themeType) ||\n\t\t\tthis._options.renderWhitespace === \"selection\"\n\t\t) {\n\t\t\tthis._isMaybeInvalid = true;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic renderLine(\n\t\tlineNumber: number,\n\t\tdeltaTop: number,\n\t\tlineHeight: number,\n\t\tviewportData: ViewportData,\n\t\tsb: StringBuilder,\n\t): boolean {\n\t\tif (\n\t\t\tthis._options.useGpu &&\n\t\t\tViewLinesGpu.canRender(this._options, viewportData, lineNumber)\n\t\t) {\n\t\t\tthis._renderedViewLine?.domNode?.domNode.remove();\n\t\t\tthis._renderedViewLine = null;\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._isMaybeInvalid === false) {\n\t\t\t// it appears that nothing relevant has changed\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._isMaybeInvalid = false;\n\n\t\tconst lineData = viewportData.getViewLineRenderingData(lineNumber);\n\t\tconst options = this._options;\n\t\tconst actualInlineDecorations = LineDecoration.filter(\n\t\t\tlineData.inlineDecorations,\n\t\t\tlineNumber,\n\t\t\tlineData.minColumn,\n\t\t\tlineData.maxColumn,\n\t\t);\n\n\t\t// Only send selection information when needed for rendering whitespace\n\t\tlet selectionsOnLine: LineRange[] | null = null;\n\t\tif (\n\t\t\tisHighContrast(options.themeType) ||\n\t\t\tthis._options.renderWhitespace === \"selection\"\n\t\t) {\n\t\t\tconst selections = viewportData.selections;\n\t\t\tfor (const selection of selections) {\n\t\t\t\tif (\n\t\t\t\t\tselection.endLineNumber < lineNumber ||\n\t\t\t\t\tselection.startLineNumber > lineNumber\n\t\t\t\t) {\n\t\t\t\t\t// Selection does not intersect line\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst startColumn =\n\t\t\t\t\tselection.startLineNumber === lineNumber\n\t\t\t\t\t\t? selection.startColumn\n\t\t\t\t\t\t: lineData.minColumn;\n\t\t\t\tconst endColumn =\n\t\t\t\t\tselection.endLineNumber === lineNumber\n\t\t\t\t\t\t? selection.endColumn\n\t\t\t\t\t\t: lineData.maxColumn;\n\n\t\t\t\tif (startColumn < endColumn) {\n\t\t\t\t\tif (isHighContrast(options.themeType)) {\n\t\t\t\t\t\tactualInlineDecorations.push(\n\t\t\t\t\t\t\tnew LineDecoration(\n\t\t\t\t\t\t\t\tstartColumn,\n\t\t\t\t\t\t\t\tendColumn,\n\t\t\t\t\t\t\t\t\"inline-selected-text\",\n\t\t\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (this._options.renderWhitespace === \"selection\") {\n\t\t\t\t\t\tif (!selectionsOnLine) {\n\t\t\t\t\t\t\tselectionsOnLine = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselectionsOnLine.push(\n\t\t\t\t\t\t\tnew LineRange(startColumn - 1, endColumn - 1),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst renderLineInput = new RenderLineInput(\n\t\t\toptions.useMonospaceOptimizations,\n\t\t\toptions.canUseHalfwidthRightwardsArrow,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tlineData.isBasicASCII,\n\t\t\tlineData.containsRTL,\n\t\t\tlineData.minColumn - 1,\n\t\t\tlineData.tokens,\n\t\t\tactualInlineDecorations,\n\t\t\tlineData.tabSize,\n\t\t\tlineData.startVisibleColumn,\n\t\t\toptions.spaceWidth,\n\t\t\toptions.middotWidth,\n\t\t\toptions.wsmiddotWidth,\n\t\t\toptions.stopRenderingLineAfter,\n\t\t\toptions.renderWhitespace,\n\t\t\toptions.renderControlCharacters,\n\t\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\t\tselectionsOnLine,\n\t\t);\n\n\t\tif (\n\t\t\tthis._renderedViewLine &&\n\t\t\tthis._renderedViewLine.input.equals(renderLineInput)\n\t\t) {\n\t\t\t// no need to do anything, we have the same render input\n\t\t\treturn false;\n\t\t}\n\n\t\tsb.appendString('<div style=\"top:');\n\t\tsb.appendString(String(deltaTop));\n\t\tsb.appendString(\"px;height:\");\n\t\tsb.appendString(String(lineHeight));\n\t\tsb.appendString('px;\" class=\"');\n\t\tsb.appendString(ViewLine.CLASS_NAME);\n\t\tsb.appendString('\">');\n\n\t\tconst output = renderViewLine(renderLineInput, sb);\n\n\t\tsb.appendString(\"</div>\");\n\n\t\tlet renderedViewLine: IRenderedViewLine | null = null;\n\t\tif (\n\t\t\tmonospaceAssumptionsAreValid &&\n\t\t\tcanUseFastRenderedViewLine &&\n\t\t\tlineData.isBasicASCII &&\n\t\t\toptions.useMonospaceOptimizations &&\n\t\t\toutput.containsForeignElements === ForeignElementType.None\n\t\t) {\n\t\t\trenderedViewLine = new FastRenderedViewLine(\n\t\t\t\tthis._renderedViewLine ? this._renderedViewLine.domNode : null,\n\t\t\t\trenderLineInput,\n\t\t\t\toutput.characterMapping,\n\t\t\t);\n\t\t}\n\n\t\tif (!renderedViewLine) {\n\t\t\trenderedViewLine = createRenderedLine(\n\t\t\t\tthis._renderedViewLine ? this._renderedViewLine.domNode : null,\n\t\t\t\trenderLineInput,\n\t\t\t\toutput.characterMapping,\n\t\t\t\toutput.containsRTL,\n\t\t\t\toutput.containsForeignElements,\n\t\t\t);\n\t\t}\n\n\t\tthis._renderedViewLine = renderedViewLine;\n\n\t\treturn true;\n\t}\n\n\tpublic layoutLine(\n\t\tlineNumber: number,\n\t\tdeltaTop: number,\n\t\tlineHeight: number,\n\t): void {\n\t\tif (this._renderedViewLine && this._renderedViewLine.domNode) {\n\t\t\tthis._renderedViewLine.domNode.setTop(deltaTop);\n\t\t\tthis._renderedViewLine.domNode.setHeight(lineHeight);\n\t\t}\n\t}\n\n\t// --- end IVisibleLineData\n\n\tpublic getWidth(context: DomReadingContext | null): number {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._renderedViewLine.getWidth(context);\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._renderedViewLine.getWidthIsFast();\n\t}\n\n\tpublic needsMonospaceFontCheck(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._renderedViewLine instanceof FastRenderedViewLine;\n\t}\n\n\tpublic monospaceAssumptionsAreValid(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn monospaceAssumptionsAreValid;\n\t\t}\n\t\tif (this._renderedViewLine instanceof FastRenderedViewLine) {\n\t\t\treturn this._renderedViewLine.monospaceAssumptionsAreValid();\n\t\t}\n\t\treturn monospaceAssumptionsAreValid;\n\t}\n\n\tpublic onMonospaceAssumptionsInvalidated(): void {\n\t\tif (\n\t\t\tthis._renderedViewLine &&\n\t\t\tthis._renderedViewLine instanceof FastRenderedViewLine\n\t\t) {\n\t\t\tthis._renderedViewLine =\n\t\t\t\tthis._renderedViewLine.toSlowRenderedLine();\n\t\t}\n\t}\n\n\tpublic getVisibleRangesForRange(\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): VisibleRanges | null {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn null;\n\t\t}\n\n\t\tstartColumn = Math.min(\n\t\t\tthis._renderedViewLine.input.lineContent.length + 1,\n\t\t\tMath.max(1, startColumn),\n\t\t);\n\t\tendColumn = Math.min(\n\t\t\tthis._renderedViewLine.input.lineContent.length + 1,\n\t\t\tMath.max(1, endColumn),\n\t\t);\n\n\t\tconst stopRenderingLineAfter =\n\t\t\tthis._renderedViewLine.input.stopRenderingLineAfter;\n\n\t\tif (\n\t\t\tstopRenderingLineAfter !== -1 &&\n\t\t\tstartColumn > stopRenderingLineAfter + 1 &&\n\t\t\tendColumn > stopRenderingLineAfter + 1\n\t\t) {\n\t\t\t// This range is obviously not visible\n\t\t\treturn new VisibleRanges(true, [\n\t\t\t\tnew FloatHorizontalRange(this.getWidth(context), 0),\n\t\t\t]);\n\t\t}\n\n\t\tif (\n\t\t\tstopRenderingLineAfter !== -1 &&\n\t\t\tstartColumn > stopRenderingLineAfter + 1\n\t\t) {\n\t\t\tstartColumn = stopRenderingLineAfter + 1;\n\t\t}\n\n\t\tif (\n\t\t\tstopRenderingLineAfter !== -1 &&\n\t\t\tendColumn > stopRenderingLineAfter + 1\n\t\t) {\n\t\t\tendColumn = stopRenderingLineAfter + 1;\n\t\t}\n\n\t\tconst horizontalRanges =\n\t\t\tthis._renderedViewLine.getVisibleRangesForRange(\n\t\t\t\tlineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendColumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\tif (horizontalRanges && horizontalRanges.length > 0) {\n\t\t\treturn new VisibleRanges(false, horizontalRanges);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getColumnOfNodeOffset(\n\t\tspanNode: HTMLElement,\n\t\toffset: number,\n\t): number {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn this._renderedViewLine.getColumnOfNodeOffset(spanNode, offset);\n\t}\n}\n\ninterface IRenderedViewLine {\n\tdomNode: FastDomNode<HTMLElement> | null;\n\treadonly input: RenderLineInput;\n\tgetWidth(context: DomReadingContext | null): number;\n\tgetWidthIsFast(): boolean;\n\tgetVisibleRangesForRange(\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): FloatHorizontalRange[] | null;\n\tgetColumnOfNodeOffset(spanNode: HTMLElement, offset: number): number;\n}\n\nenum Constants {\n\t/**\n\t * It seems that rounding errors occur with long lines, so the purely multiplication based\n\t * method is only viable for short lines. For longer lines, we look up the real position of\n\t * every 300th character and use multiplication based on that.\n\t *\n\t * See https://github.com/microsoft/vscode/issues/33178\n\t */\n\tMaxMonospaceDistance = 300,\n}\n\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine implements IRenderedViewLine {\n\tpublic domNode: FastDomNode<HTMLElement> | null;\n\tpublic readonly input: RenderLineInput;\n\n\tprivate readonly _characterMapping: CharacterMapping;\n\tprivate readonly _charWidth: number;\n\tprivate readonly _keyColumnPixelOffsetCache: Float32Array | null;\n\tprivate _cachedWidth = -1;\n\n\tconstructor(\n\t\tdomNode: FastDomNode<HTMLElement> | null,\n\t\trenderLineInput: RenderLineInput,\n\t\tcharacterMapping: CharacterMapping,\n\t) {\n\t\tthis.domNode = domNode;\n\t\tthis.input = renderLineInput;\n\t\tconst keyColumnCount = Math.floor(\n\t\t\trenderLineInput.lineContent.length / Constants.MaxMonospaceDistance,\n\t\t);\n\t\tif (keyColumnCount > 0) {\n\t\t\tthis._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n\t\t\tfor (let i = 0; i < keyColumnCount; i++) {\n\t\t\t\tthis._keyColumnPixelOffsetCache[i] = -1;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._keyColumnPixelOffsetCache = null;\n\t\t}\n\n\t\tthis._characterMapping = characterMapping;\n\t\tthis._charWidth = renderLineInput.spaceWidth;\n\t}\n\n\tpublic getWidth(context: DomReadingContext | null): number {\n\t\tif (\n\t\t\t!this.domNode ||\n\t\t\tthis.input.lineContent.length < Constants.MaxMonospaceDistance\n\t\t) {\n\t\t\tconst horizontalOffset = this._characterMapping.getHorizontalOffset(\n\t\t\t\tthis._characterMapping.length,\n\t\t\t);\n\t\t\treturn Math.round(this._charWidth * horizontalOffset);\n\t\t}\n\t\tif (this._cachedWidth === -1) {\n\t\t\tthis._cachedWidth = this._getReadingTarget(\n\t\t\t\tthis.domNode,\n\t\t\t).offsetWidth;\n\t\t\tcontext?.markDidDomLayout();\n\t\t}\n\t\treturn this._cachedWidth;\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\treturn (\n\t\t\tthis.input.lineContent.length < Constants.MaxMonospaceDistance ||\n\t\t\tthis._cachedWidth !== -1\n\t\t);\n\t}\n\n\tpublic monospaceAssumptionsAreValid(): boolean {\n\t\tif (!this.domNode) {\n\t\t\treturn monospaceAssumptionsAreValid;\n\t\t}\n\t\tif (this.input.lineContent.length < Constants.MaxMonospaceDistance) {\n\t\t\tconst expectedWidth = this.getWidth(null);\n\t\t\tconst actualWidth = (<HTMLSpanElement>(\n\t\t\t\tthis.domNode.domNode.firstChild\n\t\t\t)).offsetWidth;\n\t\t\tif (Math.abs(expectedWidth - actualWidth) >= 2) {\n\t\t\t\t// more than 2px off\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`monospace assumptions have been violated, therefore disabling monospace optimizations!`,\n\t\t\t\t);\n\t\t\t\tmonospaceAssumptionsAreValid = false;\n\t\t\t}\n\t\t}\n\t\treturn monospaceAssumptionsAreValid;\n\t}\n\n\tpublic toSlowRenderedLine(): RenderedViewLine {\n\t\treturn createRenderedLine(\n\t\t\tthis.domNode,\n\t\t\tthis.input,\n\t\t\tthis._characterMapping,\n\t\t\tfalse,\n\t\t\tForeignElementType.None,\n\t\t);\n\t}\n\n\tpublic getVisibleRangesForRange(\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): FloatHorizontalRange[] | null {\n\t\tconst startPosition = this._getColumnPixelOffset(\n\t\t\tlineNumber,\n\t\t\tstartColumn,\n\t\t\tcontext,\n\t\t);\n\t\tconst endPosition = this._getColumnPixelOffset(\n\t\t\tlineNumber,\n\t\t\tendColumn,\n\t\t\tcontext,\n\t\t);\n\t\treturn [\n\t\t\tnew FloatHorizontalRange(\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition - startPosition,\n\t\t\t),\n\t\t];\n\t}\n\n\tprivate _getColumnPixelOffset(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tcontext: DomReadingContext,\n\t): number {\n\t\tif (column <= Constants.MaxMonospaceDistance) {\n\t\t\tconst horizontalOffset =\n\t\t\t\tthis._characterMapping.getHorizontalOffset(column);\n\t\t\treturn this._charWidth * horizontalOffset;\n\t\t}\n\n\t\tconst keyColumnOrdinal =\n\t\t\tMath.floor((column - 1) / Constants.MaxMonospaceDistance) - 1;\n\t\tconst keyColumn =\n\t\t\t(keyColumnOrdinal + 1) * Constants.MaxMonospaceDistance + 1;\n\t\tlet keyColumnPixelOffset = -1;\n\t\tif (this._keyColumnPixelOffsetCache) {\n\t\t\tkeyColumnPixelOffset =\n\t\t\t\tthis._keyColumnPixelOffsetCache[keyColumnOrdinal];\n\t\t\tif (keyColumnPixelOffset === -1) {\n\t\t\t\tkeyColumnPixelOffset = this._actualReadPixelOffset(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tkeyColumn,\n\t\t\t\t\tcontext,\n\t\t\t\t);\n\t\t\t\tthis._keyColumnPixelOffsetCache[keyColumnOrdinal] =\n\t\t\t\t\tkeyColumnPixelOffset;\n\t\t\t}\n\t\t}\n\n\t\tif (keyColumnPixelOffset === -1) {\n\t\t\t// Could not read actual key column pixel offset\n\t\t\tconst horizontalOffset =\n\t\t\t\tthis._characterMapping.getHorizontalOffset(column);\n\t\t\treturn this._charWidth * horizontalOffset;\n\t\t}\n\n\t\tconst keyColumnHorizontalOffset =\n\t\t\tthis._characterMapping.getHorizontalOffset(keyColumn);\n\t\tconst horizontalOffset =\n\t\t\tthis._characterMapping.getHorizontalOffset(column);\n\t\treturn (\n\t\t\tkeyColumnPixelOffset +\n\t\t\tthis._charWidth * (horizontalOffset - keyColumnHorizontalOffset)\n\t\t);\n\t}\n\n\tprivate _getReadingTarget(\n\t\tmyDomNode: FastDomNode<HTMLElement>,\n\t): HTMLElement {\n\t\treturn <HTMLSpanElement>myDomNode.domNode.firstChild;\n\t}\n\n\tprivate _actualReadPixelOffset(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tcontext: DomReadingContext,\n\t): number {\n\t\tif (!this.domNode) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst domPosition = this._characterMapping.getDomPosition(column);\n\t\tconst r = RangeUtil.readHorizontalRanges(\n\t\t\tthis._getReadingTarget(this.domNode),\n\t\t\tdomPosition.partIndex,\n\t\t\tdomPosition.charIndex,\n\t\t\tdomPosition.partIndex,\n\t\t\tdomPosition.charIndex,\n\t\t\tcontext,\n\t\t);\n\t\tif (!r || r.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn r[0].left;\n\t}\n\n\tpublic getColumnOfNodeOffset(\n\t\tspanNode: HTMLElement,\n\t\toffset: number,\n\t): number {\n\t\treturn getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n\t}\n}\n\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine implements IRenderedViewLine {\n\tpublic domNode: FastDomNode<HTMLElement> | null;\n\tpublic readonly input: RenderLineInput;\n\n\tprotected readonly _characterMapping: CharacterMapping;\n\tprivate readonly _isWhitespaceOnly: boolean;\n\tprivate readonly _containsForeignElements: ForeignElementType;\n\tprivate _cachedWidth: number;\n\n\t/**\n\t * This is a map that is used only when the line is guaranteed to have no RTL text.\n\t */\n\tprivate readonly _pixelOffsetCache: Float32Array | null;\n\n\tconstructor(\n\t\tdomNode: FastDomNode<HTMLElement> | null,\n\t\trenderLineInput: RenderLineInput,\n\t\tcharacterMapping: CharacterMapping,\n\t\tcontainsRTL: boolean,\n\t\tcontainsForeignElements: ForeignElementType,\n\t) {\n\t\tthis.domNode = domNode;\n\t\tthis.input = renderLineInput;\n\t\tthis._characterMapping = characterMapping;\n\t\tthis._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n\t\tthis._containsForeignElements = containsForeignElements;\n\t\tthis._cachedWidth = -1;\n\n\t\tthis._pixelOffsetCache = null;\n\t\tif (\n\t\t\t!containsRTL ||\n\t\t\tthis._characterMapping.length === 0 /* the line is empty */\n\t\t) {\n\t\t\tthis._pixelOffsetCache = new Float32Array(\n\t\t\t\tMath.max(2, this._characterMapping.length + 1),\n\t\t\t);\n\t\t\tfor (\n\t\t\t\tlet column = 0, len = this._characterMapping.length;\n\t\t\t\tcolumn <= len;\n\t\t\t\tcolumn++\n\t\t\t) {\n\t\t\t\tthis._pixelOffsetCache[column] = -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// --- Reading from the DOM methods\n\n\tprotected _getReadingTarget(\n\t\tmyDomNode: FastDomNode<HTMLElement>,\n\t): HTMLElement {\n\t\treturn <HTMLSpanElement>myDomNode.domNode.firstChild;\n\t}\n\n\t/**\n\t * Width of the line in pixels\n\t */\n\tpublic getWidth(context: DomReadingContext | null): number {\n\t\tif (!this.domNode) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this._cachedWidth === -1) {\n\t\t\tthis._cachedWidth = this._getReadingTarget(\n\t\t\t\tthis.domNode,\n\t\t\t).offsetWidth;\n\t\t\tcontext?.markDidDomLayout();\n\t\t}\n\t\treturn this._cachedWidth;\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\tif (this._cachedWidth === -1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Visible ranges for a model range\n\t */\n\tpublic getVisibleRangesForRange(\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): FloatHorizontalRange[] | null {\n\t\tif (!this.domNode) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this._pixelOffsetCache !== null) {\n\t\t\t// the text is LTR\n\t\t\tconst startOffset = this._readPixelOffset(\n\t\t\t\tthis.domNode,\n\t\t\t\tlineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tif (startOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst endOffset = this._readPixelOffset(\n\t\t\t\tthis.domNode,\n\t\t\t\tlineNumber,\n\t\t\t\tendColumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tif (endOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn [\n\t\t\t\tnew FloatHorizontalRange(startOffset, endOffset - startOffset),\n\t\t\t];\n\t\t}\n\n\t\treturn this._readVisibleRangesForRange(\n\t\t\tthis.domNode,\n\t\t\tlineNumber,\n\t\t\tstartColumn,\n\t\t\tendColumn,\n\t\t\tcontext,\n\t\t);\n\t}\n\n\tprotected _readVisibleRangesForRange(\n\t\tdomNode: FastDomNode<HTMLElement>,\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): FloatHorizontalRange[] | null {\n\t\tif (startColumn === endColumn) {\n\t\t\tconst pixelOffset = this._readPixelOffset(\n\t\t\t\tdomNode,\n\t\t\t\tlineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tif (pixelOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn [new FloatHorizontalRange(pixelOffset, 0)];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._readRawVisibleRangesForRange(\n\t\t\t\tdomNode,\n\t\t\t\tstartColumn,\n\t\t\t\tendColumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected _readPixelOffset(\n\t\tdomNode: FastDomNode<HTMLElement>,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tcontext: DomReadingContext,\n\t): number {\n\t\tif (this._characterMapping.length === 0) {\n\t\t\t// This line has no content\n\t\t\tif (this._containsForeignElements === ForeignElementType.None) {\n\t\t\t\t// We can assume the line is really empty\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (this._containsForeignElements === ForeignElementType.After) {\n\t\t\t\t// We have foreign elements after the (empty) line\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (this._containsForeignElements === ForeignElementType.Before) {\n\t\t\t\t// We have foreign elements before the (empty) line\n\t\t\t\treturn this.getWidth(context);\n\t\t\t}\n\t\t\t// We have foreign elements before & after the (empty) line\n\t\t\tconst readingTarget = this._getReadingTarget(domNode);\n\t\t\tif (readingTarget.firstChild) {\n\t\t\t\tcontext.markDidDomLayout();\n\t\t\t\treturn (<HTMLSpanElement>readingTarget.firstChild).offsetWidth;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (this._pixelOffsetCache !== null) {\n\t\t\t// the text is LTR\n\n\t\t\tconst cachedPixelOffset = this._pixelOffsetCache[column];\n\t\t\tif (cachedPixelOffset !== -1) {\n\t\t\t\treturn cachedPixelOffset;\n\t\t\t}\n\n\t\t\tconst result = this._actualReadPixelOffset(\n\t\t\t\tdomNode,\n\t\t\t\tlineNumber,\n\t\t\t\tcolumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tthis._pixelOffsetCache[column] = result;\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this._actualReadPixelOffset(\n\t\t\tdomNode,\n\t\t\tlineNumber,\n\t\t\tcolumn,\n\t\t\tcontext,\n\t\t);\n\t}\n\n\tprivate _actualReadPixelOffset(\n\t\tdomNode: FastDomNode<HTMLElement>,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tcontext: DomReadingContext,\n\t): number {\n\t\tif (this._characterMapping.length === 0) {\n\t\t\t// This line has no content\n\t\t\tconst r = RangeUtil.readHorizontalRanges(\n\t\t\t\tthis._getReadingTarget(domNode),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tif (!r || r.length === 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn r[0].left;\n\t\t}\n\n\t\tif (\n\t\t\tcolumn === this._characterMapping.length &&\n\t\t\tthis._isWhitespaceOnly &&\n\t\t\tthis._containsForeignElements === ForeignElementType.None\n\t\t) {\n\t\t\t// This branch helps in the case of whitespace only lines which have a width set\n\t\t\treturn this.getWidth(context);\n\t\t}\n\n\t\tconst domPosition = this._characterMapping.getDomPosition(column);\n\n\t\tconst r = RangeUtil.readHorizontalRanges(\n\t\t\tthis._getReadingTarget(domNode),\n\t\t\tdomPosition.partIndex,\n\t\t\tdomPosition.charIndex,\n\t\t\tdomPosition.partIndex,\n\t\t\tdomPosition.charIndex,\n\t\t\tcontext,\n\t\t);\n\t\tif (!r || r.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst result = r[0].left;\n\t\tif (this.input.isBasicASCII) {\n\t\t\tconst horizontalOffset =\n\t\t\t\tthis._characterMapping.getHorizontalOffset(column);\n\t\t\tconst expectedResult = Math.round(\n\t\t\t\tthis.input.spaceWidth * horizontalOffset,\n\t\t\t);\n\t\t\tif (Math.abs(expectedResult - result) <= 1) {\n\t\t\t\treturn expectedResult;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _readRawVisibleRangesForRange(\n\t\tdomNode: FastDomNode<HTMLElement>,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): FloatHorizontalRange[] | null {\n\t\tif (startColumn === 1 && endColumn === this._characterMapping.length) {\n\t\t\t// This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n\n\t\t\treturn [new FloatHorizontalRange(0, this.getWidth(context))];\n\t\t}\n\n\t\tconst startDomPosition =\n\t\t\tthis._characterMapping.getDomPosition(startColumn);\n\t\tconst endDomPosition = this._characterMapping.getDomPosition(endColumn);\n\n\t\treturn RangeUtil.readHorizontalRanges(\n\t\t\tthis._getReadingTarget(domNode),\n\t\t\tstartDomPosition.partIndex,\n\t\t\tstartDomPosition.charIndex,\n\t\t\tendDomPosition.partIndex,\n\t\t\tendDomPosition.charIndex,\n\t\t\tcontext,\n\t\t);\n\t}\n\n\t/**\n\t * Returns the column for the text found at a specific offset inside a rendered dom node\n\t */\n\tpublic getColumnOfNodeOffset(\n\t\tspanNode: HTMLElement,\n\t\toffset: number,\n\t): number {\n\t\treturn getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n\t}\n}\n\nclass WebKitRenderedViewLine extends RenderedViewLine {\n\tprotected override _readVisibleRangesForRange(\n\t\tdomNode: FastDomNode<HTMLElement>,\n\t\tlineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t\tcontext: DomReadingContext,\n\t): FloatHorizontalRange[] | null {\n\t\tconst output = super._readVisibleRangesForRange(\n\t\t\tdomNode,\n\t\t\tlineNumber,\n\t\t\tstartColumn,\n\t\t\tendColumn,\n\t\t\tcontext,\n\t\t);\n\n\t\tif (\n\t\t\t!output ||\n\t\t\toutput.length === 0 ||\n\t\t\tstartColumn === endColumn ||\n\t\t\t(startColumn === 1 && endColumn === this._characterMapping.length)\n\t\t) {\n\t\t\treturn output;\n\t\t}\n\n\t\t// WebKit is buggy and returns an expanded range (to contain words in some cases)\n\t\t// The last client rect is enlarged (I think)\n\t\tif (!this.input.containsRTL) {\n\t\t\t// This is an attempt to patch things up\n\t\t\t// Find position of last column\n\t\t\tconst endPixelOffset = this._readPixelOffset(\n\t\t\t\tdomNode,\n\t\t\t\tlineNumber,\n\t\t\t\tendColumn,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tif (endPixelOffset !== -1) {\n\t\t\t\tconst lastRange = output[output.length - 1];\n\t\t\t\tif (lastRange.left < endPixelOffset) {\n\t\t\t\t\t// Trim down the width of the last visible range to not go after the last column's position\n\t\t\t\t\tlastRange.width = endPixelOffset - lastRange.left;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\nconst createRenderedLine: (\n\tdomNode: FastDomNode<HTMLElement> | null,\n\trenderLineInput: RenderLineInput,\n\tcharacterMapping: CharacterMapping,\n\tcontainsRTL: boolean,\n\tcontainsForeignElements: ForeignElementType,\n) => RenderedViewLine = (() => {\n\tif (browser.isWebKit) {\n\t\treturn createWebKitRenderedLine;\n\t}\n\treturn createNormalRenderedLine;\n})();\n\nfunction createWebKitRenderedLine(\n\tdomNode: FastDomNode<HTMLElement> | null,\n\trenderLineInput: RenderLineInput,\n\tcharacterMapping: CharacterMapping,\n\tcontainsRTL: boolean,\n\tcontainsForeignElements: ForeignElementType,\n): RenderedViewLine {\n\treturn new WebKitRenderedViewLine(\n\t\tdomNode,\n\t\trenderLineInput,\n\t\tcharacterMapping,\n\t\tcontainsRTL,\n\t\tcontainsForeignElements,\n\t);\n}\n\nfunction createNormalRenderedLine(\n\tdomNode: FastDomNode<HTMLElement> | null,\n\trenderLineInput: RenderLineInput,\n\tcharacterMapping: CharacterMapping,\n\tcontainsRTL: boolean,\n\tcontainsForeignElements: ForeignElementType,\n): RenderedViewLine {\n\treturn new RenderedViewLine(\n\t\tdomNode,\n\t\trenderLineInput,\n\t\tcharacterMapping,\n\t\tcontainsRTL,\n\t\tcontainsForeignElements,\n\t);\n}\n\nexport function getColumnOfNodeOffset(\n\tcharacterMapping: CharacterMapping,\n\tspanNode: HTMLElement,\n\toffset: number,\n): number {\n\tconst spanNodeTextContentLength = spanNode.textContent!.length;\n\n\tlet spanIndex = -1;\n\twhile (spanNode) {\n\t\tspanNode = <HTMLElement>spanNode.previousSibling;\n\t\tspanIndex++;\n\t}\n\n\treturn characterMapping.getColumn(\n\t\tnew DomPosition(spanIndex, offset),\n\t\tspanNodeTextContentLength,\n\t);\n}\n"],
  "mappings": "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",
  "names": ["Constants", "horizontalOffset", "r"]
}
