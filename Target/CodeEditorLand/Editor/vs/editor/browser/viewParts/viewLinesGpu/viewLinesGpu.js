var w=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var x=(d,f,t,r)=>{for(var i=r>1?void 0:r?O(f,t):f,e=d.length-1,s;e>=0;e--)(s=d[e])&&(i=(r?s(f,t,i):s(i))||i);return r&&i&&w(f,t,i),i},m=(d,f)=>(t,r)=>f(t,r,d);import{getActiveWindow as P}from"../../../../base/browser/dom.js";import{BugIndicatingError as b}from"../../../../base/common/errors.js";import{autorun as B}from"../../../../base/common/observable.js";import{IInstantiationService as S}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as T}from"../../../../platform/log/common/log.js";import{EditorOption as C}from"../../../common/config/editorOptions.js";import{TextureAtlasPage as c}from"../../gpu/atlas/textureAtlasPage.js";import{FullFileRenderStrategy as U}from"../../gpu/fullFileRenderStrategy.js";import{BindingId as u}from"../../gpu/gpu.js";import{GPULifecycle as l}from"../../gpu/gpuDisposable.js";import{observeDevicePixelDimensions as E,quadVertices as v}from"../../gpu/gpuUtils.js";import{ViewGpuContext as G}from"../../gpu/viewGpuContext.js";import{ViewPart as V}from"../../view/viewPart.js";import{ViewLineOptions as A}from"../viewLines/viewLineOptions.js";var F=(e=>(e[e.FloatsPerEntry=6]="FloatsPerEntry",e[e.BytesPerEntry=24]="BytesPerEntry",e[e.Offset_TexturePosition=0]="Offset_TexturePosition",e[e.Offset_TextureSize=2]="Offset_TextureSize",e[e.Offset_OriginPosition=4]="Offset_OriginPosition",e))(F||{});let h=class extends V{constructor(t,r,i,e){super(t);this._viewGpuContext=r;this._instantiationService=i;this._logService=e;this.canvas=this._viewGpuContext.canvas.domNode,this._register(B(s=>{this._viewGpuContext.canvasDevicePixelDimensions.read(s)})),this.initWebgpu()}canvas;_device;_renderPassDescriptor;_renderPassColorAttachment;_bindGroup;_pipeline;_vertexBuffer;_glyphStorageBuffer=[];_atlasGpuTexture;_atlasGpuTextureVersions=[];_initialized=!1;_renderStrategy;async initWebgpu(){if(this._device=await this._viewGpuContext.device,this._store.isDisposed)return;const t=G.atlas;this._register(t.onDidDeleteGlyphs(()=>{this._atlasGpuTextureVersions.length=0,this._atlasGpuTextureVersions[0]=0,this._atlasGpuTextureVersions[1]=0,this._renderStrategy.reset()}));const r=navigator.gpu.getPreferredCanvasFormat();this._viewGpuContext.ctx.configure({device:this._device,format:r,alphaMode:"premultiplied"}),this._renderPassColorAttachment={view:null,loadOp:"load",storeOp:"store"},this._renderPassDescriptor={label:"Monaco render pass",colorAttachments:[this._renderPassColorAttachment]};let i;{let p;(a=>(a[a.FloatsPerEntry=6]="FloatsPerEntry",a[a.BytesPerEntry=24]="BytesPerEntry",a[a.Offset_CanvasWidth____=0]="Offset_CanvasWidth____",a[a.Offset_CanvasHeight___=1]="Offset_CanvasHeight___",a[a.Offset_ViewportOffsetX=2]="Offset_ViewportOffsetX",a[a.Offset_ViewportOffsetY=3]="Offset_ViewportOffsetY",a[a.Offset_ViewportWidth__=4]="Offset_ViewportWidth__",a[a.Offset_ViewportHeight_=5]="Offset_ViewportHeight_"))(p||={});const o=new Float32Array(6),y=(_=this.canvas.width,g=this.canvas.height)=>(o[0]=_,o[1]=g,o[2]=Math.ceil(this._context.configuration.options.get(C.layoutInfo).contentLeft*P().devicePixelRatio),o[3]=0,o[4]=o[0]-o[2],o[5]=o[1]-o[3],o);i=this._register(l.createBuffer(this._device,{label:"Monaco uniform buffer",size:24,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},()=>y())).object,this._register(E(this.canvas,P(),(_,g)=>{this._device.queue.writeBuffer(i,0,y(_,g))}))}let e;{let p;(n=>(n[n.FloatsPerEntry=2]="FloatsPerEntry",n[n.BytesPerEntry=8]="BytesPerEntry",n[n.Offset_Width_=0]="Offset_Width_",n[n.Offset_Height=1]="Offset_Height"))(p||={}),e=this._register(l.createBuffer(this._device,{label:"Monaco atlas info uniform buffer",size:8,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},()=>{const o=new Float32Array(2);return o[0]=t.pageSize,o[1]=t.pageSize,o})).object}this._renderStrategy=this._register(this._instantiationService.createInstance(U,this._context,this._device,this.canvas,t)),this._glyphStorageBuffer[0]=this._register(l.createBuffer(this._device,{label:"Monaco glyph storage buffer",size:24*c.maximumGlyphCount,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})).object,this._glyphStorageBuffer[1]=this._register(l.createBuffer(this._device,{label:"Monaco glyph storage buffer",size:24*c.maximumGlyphCount,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})).object,this._atlasGpuTextureVersions[0]=0,this._atlasGpuTextureVersions[1]=0,this._atlasGpuTexture=this._register(l.createTexture(this._device,{label:"Monaco atlas texture",format:"rgba8unorm",size:{width:t.pageSize,height:t.pageSize,depthOrArrayLayers:2},dimension:"2d",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT})).object,this._updateAtlasStorageBufferAndTexture(),this._vertexBuffer=this._register(l.createBuffer(this._device,{label:"Monaco vertex buffer",size:v.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST},v)).object;const s=this._device.createShaderModule({label:"Monaco shader module",code:this._renderStrategy.wgsl});this._pipeline=this._device.createRenderPipeline({label:"Monaco render pipeline",layout:"auto",vertex:{module:s,entryPoint:"vs",buffers:[{arrayStride:2*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x2"}]}]},fragment:{module:s,entryPoint:"fs",targets:[{format:r,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"}}}]}}),this._bindGroup=this._device.createBindGroup({label:"Monaco bind group",layout:this._pipeline.getBindGroupLayout(0),entries:[{binding:u.GlyphInfo0,resource:{buffer:this._glyphStorageBuffer[0]}},{binding:u.GlyphInfo1,resource:{buffer:this._glyphStorageBuffer[1]}},{binding:u.TextureSampler,resource:this._device.createSampler({label:"Monaco atlas sampler",magFilter:"nearest",minFilter:"nearest"})},{binding:u.Texture,resource:this._atlasGpuTexture.createView()},{binding:u.ViewportUniform,resource:{buffer:i}},{binding:u.AtlasDimensionsUniform,resource:{buffer:e}},...this._renderStrategy.bindGroupEntries]}),this._initialized=!0}_updateAtlasStorageBufferAndTexture(){for(const[t,r]of G.atlas.pages.entries()){if(r.version===this._atlasGpuTextureVersions[t])continue;this._logService.trace("Updating atlas page[",t,"] from version ",this._atlasGpuTextureVersions[t]," to version ",r.version);const i=new Float32Array(6*c.maximumGlyphCount);let e=0;for(const s of r.glyphs)i[e+0]=s.x,i[e+0+1]=s.y,i[e+2]=s.w,i[e+2+1]=s.h,i[e+4]=s.originOffsetX,i[e+4+1]=s.originOffsetY,e+=6;if(e/6>c.maximumGlyphCount)throw new Error(`Attempting to write more glyphs (${e/6}) than the GPUBuffer can hold (${c.maximumGlyphCount})`);this._device.queue.writeBuffer(this._glyphStorageBuffer[t],0,i),r.usedArea.right-r.usedArea.left>0&&r.usedArea.bottom-r.usedArea.top>0&&this._device.queue.copyExternalImageToTexture({source:r.source},{texture:this._atlasGpuTexture,origin:{x:r.usedArea.left,y:r.usedArea.top,z:t}},{width:r.usedArea.right-r.usedArea.left,height:r.usedArea.bottom-r.usedArea.top}),this._atlasGpuTextureVersions[t]=r.version}}static canRender(t,r,i){return r.getViewLineRenderingData(i).content.indexOf("e")!==-1}prepareRender(t){throw new b("Should not be called")}render(t){throw new b("Should not be called")}onLinesChanged(t){return!0}onScrollChanged(t){return!0}renderText(t){if(this._initialized)return this._renderText(t)}_renderText(t){const r=new A(this._context.configuration,this._context.theme.type),i=this._renderStrategy.update(t,r);this._updateAtlasStorageBufferAndTexture();const e=this._device.createCommandEncoder({label:"Monaco command encoder"});this._renderPassColorAttachment.view=this._viewGpuContext.ctx.getCurrentTexture().createView({label:"Monaco canvas texture view"});const s=e.beginRenderPass(this._renderPassDescriptor);s.setPipeline(this._pipeline),s.setVertexBuffer(0,this._vertexBuffer),s.setBindGroup(0,this._bindGroup),this._renderStrategy?.draw?this._renderStrategy.draw(s,t):s.draw(v.length/2,i),s.end();const p=e.finish();this._device.queue.submit([p])}};h=x([m(2,S),m(3,T)],h);export{h as ViewLinesGpu};
