{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/viewLines/viewLine.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from '../../../../base/browser/browser.js';\nimport { FastDomNode, createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { IVisibleLine } from '../../view/viewLayer.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { StringBuilder } from '../../../common/core/stringBuilder.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { CharacterMapping, ForeignElementType, RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewportData } from '../../../common/viewLayout/viewLinesViewportData.js';\nimport { InlineDecorationType } from '../../../common/viewModel.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport type { ViewLineOptions } from './viewLineOptions.js';\nimport { ViewGpuContext } from '../../gpu/viewGpuContext.js';\n\nconst canUseFastRenderedViewLine = (function () {\n\tif (platform.isNative) {\n\t\t// In VSCode we know very well when the zoom level changes\n\t\treturn true;\n\t}\n\n\tif (platform.isLinux || browser.isFirefox || browser.isSafari) {\n\t\t// On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n\t\t// --\n\t\t// Even though we read character widths correctly, having read them at a specific zoom level\n\t\t// does not mean they are the same at the current zoom level.\n\t\t// --\n\t\t// This could be improved if we ever figure out how to get an event when browsers zoom,\n\t\t// but until then we have to stick with reading client rects.\n\t\t// --\n\t\t// The same has been observed with Firefox on Windows7\n\t\t// --\n\t\t// The same has been oversved with Safari\n\t\treturn false;\n\t}\n\n\treturn true;\n})();\n\nlet monospaceAssumptionsAreValid = true;\n\nexport class ViewLine implements IVisibleLine {\n\n\tpublic static readonly CLASS_NAME = 'view-line';\n\n\tprivate _options: ViewLineOptions;\n\tprivate _isMaybeInvalid: boolean;\n\tprivate _renderedViewLine: IRenderedViewLine | null;\n\n\tconstructor(options: ViewLineOptions) {\n\t\tthis._options = options;\n\t\tthis._isMaybeInvalid = true;\n\t\tthis._renderedViewLine = null;\n\t}\n\n\t// --- begin IVisibleLineData\n\n\tpublic getDomNode(): HTMLElement | null {\n\t\tif (this._renderedViewLine && this._renderedViewLine.domNode) {\n\t\t\treturn this._renderedViewLine.domNode.domNode;\n\t\t}\n\t\treturn null;\n\t}\n\tpublic setDomNode(domNode: HTMLElement): void {\n\t\tif (this._renderedViewLine) {\n\t\t\tthis._renderedViewLine.domNode = createFastDomNode(domNode);\n\t\t} else {\n\t\t\tthrow new Error('I have no rendered view line to set the dom node to...');\n\t\t}\n\t}\n\n\tpublic onContentChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onTokensChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onDecorationsChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onOptionsChanged(newOptions: ViewLineOptions): void {\n\t\tthis._isMaybeInvalid = true;\n\t\tthis._options = newOptions;\n\t}\n\tpublic onSelectionChanged(): boolean {\n\t\tif (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n\t\t\tthis._isMaybeInvalid = true;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic renderLine(lineNumber: number, deltaTop: number, lineHeight: number, viewportData: ViewportData, sb: StringBuilder): boolean {\n\t\tif (this._options.useGpu && ViewGpuContext.canRender(this._options, viewportData, lineNumber)) {\n\t\t\tthis._renderedViewLine?.domNode?.domNode.remove();\n\t\t\tthis._renderedViewLine = null;\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._isMaybeInvalid === false) {\n\t\t\t// it appears that nothing relevant has changed\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._isMaybeInvalid = false;\n\n\t\tconst lineData = viewportData.getViewLineRenderingData(lineNumber);\n\t\tconst options = this._options;\n\t\tconst actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n\n\t\t// Only send selection information when needed for rendering whitespace\n\t\tlet selectionsOnLine: LineRange[] | null = null;\n\t\tif (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n\t\t\tconst selections = viewportData.selections;\n\t\t\tfor (const selection of selections) {\n\n\t\t\t\tif (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n\t\t\t\t\t// Selection does not intersect line\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n\t\t\t\tconst endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n\n\t\t\t\tif (startColumn < endColumn) {\n\t\t\t\t\tif (isHighContrast(options.themeType)) {\n\t\t\t\t\t\tactualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', InlineDecorationType.Regular));\n\t\t\t\t\t}\n\t\t\t\t\tif (this._options.renderWhitespace === 'selection') {\n\t\t\t\t\t\tif (!selectionsOnLine) {\n\t\t\t\t\t\t\tselectionsOnLine = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst renderLineInput = new RenderLineInput(\n\t\t\toptions.useMonospaceOptimizations,\n\t\t\toptions.canUseHalfwidthRightwardsArrow,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tlineData.isBasicASCII,\n\t\t\tlineData.containsRTL,\n\t\t\tlineData.minColumn - 1,\n\t\t\tlineData.tokens,\n\t\t\tactualInlineDecorations,\n\t\t\tlineData.tabSize,\n\t\t\tlineData.startVisibleColumn,\n\t\t\toptions.spaceWidth,\n\t\t\toptions.middotWidth,\n\t\t\toptions.wsmiddotWidth,\n\t\t\toptions.stopRenderingLineAfter,\n\t\t\toptions.renderWhitespace,\n\t\t\toptions.renderControlCharacters,\n\t\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\t\tselectionsOnLine\n\t\t);\n\n\t\tif (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n\t\t\t// no need to do anything, we have the same render input\n\t\t\treturn false;\n\t\t}\n\n\t\tsb.appendString('<div style=\"top:');\n\t\tsb.appendString(String(deltaTop));\n\t\tsb.appendString('px;height:');\n\t\tsb.appendString(String(lineHeight));\n\t\tsb.appendString('px;\" class=\"');\n\t\tsb.appendString(ViewLine.CLASS_NAME);\n\t\tsb.appendString('\">');\n\n\t\tconst output = renderViewLine(renderLineInput, sb);\n\n\t\tsb.appendString('</div>');\n\n\t\tlet renderedViewLine: IRenderedViewLine | null = null;\n\t\tif (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === ForeignElementType.None) {\n\t\t\trenderedViewLine = new FastRenderedViewLine(\n\t\t\t\tthis._renderedViewLine ? this._renderedViewLine.domNode : null,\n\t\t\t\trenderLineInput,\n\t\t\t\toutput.characterMapping\n\t\t\t);\n\t\t}\n\n\t\tif (!renderedViewLine) {\n\t\t\trenderedViewLine = createRenderedLine(\n\t\t\t\tthis._renderedViewLine ? this._renderedViewLine.domNode : null,\n\t\t\t\trenderLineInput,\n\t\t\t\toutput.characterMapping,\n\t\t\t\toutput.containsRTL,\n\t\t\t\toutput.containsForeignElements\n\t\t\t);\n\t\t}\n\n\t\tthis._renderedViewLine = renderedViewLine;\n\n\t\treturn true;\n\t}\n\n\tpublic layoutLine(lineNumber: number, deltaTop: number, lineHeight: number): void {\n\t\tif (this._renderedViewLine && this._renderedViewLine.domNode) {\n\t\t\tthis._renderedViewLine.domNode.setTop(deltaTop);\n\t\t\tthis._renderedViewLine.domNode.setHeight(lineHeight);\n\t\t}\n\t}\n\n\t// --- end IVisibleLineData\n\n\tpublic getWidth(context: DomReadingContext | null): number {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._renderedViewLine.getWidth(context);\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._renderedViewLine.getWidthIsFast();\n\t}\n\n\tpublic needsMonospaceFontCheck(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn false;\n\t\t}\n\t\treturn (this._renderedViewLine instanceof FastRenderedViewLine);\n\t}\n\n\tpublic monospaceAssumptionsAreValid(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn monospaceAssumptionsAreValid;\n\t\t}\n\t\tif (this._renderedViewLine instanceof FastRenderedViewLine) {\n\t\t\treturn this._renderedViewLine.monospaceAssumptionsAreValid();\n\t\t}\n\t\treturn monospaceAssumptionsAreValid;\n\t}\n\n\tpublic onMonospaceAssumptionsInvalidated(): void {\n\t\tif (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n\t\t\tthis._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n\t\t}\n\t}\n\n\tpublic getVisibleRangesForRange(lineNumber: number, startColumn: number, endColumn: number, context: DomReadingContext): VisibleRanges | null {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn null;\n\t\t}\n\n\t\tstartColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n\t\tendColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n\n\t\tconst stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n\n\t\tif (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n\t\t\t// This range is obviously not visible\n\t\t\treturn new VisibleRanges(true, [new FloatHorizontalRange(this.getWidth(context), 0)]);\n\t\t}\n\n\t\tif (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n\t\t\tstartColumn = stopRenderingLineAfter + 1;\n\t\t}\n\n\t\tif (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n\t\t\tendColumn = stopRenderingLineAfter + 1;\n\t\t}\n\n\t\tconst horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n\t\tif (horizontalRanges && horizontalRanges.length > 0) {\n\t\t\treturn new VisibleRanges(false, horizontalRanges);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getColumnOfNodeOffset(spanNode: HTMLElement, offset: number): number {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn this._renderedViewLine.getColumnOfNodeOffset(spanNode, offset);\n\t}\n}\n\ninterface IRenderedViewLine {\n\tdomNode: FastDomNode<HTMLElement> | null;\n\treadonly input: RenderLineInput;\n\tgetWidth(context: DomReadingContext | null): number;\n\tgetWidthIsFast(): boolean;\n\tgetVisibleRangesForRange(lineNumber: number, startColumn: number, endColumn: number, context: DomReadingContext): FloatHorizontalRange[] | null;\n\tgetColumnOfNodeOffset(spanNode: HTMLElement, offset: number): number;\n}\n\nconst enum Constants {\n\t/**\n\t * It seems that rounding errors occur with long lines, so the purely multiplication based\n\t * method is only viable for short lines. For longer lines, we look up the real position of\n\t * every 300th character and use multiplication based on that.\n\t *\n\t * See https://github.com/microsoft/vscode/issues/33178\n\t */\n\tMaxMonospaceDistance = 300\n}\n\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine implements IRenderedViewLine {\n\n\tpublic domNode: FastDomNode<HTMLElement> | null;\n\tpublic readonly input: RenderLineInput;\n\n\tprivate readonly _characterMapping: CharacterMapping;\n\tprivate readonly _charWidth: number;\n\tprivate readonly _keyColumnPixelOffsetCache: Float32Array | null;\n\tprivate _cachedWidth: number = -1;\n\n\tconstructor(domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping) {\n\t\tthis.domNode = domNode;\n\t\tthis.input = renderLineInput;\n\t\tconst keyColumnCount = Math.floor(renderLineInput.lineContent.length / Constants.MaxMonospaceDistance);\n\t\tif (keyColumnCount > 0) {\n\t\t\tthis._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n\t\t\tfor (let i = 0; i < keyColumnCount; i++) {\n\t\t\t\tthis._keyColumnPixelOffsetCache[i] = -1;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._keyColumnPixelOffsetCache = null;\n\t\t}\n\n\t\tthis._characterMapping = characterMapping;\n\t\tthis._charWidth = renderLineInput.spaceWidth;\n\t}\n\n\tpublic getWidth(context: DomReadingContext | null): number {\n\t\tif (!this.domNode || this.input.lineContent.length < Constants.MaxMonospaceDistance) {\n\t\t\tconst horizontalOffset = this._characterMapping.getHorizontalOffset(this._characterMapping.length);\n\t\t\treturn Math.round(this._charWidth * horizontalOffset);\n\t\t}\n\t\tif (this._cachedWidth === -1) {\n\t\t\tthis._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n\t\t\tcontext?.markDidDomLayout();\n\t\t}\n\t\treturn this._cachedWidth;\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\treturn (this.input.lineContent.length < Constants.MaxMonospaceDistance) || this._cachedWidth !== -1;\n\t}\n\n\tpublic monospaceAssumptionsAreValid(): boolean {\n\t\tif (!this.domNode) {\n\t\t\treturn monospaceAssumptionsAreValid;\n\t\t}\n\t\tif (this.input.lineContent.length < Constants.MaxMonospaceDistance) {\n\t\t\tconst expectedWidth = this.getWidth(null);\n\t\t\tconst actualWidth = (<HTMLSpanElement>this.domNode.domNode.firstChild).offsetWidth;\n\t\t\tif (Math.abs(expectedWidth - actualWidth) >= 2) {\n\t\t\t\t// more than 2px off\n\t\t\t\tconsole.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n\t\t\t\tmonospaceAssumptionsAreValid = false;\n\t\t\t}\n\t\t}\n\t\treturn monospaceAssumptionsAreValid;\n\t}\n\n\tpublic toSlowRenderedLine(): RenderedViewLine {\n\t\treturn createRenderedLine(this.domNode, this.input, this._characterMapping, false, ForeignElementType.None);\n\t}\n\n\tpublic getVisibleRangesForRange(lineNumber: number, startColumn: number, endColumn: number, context: DomReadingContext): FloatHorizontalRange[] | null {\n\t\tconst startPosition = this._getColumnPixelOffset(lineNumber, startColumn, context);\n\t\tconst endPosition = this._getColumnPixelOffset(lineNumber, endColumn, context);\n\t\treturn [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n\t}\n\n\tprivate _getColumnPixelOffset(lineNumber: number, column: number, context: DomReadingContext): number {\n\t\tif (column <= Constants.MaxMonospaceDistance) {\n\t\t\tconst horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n\t\t\treturn this._charWidth * horizontalOffset;\n\t\t}\n\n\t\tconst keyColumnOrdinal = Math.floor((column - 1) / Constants.MaxMonospaceDistance) - 1;\n\t\tconst keyColumn = (keyColumnOrdinal + 1) * Constants.MaxMonospaceDistance + 1;\n\t\tlet keyColumnPixelOffset = -1;\n\t\tif (this._keyColumnPixelOffsetCache) {\n\t\t\tkeyColumnPixelOffset = this._keyColumnPixelOffsetCache[keyColumnOrdinal];\n\t\t\tif (keyColumnPixelOffset === -1) {\n\t\t\t\tkeyColumnPixelOffset = this._actualReadPixelOffset(lineNumber, keyColumn, context);\n\t\t\t\tthis._keyColumnPixelOffsetCache[keyColumnOrdinal] = keyColumnPixelOffset;\n\t\t\t}\n\t\t}\n\n\t\tif (keyColumnPixelOffset === -1) {\n\t\t\t// Could not read actual key column pixel offset\n\t\t\tconst horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n\t\t\treturn this._charWidth * horizontalOffset;\n\t\t}\n\n\t\tconst keyColumnHorizontalOffset = this._characterMapping.getHorizontalOffset(keyColumn);\n\t\tconst horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n\t\treturn keyColumnPixelOffset + this._charWidth * (horizontalOffset - keyColumnHorizontalOffset);\n\t}\n\n\tprivate _getReadingTarget(myDomNode: FastDomNode<HTMLElement>): HTMLElement {\n\t\treturn <HTMLSpanElement>myDomNode.domNode.firstChild;\n\t}\n\n\tprivate _actualReadPixelOffset(lineNumber: number, column: number, context: DomReadingContext): number {\n\t\tif (!this.domNode) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst domPosition = this._characterMapping.getDomPosition(column);\n\t\tconst r = RangeUtil.readHorizontalRanges(this._getReadingTarget(this.domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n\t\tif (!r || r.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn r[0].left;\n\t}\n\n\tpublic getColumnOfNodeOffset(spanNode: HTMLElement, offset: number): number {\n\t\treturn getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n\t}\n}\n\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine implements IRenderedViewLine {\n\n\tpublic domNode: FastDomNode<HTMLElement> | null;\n\tpublic readonly input: RenderLineInput;\n\n\tprotected readonly _characterMapping: CharacterMapping;\n\tprivate readonly _isWhitespaceOnly: boolean;\n\tprivate readonly _containsForeignElements: ForeignElementType;\n\tprivate _cachedWidth: number;\n\n\t/**\n\t * This is a map that is used only when the line is guaranteed to have no RTL text.\n\t */\n\tprivate readonly _pixelOffsetCache: Float32Array | null;\n\n\tconstructor(domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType) {\n\t\tthis.domNode = domNode;\n\t\tthis.input = renderLineInput;\n\t\tthis._characterMapping = characterMapping;\n\t\tthis._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n\t\tthis._containsForeignElements = containsForeignElements;\n\t\tthis._cachedWidth = -1;\n\n\t\tthis._pixelOffsetCache = null;\n\t\tif (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n\t\t\tthis._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n\t\t\tfor (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n\t\t\t\tthis._pixelOffsetCache[column] = -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// --- Reading from the DOM methods\n\n\tprotected _getReadingTarget(myDomNode: FastDomNode<HTMLElement>): HTMLElement {\n\t\treturn <HTMLSpanElement>myDomNode.domNode.firstChild;\n\t}\n\n\t/**\n\t * Width of the line in pixels\n\t */\n\tpublic getWidth(context: DomReadingContext | null): number {\n\t\tif (!this.domNode) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this._cachedWidth === -1) {\n\t\t\tthis._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n\t\t\tcontext?.markDidDomLayout();\n\t\t}\n\t\treturn this._cachedWidth;\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\tif (this._cachedWidth === -1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Visible ranges for a model range\n\t */\n\tpublic getVisibleRangesForRange(lineNumber: number, startColumn: number, endColumn: number, context: DomReadingContext): FloatHorizontalRange[] | null {\n\t\tif (!this.domNode) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this._pixelOffsetCache !== null) {\n\t\t\t// the text is LTR\n\t\t\tconst startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n\t\t\tif (startOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n\t\t\tif (endOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n\t\t}\n\n\t\treturn this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n\t}\n\n\tprotected _readVisibleRangesForRange(domNode: FastDomNode<HTMLElement>, lineNumber: number, startColumn: number, endColumn: number, context: DomReadingContext): FloatHorizontalRange[] | null {\n\t\tif (startColumn === endColumn) {\n\t\t\tconst pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n\t\t\tif (pixelOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn [new FloatHorizontalRange(pixelOffset, 0)];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n\t\t}\n\t}\n\n\tprotected _readPixelOffset(domNode: FastDomNode<HTMLElement>, lineNumber: number, column: number, context: DomReadingContext): number {\n\t\tif (this._characterMapping.length === 0) {\n\t\t\t// This line has no content\n\t\t\tif (this._containsForeignElements === ForeignElementType.None) {\n\t\t\t\t// We can assume the line is really empty\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (this._containsForeignElements === ForeignElementType.After) {\n\t\t\t\t// We have foreign elements after the (empty) line\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (this._containsForeignElements === ForeignElementType.Before) {\n\t\t\t\t// We have foreign elements before the (empty) line\n\t\t\t\treturn this.getWidth(context);\n\t\t\t}\n\t\t\t// We have foreign elements before & after the (empty) line\n\t\t\tconst readingTarget = this._getReadingTarget(domNode);\n\t\t\tif (readingTarget.firstChild) {\n\t\t\t\tcontext.markDidDomLayout();\n\t\t\t\treturn (<HTMLSpanElement>readingTarget.firstChild).offsetWidth;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (this._pixelOffsetCache !== null) {\n\t\t\t// the text is LTR\n\n\t\t\tconst cachedPixelOffset = this._pixelOffsetCache[column];\n\t\t\tif (cachedPixelOffset !== -1) {\n\t\t\t\treturn cachedPixelOffset;\n\t\t\t}\n\n\t\t\tconst result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n\t\t\tthis._pixelOffsetCache[column] = result;\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this._actualReadPixelOffset(domNode, lineNumber, column, context);\n\t}\n\n\tprivate _actualReadPixelOffset(domNode: FastDomNode<HTMLElement>, lineNumber: number, column: number, context: DomReadingContext): number {\n\t\tif (this._characterMapping.length === 0) {\n\t\t\t// This line has no content\n\t\t\tconst r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context);\n\t\t\tif (!r || r.length === 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn r[0].left;\n\t\t}\n\n\t\tif (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === ForeignElementType.None) {\n\t\t\t// This branch helps in the case of whitespace only lines which have a width set\n\t\t\treturn this.getWidth(context);\n\t\t}\n\n\t\tconst domPosition = this._characterMapping.getDomPosition(column);\n\n\t\tconst r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n\t\tif (!r || r.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst result = r[0].left;\n\t\tif (this.input.isBasicASCII) {\n\t\t\tconst horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n\t\t\tconst expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n\t\t\tif (Math.abs(expectedResult - result) <= 1) {\n\t\t\t\treturn expectedResult;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _readRawVisibleRangesForRange(domNode: FastDomNode<HTMLElement>, startColumn: number, endColumn: number, context: DomReadingContext): FloatHorizontalRange[] | null {\n\n\t\tif (startColumn === 1 && endColumn === this._characterMapping.length) {\n\t\t\t// This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n\n\t\t\treturn [new FloatHorizontalRange(0, this.getWidth(context))];\n\t\t}\n\n\t\tconst startDomPosition = this._characterMapping.getDomPosition(startColumn);\n\t\tconst endDomPosition = this._characterMapping.getDomPosition(endColumn);\n\n\t\treturn RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context);\n\t}\n\n\t/**\n\t * Returns the column for the text found at a specific offset inside a rendered dom node\n\t */\n\tpublic getColumnOfNodeOffset(spanNode: HTMLElement, offset: number): number {\n\t\treturn getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n\t}\n}\n\nclass WebKitRenderedViewLine extends RenderedViewLine {\n\tprotected override _readVisibleRangesForRange(domNode: FastDomNode<HTMLElement>, lineNumber: number, startColumn: number, endColumn: number, context: DomReadingContext): FloatHorizontalRange[] | null {\n\t\tconst output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n\n\t\tif (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n\t\t\treturn output;\n\t\t}\n\n\t\t// WebKit is buggy and returns an expanded range (to contain words in some cases)\n\t\t// The last client rect is enlarged (I think)\n\t\tif (!this.input.containsRTL) {\n\t\t\t// This is an attempt to patch things up\n\t\t\t// Find position of last column\n\t\t\tconst endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n\t\t\tif (endPixelOffset !== -1) {\n\t\t\t\tconst lastRange = output[output.length - 1];\n\t\t\t\tif (lastRange.left < endPixelOffset) {\n\t\t\t\t\t// Trim down the width of the last visible range to not go after the last column's position\n\t\t\t\t\tlastRange.width = endPixelOffset - lastRange.left;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\nconst createRenderedLine: (domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType) => RenderedViewLine = (function () {\n\tif (browser.isWebKit) {\n\t\treturn createWebKitRenderedLine;\n\t}\n\treturn createNormalRenderedLine;\n})();\n\nfunction createWebKitRenderedLine(domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType): RenderedViewLine {\n\treturn new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n\nfunction createNormalRenderedLine(domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType): RenderedViewLine {\n\treturn new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n\nexport function getColumnOfNodeOffset(characterMapping: CharacterMapping, spanNode: HTMLElement, offset: number): number {\n\tconst spanNodeTextContentLength = spanNode.textContent!.length;\n\n\tlet spanIndex = -1;\n\twhile (spanNode) {\n\t\tspanNode = <HTMLElement>spanNode.previousSibling;\n\t\tspanIndex++;\n\t}\n\n\treturn characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n}\n"],
  "mappings": "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",
  "names": ["Constants", "horizontalOffset", "r"]
}
