import"./marginDecorations.css";import"../../../common/viewEvents.js";import"../../../common/viewModel/viewContext.js";import"../../view/renderingContext.js";import{DecorationToRender as u,DedupOverlay as v}from"../glyphMargin/glyphMargin.js";class E extends v{_context;_renderResult;constructor(e){super(),this._context=e,this._renderResult=null,this._context.addEventHandler(this)}dispose(){this._context.removeEventHandler(this),this._renderResult=null,super.dispose()}onConfigurationChanged(e){return!0}onDecorationsChanged(e){return!0}onFlushed(e){return!0}onLinesChanged(e){return!0}onLinesDeleted(e){return!0}onLinesInserted(e){return!0}onScrollChanged(e){return e.scrollTopChanged}onZonesChanged(e){return!0}_getDecorations(e){const n=e.getDecorationsInViewport(),o=[];let l=0;for(let r=0,i=n.length;r<i;r++){const t=n[r],s=t.options.marginClassName,d=t.options.zIndex;s&&(o[l++]=new u(t.range.startLineNumber,t.range.endLineNumber,s,null,d))}return o}prepareRender(e){const n=e.visibleRange.startLineNumber,o=e.visibleRange.endLineNumber,l=this._render(n,o,this._getDecorations(e)),r=[];for(let i=n;i<=o;i++){const t=i-n,s=l[t].getDecorations();let d="";for(const a of s)d+='<div class="cmdr '+a.className+'" style=""></div>';r[t]=d}this._renderResult=r}render(e,n){return this._renderResult?this._renderResult[n-e]:""}}export{E as MarginViewLineDecorationsOverlay};
