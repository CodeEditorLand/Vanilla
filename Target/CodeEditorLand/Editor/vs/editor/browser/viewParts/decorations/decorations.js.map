{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/decorations/decorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange, RenderingContext } from '../../view/renderingContext.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\n\nexport class DecorationsOverlay extends DynamicViewOverlay {\n\n\tprivate readonly _context: ViewContext;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tconst options = this._context.configuration.options;\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tthis._renderResult = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged || e.scrollWidthChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tconst _decorations = ctx.getDecorationsInViewport();\n\n\t\t// Keep only decorations with `className`\n\t\tlet decorations: ViewModelDecoration[] = [];\n\t\tlet decorationsLen = 0;\n\t\tfor (let i = 0, len = _decorations.length; i < len; i++) {\n\t\t\tconst d = _decorations[i];\n\t\t\tif (d.options.className) {\n\t\t\t\tdecorations[decorationsLen++] = d;\n\t\t\t}\n\t\t}\n\n\t\t// Sort decorations for consistent render output\n\t\tdecorations = decorations.sort((a, b) => {\n\t\t\tif (a.options.zIndex! < b.options.zIndex!) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.options.zIndex! > b.options.zIndex!) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst aClassName = a.options.className!;\n\t\t\tconst bClassName = b.options.className!;\n\n\t\t\tif (aClassName < bClassName) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (aClassName > bClassName) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t});\n\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst output: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = '';\n\t\t}\n\n\t\t// Render first whole line decorations and then regular decorations\n\t\tthis._renderWholeLineDecorations(ctx, decorations, output);\n\t\tthis._renderNormalDecorations(ctx, decorations, output);\n\t\tthis._renderResult = output;\n\t}\n\n\tprivate _renderWholeLineDecorations(ctx: RenderingContext, decorations: ViewModelDecoration[], output: string[]): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tfor (let i = 0, lenI = decorations.length; i < lenI; i++) {\n\t\t\tconst d = decorations[i];\n\n\t\t\tif (!d.options.isWholeLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst decorationOutput = (\n\t\t\t\t'<div class=\"cdr '\n\t\t\t\t+ d.options.className\n\t\t\t\t+ '\" style=\"left:0;width:100%;\"></div>'\n\t\t\t);\n\n\t\t\tconst startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n\t\t\tconst endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n\t\t\tfor (let j = startLineNumber; j <= endLineNumber; j++) {\n\t\t\t\tconst lineIndex = j - visibleStartLineNumber;\n\t\t\t\toutput[lineIndex] += decorationOutput;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderNormalDecorations(ctx: RenderingContext, decorations: ViewModelDecoration[], output: string[]): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\n\t\tlet prevClassName: string | null = null;\n\t\tlet prevShowIfCollapsed: boolean = false;\n\t\tlet prevRange: Range | null = null;\n\t\tlet prevShouldFillLineOnLineBreak: boolean = false;\n\n\t\tfor (let i = 0, lenI = decorations.length; i < lenI; i++) {\n\t\t\tconst d = decorations[i];\n\n\t\t\tif (d.options.isWholeLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst className = d.options.className!;\n\t\t\tconst showIfCollapsed = Boolean(d.options.showIfCollapsed);\n\n\t\t\tlet range = d.range;\n\t\t\tif (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n\t\t\t\trange = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n\t\t\t}\n\n\t\t\tif (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange!, range)) {\n\t\t\t\t// merge into previous decoration\n\t\t\t\tprevRange = Range.plusRange(prevRange!, range);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// flush previous decoration\n\t\t\tif (prevClassName !== null) {\n\t\t\t\tthis._renderNormalDecoration(ctx, prevRange!, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n\t\t\t}\n\n\t\t\tprevClassName = className;\n\t\t\tprevShowIfCollapsed = showIfCollapsed;\n\t\t\tprevRange = range;\n\t\t\tprevShouldFillLineOnLineBreak = d.options.shouldFillLineOnLineBreak ?? false;\n\t\t}\n\n\t\tif (prevClassName !== null) {\n\t\t\tthis._renderNormalDecoration(ctx, prevRange!, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n\t\t}\n\t}\n\n\tprivate _renderNormalDecoration(ctx: RenderingContext, range: Range, className: string, shouldFillLineOnLineBreak: boolean, showIfCollapsed: boolean, visibleStartLineNumber: number, output: string[]): void {\n\t\tconst linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/className === 'findMatch');\n\t\tif (!linesVisibleRanges) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n\t\t\tconst lineVisibleRanges = linesVisibleRanges[j];\n\t\t\tif (lineVisibleRanges.outsideRenderedLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n\n\t\t\tif (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n\t\t\t\tconst singleVisibleRange = lineVisibleRanges.ranges[0];\n\t\t\t\tif (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n\t\t\t\t\t// collapsed/very small range case => make the decoration visible by expanding its width\n\t\t\t\t\t// expand its size on both sides (both to the left and to the right, keeping it centered)\n\t\t\t\t\tconst center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n\t\t\t\t\tconst left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n\t\t\t\t\tlineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n\t\t\t\tconst expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n\t\t\t\tconst visibleRange = lineVisibleRanges.ranges[k];\n\t\t\t\tconst decorationOutput = (\n\t\t\t\t\t'<div class=\"cdr '\n\t\t\t\t\t+ className\n\t\t\t\t\t+ '\" style=\"left:'\n\t\t\t\t\t+ String(visibleRange.left)\n\t\t\t\t\t+ 'px;width:'\n\t\t\t\t\t+ (expandToLeft ?\n\t\t\t\t\t\t'100%;' :\n\t\t\t\t\t\t(String(visibleRange.width) + 'px;')\n\t\t\t\t\t)\n\t\t\t\t\t+ '\"></div>'\n\t\t\t\t);\n\t\t\t\toutput[lineIndex] += decorationOutput;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
