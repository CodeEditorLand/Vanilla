{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/decorations/decorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./decorations.css\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport type * as viewEvents from \"../../../common/viewEvents.js\";\nimport type { ViewModelDecoration } from \"../../../common/viewModel.js\";\nimport type { ViewContext } from \"../../../common/viewModel/viewContext.js\";\nimport { DynamicViewOverlay } from \"../../view/dynamicViewOverlay.js\";\nimport {\n\tHorizontalRange,\n\ttype RenderingContext,\n} from \"../../view/renderingContext.js\";\n\nexport class DecorationsOverlay extends DynamicViewOverlay {\n\tprivate readonly _context: ViewContext;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tconst options = this._context.configuration.options;\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(\n\t\t\tEditorOption.fontInfo,\n\t\t).typicalHalfwidthCharacterWidth;\n\t\tthis._renderResult = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(\n\t\te: viewEvents.ViewConfigurationChangedEvent,\n\t): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(\n\t\t\tEditorOption.fontInfo,\n\t\t).typicalHalfwidthCharacterWidth;\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(\n\t\te: viewEvents.ViewDecorationsChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(\n\t\te: viewEvents.ViewLinesChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(\n\t\te: viewEvents.ViewLinesDeletedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(\n\t\te: viewEvents.ViewLinesInsertedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(\n\t\te: viewEvents.ViewScrollChangedEvent,\n\t): boolean {\n\t\treturn e.scrollTopChanged || e.scrollWidthChanged;\n\t}\n\tpublic override onZonesChanged(\n\t\te: viewEvents.ViewZonesChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tconst _decorations = ctx.getDecorationsInViewport();\n\n\t\t// Keep only decorations with `className`\n\t\tlet decorations: ViewModelDecoration[] = [];\n\t\tlet decorationsLen = 0;\n\t\tfor (let i = 0, len = _decorations.length; i < len; i++) {\n\t\t\tconst d = _decorations[i];\n\t\t\tif (d.options.className) {\n\t\t\t\tdecorations[decorationsLen++] = d;\n\t\t\t}\n\t\t}\n\n\t\t// Sort decorations for consistent render output\n\t\tdecorations = decorations.sort((a, b) => {\n\t\t\tif (a.options.zIndex! < b.options.zIndex!) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.options.zIndex! > b.options.zIndex!) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst aClassName = a.options.className!;\n\t\t\tconst bClassName = b.options.className!;\n\n\t\t\tif (aClassName < bClassName) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (aClassName > bClassName) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t});\n\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst output: string[] = [];\n\t\tfor (\n\t\t\tlet lineNumber = visibleStartLineNumber;\n\t\t\tlineNumber <= visibleEndLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = \"\";\n\t\t}\n\n\t\t// Render first whole line decorations and then regular decorations\n\t\tthis._renderWholeLineDecorations(ctx, decorations, output);\n\t\tthis._renderNormalDecorations(ctx, decorations, output);\n\t\tthis._renderResult = output;\n\t}\n\n\tprivate _renderWholeLineDecorations(\n\t\tctx: RenderingContext,\n\t\tdecorations: ViewModelDecoration[],\n\t\toutput: string[],\n\t): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tfor (let i = 0, lenI = decorations.length; i < lenI; i++) {\n\t\t\tconst d = decorations[i];\n\n\t\t\tif (!d.options.isWholeLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst decorationOutput =\n\t\t\t\t'<div class=\"cdr ' +\n\t\t\t\td.options.className +\n\t\t\t\t'\" style=\"left:0;width:100%;\"></div>';\n\n\t\t\tconst startLineNumber = Math.max(\n\t\t\t\td.range.startLineNumber,\n\t\t\t\tvisibleStartLineNumber,\n\t\t\t);\n\t\t\tconst endLineNumber = Math.min(\n\t\t\t\td.range.endLineNumber,\n\t\t\t\tvisibleEndLineNumber,\n\t\t\t);\n\t\t\tfor (let j = startLineNumber; j <= endLineNumber; j++) {\n\t\t\t\tconst lineIndex = j - visibleStartLineNumber;\n\t\t\t\toutput[lineIndex] += decorationOutput;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderNormalDecorations(\n\t\tctx: RenderingContext,\n\t\tdecorations: ViewModelDecoration[],\n\t\toutput: string[],\n\t): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\n\t\tlet prevClassName: string | null = null;\n\t\tlet prevShowIfCollapsed = false;\n\t\tlet prevRange: Range | null = null;\n\t\tlet prevShouldFillLineOnLineBreak = false;\n\n\t\tfor (let i = 0, lenI = decorations.length; i < lenI; i++) {\n\t\t\tconst d = decorations[i];\n\n\t\t\tif (d.options.isWholeLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst className = d.options.className!;\n\t\t\tconst showIfCollapsed = Boolean(d.options.showIfCollapsed);\n\n\t\t\tlet range = d.range;\n\t\t\tif (\n\t\t\t\tshowIfCollapsed &&\n\t\t\t\trange.endColumn === 1 &&\n\t\t\t\trange.endLineNumber !== range.startLineNumber\n\t\t\t) {\n\t\t\t\trange = new Range(\n\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\trange.startColumn,\n\t\t\t\t\trange.endLineNumber - 1,\n\t\t\t\t\tthis._context.viewModel.getLineMaxColumn(\n\t\t\t\t\t\trange.endLineNumber - 1,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tprevClassName === className &&\n\t\t\t\tprevShowIfCollapsed === showIfCollapsed &&\n\t\t\t\tRange.areIntersectingOrTouching(prevRange!, range)\n\t\t\t) {\n\t\t\t\t// merge into previous decoration\n\t\t\t\tprevRange = Range.plusRange(prevRange!, range);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// flush previous decoration\n\t\t\tif (prevClassName !== null) {\n\t\t\t\tthis._renderNormalDecoration(\n\t\t\t\t\tctx,\n\t\t\t\t\tprevRange!,\n\t\t\t\t\tprevClassName,\n\t\t\t\t\tprevShouldFillLineOnLineBreak,\n\t\t\t\t\tprevShowIfCollapsed,\n\t\t\t\t\tvisibleStartLineNumber,\n\t\t\t\t\toutput,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tprevClassName = className;\n\t\t\tprevShowIfCollapsed = showIfCollapsed;\n\t\t\tprevRange = range;\n\t\t\tprevShouldFillLineOnLineBreak =\n\t\t\t\td.options.shouldFillLineOnLineBreak ?? false;\n\t\t}\n\n\t\tif (prevClassName !== null) {\n\t\t\tthis._renderNormalDecoration(\n\t\t\t\tctx,\n\t\t\t\tprevRange!,\n\t\t\t\tprevClassName,\n\t\t\t\tprevShouldFillLineOnLineBreak,\n\t\t\t\tprevShowIfCollapsed,\n\t\t\t\tvisibleStartLineNumber,\n\t\t\t\toutput,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _renderNormalDecoration(\n\t\tctx: RenderingContext,\n\t\trange: Range,\n\t\tclassName: string,\n\t\tshouldFillLineOnLineBreak: boolean,\n\t\tshowIfCollapsed: boolean,\n\t\tvisibleStartLineNumber: number,\n\t\toutput: string[],\n\t): void {\n\t\tconst linesVisibleRanges = ctx.linesVisibleRangesForRange(\n\t\t\trange,\n\t\t\t/*TODO@Alex*/ className === \"findMatch\",\n\t\t);\n\t\tif (!linesVisibleRanges) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n\t\t\tconst lineVisibleRanges = linesVisibleRanges[j];\n\t\t\tif (lineVisibleRanges.outsideRenderedLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lineIndex =\n\t\t\t\tlineVisibleRanges.lineNumber - visibleStartLineNumber;\n\n\t\t\tif (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n\t\t\t\tconst singleVisibleRange = lineVisibleRanges.ranges[0];\n\t\t\t\tif (\n\t\t\t\t\tsingleVisibleRange.width <\n\t\t\t\t\tthis._typicalHalfwidthCharacterWidth\n\t\t\t\t) {\n\t\t\t\t\t// collapsed/very small range case => make the decoration visible by expanding its width\n\t\t\t\t\t// expand its size on both sides (both to the left and to the right, keeping it centered)\n\t\t\t\t\tconst center = Math.round(\n\t\t\t\t\t\tsingleVisibleRange.left + singleVisibleRange.width / 2,\n\t\t\t\t\t);\n\t\t\t\t\tconst left = Math.max(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tMath.round(\n\t\t\t\t\t\t\tcenter - this._typicalHalfwidthCharacterWidth / 2,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tlineVisibleRanges.ranges[0] = new HorizontalRange(\n\t\t\t\t\t\tleft,\n\t\t\t\t\t\tthis._typicalHalfwidthCharacterWidth,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (\n\t\t\t\tlet k = 0, lenK = lineVisibleRanges.ranges.length;\n\t\t\t\tk < lenK;\n\t\t\t\tk++\n\t\t\t) {\n\t\t\t\tconst expandToLeft =\n\t\t\t\t\tshouldFillLineOnLineBreak &&\n\t\t\t\t\tlineVisibleRanges.continuesOnNextLine &&\n\t\t\t\t\tlenK === 1;\n\t\t\t\tconst visibleRange = lineVisibleRanges.ranges[k];\n\t\t\t\tconst decorationOutput =\n\t\t\t\t\t'<div class=\"cdr ' +\n\t\t\t\t\tclassName +\n\t\t\t\t\t'\" style=\"left:' +\n\t\t\t\t\tString(visibleRange.left) +\n\t\t\t\t\t\"px;width:\" +\n\t\t\t\t\t(expandToLeft\n\t\t\t\t\t\t? \"100%;\"\n\t\t\t\t\t\t: String(visibleRange.width) + \"px;\") +\n\t\t\t\t\t'\"></div>';\n\t\t\t\toutput[lineIndex] += decorationOutput;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
