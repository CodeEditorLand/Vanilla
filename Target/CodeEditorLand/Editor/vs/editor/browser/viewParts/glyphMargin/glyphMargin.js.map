{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype FastDomNode,\n\tcreateFastDomNode,\n} from \"../../../../base/browser/fastDomNode.js\";\nimport { ArrayQueue } from \"../../../../base/common/arrays.js\";\nimport \"./glyphMargin.css\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { GlyphMarginLane } from \"../../../common/model.js\";\nimport type * as viewEvents from \"../../../common/viewEvents.js\";\nimport type { ViewContext } from \"../../../common/viewModel/viewContext.js\";\nimport type {\n\tIGlyphMarginWidget,\n\tIGlyphMarginWidgetPosition,\n} from \"../../editorBrowser.js\";\nimport { DynamicViewOverlay } from \"../../view/dynamicViewOverlay.js\";\nimport type {\n\tRenderingContext,\n\tRestrictedRenderingContext,\n} from \"../../view/renderingContext.js\";\nimport { ViewPart } from \"../../view/viewPart.js\";\n\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport class DecorationToRender {\n\tpublic readonly _decorationToRenderBrand: void = undefined;\n\n\tpublic readonly zIndex: number;\n\n\tconstructor(\n\t\tpublic readonly startLineNumber: number,\n\t\tpublic readonly endLineNumber: number,\n\t\tpublic readonly className: string,\n\t\tpublic readonly tooltip: string | null,\n\t\tzIndex: number | undefined,\n\t) {\n\t\tthis.zIndex = zIndex ?? 0;\n\t}\n}\n\n/**\n * A decoration that should be shown along a line.\n */\nexport class LineDecorationToRender {\n\tconstructor(\n\t\tpublic readonly className: string,\n\t\tpublic readonly zIndex: number,\n\t\tpublic readonly tooltip: string | null,\n\t) {}\n}\n\n/**\n * Decorations to render on a visible line.\n */\nexport class VisibleLineDecorationsToRender {\n\tprivate readonly decorations: LineDecorationToRender[] = [];\n\n\tpublic add(decoration: LineDecorationToRender) {\n\t\tthis.decorations.push(decoration);\n\t}\n\n\tpublic getDecorations(): LineDecorationToRender[] {\n\t\treturn this.decorations;\n\t}\n}\n\nexport abstract class DedupOverlay extends DynamicViewOverlay {\n\t/**\n\t * Returns an array with an element for each visible line number.\n\t */\n\tprotected _render(\n\t\tvisibleStartLineNumber: number,\n\t\tvisibleEndLineNumber: number,\n\t\tdecorations: DecorationToRender[],\n\t): VisibleLineDecorationsToRender[] {\n\t\tconst output: VisibleLineDecorationsToRender[] = [];\n\t\tfor (\n\t\t\tlet lineNumber = visibleStartLineNumber;\n\t\t\tlineNumber <= visibleEndLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = new VisibleLineDecorationsToRender();\n\t\t}\n\n\t\tif (decorations.length === 0) {\n\t\t\treturn output;\n\t\t}\n\n\t\t// Sort decorations by className, then by startLineNumber and then by endLineNumber\n\t\tdecorations.sort((a, b) => {\n\t\t\tif (a.className === b.className) {\n\t\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t\t}\n\t\t\treturn a.className < b.className ? -1 : 1;\n\t\t});\n\n\t\tlet prevClassName: string | null = null;\n\t\tlet prevEndLineIndex = 0;\n\t\tfor (let i = 0, len = decorations.length; i < len; i++) {\n\t\t\tconst d = decorations[i];\n\t\t\tconst className = d.className;\n\t\t\tconst zIndex = d.zIndex;\n\t\t\tlet startLineIndex =\n\t\t\t\tMath.max(d.startLineNumber, visibleStartLineNumber) -\n\t\t\t\tvisibleStartLineNumber;\n\t\t\tconst endLineIndex =\n\t\t\t\tMath.min(d.endLineNumber, visibleEndLineNumber) -\n\t\t\t\tvisibleStartLineNumber;\n\n\t\t\tif (prevClassName === className) {\n\t\t\t\t// Here we avoid rendering the same className multiple times on the same line\n\t\t\t\tstartLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n\t\t\t\tprevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n\t\t\t} else {\n\t\t\t\tprevClassName = className;\n\t\t\t\tprevEndLineIndex = endLineIndex;\n\t\t\t}\n\n\t\t\tfor (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n\t\t\t\toutput[i].add(\n\t\t\t\t\tnew LineDecorationToRender(className, zIndex, d.tooltip),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\nexport class GlyphMarginWidgets extends ViewPart {\n\tpublic domNode: FastDomNode<HTMLElement>;\n\n\tprivate _lineHeight: number;\n\tprivate _glyphMargin: boolean;\n\tprivate _glyphMarginLeft: number;\n\tprivate _glyphMarginWidth: number;\n\tprivate _glyphMarginDecorationLaneCount: number;\n\n\tprivate _managedDomNodes: FastDomNode<HTMLElement>[];\n\tprivate _decorationGlyphsToRender: DecorationBasedGlyph[];\n\n\tprivate _widgets: { [key: string]: IWidgetData } = {};\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\t\tthis._context = context;\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis.domNode = createFastDomNode(document.createElement(\"div\"));\n\t\tthis.domNode.setClassName(\"glyph-margin-widgets\");\n\t\tthis.domNode.setPosition(\"absolute\");\n\t\tthis.domNode.setTop(0);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._glyphMargin = options.get(EditorOption.glyphMargin);\n\t\tthis._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n\t\tthis._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n\t\tthis._glyphMarginDecorationLaneCount =\n\t\t\tlayoutInfo.glyphMarginDecorationLaneCount;\n\t\tthis._managedDomNodes = [];\n\t\tthis._decorationGlyphsToRender = [];\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._managedDomNodes = [];\n\t\tthis._decorationGlyphsToRender = [];\n\t\tthis._widgets = {};\n\t\tsuper.dispose();\n\t}\n\n\tpublic getWidgets(): IWidgetData[] {\n\t\treturn Object.values(this._widgets);\n\t}\n\n\t// --- begin event handlers\n\tpublic override onConfigurationChanged(\n\t\te: viewEvents.ViewConfigurationChangedEvent,\n\t): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._glyphMargin = options.get(EditorOption.glyphMargin);\n\t\tthis._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n\t\tthis._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n\t\tthis._glyphMarginDecorationLaneCount =\n\t\t\tlayoutInfo.glyphMarginDecorationLaneCount;\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(\n\t\te: viewEvents.ViewDecorationsChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(\n\t\te: viewEvents.ViewLinesChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(\n\t\te: viewEvents.ViewLinesDeletedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(\n\t\te: viewEvents.ViewLinesInsertedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(\n\t\te: viewEvents.ViewScrollChangedEvent,\n\t): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(\n\t\te: viewEvents.ViewZonesChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\t// --- begin widget management\n\n\tpublic addWidget(widget: IGlyphMarginWidget): void {\n\t\tconst domNode = createFastDomNode(widget.getDomNode());\n\n\t\tthis._widgets[widget.getId()] = {\n\t\t\twidget: widget,\n\t\t\tpreference: widget.getPosition(),\n\t\t\tdomNode: domNode,\n\t\t\trenderInfo: null,\n\t\t};\n\n\t\tdomNode.setPosition(\"absolute\");\n\t\tdomNode.setDisplay(\"none\");\n\t\tdomNode.setAttribute(\"widgetId\", widget.getId());\n\t\tthis.domNode.appendChild(domNode);\n\n\t\tthis.setShouldRender();\n\t}\n\n\tpublic setWidgetPosition(\n\t\twidget: IGlyphMarginWidget,\n\t\tpreference: IGlyphMarginWidgetPosition,\n\t): boolean {\n\t\tconst myWidget = this._widgets[widget.getId()];\n\t\tif (\n\t\t\tmyWidget.preference.lane === preference.lane &&\n\t\t\tmyWidget.preference.zIndex === preference.zIndex &&\n\t\t\tRange.equalsRange(myWidget.preference.range, preference.range)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmyWidget.preference = preference;\n\t\tthis.setShouldRender();\n\n\t\treturn true;\n\t}\n\n\tpublic removeWidget(widget: IGlyphMarginWidget): void {\n\t\tconst widgetId = widget.getId();\n\t\tif (this._widgets[widgetId]) {\n\t\t\tconst widgetData = this._widgets[widgetId];\n\t\t\tconst domNode = widgetData.domNode.domNode;\n\t\t\tdelete this._widgets[widgetId];\n\n\t\t\tdomNode.remove();\n\t\t\tthis.setShouldRender();\n\t\t}\n\t}\n\n\t// --- end widget management\n\n\tprivate _collectDecorationBasedGlyphRenderRequest(\n\t\tctx: RenderingContext,\n\t\trequests: GlyphRenderRequest[],\n\t): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst decorations = ctx.getDecorationsInViewport();\n\n\t\tfor (const d of decorations) {\n\t\t\tconst glyphMarginClassName = d.options.glyphMarginClassName;\n\t\t\tif (!glyphMarginClassName) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst startLineNumber = Math.max(\n\t\t\t\td.range.startLineNumber,\n\t\t\t\tvisibleStartLineNumber,\n\t\t\t);\n\t\t\tconst endLineNumber = Math.min(\n\t\t\t\td.range.endLineNumber,\n\t\t\t\tvisibleEndLineNumber,\n\t\t\t);\n\t\t\tconst lane =\n\t\t\t\td.options.glyphMargin?.position ?? GlyphMarginLane.Center;\n\t\t\tconst zIndex = d.options.zIndex ?? 0;\n\n\t\t\tfor (\n\t\t\t\tlet lineNumber = startLineNumber;\n\t\t\t\tlineNumber <= endLineNumber;\n\t\t\t\tlineNumber++\n\t\t\t) {\n\t\t\t\tconst modelPosition =\n\t\t\t\t\tthis._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\t\tnew Position(lineNumber, 0),\n\t\t\t\t\t);\n\t\t\t\tconst laneIndex = this._context.viewModel.glyphLanes\n\t\t\t\t\t.getLanesAtLine(modelPosition.lineNumber)\n\t\t\t\t\t.indexOf(lane);\n\t\t\t\trequests.push(\n\t\t\t\t\tnew DecorationBasedGlyphRenderRequest(\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\tlaneIndex,\n\t\t\t\t\t\tzIndex,\n\t\t\t\t\t\tglyphMarginClassName,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectWidgetBasedGlyphRenderRequest(\n\t\tctx: RenderingContext,\n\t\trequests: GlyphRenderRequest[],\n\t): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\tconst range = widget.preference.range;\n\t\t\tconst { startLineNumber, endLineNumber } =\n\t\t\t\tthis._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(\n\t\t\t\t\tRange.lift(range),\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\t!startLineNumber ||\n\t\t\t\t!endLineNumber ||\n\t\t\t\tendLineNumber < visibleStartLineNumber ||\n\t\t\t\tstartLineNumber > visibleEndLineNumber\n\t\t\t) {\n\t\t\t\t// The widget is not in the viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// The widget is in the viewport, find a good line for it\n\t\t\tconst widgetLineNumber = Math.max(\n\t\t\t\tstartLineNumber,\n\t\t\t\tvisibleStartLineNumber,\n\t\t\t);\n\t\t\tconst modelPosition =\n\t\t\t\tthis._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\tnew Position(widgetLineNumber, 0),\n\t\t\t\t);\n\t\t\tconst laneIndex = this._context.viewModel.glyphLanes\n\t\t\t\t.getLanesAtLine(modelPosition.lineNumber)\n\t\t\t\t.indexOf(widget.preference.lane);\n\t\t\trequests.push(\n\t\t\t\tnew WidgetBasedGlyphRenderRequest(\n\t\t\t\t\twidgetLineNumber,\n\t\t\t\t\tlaneIndex,\n\t\t\t\t\twidget.preference.zIndex,\n\t\t\t\t\twidget,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _collectSortedGlyphRenderRequests(\n\t\tctx: RenderingContext,\n\t): GlyphRenderRequest[] {\n\t\tconst requests: GlyphRenderRequest[] = [];\n\n\t\tthis._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n\t\tthis._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n\n\t\t// sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n\t\t// don't change this sort unless you understand `prepareRender` below.\n\t\trequests.sort((a, b) => {\n\t\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\t\tif (a.laneIndex === b.laneIndex) {\n\t\t\t\t\tif (a.zIndex === b.zIndex) {\n\t\t\t\t\t\tif (b.type === a.type) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ta.type === GlyphRenderRequestType.Decoration &&\n\t\t\t\t\t\t\t\tb.type === GlyphRenderRequestType.Decoration\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn a.className < b.className ? -1 : 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn b.type - a.type;\n\t\t\t\t\t}\n\t\t\t\t\treturn b.zIndex - a.zIndex;\n\t\t\t\t}\n\t\t\t\treturn a.laneIndex - b.laneIndex;\n\t\t\t}\n\t\t\treturn a.lineNumber - b.lineNumber;\n\t\t});\n\n\t\treturn requests;\n\t}\n\n\t/**\n\t * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n\t */\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._glyphMargin) {\n\t\t\tthis._decorationGlyphsToRender = [];\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\twidget.renderInfo = null;\n\t\t}\n\n\t\tconst requests = new ArrayQueue<GlyphRenderRequest>(\n\t\t\tthis._collectSortedGlyphRenderRequests(ctx),\n\t\t);\n\t\tconst decorationGlyphsToRender: DecorationBasedGlyph[] = [];\n\t\twhile (requests.length > 0) {\n\t\t\tconst first = requests.peek();\n\t\t\tif (!first) {\n\t\t\t\t// not possible\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n\t\t\tconst requestsAtLocation = requests.takeWhile(\n\t\t\t\t(el) =>\n\t\t\t\t\tel.lineNumber === first.lineNumber &&\n\t\t\t\t\tel.laneIndex === first.laneIndex,\n\t\t\t);\n\t\t\tif (!requestsAtLocation || requestsAtLocation.length === 0) {\n\t\t\t\t// not possible\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst winner = requestsAtLocation[0];\n\t\t\tif (winner.type === GlyphRenderRequestType.Decoration) {\n\t\t\t\t// combine all decorations with the same z-index\n\n\t\t\t\tconst classNames: string[] = [];\n\t\t\t\t// requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n\t\t\t\tfor (const request of requestsAtLocation) {\n\t\t\t\t\tif (\n\t\t\t\t\t\trequest.zIndex !== winner.zIndex ||\n\t\t\t\t\t\trequest.type !== winner.type\n\t\t\t\t\t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tclassNames.length === 0 ||\n\t\t\t\t\t\tclassNames[classNames.length - 1] !== request.className\n\t\t\t\t\t) {\n\t\t\t\t\t\tclassNames.push(request.className);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdecorationGlyphsToRender.push(\n\t\t\t\t\twinner.accept(classNames.join(\" \")),\n\t\t\t\t); // TODO@joyceerhl Implement overflow for remaining decorations\n\t\t\t} else {\n\t\t\t\t// widgets cannot be combined\n\t\t\t\twinner.widget.renderInfo = {\n\t\t\t\t\tlineNumber: winner.lineNumber,\n\t\t\t\t\tlaneIndex: winner.laneIndex,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tthis._decorationGlyphsToRender = decorationGlyphsToRender;\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tif (!this._glyphMargin) {\n\t\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\t\twidget.domNode.setDisplay(\"none\");\n\t\t\t}\n\t\t\twhile (this._managedDomNodes.length > 0) {\n\t\t\t\tconst domNode = this._managedDomNodes.pop();\n\t\t\t\tdomNode?.domNode.remove();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst width = Math.round(\n\t\t\tthis._glyphMarginWidth / this._glyphMarginDecorationLaneCount,\n\t\t);\n\n\t\t// Render widgets\n\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\tif (widget.renderInfo) {\n\t\t\t\tconst top =\n\t\t\t\t\tctx.viewportData.relativeVerticalOffset[\n\t\t\t\t\t\twidget.renderInfo.lineNumber -\n\t\t\t\t\t\t\tctx.viewportData.startLineNumber\n\t\t\t\t\t];\n\t\t\t\tconst left =\n\t\t\t\t\tthis._glyphMarginLeft +\n\t\t\t\t\twidget.renderInfo.laneIndex * this._lineHeight;\n\n\t\t\t\twidget.domNode.setDisplay(\"block\");\n\t\t\t\twidget.domNode.setTop(top);\n\t\t\t\twidget.domNode.setLeft(left);\n\t\t\t\twidget.domNode.setWidth(width);\n\t\t\t\twidget.domNode.setHeight(this._lineHeight);\n\t\t\t} else {\n\t\t\t\t// this widget is not visible\n\t\t\t\twidget.domNode.setDisplay(\"none\");\n\t\t\t}\n\t\t}\n\n\t\t// Render decorations, reusing previous dom nodes as possible\n\t\tfor (let i = 0; i < this._decorationGlyphsToRender.length; i++) {\n\t\t\tconst dec = this._decorationGlyphsToRender[i];\n\t\t\tconst top =\n\t\t\t\tctx.viewportData.relativeVerticalOffset[\n\t\t\t\t\tdec.lineNumber - ctx.viewportData.startLineNumber\n\t\t\t\t];\n\t\t\tconst left =\n\t\t\t\tthis._glyphMarginLeft + dec.laneIndex * this._lineHeight;\n\n\t\t\tlet domNode: FastDomNode<HTMLElement>;\n\t\t\tif (i < this._managedDomNodes.length) {\n\t\t\t\tdomNode = this._managedDomNodes[i];\n\t\t\t} else {\n\t\t\t\tdomNode = createFastDomNode(document.createElement(\"div\"));\n\t\t\t\tthis._managedDomNodes.push(domNode);\n\t\t\t\tthis.domNode.appendChild(domNode);\n\t\t\t}\n\n\t\t\tdomNode.setClassName(`cgmr codicon ` + dec.combinedClassName);\n\t\t\tdomNode.setPosition(`absolute`);\n\t\t\tdomNode.setTop(top);\n\t\t\tdomNode.setLeft(left);\n\t\t\tdomNode.setWidth(width);\n\t\t\tdomNode.setHeight(this._lineHeight);\n\t\t}\n\n\t\t// remove extra dom nodes\n\t\twhile (\n\t\t\tthis._managedDomNodes.length > this._decorationGlyphsToRender.length\n\t\t) {\n\t\t\tconst domNode = this._managedDomNodes.pop();\n\t\t\tdomNode?.domNode.remove();\n\t\t}\n\t}\n}\n\nexport interface IWidgetData {\n\twidget: IGlyphMarginWidget;\n\tpreference: IGlyphMarginWidgetPosition;\n\tdomNode: FastDomNode<HTMLElement>;\n\t/**\n\t * it will contain the location where to render the widget\n\t * or null if the widget is not visible\n\t */\n\trenderInfo: IRenderInfo | null;\n}\n\nexport interface IRenderInfo {\n\tlineNumber: number;\n\tlaneIndex: number;\n}\n\nenum GlyphRenderRequestType {\n\tDecoration = 0,\n\tWidget = 1,\n}\n\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nclass DecorationBasedGlyphRenderRequest {\n\tpublic readonly type = GlyphRenderRequestType.Decoration;\n\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly laneIndex: number,\n\t\tpublic readonly zIndex: number,\n\t\tpublic readonly className: string,\n\t) {}\n\n\taccept(combinedClassName: string): DecorationBasedGlyph {\n\t\treturn new DecorationBasedGlyph(\n\t\t\tthis.lineNumber,\n\t\t\tthis.laneIndex,\n\t\t\tcombinedClassName,\n\t\t);\n\t}\n}\n\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nclass WidgetBasedGlyphRenderRequest {\n\tpublic readonly type = GlyphRenderRequestType.Widget;\n\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly laneIndex: number,\n\t\tpublic readonly zIndex: number,\n\t\tpublic readonly widget: IWidgetData,\n\t) {}\n}\n\ntype GlyphRenderRequest =\n\t| DecorationBasedGlyphRenderRequest\n\t| WidgetBasedGlyphRenderRequest;\n\nclass DecorationBasedGlyph {\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly laneIndex: number,\n\t\tpublic readonly combinedClassName: string,\n\t) {}\n}\n"],
  "mappings": "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",
  "names": ["i", "GlyphRenderRequestType"]
}
