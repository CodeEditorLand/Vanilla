import{MinimapCharRenderer as R}from"./minimapCharRenderer.js";import{allCharCodes as P,Constants as t}from"./minimapCharSheet.js";import{prebakedMiniMaps as f}from"./minimapPreBaked.js";import{toUint8 as g}from"../../../../base/common/uint.js";class m{static lastCreated;static lastFontFamily;static create(a,e){if(this.lastCreated&&a===this.lastCreated.scale&&e===this.lastFontFamily)return this.lastCreated;let r;return f[a]?r=new R(f[a](),a):r=m.createFromSampleData(m.createSampleData(e).data,a),this.lastFontFamily=e,this.lastCreated=r,r}static createSampleData(a){const e=document.createElement("canvas"),r=e.getContext("2d");e.style.height=`${t.SAMPLED_CHAR_HEIGHT}px`,e.height=t.SAMPLED_CHAR_HEIGHT,e.width=t.CHAR_COUNT*t.SAMPLED_CHAR_WIDTH,e.style.width=t.CHAR_COUNT*t.SAMPLED_CHAR_WIDTH+"px",r.fillStyle="#ffffff",r.font=`bold ${t.SAMPLED_CHAR_HEIGHT}px ${a}`,r.textBaseline="middle";let n=0;for(const s of P)r.fillText(String.fromCharCode(s),n,t.SAMPLED_CHAR_HEIGHT/2),n+=t.SAMPLED_CHAR_WIDTH;return r.getImageData(0,0,t.CHAR_COUNT*t.SAMPLED_CHAR_WIDTH,t.SAMPLED_CHAR_HEIGHT)}static createFromSampleData(a,e){const r=t.SAMPLED_CHAR_HEIGHT*t.SAMPLED_CHAR_WIDTH*t.RGBA_CHANNELS_CNT*t.CHAR_COUNT;if(a.length!==r)throw new Error("Unexpected source in MinimapCharRenderer");const n=m._downsample(a,e);return new R(n,e)}static _downsampleChar(a,e,r,n,s){const l=t.BASE_CHAR_WIDTH*s,C=t.BASE_CHAR_HEIGHT*s;let A=n,o=0;for(let i=0;i<C;i++){const T=i/C*t.SAMPLED_CHAR_HEIGHT,S=(i+1)/C*t.SAMPLED_CHAR_HEIGHT;for(let c=0;c<l;c++){const u=c/l*t.SAMPLED_CHAR_WIDTH,M=(c+1)/l*t.SAMPLED_CHAR_WIDTH;let h=0,p=0;for(let H=T;H<S;H++){const I=e+Math.floor(H)*t.RGBA_SAMPLED_ROW_WIDTH,L=1-(H-Math.floor(H));for(let _=u;_<M;_++){const x=1-(_-Math.floor(_)),E=I+Math.floor(_)*t.RGBA_CHANNELS_CNT,D=x*L;p+=D,h+=a[E]*a[E+3]/255*D}}const d=h/p;o=Math.max(o,d),r[A++]=g(d)}}return o}static _downsample(a,e){const r=t.BASE_CHAR_HEIGHT*e*t.BASE_CHAR_WIDTH*e,n=r*t.CHAR_COUNT,s=new Uint8ClampedArray(n);let l=0,C=0,A=0;for(let o=0;o<t.CHAR_COUNT;o++)A=Math.max(A,this._downsampleChar(a,C,s,l,e)),l+=r,C+=t.SAMPLED_CHAR_WIDTH*t.RGBA_CHANNELS_CNT;if(A>0){const o=255/A;for(let i=0;i<n;i++)s[i]*=o}return s}}export{m as MinimapCharRendererFactory};
