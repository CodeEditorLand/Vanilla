{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/minimap/minimap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./minimap.css\";\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport {\n\ttype FastDomNode,\n\tcreateFastDomNode,\n} from \"../../../../base/browser/fastDomNode.js\";\nimport { DEFAULT_FONT_FAMILY } from \"../../../../base/browser/fonts.js\";\nimport { GlobalPointerMoveMonitor } from \"../../../../base/browser/globalPointerMoveMonitor.js\";\nimport {\n\tEventType,\n\tGesture,\n\ttype GestureEvent,\n} from \"../../../../base/browser/touch.js\";\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport type { Color } from \"../../../../base/common/color.js\";\nimport { createSingleCallFunction } from \"../../../../base/common/functional.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache } from \"../../../../base/common/map.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport {\n\teditorForeground,\n\tminimapBackground,\n\tminimapForegroundOpacity,\n\tminimapSelection,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport type { IEditorConfiguration } from \"../../../common/config/editorConfiguration.js\";\nimport {\n\tEditorLayoutInfoComputer,\n\tEditorOption,\n\tMINIMAP_GUTTER_WIDTH,\n\tRenderMinimap,\n} from \"../../../common/config/editorOptions.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { RGBA8 } from \"../../../common/core/rgba.js\";\nimport { Selection } from \"../../../common/core/selection.js\";\nimport { ScrollType } from \"../../../common/editorCommon.js\";\nimport type { EditorTheme } from \"../../../common/editorTheme.js\";\nimport { ColorId } from \"../../../common/encodedTokenAttributes.js\";\nimport {\n\tMinimapPosition,\n\tMinimapSectionHeaderStyle,\n\ttype TextModelResolvedOptions,\n} from \"../../../common/model.js\";\nimport type { ModelDecorationMinimapOptions } from \"../../../common/model/textModel.js\";\nimport * as viewEvents from \"../../../common/viewEvents.js\";\nimport {\n\ttype ViewLineData,\n\tViewModelDecoration,\n} from \"../../../common/viewModel.js\";\nimport { MinimapTokensColorTracker } from \"../../../common/viewModel/minimapTokensColorTracker.js\";\nimport type { ViewContext } from \"../../../common/viewModel/viewContext.js\";\nimport type {\n\tRenderingContext,\n\tRestrictedRenderingContext,\n} from \"../../view/renderingContext.js\";\nimport { type ILine, RenderedLinesCollection } from \"../../view/viewLayer.js\";\nimport {\n\tPartFingerprint,\n\tPartFingerprints,\n\tViewPart,\n} from \"../../view/viewPart.js\";\nimport type { MinimapCharRenderer } from \"./minimapCharRenderer.js\";\nimport { MinimapCharRendererFactory } from \"./minimapCharRendererFactory.js\";\nimport { Constants } from \"./minimapCharSheet.js\";\n\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\n\nconst GUTTER_DECORATION_WIDTH = 2;\n\nclass MinimapOptions {\n\tpublic readonly renderMinimap: RenderMinimap;\n\tpublic readonly size: \"proportional\" | \"fill\" | \"fit\";\n\tpublic readonly minimapHeightIsEditorHeight: boolean;\n\tpublic readonly scrollBeyondLastLine: boolean;\n\tpublic readonly paddingTop: number;\n\tpublic readonly paddingBottom: number;\n\tpublic readonly showSlider: \"always\" | \"mouseover\";\n\tpublic readonly autohide: boolean;\n\tpublic readonly pixelRatio: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly lineHeight: number;\n\t/**\n\t * container dom node left position (in CSS px)\n\t */\n\tpublic readonly minimapLeft: number;\n\t/**\n\t * container dom node width (in CSS px)\n\t */\n\tpublic readonly minimapWidth: number;\n\t/**\n\t * container dom node height (in CSS px)\n\t */\n\tpublic readonly minimapHeight: number;\n\t/**\n\t * canvas backing store width (in device px)\n\t */\n\tpublic readonly canvasInnerWidth: number;\n\t/**\n\t * canvas backing store height (in device px)\n\t */\n\tpublic readonly canvasInnerHeight: number;\n\t/**\n\t * canvas width (in CSS px)\n\t */\n\tpublic readonly canvasOuterWidth: number;\n\t/**\n\t * canvas height (in CSS px)\n\t */\n\tpublic readonly canvasOuterHeight: number;\n\n\tpublic readonly isSampling: boolean;\n\tpublic readonly editorHeight: number;\n\tpublic readonly fontScale: number;\n\tpublic readonly minimapLineHeight: number;\n\tpublic readonly minimapCharWidth: number;\n\tpublic readonly sectionHeaderFontFamily: string;\n\tpublic readonly sectionHeaderFontSize: number;\n\t/**\n\t * Space in between the characters of the section header (in CSS px)\n\t */\n\tpublic readonly sectionHeaderLetterSpacing: number;\n\tpublic readonly sectionHeaderFontColor: RGBA8;\n\n\tpublic readonly charRenderer: () => MinimapCharRenderer;\n\tpublic readonly defaultBackgroundColor: RGBA8;\n\tpublic readonly backgroundColor: RGBA8;\n\t/**\n\t * foreground alpha: integer in [0-255]\n\t */\n\tpublic readonly foregroundAlpha: number;\n\n\tconstructor(\n\t\tconfiguration: IEditorConfiguration,\n\t\ttheme: EditorTheme,\n\t\ttokensColorTracker: MinimapTokensColorTracker,\n\t) {\n\t\tconst options = configuration.options;\n\t\tconst pixelRatio = options.get(EditorOption.pixelRatio);\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst minimapLayout = layoutInfo.minimap;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst minimapOpts = options.get(EditorOption.minimap);\n\n\t\tthis.renderMinimap = minimapLayout.renderMinimap;\n\t\tthis.size = minimapOpts.size;\n\t\tthis.minimapHeightIsEditorHeight =\n\t\t\tminimapLayout.minimapHeightIsEditorHeight;\n\t\tthis.scrollBeyondLastLine = options.get(\n\t\t\tEditorOption.scrollBeyondLastLine,\n\t\t);\n\t\tthis.paddingTop = options.get(EditorOption.padding).top;\n\t\tthis.paddingBottom = options.get(EditorOption.padding).bottom;\n\t\tthis.showSlider = minimapOpts.showSlider;\n\t\tthis.autohide = minimapOpts.autohide;\n\t\tthis.pixelRatio = pixelRatio;\n\t\tthis.typicalHalfwidthCharacterWidth =\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis.minimapLeft = minimapLayout.minimapLeft;\n\t\tthis.minimapWidth = minimapLayout.minimapWidth;\n\t\tthis.minimapHeight = layoutInfo.height;\n\n\t\tthis.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n\t\tthis.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n\t\tthis.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n\t\tthis.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n\n\t\tthis.isSampling = minimapLayout.minimapIsSampling;\n\t\tthis.editorHeight = layoutInfo.height;\n\t\tthis.fontScale = minimapLayout.minimapScale;\n\t\tthis.minimapLineHeight = minimapLayout.minimapLineHeight;\n\t\tthis.minimapCharWidth = Constants.BASE_CHAR_WIDTH * this.fontScale;\n\t\tthis.sectionHeaderFontFamily = DEFAULT_FONT_FAMILY;\n\t\tthis.sectionHeaderFontSize =\n\t\t\tminimapOpts.sectionHeaderFontSize * pixelRatio;\n\t\tthis.sectionHeaderLetterSpacing =\n\t\t\tminimapOpts.sectionHeaderLetterSpacing; // intentionally not multiplying by pixelRatio\n\t\tthis.sectionHeaderFontColor = MinimapOptions._getSectionHeaderColor(\n\t\t\ttheme,\n\t\t\ttokensColorTracker.getColor(ColorId.DefaultForeground),\n\t\t);\n\n\t\tthis.charRenderer = createSingleCallFunction(() =>\n\t\t\tMinimapCharRendererFactory.create(\n\t\t\t\tthis.fontScale,\n\t\t\t\tfontInfo.fontFamily,\n\t\t\t),\n\t\t);\n\t\tthis.defaultBackgroundColor = tokensColorTracker.getColor(\n\t\t\tColorId.DefaultBackground,\n\t\t);\n\t\tthis.backgroundColor = MinimapOptions._getMinimapBackground(\n\t\t\ttheme,\n\t\t\tthis.defaultBackgroundColor,\n\t\t);\n\t\tthis.foregroundAlpha =\n\t\t\tMinimapOptions._getMinimapForegroundOpacity(theme);\n\t}\n\n\tprivate static _getMinimapBackground(\n\t\ttheme: EditorTheme,\n\t\tdefaultBackgroundColor: RGBA8,\n\t): RGBA8 {\n\t\tconst themeColor = theme.getColor(minimapBackground);\n\t\tif (themeColor) {\n\t\t\treturn new RGBA8(\n\t\t\t\tthemeColor.rgba.r,\n\t\t\t\tthemeColor.rgba.g,\n\t\t\t\tthemeColor.rgba.b,\n\t\t\t\tMath.round(255 * themeColor.rgba.a),\n\t\t\t);\n\t\t}\n\t\treturn defaultBackgroundColor;\n\t}\n\n\tprivate static _getMinimapForegroundOpacity(theme: EditorTheme): number {\n\t\tconst themeColor = theme.getColor(minimapForegroundOpacity);\n\t\tif (themeColor) {\n\t\t\treturn RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n\t\t}\n\t\treturn 255;\n\t}\n\n\tprivate static _getSectionHeaderColor(\n\t\ttheme: EditorTheme,\n\t\tdefaultForegroundColor: RGBA8,\n\t): RGBA8 {\n\t\tconst themeColor = theme.getColor(editorForeground);\n\t\tif (themeColor) {\n\t\t\treturn new RGBA8(\n\t\t\t\tthemeColor.rgba.r,\n\t\t\t\tthemeColor.rgba.g,\n\t\t\t\tthemeColor.rgba.b,\n\t\t\t\tMath.round(255 * themeColor.rgba.a),\n\t\t\t);\n\t\t}\n\t\treturn defaultForegroundColor;\n\t}\n\n\tpublic equals(other: MinimapOptions): boolean {\n\t\treturn (\n\t\t\tthis.renderMinimap === other.renderMinimap &&\n\t\t\tthis.size === other.size &&\n\t\t\tthis.minimapHeightIsEditorHeight ===\n\t\t\t\tother.minimapHeightIsEditorHeight &&\n\t\t\tthis.scrollBeyondLastLine === other.scrollBeyondLastLine &&\n\t\t\tthis.paddingTop === other.paddingTop &&\n\t\t\tthis.paddingBottom === other.paddingBottom &&\n\t\t\tthis.showSlider === other.showSlider &&\n\t\t\tthis.autohide === other.autohide &&\n\t\t\tthis.pixelRatio === other.pixelRatio &&\n\t\t\tthis.typicalHalfwidthCharacterWidth ===\n\t\t\t\tother.typicalHalfwidthCharacterWidth &&\n\t\t\tthis.lineHeight === other.lineHeight &&\n\t\t\tthis.minimapLeft === other.minimapLeft &&\n\t\t\tthis.minimapWidth === other.minimapWidth &&\n\t\t\tthis.minimapHeight === other.minimapHeight &&\n\t\t\tthis.canvasInnerWidth === other.canvasInnerWidth &&\n\t\t\tthis.canvasInnerHeight === other.canvasInnerHeight &&\n\t\t\tthis.canvasOuterWidth === other.canvasOuterWidth &&\n\t\t\tthis.canvasOuterHeight === other.canvasOuterHeight &&\n\t\t\tthis.isSampling === other.isSampling &&\n\t\t\tthis.editorHeight === other.editorHeight &&\n\t\t\tthis.fontScale === other.fontScale &&\n\t\t\tthis.minimapLineHeight === other.minimapLineHeight &&\n\t\t\tthis.minimapCharWidth === other.minimapCharWidth &&\n\t\t\tthis.sectionHeaderFontSize === other.sectionHeaderFontSize &&\n\t\t\tthis.sectionHeaderLetterSpacing ===\n\t\t\t\tother.sectionHeaderLetterSpacing &&\n\t\t\tthis.defaultBackgroundColor &&\n\t\t\tthis.defaultBackgroundColor.equals(other.defaultBackgroundColor) &&\n\t\t\tthis.backgroundColor &&\n\t\t\tthis.backgroundColor.equals(other.backgroundColor) &&\n\t\t\tthis.foregroundAlpha === other.foregroundAlpha\n\t\t);\n\t}\n}\n\nclass MinimapLayout {\n\tconstructor(\n\t\t/**\n\t\t * The given editor scrollTop (input).\n\t\t */\n\t\tpublic readonly scrollTop: number,\n\t\t/**\n\t\t * The given editor scrollHeight (input).\n\t\t */\n\t\tpublic readonly scrollHeight: number,\n\t\tpublic readonly sliderNeeded: boolean,\n\t\tprivate readonly _computedSliderRatio: number,\n\t\t/**\n\t\t * slider dom node top (in CSS px)\n\t\t */\n\t\tpublic readonly sliderTop: number,\n\t\t/**\n\t\t * slider dom node height (in CSS px)\n\t\t */\n\t\tpublic readonly sliderHeight: number,\n\t\t/**\n\t\t * empty lines to reserve at the top of the minimap.\n\t\t */\n\t\tpublic readonly topPaddingLineCount: number,\n\t\t/**\n\t\t * minimap render start line number.\n\t\t */\n\t\tpublic readonly startLineNumber: number,\n\t\t/**\n\t\t * minimap render end line number.\n\t\t */\n\t\tpublic readonly endLineNumber: number,\n\t) {}\n\n\t/**\n\t * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n\t */\n\tpublic getDesiredScrollTopFromDelta(delta: number): number {\n\t\treturn Math.round(this.scrollTop + delta / this._computedSliderRatio);\n\t}\n\n\tpublic getDesiredScrollTopFromTouchLocation(pageY: number): number {\n\t\treturn Math.round(\n\t\t\t(pageY - this.sliderHeight / 2) / this._computedSliderRatio,\n\t\t);\n\t}\n\n\t/**\n\t * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n\t */\n\tpublic intersectWithViewport(range: Range): [number, number] | null {\n\t\tconst startLineNumber = Math.max(\n\t\t\tthis.startLineNumber,\n\t\t\trange.startLineNumber,\n\t\t);\n\t\tconst endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n\t\tif (startLineNumber > endLineNumber) {\n\t\t\t// entirely outside minimap's viewport\n\t\t\treturn null;\n\t\t}\n\t\treturn [startLineNumber, endLineNumber];\n\t}\n\n\t/**\n\t * Get the inner minimap y coordinate for a line number.\n\t */\n\tpublic getYForLineNumber(\n\t\tlineNumber: number,\n\t\tminimapLineHeight: number,\n\t): number {\n\t\treturn (\n\t\t\t+(lineNumber - this.startLineNumber + this.topPaddingLineCount) *\n\t\t\tminimapLineHeight\n\t\t);\n\t}\n\n\tpublic static create(\n\t\toptions: MinimapOptions,\n\t\tviewportStartLineNumber: number,\n\t\tviewportEndLineNumber: number,\n\t\tviewportStartLineNumberVerticalOffset: number,\n\t\tviewportHeight: number,\n\t\tviewportContainsWhitespaceGaps: boolean,\n\t\tlineCount: number,\n\t\trealLineCount: number,\n\t\tscrollTop: number,\n\t\tscrollHeight: number,\n\t\tpreviousLayout: MinimapLayout | null,\n\t): MinimapLayout {\n\t\tconst pixelRatio = options.pixelRatio;\n\t\tconst minimapLineHeight = options.minimapLineHeight;\n\t\tconst minimapLinesFitting = Math.floor(\n\t\t\toptions.canvasInnerHeight / minimapLineHeight,\n\t\t);\n\t\tconst lineHeight = options.lineHeight;\n\n\t\tif (options.minimapHeightIsEditorHeight) {\n\t\t\tlet logicalScrollHeight =\n\t\t\t\trealLineCount * options.lineHeight +\n\t\t\t\toptions.paddingTop +\n\t\t\t\toptions.paddingBottom;\n\t\t\tif (options.scrollBeyondLastLine) {\n\t\t\t\tlogicalScrollHeight += Math.max(\n\t\t\t\t\t0,\n\t\t\t\t\tviewportHeight - options.lineHeight - options.paddingBottom,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst sliderHeight = Math.max(\n\t\t\t\t1,\n\t\t\t\tMath.floor(\n\t\t\t\t\t(viewportHeight * viewportHeight) / logicalScrollHeight,\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst maxMinimapSliderTop = Math.max(\n\t\t\t\t0,\n\t\t\t\toptions.minimapHeight - sliderHeight,\n\t\t\t);\n\t\t\t// The slider can move from 0 to `maxMinimapSliderTop`\n\t\t\t// in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n\t\t\tconst computedSliderRatio =\n\t\t\t\tmaxMinimapSliderTop / (scrollHeight - viewportHeight);\n\t\t\tconst sliderTop = scrollTop * computedSliderRatio;\n\t\t\tconst sliderNeeded = maxMinimapSliderTop > 0;\n\t\t\tconst maxLinesFitting = Math.floor(\n\t\t\t\toptions.canvasInnerHeight / options.minimapLineHeight,\n\t\t\t);\n\t\t\tconst topPaddingLineCount = Math.floor(\n\t\t\t\toptions.paddingTop / options.lineHeight,\n\t\t\t);\n\t\t\treturn new MinimapLayout(\n\t\t\t\tscrollTop,\n\t\t\t\tscrollHeight,\n\t\t\t\tsliderNeeded,\n\t\t\t\tcomputedSliderRatio,\n\t\t\t\tsliderTop,\n\t\t\t\tsliderHeight,\n\t\t\t\ttopPaddingLineCount,\n\t\t\t\t1,\n\t\t\t\tMath.min(lineCount, maxLinesFitting),\n\t\t\t);\n\t\t}\n\n\t\t// The visible line count in a viewport can change due to a number of reasons:\n\t\t//  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n\t\t//    e.g. for a line height of 20, and a viewport height of 600\n\t\t//          * scrollTop = 0  => visible lines are [1, 30]\n\t\t//          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n\t\t//          * scrollTop = 20 => visible lines are [2, 31]\n\t\t//  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n\t\t//  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n\n\t\t// We must first establish a desirable slider height.\n\t\tlet sliderHeight: number;\n\t\tif (\n\t\t\tviewportContainsWhitespaceGaps &&\n\t\t\tviewportEndLineNumber !== lineCount\n\t\t) {\n\t\t\t// case b) from above: there are whitespace gaps in the viewport.\n\t\t\t// In this case, the height of the slider directly reflects the visible line count.\n\t\t\tconst viewportLineCount =\n\t\t\t\tviewportEndLineNumber - viewportStartLineNumber + 1;\n\t\t\tsliderHeight = Math.floor(\n\t\t\t\t(viewportLineCount * minimapLineHeight) / pixelRatio,\n\t\t\t);\n\t\t} else {\n\t\t\t// The slider has a stable height\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\tsliderHeight = Math.floor(\n\t\t\t\t(expectedViewportLineCount * minimapLineHeight) / pixelRatio,\n\t\t\t);\n\t\t}\n\n\t\tconst extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n\t\tlet extraLinesAtTheBottom = Math.floor(\n\t\t\toptions.paddingBottom / lineHeight,\n\t\t);\n\t\tif (options.scrollBeyondLastLine) {\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\textraLinesAtTheBottom = Math.max(\n\t\t\t\textraLinesAtTheBottom,\n\t\t\t\texpectedViewportLineCount - 1,\n\t\t\t);\n\t\t}\n\n\t\tlet maxMinimapSliderTop: number;\n\t\tif (extraLinesAtTheBottom > 0) {\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\t// The minimap slider, when dragged all the way down, will contain the last line at its top\n\t\t\tmaxMinimapSliderTop =\n\t\t\t\t((extraLinesAtTheTop +\n\t\t\t\t\tlineCount +\n\t\t\t\t\textraLinesAtTheBottom -\n\t\t\t\t\texpectedViewportLineCount -\n\t\t\t\t\t1) *\n\t\t\t\t\tminimapLineHeight) /\n\t\t\t\tpixelRatio;\n\t\t} else {\n\t\t\t// The minimap slider, when dragged all the way down, will contain the last line at its bottom\n\t\t\tmaxMinimapSliderTop = Math.max(\n\t\t\t\t0,\n\t\t\t\t((extraLinesAtTheTop + lineCount) * minimapLineHeight) /\n\t\t\t\t\tpixelRatio -\n\t\t\t\t\tsliderHeight,\n\t\t\t);\n\t\t}\n\t\tmaxMinimapSliderTop = Math.min(\n\t\t\toptions.minimapHeight - sliderHeight,\n\t\t\tmaxMinimapSliderTop,\n\t\t);\n\n\t\t// The slider can move from 0 to `maxMinimapSliderTop`\n\t\t// in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n\t\tconst computedSliderRatio =\n\t\t\tmaxMinimapSliderTop / (scrollHeight - viewportHeight);\n\t\tconst sliderTop = scrollTop * computedSliderRatio;\n\n\t\tif (\n\t\t\tminimapLinesFitting >=\n\t\t\textraLinesAtTheTop + lineCount + extraLinesAtTheBottom\n\t\t) {\n\t\t\t// All lines fit in the minimap\n\t\t\tconst sliderNeeded = maxMinimapSliderTop > 0;\n\t\t\treturn new MinimapLayout(\n\t\t\t\tscrollTop,\n\t\t\t\tscrollHeight,\n\t\t\t\tsliderNeeded,\n\t\t\t\tcomputedSliderRatio,\n\t\t\t\tsliderTop,\n\t\t\t\tsliderHeight,\n\t\t\t\textraLinesAtTheTop,\n\t\t\t\t1,\n\t\t\t\tlineCount,\n\t\t\t);\n\t\t} else {\n\t\t\tlet consideringStartLineNumber: number;\n\t\t\tif (viewportStartLineNumber > 1) {\n\t\t\t\tconsideringStartLineNumber =\n\t\t\t\t\tviewportStartLineNumber + extraLinesAtTheTop;\n\t\t\t} else {\n\t\t\t\tconsideringStartLineNumber = Math.max(\n\t\t\t\t\t1,\n\t\t\t\t\tscrollTop / lineHeight,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet topPaddingLineCount: number;\n\t\t\tlet startLineNumber = Math.max(\n\t\t\t\t1,\n\t\t\t\tMath.floor(\n\t\t\t\t\tconsideringStartLineNumber -\n\t\t\t\t\t\t(sliderTop * pixelRatio) / minimapLineHeight,\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (startLineNumber < extraLinesAtTheTop) {\n\t\t\t\ttopPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n\t\t\t\tstartLineNumber = 1;\n\t\t\t} else {\n\t\t\t\ttopPaddingLineCount = 0;\n\t\t\t\tstartLineNumber = Math.max(\n\t\t\t\t\t1,\n\t\t\t\t\tstartLineNumber - extraLinesAtTheTop,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Avoid flickering caused by a partial viewport start line\n\t\t\t// by being consistent w.r.t. the previous layout decision\n\t\t\tif (\n\t\t\t\tpreviousLayout &&\n\t\t\t\tpreviousLayout.scrollHeight === scrollHeight\n\t\t\t) {\n\t\t\t\tif (previousLayout.scrollTop > scrollTop) {\n\t\t\t\t\t// Scrolling up => never increase `startLineNumber`\n\t\t\t\t\tstartLineNumber = Math.min(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tpreviousLayout.startLineNumber,\n\t\t\t\t\t);\n\t\t\t\t\ttopPaddingLineCount = Math.max(\n\t\t\t\t\t\ttopPaddingLineCount,\n\t\t\t\t\t\tpreviousLayout.topPaddingLineCount,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (previousLayout.scrollTop < scrollTop) {\n\t\t\t\t\t// Scrolling down => never decrease `startLineNumber`\n\t\t\t\t\tstartLineNumber = Math.max(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tpreviousLayout.startLineNumber,\n\t\t\t\t\t);\n\t\t\t\t\ttopPaddingLineCount = Math.min(\n\t\t\t\t\t\ttopPaddingLineCount,\n\t\t\t\t\t\tpreviousLayout.topPaddingLineCount,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endLineNumber = Math.min(\n\t\t\t\tlineCount,\n\t\t\t\tstartLineNumber - topPaddingLineCount + minimapLinesFitting - 1,\n\t\t\t);\n\t\t\tconst partialLine =\n\t\t\t\t(scrollTop - viewportStartLineNumberVerticalOffset) /\n\t\t\t\tlineHeight;\n\n\t\t\tlet sliderTopAligned: number;\n\t\t\tif (scrollTop >= options.paddingTop) {\n\t\t\t\tsliderTopAligned =\n\t\t\t\t\t((viewportStartLineNumber -\n\t\t\t\t\t\tstartLineNumber +\n\t\t\t\t\t\ttopPaddingLineCount +\n\t\t\t\t\t\tpartialLine) *\n\t\t\t\t\t\tminimapLineHeight) /\n\t\t\t\t\tpixelRatio;\n\t\t\t} else {\n\t\t\t\tsliderTopAligned =\n\t\t\t\t\t((scrollTop / options.paddingTop) *\n\t\t\t\t\t\t(topPaddingLineCount + partialLine) *\n\t\t\t\t\t\tminimapLineHeight) /\n\t\t\t\t\tpixelRatio;\n\t\t\t}\n\n\t\t\treturn new MinimapLayout(\n\t\t\t\tscrollTop,\n\t\t\t\tscrollHeight,\n\t\t\t\ttrue,\n\t\t\t\tcomputedSliderRatio,\n\t\t\t\tsliderTopAligned,\n\t\t\t\tsliderHeight,\n\t\t\t\ttopPaddingLineCount,\n\t\t\t\tstartLineNumber,\n\t\t\t\tendLineNumber,\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass MinimapLine implements ILine {\n\tpublic static readonly INVALID = new MinimapLine(-1);\n\n\tdy: number;\n\n\tconstructor(dy: number) {\n\t\tthis.dy = dy;\n\t}\n\n\tpublic onContentChanged(): void {\n\t\tthis.dy = -1;\n\t}\n\n\tpublic onTokensChanged(): void {\n\t\tthis.dy = -1;\n\t}\n}\n\nclass RenderData {\n\t/**\n\t * last rendered layout.\n\t */\n\tpublic readonly renderedLayout: MinimapLayout;\n\tprivate readonly _imageData: ImageData;\n\tprivate readonly _renderedLines: RenderedLinesCollection<MinimapLine>;\n\n\tconstructor(\n\t\trenderedLayout: MinimapLayout,\n\t\timageData: ImageData,\n\t\tlines: MinimapLine[],\n\t) {\n\t\tthis.renderedLayout = renderedLayout;\n\t\tthis._imageData = imageData;\n\t\tthis._renderedLines = new RenderedLinesCollection({\n\t\t\tcreateLine: () => MinimapLine.INVALID,\n\t\t});\n\t\tthis._renderedLines._set(renderedLayout.startLineNumber, lines);\n\t}\n\n\t/**\n\t * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n\t */\n\tpublic linesEquals(layout: MinimapLayout): boolean {\n\t\tif (!this.scrollEquals(layout)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tmp = this._renderedLines._get();\n\t\tconst lines = tmp.lines;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].dy === -1) {\n\t\t\t\t// This line is invalid\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if the current RenderData matches the new layout's scroll position\n\t */\n\tpublic scrollEquals(layout: MinimapLayout): boolean {\n\t\treturn (\n\t\t\tthis.renderedLayout.startLineNumber === layout.startLineNumber &&\n\t\t\tthis.renderedLayout.endLineNumber === layout.endLineNumber\n\t\t);\n\t}\n\n\t_get(): {\n\t\timageData: ImageData;\n\t\trendLineNumberStart: number;\n\t\tlines: MinimapLine[];\n\t} {\n\t\tconst tmp = this._renderedLines._get();\n\t\treturn {\n\t\t\timageData: this._imageData,\n\t\t\trendLineNumberStart: tmp.rendLineNumberStart,\n\t\t\tlines: tmp.lines,\n\t\t};\n\t}\n\n\tpublic onLinesChanged(\n\t\tchangeFromLineNumber: number,\n\t\tchangeCount: number,\n\t): boolean {\n\t\treturn this._renderedLines.onLinesChanged(\n\t\t\tchangeFromLineNumber,\n\t\t\tchangeCount,\n\t\t);\n\t}\n\tpublic onLinesDeleted(\n\t\tdeleteFromLineNumber: number,\n\t\tdeleteToLineNumber: number,\n\t): void {\n\t\tthis._renderedLines.onLinesDeleted(\n\t\t\tdeleteFromLineNumber,\n\t\t\tdeleteToLineNumber,\n\t\t);\n\t}\n\tpublic onLinesInserted(\n\t\tinsertFromLineNumber: number,\n\t\tinsertToLineNumber: number,\n\t): void {\n\t\tthis._renderedLines.onLinesInserted(\n\t\t\tinsertFromLineNumber,\n\t\t\tinsertToLineNumber,\n\t\t);\n\t}\n\tpublic onTokensChanged(\n\t\tranges: { fromLineNumber: number; toLineNumber: number }[],\n\t): boolean {\n\t\treturn this._renderedLines.onTokensChanged(ranges);\n\t}\n}\n\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n\tprivate readonly _backgroundFillData: Uint8ClampedArray;\n\tprivate readonly _buffers: [ImageData, ImageData];\n\tprivate _lastUsedBuffer: number;\n\n\tconstructor(\n\t\tctx: CanvasRenderingContext2D,\n\t\tWIDTH: number,\n\t\tHEIGHT: number,\n\t\tbackground: RGBA8,\n\t) {\n\t\tthis._backgroundFillData = MinimapBuffers._createBackgroundFillData(\n\t\t\tWIDTH,\n\t\t\tHEIGHT,\n\t\t\tbackground,\n\t\t);\n\t\tthis._buffers = [\n\t\t\tctx.createImageData(WIDTH, HEIGHT),\n\t\t\tctx.createImageData(WIDTH, HEIGHT),\n\t\t];\n\t\tthis._lastUsedBuffer = 0;\n\t}\n\n\tpublic getBuffer(): ImageData {\n\t\t// rotate buffers\n\t\tthis._lastUsedBuffer = 1 - this._lastUsedBuffer;\n\t\tconst result = this._buffers[this._lastUsedBuffer];\n\n\t\t// fill with background color\n\t\tresult.data.set(this._backgroundFillData);\n\n\t\treturn result;\n\t}\n\n\tprivate static _createBackgroundFillData(\n\t\tWIDTH: number,\n\t\tHEIGHT: number,\n\t\tbackground: RGBA8,\n\t): Uint8ClampedArray {\n\t\tconst backgroundR = background.r;\n\t\tconst backgroundG = background.g;\n\t\tconst backgroundB = background.b;\n\t\tconst backgroundA = background.a;\n\n\t\tconst result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < HEIGHT; i++) {\n\t\t\tfor (let j = 0; j < WIDTH; j++) {\n\t\t\t\tresult[offset] = backgroundR;\n\t\t\t\tresult[offset + 1] = backgroundG;\n\t\t\t\tresult[offset + 2] = backgroundB;\n\t\t\t\tresult[offset + 3] = backgroundA;\n\t\t\t\toffset += 4;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport interface IMinimapModel {\n\treadonly tokensColorTracker: MinimapTokensColorTracker;\n\treadonly options: MinimapOptions;\n\n\tgetLineCount(): number;\n\tgetRealLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetMinimapLinesRenderingData(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tneeded: boolean[],\n\t): (ViewLineData | null)[];\n\tgetSelections(): Selection[];\n\tgetMinimapDecorationsInViewport(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t): ViewModelDecoration[];\n\tgetSectionHeaderDecorationsInViewport(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t): ViewModelDecoration[];\n\tgetSectionHeaderText(\n\t\tdecoration: ViewModelDecoration,\n\t\tfitWidth: (s: string) => string,\n\t): string | null;\n\tgetOptions(): TextModelResolvedOptions;\n\trevealLineNumber(lineNumber: number): void;\n\tsetScrollTop(scrollTop: number): void;\n}\n\ninterface IMinimapRenderingContext {\n\treadonly viewportContainsWhitespaceGaps: boolean;\n\n\treadonly scrollWidth: number;\n\treadonly scrollHeight: number;\n\n\treadonly viewportStartLineNumber: number;\n\treadonly viewportEndLineNumber: number;\n\treadonly viewportStartLineNumberVerticalOffset: number;\n\n\treadonly scrollTop: number;\n\treadonly scrollLeft: number;\n\n\treadonly viewportWidth: number;\n\treadonly viewportHeight: number;\n}\n\ninterface SamplingStateLinesDeletedEvent {\n\ttype: \"deleted\";\n\t_oldIndex: number;\n\tdeleteFromLineNumber: number;\n\tdeleteToLineNumber: number;\n}\n\ninterface SamplingStateLinesInsertedEvent {\n\ttype: \"inserted\";\n\t_i: number;\n\tinsertFromLineNumber: number;\n\tinsertToLineNumber: number;\n}\n\ninterface SamplingStateFlushEvent {\n\ttype: \"flush\";\n}\n\ntype SamplingStateEvent =\n\t| SamplingStateLinesInsertedEvent\n\t| SamplingStateLinesDeletedEvent\n\t| SamplingStateFlushEvent;\n\nclass MinimapSamplingState {\n\tpublic static compute(\n\t\toptions: MinimapOptions,\n\t\tviewLineCount: number,\n\t\toldSamplingState: MinimapSamplingState | null,\n\t): [MinimapSamplingState | null, SamplingStateEvent[]] {\n\t\tif (\n\t\t\toptions.renderMinimap === RenderMinimap.None ||\n\t\t\t!options.isSampling\n\t\t) {\n\t\t\treturn [null, []];\n\t\t}\n\n\t\t// ratio is intentionally not part of the layout to avoid the layout changing all the time\n\t\t// so we need to recompute it again...\n\t\tconst { minimapLineCount } =\n\t\t\tEditorLayoutInfoComputer.computeContainedMinimapLineCount({\n\t\t\t\tviewLineCount: viewLineCount,\n\t\t\t\tscrollBeyondLastLine: options.scrollBeyondLastLine,\n\t\t\t\tpaddingTop: options.paddingTop,\n\t\t\t\tpaddingBottom: options.paddingBottom,\n\t\t\t\theight: options.editorHeight,\n\t\t\t\tlineHeight: options.lineHeight,\n\t\t\t\tpixelRatio: options.pixelRatio,\n\t\t\t});\n\t\tconst ratio = viewLineCount / minimapLineCount;\n\t\tconst halfRatio = ratio / 2;\n\n\t\tif (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n\t\t\tconst result: number[] = [];\n\t\t\tresult[0] = 1;\n\t\t\tif (minimapLineCount > 1) {\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0, lastIndex = minimapLineCount - 1;\n\t\t\t\t\ti < lastIndex;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tresult[i] = Math.round(i * ratio + halfRatio);\n\t\t\t\t}\n\t\t\t\tresult[minimapLineCount - 1] = viewLineCount;\n\t\t\t}\n\t\t\treturn [new MinimapSamplingState(ratio, result), []];\n\t\t}\n\n\t\tconst oldMinimapLines = oldSamplingState.minimapLines;\n\t\tconst oldLength = oldMinimapLines.length;\n\t\tconst result: number[] = [];\n\t\tlet oldIndex = 0;\n\t\tlet oldDeltaLineCount = 0;\n\t\tlet minViewLineNumber = 1;\n\t\tconst MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n\t\tlet events: SamplingStateEvent[] = [];\n\t\tlet lastEvent: SamplingStateEvent | null = null;\n\t\tfor (let i = 0; i < minimapLineCount; i++) {\n\t\t\tconst fromViewLineNumber = Math.max(\n\t\t\t\tminViewLineNumber,\n\t\t\t\tMath.round(i * ratio),\n\t\t\t);\n\t\t\tconst toViewLineNumber = Math.max(\n\t\t\t\tfromViewLineNumber,\n\t\t\t\tMath.round((i + 1) * ratio),\n\t\t\t);\n\n\t\t\twhile (\n\t\t\t\toldIndex < oldLength &&\n\t\t\t\toldMinimapLines[oldIndex] < fromViewLineNumber\n\t\t\t) {\n\t\t\t\tif (events.length < MAX_EVENT_COUNT) {\n\t\t\t\t\tconst oldMinimapLineNumber =\n\t\t\t\t\t\toldIndex + 1 + oldDeltaLineCount;\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastEvent &&\n\t\t\t\t\t\tlastEvent.type === \"deleted\" &&\n\t\t\t\t\t\tlastEvent._oldIndex === oldIndex - 1\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastEvent.deleteToLineNumber++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastEvent = {\n\t\t\t\t\t\t\ttype: \"deleted\",\n\t\t\t\t\t\t\t_oldIndex: oldIndex,\n\t\t\t\t\t\t\tdeleteFromLineNumber: oldMinimapLineNumber,\n\t\t\t\t\t\t\tdeleteToLineNumber: oldMinimapLineNumber,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tevents.push(lastEvent);\n\t\t\t\t\t}\n\t\t\t\t\toldDeltaLineCount--;\n\t\t\t\t}\n\t\t\t\toldIndex++;\n\t\t\t}\n\n\t\t\tlet selectedViewLineNumber: number;\n\t\t\tif (\n\t\t\t\toldIndex < oldLength &&\n\t\t\t\toldMinimapLines[oldIndex] <= toViewLineNumber\n\t\t\t) {\n\t\t\t\t// reuse the old sampled line\n\t\t\t\tselectedViewLineNumber = oldMinimapLines[oldIndex];\n\t\t\t\toldIndex++;\n\t\t\t} else {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tselectedViewLineNumber = 1;\n\t\t\t\t} else if (i + 1 === minimapLineCount) {\n\t\t\t\t\tselectedViewLineNumber = viewLineCount;\n\t\t\t\t} else {\n\t\t\t\t\tselectedViewLineNumber = Math.round(i * ratio + halfRatio);\n\t\t\t\t}\n\t\t\t\tif (events.length < MAX_EVENT_COUNT) {\n\t\t\t\t\tconst oldMinimapLineNumber =\n\t\t\t\t\t\toldIndex + 1 + oldDeltaLineCount;\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastEvent &&\n\t\t\t\t\t\tlastEvent.type === \"inserted\" &&\n\t\t\t\t\t\tlastEvent._i === i - 1\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastEvent.insertToLineNumber++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastEvent = {\n\t\t\t\t\t\t\ttype: \"inserted\",\n\t\t\t\t\t\t\t_i: i,\n\t\t\t\t\t\t\tinsertFromLineNumber: oldMinimapLineNumber,\n\t\t\t\t\t\t\tinsertToLineNumber: oldMinimapLineNumber,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tevents.push(lastEvent);\n\t\t\t\t\t}\n\t\t\t\t\toldDeltaLineCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[i] = selectedViewLineNumber;\n\t\t\tminViewLineNumber = selectedViewLineNumber;\n\t\t}\n\n\t\tif (events.length < MAX_EVENT_COUNT) {\n\t\t\twhile (oldIndex < oldLength) {\n\t\t\t\tconst oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n\t\t\t\tif (\n\t\t\t\t\tlastEvent &&\n\t\t\t\t\tlastEvent.type === \"deleted\" &&\n\t\t\t\t\tlastEvent._oldIndex === oldIndex - 1\n\t\t\t\t) {\n\t\t\t\t\tlastEvent.deleteToLineNumber++;\n\t\t\t\t} else {\n\t\t\t\t\tlastEvent = {\n\t\t\t\t\t\ttype: \"deleted\",\n\t\t\t\t\t\t_oldIndex: oldIndex,\n\t\t\t\t\t\tdeleteFromLineNumber: oldMinimapLineNumber,\n\t\t\t\t\t\tdeleteToLineNumber: oldMinimapLineNumber,\n\t\t\t\t\t};\n\t\t\t\t\tevents.push(lastEvent);\n\t\t\t\t}\n\t\t\t\toldDeltaLineCount--;\n\t\t\t\toldIndex++;\n\t\t\t}\n\t\t} else {\n\t\t\t// too many events, just give up\n\t\t\tevents = [{ type: \"flush\" }];\n\t\t}\n\n\t\treturn [new MinimapSamplingState(ratio, result), events];\n\t}\n\n\tconstructor(\n\t\tpublic readonly samplingRatio: number,\n\t\tpublic readonly minimapLines: number[], // a map of 0-based minimap line indexes to 1-based view line numbers\n\t) {}\n\n\tpublic modelLineToMinimapLine(lineNumber: number): number {\n\t\treturn Math.min(\n\t\t\tthis.minimapLines.length,\n\t\t\tMath.max(1, Math.round(lineNumber / this.samplingRatio)),\n\t\t);\n\t}\n\n\t/**\n\t * Will return null if the model line ranges are not intersecting with a sampled model line.\n\t */\n\tpublic modelLineRangeToMinimapLineRange(\n\t\tfromLineNumber: number,\n\t\ttoLineNumber: number,\n\t): [number, number] | null {\n\t\tlet fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n\t\twhile (\n\t\t\tfromLineIndex > 0 &&\n\t\t\tthis.minimapLines[fromLineIndex - 1] >= fromLineNumber\n\t\t) {\n\t\t\tfromLineIndex--;\n\t\t}\n\t\tlet toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n\t\twhile (\n\t\t\ttoLineIndex + 1 < this.minimapLines.length &&\n\t\t\tthis.minimapLines[toLineIndex + 1] <= toLineNumber\n\t\t) {\n\t\t\ttoLineIndex++;\n\t\t}\n\t\tif (fromLineIndex === toLineIndex) {\n\t\t\tconst sampledLineNumber = this.minimapLines[fromLineIndex];\n\t\t\tif (\n\t\t\t\tsampledLineNumber < fromLineNumber ||\n\t\t\t\tsampledLineNumber > toLineNumber\n\t\t\t) {\n\t\t\t\t// This line is not part of the sampled lines ==> nothing to do\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn [fromLineIndex + 1, toLineIndex + 1];\n\t}\n\n\t/**\n\t * Will always return a range, even if it is not intersecting with a sampled model line.\n\t */\n\tpublic decorationLineRangeToMinimapLineRange(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t): [number, number] {\n\t\tlet minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n\t\tlet minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n\t\tif (\n\t\t\tstartLineNumber !== endLineNumber &&\n\t\t\tminimapLineEnd === minimapLineStart\n\t\t) {\n\t\t\tif (minimapLineEnd === this.minimapLines.length) {\n\t\t\t\tif (minimapLineStart > 1) {\n\t\t\t\t\tminimapLineStart--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tminimapLineEnd++;\n\t\t\t}\n\t\t}\n\t\treturn [minimapLineStart, minimapLineEnd];\n\t}\n\n\tpublic onLinesDeleted(\n\t\te: viewEvents.ViewLinesDeletedEvent,\n\t): [number, number] {\n\t\t// have the mapping be sticky\n\t\tconst deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n\t\tlet changeStartIndex = this.minimapLines.length;\n\t\tlet changeEndIndex = 0;\n\t\tfor (let i = this.minimapLines.length - 1; i >= 0; i--) {\n\t\t\tif (this.minimapLines[i] < e.fromLineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.minimapLines[i] <= e.toLineNumber) {\n\t\t\t\t// this line got deleted => move to previous available\n\t\t\t\tthis.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n\t\t\t\tchangeStartIndex = Math.min(changeStartIndex, i);\n\t\t\t\tchangeEndIndex = Math.max(changeEndIndex, i);\n\t\t\t} else {\n\t\t\t\tthis.minimapLines[i] -= deletedLineCount;\n\t\t\t}\n\t\t}\n\t\treturn [changeStartIndex, changeEndIndex];\n\t}\n\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): void {\n\t\t// have the mapping be sticky\n\t\tconst insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n\t\tfor (let i = this.minimapLines.length - 1; i >= 0; i--) {\n\t\t\tif (this.minimapLines[i] < e.fromLineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.minimapLines[i] += insertedLineCount;\n\t\t}\n\t}\n}\n\n/**\n * The minimap appears beside the editor scroll bar and visualizes a zoomed out\n * view of the file.\n */\nexport class Minimap extends ViewPart implements IMinimapModel {\n\tpublic readonly tokensColorTracker: MinimapTokensColorTracker;\n\n\tprivate _selections: Selection[];\n\tprivate _minimapSelections: Selection[] | null;\n\n\tpublic options: MinimapOptions;\n\n\tprivate _samplingState: MinimapSamplingState | null;\n\tprivate _shouldCheckSampling: boolean;\n\n\tprivate _sectionHeaderCache = new LRUCache<string, string>(10, 1.5);\n\n\tprivate _actual: InnerMinimap;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n\n\t\tthis._selections = [];\n\t\tthis._minimapSelections = null;\n\n\t\tthis.options = new MinimapOptions(\n\t\t\tthis._context.configuration,\n\t\t\tthis._context.theme,\n\t\t\tthis.tokensColorTracker,\n\t\t);\n\t\tconst [samplingState] = MinimapSamplingState.compute(\n\t\t\tthis.options,\n\t\t\tthis._context.viewModel.getLineCount(),\n\t\t\tnull,\n\t\t);\n\t\tthis._samplingState = samplingState;\n\t\tthis._shouldCheckSampling = false;\n\n\t\tthis._actual = new InnerMinimap(context.theme, this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._actual.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this._actual.getDomNode();\n\t}\n\n\tprivate _onOptionsMaybeChanged(): boolean {\n\t\tconst opts = new MinimapOptions(\n\t\t\tthis._context.configuration,\n\t\t\tthis._context.theme,\n\t\t\tthis.tokensColorTracker,\n\t\t);\n\t\tif (this.options.equals(opts)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.options = opts;\n\t\tthis._recreateLineSampling();\n\t\tthis._actual.onDidChangeOptions();\n\t\treturn true;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic override onConfigurationChanged(\n\t\te: viewEvents.ViewConfigurationChangedEvent,\n\t): boolean {\n\t\treturn this._onOptionsMaybeChanged();\n\t}\n\tpublic override onCursorStateChanged(\n\t\te: viewEvents.ViewCursorStateChangedEvent,\n\t): boolean {\n\t\tthis._selections = e.selections;\n\t\tthis._minimapSelections = null;\n\t\treturn this._actual.onSelectionChanged();\n\t}\n\tpublic override onDecorationsChanged(\n\t\te: viewEvents.ViewDecorationsChangedEvent,\n\t): boolean {\n\t\tif (e.affectsMinimap) {\n\t\t\treturn this._actual.onDecorationsChanged();\n\t\t}\n\t\treturn false;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\tif (this._samplingState) {\n\t\t\tthis._shouldCheckSampling = true;\n\t\t}\n\t\treturn this._actual.onFlushed();\n\t}\n\tpublic override onLinesChanged(\n\t\te: viewEvents.ViewLinesChangedEvent,\n\t): boolean {\n\t\tif (this._samplingState) {\n\t\t\tconst minimapLineRange =\n\t\t\t\tthis._samplingState.modelLineRangeToMinimapLineRange(\n\t\t\t\t\te.fromLineNumber,\n\t\t\t\t\te.fromLineNumber + e.count - 1,\n\t\t\t\t);\n\t\t\tif (minimapLineRange) {\n\t\t\t\treturn this._actual.onLinesChanged(\n\t\t\t\t\tminimapLineRange[0],\n\t\t\t\t\tminimapLineRange[1] - minimapLineRange[0] + 1,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._actual.onLinesChanged(e.fromLineNumber, e.count);\n\t\t}\n\t}\n\tpublic override onLinesDeleted(\n\t\te: viewEvents.ViewLinesDeletedEvent,\n\t): boolean {\n\t\tif (this._samplingState) {\n\t\t\tconst [changeStartIndex, changeEndIndex] =\n\t\t\t\tthis._samplingState.onLinesDeleted(e);\n\t\t\tif (changeStartIndex <= changeEndIndex) {\n\t\t\t\tthis._actual.onLinesChanged(\n\t\t\t\t\tchangeStartIndex + 1,\n\t\t\t\t\tchangeEndIndex - changeStartIndex + 1,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._shouldCheckSampling = true;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this._actual.onLinesDeleted(\n\t\t\t\te.fromLineNumber,\n\t\t\t\te.toLineNumber,\n\t\t\t);\n\t\t}\n\t}\n\tpublic override onLinesInserted(\n\t\te: viewEvents.ViewLinesInsertedEvent,\n\t): boolean {\n\t\tif (this._samplingState) {\n\t\t\tthis._samplingState.onLinesInserted(e);\n\t\t\tthis._shouldCheckSampling = true;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this._actual.onLinesInserted(\n\t\t\t\te.fromLineNumber,\n\t\t\t\te.toLineNumber,\n\t\t\t);\n\t\t}\n\t}\n\tpublic override onScrollChanged(\n\t\te: viewEvents.ViewScrollChangedEvent,\n\t): boolean {\n\t\treturn this._actual.onScrollChanged();\n\t}\n\tpublic override onThemeChanged(\n\t\te: viewEvents.ViewThemeChangedEvent,\n\t): boolean {\n\t\tthis._actual.onThemeChanged();\n\t\tthis._onOptionsMaybeChanged();\n\t\treturn true;\n\t}\n\tpublic override onTokensChanged(\n\t\te: viewEvents.ViewTokensChangedEvent,\n\t): boolean {\n\t\tif (this._samplingState) {\n\t\t\tconst ranges: { fromLineNumber: number; toLineNumber: number }[] =\n\t\t\t\t[];\n\t\t\tfor (const range of e.ranges) {\n\t\t\t\tconst minimapLineRange =\n\t\t\t\t\tthis._samplingState.modelLineRangeToMinimapLineRange(\n\t\t\t\t\t\trange.fromLineNumber,\n\t\t\t\t\t\trange.toLineNumber,\n\t\t\t\t\t);\n\t\t\t\tif (minimapLineRange) {\n\t\t\t\t\tranges.push({\n\t\t\t\t\t\tfromLineNumber: minimapLineRange[0],\n\t\t\t\t\t\ttoLineNumber: minimapLineRange[1],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ranges.length) {\n\t\t\t\treturn this._actual.onTokensChanged(ranges);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._actual.onTokensChanged(e.ranges);\n\t\t}\n\t}\n\tpublic override onTokensColorsChanged(\n\t\te: viewEvents.ViewTokensColorsChangedEvent,\n\t): boolean {\n\t\tthis._onOptionsMaybeChanged();\n\t\treturn this._actual.onTokensColorsChanged();\n\t}\n\tpublic override onZonesChanged(\n\t\te: viewEvents.ViewZonesChangedEvent,\n\t): boolean {\n\t\treturn this._actual.onZonesChanged();\n\t}\n\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (this._shouldCheckSampling) {\n\t\t\tthis._shouldCheckSampling = false;\n\t\t\tthis._recreateLineSampling();\n\t\t}\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tlet viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tlet viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tif (this._samplingState) {\n\t\t\tviewportStartLineNumber =\n\t\t\t\tthis._samplingState.modelLineToMinimapLine(\n\t\t\t\t\tviewportStartLineNumber,\n\t\t\t\t);\n\t\t\tviewportEndLineNumber = this._samplingState.modelLineToMinimapLine(\n\t\t\t\tviewportEndLineNumber,\n\t\t\t);\n\t\t}\n\n\t\tconst minimapCtx: IMinimapRenderingContext = {\n\t\t\tviewportContainsWhitespaceGaps:\n\t\t\t\tctx.viewportData.whitespaceViewportData.length > 0,\n\n\t\t\tscrollWidth: ctx.scrollWidth,\n\t\t\tscrollHeight: ctx.scrollHeight,\n\n\t\t\tviewportStartLineNumber: viewportStartLineNumber,\n\t\t\tviewportEndLineNumber: viewportEndLineNumber,\n\t\t\tviewportStartLineNumberVerticalOffset:\n\t\t\t\tctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n\n\t\t\tscrollTop: ctx.scrollTop,\n\t\t\tscrollLeft: ctx.scrollLeft,\n\n\t\t\tviewportWidth: ctx.viewportWidth,\n\t\t\tviewportHeight: ctx.viewportHeight,\n\t\t};\n\t\tthis._actual.render(minimapCtx);\n\t}\n\n\t//#region IMinimapModel\n\n\tprivate _recreateLineSampling(): void {\n\t\tthis._minimapSelections = null;\n\n\t\tconst wasSampling = Boolean(this._samplingState);\n\t\tconst [samplingState, events] = MinimapSamplingState.compute(\n\t\t\tthis.options,\n\t\t\tthis._context.viewModel.getLineCount(),\n\t\t\tthis._samplingState,\n\t\t);\n\t\tthis._samplingState = samplingState;\n\n\t\tif (wasSampling && this._samplingState) {\n\t\t\t// was sampling, is sampling\n\t\t\tfor (const event of events) {\n\t\t\t\tswitch (event.type) {\n\t\t\t\t\tcase \"deleted\":\n\t\t\t\t\t\tthis._actual.onLinesDeleted(\n\t\t\t\t\t\t\tevent.deleteFromLineNumber,\n\t\t\t\t\t\t\tevent.deleteToLineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"inserted\":\n\t\t\t\t\t\tthis._actual.onLinesInserted(\n\t\t\t\t\t\t\tevent.insertFromLineNumber,\n\t\t\t\t\t\t\tevent.insertToLineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"flush\":\n\t\t\t\t\t\tthis._actual.onFlushed();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getLineCount(): number {\n\t\tif (this._samplingState) {\n\t\t\treturn this._samplingState.minimapLines.length;\n\t\t}\n\t\treturn this._context.viewModel.getLineCount();\n\t}\n\n\tpublic getRealLineCount(): number {\n\t\treturn this._context.viewModel.getLineCount();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\tif (this._samplingState) {\n\t\t\treturn this._context.viewModel.getLineContent(\n\t\t\t\tthis._samplingState.minimapLines[lineNumber - 1],\n\t\t\t);\n\t\t}\n\t\treturn this._context.viewModel.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\tif (this._samplingState) {\n\t\t\treturn this._context.viewModel.getLineMaxColumn(\n\t\t\t\tthis._samplingState.minimapLines[lineNumber - 1],\n\t\t\t);\n\t\t}\n\t\treturn this._context.viewModel.getLineMaxColumn(lineNumber);\n\t}\n\n\tpublic getMinimapLinesRenderingData(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tneeded: boolean[],\n\t): (ViewLineData | null)[] {\n\t\tif (this._samplingState) {\n\t\t\tconst result: (ViewLineData | null)[] = [];\n\t\t\tfor (\n\t\t\t\tlet lineIndex = 0,\n\t\t\t\t\tlineCount = endLineNumber - startLineNumber + 1;\n\t\t\t\tlineIndex < lineCount;\n\t\t\t\tlineIndex++\n\t\t\t) {\n\t\t\t\tif (needed[lineIndex]) {\n\t\t\t\t\tresult[lineIndex] = this._context.viewModel.getViewLineData(\n\t\t\t\t\t\tthis._samplingState.minimapLines[\n\t\t\t\t\t\t\tstartLineNumber + lineIndex - 1\n\t\t\t\t\t\t],\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresult[lineIndex] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn this._context.viewModel.getMinimapLinesRenderingData(\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t\tneeded,\n\t\t).data;\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\tif (this._minimapSelections === null) {\n\t\t\tif (this._samplingState) {\n\t\t\t\tthis._minimapSelections = [];\n\t\t\t\tfor (const selection of this._selections) {\n\t\t\t\t\tconst [minimapLineStart, minimapLineEnd] =\n\t\t\t\t\t\tthis._samplingState.decorationLineRangeToMinimapLineRange(\n\t\t\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t\t\tselection.endLineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._minimapSelections.push(\n\t\t\t\t\t\tnew Selection(\n\t\t\t\t\t\t\tminimapLineStart,\n\t\t\t\t\t\t\tselection.startColumn,\n\t\t\t\t\t\t\tminimapLineEnd,\n\t\t\t\t\t\t\tselection.endColumn,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._minimapSelections = this._selections;\n\t\t\t}\n\t\t}\n\t\treturn this._minimapSelections;\n\t}\n\n\tpublic getMinimapDecorationsInViewport(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t): ViewModelDecoration[] {\n\t\tconst decorations = this._getMinimapDecorationsInViewport(\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t).filter(\n\t\t\t(decoration) => !decoration.options.minimap?.sectionHeaderStyle,\n\t\t);\n\n\t\tif (this._samplingState) {\n\t\t\tconst result: ViewModelDecoration[] = [];\n\t\t\tfor (const decoration of decorations) {\n\t\t\t\tif (!decoration.options.minimap) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst range = decoration.range;\n\t\t\t\tconst minimapStartLineNumber =\n\t\t\t\t\tthis._samplingState.modelLineToMinimapLine(\n\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t);\n\t\t\t\tconst minimapEndLineNumber =\n\t\t\t\t\tthis._samplingState.modelLineToMinimapLine(\n\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t);\n\t\t\t\tresult.push(\n\t\t\t\t\tnew ViewModelDecoration(\n\t\t\t\t\t\tnew Range(\n\t\t\t\t\t\t\tminimapStartLineNumber,\n\t\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\t\tminimapEndLineNumber,\n\t\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdecoration.options,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn decorations;\n\t}\n\n\tpublic getSectionHeaderDecorationsInViewport(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t): ViewModelDecoration[] {\n\t\tconst minimapLineHeight = this.options.minimapLineHeight;\n\t\tconst sectionHeaderFontSize = this.options.sectionHeaderFontSize;\n\t\tconst headerHeightInMinimapLines =\n\t\t\tsectionHeaderFontSize / minimapLineHeight;\n\t\tstartLineNumber = Math.floor(\n\t\t\tMath.max(1, startLineNumber - headerHeightInMinimapLines),\n\t\t);\n\t\treturn this._getMinimapDecorationsInViewport(\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t).filter(\n\t\t\t(decoration) => !!decoration.options.minimap?.sectionHeaderStyle,\n\t\t);\n\t}\n\n\tprivate _getMinimapDecorationsInViewport(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t) {\n\t\tlet visibleRange: Range;\n\t\tif (this._samplingState) {\n\t\t\tconst modelStartLineNumber =\n\t\t\t\tthis._samplingState.minimapLines[startLineNumber - 1];\n\t\t\tconst modelEndLineNumber =\n\t\t\t\tthis._samplingState.minimapLines[endLineNumber - 1];\n\t\t\tvisibleRange = new Range(\n\t\t\t\tmodelStartLineNumber,\n\t\t\t\t1,\n\t\t\t\tmodelEndLineNumber,\n\t\t\t\tthis._context.viewModel.getLineMaxColumn(modelEndLineNumber),\n\t\t\t);\n\t\t} else {\n\t\t\tvisibleRange = new Range(\n\t\t\t\tstartLineNumber,\n\t\t\t\t1,\n\t\t\t\tendLineNumber,\n\t\t\t\tthis._context.viewModel.getLineMaxColumn(endLineNumber),\n\t\t\t);\n\t\t}\n\t\treturn this._context.viewModel.getMinimapDecorationsInRange(\n\t\t\tvisibleRange,\n\t\t);\n\t}\n\n\tpublic getSectionHeaderText(\n\t\tdecoration: ViewModelDecoration,\n\t\tfitWidth: (s: string) => string,\n\t): string | null {\n\t\tconst headerText = decoration.options.minimap?.sectionHeaderText;\n\t\tif (!headerText) {\n\t\t\treturn null;\n\t\t}\n\t\tconst cachedText = this._sectionHeaderCache.get(headerText);\n\t\tif (cachedText) {\n\t\t\treturn cachedText;\n\t\t}\n\t\tconst fittedText = fitWidth(headerText);\n\t\tthis._sectionHeaderCache.set(headerText, fittedText);\n\t\treturn fittedText;\n\t}\n\n\tpublic getOptions(): TextModelResolvedOptions {\n\t\treturn this._context.viewModel.model.getOptions();\n\t}\n\n\tpublic revealLineNumber(lineNumber: number): void {\n\t\tif (this._samplingState) {\n\t\t\tlineNumber = this._samplingState.minimapLines[lineNumber - 1];\n\t\t}\n\t\tthis._context.viewModel.revealRange(\n\t\t\t\"mouse\",\n\t\t\tfalse,\n\t\t\tnew Range(lineNumber, 1, lineNumber, 1),\n\t\t\tviewEvents.VerticalRevealType.Center,\n\t\t\tScrollType.Smooth,\n\t\t);\n\t}\n\n\tpublic setScrollTop(scrollTop: number): void {\n\t\tthis._context.viewModel.viewLayout.setScrollPosition(\n\t\t\t{\n\t\t\t\tscrollTop: scrollTop,\n\t\t\t},\n\t\t\tScrollType.Immediate,\n\t\t);\n\t}\n\n\t//#endregion\n}\n\nclass InnerMinimap extends Disposable {\n\tprivate readonly _theme: EditorTheme;\n\tprivate readonly _model: IMinimapModel;\n\n\tprivate readonly _domNode: FastDomNode<HTMLElement>;\n\tprivate readonly _shadow: FastDomNode<HTMLElement>;\n\tprivate readonly _canvas: FastDomNode<HTMLCanvasElement>;\n\tprivate readonly _decorationsCanvas: FastDomNode<HTMLCanvasElement>;\n\tprivate readonly _slider: FastDomNode<HTMLElement>;\n\tprivate readonly _sliderHorizontal: FastDomNode<HTMLElement>;\n\tprivate readonly _pointerDownListener: IDisposable;\n\tprivate readonly _sliderPointerMoveMonitor: GlobalPointerMoveMonitor;\n\tprivate readonly _sliderPointerDownListener: IDisposable;\n\tprivate readonly _gestureDisposable: IDisposable;\n\tprivate readonly _sliderTouchStartListener: IDisposable;\n\tprivate readonly _sliderTouchMoveListener: IDisposable;\n\tprivate readonly _sliderTouchEndListener: IDisposable;\n\n\tprivate _lastRenderData: RenderData | null;\n\tprivate _selectionColor: Color | undefined;\n\tprivate _renderDecorations = false;\n\tprivate _gestureInProgress = false;\n\tprivate _buffers: MinimapBuffers | null;\n\n\tconstructor(theme: EditorTheme, model: IMinimapModel) {\n\t\tsuper();\n\n\t\tthis._theme = theme;\n\t\tthis._model = model;\n\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\tthis._selectionColor = this._theme.getColor(minimapSelection);\n\n\t\tthis._domNode = createFastDomNode(document.createElement(\"div\"));\n\t\tPartFingerprints.write(this._domNode, PartFingerprint.Minimap);\n\t\tthis._domNode.setClassName(this._getMinimapDomNodeClassName());\n\t\tthis._domNode.setPosition(\"absolute\");\n\t\tthis._domNode.setAttribute(\"role\", \"presentation\");\n\t\tthis._domNode.setAttribute(\"aria-hidden\", \"true\");\n\n\t\tthis._shadow = createFastDomNode(document.createElement(\"div\"));\n\t\tthis._shadow.setClassName(\"minimap-shadow-hidden\");\n\t\tthis._domNode.appendChild(this._shadow);\n\n\t\tthis._canvas = createFastDomNode(document.createElement(\"canvas\"));\n\t\tthis._canvas.setPosition(\"absolute\");\n\t\tthis._canvas.setLeft(0);\n\t\tthis._domNode.appendChild(this._canvas);\n\n\t\tthis._decorationsCanvas = createFastDomNode(\n\t\t\tdocument.createElement(\"canvas\"),\n\t\t);\n\t\tthis._decorationsCanvas.setPosition(\"absolute\");\n\t\tthis._decorationsCanvas.setClassName(\"minimap-decorations-layer\");\n\t\tthis._decorationsCanvas.setLeft(0);\n\t\tthis._domNode.appendChild(this._decorationsCanvas);\n\n\t\tthis._slider = createFastDomNode(document.createElement(\"div\"));\n\t\tthis._slider.setPosition(\"absolute\");\n\t\tthis._slider.setClassName(\"minimap-slider\");\n\t\tthis._slider.setLayerHinting(true);\n\t\tthis._slider.setContain(\"strict\");\n\t\tthis._domNode.appendChild(this._slider);\n\n\t\tthis._sliderHorizontal = createFastDomNode(\n\t\t\tdocument.createElement(\"div\"),\n\t\t);\n\t\tthis._sliderHorizontal.setPosition(\"absolute\");\n\t\tthis._sliderHorizontal.setClassName(\"minimap-slider-horizontal\");\n\t\tthis._slider.appendChild(this._sliderHorizontal);\n\n\t\tthis._applyLayout();\n\n\t\tthis._pointerDownListener = dom.addStandardDisposableListener(\n\t\t\tthis._domNode.domNode,\n\t\t\tdom.EventType.POINTER_DOWN,\n\t\t\t(e) => {\n\t\t\t\te.preventDefault();\n\n\t\t\t\tconst renderMinimap = this._model.options.renderMinimap;\n\t\t\t\tif (renderMinimap === RenderMinimap.None) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this._lastRenderData) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this._model.options.size !== \"proportional\") {\n\t\t\t\t\tif (e.button === 0 && this._lastRenderData) {\n\t\t\t\t\t\t// pretend the click occurred in the center of the slider\n\t\t\t\t\t\tconst position = dom.getDomNodePagePosition(\n\t\t\t\t\t\t\tthis._slider.domNode,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst initialPosY = position.top + position.height / 2;\n\t\t\t\t\t\tthis._startSliderDragging(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\tinitialPosY,\n\t\t\t\t\t\t\tthis._lastRenderData.renderedLayout,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\t\t\t\tconst internalOffsetY =\n\t\t\t\t\t(this._model.options.canvasInnerHeight /\n\t\t\t\t\t\tthis._model.options.canvasOuterHeight) *\n\t\t\t\t\te.offsetY;\n\t\t\t\tconst lineIndex = Math.floor(\n\t\t\t\t\tinternalOffsetY / minimapLineHeight,\n\t\t\t\t);\n\n\t\t\t\tlet lineNumber =\n\t\t\t\t\tlineIndex +\n\t\t\t\t\tthis._lastRenderData.renderedLayout.startLineNumber -\n\t\t\t\t\tthis._lastRenderData.renderedLayout.topPaddingLineCount;\n\t\t\t\tlineNumber = Math.min(lineNumber, this._model.getLineCount());\n\n\t\t\t\tthis._model.revealLineNumber(lineNumber);\n\t\t\t},\n\t\t);\n\n\t\tthis._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n\n\t\tthis._sliderPointerDownListener = dom.addStandardDisposableListener(\n\t\t\tthis._slider.domNode,\n\t\t\tdom.EventType.POINTER_DOWN,\n\t\t\t(e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tif (e.button === 0 && this._lastRenderData) {\n\t\t\t\t\tthis._startSliderDragging(\n\t\t\t\t\t\te,\n\t\t\t\t\t\te.pageY,\n\t\t\t\t\t\tthis._lastRenderData.renderedLayout,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tthis._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n\t\tthis._sliderTouchStartListener = dom.addDisposableListener(\n\t\t\tthis._domNode.domNode,\n\t\t\tEventType.Start,\n\t\t\t(e: GestureEvent) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tif (this._lastRenderData) {\n\t\t\t\t\tthis._slider.toggleClassName(\"active\", true);\n\t\t\t\t\tthis._gestureInProgress = true;\n\t\t\t\t\tthis.scrollDueToTouchEvent(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ passive: false },\n\t\t);\n\n\t\tthis._sliderTouchMoveListener = dom.addDisposableListener(\n\t\t\tthis._domNode.domNode,\n\t\t\tEventType.Change,\n\t\t\t(e: GestureEvent) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tif (this._lastRenderData && this._gestureInProgress) {\n\t\t\t\t\tthis.scrollDueToTouchEvent(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ passive: false },\n\t\t);\n\n\t\tthis._sliderTouchEndListener = dom.addStandardDisposableListener(\n\t\t\tthis._domNode.domNode,\n\t\t\tEventType.End,\n\t\t\t(e: GestureEvent) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tthis._gestureInProgress = false;\n\t\t\t\tthis._slider.toggleClassName(\"active\", false);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate _startSliderDragging(\n\t\te: PointerEvent,\n\t\tinitialPosY: number,\n\t\tinitialSliderState: MinimapLayout,\n\t): void {\n\t\tif (!e.target || !(e.target instanceof Element)) {\n\t\t\treturn;\n\t\t}\n\t\tconst initialPosX = e.pageX;\n\n\t\tthis._slider.toggleClassName(\"active\", true);\n\n\t\tconst handlePointerMove = (posy: number, posx: number) => {\n\t\t\tconst minimapPosition = dom.getDomNodePagePosition(\n\t\t\t\tthis._domNode.domNode,\n\t\t\t);\n\t\t\tconst pointerOrthogonalDelta = Math.min(\n\t\t\t\tMath.abs(posx - initialPosX),\n\t\t\t\tMath.abs(posx - minimapPosition.left),\n\t\t\t\tMath.abs(posx - minimapPosition.left - minimapPosition.width),\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tplatform.isWindows &&\n\t\t\t\tpointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE\n\t\t\t) {\n\t\t\t\t// The pointer has wondered away from the scrollbar => reset dragging\n\t\t\t\tthis._model.setScrollTop(initialSliderState.scrollTop);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pointerDelta = posy - initialPosY;\n\t\t\tthis._model.setScrollTop(\n\t\t\t\tinitialSliderState.getDesiredScrollTopFromDelta(pointerDelta),\n\t\t\t);\n\t\t};\n\n\t\tif (e.pageY !== initialPosY) {\n\t\t\thandlePointerMove(e.pageY, initialPosX);\n\t\t}\n\n\t\tthis._sliderPointerMoveMonitor.startMonitoring(\n\t\t\te.target,\n\t\t\te.pointerId,\n\t\t\te.buttons,\n\t\t\t(pointerMoveData) =>\n\t\t\t\thandlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX),\n\t\t\t() => {\n\t\t\t\tthis._slider.toggleClassName(\"active\", false);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate scrollDueToTouchEvent(touch: GestureEvent) {\n\t\tconst startY = this._domNode.domNode.getBoundingClientRect().top;\n\t\tconst scrollTop =\n\t\t\tthis._lastRenderData!.renderedLayout.getDesiredScrollTopFromTouchLocation(\n\t\t\t\ttouch.pageY - startY,\n\t\t\t);\n\t\tthis._model.setScrollTop(scrollTop);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._pointerDownListener.dispose();\n\t\tthis._sliderPointerMoveMonitor.dispose();\n\t\tthis._sliderPointerDownListener.dispose();\n\t\tthis._gestureDisposable.dispose();\n\t\tthis._sliderTouchStartListener.dispose();\n\t\tthis._sliderTouchMoveListener.dispose();\n\t\tthis._sliderTouchEndListener.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tprivate _getMinimapDomNodeClassName(): string {\n\t\tconst class_ = [\"minimap\"];\n\t\tif (this._model.options.showSlider === \"always\") {\n\t\t\tclass_.push(\"slider-always\");\n\t\t} else {\n\t\t\tclass_.push(\"slider-mouseover\");\n\t\t}\n\t\tif (this._model.options.autohide) {\n\t\t\tclass_.push(\"autohide\");\n\t\t}\n\n\t\treturn class_.join(\" \");\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this._domNode;\n\t}\n\n\tprivate _applyLayout(): void {\n\t\tthis._domNode.setLeft(this._model.options.minimapLeft);\n\t\tthis._domNode.setWidth(this._model.options.minimapWidth);\n\t\tthis._domNode.setHeight(this._model.options.minimapHeight);\n\t\tthis._shadow.setHeight(this._model.options.minimapHeight);\n\n\t\tthis._canvas.setWidth(this._model.options.canvasOuterWidth);\n\t\tthis._canvas.setHeight(this._model.options.canvasOuterHeight);\n\t\tthis._canvas.domNode.width = this._model.options.canvasInnerWidth;\n\t\tthis._canvas.domNode.height = this._model.options.canvasInnerHeight;\n\n\t\tthis._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n\t\tthis._decorationsCanvas.setHeight(\n\t\t\tthis._model.options.canvasOuterHeight,\n\t\t);\n\t\tthis._decorationsCanvas.domNode.width =\n\t\t\tthis._model.options.canvasInnerWidth;\n\t\tthis._decorationsCanvas.domNode.height =\n\t\t\tthis._model.options.canvasInnerHeight;\n\n\t\tthis._slider.setWidth(this._model.options.minimapWidth);\n\t}\n\n\tprivate _getBuffer(): ImageData | null {\n\t\tif (!this._buffers) {\n\t\t\tif (\n\t\t\t\tthis._model.options.canvasInnerWidth > 0 &&\n\t\t\t\tthis._model.options.canvasInnerHeight > 0\n\t\t\t) {\n\t\t\t\tthis._buffers = new MinimapBuffers(\n\t\t\t\t\tthis._canvas.domNode.getContext(\"2d\")!,\n\t\t\t\t\tthis._model.options.canvasInnerWidth,\n\t\t\t\t\tthis._model.options.canvasInnerHeight,\n\t\t\t\t\tthis._model.options.backgroundColor,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn this._buffers ? this._buffers.getBuffer() : null;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onDidChangeOptions(): void {\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\tthis._applyLayout();\n\t\tthis._domNode.setClassName(this._getMinimapDomNodeClassName());\n\t}\n\tpublic onSelectionChanged(): boolean {\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(): boolean {\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onFlushed(): boolean {\n\t\tthis._lastRenderData = null;\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(\n\t\tchangeFromLineNumber: number,\n\t\tchangeCount: number,\n\t): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\treturn this._lastRenderData.onLinesChanged(\n\t\t\t\tchangeFromLineNumber,\n\t\t\t\tchangeCount,\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onLinesDeleted(\n\t\tdeleteFromLineNumber: number,\n\t\tdeleteToLineNumber: number,\n\t): boolean {\n\t\tthis._lastRenderData?.onLinesDeleted(\n\t\t\tdeleteFromLineNumber,\n\t\t\tdeleteToLineNumber,\n\t\t);\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(\n\t\tinsertFromLineNumber: number,\n\t\tinsertToLineNumber: number,\n\t): boolean {\n\t\tthis._lastRenderData?.onLinesInserted(\n\t\t\tinsertFromLineNumber,\n\t\t\tinsertToLineNumber,\n\t\t);\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(): boolean {\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onThemeChanged(): boolean {\n\t\tthis._selectionColor = this._theme.getColor(minimapSelection);\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onTokensChanged(\n\t\tranges: { fromLineNumber: number; toLineNumber: number }[],\n\t): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\treturn this._lastRenderData.onTokensChanged(ranges);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onTokensColorsChanged(): boolean {\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\treturn true;\n\t}\n\tpublic onZonesChanged(): boolean {\n\t\tthis._lastRenderData = null;\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tpublic render(renderingCtx: IMinimapRenderingContext): void {\n\t\tconst renderMinimap = this._model.options.renderMinimap;\n\t\tif (renderMinimap === RenderMinimap.None) {\n\t\t\tthis._shadow.setClassName(\"minimap-shadow-hidden\");\n\t\t\tthis._sliderHorizontal.setWidth(0);\n\t\t\tthis._sliderHorizontal.setHeight(0);\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\trenderingCtx.scrollLeft + renderingCtx.viewportWidth >=\n\t\t\trenderingCtx.scrollWidth\n\t\t) {\n\t\t\tthis._shadow.setClassName(\"minimap-shadow-hidden\");\n\t\t} else {\n\t\t\tthis._shadow.setClassName(\"minimap-shadow-visible\");\n\t\t}\n\n\t\tconst layout = MinimapLayout.create(\n\t\t\tthis._model.options,\n\t\t\trenderingCtx.viewportStartLineNumber,\n\t\t\trenderingCtx.viewportEndLineNumber,\n\t\t\trenderingCtx.viewportStartLineNumberVerticalOffset,\n\t\t\trenderingCtx.viewportHeight,\n\t\t\trenderingCtx.viewportContainsWhitespaceGaps,\n\t\t\tthis._model.getLineCount(),\n\t\t\tthis._model.getRealLineCount(),\n\t\t\trenderingCtx.scrollTop,\n\t\t\trenderingCtx.scrollHeight,\n\t\t\tthis._lastRenderData ? this._lastRenderData.renderedLayout : null,\n\t\t);\n\t\tthis._slider.setDisplay(layout.sliderNeeded ? \"block\" : \"none\");\n\t\tthis._slider.setTop(layout.sliderTop);\n\t\tthis._slider.setHeight(layout.sliderHeight);\n\n\t\t// Compute horizontal slider coordinates\n\t\tthis._sliderHorizontal.setLeft(0);\n\t\tthis._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n\t\tthis._sliderHorizontal.setTop(0);\n\t\tthis._sliderHorizontal.setHeight(layout.sliderHeight);\n\n\t\tthis.renderDecorations(layout);\n\t\tthis._lastRenderData = this.renderLines(layout);\n\t}\n\n\tprivate renderDecorations(layout: MinimapLayout) {\n\t\tif (this._renderDecorations) {\n\t\t\tthis._renderDecorations = false;\n\t\t\tconst selections = this._model.getSelections();\n\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\tconst decorations = this._model.getMinimapDecorationsInViewport(\n\t\t\t\tlayout.startLineNumber,\n\t\t\t\tlayout.endLineNumber,\n\t\t\t);\n\t\t\tdecorations.sort(\n\t\t\t\t(a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0),\n\t\t\t);\n\n\t\t\tconst { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n\t\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\t\t\tconst minimapCharWidth = this._model.options.minimapCharWidth;\n\t\t\tconst tabSize = this._model.getOptions().tabSize;\n\t\t\tconst canvasContext =\n\t\t\t\tthis._decorationsCanvas.domNode.getContext(\"2d\")!;\n\n\t\t\tcanvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n\n\t\t\t// We first need to render line highlights and then render decorations on top of those.\n\t\t\t// But we need to pick a single color for each line, and use that as a line highlight.\n\t\t\t// This needs to be the color of the decoration with the highest `zIndex`, but priority\n\t\t\t// is given to the selection.\n\n\t\t\tconst highlightedLines = new ContiguousLineMap<boolean>(\n\t\t\t\tlayout.startLineNumber,\n\t\t\t\tlayout.endLineNumber,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis._renderSelectionLineHighlights(\n\t\t\t\tcanvasContext,\n\t\t\t\tselections,\n\t\t\t\thighlightedLines,\n\t\t\t\tlayout,\n\t\t\t\tminimapLineHeight,\n\t\t\t);\n\t\t\tthis._renderDecorationsLineHighlights(\n\t\t\t\tcanvasContext,\n\t\t\t\tdecorations,\n\t\t\t\thighlightedLines,\n\t\t\t\tlayout,\n\t\t\t\tminimapLineHeight,\n\t\t\t);\n\n\t\t\tconst lineOffsetMap = new ContiguousLineMap<number[] | null>(\n\t\t\t\tlayout.startLineNumber,\n\t\t\t\tlayout.endLineNumber,\n\t\t\t\tnull,\n\t\t\t);\n\t\t\tthis._renderSelectionsHighlights(\n\t\t\t\tcanvasContext,\n\t\t\t\tselections,\n\t\t\t\tlineOffsetMap,\n\t\t\t\tlayout,\n\t\t\t\tminimapLineHeight,\n\t\t\t\ttabSize,\n\t\t\t\tminimapCharWidth,\n\t\t\t\tcanvasInnerWidth,\n\t\t\t);\n\t\t\tthis._renderDecorationsHighlights(\n\t\t\t\tcanvasContext,\n\t\t\t\tdecorations,\n\t\t\t\tlineOffsetMap,\n\t\t\t\tlayout,\n\t\t\t\tminimapLineHeight,\n\t\t\t\ttabSize,\n\t\t\t\tminimapCharWidth,\n\t\t\t\tcanvasInnerWidth,\n\t\t\t);\n\t\t\tthis._renderSectionHeaders(layout);\n\t\t}\n\t}\n\n\tprivate _renderSelectionLineHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tselections: Selection[],\n\t\thighlightedLines: ContiguousLineMap<boolean>,\n\t\tlayout: MinimapLayout,\n\t\tminimapLineHeight: number,\n\t): void {\n\t\tif (!this._selectionColor || this._selectionColor.isTransparent()) {\n\t\t\treturn;\n\t\t}\n\n\t\tcanvasContext.fillStyle = this._selectionColor\n\t\t\t.transparent(0.5)\n\t\t\t.toString();\n\n\t\tlet y1 = 0;\n\t\tlet y2 = 0;\n\n\t\tfor (const selection of selections) {\n\t\t\tconst intersection = layout.intersectWithViewport(selection);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\thighlightedLines.set(line, true);\n\t\t\t}\n\n\t\t\tconst yy1 = layout.getYForLineNumber(\n\t\t\t\tstartLineNumber,\n\t\t\t\tminimapLineHeight,\n\t\t\t);\n\t\t\tconst yy2 = layout.getYForLineNumber(\n\t\t\t\tendLineNumber,\n\t\t\t\tminimapLineHeight,\n\t\t\t);\n\n\t\t\tif (y2 >= yy1) {\n\t\t\t\t// merge into previous\n\t\t\t\ty2 = yy2;\n\t\t\t} else {\n\t\t\t\tif (y2 > y1) {\n\t\t\t\t\t// flush\n\t\t\t\t\tcanvasContext.fillRect(\n\t\t\t\t\t\tMINIMAP_GUTTER_WIDTH,\n\t\t\t\t\t\ty1,\n\t\t\t\t\t\tcanvasContext.canvas.width,\n\t\t\t\t\t\ty2 - y1,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\ty1 = yy1;\n\t\t\t\ty2 = yy2;\n\t\t\t}\n\t\t}\n\n\t\tif (y2 > y1) {\n\t\t\t// flush\n\t\t\tcanvasContext.fillRect(\n\t\t\t\tMINIMAP_GUTTER_WIDTH,\n\t\t\t\ty1,\n\t\t\t\tcanvasContext.canvas.width,\n\t\t\t\ty2 - y1,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _renderDecorationsLineHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tdecorations: ViewModelDecoration[],\n\t\thighlightedLines: ContiguousLineMap<boolean>,\n\t\tlayout: MinimapLayout,\n\t\tminimapLineHeight: number,\n\t): void {\n\t\tconst highlightColors = new Map<string, string>();\n\n\t\t// Loop backwards to hit first decorations with higher `zIndex`\n\t\tfor (let i = decorations.length - 1; i >= 0; i--) {\n\t\t\tconst decoration = decorations[i];\n\n\t\t\tconst minimapOptions = <\n\t\t\t\tModelDecorationMinimapOptions | null | undefined\n\t\t\t>decoration.options.minimap;\n\t\t\tif (\n\t\t\t\t!minimapOptions ||\n\t\t\t\tminimapOptions.position !== MinimapPosition.Inline\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst intersection = layout.intersectWithViewport(decoration.range);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tconst decorationColor = minimapOptions.getColor(this._theme.value);\n\t\t\tif (!decorationColor || decorationColor.isTransparent()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet highlightColor = highlightColors.get(\n\t\t\t\tdecorationColor.toString(),\n\t\t\t);\n\t\t\tif (!highlightColor) {\n\t\t\t\thighlightColor = decorationColor.transparent(0.5).toString();\n\t\t\t\thighlightColors.set(decorationColor.toString(), highlightColor);\n\t\t\t}\n\n\t\t\tcanvasContext.fillStyle = highlightColor;\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\tif (highlightedLines.has(line)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\thighlightedLines.set(line, true);\n\t\t\t\tconst y = layout.getYForLineNumber(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tminimapLineHeight,\n\t\t\t\t);\n\t\t\t\tcanvasContext.fillRect(\n\t\t\t\t\tMINIMAP_GUTTER_WIDTH,\n\t\t\t\t\ty,\n\t\t\t\t\tcanvasContext.canvas.width,\n\t\t\t\t\tminimapLineHeight,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderSelectionsHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tselections: Selection[],\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tlayout: MinimapLayout,\n\t\tlineHeight: number,\n\t\ttabSize: number,\n\t\tcharacterWidth: number,\n\t\tcanvasInnerWidth: number,\n\t): void {\n\t\tif (!this._selectionColor || this._selectionColor.isTransparent()) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const selection of selections) {\n\t\t\tconst intersection = layout.intersectWithViewport(selection);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\tthis.renderDecorationOnLine(\n\t\t\t\t\tcanvasContext,\n\t\t\t\t\tlineOffsetMap,\n\t\t\t\t\tselection,\n\t\t\t\t\tthis._selectionColor,\n\t\t\t\t\tlayout,\n\t\t\t\t\tline,\n\t\t\t\t\tlineHeight,\n\t\t\t\t\tlineHeight,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tcharacterWidth,\n\t\t\t\t\tcanvasInnerWidth,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderDecorationsHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tdecorations: ViewModelDecoration[],\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tlayout: MinimapLayout,\n\t\tminimapLineHeight: number,\n\t\ttabSize: number,\n\t\tcharacterWidth: number,\n\t\tcanvasInnerWidth: number,\n\t): void {\n\t\t// Loop forwards to hit first decorations with lower `zIndex`\n\t\tfor (const decoration of decorations) {\n\t\t\tconst minimapOptions = <\n\t\t\t\tModelDecorationMinimapOptions | null | undefined\n\t\t\t>decoration.options.minimap;\n\t\t\tif (!minimapOptions) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst intersection = layout.intersectWithViewport(decoration.range);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tconst decorationColor = minimapOptions.getColor(this._theme.value);\n\t\t\tif (!decorationColor || decorationColor.isTransparent()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\tswitch (minimapOptions.position) {\n\t\t\t\t\tcase MinimapPosition.Inline:\n\t\t\t\t\t\tthis.renderDecorationOnLine(\n\t\t\t\t\t\t\tcanvasContext,\n\t\t\t\t\t\t\tlineOffsetMap,\n\t\t\t\t\t\t\tdecoration.range,\n\t\t\t\t\t\t\tdecorationColor,\n\t\t\t\t\t\t\tlayout,\n\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t\tminimapLineHeight,\n\t\t\t\t\t\t\tminimapLineHeight,\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\tcharacterWidth,\n\t\t\t\t\t\t\tcanvasInnerWidth,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase MinimapPosition.Gutter: {\n\t\t\t\t\t\tconst y = layout.getYForLineNumber(\n\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t\tminimapLineHeight,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst x = 2;\n\t\t\t\t\t\tthis.renderDecoration(\n\t\t\t\t\t\t\tcanvasContext,\n\t\t\t\t\t\t\tdecorationColor,\n\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\tGUTTER_DECORATION_WIDTH,\n\t\t\t\t\t\t\tminimapLineHeight,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderDecorationOnLine(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tdecorationRange: Range,\n\t\tdecorationColor: Color | undefined,\n\t\tlayout: MinimapLayout,\n\t\tlineNumber: number,\n\t\theight: number,\n\t\tminimapLineHeight: number,\n\t\ttabSize: number,\n\t\tcharWidth: number,\n\t\tcanvasInnerWidth: number,\n\t): void {\n\t\tconst y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n\n\t\t// Skip rendering the line if it's vertically outside our viewport\n\t\tif (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { startLineNumber, endLineNumber } = decorationRange;\n\t\tconst startColumn =\n\t\t\tstartLineNumber === lineNumber ? decorationRange.startColumn : 1;\n\t\tconst endColumn =\n\t\t\tendLineNumber === lineNumber\n\t\t\t\t? decorationRange.endColumn\n\t\t\t\t: this._model.getLineMaxColumn(lineNumber);\n\n\t\tconst x1 = this.getXOffsetForPosition(\n\t\t\tlineOffsetMap,\n\t\t\tlineNumber,\n\t\t\tstartColumn,\n\t\t\ttabSize,\n\t\t\tcharWidth,\n\t\t\tcanvasInnerWidth,\n\t\t);\n\t\tconst x2 = this.getXOffsetForPosition(\n\t\t\tlineOffsetMap,\n\t\t\tlineNumber,\n\t\t\tendColumn,\n\t\t\ttabSize,\n\t\t\tcharWidth,\n\t\t\tcanvasInnerWidth,\n\t\t);\n\n\t\tthis.renderDecoration(\n\t\t\tcanvasContext,\n\t\t\tdecorationColor,\n\t\t\tx1,\n\t\t\ty,\n\t\t\tx2 - x1,\n\t\t\theight,\n\t\t);\n\t}\n\n\tprivate getXOffsetForPosition(\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\ttabSize: number,\n\t\tcharWidth: number,\n\t\tcanvasInnerWidth: number,\n\t): number {\n\t\tif (column === 1) {\n\t\t\treturn MINIMAP_GUTTER_WIDTH;\n\t\t}\n\n\t\tconst minimumXOffset = (column - 1) * charWidth;\n\t\tif (minimumXOffset >= canvasInnerWidth) {\n\t\t\t// there is no need to look at actual characters,\n\t\t\t// as this column is certainly after the minimap width\n\t\t\treturn canvasInnerWidth;\n\t\t}\n\n\t\t// Cache line offset data so that it is only read once per line\n\t\tlet lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n\t\tif (!lineIndexToXOffset) {\n\t\t\tconst lineData = this._model.getLineContent(lineNumber);\n\t\t\tlineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n\t\t\tlet prevx = MINIMAP_GUTTER_WIDTH;\n\t\t\tfor (let i = 1; i < lineData.length + 1; i++) {\n\t\t\t\tconst charCode = lineData.charCodeAt(i - 1);\n\t\t\t\tconst dx =\n\t\t\t\t\tcharCode === CharCode.Tab\n\t\t\t\t\t\t? tabSize * charWidth\n\t\t\t\t\t\t: strings.isFullWidthCharacter(charCode)\n\t\t\t\t\t\t\t? 2 * charWidth\n\t\t\t\t\t\t\t: charWidth;\n\n\t\t\t\tconst x = prevx + dx;\n\t\t\t\tif (x >= canvasInnerWidth) {\n\t\t\t\t\t// no need to keep on going, as we've hit the canvas width\n\t\t\t\t\tlineIndexToXOffset[i] = canvasInnerWidth;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlineIndexToXOffset[i] = x;\n\t\t\t\tprevx = x;\n\t\t\t}\n\n\t\t\tlineOffsetMap.set(lineNumber, lineIndexToXOffset);\n\t\t}\n\n\t\tif (column - 1 < lineIndexToXOffset.length) {\n\t\t\treturn lineIndexToXOffset[column - 1];\n\t\t}\n\t\t// goes over the canvas width\n\t\treturn canvasInnerWidth;\n\t}\n\n\tprivate renderDecoration(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tdecorationColor: Color | undefined,\n\t\tx: number,\n\t\ty: number,\n\t\twidth: number,\n\t\theight: number,\n\t) {\n\t\tcanvasContext.fillStyle =\n\t\t\t(decorationColor && decorationColor.toString()) || \"\";\n\t\tcanvasContext.fillRect(x, y, width, height);\n\t}\n\n\tprivate _renderSectionHeaders(layout: MinimapLayout) {\n\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\t\tconst sectionHeaderFontSize = this._model.options.sectionHeaderFontSize;\n\t\tconst sectionHeaderLetterSpacing =\n\t\t\tthis._model.options.sectionHeaderLetterSpacing;\n\t\tconst backgroundFillHeight = sectionHeaderFontSize * 1.5;\n\t\tconst { canvasInnerWidth } = this._model.options;\n\n\t\tconst backgroundColor = this._model.options.backgroundColor;\n\t\tconst backgroundFill = `rgb(${backgroundColor.r} ${backgroundColor.g} ${backgroundColor.b} / .7)`;\n\t\tconst foregroundColor = this._model.options.sectionHeaderFontColor;\n\t\tconst foregroundFill = `rgb(${foregroundColor.r} ${foregroundColor.g} ${foregroundColor.b})`;\n\t\tconst separatorStroke = foregroundFill;\n\n\t\tconst canvasContext = this._decorationsCanvas.domNode.getContext(\"2d\")!;\n\t\tcanvasContext.letterSpacing = sectionHeaderLetterSpacing + \"px\";\n\t\tcanvasContext.font =\n\t\t\t\"500 \" +\n\t\t\tsectionHeaderFontSize +\n\t\t\t\"px \" +\n\t\t\tthis._model.options.sectionHeaderFontFamily;\n\t\tcanvasContext.strokeStyle = separatorStroke;\n\t\tcanvasContext.lineWidth = 0.2;\n\n\t\tconst decorations = this._model.getSectionHeaderDecorationsInViewport(\n\t\t\tlayout.startLineNumber,\n\t\t\tlayout.endLineNumber,\n\t\t);\n\t\tdecorations.sort(\n\t\t\t(a, b) => a.range.startLineNumber - b.range.startLineNumber,\n\t\t);\n\n\t\tconst fitWidth = InnerMinimap._fitSectionHeader.bind(\n\t\t\tnull,\n\t\t\tcanvasContext,\n\t\t\tcanvasInnerWidth - MINIMAP_GUTTER_WIDTH,\n\t\t);\n\n\t\tfor (const decoration of decorations) {\n\t\t\tconst y =\n\t\t\t\tlayout.getYForLineNumber(\n\t\t\t\t\tdecoration.range.startLineNumber,\n\t\t\t\t\tminimapLineHeight,\n\t\t\t\t) + sectionHeaderFontSize;\n\t\t\tconst backgroundFillY = y - sectionHeaderFontSize;\n\t\t\tconst separatorY = backgroundFillY + 2;\n\t\t\tconst headerText = this._model.getSectionHeaderText(\n\t\t\t\tdecoration,\n\t\t\t\tfitWidth,\n\t\t\t);\n\n\t\t\tInnerMinimap._renderSectionLabel(\n\t\t\t\tcanvasContext,\n\t\t\t\theaderText,\n\t\t\t\tdecoration.options.minimap?.sectionHeaderStyle ===\n\t\t\t\t\tMinimapSectionHeaderStyle.Underlined,\n\t\t\t\tbackgroundFill,\n\t\t\t\tforegroundFill,\n\t\t\t\tcanvasInnerWidth,\n\t\t\t\tbackgroundFillY,\n\t\t\t\tbackgroundFillHeight,\n\t\t\t\ty,\n\t\t\t\tseparatorY,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _fitSectionHeader(\n\t\ttarget: CanvasRenderingContext2D,\n\t\tmaxWidth: number,\n\t\theaderText: string,\n\t): string {\n\t\tif (!headerText) {\n\t\t\treturn headerText;\n\t\t}\n\n\t\tconst ellipsis = \"\u2026\";\n\t\tconst width = target.measureText(headerText).width;\n\t\tconst ellipsisWidth = target.measureText(ellipsis).width;\n\n\t\tif (width <= maxWidth || width <= ellipsisWidth) {\n\t\t\treturn headerText;\n\t\t}\n\n\t\tconst len = headerText.length;\n\t\tconst averageCharWidth = width / headerText.length;\n\t\tconst maxCharCount =\n\t\t\tMath.floor((maxWidth - ellipsisWidth) / averageCharWidth) - 1;\n\n\t\t// Find a halfway point that isn't after whitespace\n\t\tlet halfCharCount = Math.ceil(maxCharCount / 2);\n\t\twhile (halfCharCount > 0 && /\\s/.test(headerText[halfCharCount - 1])) {\n\t\t\t--halfCharCount;\n\t\t}\n\n\t\t// Split with ellipsis\n\t\treturn (\n\t\t\theaderText.substring(0, halfCharCount) +\n\t\t\tellipsis +\n\t\t\theaderText.substring(len - (maxCharCount - halfCharCount))\n\t\t);\n\t}\n\n\tprivate static _renderSectionLabel(\n\t\ttarget: CanvasRenderingContext2D,\n\t\theaderText: string | null,\n\t\thasSeparatorLine: boolean,\n\t\tbackgroundFill: string,\n\t\tforegroundFill: string,\n\t\tminimapWidth: number,\n\t\tbackgroundFillY: number,\n\t\tbackgroundFillHeight: number,\n\t\ttextY: number,\n\t\tseparatorY: number,\n\t): void {\n\t\tif (headerText) {\n\t\t\ttarget.fillStyle = backgroundFill;\n\t\t\ttarget.fillRect(\n\t\t\t\t0,\n\t\t\t\tbackgroundFillY,\n\t\t\t\tminimapWidth,\n\t\t\t\tbackgroundFillHeight,\n\t\t\t);\n\n\t\t\ttarget.fillStyle = foregroundFill;\n\t\t\ttarget.fillText(headerText, MINIMAP_GUTTER_WIDTH, textY);\n\t\t}\n\n\t\tif (hasSeparatorLine) {\n\t\t\ttarget.beginPath();\n\t\t\ttarget.moveTo(0, separatorY);\n\t\t\ttarget.lineTo(minimapWidth, separatorY);\n\t\t\ttarget.closePath();\n\t\t\ttarget.stroke();\n\t\t}\n\t}\n\n\tprivate renderLines(layout: MinimapLayout): RenderData | null {\n\t\tconst startLineNumber = layout.startLineNumber;\n\t\tconst endLineNumber = layout.endLineNumber;\n\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\n\t\t// Check if nothing changed w.r.t. lines from last frame\n\t\tif (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n\t\t\tconst _lastData = this._lastRenderData._get();\n\t\t\t// Nice!! Nothing changed from last frame\n\t\t\treturn new RenderData(layout, _lastData.imageData, _lastData.lines);\n\t\t}\n\n\t\t// Oh well!! We need to repaint some lines...\n\n\t\tconst imageData = this._getBuffer();\n\t\tif (!imageData) {\n\t\t\t// 0 width or 0 height canvas, nothing to do\n\t\t\treturn null;\n\t\t}\n\n\t\t// Render untouched lines by using last rendered data.\n\t\tconst [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(\n\t\t\timageData,\n\t\t\tlayout.topPaddingLineCount,\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t\tminimapLineHeight,\n\t\t\tthis._lastRenderData,\n\t\t);\n\n\t\t// Fetch rendering info from view model for rest of lines that need rendering.\n\t\tconst lineInfo = this._model.getMinimapLinesRenderingData(\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t\tneeded,\n\t\t);\n\t\tconst tabSize = this._model.getOptions().tabSize;\n\t\tconst defaultBackground = this._model.options.defaultBackgroundColor;\n\t\tconst background = this._model.options.backgroundColor;\n\t\tconst foregroundAlpha = this._model.options.foregroundAlpha;\n\t\tconst tokensColorTracker = this._model.tokensColorTracker;\n\t\tconst useLighterFont = tokensColorTracker.backgroundIsLight();\n\t\tconst renderMinimap = this._model.options.renderMinimap;\n\t\tconst charRenderer = this._model.options.charRenderer();\n\t\tconst fontScale = this._model.options.fontScale;\n\t\tconst minimapCharWidth = this._model.options.minimapCharWidth;\n\n\t\tconst baseCharHeight =\n\t\t\trenderMinimap === RenderMinimap.Text\n\t\t\t\t? Constants.BASE_CHAR_HEIGHT\n\t\t\t\t: Constants.BASE_CHAR_HEIGHT + 1;\n\t\tconst renderMinimapLineHeight = baseCharHeight * fontScale;\n\t\tconst innerLinePadding =\n\t\t\tminimapLineHeight > renderMinimapLineHeight\n\t\t\t\t? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2)\n\t\t\t\t: 0;\n\n\t\t// Render the rest of lines\n\t\tconst backgroundA = background.a / 255;\n\t\tconst renderBackground = new RGBA8(\n\t\t\tMath.round(\n\t\t\t\t(background.r - defaultBackground.r) * backgroundA +\n\t\t\t\t\tdefaultBackground.r,\n\t\t\t),\n\t\t\tMath.round(\n\t\t\t\t(background.g - defaultBackground.g) * backgroundA +\n\t\t\t\t\tdefaultBackground.g,\n\t\t\t),\n\t\t\tMath.round(\n\t\t\t\t(background.b - defaultBackground.b) * backgroundA +\n\t\t\t\t\tdefaultBackground.b,\n\t\t\t),\n\t\t\t255,\n\t\t);\n\t\tlet dy = layout.topPaddingLineCount * minimapLineHeight;\n\t\tconst renderedLines: MinimapLine[] = [];\n\t\tfor (\n\t\t\tlet lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1;\n\t\t\tlineIndex < lineCount;\n\t\t\tlineIndex++\n\t\t) {\n\t\t\tif (needed[lineIndex]) {\n\t\t\t\tInnerMinimap._renderLine(\n\t\t\t\t\timageData,\n\t\t\t\t\trenderBackground,\n\t\t\t\t\tbackground.a,\n\t\t\t\t\tuseLighterFont,\n\t\t\t\t\trenderMinimap,\n\t\t\t\t\tminimapCharWidth,\n\t\t\t\t\ttokensColorTracker,\n\t\t\t\t\tforegroundAlpha,\n\t\t\t\t\tcharRenderer,\n\t\t\t\t\tdy,\n\t\t\t\t\tinnerLinePadding,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tlineInfo[lineIndex]!,\n\t\t\t\t\tfontScale,\n\t\t\t\t\tminimapLineHeight,\n\t\t\t\t);\n\t\t\t}\n\t\t\trenderedLines[lineIndex] = new MinimapLine(dy);\n\t\t\tdy += minimapLineHeight;\n\t\t}\n\n\t\tconst dirtyY1 = _dirtyY1 === -1 ? 0 : _dirtyY1;\n\t\tconst dirtyY2 = _dirtyY2 === -1 ? imageData.height : _dirtyY2;\n\t\tconst dirtyHeight = dirtyY2 - dirtyY1;\n\n\t\t// Finally, paint to the canvas\n\t\tconst ctx = this._canvas.domNode.getContext(\"2d\")!;\n\t\tctx.putImageData(\n\t\t\timageData,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\tdirtyY1,\n\t\t\timageData.width,\n\t\t\tdirtyHeight,\n\t\t);\n\n\t\t// Save rendered data for reuse on next frame if possible\n\t\treturn new RenderData(layout, imageData, renderedLines);\n\t}\n\n\tprivate static _renderUntouchedLines(\n\t\ttarget: ImageData,\n\t\ttopPaddingLineCount: number,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tminimapLineHeight: number,\n\t\tlastRenderData: RenderData | null,\n\t): [number, number, boolean[]] {\n\t\tconst needed: boolean[] = [];\n\t\tif (!lastRenderData) {\n\t\t\tfor (\n\t\t\t\tlet i = 0, len = endLineNumber - startLineNumber + 1;\n\t\t\t\ti < len;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\tneeded[i] = true;\n\t\t\t}\n\t\t\treturn [-1, -1, needed];\n\t\t}\n\n\t\tconst _lastData = lastRenderData._get();\n\t\tconst lastTargetData = _lastData.imageData.data;\n\t\tconst lastStartLineNumber = _lastData.rendLineNumberStart;\n\t\tconst lastLines = _lastData.lines;\n\t\tconst lastLinesLength = lastLines.length;\n\t\tconst WIDTH = target.width;\n\t\tconst targetData = target.data;\n\n\t\tconst maxDestPixel =\n\t\t\t(endLineNumber - startLineNumber + 1) *\n\t\t\tminimapLineHeight *\n\t\t\tWIDTH *\n\t\t\t4;\n\t\tlet dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n\t\tlet dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n\n\t\tlet copySourceStart = -1;\n\t\tlet copySourceEnd = -1;\n\t\tlet copyDestStart = -1;\n\t\tlet copyDestEnd = -1;\n\n\t\tlet dest_dy = topPaddingLineCount * minimapLineHeight;\n\t\tfor (\n\t\t\tlet lineNumber = startLineNumber;\n\t\t\tlineNumber <= endLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\t\tconst lastLineIndex = lineNumber - lastStartLineNumber;\n\t\t\tconst source_dy =\n\t\t\t\tlastLineIndex >= 0 && lastLineIndex < lastLinesLength\n\t\t\t\t\t? lastLines[lastLineIndex].dy\n\t\t\t\t\t: -1;\n\n\t\t\tif (source_dy === -1) {\n\t\t\t\tneeded[lineIndex] = true;\n\t\t\t\tdest_dy += minimapLineHeight;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst sourceStart = source_dy * WIDTH * 4;\n\t\t\tconst sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n\t\t\tconst destStart = dest_dy * WIDTH * 4;\n\t\t\tconst destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n\n\t\t\tif (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n\t\t\t\t// contiguous zone => extend copy request\n\t\t\t\tcopySourceEnd = sourceEnd;\n\t\t\t\tcopyDestEnd = destEnd;\n\t\t\t} else {\n\t\t\t\tif (copySourceStart !== -1) {\n\t\t\t\t\t// flush existing copy request\n\t\t\t\t\ttargetData.set(\n\t\t\t\t\t\tlastTargetData.subarray(copySourceStart, copySourceEnd),\n\t\t\t\t\t\tcopyDestStart,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tdirtyPixel1 === -1 &&\n\t\t\t\t\t\tcopySourceStart === 0 &&\n\t\t\t\t\t\tcopySourceStart === copyDestStart\n\t\t\t\t\t) {\n\t\t\t\t\t\tdirtyPixel1 = copySourceEnd;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tdirtyPixel2 === -1 &&\n\t\t\t\t\t\tcopySourceEnd === maxDestPixel &&\n\t\t\t\t\t\tcopySourceStart === copyDestStart\n\t\t\t\t\t) {\n\t\t\t\t\t\tdirtyPixel2 = copySourceStart;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcopySourceStart = sourceStart;\n\t\t\t\tcopySourceEnd = sourceEnd;\n\t\t\t\tcopyDestStart = destStart;\n\t\t\t\tcopyDestEnd = destEnd;\n\t\t\t}\n\n\t\t\tneeded[lineIndex] = false;\n\t\t\tdest_dy += minimapLineHeight;\n\t\t}\n\n\t\tif (copySourceStart !== -1) {\n\t\t\t// flush existing copy request\n\t\t\ttargetData.set(\n\t\t\t\tlastTargetData.subarray(copySourceStart, copySourceEnd),\n\t\t\t\tcopyDestStart,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tdirtyPixel1 === -1 &&\n\t\t\t\tcopySourceStart === 0 &&\n\t\t\t\tcopySourceStart === copyDestStart\n\t\t\t) {\n\t\t\t\tdirtyPixel1 = copySourceEnd;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tdirtyPixel2 === -1 &&\n\t\t\t\tcopySourceEnd === maxDestPixel &&\n\t\t\t\tcopySourceStart === copyDestStart\n\t\t\t) {\n\t\t\t\tdirtyPixel2 = copySourceStart;\n\t\t\t}\n\t\t}\n\n\t\tconst dirtyY1 = dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4);\n\t\tconst dirtyY2 = dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4);\n\n\t\treturn [dirtyY1, dirtyY2, needed];\n\t}\n\n\tprivate static _renderLine(\n\t\ttarget: ImageData,\n\t\tbackgroundColor: RGBA8,\n\t\tbackgroundAlpha: number,\n\t\tuseLighterFont: boolean,\n\t\trenderMinimap: RenderMinimap,\n\t\tcharWidth: number,\n\t\tcolorTracker: MinimapTokensColorTracker,\n\t\tforegroundAlpha: number,\n\t\tminimapCharRenderer: MinimapCharRenderer,\n\t\tdy: number,\n\t\tinnerLinePadding: number,\n\t\ttabSize: number,\n\t\tlineData: ViewLineData,\n\t\tfontScale: number,\n\t\tminimapLineHeight: number,\n\t): void {\n\t\tconst content = lineData.content;\n\t\tconst tokens = lineData.tokens;\n\t\tconst maxDx = target.width - charWidth;\n\t\tconst force1pxHeight = minimapLineHeight === 1;\n\n\t\tlet dx = MINIMAP_GUTTER_WIDTH;\n\t\tlet charIndex = 0;\n\t\tlet tabsCharDelta = 0;\n\n\t\tfor (\n\t\t\tlet tokenIndex = 0, tokensLen = tokens.getCount();\n\t\t\ttokenIndex < tokensLen;\n\t\t\ttokenIndex++\n\t\t) {\n\t\t\tconst tokenEndIndex = tokens.getEndOffset(tokenIndex);\n\t\t\tconst tokenColorId = tokens.getForeground(tokenIndex);\n\t\t\tconst tokenColor = colorTracker.getColor(tokenColorId);\n\n\t\t\tfor (; charIndex < tokenEndIndex; charIndex++) {\n\t\t\t\tif (dx > maxDx) {\n\t\t\t\t\t// hit edge of minimap\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst charCode = content.charCodeAt(charIndex);\n\n\t\t\t\tif (charCode === CharCode.Tab) {\n\t\t\t\t\tconst insertSpacesCount =\n\t\t\t\t\t\ttabSize - ((charIndex + tabsCharDelta) % tabSize);\n\t\t\t\t\ttabsCharDelta += insertSpacesCount - 1;\n\t\t\t\t\t// No need to render anything since tab is invisible\n\t\t\t\t\tdx += insertSpacesCount * charWidth;\n\t\t\t\t} else if (charCode === CharCode.Space) {\n\t\t\t\t\t// No need to render anything since space is invisible\n\t\t\t\t\tdx += charWidth;\n\t\t\t\t} else {\n\t\t\t\t\t// Render twice for a full width character\n\t\t\t\t\tconst count = strings.isFullWidthCharacter(charCode)\n\t\t\t\t\t\t? 2\n\t\t\t\t\t\t: 1;\n\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tif (renderMinimap === RenderMinimap.Blocks) {\n\t\t\t\t\t\t\tminimapCharRenderer.blockRenderChar(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tdx,\n\t\t\t\t\t\t\t\tdy + innerLinePadding,\n\t\t\t\t\t\t\t\ttokenColor,\n\t\t\t\t\t\t\t\tforegroundAlpha,\n\t\t\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\t\t\tbackgroundAlpha,\n\t\t\t\t\t\t\t\tforce1pxHeight,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// RenderMinimap.Text\n\t\t\t\t\t\t\tminimapCharRenderer.renderChar(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tdx,\n\t\t\t\t\t\t\t\tdy + innerLinePadding,\n\t\t\t\t\t\t\t\tcharCode,\n\t\t\t\t\t\t\t\ttokenColor,\n\t\t\t\t\t\t\t\tforegroundAlpha,\n\t\t\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\t\t\tbackgroundAlpha,\n\t\t\t\t\t\t\t\tfontScale,\n\t\t\t\t\t\t\t\tuseLighterFont,\n\t\t\t\t\t\t\t\tforce1pxHeight,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdx += charWidth;\n\n\t\t\t\t\t\tif (dx > maxDx) {\n\t\t\t\t\t\t\t// hit edge of minimap\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass ContiguousLineMap<T> {\n\tprivate readonly _startLineNumber: number;\n\tprivate readonly _endLineNumber: number;\n\tprivate readonly _defaultValue: T;\n\tprivate readonly _values: T[];\n\n\tconstructor(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tdefaultValue: T,\n\t) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._endLineNumber = endLineNumber;\n\t\tthis._defaultValue = defaultValue;\n\t\tthis._values = [];\n\t\tfor (\n\t\t\tlet i = 0, count = this._endLineNumber - this._startLineNumber + 1;\n\t\t\ti < count;\n\t\t\ti++\n\t\t) {\n\t\t\tthis._values[i] = defaultValue;\n\t\t}\n\t}\n\n\tpublic has(lineNumber: number): boolean {\n\t\treturn this.get(lineNumber) !== this._defaultValue;\n\t}\n\n\tpublic set(lineNumber: number, value: T): void {\n\t\tif (\n\t\t\tlineNumber < this._startLineNumber ||\n\t\t\tlineNumber > this._endLineNumber\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._values[lineNumber - this._startLineNumber] = value;\n\t}\n\n\tpublic get(lineNumber: number): T {\n\t\tif (\n\t\t\tlineNumber < this._startLineNumber ||\n\t\t\tlineNumber > this._endLineNumber\n\t\t) {\n\t\t\treturn this._defaultValue;\n\t\t}\n\t\treturn this._values[lineNumber - this._startLineNumber];\n\t}\n}\n"],
  "mappings": "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",
  "names": ["sliderHeight", "maxMinimapSliderTop", "computedSliderRatio", "sliderTop", "result"]
}
