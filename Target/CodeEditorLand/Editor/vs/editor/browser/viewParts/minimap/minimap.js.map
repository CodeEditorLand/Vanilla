{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/minimap/minimap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { FastDomNode, createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { IDisposable, Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { ILine, RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprint, PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { RenderMinimap, EditorOption, MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { ScrollType } from '../../../common/editorCommon.js';\nimport { IEditorConfiguration } from '../../../common/config/editorConfiguration.js';\nimport { ColorId } from '../../../common/encodedTokenAttributes.js';\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { Constants } from './minimapCharSheet.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { RenderingContext, RestrictedRenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport { EditorTheme } from '../../../common/editorTheme.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { ViewLineData, ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, minimapBackground, minimapForegroundOpacity, editorForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { ModelDecorationMinimapOptions } from '../../../common/model/textModel.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { GestureEvent, EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition, MinimapSectionHeaderStyle, TextModelResolvedOptions } from '../../../common/model.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { DEFAULT_FONT_FAMILY } from '../../../../base/browser/fonts.js';\n\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\n\nconst GUTTER_DECORATION_WIDTH = 2;\n\nclass MinimapOptions {\n\n\tpublic readonly renderMinimap: RenderMinimap;\n\tpublic readonly size: 'proportional' | 'fill' | 'fit';\n\tpublic readonly minimapHeightIsEditorHeight: boolean;\n\tpublic readonly scrollBeyondLastLine: boolean;\n\tpublic readonly paddingTop: number;\n\tpublic readonly paddingBottom: number;\n\tpublic readonly showSlider: 'always' | 'mouseover';\n\tpublic readonly autohide: boolean;\n\tpublic readonly pixelRatio: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly lineHeight: number;\n\t/**\n\t * container dom node left position (in CSS px)\n\t */\n\tpublic readonly minimapLeft: number;\n\t/**\n\t * container dom node width (in CSS px)\n\t */\n\tpublic readonly minimapWidth: number;\n\t/**\n\t * container dom node height (in CSS px)\n\t */\n\tpublic readonly minimapHeight: number;\n\t/**\n\t * canvas backing store width (in device px)\n\t */\n\tpublic readonly canvasInnerWidth: number;\n\t/**\n\t * canvas backing store height (in device px)\n\t */\n\tpublic readonly canvasInnerHeight: number;\n\t/**\n\t * canvas width (in CSS px)\n\t */\n\tpublic readonly canvasOuterWidth: number;\n\t/**\n\t * canvas height (in CSS px)\n\t */\n\tpublic readonly canvasOuterHeight: number;\n\n\tpublic readonly isSampling: boolean;\n\tpublic readonly editorHeight: number;\n\tpublic readonly fontScale: number;\n\tpublic readonly minimapLineHeight: number;\n\tpublic readonly minimapCharWidth: number;\n\tpublic readonly sectionHeaderFontFamily: string;\n\tpublic readonly sectionHeaderFontSize: number;\n\t/**\n\t * Space in between the characters of the section header (in CSS px)\n\t */\n\tpublic readonly sectionHeaderLetterSpacing: number;\n\tpublic readonly sectionHeaderFontColor: RGBA8;\n\n\tpublic readonly charRenderer: () => MinimapCharRenderer;\n\tpublic readonly defaultBackgroundColor: RGBA8;\n\tpublic readonly backgroundColor: RGBA8;\n\t/**\n\t * foreground alpha: integer in [0-255]\n\t */\n\tpublic readonly foregroundAlpha: number;\n\n\tconstructor(configuration: IEditorConfiguration, theme: EditorTheme, tokensColorTracker: MinimapTokensColorTracker) {\n\t\tconst options = configuration.options;\n\t\tconst pixelRatio = options.get(EditorOption.pixelRatio);\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst minimapLayout = layoutInfo.minimap;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst minimapOpts = options.get(EditorOption.minimap);\n\n\t\tthis.renderMinimap = minimapLayout.renderMinimap;\n\t\tthis.size = minimapOpts.size;\n\t\tthis.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n\t\tthis.scrollBeyondLastLine = options.get(EditorOption.scrollBeyondLastLine);\n\t\tthis.paddingTop = options.get(EditorOption.padding).top;\n\t\tthis.paddingBottom = options.get(EditorOption.padding).bottom;\n\t\tthis.showSlider = minimapOpts.showSlider;\n\t\tthis.autohide = minimapOpts.autohide;\n\t\tthis.pixelRatio = pixelRatio;\n\t\tthis.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis.minimapLeft = minimapLayout.minimapLeft;\n\t\tthis.minimapWidth = minimapLayout.minimapWidth;\n\t\tthis.minimapHeight = layoutInfo.height;\n\n\t\tthis.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n\t\tthis.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n\t\tthis.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n\t\tthis.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n\n\t\tthis.isSampling = minimapLayout.minimapIsSampling;\n\t\tthis.editorHeight = layoutInfo.height;\n\t\tthis.fontScale = minimapLayout.minimapScale;\n\t\tthis.minimapLineHeight = minimapLayout.minimapLineHeight;\n\t\tthis.minimapCharWidth = Constants.BASE_CHAR_WIDTH * this.fontScale;\n\t\tthis.sectionHeaderFontFamily = DEFAULT_FONT_FAMILY;\n\t\tthis.sectionHeaderFontSize = minimapOpts.sectionHeaderFontSize * pixelRatio;\n\t\tthis.sectionHeaderLetterSpacing = minimapOpts.sectionHeaderLetterSpacing; // intentionally not multiplying by pixelRatio\n\t\tthis.sectionHeaderFontColor = MinimapOptions._getSectionHeaderColor(theme, tokensColorTracker.getColor(ColorId.DefaultForeground));\n\n\t\tthis.charRenderer = createSingleCallFunction(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n\t\tthis.defaultBackgroundColor = tokensColorTracker.getColor(ColorId.DefaultBackground);\n\t\tthis.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n\t\tthis.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n\t}\n\n\tprivate static _getMinimapBackground(theme: EditorTheme, defaultBackgroundColor: RGBA8): RGBA8 {\n\t\tconst themeColor = theme.getColor(minimapBackground);\n\t\tif (themeColor) {\n\t\t\treturn new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n\t\t}\n\t\treturn defaultBackgroundColor;\n\t}\n\n\tprivate static _getMinimapForegroundOpacity(theme: EditorTheme): number {\n\t\tconst themeColor = theme.getColor(minimapForegroundOpacity);\n\t\tif (themeColor) {\n\t\t\treturn RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n\t\t}\n\t\treturn 255;\n\t}\n\n\tprivate static _getSectionHeaderColor(theme: EditorTheme, defaultForegroundColor: RGBA8): RGBA8 {\n\t\tconst themeColor = theme.getColor(editorForeground);\n\t\tif (themeColor) {\n\t\t\treturn new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n\t\t}\n\t\treturn defaultForegroundColor;\n\t}\n\n\tpublic equals(other: MinimapOptions): boolean {\n\t\treturn (this.renderMinimap === other.renderMinimap\n\t\t\t&& this.size === other.size\n\t\t\t&& this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n\t\t\t&& this.scrollBeyondLastLine === other.scrollBeyondLastLine\n\t\t\t&& this.paddingTop === other.paddingTop\n\t\t\t&& this.paddingBottom === other.paddingBottom\n\t\t\t&& this.showSlider === other.showSlider\n\t\t\t&& this.autohide === other.autohide\n\t\t\t&& this.pixelRatio === other.pixelRatio\n\t\t\t&& this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n\t\t\t&& this.lineHeight === other.lineHeight\n\t\t\t&& this.minimapLeft === other.minimapLeft\n\t\t\t&& this.minimapWidth === other.minimapWidth\n\t\t\t&& this.minimapHeight === other.minimapHeight\n\t\t\t&& this.canvasInnerWidth === other.canvasInnerWidth\n\t\t\t&& this.canvasInnerHeight === other.canvasInnerHeight\n\t\t\t&& this.canvasOuterWidth === other.canvasOuterWidth\n\t\t\t&& this.canvasOuterHeight === other.canvasOuterHeight\n\t\t\t&& this.isSampling === other.isSampling\n\t\t\t&& this.editorHeight === other.editorHeight\n\t\t\t&& this.fontScale === other.fontScale\n\t\t\t&& this.minimapLineHeight === other.minimapLineHeight\n\t\t\t&& this.minimapCharWidth === other.minimapCharWidth\n\t\t\t&& this.sectionHeaderFontSize === other.sectionHeaderFontSize\n\t\t\t&& this.sectionHeaderLetterSpacing === other.sectionHeaderLetterSpacing\n\t\t\t&& this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n\t\t\t&& this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n\t\t\t&& this.foregroundAlpha === other.foregroundAlpha\n\t\t);\n\t}\n}\n\nclass MinimapLayout {\n\n\tconstructor(\n\t\t/**\n\t\t * The given editor scrollTop (input).\n\t\t */\n\t\tpublic readonly scrollTop: number,\n\t\t/**\n\t\t * The given editor scrollHeight (input).\n\t\t */\n\t\tpublic readonly scrollHeight: number,\n\t\tpublic readonly sliderNeeded: boolean,\n\t\tprivate readonly _computedSliderRatio: number,\n\t\t/**\n\t\t * slider dom node top (in CSS px)\n\t\t */\n\t\tpublic readonly sliderTop: number,\n\t\t/**\n\t\t * slider dom node height (in CSS px)\n\t\t */\n\t\tpublic readonly sliderHeight: number,\n\t\t/**\n\t\t * empty lines to reserve at the top of the minimap.\n\t\t */\n\t\tpublic readonly topPaddingLineCount: number,\n\t\t/**\n\t\t * minimap render start line number.\n\t\t */\n\t\tpublic readonly startLineNumber: number,\n\t\t/**\n\t\t * minimap render end line number.\n\t\t */\n\t\tpublic readonly endLineNumber: number\n\t) { }\n\n\t/**\n\t * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n\t */\n\tpublic getDesiredScrollTopFromDelta(delta: number): number {\n\t\treturn Math.round(this.scrollTop + delta / this._computedSliderRatio);\n\t}\n\n\tpublic getDesiredScrollTopFromTouchLocation(pageY: number): number {\n\t\treturn Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n\t}\n\n\t/**\n\t * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n\t */\n\tpublic intersectWithViewport(range: Range): [number, number] | null {\n\t\tconst startLineNumber = Math.max(this.startLineNumber, range.startLineNumber);\n\t\tconst endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n\t\tif (startLineNumber > endLineNumber) {\n\t\t\t// entirely outside minimap's viewport\n\t\t\treturn null;\n\t\t}\n\t\treturn [startLineNumber, endLineNumber];\n\t}\n\n\t/**\n\t * Get the inner minimap y coordinate for a line number.\n\t */\n\tpublic getYForLineNumber(lineNumber: number, minimapLineHeight: number): number {\n\t\treturn + (lineNumber - this.startLineNumber + this.topPaddingLineCount) * minimapLineHeight;\n\t}\n\n\tpublic static create(\n\t\toptions: MinimapOptions,\n\t\tviewportStartLineNumber: number,\n\t\tviewportEndLineNumber: number,\n\t\tviewportStartLineNumberVerticalOffset: number,\n\t\tviewportHeight: number,\n\t\tviewportContainsWhitespaceGaps: boolean,\n\t\tlineCount: number,\n\t\trealLineCount: number,\n\t\tscrollTop: number,\n\t\tscrollHeight: number,\n\t\tpreviousLayout: MinimapLayout | null\n\t): MinimapLayout {\n\t\tconst pixelRatio = options.pixelRatio;\n\t\tconst minimapLineHeight = options.minimapLineHeight;\n\t\tconst minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n\t\tconst lineHeight = options.lineHeight;\n\n\t\tif (options.minimapHeightIsEditorHeight) {\n\t\t\tlet logicalScrollHeight = (\n\t\t\t\trealLineCount * options.lineHeight\n\t\t\t\t+ options.paddingTop\n\t\t\t\t+ options.paddingBottom\n\t\t\t);\n\t\t\tif (options.scrollBeyondLastLine) {\n\t\t\t\tlogicalScrollHeight += Math.max(0, viewportHeight - options.lineHeight - options.paddingBottom);\n\t\t\t}\n\t\t\tconst sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n\t\t\tconst maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n\t\t\t// The slider can move from 0 to `maxMinimapSliderTop`\n\t\t\t// in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n\t\t\tconst computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n\t\t\tconst sliderTop = (scrollTop * computedSliderRatio);\n\t\t\tconst sliderNeeded = (maxMinimapSliderTop > 0);\n\t\t\tconst maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n\t\t\tconst topPaddingLineCount = Math.floor(options.paddingTop / options.lineHeight);\n\t\t\treturn new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, topPaddingLineCount, 1, Math.min(lineCount, maxLinesFitting));\n\t\t}\n\n\t\t// The visible line count in a viewport can change due to a number of reasons:\n\t\t//  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n\t\t//    e.g. for a line height of 20, and a viewport height of 600\n\t\t//          * scrollTop = 0  => visible lines are [1, 30]\n\t\t//          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n\t\t//          * scrollTop = 20 => visible lines are [2, 31]\n\t\t//  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n\t\t//  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n\n\t\t// We must first establish a desirable slider height.\n\t\tlet sliderHeight: number;\n\t\tif (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n\t\t\t// case b) from above: there are whitespace gaps in the viewport.\n\t\t\t// In this case, the height of the slider directly reflects the visible line count.\n\t\t\tconst viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n\t\t\tsliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n\t\t} else {\n\t\t\t// The slider has a stable height\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\tsliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n\t\t}\n\n\t\tconst extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n\t\tlet extraLinesAtTheBottom = Math.floor(options.paddingBottom / lineHeight);\n\t\tif (options.scrollBeyondLastLine) {\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\textraLinesAtTheBottom = Math.max(extraLinesAtTheBottom, expectedViewportLineCount - 1);\n\t\t}\n\n\t\tlet maxMinimapSliderTop: number;\n\t\tif (extraLinesAtTheBottom > 0) {\n\t\t\tconst expectedViewportLineCount = viewportHeight / lineHeight;\n\t\t\t// The minimap slider, when dragged all the way down, will contain the last line at its top\n\t\t\tmaxMinimapSliderTop = (extraLinesAtTheTop + lineCount + extraLinesAtTheBottom - expectedViewportLineCount - 1) * minimapLineHeight / pixelRatio;\n\t\t} else {\n\t\t\t// The minimap slider, when dragged all the way down, will contain the last line at its bottom\n\t\t\tmaxMinimapSliderTop = Math.max(0, (extraLinesAtTheTop + lineCount) * minimapLineHeight / pixelRatio - sliderHeight);\n\t\t}\n\t\tmaxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n\n\t\t// The slider can move from 0 to `maxMinimapSliderTop`\n\t\t// in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n\t\tconst computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n\t\tconst sliderTop = (scrollTop * computedSliderRatio);\n\n\t\tif (minimapLinesFitting >= extraLinesAtTheTop + lineCount + extraLinesAtTheBottom) {\n\t\t\t// All lines fit in the minimap\n\t\t\tconst sliderNeeded = (maxMinimapSliderTop > 0);\n\t\t\treturn new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, extraLinesAtTheTop, 1, lineCount);\n\t\t} else {\n\t\t\tlet consideringStartLineNumber: number;\n\t\t\tif (viewportStartLineNumber > 1) {\n\t\t\t\tconsideringStartLineNumber = viewportStartLineNumber + extraLinesAtTheTop;\n\t\t\t} else {\n\t\t\t\tconsideringStartLineNumber = Math.max(1, scrollTop / lineHeight);\n\t\t\t}\n\n\t\t\tlet topPaddingLineCount: number;\n\t\t\tlet startLineNumber = Math.max(1, Math.floor(consideringStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n\t\t\tif (startLineNumber < extraLinesAtTheTop) {\n\t\t\t\ttopPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n\t\t\t\tstartLineNumber = 1;\n\t\t\t} else {\n\t\t\t\ttopPaddingLineCount = 0;\n\t\t\t\tstartLineNumber = Math.max(1, startLineNumber - extraLinesAtTheTop);\n\t\t\t}\n\n\t\t\t// Avoid flickering caused by a partial viewport start line\n\t\t\t// by being consistent w.r.t. the previous layout decision\n\t\t\tif (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n\t\t\t\tif (previousLayout.scrollTop > scrollTop) {\n\t\t\t\t\t// Scrolling up => never increase `startLineNumber`\n\t\t\t\t\tstartLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n\t\t\t\t\ttopPaddingLineCount = Math.max(topPaddingLineCount, previousLayout.topPaddingLineCount);\n\t\t\t\t}\n\t\t\t\tif (previousLayout.scrollTop < scrollTop) {\n\t\t\t\t\t// Scrolling down => never decrease `startLineNumber`\n\t\t\t\t\tstartLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n\t\t\t\t\ttopPaddingLineCount = Math.min(topPaddingLineCount, previousLayout.topPaddingLineCount);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endLineNumber = Math.min(lineCount, startLineNumber - topPaddingLineCount + minimapLinesFitting - 1);\n\t\t\tconst partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n\n\t\t\tlet sliderTopAligned: number;\n\t\t\tif (scrollTop >= options.paddingTop) {\n\t\t\t\tsliderTopAligned = (viewportStartLineNumber - startLineNumber + topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n\t\t\t} else {\n\t\t\t\tsliderTopAligned = (scrollTop / options.paddingTop) * (topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n\t\t\t}\n\n\t\t\treturn new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, topPaddingLineCount, startLineNumber, endLineNumber);\n\t\t}\n\t}\n}\n\nclass MinimapLine implements ILine {\n\n\tpublic static readonly INVALID = new MinimapLine(-1);\n\n\tdy: number;\n\n\tconstructor(dy: number) {\n\t\tthis.dy = dy;\n\t}\n\n\tpublic onContentChanged(): void {\n\t\tthis.dy = -1;\n\t}\n\n\tpublic onTokensChanged(): void {\n\t\tthis.dy = -1;\n\t}\n}\n\nclass RenderData {\n\t/**\n\t * last rendered layout.\n\t */\n\tpublic readonly renderedLayout: MinimapLayout;\n\tprivate readonly _imageData: ImageData;\n\tprivate readonly _renderedLines: RenderedLinesCollection<MinimapLine>;\n\n\tconstructor(\n\t\trenderedLayout: MinimapLayout,\n\t\timageData: ImageData,\n\t\tlines: MinimapLine[]\n\t) {\n\t\tthis.renderedLayout = renderedLayout;\n\t\tthis._imageData = imageData;\n\t\tthis._renderedLines = new RenderedLinesCollection({\n\t\t\tcreateLine: () => MinimapLine.INVALID\n\t\t});\n\t\tthis._renderedLines._set(renderedLayout.startLineNumber, lines);\n\t}\n\n\t/**\n\t * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n\t */\n\tpublic linesEquals(layout: MinimapLayout): boolean {\n\t\tif (!this.scrollEquals(layout)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tmp = this._renderedLines._get();\n\t\tconst lines = tmp.lines;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tif (lines[i].dy === -1) {\n\t\t\t\t// This line is invalid\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if the current RenderData matches the new layout's scroll position\n\t */\n\tpublic scrollEquals(layout: MinimapLayout): boolean {\n\t\treturn this.renderedLayout.startLineNumber === layout.startLineNumber\n\t\t\t&& this.renderedLayout.endLineNumber === layout.endLineNumber;\n\t}\n\n\t_get(): { imageData: ImageData; rendLineNumberStart: number; lines: MinimapLine[] } {\n\t\tconst tmp = this._renderedLines._get();\n\t\treturn {\n\t\t\timageData: this._imageData,\n\t\t\trendLineNumberStart: tmp.rendLineNumberStart,\n\t\t\tlines: tmp.lines\n\t\t};\n\t}\n\n\tpublic onLinesChanged(changeFromLineNumber: number, changeCount: number): boolean {\n\t\treturn this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n\t}\n\tpublic onLinesDeleted(deleteFromLineNumber: number, deleteToLineNumber: number): void {\n\t\tthis._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n\t}\n\tpublic onLinesInserted(insertFromLineNumber: number, insertToLineNumber: number): void {\n\t\tthis._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n\t}\n\tpublic onTokensChanged(ranges: { fromLineNumber: number; toLineNumber: number }[]): boolean {\n\t\treturn this._renderedLines.onTokensChanged(ranges);\n\t}\n}\n\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n\n\tprivate readonly _backgroundFillData: Uint8ClampedArray;\n\tprivate readonly _buffers: [ImageData, ImageData];\n\tprivate _lastUsedBuffer: number;\n\n\tconstructor(ctx: CanvasRenderingContext2D, WIDTH: number, HEIGHT: number, background: RGBA8) {\n\t\tthis._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n\t\tthis._buffers = [\n\t\t\tctx.createImageData(WIDTH, HEIGHT),\n\t\t\tctx.createImageData(WIDTH, HEIGHT)\n\t\t];\n\t\tthis._lastUsedBuffer = 0;\n\t}\n\n\tpublic getBuffer(): ImageData {\n\t\t// rotate buffers\n\t\tthis._lastUsedBuffer = 1 - this._lastUsedBuffer;\n\t\tconst result = this._buffers[this._lastUsedBuffer];\n\n\t\t// fill with background color\n\t\tresult.data.set(this._backgroundFillData);\n\n\t\treturn result;\n\t}\n\n\tprivate static _createBackgroundFillData(WIDTH: number, HEIGHT: number, background: RGBA8): Uint8ClampedArray {\n\t\tconst backgroundR = background.r;\n\t\tconst backgroundG = background.g;\n\t\tconst backgroundB = background.b;\n\t\tconst backgroundA = background.a;\n\n\t\tconst result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < HEIGHT; i++) {\n\t\t\tfor (let j = 0; j < WIDTH; j++) {\n\t\t\t\tresult[offset] = backgroundR;\n\t\t\t\tresult[offset + 1] = backgroundG;\n\t\t\t\tresult[offset + 2] = backgroundB;\n\t\t\t\tresult[offset + 3] = backgroundA;\n\t\t\t\toffset += 4;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport interface IMinimapModel {\n\treadonly tokensColorTracker: MinimapTokensColorTracker;\n\treadonly options: MinimapOptions;\n\n\tgetLineCount(): number;\n\tgetRealLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): (ViewLineData | null)[];\n\tgetSelections(): Selection[];\n\tgetMinimapDecorationsInViewport(startLineNumber: number, endLineNumber: number): ViewModelDecoration[];\n\tgetSectionHeaderDecorationsInViewport(startLineNumber: number, endLineNumber: number): ViewModelDecoration[];\n\tgetSectionHeaderText(decoration: ViewModelDecoration, fitWidth: (s: string) => string): string | null;\n\tgetOptions(): TextModelResolvedOptions;\n\trevealLineNumber(lineNumber: number): void;\n\tsetScrollTop(scrollTop: number): void;\n}\n\ninterface IMinimapRenderingContext {\n\treadonly viewportContainsWhitespaceGaps: boolean;\n\n\treadonly scrollWidth: number;\n\treadonly scrollHeight: number;\n\n\treadonly viewportStartLineNumber: number;\n\treadonly viewportEndLineNumber: number;\n\treadonly viewportStartLineNumberVerticalOffset: number;\n\n\treadonly scrollTop: number;\n\treadonly scrollLeft: number;\n\n\treadonly viewportWidth: number;\n\treadonly viewportHeight: number;\n}\n\ninterface SamplingStateLinesDeletedEvent {\n\ttype: 'deleted';\n\t_oldIndex: number;\n\tdeleteFromLineNumber: number;\n\tdeleteToLineNumber: number;\n}\n\ninterface SamplingStateLinesInsertedEvent {\n\ttype: 'inserted';\n\t_i: number;\n\tinsertFromLineNumber: number;\n\tinsertToLineNumber: number;\n}\n\ninterface SamplingStateFlushEvent {\n\ttype: 'flush';\n}\n\ntype SamplingStateEvent = SamplingStateLinesInsertedEvent | SamplingStateLinesDeletedEvent | SamplingStateFlushEvent;\n\nclass MinimapSamplingState {\n\n\tpublic static compute(options: MinimapOptions, viewLineCount: number, oldSamplingState: MinimapSamplingState | null): [MinimapSamplingState | null, SamplingStateEvent[]] {\n\t\tif (options.renderMinimap === RenderMinimap.None || !options.isSampling) {\n\t\t\treturn [null, []];\n\t\t}\n\n\t\t// ratio is intentionally not part of the layout to avoid the layout changing all the time\n\t\t// so we need to recompute it again...\n\t\tconst { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n\t\t\tviewLineCount: viewLineCount,\n\t\t\tscrollBeyondLastLine: options.scrollBeyondLastLine,\n\t\t\tpaddingTop: options.paddingTop,\n\t\t\tpaddingBottom: options.paddingBottom,\n\t\t\theight: options.editorHeight,\n\t\t\tlineHeight: options.lineHeight,\n\t\t\tpixelRatio: options.pixelRatio\n\t\t});\n\t\tconst ratio = viewLineCount / minimapLineCount;\n\t\tconst halfRatio = ratio / 2;\n\n\t\tif (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n\t\t\tconst result: number[] = [];\n\t\t\tresult[0] = 1;\n\t\t\tif (minimapLineCount > 1) {\n\t\t\t\tfor (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n\t\t\t\t\tresult[i] = Math.round(i * ratio + halfRatio);\n\t\t\t\t}\n\t\t\t\tresult[minimapLineCount - 1] = viewLineCount;\n\t\t\t}\n\t\t\treturn [new MinimapSamplingState(ratio, result), []];\n\t\t}\n\n\t\tconst oldMinimapLines = oldSamplingState.minimapLines;\n\t\tconst oldLength = oldMinimapLines.length;\n\t\tconst result: number[] = [];\n\t\tlet oldIndex = 0;\n\t\tlet oldDeltaLineCount = 0;\n\t\tlet minViewLineNumber = 1;\n\t\tconst MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n\t\tlet events: SamplingStateEvent[] = [];\n\t\tlet lastEvent: SamplingStateEvent | null = null;\n\t\tfor (let i = 0; i < minimapLineCount; i++) {\n\t\t\tconst fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n\t\t\tconst toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n\n\t\t\twhile (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n\t\t\t\tif (events.length < MAX_EVENT_COUNT) {\n\t\t\t\t\tconst oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n\t\t\t\t\tif (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n\t\t\t\t\t\tlastEvent.deleteToLineNumber++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n\t\t\t\t\t\tevents.push(lastEvent);\n\t\t\t\t\t}\n\t\t\t\t\toldDeltaLineCount--;\n\t\t\t\t}\n\t\t\t\toldIndex++;\n\t\t\t}\n\n\t\t\tlet selectedViewLineNumber: number;\n\t\t\tif (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n\t\t\t\t// reuse the old sampled line\n\t\t\t\tselectedViewLineNumber = oldMinimapLines[oldIndex];\n\t\t\t\toldIndex++;\n\t\t\t} else {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tselectedViewLineNumber = 1;\n\t\t\t\t} else if (i + 1 === minimapLineCount) {\n\t\t\t\t\tselectedViewLineNumber = viewLineCount;\n\t\t\t\t} else {\n\t\t\t\t\tselectedViewLineNumber = Math.round(i * ratio + halfRatio);\n\t\t\t\t}\n\t\t\t\tif (events.length < MAX_EVENT_COUNT) {\n\t\t\t\t\tconst oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n\t\t\t\t\tif (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n\t\t\t\t\t\tlastEvent.insertToLineNumber++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n\t\t\t\t\t\tevents.push(lastEvent);\n\t\t\t\t\t}\n\t\t\t\t\toldDeltaLineCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[i] = selectedViewLineNumber;\n\t\t\tminViewLineNumber = selectedViewLineNumber;\n\t\t}\n\n\t\tif (events.length < MAX_EVENT_COUNT) {\n\t\t\twhile (oldIndex < oldLength) {\n\t\t\t\tconst oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n\t\t\t\tif (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n\t\t\t\t\tlastEvent.deleteToLineNumber++;\n\t\t\t\t} else {\n\t\t\t\t\tlastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n\t\t\t\t\tevents.push(lastEvent);\n\t\t\t\t}\n\t\t\t\toldDeltaLineCount--;\n\t\t\t\toldIndex++;\n\t\t\t}\n\t\t} else {\n\t\t\t// too many events, just give up\n\t\t\tevents = [{ type: 'flush' }];\n\t\t}\n\n\t\treturn [new MinimapSamplingState(ratio, result), events];\n\t}\n\n\tconstructor(\n\t\tpublic readonly samplingRatio: number,\n\t\tpublic readonly minimapLines: number[]\t// a map of 0-based minimap line indexes to 1-based view line numbers\n\t) {\n\t}\n\n\tpublic modelLineToMinimapLine(lineNumber: number): number {\n\t\treturn Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n\t}\n\n\t/**\n\t * Will return null if the model line ranges are not intersecting with a sampled model line.\n\t */\n\tpublic modelLineRangeToMinimapLineRange(fromLineNumber: number, toLineNumber: number): [number, number] | null {\n\t\tlet fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n\t\twhile (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n\t\t\tfromLineIndex--;\n\t\t}\n\t\tlet toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n\t\twhile (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n\t\t\ttoLineIndex++;\n\t\t}\n\t\tif (fromLineIndex === toLineIndex) {\n\t\t\tconst sampledLineNumber = this.minimapLines[fromLineIndex];\n\t\t\tif (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n\t\t\t\t// This line is not part of the sampled lines ==> nothing to do\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn [fromLineIndex + 1, toLineIndex + 1];\n\t}\n\n\t/**\n\t * Will always return a range, even if it is not intersecting with a sampled model line.\n\t */\n\tpublic decorationLineRangeToMinimapLineRange(startLineNumber: number, endLineNumber: number): [number, number] {\n\t\tlet minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n\t\tlet minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n\t\tif (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n\t\t\tif (minimapLineEnd === this.minimapLines.length) {\n\t\t\t\tif (minimapLineStart > 1) {\n\t\t\t\t\tminimapLineStart--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tminimapLineEnd++;\n\t\t\t}\n\t\t}\n\t\treturn [minimapLineStart, minimapLineEnd];\n\t}\n\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): [number, number] {\n\t\t// have the mapping be sticky\n\t\tconst deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n\t\tlet changeStartIndex = this.minimapLines.length;\n\t\tlet changeEndIndex = 0;\n\t\tfor (let i = this.minimapLines.length - 1; i >= 0; i--) {\n\t\t\tif (this.minimapLines[i] < e.fromLineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.minimapLines[i] <= e.toLineNumber) {\n\t\t\t\t// this line got deleted => move to previous available\n\t\t\t\tthis.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n\t\t\t\tchangeStartIndex = Math.min(changeStartIndex, i);\n\t\t\t\tchangeEndIndex = Math.max(changeEndIndex, i);\n\t\t\t} else {\n\t\t\t\tthis.minimapLines[i] -= deletedLineCount;\n\t\t\t}\n\t\t}\n\t\treturn [changeStartIndex, changeEndIndex];\n\t}\n\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): void {\n\t\t// have the mapping be sticky\n\t\tconst insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n\t\tfor (let i = this.minimapLines.length - 1; i >= 0; i--) {\n\t\t\tif (this.minimapLines[i] < e.fromLineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.minimapLines[i] += insertedLineCount;\n\t\t}\n\t}\n}\n\n/**\n * The minimap appears beside the editor scroll bar and visualizes a zoomed out\n * view of the file.\n */\nexport class Minimap extends ViewPart implements IMinimapModel {\n\n\tpublic readonly tokensColorTracker: MinimapTokensColorTracker;\n\n\tprivate _selections: Selection[];\n\tprivate _minimapSelections: Selection[] | null;\n\n\tpublic options: MinimapOptions;\n\n\tprivate _samplingState: MinimapSamplingState | null;\n\tprivate _shouldCheckSampling: boolean;\n\n\tprivate _sectionHeaderCache = new LRUCache<string, string>(10, 1.5);\n\n\tprivate _actual: InnerMinimap;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n\n\t\tthis._selections = [];\n\t\tthis._minimapSelections = null;\n\n\t\tthis.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n\t\tconst [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n\t\tthis._samplingState = samplingState;\n\t\tthis._shouldCheckSampling = false;\n\n\t\tthis._actual = new InnerMinimap(context.theme, this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._actual.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this._actual.getDomNode();\n\t}\n\n\tprivate _onOptionsMaybeChanged(): boolean {\n\t\tconst opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n\t\tif (this.options.equals(opts)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.options = opts;\n\t\tthis._recreateLineSampling();\n\t\tthis._actual.onDidChangeOptions();\n\t\treturn true;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\treturn this._onOptionsMaybeChanged();\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections;\n\t\tthis._minimapSelections = null;\n\t\treturn this._actual.onSelectionChanged();\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\tif (e.affectsMinimap) {\n\t\t\treturn this._actual.onDecorationsChanged();\n\t\t}\n\t\treturn false;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\tif (this._samplingState) {\n\t\t\tthis._shouldCheckSampling = true;\n\t\t}\n\t\treturn this._actual.onFlushed();\n\t}\n\tpublic override onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\tif (this._samplingState) {\n\t\t\tconst minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n\t\t\tif (minimapLineRange) {\n\t\t\t\treturn this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._actual.onLinesChanged(e.fromLineNumber, e.count);\n\t\t}\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\tif (this._samplingState) {\n\t\t\tconst [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n\t\t\tif (changeStartIndex <= changeEndIndex) {\n\t\t\t\tthis._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n\t\t\t}\n\t\t\tthis._shouldCheckSampling = true;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n\t\t}\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\tif (this._samplingState) {\n\t\t\tthis._samplingState.onLinesInserted(e);\n\t\t\tthis._shouldCheckSampling = true;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n\t\t}\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn this._actual.onScrollChanged();\n\t}\n\tpublic override onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\tthis._actual.onThemeChanged();\n\t\tthis._onOptionsMaybeChanged();\n\t\treturn true;\n\t}\n\tpublic override onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\tif (this._samplingState) {\n\t\t\tconst ranges: { fromLineNumber: number; toLineNumber: number }[] = [];\n\t\t\tfor (const range of e.ranges) {\n\t\t\t\tconst minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n\t\t\t\tif (minimapLineRange) {\n\t\t\t\t\tranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ranges.length) {\n\t\t\t\treturn this._actual.onTokensChanged(ranges);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._actual.onTokensChanged(e.ranges);\n\t\t}\n\t}\n\tpublic override onTokensColorsChanged(e: viewEvents.ViewTokensColorsChangedEvent): boolean {\n\t\tthis._onOptionsMaybeChanged();\n\t\treturn this._actual.onTokensColorsChanged();\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn this._actual.onZonesChanged();\n\t}\n\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (this._shouldCheckSampling) {\n\t\t\tthis._shouldCheckSampling = false;\n\t\t\tthis._recreateLineSampling();\n\t\t}\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tlet viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tlet viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tif (this._samplingState) {\n\t\t\tviewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n\t\t\tviewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n\t\t}\n\n\t\tconst minimapCtx: IMinimapRenderingContext = {\n\t\t\tviewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n\n\t\t\tscrollWidth: ctx.scrollWidth,\n\t\t\tscrollHeight: ctx.scrollHeight,\n\n\t\t\tviewportStartLineNumber: viewportStartLineNumber,\n\t\t\tviewportEndLineNumber: viewportEndLineNumber,\n\t\t\tviewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n\n\t\t\tscrollTop: ctx.scrollTop,\n\t\t\tscrollLeft: ctx.scrollLeft,\n\n\t\t\tviewportWidth: ctx.viewportWidth,\n\t\t\tviewportHeight: ctx.viewportHeight,\n\t\t};\n\t\tthis._actual.render(minimapCtx);\n\t}\n\n\t//#region IMinimapModel\n\n\tprivate _recreateLineSampling(): void {\n\t\tthis._minimapSelections = null;\n\n\t\tconst wasSampling = Boolean(this._samplingState);\n\t\tconst [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n\t\tthis._samplingState = samplingState;\n\n\t\tif (wasSampling && this._samplingState) {\n\t\t\t// was sampling, is sampling\n\t\t\tfor (const event of events) {\n\t\t\t\tswitch (event.type) {\n\t\t\t\t\tcase 'deleted':\n\t\t\t\t\t\tthis._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'inserted':\n\t\t\t\t\t\tthis._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flush':\n\t\t\t\t\t\tthis._actual.onFlushed();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getLineCount(): number {\n\t\tif (this._samplingState) {\n\t\t\treturn this._samplingState.minimapLines.length;\n\t\t}\n\t\treturn this._context.viewModel.getLineCount();\n\t}\n\n\tpublic getRealLineCount(): number {\n\t\treturn this._context.viewModel.getLineCount();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\tif (this._samplingState) {\n\t\t\treturn this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n\t\t}\n\t\treturn this._context.viewModel.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\tif (this._samplingState) {\n\t\t\treturn this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n\t\t}\n\t\treturn this._context.viewModel.getLineMaxColumn(lineNumber);\n\t}\n\n\tpublic getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): (ViewLineData | null)[] {\n\t\tif (this._samplingState) {\n\t\t\tconst result: (ViewLineData | null)[] = [];\n\t\t\tfor (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n\t\t\t\tif (needed[lineIndex]) {\n\t\t\t\t\tresult[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n\t\t\t\t} else {\n\t\t\t\t\tresult[lineIndex] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\tif (this._minimapSelections === null) {\n\t\t\tif (this._samplingState) {\n\t\t\t\tthis._minimapSelections = [];\n\t\t\t\tfor (const selection of this._selections) {\n\t\t\t\t\tconst [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n\t\t\t\t\tthis._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._minimapSelections = this._selections;\n\t\t\t}\n\t\t}\n\t\treturn this._minimapSelections;\n\t}\n\n\tpublic getMinimapDecorationsInViewport(startLineNumber: number, endLineNumber: number): ViewModelDecoration[] {\n\t\tconst decorations = this._getMinimapDecorationsInViewport(startLineNumber, endLineNumber)\n\t\t\t.filter(decoration => !decoration.options.minimap?.sectionHeaderStyle);\n\n\t\tif (this._samplingState) {\n\t\t\tconst result: ViewModelDecoration[] = [];\n\t\t\tfor (const decoration of decorations) {\n\t\t\t\tif (!decoration.options.minimap) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst range = decoration.range;\n\t\t\t\tconst minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n\t\t\t\tconst minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n\t\t\t\tresult.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn decorations;\n\t}\n\n\tpublic getSectionHeaderDecorationsInViewport(startLineNumber: number, endLineNumber: number): ViewModelDecoration[] {\n\t\tconst minimapLineHeight = this.options.minimapLineHeight;\n\t\tconst sectionHeaderFontSize = this.options.sectionHeaderFontSize;\n\t\tconst headerHeightInMinimapLines = sectionHeaderFontSize / minimapLineHeight;\n\t\tstartLineNumber = Math.floor(Math.max(1, startLineNumber - headerHeightInMinimapLines));\n\t\treturn this._getMinimapDecorationsInViewport(startLineNumber, endLineNumber)\n\t\t\t.filter(decoration => !!decoration.options.minimap?.sectionHeaderStyle);\n\t}\n\n\tprivate _getMinimapDecorationsInViewport(startLineNumber: number, endLineNumber: number) {\n\t\tlet visibleRange: Range;\n\t\tif (this._samplingState) {\n\t\t\tconst modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n\t\t\tconst modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n\t\t\tvisibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n\t\t} else {\n\t\t\tvisibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n\t\t}\n\t\treturn this._context.viewModel.getMinimapDecorationsInRange(visibleRange);\n\t}\n\n\tpublic getSectionHeaderText(decoration: ViewModelDecoration, fitWidth: (s: string) => string): string | null {\n\t\tconst headerText = decoration.options.minimap?.sectionHeaderText;\n\t\tif (!headerText) {\n\t\t\treturn null;\n\t\t}\n\t\tconst cachedText = this._sectionHeaderCache.get(headerText);\n\t\tif (cachedText) {\n\t\t\treturn cachedText;\n\t\t}\n\t\tconst fittedText = fitWidth(headerText);\n\t\tthis._sectionHeaderCache.set(headerText, fittedText);\n\t\treturn fittedText;\n\t}\n\n\tpublic getOptions(): TextModelResolvedOptions {\n\t\treturn this._context.viewModel.model.getOptions();\n\t}\n\n\tpublic revealLineNumber(lineNumber: number): void {\n\t\tif (this._samplingState) {\n\t\t\tlineNumber = this._samplingState.minimapLines[lineNumber - 1];\n\t\t}\n\t\tthis._context.viewModel.revealRange(\n\t\t\t'mouse',\n\t\t\tfalse,\n\t\t\tnew Range(lineNumber, 1, lineNumber, 1),\n\t\t\tviewEvents.VerticalRevealType.Center,\n\t\t\tScrollType.Smooth\n\t\t);\n\t}\n\n\tpublic setScrollTop(scrollTop: number): void {\n\t\tthis._context.viewModel.viewLayout.setScrollPosition({\n\t\t\tscrollTop: scrollTop\n\t\t}, ScrollType.Immediate);\n\t}\n\n\t//#endregion\n}\n\nclass InnerMinimap extends Disposable {\n\n\tprivate readonly _theme: EditorTheme;\n\tprivate readonly _model: IMinimapModel;\n\n\tprivate readonly _domNode: FastDomNode<HTMLElement>;\n\tprivate readonly _shadow: FastDomNode<HTMLElement>;\n\tprivate readonly _canvas: FastDomNode<HTMLCanvasElement>;\n\tprivate readonly _decorationsCanvas: FastDomNode<HTMLCanvasElement>;\n\tprivate readonly _slider: FastDomNode<HTMLElement>;\n\tprivate readonly _sliderHorizontal: FastDomNode<HTMLElement>;\n\tprivate readonly _pointerDownListener: IDisposable;\n\tprivate readonly _sliderPointerMoveMonitor: GlobalPointerMoveMonitor;\n\tprivate readonly _sliderPointerDownListener: IDisposable;\n\tprivate readonly _gestureDisposable: IDisposable;\n\tprivate readonly _sliderTouchStartListener: IDisposable;\n\tprivate readonly _sliderTouchMoveListener: IDisposable;\n\tprivate readonly _sliderTouchEndListener: IDisposable;\n\n\tprivate _lastRenderData: RenderData | null;\n\tprivate _selectionColor: Color | undefined;\n\tprivate _renderDecorations: boolean = false;\n\tprivate _gestureInProgress: boolean = false;\n\tprivate _buffers: MinimapBuffers | null;\n\n\tconstructor(\n\t\ttheme: EditorTheme,\n\t\tmodel: IMinimapModel\n\t) {\n\t\tsuper();\n\n\t\tthis._theme = theme;\n\t\tthis._model = model;\n\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\tthis._selectionColor = this._theme.getColor(minimapSelection);\n\n\t\tthis._domNode = createFastDomNode(document.createElement('div'));\n\t\tPartFingerprints.write(this._domNode, PartFingerprint.Minimap);\n\t\tthis._domNode.setClassName(this._getMinimapDomNodeClassName());\n\t\tthis._domNode.setPosition('absolute');\n\t\tthis._domNode.setAttribute('role', 'presentation');\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._shadow = createFastDomNode(document.createElement('div'));\n\t\tthis._shadow.setClassName('minimap-shadow-hidden');\n\t\tthis._domNode.appendChild(this._shadow);\n\n\t\tthis._canvas = createFastDomNode(document.createElement('canvas'));\n\t\tthis._canvas.setPosition('absolute');\n\t\tthis._canvas.setLeft(0);\n\t\tthis._domNode.appendChild(this._canvas);\n\n\t\tthis._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n\t\tthis._decorationsCanvas.setPosition('absolute');\n\t\tthis._decorationsCanvas.setClassName('minimap-decorations-layer');\n\t\tthis._decorationsCanvas.setLeft(0);\n\t\tthis._domNode.appendChild(this._decorationsCanvas);\n\n\t\tthis._slider = createFastDomNode(document.createElement('div'));\n\t\tthis._slider.setPosition('absolute');\n\t\tthis._slider.setClassName('minimap-slider');\n\t\tthis._slider.setLayerHinting(true);\n\t\tthis._slider.setContain('strict');\n\t\tthis._domNode.appendChild(this._slider);\n\n\t\tthis._sliderHorizontal = createFastDomNode(document.createElement('div'));\n\t\tthis._sliderHorizontal.setPosition('absolute');\n\t\tthis._sliderHorizontal.setClassName('minimap-slider-horizontal');\n\t\tthis._slider.appendChild(this._sliderHorizontal);\n\n\t\tthis._applyLayout();\n\n\t\tthis._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n\t\t\te.preventDefault();\n\n\t\t\tconst renderMinimap = this._model.options.renderMinimap;\n\t\t\tif (renderMinimap === RenderMinimap.None) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._lastRenderData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._model.options.size !== 'proportional') {\n\t\t\t\tif (e.button === 0 && this._lastRenderData) {\n\t\t\t\t\t// pretend the click occurred in the center of the slider\n\t\t\t\t\tconst position = dom.getDomNodePagePosition(this._slider.domNode);\n\t\t\t\t\tconst initialPosY = position.top + position.height / 2;\n\t\t\t\t\tthis._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\t\t\tconst internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n\t\t\tconst lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n\n\t\t\tlet lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;\n\t\t\tlineNumber = Math.min(lineNumber, this._model.getLineCount());\n\n\t\t\tthis._model.revealLineNumber(lineNumber);\n\t\t});\n\n\t\tthis._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n\n\t\tthis._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tif (e.button === 0 && this._lastRenderData) {\n\t\t\t\tthis._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n\t\t\t}\n\t\t});\n\n\t\tthis._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n\t\tthis._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e: GestureEvent) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tif (this._lastRenderData) {\n\t\t\t\tthis._slider.toggleClassName('active', true);\n\t\t\t\tthis._gestureInProgress = true;\n\t\t\t\tthis.scrollDueToTouchEvent(e);\n\t\t\t}\n\t\t}, { passive: false });\n\n\t\tthis._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e: GestureEvent) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tif (this._lastRenderData && this._gestureInProgress) {\n\t\t\t\tthis.scrollDueToTouchEvent(e);\n\t\t\t}\n\t\t}, { passive: false });\n\n\t\tthis._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e: GestureEvent) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tthis._gestureInProgress = false;\n\t\t\tthis._slider.toggleClassName('active', false);\n\t\t});\n\t}\n\n\tprivate _startSliderDragging(e: PointerEvent, initialPosY: number, initialSliderState: MinimapLayout): void {\n\t\tif (!e.target || !(e.target instanceof Element)) {\n\t\t\treturn;\n\t\t}\n\t\tconst initialPosX = e.pageX;\n\n\t\tthis._slider.toggleClassName('active', true);\n\n\t\tconst handlePointerMove = (posy: number, posx: number) => {\n\t\t\tconst minimapPosition = dom.getDomNodePagePosition(this._domNode.domNode);\n\t\t\tconst pointerOrthogonalDelta = Math.min(\n\t\t\t\tMath.abs(posx - initialPosX),\n\t\t\t\tMath.abs(posx - minimapPosition.left),\n\t\t\t\tMath.abs(posx - minimapPosition.left - minimapPosition.width)\n\t\t\t);\n\n\t\t\tif (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n\t\t\t\t// The pointer has wondered away from the scrollbar => reset dragging\n\t\t\t\tthis._model.setScrollTop(initialSliderState.scrollTop);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pointerDelta = posy - initialPosY;\n\t\t\tthis._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n\t\t};\n\n\t\tif (e.pageY !== initialPosY) {\n\t\t\thandlePointerMove(e.pageY, initialPosX);\n\t\t}\n\n\t\tthis._sliderPointerMoveMonitor.startMonitoring(\n\t\t\te.target,\n\t\t\te.pointerId,\n\t\t\te.buttons,\n\t\t\tpointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX),\n\t\t\t() => {\n\t\t\t\tthis._slider.toggleClassName('active', false);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate scrollDueToTouchEvent(touch: GestureEvent) {\n\t\tconst startY = this._domNode.domNode.getBoundingClientRect().top;\n\t\tconst scrollTop = this._lastRenderData!.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n\t\tthis._model.setScrollTop(scrollTop);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._pointerDownListener.dispose();\n\t\tthis._sliderPointerMoveMonitor.dispose();\n\t\tthis._sliderPointerDownListener.dispose();\n\t\tthis._gestureDisposable.dispose();\n\t\tthis._sliderTouchStartListener.dispose();\n\t\tthis._sliderTouchMoveListener.dispose();\n\t\tthis._sliderTouchEndListener.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tprivate _getMinimapDomNodeClassName(): string {\n\t\tconst class_ = ['minimap'];\n\t\tif (this._model.options.showSlider === 'always') {\n\t\t\tclass_.push('slider-always');\n\t\t} else {\n\t\t\tclass_.push('slider-mouseover');\n\t\t}\n\t\tif (this._model.options.autohide) {\n\t\t\tclass_.push('autohide');\n\t\t}\n\n\t\treturn class_.join(' ');\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this._domNode;\n\t}\n\n\tprivate _applyLayout(): void {\n\t\tthis._domNode.setLeft(this._model.options.minimapLeft);\n\t\tthis._domNode.setWidth(this._model.options.minimapWidth);\n\t\tthis._domNode.setHeight(this._model.options.minimapHeight);\n\t\tthis._shadow.setHeight(this._model.options.minimapHeight);\n\n\t\tthis._canvas.setWidth(this._model.options.canvasOuterWidth);\n\t\tthis._canvas.setHeight(this._model.options.canvasOuterHeight);\n\t\tthis._canvas.domNode.width = this._model.options.canvasInnerWidth;\n\t\tthis._canvas.domNode.height = this._model.options.canvasInnerHeight;\n\n\t\tthis._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n\t\tthis._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n\t\tthis._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n\t\tthis._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n\n\t\tthis._slider.setWidth(this._model.options.minimapWidth);\n\t}\n\n\tprivate _getBuffer(): ImageData | null {\n\t\tif (!this._buffers) {\n\t\t\tif (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n\t\t\t\tthis._buffers = new MinimapBuffers(\n\t\t\t\t\tthis._canvas.domNode.getContext('2d')!,\n\t\t\t\t\tthis._model.options.canvasInnerWidth,\n\t\t\t\t\tthis._model.options.canvasInnerHeight,\n\t\t\t\t\tthis._model.options.backgroundColor\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn this._buffers ? this._buffers.getBuffer() : null;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onDidChangeOptions(): void {\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\tthis._applyLayout();\n\t\tthis._domNode.setClassName(this._getMinimapDomNodeClassName());\n\t}\n\tpublic onSelectionChanged(): boolean {\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(): boolean {\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onFlushed(): boolean {\n\t\tthis._lastRenderData = null;\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(changeFromLineNumber: number, changeCount: number): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\treturn this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onLinesDeleted(deleteFromLineNumber: number, deleteToLineNumber: number): boolean {\n\t\tthis._lastRenderData?.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(insertFromLineNumber: number, insertToLineNumber: number): boolean {\n\t\tthis._lastRenderData?.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(): boolean {\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onThemeChanged(): boolean {\n\t\tthis._selectionColor = this._theme.getColor(minimapSelection);\n\t\tthis._renderDecorations = true;\n\t\treturn true;\n\t}\n\tpublic onTokensChanged(ranges: { fromLineNumber: number; toLineNumber: number }[]): boolean {\n\t\tif (this._lastRenderData) {\n\t\t\treturn this._lastRenderData.onTokensChanged(ranges);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onTokensColorsChanged(): boolean {\n\t\tthis._lastRenderData = null;\n\t\tthis._buffers = null;\n\t\treturn true;\n\t}\n\tpublic onZonesChanged(): boolean {\n\t\tthis._lastRenderData = null;\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tpublic render(renderingCtx: IMinimapRenderingContext): void {\n\t\tconst renderMinimap = this._model.options.renderMinimap;\n\t\tif (renderMinimap === RenderMinimap.None) {\n\t\t\tthis._shadow.setClassName('minimap-shadow-hidden');\n\t\t\tthis._sliderHorizontal.setWidth(0);\n\t\t\tthis._sliderHorizontal.setHeight(0);\n\t\t\treturn;\n\t\t}\n\t\tif (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n\t\t\tthis._shadow.setClassName('minimap-shadow-hidden');\n\t\t} else {\n\t\t\tthis._shadow.setClassName('minimap-shadow-visible');\n\t\t}\n\n\t\tconst layout = MinimapLayout.create(\n\t\t\tthis._model.options,\n\t\t\trenderingCtx.viewportStartLineNumber,\n\t\t\trenderingCtx.viewportEndLineNumber,\n\t\t\trenderingCtx.viewportStartLineNumberVerticalOffset,\n\t\t\trenderingCtx.viewportHeight,\n\t\t\trenderingCtx.viewportContainsWhitespaceGaps,\n\t\t\tthis._model.getLineCount(),\n\t\t\tthis._model.getRealLineCount(),\n\t\t\trenderingCtx.scrollTop,\n\t\t\trenderingCtx.scrollHeight,\n\t\t\tthis._lastRenderData ? this._lastRenderData.renderedLayout : null\n\t\t);\n\t\tthis._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n\t\tthis._slider.setTop(layout.sliderTop);\n\t\tthis._slider.setHeight(layout.sliderHeight);\n\n\t\t// Compute horizontal slider coordinates\n\t\tthis._sliderHorizontal.setLeft(0);\n\t\tthis._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n\t\tthis._sliderHorizontal.setTop(0);\n\t\tthis._sliderHorizontal.setHeight(layout.sliderHeight);\n\n\t\tthis.renderDecorations(layout);\n\t\tthis._lastRenderData = this.renderLines(layout);\n\t}\n\n\tprivate renderDecorations(layout: MinimapLayout) {\n\t\tif (this._renderDecorations) {\n\t\t\tthis._renderDecorations = false;\n\t\t\tconst selections = this._model.getSelections();\n\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\tconst decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n\t\t\tdecorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n\n\t\t\tconst { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n\t\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\t\t\tconst minimapCharWidth = this._model.options.minimapCharWidth;\n\t\t\tconst tabSize = this._model.getOptions().tabSize;\n\t\t\tconst canvasContext = this._decorationsCanvas.domNode.getContext('2d')!;\n\n\t\t\tcanvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n\n\t\t\t// We first need to render line highlights and then render decorations on top of those.\n\t\t\t// But we need to pick a single color for each line, and use that as a line highlight.\n\t\t\t// This needs to be the color of the decoration with the highest `zIndex`, but priority\n\t\t\t// is given to the selection.\n\n\t\t\tconst highlightedLines = new ContiguousLineMap<boolean>(layout.startLineNumber, layout.endLineNumber, false);\n\t\t\tthis._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight);\n\t\t\tthis._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight);\n\n\t\t\tconst lineOffsetMap = new ContiguousLineMap<number[] | null>(layout.startLineNumber, layout.endLineNumber, null);\n\t\t\tthis._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n\t\t\tthis._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n\t\t\tthis._renderSectionHeaders(layout);\n\t\t}\n\t}\n\n\tprivate _renderSelectionLineHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tselections: Selection[],\n\t\thighlightedLines: ContiguousLineMap<boolean>,\n\t\tlayout: MinimapLayout,\n\t\tminimapLineHeight: number\n\t): void {\n\t\tif (!this._selectionColor || this._selectionColor.isTransparent()) {\n\t\t\treturn;\n\t\t}\n\n\t\tcanvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n\n\t\tlet y1 = 0;\n\t\tlet y2 = 0;\n\n\t\tfor (const selection of selections) {\n\t\t\tconst intersection = layout.intersectWithViewport(selection);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\thighlightedLines.set(line, true);\n\t\t\t}\n\n\t\t\tconst yy1 = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n\t\t\tconst yy2 = layout.getYForLineNumber(endLineNumber, minimapLineHeight);\n\n\t\t\tif (y2 >= yy1) {\n\t\t\t\t// merge into previous\n\t\t\t\ty2 = yy2;\n\t\t\t} else {\n\t\t\t\tif (y2 > y1) {\n\t\t\t\t\t// flush\n\t\t\t\t\tcanvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n\t\t\t\t}\n\t\t\t\ty1 = yy1;\n\t\t\t\ty2 = yy2;\n\t\t\t}\n\t\t}\n\n\t\tif (y2 > y1) {\n\t\t\t// flush\n\t\t\tcanvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n\t\t}\n\t}\n\n\tprivate _renderDecorationsLineHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tdecorations: ViewModelDecoration[],\n\t\thighlightedLines: ContiguousLineMap<boolean>,\n\t\tlayout: MinimapLayout,\n\t\tminimapLineHeight: number\n\t): void {\n\n\t\tconst highlightColors = new Map<string, string>();\n\n\t\t// Loop backwards to hit first decorations with higher `zIndex`\n\t\tfor (let i = decorations.length - 1; i >= 0; i--) {\n\t\t\tconst decoration = decorations[i];\n\n\t\t\tconst minimapOptions = <ModelDecorationMinimapOptions | null | undefined>decoration.options.minimap;\n\t\t\tif (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst intersection = layout.intersectWithViewport(decoration.range);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tconst decorationColor = minimapOptions.getColor(this._theme.value);\n\t\t\tif (!decorationColor || decorationColor.isTransparent()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet highlightColor = highlightColors.get(decorationColor.toString());\n\t\t\tif (!highlightColor) {\n\t\t\t\thighlightColor = decorationColor.transparent(0.5).toString();\n\t\t\t\thighlightColors.set(decorationColor.toString(), highlightColor);\n\t\t\t}\n\n\t\t\tcanvasContext.fillStyle = highlightColor;\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\tif (highlightedLines.has(line)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\thighlightedLines.set(line, true);\n\t\t\t\tconst y = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n\t\t\t\tcanvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, minimapLineHeight);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderSelectionsHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tselections: Selection[],\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tlayout: MinimapLayout,\n\t\tlineHeight: number,\n\t\ttabSize: number,\n\t\tcharacterWidth: number,\n\t\tcanvasInnerWidth: number\n\t): void {\n\t\tif (!this._selectionColor || this._selectionColor.isTransparent()) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const selection of selections) {\n\t\t\tconst intersection = layout.intersectWithViewport(selection);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\tthis.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderDecorationsHighlights(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tdecorations: ViewModelDecoration[],\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tlayout: MinimapLayout,\n\t\tminimapLineHeight: number,\n\t\ttabSize: number,\n\t\tcharacterWidth: number,\n\t\tcanvasInnerWidth: number\n\t): void {\n\t\t// Loop forwards to hit first decorations with lower `zIndex`\n\t\tfor (const decoration of decorations) {\n\n\t\t\tconst minimapOptions = <ModelDecorationMinimapOptions | null | undefined>decoration.options.minimap;\n\t\t\tif (!minimapOptions) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst intersection = layout.intersectWithViewport(decoration.range);\n\t\t\tif (!intersection) {\n\t\t\t\t// entirely outside minimap's viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst [startLineNumber, endLineNumber] = intersection;\n\n\t\t\tconst decorationColor = minimapOptions.getColor(this._theme.value);\n\t\t\tif (!decorationColor || decorationColor.isTransparent()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (let line = startLineNumber; line <= endLineNumber; line++) {\n\t\t\t\tswitch (minimapOptions.position) {\n\n\t\t\t\t\tcase MinimapPosition.Inline:\n\t\t\t\t\t\tthis.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, minimapLineHeight, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth);\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase MinimapPosition.Gutter: {\n\t\t\t\t\t\tconst y = layout.getYForLineNumber(line, minimapLineHeight);\n\t\t\t\t\t\tconst x = 2;\n\t\t\t\t\t\tthis.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, minimapLineHeight);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderDecorationOnLine(\n\t\tcanvasContext: CanvasRenderingContext2D,\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tdecorationRange: Range,\n\t\tdecorationColor: Color | undefined,\n\t\tlayout: MinimapLayout,\n\t\tlineNumber: number,\n\t\theight: number,\n\t\tminimapLineHeight: number,\n\t\ttabSize: number,\n\t\tcharWidth: number,\n\t\tcanvasInnerWidth: number\n\t): void {\n\t\tconst y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n\n\t\t// Skip rendering the line if it's vertically outside our viewport\n\t\tif (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { startLineNumber, endLineNumber } = decorationRange;\n\t\tconst startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n\t\tconst endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n\n\t\tconst x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n\t\tconst x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n\n\t\tthis.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n\t}\n\n\tprivate getXOffsetForPosition(\n\t\tlineOffsetMap: ContiguousLineMap<number[] | null>,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\ttabSize: number,\n\t\tcharWidth: number,\n\t\tcanvasInnerWidth: number\n\t): number {\n\t\tif (column === 1) {\n\t\t\treturn MINIMAP_GUTTER_WIDTH;\n\t\t}\n\n\t\tconst minimumXOffset = (column - 1) * charWidth;\n\t\tif (minimumXOffset >= canvasInnerWidth) {\n\t\t\t// there is no need to look at actual characters,\n\t\t\t// as this column is certainly after the minimap width\n\t\t\treturn canvasInnerWidth;\n\t\t}\n\n\t\t// Cache line offset data so that it is only read once per line\n\t\tlet lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n\t\tif (!lineIndexToXOffset) {\n\t\t\tconst lineData = this._model.getLineContent(lineNumber);\n\t\t\tlineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n\t\t\tlet prevx = MINIMAP_GUTTER_WIDTH;\n\t\t\tfor (let i = 1; i < lineData.length + 1; i++) {\n\t\t\t\tconst charCode = lineData.charCodeAt(i - 1);\n\t\t\t\tconst dx = charCode === CharCode.Tab\n\t\t\t\t\t? tabSize * charWidth\n\t\t\t\t\t: strings.isFullWidthCharacter(charCode)\n\t\t\t\t\t\t? 2 * charWidth\n\t\t\t\t\t\t: charWidth;\n\n\t\t\t\tconst x = prevx + dx;\n\t\t\t\tif (x >= canvasInnerWidth) {\n\t\t\t\t\t// no need to keep on going, as we've hit the canvas width\n\t\t\t\t\tlineIndexToXOffset[i] = canvasInnerWidth;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlineIndexToXOffset[i] = x;\n\t\t\t\tprevx = x;\n\t\t\t}\n\n\t\t\tlineOffsetMap.set(lineNumber, lineIndexToXOffset);\n\t\t}\n\n\t\tif (column - 1 < lineIndexToXOffset.length) {\n\t\t\treturn lineIndexToXOffset[column - 1];\n\t\t}\n\t\t// goes over the canvas width\n\t\treturn canvasInnerWidth;\n\t}\n\n\tprivate renderDecoration(canvasContext: CanvasRenderingContext2D, decorationColor: Color | undefined, x: number, y: number, width: number, height: number) {\n\t\tcanvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n\t\tcanvasContext.fillRect(x, y, width, height);\n\t}\n\n\tprivate _renderSectionHeaders(layout: MinimapLayout) {\n\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\t\tconst sectionHeaderFontSize = this._model.options.sectionHeaderFontSize;\n\t\tconst sectionHeaderLetterSpacing = this._model.options.sectionHeaderLetterSpacing;\n\t\tconst backgroundFillHeight = sectionHeaderFontSize * 1.5;\n\t\tconst { canvasInnerWidth } = this._model.options;\n\n\t\tconst backgroundColor = this._model.options.backgroundColor;\n\t\tconst backgroundFill = `rgb(${backgroundColor.r} ${backgroundColor.g} ${backgroundColor.b} / .7)`;\n\t\tconst foregroundColor = this._model.options.sectionHeaderFontColor;\n\t\tconst foregroundFill = `rgb(${foregroundColor.r} ${foregroundColor.g} ${foregroundColor.b})`;\n\t\tconst separatorStroke = foregroundFill;\n\n\t\tconst canvasContext = this._decorationsCanvas.domNode.getContext('2d')!;\n\t\tcanvasContext.letterSpacing = sectionHeaderLetterSpacing + 'px';\n\t\tcanvasContext.font = '500 ' + sectionHeaderFontSize + 'px ' + this._model.options.sectionHeaderFontFamily;\n\t\tcanvasContext.strokeStyle = separatorStroke;\n\t\tcanvasContext.lineWidth = 0.2;\n\n\t\tconst decorations = this._model.getSectionHeaderDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n\t\tdecorations.sort((a, b) => a.range.startLineNumber - b.range.startLineNumber);\n\n\t\tconst fitWidth = InnerMinimap._fitSectionHeader.bind(null, canvasContext,\n\t\t\tcanvasInnerWidth - MINIMAP_GUTTER_WIDTH);\n\n\t\tfor (const decoration of decorations) {\n\t\t\tconst y = layout.getYForLineNumber(decoration.range.startLineNumber, minimapLineHeight) + sectionHeaderFontSize;\n\t\t\tconst backgroundFillY = y - sectionHeaderFontSize;\n\t\t\tconst separatorY = backgroundFillY + 2;\n\t\t\tconst headerText = this._model.getSectionHeaderText(decoration, fitWidth);\n\n\t\t\tInnerMinimap._renderSectionLabel(\n\t\t\t\tcanvasContext,\n\t\t\t\theaderText,\n\t\t\t\tdecoration.options.minimap?.sectionHeaderStyle === MinimapSectionHeaderStyle.Underlined,\n\t\t\t\tbackgroundFill,\n\t\t\t\tforegroundFill,\n\t\t\t\tcanvasInnerWidth,\n\t\t\t\tbackgroundFillY,\n\t\t\t\tbackgroundFillHeight,\n\t\t\t\ty,\n\t\t\t\tseparatorY);\n\t\t}\n\t}\n\n\tprivate static _fitSectionHeader(\n\t\ttarget: CanvasRenderingContext2D,\n\t\tmaxWidth: number,\n\t\theaderText: string,\n\t): string {\n\t\tif (!headerText) {\n\t\t\treturn headerText;\n\t\t}\n\n\t\tconst ellipsis = '\u2026';\n\t\tconst width = target.measureText(headerText).width;\n\t\tconst ellipsisWidth = target.measureText(ellipsis).width;\n\n\t\tif (width <= maxWidth || width <= ellipsisWidth) {\n\t\t\treturn headerText;\n\t\t}\n\n\t\tconst len = headerText.length;\n\t\tconst averageCharWidth = width / headerText.length;\n\t\tconst maxCharCount = Math.floor((maxWidth - ellipsisWidth) / averageCharWidth) - 1;\n\n\t\t// Find a halfway point that isn't after whitespace\n\t\tlet halfCharCount = Math.ceil(maxCharCount / 2);\n\t\twhile (halfCharCount > 0 && /\\s/.test(headerText[halfCharCount - 1])) {\n\t\t\t--halfCharCount;\n\t\t}\n\n\t\t// Split with ellipsis\n\t\treturn headerText.substring(0, halfCharCount)\n\t\t\t+ ellipsis + headerText.substring(len - (maxCharCount - halfCharCount));\n\t}\n\n\tprivate static _renderSectionLabel(\n\t\ttarget: CanvasRenderingContext2D,\n\t\theaderText: string | null,\n\t\thasSeparatorLine: boolean,\n\t\tbackgroundFill: string,\n\t\tforegroundFill: string,\n\t\tminimapWidth: number,\n\t\tbackgroundFillY: number,\n\t\tbackgroundFillHeight: number,\n\t\ttextY: number,\n\t\tseparatorY: number\n\t): void {\n\t\tif (headerText) {\n\t\t\ttarget.fillStyle = backgroundFill;\n\t\t\ttarget.fillRect(0, backgroundFillY, minimapWidth, backgroundFillHeight);\n\n\t\t\ttarget.fillStyle = foregroundFill;\n\t\t\ttarget.fillText(headerText, MINIMAP_GUTTER_WIDTH, textY);\n\t\t}\n\n\t\tif (hasSeparatorLine) {\n\t\t\ttarget.beginPath();\n\t\t\ttarget.moveTo(0, separatorY);\n\t\t\ttarget.lineTo(minimapWidth, separatorY);\n\t\t\ttarget.closePath();\n\t\t\ttarget.stroke();\n\t\t}\n\t}\n\n\tprivate renderLines(layout: MinimapLayout): RenderData | null {\n\t\tconst startLineNumber = layout.startLineNumber;\n\t\tconst endLineNumber = layout.endLineNumber;\n\t\tconst minimapLineHeight = this._model.options.minimapLineHeight;\n\n\t\t// Check if nothing changed w.r.t. lines from last frame\n\t\tif (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n\t\t\tconst _lastData = this._lastRenderData._get();\n\t\t\t// Nice!! Nothing changed from last frame\n\t\t\treturn new RenderData(layout, _lastData.imageData, _lastData.lines);\n\t\t}\n\n\t\t// Oh well!! We need to repaint some lines...\n\n\t\tconst imageData = this._getBuffer();\n\t\tif (!imageData) {\n\t\t\t// 0 width or 0 height canvas, nothing to do\n\t\t\treturn null;\n\t\t}\n\n\t\t// Render untouched lines by using last rendered data.\n\t\tconst [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(\n\t\t\timageData,\n\t\t\tlayout.topPaddingLineCount,\n\t\t\tstartLineNumber,\n\t\t\tendLineNumber,\n\t\t\tminimapLineHeight,\n\t\t\tthis._lastRenderData\n\t\t);\n\n\t\t// Fetch rendering info from view model for rest of lines that need rendering.\n\t\tconst lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n\t\tconst tabSize = this._model.getOptions().tabSize;\n\t\tconst defaultBackground = this._model.options.defaultBackgroundColor;\n\t\tconst background = this._model.options.backgroundColor;\n\t\tconst foregroundAlpha = this._model.options.foregroundAlpha;\n\t\tconst tokensColorTracker = this._model.tokensColorTracker;\n\t\tconst useLighterFont = tokensColorTracker.backgroundIsLight();\n\t\tconst renderMinimap = this._model.options.renderMinimap;\n\t\tconst charRenderer = this._model.options.charRenderer();\n\t\tconst fontScale = this._model.options.fontScale;\n\t\tconst minimapCharWidth = this._model.options.minimapCharWidth;\n\n\t\tconst baseCharHeight = (renderMinimap === RenderMinimap.Text ? Constants.BASE_CHAR_HEIGHT : Constants.BASE_CHAR_HEIGHT + 1);\n\t\tconst renderMinimapLineHeight = baseCharHeight * fontScale;\n\t\tconst innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n\n\t\t// Render the rest of lines\n\t\tconst backgroundA = background.a / 255;\n\t\tconst renderBackground = new RGBA8(\n\t\t\tMath.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r),\n\t\t\tMath.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g),\n\t\t\tMath.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b),\n\t\t\t255\n\t\t);\n\t\tlet dy = layout.topPaddingLineCount * minimapLineHeight;\n\t\tconst renderedLines: MinimapLine[] = [];\n\t\tfor (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n\t\t\tif (needed[lineIndex]) {\n\t\t\t\tInnerMinimap._renderLine(\n\t\t\t\t\timageData,\n\t\t\t\t\trenderBackground,\n\t\t\t\t\tbackground.a,\n\t\t\t\t\tuseLighterFont,\n\t\t\t\t\trenderMinimap,\n\t\t\t\t\tminimapCharWidth,\n\t\t\t\t\ttokensColorTracker,\n\t\t\t\t\tforegroundAlpha,\n\t\t\t\t\tcharRenderer,\n\t\t\t\t\tdy,\n\t\t\t\t\tinnerLinePadding,\n\t\t\t\t\ttabSize,\n\t\t\t\t\tlineInfo[lineIndex]!,\n\t\t\t\t\tfontScale,\n\t\t\t\t\tminimapLineHeight\n\t\t\t\t);\n\t\t\t}\n\t\t\trenderedLines[lineIndex] = new MinimapLine(dy);\n\t\t\tdy += minimapLineHeight;\n\t\t}\n\n\t\tconst dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n\t\tconst dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n\t\tconst dirtyHeight = dirtyY2 - dirtyY1;\n\n\t\t// Finally, paint to the canvas\n\t\tconst ctx = this._canvas.domNode.getContext('2d')!;\n\t\tctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n\n\t\t// Save rendered data for reuse on next frame if possible\n\t\treturn new RenderData(\n\t\t\tlayout,\n\t\t\timageData,\n\t\t\trenderedLines\n\t\t);\n\t}\n\n\tprivate static _renderUntouchedLines(\n\t\ttarget: ImageData,\n\t\ttopPaddingLineCount: number,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tminimapLineHeight: number,\n\t\tlastRenderData: RenderData | null,\n\t): [number, number, boolean[]] {\n\n\t\tconst needed: boolean[] = [];\n\t\tif (!lastRenderData) {\n\t\t\tfor (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n\t\t\t\tneeded[i] = true;\n\t\t\t}\n\t\t\treturn [-1, -1, needed];\n\t\t}\n\n\t\tconst _lastData = lastRenderData._get();\n\t\tconst lastTargetData = _lastData.imageData.data;\n\t\tconst lastStartLineNumber = _lastData.rendLineNumberStart;\n\t\tconst lastLines = _lastData.lines;\n\t\tconst lastLinesLength = lastLines.length;\n\t\tconst WIDTH = target.width;\n\t\tconst targetData = target.data;\n\n\t\tconst maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n\t\tlet dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n\t\tlet dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n\n\t\tlet copySourceStart = -1;\n\t\tlet copySourceEnd = -1;\n\t\tlet copyDestStart = -1;\n\t\tlet copyDestEnd = -1;\n\n\t\tlet dest_dy = topPaddingLineCount * minimapLineHeight;\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\t\tconst lastLineIndex = lineNumber - lastStartLineNumber;\n\t\t\tconst source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n\n\t\t\tif (source_dy === -1) {\n\t\t\t\tneeded[lineIndex] = true;\n\t\t\t\tdest_dy += minimapLineHeight;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst sourceStart = source_dy * WIDTH * 4;\n\t\t\tconst sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n\t\t\tconst destStart = dest_dy * WIDTH * 4;\n\t\t\tconst destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n\n\t\t\tif (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n\t\t\t\t// contiguous zone => extend copy request\n\t\t\t\tcopySourceEnd = sourceEnd;\n\t\t\t\tcopyDestEnd = destEnd;\n\t\t\t} else {\n\t\t\t\tif (copySourceStart !== -1) {\n\t\t\t\t\t// flush existing copy request\n\t\t\t\t\ttargetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n\t\t\t\t\tif (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n\t\t\t\t\t\tdirtyPixel1 = copySourceEnd;\n\t\t\t\t\t}\n\t\t\t\t\tif (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n\t\t\t\t\t\tdirtyPixel2 = copySourceStart;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcopySourceStart = sourceStart;\n\t\t\t\tcopySourceEnd = sourceEnd;\n\t\t\t\tcopyDestStart = destStart;\n\t\t\t\tcopyDestEnd = destEnd;\n\t\t\t}\n\n\t\t\tneeded[lineIndex] = false;\n\t\t\tdest_dy += minimapLineHeight;\n\t\t}\n\n\t\tif (copySourceStart !== -1) {\n\t\t\t// flush existing copy request\n\t\t\ttargetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n\t\t\tif (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n\t\t\t\tdirtyPixel1 = copySourceEnd;\n\t\t\t}\n\t\t\tif (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n\t\t\t\tdirtyPixel2 = copySourceStart;\n\t\t\t}\n\t\t}\n\n\t\tconst dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n\t\tconst dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n\n\t\treturn [dirtyY1, dirtyY2, needed];\n\t}\n\n\tprivate static _renderLine(\n\t\ttarget: ImageData,\n\t\tbackgroundColor: RGBA8,\n\t\tbackgroundAlpha: number,\n\t\tuseLighterFont: boolean,\n\t\trenderMinimap: RenderMinimap,\n\t\tcharWidth: number,\n\t\tcolorTracker: MinimapTokensColorTracker,\n\t\tforegroundAlpha: number,\n\t\tminimapCharRenderer: MinimapCharRenderer,\n\t\tdy: number,\n\t\tinnerLinePadding: number,\n\t\ttabSize: number,\n\t\tlineData: ViewLineData,\n\t\tfontScale: number,\n\t\tminimapLineHeight: number\n\t): void {\n\t\tconst content = lineData.content;\n\t\tconst tokens = lineData.tokens;\n\t\tconst maxDx = target.width - charWidth;\n\t\tconst force1pxHeight = (minimapLineHeight === 1);\n\n\t\tlet dx = MINIMAP_GUTTER_WIDTH;\n\t\tlet charIndex = 0;\n\t\tlet tabsCharDelta = 0;\n\n\t\tfor (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n\t\t\tconst tokenEndIndex = tokens.getEndOffset(tokenIndex);\n\t\t\tconst tokenColorId = tokens.getForeground(tokenIndex);\n\t\t\tconst tokenColor = colorTracker.getColor(tokenColorId);\n\n\t\t\tfor (; charIndex < tokenEndIndex; charIndex++) {\n\t\t\t\tif (dx > maxDx) {\n\t\t\t\t\t// hit edge of minimap\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst charCode = content.charCodeAt(charIndex);\n\n\t\t\t\tif (charCode === CharCode.Tab) {\n\t\t\t\t\tconst insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n\t\t\t\t\ttabsCharDelta += insertSpacesCount - 1;\n\t\t\t\t\t// No need to render anything since tab is invisible\n\t\t\t\t\tdx += insertSpacesCount * charWidth;\n\t\t\t\t} else if (charCode === CharCode.Space) {\n\t\t\t\t\t// No need to render anything since space is invisible\n\t\t\t\t\tdx += charWidth;\n\t\t\t\t} else {\n\t\t\t\t\t// Render twice for a full width character\n\t\t\t\t\tconst count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tif (renderMinimap === RenderMinimap.Blocks) {\n\t\t\t\t\t\t\tminimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n\t\t\t\t\t\t} else { // RenderMinimap.Text\n\t\t\t\t\t\t\tminimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdx += charWidth;\n\n\t\t\t\t\t\tif (dx > maxDx) {\n\t\t\t\t\t\t\t// hit edge of minimap\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass ContiguousLineMap<T> {\n\n\tprivate readonly _startLineNumber: number;\n\tprivate readonly _endLineNumber: number;\n\tprivate readonly _defaultValue: T;\n\tprivate readonly _values: T[];\n\n\tconstructor(startLineNumber: number, endLineNumber: number, defaultValue: T) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._endLineNumber = endLineNumber;\n\t\tthis._defaultValue = defaultValue;\n\t\tthis._values = [];\n\t\tfor (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n\t\t\tthis._values[i] = defaultValue;\n\t\t}\n\t}\n\n\tpublic has(lineNumber: number): boolean {\n\t\treturn (this.get(lineNumber) !== this._defaultValue);\n\t}\n\n\tpublic set(lineNumber: number, value: T): void {\n\t\tif (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n\t\t\treturn;\n\t\t}\n\t\tthis._values[lineNumber - this._startLineNumber] = value;\n\t}\n\n\tpublic get(lineNumber: number): T {\n\t\tif (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n\t\t\treturn this._defaultValue;\n\t\t}\n\t\treturn this._values[lineNumber - this._startLineNumber];\n\t}\n}\n\n"],
  "mappings": "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",
  "names": ["sliderHeight", "maxMinimapSliderTop", "computedSliderRatio", "sliderTop", "result"]
}
