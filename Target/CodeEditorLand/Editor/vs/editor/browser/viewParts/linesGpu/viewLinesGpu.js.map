{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/linesGpu/viewLinesGpu.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from '../../../../base/browser/dom.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport type { ViewLinesChangedEvent, ViewScrollChangedEvent } from '../../../common/viewEvents.js';\nimport type { ViewportData } from '../../../common/viewLayout/viewLinesViewportData.js';\nimport type { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport { TextureAtlas } from '../../gpu/atlas/textureAtlas.js';\nimport { TextureAtlasPage } from '../../gpu/atlas/textureAtlasPage.js';\nimport { FullFileRenderStrategy } from '../../gpu/fullFileRenderStrategy.js';\nimport { BindingId, type IGpuRenderStrategy } from '../../gpu/gpu.js';\nimport { GPULifecycle } from '../../gpu/gpuDisposable.js';\nimport { observeDevicePixelDimensions, quadVertices } from '../../gpu/gpuUtils.js';\nimport type { ViewGpuContext } from '../../gpu/viewGpuContext.js';\nimport type { RenderingContext, RestrictedRenderingContext } from '../../view/renderingContext.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewLineOptions } from '../lines/viewLineOptions.js';\n\n\nconst enum GlyphStorageBufferInfo {\n\tFloatsPerEntry = 2 + 2 + 2,\n\tBytesPerEntry = GlyphStorageBufferInfo.FloatsPerEntry * 4,\n\tOffset_TexturePosition = 0,\n\tOffset_TextureSize = 2,\n\tOffset_OriginPosition = 4,\n}\n\n/**\n * The GPU implementation of the ViewLines part.\n */\nexport class ViewLinesGpu extends ViewPart {\n\n\tprivate readonly canvas: HTMLCanvasElement;\n\n\tprivate _device!: GPUDevice;\n\tprivate _renderPassDescriptor!: GPURenderPassDescriptor;\n\tprivate _renderPassColorAttachment!: GPURenderPassColorAttachment;\n\tprivate _bindGroup!: GPUBindGroup;\n\tprivate _pipeline!: GPURenderPipeline;\n\n\tprivate _vertexBuffer!: GPUBuffer;\n\n\tstatic atlas: TextureAtlas;\n\n\tprivate readonly _glyphStorageBuffer: GPUBuffer[] = [];\n\tprivate _atlasGpuTexture!: GPUTexture;\n\tprivate readonly _atlasGpuTextureVersions: number[] = [];\n\n\tprivate _initialized = false;\n\n\tprivate _renderStrategy!: IGpuRenderStrategy;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tprivate readonly _viewGpuContext: ViewGpuContext,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper(context);\n\n\t\tthis.canvas = this._viewGpuContext.canvas.domNode;\n\n\t\tthis._register(this._viewGpuContext.onDidChangeCanvasDevicePixelDimensions(({ width, height }) => {\n\t\t\t// TODO: Request render, should this just call renderText with the last viewportData\n\t\t}));\n\n\t\tthis.initWebgpu();\n\t}\n\n\tasync initWebgpu() {\n\t\t// #region General\n\n\t\tthis._device = await this._viewGpuContext.device;\n\n\t\tconst presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\t\tthis._viewGpuContext.ctx.configure({\n\t\t\tdevice: this._device,\n\t\t\tformat: presentationFormat,\n\t\t\talphaMode: 'premultiplied',\n\t\t});\n\n\t\t// TODO: Should the texture atlas (shared across all editors) should be part of the gpu context (shared across view parts of this editor)?\n\t\t// Create texture atlas\n\t\tif (!ViewLinesGpu.atlas) {\n\t\t\tViewLinesGpu.atlas = this._instantiationService.createInstance(TextureAtlas, this._device.limits.maxTextureDimension2D, undefined);\n\t\t}\n\t\tconst atlas = ViewLinesGpu.atlas;\n\n\t\tthis._renderPassColorAttachment = {\n\t\t\tview: null!, // Will be filled at render time\n\t\t\tloadOp: 'load',\n\t\t\tstoreOp: 'store',\n\t\t};\n\t\tthis._renderPassDescriptor = {\n\t\t\tlabel: 'Monaco render pass',\n\t\t\tcolorAttachments: [this._renderPassColorAttachment],\n\t\t};\n\n\t\t// #endregion General\n\n\t\t// #region Uniforms\n\n\t\tlet layoutInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tconst enum Info {\n\t\t\t\tFloatsPerEntry = 6,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_CanvasWidth____ = 0,\n\t\t\t\tOffset_CanvasHeight___ = 1,\n\t\t\t\tOffset_ViewportOffsetX = 2,\n\t\t\t\tOffset_ViewportOffsetY = 3,\n\t\t\t\tOffset_ViewportWidth__ = 4,\n\t\t\t\tOffset_ViewportHeight_ = 5,\n\t\t\t}\n\t\t\tconst bufferValues = new Float32Array(Info.FloatsPerEntry);\n\t\t\tconst updateBufferValues = (canvasDevicePixelWidth: number = this.canvas.width, canvasDevicePixelHeight: number = this.canvas.height) => {\n\t\t\t\tbufferValues[Info.Offset_CanvasWidth____] = canvasDevicePixelWidth;\n\t\t\t\tbufferValues[Info.Offset_CanvasHeight___] = canvasDevicePixelHeight;\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetX] = Math.ceil(this._context.configuration.options.get(EditorOption.layoutInfo).contentLeft * getActiveWindow().devicePixelRatio);\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetY] = 0;\n\t\t\t\tbufferValues[Info.Offset_ViewportWidth__] = bufferValues[Info.Offset_CanvasWidth____] - bufferValues[Info.Offset_ViewportOffsetX];\n\t\t\t\tbufferValues[Info.Offset_ViewportHeight_] = bufferValues[Info.Offset_CanvasHeight___] - bufferValues[Info.Offset_ViewportOffsetY];\n\t\t\t\treturn bufferValues;\n\t\t\t};\n\t\t\tlayoutInfoUniformBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco uniform buffer',\n\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t}, () => updateBufferValues())).object;\n\t\t\tthis._register(observeDevicePixelDimensions(this.canvas, getActiveWindow(), (w, h) => {\n\t\t\t\tthis._device.queue.writeBuffer(layoutInfoUniformBuffer, 0, updateBufferValues(w, h));\n\t\t\t}));\n\t\t}\n\n\t\tlet atlasInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tconst enum Info {\n\t\t\t\tFloatsPerEntry = 2,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_Width_ = 0,\n\t\t\t\tOffset_Height = 1,\n\t\t\t}\n\t\t\tatlasInfoUniformBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco atlas info uniform buffer',\n\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t}, () => {\n\t\t\t\tconst values = new Float32Array(Info.FloatsPerEntry);\n\t\t\t\tvalues[Info.Offset_Width_] = atlas.pageSize;\n\t\t\t\tvalues[Info.Offset_Height] = atlas.pageSize;\n\t\t\t\treturn values;\n\t\t\t})).object;\n\t\t}\n\n\t\t// #endregion Uniforms\n\n\t\t// #region Storage buffers\n\n\t\tthis._renderStrategy = this._register(this._instantiationService.createInstance(FullFileRenderStrategy, this._context, this._device, this.canvas, ViewLinesGpu.atlas));\n\n\t\tthis._glyphStorageBuffer[0] = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco glyph storage buffer',\n\t\t\tsize: GlyphStorageBufferInfo.BytesPerEntry * TextureAtlasPage.maximumGlyphCount,\n\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t})).object;\n\t\tthis._glyphStorageBuffer[1] = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco glyph storage buffer',\n\t\t\tsize: GlyphStorageBufferInfo.BytesPerEntry * TextureAtlasPage.maximumGlyphCount,\n\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t})).object;\n\t\tthis._atlasGpuTextureVersions[0] = 0;\n\t\tthis._atlasGpuTextureVersions[1] = 0;\n\t\tthis._atlasGpuTexture = this._register(GPULifecycle.createTexture(this._device, {\n\t\t\tlabel: 'Monaco atlas texture',\n\t\t\tformat: 'rgba8unorm',\n\t\t\t// TODO: Dynamically grow/shrink layer count\n\t\t\tsize: { width: atlas.pageSize, height: atlas.pageSize, depthOrArrayLayers: 2 },\n\t\t\tdimension: '2d',\n\t\t\tusage: GPUTextureUsage.TEXTURE_BINDING |\n\t\t\t\tGPUTextureUsage.COPY_DST |\n\t\t\t\tGPUTextureUsage.RENDER_ATTACHMENT,\n\t\t})).object;\n\n\t\tthis._updateAtlasStorageBufferAndTexture();\n\n\t\t// #endregion Storage buffers\n\n\t\t// #region Vertex buffer\n\n\t\tthis._vertexBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco vertex buffer',\n\t\t\tsize: quadVertices.byteLength,\n\t\t\tusage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n\t\t}, quadVertices)).object;\n\n\t\t// #endregion Vertex buffer\n\n\t\t// #region Shader module\n\n\t\tconst module = this._device.createShaderModule({\n\t\t\tlabel: 'Monaco shader module',\n\t\t\tcode: this._renderStrategy.wgsl,\n\t\t});\n\n\t\t// #endregion Shader module\n\n\t\t// #region Pipeline\n\n\t\tthis._pipeline = this._device.createRenderPipeline({\n\t\t\tlabel: 'Monaco render pipeline',\n\t\t\tlayout: 'auto',\n\t\t\tvertex: {\n\t\t\t\tmodule,\n\t\t\t\tentryPoint: 'vs',\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tarrayStride: 2 * Float32Array.BYTES_PER_ELEMENT, // 2 floats, 4 bytes each\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{ shaderLocation: 0, offset: 0, format: 'float32x2' },  // position\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule,\n\t\t\t\tentryPoint: 'fs',\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: presentationFormat,\n\t\t\t\t\t\tblend: {\n\t\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\talpha: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\t// #endregion Pipeline\n\n\t\t// #region Bind group\n\n\t\tthis._bindGroup = this._device.createBindGroup({\n\t\t\tlabel: 'Monaco bind group',\n\t\t\tlayout: this._pipeline.getBindGroupLayout(0),\n\t\t\tentries: [\n\t\t\t\t// TODO: Pass in generically as array?\n\t\t\t\t{ binding: BindingId.GlyphInfo0, resource: { buffer: this._glyphStorageBuffer[0] } },\n\t\t\t\t{ binding: BindingId.GlyphInfo1, resource: { buffer: this._glyphStorageBuffer[1] } },\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.TextureSampler, resource: this._device.createSampler({\n\t\t\t\t\t\tlabel: 'Monaco atlas sampler',\n\t\t\t\t\t\tmagFilter: 'nearest',\n\t\t\t\t\t\tminFilter: 'nearest',\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\t{ binding: BindingId.Texture, resource: this._atlasGpuTexture.createView() },\n\t\t\t\t{ binding: BindingId.ViewportUniform, resource: { buffer: layoutInfoUniformBuffer } },\n\t\t\t\t{ binding: BindingId.AtlasDimensionsUniform, resource: { buffer: atlasInfoUniformBuffer } },\n\t\t\t\t...this._renderStrategy.bindGroupEntries\n\t\t\t],\n\t\t});\n\n\t\t// endregion Bind group\n\n\t\tthis._initialized = true;\n\t}\n\n\tprivate _updateAtlasStorageBufferAndTexture() {\n\t\tconst atlas = ViewLinesGpu.atlas;\n\n\t\tfor (const [layerIndex, page] of atlas.pages.entries()) {\n\t\t\t// Skip the update if it's already the latest version\n\t\t\tif (page.version === this._atlasGpuTextureVersions[layerIndex]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._logService.trace('Updating atlas page[', layerIndex, '] from version ', this._atlasGpuTextureVersions[layerIndex], ' to version ', page.version);\n\n\t\t\t// TODO: Reuse buffer instead of reconstructing each time\n\t\t\t// TODO: Dynamically set buffer size\n\t\t\tconst values = new Float32Array(GlyphStorageBufferInfo.FloatsPerEntry * TextureAtlasPage.maximumGlyphCount);\n\t\t\tlet entryOffset = 0;\n\t\t\tfor (const glyph of page.glyphs) {\n\t\t\t\tvalues[entryOffset + GlyphStorageBufferInfo.Offset_TexturePosition] = glyph.x;\n\t\t\t\tvalues[entryOffset + GlyphStorageBufferInfo.Offset_TexturePosition + 1] = glyph.y;\n\t\t\t\tvalues[entryOffset + GlyphStorageBufferInfo.Offset_TextureSize] = glyph.w;\n\t\t\t\tvalues[entryOffset + GlyphStorageBufferInfo.Offset_TextureSize + 1] = glyph.h;\n\t\t\t\tvalues[entryOffset + GlyphStorageBufferInfo.Offset_OriginPosition] = glyph.originOffsetX;\n\t\t\t\tvalues[entryOffset + GlyphStorageBufferInfo.Offset_OriginPosition + 1] = glyph.originOffsetY;\n\t\t\t\tentryOffset += GlyphStorageBufferInfo.FloatsPerEntry;\n\t\t\t}\n\t\t\tif (entryOffset / GlyphStorageBufferInfo.FloatsPerEntry > TextureAtlasPage.maximumGlyphCount) {\n\t\t\t\tthrow new Error(`Attempting to write more glyphs (${entryOffset / GlyphStorageBufferInfo.FloatsPerEntry}) than the GPUBuffer can hold (${TextureAtlasPage.maximumGlyphCount})`);\n\t\t\t}\n\t\t\tthis._device.queue.writeBuffer(this._glyphStorageBuffer[layerIndex], 0, values);\n\t\t\tif (page.usedArea.right - page.usedArea.left > 0 && page.usedArea.bottom - page.usedArea.top > 0) {\n\t\t\t\tthis._device.queue.copyExternalImageToTexture(\n\t\t\t\t\t{ source: page.source },\n\t\t\t\t\t{\n\t\t\t\t\t\ttexture: this._atlasGpuTexture,\n\t\t\t\t\t\torigin: {\n\t\t\t\t\t\t\tx: page.usedArea.left,\n\t\t\t\t\t\t\ty: page.usedArea.top,\n\t\t\t\t\t\t\tz: layerIndex\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: page.usedArea.right - page.usedArea.left,\n\t\t\t\t\t\theight: page.usedArea.bottom - page.usedArea.top\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._atlasGpuTextureVersions[layerIndex] = page.version;\n\t\t}\n\t}\n\n\tpublic static canRender(options: ViewLineOptions, viewportData: ViewportData, lineNumber: number): boolean {\n\t\tconst d = viewportData.getViewLineRenderingData(lineNumber);\n\t\t// TODO\n\t\treturn d.content.indexOf('e') !== -1;\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthrow new BugIndicatingError('Should not be called');\n\t}\n\n\tpublic override render(ctx: RestrictedRenderingContext): void {\n\t\tthrow new BugIndicatingError('Should not be called');\n\t}\n\n\toverride onLinesChanged(e: ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\toverride onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// subscribe to more events\n\n\tpublic renderText(viewportData: ViewportData): void {\n\t\tif (this._initialized) {\n\t\t\treturn this._renderText(viewportData);\n\t\t}\n\t}\n\n\tprivate _renderText(viewportData: ViewportData): void {\n\t\tconst options = new ViewLineOptions(this._context.configuration, this._context.theme.type);\n\n\t\tconst visibleObjectCount = this._renderStrategy.update(viewportData, options);\n\n\t\tthis._updateAtlasStorageBufferAndTexture();\n\n\t\tconst encoder = this._device.createCommandEncoder({ label: 'Monaco command encoder' });\n\n\t\tthis._renderPassColorAttachment.view = this._viewGpuContext.ctx.getCurrentTexture().createView({ label: 'Monaco canvas texture view' });\n\t\tconst pass = encoder.beginRenderPass(this._renderPassDescriptor);\n\t\tpass.setPipeline(this._pipeline);\n\t\tpass.setVertexBuffer(0, this._vertexBuffer);\n\n\t\tpass.setBindGroup(0, this._bindGroup);\n\n\t\tif (this._renderStrategy?.draw) {\n\t\t\t// TODO: Don't draw lines if ViewLinesGpu.canRender is false\n\t\t\tthis._renderStrategy.draw(pass, viewportData);\n\t\t} else {\n\t\t\tpass.draw(quadVertices.length / 2, visibleObjectCount);\n\t\t}\n\n\t\tpass.end();\n\n\t\tconst commandBuffer = encoder.finish();\n\n\t\tthis._device.queue.submit([commandBuffer]);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["GlyphStorageBufferInfo", "Info"]
}
