{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/viewParts/linesGpu/viewLinesGpu.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from \"../../../../base/browser/dom.js\";\nimport { BugIndicatingError } from \"../../../../base/common/errors.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { EditorOption } from \"../../../common/config/editorOptions.js\";\nimport type {\n\tViewLinesChangedEvent,\n\tViewScrollChangedEvent,\n} from \"../../../common/viewEvents.js\";\nimport type { ViewportData } from \"../../../common/viewLayout/viewLinesViewportData.js\";\nimport type { ViewContext } from \"../../../common/viewModel/viewContext.js\";\nimport { TextureAtlas } from \"../../gpu/atlas/textureAtlas.js\";\nimport { TextureAtlasPage } from \"../../gpu/atlas/textureAtlasPage.js\";\nimport { FullFileRenderStrategy } from \"../../gpu/fullFileRenderStrategy.js\";\nimport { BindingId, type IGpuRenderStrategy } from \"../../gpu/gpu.js\";\nimport { GPULifecycle } from \"../../gpu/gpuDisposable.js\";\nimport {\n\tobserveDevicePixelDimensions,\n\tquadVertices,\n} from \"../../gpu/gpuUtils.js\";\nimport type { ViewGpuContext } from \"../../gpu/viewGpuContext.js\";\nimport type {\n\tRenderingContext,\n\tRestrictedRenderingContext,\n} from \"../../view/renderingContext.js\";\nimport { ViewPart } from \"../../view/viewPart.js\";\nimport { ViewLineOptions } from \"../lines/viewLineOptions.js\";\n\nenum GlyphStorageBufferInfo {\n\tFloatsPerEntry = 2 + 2 + 2,\n\tBytesPerEntry = GlyphStorageBufferInfo.FloatsPerEntry * 4,\n\tOffset_TexturePosition = 0,\n\tOffset_TextureSize = 2,\n\tOffset_OriginPosition = 4,\n}\n\n/**\n * The GPU implementation of the ViewLines part.\n */\nexport class ViewLinesGpu extends ViewPart {\n\tprivate readonly canvas: HTMLCanvasElement;\n\n\tprivate _device!: GPUDevice;\n\tprivate _renderPassDescriptor!: GPURenderPassDescriptor;\n\tprivate _renderPassColorAttachment!: GPURenderPassColorAttachment;\n\tprivate _bindGroup!: GPUBindGroup;\n\tprivate _pipeline!: GPURenderPipeline;\n\n\tprivate _vertexBuffer!: GPUBuffer;\n\n\tstatic atlas: TextureAtlas;\n\n\tprivate readonly _glyphStorageBuffer: GPUBuffer[] = [];\n\tprivate _atlasGpuTexture!: GPUTexture;\n\tprivate readonly _atlasGpuTextureVersions: number[] = [];\n\n\tprivate _initialized = false;\n\n\tprivate _renderStrategy!: IGpuRenderStrategy;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tprivate readonly _viewGpuContext: ViewGpuContext,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper(context);\n\n\t\tthis.canvas = this._viewGpuContext.canvas.domNode;\n\n\t\tthis._register(this._viewGpuContext.onDidChangeCanvasDevicePixelDimensions(({ width, height }) => {\n\t\t\t// TODO: Request render, should this just call renderText with the last viewportData\n\t\t}));\n\n\t\tthis.initWebgpu();\n\t}\n\n\tasync initWebgpu() {\n\t\t// #region General\n\n\t\tthis._device = await this._viewGpuContext.device;\n\n\t\tconst presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\t\tthis._viewGpuContext.ctx.configure({\n\t\t\tdevice: this._device,\n\t\t\tformat: presentationFormat,\n\t\t\talphaMode: \"premultiplied\",\n\t\t});\n\n\t\t// TODO: Should the texture atlas (shared across all editors) should be part of the gpu context (shared across view parts of this editor)?\n\t\t// Create texture atlas\n\t\tif (!ViewLinesGpu.atlas) {\n\t\t\tViewLinesGpu.atlas = this._instantiationService.createInstance(\n\t\t\t\tTextureAtlas,\n\t\t\t\tthis._device.limits.maxTextureDimension2D,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\t\tconst atlas = ViewLinesGpu.atlas;\n\n\t\tthis._renderPassColorAttachment = {\n\t\t\tview: null!, // Will be filled at render time\n\t\t\tloadOp: \"load\",\n\t\t\tstoreOp: \"store\",\n\t\t};\n\t\tthis._renderPassDescriptor = {\n\t\t\tlabel: \"Monaco render pass\",\n\t\t\tcolorAttachments: [this._renderPassColorAttachment],\n\t\t};\n\n\t\t// #endregion General\n\n\t\t// #region Uniforms\n\n\t\tlet layoutInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tenum Info {\n\t\t\t\tFloatsPerEntry = 6,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_CanvasWidth____ = 0,\n\t\t\t\tOffset_CanvasHeight___ = 1,\n\t\t\t\tOffset_ViewportOffsetX = 2,\n\t\t\t\tOffset_ViewportOffsetY = 3,\n\t\t\t\tOffset_ViewportWidth__ = 4,\n\t\t\t\tOffset_ViewportHeight_ = 5,\n\t\t\t}\n\t\t\tconst bufferValues = new Float32Array(Info.FloatsPerEntry);\n\t\t\tconst updateBufferValues = (\n\t\t\t\tcanvasDevicePixelWidth: number = this.canvas.width,\n\t\t\t\tcanvasDevicePixelHeight: number = this.canvas.height,\n\t\t\t) => {\n\t\t\t\tbufferValues[Info.Offset_CanvasWidth____] =\n\t\t\t\t\tcanvasDevicePixelWidth;\n\t\t\t\tbufferValues[Info.Offset_CanvasHeight___] =\n\t\t\t\t\tcanvasDevicePixelHeight;\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetX] = Math.ceil(\n\t\t\t\t\tthis._context.configuration.options.get(\n\t\t\t\t\t\tEditorOption.layoutInfo,\n\t\t\t\t\t).contentLeft * getActiveWindow().devicePixelRatio,\n\t\t\t\t);\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetY] = 0;\n\t\t\t\tbufferValues[Info.Offset_ViewportWidth__] =\n\t\t\t\t\tbufferValues[Info.Offset_CanvasWidth____] -\n\t\t\t\t\tbufferValues[Info.Offset_ViewportOffsetX];\n\t\t\t\tbufferValues[Info.Offset_ViewportHeight_] =\n\t\t\t\t\tbufferValues[Info.Offset_CanvasHeight___] -\n\t\t\t\t\tbufferValues[Info.Offset_ViewportOffsetY];\n\t\t\t\treturn bufferValues;\n\t\t\t};\n\t\t\tlayoutInfoUniformBuffer = this._register(\n\t\t\t\tGPULifecycle.createBuffer(\n\t\t\t\t\tthis._device,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"Monaco uniform buffer\",\n\t\t\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t\t\t},\n\t\t\t\t\t() => updateBufferValues(),\n\t\t\t\t),\n\t\t\t).object;\n\t\t\tthis._register(\n\t\t\t\tobserveDevicePixelDimensions(\n\t\t\t\t\tthis.canvas,\n\t\t\t\t\tgetActiveWindow(),\n\t\t\t\t\t(w, h) => {\n\t\t\t\t\t\tthis._device.queue.writeBuffer(\n\t\t\t\t\t\t\tlayoutInfoUniformBuffer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tupdateBufferValues(w, h),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tlet atlasInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tenum Info {\n\t\t\t\tFloatsPerEntry = 2,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_Width_ = 0,\n\t\t\t\tOffset_Height = 1,\n\t\t\t}\n\t\t\tatlasInfoUniformBuffer = this._register(\n\t\t\t\tGPULifecycle.createBuffer(\n\t\t\t\t\tthis._device,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"Monaco atlas info uniform buffer\",\n\t\t\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst values = new Float32Array(Info.FloatsPerEntry);\n\t\t\t\t\t\tvalues[Info.Offset_Width_] = atlas.pageSize;\n\t\t\t\t\t\tvalues[Info.Offset_Height] = atlas.pageSize;\n\t\t\t\t\t\treturn values;\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t).object;\n\t\t}\n\n\t\t// #endregion Uniforms\n\n\t\t// #region Storage buffers\n\n\t\tthis._renderStrategy = this._register(\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\tFullFileRenderStrategy,\n\t\t\t\tthis._context,\n\t\t\t\tthis._device,\n\t\t\t\tthis.canvas,\n\t\t\t\tViewLinesGpu.atlas,\n\t\t\t),\n\t\t);\n\n\t\tthis._glyphStorageBuffer[0] = this._register(\n\t\t\tGPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: \"Monaco glyph storage buffer\",\n\t\t\t\tsize:\n\t\t\t\t\tGlyphStorageBufferInfo.BytesPerEntry *\n\t\t\t\t\tTextureAtlasPage.maximumGlyphCount,\n\t\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t\t}),\n\t\t).object;\n\t\tthis._glyphStorageBuffer[1] = this._register(\n\t\t\tGPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: \"Monaco glyph storage buffer\",\n\t\t\t\tsize:\n\t\t\t\t\tGlyphStorageBufferInfo.BytesPerEntry *\n\t\t\t\t\tTextureAtlasPage.maximumGlyphCount,\n\t\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t\t}),\n\t\t).object;\n\t\tthis._atlasGpuTextureVersions[0] = 0;\n\t\tthis._atlasGpuTextureVersions[1] = 0;\n\t\tthis._atlasGpuTexture = this._register(\n\t\t\tGPULifecycle.createTexture(this._device, {\n\t\t\t\tlabel: \"Monaco atlas texture\",\n\t\t\t\tformat: \"rgba8unorm\",\n\t\t\t\t// TODO: Dynamically grow/shrink layer count\n\t\t\t\tsize: {\n\t\t\t\t\twidth: atlas.pageSize,\n\t\t\t\t\theight: atlas.pageSize,\n\t\t\t\t\tdepthOrArrayLayers: 2,\n\t\t\t\t},\n\t\t\t\tdimension: \"2d\",\n\t\t\t\tusage:\n\t\t\t\t\tGPUTextureUsage.TEXTURE_BINDING |\n\t\t\t\t\tGPUTextureUsage.COPY_DST |\n\t\t\t\t\tGPUTextureUsage.RENDER_ATTACHMENT,\n\t\t\t}),\n\t\t).object;\n\n\t\tthis._updateAtlasStorageBufferAndTexture();\n\n\t\t// #endregion Storage buffers\n\n\t\t// #region Vertex buffer\n\n\t\tthis._vertexBuffer = this._register(\n\t\t\tGPULifecycle.createBuffer(\n\t\t\t\tthis._device,\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Monaco vertex buffer\",\n\t\t\t\t\tsize: quadVertices.byteLength,\n\t\t\t\t\tusage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n\t\t\t\t},\n\t\t\t\tquadVertices,\n\t\t\t),\n\t\t).object;\n\n\t\t// #endregion Vertex buffer\n\n\t\t// #region Shader module\n\n\t\tconst module = this._device.createShaderModule({\n\t\t\tlabel: \"Monaco shader module\",\n\t\t\tcode: this._renderStrategy.wgsl,\n\t\t});\n\n\t\t// #endregion Shader module\n\n\t\t// #region Pipeline\n\n\t\tthis._pipeline = this._device.createRenderPipeline({\n\t\t\tlabel: \"Monaco render pipeline\",\n\t\t\tlayout: \"auto\",\n\t\t\tvertex: {\n\t\t\t\tmodule,\n\t\t\t\tentryPoint: \"vs\",\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tarrayStride: 2 * Float32Array.BYTES_PER_ELEMENT, // 2 floats, 4 bytes each\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 0,\n\t\t\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\t\t\tformat: \"float32x2\",\n\t\t\t\t\t\t\t}, // position\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule,\n\t\t\t\tentryPoint: \"fs\",\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: presentationFormat,\n\t\t\t\t\t\tblend: {\n\t\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\t\tsrcFactor: \"src-alpha\",\n\t\t\t\t\t\t\t\tdstFactor: \"one-minus-src-alpha\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\talpha: {\n\t\t\t\t\t\t\t\tsrcFactor: \"src-alpha\",\n\t\t\t\t\t\t\t\tdstFactor: \"one-minus-src-alpha\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\t// #endregion Pipeline\n\n\t\t// #region Bind group\n\n\t\tthis._bindGroup = this._device.createBindGroup({\n\t\t\tlabel: \"Monaco bind group\",\n\t\t\tlayout: this._pipeline.getBindGroupLayout(0),\n\t\t\tentries: [\n\t\t\t\t// TODO: Pass in generically as array?\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.GlyphInfo0,\n\t\t\t\t\tresource: { buffer: this._glyphStorageBuffer[0] },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.GlyphInfo1,\n\t\t\t\t\tresource: { buffer: this._glyphStorageBuffer[1] },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.TextureSampler,\n\t\t\t\t\tresource: this._device.createSampler({\n\t\t\t\t\t\tlabel: \"Monaco atlas sampler\",\n\t\t\t\t\t\tmagFilter: \"nearest\",\n\t\t\t\t\t\tminFilter: \"nearest\",\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.Texture,\n\t\t\t\t\tresource: this._atlasGpuTexture.createView(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.ViewportUniform,\n\t\t\t\t\tresource: { buffer: layoutInfoUniformBuffer },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbinding: BindingId.AtlasDimensionsUniform,\n\t\t\t\t\tresource: { buffer: atlasInfoUniformBuffer },\n\t\t\t\t},\n\t\t\t\t...this._renderStrategy.bindGroupEntries,\n\t\t\t],\n\t\t});\n\n\t\t// endregion Bind group\n\n\t\tthis._initialized = true;\n\t}\n\n\tprivate _updateAtlasStorageBufferAndTexture() {\n\t\tconst atlas = ViewLinesGpu.atlas;\n\n\t\tfor (const [layerIndex, page] of atlas.pages.entries()) {\n\t\t\t// Skip the update if it's already the latest version\n\t\t\tif (page.version === this._atlasGpuTextureVersions[layerIndex]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._logService.trace(\n\t\t\t\t\"Updating atlas page[\",\n\t\t\t\tlayerIndex,\n\t\t\t\t\"] from version \",\n\t\t\t\tthis._atlasGpuTextureVersions[layerIndex],\n\t\t\t\t\" to version \",\n\t\t\t\tpage.version,\n\t\t\t);\n\n\t\t\t// TODO: Reuse buffer instead of reconstructing each time\n\t\t\t// TODO: Dynamically set buffer size\n\t\t\tconst values = new Float32Array(\n\t\t\t\tGlyphStorageBufferInfo.FloatsPerEntry *\n\t\t\t\t\tTextureAtlasPage.maximumGlyphCount,\n\t\t\t);\n\t\t\tlet entryOffset = 0;\n\t\t\tfor (const glyph of page.glyphs) {\n\t\t\t\tvalues[\n\t\t\t\t\tentryOffset + GlyphStorageBufferInfo.Offset_TexturePosition\n\t\t\t\t] = glyph.x;\n\t\t\t\tvalues[\n\t\t\t\t\tentryOffset +\n\t\t\t\t\t\tGlyphStorageBufferInfo.Offset_TexturePosition +\n\t\t\t\t\t\t1\n\t\t\t\t] = glyph.y;\n\t\t\t\tvalues[\n\t\t\t\t\tentryOffset + GlyphStorageBufferInfo.Offset_TextureSize\n\t\t\t\t] = glyph.w;\n\t\t\t\tvalues[\n\t\t\t\t\tentryOffset + GlyphStorageBufferInfo.Offset_TextureSize + 1\n\t\t\t\t] = glyph.h;\n\t\t\t\tvalues[\n\t\t\t\t\tentryOffset + GlyphStorageBufferInfo.Offset_OriginPosition\n\t\t\t\t] = glyph.originOffsetX;\n\t\t\t\tvalues[\n\t\t\t\t\tentryOffset +\n\t\t\t\t\t\tGlyphStorageBufferInfo.Offset_OriginPosition +\n\t\t\t\t\t\t1\n\t\t\t\t] = glyph.originOffsetY;\n\t\t\t\tentryOffset += GlyphStorageBufferInfo.FloatsPerEntry;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tentryOffset / GlyphStorageBufferInfo.FloatsPerEntry >\n\t\t\t\tTextureAtlasPage.maximumGlyphCount\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Attempting to write more glyphs (${entryOffset / GlyphStorageBufferInfo.FloatsPerEntry}) than the GPUBuffer can hold (${TextureAtlasPage.maximumGlyphCount})`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._device.queue.writeBuffer(\n\t\t\t\tthis._glyphStorageBuffer[layerIndex],\n\t\t\t\t0,\n\t\t\t\tvalues,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tpage.usedArea.right - page.usedArea.left > 0 &&\n\t\t\t\tpage.usedArea.bottom - page.usedArea.top > 0\n\t\t\t) {\n\t\t\t\tthis._device.queue.copyExternalImageToTexture(\n\t\t\t\t\t{ source: page.source },\n\t\t\t\t\t{\n\t\t\t\t\t\ttexture: this._atlasGpuTexture,\n\t\t\t\t\t\torigin: {\n\t\t\t\t\t\t\tx: page.usedArea.left,\n\t\t\t\t\t\t\ty: page.usedArea.top,\n\t\t\t\t\t\t\tz: layerIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: page.usedArea.right - page.usedArea.left,\n\t\t\t\t\t\theight: page.usedArea.bottom - page.usedArea.top,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._atlasGpuTextureVersions[layerIndex] = page.version;\n\t\t}\n\t}\n\n\tpublic static canRender(\n\t\toptions: ViewLineOptions,\n\t\tviewportData: ViewportData,\n\t\tlineNumber: number,\n\t): boolean {\n\t\tconst d = viewportData.getViewLineRenderingData(lineNumber);\n\t\t// TODO\n\t\treturn d.content.indexOf(\"e\") !== -1;\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthrow new BugIndicatingError(\"Should not be called\");\n\t}\n\n\tpublic override render(ctx: RestrictedRenderingContext): void {\n\t\tthrow new BugIndicatingError(\"Should not be called\");\n\t}\n\n\toverride onLinesChanged(e: ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\toverride onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// subscribe to more events\n\n\tpublic renderText(viewportData: ViewportData): void {\n\t\tif (this._initialized) {\n\t\t\treturn this._renderText(viewportData);\n\t\t}\n\t}\n\n\tprivate _renderText(viewportData: ViewportData): void {\n\t\tconst options = new ViewLineOptions(\n\t\t\tthis._context.configuration,\n\t\t\tthis._context.theme.type,\n\t\t);\n\n\t\tconst visibleObjectCount = this._renderStrategy.update(\n\t\t\tviewportData,\n\t\t\toptions,\n\t\t);\n\n\t\tthis._updateAtlasStorageBufferAndTexture();\n\n\t\tconst encoder = this._device.createCommandEncoder({\n\t\t\tlabel: \"Monaco command encoder\",\n\t\t});\n\n\t\tthis._renderPassColorAttachment.view = this._viewGpuContext.ctx\n\t\t\t.getCurrentTexture()\n\t\t\t.createView({ label: \"Monaco canvas texture view\" });\n\t\tconst pass = encoder.beginRenderPass(this._renderPassDescriptor);\n\t\tpass.setPipeline(this._pipeline);\n\t\tpass.setVertexBuffer(0, this._vertexBuffer);\n\n\t\tpass.setBindGroup(0, this._bindGroup);\n\n\t\tif (this._renderStrategy?.draw) {\n\t\t\t// TODO: Don't draw lines if ViewLinesGpu.canRender is false\n\t\t\tthis._renderStrategy.draw(pass, viewportData);\n\t\t} else {\n\t\t\tpass.draw(quadVertices.length / 2, visibleObjectCount);\n\t\t}\n\n\t\tpass.end();\n\n\t\tconst commandBuffer = encoder.finish();\n\n\t\tthis._device.queue.submit([commandBuffer]);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAO7B,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,8BAA8B;AACvC,SAAS,iBAA0C;AACnD,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAMP,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAEhC,IAAK,yBAAL,kBAAKA,4BAAL;AACC,EAAAA,gDAAA,oBAAiB,KAAjB;AACA,EAAAA,gDAAA,mBAAgB,MAAhB;AACA,EAAAA,gDAAA,4BAAyB,KAAzB;AACA,EAAAA,gDAAA,wBAAqB,KAArB;AACA,EAAAA,gDAAA,2BAAwB,KAAxB;AALI,SAAAA;AAAA,GAAA;AAWE,IAAM,eAAN,cAA2B,SAAS;AAAA,EAqB1C,YACC,SACiB,iBACuB,uBACV,aAC7B;AACD,UAAM,OAAO;AAJI;AACuB;AACV;AAI9B,SAAK,SAAS,KAAK,gBAAgB,OAAO;AAE1C,SAAK,UAAU,KAAK,gBAAgB,uCAAuC,CAAC,EAAE,OAAO,OAAO,MAAM;AAAA,IAElG,CAAC,CAAC;AAEF,SAAK,WAAW;AAAA,EACjB;AAAA,EAhFD,OA4C2C;AAAA;AAAA;AAAA,EACzB;AAAA,EAET;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EAER,OAAO;AAAA,EAEU,sBAAmC,CAAC;AAAA,EAC7C;AAAA,EACS,2BAAqC,CAAC;AAAA,EAE/C,eAAe;AAAA,EAEf;AAAA,EAmBR,MAAM,aAAa;AAGlB,SAAK,UAAU,MAAM,KAAK,gBAAgB;AAE1C,UAAM,qBAAqB,UAAU,IAAI,yBAAyB;AAClE,SAAK,gBAAgB,IAAI,UAAU;AAAA,MAClC,QAAQ,KAAK;AAAA,MACb,QAAQ;AAAA,MACR,WAAW;AAAA,IACZ,CAAC;AAID,QAAI,CAAC,aAAa,OAAO;AACxB,mBAAa,QAAQ,KAAK,sBAAsB;AAAA,QAC/C;AAAA,QACA,KAAK,QAAQ,OAAO;AAAA,QACpB;AAAA,MACD;AAAA,IACD;AACA,UAAM,QAAQ,aAAa;AAE3B,SAAK,6BAA6B;AAAA,MACjC,MAAM;AAAA;AAAA,MACN,QAAQ;AAAA,MACR,SAAS;AAAA,IACV;AACA,SAAK,wBAAwB;AAAA,MAC5B,OAAO;AAAA,MACP,kBAAkB,CAAC,KAAK,0BAA0B;AAAA,IACnD;AAMA,QAAI;AACJ;AACC,UAAK;AAAL,QAAKC,UAAL;AACC,QAAAA,YAAA,oBAAiB,KAAjB;AACA,QAAAA,YAAA,mBAAgB,MAAhB;AACA,QAAAA,YAAA,4BAAyB,KAAzB;AACA,QAAAA,YAAA,4BAAyB,KAAzB;AACA,QAAAA,YAAA,4BAAyB,KAAzB;AACA,QAAAA,YAAA,4BAAyB,KAAzB;AACA,QAAAA,YAAA,4BAAyB,KAAzB;AACA,QAAAA,YAAA,4BAAyB,KAAzB;AAAA,SARI;AAUL,YAAM,eAAe,IAAI,aAAa,sBAAmB;AACzD,YAAM,qBAAqB,wBAC1B,yBAAiC,KAAK,OAAO,OAC7C,0BAAkC,KAAK,OAAO,WAC1C;AACJ,qBAAa,8BAA2B,IACvC;AACD,qBAAa,8BAA2B,IACvC;AACD,qBAAa,8BAA2B,IAAI,KAAK;AAAA,UAChD,KAAK,SAAS,cAAc,QAAQ;AAAA,YACnC,aAAa;AAAA,UACd,EAAE,cAAc,gBAAgB,EAAE;AAAA,QACnC;AACA,qBAAa,8BAA2B,IAAI;AAC5C,qBAAa,8BAA2B,IACvC,aAAa,8BAA2B,IACxC,aAAa,8BAA2B;AACzC,qBAAa,8BAA2B,IACvC,aAAa,8BAA2B,IACxC,aAAa,8BAA2B;AACzC,eAAO;AAAA,MACR,GArB2B;AAsB3B,gCAA0B,KAAK;AAAA,QAC9B,aAAa;AAAA,UACZ,KAAK;AAAA,UACL;AAAA,YACC,OAAO;AAAA,YACP,MAAM;AAAA,YACN,OAAO,eAAe,UAAU,eAAe;AAAA,UAChD;AAAA,UACA,MAAM,mBAAmB;AAAA,QAC1B;AAAA,MACD,EAAE;AACF,WAAK;AAAA,QACJ;AAAA,UACC,KAAK;AAAA,UACL,gBAAgB;AAAA,UAChB,CAAC,GAAG,MAAM;AACT,iBAAK,QAAQ,MAAM;AAAA,cAClB;AAAA,cACA;AAAA,cACA,mBAAmB,GAAG,CAAC;AAAA,YACxB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI;AACJ;AACC,UAAK;AAAL,QAAKA,UAAL;AACC,QAAAA,YAAA,oBAAiB,KAAjB;AACA,QAAAA,YAAA,mBAAgB,KAAhB;AACA,QAAAA,YAAA,mBAAgB,KAAhB;AACA,QAAAA,YAAA,mBAAgB,KAAhB;AAAA,SAJI;AAML,+BAAyB,KAAK;AAAA,QAC7B,aAAa;AAAA,UACZ,KAAK;AAAA,UACL;AAAA,YACC,OAAO;AAAA,YACP,MAAM;AAAA,YACN,OAAO,eAAe,UAAU,eAAe;AAAA,UAChD;AAAA,UACA,MAAM;AACL,kBAAM,SAAS,IAAI,aAAa,sBAAmB;AACnD,mBAAO,qBAAkB,IAAI,MAAM;AACnC,mBAAO,qBAAkB,IAAI,MAAM;AACnC,mBAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD,EAAE;AAAA,IACH;AAMA,SAAK,kBAAkB,KAAK;AAAA,MAC3B,KAAK,sBAAsB;AAAA,QAC1B;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,aAAa;AAAA,MACd;AAAA,IACD;AAEA,SAAK,oBAAoB,CAAC,IAAI,KAAK;AAAA,MAClC,aAAa,aAAa,KAAK,SAAS;AAAA,QACvC,OAAO;AAAA,QACP,MACC,yBACA,iBAAiB;AAAA,QAClB,OAAO,eAAe,UAAU,eAAe;AAAA,MAChD,CAAC;AAAA,IACF,EAAE;AACF,SAAK,oBAAoB,CAAC,IAAI,KAAK;AAAA,MAClC,aAAa,aAAa,KAAK,SAAS;AAAA,QACvC,OAAO;AAAA,QACP,MACC,yBACA,iBAAiB;AAAA,QAClB,OAAO,eAAe,UAAU,eAAe;AAAA,MAChD,CAAC;AAAA,IACF,EAAE;AACF,SAAK,yBAAyB,CAAC,IAAI;AACnC,SAAK,yBAAyB,CAAC,IAAI;AACnC,SAAK,mBAAmB,KAAK;AAAA,MAC5B,aAAa,cAAc,KAAK,SAAS;AAAA,QACxC,OAAO;AAAA,QACP,QAAQ;AAAA;AAAA,QAER,MAAM;AAAA,UACL,OAAO,MAAM;AAAA,UACb,QAAQ,MAAM;AAAA,UACd,oBAAoB;AAAA,QACrB;AAAA,QACA,WAAW;AAAA,QACX,OACC,gBAAgB,kBAChB,gBAAgB,WAChB,gBAAgB;AAAA,MAClB,CAAC;AAAA,IACF,EAAE;AAEF,SAAK,oCAAoC;AAMzC,SAAK,gBAAgB,KAAK;AAAA,MACzB,aAAa;AAAA,QACZ,KAAK;AAAA,QACL;AAAA,UACC,OAAO;AAAA,UACP,MAAM,aAAa;AAAA,UACnB,OAAO,eAAe,SAAS,eAAe;AAAA,QAC/C;AAAA,QACA;AAAA,MACD;AAAA,IACD,EAAE;AAMF,UAAM,SAAS,KAAK,QAAQ,mBAAmB;AAAA,MAC9C,OAAO;AAAA,MACP,MAAM,KAAK,gBAAgB;AAAA,IAC5B,CAAC;AAMD,SAAK,YAAY,KAAK,QAAQ,qBAAqB;AAAA,MAClD,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,QACP;AAAA,QACA,YAAY;AAAA,QACZ,SAAS;AAAA,UACR;AAAA,YACC,aAAa,IAAI,aAAa;AAAA;AAAA,YAC9B,YAAY;AAAA,cACX;AAAA,gBACC,gBAAgB;AAAA,gBAChB,QAAQ;AAAA,gBACR,QAAQ;AAAA,cACT;AAAA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MACA,UAAU;AAAA,QACT;AAAA,QACA,YAAY;AAAA,QACZ,SAAS;AAAA,UACR;AAAA,YACC,QAAQ;AAAA,YACR,OAAO;AAAA,cACN,OAAO;AAAA,gBACN,WAAW;AAAA,gBACX,WAAW;AAAA,cACZ;AAAA,cACA,OAAO;AAAA,gBACN,WAAW;AAAA,gBACX,WAAW;AAAA,cACZ;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAMD,SAAK,aAAa,KAAK,QAAQ,gBAAgB;AAAA,MAC9C,OAAO;AAAA,MACP,QAAQ,KAAK,UAAU,mBAAmB,CAAC;AAAA,MAC3C,SAAS;AAAA;AAAA,QAER;AAAA,UACC,SAAS,UAAU;AAAA,UACnB,UAAU,EAAE,QAAQ,KAAK,oBAAoB,CAAC,EAAE;AAAA,QACjD;AAAA,QACA;AAAA,UACC,SAAS,UAAU;AAAA,UACnB,UAAU,EAAE,QAAQ,KAAK,oBAAoB,CAAC,EAAE;AAAA,QACjD;AAAA,QACA;AAAA,UACC,SAAS,UAAU;AAAA,UACnB,UAAU,KAAK,QAAQ,cAAc;AAAA,YACpC,OAAO;AAAA,YACP,WAAW;AAAA,YACX,WAAW;AAAA,UACZ,CAAC;AAAA,QACF;AAAA,QACA;AAAA,UACC,SAAS,UAAU;AAAA,UACnB,UAAU,KAAK,iBAAiB,WAAW;AAAA,QAC5C;AAAA,QACA;AAAA,UACC,SAAS,UAAU;AAAA,UACnB,UAAU,EAAE,QAAQ,wBAAwB;AAAA,QAC7C;AAAA,QACA;AAAA,UACC,SAAS,UAAU;AAAA,UACnB,UAAU,EAAE,QAAQ,uBAAuB;AAAA,QAC5C;AAAA,QACA,GAAG,KAAK,gBAAgB;AAAA,MACzB;AAAA,IACD,CAAC;AAID,SAAK,eAAe;AAAA,EACrB;AAAA,EAEQ,sCAAsC;AAC7C,UAAM,QAAQ,aAAa;AAE3B,eAAW,CAAC,YAAY,IAAI,KAAK,MAAM,MAAM,QAAQ,GAAG;AAEvD,UAAI,KAAK,YAAY,KAAK,yBAAyB,UAAU,GAAG;AAC/D;AAAA,MACD;AAEA,WAAK,YAAY;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAK,yBAAyB,UAAU;AAAA,QACxC;AAAA,QACA,KAAK;AAAA,MACN;AAIA,YAAM,SAAS,IAAI;AAAA,QAClB,yBACC,iBAAiB;AAAA,MACnB;AACA,UAAI,cAAc;AAClB,iBAAW,SAAS,KAAK,QAAQ;AAChC,eACC,cAAc,8BACf,IAAI,MAAM;AACV,eACC,cACC,iCACA,CACF,IAAI,MAAM;AACV,eACC,cAAc,0BACf,IAAI,MAAM;AACV,eACC,cAAc,6BAA4C,CAC3D,IAAI,MAAM;AACV,eACC,cAAc,6BACf,IAAI,MAAM;AACV,eACC,cACC,gCACA,CACF,IAAI,MAAM;AACV,uBAAe;AAAA,MAChB;AACA,UACC,cAAc,yBACd,iBAAiB,mBAChB;AACD,cAAM,IAAI;AAAA,UACT,oCAAoC,cAAc,sBAAqC,kCAAkC,iBAAiB,iBAAiB;AAAA,QAC5J;AAAA,MACD;AACA,WAAK,QAAQ,MAAM;AAAA,QAClB,KAAK,oBAAoB,UAAU;AAAA,QACnC;AAAA,QACA;AAAA,MACD;AACA,UACC,KAAK,SAAS,QAAQ,KAAK,SAAS,OAAO,KAC3C,KAAK,SAAS,SAAS,KAAK,SAAS,MAAM,GAC1C;AACD,aAAK,QAAQ,MAAM;AAAA,UAClB,EAAE,QAAQ,KAAK,OAAO;AAAA,UACtB;AAAA,YACC,SAAS,KAAK;AAAA,YACd,QAAQ;AAAA,cACP,GAAG,KAAK,SAAS;AAAA,cACjB,GAAG,KAAK,SAAS;AAAA,cACjB,GAAG;AAAA,YACJ;AAAA,UACD;AAAA,UACA;AAAA,YACC,OAAO,KAAK,SAAS,QAAQ,KAAK,SAAS;AAAA,YAC3C,QAAQ,KAAK,SAAS,SAAS,KAAK,SAAS;AAAA,UAC9C;AAAA,QACD;AAAA,MACD;AACA,WAAK,yBAAyB,UAAU,IAAI,KAAK;AAAA,IAClD;AAAA,EACD;AAAA,EAEA,OAAc,UACb,SACA,cACA,YACU;AACV,UAAM,IAAI,aAAa,yBAAyB,UAAU;AAE1D,WAAO,EAAE,QAAQ,QAAQ,GAAG,MAAM;AAAA,EACnC;AAAA,EAEO,cAAc,KAA6B;AACjD,UAAM,IAAI,mBAAmB,sBAAsB;AAAA,EACpD;AAAA,EAEgB,OAAO,KAAuC;AAC7D,UAAM,IAAI,mBAAmB,sBAAsB;AAAA,EACpD;AAAA,EAES,eAAe,GAAmC;AAC1D,WAAO;AAAA,EACR;AAAA,EAES,gBAAgB,GAAoC;AAC5D,WAAO;AAAA,EACR;AAAA;AAAA,EAIO,WAAW,cAAkC;AACnD,QAAI,KAAK,cAAc;AACtB,aAAO,KAAK,YAAY,YAAY;AAAA,IACrC;AAAA,EACD;AAAA,EAEQ,YAAY,cAAkC;AACrD,UAAM,UAAU,IAAI;AAAA,MACnB,KAAK,SAAS;AAAA,MACd,KAAK,SAAS,MAAM;AAAA,IACrB;AAEA,UAAM,qBAAqB,KAAK,gBAAgB;AAAA,MAC/C;AAAA,MACA;AAAA,IACD;AAEA,SAAK,oCAAoC;AAEzC,UAAM,UAAU,KAAK,QAAQ,qBAAqB;AAAA,MACjD,OAAO;AAAA,IACR,CAAC;AAED,SAAK,2BAA2B,OAAO,KAAK,gBAAgB,IAC1D,kBAAkB,EAClB,WAAW,EAAE,OAAO,6BAA6B,CAAC;AACpD,UAAM,OAAO,QAAQ,gBAAgB,KAAK,qBAAqB;AAC/D,SAAK,YAAY,KAAK,SAAS;AAC/B,SAAK,gBAAgB,GAAG,KAAK,aAAa;AAE1C,SAAK,aAAa,GAAG,KAAK,UAAU;AAEpC,QAAI,KAAK,iBAAiB,MAAM;AAE/B,WAAK,gBAAgB,KAAK,MAAM,YAAY;AAAA,IAC7C,OAAO;AACN,WAAK,KAAK,aAAa,SAAS,GAAG,kBAAkB;AAAA,IACtD;AAEA,SAAK,IAAI;AAET,UAAM,gBAAgB,QAAQ,OAAO;AAErC,SAAK,QAAQ,MAAM,OAAO,CAAC,aAAa,CAAC;AAAA,EAC1C;AACD;AA3ea,eAAN;AAAA,EAwBJ;AAAA,EACA;AAAA,GAzBU;",
  "names": ["GlyphStorageBufferInfo", "Info"]
}
