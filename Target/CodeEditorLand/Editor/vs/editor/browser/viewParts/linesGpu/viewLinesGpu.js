var w=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var x=(h,l,s,i)=>{for(var e=i>1?void 0:i?G(l,s):l,t=h.length-1,r;t>=0;t--)(r=h[t])&&(e=(i?r(l,s,e):r(e))||e);return i&&e&&w(l,s,e),e},m=(h,l)=>(s,i)=>l(s,i,h);import{getActiveWindow as P}from"../../../../base/browser/dom.js";import{BugIndicatingError as b}from"../../../../base/common/errors.js";import{IInstantiationService as O}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as B}from"../../../../platform/log/common/log.js";import{EditorOption as S}from"../../../common/config/editorOptions.js";import{TextureAtlas as C}from"../../gpu/atlas/textureAtlas.js";import{TextureAtlasPage as p}from"../../gpu/atlas/textureAtlasPage.js";import{FullFileRenderStrategy as T}from"../../gpu/fullFileRenderStrategy.js";import{BindingId as d}from"../../gpu/gpu.js";import{GPULifecycle as c}from"../../gpu/gpuDisposable.js";import{observeDevicePixelDimensions as U,quadVertices as v}from"../../gpu/gpuUtils.js";import{ViewPart as E}from"../../view/viewPart.js";import{ViewLineOptions as A}from"../lines/viewLineOptions.js";var V=(t=>(t[t.FloatsPerEntry=6]="FloatsPerEntry",t[t.BytesPerEntry=24]="BytesPerEntry",t[t.Offset_TexturePosition=0]="Offset_TexturePosition",t[t.Offset_TextureSize=2]="Offset_TextureSize",t[t.Offset_OriginPosition=4]="Offset_OriginPosition",t))(V||{});let f=class extends E{constructor(s,i,e,t){super(s);this._viewGpuContext=i;this._instantiationService=e;this._logService=t;this.canvas=this._viewGpuContext.canvas.domNode,this._register(this._viewGpuContext.onDidChangeCanvasDevicePixelDimensions(({width:r,height:n})=>{})),this.initWebgpu()}canvas;_device;_renderPassDescriptor;_renderPassColorAttachment;_bindGroup;_pipeline;_vertexBuffer;static atlas;_glyphStorageBuffer=[];_atlasGpuTexture;_atlasGpuTextureVersions=[];_initialized=!1;_renderStrategy;async initWebgpu(){this._device=await this._viewGpuContext.device;const s=navigator.gpu.getPreferredCanvasFormat();this._viewGpuContext.ctx.configure({device:this._device,format:s,alphaMode:"premultiplied"}),f.atlas||(f.atlas=this._instantiationService.createInstance(C,this._device.limits.maxTextureDimension2D,void 0));const i=f.atlas;this._renderPassColorAttachment={view:null,loadOp:"load",storeOp:"store"},this._renderPassDescriptor={label:"Monaco render pass",colorAttachments:[this._renderPassColorAttachment]};let e;{let n;(a=>(a[a.FloatsPerEntry=6]="FloatsPerEntry",a[a.BytesPerEntry=24]="BytesPerEntry",a[a.Offset_CanvasWidth____=0]="Offset_CanvasWidth____",a[a.Offset_CanvasHeight___=1]="Offset_CanvasHeight___",a[a.Offset_ViewportOffsetX=2]="Offset_ViewportOffsetX",a[a.Offset_ViewportOffsetY=3]="Offset_ViewportOffsetY",a[a.Offset_ViewportWidth__=4]="Offset_ViewportWidth__",a[a.Offset_ViewportHeight_=5]="Offset_ViewportHeight_"))(n||={});const o=new Float32Array(6),y=(_=this.canvas.width,g=this.canvas.height)=>(o[0]=_,o[1]=g,o[2]=Math.ceil(this._context.configuration.options.get(S.layoutInfo).contentLeft*P().devicePixelRatio),o[3]=0,o[4]=o[0]-o[2],o[5]=o[1]-o[3],o);e=this._register(c.createBuffer(this._device,{label:"Monaco uniform buffer",size:24,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},()=>y())).object,this._register(U(this.canvas,P(),(_,g)=>{this._device.queue.writeBuffer(e,0,y(_,g))}))}let t;{let n;(u=>(u[u.FloatsPerEntry=2]="FloatsPerEntry",u[u.BytesPerEntry=8]="BytesPerEntry",u[u.Offset_Width_=0]="Offset_Width_",u[u.Offset_Height=1]="Offset_Height"))(n||={}),t=this._register(c.createBuffer(this._device,{label:"Monaco atlas info uniform buffer",size:8,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},()=>{const o=new Float32Array(2);return o[0]=i.pageSize,o[1]=i.pageSize,o})).object}this._renderStrategy=this._register(this._instantiationService.createInstance(T,this._context,this._device,this.canvas,f.atlas)),this._glyphStorageBuffer[0]=this._register(c.createBuffer(this._device,{label:"Monaco glyph storage buffer",size:24*p.maximumGlyphCount,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})).object,this._glyphStorageBuffer[1]=this._register(c.createBuffer(this._device,{label:"Monaco glyph storage buffer",size:24*p.maximumGlyphCount,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})).object,this._atlasGpuTextureVersions[0]=0,this._atlasGpuTextureVersions[1]=0,this._atlasGpuTexture=this._register(c.createTexture(this._device,{label:"Monaco atlas texture",format:"rgba8unorm",size:{width:i.pageSize,height:i.pageSize,depthOrArrayLayers:2},dimension:"2d",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT})).object,this._updateAtlasStorageBufferAndTexture(),this._vertexBuffer=this._register(c.createBuffer(this._device,{label:"Monaco vertex buffer",size:v.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST},v)).object;const r=this._device.createShaderModule({label:"Monaco shader module",code:this._renderStrategy.wgsl});this._pipeline=this._device.createRenderPipeline({label:"Monaco render pipeline",layout:"auto",vertex:{module:r,entryPoint:"vs",buffers:[{arrayStride:2*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x2"}]}]},fragment:{module:r,entryPoint:"fs",targets:[{format:s,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"}}}]}}),this._bindGroup=this._device.createBindGroup({label:"Monaco bind group",layout:this._pipeline.getBindGroupLayout(0),entries:[{binding:d.GlyphInfo0,resource:{buffer:this._glyphStorageBuffer[0]}},{binding:d.GlyphInfo1,resource:{buffer:this._glyphStorageBuffer[1]}},{binding:d.TextureSampler,resource:this._device.createSampler({label:"Monaco atlas sampler",magFilter:"nearest",minFilter:"nearest"})},{binding:d.Texture,resource:this._atlasGpuTexture.createView()},{binding:d.ViewportUniform,resource:{buffer:e}},{binding:d.AtlasDimensionsUniform,resource:{buffer:t}},...this._renderStrategy.bindGroupEntries]}),this._initialized=!0}_updateAtlasStorageBufferAndTexture(){const s=f.atlas;for(const[i,e]of s.pages.entries()){if(e.version===this._atlasGpuTextureVersions[i])continue;this._logService.trace("Updating atlas page[",i,"] from version ",this._atlasGpuTextureVersions[i]," to version ",e.version);const t=new Float32Array(6*p.maximumGlyphCount);let r=0;for(const n of e.glyphs)t[r+0]=n.x,t[r+0+1]=n.y,t[r+2]=n.w,t[r+2+1]=n.h,t[r+4]=n.originOffsetX,t[r+4+1]=n.originOffsetY,r+=6;if(r/6>p.maximumGlyphCount)throw new Error(`Attempting to write more glyphs (${r/6}) than the GPUBuffer can hold (${p.maximumGlyphCount})`);this._device.queue.writeBuffer(this._glyphStorageBuffer[i],0,t),e.usedArea.right-e.usedArea.left>0&&e.usedArea.bottom-e.usedArea.top>0&&this._device.queue.copyExternalImageToTexture({source:e.source},{texture:this._atlasGpuTexture,origin:{x:e.usedArea.left,y:e.usedArea.top,z:i}},{width:e.usedArea.right-e.usedArea.left,height:e.usedArea.bottom-e.usedArea.top}),this._atlasGpuTextureVersions[i]=e.version}}static canRender(s,i,e){return i.getViewLineRenderingData(e).content.indexOf("e")!==-1}prepareRender(s){throw new b("Should not be called")}render(s){throw new b("Should not be called")}onLinesChanged(s){return!0}onScrollChanged(s){return!0}renderText(s){if(this._initialized)return this._renderText(s)}_renderText(s){const i=new A(this._context.configuration,this._context.theme.type),e=this._renderStrategy.update(s,i);this._updateAtlasStorageBufferAndTexture();const t=this._device.createCommandEncoder({label:"Monaco command encoder"});this._renderPassColorAttachment.view=this._viewGpuContext.ctx.getCurrentTexture().createView({label:"Monaco canvas texture view"});const r=t.beginRenderPass(this._renderPassDescriptor);r.setPipeline(this._pipeline),r.setVertexBuffer(0,this._vertexBuffer),r.setBindGroup(0,this._bindGroup),this._renderStrategy?.draw?this._renderStrategy.draw(r,s):r.draw(v.length/2,e),r.end();const n=t.finish();this._device.queue.submit([n])}};f=x([m(2,O),m(3,B)],f);export{f as ViewLinesGpu};
