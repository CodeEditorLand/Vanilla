{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/view/viewLayer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode, createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { EditorOption } from '../../common/config/editorOptions.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport * as viewEvents from '../../common/viewEvents.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\n\n/**\n * Represents a visible line\n */\nexport interface IVisibleLine extends ILine {\n\tgetDomNode(): HTMLElement | null;\n\tsetDomNode(domNode: HTMLElement): void;\n\n\t/**\n\t * Return null if the HTML should not be touched.\n\t * Return the new HTML otherwise.\n\t */\n\trenderLine(lineNumber: number, deltaTop: number, lineHeight: number, viewportData: ViewportData, sb: StringBuilder): boolean;\n\n\t/**\n\t * Layout the line.\n\t */\n\tlayoutLine(lineNumber: number, deltaTop: number, lineHeight: number): void;\n}\n\nexport interface ILine {\n\tonContentChanged(): void;\n\tonTokensChanged(): void;\n}\n\nexport interface ILineFactory<T extends ILine> {\n\tcreateLine(): T;\n}\n\nexport class RenderedLinesCollection<T extends ILine> {\n\tprivate _lines!: T[];\n\tprivate _rendLineNumberStart!: number;\n\n\tconstructor(\n\t\tprivate readonly _lineFactory: ILineFactory<T>,\n\t) {\n\t\tthis._set(1, []);\n\t}\n\n\tpublic flush(): void {\n\t\tthis._set(1, []);\n\t}\n\n\t_set(rendLineNumberStart: number, lines: T[]): void {\n\t\tthis._lines = lines;\n\t\tthis._rendLineNumberStart = rendLineNumberStart;\n\t}\n\n\t_get(): { rendLineNumberStart: number; lines: T[] } {\n\t\treturn {\n\t\t\trendLineNumberStart: this._rendLineNumberStart,\n\t\t\tlines: this._lines\n\t\t};\n\t}\n\n\t/**\n\t * @returns Inclusive line number that is inside this collection\n\t */\n\tpublic getStartLineNumber(): number {\n\t\treturn this._rendLineNumberStart;\n\t}\n\n\t/**\n\t * @returns Inclusive line number that is inside this collection\n\t */\n\tpublic getEndLineNumber(): number {\n\t\treturn this._rendLineNumberStart + this._lines.length - 1;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._lines.length;\n\t}\n\n\tpublic getLine(lineNumber: number): T {\n\t\tconst lineIndex = lineNumber - this._rendLineNumberStart;\n\t\tif (lineIndex < 0 || lineIndex >= this._lines.length) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._lines[lineIndex];\n\t}\n\n\t/**\n\t * @returns Lines that were removed from this collection\n\t */\n\tpublic onLinesDeleted(deleteFromLineNumber: number, deleteToLineNumber: number): T[] | null {\n\t\tif (this.getCount() === 0) {\n\t\t\t// no lines\n\t\t\treturn null;\n\t\t}\n\n\t\tconst startLineNumber = this.getStartLineNumber();\n\t\tconst endLineNumber = this.getEndLineNumber();\n\n\t\tif (deleteToLineNumber < startLineNumber) {\n\t\t\t// deleting above the viewport\n\t\t\tconst deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n\t\t\tthis._rendLineNumberStart -= deleteCnt;\n\t\t\treturn null;\n\t\t}\n\n\t\tif (deleteFromLineNumber > endLineNumber) {\n\t\t\t// deleted below the viewport\n\t\t\treturn null;\n\t\t}\n\n\t\t// Record what needs to be deleted\n\t\tlet deleteStartIndex = 0;\n\t\tlet deleteCount = 0;\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - this._rendLineNumberStart;\n\n\t\t\tif (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n\t\t\t\t// this is a line to be deleted\n\t\t\t\tif (deleteCount === 0) {\n\t\t\t\t\t// this is the first line to be deleted\n\t\t\t\t\tdeleteStartIndex = lineIndex;\n\t\t\t\t\tdeleteCount = 1;\n\t\t\t\t} else {\n\t\t\t\t\tdeleteCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Adjust this._rendLineNumberStart for lines deleted above\n\t\tif (deleteFromLineNumber < startLineNumber) {\n\t\t\t// Something was deleted above\n\t\t\tlet deleteAboveCount = 0;\n\n\t\t\tif (deleteToLineNumber < startLineNumber) {\n\t\t\t\t// the entire deleted lines are above\n\t\t\t\tdeleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n\t\t\t} else {\n\t\t\t\tdeleteAboveCount = startLineNumber - deleteFromLineNumber;\n\t\t\t}\n\n\t\t\tthis._rendLineNumberStart -= deleteAboveCount;\n\t\t}\n\n\t\tconst deleted = this._lines.splice(deleteStartIndex, deleteCount);\n\t\treturn deleted;\n\t}\n\n\tpublic onLinesChanged(changeFromLineNumber: number, changeCount: number): boolean {\n\t\tconst changeToLineNumber = changeFromLineNumber + changeCount - 1;\n\t\tif (this.getCount() === 0) {\n\t\t\t// no lines\n\t\t\treturn false;\n\t\t}\n\n\t\tconst startLineNumber = this.getStartLineNumber();\n\t\tconst endLineNumber = this.getEndLineNumber();\n\n\t\tlet someoneNotified = false;\n\n\t\tfor (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n\t\t\tif (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n\t\t\t\t// Notify the line\n\t\t\t\tthis._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n\t\t\t\tsomeoneNotified = true;\n\t\t\t}\n\t\t}\n\n\t\treturn someoneNotified;\n\t}\n\n\tpublic onLinesInserted(insertFromLineNumber: number, insertToLineNumber: number): T[] | null {\n\t\tif (this.getCount() === 0) {\n\t\t\t// no lines\n\t\t\treturn null;\n\t\t}\n\n\t\tconst insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n\t\tconst startLineNumber = this.getStartLineNumber();\n\t\tconst endLineNumber = this.getEndLineNumber();\n\n\t\tif (insertFromLineNumber <= startLineNumber) {\n\t\t\t// inserting above the viewport\n\t\t\tthis._rendLineNumberStart += insertCnt;\n\t\t\treturn null;\n\t\t}\n\n\t\tif (insertFromLineNumber > endLineNumber) {\n\t\t\t// inserting below the viewport\n\t\t\treturn null;\n\t\t}\n\n\t\tif (insertCnt + insertFromLineNumber > endLineNumber) {\n\t\t\t// insert inside the viewport in such a way that all remaining lines are pushed outside\n\t\t\tconst deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n\t\t\treturn deleted;\n\t\t}\n\n\t\t// insert inside the viewport, push out some lines, but not all remaining lines\n\t\tconst newLines: T[] = [];\n\t\tfor (let i = 0; i < insertCnt; i++) {\n\t\t\tnewLines[i] = this._lineFactory.createLine();\n\t\t}\n\t\tconst insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n\t\tconst beforeLines = this._lines.slice(0, insertIndex);\n\t\tconst afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n\t\tconst deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n\n\t\tthis._lines = beforeLines.concat(newLines).concat(afterLines);\n\n\t\treturn deletedLines;\n\t}\n\n\tpublic onTokensChanged(ranges: { fromLineNumber: number; toLineNumber: number }[]): boolean {\n\t\tif (this.getCount() === 0) {\n\t\t\t// no lines\n\t\t\treturn false;\n\t\t}\n\n\t\tconst startLineNumber = this.getStartLineNumber();\n\t\tconst endLineNumber = this.getEndLineNumber();\n\n\t\tlet notifiedSomeone = false;\n\t\tfor (let i = 0, len = ranges.length; i < len; i++) {\n\t\t\tconst rng = ranges[i];\n\n\t\t\tif (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n\t\t\t\t// range outside viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst from = Math.max(startLineNumber, rng.fromLineNumber);\n\t\t\tconst to = Math.min(endLineNumber, rng.toLineNumber);\n\n\t\t\tfor (let lineNumber = from; lineNumber <= to; lineNumber++) {\n\t\t\t\tconst lineIndex = lineNumber - this._rendLineNumberStart;\n\t\t\t\tthis._lines[lineIndex].onTokensChanged();\n\t\t\t\tnotifiedSomeone = true;\n\t\t\t}\n\t\t}\n\n\t\treturn notifiedSomeone;\n\t}\n}\n\nexport class VisibleLinesCollection<T extends IVisibleLine> {\n\n\tpublic readonly domNode: FastDomNode<HTMLElement> = this._createDomNode();\n\tprivate readonly _linesCollection: RenderedLinesCollection<T> = new RenderedLinesCollection<T>(this._lineFactory);\n\n\tconstructor(\n\t\tprivate readonly _lineFactory: ILineFactory<T>\n\t) {\n\t}\n\n\tprivate _createDomNode(): FastDomNode<HTMLElement> {\n\t\tconst domNode = createFastDomNode(document.createElement('div'));\n\t\tdomNode.setClassName('view-layer');\n\t\tdomNode.setPosition('absolute');\n\t\tdomNode.domNode.setAttribute('role', 'presentation');\n\t\tdomNode.domNode.setAttribute('aria-hidden', 'true');\n\t\treturn domNode;\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.hasChanged(EditorOption.layoutInfo)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\tthis._linesCollection.flush();\n\t\t// No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n\t\treturn true;\n\t}\n\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn this._linesCollection.onLinesChanged(e.fromLineNumber, e.count);\n\t}\n\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\tconst deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n\t\tif (deleted) {\n\t\t\t// Remove from DOM\n\t\t\tfor (let i = 0, len = deleted.length; i < len; i++) {\n\t\t\t\tconst lineDomNode = deleted[i].getDomNode();\n\t\t\t\tlineDomNode?.remove();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\tconst deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n\t\tif (deleted) {\n\t\t\t// Remove from DOM\n\t\t\tfor (let i = 0, len = deleted.length; i < len; i++) {\n\t\t\t\tconst lineDomNode = deleted[i].getDomNode();\n\t\t\t\tlineDomNode?.remove();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\n\tpublic onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\treturn this._linesCollection.onTokensChanged(e.ranges);\n\t}\n\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// ---- end view event handlers\n\n\tpublic getStartLineNumber(): number {\n\t\treturn this._linesCollection.getStartLineNumber();\n\t}\n\n\tpublic getEndLineNumber(): number {\n\t\treturn this._linesCollection.getEndLineNumber();\n\t}\n\n\tpublic getVisibleLine(lineNumber: number): T {\n\t\treturn this._linesCollection.getLine(lineNumber);\n\t}\n\n\tpublic renderLines(viewportData: ViewportData): void {\n\n\t\tconst inp = this._linesCollection._get();\n\n\t\tconst renderer = new ViewLayerRenderer<T>(this.domNode.domNode, this._lineFactory, viewportData);\n\n\t\tconst ctx: IRendererContext<T> = {\n\t\t\trendLineNumberStart: inp.rendLineNumberStart,\n\t\t\tlines: inp.lines,\n\t\t\tlinesLength: inp.lines.length\n\t\t};\n\n\t\t// Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n\t\tconst resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n\n\t\tthis._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n\t}\n}\n\ninterface IRendererContext<T extends IVisibleLine> {\n\trendLineNumberStart: number;\n\tlines: T[];\n\tlinesLength: number;\n}\n\nclass ViewLayerRenderer<T extends IVisibleLine> {\n\n\tprivate static _ttPolicy = createTrustedTypesPolicy('editorViewLayer', { createHTML: value => value });\n\n\tconstructor(\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly _lineFactory: ILineFactory<T>,\n\t\tprivate readonly _viewportData: ViewportData,\n\t) {\n\t}\n\n\tpublic render(inContext: IRendererContext<T>, startLineNumber: number, stopLineNumber: number, deltaTop: number[]): IRendererContext<T> {\n\n\t\tconst ctx: IRendererContext<T> = {\n\t\t\trendLineNumberStart: inContext.rendLineNumberStart,\n\t\t\tlines: inContext.lines.slice(0),\n\t\t\tlinesLength: inContext.linesLength\n\t\t};\n\n\t\tif ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\n\t\t\t// There is no overlap whatsoever\n\t\t\tctx.rendLineNumberStart = startLineNumber;\n\t\t\tctx.linesLength = stopLineNumber - startLineNumber + 1;\n\t\t\tctx.lines = [];\n\t\t\tfor (let x = startLineNumber; x <= stopLineNumber; x++) {\n\t\t\t\tctx.lines[x - startLineNumber] = this._lineFactory.createLine();\n\t\t\t}\n\t\t\tthis._finishRendering(ctx, true, deltaTop);\n\t\t\treturn ctx;\n\t\t}\n\n\t\t// Update lines which will remain untouched\n\t\tthis._renderUntouchedLines(\n\t\t\tctx,\n\t\t\tMath.max(startLineNumber - ctx.rendLineNumberStart, 0),\n\t\t\tMath.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1),\n\t\t\tdeltaTop,\n\t\t\tstartLineNumber\n\t\t);\n\n\t\tif (ctx.rendLineNumberStart > startLineNumber) {\n\t\t\t// Insert lines before\n\t\t\tconst fromLineNumber = startLineNumber;\n\t\t\tconst toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n\t\t\tif (fromLineNumber <= toLineNumber) {\n\t\t\t\tthis._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n\t\t\t\tctx.linesLength += toLineNumber - fromLineNumber + 1;\n\t\t\t}\n\t\t} else if (ctx.rendLineNumberStart < startLineNumber) {\n\t\t\t// Remove lines before\n\t\t\tconst removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n\t\t\tif (removeCnt > 0) {\n\t\t\t\tthis._removeLinesBefore(ctx, removeCnt);\n\t\t\t\tctx.linesLength -= removeCnt;\n\t\t\t}\n\t\t}\n\n\t\tctx.rendLineNumberStart = startLineNumber;\n\n\t\tif (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n\t\t\t// Insert lines after\n\t\t\tconst fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n\t\t\tconst toLineNumber = stopLineNumber;\n\n\t\t\tif (fromLineNumber <= toLineNumber) {\n\t\t\t\tthis._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n\t\t\t\tctx.linesLength += toLineNumber - fromLineNumber + 1;\n\t\t\t}\n\n\t\t} else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n\t\t\t// Remove lines after\n\t\t\tconst fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n\t\t\tconst toLineNumber = ctx.linesLength - 1;\n\t\t\tconst removeCnt = toLineNumber - fromLineNumber + 1;\n\n\t\t\tif (removeCnt > 0) {\n\t\t\t\tthis._removeLinesAfter(ctx, removeCnt);\n\t\t\t\tctx.linesLength -= removeCnt;\n\t\t\t}\n\t\t}\n\n\t\tthis._finishRendering(ctx, false, deltaTop);\n\n\t\treturn ctx;\n\t}\n\n\tprivate _renderUntouchedLines(ctx: IRendererContext<T>, startIndex: number, endIndex: number, deltaTop: number[], deltaLN: number): void {\n\t\tconst rendLineNumberStart = ctx.rendLineNumberStart;\n\t\tconst lines = ctx.lines;\n\n\t\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\t\tconst lineNumber = rendLineNumberStart + i;\n\t\t\tlines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN], this._viewportData.lineHeight);\n\t\t}\n\t}\n\n\tprivate _insertLinesBefore(ctx: IRendererContext<T>, fromLineNumber: number, toLineNumber: number, deltaTop: number[], deltaLN: number): void {\n\t\tconst newLines: T[] = [];\n\t\tlet newLinesLen = 0;\n\t\tfor (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n\t\t\tnewLines[newLinesLen++] = this._lineFactory.createLine();\n\t\t}\n\t\tctx.lines = newLines.concat(ctx.lines);\n\t}\n\n\tprivate _removeLinesBefore(ctx: IRendererContext<T>, removeCount: number): void {\n\t\tfor (let i = 0; i < removeCount; i++) {\n\t\t\tconst lineDomNode = ctx.lines[i].getDomNode();\n\t\t\tlineDomNode?.remove();\n\t\t}\n\t\tctx.lines.splice(0, removeCount);\n\t}\n\n\tprivate _insertLinesAfter(ctx: IRendererContext<T>, fromLineNumber: number, toLineNumber: number, deltaTop: number[], deltaLN: number): void {\n\t\tconst newLines: T[] = [];\n\t\tlet newLinesLen = 0;\n\t\tfor (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n\t\t\tnewLines[newLinesLen++] = this._lineFactory.createLine();\n\t\t}\n\t\tctx.lines = ctx.lines.concat(newLines);\n\t}\n\n\tprivate _removeLinesAfter(ctx: IRendererContext<T>, removeCount: number): void {\n\t\tconst removeIndex = ctx.linesLength - removeCount;\n\n\t\tfor (let i = 0; i < removeCount; i++) {\n\t\t\tconst lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n\t\t\tlineDomNode?.remove();\n\t\t}\n\t\tctx.lines.splice(removeIndex, removeCount);\n\t}\n\n\tprivate _finishRenderingNewLines(ctx: IRendererContext<T>, domNodeIsEmpty: boolean, newLinesHTML: string | TrustedHTML, wasNew: boolean[]): void {\n\t\tif (ViewLayerRenderer._ttPolicy) {\n\t\t\tnewLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML as string);\n\t\t}\n\t\tconst lastChild = <HTMLElement>this._domNode.lastChild;\n\t\tif (domNodeIsEmpty || !lastChild) {\n\t\t\tthis._domNode.innerHTML = newLinesHTML as string; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n\t\t} else {\n\t\t\tlastChild.insertAdjacentHTML('afterend', newLinesHTML as string);\n\t\t}\n\n\t\tlet currChild = <HTMLElement>this._domNode.lastChild;\n\t\tfor (let i = ctx.linesLength - 1; i >= 0; i--) {\n\t\t\tconst line = ctx.lines[i];\n\t\t\tif (wasNew[i]) {\n\t\t\t\tline.setDomNode(currChild);\n\t\t\t\tcurrChild = <HTMLElement>currChild.previousSibling;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _finishRenderingInvalidLines(ctx: IRendererContext<T>, invalidLinesHTML: string | TrustedHTML, wasInvalid: boolean[]): void {\n\t\tconst hugeDomNode = document.createElement('div');\n\n\t\tif (ViewLayerRenderer._ttPolicy) {\n\t\t\tinvalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML as string);\n\t\t}\n\t\thugeDomNode.innerHTML = invalidLinesHTML as string;\n\n\t\tfor (let i = 0; i < ctx.linesLength; i++) {\n\t\t\tconst line = ctx.lines[i];\n\t\t\tif (wasInvalid[i]) {\n\t\t\t\tconst source = <HTMLElement>hugeDomNode.firstChild;\n\t\t\t\tconst lineDomNode = line.getDomNode()!;\n\t\t\t\tlineDomNode.parentNode!.replaceChild(source, lineDomNode);\n\t\t\t\tline.setDomNode(source);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static readonly _sb = new StringBuilder(100000);\n\n\tprivate _finishRendering(ctx: IRendererContext<T>, domNodeIsEmpty: boolean, deltaTop: number[]): void {\n\n\t\tconst sb = ViewLayerRenderer._sb;\n\t\tconst linesLength = ctx.linesLength;\n\t\tconst lines = ctx.lines;\n\t\tconst rendLineNumberStart = ctx.rendLineNumberStart;\n\n\t\tconst wasNew: boolean[] = [];\n\t\t{\n\t\t\tsb.reset();\n\t\t\tlet hadNewLine = false;\n\n\t\t\tfor (let i = 0; i < linesLength; i++) {\n\t\t\t\tconst line = lines[i];\n\t\t\t\twasNew[i] = false;\n\n\t\t\t\tconst lineDomNode = line.getDomNode();\n\t\t\t\tif (lineDomNode) {\n\t\t\t\t\t// line is not new\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this._viewportData.lineHeight, this._viewportData, sb);\n\t\t\t\tif (!renderResult) {\n\t\t\t\t\t// line does not need rendering\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\twasNew[i] = true;\n\t\t\t\thadNewLine = true;\n\t\t\t}\n\n\t\t\tif (hadNewLine) {\n\t\t\t\tthis._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n\t\t\t}\n\t\t}\n\n\t\t{\n\t\t\tsb.reset();\n\n\t\t\tlet hadInvalidLine = false;\n\t\t\tconst wasInvalid: boolean[] = [];\n\n\t\t\tfor (let i = 0; i < linesLength; i++) {\n\t\t\t\tconst line = lines[i];\n\t\t\t\twasInvalid[i] = false;\n\n\t\t\t\tif (wasNew[i]) {\n\t\t\t\t\t// line was new\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this._viewportData.lineHeight, this._viewportData, sb);\n\t\t\t\tif (!renderResult) {\n\t\t\t\t\t// line does not need rendering\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\twasInvalid[i] = true;\n\t\t\t\thadInvalidLine = true;\n\t\t\t}\n\n\t\t\tif (hadInvalidLine) {\n\t\t\t\tthis._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
