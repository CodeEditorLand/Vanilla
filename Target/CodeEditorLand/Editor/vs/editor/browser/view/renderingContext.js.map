{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/view/renderingContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { IViewLayout, ViewModelDecoration } from '../../common/viewModel.js';\n\nexport interface IViewLines {\n\tlinesVisibleRangesForRange(range: Range, includeNewLines: boolean): LineVisibleRanges[] | null;\n\tvisibleRangeForPosition(position: Position): HorizontalPosition | null;\n}\n\nexport abstract class RestrictedRenderingContext {\n\t_restrictedRenderingContextBrand: void = undefined;\n\n\tpublic readonly viewportData: ViewportData;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollHeight: number;\n\n\tpublic readonly visibleRange: Range;\n\tpublic readonly bigNumbersDelta: number;\n\n\tpublic readonly scrollTop: number;\n\tpublic readonly scrollLeft: number;\n\n\tpublic readonly viewportWidth: number;\n\tpublic readonly viewportHeight: number;\n\n\tprivate readonly _viewLayout: IViewLayout;\n\n\tconstructor(viewLayout: IViewLayout, viewportData: ViewportData) {\n\t\tthis._viewLayout = viewLayout;\n\t\tthis.viewportData = viewportData;\n\n\t\tthis.scrollWidth = this._viewLayout.getScrollWidth();\n\t\tthis.scrollHeight = this._viewLayout.getScrollHeight();\n\n\t\tthis.visibleRange = this.viewportData.visibleRange;\n\t\tthis.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n\n\t\tconst vInfo = this._viewLayout.getCurrentViewport();\n\t\tthis.scrollTop = vInfo.top;\n\t\tthis.scrollLeft = vInfo.left;\n\t\tthis.viewportWidth = vInfo.width;\n\t\tthis.viewportHeight = vInfo.height;\n\t}\n\n\tpublic getScrolledTopFromAbsoluteTop(absoluteTop: number): number {\n\t\treturn absoluteTop - this.scrollTop;\n\t}\n\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number, includeViewZones?: boolean): number {\n\t\treturn this._viewLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n\t}\n\n\tpublic getVerticalOffsetAfterLineNumber(lineNumber: number, includeViewZones?: boolean): number {\n\t\treturn this._viewLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n\t}\n\n\tpublic getDecorationsInViewport(): ViewModelDecoration[] {\n\t\treturn this.viewportData.getDecorationsInViewport();\n\t}\n\n}\n\nexport class RenderingContext extends RestrictedRenderingContext {\n\t_renderingContextBrand: void = undefined;\n\n\tprivate readonly _viewLines: IViewLines;\n\n\tconstructor(viewLayout: IViewLayout, viewportData: ViewportData, viewLines: IViewLines) {\n\t\tsuper(viewLayout, viewportData);\n\t\tthis._viewLines = viewLines;\n\t}\n\n\tpublic linesVisibleRangesForRange(range: Range, includeNewLines: boolean): LineVisibleRanges[] | null {\n\t\treturn this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n\t}\n\n\tpublic visibleRangeForPosition(position: Position): HorizontalPosition | null {\n\t\treturn this._viewLines.visibleRangeForPosition(position);\n\t}\n}\n\nexport class LineVisibleRanges {\n\t/**\n\t * Returns the element with the smallest `lineNumber`.\n\t */\n\tpublic static firstLine(ranges: LineVisibleRanges[] | null): LineVisibleRanges | null {\n\t\tif (!ranges) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result: LineVisibleRanges | null = null;\n\t\tfor (const range of ranges) {\n\t\t\tif (!result || range.lineNumber < result.lineNumber) {\n\t\t\t\tresult = range;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the element with the largest `lineNumber`.\n\t */\n\tpublic static lastLine(ranges: LineVisibleRanges[] | null): LineVisibleRanges | null {\n\t\tif (!ranges) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result: LineVisibleRanges | null = null;\n\t\tfor (const range of ranges) {\n\t\t\tif (!result || range.lineNumber > result.lineNumber) {\n\t\t\t\tresult = range;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tpublic readonly outsideRenderedLine: boolean,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly ranges: HorizontalRange[],\n\t\t/**\n\t\t * Indicates if the requested range does not end in this line, but continues on the next line.\n\t\t */\n\t\tpublic readonly continuesOnNextLine: boolean,\n\t) { }\n}\n\nexport class HorizontalRange {\n\t_horizontalRangeBrand: void = undefined;\n\n\tpublic left: number;\n\tpublic width: number;\n\n\tpublic static from(ranges: FloatHorizontalRange[]): HorizontalRange[] {\n\t\tconst result = new Array(ranges.length);\n\t\tfor (let i = 0, len = ranges.length; i < len; i++) {\n\t\t\tconst range = ranges[i];\n\t\t\tresult[i] = new HorizontalRange(range.left, range.width);\n\t\t}\n\t\treturn result;\n\t}\n\n\tconstructor(left: number, width: number) {\n\t\tthis.left = Math.round(left);\n\t\tthis.width = Math.round(width);\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[${this.left},${this.width}]`;\n\t}\n}\n\nexport class FloatHorizontalRange {\n\t_floatHorizontalRangeBrand: void = undefined;\n\n\tpublic left: number;\n\tpublic width: number;\n\n\tconstructor(left: number, width: number) {\n\t\tthis.left = left;\n\t\tthis.width = width;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[${this.left},${this.width}]`;\n\t}\n\n\tpublic static compare(a: FloatHorizontalRange, b: FloatHorizontalRange): number {\n\t\treturn a.left - b.left;\n\t}\n}\n\nexport class HorizontalPosition {\n\tpublic outsideRenderedLine: boolean;\n\t/**\n\t * Math.round(this.originalLeft)\n\t */\n\tpublic left: number;\n\tpublic originalLeft: number;\n\n\tconstructor(outsideRenderedLine: boolean, left: number) {\n\t\tthis.outsideRenderedLine = outsideRenderedLine;\n\t\tthis.originalLeft = left;\n\t\tthis.left = Math.round(this.originalLeft);\n\t}\n}\n\nexport class VisibleRanges {\n\tconstructor(\n\t\tpublic readonly outsideRenderedLine: boolean,\n\t\tpublic readonly ranges: FloatHorizontalRange[]\n\t) {\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
