import{createFastDomNode as h}from"../../../base/browser/fastDomNode.js";import{EditorOption as o}from"../../common/config/editorOptions.js";import{applyFontInfo as s}from"../config/domFontInfo.js";import{VisibleLinesCollection as p}from"./viewLayer.js";import{ViewPart as m}from"./viewPart.js";class v extends m{_visibleLines;domNode;_dynamicOverlays=[];_isFocused=!1;constructor(e){super(e),this._visibleLines=new p({createLine:()=>new g(this._dynamicOverlays)}),this.domNode=this._visibleLines.domNode;const n=this._context.configuration.options.get(o.fontInfo);s(this.domNode,n),this.domNode.setClassName("view-overlays")}shouldRender(){if(super.shouldRender())return!0;for(let e=0,t=this._dynamicOverlays.length;e<t;e++)if(this._dynamicOverlays[e].shouldRender())return!0;return!1}dispose(){super.dispose();for(let e=0,t=this._dynamicOverlays.length;e<t;e++)this._dynamicOverlays[e].dispose();this._dynamicOverlays=[]}getDomNode(){return this.domNode}addDynamicOverlay(e){this._dynamicOverlays.push(e)}onConfigurationChanged(e){this._visibleLines.onConfigurationChanged(e);const n=this._context.configuration.options.get(o.fontInfo);return s(this.domNode,n),!0}onFlushed(e){return this._visibleLines.onFlushed(e)}onFocusChanged(e){return this._isFocused=e.isFocused,!0}onLinesChanged(e){return this._visibleLines.onLinesChanged(e)}onLinesDeleted(e){return this._visibleLines.onLinesDeleted(e)}onLinesInserted(e){return this._visibleLines.onLinesInserted(e)}onScrollChanged(e){return this._visibleLines.onScrollChanged(e)||!0}onTokensChanged(e){return this._visibleLines.onTokensChanged(e)}onZonesChanged(e){return this._visibleLines.onZonesChanged(e)}prepareRender(e){const t=this._dynamicOverlays.filter(n=>n.shouldRender());for(let n=0,l=t.length;n<l;n++){const i=t[n];i.prepareRender(e),i.onDidRender()}}render(e){this._viewOverlaysRender(e),this.domNode.toggleClassName("focused",this._isFocused)}_viewOverlaysRender(e){this._visibleLines.renderLines(e.viewportData)}}class g{_dynamicOverlays;_domNode;_renderedContent;constructor(e){this._dynamicOverlays=e,this._domNode=null,this._renderedContent=null}getDomNode(){return this._domNode?this._domNode.domNode:null}setDomNode(e){this._domNode=h(e)}onContentChanged(){}onTokensChanged(){}renderLine(e,t,n,l,i){let r="";for(let a=0,c=this._dynamicOverlays.length;a<c;a++){const u=this._dynamicOverlays[a];r+=u.render(l.startLineNumber,e)}return this._renderedContent===r?!1:(this._renderedContent=r,i.appendString('<div style="top:'),i.appendString(String(t)),i.appendString("px;height:"),i.appendString(String(n)),i.appendString('px;">'),i.appendString(r),i.appendString("</div>"),!0)}layoutLine(e,t,n){this._domNode&&(this._domNode.setTop(t),this._domNode.setHeight(n))}}class _ extends v{_contentWidth;constructor(e){super(e);const n=this._context.configuration.options.get(o.layoutInfo);this._contentWidth=n.contentWidth,this.domNode.setHeight(0)}onConfigurationChanged(e){const n=this._context.configuration.options.get(o.layoutInfo);return this._contentWidth=n.contentWidth,super.onConfigurationChanged(e)||!0}onScrollChanged(e){return super.onScrollChanged(e)||e.scrollWidthChanged}_viewOverlaysRender(e){super._viewOverlaysRender(e),this.domNode.setWidth(Math.max(e.scrollWidth,this._contentWidth))}}class L extends v{_contentLeft;constructor(e){super(e);const t=this._context.configuration.options,n=t.get(o.layoutInfo);this._contentLeft=n.contentLeft,this.domNode.setClassName("margin-view-overlays"),this.domNode.setWidth(1),s(this.domNode,t.get(o.fontInfo))}onConfigurationChanged(e){const t=this._context.configuration.options;s(this.domNode,t.get(o.fontInfo));const n=t.get(o.layoutInfo);return this._contentLeft=n.contentLeft,super.onConfigurationChanged(e)||!0}onScrollChanged(e){return super.onScrollChanged(e)||e.scrollHeightChanged}_viewOverlaysRender(e){super._viewOverlaysRender(e);const t=Math.min(e.scrollHeight,1e6);this.domNode.setHeight(t),this.domNode.setWidth(this._contentLeft)}}export{_ as ContentViewOverlays,L as MarginViewOverlays,g as ViewOverlayLine,v as ViewOverlays};
