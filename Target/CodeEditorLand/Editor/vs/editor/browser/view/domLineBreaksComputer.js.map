{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/view/domLineBreaksComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertIsDefined } from '../../../base/common/types.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { WrappingIndent } from '../../common/config/editorOptions.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport { InjectedTextOptions } from '../../common/model.js';\nimport { ILineBreaksComputer, ILineBreaksComputerFactory, ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\n\nconst ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });\n\nexport class DOMLineBreaksComputerFactory implements ILineBreaksComputerFactory {\n\n\tpublic static create(targetWindow: Window): DOMLineBreaksComputerFactory {\n\t\treturn new DOMLineBreaksComputerFactory(new WeakRef(targetWindow));\n\t}\n\n\tconstructor(private targetWindow: WeakRef<Window>) {\n\t}\n\n\tpublic createLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): ILineBreaksComputer {\n\t\tconst requests: string[] = [];\n\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\trequests.push(lineText);\n\t\t\t\tinjectedTexts.push(injectedText);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\treturn createLineBreaks(assertIsDefined(this.targetWindow.deref()), requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction createLineBreaks(targetWindow: Window, requests: string[], fontInfo: FontInfo, tabSize: number, firstLineBreakColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', injectedTextsPerLine: (LineInjectedText[] | null)[]): (ModelLineProjectionData | null)[] {\n\tfunction createEmptyLineBreakWithPossiblyInjectedText(requestIdx: number): ModelLineProjectionData | null {\n\t\tconst injectedTexts = injectedTextsPerLine[requestIdx];\n\t\tif (injectedTexts) {\n\t\t\tconst lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n\n\t\t\tconst injectionOptions = injectedTexts.map(t => t.options);\n\t\t\tconst injectionOffsets = injectedTexts.map(text => text.column - 1);\n\n\t\t\t// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n\t\t\t// because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n\t\t\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tif (firstLineBreakColumn === -1) {\n\t\tconst result: (ModelLineProjectionData | null)[] = [];\n\t\tfor (let i = 0, len = requests.length; i < len; i++) {\n\t\t\tresult[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n\t\t}\n\t\treturn result;\n\t}\n\n\tconst overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n\tconst additionalIndent = (wrappingIndent === WrappingIndent.DeepIndent ? 2 : wrappingIndent === WrappingIndent.Indent ? 1 : 0);\n\tconst additionalIndentSize = Math.round(tabSize * additionalIndent);\n\tconst additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n\n\tconst containerDomNode = document.createElement('div');\n\tapplyFontInfo(containerDomNode, fontInfo);\n\n\tconst sb = new StringBuilder(10000);\n\tconst firstNonWhitespaceIndices: number[] = [];\n\tconst wrappedTextIndentLengths: number[] = [];\n\tconst renderLineContents: string[] = [];\n\tconst allCharOffsets: number[][] = [];\n\tconst allVisibleColumns: number[][] = [];\n\tfor (let i = 0; i < requests.length; i++) {\n\t\tconst lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n\n\t\tlet firstNonWhitespaceIndex = 0;\n\t\tlet wrappedTextIndentLength = 0;\n\t\tlet width = overallWidth;\n\n\t\tif (wrappingIndent !== WrappingIndent.None) {\n\t\t\tfirstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\t\t\tif (firstNonWhitespaceIndex === -1) {\n\t\t\t\t// all whitespace line\n\t\t\t\tfirstNonWhitespaceIndex = 0;\n\n\t\t\t} else {\n\t\t\t\t// Track existing indent\n\n\t\t\t\tfor (let i = 0; i < firstNonWhitespaceIndex; i++) {\n\t\t\t\t\tconst charWidth = (\n\t\t\t\t\t\tlineContent.charCodeAt(i) === CharCode.Tab\n\t\t\t\t\t\t\t? (tabSize - (wrappedTextIndentLength % tabSize))\n\t\t\t\t\t\t\t: 1\n\t\t\t\t\t);\n\t\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t\t}\n\n\t\t\t\tconst indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n\n\t\t\t\t// Force sticking to beginning of line if no character would fit except for the indentation\n\t\t\t\tif (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n\t\t\t\t\tfirstNonWhitespaceIndex = 0;\n\t\t\t\t\twrappedTextIndentLength = 0;\n\t\t\t\t} else {\n\t\t\t\t\twidth = overallWidth - indentWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n\t\tconst tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n\t\tfirstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n\t\twrappedTextIndentLengths[i] = wrappedTextIndentLength;\n\t\trenderLineContents[i] = renderLineContent;\n\t\tallCharOffsets[i] = tmp[0];\n\t\tallVisibleColumns[i] = tmp[1];\n\t}\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy?.createHTML(html) ?? html;\n\tcontainerDomNode.innerHTML = trustedhtml as string;\n\n\tcontainerDomNode.style.position = 'absolute';\n\tcontainerDomNode.style.top = '10000';\n\tif (wordBreak === 'keepAll') {\n\t\t// word-break: keep-all; overflow-wrap: anywhere\n\t\tcontainerDomNode.style.wordBreak = 'keep-all';\n\t\tcontainerDomNode.style.overflowWrap = 'anywhere';\n\t} else {\n\t\t// overflow-wrap: break-word\n\t\tcontainerDomNode.style.wordBreak = 'inherit';\n\t\tcontainerDomNode.style.overflowWrap = 'break-word';\n\t}\n\ttargetWindow.document.body.appendChild(containerDomNode);\n\n\tconst range = document.createRange();\n\tconst lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n\n\tconst result: (ModelLineProjectionData | null)[] = [];\n\tfor (let i = 0; i < requests.length; i++) {\n\t\tconst lineDomNode = lineDomNodes[i];\n\t\tconst breakOffsets: number[] | null = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n\t\tif (breakOffsets === null) {\n\t\t\tresult[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n\t\tconst wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n\t\tconst visibleColumns = allVisibleColumns[i];\n\n\t\tconst breakOffsetsVisibleColumn: number[] = [];\n\t\tfor (let j = 0, len = breakOffsets.length; j < len; j++) {\n\t\t\tbreakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n\t\t}\n\n\t\tif (firstNonWhitespaceIndex !== 0) {\n\t\t\t// All break offsets are relative to the renderLineContent, make them absolute again\n\t\t\tfor (let j = 0, len = breakOffsets.length; j < len; j++) {\n\t\t\t\tbreakOffsets[j] += firstNonWhitespaceIndex;\n\t\t\t}\n\t\t}\n\n\t\tlet injectionOptions: InjectedTextOptions[] | null;\n\t\tlet injectionOffsets: number[] | null;\n\t\tconst curInjectedTexts = injectedTextsPerLine[i];\n\t\tif (curInjectedTexts) {\n\t\t\tinjectionOptions = curInjectedTexts.map(t => t.options);\n\t\t\tinjectionOffsets = curInjectedTexts.map(text => text.column - 1);\n\t\t} else {\n\t\t\tinjectionOptions = null;\n\t\t\tinjectionOffsets = null;\n\t\t}\n\n\t\tresult[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n\t}\n\n\tcontainerDomNode.remove();\n\treturn result;\n}\n\nconst enum Constants {\n\tSPAN_MODULO_LIMIT = 16384\n}\n\nfunction renderLine(lineContent: string, initialVisibleColumn: number, tabSize: number, width: number, sb: StringBuilder, wrappingIndentLength: number): [number[], number[]] {\n\n\tif (wrappingIndentLength !== 0) {\n\t\tconst hangingOffset = String(wrappingIndentLength);\n\t\tsb.appendString('<div style=\"text-indent: -');\n\t\tsb.appendString(hangingOffset);\n\t\tsb.appendString('px; padding-left: ');\n\t\tsb.appendString(hangingOffset);\n\t\tsb.appendString('px; box-sizing: border-box; width:');\n\t} else {\n\t\tsb.appendString('<div style=\"width:');\n\t}\n\tsb.appendString(String(width));\n\tsb.appendString('px;\">');\n\t// if (containsRTL) {\n\t// \tsb.appendASCIIString('\" dir=\"ltr');\n\t// }\n\n\tconst len = lineContent.length;\n\tlet visibleColumn = initialVisibleColumn;\n\tlet charOffset = 0;\n\tconst charOffsets: number[] = [];\n\tconst visibleColumns: number[] = [];\n\tlet nextCharCode = (0 < len ? lineContent.charCodeAt(0) : CharCode.Null);\n\n\tsb.appendString('<span>');\n\tfor (let charIndex = 0; charIndex < len; charIndex++) {\n\t\tif (charIndex !== 0 && charIndex % Constants.SPAN_MODULO_LIMIT === 0) {\n\t\t\tsb.appendString('</span><span>');\n\t\t}\n\t\tcharOffsets[charIndex] = charOffset;\n\t\tvisibleColumns[charIndex] = visibleColumn;\n\t\tconst charCode = nextCharCode;\n\t\tnextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : CharCode.Null);\n\t\tlet producedCharacters = 1;\n\t\tlet charWidth = 1;\n\t\tswitch (charCode) {\n\t\t\tcase CharCode.Tab:\n\t\t\t\tproducedCharacters = (tabSize - (visibleColumn % tabSize));\n\t\t\t\tcharWidth = producedCharacters;\n\t\t\t\tfor (let space = 1; space <= producedCharacters; space++) {\n\t\t\t\t\tif (space < producedCharacters) {\n\t\t\t\t\t\tsb.appendCharCode(0xA0); // &nbsp;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsb.appendASCIICharCode(CharCode.Space);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Space:\n\t\t\t\tif (nextCharCode === CharCode.Space) {\n\t\t\t\t\tsb.appendCharCode(0xA0); // &nbsp;\n\t\t\t\t} else {\n\t\t\t\t\tsb.appendASCIICharCode(CharCode.Space);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.LessThan:\n\t\t\t\tsb.appendString('&lt;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.GreaterThan:\n\t\t\t\tsb.appendString('&gt;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Ampersand:\n\t\t\t\tsb.appendString('&amp;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Null:\n\t\t\t\tsb.appendString('&#00;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.UTF8_BOM:\n\t\t\tcase CharCode.LINE_SEPARATOR:\n\t\t\tcase CharCode.PARAGRAPH_SEPARATOR:\n\t\t\tcase CharCode.NEXT_LINE:\n\t\t\t\tsb.appendCharCode(0xFFFD);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (strings.isFullWidthCharacter(charCode)) {\n\t\t\t\t\tcharWidth++;\n\t\t\t\t}\n\t\t\t\tif (charCode < 32) {\n\t\t\t\t\tsb.appendCharCode(9216 + charCode);\n\t\t\t\t} else {\n\t\t\t\t\tsb.appendCharCode(charCode);\n\t\t\t\t}\n\t\t}\n\n\t\tcharOffset += producedCharacters;\n\t\tvisibleColumn += charWidth;\n\t}\n\tsb.appendString('</span>');\n\n\tcharOffsets[lineContent.length] = charOffset;\n\tvisibleColumns[lineContent.length] = visibleColumn;\n\n\tsb.appendString('</div>');\n\n\treturn [charOffsets, visibleColumns];\n}\n\nfunction readLineBreaks(range: Range, lineDomNode: HTMLDivElement, lineContent: string, charOffsets: number[]): number[] | null {\n\tif (lineContent.length <= 1) {\n\t\treturn null;\n\t}\n\tconst spans = <HTMLSpanElement[]>Array.prototype.slice.call(lineDomNode.children, 0);\n\n\tconst breakOffsets: number[] = [];\n\ttry {\n\t\tdiscoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\treturn null;\n\t}\n\n\tif (breakOffsets.length === 0) {\n\t\treturn null;\n\t}\n\n\tbreakOffsets.push(lineContent.length);\n\treturn breakOffsets;\n}\n\nfunction discoverBreaks(range: Range, spans: HTMLSpanElement[], charOffsets: number[], low: number, lowRects: DOMRectList | null, high: number, highRects: DOMRectList | null, result: number[]): void {\n\tif (low === high) {\n\t\treturn;\n\t}\n\n\tlowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n\thighRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n\n\tif (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n\t\t// same line\n\t\treturn;\n\t}\n\n\t// there is at least one line break between these two offsets\n\tif (low + 1 === high) {\n\t\t// the two characters are adjacent, so the line break must be exactly between them\n\t\tresult.push(high);\n\t\treturn;\n\t}\n\n\tconst mid = low + ((high - low) / 2) | 0;\n\tconst midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n\tdiscoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n\tdiscoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\n\nfunction readClientRect(range: Range, spans: HTMLSpanElement[], startOffset: number, endOffset: number): DOMRectList {\n\trange.setStart(spans[(startOffset / Constants.SPAN_MODULO_LIMIT) | 0].firstChild!, startOffset % Constants.SPAN_MODULO_LIMIT);\n\trange.setEnd(spans[(endOffset / Constants.SPAN_MODULO_LIMIT) | 0].firstChild!, endOffset % Constants.SPAN_MODULO_LIMIT);\n\treturn range.getClientRects();\n}\n"],
  "mappings": "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",
  "names": ["result", "i", "Constants"]
}
