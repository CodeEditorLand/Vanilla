import{ScrollType as r}from"../common/editorCommon.js";class n{constructor(i,o,t,e,l){this._initialScrollTop=i;this._initialContentHeight=o;this._visiblePosition=t;this._visiblePositionScrollDelta=e;this._cursorPosition=l}static capture(i){if(i.getScrollTop()===0||i.hasPendingScrollAnimation())return new n(i.getScrollTop(),i.getContentHeight(),null,0,null);let o=null,t=0;const e=i.getVisibleRanges();if(e.length>0){o=e[0].getStartPosition();const l=i.getTopForPosition(o.lineNumber,o.column);t=i.getScrollTop()-l}return new n(i.getScrollTop(),i.getContentHeight(),o,t,i.getPosition())}restore(i){if(!(this._initialContentHeight===i.getContentHeight()&&this._initialScrollTop===i.getScrollTop())&&this._visiblePosition){const o=i.getTopForPosition(this._visiblePosition.lineNumber,this._visiblePosition.column);i.setScrollTop(o+this._visiblePositionScrollDelta)}}restoreRelativeVerticalPositionOfCursor(i){if(this._initialContentHeight===i.getContentHeight()&&this._initialScrollTop===i.getScrollTop())return;const o=i.getPosition();if(!this._cursorPosition||!o)return;const t=i.getTopForLineNumber(o.lineNumber)-i.getTopForLineNumber(this._cursorPosition.lineNumber);i.setScrollTop(i.getScrollTop()+t,r.Immediate)}}class s{constructor(i,o,t,e){this._initialScrollTop=i;this._initialContentHeight=o;this._visiblePosition=t;this._visiblePositionScrollDelta=e}static capture(i){if(i.hasPendingScrollAnimation())return new s(i.getScrollTop(),i.getContentHeight(),null,0);let o=null,t=0;const e=i.getVisibleRanges();return e.length>0&&(o=e.at(-1).getEndPosition(),t=i.getBottomForLineNumber(o.lineNumber)-i.getScrollTop()),new s(i.getScrollTop(),i.getContentHeight(),o,t)}restore(i){if(!(this._initialContentHeight===i.getContentHeight()&&this._initialScrollTop===i.getScrollTop())&&this._visiblePosition){const o=i.getBottomForLineNumber(this._visiblePosition.lineNumber);i.setScrollTop(o-this._visiblePositionScrollDelta,r.Immediate)}}}export{s as StableEditorBottomScrollState,n as StableEditorScrollState};
