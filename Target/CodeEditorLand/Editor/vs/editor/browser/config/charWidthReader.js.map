{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/config/charWidthReader.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { BareFontInfo } from \"../../common/config/fontInfo.js\";\nimport { applyFontInfo } from \"./domFontInfo.js\";\n\nexport enum CharWidthRequestType {\n\tRegular = 0,\n\tItalic = 1,\n\tBold = 2,\n}\n\nexport class CharWidthRequest {\n\tpublic readonly chr: string;\n\tpublic readonly type: CharWidthRequestType;\n\tpublic width: number;\n\n\tconstructor(chr: string, type: CharWidthRequestType) {\n\t\tthis.chr = chr;\n\t\tthis.type = type;\n\t\tthis.width = 0;\n\t}\n\n\tpublic fulfill(width: number) {\n\t\tthis.width = width;\n\t}\n}\n\nclass DomCharWidthReader {\n\tprivate readonly _bareFontInfo: BareFontInfo;\n\tprivate readonly _requests: CharWidthRequest[];\n\n\tprivate _container: HTMLElement | null;\n\tprivate _testElements: HTMLSpanElement[] | null;\n\n\tconstructor(bareFontInfo: BareFontInfo, requests: CharWidthRequest[]) {\n\t\tthis._bareFontInfo = bareFontInfo;\n\t\tthis._requests = requests;\n\n\t\tthis._container = null;\n\t\tthis._testElements = null;\n\t}\n\n\tpublic read(targetWindow: Window): void {\n\t\t// Create a test container with all these test elements\n\t\tthis._createDomElements();\n\n\t\t// Add the container to the DOM\n\t\ttargetWindow.document.body.appendChild(this._container!);\n\n\t\t// Read character widths\n\t\tthis._readFromDomElements();\n\n\t\t// Remove the container from the DOM\n\t\tthis._container?.remove();\n\n\t\tthis._container = null;\n\t\tthis._testElements = null;\n\t}\n\n\tprivate _createDomElements(): void {\n\t\tconst container = document.createElement(\"div\");\n\t\tcontainer.style.position = \"absolute\";\n\t\tcontainer.style.top = \"-50000px\";\n\t\tcontainer.style.width = \"50000px\";\n\n\t\tconst regularDomNode = document.createElement(\"div\");\n\t\tapplyFontInfo(regularDomNode, this._bareFontInfo);\n\t\tcontainer.appendChild(regularDomNode);\n\n\t\tconst boldDomNode = document.createElement(\"div\");\n\t\tapplyFontInfo(boldDomNode, this._bareFontInfo);\n\t\tboldDomNode.style.fontWeight = \"bold\";\n\t\tcontainer.appendChild(boldDomNode);\n\n\t\tconst italicDomNode = document.createElement(\"div\");\n\t\tapplyFontInfo(italicDomNode, this._bareFontInfo);\n\t\titalicDomNode.style.fontStyle = \"italic\";\n\t\tcontainer.appendChild(italicDomNode);\n\n\t\tconst testElements: HTMLSpanElement[] = [];\n\t\tfor (const request of this._requests) {\n\t\t\tlet parent: HTMLElement;\n\t\t\tif (request.type === CharWidthRequestType.Regular) {\n\t\t\t\tparent = regularDomNode;\n\t\t\t}\n\t\t\tif (request.type === CharWidthRequestType.Bold) {\n\t\t\t\tparent = boldDomNode;\n\t\t\t}\n\t\t\tif (request.type === CharWidthRequestType.Italic) {\n\t\t\t\tparent = italicDomNode;\n\t\t\t}\n\n\t\t\tparent!.appendChild(document.createElement(\"br\"));\n\n\t\t\tconst testElement = document.createElement(\"span\");\n\t\t\tDomCharWidthReader._render(testElement, request);\n\t\t\tparent!.appendChild(testElement);\n\n\t\t\ttestElements.push(testElement);\n\t\t}\n\n\t\tthis._container = container;\n\t\tthis._testElements = testElements;\n\t}\n\n\tprivate static _render(\n\t\ttestElement: HTMLElement,\n\t\trequest: CharWidthRequest,\n\t): void {\n\t\tif (request.chr === \" \") {\n\t\t\tlet htmlString = \"\\u00a0\";\n\t\t\t// Repeat character 256 (2^8) times\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\thtmlString += htmlString;\n\t\t\t}\n\t\t\ttestElement.innerText = htmlString;\n\t\t} else {\n\t\t\tlet testString = request.chr;\n\t\t\t// Repeat character 256 (2^8) times\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\ttestString += testString;\n\t\t\t}\n\t\t\ttestElement.textContent = testString;\n\t\t}\n\t}\n\n\tprivate _readFromDomElements(): void {\n\t\tfor (let i = 0, len = this._requests.length; i < len; i++) {\n\t\t\tconst request = this._requests[i];\n\t\t\tconst testElement = this._testElements![i];\n\n\t\t\trequest.fulfill(testElement.offsetWidth / 256);\n\t\t}\n\t}\n}\n\nexport function readCharWidths(\n\ttargetWindow: Window,\n\tbareFontInfo: BareFontInfo,\n\trequests: CharWidthRequest[],\n): void {\n\tconst reader = new DomCharWidthReader(bareFontInfo, requests);\n\treader.read(targetWindow);\n}\n"],
  "mappings": "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",
  "names": ["CharWidthRequestType"]
}
