import{EndOfLinePreference as s}from"../../../common/model.js";import"../../../common/core/position.js";import{Range as u}from"../../../common/core/range.js";import{EditorOption as C}from"../../../common/config/editorOptions.js";import"../../../../platform/keybinding/common/keybinding.js";import{AccessibilitySupport as A}from"../../../../platform/accessibility/common/accessibility.js";import*as d from"../../../../nls.js";class b{static _getPageOfLine(e,n){return Math.floor((e-1)/n)}static _getRangeForPage(e,n){const t=e*n,o=t+1,g=t+n;return new u(o,1,g+1,1)}static fromEditorSelection(e,n,t,o){const r=b._getPageOfLine(n.startLineNumber,t),p=b._getRangeForPage(r,t),f=b._getPageOfLine(n.endLineNumber,t),R=b._getRangeForPage(f,t);let a=p.intersectRanges(new u(1,1,n.startLineNumber,n.startColumn));if(o&&e.getValueLengthInRange(a,s.LF)>500){const l=e.modifyPosition(a.getEndPosition(),-500);a=u.fromPositions(l,a.getEndPosition())}const L=e.getValueInRange(a,s.LF),I=e.getLineCount(),S=e.getLineMaxColumn(I);let c=R.intersectRanges(new u(n.endLineNumber,n.endColumn,I,S));if(o&&e.getValueLengthInRange(c,s.LF)>500){const l=e.modifyPosition(c.getStartPosition(),500);c=u.fromPositions(c.getStartPosition(),l)}const h=e.getValueInRange(c,s.LF);let i;if(r===f||r+1===f)i=e.getValueInRange(n,s.LF);else{const l=p.intersectRanges(n),y=R.intersectRanges(n);i=e.getValueInRange(l,s.LF)+"\u2026"+e.getValueInRange(y,s.LF)}return o&&i.length>2*500&&(i=i.substring(0,500)+"\u2026"+i.substring(i.length-500,i.length)),{value:L+i+h,selection:n,selectionStart:L.length,selectionEnd:L.length+i.length,newlineCountBeforeSelection:a.endLineNumber-a.startLineNumber}}}function T(m,e){if(m.get(C.accessibilitySupport)===A.Disabled){const t=e.lookupKeybinding("editor.action.toggleScreenReaderAccessibilityMode")?.getAriaLabel(),o=e.lookupKeybinding("workbench.action.showCommands")?.getAriaLabel(),g=e.lookupKeybinding("workbench.action.openGlobalKeybindings")?.getAriaLabel(),r=d.localize("accessibilityModeOff","The editor is not accessible at this time.");return t?d.localize("accessibilityOffAriaLabel","{0} To enable screen reader optimized mode, use {1}",r,t):o?d.localize("accessibilityOffAriaLabelNoKb","{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.",r,o):g?d.localize("accessibilityOffAriaLabelNoKbs","{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.",r,g):r}return m.get(C.ariaLabel)}function k(m){let e=0,n=-1;do{if(n=m.indexOf(`
`,n+1),n===-1)break;e++}while(!0);return e}export{b as PagedScreenReaderStrategy,T as ariaLabelForScreenReaderContent,k as newlinecount};
