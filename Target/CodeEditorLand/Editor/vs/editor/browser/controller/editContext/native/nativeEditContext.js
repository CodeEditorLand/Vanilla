var N=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var y=(h,t,e,r)=>{for(var n=r>1?void 0:r?O(t,e):t,o=h.length-1,i;o>=0;o--)(i=h[o])&&(n=(r?i(t,e,n):i(n))||n);return r&&n&&N(t,e,n),n},v=(h,t)=>(e,r)=>t(e,r,h);import"./nativeEditContext.css";import{isFirefox as T}from"../../../../../base/browser/browser.js";import{addDisposableListener as g}from"../../../../../base/browser/dom.js";import{FastDomNode as M}from"../../../../../base/browser/fastDomNode.js";import{StandardKeyboardEvent as R}from"../../../../../base/browser/keyboardEvent.js";import{KeyCode as w}from"../../../../../base/common/keyCodes.js";import{IClipboardService as P}from"../../../../../platform/clipboard/common/clipboardService.js";import{IInstantiationService as D}from"../../../../../platform/instantiation/common/instantiation.js";import{EditorOption as l}from"../../../../common/config/editorOptions.js";import{CursorState as L}from"../../../../common/cursorCommon.js";import{CursorChangeReason as A}from"../../../../common/cursorEvents.js";import{EndOfLinePreference as F}from"../../../../common/model.js";import{getDataToCopy as W,InMemoryClipboardMetadataManager as I}from"../clipboardUtils.js";import{AbstractEditContext as V}from"../editContextUtils.js";import{editContextAddDisposableListener as u,FocusTracker as B}from"./nativeEditContextUtils.js";import{ScreenReaderSupport as k}from"./screenReaderSupport.js";import{Range as _}from"../../../../common/core/range.js";import{Selection as E}from"../../../../common/core/selection.js";import{Position as H}from"../../../../common/core/position.js";let C=class extends V{domNode;_editContext;_screenReaderSupport;_parent;_decorations=[];_renderingContext;_primarySelection=new E(1,1,1,1);_textStartPositionWithinEditor=new H(1,1);_compositionRangeWithinEditor;_focusTracker;constructor(t,e,r,n){super(t),this.domNode=new M(document.createElement("div")),this.domNode.setClassName("native-edit-context"),this._updateDomAttributes(),this._focusTracker=this._register(new B(this.domNode.domNode,o=>this._context.viewModel.setHasFocus(o))),this._editContext=new EditContext,this.domNode.domNode.editContext=this._editContext,this._screenReaderSupport=r.createInstance(k,this.domNode,t),this._register(g(this.domNode.domNode,"copy",()=>this._ensureClipboardGetsEditorSelection(n))),this._register(g(this.domNode.domNode,"cut",()=>{this._ensureClipboardGetsEditorSelection(n),e.cut()})),this._register(g(this.domNode.domNode,"keyup",o=>e.emitKeyUp(new R(o)))),this._register(g(this.domNode.domNode,"keydown",async o=>{const i=new R(o);i.keyCode===w.KEY_IN_COMPOSITION&&i.stopPropagation(),i.keyCode===w.Enter&&this._onType(e,{text:`
`,replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0}),e.emitKeyDown(i)})),this._register(u(this._editContext,"textformatupdate",o=>this._handleTextFormatUpdate(o))),this._register(u(this._editContext,"characterboundsupdate",o=>this._updateCharacterBounds())),this._register(u(this._editContext,"textupdate",o=>{const i=this._compositionRangeWithinEditor;if(i){const s=this._context.viewModel.getPrimaryCursorState().modelState.position,a=_.fromPositions(i.getStartPosition(),s);this._compositionRangeWithinEditor=a}this._emitTypeEvent(e,o),this._screenReaderSupport.writeScreenReaderContent()})),this._register(u(this._editContext,"compositionstart",o=>{const i=this._context.viewModel.getPrimaryCursorState().modelState.position,s=_.fromPositions(i,i);this._compositionRangeWithinEditor=s,e.compositionStart(),this._context.viewModel.onCompositionStart()})),this._register(u(this._editContext,"compositionend",o=>{this._compositionRangeWithinEditor=void 0,e.compositionEnd(),this._context.viewModel.onCompositionEnd()}))}dispose(){super.dispose(),this.domNode.domNode.remove()}appendTo(t){t.appendChild(this.domNode),this._parent=t.domNode}setAriaOptions(){this._screenReaderSupport.setAriaOptions()}getLastRenderData(){return this._primarySelection.getPosition()}prepareRender(t){this._renderingContext=t,this._screenReaderSupport.prepareRender(t),this._updateEditContext(),this._updateSelectionAndControlBounds(),this._updateCharacterBounds()}render(t){this._screenReaderSupport.render(t)}onCursorStateChanged(t){return this._primarySelection=t.modelSelections[0]??new E(1,1,1,1),this._screenReaderSupport.onCursorStateChanged(t),!0}onConfigurationChanged(t){return this._screenReaderSupport.onConfigurationChanged(t),this._updateDomAttributes(),!0}writeScreenReaderContent(){this._screenReaderSupport.writeScreenReaderContent()}isFocused(){return this._focusTracker.isFocused}focus(){this._focusTracker.focus()}refreshFocusState(){}_updateDomAttributes(){const t=this._context.configuration.options;this.domNode.domNode.setAttribute("tabindex",String(t.get(l.tabIndex)))}_updateEditContext(){const t=this._getNewEditContextState();this._editContext.updateText(0,Number.MAX_SAFE_INTEGER,t.text),this._editContext.updateSelection(t.selectionStartOffset,t.selectionEndOffset),this._textStartPositionWithinEditor=t.textStartPositionWithinEditor}_emitTypeEvent(t,e){if(!this._editContext)return;const r=this._context.viewModel.model,n=r.getOffsetAt(this._textStartPositionWithinEditor),o=r.getOffsetAt(this._primarySelection.getEndPosition()),i=r.getOffsetAt(this._primarySelection.getStartPosition()),s=o-n,a=i-n;let d=0,c=0;e.updateRangeEnd>s&&(d=e.updateRangeEnd-s),e.updateRangeStart<a&&(c=a-e.updateRangeStart);let p="";a<e.updateRangeStart&&(p+=this._editContext.text.substring(a,e.updateRangeStart)),p+=e.text,s>e.updateRangeEnd&&(p+=this._editContext.text.substring(e.updateRangeEnd,s));const f={text:p,replacePrevCharCnt:c,replaceNextCharCnt:d,positionDelta:0};this._onType(t,f);const m=a-c+p.length;this._updateCursorStatesAfterType(m,e.selectionStart,e.selectionEnd)}_onType(t,e){e.replacePrevCharCnt||e.replaceNextCharCnt||e.positionDelta?t.compositionType(e.text,e.replacePrevCharCnt,e.replaceNextCharCnt,e.positionDelta):t.type(e.text)}_updateCursorStatesAfterType(t,e,r){const n=e-t,o=r-t,a=this._context.viewModel.getCursorStates().map(d=>d.modelState.position).map(d=>{const c=d.lineNumber,p=d.column;return new E(c,p+n,c,p+o)}).map(d=>L.fromModelSelection(d));this._context.viewModel.setCursorStates("editContext",A.Explicit,a)}_getNewEditContextState(){const t=this._primarySelection.startColumn-1;let e=0;for(let s=this._primarySelection.startLineNumber;s<=this._primarySelection.endLineNumber;s++)s===this._primarySelection.endLineNumber?e+=this._primarySelection.endColumn-1:e+=this._context.viewModel.model.getLineMaxColumn(s);const r=this._context.viewModel.model.getLineMaxColumn(this._primarySelection.endLineNumber),n=new _(this._primarySelection.startLineNumber,1,this._primarySelection.endLineNumber,r),o=this._context.viewModel.model.getValueInRange(n,F.TextDefined),i=n.getStartPosition();return{text:o,selectionStartOffset:t,selectionEndOffset:e,textStartPositionWithinEditor:i}}_handleTextFormatUpdate(t){if(!this._editContext)return;const e=t.getTextFormats(),r=this._textStartPositionWithinEditor,n=[];e.forEach(o=>{const i=this._context.viewModel.model,s=i.getOffsetAt(r),a=i.getPositionAt(s+o.rangeStart),d=i.getPositionAt(s+o.rangeEnd),c=_.fromPositions(a,d),p=["edit-context-format-decoration",`underline-style-${o.underlineStyle.toLowerCase()}`,`underline-thickness-${o.underlineThickness.toLowerCase()}`];n.push({range:c,options:{description:"textFormatDecoration",inlineClassName:p.join(" ")}})}),this._decorations=this._context.viewModel.model.deltaDecorations(this._decorations,n)}_updateSelectionAndControlBounds(){if(!this._parent)return;const t=this._context.configuration.options,e=t.get(l.lineHeight),r=t.get(l.layoutInfo).contentLeft,n=this._parent.getBoundingClientRect(),o=this._context.viewLayout.getVerticalOffsetForLineNumber(this._primarySelection.startLineNumber),i=this._context.viewLayout.getCurrentScrollTop(),s=n.top+o-i,a=(this._primarySelection.endLineNumber-this._primarySelection.startLineNumber+1)*e;let d=n.left+r,c;if(this._primarySelection.isEmpty()){if(this._renderingContext){const m=this._renderingContext.linesVisibleRangesForRange(this._primarySelection,!0)??[];m.length>0&&(d+=Math.min(...m.map(S=>Math.min(...S.ranges.map(x=>x.left)))))}c=t.get(l.fontInfo).typicalHalfwidthCharacterWidth/2}else c=n.width-r;const p=new DOMRect(d,s,c,a),f=p;this._editContext.updateControlBounds(f),this._editContext.updateSelectionBounds(p)}_updateCharacterBounds(){if(!this._parent||!this._compositionRangeWithinEditor)return;const t=this._context.configuration.options,e=t.get(l.lineHeight),r=t.get(l.layoutInfo).contentLeft,n=this._parent.getBoundingClientRect(),o=this._compositionRangeWithinEditor,i=this._context.viewLayout.getVerticalOffsetForLineNumber(o.startLineNumber),s=this._context.viewLayout.getCurrentScrollTop(),a=n.top+i-s,d=[];if(this._renderingContext){const S=this._renderingContext.linesVisibleRangesForRange(o,!0)??[];for(const x of S)for(const b of x.ranges)d.push(new DOMRect(n.left+r+b.left,a,b.width,e))}const c=this._context.viewModel.model,p=c.getOffsetAt(this._textStartPositionWithinEditor),m=c.getOffsetAt(o.getStartPosition())-p;this._editContext.updateCharacterBounds(m,d)}_ensureClipboardGetsEditorSelection(t){const e=this._context.configuration.options,r=e.get(l.emptySelectionClipboard),n=e.get(l.copyWithSyntaxHighlighting),o=this._context.viewModel.getCursorStates().map(a=>a.modelState.selection),i=W(this._context.viewModel,o,r,n),s={version:1,isFromEmptySelection:i.isFromEmptySelection,multicursorText:i.multicursorText,mode:i.mode};I.INSTANCE.set(T?i.text.replace(/\r\n/g,`
`):i.text,s),t.writeText(i.text)}};C=y([v(2,D),v(3,P)],C);export{C as NativeEditContext};
