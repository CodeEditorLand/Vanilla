{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/native/nativeEditContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './nativeEditContext.css';\nimport { isFirefox } from '../../../../../base/browser/browser.js';\nimport { addDisposableListener } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { CursorState } from '../../../../common/cursorCommon.js';\nimport { CursorChangeReason } from '../../../../common/cursorEvents.js';\nimport { EndOfLinePreference, IModelDeltaDecoration } from '../../../../common/model.js';\nimport { ViewConfigurationChangedEvent, ViewCursorStateChangedEvent } from '../../../../common/viewEvents.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { RestrictedRenderingContext, RenderingContext } from '../../../view/renderingContext.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { ClipboardStoredMetadata, getDataToCopy, InMemoryClipboardMetadataManager } from '../clipboardUtils.js';\nimport { AbstractEditContext } from '../editContextUtils.js';\nimport { editContextAddDisposableListener, FocusTracker, ITypeData } from './nativeEditContextUtils.js';\nimport { ScreenReaderSupport } from './screenReaderSupport.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { Position } from '../../../../common/core/position.js';\n\nexport class NativeEditContext extends AbstractEditContext {\n\n\tpublic readonly domNode: FastDomNode<HTMLDivElement>;\n\tprivate readonly _editContext: EditContext;\n\tprivate readonly _screenReaderSupport: ScreenReaderSupport;\n\n\t// Overflow guard container\n\tprivate _parent: HTMLElement | undefined;\n\tprivate _decorations: string[] = [];\n\tprivate _renderingContext: RenderingContext | undefined;\n\tprivate _primarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\tprivate _textStartPositionWithinEditor: Position = new Position(1, 1);\n\tprivate _compositionRangeWithinEditor: Range | undefined;\n\n\tprivate readonly _focusTracker: FocusTracker;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tviewController: ViewController,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IClipboardService clipboardService: IClipboardService,\n\t) {\n\t\tsuper(context);\n\n\t\tthis.domNode = new FastDomNode(document.createElement('div'));\n\t\tthis.domNode.setClassName(`native-edit-context`);\n\t\tthis._updateDomAttributes();\n\n\t\tthis._focusTracker = this._register(new FocusTracker(this.domNode.domNode, (newFocusValue: boolean) => this._context.viewModel.setHasFocus(newFocusValue)));\n\n\t\tthis._editContext = new EditContext();\n\t\tthis.domNode.domNode.editContext = this._editContext;\n\n\t\tthis._screenReaderSupport = instantiationService.createInstance(ScreenReaderSupport, this.domNode, context);\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'copy', () => this._ensureClipboardGetsEditorSelection(clipboardService)));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'cut', () => {\n\t\t\tthis._ensureClipboardGetsEditorSelection(clipboardService);\n\t\t\tviewController.cut();\n\t\t}));\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keyup', (e) => viewController.emitKeyUp(new StandardKeyboardEvent(e))));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keydown', async (e) => {\n\n\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(e);\n\n\t\t\t// When the IME is visible, the keys, like arrow-left and arrow-right, should be used to navigate in the IME, and should not be propagated further\n\t\t\tif (standardKeyboardEvent.keyCode === KeyCode.KEY_IN_COMPOSITION) {\n\t\t\t\tstandardKeyboardEvent.stopPropagation();\n\t\t\t}\n\t\t\tviewController.emitKeyDown(standardKeyboardEvent);\n\t\t}));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'beforeinput', async (e) => {\n\t\t\tif (e.inputType === 'insertParagraph') {\n\t\t\t\tthis._onType(viewController, { text: '\\n', replacePrevCharCnt: 0, replaceNextCharCnt: 0, positionDelta: 0 });\n\t\t\t}\n\t\t}));\n\n\t\t// Edit context events\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textformatupdate', (e) => this._handleTextFormatUpdate(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'characterboundsupdate', (e) => this._updateCharacterBounds()));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textupdate', (e) => {\n\t\t\tconst compositionRangeWithinEditor = this._compositionRangeWithinEditor;\n\t\t\tif (compositionRangeWithinEditor) {\n\t\t\t\tconst position = this._context.viewModel.getPrimaryCursorState().modelState.position;\n\t\t\t\tconst newCompositionRangeWithinEditor = Range.fromPositions(compositionRangeWithinEditor.getStartPosition(), position);\n\t\t\t\tthis._compositionRangeWithinEditor = newCompositionRangeWithinEditor;\n\t\t\t}\n\t\t\tthis._emitTypeEvent(viewController, e);\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionstart', (e) => {\n\t\t\tconst position = this._context.viewModel.getPrimaryCursorState().modelState.position;\n\t\t\tconst newCompositionRange = Range.fromPositions(position, position);\n\t\t\tthis._compositionRangeWithinEditor = newCompositionRange;\n\t\t\t// Utlimately fires onDidCompositionStart() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionStart();\n\t\t\t// Emits ViewCompositionStartEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionStart();\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionend', (e) => {\n\t\t\tthis._compositionRangeWithinEditor = undefined;\n\t\t\t// Utlimately fires compositionEnd() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionEnd();\n\t\t\t// Emits ViewCompositionEndEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionEnd();\n\t\t}));\n\t}\n\n\t// --- Public methods ---\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.domNode.domNode.remove();\n\t}\n\n\tpublic appendTo(overflowGuardContainer: FastDomNode<HTMLElement>): void {\n\t\toverflowGuardContainer.appendChild(this.domNode);\n\t\tthis._parent = overflowGuardContainer.domNode;\n\t}\n\n\tpublic setAriaOptions(): void {\n\t\tthis._screenReaderSupport.setAriaOptions();\n\t}\n\n\t/* Last rendered data needed for correct hit-testing and determining the mouse position.\n\t * Without this, the selection will blink as incorrect mouse position is calculated */\n\tpublic getLastRenderData(): Position | null {\n\t\treturn this._primarySelection.getPosition();\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._renderingContext = ctx;\n\t\tthis._screenReaderSupport.prepareRender(ctx);\n\t\tthis._updateEditContext();\n\t\tthis._updateSelectionAndControlBounds();\n\t\tthis._updateCharacterBounds();\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._screenReaderSupport.render(ctx);\n\t}\n\n\tpublic override onCursorStateChanged(e: ViewCursorStateChangedEvent): boolean {\n\t\tthis._primarySelection = e.modelSelections[0] ?? new Selection(1, 1, 1, 1);\n\t\tthis._screenReaderSupport.onCursorStateChanged(e);\n\t\treturn true;\n\t}\n\n\tpublic override onConfigurationChanged(e: ViewConfigurationChangedEvent): boolean {\n\t\tthis._screenReaderSupport.onConfigurationChanged(e);\n\t\tthis._updateDomAttributes();\n\t\treturn true;\n\t}\n\n\tpublic writeScreenReaderContent(): void {\n\t\tthis._screenReaderSupport.writeScreenReaderContent();\n\t}\n\n\tpublic isFocused(): boolean { return this._focusTracker.isFocused; }\n\n\tpublic focus(): void { this._focusTracker.focus(); }\n\n\tpublic refreshFocusState(): void { }\n\n\t// --- Private methods ---\n\n\tprivate _updateDomAttributes(): void {\n\t\tconst options = this._context.configuration.options;\n\t\tthis.domNode.domNode.setAttribute('tabindex', String(options.get(EditorOption.tabIndex)));\n\t}\n\n\tprivate _updateEditContext(): void {\n\t\tconst editContextState = this._getNewEditContextState();\n\t\tthis._editContext.updateText(0, Number.MAX_SAFE_INTEGER, editContextState.text);\n\t\tthis._editContext.updateSelection(editContextState.selectionStartOffset, editContextState.selectionEndOffset);\n\t\tthis._textStartPositionWithinEditor = editContextState.textStartPositionWithinEditor;\n\t}\n\n\tprivate _emitTypeEvent(viewController: ViewController, e: TextUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._context.viewModel.model;\n\t\tconst offsetOfStartOfText = model.getOffsetAt(this._textStartPositionWithinEditor);\n\t\tconst offsetOfSelectionEnd = model.getOffsetAt(this._primarySelection.getEndPosition());\n\t\tconst offsetOfSelectionStart = model.getOffsetAt(this._primarySelection.getStartPosition());\n\t\tconst selectionEndOffset = offsetOfSelectionEnd - offsetOfStartOfText;\n\t\tconst selectionStartOffset = offsetOfSelectionStart - offsetOfStartOfText;\n\n\t\tlet replaceNextCharCnt = 0;\n\t\tlet replacePrevCharCnt = 0;\n\t\tif (e.updateRangeEnd > selectionEndOffset) {\n\t\t\treplaceNextCharCnt = e.updateRangeEnd - selectionEndOffset;\n\t\t}\n\t\tif (e.updateRangeStart < selectionStartOffset) {\n\t\t\treplacePrevCharCnt = selectionStartOffset - e.updateRangeStart;\n\t\t}\n\t\tlet text = '';\n\t\tif (selectionStartOffset < e.updateRangeStart) {\n\t\t\ttext += this._editContext.text.substring(selectionStartOffset, e.updateRangeStart);\n\t\t}\n\t\ttext += e.text;\n\t\tif (selectionEndOffset > e.updateRangeEnd) {\n\t\t\ttext += this._editContext.text.substring(e.updateRangeEnd, selectionEndOffset);\n\t\t}\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext,\n\t\t\treplacePrevCharCnt,\n\t\t\treplaceNextCharCnt,\n\t\t\tpositionDelta: 0,\n\t\t};\n\t\tthis._onType(viewController, typeInput);\n\n\t\t// The selection can be non empty so need to update the cursor states after typing (which makes the selection empty)\n\t\tconst primaryPositionOffset = selectionStartOffset - replacePrevCharCnt + text.length;\n\t\tthis._updateCursorStatesAfterType(primaryPositionOffset, e.selectionStart, e.selectionEnd);\n\t}\n\n\tprivate _onType(viewController: ViewController, typeInput: ITypeData): void {\n\t\tif (typeInput.replacePrevCharCnt || typeInput.replaceNextCharCnt || typeInput.positionDelta) {\n\t\t\tviewController.compositionType(typeInput.text, typeInput.replacePrevCharCnt, typeInput.replaceNextCharCnt, typeInput.positionDelta);\n\t\t} else {\n\t\t\tviewController.type(typeInput.text);\n\t\t}\n\t}\n\n\tprivate _updateCursorStatesAfterType(primaryPositionOffset: number, desiredSelectionStartOffset: number, desiredSelectionEndOffset: number): void {\n\t\tconst leftDeltaOffsetOfPrimaryCursor = desiredSelectionStartOffset - primaryPositionOffset;\n\t\tconst rightDeltaOffsetOfPrimaryCursor = desiredSelectionEndOffset - primaryPositionOffset;\n\t\tconst cursorPositions = this._context.viewModel.getCursorStates().map(cursorState => cursorState.modelState.position);\n\t\tconst newSelections = cursorPositions.map(cursorPosition => {\n\t\t\tconst positionLineNumber = cursorPosition.lineNumber;\n\t\t\tconst positionColumn = cursorPosition.column;\n\t\t\treturn new Selection(positionLineNumber, positionColumn + leftDeltaOffsetOfPrimaryCursor, positionLineNumber, positionColumn + rightDeltaOffsetOfPrimaryCursor);\n\t\t});\n\t\tconst newCursorStates = newSelections.map(selection => CursorState.fromModelSelection(selection));\n\t\tthis._context.viewModel.setCursorStates('editContext', CursorChangeReason.Explicit, newCursorStates);\n\t}\n\n\tprivate _getNewEditContextState(): { text: string; selectionStartOffset: number; selectionEndOffset: number; textStartPositionWithinEditor: Position } {\n\t\tconst selectionStartOffset = this._primarySelection.startColumn - 1;\n\t\tlet selectionEndOffset: number = 0;\n\t\tfor (let i = this._primarySelection.startLineNumber; i <= this._primarySelection.endLineNumber; i++) {\n\t\t\tif (i === this._primarySelection.endLineNumber) {\n\t\t\t\tselectionEndOffset += this._primarySelection.endColumn - 1;\n\t\t\t} else {\n\t\t\t\tselectionEndOffset += this._context.viewModel.model.getLineMaxColumn(i);\n\t\t\t}\n\t\t}\n\t\tconst endColumnOfEndLineNumber = this._context.viewModel.model.getLineMaxColumn(this._primarySelection.endLineNumber);\n\t\tconst rangeOfText = new Range(this._primarySelection.startLineNumber, 1, this._primarySelection.endLineNumber, endColumnOfEndLineNumber);\n\t\tconst text = this._context.viewModel.model.getValueInRange(rangeOfText, EndOfLinePreference.TextDefined);\n\t\tconst textStartPositionWithinEditor = rangeOfText.getStartPosition();\n\t\treturn {\n\t\t\ttext,\n\t\t\tselectionStartOffset,\n\t\t\tselectionEndOffset,\n\t\t\ttextStartPositionWithinEditor\n\t\t};\n\t}\n\n\tprivate _handleTextFormatUpdate(e: TextFormatUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst formats = e.getTextFormats();\n\t\tconst textStartPositionWithinEditor = this._textStartPositionWithinEditor;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tformats.forEach(f => {\n\t\t\tconst textModel = this._context.viewModel.model;\n\t\t\tconst offsetOfEditContextText = textModel.getOffsetAt(textStartPositionWithinEditor);\n\t\t\tconst startPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeStart);\n\t\t\tconst endPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeEnd);\n\t\t\tconst decorationRange = Range.fromPositions(startPositionOfDecoration, endPositionOfDecoration);\n\t\t\tconst classNames = [\n\t\t\t\t'edit-context-format-decoration',\n\t\t\t\t`underline-style-${f.underlineStyle.toLowerCase()}`,\n\t\t\t\t`underline-thickness-${f.underlineThickness.toLowerCase()}`,\n\t\t\t];\n\t\t\tdecorations.push({\n\t\t\t\trange: decorationRange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'textFormatDecoration',\n\t\t\t\t\tinlineClassName: classNames.join(' '),\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis._decorations = this._context.viewModel.model.deltaDecorations(this._decorations, decorations);\n\t}\n\n\tprivate _updateSelectionAndControlBounds() {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst verticalOffsetStart = this._context.viewLayout.getVerticalOffsetForLineNumber(this._primarySelection.startLineNumber);\n\t\tconst editorScrollTop = this._context.viewLayout.getCurrentScrollTop();\n\n\t\tconst top = parentBounds.top + verticalOffsetStart - editorScrollTop;\n\t\tconst height = (this._primarySelection.endLineNumber - this._primarySelection.startLineNumber + 1) * lineHeight;\n\t\tlet left = parentBounds.left + contentLeft;\n\t\tlet width: number;\n\n\t\tif (this._primarySelection.isEmpty()) {\n\t\t\tif (this._renderingContext) {\n\t\t\t\tconst linesVisibleRanges = this._renderingContext.linesVisibleRangesForRange(this._primarySelection, true) ?? [];\n\t\t\t\tif (linesVisibleRanges.length > 0) {\n\t\t\t\t\tleft += Math.min(...linesVisibleRanges.map(r => Math.min(...r.ranges.map(r => r.left))));\n\t\t\t\t}\n\t\t\t}\n\t\t\twidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth / 2;\n\t\t} else {\n\t\t\twidth = parentBounds.width - contentLeft;\n\t\t}\n\n\t\tconst selectionBounds = new DOMRect(left, top, width, height);\n\t\tconst controlBounds = selectionBounds;\n\t\tthis._editContext.updateControlBounds(controlBounds);\n\t\tthis._editContext.updateSelectionBounds(selectionBounds);\n\t}\n\n\tprivate _updateCharacterBounds() {\n\t\tif (!this._parent || !this._compositionRangeWithinEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst compositionRangeWithinEditor = this._compositionRangeWithinEditor;\n\t\tconst verticalOffsetStartOfComposition = this._context.viewLayout.getVerticalOffsetForLineNumber(compositionRangeWithinEditor.startLineNumber);\n\t\tconst editorScrollTop = this._context.viewLayout.getCurrentScrollTop();\n\t\tconst top = parentBounds.top + verticalOffsetStartOfComposition - editorScrollTop;\n\n\t\tconst characterBounds: DOMRect[] = [];\n\t\tif (this._renderingContext) {\n\t\t\tconst linesVisibleRanges = this._renderingContext.linesVisibleRangesForRange(compositionRangeWithinEditor, true) ?? [];\n\t\t\tfor (const lineVisibleRanges of linesVisibleRanges) {\n\t\t\t\tfor (const visibleRange of lineVisibleRanges.ranges) {\n\t\t\t\t\tcharacterBounds.push(new DOMRect(parentBounds.left + contentLeft + visibleRange.left, top, visibleRange.width, lineHeight));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst textModel = this._context.viewModel.model;\n\t\tconst offsetOfEditContextStart = textModel.getOffsetAt(this._textStartPositionWithinEditor);\n\t\tconst offsetOfCompositionStart = textModel.getOffsetAt(compositionRangeWithinEditor.getStartPosition());\n\t\tconst offsetOfCompositionStartInEditContext = offsetOfCompositionStart - offsetOfEditContextStart;\n\t\tthis._editContext.updateCharacterBounds(offsetOfCompositionStartInEditContext, characterBounds);\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(clipboardService: IClipboardService): void {\n\t\tconst options = this._context.configuration.options;\n\t\tconst emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tconst copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tconst selections = this._context.viewModel.getCursorStates().map(cursorState => cursorState.modelState.selection);\n\t\tconst dataToCopy = getDataToCopy(this._context.viewModel, selections, emptySelectionClipboard, copyWithSyntaxHighlighting);\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t(isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text),\n\t\t\tstoredMetadata\n\t\t);\n\t\tclipboardService.writeText(dataToCopy.text);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["r"]
}
