{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/native/nativeEditContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./nativeEditContext.css\";\nimport { isFirefox } from \"../../../../../base/browser/browser.js\";\nimport { addDisposableListener } from \"../../../../../base/browser/dom.js\";\nimport { FastDomNode } from \"../../../../../base/browser/fastDomNode.js\";\nimport { StandardKeyboardEvent } from \"../../../../../base/browser/keyboardEvent.js\";\nimport { KeyCode } from \"../../../../../base/common/keyCodes.js\";\nimport { IClipboardService } from \"../../../../../platform/clipboard/common/clipboardService.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { EditorOption } from \"../../../../common/config/editorOptions.js\";\nimport { Position } from \"../../../../common/core/position.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { Selection } from \"../../../../common/core/selection.js\";\nimport { CursorState } from \"../../../../common/cursorCommon.js\";\nimport { CursorChangeReason } from \"../../../../common/cursorEvents.js\";\nimport {\n\tEndOfLinePreference,\n\ttype IModelDeltaDecoration,\n} from \"../../../../common/model.js\";\nimport type {\n\tViewConfigurationChangedEvent,\n\tViewCursorStateChangedEvent,\n} from \"../../../../common/viewEvents.js\";\nimport type { ViewContext } from \"../../../../common/viewModel/viewContext.js\";\nimport type {\n\tRenderingContext,\n\tRestrictedRenderingContext,\n} from \"../../../view/renderingContext.js\";\nimport type { ViewController } from \"../../../view/viewController.js\";\nimport {\n\ttype ClipboardStoredMetadata,\n\tInMemoryClipboardMetadataManager,\n\tgetDataToCopy,\n} from \"../clipboardUtils.js\";\nimport { AbstractEditContext } from \"../editContextUtils.js\";\nimport {\n\tFocusTracker,\n\ttype ITypeData,\n\teditContextAddDisposableListener,\n} from \"./nativeEditContextUtils.js\";\nimport { ScreenReaderSupport } from \"./screenReaderSupport.js\";\n\nexport class NativeEditContext extends AbstractEditContext {\n\tpublic readonly domNode: FastDomNode<HTMLDivElement>;\n\tprivate readonly _editContext: EditContext;\n\tprivate readonly _screenReaderSupport: ScreenReaderSupport;\n\n\t// Overflow guard container\n\tprivate _parent: HTMLElement | undefined;\n\tprivate _decorations: string[] = [];\n\tprivate _renderingContext: RenderingContext | undefined;\n\tprivate _primarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\tprivate _textStartPositionWithinEditor: Position = new Position(1, 1);\n\tprivate _compositionRangeWithinEditor: Range | undefined;\n\n\tprivate readonly _focusTracker: FocusTracker;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tviewController: ViewController,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IClipboardService clipboardService: IClipboardService,\n\t) {\n\t\tsuper(context);\n\n\t\tthis.domNode = new FastDomNode(document.createElement(\"div\"));\n\t\tthis.domNode.setClassName(`native-edit-context`);\n\t\tthis._updateDomAttributes();\n\n\t\tthis._focusTracker = this._register(\n\t\t\tnew FocusTracker(this.domNode.domNode, (newFocusValue: boolean) =>\n\t\t\t\tthis._context.viewModel.setHasFocus(newFocusValue),\n\t\t\t),\n\t\t);\n\n\t\tthis._editContext = new EditContext();\n\t\tthis.domNode.domNode.editContext = this._editContext;\n\n\t\tthis._screenReaderSupport = instantiationService.createInstance(\n\t\t\tScreenReaderSupport,\n\t\t\tthis.domNode,\n\t\t\tcontext,\n\t\t);\n\n\t\tthis._register(\n\t\t\taddDisposableListener(this.domNode.domNode, \"copy\", () =>\n\t\t\t\tthis._ensureClipboardGetsEditorSelection(clipboardService),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(this.domNode.domNode, \"cut\", () => {\n\t\t\t\tthis._ensureClipboardGetsEditorSelection(clipboardService);\n\t\t\t\tviewController.cut();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\taddDisposableListener(this.domNode.domNode, \"keyup\", (e) =>\n\t\t\t\tviewController.emitKeyUp(new StandardKeyboardEvent(e)),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tthis.domNode.domNode,\n\t\t\t\t\"keydown\",\n\t\t\t\tasync (e) => {\n\t\t\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(e);\n\n\t\t\t\t\t// When the IME is visible, the keys, like arrow-left and arrow-right, should be used to navigate in the IME, and should not be propagated further\n\t\t\t\t\tif (\n\t\t\t\t\t\tstandardKeyboardEvent.keyCode ===\n\t\t\t\t\t\tKeyCode.KEY_IN_COMPOSITION\n\t\t\t\t\t) {\n\t\t\t\t\t\tstandardKeyboardEvent.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tviewController.emitKeyDown(standardKeyboardEvent);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tthis.domNode.domNode,\n\t\t\t\t\"beforeinput\",\n\t\t\t\tasync (e) => {\n\t\t\t\t\tif (e.inputType === \"insertParagraph\") {\n\t\t\t\t\t\tthis._onType(viewController, {\n\t\t\t\t\t\t\ttext: \"\\n\",\n\t\t\t\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\t\t\t\tpositionDelta: 0,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\t// Edit context events\n\t\tthis._register(\n\t\t\teditContextAddDisposableListener(\n\t\t\t\tthis._editContext,\n\t\t\t\t\"textformatupdate\",\n\t\t\t\t(e) => this._handleTextFormatUpdate(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\teditContextAddDisposableListener(\n\t\t\t\tthis._editContext,\n\t\t\t\t\"characterboundsupdate\",\n\t\t\t\t(e) => this._updateCharacterBounds(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\teditContextAddDisposableListener(\n\t\t\t\tthis._editContext,\n\t\t\t\t\"textupdate\",\n\t\t\t\t(e) => {\n\t\t\t\t\tconst compositionRangeWithinEditor =\n\t\t\t\t\t\tthis._compositionRangeWithinEditor;\n\t\t\t\t\tif (compositionRangeWithinEditor) {\n\t\t\t\t\t\tconst position =\n\t\t\t\t\t\t\tthis._context.viewModel.getPrimaryCursorState()\n\t\t\t\t\t\t\t\t.modelState.position;\n\t\t\t\t\t\tconst newCompositionRangeWithinEditor =\n\t\t\t\t\t\t\tRange.fromPositions(\n\t\t\t\t\t\t\t\tcompositionRangeWithinEditor.getStartPosition(),\n\t\t\t\t\t\t\t\tposition,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._compositionRangeWithinEditor =\n\t\t\t\t\t\t\tnewCompositionRangeWithinEditor;\n\t\t\t\t\t}\n\t\t\t\t\tthis._emitTypeEvent(viewController, e);\n\n\t\t\t\t\t// TODO @aiday-mar calling write screen reader content so that the document selection is immediately set\n\t\t\t\t\t// remove the following when electron will be upgraded\n\t\t\t\t\tthis._screenReaderSupport.writeScreenReaderContent();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\teditContextAddDisposableListener(\n\t\t\t\tthis._editContext,\n\t\t\t\t\"compositionstart\",\n\t\t\t\t(e) => {\n\t\t\t\t\tconst position =\n\t\t\t\t\t\tthis._context.viewModel.getPrimaryCursorState()\n\t\t\t\t\t\t\t.modelState.position;\n\t\t\t\t\tconst newCompositionRange = Range.fromPositions(\n\t\t\t\t\t\tposition,\n\t\t\t\t\t\tposition,\n\t\t\t\t\t);\n\t\t\t\t\tthis._compositionRangeWithinEditor = newCompositionRange;\n\t\t\t\t\t// Utlimately fires onDidCompositionStart() on the editor to notify for example suggest model of composition state\n\t\t\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\t\t\tviewController.compositionStart();\n\t\t\t\t\t// Emits ViewCompositionStartEvent which can be depended on by ViewEventHandlers\n\t\t\t\t\tthis._context.viewModel.onCompositionStart();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\teditContextAddDisposableListener(\n\t\t\t\tthis._editContext,\n\t\t\t\t\"compositionend\",\n\t\t\t\t(e) => {\n\t\t\t\t\tthis._compositionRangeWithinEditor = undefined;\n\t\t\t\t\t// Utlimately fires compositionEnd() on the editor to notify for example suggest model of composition state\n\t\t\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\t\t\tviewController.compositionEnd();\n\t\t\t\t\t// Emits ViewCompositionEndEvent which can be depended on by ViewEventHandlers\n\t\t\t\t\tthis._context.viewModel.onCompositionEnd();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\t// --- Public methods ---\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.domNode.domNode.remove();\n\t}\n\n\tpublic appendTo(overflowGuardContainer: FastDomNode<HTMLElement>): void {\n\t\toverflowGuardContainer.appendChild(this.domNode);\n\t\tthis._parent = overflowGuardContainer.domNode;\n\t}\n\n\tpublic setAriaOptions(): void {\n\t\tthis._screenReaderSupport.setAriaOptions();\n\t}\n\n\t/* Last rendered data needed for correct hit-testing and determining the mouse position.\n\t * Without this, the selection will blink as incorrect mouse position is calculated */\n\tpublic getLastRenderData(): Position | null {\n\t\treturn this._primarySelection.getPosition();\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._renderingContext = ctx;\n\t\tthis._screenReaderSupport.prepareRender(ctx);\n\t\tthis._updateEditContext();\n\t\tthis._updateSelectionAndControlBounds();\n\t\tthis._updateCharacterBounds();\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._screenReaderSupport.render(ctx);\n\t}\n\n\tpublic override onCursorStateChanged(\n\t\te: ViewCursorStateChangedEvent,\n\t): boolean {\n\t\tthis._primarySelection =\n\t\t\te.modelSelections[0] ?? new Selection(1, 1, 1, 1);\n\t\tthis._screenReaderSupport.onCursorStateChanged(e);\n\t\treturn true;\n\t}\n\n\tpublic override onConfigurationChanged(\n\t\te: ViewConfigurationChangedEvent,\n\t): boolean {\n\t\tthis._screenReaderSupport.onConfigurationChanged(e);\n\t\tthis._updateDomAttributes();\n\t\treturn true;\n\t}\n\n\tpublic writeScreenReaderContent(): void {\n\t\tthis._screenReaderSupport.writeScreenReaderContent();\n\t}\n\n\tpublic isFocused(): boolean {\n\t\treturn this._focusTracker.isFocused;\n\t}\n\n\tpublic focus(): void {\n\t\tthis._focusTracker.focus();\n\t}\n\n\tpublic refreshFocusState(): void {}\n\n\t// --- Private methods ---\n\n\tprivate _updateDomAttributes(): void {\n\t\tconst options = this._context.configuration.options;\n\t\tthis.domNode.domNode.setAttribute(\n\t\t\t\"tabindex\",\n\t\t\tString(options.get(EditorOption.tabIndex)),\n\t\t);\n\t}\n\n\tprivate _updateEditContext(): void {\n\t\tconst editContextState = this._getNewEditContextState();\n\t\tthis._editContext.updateText(\n\t\t\t0,\n\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\teditContextState.text,\n\t\t);\n\t\tthis._editContext.updateSelection(\n\t\t\teditContextState.selectionStartOffset,\n\t\t\teditContextState.selectionEndOffset,\n\t\t);\n\t\tthis._textStartPositionWithinEditor =\n\t\t\teditContextState.textStartPositionWithinEditor;\n\t}\n\n\tprivate _emitTypeEvent(\n\t\tviewController: ViewController,\n\t\te: TextUpdateEvent,\n\t): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._context.viewModel.model;\n\t\tconst offsetOfStartOfText = model.getOffsetAt(\n\t\t\tthis._textStartPositionWithinEditor,\n\t\t);\n\t\tconst offsetOfSelectionEnd = model.getOffsetAt(\n\t\t\tthis._primarySelection.getEndPosition(),\n\t\t);\n\t\tconst offsetOfSelectionStart = model.getOffsetAt(\n\t\t\tthis._primarySelection.getStartPosition(),\n\t\t);\n\t\tconst selectionEndOffset = offsetOfSelectionEnd - offsetOfStartOfText;\n\t\tconst selectionStartOffset =\n\t\t\toffsetOfSelectionStart - offsetOfStartOfText;\n\n\t\tlet replaceNextCharCnt = 0;\n\t\tlet replacePrevCharCnt = 0;\n\t\tif (e.updateRangeEnd > selectionEndOffset) {\n\t\t\treplaceNextCharCnt = e.updateRangeEnd - selectionEndOffset;\n\t\t}\n\t\tif (e.updateRangeStart < selectionStartOffset) {\n\t\t\treplacePrevCharCnt = selectionStartOffset - e.updateRangeStart;\n\t\t}\n\t\tlet text = \"\";\n\t\tif (selectionStartOffset < e.updateRangeStart) {\n\t\t\ttext += this._editContext.text.substring(\n\t\t\t\tselectionStartOffset,\n\t\t\t\te.updateRangeStart,\n\t\t\t);\n\t\t}\n\t\ttext += e.text;\n\t\tif (selectionEndOffset > e.updateRangeEnd) {\n\t\t\ttext += this._editContext.text.substring(\n\t\t\t\te.updateRangeEnd,\n\t\t\t\tselectionEndOffset,\n\t\t\t);\n\t\t}\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext,\n\t\t\treplacePrevCharCnt,\n\t\t\treplaceNextCharCnt,\n\t\t\tpositionDelta: 0,\n\t\t};\n\t\tthis._onType(viewController, typeInput);\n\n\t\t// The selection can be non empty so need to update the cursor states after typing (which makes the selection empty)\n\t\tconst primaryPositionOffset =\n\t\t\tselectionStartOffset - replacePrevCharCnt + text.length;\n\t\tthis._updateCursorStatesAfterType(\n\t\t\tprimaryPositionOffset,\n\t\t\te.selectionStart,\n\t\t\te.selectionEnd,\n\t\t);\n\t}\n\n\tprivate _onType(\n\t\tviewController: ViewController,\n\t\ttypeInput: ITypeData,\n\t): void {\n\t\tif (\n\t\t\ttypeInput.replacePrevCharCnt ||\n\t\t\ttypeInput.replaceNextCharCnt ||\n\t\t\ttypeInput.positionDelta\n\t\t) {\n\t\t\tviewController.compositionType(\n\t\t\t\ttypeInput.text,\n\t\t\t\ttypeInput.replacePrevCharCnt,\n\t\t\t\ttypeInput.replaceNextCharCnt,\n\t\t\t\ttypeInput.positionDelta,\n\t\t\t);\n\t\t} else {\n\t\t\tviewController.type(typeInput.text);\n\t\t}\n\t}\n\n\tprivate _updateCursorStatesAfterType(\n\t\tprimaryPositionOffset: number,\n\t\tdesiredSelectionStartOffset: number,\n\t\tdesiredSelectionEndOffset: number,\n\t): void {\n\t\tconst leftDeltaOffsetOfPrimaryCursor =\n\t\t\tdesiredSelectionStartOffset - primaryPositionOffset;\n\t\tconst rightDeltaOffsetOfPrimaryCursor =\n\t\t\tdesiredSelectionEndOffset - primaryPositionOffset;\n\t\tconst cursorPositions = this._context.viewModel\n\t\t\t.getCursorStates()\n\t\t\t.map((cursorState) => cursorState.modelState.position);\n\t\tconst newSelections = cursorPositions.map((cursorPosition) => {\n\t\t\tconst positionLineNumber = cursorPosition.lineNumber;\n\t\t\tconst positionColumn = cursorPosition.column;\n\t\t\treturn new Selection(\n\t\t\t\tpositionLineNumber,\n\t\t\t\tpositionColumn + leftDeltaOffsetOfPrimaryCursor,\n\t\t\t\tpositionLineNumber,\n\t\t\t\tpositionColumn + rightDeltaOffsetOfPrimaryCursor,\n\t\t\t);\n\t\t});\n\t\tconst newCursorStates = newSelections.map((selection) =>\n\t\t\tCursorState.fromModelSelection(selection),\n\t\t);\n\t\tthis._context.viewModel.setCursorStates(\n\t\t\t\"editContext\",\n\t\t\tCursorChangeReason.Explicit,\n\t\t\tnewCursorStates,\n\t\t);\n\t}\n\n\tprivate _getNewEditContextState(): {\n\t\ttext: string;\n\t\tselectionStartOffset: number;\n\t\tselectionEndOffset: number;\n\t\ttextStartPositionWithinEditor: Position;\n\t} {\n\t\tconst selectionStartOffset = this._primarySelection.startColumn - 1;\n\t\tlet selectionEndOffset = 0;\n\t\tfor (\n\t\t\tlet i = this._primarySelection.startLineNumber;\n\t\t\ti <= this._primarySelection.endLineNumber;\n\t\t\ti++\n\t\t) {\n\t\t\tif (i === this._primarySelection.endLineNumber) {\n\t\t\t\tselectionEndOffset += this._primarySelection.endColumn - 1;\n\t\t\t} else {\n\t\t\t\tselectionEndOffset +=\n\t\t\t\t\tthis._context.viewModel.model.getLineMaxColumn(i);\n\t\t\t}\n\t\t}\n\t\tconst endColumnOfEndLineNumber =\n\t\t\tthis._context.viewModel.model.getLineMaxColumn(\n\t\t\t\tthis._primarySelection.endLineNumber,\n\t\t\t);\n\t\tconst rangeOfText = new Range(\n\t\t\tthis._primarySelection.startLineNumber,\n\t\t\t1,\n\t\t\tthis._primarySelection.endLineNumber,\n\t\t\tendColumnOfEndLineNumber,\n\t\t);\n\t\tconst text = this._context.viewModel.model.getValueInRange(\n\t\t\trangeOfText,\n\t\t\tEndOfLinePreference.TextDefined,\n\t\t);\n\t\tconst textStartPositionWithinEditor = rangeOfText.getStartPosition();\n\t\treturn {\n\t\t\ttext,\n\t\t\tselectionStartOffset,\n\t\t\tselectionEndOffset,\n\t\t\ttextStartPositionWithinEditor,\n\t\t};\n\t}\n\n\tprivate _handleTextFormatUpdate(e: TextFormatUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst formats = e.getTextFormats();\n\t\tconst textStartPositionWithinEditor =\n\t\t\tthis._textStartPositionWithinEditor;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tformats.forEach((f) => {\n\t\t\tconst textModel = this._context.viewModel.model;\n\t\t\tconst offsetOfEditContextText = textModel.getOffsetAt(\n\t\t\t\ttextStartPositionWithinEditor,\n\t\t\t);\n\t\t\tconst startPositionOfDecoration = textModel.getPositionAt(\n\t\t\t\toffsetOfEditContextText + f.rangeStart,\n\t\t\t);\n\t\t\tconst endPositionOfDecoration = textModel.getPositionAt(\n\t\t\t\toffsetOfEditContextText + f.rangeEnd,\n\t\t\t);\n\t\t\tconst decorationRange = Range.fromPositions(\n\t\t\t\tstartPositionOfDecoration,\n\t\t\t\tendPositionOfDecoration,\n\t\t\t);\n\t\t\tconst classNames = [\n\t\t\t\t\"edit-context-format-decoration\",\n\t\t\t\t`underline-style-${f.underlineStyle.toLowerCase()}`,\n\t\t\t\t`underline-thickness-${f.underlineThickness.toLowerCase()}`,\n\t\t\t];\n\t\t\tdecorations.push({\n\t\t\t\trange: decorationRange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"textFormatDecoration\",\n\t\t\t\t\tinlineClassName: classNames.join(\" \"),\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t\tthis._decorations = this._context.viewModel.model.deltaDecorations(\n\t\t\tthis._decorations,\n\t\t\tdecorations,\n\t\t);\n\t}\n\n\tprivate _updateSelectionAndControlBounds() {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst verticalOffsetStart =\n\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\tthis._primarySelection.startLineNumber,\n\t\t\t);\n\t\tconst editorScrollTop = this._context.viewLayout.getCurrentScrollTop();\n\n\t\tconst top = parentBounds.top + verticalOffsetStart - editorScrollTop;\n\t\tconst height =\n\t\t\t(this._primarySelection.endLineNumber -\n\t\t\t\tthis._primarySelection.startLineNumber +\n\t\t\t\t1) *\n\t\t\tlineHeight;\n\t\tlet left = parentBounds.left + contentLeft;\n\t\tlet width: number;\n\n\t\tif (this._primarySelection.isEmpty()) {\n\t\t\tif (this._renderingContext) {\n\t\t\t\tconst linesVisibleRanges =\n\t\t\t\t\tthis._renderingContext.linesVisibleRangesForRange(\n\t\t\t\t\t\tthis._primarySelection,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t) ?? [];\n\t\t\t\tif (linesVisibleRanges.length > 0) {\n\t\t\t\t\tleft += Math.min(\n\t\t\t\t\t\t...linesVisibleRanges.map((r) =>\n\t\t\t\t\t\t\tMath.min(...r.ranges.map((r) => r.left)),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\twidth =\n\t\t\t\toptions.get(EditorOption.fontInfo)\n\t\t\t\t\t.typicalHalfwidthCharacterWidth / 2;\n\t\t} else {\n\t\t\twidth = parentBounds.width - contentLeft;\n\t\t}\n\n\t\tconst selectionBounds = new DOMRect(left, top, width, height);\n\t\tconst controlBounds = selectionBounds;\n\t\tthis._editContext.updateControlBounds(controlBounds);\n\t\tthis._editContext.updateSelectionBounds(selectionBounds);\n\t}\n\n\tprivate _updateCharacterBounds() {\n\t\tif (!this._parent || !this._compositionRangeWithinEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst compositionRangeWithinEditor = this._compositionRangeWithinEditor;\n\t\tconst verticalOffsetStartOfComposition =\n\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\tcompositionRangeWithinEditor.startLineNumber,\n\t\t\t);\n\t\tconst editorScrollTop = this._context.viewLayout.getCurrentScrollTop();\n\t\tconst top =\n\t\t\tparentBounds.top +\n\t\t\tverticalOffsetStartOfComposition -\n\t\t\teditorScrollTop;\n\n\t\tconst characterBounds: DOMRect[] = [];\n\t\tif (this._renderingContext) {\n\t\t\tconst linesVisibleRanges =\n\t\t\t\tthis._renderingContext.linesVisibleRangesForRange(\n\t\t\t\t\tcompositionRangeWithinEditor,\n\t\t\t\t\ttrue,\n\t\t\t\t) ?? [];\n\t\t\tfor (const lineVisibleRanges of linesVisibleRanges) {\n\t\t\t\tfor (const visibleRange of lineVisibleRanges.ranges) {\n\t\t\t\t\tcharacterBounds.push(\n\t\t\t\t\t\tnew DOMRect(\n\t\t\t\t\t\t\tparentBounds.left + contentLeft + visibleRange.left,\n\t\t\t\t\t\t\ttop,\n\t\t\t\t\t\t\tvisibleRange.width,\n\t\t\t\t\t\t\tlineHeight,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst textModel = this._context.viewModel.model;\n\t\tconst offsetOfEditContextStart = textModel.getOffsetAt(\n\t\t\tthis._textStartPositionWithinEditor,\n\t\t);\n\t\tconst offsetOfCompositionStart = textModel.getOffsetAt(\n\t\t\tcompositionRangeWithinEditor.getStartPosition(),\n\t\t);\n\t\tconst offsetOfCompositionStartInEditContext =\n\t\t\toffsetOfCompositionStart - offsetOfEditContextStart;\n\t\tthis._editContext.updateCharacterBounds(\n\t\t\toffsetOfCompositionStartInEditContext,\n\t\t\tcharacterBounds,\n\t\t);\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(\n\t\tclipboardService: IClipboardService,\n\t): void {\n\t\tconst options = this._context.configuration.options;\n\t\tconst emptySelectionClipboard = options.get(\n\t\t\tEditorOption.emptySelectionClipboard,\n\t\t);\n\t\tconst copyWithSyntaxHighlighting = options.get(\n\t\t\tEditorOption.copyWithSyntaxHighlighting,\n\t\t);\n\t\tconst selections = this._context.viewModel\n\t\t\t.getCursorStates()\n\t\t\t.map((cursorState) => cursorState.modelState.selection);\n\t\tconst dataToCopy = getDataToCopy(\n\t\t\tthis._context.viewModel,\n\t\t\tselections,\n\t\t\temptySelectionClipboard,\n\t\t\tcopyWithSyntaxHighlighting,\n\t\t);\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode,\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\tisFirefox\n\t\t\t\t? dataToCopy.text.replace(/\\r\\n/g, \"\\n\")\n\t\t\t\t: dataToCopy.text,\n\t\t\tstoredMetadata,\n\t\t);\n\t\tclipboardService.writeText(dataToCopy.text);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["r"]
}
