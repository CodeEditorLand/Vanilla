import "./nativeEditContext.css";
import { FastDomNode } from "../../../../../base/browser/fastDomNode.js";
import { IClipboardService } from "../../../../../platform/clipboard/common/clipboardService.js";
import { IInstantiationService } from "../../../../../platform/instantiation/common/instantiation.js";
import { Position } from "../../../../common/core/position.js";
import { ViewConfigurationChangedEvent, ViewCursorStateChangedEvent } from "../../../../common/viewEvents.js";
import { ViewContext } from "../../../../common/viewModel/viewContext.js";
import { RenderingContext, RestrictedRenderingContext } from "../../../view/renderingContext.js";
import { ViewController } from "../../../view/viewController.js";
import { AbstractEditContext } from "../editContextUtils.js";
export declare class NativeEditContext extends AbstractEditContext {
    readonly domNode: FastDomNode<HTMLDivElement>;
    private readonly _editContext;
    private readonly _screenReaderSupport;
    private _parent;
    private _decorations;
    private _renderingContext;
    private _primarySelection;
    private _textStartPositionWithinEditor;
    private _compositionRangeWithinEditor;
    private readonly _focusTracker;
    constructor(context: ViewContext, viewController: ViewController, instantiationService: IInstantiationService, clipboardService: IClipboardService);
    dispose(): void;
    appendTo(overflowGuardContainer: FastDomNode<HTMLElement>): void;
    setAriaOptions(): void;
    getLastRenderData(): Position | null;
    prepareRender(ctx: RenderingContext): void;
    render(ctx: RestrictedRenderingContext): void;
    onCursorStateChanged(e: ViewCursorStateChangedEvent): boolean;
    onConfigurationChanged(e: ViewConfigurationChangedEvent): boolean;
    writeScreenReaderContent(): void;
    isFocused(): boolean;
    focus(): void;
    refreshFocusState(): void;
    private _updateDomAttributes;
    private _updateEditContext;
    private _emitTypeEvent;
    private _onType;
    private _updateCursorStatesAfterType;
    private _getNewEditContextState;
    private _handleTextFormatUpdate;
    private _updateSelectionAndControlBounds;
    private _updateCharacterBounds;
    private _ensureClipboardGetsEditorSelection;
}
