{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/clipboardUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IViewModel } from '../../../common/viewModel.js';\nimport { Range } from '../../../common/core/range.js';\nimport { isWindows } from '../../../../base/common/platform.js';\n\nexport function getDataToCopy(viewModel: IViewModel, modelSelections: Range[], emptySelectionClipboard: boolean, copyWithSyntaxHighlighting: boolean): ClipboardDataToCopy {\n\tconst rawTextToCopy = viewModel.getPlainTextToCopy(modelSelections, emptySelectionClipboard, isWindows);\n\tconst newLineCharacter = viewModel.model.getEOL();\n\n\tconst isFromEmptySelection = (emptySelectionClipboard && modelSelections.length === 1 && modelSelections[0].isEmpty());\n\tconst multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\n\tconst text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\n\n\tlet html: string | null | undefined = undefined;\n\tlet mode: string | null = null;\n\tif (CopyOptions.forceCopyWithSyntaxHighlighting || (copyWithSyntaxHighlighting && text.length < 65536)) {\n\t\tconst richText = viewModel.getRichTextToCopy(modelSelections, emptySelectionClipboard);\n\t\tif (richText) {\n\t\t\thtml = richText.html;\n\t\t\tmode = richText.mode;\n\t\t}\n\t}\n\tconst dataToCopy: ClipboardDataToCopy = {\n\t\tisFromEmptySelection,\n\t\tmulticursorText,\n\t\ttext,\n\t\thtml,\n\t\tmode\n\t};\n\treturn dataToCopy;\n}\n\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nexport class InMemoryClipboardMetadataManager {\n\tpublic static readonly INSTANCE = new InMemoryClipboardMetadataManager();\n\n\tprivate _lastState: InMemoryClipboardMetadata | null;\n\n\tconstructor() {\n\t\tthis._lastState = null;\n\t}\n\n\tpublic set(lastCopiedValue: string, data: ClipboardStoredMetadata): void {\n\t\tthis._lastState = { lastCopiedValue, data };\n\t}\n\n\tpublic get(pastedText: string): ClipboardStoredMetadata | null {\n\t\tif (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n\t\t\t// match!\n\t\t\treturn this._lastState.data;\n\t\t}\n\t\tthis._lastState = null;\n\t\treturn null;\n\t}\n}\n\nexport interface ClipboardDataToCopy {\n\tisFromEmptySelection: boolean;\n\tmulticursorText: string[] | null | undefined;\n\ttext: string;\n\thtml: string | null | undefined;\n\tmode: string | null;\n}\n\nexport interface ClipboardStoredMetadata {\n\tversion: 1;\n\tisFromEmptySelection: boolean | undefined;\n\tmulticursorText: string[] | null | undefined;\n\tmode: string | null;\n}\n\nexport const CopyOptions = {\n\tforceCopyWithSyntaxHighlighting: false\n};\n\ninterface InMemoryClipboardMetadata {\n\tlastCopiedValue: string;\n\tdata: ClipboardStoredMetadata;\n}\n"],
  "mappings": ";;AAIA,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAEnB,SAAS,cAAc,WAAuB,iBAA0B,yBAAkC,4BAA0D;AAC1K,QAAM,gBAAgB,UAAU,mBAAmB,iBAAiB,yBAAyB,SAAS;AACtG,QAAM,mBAAmB,UAAU,MAAM,OAAO;AAEhD,QAAM,uBAAwB,2BAA2B,gBAAgB,WAAW,KAAK,gBAAgB,CAAC,EAAE,QAAQ;AACpH,QAAM,kBAAmB,MAAM,QAAQ,aAAa,IAAI,gBAAgB;AACxE,QAAM,OAAQ,MAAM,QAAQ,aAAa,IAAI,cAAc,KAAK,gBAAgB,IAAI;AAEpF,MAAI,OAAkC;AACtC,MAAI,OAAsB;AAC1B,MAAI,YAAY,mCAAoC,8BAA8B,KAAK,SAAS,OAAQ;AACvG,UAAM,WAAW,UAAU,kBAAkB,iBAAiB,uBAAuB;AACrF,QAAI,UAAU;AACb,aAAO,SAAS;AAChB,aAAO,SAAS;AAAA,IACjB;AAAA,EACD;AACA,QAAM,aAAkC;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,SAAO;AACR;AAzBgB;AAgCT,MAAM,iCAAiC;AAAA,EAxC9C,OAwC8C;AAAA;AAAA;AAAA,EAC7C,OAAuB,WAAW,IAAI,iCAAiC;AAAA,EAE/D;AAAA,EAER,cAAc;AACb,SAAK,aAAa;AAAA,EACnB;AAAA,EAEO,IAAI,iBAAyB,MAAqC;AACxE,SAAK,aAAa,EAAE,iBAAiB,KAAK;AAAA,EAC3C;AAAA,EAEO,IAAI,YAAoD;AAC9D,QAAI,KAAK,cAAc,KAAK,WAAW,oBAAoB,YAAY;AAEtE,aAAO,KAAK,WAAW;AAAA,IACxB;AACA,SAAK,aAAa;AAClB,WAAO;AAAA,EACR;AACD;AAiBO,MAAM,cAAc;AAAA,EAC1B,iCAAiC;AAClC;",
  "names": []
}
