{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/textArea/textAreaEditContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./textAreaEditContext.css\";\nimport * as browser from \"../../../../../base/browser/browser.js\";\nimport {\n\ttype FastDomNode,\n\tcreateFastDomNode,\n} from \"../../../../../base/browser/fastDomNode.js\";\nimport type { IKeyboardEvent } from \"../../../../../base/browser/keyboardEvent.js\";\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from \"../../../../../base/browser/ui/mouseCursor/mouseCursor.js\";\nimport { Color } from \"../../../../../base/common/color.js\";\nimport { IME } from \"../../../../../base/common/ime.js\";\nimport * as platform from \"../../../../../base/common/platform.js\";\nimport * as strings from \"../../../../../base/common/strings.js\";\nimport * as nls from \"../../../../../nls.js\";\nimport { AccessibilitySupport } from \"../../../../../platform/accessibility/common/accessibility.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tEditorOption,\n\tEditorOptions,\n\ttype IComputedEditorOptions,\n\tRenderLineNumbersType,\n} from \"../../../../common/config/editorOptions.js\";\nimport type { FontInfo } from \"../../../../common/config/fontInfo.js\";\nimport { Position } from \"../../../../common/core/position.js\";\nimport { Range } from \"../../../../common/core/range.js\";\nimport { Selection } from \"../../../../common/core/selection.js\";\nimport {\n\tWordCharacterClass,\n\tgetMapForWordSeparators,\n} from \"../../../../common/core/wordCharacterClassifier.js\";\nimport { ScrollType } from \"../../../../common/editorCommon.js\";\nimport {\n\tColorId,\n\ttype ITokenPresentation,\n} from \"../../../../common/encodedTokenAttributes.js\";\nimport { TokenizationRegistry } from \"../../../../common/languages.js\";\nimport { EndOfLinePreference } from \"../../../../common/model.js\";\nimport * as viewEvents from \"../../../../common/viewEvents.js\";\nimport type { ViewContext } from \"../../../../common/viewModel/viewContext.js\";\nimport { applyFontInfo } from \"../../../config/domFontInfo.js\";\nimport type { IEditorAriaOptions } from \"../../../editorBrowser.js\";\nimport type {\n\tHorizontalPosition,\n\tRenderingContext,\n\tRestrictedRenderingContext,\n} from \"../../../view/renderingContext.js\";\nimport type { ViewController } from \"../../../view/viewController.js\";\nimport { PartFingerprint, PartFingerprints } from \"../../../view/viewPart.js\";\nimport { LineNumbersOverlay } from \"../../../viewParts/lineNumbers/lineNumbers.js\";\nimport { Margin } from \"../../../viewParts/margin/margin.js\";\nimport { type ClipboardDataToCopy, getDataToCopy } from \"../clipboardUtils.js\";\nimport { AbstractEditContext } from \"../editContextUtils.js\";\nimport {\n\ttype ISimpleModel,\n\tPagedScreenReaderStrategy,\n\tariaLabelForScreenReaderContent,\n\tnewlinecount,\n} from \"../screenReaderUtils.js\";\nimport {\n\ttype ICompositionData,\n\ttype IPasteData,\n\ttype ITextAreaInputHost,\n\tTextAreaInput,\n\tTextAreaWrapper,\n} from \"./textAreaEditContextInput.js\";\nimport {\n\ttype ITypeData,\n\tTextAreaState,\n\t_debugComposition,\n} from \"./textAreaEditContextState.js\";\n\nexport interface IVisibleRangeProvider {\n\tvisibleRangeForPosition(position: Position): HorizontalPosition | null;\n}\n\nclass VisibleTextAreaData {\n\t_visibleTextAreaBrand: void = undefined;\n\n\tpublic startPosition: Position | null = null;\n\tpublic endPosition: Position | null = null;\n\n\tpublic visibleTextareaStart: HorizontalPosition | null = null;\n\tpublic visibleTextareaEnd: HorizontalPosition | null = null;\n\n\t/**\n\t * When doing composition, the currently composed text might be split up into\n\t * multiple tokens, then merged again into a single token, etc. Here we attempt\n\t * to keep the presentation of the <textarea> stable by using the previous used\n\t * style if multiple tokens come into play. This avoids flickering.\n\t */\n\tprivate _previousPresentation: ITokenPresentation | null = null;\n\n\tconstructor(\n\t\tprivate readonly _context: ViewContext,\n\t\tpublic readonly modelLineNumber: number,\n\t\tpublic readonly distanceToModelLineStart: number,\n\t\tpublic readonly widthOfHiddenLineTextBefore: number,\n\t\tpublic readonly distanceToModelLineEnd: number,\n\t) {}\n\n\tprepareRender(visibleRangeProvider: IVisibleRangeProvider): void {\n\t\tconst startModelPosition = new Position(\n\t\t\tthis.modelLineNumber,\n\t\t\tthis.distanceToModelLineStart + 1,\n\t\t);\n\t\tconst endModelPosition = new Position(\n\t\t\tthis.modelLineNumber,\n\t\t\tthis._context.viewModel.model.getLineMaxColumn(\n\t\t\t\tthis.modelLineNumber,\n\t\t\t) - this.distanceToModelLineEnd,\n\t\t);\n\n\t\tthis.startPosition =\n\t\t\tthis._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\tstartModelPosition,\n\t\t\t);\n\t\tthis.endPosition =\n\t\t\tthis._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\tendModelPosition,\n\t\t\t);\n\n\t\tif (this.startPosition.lineNumber === this.endPosition.lineNumber) {\n\t\t\tthis.visibleTextareaStart =\n\t\t\t\tvisibleRangeProvider.visibleRangeForPosition(\n\t\t\t\t\tthis.startPosition,\n\t\t\t\t);\n\t\t\tthis.visibleTextareaEnd =\n\t\t\t\tvisibleRangeProvider.visibleRangeForPosition(this.endPosition);\n\t\t} else {\n\t\t\t// TODO: what if the view positions are not on the same line?\n\t\t\tthis.visibleTextareaStart = null;\n\t\t\tthis.visibleTextareaEnd = null;\n\t\t}\n\t}\n\n\tdefinePresentation(\n\t\ttokenPresentation: ITokenPresentation | null,\n\t): ITokenPresentation {\n\t\tif (!this._previousPresentation) {\n\t\t\t// To avoid flickering, once set, always reuse a presentation throughout the entire IME session\n\t\t\tif (tokenPresentation) {\n\t\t\t\tthis._previousPresentation = tokenPresentation;\n\t\t\t} else {\n\t\t\t\tthis._previousPresentation = {\n\t\t\t\t\tforeground: ColorId.DefaultForeground,\n\t\t\t\t\titalic: false,\n\t\t\t\t\tbold: false,\n\t\t\t\t\tunderline: false,\n\t\t\t\t\tstrikethrough: false,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn this._previousPresentation;\n\t}\n}\n\nconst canUseZeroSizeTextarea = browser.isFirefox;\n\nexport class TextAreaEditContext extends AbstractEditContext {\n\tprivate readonly _viewController: ViewController;\n\tprivate readonly _visibleRangeProvider: IVisibleRangeProvider;\n\tprivate _scrollLeft: number;\n\tprivate _scrollTop: number;\n\n\tprivate _accessibilitySupport!: AccessibilitySupport;\n\tprivate _accessibilityPageSize!: number;\n\tprivate _textAreaWrapping!: boolean;\n\tprivate _textAreaWidth!: number;\n\tprivate _contentLeft: number;\n\tprivate _contentWidth: number;\n\tprivate _contentHeight: number;\n\tprivate _fontInfo: FontInfo;\n\tprivate _lineHeight: number;\n\tprivate _emptySelectionClipboard: boolean;\n\tprivate _copyWithSyntaxHighlighting: boolean;\n\n\t/**\n\t * Defined only when the text area is visible (composition case).\n\t */\n\tprivate _visibleTextArea: VisibleTextAreaData | null;\n\tprivate _selections: Selection[];\n\tprivate _modelSelections: Selection[];\n\n\t/**\n\t * The position at which the textarea was rendered.\n\t * This is useful for hit-testing and determining the mouse position.\n\t */\n\tprivate _lastRenderPosition: Position | null;\n\n\tpublic readonly textArea: FastDomNode<HTMLTextAreaElement>;\n\tpublic readonly textAreaCover: FastDomNode<HTMLElement>;\n\tprivate readonly _textAreaInput: TextAreaInput;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tviewController: ViewController,\n\t\tvisibleRangeProvider: IVisibleRangeProvider,\n\t\t@IKeybindingService\n\t\tprivate readonly _keybindingService: IKeybindingService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper(context);\n\n\t\tthis._viewController = viewController;\n\t\tthis._visibleRangeProvider = visibleRangeProvider;\n\t\tthis._scrollLeft = 0;\n\t\tthis._scrollTop = 0;\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis._setAccessibilityOptions(options);\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\tthis._contentHeight = layoutInfo.height;\n\t\tthis._fontInfo = options.get(EditorOption.fontInfo);\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._emptySelectionClipboard = options.get(\n\t\t\tEditorOption.emptySelectionClipboard,\n\t\t);\n\t\tthis._copyWithSyntaxHighlighting = options.get(\n\t\t\tEditorOption.copyWithSyntaxHighlighting,\n\t\t);\n\n\t\tthis._visibleTextArea = null;\n\t\tthis._selections = [new Selection(1, 1, 1, 1)];\n\t\tthis._modelSelections = [new Selection(1, 1, 1, 1)];\n\t\tthis._lastRenderPosition = null;\n\n\t\t// Text Area (The focus will always be in the textarea when the cursor is blinking)\n\t\tthis.textArea = createFastDomNode(document.createElement(\"textarea\"));\n\t\tPartFingerprints.write(this.textArea, PartFingerprint.TextArea);\n\t\tthis.textArea.setClassName(\n\t\t\t`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`,\n\t\t);\n\t\tthis.textArea.setAttribute(\n\t\t\t\"wrap\",\n\t\t\tthis._textAreaWrapping && !this._visibleTextArea ? \"on\" : \"off\",\n\t\t);\n\t\tconst { tabSize } = this._context.viewModel.model.getOptions();\n\t\tthis.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n\t\tthis.textArea.setAttribute(\"autocorrect\", \"off\");\n\t\tthis.textArea.setAttribute(\"autocapitalize\", \"off\");\n\t\tthis.textArea.setAttribute(\"autocomplete\", \"off\");\n\t\tthis.textArea.setAttribute(\"spellcheck\", \"false\");\n\t\tthis.textArea.setAttribute(\n\t\t\t\"aria-label\",\n\t\t\tariaLabelForScreenReaderContent(options, this._keybindingService),\n\t\t);\n\t\tthis.textArea.setAttribute(\n\t\t\t\"aria-required\",\n\t\t\toptions.get(EditorOption.ariaRequired) ? \"true\" : \"false\",\n\t\t);\n\t\tthis.textArea.setAttribute(\n\t\t\t\"tabindex\",\n\t\t\tString(options.get(EditorOption.tabIndex)),\n\t\t);\n\t\tthis.textArea.setAttribute(\"role\", \"textbox\");\n\t\tthis.textArea.setAttribute(\n\t\t\t\"aria-roledescription\",\n\t\t\tnls.localize(\"editor\", \"editor\"),\n\t\t);\n\t\tthis.textArea.setAttribute(\"aria-multiline\", \"true\");\n\t\tthis.textArea.setAttribute(\n\t\t\t\"aria-autocomplete\",\n\t\t\toptions.get(EditorOption.readOnly) ? \"none\" : \"both\",\n\t\t);\n\n\t\tthis._ensureReadOnlyAttribute();\n\n\t\tthis.textAreaCover = createFastDomNode(document.createElement(\"div\"));\n\t\tthis.textAreaCover.setPosition(\"absolute\");\n\n\t\tconst simpleModel: ISimpleModel = {\n\t\t\tgetLineCount: (): number => {\n\t\t\t\treturn this._context.viewModel.getLineCount();\n\t\t\t},\n\t\t\tgetLineMaxColumn: (lineNumber: number): number => {\n\t\t\t\treturn this._context.viewModel.getLineMaxColumn(lineNumber);\n\t\t\t},\n\t\t\tgetValueInRange: (\n\t\t\t\trange: Range,\n\t\t\t\teol: EndOfLinePreference,\n\t\t\t): string => {\n\t\t\t\treturn this._context.viewModel.getValueInRange(range, eol);\n\t\t\t},\n\t\t\tgetValueLengthInRange: (\n\t\t\t\trange: Range,\n\t\t\t\teol: EndOfLinePreference,\n\t\t\t): number => {\n\t\t\t\treturn this._context.viewModel.getValueLengthInRange(\n\t\t\t\t\trange,\n\t\t\t\t\teol,\n\t\t\t\t);\n\t\t\t},\n\t\t\tmodifyPosition: (position: Position, offset: number): Position => {\n\t\t\t\treturn this._context.viewModel.modifyPosition(position, offset);\n\t\t\t},\n\t\t};\n\n\t\tconst textAreaInputHost: ITextAreaInputHost = {\n\t\t\tgetDataToCopy: (): ClipboardDataToCopy => {\n\t\t\t\treturn getDataToCopy(\n\t\t\t\t\tthis._context.viewModel,\n\t\t\t\t\tthis._modelSelections,\n\t\t\t\t\tthis._emptySelectionClipboard,\n\t\t\t\t\tthis._copyWithSyntaxHighlighting,\n\t\t\t\t);\n\t\t\t},\n\t\t\tgetScreenReaderContent: (): TextAreaState => {\n\t\t\t\tif (\n\t\t\t\t\tthis._accessibilitySupport === AccessibilitySupport.Disabled\n\t\t\t\t) {\n\t\t\t\t\t// We know for a fact that a screen reader is not attached\n\t\t\t\t\t// On OSX, we write the character before the cursor to allow for \"long-press\" composition\n\t\t\t\t\t// Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n\t\t\t\t\tconst selection = this._selections[0];\n\t\t\t\t\tif (platform.isMacintosh && selection.isEmpty()) {\n\t\t\t\t\t\tconst position = selection.getStartPosition();\n\n\t\t\t\t\t\tlet textBefore = this._getWordBeforePosition(position);\n\t\t\t\t\t\tif (textBefore.length === 0) {\n\t\t\t\t\t\t\ttextBefore =\n\t\t\t\t\t\t\t\tthis._getCharacterBeforePosition(position);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (textBefore.length > 0) {\n\t\t\t\t\t\t\treturn new TextAreaState(\n\t\t\t\t\t\t\t\ttextBefore,\n\t\t\t\t\t\t\t\ttextBefore.length,\n\t\t\t\t\t\t\t\ttextBefore.length,\n\t\t\t\t\t\t\t\tRange.fromPositions(position),\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// on macOS, write current selection into textarea will allow system text services pick selected text,\n\t\t\t\t\t// but we still want to limit the amount of text given Chromium handles very poorly text even of a few\n\t\t\t\t\t// thousand chars\n\t\t\t\t\t// (https://github.com/microsoft/vscode/issues/27799)\n\t\t\t\t\tconst LIMIT_CHARS = 500;\n\t\t\t\t\tif (\n\t\t\t\t\t\tplatform.isMacintosh &&\n\t\t\t\t\t\t!selection.isEmpty() &&\n\t\t\t\t\t\tsimpleModel.getValueLengthInRange(\n\t\t\t\t\t\t\tselection,\n\t\t\t\t\t\t\tEndOfLinePreference.TextDefined,\n\t\t\t\t\t\t) < LIMIT_CHARS\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst text = simpleModel.getValueInRange(\n\t\t\t\t\t\t\tselection,\n\t\t\t\t\t\t\tEndOfLinePreference.TextDefined,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn new TextAreaState(\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\ttext.length,\n\t\t\t\t\t\t\tselection,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// on Safari, document.execCommand('cut') and document.execCommand('copy') will just not work\n\t\t\t\t\t// if the textarea has no content selected. So if there is an editor selection, ensure something\n\t\t\t\t\t// is selected in the textarea.\n\t\t\t\t\tif (browser.isSafari && !selection.isEmpty()) {\n\t\t\t\t\t\tconst placeholderText = \"vscode-placeholder\";\n\t\t\t\t\t\treturn new TextAreaState(\n\t\t\t\t\t\t\tplaceholderText,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tplaceholderText.length,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn TextAreaState.EMPTY;\n\t\t\t\t}\n\n\t\t\t\tif (browser.isAndroid) {\n\t\t\t\t\t// when tapping in the editor on a word, Android enters composition mode.\n\t\t\t\t\t// in the `compositionstart` event we cannot clear the textarea, because\n\t\t\t\t\t// it then forgets to ever send a `compositionend`.\n\t\t\t\t\t// we therefore only write the current word in the textarea\n\t\t\t\t\tconst selection = this._selections[0];\n\t\t\t\t\tif (selection.isEmpty()) {\n\t\t\t\t\t\tconst position = selection.getStartPosition();\n\t\t\t\t\t\tconst [wordAtPosition, positionOffsetInWord] =\n\t\t\t\t\t\t\tthis._getAndroidWordAtPosition(position);\n\t\t\t\t\t\tif (wordAtPosition.length > 0) {\n\t\t\t\t\t\t\treturn new TextAreaState(\n\t\t\t\t\t\t\t\twordAtPosition,\n\t\t\t\t\t\t\t\tpositionOffsetInWord,\n\t\t\t\t\t\t\t\tpositionOffsetInWord,\n\t\t\t\t\t\t\t\tRange.fromPositions(position),\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn TextAreaState.EMPTY;\n\t\t\t\t}\n\n\t\t\t\tconst screenReaderContentState =\n\t\t\t\t\tPagedScreenReaderStrategy.fromEditorSelection(\n\t\t\t\t\t\tsimpleModel,\n\t\t\t\t\t\tthis._selections[0],\n\t\t\t\t\t\tthis._accessibilityPageSize,\n\t\t\t\t\t\tthis._accessibilitySupport ===\n\t\t\t\t\t\t\tAccessibilitySupport.Unknown,\n\t\t\t\t\t);\n\t\t\t\treturn TextAreaState.fromScreenReaderContentState(\n\t\t\t\t\tscreenReaderContentState,\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tdeduceModelPosition: (\n\t\t\t\tviewAnchorPosition: Position,\n\t\t\t\tdeltaOffset: number,\n\t\t\t\tlineFeedCnt: number,\n\t\t\t): Position => {\n\t\t\t\treturn this._context.viewModel.deduceModelPositionRelativeToViewPosition(\n\t\t\t\t\tviewAnchorPosition,\n\t\t\t\t\tdeltaOffset,\n\t\t\t\t\tlineFeedCnt,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\n\t\tconst textAreaWrapper = this._register(\n\t\t\tnew TextAreaWrapper(this.textArea.domNode),\n\t\t);\n\t\tthis._textAreaInput = this._register(\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\tTextAreaInput,\n\t\t\t\ttextAreaInputHost,\n\t\t\t\ttextAreaWrapper,\n\t\t\t\tplatform.OS,\n\t\t\t\t{\n\t\t\t\t\tisAndroid: browser.isAndroid,\n\t\t\t\t\tisChrome: browser.isChrome,\n\t\t\t\t\tisFirefox: browser.isFirefox,\n\t\t\t\t\tisSafari: browser.isSafari,\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onKeyDown((e: IKeyboardEvent) => {\n\t\t\t\tthis._viewController.emitKeyDown(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onKeyUp((e: IKeyboardEvent) => {\n\t\t\t\tthis._viewController.emitKeyUp(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onPaste((e: IPasteData) => {\n\t\t\t\tlet pasteOnNewLine = false;\n\t\t\t\tlet multicursorText: string[] | null = null;\n\t\t\t\tlet mode: string | null = null;\n\t\t\t\tif (e.metadata) {\n\t\t\t\t\tpasteOnNewLine =\n\t\t\t\t\t\tthis._emptySelectionClipboard &&\n\t\t\t\t\t\t!!e.metadata.isFromEmptySelection;\n\t\t\t\t\tmulticursorText =\n\t\t\t\t\t\ttypeof e.metadata.multicursorText !== \"undefined\"\n\t\t\t\t\t\t\t? e.metadata.multicursorText\n\t\t\t\t\t\t\t: null;\n\t\t\t\t\tmode = e.metadata.mode;\n\t\t\t\t}\n\t\t\t\tthis._viewController.paste(\n\t\t\t\t\te.text,\n\t\t\t\t\tpasteOnNewLine,\n\t\t\t\t\tmulticursorText,\n\t\t\t\t\tmode,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onCut(() => {\n\t\t\t\tthis._viewController.cut();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onType((e: ITypeData) => {\n\t\t\t\tif (\n\t\t\t\t\te.replacePrevCharCnt ||\n\t\t\t\t\te.replaceNextCharCnt ||\n\t\t\t\t\te.positionDelta\n\t\t\t\t) {\n\t\t\t\t\t// must be handled through the new command\n\t\t\t\t\tif (_debugComposition) {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis._viewController.compositionType(\n\t\t\t\t\t\te.text,\n\t\t\t\t\t\te.replacePrevCharCnt,\n\t\t\t\t\t\te.replaceNextCharCnt,\n\t\t\t\t\t\te.positionDelta,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tif (_debugComposition) {\n\t\t\t\t\t\tconsole.log(` => type: <<${e.text}>>`);\n\t\t\t\t\t}\n\t\t\t\t\tthis._viewController.type(e.text);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onSelectionChangeRequest(\n\t\t\t\t(modelSelection: Selection) => {\n\t\t\t\t\tthis._viewController.setSelection(modelSelection);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onCompositionStart((e) => {\n\t\t\t\t// The textarea might contain some content when composition starts.\n\t\t\t\t//\n\t\t\t\t// When we make the textarea visible, it always has a height of 1 line,\n\t\t\t\t// so we don't need to worry too much about content on lines above or below\n\t\t\t\t// the selection.\n\t\t\t\t//\n\t\t\t\t// However, the text on the current line needs to be made visible because\n\t\t\t\t// some IME methods allow to move to other glyphs on the current line\n\t\t\t\t// (by pressing arrow keys).\n\t\t\t\t//\n\t\t\t\t// (1) The textarea might contain only some parts of the current line,\n\t\t\t\t// like the word before the selection. Also, the content inside the textarea\n\t\t\t\t// can grow or shrink as composition occurs. We therefore anchor the textarea\n\t\t\t\t// in terms of distance to a certain line start and line end.\n\t\t\t\t//\n\t\t\t\t// (2) Also, we should not make \\t characters visible, because their rendering\n\t\t\t\t// inside the <textarea> will not align nicely with our rendering. We therefore\n\t\t\t\t// will hide (if necessary) some of the leading text on the current line.\n\n\t\t\t\tconst ta = this.textArea.domNode;\n\t\t\t\tconst modelSelection = this._modelSelections[0];\n\n\t\t\t\tconst { distanceToModelLineStart, widthOfHiddenTextBefore } =\n\t\t\t\t\t(() => {\n\t\t\t\t\t\t// Find the text that is on the current line before the selection\n\t\t\t\t\t\tconst textBeforeSelection = ta.value.substring(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tMath.min(ta.selectionStart, ta.selectionEnd),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst lineFeedOffset1 =\n\t\t\t\t\t\t\ttextBeforeSelection.lastIndexOf(\"\\n\");\n\t\t\t\t\t\tconst lineTextBeforeSelection =\n\t\t\t\t\t\t\ttextBeforeSelection.substring(lineFeedOffset1 + 1);\n\n\t\t\t\t\t\t// We now search to see if we should hide some part of it (if it contains \\t)\n\t\t\t\t\t\tconst tabOffset1 =\n\t\t\t\t\t\t\tlineTextBeforeSelection.lastIndexOf(\"\\t\");\n\t\t\t\t\t\tconst desiredVisibleBeforeCharCount =\n\t\t\t\t\t\t\tlineTextBeforeSelection.length - tabOffset1 - 1;\n\t\t\t\t\t\tconst startModelPosition =\n\t\t\t\t\t\t\tmodelSelection.getStartPosition();\n\t\t\t\t\t\tconst visibleBeforeCharCount = Math.min(\n\t\t\t\t\t\t\tstartModelPosition.column - 1,\n\t\t\t\t\t\t\tdesiredVisibleBeforeCharCount,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst distanceToModelLineStart =\n\t\t\t\t\t\t\tstartModelPosition.column -\n\t\t\t\t\t\t\t1 -\n\t\t\t\t\t\t\tvisibleBeforeCharCount;\n\t\t\t\t\t\tconst hiddenLineTextBefore =\n\t\t\t\t\t\t\tlineTextBeforeSelection.substring(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tlineTextBeforeSelection.length -\n\t\t\t\t\t\t\t\t\tvisibleBeforeCharCount,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { tabSize } =\n\t\t\t\t\t\t\tthis._context.viewModel.model.getOptions();\n\t\t\t\t\t\tconst widthOfHiddenTextBefore = measureText(\n\t\t\t\t\t\t\tthis.textArea.domNode.ownerDocument,\n\t\t\t\t\t\t\thiddenLineTextBefore,\n\t\t\t\t\t\t\tthis._fontInfo,\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdistanceToModelLineStart,\n\t\t\t\t\t\t\twidthOfHiddenTextBefore,\n\t\t\t\t\t\t};\n\t\t\t\t\t})();\n\n\t\t\t\tconst { distanceToModelLineEnd } = (() => {\n\t\t\t\t\t// Find the text that is on the current line after the selection\n\t\t\t\t\tconst textAfterSelection = ta.value.substring(\n\t\t\t\t\t\tMath.max(ta.selectionStart, ta.selectionEnd),\n\t\t\t\t\t);\n\t\t\t\t\tconst lineFeedOffset2 = textAfterSelection.indexOf(\"\\n\");\n\t\t\t\t\tconst lineTextAfterSelection =\n\t\t\t\t\t\tlineFeedOffset2 === -1\n\t\t\t\t\t\t\t? textAfterSelection\n\t\t\t\t\t\t\t: textAfterSelection.substring(0, lineFeedOffset2);\n\n\t\t\t\t\tconst tabOffset2 = lineTextAfterSelection.indexOf(\"\\t\");\n\t\t\t\t\tconst desiredVisibleAfterCharCount =\n\t\t\t\t\t\ttabOffset2 === -1\n\t\t\t\t\t\t\t? lineTextAfterSelection.length\n\t\t\t\t\t\t\t: lineTextAfterSelection.length - tabOffset2 - 1;\n\t\t\t\t\tconst endModelPosition = modelSelection.getEndPosition();\n\t\t\t\t\tconst visibleAfterCharCount = Math.min(\n\t\t\t\t\t\tthis._context.viewModel.model.getLineMaxColumn(\n\t\t\t\t\t\t\tendModelPosition.lineNumber,\n\t\t\t\t\t\t) - endModelPosition.column,\n\t\t\t\t\t\tdesiredVisibleAfterCharCount,\n\t\t\t\t\t);\n\t\t\t\t\tconst distanceToModelLineEnd =\n\t\t\t\t\t\tthis._context.viewModel.model.getLineMaxColumn(\n\t\t\t\t\t\t\tendModelPosition.lineNumber,\n\t\t\t\t\t\t) -\n\t\t\t\t\t\tendModelPosition.column -\n\t\t\t\t\t\tvisibleAfterCharCount;\n\n\t\t\t\t\treturn { distanceToModelLineEnd };\n\t\t\t\t})();\n\n\t\t\t\t// Scroll to reveal the location in the editor where composition occurs\n\t\t\t\tthis._context.viewModel.revealRange(\n\t\t\t\t\t\"keyboard\",\n\t\t\t\t\ttrue,\n\t\t\t\t\tRange.fromPositions(this._selections[0].getStartPosition()),\n\t\t\t\t\tviewEvents.VerticalRevealType.Simple,\n\t\t\t\t\tScrollType.Immediate,\n\t\t\t\t);\n\n\t\t\t\tthis._visibleTextArea = new VisibleTextAreaData(\n\t\t\t\t\tthis._context,\n\t\t\t\t\tmodelSelection.startLineNumber,\n\t\t\t\t\tdistanceToModelLineStart,\n\t\t\t\t\twidthOfHiddenTextBefore,\n\t\t\t\t\tdistanceToModelLineEnd,\n\t\t\t\t);\n\n\t\t\t\t// We turn off wrapping if the <textarea> becomes visible for composition\n\t\t\t\tthis.textArea.setAttribute(\n\t\t\t\t\t\"wrap\",\n\t\t\t\t\tthis._textAreaWrapping && !this._visibleTextArea\n\t\t\t\t\t\t? \"on\"\n\t\t\t\t\t\t: \"off\",\n\t\t\t\t);\n\n\t\t\t\tthis._visibleTextArea.prepareRender(this._visibleRangeProvider);\n\t\t\t\tthis._render();\n\n\t\t\t\t// Show the textarea\n\t\t\t\tthis.textArea.setClassName(\n\t\t\t\t\t`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`,\n\t\t\t\t);\n\n\t\t\t\tthis._viewController.compositionStart();\n\t\t\t\tthis._context.viewModel.onCompositionStart();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onCompositionUpdate((e: ICompositionData) => {\n\t\t\t\tif (!this._visibleTextArea) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._visibleTextArea.prepareRender(this._visibleRangeProvider);\n\t\t\t\tthis._render();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onCompositionEnd(() => {\n\t\t\t\tthis._visibleTextArea = null;\n\n\t\t\t\t// We turn on wrapping as necessary if the <textarea> hides after composition\n\t\t\t\tthis.textArea.setAttribute(\n\t\t\t\t\t\"wrap\",\n\t\t\t\t\tthis._textAreaWrapping && !this._visibleTextArea\n\t\t\t\t\t\t? \"on\"\n\t\t\t\t\t\t: \"off\",\n\t\t\t\t);\n\n\t\t\t\tthis._render();\n\n\t\t\t\tthis.textArea.setClassName(\n\t\t\t\t\t`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`,\n\t\t\t\t);\n\t\t\t\tthis._viewController.compositionEnd();\n\t\t\t\tthis._context.viewModel.onCompositionEnd();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onFocus(() => {\n\t\t\t\tthis._context.viewModel.setHasFocus(true);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textAreaInput.onBlur(() => {\n\t\t\t\tthis._context.viewModel.setHasFocus(false);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tIME.onDidChange(() => {\n\t\t\t\tthis._ensureReadOnlyAttribute();\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic get domNode() {\n\t\treturn this.textArea;\n\t}\n\n\tappendTo(overflowGuardContainer: FastDomNode<HTMLElement>): void {\n\t\toverflowGuardContainer.appendChild(this.textArea);\n\t\toverflowGuardContainer.appendChild(this.textAreaCover);\n\t}\n\n\tpublic writeScreenReaderContent(reason: string): void {\n\t\tthis._textAreaInput.writeNativeTextAreaContent(reason);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.textArea.domNode.remove();\n\t\tthis.textAreaCover.domNode.remove();\n\t}\n\n\tprivate _getAndroidWordAtPosition(position: Position): [string, number] {\n\t\tconst ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n\t\tconst lineContent = this._context.viewModel.getLineContent(\n\t\t\tposition.lineNumber,\n\t\t);\n\t\tconst wordSeparators = getMapForWordSeparators(\n\t\t\tANDROID_WORD_SEPARATORS,\n\t\t\t[],\n\t\t);\n\n\t\tlet goingLeft = true;\n\t\tlet startColumn = position.column;\n\t\tlet goingRight = true;\n\t\tlet endColumn = position.column;\n\t\tlet distance = 0;\n\t\twhile (distance < 50 && (goingLeft || goingRight)) {\n\t\t\tif (goingLeft && startColumn <= 1) {\n\t\t\t\tgoingLeft = false;\n\t\t\t}\n\t\t\tif (goingLeft) {\n\t\t\t\tconst charCode = lineContent.charCodeAt(startColumn - 2);\n\t\t\t\tconst charClass = wordSeparators.get(charCode);\n\t\t\t\tif (charClass !== WordCharacterClass.Regular) {\n\t\t\t\t\tgoingLeft = false;\n\t\t\t\t} else {\n\t\t\t\t\tstartColumn--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (goingRight && endColumn > lineContent.length) {\n\t\t\t\tgoingRight = false;\n\t\t\t}\n\t\t\tif (goingRight) {\n\t\t\t\tconst charCode = lineContent.charCodeAt(endColumn - 1);\n\t\t\t\tconst charClass = wordSeparators.get(charCode);\n\t\t\t\tif (charClass !== WordCharacterClass.Regular) {\n\t\t\t\t\tgoingRight = false;\n\t\t\t\t} else {\n\t\t\t\t\tendColumn++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdistance++;\n\t\t}\n\n\t\treturn [\n\t\t\tlineContent.substring(startColumn - 1, endColumn - 1),\n\t\t\tposition.column - startColumn,\n\t\t];\n\t}\n\n\tprivate _getWordBeforePosition(position: Position): string {\n\t\tconst lineContent = this._context.viewModel.getLineContent(\n\t\t\tposition.lineNumber,\n\t\t);\n\t\tconst wordSeparators = getMapForWordSeparators(\n\t\t\tthis._context.configuration.options.get(\n\t\t\t\tEditorOption.wordSeparators,\n\t\t\t),\n\t\t\t[],\n\t\t);\n\n\t\tlet column = position.column;\n\t\tlet distance = 0;\n\t\twhile (column > 1) {\n\t\t\tconst charCode = lineContent.charCodeAt(column - 2);\n\t\t\tconst charClass = wordSeparators.get(charCode);\n\t\t\tif (charClass !== WordCharacterClass.Regular || distance > 50) {\n\t\t\t\treturn lineContent.substring(column - 1, position.column - 1);\n\t\t\t}\n\t\t\tdistance++;\n\t\t\tcolumn--;\n\t\t}\n\t\treturn lineContent.substring(0, position.column - 1);\n\t}\n\n\tprivate _getCharacterBeforePosition(position: Position): string {\n\t\tif (position.column > 1) {\n\t\t\tconst lineContent = this._context.viewModel.getLineContent(\n\t\t\t\tposition.lineNumber,\n\t\t\t);\n\t\t\tconst charBefore = lineContent.charAt(position.column - 2);\n\t\t\tif (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n\t\t\t\treturn charBefore;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tprivate _setAccessibilityOptions(options: IComputedEditorOptions): void {\n\t\tthis._accessibilitySupport = options.get(\n\t\t\tEditorOption.accessibilitySupport,\n\t\t);\n\t\tconst accessibilityPageSize = options.get(\n\t\t\tEditorOption.accessibilityPageSize,\n\t\t);\n\t\tif (\n\t\t\tthis._accessibilitySupport === AccessibilitySupport.Enabled &&\n\t\t\taccessibilityPageSize ===\n\t\t\t\tEditorOptions.accessibilityPageSize.defaultValue\n\t\t) {\n\t\t\t// If a screen reader is attached and the default value is not set we should automatically increase the page size to 500 for a better experience\n\t\t\tthis._accessibilityPageSize = 500;\n\t\t} else {\n\t\t\tthis._accessibilityPageSize = accessibilityPageSize;\n\t\t}\n\n\t\t// When wrapping is enabled and a screen reader might be attached,\n\t\t// we will size the textarea to match the width used for wrapping points computation (see `domLineBreaksComputer.ts`).\n\t\t// This is because screen readers will read the text in the textarea and we'd like that the\n\t\t// wrapping points in the textarea match the wrapping points in the editor.\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst wrappingColumn = layoutInfo.wrappingColumn;\n\t\tif (\n\t\t\twrappingColumn !== -1 &&\n\t\t\tthis._accessibilitySupport !== AccessibilitySupport.Disabled\n\t\t) {\n\t\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\t\tthis._textAreaWrapping = true;\n\t\t\tthis._textAreaWidth = Math.round(\n\t\t\t\twrappingColumn * fontInfo.typicalHalfwidthCharacterWidth,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._textAreaWrapping = false;\n\t\t\tthis._textAreaWidth = canUseZeroSizeTextarea ? 0 : 1;\n\t\t}\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(\n\t\te: viewEvents.ViewConfigurationChangedEvent,\n\t): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis._setAccessibilityOptions(options);\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\tthis._contentHeight = layoutInfo.height;\n\t\tthis._fontInfo = options.get(EditorOption.fontInfo);\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._emptySelectionClipboard = options.get(\n\t\t\tEditorOption.emptySelectionClipboard,\n\t\t);\n\t\tthis._copyWithSyntaxHighlighting = options.get(\n\t\t\tEditorOption.copyWithSyntaxHighlighting,\n\t\t);\n\t\tthis.textArea.setAttribute(\n\t\t\t\"wrap\",\n\t\t\tthis._textAreaWrapping && !this._visibleTextArea ? \"on\" : \"off\",\n\t\t);\n\t\tconst { tabSize } = this._context.viewModel.model.getOptions();\n\t\tthis.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n\t\tthis.textArea.setAttribute(\n\t\t\t\"aria-label\",\n\t\t\tariaLabelForScreenReaderContent(options, this._keybindingService),\n\t\t);\n\t\tthis.textArea.setAttribute(\n\t\t\t\"aria-required\",\n\t\t\toptions.get(EditorOption.ariaRequired) ? \"true\" : \"false\",\n\t\t);\n\t\tthis.textArea.setAttribute(\n\t\t\t\"tabindex\",\n\t\t\tString(options.get(EditorOption.tabIndex)),\n\t\t);\n\n\t\tif (\n\t\t\te.hasChanged(EditorOption.domReadOnly) ||\n\t\t\te.hasChanged(EditorOption.readOnly)\n\t\t) {\n\t\t\tthis._ensureReadOnlyAttribute();\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.accessibilitySupport)) {\n\t\t\tthis._textAreaInput.writeNativeTextAreaContent(\"strategy changed\");\n\t\t}\n\n\t\treturn true;\n\t}\n\tpublic override onCursorStateChanged(\n\t\te: viewEvents.ViewCursorStateChangedEvent,\n\t): boolean {\n\t\tthis._selections = e.selections.slice(0);\n\t\tthis._modelSelections = e.modelSelections.slice(0);\n\t\t// We must update the <textarea> synchronously, otherwise long press IME on macos breaks.\n\t\t// See https://github.com/microsoft/vscode/issues/165821\n\t\tthis._textAreaInput.writeNativeTextAreaContent(\"selection changed\");\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(\n\t\te: viewEvents.ViewDecorationsChangedEvent,\n\t): boolean {\n\t\t// true for inline decorations that can end up relayouting text\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(\n\t\te: viewEvents.ViewLinesChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(\n\t\te: viewEvents.ViewLinesDeletedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(\n\t\te: viewEvents.ViewLinesInsertedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(\n\t\te: viewEvents.ViewScrollChangedEvent,\n\t): boolean {\n\t\tthis._scrollLeft = e.scrollLeft;\n\t\tthis._scrollTop = e.scrollTop;\n\t\treturn true;\n\t}\n\tpublic override onZonesChanged(\n\t\te: viewEvents.ViewZonesChangedEvent,\n\t): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\t// --- begin view API\n\n\tpublic isFocused(): boolean {\n\t\treturn this._textAreaInput.isFocused();\n\t}\n\n\tpublic focus(): void {\n\t\tthis._textAreaInput.focusTextArea();\n\t}\n\n\tpublic refreshFocusState() {\n\t\tthis._textAreaInput.refreshFocusState();\n\t}\n\n\tpublic getLastRenderData(): Position | null {\n\t\treturn this._lastRenderPosition;\n\t}\n\n\tpublic setAriaOptions(options: IEditorAriaOptions): void {\n\t\tif (options.activeDescendant) {\n\t\t\tthis.textArea.setAttribute(\"aria-haspopup\", \"true\");\n\t\t\tthis.textArea.setAttribute(\"aria-autocomplete\", \"list\");\n\t\t\tthis.textArea.setAttribute(\n\t\t\t\t\"aria-activedescendant\",\n\t\t\t\toptions.activeDescendant,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.textArea.setAttribute(\"aria-haspopup\", \"false\");\n\t\t\tthis.textArea.setAttribute(\"aria-autocomplete\", \"both\");\n\t\t\tthis.textArea.removeAttribute(\"aria-activedescendant\");\n\t\t}\n\t\tif (options.role) {\n\t\t\tthis.textArea.setAttribute(\"role\", options.role);\n\t\t}\n\t}\n\n\t// --- end view API\n\n\tprivate _ensureReadOnlyAttribute(): void {\n\t\tconst options = this._context.configuration.options;\n\t\t// When someone requests to disable IME, we set the \"readonly\" attribute on the <textarea>.\n\t\t// This will prevent composition.\n\t\tconst useReadOnly =\n\t\t\t!IME.enabled ||\n\t\t\t(options.get(EditorOption.domReadOnly) &&\n\t\t\t\toptions.get(EditorOption.readOnly));\n\t\tif (useReadOnly) {\n\t\t\tthis.textArea.setAttribute(\"readonly\", \"true\");\n\t\t} else {\n\t\t\tthis.textArea.removeAttribute(\"readonly\");\n\t\t}\n\t}\n\n\tprivate _primaryCursorPosition: Position = new Position(1, 1);\n\tprivate _primaryCursorVisibleRange: HorizontalPosition | null = null;\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._primaryCursorPosition = new Position(\n\t\t\tthis._selections[0].positionLineNumber,\n\t\t\tthis._selections[0].positionColumn,\n\t\t);\n\t\tthis._primaryCursorVisibleRange = ctx.visibleRangeForPosition(\n\t\t\tthis._primaryCursorPosition,\n\t\t);\n\t\tthis._visibleTextArea?.prepareRender(ctx);\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._textAreaInput.writeNativeTextAreaContent(\"render\");\n\t\tthis._render();\n\t}\n\n\tprivate _render(): void {\n\t\tif (this._visibleTextArea) {\n\t\t\t// The text area is visible for composition reasons\n\n\t\t\tconst visibleStart = this._visibleTextArea.visibleTextareaStart;\n\t\t\tconst visibleEnd = this._visibleTextArea.visibleTextareaEnd;\n\t\t\tconst startPosition = this._visibleTextArea.startPosition;\n\t\t\tconst endPosition = this._visibleTextArea.endPosition;\n\t\t\tif (\n\t\t\t\tstartPosition &&\n\t\t\t\tendPosition &&\n\t\t\t\tvisibleStart &&\n\t\t\t\tvisibleEnd &&\n\t\t\t\tvisibleEnd.left >= this._scrollLeft &&\n\t\t\t\tvisibleStart.left <= this._scrollLeft + this._contentWidth\n\t\t\t) {\n\t\t\t\tconst top =\n\t\t\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\t\t\tthis._primaryCursorPosition.lineNumber,\n\t\t\t\t\t) - this._scrollTop;\n\t\t\t\tconst lineCount = newlinecount(\n\t\t\t\t\tthis.textArea.domNode.value.substr(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tthis.textArea.domNode.selectionStart,\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\tlet scrollLeft =\n\t\t\t\t\tthis._visibleTextArea.widthOfHiddenLineTextBefore;\n\t\t\t\tlet left =\n\t\t\t\t\tthis._contentLeft + visibleStart.left - this._scrollLeft;\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/141725#issuecomment-1050670841\n\t\t\t\t// Here we are adding +1 to avoid flickering that might be caused by having a width that is too small.\n\t\t\t\t// This could be caused by rounding errors that might only show up with certain font families.\n\t\t\t\t// In other words, a pixel might be lost when doing something like\n\t\t\t\t//      `Math.round(end) - Math.round(start)`\n\t\t\t\t// vs\n\t\t\t\t//      `Math.round(end - start)`\n\t\t\t\tlet width = visibleEnd.left - visibleStart.left + 1;\n\t\t\t\tif (left < this._contentLeft) {\n\t\t\t\t\t// the textarea would be rendered on top of the margin,\n\t\t\t\t\t// so reduce its width. We use the same technique as\n\t\t\t\t\t// for hiding text before\n\t\t\t\t\tconst delta = this._contentLeft - left;\n\t\t\t\t\tleft += delta;\n\t\t\t\t\tscrollLeft += delta;\n\t\t\t\t\twidth -= delta;\n\t\t\t\t}\n\t\t\t\tif (width > this._contentWidth) {\n\t\t\t\t\t// the textarea would be wider than the content width,\n\t\t\t\t\t// so reduce its width.\n\t\t\t\t\twidth = this._contentWidth;\n\t\t\t\t}\n\n\t\t\t\t// Try to render the textarea with the color/font style to match the text under it\n\t\t\t\tconst viewLineData = this._context.viewModel.getViewLineData(\n\t\t\t\t\tstartPosition.lineNumber,\n\t\t\t\t);\n\t\t\t\tconst startTokenIndex =\n\t\t\t\t\tviewLineData.tokens.findTokenIndexAtOffset(\n\t\t\t\t\t\tstartPosition.column - 1,\n\t\t\t\t\t);\n\t\t\t\tconst endTokenIndex =\n\t\t\t\t\tviewLineData.tokens.findTokenIndexAtOffset(\n\t\t\t\t\t\tendPosition.column - 1,\n\t\t\t\t\t);\n\t\t\t\tconst textareaSpansSingleToken =\n\t\t\t\t\tstartTokenIndex === endTokenIndex;\n\t\t\t\tconst presentation = this._visibleTextArea.definePresentation(\n\t\t\t\t\ttextareaSpansSingleToken\n\t\t\t\t\t\t? viewLineData.tokens.getPresentation(startTokenIndex)\n\t\t\t\t\t\t: null,\n\t\t\t\t);\n\n\t\t\t\tthis.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n\t\t\t\tthis.textArea.domNode.scrollLeft = scrollLeft;\n\n\t\t\t\tthis._doRender({\n\t\t\t\t\tlastRenderPosition: null,\n\t\t\t\t\ttop: top,\n\t\t\t\t\tleft: left,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: this._lineHeight,\n\t\t\t\t\tuseCover: false,\n\t\t\t\t\tcolor: (TokenizationRegistry.getColorMap() || [])[\n\t\t\t\t\t\tpresentation.foreground\n\t\t\t\t\t],\n\t\t\t\t\titalic: presentation.italic,\n\t\t\t\t\tbold: presentation.bold,\n\t\t\t\t\tunderline: presentation.underline,\n\t\t\t\t\tstrikethrough: presentation.strikethrough,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._primaryCursorVisibleRange) {\n\t\t\t// The primary cursor is outside the viewport => place textarea to the top left\n\t\t\tthis._renderAtTopLeft();\n\t\t\treturn;\n\t\t}\n\n\t\tconst left =\n\t\t\tthis._contentLeft +\n\t\t\tthis._primaryCursorVisibleRange.left -\n\t\t\tthis._scrollLeft;\n\t\tif (\n\t\t\tleft < this._contentLeft ||\n\t\t\tleft > this._contentLeft + this._contentWidth\n\t\t) {\n\t\t\t// cursor is outside the viewport\n\t\t\tthis._renderAtTopLeft();\n\t\t\treturn;\n\t\t}\n\n\t\tconst top =\n\t\t\tthis._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\t\tthis._selections[0].positionLineNumber,\n\t\t\t) - this._scrollTop;\n\t\tif (top < 0 || top > this._contentHeight) {\n\t\t\t// cursor is outside the viewport\n\t\t\tthis._renderAtTopLeft();\n\t\t\treturn;\n\t\t}\n\n\t\t// The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n\n\t\tif (\n\t\t\tplatform.isMacintosh ||\n\t\t\tthis._accessibilitySupport === AccessibilitySupport.Enabled\n\t\t) {\n\t\t\t// For the popup emoji input, we will make the text area as high as the line height\n\t\t\t// We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n\t\t\tthis._doRender({\n\t\t\t\tlastRenderPosition: this._primaryCursorPosition,\n\t\t\t\ttop,\n\t\t\t\tleft: this._textAreaWrapping ? this._contentLeft : left,\n\t\t\t\twidth: this._textAreaWidth,\n\t\t\t\theight: this._lineHeight,\n\t\t\t\tuseCover: false,\n\t\t\t});\n\t\t\t// In case the textarea contains a word, we're going to try to align the textarea's cursor\n\t\t\t// with our cursor by scrolling the textarea as much as possible\n\t\t\tthis.textArea.domNode.scrollLeft =\n\t\t\t\tthis._primaryCursorVisibleRange.left;\n\t\t\tconst lineCount =\n\t\t\t\tthis._textAreaInput.textAreaState.newlineCountBeforeSelection ??\n\t\t\t\tnewlinecount(\n\t\t\t\t\tthis.textArea.domNode.value.substring(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tthis.textArea.domNode.selectionStart,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tthis.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._doRender({\n\t\t\tlastRenderPosition: this._primaryCursorPosition,\n\t\t\ttop: top,\n\t\t\tleft: this._textAreaWrapping ? this._contentLeft : left,\n\t\t\twidth: this._textAreaWidth,\n\t\t\theight: canUseZeroSizeTextarea ? 0 : 1,\n\t\t\tuseCover: false,\n\t\t});\n\t}\n\n\tprivate _renderAtTopLeft(): void {\n\t\t// (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n\t\t// specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n\t\tthis._doRender({\n\t\t\tlastRenderPosition: null,\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\twidth: this._textAreaWidth,\n\t\t\theight: canUseZeroSizeTextarea ? 0 : 1,\n\t\t\tuseCover: true,\n\t\t});\n\t}\n\n\tprivate _doRender(renderData: IRenderData): void {\n\t\tthis._lastRenderPosition = renderData.lastRenderPosition;\n\n\t\tconst ta = this.textArea;\n\t\tconst tac = this.textAreaCover;\n\n\t\tapplyFontInfo(ta, this._fontInfo);\n\t\tta.setTop(renderData.top);\n\t\tta.setLeft(renderData.left);\n\t\tta.setWidth(renderData.width);\n\t\tta.setHeight(renderData.height);\n\n\t\tta.setColor(\n\t\t\trenderData.color\n\t\t\t\t? Color.Format.CSS.formatHex(renderData.color)\n\t\t\t\t: \"\",\n\t\t);\n\t\tta.setFontStyle(renderData.italic ? \"italic\" : \"\");\n\t\tif (renderData.bold) {\n\t\t\t// fontWeight is also set by `applyFontInfo`, so only overwrite it if necessary\n\t\t\tta.setFontWeight(\"bold\");\n\t\t}\n\t\tta.setTextDecoration(\n\t\t\t`${renderData.underline ? \" underline\" : \"\"}${renderData.strikethrough ? \" line-through\" : \"\"}`,\n\t\t);\n\n\t\ttac.setTop(renderData.useCover ? renderData.top : 0);\n\t\ttac.setLeft(renderData.useCover ? renderData.left : 0);\n\t\ttac.setWidth(renderData.useCover ? renderData.width : 0);\n\t\ttac.setHeight(renderData.useCover ? renderData.height : 0);\n\n\t\tconst options = this._context.configuration.options;\n\n\t\tif (options.get(EditorOption.glyphMargin)) {\n\t\t\ttac.setClassName(\n\t\t\t\t\"monaco-editor-background textAreaCover \" +\n\t\t\t\t\tMargin.OUTER_CLASS_NAME,\n\t\t\t);\n\t\t} else if (\n\t\t\toptions.get(EditorOption.lineNumbers).renderType !==\n\t\t\tRenderLineNumbersType.Off\n\t\t) {\n\t\t\ttac.setClassName(\n\t\t\t\t\"monaco-editor-background textAreaCover \" +\n\t\t\t\t\tLineNumbersOverlay.CLASS_NAME,\n\t\t\t);\n\t\t} else {\n\t\t\ttac.setClassName(\"monaco-editor-background textAreaCover\");\n\t\t}\n\t}\n}\n\ninterface IRenderData {\n\tlastRenderPosition: Position | null;\n\ttop: number;\n\tleft: number;\n\twidth: number;\n\theight: number;\n\tuseCover: boolean;\n\n\tcolor?: Color | null;\n\titalic?: boolean;\n\tbold?: boolean;\n\tunderline?: boolean;\n\tstrikethrough?: boolean;\n}\n\nfunction measureText(\n\ttargetDocument: Document,\n\ttext: string,\n\tfontInfo: FontInfo,\n\ttabSize: number,\n): number {\n\tif (text.length === 0) {\n\t\treturn 0;\n\t}\n\n\tconst container = targetDocument.createElement(\"div\");\n\tcontainer.style.position = \"absolute\";\n\tcontainer.style.top = \"-50000px\";\n\tcontainer.style.width = \"50000px\";\n\n\tconst regularDomNode = targetDocument.createElement(\"span\");\n\tapplyFontInfo(regularDomNode, fontInfo);\n\tregularDomNode.style.whiteSpace = \"pre\"; // just like the textarea\n\tregularDomNode.style.tabSize = `${tabSize * fontInfo.spaceWidth}px`; // just like the textarea\n\tregularDomNode.append(text);\n\tcontainer.appendChild(regularDomNode);\n\n\ttargetDocument.body.appendChild(container);\n\n\tconst res = regularDomNode.offsetWidth;\n\n\tcontainer.remove();\n\n\treturn res;\n}\n"],
  "mappings": "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",
  "names": ["distanceToModelLineStart", "tabSize", "widthOfHiddenTextBefore", "distanceToModelLineEnd", "top", "left"]
}
