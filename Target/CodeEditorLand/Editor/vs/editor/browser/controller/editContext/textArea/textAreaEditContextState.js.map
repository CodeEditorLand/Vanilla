{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/textArea/textAreaEditContextState.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { commonPrefixLength, commonSuffixLength } from '../../../../../base/common/strings.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { ScreenReaderContentState } from '../screenReaderUtils.js';\n\nexport const _debugComposition = false;\n\nexport interface ITextAreaWrapper {\n\tgetValue(): string;\n\tsetValue(reason: string, value: string): void;\n\n\tgetSelectionStart(): number;\n\tgetSelectionEnd(): number;\n\tsetSelectionRange(reason: string, selectionStart: number, selectionEnd: number): void;\n}\n\nexport interface ITypeData {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n\nexport class TextAreaState {\n\n\tpublic static readonly EMPTY = new TextAreaState('', 0, 0, null, undefined);\n\n\tconstructor(\n\t\tpublic readonly value: string,\n\t\t/** the offset where selection starts inside `value` */\n\t\tpublic readonly selectionStart: number,\n\t\t/** the offset where selection ends inside `value` */\n\t\tpublic readonly selectionEnd: number,\n\t\t/** the editor range in the view coordinate system that matches the selection inside `value` */\n\t\tpublic readonly selection: Range | null,\n\t\t/** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n\t\tpublic readonly newlineCountBeforeSelection: number | undefined,\n\t) { }\n\n\tpublic toString(): string {\n\t\treturn `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n\t}\n\n\tpublic static readFromTextArea(textArea: ITextAreaWrapper, previousState: TextAreaState | null): TextAreaState {\n\t\tconst value = textArea.getValue();\n\t\tconst selectionStart = textArea.getSelectionStart();\n\t\tconst selectionEnd = textArea.getSelectionEnd();\n\t\tlet newlineCountBeforeSelection: number | undefined = undefined;\n\t\tif (previousState) {\n\t\t\tconst valueBeforeSelectionStart = value.substring(0, selectionStart);\n\t\t\tconst previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n\t\t\tif (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n\t\t\t\tnewlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n\t\t\t}\n\t\t}\n\t\treturn new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n\t}\n\n\tpublic collapseSelection(): TextAreaState {\n\t\tif (this.selectionStart === this.value.length) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n\t}\n\n\tpublic writeToTextArea(reason: string, textArea: ITextAreaWrapper, select: boolean): void {\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(`writeToTextArea ${reason}: ${this.toString()}`);\n\t\t}\n\t\ttextArea.setValue(reason, this.value);\n\t\tif (select) {\n\t\t\ttextArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n\t\t}\n\t}\n\n\tpublic deduceEditorPosition(offset: number): [Position | null, number, number] {\n\t\tif (offset <= this.selectionStart) {\n\t\t\tconst str = this.value.substring(offset, this.selectionStart);\n\t\t\treturn this._finishDeduceEditorPosition(this.selection?.getStartPosition() ?? null, str, -1);\n\t\t}\n\t\tif (offset >= this.selectionEnd) {\n\t\t\tconst str = this.value.substring(this.selectionEnd, offset);\n\t\t\treturn this._finishDeduceEditorPosition(this.selection?.getEndPosition() ?? null, str, 1);\n\t\t}\n\t\tconst str1 = this.value.substring(this.selectionStart, offset);\n\t\tif (str1.indexOf(String.fromCharCode(8230)) === -1) {\n\t\t\treturn this._finishDeduceEditorPosition(this.selection?.getStartPosition() ?? null, str1, 1);\n\t\t}\n\t\tconst str2 = this.value.substring(offset, this.selectionEnd);\n\t\treturn this._finishDeduceEditorPosition(this.selection?.getEndPosition() ?? null, str2, -1);\n\t}\n\n\tprivate _finishDeduceEditorPosition(anchor: Position | null, deltaText: string, signum: number): [Position | null, number, number] {\n\t\tlet lineFeedCnt = 0;\n\t\tlet lastLineFeedIndex = -1;\n\t\twhile ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n\t\t\tlineFeedCnt++;\n\t\t}\n\t\treturn [anchor, signum * deltaText.length, lineFeedCnt];\n\t}\n\n\tpublic static deduceInput(previousState: TextAreaState, currentState: TextAreaState, couldBeEmojiInput: boolean): ITypeData {\n\t\tif (!previousState) {\n\t\t\t// This is the EMPTY state\n\t\t\treturn {\n\t\t\t\ttext: '',\n\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: 0\n\t\t\t};\n\t\t}\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log('------------------------deduceInput');\n\t\t\tconsole.log(`PREVIOUS STATE: ${previousState.toString()}`);\n\t\t\tconsole.log(`CURRENT STATE: ${currentState.toString()}`);\n\t\t}\n\n\t\tconst prefixLength = Math.min(\n\t\t\tcommonPrefixLength(previousState.value, currentState.value),\n\t\t\tpreviousState.selectionStart,\n\t\t\tcurrentState.selectionStart\n\t\t);\n\t\tconst suffixLength = Math.min(\n\t\t\tcommonSuffixLength(previousState.value, currentState.value),\n\t\t\tpreviousState.value.length - previousState.selectionEnd,\n\t\t\tcurrentState.value.length - currentState.selectionEnd\n\t\t);\n\t\tconst previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n\t\tconst currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n\t\tconst previousSelectionStart = previousState.selectionStart - prefixLength;\n\t\tconst previousSelectionEnd = previousState.selectionEnd - prefixLength;\n\t\tconst currentSelectionStart = currentState.selectionStart - prefixLength;\n\t\tconst currentSelectionEnd = currentState.selectionEnd - prefixLength;\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n\t\t\tconsole.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n\t\t}\n\n\t\tif (currentSelectionStart === currentSelectionEnd) {\n\t\t\t// no current selection\n\t\t\tconst replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttext: currentValue,\n\t\t\t\treplacePrevCharCnt: replacePreviousCharacters,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: 0\n\t\t\t};\n\t\t}\n\n\t\t// there is a current selection => composition case\n\t\tconst replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n\t\treturn {\n\t\t\ttext: currentValue,\n\t\t\treplacePrevCharCnt: replacePreviousCharacters,\n\t\t\treplaceNextCharCnt: 0,\n\t\t\tpositionDelta: 0\n\t\t};\n\t}\n\n\tpublic static deduceAndroidCompositionInput(previousState: TextAreaState, currentState: TextAreaState): ITypeData {\n\t\tif (!previousState) {\n\t\t\t// This is the EMPTY state\n\t\t\treturn {\n\t\t\t\ttext: '',\n\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: 0\n\t\t\t};\n\t\t}\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log('------------------------deduceAndroidCompositionInput');\n\t\t\tconsole.log(`PREVIOUS STATE: ${previousState.toString()}`);\n\t\t\tconsole.log(`CURRENT STATE: ${currentState.toString()}`);\n\t\t}\n\n\t\tif (previousState.value === currentState.value) {\n\t\t\treturn {\n\t\t\t\ttext: '',\n\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: currentState.selectionEnd - previousState.selectionEnd\n\t\t\t};\n\t\t}\n\n\t\tconst prefixLength = Math.min(commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n\t\tconst suffixLength = Math.min(commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n\t\tconst previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n\t\tconst currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n\t\tconst previousSelectionStart = previousState.selectionStart - prefixLength;\n\t\tconst previousSelectionEnd = previousState.selectionEnd - prefixLength;\n\t\tconst currentSelectionStart = currentState.selectionStart - prefixLength;\n\t\tconst currentSelectionEnd = currentState.selectionEnd - prefixLength;\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n\t\t\tconsole.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n\t\t}\n\n\t\treturn {\n\t\t\ttext: currentValue,\n\t\t\treplacePrevCharCnt: previousSelectionEnd,\n\t\t\treplaceNextCharCnt: previousValue.length - previousSelectionEnd,\n\t\t\tpositionDelta: currentSelectionEnd - currentValue.length\n\t\t};\n\t}\n\n\tpublic static fromScreenReaderContentState(screenReaderContentState: ScreenReaderContentState) {\n\t\treturn new TextAreaState(\n\t\t\tscreenReaderContentState.value,\n\t\t\tscreenReaderContentState.selectionStart,\n\t\t\tscreenReaderContentState.selectionEnd,\n\t\t\tscreenReaderContentState.selection,\n\t\t\tscreenReaderContentState.newlineCountBeforeSelection\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["replacePreviousCharacters"]
}
