{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/textArea/textAreaEditContextState.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tcommonPrefixLength,\n\tcommonSuffixLength,\n} from \"../../../../../base/common/strings.js\";\nimport type { Position } from \"../../../../common/core/position.js\";\nimport type { Range } from \"../../../../common/core/range.js\";\nimport type { ScreenReaderContentState } from \"../screenReaderUtils.js\";\n\nexport const _debugComposition = false;\n\nexport interface ITextAreaWrapper {\n\tgetValue(): string;\n\tsetValue(reason: string, value: string): void;\n\n\tgetSelectionStart(): number;\n\tgetSelectionEnd(): number;\n\tsetSelectionRange(\n\t\treason: string,\n\t\tselectionStart: number,\n\t\tselectionEnd: number,\n\t): void;\n}\n\nexport interface ITypeData {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n\nexport class TextAreaState {\n\tpublic static readonly EMPTY = new TextAreaState(\"\", 0, 0, null, undefined);\n\n\tconstructor(\n\t\tpublic readonly value: string,\n\t\t/** the offset where selection starts inside `value` */\n\t\tpublic readonly selectionStart: number,\n\t\t/** the offset where selection ends inside `value` */\n\t\tpublic readonly selectionEnd: number,\n\t\t/** the editor range in the view coordinate system that matches the selection inside `value` */\n\t\tpublic readonly selection: Range | null,\n\t\t/** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n\t\tpublic readonly newlineCountBeforeSelection: number | undefined,\n\t) {}\n\n\tpublic toString(): string {\n\t\treturn `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n\t}\n\n\tpublic static readFromTextArea(\n\t\ttextArea: ITextAreaWrapper,\n\t\tpreviousState: TextAreaState | null,\n\t): TextAreaState {\n\t\tconst value = textArea.getValue();\n\t\tconst selectionStart = textArea.getSelectionStart();\n\t\tconst selectionEnd = textArea.getSelectionEnd();\n\t\tlet newlineCountBeforeSelection: number | undefined;\n\t\tif (previousState) {\n\t\t\tconst valueBeforeSelectionStart = value.substring(\n\t\t\t\t0,\n\t\t\t\tselectionStart,\n\t\t\t);\n\t\t\tconst previousValueBeforeSelectionStart =\n\t\t\t\tpreviousState.value.substring(0, previousState.selectionStart);\n\t\t\tif (\n\t\t\t\tvalueBeforeSelectionStart === previousValueBeforeSelectionStart\n\t\t\t) {\n\t\t\t\tnewlineCountBeforeSelection =\n\t\t\t\t\tpreviousState.newlineCountBeforeSelection;\n\t\t\t}\n\t\t}\n\t\treturn new TextAreaState(\n\t\t\tvalue,\n\t\t\tselectionStart,\n\t\t\tselectionEnd,\n\t\t\tnull,\n\t\t\tnewlineCountBeforeSelection,\n\t\t);\n\t}\n\n\tpublic collapseSelection(): TextAreaState {\n\t\tif (this.selectionStart === this.value.length) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new TextAreaState(\n\t\t\tthis.value,\n\t\t\tthis.value.length,\n\t\t\tthis.value.length,\n\t\t\tnull,\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tpublic writeToTextArea(\n\t\treason: string,\n\t\ttextArea: ITextAreaWrapper,\n\t\tselect: boolean,\n\t): void {\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(`writeToTextArea ${reason}: ${this.toString()}`);\n\t\t}\n\t\ttextArea.setValue(reason, this.value);\n\t\tif (select) {\n\t\t\ttextArea.setSelectionRange(\n\t\t\t\treason,\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionEnd,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic deduceEditorPosition(\n\t\toffset: number,\n\t): [Position | null, number, number] {\n\t\tif (offset <= this.selectionStart) {\n\t\t\tconst str = this.value.substring(offset, this.selectionStart);\n\t\t\treturn this._finishDeduceEditorPosition(\n\t\t\t\tthis.selection?.getStartPosition() ?? null,\n\t\t\t\tstr,\n\t\t\t\t-1,\n\t\t\t);\n\t\t}\n\t\tif (offset >= this.selectionEnd) {\n\t\t\tconst str = this.value.substring(this.selectionEnd, offset);\n\t\t\treturn this._finishDeduceEditorPosition(\n\t\t\t\tthis.selection?.getEndPosition() ?? null,\n\t\t\t\tstr,\n\t\t\t\t1,\n\t\t\t);\n\t\t}\n\t\tconst str1 = this.value.substring(this.selectionStart, offset);\n\t\tif (str1.indexOf(String.fromCharCode(8230)) === -1) {\n\t\t\treturn this._finishDeduceEditorPosition(\n\t\t\t\tthis.selection?.getStartPosition() ?? null,\n\t\t\t\tstr1,\n\t\t\t\t1,\n\t\t\t);\n\t\t}\n\t\tconst str2 = this.value.substring(offset, this.selectionEnd);\n\t\treturn this._finishDeduceEditorPosition(\n\t\t\tthis.selection?.getEndPosition() ?? null,\n\t\t\tstr2,\n\t\t\t-1,\n\t\t);\n\t}\n\n\tprivate _finishDeduceEditorPosition(\n\t\tanchor: Position | null,\n\t\tdeltaText: string,\n\t\tsignum: number,\n\t): [Position | null, number, number] {\n\t\tlet lineFeedCnt = 0;\n\t\tlet lastLineFeedIndex = -1;\n\t\twhile (\n\t\t\t(lastLineFeedIndex = deltaText.indexOf(\n\t\t\t\t\"\\n\",\n\t\t\t\tlastLineFeedIndex + 1,\n\t\t\t)) !== -1\n\t\t) {\n\t\t\tlineFeedCnt++;\n\t\t}\n\t\treturn [anchor, signum * deltaText.length, lineFeedCnt];\n\t}\n\n\tpublic static deduceInput(\n\t\tpreviousState: TextAreaState,\n\t\tcurrentState: TextAreaState,\n\t\tcouldBeEmojiInput: boolean,\n\t): ITypeData {\n\t\tif (!previousState) {\n\t\t\t// This is the EMPTY state\n\t\t\treturn {\n\t\t\t\ttext: \"\",\n\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: 0,\n\t\t\t};\n\t\t}\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(\"------------------------deduceInput\");\n\t\t\tconsole.log(`PREVIOUS STATE: ${previousState.toString()}`);\n\t\t\tconsole.log(`CURRENT STATE: ${currentState.toString()}`);\n\t\t}\n\n\t\tconst prefixLength = Math.min(\n\t\t\tcommonPrefixLength(previousState.value, currentState.value),\n\t\t\tpreviousState.selectionStart,\n\t\t\tcurrentState.selectionStart,\n\t\t);\n\t\tconst suffixLength = Math.min(\n\t\t\tcommonSuffixLength(previousState.value, currentState.value),\n\t\t\tpreviousState.value.length - previousState.selectionEnd,\n\t\t\tcurrentState.value.length - currentState.selectionEnd,\n\t\t);\n\t\tconst previousValue = previousState.value.substring(\n\t\t\tprefixLength,\n\t\t\tpreviousState.value.length - suffixLength,\n\t\t);\n\t\tconst currentValue = currentState.value.substring(\n\t\t\tprefixLength,\n\t\t\tcurrentState.value.length - suffixLength,\n\t\t);\n\t\tconst previousSelectionStart =\n\t\t\tpreviousState.selectionStart - prefixLength;\n\t\tconst previousSelectionEnd = previousState.selectionEnd - prefixLength;\n\t\tconst currentSelectionStart =\n\t\t\tcurrentState.selectionStart - prefixLength;\n\t\tconst currentSelectionEnd = currentState.selectionEnd - prefixLength;\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(\n\t\t\t\t`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`,\n\t\t\t);\n\t\t\tconsole.log(\n\t\t\t\t`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`,\n\t\t\t);\n\t\t}\n\n\t\tif (currentSelectionStart === currentSelectionEnd) {\n\t\t\t// no current selection\n\t\t\tconst replacePreviousCharacters =\n\t\t\t\tpreviousState.selectionStart - prefixLength;\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttext: currentValue,\n\t\t\t\treplacePrevCharCnt: replacePreviousCharacters,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: 0,\n\t\t\t};\n\t\t}\n\n\t\t// there is a current selection => composition case\n\t\tconst replacePreviousCharacters =\n\t\t\tpreviousSelectionEnd - previousSelectionStart;\n\t\treturn {\n\t\t\ttext: currentValue,\n\t\t\treplacePrevCharCnt: replacePreviousCharacters,\n\t\t\treplaceNextCharCnt: 0,\n\t\t\tpositionDelta: 0,\n\t\t};\n\t}\n\n\tpublic static deduceAndroidCompositionInput(\n\t\tpreviousState: TextAreaState,\n\t\tcurrentState: TextAreaState,\n\t): ITypeData {\n\t\tif (!previousState) {\n\t\t\t// This is the EMPTY state\n\t\t\treturn {\n\t\t\t\ttext: \"\",\n\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta: 0,\n\t\t\t};\n\t\t}\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(\n\t\t\t\t\"------------------------deduceAndroidCompositionInput\",\n\t\t\t);\n\t\t\tconsole.log(`PREVIOUS STATE: ${previousState.toString()}`);\n\t\t\tconsole.log(`CURRENT STATE: ${currentState.toString()}`);\n\t\t}\n\n\t\tif (previousState.value === currentState.value) {\n\t\t\treturn {\n\t\t\t\ttext: \"\",\n\t\t\t\treplacePrevCharCnt: 0,\n\t\t\t\treplaceNextCharCnt: 0,\n\t\t\t\tpositionDelta:\n\t\t\t\t\tcurrentState.selectionEnd - previousState.selectionEnd,\n\t\t\t};\n\t\t}\n\n\t\tconst prefixLength = Math.min(\n\t\t\tcommonPrefixLength(previousState.value, currentState.value),\n\t\t\tpreviousState.selectionEnd,\n\t\t);\n\t\tconst suffixLength = Math.min(\n\t\t\tcommonSuffixLength(previousState.value, currentState.value),\n\t\t\tpreviousState.value.length - previousState.selectionEnd,\n\t\t);\n\t\tconst previousValue = previousState.value.substring(\n\t\t\tprefixLength,\n\t\t\tpreviousState.value.length - suffixLength,\n\t\t);\n\t\tconst currentValue = currentState.value.substring(\n\t\t\tprefixLength,\n\t\t\tcurrentState.value.length - suffixLength,\n\t\t);\n\t\tconst previousSelectionStart =\n\t\t\tpreviousState.selectionStart - prefixLength;\n\t\tconst previousSelectionEnd = previousState.selectionEnd - prefixLength;\n\t\tconst currentSelectionStart =\n\t\t\tcurrentState.selectionStart - prefixLength;\n\t\tconst currentSelectionEnd = currentState.selectionEnd - prefixLength;\n\n\t\tif (_debugComposition) {\n\t\t\tconsole.log(\n\t\t\t\t`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`,\n\t\t\t);\n\t\t\tconsole.log(\n\t\t\t\t`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`,\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\ttext: currentValue,\n\t\t\treplacePrevCharCnt: previousSelectionEnd,\n\t\t\treplaceNextCharCnt: previousValue.length - previousSelectionEnd,\n\t\t\tpositionDelta: currentSelectionEnd - currentValue.length,\n\t\t};\n\t}\n\n\tpublic static fromScreenReaderContentState(\n\t\tscreenReaderContentState: ScreenReaderContentState,\n\t) {\n\t\treturn new TextAreaState(\n\t\t\tscreenReaderContentState.value,\n\t\t\tscreenReaderContentState.selectionStart,\n\t\t\tscreenReaderContentState.selectionEnd,\n\t\t\tscreenReaderContentState.selection,\n\t\t\tscreenReaderContentState.newlineCountBeforeSelection,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAKA,MAAM,oBAAoB;AAsB1B,MAAM,cAAc;AAAA,EAG1B,YACiB,OAEA,gBAEA,cAEA,WAEA,6BACf;AATe;AAEA;AAEA;AAEA;AAEA;AAAA,EACd;AAAA,EAhDJ,OAmC2B;AAAA;AAAA;AAAA,EAC1B,OAAuB,QAAQ,IAAI,cAAc,IAAI,GAAG,GAAG,MAAM,MAAS;AAAA,EAcnE,WAAmB;AACzB,WAAO,MAAM,KAAK,KAAK,sBAAsB,KAAK,cAAc,mBAAmB,KAAK,YAAY;AAAA,EACrG;AAAA,EAEA,OAAc,iBACb,UACA,eACgB;AAChB,UAAM,QAAQ,SAAS,SAAS;AAChC,UAAM,iBAAiB,SAAS,kBAAkB;AAClD,UAAM,eAAe,SAAS,gBAAgB;AAC9C,QAAI;AACJ,QAAI,eAAe;AAClB,YAAM,4BAA4B,MAAM;AAAA,QACvC;AAAA,QACA;AAAA,MACD;AACA,YAAM,oCACL,cAAc,MAAM,UAAU,GAAG,cAAc,cAAc;AAC9D,UACC,8BAA8B,mCAC7B;AACD,sCACC,cAAc;AAAA,MAChB;AAAA,IACD;AACA,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEO,oBAAmC;AACzC,QAAI,KAAK,mBAAmB,KAAK,MAAM,QAAQ;AAC9C,aAAO;AAAA,IACR;AACA,WAAO,IAAI;AAAA,MACV,KAAK;AAAA,MACL,KAAK,MAAM;AAAA,MACX,KAAK,MAAM;AAAA,MACX;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEO,gBACN,QACA,UACA,QACO;AACP,QAAI,mBAAmB;AACtB,cAAQ,IAAI,mBAAmB,MAAM,KAAK,KAAK,SAAS,CAAC,EAAE;AAAA,IAC5D;AACA,aAAS,SAAS,QAAQ,KAAK,KAAK;AACpC,QAAI,QAAQ;AACX,eAAS;AAAA,QACR;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAAA,EAEO,qBACN,QACoC;AACpC,QAAI,UAAU,KAAK,gBAAgB;AAClC,YAAM,MAAM,KAAK,MAAM,UAAU,QAAQ,KAAK,cAAc;AAC5D,aAAO,KAAK;AAAA,QACX,KAAK,WAAW,iBAAiB,KAAK;AAAA,QACtC;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,QAAI,UAAU,KAAK,cAAc;AAChC,YAAM,MAAM,KAAK,MAAM,UAAU,KAAK,cAAc,MAAM;AAC1D,aAAO,KAAK;AAAA,QACX,KAAK,WAAW,eAAe,KAAK;AAAA,QACpC;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,UAAM,OAAO,KAAK,MAAM,UAAU,KAAK,gBAAgB,MAAM;AAC7D,QAAI,KAAK,QAAQ,OAAO,aAAa,IAAI,CAAC,MAAM,IAAI;AACnD,aAAO,KAAK;AAAA,QACX,KAAK,WAAW,iBAAiB,KAAK;AAAA,QACtC;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,UAAM,OAAO,KAAK,MAAM,UAAU,QAAQ,KAAK,YAAY;AAC3D,WAAO,KAAK;AAAA,MACX,KAAK,WAAW,eAAe,KAAK;AAAA,MACpC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,4BACP,QACA,WACA,QACoC;AACpC,QAAI,cAAc;AAClB,QAAI,oBAAoB;AACxB,YACE,oBAAoB,UAAU;AAAA,MAC9B;AAAA,MACA,oBAAoB;AAAA,IACrB,OAAO,IACN;AACD;AAAA,IACD;AACA,WAAO,CAAC,QAAQ,SAAS,UAAU,QAAQ,WAAW;AAAA,EACvD;AAAA,EAEA,OAAc,YACb,eACA,cACA,mBACY;AACZ,QAAI,CAAC,eAAe;AAEnB,aAAO;AAAA,QACN,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,eAAe;AAAA,MAChB;AAAA,IACD;AAEA,QAAI,mBAAmB;AACtB,cAAQ,IAAI,qCAAqC;AACjD,cAAQ,IAAI,mBAAmB,cAAc,SAAS,CAAC,EAAE;AACzD,cAAQ,IAAI,kBAAkB,aAAa,SAAS,CAAC,EAAE;AAAA,IACxD;AAEA,UAAM,eAAe,KAAK;AAAA,MACzB,mBAAmB,cAAc,OAAO,aAAa,KAAK;AAAA,MAC1D,cAAc;AAAA,MACd,aAAa;AAAA,IACd;AACA,UAAM,eAAe,KAAK;AAAA,MACzB,mBAAmB,cAAc,OAAO,aAAa,KAAK;AAAA,MAC1D,cAAc,MAAM,SAAS,cAAc;AAAA,MAC3C,aAAa,MAAM,SAAS,aAAa;AAAA,IAC1C;AACA,UAAM,gBAAgB,cAAc,MAAM;AAAA,MACzC;AAAA,MACA,cAAc,MAAM,SAAS;AAAA,IAC9B;AACA,UAAM,eAAe,aAAa,MAAM;AAAA,MACvC;AAAA,MACA,aAAa,MAAM,SAAS;AAAA,IAC7B;AACA,UAAM,yBACL,cAAc,iBAAiB;AAChC,UAAM,uBAAuB,cAAc,eAAe;AAC1D,UAAM,wBACL,aAAa,iBAAiB;AAC/B,UAAM,sBAAsB,aAAa,eAAe;AAExD,QAAI,mBAAmB;AACtB,cAAQ;AAAA,QACP,kCAAkC,aAAa,sBAAsB,sBAAsB,mBAAmB,oBAAoB;AAAA,MACnI;AACA,cAAQ;AAAA,QACP,iCAAiC,YAAY,sBAAsB,qBAAqB,mBAAmB,mBAAmB;AAAA,MAC/H;AAAA,IACD;AAEA,QAAI,0BAA0B,qBAAqB;AAElD,YAAMA,6BACL,cAAc,iBAAiB;AAChC,UAAI,mBAAmB;AACtB,gBAAQ;AAAA,UACP,oBAAoBA,0BAAyB;AAAA,QAC9C;AAAA,MACD;AAEA,aAAO;AAAA,QACN,MAAM;AAAA,QACN,oBAAoBA;AAAA,QACpB,oBAAoB;AAAA,QACpB,eAAe;AAAA,MAChB;AAAA,IACD;AAGA,UAAM,4BACL,uBAAuB;AACxB,WAAO;AAAA,MACN,MAAM;AAAA,MACN,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,eAAe;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,OAAc,8BACb,eACA,cACY;AACZ,QAAI,CAAC,eAAe;AAEnB,aAAO;AAAA,QACN,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,eAAe;AAAA,MAChB;AAAA,IACD;AAEA,QAAI,mBAAmB;AACtB,cAAQ;AAAA,QACP;AAAA,MACD;AACA,cAAQ,IAAI,mBAAmB,cAAc,SAAS,CAAC,EAAE;AACzD,cAAQ,IAAI,kBAAkB,aAAa,SAAS,CAAC,EAAE;AAAA,IACxD;AAEA,QAAI,cAAc,UAAU,aAAa,OAAO;AAC/C,aAAO;AAAA,QACN,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,eACC,aAAa,eAAe,cAAc;AAAA,MAC5C;AAAA,IACD;AAEA,UAAM,eAAe,KAAK;AAAA,MACzB,mBAAmB,cAAc,OAAO,aAAa,KAAK;AAAA,MAC1D,cAAc;AAAA,IACf;AACA,UAAM,eAAe,KAAK;AAAA,MACzB,mBAAmB,cAAc,OAAO,aAAa,KAAK;AAAA,MAC1D,cAAc,MAAM,SAAS,cAAc;AAAA,IAC5C;AACA,UAAM,gBAAgB,cAAc,MAAM;AAAA,MACzC;AAAA,MACA,cAAc,MAAM,SAAS;AAAA,IAC9B;AACA,UAAM,eAAe,aAAa,MAAM;AAAA,MACvC;AAAA,MACA,aAAa,MAAM,SAAS;AAAA,IAC7B;AACA,UAAM,yBACL,cAAc,iBAAiB;AAChC,UAAM,uBAAuB,cAAc,eAAe;AAC1D,UAAM,wBACL,aAAa,iBAAiB;AAC/B,UAAM,sBAAsB,aAAa,eAAe;AAExD,QAAI,mBAAmB;AACtB,cAAQ;AAAA,QACP,kCAAkC,aAAa,sBAAsB,sBAAsB,mBAAmB,oBAAoB;AAAA,MACnI;AACA,cAAQ;AAAA,QACP,iCAAiC,YAAY,sBAAsB,qBAAqB,mBAAmB,mBAAmB;AAAA,MAC/H;AAAA,IACD;AAEA,WAAO;AAAA,MACN,MAAM;AAAA,MACN,oBAAoB;AAAA,MACpB,oBAAoB,cAAc,SAAS;AAAA,MAC3C,eAAe,sBAAsB,aAAa;AAAA,IACnD;AAAA,EACD;AAAA,EAEA,OAAc,6BACb,0BACC;AACD,WAAO,IAAI;AAAA,MACV,yBAAyB;AAAA,MACzB,yBAAyB;AAAA,MACzB,yBAAyB;AAAA,MACzB,yBAAyB;AAAA,MACzB,yBAAyB;AAAA,IAC1B;AAAA,EACD;AACD;",
  "names": ["replacePreviousCharacters"]
}
