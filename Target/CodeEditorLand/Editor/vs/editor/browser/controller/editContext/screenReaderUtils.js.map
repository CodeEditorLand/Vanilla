{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/screenReaderUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EndOfLinePreference } from '../../../common/model.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorOption, IComputedEditorOptions } from '../../../common/config/editorOptions.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { AccessibilitySupport } from '../../../../platform/accessibility/common/accessibility.js';\nimport * as nls from '../../../../nls.js';\n\nexport interface ISimpleModel {\n\tgetLineCount(): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\tmodifyPosition(position: Position, offset: number): Position;\n}\n\nexport interface ScreenReaderContentState {\n\tvalue: string;\n\n\t/** the offset where selection starts inside `value` */\n\tselectionStart: number;\n\n\t/** the offset where selection ends inside `value` */\n\tselectionEnd: number;\n\n\t/** the editor range in the view coordinate system that matches the selection inside `value` */\n\tselection: Range;\n\n\t/** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n\tnewlineCountBeforeSelection: number;\n}\n\nexport class PagedScreenReaderStrategy {\n\tprivate static _getPageOfLine(lineNumber: number, linesPerPage: number): number {\n\t\treturn Math.floor((lineNumber - 1) / linesPerPage);\n\t}\n\n\tprivate static _getRangeForPage(page: number, linesPerPage: number): Range {\n\t\tconst offset = page * linesPerPage;\n\t\tconst startLineNumber = offset + 1;\n\t\tconst endLineNumber = offset + linesPerPage;\n\t\treturn new Range(startLineNumber, 1, endLineNumber + 1, 1);\n\t}\n\n\tpublic static fromEditorSelection(model: ISimpleModel, selection: Range, linesPerPage: number, trimLongText: boolean): ScreenReaderContentState {\n\t\t// Chromium handles very poorly text even of a few thousand chars\n\t\t// Cut text to avoid stalling the entire UI\n\t\tconst LIMIT_CHARS = 500;\n\n\t\tconst selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n\t\tconst selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n\n\t\tconst selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n\t\tconst selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n\n\t\tlet pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn))!;\n\t\tif (trimLongText && model.getValueLengthInRange(pretextRange, EndOfLinePreference.LF) > LIMIT_CHARS) {\n\t\t\tconst pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n\t\t\tpretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n\t\t}\n\t\tconst pretext = model.getValueInRange(pretextRange, EndOfLinePreference.LF);\n\n\t\tconst lastLine = model.getLineCount();\n\t\tconst lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\tlet posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn))!;\n\t\tif (trimLongText && model.getValueLengthInRange(posttextRange, EndOfLinePreference.LF) > LIMIT_CHARS) {\n\t\t\tconst posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n\t\t\tposttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n\t\t}\n\t\tconst posttext = model.getValueInRange(posttextRange, EndOfLinePreference.LF);\n\n\n\t\tlet text: string;\n\t\tif (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n\t\t\t// take full selection\n\t\t\ttext = model.getValueInRange(selection, EndOfLinePreference.LF);\n\t\t} else {\n\t\t\tconst selectionRange1 = selectionStartPageRange.intersectRanges(selection)!;\n\t\t\tconst selectionRange2 = selectionEndPageRange.intersectRanges(selection)!;\n\t\t\ttext = (\n\t\t\t\tmodel.getValueInRange(selectionRange1, EndOfLinePreference.LF)\n\t\t\t\t+ String.fromCharCode(8230)\n\t\t\t\t+ model.getValueInRange(selectionRange2, EndOfLinePreference.LF)\n\t\t\t);\n\t\t}\n\t\tif (trimLongText && text.length > 2 * LIMIT_CHARS) {\n\t\t\ttext = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: pretext + text + posttext,\n\t\t\tselection: selection,\n\t\t\tselectionStart: pretext.length,\n\t\t\tselectionEnd: pretext.length + text.length,\n\t\t\tnewlineCountBeforeSelection: pretextRange.endLineNumber - pretextRange.startLineNumber,\n\t\t};\n\t}\n}\n\nexport function ariaLabelForScreenReaderContent(options: IComputedEditorOptions, keybindingService: IKeybindingService) {\n\tconst accessibilitySupport = options.get(EditorOption.accessibilitySupport);\n\tif (accessibilitySupport === AccessibilitySupport.Disabled) {\n\n\t\tconst toggleKeybindingLabel = keybindingService.lookupKeybinding('editor.action.toggleScreenReaderAccessibilityMode')?.getAriaLabel();\n\t\tconst runCommandKeybindingLabel = keybindingService.lookupKeybinding('workbench.action.showCommands')?.getAriaLabel();\n\t\tconst keybindingEditorKeybindingLabel = keybindingService.lookupKeybinding('workbench.action.openGlobalKeybindings')?.getAriaLabel();\n\t\tconst editorNotAccessibleMessage = nls.localize('accessibilityModeOff', \"The editor is not accessible at this time.\");\n\t\tif (toggleKeybindingLabel) {\n\t\t\treturn nls.localize('accessibilityOffAriaLabel', \"{0} To enable screen reader optimized mode, use {1}\", editorNotAccessibleMessage, toggleKeybindingLabel);\n\t\t} else if (runCommandKeybindingLabel) {\n\t\t\treturn nls.localize('accessibilityOffAriaLabelNoKb', \"{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.\", editorNotAccessibleMessage, runCommandKeybindingLabel);\n\t\t} else if (keybindingEditorKeybindingLabel) {\n\t\t\treturn nls.localize('accessibilityOffAriaLabelNoKbs', \"{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.\", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);\n\t\t} else {\n\t\t\t// SOS\n\t\t\treturn editorNotAccessibleMessage;\n\t\t}\n\t}\n\treturn options.get(EditorOption.ariaLabel);\n}\n\nexport function newlinecount(text: string): number {\n\tlet result = 0;\n\tlet startIndex = -1;\n\tdo {\n\t\tstartIndex = text.indexOf('\\n', startIndex + 1);\n\t\tif (startIndex === -1) {\n\t\t\tbreak;\n\t\t}\n\t\tresult++;\n\t} while (true);\n\treturn result;\n}\n"],
  "mappings": "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",
  "names": []
}
