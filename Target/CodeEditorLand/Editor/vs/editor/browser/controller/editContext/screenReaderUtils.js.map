{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/screenReaderUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\nimport { AccessibilitySupport } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport type { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tEditorOption,\n\ttype IComputedEditorOptions,\n} from \"../../../common/config/editorOptions.js\";\nimport type { Position } from \"../../../common/core/position.js\";\nimport { Range } from \"../../../common/core/range.js\";\nimport { EndOfLinePreference } from \"../../../common/model.js\";\n\nexport interface ISimpleModel {\n\tgetLineCount(): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\tmodifyPosition(position: Position, offset: number): Position;\n}\n\nexport interface ScreenReaderContentState {\n\tvalue: string;\n\n\t/** the offset where selection starts inside `value` */\n\tselectionStart: number;\n\n\t/** the offset where selection ends inside `value` */\n\tselectionEnd: number;\n\n\t/** the editor range in the view coordinate system that matches the selection inside `value` */\n\tselection: Range;\n\n\t/** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n\tnewlineCountBeforeSelection: number;\n}\n\nexport class PagedScreenReaderStrategy {\n\tprivate static _getPageOfLine(\n\t\tlineNumber: number,\n\t\tlinesPerPage: number,\n\t): number {\n\t\treturn Math.floor((lineNumber - 1) / linesPerPage);\n\t}\n\n\tprivate static _getRangeForPage(page: number, linesPerPage: number): Range {\n\t\tconst offset = page * linesPerPage;\n\t\tconst startLineNumber = offset + 1;\n\t\tconst endLineNumber = offset + linesPerPage;\n\t\treturn new Range(startLineNumber, 1, endLineNumber + 1, 1);\n\t}\n\n\tpublic static fromEditorSelection(\n\t\tmodel: ISimpleModel,\n\t\tselection: Range,\n\t\tlinesPerPage: number,\n\t\ttrimLongText: boolean,\n\t): ScreenReaderContentState {\n\t\t// Chromium handles very poorly text even of a few thousand chars\n\t\t// Cut text to avoid stalling the entire UI\n\t\tconst LIMIT_CHARS = 500;\n\n\t\tconst selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(\n\t\t\tselection.startLineNumber,\n\t\t\tlinesPerPage,\n\t\t);\n\t\tconst selectionStartPageRange =\n\t\t\tPagedScreenReaderStrategy._getRangeForPage(\n\t\t\t\tselectionStartPage,\n\t\t\t\tlinesPerPage,\n\t\t\t);\n\n\t\tconst selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(\n\t\t\tselection.endLineNumber,\n\t\t\tlinesPerPage,\n\t\t);\n\t\tconst selectionEndPageRange =\n\t\t\tPagedScreenReaderStrategy._getRangeForPage(\n\t\t\t\tselectionEndPage,\n\t\t\t\tlinesPerPage,\n\t\t\t);\n\n\t\tlet pretextRange = selectionStartPageRange.intersectRanges(\n\t\t\tnew Range(1, 1, selection.startLineNumber, selection.startColumn),\n\t\t)!;\n\t\tif (\n\t\t\ttrimLongText &&\n\t\t\tmodel.getValueLengthInRange(pretextRange, EndOfLinePreference.LF) >\n\t\t\t\tLIMIT_CHARS\n\t\t) {\n\t\t\tconst pretextStart = model.modifyPosition(\n\t\t\t\tpretextRange.getEndPosition(),\n\t\t\t\t-LIMIT_CHARS,\n\t\t\t);\n\t\t\tpretextRange = Range.fromPositions(\n\t\t\t\tpretextStart,\n\t\t\t\tpretextRange.getEndPosition(),\n\t\t\t);\n\t\t}\n\t\tconst pretext = model.getValueInRange(\n\t\t\tpretextRange,\n\t\t\tEndOfLinePreference.LF,\n\t\t);\n\n\t\tconst lastLine = model.getLineCount();\n\t\tconst lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\tlet posttextRange = selectionEndPageRange.intersectRanges(\n\t\t\tnew Range(\n\t\t\t\tselection.endLineNumber,\n\t\t\t\tselection.endColumn,\n\t\t\t\tlastLine,\n\t\t\t\tlastLineMaxColumn,\n\t\t\t),\n\t\t)!;\n\t\tif (\n\t\t\ttrimLongText &&\n\t\t\tmodel.getValueLengthInRange(posttextRange, EndOfLinePreference.LF) >\n\t\t\t\tLIMIT_CHARS\n\t\t) {\n\t\t\tconst posttextEnd = model.modifyPosition(\n\t\t\t\tposttextRange.getStartPosition(),\n\t\t\t\tLIMIT_CHARS,\n\t\t\t);\n\t\t\tposttextRange = Range.fromPositions(\n\t\t\t\tposttextRange.getStartPosition(),\n\t\t\t\tposttextEnd,\n\t\t\t);\n\t\t}\n\t\tconst posttext = model.getValueInRange(\n\t\t\tposttextRange,\n\t\t\tEndOfLinePreference.LF,\n\t\t);\n\n\t\tlet text: string;\n\t\tif (\n\t\t\tselectionStartPage === selectionEndPage ||\n\t\t\tselectionStartPage + 1 === selectionEndPage\n\t\t) {\n\t\t\t// take full selection\n\t\t\ttext = model.getValueInRange(selection, EndOfLinePreference.LF);\n\t\t} else {\n\t\t\tconst selectionRange1 =\n\t\t\t\tselectionStartPageRange.intersectRanges(selection)!;\n\t\t\tconst selectionRange2 =\n\t\t\t\tselectionEndPageRange.intersectRanges(selection)!;\n\t\t\ttext =\n\t\t\t\tmodel.getValueInRange(selectionRange1, EndOfLinePreference.LF) +\n\t\t\t\tString.fromCharCode(8230) +\n\t\t\t\tmodel.getValueInRange(selectionRange2, EndOfLinePreference.LF);\n\t\t}\n\t\tif (trimLongText && text.length > 2 * LIMIT_CHARS) {\n\t\t\ttext =\n\t\t\t\ttext.substring(0, LIMIT_CHARS) +\n\t\t\t\tString.fromCharCode(8230) +\n\t\t\t\ttext.substring(text.length - LIMIT_CHARS, text.length);\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: pretext + text + posttext,\n\t\t\tselection: selection,\n\t\t\tselectionStart: pretext.length,\n\t\t\tselectionEnd: pretext.length + text.length,\n\t\t\tnewlineCountBeforeSelection:\n\t\t\t\tpretextRange.endLineNumber - pretextRange.startLineNumber,\n\t\t};\n\t}\n}\n\nexport function ariaLabelForScreenReaderContent(\n\toptions: IComputedEditorOptions,\n\tkeybindingService: IKeybindingService,\n) {\n\tconst accessibilitySupport = options.get(EditorOption.accessibilitySupport);\n\tif (accessibilitySupport === AccessibilitySupport.Disabled) {\n\t\tconst toggleKeybindingLabel = keybindingService\n\t\t\t.lookupKeybinding(\n\t\t\t\t\"editor.action.toggleScreenReaderAccessibilityMode\",\n\t\t\t)\n\t\t\t?.getAriaLabel();\n\t\tconst runCommandKeybindingLabel = keybindingService\n\t\t\t.lookupKeybinding(\"workbench.action.showCommands\")\n\t\t\t?.getAriaLabel();\n\t\tconst keybindingEditorKeybindingLabel = keybindingService\n\t\t\t.lookupKeybinding(\"workbench.action.openGlobalKeybindings\")\n\t\t\t?.getAriaLabel();\n\t\tconst editorNotAccessibleMessage = nls.localize(\n\t\t\t\"accessibilityModeOff\",\n\t\t\t\"The editor is not accessible at this time.\",\n\t\t);\n\t\tif (toggleKeybindingLabel) {\n\t\t\treturn nls.localize(\n\t\t\t\t\"accessibilityOffAriaLabel\",\n\t\t\t\t\"{0} To enable screen reader optimized mode, use {1}\",\n\t\t\t\teditorNotAccessibleMessage,\n\t\t\t\ttoggleKeybindingLabel,\n\t\t\t);\n\t\t} else if (runCommandKeybindingLabel) {\n\t\t\treturn nls.localize(\n\t\t\t\t\"accessibilityOffAriaLabelNoKb\",\n\t\t\t\t\"{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.\",\n\t\t\t\teditorNotAccessibleMessage,\n\t\t\t\trunCommandKeybindingLabel,\n\t\t\t);\n\t\t} else if (keybindingEditorKeybindingLabel) {\n\t\t\treturn nls.localize(\n\t\t\t\t\"accessibilityOffAriaLabelNoKbs\",\n\t\t\t\t\"{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.\",\n\t\t\t\teditorNotAccessibleMessage,\n\t\t\t\tkeybindingEditorKeybindingLabel,\n\t\t\t);\n\t\t} else {\n\t\t\t// SOS\n\t\t\treturn editorNotAccessibleMessage;\n\t\t}\n\t}\n\treturn options.get(EditorOption.ariaLabel);\n}\n\nexport function newlinecount(text: string): number {\n\tlet result = 0;\n\tlet startIndex = -1;\n\tdo {\n\t\tstartIndex = text.indexOf(\"\\n\", startIndex + 1);\n\t\tif (startIndex === -1) {\n\t\t\tbreak;\n\t\t}\n\t\tresult++;\n\t} while (true);\n\treturn result;\n}\n"],
  "mappings": "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",
  "names": []
}
