{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/native/nativeEditContextUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener } from \"../../../../../base/browser/dom.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\n\nexport interface ITypeData {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n\nexport class FocusTracker extends Disposable {\n\tprivate _isFocused = false;\n\n\tconstructor(\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly _onFocusChange: (newFocusValue: boolean) => void,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\taddDisposableListener(this._domNode, \"focus\", () =>\n\t\t\t\tthis._handleFocusedChanged(true),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(this._domNode, \"blur\", () =>\n\t\t\t\tthis._handleFocusedChanged(false),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _handleFocusedChanged(focused: boolean): void {\n\t\tif (this._isFocused === focused) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isFocused = focused;\n\t\tthis._onFocusChange(this._isFocused);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._domNode.focus();\n\t}\n\n\tget isFocused(): boolean {\n\t\treturn this._isFocused;\n\t}\n}\n\nexport function editContextAddDisposableListener<\n\tK extends keyof EditContextEventHandlersEventMap,\n>(\n\ttarget: EventTarget,\n\ttype: K,\n\tlistener: (\n\t\tthis: GlobalEventHandlers,\n\t\tev: EditContextEventHandlersEventMap[K],\n\t) => any,\n\toptions?: boolean | AddEventListenerOptions,\n): IDisposable {\n\ttarget.addEventListener(type, listener as any, options);\n\treturn {\n\t\tdispose() {\n\t\t\ttarget.removeEventListener(type, listener as any);\n\t\t},\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,OAEM;AASA,MAAM,qBAAqB,WAAW;AAAA,EAG5C,YACkB,UACA,gBAChB;AACD,UAAM;AAHW;AACA;AAGjB,SAAK;AAAA,MACJ;AAAA,QAAsB,KAAK;AAAA,QAAU;AAAA,QAAS,MAC7C,KAAK,sBAAsB,IAAI;AAAA,MAChC;AAAA,IACD;AACA,SAAK;AAAA,MACJ;AAAA,QAAsB,KAAK;AAAA,QAAU;AAAA,QAAQ,MAC5C,KAAK,sBAAsB,KAAK;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EApCD,OAkB6C;AAAA;AAAA;AAAA,EACpC,aAAa;AAAA,EAmBb,sBAAsB,SAAwB;AACrD,QAAI,KAAK,eAAe,SAAS;AAChC;AAAA,IACD;AACA,SAAK,aAAa;AAClB,SAAK,eAAe,KAAK,UAAU;AAAA,EACpC;AAAA,EAEO,QAAc;AACpB,SAAK,SAAS,MAAM;AAAA,EACrB;AAAA,EAEA,IAAI,YAAqB;AACxB,WAAO,KAAK;AAAA,EACb;AACD;AAEO,SAAS,iCAGf,QACA,MACA,UAIA,SACc;AACd,SAAO,iBAAiB,MAAM,UAAiB,OAAO;AACtD,SAAO;AAAA,IACN,UAAU;AACT,aAAO,oBAAoB,MAAM,QAAe;AAAA,IACjD;AAAA,EACD;AACD;AAjBgB;",
  "names": []
}
