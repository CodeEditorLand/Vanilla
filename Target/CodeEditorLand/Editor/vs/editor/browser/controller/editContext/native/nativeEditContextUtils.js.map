{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/native/nativeEditContextUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener } from '../../../../../base/browser/dom.js';\nimport { IDisposable, Disposable } from '../../../../../base/common/lifecycle.js';\n\nexport interface ITypeData {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n\nexport class FocusTracker extends Disposable {\n\tprivate _isFocused: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly _onFocusChange: (newFocusValue: boolean) => void,\n\t) {\n\t\tsuper();\n\t\tthis._register(addDisposableListener(this._domNode, 'focus', () => this._handleFocusedChanged(true)));\n\t\tthis._register(addDisposableListener(this._domNode, 'blur', () => this._handleFocusedChanged(false)));\n\t}\n\n\tprivate _handleFocusedChanged(focused: boolean): void {\n\t\tif (this._isFocused === focused) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isFocused = focused;\n\t\tthis._onFocusChange(this._isFocused);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._domNode.focus();\n\t}\n\n\tget isFocused(): boolean {\n\t\treturn this._isFocused;\n\t}\n}\n\nexport function editContextAddDisposableListener<K extends keyof EditContextEventHandlersEventMap>(target: EventTarget, type: K, listener: (this: GlobalEventHandlers, ev: EditContextEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): IDisposable {\n\ttarget.addEventListener(type, listener as any, options);\n\treturn {\n\t\tdispose() {\n\t\t\ttarget.removeEventListener(type, listener as any);\n\t\t}\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,6BAA6B;AACtC,SAAS,aAAa,kBAAkB;AASjC,MAAM,qBAAqB,WAAW;AAAA,EAG5C,YACkB,UACA,gBAChB;AACD,UAAM;AAHW;AACA;AAGjB,SAAK,UAAU,sBAAsB,KAAK,UAAU,SAAS,MAAM,KAAK,sBAAsB,IAAI,CAAC,CAAC;AACpG,SAAK,UAAU,sBAAsB,KAAK,UAAU,QAAQ,MAAM,KAAK,sBAAsB,KAAK,CAAC,CAAC;AAAA,EACrG;AAAA,EAzBD,OAe6C;AAAA;AAAA;AAAA,EACpC,aAAsB;AAAA,EAWtB,sBAAsB,SAAwB;AACrD,QAAI,KAAK,eAAe,SAAS;AAChC;AAAA,IACD;AACA,SAAK,aAAa;AAClB,SAAK,eAAe,KAAK,UAAU;AAAA,EACpC;AAAA,EAEO,QAAc;AACpB,SAAK,SAAS,MAAM;AAAA,EACrB;AAAA,EAEA,IAAI,YAAqB;AACxB,WAAO,KAAK;AAAA,EACb;AACD;AAEO,SAAS,iCAAmF,QAAqB,MAAS,UAAuF,SAA0D;AACjR,SAAO,iBAAiB,MAAM,UAAiB,OAAO;AACtD,SAAO;AAAA,IACN,UAAU;AACT,aAAO,oBAAoB,MAAM,QAAe;AAAA,IACjD;AAAA,EACD;AACD;AAPgB;",
  "names": []
}
