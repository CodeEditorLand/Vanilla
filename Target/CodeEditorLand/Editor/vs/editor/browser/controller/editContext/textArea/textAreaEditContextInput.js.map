{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/textArea/textAreaEditContextInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from \"../../../../../base/browser/browser.js\";\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { DomEmitter } from \"../../../../../base/browser/event.js\";\nimport {\n\ttype IKeyboardEvent,\n\tStandardKeyboardEvent,\n} from \"../../../../../base/browser/keyboardEvent.js\";\nimport { inputLatency } from \"../../../../../base/browser/performance.js\";\nimport { RunOnceScheduler } from \"../../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../../base/common/event.js\";\nimport { KeyCode } from \"../../../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { Mimes } from \"../../../../../base/common/mime.js\";\nimport { OperatingSystem } from \"../../../../../base/common/platform.js\";\nimport * as strings from \"../../../../../base/common/strings.js\";\nimport { IAccessibilityService } from \"../../../../../platform/accessibility/common/accessibility.js\";\nimport { ILogService } from \"../../../../../platform/log/common/log.js\";\nimport type { Position } from \"../../../../common/core/position.js\";\nimport { Selection } from \"../../../../common/core/selection.js\";\nimport {\n\ttype ClipboardDataToCopy,\n\ttype ClipboardStoredMetadata,\n\tInMemoryClipboardMetadataManager,\n} from \"../clipboardUtils.js\";\nimport {\n\ttype ITextAreaWrapper,\n\ttype ITypeData,\n\tTextAreaState,\n\t_debugComposition,\n} from \"./textAreaEditContextState.js\";\n\nexport namespace TextAreaSyntethicEvents {\n\texport const Tap = \"-monaco-textarea-synthetic-tap\";\n}\n\nexport interface ICompositionData {\n\tdata: string;\n}\n\nexport interface IPasteData {\n\ttext: string;\n\tmetadata: ClipboardStoredMetadata | null;\n}\n\nexport interface ITextAreaInputHost {\n\tgetDataToCopy(): ClipboardDataToCopy;\n\tgetScreenReaderContent(): TextAreaState;\n\tdeduceModelPosition(\n\t\tviewAnchorPosition: Position,\n\t\tdeltaOffset: number,\n\t\tlineFeedCnt: number,\n\t): Position;\n}\n\nexport interface ICompositionStartEvent {\n\tdata: string;\n}\n\nexport interface ICompleteTextAreaWrapper extends ITextAreaWrapper {\n\treadonly onKeyDown: Event<KeyboardEvent>;\n\treadonly onKeyPress: Event<KeyboardEvent>;\n\treadonly onKeyUp: Event<KeyboardEvent>;\n\treadonly onCompositionStart: Event<CompositionEvent>;\n\treadonly onCompositionUpdate: Event<CompositionEvent>;\n\treadonly onCompositionEnd: Event<CompositionEvent>;\n\treadonly onBeforeInput: Event<InputEvent>;\n\treadonly onInput: Event<InputEvent>;\n\treadonly onCut: Event<ClipboardEvent>;\n\treadonly onCopy: Event<ClipboardEvent>;\n\treadonly onPaste: Event<ClipboardEvent>;\n\treadonly onFocus: Event<FocusEvent>;\n\treadonly onBlur: Event<FocusEvent>;\n\treadonly onSyntheticTap: Event<void>;\n\n\treadonly ownerDocument: Document;\n\n\tsetIgnoreSelectionChangeTime(reason: string): void;\n\tgetIgnoreSelectionChangeTime(): number;\n\tresetSelectionChangeTime(): void;\n\n\thasFocus(): boolean;\n}\n\nexport interface IBrowser {\n\tisAndroid: boolean;\n\tisFirefox: boolean;\n\tisChrome: boolean;\n\tisSafari: boolean;\n}\n\nclass CompositionContext {\n\tprivate _lastTypeTextLength: number;\n\n\tconstructor() {\n\t\tthis._lastTypeTextLength = 0;\n\t}\n\n\tpublic handleCompositionUpdate(text: string | null | undefined): ITypeData {\n\t\ttext = text || \"\";\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext: text,\n\t\t\treplacePrevCharCnt: this._lastTypeTextLength,\n\t\t\treplaceNextCharCnt: 0,\n\t\t\tpositionDelta: 0,\n\t\t};\n\t\tthis._lastTypeTextLength = text.length;\n\t\treturn typeInput;\n\t}\n}\n\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nexport class TextAreaInput extends Disposable {\n\tprivate _onFocus = this._register(new Emitter<void>());\n\tpublic readonly onFocus: Event<void> = this._onFocus.event;\n\n\tprivate _onBlur = this._register(new Emitter<void>());\n\tpublic readonly onBlur: Event<void> = this._onBlur.event;\n\n\tprivate _onKeyDown = this._register(new Emitter<IKeyboardEvent>());\n\tpublic readonly onKeyDown: Event<IKeyboardEvent> = this._onKeyDown.event;\n\n\tprivate _onKeyUp = this._register(new Emitter<IKeyboardEvent>());\n\tpublic readonly onKeyUp: Event<IKeyboardEvent> = this._onKeyUp.event;\n\n\tprivate _onCut = this._register(new Emitter<void>());\n\tpublic readonly onCut: Event<void> = this._onCut.event;\n\n\tprivate _onPaste = this._register(new Emitter<IPasteData>());\n\tpublic readonly onPaste: Event<IPasteData> = this._onPaste.event;\n\n\tprivate _onType = this._register(new Emitter<ITypeData>());\n\tpublic readonly onType: Event<ITypeData> = this._onType.event;\n\n\tprivate _onCompositionStart = this._register(\n\t\tnew Emitter<ICompositionStartEvent>(),\n\t);\n\tpublic readonly onCompositionStart: Event<ICompositionStartEvent> =\n\t\tthis._onCompositionStart.event;\n\n\tprivate _onCompositionUpdate = this._register(\n\t\tnew Emitter<ICompositionData>(),\n\t);\n\tpublic readonly onCompositionUpdate: Event<ICompositionData> =\n\t\tthis._onCompositionUpdate.event;\n\n\tprivate _onCompositionEnd = this._register(new Emitter<void>());\n\tpublic readonly onCompositionEnd: Event<void> =\n\t\tthis._onCompositionEnd.event;\n\n\tprivate _onSelectionChangeRequest = this._register(\n\t\tnew Emitter<Selection>(),\n\t);\n\tpublic readonly onSelectionChangeRequest: Event<Selection> =\n\t\tthis._onSelectionChangeRequest.event;\n\n\t// ---\n\n\tprivate readonly _asyncTriggerCut: RunOnceScheduler;\n\n\tprivate readonly _asyncFocusGainWriteScreenReaderContent: MutableDisposable<RunOnceScheduler> =\n\t\tthis._register(new MutableDisposable());\n\n\tprivate _textAreaState: TextAreaState;\n\n\tpublic get textAreaState(): TextAreaState {\n\t\treturn this._textAreaState;\n\t}\n\n\tprivate _selectionChangeListener: IDisposable | null;\n\n\tprivate _hasFocus: boolean;\n\tprivate _currentComposition: CompositionContext | null;\n\n\tconstructor(\n\t\tprivate readonly _host: ITextAreaInputHost,\n\t\tprivate readonly _textArea: ICompleteTextAreaWrapper,\n\t\tprivate readonly _OS: OperatingSystem,\n\t\tprivate readonly _browser: IBrowser,\n\t\t@IAccessibilityService\n\t\tprivate readonly _accessibilityService: IAccessibilityService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._asyncTriggerCut = this._register(\n\t\t\tnew RunOnceScheduler(() => this._onCut.fire(), 0),\n\t\t);\n\t\tthis._textAreaState = TextAreaState.EMPTY;\n\t\tthis._selectionChangeListener = null;\n\t\tif (this._accessibilityService.isScreenReaderOptimized()) {\n\t\t\tthis.writeNativeTextAreaContent(\"ctor\");\n\t\t}\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tthis._accessibilityService.onDidChangeScreenReaderOptimized,\n\t\t\t\t() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._accessibilityService.isScreenReaderOptimized() &&\n\t\t\t\t\t\t!this._asyncFocusGainWriteScreenReaderContent.value\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.value =\n\t\t\t\t\t\t\tthis._register(\n\t\t\t\t\t\t\t\tnew RunOnceScheduler(\n\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\tthis.writeNativeTextAreaContent(\n\t\t\t\t\t\t\t\t\t\t\t\"asyncFocusGain\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.clear();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._hasFocus = false;\n\t\tthis._currentComposition = null;\n\n\t\tlet lastKeyDown: IKeyboardEvent | null = null;\n\n\t\tthis._register(\n\t\t\tthis._textArea.onKeyDown((_e) => {\n\t\t\t\tconst e = new StandardKeyboardEvent(_e);\n\t\t\t\tif (\n\t\t\t\t\te.keyCode === KeyCode.KEY_IN_COMPOSITION ||\n\t\t\t\t\t(this._currentComposition &&\n\t\t\t\t\t\te.keyCode === KeyCode.Backspace)\n\t\t\t\t) {\n\t\t\t\t\t// Stop propagation for keyDown events if the IME is processing key input\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\t\t// Prevent default always for `Esc`, otherwise it will generate a keypress\n\t\t\t\t\t// See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tlastKeyDown = e;\n\t\t\t\tthis._onKeyDown.fire(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onKeyUp((_e) => {\n\t\t\t\tconst e = new StandardKeyboardEvent(_e);\n\t\t\t\tthis._onKeyUp.fire(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onCompositionStart((e) => {\n\t\t\t\tif (_debugComposition) {\n\t\t\t\t\tconsole.log(`[compositionstart]`, e);\n\t\t\t\t}\n\n\t\t\t\tconst currentComposition = new CompositionContext();\n\t\t\t\tif (this._currentComposition) {\n\t\t\t\t\t// simply reset the composition context\n\t\t\t\t\tthis._currentComposition = currentComposition;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._currentComposition = currentComposition;\n\n\t\t\t\tif (\n\t\t\t\t\tthis._OS === OperatingSystem.Macintosh &&\n\t\t\t\t\tlastKeyDown &&\n\t\t\t\t\tlastKeyDown.equals(KeyCode.KEY_IN_COMPOSITION) &&\n\t\t\t\t\tthis._textAreaState.selectionStart ===\n\t\t\t\t\t\tthis._textAreaState.selectionEnd &&\n\t\t\t\t\tthis._textAreaState.selectionStart > 0 &&\n\t\t\t\t\tthis._textAreaState.value.substr(\n\t\t\t\t\t\tthis._textAreaState.selectionStart - 1,\n\t\t\t\t\t\t1,\n\t\t\t\t\t) === e.data &&\n\t\t\t\t\t(lastKeyDown.code === \"ArrowRight\" ||\n\t\t\t\t\t\tlastKeyDown.code === \"ArrowLeft\")\n\t\t\t\t) {\n\t\t\t\t\t// Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n\t\t\t\t\tif (_debugComposition) {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t`[compositionstart] Handling long press case on macOS + arrow key`,\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n\t\t\t\t\tcurrentComposition.handleCompositionUpdate(\"x\");\n\t\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t\t// when tapping on the editor, Android enters composition mode to edit the current word\n\t\t\t\t\t// so we cannot clear the textarea on Android and we must pretend the current word was selected\n\t\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onCompositionUpdate((e) => {\n\t\t\t\tif (_debugComposition) {\n\t\t\t\t\tconsole.log(`[compositionupdate]`, e);\n\t\t\t\t}\n\t\t\t\tconst currentComposition = this._currentComposition;\n\t\t\t\tif (!currentComposition) {\n\t\t\t\t\t// should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t\t// On Android, the data sent with the composition update event is unusable.\n\t\t\t\t\t// For example, if the cursor is in the middle of a word like Mic|osoft\n\t\t\t\t\t// and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n\t\t\t\t\t// This is not really usable because it doesn't tell us where the edit began and where it ended.\n\t\t\t\t\tconst newState = TextAreaState.readFromTextArea(\n\t\t\t\t\t\tthis._textArea,\n\t\t\t\t\t\tthis._textAreaState,\n\t\t\t\t\t);\n\t\t\t\t\tconst typeInput =\n\t\t\t\t\t\tTextAreaState.deduceAndroidCompositionInput(\n\t\t\t\t\t\t\tthis._textAreaState,\n\t\t\t\t\t\t\tnewState,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._textAreaState = newState;\n\t\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\t\tthis._onCompositionUpdate.fire(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst typeInput = currentComposition.handleCompositionUpdate(\n\t\t\t\t\te.data,\n\t\t\t\t);\n\t\t\t\tthis._textAreaState = TextAreaState.readFromTextArea(\n\t\t\t\t\tthis._textArea,\n\t\t\t\t\tthis._textAreaState,\n\t\t\t\t);\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\tthis._onCompositionUpdate.fire(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onCompositionEnd((e) => {\n\t\t\t\tif (_debugComposition) {\n\t\t\t\t\tconsole.log(`[compositionend]`, e);\n\t\t\t\t}\n\t\t\t\tconst currentComposition = this._currentComposition;\n\t\t\t\tif (!currentComposition) {\n\t\t\t\t\t// https://github.com/microsoft/monaco-editor/issues/1663\n\t\t\t\t\t// On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t\t// On Android, the data sent with the composition update event is unusable.\n\t\t\t\t\t// For example, if the cursor is in the middle of a word like Mic|osoft\n\t\t\t\t\t// and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n\t\t\t\t\t// This is not really usable because it doesn't tell us where the edit began and where it ended.\n\t\t\t\t\tconst newState = TextAreaState.readFromTextArea(\n\t\t\t\t\t\tthis._textArea,\n\t\t\t\t\t\tthis._textAreaState,\n\t\t\t\t\t);\n\t\t\t\t\tconst typeInput =\n\t\t\t\t\t\tTextAreaState.deduceAndroidCompositionInput(\n\t\t\t\t\t\t\tthis._textAreaState,\n\t\t\t\t\t\t\tnewState,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._textAreaState = newState;\n\t\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst typeInput = currentComposition.handleCompositionUpdate(\n\t\t\t\t\te.data,\n\t\t\t\t);\n\t\t\t\tthis._textAreaState = TextAreaState.readFromTextArea(\n\t\t\t\t\tthis._textArea,\n\t\t\t\t\tthis._textAreaState,\n\t\t\t\t);\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onInput((e) => {\n\t\t\t\tif (_debugComposition) {\n\t\t\t\t\tconsole.log(`[input]`, e);\n\t\t\t\t}\n\n\t\t\t\t// Pretend here we touched the text area, as the `input` event will most likely\n\t\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\t\tthis._textArea.setIgnoreSelectionChangeTime(\n\t\t\t\t\t\"received input event\",\n\t\t\t\t);\n\n\t\t\t\tif (this._currentComposition) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst newState = TextAreaState.readFromTextArea(\n\t\t\t\t\tthis._textArea,\n\t\t\t\t\tthis._textAreaState,\n\t\t\t\t);\n\t\t\t\tconst typeInput = TextAreaState.deduceInput(\n\t\t\t\t\tthis._textAreaState,\n\t\t\t\t\tnewState,\n\t\t\t\t\t/*couldBeEmojiInput*/ this._OS ===\n\t\t\t\t\t\tOperatingSystem.Macintosh,\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\ttypeInput.replacePrevCharCnt === 0 &&\n\t\t\t\t\ttypeInput.text.length === 1\n\t\t\t\t) {\n\t\t\t\t\t// one character was typed\n\t\t\t\t\tif (\n\t\t\t\t\t\tstrings.isHighSurrogate(typeInput.text.charCodeAt(0)) ||\n\t\t\t\t\t\ttypeInput.text.charCodeAt(0) === 0x7f /* Delete */\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Ignore invalid input but keep it around for next time\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._textAreaState = newState;\n\t\t\t\tif (\n\t\t\t\t\ttypeInput.text !== \"\" ||\n\t\t\t\t\ttypeInput.replacePrevCharCnt !== 0 ||\n\t\t\t\t\ttypeInput.replaceNextCharCnt !== 0 ||\n\t\t\t\t\ttypeInput.positionDelta !== 0\n\t\t\t\t) {\n\t\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// --- Clipboard operations\n\n\t\tthis._register(\n\t\t\tthis._textArea.onCut((e) => {\n\t\t\t\t// Pretend here we touched the text area, as the `cut` event will most likely\n\t\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\t\tthis._textArea.setIgnoreSelectionChangeTime(\n\t\t\t\t\t\"received cut event\",\n\t\t\t\t);\n\n\t\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t\t\tthis._asyncTriggerCut.schedule();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onCopy((e) => {\n\t\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onPaste((e) => {\n\t\t\t\t// Pretend here we touched the text area, as the `paste` event will most likely\n\t\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\t\tthis._textArea.setIgnoreSelectionChangeTime(\n\t\t\t\t\t\"received paste event\",\n\t\t\t\t);\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\tif (!e.clipboardData) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet [text, metadata] = ClipboardEventUtils.getTextData(\n\t\t\t\t\te.clipboardData,\n\t\t\t\t);\n\t\t\t\tif (!text) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// try the in-memory store\n\t\t\t\tmetadata =\n\t\t\t\t\tmetadata ||\n\t\t\t\t\tInMemoryClipboardMetadataManager.INSTANCE.get(text);\n\n\t\t\t\tthis._onPaste.fire({\n\t\t\t\t\ttext: text,\n\t\t\t\t\tmetadata: metadata,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._textArea.onFocus(() => {\n\t\t\t\tconst hadFocus = this._hasFocus;\n\n\t\t\t\tthis._setHasFocus(true);\n\n\t\t\t\tif (\n\t\t\t\t\tthis._accessibilityService.isScreenReaderOptimized() &&\n\t\t\t\t\tthis._browser.isSafari &&\n\t\t\t\t\t!hadFocus &&\n\t\t\t\t\tthis._hasFocus\n\t\t\t\t) {\n\t\t\t\t\t// When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n\t\t\t\t\t// Safari will always move the selection at offset 0 in the textarea\n\t\t\t\t\tif (!this._asyncFocusGainWriteScreenReaderContent.value) {\n\t\t\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.value =\n\t\t\t\t\t\t\tnew RunOnceScheduler(\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\tthis.writeNativeTextAreaContent(\n\t\t\t\t\t\t\t\t\t\t\"asyncFocusGain\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.value.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._textArea.onBlur(() => {\n\t\t\t\tif (this._currentComposition) {\n\t\t\t\t\t// See https://github.com/microsoft/vscode/issues/112621\n\t\t\t\t\t// where compositionend is not triggered when the editor\n\t\t\t\t\t// is taken off-dom during a composition\n\n\t\t\t\t\t// Clear the flag to be able to write to the textarea\n\t\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\t\t// Clear the textarea to avoid an unwanted cursor type\n\t\t\t\t\tthis.writeNativeTextAreaContent(\n\t\t\t\t\t\t\"blurWithoutCompositionEnd\",\n\t\t\t\t\t);\n\n\t\t\t\t\t// Fire artificial composition end\n\t\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t\t}\n\t\t\t\tthis._setHasFocus(false);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._textArea.onSyntheticTap(() => {\n\t\t\t\tif (this._browser.isAndroid && this._currentComposition) {\n\t\t\t\t\t// on Android, tapping does not cancel the current composition, so the\n\t\t\t\t\t// textarea is stuck showing the old composition\n\n\t\t\t\t\t// Clear the flag to be able to write to the textarea\n\t\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\t\t// Clear the textarea to avoid an unwanted cursor type\n\t\t\t\t\tthis.writeNativeTextAreaContent(\"tapWithoutCompositionEnd\");\n\n\t\t\t\t\t// Fire artificial composition end\n\t\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t_initializeFromTest(): void {\n\t\tthis._hasFocus = true;\n\t\tthis._textAreaState = TextAreaState.readFromTextArea(\n\t\t\tthis._textArea,\n\t\t\tnull,\n\t\t);\n\t}\n\n\tprivate _installSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event.\n\t\t//\n\t\t// The `selectionchange` event appears to be emitted under numerous other circumstances,\n\t\t// so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n\t\t// using a Braille display from all the other cases.\n\t\t//\n\t\t// The problems with the `selectionchange` event are:\n\t\t//  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n\t\t//  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n\t\t//  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n\t\t//  * the event is emitted when tabbing into the textarea\n\t\t//  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n\t\t//  * the event sometimes comes in bursts for a single logical textarea operation\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn dom.addDisposableListener(\n\t\t\tthis._textArea.ownerDocument,\n\t\t\t\"selectionchange\",\n\t\t\t(e) => {\n\t\t\t\t//todo\n\t\t\t\tinputLatency.onSelectionChange();\n\n\t\t\t\tif (!this._hasFocus) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this._currentComposition) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this._browser.isChrome) {\n\t\t\t\t\t// Support only for Chrome until testing happens on other browsers\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst now = Date.now();\n\n\t\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\t\tif (delta1 < 5) {\n\t\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t\t// => ignore it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst delta2 =\n\t\t\t\t\tnow - this._textArea.getIgnoreSelectionChangeTime();\n\t\t\t\tthis._textArea.resetSelectionChangeTime();\n\t\t\t\tif (delta2 < 100) {\n\t\t\t\t\t// received a `selectionchange` event within 100ms since we touched the textarea\n\t\t\t\t\t// => ignore it, since we caused it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this._textAreaState.selection) {\n\t\t\t\t\t// Cannot correlate a position in the textarea with a position in the editor...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst newValue = this._textArea.getValue();\n\t\t\t\tif (this._textAreaState.value !== newValue) {\n\t\t\t\t\t// Cannot correlate a position in the textarea with a position in the editor...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst newSelectionStart = this._textArea.getSelectionStart();\n\t\t\t\tconst newSelectionEnd = this._textArea.getSelectionEnd();\n\t\t\t\tif (\n\t\t\t\t\tthis._textAreaState.selectionStart === newSelectionStart &&\n\t\t\t\t\tthis._textAreaState.selectionEnd === newSelectionEnd\n\t\t\t\t) {\n\t\t\t\t\t// Nothing to do...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst _newSelectionStartPosition =\n\t\t\t\t\tthis._textAreaState.deduceEditorPosition(newSelectionStart);\n\t\t\t\tconst newSelectionStartPosition =\n\t\t\t\t\tthis._host.deduceModelPosition(\n\t\t\t\t\t\t_newSelectionStartPosition[0]!,\n\t\t\t\t\t\t_newSelectionStartPosition[1],\n\t\t\t\t\t\t_newSelectionStartPosition[2],\n\t\t\t\t\t);\n\n\t\t\t\tconst _newSelectionEndPosition =\n\t\t\t\t\tthis._textAreaState.deduceEditorPosition(newSelectionEnd);\n\t\t\t\tconst newSelectionEndPosition = this._host.deduceModelPosition(\n\t\t\t\t\t_newSelectionEndPosition[0]!,\n\t\t\t\t\t_newSelectionEndPosition[1],\n\t\t\t\t\t_newSelectionEndPosition[2],\n\t\t\t\t);\n\n\t\t\t\tconst newSelection = new Selection(\n\t\t\t\t\tnewSelectionStartPosition.lineNumber,\n\t\t\t\t\tnewSelectionStartPosition.column,\n\t\t\t\t\tnewSelectionEndPosition.lineNumber,\n\t\t\t\t\tnewSelectionEndPosition.column,\n\t\t\t\t);\n\n\t\t\t\tthis._onSelectionChangeRequest.fire(newSelection);\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tif (this._selectionChangeListener) {\n\t\t\tthis._selectionChangeListener.dispose();\n\t\t\tthis._selectionChangeListener = null;\n\t\t}\n\t}\n\n\tpublic focusTextArea(): void {\n\t\t// Setting this._hasFocus and writing the screen reader content\n\t\t// will result in a focus() and setSelectionRange() in the textarea\n\t\tthis._setHasFocus(true);\n\n\t\t// If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n\t\tthis.refreshFocusState();\n\t}\n\n\tpublic isFocused(): boolean {\n\t\treturn this._hasFocus;\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tthis._setHasFocus(this._textArea.hasFocus());\n\t}\n\n\tprivate _setHasFocus(newHasFocus: boolean): void {\n\t\tif (this._hasFocus === newHasFocus) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._hasFocus = newHasFocus;\n\n\t\tif (this._selectionChangeListener) {\n\t\t\tthis._selectionChangeListener.dispose();\n\t\t\tthis._selectionChangeListener = null;\n\t\t}\n\t\tif (this._hasFocus) {\n\t\t\tthis._selectionChangeListener =\n\t\t\t\tthis._installSelectionChangeListener();\n\t\t}\n\n\t\tif (this._hasFocus) {\n\t\t\tthis.writeNativeTextAreaContent(\"focusgain\");\n\t\t}\n\n\t\tif (this._hasFocus) {\n\t\t\tthis._onFocus.fire();\n\t\t} else {\n\t\t\tthis._onBlur.fire();\n\t\t}\n\t}\n\n\tprivate _setAndWriteTextAreaState(\n\t\treason: string,\n\t\ttextAreaState: TextAreaState,\n\t): void {\n\t\tif (!this._hasFocus) {\n\t\t\ttextAreaState = textAreaState.collapseSelection();\n\t\t}\n\n\t\ttextAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n\t\tthis._textAreaState = textAreaState;\n\t}\n\n\tpublic writeNativeTextAreaContent(reason: string): void {\n\t\tif (\n\t\t\t(!this._accessibilityService.isScreenReaderOptimized() &&\n\t\t\t\treason === \"render\") ||\n\t\t\tthis._currentComposition\n\t\t) {\n\t\t\t// Do not write to the text on render unless a screen reader is being used #192278\n\t\t\t// Do not write to the text area when doing composition\n\t\t\treturn;\n\t\t}\n\t\tthis._logService.trace(`writeTextAreaState(reason: ${reason})`);\n\t\tthis._setAndWriteTextAreaState(\n\t\t\treason,\n\t\t\tthis._host.getScreenReaderContent(),\n\t\t);\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(e: ClipboardEvent): void {\n\t\tconst dataToCopy = this._host.getDataToCopy();\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode,\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\tthis._browser.isFirefox\n\t\t\t\t? dataToCopy.text.replace(/\\r\\n/g, \"\\n\")\n\t\t\t\t: dataToCopy.text,\n\t\t\tstoredMetadata,\n\t\t);\n\n\t\te.preventDefault();\n\t\tif (e.clipboardData) {\n\t\t\tClipboardEventUtils.setTextData(\n\t\t\t\te.clipboardData,\n\t\t\t\tdataToCopy.text,\n\t\t\t\tdataToCopy.html,\n\t\t\t\tstoredMetadata,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport const ClipboardEventUtils = {\n\tgetTextData(\n\t\tclipboardData: DataTransfer,\n\t): [string, ClipboardStoredMetadata | null] {\n\t\tconst text = clipboardData.getData(Mimes.text);\n\t\tlet metadata: ClipboardStoredMetadata | null = null;\n\t\tconst rawmetadata = clipboardData.getData(\"vscode-editor-data\");\n\t\tif (typeof rawmetadata === \"string\") {\n\t\t\ttry {\n\t\t\t\tmetadata = <ClipboardStoredMetadata>JSON.parse(rawmetadata);\n\t\t\t\tif (metadata.version !== 1) {\n\t\t\t\t\tmetadata = null;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// no problem!\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttext.length === 0 &&\n\t\t\tmetadata === null &&\n\t\t\tclipboardData.files.length > 0\n\t\t) {\n\t\t\t// no textual data pasted, generate text from file names\n\t\t\tconst files: File[] = Array.prototype.slice.call(\n\t\t\t\tclipboardData.files,\n\t\t\t\t0,\n\t\t\t);\n\t\t\treturn [files.map((file) => file.name).join(\"\\n\"), null];\n\t\t}\n\n\t\treturn [text, metadata];\n\t},\n\n\tsetTextData(\n\t\tclipboardData: DataTransfer,\n\t\ttext: string,\n\t\thtml: string | null | undefined,\n\t\tmetadata: ClipboardStoredMetadata,\n\t): void {\n\t\tclipboardData.setData(Mimes.text, text);\n\t\tif (typeof html === \"string\") {\n\t\t\tclipboardData.setData(\"text/html\", html);\n\t\t}\n\t\tclipboardData.setData(\"vscode-editor-data\", JSON.stringify(metadata));\n\t},\n};\n\nexport class TextAreaWrapper\n\textends Disposable\n\timplements ICompleteTextAreaWrapper\n{\n\tpublic readonly onKeyDown = this._register(\n\t\tnew DomEmitter(this._actual, \"keydown\"),\n\t).event;\n\tpublic readonly onKeyPress = this._register(\n\t\tnew DomEmitter(this._actual, \"keypress\"),\n\t).event;\n\tpublic readonly onKeyUp = this._register(\n\t\tnew DomEmitter(this._actual, \"keyup\"),\n\t).event;\n\tpublic readonly onCompositionStart = this._register(\n\t\tnew DomEmitter(this._actual, \"compositionstart\"),\n\t).event;\n\tpublic readonly onCompositionUpdate = this._register(\n\t\tnew DomEmitter(this._actual, \"compositionupdate\"),\n\t).event;\n\tpublic readonly onCompositionEnd = this._register(\n\t\tnew DomEmitter(this._actual, \"compositionend\"),\n\t).event;\n\tpublic readonly onBeforeInput = this._register(\n\t\tnew DomEmitter(this._actual, \"beforeinput\"),\n\t).event;\n\tpublic readonly onInput = <Event<InputEvent>>(\n\t\tthis._register(new DomEmitter(this._actual, \"input\")).event\n\t);\n\tpublic readonly onCut = this._register(\n\t\tnew DomEmitter(this._actual, \"cut\"),\n\t).event;\n\tpublic readonly onCopy = this._register(\n\t\tnew DomEmitter(this._actual, \"copy\"),\n\t).event;\n\tpublic readonly onPaste = this._register(\n\t\tnew DomEmitter(this._actual, \"paste\"),\n\t).event;\n\tpublic readonly onFocus = this._register(\n\t\tnew DomEmitter(this._actual, \"focus\"),\n\t).event;\n\tpublic readonly onBlur = this._register(\n\t\tnew DomEmitter(this._actual, \"blur\"),\n\t).event;\n\n\tpublic get ownerDocument(): Document {\n\t\treturn this._actual.ownerDocument;\n\t}\n\n\tprivate _onSyntheticTap = this._register(new Emitter<void>());\n\tpublic readonly onSyntheticTap: Event<void> = this._onSyntheticTap.event;\n\n\tprivate _ignoreSelectionChangeTime: number;\n\n\tconstructor(private readonly _actual: HTMLTextAreaElement) {\n\t\tsuper();\n\t\tthis._ignoreSelectionChangeTime = 0;\n\n\t\tthis._register(this.onKeyDown(() => inputLatency.onKeyDown()));\n\t\tthis._register(this.onBeforeInput(() => inputLatency.onBeforeInput()));\n\t\tthis._register(this.onInput(() => inputLatency.onInput()));\n\t\tthis._register(this.onKeyUp(() => inputLatency.onKeyUp()));\n\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(\n\t\t\t\tthis._actual,\n\t\t\t\tTextAreaSyntethicEvents.Tap,\n\t\t\t\t() => this._onSyntheticTap.fire(),\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic hasFocus(): boolean {\n\t\tconst shadowRoot = dom.getShadowRoot(this._actual);\n\t\tif (shadowRoot) {\n\t\t\treturn shadowRoot.activeElement === this._actual;\n\t\t} else if (this._actual.isConnected) {\n\t\t\treturn dom.getActiveElement() === this._actual;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tpublic getIgnoreSelectionChangeTime(): number {\n\t\treturn this._ignoreSelectionChangeTime;\n\t}\n\n\tpublic resetSelectionChangeTime(): void {\n\t\tthis._ignoreSelectionChangeTime = 0;\n\t}\n\n\tpublic getValue(): string {\n\t\t// console.log('current value: ' + this._textArea.value);\n\t\treturn this._actual.value;\n\t}\n\n\tpublic setValue(reason: string, value: string): void {\n\t\tconst textArea = this._actual;\n\t\tif (textArea.value === value) {\n\t\t\t// No change\n\t\t\treturn;\n\t\t}\n\t\t// console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n\t\tthis.setIgnoreSelectionChangeTime(\"setValue\");\n\t\ttextArea.value = value;\n\t}\n\n\tpublic getSelectionStart(): number {\n\t\treturn this._actual.selectionDirection === \"backward\"\n\t\t\t? this._actual.selectionEnd\n\t\t\t: this._actual.selectionStart;\n\t}\n\n\tpublic getSelectionEnd(): number {\n\t\treturn this._actual.selectionDirection === \"backward\"\n\t\t\t? this._actual.selectionStart\n\t\t\t: this._actual.selectionEnd;\n\t}\n\n\tpublic setSelectionRange(\n\t\treason: string,\n\t\tselectionStart: number,\n\t\tselectionEnd: number,\n\t): void {\n\t\tconst textArea = this._actual;\n\n\t\tlet activeElement: Element | null = null;\n\t\tconst shadowRoot = dom.getShadowRoot(textArea);\n\t\tif (shadowRoot) {\n\t\t\tactiveElement = shadowRoot.activeElement;\n\t\t} else {\n\t\t\tactiveElement = dom.getActiveElement();\n\t\t}\n\t\tconst activeWindow = dom.getWindow(activeElement);\n\n\t\tconst currentIsFocused = activeElement === textArea;\n\t\tconst currentSelectionStart = textArea.selectionStart;\n\t\tconst currentSelectionEnd = textArea.selectionEnd;\n\n\t\tif (\n\t\t\tcurrentIsFocused &&\n\t\t\tcurrentSelectionStart === selectionStart &&\n\t\t\tcurrentSelectionEnd === selectionEnd\n\t\t) {\n\t\t\t// No change\n\t\t\t// Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n\t\t\tif (browser.isFirefox && activeWindow.parent !== activeWindow) {\n\t\t\t\ttextArea.focus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n\n\t\tif (currentIsFocused) {\n\t\t\t// No need to focus, only need to change the selection range\n\t\t\tthis.setIgnoreSelectionChangeTime(\"setSelectionRange\");\n\t\t\ttextArea.setSelectionRange(selectionStart, selectionEnd);\n\t\t\tif (browser.isFirefox && activeWindow.parent !== activeWindow) {\n\t\t\t\ttextArea.focus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n\t\t// Here, we try to undo the browser's desperate reveal.\n\t\ttry {\n\t\t\tconst scrollState = dom.saveParentsScrollTop(textArea);\n\t\t\tthis.setIgnoreSelectionChangeTime(\"setSelectionRange\");\n\t\t\ttextArea.focus();\n\t\t\ttextArea.setSelectionRange(selectionStart, selectionEnd);\n\t\t\tdom.restoreParentsScrollTop(textArea, scrollState);\n\t\t} catch (e) {\n\t\t\t// Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TextAreaSyntethicEvents", "typeInput"]
}
