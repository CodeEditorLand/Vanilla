{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/editContext/textArea/textAreaEditContextInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from '../../../../../base/browser/browser.js';\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { DomEmitter } from '../../../../../base/browser/event.js';\nimport { IKeyboardEvent, StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';\nimport { inputLatency } from '../../../../../base/browser/performance.js';\nimport { RunOnceScheduler } from '../../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../../base/common/mime.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport * as strings from '../../../../../base/common/strings.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { ClipboardDataToCopy, ClipboardStoredMetadata, InMemoryClipboardMetadataManager } from '../clipboardUtils.js';\nimport { _debugComposition, ITextAreaWrapper, ITypeData, TextAreaState } from './textAreaEditContextState.js';\n\nexport namespace TextAreaSyntethicEvents {\n\texport const Tap = '-monaco-textarea-synthetic-tap';\n}\n\nexport interface ICompositionData {\n\tdata: string;\n}\n\n\nexport interface IPasteData {\n\ttext: string;\n\tmetadata: ClipboardStoredMetadata | null;\n}\n\nexport interface ITextAreaInputHost {\n\tgetDataToCopy(): ClipboardDataToCopy;\n\tgetScreenReaderContent(): TextAreaState;\n\tdeduceModelPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;\n}\n\nexport interface ICompositionStartEvent {\n\tdata: string;\n}\n\nexport interface ICompleteTextAreaWrapper extends ITextAreaWrapper {\n\treadonly onKeyDown: Event<KeyboardEvent>;\n\treadonly onKeyPress: Event<KeyboardEvent>;\n\treadonly onKeyUp: Event<KeyboardEvent>;\n\treadonly onCompositionStart: Event<CompositionEvent>;\n\treadonly onCompositionUpdate: Event<CompositionEvent>;\n\treadonly onCompositionEnd: Event<CompositionEvent>;\n\treadonly onBeforeInput: Event<InputEvent>;\n\treadonly onInput: Event<InputEvent>;\n\treadonly onCut: Event<ClipboardEvent>;\n\treadonly onCopy: Event<ClipboardEvent>;\n\treadonly onPaste: Event<ClipboardEvent>;\n\treadonly onFocus: Event<FocusEvent>;\n\treadonly onBlur: Event<FocusEvent>;\n\treadonly onSyntheticTap: Event<void>;\n\n\treadonly ownerDocument: Document;\n\n\tsetIgnoreSelectionChangeTime(reason: string): void;\n\tgetIgnoreSelectionChangeTime(): number;\n\tresetSelectionChangeTime(): void;\n\n\thasFocus(): boolean;\n}\n\nexport interface IBrowser {\n\tisAndroid: boolean;\n\tisFirefox: boolean;\n\tisChrome: boolean;\n\tisSafari: boolean;\n}\n\nclass CompositionContext {\n\n\tprivate _lastTypeTextLength: number;\n\n\tconstructor() {\n\t\tthis._lastTypeTextLength = 0;\n\t}\n\n\tpublic handleCompositionUpdate(text: string | null | undefined): ITypeData {\n\t\ttext = text || '';\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext: text,\n\t\t\treplacePrevCharCnt: this._lastTypeTextLength,\n\t\t\treplaceNextCharCnt: 0,\n\t\t\tpositionDelta: 0\n\t\t};\n\t\tthis._lastTypeTextLength = text.length;\n\t\treturn typeInput;\n\t}\n}\n\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nexport class TextAreaInput extends Disposable {\n\n\tprivate _onFocus = this._register(new Emitter<void>());\n\tpublic readonly onFocus: Event<void> = this._onFocus.event;\n\n\tprivate _onBlur = this._register(new Emitter<void>());\n\tpublic readonly onBlur: Event<void> = this._onBlur.event;\n\n\tprivate _onKeyDown = this._register(new Emitter<IKeyboardEvent>());\n\tpublic readonly onKeyDown: Event<IKeyboardEvent> = this._onKeyDown.event;\n\n\tprivate _onKeyUp = this._register(new Emitter<IKeyboardEvent>());\n\tpublic readonly onKeyUp: Event<IKeyboardEvent> = this._onKeyUp.event;\n\n\tprivate _onCut = this._register(new Emitter<void>());\n\tpublic readonly onCut: Event<void> = this._onCut.event;\n\n\tprivate _onPaste = this._register(new Emitter<IPasteData>());\n\tpublic readonly onPaste: Event<IPasteData> = this._onPaste.event;\n\n\tprivate _onType = this._register(new Emitter<ITypeData>());\n\tpublic readonly onType: Event<ITypeData> = this._onType.event;\n\n\tprivate _onCompositionStart = this._register(new Emitter<ICompositionStartEvent>());\n\tpublic readonly onCompositionStart: Event<ICompositionStartEvent> = this._onCompositionStart.event;\n\n\tprivate _onCompositionUpdate = this._register(new Emitter<ICompositionData>());\n\tpublic readonly onCompositionUpdate: Event<ICompositionData> = this._onCompositionUpdate.event;\n\n\tprivate _onCompositionEnd = this._register(new Emitter<void>());\n\tpublic readonly onCompositionEnd: Event<void> = this._onCompositionEnd.event;\n\n\tprivate _onSelectionChangeRequest = this._register(new Emitter<Selection>());\n\tpublic readonly onSelectionChangeRequest: Event<Selection> = this._onSelectionChangeRequest.event;\n\n\t// ---\n\n\tprivate readonly _asyncTriggerCut: RunOnceScheduler;\n\n\tprivate readonly _asyncFocusGainWriteScreenReaderContent: MutableDisposable<RunOnceScheduler> = this._register(new MutableDisposable());\n\n\tprivate _textAreaState: TextAreaState;\n\n\tpublic get textAreaState(): TextAreaState {\n\t\treturn this._textAreaState;\n\t}\n\n\tprivate _selectionChangeListener: IDisposable | null;\n\n\tprivate _hasFocus: boolean;\n\tprivate _currentComposition: CompositionContext | null;\n\n\tconstructor(\n\t\tprivate readonly _host: ITextAreaInputHost,\n\t\tprivate readonly _textArea: ICompleteTextAreaWrapper,\n\t\tprivate readonly _OS: OperatingSystem,\n\t\tprivate readonly _browser: IBrowser,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._asyncTriggerCut = this._register(new RunOnceScheduler(() => this._onCut.fire(), 0));\n\t\tthis._textAreaState = TextAreaState.EMPTY;\n\t\tthis._selectionChangeListener = null;\n\t\tif (this._accessibilityService.isScreenReaderOptimized()) {\n\t\t\tthis.writeNativeTextAreaContent('ctor');\n\t\t}\n\t\tthis._register(Event.runAndSubscribe(this._accessibilityService.onDidChangeScreenReaderOptimized, () => {\n\t\t\tif (this._accessibilityService.isScreenReaderOptimized() && !this._asyncFocusGainWriteScreenReaderContent.value) {\n\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.value = this._register(new RunOnceScheduler(() => this.writeNativeTextAreaContent('asyncFocusGain'), 0));\n\t\t\t} else {\n\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.clear();\n\t\t\t}\n\t\t}));\n\t\tthis._hasFocus = false;\n\t\tthis._currentComposition = null;\n\n\t\tlet lastKeyDown: IKeyboardEvent | null = null;\n\n\t\tthis._register(this._textArea.onKeyDown((_e) => {\n\t\t\tconst e = new StandardKeyboardEvent(_e);\n\t\t\tif (e.keyCode === KeyCode.KEY_IN_COMPOSITION\n\t\t\t\t|| (this._currentComposition && e.keyCode === KeyCode.Backspace)) {\n\t\t\t\t// Stop propagation for keyDown events if the IME is processing key input\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\t// Prevent default always for `Esc`, otherwise it will generate a keypress\n\t\t\t\t// See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tlastKeyDown = e;\n\t\t\tthis._onKeyDown.fire(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onKeyUp((_e) => {\n\t\t\tconst e = new StandardKeyboardEvent(_e);\n\t\t\tthis._onKeyUp.fire(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onCompositionStart((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[compositionstart]`, e);\n\t\t\t}\n\n\t\t\tconst currentComposition = new CompositionContext();\n\t\t\tif (this._currentComposition) {\n\t\t\t\t// simply reset the composition context\n\t\t\t\tthis._currentComposition = currentComposition;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._currentComposition = currentComposition;\n\n\t\t\tif (\n\t\t\t\tthis._OS === OperatingSystem.Macintosh\n\t\t\t\t&& lastKeyDown\n\t\t\t\t&& lastKeyDown.equals(KeyCode.KEY_IN_COMPOSITION)\n\t\t\t\t&& this._textAreaState.selectionStart === this._textAreaState.selectionEnd\n\t\t\t\t&& this._textAreaState.selectionStart > 0\n\t\t\t\t&& this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e.data\n\t\t\t\t&& (lastKeyDown.code === 'ArrowRight' || lastKeyDown.code === 'ArrowLeft')\n\t\t\t) {\n\t\t\t\t// Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n\t\t\t\tif (_debugComposition) {\n\t\t\t\t\tconsole.log(`[compositionstart] Handling long press case on macOS + arrow key`, e);\n\t\t\t\t}\n\t\t\t\t// Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n\t\t\t\tcurrentComposition.handleCompositionUpdate('x');\n\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t// when tapping on the editor, Android enters composition mode to edit the current word\n\t\t\t\t// so we cannot clear the textarea on Android and we must pretend the current word was selected\n\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t}));\n\n\t\tthis._register(this._textArea.onCompositionUpdate((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[compositionupdate]`, e);\n\t\t\t}\n\t\t\tconst currentComposition = this._currentComposition;\n\t\t\tif (!currentComposition) {\n\t\t\t\t// should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t// On Android, the data sent with the composition update event is unusable.\n\t\t\t\t// For example, if the cursor is in the middle of a word like Mic|osoft\n\t\t\t\t// and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n\t\t\t\t// This is not really usable because it doesn't tell us where the edit began and where it ended.\n\t\t\t\tconst newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\t\tconst typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n\t\t\t\tthis._textAreaState = newState;\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\tthis._onCompositionUpdate.fire(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst typeInput = currentComposition.handleCompositionUpdate(e.data);\n\t\t\tthis._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\tthis._onType.fire(typeInput);\n\t\t\tthis._onCompositionUpdate.fire(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onCompositionEnd((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[compositionend]`, e);\n\t\t\t}\n\t\t\tconst currentComposition = this._currentComposition;\n\t\t\tif (!currentComposition) {\n\t\t\t\t// https://github.com/microsoft/monaco-editor/issues/1663\n\t\t\t\t// On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._currentComposition = null;\n\n\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t// On Android, the data sent with the composition update event is unusable.\n\t\t\t\t// For example, if the cursor is in the middle of a word like Mic|osoft\n\t\t\t\t// and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n\t\t\t\t// This is not really usable because it doesn't tell us where the edit began and where it ended.\n\t\t\t\tconst newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\t\tconst typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n\t\t\t\tthis._textAreaState = newState;\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeInput = currentComposition.handleCompositionUpdate(e.data);\n\t\t\tthis._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\tthis._onType.fire(typeInput);\n\t\t\tthis._onCompositionEnd.fire();\n\t\t}));\n\n\t\tthis._register(this._textArea.onInput((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[input]`, e);\n\t\t\t}\n\n\t\t\t// Pretend here we touched the text area, as the `input` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._textArea.setIgnoreSelectionChangeTime('received input event');\n\n\t\t\tif (this._currentComposition) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\tconst typeInput = TextAreaState.deduceInput(this._textAreaState, newState, /*couldBeEmojiInput*/this._OS === OperatingSystem.Macintosh);\n\n\t\t\tif (typeInput.replacePrevCharCnt === 0 && typeInput.text.length === 1) {\n\t\t\t\t// one character was typed\n\t\t\t\tif (\n\t\t\t\t\tstrings.isHighSurrogate(typeInput.text.charCodeAt(0))\n\t\t\t\t\t|| typeInput.text.charCodeAt(0) === 0x7f /* Delete */\n\t\t\t\t) {\n\t\t\t\t\t// Ignore invalid input but keep it around for next time\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._textAreaState = newState;\n\t\t\tif (\n\t\t\t\ttypeInput.text !== ''\n\t\t\t\t|| typeInput.replacePrevCharCnt !== 0\n\t\t\t\t|| typeInput.replaceNextCharCnt !== 0\n\t\t\t\t|| typeInput.positionDelta !== 0\n\t\t\t) {\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t}\n\t\t}));\n\n\t\t// --- Clipboard operations\n\n\t\tthis._register(this._textArea.onCut((e) => {\n\t\t\t// Pretend here we touched the text area, as the `cut` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._textArea.setIgnoreSelectionChangeTime('received cut event');\n\n\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t\tthis._asyncTriggerCut.schedule();\n\t\t}));\n\n\t\tthis._register(this._textArea.onCopy((e) => {\n\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onPaste((e) => {\n\t\t\t// Pretend here we touched the text area, as the `paste` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._textArea.setIgnoreSelectionChangeTime('received paste event');\n\n\t\t\te.preventDefault();\n\n\t\t\tif (!e.clipboardData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\t\tif (!text) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// try the in-memory store\n\t\t\tmetadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n\n\t\t\tthis._onPaste.fire({\n\t\t\t\ttext: text,\n\t\t\t\tmetadata: metadata\n\t\t\t});\n\t\t}));\n\n\t\tthis._register(this._textArea.onFocus(() => {\n\t\t\tconst hadFocus = this._hasFocus;\n\n\t\t\tthis._setHasFocus(true);\n\n\t\t\tif (this._accessibilityService.isScreenReaderOptimized() && this._browser.isSafari && !hadFocus && this._hasFocus) {\n\t\t\t\t// When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n\t\t\t\t// Safari will always move the selection at offset 0 in the textarea\n\t\t\t\tif (!this._asyncFocusGainWriteScreenReaderContent.value) {\n\t\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.value = new RunOnceScheduler(() => this.writeNativeTextAreaContent('asyncFocusGain'), 0);\n\t\t\t\t}\n\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.value.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._textArea.onBlur(() => {\n\t\t\tif (this._currentComposition) {\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/112621\n\t\t\t\t// where compositionend is not triggered when the editor\n\t\t\t\t// is taken off-dom during a composition\n\n\t\t\t\t// Clear the flag to be able to write to the textarea\n\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\t// Clear the textarea to avoid an unwanted cursor type\n\t\t\t\tthis.writeNativeTextAreaContent('blurWithoutCompositionEnd');\n\n\t\t\t\t// Fire artificial composition end\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t}\n\t\t\tthis._setHasFocus(false);\n\t\t}));\n\t\tthis._register(this._textArea.onSyntheticTap(() => {\n\t\t\tif (this._browser.isAndroid && this._currentComposition) {\n\t\t\t\t// on Android, tapping does not cancel the current composition, so the\n\t\t\t\t// textarea is stuck showing the old composition\n\n\t\t\t\t// Clear the flag to be able to write to the textarea\n\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\t// Clear the textarea to avoid an unwanted cursor type\n\t\t\t\tthis.writeNativeTextAreaContent('tapWithoutCompositionEnd');\n\n\t\t\t\t// Fire artificial composition end\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\t_initializeFromTest(): void {\n\t\tthis._hasFocus = true;\n\t\tthis._textAreaState = TextAreaState.readFromTextArea(this._textArea, null);\n\t}\n\n\tprivate _installSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event.\n\t\t//\n\t\t// The `selectionchange` event appears to be emitted under numerous other circumstances,\n\t\t// so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n\t\t// using a Braille display from all the other cases.\n\t\t//\n\t\t// The problems with the `selectionchange` event are:\n\t\t//  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n\t\t//  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n\t\t//  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n\t\t//  * the event is emitted when tabbing into the textarea\n\t\t//  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n\t\t//  * the event sometimes comes in bursts for a single logical textarea operation\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn dom.addDisposableListener(this._textArea.ownerDocument, 'selectionchange', (e) => {//todo\n\t\t\tinputLatency.onSelectionChange();\n\n\t\t\tif (!this._hasFocus) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._currentComposition) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._browser.isChrome) {\n\t\t\t\t// Support only for Chrome until testing happens on other browsers\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst now = Date.now();\n\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta2 = now - this._textArea.getIgnoreSelectionChangeTime();\n\t\t\tthis._textArea.resetSelectionChangeTime();\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the textarea\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._textAreaState.selection) {\n\t\t\t\t// Cannot correlate a position in the textarea with a position in the editor...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newValue = this._textArea.getValue();\n\t\t\tif (this._textAreaState.value !== newValue) {\n\t\t\t\t// Cannot correlate a position in the textarea with a position in the editor...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newSelectionStart = this._textArea.getSelectionStart();\n\t\t\tconst newSelectionEnd = this._textArea.getSelectionEnd();\n\t\t\tif (this._textAreaState.selectionStart === newSelectionStart && this._textAreaState.selectionEnd === newSelectionEnd) {\n\t\t\t\t// Nothing to do...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst _newSelectionStartPosition = this._textAreaState.deduceEditorPosition(newSelectionStart);\n\t\t\tconst newSelectionStartPosition = this._host.deduceModelPosition(_newSelectionStartPosition[0]!, _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n\n\t\t\tconst _newSelectionEndPosition = this._textAreaState.deduceEditorPosition(newSelectionEnd);\n\t\t\tconst newSelectionEndPosition = this._host.deduceModelPosition(_newSelectionEndPosition[0]!, _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n\n\t\t\tconst newSelection = new Selection(\n\t\t\t\tnewSelectionStartPosition.lineNumber, newSelectionStartPosition.column,\n\t\t\t\tnewSelectionEndPosition.lineNumber, newSelectionEndPosition.column\n\t\t\t);\n\n\t\t\tthis._onSelectionChangeRequest.fire(newSelection);\n\t\t});\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tif (this._selectionChangeListener) {\n\t\t\tthis._selectionChangeListener.dispose();\n\t\t\tthis._selectionChangeListener = null;\n\t\t}\n\t}\n\n\tpublic focusTextArea(): void {\n\t\t// Setting this._hasFocus and writing the screen reader content\n\t\t// will result in a focus() and setSelectionRange() in the textarea\n\t\tthis._setHasFocus(true);\n\n\t\t// If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n\t\tthis.refreshFocusState();\n\t}\n\n\tpublic isFocused(): boolean {\n\t\treturn this._hasFocus;\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tthis._setHasFocus(this._textArea.hasFocus());\n\t}\n\n\tprivate _setHasFocus(newHasFocus: boolean): void {\n\t\tif (this._hasFocus === newHasFocus) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._hasFocus = newHasFocus;\n\n\t\tif (this._selectionChangeListener) {\n\t\t\tthis._selectionChangeListener.dispose();\n\t\t\tthis._selectionChangeListener = null;\n\t\t}\n\t\tif (this._hasFocus) {\n\t\t\tthis._selectionChangeListener = this._installSelectionChangeListener();\n\t\t}\n\n\t\tif (this._hasFocus) {\n\t\t\tthis.writeNativeTextAreaContent('focusgain');\n\t\t}\n\n\t\tif (this._hasFocus) {\n\t\t\tthis._onFocus.fire();\n\t\t} else {\n\t\t\tthis._onBlur.fire();\n\t\t}\n\t}\n\n\tprivate _setAndWriteTextAreaState(reason: string, textAreaState: TextAreaState): void {\n\t\tif (!this._hasFocus) {\n\t\t\ttextAreaState = textAreaState.collapseSelection();\n\t\t}\n\n\t\ttextAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n\t\tthis._textAreaState = textAreaState;\n\t}\n\n\tpublic writeNativeTextAreaContent(reason: string): void {\n\t\tif ((!this._accessibilityService.isScreenReaderOptimized() && reason === 'render') || this._currentComposition) {\n\t\t\t// Do not write to the text on render unless a screen reader is being used #192278\n\t\t\t// Do not write to the text area when doing composition\n\t\t\treturn;\n\t\t}\n\t\tthis._logService.trace(`writeTextAreaState(reason: ${reason})`);\n\t\tthis._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent());\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(e: ClipboardEvent): void {\n\t\tconst dataToCopy = this._host.getDataToCopy();\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t(this._browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text),\n\t\t\tstoredMetadata\n\t\t);\n\n\t\te.preventDefault();\n\t\tif (e.clipboardData) {\n\t\t\tClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n\t\t}\n\t}\n}\n\nexport const ClipboardEventUtils = {\n\n\tgetTextData(clipboardData: DataTransfer): [string, ClipboardStoredMetadata | null] {\n\t\tconst text = clipboardData.getData(Mimes.text);\n\t\tlet metadata: ClipboardStoredMetadata | null = null;\n\t\tconst rawmetadata = clipboardData.getData('vscode-editor-data');\n\t\tif (typeof rawmetadata === 'string') {\n\t\t\ttry {\n\t\t\t\tmetadata = <ClipboardStoredMetadata>JSON.parse(rawmetadata);\n\t\t\t\tif (metadata.version !== 1) {\n\t\t\t\t\tmetadata = null;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// no problem!\n\t\t\t}\n\t\t}\n\n\t\tif (text.length === 0 && metadata === null && clipboardData.files.length > 0) {\n\t\t\t// no textual data pasted, generate text from file names\n\t\t\tconst files: File[] = Array.prototype.slice.call(clipboardData.files, 0);\n\t\t\treturn [files.map(file => file.name).join('\\n'), null];\n\t\t}\n\n\t\treturn [text, metadata];\n\t},\n\n\tsetTextData(clipboardData: DataTransfer, text: string, html: string | null | undefined, metadata: ClipboardStoredMetadata): void {\n\t\tclipboardData.setData(Mimes.text, text);\n\t\tif (typeof html === 'string') {\n\t\t\tclipboardData.setData('text/html', html);\n\t\t}\n\t\tclipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n\t}\n};\n\nexport class TextAreaWrapper extends Disposable implements ICompleteTextAreaWrapper {\n\n\tpublic readonly onKeyDown = this._register(new DomEmitter(this._actual, 'keydown')).event;\n\tpublic readonly onKeyPress = this._register(new DomEmitter(this._actual, 'keypress')).event;\n\tpublic readonly onKeyUp = this._register(new DomEmitter(this._actual, 'keyup')).event;\n\tpublic readonly onCompositionStart = this._register(new DomEmitter(this._actual, 'compositionstart')).event;\n\tpublic readonly onCompositionUpdate = this._register(new DomEmitter(this._actual, 'compositionupdate')).event;\n\tpublic readonly onCompositionEnd = this._register(new DomEmitter(this._actual, 'compositionend')).event;\n\tpublic readonly onBeforeInput = this._register(new DomEmitter(this._actual, 'beforeinput')).event;\n\tpublic readonly onInput = <Event<InputEvent>>this._register(new DomEmitter(this._actual, 'input')).event;\n\tpublic readonly onCut = this._register(new DomEmitter(this._actual, 'cut')).event;\n\tpublic readonly onCopy = this._register(new DomEmitter(this._actual, 'copy')).event;\n\tpublic readonly onPaste = this._register(new DomEmitter(this._actual, 'paste')).event;\n\tpublic readonly onFocus = this._register(new DomEmitter(this._actual, 'focus')).event;\n\tpublic readonly onBlur = this._register(new DomEmitter(this._actual, 'blur')).event;\n\n\tpublic get ownerDocument(): Document {\n\t\treturn this._actual.ownerDocument;\n\t}\n\n\tprivate _onSyntheticTap = this._register(new Emitter<void>());\n\tpublic readonly onSyntheticTap: Event<void> = this._onSyntheticTap.event;\n\n\tprivate _ignoreSelectionChangeTime: number;\n\n\tconstructor(\n\t\tprivate readonly _actual: HTMLTextAreaElement\n\t) {\n\t\tsuper();\n\t\tthis._ignoreSelectionChangeTime = 0;\n\n\t\tthis._register(this.onKeyDown(() => inputLatency.onKeyDown()));\n\t\tthis._register(this.onBeforeInput(() => inputLatency.onBeforeInput()));\n\t\tthis._register(this.onInput(() => inputLatency.onInput()));\n\t\tthis._register(this.onKeyUp(() => inputLatency.onKeyUp()));\n\n\t\tthis._register(dom.addDisposableListener(this._actual, TextAreaSyntethicEvents.Tap, () => this._onSyntheticTap.fire()));\n\t}\n\n\tpublic hasFocus(): boolean {\n\t\tconst shadowRoot = dom.getShadowRoot(this._actual);\n\t\tif (shadowRoot) {\n\t\t\treturn shadowRoot.activeElement === this._actual;\n\t\t} else if (this._actual.isConnected) {\n\t\t\treturn dom.getActiveElement() === this._actual;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tpublic getIgnoreSelectionChangeTime(): number {\n\t\treturn this._ignoreSelectionChangeTime;\n\t}\n\n\tpublic resetSelectionChangeTime(): void {\n\t\tthis._ignoreSelectionChangeTime = 0;\n\t}\n\n\tpublic getValue(): string {\n\t\t// console.log('current value: ' + this._textArea.value);\n\t\treturn this._actual.value;\n\t}\n\n\tpublic setValue(reason: string, value: string): void {\n\t\tconst textArea = this._actual;\n\t\tif (textArea.value === value) {\n\t\t\t// No change\n\t\t\treturn;\n\t\t}\n\t\t// console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n\t\tthis.setIgnoreSelectionChangeTime('setValue');\n\t\ttextArea.value = value;\n\t}\n\n\tpublic getSelectionStart(): number {\n\t\treturn this._actual.selectionDirection === 'backward' ? this._actual.selectionEnd : this._actual.selectionStart;\n\t}\n\n\tpublic getSelectionEnd(): number {\n\t\treturn this._actual.selectionDirection === 'backward' ? this._actual.selectionStart : this._actual.selectionEnd;\n\t}\n\n\tpublic setSelectionRange(reason: string, selectionStart: number, selectionEnd: number): void {\n\t\tconst textArea = this._actual;\n\n\t\tlet activeElement: Element | null = null;\n\t\tconst shadowRoot = dom.getShadowRoot(textArea);\n\t\tif (shadowRoot) {\n\t\t\tactiveElement = shadowRoot.activeElement;\n\t\t} else {\n\t\t\tactiveElement = dom.getActiveElement();\n\t\t}\n\t\tconst activeWindow = dom.getWindow(activeElement);\n\n\t\tconst currentIsFocused = (activeElement === textArea);\n\t\tconst currentSelectionStart = textArea.selectionStart;\n\t\tconst currentSelectionEnd = textArea.selectionEnd;\n\n\t\tif (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n\t\t\t// No change\n\t\t\t// Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n\t\t\tif (browser.isFirefox && activeWindow.parent !== activeWindow) {\n\t\t\t\ttextArea.focus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n\n\t\tif (currentIsFocused) {\n\t\t\t// No need to focus, only need to change the selection range\n\t\t\tthis.setIgnoreSelectionChangeTime('setSelectionRange');\n\t\t\ttextArea.setSelectionRange(selectionStart, selectionEnd);\n\t\t\tif (browser.isFirefox && activeWindow.parent !== activeWindow) {\n\t\t\t\ttextArea.focus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n\t\t// Here, we try to undo the browser's desperate reveal.\n\t\ttry {\n\t\t\tconst scrollState = dom.saveParentsScrollTop(textArea);\n\t\t\tthis.setIgnoreSelectionChangeTime('setSelectionRange');\n\t\t\ttextArea.focus();\n\t\t\ttextArea.setSelectionRange(selectionStart, selectionEnd);\n\t\t\tdom.restoreParentsScrollTop(textArea, scrollState);\n\t\t} catch (e) {\n\t\t\t// Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TextAreaSyntethicEvents", "typeInput"]
}
