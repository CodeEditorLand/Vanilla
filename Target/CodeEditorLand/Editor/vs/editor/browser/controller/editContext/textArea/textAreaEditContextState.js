import{commonPrefixLength as h,commonSuffixLength as g}from"../../../../../base/common/strings.js";import"../../../../common/core/position.js";import"../../../../common/core/range.js";import"../screenReaderUtils.js";const s=!1;class a{constructor(e,t,i,n,l){this.value=e;this.selectionStart=t;this.selectionEnd=i;this.selection=n;this.newlineCountBeforeSelection=l}static EMPTY=new a("",0,0,null,void 0);toString(){return`[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`}static readFromTextArea(e,t){const i=e.getValue(),n=e.getSelectionStart(),l=e.getSelectionEnd();let o;if(t){const c=i.substring(0,n),r=t.value.substring(0,t.selectionStart);c===r&&(o=t.newlineCountBeforeSelection)}return new a(i,n,l,null,o)}collapseSelection(){return this.selectionStart===this.value.length?this:new a(this.value,this.value.length,this.value.length,null,void 0)}writeToTextArea(e,t,i){t.setValue(e,this.value),i&&t.setSelectionRange(e,this.selectionStart,this.selectionEnd)}deduceEditorPosition(e){if(e<=this.selectionStart){const n=this.value.substring(e,this.selectionStart);return this._finishDeduceEditorPosition(this.selection?.getStartPosition()??null,n,-1)}if(e>=this.selectionEnd){const n=this.value.substring(this.selectionEnd,e);return this._finishDeduceEditorPosition(this.selection?.getEndPosition()??null,n,1)}const t=this.value.substring(this.selectionStart,e);if(t.indexOf("\u2026")===-1)return this._finishDeduceEditorPosition(this.selection?.getStartPosition()??null,t,1);const i=this.value.substring(e,this.selectionEnd);return this._finishDeduceEditorPosition(this.selection?.getEndPosition()??null,i,-1)}_finishDeduceEditorPosition(e,t,i){let n=0,l=-1;for(;(l=t.indexOf(`
`,l+1))!==-1;)n++;return[e,i*t.length,n]}static deduceInput(e,t,i){if(!e)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};const n=Math.min(h(e.value,t.value),e.selectionStart,t.selectionStart),l=Math.min(g(e.value,t.value),e.value.length-e.selectionEnd,t.value.length-t.selectionEnd),o=e.value.substring(n,e.value.length-l),c=t.value.substring(n,t.value.length-l),r=e.selectionStart-n,d=e.selectionEnd-n,u=t.selectionStart-n,E=t.selectionEnd-n;if(u===E){const S=e.selectionStart-n;return{text:c,replacePrevCharCnt:S,replaceNextCharCnt:0,positionDelta:0}}const p=d-r;return{text:c,replacePrevCharCnt:p,replaceNextCharCnt:0,positionDelta:0}}static deduceAndroidCompositionInput(e,t){if(!e)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};if(e.value===t.value)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:t.selectionEnd-e.selectionEnd};const i=Math.min(h(e.value,t.value),e.selectionEnd),n=Math.min(g(e.value,t.value),e.value.length-e.selectionEnd),l=e.value.substring(i,e.value.length-n),o=t.value.substring(i,t.value.length-n),c=e.selectionStart-i,r=e.selectionEnd-i,d=t.selectionStart-i,u=t.selectionEnd-i;return{text:o,replacePrevCharCnt:r,replaceNextCharCnt:l.length-r,positionDelta:u-o.length}}static fromScreenReaderContentState(e){return new a(e.value,e.selectionStart,e.selectionEnd,e.selection,e.newlineCountBeforeSelection)}}export{a as TextAreaState,s as _debugComposition};
