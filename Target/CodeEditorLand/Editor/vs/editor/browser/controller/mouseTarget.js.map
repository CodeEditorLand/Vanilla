{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/mouseTarget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IPointerHandlerHelper } from './mouseHandler.js';\nimport { IMouseTargetContentEmptyData, IMouseTargetMarginData, IMouseTarget, IMouseTargetContentEmpty, IMouseTargetContentText, IMouseTargetContentWidget, IMouseTargetMargin, IMouseTargetOutsideEditor, IMouseTargetOverlayWidget, IMouseTargetScrollbar, IMouseTargetTextarea, IMouseTargetUnknown, IMouseTargetViewZone, IMouseTargetContentTextData, IMouseTargetViewZoneData, MouseTargetType } from '../editorBrowser.js';\nimport { ClientCoordinates, EditorMouseEvent, EditorPagePosition, PageCoordinates, CoordinatesRelativeToEditor } from '../editorDom.js';\nimport { PartFingerprint, PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { IViewCursorRenderData } from '../viewParts/viewCursors/viewCursor.js';\nimport { EditorLayoutInfo, EditorOption } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { HorizontalPosition } from '../view/renderingContext.js';\nimport { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { IViewModel } from '../../common/viewModel.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations, Direction } from '../../common/cursor/cursorAtomicMoveOperations.js';\nimport { PositionAffinity } from '../../common/model.js';\nimport { InjectedText } from '../../common/modelLineProjectionData.js';\nimport { Mutable } from '../../../base/common/types.js';\nimport { Lazy } from '../../../base/common/lazy.js';\n\nconst enum HitTestResultType {\n\tUnknown,\n\tContent,\n}\n\nclass UnknownHitTestResult {\n\treadonly type = HitTestResultType.Unknown;\n\tconstructor(\n\t\treadonly hitTarget: HTMLElement | null = null\n\t) { }\n}\n\nclass ContentHitTestResult {\n\treadonly type = HitTestResultType.Content;\n\n\tget hitTarget(): HTMLElement { return this.spanNode; }\n\n\tconstructor(\n\t\treadonly position: Position,\n\t\treadonly spanNode: HTMLElement,\n\t\treadonly injectedText: InjectedText | null,\n\t) { }\n}\n\ntype HitTestResult = UnknownHitTestResult | ContentHitTestResult;\n\nnamespace HitTestResult {\n\texport function createFromDOMInfo(ctx: HitTestContext, spanNode: HTMLElement, offset: number): HitTestResult {\n\t\tconst position = ctx.getPositionFromDOMInfo(spanNode, offset);\n\t\tif (position) {\n\t\t\treturn new ContentHitTestResult(position, spanNode, null);\n\t\t}\n\t\treturn new UnknownHitTestResult(spanNode);\n\t}\n}\n\nexport class PointerHandlerLastRenderData {\n\tconstructor(\n\t\tpublic readonly lastViewCursorsRenderData: IViewCursorRenderData[],\n\t\tpublic readonly lastTextareaPosition: Position | null\n\t) { }\n}\n\nexport class MouseTarget {\n\n\tprivate static _deduceRage(position: Position): EditorRange;\n\tprivate static _deduceRage(position: Position, range: EditorRange | null): EditorRange;\n\tprivate static _deduceRage(position: Position | null): EditorRange | null;\n\tprivate static _deduceRage(position: Position | null, range: EditorRange | null = null): EditorRange | null {\n\t\tif (!range && position) {\n\t\t\treturn new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t}\n\t\treturn range ?? null;\n\t}\n\tpublic static createUnknown(element: HTMLElement | null, mouseColumn: number, position: Position | null): IMouseTargetUnknown {\n\t\treturn { type: MouseTargetType.UNKNOWN, element, mouseColumn, position, range: this._deduceRage(position) };\n\t}\n\tpublic static createTextarea(element: HTMLElement | null, mouseColumn: number): IMouseTargetTextarea {\n\t\treturn { type: MouseTargetType.TEXTAREA, element, mouseColumn, position: null, range: null };\n\t}\n\tpublic static createMargin(type: MouseTargetType.GUTTER_GLYPH_MARGIN | MouseTargetType.GUTTER_LINE_NUMBERS | MouseTargetType.GUTTER_LINE_DECORATIONS, element: HTMLElement | null, mouseColumn: number, position: Position, range: EditorRange, detail: IMouseTargetMarginData): IMouseTargetMargin {\n\t\treturn { type, element, mouseColumn, position, range, detail };\n\t}\n\tpublic static createViewZone(type: MouseTargetType.GUTTER_VIEW_ZONE | MouseTargetType.CONTENT_VIEW_ZONE, element: HTMLElement | null, mouseColumn: number, position: Position, detail: IMouseTargetViewZoneData): IMouseTargetViewZone {\n\t\treturn { type, element, mouseColumn, position, range: this._deduceRage(position), detail };\n\t}\n\tpublic static createContentText(element: HTMLElement | null, mouseColumn: number, position: Position, range: EditorRange | null, detail: IMouseTargetContentTextData): IMouseTargetContentText {\n\t\treturn { type: MouseTargetType.CONTENT_TEXT, element, mouseColumn, position, range: this._deduceRage(position, range), detail };\n\t}\n\tpublic static createContentEmpty(element: HTMLElement | null, mouseColumn: number, position: Position, detail: IMouseTargetContentEmptyData): IMouseTargetContentEmpty {\n\t\treturn { type: MouseTargetType.CONTENT_EMPTY, element, mouseColumn, position, range: this._deduceRage(position), detail };\n\t}\n\tpublic static createContentWidget(element: HTMLElement | null, mouseColumn: number, detail: string): IMouseTargetContentWidget {\n\t\treturn { type: MouseTargetType.CONTENT_WIDGET, element, mouseColumn, position: null, range: null, detail };\n\t}\n\tpublic static createScrollbar(element: HTMLElement | null, mouseColumn: number, position: Position): IMouseTargetScrollbar {\n\t\treturn { type: MouseTargetType.SCROLLBAR, element, mouseColumn, position, range: this._deduceRage(position) };\n\t}\n\tpublic static createOverlayWidget(element: HTMLElement | null, mouseColumn: number, detail: string): IMouseTargetOverlayWidget {\n\t\treturn { type: MouseTargetType.OVERLAY_WIDGET, element, mouseColumn, position: null, range: null, detail };\n\t}\n\tpublic static createOutsideEditor(mouseColumn: number, position: Position, outsidePosition: 'above' | 'below' | 'left' | 'right', outsideDistance: number): IMouseTargetOutsideEditor {\n\t\treturn { type: MouseTargetType.OUTSIDE_EDITOR, element: null, mouseColumn, position, range: this._deduceRage(position), outsidePosition, outsideDistance };\n\t}\n\n\tprivate static _typeToString(type: MouseTargetType): string {\n\t\tif (type === MouseTargetType.TEXTAREA) {\n\t\t\treturn 'TEXTAREA';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_GLYPH_MARGIN) {\n\t\t\treturn 'GUTTER_GLYPH_MARGIN';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_LINE_NUMBERS) {\n\t\t\treturn 'GUTTER_LINE_NUMBERS';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_LINE_DECORATIONS) {\n\t\t\treturn 'GUTTER_LINE_DECORATIONS';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_VIEW_ZONE) {\n\t\t\treturn 'GUTTER_VIEW_ZONE';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn 'CONTENT_TEXT';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\treturn 'CONTENT_EMPTY';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_VIEW_ZONE) {\n\t\t\treturn 'CONTENT_VIEW_ZONE';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_WIDGET) {\n\t\t\treturn 'CONTENT_WIDGET';\n\t\t}\n\t\tif (type === MouseTargetType.OVERVIEW_RULER) {\n\t\t\treturn 'OVERVIEW_RULER';\n\t\t}\n\t\tif (type === MouseTargetType.SCROLLBAR) {\n\t\t\treturn 'SCROLLBAR';\n\t\t}\n\t\tif (type === MouseTargetType.OVERLAY_WIDGET) {\n\t\t\treturn 'OVERLAY_WIDGET';\n\t\t}\n\t\treturn 'UNKNOWN';\n\t}\n\n\tpublic static toString(target: IMouseTarget): string {\n\t\treturn this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + JSON.stringify((<any>target).detail);\n\t}\n}\n\nclass ElementPath {\n\n\tpublic static isTextArea(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length === 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.TextArea\n\t\t);\n\t}\n\n\tpublic static isChildOfViewLines(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 4\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[3] === PartFingerprint.ViewLines\n\t\t);\n\t}\n\n\tpublic static isStrictChildOfViewLines(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length > 4\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[3] === PartFingerprint.ViewLines\n\t\t);\n\t}\n\n\tpublic static isChildOfScrollableElement(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.ScrollableElement\n\t\t);\n\t}\n\n\tpublic static isChildOfMinimap(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.Minimap\n\t\t);\n\t}\n\n\tpublic static isChildOfContentWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 4\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[3] === PartFingerprint.ContentWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverflowGuard(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 1\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t);\n\t}\n\n\tpublic static isChildOfOverflowingContentWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 1\n\t\t\t&& path[0] === PartFingerprint.OverflowingContentWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverlayWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.OverlayWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverflowingOverlayWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 1\n\t\t\t&& path[0] === PartFingerprint.OverflowingOverlayWidgets\n\t\t);\n\t}\n}\n\nexport class HitTestContext {\n\n\tpublic readonly viewModel: IViewModel;\n\tpublic readonly layoutInfo: EditorLayoutInfo;\n\tpublic readonly viewDomNode: HTMLElement;\n\tpublic readonly lineHeight: number;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly lastRenderData: PointerHandlerLastRenderData;\n\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _viewHelper: IPointerHandlerHelper;\n\n\tconstructor(context: ViewContext, viewHelper: IPointerHandlerHelper, lastRenderData: PointerHandlerLastRenderData) {\n\t\tthis.viewModel = context.viewModel;\n\t\tconst options = context.configuration.options;\n\t\tthis.layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis.viewDomNode = viewHelper.viewDomNode;\n\t\tthis.lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tthis.lastRenderData = lastRenderData;\n\t\tthis._context = context;\n\t\tthis._viewHelper = viewHelper;\n\t}\n\n\tpublic getZoneAtCoord(mouseVerticalOffset: number): IMouseTargetViewZoneData | null {\n\t\treturn HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n\t}\n\n\tpublic static getZoneAtCoord(context: ViewContext, mouseVerticalOffset: number): IMouseTargetViewZoneData | null {\n\t\t// The target is either a view zone or the empty space after the last view-line\n\t\tconst viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n\n\t\tif (viewZoneWhitespace) {\n\t\t\tconst viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n\t\t\tconst lineCount = context.viewModel.getLineCount();\n\t\t\tlet positionBefore: Position | null = null;\n\t\t\tlet position: Position | null;\n\t\t\tlet positionAfter: Position | null = null;\n\n\t\t\tif (viewZoneWhitespace.afterLineNumber !== lineCount) {\n\t\t\t\t// There are more lines after this view zone\n\t\t\t\tpositionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n\t\t\t}\n\t\t\tif (viewZoneWhitespace.afterLineNumber > 0) {\n\t\t\t\t// There are more lines above this view zone\n\t\t\t\tpositionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.viewModel.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n\t\t\t}\n\n\t\t\tif (positionAfter === null) {\n\t\t\t\tposition = positionBefore;\n\t\t\t} else if (positionBefore === null) {\n\t\t\t\tposition = positionAfter;\n\t\t\t} else if (mouseVerticalOffset < viewZoneMiddle) {\n\t\t\t\tposition = positionBefore;\n\t\t\t} else {\n\t\t\t\tposition = positionAfter;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tviewZoneId: viewZoneWhitespace.id,\n\t\t\t\tafterLineNumber: viewZoneWhitespace.afterLineNumber,\n\t\t\t\tpositionBefore: positionBefore,\n\t\t\t\tpositionAfter: positionAfter,\n\t\t\t\tposition: position!\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getFullLineRangeAtCoord(mouseVerticalOffset: number): { range: EditorRange; isAfterLines: boolean } {\n\t\tif (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n\t\t\t// Below the last line\n\t\t\tconst lineNumber = this._context.viewModel.getLineCount();\n\t\t\tconst maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n\t\t\treturn {\n\t\t\t\trange: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n\t\t\t\tisAfterLines: true\n\t\t\t};\n\t\t}\n\n\t\tconst lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n\t\tconst maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n\t\treturn {\n\t\t\trange: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n\t\t\tisAfterLines: false\n\t\t};\n\t}\n\n\tpublic getLineNumberAtVerticalOffset(mouseVerticalOffset: number): number {\n\t\treturn this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n\t}\n\n\tpublic isAfterLines(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n\t}\n\n\tpublic isInTopPadding(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n\t}\n\n\tpublic isInBottomPadding(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n\t}\n\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number): number {\n\t\treturn this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n\t}\n\n\tpublic findAttribute(element: Element, attr: string): string | null {\n\t\treturn HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n\t}\n\n\tprivate static _findAttribute(element: Element, attr: string, stopAt: Element): string | null {\n\t\twhile (element && element !== element.ownerDocument.body) {\n\t\t\tif (element.hasAttribute && element.hasAttribute(attr)) {\n\t\t\t\treturn element.getAttribute(attr);\n\t\t\t}\n\t\t\tif (element === stopAt) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telement = <Element>element.parentNode;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getLineWidth(lineNumber: number): number {\n\t\treturn this._viewHelper.getLineWidth(lineNumber);\n\t}\n\n\tpublic visibleRangeForPosition(lineNumber: number, column: number): HorizontalPosition | null {\n\t\treturn this._viewHelper.visibleRangeForPosition(lineNumber, column);\n\t}\n\n\tpublic getPositionFromDOMInfo(spanNode: HTMLElement, offset: number): Position | null {\n\t\treturn this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n\t}\n\n\tpublic getCurrentScrollTop(): number {\n\t\treturn this._context.viewLayout.getCurrentScrollTop();\n\t}\n\n\tpublic getCurrentScrollLeft(): number {\n\t\treturn this._context.viewLayout.getCurrentScrollLeft();\n\t}\n}\n\nabstract class BareHitTestRequest {\n\n\tpublic readonly editorPos: EditorPagePosition;\n\tpublic readonly pos: PageCoordinates;\n\tpublic readonly relativePos: CoordinatesRelativeToEditor;\n\tpublic readonly mouseVerticalOffset: number;\n\tpublic readonly isInMarginArea: boolean;\n\tpublic readonly isInContentArea: boolean;\n\tpublic readonly mouseContentHorizontalOffset: number;\n\n\tprotected readonly mouseColumn: number;\n\n\tconstructor(ctx: HitTestContext, editorPos: EditorPagePosition, pos: PageCoordinates, relativePos: CoordinatesRelativeToEditor) {\n\t\tthis.editorPos = editorPos;\n\t\tthis.pos = pos;\n\t\tthis.relativePos = relativePos;\n\n\t\tthis.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + this.relativePos.y);\n\t\tthis.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + this.relativePos.x - ctx.layoutInfo.contentLeft;\n\t\tthis.isInMarginArea = (this.relativePos.x < ctx.layoutInfo.contentLeft && this.relativePos.x >= ctx.layoutInfo.glyphMarginLeft);\n\t\tthis.isInContentArea = !this.isInMarginArea;\n\t\tthis.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n\t}\n}\n\nclass HitTestRequest extends BareHitTestRequest {\n\tprivate readonly _ctx: HitTestContext;\n\tprivate readonly _eventTarget: HTMLElement | null;\n\tpublic readonly hitTestResult = new Lazy(() => MouseTargetFactory.doHitTest(this._ctx, this));\n\tprivate _useHitTestTarget: boolean;\n\tprivate _targetPathCacheElement: HTMLElement | null = null;\n\tprivate _targetPathCacheValue: Uint8Array = new Uint8Array(0);\n\n\tpublic get target(): HTMLElement | null {\n\t\tif (this._useHitTestTarget) {\n\t\t\treturn this.hitTestResult.value.hitTarget;\n\t\t}\n\t\treturn this._eventTarget;\n\t}\n\n\tpublic get targetPath(): Uint8Array {\n\t\tif (this._targetPathCacheElement !== this.target) {\n\t\t\tthis._targetPathCacheElement = this.target;\n\t\t\tthis._targetPathCacheValue = PartFingerprints.collect(this.target, this._ctx.viewDomNode);\n\t\t}\n\t\treturn this._targetPathCacheValue;\n\t}\n\n\tconstructor(ctx: HitTestContext, editorPos: EditorPagePosition, pos: PageCoordinates, relativePos: CoordinatesRelativeToEditor, eventTarget: HTMLElement | null) {\n\t\tsuper(ctx, editorPos, pos, relativePos);\n\t\tthis._ctx = ctx;\n\t\tthis._eventTarget = eventTarget;\n\n\t\t// If no event target is passed in, we will use the hit test target\n\t\tconst hasEventTarget = Boolean(this._eventTarget);\n\t\tthis._useHitTestTarget = !hasEventTarget;\n\t}\n\n\tpublic override toString(): string {\n\t\treturn `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? (<HTMLElement>this.target).outerHTML : null}`;\n\t}\n\n\tpublic get wouldBenefitFromHitTestTargetSwitch(): boolean {\n\t\treturn (\n\t\t\t!this._useHitTestTarget\n\t\t\t&& this.hitTestResult.value.hitTarget !== null\n\t\t\t&& this.target !== this.hitTestResult.value.hitTarget\n\t\t);\n\t}\n\n\tpublic switchToHitTestTarget(): void {\n\t\tthis._useHitTestTarget = true;\n\t}\n\n\tprivate _getMouseColumn(position: Position | null = null): number {\n\t\tif (position && position.column < this._ctx.viewModel.getLineMaxColumn(position.lineNumber)) {\n\t\t\t// Most likely, the line contains foreign decorations...\n\t\t\treturn CursorColumns.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(position.lineNumber), position.column, this._ctx.viewModel.model.getOptions().tabSize) + 1;\n\t\t}\n\t\treturn this.mouseColumn;\n\t}\n\n\tpublic fulfillUnknown(position: Position | null = null): IMouseTargetUnknown {\n\t\treturn MouseTarget.createUnknown(this.target, this._getMouseColumn(position), position);\n\t}\n\tpublic fulfillTextarea(): IMouseTargetTextarea {\n\t\treturn MouseTarget.createTextarea(this.target, this._getMouseColumn());\n\t}\n\tpublic fulfillMargin(type: MouseTargetType.GUTTER_GLYPH_MARGIN | MouseTargetType.GUTTER_LINE_NUMBERS | MouseTargetType.GUTTER_LINE_DECORATIONS, position: Position, range: EditorRange, detail: IMouseTargetMarginData): IMouseTargetMargin {\n\t\treturn MouseTarget.createMargin(type, this.target, this._getMouseColumn(position), position, range, detail);\n\t}\n\tpublic fulfillViewZone(type: MouseTargetType.GUTTER_VIEW_ZONE | MouseTargetType.CONTENT_VIEW_ZONE, position: Position, detail: IMouseTargetViewZoneData): IMouseTargetViewZone {\n\t\treturn MouseTarget.createViewZone(type, this.target, this._getMouseColumn(position), position, detail);\n\t}\n\tpublic fulfillContentText(position: Position, range: EditorRange | null, detail: IMouseTargetContentTextData): IMouseTargetContentText {\n\t\treturn MouseTarget.createContentText(this.target, this._getMouseColumn(position), position, range, detail);\n\t}\n\tpublic fulfillContentEmpty(position: Position, detail: IMouseTargetContentEmptyData): IMouseTargetContentEmpty {\n\t\treturn MouseTarget.createContentEmpty(this.target, this._getMouseColumn(position), position, detail);\n\t}\n\tpublic fulfillContentWidget(detail: string): IMouseTargetContentWidget {\n\t\treturn MouseTarget.createContentWidget(this.target, this._getMouseColumn(), detail);\n\t}\n\tpublic fulfillScrollbar(position: Position): IMouseTargetScrollbar {\n\t\treturn MouseTarget.createScrollbar(this.target, this._getMouseColumn(position), position);\n\t}\n\tpublic fulfillOverlayWidget(detail: string): IMouseTargetOverlayWidget {\n\t\treturn MouseTarget.createOverlayWidget(this.target, this._getMouseColumn(), detail);\n\t}\n}\n\ninterface ResolvedHitTestRequest extends HitTestRequest {\n\treadonly target: HTMLElement;\n}\n\nconst EMPTY_CONTENT_AFTER_LINES: IMouseTargetContentEmptyData = { isAfterLines: true };\n\nfunction createEmptyContentDataInLines(horizontalDistanceToText: number): IMouseTargetContentEmptyData {\n\treturn {\n\t\tisAfterLines: false,\n\t\thorizontalDistanceToText: horizontalDistanceToText\n\t};\n}\n\nexport class MouseTargetFactory {\n\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _viewHelper: IPointerHandlerHelper;\n\n\tconstructor(context: ViewContext, viewHelper: IPointerHandlerHelper) {\n\t\tthis._context = context;\n\t\tthis._viewHelper = viewHelper;\n\t}\n\n\tpublic mouseTargetIsWidget(e: EditorMouseEvent): boolean {\n\t\tconst t = <Element>e.target;\n\t\tconst path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n\n\t\t// Is it a content widget?\n\t\tif (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Is it an overlay widget?\n\t\tif (ElementPath.isChildOfOverlayWidgets(path) || ElementPath.isChildOfOverflowingOverlayWidgets(path)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic createMouseTarget(lastRenderData: PointerHandlerLastRenderData, editorPos: EditorPagePosition, pos: PageCoordinates, relativePos: CoordinatesRelativeToEditor, target: HTMLElement | null): IMouseTarget {\n\t\tconst ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n\t\tconst request = new HitTestRequest(ctx, editorPos, pos, relativePos, target);\n\t\ttry {\n\t\t\tconst r = MouseTargetFactory._createMouseTarget(ctx, request);\n\n\t\t\tif (r.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\t\t// Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n\t\t\t\tif (ctx.stickyTabStops && r.position !== null) {\n\t\t\t\t\tconst position = MouseTargetFactory._snapToSoftTabBoundary(r.position, ctx.viewModel);\n\t\t\t\t\tconst range = EditorRange.fromPositions(position, position).plusRange(r.range);\n\t\t\t\t\treturn request.fulfillContentText(position, range, r.detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log(MouseTarget.toString(r));\n\t\t\treturn r;\n\t\t} catch (err) {\n\t\t\t// console.log(err);\n\t\t\treturn request.fulfillUnknown();\n\t\t}\n\t}\n\n\tprivate static _createMouseTarget(ctx: HitTestContext, request: HitTestRequest): IMouseTarget {\n\n\t\t// console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n\n\t\tif (request.target === null) {\n\t\t\t// No target\n\t\t\treturn request.fulfillUnknown();\n\t\t}\n\n\t\t// we know for a fact that request.target is not null\n\t\tconst resolvedRequest = <ResolvedHitTestRequest>request;\n\n\t\tlet result: IMouseTarget | null = null;\n\n\t\tif (!ElementPath.isChildOfOverflowGuard(request.targetPath) && !ElementPath.isChildOfOverflowingContentWidgets(request.targetPath) && !ElementPath.isChildOfOverflowingOverlayWidgets(request.targetPath)) {\n\t\t\t// We only render dom nodes inside the overflow guard or in the overflowing content widgets\n\t\t\tresult = result || request.fulfillUnknown();\n\t\t}\n\n\t\tresult = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n\n\t\treturn (result || request.fulfillUnknown());\n\t}\n\n\tprivate static _hitTestContentWidget(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\t// Is it a content widget?\n\t\tif (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n\t\t\tconst widgetId = ctx.findAttribute(request.target, 'widgetId');\n\t\t\tif (widgetId) {\n\t\t\t\treturn request.fulfillContentWidget(widgetId);\n\t\t\t} else {\n\t\t\t\treturn request.fulfillUnknown();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestOverlayWidget(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\t// Is it an overlay widget?\n\t\tif (ElementPath.isChildOfOverlayWidgets(request.targetPath) || ElementPath.isChildOfOverflowingOverlayWidgets(request.targetPath)) {\n\t\t\tconst widgetId = ctx.findAttribute(request.target, 'widgetId');\n\t\t\tif (widgetId) {\n\t\t\t\treturn request.fulfillOverlayWidget(widgetId);\n\t\t\t} else {\n\t\t\t\treturn request.fulfillUnknown();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewCursor(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\n\t\tif (request.target) {\n\t\t\t// Check if we've hit a painted cursor\n\t\t\tconst lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n\n\t\t\tfor (const d of lastViewCursorsRenderData) {\n\n\t\t\t\tif (request.target === d.domNode) {\n\t\t\t\t\treturn request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (request.isInContentArea) {\n\t\t\t// Edge has a bug when hit-testing the exact position of a cursor,\n\t\t\t// instead of returning the correct dom node, it returns the\n\t\t\t// first or last rendered view line dom node, therefore help it out\n\t\t\t// and first check if we are on top of a cursor\n\n\t\t\tconst lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n\t\t\tconst mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n\t\t\tconst mouseVerticalOffset = request.mouseVerticalOffset;\n\n\t\t\tfor (const d of lastViewCursorsRenderData) {\n\n\t\t\t\tif (mouseContentHorizontalOffset < d.contentLeft) {\n\t\t\t\t\t// mouse position is to the left of the cursor\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n\t\t\t\t\t// mouse position is to the right of the cursor\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n\n\t\t\t\tif (\n\t\t\t\t\tcursorVerticalOffset <= mouseVerticalOffset\n\t\t\t\t\t&& mouseVerticalOffset <= cursorVerticalOffset + d.height\n\t\t\t\t) {\n\t\t\t\t\treturn request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewZone(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\tconst viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n\t\tif (viewZoneData) {\n\t\t\tconst mouseTargetType = (request.isInContentArea ? MouseTargetType.CONTENT_VIEW_ZONE : MouseTargetType.GUTTER_VIEW_ZONE);\n\t\t\treturn request.fulfillViewZone(mouseTargetType, viewZoneData.position, viewZoneData);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestTextArea(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\t// Is it the textarea?\n\t\tif (ElementPath.isTextArea(request.targetPath)) {\n\t\t\tif (ctx.lastRenderData.lastTextareaPosition) {\n\t\t\t\treturn request.fulfillContentText(ctx.lastRenderData.lastTextareaPosition, null, { mightBeForeignElement: false, injectedText: null });\n\t\t\t}\n\t\t\treturn request.fulfillTextarea();\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestMargin(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\tif (request.isInMarginArea) {\n\t\t\tconst res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n\t\t\tconst pos = res.range.getStartPosition();\n\t\t\tlet offset = Math.abs(request.relativePos.x);\n\t\t\tconst detail: Mutable<IMouseTargetMarginData> = {\n\t\t\t\tisAfterLines: res.isAfterLines,\n\t\t\t\tglyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n\t\t\t\tglyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n\t\t\t\tlineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n\t\t\t\toffsetX: offset\n\t\t\t};\n\n\t\t\toffset -= ctx.layoutInfo.glyphMarginLeft;\n\n\t\t\tif (offset <= ctx.layoutInfo.glyphMarginWidth) {\n\t\t\t\t// On the glyph margin\n\t\t\t\tconst modelCoordinate = ctx.viewModel.coordinatesConverter.convertViewPositionToModelPosition(res.range.getStartPosition());\n\t\t\t\tconst lanes = ctx.viewModel.glyphLanes.getLanesAtLine(modelCoordinate.lineNumber);\n\t\t\t\tdetail.glyphMarginLane = lanes[Math.floor(offset / ctx.lineHeight)];\n\t\t\t\treturn request.fulfillMargin(MouseTargetType.GUTTER_GLYPH_MARGIN, pos, res.range, detail);\n\t\t\t}\n\t\t\toffset -= ctx.layoutInfo.glyphMarginWidth;\n\n\t\t\tif (offset <= ctx.layoutInfo.lineNumbersWidth) {\n\t\t\t\t// On the line numbers\n\t\t\t\treturn request.fulfillMargin(MouseTargetType.GUTTER_LINE_NUMBERS, pos, res.range, detail);\n\t\t\t}\n\t\t\toffset -= ctx.layoutInfo.lineNumbersWidth;\n\n\t\t\t// On the line decorations\n\t\t\treturn request.fulfillMargin(MouseTargetType.GUTTER_LINE_DECORATIONS, pos, res.range, detail);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewLines(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\tif (!ElementPath.isChildOfViewLines(request.targetPath)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n\t\t\treturn request.fulfillContentEmpty(new Position(1, 1), EMPTY_CONTENT_AFTER_LINES);\n\t\t}\n\n\t\t// Check if it is below any lines and any view zones\n\t\tif (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n\t\t\t// This most likely indicates it happened after the last view-line\n\t\t\tconst lineCount = ctx.viewModel.getLineCount();\n\t\t\tconst maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n\t\t\treturn request.fulfillContentEmpty(new Position(lineCount, maxLineColumn), EMPTY_CONTENT_AFTER_LINES);\n\t\t}\n\n\t\t// Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n\t\t// See https://github.com/microsoft/vscode/issues/46942\n\t\tif (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n\t\t\tconst lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\tif (ctx.viewModel.getLineLength(lineNumber) === 0) {\n\t\t\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\t\t\t\tconst detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n\t\t\t\treturn request.fulfillContentEmpty(new Position(lineNumber, 1), detail);\n\t\t\t}\n\n\t\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\t\t\tif (request.mouseContentHorizontalOffset >= lineWidth) {\n\t\t\t\t// TODO: This is wrong for RTL\n\t\t\t\tconst detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n\t\t\t\tconst pos = new Position(lineNumber, ctx.viewModel.getLineMaxColumn(lineNumber));\n\t\t\t\treturn request.fulfillContentEmpty(pos, detail);\n\t\t\t}\n\t\t}\n\n\t\t// Do the hit test (if not already done)\n\t\tconst hitTestResult = request.hitTestResult.value;\n\n\t\tif (hitTestResult.type === HitTestResultType.Content) {\n\t\t\treturn MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n\t\t}\n\n\t\t// We didn't hit content...\n\t\tif (request.wouldBenefitFromHitTestTargetSwitch) {\n\t\t\t// We actually hit something different... Give it one last change by trying again with this new target\n\t\t\trequest.switchToHitTestTarget();\n\t\t\treturn this._createMouseTarget(ctx, request);\n\t\t}\n\n\t\t// We have tried everything...\n\t\treturn request.fulfillUnknown();\n\t}\n\n\tprivate static _hitTestMinimap(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\tif (ElementPath.isChildOfMinimap(request.targetPath)) {\n\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\tconst maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n\t\t\treturn request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestScrollbarSlider(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\tif (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n\t\t\tif (request.target && request.target.nodeType === 1) {\n\t\t\t\tconst className = request.target.className;\n\t\t\t\tif (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n\t\t\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\t\t\tconst maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n\t\t\t\t\treturn request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestScrollbar(ctx: HitTestContext, request: ResolvedHitTestRequest): IMouseTarget | null {\n\t\t// Is it the overview ruler?\n\t\t// Is it a child of the scrollable element?\n\t\tif (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\tconst maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n\t\t\treturn request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getMouseColumn(relativePos: CoordinatesRelativeToEditor): number {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + relativePos.x - layoutInfo.contentLeft;\n\t\treturn MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth);\n\t}\n\n\tpublic static _getMouseColumn(mouseContentHorizontalOffset: number, typicalHalfwidthCharacterWidth: number): number {\n\t\tif (mouseContentHorizontalOffset < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n\t\treturn (chars + 1);\n\t}\n\n\tprivate static createMouseTargetFromHitTestPosition(ctx: HitTestContext, request: HitTestRequest, spanNode: HTMLElement, pos: Position, injectedText: InjectedText | null): IMouseTarget {\n\t\tconst lineNumber = pos.lineNumber;\n\t\tconst column = pos.column;\n\n\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\n\t\tif (request.mouseContentHorizontalOffset > lineWidth) {\n\t\t\tconst detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n\t\t\treturn request.fulfillContentEmpty(pos, detail);\n\t\t}\n\n\t\tconst visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n\n\t\tif (!visibleRange) {\n\t\t\treturn request.fulfillUnknown(pos);\n\t\t}\n\n\t\tconst columnHorizontalOffset = visibleRange.left;\n\n\t\tif (Math.abs(request.mouseContentHorizontalOffset - columnHorizontalOffset) < 1) {\n\t\t\treturn request.fulfillContentText(pos, null, { mightBeForeignElement: !!injectedText, injectedText });\n\t\t}\n\n\t\t// Let's define a, b, c and check if the offset is in between them...\n\t\tinterface OffsetColumn { offset: number; column: number }\n\n\t\tconst points: OffsetColumn[] = [];\n\t\tpoints.push({ offset: visibleRange.left, column: column });\n\t\tif (column > 1) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n\t\t\tif (visibleRange) {\n\t\t\t\tpoints.push({ offset: visibleRange.left, column: column - 1 });\n\t\t\t}\n\t\t}\n\t\tconst lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n\t\tif (column < lineMaxColumn) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n\t\t\tif (visibleRange) {\n\t\t\t\tpoints.push({ offset: visibleRange.left, column: column + 1 });\n\t\t\t}\n\t\t}\n\n\t\tpoints.sort((a, b) => a.offset - b.offset);\n\n\t\tconst mouseCoordinates = request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode));\n\t\tconst spanNodeClientRect = spanNode.getBoundingClientRect();\n\t\tconst mouseIsOverSpanNode = (spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right);\n\n\t\tlet rng: EditorRange | null = null;\n\n\t\tfor (let i = 1; i < points.length; i++) {\n\t\t\tconst prev = points[i - 1];\n\t\t\tconst curr = points[i];\n\t\t\tif (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n\t\t\t\trng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/152819\n\t\t\t\t// Due to the use of zwj, the browser's hit test result is skewed towards the left\n\t\t\t\t// Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n\n\t\t\t\tconst prevDelta = Math.abs(prev.offset - request.mouseContentHorizontalOffset);\n\t\t\t\tconst nextDelta = Math.abs(curr.offset - request.mouseContentHorizontalOffset);\n\n\t\t\t\tpos = (\n\t\t\t\t\tprevDelta < nextDelta\n\t\t\t\t\t\t? new Position(lineNumber, prev.column)\n\t\t\t\t\t\t: new Position(lineNumber, curr.column)\n\t\t\t\t);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn request.fulfillContentText(pos, rng, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText, injectedText });\n\t}\n\n\t/**\n\t * Most probably WebKit browsers and Edge\n\t */\n\tprivate static _doHitTestWithCaretRangeFromPoint(ctx: HitTestContext, request: BareHitTestRequest): HitTestResult {\n\n\t\t// In Chrome, especially on Linux it is possible to click between lines,\n\t\t// so try to adjust the `hity` below so that it lands in the center of a line\n\t\tconst lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\tconst lineStartVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n\t\tconst lineEndVerticalOffset = lineStartVerticalOffset + ctx.lineHeight;\n\n\t\tconst isBelowLastLine = (\n\t\t\tlineNumber === ctx.viewModel.getLineCount()\n\t\t\t&& request.mouseVerticalOffset > lineEndVerticalOffset\n\t\t);\n\n\t\tif (!isBelowLastLine) {\n\t\t\tconst lineCenteredVerticalOffset = Math.floor((lineStartVerticalOffset + lineEndVerticalOffset) / 2);\n\t\t\tlet adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n\n\t\t\tif (adjustedPageY <= request.editorPos.y) {\n\t\t\t\tadjustedPageY = request.editorPos.y + 1;\n\t\t\t}\n\t\t\tif (adjustedPageY >= request.editorPos.y + request.editorPos.height) {\n\t\t\t\tadjustedPageY = request.editorPos.y + request.editorPos.height - 1;\n\t\t\t}\n\n\t\t\tconst adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n\n\t\t\tconst r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n\t\t\tif (r.type === HitTestResultType.Content) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\t// Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n\t\treturn this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n\t}\n\n\tprivate static _actualDoHitTestWithCaretRangeFromPoint(ctx: HitTestContext, coords: ClientCoordinates): HitTestResult {\n\t\tconst shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n\t\tlet range: Range;\n\t\tif (shadowRoot) {\n\t\t\tif (typeof (<any>shadowRoot).caretRangeFromPoint === 'undefined') {\n\t\t\t\trange = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n\t\t\t} else {\n\t\t\t\trange = (<any>shadowRoot).caretRangeFromPoint(coords.clientX, coords.clientY);\n\t\t\t}\n\t\t} else {\n\t\t\trange = (<any>ctx.viewDomNode.ownerDocument).caretRangeFromPoint(coords.clientX, coords.clientY);\n\t\t}\n\n\t\tif (!range || !range.startContainer) {\n\t\t\treturn new UnknownHitTestResult();\n\t\t}\n\n\t\t// Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n\t\tconst startContainer = range.startContainer;\n\n\t\tif (startContainer.nodeType === startContainer.TEXT_NODE) {\n\t\t\t// startContainer is expected to be the token text\n\t\t\tconst parent1 = startContainer.parentNode; // expected to be the token span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\t\t\tconst parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\t\t\tconst parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? (<HTMLElement>parent3).className : null;\n\n\t\t\tif (parent3ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\treturn HitTestResult.createFromDOMInfo(ctx, <HTMLElement>parent1, range.startOffset);\n\t\t\t} else {\n\t\t\t\treturn new UnknownHitTestResult(<HTMLElement>startContainer.parentNode);\n\t\t\t}\n\t\t} else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n\t\t\t// startContainer is expected to be the token span\n\t\t\tconst parent1 = startContainer.parentNode; // expected to be the view line container span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n\t\t\tconst parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? (<HTMLElement>parent2).className : null;\n\n\t\t\tif (parent2ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\treturn HitTestResult.createFromDOMInfo(ctx, <HTMLElement>startContainer, (<HTMLElement>startContainer).textContent!.length);\n\t\t\t} else {\n\t\t\t\treturn new UnknownHitTestResult(<HTMLElement>startContainer);\n\t\t\t}\n\t\t}\n\n\t\treturn new UnknownHitTestResult();\n\t}\n\n\t/**\n\t * Most probably Gecko\n\t */\n\tprivate static _doHitTestWithCaretPositionFromPoint(ctx: HitTestContext, coords: ClientCoordinates): HitTestResult {\n\t\tconst hitResult: { offsetNode: Node; offset: number } = (<any>ctx.viewDomNode.ownerDocument).caretPositionFromPoint(coords.clientX, coords.clientY);\n\n\t\tif (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n\t\t\t// offsetNode is expected to be the token text\n\t\t\tconst parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\t\t\tconst parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\t\t\tconst parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? (<HTMLElement>parent3).className : null;\n\n\t\t\tif (parent3ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\treturn HitTestResult.createFromDOMInfo(ctx, <HTMLElement>hitResult.offsetNode.parentNode, hitResult.offset);\n\t\t\t} else {\n\t\t\t\treturn new UnknownHitTestResult(<HTMLElement>hitResult.offsetNode.parentNode);\n\t\t\t}\n\t\t}\n\n\t\t// For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n\t\t// Some other times, it returns the `<span>` with the inline decoration\n\t\tif (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n\t\t\tconst parent1 = hitResult.offsetNode.parentNode;\n\t\t\tconst parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? (<HTMLElement>parent1).className : null;\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null;\n\t\t\tconst parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? (<HTMLElement>parent2).className : null;\n\n\t\t\tif (parent1ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\t// it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n\t\t\t\tconst tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n\t\t\t\tif (tokenSpan) {\n\t\t\t\t\treturn HitTestResult.createFromDOMInfo(ctx, <HTMLElement>tokenSpan, 0);\n\t\t\t\t}\n\t\t\t} else if (parent2ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\t// it returned the `<span>` with the inline decoration\n\t\t\t\treturn HitTestResult.createFromDOMInfo(ctx, <HTMLElement>hitResult.offsetNode, 0);\n\t\t\t}\n\t\t}\n\n\t\treturn new UnknownHitTestResult(<HTMLElement>hitResult.offsetNode);\n\t}\n\n\tprivate static _snapToSoftTabBoundary(position: Position, viewModel: IViewModel): Position {\n\t\tconst lineContent = viewModel.getLineContent(position.lineNumber);\n\t\tconst { tabSize } = viewModel.model.getOptions();\n\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, Direction.Nearest);\n\t\tif (newPosition !== -1) {\n\t\t\treturn new Position(position.lineNumber, newPosition + 1);\n\t\t}\n\t\treturn position;\n\t}\n\n\tpublic static doHitTest(ctx: HitTestContext, request: BareHitTestRequest): HitTestResult {\n\n\t\tlet result: HitTestResult = new UnknownHitTestResult();\n\t\tif (typeof (<any>ctx.viewDomNode.ownerDocument).caretRangeFromPoint === 'function') {\n\t\t\tresult = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n\t\t} else if ((<any>ctx.viewDomNode.ownerDocument).caretPositionFromPoint) {\n\t\t\tresult = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n\t\t}\n\t\tif (result.type === HitTestResultType.Content) {\n\t\t\tconst injectedText = ctx.viewModel.getInjectedTextAt(result.position);\n\n\t\t\tconst normalizedPosition = ctx.viewModel.normalizePosition(result.position, PositionAffinity.None);\n\t\t\tif (injectedText || !normalizedPosition.equals(result.position)) {\n\t\t\t\tresult = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction shadowCaretRangeFromPoint(shadowRoot: ShadowRoot, x: number, y: number): Range {\n\tconst range = document.createRange();\n\n\t// Get the element under the point\n\tlet el: Element | null = (<any>shadowRoot).elementFromPoint(x, y);\n\n\tif (el !== null) {\n\t\t// Get the last child of the element until its firstChild is a text node\n\t\t// This assumes that the pointer is on the right of the line, out of the tokens\n\t\t// and that we want to get the offset of the last token of the line\n\t\twhile (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n\t\t\tel = <Element>el.lastChild;\n\t\t}\n\n\t\t// Grab its rect\n\t\tconst rect = el.getBoundingClientRect();\n\n\t\t// And its font (the computed shorthand font property might be empty, see #3217)\n\t\tconst elWindow = dom.getWindow(el);\n\t\tconst fontStyle = elWindow.getComputedStyle(el, null).getPropertyValue('font-style');\n\t\tconst fontVariant = elWindow.getComputedStyle(el, null).getPropertyValue('font-variant');\n\t\tconst fontWeight = elWindow.getComputedStyle(el, null).getPropertyValue('font-weight');\n\t\tconst fontSize = elWindow.getComputedStyle(el, null).getPropertyValue('font-size');\n\t\tconst lineHeight = elWindow.getComputedStyle(el, null).getPropertyValue('line-height');\n\t\tconst fontFamily = elWindow.getComputedStyle(el, null).getPropertyValue('font-family');\n\t\tconst font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\n\n\t\t// And also its txt content\n\t\tconst text = (el as any).innerText;\n\n\t\t// Position the pixel cursor at the left of the element\n\t\tlet pixelCursor = rect.left;\n\t\tlet offset = 0;\n\t\tlet step: number;\n\n\t\t// If the point is on the right of the box put the cursor after the last character\n\t\tif (x > rect.left + rect.width) {\n\t\t\toffset = text.length;\n\t\t} else {\n\t\t\tconst charWidthReader = CharWidthReader.getInstance();\n\t\t\t// Goes through all the characters of the innerText, and checks if the x of the point\n\t\t\t// belongs to the character.\n\t\t\tfor (let i = 0; i < text.length + 1; i++) {\n\t\t\t\t// The step is half the width of the character\n\t\t\t\tstep = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n\t\t\t\t// Move to the center of the character\n\t\t\t\tpixelCursor += step;\n\t\t\t\t// If the x of the point is smaller that the position of the cursor, the point is over that character\n\t\t\t\tif (x < pixelCursor) {\n\t\t\t\t\toffset = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Move between the current character and the next\n\t\t\t\tpixelCursor += step;\n\t\t\t}\n\t\t}\n\n\t\t// Creates a range with the text node of the element and set the offset found\n\t\trange.setStart(el.firstChild!, offset);\n\t\trange.setEnd(el.firstChild!, offset);\n\t}\n\n\treturn range;\n}\n\nclass CharWidthReader {\n\tprivate static _INSTANCE: CharWidthReader | null = null;\n\n\tpublic static getInstance(): CharWidthReader {\n\t\tif (!CharWidthReader._INSTANCE) {\n\t\t\tCharWidthReader._INSTANCE = new CharWidthReader();\n\t\t}\n\t\treturn CharWidthReader._INSTANCE;\n\t}\n\n\tprivate readonly _cache: { [cacheKey: string]: number };\n\tprivate readonly _canvas: HTMLCanvasElement;\n\n\tprivate constructor() {\n\t\tthis._cache = {};\n\t\tthis._canvas = document.createElement('canvas');\n\t}\n\n\tpublic getCharWidth(char: string, font: string): number {\n\t\tconst cacheKey = char + font;\n\t\tif (this._cache[cacheKey]) {\n\t\t\treturn this._cache[cacheKey];\n\t\t}\n\n\t\tconst context = this._canvas.getContext('2d')!;\n\t\tcontext.font = font;\n\t\tconst metrics = context.measureText(char);\n\t\tconst width = metrics.width;\n\t\tthis._cache[cacheKey] = width;\n\t\treturn width;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["HitTestResultType", "HitTestResult", "lineNumber", "maxLineColumn", "lineWidth", "visibleRange"]
}
