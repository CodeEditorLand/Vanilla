{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/controller/mouseTarget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../base/browser/dom.js\";\nimport { Lazy } from \"../../../base/common/lazy.js\";\nimport type { Mutable } from \"../../../base/common/types.js\";\nimport {\n\ttype EditorLayoutInfo,\n\tEditorOption,\n} from \"../../common/config/editorOptions.js\";\nimport { CursorColumns } from \"../../common/core/cursorColumns.js\";\nimport { Position } from \"../../common/core/position.js\";\nimport { Range as EditorRange } from \"../../common/core/range.js\";\nimport {\n\tAtomicTabMoveOperations,\n\tDirection,\n} from \"../../common/cursor/cursorAtomicMoveOperations.js\";\nimport { PositionAffinity } from \"../../common/model.js\";\nimport type { InjectedText } from \"../../common/modelLineProjectionData.js\";\nimport type { IViewModel } from \"../../common/viewModel.js\";\nimport type { ViewContext } from \"../../common/viewModel/viewContext.js\";\nimport {\n\ttype IMouseTarget,\n\ttype IMouseTargetContentEmpty,\n\ttype IMouseTargetContentEmptyData,\n\ttype IMouseTargetContentText,\n\ttype IMouseTargetContentTextData,\n\ttype IMouseTargetContentWidget,\n\ttype IMouseTargetMargin,\n\ttype IMouseTargetMarginData,\n\ttype IMouseTargetOutsideEditor,\n\ttype IMouseTargetOverlayWidget,\n\ttype IMouseTargetScrollbar,\n\ttype IMouseTargetTextarea,\n\ttype IMouseTargetUnknown,\n\ttype IMouseTargetViewZone,\n\ttype IMouseTargetViewZoneData,\n\tMouseTargetType,\n} from \"../editorBrowser.js\";\nimport {\n\ttype ClientCoordinates,\n\ttype CoordinatesRelativeToEditor,\n\ttype EditorMouseEvent,\n\ttype EditorPagePosition,\n\tPageCoordinates,\n} from \"../editorDom.js\";\nimport type { HorizontalPosition } from \"../view/renderingContext.js\";\nimport { PartFingerprint, PartFingerprints } from \"../view/viewPart.js\";\nimport { ViewLine } from \"../viewParts/lines/viewLine.js\";\nimport type { IViewCursorRenderData } from \"../viewParts/viewCursors/viewCursor.js\";\nimport type { IPointerHandlerHelper } from \"./mouseHandler.js\";\n\nenum HitTestResultType {\n\tUnknown = 0,\n\tContent = 1,\n}\n\nclass UnknownHitTestResult {\n\treadonly type = HitTestResultType.Unknown;\n\tconstructor(readonly hitTarget: HTMLElement | null = null) {}\n}\n\nclass ContentHitTestResult {\n\treadonly type = HitTestResultType.Content;\n\n\tget hitTarget(): HTMLElement {\n\t\treturn this.spanNode;\n\t}\n\n\tconstructor(\n\t\treadonly position: Position,\n\t\treadonly spanNode: HTMLElement,\n\t\treadonly injectedText: InjectedText | null,\n\t) {}\n}\n\ntype HitTestResult = UnknownHitTestResult | ContentHitTestResult;\n\nnamespace HitTestResult {\n\texport function createFromDOMInfo(\n\t\tctx: HitTestContext,\n\t\tspanNode: HTMLElement,\n\t\toffset: number,\n\t): HitTestResult {\n\t\tconst position = ctx.getPositionFromDOMInfo(spanNode, offset);\n\t\tif (position) {\n\t\t\treturn new ContentHitTestResult(position, spanNode, null);\n\t\t}\n\t\treturn new UnknownHitTestResult(spanNode);\n\t}\n}\n\nexport class PointerHandlerLastRenderData {\n\tconstructor(\n\t\tpublic readonly lastViewCursorsRenderData: IViewCursorRenderData[],\n\t\tpublic readonly lastTextareaPosition: Position | null,\n\t) {}\n}\n\nexport class MouseTarget {\n\tprivate static _deduceRage(position: Position): EditorRange;\n\tprivate static _deduceRage(\n\t\tposition: Position,\n\t\trange: EditorRange | null,\n\t): EditorRange;\n\tprivate static _deduceRage(position: Position | null): EditorRange | null;\n\tprivate static _deduceRage(\n\t\tposition: Position | null,\n\t\trange: EditorRange | null = null,\n\t): EditorRange | null {\n\t\tif (!range && position) {\n\t\t\treturn new EditorRange(\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column,\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column,\n\t\t\t);\n\t\t}\n\t\treturn range ?? null;\n\t}\n\tpublic static createUnknown(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tposition: Position | null,\n\t): IMouseTargetUnknown {\n\t\treturn {\n\t\t\ttype: MouseTargetType.UNKNOWN,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition,\n\t\t\trange: this._deduceRage(position),\n\t\t};\n\t}\n\tpublic static createTextarea(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t): IMouseTargetTextarea {\n\t\treturn {\n\t\t\ttype: MouseTargetType.TEXTAREA,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition: null,\n\t\t\trange: null,\n\t\t};\n\t}\n\tpublic static createMargin(\n\t\ttype:\n\t\t\t| MouseTargetType.GUTTER_GLYPH_MARGIN\n\t\t\t| MouseTargetType.GUTTER_LINE_NUMBERS\n\t\t\t| MouseTargetType.GUTTER_LINE_DECORATIONS,\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tposition: Position,\n\t\trange: EditorRange,\n\t\tdetail: IMouseTargetMarginData,\n\t): IMouseTargetMargin {\n\t\treturn { type, element, mouseColumn, position, range, detail };\n\t}\n\tpublic static createViewZone(\n\t\ttype:\n\t\t\t| MouseTargetType.GUTTER_VIEW_ZONE\n\t\t\t| MouseTargetType.CONTENT_VIEW_ZONE,\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tposition: Position,\n\t\tdetail: IMouseTargetViewZoneData,\n\t): IMouseTargetViewZone {\n\t\treturn {\n\t\t\ttype,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition,\n\t\t\trange: this._deduceRage(position),\n\t\t\tdetail,\n\t\t};\n\t}\n\tpublic static createContentText(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tposition: Position,\n\t\trange: EditorRange | null,\n\t\tdetail: IMouseTargetContentTextData,\n\t): IMouseTargetContentText {\n\t\treturn {\n\t\t\ttype: MouseTargetType.CONTENT_TEXT,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition,\n\t\t\trange: this._deduceRage(position, range),\n\t\t\tdetail,\n\t\t};\n\t}\n\tpublic static createContentEmpty(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tposition: Position,\n\t\tdetail: IMouseTargetContentEmptyData,\n\t): IMouseTargetContentEmpty {\n\t\treturn {\n\t\t\ttype: MouseTargetType.CONTENT_EMPTY,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition,\n\t\t\trange: this._deduceRage(position),\n\t\t\tdetail,\n\t\t};\n\t}\n\tpublic static createContentWidget(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tdetail: string,\n\t): IMouseTargetContentWidget {\n\t\treturn {\n\t\t\ttype: MouseTargetType.CONTENT_WIDGET,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition: null,\n\t\t\trange: null,\n\t\t\tdetail,\n\t\t};\n\t}\n\tpublic static createScrollbar(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tposition: Position,\n\t): IMouseTargetScrollbar {\n\t\treturn {\n\t\t\ttype: MouseTargetType.SCROLLBAR,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition,\n\t\t\trange: this._deduceRage(position),\n\t\t};\n\t}\n\tpublic static createOverlayWidget(\n\t\telement: HTMLElement | null,\n\t\tmouseColumn: number,\n\t\tdetail: string,\n\t): IMouseTargetOverlayWidget {\n\t\treturn {\n\t\t\ttype: MouseTargetType.OVERLAY_WIDGET,\n\t\t\telement,\n\t\t\tmouseColumn,\n\t\t\tposition: null,\n\t\t\trange: null,\n\t\t\tdetail,\n\t\t};\n\t}\n\tpublic static createOutsideEditor(\n\t\tmouseColumn: number,\n\t\tposition: Position,\n\t\toutsidePosition: \"above\" | \"below\" | \"left\" | \"right\",\n\t\toutsideDistance: number,\n\t): IMouseTargetOutsideEditor {\n\t\treturn {\n\t\t\ttype: MouseTargetType.OUTSIDE_EDITOR,\n\t\t\telement: null,\n\t\t\tmouseColumn,\n\t\t\tposition,\n\t\t\trange: this._deduceRage(position),\n\t\t\toutsidePosition,\n\t\t\toutsideDistance,\n\t\t};\n\t}\n\n\tprivate static _typeToString(type: MouseTargetType): string {\n\t\tif (type === MouseTargetType.TEXTAREA) {\n\t\t\treturn \"TEXTAREA\";\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_GLYPH_MARGIN) {\n\t\t\treturn \"GUTTER_GLYPH_MARGIN\";\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_LINE_NUMBERS) {\n\t\t\treturn \"GUTTER_LINE_NUMBERS\";\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_LINE_DECORATIONS) {\n\t\t\treturn \"GUTTER_LINE_DECORATIONS\";\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_VIEW_ZONE) {\n\t\t\treturn \"GUTTER_VIEW_ZONE\";\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn \"CONTENT_TEXT\";\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\treturn \"CONTENT_EMPTY\";\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_VIEW_ZONE) {\n\t\t\treturn \"CONTENT_VIEW_ZONE\";\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_WIDGET) {\n\t\t\treturn \"CONTENT_WIDGET\";\n\t\t}\n\t\tif (type === MouseTargetType.OVERVIEW_RULER) {\n\t\t\treturn \"OVERVIEW_RULER\";\n\t\t}\n\t\tif (type === MouseTargetType.SCROLLBAR) {\n\t\t\treturn \"SCROLLBAR\";\n\t\t}\n\t\tif (type === MouseTargetType.OVERLAY_WIDGET) {\n\t\t\treturn \"OVERLAY_WIDGET\";\n\t\t}\n\t\treturn \"UNKNOWN\";\n\t}\n\n\tpublic static toString(target: IMouseTarget): string {\n\t\treturn (\n\t\t\tthis._typeToString(target.type) +\n\t\t\t\": \" +\n\t\t\ttarget.position +\n\t\t\t\" - \" +\n\t\t\ttarget.range +\n\t\t\t\" - \" +\n\t\t\tJSON.stringify((<any>target).detail)\n\t\t);\n\t}\n}\n\nclass ElementPath {\n\tpublic static isTextArea(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length === 2 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[1] === PartFingerprint.TextArea\n\t\t);\n\t}\n\n\tpublic static isChildOfViewLines(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 4 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[3] === PartFingerprint.ViewLines\n\t\t);\n\t}\n\n\tpublic static isStrictChildOfViewLines(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length > 4 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[3] === PartFingerprint.ViewLines\n\t\t);\n\t}\n\n\tpublic static isChildOfScrollableElement(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[1] === PartFingerprint.ScrollableElement\n\t\t);\n\t}\n\n\tpublic static isChildOfMinimap(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[1] === PartFingerprint.Minimap\n\t\t);\n\t}\n\n\tpublic static isChildOfContentWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 4 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[3] === PartFingerprint.ContentWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverflowGuard(path: Uint8Array): boolean {\n\t\treturn path.length >= 1 && path[0] === PartFingerprint.OverflowGuard;\n\t}\n\n\tpublic static isChildOfOverflowingContentWidgets(\n\t\tpath: Uint8Array,\n\t): boolean {\n\t\treturn (\n\t\t\tpath.length >= 1 &&\n\t\t\tpath[0] === PartFingerprint.OverflowingContentWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverlayWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2 &&\n\t\t\tpath[0] === PartFingerprint.OverflowGuard &&\n\t\t\tpath[1] === PartFingerprint.OverlayWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverflowingOverlayWidgets(\n\t\tpath: Uint8Array,\n\t): boolean {\n\t\treturn (\n\t\t\tpath.length >= 1 &&\n\t\t\tpath[0] === PartFingerprint.OverflowingOverlayWidgets\n\t\t);\n\t}\n}\n\nexport class HitTestContext {\n\tpublic readonly viewModel: IViewModel;\n\tpublic readonly layoutInfo: EditorLayoutInfo;\n\tpublic readonly viewDomNode: HTMLElement;\n\tpublic readonly lineHeight: number;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly lastRenderData: PointerHandlerLastRenderData;\n\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _viewHelper: IPointerHandlerHelper;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tviewHelper: IPointerHandlerHelper,\n\t\tlastRenderData: PointerHandlerLastRenderData,\n\t) {\n\t\tthis.viewModel = context.viewModel;\n\t\tconst options = context.configuration.options;\n\t\tthis.layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis.viewDomNode = viewHelper.viewDomNode;\n\t\tthis.lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.typicalHalfwidthCharacterWidth = options.get(\n\t\t\tEditorOption.fontInfo,\n\t\t).typicalHalfwidthCharacterWidth;\n\t\tthis.lastRenderData = lastRenderData;\n\t\tthis._context = context;\n\t\tthis._viewHelper = viewHelper;\n\t}\n\n\tpublic getZoneAtCoord(\n\t\tmouseVerticalOffset: number,\n\t): IMouseTargetViewZoneData | null {\n\t\treturn HitTestContext.getZoneAtCoord(\n\t\t\tthis._context,\n\t\t\tmouseVerticalOffset,\n\t\t);\n\t}\n\n\tpublic static getZoneAtCoord(\n\t\tcontext: ViewContext,\n\t\tmouseVerticalOffset: number,\n\t): IMouseTargetViewZoneData | null {\n\t\t// The target is either a view zone or the empty space after the last view-line\n\t\tconst viewZoneWhitespace =\n\t\t\tcontext.viewLayout.getWhitespaceAtVerticalOffset(\n\t\t\t\tmouseVerticalOffset,\n\t\t\t);\n\n\t\tif (viewZoneWhitespace) {\n\t\t\tconst viewZoneMiddle =\n\t\t\t\tviewZoneWhitespace.verticalOffset +\n\t\t\t\tviewZoneWhitespace.height / 2;\n\t\t\tconst lineCount = context.viewModel.getLineCount();\n\t\t\tlet positionBefore: Position | null = null;\n\t\t\tlet position: Position | null;\n\t\t\tlet positionAfter: Position | null = null;\n\n\t\t\tif (viewZoneWhitespace.afterLineNumber !== lineCount) {\n\t\t\t\t// There are more lines after this view zone\n\t\t\t\tpositionAfter = new Position(\n\t\t\t\t\tviewZoneWhitespace.afterLineNumber + 1,\n\t\t\t\t\t1,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (viewZoneWhitespace.afterLineNumber > 0) {\n\t\t\t\t// There are more lines above this view zone\n\t\t\t\tpositionBefore = new Position(\n\t\t\t\t\tviewZoneWhitespace.afterLineNumber,\n\t\t\t\t\tcontext.viewModel.getLineMaxColumn(\n\t\t\t\t\t\tviewZoneWhitespace.afterLineNumber,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (positionAfter === null) {\n\t\t\t\tposition = positionBefore;\n\t\t\t} else if (positionBefore === null) {\n\t\t\t\tposition = positionAfter;\n\t\t\t} else if (mouseVerticalOffset < viewZoneMiddle) {\n\t\t\t\tposition = positionBefore;\n\t\t\t} else {\n\t\t\t\tposition = positionAfter;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tviewZoneId: viewZoneWhitespace.id,\n\t\t\t\tafterLineNumber: viewZoneWhitespace.afterLineNumber,\n\t\t\t\tpositionBefore: positionBefore,\n\t\t\t\tpositionAfter: positionAfter,\n\t\t\t\tposition: position!,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getFullLineRangeAtCoord(mouseVerticalOffset: number): {\n\t\trange: EditorRange;\n\t\tisAfterLines: boolean;\n\t} {\n\t\tif (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n\t\t\t// Below the last line\n\t\t\tconst lineNumber = this._context.viewModel.getLineCount();\n\t\t\tconst maxLineColumn =\n\t\t\t\tthis._context.viewModel.getLineMaxColumn(lineNumber);\n\t\t\treturn {\n\t\t\t\trange: new EditorRange(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tmaxLineColumn,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tmaxLineColumn,\n\t\t\t\t),\n\t\t\t\tisAfterLines: true,\n\t\t\t};\n\t\t}\n\n\t\tconst lineNumber =\n\t\t\tthis._context.viewLayout.getLineNumberAtVerticalOffset(\n\t\t\t\tmouseVerticalOffset,\n\t\t\t);\n\t\tconst maxLineColumn =\n\t\t\tthis._context.viewModel.getLineMaxColumn(lineNumber);\n\t\treturn {\n\t\t\trange: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n\t\t\tisAfterLines: false,\n\t\t};\n\t}\n\n\tpublic getLineNumberAtVerticalOffset(mouseVerticalOffset: number): number {\n\t\treturn this._context.viewLayout.getLineNumberAtVerticalOffset(\n\t\t\tmouseVerticalOffset,\n\t\t);\n\t}\n\n\tpublic isAfterLines(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n\t}\n\n\tpublic isInTopPadding(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n\t}\n\n\tpublic isInBottomPadding(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n\t}\n\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number): number {\n\t\treturn this._context.viewLayout.getVerticalOffsetForLineNumber(\n\t\t\tlineNumber,\n\t\t);\n\t}\n\n\tpublic findAttribute(element: Element, attr: string): string | null {\n\t\treturn HitTestContext._findAttribute(\n\t\t\telement,\n\t\t\tattr,\n\t\t\tthis._viewHelper.viewDomNode,\n\t\t);\n\t}\n\n\tprivate static _findAttribute(\n\t\telement: Element,\n\t\tattr: string,\n\t\tstopAt: Element,\n\t): string | null {\n\t\twhile (element && element !== element.ownerDocument.body) {\n\t\t\tif (element.hasAttribute && element.hasAttribute(attr)) {\n\t\t\t\treturn element.getAttribute(attr);\n\t\t\t}\n\t\t\tif (element === stopAt) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telement = <Element>element.parentNode;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getLineWidth(lineNumber: number): number {\n\t\treturn this._viewHelper.getLineWidth(lineNumber);\n\t}\n\n\tpublic visibleRangeForPosition(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t): HorizontalPosition | null {\n\t\treturn this._viewHelper.visibleRangeForPosition(lineNumber, column);\n\t}\n\n\tpublic getPositionFromDOMInfo(\n\t\tspanNode: HTMLElement,\n\t\toffset: number,\n\t): Position | null {\n\t\treturn this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n\t}\n\n\tpublic getCurrentScrollTop(): number {\n\t\treturn this._context.viewLayout.getCurrentScrollTop();\n\t}\n\n\tpublic getCurrentScrollLeft(): number {\n\t\treturn this._context.viewLayout.getCurrentScrollLeft();\n\t}\n}\n\nabstract class BareHitTestRequest {\n\tpublic readonly editorPos: EditorPagePosition;\n\tpublic readonly pos: PageCoordinates;\n\tpublic readonly relativePos: CoordinatesRelativeToEditor;\n\tpublic readonly mouseVerticalOffset: number;\n\tpublic readonly isInMarginArea: boolean;\n\tpublic readonly isInContentArea: boolean;\n\tpublic readonly mouseContentHorizontalOffset: number;\n\n\tprotected readonly mouseColumn: number;\n\n\tconstructor(\n\t\tctx: HitTestContext,\n\t\teditorPos: EditorPagePosition,\n\t\tpos: PageCoordinates,\n\t\trelativePos: CoordinatesRelativeToEditor,\n\t) {\n\t\tthis.editorPos = editorPos;\n\t\tthis.pos = pos;\n\t\tthis.relativePos = relativePos;\n\n\t\tthis.mouseVerticalOffset = Math.max(\n\t\t\t0,\n\t\t\tctx.getCurrentScrollTop() + this.relativePos.y,\n\t\t);\n\t\tthis.mouseContentHorizontalOffset =\n\t\t\tctx.getCurrentScrollLeft() +\n\t\t\tthis.relativePos.x -\n\t\t\tctx.layoutInfo.contentLeft;\n\t\tthis.isInMarginArea =\n\t\t\tthis.relativePos.x < ctx.layoutInfo.contentLeft &&\n\t\t\tthis.relativePos.x >= ctx.layoutInfo.glyphMarginLeft;\n\t\tthis.isInContentArea = !this.isInMarginArea;\n\t\tthis.mouseColumn = Math.max(\n\t\t\t0,\n\t\t\tMouseTargetFactory._getMouseColumn(\n\t\t\t\tthis.mouseContentHorizontalOffset,\n\t\t\t\tctx.typicalHalfwidthCharacterWidth,\n\t\t\t),\n\t\t);\n\t}\n}\n\nclass HitTestRequest extends BareHitTestRequest {\n\tprivate readonly _ctx: HitTestContext;\n\tprivate readonly _eventTarget: HTMLElement | null;\n\tpublic readonly hitTestResult = new Lazy(() =>\n\t\tMouseTargetFactory.doHitTest(this._ctx, this),\n\t);\n\tprivate _useHitTestTarget: boolean;\n\tprivate _targetPathCacheElement: HTMLElement | null = null;\n\tprivate _targetPathCacheValue: Uint8Array = new Uint8Array(0);\n\n\tpublic get target(): HTMLElement | null {\n\t\tif (this._useHitTestTarget) {\n\t\t\treturn this.hitTestResult.value.hitTarget;\n\t\t}\n\t\treturn this._eventTarget;\n\t}\n\n\tpublic get targetPath(): Uint8Array {\n\t\tif (this._targetPathCacheElement !== this.target) {\n\t\t\tthis._targetPathCacheElement = this.target;\n\t\t\tthis._targetPathCacheValue = PartFingerprints.collect(\n\t\t\t\tthis.target,\n\t\t\t\tthis._ctx.viewDomNode,\n\t\t\t);\n\t\t}\n\t\treturn this._targetPathCacheValue;\n\t}\n\n\tconstructor(\n\t\tctx: HitTestContext,\n\t\teditorPos: EditorPagePosition,\n\t\tpos: PageCoordinates,\n\t\trelativePos: CoordinatesRelativeToEditor,\n\t\teventTarget: HTMLElement | null,\n\t) {\n\t\tsuper(ctx, editorPos, pos, relativePos);\n\t\tthis._ctx = ctx;\n\t\tthis._eventTarget = eventTarget;\n\n\t\t// If no event target is passed in, we will use the hit test target\n\t\tconst hasEventTarget = Boolean(this._eventTarget);\n\t\tthis._useHitTestTarget = !hasEventTarget;\n\t}\n\n\tpublic override toString(): string {\n\t\treturn `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? (<HTMLElement>this.target).outerHTML : null}`;\n\t}\n\n\tpublic get wouldBenefitFromHitTestTargetSwitch(): boolean {\n\t\treturn (\n\t\t\t!this._useHitTestTarget &&\n\t\t\tthis.hitTestResult.value.hitTarget !== null &&\n\t\t\tthis.target !== this.hitTestResult.value.hitTarget\n\t\t);\n\t}\n\n\tpublic switchToHitTestTarget(): void {\n\t\tthis._useHitTestTarget = true;\n\t}\n\n\tprivate _getMouseColumn(position: Position | null = null): number {\n\t\tif (\n\t\t\tposition &&\n\t\t\tposition.column <\n\t\t\t\tthis._ctx.viewModel.getLineMaxColumn(position.lineNumber)\n\t\t) {\n\t\t\t// Most likely, the line contains foreign decorations...\n\t\t\treturn (\n\t\t\t\tCursorColumns.visibleColumnFromColumn(\n\t\t\t\t\tthis._ctx.viewModel.getLineContent(position.lineNumber),\n\t\t\t\t\tposition.column,\n\t\t\t\t\tthis._ctx.viewModel.model.getOptions().tabSize,\n\t\t\t\t) + 1\n\t\t\t);\n\t\t}\n\t\treturn this.mouseColumn;\n\t}\n\n\tpublic fulfillUnknown(\n\t\tposition: Position | null = null,\n\t): IMouseTargetUnknown {\n\t\treturn MouseTarget.createUnknown(\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(position),\n\t\t\tposition,\n\t\t);\n\t}\n\tpublic fulfillTextarea(): IMouseTargetTextarea {\n\t\treturn MouseTarget.createTextarea(this.target, this._getMouseColumn());\n\t}\n\tpublic fulfillMargin(\n\t\ttype:\n\t\t\t| MouseTargetType.GUTTER_GLYPH_MARGIN\n\t\t\t| MouseTargetType.GUTTER_LINE_NUMBERS\n\t\t\t| MouseTargetType.GUTTER_LINE_DECORATIONS,\n\t\tposition: Position,\n\t\trange: EditorRange,\n\t\tdetail: IMouseTargetMarginData,\n\t): IMouseTargetMargin {\n\t\treturn MouseTarget.createMargin(\n\t\t\ttype,\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(position),\n\t\t\tposition,\n\t\t\trange,\n\t\t\tdetail,\n\t\t);\n\t}\n\tpublic fulfillViewZone(\n\t\ttype:\n\t\t\t| MouseTargetType.GUTTER_VIEW_ZONE\n\t\t\t| MouseTargetType.CONTENT_VIEW_ZONE,\n\t\tposition: Position,\n\t\tdetail: IMouseTargetViewZoneData,\n\t): IMouseTargetViewZone {\n\t\treturn MouseTarget.createViewZone(\n\t\t\ttype,\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(position),\n\t\t\tposition,\n\t\t\tdetail,\n\t\t);\n\t}\n\tpublic fulfillContentText(\n\t\tposition: Position,\n\t\trange: EditorRange | null,\n\t\tdetail: IMouseTargetContentTextData,\n\t): IMouseTargetContentText {\n\t\treturn MouseTarget.createContentText(\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(position),\n\t\t\tposition,\n\t\t\trange,\n\t\t\tdetail,\n\t\t);\n\t}\n\tpublic fulfillContentEmpty(\n\t\tposition: Position,\n\t\tdetail: IMouseTargetContentEmptyData,\n\t): IMouseTargetContentEmpty {\n\t\treturn MouseTarget.createContentEmpty(\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(position),\n\t\t\tposition,\n\t\t\tdetail,\n\t\t);\n\t}\n\tpublic fulfillContentWidget(detail: string): IMouseTargetContentWidget {\n\t\treturn MouseTarget.createContentWidget(\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(),\n\t\t\tdetail,\n\t\t);\n\t}\n\tpublic fulfillScrollbar(position: Position): IMouseTargetScrollbar {\n\t\treturn MouseTarget.createScrollbar(\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(position),\n\t\t\tposition,\n\t\t);\n\t}\n\tpublic fulfillOverlayWidget(detail: string): IMouseTargetOverlayWidget {\n\t\treturn MouseTarget.createOverlayWidget(\n\t\t\tthis.target,\n\t\t\tthis._getMouseColumn(),\n\t\t\tdetail,\n\t\t);\n\t}\n}\n\ninterface ResolvedHitTestRequest extends HitTestRequest {\n\treadonly target: HTMLElement;\n}\n\nconst EMPTY_CONTENT_AFTER_LINES: IMouseTargetContentEmptyData = {\n\tisAfterLines: true,\n};\n\nfunction createEmptyContentDataInLines(\n\thorizontalDistanceToText: number,\n): IMouseTargetContentEmptyData {\n\treturn {\n\t\tisAfterLines: false,\n\t\thorizontalDistanceToText: horizontalDistanceToText,\n\t};\n}\n\nexport class MouseTargetFactory {\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _viewHelper: IPointerHandlerHelper;\n\n\tconstructor(context: ViewContext, viewHelper: IPointerHandlerHelper) {\n\t\tthis._context = context;\n\t\tthis._viewHelper = viewHelper;\n\t}\n\n\tpublic mouseTargetIsWidget(e: EditorMouseEvent): boolean {\n\t\tconst t = <Element>e.target;\n\t\tconst path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n\n\t\t// Is it a content widget?\n\t\tif (\n\t\t\tElementPath.isChildOfContentWidgets(path) ||\n\t\t\tElementPath.isChildOfOverflowingContentWidgets(path)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Is it an overlay widget?\n\t\tif (\n\t\t\tElementPath.isChildOfOverlayWidgets(path) ||\n\t\t\tElementPath.isChildOfOverflowingOverlayWidgets(path)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic createMouseTarget(\n\t\tlastRenderData: PointerHandlerLastRenderData,\n\t\teditorPos: EditorPagePosition,\n\t\tpos: PageCoordinates,\n\t\trelativePos: CoordinatesRelativeToEditor,\n\t\ttarget: HTMLElement | null,\n\t): IMouseTarget {\n\t\tconst ctx = new HitTestContext(\n\t\t\tthis._context,\n\t\t\tthis._viewHelper,\n\t\t\tlastRenderData,\n\t\t);\n\t\tconst request = new HitTestRequest(\n\t\t\tctx,\n\t\t\teditorPos,\n\t\t\tpos,\n\t\t\trelativePos,\n\t\t\ttarget,\n\t\t);\n\t\ttry {\n\t\t\tconst r = MouseTargetFactory._createMouseTarget(ctx, request);\n\n\t\t\tif (r.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\t\t// Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n\t\t\t\tif (ctx.stickyTabStops && r.position !== null) {\n\t\t\t\t\tconst position = MouseTargetFactory._snapToSoftTabBoundary(\n\t\t\t\t\t\tr.position,\n\t\t\t\t\t\tctx.viewModel,\n\t\t\t\t\t);\n\t\t\t\t\tconst range = EditorRange.fromPositions(\n\t\t\t\t\t\tposition,\n\t\t\t\t\t\tposition,\n\t\t\t\t\t).plusRange(r.range);\n\t\t\t\t\treturn request.fulfillContentText(\n\t\t\t\t\t\tposition,\n\t\t\t\t\t\trange,\n\t\t\t\t\t\tr.detail,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log(MouseTarget.toString(r));\n\t\t\treturn r;\n\t\t} catch (err) {\n\t\t\t// console.log(err);\n\t\t\treturn request.fulfillUnknown();\n\t\t}\n\t}\n\n\tprivate static _createMouseTarget(\n\t\tctx: HitTestContext,\n\t\trequest: HitTestRequest,\n\t): IMouseTarget {\n\t\t// console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n\n\t\tif (request.target === null) {\n\t\t\t// No target\n\t\t\treturn request.fulfillUnknown();\n\t\t}\n\n\t\t// we know for a fact that request.target is not null\n\t\tconst resolvedRequest = <ResolvedHitTestRequest>request;\n\n\t\tlet result: IMouseTarget | null = null;\n\n\t\tif (\n\t\t\t!ElementPath.isChildOfOverflowGuard(request.targetPath) &&\n\t\t\t!ElementPath.isChildOfOverflowingContentWidgets(\n\t\t\t\trequest.targetPath,\n\t\t\t) &&\n\t\t\t!ElementPath.isChildOfOverflowingOverlayWidgets(request.targetPath)\n\t\t) {\n\t\t\t// We only render dom nodes inside the overflow guard or in the overflowing content widgets\n\t\t\tresult = result || request.fulfillUnknown();\n\t\t}\n\n\t\tresult =\n\t\t\tresult ||\n\t\t\tMouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult ||\n\t\t\tMouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult ||\n\t\t\tMouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult ||\n\t\t\tMouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult ||\n\t\t\tMouseTargetFactory._hitTestViewLines(ctx, resolvedRequest);\n\t\tresult =\n\t\t\tresult ||\n\t\t\tMouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n\n\t\treturn result || request.fulfillUnknown();\n\t}\n\n\tprivate static _hitTestContentWidget(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\t// Is it a content widget?\n\t\tif (\n\t\t\tElementPath.isChildOfContentWidgets(request.targetPath) ||\n\t\t\tElementPath.isChildOfOverflowingContentWidgets(request.targetPath)\n\t\t) {\n\t\t\tconst widgetId = ctx.findAttribute(request.target, \"widgetId\");\n\t\t\tif (widgetId) {\n\t\t\t\treturn request.fulfillContentWidget(widgetId);\n\t\t\t} else {\n\t\t\t\treturn request.fulfillUnknown();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestOverlayWidget(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\t// Is it an overlay widget?\n\t\tif (\n\t\t\tElementPath.isChildOfOverlayWidgets(request.targetPath) ||\n\t\t\tElementPath.isChildOfOverflowingOverlayWidgets(request.targetPath)\n\t\t) {\n\t\t\tconst widgetId = ctx.findAttribute(request.target, \"widgetId\");\n\t\t\tif (widgetId) {\n\t\t\t\treturn request.fulfillOverlayWidget(widgetId);\n\t\t\t} else {\n\t\t\t\treturn request.fulfillUnknown();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewCursor(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\tif (request.target) {\n\t\t\t// Check if we've hit a painted cursor\n\t\t\tconst lastViewCursorsRenderData =\n\t\t\t\tctx.lastRenderData.lastViewCursorsRenderData;\n\n\t\t\tfor (const d of lastViewCursorsRenderData) {\n\t\t\t\tif (request.target === d.domNode) {\n\t\t\t\t\treturn request.fulfillContentText(d.position, null, {\n\t\t\t\t\t\tmightBeForeignElement: false,\n\t\t\t\t\t\tinjectedText: null,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (request.isInContentArea) {\n\t\t\t// Edge has a bug when hit-testing the exact position of a cursor,\n\t\t\t// instead of returning the correct dom node, it returns the\n\t\t\t// first or last rendered view line dom node, therefore help it out\n\t\t\t// and first check if we are on top of a cursor\n\n\t\t\tconst lastViewCursorsRenderData =\n\t\t\t\tctx.lastRenderData.lastViewCursorsRenderData;\n\t\t\tconst mouseContentHorizontalOffset =\n\t\t\t\trequest.mouseContentHorizontalOffset;\n\t\t\tconst mouseVerticalOffset = request.mouseVerticalOffset;\n\n\t\t\tfor (const d of lastViewCursorsRenderData) {\n\t\t\t\tif (mouseContentHorizontalOffset < d.contentLeft) {\n\t\t\t\t\t// mouse position is to the left of the cursor\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n\t\t\t\t\t// mouse position is to the right of the cursor\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(\n\t\t\t\t\td.position.lineNumber,\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tcursorVerticalOffset <= mouseVerticalOffset &&\n\t\t\t\t\tmouseVerticalOffset <= cursorVerticalOffset + d.height\n\t\t\t\t) {\n\t\t\t\t\treturn request.fulfillContentText(d.position, null, {\n\t\t\t\t\t\tmightBeForeignElement: false,\n\t\t\t\t\t\tinjectedText: null,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewZone(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\tconst viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n\t\tif (viewZoneData) {\n\t\t\tconst mouseTargetType = request.isInContentArea\n\t\t\t\t? MouseTargetType.CONTENT_VIEW_ZONE\n\t\t\t\t: MouseTargetType.GUTTER_VIEW_ZONE;\n\t\t\treturn request.fulfillViewZone(\n\t\t\t\tmouseTargetType,\n\t\t\t\tviewZoneData.position,\n\t\t\t\tviewZoneData,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestTextArea(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\t// Is it the textarea?\n\t\tif (ElementPath.isTextArea(request.targetPath)) {\n\t\t\tif (ctx.lastRenderData.lastTextareaPosition) {\n\t\t\t\treturn request.fulfillContentText(\n\t\t\t\t\tctx.lastRenderData.lastTextareaPosition,\n\t\t\t\t\tnull,\n\t\t\t\t\t{ mightBeForeignElement: false, injectedText: null },\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn request.fulfillTextarea();\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestMargin(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\tif (request.isInMarginArea) {\n\t\t\tconst res = ctx.getFullLineRangeAtCoord(\n\t\t\t\trequest.mouseVerticalOffset,\n\t\t\t);\n\t\t\tconst pos = res.range.getStartPosition();\n\t\t\tlet offset = Math.abs(request.relativePos.x);\n\t\t\tconst detail: Mutable<IMouseTargetMarginData> = {\n\t\t\t\tisAfterLines: res.isAfterLines,\n\t\t\t\tglyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n\t\t\t\tglyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n\t\t\t\tlineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n\t\t\t\toffsetX: offset,\n\t\t\t};\n\n\t\t\toffset -= ctx.layoutInfo.glyphMarginLeft;\n\n\t\t\tif (offset <= ctx.layoutInfo.glyphMarginWidth) {\n\t\t\t\t// On the glyph margin\n\t\t\t\tconst modelCoordinate =\n\t\t\t\t\tctx.viewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\t\tres.range.getStartPosition(),\n\t\t\t\t\t);\n\t\t\t\tconst lanes = ctx.viewModel.glyphLanes.getLanesAtLine(\n\t\t\t\t\tmodelCoordinate.lineNumber,\n\t\t\t\t);\n\t\t\t\tdetail.glyphMarginLane =\n\t\t\t\t\tlanes[Math.floor(offset / ctx.lineHeight)];\n\t\t\t\treturn request.fulfillMargin(\n\t\t\t\t\tMouseTargetType.GUTTER_GLYPH_MARGIN,\n\t\t\t\t\tpos,\n\t\t\t\t\tres.range,\n\t\t\t\t\tdetail,\n\t\t\t\t);\n\t\t\t}\n\t\t\toffset -= ctx.layoutInfo.glyphMarginWidth;\n\n\t\t\tif (offset <= ctx.layoutInfo.lineNumbersWidth) {\n\t\t\t\t// On the line numbers\n\t\t\t\treturn request.fulfillMargin(\n\t\t\t\t\tMouseTargetType.GUTTER_LINE_NUMBERS,\n\t\t\t\t\tpos,\n\t\t\t\t\tres.range,\n\t\t\t\t\tdetail,\n\t\t\t\t);\n\t\t\t}\n\t\t\toffset -= ctx.layoutInfo.lineNumbersWidth;\n\n\t\t\t// On the line decorations\n\t\t\treturn request.fulfillMargin(\n\t\t\t\tMouseTargetType.GUTTER_LINE_DECORATIONS,\n\t\t\t\tpos,\n\t\t\t\tres.range,\n\t\t\t\tdetail,\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewLines(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\tif (!ElementPath.isChildOfViewLines(request.targetPath)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n\t\t\treturn request.fulfillContentEmpty(\n\t\t\t\tnew Position(1, 1),\n\t\t\t\tEMPTY_CONTENT_AFTER_LINES,\n\t\t\t);\n\t\t}\n\n\t\t// Check if it is below any lines and any view zones\n\t\tif (\n\t\t\tctx.isAfterLines(request.mouseVerticalOffset) ||\n\t\t\tctx.isInBottomPadding(request.mouseVerticalOffset)\n\t\t) {\n\t\t\t// This most likely indicates it happened after the last view-line\n\t\t\tconst lineCount = ctx.viewModel.getLineCount();\n\t\t\tconst maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n\t\t\treturn request.fulfillContentEmpty(\n\t\t\t\tnew Position(lineCount, maxLineColumn),\n\t\t\t\tEMPTY_CONTENT_AFTER_LINES,\n\t\t\t);\n\t\t}\n\n\t\t// Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n\t\t// See https://github.com/microsoft/vscode/issues/46942\n\t\tif (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n\t\t\tconst lineNumber = ctx.getLineNumberAtVerticalOffset(\n\t\t\t\trequest.mouseVerticalOffset,\n\t\t\t);\n\t\t\tif (ctx.viewModel.getLineLength(lineNumber) === 0) {\n\t\t\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\t\t\t\tconst detail = createEmptyContentDataInLines(\n\t\t\t\t\trequest.mouseContentHorizontalOffset - lineWidth,\n\t\t\t\t);\n\t\t\t\treturn request.fulfillContentEmpty(\n\t\t\t\t\tnew Position(lineNumber, 1),\n\t\t\t\t\tdetail,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\t\t\tif (request.mouseContentHorizontalOffset >= lineWidth) {\n\t\t\t\t// TODO: This is wrong for RTL\n\t\t\t\tconst detail = createEmptyContentDataInLines(\n\t\t\t\t\trequest.mouseContentHorizontalOffset - lineWidth,\n\t\t\t\t);\n\t\t\t\tconst pos = new Position(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tctx.viewModel.getLineMaxColumn(lineNumber),\n\t\t\t\t);\n\t\t\t\treturn request.fulfillContentEmpty(pos, detail);\n\t\t\t}\n\t\t}\n\n\t\t// Do the hit test (if not already done)\n\t\tconst hitTestResult = request.hitTestResult.value;\n\n\t\tif (hitTestResult.type === HitTestResultType.Content) {\n\t\t\treturn MouseTargetFactory.createMouseTargetFromHitTestPosition(\n\t\t\t\tctx,\n\t\t\t\trequest,\n\t\t\t\thitTestResult.spanNode,\n\t\t\t\thitTestResult.position,\n\t\t\t\thitTestResult.injectedText,\n\t\t\t);\n\t\t}\n\n\t\t// We didn't hit content...\n\t\tif (request.wouldBenefitFromHitTestTargetSwitch) {\n\t\t\t// We actually hit something different... Give it one last change by trying again with this new target\n\t\t\trequest.switchToHitTestTarget();\n\t\t\treturn this._createMouseTarget(ctx, request);\n\t\t}\n\n\t\t// We have tried everything...\n\t\treturn request.fulfillUnknown();\n\t}\n\n\tprivate static _hitTestMinimap(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\tif (ElementPath.isChildOfMinimap(request.targetPath)) {\n\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(\n\t\t\t\trequest.mouseVerticalOffset,\n\t\t\t);\n\t\t\tconst maxColumn =\n\t\t\t\tctx.viewModel.getLineMaxColumn(possibleLineNumber);\n\t\t\treturn request.fulfillScrollbar(\n\t\t\t\tnew Position(possibleLineNumber, maxColumn),\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestScrollbarSlider(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\tif (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n\t\t\tif (request.target && request.target.nodeType === 1) {\n\t\t\t\tconst className = request.target.className;\n\t\t\t\tif (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n\t\t\t\t\tconst possibleLineNumber =\n\t\t\t\t\t\tctx.getLineNumberAtVerticalOffset(\n\t\t\t\t\t\t\trequest.mouseVerticalOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst maxColumn =\n\t\t\t\t\t\tctx.viewModel.getLineMaxColumn(possibleLineNumber);\n\t\t\t\t\treturn request.fulfillScrollbar(\n\t\t\t\t\t\tnew Position(possibleLineNumber, maxColumn),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestScrollbar(\n\t\tctx: HitTestContext,\n\t\trequest: ResolvedHitTestRequest,\n\t): IMouseTarget | null {\n\t\t// Is it the overview ruler?\n\t\t// Is it a child of the scrollable element?\n\t\tif (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(\n\t\t\t\trequest.mouseVerticalOffset,\n\t\t\t);\n\t\t\tconst maxColumn =\n\t\t\t\tctx.viewModel.getLineMaxColumn(possibleLineNumber);\n\t\t\treturn request.fulfillScrollbar(\n\t\t\t\tnew Position(possibleLineNumber, maxColumn),\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getMouseColumn(relativePos: CoordinatesRelativeToEditor): number {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst mouseContentHorizontalOffset =\n\t\t\tthis._context.viewLayout.getCurrentScrollLeft() +\n\t\t\trelativePos.x -\n\t\t\tlayoutInfo.contentLeft;\n\t\treturn MouseTargetFactory._getMouseColumn(\n\t\t\tmouseContentHorizontalOffset,\n\t\t\toptions.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth,\n\t\t);\n\t}\n\n\tpublic static _getMouseColumn(\n\t\tmouseContentHorizontalOffset: number,\n\t\ttypicalHalfwidthCharacterWidth: number,\n\t): number {\n\t\tif (mouseContentHorizontalOffset < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst chars = Math.round(\n\t\t\tmouseContentHorizontalOffset / typicalHalfwidthCharacterWidth,\n\t\t);\n\t\treturn chars + 1;\n\t}\n\n\tprivate static createMouseTargetFromHitTestPosition(\n\t\tctx: HitTestContext,\n\t\trequest: HitTestRequest,\n\t\tspanNode: HTMLElement,\n\t\tpos: Position,\n\t\tinjectedText: InjectedText | null,\n\t): IMouseTarget {\n\t\tconst lineNumber = pos.lineNumber;\n\t\tconst column = pos.column;\n\n\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\n\t\tif (request.mouseContentHorizontalOffset > lineWidth) {\n\t\t\tconst detail = createEmptyContentDataInLines(\n\t\t\t\trequest.mouseContentHorizontalOffset - lineWidth,\n\t\t\t);\n\t\t\treturn request.fulfillContentEmpty(pos, detail);\n\t\t}\n\n\t\tconst visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n\n\t\tif (!visibleRange) {\n\t\t\treturn request.fulfillUnknown(pos);\n\t\t}\n\n\t\tconst columnHorizontalOffset = visibleRange.left;\n\n\t\tif (\n\t\t\tMath.abs(\n\t\t\t\trequest.mouseContentHorizontalOffset - columnHorizontalOffset,\n\t\t\t) < 1\n\t\t) {\n\t\t\treturn request.fulfillContentText(pos, null, {\n\t\t\t\tmightBeForeignElement: !!injectedText,\n\t\t\t\tinjectedText,\n\t\t\t});\n\t\t}\n\n\t\t// Let's define a, b, c and check if the offset is in between them...\n\t\tinterface OffsetColumn {\n\t\t\toffset: number;\n\t\t\tcolumn: number;\n\t\t}\n\n\t\tconst points: OffsetColumn[] = [];\n\t\tpoints.push({ offset: visibleRange.left, column: column });\n\t\tif (column > 1) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition(\n\t\t\t\tlineNumber,\n\t\t\t\tcolumn - 1,\n\t\t\t);\n\t\t\tif (visibleRange) {\n\t\t\t\tpoints.push({ offset: visibleRange.left, column: column - 1 });\n\t\t\t}\n\t\t}\n\t\tconst lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n\t\tif (column < lineMaxColumn) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition(\n\t\t\t\tlineNumber,\n\t\t\t\tcolumn + 1,\n\t\t\t);\n\t\t\tif (visibleRange) {\n\t\t\t\tpoints.push({ offset: visibleRange.left, column: column + 1 });\n\t\t\t}\n\t\t}\n\n\t\tpoints.sort((a, b) => a.offset - b.offset);\n\n\t\tconst mouseCoordinates = request.pos.toClientCoordinates(\n\t\t\tdom.getWindow(ctx.viewDomNode),\n\t\t);\n\t\tconst spanNodeClientRect = spanNode.getBoundingClientRect();\n\t\tconst mouseIsOverSpanNode =\n\t\t\tspanNodeClientRect.left <= mouseCoordinates.clientX &&\n\t\t\tmouseCoordinates.clientX <= spanNodeClientRect.right;\n\n\t\tlet rng: EditorRange | null = null;\n\n\t\tfor (let i = 1; i < points.length; i++) {\n\t\t\tconst prev = points[i - 1];\n\t\t\tconst curr = points[i];\n\t\t\tif (\n\t\t\t\tprev.offset <= request.mouseContentHorizontalOffset &&\n\t\t\t\trequest.mouseContentHorizontalOffset <= curr.offset\n\t\t\t) {\n\t\t\t\trng = new EditorRange(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tprev.column,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tcurr.column,\n\t\t\t\t);\n\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/152819\n\t\t\t\t// Due to the use of zwj, the browser's hit test result is skewed towards the left\n\t\t\t\t// Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n\n\t\t\t\tconst prevDelta = Math.abs(\n\t\t\t\t\tprev.offset - request.mouseContentHorizontalOffset,\n\t\t\t\t);\n\t\t\t\tconst nextDelta = Math.abs(\n\t\t\t\t\tcurr.offset - request.mouseContentHorizontalOffset,\n\t\t\t\t);\n\n\t\t\t\tpos =\n\t\t\t\t\tprevDelta < nextDelta\n\t\t\t\t\t\t? new Position(lineNumber, prev.column)\n\t\t\t\t\t\t: new Position(lineNumber, curr.column);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn request.fulfillContentText(pos, rng, {\n\t\t\tmightBeForeignElement: !mouseIsOverSpanNode || !!injectedText,\n\t\t\tinjectedText,\n\t\t});\n\t}\n\n\t/**\n\t * Most probably WebKit browsers and Edge\n\t */\n\tprivate static _doHitTestWithCaretRangeFromPoint(\n\t\tctx: HitTestContext,\n\t\trequest: BareHitTestRequest,\n\t): HitTestResult {\n\t\t// In Chrome, especially on Linux it is possible to click between lines,\n\t\t// so try to adjust the `hity` below so that it lands in the center of a line\n\t\tconst lineNumber = ctx.getLineNumberAtVerticalOffset(\n\t\t\trequest.mouseVerticalOffset,\n\t\t);\n\t\tconst lineStartVerticalOffset =\n\t\t\tctx.getVerticalOffsetForLineNumber(lineNumber);\n\t\tconst lineEndVerticalOffset = lineStartVerticalOffset + ctx.lineHeight;\n\n\t\tconst isBelowLastLine =\n\t\t\tlineNumber === ctx.viewModel.getLineCount() &&\n\t\t\trequest.mouseVerticalOffset > lineEndVerticalOffset;\n\n\t\tif (!isBelowLastLine) {\n\t\t\tconst lineCenteredVerticalOffset = Math.floor(\n\t\t\t\t(lineStartVerticalOffset + lineEndVerticalOffset) / 2,\n\t\t\t);\n\t\t\tlet adjustedPageY =\n\t\t\t\trequest.pos.y +\n\t\t\t\t(lineCenteredVerticalOffset - request.mouseVerticalOffset);\n\n\t\t\tif (adjustedPageY <= request.editorPos.y) {\n\t\t\t\tadjustedPageY = request.editorPos.y + 1;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tadjustedPageY >=\n\t\t\t\trequest.editorPos.y + request.editorPos.height\n\t\t\t) {\n\t\t\t\tadjustedPageY =\n\t\t\t\t\trequest.editorPos.y + request.editorPos.height - 1;\n\t\t\t}\n\n\t\t\tconst adjustedPage = new PageCoordinates(\n\t\t\t\trequest.pos.x,\n\t\t\t\tadjustedPageY,\n\t\t\t);\n\n\t\t\tconst r = this._actualDoHitTestWithCaretRangeFromPoint(\n\t\t\t\tctx,\n\t\t\t\tadjustedPage.toClientCoordinates(\n\t\t\t\t\tdom.getWindow(ctx.viewDomNode),\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (r.type === HitTestResultType.Content) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\t// Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n\t\treturn this._actualDoHitTestWithCaretRangeFromPoint(\n\t\t\tctx,\n\t\t\trequest.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)),\n\t\t);\n\t}\n\n\tprivate static _actualDoHitTestWithCaretRangeFromPoint(\n\t\tctx: HitTestContext,\n\t\tcoords: ClientCoordinates,\n\t): HitTestResult {\n\t\tconst shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n\t\tlet range: Range;\n\t\tif (shadowRoot) {\n\t\t\tif (typeof (<any>shadowRoot).caretRangeFromPoint === \"undefined\") {\n\t\t\t\trange = shadowCaretRangeFromPoint(\n\t\t\t\t\tshadowRoot,\n\t\t\t\t\tcoords.clientX,\n\t\t\t\t\tcoords.clientY,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\trange = (<any>shadowRoot).caretRangeFromPoint(\n\t\t\t\t\tcoords.clientX,\n\t\t\t\t\tcoords.clientY,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\trange = (<any>ctx.viewDomNode.ownerDocument).caretRangeFromPoint(\n\t\t\t\tcoords.clientX,\n\t\t\t\tcoords.clientY,\n\t\t\t);\n\t\t}\n\n\t\tif (!range || !range.startContainer) {\n\t\t\treturn new UnknownHitTestResult();\n\t\t}\n\n\t\t// Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n\t\tconst startContainer = range.startContainer;\n\n\t\tif (startContainer.nodeType === startContainer.TEXT_NODE) {\n\t\t\t// startContainer is expected to be the token text\n\t\t\tconst parent1 = startContainer.parentNode; // expected to be the token span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\t\t\tconst parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\t\t\tconst parent3ClassName =\n\t\t\t\tparent3 && parent3.nodeType === parent3.ELEMENT_NODE\n\t\t\t\t\t? (<HTMLElement>parent3).className\n\t\t\t\t\t: null;\n\n\t\t\tif (parent3ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\treturn HitTestResult.createFromDOMInfo(\n\t\t\t\t\tctx,\n\t\t\t\t\t<HTMLElement>parent1,\n\t\t\t\t\trange.startOffset,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new UnknownHitTestResult(\n\t\t\t\t\t<HTMLElement>startContainer.parentNode,\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n\t\t\t// startContainer is expected to be the token span\n\t\t\tconst parent1 = startContainer.parentNode; // expected to be the view line container span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n\t\t\tconst parent2ClassName =\n\t\t\t\tparent2 && parent2.nodeType === parent2.ELEMENT_NODE\n\t\t\t\t\t? (<HTMLElement>parent2).className\n\t\t\t\t\t: null;\n\n\t\t\tif (parent2ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\treturn HitTestResult.createFromDOMInfo(\n\t\t\t\t\tctx,\n\t\t\t\t\t<HTMLElement>startContainer,\n\t\t\t\t\t(<HTMLElement>startContainer).textContent!.length,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new UnknownHitTestResult(<HTMLElement>startContainer);\n\t\t\t}\n\t\t}\n\n\t\treturn new UnknownHitTestResult();\n\t}\n\n\t/**\n\t * Most probably Gecko\n\t */\n\tprivate static _doHitTestWithCaretPositionFromPoint(\n\t\tctx: HitTestContext,\n\t\tcoords: ClientCoordinates,\n\t): HitTestResult {\n\t\tconst hitResult: { offsetNode: Node; offset: number } = (<any>(\n\t\t\tctx.viewDomNode.ownerDocument\n\t\t)).caretPositionFromPoint(coords.clientX, coords.clientY);\n\n\t\tif (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n\t\t\t// offsetNode is expected to be the token text\n\t\t\tconst parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\t\t\tconst parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\t\t\tconst parent3ClassName =\n\t\t\t\tparent3 && parent3.nodeType === parent3.ELEMENT_NODE\n\t\t\t\t\t? (<HTMLElement>parent3).className\n\t\t\t\t\t: null;\n\n\t\t\tif (parent3ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\treturn HitTestResult.createFromDOMInfo(\n\t\t\t\t\tctx,\n\t\t\t\t\t<HTMLElement>hitResult.offsetNode.parentNode,\n\t\t\t\t\thitResult.offset,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new UnknownHitTestResult(\n\t\t\t\t\t<HTMLElement>hitResult.offsetNode.parentNode,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n\t\t// Some other times, it returns the `<span>` with the inline decoration\n\t\tif (\n\t\t\thitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE\n\t\t) {\n\t\t\tconst parent1 = hitResult.offsetNode.parentNode;\n\t\t\tconst parent1ClassName =\n\t\t\t\tparent1 && parent1.nodeType === parent1.ELEMENT_NODE\n\t\t\t\t\t? (<HTMLElement>parent1).className\n\t\t\t\t\t: null;\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null;\n\t\t\tconst parent2ClassName =\n\t\t\t\tparent2 && parent2.nodeType === parent2.ELEMENT_NODE\n\t\t\t\t\t? (<HTMLElement>parent2).className\n\t\t\t\t\t: null;\n\n\t\t\tif (parent1ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\t// it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n\t\t\t\tconst tokenSpan =\n\t\t\t\t\thitResult.offsetNode.childNodes[\n\t\t\t\t\t\tMath.min(\n\t\t\t\t\t\t\thitResult.offset,\n\t\t\t\t\t\t\thitResult.offsetNode.childNodes.length - 1,\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t\tif (tokenSpan) {\n\t\t\t\t\treturn HitTestResult.createFromDOMInfo(\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\t<HTMLElement>tokenSpan,\n\t\t\t\t\t\t0,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (parent2ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\t// it returned the `<span>` with the inline decoration\n\t\t\t\treturn HitTestResult.createFromDOMInfo(\n\t\t\t\t\tctx,\n\t\t\t\t\t<HTMLElement>hitResult.offsetNode,\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn new UnknownHitTestResult(<HTMLElement>hitResult.offsetNode);\n\t}\n\n\tprivate static _snapToSoftTabBoundary(\n\t\tposition: Position,\n\t\tviewModel: IViewModel,\n\t): Position {\n\t\tconst lineContent = viewModel.getLineContent(position.lineNumber);\n\t\tconst { tabSize } = viewModel.model.getOptions();\n\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(\n\t\t\tlineContent,\n\t\t\tposition.column - 1,\n\t\t\ttabSize,\n\t\t\tDirection.Nearest,\n\t\t);\n\t\tif (newPosition !== -1) {\n\t\t\treturn new Position(position.lineNumber, newPosition + 1);\n\t\t}\n\t\treturn position;\n\t}\n\n\tpublic static doHitTest(\n\t\tctx: HitTestContext,\n\t\trequest: BareHitTestRequest,\n\t): HitTestResult {\n\t\tlet result: HitTestResult = new UnknownHitTestResult();\n\t\tif (\n\t\t\ttypeof (<any>ctx.viewDomNode.ownerDocument).caretRangeFromPoint ===\n\t\t\t\"function\"\n\t\t) {\n\t\t\tresult = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n\t\t} else if (\n\t\t\t(<any>ctx.viewDomNode.ownerDocument).caretPositionFromPoint\n\t\t) {\n\t\t\tresult = this._doHitTestWithCaretPositionFromPoint(\n\t\t\t\tctx,\n\t\t\t\trequest.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)),\n\t\t\t);\n\t\t}\n\t\tif (result.type === HitTestResultType.Content) {\n\t\t\tconst injectedText = ctx.viewModel.getInjectedTextAt(\n\t\t\t\tresult.position,\n\t\t\t);\n\n\t\t\tconst normalizedPosition = ctx.viewModel.normalizePosition(\n\t\t\t\tresult.position,\n\t\t\t\tPositionAffinity.None,\n\t\t\t);\n\t\t\tif (injectedText || !normalizedPosition.equals(result.position)) {\n\t\t\t\tresult = new ContentHitTestResult(\n\t\t\t\t\tnormalizedPosition,\n\t\t\t\t\tresult.spanNode,\n\t\t\t\t\tinjectedText,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction shadowCaretRangeFromPoint(\n\tshadowRoot: ShadowRoot,\n\tx: number,\n\ty: number,\n): Range {\n\tconst range = document.createRange();\n\n\t// Get the element under the point\n\tlet el: Element | null = (<any>shadowRoot).elementFromPoint(x, y);\n\n\tif (el !== null) {\n\t\t// Get the last child of the element until its firstChild is a text node\n\t\t// This assumes that the pointer is on the right of the line, out of the tokens\n\t\t// and that we want to get the offset of the last token of the line\n\t\twhile (\n\t\t\tel &&\n\t\t\tel.firstChild &&\n\t\t\tel.firstChild.nodeType !== el.firstChild.TEXT_NODE &&\n\t\t\tel.lastChild &&\n\t\t\tel.lastChild.firstChild\n\t\t) {\n\t\t\tel = <Element>el.lastChild;\n\t\t}\n\n\t\t// Grab its rect\n\t\tconst rect = el.getBoundingClientRect();\n\n\t\t// And its font (the computed shorthand font property might be empty, see #3217)\n\t\tconst elWindow = dom.getWindow(el);\n\t\tconst fontStyle = elWindow\n\t\t\t.getComputedStyle(el, null)\n\t\t\t.getPropertyValue(\"font-style\");\n\t\tconst fontVariant = elWindow\n\t\t\t.getComputedStyle(el, null)\n\t\t\t.getPropertyValue(\"font-variant\");\n\t\tconst fontWeight = elWindow\n\t\t\t.getComputedStyle(el, null)\n\t\t\t.getPropertyValue(\"font-weight\");\n\t\tconst fontSize = elWindow\n\t\t\t.getComputedStyle(el, null)\n\t\t\t.getPropertyValue(\"font-size\");\n\t\tconst lineHeight = elWindow\n\t\t\t.getComputedStyle(el, null)\n\t\t\t.getPropertyValue(\"line-height\");\n\t\tconst fontFamily = elWindow\n\t\t\t.getComputedStyle(el, null)\n\t\t\t.getPropertyValue(\"font-family\");\n\t\tconst font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\n\n\t\t// And also its txt content\n\t\tconst text = (el as any).innerText;\n\n\t\t// Position the pixel cursor at the left of the element\n\t\tlet pixelCursor = rect.left;\n\t\tlet offset = 0;\n\t\tlet step: number;\n\n\t\t// If the point is on the right of the box put the cursor after the last character\n\t\tif (x > rect.left + rect.width) {\n\t\t\toffset = text.length;\n\t\t} else {\n\t\t\tconst charWidthReader = CharWidthReader.getInstance();\n\t\t\t// Goes through all the characters of the innerText, and checks if the x of the point\n\t\t\t// belongs to the character.\n\t\t\tfor (let i = 0; i < text.length + 1; i++) {\n\t\t\t\t// The step is half the width of the character\n\t\t\t\tstep = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n\t\t\t\t// Move to the center of the character\n\t\t\t\tpixelCursor += step;\n\t\t\t\t// If the x of the point is smaller that the position of the cursor, the point is over that character\n\t\t\t\tif (x < pixelCursor) {\n\t\t\t\t\toffset = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Move between the current character and the next\n\t\t\t\tpixelCursor += step;\n\t\t\t}\n\t\t}\n\n\t\t// Creates a range with the text node of the element and set the offset found\n\t\trange.setStart(el.firstChild!, offset);\n\t\trange.setEnd(el.firstChild!, offset);\n\t}\n\n\treturn range;\n}\n\nclass CharWidthReader {\n\tprivate static _INSTANCE: CharWidthReader | null = null;\n\n\tpublic static getInstance(): CharWidthReader {\n\t\tif (!CharWidthReader._INSTANCE) {\n\t\t\tCharWidthReader._INSTANCE = new CharWidthReader();\n\t\t}\n\t\treturn CharWidthReader._INSTANCE;\n\t}\n\n\tprivate readonly _cache: { [cacheKey: string]: number };\n\tprivate readonly _canvas: HTMLCanvasElement;\n\n\tprivate constructor() {\n\t\tthis._cache = {};\n\t\tthis._canvas = document.createElement(\"canvas\");\n\t}\n\n\tpublic getCharWidth(char: string, font: string): number {\n\t\tconst cacheKey = char + font;\n\t\tif (this._cache[cacheKey]) {\n\t\t\treturn this._cache[cacheKey];\n\t\t}\n\n\t\tconst context = this._canvas.getContext(\"2d\")!;\n\t\tcontext.font = font;\n\t\tconst metrics = context.measureText(char);\n\t\tconst width = metrics.width;\n\t\tthis._cache[cacheKey] = width;\n\t\treturn width;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["HitTestResultType", "HitTestResult", "lineNumber", "maxLineColumn", "lineWidth", "visibleRange"]
}
