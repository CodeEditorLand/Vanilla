{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/editorExtensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditor, IDiffEditor } from './editorBrowser.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IEditorContribution, IDiffEditorContribution } from '../common/editorCommon.js';\nimport { ITextModel } from '../common/model.js';\nimport { IModelService } from '../common/services/model.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuId, MenuRegistry, Action2 } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandMetadata } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService, ContextKeyExpression } from '../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor as InstantiationServicesAccessor, BrandedService, IInstantiationService, IConstructorSignature } from '../../platform/instantiation/common/instantiation.js';\nimport { IKeybindings, KeybindingsRegistry, KeybindingWeight } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { assertType } from '../../base/common/types.js';\nimport { ThemeIcon } from '../../base/common/themables.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { KeyMod, KeyCode } from '../../base/common/keyCodes.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\n\nexport type ServicesAccessor = InstantiationServicesAccessor;\nexport type EditorContributionCtor = IConstructorSignature<IEditorContribution, [ICodeEditor]>;\nexport type DiffEditorContributionCtor = IConstructorSignature<IDiffEditorContribution, [IDiffEditor]>;\n\nexport const enum EditorContributionInstantiation {\n\t/**\n\t * The contribution is created eagerly when the {@linkcode ICodeEditor} is instantiated.\n\t * Only Eager contributions can participate in saving or restoring of view state.\n\t */\n\tEager,\n\n\t/**\n\t * The contribution is created at the latest 50ms after the first render after attaching a text model.\n\t * If the contribution is explicitly requested via `getContribution`, it will be instantiated sooner.\n\t * If there is idle time available, it will be instantiated sooner.\n\t */\n\tAfterFirstRender,\n\n\t/**\n\t * The contribution is created before the editor emits events produced by user interaction (mouse events, keyboard events).\n\t * If the contribution is explicitly requested via `getContribution`, it will be instantiated sooner.\n\t * If there is idle time available, it will be instantiated sooner.\n\t */\n\tBeforeFirstInteraction,\n\n\t/**\n\t * The contribution is created when there is idle time available, at the latest 5000ms after the editor creation.\n\t * If the contribution is explicitly requested via `getContribution`, it will be instantiated sooner.\n\t */\n\tEventually,\n\n\t/**\n\t * The contribution is created only when explicitly requested via `getContribution`.\n\t */\n\tLazy,\n}\n\nexport interface IEditorContributionDescription {\n\treadonly id: string;\n\treadonly ctor: EditorContributionCtor;\n\treadonly instantiation: EditorContributionInstantiation;\n}\n\nexport interface IDiffEditorContributionDescription {\n\tid: string;\n\tctor: DiffEditorContributionCtor;\n}\n\n//#region Command\n\nexport interface ICommandKeybindingsOptions extends IKeybindings {\n\tkbExpr?: ContextKeyExpression | null;\n\tweight: number;\n\t/**\n\t * the default keybinding arguments\n\t */\n\targs?: any;\n}\nexport interface ICommandMenuOptions {\n\tmenuId: MenuId;\n\tgroup: string;\n\torder: number;\n\twhen?: ContextKeyExpression;\n\ttitle: string;\n\ticon?: ThemeIcon;\n}\nexport interface ICommandOptions {\n\tid: string;\n\tprecondition: ContextKeyExpression | undefined;\n\tkbOpts?: ICommandKeybindingsOptions | ICommandKeybindingsOptions[];\n\tmetadata?: ICommandMetadata;\n\tmenuOpts?: ICommandMenuOptions | ICommandMenuOptions[];\n}\nexport abstract class Command {\n\tpublic readonly id: string;\n\tpublic readonly precondition: ContextKeyExpression | undefined;\n\tprivate readonly _kbOpts: ICommandKeybindingsOptions | ICommandKeybindingsOptions[] | undefined;\n\tprivate readonly _menuOpts: ICommandMenuOptions | ICommandMenuOptions[] | undefined;\n\tpublic readonly metadata: ICommandMetadata | undefined;\n\n\tconstructor(opts: ICommandOptions) {\n\t\tthis.id = opts.id;\n\t\tthis.precondition = opts.precondition;\n\t\tthis._kbOpts = opts.kbOpts;\n\t\tthis._menuOpts = opts.menuOpts;\n\t\tthis.metadata = opts.metadata;\n\t}\n\n\tpublic register(): void {\n\n\t\tif (Array.isArray(this._menuOpts)) {\n\t\t\tthis._menuOpts.forEach(this._registerMenuItem, this);\n\t\t} else if (this._menuOpts) {\n\t\t\tthis._registerMenuItem(this._menuOpts);\n\t\t}\n\n\t\tif (this._kbOpts) {\n\t\t\tconst kbOptsArr = Array.isArray(this._kbOpts) ? this._kbOpts : [this._kbOpts];\n\t\t\tfor (const kbOpts of kbOptsArr) {\n\t\t\t\tlet kbWhen = kbOpts.kbExpr;\n\t\t\t\tif (this.precondition) {\n\t\t\t\t\tif (kbWhen) {\n\t\t\t\t\t\tkbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkbWhen = this.precondition;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst desc = {\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tweight: kbOpts.weight,\n\t\t\t\t\targs: kbOpts.args,\n\t\t\t\t\twhen: kbWhen,\n\t\t\t\t\tprimary: kbOpts.primary,\n\t\t\t\t\tsecondary: kbOpts.secondary,\n\t\t\t\t\twin: kbOpts.win,\n\t\t\t\t\tlinux: kbOpts.linux,\n\t\t\t\t\tmac: kbOpts.mac,\n\t\t\t\t};\n\n\t\t\t\tKeybindingsRegistry.registerKeybindingRule(desc);\n\t\t\t}\n\t\t}\n\n\t\tCommandsRegistry.registerCommand({\n\t\t\tid: this.id,\n\t\t\thandler: (accessor, args) => this.runCommand(accessor, args),\n\t\t\tmetadata: this.metadata\n\t\t});\n\t}\n\n\tprivate _registerMenuItem(item: ICommandMenuOptions): void {\n\t\tMenuRegistry.appendMenuItem(item.menuId, {\n\t\t\tgroup: item.group,\n\t\t\tcommand: {\n\t\t\t\tid: this.id,\n\t\t\t\ttitle: item.title,\n\t\t\t\ticon: item.icon,\n\t\t\t\tprecondition: this.precondition\n\t\t\t},\n\t\t\twhen: item.when,\n\t\t\torder: item.order\n\t\t});\n\t}\n\n\tpublic abstract runCommand(accessor: ServicesAccessor, args: any): void | Promise<void>;\n}\n\n//#endregion Command\n\n//#region MultiplexingCommand\n\n/**\n * Potential override for a command.\n *\n * @return `true` or a Promise if the command was successfully run. This stops other overrides from being executed.\n */\nexport type CommandImplementation = (accessor: ServicesAccessor, args: unknown) => boolean | Promise<void>;\n\ninterface ICommandImplementationRegistration {\n\tpriority: number;\n\tname: string;\n\timplementation: CommandImplementation;\n\twhen?: ContextKeyExpression;\n}\n\nexport class MultiCommand extends Command {\n\n\tprivate readonly _implementations: ICommandImplementationRegistration[] = [];\n\n\t/**\n\t * A higher priority gets to be looked at first\n\t */\n\tpublic addImplementation(priority: number, name: string, implementation: CommandImplementation, when?: ContextKeyExpression): IDisposable {\n\t\tthis._implementations.push({ priority, name, implementation, when });\n\t\tthis._implementations.sort((a, b) => b.priority - a.priority);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0; i < this._implementations.length; i++) {\n\t\t\t\t\tif (this._implementations[i].implementation === implementation) {\n\t\t\t\t\t\tthis._implementations.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void | Promise<void> {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tlogService.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);\n\t\tfor (const impl of this._implementations) {\n\t\t\tif (impl.when) {\n\t\t\t\tconst context = contextKeyService.getContext(getActiveElement());\n\t\t\t\tconst value = impl.when.evaluate(context);\n\t\t\t\tif (!value) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = impl.implementation(accessor, args);\n\t\t\tif (result) {\n\t\t\t\tlogService.trace(`Command '${this.id}' was handled by '${impl.name}'.`);\n\t\t\t\tif (typeof result === 'boolean') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tlogService.trace(`The Command '${this.id}' was not handled by any implementation.`);\n\t}\n}\n\n//#endregion\n\n/**\n * A command that delegates to another command's implementation.\n *\n * This lets different commands be registered but share the same implementation\n */\nexport class ProxyCommand extends Command {\n\tconstructor(\n\t\tprivate readonly command: Command,\n\t\topts: ICommandOptions\n\t) {\n\t\tsuper(opts);\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void | Promise<void> {\n\t\treturn this.command.runCommand(accessor, args);\n\t}\n}\n\n//#region EditorCommand\n\nexport interface IContributionCommandOptions<T> extends ICommandOptions {\n\thandler: (controller: T, args: any) => void;\n}\nexport interface EditorControllerCommand<T extends IEditorContribution> {\n\tnew(opts: IContributionCommandOptions<T>): EditorCommand;\n}\nexport abstract class EditorCommand extends Command {\n\n\t/**\n\t * Create a command class that is bound to a certain editor contribution.\n\t */\n\tpublic static bindToContribution<T extends IEditorContribution>(controllerGetter: (editor: ICodeEditor) => T | null): EditorControllerCommand<T> {\n\t\treturn class EditorControllerCommandImpl extends EditorCommand {\n\t\t\tprivate readonly _callback: (controller: T, args: any) => void;\n\n\t\t\tconstructor(opts: IContributionCommandOptions<T>) {\n\t\t\t\tsuper(opts);\n\n\t\t\t\tthis._callback = opts.handler;\n\t\t\t}\n\n\t\t\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\t\t\tconst controller = controllerGetter(editor);\n\t\t\t\tif (controller) {\n\t\t\t\t\tthis._callback(controller, args);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static runEditorCommand(\n\t\taccessor: ServicesAccessor,\n\t\targs: any,\n\t\tprecondition: ContextKeyExpression | undefined,\n\t\trunner: (accessor: ServicesAccessor | null, editor: ICodeEditor, args: any) => void | Promise<void>\n\t): void | Promise<void> {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\t// Find the editor with text focus or active\n\t\tconst editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\t// well, at least we tried...\n\t\t\treturn;\n\t\t}\n\n\t\treturn editor.invokeWithinContext((editorAccessor) => {\n\t\t\tconst kbService = editorAccessor.get(IContextKeyService);\n\t\t\tif (!kbService.contextMatchesRules(precondition ?? undefined)) {\n\t\t\t\t// precondition does not hold\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn runner(editorAccessor, editor, args);\n\t\t});\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void | Promise<void> {\n\t\treturn EditorCommand.runEditorCommand(accessor, args, this.precondition, (accessor, editor, args) => this.runEditorCommand(accessor, editor, args));\n\t}\n\n\tpublic abstract runEditorCommand(accessor: ServicesAccessor | null, editor: ICodeEditor, args: any): void | Promise<void>;\n}\n\n//#endregion EditorCommand\n\n//#region EditorAction\n\nexport interface IEditorActionContextMenuOptions {\n\tgroup: string;\n\torder: number;\n\twhen?: ContextKeyExpression;\n\tmenuId?: MenuId;\n}\nexport interface IActionOptions extends ICommandOptions {\n\tlabel: string;\n\talias: string;\n\tcontextMenuOpts?: IEditorActionContextMenuOptions | IEditorActionContextMenuOptions[];\n}\n\nexport abstract class EditorAction extends EditorCommand {\n\n\tprivate static convertOptions(opts: IActionOptions): ICommandOptions {\n\n\t\tlet menuOpts: ICommandMenuOptions[];\n\t\tif (Array.isArray(opts.menuOpts)) {\n\t\t\tmenuOpts = opts.menuOpts;\n\t\t} else if (opts.menuOpts) {\n\t\t\tmenuOpts = [opts.menuOpts];\n\t\t} else {\n\t\t\tmenuOpts = [];\n\t\t}\n\n\t\tfunction withDefaults(item: Partial<ICommandMenuOptions>): ICommandMenuOptions {\n\t\t\tif (!item.menuId) {\n\t\t\t\titem.menuId = MenuId.EditorContext;\n\t\t\t}\n\t\t\tif (!item.title) {\n\t\t\t\titem.title = opts.label;\n\t\t\t}\n\t\t\titem.when = ContextKeyExpr.and(opts.precondition, item.when);\n\t\t\treturn <ICommandMenuOptions>item;\n\t\t}\n\n\t\tif (Array.isArray(opts.contextMenuOpts)) {\n\t\t\tmenuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n\t\t} else if (opts.contextMenuOpts) {\n\t\t\tmenuOpts.push(withDefaults(opts.contextMenuOpts));\n\t\t}\n\n\t\topts.menuOpts = menuOpts;\n\t\treturn <ICommandOptions>opts;\n\t}\n\n\tpublic readonly label: string;\n\tpublic readonly alias: string;\n\n\tconstructor(opts: IActionOptions) {\n\t\tsuper(EditorAction.convertOptions(opts));\n\t\tthis.label = opts.label;\n\t\tthis.alias = opts.alias;\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void | Promise<void> {\n\t\tthis.reportTelemetry(accessor, editor);\n\t\treturn this.run(accessor, editor, args || {});\n\t}\n\n\tprotected reportTelemetry(accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\ttype EditorActionInvokedClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'An editor action has been invoked.';\n\t\t\tname: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The label of the action that was invoked.' };\n\t\t\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the action that was invoked.' };\n\t\t};\n\t\ttype EditorActionInvokedEvent = {\n\t\t\tname: string;\n\t\t\tid: string;\n\t\t};\n\t\taccessor.get(ITelemetryService).publicLog2<EditorActionInvokedEvent, EditorActionInvokedClassification>('editorActionInvoked', { name: this.label, id: this.id });\n\t}\n\n\tpublic abstract run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void | Promise<void>;\n}\n\nexport type EditorActionImplementation = (accessor: ServicesAccessor, editor: ICodeEditor, args: any) => boolean | Promise<void>;\n\nexport class MultiEditorAction extends EditorAction {\n\n\tprivate readonly _implementations: [number, EditorActionImplementation][] = [];\n\n\t/**\n\t * A higher priority gets to be looked at first\n\t */\n\tpublic addImplementation(priority: number, implementation: EditorActionImplementation): IDisposable {\n\t\tthis._implementations.push([priority, implementation]);\n\t\tthis._implementations.sort((a, b) => b[0] - a[0]);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0; i < this._implementations.length; i++) {\n\t\t\t\t\tif (this._implementations[i][1] === implementation) {\n\t\t\t\t\t\tthis._implementations.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void | Promise<void> {\n\t\tfor (const impl of this._implementations) {\n\t\t\tconst result = impl[1](accessor, editor, args);\n\t\t\tif (result) {\n\t\t\t\tif (typeof result === 'boolean') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n//#endregion EditorAction\n\n//#region EditorAction2\n\nexport abstract class EditorAction2 extends Action2 {\n\n\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\t// Find the editor with text focus or active\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\t// well, at least we tried...\n\t\t\treturn;\n\t\t}\n\t\t// precondition does hold\n\t\treturn editor.invokeWithinContext((editorAccessor) => {\n\t\t\tconst kbService = editorAccessor.get(IContextKeyService);\n\t\t\tconst logService = editorAccessor.get(ILogService);\n\t\t\tconst enabled = kbService.contextMatchesRules(this.desc.precondition ?? undefined);\n\t\t\tif (!enabled) {\n\t\t\t\tlogService.debug(`[EditorAction2] NOT running command because its precondition is FALSE`, this.desc.id, this.desc.precondition?.serialize());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.runEditorCommand(editorAccessor, editor, ...args);\n\t\t});\n\t}\n\n\tabstract runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, ...args: any[]): any;\n}\n\n//#endregion\n\n// --- Registration of commands and actions\n\n\nexport function registerModelAndPositionCommand(id: string, handler: (accessor: ServicesAccessor, model: ITextModel, position: Position, ...args: any[]) => any) {\n\tCommandsRegistry.registerCommand(id, function (accessor, ...args) {\n\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tconst [resource, position] = args;\n\t\tassertType(URI.isUri(resource));\n\t\tassertType(Position.isIPosition(position));\n\n\t\tconst model = accessor.get(IModelService).getModel(resource);\n\t\tif (model) {\n\t\t\tconst editorPosition = Position.lift(position);\n\t\t\treturn instaService.invokeFunction(handler, model, editorPosition, ...args.slice(2));\n\t\t}\n\n\t\treturn accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = instaService.invokeFunction(handler, reference.object.textEditorModel, Position.lift(position), args.slice(2));\n\t\t\t\t\tresolve(result);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}).finally(() => {\n\t\t\t\treference.dispose();\n\t\t\t});\n\t\t});\n\t});\n}\n\nexport function registerEditorCommand<T extends EditorCommand>(editorCommand: T): T {\n\tEditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n\treturn editorCommand;\n}\n\nexport function registerEditorAction<T extends EditorAction>(ctor: { new(): T }): T {\n\tconst action = new ctor();\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(action);\n\treturn action;\n}\n\nexport function registerMultiEditorAction<T extends MultiEditorAction>(action: T): T {\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(action);\n\treturn action;\n}\n\nexport function registerInstantiatedEditorAction(editorAction: EditorAction): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\n\n/**\n * Registers an editor contribution. Editor contributions have a lifecycle which is bound\n * to a specific code editor instance.\n */\nexport function registerEditorContribution<Services extends BrandedService[]>(id: string, ctor: { new(editor: ICodeEditor, ...services: Services): IEditorContribution }, instantiation: EditorContributionInstantiation): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor, instantiation);\n}\n\n/**\n * Registers a diff editor contribution. Diff editor contributions have a lifecycle which\n * is bound to a specific diff editor instance.\n */\nexport function registerDiffEditorContribution<Services extends BrandedService[]>(id: string, ctor: { new(editor: IDiffEditor, ...services: Services): IEditorContribution }): void {\n\tEditorContributionRegistry.INSTANCE.registerDiffEditorContribution(id, ctor);\n}\n\nexport namespace EditorExtensionsRegistry {\n\n\texport function getEditorCommand(commandId: string): EditorCommand {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n\t}\n\n\texport function getEditorActions(): Iterable<EditorAction> {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorActions();\n\t}\n\n\texport function getEditorContributions(): IEditorContributionDescription[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorContributions();\n\t}\n\n\texport function getSomeEditorContributions(ids: string[]): IEditorContributionDescription[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\n\t}\n\n\texport function getDiffEditorContributions(): IDiffEditorContributionDescription[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n\t}\n}\n\n// Editor extension points\nconst Extensions = {\n\tEditorCommonContributions: 'editor.contributions'\n};\n\nclass EditorContributionRegistry {\n\n\tpublic static readonly INSTANCE = new EditorContributionRegistry();\n\n\tprivate readonly editorContributions: IEditorContributionDescription[] = [];\n\tprivate readonly diffEditorContributions: IDiffEditorContributionDescription[] = [];\n\tprivate readonly editorActions: EditorAction[] = [];\n\tprivate readonly editorCommands: { [commandId: string]: EditorCommand } = Object.create(null);\n\n\tconstructor() {\n\t}\n\n\tpublic registerEditorContribution<Services extends BrandedService[]>(id: string, ctor: { new(editor: ICodeEditor, ...services: Services): IEditorContribution }, instantiation: EditorContributionInstantiation): void {\n\t\tthis.editorContributions.push({ id, ctor: ctor as EditorContributionCtor, instantiation });\n\t}\n\n\tpublic getEditorContributions(): IEditorContributionDescription[] {\n\t\treturn this.editorContributions.slice(0);\n\t}\n\n\tpublic registerDiffEditorContribution<Services extends BrandedService[]>(id: string, ctor: { new(editor: IDiffEditor, ...services: Services): IEditorContribution }): void {\n\t\tthis.diffEditorContributions.push({ id, ctor: ctor as DiffEditorContributionCtor });\n\t}\n\n\tpublic getDiffEditorContributions(): IDiffEditorContributionDescription[] {\n\t\treturn this.diffEditorContributions.slice(0);\n\t}\n\n\tpublic registerEditorAction(action: EditorAction) {\n\t\taction.register();\n\t\tthis.editorActions.push(action);\n\t}\n\n\tpublic getEditorActions(): Iterable<EditorAction> {\n\t\treturn this.editorActions;\n\t}\n\n\tpublic registerEditorCommand(editorCommand: EditorCommand) {\n\t\teditorCommand.register();\n\t\tthis.editorCommands[editorCommand.id] = editorCommand;\n\t}\n\n\tpublic getEditorCommand(commandId: string): EditorCommand {\n\t\treturn (this.editorCommands[commandId] || null);\n\t}\n\n}\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\n\nfunction registerCommand<T extends Command>(command: T): T {\n\tcommand.register();\n\treturn command;\n}\n\nexport const UndoCommand = registerCommand(new MultiCommand({\n\tid: 'undo',\n\tprecondition: undefined,\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorCore,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyZ\n\t},\n\tmenuOpts: [{\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '1_do',\n\t\ttitle: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, \"&&Undo\"),\n\t\torder: 1\n\t}, {\n\t\tmenuId: MenuId.CommandPalette,\n\t\tgroup: '',\n\t\ttitle: nls.localize('undo', \"Undo\"),\n\t\torder: 1\n\t}]\n}));\n\nregisterCommand(new ProxyCommand(UndoCommand, { id: 'default:undo', precondition: undefined }));\n\nexport const RedoCommand = registerCommand(new MultiCommand({\n\tid: 'redo',\n\tprecondition: undefined,\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorCore,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyY,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyZ],\n\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyZ }\n\t},\n\tmenuOpts: [{\n\t\tmenuId: MenuId.MenubarEditMenu,\n\t\tgroup: '1_do',\n\t\ttitle: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, \"&&Redo\"),\n\t\torder: 2\n\t}, {\n\t\tmenuId: MenuId.CommandPalette,\n\t\tgroup: '',\n\t\ttitle: nls.localize('redo', \"Redo\"),\n\t\torder: 1\n\t}]\n}));\n\nregisterCommand(new ProxyCommand(RedoCommand, { id: 'default:redo', precondition: undefined }));\n\nexport const SelectAllCommand = registerCommand(new MultiCommand({\n\tid: 'editor.action.selectAll',\n\tprecondition: undefined,\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorCore,\n\t\tkbExpr: null,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyA\n\t},\n\tmenuOpts: [{\n\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\tgroup: '1_basic',\n\t\ttitle: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, \"&&Select All\"),\n\t\torder: 1\n\t}, {\n\t\tmenuId: MenuId.CommandPalette,\n\t\tgroup: '',\n\t\ttitle: nls.localize('selectAll', \"Select All\"),\n\t\torder: 1\n\t}]\n}));\n"],
  "mappings": "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",
  "names": ["EditorContributionInstantiation", "accessor", "args", "EditorExtensionsRegistry"]
}
