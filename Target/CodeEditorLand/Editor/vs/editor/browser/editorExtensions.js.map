{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/editorExtensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveElement } from \"../../base/browser/dom.js\";\nimport { KeyCode, KeyMod } from \"../../base/common/keyCodes.js\";\nimport type { IDisposable } from \"../../base/common/lifecycle.js\";\nimport type { ThemeIcon } from \"../../base/common/themables.js\";\nimport { assertType } from \"../../base/common/types.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport * as nls from \"../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tMenuRegistry,\n} from \"../../platform/actions/common/actions.js\";\nimport {\n\tCommandsRegistry,\n\ttype ICommandMetadata,\n} from \"../../platform/commands/common/commands.js\";\nimport {\n\tContextKeyExpr,\n\ttype ContextKeyExpression,\n\tIContextKeyService,\n} from \"../../platform/contextkey/common/contextkey.js\";\nimport {\n\ttype BrandedService,\n\ttype IConstructorSignature,\n\tIInstantiationService,\n\ttype ServicesAccessor as InstantiationServicesAccessor,\n} from \"../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IKeybindings,\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { ILogService } from \"../../platform/log/common/log.js\";\nimport { Registry } from \"../../platform/registry/common/platform.js\";\nimport { ITelemetryService } from \"../../platform/telemetry/common/telemetry.js\";\nimport { Position } from \"../common/core/position.js\";\nimport type {\n\tIDiffEditorContribution,\n\tIEditorContribution,\n} from \"../common/editorCommon.js\";\nimport type { ITextModel } from \"../common/model.js\";\nimport { IModelService } from \"../common/services/model.js\";\nimport { ITextModelService } from \"../common/services/resolverService.js\";\nimport type { ICodeEditor, IDiffEditor } from \"./editorBrowser.js\";\nimport { ICodeEditorService } from \"./services/codeEditorService.js\";\n\nexport type ServicesAccessor = InstantiationServicesAccessor;\nexport type EditorContributionCtor = IConstructorSignature<\n\tIEditorContribution,\n\t[ICodeEditor]\n>;\nexport type DiffEditorContributionCtor = IConstructorSignature<\n\tIDiffEditorContribution,\n\t[IDiffEditor]\n>;\n\nexport enum EditorContributionInstantiation {\n\t/**\n\t * The contribution is created eagerly when the {@linkcode ICodeEditor} is instantiated.\n\t * Only Eager contributions can participate in saving or restoring of view state.\n\t */\n\tEager = 0,\n\n\t/**\n\t * The contribution is created at the latest 50ms after the first render after attaching a text model.\n\t * If the contribution is explicitly requested via `getContribution`, it will be instantiated sooner.\n\t * If there is idle time available, it will be instantiated sooner.\n\t */\n\tAfterFirstRender = 1,\n\n\t/**\n\t * The contribution is created before the editor emits events produced by user interaction (mouse events, keyboard events).\n\t * If the contribution is explicitly requested via `getContribution`, it will be instantiated sooner.\n\t * If there is idle time available, it will be instantiated sooner.\n\t */\n\tBeforeFirstInteraction = 2,\n\n\t/**\n\t * The contribution is created when there is idle time available, at the latest 5000ms after the editor creation.\n\t * If the contribution is explicitly requested via `getContribution`, it will be instantiated sooner.\n\t */\n\tEventually = 3,\n\n\t/**\n\t * The contribution is created only when explicitly requested via `getContribution`.\n\t */\n\tLazy = 4,\n}\n\nexport interface IEditorContributionDescription {\n\treadonly id: string;\n\treadonly ctor: EditorContributionCtor;\n\treadonly instantiation: EditorContributionInstantiation;\n}\n\nexport interface IDiffEditorContributionDescription {\n\tid: string;\n\tctor: DiffEditorContributionCtor;\n}\n\n//#region Command\n\nexport interface ICommandKeybindingsOptions extends IKeybindings {\n\tkbExpr?: ContextKeyExpression | null;\n\tweight: number;\n\t/**\n\t * the default keybinding arguments\n\t */\n\targs?: any;\n}\nexport interface ICommandMenuOptions {\n\tmenuId: MenuId;\n\tgroup: string;\n\torder: number;\n\twhen?: ContextKeyExpression;\n\ttitle: string;\n\ticon?: ThemeIcon;\n}\nexport interface ICommandOptions {\n\tid: string;\n\tprecondition: ContextKeyExpression | undefined;\n\tkbOpts?: ICommandKeybindingsOptions | ICommandKeybindingsOptions[];\n\tmetadata?: ICommandMetadata;\n\tmenuOpts?: ICommandMenuOptions | ICommandMenuOptions[];\n}\nexport abstract class Command {\n\tpublic readonly id: string;\n\tpublic readonly precondition: ContextKeyExpression | undefined;\n\tprivate readonly _kbOpts:\n\t\t| ICommandKeybindingsOptions\n\t\t| ICommandKeybindingsOptions[]\n\t\t| undefined;\n\tprivate readonly _menuOpts:\n\t\t| ICommandMenuOptions\n\t\t| ICommandMenuOptions[]\n\t\t| undefined;\n\tpublic readonly metadata: ICommandMetadata | undefined;\n\n\tconstructor(opts: ICommandOptions) {\n\t\tthis.id = opts.id;\n\t\tthis.precondition = opts.precondition;\n\t\tthis._kbOpts = opts.kbOpts;\n\t\tthis._menuOpts = opts.menuOpts;\n\t\tthis.metadata = opts.metadata;\n\t}\n\n\tpublic register(): void {\n\t\tif (Array.isArray(this._menuOpts)) {\n\t\t\tthis._menuOpts.forEach(this._registerMenuItem, this);\n\t\t} else if (this._menuOpts) {\n\t\t\tthis._registerMenuItem(this._menuOpts);\n\t\t}\n\n\t\tif (this._kbOpts) {\n\t\t\tconst kbOptsArr = Array.isArray(this._kbOpts)\n\t\t\t\t? this._kbOpts\n\t\t\t\t: [this._kbOpts];\n\t\t\tfor (const kbOpts of kbOptsArr) {\n\t\t\t\tlet kbWhen = kbOpts.kbExpr;\n\t\t\t\tif (this.precondition) {\n\t\t\t\t\tif (kbWhen) {\n\t\t\t\t\t\tkbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkbWhen = this.precondition;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst desc = {\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tweight: kbOpts.weight,\n\t\t\t\t\targs: kbOpts.args,\n\t\t\t\t\twhen: kbWhen,\n\t\t\t\t\tprimary: kbOpts.primary,\n\t\t\t\t\tsecondary: kbOpts.secondary,\n\t\t\t\t\twin: kbOpts.win,\n\t\t\t\t\tlinux: kbOpts.linux,\n\t\t\t\t\tmac: kbOpts.mac,\n\t\t\t\t};\n\n\t\t\t\tKeybindingsRegistry.registerKeybindingRule(desc);\n\t\t\t}\n\t\t}\n\n\t\tCommandsRegistry.registerCommand({\n\t\t\tid: this.id,\n\t\t\thandler: (accessor, args) => this.runCommand(accessor, args),\n\t\t\tmetadata: this.metadata,\n\t\t});\n\t}\n\n\tprivate _registerMenuItem(item: ICommandMenuOptions): void {\n\t\tMenuRegistry.appendMenuItem(item.menuId, {\n\t\t\tgroup: item.group,\n\t\t\tcommand: {\n\t\t\t\tid: this.id,\n\t\t\t\ttitle: item.title,\n\t\t\t\ticon: item.icon,\n\t\t\t\tprecondition: this.precondition,\n\t\t\t},\n\t\t\twhen: item.when,\n\t\t\torder: item.order,\n\t\t});\n\t}\n\n\tpublic abstract runCommand(\n\t\taccessor: ServicesAccessor,\n\t\targs: any,\n\t): void | Promise<void>;\n}\n\n//#endregion Command\n\n//#region MultiplexingCommand\n\n/**\n * Potential override for a command.\n *\n * @return `true` or a Promise if the command was successfully run. This stops other overrides from being executed.\n */\nexport type CommandImplementation = (\n\taccessor: ServicesAccessor,\n\targs: unknown,\n) => boolean | Promise<void>;\n\ninterface ICommandImplementationRegistration {\n\tpriority: number;\n\tname: string;\n\timplementation: CommandImplementation;\n\twhen?: ContextKeyExpression;\n}\n\nexport class MultiCommand extends Command {\n\tprivate readonly _implementations: ICommandImplementationRegistration[] =\n\t\t[];\n\n\t/**\n\t * A higher priority gets to be looked at first\n\t */\n\tpublic addImplementation(\n\t\tpriority: number,\n\t\tname: string,\n\t\timplementation: CommandImplementation,\n\t\twhen?: ContextKeyExpression,\n\t): IDisposable {\n\t\tthis._implementations.push({ priority, name, implementation, when });\n\t\tthis._implementations.sort((a, b) => b.priority - a.priority);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0; i < this._implementations.length; i++) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._implementations[i].implementation ===\n\t\t\t\t\t\timplementation\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._implementations.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic runCommand(\n\t\taccessor: ServicesAccessor,\n\t\targs: any,\n\t): void | Promise<void> {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tlogService.trace(\n\t\t\t`Executing Command '${this.id}' which has ${this._implementations.length} bound.`,\n\t\t);\n\t\tfor (const impl of this._implementations) {\n\t\t\tif (impl.when) {\n\t\t\t\tconst context = contextKeyService.getContext(\n\t\t\t\t\tgetActiveElement(),\n\t\t\t\t);\n\t\t\t\tconst value = impl.when.evaluate(context);\n\t\t\t\tif (!value) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = impl.implementation(accessor, args);\n\t\t\tif (result) {\n\t\t\t\tlogService.trace(\n\t\t\t\t\t`Command '${this.id}' was handled by '${impl.name}'.`,\n\t\t\t\t);\n\t\t\t\tif (typeof result === \"boolean\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tlogService.trace(\n\t\t\t`The Command '${this.id}' was not handled by any implementation.`,\n\t\t);\n\t}\n}\n\n//#endregion\n\n/**\n * A command that delegates to another command's implementation.\n *\n * This lets different commands be registered but share the same implementation\n */\nexport class ProxyCommand extends Command {\n\tconstructor(\n\t\tprivate readonly command: Command,\n\t\topts: ICommandOptions,\n\t) {\n\t\tsuper(opts);\n\t}\n\n\tpublic runCommand(\n\t\taccessor: ServicesAccessor,\n\t\targs: any,\n\t): void | Promise<void> {\n\t\treturn this.command.runCommand(accessor, args);\n\t}\n}\n\n//#region EditorCommand\n\nexport interface IContributionCommandOptions<T> extends ICommandOptions {\n\thandler: (controller: T, args: any) => void;\n}\nexport interface EditorControllerCommand<T extends IEditorContribution> {\n\tnew (opts: IContributionCommandOptions<T>): EditorCommand;\n}\nexport abstract class EditorCommand extends Command {\n\t/**\n\t * Create a command class that is bound to a certain editor contribution.\n\t */\n\tpublic static bindToContribution<T extends IEditorContribution>(\n\t\tcontrollerGetter: (editor: ICodeEditor) => T | null,\n\t): EditorControllerCommand<T> {\n\t\treturn class EditorControllerCommandImpl extends EditorCommand {\n\t\t\tprivate readonly _callback: (controller: T, args: any) => void;\n\n\t\t\tconstructor(opts: IContributionCommandOptions<T>) {\n\t\t\t\tsuper(opts);\n\n\t\t\t\tthis._callback = opts.handler;\n\t\t\t}\n\n\t\t\tpublic runEditorCommand(\n\t\t\t\taccessor: ServicesAccessor,\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\targs: any,\n\t\t\t): void {\n\t\t\t\tconst controller = controllerGetter(editor);\n\t\t\t\tif (controller) {\n\t\t\t\t\tthis._callback(controller, args);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static runEditorCommand(\n\t\taccessor: ServicesAccessor,\n\t\targs: any,\n\t\tprecondition: ContextKeyExpression | undefined,\n\t\trunner: (\n\t\t\taccessor: ServicesAccessor | null,\n\t\t\teditor: ICodeEditor,\n\t\t\targs: any,\n\t\t) => void | Promise<void>,\n\t): void | Promise<void> {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\t// Find the editor with text focus or active\n\t\tconst editor =\n\t\t\tcodeEditorService.getFocusedCodeEditor() ||\n\t\t\tcodeEditorService.getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\t// well, at least we tried...\n\t\t\treturn;\n\t\t}\n\n\t\treturn editor.invokeWithinContext((editorAccessor) => {\n\t\t\tconst kbService = editorAccessor.get(IContextKeyService);\n\t\t\tif (!kbService.contextMatchesRules(precondition ?? undefined)) {\n\t\t\t\t// precondition does not hold\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn runner(editorAccessor, editor, args);\n\t\t});\n\t}\n\n\tpublic runCommand(\n\t\taccessor: ServicesAccessor,\n\t\targs: any,\n\t): void | Promise<void> {\n\t\treturn EditorCommand.runEditorCommand(\n\t\t\taccessor,\n\t\t\targs,\n\t\t\tthis.precondition,\n\t\t\t(accessor, editor, args) =>\n\t\t\t\tthis.runEditorCommand(accessor, editor, args),\n\t\t);\n\t}\n\n\tpublic abstract runEditorCommand(\n\t\taccessor: ServicesAccessor | null,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): void | Promise<void>;\n}\n\n//#endregion EditorCommand\n\n//#region EditorAction\n\nexport interface IEditorActionContextMenuOptions {\n\tgroup: string;\n\torder: number;\n\twhen?: ContextKeyExpression;\n\tmenuId?: MenuId;\n}\nexport interface IActionOptions extends ICommandOptions {\n\tlabel: string;\n\talias: string;\n\tcontextMenuOpts?:\n\t\t| IEditorActionContextMenuOptions\n\t\t| IEditorActionContextMenuOptions[];\n}\n\nexport abstract class EditorAction extends EditorCommand {\n\tprivate static convertOptions(opts: IActionOptions): ICommandOptions {\n\t\tlet menuOpts: ICommandMenuOptions[];\n\t\tif (Array.isArray(opts.menuOpts)) {\n\t\t\tmenuOpts = opts.menuOpts;\n\t\t} else if (opts.menuOpts) {\n\t\t\tmenuOpts = [opts.menuOpts];\n\t\t} else {\n\t\t\tmenuOpts = [];\n\t\t}\n\n\t\tfunction withDefaults(\n\t\t\titem: Partial<ICommandMenuOptions>,\n\t\t): ICommandMenuOptions {\n\t\t\tif (!item.menuId) {\n\t\t\t\titem.menuId = MenuId.EditorContext;\n\t\t\t}\n\t\t\tif (!item.title) {\n\t\t\t\titem.title = opts.label;\n\t\t\t}\n\t\t\titem.when = ContextKeyExpr.and(opts.precondition, item.when);\n\t\t\treturn <ICommandMenuOptions>item;\n\t\t}\n\n\t\tif (Array.isArray(opts.contextMenuOpts)) {\n\t\t\tmenuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n\t\t} else if (opts.contextMenuOpts) {\n\t\t\tmenuOpts.push(withDefaults(opts.contextMenuOpts));\n\t\t}\n\n\t\topts.menuOpts = menuOpts;\n\t\treturn <ICommandOptions>opts;\n\t}\n\n\tpublic readonly label: string;\n\tpublic readonly alias: string;\n\n\tconstructor(opts: IActionOptions) {\n\t\tsuper(EditorAction.convertOptions(opts));\n\t\tthis.label = opts.label;\n\t\tthis.alias = opts.alias;\n\t}\n\n\tpublic runEditorCommand(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): void | Promise<void> {\n\t\tthis.reportTelemetry(accessor, editor);\n\t\treturn this.run(accessor, editor, args || {});\n\t}\n\n\tprotected reportTelemetry(accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\ttype EditorActionInvokedClassification = {\n\t\t\towner: \"alexdima\";\n\t\t\tcomment: \"An editor action has been invoked.\";\n\t\t\tname: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The label of the action that was invoked.\";\n\t\t\t};\n\t\t\tid: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The identifier of the action that was invoked.\";\n\t\t\t};\n\t\t};\n\t\ttype EditorActionInvokedEvent = {\n\t\t\tname: string;\n\t\t\tid: string;\n\t\t};\n\t\taccessor\n\t\t\t.get(ITelemetryService)\n\t\t\t.publicLog2<\n\t\t\t\tEditorActionInvokedEvent,\n\t\t\t\tEditorActionInvokedClassification\n\t\t\t>(\"editorActionInvoked\", { name: this.label, id: this.id });\n\t}\n\n\tpublic abstract run(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): void | Promise<void>;\n}\n\nexport type EditorActionImplementation = (\n\taccessor: ServicesAccessor,\n\teditor: ICodeEditor,\n\targs: any,\n) => boolean | Promise<void>;\n\nexport class MultiEditorAction extends EditorAction {\n\tprivate readonly _implementations: [number, EditorActionImplementation][] =\n\t\t[];\n\n\t/**\n\t * A higher priority gets to be looked at first\n\t */\n\tpublic addImplementation(\n\t\tpriority: number,\n\t\timplementation: EditorActionImplementation,\n\t): IDisposable {\n\t\tthis._implementations.push([priority, implementation]);\n\t\tthis._implementations.sort((a, b) => b[0] - a[0]);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0; i < this._implementations.length; i++) {\n\t\t\t\t\tif (this._implementations[i][1] === implementation) {\n\t\t\t\t\t\tthis._implementations.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic run(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): void | Promise<void> {\n\t\tfor (const impl of this._implementations) {\n\t\t\tconst result = impl[1](accessor, editor, args);\n\t\t\tif (result) {\n\t\t\t\tif (typeof result === \"boolean\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//#endregion EditorAction\n\n//#region EditorAction2\n\nexport abstract class EditorAction2 extends Action2 {\n\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\t// Find the editor with text focus or active\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor =\n\t\t\tcodeEditorService.getFocusedCodeEditor() ||\n\t\t\tcodeEditorService.getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\t// well, at least we tried...\n\t\t\treturn;\n\t\t}\n\t\t// precondition does hold\n\t\treturn editor.invokeWithinContext((editorAccessor) => {\n\t\t\tconst kbService = editorAccessor.get(IContextKeyService);\n\t\t\tconst logService = editorAccessor.get(ILogService);\n\t\t\tconst enabled = kbService.contextMatchesRules(\n\t\t\t\tthis.desc.precondition ?? undefined,\n\t\t\t);\n\t\t\tif (!enabled) {\n\t\t\t\tlogService.debug(\n\t\t\t\t\t`[EditorAction2] NOT running command because its precondition is FALSE`,\n\t\t\t\t\tthis.desc.id,\n\t\t\t\t\tthis.desc.precondition?.serialize(),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.runEditorCommand(editorAccessor, editor, ...args);\n\t\t});\n\t}\n\n\tabstract runEditorCommand(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\t...args: any[]\n\t): any;\n}\n\n//#endregion\n\n// --- Registration of commands and actions\n\nexport function registerModelAndPositionCommand(\n\tid: string,\n\thandler: (\n\t\taccessor: ServicesAccessor,\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\t...args: any[]\n\t) => any,\n) {\n\tCommandsRegistry.registerCommand(id, (accessor, ...args) => {\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tconst [resource, position] = args;\n\t\tassertType(URI.isUri(resource));\n\t\tassertType(Position.isIPosition(position));\n\n\t\tconst model = accessor.get(IModelService).getModel(resource);\n\t\tif (model) {\n\t\t\tconst editorPosition = Position.lift(position);\n\t\t\treturn instaService.invokeFunction(\n\t\t\t\thandler,\n\t\t\t\tmodel,\n\t\t\t\teditorPosition,\n\t\t\t\t...args.slice(2),\n\t\t\t);\n\t\t}\n\n\t\treturn accessor\n\t\t\t.get(ITextModelService)\n\t\t\t.createModelReference(resource)\n\t\t\t.then((reference) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = instaService.invokeFunction(\n\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\treference.object.textEditorModel,\n\t\t\t\t\t\t\tPosition.lift(position),\n\t\t\t\t\t\t\targs.slice(2),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t}).finally(() => {\n\t\t\t\t\treference.dispose();\n\t\t\t\t});\n\t\t\t});\n\t});\n}\n\nexport function registerEditorCommand<T extends EditorCommand>(\n\teditorCommand: T,\n): T {\n\tEditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n\treturn editorCommand;\n}\n\nexport function registerEditorAction<T extends EditorAction>(ctor: {\n\tnew (): T;\n}): T {\n\tconst action = new ctor();\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(action);\n\treturn action;\n}\n\nexport function registerMultiEditorAction<T extends MultiEditorAction>(\n\taction: T,\n): T {\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(action);\n\treturn action;\n}\n\nexport function registerInstantiatedEditorAction(\n\teditorAction: EditorAction,\n): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\n\n/**\n * Registers an editor contribution. Editor contributions have a lifecycle which is bound\n * to a specific code editor instance.\n */\nexport function registerEditorContribution<Services extends BrandedService[]>(\n\tid: string,\n\tctor: {\n\t\tnew (editor: ICodeEditor, ...services: Services): IEditorContribution;\n\t},\n\tinstantiation: EditorContributionInstantiation,\n): void {\n\tEditorContributionRegistry.INSTANCE.registerEditorContribution(\n\t\tid,\n\t\tctor,\n\t\tinstantiation,\n\t);\n}\n\n/**\n * Registers a diff editor contribution. Diff editor contributions have a lifecycle which\n * is bound to a specific diff editor instance.\n */\nexport function registerDiffEditorContribution<\n\tServices extends BrandedService[],\n>(\n\tid: string,\n\tctor: {\n\t\tnew (editor: IDiffEditor, ...services: Services): IEditorContribution;\n\t},\n): void {\n\tEditorContributionRegistry.INSTANCE.registerDiffEditorContribution(\n\t\tid,\n\t\tctor,\n\t);\n}\n\nexport namespace EditorExtensionsRegistry {\n\texport function getEditorCommand(commandId: string): EditorCommand {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n\t}\n\n\texport function getEditorActions(): Iterable<EditorAction> {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorActions();\n\t}\n\n\texport function getEditorContributions(): IEditorContributionDescription[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorContributions();\n\t}\n\n\texport function getSomeEditorContributions(\n\t\tids: string[],\n\t): IEditorContributionDescription[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getEditorContributions().filter(\n\t\t\t(c) => ids.indexOf(c.id) >= 0,\n\t\t);\n\t}\n\n\texport function getDiffEditorContributions(): IDiffEditorContributionDescription[] {\n\t\treturn EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n\t}\n}\n\n// Editor extension points\nconst Extensions = {\n\tEditorCommonContributions: \"editor.contributions\",\n};\n\nclass EditorContributionRegistry {\n\tpublic static readonly INSTANCE = new EditorContributionRegistry();\n\n\tprivate readonly editorContributions: IEditorContributionDescription[] = [];\n\tprivate readonly diffEditorContributions: IDiffEditorContributionDescription[] =\n\t\t[];\n\tprivate readonly editorActions: EditorAction[] = [];\n\tprivate readonly editorCommands: { [commandId: string]: EditorCommand } =\n\t\tObject.create(null);\n\n\tconstructor() {}\n\n\tpublic registerEditorContribution<Services extends BrandedService[]>(\n\t\tid: string,\n\t\tctor: {\n\t\t\tnew (\n\t\t\t\teditor: ICodeEditor,\n\t\t\t\t...services: Services\n\t\t\t): IEditorContribution;\n\t\t},\n\t\tinstantiation: EditorContributionInstantiation,\n\t): void {\n\t\tthis.editorContributions.push({\n\t\t\tid,\n\t\t\tctor: ctor as EditorContributionCtor,\n\t\t\tinstantiation,\n\t\t});\n\t}\n\n\tpublic getEditorContributions(): IEditorContributionDescription[] {\n\t\treturn this.editorContributions.slice(0);\n\t}\n\n\tpublic registerDiffEditorContribution<Services extends BrandedService[]>(\n\t\tid: string,\n\t\tctor: {\n\t\t\tnew (\n\t\t\t\teditor: IDiffEditor,\n\t\t\t\t...services: Services\n\t\t\t): IEditorContribution;\n\t\t},\n\t): void {\n\t\tthis.diffEditorContributions.push({\n\t\t\tid,\n\t\t\tctor: ctor as DiffEditorContributionCtor,\n\t\t});\n\t}\n\n\tpublic getDiffEditorContributions(): IDiffEditorContributionDescription[] {\n\t\treturn this.diffEditorContributions.slice(0);\n\t}\n\n\tpublic registerEditorAction(action: EditorAction) {\n\t\taction.register();\n\t\tthis.editorActions.push(action);\n\t}\n\n\tpublic getEditorActions(): Iterable<EditorAction> {\n\t\treturn this.editorActions;\n\t}\n\n\tpublic registerEditorCommand(editorCommand: EditorCommand) {\n\t\teditorCommand.register();\n\t\tthis.editorCommands[editorCommand.id] = editorCommand;\n\t}\n\n\tpublic getEditorCommand(commandId: string): EditorCommand {\n\t\treturn this.editorCommands[commandId] || null;\n\t}\n}\nRegistry.add(\n\tExtensions.EditorCommonContributions,\n\tEditorContributionRegistry.INSTANCE,\n);\n\nfunction registerCommand<T extends Command>(command: T): T {\n\tcommand.register();\n\treturn command;\n}\n\nexport const UndoCommand = registerCommand(\n\tnew MultiCommand({\n\t\tid: \"undo\",\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorCore,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t},\n\t\tmenuOpts: [\n\t\t\t{\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: \"1_do\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{ key: \"miUndo\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Undo\",\n\t\t\t\t),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tmenuId: MenuId.CommandPalette,\n\t\t\t\tgroup: \"\",\n\t\t\t\ttitle: nls.localize(\"undo\", \"Undo\"),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t],\n\t}),\n);\n\nregisterCommand(\n\tnew ProxyCommand(UndoCommand, {\n\t\tid: \"default:undo\",\n\t\tprecondition: undefined,\n\t}),\n);\n\nexport const RedoCommand = registerCommand(\n\tnew MultiCommand({\n\t\tid: \"redo\",\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorCore,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyY,\n\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyZ],\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyZ },\n\t\t},\n\t\tmenuOpts: [\n\t\t\t{\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: \"1_do\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{ key: \"miRedo\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Redo\",\n\t\t\t\t),\n\t\t\t\torder: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tmenuId: MenuId.CommandPalette,\n\t\t\t\tgroup: \"\",\n\t\t\t\ttitle: nls.localize(\"redo\", \"Redo\"),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t],\n\t}),\n);\n\nregisterCommand(\n\tnew ProxyCommand(RedoCommand, {\n\t\tid: \"default:redo\",\n\t\tprecondition: undefined,\n\t}),\n);\n\nexport const SelectAllCommand = registerCommand(\n\tnew MultiCommand({\n\t\tid: \"editor.action.selectAll\",\n\t\tprecondition: undefined,\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorCore,\n\t\t\tkbExpr: null,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyA,\n\t\t},\n\t\tmenuOpts: [\n\t\t\t{\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"1_basic\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{ key: \"miSelectAll\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Select All\",\n\t\t\t\t),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tmenuId: MenuId.CommandPalette,\n\t\t\t\tgroup: \"\",\n\t\t\t\ttitle: nls.localize(\"selectAll\", \"Select All\"),\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t],\n\t}),\n);\n"],
  "mappings": "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",
  "names": ["EditorContributionInstantiation", "accessor", "args", "EditorExtensionsRegistry"]
}
