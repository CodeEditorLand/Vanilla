{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/gpu/viewGpuContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport { addDisposableListener, getActiveWindow } from '../../../base/browser/dom.js';\nimport { createFastDomNode, type FastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport type { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport type { ViewLineOptions } from '../viewParts/viewLines/viewLineOptions.js';\nimport { observableValue, runOnChange, type IObservable } from '../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { TextureAtlas } from './atlas/textureAtlas.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { INotificationService, IPromptChoice, Severity } from '../../../platform/notification/common/notification.js';\nimport { GPULifecycle } from './gpuDisposable.js';\nimport { ensureNonNullable, observeDevicePixelDimensions } from './gpuUtils.js';\n\nexport class ViewGpuContext extends Disposable {\n\treadonly canvas: FastDomNode<HTMLCanvasElement>;\n\treadonly ctx: GPUCanvasContext;\n\n\treadonly device: Promise<GPUDevice>;\n\n\tprivate static _atlas: TextureAtlas | undefined;\n\n\t/**\n\t * The shared texture atlas to use across all views.\n\t *\n\t * @throws if called before the GPU device is resolved\n\t */\n\tstatic get atlas(): TextureAtlas {\n\t\tif (!ViewGpuContext._atlas) {\n\t\t\tthrow new BugIndicatingError('Cannot call ViewGpuContext.textureAtlas before device is resolved');\n\t\t}\n\t\treturn ViewGpuContext._atlas;\n\t}\n\t/**\n\t * The shared texture atlas to use across all views. This is a convenience alias for\n\t * {@link ViewGpuContext.atlas}.\n\t *\n\t * @throws if called before the GPU device is resolved\n\t */\n\tget atlas(): TextureAtlas {\n\t\treturn ViewGpuContext.atlas;\n\t}\n\n\treadonly canvasDevicePixelDimensions: IObservable<{ width: number; height: number }>;\n\treadonly devicePixelRatio: IObservable<number>;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.canvas = createFastDomNode(document.createElement('canvas'));\n\t\tthis.canvas.setClassName('editorCanvas');\n\n\t\tthis.ctx = ensureNonNullable(this.canvas.domNode.getContext('webgpu'));\n\n\t\tthis.device = GPULifecycle.requestDevice((message) => {\n\t\t\tconst choices: IPromptChoice[] = [{\n\t\t\t\tlabel: nls.localize('editor.dom.render', \"Use DOM-based rendering\"),\n\t\t\t\trun: () => this.configurationService.updateValue('editor.experimentalGpuAcceleration', 'off'),\n\t\t\t}];\n\t\t\tthis._notificationService.prompt(Severity.Warning, message, choices);\n\t\t}).then(ref => this._register(ref).object);\n\t\tthis.device.then(device => {\n\t\t\tif (!ViewGpuContext._atlas) {\n\t\t\t\tViewGpuContext._atlas = this._instantiationService.createInstance(TextureAtlas, device.limits.maxTextureDimension2D, undefined);\n\t\t\t\trunOnChange(this.devicePixelRatio, () => ViewGpuContext.atlas.clear());\n\t\t\t}\n\t\t});\n\n\t\tconst dprObs = observableValue(this, getActiveWindow().devicePixelRatio);\n\t\tthis._register(addDisposableListener(getActiveWindow(), 'resize', () => {\n\t\t\tdprObs.set(getActiveWindow().devicePixelRatio, undefined);\n\t\t}));\n\t\tthis.devicePixelRatio = dprObs;\n\n\t\tconst canvasDevicePixelDimensions = observableValue(this, { width: this.canvas.domNode.width, height: this.canvas.domNode.height });\n\t\tthis._register(observeDevicePixelDimensions(\n\t\t\tthis.canvas.domNode,\n\t\t\tgetActiveWindow(),\n\t\t\t(width, height) => {\n\t\t\t\tthis.canvas.domNode.width = width;\n\t\t\t\tthis.canvas.domNode.height = height;\n\t\t\t\tcanvasDevicePixelDimensions.set({ width, height }, undefined);\n\t\t\t}\n\t\t));\n\t\tthis.canvasDevicePixelDimensions = canvasDevicePixelDimensions;\n\t}\n\n\t/**\n\t * This method determines which lines can be and are allowed to be rendered using the GPU\n\t * renderer. Eventually this should trend all lines, except maybe exceptional cases like\n\t * decorations that use class names.\n\t */\n\tpublic static canRender(options: ViewLineOptions, viewportData: ViewportData, lineNumber: number): boolean {\n\t\tconst data = viewportData.getViewLineRenderingData(lineNumber);\n\t\tif (\n\t\t\tdata.containsRTL ||\n\t\t\tdata.maxColumn > 200 ||\n\t\t\tdata.continuesWithWrappedLine ||\n\t\t\tdata.inlineDecorations.length > 0\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,uBAAuB,uBAAuB;AACvD,SAAS,yBAA2C;AACpD,SAAS,0BAA0B;AACnC,SAAS,kBAAkB;AAG3B,SAAS,iBAAiB,mBAAqC;AAC/D,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,6BAA6B;AACtC,SAAS,sBAAsB,eAAe,gBAAgB;AAC9D,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB,oCAAoC;AAEzD,IAAM,iBAAN,cAA6B,WAAW;AAAA,EAgC9C,YACyC,uBACD,sBACC,sBACvC;AACD,UAAM;AAJkC;AACD;AACC;AAIxC,SAAK,SAAS,kBAAkB,SAAS,cAAc,QAAQ,CAAC;AAChE,SAAK,OAAO,aAAa,cAAc;AAEvC,SAAK,MAAM,kBAAkB,KAAK,OAAO,QAAQ,WAAW,QAAQ,CAAC;AAErE,SAAK,SAAS,aAAa,cAAc,CAAC,YAAY;AACrD,YAAM,UAA2B,CAAC;AAAA,QACjC,OAAO,IAAI,SAAS,qBAAqB,yBAAyB;AAAA,QAClE,KAAK,6BAAM,KAAK,qBAAqB,YAAY,sCAAsC,KAAK,GAAvF;AAAA,MACN,CAAC;AACD,WAAK,qBAAqB,OAAO,SAAS,SAAS,SAAS,OAAO;AAAA,IACpE,CAAC,EAAE,KAAK,SAAO,KAAK,UAAU,GAAG,EAAE,MAAM;AACzC,SAAK,OAAO,KAAK,YAAU;AAC1B,UAAI,CAAC,eAAe,QAAQ;AAC3B,uBAAe,SAAS,KAAK,sBAAsB,eAAe,cAAc,OAAO,OAAO,uBAAuB,MAAS;AAC9H,oBAAY,KAAK,kBAAkB,MAAM,eAAe,MAAM,MAAM,CAAC;AAAA,MACtE;AAAA,IACD,CAAC;AAED,UAAM,SAAS,gBAAgB,MAAM,gBAAgB,EAAE,gBAAgB;AACvE,SAAK,UAAU,sBAAsB,gBAAgB,GAAG,UAAU,MAAM;AACvE,aAAO,IAAI,gBAAgB,EAAE,kBAAkB,MAAS;AAAA,IACzD,CAAC,CAAC;AACF,SAAK,mBAAmB;AAExB,UAAM,8BAA8B,gBAAgB,MAAM,EAAE,OAAO,KAAK,OAAO,QAAQ,OAAO,QAAQ,KAAK,OAAO,QAAQ,OAAO,CAAC;AAClI,SAAK,UAAU;AAAA,MACd,KAAK,OAAO;AAAA,MACZ,gBAAgB;AAAA,MAChB,CAAC,OAAO,WAAW;AAClB,aAAK,OAAO,QAAQ,QAAQ;AAC5B,aAAK,OAAO,QAAQ,SAAS;AAC7B,oCAA4B,IAAI,EAAE,OAAO,OAAO,GAAG,MAAS;AAAA,MAC7D;AAAA,IACD,CAAC;AACD,SAAK,8BAA8B;AAAA,EACpC;AAAA,EA/FD,OAoB+C;AAAA;AAAA;AAAA,EACrC;AAAA,EACA;AAAA,EAEA;AAAA,EAET,OAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,WAAW,QAAsB;AAChC,QAAI,CAAC,eAAe,QAAQ;AAC3B,YAAM,IAAI,mBAAmB,mEAAmE;AAAA,IACjG;AACA,WAAO,eAAe;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAsB;AACzB,WAAO,eAAe;AAAA,EACvB;AAAA,EAES;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoDT,OAAc,UAAU,SAA0B,cAA4B,YAA6B;AAC1G,UAAM,OAAO,aAAa,yBAAyB,UAAU;AAC7D,QACC,KAAK,eACL,KAAK,YAAY,OACjB,KAAK,4BACL,KAAK,kBAAkB,SAAS,GAC/B;AACD,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AACD;AA9Fa,iBAAN;AAAA,EAiCJ;AAAA,EACA;AAAA,EACA;AAAA,GAnCU;",
  "names": []
}
