import{getActiveWindow as j}from"../../../base/browser/dom.js";import{BugIndicatingError as z}from"../../../base/common/errors.js";import{Disposable as D}from"../../../base/common/lifecycle.js";import{EditorOption as E}from"../../common/config/editorOptions.js";import{CursorColumns as N}from"../../common/core/cursorColumns.js";import{fullFileRenderStrategyWgsl as k}from"./fullFileRenderStrategy.wgsl.js";import{BindingId as V}from"./gpu.js";import{GPULifecycle as S}from"./gpuDisposable.js";import{quadVertices as Y}from"./gpuUtils.js";import{GlyphRasterizer as X}from"./raster/glyphRasterizer.js";import{ViewGpuContext as q}from"./viewGpuContext.js";var F=(g=>(g[g.IndicesPerCell=6]="IndicesPerCell",g))(F||{}),W=(e=>(e[e.FloatsPerEntry=6]="FloatsPerEntry",e[e.BytesPerEntry=24]="BytesPerEntry",e[e.Offset_X=0]="Offset_X",e[e.Offset_Y=1]="Offset_Y",e[e.Offset_Unused1=2]="Offset_Unused1",e[e.Offset_Unused2=3]="Offset_Unused2",e[e.GlyphIndex=4]="GlyphIndex",e[e.TextureIndex=5]="TextureIndex",e))(W||{});class o extends D{constructor(t,n,c,i){super();this._context=t;this._device=n;this._canvas=c;this._atlas=i;const r=this._context.configuration.options.get(E.fontFamily),p=this._context.configuration.options.get(E.fontSize);this._glyphRasterizer=this._register(new X(p,r));const e=o._lineCount*o._columnCount*6*Float32Array.BYTES_PER_ELEMENT;this._cellBindBuffer=this._register(S.createBuffer(this._device,{label:"Monaco full file cell buffer",size:e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})).object,this._cellValueBuffers=[new ArrayBuffer(e),new ArrayBuffer(e)];const s=2;this._scrollOffsetBindBuffer=this._register(S.createBuffer(this._device,{label:"Monaco scroll offset buffer",size:s*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})).object,this._scrollOffsetValueBuffers=[new Float32Array(s),new Float32Array(s)]}static _lineCount=3e3;static _columnCount=200;wgsl=k;_glyphRasterizer;_cellBindBuffer;_cellValueBuffers;_activeDoubleBufferIndex=0;_upToDateLines=[new Set,new Set];_visibleObjectCount=0;_scrollOffsetBindBuffer;_scrollOffsetValueBuffers;get bindGroupEntries(){return[{binding:V.Cells,resource:{buffer:this._cellBindBuffer}},{binding:V.ScrollOffset,resource:{buffer:this._scrollOffsetBindBuffer}}]}reset(){for(const t of[0,1]){const n=new Float32Array(this._cellValueBuffers[t]);n.fill(0,0,n.length),this._device.queue.writeBuffer(this._cellBindBuffer,0,n.buffer,0,n.byteLength),this._upToDateLines[t].clear()}this._visibleObjectCount=0}update(t,n){let c="",i=0,r=0,p=0,e=0,s=0,w=0,O=0,P=0,l=0,x,d=0,_=0,a=0,T=0,m,L="",A=0,C=0,h;const v=j(),M=this._context.viewLayout.getCurrentScrollTop()*v.devicePixelRatio,I=this._scrollOffsetValueBuffers[this._activeDoubleBufferIndex];I[1]=M,this._device.queue.writeBuffer(this._scrollOffsetBindBuffer,0,I);const f=new Float32Array(this._cellValueBuffers[this._activeDoubleBufferIndex]),b=o._columnCount*6,R=this._upToDateLines[this._activeDoubleBufferIndex];let u=Number.MAX_SAFE_INTEGER,y=0;for(i=t.startLineNumber;i<=t.endLineNumber;i++)if(q.canRender(n,t,i)){u=Math.min(u,i),y=Math.max(y,i),m=t.getViewLineRenderingData(i),L=m.content,l=0,h=m.tokens,_=m.minColumn-1,a=0;for(let B=0,U=h.getCount();B<U;B++)if(a=h.getEndOffset(B),!(a<=_)){for(T=h.getMetadata(B),r=_;r<a&&!(r>o._columnCount);r++)if(c=L.charAt(r),c!==" "){if(c==="	"){l=N.nextRenderTabStop(r+l,m.tabSize)-r-1;continue}x=this._atlas.getGlyph(this._glyphRasterizer,c,T),p=Math.round((r+l)*n.spaceWidth*v.devicePixelRatio),e=Math.ceil((t.relativeVerticalOffset[i-t.startLineNumber]+Math.floor((t.lineHeight-this._context.configuration.options.get(E.fontSize))/2))*v.devicePixelRatio),s=p/this._canvas.width,w=e/this._canvas.height,O=s*2-1,P=w*2-1,d=((i-1)*o._columnCount+(r+l))*6,f[d+0]=O,f[d+1]=-P,f[d+4]=x.glyphIndex,f[d+5]=x.pageIndex}_=a}A=((i-1)*o._columnCount+(a+l))*6,C=i*o._columnCount*6,f.fill(0,A,C),R.add(i)}const G=(t.endLineNumber-t.startLineNumber+1)*b;return u<=y&&this._device.queue.writeBuffer(this._cellBindBuffer,(u-1)*b*Float32Array.BYTES_PER_ELEMENT,f.buffer,(u-1)*b*Float32Array.BYTES_PER_ELEMENT,(y-u+1)*b*Float32Array.BYTES_PER_ELEMENT),this._activeDoubleBufferIndex=this._activeDoubleBufferIndex?0:1,this._visibleObjectCount=G,G}draw(t,n){if(this._visibleObjectCount<=0)throw new z("Attempt to draw 0 objects");t.draw(Y.length/2,this._visibleObjectCount,void 0,(n.startLineNumber-1)*o._columnCount)}}export{o as FullFileRenderStrategy};
