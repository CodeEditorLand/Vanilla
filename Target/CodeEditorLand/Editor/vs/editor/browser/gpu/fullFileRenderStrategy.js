import{getActiveWindow as U}from"../../../base/browser/dom.js";import{BugIndicatingError as j}from"../../../base/common/errors.js";import{Disposable as z}from"../../../base/common/lifecycle.js";import{EditorOption as w}from"../../common/config/editorOptions.js";import{CursorColumns as D}from"../../common/core/cursorColumns.js";import{fullFileRenderStrategyWgsl as N}from"./fullFileRenderStrategy.wgsl.js";import{BindingId as V}from"./gpu.js";import{GPULifecycle as S}from"./gpuDisposable.js";import{quadVertices as k}from"./gpuUtils.js";import{GlyphRasterizer as Y}from"./raster/glyphRasterizer.js";import{ViewGpuContext as X}from"./viewGpuContext.js";var q=(x=>(x[x.IndicesPerCell=6]="IndicesPerCell",x))(q||{}),F=(e=>(e[e.FloatsPerEntry=6]="FloatsPerEntry",e[e.BytesPerEntry=24]="BytesPerEntry",e[e.Offset_X=0]="Offset_X",e[e.Offset_Y=1]="Offset_Y",e[e.Offset_Unused1=2]="Offset_Unused1",e[e.Offset_Unused2=3]="Offset_Unused2",e[e.GlyphIndex=4]="GlyphIndex",e[e.TextureIndex=5]="TextureIndex",e))(F||{});class o extends z{constructor(t,n,c,r){super();this._context=t;this._device=n;this._canvas=c;this._atlas=r;const i=this._context.configuration.options.get(w.fontFamily),_=this._context.configuration.options.get(w.fontSize);this._glyphRasterizer=this._register(new Y(_,i));const e=o._lineCount*o._columnCount*6*Float32Array.BYTES_PER_ELEMENT;this._cellBindBuffer=this._register(S.createBuffer(this._device,{label:"Monaco full file cell buffer",size:e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST})).object,this._cellValueBuffers=[new ArrayBuffer(e),new ArrayBuffer(e)];const s=2;this._scrollOffsetBindBuffer=this._register(S.createBuffer(this._device,{label:"Monaco scroll offset buffer",size:s*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})).object,this._scrollOffsetValueBuffers=[new Float32Array(s),new Float32Array(s)]}static _lineCount=3e3;static _columnCount=200;wgsl=N;_glyphRasterizer;_cellBindBuffer;_cellValueBuffers;_activeDoubleBufferIndex=0;_upToDateLines=[new Set,new Set];_visibleObjectCount=0;_scrollOffsetBindBuffer;_scrollOffsetValueBuffers;get bindGroupEntries(){return[{binding:V.Cells,resource:{buffer:this._cellBindBuffer}},{binding:V.ScrollOffset,resource:{buffer:this._scrollOffsetBindBuffer}}]}reset(){for(const t of[0,1]){const n=new Float32Array(this._cellValueBuffers[t]);n.fill(0,0,n.length),this._device.queue.writeBuffer(this._cellBindBuffer,0,n.buffer,0,n.byteLength),this._upToDateLines[t].clear()}this._visibleObjectCount=0}update(t,n){let c="",r=0,i=0,_=0,e=0,s=0,L=0,O=0,T=0,l=0,v,d=0,p=0,a=0,P=0,m,C="",A=0,I=0,h;const y=U().devicePixelRatio,E=this._scrollOffsetValueBuffers[this._activeDoubleBufferIndex];E[0]=this._context.viewLayout.getCurrentScrollLeft()*y,E[1]=this._context.viewLayout.getCurrentScrollTop()*y,this._device.queue.writeBuffer(this._scrollOffsetBindBuffer,0,E);const f=new Float32Array(this._cellValueBuffers[this._activeDoubleBufferIndex]),b=o._columnCount*6,M=this._upToDateLines[this._activeDoubleBufferIndex];let u=Number.MAX_SAFE_INTEGER,g=0;for(r=t.startLineNumber;r<=t.endLineNumber;r++)if(X.canRender(n,t,r)){u=Math.min(u,r),g=Math.max(g,r),m=t.getViewLineRenderingData(r),C=m.content,l=0,h=m.tokens,p=m.minColumn-1,a=0;for(let B=0,R=h.getCount();B<R;B++)if(a=h.getEndOffset(B),!(a<=p)){for(P=h.getMetadata(B),i=p;i<a&&!(i>o._columnCount);i++)if(c=C.charAt(i),c!==" "){if(c==="	"){l=D.nextRenderTabStop(i+l,m.tabSize)-i-1;continue}v=this._atlas.getGlyph(this._glyphRasterizer,c,P),_=Math.round((i+l)*n.spaceWidth*y),e=Math.ceil((t.relativeVerticalOffset[r-t.startLineNumber]+Math.floor((t.lineHeight-this._context.configuration.options.get(w.fontSize))/2))*y),s=_/this._canvas.width,L=e/this._canvas.height,O=s*2-1,T=L*2-1,d=((r-1)*o._columnCount+(i+l))*6,f[d+0]=O,f[d+1]=-T,f[d+4]=v.glyphIndex,f[d+5]=v.pageIndex}p=a}A=((r-1)*o._columnCount+(a+l))*6,I=r*o._columnCount*6,f.fill(0,A,I),M.add(r)}const G=(t.endLineNumber-t.startLineNumber+1)*b;return u<=g&&this._device.queue.writeBuffer(this._cellBindBuffer,(u-1)*b*Float32Array.BYTES_PER_ELEMENT,f.buffer,(u-1)*b*Float32Array.BYTES_PER_ELEMENT,(g-u+1)*b*Float32Array.BYTES_PER_ELEMENT),this._activeDoubleBufferIndex=this._activeDoubleBufferIndex?0:1,this._visibleObjectCount=G,G}draw(t,n){if(this._visibleObjectCount<=0)throw new j("Attempt to draw 0 objects");t.draw(k.length/2,this._visibleObjectCount,void 0,(n.startLineNumber-1)*o._columnCount)}}export{o as FullFileRenderStrategy};
