var p=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var h=(l,s,a,t)=>{for(var e=t>1?void 0:t?c(s,a):s,i=l.length-1,r;i>=0;i--)(r=l[i])&&(e=(t?r(s,a,e):r(e))||e);return t&&e&&p(s,a,e),e},n=(l,s)=>(a,t)=>s(a,t,l);import{Event as u}from"../../../../base/common/event.js";import{Disposable as g,toDisposable as _}from"../../../../base/common/lifecycle.js";import{TwoKeyMap as m}from"../../../../base/common/map.js";import{ILogService as v,LogLevel as y}from"../../../../platform/log/common/log.js";import{IThemeService as d}from"../../../../platform/theme/common/themeService.js";import{TextureAtlasShelfAllocator as f}from"./textureAtlasShelfAllocator.js";import{TextureAtlasSlabAllocator as b}from"./textureAtlasSlabAllocator.js";let o=class extends g{constructor(a,t,e,i,r){super();this._logService=i;this._themeService=r;switch(this._canvas=new OffscreenCanvas(t,t),e){case"shelf":this._allocator=new f(this._canvas,a);break;case"slab":this._allocator=new b(this._canvas,a);break;default:this._allocator=e(this._canvas,a);break}this._register(u.runAndSubscribe(this._themeService.onDidColorThemeChange,()=>{this._colorMap=this._themeService.getColorTheme().tokenColorMap})),this._register(_(()=>{this._canvas.width=1,this._canvas.height=1}))}_version=0;get version(){return this._version}static maximumGlyphCount=5e3;_usedArea={left:0,top:0,right:0,bottom:0};get usedArea(){return this._usedArea}_canvas;get source(){return this._canvas}_glyphMap=new m;_glyphInOrderSet=new Set;get glyphs(){return this._glyphInOrderSet.values()}_allocator;_colorMap;getGlyph(a,t,e){return this._glyphMap.get(t,e)??this._createGlyph(a,t,e)}_createGlyph(a,t,e){if(this._glyphInOrderSet.size>=o.maximumGlyphCount)return;const i=a.rasterizeGlyph(t,e,this._colorMap),r=this._allocator.allocate(i);if(r!==void 0)return this._glyphMap.set(t,e,r),this._glyphInOrderSet.add(r),this._version++,this._usedArea.right=Math.max(this._usedArea.right,r.x+r.w-1),this._usedArea.bottom=Math.max(this._usedArea.bottom,r.y+r.h-1),this._logService.getLevel()===y.Trace&&this._logService.trace("New glyph",{chars:t,metadata:e,rasterizedGlyph:i,glyph:r}),r}getUsagePreview(){return this._allocator.getUsagePreview()}getStats(){return this._allocator.getStats()}};o=h([n(3,v),n(4,d)],o);export{o as TextureAtlasPage};
