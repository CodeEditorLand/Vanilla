var p=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var h=(l,s,r,t)=>{for(var e=t>1?void 0:t?c(s,r):s,o=l.length-1,a;o>=0;o--)(a=l[o])&&(e=(t?a(s,r,e):a(e))||e);return t&&e&&p(s,r,e),e},n=(l,s)=>(r,t)=>s(r,t,l);import{Event as u}from"../../../../base/common/event.js";import{Disposable as g,toDisposable as y}from"../../../../base/common/lifecycle.js";import{ThreeKeyMap as _}from"../../../../base/common/map.js";import{ILogService as m,LogLevel as v}from"../../../../platform/log/common/log.js";import{IThemeService as d}from"../../../../platform/theme/common/themeService.js";import{TextureAtlasShelfAllocator as f}from"./textureAtlasShelfAllocator.js";import{TextureAtlasSlabAllocator as b}from"./textureAtlasSlabAllocator.js";let i=class extends g{constructor(r,t,e,o,a){super();this._logService=o;this._themeService=a;switch(this._canvas=new OffscreenCanvas(t,t),e){case"shelf":this._allocator=new f(this._canvas,r);break;case"slab":this._allocator=new b(this._canvas,r);break;default:this._allocator=e(this._canvas,r);break}this._register(u.runAndSubscribe(this._themeService.onDidColorThemeChange,()=>{this._colorMap=this._themeService.getColorTheme().tokenColorMap})),this._register(y(()=>{this._canvas.width=1,this._canvas.height=1}))}_version=0;get version(){return this._version}static maximumGlyphCount=5e3;_usedArea={left:0,top:0,right:0,bottom:0};get usedArea(){return this._usedArea}_canvas;get source(){return this._canvas}_glyphMap=new _;_glyphInOrderSet=new Set;get glyphs(){return this._glyphInOrderSet.values()}_allocator;_colorMap;getGlyph(r,t,e){return this._glyphMap.get(t,e,r.cacheKey)??this._createGlyph(r,t,e)}_createGlyph(r,t,e){if(this._glyphInOrderSet.size>=i.maximumGlyphCount)return;const o=r.rasterizeGlyph(t,e,this._colorMap),a=this._allocator.allocate(o);if(a!==void 0)return this._glyphMap.set(t,e,r.cacheKey,a),this._glyphInOrderSet.add(a),this._version++,this._usedArea.right=Math.max(this._usedArea.right,a.x+a.w-1),this._usedArea.bottom=Math.max(this._usedArea.bottom,a.y+a.h-1),this._logService.getLevel()===v.Trace&&this._logService.trace("New glyph",{chars:t,metadata:e,rasterizedGlyph:o,glyph:a}),a}getUsagePreview(){return this._allocator.getUsagePreview()}getStats(){return this._allocator.getStats()}};i=h([n(3,m),n(4,d)],i);export{i as TextureAtlasPage};
