import{BugIndicatingError as u}from"../../../../base/common/errors.js";import{ensureNonNullable as h}from"../gpuUtils.js";import{UsagePreviewColors as l}from"./atlas.js";class d{constructor(e,s){this._canvas=e;this._textureIndex=s;this._ctx=h(this._canvas.getContext("2d",{willReadFrequently:!0}))}_ctx;_currentRow={x:0,y:0,h:0};_allocatedGlyphs=new Set;_nextIndex=0;allocate(e){const s=e.boundingBox.right-e.boundingBox.left+1,r=e.boundingBox.bottom-e.boundingBox.top+1;if(s>this._canvas.width||r>this._canvas.height)throw new u("Glyph is too large for the atlas page");if(e.boundingBox.right-e.boundingBox.left+1>this._canvas.width-this._currentRow.x&&(this._currentRow.x=0,this._currentRow.y+=this._currentRow.h,this._currentRow.h=1),this._currentRow.y+e.boundingBox.bottom-e.boundingBox.top+1>this._canvas.height)return;this._ctx.drawImage(e.source,e.boundingBox.left,e.boundingBox.top,s,r,this._currentRow.x,this._currentRow.y,s,r);const o={pageIndex:this._textureIndex,glyphIndex:this._nextIndex++,x:this._currentRow.x,y:this._currentRow.y,w:s,h:r,originOffsetX:e.originOffset.x,originOffsetY:e.originOffset.y};return this._currentRow.x+=s,this._currentRow.h=Math.max(this._currentRow.h,r),this._allocatedGlyphs.add(o),o}getUsagePreview(){const e=this._canvas.width,s=this._canvas.height,r=new OffscreenCanvas(e,s),o=h(r.getContext("2d"));o.fillStyle=l.Unused,o.fillRect(0,0,e,s);const i=new Map,a=new Map;for(const t of this._allocatedGlyphs)i.set(t.y,Math.max(i.get(t.y)??0,t.h)),a.set(t.y,Math.max(a.get(t.y)??0,t.x+t.w));for(const t of this._allocatedGlyphs)o.fillStyle=l.Used,o.fillRect(t.x,t.y,t.w,t.h),o.fillStyle=l.Wasted,o.fillRect(t.x,t.y+t.h,t.w,i.get(t.y)-t.h);for(const[t,n]of a.entries())t!==this._currentRow.y&&(o.fillStyle=l.Wasted,o.fillRect(n,t,e-n,i.get(t)));return r.convertToBlob()}getStats(){const e=this._canvas.width,s=this._canvas.height;let r=0,o=0;const i=e*s,a=new Map,t=new Map;for(const n of this._allocatedGlyphs)a.set(n.y,Math.max(a.get(n.y)??0,n.h)),t.set(n.y,Math.max(t.get(n.y)??0,n.x+n.w));for(const n of this._allocatedGlyphs)r+=n.w*n.h,o+=n.w*(a.get(n.y)-n.h);for(const[n,c]of t.entries())n!==this._currentRow.y&&(o+=(e-c)*a.get(n));return[`page${this._textureIndex}:`,`     Total: ${i} (${e}x${s})`,`      Used: ${r} (${(r/i*100).toPrecision(2)}%)`,`    Wasted: ${o} (${(o/i*100).toPrecision(2)}%)`,`Efficiency: ${(r/(r+o)*100).toPrecision(2)}%`].join(`
`)}}export{d as TextureAtlasShelfAllocator};
