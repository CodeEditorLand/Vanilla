var f=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var h=(c,o,n,t)=>{for(var i=t>1?void 0:t?u(o,n):o,a=c.length-1,s;a>=0;a--)(s=c[a])&&(i=(t?s(o,n,i):s(i))||i);return t&&i&&f(o,n,i),i},l=(c,o)=>(n,t)=>o(n,t,c);import*as g from"../../../nls.js";import{addDisposableListener as b,getActiveWindow as m}from"../../../base/browser/dom.js";import{createFastDomNode as D}from"../../../base/browser/fastDomNode.js";import{BugIndicatingError as x}from"../../../base/common/errors.js";import{Disposable as y}from"../../../base/common/lifecycle.js";import{observableValue as p,runOnChange as I}from"../../../base/common/observable.js";import{IInstantiationService as P}from"../../../platform/instantiation/common/instantiation.js";import{TextureAtlas as N}from"./atlas/textureAtlas.js";import{IConfigurationService as w}from"../../../platform/configuration/common/configuration.js";import{INotificationService as R,Severity as S}from"../../../platform/notification/common/notification.js";import{GPULifecycle as L}from"./gpuDisposable.js";import{ensureNonNullable as O,observeDevicePixelDimensions as C}from"./gpuUtils.js";import{RectangleRenderer as A}from"./rectangleRenderer.js";let e=class extends y{constructor(n,t,i,a){super();this._instantiationService=t;this._notificationService=i;this.configurationService=a;this.canvas=D(document.createElement("canvas")),this.canvas.setClassName("editorCanvas"),this.ctx=O(this.canvas.domNode.getContext("webgpu")),this.device=L.requestDevice(r=>{const d=[{label:g.localize("editor.dom.render","Use DOM-based rendering"),run:()=>this.configurationService.updateValue("editor.experimentalGpuAcceleration","off")}];this._notificationService.prompt(S.Warning,r,d)}).then(r=>this._register(r).object),this.device.then(r=>{e._atlas||(e._atlas=this._instantiationService.createInstance(N,r.limits.maxTextureDimension2D,void 0),I(this.devicePixelRatio,()=>e.atlas.clear()))}),this.rectangleRenderer=this._instantiationService.createInstance(A,n,this.canvas.domNode,this.ctx,this.device);const s=p(this,m().devicePixelRatio);this._register(b(m(),"resize",()=>{s.set(m().devicePixelRatio,void 0)})),this.devicePixelRatio=s;const v=p(this,{width:this.canvas.domNode.width,height:this.canvas.domNode.height});this._register(C(this.canvas.domNode,m(),(r,d)=>{this.canvas.domNode.width=r,this.canvas.domNode.height=d,v.set({width:r,height:d},void 0)})),this.canvasDevicePixelDimensions=v}canvas;ctx;device;rectangleRenderer;static _atlas;static get atlas(){if(!e._atlas)throw new x("Cannot call ViewGpuContext.textureAtlas before device is resolved");return e._atlas}get atlas(){return e.atlas}canvasDevicePixelDimensions;devicePixelRatio;static canRender(n,t,i){const a=t.getViewLineRenderingData(i);return!(a.containsRTL||a.maxColumn>200||a.continuesWithWrappedLine||a.inlineDecorations.length>0)}};e=h([l(1,P),l(2,R),l(3,w)],e);export{e as ViewGpuContext};
