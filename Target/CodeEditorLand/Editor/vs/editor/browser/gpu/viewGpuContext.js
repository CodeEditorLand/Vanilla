var p=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var v=(c,o,r,a)=>{for(var t=a>1?void 0:a?f(o,r):o,e=c.length-1,s;e>=0;e--)(s=c[e])&&(t=(a?s(o,r,t):s(t))||t);return a&&t&&p(o,r,t),t},d=(c,o)=>(r,a)=>o(r,a,c);import*as u from"../../../nls.js";import{addDisposableListener as b,getActiveWindow as m}from"../../../base/browser/dom.js";import{createFastDomNode as g}from"../../../base/browser/fastDomNode.js";import{BugIndicatingError as D}from"../../../base/common/errors.js";import{Disposable as x}from"../../../base/common/lifecycle.js";import{observableValue as h,runOnChange as P}from"../../../base/common/observable.js";import{IInstantiationService as y}from"../../../platform/instantiation/common/instantiation.js";import{TextureAtlas as I}from"./atlas/textureAtlas.js";import{IConfigurationService as N}from"../../../platform/configuration/common/configuration.js";import{INotificationService as S,Severity as L}from"../../../platform/notification/common/notification.js";import{GPULifecycle as w}from"./gpuDisposable.js";import{ensureNonNullable as O,observeDevicePixelDimensions as R}from"./gpuUtils.js";let i=class extends x{constructor(r,a,t){super();this._instantiationService=r;this._notificationService=a;this.configurationService=t;this.canvas=g(document.createElement("canvas")),this.canvas.setClassName("editorCanvas"),this.ctx=O(this.canvas.domNode.getContext("webgpu")),this.device=w.requestDevice(n=>{const l=[{label:u.localize("editor.dom.render","Use DOM-based rendering"),run:()=>this.configurationService.updateValue("editor.experimentalGpuAcceleration","off")}];this._notificationService.prompt(L.Warning,n,l)}).then(n=>this._register(n).object),this.device.then(n=>{i._atlas||(i._atlas=this._instantiationService.createInstance(I,n.limits.maxTextureDimension2D,void 0),P(this.devicePixelRatio,()=>i.atlas.clear()))});const e=h(this,m().devicePixelRatio);this._register(b(m(),"resize",()=>{e.set(m().devicePixelRatio,void 0)})),this.devicePixelRatio=e;const s=h(this,{width:this.canvas.domNode.width,height:this.canvas.domNode.height});this._register(R(this.canvas.domNode,m(),(n,l)=>{this.canvas.domNode.width=n,this.canvas.domNode.height=l,s.set({width:n,height:l},void 0)})),this.canvasDevicePixelDimensions=s}canvas;ctx;device;static _atlas;static get atlas(){if(!i._atlas)throw new D("Cannot call ViewGpuContext.textureAtlas before device is resolved");return i._atlas}get atlas(){return i.atlas}canvasDevicePixelDimensions;devicePixelRatio;static canRender(r,a,t){const e=a.getViewLineRenderingData(t);return!(e.containsRTL||e.maxColumn>200||e.continuesWithWrappedLine||e.inlineDecorations.length>0)}};i=v([d(0,y),d(1,S),d(2,N)],i);export{i as ViewGpuContext};
