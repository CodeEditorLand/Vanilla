{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/gpu/objectCollectionBuffer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../base/common/linkedList.js\";\n\nexport interface ObjectCollectionBufferPropertySpec {\n\tname: string;\n}\n\nexport type ObjectCollectionPropertyValues<\n\tT extends ObjectCollectionBufferPropertySpec[],\n> = {\n\t[K in T[number][\"name\"]]: number;\n};\n\nexport interface IObjectCollectionBuffer<\n\tT extends ObjectCollectionBufferPropertySpec[],\n> extends IDisposable {\n\t/**\n\t * The underlying buffer. This **should not** be modified externally.\n\t */\n\treadonly buffer: ArrayBuffer;\n\t/**\n\t * A view of the underlying buffer. This **should not** be modified externally.\n\t */\n\treadonly view: Float32Array;\n\t/**\n\t * The size of the used portion of the buffer (in bytes).\n\t */\n\treadonly bufferUsedSize: number;\n\t/**\n\t * The size of the used portion of the view (in float32s).\n\t */\n\treadonly viewUsedSize: number;\n\n\t/**\n\t * Fires when the buffer is modified.\n\t */\n\treadonly onDidChange: Event<void>;\n\n\t/**\n\t * Creates an entry in the collection. This will return a managed object that can be modified\n\t * which will update the underlying buffer.\n\t * @param data The data of the entry.\n\t */\n\tcreateEntry(\n\t\tdata: ObjectCollectionPropertyValues<T>,\n\t): IObjectCollectionBufferEntry<T>;\n}\n\n/**\n * An entry in an {@link ObjectCollectionBuffer}. Property values on the entry can be changed and\n * their values will be updated automatically in the buffer.\n */\nexport interface IObjectCollectionBufferEntry<\n\tT extends ObjectCollectionBufferPropertySpec[],\n> extends IDisposable {\n\tset(propertyName: T[number][\"name\"], value: number): void;\n\tget(propertyName: T[number][\"name\"]): number;\n}\n\nexport function createObjectCollectionBuffer<\n\tT extends ObjectCollectionBufferPropertySpec[],\n>(propertySpecs: T, capacity: number): IObjectCollectionBuffer<T> {\n\treturn new ObjectCollectionBuffer<T>(propertySpecs, capacity);\n}\n\nclass ObjectCollectionBuffer<T extends ObjectCollectionBufferPropertySpec[]>\n\textends Disposable\n\timplements IObjectCollectionBuffer<T>\n{\n\tbuffer: ArrayBuffer;\n\tview: Float32Array;\n\n\tget bufferUsedSize() {\n\t\treturn this.viewUsedSize * Float32Array.BYTES_PER_ELEMENT;\n\t}\n\tget viewUsedSize() {\n\t\treturn this._entries.size * this._entrySize;\n\t}\n\n\tprivate readonly _propertySpecsMap: Map<\n\t\tstring,\n\t\tObjectCollectionBufferPropertySpec & { offset: number }\n\t> = new Map();\n\tprivate readonly _entrySize: number;\n\tprivate readonly _entries: LinkedList<ObjectCollectionBufferEntry<T>> =\n\t\tnew LinkedList();\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor(\n\t\tpublic propertySpecs: T,\n\t\tpublic capacity: number,\n\t) {\n\t\tsuper();\n\n\t\tthis.view = new Float32Array(capacity * 2);\n\t\tthis.buffer = this.view.buffer;\n\t\tthis._entrySize = propertySpecs.length;\n\t\tfor (let i = 0; i < propertySpecs.length; i++) {\n\t\t\tconst spec = {\n\t\t\t\toffset: i,\n\t\t\t\t...propertySpecs[i],\n\t\t\t};\n\t\t\tthis._propertySpecsMap.set(spec.name, spec);\n\t\t}\n\t\tthis._register(toDisposable(() => dispose(this._entries)));\n\t}\n\n\tcreateEntry(\n\t\tdata: ObjectCollectionPropertyValues<T>,\n\t): IObjectCollectionBufferEntry<T> {\n\t\tif (this._entries.size === this.capacity) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot create more entries ObjectCollectionBuffer entries (capacity=${this.capacity})`,\n\t\t\t);\n\t\t}\n\n\t\tconst value = new ObjectCollectionBufferEntry(\n\t\t\tthis.view,\n\t\t\tthis._propertySpecsMap,\n\t\t\tthis._entries.size,\n\t\t\tdata,\n\t\t);\n\t\tconst removeFromEntries = this._entries.push(value);\n\t\tconst listeners: IDisposable[] = [];\n\t\tlisteners.push(Event.forward(value.onDidChange, this._onDidChange));\n\t\tlisteners.push(\n\t\t\tvalue.onWillDispose(() => {\n\t\t\t\tconst deletedEntryIndex = value.i;\n\t\t\t\tremoveFromEntries();\n\n\t\t\t\t// Shift all entries after the deleted entry to the left\n\t\t\t\tthis.view.set(\n\t\t\t\t\tthis.view.subarray(\n\t\t\t\t\t\tdeletedEntryIndex * this._entrySize + 2,\n\t\t\t\t\t\tthis._entries.size * this._entrySize + 2,\n\t\t\t\t\t),\n\t\t\t\t\tdeletedEntryIndex * this._entrySize,\n\t\t\t\t);\n\n\t\t\t\t// Update entries to reflect the new i\n\t\t\t\tfor (const entry of this._entries) {\n\t\t\t\t\tif (entry.i > deletedEntryIndex) {\n\t\t\t\t\t\tentry.i--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdispose(listeners);\n\t\t\t}),\n\t\t);\n\t\treturn value;\n\t}\n}\n\nclass ObjectCollectionBufferEntry<\n\t\tT extends ObjectCollectionBufferPropertySpec[],\n\t>\n\textends Disposable\n\timplements IObjectCollectionBufferEntry<T>\n{\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tconstructor(\n\t\tprivate _view: Float32Array,\n\t\tprivate _propertySpecsMap: Map<\n\t\t\tstring,\n\t\t\tObjectCollectionBufferPropertySpec & { offset: number }\n\t\t>,\n\t\tpublic i: number,\n\t\tdata: ObjectCollectionPropertyValues<T>,\n\t) {\n\t\tsuper();\n\t\tfor (const propertySpec of this._propertySpecsMap.values()) {\n\t\t\tthis._view[\n\t\t\t\tthis.i * this._propertySpecsMap.size + propertySpec.offset\n\t\t\t] = data[propertySpec.name as keyof typeof data];\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\tthis._onWillDispose.fire();\n\t\tsuper.dispose();\n\t}\n\n\tset(propertyName: T[number][\"name\"], value: number): void {\n\t\tthis._view[\n\t\t\tthis.i * this._propertySpecsMap.size +\n\t\t\t\tthis._propertySpecsMap.get(propertyName)!.offset\n\t\t] = value;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tget(propertyName: T[number][\"name\"]): number {\n\t\treturn this._view[\n\t\t\tthis.i * this._propertySpecsMap.size +\n\t\t\t\tthis._propertySpecsMap.get(propertyName)!.offset\n\t\t];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
