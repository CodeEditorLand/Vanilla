{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/gpu/objectCollectionBuffer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, dispose, toDisposable, type IDisposable } from '../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\n\nexport interface ObjectCollectionBufferPropertySpec {\n\tname: string;\n}\n\nexport type ObjectCollectionPropertyValues<T extends ObjectCollectionBufferPropertySpec[]> = {\n\t[K in T[number]['name']]: number;\n};\n\nexport interface IObjectCollectionBuffer<T extends ObjectCollectionBufferPropertySpec[]> extends IDisposable {\n\t/**\n\t * The underlying buffer. This **should not** be modified externally.\n\t */\n\treadonly buffer: ArrayBuffer;\n\t/**\n\t * A view of the underlying buffer. This **should not** be modified externally.\n\t */\n\treadonly view: Float32Array;\n\t/**\n\t * The size of the used portion of the buffer (in bytes).\n\t */\n\treadonly bufferUsedSize: number;\n\t/**\n\t * The size of the used portion of the view (in float32s).\n\t */\n\treadonly viewUsedSize: number;\n\n\t/**\n\t * Fires when the buffer is modified.\n\t */\n\treadonly onDidChange: Event<void>;\n\n\t/**\n\t * Creates an entry in the collection. This will return a managed object that can be modified\n\t * which will update the underlying buffer.\n\t * @param data The data of the entry.\n\t */\n\tcreateEntry(data: ObjectCollectionPropertyValues<T>): IObjectCollectionBufferEntry<T>;\n}\n\n/**\n * An entry in an {@link ObjectCollectionBuffer}. Property values on the entry can be changed and\n * their values will be updated automatically in the buffer.\n */\nexport interface IObjectCollectionBufferEntry<T extends ObjectCollectionBufferPropertySpec[]> extends IDisposable {\n\tset(propertyName: T[number]['name'], value: number): void;\n\tget(propertyName: T[number]['name']): number;\n}\n\nexport function createObjectCollectionBuffer<T extends ObjectCollectionBufferPropertySpec[]>(\n\tpropertySpecs: T,\n\tcapacity: number\n): IObjectCollectionBuffer<T> {\n\treturn new ObjectCollectionBuffer<T>(propertySpecs, capacity);\n}\n\nclass ObjectCollectionBuffer<T extends ObjectCollectionBufferPropertySpec[]> extends Disposable implements IObjectCollectionBuffer<T> {\n\tbuffer: ArrayBuffer;\n\tview: Float32Array;\n\n\tget bufferUsedSize() {\n\t\treturn this.viewUsedSize * Float32Array.BYTES_PER_ELEMENT;\n\t}\n\tget viewUsedSize() {\n\t\treturn this._entries.size * this._entrySize;\n\t}\n\n\tprivate readonly _propertySpecsMap: Map<string, ObjectCollectionBufferPropertySpec & { offset: number }> = new Map();\n\tprivate readonly _entrySize: number;\n\tprivate readonly _entries: LinkedList<ObjectCollectionBufferEntry<T>> = new LinkedList();\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor(\n\t\tpublic propertySpecs: T,\n\t\tpublic capacity: number\n\t) {\n\t\tsuper();\n\n\t\tthis.view = new Float32Array(capacity * 2);\n\t\tthis.buffer = this.view.buffer;\n\t\tthis._entrySize = propertySpecs.length;\n\t\tfor (let i = 0; i < propertySpecs.length; i++) {\n\t\t\tconst spec = {\n\t\t\t\toffset: i,\n\t\t\t\t...propertySpecs[i]\n\t\t\t};\n\t\t\tthis._propertySpecsMap.set(spec.name, spec);\n\t\t}\n\t\tthis._register(toDisposable(() => dispose(this._entries)));\n\t}\n\n\tcreateEntry(data: ObjectCollectionPropertyValues<T>): IObjectCollectionBufferEntry<T> {\n\t\tif (this._entries.size === this.capacity) {\n\t\t\tthrow new Error(`Cannot create more entries ObjectCollectionBuffer entries (capacity=${this.capacity})`);\n\t\t}\n\n\t\tconst value = new ObjectCollectionBufferEntry(this.view, this._propertySpecsMap, this._entries.size, data);\n\t\tconst removeFromEntries = this._entries.push(value);\n\t\tconst listeners: IDisposable[] = [];\n\t\tlisteners.push(Event.forward(value.onDidChange, this._onDidChange));\n\t\tlisteners.push(value.onWillDispose(() => {\n\t\t\tconst deletedEntryIndex = value.i;\n\t\t\tremoveFromEntries();\n\n\t\t\t// Shift all entries after the deleted entry to the left\n\t\t\tthis.view.set(this.view.subarray(deletedEntryIndex * this._entrySize + 2, this._entries.size * this._entrySize + 2), deletedEntryIndex * this._entrySize);\n\n\t\t\t// Update entries to reflect the new i\n\t\t\tfor (const entry of this._entries) {\n\t\t\t\tif (entry.i > deletedEntryIndex) {\n\t\t\t\t\tentry.i--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdispose(listeners);\n\t\t}));\n\t\treturn value;\n\t}\n}\n\nclass ObjectCollectionBufferEntry<T extends ObjectCollectionBufferPropertySpec[]> extends Disposable implements IObjectCollectionBufferEntry<T> {\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tconstructor(\n\t\tprivate _view: Float32Array,\n\t\tprivate _propertySpecsMap: Map<string, ObjectCollectionBufferPropertySpec & { offset: number }>,\n\t\tpublic i: number,\n\t\tdata: ObjectCollectionPropertyValues<T>,\n\t) {\n\t\tsuper();\n\t\tfor (const propertySpec of this._propertySpecsMap.values()) {\n\t\t\tthis._view[this.i * this._propertySpecsMap.size + propertySpec.offset] = data[propertySpec.name as keyof typeof data];\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\tthis._onWillDispose.fire();\n\t\tsuper.dispose();\n\t}\n\n\tset(propertyName: T[number]['name'], value: number): void {\n\t\tthis._view[this.i * this._propertySpecsMap.size + this._propertySpecsMap.get(propertyName)!.offset] = value;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tget(propertyName: T[number]['name']): number {\n\t\treturn this._view[this.i * this._propertySpecsMap.size + this._propertySpecsMap.get(propertyName)!.offset];\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,SAAS,oBAAsC;AACpE,SAAS,kBAAkB;AAkDpB,SAAS,6BACf,eACA,UAC6B;AAC7B,SAAO,IAAI,uBAA0B,eAAe,QAAQ;AAC7D;AALgB;AAOhB,MAAM,+BAA+E,WAAiD;AAAA,EAkBrI,YACQ,eACA,UACN;AACD,UAAM;AAHC;AACA;AAIP,SAAK,OAAO,IAAI,aAAa,WAAW,CAAC;AACzC,SAAK,SAAS,KAAK,KAAK;AACxB,SAAK,aAAa,cAAc;AAChC,aAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC9C,YAAM,OAAO;AAAA,QACZ,QAAQ;AAAA,QACR,GAAG,cAAc,CAAC;AAAA,MACnB;AACA,WAAK,kBAAkB,IAAI,KAAK,MAAM,IAAI;AAAA,IAC3C;AACA,SAAK,UAAU,aAAa,MAAM,QAAQ,KAAK,QAAQ,CAAC,CAAC;AAAA,EAC1D;AAAA,EAnGD,OAgEsI;AAAA;AAAA;AAAA,EACrI;AAAA,EACA;AAAA,EAEA,IAAI,iBAAiB;AACpB,WAAO,KAAK,eAAe,aAAa;AAAA,EACzC;AAAA,EACA,IAAI,eAAe;AAClB,WAAO,KAAK,SAAS,OAAO,KAAK;AAAA,EAClC;AAAA,EAEiB,oBAA0F,oBAAI,IAAI;AAAA,EAClG;AAAA,EACA,WAAuD,IAAI,WAAW;AAAA,EAEtE,eAAe,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACzD,cAAc,KAAK,aAAa;AAAA,EAqBzC,YAAY,MAA0E;AACrF,QAAI,KAAK,SAAS,SAAS,KAAK,UAAU;AACzC,YAAM,IAAI,MAAM,uEAAuE,KAAK,QAAQ,GAAG;AAAA,IACxG;AAEA,UAAM,QAAQ,IAAI,4BAA4B,KAAK,MAAM,KAAK,mBAAmB,KAAK,SAAS,MAAM,IAAI;AACzG,UAAM,oBAAoB,KAAK,SAAS,KAAK,KAAK;AAClD,UAAM,YAA2B,CAAC;AAClC,cAAU,KAAK,MAAM,QAAQ,MAAM,aAAa,KAAK,YAAY,CAAC;AAClE,cAAU,KAAK,MAAM,cAAc,MAAM;AACxC,YAAM,oBAAoB,MAAM;AAChC,wBAAkB;AAGlB,WAAK,KAAK,IAAI,KAAK,KAAK,SAAS,oBAAoB,KAAK,aAAa,GAAG,KAAK,SAAS,OAAO,KAAK,aAAa,CAAC,GAAG,oBAAoB,KAAK,UAAU;AAGxJ,iBAAW,SAAS,KAAK,UAAU;AAClC,YAAI,MAAM,IAAI,mBAAmB;AAChC,gBAAM;AAAA,QACP;AAAA,MACD;AACA,cAAQ,SAAS;AAAA,IAClB,CAAC,CAAC;AACF,WAAO;AAAA,EACR;AACD;AAEA,MAAM,oCAAoF,WAAsD;AAAA,EAO/I,YACS,OACA,mBACD,GACP,MACC;AACD,UAAM;AALE;AACA;AACD;AAIP,eAAW,gBAAgB,KAAK,kBAAkB,OAAO,GAAG;AAC3D,WAAK,MAAM,KAAK,IAAI,KAAK,kBAAkB,OAAO,aAAa,MAAM,IAAI,KAAK,aAAa,IAAyB;AAAA,IACrH;AAAA,EACD;AAAA,EAlJD,OAiIgJ;AAAA;AAAA;AAAA,EAE9H,eAAe,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACzD,cAAc,KAAK,aAAa;AAAA,EACxB,iBAAiB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3D,gBAAgB,KAAK,eAAe;AAAA,EAcpC,UAAU;AAClB,SAAK,eAAe,KAAK;AACzB,UAAM,QAAQ;AAAA,EACf;AAAA,EAEA,IAAI,cAAiC,OAAqB;AACzD,SAAK,MAAM,KAAK,IAAI,KAAK,kBAAkB,OAAO,KAAK,kBAAkB,IAAI,YAAY,EAAG,MAAM,IAAI;AACtG,SAAK,aAAa,KAAK;AAAA,EACxB;AAAA,EAEA,IAAI,cAAyC;AAC5C,WAAO,KAAK,MAAM,KAAK,IAAI,KAAK,kBAAkB,OAAO,KAAK,kBAAkB,IAAI,YAAY,EAAG,MAAM;AAAA,EAC1G;AACD;",
  "names": []
}
