{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/codeEditor/codeEditorContributions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow, runWhenWindowIdle } from \"../../../../base/browser/dom.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IEditorContribution } from \"../../../common/editorCommon.js\";\nimport type { ICodeEditor } from \"../../editorBrowser.js\";\nimport {\n\tEditorContributionInstantiation,\n\ttype IEditorContributionDescription,\n} from \"../../editorExtensions.js\";\n\nexport class CodeEditorContributions extends Disposable {\n\tprivate _editor: ICodeEditor | null = null;\n\tprivate _instantiationService: IInstantiationService | null = null;\n\n\t/**\n\t * Contains all instantiated contributions.\n\t */\n\tprivate readonly _instances = this._register(\n\t\tnew DisposableMap<string, IEditorContribution>(),\n\t);\n\t/**\n\t * Contains contributions which are not yet instantiated.\n\t */\n\tprivate readonly _pending = new Map<\n\t\tstring,\n\t\tIEditorContributionDescription\n\t>();\n\t/**\n\t * Tracks which instantiation kinds are still left in `_pending`.\n\t */\n\tprivate readonly _finishedInstantiation: boolean[] = [];\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eager] =\n\t\t\tfalse;\n\t\tthis._finishedInstantiation[\n\t\t\tEditorContributionInstantiation.AfterFirstRender\n\t\t] = false;\n\t\tthis._finishedInstantiation[\n\t\t\tEditorContributionInstantiation.BeforeFirstInteraction\n\t\t] = false;\n\t\tthis._finishedInstantiation[\n\t\t\tEditorContributionInstantiation.Eventually\n\t\t] = false;\n\t}\n\n\tpublic initialize(\n\t\teditor: ICodeEditor,\n\t\tcontributions: IEditorContributionDescription[],\n\t\tinstantiationService: IInstantiationService,\n\t) {\n\t\tthis._editor = editor;\n\t\tthis._instantiationService = instantiationService;\n\n\t\tfor (const desc of contributions) {\n\t\t\tif (this._pending.has(desc.id)) {\n\t\t\t\tonUnexpectedError(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Cannot have two contributions with the same id ${desc.id}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pending.set(desc.id, desc);\n\t\t}\n\n\t\tthis._instantiateSome(EditorContributionInstantiation.Eager);\n\n\t\t// AfterFirstRender\n\t\t// - these extensions will be instantiated at the latest 50ms after the first render.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(\n\t\t\trunWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\t\tthis._instantiateSome(\n\t\t\t\t\tEditorContributionInstantiation.AfterFirstRender,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// BeforeFirstInteraction\n\t\t// - these extensions will be instantiated at the latest before a mouse or a keyboard event.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(\n\t\t\trunWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\t\tthis._instantiateSome(\n\t\t\t\t\tEditorContributionInstantiation.BeforeFirstInteraction,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Eventually\n\t\t// - these extensions will only be instantiated when there is idle time.\n\t\t// - since there is no guarantee that there will ever be idle time, we set a timeout of 5s here.\n\t\tthis._register(\n\t\t\trunWhenWindowIdle(\n\t\t\t\tgetWindow(this._editor.getDomNode()),\n\t\t\t\t() => {\n\t\t\t\t\tthis._instantiateSome(\n\t\t\t\t\t\tEditorContributionInstantiation.Eventually,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\t5000,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic saveViewState(): { [key: string]: any } {\n\t\tconst contributionsState: { [key: string]: any } = {};\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.saveViewState === \"function\") {\n\t\t\t\tcontributionsState[id] = contribution.saveViewState();\n\t\t\t}\n\t\t}\n\t\treturn contributionsState;\n\t}\n\n\tpublic restoreViewState(contributionsState: { [key: string]: any }): void {\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.restoreViewState === \"function\") {\n\t\t\t\tcontribution.restoreViewState(contributionsState[id]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get(id: string): IEditorContribution | null {\n\t\tthis._instantiateById(id);\n\t\treturn this._instances.get(id) || null;\n\t}\n\n\t/**\n\t * used by tests\n\t */\n\tpublic set(id: string, value: IEditorContribution) {\n\t\tthis._instances.set(id, value);\n\t}\n\n\tpublic onBeforeInteractionEvent(): void {\n\t\t// this method is called very often by the editor!\n\t\tthis._instantiateSome(\n\t\t\tEditorContributionInstantiation.BeforeFirstInteraction,\n\t\t);\n\t}\n\n\tpublic onAfterModelAttached(): IDisposable {\n\t\treturn runWhenWindowIdle(\n\t\t\tgetWindow(this._editor?.getDomNode()),\n\t\t\t() => {\n\t\t\t\tthis._instantiateSome(\n\t\t\t\t\tEditorContributionInstantiation.AfterFirstRender,\n\t\t\t\t);\n\t\t\t},\n\t\t\t50,\n\t\t);\n\t}\n\n\tprivate _instantiateSome(\n\t\tinstantiation: EditorContributionInstantiation,\n\t): void {\n\t\tif (this._finishedInstantiation[instantiation]) {\n\t\t\t// already done with this instantiation!\n\t\t\treturn;\n\t\t}\n\t\tthis._finishedInstantiation[instantiation] = true;\n\n\t\tconst contribs =\n\t\t\tthis._findPendingContributionsByInstantiation(instantiation);\n\t\tfor (const contrib of contribs) {\n\t\t\tthis._instantiateById(contrib.id);\n\t\t}\n\t}\n\n\tprivate _findPendingContributionsByInstantiation(\n\t\tinstantiation: EditorContributionInstantiation,\n\t): readonly IEditorContributionDescription[] {\n\t\tconst result: IEditorContributionDescription[] = [];\n\t\tfor (const [, desc] of this._pending) {\n\t\t\tif (desc.instantiation === instantiation) {\n\t\t\t\tresult.push(desc);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _instantiateById(id: string): void {\n\t\tconst desc = this._pending.get(id);\n\t\tif (!desc) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._pending.delete(id);\n\n\t\tif (!this._instantiationService || !this._editor) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot instantiate contributions before being initialized!`,\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\tconst instance = this._instantiationService.createInstance(\n\t\t\t\tdesc.ctor,\n\t\t\t\tthis._editor,\n\t\t\t);\n\t\t\tthis._instances.set(desc.id, instance);\n\t\t\tif (\n\t\t\t\ttypeof instance.restoreViewState === \"function\" &&\n\t\t\t\tdesc.instantiation !== EditorContributionInstantiation.Eager\n\t\t\t) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Editor contribution '${desc.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
