{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/embeddedDiffEditorWidget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from '../../../../base/common/objects.js';\nimport { ICodeEditor, IDiffEditorConstructionOptions } from '../../editorBrowser.js';\nimport { ICodeEditorService } from '../../services/codeEditorService.js';\nimport { DiffEditorWidget, IDiffCodeEditorWidgetOptions } from './diffEditorWidget.js';\nimport { ConfigurationChangedEvent, IDiffEditorOptions, IEditorOptions } from '../../../common/config/editorOptions.js';\nimport { IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress.js';\nexport class EmbeddedDiffEditorWidget extends DiffEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IDiffEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: Readonly<IDiffEditorConstructionOptions>,\n\t\tcodeEditorWidgetOptions: IDiffCodeEditorWidgetOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IAccessibilitySignalService accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IEditorProgressService editorProgressService: IEditorProgressService\n\t) {\n\t\tsuper(domElement, parentEditor.getRawOptions(), codeEditorWidgetOptions, contextKeyService, instantiationService, codeEditorService, accessibilitySignalService, editorProgressService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration(e => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawOptions());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\toverride updateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,aAAa;AACzB,SAAS,aAAa,sCAAsC;AAC5D,SAAS,0BAA0B;AACnC,SAAS,kBAAkB,oCAAoC;AAC/D,SAAS,2BAA2B,oBAAoB,sBAAsB;AAC9E,SAAS,mCAAmC;AAC5C,SAAS,0BAA0B;AACnC,SAAS,6BAA6B;AACtC,SAAS,8BAA8B;AAChC,IAAM,2BAAN,cAAuC,iBAAiB;AAAA,EAd/D,OAc+D;AAAA;AAAA;AAAA,EAE7C;AAAA,EACA;AAAA,EAEjB,YACC,YACA,SACA,yBACA,cACoB,mBACG,sBACH,mBACS,4BACL,uBACvB;AACD,UAAM,YAAY,aAAa,cAAc,GAAG,yBAAyB,mBAAmB,sBAAsB,mBAAmB,4BAA4B,qBAAqB;AAEtL,SAAK,gBAAgB;AACrB,SAAK,oBAAoB;AAGzB,UAAM,cAAc,KAAK,iBAAiB;AAE1C,SAAK,UAAU,aAAa,yBAAyB,OAAK,KAAK,8BAA8B,CAAC,CAAC,CAAC;AAAA,EACjG;AAAA,EAEA,kBAA+B;AAC9B,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,8BAA8B,GAAoC;AACzE,UAAM,cAAc,KAAK,cAAc,cAAc,CAAC;AACtD,UAAM,cAAc,KAAK,iBAAiB;AAAA,EAC3C;AAAA,EAES,cAAc,YAAkC;AACxD,YAAQ,MAAM,KAAK,mBAAmB,YAAY,IAAI;AACtD,UAAM,cAAc,KAAK,iBAAiB;AAAA,EAC3C;AACD;AAxCa,2BAAN;AAAA,EAUJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAdU;",
  "names": []
}
