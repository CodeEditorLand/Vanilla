import{h as S}from"../../../../../base/browser/dom.js";import{ActionBar as B}from"../../../../../base/browser/ui/actionbar/actionbar.js";import{Action as D}from"../../../../../base/common/actions.js";import{booleanComparator as H,compareBy as k,numberComparator as V,tieBreakComparators as z}from"../../../../../base/common/arrays.js";import{findMaxIdx as G}from"../../../../../base/common/arraysFind.js";import{Codicon as Y}from"../../../../../base/common/codicons.js";import{Disposable as j,toDisposable as q}from"../../../../../base/common/lifecycle.js";import{autorun as I,autorunHandleChanges as J,autorunWithStore as K,constObservable as Z,derived as Q,derivedWithStore as U,observableFromEvent as R,observableSignalFromEvent as M,observableValue as X,recomputeInitiallyAndOnChange as ee}from"../../../../../base/common/observable.js";import{ThemeIcon as ie}from"../../../../../base/common/themables.js";import{PlaceholderViewZone as A,ViewZoneOverlayWidget as te,applyStyle as oe,applyViewZones as O}from"../utils.js";import{OffsetRange as ne,OffsetRangeSet as re}from"../../../../common/core/offsetRange.js";import{localize as W}from"../../../../../nls.js";class N extends j{constructor(o,p,s,a,u){super();this._rootElement=o;this._diffModel=p;this._originalEditorLayoutInfo=s;this._modifiedEditorLayoutInfo=a;this._editors=u;this._element=document.createElementNS("http://www.w3.org/2000/svg","svg"),this._element.setAttribute("class","moved-blocks-lines"),this._rootElement.appendChild(this._element),this._register(q(()=>this._element.remove())),this._register(I(e=>{const t=this._originalEditorLayoutInfo.read(e),r=this._modifiedEditorLayoutInfo.read(e);!t||!r||(this._element.style.left=`${t.width-t.verticalScrollbarWidth}px`,this._element.style.height=`${t.height}px`,this._element.style.width=`${t.verticalScrollbarWidth+t.contentLeft-N.movedCodeBlockPadding+this.width.read(e)}px`)})),this._register(ee(this._state));const d=Q(e=>{const r=this._diffModel.read(e)?.diff.read(e);return r?r.movedTexts.map(n=>({move:n,original:new A(Z(n.lineRangeMapping.original.startLineNumber-1),18),modified:new A(Z(n.lineRangeMapping.modified.startLineNumber-1),18)})):[]});this._register(O(this._editors.original,d.map(e=>e.map(t=>t.original)))),this._register(O(this._editors.modified,d.map(e=>e.map(t=>t.modified)))),this._register(K((e,t)=>{const r=d.read(e);for(const n of r)t.add(new F(this._editors.original,n.original,n.move,"original",this._diffModel.get())),t.add(new F(this._editors.modified,n.modified,n.move,"modified",this._diffModel.get()))}));const c=M("original.onDidFocusEditorWidget",e=>this._editors.original.onDidFocusEditorWidget(()=>setTimeout(()=>e(void 0),0))),m=M("modified.onDidFocusEditorWidget",e=>this._editors.modified.onDidFocusEditorWidget(()=>setTimeout(()=>e(void 0),0)));let l="modified";this._register(J({createEmptyChangeSummary:()=>{},handleChange:(e,t)=>(e.didChange(c)&&(l="original"),e.didChange(m)&&(l="modified"),!0)},e=>{c.read(e),m.read(e);const t=this._diffModel.read(e);if(!t)return;const r=t.diff.read(e);let n;if(r&&l==="original"){const i=this._editors.originalCursor.read(e);i&&(n=r.movedTexts.find(h=>h.lineRangeMapping.original.contains(i.lineNumber)))}if(r&&l==="modified"){const i=this._editors.modifiedCursor.read(e);i&&(n=r.movedTexts.find(h=>h.lineRangeMapping.modified.contains(i.lineNumber)))}n!==t.movedTextToCompare.get()&&t.movedTextToCompare.set(void 0,void 0),t.setActiveMovedText(n)}))}static movedCodeBlockPadding=4;_element;_originalScrollTop=R(this,this._editors.original.onDidScrollChange,()=>this._editors.original.getScrollTop());_modifiedScrollTop=R(this,this._editors.modified.onDidScrollChange,()=>this._editors.modified.getScrollTop());_viewZonesChanged=M("onDidChangeViewZones",this._editors.modified.onDidChangeViewZones);width=X(this,0);_modifiedViewZonesChangedSignal=M("modified.onDidChangeViewZones",this._editors.modified.onDidChangeViewZones);_originalViewZonesChangedSignal=M("original.onDidChangeViewZones",this._editors.original.onDidChangeViewZones);_state=U(this,(o,p)=>{this._element.replaceChildren();const s=this._diffModel.read(o),a=s?.diff.read(o)?.movedTexts;if(!a||a.length===0){this.width.set(0,void 0);return}this._viewZonesChanged.read(o);const u=this._originalEditorLayoutInfo.read(o),d=this._modifiedEditorLayoutInfo.read(o);if(!u||!d){this.width.set(0,void 0);return}this._modifiedViewZonesChangedSignal.read(o),this._originalViewZonesChangedSignal.read(o);const c=a.map(i=>{function h(w,b){const E=b.getTopForLineNumber(w.startLineNumber,!0),P=b.getTopForLineNumber(w.endLineNumberExclusive,!0);return(E+P)/2}const v=h(i.lineRangeMapping.original,this._editors.original),L=this._originalScrollTop.read(o),g=h(i.lineRangeMapping.modified,this._editors.modified),_=this._modifiedScrollTop.read(o),T=v-L,x=g-_,f=Math.min(v,g),y=Math.max(v,g);return{range:new ne(f,y),from:T,to:x,fromWithoutScroll:v,toWithoutScroll:g,move:i}});c.sort(z(k(i=>i.fromWithoutScroll>i.toWithoutScroll,H),k(i=>i.fromWithoutScroll>i.toWithoutScroll?i.fromWithoutScroll:-i.toWithoutScroll,V)));const m=$.compute(c.map(i=>i.range)),l=10,e=u.verticalScrollbarWidth,t=(m.getTrackCount()-1)*10+l*2,r=e+t+(d.contentLeft-N.movedCodeBlockPadding);let n=0;for(const i of c){const h=m.getTrack(n),v=e+l+h*10,L=15,g=15,_=r,T=d.glyphMarginWidth+d.lineNumbersWidth,x=18,f=document.createElementNS("http://www.w3.org/2000/svg","rect");f.classList.add("arrow-rectangle"),f.setAttribute("x",`${_-T}`),f.setAttribute("y",`${i.to-x/2}`),f.setAttribute("width",`${T}`),f.setAttribute("height",`${x}`),this._element.appendChild(f);const y=document.createElementNS("http://www.w3.org/2000/svg","g"),w=document.createElementNS("http://www.w3.org/2000/svg","path");w.setAttribute("d",`M 0 ${i.from} L ${v} ${i.from} L ${v} ${i.to} L ${_-g} ${i.to}`),w.setAttribute("fill","none"),y.appendChild(w);const b=document.createElementNS("http://www.w3.org/2000/svg","polygon");b.classList.add("arrow"),p.add(I(E=>{w.classList.toggle("currentMove",i.move===s.activeMovedText.read(E)),b.classList.toggle("currentMove",i.move===s.activeMovedText.read(E))})),b.setAttribute("points",`${_-g},${i.to-L/2} ${_},${i.to} ${_-g},${i.to+L/2}`),y.appendChild(b),this._element.appendChild(y),n++}this.width.set(t,void 0)})}class ${constructor(C,o){this._trackCount=C;this.trackPerLineIdx=o}static compute(C){const o=[],p=[];for(const s of C){let a=o.findIndex(u=>!u.intersectsStrict(s));a===-1&&(o.length>=6?a=G(o,k(d=>d.intersectWithRangeLength(s),V)):(a=o.length,o.push(new re))),o[a].addRange(s),p.push(a)}return new $(o.length,p)}getTrack(C){return this.trackPerLineIdx[C]}getTrackCount(){return this._trackCount}}class F extends te{constructor(o,p,s,a,u){const d=S("div.diff-hidden-lines-widget");super(o,p,d.root);this._editor=o;this._move=s;this._kind=a;this._diffModel=u;d.root.appendChild(this._nodes.root);const c=R(this._editor.onDidLayoutChange,()=>this._editor.getLayoutInfo());this._register(oe(this._nodes.root,{paddingRight:c.map(r=>r.verticalScrollbarWidth)}));let m;s.changes.length>0?m=this._kind==="original"?W("codeMovedToWithChanges","Code moved with changes to line {0}-{1}",this._move.lineRangeMapping.modified.startLineNumber,this._move.lineRangeMapping.modified.endLineNumberExclusive-1):W("codeMovedFromWithChanges","Code moved with changes from line {0}-{1}",this._move.lineRangeMapping.original.startLineNumber,this._move.lineRangeMapping.original.endLineNumberExclusive-1):m=this._kind==="original"?W("codeMovedTo","Code moved to line {0}-{1}",this._move.lineRangeMapping.modified.startLineNumber,this._move.lineRangeMapping.modified.endLineNumberExclusive-1):W("codeMovedFrom","Code moved from line {0}-{1}",this._move.lineRangeMapping.original.startLineNumber,this._move.lineRangeMapping.original.endLineNumberExclusive-1);const l=this._register(new B(this._nodes.actionBar,{highlightToggledItems:!0})),e=new D("",m,"",!1);l.push(e,{icon:!1,label:!0});const t=new D("","Compare",ie.asClassName(Y.compareChanges),!0,()=>{this._editor.focus(),this._diffModel.movedTextToCompare.set(this._diffModel.movedTextToCompare.get()===s?void 0:this._move,void 0)});this._register(I(r=>{const n=this._diffModel.movedTextToCompare.read(r)===s;t.checked=n})),l.push(t,{icon:!1,label:!0})}_nodes=S("div.diff-moved-code-block",{style:{marginRight:"4px"}},[S("div.text-content@textContent"),S("div.action-bar@actionBar")])}export{N as MovedBlocksLinesFeature};
