import{h as S}from"../../../../../base/browser/dom.js";import{ActionBar as P}from"../../../../../base/browser/ui/actionbar/actionbar.js";import{Action as V}from"../../../../../base/common/actions.js";import{booleanComparator as j,compareBy as k,numberComparator as $,tieBreakComparators as H}from"../../../../../base/common/arrays.js";import{findMaxIdx as z}from"../../../../../base/common/arraysFind.js";import{Codicon as G}from"../../../../../base/common/codicons.js";import{Disposable as Y,toDisposable as q}from"../../../../../base/common/lifecycle.js";import{autorun as I,autorunHandleChanges as J,autorunWithStore as K,constObservable as Z,derived as Q,derivedWithStore as U,observableFromEvent as R,observableSignalFromEvent as M,observableValue as X,recomputeInitiallyAndOnChange as ee}from"../../../../../base/common/observable.js";import{ThemeIcon as te}from"../../../../../base/common/themables.js";import{localize as W}from"../../../../../nls.js";import{OffsetRange as ie,OffsetRangeSet as oe}from"../../../../common/core/offsetRange.js";import{PlaceholderViewZone as O,ViewZoneOverlayWidget as ne,applyStyle as re,applyViewZones as A}from"../utils.js";class N extends Y{constructor(o,p,s,a,u){super();this._rootElement=o;this._diffModel=p;this._originalEditorLayoutInfo=s;this._modifiedEditorLayoutInfo=a;this._editors=u;this._element=document.createElementNS("http://www.w3.org/2000/svg","svg"),this._element.setAttribute("class","moved-blocks-lines"),this._rootElement.appendChild(this._element),this._register(q(()=>this._element.remove())),this._register(I(e=>{const i=this._originalEditorLayoutInfo.read(e),r=this._modifiedEditorLayoutInfo.read(e);!i||!r||(this._element.style.left=`${i.width-i.verticalScrollbarWidth}px`,this._element.style.height=`${i.height}px`,this._element.style.width=`${i.verticalScrollbarWidth+i.contentLeft-N.movedCodeBlockPadding+this.width.read(e)}px`)})),this._register(ee(this._state));const d=Q(e=>{const r=this._diffModel.read(e)?.diff.read(e);return r?r.movedTexts.map(n=>({move:n,original:new O(Z(n.lineRangeMapping.original.startLineNumber-1),18),modified:new O(Z(n.lineRangeMapping.modified.startLineNumber-1),18)})):[]});this._register(A(this._editors.original,d.map(e=>e.map(i=>i.original)))),this._register(A(this._editors.modified,d.map(e=>e.map(i=>i.modified)))),this._register(K((e,i)=>{const r=d.read(e);for(const n of r)i.add(new B(this._editors.original,n.original,n.move,"original",this._diffModel.get())),i.add(new B(this._editors.modified,n.modified,n.move,"modified",this._diffModel.get()))}));const c=M("original.onDidFocusEditorWidget",e=>this._editors.original.onDidFocusEditorWidget(()=>setTimeout(()=>e(void 0),0))),m=M("modified.onDidFocusEditorWidget",e=>this._editors.modified.onDidFocusEditorWidget(()=>setTimeout(()=>e(void 0),0)));let l="modified";this._register(J({createEmptyChangeSummary:()=>{},handleChange:(e,i)=>(e.didChange(c)&&(l="original"),e.didChange(m)&&(l="modified"),!0)},e=>{c.read(e),m.read(e);const i=this._diffModel.read(e);if(!i)return;const r=i.diff.read(e);let n;if(r&&l==="original"){const t=this._editors.originalCursor.read(e);t&&(n=r.movedTexts.find(h=>h.lineRangeMapping.original.contains(t.lineNumber)))}if(r&&l==="modified"){const t=this._editors.modifiedCursor.read(e);t&&(n=r.movedTexts.find(h=>h.lineRangeMapping.modified.contains(t.lineNumber)))}n!==i.movedTextToCompare.get()&&i.movedTextToCompare.set(void 0,void 0),i.setActiveMovedText(n)}))}static movedCodeBlockPadding=4;_element;_originalScrollTop=R(this,this._editors.original.onDidScrollChange,()=>this._editors.original.getScrollTop());_modifiedScrollTop=R(this,this._editors.modified.onDidScrollChange,()=>this._editors.modified.getScrollTop());_viewZonesChanged=M("onDidChangeViewZones",this._editors.modified.onDidChangeViewZones);width=X(this,0);_modifiedViewZonesChangedSignal=M("modified.onDidChangeViewZones",this._editors.modified.onDidChangeViewZones);_originalViewZonesChangedSignal=M("original.onDidChangeViewZones",this._editors.original.onDidChangeViewZones);_state=U(this,(o,p)=>{this._element.replaceChildren();const s=this._diffModel.read(o),a=s?.diff.read(o)?.movedTexts;if(!a||a.length===0){this.width.set(0,void 0);return}this._viewZonesChanged.read(o);const u=this._originalEditorLayoutInfo.read(o),d=this._modifiedEditorLayoutInfo.read(o);if(!u||!d){this.width.set(0,void 0);return}this._modifiedViewZonesChangedSignal.read(o),this._originalViewZonesChangedSignal.read(o);const c=a.map(t=>{function h(w,b){const x=b.getTopForLineNumber(w.startLineNumber,!0),F=b.getTopForLineNumber(w.endLineNumberExclusive,!0);return(x+F)/2}const v=h(t.lineRangeMapping.original,this._editors.original),L=this._originalScrollTop.read(o),f=h(t.lineRangeMapping.modified,this._editors.modified),_=this._modifiedScrollTop.read(o),E=v-L,T=f-_,g=Math.min(v,f),y=Math.max(v,f);return{range:new ie(g,y),from:E,to:T,fromWithoutScroll:v,toWithoutScroll:f,move:t}});c.sort(H(k(t=>t.fromWithoutScroll>t.toWithoutScroll,j),k(t=>t.fromWithoutScroll>t.toWithoutScroll?t.fromWithoutScroll:-t.toWithoutScroll,$)));const m=D.compute(c.map(t=>t.range)),l=10,e=u.verticalScrollbarWidth,i=(m.getTrackCount()-1)*10+l*2,r=e+i+(d.contentLeft-N.movedCodeBlockPadding);let n=0;for(const t of c){const h=m.getTrack(n),v=e+l+h*10,L=15,f=15,_=r,E=d.glyphMarginWidth+d.lineNumbersWidth,T=18,g=document.createElementNS("http://www.w3.org/2000/svg","rect");g.classList.add("arrow-rectangle"),g.setAttribute("x",`${_-E}`),g.setAttribute("y",`${t.to-T/2}`),g.setAttribute("width",`${E}`),g.setAttribute("height",`${T}`),this._element.appendChild(g);const y=document.createElementNS("http://www.w3.org/2000/svg","g"),w=document.createElementNS("http://www.w3.org/2000/svg","path");w.setAttribute("d",`M 0 ${t.from} L ${v} ${t.from} L ${v} ${t.to} L ${_-f} ${t.to}`),w.setAttribute("fill","none"),y.appendChild(w);const b=document.createElementNS("http://www.w3.org/2000/svg","polygon");b.classList.add("arrow"),p.add(I(x=>{w.classList.toggle("currentMove",t.move===s.activeMovedText.read(x)),b.classList.toggle("currentMove",t.move===s.activeMovedText.read(x))})),b.setAttribute("points",`${_-f},${t.to-L/2} ${_},${t.to} ${_-f},${t.to+L/2}`),y.appendChild(b),this._element.appendChild(y),n++}this.width.set(i,void 0)})}class D{constructor(C,o){this._trackCount=C;this.trackPerLineIdx=o}static compute(C){const o=[],p=[];for(const s of C){let a=o.findIndex(u=>!u.intersectsStrict(s));a===-1&&(o.length>=6?a=z(o,k(d=>d.intersectWithRangeLength(s),$)):(a=o.length,o.push(new oe))),o[a].addRange(s),p.push(a)}return new D(o.length,p)}getTrack(C){return this.trackPerLineIdx[C]}getTrackCount(){return this._trackCount}}class B extends ne{constructor(o,p,s,a,u){const d=S("div.diff-hidden-lines-widget");super(o,p,d.root);this._editor=o;this._move=s;this._kind=a;this._diffModel=u;d.root.appendChild(this._nodes.root);const c=R(this._editor.onDidLayoutChange,()=>this._editor.getLayoutInfo());this._register(re(this._nodes.root,{paddingRight:c.map(r=>r.verticalScrollbarWidth)}));let m;s.changes.length>0?m=this._kind==="original"?W("codeMovedToWithChanges","Code moved with changes to line {0}-{1}",this._move.lineRangeMapping.modified.startLineNumber,this._move.lineRangeMapping.modified.endLineNumberExclusive-1):W("codeMovedFromWithChanges","Code moved with changes from line {0}-{1}",this._move.lineRangeMapping.original.startLineNumber,this._move.lineRangeMapping.original.endLineNumberExclusive-1):m=this._kind==="original"?W("codeMovedTo","Code moved to line {0}-{1}",this._move.lineRangeMapping.modified.startLineNumber,this._move.lineRangeMapping.modified.endLineNumberExclusive-1):W("codeMovedFrom","Code moved from line {0}-{1}",this._move.lineRangeMapping.original.startLineNumber,this._move.lineRangeMapping.original.endLineNumberExclusive-1);const l=this._register(new P(this._nodes.actionBar,{highlightToggledItems:!0})),e=new V("",m,"",!1);l.push(e,{icon:!1,label:!0});const i=new V("","Compare",te.asClassName(G.compareChanges),!0,()=>{this._editor.focus(),this._diffModel.movedTextToCompare.set(this._diffModel.movedTextToCompare.get()===s?void 0:this._move,void 0)});this._register(I(r=>{const n=this._diffModel.movedTextToCompare.read(r)===s;i.checked=n})),l.push(i,{icon:!1,label:!0})}_nodes=S("div.diff-moved-code-block",{style:{marginRight:"4px"}},[S("div.text-content@textContent"),S("div.action-bar@actionBar")])}export{N as MovedBlocksLinesFeature};
