{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tEventType,\n\taddDisposableListener,\n\taddStandardDisposableListener,\n\th,\n} from \"../../../../../base/browser/dom.js\";\nimport { createFastDomNode } from \"../../../../../base/browser/fastDomNode.js\";\nimport type { IMouseWheelEvent } from \"../../../../../base/browser/mouseEvent.js\";\nimport { ScrollbarState } from \"../../../../../base/browser/ui/scrollbar/scrollbarState.js\";\nimport type { Color } from \"../../../../../base/common/color.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tautorun,\n\tautorunWithStore,\n\tderived,\n\tobservableFromEvent,\n\tobservableSignalFromEvent,\n} from \"../../../../../base/common/observable.js\";\nimport {\n\tdefaultInsertColor,\n\tdefaultRemoveColor,\n\tdiffInserted,\n\tdiffOverviewRulerInserted,\n\tdiffOverviewRulerRemoved,\n\tdiffRemoved,\n} from \"../../../../../platform/theme/common/colorRegistry.js\";\nimport { IThemeService } from \"../../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype EditorLayoutInfo,\n\tEditorOption,\n} from \"../../../../common/config/editorOptions.js\";\nimport type { LineRange } from \"../../../../common/core/lineRange.js\";\nimport { Position } from \"../../../../common/core/position.js\";\nimport { OverviewRulerZone } from \"../../../../common/viewModel/overviewZoneManager.js\";\nimport type { CodeEditorWidget } from \"../../codeEditor/codeEditorWidget.js\";\nimport type { DiffEditorEditors } from \"../components/diffEditorEditors.js\";\nimport type { DiffEditorViewModel } from \"../diffEditorViewModel.js\";\nimport { appendRemoveOnDispose } from \"../utils.js\";\n\nexport class OverviewRulerFeature extends Disposable {\n\tprivate static readonly ONE_OVERVIEW_WIDTH = 15;\n\tpublic static readonly ENTIRE_DIFF_OVERVIEW_WIDTH =\n\t\tthis.ONE_OVERVIEW_WIDTH * 2;\n\tpublic readonly width = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _rootElement: HTMLElement,\n\t\tprivate readonly _diffModel: IObservable<\n\t\t\tDiffEditorViewModel | undefined\n\t\t>,\n\t\tprivate readonly _rootWidth: IObservable<number>,\n\t\tprivate readonly _rootHeight: IObservable<number>,\n\t\tprivate readonly _modifiedEditorLayoutInfo: IObservable<EditorLayoutInfo | null>,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\n\t\tconst currentColorTheme = observableFromEvent(\n\t\t\tthis._themeService.onDidColorThemeChange,\n\t\t\t() => this._themeService.getColorTheme(),\n\t\t);\n\n\t\tconst currentColors = derived((reader) => {\n\t\t\t/** @description colors */\n\t\t\tconst theme = currentColorTheme.read(reader);\n\t\t\tconst insertColor =\n\t\t\t\ttheme.getColor(diffOverviewRulerInserted) ||\n\t\t\t\t(\n\t\t\t\t\ttheme.getColor(diffInserted) || defaultInsertColor\n\t\t\t\t).transparent(2);\n\t\t\tconst removeColor =\n\t\t\t\ttheme.getColor(diffOverviewRulerRemoved) ||\n\t\t\t\t(theme.getColor(diffRemoved) || defaultRemoveColor).transparent(\n\t\t\t\t\t2,\n\t\t\t\t);\n\t\t\treturn { insertColor, removeColor };\n\t\t});\n\n\t\tconst viewportDomElement = createFastDomNode(\n\t\t\tdocument.createElement(\"div\"),\n\t\t);\n\t\tviewportDomElement.setClassName(\"diffViewport\");\n\t\tviewportDomElement.setPosition(\"absolute\");\n\n\t\tconst diffOverviewRoot = h(\"div.diffOverview\", {\n\t\t\tstyle: {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: \"0px\",\n\t\t\t\twidth: OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH + \"px\",\n\t\t\t},\n\t\t}).root;\n\t\tthis._register(\n\t\t\tappendRemoveOnDispose(diffOverviewRoot, viewportDomElement.domNode),\n\t\t);\n\t\tthis._register(\n\t\t\taddStandardDisposableListener(\n\t\t\t\tdiffOverviewRoot,\n\t\t\t\tEventType.POINTER_DOWN,\n\t\t\t\t(e) => {\n\t\t\t\t\tthis._editors.modified.delegateVerticalScrollbarPointerDown(\n\t\t\t\t\t\te,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tdiffOverviewRoot,\n\t\t\t\tEventType.MOUSE_WHEEL,\n\t\t\t\t(e: IMouseWheelEvent) => {\n\t\t\t\t\tthis._editors.modified.delegateScrollFromMouseWheelEvent(e);\n\t\t\t\t},\n\t\t\t\t{ passive: false },\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tappendRemoveOnDispose(this._rootElement, diffOverviewRoot),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorunWithStore((reader, store) => {\n\t\t\t\t/** @description recreate overview rules when model changes */\n\t\t\t\tconst m = this._diffModel.read(reader);\n\n\t\t\t\tconst originalOverviewRuler =\n\t\t\t\t\tthis._editors.original.createOverviewRuler(\n\t\t\t\t\t\t\"original diffOverviewRuler\",\n\t\t\t\t\t);\n\t\t\t\tif (originalOverviewRuler) {\n\t\t\t\t\tstore.add(originalOverviewRuler);\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tappendRemoveOnDispose(\n\t\t\t\t\t\t\tdiffOverviewRoot,\n\t\t\t\t\t\t\toriginalOverviewRuler.getDomNode(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst modifiedOverviewRuler =\n\t\t\t\t\tthis._editors.modified.createOverviewRuler(\n\t\t\t\t\t\t\"modified diffOverviewRuler\",\n\t\t\t\t\t);\n\t\t\t\tif (modifiedOverviewRuler) {\n\t\t\t\t\tstore.add(modifiedOverviewRuler);\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tappendRemoveOnDispose(\n\t\t\t\t\t\t\tdiffOverviewRoot,\n\t\t\t\t\t\t\tmodifiedOverviewRuler.getDomNode(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!originalOverviewRuler || !modifiedOverviewRuler) {\n\t\t\t\t\t// probably no model\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst origViewZonesChanged = observableSignalFromEvent(\n\t\t\t\t\t\"viewZoneChanged\",\n\t\t\t\t\tthis._editors.original.onDidChangeViewZones,\n\t\t\t\t);\n\t\t\t\tconst modViewZonesChanged = observableSignalFromEvent(\n\t\t\t\t\t\"viewZoneChanged\",\n\t\t\t\t\tthis._editors.modified.onDidChangeViewZones,\n\t\t\t\t);\n\t\t\t\tconst origHiddenRangesChanged = observableSignalFromEvent(\n\t\t\t\t\t\"hiddenRangesChanged\",\n\t\t\t\t\tthis._editors.original.onDidChangeHiddenAreas,\n\t\t\t\t);\n\t\t\t\tconst modHiddenRangesChanged = observableSignalFromEvent(\n\t\t\t\t\t\"hiddenRangesChanged\",\n\t\t\t\t\tthis._editors.modified.onDidChangeHiddenAreas,\n\t\t\t\t);\n\n\t\t\t\tstore.add(\n\t\t\t\t\tautorun((reader) => {\n\t\t\t\t\t\t/** @description set overview ruler zones */\n\t\t\t\t\t\torigViewZonesChanged.read(reader);\n\t\t\t\t\t\tmodViewZonesChanged.read(reader);\n\t\t\t\t\t\torigHiddenRangesChanged.read(reader);\n\t\t\t\t\t\tmodHiddenRangesChanged.read(reader);\n\n\t\t\t\t\t\tconst colors = currentColors.read(reader);\n\t\t\t\t\t\tconst diff = m?.diff.read(reader)?.mappings;\n\n\t\t\t\t\t\tfunction createZones(\n\t\t\t\t\t\t\tranges: LineRange[],\n\t\t\t\t\t\t\tcolor: Color,\n\t\t\t\t\t\t\teditor: CodeEditorWidget,\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst vm = editor._getViewModel();\n\t\t\t\t\t\t\tif (!vm) {\n\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ranges\n\t\t\t\t\t\t\t\t.filter((d) => d.length > 0)\n\t\t\t\t\t\t\t\t.map((r) => {\n\t\t\t\t\t\t\t\t\tconst start =\n\t\t\t\t\t\t\t\t\t\tvm.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\t\t\t\t\t\t\tnew Position(r.startLineNumber, 1),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst end =\n\t\t\t\t\t\t\t\t\t\tvm.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\t\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\t\t\t\t\t\tr.endLineNumberExclusive,\n\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// By computing the lineCount, we won't ask the view model later for the bottom vertical position.\n\t\t\t\t\t\t\t\t\t// (The view model will take into account the alignment viewzones, which will give\n\t\t\t\t\t\t\t\t\t// modifications and deletetions always the same height.)\n\t\t\t\t\t\t\t\t\tconst lineCount =\n\t\t\t\t\t\t\t\t\t\tend.lineNumber - start.lineNumber;\n\t\t\t\t\t\t\t\t\treturn new OverviewRulerZone(\n\t\t\t\t\t\t\t\t\t\tstart.lineNumber,\n\t\t\t\t\t\t\t\t\t\tend.lineNumber,\n\t\t\t\t\t\t\t\t\t\tlineCount,\n\t\t\t\t\t\t\t\t\t\tcolor.toString(),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst originalZones = createZones(\n\t\t\t\t\t\t\t(diff || []).map(\n\t\t\t\t\t\t\t\t(d) => d.lineRangeMapping.original,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcolors.removeColor,\n\t\t\t\t\t\t\tthis._editors.original,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst modifiedZones = createZones(\n\t\t\t\t\t\t\t(diff || []).map(\n\t\t\t\t\t\t\t\t(d) => d.lineRangeMapping.modified,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcolors.insertColor,\n\t\t\t\t\t\t\tthis._editors.modified,\n\t\t\t\t\t\t);\n\t\t\t\t\t\toriginalOverviewRuler?.setZones(originalZones);\n\t\t\t\t\t\tmodifiedOverviewRuler?.setZones(modifiedZones);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tstore.add(\n\t\t\t\t\tautorun((reader) => {\n\t\t\t\t\t\t/** @description layout overview ruler */\n\t\t\t\t\t\tconst height = this._rootHeight.read(reader);\n\t\t\t\t\t\tconst width = this._rootWidth.read(reader);\n\t\t\t\t\t\tconst layoutInfo =\n\t\t\t\t\t\t\tthis._modifiedEditorLayoutInfo.read(reader);\n\t\t\t\t\t\tif (layoutInfo) {\n\t\t\t\t\t\t\tconst freeSpace =\n\t\t\t\t\t\t\t\tOverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH -\n\t\t\t\t\t\t\t\t2 * OverviewRulerFeature.ONE_OVERVIEW_WIDTH;\n\t\t\t\t\t\t\toriginalOverviewRuler.setLayout({\n\t\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\t\theight: height,\n\t\t\t\t\t\t\t\tright:\n\t\t\t\t\t\t\t\t\tfreeSpace +\n\t\t\t\t\t\t\t\t\tOverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t\t\t\twidth: OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tmodifiedOverviewRuler.setLayout({\n\t\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\t\theight: height,\n\t\t\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\t\t\twidth: OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst scrollTop =\n\t\t\t\t\t\t\t\tthis._editors.modifiedScrollTop.read(reader);\n\t\t\t\t\t\t\tconst scrollHeight =\n\t\t\t\t\t\t\t\tthis._editors.modifiedScrollHeight.read(reader);\n\n\t\t\t\t\t\t\tconst scrollBarOptions =\n\t\t\t\t\t\t\t\tthis._editors.modified.getOption(\n\t\t\t\t\t\t\t\t\tEditorOption.scrollbar,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst state = new ScrollbarState(\n\t\t\t\t\t\t\t\tscrollBarOptions.verticalHasArrows\n\t\t\t\t\t\t\t\t\t? scrollBarOptions.arrowSize\n\t\t\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t\t\t\tscrollBarOptions.verticalScrollbarSize,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tlayoutInfo.height,\n\t\t\t\t\t\t\t\tscrollHeight,\n\t\t\t\t\t\t\t\tscrollTop,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tviewportDomElement.setTop(\n\t\t\t\t\t\t\t\tstate.getSliderPosition(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tviewportDomElement.setHeight(state.getSliderSize());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tviewportDomElement.setTop(0);\n\t\t\t\t\t\t\tviewportDomElement.setHeight(0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdiffOverviewRoot.style.height = height + \"px\";\n\t\t\t\t\t\tdiffOverviewRoot.style.left =\n\t\t\t\t\t\t\twidth -\n\t\t\t\t\t\t\tOverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH +\n\t\t\t\t\t\t\t\"px\";\n\t\t\t\t\t\tviewportDomElement.setWidth(\n\t\t\t\t\t\t\tOverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["reader"]
}
