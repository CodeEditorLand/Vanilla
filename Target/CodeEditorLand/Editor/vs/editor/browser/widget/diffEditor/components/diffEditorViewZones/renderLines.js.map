{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/renderLines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../../../../base/browser/trustedTypes.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { ICodeEditor } from '../../../../editorBrowser.js';\nimport { EditorFontLigatures, EditorOption, FindComputedEditorOptionValueById } from '../../../../../common/config/editorOptions.js';\nimport { FontInfo } from '../../../../../common/config/fontInfo.js';\nimport { StringBuilder } from '../../../../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../../../../common/modelLineProjectionData.js';\nimport { IViewLineTokens, LineTokens } from '../../../../../common/tokens/lineTokens.js';\nimport { LineDecoration } from '../../../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../../../../common/viewModel.js';\n\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\n\nexport function renderLines(source: LineSource, options: RenderOptions, decorations: InlineDecoration[], domNode: HTMLElement): RenderLinesResult {\n\tapplyFontInfo(domNode, options.fontInfo);\n\n\tconst hasCharChanges = (decorations.length > 0);\n\n\tconst sb = new StringBuilder(10000);\n\tlet maxCharsPerLine = 0;\n\tlet renderedLineCount = 0;\n\tconst viewLineCounts: number[] = [];\n\tfor (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n\t\tconst lineNumber = lineIndex + 1;\n\t\tconst lineTokens = source.lineTokens[lineIndex];\n\t\tconst lineBreakData = source.lineBreakData[lineIndex];\n\t\tconst actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n\n\t\tif (lineBreakData) {\n\t\t\tlet lastBreakOffset = 0;\n\t\t\tfor (const breakOffset of lineBreakData.breakOffsets) {\n\t\t\t\tconst viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n\t\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\t\trenderedLineCount,\n\t\t\t\t\tviewLineTokens,\n\t\t\t\t\tLineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset),\n\t\t\t\t\thasCharChanges,\n\t\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\t\tsource.mightContainRTL,\n\t\t\t\t\toptions,\n\t\t\t\t\tsb\n\t\t\t\t));\n\t\t\t\trenderedLineCount++;\n\t\t\t\tlastBreakOffset = breakOffset;\n\t\t\t}\n\t\t\tviewLineCounts.push(lineBreakData.breakOffsets.length);\n\t\t} else {\n\t\t\tviewLineCounts.push(1);\n\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\trenderedLineCount,\n\t\t\t\tlineTokens,\n\t\t\t\tactualDecorations,\n\t\t\t\thasCharChanges,\n\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\tsource.mightContainRTL,\n\t\t\t\toptions,\n\t\t\t\tsb,\n\t\t\t));\n\t\t\trenderedLineCount++;\n\t\t}\n\t}\n\tmaxCharsPerLine += options.scrollBeyondLastColumn;\n\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n\tconst minWidthInPx = (maxCharsPerLine * options.typicalHalfwidthCharacterWidth);\n\n\treturn {\n\t\theightInLines: renderedLineCount,\n\t\tminWidthInPx,\n\t\tviewLineCounts,\n\t};\n}\n\n\nexport class LineSource {\n\tconstructor(\n\t\tpublic readonly lineTokens: LineTokens[],\n\t\tpublic readonly lineBreakData: (ModelLineProjectionData | null)[],\n\t\tpublic readonly mightContainNonBasicASCII: boolean,\n\t\tpublic readonly mightContainRTL: boolean,\n\t) { }\n}\n\nexport class RenderOptions {\n\tpublic static fromEditor(editor: ICodeEditor): RenderOptions {\n\n\t\tconst modifiedEditorOptions = editor.getOptions();\n\t\tconst fontInfo = modifiedEditorOptions.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = modifiedEditorOptions.get(EditorOption.layoutInfo);\n\n\t\treturn new RenderOptions(\n\t\t\teditor.getModel()?.getOptions().tabSize || 0,\n\t\t\tfontInfo,\n\t\t\tmodifiedEditorOptions.get(EditorOption.disableMonospaceOptimizations),\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollBeyondLastColumn),\n\n\t\t\tmodifiedEditorOptions.get(EditorOption.lineHeight),\n\n\t\t\tlayoutInfo.decorationsWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.stopRenderingLineAfter),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderWhitespace),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderControlCharacters),\n\t\t\tmodifiedEditorOptions.get(EditorOption.fontLigatures),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly tabSize: number,\n\t\tpublic readonly fontInfo: FontInfo,\n\t\tpublic readonly disableMonospaceOptimizations: boolean,\n\t\tpublic readonly typicalHalfwidthCharacterWidth: number,\n\t\tpublic readonly scrollBeyondLastColumn: number,\n\t\tpublic readonly lineHeight: number,\n\t\tpublic readonly lineDecorationsWidth: number,\n\t\tpublic readonly stopRenderingLineAfter: number,\n\t\tpublic readonly renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>,\n\t\tpublic readonly renderControlCharacters: boolean,\n\t\tpublic readonly fontLigatures: FindComputedEditorOptionValueById<EditorOption.fontLigatures>,\n\t) { }\n}\n\nexport interface RenderLinesResult {\n\tminWidthInPx: number;\n\theightInLines: number;\n\tviewLineCounts: number[];\n}\n\nfunction renderOriginalLine(\n\tviewLineIdx: number,\n\tlineTokens: IViewLineTokens,\n\tdecorations: LineDecoration[],\n\thasCharChanges: boolean,\n\tmightContainNonBasicASCII: boolean,\n\tmightContainRTL: boolean,\n\toptions: RenderOptions,\n\tsb: StringBuilder,\n): number {\n\n\tsb.appendString('<div class=\"view-line');\n\tif (!hasCharChanges) {\n\t\t// No char changes\n\t\tsb.appendString(' char-delete');\n\t}\n\tsb.appendString('\" style=\"top:');\n\tsb.appendString(String(viewLineIdx * options.lineHeight));\n\tsb.appendString('px;width:1000000px;\">');\n\n\tconst lineContent = lineTokens.getLineContent();\n\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n\tconst containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n\tconst output = renderViewLine(new RenderLineInput(\n\t\t(options.fontInfo.isMonospace && !options.disableMonospaceOptimizations),\n\t\toptions.fontInfo.canUseHalfwidthRightwardsArrow,\n\t\tlineContent,\n\t\tfalse,\n\t\tisBasicASCII,\n\t\tcontainsRTL,\n\t\t0,\n\t\tlineTokens,\n\t\tdecorations,\n\t\toptions.tabSize,\n\t\t0,\n\t\toptions.fontInfo.spaceWidth,\n\t\toptions.fontInfo.middotWidth,\n\t\toptions.fontInfo.wsmiddotWidth,\n\t\toptions.stopRenderingLineAfter,\n\t\toptions.renderWhitespace,\n\t\toptions.renderControlCharacters,\n\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\tnull // Send no selections, original line cannot be selected\n\t), sb);\n\n\tsb.appendString('</div>');\n\n\treturn output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}\n"],
  "mappings": ";;AAKA,SAAS,gCAAgC;AACzC,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB,cAAc,yCAAyC;AACrF,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAC9B,SAAS,+BAA+B;AACxC,SAAS,iBAAiB,kBAAkB;AAC5C,SAAS,sBAAsB;AAC/B,SAAS,iBAAiB,sBAAsB;AAChD,SAAS,kBAAkB,6BAA6B;AAExD,MAAM,WAAW,yBAAyB,oBAAoB,EAAE,YAAY,kCAAS,OAAT,cAAe,CAAC;AAErF,SAAS,YAAY,QAAoB,SAAwB,aAAiC,SAAyC;AACjJ,gBAAc,SAAS,QAAQ,QAAQ;AAEvC,QAAM,iBAAkB,YAAY,SAAS;AAE7C,QAAM,KAAK,IAAI,cAAc,GAAK;AAClC,MAAI,kBAAkB;AACtB,MAAI,oBAAoB;AACxB,QAAM,iBAA2B,CAAC;AAClC,WAAS,YAAY,GAAG,YAAY,OAAO,WAAW,QAAQ,aAAa;AAC1E,UAAM,aAAa,YAAY;AAC/B,UAAM,aAAa,OAAO,WAAW,SAAS;AAC9C,UAAM,gBAAgB,OAAO,cAAc,SAAS;AACpD,UAAM,oBAAoB,eAAe,OAAO,aAAa,YAAY,GAAG,OAAO,gBAAgB;AAEnG,QAAI,eAAe;AAClB,UAAI,kBAAkB;AACtB,iBAAW,eAAe,cAAc,cAAc;AACrD,cAAM,iBAAiB,WAAW,gBAAgB,iBAAiB,aAAa,CAAC;AACjF,0BAAkB,KAAK,IAAI,iBAAiB;AAAA,UAC3C;AAAA,UACA;AAAA,UACA,eAAe,eAAe,mBAAmB,iBAAiB,WAAW;AAAA,UAC7E;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,UACA;AAAA,QACD,CAAC;AACD;AACA,0BAAkB;AAAA,MACnB;AACA,qBAAe,KAAK,cAAc,aAAa,MAAM;AAAA,IACtD,OAAO;AACN,qBAAe,KAAK,CAAC;AACrB,wBAAkB,KAAK,IAAI,iBAAiB;AAAA,QAC3C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD,CAAC;AACD;AAAA,IACD;AAAA,EACD;AACA,qBAAmB,QAAQ;AAE3B,QAAM,OAAO,GAAG,MAAM;AACtB,QAAM,cAAc,WAAW,SAAS,WAAW,IAAI,IAAI;AAC3D,UAAQ,YAAY;AACpB,QAAM,eAAgB,kBAAkB,QAAQ;AAEhD,SAAO;AAAA,IACN,eAAe;AAAA,IACf;AAAA,IACA;AAAA,EACD;AACD;AA5DgB;AA+DT,MAAM,WAAW;AAAA,EACvB,YACiB,YACA,eACA,2BACA,iBACf;AAJe;AACA;AACA;AACA;AAAA,EACb;AAAA,EAxFL,OAkFwB;AAAA;AAAA;AAOxB;AAEO,MAAM,cAAc;AAAA,EAwB1B,YACiB,SACA,UACA,+BACA,gCACA,wBACA,YACA,sBACA,wBACA,kBACA,yBACA,eACf;AAXe;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EACb;AAAA,EA/HL,OA2F2B;AAAA;AAAA;AAAA,EAC1B,OAAc,WAAW,QAAoC;AAE5D,UAAM,wBAAwB,OAAO,WAAW;AAChD,UAAM,WAAW,sBAAsB,IAAI,aAAa,QAAQ;AAChE,UAAM,aAAa,sBAAsB,IAAI,aAAa,UAAU;AAEpE,WAAO,IAAI;AAAA,MACV,OAAO,SAAS,GAAG,WAAW,EAAE,WAAW;AAAA,MAC3C;AAAA,MACA,sBAAsB,IAAI,aAAa,6BAA6B;AAAA,MACpE,SAAS;AAAA,MACT,sBAAsB,IAAI,aAAa,sBAAsB;AAAA,MAE7D,sBAAsB,IAAI,aAAa,UAAU;AAAA,MAEjD,WAAW;AAAA,MACX,sBAAsB,IAAI,aAAa,sBAAsB;AAAA,MAC7D,sBAAsB,IAAI,aAAa,gBAAgB;AAAA,MACvD,sBAAsB,IAAI,aAAa,uBAAuB;AAAA,MAC9D,sBAAsB,IAAI,aAAa,aAAa;AAAA,IACrD;AAAA,EACD;AAeD;AAQA,SAAS,mBACR,aACA,YACA,aACA,gBACA,2BACA,iBACA,SACA,IACS;AAET,KAAG,aAAa,uBAAuB;AACvC,MAAI,CAAC,gBAAgB;AAEpB,OAAG,aAAa,cAAc;AAAA,EAC/B;AACA,KAAG,aAAa,eAAe;AAC/B,KAAG,aAAa,OAAO,cAAc,QAAQ,UAAU,CAAC;AACxD,KAAG,aAAa,uBAAuB;AAEvC,QAAM,cAAc,WAAW,eAAe;AAC9C,QAAM,eAAe,sBAAsB,aAAa,aAAa,yBAAyB;AAC9F,QAAM,cAAc,sBAAsB,YAAY,aAAa,cAAc,eAAe;AAChG,QAAM,SAAS,eAAe,IAAI;AAAA,IAChC,QAAQ,SAAS,eAAe,CAAC,QAAQ;AAAA,IAC1C,QAAQ,SAAS;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA,QAAQ,SAAS;AAAA,IACjB,QAAQ,SAAS;AAAA,IACjB,QAAQ,SAAS;AAAA,IACjB,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ,kBAAkB,oBAAoB;AAAA,IAC9C;AAAA;AAAA,EACD,GAAG,EAAE;AAEL,KAAG,aAAa,QAAQ;AAExB,SAAO,OAAO,iBAAiB,oBAAoB,OAAO,iBAAiB,MAAM;AAClF;AAhDS;",
  "names": []
}
