{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/renderLines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from \"../../../../../../base/browser/trustedTypes.js\";\nimport {\n\tEditorFontLigatures,\n\tEditorOption,\n\ttype FindComputedEditorOptionValueById,\n} from \"../../../../../common/config/editorOptions.js\";\nimport type { FontInfo } from \"../../../../../common/config/fontInfo.js\";\nimport { StringBuilder } from \"../../../../../common/core/stringBuilder.js\";\nimport type { ModelLineProjectionData } from \"../../../../../common/modelLineProjectionData.js\";\nimport type {\n\tIViewLineTokens,\n\tLineTokens,\n} from \"../../../../../common/tokens/lineTokens.js\";\nimport { LineDecoration } from \"../../../../../common/viewLayout/lineDecorations.js\";\nimport {\n\tRenderLineInput,\n\trenderViewLine,\n} from \"../../../../../common/viewLayout/viewLineRenderer.js\";\nimport {\n\ttype InlineDecoration,\n\tViewLineRenderingData,\n} from \"../../../../../common/viewModel.js\";\nimport { applyFontInfo } from \"../../../../config/domFontInfo.js\";\nimport type { ICodeEditor } from \"../../../../editorBrowser.js\";\n\nconst ttPolicy = createTrustedTypesPolicy(\"diffEditorWidget\", {\n\tcreateHTML: (value) => value,\n});\n\nexport function renderLines(\n\tsource: LineSource,\n\toptions: RenderOptions,\n\tdecorations: InlineDecoration[],\n\tdomNode: HTMLElement,\n): RenderLinesResult {\n\tapplyFontInfo(domNode, options.fontInfo);\n\n\tconst hasCharChanges = decorations.length > 0;\n\n\tconst sb = new StringBuilder(10000);\n\tlet maxCharsPerLine = 0;\n\tlet renderedLineCount = 0;\n\tconst viewLineCounts: number[] = [];\n\tfor (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n\t\tconst lineNumber = lineIndex + 1;\n\t\tconst lineTokens = source.lineTokens[lineIndex];\n\t\tconst lineBreakData = source.lineBreakData[lineIndex];\n\t\tconst actualDecorations = LineDecoration.filter(\n\t\t\tdecorations,\n\t\t\tlineNumber,\n\t\t\t1,\n\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t);\n\n\t\tif (lineBreakData) {\n\t\t\tlet lastBreakOffset = 0;\n\t\t\tfor (const breakOffset of lineBreakData.breakOffsets) {\n\t\t\t\tconst viewLineTokens = lineTokens.sliceAndInflate(\n\t\t\t\t\tlastBreakOffset,\n\t\t\t\t\tbreakOffset,\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\t\tmaxCharsPerLine = Math.max(\n\t\t\t\t\tmaxCharsPerLine,\n\t\t\t\t\trenderOriginalLine(\n\t\t\t\t\t\trenderedLineCount,\n\t\t\t\t\t\tviewLineTokens,\n\t\t\t\t\t\tLineDecoration.extractWrapped(\n\t\t\t\t\t\t\tactualDecorations,\n\t\t\t\t\t\t\tlastBreakOffset,\n\t\t\t\t\t\t\tbreakOffset,\n\t\t\t\t\t\t),\n\t\t\t\t\t\thasCharChanges,\n\t\t\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\t\t\tsource.mightContainRTL,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tsb,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\trenderedLineCount++;\n\t\t\t\tlastBreakOffset = breakOffset;\n\t\t\t}\n\t\t\tviewLineCounts.push(lineBreakData.breakOffsets.length);\n\t\t} else {\n\t\t\tviewLineCounts.push(1);\n\t\t\tmaxCharsPerLine = Math.max(\n\t\t\t\tmaxCharsPerLine,\n\t\t\t\trenderOriginalLine(\n\t\t\t\t\trenderedLineCount,\n\t\t\t\t\tlineTokens,\n\t\t\t\t\tactualDecorations,\n\t\t\t\t\thasCharChanges,\n\t\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\t\tsource.mightContainRTL,\n\t\t\t\t\toptions,\n\t\t\t\t\tsb,\n\t\t\t\t),\n\t\t\t);\n\t\t\trenderedLineCount++;\n\t\t}\n\t}\n\tmaxCharsPerLine += options.scrollBeyondLastColumn;\n\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n\tconst minWidthInPx =\n\t\tmaxCharsPerLine * options.typicalHalfwidthCharacterWidth;\n\n\treturn {\n\t\theightInLines: renderedLineCount,\n\t\tminWidthInPx,\n\t\tviewLineCounts,\n\t};\n}\n\nexport class LineSource {\n\tconstructor(\n\t\tpublic readonly lineTokens: LineTokens[],\n\t\tpublic readonly lineBreakData: (ModelLineProjectionData | null)[],\n\t\tpublic readonly mightContainNonBasicASCII: boolean,\n\t\tpublic readonly mightContainRTL: boolean,\n\t) {}\n}\n\nexport class RenderOptions {\n\tpublic static fromEditor(editor: ICodeEditor): RenderOptions {\n\t\tconst modifiedEditorOptions = editor.getOptions();\n\t\tconst fontInfo = modifiedEditorOptions.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = modifiedEditorOptions.get(EditorOption.layoutInfo);\n\n\t\treturn new RenderOptions(\n\t\t\teditor.getModel()?.getOptions().tabSize || 0,\n\t\t\tfontInfo,\n\t\t\tmodifiedEditorOptions.get(\n\t\t\t\tEditorOption.disableMonospaceOptimizations,\n\t\t\t),\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollBeyondLastColumn),\n\n\t\t\tmodifiedEditorOptions.get(EditorOption.lineHeight),\n\n\t\t\tlayoutInfo.decorationsWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.stopRenderingLineAfter),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderWhitespace),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderControlCharacters),\n\t\t\tmodifiedEditorOptions.get(EditorOption.fontLigatures),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly tabSize: number,\n\t\tpublic readonly fontInfo: FontInfo,\n\t\tpublic readonly disableMonospaceOptimizations: boolean,\n\t\tpublic readonly typicalHalfwidthCharacterWidth: number,\n\t\tpublic readonly scrollBeyondLastColumn: number,\n\t\tpublic readonly lineHeight: number,\n\t\tpublic readonly lineDecorationsWidth: number,\n\t\tpublic readonly stopRenderingLineAfter: number,\n\t\tpublic readonly renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>,\n\t\tpublic readonly renderControlCharacters: boolean,\n\t\tpublic readonly fontLigatures: FindComputedEditorOptionValueById<EditorOption.fontLigatures>,\n\t) {}\n}\n\nexport interface RenderLinesResult {\n\tminWidthInPx: number;\n\theightInLines: number;\n\tviewLineCounts: number[];\n}\n\nfunction renderOriginalLine(\n\tviewLineIdx: number,\n\tlineTokens: IViewLineTokens,\n\tdecorations: LineDecoration[],\n\thasCharChanges: boolean,\n\tmightContainNonBasicASCII: boolean,\n\tmightContainRTL: boolean,\n\toptions: RenderOptions,\n\tsb: StringBuilder,\n): number {\n\tsb.appendString('<div class=\"view-line');\n\tif (!hasCharChanges) {\n\t\t// No char changes\n\t\tsb.appendString(\" char-delete\");\n\t}\n\tsb.appendString('\" style=\"top:');\n\tsb.appendString(String(viewLineIdx * options.lineHeight));\n\tsb.appendString('px;width:1000000px;\">');\n\n\tconst lineContent = lineTokens.getLineContent();\n\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(\n\t\tlineContent,\n\t\tmightContainNonBasicASCII,\n\t);\n\tconst containsRTL = ViewLineRenderingData.containsRTL(\n\t\tlineContent,\n\t\tisBasicASCII,\n\t\tmightContainRTL,\n\t);\n\tconst output = renderViewLine(\n\t\tnew RenderLineInput(\n\t\t\toptions.fontInfo.isMonospace &&\n\t\t\t\t!options.disableMonospaceOptimizations,\n\t\t\toptions.fontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\tdecorations,\n\t\t\toptions.tabSize,\n\t\t\t0,\n\t\t\toptions.fontInfo.spaceWidth,\n\t\t\toptions.fontInfo.middotWidth,\n\t\t\toptions.fontInfo.wsmiddotWidth,\n\t\t\toptions.stopRenderingLineAfter,\n\t\t\toptions.renderWhitespace,\n\t\t\toptions.renderControlCharacters,\n\t\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\t\tnull, // Send no selections, original line cannot be selected\n\t\t),\n\t\tsb,\n\t);\n\n\tsb.appendString(\"</div>\");\n\n\treturn output.characterMapping.getHorizontalOffset(\n\t\toutput.characterMapping.length,\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
