var g=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var l=(a,e,t,i)=>{for(var r=i>1?void 0:i?v(e,t):e,o=a.length-1,f;o>=0;o--)(f=a[o])&&(r=(i?f(e,t,r):f(r))||r);return i&&r&&g(e,t,r),r},m=(a,e)=>(t,i)=>e(t,i,a);import{Emitter as D}from"../../../../base/common/event.js";import{StopWatch as y}from"../../../../base/common/stopwatch.js";import{InstantiationType as I,registerSingleton as S}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as C,createDecorator as A}from"../../../../platform/instantiation/common/instantiation.js";import{ITelemetryService as E}from"../../../../platform/telemetry/common/telemetry.js";import{LineRange as u}from"../../../common/core/lineRange.js";import{DetailedLineRangeMapping as M,RangeMapping as b}from"../../../common/diff/rangeMapping.js";import{IEditorWorkerService as O}from"../../../common/services/editorWorker.js";const w=A("diffProviderFactoryService");let c=class{constructor(e){this.instantiationService=e}_serviceBrand;createDiffProvider(e){return this.instantiationService.createInstance(n,e)}};c=l([m(0,C)],c),S(w,c,I.Delayed);let n=class{constructor(e,t,i){this.editorWorkerService=t;this.telemetryService=i;this.setOptions(e)}onDidChangeEventEmitter=new D;onDidChange=this.onDidChangeEventEmitter.event;diffAlgorithm="advanced";diffAlgorithmOnDidChangeSubscription=void 0;static diffCache=new Map;dispose(){this.diffAlgorithmOnDidChangeSubscription?.dispose()}async computeDiff(e,t,i,r){if(typeof this.diffAlgorithm!="string")return this.diffAlgorithm.computeDiff(e,t,i,r);if(e.isDisposed()||t.isDisposed())return{changes:[],identical:!0,quitEarly:!1,moves:[]};if(e.getLineCount()===1&&e.getLineMaxColumn(1)===1)return t.getLineCount()===1&&t.getLineMaxColumn(1)===1?{changes:[],identical:!0,quitEarly:!1,moves:[]}:{changes:[new M(new u(1,2),new u(1,t.getLineCount()+1),[new b(e.getFullModelRange(),t.getFullModelRange())])],identical:!1,quitEarly:!1,moves:[]};const o=JSON.stringify([e.uri.toString(),t.uri.toString()]),f=JSON.stringify([e.id,t.id,e.getAlternativeVersionId(),t.getAlternativeVersionId(),JSON.stringify(i)]),d=n.diffCache.get(o);if(d&&d.context===f)return d.result;const h=y.create(),s=await this.editorWorkerService.computeDiff(e.uri,t.uri,i,this.diffAlgorithm),p=h.elapsed();if(this.telemetryService.publicLog2("diffEditor.computeDiff",{timeMs:p,timedOut:s?.quitEarly??!0,detectedMoves:i.computeMoves?s?.moves.length??0:-1}),r.isCancellationRequested)return{changes:[],identical:!1,quitEarly:!0,moves:[]};if(!s)throw new Error("no diff result available");return n.diffCache.size>10&&n.diffCache.delete(n.diffCache.keys().next().value),n.diffCache.set(o,{result:s,context:f}),s}setOptions(e){let t=!1;e.diffAlgorithm&&this.diffAlgorithm!==e.diffAlgorithm&&(this.diffAlgorithmOnDidChangeSubscription?.dispose(),this.diffAlgorithmOnDidChangeSubscription=void 0,this.diffAlgorithm=e.diffAlgorithm,typeof e.diffAlgorithm!="string"&&(this.diffAlgorithmOnDidChangeSubscription=e.diffAlgorithm.onDidChange(()=>this.onDidChangeEventEmitter.fire())),t=!0),t&&this.onDidChangeEventEmitter.fire()}};n=l([m(1,O),m(2,E)],n);export{w as IDiffProviderFactoryService,c as WorkerBasedDiffProviderFactoryService,n as WorkerBasedDocumentDiffProvider};
