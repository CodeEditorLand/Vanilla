{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/features/revertButtonsFeature.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, h, EventType } from '../../../../../base/browser/dom.js';\nimport { renderIcon } from '../../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, autorunWithStore, derived } from '../../../../../base/common/observable.js';\nimport { IGlyphMarginWidget, IGlyphMarginWidgetPosition } from '../../../editorBrowser.js';\nimport { DiffEditorEditors } from '../components/diffEditorEditors.js';\nimport { DiffEditorOptions } from '../diffEditorOptions.js';\nimport { DiffEditorViewModel } from '../diffEditorViewModel.js';\nimport { DiffEditorWidget } from '../diffEditorWidget.js';\nimport { LineRange, LineRangeSet } from '../../../../common/core/lineRange.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { LineRangeMapping, RangeMapping } from '../../../../common/diff/rangeMapping.js';\nimport { GlyphMarginLane } from '../../../../common/model.js';\nimport { localize } from '../../../../../nls.js';\n\nconst emptyArr: never[] = [];\n\nexport class RevertButtonsFeature extends Disposable {\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _diffModel: IObservable<DiffEditorViewModel | undefined>,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\tprivate readonly _widget: DiffEditorWidget\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tif (!this._options.shouldRenderOldRevertArrows.read(reader)) { return; }\n\t\t\tconst model = this._diffModel.read(reader);\n\t\t\tconst diff = model?.diff.read(reader);\n\t\t\tif (!model || !diff) { return; }\n\t\t\tif (model.movedTextToCompare.read(reader)) { return; }\n\n\t\t\tconst glyphWidgetsModified: IGlyphMarginWidget[] = [];\n\n\t\t\tconst selectedDiffs = this._selectedDiffs.read(reader);\n\t\t\tconst selectedDiffsSet = new Set(selectedDiffs.map(d => d.mapping));\n\n\t\t\tif (selectedDiffs.length > 0) {\n\t\t\t\t// The button to revert the selection\n\t\t\t\tconst selections = this._editors.modifiedSelections.read(reader);\n\n\t\t\t\tconst btn = store.add(new RevertButton(\n\t\t\t\t\tselections[selections.length - 1].positionLineNumber,\n\t\t\t\t\tthis._widget,\n\t\t\t\t\tselectedDiffs.flatMap(d => d.rangeMappings),\n\t\t\t\t\ttrue\n\t\t\t\t));\n\t\t\t\tthis._editors.modified.addGlyphMarginWidget(btn);\n\t\t\t\tglyphWidgetsModified.push(btn);\n\t\t\t}\n\n\t\t\tfor (const m of diff.mappings) {\n\t\t\t\tif (selectedDiffsSet.has(m)) { continue; }\n\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty && m.lineRangeMapping.innerChanges) {\n\t\t\t\t\tconst btn = store.add(new RevertButton(\n\t\t\t\t\t\tm.lineRangeMapping.modified.startLineNumber,\n\t\t\t\t\t\tthis._widget,\n\t\t\t\t\t\tm.lineRangeMapping,\n\t\t\t\t\t\tfalse\n\t\t\t\t\t));\n\t\t\t\t\tthis._editors.modified.addGlyphMarginWidget(btn);\n\t\t\t\t\tglyphWidgetsModified.push(btn);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstore.add(toDisposable(() => {\n\t\t\t\tfor (const w of glyphWidgetsModified) {\n\t\t\t\t\tthis._editors.modified.removeGlyphMarginWidget(w);\n\t\t\t\t}\n\t\t\t}));\n\t\t}));\n\t}\n\n\tprivate readonly _selectedDiffs = derived(this, (reader) => {\n\t\t/** @description selectedDiffs */\n\t\tconst model = this._diffModel.read(reader);\n\t\tconst diff = model?.diff.read(reader);\n\t\t// Return `emptyArr` because it is a constant. [] is always a new array and would trigger a change.\n\t\tif (!diff) { return emptyArr; }\n\n\t\tconst selections = this._editors.modifiedSelections.read(reader);\n\t\tif (selections.every(s => s.isEmpty())) { return emptyArr; }\n\n\t\tconst selectedLineNumbers = new LineRangeSet(selections.map(s => LineRange.fromRangeInclusive(s)));\n\n\t\tconst selectedMappings = diff.mappings.filter(m =>\n\t\t\tm.lineRangeMapping.innerChanges && selectedLineNumbers.intersects(m.lineRangeMapping.modified)\n\t\t);\n\t\tconst result = selectedMappings.map(mapping => ({\n\t\t\tmapping,\n\t\t\trangeMappings: mapping.lineRangeMapping.innerChanges!.filter(\n\t\t\t\tc => selections.some(s => Range.areIntersecting(c.modifiedRange, s))\n\t\t\t)\n\t\t}));\n\t\tif (result.length === 0 || result.every(r => r.rangeMappings.length === 0)) { return emptyArr; }\n\t\treturn result;\n\t});\n}\n\nexport class RevertButton extends Disposable implements IGlyphMarginWidget {\n\tpublic static counter = 0;\n\n\tprivate readonly _id: string = `revertButton${RevertButton.counter++}`;\n\n\tgetId(): string { return this._id; }\n\n\tprivate readonly _domNode = h('div.revertButton', {\n\t\ttitle: this._revertSelection\n\t\t\t? localize('revertSelectedChanges', 'Revert Selected Changes')\n\t\t\t: localize('revertChange', 'Revert Change')\n\t},\n\t\t[renderIcon(Codicon.arrowRight)]\n\t).root;\n\n\tconstructor(\n\t\tprivate readonly _lineNumber: number,\n\t\tprivate readonly _widget: DiffEditorWidget,\n\t\tprivate readonly _diffs: RangeMapping[] | LineRangeMapping,\n\t\tprivate readonly _revertSelection: boolean,\n\t) {\n\t\tsuper();\n\n\n\t\tthis._register(addDisposableListener(this._domNode, EventType.MOUSE_DOWN, e => {\n\t\t\t// don't prevent context menu from showing up\n\t\t\tif (e.button !== 2) {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(addDisposableListener(this._domNode, EventType.MOUSE_UP, e => {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t}));\n\n\t\tthis._register(addDisposableListener(this._domNode, EventType.CLICK, (e) => {\n\t\t\tif (this._diffs instanceof LineRangeMapping) {\n\t\t\t\tthis._widget.revert(this._diffs);\n\t\t\t} else {\n\t\t\t\tthis._widget.revertRangeMappings(this._diffs);\n\t\t\t}\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t}));\n\t}\n\n\t/**\n\t * Get the dom node of the glyph widget.\n\t */\n\tgetDomNode(): HTMLElement {\n\t\treturn this._domNode;\n\t}\n\n\t/**\n\t * Get the placement of the glyph widget.\n\t */\n\tgetPosition(): IGlyphMarginWidgetPosition {\n\t\treturn {\n\t\t\tlane: GlyphMarginLane.Right,\n\t\t\trange: {\n\t\t\t\tstartColumn: 1,\n\t\t\t\tstartLineNumber: this._lineNumber,\n\t\t\t\tendColumn: 1,\n\t\t\t\tendLineNumber: this._lineNumber,\n\t\t\t},\n\t\t\tzIndex: 10001,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
