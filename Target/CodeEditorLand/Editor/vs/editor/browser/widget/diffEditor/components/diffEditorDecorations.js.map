{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/components/diffEditorDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tderived,\n} from \"../../../../../base/common/observable.js\";\nimport type { IModelDeltaDecoration } from \"../../../../common/model.js\";\nimport type { DiffEditorOptions } from \"../diffEditorOptions.js\";\nimport type { DiffEditorViewModel } from \"../diffEditorViewModel.js\";\nimport type { DiffEditorWidget } from \"../diffEditorWidget.js\";\nimport { MovedBlocksLinesFeature } from \"../features/movedBlocksLinesFeature.js\";\nimport {\n\tdiffAddDecoration,\n\tdiffAddDecorationEmpty,\n\tdiffDeleteDecoration,\n\tdiffDeleteDecorationEmpty,\n\tdiffLineAddDecorationBackground,\n\tdiffLineAddDecorationBackgroundWithIndicator,\n\tdiffLineDeleteDecorationBackground,\n\tdiffLineDeleteDecorationBackgroundWithIndicator,\n\tdiffWholeLineAddDecoration,\n\tdiffWholeLineDeleteDecoration,\n} from \"../registrations.contribution.js\";\nimport { applyObservableDecorations } from \"../utils.js\";\nimport type { DiffEditorEditors } from \"./diffEditorEditors.js\";\nimport { allowsTrueInlineDiffRendering } from \"./diffEditorViewZones/diffEditorViewZones.js\";\n\nexport class DiffEditorDecorations extends Disposable {\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _diffModel: IObservable<\n\t\t\tDiffEditorViewModel | undefined\n\t\t>,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\twidget: DiffEditorWidget,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tapplyObservableDecorations(\n\t\t\t\tthis._editors.original,\n\t\t\t\tthis._decorations.map((d) => d?.originalDecorations || []),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tapplyObservableDecorations(\n\t\t\t\tthis._editors.modified,\n\t\t\t\tthis._decorations.map((d) => d?.modifiedDecorations || []),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate readonly _decorations = derived(this, (reader) => {\n\t\tconst diffModel = this._diffModel.read(reader);\n\t\tconst diff = diffModel?.diff.read(reader);\n\t\tif (!diff) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst movedTextToCompare = this._diffModel\n\t\t\t.read(reader)!\n\t\t\t.movedTextToCompare.read(reader);\n\t\tconst renderIndicators = this._options.renderIndicators.read(reader);\n\t\tconst showEmptyDecorations =\n\t\t\tthis._options.showEmptyDecorations.read(reader);\n\n\t\tconst originalDecorations: IModelDeltaDecoration[] = [];\n\t\tconst modifiedDecorations: IModelDeltaDecoration[] = [];\n\t\tif (!movedTextToCompare) {\n\t\t\tfor (const m of diff.mappings) {\n\t\t\t\tif (!m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\trange: m.lineRangeMapping.original.toInclusiveRange()!,\n\t\t\t\t\t\toptions: renderIndicators\n\t\t\t\t\t\t\t? diffLineDeleteDecorationBackgroundWithIndicator\n\t\t\t\t\t\t\t: diffLineDeleteDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\trange: m.lineRangeMapping.modified.toInclusiveRange()!,\n\t\t\t\t\t\toptions: renderIndicators\n\t\t\t\t\t\t\t? diffLineAddDecorationBackgroundWithIndicator\n\t\t\t\t\t\t\t: diffLineAddDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tm.lineRangeMapping.modified.isEmpty ||\n\t\t\t\t\tm.lineRangeMapping.original.isEmpty\n\t\t\t\t) {\n\t\t\t\t\tif (!m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\t\trange: m.lineRangeMapping.original.toInclusiveRange()!,\n\t\t\t\t\t\t\toptions: diffWholeLineDeleteDecoration,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\t\trange: m.lineRangeMapping.modified.toInclusiveRange()!,\n\t\t\t\t\t\t\toptions: diffWholeLineAddDecoration,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst useInlineDiff =\n\t\t\t\t\t\tthis._options.useTrueInlineDiffRendering.read(reader) &&\n\t\t\t\t\t\tallowsTrueInlineDiffRendering(m.lineRangeMapping);\n\t\t\t\t\tfor (const i of m.lineRangeMapping.innerChanges || []) {\n\t\t\t\t\t\t// Don't show empty markers outside the line range\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tm.lineRangeMapping.original.contains(\n\t\t\t\t\t\t\t\ti.originalRange.startLineNumber,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\t\t\trange: i.originalRange,\n\t\t\t\t\t\t\t\toptions:\n\t\t\t\t\t\t\t\t\ti.originalRange.isEmpty() &&\n\t\t\t\t\t\t\t\t\tshowEmptyDecorations\n\t\t\t\t\t\t\t\t\t\t? diffDeleteDecorationEmpty\n\t\t\t\t\t\t\t\t\t\t: diffDeleteDecoration,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tm.lineRangeMapping.modified.contains(\n\t\t\t\t\t\t\t\ti.modifiedRange.startLineNumber,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\t\t\trange: i.modifiedRange,\n\t\t\t\t\t\t\t\toptions:\n\t\t\t\t\t\t\t\t\ti.modifiedRange.isEmpty() &&\n\t\t\t\t\t\t\t\t\tshowEmptyDecorations &&\n\t\t\t\t\t\t\t\t\t!useInlineDiff\n\t\t\t\t\t\t\t\t\t\t? diffAddDecorationEmpty\n\t\t\t\t\t\t\t\t\t\t: diffAddDecoration,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (useInlineDiff) {\n\t\t\t\t\t\t\tconst deletedText =\n\t\t\t\t\t\t\t\tdiffModel!.model.original.getValueInRange(\n\t\t\t\t\t\t\t\t\ti.originalRange,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\t\t\trange: i.modifiedRange,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tdescription: \"deleted-text\",\n\t\t\t\t\t\t\t\t\tbefore: {\n\t\t\t\t\t\t\t\t\t\tcontent: deletedText,\n\t\t\t\t\t\t\t\t\t\tinlineClassName: \"inline-deleted-text\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tzIndex: 100000,\n\t\t\t\t\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (movedTextToCompare) {\n\t\t\tfor (const m of movedTextToCompare.changes) {\n\t\t\t\tconst fullRangeOriginal = m.original.toInclusiveRange();\n\t\t\t\tif (fullRangeOriginal) {\n\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\trange: fullRangeOriginal,\n\t\t\t\t\t\toptions: renderIndicators\n\t\t\t\t\t\t\t? diffLineDeleteDecorationBackgroundWithIndicator\n\t\t\t\t\t\t\t: diffLineDeleteDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst fullRangeModified = m.modified.toInclusiveRange();\n\t\t\t\tif (fullRangeModified) {\n\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\trange: fullRangeModified,\n\t\t\t\t\t\toptions: renderIndicators\n\t\t\t\t\t\t\t? diffLineAddDecorationBackgroundWithIndicator\n\t\t\t\t\t\t\t: diffLineAddDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const i of m.innerChanges || []) {\n\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\trange: i.originalRange,\n\t\t\t\t\t\toptions: diffDeleteDecoration,\n\t\t\t\t\t});\n\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\trange: i.modifiedRange,\n\t\t\t\t\t\toptions: diffAddDecoration,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst activeMovedText = this._diffModel\n\t\t\t.read(reader)!\n\t\t\t.activeMovedText.read(reader);\n\n\t\tfor (const m of diff.movedTexts) {\n\t\t\toriginalDecorations.push({\n\t\t\t\trange: m.lineRangeMapping.original.toInclusiveRange()!,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"moved\",\n\t\t\t\t\tblockClassName:\n\t\t\t\t\t\t\"movedOriginal\" +\n\t\t\t\t\t\t(m === activeMovedText ? \" currentMove\" : \"\"),\n\t\t\t\t\tblockPadding: [\n\t\t\t\t\t\tMovedBlocksLinesFeature.movedCodeBlockPadding,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tMovedBlocksLinesFeature.movedCodeBlockPadding,\n\t\t\t\t\t\tMovedBlocksLinesFeature.movedCodeBlockPadding,\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tmodifiedDecorations.push({\n\t\t\t\trange: m.lineRangeMapping.modified.toInclusiveRange()!,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"moved\",\n\t\t\t\t\tblockClassName:\n\t\t\t\t\t\t\"movedModified\" +\n\t\t\t\t\t\t(m === activeMovedText ? \" currentMove\" : \"\"),\n\t\t\t\t\tblockPadding: [4, 0, 4, 4],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn { originalDecorations, modifiedDecorations };\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
