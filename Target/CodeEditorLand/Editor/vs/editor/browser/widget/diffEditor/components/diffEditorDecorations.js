import{Disposable as E}from"../../../../../base/common/lifecycle.js";import{derived as y}from"../../../../../base/common/observable.js";import{MovedBlocksLinesFeature as g}from"../features/movedBlocksLinesFeature.js";import{diffAddDecoration as m,diffAddDecorationEmpty as I,diffDeleteDecoration as u,diffDeleteDecorationEmpty as _,diffLineAddDecorationBackground as D,diffLineAddDecorationBackgroundWithIndicator as R,diffLineDeleteDecorationBackground as h,diffLineDeleteDecorationBackgroundWithIndicator as M,diffWholeLineAddDecoration as b,diffWholeLineDeleteDecoration as k}from"../registrations.contribution.js";import{applyObservableDecorations as v}from"../utils.js";import{allowsTrueInlineDiffRendering as x}from"./diffEditorViewZones/diffEditorViewZones.js";class A extends E{constructor(o,p,r,s){super();this._editors=o;this._diffModel=p;this._options=r;this._register(v(this._editors.original,this._decorations.map(n=>n?.originalDecorations||[]))),this._register(v(this._editors.modified,this._decorations.map(n=>n?.modifiedDecorations||[])))}_decorations=y(this,o=>{const p=this._diffModel.read(o),r=p?.diff.read(o);if(!r)return null;const s=this._diffModel.read(o).movedTextToCompare.read(o),n=this._options.renderIndicators.read(o),l=this._options.showEmptyDecorations.read(o),d=[],t=[];if(!s)for(const i of r.mappings)if(i.lineRangeMapping.original.isEmpty||d.push({range:i.lineRangeMapping.original.toInclusiveRange(),options:n?M:h}),i.lineRangeMapping.modified.isEmpty||t.push({range:i.lineRangeMapping.modified.toInclusiveRange(),options:n?R:D}),i.lineRangeMapping.modified.isEmpty||i.lineRangeMapping.original.isEmpty)i.lineRangeMapping.original.isEmpty||d.push({range:i.lineRangeMapping.original.toInclusiveRange(),options:k}),i.lineRangeMapping.modified.isEmpty||t.push({range:i.lineRangeMapping.modified.toInclusiveRange(),options:b});else{const a=this._options.useTrueInlineDiffRendering.read(o)&&x(i.lineRangeMapping);for(const e of i.lineRangeMapping.innerChanges||[])if(i.lineRangeMapping.original.contains(e.originalRange.startLineNumber)&&d.push({range:e.originalRange,options:e.originalRange.isEmpty()&&l?_:u}),i.lineRangeMapping.modified.contains(e.modifiedRange.startLineNumber)&&t.push({range:e.modifiedRange,options:e.modifiedRange.isEmpty()&&l&&!a?I:m}),a){const f=p.model.original.getValueInRange(e.originalRange);t.push({range:e.modifiedRange,options:{description:"deleted-text",before:{content:f,inlineClassName:"inline-deleted-text"},zIndex:1e5,showIfCollapsed:!0}})}}if(s)for(const i of s.changes){const a=i.original.toInclusiveRange();a&&d.push({range:a,options:n?M:h});const e=i.modified.toInclusiveRange();e&&t.push({range:e,options:n?R:D});for(const f of i.innerChanges||[])d.push({range:f.originalRange,options:u}),t.push({range:f.modifiedRange,options:m})}const c=this._diffModel.read(o).activeMovedText.read(o);for(const i of r.movedTexts)d.push({range:i.lineRangeMapping.original.toInclusiveRange(),options:{description:"moved",blockClassName:"movedOriginal"+(i===c?" currentMove":""),blockPadding:[g.movedCodeBlockPadding,0,g.movedCodeBlockPadding,g.movedCodeBlockPadding]}}),t.push({range:i.lineRangeMapping.modified.toInclusiveRange(),options:{description:"moved",blockClassName:"movedModified"+(i===c?" currentMove":""),blockPadding:[4,0,4,4]}});return{originalDecorations:d,modifiedDecorations:t}})}export{A as DiffEditorDecorations};
