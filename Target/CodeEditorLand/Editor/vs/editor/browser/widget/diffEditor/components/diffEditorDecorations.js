import{Disposable as E}from"../../../../../../vs/base/common/lifecycle.js";import{derived as I}from"../../../../../../vs/base/common/observable.js";import"../../../../../../vs/editor/browser/widget/diffEditor/components/diffEditorEditors.js";import{allowsTrueInlineDiffRendering as y}from"../../../../../../vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.js";import"../../../../../../vs/editor/browser/widget/diffEditor/diffEditorOptions.js";import"../../../../../../vs/editor/browser/widget/diffEditor/diffEditorViewModel.js";import"../../../../../../vs/editor/browser/widget/diffEditor/diffEditorWidget.js";import{MovedBlocksLinesFeature as p}from"../../../../../../vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.js";import{diffAddDecoration as m,diffAddDecorationEmpty as _,diffDeleteDecoration as u,diffDeleteDecorationEmpty as b,diffLineAddDecorationBackground as D,diffLineAddDecorationBackgroundWithIndicator as R,diffLineDeleteDecorationBackground as h,diffLineDeleteDecorationBackgroundWithIndicator as v,diffWholeLineAddDecoration as k,diffWholeLineDeleteDecoration as x}from"../../../../../../vs/editor/browser/widget/diffEditor/registrations.contribution.js";import{applyObservableDecorations as M}from"../../../../../../vs/editor/browser/widget/diffEditor/utils.js";import"../../../../../../vs/editor/common/model.js";class Q extends E{constructor(o,g,r,s){super();this._editors=o;this._diffModel=g;this._options=r;this._register(M(this._editors.original,this._decorations.map(n=>n?.originalDecorations||[]))),this._register(M(this._editors.modified,this._decorations.map(n=>n?.modifiedDecorations||[])))}_decorations=I(this,o=>{const g=this._diffModel.read(o),r=g?.diff.read(o);if(!r)return null;const s=this._diffModel.read(o).movedTextToCompare.read(o),n=this._options.renderIndicators.read(o),l=this._options.showEmptyDecorations.read(o),a=[],t=[];if(!s)for(const i of r.mappings)if(i.lineRangeMapping.original.isEmpty||a.push({range:i.lineRangeMapping.original.toInclusiveRange(),options:n?v:h}),i.lineRangeMapping.modified.isEmpty||t.push({range:i.lineRangeMapping.modified.toInclusiveRange(),options:n?R:D}),i.lineRangeMapping.modified.isEmpty||i.lineRangeMapping.original.isEmpty)i.lineRangeMapping.original.isEmpty||a.push({range:i.lineRangeMapping.original.toInclusiveRange(),options:x}),i.lineRangeMapping.modified.isEmpty||t.push({range:i.lineRangeMapping.modified.toInclusiveRange(),options:k});else{const d=this._options.useTrueInlineDiffRendering.read(o)&&y(i.lineRangeMapping);for(const e of i.lineRangeMapping.innerChanges||[])if(i.lineRangeMapping.original.contains(e.originalRange.startLineNumber)&&a.push({range:e.originalRange,options:e.originalRange.isEmpty()&&l?b:u}),i.lineRangeMapping.modified.contains(e.modifiedRange.startLineNumber)&&t.push({range:e.modifiedRange,options:e.modifiedRange.isEmpty()&&l&&!d?_:m}),d){const f=g.model.original.getValueInRange(e.originalRange);t.push({range:e.modifiedRange,options:{description:"deleted-text",before:{content:f,inlineClassName:"inline-deleted-text"},zIndex:1e5,showIfCollapsed:!0}})}}if(s)for(const i of s.changes){const d=i.original.toInclusiveRange();d&&a.push({range:d,options:n?v:h});const e=i.modified.toInclusiveRange();e&&t.push({range:e,options:n?R:D});for(const f of i.innerChanges||[])a.push({range:f.originalRange,options:u}),t.push({range:f.modifiedRange,options:m})}const c=this._diffModel.read(o).activeMovedText.read(o);for(const i of r.movedTexts)a.push({range:i.lineRangeMapping.original.toInclusiveRange(),options:{description:"moved",blockClassName:"movedOriginal"+(i===c?" currentMove":""),blockPadding:[p.movedCodeBlockPadding,0,p.movedCodeBlockPadding,p.movedCodeBlockPadding]}}),t.push({range:i.lineRangeMapping.modified.toInclusiveRange(),options:{description:"moved",blockClassName:"movedModified"+(i===c?" currentMove":""),blockPadding:[4,0,4,4]}});return{originalDecorations:a,modifiedDecorations:t}})}export{Q as DiffEditorDecorations};
