{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/diffEditorViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, IReader, ISettableObservable, ITransaction, autorun, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { IDiffProviderFactoryService } from './diffProviderFactoryService.js';\nimport { filterWithPrevious } from './utils.js';\nimport { readHotReloadableExport } from '../../../../base/common/hotReloadHelpers.js';\nimport { ISerializedLineRange, LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { DefaultLinesDiffComputer } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { IDocumentDiff } from '../../../common/diff/documentDiffProvider.js';\nimport { MovedText } from '../../../common/diff/linesDiffComputer.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { IDiffEditorModel, IDiffEditorViewModel } from '../../../common/editorCommon.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { TextEditInfo } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { combineTextEditInfos } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js';\nimport { DiffEditorOptions } from './diffEditorOptions.js';\nimport { optimizeSequenceDiffs } from '../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { softAssert } from '../../../../base/common/assert.js';\n\nexport class DiffEditorViewModel extends Disposable implements IDiffEditorViewModel {\n\tprivate readonly _isDiffUpToDate = observableValue<boolean>(this, false);\n\tpublic readonly isDiffUpToDate: IObservable<boolean> = this._isDiffUpToDate;\n\n\tprivate _lastDiff: IDocumentDiff | undefined;\n\tprivate readonly _diff = observableValue<DiffState | undefined>(this, undefined);\n\tpublic readonly diff: IObservable<DiffState | undefined> = this._diff;\n\n\tprivate readonly _unchangedRegions = observableValue<{ regions: UnchangedRegion[]; originalDecorationIds: string[]; modifiedDecorationIds: string[] } | undefined>(this, undefined);\n\tpublic readonly unchangedRegions: IObservable<UnchangedRegion[]> = derived(this, r => {\n\t\tif (this._options.hideUnchangedRegions.read(r)) {\n\t\t\treturn this._unchangedRegions.read(r)?.regions ?? [];\n\t\t} else {\n\t\t\t// Reset state\n\t\t\ttransaction(tx => {\n\t\t\t\tfor (const r of this._unchangedRegions.get()?.regions || []) {\n\t\t\t\t\tr.collapseAll(tx);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn [];\n\t\t}\n\t}\n\t);\n\n\tpublic readonly movedTextToCompare = observableValue<MovedText | undefined>(this, undefined);\n\n\tprivate readonly _activeMovedText = observableValue<MovedText | undefined>(this, undefined);\n\tprivate readonly _hoveredMovedText = observableValue<MovedText | undefined>(this, undefined);\n\n\n\tpublic readonly activeMovedText = derived(this, r => this.movedTextToCompare.read(r) ?? this._hoveredMovedText.read(r) ?? this._activeMovedText.read(r));\n\n\tpublic setActiveMovedText(movedText: MovedText | undefined): void {\n\t\tthis._activeMovedText.set(movedText, undefined);\n\t}\n\n\tpublic setHoveredMovedText(movedText: MovedText | undefined): void {\n\t\tthis._hoveredMovedText.set(movedText, undefined);\n\t}\n\n\tprivate readonly _cancellationTokenSource = new CancellationTokenSource();\n\n\tprivate readonly _diffProvider = derived(this, reader => {\n\t\tconst diffProvider = this._diffProviderFactoryService.createDiffProvider({\n\t\t\tdiffAlgorithm: this._options.diffAlgorithm.read(reader)\n\t\t});\n\t\tconst onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n\t\treturn {\n\t\t\tdiffProvider,\n\t\t\tonChangeSignal,\n\t\t};\n\t});\n\n\tconstructor(\n\t\tpublic readonly model: IDiffEditorModel,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\t@IDiffProviderFactoryService private readonly _diffProviderFactoryService: IDiffProviderFactoryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => this._cancellationTokenSource.cancel()));\n\n\t\tconst contentChangedSignal = observableSignal('contentChangedSignal');\n\t\tconst debouncer = this._register(new RunOnceScheduler(() => contentChangedSignal.trigger(undefined), 200));\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description collapse touching unchanged ranges */\n\n\t\t\tconst lastUnchangedRegions = this._unchangedRegions.read(reader);\n\t\t\tif (!lastUnchangedRegions || lastUnchangedRegions.regions.some(r => r.isDragged.read(reader))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n\t\t\t\t.map(id => model.original.getDecorationRange(id))\n\t\t\t\t.map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n\t\t\tconst lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n\t\t\t\t.map(id => model.modified.getDecorationRange(id))\n\t\t\t\t.map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n\t\t\tconst updatedLastUnchangedRegions = lastUnchangedRegions.regions.map((r, idx) =>\n\t\t\t\t(!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) ? undefined :\n\t\t\t\t\tnew UnchangedRegion(\n\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[idx]!.startLineNumber,\n\t\t\t\t\t\tlastUnchangedRegionsModRanges[idx]!.startLineNumber,\n\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[idx]!.length,\n\t\t\t\t\t\tr.visibleLineCountTop.read(reader),\n\t\t\t\t\t\tr.visibleLineCountBottom.read(reader),\n\t\t\t\t\t)).filter(isDefined);\n\n\t\t\tconst newRanges: UnchangedRegion[] = [];\n\n\t\t\tlet didChange = false;\n\t\t\tfor (const touching of groupAdjacentBy(updatedLastUnchangedRegions, (a, b) => a.getHiddenModifiedRange(reader).endLineNumberExclusive === b.getHiddenModifiedRange(reader).startLineNumber)) {\n\t\t\t\tif (touching.length > 1) {\n\t\t\t\t\tdidChange = true;\n\t\t\t\t\tconst sumLineCount = touching.reduce((sum, r) => sum + r.lineCount, 0);\n\t\t\t\t\tconst r = new UnchangedRegion(touching[0].originalLineNumber, touching[0].modifiedLineNumber, sumLineCount, touching[0].visibleLineCountTop.get(), touching[touching.length - 1].visibleLineCountBottom.get());\n\t\t\t\t\tnewRanges.push(r);\n\t\t\t\t} else {\n\t\t\t\t\tnewRanges.push(touching[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (didChange) {\n\t\t\t\tconst originalDecorationIds = model.original.deltaDecorations(\n\t\t\t\t\tlastUnchangedRegions.originalDecorationIds,\n\t\t\t\t\tnewRanges.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange()!, options: { description: 'unchanged' } }))\n\t\t\t\t);\n\t\t\t\tconst modifiedDecorationIds = model.modified.deltaDecorations(\n\t\t\t\t\tlastUnchangedRegions.modifiedDecorationIds,\n\t\t\t\t\tnewRanges.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange()!, options: { description: 'unchanged' } }))\n\t\t\t\t);\n\n\t\t\t\ttransaction(tx => {\n\t\t\t\t\tthis._unchangedRegions.set(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tregions: newRanges,\n\t\t\t\t\t\t\toriginalDecorationIds,\n\t\t\t\t\t\t\tmodifiedDecorationIds\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttx\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tconst updateUnchangedRegions = (result: IDocumentDiff, tx: ITransaction, reader?: IReader) => {\n\t\t\tconst newUnchangedRegions = UnchangedRegion.fromDiffs(\n\t\t\t\tresult.changes,\n\t\t\t\tmodel.original.getLineCount(),\n\t\t\t\tmodel.modified.getLineCount(),\n\t\t\t\tthis._options.hideUnchangedRegionsMinimumLineCount.read(reader),\n\t\t\t\tthis._options.hideUnchangedRegionsContextLineCount.read(reader),\n\t\t\t);\n\n\t\t\t// Transfer state from cur state\n\t\t\tlet visibleRegions: LineRangeMapping[] | undefined = undefined;\n\n\t\t\tconst lastUnchangedRegions = this._unchangedRegions.get();\n\t\t\tif (lastUnchangedRegions) {\n\t\t\t\tconst lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n\t\t\t\t\t.map(id => model.original.getDecorationRange(id))\n\t\t\t\t\t.map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n\t\t\t\tconst lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n\t\t\t\t\t.map(id => model.modified.getDecorationRange(id))\n\t\t\t\t\t.map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n\t\t\t\tconst updatedLastUnchangedRegions = filterWithPrevious(\n\t\t\t\t\tlastUnchangedRegions.regions\n\t\t\t\t\t\t.map((r, idx) => {\n\t\t\t\t\t\t\tif (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) { return undefined; }\n\t\t\t\t\t\t\tconst length = lastUnchangedRegionsOrigRanges[idx]!.length;\n\t\t\t\t\t\t\treturn new UnchangedRegion(\n\t\t\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[idx]!.startLineNumber,\n\t\t\t\t\t\t\t\tlastUnchangedRegionsModRanges[idx]!.startLineNumber,\n\t\t\t\t\t\t\t\tlength,\n\t\t\t\t\t\t\t\t// The visible area can shrink by edits -> we have to account for this\n\t\t\t\t\t\t\t\tMath.min(r.visibleLineCountTop.get(), length),\n\t\t\t\t\t\t\t\tMath.min(r.visibleLineCountBottom.get(), length - r.visibleLineCountTop.get()),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t).filter(isDefined),\n\t\t\t\t\t(cur, prev) => !prev || (cur.modifiedLineNumber >= prev.modifiedLineNumber + prev.lineCount && cur.originalLineNumber >= prev.originalLineNumber + prev.lineCount)\n\t\t\t\t);\n\n\t\t\t\tlet hiddenRegions = updatedLastUnchangedRegions.map(r => new LineRangeMapping(r.getHiddenOriginalRange(reader), r.getHiddenModifiedRange(reader)));\n\t\t\t\thiddenRegions = LineRangeMapping.clip(hiddenRegions, LineRange.ofLength(1, model.original.getLineCount()), LineRange.ofLength(1, model.modified.getLineCount()));\n\t\t\t\tvisibleRegions = LineRangeMapping.inverse(hiddenRegions, model.original.getLineCount(), model.modified.getLineCount());\n\t\t\t}\n\n\t\t\tconst newUnchangedRegions2 = [];\n\t\t\tif (visibleRegions) {\n\t\t\t\tfor (const r of newUnchangedRegions) {\n\t\t\t\t\tconst intersecting = visibleRegions.filter(f => f.original.intersectsStrict(r.originalUnchangedRange) && f.modified.intersectsStrict(r.modifiedUnchangedRange));\n\t\t\t\t\tnewUnchangedRegions2.push(...r.setVisibleRanges(intersecting, tx));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnewUnchangedRegions2.push(...newUnchangedRegions);\n\t\t\t}\n\n\t\t\tconst originalDecorationIds = model.original.deltaDecorations(\n\t\t\t\tlastUnchangedRegions?.originalDecorationIds || [],\n\t\t\t\tnewUnchangedRegions2.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange()!, options: { description: 'unchanged' } }))\n\t\t\t);\n\t\t\tconst modifiedDecorationIds = model.modified.deltaDecorations(\n\t\t\t\tlastUnchangedRegions?.modifiedDecorationIds || [],\n\t\t\t\tnewUnchangedRegions2.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange()!, options: { description: 'unchanged' } }))\n\t\t\t);\n\n\t\t\tthis._unchangedRegions.set(\n\t\t\t\t{\n\t\t\t\t\tregions: newUnchangedRegions2,\n\t\t\t\t\toriginalDecorationIds,\n\t\t\t\t\tmodifiedDecorationIds\n\t\t\t\t},\n\t\t\t\ttx\n\t\t\t);\n\t\t};\n\n\t\tthis._register(model.modified.onDidChangeContent((e) => {\n\t\t\tconst diff = this._diff.get();\n\t\t\tif (diff) {\n\t\t\t\tconst textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\tconst result = applyModifiedEdits(this._lastDiff!, textEdits, model.original, model.modified);\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\tthis._diff.set(DiffState.fromDiffResult(this._lastDiff!), tx);\n\t\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\t\t\t\t\t\tconst currentSyncedMovedText = this.movedTextToCompare.get();\n\t\t\t\t\t\tthis.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff!.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\t\t\tdebouncer.schedule();\n\t\t}));\n\t\tthis._register(model.original.onDidChangeContent((e) => {\n\t\t\tconst diff = this._diff.get();\n\t\t\tif (diff) {\n\t\t\t\tconst textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\tconst result = applyOriginalEdits(this._lastDiff!, textEdits, model.original, model.modified);\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\tthis._diff.set(DiffState.fromDiffResult(this._lastDiff!), tx);\n\t\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\t\t\t\t\t\tconst currentSyncedMovedText = this.movedTextToCompare.get();\n\t\t\t\t\t\tthis.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff!.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\t\t\tdebouncer.schedule();\n\t\t}));\n\n\t\tthis._register(autorunWithStore(async (reader, store) => {\n\t\t\t/** @description compute diff */\n\n\t\t\t// So that they get recomputed when these settings change\n\t\t\tthis._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n\t\t\tthis._options.hideUnchangedRegionsContextLineCount.read(reader);\n\n\t\t\tdebouncer.cancel();\n\t\t\tcontentChangedSignal.read(reader);\n\t\t\tconst documentDiffProvider = this._diffProvider.read(reader);\n\t\t\tdocumentDiffProvider.onChangeSignal.read(reader);\n\n\t\t\treadHotReloadableExport(DefaultLinesDiffComputer, reader);\n\t\t\treadHotReloadableExport(optimizeSequenceDiffs, reader);\n\n\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\n\t\t\tlet originalTextEditInfos: TextEditInfo[] = [];\n\t\t\tstore.add(model.original.onDidChangeContent((e) => {\n\t\t\t\tconst edits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\toriginalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n\t\t\t}));\n\n\t\t\tlet modifiedTextEditInfos: TextEditInfo[] = [];\n\t\t\tstore.add(model.modified.onDidChangeContent((e) => {\n\t\t\t\tconst edits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\tmodifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n\t\t\t}));\n\n\t\t\tlet result = await documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n\t\t\t\tignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(reader),\n\t\t\t\tmaxComputationTimeMs: this._options.maxComputationTimeMs.read(reader),\n\t\t\t\tcomputeMoves: this._options.showMoves.read(reader),\n\t\t\t}, this._cancellationTokenSource.token);\n\n\t\t\tif (this._cancellationTokenSource.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (model.original.isDisposed() || model.modified.isDisposed()) {\n\t\t\t\t// TODO@hediet fishy?\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = normalizeDocumentDiff(result, model.original, model.modified);\n\t\t\tresult = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified) ?? result;\n\t\t\tresult = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified) ?? result;\n\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description write diff result */\n\t\t\t\tupdateUnchangedRegions(result, tx);\n\n\t\t\t\tthis._lastDiff = result;\n\t\t\t\tconst state = DiffState.fromDiffResult(result);\n\t\t\t\tthis._diff.set(state, tx);\n\t\t\t\tthis._isDiffUpToDate.set(true, tx);\n\t\t\t\tconst currentSyncedMovedText = this.movedTextToCompare.get();\n\t\t\t\tthis.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n\t\t\t});\n\t\t}));\n\t}\n\n\tpublic ensureModifiedLineIsVisible(lineNumber: number, preference: RevealPreference, tx: ITransaction | undefined): void {\n\t\tif (this.diff.get()?.mappings.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst unchangedRegions = this._unchangedRegions.get()?.regions || [];\n\t\tfor (const r of unchangedRegions) {\n\t\t\tif (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n\t\t\t\tr.showModifiedLine(lineNumber, preference, tx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ensureOriginalLineIsVisible(lineNumber: number, preference: RevealPreference, tx: ITransaction | undefined): void {\n\t\tif (this.diff.get()?.mappings.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst unchangedRegions = this._unchangedRegions.get()?.regions || [];\n\t\tfor (const r of unchangedRegions) {\n\t\t\tif (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n\t\t\t\tr.showOriginalLine(lineNumber, preference, tx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async waitForDiff(): Promise<void> {\n\t\tawait waitForState(this.isDiffUpToDate, s => s);\n\t}\n\n\tpublic serializeState(): SerializedState {\n\t\tconst regions = this._unchangedRegions.get();\n\t\treturn {\n\t\t\tcollapsedRegions: regions?.regions.map(r => ({ range: r.getHiddenModifiedRange(undefined).serialize() }))\n\t\t};\n\t}\n\n\tpublic restoreSerializedState(state: SerializedState): void {\n\t\tconst ranges = state.collapsedRegions?.map(r => LineRange.deserialize(r.range));\n\t\tconst regions = this._unchangedRegions.get();\n\t\tif (!regions || !ranges) {\n\t\t\treturn;\n\t\t}\n\t\ttransaction(tx => {\n\t\t\tfor (const r of regions.regions) {\n\t\t\t\tfor (const range of ranges) {\n\t\t\t\t\tif (r.modifiedUnchangedRange.intersect(range)) {\n\t\t\t\t\t\tr.setHiddenModifiedRange(range, tx);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction normalizeDocumentDiff(diff: IDocumentDiff, original: ITextModel, modified: ITextModel): IDocumentDiff {\n\treturn {\n\t\tchanges: diff.changes.map(c => new DetailedLineRangeMapping(\n\t\t\tc.original,\n\t\t\tc.modified,\n\t\t\tc.innerChanges ? c.innerChanges.map(i => normalizeRangeMapping(i, original, modified)) : undefined\n\t\t)),\n\t\tmoves: diff.moves,\n\t\tidentical: diff.identical,\n\t\tquitEarly: diff.quitEarly,\n\t};\n}\n\nfunction normalizeRangeMapping(rangeMapping: RangeMapping, original: ITextModel, modified: ITextModel): RangeMapping {\n\tlet originalRange = rangeMapping.originalRange;\n\tlet modifiedRange = rangeMapping.modifiedRange;\n\tif (\n\t\toriginalRange.startColumn === 1 && modifiedRange.startColumn === 1 &&\n\t\t(originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) &&\n\t\toriginalRange.endColumn === original.getLineMaxColumn(originalRange.endLineNumber)\n\t\t&& modifiedRange.endColumn === modified.getLineMaxColumn(modifiedRange.endLineNumber)\n\t\t&& originalRange.endLineNumber < original.getLineCount()\n\t\t&& modifiedRange.endLineNumber < modified.getLineCount()\n\t) {\n\t\toriginalRange = originalRange.setEndPosition(originalRange.endLineNumber + 1, 1);\n\t\tmodifiedRange = modifiedRange.setEndPosition(modifiedRange.endLineNumber + 1, 1);\n\t}\n\treturn new RangeMapping(originalRange, modifiedRange);\n}\n\ninterface SerializedState {\n\tcollapsedRegions: { range: ISerializedLineRange }[] | undefined;\n}\n\nexport class DiffState {\n\tpublic static fromDiffResult(result: IDocumentDiff): DiffState {\n\t\treturn new DiffState(\n\t\t\tresult.changes.map(c => new DiffMapping(c)),\n\t\t\tresult.moves || [],\n\t\t\tresult.identical,\n\t\t\tresult.quitEarly,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly mappings: readonly DiffMapping[],\n\t\tpublic readonly movedTexts: readonly MovedText[],\n\t\tpublic readonly identical: boolean,\n\t\tpublic readonly quitEarly: boolean,\n\t) { }\n}\n\nexport class DiffMapping {\n\tconstructor(\n\t\treadonly lineRangeMapping: DetailedLineRangeMapping,\n\t) {\n\t\t/*\n\t\treadonly movedTo: MovedText | undefined,\n\t\treadonly movedFrom: MovedText | undefined,\n\n\t\tif (movedTo) {\n\t\t\tassertFn(() =>\n\t\t\t\tmovedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n\t\t\t\t&& lineRangeMapping.originalRange.isEmpty\n\t\t\t\t&& !movedFrom\n\t\t\t);\n\t\t} else if (movedFrom) {\n\t\t\tassertFn(() =>\n\t\t\t\tmovedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n\t\t\t\t&& lineRangeMapping.modifiedRange.isEmpty\n\t\t\t\t&& !movedTo\n\t\t\t);\n\t\t}\n\t\t*/\n\t}\n}\n\nexport class UnchangedRegion {\n\tpublic static fromDiffs(\n\t\tchanges: readonly DetailedLineRangeMapping[],\n\t\toriginalLineCount: number,\n\t\tmodifiedLineCount: number,\n\t\tminHiddenLineCount: number,\n\t\tminContext: number,\n\t): UnchangedRegion[] {\n\t\tconst inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n\t\tconst result: UnchangedRegion[] = [];\n\n\t\tfor (const mapping of inversedMappings) {\n\t\t\tlet origStart = mapping.original.startLineNumber;\n\t\t\tlet modStart = mapping.modified.startLineNumber;\n\t\t\tlet length = mapping.original.length;\n\n\t\t\tconst atStart = origStart === 1 && modStart === 1;\n\t\t\tconst atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n\n\t\t\tif ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n\t\t\t\tif (atStart && !atEnd) {\n\t\t\t\t\tlength -= minContext;\n\t\t\t\t}\n\t\t\t\tif (atEnd && !atStart) {\n\t\t\t\t\torigStart += minContext;\n\t\t\t\t\tmodStart += minContext;\n\t\t\t\t\tlength -= minContext;\n\t\t\t\t}\n\t\t\t\tresult.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n\t\t\t} else if (length >= minContext * 2 + minHiddenLineCount) {\n\t\t\t\torigStart += minContext;\n\t\t\t\tmodStart += minContext;\n\t\t\t\tlength -= minContext * 2;\n\t\t\t\tresult.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic get originalUnchangedRange(): LineRange {\n\t\treturn LineRange.ofLength(this.originalLineNumber, this.lineCount);\n\t}\n\n\tpublic get modifiedUnchangedRange(): LineRange {\n\t\treturn LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n\t}\n\n\tprivate readonly _visibleLineCountTop = observableValue<number>(this, 0);\n\tpublic readonly visibleLineCountTop: ISettableObservable<number> = this._visibleLineCountTop;\n\n\tprivate readonly _visibleLineCountBottom = observableValue<number>(this, 0);\n\tpublic readonly visibleLineCountBottom: ISettableObservable<number> = this._visibleLineCountBottom;\n\n\tprivate readonly _shouldHideControls = derived(this, reader => /** @description isVisible */\n\t\tthis.visibleLineCountTop.read(reader) + this.visibleLineCountBottom.read(reader) === this.lineCount && !this.isDragged.read(reader));\n\n\tpublic readonly isDragged = observableValue<undefined | 'bottom' | 'top'>(this, undefined);\n\n\tconstructor(\n\t\tpublic readonly originalLineNumber: number,\n\t\tpublic readonly modifiedLineNumber: number,\n\t\tpublic readonly lineCount: number,\n\t\tvisibleLineCountTop: number,\n\t\tvisibleLineCountBottom: number,\n\t) {\n\t\tconst visibleLineCountTop2 = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n\t\tconst visibleLineCountBottom2 = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n\n\t\tsoftAssert(visibleLineCountTop === visibleLineCountTop2);\n\t\tsoftAssert(visibleLineCountBottom === visibleLineCountBottom2);\n\n\t\tthis._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n\t\tthis._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n\t}\n\n\tpublic setVisibleRanges(visibleRanges: LineRangeMapping[], tx: ITransaction): UnchangedRegion[] {\n\t\tconst result: UnchangedRegion[] = [];\n\n\t\tconst hiddenModified = new LineRangeSet(visibleRanges.map(r => r.modified)).subtractFrom(this.modifiedUnchangedRange);\n\n\t\tlet originalStartLineNumber = this.originalLineNumber;\n\t\tlet modifiedStartLineNumber = this.modifiedLineNumber;\n\t\tconst modifiedEndLineNumberEx = this.modifiedLineNumber + this.lineCount;\n\t\tif (hiddenModified.ranges.length === 0) {\n\t\t\tthis.showAll(tx);\n\t\t\tresult.push(this);\n\t\t} else {\n\t\t\tlet i = 0;\n\t\t\tfor (const r of hiddenModified.ranges) {\n\t\t\t\tconst isLast = i === hiddenModified.ranges.length - 1;\n\t\t\t\ti++;\n\n\t\t\t\tconst length = (isLast ? modifiedEndLineNumberEx : r.endLineNumberExclusive) - modifiedStartLineNumber;\n\n\t\t\t\tconst newR = new UnchangedRegion(originalStartLineNumber, modifiedStartLineNumber, length, 0, 0);\n\t\t\t\tnewR.setHiddenModifiedRange(r, tx);\n\t\t\t\tresult.push(newR);\n\n\t\t\t\toriginalStartLineNumber = newR.originalUnchangedRange.endLineNumberExclusive;\n\t\t\t\tmodifiedStartLineNumber = newR.modifiedUnchangedRange.endLineNumberExclusive;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic shouldHideControls(reader: IReader | undefined): boolean {\n\t\treturn this._shouldHideControls.read(reader);\n\t}\n\n\tpublic getHiddenOriginalRange(reader: IReader | undefined): LineRange {\n\t\treturn LineRange.ofLength(\n\t\t\tthis.originalLineNumber + this._visibleLineCountTop.read(reader),\n\t\t\tthis.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader),\n\t\t);\n\t}\n\n\tpublic getHiddenModifiedRange(reader: IReader | undefined): LineRange {\n\t\treturn LineRange.ofLength(\n\t\t\tthis.modifiedLineNumber + this._visibleLineCountTop.read(reader),\n\t\t\tthis.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader),\n\t\t);\n\t}\n\n\tpublic setHiddenModifiedRange(range: LineRange, tx: ITransaction) {\n\t\tconst visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n\t\tconst visibleLineCountBottom = (this.modifiedLineNumber + this.lineCount) - range.endLineNumberExclusive;\n\t\tthis.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n\t}\n\n\tpublic getMaxVisibleLineCountTop() {\n\t\treturn this.lineCount - this._visibleLineCountBottom.get();\n\t}\n\n\tpublic getMaxVisibleLineCountBottom() {\n\t\treturn this.lineCount - this._visibleLineCountTop.get();\n\t}\n\n\tpublic showMoreAbove(count = 10, tx: ITransaction | undefined): void {\n\t\tconst maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n\t\tthis._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n\t}\n\n\tpublic showMoreBelow(count = 10, tx: ITransaction | undefined): void {\n\t\tconst maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n\t\tthis._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n\t}\n\n\tpublic showAll(tx: ITransaction | undefined): void {\n\t\tthis._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n\t}\n\n\tpublic showModifiedLine(lineNumber: number, preference: RevealPreference, tx: ITransaction | undefined): void {\n\t\tconst top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n\t\tconst bottom = (this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount) - lineNumber;\n\t\tif (preference === RevealPreference.FromCloserSide && top < bottom || preference === RevealPreference.FromTop) {\n\t\t\tthis._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n\t\t} else {\n\t\t\tthis._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n\t\t}\n\t}\n\n\tpublic showOriginalLine(lineNumber: number, preference: RevealPreference, tx: ITransaction | undefined): void {\n\t\tconst top = lineNumber - this.originalLineNumber;\n\t\tconst bottom = (this.originalLineNumber + this.lineCount) - lineNumber;\n\t\tif (preference === RevealPreference.FromCloserSide && top < bottom || preference === RevealPreference.FromTop) {\n\t\t\tthis._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n\t\t} else {\n\t\t\tthis._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n\t\t}\n\t}\n\n\tpublic collapseAll(tx: ITransaction | undefined): void {\n\t\tthis._visibleLineCountTop.set(0, tx);\n\t\tthis._visibleLineCountBottom.set(0, tx);\n\t}\n\n\tpublic setState(visibleLineCountTop: number, visibleLineCountBottom: number, tx: ITransaction | undefined): void {\n\t\tvisibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n\t\tvisibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n\n\t\tthis._visibleLineCountTop.set(visibleLineCountTop, tx);\n\t\tthis._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n\t}\n}\n\nexport const enum RevealPreference {\n\tFromCloserSide,\n\tFromTop,\n\tFromBottom,\n}\n\nfunction applyOriginalEdits(diff: IDocumentDiff, textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): IDocumentDiff | undefined {\n\treturn undefined;\n\t/*\n\tTODO@hediet\n\tif (textEdits.length === 0) {\n\t\treturn diff;\n\t}\n\n\tconst diff2 = flip(diff);\n\tconst diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n\tif (!diff3) {\n\t\treturn undefined;\n\t}\n\treturn flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n\treturn {\n\t\tchanges: diff.changes.map(c => c.flip()),\n\t\tmoves: diff.moves.map(m => m.flip()),\n\t\tidentical: diff.identical,\n\t\tquitEarly: diff.quitEarly,\n\t};\n}\n*/\nfunction applyModifiedEdits(diff: IDocumentDiff, textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): IDocumentDiff | undefined {\n\treturn undefined;\n\t/*\n\tTODO@hediet\n\tif (textEdits.length === 0) {\n\t\treturn diff;\n\t}\n\tif (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n\t\t// TODO support these cases\n\t\treturn undefined;\n\t}\n\n\tconst changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n\n\tconst moves = diff.moves.map(m => {\n\t\tconst newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n\t\treturn newModifiedRange ? new MovedText(\n\t\t\tnew SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n\t\t\tapplyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n\t\t) : undefined;\n\t}).filter(isDefined);\n\n\treturn {\n\t\tidentical: false,\n\t\tquitEarly: false,\n\t\tchanges,\n\t\tmoves,\n\t};*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n\tlet rangeStartLineNumber = range.startLineNumber;\n\tlet rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n\tfor (let i = textEdits.length - 1; i >= 0; i--) {\n\t\tconst textEdit = textEdits[i];\n\t\tconst textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n\t\tconst textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n\t\tconst newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n\t\tconst delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n\t\tif (textEditEndLineNumber < rangeStartLineNumber) {\n\t\t\t// the text edit is before us\n\t\t\trangeStartLineNumber += delta;\n\t\t\trangeEndLineNumberEx += delta;\n\t\t} else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n\t\t\t// the text edit is after us\n\t\t\t// NOOP\n\t\t} else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n\t\t\t// the range is fully contained in the text edit\n\t\t\treturn undefined;\n\t\t} else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n\t\t\t// the text edit ends inside our range\n\t\t\trangeStartLineNumber = textEditEndLineNumber + 1;\n\t\t\trangeStartLineNumber += delta;\n\t\t\trangeEndLineNumberEx += delta;\n\t\t} else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n\t\t\t// the text edit starts inside our range\n\t\t\trangeEndLineNumberEx = textEditStartLineNumber;\n\t\t} else {\n\t\t\trangeEndLineNumberEx += delta;\n\t\t}\n\t}\n\n\treturn new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n\tconst diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n\t\tpositionToLength(c.originalRange.getStartPosition()),\n\t\tpositionToLength(c.originalRange.getEndPosition()),\n\t\tlengthOfRange(c.modifiedRange).toLength(),\n\t)));\n\n\tconst combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n\tlet lastOriginalEndOffset = lengthZero;\n\tlet lastModifiedEndOffset = lengthZero;\n\tconst rangeMappings = combined.map(c => {\n\t\tconst modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n\t\tlastOriginalEndOffset = c.endOffset;\n\t\tlastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n\t\treturn new RangeMapping(\n\t\t\tRange.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n\t\t\tRange.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n\t\t);\n\t});\n\n\tconst newChanges = lineRangeMappingFromRangeMappings(\n\t\trangeMappings,\n\t\toriginalTextModel.getLinesContent(),\n\t\tmodifiedTextModel.getLinesContent(),\n\t);\n\treturn newChanges;\n}\n*/\n"],
  "mappings": "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",
  "names": ["r", "RevealPreference"]
}
