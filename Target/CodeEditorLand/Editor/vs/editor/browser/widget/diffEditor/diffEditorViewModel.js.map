{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/diffEditorViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupAdjacentBy } from \"../../../../base/common/arrays.js\";\nimport { softAssert } from \"../../../../base/common/assert.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { readHotReloadableExport } from \"../../../../base/common/hotReloadHelpers.js\";\nimport { Disposable, toDisposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\ttype IReader,\n\ttype ISettableObservable,\n\ttype ITransaction,\n\tautorun,\n\tautorunWithStore,\n\tderived,\n\tobservableSignal,\n\tobservableSignalFromEvent,\n\tobservableValue,\n\ttransaction,\n\twaitForState,\n} from \"../../../../base/common/observable.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport {\n\ttype ISerializedLineRange,\n\tLineRange,\n\tLineRangeSet,\n} from \"../../../common/core/lineRange.js\";\nimport { DefaultLinesDiffComputer } from \"../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\";\nimport { optimizeSequenceDiffs } from \"../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\";\nimport type { IDocumentDiff } from \"../../../common/diff/documentDiffProvider.js\";\nimport type { MovedText } from \"../../../common/diff/linesDiffComputer.js\";\nimport {\n\tDetailedLineRangeMapping,\n\tLineRangeMapping,\n\tRangeMapping,\n} from \"../../../common/diff/rangeMapping.js\";\nimport type {\n\tIDiffEditorModel,\n\tIDiffEditorViewModel,\n} from \"../../../common/editorCommon.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { TextEditInfo } from \"../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js\";\nimport { combineTextEditInfos } from \"../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js\";\nimport type { DiffEditorOptions } from \"./diffEditorOptions.js\";\nimport { IDiffProviderFactoryService } from \"./diffProviderFactoryService.js\";\nimport { filterWithPrevious } from \"./utils.js\";\n\nexport class DiffEditorViewModel\n\textends Disposable\n\timplements IDiffEditorViewModel\n{\n\tprivate readonly _isDiffUpToDate = observableValue<boolean>(this, false);\n\tpublic readonly isDiffUpToDate: IObservable<boolean> = this._isDiffUpToDate;\n\n\tprivate _lastDiff: IDocumentDiff | undefined;\n\tprivate readonly _diff = observableValue<DiffState | undefined>(\n\t\tthis,\n\t\tundefined,\n\t);\n\tpublic readonly diff: IObservable<DiffState | undefined> = this._diff;\n\n\tprivate readonly _unchangedRegions = observableValue<\n\t\t| {\n\t\t\t\tregions: UnchangedRegion[];\n\t\t\t\toriginalDecorationIds: string[];\n\t\t\t\tmodifiedDecorationIds: string[];\n\t\t  }\n\t\t| undefined\n\t>(this, undefined);\n\tpublic readonly unchangedRegions: IObservable<UnchangedRegion[]> = derived(\n\t\tthis,\n\t\t(r) => {\n\t\t\tif (this._options.hideUnchangedRegions.read(r)) {\n\t\t\t\treturn this._unchangedRegions.read(r)?.regions ?? [];\n\t\t\t} else {\n\t\t\t\t// Reset state\n\t\t\t\ttransaction((tx) => {\n\t\t\t\t\tfor (const r of this._unchangedRegions.get()?.regions ||\n\t\t\t\t\t\t[]) {\n\t\t\t\t\t\tr.collapseAll(tx);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\t);\n\n\tpublic readonly movedTextToCompare = observableValue<MovedText | undefined>(\n\t\tthis,\n\t\tundefined,\n\t);\n\n\tprivate readonly _activeMovedText = observableValue<MovedText | undefined>(\n\t\tthis,\n\t\tundefined,\n\t);\n\tprivate readonly _hoveredMovedText = observableValue<MovedText | undefined>(\n\t\tthis,\n\t\tundefined,\n\t);\n\n\tpublic readonly activeMovedText = derived(\n\t\tthis,\n\t\t(r) =>\n\t\t\tthis.movedTextToCompare.read(r) ??\n\t\t\tthis._hoveredMovedText.read(r) ??\n\t\t\tthis._activeMovedText.read(r),\n\t);\n\n\tpublic setActiveMovedText(movedText: MovedText | undefined): void {\n\t\tthis._activeMovedText.set(movedText, undefined);\n\t}\n\n\tpublic setHoveredMovedText(movedText: MovedText | undefined): void {\n\t\tthis._hoveredMovedText.set(movedText, undefined);\n\t}\n\n\tprivate readonly _cancellationTokenSource = new CancellationTokenSource();\n\n\tprivate readonly _diffProvider = derived(this, (reader) => {\n\t\tconst diffProvider =\n\t\t\tthis._diffProviderFactoryService.createDiffProvider({\n\t\t\t\tdiffAlgorithm: this._options.diffAlgorithm.read(reader),\n\t\t\t});\n\t\tconst onChangeSignal = observableSignalFromEvent(\n\t\t\t\"onDidChange\",\n\t\t\tdiffProvider.onDidChange,\n\t\t);\n\t\treturn {\n\t\t\tdiffProvider,\n\t\t\tonChangeSignal,\n\t\t};\n\t});\n\n\tconstructor(\n\t\tpublic readonly model: IDiffEditorModel,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\t@IDiffProviderFactoryService\n\t\tprivate readonly _diffProviderFactoryService: IDiffProviderFactoryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\ttoDisposable(() => this._cancellationTokenSource.cancel()),\n\t\t);\n\n\t\tconst contentChangedSignal = observableSignal(\"contentChangedSignal\");\n\t\tconst debouncer = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() => contentChangedSignal.trigger(undefined),\n\t\t\t\t200,\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\t/** @description collapse touching unchanged ranges */\n\n\t\t\t\tconst lastUnchangedRegions =\n\t\t\t\t\tthis._unchangedRegions.read(reader);\n\t\t\t\tif (\n\t\t\t\t\t!lastUnchangedRegions ||\n\t\t\t\t\tlastUnchangedRegions.regions.some((r) =>\n\t\t\t\t\t\tr.isDragged.read(reader),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst lastUnchangedRegionsOrigRanges =\n\t\t\t\t\tlastUnchangedRegions.originalDecorationIds\n\t\t\t\t\t\t.map((id) => model.original.getDecorationRange(id))\n\t\t\t\t\t\t.map((r) =>\n\t\t\t\t\t\t\tr ? LineRange.fromRangeInclusive(r) : undefined,\n\t\t\t\t\t\t);\n\t\t\t\tconst lastUnchangedRegionsModRanges =\n\t\t\t\t\tlastUnchangedRegions.modifiedDecorationIds\n\t\t\t\t\t\t.map((id) => model.modified.getDecorationRange(id))\n\t\t\t\t\t\t.map((r) =>\n\t\t\t\t\t\t\tr ? LineRange.fromRangeInclusive(r) : undefined,\n\t\t\t\t\t\t);\n\t\t\t\tconst updatedLastUnchangedRegions = lastUnchangedRegions.regions\n\t\t\t\t\t.map((r, idx) =>\n\t\t\t\t\t\t!lastUnchangedRegionsOrigRanges[idx] ||\n\t\t\t\t\t\t!lastUnchangedRegionsModRanges[idx]\n\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t: new UnchangedRegion(\n\t\t\t\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[\n\t\t\t\t\t\t\t\t\t\tidx\n\t\t\t\t\t\t\t\t\t]!.startLineNumber,\n\t\t\t\t\t\t\t\t\tlastUnchangedRegionsModRanges[\n\t\t\t\t\t\t\t\t\t\tidx\n\t\t\t\t\t\t\t\t\t]!.startLineNumber,\n\t\t\t\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[idx]!.length,\n\t\t\t\t\t\t\t\t\tr.visibleLineCountTop.read(reader),\n\t\t\t\t\t\t\t\t\tr.visibleLineCountBottom.read(reader),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t\t.filter(isDefined);\n\n\t\t\t\tconst newRanges: UnchangedRegion[] = [];\n\n\t\t\t\tlet didChange = false;\n\t\t\t\tfor (const touching of groupAdjacentBy(\n\t\t\t\t\tupdatedLastUnchangedRegions,\n\t\t\t\t\t(a, b) =>\n\t\t\t\t\t\ta.getHiddenModifiedRange(reader)\n\t\t\t\t\t\t\t.endLineNumberExclusive ===\n\t\t\t\t\t\tb.getHiddenModifiedRange(reader).startLineNumber,\n\t\t\t\t)) {\n\t\t\t\t\tif (touching.length > 1) {\n\t\t\t\t\t\tdidChange = true;\n\t\t\t\t\t\tconst sumLineCount = touching.reduce(\n\t\t\t\t\t\t\t(sum, r) => sum + r.lineCount,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst r = new UnchangedRegion(\n\t\t\t\t\t\t\ttouching[0].originalLineNumber,\n\t\t\t\t\t\t\ttouching[0].modifiedLineNumber,\n\t\t\t\t\t\t\tsumLineCount,\n\t\t\t\t\t\t\ttouching[0].visibleLineCountTop.get(),\n\t\t\t\t\t\t\ttouching[\n\t\t\t\t\t\t\t\ttouching.length - 1\n\t\t\t\t\t\t\t].visibleLineCountBottom.get(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnewRanges.push(r);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewRanges.push(touching[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (didChange) {\n\t\t\t\t\tconst originalDecorationIds =\n\t\t\t\t\t\tmodel.original.deltaDecorations(\n\t\t\t\t\t\t\tlastUnchangedRegions.originalDecorationIds,\n\t\t\t\t\t\t\tnewRanges.map((r) => ({\n\t\t\t\t\t\t\t\trange: r.originalUnchangedRange.toInclusiveRange()!,\n\t\t\t\t\t\t\t\toptions: { description: \"unchanged\" },\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t);\n\t\t\t\t\tconst modifiedDecorationIds =\n\t\t\t\t\t\tmodel.modified.deltaDecorations(\n\t\t\t\t\t\t\tlastUnchangedRegions.modifiedDecorationIds,\n\t\t\t\t\t\t\tnewRanges.map((r) => ({\n\t\t\t\t\t\t\t\trange: r.modifiedUnchangedRange.toInclusiveRange()!,\n\t\t\t\t\t\t\t\toptions: { description: \"unchanged\" },\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t);\n\n\t\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t\tthis._unchangedRegions.set(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tregions: newRanges,\n\t\t\t\t\t\t\t\toriginalDecorationIds,\n\t\t\t\t\t\t\t\tmodifiedDecorationIds,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttx,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst updateUnchangedRegions = (\n\t\t\tresult: IDocumentDiff,\n\t\t\ttx: ITransaction,\n\t\t\treader?: IReader,\n\t\t) => {\n\t\t\tconst newUnchangedRegions = UnchangedRegion.fromDiffs(\n\t\t\t\tresult.changes,\n\t\t\t\tmodel.original.getLineCount(),\n\t\t\t\tmodel.modified.getLineCount(),\n\t\t\t\tthis._options.hideUnchangedRegionsMinimumLineCount.read(reader),\n\t\t\t\tthis._options.hideUnchangedRegionsContextLineCount.read(reader),\n\t\t\t);\n\n\t\t\t// Transfer state from cur state\n\t\t\tlet visibleRegions: LineRangeMapping[] | undefined ;\n\n\t\t\tconst lastUnchangedRegions = this._unchangedRegions.get();\n\t\t\tif (lastUnchangedRegions) {\n\t\t\t\tconst lastUnchangedRegionsOrigRanges =\n\t\t\t\t\tlastUnchangedRegions.originalDecorationIds\n\t\t\t\t\t\t.map((id) => model.original.getDecorationRange(id))\n\t\t\t\t\t\t.map((r) =>\n\t\t\t\t\t\t\tr ? LineRange.fromRangeInclusive(r) : undefined,\n\t\t\t\t\t\t);\n\t\t\t\tconst lastUnchangedRegionsModRanges =\n\t\t\t\t\tlastUnchangedRegions.modifiedDecorationIds\n\t\t\t\t\t\t.map((id) => model.modified.getDecorationRange(id))\n\t\t\t\t\t\t.map((r) =>\n\t\t\t\t\t\t\tr ? LineRange.fromRangeInclusive(r) : undefined,\n\t\t\t\t\t\t);\n\t\t\t\tconst updatedLastUnchangedRegions = filterWithPrevious(\n\t\t\t\t\tlastUnchangedRegions.regions\n\t\t\t\t\t\t.map((r, idx) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!lastUnchangedRegionsOrigRanges[idx] ||\n\t\t\t\t\t\t\t\t!lastUnchangedRegionsModRanges[idx]\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst length =\n\t\t\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[idx]!.length;\n\t\t\t\t\t\t\treturn new UnchangedRegion(\n\t\t\t\t\t\t\t\tlastUnchangedRegionsOrigRanges[\n\t\t\t\t\t\t\t\t\tidx\n\t\t\t\t\t\t\t\t]!.startLineNumber,\n\t\t\t\t\t\t\t\tlastUnchangedRegionsModRanges[\n\t\t\t\t\t\t\t\t\tidx\n\t\t\t\t\t\t\t\t]!.startLineNumber,\n\t\t\t\t\t\t\t\tlength,\n\t\t\t\t\t\t\t\t// The visible area can shrink by edits -> we have to account for this\n\t\t\t\t\t\t\t\tMath.min(r.visibleLineCountTop.get(), length),\n\t\t\t\t\t\t\t\tMath.min(\n\t\t\t\t\t\t\t\t\tr.visibleLineCountBottom.get(),\n\t\t\t\t\t\t\t\t\tlength - r.visibleLineCountTop.get(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(isDefined),\n\t\t\t\t\t(cur, prev) =>\n\t\t\t\t\t\t!prev ||\n\t\t\t\t\t\t(cur.modifiedLineNumber >=\n\t\t\t\t\t\t\tprev.modifiedLineNumber + prev.lineCount &&\n\t\t\t\t\t\t\tcur.originalLineNumber >=\n\t\t\t\t\t\t\t\tprev.originalLineNumber + prev.lineCount),\n\t\t\t\t);\n\n\t\t\t\tlet hiddenRegions = updatedLastUnchangedRegions.map(\n\t\t\t\t\t(r) =>\n\t\t\t\t\t\tnew LineRangeMapping(\n\t\t\t\t\t\t\tr.getHiddenOriginalRange(reader),\n\t\t\t\t\t\t\tr.getHiddenModifiedRange(reader),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\thiddenRegions = LineRangeMapping.clip(\n\t\t\t\t\thiddenRegions,\n\t\t\t\t\tLineRange.ofLength(1, model.original.getLineCount()),\n\t\t\t\t\tLineRange.ofLength(1, model.modified.getLineCount()),\n\t\t\t\t);\n\t\t\t\tvisibleRegions = LineRangeMapping.inverse(\n\t\t\t\t\thiddenRegions,\n\t\t\t\t\tmodel.original.getLineCount(),\n\t\t\t\t\tmodel.modified.getLineCount(),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst newUnchangedRegions2 = [];\n\t\t\tif (visibleRegions) {\n\t\t\t\tfor (const r of newUnchangedRegions) {\n\t\t\t\t\tconst intersecting = visibleRegions.filter(\n\t\t\t\t\t\t(f) =>\n\t\t\t\t\t\t\tf.original.intersectsStrict(\n\t\t\t\t\t\t\t\tr.originalUnchangedRange,\n\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\tf.modified.intersectsStrict(\n\t\t\t\t\t\t\t\tr.modifiedUnchangedRange,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tnewUnchangedRegions2.push(\n\t\t\t\t\t\t...r.setVisibleRanges(intersecting, tx),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnewUnchangedRegions2.push(...newUnchangedRegions);\n\t\t\t}\n\n\t\t\tconst originalDecorationIds = model.original.deltaDecorations(\n\t\t\t\tlastUnchangedRegions?.originalDecorationIds || [],\n\t\t\t\tnewUnchangedRegions2.map((r) => ({\n\t\t\t\t\trange: r.originalUnchangedRange.toInclusiveRange()!,\n\t\t\t\t\toptions: { description: \"unchanged\" },\n\t\t\t\t})),\n\t\t\t);\n\t\t\tconst modifiedDecorationIds = model.modified.deltaDecorations(\n\t\t\t\tlastUnchangedRegions?.modifiedDecorationIds || [],\n\t\t\t\tnewUnchangedRegions2.map((r) => ({\n\t\t\t\t\trange: r.modifiedUnchangedRange.toInclusiveRange()!,\n\t\t\t\t\toptions: { description: \"unchanged\" },\n\t\t\t\t})),\n\t\t\t);\n\n\t\t\tthis._unchangedRegions.set(\n\t\t\t\t{\n\t\t\t\t\tregions: newUnchangedRegions2,\n\t\t\t\t\toriginalDecorationIds,\n\t\t\t\t\tmodifiedDecorationIds,\n\t\t\t\t},\n\t\t\t\ttx,\n\t\t\t);\n\t\t};\n\n\t\tthis._register(\n\t\t\tmodel.modified.onDidChangeContent((e) => {\n\t\t\t\tconst diff = this._diff.get();\n\t\t\t\tif (diff) {\n\t\t\t\t\tconst textEdits = TextEditInfo.fromModelContentChanges(\n\t\t\t\t\t\te.changes,\n\t\t\t\t\t);\n\t\t\t\t\tconst result = applyModifiedEdits(\n\t\t\t\t\t\tthis._lastDiff!,\n\t\t\t\t\t\ttextEdits,\n\t\t\t\t\t\tmodel.original,\n\t\t\t\t\t\tmodel.modified,\n\t\t\t\t\t);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t\t\tthis._diff.set(\n\t\t\t\t\t\t\t\tDiffState.fromDiffResult(this._lastDiff!),\n\t\t\t\t\t\t\t\ttx,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\t\t\t\t\t\t\tconst currentSyncedMovedText =\n\t\t\t\t\t\t\t\tthis.movedTextToCompare.get();\n\t\t\t\t\t\t\tthis.movedTextToCompare.set(\n\t\t\t\t\t\t\t\tcurrentSyncedMovedText\n\t\t\t\t\t\t\t\t\t? this._lastDiff!.moves.find((m) =>\n\t\t\t\t\t\t\t\t\t\t\tm.lineRangeMapping.modified.intersect(\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentSyncedMovedText\n\t\t\t\t\t\t\t\t\t\t\t\t\t.lineRangeMapping.modified,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\ttx,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\t\t\t\tdebouncer.schedule();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tmodel.original.onDidChangeContent((e) => {\n\t\t\t\tconst diff = this._diff.get();\n\t\t\t\tif (diff) {\n\t\t\t\t\tconst textEdits = TextEditInfo.fromModelContentChanges(\n\t\t\t\t\t\te.changes,\n\t\t\t\t\t);\n\t\t\t\t\tconst result = applyOriginalEdits(\n\t\t\t\t\t\tthis._lastDiff!,\n\t\t\t\t\t\ttextEdits,\n\t\t\t\t\t\tmodel.original,\n\t\t\t\t\t\tmodel.modified,\n\t\t\t\t\t);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t\t\tthis._diff.set(\n\t\t\t\t\t\t\t\tDiffState.fromDiffResult(this._lastDiff!),\n\t\t\t\t\t\t\t\ttx,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\t\t\t\t\t\t\tconst currentSyncedMovedText =\n\t\t\t\t\t\t\t\tthis.movedTextToCompare.get();\n\t\t\t\t\t\t\tthis.movedTextToCompare.set(\n\t\t\t\t\t\t\t\tcurrentSyncedMovedText\n\t\t\t\t\t\t\t\t\t? this._lastDiff!.moves.find((m) =>\n\t\t\t\t\t\t\t\t\t\t\tm.lineRangeMapping.modified.intersect(\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentSyncedMovedText\n\t\t\t\t\t\t\t\t\t\t\t\t\t.lineRangeMapping.modified,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\ttx,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\t\t\t\tdebouncer.schedule();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorunWithStore(async (reader, store) => {\n\t\t\t\t/** @description compute diff */\n\n\t\t\t\t// So that they get recomputed when these settings change\n\t\t\t\tthis._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n\t\t\t\tthis._options.hideUnchangedRegionsContextLineCount.read(reader);\n\n\t\t\t\tdebouncer.cancel();\n\t\t\t\tcontentChangedSignal.read(reader);\n\t\t\t\tconst documentDiffProvider = this._diffProvider.read(reader);\n\t\t\t\tdocumentDiffProvider.onChangeSignal.read(reader);\n\n\t\t\t\treadHotReloadableExport(DefaultLinesDiffComputer, reader);\n\t\t\t\treadHotReloadableExport(optimizeSequenceDiffs, reader);\n\n\t\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\n\t\t\t\tlet originalTextEditInfos: TextEditInfo[] = [];\n\t\t\t\tstore.add(\n\t\t\t\t\tmodel.original.onDidChangeContent((e) => {\n\t\t\t\t\t\tconst edits = TextEditInfo.fromModelContentChanges(\n\t\t\t\t\t\t\te.changes,\n\t\t\t\t\t\t);\n\t\t\t\t\t\toriginalTextEditInfos = combineTextEditInfos(\n\t\t\t\t\t\t\toriginalTextEditInfos,\n\t\t\t\t\t\t\tedits,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tlet modifiedTextEditInfos: TextEditInfo[] = [];\n\t\t\t\tstore.add(\n\t\t\t\t\tmodel.modified.onDidChangeContent((e) => {\n\t\t\t\t\t\tconst edits = TextEditInfo.fromModelContentChanges(\n\t\t\t\t\t\t\te.changes,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmodifiedTextEditInfos = combineTextEditInfos(\n\t\t\t\t\t\t\tmodifiedTextEditInfos,\n\t\t\t\t\t\t\tedits,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tlet result =\n\t\t\t\t\tawait documentDiffProvider.diffProvider.computeDiff(\n\t\t\t\t\t\tmodel.original,\n\t\t\t\t\t\tmodel.modified,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tignoreTrimWhitespace:\n\t\t\t\t\t\t\t\tthis._options.ignoreTrimWhitespace.read(reader),\n\t\t\t\t\t\t\tmaxComputationTimeMs:\n\t\t\t\t\t\t\t\tthis._options.maxComputationTimeMs.read(reader),\n\t\t\t\t\t\t\tcomputeMoves: this._options.showMoves.read(reader),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis._cancellationTokenSource.token,\n\t\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tthis._cancellationTokenSource.token.isCancellationRequested\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tmodel.original.isDisposed() ||\n\t\t\t\t\tmodel.modified.isDisposed()\n\t\t\t\t) {\n\t\t\t\t\t// TODO@hediet fishy?\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresult = normalizeDocumentDiff(\n\t\t\t\t\tresult,\n\t\t\t\t\tmodel.original,\n\t\t\t\t\tmodel.modified,\n\t\t\t\t);\n\t\t\t\tresult =\n\t\t\t\t\tapplyOriginalEdits(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\toriginalTextEditInfos,\n\t\t\t\t\t\tmodel.original,\n\t\t\t\t\t\tmodel.modified,\n\t\t\t\t\t) ?? result;\n\t\t\t\tresult =\n\t\t\t\t\tapplyModifiedEdits(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\tmodifiedTextEditInfos,\n\t\t\t\t\t\tmodel.original,\n\t\t\t\t\t\tmodel.modified,\n\t\t\t\t\t) ?? result;\n\n\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t/** @description write diff result */\n\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\n\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\tconst state = DiffState.fromDiffResult(result);\n\t\t\t\t\tthis._diff.set(state, tx);\n\t\t\t\t\tthis._isDiffUpToDate.set(true, tx);\n\t\t\t\t\tconst currentSyncedMovedText =\n\t\t\t\t\t\tthis.movedTextToCompare.get();\n\t\t\t\t\tthis.movedTextToCompare.set(\n\t\t\t\t\t\tcurrentSyncedMovedText\n\t\t\t\t\t\t\t? this._lastDiff.moves.find((m) =>\n\t\t\t\t\t\t\t\t\tm.lineRangeMapping.modified.intersect(\n\t\t\t\t\t\t\t\t\t\tcurrentSyncedMovedText.lineRangeMapping\n\t\t\t\t\t\t\t\t\t\t\t.modified,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\ttx,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic ensureModifiedLineIsVisible(\n\t\tlineNumber: number,\n\t\tpreference: RevealPreference,\n\t\ttx: ITransaction | undefined,\n\t): void {\n\t\tif (this.diff.get()?.mappings.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst unchangedRegions = this._unchangedRegions.get()?.regions || [];\n\t\tfor (const r of unchangedRegions) {\n\t\t\tif (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n\t\t\t\tr.showModifiedLine(lineNumber, preference, tx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ensureOriginalLineIsVisible(\n\t\tlineNumber: number,\n\t\tpreference: RevealPreference,\n\t\ttx: ITransaction | undefined,\n\t): void {\n\t\tif (this.diff.get()?.mappings.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst unchangedRegions = this._unchangedRegions.get()?.regions || [];\n\t\tfor (const r of unchangedRegions) {\n\t\t\tif (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n\t\t\t\tr.showOriginalLine(lineNumber, preference, tx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async waitForDiff(): Promise<void> {\n\t\tawait waitForState(this.isDiffUpToDate, (s) => s);\n\t}\n\n\tpublic serializeState(): SerializedState {\n\t\tconst regions = this._unchangedRegions.get();\n\t\treturn {\n\t\t\tcollapsedRegions: regions?.regions.map((r) => ({\n\t\t\t\trange: r.getHiddenModifiedRange(undefined).serialize(),\n\t\t\t})),\n\t\t};\n\t}\n\n\tpublic restoreSerializedState(state: SerializedState): void {\n\t\tconst ranges = state.collapsedRegions?.map((r) =>\n\t\t\tLineRange.deserialize(r.range),\n\t\t);\n\t\tconst regions = this._unchangedRegions.get();\n\t\tif (!regions || !ranges) {\n\t\t\treturn;\n\t\t}\n\t\ttransaction((tx) => {\n\t\t\tfor (const r of regions.regions) {\n\t\t\t\tfor (const range of ranges) {\n\t\t\t\t\tif (r.modifiedUnchangedRange.intersect(range)) {\n\t\t\t\t\t\tr.setHiddenModifiedRange(range, tx);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction normalizeDocumentDiff(\n\tdiff: IDocumentDiff,\n\toriginal: ITextModel,\n\tmodified: ITextModel,\n): IDocumentDiff {\n\treturn {\n\t\tchanges: diff.changes.map(\n\t\t\t(c) =>\n\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\tc.original,\n\t\t\t\t\tc.modified,\n\t\t\t\t\tc.innerChanges\n\t\t\t\t\t\t? c.innerChanges.map((i) =>\n\t\t\t\t\t\t\t\tnormalizeRangeMapping(i, original, modified),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t),\n\t\t),\n\t\tmoves: diff.moves,\n\t\tidentical: diff.identical,\n\t\tquitEarly: diff.quitEarly,\n\t};\n}\n\nfunction normalizeRangeMapping(\n\trangeMapping: RangeMapping,\n\toriginal: ITextModel,\n\tmodified: ITextModel,\n): RangeMapping {\n\tlet originalRange = rangeMapping.originalRange;\n\tlet modifiedRange = rangeMapping.modifiedRange;\n\tif (\n\t\toriginalRange.startColumn === 1 &&\n\t\tmodifiedRange.startColumn === 1 &&\n\t\t(originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) &&\n\t\toriginalRange.endColumn ===\n\t\t\toriginal.getLineMaxColumn(originalRange.endLineNumber) &&\n\t\tmodifiedRange.endColumn ===\n\t\t\tmodified.getLineMaxColumn(modifiedRange.endLineNumber) &&\n\t\toriginalRange.endLineNumber < original.getLineCount() &&\n\t\tmodifiedRange.endLineNumber < modified.getLineCount()\n\t) {\n\t\toriginalRange = originalRange.setEndPosition(\n\t\t\toriginalRange.endLineNumber + 1,\n\t\t\t1,\n\t\t);\n\t\tmodifiedRange = modifiedRange.setEndPosition(\n\t\t\tmodifiedRange.endLineNumber + 1,\n\t\t\t1,\n\t\t);\n\t}\n\treturn new RangeMapping(originalRange, modifiedRange);\n}\n\ninterface SerializedState {\n\tcollapsedRegions: { range: ISerializedLineRange }[] | undefined;\n}\n\nexport class DiffState {\n\tpublic static fromDiffResult(result: IDocumentDiff): DiffState {\n\t\treturn new DiffState(\n\t\t\tresult.changes.map((c) => new DiffMapping(c)),\n\t\t\tresult.moves || [],\n\t\t\tresult.identical,\n\t\t\tresult.quitEarly,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly mappings: readonly DiffMapping[],\n\t\tpublic readonly movedTexts: readonly MovedText[],\n\t\tpublic readonly identical: boolean,\n\t\tpublic readonly quitEarly: boolean,\n\t) {}\n}\n\nexport class DiffMapping {\n\tconstructor(readonly lineRangeMapping: DetailedLineRangeMapping) {\n\t\t/*\n\t\treadonly movedTo: MovedText | undefined,\n\t\treadonly movedFrom: MovedText | undefined,\n\n\t\tif (movedTo) {\n\t\t\tassertFn(() =>\n\t\t\t\tmovedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n\t\t\t\t&& lineRangeMapping.originalRange.isEmpty\n\t\t\t\t&& !movedFrom\n\t\t\t);\n\t\t} else if (movedFrom) {\n\t\t\tassertFn(() =>\n\t\t\t\tmovedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n\t\t\t\t&& lineRangeMapping.modifiedRange.isEmpty\n\t\t\t\t&& !movedTo\n\t\t\t);\n\t\t}\n\t\t*/\n\t}\n}\n\nexport class UnchangedRegion {\n\tpublic static fromDiffs(\n\t\tchanges: readonly DetailedLineRangeMapping[],\n\t\toriginalLineCount: number,\n\t\tmodifiedLineCount: number,\n\t\tminHiddenLineCount: number,\n\t\tminContext: number,\n\t): UnchangedRegion[] {\n\t\tconst inversedMappings = DetailedLineRangeMapping.inverse(\n\t\t\tchanges,\n\t\t\toriginalLineCount,\n\t\t\tmodifiedLineCount,\n\t\t);\n\t\tconst result: UnchangedRegion[] = [];\n\n\t\tfor (const mapping of inversedMappings) {\n\t\t\tlet origStart = mapping.original.startLineNumber;\n\t\t\tlet modStart = mapping.modified.startLineNumber;\n\t\t\tlet length = mapping.original.length;\n\n\t\t\tconst atStart = origStart === 1 && modStart === 1;\n\t\t\tconst atEnd =\n\t\t\t\torigStart + length === originalLineCount + 1 &&\n\t\t\t\tmodStart + length === modifiedLineCount + 1;\n\n\t\t\tif (\n\t\t\t\t(atStart || atEnd) &&\n\t\t\t\tlength >= minContext + minHiddenLineCount\n\t\t\t) {\n\t\t\t\tif (atStart && !atEnd) {\n\t\t\t\t\tlength -= minContext;\n\t\t\t\t}\n\t\t\t\tif (atEnd && !atStart) {\n\t\t\t\t\torigStart += minContext;\n\t\t\t\t\tmodStart += minContext;\n\t\t\t\t\tlength -= minContext;\n\t\t\t\t}\n\t\t\t\tresult.push(\n\t\t\t\t\tnew UnchangedRegion(origStart, modStart, length, 0, 0),\n\t\t\t\t);\n\t\t\t} else if (length >= minContext * 2 + minHiddenLineCount) {\n\t\t\t\torigStart += minContext;\n\t\t\t\tmodStart += minContext;\n\t\t\t\tlength -= minContext * 2;\n\t\t\t\tresult.push(\n\t\t\t\t\tnew UnchangedRegion(origStart, modStart, length, 0, 0),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic get originalUnchangedRange(): LineRange {\n\t\treturn LineRange.ofLength(this.originalLineNumber, this.lineCount);\n\t}\n\n\tpublic get modifiedUnchangedRange(): LineRange {\n\t\treturn LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n\t}\n\n\tprivate readonly _visibleLineCountTop = observableValue<number>(this, 0);\n\tpublic readonly visibleLineCountTop: ISettableObservable<number> =\n\t\tthis._visibleLineCountTop;\n\n\tprivate readonly _visibleLineCountBottom = observableValue<number>(this, 0);\n\tpublic readonly visibleLineCountBottom: ISettableObservable<number> =\n\t\tthis._visibleLineCountBottom;\n\n\tprivate readonly _shouldHideControls = derived(\n\t\tthis,\n\t\t(reader /** @description isVisible */) =>\n\t\t\tthis.visibleLineCountTop.read(reader) +\n\t\t\t\tthis.visibleLineCountBottom.read(reader) ===\n\t\t\t\tthis.lineCount && !this.isDragged.read(reader),\n\t);\n\n\tpublic readonly isDragged = observableValue<undefined | \"bottom\" | \"top\">(\n\t\tthis,\n\t\tundefined,\n\t);\n\n\tconstructor(\n\t\tpublic readonly originalLineNumber: number,\n\t\tpublic readonly modifiedLineNumber: number,\n\t\tpublic readonly lineCount: number,\n\t\tvisibleLineCountTop: number,\n\t\tvisibleLineCountBottom: number,\n\t) {\n\t\tconst visibleLineCountTop2 = Math.max(\n\t\t\tMath.min(visibleLineCountTop, this.lineCount),\n\t\t\t0,\n\t\t);\n\t\tconst visibleLineCountBottom2 = Math.max(\n\t\t\tMath.min(\n\t\t\t\tvisibleLineCountBottom,\n\t\t\t\tthis.lineCount - visibleLineCountTop,\n\t\t\t),\n\t\t\t0,\n\t\t);\n\n\t\tsoftAssert(visibleLineCountTop === visibleLineCountTop2);\n\t\tsoftAssert(visibleLineCountBottom === visibleLineCountBottom2);\n\n\t\tthis._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n\t\tthis._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n\t}\n\n\tpublic setVisibleRanges(\n\t\tvisibleRanges: LineRangeMapping[],\n\t\ttx: ITransaction,\n\t): UnchangedRegion[] {\n\t\tconst result: UnchangedRegion[] = [];\n\n\t\tconst hiddenModified = new LineRangeSet(\n\t\t\tvisibleRanges.map((r) => r.modified),\n\t\t).subtractFrom(this.modifiedUnchangedRange);\n\n\t\tlet originalStartLineNumber = this.originalLineNumber;\n\t\tlet modifiedStartLineNumber = this.modifiedLineNumber;\n\t\tconst modifiedEndLineNumberEx =\n\t\t\tthis.modifiedLineNumber + this.lineCount;\n\t\tif (hiddenModified.ranges.length === 0) {\n\t\t\tthis.showAll(tx);\n\t\t\tresult.push(this);\n\t\t} else {\n\t\t\tlet i = 0;\n\t\t\tfor (const r of hiddenModified.ranges) {\n\t\t\t\tconst isLast = i === hiddenModified.ranges.length - 1;\n\t\t\t\ti++;\n\n\t\t\t\tconst length =\n\t\t\t\t\t(isLast\n\t\t\t\t\t\t? modifiedEndLineNumberEx\n\t\t\t\t\t\t: r.endLineNumberExclusive) - modifiedStartLineNumber;\n\n\t\t\t\tconst newR = new UnchangedRegion(\n\t\t\t\t\toriginalStartLineNumber,\n\t\t\t\t\tmodifiedStartLineNumber,\n\t\t\t\t\tlength,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\t\tnewR.setHiddenModifiedRange(r, tx);\n\t\t\t\tresult.push(newR);\n\n\t\t\t\toriginalStartLineNumber =\n\t\t\t\t\tnewR.originalUnchangedRange.endLineNumberExclusive;\n\t\t\t\tmodifiedStartLineNumber =\n\t\t\t\t\tnewR.modifiedUnchangedRange.endLineNumberExclusive;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic shouldHideControls(reader: IReader | undefined): boolean {\n\t\treturn this._shouldHideControls.read(reader);\n\t}\n\n\tpublic getHiddenOriginalRange(reader: IReader | undefined): LineRange {\n\t\treturn LineRange.ofLength(\n\t\t\tthis.originalLineNumber + this._visibleLineCountTop.read(reader),\n\t\t\tthis.lineCount -\n\t\t\t\tthis._visibleLineCountTop.read(reader) -\n\t\t\t\tthis._visibleLineCountBottom.read(reader),\n\t\t);\n\t}\n\n\tpublic getHiddenModifiedRange(reader: IReader | undefined): LineRange {\n\t\treturn LineRange.ofLength(\n\t\t\tthis.modifiedLineNumber + this._visibleLineCountTop.read(reader),\n\t\t\tthis.lineCount -\n\t\t\t\tthis._visibleLineCountTop.read(reader) -\n\t\t\t\tthis._visibleLineCountBottom.read(reader),\n\t\t);\n\t}\n\n\tpublic setHiddenModifiedRange(range: LineRange, tx: ITransaction) {\n\t\tconst visibleLineCountTop =\n\t\t\trange.startLineNumber - this.modifiedLineNumber;\n\t\tconst visibleLineCountBottom =\n\t\t\tthis.modifiedLineNumber +\n\t\t\tthis.lineCount -\n\t\t\trange.endLineNumberExclusive;\n\t\tthis.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n\t}\n\n\tpublic getMaxVisibleLineCountTop() {\n\t\treturn this.lineCount - this._visibleLineCountBottom.get();\n\t}\n\n\tpublic getMaxVisibleLineCountBottom() {\n\t\treturn this.lineCount - this._visibleLineCountTop.get();\n\t}\n\n\tpublic showMoreAbove(count = 10, tx: ITransaction | undefined): void {\n\t\tconst maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n\t\tthis._visibleLineCountTop.set(\n\t\t\tMath.min(\n\t\t\t\tthis._visibleLineCountTop.get() + count,\n\t\t\t\tmaxVisibleLineCountTop,\n\t\t\t),\n\t\t\ttx,\n\t\t);\n\t}\n\n\tpublic showMoreBelow(count = 10, tx: ITransaction | undefined): void {\n\t\tconst maxVisibleLineCountBottom =\n\t\t\tthis.lineCount - this._visibleLineCountTop.get();\n\t\tthis._visibleLineCountBottom.set(\n\t\t\tMath.min(\n\t\t\t\tthis._visibleLineCountBottom.get() + count,\n\t\t\t\tmaxVisibleLineCountBottom,\n\t\t\t),\n\t\t\ttx,\n\t\t);\n\t}\n\n\tpublic showAll(tx: ITransaction | undefined): void {\n\t\tthis._visibleLineCountBottom.set(\n\t\t\tthis.lineCount - this._visibleLineCountTop.get(),\n\t\t\ttx,\n\t\t);\n\t}\n\n\tpublic showModifiedLine(\n\t\tlineNumber: number,\n\t\tpreference: RevealPreference,\n\t\ttx: ITransaction | undefined,\n\t): void {\n\t\tconst top =\n\t\t\tlineNumber +\n\t\t\t1 -\n\t\t\t(this.modifiedLineNumber + this._visibleLineCountTop.get());\n\t\tconst bottom =\n\t\t\tthis.modifiedLineNumber -\n\t\t\tthis._visibleLineCountBottom.get() +\n\t\t\tthis.lineCount -\n\t\t\tlineNumber;\n\t\tif (\n\t\t\t(preference === RevealPreference.FromCloserSide && top < bottom) ||\n\t\t\tpreference === RevealPreference.FromTop\n\t\t) {\n\t\t\tthis._visibleLineCountTop.set(\n\t\t\t\tthis._visibleLineCountTop.get() + top,\n\t\t\t\ttx,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._visibleLineCountBottom.set(\n\t\t\t\tthis._visibleLineCountBottom.get() + bottom,\n\t\t\t\ttx,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic showOriginalLine(\n\t\tlineNumber: number,\n\t\tpreference: RevealPreference,\n\t\ttx: ITransaction | undefined,\n\t): void {\n\t\tconst top = lineNumber - this.originalLineNumber;\n\t\tconst bottom = this.originalLineNumber + this.lineCount - lineNumber;\n\t\tif (\n\t\t\t(preference === RevealPreference.FromCloserSide && top < bottom) ||\n\t\t\tpreference === RevealPreference.FromTop\n\t\t) {\n\t\t\tthis._visibleLineCountTop.set(\n\t\t\t\tMath.min(\n\t\t\t\t\tthis._visibleLineCountTop.get() + bottom - top,\n\t\t\t\t\tthis.getMaxVisibleLineCountTop(),\n\t\t\t\t),\n\t\t\t\ttx,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._visibleLineCountBottom.set(\n\t\t\t\tMath.min(\n\t\t\t\t\tthis._visibleLineCountBottom.get() + top - bottom,\n\t\t\t\t\tthis.getMaxVisibleLineCountBottom(),\n\t\t\t\t),\n\t\t\t\ttx,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic collapseAll(tx: ITransaction | undefined): void {\n\t\tthis._visibleLineCountTop.set(0, tx);\n\t\tthis._visibleLineCountBottom.set(0, tx);\n\t}\n\n\tpublic setState(\n\t\tvisibleLineCountTop: number,\n\t\tvisibleLineCountBottom: number,\n\t\ttx: ITransaction | undefined,\n\t): void {\n\t\tvisibleLineCountTop = Math.max(\n\t\t\tMath.min(visibleLineCountTop, this.lineCount),\n\t\t\t0,\n\t\t);\n\t\tvisibleLineCountBottom = Math.max(\n\t\t\tMath.min(\n\t\t\t\tvisibleLineCountBottom,\n\t\t\t\tthis.lineCount - visibleLineCountTop,\n\t\t\t),\n\t\t\t0,\n\t\t);\n\n\t\tthis._visibleLineCountTop.set(visibleLineCountTop, tx);\n\t\tthis._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n\t}\n}\n\nexport enum RevealPreference {\n\tFromCloserSide = 0,\n\tFromTop = 1,\n\tFromBottom = 2,\n}\n\nfunction applyOriginalEdits(\n\tdiff: IDocumentDiff,\n\ttextEdits: TextEditInfo[],\n\toriginalTextModel: ITextModel,\n\tmodifiedTextModel: ITextModel,\n): IDocumentDiff | undefined {\n\treturn undefined;\n\t/*\n\tTODO@hediet\n\tif (textEdits.length === 0) {\n\t\treturn diff;\n\t}\n\n\tconst diff2 = flip(diff);\n\tconst diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n\tif (!diff3) {\n\t\treturn undefined;\n\t}\n\treturn flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n\treturn {\n\t\tchanges: diff.changes.map(c => c.flip()),\n\t\tmoves: diff.moves.map(m => m.flip()),\n\t\tidentical: diff.identical,\n\t\tquitEarly: diff.quitEarly,\n\t};\n}\n*/\nfunction applyModifiedEdits(\n\tdiff: IDocumentDiff,\n\ttextEdits: TextEditInfo[],\n\toriginalTextModel: ITextModel,\n\tmodifiedTextModel: ITextModel,\n): IDocumentDiff | undefined {\n\treturn undefined;\n\t/*\n\tTODO@hediet\n\tif (textEdits.length === 0) {\n\t\treturn diff;\n\t}\n\tif (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n\t\t// TODO support these cases\n\t\treturn undefined;\n\t}\n\n\tconst changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n\n\tconst moves = diff.moves.map(m => {\n\t\tconst newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n\t\treturn newModifiedRange ? new MovedText(\n\t\t\tnew SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n\t\t\tapplyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n\t\t) : undefined;\n\t}).filter(isDefined);\n\n\treturn {\n\t\tidentical: false,\n\t\tquitEarly: false,\n\t\tchanges,\n\t\tmoves,\n\t};*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n\tlet rangeStartLineNumber = range.startLineNumber;\n\tlet rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n\tfor (let i = textEdits.length - 1; i >= 0; i--) {\n\t\tconst textEdit = textEdits[i];\n\t\tconst textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n\t\tconst textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n\t\tconst newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n\t\tconst delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n\t\tif (textEditEndLineNumber < rangeStartLineNumber) {\n\t\t\t// the text edit is before us\n\t\t\trangeStartLineNumber += delta;\n\t\t\trangeEndLineNumberEx += delta;\n\t\t} else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n\t\t\t// the text edit is after us\n\t\t\t// NOOP\n\t\t} else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n\t\t\t// the range is fully contained in the text edit\n\t\t\treturn undefined;\n\t\t} else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n\t\t\t// the text edit ends inside our range\n\t\t\trangeStartLineNumber = textEditEndLineNumber + 1;\n\t\t\trangeStartLineNumber += delta;\n\t\t\trangeEndLineNumberEx += delta;\n\t\t} else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n\t\t\t// the text edit starts inside our range\n\t\t\trangeEndLineNumberEx = textEditStartLineNumber;\n\t\t} else {\n\t\t\trangeEndLineNumberEx += delta;\n\t\t}\n\t}\n\n\treturn new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n\tconst diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n\t\tpositionToLength(c.originalRange.getStartPosition()),\n\t\tpositionToLength(c.originalRange.getEndPosition()),\n\t\tlengthOfRange(c.modifiedRange).toLength(),\n\t)));\n\n\tconst combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n\tlet lastOriginalEndOffset = lengthZero;\n\tlet lastModifiedEndOffset = lengthZero;\n\tconst rangeMappings = combined.map(c => {\n\t\tconst modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n\t\tlastOriginalEndOffset = c.endOffset;\n\t\tlastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n\t\treturn new RangeMapping(\n\t\t\tRange.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n\t\t\tRange.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n\t\t);\n\t});\n\n\tconst newChanges = lineRangeMappingFromRangeMappings(\n\t\trangeMappings,\n\t\toriginalTextModel.getLinesContent(),\n\t\tmodifiedTextModel.getLinesContent(),\n\t);\n\treturn newChanges;\n}\n*/\n"],
  "mappings": "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",
  "names": ["r", "RevealPreference"]
}
