{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/diffProviderFactoryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { LineRange } from \"../../../common/core/lineRange.js\";\nimport type {\n\tIDocumentDiff,\n\tIDocumentDiffProvider,\n\tIDocumentDiffProviderOptions,\n} from \"../../../common/diff/documentDiffProvider.js\";\nimport {\n\tDetailedLineRangeMapping,\n\tRangeMapping,\n} from \"../../../common/diff/rangeMapping.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport {\n\ttype DiffAlgorithmName,\n\tIEditorWorkerService,\n} from \"../../../common/services/editorWorker.js\";\n\nexport const IDiffProviderFactoryService =\n\tcreateDecorator<IDiffProviderFactoryService>(\"diffProviderFactoryService\");\n\nexport interface IDocumentDiffFactoryOptions {\n\treadonly diffAlgorithm?: \"legacy\" | \"advanced\";\n}\n\nexport interface IDiffProviderFactoryService {\n\treadonly _serviceBrand: undefined;\n\tcreateDiffProvider(\n\t\toptions: IDocumentDiffFactoryOptions,\n\t): IDocumentDiffProvider;\n}\n\nexport class WorkerBasedDiffProviderFactoryService\n\timplements IDiffProviderFactoryService\n{\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\tcreateDiffProvider(\n\t\toptions: IDocumentDiffFactoryOptions,\n\t): IDocumentDiffProvider {\n\t\treturn this.instantiationService.createInstance(\n\t\t\tWorkerBasedDocumentDiffProvider,\n\t\t\toptions,\n\t\t);\n\t}\n}\n\nregisterSingleton(\n\tIDiffProviderFactoryService,\n\tWorkerBasedDiffProviderFactoryService,\n\tInstantiationType.Delayed,\n);\n\nexport class WorkerBasedDocumentDiffProvider\n\timplements IDocumentDiffProvider, IDisposable\n{\n\tprivate onDidChangeEventEmitter = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> =\n\t\tthis.onDidChangeEventEmitter.event;\n\n\tprivate diffAlgorithm: DiffAlgorithmName | IDocumentDiffProvider =\n\t\t\"advanced\";\n\tprivate diffAlgorithmOnDidChangeSubscription: IDisposable | undefined =\n\t\tundefined;\n\n\tprivate static readonly diffCache = new Map<\n\t\tstring,\n\t\t{ result: IDocumentDiff; context: string }\n\t>();\n\n\tconstructor(\n\t\toptions: IWorkerBasedDocumentDiffProviderOptions,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.setOptions(options);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.diffAlgorithmOnDidChangeSubscription?.dispose();\n\t}\n\n\tasync computeDiff(\n\t\toriginal: ITextModel,\n\t\tmodified: ITextModel,\n\t\toptions: IDocumentDiffProviderOptions,\n\t\tcancellationToken: CancellationToken,\n\t): Promise<IDocumentDiff> {\n\t\tif (typeof this.diffAlgorithm !== \"string\") {\n\t\t\treturn this.diffAlgorithm.computeDiff(\n\t\t\t\toriginal,\n\t\t\t\tmodified,\n\t\t\t\toptions,\n\t\t\t\tcancellationToken,\n\t\t\t);\n\t\t}\n\n\t\tif (original.isDisposed() || modified.isDisposed()) {\n\t\t\t// TODO@hediet\n\t\t\treturn {\n\t\t\t\tchanges: [],\n\t\t\t\tidentical: true,\n\t\t\t\tquitEarly: false,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\t// This significantly speeds up the case when the original file is empty\n\t\tif (\n\t\t\toriginal.getLineCount() === 1 &&\n\t\t\toriginal.getLineMaxColumn(1) === 1\n\t\t) {\n\t\t\tif (\n\t\t\t\tmodified.getLineCount() === 1 &&\n\t\t\t\tmodified.getLineMaxColumn(1) === 1\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tchanges: [],\n\t\t\t\t\tidentical: true,\n\t\t\t\t\tquitEarly: false,\n\t\t\t\t\tmoves: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tchanges: [\n\t\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\t\tnew LineRange(1, 2),\n\t\t\t\t\t\tnew LineRange(1, modified.getLineCount() + 1),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tnew RangeMapping(\n\t\t\t\t\t\t\t\toriginal.getFullModelRange(),\n\t\t\t\t\t\t\t\tmodified.getFullModelRange(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t],\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\tidentical: false,\n\t\t\t\tquitEarly: false,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\tconst uriKey = JSON.stringify([\n\t\t\toriginal.uri.toString(),\n\t\t\tmodified.uri.toString(),\n\t\t]);\n\t\tconst context = JSON.stringify([\n\t\t\toriginal.id,\n\t\t\tmodified.id,\n\t\t\toriginal.getAlternativeVersionId(),\n\t\t\tmodified.getAlternativeVersionId(),\n\t\t\tJSON.stringify(options),\n\t\t]);\n\t\tconst c = WorkerBasedDocumentDiffProvider.diffCache.get(uriKey);\n\t\tif (c && c.context === context) {\n\t\t\treturn c.result;\n\t\t}\n\n\t\tconst sw = StopWatch.create();\n\t\tconst result = await this.editorWorkerService.computeDiff(\n\t\t\toriginal.uri,\n\t\t\tmodified.uri,\n\t\t\toptions,\n\t\t\tthis.diffAlgorithm,\n\t\t);\n\t\tconst timeMs = sw.elapsed();\n\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{\n\t\t\t\ttimeMs: number;\n\t\t\t\ttimedOut: boolean;\n\t\t\t\tdetectedMoves: number;\n\t\t\t},\n\t\t\t{\n\t\t\t\towner: \"hediet\";\n\n\t\t\t\ttimeMs: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To understand if the new diff algorithm is slower/faster than the old one\";\n\t\t\t\t};\n\t\t\t\ttimedOut: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To understand how often the new diff algorithm times out\";\n\t\t\t\t};\n\t\t\t\tdetectedMoves: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To understand how often the new diff algorithm detects moves\";\n\t\t\t\t};\n\n\t\t\t\tcomment: \"This event gives insight about the performance of the new diff algorithm.\";\n\t\t\t}\n\t\t>(\"diffEditor.computeDiff\", {\n\t\t\ttimeMs,\n\t\t\ttimedOut: result?.quitEarly ?? true,\n\t\t\tdetectedMoves: options.computeMoves\n\t\t\t\t? (result?.moves.length ?? 0)\n\t\t\t\t: -1,\n\t\t});\n\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t// Text models might be disposed!\n\t\t\treturn {\n\t\t\t\tchanges: [],\n\t\t\t\tidentical: false,\n\t\t\t\tquitEarly: true,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\tif (!result) {\n\t\t\tthrow new Error(\"no diff result available\");\n\t\t}\n\n\t\t// max 10 items in cache\n\t\tif (WorkerBasedDocumentDiffProvider.diffCache.size > 10) {\n\t\t\tWorkerBasedDocumentDiffProvider.diffCache.delete(\n\t\t\t\tWorkerBasedDocumentDiffProvider.diffCache.keys().next().value!,\n\t\t\t);\n\t\t}\n\n\t\tWorkerBasedDocumentDiffProvider.diffCache.set(uriKey, {\n\t\t\tresult,\n\t\t\tcontext,\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic setOptions(\n\t\tnewOptions: IWorkerBasedDocumentDiffProviderOptions,\n\t): void {\n\t\tlet didChange = false;\n\t\tif (newOptions.diffAlgorithm) {\n\t\t\tif (this.diffAlgorithm !== newOptions.diffAlgorithm) {\n\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription?.dispose();\n\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription = undefined;\n\n\t\t\t\tthis.diffAlgorithm = newOptions.diffAlgorithm;\n\t\t\t\tif (typeof newOptions.diffAlgorithm !== \"string\") {\n\t\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription =\n\t\t\t\t\t\tnewOptions.diffAlgorithm.onDidChange(() =>\n\t\t\t\t\t\t\tthis.onDidChangeEventEmitter.fire(),\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdidChange = true;\n\t\t\t}\n\t\t}\n\t\tif (didChange) {\n\t\t\tthis.onDidChangeEventEmitter.fire();\n\t\t}\n\t}\n}\n\ninterface IWorkerBasedDocumentDiffProviderOptions {\n\treadonly diffAlgorithm?: \"legacy\" | \"advanced\" | IDocumentDiffProvider;\n}\n"],
  "mappings": "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",
  "names": []
}
