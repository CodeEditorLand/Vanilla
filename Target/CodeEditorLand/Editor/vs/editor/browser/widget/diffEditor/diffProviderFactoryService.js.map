{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/diffEditor/diffProviderFactoryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService, createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { LineRange } from '../../../common/core/lineRange.js';\nimport { IDocumentDiff, IDocumentDiffProvider, IDocumentDiffProviderOptions } from '../../../common/diff/documentDiffProvider.js';\nimport { DetailedLineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { DiffAlgorithmName, IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport const IDiffProviderFactoryService = createDecorator<IDiffProviderFactoryService>('diffProviderFactoryService');\n\nexport interface IDocumentDiffFactoryOptions {\n\treadonly diffAlgorithm?: 'legacy' | 'advanced';\n}\n\nexport interface IDiffProviderFactoryService {\n\treadonly _serviceBrand: undefined;\n\tcreateDiffProvider(options: IDocumentDiffFactoryOptions): IDocumentDiffProvider;\n}\n\nexport class WorkerBasedDiffProviderFactoryService implements IDiffProviderFactoryService {\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\tcreateDiffProvider(options: IDocumentDiffFactoryOptions): IDocumentDiffProvider {\n\t\treturn this.instantiationService.createInstance(WorkerBasedDocumentDiffProvider, options);\n\t}\n}\n\nregisterSingleton(IDiffProviderFactoryService, WorkerBasedDiffProviderFactoryService, InstantiationType.Delayed);\n\nexport class WorkerBasedDocumentDiffProvider implements IDocumentDiffProvider, IDisposable {\n\tprivate onDidChangeEventEmitter = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this.onDidChangeEventEmitter.event;\n\n\tprivate diffAlgorithm: DiffAlgorithmName | IDocumentDiffProvider = 'advanced';\n\tprivate diffAlgorithmOnDidChangeSubscription: IDisposable | undefined = undefined;\n\n\tprivate static readonly diffCache = new Map<string, { result: IDocumentDiff; context: string }>();\n\n\tconstructor(\n\t\toptions: IWorkerBasedDocumentDiffProviderOptions,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.setOptions(options);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.diffAlgorithmOnDidChangeSubscription?.dispose();\n\t}\n\n\tasync computeDiff(original: ITextModel, modified: ITextModel, options: IDocumentDiffProviderOptions, cancellationToken: CancellationToken): Promise<IDocumentDiff> {\n\t\tif (typeof this.diffAlgorithm !== 'string') {\n\t\t\treturn this.diffAlgorithm.computeDiff(original, modified, options, cancellationToken);\n\t\t}\n\n\t\tif (original.isDisposed() || modified.isDisposed()) {\n\t\t\t// TODO@hediet\n\t\t\treturn {\n\t\t\t\tchanges: [],\n\t\t\t\tidentical: true,\n\t\t\t\tquitEarly: false,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\t// This significantly speeds up the case when the original file is empty\n\t\tif (original.getLineCount() === 1 && original.getLineMaxColumn(1) === 1) {\n\t\t\tif (modified.getLineCount() === 1 && modified.getLineMaxColumn(1) === 1) {\n\t\t\t\treturn {\n\t\t\t\t\tchanges: [],\n\t\t\t\t\tidentical: true,\n\t\t\t\t\tquitEarly: false,\n\t\t\t\t\tmoves: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tchanges: [\n\t\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\t\tnew LineRange(1, 2),\n\t\t\t\t\t\tnew LineRange(1, modified.getLineCount() + 1),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tnew RangeMapping(\n\t\t\t\t\t\t\t\toriginal.getFullModelRange(),\n\t\t\t\t\t\t\t\tmodified.getFullModelRange(),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t]\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\tidentical: false,\n\t\t\t\tquitEarly: false,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\tconst uriKey = JSON.stringify([original.uri.toString(), modified.uri.toString()]);\n\t\tconst context = JSON.stringify([original.id, modified.id, original.getAlternativeVersionId(), modified.getAlternativeVersionId(), JSON.stringify(options)]);\n\t\tconst c = WorkerBasedDocumentDiffProvider.diffCache.get(uriKey);\n\t\tif (c && c.context === context) {\n\t\t\treturn c.result;\n\t\t}\n\n\t\tconst sw = StopWatch.create();\n\t\tconst result = await this.editorWorkerService.computeDiff(original.uri, modified.uri, options, this.diffAlgorithm);\n\t\tconst timeMs = sw.elapsed();\n\n\t\tthis.telemetryService.publicLog2<{\n\t\t\ttimeMs: number;\n\t\t\ttimedOut: boolean;\n\t\t\tdetectedMoves: number;\n\t\t}, {\n\t\t\towner: 'hediet';\n\n\t\t\ttimeMs: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To understand if the new diff algorithm is slower/faster than the old one' };\n\t\t\ttimedOut: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To understand how often the new diff algorithm times out' };\n\t\t\tdetectedMoves: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To understand how often the new diff algorithm detects moves' };\n\n\t\t\tcomment: 'This event gives insight about the performance of the new diff algorithm.';\n\t\t}>('diffEditor.computeDiff', {\n\t\t\ttimeMs,\n\t\t\ttimedOut: result?.quitEarly ?? true,\n\t\t\tdetectedMoves: options.computeMoves ? (result?.moves.length ?? 0) : -1,\n\t\t});\n\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t// Text models might be disposed!\n\t\t\treturn {\n\t\t\t\tchanges: [],\n\t\t\t\tidentical: false,\n\t\t\t\tquitEarly: true,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\tif (!result) {\n\t\t\tthrow new Error('no diff result available');\n\t\t}\n\n\t\t// max 10 items in cache\n\t\tif (WorkerBasedDocumentDiffProvider.diffCache.size > 10) {\n\t\t\tWorkerBasedDocumentDiffProvider.diffCache.delete(WorkerBasedDocumentDiffProvider.diffCache.keys().next().value!);\n\t\t}\n\n\t\tWorkerBasedDocumentDiffProvider.diffCache.set(uriKey, { result, context });\n\t\treturn result;\n\t}\n\n\tpublic setOptions(newOptions: IWorkerBasedDocumentDiffProviderOptions): void {\n\t\tlet didChange = false;\n\t\tif (newOptions.diffAlgorithm) {\n\t\t\tif (this.diffAlgorithm !== newOptions.diffAlgorithm) {\n\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription?.dispose();\n\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription = undefined;\n\n\t\t\t\tthis.diffAlgorithm = newOptions.diffAlgorithm;\n\t\t\t\tif (typeof newOptions.diffAlgorithm !== 'string') {\n\t\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription = newOptions.diffAlgorithm.onDidChange(() => this.onDidChangeEventEmitter.fire());\n\t\t\t\t}\n\t\t\t\tdidChange = true;\n\t\t\t}\n\t\t}\n\t\tif (didChange) {\n\t\t\tthis.onDidChangeEventEmitter.fire();\n\t\t}\n\t}\n}\n\ninterface IWorkerBasedDocumentDiffProviderOptions {\n\treadonly diffAlgorithm?: 'legacy' | 'advanced' | IDocumentDiffProvider;\n}\n"],
  "mappings": "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",
  "names": []
}
