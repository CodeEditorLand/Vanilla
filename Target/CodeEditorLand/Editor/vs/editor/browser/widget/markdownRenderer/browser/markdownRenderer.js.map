{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownRenderOptions, MarkedOptions, renderMarkdown } from '../../../../../base/browser/markdownRenderer.js';\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { onUnexpectedError } from '../../../../../base/common/errors.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { IMarkdownString, MarkdownStringTrustedOptions } from '../../../../../base/common/htmlContent.js';\nimport { DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport './renderedMarkdown.css';\nimport { applyFontInfo } from '../../../config/domFontInfo.js';\nimport { ICodeEditor } from '../../../editorBrowser.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../common/languages/modesRegistry.js';\nimport { tokenizeToString } from '../../../../common/languages/textToHtmlTokenizer.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\n\nexport interface IMarkdownRenderResult extends IDisposable {\n\treadonly element: HTMLElement;\n}\n\nexport interface IMarkdownRendererOptions {\n\treadonly editor?: ICodeEditor;\n\treadonly codeBlockFontFamily?: string;\n\treadonly codeBlockFontSize?: string;\n}\n\n/**\n * Markdown renderer that can render codeblocks with the editor mechanics. This\n * renderer should always be preferred.\n */\nexport class MarkdownRenderer {\n\n\tprivate static _ttpTokenizer = createTrustedTypesPolicy('tokenizeToString', {\n\t\tcreateHTML(html: string) {\n\t\t\treturn html;\n\t\t}\n\t});\n\n\tprivate readonly _onDidRenderAsync = new Emitter<void>();\n\treadonly onDidRenderAsync = this._onDidRenderAsync.event;\n\n\tconstructor(\n\t\tprivate readonly _options: IMarkdownRendererOptions,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t) { }\n\n\tdispose(): void {\n\t\tthis._onDidRenderAsync.dispose();\n\t}\n\n\trender(markdown: IMarkdownString | undefined, options?: MarkdownRenderOptions, markedOptions?: MarkedOptions): IMarkdownRenderResult {\n\t\tif (!markdown) {\n\t\t\tconst element = document.createElement('span');\n\t\t\treturn { element, dispose: () => { } };\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst rendered = disposables.add(renderMarkdown(markdown, { ...this._getRenderOptions(markdown, disposables), ...options }, markedOptions));\n\t\trendered.element.classList.add('rendered-markdown');\n\t\treturn {\n\t\t\telement: rendered.element,\n\t\t\tdispose: () => disposables.dispose()\n\t\t};\n\t}\n\n\tprotected _getRenderOptions(markdown: IMarkdownString, disposables: DisposableStore): MarkdownRenderOptions {\n\t\treturn {\n\t\t\tcodeBlockRenderer: async (languageAlias, value) => {\n\t\t\t\t// In markdown,\n\t\t\t\t// it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n\t\t\t\t// it is possible no alias is given in which case we fall back to the current editor lang\n\t\t\t\tlet languageId: string | undefined | null;\n\t\t\t\tif (languageAlias) {\n\t\t\t\t\tlanguageId = this._languageService.getLanguageIdByLanguageName(languageAlias);\n\t\t\t\t} else if (this._options.editor) {\n\t\t\t\t\tlanguageId = this._options.editor.getModel()?.getLanguageId();\n\t\t\t\t}\n\t\t\t\tif (!languageId) {\n\t\t\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t\t\t}\n\t\t\t\tconst html = await tokenizeToString(this._languageService, value, languageId);\n\n\t\t\t\tconst element = document.createElement('span');\n\n\t\t\t\telement.innerHTML = (MarkdownRenderer._ttpTokenizer?.createHTML(html) ?? html) as string;\n\n\t\t\t\t// use \"good\" font\n\t\t\t\tif (this._options.editor) {\n\t\t\t\t\tconst fontInfo = this._options.editor.getOption(EditorOption.fontInfo);\n\t\t\t\t\tapplyFontInfo(element, fontInfo);\n\t\t\t\t} else if (this._options.codeBlockFontFamily) {\n\t\t\t\t\telement.style.fontFamily = this._options.codeBlockFontFamily;\n\t\t\t\t}\n\n\t\t\t\tif (this._options.codeBlockFontSize !== undefined) {\n\t\t\t\t\telement.style.fontSize = this._options.codeBlockFontSize;\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\tasyncRenderCallback: () => this._onDidRenderAsync.fire(),\n\t\t\tactionHandler: {\n\t\t\t\tcallback: (link) => this.openMarkdownLink(link, markdown),\n\t\t\t\tdisposables: disposables\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected async openMarkdownLink(link: string, markdown: IMarkdownString) {\n\t\tawait openLinkFromMarkdown(this._openerService, link, markdown.isTrusted);\n\t}\n}\n\nexport async function openLinkFromMarkdown(openerService: IOpenerService, link: string, isTrusted: boolean | MarkdownStringTrustedOptions | undefined): Promise<boolean> {\n\ttry {\n\t\treturn await openerService.open(link, {\n\t\t\tfromUserGesture: true,\n\t\t\tallowContributedOpeners: true,\n\t\t\tallowCommands: toAllowCommandsOption(isTrusted),\n\t\t});\n\t} catch (e) {\n\t\tonUnexpectedError(e);\n\t\treturn false;\n\t}\n}\n\nfunction toAllowCommandsOption(isTrusted: boolean | MarkdownStringTrustedOptions | undefined): boolean | readonly string[] {\n\tif (isTrusted === true) {\n\t\treturn true; // Allow all commands\n\t}\n\n\tif (isTrusted && Array.isArray(isTrusted.enabledCommands)) {\n\t\treturn isTrusted.enabledCommands; // Allow subset of commands\n\t}\n\n\treturn false; // Block commands\n}\n"],
  "mappings": "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",
  "names": []
}
