{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/services/editorWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from '../../../base/common/async.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { logOnceWebWorkerWarning, IWorkerClient, Proxied, IWorkerDescriptor } from '../../../base/common/worker/simpleWorker.js';\nimport { createWebWorker } from '../../../base/browser/defaultWorkerFactory.js';\nimport { Position } from '../../common/core/position.js';\nimport { IRange, Range } from '../../common/core/range.js';\nimport { ITextModel } from '../../common/model.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { EditorSimpleWorker } from '../../common/services/editorSimpleWorker.js';\nimport { DiffAlgorithmName, IEditorWorkerService, ILineChange, IUnicodeHighlightsResult } from '../../common/services/editorWorker.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { ITextResourceConfigurationService } from '../../common/services/textResourceConfiguration.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { canceled, onUnexpectedError } from '../../../base/common/errors.js';\nimport { UnicodeHighlighterOptions } from '../../common/services/unicodeTextModelHighlighter.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { IChange } from '../../common/diff/legacyLinesDiffComputer.js';\nimport { IDocumentDiff, IDocumentDiffProviderOptions } from '../../common/diff/documentDiffProvider.js';\nimport { ILinesDiffComputerOptions, MovedText } from '../../common/diff/linesDiffComputer.js';\nimport { DetailedLineRangeMapping, RangeMapping, LineRangeMapping } from '../../common/diff/rangeMapping.js';\nimport { LineRange } from '../../common/core/lineRange.js';\nimport { SectionHeader, FindSectionHeaderOptions } from '../../common/services/findSectionHeaders.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { WindowIntervalTimer } from '../../../base/browser/dom.js';\nimport { WorkerTextModelSyncClient } from '../../common/services/textModelSync/textModelSync.impl.js';\nimport { EditorWorkerHost } from '../../common/services/editorWorkerHost.js';\n\n/**\n * Stop the worker if it was not needed for 5 min.\n */\nconst STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\n\nfunction canSyncModel(modelService: IModelService, resource: URI): boolean {\n\tconst model = modelService.getModel(resource);\n\tif (!model) {\n\t\treturn false;\n\t}\n\tif (model.isTooLargeForSyncing()) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport abstract class EditorWorkerService extends Disposable implements IEditorWorkerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _modelService: IModelService;\n\tprivate readonly _workerManager: WorkerManager;\n\tprivate readonly _logService: ILogService;\n\n\tconstructor(\n\t\tworkerDescriptor: IWorkerDescriptor,\n\t\t@IModelService modelService: IModelService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@ILanguageFeaturesService languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\t\tthis._modelService = modelService;\n\t\tthis._workerManager = this._register(new WorkerManager(workerDescriptor, this._modelService));\n\t\tthis._logService = logService;\n\n\t\t// register default link-provider and default completions-provider\n\t\tthis._register(languageFeaturesService.linkProvider.register({ language: '*', hasAccessToAllModels: true }, {\n\t\t\tprovideLinks: async (model, token) => {\n\t\t\t\tif (!canSyncModel(this._modelService, model.uri)) {\n\t\t\t\t\treturn Promise.resolve({ links: [] }); // File too large\n\t\t\t\t}\n\t\t\t\tconst worker = await this._workerWithResources([model.uri]);\n\t\t\t\tconst links = await worker.$computeLinks(model.uri.toString());\n\t\t\t\treturn links && { links };\n\t\t\t}\n\t\t}));\n\t\tthis._register(languageFeaturesService.completionProvider.register('*', new WordBasedCompletionItemProvider(this._workerManager, configurationService, this._modelService, this._languageConfigurationService)));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic canComputeUnicodeHighlights(uri: URI): boolean {\n\t\treturn canSyncModel(this._modelService, uri);\n\t}\n\n\tpublic async computedUnicodeHighlights(uri: URI, options: UnicodeHighlighterOptions, range?: IRange): Promise<IUnicodeHighlightsResult> {\n\t\tconst worker = await this._workerWithResources([uri]);\n\t\treturn worker.$computeUnicodeHighlights(uri.toString(), options, range);\n\t}\n\n\tpublic async computeDiff(original: URI, modified: URI, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): Promise<IDocumentDiff | null> {\n\t\tconst worker = await this._workerWithResources([original, modified], /* forceLargeModels */true);\n\t\tconst result = await worker.$computeDiff(original.toString(), modified.toString(), options, algorithm);\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\t\t// Convert from space efficient JSON data to rich objects.\n\t\tconst diff: IDocumentDiff = {\n\t\t\tidentical: result.identical,\n\t\t\tquitEarly: result.quitEarly,\n\t\t\tchanges: toLineRangeMappings(result.changes),\n\t\t\tmoves: result.moves.map(m => new MovedText(\n\t\t\t\tnew LineRangeMapping(new LineRange(m[0], m[1]), new LineRange(m[2], m[3])),\n\t\t\t\ttoLineRangeMappings(m[4])\n\t\t\t))\n\t\t};\n\t\treturn diff;\n\n\t\tfunction toLineRangeMappings(changes: readonly ILineChange[]): readonly DetailedLineRangeMapping[] {\n\t\t\treturn changes.map(\n\t\t\t\t(c) => new DetailedLineRangeMapping(\n\t\t\t\t\tnew LineRange(c[0], c[1]),\n\t\t\t\t\tnew LineRange(c[2], c[3]),\n\t\t\t\t\tc[4]?.map(\n\t\t\t\t\t\t(c) => new RangeMapping(\n\t\t\t\t\t\t\tnew Range(c[0], c[1], c[2], c[3]),\n\t\t\t\t\t\t\tnew Range(c[4], c[5], c[6], c[7])\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic canComputeDirtyDiff(original: URI, modified: URI): boolean {\n\t\treturn (canSyncModel(this._modelService, original) && canSyncModel(this._modelService, modified));\n\t}\n\n\tpublic async computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IChange[] | null> {\n\t\tconst worker = await this._workerWithResources([original, modified]);\n\t\treturn worker.$computeDirtyDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);\n\t}\n\n\tpublic async computeMoreMinimalEdits(resource: URI, edits: languages.TextEdit[] | null | undefined, pretty: boolean = false): Promise<languages.TextEdit[] | undefined> {\n\t\tif (isNonEmptyArray(edits)) {\n\t\t\tif (!canSyncModel(this._modelService, resource)) {\n\t\t\t\treturn Promise.resolve(edits); // File too large\n\t\t\t}\n\t\t\tconst sw = StopWatch.create();\n\t\t\tconst result = this._workerWithResources([resource]).then(worker => worker.$computeMoreMinimalEdits(resource.toString(), edits, pretty));\n\t\t\tresult.finally(() => this._logService.trace('FORMAT#computeMoreMinimalEdits', resource.toString(true), sw.elapsed()));\n\t\t\treturn Promise.race([result, timeout(1000).then(() => edits)]);\n\n\t\t} else {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t}\n\n\tpublic computeHumanReadableDiff(resource: URI, edits: languages.TextEdit[] | null | undefined): Promise<languages.TextEdit[] | undefined> {\n\t\tif (isNonEmptyArray(edits)) {\n\t\t\tif (!canSyncModel(this._modelService, resource)) {\n\t\t\t\treturn Promise.resolve(edits); // File too large\n\t\t\t}\n\t\t\tconst sw = StopWatch.create();\n\t\t\tconst opts: ILinesDiffComputerOptions = { ignoreTrimWhitespace: false, maxComputationTimeMs: 1000, computeMoves: false };\n\t\t\tconst result = (\n\t\t\t\tthis._workerWithResources([resource])\n\t\t\t\t\t.then(worker => worker.$computeHumanReadableDiff(resource.toString(), edits, opts))\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t\t\t// In case of an exception, fall back to computeMoreMinimalEdits\n\t\t\t\t\t\treturn this.computeMoreMinimalEdits(resource, edits, true);\n\t\t\t\t\t})\n\t\t\t);\n\t\t\tresult.finally(() => this._logService.trace('FORMAT#computeHumanReadableDiff', resource.toString(true), sw.elapsed()));\n\t\t\treturn result;\n\n\t\t} else {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t}\n\n\tpublic canNavigateValueSet(resource: URI): boolean {\n\t\treturn (canSyncModel(this._modelService, resource));\n\t}\n\n\tpublic async navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<languages.IInplaceReplaceSupportResult | null> {\n\t\tconst model = this._modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\tconst wordDefRegExp = this._languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n\t\tconst wordDef = wordDefRegExp.source;\n\t\tconst wordDefFlags = wordDefRegExp.flags;\n\t\tconst worker = await this._workerWithResources([resource]);\n\t\treturn worker.$navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n\t}\n\n\tpublic canComputeWordRanges(resource: URI): boolean {\n\t\treturn canSyncModel(this._modelService, resource);\n\t}\n\n\tpublic async computeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> {\n\t\tconst model = this._modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst wordDefRegExp = this._languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n\t\tconst wordDef = wordDefRegExp.source;\n\t\tconst wordDefFlags = wordDefRegExp.flags;\n\t\tconst worker = await this._workerWithResources([resource]);\n\t\treturn worker.$computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n\t}\n\n\tpublic async findSectionHeaders(uri: URI, options: FindSectionHeaderOptions): Promise<SectionHeader[]> {\n\t\tconst worker = await this._workerWithResources([uri]);\n\t\treturn worker.$findSectionHeaders(uri.toString(), options);\n\t}\n\n\tpublic async computeDefaultDocumentColors(uri: URI): Promise<languages.IColorInformation[] | null> {\n\t\tconst worker = await this._workerWithResources([uri]);\n\t\treturn worker.$computeDefaultDocumentColors(uri.toString());\n\t}\n\n\tprivate async _workerWithResources(resources: URI[], forceLargeModels: boolean = false): Promise<Proxied<EditorSimpleWorker>> {\n\t\tconst worker = await this._workerManager.withWorker();\n\t\treturn await worker.workerWithSyncedResources(resources, forceLargeModels);\n\t}\n}\n\nclass WordBasedCompletionItemProvider implements languages.CompletionItemProvider {\n\n\tprivate readonly _workerManager: WorkerManager;\n\tprivate readonly _configurationService: ITextResourceConfigurationService;\n\tprivate readonly _modelService: IModelService;\n\n\treadonly _debugDisplayName = 'wordbasedCompletions';\n\n\tconstructor(\n\t\tworkerManager: WorkerManager,\n\t\tconfigurationService: ITextResourceConfigurationService,\n\t\tmodelService: IModelService,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._workerManager = workerManager;\n\t\tthis._configurationService = configurationService;\n\t\tthis._modelService = modelService;\n\t}\n\n\tasync provideCompletionItems(model: ITextModel, position: Position): Promise<languages.CompletionList | undefined> {\n\t\ttype WordBasedSuggestionsConfig = {\n\t\t\twordBasedSuggestions?: 'off' | 'currentDocument' | 'matchingDocuments' | 'allDocuments';\n\t\t};\n\t\tconst config = this._configurationService.getValue<WordBasedSuggestionsConfig>(model.uri, position, 'editor');\n\t\tif (config.wordBasedSuggestions === 'off') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst models: URI[] = [];\n\t\tif (config.wordBasedSuggestions === 'currentDocument') {\n\t\t\t// only current file and only if not too large\n\t\t\tif (canSyncModel(this._modelService, model.uri)) {\n\t\t\t\tmodels.push(model.uri);\n\t\t\t}\n\t\t} else {\n\t\t\t// either all files or files of same language\n\t\t\tfor (const candidate of this._modelService.getModels()) {\n\t\t\t\tif (!canSyncModel(this._modelService, candidate.uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (candidate === model) {\n\t\t\t\t\tmodels.unshift(candidate.uri);\n\n\t\t\t\t} else if (config.wordBasedSuggestions === 'allDocuments' || candidate.getLanguageId() === model.getLanguageId()) {\n\t\t\t\t\tmodels.push(candidate.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (models.length === 0) {\n\t\t\treturn undefined; // File too large, no other files\n\t\t}\n\n\t\tconst wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n\t\tconst word = model.getWordAtPosition(position);\n\t\tconst replace = !word ? Range.fromPositions(position) : new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n\t\tconst insert = replace.setEndPosition(position.lineNumber, position.column);\n\n\t\tconst client = await this._workerManager.withWorker();\n\t\tconst data = await client.textualSuggest(models, word?.word, wordDefRegExp);\n\t\tif (!data) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tduration: data.duration,\n\t\t\tsuggestions: data.words.map((word): languages.CompletionItem => {\n\t\t\t\treturn {\n\t\t\t\t\tkind: languages.CompletionItemKind.Text,\n\t\t\t\t\tlabel: word,\n\t\t\t\t\tinsertText: word,\n\t\t\t\t\trange: { insert, replace }\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n}\n\nclass WorkerManager extends Disposable {\n\n\tprivate readonly _modelService: IModelService;\n\tprivate _editorWorkerClient: EditorWorkerClient | null;\n\tprivate _lastWorkerUsedTime: number;\n\n\tconstructor(\n\t\tprivate readonly _workerDescriptor: IWorkerDescriptor,\n\t\t@IModelService modelService: IModelService\n\t) {\n\t\tsuper();\n\t\tthis._modelService = modelService;\n\t\tthis._editorWorkerClient = null;\n\t\tthis._lastWorkerUsedTime = (new Date()).getTime();\n\n\t\tconst stopWorkerInterval = this._register(new WindowIntervalTimer());\n\t\tstopWorkerInterval.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(STOP_WORKER_DELTA_TIME_MS / 2), mainWindow);\n\n\t\tthis._register(this._modelService.onModelRemoved(_ => this._checkStopEmptyWorker()));\n\t}\n\n\tpublic override dispose(): void {\n\t\tif (this._editorWorkerClient) {\n\t\t\tthis._editorWorkerClient.dispose();\n\t\t\tthis._editorWorkerClient = null;\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\t/**\n\t * Check if the model service has no more models and stop the worker if that is the case.\n\t */\n\tprivate _checkStopEmptyWorker(): void {\n\t\tif (!this._editorWorkerClient) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst models = this._modelService.getModels();\n\t\tif (models.length === 0) {\n\t\t\t// There are no more models => nothing possible for me to do\n\t\t\tthis._editorWorkerClient.dispose();\n\t\t\tthis._editorWorkerClient = null;\n\t\t}\n\t}\n\n\t/**\n\t * Check if the worker has been idle for a while and then stop it.\n\t */\n\tprivate _checkStopIdleWorker(): void {\n\t\tif (!this._editorWorkerClient) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst timeSinceLastWorkerUsedTime = (new Date()).getTime() - this._lastWorkerUsedTime;\n\t\tif (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n\t\t\tthis._editorWorkerClient.dispose();\n\t\t\tthis._editorWorkerClient = null;\n\t\t}\n\t}\n\n\tpublic withWorker(): Promise<EditorWorkerClient> {\n\t\tthis._lastWorkerUsedTime = (new Date()).getTime();\n\t\tif (!this._editorWorkerClient) {\n\t\t\tthis._editorWorkerClient = new EditorWorkerClient(this._workerDescriptor, false, this._modelService);\n\t\t}\n\t\treturn Promise.resolve(this._editorWorkerClient);\n\t}\n}\n\nclass SynchronousWorkerClient<T extends IDisposable> implements IWorkerClient<T> {\n\tprivate readonly _instance: T;\n\tpublic readonly proxy: Proxied<T>;\n\n\tconstructor(instance: T) {\n\t\tthis._instance = instance;\n\t\tthis.proxy = this._instance as Proxied<T>;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._instance.dispose();\n\t}\n\n\tpublic setChannel<T extends object>(channel: string, handler: T): void {\n\t\tthrow new Error(`Not supported`);\n\t}\n\n\tpublic getChannel<T extends object>(channel: string): Proxied<T> {\n\t\tthrow new Error(`Not supported`);\n\t}\n}\n\nexport interface IEditorWorkerClient {\n\tfhr(method: string, args: any[]): Promise<any>;\n}\n\nexport class EditorWorkerClient extends Disposable implements IEditorWorkerClient {\n\n\tprivate readonly _modelService: IModelService;\n\tprivate readonly _keepIdleModels: boolean;\n\tprivate _worker: IWorkerClient<EditorSimpleWorker> | null;\n\tprivate _modelManager: WorkerTextModelSyncClient | null;\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _workerDescriptor: IWorkerDescriptor,\n\t\tkeepIdleModels: boolean,\n\t\t@IModelService modelService: IModelService,\n\t) {\n\t\tsuper();\n\t\tthis._modelService = modelService;\n\t\tthis._keepIdleModels = keepIdleModels;\n\t\tthis._worker = null;\n\t\tthis._modelManager = null;\n\t}\n\n\t// foreign host request\n\tpublic fhr(method: string, args: any[]): Promise<any> {\n\t\tthrow new Error(`Not implemented!`);\n\t}\n\n\tprivate _getOrCreateWorker(): IWorkerClient<EditorSimpleWorker> {\n\t\tif (!this._worker) {\n\t\t\ttry {\n\t\t\t\tthis._worker = this._register(createWebWorker<EditorSimpleWorker>(this._workerDescriptor));\n\t\t\t\tEditorWorkerHost.setChannel(this._worker, this._createEditorWorkerHost());\n\t\t\t} catch (err) {\n\t\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\t\tthis._worker = this._createFallbackLocalWorker();\n\t\t\t}\n\t\t}\n\t\treturn this._worker;\n\t}\n\n\tprotected async _getProxy(): Promise<Proxied<EditorSimpleWorker>> {\n\t\ttry {\n\t\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\t\tawait proxy.$ping();\n\t\t\treturn proxy;\n\t\t} catch (err) {\n\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\tthis._worker = this._createFallbackLocalWorker();\n\t\t\treturn this._worker.proxy;\n\t\t}\n\t}\n\n\tprivate _createFallbackLocalWorker(): SynchronousWorkerClient<EditorSimpleWorker> {\n\t\treturn new SynchronousWorkerClient(new EditorSimpleWorker(this._createEditorWorkerHost(), null));\n\t}\n\n\tprivate _createEditorWorkerHost(): EditorWorkerHost {\n\t\treturn {\n\t\t\t$fhr: (method, args) => this.fhr(method, args)\n\t\t};\n\t}\n\n\tprivate _getOrCreateModelManager(proxy: Proxied<EditorSimpleWorker>): WorkerTextModelSyncClient {\n\t\tif (!this._modelManager) {\n\t\t\tthis._modelManager = this._register(new WorkerTextModelSyncClient(proxy, this._modelService, this._keepIdleModels));\n\t\t}\n\t\treturn this._modelManager;\n\t}\n\n\tpublic async workerWithSyncedResources(resources: URI[], forceLargeModels: boolean = false): Promise<Proxied<EditorSimpleWorker>> {\n\t\tif (this._disposed) {\n\t\t\treturn Promise.reject(canceled());\n\t\t}\n\t\tconst proxy = await this._getProxy();\n\t\tthis._getOrCreateModelManager(proxy).ensureSyncedResources(resources, forceLargeModels);\n\t\treturn proxy;\n\t}\n\n\tpublic async textualSuggest(resources: URI[], leadingWord: string | undefined, wordDefRegExp: RegExp): Promise<{ words: string[]; duration: number } | null> {\n\t\tconst proxy = await this.workerWithSyncedResources(resources);\n\t\tconst wordDef = wordDefRegExp.source;\n\t\tconst wordDefFlags = wordDefRegExp.flags;\n\t\treturn proxy.$textualSuggest(resources.map(r => r.toString()), leadingWord, wordDef, wordDefFlags);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._disposed = true;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["c", "word"]
}
