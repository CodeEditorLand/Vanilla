{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/services/openerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../base/browser/window.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../base/common/linkedList.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport { parse } from \"../../../base/common/marshalling.js\";\nimport {\n\tSchemas,\n\tmatchesScheme,\n\tmatchesSomeScheme,\n} from \"../../../base/common/network.js\";\nimport { normalizePath } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { ICommandService } from \"../../../platform/commands/common/commands.js\";\nimport { EditorOpenSource } from \"../../../platform/editor/common/editor.js\";\nimport {\n\ttype IExternalOpener,\n\ttype IExternalUriResolver,\n\ttype IOpener,\n\ttype IOpenerService,\n\ttype IResolvedExternalUri,\n\ttype IValidator,\n\ttype OpenOptions,\n\ttype ResolveExternalUriOptions,\n\textractSelection,\n} from \"../../../platform/opener/common/opener.js\";\nimport { ICodeEditorService } from \"./codeEditorService.js\";\n\nclass CommandOpener implements IOpener {\n\tconstructor(@ICommandService private readonly _commandService: ICommandService) { }\n\n\tasync open(target: URI | string, options?: OpenOptions): Promise<boolean> {\n\t\tif (!matchesScheme(target, Schemas.command)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!options?.allowCommands) {\n\t\t\t// silently ignore commands when command-links are disabled, also\n\t\t\t// suppress other openers by returning TRUE\n\t\t\treturn true;\n\t\t}\n\n\t\tif (typeof target === \"string\") {\n\t\t\ttarget = URI.parse(target);\n\t\t}\n\n\t\tif (Array.isArray(options.allowCommands)) {\n\t\t\t// Only allow specific commands\n\t\t\tif (!options.allowCommands.includes(target.path)) {\n\t\t\t\t// Suppress other openers by returning TRUE\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// execute as command\n\t\tlet args: any = [];\n\t\ttry {\n\t\t\targs = parse(decodeURIComponent(target.query));\n\t\t} catch {\n\t\t\t// ignore and retry\n\t\t\ttry {\n\t\t\t\targs = parse(target.query);\n\t\t\t} catch {\n\t\t\t\t// ignore error\n\t\t\t}\n\t\t}\n\t\tif (!Array.isArray(args)) {\n\t\t\targs = [args];\n\t\t}\n\t\tawait this._commandService.executeCommand(target.path, ...args);\n\t\treturn true;\n\t}\n}\n\nclass EditorOpener implements IOpener {\n\tconstructor(@ICodeEditorService private readonly _editorService: ICodeEditorService) { }\n\n\tasync open(target: URI | string, options: OpenOptions) {\n\t\tif (typeof target === \"string\") {\n\t\t\ttarget = URI.parse(target);\n\t\t}\n\t\tconst { selection, uri } = extractSelection(target);\n\t\ttarget = uri;\n\n\t\tif (target.scheme === Schemas.file) {\n\t\t\ttarget = normalizePath(target); // workaround for non-normalized paths (https://github.com/microsoft/vscode/issues/12954)\n\t\t}\n\n\t\tawait this._editorService.openCodeEditor(\n\t\t\t{\n\t\t\t\tresource: target,\n\t\t\t\toptions: {\n\t\t\t\t\tselection,\n\t\t\t\t\tsource: options?.fromUserGesture\n\t\t\t\t\t\t? EditorOpenSource.USER\n\t\t\t\t\t\t: EditorOpenSource.API,\n\t\t\t\t\t...options?.editorOptions,\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis._editorService.getFocusedCodeEditor(),\n\t\t\toptions?.openToSide,\n\t\t);\n\n\t\treturn true;\n\t}\n}\n\nexport class OpenerService implements IOpenerService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _openers = new LinkedList<IOpener>();\n\tprivate readonly _validators = new LinkedList<IValidator>();\n\tprivate readonly _resolvers = new LinkedList<IExternalUriResolver>();\n\tprivate readonly _resolvedUriTargets = new ResourceMap<URI>((uri) =>\n\t\turi.with({ path: null, fragment: null, query: null }).toString(),\n\t);\n\n\tprivate _defaultExternalOpener: IExternalOpener;\n\tprivate readonly _externalOpeners = new LinkedList<IExternalOpener>();\n\n\tconstructor(\n\t\t@ICodeEditorService editorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService,\n\t) {\n\t\t// Default external opener is going through window.open()\n\t\tthis._defaultExternalOpener = {\n\t\t\topenExternal: async (href) => {\n\t\t\t\t// ensure to open HTTP/HTTPS links into new windows\n\t\t\t\t// to not trigger a navigation. Any other link is\n\t\t\t\t// safe to be set as HREF to prevent a blank window\n\t\t\t\t// from opening.\n\t\t\t\tif (matchesSomeScheme(href, Schemas.http, Schemas.https)) {\n\t\t\t\t\tdom.windowOpenNoOpener(href);\n\t\t\t\t} else {\n\t\t\t\t\tmainWindow.location.href = href;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t};\n\n\t\t// Default opener: any external, maito, http(s), command, and catch-all-editors\n\t\tthis._openers.push({\n\t\t\topen: async (target: URI | string, options?: OpenOptions) => {\n\t\t\t\tif (\n\t\t\t\t\toptions?.openExternal ||\n\t\t\t\t\tmatchesSomeScheme(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tSchemas.mailto,\n\t\t\t\t\t\tSchemas.http,\n\t\t\t\t\t\tSchemas.https,\n\t\t\t\t\t\tSchemas.vsls,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// open externally\n\t\t\t\t\tawait this._doOpenExternal(target, options);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t});\n\t\tthis._openers.push(new CommandOpener(commandService));\n\t\tthis._openers.push(new EditorOpener(editorService));\n\t}\n\n\tregisterOpener(opener: IOpener): IDisposable {\n\t\tconst remove = this._openers.unshift(opener);\n\t\treturn { dispose: remove };\n\t}\n\n\tregisterValidator(validator: IValidator): IDisposable {\n\t\tconst remove = this._validators.push(validator);\n\t\treturn { dispose: remove };\n\t}\n\n\tregisterExternalUriResolver(resolver: IExternalUriResolver): IDisposable {\n\t\tconst remove = this._resolvers.push(resolver);\n\t\treturn { dispose: remove };\n\t}\n\n\tsetDefaultExternalOpener(externalOpener: IExternalOpener): void {\n\t\tthis._defaultExternalOpener = externalOpener;\n\t}\n\n\tregisterExternalOpener(opener: IExternalOpener): IDisposable {\n\t\tconst remove = this._externalOpeners.push(opener);\n\t\treturn { dispose: remove };\n\t}\n\n\tasync open(target: URI | string, options?: OpenOptions): Promise<boolean> {\n\t\t// check with contributed validators\n\t\tconst targetURI =\n\t\t\ttypeof target === \"string\" ? URI.parse(target) : target;\n\t\t// validate against the original URI that this URI resolves to, if one exists\n\t\tconst validationTarget =\n\t\t\tthis._resolvedUriTargets.get(targetURI) ?? target;\n\t\tfor (const validator of this._validators) {\n\t\t\tif (!(await validator.shouldOpen(validationTarget, options))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// check with contributed openers\n\t\tfor (const opener of this._openers) {\n\t\t\tconst handled = await opener.open(target, options);\n\t\t\tif (handled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync resolveExternalUri(\n\t\tresource: URI,\n\t\toptions?: ResolveExternalUriOptions,\n\t): Promise<IResolvedExternalUri> {\n\t\tfor (const resolver of this._resolvers) {\n\t\t\ttry {\n\t\t\t\tconst result = await resolver.resolveExternalUri(\n\t\t\t\t\tresource,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!this._resolvedUriTargets.has(result.resolved)) {\n\t\t\t\t\t\tthis._resolvedUriTargets.set(result.resolved, resource);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// noop\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t\"Could not resolve external URI: \" + resource.toString(),\n\t\t);\n\t}\n\n\tprivate async _doOpenExternal(\n\t\tresource: URI | string,\n\t\toptions: OpenOptions | undefined,\n\t): Promise<boolean> {\n\t\t//todo@jrieken IExternalUriResolver should support `uri: URI | string`\n\t\tconst uri =\n\t\t\ttypeof resource === \"string\" ? URI.parse(resource) : resource;\n\t\tlet externalUri: URI;\n\n\t\ttry {\n\t\t\texternalUri = (await this.resolveExternalUri(uri, options))\n\t\t\t\t.resolved;\n\t\t} catch {\n\t\t\texternalUri = uri;\n\t\t}\n\n\t\tlet href: string;\n\t\tif (\n\t\t\ttypeof resource === \"string\" &&\n\t\t\turi.toString() === externalUri.toString()\n\t\t) {\n\t\t\t// open the url-string AS IS\n\t\t\thref = resource;\n\t\t} else {\n\t\t\t// open URI using the toString(noEncode)+encodeURI-trick\n\t\t\thref = encodeURI(externalUri.toString(true));\n\t\t}\n\n\t\tif (options?.allowContributedOpeners) {\n\t\t\tconst preferredOpenerId =\n\t\t\t\ttypeof options?.allowContributedOpeners === \"string\"\n\t\t\t\t\t? options?.allowContributedOpeners\n\t\t\t\t\t: undefined;\n\t\t\tfor (const opener of this._externalOpeners) {\n\t\t\t\tconst didOpen = await opener.openExternal(\n\t\t\t\t\thref,\n\t\t\t\t\t{\n\t\t\t\t\t\tsourceUri: uri,\n\t\t\t\t\t\tpreferredOpenerId,\n\t\t\t\t\t},\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t\tif (didOpen) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._defaultExternalOpener.openExternal(\n\t\t\thref,\n\t\t\t{ sourceUri: uri },\n\t\t\tCancellationToken.None,\n\t\t);\n\t}\n\n\tdispose() {\n\t\tthis._validators.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
