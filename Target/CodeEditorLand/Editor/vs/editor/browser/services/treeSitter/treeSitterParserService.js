var T=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var c=(a,i,e,t)=>{for(var r=t>1?void 0:t?P(i,e):i,s=a.length-1,n;s>=0;s--)(n=a[s])&&(r=(t?n(i,e,r):n(r))||r);return t&&r&&T(i,e,r),r},d=(a,i)=>(e,t)=>i(e,t,a);import{FileAccess as h,nodeModulesAsarUnpackedPath as y,nodeModulesPath as L}from"../../../../base/common/network.js";import{EDITOR_EXPERIMENTAL_PREFER_TREESITTER as m}from"../../../common/services/treeSitterParserService.js";import{IModelService as I}from"../../../common/services/model.js";import{Disposable as u,DisposableMap as C,DisposableStore as _,dispose as v}from"../../../../base/common/lifecycle.js";import"../../../common/model.js";import{IFileService as w}from"../../../../platform/files/common/files.js";import"../../../common/textModelEvents.js";import{ITelemetryService as M}from"../../../../platform/telemetry/common/telemetry.js";import{ILogService as D}from"../../../../platform/log/common/log.js";import{IConfigurationService as b}from"../../../../platform/configuration/common/configuration.js";import{setTimeout0 as E}from"../../../../base/common/platform.js";import{importAMDNodeModule as R}from"../../../../amdX.js";import{Emitter as p,Event as x}from"../../../../base/common/event.js";import{cancelOnDispose as A}from"../../../../base/common/cancellation.js";import{IEnvironmentService as F}from"../../../../platform/environment/common/environment.js";import{canASAR as O}from"../../../../base/common/amd.js";import{CancellationError as k,isCancellationError as U}from"../../../../base/common/errors.js";import{PromiseResult as f}from"../../../../base/common/observable.js";import{Range as N}from"../../../common/core/range.js";const $="editor.experimental.treeSitterTelemetry",K="@vscode/tree-sitter-wasm/wasm",B="tree-sitter.wasm";function S(a){return`${O&&a.isBuilt?y:L}/${K}`}class G extends u{constructor(e,t,r,s,n){super();this.model=e;this._treeSitterLanguages=t;this._treeSitterImporter=r;this._logService=s;this._telemetryService=n;this._register(x.runAndSubscribe(this.model.onDidChangeLanguage,o=>this._onDidChangeLanguage(o?o.newLanguage:this.model.getLanguageId())))}_onDidChangeParseResult=this._register(new p);onDidChangeParseResult=this._onDidChangeParseResult.event;_parseResult;get parseResult(){return this._parseResult}_languageSessionDisposables=this._register(new _);async _onDidChangeLanguage(e){this._languageSessionDisposables.clear(),this._parseResult=void 0;const t=A(this._languageSessionDisposables);let r;try{r=await this._getLanguage(e,t)}catch(o){if(U(o))return;throw o}const s=await this._treeSitterImporter.getParserClass();if(t.isCancellationRequested)return;const n=this._languageSessionDisposables.add(new Q(new s,r,this._logService,this._telemetryService));this._languageSessionDisposables.add(this.model.onDidChangeContent(o=>this._onDidChangeContent(n,o.changes))),await this._onDidChangeContent(n,[]),!t.isCancellationRequested&&(this._parseResult=n)}_getLanguage(e,t){const r=this._treeSitterLanguages.getOrInitLanguage(e);if(r)return Promise.resolve(r);const s=[];return new Promise((n,o)=>{s.push(this._treeSitterLanguages.onDidAddLanguage(g=>{g.id===e&&(v(s),n(g.language))})),t.onCancellationRequested(()=>{v(s),o(new k)},void 0,s)})}async _onDidChangeContent(e,t){const r=await e.onDidChangeContent(this.model,t);if(!r||r.length>0){const s=r?r.map(n=>new N(n.startPosition.row+1,n.startPosition.column+1,n.endPosition.row+1,n.endPosition.column+1)):[this.model.getFullModelRange()];this._onDidChangeParseResult.fire(s)}}}var q=(e=>(e.Full="fullParse",e.Incremental="incrementalParse",e))(q||{});class Q{constructor(i,e,t,r){this.parser=i;this.language=e;this._logService=t;this._telemetryService=r;this.parser.setTimeoutMicros(50*1e3),this.parser.setLanguage(e)}_tree;_isDisposed=!1;dispose(){this._isDisposed=!0,this._tree?.delete(),this.parser?.delete()}get tree(){return this._tree}set tree(i){this._tree?.delete(),this._tree=i}get isDisposed(){return this._isDisposed}_onDidChangeContentQueue=Promise.resolve();async onDidChangeContent(i,e){const t=this.tree?.copy();return this._applyEdits(i,e),new Promise(r=>{this._onDidChangeContentQueue=this._onDidChangeContentQueue.then(async()=>{this.isDisposed||(await this._parseAndUpdateTree(i),r(this.tree&&t?t.getChangedRanges(this.tree):void 0))}).catch(s=>{this._logService.error("Error parsing tree-sitter tree",s)})})}_newEdits=!0;_applyEdits(i,e){for(const t of e){const r=t.rangeOffset+t.text.length,s=i.getPositionAt(r);this.tree?.edit({startIndex:t.rangeOffset,oldEndIndex:t.rangeOffset+t.rangeLength,newEndIndex:t.rangeOffset+t.text.length,startPosition:{row:t.range.startLineNumber-1,column:t.range.startColumn-1},oldEndPosition:{row:t.range.endLineNumber-1,column:t.range.endColumn-1},newEndPosition:{row:s.lineNumber-1,column:s.column-1}}),this._newEdits=!0}}async _parseAndUpdateTree(i){const e=await this._parse(i);this._newEdits||(this.tree=e)}_parse(i){let e="fullParse";return this.tree&&(e="incrementalParse"),this._parseAndYield(i,e)}async _parseAndYield(i,e){const t=i.getLanguageId();let r,s=0,n=0;this._newEdits=!1;do{const o=performance.now();try{r=this.parser.parse((g,H)=>this._parseCallback(i,g),this.tree)}catch{}finally{s+=performance.now()-o,n++}if(await new Promise(g=>E(g)),i.isDisposed()||this.isDisposed)return}while(!r&&!this._newEdits);return this.sendParseTimeTelemetry(e,t,s,n),r}_parseCallback(i,e){try{return i.getTextBuffer().getNearestChunk(e)}catch(t){this._logService.debug("Error getting chunk for tree-sitter parsing",t)}return null}sendParseTimeTelemetry(i,e,t,r){this._logService.debug(`Tree parsing (${i}) took ${t} ms and ${r} passes.`),i==="fullParse"?this._telemetryService.publicLog2("treeSitter.fullParse",{languageId:e,time:t,passes:r}):this._telemetryService.publicLog2("treeSitter.incrementalParse",{languageId:e,time:t,passes:r})}}class W extends u{constructor(e,t,r,s){super();this._treeSitterImporter=e;this._fileService=t;this._environmentService=r;this._registeredLanguages=s}_languages=new j;_onDidAddLanguage=this._register(new p);onDidAddLanguage=this._onDidAddLanguage.event;getOrInitLanguage(e){if(this._languages.isCached(e))return this._languages.getSyncIfCached(e);this._addLanguage(e)}async getLanguage(e){return this._languages.isCached(e)?this._languages.getSyncIfCached(e):(await this._addLanguage(e),this._languages.get(e))}async _addLanguage(e){if(!this._languages.get(e)){this._languages.set(e,this._fetchLanguage(e));const r=await this._languages.get(e);if(!r)return;this._onDidAddLanguage.fire({id:e,language:r})}}async _fetchLanguage(e){const t=this._registeredLanguages.get(e),r=this._getLanguageLocation(e);if(!t||!r)return;const s=`${r}/${t}.wasm`,n=await this._fileService.readFile(h.asFileUri(s));return(await this._treeSitterImporter.getParserClass()).Language.load(n.value.buffer)}_getLanguageLocation(e){if(this._registeredLanguages.get(e))return S(this._environmentService)}}class Y{_treeSitterImport;async _getTreeSitterImport(){return this._treeSitterImport||(this._treeSitterImport=await R("@vscode/tree-sitter-wasm","wasm/tree-sitter.js")),this._treeSitterImport}_parserClass;async getParserClass(){return this._parserClass||(this._parserClass=(await this._getTreeSitterImport()).Parser),this._parserClass}}let l=class extends u{constructor(e,t,r,s,n,o){super();this._modelService=e;this._telemetryService=r;this._logService=s;this._configurationService=n;this._environmentService=o;this._treeSitterLanguages=this._register(new W(this._treeSitterImporter,t,this._environmentService,this._registeredLanguages)),this.onDidAddLanguage=this._treeSitterLanguages.onDidAddLanguage,this._register(this._configurationService.onDidChangeConfiguration(g=>{g.affectsConfiguration(m)&&this._supportedLanguagesChanged()})),this._supportedLanguagesChanged()}_serviceBrand;_init;_textModelTreeSitters=this._register(new C);_registeredLanguages=new Map;_treeSitterImporter=new Y;_treeSitterLanguages;onDidAddLanguage;_onDidUpdateTree=this._register(new p);onDidUpdateTree=this._onDidUpdateTree.event;getOrInitLanguage(e){return this._treeSitterLanguages.getOrInitLanguage(e)}getParseResult(e){return this._textModelTreeSitters.get(e)?.textModelTreeSitter.parseResult}async getTree(e,t){await this._init;const r=await this._treeSitterLanguages.getLanguage(t),s=await this._treeSitterImporter.getParserClass();if(r){const n=new s;return n.setLanguage(r),n.parse(e)}}async _doInitParser(){const e=await this._treeSitterImporter.getParserClass(),t=this._environmentService;return await e.init({locateFile(r,s){return h.asBrowserUri(`${S(t)}/${B}`).toString(!0)}}),!0}_hasInit=!1;async _initParser(e){return this._hasInit?this._init:(e?(this._hasInit=!0,this._init=this._doInitParser(),this._init.then(()=>this._registerModelServiceListeners())):this._init=Promise.resolve(!1),this._init)}async _supportedLanguagesChanged(){const e=this._getSetting();let t=!0;return e.length===0&&(t=!1),e.includes("typescript")?this._addGrammar("typescript","tree-sitter-typescript"):this._removeGrammar("typescript"),this._initParser(t)}_getSetting(){const e=this._configurationService.getValue(m);return e&&e.length>0?e:this._configurationService.getValue($)?["typescript"]:[]}async _registerModelServiceListeners(){this._register(this._modelService.onModelAdded(e=>{this._createTextModelTreeSitter(e)})),this._register(this._modelService.onModelRemoved(e=>{this._textModelTreeSitters.deleteAndDispose(e)})),this._modelService.getModels().forEach(e=>this._createTextModelTreeSitter(e))}_createTextModelTreeSitter(e){const t=new G(e,this._treeSitterLanguages,this._treeSitterImporter,this._logService,this._telemetryService),r=new _;r.add(t),r.add(t.onDidChangeParseResult(s=>this._onDidUpdateTree.fire({textModel:e,ranges:s}))),this._textModelTreeSitters.set(e,{textModelTreeSitter:t,disposables:r,dispose:r.dispose.bind(r)})}_addGrammar(e,t){this._registeredLanguages.has(e)||this._registeredLanguages.set(e,t)}_removeGrammar(e){this._registeredLanguages.has(e)&&this._registeredLanguages.delete("typescript")}};l=c([d(0,I),d(1,w),d(2,M),d(3,D),d(4,b),d(5,F)],l);class V{constructor(i){this.promise=i;i.then(e=>{this._result=new f(e,void 0)}).catch(e=>{this._result=new f(void 0,e)})}_result;get result(){return this._result}}class j{_values=new Map;set(i,e){this._values.set(i,new V(e))}get(i){return this._values.get(i)?.promise}getSyncIfCached(i){return this._values.get(i)?.result?.data}isCached(i){return this._values.get(i)?.result!==void 0}}export{G as TextModelTreeSitter,Y as TreeSitterImporter,W as TreeSitterLanguages,Q as TreeSitterParseResult,l as TreeSitterTextModelService};
