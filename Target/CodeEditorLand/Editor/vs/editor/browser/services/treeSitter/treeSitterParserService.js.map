{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/services/treeSitter/treeSitterParserService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Parser } from '@vscode/tree-sitter-wasm';\nimport { AppResourcePath, FileAccess, nodeModulesAsarUnpackedPath, nodeModulesPath } from '../../../../base/common/network.js';\nimport { EDITOR_EXPERIMENTAL_PREFER_TREESITTER, ITreeSitterParserService, ITreeSitterParseResult } from '../../../common/services/treeSitterParserService.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { Disposable, DisposableMap, DisposableStore, dispose, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IModelContentChange } from '../../../common/textModelEvents.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { setTimeout0 } from '../../../../base/common/platform.js';\nimport { importAMDNodeModule } from '../../../../amdX.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { CancellationToken, cancelOnDispose } from '../../../../base/common/cancellation.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { canASAR } from '../../../../base/common/amd.js';\nimport { CancellationError, isCancellationError } from '../../../../base/common/errors.js';\nimport { PromiseResult } from '../../../../base/common/observable.js';\n\nconst EDITOR_TREESITTER_TELEMETRY = 'editor.experimental.treeSitterTelemetry';\nconst MODULE_LOCATION_SUBPATH = `@vscode/tree-sitter-wasm/wasm`;\nconst FILENAME_TREESITTER_WASM = `tree-sitter.wasm`;\n\nfunction getModuleLocation(environmentService: IEnvironmentService): AppResourcePath {\n\treturn `${(canASAR && environmentService.isBuilt) ? nodeModulesAsarUnpackedPath : nodeModulesPath}/${MODULE_LOCATION_SUBPATH}`;\n}\n\nexport class TextModelTreeSitter extends Disposable {\n\tprivate _parseResult: TreeSitterParseResult | undefined;\n\n\tget parseResult(): ITreeSitterParseResult | undefined { return this._parseResult; }\n\n\tconstructor(readonly model: ITextModel,\n\t\tprivate readonly _treeSitterLanguages: TreeSitterLanguages,\n\t\tprivate readonly _treeSitterImporter: TreeSitterImporter,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\t\tthis._register(Event.runAndSubscribe(this.model.onDidChangeLanguage, (e => this._onDidChangeLanguage(e ? e.newLanguage : this.model.getLanguageId()))));\n\t}\n\n\tprivate readonly _languageSessionDisposables = this._register(new DisposableStore());\n\t/**\n\t * Be very careful when making changes to this method as it is easy to introduce race conditions.\n\t */\n\tprivate async _onDidChangeLanguage(languageId: string) {\n\t\tthis._languageSessionDisposables.clear();\n\t\tthis._parseResult = undefined;\n\n\t\tconst token = cancelOnDispose(this._languageSessionDisposables);\n\t\tlet language: Parser.Language | undefined;\n\t\ttry {\n\t\t\tlanguage = await this._getLanguage(languageId, token);\n\t\t} catch (e) {\n\t\t\tif (isCancellationError(e)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst Parser = await this._treeSitterImporter.getParserClass();\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst treeSitterTree = this._languageSessionDisposables.add(new TreeSitterParseResult(new Parser(), language, this._logService, this._telemetryService));\n\t\tthis._languageSessionDisposables.add(this.model.onDidChangeContent(e => this._onDidChangeContent(treeSitterTree, e.changes)));\n\t\tawait this._onDidChangeContent(treeSitterTree, []);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._parseResult = treeSitterTree;\n\t}\n\n\tprivate _getLanguage(languageId: string, token: CancellationToken): Promise<Parser.Language> {\n\t\tconst language = this._treeSitterLanguages.getOrInitLanguage(languageId);\n\t\tif (language) {\n\t\t\treturn Promise.resolve(language);\n\t\t}\n\t\tconst disposables: IDisposable[] = [];\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdisposables.push(this._treeSitterLanguages.onDidAddLanguage(e => {\n\t\t\t\tif (e.id === languageId) {\n\t\t\t\t\tdispose(disposables);\n\t\t\t\t\tresolve(e.language);\n\t\t\t\t}\n\t\t\t}));\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\tdispose(disposables);\n\t\t\t\treject(new CancellationError());\n\t\t\t}, undefined, disposables);\n\t\t});\n\t}\n\n\tprivate async _onDidChangeContent(treeSitterTree: TreeSitterParseResult, changes: IModelContentChange[]) {\n\t\treturn treeSitterTree.onDidChangeContent(this.model, changes);\n\t}\n}\n\nconst enum TelemetryParseType {\n\tFull = 'fullParse',\n\tIncremental = 'incrementalParse'\n}\n\nexport class TreeSitterParseResult implements IDisposable, ITreeSitterParseResult {\n\tprivate _tree: Parser.Tree | undefined;\n\tprivate _isDisposed: boolean = false;\n\tconstructor(public readonly parser: Parser,\n\t\tpublic /** exposed for tests **/ readonly language: Parser.Language,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _telemetryService: ITelemetryService) {\n\t\tthis.parser.setTimeoutMicros(50 * 1000); // 50 ms\n\t\tthis.parser.setLanguage(language);\n\t}\n\tdispose(): void {\n\t\tthis._isDisposed = true;\n\t\tthis._tree?.delete();\n\t\tthis.parser?.delete();\n\t}\n\tget tree() { return this._tree; }\n\tprivate set tree(newTree: Parser.Tree | undefined) {\n\t\tthis._tree?.delete();\n\t\tthis._tree = newTree;\n\t}\n\tget isDisposed() { return this._isDisposed; }\n\n\tprivate _onDidChangeContentQueue: Promise<void> = Promise.resolve();\n\tpublic async onDidChangeContent(model: ITextModel, changes: IModelContentChange[]) {\n\t\tthis._applyEdits(model, changes);\n\t\tthis._onDidChangeContentQueue = this._onDidChangeContentQueue.then(() => {\n\t\t\tif (this.isDisposed) {\n\t\t\t\t// No need to continue the queue if we are disposed\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this._parseAndUpdateTree(model);\n\t\t}).catch((e) => {\n\t\t\tthis._logService.error('Error parsing tree-sitter tree', e);\n\t\t});\n\t\treturn this._onDidChangeContentQueue;\n\t}\n\n\tprivate _newEdits = true;\n\tprivate _applyEdits(model: ITextModel, changes: IModelContentChange[]) {\n\t\tfor (const change of changes) {\n\t\t\tconst newEndOffset = change.rangeOffset + change.text.length;\n\t\t\tconst newEndPosition = model.getPositionAt(newEndOffset);\n\n\t\t\tthis.tree?.edit({\n\t\t\t\tstartIndex: change.rangeOffset,\n\t\t\t\toldEndIndex: change.rangeOffset + change.rangeLength,\n\t\t\t\tnewEndIndex: change.rangeOffset + change.text.length,\n\t\t\t\tstartPosition: { row: change.range.startLineNumber - 1, column: change.range.startColumn - 1 },\n\t\t\t\toldEndPosition: { row: change.range.endLineNumber - 1, column: change.range.endColumn - 1 },\n\t\t\t\tnewEndPosition: { row: newEndPosition.lineNumber - 1, column: newEndPosition.column - 1 }\n\t\t\t});\n\t\t\tthis._newEdits = true;\n\t\t}\n\t}\n\n\tprivate async _parseAndUpdateTree(model: ITextModel) {\n\t\tconst tree = await this._parse(model);\n\t\tif (!this._newEdits) {\n\t\t\tthis.tree = tree;\n\t\t}\n\t}\n\n\tprivate _parse(model: ITextModel): Promise<Parser.Tree | undefined> {\n\t\tlet parseType: TelemetryParseType = TelemetryParseType.Full;\n\t\tif (this.tree) {\n\t\t\tparseType = TelemetryParseType.Incremental;\n\t\t}\n\t\treturn this._parseAndYield(model, parseType);\n\t}\n\n\tprivate async _parseAndYield(model: ITextModel, parseType: TelemetryParseType): Promise<Parser.Tree | undefined> {\n\t\tconst language = model.getLanguageId();\n\t\tlet tree: Parser.Tree | undefined;\n\t\tlet time: number = 0;\n\t\tlet passes: number = 0;\n\t\tthis._newEdits = false;\n\t\tdo {\n\t\t\tconst timer = performance.now();\n\t\t\ttry {\n\t\t\t\ttree = this.parser.parse((index: number, position?: Parser.Point) => this._parseCallback(model, index), this.tree);\n\t\t\t} catch (e) {\n\t\t\t\t// parsing can fail when the timeout is reached, will resume upon next loop\n\t\t\t} finally {\n\t\t\t\ttime += performance.now() - timer;\n\t\t\t\tpasses++;\n\t\t\t}\n\n\t\t\t// Even if the model changes and edits are applied, the tree parsing will continue correctly after the await.\n\t\t\tawait new Promise<void>(resolve => setTimeout0(resolve));\n\n\t\t\tif (model.isDisposed() || this.isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} while (!tree && !this._newEdits); // exit if there a new edits, as anhy parsing done while there are new edits is throw away work\n\t\tthis.sendParseTimeTelemetry(parseType, language, time, passes);\n\t\treturn tree;\n\t}\n\n\tprivate _parseCallback(textModel: ITextModel, index: number): string | null {\n\t\treturn textModel.getTextBuffer().getNearestChunk(index);\n\t}\n\n\tprivate sendParseTimeTelemetry(parseType: TelemetryParseType, languageId: string, time: number, passes: number): void {\n\t\tthis._logService.debug(`Tree parsing (${parseType}) took ${time} ms and ${passes} passes.`);\n\t\ttype ParseTimeClassification = {\n\t\t\towner: 'alros';\n\t\t\tcomment: 'Used to understand how long it takes to parse a tree-sitter tree';\n\t\t\tlanguageId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The programming language ID.' };\n\t\t\ttime: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The ms it took to parse' };\n\t\t\tpasses: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The number of passes it took to parse' };\n\t\t};\n\t\tif (parseType === TelemetryParseType.Full) {\n\t\t\tthis._telemetryService.publicLog2<{ languageId: string; time: number; passes: number }, ParseTimeClassification>(`treeSitter.fullParse`, { languageId, time, passes });\n\t\t} else {\n\t\t\tthis._telemetryService.publicLog2<{ languageId: string; time: number; passes: number }, ParseTimeClassification>(`treeSitter.incrementalParse`, { languageId, time, passes });\n\t\t}\n\t}\n}\n\nexport class TreeSitterLanguages extends Disposable {\n\tprivate _languages: AsyncCache<string, Parser.Language | undefined> = new AsyncCache();\n\tpublic /*exposed for tests*/ readonly _onDidAddLanguage: Emitter<{ id: string; language: Parser.Language }> = this._register(new Emitter());\n\t/**\n\t * If you're looking for a specific language, make sure to check if it already exists with `getLanguage` as it will kick off the process to add it if it doesn't exist.\n\t */\n\tpublic readonly onDidAddLanguage: Event<{ id: string; language: Parser.Language }> = this._onDidAddLanguage.event;\n\n\tconstructor(private readonly _treeSitterImporter: TreeSitterImporter,\n\t\tprivate readonly _fileService: IFileService,\n\t\tprivate readonly _environmentService: IEnvironmentService,\n\t\tprivate readonly _registeredLanguages: Map<string, string>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getOrInitLanguage(languageId: string): Parser.Language | undefined {\n\t\tif (this._languages.isCached(languageId)) {\n\t\t\treturn this._languages.getSyncIfCached(languageId);\n\t\t} else {\n\t\t\t// kick off adding the language, but don't wait\n\t\t\tthis._addLanguage(languageId);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate async _addLanguage(languageId: string): Promise<void> {\n\t\tconst languagePromise = this._languages.get(languageId);\n\t\tif (!languagePromise) {\n\t\t\tthis._languages.set(languageId, this._fetchLanguage(languageId));\n\t\t\tconst language = await this._languages.get(languageId);\n\t\t\tif (!language) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tthis._onDidAddLanguage.fire({ id: languageId, language });\n\t\t}\n\t}\n\n\tprivate async _fetchLanguage(languageId: string): Promise<Parser.Language | undefined> {\n\t\tconst grammarName = this._registeredLanguages.get(languageId);\n\t\tconst languageLocation = this._getLanguageLocation(languageId);\n\t\tif (!grammarName || !languageLocation) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst wasmPath: AppResourcePath = `${languageLocation}/${grammarName}.wasm`;\n\t\tconst languageFile = await (this._fileService.readFile(FileAccess.asFileUri(wasmPath)));\n\t\tconst Parser = await this._treeSitterImporter.getParserClass();\n\t\treturn Parser.Language.load(languageFile.value.buffer);\n\t}\n\n\tprivate _getLanguageLocation(languageId: string): AppResourcePath | undefined {\n\t\tconst grammarName = this._registeredLanguages.get(languageId);\n\t\tif (!grammarName) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn getModuleLocation(this._environmentService);\n\t}\n}\n\nexport class TreeSitterImporter {\n\tprivate _treeSitterImport: typeof import('@vscode/tree-sitter-wasm') | undefined;\n\tprivate async _getTreeSitterImport() {\n\t\tif (!this._treeSitterImport) {\n\t\t\tthis._treeSitterImport = await importAMDNodeModule<typeof import('@vscode/tree-sitter-wasm')>('@vscode/tree-sitter-wasm', 'wasm/tree-sitter.js');\n\t\t}\n\t\treturn this._treeSitterImport;\n\t}\n\n\tprivate _parserClass: typeof Parser | undefined;\n\tpublic async getParserClass() {\n\t\tif (!this._parserClass) {\n\t\t\tthis._parserClass = (await this._getTreeSitterImport()).Parser;\n\t\t}\n\t\treturn this._parserClass;\n\t}\n}\n\nexport class TreeSitterTextModelService extends Disposable implements ITreeSitterParserService {\n\treadonly _serviceBrand: undefined;\n\tprivate _init!: Promise<boolean>;\n\tprivate _textModelTreeSitters: DisposableMap<ITextModel, TextModelTreeSitter> = this._register(new DisposableMap());\n\tprivate readonly _registeredLanguages: Map<string, string> = new Map();\n\tprivate readonly _treeSitterImporter: TreeSitterImporter = new TreeSitterImporter();\n\tprivate readonly _treeSitterLanguages: TreeSitterLanguages;\n\n\tpublic readonly onDidAddLanguage: Event<{ id: string; language: Parser.Language }>;\n\n\tconstructor(@IModelService private readonly _modelService: IModelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis._treeSitterLanguages = this._register(new TreeSitterLanguages(this._treeSitterImporter, fileService, this._environmentService, this._registeredLanguages));\n\t\tthis.onDidAddLanguage = this._treeSitterLanguages.onDidAddLanguage;\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(EDITOR_EXPERIMENTAL_PREFER_TREESITTER)) {\n\t\t\t\tthis._supportedLanguagesChanged();\n\t\t\t}\n\t\t}));\n\t\tthis._supportedLanguagesChanged();\n\t}\n\n\tgetOrInitLanguage(languageId: string): Parser.Language | undefined {\n\t\treturn this._treeSitterLanguages.getOrInitLanguage(languageId);\n\t}\n\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined {\n\t\tconst textModelTreeSitter = this._textModelTreeSitters.get(textModel);\n\t\treturn textModelTreeSitter?.parseResult;\n\t}\n\n\tprivate async _doInitParser() {\n\t\tconst Parser = await this._treeSitterImporter.getParserClass();\n\t\tconst environmentService = this._environmentService;\n\t\tawait Parser.init({\n\t\t\tlocateFile(_file: string, _folder: string) {\n\t\t\t\treturn FileAccess.asBrowserUri(`${getModuleLocation(environmentService)}/${FILENAME_TREESITTER_WASM}`).toString(true);\n\t\t\t}\n\t\t});\n\t\treturn true;\n\t}\n\n\tprivate _hasInit: boolean = false;\n\tprivate async _initParser(hasLanguages: boolean): Promise<boolean> {\n\t\tif (this._hasInit) {\n\t\t\treturn this._init;\n\t\t}\n\n\t\tif (hasLanguages) {\n\t\t\tthis._hasInit = true;\n\t\t\tthis._init = this._doInitParser();\n\n\t\t\t// New init, we need to deal with all the existing text models and set up listeners\n\t\t\tthis._init.then(() => this._registerModelServiceListeners());\n\t\t} else {\n\t\t\tthis._init = Promise.resolve(false);\n\t\t}\n\t\treturn this._init;\n\t}\n\n\tprivate async _supportedLanguagesChanged() {\n\t\tconst setting = this._getSetting();\n\n\t\tlet hasLanguages = true;\n\t\tif (setting.length === 0) {\n\t\t\thasLanguages = false;\n\t\t}\n\n\t\tif (await this._initParser(hasLanguages)) {\n\t\t\t// Eventually, this should actually use an extension point to add tree sitter grammars, but for now they are hard coded in core\n\t\t\tif (setting.includes('typescript')) {\n\t\t\t\tthis._addGrammar('typescript', 'tree-sitter-typescript');\n\t\t\t} else {\n\t\t\t\tthis._removeGrammar('typescript');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getSetting(): string[] {\n\t\tconst setting = this._configurationService.getValue<string[]>(EDITOR_EXPERIMENTAL_PREFER_TREESITTER);\n\t\tif (setting && setting.length > 0) {\n\t\t\treturn setting;\n\t\t} else {\n\t\t\tconst expSetting = this._configurationService.getValue<boolean>(EDITOR_TREESITTER_TELEMETRY);\n\t\t\tif (expSetting) {\n\t\t\t\treturn ['typescript'];\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async _registerModelServiceListeners() {\n\t\tthis._register(this._modelService.onModelAdded(model => {\n\t\t\tthis._createTextModelTreeSitter(model);\n\t\t}));\n\t\tthis._register(this._modelService.onModelRemoved(model => {\n\t\t\tthis._textModelTreeSitters.deleteAndDispose(model);\n\t\t}));\n\t\tthis._modelService.getModels().forEach(model => this._createTextModelTreeSitter(model));\n\t}\n\n\tprivate _createTextModelTreeSitter(model: ITextModel) {\n\t\tconst textModelTreeSitter = new TextModelTreeSitter(model, this._treeSitterLanguages, this._treeSitterImporter, this._logService, this._telemetryService);\n\t\tthis._textModelTreeSitters.set(model, textModelTreeSitter);\n\t}\n\n\tprivate _addGrammar(languageId: string, grammarName: string) {\n\t\tif (!this._registeredLanguages.has(languageId)) {\n\t\t\tthis._registeredLanguages.set(languageId, grammarName);\n\t\t}\n\t}\n\n\tprivate _removeGrammar(languageId: string) {\n\t\tif (this._registeredLanguages.has(languageId)) {\n\t\t\tthis._registeredLanguages.delete('typescript');\n\t\t}\n\t}\n}\n\nclass PromiseWithSyncAccess<T> {\n\tprivate _result: PromiseResult<T> | undefined;\n\t/**\n\t * Returns undefined if the promise did not resolve yet.\n\t */\n\tget result(): PromiseResult<T> | undefined {\n\t\treturn this._result;\n\t}\n\n\tconstructor(public readonly promise: Promise<T>) {\n\t\tpromise.then(result => {\n\t\t\tthis._result = new PromiseResult(result, undefined);\n\t\t}).catch(e => {\n\t\t\tthis._result = new PromiseResult<T>(undefined, e);\n\t\t});\n\t}\n}\n\nclass AsyncCache<TKey, T> {\n\tprivate readonly _values = new Map<TKey, PromiseWithSyncAccess<T>>();\n\n\tset(key: TKey, promise: Promise<T>) {\n\t\tthis._values.set(key, new PromiseWithSyncAccess(promise));\n\t}\n\n\tget(key: TKey): Promise<T> | undefined {\n\t\treturn this._values.get(key)?.promise;\n\t}\n\n\tgetSyncIfCached(key: TKey): T | undefined {\n\t\treturn this._values.get(key)?.result?.data;\n\t}\n\n\tisCached(key: TKey): boolean {\n\t\treturn this._values.get(key)?.result !== undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TelemetryParseType"]
}
