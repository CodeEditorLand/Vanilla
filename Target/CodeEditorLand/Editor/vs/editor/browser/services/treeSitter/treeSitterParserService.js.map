{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/services/treeSitter/treeSitterParserService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Parser } from \"@vscode/tree-sitter-wasm\";\nimport { importAMDNodeModule } from \"../../../../amdX.js\";\nimport { canASAR } from \"../../../../base/common/amd.js\";\nimport {\n\ttype CancellationToken,\n\tcancelOnDispose,\n} from \"../../../../base/common/cancellation.js\";\nimport {\n\tCancellationError,\n\tisCancellationError,\n} from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n\tnodeModulesAsarUnpackedPath,\n\tnodeModulesPath,\n} from \"../../../../base/common/network.js\";\nimport { PromiseResult } from \"../../../../base/common/observable.js\";\nimport { setTimeout0 } from \"../../../../base/common/platform.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { ITextModel } from \"../../../common/model.js\";\nimport { IModelService } from \"../../../common/services/model.js\";\nimport {\n\tEDITOR_EXPERIMENTAL_PREFER_TREESITTER,\n\ttype ITreeSitterParseResult,\n\ttype ITreeSitterParserService,\n} from \"../../../common/services/treeSitterParserService.js\";\nimport type { IModelContentChange } from \"../../../common/textModelEvents.js\";\n\nconst EDITOR_TREESITTER_TELEMETRY = \"editor.experimental.treeSitterTelemetry\";\nconst MODULE_LOCATION_SUBPATH = `@vscode/tree-sitter-wasm/wasm`;\nconst FILENAME_TREESITTER_WASM = `tree-sitter.wasm`;\n\nfunction getModuleLocation(\n\tenvironmentService: IEnvironmentService,\n): AppResourcePath {\n\treturn `${canASAR && environmentService.isBuilt ? nodeModulesAsarUnpackedPath : nodeModulesPath}/${MODULE_LOCATION_SUBPATH}`;\n}\n\nexport class TextModelTreeSitter extends Disposable {\n\tprivate _parseResult: TreeSitterParseResult | undefined;\n\n\tget parseResult(): ITreeSitterParseResult | undefined {\n\t\treturn this._parseResult;\n\t}\n\n\tconstructor(\n\t\treadonly model: ITextModel,\n\t\tprivate readonly _treeSitterLanguages: TreeSitterLanguages,\n\t\tprivate readonly _treeSitterImporter: TreeSitterImporter,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(this.model.onDidChangeLanguage, (e) =>\n\t\t\t\tthis._onDidChangeLanguage(\n\t\t\t\t\te ? e.newLanguage : this.model.getLanguageId(),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate readonly _languageSessionDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\t/**\n\t * Be very careful when making changes to this method as it is easy to introduce race conditions.\n\t */\n\tprivate async _onDidChangeLanguage(languageId: string) {\n\t\tthis._languageSessionDisposables.clear();\n\t\tthis._parseResult = undefined;\n\n\t\tconst token = cancelOnDispose(this._languageSessionDisposables);\n\t\tlet language: Parser.Language | undefined;\n\t\ttry {\n\t\t\tlanguage = await this._getLanguage(languageId, token);\n\t\t} catch (e) {\n\t\t\tif (isCancellationError(e)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst Parser = await this._treeSitterImporter.getParserClass();\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst treeSitterTree = this._languageSessionDisposables.add(\n\t\t\tnew TreeSitterParseResult(\n\t\t\t\tnew Parser(),\n\t\t\t\tlanguage,\n\t\t\t\tthis._logService,\n\t\t\t\tthis._telemetryService,\n\t\t\t),\n\t\t);\n\t\tthis._languageSessionDisposables.add(\n\t\t\tthis.model.onDidChangeContent((e) =>\n\t\t\t\tthis._onDidChangeContent(treeSitterTree, e.changes),\n\t\t\t),\n\t\t);\n\t\tawait this._onDidChangeContent(treeSitterTree, []);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._parseResult = treeSitterTree;\n\t}\n\n\tprivate _getLanguage(\n\t\tlanguageId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<Parser.Language> {\n\t\tconst language =\n\t\t\tthis._treeSitterLanguages.getOrInitLanguage(languageId);\n\t\tif (language) {\n\t\t\treturn Promise.resolve(language);\n\t\t}\n\t\tconst disposables: IDisposable[] = [];\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdisposables.push(\n\t\t\t\tthis._treeSitterLanguages.onDidAddLanguage((e) => {\n\t\t\t\t\tif (e.id === languageId) {\n\t\t\t\t\t\tdispose(disposables);\n\t\t\t\t\t\tresolve(e.language);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\ttoken.onCancellationRequested(\n\t\t\t\t() => {\n\t\t\t\t\tdispose(disposables);\n\t\t\t\t\treject(new CancellationError());\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\tdisposables,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async _onDidChangeContent(\n\t\ttreeSitterTree: TreeSitterParseResult,\n\t\tchanges: IModelContentChange[],\n\t) {\n\t\treturn treeSitterTree.onDidChangeContent(this.model, changes);\n\t}\n}\n\nenum TelemetryParseType {\n\tFull = \"fullParse\",\n\tIncremental = \"incrementalParse\",\n}\n\nexport class TreeSitterParseResult\n\timplements IDisposable, ITreeSitterParseResult\n{\n\tprivate _tree: Parser.Tree | undefined;\n\tprivate _isDisposed = false;\n\tconstructor(\n\t\tpublic readonly parser: Parser,\n\t\tpublic /** exposed for tests **/ readonly language: Parser.Language,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t) {\n\t\tthis.parser.setTimeoutMicros(50 * 1000); // 50 ms\n\t\tthis.parser.setLanguage(language);\n\t}\n\tdispose(): void {\n\t\tthis._isDisposed = true;\n\t\tthis._tree?.delete();\n\t\tthis.parser?.delete();\n\t}\n\tget tree() {\n\t\treturn this._tree;\n\t}\n\tprivate set tree(newTree: Parser.Tree | undefined) {\n\t\tthis._tree?.delete();\n\t\tthis._tree = newTree;\n\t}\n\tget isDisposed() {\n\t\treturn this._isDisposed;\n\t}\n\n\tprivate _onDidChangeContentQueue: Promise<void> = Promise.resolve();\n\tpublic async onDidChangeContent(\n\t\tmodel: ITextModel,\n\t\tchanges: IModelContentChange[],\n\t) {\n\t\tthis._applyEdits(model, changes);\n\t\tthis._onDidChangeContentQueue = this._onDidChangeContentQueue\n\t\t\t.then(() => {\n\t\t\t\tif (this.isDisposed) {\n\t\t\t\t\t// No need to continue the queue if we are disposed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn this._parseAndUpdateTree(model);\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthis._logService.error(\"Error parsing tree-sitter tree\", e);\n\t\t\t});\n\t\treturn this._onDidChangeContentQueue;\n\t}\n\n\tprivate _newEdits = true;\n\tprivate _applyEdits(model: ITextModel, changes: IModelContentChange[]) {\n\t\tfor (const change of changes) {\n\t\t\tconst newEndOffset = change.rangeOffset + change.text.length;\n\t\t\tconst newEndPosition = model.getPositionAt(newEndOffset);\n\n\t\t\tthis.tree?.edit({\n\t\t\t\tstartIndex: change.rangeOffset,\n\t\t\t\toldEndIndex: change.rangeOffset + change.rangeLength,\n\t\t\t\tnewEndIndex: change.rangeOffset + change.text.length,\n\t\t\t\tstartPosition: {\n\t\t\t\t\trow: change.range.startLineNumber - 1,\n\t\t\t\t\tcolumn: change.range.startColumn - 1,\n\t\t\t\t},\n\t\t\t\toldEndPosition: {\n\t\t\t\t\trow: change.range.endLineNumber - 1,\n\t\t\t\t\tcolumn: change.range.endColumn - 1,\n\t\t\t\t},\n\t\t\t\tnewEndPosition: {\n\t\t\t\t\trow: newEndPosition.lineNumber - 1,\n\t\t\t\t\tcolumn: newEndPosition.column - 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis._newEdits = true;\n\t\t}\n\t}\n\n\tprivate async _parseAndUpdateTree(model: ITextModel) {\n\t\tconst tree = await this._parse(model);\n\t\tif (!this._newEdits) {\n\t\t\tthis.tree = tree;\n\t\t}\n\t}\n\n\tprivate _parse(model: ITextModel): Promise<Parser.Tree | undefined> {\n\t\tlet parseType: TelemetryParseType = TelemetryParseType.Full;\n\t\tif (this.tree) {\n\t\t\tparseType = TelemetryParseType.Incremental;\n\t\t}\n\t\treturn this._parseAndYield(model, parseType);\n\t}\n\n\tprivate async _parseAndYield(\n\t\tmodel: ITextModel,\n\t\tparseType: TelemetryParseType,\n\t): Promise<Parser.Tree | undefined> {\n\t\tconst language = model.getLanguageId();\n\t\tlet tree: Parser.Tree | undefined;\n\t\tlet time = 0;\n\t\tlet passes = 0;\n\t\tthis._newEdits = false;\n\t\tdo {\n\t\t\tconst timer = performance.now();\n\t\t\ttry {\n\t\t\t\ttree = this.parser.parse(\n\t\t\t\t\t(index: number, position?: Parser.Point) =>\n\t\t\t\t\t\tthis._parseCallback(model, index),\n\t\t\t\t\tthis.tree,\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\t// parsing can fail when the timeout is reached, will resume upon next loop\n\t\t\t} finally {\n\t\t\t\ttime += performance.now() - timer;\n\t\t\t\tpasses++;\n\t\t\t}\n\n\t\t\t// Even if the model changes and edits are applied, the tree parsing will continue correctly after the await.\n\t\t\tawait new Promise<void>((resolve) => setTimeout0(resolve));\n\n\t\t\tif (model.isDisposed() || this.isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} while (!tree && !this._newEdits); // exit if there a new edits, as anhy parsing done while there are new edits is throw away work\n\t\tthis.sendParseTimeTelemetry(parseType, language, time, passes);\n\t\treturn tree;\n\t}\n\n\tprivate _parseCallback(\n\t\ttextModel: ITextModel,\n\t\tindex: number,\n\t): string | null {\n\t\treturn textModel.getTextBuffer().getNearestChunk(index);\n\t}\n\n\tprivate sendParseTimeTelemetry(\n\t\tparseType: TelemetryParseType,\n\t\tlanguageId: string,\n\t\ttime: number,\n\t\tpasses: number,\n\t): void {\n\t\tthis._logService.debug(\n\t\t\t`Tree parsing (${parseType}) took ${time} ms and ${passes} passes.`,\n\t\t);\n\t\ttype ParseTimeClassification = {\n\t\t\towner: \"alros\";\n\t\t\tcomment: \"Used to understand how long it takes to parse a tree-sitter tree\";\n\t\t\tlanguageId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The programming language ID.\";\n\t\t\t};\n\t\t\ttime: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tisMeasurement: true;\n\t\t\t\tcomment: \"The ms it took to parse\";\n\t\t\t};\n\t\t\tpasses: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tisMeasurement: true;\n\t\t\t\tcomment: \"The number of passes it took to parse\";\n\t\t\t};\n\t\t};\n\t\tif (parseType === TelemetryParseType.Full) {\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\t{ languageId: string; time: number; passes: number },\n\t\t\t\tParseTimeClassification\n\t\t\t>(`treeSitter.fullParse`, { languageId, time, passes });\n\t\t} else {\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\t{ languageId: string; time: number; passes: number },\n\t\t\t\tParseTimeClassification\n\t\t\t>(`treeSitter.incrementalParse`, { languageId, time, passes });\n\t\t}\n\t}\n}\n\nexport class TreeSitterLanguages extends Disposable {\n\tprivate _languages: AsyncCache<string, Parser.Language | undefined> =\n\t\tnew AsyncCache();\n\tpublic /*exposed for tests*/ readonly _onDidAddLanguage: Emitter<{\n\t\tid: string;\n\t\tlanguage: Parser.Language;\n\t}> = this._register(new Emitter());\n\t/**\n\t * If you're looking for a specific language, make sure to check if it already exists with `getLanguage` as it will kick off the process to add it if it doesn't exist.\n\t */\n\tpublic readonly onDidAddLanguage: Event<{\n\t\tid: string;\n\t\tlanguage: Parser.Language;\n\t}> = this._onDidAddLanguage.event;\n\n\tconstructor(\n\t\tprivate readonly _treeSitterImporter: TreeSitterImporter,\n\t\tprivate readonly _fileService: IFileService,\n\t\tprivate readonly _environmentService: IEnvironmentService,\n\t\tprivate readonly _registeredLanguages: Map<string, string>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getOrInitLanguage(languageId: string): Parser.Language | undefined {\n\t\tif (this._languages.isCached(languageId)) {\n\t\t\treturn this._languages.getSyncIfCached(languageId);\n\t\t} else {\n\t\t\t// kick off adding the language, but don't wait\n\t\t\tthis._addLanguage(languageId);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate async _addLanguage(languageId: string): Promise<void> {\n\t\tconst languagePromise = this._languages.get(languageId);\n\t\tif (!languagePromise) {\n\t\t\tthis._languages.set(languageId, this._fetchLanguage(languageId));\n\t\t\tconst language = await this._languages.get(languageId);\n\t\t\tif (!language) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tthis._onDidAddLanguage.fire({ id: languageId, language });\n\t\t}\n\t}\n\n\tprivate async _fetchLanguage(\n\t\tlanguageId: string,\n\t): Promise<Parser.Language | undefined> {\n\t\tconst grammarName = this._registeredLanguages.get(languageId);\n\t\tconst languageLocation = this._getLanguageLocation(languageId);\n\t\tif (!grammarName || !languageLocation) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst wasmPath: AppResourcePath = `${languageLocation}/${grammarName}.wasm`;\n\t\tconst languageFile = await this._fileService.readFile(\n\t\t\tFileAccess.asFileUri(wasmPath),\n\t\t);\n\t\tconst Parser = await this._treeSitterImporter.getParserClass();\n\t\treturn Parser.Language.load(languageFile.value.buffer);\n\t}\n\n\tprivate _getLanguageLocation(\n\t\tlanguageId: string,\n\t): AppResourcePath | undefined {\n\t\tconst grammarName = this._registeredLanguages.get(languageId);\n\t\tif (!grammarName) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn getModuleLocation(this._environmentService);\n\t}\n}\n\nexport class TreeSitterImporter {\n\tprivate _treeSitterImport:\n\t\t| typeof import(\"@vscode/tree-sitter-wasm\")\n\t\t| undefined;\n\tprivate async _getTreeSitterImport() {\n\t\tif (!this._treeSitterImport) {\n\t\t\tthis._treeSitterImport = await importAMDNodeModule<\n\t\t\t\ttypeof import(\"@vscode/tree-sitter-wasm\")\n\t\t\t>(\"@vscode/tree-sitter-wasm\", \"wasm/tree-sitter.js\");\n\t\t}\n\t\treturn this._treeSitterImport;\n\t}\n\n\tprivate _parserClass: typeof Parser | undefined;\n\tpublic async getParserClass() {\n\t\tif (!this._parserClass) {\n\t\t\tthis._parserClass = (await this._getTreeSitterImport()).Parser;\n\t\t}\n\t\treturn this._parserClass;\n\t}\n}\n\nexport class TreeSitterTextModelService\n\textends Disposable\n\timplements ITreeSitterParserService\n{\n\treadonly _serviceBrand: undefined;\n\tprivate _init!: Promise<boolean>;\n\tprivate _textModelTreeSitters: DisposableMap<\n\t\tITextModel,\n\t\tTextModelTreeSitter\n\t> = this._register(new DisposableMap());\n\tprivate readonly _registeredLanguages: Map<string, string> = new Map();\n\tprivate readonly _treeSitterImporter: TreeSitterImporter =\n\t\tnew TreeSitterImporter();\n\tprivate readonly _treeSitterLanguages: TreeSitterLanguages;\n\n\tpublic readonly onDidAddLanguage: Event<{\n\t\tid: string;\n\t\tlanguage: Parser.Language;\n\t}>;\n\n\tconstructor(@IModelService private readonly _modelService: IModelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t\tthis._treeSitterLanguages = this._register(new TreeSitterLanguages(this._treeSitterImporter, fileService, this._environmentService, this._registeredLanguages));\n\t\tthis.onDidAddLanguage = this._treeSitterLanguages.onDidAddLanguage;\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(EDITOR_EXPERIMENTAL_PREFER_TREESITTER)) {\n\t\t\t\tthis._supportedLanguagesChanged();\n\t\t\t}\n\t\t}));\n\t\tthis._supportedLanguagesChanged();\n\t}\n\n\tgetOrInitLanguage(languageId: string): Parser.Language | undefined {\n\t\treturn this._treeSitterLanguages.getOrInitLanguage(languageId);\n\t}\n\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined {\n\t\tconst textModelTreeSitter = this._textModelTreeSitters.get(textModel);\n\t\treturn textModelTreeSitter?.parseResult;\n\t}\n\n\tprivate async _doInitParser() {\n\t\tconst Parser = await this._treeSitterImporter.getParserClass();\n\t\tconst environmentService = this._environmentService;\n\t\tawait Parser.init({\n\t\t\tlocateFile(_file: string, _folder: string) {\n\t\t\t\treturn FileAccess.asBrowserUri(\n\t\t\t\t\t`${getModuleLocation(environmentService)}/${FILENAME_TREESITTER_WASM}`,\n\t\t\t\t).toString(true);\n\t\t\t},\n\t\t});\n\t\treturn true;\n\t}\n\n\tprivate _hasInit = false;\n\tprivate async _initParser(hasLanguages: boolean): Promise<boolean> {\n\t\tif (this._hasInit) {\n\t\t\treturn this._init;\n\t\t}\n\n\t\tif (hasLanguages) {\n\t\t\tthis._hasInit = true;\n\t\t\tthis._init = this._doInitParser();\n\n\t\t\t// New init, we need to deal with all the existing text models and set up listeners\n\t\t\tthis._init.then(() => this._registerModelServiceListeners());\n\t\t} else {\n\t\t\tthis._init = Promise.resolve(false);\n\t\t}\n\t\treturn this._init;\n\t}\n\n\tprivate async _supportedLanguagesChanged() {\n\t\tconst setting = this._getSetting();\n\n\t\tlet hasLanguages = true;\n\t\tif (setting.length === 0) {\n\t\t\thasLanguages = false;\n\t\t}\n\n\t\tif (await this._initParser(hasLanguages)) {\n\t\t\t// Eventually, this should actually use an extension point to add tree sitter grammars, but for now they are hard coded in core\n\t\t\tif (setting.includes(\"typescript\")) {\n\t\t\t\tthis._addGrammar(\"typescript\", \"tree-sitter-typescript\");\n\t\t\t} else {\n\t\t\t\tthis._removeGrammar(\"typescript\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getSetting(): string[] {\n\t\tconst setting = this._configurationService.getValue<string[]>(\n\t\t\tEDITOR_EXPERIMENTAL_PREFER_TREESITTER,\n\t\t);\n\t\tif (setting && setting.length > 0) {\n\t\t\treturn setting;\n\t\t} else {\n\t\t\tconst expSetting = this._configurationService.getValue<boolean>(\n\t\t\t\tEDITOR_TREESITTER_TELEMETRY,\n\t\t\t);\n\t\t\tif (expSetting) {\n\t\t\t\treturn [\"typescript\"];\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async _registerModelServiceListeners() {\n\t\tthis._register(\n\t\t\tthis._modelService.onModelAdded((model) => {\n\t\t\t\tthis._createTextModelTreeSitter(model);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._modelService.onModelRemoved((model) => {\n\t\t\t\tthis._textModelTreeSitters.deleteAndDispose(model);\n\t\t\t}),\n\t\t);\n\t\tthis._modelService\n\t\t\t.getModels()\n\t\t\t.forEach((model) => this._createTextModelTreeSitter(model));\n\t}\n\n\tprivate _createTextModelTreeSitter(model: ITextModel) {\n\t\tconst textModelTreeSitter = new TextModelTreeSitter(\n\t\t\tmodel,\n\t\t\tthis._treeSitterLanguages,\n\t\t\tthis._treeSitterImporter,\n\t\t\tthis._logService,\n\t\t\tthis._telemetryService,\n\t\t);\n\t\tthis._textModelTreeSitters.set(model, textModelTreeSitter);\n\t}\n\n\tprivate _addGrammar(languageId: string, grammarName: string) {\n\t\tif (!this._registeredLanguages.has(languageId)) {\n\t\t\tthis._registeredLanguages.set(languageId, grammarName);\n\t\t}\n\t}\n\n\tprivate _removeGrammar(languageId: string) {\n\t\tif (this._registeredLanguages.has(languageId)) {\n\t\t\tthis._registeredLanguages.delete(\"typescript\");\n\t\t}\n\t}\n}\n\nclass PromiseWithSyncAccess<T> {\n\tprivate _result: PromiseResult<T> | undefined;\n\t/**\n\t * Returns undefined if the promise did not resolve yet.\n\t */\n\tget result(): PromiseResult<T> | undefined {\n\t\treturn this._result;\n\t}\n\n\tconstructor(public readonly promise: Promise<T>) {\n\t\tpromise\n\t\t\t.then((result) => {\n\t\t\t\tthis._result = new PromiseResult(result, undefined);\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthis._result = new PromiseResult<T>(undefined, e);\n\t\t\t});\n\t}\n}\n\nclass AsyncCache<TKey, T> {\n\tprivate readonly _values = new Map<TKey, PromiseWithSyncAccess<T>>();\n\n\tset(key: TKey, promise: Promise<T>) {\n\t\tthis._values.set(key, new PromiseWithSyncAccess(promise));\n\t}\n\n\tget(key: TKey): Promise<T> | undefined {\n\t\treturn this._values.get(key)?.promise;\n\t}\n\n\tgetSyncIfCached(key: TKey): T | undefined {\n\t\treturn this._values.get(key)?.result?.data;\n\t}\n\n\tisCached(key: TKey): boolean {\n\t\treturn this._values.get(key)?.result !== undefined;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,2BAA2B;AACpC,SAAS,eAAe;AACxB;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,SAAS,aAAa;AAC/B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAC5B,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAElC,SAAS,qBAAqB;AAC9B;AAAA,EACC;AAAA,OAGM;AAGP,MAAM,8BAA8B;AACpC,MAAM,0BAA0B;AAChC,MAAM,2BAA2B;AAEjC,SAAS,kBACR,oBACkB;AAClB,SAAO,GAAG,WAAW,mBAAmB,UAAU,8BAA8B,eAAe,IAAI,uBAAuB;AAC3H;AAJS;AAMF,MAAM,4BAA4B,WAAW;AAAA,EAOnD,YACU,OACQ,sBACA,qBACA,aACA,mBAChB;AACD,UAAM;AANG;AACQ;AACA;AACA;AACA;AAGjB,SAAK;AAAA,MACJ,MAAM;AAAA,QAAgB,KAAK,MAAM;AAAA,QAAqB,CAAC,MACtD,KAAK;AAAA,UACJ,IAAI,EAAE,cAAc,KAAK,MAAM,cAAc;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EA9ED,OAwDoD;AAAA;AAAA;AAAA,EAC3C;AAAA,EAER,IAAI,cAAkD;AACrD,WAAO,KAAK;AAAA,EACb;AAAA,EAmBiB,8BAA8B,KAAK;AAAA,IACnD,IAAI,gBAAgB;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAIA,MAAc,qBAAqB,YAAoB;AACtD,SAAK,4BAA4B,MAAM;AACvC,SAAK,eAAe;AAEpB,UAAM,QAAQ,gBAAgB,KAAK,2BAA2B;AAC9D,QAAI;AACJ,QAAI;AACH,iBAAW,MAAM,KAAK,aAAa,YAAY,KAAK;AAAA,IACrD,SAAS,GAAG;AACX,UAAI,oBAAoB,CAAC,GAAG;AAC3B;AAAA,MACD;AACA,YAAM;AAAA,IACP;AAEA,UAAM,SAAS,MAAM,KAAK,oBAAoB,eAAe;AAC7D,QAAI,MAAM,yBAAyB;AAClC;AAAA,IACD;AAEA,UAAM,iBAAiB,KAAK,4BAA4B;AAAA,MACvD,IAAI;AAAA,QACH,IAAI,OAAO;AAAA,QACX;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AACA,SAAK,4BAA4B;AAAA,MAChC,KAAK,MAAM;AAAA,QAAmB,CAAC,MAC9B,KAAK,oBAAoB,gBAAgB,EAAE,OAAO;AAAA,MACnD;AAAA,IACD;AACA,UAAM,KAAK,oBAAoB,gBAAgB,CAAC,CAAC;AACjD,QAAI,MAAM,yBAAyB;AAClC;AAAA,IACD;AAEA,SAAK,eAAe;AAAA,EACrB;AAAA,EAEQ,aACP,YACA,OAC2B;AAC3B,UAAM,WACL,KAAK,qBAAqB,kBAAkB,UAAU;AACvD,QAAI,UAAU;AACb,aAAO,QAAQ,QAAQ,QAAQ;AAAA,IAChC;AACA,UAAM,cAA6B,CAAC;AAEpC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,kBAAY;AAAA,QACX,KAAK,qBAAqB,iBAAiB,CAAC,MAAM;AACjD,cAAI,EAAE,OAAO,YAAY;AACxB,oBAAQ,WAAW;AACnB,oBAAQ,EAAE,QAAQ;AAAA,UACnB;AAAA,QACD,CAAC;AAAA,MACF;AACA,YAAM;AAAA,QACL,MAAM;AACL,kBAAQ,WAAW;AACnB,iBAAO,IAAI,kBAAkB,CAAC;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,oBACb,gBACA,SACC;AACD,WAAO,eAAe,mBAAmB,KAAK,OAAO,OAAO;AAAA,EAC7D;AACD;AAEA,IAAK,qBAAL,kBAAKA,wBAAL;AACC,EAAAA,oBAAA,UAAO;AACP,EAAAA,oBAAA,iBAAc;AAFV,SAAAA;AAAA,GAAA;AAKE,MAAM,sBAEb;AAAA,EAGC,YACiB,QAC0B,UACzB,aACA,mBAChB;AAJe;AAC0B;AACzB;AACA;AAEjB,SAAK,OAAO,iBAAiB,KAAK,GAAI;AACtC,SAAK,OAAO,YAAY,QAAQ;AAAA,EACjC;AAAA,EAxLD,OA6KA;AAAA;AAAA;AAAA,EACS;AAAA,EACA,cAAc;AAAA,EAUtB,UAAgB;AACf,SAAK,cAAc;AACnB,SAAK,OAAO,OAAO;AACnB,SAAK,QAAQ,OAAO;AAAA,EACrB;AAAA,EACA,IAAI,OAAO;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EACA,IAAY,KAAK,SAAkC;AAClD,SAAK,OAAO,OAAO;AACnB,SAAK,QAAQ;AAAA,EACd;AAAA,EACA,IAAI,aAAa;AAChB,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,2BAA0C,QAAQ,QAAQ;AAAA,EAClE,MAAa,mBACZ,OACA,SACC;AACD,SAAK,YAAY,OAAO,OAAO;AAC/B,SAAK,2BAA2B,KAAK,yBACnC,KAAK,MAAM;AACX,UAAI,KAAK,YAAY;AAEpB;AAAA,MACD;AACA,aAAO,KAAK,oBAAoB,KAAK;AAAA,IACtC,CAAC,EACA,MAAM,CAAC,MAAM;AACb,WAAK,YAAY,MAAM,kCAAkC,CAAC;AAAA,IAC3D,CAAC;AACF,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,YAAY;AAAA,EACZ,YAAY,OAAmB,SAAgC;AACtE,eAAW,UAAU,SAAS;AAC7B,YAAM,eAAe,OAAO,cAAc,OAAO,KAAK;AACtD,YAAM,iBAAiB,MAAM,cAAc,YAAY;AAEvD,WAAK,MAAM,KAAK;AAAA,QACf,YAAY,OAAO;AAAA,QACnB,aAAa,OAAO,cAAc,OAAO;AAAA,QACzC,aAAa,OAAO,cAAc,OAAO,KAAK;AAAA,QAC9C,eAAe;AAAA,UACd,KAAK,OAAO,MAAM,kBAAkB;AAAA,UACpC,QAAQ,OAAO,MAAM,cAAc;AAAA,QACpC;AAAA,QACA,gBAAgB;AAAA,UACf,KAAK,OAAO,MAAM,gBAAgB;AAAA,UAClC,QAAQ,OAAO,MAAM,YAAY;AAAA,QAClC;AAAA,QACA,gBAAgB;AAAA,UACf,KAAK,eAAe,aAAa;AAAA,UACjC,QAAQ,eAAe,SAAS;AAAA,QACjC;AAAA,MACD,CAAC;AACD,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,MAAc,oBAAoB,OAAmB;AACpD,UAAM,OAAO,MAAM,KAAK,OAAO,KAAK;AACpC,QAAI,CAAC,KAAK,WAAW;AACpB,WAAK,OAAO;AAAA,IACb;AAAA,EACD;AAAA,EAEQ,OAAO,OAAqD;AACnE,QAAI,YAAgC;AACpC,QAAI,KAAK,MAAM;AACd,kBAAY;AAAA,IACb;AACA,WAAO,KAAK,eAAe,OAAO,SAAS;AAAA,EAC5C;AAAA,EAEA,MAAc,eACb,OACA,WACmC;AACnC,UAAM,WAAW,MAAM,cAAc;AACrC,QAAI;AACJ,QAAI,OAAO;AACX,QAAI,SAAS;AACb,SAAK,YAAY;AACjB,OAAG;AACF,YAAM,QAAQ,YAAY,IAAI;AAC9B,UAAI;AACH,eAAO,KAAK,OAAO;AAAA,UAClB,CAAC,OAAe,aACf,KAAK,eAAe,OAAO,KAAK;AAAA,UACjC,KAAK;AAAA,QACN;AAAA,MACD,SAAS,GAAG;AAAA,MAEZ,UAAE;AACD,gBAAQ,YAAY,IAAI,IAAI;AAC5B;AAAA,MACD;AAGA,YAAM,IAAI,QAAc,CAAC,YAAY,YAAY,OAAO,CAAC;AAEzD,UAAI,MAAM,WAAW,KAAK,KAAK,YAAY;AAC1C;AAAA,MACD;AAAA,IACD,SAAS,CAAC,QAAQ,CAAC,KAAK;AACxB,SAAK,uBAAuB,WAAW,UAAU,MAAM,MAAM;AAC7D,WAAO;AAAA,EACR;AAAA,EAEQ,eACP,WACA,OACgB;AAChB,WAAO,UAAU,cAAc,EAAE,gBAAgB,KAAK;AAAA,EACvD;AAAA,EAEQ,uBACP,WACA,YACA,MACA,QACO;AACP,SAAK,YAAY;AAAA,MAChB,iBAAiB,SAAS,UAAU,IAAI,WAAW,MAAM;AAAA,IAC1D;AAsBA,QAAI,cAAc,wBAAyB;AAC1C,WAAK,kBAAkB,WAGrB,wBAAwB,EAAE,YAAY,MAAM,OAAO,CAAC;AAAA,IACvD,OAAO;AACN,WAAK,kBAAkB,WAGrB,+BAA+B,EAAE,YAAY,MAAM,OAAO,CAAC;AAAA,IAC9D;AAAA,EACD;AACD;AAEO,MAAM,4BAA4B,WAAW;AAAA,EAenD,YACkB,qBACA,cACA,qBACA,sBAChB;AACD,UAAM;AALW;AACA;AACA;AACA;AAAA,EAGlB;AAAA,EAnXD,OA6VoD;AAAA;AAAA;AAAA,EAC3C,aACP,IAAI,WAAW;AAAA,EACsB,oBAGjC,KAAK,UAAU,IAAI,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,EAIjB,mBAGX,KAAK,kBAAkB;AAAA,EAWrB,kBAAkB,YAAiD;AACzE,QAAI,KAAK,WAAW,SAAS,UAAU,GAAG;AACzC,aAAO,KAAK,WAAW,gBAAgB,UAAU;AAAA,IAClD,OAAO;AAEN,WAAK,aAAa,UAAU;AAC5B,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAc,aAAa,YAAmC;AAC7D,UAAM,kBAAkB,KAAK,WAAW,IAAI,UAAU;AACtD,QAAI,CAAC,iBAAiB;AACrB,WAAK,WAAW,IAAI,YAAY,KAAK,eAAe,UAAU,CAAC;AAC/D,YAAM,WAAW,MAAM,KAAK,WAAW,IAAI,UAAU;AACrD,UAAI,CAAC,UAAU;AACd,eAAO;AAAA,MACR;AACA,WAAK,kBAAkB,KAAK,EAAE,IAAI,YAAY,SAAS,CAAC;AAAA,IACzD;AAAA,EACD;AAAA,EAEA,MAAc,eACb,YACuC;AACvC,UAAM,cAAc,KAAK,qBAAqB,IAAI,UAAU;AAC5D,UAAM,mBAAmB,KAAK,qBAAqB,UAAU;AAC7D,QAAI,CAAC,eAAe,CAAC,kBAAkB;AACtC,aAAO;AAAA,IACR;AACA,UAAM,WAA4B,GAAG,gBAAgB,IAAI,WAAW;AACpE,UAAM,eAAe,MAAM,KAAK,aAAa;AAAA,MAC5C,WAAW,UAAU,QAAQ;AAAA,IAC9B;AACA,UAAM,SAAS,MAAM,KAAK,oBAAoB,eAAe;AAC7D,WAAO,OAAO,SAAS,KAAK,aAAa,MAAM,MAAM;AAAA,EACtD;AAAA,EAEQ,qBACP,YAC8B;AAC9B,UAAM,cAAc,KAAK,qBAAqB,IAAI,UAAU;AAC5D,QAAI,CAAC,aAAa;AACjB,aAAO;AAAA,IACR;AACA,WAAO,kBAAkB,KAAK,mBAAmB;AAAA,EAClD;AACD;AAEO,MAAM,mBAAmB;AAAA,EAtahC,OAsagC;AAAA;AAAA;AAAA,EACvB;AAAA,EAGR,MAAc,uBAAuB;AACpC,QAAI,CAAC,KAAK,mBAAmB;AAC5B,WAAK,oBAAoB,MAAM,oBAE7B,4BAA4B,qBAAqB;AAAA,IACpD;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EACR,MAAa,iBAAiB;AAC7B,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,gBAAgB,MAAM,KAAK,qBAAqB,GAAG;AAAA,IACzD;AACA,WAAO,KAAK;AAAA,EACb;AACD;AAEO,IAAM,6BAAN,cACE,WAET;AAAA,EAiBC,YAA4C,eAC7B,aACsB,mBACN,aACU,uBACF,qBACrC;AACD,UAAM;AAPqC;AAEP;AACN;AACU;AACF;AAGtC,SAAK,uBAAuB,KAAK,UAAU,IAAI,oBAAoB,KAAK,qBAAqB,aAAa,KAAK,qBAAqB,KAAK,oBAAoB,CAAC;AAC9J,SAAK,mBAAmB,KAAK,qBAAqB;AAClD,SAAK,UAAU,KAAK,sBAAsB,yBAAyB,OAAK;AACvE,UAAI,EAAE,qBAAqB,qCAAqC,GAAG;AAClE,aAAK,2BAA2B;AAAA,MACjC;AAAA,IACD,CAAC,CAAC;AACF,SAAK,2BAA2B;AAAA,EACjC;AAAA,EAheD,OA+bA;AAAA;AAAA;AAAA,EACU;AAAA,EACD;AAAA,EACA,wBAGJ,KAAK,UAAU,IAAI,cAAc,CAAC;AAAA,EACrB,uBAA4C,oBAAI,IAAI;AAAA,EACpD,sBAChB,IAAI,mBAAmB;AAAA,EACP;AAAA,EAED;AAAA,EAuBhB,kBAAkB,YAAiD;AAClE,WAAO,KAAK,qBAAqB,kBAAkB,UAAU;AAAA,EAC9D;AAAA,EAEA,eAAe,WAA2D;AACzE,UAAM,sBAAsB,KAAK,sBAAsB,IAAI,SAAS;AACpE,WAAO,qBAAqB;AAAA,EAC7B;AAAA,EAEA,MAAc,gBAAgB;AAC7B,UAAM,SAAS,MAAM,KAAK,oBAAoB,eAAe;AAC7D,UAAM,qBAAqB,KAAK;AAChC,UAAM,OAAO,KAAK;AAAA,MACjB,WAAW,OAAe,SAAiB;AAC1C,eAAO,WAAW;AAAA,UACjB,GAAG,kBAAkB,kBAAkB,CAAC,IAAI,wBAAwB;AAAA,QACrE,EAAE,SAAS,IAAI;AAAA,MAChB;AAAA,IACD,CAAC;AACD,WAAO;AAAA,EACR;AAAA,EAEQ,WAAW;AAAA,EACnB,MAAc,YAAY,cAAyC;AAClE,QAAI,KAAK,UAAU;AAClB,aAAO,KAAK;AAAA,IACb;AAEA,QAAI,cAAc;AACjB,WAAK,WAAW;AAChB,WAAK,QAAQ,KAAK,cAAc;AAGhC,WAAK,MAAM,KAAK,MAAM,KAAK,+BAA+B,CAAC;AAAA,IAC5D,OAAO;AACN,WAAK,QAAQ,QAAQ,QAAQ,KAAK;AAAA,IACnC;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,6BAA6B;AAC1C,UAAM,UAAU,KAAK,YAAY;AAEjC,QAAI,eAAe;AACnB,QAAI,QAAQ,WAAW,GAAG;AACzB,qBAAe;AAAA,IAChB;AAEA,QAAI,MAAM,KAAK,YAAY,YAAY,GAAG;AAEzC,UAAI,QAAQ,SAAS,YAAY,GAAG;AACnC,aAAK,YAAY,cAAc,wBAAwB;AAAA,MACxD,OAAO;AACN,aAAK,eAAe,YAAY;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,cAAwB;AAC/B,UAAM,UAAU,KAAK,sBAAsB;AAAA,MAC1C;AAAA,IACD;AACA,QAAI,WAAW,QAAQ,SAAS,GAAG;AAClC,aAAO;AAAA,IACR,OAAO;AACN,YAAM,aAAa,KAAK,sBAAsB;AAAA,QAC7C;AAAA,MACD;AACA,UAAI,YAAY;AACf,eAAO,CAAC,YAAY;AAAA,MACrB;AAAA,IACD;AACA,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAc,iCAAiC;AAC9C,SAAK;AAAA,MACJ,KAAK,cAAc,aAAa,CAAC,UAAU;AAC1C,aAAK,2BAA2B,KAAK;AAAA,MACtC,CAAC;AAAA,IACF;AACA,SAAK;AAAA,MACJ,KAAK,cAAc,eAAe,CAAC,UAAU;AAC5C,aAAK,sBAAsB,iBAAiB,KAAK;AAAA,MAClD,CAAC;AAAA,IACF;AACA,SAAK,cACH,UAAU,EACV,QAAQ,CAAC,UAAU,KAAK,2BAA2B,KAAK,CAAC;AAAA,EAC5D;AAAA,EAEQ,2BAA2B,OAAmB;AACrD,UAAM,sBAAsB,IAAI;AAAA,MAC/B;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AACA,SAAK,sBAAsB,IAAI,OAAO,mBAAmB;AAAA,EAC1D;AAAA,EAEQ,YAAY,YAAoB,aAAqB;AAC5D,QAAI,CAAC,KAAK,qBAAqB,IAAI,UAAU,GAAG;AAC/C,WAAK,qBAAqB,IAAI,YAAY,WAAW;AAAA,IACtD;AAAA,EACD;AAAA,EAEQ,eAAe,YAAoB;AAC1C,QAAI,KAAK,qBAAqB,IAAI,UAAU,GAAG;AAC9C,WAAK,qBAAqB,OAAO,YAAY;AAAA,IAC9C;AAAA,EACD;AACD;AAvJa,6BAAN;AAAA,EAoBO;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAzBU;AAyJb,MAAM,sBAAyB;AAAA,EAS9B,YAA4B,SAAqB;AAArB;AAC3B,YACE,KAAK,CAAC,WAAW;AACjB,WAAK,UAAU,IAAI,cAAc,QAAQ,MAAS;AAAA,IACnD,CAAC,EACA,MAAM,CAAC,MAAM;AACb,WAAK,UAAU,IAAI,cAAiB,QAAW,CAAC;AAAA,IACjD,CAAC;AAAA,EACH;AAAA,EAtmBD,OAqlB+B;AAAA;AAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIR,IAAI,SAAuC;AAC1C,WAAO,KAAK;AAAA,EACb;AAWD;AAEA,MAAM,WAAoB;AAAA,EAzmB1B,OAymB0B;AAAA;AAAA;AAAA,EACR,UAAU,oBAAI,IAAoC;AAAA,EAEnE,IAAI,KAAW,SAAqB;AACnC,SAAK,QAAQ,IAAI,KAAK,IAAI,sBAAsB,OAAO,CAAC;AAAA,EACzD;AAAA,EAEA,IAAI,KAAmC;AACtC,WAAO,KAAK,QAAQ,IAAI,GAAG,GAAG;AAAA,EAC/B;AAAA,EAEA,gBAAgB,KAA0B;AACzC,WAAO,KAAK,QAAQ,IAAI,GAAG,GAAG,QAAQ;AAAA,EACvC;AAAA,EAEA,SAAS,KAAoB;AAC5B,WAAO,KAAK,QAAQ,IAAI,GAAG,GAAG,WAAW;AAAA,EAC1C;AACD;",
  "names": ["TelemetryParseType"]
}
