{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/services/codeEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type { ITextResourceEditorInput } from \"../../../platform/editor/common/editor.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { IDecorationRenderOptions } from \"../../common/editorCommon.js\";\nimport type {\n\tIModelDecorationOptions,\n\tITextModel,\n} from \"../../common/model.js\";\nimport type { ICodeEditor, IDiffEditor } from \"../editorBrowser.js\";\n\nexport const ICodeEditorService =\n\tcreateDecorator<ICodeEditorService>(\"codeEditorService\");\n\nexport interface ICodeEditorService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onWillCreateCodeEditor: Event<void>;\n\treadonly onCodeEditorAdd: Event<ICodeEditor>;\n\treadonly onCodeEditorRemove: Event<ICodeEditor>;\n\n\treadonly onWillCreateDiffEditor: Event<void>;\n\treadonly onDiffEditorAdd: Event<IDiffEditor>;\n\treadonly onDiffEditorRemove: Event<IDiffEditor>;\n\n\treadonly onDidChangeTransientModelProperty: Event<ITextModel>;\n\treadonly onDecorationTypeRegistered: Event<string>;\n\n\twillCreateCodeEditor(): void;\n\taddCodeEditor(editor: ICodeEditor): void;\n\tremoveCodeEditor(editor: ICodeEditor): void;\n\tlistCodeEditors(): readonly ICodeEditor[];\n\n\twillCreateDiffEditor(): void;\n\taddDiffEditor(editor: IDiffEditor): void;\n\tremoveDiffEditor(editor: IDiffEditor): void;\n\tlistDiffEditors(): readonly IDiffEditor[];\n\n\t/**\n\t * Returns the current focused code editor (if the focus is in the editor or in an editor widget) or null.\n\t */\n\tgetFocusedCodeEditor(): ICodeEditor | null;\n\n\tregisterDecorationType(\n\t\tdescription: string,\n\t\tkey: string,\n\t\toptions: IDecorationRenderOptions,\n\t\tparentTypeKey?: string,\n\t\teditor?: ICodeEditor,\n\t): void;\n\tlistDecorationTypes(): string[];\n\tremoveDecorationType(key: string): void;\n\tresolveDecorationOptions(\n\t\ttypeKey: string,\n\t\twritable: boolean,\n\t): IModelDecorationOptions;\n\tresolveDecorationCSSRules(decorationTypeKey: string): CSSRuleList | null;\n\n\tsetModelProperty(resource: URI, key: string, value: any): void;\n\tgetModelProperty(resource: URI, key: string): any;\n\n\tsetTransientModelProperty(model: ITextModel, key: string, value: any): void;\n\tgetTransientModelProperty(model: ITextModel, key: string): any;\n\tgetTransientModelProperties(model: ITextModel): [string, any][] | undefined;\n\n\tgetActiveCodeEditor(): ICodeEditor | null;\n\topenCodeEditor(\n\t\tinput: ITextResourceEditorInput,\n\t\tsource: ICodeEditor | null,\n\t\tsideBySide?: boolean,\n\t): Promise<ICodeEditor | null>;\n\tregisterCodeEditorOpenHandler(handler: ICodeEditorOpenHandler): IDisposable;\n}\n\nexport interface ICodeEditorOpenHandler {\n\t(\n\t\tinput: ITextResourceEditorInput,\n\t\tsource: ICodeEditor | null,\n\t\tsideBySide?: boolean,\n\t): Promise<ICodeEditor | null>;\n}\n"],
  "mappings": "AASA,SAAS,uBAAuB;AAQzB,MAAM,qBACZ,gBAAoC,mBAAmB;",
  "names": []
}
