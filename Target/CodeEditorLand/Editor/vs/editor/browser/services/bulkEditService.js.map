{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/browser/services/bulkEditService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from '../editorBrowser.js';\nimport { TextEdit, WorkspaceEdit, WorkspaceEditMetadata, IWorkspaceFileEdit, WorkspaceFileEditOptions, IWorkspaceTextEdit } from '../../common/languages.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IProgress, IProgressStep } from '../../../platform/progress/common/progress.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { isObject } from '../../../base/common/types.js';\nimport { UndoRedoSource } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\n\nexport const IBulkEditService = createDecorator<IBulkEditService>('IWorkspaceEditService');\n\nexport class ResourceEdit {\n\n\tprotected constructor(readonly metadata?: WorkspaceEditMetadata) { }\n\n\tstatic convert(edit: WorkspaceEdit): ResourceEdit[] {\n\n\t\treturn edit.edits.map(edit => {\n\t\t\tif (ResourceTextEdit.is(edit)) {\n\t\t\t\treturn ResourceTextEdit.lift(edit);\n\t\t\t}\n\n\t\t\tif (ResourceFileEdit.is(edit)) {\n\t\t\t\treturn ResourceFileEdit.lift(edit);\n\t\t\t}\n\t\t\tthrow new Error('Unsupported edit');\n\t\t});\n\t}\n}\n\nexport class ResourceTextEdit extends ResourceEdit implements IWorkspaceTextEdit {\n\n\tstatic is(candidate: any): candidate is IWorkspaceTextEdit {\n\t\tif (candidate instanceof ResourceTextEdit) {\n\t\t\treturn true;\n\t\t}\n\t\treturn isObject(candidate)\n\t\t\t&& URI.isUri((<IWorkspaceTextEdit>candidate).resource)\n\t\t\t&& isObject((<IWorkspaceTextEdit>candidate).textEdit);\n\t}\n\n\tstatic lift(edit: IWorkspaceTextEdit): ResourceTextEdit {\n\t\tif (edit instanceof ResourceTextEdit) {\n\t\t\treturn edit;\n\t\t} else {\n\t\t\treturn new ResourceTextEdit(edit.resource, edit.textEdit, edit.versionId, edit.metadata);\n\t\t}\n\t}\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly textEdit: TextEdit & { insertAsSnippet?: boolean },\n\t\treadonly versionId: number | undefined = undefined,\n\t\tmetadata?: WorkspaceEditMetadata,\n\t) {\n\t\tsuper(metadata);\n\t}\n}\n\nexport class ResourceFileEdit extends ResourceEdit implements IWorkspaceFileEdit {\n\n\tstatic is(candidate: any): candidate is IWorkspaceFileEdit {\n\t\tif (candidate instanceof ResourceFileEdit) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn isObject(candidate)\n\t\t\t\t&& (Boolean((<IWorkspaceFileEdit>candidate).newResource) || Boolean((<IWorkspaceFileEdit>candidate).oldResource));\n\t\t}\n\t}\n\n\tstatic lift(edit: IWorkspaceFileEdit): ResourceFileEdit {\n\t\tif (edit instanceof ResourceFileEdit) {\n\t\t\treturn edit;\n\t\t} else {\n\t\t\treturn new ResourceFileEdit(edit.oldResource, edit.newResource, edit.options, edit.metadata);\n\t\t}\n\t}\n\n\tconstructor(\n\t\treadonly oldResource: URI | undefined,\n\t\treadonly newResource: URI | undefined,\n\t\treadonly options: WorkspaceFileEditOptions = {},\n\t\tmetadata?: WorkspaceEditMetadata\n\t) {\n\t\tsuper(metadata);\n\t}\n}\n\nexport interface IBulkEditOptions {\n\teditor?: ICodeEditor;\n\tprogress?: IProgress<IProgressStep>;\n\ttoken?: CancellationToken;\n\tshowPreview?: boolean;\n\tlabel?: string;\n\tcode?: string;\n\tquotableLabel?: string;\n\tundoRedoSource?: UndoRedoSource;\n\tundoRedoGroupId?: number;\n\tconfirmBeforeUndo?: boolean;\n\trespectAutoSaveConfig?: boolean;\n}\n\nexport interface IBulkEditResult {\n\tariaSummary: string;\n\tisApplied: boolean;\n}\n\nexport type IBulkEditPreviewHandler = (edits: ResourceEdit[], options?: IBulkEditOptions) => Promise<ResourceEdit[]>;\n\nexport interface IBulkEditService {\n\treadonly _serviceBrand: undefined;\n\n\thasPreviewHandler(): boolean;\n\n\tsetPreviewHandler(handler: IBulkEditPreviewHandler): IDisposable;\n\n\tapply(edit: ResourceEdit[] | WorkspaceEdit, options?: IBulkEditOptions): Promise<IBulkEditResult>;\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,UAAU,eAAe,uBAAuB,oBAAoB,0BAA0B,0BAA0B;AACjI,SAAS,uBAAuB;AAChC,SAAS,WAAW,qBAAqB;AACzC,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAE3B,MAAM,mBAAmB,gBAAkC,uBAAuB;AAElF,MAAM,aAAa;AAAA,EAEf,YAAqB,UAAkC;AAAlC;AAAA,EAAoC;AAAA,EAnBpE,OAiB0B;AAAA;AAAA;AAAA,EAIzB,OAAO,QAAQ,MAAqC;AAEnD,WAAO,KAAK,MAAM,IAAI,CAAAA,UAAQ;AAC7B,UAAI,iBAAiB,GAAGA,KAAI,GAAG;AAC9B,eAAO,iBAAiB,KAAKA,KAAI;AAAA,MAClC;AAEA,UAAI,iBAAiB,GAAGA,KAAI,GAAG;AAC9B,eAAO,iBAAiB,KAAKA,KAAI;AAAA,MAClC;AACA,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACnC,CAAC;AAAA,EACF;AACD;AAEO,MAAM,yBAAyB,aAA2C;AAAA,EAmBhF,YACU,UACA,UACA,YAAgC,QACzC,UACC;AACD,UAAM,QAAQ;AALL;AACA;AACA;AAAA,EAIV;AAAA,EA9DD,OAoCiF;AAAA;AAAA;AAAA,EAEhF,OAAO,GAAG,WAAiD;AAC1D,QAAI,qBAAqB,kBAAkB;AAC1C,aAAO;AAAA,IACR;AACA,WAAO,SAAS,SAAS,KACrB,IAAI,MAA2B,UAAW,QAAQ,KAClD,SAA8B,UAAW,QAAQ;AAAA,EACtD;AAAA,EAEA,OAAO,KAAK,MAA4C;AACvD,QAAI,gBAAgB,kBAAkB;AACrC,aAAO;AAAA,IACR,OAAO;AACN,aAAO,IAAI,iBAAiB,KAAK,UAAU,KAAK,UAAU,KAAK,WAAW,KAAK,QAAQ;AAAA,IACxF;AAAA,EACD;AAUD;AAEO,MAAM,yBAAyB,aAA2C;AAAA,EAmBhF,YACU,aACA,aACA,UAAoC,CAAC,GAC9C,UACC;AACD,UAAM,QAAQ;AALL;AACA;AACA;AAAA,EAIV;AAAA,EA3FD,OAiEiF;AAAA;AAAA;AAAA,EAEhF,OAAO,GAAG,WAAiD;AAC1D,QAAI,qBAAqB,kBAAkB;AAC1C,aAAO;AAAA,IACR,OAAO;AACN,aAAO,SAAS,SAAS,MACpB,QAA6B,UAAW,WAAW,KAAK,QAA6B,UAAW,WAAW;AAAA,IACjH;AAAA,EACD;AAAA,EAEA,OAAO,KAAK,MAA4C;AACvD,QAAI,gBAAgB,kBAAkB;AACrC,aAAO;AAAA,IACR,OAAO;AACN,aAAO,IAAI,iBAAiB,KAAK,aAAa,KAAK,aAAa,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC5F;AAAA,EACD;AAUD;",
  "names": ["edit"]
}
