import{DataTransfers as o}from"../../base/browser/dnd.js";import{UriList as T,VSDataTransfer as D,createFileDataTransferItem as I,createStringDataTransferItem as l}from"../../base/common/dataTransfer.js";import{Mimes as f}from"../../base/common/mime.js";import{URI as p}from"../../base/common/uri.js";import{CodeDataTransfers as m}from"../../platform/dnd/browser/dnd.js";function d(r){const a=new D;for(const t of r.items){const i=t.type;if(t.kind==="string"){const e=new Promise(n=>t.getAsString(n));a.append(i,l(e))}else if(t.kind==="file"){const e=t.getAsFile();e&&a.append(i,u(e))}}return a}function u(r){const a=r.path?p.parse(r.path):void 0;return I(r.name,a,async()=>new Uint8Array(await r.arrayBuffer()))}const S=Object.freeze([m.EDITORS,m.FILES,o.RESOURCES,o.INTERNAL_URI_LIST]);function E(r,a=!1){const t=d(r),i=t.get(o.INTERNAL_URI_LIST);if(i)t.replace(f.uriList,i);else if(a||!t.has(f.uriList)){const e=[];for(const n of r.items){const s=n.getAsFile();if(s){const c=s.path;try{c?e.push(p.file(c).toString()):e.push(p.parse(s.name,!0).toString())}catch{}}}e.length&&t.replace(f.uriList,l(T.create(e)))}for(const e of S)t.delete(e);return t}export{E as toExternalVSDataTransfer,d as toVSDataTransfer};
