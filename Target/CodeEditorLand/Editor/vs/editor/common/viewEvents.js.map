{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewEvents.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ScrollEvent } from '../../base/common/scrollable.js';\nimport { ConfigurationChangedEvent, EditorOption } from './config/editorOptions.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { CursorChangeReason } from './cursorEvents.js';\nimport { ScrollType } from './editorCommon.js';\nimport { IModelDecorationsChangedEvent } from './textModelEvents.js';\nimport { IColorTheme } from '../../platform/theme/common/themeService.js';\n\nexport const enum ViewEventType {\n\tViewCompositionStart,\n\tViewCompositionEnd,\n\tViewConfigurationChanged,\n\tViewCursorStateChanged,\n\tViewDecorationsChanged,\n\tViewFlushed,\n\tViewFocusChanged,\n\tViewLanguageConfigurationChanged,\n\tViewLineMappingChanged,\n\tViewLinesChanged,\n\tViewLinesDeleted,\n\tViewLinesInserted,\n\tViewRevealRangeRequest,\n\tViewScrollChanged,\n\tViewThemeChanged,\n\tViewTokensChanged,\n\tViewTokensColorsChanged,\n\tViewZonesChanged,\n}\n\nexport class ViewCompositionStartEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionStart;\n\tconstructor() { }\n}\n\nexport class ViewCompositionEndEvent {\n\tpublic readonly type = ViewEventType.ViewCompositionEnd;\n\tconstructor() { }\n}\n\nexport class ViewConfigurationChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewConfigurationChanged;\n\n\tpublic readonly _source: ConfigurationChangedEvent;\n\n\tconstructor(source: ConfigurationChangedEvent) {\n\t\tthis._source = source;\n\t}\n\n\tpublic hasChanged(id: EditorOption): boolean {\n\t\treturn this._source.hasChanged(id);\n\t}\n}\n\nexport class ViewCursorStateChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewCursorStateChanged;\n\n\tconstructor(\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly modelSelections: Selection[],\n\t\tpublic readonly reason: CursorChangeReason\n\t) { }\n}\n\nexport class ViewDecorationsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewDecorationsChanged;\n\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n\n\tconstructor(source: IModelDecorationsChangedEvent | null) {\n\t\tif (source) {\n\t\t\tthis.affectsMinimap = source.affectsMinimap;\n\t\t\tthis.affectsOverviewRuler = source.affectsOverviewRuler;\n\t\t\tthis.affectsGlyphMargin = source.affectsGlyphMargin;\n\t\t\tthis.affectsLineNumber = source.affectsLineNumber;\n\t\t} else {\n\t\t\tthis.affectsMinimap = true;\n\t\t\tthis.affectsOverviewRuler = true;\n\t\t\tthis.affectsGlyphMargin = true;\n\t\t\tthis.affectsLineNumber = true;\n\t\t}\n\t}\n}\n\nexport class ViewFlushedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFlushed;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewFocusChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewFocusChanged;\n\n\tpublic readonly isFocused: boolean;\n\n\tconstructor(isFocused: boolean) {\n\t\tthis.isFocused = isFocused;\n\t}\n}\n\nexport class ViewLanguageConfigurationEvent {\n\n\tpublic readonly type = ViewEventType.ViewLanguageConfigurationChanged;\n}\n\nexport class ViewLineMappingChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLineMappingChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewLinesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesChanged;\n\n\tconstructor(\n\t\t/**\n\t\t * The first line that has changed.\n\t\t */\n\t\tpublic readonly fromLineNumber: number,\n\t\t/**\n\t\t * The number of lines that have changed.\n\t\t */\n\t\tpublic readonly count: number,\n\t) { }\n}\n\nexport class ViewLinesDeletedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesDeleted;\n\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport class ViewLinesInsertedEvent {\n\n\tpublic readonly type = ViewEventType.ViewLinesInserted;\n\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\nexport const enum VerticalRevealType {\n\tSimple = 0,\n\tCenter = 1,\n\tCenterIfOutsideViewport = 2,\n\tTop = 3,\n\tBottom = 4,\n\tNearTop = 5,\n\tNearTopIfOutsideViewport = 6,\n}\n\nexport class ViewRevealRangeRequestEvent {\n\n\tpublic readonly type = ViewEventType.ViewRevealRangeRequest;\n\n\n\tconstructor(\n\t\t/**\n\t\t * Source of the call that caused the event.\n\t\t */\n\t\tpublic readonly source: string | null | undefined,\n\t\t/**\n\t\t * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n\t\t */\n\t\tpublic readonly minimalReveal: boolean,\n\t\t/**\n\t\t * Range to be reavealed.\n\t\t */\n\t\tpublic readonly range: Range | null,\n\t\t/**\n\t\t * Selections to be revealed.\n\t\t */\n\t\tpublic readonly selections: Selection[] | null,\n\t\t/**\n\t\t * The vertical reveal strategy.\n\t\t */\n\t\tpublic readonly verticalType: VerticalRevealType,\n\t\t/**\n\t\t * If true: there should be a horizontal & vertical revealing.\n\t\t * If false: there should be just a vertical revealing.\n\t\t */\n\t\tpublic readonly revealHorizontal: boolean,\n\t\t/**\n\t\t * The scroll type.\n\t\t */\n\t\tpublic readonly scrollType: ScrollType\n\t) { }\n}\n\nexport class ViewScrollChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewScrollChanged;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollLeft: number;\n\tpublic readonly scrollHeight: number;\n\tpublic readonly scrollTop: number;\n\n\tpublic readonly scrollWidthChanged: boolean;\n\tpublic readonly scrollLeftChanged: boolean;\n\tpublic readonly scrollHeightChanged: boolean;\n\tpublic readonly scrollTopChanged: boolean;\n\n\tconstructor(source: ScrollEvent) {\n\t\tthis.scrollWidth = source.scrollWidth;\n\t\tthis.scrollLeft = source.scrollLeft;\n\t\tthis.scrollHeight = source.scrollHeight;\n\t\tthis.scrollTop = source.scrollTop;\n\n\t\tthis.scrollWidthChanged = source.scrollWidthChanged;\n\t\tthis.scrollLeftChanged = source.scrollLeftChanged;\n\t\tthis.scrollHeightChanged = source.scrollHeightChanged;\n\t\tthis.scrollTopChanged = source.scrollTopChanged;\n\t}\n}\n\nexport class ViewThemeChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewThemeChanged;\n\n\tconstructor(\n\t\tpublic readonly theme: IColorTheme\n\t) { }\n}\n\nexport class ViewTokensChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensChanged;\n\n\tpublic readonly ranges: {\n\t\t/**\n\t\t * Start line number of range\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * End line number of range\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n\n\tconstructor(ranges: { fromLineNumber: number; toLineNumber: number }[]) {\n\t\tthis.ranges = ranges;\n\t}\n}\n\nexport class ViewTokensColorsChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewTokensColorsChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport class ViewZonesChangedEvent {\n\n\tpublic readonly type = ViewEventType.ViewZonesChanged;\n\n\tconstructor() {\n\t\t// Nothing to do\n\t}\n}\n\nexport type ViewEvent = (\n\tViewCompositionStartEvent\n\t| ViewCompositionEndEvent\n\t| ViewConfigurationChangedEvent\n\t| ViewCursorStateChangedEvent\n\t| ViewDecorationsChangedEvent\n\t| ViewFlushedEvent\n\t| ViewFocusChangedEvent\n\t| ViewLanguageConfigurationEvent\n\t| ViewLineMappingChangedEvent\n\t| ViewLinesChangedEvent\n\t| ViewLinesDeletedEvent\n\t| ViewLinesInsertedEvent\n\t| ViewRevealRangeRequestEvent\n\t| ViewScrollChangedEvent\n\t| ViewThemeChangedEvent\n\t| ViewTokensChangedEvent\n\t| ViewTokensColorsChangedEvent\n\t| ViewZonesChangedEvent\n);\n"],
  "mappings": "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",
  "names": ["ViewEventType", "VerticalRevealType"]
}
