import{splitLines as r}from"../../../base/common/strings.js";import{Position as l}from"../core/position.js";import{PrefixSumComputer as o}from"./prefixSumComputer.js";class _{_uri;_lines;_eol;_versionId;_lineStarts;_cachedTextValue;constructor(e,n,t,i){this._uri=e,this._lines=n,this._eol=t,this._versionId=i,this._lineStarts=null,this._cachedTextValue=null}dispose(){this._lines.length=0}get version(){return this._versionId}getText(){return this._cachedTextValue===null&&(this._cachedTextValue=this._lines.join(this._eol)),this._cachedTextValue}onEvents(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);const n=e.changes;for(const t of n)this._acceptDeleteRange(t.range),this._acceptInsertText(new l(t.range.startLineNumber,t.range.startColumn),t.text);this._versionId=e.versionId,this._cachedTextValue=null}_ensureLineStarts(){if(!this._lineStarts){const e=this._eol.length,n=this._lines.length,t=new Uint32Array(n);for(let i=0;i<n;i++)t[i]=this._lines[i].length+e;this._lineStarts=new o(t)}}_setLineText(e,n){this._lines[e]=n,this._lineStarts&&this._lineStarts.setValue(e,this._lines[e].length+this._eol.length)}_acceptDeleteRange(e){if(e.startLineNumber===e.endLineNumber){if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1));return}this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber)}_acceptInsertText(e,n){if(n.length===0)return;const t=r(n);if(t.length===1){this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+t[0]+this._lines[e.lineNumber-1].substring(e.column-1));return}t[t.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+t[0]);const i=new Uint32Array(t.length-1);for(let s=1;s<t.length;s++)this._lines.splice(e.lineNumber+s-1,0,t[s]),i[s-1]=t[s].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,i)}}export{_ as MirrorTextModel};
