import{equals as s}from"../../../base/common/arrays.js";import{RunOnceScheduler as d}from"../../../base/common/async.js";import{Emitter as o}from"../../../base/common/event.js";import{Disposable as r}from"../../../base/common/lifecycle.js";import{LineRange as l}from"../core/lineRange.js";import{BackgroundTokenizationState as c}from"../tokenizationTextModelPart.js";class T{_onDidChangeVisibleRanges=new o;onDidChangeVisibleRanges=this._onDidChangeVisibleRanges.event;_views=new Set;attachView(){const t=new h(e=>{this._onDidChangeVisibleRanges.fire({view:t,state:e})});return this._views.add(t),t}detachView(t){this._views.delete(t),this._onDidChangeVisibleRanges.fire({view:t,state:void 0})}}class h{constructor(t){this.handleStateChange=t}setVisibleLines(t,e){const n=t.map(a=>new l(a.startLineNumber,a.endLineNumber+1));this.handleStateChange({visibleLineRanges:n,stabilized:e})}}class v extends r{constructor(e){super();this._refreshTokens=e}runner=this._register(new d(()=>this.update(),50));_computedLineRanges=[];_lineRanges=[];get lineRanges(){return this._lineRanges}update(){s(this._computedLineRanges,this._lineRanges,(e,n)=>e.equals(n))||(this._computedLineRanges=this._lineRanges,this._refreshTokens())}handleStateChange(e){this._lineRanges=e.visibleLineRanges,e.stabilized?(this.runner.cancel(),this.update()):this.runner.schedule()}}class C extends r{constructor(e,n,a){super();this._languageIdCodec=e;this._textModel=n;this.getLanguageId=a}_backgroundTokenizationState=c.InProgress;get backgroundTokenizationState(){return this._backgroundTokenizationState}_onDidChangeBackgroundTokenizationState=this._register(new o);onDidChangeBackgroundTokenizationState=this._onDidChangeBackgroundTokenizationState.event;_onDidChangeTokens=this._register(new o);onDidChangeTokens=this._onDidChangeTokens.event;tokenizeIfCheap(e){this.isCheapToTokenize(e)&&this.forceTokenization(e)}}export{C as AbstractTokens,v as AttachedViewHandler,T as AttachedViews};
