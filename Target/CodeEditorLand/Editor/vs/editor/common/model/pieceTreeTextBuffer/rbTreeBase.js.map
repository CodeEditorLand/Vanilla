{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Piece, PieceTreeBase } from \"./pieceTreeBase.js\";\n\nexport class TreeNode {\n\tparent: TreeNode;\n\tleft: TreeNode;\n\tright: TreeNode;\n\tcolor: NodeColor;\n\n\t// Piece\n\tpiece: Piece;\n\tsize_left: number; // size of the left subtree (not inorder)\n\tlf_left: number; // line feeds cnt in the left subtree (not in order)\n\n\tconstructor(piece: Piece, color: NodeColor) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.size_left = 0;\n\t\tthis.lf_left = 0;\n\t\tthis.parent = this;\n\t\tthis.left = this;\n\t\tthis.right = this;\n\t}\n\n\tpublic next(): TreeNode {\n\t\tif (this.right !== SENTINEL) {\n\t\t\treturn leftest(this.right);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.left === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic prev(): TreeNode {\n\t\tif (this.left !== SENTINEL) {\n\t\t\treturn righttest(this.left);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.right === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic detach(): void {\n\t\tthis.parent = null!;\n\t\tthis.left = null!;\n\t\tthis.right = null!;\n\t}\n}\n\nexport enum NodeColor {\n\tBlack = 0,\n\tRed = 1,\n}\n\nexport const SENTINEL: TreeNode = new TreeNode(null!, NodeColor.Black);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = NodeColor.Black;\n\nexport function leftest(node: TreeNode): TreeNode {\n\twhile (node.left !== SENTINEL) {\n\t\tnode = node.left;\n\t}\n\treturn node;\n}\n\nexport function righttest(node: TreeNode): TreeNode {\n\twhile (node.right !== SENTINEL) {\n\t\tnode = node.right;\n\t}\n\treturn node;\n}\n\nfunction calculateSize(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.size_left + node.piece.length + calculateSize(node.right);\n}\n\nfunction calculateLF(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\n\nfunction resetSentinel(): void {\n\tSENTINEL.parent = SENTINEL;\n}\n\nexport function leftRotate(tree: PieceTreeBase, x: TreeNode) {\n\tconst y = x.right;\n\n\t// fix size_left\n\ty.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\tx.right = y.left;\n\n\tif (y.left !== SENTINEL) {\n\t\ty.left.parent = x;\n\t}\n\ty.parent = x.parent;\n\tif (x.parent === SENTINEL) {\n\t\ttree.root = y;\n\t} else if (x.parent.left === x) {\n\t\tx.parent.left = y;\n\t} else {\n\t\tx.parent.right = y;\n\t}\n\ty.left = x;\n\tx.parent = y;\n}\n\nexport function rightRotate(tree: PieceTreeBase, y: TreeNode) {\n\tconst x = y.left;\n\ty.left = x.right;\n\tif (x.right !== SENTINEL) {\n\t\tx.right.parent = y;\n\t}\n\tx.parent = y.parent;\n\n\t// fix size_left\n\ty.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\n\tif (y.parent === SENTINEL) {\n\t\ttree.root = x;\n\t} else if (y === y.parent.right) {\n\t\ty.parent.right = x;\n\t} else {\n\t\ty.parent.left = x;\n\t}\n\n\tx.right = y;\n\ty.parent = x;\n}\n\nexport function rbDelete(tree: PieceTreeBase, z: TreeNode) {\n\tlet x: TreeNode;\n\tlet y: TreeNode;\n\n\tif (z.left === SENTINEL) {\n\t\ty = z;\n\t\tx = y.right;\n\t} else if (z.right === SENTINEL) {\n\t\ty = z;\n\t\tx = y.left;\n\t} else {\n\t\ty = leftest(z.right);\n\t\tx = y.right;\n\t}\n\n\tif (y === tree.root) {\n\t\ttree.root = x;\n\n\t\t// if x is null, we are removing the only node\n\t\tx.color = NodeColor.Black;\n\t\tz.detach();\n\t\tresetSentinel();\n\t\ttree.root.parent = SENTINEL;\n\n\t\treturn;\n\t}\n\n\tconst yWasRed = y.color === NodeColor.Red;\n\n\tif (y === y.parent.left) {\n\t\ty.parent.left = x;\n\t} else {\n\t\ty.parent.right = x;\n\t}\n\n\tif (y === z) {\n\t\tx.parent = y.parent;\n\t\trecomputeTreeMetadata(tree, x);\n\t} else {\n\t\tif (y.parent === z) {\n\t\t\tx.parent = y;\n\t\t} else {\n\t\t\tx.parent = y.parent;\n\t\t}\n\n\t\t// as we make changes to x's hierarchy, update size_left of subtree first\n\t\trecomputeTreeMetadata(tree, x);\n\n\t\ty.left = z.left;\n\t\ty.right = z.right;\n\t\ty.parent = z.parent;\n\t\ty.color = z.color;\n\n\t\tif (z === tree.root) {\n\t\t\ttree.root = y;\n\t\t} else if (z === z.parent.left) {\n\t\t\tz.parent.left = y;\n\t\t} else {\n\t\t\tz.parent.right = y;\n\t\t}\n\n\t\tif (y.left !== SENTINEL) {\n\t\t\ty.left.parent = y;\n\t\t}\n\t\tif (y.right !== SENTINEL) {\n\t\t\ty.right.parent = y;\n\t\t}\n\t\t// update metadata\n\t\t// we replace z with y, so in this sub tree, the length change is z.item.length\n\t\ty.size_left = z.size_left;\n\t\ty.lf_left = z.lf_left;\n\t\trecomputeTreeMetadata(tree, y);\n\t}\n\n\tz.detach();\n\n\tif (x.parent.left === x) {\n\t\tconst newSizeLeft = calculateSize(x);\n\t\tconst newLFLeft = calculateLF(x);\n\t\tif (\n\t\t\tnewSizeLeft !== x.parent.size_left ||\n\t\t\tnewLFLeft !== x.parent.lf_left\n\t\t) {\n\t\t\tconst delta = newSizeLeft - x.parent.size_left;\n\t\t\tconst lf_delta = newLFLeft - x.parent.lf_left;\n\t\t\tx.parent.size_left = newSizeLeft;\n\t\t\tx.parent.lf_left = newLFLeft;\n\t\t\tupdateTreeMetadata(tree, x.parent, delta, lf_delta);\n\t\t}\n\t}\n\n\trecomputeTreeMetadata(tree, x.parent);\n\n\tif (yWasRed) {\n\t\tresetSentinel();\n\t\treturn;\n\t}\n\n\t// RB-DELETE-FIXUP\n\tlet w: TreeNode;\n\twhile (x !== tree.root && x.color === NodeColor.Black) {\n\t\tif (x === x.parent.left) {\n\t\t\tw = x.parent.right;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tw = x.parent.right;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tw.left.color === NodeColor.Black &&\n\t\t\t\tw.right.color === NodeColor.Black\n\t\t\t) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\t\t\t} else {\n\t\t\t\tif (w.right.color === NodeColor.Black) {\n\t\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\trightRotate(tree, w);\n\t\t\t\t\tw = x.parent.right;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t} else {\n\t\t\tw = x.parent.left;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tw = x.parent.left;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tw.left.color === NodeColor.Black &&\n\t\t\t\tw.right.color === NodeColor.Black\n\t\t\t) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\t\t\t} else {\n\t\t\t\tif (w.left.color === NodeColor.Black) {\n\t\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\tleftRotate(tree, w);\n\t\t\t\t\tw = x.parent.left;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t}\n\t}\n\tx.color = NodeColor.Black;\n\tresetSentinel();\n}\n\nexport function fixInsert(tree: PieceTreeBase, x: TreeNode) {\n\trecomputeTreeMetadata(tree, x);\n\n\twhile (x !== tree.root && x.parent.color === NodeColor.Red) {\n\t\tif (x.parent === x.parent.parent.left) {\n\t\t\tconst y = x.parent.parent.right;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.right) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\tleftRotate(tree, x);\n\t\t\t\t}\n\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t} else {\n\t\t\tconst y = x.parent.parent.left;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.left) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\trightRotate(tree, x);\n\t\t\t\t}\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t}\n\t}\n\n\ttree.root.color = NodeColor.Black;\n}\n\nexport function updateTreeMetadata(\n\ttree: PieceTreeBase,\n\tx: TreeNode,\n\tdelta: number,\n\tlineFeedCntDelta: number,\n): void {\n\t// node length change or line feed count change\n\twhile (x !== tree.root && x !== SENTINEL) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lineFeedCntDelta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n\nexport function recomputeTreeMetadata(tree: PieceTreeBase, x: TreeNode) {\n\tlet delta = 0;\n\tlet lf_delta = 0;\n\tif (x === tree.root) {\n\t\treturn;\n\t}\n\n\t// go upwards till the node whose left subtree is changed.\n\twhile (x !== tree.root && x === x.parent.right) {\n\t\tx = x.parent;\n\t}\n\n\tif (x === tree.root) {\n\t\t// well, it means we add a node to the end (inorder)\n\t\treturn;\n\t}\n\n\t// x is the node whose right subtree is changed.\n\tx = x.parent;\n\n\tdelta = calculateSize(x.left) - x.size_left;\n\tlf_delta = calculateLF(x.left) - x.lf_left;\n\tx.size_left += delta;\n\tx.lf_left += lf_delta;\n\n\t// go upwards till root. O(logN)\n\twhile (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lf_delta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["NodeColor"]
}
