import{CharCode as f}from"../../../../base/common/charCode.js";import*as s from"../../../../base/common/strings.js";import{DefaultEndOfLine as p}from"../../model.js";import{StringBuffer as u,createLineStarts as _,createLineStartsFast as l}from"./pieceTreeBase.js";import{PieceTreeTextBuffer as m}from"./pieceTreeTextBuffer.js";class C{constructor(t,e,i,n,r,o,a,h,v){this._chunks=t;this._bom=e;this._cr=i;this._lf=n;this._crlf=r;this._containsRTL=o;this._containsUnusualLineTerminators=a;this._isBasicASCII=h;this._normalizeEOL=v}_getEOL(t){const e=this._cr+this._lf+this._crlf,i=this._cr+this._crlf;return e===0?t===p.LF?`
`:`\r
`:i>e/2?`\r
`:`
`}create(t){const e=this._getEOL(t),i=this._chunks;if(this._normalizeEOL&&(e===`\r
`&&(this._cr>0||this._lf>0)||e===`
`&&(this._cr>0||this._crlf>0)))for(let r=0,o=i.length;r<o;r++){const a=i[r].buffer.replace(/\r\n|\r|\n/g,e),h=l(a);i[r]=new u(a,h)}const n=new m(i,this._bom,e,this._containsRTL,this._containsUnusualLineTerminators,this._isBasicASCII,this._normalizeEOL);return{textBuffer:n,disposable:n}}getFirstLineText(t){return this._chunks[0].buffer.substr(0,t).split(/\r\n|\r|\n/)[0]}}class d{chunks;BOM;_hasPreviousChar;_previousChar;_tmpLineStarts;cr;lf;crlf;containsRTL;containsUnusualLineTerminators;isBasicASCII;constructor(){this.chunks=[],this.BOM="",this._hasPreviousChar=!1,this._previousChar=0,this._tmpLineStarts=[],this.cr=0,this.lf=0,this.crlf=0,this.containsRTL=!1,this.containsUnusualLineTerminators=!1,this.isBasicASCII=!0}acceptChunk(t){if(t.length===0)return;this.chunks.length===0&&s.startsWithUTF8BOM(t)&&(this.BOM=s.UTF8_BOM_CHARACTER,t=t.substr(1));const e=t.charCodeAt(t.length-1);e===f.CarriageReturn||e>=55296&&e<=56319?(this._acceptChunk1(t.substr(0,t.length-1),!1),this._hasPreviousChar=!0,this._previousChar=e):(this._acceptChunk1(t,!1),this._hasPreviousChar=!1,this._previousChar=e)}_acceptChunk1(t,e){!e&&t.length===0||(this._hasPreviousChar?this._acceptChunk2(String.fromCharCode(this._previousChar)+t):this._acceptChunk2(t))}_acceptChunk2(t){const e=_(this._tmpLineStarts,t);this.chunks.push(new u(t,e.lineStarts)),this.cr+=e.cr,this.lf+=e.lf,this.crlf+=e.crlf,e.isBasicASCII||(this.isBasicASCII=!1,this.containsRTL||(this.containsRTL=s.containsRTL(t)),this.containsUnusualLineTerminators||(this.containsUnusualLineTerminators=s.containsUnusualLineTerminators(t)))}finish(t=!0){return this._finish(),new C(this.chunks,this.BOM,this.cr,this.lf,this.crlf,this.containsRTL,this.containsUnusualLineTerminators,this.isBasicASCII,t)}_finish(){if(this.chunks.length===0&&this._acceptChunk1("",!0),this._hasPreviousChar){this._hasPreviousChar=!1;const t=this.chunks[this.chunks.length-1];t.buffer+=String.fromCharCode(this._previousChar);const e=l(t.buffer);t.lineStarts=e,this._previousChar===f.CarriageReturn&&this.cr++}}}export{d as PieceTreeTextBufferBuilder};
