{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/treeSitterTokens.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { StandardTokenType } from \"../encodedTokenAttributes.js\";\nimport {\n\ttype ILanguageIdCodec,\n\ttype ITreeSitterTokenizationSupport,\n\tTreeSitterTokenizationRegistry,\n} from \"../languages.js\";\nimport type { ITreeSitterParserService } from \"../services/treeSitterParserService.js\";\nimport type { IModelContentChangedEvent } from \"../textModelEvents.js\";\nimport type {\n\tITokenizeLineWithEditResult,\n\tLineEditWithAdditionalLines,\n} from \"../tokenizationTextModelPart.js\";\nimport { LineTokens } from \"../tokens/lineTokens.js\";\nimport type { TextModel } from \"./textModel.js\";\nimport { AbstractTokens } from \"./tokens.js\";\n\nexport class TreeSitterTokens extends AbstractTokens {\n\tprivate _tokenizationSupport: ITreeSitterTokenizationSupport | null = null;\n\tprivate _lastLanguageId: string | undefined;\n\n\tconstructor(\n\t\tprivate readonly _treeSitterService: ITreeSitterParserService,\n\t\tlanguageIdCodec: ILanguageIdCodec,\n\t\ttextModel: TextModel,\n\t\tlanguageId: () => string,\n\t) {\n\t\tsuper(languageIdCodec, textModel, languageId);\n\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize() {\n\t\tconst newLanguage = this.getLanguageId();\n\t\tif (\n\t\t\t!this._tokenizationSupport ||\n\t\t\tthis._lastLanguageId !== newLanguage\n\t\t) {\n\t\t\tthis._lastLanguageId = newLanguage;\n\t\t\tthis._tokenizationSupport =\n\t\t\t\tTreeSitterTokenizationRegistry.get(newLanguage);\n\t\t}\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tconst content = this._textModel.getLineContent(lineNumber);\n\t\tif (this._tokenizationSupport) {\n\t\t\tconst rawTokens = this._tokenizationSupport.tokenizeEncoded(\n\t\t\t\tlineNumber,\n\t\t\t\tthis._textModel,\n\t\t\t);\n\t\t\tif (rawTokens) {\n\t\t\t\treturn new LineTokens(\n\t\t\t\t\trawTokens,\n\t\t\t\t\tcontent,\n\t\t\t\t\tthis._languageIdCodec,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn LineTokens.createEmpty(content, this._languageIdCodec);\n\t}\n\n\tpublic resetTokenization(fireTokenChangeEvent = true): void {\n\t\tif (fireTokenChangeEvent) {\n\t\t\tthis._onDidChangeTokens.fire({\n\t\t\t\tsemanticTokensApplied: false,\n\t\t\t\tranges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfromLineNumber: 1,\n\t\t\t\t\t\ttoLineNumber: this._textModel.getLineCount(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\tthis._initialize();\n\t}\n\n\tpublic override handleDidChangeAttached(): void {\n\t\t// TODO @alexr00 implement for background tokenization\n\t}\n\n\tpublic override handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\t// Don't fire the event, as the view might not have got the text change event yet\n\t\t\tthis.resetTokenization(false);\n\t\t}\n\t}\n\n\tpublic override forceTokenization(lineNumber: number): void {\n\t\t// TODO @alexr00 implement\n\t}\n\n\tpublic override hasAccurateTokensForLine(lineNumber: number): boolean {\n\t\t// TODO @alexr00 update for background tokenization\n\t\treturn true;\n\t}\n\n\tpublic override isCheapToTokenize(lineNumber: number): boolean {\n\t\t// TODO @alexr00 update for background tokenization\n\t\treturn true;\n\t}\n\n\tpublic override getTokenTypeIfInsertingCharacter(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tcharacter: string,\n\t): StandardTokenType {\n\t\t// TODO @alexr00 implement once we have custom parsing and don't just feed in the whole text model value\n\t\treturn StandardTokenType.Other;\n\t}\n\tpublic override tokenizeLineWithEdit(\n\t\tlineNumber: number,\n\t\tedit: LineEditWithAdditionalLines,\n\t): ITokenizeLineWithEditResult {\n\t\t// TODO @alexr00 understand what this is for and implement\n\t\treturn { mainLineTokens: null, additionalLines: null };\n\t}\n\tpublic override get hasTokens(): boolean {\n\t\t// TODO @alexr00 once we have a token store, implement properly\n\t\tconst hasTree =\n\t\t\tthis._treeSitterService.getParseResult(this._textModel) !==\n\t\t\tundefined;\n\t\treturn hasTree;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC;AAAA,EAGC;AAAA,OACM;AAOP,SAAS,kBAAkB;AAE3B,SAAS,sBAAsB;AAExB,MAAM,yBAAyB,eAAe;AAAA,EAIpD,YACkB,oBACjB,iBACA,WACA,YACC;AACD,UAAM,iBAAiB,WAAW,UAAU;AAL3B;AAOjB,SAAK,YAAY;AAAA,EAClB;AAAA,EAlCD,OAqBqD;AAAA;AAAA;AAAA,EAC5C,uBAA8D;AAAA,EAC9D;AAAA,EAaA,cAAc;AACrB,UAAM,cAAc,KAAK,cAAc;AACvC,QACC,CAAC,KAAK,wBACN,KAAK,oBAAoB,aACxB;AACD,WAAK,kBAAkB;AACvB,WAAK,uBACJ,+BAA+B,IAAI,WAAW;AAAA,IAChD;AAAA,EACD;AAAA,EAEO,cAAc,YAAgC;AACpD,UAAM,UAAU,KAAK,WAAW,eAAe,UAAU;AACzD,QAAI,KAAK,sBAAsB;AAC9B,YAAM,YAAY,KAAK,qBAAqB;AAAA,QAC3C;AAAA,QACA,KAAK;AAAA,MACN;AACA,UAAI,WAAW;AACd,eAAO,IAAI;AAAA,UACV;AAAA,UACA;AAAA,UACA,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AACA,WAAO,WAAW,YAAY,SAAS,KAAK,gBAAgB;AAAA,EAC7D;AAAA,EAEO,kBAAkB,uBAAuB,MAAY;AAC3D,QAAI,sBAAsB;AACzB,WAAK,mBAAmB,KAAK;AAAA,QAC5B,uBAAuB;AAAA,QACvB,QAAQ;AAAA,UACP;AAAA,YACC,gBAAgB;AAAA,YAChB,cAAc,KAAK,WAAW,aAAa;AAAA,UAC5C;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,YAAY;AAAA,EAClB;AAAA,EAEgB,0BAAgC;AAAA,EAEhD;AAAA,EAEgB,uBAAuB,GAAoC;AAC1E,QAAI,EAAE,SAAS;AAEd,WAAK,kBAAkB,KAAK;AAAA,IAC7B;AAAA,EACD;AAAA,EAEgB,kBAAkB,YAA0B;AAAA,EAE5D;AAAA,EAEgB,yBAAyB,YAA6B;AAErE,WAAO;AAAA,EACR;AAAA,EAEgB,kBAAkB,YAA6B;AAE9D,WAAO;AAAA,EACR;AAAA,EAEgB,iCACf,YACA,QACA,WACoB;AAEpB,WAAO,kBAAkB;AAAA,EAC1B;AAAA,EACgB,qBACf,YACA,MAC8B;AAE9B,WAAO,EAAE,gBAAgB,MAAM,iBAAiB,KAAK;AAAA,EACtD;AAAA,EACA,IAAoB,YAAqB;AAExC,UAAM,UACL,KAAK,mBAAmB,eAAe,KAAK,UAAU,MACtD;AACD,WAAO;AAAA,EACR;AACD;",
  "names": []
}
