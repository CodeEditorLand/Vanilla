{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/treeSitterTokens.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageIdCodec, ITreeSitterTokenizationSupport, TreeSitterTokenizationRegistry } from '../languages.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { TextModel } from './textModel.js';\nimport { ITreeSitterParserService } from '../services/treeSitterParserService.js';\nimport { IModelContentChangedEvent } from '../textModelEvents.js';\nimport { AbstractTokens } from './tokens.js';\nimport { ITokenizeLineWithEditResult, LineEditWithAdditionalLines } from '../tokenizationTextModelPart.js';\n\nexport class TreeSitterTokens extends AbstractTokens {\n\tprivate _tokenizationSupport: ITreeSitterTokenizationSupport | null = null;\n\tprivate _lastLanguageId: string | undefined;\n\n\tconstructor(private readonly _treeSitterService: ITreeSitterParserService,\n\t\tlanguageIdCodec: ILanguageIdCodec,\n\t\ttextModel: TextModel,\n\t\tlanguageId: () => string) {\n\t\tsuper(languageIdCodec, textModel, languageId);\n\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize() {\n\t\tconst newLanguage = this.getLanguageId();\n\t\tif (!this._tokenizationSupport || this._lastLanguageId !== newLanguage) {\n\t\t\tthis._lastLanguageId = newLanguage;\n\t\t\tthis._tokenizationSupport = TreeSitterTokenizationRegistry.get(newLanguage);\n\t\t}\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tconst content = this._textModel.getLineContent(lineNumber);\n\t\tif (this._tokenizationSupport) {\n\t\t\tconst rawTokens = this._tokenizationSupport.tokenizeEncoded(lineNumber, this._textModel);\n\t\t\tif (rawTokens) {\n\t\t\t\treturn new LineTokens(rawTokens, content, this._languageIdCodec);\n\t\t\t}\n\t\t}\n\t\treturn LineTokens.createEmpty(content, this._languageIdCodec);\n\t}\n\n\tpublic resetTokenization(fireTokenChangeEvent: boolean = true): void {\n\t\tif (fireTokenChangeEvent) {\n\t\t\tthis._onDidChangeTokens.fire({\n\t\t\t\tsemanticTokensApplied: false,\n\t\t\t\tranges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfromLineNumber: 1,\n\t\t\t\t\t\ttoLineNumber: this._textModel.getLineCount(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\tthis._initialize();\n\t}\n\n\tpublic override handleDidChangeAttached(): void {\n\t\t// TODO @alexr00 implement for background tokenization\n\t}\n\n\tpublic override handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\t// Don't fire the event, as the view might not have got the text change event yet\n\t\t\tthis.resetTokenization(false);\n\t\t}\n\t}\n\n\tpublic override forceTokenization(lineNumber: number): void {\n\t\t// TODO @alexr00 implement\n\t}\n\n\tpublic override hasAccurateTokensForLine(lineNumber: number): boolean {\n\t\t// TODO @alexr00 update for background tokenization\n\t\treturn true;\n\t}\n\n\tpublic override isCheapToTokenize(lineNumber: number): boolean {\n\t\t// TODO @alexr00 update for background tokenization\n\t\treturn true;\n\t}\n\n\tpublic override getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\t// TODO @alexr00 implement once we have custom parsing and don't just feed in the whole text model value\n\t\treturn StandardTokenType.Other;\n\t}\n\tpublic override tokenizeLineWithEdit(lineNumber: number, edit: LineEditWithAdditionalLines): ITokenizeLineWithEditResult {\n\t\t// TODO @alexr00 understand what this is for and implement\n\t\treturn { mainLineTokens: null, additionalLines: null };\n\t}\n\tpublic override get hasTokens(): boolean {\n\t\t// TODO @alexr00 once we have a token store, implement properly\n\t\tconst hasTree = this._treeSitterService.getParseResult(this._textModel) !== undefined;\n\t\treturn hasTree;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB,gCAAgC,sCAAsC;AACjG,SAAS,kBAAkB;AAC3B,SAAS,yBAAyB;AAClC,SAAS,iBAAiB;AAC1B,SAAS,gCAAgC;AACzC,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B,mCAAmC;AAElE,MAAM,yBAAyB,eAAe;AAAA,EAIpD,YAA6B,oBAC5B,iBACA,WACA,YAA0B;AAC1B,UAAM,iBAAiB,WAAW,UAAU;AAJhB;AAM5B,SAAK,YAAY;AAAA,EAClB;AAAA,EAzBD,OAcqD;AAAA;AAAA;AAAA,EAC5C,uBAA8D;AAAA,EAC9D;AAAA,EAWA,cAAc;AACrB,UAAM,cAAc,KAAK,cAAc;AACvC,QAAI,CAAC,KAAK,wBAAwB,KAAK,oBAAoB,aAAa;AACvE,WAAK,kBAAkB;AACvB,WAAK,uBAAuB,+BAA+B,IAAI,WAAW;AAAA,IAC3E;AAAA,EACD;AAAA,EAEO,cAAc,YAAgC;AACpD,UAAM,UAAU,KAAK,WAAW,eAAe,UAAU;AACzD,QAAI,KAAK,sBAAsB;AAC9B,YAAM,YAAY,KAAK,qBAAqB,gBAAgB,YAAY,KAAK,UAAU;AACvF,UAAI,WAAW;AACd,eAAO,IAAI,WAAW,WAAW,SAAS,KAAK,gBAAgB;AAAA,MAChE;AAAA,IACD;AACA,WAAO,WAAW,YAAY,SAAS,KAAK,gBAAgB;AAAA,EAC7D;AAAA,EAEO,kBAAkB,uBAAgC,MAAY;AACpE,QAAI,sBAAsB;AACzB,WAAK,mBAAmB,KAAK;AAAA,QAC5B,uBAAuB;AAAA,QACvB,QAAQ;AAAA,UACP;AAAA,YACC,gBAAgB;AAAA,YAChB,cAAc,KAAK,WAAW,aAAa;AAAA,UAC5C;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,YAAY;AAAA,EAClB;AAAA,EAEgB,0BAAgC;AAAA,EAEhD;AAAA,EAEgB,uBAAuB,GAAoC;AAC1E,QAAI,EAAE,SAAS;AAEd,WAAK,kBAAkB,KAAK;AAAA,IAC7B;AAAA,EACD;AAAA,EAEgB,kBAAkB,YAA0B;AAAA,EAE5D;AAAA,EAEgB,yBAAyB,YAA6B;AAErE,WAAO;AAAA,EACR;AAAA,EAEgB,kBAAkB,YAA6B;AAE9D,WAAO;AAAA,EACR;AAAA,EAEgB,iCAAiC,YAAoB,QAAgB,WAAsC;AAE1H,WAAO,kBAAkB;AAAA,EAC1B;AAAA,EACgB,qBAAqB,YAAoB,MAAgE;AAExH,WAAO,EAAE,gBAAgB,MAAM,iBAAiB,KAAK;AAAA,EACtD;AAAA,EACA,IAAoB,YAAqB;AAExC,UAAM,UAAU,KAAK,mBAAmB,eAAe,KAAK,UAAU,MAAM;AAC5E,WAAO;AAAA,EACR;AACD;",
  "names": []
}
