import{arrayInsert as h}from"../../../base/common/arrays.js";import{toUint32 as s}from"../../../base/common/uint.js";class p{values;prefixSum;prefixSumValidIndex;constructor(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}getCount(){return this.values.length}insertValues(e,i){e=s(e);const t=this.values,u=this.prefixSum,r=i.length;return r===0?!1:(this.values=new Uint32Array(t.length+r),this.values.set(t.subarray(0,e),0),this.values.set(t.subarray(e),e+r),this.values.set(i,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(u.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}setValue(e,i){return e=s(e),i=s(i),this.values[e]===i?!1:(this.values[e]=i,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)}removeValues(e,i){e=s(e),i=s(i);const t=this.values,u=this.prefixSum;if(e>=t.length)return!1;const r=t.length-e;return i>=r&&(i=r),i===0?!1:(this.values=new Uint32Array(t.length-i),this.values.set(t.subarray(0,e),0),this.values.set(t.subarray(e+i),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(u.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}getTotalSum(){return this.values.length===0?0:this._getPrefixSum(this.values.length-1)}getPrefixSum(e){return e<0?0:(e=s(e),this._getPrefixSum(e))}_getPrefixSum(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];let i=this.prefixSumValidIndex[0]+1;i===0&&(this.prefixSum[0]=this.values[0],i++),e>=this.values.length&&(e=this.values.length-1);for(let t=i;t<=e;t++)this.prefixSum[t]=this.prefixSum[t-1]+this.values[t];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]}getIndexOf(e){e=Math.floor(e),this.getTotalSum();let i=0,t=this.values.length-1,u=0,r=0,l=0;for(;i<=t;)if(u=i+(t-i)/2|0,r=this.prefixSum[u],l=r-this.values[u],e<l)t=u-1;else if(e>=r)i=u+1;else break;return new n(u,e-l)}}class d{_values;_isValid;_validEndIndex;_prefixSum;_indexBySum;constructor(e){this._values=e,this._isValid=!1,this._validEndIndex=-1,this._prefixSum=[],this._indexBySum=[]}getTotalSum(){return this._ensureValid(),this._indexBySum.length}getPrefixSum(e){return this._ensureValid(),e===0?0:this._prefixSum[e-1]}getIndexOf(e){this._ensureValid();const i=this._indexBySum[e],t=i>0?this._prefixSum[i-1]:0;return new n(i,e-t)}removeValues(e,i){this._values.splice(e,i),this._invalidate(e)}insertValues(e,i){this._values=h(this._values,e,i),this._invalidate(e)}_invalidate(e){this._isValid=!1,this._validEndIndex=Math.min(this._validEndIndex,e-1)}_ensureValid(){if(!this._isValid){for(let e=this._validEndIndex+1,i=this._values.length;e<i;e++){const t=this._values[e],u=e>0?this._prefixSum[e-1]:0;this._prefixSum[e]=u+t;for(let r=0;r<t;r++)this._indexBySum[u+r]=e}this._prefixSum.length=this._values.length,this._indexBySum.length=this._prefixSum[this._prefixSum.length-1],this._isValid=!0,this._validEndIndex=this._values.length-1}}setValue(e,i){this._values[e]!==i&&(this._values[e]=i,this._invalidate(e))}}class n{constructor(e,i){this.index=e;this.remainder=i;this.index=e,this.remainder=i}_prefixSumIndexOfResultBrand=void 0}export{d as ConstantTimePrefixSumComputer,p as PrefixSumComputer,n as PrefixSumIndexOfResult};
