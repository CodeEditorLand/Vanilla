{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { escapeRegExpCharacters } from \"../../../../../base/common/strings.js\";\nimport type { ResolvedLanguageConfiguration } from \"../../../languages/languageConfigurationRegistry.js\";\nimport type { BracketKind } from \"../../../languages/supports/languageBracketsConfiguration.js\";\nimport { BracketAstNode } from \"./ast.js\";\nimport { toLength } from \"./length.js\";\nimport {\n\ttype DenseKeyProvider,\n\tSmallImmutableSet,\n\tidentityKeyProvider,\n} from \"./smallImmutableSet.js\";\nimport { type OpeningBracketId, Token, TokenKind } from \"./tokenizer.js\";\n\nexport class BracketTokens {\n\tstatic createFromLanguage(\n\t\tconfiguration: ResolvedLanguageConfiguration,\n\t\tdenseKeyProvider: DenseKeyProvider<string>,\n\t): BracketTokens {\n\t\tfunction getId(bracketInfo: BracketKind): OpeningBracketId {\n\t\t\treturn denseKeyProvider.getKey(\n\t\t\t\t`${bracketInfo.languageId}:::${bracketInfo.bracketText}`,\n\t\t\t);\n\t\t}\n\n\t\tconst map = new Map<string, Token>();\n\t\tfor (const openingBracket of configuration.bracketsNew\n\t\t\t.openingBrackets) {\n\t\t\tconst length = toLength(0, openingBracket.bracketText.length);\n\t\t\tconst openingTextId = getId(openingBracket);\n\t\t\tconst bracketIds = SmallImmutableSet.getEmpty().add(\n\t\t\t\topeningTextId,\n\t\t\t\tidentityKeyProvider,\n\t\t\t);\n\t\t\tmap.set(\n\t\t\t\topeningBracket.bracketText,\n\t\t\t\tnew Token(\n\t\t\t\t\tlength,\n\t\t\t\t\tTokenKind.OpeningBracket,\n\t\t\t\t\topeningTextId,\n\t\t\t\t\tbracketIds,\n\t\t\t\t\tBracketAstNode.create(length, openingBracket, bracketIds),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tfor (const closingBracket of configuration.bracketsNew\n\t\t\t.closingBrackets) {\n\t\t\tconst length = toLength(0, closingBracket.bracketText.length);\n\t\t\tlet bracketIds = SmallImmutableSet.getEmpty();\n\t\t\tconst closingBrackets = closingBracket.getOpeningBrackets();\n\t\t\tfor (const bracket of closingBrackets) {\n\t\t\t\tbracketIds = bracketIds.add(\n\t\t\t\t\tgetId(bracket),\n\t\t\t\t\tidentityKeyProvider,\n\t\t\t\t);\n\t\t\t}\n\t\t\tmap.set(\n\t\t\t\tclosingBracket.bracketText,\n\t\t\t\tnew Token(\n\t\t\t\t\tlength,\n\t\t\t\t\tTokenKind.ClosingBracket,\n\t\t\t\t\tgetId(closingBrackets[0]),\n\t\t\t\t\tbracketIds,\n\t\t\t\t\tBracketAstNode.create(length, closingBracket, bracketIds),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn new BracketTokens(map);\n\t}\n\n\tprivate hasRegExp = false;\n\tprivate _regExpGlobal: RegExp | null = null;\n\n\tconstructor(private readonly map: Map<string, Token>) {}\n\n\tgetRegExpStr(): string | null {\n\t\tif (this.isEmpty) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst keys = [...this.map.keys()];\n\t\t\tkeys.sort();\n\t\t\tkeys.reverse();\n\t\t\treturn keys.map((k) => prepareBracketForRegExp(k)).join(\"|\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns null if there is no such regexp (because there are no brackets).\n\t */\n\tget regExpGlobal(): RegExp | null {\n\t\tif (!this.hasRegExp) {\n\t\t\tconst regExpStr = this.getRegExpStr();\n\t\t\tthis._regExpGlobal = regExpStr ? new RegExp(regExpStr, \"gi\") : null;\n\t\t\tthis.hasRegExp = true;\n\t\t}\n\t\treturn this._regExpGlobal;\n\t}\n\n\tgetToken(value: string): Token | undefined {\n\t\treturn this.map.get(value.toLowerCase());\n\t}\n\n\tfindClosingTokenText(\n\t\topeningBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t): string | undefined {\n\t\tfor (const [closingText, info] of this.map) {\n\t\t\tif (\n\t\t\t\tinfo.kind === TokenKind.ClosingBracket &&\n\t\t\t\tinfo.bracketIds.intersects(openingBracketIds)\n\t\t\t) {\n\t\t\t\treturn closingText;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.map.size === 0;\n\t}\n}\n\nfunction prepareBracketForRegExp(str: string): string {\n\tlet escaped = escapeRegExpCharacters(str);\n\t// These bracket pair delimiters start or end with letters\n\t// see https://github.com/microsoft/vscode/issues/132162 https://github.com/microsoft/vscode/issues/150440\n\tif (/^[\\w ]+/.test(str)) {\n\t\tescaped = `\\\\b${escaped}`;\n\t}\n\tif (/[\\w ]+$/.test(str)) {\n\t\tescaped = `${escaped}\\\\b`;\n\t}\n\treturn escaped;\n}\n\nexport class LanguageAgnosticBracketTokens {\n\tprivate readonly languageIdToBracketTokens = new Map<\n\t\tstring,\n\t\tBracketTokens\n\t>();\n\n\tconstructor(\n\t\tprivate readonly denseKeyProvider: DenseKeyProvider<string>,\n\t\tprivate readonly getLanguageConfiguration: (\n\t\t\tlanguageId: string,\n\t\t) => ResolvedLanguageConfiguration,\n\t) {}\n\n\tpublic didLanguageChange(languageId: string): boolean {\n\t\t// Report a change whenever the language configuration updates.\n\t\treturn this.languageIdToBracketTokens.has(languageId);\n\t}\n\n\tgetSingleLanguageBracketTokens(languageId: string): BracketTokens {\n\t\tlet singleLanguageBracketTokens =\n\t\t\tthis.languageIdToBracketTokens.get(languageId);\n\t\tif (!singleLanguageBracketTokens) {\n\t\t\tsingleLanguageBracketTokens = BracketTokens.createFromLanguage(\n\t\t\t\tthis.getLanguageConfiguration(languageId),\n\t\t\t\tthis.denseKeyProvider,\n\t\t\t);\n\t\t\tthis.languageIdToBracketTokens.set(\n\t\t\t\tlanguageId,\n\t\t\t\tsingleLanguageBracketTokens,\n\t\t\t);\n\t\t}\n\t\treturn singleLanguageBracketTokens;\n\t}\n\n\tgetToken(value: string, languageId: string): Token | undefined {\n\t\tconst singleLanguageBracketTokens =\n\t\t\tthis.getSingleLanguageBracketTokens(languageId);\n\t\treturn singleLanguageBracketTokens.getToken(value);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
