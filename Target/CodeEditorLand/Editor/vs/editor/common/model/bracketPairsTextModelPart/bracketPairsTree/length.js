import{splitLines as i}from"../../../../../base/common/strings.js";import{Position as f}from"../../../core/position.js";import{Range as m}from"../../../core/range.js";import{TextLength as g}from"../../../core/textLength.js";function T(n,t,e,o){return n!==e?s(e-n,o):s(0,o-t)}const c=0;function d(n){return n===0}const r=2**26;function s(n,t){return n*r+t}function M(n){const t=n,e=Math.floor(t/r),o=t-e*r;return new g(e,o)}function N(n){return Math.floor(n/r)}function w(n){return n}function b(n,t){let e=n+t;return t>=r&&(e=e-n%r),e}function O(n,t){return n.reduce((e,o)=>b(e,t(o)),c)}function R(n,t){return n===t}function P(n,t){const e=n,o=t;if(o-e<=0)return c;const u=Math.floor(e/r),a=Math.floor(o/r),h=o-a*r;if(u===a){const L=e-u*r;return s(0,h-L)}else return s(a-u,h)}function q(n,t){return n<t}function E(n,t){return n<=t}function G(n,t){return n>=t}function Z(n){const t=n,e=Math.floor(t/r),o=t-e*r;return new f(e+1,o+1)}function j(n){return s(n.lineNumber-1,n.column-1)}function A(n,t){const e=n,o=Math.floor(e/r),l=e-o*r,u=t,a=Math.floor(u/r),h=u-a*r;return new m(o+1,l+1,a+1,h+1)}function D(n){return n.startLineNumber===n.endLineNumber?new g(0,n.endColumn-n.startColumn):new g(n.endLineNumber-n.startLineNumber,n.endColumn-1)}function I(n,t){return n-t}function S(n){const t=i(n);return s(t.length-1,t[t.length-1].length)}function v(n){const t=i(n);return new g(t.length-1,t[t.length-1].length)}function H(n){return n}function _(n,t){return n>t?n:t}export{b as lengthAdd,I as lengthCompare,T as lengthDiff,P as lengthDiffNonNegative,R as lengthEquals,w as lengthGetColumnCountIfZeroLineCount,N as lengthGetLineCount,G as lengthGreaterThanEqual,H as lengthHash,d as lengthIsZero,q as lengthLessThan,E as lengthLessThanEqual,_ as lengthMax,D as lengthOfRange,S as lengthOfString,v as lengthOfStringObj,M as lengthToObj,Z as lengthToPosition,c as lengthZero,A as lengthsToRange,j as positionToLength,O as sumLengths,s as toLength};
