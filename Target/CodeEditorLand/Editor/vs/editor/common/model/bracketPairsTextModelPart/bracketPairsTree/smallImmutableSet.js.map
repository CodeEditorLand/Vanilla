{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst emptyArr: number[] = [];\n\n/**\n * Represents an immutable set that works best for a small number of elements (less than 32).\n * It uses bits to encode element membership efficiently.\n */\nexport class SmallImmutableSet<T> {\n\tprivate static cache = new Array<SmallImmutableSet<any>>(129);\n\n\tprivate static create<T>(\n\t\titems: number,\n\t\tadditionalItems: readonly number[],\n\t): SmallImmutableSet<T> {\n\t\tif (items <= 128 && additionalItems.length === 0) {\n\t\t\t// We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.\n\t\t\tlet cached = SmallImmutableSet.cache[items];\n\t\t\tif (!cached) {\n\t\t\t\tcached = new SmallImmutableSet(items, additionalItems);\n\t\t\t\tSmallImmutableSet.cache[items] = cached;\n\t\t\t}\n\t\t\treturn cached;\n\t\t}\n\n\t\treturn new SmallImmutableSet(items, additionalItems);\n\t}\n\n\tprivate static empty = SmallImmutableSet.create<any>(0, emptyArr);\n\tpublic static getEmpty<T>(): SmallImmutableSet<T> {\n\t\treturn this.empty;\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly items: number,\n\t\tprivate readonly additionalItems: readonly number[],\n\t) {}\n\n\tpublic add(\n\t\tvalue: T,\n\t\tkeyProvider: IDenseKeyProvider<T>,\n\t): SmallImmutableSet<T> {\n\t\tconst key = keyProvider.getKey(value);\n\t\tlet idx = key >> 5; // divided by 32\n\t\tif (idx === 0) {\n\t\t\t// fast path\n\t\t\tconst newItem = (1 << key) | this.items;\n\t\t\tif (newItem === this.items) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\treturn SmallImmutableSet.create(newItem, this.additionalItems);\n\t\t}\n\t\tidx--;\n\n\t\tconst newItems = this.additionalItems.slice(0);\n\t\twhile (newItems.length < idx) {\n\t\t\tnewItems.push(0);\n\t\t}\n\t\tnewItems[idx] |= 1 << (key & 31);\n\n\t\treturn SmallImmutableSet.create(this.items, newItems);\n\t}\n\n\tpublic has(value: T, keyProvider: IDenseKeyProvider<T>): boolean {\n\t\tconst key = keyProvider.getKey(value);\n\t\tlet idx = key >> 5; // divided by 32\n\t\tif (idx === 0) {\n\t\t\t// fast path\n\t\t\treturn (this.items & (1 << key)) !== 0;\n\t\t}\n\t\tidx--;\n\n\t\treturn ((this.additionalItems[idx] || 0) & (1 << (key & 31))) !== 0;\n\t}\n\n\tpublic merge(other: SmallImmutableSet<T>): SmallImmutableSet<T> {\n\t\tconst merged = this.items | other.items;\n\n\t\tif (\n\t\t\tthis.additionalItems === emptyArr &&\n\t\t\tother.additionalItems === emptyArr\n\t\t) {\n\t\t\t// fast path\n\t\t\tif (merged === this.items) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (merged === other.items) {\n\t\t\t\treturn other;\n\t\t\t}\n\t\t\treturn SmallImmutableSet.create(merged, emptyArr);\n\t\t}\n\n\t\t// This can be optimized, but it's not a common case\n\t\tconst newItems: number[] = [];\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti <\n\t\t\tMath.max(this.additionalItems.length, other.additionalItems.length);\n\t\t\ti++\n\t\t) {\n\t\t\tconst item1 = this.additionalItems[i] || 0;\n\t\t\tconst item2 = other.additionalItems[i] || 0;\n\t\t\tnewItems.push(item1 | item2);\n\t\t}\n\n\t\treturn SmallImmutableSet.create(merged, newItems);\n\t}\n\n\tpublic intersects(other: SmallImmutableSet<T>): boolean {\n\t\tif ((this.items & other.items) !== 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti <\n\t\t\tMath.min(this.additionalItems.length, other.additionalItems.length);\n\t\t\ti++\n\t\t) {\n\t\t\tif ((this.additionalItems[i] & other.additionalItems[i]) !== 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic equals(other: SmallImmutableSet<T>): boolean {\n\t\tif (this.items !== other.items) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.additionalItems.length !== other.additionalItems.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < this.additionalItems.length; i++) {\n\t\t\tif (this.additionalItems[i] !== other.additionalItems[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport interface IDenseKeyProvider<T> {\n\tgetKey(value: T): number;\n}\n\nexport const identityKeyProvider: IDenseKeyProvider<number> = {\n\tgetKey(value: number) {\n\t\treturn value;\n\t},\n};\n\n/**\n * Assigns values a unique incrementing key.\n */\nexport class DenseKeyProvider<T> {\n\tprivate readonly items = new Map<T, number>();\n\n\tgetKey(value: T): number {\n\t\tlet existing = this.items.get(value);\n\t\tif (existing === undefined) {\n\t\t\texisting = this.items.size;\n\t\t\tthis.items.set(value, existing);\n\t\t}\n\t\treturn existing;\n\t}\n\n\treverseLookup(value: number): T | undefined {\n\t\treturn [...this.items].find(([_key, v]) => v === value)?.[0];\n\t}\n\n\treverseLookupSet(set: SmallImmutableSet<T>): T[] {\n\t\tconst result: T[] = [];\n\t\tfor (const [key] of this.items) {\n\t\t\tif (set.has(key, this)) {\n\t\t\t\tresult.push(key);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tkeys(): IterableIterator<T> {\n\t\treturn this.items.keys();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
