{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from \"../../../../../base/common/errors.js\";\nimport { CursorColumns } from \"../../../core/cursorColumns.js\";\nimport type { BracketKind } from \"../../../languages/supports/languageBracketsConfiguration.js\";\nimport type { ITextModel } from \"../../../model.js\";\nimport {\n\ttype Length,\n\tlengthAdd,\n\tlengthGetLineCount,\n\tlengthToObj,\n\tlengthZero,\n} from \"./length.js\";\nimport { SmallImmutableSet } from \"./smallImmutableSet.js\";\nimport type { OpeningBracketId } from \"./tokenizer.js\";\n\nexport enum AstNodeKind {\n\tText = 0,\n\tBracket = 1,\n\tPair = 2,\n\tUnexpectedClosingBracket = 3,\n\tList = 4,\n}\n\nexport type AstNode =\n\t| PairAstNode\n\t| ListAstNode\n\t| BracketAstNode\n\t| InvalidBracketAstNode\n\t| TextAstNode;\n\n/**\n * The base implementation for all AST nodes.\n */\nabstract class BaseAstNode {\n\tpublic abstract readonly kind: AstNodeKind;\n\n\tpublic abstract readonly childrenLength: number;\n\n\t/**\n\t * Might return null even if {@link idx} is smaller than {@link BaseAstNode.childrenLength}.\n\t */\n\tpublic abstract getChild(idx: number): AstNode | null;\n\n\t/**\n\t * Try to avoid using this property, as implementations might need to allocate the resulting array.\n\t */\n\tpublic abstract readonly children: readonly AstNode[];\n\n\t/**\n\t * Represents the set of all (potentially) missing opening bracket ids in this node.\n\t * E.g. in `{ ] ) }` that set is {`[`, `(` }.\n\t */\n\tpublic abstract readonly missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>;\n\n\t/**\n\t * In case of a list, determines the height of the (2,3) tree.\n\t */\n\tpublic abstract readonly listHeight: number;\n\n\tprotected _length: Length;\n\n\t/**\n\t * The length of the entire node, which should equal the sum of lengths of all children.\n\t */\n\tpublic get length(): Length {\n\t\treturn this._length;\n\t}\n\n\tpublic constructor(length: Length) {\n\t\tthis._length = length;\n\t}\n\n\t/**\n\t * @param openBracketIds The set of all opening brackets that have not yet been closed.\n\t */\n\tpublic abstract canBeReused(\n\t\topenBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t): boolean;\n\n\t/**\n\t * Flattens all lists in this AST. Only for debugging.\n\t */\n\tpublic abstract flattenLists(): AstNode;\n\n\t/**\n\t * Creates a deep clone.\n\t */\n\tpublic abstract deepClone(): AstNode;\n\n\tpublic abstract computeMinIndentation(\n\t\toffset: Length,\n\t\ttextModel: ITextModel,\n\t): number;\n}\n\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n */\nexport class PairAstNode extends BaseAstNode {\n\tpublic static create(\n\t\topeningBracket: BracketAstNode,\n\t\tchild: AstNode | null,\n\t\tclosingBracket: BracketAstNode | null,\n\t) {\n\t\tlet length = openingBracket.length;\n\t\tif (child) {\n\t\t\tlength = lengthAdd(length, child.length);\n\t\t}\n\t\tif (closingBracket) {\n\t\t\tlength = lengthAdd(length, closingBracket.length);\n\t\t}\n\t\treturn new PairAstNode(\n\t\t\tlength,\n\t\t\topeningBracket,\n\t\t\tchild,\n\t\t\tclosingBracket,\n\t\t\tchild\n\t\t\t\t? child.missingOpeningBracketIds\n\t\t\t\t: SmallImmutableSet.getEmpty(),\n\t\t);\n\t}\n\n\tpublic get kind(): AstNodeKind.Pair {\n\t\treturn AstNodeKind.Pair;\n\t}\n\tpublic get listHeight() {\n\t\treturn 0;\n\t}\n\tpublic get childrenLength(): number {\n\t\treturn 3;\n\t}\n\tpublic getChild(idx: number): AstNode | null {\n\t\tswitch (idx) {\n\t\t\tcase 0:\n\t\t\t\treturn this.openingBracket;\n\t\t\tcase 1:\n\t\t\t\treturn this.child;\n\t\t\tcase 2:\n\t\t\t\treturn this.closingBracket;\n\t\t}\n\t\tthrow new Error(\"Invalid child index\");\n\t}\n\n\t/**\n\t * Avoid using this property, it allocates an array!\n\t */\n\tpublic get children() {\n\t\tconst result: AstNode[] = [];\n\t\tresult.push(this.openingBracket);\n\t\tif (this.child) {\n\t\t\tresult.push(this.child);\n\t\t}\n\t\tif (this.closingBracket) {\n\t\t\tresult.push(this.closingBracket);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate constructor(\n\t\tlength: Length,\n\t\tpublic readonly openingBracket: BracketAstNode,\n\t\tpublic readonly child: AstNode | null,\n\t\tpublic readonly closingBracket: BracketAstNode | null,\n\t\tpublic readonly missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t) {\n\t\tsuper(length);\n\t}\n\n\tpublic canBeReused(openBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\tif (this.closingBracket === null) {\n\t\t\t// Unclosed pair ast nodes only\n\t\t\t// end at the end of the document\n\t\t\t// or when a parent node is closed.\n\n\t\t\t// This could be improved:\n\t\t\t// Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic flattenLists(): PairAstNode {\n\t\treturn PairAstNode.create(\n\t\t\tthis.openingBracket.flattenLists(),\n\t\t\tthis.child && this.child.flattenLists(),\n\t\t\tthis.closingBracket && this.closingBracket.flattenLists(),\n\t\t);\n\t}\n\n\tpublic deepClone(): PairAstNode {\n\t\treturn new PairAstNode(\n\t\t\tthis.length,\n\t\t\tthis.openingBracket.deepClone(),\n\t\t\tthis.child && this.child.deepClone(),\n\t\t\tthis.closingBracket && this.closingBracket.deepClone(),\n\t\t\tthis.missingOpeningBracketIds,\n\t\t);\n\t}\n\n\tpublic computeMinIndentation(\n\t\toffset: Length,\n\t\ttextModel: ITextModel,\n\t): number {\n\t\treturn this.child\n\t\t\t? this.child.computeMinIndentation(\n\t\t\t\t\tlengthAdd(offset, this.openingBracket.length),\n\t\t\t\t\ttextModel,\n\t\t\t\t)\n\t\t\t: Number.MAX_SAFE_INTEGER;\n\t}\n}\n\nexport abstract class ListAstNode extends BaseAstNode {\n\t/**\n\t * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n\t */\n\tpublic static create23(\n\t\titem1: AstNode,\n\t\titem2: AstNode,\n\t\titem3: AstNode | null,\n\t\timmutable = false,\n\t): ListAstNode {\n\t\tlet length = item1.length;\n\t\tlet missingBracketIds = item1.missingOpeningBracketIds;\n\n\t\tif (item1.listHeight !== item2.listHeight) {\n\t\t\tthrow new Error(\"Invalid list heights\");\n\t\t}\n\n\t\tlength = lengthAdd(length, item2.length);\n\t\tmissingBracketIds = missingBracketIds.merge(\n\t\t\titem2.missingOpeningBracketIds,\n\t\t);\n\n\t\tif (item3) {\n\t\t\tif (item1.listHeight !== item3.listHeight) {\n\t\t\t\tthrow new Error(\"Invalid list heights\");\n\t\t\t}\n\t\t\tlength = lengthAdd(length, item3.length);\n\t\t\tmissingBracketIds = missingBracketIds.merge(\n\t\t\t\titem3.missingOpeningBracketIds,\n\t\t\t);\n\t\t}\n\t\treturn immutable\n\t\t\t? new Immutable23ListAstNode(\n\t\t\t\t\tlength,\n\t\t\t\t\titem1.listHeight + 1,\n\t\t\t\t\titem1,\n\t\t\t\t\titem2,\n\t\t\t\t\titem3,\n\t\t\t\t\tmissingBracketIds,\n\t\t\t\t)\n\t\t\t: new TwoThreeListAstNode(\n\t\t\t\t\tlength,\n\t\t\t\t\titem1.listHeight + 1,\n\t\t\t\t\titem1,\n\t\t\t\t\titem2,\n\t\t\t\t\titem3,\n\t\t\t\t\tmissingBracketIds,\n\t\t\t\t);\n\t}\n\n\tpublic static create(items: AstNode[], immutable = false): ListAstNode {\n\t\tif (items.length === 0) {\n\t\t\treturn this.getEmpty();\n\t\t} else {\n\t\t\tlet length = items[0].length;\n\t\t\tlet unopenedBrackets = items[0].missingOpeningBracketIds;\n\t\t\tfor (let i = 1; i < items.length; i++) {\n\t\t\t\tlength = lengthAdd(length, items[i].length);\n\t\t\t\tunopenedBrackets = unopenedBrackets.merge(\n\t\t\t\t\titems[i].missingOpeningBracketIds,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn immutable\n\t\t\t\t? new ImmutableArrayListAstNode(\n\t\t\t\t\t\tlength,\n\t\t\t\t\t\titems[0].listHeight + 1,\n\t\t\t\t\t\titems,\n\t\t\t\t\t\tunopenedBrackets,\n\t\t\t\t\t)\n\t\t\t\t: new ArrayListAstNode(\n\t\t\t\t\t\tlength,\n\t\t\t\t\t\titems[0].listHeight + 1,\n\t\t\t\t\t\titems,\n\t\t\t\t\t\tunopenedBrackets,\n\t\t\t\t\t);\n\t\t}\n\t}\n\n\tpublic static getEmpty() {\n\t\treturn new ImmutableArrayListAstNode(\n\t\t\tlengthZero,\n\t\t\t0,\n\t\t\t[],\n\t\t\tSmallImmutableSet.getEmpty(),\n\t\t);\n\t}\n\n\tpublic get kind(): AstNodeKind.List {\n\t\treturn AstNodeKind.List;\n\t}\n\n\tpublic get missingOpeningBracketIds(): SmallImmutableSet<OpeningBracketId> {\n\t\treturn this._missingOpeningBracketIds;\n\t}\n\n\tprivate cachedMinIndentation = -1;\n\n\t/**\n\t * Use ListAstNode.create.\n\t */\n\tconstructor(\n\t\tlength: Length,\n\t\tpublic readonly listHeight: number,\n\t\tprivate _missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t) {\n\t\tsuper(length);\n\t}\n\n\tprotected throwIfImmutable(): void {\n\t\t// NOOP\n\t}\n\n\tprotected abstract setChild(idx: number, child: AstNode): void;\n\n\tpublic makeLastElementMutable(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst childCount = this.childrenLength;\n\t\tif (childCount === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst lastChild = this.getChild(childCount - 1)!;\n\t\tconst mutable =\n\t\t\tlastChild.kind === AstNodeKind.List\n\t\t\t\t? lastChild.toMutable()\n\t\t\t\t: lastChild;\n\t\tif (lastChild !== mutable) {\n\t\t\tthis.setChild(childCount - 1, mutable);\n\t\t}\n\t\treturn mutable;\n\t}\n\n\tpublic makeFirstElementMutable(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst childCount = this.childrenLength;\n\t\tif (childCount === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst firstChild = this.getChild(0)!;\n\t\tconst mutable =\n\t\t\tfirstChild.kind === AstNodeKind.List\n\t\t\t\t? firstChild.toMutable()\n\t\t\t\t: firstChild;\n\t\tif (firstChild !== mutable) {\n\t\t\tthis.setChild(0, mutable);\n\t\t}\n\t\treturn mutable;\n\t}\n\n\tpublic canBeReused(\n\t\topenBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t): boolean {\n\t\tif (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.childrenLength === 0) {\n\t\t\t// Don't reuse empty lists.\n\t\t\treturn false;\n\t\t}\n\n\t\tlet lastChild: ListAstNode = this;\n\t\twhile (lastChild.kind === AstNodeKind.List) {\n\t\t\tconst lastLength = lastChild.childrenLength;\n\t\t\tif (lastLength === 0) {\n\t\t\t\t// Empty lists should never be contained in other lists.\n\t\t\t\tthrow new BugIndicatingError();\n\t\t\t}\n\t\t\tlastChild = lastChild.getChild(lastLength - 1) as ListAstNode;\n\t\t}\n\n\t\treturn lastChild.canBeReused(openBracketIds);\n\t}\n\n\tpublic handleChildrenChanged(): void {\n\t\tthis.throwIfImmutable();\n\n\t\tconst count = this.childrenLength;\n\n\t\tlet length = this.getChild(0)!.length;\n\t\tlet unopenedBrackets = this.getChild(0)!.missingOpeningBracketIds;\n\n\t\tfor (let i = 1; i < count; i++) {\n\t\t\tconst child = this.getChild(i)!;\n\t\t\tlength = lengthAdd(length, child.length);\n\t\t\tunopenedBrackets = unopenedBrackets.merge(\n\t\t\t\tchild.missingOpeningBracketIds,\n\t\t\t);\n\t\t}\n\n\t\tthis._length = length;\n\t\tthis._missingOpeningBracketIds = unopenedBrackets;\n\t\tthis.cachedMinIndentation = -1;\n\t}\n\n\tpublic flattenLists(): ListAstNode {\n\t\tconst items: AstNode[] = [];\n\t\tfor (const c of this.children) {\n\t\t\tconst normalized = c.flattenLists();\n\t\t\tif (normalized.kind === AstNodeKind.List) {\n\t\t\t\titems.push(...normalized.children);\n\t\t\t} else {\n\t\t\t\titems.push(normalized);\n\t\t\t}\n\t\t}\n\t\treturn ListAstNode.create(items);\n\t}\n\n\tpublic computeMinIndentation(\n\t\toffset: Length,\n\t\ttextModel: ITextModel,\n\t): number {\n\t\tif (this.cachedMinIndentation !== -1) {\n\t\t\treturn this.cachedMinIndentation;\n\t\t}\n\n\t\tlet minIndentation = Number.MAX_SAFE_INTEGER;\n\t\tlet childOffset = offset;\n\t\tfor (let i = 0; i < this.childrenLength; i++) {\n\t\t\tconst child = this.getChild(i);\n\t\t\tif (child) {\n\t\t\t\tminIndentation = Math.min(\n\t\t\t\t\tminIndentation,\n\t\t\t\t\tchild.computeMinIndentation(childOffset, textModel),\n\t\t\t\t);\n\t\t\t\tchildOffset = lengthAdd(childOffset, child.length);\n\t\t\t}\n\t\t}\n\n\t\tthis.cachedMinIndentation = minIndentation;\n\t\treturn minIndentation;\n\t}\n\n\t/**\n\t * Creates a shallow clone that is mutable, or itself if it is already mutable.\n\t */\n\tpublic abstract toMutable(): ListAstNode;\n\n\tpublic abstract appendChildOfSameHeight(node: AstNode): void;\n\tpublic abstract unappendChild(): AstNode | undefined;\n\tpublic abstract prependChildOfSameHeight(node: AstNode): void;\n\tpublic abstract unprependChild(): AstNode | undefined;\n}\n\nclass TwoThreeListAstNode extends ListAstNode {\n\tpublic get childrenLength(): number {\n\t\treturn this._item3 !== null ? 3 : 2;\n\t}\n\tpublic getChild(idx: number): AstNode | null {\n\t\tswitch (idx) {\n\t\t\tcase 0:\n\t\t\t\treturn this._item1;\n\t\t\tcase 1:\n\t\t\t\treturn this._item2;\n\t\t\tcase 2:\n\t\t\t\treturn this._item3;\n\t\t}\n\t\tthrow new Error(\"Invalid child index\");\n\t}\n\tprotected setChild(idx: number, node: AstNode): void {\n\t\tswitch (idx) {\n\t\t\tcase 0:\n\t\t\t\tthis._item1 = node;\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\tthis._item2 = node;\n\t\t\t\treturn;\n\t\t\tcase 2:\n\t\t\t\tthis._item3 = node;\n\t\t\t\treturn;\n\t\t}\n\t\tthrow new Error(\"Invalid child index\");\n\t}\n\n\tpublic get children(): readonly AstNode[] {\n\t\treturn this._item3\n\t\t\t? [this._item1, this._item2, this._item3]\n\t\t\t: [this._item1, this._item2];\n\t}\n\n\tpublic get item1(): AstNode {\n\t\treturn this._item1;\n\t}\n\tpublic get item2(): AstNode {\n\t\treturn this._item2;\n\t}\n\tpublic get item3(): AstNode | null {\n\t\treturn this._item3;\n\t}\n\n\tpublic constructor(\n\t\tlength: Length,\n\t\tlistHeight: number,\n\t\tprivate _item1: AstNode,\n\t\tprivate _item2: AstNode,\n\t\tprivate _item3: AstNode | null,\n\t\tmissingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t) {\n\t\tsuper(length, listHeight, missingOpeningBracketIds);\n\t}\n\n\tpublic deepClone(): ListAstNode {\n\t\treturn new TwoThreeListAstNode(\n\t\t\tthis.length,\n\t\t\tthis.listHeight,\n\t\t\tthis._item1.deepClone(),\n\t\t\tthis._item2.deepClone(),\n\t\t\tthis._item3 ? this._item3.deepClone() : null,\n\t\t\tthis.missingOpeningBracketIds,\n\t\t);\n\t}\n\n\tpublic appendChildOfSameHeight(node: AstNode): void {\n\t\tif (this._item3) {\n\t\t\tthrow new Error(\"Cannot append to a full (2,3) tree node\");\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tthis._item3 = node;\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unappendChild(): AstNode | undefined {\n\t\tif (!this._item3) {\n\t\t\tthrow new Error(\"Cannot remove from a non-full (2,3) tree node\");\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tconst result = this._item3;\n\t\tthis._item3 = null;\n\t\tthis.handleChildrenChanged();\n\t\treturn result;\n\t}\n\n\tpublic prependChildOfSameHeight(node: AstNode): void {\n\t\tif (this._item3) {\n\t\t\tthrow new Error(\"Cannot prepend to a full (2,3) tree node\");\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tthis._item3 = this._item2;\n\t\tthis._item2 = this._item1;\n\t\tthis._item1 = node;\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unprependChild(): AstNode | undefined {\n\t\tif (!this._item3) {\n\t\t\tthrow new Error(\"Cannot remove from a non-full (2,3) tree node\");\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tconst result = this._item1;\n\t\tthis._item1 = this._item2;\n\t\tthis._item2 = this._item3;\n\t\tthis._item3 = null;\n\n\t\tthis.handleChildrenChanged();\n\t\treturn result;\n\t}\n\n\toverride toMutable(): ListAstNode {\n\t\treturn this;\n\t}\n}\n\n/**\n * Immutable, if all children are immutable.\n */\nclass Immutable23ListAstNode extends TwoThreeListAstNode {\n\toverride toMutable(): ListAstNode {\n\t\treturn new TwoThreeListAstNode(\n\t\t\tthis.length,\n\t\t\tthis.listHeight,\n\t\t\tthis.item1,\n\t\t\tthis.item2,\n\t\t\tthis.item3,\n\t\t\tthis.missingOpeningBracketIds,\n\t\t);\n\t}\n\n\tprotected override throwIfImmutable(): void {\n\t\tthrow new Error(\"this instance is immutable\");\n\t}\n}\n\n/**\n * For debugging.\n */\nclass ArrayListAstNode extends ListAstNode {\n\tget childrenLength(): number {\n\t\treturn this._children.length;\n\t}\n\tgetChild(idx: number): AstNode | null {\n\t\treturn this._children[idx];\n\t}\n\tprotected setChild(idx: number, child: AstNode): void {\n\t\tthis._children[idx] = child;\n\t}\n\tget children(): readonly AstNode[] {\n\t\treturn this._children;\n\t}\n\n\tconstructor(\n\t\tlength: Length,\n\t\tlistHeight: number,\n\t\tprivate readonly _children: AstNode[],\n\t\tmissingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>,\n\t) {\n\t\tsuper(length, listHeight, missingOpeningBracketIds);\n\t}\n\n\tdeepClone(): ListAstNode {\n\t\tconst children = new Array<AstNode>(this._children.length);\n\t\tfor (let i = 0; i < this._children.length; i++) {\n\t\t\tchildren[i] = this._children[i].deepClone();\n\t\t}\n\t\treturn new ArrayListAstNode(\n\t\t\tthis.length,\n\t\t\tthis.listHeight,\n\t\t\tchildren,\n\t\t\tthis.missingOpeningBracketIds,\n\t\t);\n\t}\n\n\tpublic appendChildOfSameHeight(node: AstNode): void {\n\t\tthis.throwIfImmutable();\n\t\tthis._children.push(node);\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unappendChild(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst item = this._children.pop();\n\t\tthis.handleChildrenChanged();\n\t\treturn item;\n\t}\n\n\tpublic prependChildOfSameHeight(node: AstNode): void {\n\t\tthis.throwIfImmutable();\n\t\tthis._children.unshift(node);\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unprependChild(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst item = this._children.shift();\n\t\tthis.handleChildrenChanged();\n\t\treturn item;\n\t}\n\n\tpublic override toMutable(): ListAstNode {\n\t\treturn this;\n\t}\n}\n\n/**\n * Immutable, if all children are immutable.\n */\nclass ImmutableArrayListAstNode extends ArrayListAstNode {\n\toverride toMutable(): ListAstNode {\n\t\treturn new ArrayListAstNode(\n\t\t\tthis.length,\n\t\t\tthis.listHeight,\n\t\t\t[...this.children],\n\t\t\tthis.missingOpeningBracketIds,\n\t\t);\n\t}\n\n\tprotected override throwIfImmutable(): void {\n\t\tthrow new Error(\"this instance is immutable\");\n\t}\n}\n\nconst emptyArray: readonly AstNode[] = [];\n\nabstract class ImmutableLeafAstNode extends BaseAstNode {\n\tpublic get listHeight() {\n\t\treturn 0;\n\t}\n\tpublic get childrenLength(): number {\n\t\treturn 0;\n\t}\n\tpublic getChild(idx: number): AstNode | null {\n\t\treturn null;\n\t}\n\tpublic get children(): readonly AstNode[] {\n\t\treturn emptyArray;\n\t}\n\n\tpublic flattenLists(): this & AstNode {\n\t\treturn this as this & AstNode;\n\t}\n\tpublic deepClone(): this & AstNode {\n\t\treturn this as this & AstNode;\n\t}\n}\n\nexport class TextAstNode extends ImmutableLeafAstNode {\n\tpublic get kind(): AstNodeKind.Text {\n\t\treturn AstNodeKind.Text;\n\t}\n\tpublic get missingOpeningBracketIds(): SmallImmutableSet<OpeningBracketId> {\n\t\treturn SmallImmutableSet.getEmpty();\n\t}\n\n\tpublic canBeReused(_openedBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\treturn true;\n\t}\n\n\tpublic computeMinIndentation(\n\t\toffset: Length,\n\t\ttextModel: ITextModel,\n\t): number {\n\t\tconst start = lengthToObj(offset);\n\t\t// Text ast nodes don't have partial indentation (ensured by the tokenizer).\n\t\t// Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n\t\tconst startLineNumber =\n\t\t\t(start.columnCount === 0 ? start.lineCount : start.lineCount + 1) +\n\t\t\t1;\n\t\tconst endLineNumber =\n\t\t\tlengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n\n\t\tlet result = Number.MAX_SAFE_INTEGER;\n\n\t\tfor (\n\t\t\tlet lineNumber = startLineNumber;\n\t\t\tlineNumber <= endLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst firstNonWsColumn =\n\t\t\t\ttextModel.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\t\tconst lineContent = textModel.getLineContent(lineNumber);\n\t\t\tif (firstNonWsColumn === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst visibleColumn = CursorColumns.visibleColumnFromColumn(\n\t\t\t\tlineContent,\n\t\t\t\tfirstNonWsColumn,\n\t\t\t\ttextModel.getOptions().tabSize,\n\t\t\t)!;\n\t\t\tresult = Math.min(result, visibleColumn);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport class BracketAstNode extends ImmutableLeafAstNode {\n\tpublic static create(\n\t\tlength: Length,\n\t\tbracketInfo: BracketKind,\n\t\tbracketIds: SmallImmutableSet<OpeningBracketId>,\n\t): BracketAstNode {\n\t\tconst node = new BracketAstNode(length, bracketInfo, bracketIds);\n\t\treturn node;\n\t}\n\n\tpublic get kind(): AstNodeKind.Bracket {\n\t\treturn AstNodeKind.Bracket;\n\t}\n\n\tpublic get missingOpeningBracketIds(): SmallImmutableSet<OpeningBracketId> {\n\t\treturn SmallImmutableSet.getEmpty();\n\t}\n\n\tprivate constructor(\n\t\tlength: Length,\n\t\tpublic readonly bracketInfo: BracketKind,\n\t\t/**\n\t\t * In case of a opening bracket, this is the id of the opening bracket.\n\t\t * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n\t\t */\n\t\tpublic readonly bracketIds: SmallImmutableSet<OpeningBracketId>,\n\t) {\n\t\tsuper(length);\n\t}\n\n\tpublic get text() {\n\t\treturn this.bracketInfo.bracketText;\n\t}\n\n\tpublic get languageId() {\n\t\treturn this.bracketInfo.languageId;\n\t}\n\n\tpublic canBeReused(_openedBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\t// These nodes could be reused,\n\t\t// but not in a general way.\n\t\t// Their parent may be reused.\n\t\treturn false;\n\t}\n\n\tpublic computeMinIndentation(\n\t\toffset: Length,\n\t\ttextModel: ITextModel,\n\t): number {\n\t\treturn Number.MAX_SAFE_INTEGER;\n\t}\n}\n\nexport class InvalidBracketAstNode extends ImmutableLeafAstNode {\n\tpublic get kind(): AstNodeKind.UnexpectedClosingBracket {\n\t\treturn AstNodeKind.UnexpectedClosingBracket;\n\t}\n\n\tpublic readonly missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>;\n\n\tpublic constructor(\n\t\tclosingBrackets: SmallImmutableSet<OpeningBracketId>,\n\t\tlength: Length,\n\t) {\n\t\tsuper(length);\n\t\tthis.missingOpeningBracketIds = closingBrackets;\n\t}\n\n\tpublic canBeReused(openedBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\treturn !openedBracketIds.intersects(this.missingOpeningBracketIds);\n\t}\n\n\tpublic computeMinIndentation(\n\t\toffset: Length,\n\t\ttextModel: ITextModel,\n\t): number {\n\t\treturn Number.MAX_SAFE_INTEGER;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["AstNodeKind"]
}
