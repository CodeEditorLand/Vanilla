import{AstNodeKind as u,ListAstNode as o}from"./ast.js";function A(e){if(e.length===0)return null;if(e.length===1)return e[0];let n=0;function l(){if(n>=e.length)return null;const r=n,f=e[r].listHeight;for(n++;n<e.length&&e[n].listHeight===f;)n++;return n-r>=2?a(r===0&&n===e.length?e:e.slice(r,n),!1):e[r]}let i=l(),t=l();if(!t)return i;for(let r=l();r;r=l())h(i,t)<=h(t,r)?(i=d(i,t),t=r):t=d(t,r);return d(i,t)}function a(e,n=!1){if(e.length===0)return null;if(e.length===1)return e[0];let l=e.length;for(;l>3;){const i=l>>1;for(let t=0;t<i;t++){const s=t<<1;e[t]=o.create23(e[s],e[s+1],s+3===l?e[s+2]:null,n)}l=i}return o.create23(e[0],e[1],l>=3?e[2]:null,n)}function h(e,n){return Math.abs(e.listHeight-n.listHeight)}function d(e,n){return e.listHeight===n.listHeight?o.create23(e,n,null,!1):e.listHeight>n.listHeight?c(e,n):g(n,e)}function c(e,n){e=e.toMutable();let l=e;const i=[];let t;for(;;){if(n.listHeight===l.listHeight){t=n;break}if(l.kind!==u.List)throw new Error("unexpected");i.push(l),l=l.makeLastElementMutable()}for(let s=i.length-1;s>=0;s--){const r=i[s];t?r.childrenLength>=3?t=o.create23(r.unappendChild(),t,null,!1):(r.appendChildOfSameHeight(t),t=void 0):r.handleChildrenChanged()}return t?o.create23(e,t,null,!1):e}function g(e,n){e=e.toMutable();let l=e;const i=[];for(;n.listHeight!==l.listHeight;){if(l.kind!==u.List)throw new Error("unexpected");i.push(l),l=l.makeFirstElementMutable()}let t=n;for(let s=i.length-1;s>=0;s--){const r=i[s];t?r.childrenLength>=3?t=o.create23(t,r.unprependChild(),null,!1):(r.prependChildOfSameHeight(t),t=void 0):r.handleChildrenChanged()}return t?o.create23(t,e,null,!1):e}export{A as concat23Trees,a as concat23TreesOfSameHeight};
