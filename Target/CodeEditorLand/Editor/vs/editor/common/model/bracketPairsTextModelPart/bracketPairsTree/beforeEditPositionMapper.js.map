{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from \"../../../core/range.js\";\nimport type { TextLength } from \"../../../core/textLength.js\";\nimport type { IModelContentChange } from \"../../../textModelEvents.js\";\nimport {\n\ttype Length,\n\tlengthAdd,\n\tlengthDiffNonNegative,\n\tlengthLessThanEqual,\n\tlengthOfString,\n\tlengthToObj,\n\tpositionToLength,\n\ttoLength,\n} from \"./length.js\";\n\nexport class TextEditInfo {\n\tpublic static fromModelContentChanges(\n\t\tchanges: IModelContentChange[],\n\t): TextEditInfo[] {\n\t\t// Must be sorted in ascending order\n\t\tconst edits = changes\n\t\t\t.map((c) => {\n\t\t\t\tconst range = Range.lift(c.range);\n\t\t\t\treturn new TextEditInfo(\n\t\t\t\t\tpositionToLength(range.getStartPosition()),\n\t\t\t\t\tpositionToLength(range.getEndPosition()),\n\t\t\t\t\tlengthOfString(c.text),\n\t\t\t\t);\n\t\t\t})\n\t\t\t.reverse();\n\t\treturn edits;\n\t}\n\n\tconstructor(\n\t\tpublic readonly startOffset: Length,\n\t\tpublic readonly endOffset: Length,\n\t\tpublic readonly newLength: Length,\n\t) {}\n\n\ttoString(): string {\n\t\treturn `[${lengthToObj(this.startOffset)}...${lengthToObj(this.endOffset)}) -> ${lengthToObj(this.newLength)}`;\n\t}\n}\n\nexport class BeforeEditPositionMapper {\n\tprivate nextEditIdx = 0;\n\tprivate deltaOldToNewLineCount = 0;\n\tprivate deltaOldToNewColumnCount = 0;\n\tprivate deltaLineIdxInOld = -1;\n\tprivate readonly edits: readonly TextEditInfoCache[];\n\n\t/**\n\t * @param edits Must be sorted by offset in ascending order.\n\t */\n\tconstructor(edits: readonly TextEditInfo[]) {\n\t\tthis.edits = edits.map((edit) => TextEditInfoCache.from(edit));\n\t}\n\n\t/**\n\t * @param offset Must be equal to or greater than the last offset this method has been called with.\n\t */\n\tgetOffsetBeforeChange(offset: Length): Length {\n\t\tthis.adjustNextEdit(offset);\n\t\treturn this.translateCurToOld(offset);\n\t}\n\n\t/**\n\t * @param offset Must be equal to or greater than the last offset this method has been called with.\n\t * Returns null if there is no edit anymore.\n\t */\n\tgetDistanceToNextChange(offset: Length): Length | null {\n\t\tthis.adjustNextEdit(offset);\n\n\t\tconst nextEdit = this.edits[this.nextEditIdx];\n\t\tconst nextChangeOffset = nextEdit\n\t\t\t? this.translateOldToCur(nextEdit.offsetObj)\n\t\t\t: null;\n\t\tif (nextChangeOffset === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn lengthDiffNonNegative(offset, nextChangeOffset);\n\t}\n\n\tprivate translateOldToCur(oldOffsetObj: TextLength): Length {\n\t\tif (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n\t\t\treturn toLength(\n\t\t\t\toldOffsetObj.lineCount + this.deltaOldToNewLineCount,\n\t\t\t\toldOffsetObj.columnCount + this.deltaOldToNewColumnCount,\n\t\t\t);\n\t\t} else {\n\t\t\treturn toLength(\n\t\t\t\toldOffsetObj.lineCount + this.deltaOldToNewLineCount,\n\t\t\t\toldOffsetObj.columnCount,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate translateCurToOld(newOffset: Length): Length {\n\t\tconst offsetObj = lengthToObj(newOffset);\n\t\tif (\n\t\t\toffsetObj.lineCount - this.deltaOldToNewLineCount ===\n\t\t\tthis.deltaLineIdxInOld\n\t\t) {\n\t\t\treturn toLength(\n\t\t\t\toffsetObj.lineCount - this.deltaOldToNewLineCount,\n\t\t\t\toffsetObj.columnCount - this.deltaOldToNewColumnCount,\n\t\t\t);\n\t\t} else {\n\t\t\treturn toLength(\n\t\t\t\toffsetObj.lineCount - this.deltaOldToNewLineCount,\n\t\t\t\toffsetObj.columnCount,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate adjustNextEdit(offset: Length) {\n\t\twhile (this.nextEditIdx < this.edits.length) {\n\t\t\tconst nextEdit = this.edits[this.nextEditIdx];\n\n\t\t\t// After applying the edit, what is its end offset (considering all previous edits)?\n\t\t\tconst nextEditEndOffsetInCur = this.translateOldToCur(\n\t\t\t\tnextEdit.endOffsetAfterObj,\n\t\t\t);\n\n\t\t\tif (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n\t\t\t\t// We are after the edit, skip it\n\t\t\t\tthis.nextEditIdx++;\n\n\t\t\t\tconst nextEditEndOffsetInCurObj = lengthToObj(\n\t\t\t\t\tnextEditEndOffsetInCur,\n\t\t\t\t);\n\n\t\t\t\t// Before applying the edit, what is its end offset (considering all previous edits)?\n\t\t\t\tconst nextEditEndOffsetBeforeInCurObj = lengthToObj(\n\t\t\t\t\tthis.translateOldToCur(nextEdit.endOffsetBeforeObj),\n\t\t\t\t);\n\n\t\t\t\tconst lineDelta =\n\t\t\t\t\tnextEditEndOffsetInCurObj.lineCount -\n\t\t\t\t\tnextEditEndOffsetBeforeInCurObj.lineCount;\n\t\t\t\tthis.deltaOldToNewLineCount += lineDelta;\n\n\t\t\t\tconst previousColumnDelta =\n\t\t\t\t\tthis.deltaLineIdxInOld ===\n\t\t\t\t\tnextEdit.endOffsetBeforeObj.lineCount\n\t\t\t\t\t\t? this.deltaOldToNewColumnCount\n\t\t\t\t\t\t: 0;\n\t\t\t\tconst columnDelta =\n\t\t\t\t\tnextEditEndOffsetInCurObj.columnCount -\n\t\t\t\t\tnextEditEndOffsetBeforeInCurObj.columnCount;\n\t\t\t\tthis.deltaOldToNewColumnCount =\n\t\t\t\t\tpreviousColumnDelta + columnDelta;\n\t\t\t\tthis.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n\t\t\t} else {\n\t\t\t\t// We are in or before the edit.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass TextEditInfoCache {\n\tstatic from(edit: TextEditInfo): TextEditInfoCache {\n\t\treturn new TextEditInfoCache(\n\t\t\tedit.startOffset,\n\t\t\tedit.endOffset,\n\t\t\tedit.newLength,\n\t\t);\n\t}\n\n\tpublic readonly endOffsetBeforeObj: TextLength;\n\tpublic readonly endOffsetAfterObj: TextLength;\n\tpublic readonly offsetObj: TextLength;\n\n\tconstructor(startOffset: Length, endOffset: Length, textLength: Length) {\n\t\tthis.endOffsetBeforeObj = lengthToObj(endOffset);\n\t\tthis.endOffsetAfterObj = lengthToObj(\n\t\t\tlengthAdd(startOffset, textLength),\n\t\t);\n\t\tthis.offsetObj = lengthToObj(startOffset);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
