{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../../../core/range.js';\nimport { Length, lengthAdd, lengthDiffNonNegative, lengthLessThanEqual, lengthOfString, lengthToObj, positionToLength, toLength } from './length.js';\nimport { TextLength } from '../../../core/textLength.js';\nimport { IModelContentChange } from '../../../textModelEvents.js';\n\nexport class TextEditInfo {\n\tpublic static fromModelContentChanges(changes: IModelContentChange[]): TextEditInfo[] {\n\t\t// Must be sorted in ascending order\n\t\tconst edits = changes.map(c => {\n\t\t\tconst range = Range.lift(c.range);\n\t\t\treturn new TextEditInfo(\n\t\t\t\tpositionToLength(range.getStartPosition()),\n\t\t\t\tpositionToLength(range.getEndPosition()),\n\t\t\t\tlengthOfString(c.text)\n\t\t\t);\n\t\t}).reverse();\n\t\treturn edits;\n\t}\n\n\tconstructor(\n\t\tpublic readonly startOffset: Length,\n\t\tpublic readonly endOffset: Length,\n\t\tpublic readonly newLength: Length\n\t) {\n\t}\n\n\ttoString(): string {\n\t\treturn `[${lengthToObj(this.startOffset)}...${lengthToObj(this.endOffset)}) -> ${lengthToObj(this.newLength)}`;\n\t}\n}\n\nexport class BeforeEditPositionMapper {\n\tprivate nextEditIdx = 0;\n\tprivate deltaOldToNewLineCount = 0;\n\tprivate deltaOldToNewColumnCount = 0;\n\tprivate deltaLineIdxInOld = -1;\n\tprivate readonly edits: readonly TextEditInfoCache[];\n\n\t/**\n\t * @param edits Must be sorted by offset in ascending order.\n\t*/\n\tconstructor(\n\t\tedits: readonly TextEditInfo[],\n\t) {\n\t\tthis.edits = edits.map(edit => TextEditInfoCache.from(edit));\n\t}\n\n\t/**\n\t * @param offset Must be equal to or greater than the last offset this method has been called with.\n\t*/\n\tgetOffsetBeforeChange(offset: Length): Length {\n\t\tthis.adjustNextEdit(offset);\n\t\treturn this.translateCurToOld(offset);\n\t}\n\n\t/**\n\t * @param offset Must be equal to or greater than the last offset this method has been called with.\n\t * Returns null if there is no edit anymore.\n\t*/\n\tgetDistanceToNextChange(offset: Length): Length | null {\n\t\tthis.adjustNextEdit(offset);\n\n\t\tconst nextEdit = this.edits[this.nextEditIdx];\n\t\tconst nextChangeOffset = nextEdit ? this.translateOldToCur(nextEdit.offsetObj) : null;\n\t\tif (nextChangeOffset === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn lengthDiffNonNegative(offset, nextChangeOffset);\n\t}\n\n\tprivate translateOldToCur(oldOffsetObj: TextLength): Length {\n\t\tif (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n\t\t\treturn toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount + this.deltaOldToNewColumnCount);\n\t\t} else {\n\t\t\treturn toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount);\n\t\t}\n\t}\n\n\tprivate translateCurToOld(newOffset: Length): Length {\n\t\tconst offsetObj = lengthToObj(newOffset);\n\t\tif (offsetObj.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld) {\n\t\t\treturn toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount - this.deltaOldToNewColumnCount);\n\t\t} else {\n\t\t\treturn toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount);\n\t\t}\n\t}\n\n\tprivate adjustNextEdit(offset: Length) {\n\t\twhile (this.nextEditIdx < this.edits.length) {\n\t\t\tconst nextEdit = this.edits[this.nextEditIdx];\n\n\t\t\t// After applying the edit, what is its end offset (considering all previous edits)?\n\t\t\tconst nextEditEndOffsetInCur = this.translateOldToCur(nextEdit.endOffsetAfterObj);\n\n\t\t\tif (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n\t\t\t\t// We are after the edit, skip it\n\t\t\t\tthis.nextEditIdx++;\n\n\t\t\t\tconst nextEditEndOffsetInCurObj = lengthToObj(nextEditEndOffsetInCur);\n\n\t\t\t\t// Before applying the edit, what is its end offset (considering all previous edits)?\n\t\t\t\tconst nextEditEndOffsetBeforeInCurObj = lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj));\n\n\t\t\t\tconst lineDelta = nextEditEndOffsetInCurObj.lineCount - nextEditEndOffsetBeforeInCurObj.lineCount;\n\t\t\t\tthis.deltaOldToNewLineCount += lineDelta;\n\n\t\t\t\tconst previousColumnDelta = this.deltaLineIdxInOld === nextEdit.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0;\n\t\t\t\tconst columnDelta = nextEditEndOffsetInCurObj.columnCount - nextEditEndOffsetBeforeInCurObj.columnCount;\n\t\t\t\tthis.deltaOldToNewColumnCount = previousColumnDelta + columnDelta;\n\t\t\t\tthis.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n\t\t\t} else {\n\t\t\t\t// We are in or before the edit.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass TextEditInfoCache {\n\tstatic from(edit: TextEditInfo): TextEditInfoCache {\n\t\treturn new TextEditInfoCache(edit.startOffset, edit.endOffset, edit.newLength);\n\t}\n\n\tpublic readonly endOffsetBeforeObj: TextLength;\n\tpublic readonly endOffsetAfterObj: TextLength;\n\tpublic readonly offsetObj: TextLength;\n\n\tconstructor(\n\t\tstartOffset: Length,\n\t\tendOffset: Length,\n\t\ttextLength: Length,\n\t) {\n\t\tthis.endOffsetBeforeObj = lengthToObj(endOffset);\n\t\tthis.endOffsetAfterObj = lengthToObj(lengthAdd(startOffset, textLength));\n\t\tthis.offsetObj = lengthToObj(startOffset);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
