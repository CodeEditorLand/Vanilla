import{lengthAdd as f,lengthLessThan as o,lengthZero as l}from"./length.js";class x{nextNodes;offsets;idxs;lastOffset=l;constructor(e){this.nextNodes=[e],this.offsets=[l],this.idxs=[]}readLongestNodeAt(e,h){if(o(e,this.lastOffset))throw new Error("Invalid offset");for(this.lastOffset=e;;){const t=d(this.nextNodes);if(!t)return;const s=d(this.offsets);if(o(e,s))return;if(o(s,e))if(f(s,t.length)<=e)this.nextNodeAfterCurrent();else{const i=r(t);i!==-1?(this.nextNodes.push(t.getChild(i)),this.offsets.push(s),this.idxs.push(i)):this.nextNodeAfterCurrent()}else{if(h(t))return this.nextNodeAfterCurrent(),t;{const i=r(t);if(i===-1){this.nextNodeAfterCurrent();return}else this.nextNodes.push(t.getChild(i)),this.offsets.push(s),this.idxs.push(i)}}}}nextNodeAfterCurrent(){for(;;){const e=d(this.offsets),h=d(this.nextNodes);if(this.nextNodes.pop(),this.offsets.pop(),this.idxs.length===0)break;const t=d(this.nextNodes),s=r(t,this.idxs[this.idxs.length-1]);if(s!==-1){this.nextNodes.push(t.getChild(s)),this.offsets.push(f(e,h.length)),this.idxs[this.idxs.length-1]=s;break}else this.idxs.pop()}}}function r(n,e=-1){for(;;){if(e++,e>=n.childrenLength)return-1;if(n.getChild(e))return e}}function d(n){return n.length>0?n[n.length-1]:void 0}export{x as NodeReader};
