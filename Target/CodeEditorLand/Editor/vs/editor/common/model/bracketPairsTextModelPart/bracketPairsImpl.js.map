{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CallbackIterable, compareBy } from \"../../../../base/common/arrays.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttype IReference,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { IPosition, Position } from \"../../core/position.js\";\nimport { Range } from \"../../core/range.js\";\nimport type {\n\tILanguageConfigurationService,\n\tLanguageConfigurationServiceChangeEvent,\n} from \"../../languages/languageConfigurationRegistry.js\";\nimport { ignoreBracketsInToken } from \"../../languages/supports.js\";\nimport type { LanguageBracketsConfiguration } from \"../../languages/supports/languageBracketsConfiguration.js\";\nimport {\n\tBracketsUtils,\n\ttype RichEditBracket,\n\ttype RichEditBrackets,\n} from \"../../languages/supports/richEditBrackets.js\";\nimport type {\n\tBracketInfo,\n\tBracketPairInfo,\n\tBracketPairWithMinIndentationInfo,\n\tIBracketPairsTextModelPart,\n\tIFoundBracket,\n} from \"../../textModelBracketPairs.js\";\nimport type {\n\tIModelContentChangedEvent,\n\tIModelLanguageChangedEvent,\n\tIModelOptionsChangedEvent,\n\tIModelTokensChangedEvent,\n} from \"../../textModelEvents.js\";\nimport type { LineTokens } from \"../../tokens/lineTokens.js\";\nimport type { TextModel } from \"../textModel.js\";\nimport { BracketPairsTree } from \"./bracketPairsTree/bracketPairsTree.js\";\n\nexport class BracketPairsTextModelPart\n\textends Disposable\n\timplements IBracketPairsTextModelPart\n{\n\tprivate readonly bracketPairsTree = this._register(\n\t\tnew MutableDisposable<IReference<BracketPairsTree>>(),\n\t);\n\n\tprivate readonly onDidChangeEmitter = new Emitter<void>();\n\tpublic readonly onDidChange = this.onDidChangeEmitter.event;\n\n\tprivate get canBuildAST() {\n\t\tconst maxSupportedDocumentLength =\n\t\t\t/* max lines */ 50_000 * /* average column count */ 100;\n\t\treturn this.textModel.getValueLength() <= maxSupportedDocumentLength;\n\t}\n\n\tprivate bracketsRequested = false;\n\n\tpublic constructor(\n\t\tprivate readonly textModel: TextModel,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region TextModel events\n\n\tpublic handleLanguageConfigurationServiceChange(\n\t\te: LanguageConfigurationServiceChangeEvent,\n\t): void {\n\t\tif (\n\t\t\t!e.languageId ||\n\t\t\tthis.bracketPairsTree.value?.object.didLanguageChange(e.languageId)\n\t\t) {\n\t\t\tthis.bracketPairsTree.clear();\n\t\t\tthis.updateBracketPairsTree();\n\t\t}\n\t}\n\n\tpublic handleDidChangeOptions(e: IModelOptionsChangedEvent): void {\n\t\tthis.bracketPairsTree.clear();\n\t\tthis.updateBracketPairsTree();\n\t}\n\n\tpublic handleDidChangeLanguage(e: IModelLanguageChangedEvent): void {\n\t\tthis.bracketPairsTree.clear();\n\t\tthis.updateBracketPairsTree();\n\t}\n\n\tpublic handleDidChangeContent(change: IModelContentChangedEvent) {\n\t\tthis.bracketPairsTree.value?.object.handleContentChanged(change);\n\t}\n\n\tpublic handleDidChangeBackgroundTokenizationState(): void {\n\t\tthis.bracketPairsTree.value?.object.handleDidChangeBackgroundTokenizationState();\n\t}\n\n\tpublic handleDidChangeTokens(e: IModelTokensChangedEvent): void {\n\t\tthis.bracketPairsTree.value?.object.handleDidChangeTokens(e);\n\t}\n\n\t//#endregion\n\n\tprivate updateBracketPairsTree() {\n\t\tif (this.bracketsRequested && this.canBuildAST) {\n\t\t\tif (!this.bracketPairsTree.value) {\n\t\t\t\tconst store = new DisposableStore();\n\n\t\t\t\tthis.bracketPairsTree.value = createDisposableRef(\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tnew BracketPairsTree(this.textModel, (languageId) => {\n\t\t\t\t\t\t\treturn this.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t\tstore,\n\t\t\t\t);\n\t\t\t\tstore.add(\n\t\t\t\t\tthis.bracketPairsTree.value.object.onDidChange((e) =>\n\t\t\t\t\t\tthis.onDidChangeEmitter.fire(e),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis.onDidChangeEmitter.fire();\n\t\t\t}\n\t\t} else if (this.bracketPairsTree.value) {\n\t\t\tthis.bracketPairsTree.clear();\n\t\t\t// Important: Don't call fire if there was no change!\n\t\t\tthis.onDidChangeEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * Returns all bracket pairs that intersect the given range.\n\t * The result is sorted by the start position.\n\t */\n\tpublic getBracketPairsInRange(\n\t\trange: Range,\n\t): CallbackIterable<BracketPairInfo> {\n\t\tthis.bracketsRequested = true;\n\t\tthis.updateBracketPairsTree();\n\t\treturn (\n\t\t\tthis.bracketPairsTree.value?.object.getBracketPairsInRange(\n\t\t\t\trange,\n\t\t\t\tfalse,\n\t\t\t) || CallbackIterable.empty\n\t\t);\n\t}\n\n\tpublic getBracketPairsInRangeWithMinIndentation(\n\t\trange: Range,\n\t): CallbackIterable<BracketPairWithMinIndentationInfo> {\n\t\tthis.bracketsRequested = true;\n\t\tthis.updateBracketPairsTree();\n\t\treturn (\n\t\t\tthis.bracketPairsTree.value?.object.getBracketPairsInRange(\n\t\t\t\trange,\n\t\t\t\ttrue,\n\t\t\t) || CallbackIterable.empty\n\t\t);\n\t}\n\n\tpublic getBracketsInRange(\n\t\trange: Range,\n\t\tonlyColorizedBrackets = false,\n\t): CallbackIterable<BracketInfo> {\n\t\tthis.bracketsRequested = true;\n\t\tthis.updateBracketPairsTree();\n\t\treturn (\n\t\t\tthis.bracketPairsTree.value?.object.getBracketsInRange(\n\t\t\t\trange,\n\t\t\t\tonlyColorizedBrackets,\n\t\t\t) || CallbackIterable.empty\n\t\t);\n\t}\n\n\tpublic findMatchingBracketUp(\n\t\t_bracket: string,\n\t\t_position: IPosition,\n\t\tmaxDuration?: number,\n\t): Range | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\t\tconst languageId = this.textModel.getLanguageIdAtPosition(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t);\n\n\t\tif (this.canBuildAST) {\n\t\t\tconst closingBracketInfo = this.languageConfigurationService\n\t\t\t\t.getLanguageConfiguration(languageId)\n\t\t\t\t.bracketsNew.getClosingBracketInfo(_bracket);\n\n\t\t\tif (!closingBracketInfo) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst bracketPair = this.getBracketPairsInRange(\n\t\t\t\tRange.fromPositions(_position, _position),\n\t\t\t).findLast((b) => closingBracketInfo.closes(b.openingBracketInfo));\n\n\t\t\tif (bracketPair) {\n\t\t\t\treturn bracketPair.openingBracketRange;\n\t\t\t}\n\t\t\treturn null;\n\t\t} else {\n\t\t\t// Fallback to old bracket matching code:\n\t\t\tconst bracket = _bracket.toLowerCase();\n\n\t\t\tconst bracketsSupport =\n\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\tlanguageId,\n\t\t\t\t).brackets;\n\n\t\t\tif (!bracketsSupport) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst data = bracketsSupport.textIsBracket[bracket];\n\n\t\t\tif (!data) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn stripBracketSearchCanceled(\n\t\t\t\tthis._findMatchingBracketUp(\n\t\t\t\t\tdata,\n\t\t\t\t\tposition,\n\t\t\t\t\tcreateTimeBasedContinueBracketSearchPredicate(maxDuration),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic matchBracket(\n\t\tposition: IPosition,\n\t\tmaxDuration?: number,\n\t): [Range, Range] | null {\n\t\tif (this.canBuildAST) {\n\t\t\tconst bracketPair = this.getBracketPairsInRange(\n\t\t\t\tRange.fromPositions(position, position),\n\t\t\t)\n\t\t\t\t.filter(\n\t\t\t\t\t(item) =>\n\t\t\t\t\t\titem.closingBracketRange !== undefined &&\n\t\t\t\t\t\t(item.openingBracketRange.containsPosition(position) ||\n\t\t\t\t\t\t\titem.closingBracketRange.containsPosition(\n\t\t\t\t\t\t\t\tposition,\n\t\t\t\t\t\t\t)),\n\t\t\t\t)\n\t\t\t\t.findLastMaxBy(\n\t\t\t\t\tcompareBy(\n\t\t\t\t\t\t(item) =>\n\t\t\t\t\t\t\titem.openingBracketRange.containsPosition(position)\n\t\t\t\t\t\t\t\t? item.openingBracketRange\n\t\t\t\t\t\t\t\t: item.closingBracketRange,\n\t\t\t\t\t\tRange.compareRangesUsingStarts,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tif (bracketPair) {\n\t\t\t\treturn [\n\t\t\t\t\tbracketPair.openingBracketRange,\n\t\t\t\t\tbracketPair.closingBracketRange!,\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t} else {\n\t\t\t// Fallback to old bracket matching code:\n\t\t\tconst continueSearchPredicate =\n\t\t\t\tcreateTimeBasedContinueBracketSearchPredicate(maxDuration);\n\t\t\treturn this._matchBracket(\n\t\t\t\tthis.textModel.validatePosition(position),\n\t\t\t\tcontinueSearchPredicate,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _establishBracketSearchOffsets(\n\t\tposition: Position,\n\t\tlineTokens: LineTokens,\n\t\tmodeBrackets: RichEditBrackets,\n\t\ttokenIndex: number,\n\t) {\n\t\tconst tokenCount = lineTokens.getCount();\n\t\tconst currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t// limit search to not go before `maxBracketLength`\n\t\tlet searchStartOffset = Math.max(\n\t\t\t0,\n\t\t\tposition.column - 1 - modeBrackets.maxBracketLength,\n\t\t);\n\t\tfor (let i = tokenIndex - 1; i >= 0; i--) {\n\t\t\tconst tokenEndOffset = lineTokens.getEndOffset(i);\n\t\t\tif (tokenEndOffset <= searchStartOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tignoreBracketsInToken(lineTokens.getStandardTokenType(i)) ||\n\t\t\t\tlineTokens.getLanguageId(i) !== currentLanguageId\n\t\t\t) {\n\t\t\t\tsearchStartOffset = tokenEndOffset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// limit search to not go after `maxBracketLength`\n\t\tlet searchEndOffset = Math.min(\n\t\t\tlineTokens.getLineContent().length,\n\t\t\tposition.column - 1 + modeBrackets.maxBracketLength,\n\t\t);\n\t\tfor (let i = tokenIndex + 1; i < tokenCount; i++) {\n\t\t\tconst tokenStartOffset = lineTokens.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= searchEndOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tignoreBracketsInToken(lineTokens.getStandardTokenType(i)) ||\n\t\t\t\tlineTokens.getLanguageId(i) !== currentLanguageId\n\t\t\t) {\n\t\t\t\tsearchEndOffset = tokenStartOffset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn { searchStartOffset, searchEndOffset };\n\t}\n\n\tprivate _matchBracket(\n\t\tposition: Position,\n\t\tcontinueSearchPredicate: ContinueBracketSearchPredicate,\n\t): [Range, Range] | null {\n\t\tconst lineNumber = position.lineNumber;\n\t\tconst lineTokens =\n\t\t\tthis.textModel.tokenization.getLineTokens(lineNumber);\n\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\tconst tokenIndex = lineTokens.findTokenIndexAtOffset(\n\t\t\tposition.column - 1,\n\t\t);\n\t\tif (tokenIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst currentModeBrackets =\n\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlineTokens.getLanguageId(tokenIndex),\n\t\t\t).brackets;\n\n\t\t// check that the token is not to be ignored\n\t\tif (\n\t\t\tcurrentModeBrackets &&\n\t\t\t!ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))\n\t\t) {\n\t\t\tlet { searchStartOffset, searchEndOffset } =\n\t\t\t\tthis._establishBracketSearchOffsets(\n\t\t\t\t\tposition,\n\t\t\t\t\tlineTokens,\n\t\t\t\t\tcurrentModeBrackets,\n\t\t\t\t\ttokenIndex,\n\t\t\t\t);\n\n\t\t\t// it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n\t\t\t// `bestResult` will contain the most right-side result\n\t\t\tlet bestResult: [Range, Range] | null = null;\n\t\t\twhile (true) {\n\t\t\t\tconst foundBracket = BracketsUtils.findNextBracketInRange(\n\t\t\t\t\tcurrentModeBrackets.forwardRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (!foundBracket) {\n\t\t\t\t\t// there are no more brackets in this text\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\tif (\n\t\t\t\t\tfoundBracket.startColumn <= position.column &&\n\t\t\t\t\tposition.column <= foundBracket.endColumn\n\t\t\t\t) {\n\t\t\t\t\tconst foundBracketText = lineText\n\t\t\t\t\t\t.substring(\n\t\t\t\t\t\t\tfoundBracket.startColumn - 1,\n\t\t\t\t\t\t\tfoundBracket.endColumn - 1,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.toLowerCase();\n\t\t\t\t\tconst r = this._matchFoundBracket(\n\t\t\t\t\t\tfoundBracket,\n\t\t\t\t\t\tcurrentModeBrackets.textIsBracket[foundBracketText],\n\t\t\t\t\t\tcurrentModeBrackets.textIsOpenBracket[foundBracketText],\n\t\t\t\t\t\tcontinueSearchPredicate,\n\t\t\t\t\t);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tif (r instanceof BracketSearchCanceled) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbestResult = r;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsearchStartOffset = foundBracket.endColumn - 1;\n\t\t\t}\n\n\t\t\tif (bestResult) {\n\t\t\t\treturn bestResult;\n\t\t\t}\n\t\t}\n\n\t\t// If position is in between two tokens, try also looking in the previous token\n\t\tif (\n\t\t\ttokenIndex > 0 &&\n\t\t\tlineTokens.getStartOffset(tokenIndex) === position.column - 1\n\t\t) {\n\t\t\tconst prevTokenIndex = tokenIndex - 1;\n\t\t\tconst prevModeBrackets =\n\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\tlineTokens.getLanguageId(prevTokenIndex),\n\t\t\t\t).brackets;\n\n\t\t\t// check that previous token is not to be ignored\n\t\t\tif (\n\t\t\t\tprevModeBrackets &&\n\t\t\t\t!ignoreBracketsInToken(\n\t\t\t\t\tlineTokens.getStandardTokenType(prevTokenIndex),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst { searchStartOffset, searchEndOffset } =\n\t\t\t\t\tthis._establishBracketSearchOffsets(\n\t\t\t\t\t\tposition,\n\t\t\t\t\t\tlineTokens,\n\t\t\t\t\t\tprevModeBrackets,\n\t\t\t\t\t\tprevTokenIndex,\n\t\t\t\t\t);\n\n\t\t\t\tconst foundBracket = BracketsUtils.findPrevBracketInRange(\n\t\t\t\t\tprevModeBrackets.reversedRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\n\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\tif (\n\t\t\t\t\tfoundBracket &&\n\t\t\t\t\tfoundBracket.startColumn <= position.column &&\n\t\t\t\t\tposition.column <= foundBracket.endColumn\n\t\t\t\t) {\n\t\t\t\t\tconst foundBracketText = lineText\n\t\t\t\t\t\t.substring(\n\t\t\t\t\t\t\tfoundBracket.startColumn - 1,\n\t\t\t\t\t\t\tfoundBracket.endColumn - 1,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.toLowerCase();\n\t\t\t\t\tconst r = this._matchFoundBracket(\n\t\t\t\t\t\tfoundBracket,\n\t\t\t\t\t\tprevModeBrackets.textIsBracket[foundBracketText],\n\t\t\t\t\t\tprevModeBrackets.textIsOpenBracket[foundBracketText],\n\t\t\t\t\t\tcontinueSearchPredicate,\n\t\t\t\t\t);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tif (r instanceof BracketSearchCanceled) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _matchFoundBracket(\n\t\tfoundBracket: Range,\n\t\tdata: RichEditBracket,\n\t\tisOpen: boolean,\n\t\tcontinueSearchPredicate: ContinueBracketSearchPredicate,\n\t): [Range, Range] | null | BracketSearchCanceled {\n\t\tif (!data) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst matched = isOpen\n\t\t\t? this._findMatchingBracketDown(\n\t\t\t\t\tdata,\n\t\t\t\t\tfoundBracket.getEndPosition(),\n\t\t\t\t\tcontinueSearchPredicate,\n\t\t\t\t)\n\t\t\t: this._findMatchingBracketUp(\n\t\t\t\t\tdata,\n\t\t\t\t\tfoundBracket.getStartPosition(),\n\t\t\t\t\tcontinueSearchPredicate,\n\t\t\t\t);\n\n\t\tif (!matched) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (matched instanceof BracketSearchCanceled) {\n\t\t\treturn matched;\n\t\t}\n\n\t\treturn [foundBracket, matched];\n\t}\n\n\tprivate _findMatchingBracketUp(\n\t\tbracket: RichEditBracket,\n\t\tposition: Position,\n\t\tcontinueSearchPredicate: ContinueBracketSearchPredicate,\n\t): Range | null | BracketSearchCanceled {\n\t\t// console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tconst languageId = bracket.languageId;\n\t\tconst reversedBracketRegex = bracket.reversedRegex;\n\t\tlet count = -1;\n\n\t\tlet totalCallCount = 0;\n\t\tconst searchPrevMatchingBracketInRange = (\n\t\t\tlineNumber: number,\n\t\t\tlineText: string,\n\t\t\tsearchStartOffset: number,\n\t\t\tsearchEndOffset: number,\n\t\t): Range | null | BracketSearchCanceled => {\n\t\t\twhile (true) {\n\t\t\t\tif (\n\t\t\t\t\tcontinueSearchPredicate &&\n\t\t\t\t\t++totalCallCount % 100 === 0 &&\n\t\t\t\t\t!continueSearchPredicate()\n\t\t\t\t) {\n\t\t\t\t\treturn BracketSearchCanceled.INSTANCE;\n\t\t\t\t}\n\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(\n\t\t\t\t\treversedBracketRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (!r) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst hitText = lineText\n\t\t\t\t\t.substring(r.startColumn - 1, r.endColumn - 1)\n\t\t\t\t\t.toLowerCase();\n\t\t\t\tif (bracket.isOpen(hitText)) {\n\t\t\t\t\tcount++;\n\t\t\t\t} else if (bracket.isClose(hitText)) {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\n\t\t\t\tif (count === 0) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tsearchEndOffset = r.startColumn - 1;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tfor (\n\t\t\tlet lineNumber = position.lineNumber;\n\t\t\tlineNumber >= 1;\n\t\t\tlineNumber--\n\t\t) {\n\t\t\tconst lineTokens =\n\t\t\t\tthis.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = tokenCount - 1;\n\t\t\tlet searchStartOffset = lineText.length;\n\t\t\tlet searchEndOffset = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(\n\t\t\t\t\tposition.column - 1,\n\t\t\t\t);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tconst searchInToken =\n\t\t\t\t\tlineTokens.getLanguageId(tokenIndex) === languageId &&\n\t\t\t\t\t!ignoreBracketsInToken(\n\t\t\t\t\t\tlineTokens.getStandardTokenType(tokenIndex),\n\t\t\t\t\t);\n\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchStartOffset\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = searchPrevMatchingBracketInRange(\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = searchPrevMatchingBracketInRange(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _findMatchingBracketDown(\n\t\tbracket: RichEditBracket,\n\t\tposition: Position,\n\t\tcontinueSearchPredicate: ContinueBracketSearchPredicate,\n\t): Range | null | BracketSearchCanceled {\n\t\t// console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tconst languageId = bracket.languageId;\n\t\tconst bracketRegex = bracket.forwardRegex;\n\t\tlet count = 1;\n\n\t\tlet totalCallCount = 0;\n\t\tconst searchNextMatchingBracketInRange = (\n\t\t\tlineNumber: number,\n\t\t\tlineText: string,\n\t\t\tsearchStartOffset: number,\n\t\t\tsearchEndOffset: number,\n\t\t): Range | null | BracketSearchCanceled => {\n\t\t\twhile (true) {\n\t\t\t\tif (\n\t\t\t\t\tcontinueSearchPredicate &&\n\t\t\t\t\t++totalCallCount % 100 === 0 &&\n\t\t\t\t\t!continueSearchPredicate()\n\t\t\t\t) {\n\t\t\t\t\treturn BracketSearchCanceled.INSTANCE;\n\t\t\t\t}\n\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(\n\t\t\t\t\tbracketRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (!r) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst hitText = lineText\n\t\t\t\t\t.substring(r.startColumn - 1, r.endColumn - 1)\n\t\t\t\t\t.toLowerCase();\n\t\t\t\tif (bracket.isOpen(hitText)) {\n\t\t\t\t\tcount++;\n\t\t\t\t} else if (bracket.isClose(hitText)) {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\n\t\t\t\tif (count === 0) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tsearchStartOffset = r.endColumn - 1;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tconst lineCount = this.textModel.getLineCount();\n\t\tfor (\n\t\t\tlet lineNumber = position.lineNumber;\n\t\t\tlineNumber <= lineCount;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineTokens =\n\t\t\t\tthis.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = 0;\n\t\t\tlet searchStartOffset = 0;\n\t\t\tlet searchEndOffset = 0;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(\n\t\t\t\t\tposition.column - 1,\n\t\t\t\t);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\t\tconst searchInToken =\n\t\t\t\t\tlineTokens.getLanguageId(tokenIndex) === languageId &&\n\t\t\t\t\t!ignoreBracketsInToken(\n\t\t\t\t\t\tlineTokens.getStandardTokenType(tokenIndex),\n\t\t\t\t\t);\n\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchEndOffset\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = searchNextMatchingBracketInRange(\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = searchNextMatchingBracketInRange(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findPrevBracket(_position: IPosition): IFoundBracket | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\n\t\tif (this.canBuildAST) {\n\t\t\tthis.bracketsRequested = true;\n\t\t\tthis.updateBracketPairsTree();\n\t\t\treturn (\n\t\t\t\tthis.bracketPairsTree.value?.object.getFirstBracketBefore(\n\t\t\t\t\tposition,\n\t\t\t\t) || null\n\t\t\t);\n\t\t}\n\n\t\tlet languageId: string | null = null;\n\t\tlet modeBrackets: RichEditBrackets | null = null;\n\t\tlet bracketConfig: LanguageBracketsConfiguration | null = null;\n\t\tfor (\n\t\t\tlet lineNumber = position.lineNumber;\n\t\t\tlineNumber >= 1;\n\t\t\tlineNumber--\n\t\t) {\n\t\t\tconst lineTokens =\n\t\t\t\tthis.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = tokenCount - 1;\n\t\t\tlet searchStartOffset = lineText.length;\n\t\t\tlet searchEndOffset = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(\n\t\t\t\t\tposition.column - 1,\n\t\t\t\t);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).brackets;\n\t\t\t\t\tbracketConfig =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).bracketsNew;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\t// language id change!\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodeBrackets &&\n\t\t\t\t\t\tbracketConfig &&\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(\n\t\t\t\t\t\t\tmodeBrackets.reversedRegex,\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevSearchInToken = false;\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).brackets;\n\t\t\t\t\tbracketConfig =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).bracketsNew;\n\t\t\t\t}\n\n\t\t\t\tconst searchInToken =\n\t\t\t\t\t!!modeBrackets &&\n\t\t\t\t\t!ignoreBracketsInToken(\n\t\t\t\t\t\tlineTokens.getStandardTokenType(tokenIndex),\n\t\t\t\t\t);\n\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchStartOffset\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (\n\t\t\t\t\t\tbracketConfig &&\n\t\t\t\t\t\tmodeBrackets &&\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(\n\t\t\t\t\t\t\tmodeBrackets.reversedRegex,\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tbracketConfig &&\n\t\t\t\tmodeBrackets &&\n\t\t\t\tprevSearchInToken &&\n\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t) {\n\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(\n\t\t\t\t\tmodeBrackets.reversedRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findNextBracket(_position: IPosition): IFoundBracket | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\n\t\tif (this.canBuildAST) {\n\t\t\tthis.bracketsRequested = true;\n\t\t\tthis.updateBracketPairsTree();\n\t\t\treturn (\n\t\t\t\tthis.bracketPairsTree.value?.object.getFirstBracketAfter(\n\t\t\t\t\tposition,\n\t\t\t\t) || null\n\t\t\t);\n\t\t}\n\n\t\tconst lineCount = this.textModel.getLineCount();\n\n\t\tlet languageId: string | null = null;\n\t\tlet modeBrackets: RichEditBrackets | null = null;\n\t\tlet bracketConfig: LanguageBracketsConfiguration | null = null;\n\t\tfor (\n\t\t\tlet lineNumber = position.lineNumber;\n\t\t\tlineNumber <= lineCount;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineTokens =\n\t\t\t\tthis.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = 0;\n\t\t\tlet searchStartOffset = 0;\n\t\t\tlet searchEndOffset = 0;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(\n\t\t\t\t\tposition.column - 1,\n\t\t\t\t);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).brackets;\n\t\t\t\t\tbracketConfig =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).bracketsNew;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\t// language id change!\n\t\t\t\t\tif (\n\t\t\t\t\t\tbracketConfig &&\n\t\t\t\t\t\tmodeBrackets &&\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(\n\t\t\t\t\t\t\tmodeBrackets.forwardRegex,\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevSearchInToken = false;\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).brackets;\n\t\t\t\t\tbracketConfig =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).bracketsNew;\n\t\t\t\t}\n\n\t\t\t\tconst searchInToken =\n\t\t\t\t\t!!modeBrackets &&\n\t\t\t\t\t!ignoreBracketsInToken(\n\t\t\t\t\t\tlineTokens.getStandardTokenType(tokenIndex),\n\t\t\t\t\t);\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchEndOffset\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (\n\t\t\t\t\t\tbracketConfig &&\n\t\t\t\t\t\tmodeBrackets &&\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(\n\t\t\t\t\t\t\tmodeBrackets.forwardRegex,\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tbracketConfig &&\n\t\t\t\tmodeBrackets &&\n\t\t\t\tprevSearchInToken &&\n\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t) {\n\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(\n\t\t\t\t\tmodeBrackets.forwardRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findEnclosingBrackets(\n\t\t_position: IPosition,\n\t\tmaxDuration?: number,\n\t): [Range, Range] | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\n\t\tif (this.canBuildAST) {\n\t\t\tconst range = Range.fromPositions(position);\n\t\t\tconst bracketPair = this.getBracketPairsInRange(\n\t\t\t\tRange.fromPositions(position, position),\n\t\t\t).findLast(\n\t\t\t\t(item) =>\n\t\t\t\t\titem.closingBracketRange !== undefined &&\n\t\t\t\t\titem.range.strictContainsRange(range),\n\t\t\t);\n\t\t\tif (bracketPair) {\n\t\t\t\treturn [\n\t\t\t\t\tbracketPair.openingBracketRange,\n\t\t\t\t\tbracketPair.closingBracketRange!,\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tconst continueSearchPredicate =\n\t\t\tcreateTimeBasedContinueBracketSearchPredicate(maxDuration);\n\t\tconst lineCount = this.textModel.getLineCount();\n\t\tconst savedCounts = new Map<string, number[]>();\n\n\t\tlet counts: number[] = [];\n\t\tconst resetCounts = (\n\t\t\tlanguageId: string,\n\t\t\tmodeBrackets: RichEditBrackets | null,\n\t\t) => {\n\t\t\tif (!savedCounts.has(languageId)) {\n\t\t\t\tconst tmp = [];\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0,\n\t\t\t\t\t\tlen = modeBrackets ? modeBrackets.brackets.length : 0;\n\t\t\t\t\ti < len;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\ttmp[i] = 0;\n\t\t\t\t}\n\t\t\t\tsavedCounts.set(languageId, tmp);\n\t\t\t}\n\t\t\tcounts = savedCounts.get(languageId)!;\n\t\t};\n\n\t\tlet totalCallCount = 0;\n\t\tconst searchInRange = (\n\t\t\tmodeBrackets: RichEditBrackets,\n\t\t\tlineNumber: number,\n\t\t\tlineText: string,\n\t\t\tsearchStartOffset: number,\n\t\t\tsearchEndOffset: number,\n\t\t): [Range, Range] | null | BracketSearchCanceled => {\n\t\t\twhile (true) {\n\t\t\t\tif (\n\t\t\t\t\tcontinueSearchPredicate &&\n\t\t\t\t\t++totalCallCount % 100 === 0 &&\n\t\t\t\t\t!continueSearchPredicate()\n\t\t\t\t) {\n\t\t\t\t\treturn BracketSearchCanceled.INSTANCE;\n\t\t\t\t}\n\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(\n\t\t\t\t\tmodeBrackets.forwardRegex,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (!r) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst hitText = lineText\n\t\t\t\t\t.substring(r.startColumn - 1, r.endColumn - 1)\n\t\t\t\t\t.toLowerCase();\n\t\t\t\tconst bracket = modeBrackets.textIsBracket[hitText];\n\t\t\t\tif (bracket) {\n\t\t\t\t\tif (bracket.isOpen(hitText)) {\n\t\t\t\t\t\tcounts[bracket.index]++;\n\t\t\t\t\t} else if (bracket.isClose(hitText)) {\n\t\t\t\t\t\tcounts[bracket.index]--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (counts[bracket.index] === -1) {\n\t\t\t\t\t\treturn this._matchFoundBracket(\n\t\t\t\t\t\t\tr,\n\t\t\t\t\t\t\tbracket,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tcontinueSearchPredicate,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsearchStartOffset = r.endColumn - 1;\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tlet languageId: string | null = null;\n\t\tlet modeBrackets: RichEditBrackets | null = null;\n\t\tfor (\n\t\t\tlet lineNumber = position.lineNumber;\n\t\t\tlineNumber <= lineCount;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineTokens =\n\t\t\t\tthis.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = 0;\n\t\t\tlet searchStartOffset = 0;\n\t\t\tlet searchEndOffset = 0;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(\n\t\t\t\t\tposition.column - 1,\n\t\t\t\t);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).brackets;\n\t\t\t\t\tresetCounts(languageId, modeBrackets);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\t// language id change!\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodeBrackets &&\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = searchInRange(\n\t\t\t\t\t\t\tmodeBrackets,\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn stripBracketSearchCanceled(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevSearchInToken = false;\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets =\n\t\t\t\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t).brackets;\n\t\t\t\t\tresetCounts(languageId, modeBrackets);\n\t\t\t\t}\n\n\t\t\t\tconst searchInToken =\n\t\t\t\t\t!!modeBrackets &&\n\t\t\t\t\t!ignoreBracketsInToken(\n\t\t\t\t\t\tlineTokens.getStandardTokenType(tokenIndex),\n\t\t\t\t\t);\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchEndOffset\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset =\n\t\t\t\t\t\t\tlineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodeBrackets &&\n\t\t\t\t\t\tprevSearchInToken &&\n\t\t\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst r = searchInRange(\n\t\t\t\t\t\t\tmodeBrackets,\n\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\tlineText,\n\t\t\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\t\t\tsearchEndOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn stripBracketSearchCanceled(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tmodeBrackets &&\n\t\t\t\tprevSearchInToken &&\n\t\t\t\tsearchStartOffset !== searchEndOffset\n\t\t\t) {\n\t\t\t\tconst r = searchInRange(\n\t\t\t\t\tmodeBrackets,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tlineText,\n\t\t\t\t\tsearchStartOffset,\n\t\t\t\t\tsearchEndOffset,\n\t\t\t\t);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn stripBracketSearchCanceled(r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _toFoundBracket(\n\t\tbracketConfig: LanguageBracketsConfiguration,\n\t\tr: Range,\n\t): IFoundBracket | null {\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text = this.textModel.getValueInRange(r);\n\t\ttext = text.toLowerCase();\n\n\t\tconst bracketInfo = bracketConfig.getBracketInfo(text);\n\t\tif (!bracketInfo) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\trange: r,\n\t\t\tbracketInfo,\n\t\t};\n\t}\n}\n\nfunction createDisposableRef<T>(\n\tobject: T,\n\tdisposable?: IDisposable,\n): IReference<T> {\n\treturn {\n\t\tobject,\n\t\tdispose: () => disposable?.dispose(),\n\t};\n}\n\ntype ContinueBracketSearchPredicate = () => boolean;\n\nfunction createTimeBasedContinueBracketSearchPredicate(\n\tmaxDuration: number | undefined,\n): ContinueBracketSearchPredicate {\n\tif (typeof maxDuration === \"undefined\") {\n\t\treturn () => true;\n\t} else {\n\t\tconst startTime = Date.now();\n\t\treturn () => {\n\t\t\treturn Date.now() - startTime <= maxDuration;\n\t\t};\n\t}\n}\n\nclass BracketSearchCanceled {\n\tpublic static INSTANCE = new BracketSearchCanceled();\n\t_searchCanceledBrand = undefined;\n\tprivate constructor() {}\n}\n\nfunction stripBracketSearchCanceled<T>(\n\tresult: T | null | BracketSearchCanceled,\n): T | null {\n\tif (result instanceof BracketSearchCanceled) {\n\t\treturn null;\n\t}\n\treturn result;\n}\n"],
  "mappings": "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",
  "names": ["languageId", "modeBrackets"]
}
