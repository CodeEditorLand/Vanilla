{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CallbackIterable, compareBy } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, IReference, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IPosition, Position } from '../../core/position.js';\nimport { Range } from '../../core/range.js';\nimport { ILanguageConfigurationService, LanguageConfigurationServiceChangeEvent } from '../../languages/languageConfigurationRegistry.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { LanguageBracketsConfiguration } from '../../languages/supports/languageBracketsConfiguration.js';\nimport { BracketsUtils, RichEditBracket, RichEditBrackets } from '../../languages/supports/richEditBrackets.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nimport { TextModel } from '../textModel.js';\nimport { BracketInfo, BracketPairInfo, BracketPairWithMinIndentationInfo, IBracketPairsTextModelPart, IFoundBracket } from '../../textModelBracketPairs.js';\nimport { IModelContentChangedEvent, IModelLanguageChangedEvent, IModelOptionsChangedEvent, IModelTokensChangedEvent } from '../../textModelEvents.js';\nimport { LineTokens } from '../../tokens/lineTokens.js';\n\nexport class BracketPairsTextModelPart extends Disposable implements IBracketPairsTextModelPart {\n\tprivate readonly bracketPairsTree = this._register(new MutableDisposable<IReference<BracketPairsTree>>());\n\n\tprivate readonly onDidChangeEmitter = new Emitter<void>();\n\tpublic readonly onDidChange = this.onDidChangeEmitter.event;\n\n\tprivate get canBuildAST() {\n\t\tconst maxSupportedDocumentLength = /* max lines */ 50_000 * /* average column count */ 100;\n\t\treturn this.textModel.getValueLength() <= maxSupportedDocumentLength;\n\t}\n\n\tprivate bracketsRequested = false;\n\n\tpublic constructor(\n\t\tprivate readonly textModel: TextModel,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region TextModel events\n\n\tpublic handleLanguageConfigurationServiceChange(e: LanguageConfigurationServiceChangeEvent): void {\n\t\tif (!e.languageId || this.bracketPairsTree.value?.object.didLanguageChange(e.languageId)) {\n\t\t\tthis.bracketPairsTree.clear();\n\t\t\tthis.updateBracketPairsTree();\n\t\t}\n\t}\n\n\tpublic handleDidChangeOptions(e: IModelOptionsChangedEvent): void {\n\t\tthis.bracketPairsTree.clear();\n\t\tthis.updateBracketPairsTree();\n\t}\n\n\tpublic handleDidChangeLanguage(e: IModelLanguageChangedEvent): void {\n\t\tthis.bracketPairsTree.clear();\n\t\tthis.updateBracketPairsTree();\n\t}\n\n\tpublic handleDidChangeContent(change: IModelContentChangedEvent) {\n\t\tthis.bracketPairsTree.value?.object.handleContentChanged(change);\n\t}\n\n\tpublic handleDidChangeBackgroundTokenizationState(): void {\n\t\tthis.bracketPairsTree.value?.object.handleDidChangeBackgroundTokenizationState();\n\t}\n\n\tpublic handleDidChangeTokens(e: IModelTokensChangedEvent): void {\n\t\tthis.bracketPairsTree.value?.object.handleDidChangeTokens(e);\n\t}\n\n\t//#endregion\n\n\tprivate updateBracketPairsTree() {\n\t\tif (this.bracketsRequested && this.canBuildAST) {\n\t\t\tif (!this.bracketPairsTree.value) {\n\t\t\t\tconst store = new DisposableStore();\n\n\t\t\t\tthis.bracketPairsTree.value = createDisposableRef(\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tnew BracketPairsTree(this.textModel, (languageId) => {\n\t\t\t\t\t\t\treturn this.languageConfigurationService.getLanguageConfiguration(languageId);\n\t\t\t\t\t\t})\n\t\t\t\t\t),\n\t\t\t\t\tstore\n\t\t\t\t);\n\t\t\t\tstore.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n\t\t\t\tthis.onDidChangeEmitter.fire();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.bracketPairsTree.value) {\n\t\t\t\tthis.bracketPairsTree.clear();\n\t\t\t\t// Important: Don't call fire if there was no change!\n\t\t\t\tthis.onDidChangeEmitter.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all bracket pairs that intersect the given range.\n\t * The result is sorted by the start position.\n\t*/\n\tpublic getBracketPairsInRange(range: Range): CallbackIterable<BracketPairInfo> {\n\t\tthis.bracketsRequested = true;\n\t\tthis.updateBracketPairsTree();\n\t\treturn this.bracketPairsTree.value?.object.getBracketPairsInRange(range, false) || CallbackIterable.empty;\n\t}\n\n\tpublic getBracketPairsInRangeWithMinIndentation(range: Range): CallbackIterable<BracketPairWithMinIndentationInfo> {\n\t\tthis.bracketsRequested = true;\n\t\tthis.updateBracketPairsTree();\n\t\treturn this.bracketPairsTree.value?.object.getBracketPairsInRange(range, true) || CallbackIterable.empty;\n\t}\n\n\tpublic getBracketsInRange(range: Range, onlyColorizedBrackets: boolean = false): CallbackIterable<BracketInfo> {\n\t\tthis.bracketsRequested = true;\n\t\tthis.updateBracketPairsTree();\n\t\treturn this.bracketPairsTree.value?.object.getBracketsInRange(range, onlyColorizedBrackets) || CallbackIterable.empty;\n\t}\n\n\tpublic findMatchingBracketUp(_bracket: string, _position: IPosition, maxDuration?: number): Range | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\t\tconst languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n\n\t\tif (this.canBuildAST) {\n\t\t\tconst closingBracketInfo = this.languageConfigurationService\n\t\t\t\t.getLanguageConfiguration(languageId)\n\t\t\t\t.bracketsNew.getClosingBracketInfo(_bracket);\n\n\t\t\tif (!closingBracketInfo) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst bracketPair = this.getBracketPairsInRange(Range.fromPositions(_position, _position)).findLast((b) =>\n\t\t\t\tclosingBracketInfo.closes(b.openingBracketInfo)\n\t\t\t);\n\n\t\t\tif (bracketPair) {\n\t\t\t\treturn bracketPair.openingBracketRange;\n\t\t\t}\n\t\t\treturn null;\n\t\t} else {\n\t\t\t// Fallback to old bracket matching code:\n\t\t\tconst bracket = _bracket.toLowerCase();\n\n\t\t\tconst bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\n\t\t\tif (!bracketsSupport) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst data = bracketsSupport.textIsBracket[bracket];\n\n\t\t\tif (!data) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n\t\t}\n\t}\n\n\tpublic matchBracket(position: IPosition, maxDuration?: number): [Range, Range] | null {\n\t\tif (this.canBuildAST) {\n\t\t\tconst bracketPair =\n\t\t\t\tthis.getBracketPairsInRange(\n\t\t\t\t\tRange.fromPositions(position, position)\n\t\t\t\t).filter(\n\t\t\t\t\t(item) =>\n\t\t\t\t\t\titem.closingBracketRange !== undefined &&\n\t\t\t\t\t\t(item.openingBracketRange.containsPosition(position) ||\n\t\t\t\t\t\t\titem.closingBracketRange.containsPosition(position))\n\t\t\t\t).findLastMaxBy(\n\t\t\t\t\tcompareBy(\n\t\t\t\t\t\t(item) =>\n\t\t\t\t\t\t\titem.openingBracketRange.containsPosition(position)\n\t\t\t\t\t\t\t\t? item.openingBracketRange\n\t\t\t\t\t\t\t\t: item.closingBracketRange,\n\t\t\t\t\t\tRange.compareRangesUsingStarts\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tif (bracketPair) {\n\t\t\t\treturn [bracketPair.openingBracketRange, bracketPair.closingBracketRange!];\n\t\t\t}\n\t\t\treturn null;\n\t\t} else {\n\t\t\t// Fallback to old bracket matching code:\n\t\t\tconst continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n\t\t\treturn this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n\t\t}\n\t}\n\n\tprivate _establishBracketSearchOffsets(position: Position, lineTokens: LineTokens, modeBrackets: RichEditBrackets, tokenIndex: number) {\n\t\tconst tokenCount = lineTokens.getCount();\n\t\tconst currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t// limit search to not go before `maxBracketLength`\n\t\tlet searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n\t\tfor (let i = tokenIndex - 1; i >= 0; i--) {\n\t\t\tconst tokenEndOffset = lineTokens.getEndOffset(i);\n\t\t\tif (tokenEndOffset <= searchStartOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n\t\t\t\tsearchStartOffset = tokenEndOffset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// limit search to not go after `maxBracketLength`\n\t\tlet searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n\t\tfor (let i = tokenIndex + 1; i < tokenCount; i++) {\n\t\t\tconst tokenStartOffset = lineTokens.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= searchEndOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n\t\t\t\tsearchEndOffset = tokenStartOffset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn { searchStartOffset, searchEndOffset };\n\t}\n\n\tprivate _matchBracket(position: Position, continueSearchPredicate: ContinueBracketSearchPredicate): [Range, Range] | null {\n\t\tconst lineNumber = position.lineNumber;\n\t\tconst lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\tconst tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\t\tif (tokenIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n\n\t\t// check that the token is not to be ignored\n\t\tif (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n\n\t\t\tlet { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n\n\t\t\t// it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n\t\t\t// `bestResult` will contain the most right-side result\n\t\t\tlet bestResult: [Range, Range] | null = null;\n\t\t\twhile (true) {\n\t\t\t\tconst foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (!foundBracket) {\n\t\t\t\t\t// there are no more brackets in this text\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\tif (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n\t\t\t\t\tconst foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n\t\t\t\t\tconst r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tif (r instanceof BracketSearchCanceled) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbestResult = r;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsearchStartOffset = foundBracket.endColumn - 1;\n\t\t\t}\n\n\t\t\tif (bestResult) {\n\t\t\t\treturn bestResult;\n\t\t\t}\n\t\t}\n\n\t\t// If position is in between two tokens, try also looking in the previous token\n\t\tif (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n\t\t\tconst prevTokenIndex = tokenIndex - 1;\n\t\t\tconst prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n\n\t\t\t// check that previous token is not to be ignored\n\t\t\tif (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n\n\t\t\t\tconst { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n\n\t\t\t\tconst foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\tif (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n\t\t\t\t\tconst foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n\t\t\t\t\tconst r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tif (r instanceof BracketSearchCanceled) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _matchFoundBracket(foundBracket: Range, data: RichEditBracket, isOpen: boolean, continueSearchPredicate: ContinueBracketSearchPredicate): [Range, Range] | null | BracketSearchCanceled {\n\t\tif (!data) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst matched = (\n\t\t\tisOpen\n\t\t\t\t? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate)\n\t\t\t\t: this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate)\n\t\t);\n\n\t\tif (!matched) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (matched instanceof BracketSearchCanceled) {\n\t\t\treturn matched;\n\t\t}\n\n\t\treturn [foundBracket, matched];\n\t}\n\n\tprivate _findMatchingBracketUp(bracket: RichEditBracket, position: Position, continueSearchPredicate: ContinueBracketSearchPredicate): Range | null | BracketSearchCanceled {\n\t\t// console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tconst languageId = bracket.languageId;\n\t\tconst reversedBracketRegex = bracket.reversedRegex;\n\t\tlet count = -1;\n\n\t\tlet totalCallCount = 0;\n\t\tconst searchPrevMatchingBracketInRange = (lineNumber: number, lineText: string, searchStartOffset: number, searchEndOffset: number): Range | null | BracketSearchCanceled => {\n\t\t\twhile (true) {\n\t\t\t\tif (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n\t\t\t\t\treturn BracketSearchCanceled.INSTANCE;\n\t\t\t\t}\n\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (!r) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n\t\t\t\tif (bracket.isOpen(hitText)) {\n\t\t\t\t\tcount++;\n\t\t\t\t} else if (bracket.isClose(hitText)) {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\n\t\t\t\tif (count === 0) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tsearchEndOffset = r.startColumn - 1;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tfor (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = tokenCount - 1;\n\t\t\tlet searchStartOffset = lineText.length;\n\t\t\tlet searchEndOffset = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tconst searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchStartOffset\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _findMatchingBracketDown(bracket: RichEditBracket, position: Position, continueSearchPredicate: ContinueBracketSearchPredicate): Range | null | BracketSearchCanceled {\n\t\t// console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tconst languageId = bracket.languageId;\n\t\tconst bracketRegex = bracket.forwardRegex;\n\t\tlet count = 1;\n\n\t\tlet totalCallCount = 0;\n\t\tconst searchNextMatchingBracketInRange = (lineNumber: number, lineText: string, searchStartOffset: number, searchEndOffset: number): Range | null | BracketSearchCanceled => {\n\t\t\twhile (true) {\n\t\t\t\tif (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n\t\t\t\t\treturn BracketSearchCanceled.INSTANCE;\n\t\t\t\t}\n\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (!r) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n\t\t\t\tif (bracket.isOpen(hitText)) {\n\t\t\t\t\tcount++;\n\t\t\t\t} else if (bracket.isClose(hitText)) {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\n\t\t\t\tif (count === 0) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tsearchStartOffset = r.endColumn - 1;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tconst lineCount = this.textModel.getLineCount();\n\t\tfor (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = 0;\n\t\t\tlet searchStartOffset = 0;\n\t\t\tlet searchEndOffset = 0;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\t\tconst searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchEndOffset\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findPrevBracket(_position: IPosition): IFoundBracket | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\n\t\tif (this.canBuildAST) {\n\t\t\tthis.bracketsRequested = true;\n\t\t\tthis.updateBracketPairsTree();\n\t\t\treturn this.bracketPairsTree.value?.object.getFirstBracketBefore(position) || null;\n\t\t}\n\n\t\tlet languageId: string | null = null;\n\t\tlet modeBrackets: RichEditBrackets | null = null;\n\t\tlet bracketConfig: LanguageBracketsConfiguration | null = null;\n\t\tfor (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = tokenCount - 1;\n\t\t\tlet searchStartOffset = lineText.length;\n\t\t\tlet searchEndOffset = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\t\t\t\t\tbracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\t// language id change!\n\t\t\t\t\tif (modeBrackets && bracketConfig && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevSearchInToken = false;\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\t\t\t\t\tbracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n\t\t\t\t}\n\n\t\t\t\tconst searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchStartOffset\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findNextBracket(_position: IPosition): IFoundBracket | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\n\t\tif (this.canBuildAST) {\n\t\t\tthis.bracketsRequested = true;\n\t\t\tthis.updateBracketPairsTree();\n\t\t\treturn this.bracketPairsTree.value?.object.getFirstBracketAfter(position) || null;\n\t\t}\n\n\t\tconst lineCount = this.textModel.getLineCount();\n\n\t\tlet languageId: string | null = null;\n\t\tlet modeBrackets: RichEditBrackets | null = null;\n\t\tlet bracketConfig: LanguageBracketsConfiguration | null = null;\n\t\tfor (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = 0;\n\t\t\tlet searchStartOffset = 0;\n\t\t\tlet searchEndOffset = 0;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\t\t\t\t\tbracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\t// language id change!\n\t\t\t\t\tif (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevSearchInToken = false;\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\t\t\t\t\tbracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n\t\t\t\t}\n\n\t\t\t\tconst searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchEndOffset\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn this._toFoundBracket(bracketConfig, r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findEnclosingBrackets(_position: IPosition, maxDuration?: number): [Range, Range] | null {\n\t\tconst position = this.textModel.validatePosition(_position);\n\n\t\tif (this.canBuildAST) {\n\t\t\tconst range = Range.fromPositions(position);\n\t\t\tconst bracketPair =\n\t\t\t\tthis.getBracketPairsInRange(Range.fromPositions(position, position)).findLast(\n\t\t\t\t\t(item) => item.closingBracketRange !== undefined && item.range.strictContainsRange(range)\n\t\t\t\t);\n\t\t\tif (bracketPair) {\n\t\t\t\treturn [bracketPair.openingBracketRange, bracketPair.closingBracketRange!];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tconst continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n\t\tconst lineCount = this.textModel.getLineCount();\n\t\tconst savedCounts = new Map<string, number[]>();\n\n\t\tlet counts: number[] = [];\n\t\tconst resetCounts = (languageId: string, modeBrackets: RichEditBrackets | null) => {\n\t\t\tif (!savedCounts.has(languageId)) {\n\t\t\t\tconst tmp = [];\n\t\t\t\tfor (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n\t\t\t\t\ttmp[i] = 0;\n\t\t\t\t}\n\t\t\t\tsavedCounts.set(languageId, tmp);\n\t\t\t}\n\t\t\tcounts = savedCounts.get(languageId)!;\n\t\t};\n\n\t\tlet totalCallCount = 0;\n\t\tconst searchInRange = (modeBrackets: RichEditBrackets, lineNumber: number, lineText: string, searchStartOffset: number, searchEndOffset: number): [Range, Range] | null | BracketSearchCanceled => {\n\t\t\twhile (true) {\n\t\t\t\tif (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n\t\t\t\t\treturn BracketSearchCanceled.INSTANCE;\n\t\t\t\t}\n\t\t\t\tconst r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (!r) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n\t\t\t\tconst bracket = modeBrackets.textIsBracket[hitText];\n\t\t\t\tif (bracket) {\n\t\t\t\t\tif (bracket.isOpen(hitText)) {\n\t\t\t\t\t\tcounts[bracket.index]++;\n\t\t\t\t\t} else if (bracket.isClose(hitText)) {\n\t\t\t\t\t\tcounts[bracket.index]--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (counts[bracket.index] === -1) {\n\t\t\t\t\t\treturn this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsearchStartOffset = r.endColumn - 1;\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tlet languageId: string | null = null;\n\t\tlet modeBrackets: RichEditBrackets | null = null;\n\t\tfor (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n\t\t\tconst tokenCount = lineTokens.getCount();\n\t\t\tconst lineText = this.textModel.getLineContent(lineNumber);\n\n\t\t\tlet tokenIndex = 0;\n\t\t\tlet searchStartOffset = 0;\n\t\t\tlet searchEndOffset = 0;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\t\t\t\tsearchStartOffset = position.column - 1;\n\t\t\t\tsearchEndOffset = position.column - 1;\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\t\t\t\t\tresetCounts(languageId, modeBrackets);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet prevSearchInToken = true;\n\t\t\tfor (; tokenIndex < tokenCount; tokenIndex++) {\n\t\t\t\tconst tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t\t\tif (languageId !== tokenLanguageId) {\n\t\t\t\t\t// language id change!\n\t\t\t\t\tif (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn stripBracketSearchCanceled(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevSearchInToken = false;\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = tokenLanguageId;\n\t\t\t\t\tmodeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n\t\t\t\t\tresetCounts(languageId, modeBrackets);\n\t\t\t\t}\n\n\t\t\t\tconst searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n\t\t\t\tif (searchInToken) {\n\t\t\t\t\t// this token should be searched\n\t\t\t\t\tif (prevSearchInToken) {\n\t\t\t\t\t\t// the previous token should be searched, simply extend searchEndOffset\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the previous token should not be searched\n\t\t\t\t\t\tsearchStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\t\t\t\tsearchEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// this token should not be searched\n\t\t\t\t\tif (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\t\t\tconst r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn stripBracketSearchCanceled(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprevSearchInToken = searchInToken;\n\t\t\t}\n\n\t\t\tif (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n\t\t\t\tconst r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\t\t\t\tif (r) {\n\t\t\t\t\treturn stripBracketSearchCanceled(r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _toFoundBracket(bracketConfig: LanguageBracketsConfiguration, r: Range): IFoundBracket | null {\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text = this.textModel.getValueInRange(r);\n\t\ttext = text.toLowerCase();\n\n\t\tconst bracketInfo = bracketConfig.getBracketInfo(text);\n\t\tif (!bracketInfo) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\trange: r,\n\t\t\tbracketInfo\n\t\t};\n\t}\n}\n\nfunction createDisposableRef<T>(object: T, disposable?: IDisposable): IReference<T> {\n\treturn {\n\t\tobject,\n\t\tdispose: () => disposable?.dispose(),\n\t};\n}\n\ntype ContinueBracketSearchPredicate = (() => boolean);\n\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration: number | undefined): ContinueBracketSearchPredicate {\n\tif (typeof maxDuration === 'undefined') {\n\t\treturn () => true;\n\t} else {\n\t\tconst startTime = Date.now();\n\t\treturn () => {\n\t\t\treturn (Date.now() - startTime <= maxDuration);\n\t\t};\n\t}\n}\n\nclass BracketSearchCanceled {\n\tpublic static INSTANCE = new BracketSearchCanceled();\n\t_searchCanceledBrand = undefined;\n\tprivate constructor() { }\n}\n\nfunction stripBracketSearchCanceled<T>(result: T | null | BracketSearchCanceled): T | null {\n\tif (result instanceof BracketSearchCanceled) {\n\t\treturn null;\n\t}\n\treturn result;\n}\n"],
  "mappings": "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",
  "names": ["languageId", "modeBrackets"]
}
