import{AstNodeKind as c,InvalidBracketAstNode as p,ListAstNode as h,PairAstNode as d,TextAstNode as l}from"./ast.js";import{BeforeEditPositionMapper as m}from"./beforeEditPositionMapper.js";import{concat23Trees as u,concat23TreesOfSameHeight as f}from"./concat23Trees.js";import{lengthIsZero as k,lengthLessThan as N}from"./length.js";import{NodeReader as g}from"./nodeReader.js";import{SmallImmutableSet as C}from"./smallImmutableSet.js";import{TokenKind as i}from"./tokenizer.js";function x(a,t,r,e){return new b(a,t,r,e).parseDocument()}class b{constructor(t,r,e,n){this.tokenizer=t;this.createImmutableLists=n;if(e&&n)throw new Error("Not supported");this.oldNodeReader=e?new g(e):void 0,this.positionMapper=new m(r)}oldNodeReader;positionMapper;_itemsConstructed=0;_itemsFromCache=0;get nodesConstructed(){return this._itemsConstructed}get nodesReused(){return this._itemsFromCache}parseDocument(){this._itemsConstructed=0,this._itemsFromCache=0;let t=this.parseList(C.getEmpty(),0);return t||(t=h.getEmpty()),t}parseList(t,r){const e=[];for(;;){let s=this.tryReadChildFromCache(t);if(!s){const o=this.tokenizer.peek();if(!o||o.kind===i.ClosingBracket&&o.bracketIds.intersects(t))break;s=this.parseChild(t,r+1)}s.kind===c.List&&s.childrenLength===0||e.push(s)}return this.oldNodeReader?u(e):f(e,this.createImmutableLists)}tryReadChildFromCache(t){if(this.oldNodeReader){const r=this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);if(r===null||!k(r)){const e=this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset),n=>r!==null&&!N(n.length,r)?!1:n.canBeReused(t));if(e)return this._itemsFromCache++,this.tokenizer.skip(e.length),e}}}parseChild(t,r){this._itemsConstructed++;const e=this.tokenizer.read();switch(e.kind){case i.ClosingBracket:return new p(e.bracketIds,e.length);case i.Text:return e.astNode;case i.OpeningBracket:{if(r>300)return new l(e.length);const n=t.merge(e.bracketIds),s=this.parseList(n,r+1),o=this.tokenizer.peek();return o&&o.kind===i.ClosingBracket&&(o.bracketId===e.bracketId||o.bracketIds.intersects(e.bracketIds))?(this.tokenizer.read(),d.create(e.astNode,s,o.astNode)):d.create(e.astNode,s,null)}default:throw new Error("unexpected")}}}export{x as parseDocument};
