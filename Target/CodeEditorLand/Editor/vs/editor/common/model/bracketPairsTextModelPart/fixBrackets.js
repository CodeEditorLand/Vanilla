import{AstNodeKind as r}from"./bracketPairsTree/ast.js";import{LanguageAgnosticBracketTokens as h}from"./bracketPairsTree/brackets.js";import{lengthAdd as o,lengthGetColumnCountIfZeroLineCount as l,lengthZero as T}from"./bracketPairsTree/length.js";import{parseDocument as B}from"./bracketPairsTree/parser.js";import{DenseKeyProvider as C}from"./bracketPairsTree/smallImmutableSet.js";import{TextBufferTokenizer as d}from"./bracketPairsTree/tokenizer.js";function v(g,i){const k=new C,a=new h(k,e=>i.getLanguageConfiguration(e)),u=new d(new I([g]),a),m=B(u,[],void 0,!0);let s="";const p=g.getLineContent();function t(e,n){if(e.kind===r.Pair)if(t(e.openingBracket,n),n=o(n,e.openingBracket.length),e.child&&(t(e.child,n),n=o(n,e.child.length)),e.closingBracket)t(e.closingBracket,n),n=o(n,e.closingBracket.length);else{const L=a.getSingleLanguageBracketTokens(e.openingBracket.languageId).findClosingTokenText(e.openingBracket.bracketIds);s+=L}else if(e.kind!==r.UnexpectedClosingBracket){if(e.kind===r.Text||e.kind===r.Bracket)s+=p.substring(l(n),l(o(n,e.length)));else if(e.kind===r.List)for(const c of e.children)t(c,n),n=o(n,c.length)}}return t(m,T),s}class I{constructor(i){this.lines=i}getValue(){return this.lines.map(i=>i.getLineContent()).join(`
`)}getLineCount(){return this.lines.length}getLineLength(i){return this.lines[i-1].getLineContent().length}tokenization={getLineTokens:i=>this.lines[i-1]}}export{v as fixBracketsInLine};
