{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CallbackIterable } from \"../../../../../base/common/arrays.js\";\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport type { Position } from \"../../../core/position.js\";\nimport type { Range } from \"../../../core/range.js\";\nimport type { ResolvedLanguageConfiguration } from \"../../../languages/languageConfigurationRegistry.js\";\nimport type {\n\tClosingBracketKind,\n\tOpeningBracketKind,\n} from \"../../../languages/supports/languageBracketsConfiguration.js\";\nimport type { ITextModel } from \"../../../model.js\";\nimport {\n\tBracketInfo,\n\tBracketPairWithMinIndentationInfo,\n\ttype IFoundBracket,\n} from \"../../../textModelBracketPairs.js\";\nimport type {\n\tIModelContentChangedEvent,\n\tIModelTokensChangedEvent,\n} from \"../../../textModelEvents.js\";\nimport { BackgroundTokenizationState } from \"../../../tokenizationTextModelPart.js\";\nimport type { TextModel } from \"../../textModel.js\";\nimport { type AstNode, AstNodeKind } from \"./ast.js\";\nimport { TextEditInfo } from \"./beforeEditPositionMapper.js\";\nimport { LanguageAgnosticBracketTokens } from \"./brackets.js\";\nimport { combineTextEditInfos } from \"./combineTextEditInfos.js\";\nimport {\n\ttype Length,\n\tlengthAdd,\n\tlengthGreaterThanEqual,\n\tlengthLessThan,\n\tlengthLessThanEqual,\n\tlengthZero,\n\tlengthsToRange,\n\tpositionToLength,\n\ttoLength,\n} from \"./length.js\";\nimport { parseDocument } from \"./parser.js\";\nimport { DenseKeyProvider } from \"./smallImmutableSet.js\";\nimport { FastTokenizer, TextBufferTokenizer } from \"./tokenizer.js\";\n\nexport class BracketPairsTree extends Disposable {\n\tprivate readonly didChangeEmitter = new Emitter<void>();\n\n\t/*\n\t\tThere are two trees:\n\t\t* The initial tree that has no token information and is used for performant initial bracket colorization.\n\t\t* The tree that used token information to detect bracket pairs.\n\n\t\tTo prevent flickering, we only switch from the initial tree to tree with token information\n\t\twhen tokenization completes.\n\t\tSince the text can be edited while background tokenization is in progress, we need to update both trees.\n\t*/\n\tprivate initialAstWithoutTokens: AstNode | undefined;\n\tprivate astWithTokens: AstNode | undefined;\n\n\tprivate readonly denseKeyProvider = new DenseKeyProvider<string>();\n\tprivate readonly brackets = new LanguageAgnosticBracketTokens(\n\t\tthis.denseKeyProvider,\n\t\tthis.getLanguageConfiguration,\n\t);\n\n\tpublic didLanguageChange(languageId: string): boolean {\n\t\treturn this.brackets.didLanguageChange(languageId);\n\t}\n\n\tpublic readonly onDidChange = this.didChangeEmitter.event;\n\tprivate queuedTextEditsForInitialAstWithoutTokens: TextEditInfo[] = [];\n\tprivate queuedTextEdits: TextEditInfo[] = [];\n\n\tpublic constructor(\n\t\tprivate readonly textModel: TextModel,\n\t\tprivate readonly getLanguageConfiguration: (\n\t\t\tlanguageId: string,\n\t\t) => ResolvedLanguageConfiguration,\n\t) {\n\t\tsuper();\n\n\t\tif (!textModel.tokenization.hasTokens) {\n\t\t\tconst brackets = this.brackets.getSingleLanguageBracketTokens(\n\t\t\t\tthis.textModel.getLanguageId(),\n\t\t\t);\n\t\t\tconst tokenizer = new FastTokenizer(\n\t\t\t\tthis.textModel.getValue(),\n\t\t\t\tbrackets,\n\t\t\t);\n\t\t\tthis.initialAstWithoutTokens = parseDocument(\n\t\t\t\ttokenizer,\n\t\t\t\t[],\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis.astWithTokens = this.initialAstWithoutTokens;\n\t\t} else if (\n\t\t\ttextModel.tokenization.backgroundTokenizationState ===\n\t\t\tBackgroundTokenizationState.Completed\n\t\t) {\n\t\t\t// Skip the initial ast, as there is no flickering.\n\t\t\t// Directly create the tree with token information.\n\t\t\tthis.initialAstWithoutTokens = undefined;\n\t\t\tthis.astWithTokens = this.parseDocumentFromTextBuffer(\n\t\t\t\t[],\n\t\t\t\tundefined,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t} else {\n\t\t\t// We missed some token changes already, so we cannot use the fast tokenizer + delta increments\n\t\t\tthis.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(\n\t\t\t\t[],\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis.astWithTokens = this.initialAstWithoutTokens;\n\t\t}\n\t}\n\n\t//#region TextModel events\n\n\tpublic handleDidChangeBackgroundTokenizationState(): void {\n\t\tif (\n\t\t\tthis.textModel.tokenization.backgroundTokenizationState ===\n\t\t\tBackgroundTokenizationState.Completed\n\t\t) {\n\t\t\tconst wasUndefined = this.initialAstWithoutTokens === undefined;\n\t\t\t// Clear the initial tree as we can use the tree with token information now.\n\t\t\tthis.initialAstWithoutTokens = undefined;\n\t\t\tif (!wasUndefined) {\n\t\t\t\tthis.didChangeEmitter.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleDidChangeTokens({ ranges }: IModelTokensChangedEvent): void {\n\t\tconst edits = ranges.map(\n\t\t\t(r) =>\n\t\t\t\tnew TextEditInfo(\n\t\t\t\t\ttoLength(r.fromLineNumber - 1, 0),\n\t\t\t\t\ttoLength(r.toLineNumber, 0),\n\t\t\t\t\ttoLength(r.toLineNumber - r.fromLineNumber + 1, 0),\n\t\t\t\t),\n\t\t);\n\n\t\tthis.handleEdits(edits, true);\n\n\t\tif (!this.initialAstWithoutTokens) {\n\t\t\tthis.didChangeEmitter.fire();\n\t\t}\n\t}\n\n\tpublic handleContentChanged(change: IModelContentChangedEvent) {\n\t\tconst edits = TextEditInfo.fromModelContentChanges(change.changes);\n\t\tthis.handleEdits(edits, false);\n\t}\n\n\tprivate handleEdits(edits: TextEditInfo[], tokenChange: boolean): void {\n\t\t// Lazily queue the edits and only apply them when the tree is accessed.\n\t\tconst result = combineTextEditInfos(this.queuedTextEdits, edits);\n\n\t\tthis.queuedTextEdits = result;\n\t\tif (this.initialAstWithoutTokens && !tokenChange) {\n\t\t\tthis.queuedTextEditsForInitialAstWithoutTokens =\n\t\t\t\tcombineTextEditInfos(\n\t\t\t\t\tthis.queuedTextEditsForInitialAstWithoutTokens,\n\t\t\t\t\tedits,\n\t\t\t\t);\n\t\t}\n\t}\n\n\t//#endregion\n\n\tprivate flushQueue() {\n\t\tif (this.queuedTextEdits.length > 0) {\n\t\t\tthis.astWithTokens = this.parseDocumentFromTextBuffer(\n\t\t\t\tthis.queuedTextEdits,\n\t\t\t\tthis.astWithTokens,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis.queuedTextEdits = [];\n\t\t}\n\t\tif (this.queuedTextEditsForInitialAstWithoutTokens.length > 0) {\n\t\t\tif (this.initialAstWithoutTokens) {\n\t\t\t\tthis.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(\n\t\t\t\t\tthis.queuedTextEditsForInitialAstWithoutTokens,\n\t\t\t\t\tthis.initialAstWithoutTokens,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.queuedTextEditsForInitialAstWithoutTokens = [];\n\t\t}\n\t}\n\n\t/**\n\t * @pure (only if isPure = true)\n\t */\n\tprivate parseDocumentFromTextBuffer(\n\t\tedits: TextEditInfo[],\n\t\tpreviousAst: AstNode | undefined,\n\t\timmutable: boolean,\n\t): AstNode {\n\t\t// Is much faster if `isPure = false`.\n\t\tconst isPure = false;\n\t\tconst previousAstClone = isPure\n\t\t\t? previousAst?.deepClone()\n\t\t\t: previousAst;\n\t\tconst tokenizer = new TextBufferTokenizer(\n\t\t\tthis.textModel,\n\t\t\tthis.brackets,\n\t\t);\n\t\tconst result = parseDocument(\n\t\t\ttokenizer,\n\t\t\tedits,\n\t\t\tpreviousAstClone,\n\t\t\timmutable,\n\t\t);\n\t\treturn result;\n\t}\n\n\tpublic getBracketsInRange(\n\t\trange: Range,\n\t\tonlyColorizedBrackets: boolean,\n\t): CallbackIterable<BracketInfo> {\n\t\tthis.flushQueue();\n\n\t\tconst startOffset = toLength(\n\t\t\trange.startLineNumber - 1,\n\t\t\trange.startColumn - 1,\n\t\t);\n\t\tconst endOffset = toLength(\n\t\t\trange.endLineNumber - 1,\n\t\t\trange.endColumn - 1,\n\t\t);\n\t\treturn new CallbackIterable((cb) => {\n\t\t\tconst node = this.initialAstWithoutTokens || this.astWithTokens!;\n\t\t\tcollectBrackets(\n\t\t\t\tnode,\n\t\t\t\tlengthZero,\n\t\t\t\tnode.length,\n\t\t\t\tstartOffset,\n\t\t\t\tendOffset,\n\t\t\t\tcb,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tnew Map(),\n\t\t\t\tonlyColorizedBrackets,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic getBracketPairsInRange(\n\t\trange: Range,\n\t\tincludeMinIndentation: boolean,\n\t): CallbackIterable<BracketPairWithMinIndentationInfo> {\n\t\tthis.flushQueue();\n\n\t\tconst startLength = positionToLength(range.getStartPosition());\n\t\tconst endLength = positionToLength(range.getEndPosition());\n\n\t\treturn new CallbackIterable((cb) => {\n\t\t\tconst node = this.initialAstWithoutTokens || this.astWithTokens!;\n\t\t\tconst context = new CollectBracketPairsContext(\n\t\t\t\tcb,\n\t\t\t\tincludeMinIndentation,\n\t\t\t\tthis.textModel,\n\t\t\t);\n\t\t\tcollectBracketPairs(\n\t\t\t\tnode,\n\t\t\t\tlengthZero,\n\t\t\t\tnode.length,\n\t\t\t\tstartLength,\n\t\t\t\tendLength,\n\t\t\t\tcontext,\n\t\t\t\t0,\n\t\t\t\tnew Map(),\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic getFirstBracketAfter(position: Position): IFoundBracket | null {\n\t\tthis.flushQueue();\n\n\t\tconst node = this.initialAstWithoutTokens || this.astWithTokens!;\n\t\treturn getFirstBracketAfter(\n\t\t\tnode,\n\t\t\tlengthZero,\n\t\t\tnode.length,\n\t\t\tpositionToLength(position),\n\t\t);\n\t}\n\n\tpublic getFirstBracketBefore(position: Position): IFoundBracket | null {\n\t\tthis.flushQueue();\n\n\t\tconst node = this.initialAstWithoutTokens || this.astWithTokens!;\n\t\treturn getFirstBracketBefore(\n\t\t\tnode,\n\t\t\tlengthZero,\n\t\t\tnode.length,\n\t\t\tpositionToLength(position),\n\t\t);\n\t}\n}\n\nfunction getFirstBracketBefore(\n\tnode: AstNode,\n\tnodeOffsetStart: Length,\n\tnodeOffsetEnd: Length,\n\tposition: Length,\n): IFoundBracket | null {\n\tif (node.kind === AstNodeKind.List || node.kind === AstNodeKind.Pair) {\n\t\tconst lengths: { nodeOffsetStart: Length; nodeOffsetEnd: Length }[] =\n\t\t\t[];\n\t\tfor (const child of node.children) {\n\t\t\tnodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n\t\t\tlengths.push({ nodeOffsetStart, nodeOffsetEnd });\n\t\t\tnodeOffsetStart = nodeOffsetEnd;\n\t\t}\n\t\tfor (let i = lengths.length - 1; i >= 0; i--) {\n\t\t\tconst { nodeOffsetStart, nodeOffsetEnd } = lengths[i];\n\t\t\tif (lengthLessThan(nodeOffsetStart, position)) {\n\t\t\t\tconst result = getFirstBracketBefore(\n\t\t\t\t\tnode.children[i],\n\t\t\t\t\tnodeOffsetStart,\n\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\tposition,\n\t\t\t\t);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t} else if (node.kind === AstNodeKind.UnexpectedClosingBracket) {\n\t\treturn null;\n\t} else if (node.kind === AstNodeKind.Bracket) {\n\t\tconst range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n\t\treturn {\n\t\t\tbracketInfo: node.bracketInfo,\n\t\t\trange,\n\t\t};\n\t}\n\treturn null;\n}\n\nfunction getFirstBracketAfter(\n\tnode: AstNode,\n\tnodeOffsetStart: Length,\n\tnodeOffsetEnd: Length,\n\tposition: Length,\n): IFoundBracket | null {\n\tif (node.kind === AstNodeKind.List || node.kind === AstNodeKind.Pair) {\n\t\tfor (const child of node.children) {\n\t\t\tnodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n\t\t\tif (lengthLessThan(position, nodeOffsetEnd)) {\n\t\t\t\tconst result = getFirstBracketAfter(\n\t\t\t\t\tchild,\n\t\t\t\t\tnodeOffsetStart,\n\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\tposition,\n\t\t\t\t);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnodeOffsetStart = nodeOffsetEnd;\n\t\t}\n\t\treturn null;\n\t} else if (node.kind === AstNodeKind.UnexpectedClosingBracket) {\n\t\treturn null;\n\t} else if (node.kind === AstNodeKind.Bracket) {\n\t\tconst range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n\t\treturn {\n\t\t\tbracketInfo: node.bracketInfo,\n\t\t\trange,\n\t\t};\n\t}\n\treturn null;\n}\n\nfunction collectBrackets(\n\tnode: AstNode,\n\tnodeOffsetStart: Length,\n\tnodeOffsetEnd: Length,\n\tstartOffset: Length,\n\tendOffset: Length,\n\tpush: (item: BracketInfo) => boolean,\n\tlevel: number,\n\tnestingLevelOfEqualBracketType: number,\n\tlevelPerBracketType: Map<string, number>,\n\tonlyColorizedBrackets: boolean,\n\tparentPairIsIncomplete = false,\n): boolean {\n\tif (level > 200) {\n\t\treturn true;\n\t}\n\n\twhileLoop: while (true) {\n\t\tswitch (node.kind) {\n\t\t\tcase AstNodeKind.List: {\n\t\t\t\tconst childCount = node.childrenLength;\n\t\t\t\tfor (let i = 0; i < childCount; i++) {\n\t\t\t\t\tconst child = node.getChild(i);\n\t\t\t\t\tif (!child) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tnodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n\t\t\t\t\tif (\n\t\t\t\t\t\tlengthLessThanEqual(nodeOffsetStart, endOffset) &&\n\t\t\t\t\t\tlengthGreaterThanEqual(nodeOffsetEnd, startOffset)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst childEndsAfterEnd = lengthGreaterThanEqual(\n\t\t\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\t\t\tendOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (childEndsAfterEnd) {\n\t\t\t\t\t\t\t// No child after this child in the requested window, don't recurse\n\t\t\t\t\t\t\tnode = child;\n\t\t\t\t\t\t\tcontinue whileLoop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst shouldContinue = collectBrackets(\n\t\t\t\t\t\t\tchild,\n\t\t\t\t\t\t\tnodeOffsetStart,\n\t\t\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\t\t\tstartOffset,\n\t\t\t\t\t\t\tendOffset,\n\t\t\t\t\t\t\tpush,\n\t\t\t\t\t\t\tlevel,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tlevelPerBracketType,\n\t\t\t\t\t\t\tonlyColorizedBrackets,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnodeOffsetStart = nodeOffsetEnd;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase AstNodeKind.Pair: {\n\t\t\t\tconst colorize =\n\t\t\t\t\t!onlyColorizedBrackets ||\n\t\t\t\t\t!node.closingBracket ||\n\t\t\t\t\t(\n\t\t\t\t\t\tnode.closingBracket.bracketInfo as ClosingBracketKind\n\t\t\t\t\t).closesColorized(\n\t\t\t\t\t\tnode.openingBracket.bracketInfo as OpeningBracketKind,\n\t\t\t\t\t);\n\n\t\t\t\tlet levelPerBracket = 0;\n\t\t\t\tif (levelPerBracketType) {\n\t\t\t\t\tlet existing = levelPerBracketType.get(\n\t\t\t\t\t\tnode.openingBracket.text,\n\t\t\t\t\t);\n\t\t\t\t\tif (existing === undefined) {\n\t\t\t\t\t\texisting = 0;\n\t\t\t\t\t}\n\t\t\t\t\tlevelPerBracket = existing;\n\t\t\t\t\tif (colorize) {\n\t\t\t\t\t\texisting++;\n\t\t\t\t\t\tlevelPerBracketType.set(\n\t\t\t\t\t\t\tnode.openingBracket.text,\n\t\t\t\t\t\t\texisting,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst childCount = node.childrenLength;\n\t\t\t\tfor (let i = 0; i < childCount; i++) {\n\t\t\t\t\tconst child = node.getChild(i);\n\t\t\t\t\tif (!child) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tnodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n\t\t\t\t\tif (\n\t\t\t\t\t\tlengthLessThanEqual(nodeOffsetStart, endOffset) &&\n\t\t\t\t\t\tlengthGreaterThanEqual(nodeOffsetEnd, startOffset)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst childEndsAfterEnd = lengthGreaterThanEqual(\n\t\t\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\t\t\tendOffset,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tchildEndsAfterEnd &&\n\t\t\t\t\t\t\tchild.kind !== AstNodeKind.Bracket\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// No child after this child in the requested window, don't recurse\n\t\t\t\t\t\t\t// Don't do this for brackets because of unclosed/unopened brackets\n\t\t\t\t\t\t\tnode = child;\n\t\t\t\t\t\t\tif (colorize) {\n\t\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\t\tnestingLevelOfEqualBracketType =\n\t\t\t\t\t\t\t\t\tlevelPerBracket + 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnestingLevelOfEqualBracketType =\n\t\t\t\t\t\t\t\t\tlevelPerBracket;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue whileLoop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcolorize ||\n\t\t\t\t\t\t\tchild.kind !== AstNodeKind.Bracket ||\n\t\t\t\t\t\t\t!node.closingBracket\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst shouldContinue = collectBrackets(\n\t\t\t\t\t\t\t\tchild,\n\t\t\t\t\t\t\t\tnodeOffsetStart,\n\t\t\t\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\t\t\t\tstartOffset,\n\t\t\t\t\t\t\t\tendOffset,\n\t\t\t\t\t\t\t\tpush,\n\t\t\t\t\t\t\t\tcolorize ? level + 1 : level,\n\t\t\t\t\t\t\t\tcolorize\n\t\t\t\t\t\t\t\t\t? levelPerBracket + 1\n\t\t\t\t\t\t\t\t\t: levelPerBracket,\n\t\t\t\t\t\t\t\tlevelPerBracketType,\n\t\t\t\t\t\t\t\tonlyColorizedBrackets,\n\t\t\t\t\t\t\t\t!node.closingBracket,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnodeOffsetStart = nodeOffsetEnd;\n\t\t\t\t}\n\n\t\t\t\tlevelPerBracketType?.set(\n\t\t\t\t\tnode.openingBracket.text,\n\t\t\t\t\tlevelPerBracket,\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase AstNodeKind.UnexpectedClosingBracket: {\n\t\t\t\tconst range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n\t\t\t\treturn push(new BracketInfo(range, level - 1, 0, true));\n\t\t\t}\n\t\t\tcase AstNodeKind.Bracket: {\n\t\t\t\tconst range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n\t\t\t\treturn push(\n\t\t\t\t\tnew BracketInfo(\n\t\t\t\t\t\trange,\n\t\t\t\t\t\tlevel - 1,\n\t\t\t\t\t\tnestingLevelOfEqualBracketType - 1,\n\t\t\t\t\t\tparentPairIsIncomplete,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase AstNodeKind.Text:\n\t\t\t\treturn true;\n\t\t}\n\t}\n}\n\nclass CollectBracketPairsContext {\n\tconstructor(\n\t\tpublic readonly push: (\n\t\t\titem: BracketPairWithMinIndentationInfo,\n\t\t) => boolean,\n\t\tpublic readonly includeMinIndentation: boolean,\n\t\tpublic readonly textModel: ITextModel,\n\t) {}\n}\n\nfunction collectBracketPairs(\n\tnode: AstNode,\n\tnodeOffsetStart: Length,\n\tnodeOffsetEnd: Length,\n\tstartOffset: Length,\n\tendOffset: Length,\n\tcontext: CollectBracketPairsContext,\n\tlevel: number,\n\tlevelPerBracketType: Map<string, number>,\n): boolean {\n\tif (level > 200) {\n\t\treturn true;\n\t}\n\n\tlet shouldContinue = true;\n\n\tif (node.kind === AstNodeKind.Pair) {\n\t\tlet levelPerBracket = 0;\n\t\tif (levelPerBracketType) {\n\t\t\tlet existing = levelPerBracketType.get(node.openingBracket.text);\n\t\t\tif (existing === undefined) {\n\t\t\t\texisting = 0;\n\t\t\t}\n\t\t\tlevelPerBracket = existing;\n\t\t\texisting++;\n\t\t\tlevelPerBracketType.set(node.openingBracket.text, existing);\n\t\t}\n\n\t\tconst openingBracketEnd = lengthAdd(\n\t\t\tnodeOffsetStart,\n\t\t\tnode.openingBracket.length,\n\t\t);\n\t\tlet minIndentation = -1;\n\t\tif (context.includeMinIndentation) {\n\t\t\tminIndentation = node.computeMinIndentation(\n\t\t\t\tnodeOffsetStart,\n\t\t\t\tcontext.textModel,\n\t\t\t);\n\t\t}\n\n\t\tshouldContinue = context.push(\n\t\t\tnew BracketPairWithMinIndentationInfo(\n\t\t\t\tlengthsToRange(nodeOffsetStart, nodeOffsetEnd),\n\t\t\t\tlengthsToRange(nodeOffsetStart, openingBracketEnd),\n\t\t\t\tnode.closingBracket\n\t\t\t\t\t? lengthsToRange(\n\t\t\t\t\t\t\tlengthAdd(\n\t\t\t\t\t\t\t\topeningBracketEnd,\n\t\t\t\t\t\t\t\tnode.child?.length || lengthZero,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tlevel,\n\t\t\t\tlevelPerBracket,\n\t\t\t\tnode,\n\t\t\t\tminIndentation,\n\t\t\t),\n\t\t);\n\n\t\tnodeOffsetStart = openingBracketEnd;\n\t\tif (shouldContinue && node.child) {\n\t\t\tconst child = node.child;\n\t\t\tnodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n\t\t\tif (\n\t\t\t\tlengthLessThanEqual(nodeOffsetStart, endOffset) &&\n\t\t\t\tlengthGreaterThanEqual(nodeOffsetEnd, startOffset)\n\t\t\t) {\n\t\t\t\tshouldContinue = collectBracketPairs(\n\t\t\t\t\tchild,\n\t\t\t\t\tnodeOffsetStart,\n\t\t\t\t\tnodeOffsetEnd,\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset,\n\t\t\t\t\tcontext,\n\t\t\t\t\tlevel + 1,\n\t\t\t\t\tlevelPerBracketType,\n\t\t\t\t);\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlevelPerBracketType?.set(node.openingBracket.text, levelPerBracket);\n\t} else {\n\t\tlet curOffset = nodeOffsetStart;\n\t\tfor (const child of node.children) {\n\t\t\tconst childOffset = curOffset;\n\t\t\tcurOffset = lengthAdd(curOffset, child.length);\n\n\t\t\tif (\n\t\t\t\tlengthLessThanEqual(childOffset, endOffset) &&\n\t\t\t\tlengthLessThanEqual(startOffset, curOffset)\n\t\t\t) {\n\t\t\t\tshouldContinue = collectBracketPairs(\n\t\t\t\t\tchild,\n\t\t\t\t\tchildOffset,\n\t\t\t\t\tcurOffset,\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset,\n\t\t\t\t\tcontext,\n\t\t\t\t\tlevel,\n\t\t\t\t\tlevelPerBracketType,\n\t\t\t\t);\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn shouldContinue;\n}\n"],
  "mappings": "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",
  "names": ["nodeOffsetStart", "nodeOffsetEnd"]
}
