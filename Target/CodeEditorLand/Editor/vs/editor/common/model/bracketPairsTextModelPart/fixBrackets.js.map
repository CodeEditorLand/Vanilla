{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageConfigurationService } from '../../languages/languageConfigurationRegistry.js';\nimport { AstNode, AstNodeKind } from './bracketPairsTree/ast.js';\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { Length, lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { ITokenizerSource, TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nimport { IViewLineTokens } from '../../tokens/lineTokens.js';\n\nexport function fixBracketsInLine(tokens: IViewLineTokens, languageConfigurationService: ILanguageConfigurationService): string {\n\tconst denseKeyProvider = new DenseKeyProvider<string>();\n\tconst bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) =>\n\t\tlanguageConfigurationService.getLanguageConfiguration(languageId)\n\t);\n\tconst tokenizer = new TextBufferTokenizer(\n\t\tnew StaticTokenizerSource([tokens]),\n\t\tbracketTokens\n\t);\n\tconst node = parseDocument(tokenizer, [], undefined, true);\n\n\tlet str = '';\n\tconst line = tokens.getLineContent();\n\n\tfunction processNode(node: AstNode, offset: Length) {\n\t\tif (node.kind === AstNodeKind.Pair) {\n\t\t\tprocessNode(node.openingBracket, offset);\n\t\t\toffset = lengthAdd(offset, node.openingBracket.length);\n\n\t\t\tif (node.child) {\n\t\t\t\tprocessNode(node.child, offset);\n\t\t\t\toffset = lengthAdd(offset, node.child.length);\n\t\t\t}\n\t\t\tif (node.closingBracket) {\n\t\t\t\tprocessNode(node.closingBracket, offset);\n\t\t\t\toffset = lengthAdd(offset, node.closingBracket.length);\n\t\t\t} else {\n\t\t\t\tconst singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n\n\t\t\t\tconst closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n\t\t\t\tstr += closingTokenText;\n\t\t\t}\n\t\t} else if (node.kind === AstNodeKind.UnexpectedClosingBracket) {\n\t\t\t// remove the bracket\n\t\t} else if (node.kind === AstNodeKind.Text || node.kind === AstNodeKind.Bracket) {\n\t\t\tstr += line.substring(\n\t\t\t\tlengthGetColumnCountIfZeroLineCount(offset),\n\t\t\t\tlengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length))\n\t\t\t);\n\t\t} else if (node.kind === AstNodeKind.List) {\n\t\t\tfor (const child of node.children) {\n\t\t\t\tprocessNode(child, offset);\n\t\t\t\toffset = lengthAdd(offset, child.length);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessNode(node, lengthZero);\n\n\treturn str;\n}\n\nclass StaticTokenizerSource implements ITokenizerSource {\n\tconstructor(private readonly lines: IViewLineTokens[]) { }\n\n\tgetValue(): string {\n\t\treturn this.lines.map(l => l.getLineContent()).join('\\n');\n\t}\n\tgetLineCount(): number {\n\t\treturn this.lines.length;\n\t}\n\tgetLineLength(lineNumber: number): number {\n\t\treturn this.lines[lineNumber - 1].getLineContent().length;\n\t}\n\n\ttokenization = {\n\t\tgetLineTokens: (lineNumber: number): IViewLineTokens => {\n\t\t\treturn this.lines[lineNumber - 1];\n\t\t}\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,qCAAqC;AAC9C,SAAS,SAAS,mBAAmB;AACrC,SAAS,qCAAqC;AAC9C,SAAS,QAAQ,WAAW,qCAAqC,kBAAkB;AACnF,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,SAAS,kBAAkB,2BAA2B;AACtD,SAAS,uBAAuB;AAEzB,SAAS,kBAAkB,QAAyB,8BAAqE;AAC/H,QAAM,mBAAmB,IAAI,iBAAyB;AACtD,QAAM,gBAAgB,IAAI;AAAA,IAA8B;AAAA,IAAkB,CAAC,eAC1E,6BAA6B,yBAAyB,UAAU;AAAA,EACjE;AACA,QAAM,YAAY,IAAI;AAAA,IACrB,IAAI,sBAAsB,CAAC,MAAM,CAAC;AAAA,IAClC;AAAA,EACD;AACA,QAAM,OAAO,cAAc,WAAW,CAAC,GAAG,QAAW,IAAI;AAEzD,MAAI,MAAM;AACV,QAAM,OAAO,OAAO,eAAe;AAEnC,WAAS,YAAYA,OAAe,QAAgB;AACnD,QAAIA,MAAK,SAAS,YAAY,MAAM;AACnC,kBAAYA,MAAK,gBAAgB,MAAM;AACvC,eAAS,UAAU,QAAQA,MAAK,eAAe,MAAM;AAErD,UAAIA,MAAK,OAAO;AACf,oBAAYA,MAAK,OAAO,MAAM;AAC9B,iBAAS,UAAU,QAAQA,MAAK,MAAM,MAAM;AAAA,MAC7C;AACA,UAAIA,MAAK,gBAAgB;AACxB,oBAAYA,MAAK,gBAAgB,MAAM;AACvC,iBAAS,UAAU,QAAQA,MAAK,eAAe,MAAM;AAAA,MACtD,OAAO;AACN,cAAM,0BAA0B,cAAc,+BAA+BA,MAAK,eAAe,UAAU;AAE3G,cAAM,mBAAmB,wBAAwB,qBAAqBA,MAAK,eAAe,UAAU;AACpG,eAAO;AAAA,MACR;AAAA,IACD,WAAWA,MAAK,SAAS,YAAY,0BAA0B;AAAA,IAE/D,WAAWA,MAAK,SAAS,YAAY,QAAQA,MAAK,SAAS,YAAY,SAAS;AAC/E,aAAO,KAAK;AAAA,QACX,oCAAoC,MAAM;AAAA,QAC1C,oCAAoC,UAAU,QAAQA,MAAK,MAAM,CAAC;AAAA,MACnE;AAAA,IACD,WAAWA,MAAK,SAAS,YAAY,MAAM;AAC1C,iBAAW,SAASA,MAAK,UAAU;AAClC,oBAAY,OAAO,MAAM;AACzB,iBAAS,UAAU,QAAQ,MAAM,MAAM;AAAA,MACxC;AAAA,IACD;AAAA,EACD;AA/BS;AAiCT,cAAY,MAAM,UAAU;AAE5B,SAAO;AACR;AAlDgB;AAoDhB,MAAM,sBAAkD;AAAA,EACvD,YAA6B,OAA0B;AAA1B;AAAA,EAA4B;AAAA,EAnE1D,OAkEwD;AAAA;AAAA;AAAA,EAGvD,WAAmB;AAClB,WAAO,KAAK,MAAM,IAAI,OAAK,EAAE,eAAe,CAAC,EAAE,KAAK,IAAI;AAAA,EACzD;AAAA,EACA,eAAuB;AACtB,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACA,cAAc,YAA4B;AACzC,WAAO,KAAK,MAAM,aAAa,CAAC,EAAE,eAAe,EAAE;AAAA,EACpD;AAAA,EAEA,eAAe;AAAA,IACd,eAAe,wBAAC,eAAwC;AACvD,aAAO,KAAK,MAAM,aAAa,CAAC;AAAA,IACjC,GAFe;AAAA,EAGhB;AACD;",
  "names": ["node"]
}
