{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ILanguageConfigurationService } from \"../../languages/languageConfigurationRegistry.js\";\nimport type { IViewLineTokens } from \"../../tokens/lineTokens.js\";\nimport { type AstNode, AstNodeKind } from \"./bracketPairsTree/ast.js\";\nimport { LanguageAgnosticBracketTokens } from \"./bracketPairsTree/brackets.js\";\nimport {\n\ttype Length,\n\tlengthAdd,\n\tlengthGetColumnCountIfZeroLineCount,\n\tlengthZero,\n} from \"./bracketPairsTree/length.js\";\nimport { parseDocument } from \"./bracketPairsTree/parser.js\";\nimport { DenseKeyProvider } from \"./bracketPairsTree/smallImmutableSet.js\";\nimport {\n\ttype ITokenizerSource,\n\tTextBufferTokenizer,\n} from \"./bracketPairsTree/tokenizer.js\";\n\nexport function fixBracketsInLine(\n\ttokens: IViewLineTokens,\n\tlanguageConfigurationService: ILanguageConfigurationService,\n): string {\n\tconst denseKeyProvider = new DenseKeyProvider<string>();\n\tconst bracketTokens = new LanguageAgnosticBracketTokens(\n\t\tdenseKeyProvider,\n\t\t(languageId) =>\n\t\t\tlanguageConfigurationService.getLanguageConfiguration(languageId),\n\t);\n\tconst tokenizer = new TextBufferTokenizer(\n\t\tnew StaticTokenizerSource([tokens]),\n\t\tbracketTokens,\n\t);\n\tconst node = parseDocument(tokenizer, [], undefined, true);\n\n\tlet str = \"\";\n\tconst line = tokens.getLineContent();\n\n\tfunction processNode(node: AstNode, offset: Length) {\n\t\tif (node.kind === AstNodeKind.Pair) {\n\t\t\tprocessNode(node.openingBracket, offset);\n\t\t\toffset = lengthAdd(offset, node.openingBracket.length);\n\n\t\t\tif (node.child) {\n\t\t\t\tprocessNode(node.child, offset);\n\t\t\t\toffset = lengthAdd(offset, node.child.length);\n\t\t\t}\n\t\t\tif (node.closingBracket) {\n\t\t\t\tprocessNode(node.closingBracket, offset);\n\t\t\t\toffset = lengthAdd(offset, node.closingBracket.length);\n\t\t\t} else {\n\t\t\t\tconst singleLangBracketTokens =\n\t\t\t\t\tbracketTokens.getSingleLanguageBracketTokens(\n\t\t\t\t\t\tnode.openingBracket.languageId,\n\t\t\t\t\t);\n\n\t\t\t\tconst closingTokenText =\n\t\t\t\t\tsingleLangBracketTokens.findClosingTokenText(\n\t\t\t\t\t\tnode.openingBracket.bracketIds,\n\t\t\t\t\t);\n\t\t\t\tstr += closingTokenText;\n\t\t\t}\n\t\t} else if (node.kind === AstNodeKind.UnexpectedClosingBracket) {\n\t\t\t// remove the bracket\n\t\t} else if (\n\t\t\tnode.kind === AstNodeKind.Text ||\n\t\t\tnode.kind === AstNodeKind.Bracket\n\t\t) {\n\t\t\tstr += line.substring(\n\t\t\t\tlengthGetColumnCountIfZeroLineCount(offset),\n\t\t\t\tlengthGetColumnCountIfZeroLineCount(\n\t\t\t\t\tlengthAdd(offset, node.length),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (node.kind === AstNodeKind.List) {\n\t\t\tfor (const child of node.children) {\n\t\t\t\tprocessNode(child, offset);\n\t\t\t\toffset = lengthAdd(offset, child.length);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessNode(node, lengthZero);\n\n\treturn str;\n}\n\nclass StaticTokenizerSource implements ITokenizerSource {\n\tconstructor(private readonly lines: IViewLineTokens[]) {}\n\n\tgetValue(): string {\n\t\treturn this.lines.map((l) => l.getLineContent()).join(\"\\n\");\n\t}\n\tgetLineCount(): number {\n\t\treturn this.lines.length;\n\t}\n\tgetLineLength(lineNumber: number): number {\n\t\treturn this.lines[lineNumber - 1].getLineContent().length;\n\t}\n\n\ttokenization = {\n\t\tgetLineTokens: (lineNumber: number): IViewLineTokens => {\n\t\t\treturn this.lines[lineNumber - 1];\n\t\t},\n\t};\n}\n"],
  "mappings": ";;AAOA,SAAuB,mBAAmB;AAC1C,SAAS,qCAAqC;AAC9C;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC;AAAA,EAEC;AAAA,OACM;AAEA,SAAS,kBACf,QACA,8BACS;AACT,QAAM,mBAAmB,IAAI,iBAAyB;AACtD,QAAM,gBAAgB,IAAI;AAAA,IACzB;AAAA,IACA,CAAC,eACA,6BAA6B,yBAAyB,UAAU;AAAA,EAClE;AACA,QAAM,YAAY,IAAI;AAAA,IACrB,IAAI,sBAAsB,CAAC,MAAM,CAAC;AAAA,IAClC;AAAA,EACD;AACA,QAAM,OAAO,cAAc,WAAW,CAAC,GAAG,QAAW,IAAI;AAEzD,MAAI,MAAM;AACV,QAAM,OAAO,OAAO,eAAe;AAEnC,WAAS,YAAYA,OAAe,QAAgB;AACnD,QAAIA,MAAK,SAAS,YAAY,MAAM;AACnC,kBAAYA,MAAK,gBAAgB,MAAM;AACvC,eAAS,UAAU,QAAQA,MAAK,eAAe,MAAM;AAErD,UAAIA,MAAK,OAAO;AACf,oBAAYA,MAAK,OAAO,MAAM;AAC9B,iBAAS,UAAU,QAAQA,MAAK,MAAM,MAAM;AAAA,MAC7C;AACA,UAAIA,MAAK,gBAAgB;AACxB,oBAAYA,MAAK,gBAAgB,MAAM;AACvC,iBAAS,UAAU,QAAQA,MAAK,eAAe,MAAM;AAAA,MACtD,OAAO;AACN,cAAM,0BACL,cAAc;AAAA,UACbA,MAAK,eAAe;AAAA,QACrB;AAED,cAAM,mBACL,wBAAwB;AAAA,UACvBA,MAAK,eAAe;AAAA,QACrB;AACD,eAAO;AAAA,MACR;AAAA,IACD,WAAWA,MAAK,SAAS,YAAY,0BAA0B;AAAA,IAE/D,WACCA,MAAK,SAAS,YAAY,QAC1BA,MAAK,SAAS,YAAY,SACzB;AACD,aAAO,KAAK;AAAA,QACX,oCAAoC,MAAM;AAAA,QAC1C;AAAA,UACC,UAAU,QAAQA,MAAK,MAAM;AAAA,QAC9B;AAAA,MACD;AAAA,IACD,WAAWA,MAAK,SAAS,YAAY,MAAM;AAC1C,iBAAW,SAASA,MAAK,UAAU;AAClC,oBAAY,OAAO,MAAM;AACzB,iBAAS,UAAU,QAAQ,MAAM,MAAM;AAAA,MACxC;AAAA,IACD;AAAA,EACD;AA1CS;AA4CT,cAAY,MAAM,UAAU;AAE5B,SAAO;AACR;AAlEgB;AAoEhB,MAAM,sBAAkD;AAAA,EACvD,YAA6B,OAA0B;AAA1B;AAAA,EAA2B;AAAA,EA3FzD,OA0FwD;AAAA;AAAA;AAAA,EAGvD,WAAmB;AAClB,WAAO,KAAK,MAAM,IAAI,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE,KAAK,IAAI;AAAA,EAC3D;AAAA,EACA,eAAuB;AACtB,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACA,cAAc,YAA4B;AACzC,WAAO,KAAK,MAAM,aAAa,CAAC,EAAE,eAAe,EAAE;AAAA,EACpD;AAAA,EAEA,eAAe;AAAA,IACd,eAAe,wBAAC,eAAwC;AACvD,aAAO,KAAK,MAAM,aAAa,CAAC;AAAA,IACjC,GAFe;AAAA,EAGhB;AACD;",
  "names": ["node"]
}
