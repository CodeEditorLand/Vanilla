{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/editStack.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as buffer from \"../../../base/common/buffer.js\";\nimport { onUnexpectedError } from \"../../../base/common/errors.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { basename } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport * as nls from \"../../../nls.js\";\nimport {\n\ttype IResourceUndoRedoElement,\n\ttype IUndoRedoService,\n\ttype IWorkspaceUndoRedoElement,\n\tUndoRedoElementType,\n\ttype UndoRedoGroup,\n} from \"../../../platform/undoRedo/common/undoRedo.js\";\nimport type { ISingleEditOperation } from \"../core/editOperation.js\";\nimport { Selection } from \"../core/selection.js\";\nimport {\n\tTextChange,\n\tcompressConsecutiveTextChanges,\n} from \"../core/textChange.js\";\nimport {\n\tEndOfLineSequence,\n\ttype ICursorStateComputer,\n\ttype ITextModel,\n\ttype IValidEditOperation,\n} from \"../model.js\";\nimport type { TextModel } from \"./textModel.js\";\n\nfunction uriGetComparisonKey(resource: URI): string {\n\treturn resource.toString();\n}\n\nexport class SingleModelEditStackData {\n\tpublic static create(\n\t\tmodel: ITextModel,\n\t\tbeforeCursorState: Selection[] | null,\n\t): SingleModelEditStackData {\n\t\tconst alternativeVersionId = model.getAlternativeVersionId();\n\t\tconst eol = getModelEOL(model);\n\t\treturn new SingleModelEditStackData(\n\t\t\talternativeVersionId,\n\t\t\talternativeVersionId,\n\t\t\teol,\n\t\t\teol,\n\t\t\tbeforeCursorState,\n\t\t\tbeforeCursorState,\n\t\t\t[],\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly beforeVersionId: number,\n\t\tpublic afterVersionId: number,\n\t\tpublic readonly beforeEOL: EndOfLineSequence,\n\t\tpublic afterEOL: EndOfLineSequence,\n\t\tpublic readonly beforeCursorState: Selection[] | null,\n\t\tpublic afterCursorState: Selection[] | null,\n\t\tpublic changes: TextChange[],\n\t) {}\n\n\tpublic append(\n\t\tmodel: ITextModel,\n\t\ttextChanges: TextChange[],\n\t\tafterEOL: EndOfLineSequence,\n\t\tafterVersionId: number,\n\t\tafterCursorState: Selection[] | null,\n\t): void {\n\t\tif (textChanges.length > 0) {\n\t\t\tthis.changes = compressConsecutiveTextChanges(\n\t\t\t\tthis.changes,\n\t\t\t\ttextChanges,\n\t\t\t);\n\t\t}\n\t\tthis.afterEOL = afterEOL;\n\t\tthis.afterVersionId = afterVersionId;\n\t\tthis.afterCursorState = afterCursorState;\n\t}\n\n\tprivate static _writeSelectionsSize(\n\t\tselections: Selection[] | null,\n\t): number {\n\t\treturn 4 + 4 * 4 * (selections ? selections.length : 0);\n\t}\n\n\tprivate static _writeSelections(\n\t\tb: Uint8Array,\n\t\tselections: Selection[] | null,\n\t\toffset: number,\n\t): number {\n\t\tbuffer.writeUInt32BE(b, selections ? selections.length : 0, offset);\n\t\toffset += 4;\n\t\tif (selections) {\n\t\t\tfor (const selection of selections) {\n\t\t\t\tbuffer.writeUInt32BE(\n\t\t\t\t\tb,\n\t\t\t\t\tselection.selectionStartLineNumber,\n\t\t\t\t\toffset,\n\t\t\t\t);\n\t\t\t\toffset += 4;\n\t\t\t\tbuffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n\t\t\t\toffset += 4;\n\t\t\t\tbuffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n\t\t\t\toffset += 4;\n\t\t\t\tbuffer.writeUInt32BE(b, selection.positionColumn, offset);\n\t\t\t\toffset += 4;\n\t\t\t}\n\t\t}\n\t\treturn offset;\n\t}\n\n\tprivate static _readSelections(\n\t\tb: Uint8Array,\n\t\toffset: number,\n\t\tdest: Selection[],\n\t): number {\n\t\tconst count = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n\t\t\toffset += 4;\n\t\t\tconst selectionStartColumn = buffer.readUInt32BE(b, offset);\n\t\t\toffset += 4;\n\t\t\tconst positionLineNumber = buffer.readUInt32BE(b, offset);\n\t\t\toffset += 4;\n\t\t\tconst positionColumn = buffer.readUInt32BE(b, offset);\n\t\t\toffset += 4;\n\t\t\tdest.push(\n\t\t\t\tnew Selection(\n\t\t\t\t\tselectionStartLineNumber,\n\t\t\t\t\tselectionStartColumn,\n\t\t\t\t\tpositionLineNumber,\n\t\t\t\t\tpositionColumn,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn offset;\n\t}\n\n\tpublic serialize(): ArrayBuffer {\n\t\tlet necessarySize =\n\t\t\t+4 + // beforeVersionId\n\t\t\t4 + // afterVersionId\n\t\t\t1 + // beforeEOL\n\t\t\t1 + // afterEOL\n\t\t\tSingleModelEditStackData._writeSelectionsSize(\n\t\t\t\tthis.beforeCursorState,\n\t\t\t) +\n\t\t\tSingleModelEditStackData._writeSelectionsSize(\n\t\t\t\tthis.afterCursorState,\n\t\t\t) +\n\t\t\t4; // change count\n\t\tfor (const change of this.changes) {\n\t\t\tnecessarySize += change.writeSize();\n\t\t}\n\n\t\tconst b = new Uint8Array(necessarySize);\n\t\tlet offset = 0;\n\t\tbuffer.writeUInt32BE(b, this.beforeVersionId, offset);\n\t\toffset += 4;\n\t\tbuffer.writeUInt32BE(b, this.afterVersionId, offset);\n\t\toffset += 4;\n\t\tbuffer.writeUInt8(b, this.beforeEOL, offset);\n\t\toffset += 1;\n\t\tbuffer.writeUInt8(b, this.afterEOL, offset);\n\t\toffset += 1;\n\t\toffset = SingleModelEditStackData._writeSelections(\n\t\t\tb,\n\t\t\tthis.beforeCursorState,\n\t\t\toffset,\n\t\t);\n\t\toffset = SingleModelEditStackData._writeSelections(\n\t\t\tb,\n\t\t\tthis.afterCursorState,\n\t\t\toffset,\n\t\t);\n\t\tbuffer.writeUInt32BE(b, this.changes.length, offset);\n\t\toffset += 4;\n\t\tfor (const change of this.changes) {\n\t\t\toffset = change.write(b, offset);\n\t\t}\n\t\treturn b.buffer;\n\t}\n\n\tpublic static deserialize(source: ArrayBuffer): SingleModelEditStackData {\n\t\tconst b = new Uint8Array(source);\n\t\tlet offset = 0;\n\t\tconst beforeVersionId = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\tconst afterVersionId = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\tconst beforeEOL = buffer.readUInt8(b, offset);\n\t\toffset += 1;\n\t\tconst afterEOL = buffer.readUInt8(b, offset);\n\t\toffset += 1;\n\t\tconst beforeCursorState: Selection[] = [];\n\t\toffset = SingleModelEditStackData._readSelections(\n\t\t\tb,\n\t\t\toffset,\n\t\t\tbeforeCursorState,\n\t\t);\n\t\tconst afterCursorState: Selection[] = [];\n\t\toffset = SingleModelEditStackData._readSelections(\n\t\t\tb,\n\t\t\toffset,\n\t\t\tafterCursorState,\n\t\t);\n\t\tconst changeCount = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\tconst changes: TextChange[] = [];\n\t\tfor (let i = 0; i < changeCount; i++) {\n\t\t\toffset = TextChange.read(b, offset, changes);\n\t\t}\n\t\treturn new SingleModelEditStackData(\n\t\t\tbeforeVersionId,\n\t\t\tafterVersionId,\n\t\t\tbeforeEOL,\n\t\t\tafterEOL,\n\t\t\tbeforeCursorState,\n\t\t\tafterCursorState,\n\t\t\tchanges,\n\t\t);\n\t}\n}\n\nexport interface IUndoRedoDelegate {\n\tprepareUndoRedo(\n\t\telement: MultiModelEditStackElement,\n\t): Promise<IDisposable> | IDisposable | void;\n}\n\nexport class SingleModelEditStackElement implements IResourceUndoRedoElement {\n\tpublic model: ITextModel | URI;\n\tprivate _data: SingleModelEditStackData | ArrayBuffer;\n\n\tpublic get type(): UndoRedoElementType.Resource {\n\t\treturn UndoRedoElementType.Resource;\n\t}\n\n\tpublic get resource(): URI {\n\t\tif (URI.isUri(this.model)) {\n\t\t\treturn this.model;\n\t\t}\n\t\treturn this.model.uri;\n\t}\n\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly code: string,\n\t\tmodel: ITextModel,\n\t\tbeforeCursorState: Selection[] | null,\n\t) {\n\t\tthis.model = model;\n\t\tthis._data = SingleModelEditStackData.create(model, beforeCursorState);\n\t}\n\n\tpublic toString(): string {\n\t\tconst data =\n\t\t\tthis._data instanceof SingleModelEditStackData\n\t\t\t\t? this._data\n\t\t\t\t: SingleModelEditStackData.deserialize(this._data);\n\t\treturn data.changes.map((change) => change.toString()).join(\", \");\n\t}\n\n\tpublic matchesResource(resource: URI): boolean {\n\t\tconst uri = URI.isUri(this.model) ? this.model : this.model.uri;\n\t\treturn uri.toString() === resource.toString();\n\t}\n\n\tpublic setModel(model: ITextModel | URI): void {\n\t\tthis.model = model;\n\t}\n\n\tpublic canAppend(model: ITextModel): boolean {\n\t\treturn (\n\t\t\tthis.model === model &&\n\t\t\tthis._data instanceof SingleModelEditStackData\n\t\t);\n\t}\n\n\tpublic append(\n\t\tmodel: ITextModel,\n\t\ttextChanges: TextChange[],\n\t\tafterEOL: EndOfLineSequence,\n\t\tafterVersionId: number,\n\t\tafterCursorState: Selection[] | null,\n\t): void {\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data.append(\n\t\t\t\tmodel,\n\t\t\t\ttextChanges,\n\t\t\t\tafterEOL,\n\t\t\t\tafterVersionId,\n\t\t\t\tafterCursorState,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic close(): void {\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t}\n\n\tpublic open(): void {\n\t\tif (!(this._data instanceof SingleModelEditStackData)) {\n\t\t\tthis._data = SingleModelEditStackData.deserialize(this._data);\n\t\t}\n\t}\n\n\tpublic undo(): void {\n\t\tif (URI.isUri(this.model)) {\n\t\t\t// don't have a model\n\t\t\tthrow new Error(`Invalid SingleModelEditStackElement`);\n\t\t}\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t\tconst data = SingleModelEditStackData.deserialize(this._data);\n\t\tthis.model._applyUndo(\n\t\t\tdata.changes,\n\t\t\tdata.beforeEOL,\n\t\t\tdata.beforeVersionId,\n\t\t\tdata.beforeCursorState,\n\t\t);\n\t}\n\n\tpublic redo(): void {\n\t\tif (URI.isUri(this.model)) {\n\t\t\t// don't have a model\n\t\t\tthrow new Error(`Invalid SingleModelEditStackElement`);\n\t\t}\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t\tconst data = SingleModelEditStackData.deserialize(this._data);\n\t\tthis.model._applyRedo(\n\t\t\tdata.changes,\n\t\t\tdata.afterEOL,\n\t\t\tdata.afterVersionId,\n\t\t\tdata.afterCursorState,\n\t\t);\n\t}\n\n\tpublic heapSize(): number {\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t\treturn this._data.byteLength + 168 /*heap overhead*/;\n\t}\n}\n\nexport class MultiModelEditStackElement implements IWorkspaceUndoRedoElement {\n\tpublic readonly type = UndoRedoElementType.Workspace;\n\tprivate _isOpen: boolean;\n\n\tprivate readonly _editStackElementsArr: SingleModelEditStackElement[];\n\tprivate readonly _editStackElementsMap: Map<\n\t\tstring,\n\t\tSingleModelEditStackElement\n\t>;\n\n\tprivate _delegate: IUndoRedoDelegate | null;\n\n\tpublic get resources(): readonly URI[] {\n\t\treturn this._editStackElementsArr.map(\n\t\t\t(editStackElement) => editStackElement.resource,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly code: string,\n\t\teditStackElements: SingleModelEditStackElement[],\n\t) {\n\t\tthis._isOpen = true;\n\t\tthis._editStackElementsArr = editStackElements.slice(0);\n\t\tthis._editStackElementsMap = new Map<\n\t\t\tstring,\n\t\t\tSingleModelEditStackElement\n\t\t>();\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\tconst key = uriGetComparisonKey(editStackElement.resource);\n\t\t\tthis._editStackElementsMap.set(key, editStackElement);\n\t\t}\n\t\tthis._delegate = null;\n\t}\n\n\tpublic setDelegate(delegate: IUndoRedoDelegate): void {\n\t\tthis._delegate = delegate;\n\t}\n\n\tpublic prepareUndoRedo(): Promise<IDisposable> | IDisposable | void {\n\t\tif (this._delegate) {\n\t\t\treturn this._delegate.prepareUndoRedo(this);\n\t\t}\n\t}\n\n\tpublic getMissingModels(): URI[] {\n\t\tconst result: URI[] = [];\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\tif (URI.isUri(editStackElement.model)) {\n\t\t\t\tresult.push(editStackElement.model);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic matchesResource(resource: URI): boolean {\n\t\tconst key = uriGetComparisonKey(resource);\n\t\treturn this._editStackElementsMap.has(key);\n\t}\n\n\tpublic setModel(model: ITextModel | URI): void {\n\t\tconst key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n\t\tif (this._editStackElementsMap.has(key)) {\n\t\t\tthis._editStackElementsMap.get(key)!.setModel(model);\n\t\t}\n\t}\n\n\tpublic canAppend(model: ITextModel): boolean {\n\t\tif (!this._isOpen) {\n\t\t\treturn false;\n\t\t}\n\t\tconst key = uriGetComparisonKey(model.uri);\n\t\tif (this._editStackElementsMap.has(key)) {\n\t\t\tconst editStackElement = this._editStackElementsMap.get(key)!;\n\t\t\treturn editStackElement.canAppend(model);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic append(\n\t\tmodel: ITextModel,\n\t\ttextChanges: TextChange[],\n\t\tafterEOL: EndOfLineSequence,\n\t\tafterVersionId: number,\n\t\tafterCursorState: Selection[] | null,\n\t): void {\n\t\tconst key = uriGetComparisonKey(model.uri);\n\t\tconst editStackElement = this._editStackElementsMap.get(key)!;\n\t\teditStackElement.append(\n\t\t\tmodel,\n\t\t\ttextChanges,\n\t\t\tafterEOL,\n\t\t\tafterVersionId,\n\t\t\tafterCursorState,\n\t\t);\n\t}\n\n\tpublic close(): void {\n\t\tthis._isOpen = false;\n\t}\n\n\tpublic open(): void {\n\t\t// cannot reopen\n\t}\n\n\tpublic undo(): void {\n\t\tthis._isOpen = false;\n\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\teditStackElement.undo();\n\t\t}\n\t}\n\n\tpublic redo(): void {\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\teditStackElement.redo();\n\t\t}\n\t}\n\n\tpublic heapSize(resource: URI): number {\n\t\tconst key = uriGetComparisonKey(resource);\n\t\tif (this._editStackElementsMap.has(key)) {\n\t\t\tconst editStackElement = this._editStackElementsMap.get(key)!;\n\t\t\treturn editStackElement.heapSize();\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic split(): IResourceUndoRedoElement[] {\n\t\treturn this._editStackElementsArr;\n\t}\n\n\tpublic toString(): string {\n\t\tconst result: string[] = [];\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\tresult.push(\n\t\t\t\t`${basename(editStackElement.resource)}: ${editStackElement}`,\n\t\t\t);\n\t\t}\n\t\treturn `{${result.join(\", \")}}`;\n\t}\n}\n\nexport type EditStackElement =\n\t| SingleModelEditStackElement\n\t| MultiModelEditStackElement;\n\nfunction getModelEOL(model: ITextModel): EndOfLineSequence {\n\tconst eol = model.getEOL();\n\tif (eol === \"\\n\") {\n\t\treturn EndOfLineSequence.LF;\n\t} else {\n\t\treturn EndOfLineSequence.CRLF;\n\t}\n}\n\nexport function isEditStackElement(\n\telement: IResourceUndoRedoElement | IWorkspaceUndoRedoElement | null,\n): element is EditStackElement {\n\tif (!element) {\n\t\treturn false;\n\t}\n\treturn (\n\t\telement instanceof SingleModelEditStackElement ||\n\t\telement instanceof MultiModelEditStackElement\n\t);\n}\n\nexport class EditStack {\n\tprivate readonly _model: TextModel;\n\tprivate readonly _undoRedoService: IUndoRedoService;\n\n\tconstructor(model: TextModel, undoRedoService: IUndoRedoService) {\n\t\tthis._model = model;\n\t\tthis._undoRedoService = undoRedoService;\n\t}\n\n\tpublic pushStackElement(): void {\n\t\tconst lastElement = this._undoRedoService.getLastElement(\n\t\t\tthis._model.uri,\n\t\t);\n\t\tif (isEditStackElement(lastElement)) {\n\t\t\tlastElement.close();\n\t\t}\n\t}\n\n\tpublic popStackElement(): void {\n\t\tconst lastElement = this._undoRedoService.getLastElement(\n\t\t\tthis._model.uri,\n\t\t);\n\t\tif (isEditStackElement(lastElement)) {\n\t\t\tlastElement.open();\n\t\t}\n\t}\n\n\tpublic clear(): void {\n\t\tthis._undoRedoService.removeElements(this._model.uri);\n\t}\n\n\tprivate _getOrCreateEditStackElement(\n\t\tbeforeCursorState: Selection[] | null,\n\t\tgroup: UndoRedoGroup | undefined,\n\t): EditStackElement {\n\t\tconst lastElement = this._undoRedoService.getLastElement(\n\t\t\tthis._model.uri,\n\t\t);\n\t\tif (\n\t\t\tisEditStackElement(lastElement) &&\n\t\t\tlastElement.canAppend(this._model)\n\t\t) {\n\t\t\treturn lastElement;\n\t\t}\n\t\tconst newElement = new SingleModelEditStackElement(\n\t\t\tnls.localize(\"edit\", \"Typing\"),\n\t\t\t\"undoredo.textBufferEdit\",\n\t\t\tthis._model,\n\t\t\tbeforeCursorState,\n\t\t);\n\t\tthis._undoRedoService.pushElement(newElement, group);\n\t\treturn newElement;\n\t}\n\n\tpublic pushEOL(eol: EndOfLineSequence): void {\n\t\tconst editStackElement = this._getOrCreateEditStackElement(\n\t\t\tnull,\n\t\t\tundefined,\n\t\t);\n\t\tthis._model.setEOL(eol);\n\t\teditStackElement.append(\n\t\t\tthis._model,\n\t\t\t[],\n\t\t\tgetModelEOL(this._model),\n\t\t\tthis._model.getAlternativeVersionId(),\n\t\t\tnull,\n\t\t);\n\t}\n\n\tpublic pushEditOperation(\n\t\tbeforeCursorState: Selection[] | null,\n\t\teditOperations: ISingleEditOperation[],\n\t\tcursorStateComputer: ICursorStateComputer | null,\n\t\tgroup?: UndoRedoGroup,\n\t): Selection[] | null {\n\t\tconst editStackElement = this._getOrCreateEditStackElement(\n\t\t\tbeforeCursorState,\n\t\t\tgroup,\n\t\t);\n\t\tconst inverseEditOperations = this._model.applyEdits(\n\t\t\teditOperations,\n\t\t\ttrue,\n\t\t);\n\t\tconst afterCursorState = EditStack._computeCursorState(\n\t\t\tcursorStateComputer,\n\t\t\tinverseEditOperations,\n\t\t);\n\t\tconst textChanges = inverseEditOperations.map((op, index) => ({\n\t\t\tindex: index,\n\t\t\ttextChange: op.textChange,\n\t\t}));\n\t\ttextChanges.sort((a, b) => {\n\t\t\tif (a.textChange.oldPosition === b.textChange.oldPosition) {\n\t\t\t\treturn a.index - b.index;\n\t\t\t}\n\t\t\treturn a.textChange.oldPosition - b.textChange.oldPosition;\n\t\t});\n\t\teditStackElement.append(\n\t\t\tthis._model,\n\t\t\ttextChanges.map((op) => op.textChange),\n\t\t\tgetModelEOL(this._model),\n\t\t\tthis._model.getAlternativeVersionId(),\n\t\t\tafterCursorState,\n\t\t);\n\t\treturn afterCursorState;\n\t}\n\n\tprivate static _computeCursorState(\n\t\tcursorStateComputer: ICursorStateComputer | null,\n\t\tinverseEditOperations: IValidEditOperation[],\n\t): Selection[] | null {\n\t\ttry {\n\t\t\treturn cursorStateComputer\n\t\t\t\t? cursorStateComputer(inverseEditOperations)\n\t\t\t\t: null;\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
