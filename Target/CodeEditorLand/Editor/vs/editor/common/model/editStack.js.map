{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/editStack.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { EndOfLineSequence, ICursorStateComputer, IValidEditOperation, ITextModel } from '../model.js';\nimport { TextModel } from './textModel.js';\nimport { IUndoRedoService, IResourceUndoRedoElement, UndoRedoElementType, IWorkspaceUndoRedoElement, UndoRedoGroup } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { basename } from '../../../base/common/resources.js';\nimport { ISingleEditOperation } from '../core/editOperation.js';\n\nfunction uriGetComparisonKey(resource: URI): string {\n\treturn resource.toString();\n}\n\nexport class SingleModelEditStackData {\n\n\tpublic static create(model: ITextModel, beforeCursorState: Selection[] | null): SingleModelEditStackData {\n\t\tconst alternativeVersionId = model.getAlternativeVersionId();\n\t\tconst eol = getModelEOL(model);\n\t\treturn new SingleModelEditStackData(\n\t\t\talternativeVersionId,\n\t\t\talternativeVersionId,\n\t\t\teol,\n\t\t\teol,\n\t\t\tbeforeCursorState,\n\t\t\tbeforeCursorState,\n\t\t\t[]\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly beforeVersionId: number,\n\t\tpublic afterVersionId: number,\n\t\tpublic readonly beforeEOL: EndOfLineSequence,\n\t\tpublic afterEOL: EndOfLineSequence,\n\t\tpublic readonly beforeCursorState: Selection[] | null,\n\t\tpublic afterCursorState: Selection[] | null,\n\t\tpublic changes: TextChange[]\n\t) { }\n\n\tpublic append(model: ITextModel, textChanges: TextChange[], afterEOL: EndOfLineSequence, afterVersionId: number, afterCursorState: Selection[] | null): void {\n\t\tif (textChanges.length > 0) {\n\t\t\tthis.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n\t\t}\n\t\tthis.afterEOL = afterEOL;\n\t\tthis.afterVersionId = afterVersionId;\n\t\tthis.afterCursorState = afterCursorState;\n\t}\n\n\tprivate static _writeSelectionsSize(selections: Selection[] | null): number {\n\t\treturn 4 + 4 * 4 * (selections ? selections.length : 0);\n\t}\n\n\tprivate static _writeSelections(b: Uint8Array, selections: Selection[] | null, offset: number): number {\n\t\tbuffer.writeUInt32BE(b, (selections ? selections.length : 0), offset); offset += 4;\n\t\tif (selections) {\n\t\t\tfor (const selection of selections) {\n\t\t\t\tbuffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset); offset += 4;\n\t\t\t\tbuffer.writeUInt32BE(b, selection.selectionStartColumn, offset); offset += 4;\n\t\t\t\tbuffer.writeUInt32BE(b, selection.positionLineNumber, offset); offset += 4;\n\t\t\t\tbuffer.writeUInt32BE(b, selection.positionColumn, offset); offset += 4;\n\t\t\t}\n\t\t}\n\t\treturn offset;\n\t}\n\n\tprivate static _readSelections(b: Uint8Array, offset: number, dest: Selection[]): number {\n\t\tconst count = buffer.readUInt32BE(b, offset); offset += 4;\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst selectionStartLineNumber = buffer.readUInt32BE(b, offset); offset += 4;\n\t\t\tconst selectionStartColumn = buffer.readUInt32BE(b, offset); offset += 4;\n\t\t\tconst positionLineNumber = buffer.readUInt32BE(b, offset); offset += 4;\n\t\t\tconst positionColumn = buffer.readUInt32BE(b, offset); offset += 4;\n\t\t\tdest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n\t\t}\n\t\treturn offset;\n\t}\n\n\tpublic serialize(): ArrayBuffer {\n\t\tlet necessarySize = (\n\t\t\t+ 4 // beforeVersionId\n\t\t\t+ 4 // afterVersionId\n\t\t\t+ 1 // beforeEOL\n\t\t\t+ 1 // afterEOL\n\t\t\t+ SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\n\t\t\t+ SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\n\t\t\t+ 4 // change count\n\t\t);\n\t\tfor (const change of this.changes) {\n\t\t\tnecessarySize += change.writeSize();\n\t\t}\n\n\t\tconst b = new Uint8Array(necessarySize);\n\t\tlet offset = 0;\n\t\tbuffer.writeUInt32BE(b, this.beforeVersionId, offset); offset += 4;\n\t\tbuffer.writeUInt32BE(b, this.afterVersionId, offset); offset += 4;\n\t\tbuffer.writeUInt8(b, this.beforeEOL, offset); offset += 1;\n\t\tbuffer.writeUInt8(b, this.afterEOL, offset); offset += 1;\n\t\toffset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n\t\toffset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n\t\tbuffer.writeUInt32BE(b, this.changes.length, offset); offset += 4;\n\t\tfor (const change of this.changes) {\n\t\t\toffset = change.write(b, offset);\n\t\t}\n\t\treturn b.buffer;\n\t}\n\n\tpublic static deserialize(source: ArrayBuffer): SingleModelEditStackData {\n\t\tconst b = new Uint8Array(source);\n\t\tlet offset = 0;\n\t\tconst beforeVersionId = buffer.readUInt32BE(b, offset); offset += 4;\n\t\tconst afterVersionId = buffer.readUInt32BE(b, offset); offset += 4;\n\t\tconst beforeEOL = buffer.readUInt8(b, offset); offset += 1;\n\t\tconst afterEOL = buffer.readUInt8(b, offset); offset += 1;\n\t\tconst beforeCursorState: Selection[] = [];\n\t\toffset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n\t\tconst afterCursorState: Selection[] = [];\n\t\toffset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n\t\tconst changeCount = buffer.readUInt32BE(b, offset); offset += 4;\n\t\tconst changes: TextChange[] = [];\n\t\tfor (let i = 0; i < changeCount; i++) {\n\t\t\toffset = TextChange.read(b, offset, changes);\n\t\t}\n\t\treturn new SingleModelEditStackData(\n\t\t\tbeforeVersionId,\n\t\t\tafterVersionId,\n\t\t\tbeforeEOL,\n\t\t\tafterEOL,\n\t\t\tbeforeCursorState,\n\t\t\tafterCursorState,\n\t\t\tchanges\n\t\t);\n\t}\n}\n\nexport interface IUndoRedoDelegate {\n\tprepareUndoRedo(element: MultiModelEditStackElement): Promise<IDisposable> | IDisposable | void;\n}\n\nexport class SingleModelEditStackElement implements IResourceUndoRedoElement {\n\n\tpublic model: ITextModel | URI;\n\tprivate _data: SingleModelEditStackData | ArrayBuffer;\n\n\tpublic get type(): UndoRedoElementType.Resource {\n\t\treturn UndoRedoElementType.Resource;\n\t}\n\n\tpublic get resource(): URI {\n\t\tif (URI.isUri(this.model)) {\n\t\t\treturn this.model;\n\t\t}\n\t\treturn this.model.uri;\n\t}\n\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly code: string,\n\t\tmodel: ITextModel,\n\t\tbeforeCursorState: Selection[] | null\n\t) {\n\t\tthis.model = model;\n\t\tthis._data = SingleModelEditStackData.create(model, beforeCursorState);\n\t}\n\n\tpublic toString(): string {\n\t\tconst data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\n\t\treturn data.changes.map(change => change.toString()).join(', ');\n\t}\n\n\tpublic matchesResource(resource: URI): boolean {\n\t\tconst uri = (URI.isUri(this.model) ? this.model : this.model.uri);\n\t\treturn (uri.toString() === resource.toString());\n\t}\n\n\tpublic setModel(model: ITextModel | URI): void {\n\t\tthis.model = model;\n\t}\n\n\tpublic canAppend(model: ITextModel): boolean {\n\t\treturn (this.model === model && this._data instanceof SingleModelEditStackData);\n\t}\n\n\tpublic append(model: ITextModel, textChanges: TextChange[], afterEOL: EndOfLineSequence, afterVersionId: number, afterCursorState: Selection[] | null): void {\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n\t\t}\n\t}\n\n\tpublic close(): void {\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t}\n\n\tpublic open(): void {\n\t\tif (!(this._data instanceof SingleModelEditStackData)) {\n\t\t\tthis._data = SingleModelEditStackData.deserialize(this._data);\n\t\t}\n\t}\n\n\tpublic undo(): void {\n\t\tif (URI.isUri(this.model)) {\n\t\t\t// don't have a model\n\t\t\tthrow new Error(`Invalid SingleModelEditStackElement`);\n\t\t}\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t\tconst data = SingleModelEditStackData.deserialize(this._data);\n\t\tthis.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n\t}\n\n\tpublic redo(): void {\n\t\tif (URI.isUri(this.model)) {\n\t\t\t// don't have a model\n\t\t\tthrow new Error(`Invalid SingleModelEditStackElement`);\n\t\t}\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t\tconst data = SingleModelEditStackData.deserialize(this._data);\n\t\tthis.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n\t}\n\n\tpublic heapSize(): number {\n\t\tif (this._data instanceof SingleModelEditStackData) {\n\t\t\tthis._data = this._data.serialize();\n\t\t}\n\t\treturn this._data.byteLength + 168/*heap overhead*/;\n\t}\n}\n\nexport class MultiModelEditStackElement implements IWorkspaceUndoRedoElement {\n\n\tpublic readonly type = UndoRedoElementType.Workspace;\n\tprivate _isOpen: boolean;\n\n\tprivate readonly _editStackElementsArr: SingleModelEditStackElement[];\n\tprivate readonly _editStackElementsMap: Map<string, SingleModelEditStackElement>;\n\n\tprivate _delegate: IUndoRedoDelegate | null;\n\n\tpublic get resources(): readonly URI[] {\n\t\treturn this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n\t}\n\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly code: string,\n\t\teditStackElements: SingleModelEditStackElement[]\n\t) {\n\t\tthis._isOpen = true;\n\t\tthis._editStackElementsArr = editStackElements.slice(0);\n\t\tthis._editStackElementsMap = new Map<string, SingleModelEditStackElement>();\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\tconst key = uriGetComparisonKey(editStackElement.resource);\n\t\t\tthis._editStackElementsMap.set(key, editStackElement);\n\t\t}\n\t\tthis._delegate = null;\n\t}\n\n\tpublic setDelegate(delegate: IUndoRedoDelegate): void {\n\t\tthis._delegate = delegate;\n\t}\n\n\tpublic prepareUndoRedo(): Promise<IDisposable> | IDisposable | void {\n\t\tif (this._delegate) {\n\t\t\treturn this._delegate.prepareUndoRedo(this);\n\t\t}\n\t}\n\n\tpublic getMissingModels(): URI[] {\n\t\tconst result: URI[] = [];\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\tif (URI.isUri(editStackElement.model)) {\n\t\t\t\tresult.push(editStackElement.model);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic matchesResource(resource: URI): boolean {\n\t\tconst key = uriGetComparisonKey(resource);\n\t\treturn (this._editStackElementsMap.has(key));\n\t}\n\n\tpublic setModel(model: ITextModel | URI): void {\n\t\tconst key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n\t\tif (this._editStackElementsMap.has(key)) {\n\t\t\tthis._editStackElementsMap.get(key)!.setModel(model);\n\t\t}\n\t}\n\n\tpublic canAppend(model: ITextModel): boolean {\n\t\tif (!this._isOpen) {\n\t\t\treturn false;\n\t\t}\n\t\tconst key = uriGetComparisonKey(model.uri);\n\t\tif (this._editStackElementsMap.has(key)) {\n\t\t\tconst editStackElement = this._editStackElementsMap.get(key)!;\n\t\t\treturn editStackElement.canAppend(model);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic append(model: ITextModel, textChanges: TextChange[], afterEOL: EndOfLineSequence, afterVersionId: number, afterCursorState: Selection[] | null): void {\n\t\tconst key = uriGetComparisonKey(model.uri);\n\t\tconst editStackElement = this._editStackElementsMap.get(key)!;\n\t\teditStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n\t}\n\n\tpublic close(): void {\n\t\tthis._isOpen = false;\n\t}\n\n\tpublic open(): void {\n\t\t// cannot reopen\n\t}\n\n\tpublic undo(): void {\n\t\tthis._isOpen = false;\n\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\teditStackElement.undo();\n\t\t}\n\t}\n\n\tpublic redo(): void {\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\teditStackElement.redo();\n\t\t}\n\t}\n\n\tpublic heapSize(resource: URI): number {\n\t\tconst key = uriGetComparisonKey(resource);\n\t\tif (this._editStackElementsMap.has(key)) {\n\t\t\tconst editStackElement = this._editStackElementsMap.get(key)!;\n\t\t\treturn editStackElement.heapSize();\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic split(): IResourceUndoRedoElement[] {\n\t\treturn this._editStackElementsArr;\n\t}\n\n\tpublic toString(): string {\n\t\tconst result: string[] = [];\n\t\tfor (const editStackElement of this._editStackElementsArr) {\n\t\t\tresult.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n\t\t}\n\t\treturn `{${result.join(', ')}}`;\n\t}\n}\n\nexport type EditStackElement = SingleModelEditStackElement | MultiModelEditStackElement;\n\nfunction getModelEOL(model: ITextModel): EndOfLineSequence {\n\tconst eol = model.getEOL();\n\tif (eol === '\\n') {\n\t\treturn EndOfLineSequence.LF;\n\t} else {\n\t\treturn EndOfLineSequence.CRLF;\n\t}\n}\n\nexport function isEditStackElement(element: IResourceUndoRedoElement | IWorkspaceUndoRedoElement | null): element is EditStackElement {\n\tif (!element) {\n\t\treturn false;\n\t}\n\treturn ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\n}\n\nexport class EditStack {\n\n\tprivate readonly _model: TextModel;\n\tprivate readonly _undoRedoService: IUndoRedoService;\n\n\tconstructor(model: TextModel, undoRedoService: IUndoRedoService) {\n\t\tthis._model = model;\n\t\tthis._undoRedoService = undoRedoService;\n\t}\n\n\tpublic pushStackElement(): void {\n\t\tconst lastElement = this._undoRedoService.getLastElement(this._model.uri);\n\t\tif (isEditStackElement(lastElement)) {\n\t\t\tlastElement.close();\n\t\t}\n\t}\n\n\tpublic popStackElement(): void {\n\t\tconst lastElement = this._undoRedoService.getLastElement(this._model.uri);\n\t\tif (isEditStackElement(lastElement)) {\n\t\t\tlastElement.open();\n\t\t}\n\t}\n\n\tpublic clear(): void {\n\t\tthis._undoRedoService.removeElements(this._model.uri);\n\t}\n\n\tprivate _getOrCreateEditStackElement(beforeCursorState: Selection[] | null, group: UndoRedoGroup | undefined): EditStackElement {\n\t\tconst lastElement = this._undoRedoService.getLastElement(this._model.uri);\n\t\tif (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n\t\t\treturn lastElement;\n\t\t}\n\t\tconst newElement = new SingleModelEditStackElement(nls.localize('edit', \"Typing\"), 'undoredo.textBufferEdit', this._model, beforeCursorState);\n\t\tthis._undoRedoService.pushElement(newElement, group);\n\t\treturn newElement;\n\t}\n\n\tpublic pushEOL(eol: EndOfLineSequence): void {\n\t\tconst editStackElement = this._getOrCreateEditStackElement(null, undefined);\n\t\tthis._model.setEOL(eol);\n\t\teditStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n\t}\n\n\tpublic pushEditOperation(beforeCursorState: Selection[] | null, editOperations: ISingleEditOperation[], cursorStateComputer: ICursorStateComputer | null, group?: UndoRedoGroup): Selection[] | null {\n\t\tconst editStackElement = this._getOrCreateEditStackElement(beforeCursorState, group);\n\t\tconst inverseEditOperations = this._model.applyEdits(editOperations, true);\n\t\tconst afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n\t\tconst textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\n\t\ttextChanges.sort((a, b) => {\n\t\t\tif (a.textChange.oldPosition === b.textChange.oldPosition) {\n\t\t\t\treturn a.index - b.index;\n\t\t\t}\n\t\t\treturn a.textChange.oldPosition - b.textChange.oldPosition;\n\t\t});\n\t\teditStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n\t\treturn afterCursorState;\n\t}\n\n\tprivate static _computeCursorState(cursorStateComputer: ICursorStateComputer | null, inverseEditOperations: IValidEditOperation[]): Selection[] | null {\n\t\ttry {\n\t\t\treturn cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,yBAAyB;AAClC,SAAS,iBAAiB;AAC1B,SAAS,mBAAmB,sBAAsB,qBAAqB,kBAAkB;AACzF,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB,0BAA0B,qBAAqB,2BAA2B,qBAAqB;AAC1H,SAAS,WAAW;AACpB,SAAS,YAAY,sCAAsC;AAC3D,YAAY,YAAY;AACxB,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AACzB,SAAS,4BAA4B;AAErC,SAAS,oBAAoB,UAAuB;AACnD,SAAO,SAAS,SAAS;AAC1B;AAFS;AAIF,MAAM,yBAAyB;AAAA,EAgBrC,YACiB,iBACT,gBACS,WACT,UACS,mBACT,kBACA,SACN;AAPe;AACT;AACS;AACT;AACS;AACT;AACA;AAAA,EACJ;AAAA,EA9CL,OAsBsC;AAAA;AAAA;AAAA,EAErC,OAAc,OAAO,OAAmB,mBAAiE;AACxG,UAAM,uBAAuB,MAAM,wBAAwB;AAC3D,UAAM,MAAM,YAAY,KAAK;AAC7B,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAYO,OAAO,OAAmB,aAA2B,UAA6B,gBAAwB,kBAA4C;AAC5J,QAAI,YAAY,SAAS,GAAG;AAC3B,WAAK,UAAU,+BAA+B,KAAK,SAAS,WAAW;AAAA,IACxE;AACA,SAAK,WAAW;AAChB,SAAK,iBAAiB;AACtB,SAAK,mBAAmB;AAAA,EACzB;AAAA,EAEA,OAAe,qBAAqB,YAAwC;AAC3E,WAAO,IAAI,IAAI,KAAK,aAAa,WAAW,SAAS;AAAA,EACtD;AAAA,EAEA,OAAe,iBAAiB,GAAe,YAAgC,QAAwB;AACtG,WAAO,cAAc,GAAI,aAAa,WAAW,SAAS,GAAI,MAAM;AAAG,cAAU;AACjF,QAAI,YAAY;AACf,iBAAW,aAAa,YAAY;AACnC,eAAO,cAAc,GAAG,UAAU,0BAA0B,MAAM;AAAG,kBAAU;AAC/E,eAAO,cAAc,GAAG,UAAU,sBAAsB,MAAM;AAAG,kBAAU;AAC3E,eAAO,cAAc,GAAG,UAAU,oBAAoB,MAAM;AAAG,kBAAU;AACzE,eAAO,cAAc,GAAG,UAAU,gBAAgB,MAAM;AAAG,kBAAU;AAAA,MACtE;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,gBAAgB,GAAe,QAAgB,MAA2B;AACxF,UAAM,QAAQ,OAAO,aAAa,GAAG,MAAM;AAAG,cAAU;AACxD,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC/B,YAAM,2BAA2B,OAAO,aAAa,GAAG,MAAM;AAAG,gBAAU;AAC3E,YAAM,uBAAuB,OAAO,aAAa,GAAG,MAAM;AAAG,gBAAU;AACvE,YAAM,qBAAqB,OAAO,aAAa,GAAG,MAAM;AAAG,gBAAU;AACrE,YAAM,iBAAiB,OAAO,aAAa,GAAG,MAAM;AAAG,gBAAU;AACjE,WAAK,KAAK,IAAI,UAAU,0BAA0B,sBAAsB,oBAAoB,cAAc,CAAC;AAAA,IAC5G;AACA,WAAO;AAAA,EACR;AAAA,EAEO,YAAyB;AAC/B,QAAI,gBACH,IACE,IACA,IACA,IACA,yBAAyB,qBAAqB,KAAK,iBAAiB,IACpE,yBAAyB,qBAAqB,KAAK,gBAAgB,IACnE;AAEH,eAAW,UAAU,KAAK,SAAS;AAClC,uBAAiB,OAAO,UAAU;AAAA,IACnC;AAEA,UAAM,IAAI,IAAI,WAAW,aAAa;AACtC,QAAI,SAAS;AACb,WAAO,cAAc,GAAG,KAAK,iBAAiB,MAAM;AAAG,cAAU;AACjE,WAAO,cAAc,GAAG,KAAK,gBAAgB,MAAM;AAAG,cAAU;AAChE,WAAO,WAAW,GAAG,KAAK,WAAW,MAAM;AAAG,cAAU;AACxD,WAAO,WAAW,GAAG,KAAK,UAAU,MAAM;AAAG,cAAU;AACvD,aAAS,yBAAyB,iBAAiB,GAAG,KAAK,mBAAmB,MAAM;AACpF,aAAS,yBAAyB,iBAAiB,GAAG,KAAK,kBAAkB,MAAM;AACnF,WAAO,cAAc,GAAG,KAAK,QAAQ,QAAQ,MAAM;AAAG,cAAU;AAChE,eAAW,UAAU,KAAK,SAAS;AAClC,eAAS,OAAO,MAAM,GAAG,MAAM;AAAA,IAChC;AACA,WAAO,EAAE;AAAA,EACV;AAAA,EAEA,OAAc,YAAY,QAA+C;AACxE,UAAM,IAAI,IAAI,WAAW,MAAM;AAC/B,QAAI,SAAS;AACb,UAAM,kBAAkB,OAAO,aAAa,GAAG,MAAM;AAAG,cAAU;AAClE,UAAM,iBAAiB,OAAO,aAAa,GAAG,MAAM;AAAG,cAAU;AACjE,UAAM,YAAY,OAAO,UAAU,GAAG,MAAM;AAAG,cAAU;AACzD,UAAM,WAAW,OAAO,UAAU,GAAG,MAAM;AAAG,cAAU;AACxD,UAAM,oBAAiC,CAAC;AACxC,aAAS,yBAAyB,gBAAgB,GAAG,QAAQ,iBAAiB;AAC9E,UAAM,mBAAgC,CAAC;AACvC,aAAS,yBAAyB,gBAAgB,GAAG,QAAQ,gBAAgB;AAC7E,UAAM,cAAc,OAAO,aAAa,GAAG,MAAM;AAAG,cAAU;AAC9D,UAAM,UAAwB,CAAC;AAC/B,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACrC,eAAS,WAAW,KAAK,GAAG,QAAQ,OAAO;AAAA,IAC5C;AACA,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAMO,MAAM,4BAAgE;AAAA,EAgB5E,YACiB,OACA,MAChB,OACA,mBACC;AAJe;AACA;AAIhB,SAAK,QAAQ;AACb,SAAK,QAAQ,yBAAyB,OAAO,OAAO,iBAAiB;AAAA,EACtE;AAAA,EA3KD,OAmJ6E;AAAA;AAAA;AAAA,EAErE;AAAA,EACC;AAAA,EAER,IAAW,OAAqC;AAC/C,WAAO,oBAAoB;AAAA,EAC5B;AAAA,EAEA,IAAW,WAAgB;AAC1B,QAAI,IAAI,MAAM,KAAK,KAAK,GAAG;AAC1B,aAAO,KAAK;AAAA,IACb;AACA,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAYO,WAAmB;AACzB,UAAM,OAAQ,KAAK,iBAAiB,2BAA2B,KAAK,QAAQ,yBAAyB,YAAY,KAAK,KAAK;AAC3H,WAAO,KAAK,QAAQ,IAAI,YAAU,OAAO,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,EAC/D;AAAA,EAEO,gBAAgB,UAAwB;AAC9C,UAAM,MAAO,IAAI,MAAM,KAAK,KAAK,IAAI,KAAK,QAAQ,KAAK,MAAM;AAC7D,WAAQ,IAAI,SAAS,MAAM,SAAS,SAAS;AAAA,EAC9C;AAAA,EAEO,SAAS,OAA+B;AAC9C,SAAK,QAAQ;AAAA,EACd;AAAA,EAEO,UAAU,OAA4B;AAC5C,WAAQ,KAAK,UAAU,SAAS,KAAK,iBAAiB;AAAA,EACvD;AAAA,EAEO,OAAO,OAAmB,aAA2B,UAA6B,gBAAwB,kBAA4C;AAC5J,QAAI,KAAK,iBAAiB,0BAA0B;AACnD,WAAK,MAAM,OAAO,OAAO,aAAa,UAAU,gBAAgB,gBAAgB;AAAA,IACjF;AAAA,EACD;AAAA,EAEO,QAAc;AACpB,QAAI,KAAK,iBAAiB,0BAA0B;AACnD,WAAK,QAAQ,KAAK,MAAM,UAAU;AAAA,IACnC;AAAA,EACD;AAAA,EAEO,OAAa;AACnB,QAAI,EAAE,KAAK,iBAAiB,2BAA2B;AACtD,WAAK,QAAQ,yBAAyB,YAAY,KAAK,KAAK;AAAA,IAC7D;AAAA,EACD;AAAA,EAEO,OAAa;AACnB,QAAI,IAAI,MAAM,KAAK,KAAK,GAAG;AAE1B,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD;AACA,QAAI,KAAK,iBAAiB,0BAA0B;AACnD,WAAK,QAAQ,KAAK,MAAM,UAAU;AAAA,IACnC;AACA,UAAM,OAAO,yBAAyB,YAAY,KAAK,KAAK;AAC5D,SAAK,MAAM,WAAW,KAAK,SAAS,KAAK,WAAW,KAAK,iBAAiB,KAAK,iBAAiB;AAAA,EACjG;AAAA,EAEO,OAAa;AACnB,QAAI,IAAI,MAAM,KAAK,KAAK,GAAG;AAE1B,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD;AACA,QAAI,KAAK,iBAAiB,0BAA0B;AACnD,WAAK,QAAQ,KAAK,MAAM,UAAU;AAAA,IACnC;AACA,UAAM,OAAO,yBAAyB,YAAY,KAAK,KAAK;AAC5D,SAAK,MAAM,WAAW,KAAK,SAAS,KAAK,UAAU,KAAK,gBAAgB,KAAK,gBAAgB;AAAA,EAC9F;AAAA,EAEO,WAAmB;AACzB,QAAI,KAAK,iBAAiB,0BAA0B;AACnD,WAAK,QAAQ,KAAK,MAAM,UAAU;AAAA,IACnC;AACA,WAAO,KAAK,MAAM,aAAa;AAAA,EAChC;AACD;AAEO,MAAM,2BAAgE;AAAA,EAc5E,YACiB,OACA,MAChB,mBACC;AAHe;AACA;AAGhB,SAAK,UAAU;AACf,SAAK,wBAAwB,kBAAkB,MAAM,CAAC;AACtD,SAAK,wBAAwB,oBAAI,IAAyC;AAC1E,eAAW,oBAAoB,KAAK,uBAAuB;AAC1D,YAAM,MAAM,oBAAoB,iBAAiB,QAAQ;AACzD,WAAK,sBAAsB,IAAI,KAAK,gBAAgB;AAAA,IACrD;AACA,SAAK,YAAY;AAAA,EAClB;AAAA,EA5QD,OAiP6E;AAAA;AAAA;AAAA,EAE5D,OAAO,oBAAoB;AAAA,EACnC;AAAA,EAES;AAAA,EACA;AAAA,EAET;AAAA,EAER,IAAW,YAA4B;AACtC,WAAO,KAAK,sBAAsB,IAAI,sBAAoB,iBAAiB,QAAQ;AAAA,EACpF;AAAA,EAiBO,YAAY,UAAmC;AACrD,SAAK,YAAY;AAAA,EAClB;AAAA,EAEO,kBAA6D;AACnE,QAAI,KAAK,WAAW;AACnB,aAAO,KAAK,UAAU,gBAAgB,IAAI;AAAA,IAC3C;AAAA,EACD;AAAA,EAEO,mBAA0B;AAChC,UAAM,SAAgB,CAAC;AACvB,eAAW,oBAAoB,KAAK,uBAAuB;AAC1D,UAAI,IAAI,MAAM,iBAAiB,KAAK,GAAG;AACtC,eAAO,KAAK,iBAAiB,KAAK;AAAA,MACnC;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEO,gBAAgB,UAAwB;AAC9C,UAAM,MAAM,oBAAoB,QAAQ;AACxC,WAAQ,KAAK,sBAAsB,IAAI,GAAG;AAAA,EAC3C;AAAA,EAEO,SAAS,OAA+B;AAC9C,UAAM,MAAM,oBAAoB,IAAI,MAAM,KAAK,IAAI,QAAQ,MAAM,GAAG;AACpE,QAAI,KAAK,sBAAsB,IAAI,GAAG,GAAG;AACxC,WAAK,sBAAsB,IAAI,GAAG,EAAG,SAAS,KAAK;AAAA,IACpD;AAAA,EACD;AAAA,EAEO,UAAU,OAA4B;AAC5C,QAAI,CAAC,KAAK,SAAS;AAClB,aAAO;AAAA,IACR;AACA,UAAM,MAAM,oBAAoB,MAAM,GAAG;AACzC,QAAI,KAAK,sBAAsB,IAAI,GAAG,GAAG;AACxC,YAAM,mBAAmB,KAAK,sBAAsB,IAAI,GAAG;AAC3D,aAAO,iBAAiB,UAAU,KAAK;AAAA,IACxC;AACA,WAAO;AAAA,EACR;AAAA,EAEO,OAAO,OAAmB,aAA2B,UAA6B,gBAAwB,kBAA4C;AAC5J,UAAM,MAAM,oBAAoB,MAAM,GAAG;AACzC,UAAM,mBAAmB,KAAK,sBAAsB,IAAI,GAAG;AAC3D,qBAAiB,OAAO,OAAO,aAAa,UAAU,gBAAgB,gBAAgB;AAAA,EACvF;AAAA,EAEO,QAAc;AACpB,SAAK,UAAU;AAAA,EAChB;AAAA,EAEO,OAAa;AAAA,EAEpB;AAAA,EAEO,OAAa;AACnB,SAAK,UAAU;AAEf,eAAW,oBAAoB,KAAK,uBAAuB;AAC1D,uBAAiB,KAAK;AAAA,IACvB;AAAA,EACD;AAAA,EAEO,OAAa;AACnB,eAAW,oBAAoB,KAAK,uBAAuB;AAC1D,uBAAiB,KAAK;AAAA,IACvB;AAAA,EACD;AAAA,EAEO,SAAS,UAAuB;AACtC,UAAM,MAAM,oBAAoB,QAAQ;AACxC,QAAI,KAAK,sBAAsB,IAAI,GAAG,GAAG;AACxC,YAAM,mBAAmB,KAAK,sBAAsB,IAAI,GAAG;AAC3D,aAAO,iBAAiB,SAAS;AAAA,IAClC;AACA,WAAO;AAAA,EACR;AAAA,EAEO,QAAoC;AAC1C,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,WAAmB;AACzB,UAAM,SAAmB,CAAC;AAC1B,eAAW,oBAAoB,KAAK,uBAAuB;AAC1D,aAAO,KAAK,GAAG,SAAS,iBAAiB,QAAQ,CAAC,KAAK,gBAAgB,EAAE;AAAA,IAC1E;AACA,WAAO,IAAI,OAAO,KAAK,IAAI,CAAC;AAAA,EAC7B;AACD;AAIA,SAAS,YAAY,OAAsC;AAC1D,QAAM,MAAM,MAAM,OAAO;AACzB,MAAI,QAAQ,MAAM;AACjB,WAAO,kBAAkB;AAAA,EAC1B,OAAO;AACN,WAAO,kBAAkB;AAAA,EAC1B;AACD;AAPS;AASF,SAAS,mBAAmB,SAAmG;AACrI,MAAI,CAAC,SAAS;AACb,WAAO;AAAA,EACR;AACA,SAAS,mBAAmB,+BAAiC,mBAAmB;AACjF;AALgB;AAOT,MAAM,UAAU;AAAA,EA9XvB,OA8XuB;AAAA;AAAA;AAAA,EAEL;AAAA,EACA;AAAA,EAEjB,YAAY,OAAkB,iBAAmC;AAChE,SAAK,SAAS;AACd,SAAK,mBAAmB;AAAA,EACzB;AAAA,EAEO,mBAAyB;AAC/B,UAAM,cAAc,KAAK,iBAAiB,eAAe,KAAK,OAAO,GAAG;AACxE,QAAI,mBAAmB,WAAW,GAAG;AACpC,kBAAY,MAAM;AAAA,IACnB;AAAA,EACD;AAAA,EAEO,kBAAwB;AAC9B,UAAM,cAAc,KAAK,iBAAiB,eAAe,KAAK,OAAO,GAAG;AACxE,QAAI,mBAAmB,WAAW,GAAG;AACpC,kBAAY,KAAK;AAAA,IAClB;AAAA,EACD;AAAA,EAEO,QAAc;AACpB,SAAK,iBAAiB,eAAe,KAAK,OAAO,GAAG;AAAA,EACrD;AAAA,EAEQ,6BAA6B,mBAAuC,OAAoD;AAC/H,UAAM,cAAc,KAAK,iBAAiB,eAAe,KAAK,OAAO,GAAG;AACxE,QAAI,mBAAmB,WAAW,KAAK,YAAY,UAAU,KAAK,MAAM,GAAG;AAC1E,aAAO;AAAA,IACR;AACA,UAAM,aAAa,IAAI,4BAA4B,IAAI,SAAS,QAAQ,QAAQ,GAAG,2BAA2B,KAAK,QAAQ,iBAAiB;AAC5I,SAAK,iBAAiB,YAAY,YAAY,KAAK;AACnD,WAAO;AAAA,EACR;AAAA,EAEO,QAAQ,KAA8B;AAC5C,UAAM,mBAAmB,KAAK,6BAA6B,MAAM,MAAS;AAC1E,SAAK,OAAO,OAAO,GAAG;AACtB,qBAAiB,OAAO,KAAK,QAAQ,CAAC,GAAG,YAAY,KAAK,MAAM,GAAG,KAAK,OAAO,wBAAwB,GAAG,IAAI;AAAA,EAC/G;AAAA,EAEO,kBAAkB,mBAAuC,gBAAwC,qBAAkD,OAA2C;AACpM,UAAM,mBAAmB,KAAK,6BAA6B,mBAAmB,KAAK;AACnF,UAAM,wBAAwB,KAAK,OAAO,WAAW,gBAAgB,IAAI;AACzE,UAAM,mBAAmB,UAAU,oBAAoB,qBAAqB,qBAAqB;AACjG,UAAM,cAAc,sBAAsB,IAAI,CAAC,IAAI,WAAW,EAAE,OAAc,YAAY,GAAG,WAAW,EAAE;AAC1G,gBAAY,KAAK,CAAC,GAAG,MAAM;AAC1B,UAAI,EAAE,WAAW,gBAAgB,EAAE,WAAW,aAAa;AAC1D,eAAO,EAAE,QAAQ,EAAE;AAAA,MACpB;AACA,aAAO,EAAE,WAAW,cAAc,EAAE,WAAW;AAAA,IAChD,CAAC;AACD,qBAAiB,OAAO,KAAK,QAAQ,YAAY,IAAI,QAAM,GAAG,UAAU,GAAG,YAAY,KAAK,MAAM,GAAG,KAAK,OAAO,wBAAwB,GAAG,gBAAgB;AAC5J,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,oBAAoB,qBAAkD,uBAAkE;AACtJ,QAAI;AACH,aAAO,sBAAsB,oBAAoB,qBAAqB,IAAI;AAAA,IAC3E,SAAS,GAAG;AACX,wBAAkB,CAAC;AACnB,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": []
}
