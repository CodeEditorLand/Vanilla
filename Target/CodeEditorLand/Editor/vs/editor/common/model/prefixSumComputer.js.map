{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/prefixSumComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { arrayInsert } from '../../../base/common/arrays.js';\nimport { toUint32 } from '../../../base/common/uint.js';\n\nexport class PrefixSumComputer {\n\n\t/**\n\t * values[i] is the value at index i\n\t */\n\tprivate values: Uint32Array;\n\n\t/**\n\t * prefixSum[i] = SUM(heights[j]), 0 <= j <= i\n\t */\n\tprivate prefixSum: Uint32Array;\n\n\t/**\n\t * prefixSum[i], 0 <= i <= prefixSumValidIndex can be trusted\n\t */\n\tprivate readonly prefixSumValidIndex: Int32Array;\n\n\tconstructor(values: Uint32Array) {\n\t\tthis.values = values;\n\t\tthis.prefixSum = new Uint32Array(values.length);\n\t\tthis.prefixSumValidIndex = new Int32Array(1);\n\t\tthis.prefixSumValidIndex[0] = -1;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this.values.length;\n\t}\n\n\tpublic insertValues(insertIndex: number, insertValues: Uint32Array): boolean {\n\t\tinsertIndex = toUint32(insertIndex);\n\t\tconst oldValues = this.values;\n\t\tconst oldPrefixSum = this.prefixSum;\n\t\tconst insertValuesLen = insertValues.length;\n\n\t\tif (insertValuesLen === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.values = new Uint32Array(oldValues.length + insertValuesLen);\n\t\tthis.values.set(oldValues.subarray(0, insertIndex), 0);\n\t\tthis.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n\t\tthis.values.set(insertValues, insertIndex);\n\n\t\tif (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n\t\t\tthis.prefixSumValidIndex[0] = insertIndex - 1;\n\t\t}\n\n\t\tthis.prefixSum = new Uint32Array(this.values.length);\n\t\tif (this.prefixSumValidIndex[0] >= 0) {\n\t\t\tthis.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic setValue(index: number, value: number): boolean {\n\t\tindex = toUint32(index);\n\t\tvalue = toUint32(value);\n\n\t\tif (this.values[index] === value) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.values[index] = value;\n\t\tif (index - 1 < this.prefixSumValidIndex[0]) {\n\t\t\tthis.prefixSumValidIndex[0] = index - 1;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic removeValues(startIndex: number, count: number): boolean {\n\t\tstartIndex = toUint32(startIndex);\n\t\tcount = toUint32(count);\n\n\t\tconst oldValues = this.values;\n\t\tconst oldPrefixSum = this.prefixSum;\n\n\t\tif (startIndex >= oldValues.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst maxCount = oldValues.length - startIndex;\n\t\tif (count >= maxCount) {\n\t\t\tcount = maxCount;\n\t\t}\n\n\t\tif (count === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.values = new Uint32Array(oldValues.length - count);\n\t\tthis.values.set(oldValues.subarray(0, startIndex), 0);\n\t\tthis.values.set(oldValues.subarray(startIndex + count), startIndex);\n\n\t\tthis.prefixSum = new Uint32Array(this.values.length);\n\t\tif (startIndex - 1 < this.prefixSumValidIndex[0]) {\n\t\t\tthis.prefixSumValidIndex[0] = startIndex - 1;\n\t\t}\n\t\tif (this.prefixSumValidIndex[0] >= 0) {\n\t\t\tthis.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getTotalSum(): number {\n\t\tif (this.values.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._getPrefixSum(this.values.length - 1);\n\t}\n\n\t/**\n\t * Returns the sum of the first `index + 1` many items.\n\t * @returns `SUM(0 <= j <= index, values[j])`.\n\t */\n\tpublic getPrefixSum(index: number): number {\n\t\tif (index < 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tindex = toUint32(index);\n\t\treturn this._getPrefixSum(index);\n\t}\n\n\tprivate _getPrefixSum(index: number): number {\n\t\tif (index <= this.prefixSumValidIndex[0]) {\n\t\t\treturn this.prefixSum[index];\n\t\t}\n\n\t\tlet startIndex = this.prefixSumValidIndex[0] + 1;\n\t\tif (startIndex === 0) {\n\t\t\tthis.prefixSum[0] = this.values[0];\n\t\t\tstartIndex++;\n\t\t}\n\n\t\tif (index >= this.values.length) {\n\t\t\tindex = this.values.length - 1;\n\t\t}\n\n\t\tfor (let i = startIndex; i <= index; i++) {\n\t\t\tthis.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n\t\t}\n\t\tthis.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n\t\treturn this.prefixSum[index];\n\t}\n\n\tpublic getIndexOf(sum: number): PrefixSumIndexOfResult {\n\t\tsum = Math.floor(sum);\n\n\t\t// Compute all sums (to get a fully valid prefixSum)\n\t\tthis.getTotalSum();\n\n\t\tlet low = 0;\n\t\tlet high = this.values.length - 1;\n\t\tlet mid = 0;\n\t\tlet midStop = 0;\n\t\tlet midStart = 0;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ((high - low) / 2) | 0;\n\n\t\t\tmidStop = this.prefixSum[mid];\n\t\t\tmidStart = midStop - this.values[mid];\n\n\t\t\tif (sum < midStart) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else if (sum >= midStop) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new PrefixSumIndexOfResult(mid, sum - midStart);\n\t}\n}\n\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nexport class ConstantTimePrefixSumComputer {\n\tprivate _values: number[];\n\tprivate _isValid: boolean;\n\tprivate _validEndIndex: number;\n\n\t/**\n\t * _prefixSum[i] = SUM(values[j]), 0 <= j <= i\n\t */\n\tprivate _prefixSum: number[];\n\n\t/**\n\t * _indexBySum[sum] = idx => _prefixSum[idx - 1] <= sum < _prefixSum[idx]\n\t*/\n\tprivate _indexBySum: number[];\n\n\tconstructor(values: number[]) {\n\t\tthis._values = values;\n\t\tthis._isValid = false;\n\t\tthis._validEndIndex = -1;\n\t\tthis._prefixSum = [];\n\t\tthis._indexBySum = [];\n\t}\n\n\t/**\n\t * @returns SUM(0 <= j < values.length, values[j])\n\t */\n\tpublic getTotalSum(): number {\n\t\tthis._ensureValid();\n\t\treturn this._indexBySum.length;\n\t}\n\n\t/**\n\t * Returns the sum of the first `count` many items.\n\t * @returns `SUM(0 <= j < count, values[j])`.\n\t */\n\tpublic getPrefixSum(count: number): number {\n\t\tthis._ensureValid();\n\t\tif (count === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._prefixSum[count - 1];\n\t}\n\n\t/**\n\t * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n\t */\n\tpublic getIndexOf(sum: number): PrefixSumIndexOfResult {\n\t\tthis._ensureValid();\n\t\tconst idx = this._indexBySum[sum];\n\t\tconst viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n\t\treturn new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n\t}\n\n\tpublic removeValues(start: number, deleteCount: number): void {\n\t\tthis._values.splice(start, deleteCount);\n\t\tthis._invalidate(start);\n\t}\n\n\tpublic insertValues(insertIndex: number, insertArr: number[]): void {\n\t\tthis._values = arrayInsert(this._values, insertIndex, insertArr);\n\t\tthis._invalidate(insertIndex);\n\t}\n\n\tprivate _invalidate(index: number): void {\n\t\tthis._isValid = false;\n\t\tthis._validEndIndex = Math.min(this._validEndIndex, index - 1);\n\t}\n\n\tprivate _ensureValid(): void {\n\t\tif (this._isValid) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n\t\t\tconst value = this._values[i];\n\t\t\tconst sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n\n\t\t\tthis._prefixSum[i] = sumAbove + value;\n\t\t\tfor (let j = 0; j < value; j++) {\n\t\t\t\tthis._indexBySum[sumAbove + j] = i;\n\t\t\t}\n\t\t}\n\n\t\t// trim things\n\t\tthis._prefixSum.length = this._values.length;\n\t\tthis._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n\n\t\t// mark as valid\n\t\tthis._isValid = true;\n\t\tthis._validEndIndex = this._values.length - 1;\n\t}\n\n\tpublic setValue(index: number, value: number): void {\n\t\tif (this._values[index] === value) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._values[index] = value;\n\t\tthis._invalidate(index);\n\t}\n}\n\n\nexport class PrefixSumIndexOfResult {\n\t_prefixSumIndexOfResultBrand: void = undefined;\n\n\tconstructor(\n\t\tpublic readonly index: number,\n\t\tpublic readonly remainder: number\n\t) {\n\t\tthis.index = index;\n\t\tthis.remainder = remainder;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
