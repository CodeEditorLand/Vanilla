{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/guidesTextModelPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLast } from '../../../base/common/arraysFind.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport type { TextModel } from './textModel.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { computeIndentLevel } from './utils.js';\nimport { ILanguageConfigurationService, ResolvedLanguageConfiguration } from '../languages/languageConfigurationRegistry.js';\nimport { BracketGuideOptions, HorizontalGuidesState, IActiveIndentGuideInfo, IGuidesTextModelPart, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\n\nexport class GuidesTextModelPart extends TextModelPart implements IGuidesTextModelPart {\n\tconstructor(\n\t\tprivate readonly textModel: TextModel,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate getLanguageConfiguration(\n\t\tlanguageId: string\n\t): ResolvedLanguageConfiguration {\n\t\treturn this.languageConfigurationService.getLanguageConfiguration(\n\t\t\tlanguageId\n\t\t);\n\t}\n\n\tprivate _computeIndentLevel(lineIndex: number): number {\n\t\treturn computeIndentLevel(\n\t\t\tthis.textModel.getLineContent(lineIndex + 1),\n\t\t\tthis.textModel.getOptions().tabSize\n\t\t);\n\t}\n\n\tpublic getActiveIndentGuide(\n\t\tlineNumber: number,\n\t\tminLineNumber: number,\n\t\tmaxLineNumber: number\n\t): IActiveIndentGuideInfo {\n\t\tthis.assertNotDisposed();\n\t\tconst lineCount = this.textModel.getLineCount();\n\n\t\tif (lineNumber < 1 || lineNumber > lineCount) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\n\t\tconst foldingRules = this.getLanguageConfiguration(\n\t\t\tthis.textModel.getLanguageId()\n\t\t).foldingRules;\n\t\tconst offSide = Boolean(foldingRules && foldingRules.offSide);\n\n\t\tlet up_aboveContentLineIndex =\n\t\t\t-2; /* -2 is a marker for not having computed it */\n\t\tlet up_aboveContentLineIndent = -1;\n\t\tlet up_belowContentLineIndex =\n\t\t\t-2; /* -2 is a marker for not having computed it */\n\t\tlet up_belowContentLineIndent = -1;\n\t\tconst up_resolveIndents = (lineNumber: number) => {\n\t\t\tif (\n\t\t\t\tup_aboveContentLineIndex !== -1 &&\n\t\t\t\t(up_aboveContentLineIndex === -2 ||\n\t\t\t\t\tup_aboveContentLineIndex > lineNumber - 1)\n\t\t\t) {\n\t\t\t\tup_aboveContentLineIndex = -1;\n\t\t\t\tup_aboveContentLineIndent = -1;\n\n\t\t\t\t// must find previous line with content\n\t\t\t\tfor (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n\t\t\t\t\tconst indent = this._computeIndentLevel(lineIndex);\n\t\t\t\t\tif (indent >= 0) {\n\t\t\t\t\t\tup_aboveContentLineIndex = lineIndex;\n\t\t\t\t\t\tup_aboveContentLineIndent = indent;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (up_belowContentLineIndex === -2) {\n\t\t\t\tup_belowContentLineIndex = -1;\n\t\t\t\tup_belowContentLineIndent = -1;\n\n\t\t\t\t// must find next line with content\n\t\t\t\tfor (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n\t\t\t\t\tconst indent = this._computeIndentLevel(lineIndex);\n\t\t\t\t\tif (indent >= 0) {\n\t\t\t\t\t\tup_belowContentLineIndex = lineIndex;\n\t\t\t\t\t\tup_belowContentLineIndent = indent;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tlet down_aboveContentLineIndex =\n\t\t\t-2; /* -2 is a marker for not having computed it */\n\t\tlet down_aboveContentLineIndent = -1;\n\t\tlet down_belowContentLineIndex =\n\t\t\t-2; /* -2 is a marker for not having computed it */\n\t\tlet down_belowContentLineIndent = -1;\n\t\tconst down_resolveIndents = (lineNumber: number) => {\n\t\t\tif (down_aboveContentLineIndex === -2) {\n\t\t\t\tdown_aboveContentLineIndex = -1;\n\t\t\t\tdown_aboveContentLineIndent = -1;\n\n\t\t\t\t// must find previous line with content\n\t\t\t\tfor (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n\t\t\t\t\tconst indent = this._computeIndentLevel(lineIndex);\n\t\t\t\t\tif (indent >= 0) {\n\t\t\t\t\t\tdown_aboveContentLineIndex = lineIndex;\n\t\t\t\t\t\tdown_aboveContentLineIndent = indent;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tdown_belowContentLineIndex !== -1 &&\n\t\t\t\t(down_belowContentLineIndex === -2 ||\n\t\t\t\t\tdown_belowContentLineIndex < lineNumber - 1)\n\t\t\t) {\n\t\t\t\tdown_belowContentLineIndex = -1;\n\t\t\t\tdown_belowContentLineIndent = -1;\n\n\t\t\t\t// must find next line with content\n\t\t\t\tfor (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n\t\t\t\t\tconst indent = this._computeIndentLevel(lineIndex);\n\t\t\t\t\tif (indent >= 0) {\n\t\t\t\t\t\tdown_belowContentLineIndex = lineIndex;\n\t\t\t\t\t\tdown_belowContentLineIndent = indent;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tlet startLineNumber = 0;\n\t\tlet goUp = true;\n\t\tlet endLineNumber = 0;\n\t\tlet goDown = true;\n\t\tlet indent = 0;\n\n\t\tlet initialIndent = 0;\n\n\t\tfor (let distance = 0; goUp || goDown; distance++) {\n\t\t\tconst upLineNumber = lineNumber - distance;\n\t\t\tconst downLineNumber = lineNumber + distance;\n\n\t\t\tif (distance > 1 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n\t\t\t\tgoUp = false;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tdistance > 1 &&\n\t\t\t\t(downLineNumber > lineCount || downLineNumber > maxLineNumber)\n\t\t\t) {\n\t\t\t\tgoDown = false;\n\t\t\t}\n\t\t\tif (distance > 50000) {\n\t\t\t\t// stop processing\n\t\t\t\tgoUp = false;\n\t\t\t\tgoDown = false;\n\t\t\t}\n\n\t\t\tlet upLineIndentLevel: number = -1;\n\t\t\tif (goUp && upLineNumber >= 1) {\n\t\t\t\t// compute indent level going up\n\t\t\t\tconst currentIndent = this._computeIndentLevel(upLineNumber - 1);\n\t\t\t\tif (currentIndent >= 0) {\n\t\t\t\t\t// This line has content (besides whitespace)\n\t\t\t\t\t// Use the line's indent\n\t\t\t\t\tup_belowContentLineIndex = upLineNumber - 1;\n\t\t\t\t\tup_belowContentLineIndent = currentIndent;\n\t\t\t\t\tupLineIndentLevel = Math.ceil(\n\t\t\t\t\t\tcurrentIndent / this.textModel.getOptions().indentSize\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tup_resolveIndents(upLineNumber);\n\t\t\t\t\tupLineIndentLevel = this._getIndentLevelForWhitespaceLine(\n\t\t\t\t\t\toffSide,\n\t\t\t\t\t\tup_aboveContentLineIndent,\n\t\t\t\t\t\tup_belowContentLineIndent\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet downLineIndentLevel = -1;\n\t\t\tif (goDown && downLineNumber <= lineCount) {\n\t\t\t\t// compute indent level going down\n\t\t\t\tconst currentIndent = this._computeIndentLevel(downLineNumber - 1);\n\t\t\t\tif (currentIndent >= 0) {\n\t\t\t\t\t// This line has content (besides whitespace)\n\t\t\t\t\t// Use the line's indent\n\t\t\t\t\tdown_aboveContentLineIndex = downLineNumber - 1;\n\t\t\t\t\tdown_aboveContentLineIndent = currentIndent;\n\t\t\t\t\tdownLineIndentLevel = Math.ceil(\n\t\t\t\t\t\tcurrentIndent / this.textModel.getOptions().indentSize\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdown_resolveIndents(downLineNumber);\n\t\t\t\t\tdownLineIndentLevel = this._getIndentLevelForWhitespaceLine(\n\t\t\t\t\t\toffSide,\n\t\t\t\t\t\tdown_aboveContentLineIndent,\n\t\t\t\t\t\tdown_belowContentLineIndent\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (distance === 0) {\n\t\t\t\tinitialIndent = upLineIndentLevel;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (distance === 1) {\n\t\t\t\tif (\n\t\t\t\t\tdownLineNumber <= lineCount &&\n\t\t\t\t\tdownLineIndentLevel >= 0 &&\n\t\t\t\t\tinitialIndent + 1 === downLineIndentLevel\n\t\t\t\t) {\n\t\t\t\t\t// This is the beginning of a scope, we have special handling here, since we want the\n\t\t\t\t\t// child scope indent to be active, not the parent scope\n\t\t\t\t\tgoUp = false;\n\t\t\t\t\tstartLineNumber = downLineNumber;\n\t\t\t\t\tendLineNumber = downLineNumber;\n\t\t\t\t\tindent = downLineIndentLevel;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tupLineNumber >= 1 &&\n\t\t\t\t\tupLineIndentLevel >= 0 &&\n\t\t\t\t\tupLineIndentLevel - 1 === initialIndent\n\t\t\t\t) {\n\t\t\t\t\t// This is the end of a scope, just like above\n\t\t\t\t\tgoDown = false;\n\t\t\t\t\tstartLineNumber = upLineNumber;\n\t\t\t\t\tendLineNumber = upLineNumber;\n\t\t\t\t\tindent = upLineIndentLevel;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tstartLineNumber = lineNumber;\n\t\t\t\tendLineNumber = lineNumber;\n\t\t\t\tindent = initialIndent;\n\t\t\t\tif (indent === 0) {\n\t\t\t\t\t// No need to continue\n\t\t\t\t\treturn { startLineNumber, endLineNumber, indent };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (goUp) {\n\t\t\t\tif (upLineIndentLevel >= indent) {\n\t\t\t\t\tstartLineNumber = upLineNumber;\n\t\t\t\t} else {\n\t\t\t\t\tgoUp = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (goDown) {\n\t\t\t\tif (downLineIndentLevel >= indent) {\n\t\t\t\t\tendLineNumber = downLineNumber;\n\t\t\t\t} else {\n\t\t\t\t\tgoDown = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { startLineNumber, endLineNumber, indent };\n\t}\n\n\tpublic getLinesBracketGuides(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tactivePosition: IPosition | null,\n\t\toptions: BracketGuideOptions\n\t): IndentGuide[][] {\n\t\tconst result: IndentGuide[][] = [];\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tresult.push([]);\n\t\t}\n\n\t\t// If requested, this could be made configurable.\n\t\tconst includeSingleLinePairs = true;\n\n\t\tconst bracketPairs =\n\t\t\tthis.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(\n\t\t\t\tnew Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tthis.textModel.getLineMaxColumn(endLineNumber)\n\t\t\t\t)\n\t\t\t).toArray();\n\n\t\tlet activeBracketPairRange: Range | undefined = undefined;\n\t\tif (activePosition && bracketPairs.length > 0) {\n\t\t\tconst bracketsContainingActivePosition = (\n\t\t\t\tstartLineNumber <= activePosition.lineNumber &&\n\t\t\t\t\tactivePosition.lineNumber <= endLineNumber\n\t\t\t\t\t// We don't need to query the brackets again if the cursor is in the viewport\n\t\t\t\t\t? bracketPairs\n\t\t\t\t\t: this.textModel.bracketPairs.getBracketPairsInRange(\n\t\t\t\t\t\tRange.fromPositions(activePosition)\n\t\t\t\t\t).toArray()\n\t\t\t).filter((bp) => Range.strictContainsPosition(bp.range, activePosition));\n\n\t\t\tactiveBracketPairRange = findLast(\n\t\t\t\tbracketsContainingActivePosition,\n\t\t\t\t(i) => includeSingleLinePairs || i.range.startLineNumber !== i.range.endLineNumber\n\t\t\t)?.range;\n\t\t}\n\n\t\tconst independentColorPoolPerBracketType = this.textModel.getOptions().bracketPairColorizationOptions.independentColorPoolPerBracketType;\n\t\tconst colorProvider = new BracketPairGuidesClassNames();\n\n\t\tfor (const pair of bracketPairs) {\n\t\t\t/*\n\n\n\t\t\t\t\t{\n\t\t\t\t\t|\n\t\t\t\t\t}\n\n\t\t\t\t\t{\n\t\t\t\t\t|\n\t\t\t\t\t----}\n\n\t\t\t\t____{\n\t\t\t\t|test\n\t\t\t\t----}\n\n\t\t\t\trenderHorizontalEndLineAtTheBottom:\n\t\t\t\t\t{\n\t\t\t\t\t|\n\t\t\t\t\t|x}\n\t\t\t\t\t--\n\t\t\t\trenderHorizontalEndLineAtTheBottom:\n\t\t\t\t____{\n\t\t\t\t|test\n\t\t\t\t| x }\n\t\t\t\t----\n\t\t\t*/\n\n\t\t\tif (!pair.closingBracketRange) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isActive = activeBracketPairRange && pair.range.equalsRange(activeBracketPairRange);\n\n\t\t\tif (!isActive && !options.includeInactive) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst className =\n\t\t\t\tcolorProvider.getInlineClassName(pair.nestingLevel, pair.nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) +\n\t\t\t\t(options.highlightActive && isActive\n\t\t\t\t\t? ' ' + colorProvider.activeClassName\n\t\t\t\t\t: '');\n\n\n\t\t\tconst start = pair.openingBracketRange.getStartPosition();\n\t\t\tconst end = pair.closingBracketRange.getStartPosition();\n\n\t\t\tconst horizontalGuides = options.horizontalGuides === HorizontalGuidesState.Enabled || (options.horizontalGuides === HorizontalGuidesState.EnabledForActive && isActive);\n\n\t\t\tif (pair.range.startLineNumber === pair.range.endLineNumber) {\n\t\t\t\tif (includeSingleLinePairs && horizontalGuides) {\n\n\t\t\t\t\tresult[pair.range.startLineNumber - startLineNumber].push(\n\t\t\t\t\t\tnew IndentGuide(\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\tpair.openingBracketRange.getEndPosition().column,\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(false, end.column),\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst endVisibleColumn = this.getVisibleColumnFromPosition(end);\n\t\t\tconst startVisibleColumn = this.getVisibleColumnFromPosition(\n\t\t\t\tpair.openingBracketRange.getStartPosition()\n\t\t\t);\n\t\t\tconst guideVisibleColumn = Math.min(startVisibleColumn, endVisibleColumn, pair.minVisibleColumnIndentation + 1);\n\n\t\t\tlet renderHorizontalEndLineAtTheBottom = false;\n\n\n\t\t\tconst firstNonWsIndex = strings.firstNonWhitespaceIndex(\n\t\t\t\tthis.textModel.getLineContent(\n\t\t\t\t\tpair.closingBracketRange.startLineNumber\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst hasTextBeforeClosingBracket = firstNonWsIndex < pair.closingBracketRange.startColumn - 1;\n\t\t\tif (hasTextBeforeClosingBracket) {\n\t\t\t\trenderHorizontalEndLineAtTheBottom = true;\n\t\t\t}\n\n\n\t\t\tconst visibleGuideStartLineNumber = Math.max(start.lineNumber, startLineNumber);\n\t\t\tconst visibleGuideEndLineNumber = Math.min(end.lineNumber, endLineNumber);\n\n\t\t\tconst offset = renderHorizontalEndLineAtTheBottom ? 1 : 0;\n\n\t\t\tfor (let l = visibleGuideStartLineNumber; l < visibleGuideEndLineNumber + offset; l++) {\n\t\t\t\tresult[l - startLineNumber].push(\n\t\t\t\t\tnew IndentGuide(\n\t\t\t\t\t\tguideVisibleColumn,\n\t\t\t\t\t\t-1,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tl === start.lineNumber ? start.column : -1,\n\t\t\t\t\t\tl === end.lineNumber ? end.column : -1\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (horizontalGuides) {\n\t\t\t\tif (start.lineNumber >= startLineNumber && startVisibleColumn > guideVisibleColumn) {\n\t\t\t\t\tresult[start.lineNumber - startLineNumber].push(\n\t\t\t\t\t\tnew IndentGuide(\n\t\t\t\t\t\t\tguideVisibleColumn,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(false, start.column),\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (end.lineNumber <= endLineNumber && endVisibleColumn > guideVisibleColumn) {\n\t\t\t\t\tresult[end.lineNumber - startLineNumber].push(\n\t\t\t\t\t\tnew IndentGuide(\n\t\t\t\t\t\t\tguideVisibleColumn,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(!renderHorizontalEndLineAtTheBottom, end.column),\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const guides of result) {\n\t\t\tguides.sort((a, b) => a.visibleColumn - b.visibleColumn);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getVisibleColumnFromPosition(position: Position): number {\n\t\treturn (\n\t\t\tCursorColumns.visibleColumnFromColumn(\n\t\t\t\tthis.textModel.getLineContent(position.lineNumber),\n\t\t\t\tposition.column,\n\t\t\t\tthis.textModel.getOptions().tabSize\n\t\t\t) + 1\n\t\t);\n\t}\n\n\tpublic getLinesIndentGuides(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number\n\t): number[] {\n\t\tthis.assertNotDisposed();\n\t\tconst lineCount = this.textModel.getLineCount();\n\n\t\tif (startLineNumber < 1 || startLineNumber > lineCount) {\n\t\t\tthrow new Error('Illegal value for startLineNumber');\n\t\t}\n\t\tif (endLineNumber < 1 || endLineNumber > lineCount) {\n\t\t\tthrow new Error('Illegal value for endLineNumber');\n\t\t}\n\n\t\tconst options = this.textModel.getOptions();\n\t\tconst foldingRules = this.getLanguageConfiguration(\n\t\t\tthis.textModel.getLanguageId()\n\t\t).foldingRules;\n\t\tconst offSide = Boolean(foldingRules && foldingRules.offSide);\n\n\t\tconst result: number[] = new Array<number>(\n\t\t\tendLineNumber - startLineNumber + 1\n\t\t);\n\n\t\tlet aboveContentLineIndex =\n\t\t\t-2; /* -2 is a marker for not having computed it */\n\t\tlet aboveContentLineIndent = -1;\n\n\t\tlet belowContentLineIndex =\n\t\t\t-2; /* -2 is a marker for not having computed it */\n\t\tlet belowContentLineIndent = -1;\n\n\t\tfor (\n\t\t\tlet lineNumber = startLineNumber;\n\t\t\tlineNumber <= endLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst resultIndex = lineNumber - startLineNumber;\n\n\t\t\tconst currentIndent = this._computeIndentLevel(lineNumber - 1);\n\t\t\tif (currentIndent >= 0) {\n\t\t\t\t// This line has content (besides whitespace)\n\t\t\t\t// Use the line's indent\n\t\t\t\taboveContentLineIndex = lineNumber - 1;\n\t\t\t\taboveContentLineIndent = currentIndent;\n\t\t\t\tresult[resultIndex] = Math.ceil(currentIndent / options.indentSize);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (aboveContentLineIndex === -2) {\n\t\t\t\taboveContentLineIndex = -1;\n\t\t\t\taboveContentLineIndent = -1;\n\n\t\t\t\t// must find previous line with content\n\t\t\t\tfor (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n\t\t\t\t\tconst indent = this._computeIndentLevel(lineIndex);\n\t\t\t\t\tif (indent >= 0) {\n\t\t\t\t\t\taboveContentLineIndex = lineIndex;\n\t\t\t\t\t\taboveContentLineIndent = indent;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tbelowContentLineIndex !== -1 &&\n\t\t\t\t(belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)\n\t\t\t) {\n\t\t\t\tbelowContentLineIndex = -1;\n\t\t\t\tbelowContentLineIndent = -1;\n\n\t\t\t\t// must find next line with content\n\t\t\t\tfor (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n\t\t\t\t\tconst indent = this._computeIndentLevel(lineIndex);\n\t\t\t\t\tif (indent >= 0) {\n\t\t\t\t\t\tbelowContentLineIndex = lineIndex;\n\t\t\t\t\t\tbelowContentLineIndent = indent;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[resultIndex] = this._getIndentLevelForWhitespaceLine(\n\t\t\t\toffSide,\n\t\t\t\taboveContentLineIndent,\n\t\t\t\tbelowContentLineIndent\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _getIndentLevelForWhitespaceLine(\n\t\toffSide: boolean,\n\t\taboveContentLineIndent: number,\n\t\tbelowContentLineIndent: number\n\t): number {\n\t\tconst options = this.textModel.getOptions();\n\n\t\tif (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n\t\t\t// At the top or bottom of the file\n\t\t\treturn 0;\n\t\t} else if (aboveContentLineIndent < belowContentLineIndent) {\n\t\t\t// we are inside the region above\n\t\t\treturn 1 + Math.floor(aboveContentLineIndent / options.indentSize);\n\t\t} else if (aboveContentLineIndent === belowContentLineIndent) {\n\t\t\t// we are in between two regions\n\t\t\treturn Math.ceil(belowContentLineIndent / options.indentSize);\n\t\t} else {\n\t\t\tif (offSide) {\n\t\t\t\t// same level as region below\n\t\t\t\treturn Math.ceil(belowContentLineIndent / options.indentSize);\n\t\t\t} else {\n\t\t\t\t// we are inside the region that ends below\n\t\t\t\treturn 1 + Math.floor(belowContentLineIndent / options.indentSize);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class BracketPairGuidesClassNames {\n\tpublic readonly activeClassName = 'indent-active';\n\n\tgetInlineClassName(nestingLevel: number, nestingLevelOfEqualBracketType: number, independentColorPoolPerBracketType: boolean): string {\n\t\treturn this.getInlineClassNameOfLevel(independentColorPoolPerBracketType ? nestingLevelOfEqualBracketType : nestingLevel);\n\t}\n\n\tgetInlineClassNameOfLevel(level: number): string {\n\t\t// To support a dynamic amount of colors up to 6 colors,\n\t\t// we use a number that is a lcm of all numbers from 1 to 6.\n\t\treturn `bracket-indent-guide lvl-${level % 30}`;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["lineNumber", "indent"]
}
