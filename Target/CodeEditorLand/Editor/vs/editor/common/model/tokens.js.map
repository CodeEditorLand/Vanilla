{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/tokens.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from \"../../../base/common/arrays.js\";\nimport { RunOnceScheduler } from \"../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { LineRange } from \"../core/lineRange.js\";\nimport type { StandardTokenType } from \"../encodedTokenAttributes.js\";\nimport type { ILanguageIdCodec } from \"../languages.js\";\nimport type { IAttachedView } from \"../model.js\";\nimport type {\n\tIModelContentChangedEvent,\n\tIModelTokensChangedEvent,\n} from \"../textModelEvents.js\";\nimport {\n\tBackgroundTokenizationState,\n\ttype ITokenizeLineWithEditResult,\n\ttype LineEditWithAdditionalLines,\n} from \"../tokenizationTextModelPart.js\";\nimport type { LineTokens } from \"../tokens/lineTokens.js\";\nimport type { TextModel } from \"./textModel.js\";\n\n/**\n * @internal\n */\nexport class AttachedViews {\n\tprivate readonly _onDidChangeVisibleRanges = new Emitter<{\n\t\tview: IAttachedView;\n\t\tstate: IAttachedViewState | undefined;\n\t}>();\n\tpublic readonly onDidChangeVisibleRanges =\n\t\tthis._onDidChangeVisibleRanges.event;\n\n\tprivate readonly _views = new Set<AttachedViewImpl>();\n\n\tpublic attachView(): IAttachedView {\n\t\tconst view = new AttachedViewImpl((state) => {\n\t\t\tthis._onDidChangeVisibleRanges.fire({ view, state });\n\t\t});\n\t\tthis._views.add(view);\n\t\treturn view;\n\t}\n\n\tpublic detachView(view: IAttachedView): void {\n\t\tthis._views.delete(view as AttachedViewImpl);\n\t\tthis._onDidChangeVisibleRanges.fire({ view, state: undefined });\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IAttachedViewState {\n\treadonly visibleLineRanges: readonly LineRange[];\n\treadonly stabilized: boolean;\n}\n\nclass AttachedViewImpl implements IAttachedView {\n\tconstructor(\n\t\tprivate readonly handleStateChange: (state: IAttachedViewState) => void,\n\t) {}\n\n\tsetVisibleLines(\n\t\tvisibleLines: { startLineNumber: number; endLineNumber: number }[],\n\t\tstabilized: boolean,\n\t): void {\n\t\tconst visibleLineRanges = visibleLines.map(\n\t\t\t(line) =>\n\t\t\t\tnew LineRange(line.startLineNumber, line.endLineNumber + 1),\n\t\t);\n\t\tthis.handleStateChange({ visibleLineRanges, stabilized });\n\t}\n}\n\nexport class AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(\n\t\tnew RunOnceScheduler(() => this.update(), 50),\n\t);\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] {\n\t\treturn this._lineRanges;\n\t}\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (\n\t\t\tequals(this._computedLineRanges, this._lineRanges, (a, b) =>\n\t\t\t\ta.equals(b),\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: IAttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n\nexport abstract class AbstractTokens extends Disposable {\n\tprotected _backgroundTokenizationState =\n\t\tBackgroundTokenizationState.InProgress;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprotected readonly _onDidChangeBackgroundTokenizationState = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeBackgroundTokenizationState: Event<void> =\n\t\tthis._onDidChangeBackgroundTokenizationState.event;\n\n\tprotected readonly _onDidChangeTokens = this._register(\n\t\tnew Emitter<IModelTokensChangedEvent>(),\n\t);\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> =\n\t\tthis._onDidChangeTokens.event;\n\n\tconstructor(\n\t\tprotected readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprotected readonly _textModel: TextModel,\n\t\tprotected getLanguageId: () => string,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic abstract resetTokenization(fireTokenChangeEvent?: boolean): void;\n\n\tpublic abstract handleDidChangeAttached(): void;\n\n\tpublic abstract handleDidChangeContent(e: IModelContentChangedEvent): void;\n\n\tpublic abstract forceTokenization(lineNumber: number): void;\n\n\tpublic abstract hasAccurateTokensForLine(lineNumber: number): boolean;\n\n\tpublic abstract isCheapToTokenize(lineNumber: number): boolean;\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic abstract getLineTokens(lineNumber: number): LineTokens;\n\n\tpublic abstract getTokenTypeIfInsertingCharacter(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tcharacter: string,\n\t): StandardTokenType;\n\n\tpublic abstract tokenizeLineWithEdit(\n\t\tlineNumber: number,\n\t\tedit: LineEditWithAdditionalLines,\n\t): ITokenizeLineWithEditResult;\n\n\tpublic abstract get hasTokens(): boolean;\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,wBAAwB;AACjC,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAQ1B;AAAA,EACC;AAAA,OAGM;AAOA,MAAM,cAAc;AAAA,EA5B3B,OA4B2B;AAAA;AAAA;AAAA,EACT,4BAA4B,IAAI,QAG9C;AAAA,EACa,2BACf,KAAK,0BAA0B;AAAA,EAEf,SAAS,oBAAI,IAAsB;AAAA,EAE7C,aAA4B;AAClC,UAAM,OAAO,IAAI,iBAAiB,CAAC,UAAU;AAC5C,WAAK,0BAA0B,KAAK,EAAE,MAAM,MAAM,CAAC;AAAA,IACpD,CAAC;AACD,SAAK,OAAO,IAAI,IAAI;AACpB,WAAO;AAAA,EACR;AAAA,EAEO,WAAW,MAA2B;AAC5C,SAAK,OAAO,OAAO,IAAwB;AAC3C,SAAK,0BAA0B,KAAK,EAAE,MAAM,OAAO,OAAU,CAAC;AAAA,EAC/D;AACD;AAUA,MAAM,iBAA0C;AAAA,EAC/C,YACkB,mBAChB;AADgB;AAAA,EACf;AAAA,EA/DJ,OA4DgD;AAAA;AAAA;AAAA,EAK/C,gBACC,cACA,YACO;AACP,UAAM,oBAAoB,aAAa;AAAA,MACtC,CAAC,SACA,IAAI,UAAU,KAAK,iBAAiB,KAAK,gBAAgB,CAAC;AAAA,IAC5D;AACA,SAAK,kBAAkB,EAAE,mBAAmB,WAAW,CAAC;AAAA,EACzD;AACD;AAEO,MAAM,4BAA4B,WAAW;AAAA,EAWnD,YAA6B,gBAA4B;AACxD,UAAM;AADsB;AAAA,EAE7B;AAAA,EA1FD,OA6EoD;AAAA;AAAA;AAAA,EAClC,SAAS,KAAK;AAAA,IAC9B,IAAI,iBAAiB,MAAM,KAAK,OAAO,GAAG,EAAE;AAAA,EAC7C;AAAA,EAEQ,sBAA4C,CAAC;AAAA,EAC7C,cAAoC,CAAC;AAAA,EAC7C,IAAW,aAAmC;AAC7C,WAAO,KAAK;AAAA,EACb;AAAA,EAMQ,SAAe;AACtB,QACC;AAAA,MAAO,KAAK;AAAA,MAAqB,KAAK;AAAA,MAAa,CAAC,GAAG,MACtD,EAAE,OAAO,CAAC;AAAA,IACX,GACC;AACD;AAAA,IACD;AACA,SAAK,sBAAsB,KAAK;AAChC,SAAK,eAAe;AAAA,EACrB;AAAA,EAEO,kBAAkB,OAAiC;AACzD,SAAK,cAAc,MAAM;AACzB,QAAI,MAAM,YAAY;AACrB,WAAK,OAAO,OAAO;AACnB,WAAK,OAAO;AAAA,IACb,OAAO;AACN,WAAK,OAAO,SAAS;AAAA,IACtB;AAAA,EACD;AACD;AAEO,MAAe,uBAAuB,WAAW;AAAA,EAqBvD,YACoB,kBACA,YACT,eACT;AACD,UAAM;AAJa;AACA;AACT;AAAA,EAGX;AAAA,EA9ID,OAmHwD;AAAA;AAAA;AAAA,EAC7C,+BACT,4BAA4B;AAAA,EAC7B,IAAW,8BAA2D;AACrE,WAAO,KAAK;AAAA,EACb;AAAA,EAEmB,0CAA0C,KAAK;AAAA,IACjE,IAAI,QAAc;AAAA,EACnB;AAAA;AAAA,EAEgB,yCACf,KAAK,wCAAwC;AAAA,EAE3B,qBAAqB,KAAK;AAAA,IAC5C,IAAI,QAAkC;AAAA,EACvC;AAAA;AAAA,EAEgB,oBACf,KAAK,mBAAmB;AAAA,EAsBlB,gBAAgB,YAA0B;AAChD,QAAI,KAAK,kBAAkB,UAAU,GAAG;AACvC,WAAK,kBAAkB,UAAU;AAAA,IAClC;AAAA,EACD;AAgBD;",
  "names": []
}
