{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/tokens.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { IAttachedView } from '../model.js';\nimport { TextModel } from './textModel.js';\nimport { IModelContentChangedEvent, IModelTokensChangedEvent } from '../textModelEvents.js';\nimport { BackgroundTokenizationState, ITokenizeLineWithEditResult, LineEditWithAdditionalLines } from '../tokenizationTextModelPart.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\n\n/**\n * @internal\n */\nexport class AttachedViews {\n\tprivate readonly _onDidChangeVisibleRanges = new Emitter<{ view: IAttachedView; state: IAttachedViewState | undefined }>();\n\tpublic readonly onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n\n\tprivate readonly _views = new Set<AttachedViewImpl>();\n\n\tpublic attachView(): IAttachedView {\n\t\tconst view = new AttachedViewImpl((state) => {\n\t\t\tthis._onDidChangeVisibleRanges.fire({ view, state });\n\t\t});\n\t\tthis._views.add(view);\n\t\treturn view;\n\t}\n\n\tpublic detachView(view: IAttachedView): void {\n\t\tthis._views.delete(view as AttachedViewImpl);\n\t\tthis._onDidChangeVisibleRanges.fire({ view, state: undefined });\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IAttachedViewState {\n\treadonly visibleLineRanges: readonly LineRange[];\n\treadonly stabilized: boolean;\n}\n\nclass AttachedViewImpl implements IAttachedView {\n\tconstructor(private readonly handleStateChange: (state: IAttachedViewState) => void) { }\n\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void {\n\t\tconst visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n\t\tthis.handleStateChange({ visibleLineRanges, stabilized });\n\t}\n}\n\n\nexport class AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] { return this._lineRanges; }\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: IAttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n\nexport abstract class AbstractTokens extends Disposable {\n\tprotected _backgroundTokenizationState = BackgroundTokenizationState.InProgress;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprotected readonly _onDidChangeBackgroundTokenizationState = this._register(new Emitter<void>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeBackgroundTokenizationState: Event<void> = this._onDidChangeBackgroundTokenizationState.event;\n\n\tprotected readonly _onDidChangeTokens = this._register(new Emitter<IModelTokensChangedEvent>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tconstructor(\n\t\tprotected readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprotected readonly _textModel: TextModel,\n\t\tprotected getLanguageId: () => string,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic abstract resetTokenization(fireTokenChangeEvent?: boolean): void;\n\n\tpublic abstract handleDidChangeAttached(): void;\n\n\tpublic abstract handleDidChangeContent(e: IModelContentChangedEvent): void;\n\n\tpublic abstract forceTokenization(lineNumber: number): void;\n\n\tpublic abstract hasAccurateTokensForLine(lineNumber: number): boolean;\n\n\tpublic abstract isCheapToTokenize(lineNumber: number): boolean;\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic abstract getLineTokens(lineNumber: number): LineTokens;\n\n\tpublic abstract getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;\n\n\tpublic abstract tokenizeLineWithEdit(lineNumber: number, edit: LineEditWithAdditionalLines): ITokenizeLineWithEditResult;\n\n\tpublic abstract get hasTokens(): boolean;\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,wBAAwB;AACjC,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,yBAAyB;AAClC,SAAS,wBAAwB;AACjC,SAAS,qBAAqB;AAC9B,SAAS,iBAAiB;AAC1B,SAAS,2BAA2B,gCAAgC;AACpE,SAAS,6BAA6B,6BAA6B,mCAAmC;AACtG,SAAS,kBAAkB;AAKpB,MAAM,cAAc;AAAA,EArB3B,OAqB2B;AAAA;AAAA;AAAA,EACT,4BAA4B,IAAI,QAAwE;AAAA,EACzG,2BAA2B,KAAK,0BAA0B;AAAA,EAEzD,SAAS,oBAAI,IAAsB;AAAA,EAE7C,aAA4B;AAClC,UAAM,OAAO,IAAI,iBAAiB,CAAC,UAAU;AAC5C,WAAK,0BAA0B,KAAK,EAAE,MAAM,MAAM,CAAC;AAAA,IACpD,CAAC;AACD,SAAK,OAAO,IAAI,IAAI;AACpB,WAAO;AAAA,EACR;AAAA,EAEO,WAAW,MAA2B;AAC5C,SAAK,OAAO,OAAO,IAAwB;AAC3C,SAAK,0BAA0B,KAAK,EAAE,MAAM,OAAO,OAAU,CAAC;AAAA,EAC/D;AACD;AAUA,MAAM,iBAA0C;AAAA,EAC/C,YAA6B,mBAAwD;AAAxD;AAAA,EAA0D;AAAA,EAlDxF,OAiDgD;AAAA;AAAA;AAAA,EAG/C,gBAAgB,cAAoE,YAA2B;AAC9G,UAAM,oBAAoB,aAAa,IAAI,CAAC,SAAS,IAAI,UAAU,KAAK,iBAAiB,KAAK,gBAAgB,CAAC,CAAC;AAChH,SAAK,kBAAkB,EAAE,mBAAmB,WAAW,CAAC;AAAA,EACzD;AACD;AAGO,MAAM,4BAA4B,WAAW;AAAA,EAOnD,YAA6B,gBAA4B;AACxD,UAAM;AADsB;AAAA,EAE7B;AAAA,EApED,OA2DoD;AAAA;AAAA;AAAA,EAClC,SAAS,KAAK,UAAU,IAAI,iBAAiB,MAAM,KAAK,OAAO,GAAG,EAAE,CAAC;AAAA,EAE9E,sBAA4C,CAAC;AAAA,EAC7C,cAAoC,CAAC;AAAA,EAC7C,IAAW,aAAmC;AAAE,WAAO,KAAK;AAAA,EAAa;AAAA,EAMjE,SAAe;AACtB,QAAI,OAAO,KAAK,qBAAqB,KAAK,aAAa,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,CAAC,GAAG;AAC9E;AAAA,IACD;AACA,SAAK,sBAAsB,KAAK;AAChC,SAAK,eAAe;AAAA,EACrB;AAAA,EAEO,kBAAkB,OAAiC;AACzD,SAAK,cAAc,MAAM;AACzB,QAAI,MAAM,YAAY;AACrB,WAAK,OAAO,OAAO;AACnB,WAAK,OAAO;AAAA,IACb,OAAO;AACN,WAAK,OAAO,SAAS;AAAA,IACtB;AAAA,EACD;AACD;AAEO,MAAe,uBAAuB,WAAW;AAAA,EAcvD,YACoB,kBACA,YACT,eACT;AACD,UAAM;AAJa;AACA;AACT;AAAA,EAGX;AAAA,EA7GD,OAyFwD;AAAA;AAAA;AAAA,EAC7C,+BAA+B,4BAA4B;AAAA,EACrE,IAAW,8BAA2D;AACrE,WAAO,KAAK;AAAA,EACb;AAAA,EAEmB,0CAA0C,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA;AAAA,EAE/E,yCAAsD,KAAK,wCAAwC;AAAA,EAEhG,qBAAqB,KAAK,UAAU,IAAI,QAAkC,CAAC;AAAA;AAAA,EAE9E,oBAAqD,KAAK,mBAAmB;AAAA,EAsBtF,gBAAgB,YAA0B;AAChD,QAAI,KAAK,kBAAkB,UAAU,GAAG;AACvC,WAAK,kBAAkB,UAAU;AAAA,IAClC;AAAA,EACD;AASD;",
  "names": []
}
