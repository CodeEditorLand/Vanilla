{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/textModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ArrayQueue, pushMany } from \"../../../base/common/arrays.js\";\nimport type {\n\tVSBuffer,\n\tVSBufferReadableStream,\n} from \"../../../base/common/buffer.js\";\nimport { Color } from \"../../../base/common/color.js\";\nimport {\n\tBugIndicatingError,\n\tillegalArgument,\n\tonUnexpectedError,\n} from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n\tcombinedDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { listenStream } from \"../../../base/common/stream.js\";\nimport * as strings from \"../../../base/common/strings.js\";\nimport type { ThemeColor } from \"../../../base/common/themables.js\";\nimport { Constants } from \"../../../base/common/uint.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { IColorTheme } from \"../../../platform/theme/common/themeService.js\";\nimport {\n\tIUndoRedoService,\n\ttype ResourceEditStackSnapshot,\n\ttype UndoRedoGroup,\n} from \"../../../platform/undoRedo/common/undoRedo.js\";\nimport type { ISingleEditOperation } from \"../core/editOperation.js\";\nimport { countEOL } from \"../core/eolCounter.js\";\nimport { normalizeIndentation } from \"../core/indentation.js\";\nimport { type IPosition, Position } from \"../core/position.js\";\nimport { type IRange, Range } from \"../core/range.js\";\nimport { Selection } from \"../core/selection.js\";\nimport type { TextChange } from \"../core/textChange.js\";\nimport { EDITOR_MODEL_DEFAULTS } from \"../core/textModelDefaults.js\";\nimport type { IWordAtPosition } from \"../core/wordHelper.js\";\nimport type { FormattingOptions } from \"../languages.js\";\nimport {\n\ttype ILanguageSelection,\n\tILanguageService,\n} from \"../languages/language.js\";\nimport { ILanguageConfigurationService } from \"../languages/languageConfigurationRegistry.js\";\nimport * as model from \"../model.js\";\nimport type { IBracketPairsTextModelPart } from \"../textModelBracketPairs.js\";\nimport {\n\ttype IModelContentChangedEvent,\n\ttype IModelDecorationsChangedEvent,\n\ttype IModelOptionsChangedEvent,\n\tInternalModelContentChangeEvent,\n\tLineInjectedText,\n\tModelInjectedTextChangedEvent,\n\ttype ModelRawChange,\n\tModelRawContentChangedEvent,\n\tModelRawEOLChanged,\n\tModelRawFlush,\n\tModelRawLineChanged,\n\tModelRawLinesDeleted,\n\tModelRawLinesInserted,\n} from \"../textModelEvents.js\";\nimport type { IGuidesTextModelPart } from \"../textModelGuides.js\";\nimport type { ITokenizationTextModelPart } from \"../tokenizationTextModelPart.js\";\nimport type { TokenArray } from \"../tokens/tokenArray.js\";\nimport { BracketPairsTextModelPart } from \"./bracketPairsTextModelPart/bracketPairsImpl.js\";\nimport { ColorizedBracketPairsDecorationProvider } from \"./bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js\";\nimport { EditStack } from \"./editStack.js\";\nimport { GuidesTextModelPart } from \"./guidesTextModelPart.js\";\nimport { guessIndentation } from \"./indentationGuesser.js\";\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from \"./intervalTree.js\";\nimport { PieceTreeTextBuffer } from \"./pieceTreeTextBuffer/pieceTreeTextBuffer.js\";\nimport { PieceTreeTextBufferBuilder } from \"./pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js\";\nimport { SearchParams, TextModelSearch } from \"./textModelSearch.js\";\nimport { TokenizationTextModelPart } from \"./tokenizationTextModelPart.js\";\nimport { AttachedViews } from \"./tokens.js\";\n\nexport function createTextBufferFactory(\n\ttext: string,\n): model.ITextBufferFactory {\n\tconst builder = new PieceTreeTextBufferBuilder();\n\tbuilder.acceptChunk(text);\n\treturn builder.finish();\n}\n\ninterface ITextStream {\n\ton(event: \"data\", callback: (data: string) => void): void;\n\ton(event: \"error\", callback: (err: Error) => void): void;\n\ton(event: \"end\", callback: () => void): void;\n\ton(event: string, callback: any): void;\n}\n\nexport function createTextBufferFactoryFromStream(\n\tstream: ITextStream,\n): Promise<model.ITextBufferFactory>;\nexport function createTextBufferFactoryFromStream(\n\tstream: VSBufferReadableStream,\n): Promise<model.ITextBufferFactory>;\nexport function createTextBufferFactoryFromStream(\n\tstream: ITextStream | VSBufferReadableStream,\n): Promise<model.ITextBufferFactory> {\n\treturn new Promise<model.ITextBufferFactory>((resolve, reject) => {\n\t\tconst builder = new PieceTreeTextBufferBuilder();\n\n\t\tlet done = false;\n\n\t\tlistenStream<string | VSBuffer>(stream, {\n\t\t\tonData: (chunk) => {\n\t\t\t\tbuilder.acceptChunk(\n\t\t\t\t\ttypeof chunk === \"string\" ? chunk : chunk.toString(),\n\t\t\t\t);\n\t\t\t},\n\t\t\tonError: (error) => {\n\t\t\t\tif (!done) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonEnd: () => {\n\t\t\t\tif (!done) {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tresolve(builder.finish());\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t});\n}\n\nexport function createTextBufferFactoryFromSnapshot(\n\tsnapshot: model.ITextSnapshot,\n): model.ITextBufferFactory {\n\tconst builder = new PieceTreeTextBufferBuilder();\n\n\tlet chunk: string | null;\n\twhile (typeof (chunk = snapshot.read()) === \"string\") {\n\t\tbuilder.acceptChunk(chunk);\n\t}\n\n\treturn builder.finish();\n}\n\nexport function createTextBuffer(\n\tvalue: string | model.ITextBufferFactory | model.ITextSnapshot,\n\tdefaultEOL: model.DefaultEndOfLine,\n): { textBuffer: model.ITextBuffer; disposable: IDisposable } {\n\tlet factory: model.ITextBufferFactory;\n\tif (typeof value === \"string\") {\n\t\tfactory = createTextBufferFactory(value);\n\t} else if (model.isITextSnapshot(value)) {\n\t\tfactory = createTextBufferFactoryFromSnapshot(value);\n\t} else {\n\t\tfactory = value;\n\t}\n\treturn factory.create(defaultEOL);\n}\n\nlet MODEL_ID = 0;\n\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\n\nclass TextModelSnapshot implements model.ITextSnapshot {\n\tprivate readonly _source: model.ITextSnapshot;\n\tprivate _eos: boolean;\n\n\tconstructor(source: model.ITextSnapshot) {\n\t\tthis._source = source;\n\t\tthis._eos = false;\n\t}\n\n\tpublic read(): string | null {\n\t\tif (this._eos) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tlet resultCnt = 0;\n\t\tlet resultLength = 0;\n\n\t\tdo {\n\t\t\tconst tmp = this._source.read();\n\n\t\t\tif (tmp === null) {\n\t\t\t\t// end-of-stream\n\t\t\t\tthis._eos = true;\n\t\t\t\tif (resultCnt === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn result.join(\"\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tmp.length > 0) {\n\t\t\t\tresult[resultCnt++] = tmp;\n\t\t\t\tresultLength += tmp.length;\n\t\t\t}\n\n\t\t\tif (resultLength >= 64 * 1024) {\n\t\t\t\treturn result.join(\"\");\n\t\t\t}\n\t\t} while (true);\n\t}\n}\n\nconst invalidFunc = () => {\n\tthrow new Error(`Invalid change accessor`);\n};\n\nenum StringOffsetValidationType {\n\t/**\n\t * Even allowed in surrogate pairs\n\t */\n\tRelaxed = 0,\n\t/**\n\t * Not allowed in surrogate pairs\n\t */\n\tSurrogatePairs = 1,\n}\n\nexport class TextModel\n\textends Disposable\n\timplements model.ITextModel, IDecorationsTreesHost\n{\n\tstatic _MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\n\tprivate static readonly LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\n\tprivate static readonly LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\n\tprivate static readonly LARGE_FILE_HEAP_OPERATION_THRESHOLD =\n\t\t256 * 1024 * 1024; // 256M characters, usually ~> 512MB memory usage\n\n\tpublic static DEFAULT_CREATION_OPTIONS: model.ITextModelCreationOptions = {\n\t\tisForSimpleWidget: false,\n\t\ttabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n\t\tindentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n\t\tinsertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n\t\tdetectIndentation: false,\n\t\tdefaultEOL: model.DefaultEndOfLine.LF,\n\t\ttrimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n\t\tlargeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n\t\tbracketPairColorizationOptions:\n\t\t\tEDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n\t};\n\n\tpublic static resolveOptions(\n\t\ttextBuffer: model.ITextBuffer,\n\t\toptions: model.ITextModelCreationOptions,\n\t): model.TextModelResolvedOptions {\n\t\tif (options.detectIndentation) {\n\t\t\tconst guessedIndentation = guessIndentation(\n\t\t\t\ttextBuffer,\n\t\t\t\toptions.tabSize,\n\t\t\t\toptions.insertSpaces,\n\t\t\t);\n\t\t\treturn new model.TextModelResolvedOptions({\n\t\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\t\tindentSize: \"tabSize\", // TODO@Alex: guess indentSize independent of tabSize\n\t\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\t\ttrimAutoWhitespace: options.trimAutoWhitespace,\n\t\t\t\tdefaultEOL: options.defaultEOL,\n\t\t\t\tbracketPairColorizationOptions:\n\t\t\t\t\toptions.bracketPairColorizationOptions,\n\t\t\t});\n\t\t}\n\n\t\treturn new model.TextModelResolvedOptions(options);\n\t}\n\n\t//#region Events\n\tprivate readonly _onWillDispose: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onWillDispose: Event<void> = this._onWillDispose.event;\n\n\tprivate readonly _onDidChangeDecorations: DidChangeDecorationsEmitter =\n\t\tthis._register(\n\t\t\tnew DidChangeDecorationsEmitter((affectedInjectedTextLines) =>\n\t\t\t\tthis.handleBeforeFireDecorationsChangedEvent(\n\t\t\t\t\taffectedInjectedTextLines,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\tpublic readonly onDidChangeDecorations: Event<IModelDecorationsChangedEvent> =\n\t\tthis._onDidChangeDecorations.event;\n\n\tpublic get onDidChangeLanguage() {\n\t\treturn this._tokenizationTextModelPart.onDidChangeLanguage;\n\t}\n\tpublic get onDidChangeLanguageConfiguration() {\n\t\treturn this._tokenizationTextModelPart.onDidChangeLanguageConfiguration;\n\t}\n\tpublic get onDidChangeTokens() {\n\t\treturn this._tokenizationTextModelPart.onDidChangeTokens;\n\t}\n\n\tprivate readonly _onDidChangeOptions: Emitter<IModelOptionsChangedEvent> =\n\t\tthis._register(new Emitter<IModelOptionsChangedEvent>());\n\tpublic readonly onDidChangeOptions: Event<IModelOptionsChangedEvent> =\n\t\tthis._onDidChangeOptions.event;\n\n\tprivate readonly _onDidChangeAttached: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeAttached: Event<void> =\n\t\tthis._onDidChangeAttached.event;\n\n\tprivate readonly _onDidChangeInjectedText: Emitter<ModelInjectedTextChangedEvent> =\n\t\tthis._register(new Emitter<ModelInjectedTextChangedEvent>());\n\n\tprivate readonly _eventEmitter: DidChangeContentEmitter = this._register(\n\t\tnew DidChangeContentEmitter(),\n\t);\n\tpublic onDidChangeContent(\n\t\tlistener: (e: IModelContentChangedEvent) => void,\n\t): IDisposable {\n\t\treturn this._eventEmitter.slowEvent(\n\t\t\t(e: InternalModelContentChangeEvent) =>\n\t\t\t\tlistener(e.contentChangedEvent),\n\t\t);\n\t}\n\tpublic onDidChangeContentOrInjectedText(\n\t\tlistener: (\n\t\t\te: InternalModelContentChangeEvent | ModelInjectedTextChangedEvent,\n\t\t) => void,\n\t): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis._eventEmitter.fastEvent((e) => listener(e)),\n\t\t\tthis._onDidChangeInjectedText.event((e) => listener(e)),\n\t\t);\n\t}\n\t//#endregion\n\n\tpublic readonly id: string;\n\tpublic readonly isForSimpleWidget: boolean;\n\tprivate readonly _associatedResource: URI;\n\tprivate _attachedEditorCount: number;\n\tprivate _buffer: model.ITextBuffer;\n\tprivate _bufferDisposable: IDisposable;\n\tprivate _options: model.TextModelResolvedOptions;\n\tprivate readonly _languageSelectionListener = this._register(\n\t\tnew MutableDisposable<IDisposable>(),\n\t);\n\n\tprivate _isDisposed: boolean;\n\tprivate __isDisposing: boolean;\n\tpublic _isDisposing(): boolean {\n\t\treturn this.__isDisposing;\n\t}\n\tprivate _versionId: number;\n\t/**\n\t * Unlike, versionId, this can go down (via undo) or go to previous values (via redo)\n\t */\n\tprivate _alternativeVersionId: number;\n\tprivate _initialUndoRedoSnapshot: ResourceEditStackSnapshot | null;\n\tprivate readonly _isTooLargeForSyncing: boolean;\n\tprivate readonly _isTooLargeForTokenization: boolean;\n\tprivate readonly _isTooLargeForHeapOperation: boolean;\n\n\t//#region Editing\n\tprivate readonly _commandManager: EditStack;\n\tprivate _isUndoing: boolean;\n\tprivate _isRedoing: boolean;\n\tprivate _trimAutoWhitespaceLines: number[] | null;\n\t//#endregion\n\n\t//#region Decorations\n\t/**\n\t * Used to workaround broken clients that might attempt using a decoration id generated by a different model.\n\t * It is not globally unique in order to limit it to one character.\n\t */\n\tprivate readonly _instanceId: string;\n\tprivate _deltaDecorationCallCnt = 0;\n\tprivate _lastDecorationId: number;\n\tprivate _decorations: { [decorationId: string]: IntervalNode };\n\tprivate _decorationsTree: DecorationsTrees;\n\tprivate readonly _decorationProvider: ColorizedBracketPairsDecorationProvider;\n\t//#endregion\n\n\tprivate readonly _tokenizationTextModelPart: TokenizationTextModelPart;\n\tpublic get tokenization(): ITokenizationTextModelPart {\n\t\treturn this._tokenizationTextModelPart;\n\t}\n\n\tprivate readonly _bracketPairs: BracketPairsTextModelPart;\n\tpublic get bracketPairs(): IBracketPairsTextModelPart {\n\t\treturn this._bracketPairs;\n\t}\n\n\tprivate readonly _guidesTextModelPart: GuidesTextModelPart;\n\tpublic get guides(): IGuidesTextModelPart {\n\t\treturn this._guidesTextModelPart;\n\t}\n\n\tprivate readonly _attachedViews = new AttachedViews();\n\n\tconstructor(\n\t\tsource: string | model.ITextBufferFactory,\n\t\tlanguageIdOrSelection: string | ILanguageSelection,\n\t\tcreationOptions: model.ITextModelCreationOptions,\n\t\tassociatedResource: URI | null = null,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\t// Generate a new unique model id\n\t\tMODEL_ID++;\n\t\tthis.id = '$model' + MODEL_ID;\n\t\tthis.isForSimpleWidget = creationOptions.isForSimpleWidget;\n\t\tif (typeof associatedResource === 'undefined' || associatedResource === null) {\n\t\t\tthis._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n\t\t} else {\n\t\t\tthis._associatedResource = associatedResource;\n\t\t}\n\t\tthis._attachedEditorCount = 0;\n\n\t\tconst { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n\t\tthis._buffer = textBuffer;\n\t\tthis._bufferDisposable = disposable;\n\n\t\tthis._options = TextModel.resolveOptions(this._buffer, creationOptions);\n\n\t\tconst languageId = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n\t\tif (typeof languageIdOrSelection !== 'string') {\n\t\t\tthis._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId));\n\t\t}\n\n\t\tthis._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n\t\tthis._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n\t\tthis._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n\t\tthis._tokenizationTextModelPart = this.instantiationService.createInstance(TokenizationTextModelPart,\n\t\t\tthis,\n\t\t\tthis._bracketPairs,\n\t\t\tlanguageId,\n\t\t\tthis._attachedViews\n\t\t);\n\n\t\tconst bufferLineCount = this._buffer.getLineCount();\n\t\tconst bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), model.EndOfLinePreference.TextDefined);\n\n\t\t// !!! Make a decision in the ctor and permanently respect this decision !!!\n\t\t// If a model is too large at construction time, it will never get tokenized,\n\t\t// under no circumstances.\n\t\tif (creationOptions.largeFileOptimizations) {\n\t\t\tthis._isTooLargeForTokenization = (\n\t\t\t\t(bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n\t\t\t\t|| (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD)\n\t\t\t);\n\n\t\t\tthis._isTooLargeForHeapOperation = bufferTextLength > TextModel.LARGE_FILE_HEAP_OPERATION_THRESHOLD;\n\t\t} else {\n\t\t\tthis._isTooLargeForTokenization = false;\n\t\t\tthis._isTooLargeForHeapOperation = false;\n\t\t}\n\n\t\tthis._isTooLargeForSyncing = (bufferTextLength > TextModel._MODEL_SYNC_LIMIT);\n\n\t\tthis._versionId = 1;\n\t\tthis._alternativeVersionId = 1;\n\t\tthis._initialUndoRedoSnapshot = null;\n\n\t\tthis._isDisposed = false;\n\t\tthis.__isDisposing = false;\n\n\t\tthis._instanceId = strings.singleLetterHash(MODEL_ID);\n\t\tthis._lastDecorationId = 0;\n\t\tthis._decorations = Object.create(null);\n\t\tthis._decorationsTree = new DecorationsTrees();\n\n\t\tthis._commandManager = new EditStack(this, this._undoRedoService);\n\t\tthis._isUndoing = false;\n\t\tthis._isRedoing = false;\n\t\tthis._trimAutoWhitespaceLines = null;\n\n\n\t\tthis._register(this._decorationProvider.onDidChange(() => {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.fire();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}));\n\n\t\tthis._languageService.requestRichLanguageFeatures(languageId);\n\n\t\tthis._register(this._languageConfigurationService.onDidChange(e => {\n\t\t\tthis._bracketPairs.handleLanguageConfigurationServiceChange(e);\n\t\t\tthis._tokenizationTextModelPart.handleLanguageConfigurationServiceChange(e);\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.__isDisposing = true;\n\t\tthis._onWillDispose.fire();\n\t\tthis._tokenizationTextModelPart.dispose();\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t\tthis._bufferDisposable.dispose();\n\t\tthis.__isDisposing = false;\n\t\t// Manually release reference to previous text buffer to avoid large leaks\n\t\t// in case someone leaks a TextModel reference\n\t\tconst emptyDisposedTextBuffer = new PieceTreeTextBuffer(\n\t\t\t[],\n\t\t\t\"\",\n\t\t\t\"\\n\",\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\ttrue,\n\t\t);\n\t\temptyDisposedTextBuffer.dispose();\n\t\tthis._buffer = emptyDisposedTextBuffer;\n\t\tthis._bufferDisposable = Disposable.None;\n\t}\n\n\t_hasListeners(): boolean {\n\t\treturn (\n\t\t\tthis._onWillDispose.hasListeners() ||\n\t\t\tthis._onDidChangeDecorations.hasListeners() ||\n\t\t\tthis._tokenizationTextModelPart._hasListeners() ||\n\t\t\tthis._onDidChangeOptions.hasListeners() ||\n\t\t\tthis._onDidChangeAttached.hasListeners() ||\n\t\t\tthis._onDidChangeInjectedText.hasListeners() ||\n\t\t\tthis._eventEmitter.hasListeners()\n\t\t);\n\t}\n\n\tprivate _assertNotDisposed(): void {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new BugIndicatingError(\"Model is disposed!\");\n\t\t}\n\t}\n\n\tpublic equalsTextBuffer(other: model.ITextBuffer): boolean {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.equals(other);\n\t}\n\n\tpublic getTextBuffer(): model.ITextBuffer {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer;\n\t}\n\n\tprivate _emitContentChangedEvent(\n\t\trawChange: ModelRawContentChangedEvent,\n\t\tchange: IModelContentChangedEvent,\n\t): void {\n\t\tif (this.__isDisposing) {\n\t\t\t// Do not confuse listeners by emitting any event after disposing\n\t\t\treturn;\n\t\t}\n\t\tthis._tokenizationTextModelPart.handleDidChangeContent(change);\n\t\tthis._bracketPairs.handleDidChangeContent(change);\n\t\tthis._eventEmitter.fire(\n\t\t\tnew InternalModelContentChangeEvent(rawChange, change),\n\t\t);\n\t}\n\n\tpublic setValue(value: string | model.ITextSnapshot): void {\n\t\tthis._assertNotDisposed();\n\n\t\tif (value === null || value === undefined) {\n\t\t\tthrow illegalArgument();\n\t\t}\n\n\t\tconst { textBuffer, disposable } = createTextBuffer(\n\t\t\tvalue,\n\t\t\tthis._options.defaultEOL,\n\t\t);\n\t\tthis._setValueFromTextBuffer(textBuffer, disposable);\n\t}\n\n\tprivate _createContentChanged2(\n\t\trange: Range,\n\t\trangeOffset: number,\n\t\trangeLength: number,\n\t\ttext: string,\n\t\tisUndoing: boolean,\n\t\tisRedoing: boolean,\n\t\tisFlush: boolean,\n\t\tisEolChange: boolean,\n\t): IModelContentChangedEvent {\n\t\treturn {\n\t\t\tchanges: [\n\t\t\t\t{\n\t\t\t\t\trange: range,\n\t\t\t\t\trangeOffset: rangeOffset,\n\t\t\t\t\trangeLength: rangeLength,\n\t\t\t\t\ttext: text,\n\t\t\t\t},\n\t\t\t],\n\t\t\teol: this._buffer.getEOL(),\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: this.getVersionId(),\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t};\n\t}\n\n\tprivate _setValueFromTextBuffer(\n\t\ttextBuffer: model.ITextBuffer,\n\t\ttextBufferDisposable: IDisposable,\n\t): void {\n\t\tthis._assertNotDisposed();\n\t\tconst oldFullModelRange = this.getFullModelRange();\n\t\tconst oldModelValueLength =\n\t\t\tthis.getValueLengthInRange(oldFullModelRange);\n\t\tconst endLineNumber = this.getLineCount();\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._buffer = textBuffer;\n\t\tthis._bufferDisposable.dispose();\n\t\tthis._bufferDisposable = textBufferDisposable;\n\t\tthis._increaseVersionId();\n\n\t\t// Destroy all my decorations\n\t\tthis._decorations = Object.create(null);\n\t\tthis._decorationsTree = new DecorationsTrees();\n\n\t\t// Destroy my edit history and settings\n\t\tthis._commandManager.clear();\n\t\tthis._trimAutoWhitespaceLines = null;\n\n\t\tthis._emitContentChangedEvent(\n\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t[new ModelRawFlush()],\n\t\t\t\tthis._versionId,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tthis._createContentChanged2(\n\t\t\t\tnew Range(1, 1, endLineNumber, endColumn),\n\t\t\t\t0,\n\t\t\t\toldModelValueLength,\n\t\t\t\tthis.getValue(),\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic setEOL(eol: model.EndOfLineSequence): void {\n\t\tthis._assertNotDisposed();\n\t\tconst newEOL = eol === model.EndOfLineSequence.CRLF ? \"\\r\\n\" : \"\\n\";\n\t\tif (this._buffer.getEOL() === newEOL) {\n\t\t\t// Nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldFullModelRange = this.getFullModelRange();\n\t\tconst oldModelValueLength =\n\t\t\tthis.getValueLengthInRange(oldFullModelRange);\n\t\tconst endLineNumber = this.getLineCount();\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._onBeforeEOLChange();\n\t\tthis._buffer.setEOL(newEOL);\n\t\tthis._increaseVersionId();\n\t\tthis._onAfterEOLChange();\n\n\t\tthis._emitContentChangedEvent(\n\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t[new ModelRawEOLChanged()],\n\t\t\t\tthis._versionId,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tthis._createContentChanged2(\n\t\t\t\tnew Range(1, 1, endLineNumber, endColumn),\n\t\t\t\t0,\n\t\t\t\toldModelValueLength,\n\t\t\t\tthis.getValue(),\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _onBeforeEOLChange(): void {\n\t\t// Ensure all decorations get their `range` set.\n\t\tthis._decorationsTree.ensureAllNodesHaveRanges(this);\n\t}\n\n\tprivate _onAfterEOLChange(): void {\n\t\t// Transform back `range` to offsets\n\t\tconst versionId = this.getVersionId();\n\t\tconst allDecorations = this._decorationsTree.collectNodesPostOrder();\n\t\tfor (let i = 0, len = allDecorations.length; i < len; i++) {\n\t\t\tconst node = allDecorations[i];\n\t\t\tconst range = node.range!; // the range is defined due to `_onBeforeEOLChange`\n\n\t\t\tconst delta = node.cachedAbsoluteStart - node.start;\n\n\t\t\tconst startOffset = this._buffer.getOffsetAt(\n\t\t\t\trange.startLineNumber,\n\t\t\t\trange.startColumn,\n\t\t\t);\n\t\t\tconst endOffset = this._buffer.getOffsetAt(\n\t\t\t\trange.endLineNumber,\n\t\t\t\trange.endColumn,\n\t\t\t);\n\n\t\t\tnode.cachedAbsoluteStart = startOffset;\n\t\t\tnode.cachedAbsoluteEnd = endOffset;\n\t\t\tnode.cachedVersionId = versionId;\n\n\t\t\tnode.start = startOffset - delta;\n\t\t\tnode.end = endOffset - delta;\n\n\t\t\trecomputeMaxEnd(node);\n\t\t}\n\t}\n\n\tpublic onBeforeAttached(): model.IAttachedView {\n\t\tthis._attachedEditorCount++;\n\t\tif (this._attachedEditorCount === 1) {\n\t\t\tthis._tokenizationTextModelPart.handleDidChangeAttached();\n\t\t\tthis._onDidChangeAttached.fire(undefined);\n\t\t}\n\t\treturn this._attachedViews.attachView();\n\t}\n\n\tpublic onBeforeDetached(view: model.IAttachedView): void {\n\t\tthis._attachedEditorCount--;\n\t\tif (this._attachedEditorCount === 0) {\n\t\t\tthis._tokenizationTextModelPart.handleDidChangeAttached();\n\t\t\tthis._onDidChangeAttached.fire(undefined);\n\t\t}\n\t\tthis._attachedViews.detachView(view);\n\t}\n\n\tpublic isAttachedToEditor(): boolean {\n\t\treturn this._attachedEditorCount > 0;\n\t}\n\n\tpublic getAttachedEditorCount(): number {\n\t\treturn this._attachedEditorCount;\n\t}\n\n\tpublic isTooLargeForSyncing(): boolean {\n\t\treturn this._isTooLargeForSyncing;\n\t}\n\n\tpublic isTooLargeForTokenization(): boolean {\n\t\treturn this._isTooLargeForTokenization;\n\t}\n\n\tpublic isTooLargeForHeapOperation(): boolean {\n\t\treturn this._isTooLargeForHeapOperation;\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\tpublic isDominatedByLongLines(): boolean {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForTokenization()) {\n\t\t\t// Cannot word wrap huge files anyways, so it doesn't really matter\n\t\t\treturn false;\n\t\t}\n\t\tlet smallLineCharCount = 0;\n\t\tlet longLineCharCount = 0;\n\n\t\tconst lineCount = this._buffer.getLineCount();\n\t\tfor (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineLength = this._buffer.getLineLength(lineNumber);\n\t\t\tif (lineLength >= LONG_LINE_BOUNDARY) {\n\t\t\t\tlongLineCharCount += lineLength;\n\t\t\t} else {\n\t\t\t\tsmallLineCharCount += lineLength;\n\t\t\t}\n\t\t}\n\n\t\treturn longLineCharCount > smallLineCharCount;\n\t}\n\n\tpublic get uri(): URI {\n\t\treturn this._associatedResource;\n\t}\n\n\t//#region Options\n\n\tpublic getOptions(): model.TextModelResolvedOptions {\n\t\tthis._assertNotDisposed();\n\t\treturn this._options;\n\t}\n\n\tpublic getFormattingOptions(): FormattingOptions {\n\t\treturn {\n\t\t\ttabSize: this._options.indentSize,\n\t\t\tinsertSpaces: this._options.insertSpaces,\n\t\t};\n\t}\n\n\tpublic updateOptions(_newOpts: model.ITextModelUpdateOptions): void {\n\t\tthis._assertNotDisposed();\n\t\tconst tabSize =\n\t\t\ttypeof _newOpts.tabSize !== \"undefined\"\n\t\t\t\t? _newOpts.tabSize\n\t\t\t\t: this._options.tabSize;\n\t\tconst indentSize =\n\t\t\ttypeof _newOpts.indentSize !== \"undefined\"\n\t\t\t\t? _newOpts.indentSize\n\t\t\t\t: this._options.originalIndentSize;\n\t\tconst insertSpaces =\n\t\t\ttypeof _newOpts.insertSpaces !== \"undefined\"\n\t\t\t\t? _newOpts.insertSpaces\n\t\t\t\t: this._options.insertSpaces;\n\t\tconst trimAutoWhitespace =\n\t\t\ttypeof _newOpts.trimAutoWhitespace !== \"undefined\"\n\t\t\t\t? _newOpts.trimAutoWhitespace\n\t\t\t\t: this._options.trimAutoWhitespace;\n\t\tconst bracketPairColorizationOptions =\n\t\t\ttypeof _newOpts.bracketColorizationOptions !== \"undefined\"\n\t\t\t\t? _newOpts.bracketColorizationOptions\n\t\t\t\t: this._options.bracketPairColorizationOptions;\n\n\t\tconst newOpts = new model.TextModelResolvedOptions({\n\t\t\ttabSize: tabSize,\n\t\t\tindentSize: indentSize,\n\t\t\tinsertSpaces: insertSpaces,\n\t\t\tdefaultEOL: this._options.defaultEOL,\n\t\t\ttrimAutoWhitespace: trimAutoWhitespace,\n\t\t\tbracketPairColorizationOptions,\n\t\t});\n\n\t\tif (this._options.equals(newOpts)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst e = this._options.createChangeEvent(newOpts);\n\t\tthis._options = newOpts;\n\n\t\tthis._bracketPairs.handleDidChangeOptions(e);\n\t\tthis._decorationProvider.handleDidChangeOptions(e);\n\t\tthis._onDidChangeOptions.fire(e);\n\t}\n\n\tpublic detectIndentation(\n\t\tdefaultInsertSpaces: boolean,\n\t\tdefaultTabSize: number,\n\t): void {\n\t\tthis._assertNotDisposed();\n\t\tconst guessedIndentation = guessIndentation(\n\t\t\tthis._buffer,\n\t\t\tdefaultTabSize,\n\t\t\tdefaultInsertSpaces,\n\t\t);\n\t\tthis.updateOptions({\n\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\tindentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n\t\t});\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\tthis._assertNotDisposed();\n\t\treturn normalizeIndentation(\n\t\t\tstr,\n\t\t\tthis._options.indentSize,\n\t\t\tthis._options.insertSpaces,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Reading\n\n\tpublic getVersionId(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._versionId;\n\t}\n\n\tpublic mightContainRTL(): boolean {\n\t\treturn this._buffer.mightContainRTL();\n\t}\n\n\tpublic mightContainUnusualLineTerminators(): boolean {\n\t\treturn this._buffer.mightContainUnusualLineTerminators();\n\t}\n\n\tpublic removeUnusualLineTerminators(\n\t\tselections: Selection[] | null = null,\n\t): void {\n\t\tconst matches = this.findMatches(\n\t\t\tstrings.UNUSUAL_LINE_TERMINATORS.source,\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tnull,\n\t\t\tfalse,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t);\n\t\tthis._buffer.resetMightContainUnusualLineTerminators();\n\t\tthis.pushEditOperations(\n\t\t\tselections,\n\t\t\tmatches.map((m) => ({ range: m.range, text: null })),\n\t\t\t() => null,\n\t\t);\n\t}\n\n\tpublic mightContainNonBasicASCII(): boolean {\n\t\treturn this._buffer.mightContainNonBasicASCII();\n\t}\n\n\tpublic getAlternativeVersionId(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._alternativeVersionId;\n\t}\n\n\tpublic getInitialUndoRedoSnapshot(): ResourceEditStackSnapshot | null {\n\t\tthis._assertNotDisposed();\n\t\treturn this._initialUndoRedoSnapshot;\n\t}\n\n\tpublic getOffsetAt(rawPosition: IPosition): number {\n\t\tthis._assertNotDisposed();\n\t\tconst position = this._validatePosition(\n\t\t\trawPosition.lineNumber,\n\t\t\trawPosition.column,\n\t\t\tStringOffsetValidationType.Relaxed,\n\t\t);\n\t\treturn this._buffer.getOffsetAt(position.lineNumber, position.column);\n\t}\n\n\tpublic getPositionAt(rawOffset: number): Position {\n\t\tthis._assertNotDisposed();\n\t\tconst offset = Math.min(\n\t\t\tthis._buffer.getLength(),\n\t\t\tMath.max(0, rawOffset),\n\t\t);\n\t\treturn this._buffer.getPositionAt(offset);\n\t}\n\n\tprivate _increaseVersionId(): void {\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._alternativeVersionId = this._versionId;\n\t}\n\n\tpublic _overwriteVersionId(versionId: number): void {\n\t\tthis._versionId = versionId;\n\t}\n\n\tpublic _overwriteAlternativeVersionId(\n\t\tnewAlternativeVersionId: number,\n\t): void {\n\t\tthis._alternativeVersionId = newAlternativeVersionId;\n\t}\n\n\tpublic _overwriteInitialUndoRedoSnapshot(\n\t\tnewInitialUndoRedoSnapshot: ResourceEditStackSnapshot | null,\n\t): void {\n\t\tthis._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n\t}\n\n\tpublic getValue(\n\t\teol?: model.EndOfLinePreference,\n\t\tpreserveBOM = false,\n\t): string {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForHeapOperation()) {\n\t\t\tthrow new BugIndicatingError(\n\t\t\t\t\"Operation would exceed heap memory limits\",\n\t\t\t);\n\t\t}\n\n\t\tconst fullModelRange = this.getFullModelRange();\n\t\tconst fullModelValue = this.getValueInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._buffer.getBOM() + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic createSnapshot(preserveBOM = false): model.ITextSnapshot {\n\t\treturn new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n\t}\n\n\tpublic getValueLength(\n\t\teol?: model.EndOfLinePreference,\n\t\tpreserveBOM = false,\n\t): number {\n\t\tthis._assertNotDisposed();\n\t\tconst fullModelRange = this.getFullModelRange();\n\t\tconst fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._buffer.getBOM().length + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic getValueInRange(\n\t\trawRange: IRange,\n\t\teol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined,\n\t): string {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getValueLengthInRange(\n\t\trawRange: IRange,\n\t\teol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined,\n\t): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getValueLengthInRange(\n\t\t\tthis.validateRange(rawRange),\n\t\t\teol,\n\t\t);\n\t}\n\n\tpublic getCharacterCountInRange(\n\t\trawRange: IRange,\n\t\teol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined,\n\t): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getCharacterCountInRange(\n\t\t\tthis.validateRange(rawRange),\n\t\t\teol,\n\t\t);\n\t}\n\n\tpublic getLineCount(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getLineCount();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError(\"Illegal value for lineNumber\");\n\t\t}\n\n\t\treturn this._buffer.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError(\"Illegal value for lineNumber\");\n\t\t}\n\n\t\treturn this._buffer.getLineLength(lineNumber);\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForHeapOperation()) {\n\t\t\tthrow new BugIndicatingError(\n\t\t\t\t\"Operation would exceed heap memory limits\",\n\t\t\t);\n\t\t}\n\n\t\treturn this._buffer.getLinesContent();\n\t}\n\n\tpublic getEOL(): string {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getEOL();\n\t}\n\n\tpublic getEndOfLineSequence(): model.EndOfLineSequence {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getEOL() === \"\\n\"\n\t\t\t? model.EndOfLineSequence.LF\n\t\t\t: model.EndOfLineSequence.CRLF;\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\treturn 1;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError(\"Illegal value for lineNumber\");\n\t\t}\n\t\treturn this._buffer.getLineLength(lineNumber) + 1;\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError(\"Illegal value for lineNumber\");\n\t\t}\n\t\treturn this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError(\"Illegal value for lineNumber\");\n\t\t}\n\t\treturn this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n\t}\n\n\t/**\n\t * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n\t * Will try to not allocate if possible.\n\t */\n\tpublic _validateRangeRelaxedNoAllocations(range: IRange): Range {\n\t\tconst linesCount = this._buffer.getLineCount();\n\n\t\tconst initialStartLineNumber = range.startLineNumber;\n\t\tconst initialStartColumn = range.startColumn;\n\t\tlet startLineNumber = Math.floor(\n\t\t\ttypeof initialStartLineNumber === \"number\" &&\n\t\t\t\t!isNaN(initialStartLineNumber)\n\t\t\t\t? initialStartLineNumber\n\t\t\t\t: 1,\n\t\t);\n\t\tlet startColumn = Math.floor(\n\t\t\ttypeof initialStartColumn === \"number\" && !isNaN(initialStartColumn)\n\t\t\t\t? initialStartColumn\n\t\t\t\t: 1,\n\t\t);\n\n\t\tif (startLineNumber < 1) {\n\t\t\tstartLineNumber = 1;\n\t\t\tstartColumn = 1;\n\t\t} else if (startLineNumber > linesCount) {\n\t\t\tstartLineNumber = linesCount;\n\t\t\tstartColumn = this.getLineMaxColumn(startLineNumber);\n\t\t} else if (startColumn <= 1) {\n\t\t\tstartColumn = 1;\n\t\t} else {\n\t\t\tconst maxColumn = this.getLineMaxColumn(startLineNumber);\n\t\t\tif (startColumn >= maxColumn) {\n\t\t\t\tstartColumn = maxColumn;\n\t\t\t}\n\t\t}\n\n\t\tconst initialEndLineNumber = range.endLineNumber;\n\t\tconst initialEndColumn = range.endColumn;\n\t\tlet endLineNumber = Math.floor(\n\t\t\ttypeof initialEndLineNumber === \"number\" &&\n\t\t\t\t!isNaN(initialEndLineNumber)\n\t\t\t\t? initialEndLineNumber\n\t\t\t\t: 1,\n\t\t);\n\t\tlet endColumn = Math.floor(\n\t\t\ttypeof initialEndColumn === \"number\" && !isNaN(initialEndColumn)\n\t\t\t\t? initialEndColumn\n\t\t\t\t: 1,\n\t\t);\n\n\t\tif (endLineNumber < 1) {\n\t\t\tendLineNumber = 1;\n\t\t\tendColumn = 1;\n\t\t} else if (endLineNumber > linesCount) {\n\t\t\tendLineNumber = linesCount;\n\t\t\tendColumn = this.getLineMaxColumn(endLineNumber);\n\t\t} else if (endColumn <= 1) {\n\t\t\tendColumn = 1;\n\t\t} else {\n\t\t\tconst maxColumn = this.getLineMaxColumn(endLineNumber);\n\t\t\tif (endColumn >= maxColumn) {\n\t\t\t\tendColumn = maxColumn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tinitialStartLineNumber === startLineNumber &&\n\t\t\tinitialStartColumn === startColumn &&\n\t\t\tinitialEndLineNumber === endLineNumber &&\n\t\t\tinitialEndColumn === endColumn &&\n\t\t\trange instanceof Range &&\n\t\t\t!(range instanceof Selection)\n\t\t) {\n\t\t\treturn range;\n\t\t}\n\n\t\treturn new Range(\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t\tendLineNumber,\n\t\t\tendColumn,\n\t\t);\n\t}\n\n\tprivate _isValidPosition(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tvalidationType: StringOffsetValidationType,\n\t): boolean {\n\t\tif (typeof lineNumber !== \"number\" || typeof column !== \"number\") {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isNaN(lineNumber) || isNaN(column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (lineNumber < 1 || column < 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lineCount = this._buffer.getLineCount();\n\t\tif (lineNumber > lineCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (column === 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst maxColumn = this.getLineMaxColumn(lineNumber);\n\t\tif (column > maxColumn) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\t// !!At this point, column > 1\n\t\t\tconst charCodeBefore = this._buffer.getLineCharCode(\n\t\t\t\tlineNumber,\n\t\t\t\tcolumn - 2,\n\t\t\t);\n\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _validatePosition(\n\t\t_lineNumber: number,\n\t\t_column: number,\n\t\tvalidationType: StringOffsetValidationType,\n\t): Position {\n\t\tconst lineNumber = Math.floor(\n\t\t\ttypeof _lineNumber === \"number\" && !isNaN(_lineNumber)\n\t\t\t\t? _lineNumber\n\t\t\t\t: 1,\n\t\t);\n\t\tconst column = Math.floor(\n\t\t\ttypeof _column === \"number\" && !isNaN(_column) ? _column : 1,\n\t\t);\n\t\tconst lineCount = this._buffer.getLineCount();\n\n\t\tif (lineNumber < 1) {\n\t\t\treturn new Position(1, 1);\n\t\t}\n\n\t\tif (lineNumber > lineCount) {\n\t\t\treturn new Position(lineCount, this.getLineMaxColumn(lineCount));\n\t\t}\n\n\t\tif (column <= 1) {\n\t\t\treturn new Position(lineNumber, 1);\n\t\t}\n\n\t\tconst maxColumn = this.getLineMaxColumn(lineNumber);\n\t\tif (column >= maxColumn) {\n\t\t\treturn new Position(lineNumber, maxColumn);\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\t// If the position would end up in the middle of a high-low surrogate pair,\n\t\t\t// we move it to before the pair\n\t\t\t// !!At this point, column > 1\n\t\t\tconst charCodeBefore = this._buffer.getLineCharCode(\n\t\t\t\tlineNumber,\n\t\t\t\tcolumn - 2,\n\t\t\t);\n\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\treturn new Position(lineNumber, column - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic validatePosition(position: IPosition): Position {\n\t\tconst validationType = StringOffsetValidationType.SurrogatePairs;\n\t\tthis._assertNotDisposed();\n\n\t\t// Avoid object allocation and cover most likely case\n\t\tif (position instanceof Position) {\n\t\t\tif (\n\t\t\t\tthis._isValidPosition(\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t\tvalidationType,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn position;\n\t\t\t}\n\t\t}\n\n\t\treturn this._validatePosition(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t\tvalidationType,\n\t\t);\n\t}\n\n\tprivate _isValidRange(\n\t\trange: Range,\n\t\tvalidationType: StringOffsetValidationType,\n\t): boolean {\n\t\tconst startLineNumber = range.startLineNumber;\n\t\tconst startColumn = range.startColumn;\n\t\tconst endLineNumber = range.endLineNumber;\n\t\tconst endColumn = range.endColumn;\n\n\t\tif (\n\t\t\t!this._isValidPosition(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tStringOffsetValidationType.Relaxed,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\t!this._isValidPosition(\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn,\n\t\t\t\tStringOffsetValidationType.Relaxed,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\tconst charCodeBeforeStart =\n\t\t\t\tstartColumn > 1\n\t\t\t\t\t? this._buffer.getLineCharCode(\n\t\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\t\tstartColumn - 2,\n\t\t\t\t\t\t)\n\t\t\t\t\t: 0;\n\t\t\tconst charCodeBeforeEnd =\n\t\t\t\tendColumn > 1 &&\n\t\t\t\tendColumn <= this._buffer.getLineLength(endLineNumber)\n\t\t\t\t\t? this._buffer.getLineCharCode(endLineNumber, endColumn - 2)\n\t\t\t\t\t: 0;\n\n\t\t\tconst startInsideSurrogatePair =\n\t\t\t\tstrings.isHighSurrogate(charCodeBeforeStart);\n\t\t\tconst endInsideSurrogatePair =\n\t\t\t\tstrings.isHighSurrogate(charCodeBeforeEnd);\n\n\t\t\tif (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic validateRange(_range: IRange): Range {\n\t\tconst validationType = StringOffsetValidationType.SurrogatePairs;\n\t\tthis._assertNotDisposed();\n\n\t\t// Avoid object allocation and cover most likely case\n\t\tif (_range instanceof Range && !(_range instanceof Selection)) {\n\t\t\tif (this._isValidRange(_range, validationType)) {\n\t\t\t\treturn _range;\n\t\t\t}\n\t\t}\n\n\t\tconst start = this._validatePosition(\n\t\t\t_range.startLineNumber,\n\t\t\t_range.startColumn,\n\t\t\tStringOffsetValidationType.Relaxed,\n\t\t);\n\t\tconst end = this._validatePosition(\n\t\t\t_range.endLineNumber,\n\t\t\t_range.endColumn,\n\t\t\tStringOffsetValidationType.Relaxed,\n\t\t);\n\n\t\tconst startLineNumber = start.lineNumber;\n\t\tconst startColumn = start.column;\n\t\tconst endLineNumber = end.lineNumber;\n\t\tconst endColumn = end.column;\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\tconst charCodeBeforeStart =\n\t\t\t\tstartColumn > 1\n\t\t\t\t\t? this._buffer.getLineCharCode(\n\t\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\t\tstartColumn - 2,\n\t\t\t\t\t\t)\n\t\t\t\t\t: 0;\n\t\t\tconst charCodeBeforeEnd =\n\t\t\t\tendColumn > 1 &&\n\t\t\t\tendColumn <= this._buffer.getLineLength(endLineNumber)\n\t\t\t\t\t? this._buffer.getLineCharCode(endLineNumber, endColumn - 2)\n\t\t\t\t\t: 0;\n\n\t\t\tconst startInsideSurrogatePair =\n\t\t\t\tstrings.isHighSurrogate(charCodeBeforeStart);\n\t\t\tconst endInsideSurrogatePair =\n\t\t\t\tstrings.isHighSurrogate(charCodeBeforeEnd);\n\n\t\t\tif (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n\t\t\t\treturn new Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tstartColumn,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tendColumn,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tstartLineNumber === endLineNumber &&\n\t\t\t\tstartColumn === endColumn\n\t\t\t) {\n\t\t\t\t// do not expand a collapsed range, simply move it to a valid location\n\t\t\t\treturn new Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tstartColumn - 1,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tendColumn - 1,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (startInsideSurrogatePair && endInsideSurrogatePair) {\n\t\t\t\t// expand range at both ends\n\t\t\t\treturn new Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tstartColumn - 1,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tendColumn + 1,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (startInsideSurrogatePair) {\n\t\t\t\t// only expand range at the start\n\t\t\t\treturn new Range(\n\t\t\t\t\tstartLineNumber,\n\t\t\t\t\tstartColumn - 1,\n\t\t\t\t\tendLineNumber,\n\t\t\t\t\tendColumn,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// only expand range at the end\n\t\t\treturn new Range(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn + 1,\n\t\t\t);\n\t\t}\n\n\t\treturn new Range(\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t\tendLineNumber,\n\t\t\tendColumn,\n\t\t);\n\t}\n\n\tpublic modifyPosition(rawPosition: IPosition, offset: number): Position {\n\t\tthis._assertNotDisposed();\n\t\tconst candidate = this.getOffsetAt(rawPosition) + offset;\n\t\treturn this.getPositionAt(\n\t\t\tMath.min(this._buffer.getLength(), Math.max(0, candidate)),\n\t\t);\n\t}\n\n\tpublic getFullModelRange(): Range {\n\t\tthis._assertNotDisposed();\n\t\tconst lineCount = this.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n\t}\n\n\tprivate findMatchesLineByLine(\n\t\tsearchRange: Range,\n\t\tsearchData: model.SearchData,\n\t\tcaptureMatches: boolean,\n\t\tlimitResultCount: number,\n\t): model.FindMatch[] {\n\t\treturn this._buffer.findMatchesLineByLine(\n\t\t\tsearchRange,\n\t\t\tsearchData,\n\t\t\tcaptureMatches,\n\t\t\tlimitResultCount,\n\t\t);\n\t}\n\n\tpublic findMatches(\n\t\tsearchString: string,\n\t\trawSearchScope: any,\n\t\tisRegex: boolean,\n\t\tmatchCase: boolean,\n\t\twordSeparators: string | null,\n\t\tcaptureMatches: boolean,\n\t\tlimitResultCount: number = LIMIT_FIND_COUNT,\n\t): model.FindMatch[] {\n\t\tthis._assertNotDisposed();\n\n\t\tlet searchRanges: Range[] | null = null;\n\n\t\tif (rawSearchScope !== null) {\n\t\t\tif (!Array.isArray(rawSearchScope)) {\n\t\t\t\trawSearchScope = [rawSearchScope];\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\trawSearchScope.every((searchScope: Range) =>\n\t\t\t\t\tRange.isIRange(searchScope),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tsearchRanges = rawSearchScope.map((searchScope: Range) =>\n\t\t\t\t\tthis.validateRange(searchScope),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (searchRanges === null) {\n\t\t\tsearchRanges = [this.getFullModelRange()];\n\t\t}\n\n\t\tsearchRanges = searchRanges.sort(\n\t\t\t(d1, d2) =>\n\t\t\t\td1.startLineNumber - d2.startLineNumber ||\n\t\t\t\td1.startColumn - d2.startColumn,\n\t\t);\n\n\t\tconst uniqueSearchRanges: Range[] = [];\n\t\tuniqueSearchRanges.push(\n\t\t\tsearchRanges.reduce((prev, curr) => {\n\t\t\t\tif (Range.areIntersecting(prev, curr)) {\n\t\t\t\t\treturn prev.plusRange(curr);\n\t\t\t\t}\n\n\t\t\t\tuniqueSearchRanges.push(prev);\n\t\t\t\treturn curr;\n\t\t\t}),\n\t\t);\n\n\t\tlet matchMapper: (\n\t\t\tvalue: Range,\n\t\t\tindex: number,\n\t\t\tarray: Range[],\n\t\t) => model.FindMatch[];\n\t\tif (!isRegex && searchString.indexOf(\"\\n\") < 0) {\n\t\t\t// not regex, not multi line\n\t\t\tconst searchParams = new SearchParams(\n\t\t\t\tsearchString,\n\t\t\t\tisRegex,\n\t\t\t\tmatchCase,\n\t\t\t\twordSeparators,\n\t\t\t);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\n\t\t\tif (!searchData) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tmatchMapper = (searchRange: Range) =>\n\t\t\t\tthis.findMatchesLineByLine(\n\t\t\t\t\tsearchRange,\n\t\t\t\t\tsearchData,\n\t\t\t\t\tcaptureMatches,\n\t\t\t\t\tlimitResultCount,\n\t\t\t\t);\n\t\t} else {\n\t\t\tmatchMapper = (searchRange: Range) =>\n\t\t\t\tTextModelSearch.findMatches(\n\t\t\t\t\tthis,\n\t\t\t\t\tnew SearchParams(\n\t\t\t\t\t\tsearchString,\n\t\t\t\t\t\tisRegex,\n\t\t\t\t\t\tmatchCase,\n\t\t\t\t\t\twordSeparators,\n\t\t\t\t\t),\n\t\t\t\t\tsearchRange,\n\t\t\t\t\tcaptureMatches,\n\t\t\t\t\tlimitResultCount,\n\t\t\t\t);\n\t\t}\n\n\t\treturn uniqueSearchRanges\n\t\t\t.map(matchMapper)\n\t\t\t.reduce(\n\t\t\t\t(arr, matches: model.FindMatch[]) => arr.concat(matches),\n\t\t\t\t[],\n\t\t\t);\n\t}\n\n\tpublic findNextMatch(\n\t\tsearchString: string,\n\t\trawSearchStart: IPosition,\n\t\tisRegex: boolean,\n\t\tmatchCase: boolean,\n\t\twordSeparators: string,\n\t\tcaptureMatches: boolean,\n\t): model.FindMatch | null {\n\t\tthis._assertNotDisposed();\n\t\tconst searchStart = this.validatePosition(rawSearchStart);\n\n\t\tif (!isRegex && searchString.indexOf(\"\\n\") < 0) {\n\t\t\tconst searchParams = new SearchParams(\n\t\t\t\tsearchString,\n\t\t\t\tisRegex,\n\t\t\t\tmatchCase,\n\t\t\t\twordSeparators,\n\t\t\t);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\t\t\tif (!searchData) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst lineCount = this.getLineCount();\n\t\t\tlet searchRange = new Range(\n\t\t\t\tsearchStart.lineNumber,\n\t\t\t\tsearchStart.column,\n\t\t\t\tlineCount,\n\t\t\t\tthis.getLineMaxColumn(lineCount),\n\t\t\t);\n\t\t\tlet ret = this.findMatchesLineByLine(\n\t\t\t\tsearchRange,\n\t\t\t\tsearchData,\n\t\t\t\tcaptureMatches,\n\t\t\t\t1,\n\t\t\t);\n\t\t\tTextModelSearch.findNextMatch(\n\t\t\t\tthis,\n\t\t\t\tnew SearchParams(\n\t\t\t\t\tsearchString,\n\t\t\t\t\tisRegex,\n\t\t\t\t\tmatchCase,\n\t\t\t\t\twordSeparators,\n\t\t\t\t),\n\t\t\t\tsearchStart,\n\t\t\t\tcaptureMatches,\n\t\t\t);\n\t\t\tif (ret.length > 0) {\n\t\t\t\treturn ret[0];\n\t\t\t}\n\n\t\t\tsearchRange = new Range(\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tsearchStart.lineNumber,\n\t\t\t\tthis.getLineMaxColumn(searchStart.lineNumber),\n\t\t\t);\n\t\t\tret = this.findMatchesLineByLine(\n\t\t\t\tsearchRange,\n\t\t\t\tsearchData,\n\t\t\t\tcaptureMatches,\n\t\t\t\t1,\n\t\t\t);\n\n\t\t\tif (ret.length > 0) {\n\t\t\t\treturn ret[0];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn TextModelSearch.findNextMatch(\n\t\t\tthis,\n\t\t\tnew SearchParams(searchString, isRegex, matchCase, wordSeparators),\n\t\t\tsearchStart,\n\t\t\tcaptureMatches,\n\t\t);\n\t}\n\n\tpublic findPreviousMatch(\n\t\tsearchString: string,\n\t\trawSearchStart: IPosition,\n\t\tisRegex: boolean,\n\t\tmatchCase: boolean,\n\t\twordSeparators: string,\n\t\tcaptureMatches: boolean,\n\t): model.FindMatch | null {\n\t\tthis._assertNotDisposed();\n\t\tconst searchStart = this.validatePosition(rawSearchStart);\n\t\treturn TextModelSearch.findPreviousMatch(\n\t\t\tthis,\n\t\t\tnew SearchParams(searchString, isRegex, matchCase, wordSeparators),\n\t\t\tsearchStart,\n\t\t\tcaptureMatches,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Editing\n\n\tpublic pushStackElement(): void {\n\t\tthis._commandManager.pushStackElement();\n\t}\n\n\tpublic popStackElement(): void {\n\t\tthis._commandManager.popStackElement();\n\t}\n\n\tpublic pushEOL(eol: model.EndOfLineSequence): void {\n\t\tconst currentEOL =\n\t\t\tthis.getEOL() === \"\\n\"\n\t\t\t\t? model.EndOfLineSequence.LF\n\t\t\t\t: model.EndOfLineSequence.CRLF;\n\t\tif (currentEOL === eol) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tif (this._initialUndoRedoSnapshot === null) {\n\t\t\t\tthis._initialUndoRedoSnapshot =\n\t\t\t\t\tthis._undoRedoService.createSnapshot(this.uri);\n\t\t\t}\n\t\t\tthis._commandManager.pushEOL(eol);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _validateEditOperation(\n\t\trawOperation: model.IIdentifiedSingleEditOperation,\n\t): model.ValidAnnotatedEditOperation {\n\t\tif (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n\t\t\treturn rawOperation;\n\t\t}\n\t\treturn new model.ValidAnnotatedEditOperation(\n\t\t\trawOperation.identifier || null,\n\t\t\tthis.validateRange(rawOperation.range),\n\t\t\trawOperation.text,\n\t\t\trawOperation.forceMoveMarkers || false,\n\t\t\trawOperation.isAutoWhitespaceEdit || false,\n\t\t\trawOperation._isTracked || false,\n\t\t);\n\t}\n\n\tprivate _validateEditOperations(\n\t\trawOperations: readonly model.IIdentifiedSingleEditOperation[],\n\t): model.ValidAnnotatedEditOperation[] {\n\t\tconst result: model.ValidAnnotatedEditOperation[] = [];\n\t\tfor (let i = 0, len = rawOperations.length; i < len; i++) {\n\t\t\tresult[i] = this._validateEditOperation(rawOperations[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic pushEditOperations(\n\t\tbeforeCursorState: Selection[] | null,\n\t\teditOperations: model.IIdentifiedSingleEditOperation[],\n\t\tcursorStateComputer: model.ICursorStateComputer | null,\n\t\tgroup?: UndoRedoGroup,\n\t): Selection[] | null {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\treturn this._pushEditOperations(\n\t\t\t\tbeforeCursorState,\n\t\t\t\tthis._validateEditOperations(editOperations),\n\t\t\t\tcursorStateComputer,\n\t\t\t\tgroup,\n\t\t\t);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _pushEditOperations(\n\t\tbeforeCursorState: Selection[] | null,\n\t\teditOperations: model.ValidAnnotatedEditOperation[],\n\t\tcursorStateComputer: model.ICursorStateComputer | null,\n\t\tgroup?: UndoRedoGroup,\n\t): Selection[] | null {\n\t\tif (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n\t\t\t// Go through each saved line number and insert a trim whitespace edit\n\t\t\t// if it is safe to do so (no conflicts with other edits).\n\n\t\t\tconst incomingEdits = editOperations.map((op) => {\n\t\t\t\treturn {\n\t\t\t\t\trange: this.validateRange(op.range),\n\t\t\t\t\ttext: op.text,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n\t\t\t// We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n\t\t\tlet editsAreNearCursors = true;\n\t\t\tif (beforeCursorState) {\n\t\t\t\tfor (let i = 0, len = beforeCursorState.length; i < len; i++) {\n\t\t\t\t\tconst sel = beforeCursorState[i];\n\t\t\t\t\tlet foundEditNearSel = false;\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet j = 0, lenJ = incomingEdits.length;\n\t\t\t\t\t\tj < lenJ;\n\t\t\t\t\t\tj++\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst editRange = incomingEdits[j].range;\n\t\t\t\t\t\tconst selIsAbove =\n\t\t\t\t\t\t\teditRange.startLineNumber > sel.endLineNumber;\n\t\t\t\t\t\tconst selIsBelow =\n\t\t\t\t\t\t\tsel.startLineNumber > editRange.endLineNumber;\n\t\t\t\t\t\tif (!selIsAbove && !selIsBelow) {\n\t\t\t\t\t\t\tfoundEditNearSel = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!foundEditNearSel) {\n\t\t\t\t\t\teditsAreNearCursors = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (editsAreNearCursors) {\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0, len = this._trimAutoWhitespaceLines.length;\n\t\t\t\t\ti < len;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tconst trimLineNumber = this._trimAutoWhitespaceLines[i];\n\t\t\t\t\tconst maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n\n\t\t\t\t\tlet allowTrimLine = true;\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet j = 0, lenJ = incomingEdits.length;\n\t\t\t\t\t\tj < lenJ;\n\t\t\t\t\t\tj++\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst editRange = incomingEdits[j].range;\n\t\t\t\t\t\tconst editText = incomingEdits[j].text;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber < editRange.startLineNumber ||\n\t\t\t\t\t\t\ttrimLineNumber > editRange.endLineNumber\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// `trimLine` is completely outside this edit\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// At this point:\n\t\t\t\t\t\t//   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber &&\n\t\t\t\t\t\t\teditRange.startColumn === maxLineColumn &&\n\t\t\t\t\t\t\teditRange.isEmpty() &&\n\t\t\t\t\t\t\teditText &&\n\t\t\t\t\t\t\teditText.length > 0 &&\n\t\t\t\t\t\t\teditText.charAt(0) === \"\\n\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) after `trimLine`\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber &&\n\t\t\t\t\t\t\teditRange.startColumn === 1 &&\n\t\t\t\t\t\t\teditRange.isEmpty() &&\n\t\t\t\t\t\t\teditText &&\n\t\t\t\t\t\t\teditText.length > 0 &&\n\t\t\t\t\t\t\teditText.charAt(editText.length - 1) === \"\\n\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) before `trimLine`\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Looks like we can't trim this line as it would interfere with an incoming edit\n\t\t\t\t\t\tallowTrimLine = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (allowTrimLine) {\n\t\t\t\t\t\tconst trimRange = new Range(\n\t\t\t\t\t\t\ttrimLineNumber,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\ttrimLineNumber,\n\t\t\t\t\t\t\tmaxLineColumn,\n\t\t\t\t\t\t);\n\t\t\t\t\t\teditOperations.push(\n\t\t\t\t\t\t\tnew model.ValidAnnotatedEditOperation(\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\ttrimRange,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._trimAutoWhitespaceLines = null;\n\t\t}\n\t\tif (this._initialUndoRedoSnapshot === null) {\n\t\t\tthis._initialUndoRedoSnapshot =\n\t\t\t\tthis._undoRedoService.createSnapshot(this.uri);\n\t\t}\n\t\treturn this._commandManager.pushEditOperation(\n\t\t\tbeforeCursorState,\n\t\t\teditOperations,\n\t\t\tcursorStateComputer,\n\t\t\tgroup,\n\t\t);\n\t}\n\n\t_applyUndo(\n\t\tchanges: TextChange[],\n\t\teol: model.EndOfLineSequence,\n\t\tresultingAlternativeVersionId: number,\n\t\tresultingSelection: Selection[] | null,\n\t): void {\n\t\tconst edits = changes.map<ISingleEditOperation>((change) => {\n\t\t\tconst rangeStart = this.getPositionAt(change.newPosition);\n\t\t\tconst rangeEnd = this.getPositionAt(change.newEnd);\n\t\t\treturn {\n\t\t\t\trange: new Range(\n\t\t\t\t\trangeStart.lineNumber,\n\t\t\t\t\trangeStart.column,\n\t\t\t\t\trangeEnd.lineNumber,\n\t\t\t\t\trangeEnd.column,\n\t\t\t\t),\n\t\t\t\ttext: change.oldText,\n\t\t\t};\n\t\t});\n\t\tthis._applyUndoRedoEdits(\n\t\t\tedits,\n\t\t\teol,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tresultingAlternativeVersionId,\n\t\t\tresultingSelection,\n\t\t);\n\t}\n\n\t_applyRedo(\n\t\tchanges: TextChange[],\n\t\teol: model.EndOfLineSequence,\n\t\tresultingAlternativeVersionId: number,\n\t\tresultingSelection: Selection[] | null,\n\t): void {\n\t\tconst edits = changes.map<ISingleEditOperation>((change) => {\n\t\t\tconst rangeStart = this.getPositionAt(change.oldPosition);\n\t\t\tconst rangeEnd = this.getPositionAt(change.oldEnd);\n\t\t\treturn {\n\t\t\t\trange: new Range(\n\t\t\t\t\trangeStart.lineNumber,\n\t\t\t\t\trangeStart.column,\n\t\t\t\t\trangeEnd.lineNumber,\n\t\t\t\t\trangeEnd.column,\n\t\t\t\t),\n\t\t\t\ttext: change.newText,\n\t\t\t};\n\t\t});\n\t\tthis._applyUndoRedoEdits(\n\t\t\tedits,\n\t\t\teol,\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tresultingAlternativeVersionId,\n\t\t\tresultingSelection,\n\t\t);\n\t}\n\n\tprivate _applyUndoRedoEdits(\n\t\tedits: ISingleEditOperation[],\n\t\teol: model.EndOfLineSequence,\n\t\tisUndoing: boolean,\n\t\tisRedoing: boolean,\n\t\tresultingAlternativeVersionId: number,\n\t\tresultingSelection: Selection[] | null,\n\t): void {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tthis._isUndoing = isUndoing;\n\t\t\tthis._isRedoing = isRedoing;\n\t\t\tthis.applyEdits(edits, false);\n\t\t\tthis.setEOL(eol);\n\t\t\tthis._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n\t\t} finally {\n\t\t\tthis._isUndoing = false;\n\t\t\tthis._isRedoing = false;\n\t\t\tthis._eventEmitter.endDeferredEmit(resultingSelection);\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tpublic applyEdits(\n\t\toperations: readonly model.IIdentifiedSingleEditOperation[],\n\t): void;\n\tpublic applyEdits(\n\t\toperations: readonly model.IIdentifiedSingleEditOperation[],\n\t\tcomputeUndoEdits: false,\n\t): void;\n\tpublic applyEdits(\n\t\toperations: readonly model.IIdentifiedSingleEditOperation[],\n\t\tcomputeUndoEdits: true,\n\t): model.IValidEditOperation[];\n\tpublic applyEdits(\n\t\trawOperations: readonly model.IIdentifiedSingleEditOperation[],\n\t\tcomputeUndoEdits = false,\n\t): void | model.IValidEditOperation[] {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tconst operations = this._validateEditOperations(rawOperations);\n\t\t\treturn this._doApplyEdits(operations, computeUndoEdits);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _doApplyEdits(\n\t\trawOperations: model.ValidAnnotatedEditOperation[],\n\t\tcomputeUndoEdits: boolean,\n\t): void | model.IValidEditOperation[] {\n\t\tconst oldLineCount = this._buffer.getLineCount();\n\t\tconst result = this._buffer.applyEdits(\n\t\t\trawOperations,\n\t\t\tthis._options.trimAutoWhitespace,\n\t\t\tcomputeUndoEdits,\n\t\t);\n\t\tconst newLineCount = this._buffer.getLineCount();\n\n\t\tconst contentChanges = result.changes;\n\t\tthis._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n\n\t\tif (contentChanges.length !== 0) {\n\t\t\t// We do a first pass to update decorations\n\t\t\t// because we want to read decorations in the second pass\n\t\t\t// where we will emit content change events\n\t\t\t// and we want to read the final decorations\n\t\t\tfor (let i = 0, len = contentChanges.length; i < len; i++) {\n\t\t\t\tconst change = contentChanges[i];\n\t\t\t\tthis._decorationsTree.acceptReplace(\n\t\t\t\t\tchange.rangeOffset,\n\t\t\t\t\tchange.rangeLength,\n\t\t\t\t\tchange.text.length,\n\t\t\t\t\tchange.forceMoveMarkers,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst rawContentChanges: ModelRawChange[] = [];\n\n\t\t\tthis._increaseVersionId();\n\n\t\t\tlet lineCount = oldLineCount;\n\t\t\tfor (let i = 0, len = contentChanges.length; i < len; i++) {\n\t\t\t\tconst change = contentChanges[i];\n\t\t\t\tconst [eolCount] = countEOL(change.text);\n\t\t\t\tthis._onDidChangeDecorations.fire();\n\n\t\t\t\tconst startLineNumber = change.range.startLineNumber;\n\t\t\t\tconst endLineNumber = change.range.endLineNumber;\n\n\t\t\t\tconst deletingLinesCnt = endLineNumber - startLineNumber;\n\t\t\t\tconst insertingLinesCnt = eolCount;\n\t\t\t\tconst editingLinesCnt = Math.min(\n\t\t\t\t\tdeletingLinesCnt,\n\t\t\t\t\tinsertingLinesCnt,\n\t\t\t\t);\n\n\t\t\t\tconst changeLineCountDelta =\n\t\t\t\t\tinsertingLinesCnt - deletingLinesCnt;\n\n\t\t\t\tconst currentEditStartLineNumber =\n\t\t\t\t\tnewLineCount -\n\t\t\t\t\tlineCount -\n\t\t\t\t\tchangeLineCountDelta +\n\t\t\t\t\tstartLineNumber;\n\t\t\t\tconst firstEditLineNumber = currentEditStartLineNumber;\n\t\t\t\tconst lastInsertedLineNumber =\n\t\t\t\t\tcurrentEditStartLineNumber + insertingLinesCnt;\n\n\t\t\t\tconst decorationsWithInjectedTextInEditedRange =\n\t\t\t\t\tthis._decorationsTree.getInjectedTextInInterval(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tthis.getOffsetAt(new Position(firstEditLineNumber, 1)),\n\t\t\t\t\t\tthis.getOffsetAt(\n\t\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\t\tlastInsertedLineNumber,\n\t\t\t\t\t\t\t\tthis.getLineMaxColumn(lastInsertedLineNumber),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t0,\n\t\t\t\t\t);\n\n\t\t\t\tconst injectedTextInEditedRange =\n\t\t\t\t\tLineInjectedText.fromDecorations(\n\t\t\t\t\t\tdecorationsWithInjectedTextInEditedRange,\n\t\t\t\t\t);\n\t\t\t\tconst injectedTextInEditedRangeQueue = new ArrayQueue(\n\t\t\t\t\tinjectedTextInEditedRange,\n\t\t\t\t);\n\n\t\t\t\tfor (let j = editingLinesCnt; j >= 0; j--) {\n\t\t\t\t\tconst editLineNumber = startLineNumber + j;\n\t\t\t\t\tconst currentEditLineNumber =\n\t\t\t\t\t\tcurrentEditStartLineNumber + j;\n\n\t\t\t\t\tinjectedTextInEditedRangeQueue.takeFromEndWhile(\n\t\t\t\t\t\t(r) => r.lineNumber > currentEditLineNumber,\n\t\t\t\t\t);\n\t\t\t\t\tconst decorationsInCurrentLine =\n\t\t\t\t\t\tinjectedTextInEditedRangeQueue.takeFromEndWhile(\n\t\t\t\t\t\t\t(r) => r.lineNumber === currentEditLineNumber,\n\t\t\t\t\t\t);\n\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLineChanged(\n\t\t\t\t\t\t\teditLineNumber,\n\t\t\t\t\t\t\tthis.getLineContent(currentEditLineNumber),\n\t\t\t\t\t\t\tdecorationsInCurrentLine,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < deletingLinesCnt) {\n\t\t\t\t\t// Must delete some lines\n\t\t\t\t\tconst spliceStartLineNumber =\n\t\t\t\t\t\tstartLineNumber + editingLinesCnt;\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLinesDeleted(\n\t\t\t\t\t\t\tspliceStartLineNumber + 1,\n\t\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < insertingLinesCnt) {\n\t\t\t\t\tconst injectedTextInEditedRangeQueue = new ArrayQueue(\n\t\t\t\t\t\tinjectedTextInEditedRange,\n\t\t\t\t\t);\n\t\t\t\t\t// Must insert some lines\n\t\t\t\t\tconst spliceLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\tconst cnt = insertingLinesCnt - editingLinesCnt;\n\t\t\t\t\tconst fromLineNumber =\n\t\t\t\t\t\tnewLineCount - lineCount - cnt + spliceLineNumber + 1;\n\t\t\t\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\t\t\t\tconst newLines: string[] = [];\n\t\t\t\t\tfor (let i = 0; i < cnt; i++) {\n\t\t\t\t\t\tconst lineNumber = fromLineNumber + i;\n\t\t\t\t\t\tnewLines[i] = this.getLineContent(lineNumber);\n\n\t\t\t\t\t\tinjectedTextInEditedRangeQueue.takeWhile(\n\t\t\t\t\t\t\t(r) => r.lineNumber < lineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tinjectedTexts[i] =\n\t\t\t\t\t\t\tinjectedTextInEditedRangeQueue.takeWhile(\n\t\t\t\t\t\t\t\t(r) => r.lineNumber === lineNumber,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLinesInserted(\n\t\t\t\t\t\t\tspliceLineNumber + 1,\n\t\t\t\t\t\t\tstartLineNumber + insertingLinesCnt,\n\t\t\t\t\t\t\tnewLines,\n\t\t\t\t\t\t\tinjectedTexts,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlineCount += changeLineCountDelta;\n\t\t\t}\n\n\t\t\tthis._emitContentChangedEvent(\n\t\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t\trawContentChanges,\n\t\t\t\t\tthis.getVersionId(),\n\t\t\t\t\tthis._isUndoing,\n\t\t\t\t\tthis._isRedoing,\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tchanges: contentChanges,\n\t\t\t\t\teol: this._buffer.getEOL(),\n\t\t\t\t\tisEolChange: false,\n\t\t\t\t\tversionId: this.getVersionId(),\n\t\t\t\t\tisUndoing: this._isUndoing,\n\t\t\t\t\tisRedoing: this._isRedoing,\n\t\t\t\t\tisFlush: false,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn result.reverseEdits === null ? undefined : result.reverseEdits;\n\t}\n\n\tpublic undo(): void | Promise<void> {\n\t\treturn this._undoRedoService.undo(this.uri);\n\t}\n\n\tpublic canUndo(): boolean {\n\t\treturn this._undoRedoService.canUndo(this.uri);\n\t}\n\n\tpublic redo(): void | Promise<void> {\n\t\treturn this._undoRedoService.redo(this.uri);\n\t}\n\n\tpublic canRedo(): boolean {\n\t\treturn this._undoRedoService.canRedo(this.uri);\n\t}\n\n\t//#endregion\n\n\t//#region Decorations\n\n\tprivate handleBeforeFireDecorationsChangedEvent(\n\t\taffectedInjectedTextLines: Set<number> | null,\n\t): void {\n\t\t// This is called before the decoration changed event is fired.\n\n\t\tif (\n\t\t\taffectedInjectedTextLines === null ||\n\t\t\taffectedInjectedTextLines.size === 0\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst affectedLines = Array.from(affectedInjectedTextLines);\n\t\tconst lineChangeEvents = affectedLines.map(\n\t\t\t(lineNumber) =>\n\t\t\t\tnew ModelRawLineChanged(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tthis.getLineContent(lineNumber),\n\t\t\t\t\tthis._getInjectedTextInLine(lineNumber),\n\t\t\t\t),\n\t\t);\n\n\t\tthis._onDidChangeInjectedText.fire(\n\t\t\tnew ModelInjectedTextChangedEvent(lineChangeEvents),\n\t\t);\n\t}\n\n\tpublic changeDecorations<T>(\n\t\tcallback: (changeAccessor: model.IModelDecorationsChangeAccessor) => T,\n\t\townerId = 0,\n\t): T | null {\n\t\tthis._assertNotDisposed();\n\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\treturn this._changeDecorations(ownerId, callback);\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _changeDecorations<T>(\n\t\townerId: number,\n\t\tcallback: (changeAccessor: model.IModelDecorationsChangeAccessor) => T,\n\t): T | null {\n\t\tconst changeAccessor: model.IModelDecorationsChangeAccessor = {\n\t\t\taddDecoration: (\n\t\t\t\trange: IRange,\n\t\t\t\toptions: model.IModelDecorationOptions,\n\t\t\t): string => {\n\t\t\t\treturn this._deltaDecorationsImpl(\n\t\t\t\t\townerId,\n\t\t\t\t\t[],\n\t\t\t\t\t[{ range: range, options: options }],\n\t\t\t\t)[0];\n\t\t\t},\n\t\t\tchangeDecoration: (id: string, newRange: IRange): void => {\n\t\t\t\tthis._changeDecorationImpl(id, newRange);\n\t\t\t},\n\t\t\tchangeDecorationOptions: (\n\t\t\t\tid: string,\n\t\t\t\toptions: model.IModelDecorationOptions,\n\t\t\t) => {\n\t\t\t\tthis._changeDecorationOptionsImpl(\n\t\t\t\t\tid,\n\t\t\t\t\t_normalizeOptions(options),\n\t\t\t\t);\n\t\t\t},\n\t\t\tremoveDecoration: (id: string): void => {\n\t\t\t\tthis._deltaDecorationsImpl(ownerId, [id], []);\n\t\t\t},\n\t\t\tdeltaDecorations: (\n\t\t\t\toldDecorations: string[],\n\t\t\t\tnewDecorations: model.IModelDeltaDecoration[],\n\t\t\t): string[] => {\n\t\t\t\tif (\n\t\t\t\t\toldDecorations.length === 0 &&\n\t\t\t\t\tnewDecorations.length === 0\n\t\t\t\t) {\n\t\t\t\t\t// nothing to do\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this._deltaDecorationsImpl(\n\t\t\t\t\townerId,\n\t\t\t\t\toldDecorations,\n\t\t\t\t\tnewDecorations,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tlet result: T | null = null;\n\t\ttry {\n\t\t\tresult = callback(changeAccessor);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t\t// Invalidate change accessor\n\t\tchangeAccessor.addDecoration = invalidFunc;\n\t\tchangeAccessor.changeDecoration = invalidFunc;\n\t\tchangeAccessor.changeDecorationOptions = invalidFunc;\n\t\tchangeAccessor.removeDecoration = invalidFunc;\n\t\tchangeAccessor.deltaDecorations = invalidFunc;\n\t\treturn result;\n\t}\n\n\tpublic deltaDecorations(\n\t\toldDecorations: string[],\n\t\tnewDecorations: model.IModelDeltaDecoration[],\n\t\townerId = 0,\n\t): string[] {\n\t\tthis._assertNotDisposed();\n\t\tif (!oldDecorations) {\n\t\t\toldDecorations = [];\n\t\t}\n\t\tif (oldDecorations.length === 0 && newDecorations.length === 0) {\n\t\t\t// nothing to do\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tthis._deltaDecorationCallCnt++;\n\t\t\tif (this._deltaDecorationCallCnt > 1) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Invoking deltaDecorations recursively could lead to leaking decorations.`,\n\t\t\t\t);\n\t\t\t\tonUnexpectedError(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Invoking deltaDecorations recursively could lead to leaking decorations.`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\treturn this._deltaDecorationsImpl(\n\t\t\t\townerId,\n\t\t\t\toldDecorations,\n\t\t\t\tnewDecorations,\n\t\t\t);\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t\tthis._deltaDecorationCallCnt--;\n\t\t}\n\t}\n\n\t_getTrackedRange(id: string): Range | null {\n\t\treturn this.getDecorationRange(id);\n\t}\n\n\t_setTrackedRange(\n\t\tid: string | null,\n\t\tnewRange: null,\n\t\tnewStickiness: model.TrackedRangeStickiness,\n\t): null;\n\t_setTrackedRange(\n\t\tid: string | null,\n\t\tnewRange: Range,\n\t\tnewStickiness: model.TrackedRangeStickiness,\n\t): string;\n\t_setTrackedRange(\n\t\tid: string | null,\n\t\tnewRange: Range | null,\n\t\tnewStickiness: model.TrackedRangeStickiness,\n\t): string | null {\n\t\tconst node = id ? this._decorations[id] : null;\n\n\t\tif (!node) {\n\t\t\tif (!newRange) {\n\t\t\t\t// node doesn't exist, the request is to delete => nothing to do\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// node doesn't exist, the request is to set => add the tracked range\n\t\t\treturn this._deltaDecorationsImpl(\n\t\t\t\t0,\n\t\t\t\t[],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\trange: newRange,\n\t\t\t\t\t\toptions: TRACKED_RANGE_OPTIONS[newStickiness],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttrue,\n\t\t\t)[0];\n\t\t}\n\n\t\tif (!newRange) {\n\t\t\t// node exists, the request is to delete => delete node\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t\treturn null;\n\t\t}\n\n\t\t// node exists, the request is to set => change the tracked range and its options\n\t\tconst range = this._validateRangeRelaxedNoAllocations(newRange);\n\t\tconst startOffset = this._buffer.getOffsetAt(\n\t\t\trange.startLineNumber,\n\t\t\trange.startColumn,\n\t\t);\n\t\tconst endOffset = this._buffer.getOffsetAt(\n\t\t\trange.endLineNumber,\n\t\t\trange.endColumn,\n\t\t);\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), startOffset, endOffset, range);\n\t\tnode.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n\t\tthis._decorationsTree.insert(node);\n\t\treturn node.id;\n\t}\n\n\tpublic removeAllDecorationsWithOwnerId(ownerId: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n\t\tfor (let i = 0, len = nodes.length; i < len; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t}\n\t}\n\n\tpublic getDecorationOptions(\n\t\tdecorationId: string,\n\t): model.IModelDecorationOptions | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\treturn node.options;\n\t}\n\n\tpublic getDecorationRange(decorationId: string): Range | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._decorationsTree.getNodeRange(this, node);\n\t}\n\n\tpublic getLineDecorations(\n\t\tlineNumber: number,\n\t\townerId = 0,\n\t\tfilterOutValidation = false,\n\t): model.IModelDecoration[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getLinesDecorations(\n\t\t\tlineNumber,\n\t\t\tlineNumber,\n\t\t\townerId,\n\t\t\tfilterOutValidation,\n\t\t);\n\t}\n\n\tpublic getLinesDecorations(\n\t\t_startLineNumber: number,\n\t\t_endLineNumber: number,\n\t\townerId = 0,\n\t\tfilterOutValidation = false,\n\t\tonlyMarginDecorations = false,\n\t): model.IModelDecoration[] {\n\t\tconst lineCount = this.getLineCount();\n\t\tconst startLineNumber = Math.min(\n\t\t\tlineCount,\n\t\t\tMath.max(1, _startLineNumber),\n\t\t);\n\t\tconst endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\t\tconst range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n\n\t\tconst decorations = this._getDecorationsInRange(\n\t\t\trange,\n\t\t\townerId,\n\t\t\tfilterOutValidation,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\tpushMany(\n\t\t\tdecorations,\n\t\t\tthis._decorationProvider.getDecorationsInRange(\n\t\t\t\trange,\n\t\t\t\townerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t),\n\t\t);\n\t\treturn decorations;\n\t}\n\n\tpublic getDecorationsInRange(\n\t\trange: IRange,\n\t\townerId = 0,\n\t\tfilterOutValidation = false,\n\t\tonlyMinimapDecorations = false,\n\t\tonlyMarginDecorations = false,\n\t): model.IModelDecoration[] {\n\t\tconst validatedRange = this.validateRange(range);\n\n\t\tconst decorations = this._getDecorationsInRange(\n\t\t\tvalidatedRange,\n\t\t\townerId,\n\t\t\tfilterOutValidation,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\tpushMany(\n\t\t\tdecorations,\n\t\t\tthis._decorationProvider.getDecorationsInRange(\n\t\t\t\tvalidatedRange,\n\t\t\t\townerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t\tonlyMinimapDecorations,\n\t\t\t),\n\t\t);\n\t\treturn decorations;\n\t}\n\n\tpublic getOverviewRulerDecorations(\n\t\townerId = 0,\n\t\tfilterOutValidation = false,\n\t): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAll(\n\t\t\tthis,\n\t\t\townerId,\n\t\t\tfilterOutValidation,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\tpublic getInjectedTextDecorations(ownerId = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAllInjectedText(this, ownerId);\n\t}\n\n\tprivate _getInjectedTextInLine(lineNumber: number): LineInjectedText[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n\t\tconst endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n\n\t\tconst result = this._decorationsTree.getInjectedTextInInterval(\n\t\t\tthis,\n\t\t\tstartOffset,\n\t\t\tendOffset,\n\t\t\t0,\n\t\t);\n\t\treturn LineInjectedText.fromDecorations(result).filter(\n\t\t\t(t) => t.lineNumber === lineNumber,\n\t\t);\n\t}\n\n\tpublic getAllDecorations(\n\t\townerId = 0,\n\t\tfilterOutValidation = false,\n\t): model.IModelDecoration[] {\n\t\tlet result = this._decorationsTree.getAll(\n\t\t\tthis,\n\t\t\townerId,\n\t\t\tfilterOutValidation,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t);\n\t\tresult = result.concat(\n\t\t\tthis._decorationProvider.getAllDecorations(\n\t\t\t\townerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t),\n\t\t);\n\t\treturn result;\n\t}\n\n\tpublic getAllMarginDecorations(ownerId = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAll(this, ownerId, false, false, true);\n\t}\n\n\tprivate _getDecorationsInRange(\n\t\tfilterRange: Range,\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\tonlyMarginDecorations: boolean,\n\t): model.IModelDecoration[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(\n\t\t\tfilterRange.startLineNumber,\n\t\t\tfilterRange.startColumn,\n\t\t);\n\t\tconst endOffset = this._buffer.getOffsetAt(\n\t\t\tfilterRange.endLineNumber,\n\t\t\tfilterRange.endColumn,\n\t\t);\n\t\treturn this._decorationsTree.getAllInInterval(\n\t\t\tthis,\n\t\t\tstartOffset,\n\t\t\tendOffset,\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t}\n\n\tpublic getRangeAt(start: number, end: number): Range {\n\t\treturn this._buffer.getRangeAt(start, end - start);\n\t}\n\n\tprivate _changeDecorationImpl(decorationId: string, _range: IRange): void {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (node.options.after) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\toldRange!.endLineNumber,\n\t\t\t);\n\t\t}\n\t\tif (node.options.before) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\toldRange!.startLineNumber,\n\t\t\t);\n\t\t}\n\n\t\tconst range = this._validateRangeRelaxedNoAllocations(_range);\n\t\tconst startOffset = this._buffer.getOffsetAt(\n\t\t\trange.startLineNumber,\n\t\t\trange.startColumn,\n\t\t);\n\t\tconst endOffset = this._buffer.getOffsetAt(\n\t\t\trange.endLineNumber,\n\t\t\trange.endColumn,\n\t\t);\n\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), startOffset, endOffset, range);\n\t\tthis._decorationsTree.insert(node);\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\n\t\tif (node.options.after) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\trange.endLineNumber,\n\t\t\t);\n\t\t}\n\t\tif (node.options.before) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\trange.startLineNumber,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _changeDecorationOptionsImpl(\n\t\tdecorationId: string,\n\t\toptions: ModelDecorationOptions,\n\t): void {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nodeWasInOverviewRuler =\n\t\t\tnode.options.overviewRuler && node.options.overviewRuler.color\n\t\t\t\t? true\n\t\t\t\t: false;\n\t\tconst nodeIsInOverviewRuler =\n\t\t\toptions.overviewRuler && options.overviewRuler.color ? true : false;\n\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(options);\n\n\t\tif (node.options.after || options.after) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\tnodeRange.endLineNumber,\n\t\t\t);\n\t\t}\n\t\tif (node.options.before || options.before) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\tnodeRange.startLineNumber,\n\t\t\t);\n\t\t}\n\n\t\tconst movedInOverviewRuler =\n\t\t\tnodeWasInOverviewRuler !== nodeIsInOverviewRuler;\n\t\tconst changedWhetherInjectedText =\n\t\t\tisOptionsInjectedText(options) !== isNodeInjectedText(node);\n\t\tif (movedInOverviewRuler || changedWhetherInjectedText) {\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tnode.setOptions(options);\n\t\t\tthis._decorationsTree.insert(node);\n\t\t} else {\n\t\t\tnode.setOptions(options);\n\t\t}\n\t}\n\n\tprivate _deltaDecorationsImpl(\n\t\townerId: number,\n\t\toldDecorationsIds: string[],\n\t\tnewDecorations: model.IModelDeltaDecoration[],\n\t\tsuppressEvents = false,\n\t): string[] {\n\t\tconst versionId = this.getVersionId();\n\n\t\tconst oldDecorationsLen = oldDecorationsIds.length;\n\t\tlet oldDecorationIndex = 0;\n\n\t\tconst newDecorationsLen = newDecorations.length;\n\t\tlet newDecorationIndex = 0;\n\n\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\ttry {\n\t\t\tconst result = new Array<string>(newDecorationsLen);\n\t\t\twhile (\n\t\t\t\toldDecorationIndex < oldDecorationsLen ||\n\t\t\t\tnewDecorationIndex < newDecorationsLen\n\t\t\t) {\n\t\t\t\tlet node: IntervalNode | null = null;\n\n\t\t\t\tif (oldDecorationIndex < oldDecorationsLen) {\n\t\t\t\t\t// (1) get ourselves an old node\n\t\t\t\t\tdo {\n\t\t\t\t\t\tnode =\n\t\t\t\t\t\t\tthis._decorations[\n\t\t\t\t\t\t\t\toldDecorationsIds[oldDecorationIndex++]\n\t\t\t\t\t\t\t];\n\t\t\t\t\t} while (!node && oldDecorationIndex < oldDecorationsLen);\n\n\t\t\t\t\t// (2) remove the node from the tree (if it exists)\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tif (node.options.after) {\n\t\t\t\t\t\t\tconst nodeRange =\n\t\t\t\t\t\t\t\tthis._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\t\t\t\t\tnodeRange.endLineNumber,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.before) {\n\t\t\t\t\t\t\tconst nodeRange =\n\t\t\t\t\t\t\t\tthis._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\t\t\t\t\tnodeRange.startLineNumber,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._decorationsTree.delete(node);\n\n\t\t\t\t\t\tif (!suppressEvents) {\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.checkAffectedAndFire(\n\t\t\t\t\t\t\t\tnode.options,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (newDecorationIndex < newDecorationsLen) {\n\t\t\t\t\t// (3) create a new node if necessary\n\t\t\t\t\tif (!node) {\n\t\t\t\t\t\tconst internalDecorationId = ++this._lastDecorationId;\n\t\t\t\t\t\tconst decorationId = `${this._instanceId};${internalDecorationId}`;\n\t\t\t\t\t\tnode = new IntervalNode(decorationId, 0, 0);\n\t\t\t\t\t\tthis._decorations[decorationId] = node;\n\t\t\t\t\t}\n\n\t\t\t\t\t// (4) initialize node\n\t\t\t\t\tconst newDecoration = newDecorations[newDecorationIndex];\n\t\t\t\t\tconst range = this._validateRangeRelaxedNoAllocations(\n\t\t\t\t\t\tnewDecoration.range,\n\t\t\t\t\t);\n\t\t\t\t\tconst options = _normalizeOptions(newDecoration.options);\n\t\t\t\t\tconst startOffset = this._buffer.getOffsetAt(\n\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t);\n\t\t\t\t\tconst endOffset = this._buffer.getOffsetAt(\n\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t);\n\n\t\t\t\t\tnode.ownerId = ownerId;\n\t\t\t\t\tnode.reset(versionId, startOffset, endOffset, range);\n\t\t\t\t\tnode.setOptions(options);\n\n\t\t\t\t\tif (node.options.after) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.before) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(\n\t\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!suppressEvents) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.checkAffectedAndFire(\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._decorationsTree.insert(node);\n\n\t\t\t\t\tresult[newDecorationIndex] = node.id;\n\n\t\t\t\t\tnewDecorationIndex++;\n\t\t\t\t} else if (node) {\n\t\t\t\t\tdelete this._decorations[node.id];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Tokenization\n\n\t// TODO move them to the tokenization part.\n\tpublic getLanguageId(): string {\n\t\treturn this.tokenization.getLanguageId();\n\t}\n\n\tpublic setLanguage(\n\t\tlanguageIdOrSelection: string | ILanguageSelection,\n\t\tsource?: string,\n\t): void {\n\t\tif (typeof languageIdOrSelection === \"string\") {\n\t\t\tthis._languageSelectionListener.clear();\n\t\t\tthis._setLanguage(languageIdOrSelection, source);\n\t\t} else {\n\t\t\tthis._languageSelectionListener.value =\n\t\t\t\tlanguageIdOrSelection.onDidChange(() =>\n\t\t\t\t\tthis._setLanguage(languageIdOrSelection.languageId, source),\n\t\t\t\t);\n\t\t\tthis._setLanguage(languageIdOrSelection.languageId, source);\n\t\t}\n\t}\n\n\tprivate _setLanguage(languageId: string, source?: string): void {\n\t\tthis.tokenization.setLanguageId(languageId, source);\n\t\tthis._languageService.requestRichLanguageFeatures(languageId);\n\t}\n\n\tpublic getLanguageIdAtPosition(lineNumber: number, column: number): string {\n\t\treturn this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n\t}\n\n\tpublic getWordAtPosition(position: IPosition): IWordAtPosition | null {\n\t\treturn this._tokenizationTextModelPart.getWordAtPosition(position);\n\t}\n\n\tpublic getWordUntilPosition(position: IPosition): IWordAtPosition {\n\t\treturn this._tokenizationTextModelPart.getWordUntilPosition(position);\n\t}\n\n\t//#endregion\n\tnormalizePosition(\n\t\tposition: Position,\n\t\taffinity: model.PositionAffinity,\n\t): Position {\n\t\treturn position;\n\t}\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t */\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\t// Columns start with 1.\n\t\treturn indentOfLine(this.getLineContent(lineNumber)) + 1;\n\t}\n}\n\nexport function indentOfLine(line: string): number {\n\tlet indent = 0;\n\tfor (const c of line) {\n\t\tif (c === \" \" || c === \"\\t\") {\n\t\t\tindent++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn indent;\n}\n\n//#region Decorations\n\nfunction isNodeInOverviewRuler(node: IntervalNode): boolean {\n\treturn node.options.overviewRuler && node.options.overviewRuler.color\n\t\t? true\n\t\t: false;\n}\n\nfunction isOptionsInjectedText(options: ModelDecorationOptions): boolean {\n\treturn !!options.after || !!options.before;\n}\n\nfunction isNodeInjectedText(node: IntervalNode): boolean {\n\treturn !!node.options.after || !!node.options.before;\n}\n\nexport interface IDecorationsTreesHost {\n\tgetVersionId(): number;\n\tgetRangeAt(start: number, end: number): Range;\n}\n\nclass DecorationsTrees {\n\t/**\n\t * This tree holds decorations that do not show up in the overview ruler.\n\t */\n\tprivate readonly _decorationsTree0: IntervalTree;\n\n\t/**\n\t * This tree holds decorations that show up in the overview ruler.\n\t */\n\tprivate readonly _decorationsTree1: IntervalTree;\n\n\t/**\n\t * This tree holds decorations that contain injected text.\n\t */\n\tprivate readonly _injectedTextDecorationsTree: IntervalTree;\n\n\tconstructor() {\n\t\tthis._decorationsTree0 = new IntervalTree();\n\t\tthis._decorationsTree1 = new IntervalTree();\n\t\tthis._injectedTextDecorationsTree = new IntervalTree();\n\t}\n\n\tpublic ensureAllNodesHaveRanges(host: IDecorationsTreesHost): void {\n\t\tthis.getAll(host, 0, false, false, false);\n\t}\n\n\tprivate _ensureNodesHaveRanges(\n\t\thost: IDecorationsTreesHost,\n\t\tnodes: IntervalNode[],\n\t): model.IModelDecoration[] {\n\t\tfor (const node of nodes) {\n\t\t\tif (node.range === null) {\n\t\t\t\tnode.range = host.getRangeAt(\n\t\t\t\t\tnode.cachedAbsoluteStart,\n\t\t\t\t\tnode.cachedAbsoluteEnd,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn <model.IModelDecoration[]>nodes;\n\t}\n\n\tpublic getAllInInterval(\n\t\thost: IDecorationsTreesHost,\n\t\tstart: number,\n\t\tend: number,\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\tonlyMarginDecorations: boolean,\n\t): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._intervalSearch(\n\t\t\tstart,\n\t\t\tend,\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tversionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\treturn this._ensureNodesHaveRanges(host, result);\n\t}\n\n\tprivate _intervalSearch(\n\t\tstart: number,\n\t\tend: number,\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\tcachedVersionId: number,\n\t\tonlyMarginDecorations: boolean,\n\t): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.intervalSearch(\n\t\t\tstart,\n\t\t\tend,\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tcachedVersionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\tconst r1 = this._decorationsTree1.intervalSearch(\n\t\t\tstart,\n\t\t\tend,\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tcachedVersionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\tconst r2 = this._injectedTextDecorationsTree.intervalSearch(\n\t\t\tstart,\n\t\t\tend,\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tcachedVersionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic getInjectedTextInInterval(\n\t\thost: IDecorationsTreesHost,\n\t\tstart: number,\n\t\tend: number,\n\t\tfilterOwnerId: number,\n\t): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._injectedTextDecorationsTree.intervalSearch(\n\t\t\tstart,\n\t\t\tend,\n\t\t\tfilterOwnerId,\n\t\t\tfalse,\n\t\t\tversionId,\n\t\t\tfalse,\n\t\t);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter(\n\t\t\t(i) => i.options.showIfCollapsed || !i.range.isEmpty(),\n\t\t);\n\t}\n\n\tpublic getAllInjectedText(\n\t\thost: IDecorationsTreesHost,\n\t\tfilterOwnerId: number,\n\t): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._injectedTextDecorationsTree.search(\n\t\t\tfilterOwnerId,\n\t\t\tfalse,\n\t\t\tversionId,\n\t\t\tfalse,\n\t\t);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter(\n\t\t\t(i) => i.options.showIfCollapsed || !i.range.isEmpty(),\n\t\t);\n\t}\n\n\tpublic getAll(\n\t\thost: IDecorationsTreesHost,\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\toverviewRulerOnly: boolean,\n\t\tonlyMarginDecorations: boolean,\n\t): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._search(\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\toverviewRulerOnly,\n\t\t\tversionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\treturn this._ensureNodesHaveRanges(host, result);\n\t}\n\n\tprivate _search(\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\toverviewRulerOnly: boolean,\n\t\tcachedVersionId: number,\n\t\tonlyMarginDecorations: boolean,\n\t): IntervalNode[] {\n\t\tif (overviewRulerOnly) {\n\t\t\treturn this._decorationsTree1.search(\n\t\t\t\tfilterOwnerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t\tcachedVersionId,\n\t\t\t\tonlyMarginDecorations,\n\t\t\t);\n\t\t} else {\n\t\t\tconst r0 = this._decorationsTree0.search(\n\t\t\t\tfilterOwnerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t\tcachedVersionId,\n\t\t\t\tonlyMarginDecorations,\n\t\t\t);\n\t\t\tconst r1 = this._decorationsTree1.search(\n\t\t\t\tfilterOwnerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t\tcachedVersionId,\n\t\t\t\tonlyMarginDecorations,\n\t\t\t);\n\t\t\tconst r2 = this._injectedTextDecorationsTree.search(\n\t\t\t\tfilterOwnerId,\n\t\t\t\tfilterOutValidation,\n\t\t\t\tcachedVersionId,\n\t\t\t\tonlyMarginDecorations,\n\t\t\t);\n\t\t\treturn r0.concat(r1).concat(r2);\n\t\t}\n\t}\n\n\tpublic collectNodesFromOwner(ownerId: number): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n\t\tconst r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n\t\tconst r2 =\n\t\t\tthis._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic collectNodesPostOrder(): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.collectNodesPostOrder();\n\t\tconst r1 = this._decorationsTree1.collectNodesPostOrder();\n\t\tconst r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic insert(node: IntervalNode): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.insert(node);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.insert(node);\n\t\t} else {\n\t\t\tthis._decorationsTree0.insert(node);\n\t\t}\n\t}\n\n\tpublic delete(node: IntervalNode): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.delete(node);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.delete(node);\n\t\t} else {\n\t\t\tthis._decorationsTree0.delete(node);\n\t\t}\n\t}\n\n\tpublic getNodeRange(\n\t\thost: IDecorationsTreesHost,\n\t\tnode: IntervalNode,\n\t): Range {\n\t\tconst versionId = host.getVersionId();\n\t\tif (node.cachedVersionId !== versionId) {\n\t\t\tthis._resolveNode(node, versionId);\n\t\t}\n\t\tif (node.range === null) {\n\t\t\tnode.range = host.getRangeAt(\n\t\t\t\tnode.cachedAbsoluteStart,\n\t\t\t\tnode.cachedAbsoluteEnd,\n\t\t\t);\n\t\t}\n\t\treturn node.range;\n\t}\n\n\tprivate _resolveNode(node: IntervalNode, cachedVersionId: number): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.resolveNode(\n\t\t\t\tnode,\n\t\t\t\tcachedVersionId,\n\t\t\t);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.resolveNode(node, cachedVersionId);\n\t\t} else {\n\t\t\tthis._decorationsTree0.resolveNode(node, cachedVersionId);\n\t\t}\n\t}\n\n\tpublic acceptReplace(\n\t\toffset: number,\n\t\tlength: number,\n\t\ttextLength: number,\n\t\tforceMoveMarkers: boolean,\n\t): void {\n\t\tthis._decorationsTree0.acceptReplace(\n\t\t\toffset,\n\t\t\tlength,\n\t\t\ttextLength,\n\t\t\tforceMoveMarkers,\n\t\t);\n\t\tthis._decorationsTree1.acceptReplace(\n\t\t\toffset,\n\t\t\tlength,\n\t\t\ttextLength,\n\t\t\tforceMoveMarkers,\n\t\t);\n\t\tthis._injectedTextDecorationsTree.acceptReplace(\n\t\t\toffset,\n\t\t\tlength,\n\t\t\ttextLength,\n\t\t\tforceMoveMarkers,\n\t\t);\n\t}\n}\n\nfunction cleanClassName(className: string): string {\n\treturn className.replace(/[^a-z0-9\\-_]/gi, \" \");\n}\n\nclass DecorationOptions implements model.IDecorationOptions {\n\treadonly color: string | ThemeColor;\n\treadonly darkColor: string | ThemeColor;\n\n\tconstructor(options: model.IDecorationOptions) {\n\t\tthis.color = options.color || \"\";\n\t\tthis.darkColor = options.darkColor || \"\";\n\t}\n}\n\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n\treadonly position: model.OverviewRulerLane;\n\tprivate _resolvedColor: string | null;\n\n\tconstructor(options: model.IModelDecorationOverviewRulerOptions) {\n\t\tsuper(options);\n\t\tthis._resolvedColor = null;\n\t\tthis.position =\n\t\t\ttypeof options.position === \"number\"\n\t\t\t\t? options.position\n\t\t\t\t: model.OverviewRulerLane.Center;\n\t}\n\n\tpublic getColor(theme: IColorTheme): string {\n\t\tif (!this._resolvedColor) {\n\t\t\tif (theme.type !== \"light\" && this.darkColor) {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.darkColor, theme);\n\t\t\t} else {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.color, theme);\n\t\t\t}\n\t\t}\n\t\treturn this._resolvedColor;\n\t}\n\n\tpublic invalidateCachedColor(): void {\n\t\tthis._resolvedColor = null;\n\t}\n\n\tprivate _resolveColor(\n\t\tcolor: string | ThemeColor,\n\t\ttheme: IColorTheme,\n\t): string {\n\t\tif (typeof color === \"string\") {\n\t\t\treturn color;\n\t\t}\n\t\tconst c = color ? theme.getColor(color.id) : null;\n\t\tif (!c) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn c.toString();\n\t}\n}\n\nexport class ModelDecorationGlyphMarginOptions {\n\treadonly position: model.GlyphMarginLane;\n\treadonly persistLane: boolean | undefined;\n\n\tconstructor(\n\t\toptions: model.IModelDecorationGlyphMarginOptions | null | undefined,\n\t) {\n\t\tthis.position = options?.position ?? model.GlyphMarginLane.Center;\n\t\tthis.persistLane = options?.persistLane;\n\t}\n}\n\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n\treadonly position: model.MinimapPosition;\n\treadonly sectionHeaderStyle: model.MinimapSectionHeaderStyle | null;\n\treadonly sectionHeaderText: string | null;\n\tprivate _resolvedColor: Color | undefined;\n\n\tconstructor(options: model.IModelDecorationMinimapOptions) {\n\t\tsuper(options);\n\t\tthis.position = options.position;\n\t\tthis.sectionHeaderStyle = options.sectionHeaderStyle ?? null;\n\t\tthis.sectionHeaderText = options.sectionHeaderText ?? null;\n\t}\n\n\tpublic getColor(theme: IColorTheme): Color | undefined {\n\t\tif (!this._resolvedColor) {\n\t\t\tif (theme.type !== \"light\" && this.darkColor) {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.darkColor, theme);\n\t\t\t} else {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.color, theme);\n\t\t\t}\n\t\t}\n\n\t\treturn this._resolvedColor;\n\t}\n\n\tpublic invalidateCachedColor(): void {\n\t\tthis._resolvedColor = undefined;\n\t}\n\n\tprivate _resolveColor(\n\t\tcolor: string | ThemeColor,\n\t\ttheme: IColorTheme,\n\t): Color | undefined {\n\t\tif (typeof color === \"string\") {\n\t\t\treturn Color.fromHex(color);\n\t\t}\n\t\treturn theme.getColor(color.id);\n\t}\n}\n\nexport class ModelDecorationInjectedTextOptions\n\timplements model.InjectedTextOptions\n{\n\tpublic static from(\n\t\toptions: model.InjectedTextOptions,\n\t): ModelDecorationInjectedTextOptions {\n\t\tif (options instanceof ModelDecorationInjectedTextOptions) {\n\t\t\treturn options;\n\t\t}\n\t\treturn new ModelDecorationInjectedTextOptions(options);\n\t}\n\n\tpublic readonly content: string;\n\tpublic readonly tokens: TokenArray | null;\n\treadonly inlineClassName: string | null;\n\treadonly inlineClassNameAffectsLetterSpacing: boolean;\n\treadonly attachedData: unknown | null;\n\treadonly cursorStops: model.InjectedTextCursorStops | null;\n\n\tprivate constructor(options: model.InjectedTextOptions) {\n\t\tthis.content = options.content || \"\";\n\t\tthis.tokens = options.tokens ?? null;\n\t\tthis.inlineClassName = options.inlineClassName || null;\n\t\tthis.inlineClassNameAffectsLetterSpacing =\n\t\t\toptions.inlineClassNameAffectsLetterSpacing || false;\n\t\tthis.attachedData = options.attachedData || null;\n\t\tthis.cursorStops = options.cursorStops || null;\n\t}\n}\n\nexport class ModelDecorationOptions implements model.IModelDecorationOptions {\n\tpublic static EMPTY: ModelDecorationOptions;\n\n\tpublic static register(\n\t\toptions: model.IModelDecorationOptions,\n\t): ModelDecorationOptions {\n\t\treturn new ModelDecorationOptions(options);\n\t}\n\n\tpublic static createDynamic(\n\t\toptions: model.IModelDecorationOptions,\n\t): ModelDecorationOptions {\n\t\treturn new ModelDecorationOptions(options);\n\t}\n\treadonly description: string;\n\treadonly blockClassName: string | null;\n\treadonly blockIsAfterEnd: boolean | null;\n\treadonly blockDoesNotCollapse?: boolean | null;\n\treadonly blockPadding:\n\t\t| [top: number, right: number, bottom: number, left: number]\n\t\t| null;\n\treadonly stickiness: model.TrackedRangeStickiness;\n\treadonly zIndex: number;\n\treadonly className: string | null;\n\treadonly shouldFillLineOnLineBreak: boolean | null;\n\treadonly hoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly glyphMarginHoverMessage:\n\t\t| IMarkdownString\n\t\t| IMarkdownString[]\n\t\t| null;\n\treadonly isWholeLine: boolean;\n\treadonly showIfCollapsed: boolean;\n\treadonly collapseOnReplaceEdit: boolean;\n\treadonly overviewRuler: ModelDecorationOverviewRulerOptions | null;\n\treadonly minimap: ModelDecorationMinimapOptions | null;\n\treadonly glyphMargin?:\n\t\t| model.IModelDecorationGlyphMarginOptions\n\t\t| null\n\t\t| undefined;\n\treadonly glyphMarginClassName: string | null;\n\treadonly linesDecorationsClassName: string | null;\n\treadonly lineNumberClassName: string | null;\n\treadonly lineNumberHoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly linesDecorationsTooltip: string | null;\n\treadonly firstLineDecorationClassName: string | null;\n\treadonly marginClassName: string | null;\n\treadonly inlineClassName: string | null;\n\treadonly inlineClassNameAffectsLetterSpacing: boolean;\n\treadonly beforeContentClassName: string | null;\n\treadonly afterContentClassName: string | null;\n\treadonly after: ModelDecorationInjectedTextOptions | null;\n\treadonly before: ModelDecorationInjectedTextOptions | null;\n\treadonly hideInCommentTokens: boolean | null;\n\treadonly hideInStringTokens: boolean | null;\n\n\tprivate constructor(options: model.IModelDecorationOptions) {\n\t\tthis.description = options.description;\n\t\tthis.blockClassName = options.blockClassName\n\t\t\t? cleanClassName(options.blockClassName)\n\t\t\t: null;\n\t\tthis.blockDoesNotCollapse = options.blockDoesNotCollapse ?? null;\n\t\tthis.blockIsAfterEnd = options.blockIsAfterEnd ?? null;\n\t\tthis.blockPadding = options.blockPadding ?? null;\n\t\tthis.stickiness =\n\t\t\toptions.stickiness ||\n\t\t\tmodel.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;\n\t\tthis.zIndex = options.zIndex || 0;\n\t\tthis.className = options.className\n\t\t\t? cleanClassName(options.className)\n\t\t\t: null;\n\t\tthis.shouldFillLineOnLineBreak =\n\t\t\toptions.shouldFillLineOnLineBreak ?? null;\n\t\tthis.hoverMessage = options.hoverMessage || null;\n\t\tthis.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n\t\tthis.lineNumberHoverMessage = options.lineNumberHoverMessage || null;\n\t\tthis.isWholeLine = options.isWholeLine || false;\n\t\tthis.showIfCollapsed = options.showIfCollapsed || false;\n\t\tthis.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n\t\tthis.overviewRuler = options.overviewRuler\n\t\t\t? new ModelDecorationOverviewRulerOptions(options.overviewRuler)\n\t\t\t: null;\n\t\tthis.minimap = options.minimap\n\t\t\t? new ModelDecorationMinimapOptions(options.minimap)\n\t\t\t: null;\n\t\tthis.glyphMargin = options.glyphMarginClassName\n\t\t\t? new ModelDecorationGlyphMarginOptions(options.glyphMargin)\n\t\t\t: null;\n\t\tthis.glyphMarginClassName = options.glyphMarginClassName\n\t\t\t? cleanClassName(options.glyphMarginClassName)\n\t\t\t: null;\n\t\tthis.linesDecorationsClassName = options.linesDecorationsClassName\n\t\t\t? cleanClassName(options.linesDecorationsClassName)\n\t\t\t: null;\n\t\tthis.lineNumberClassName = options.lineNumberClassName\n\t\t\t? cleanClassName(options.lineNumberClassName)\n\t\t\t: null;\n\t\tthis.linesDecorationsTooltip = options.linesDecorationsTooltip\n\t\t\t? strings.htmlAttributeEncodeValue(options.linesDecorationsTooltip)\n\t\t\t: null;\n\t\tthis.firstLineDecorationClassName = options.firstLineDecorationClassName\n\t\t\t? cleanClassName(options.firstLineDecorationClassName)\n\t\t\t: null;\n\t\tthis.marginClassName = options.marginClassName\n\t\t\t? cleanClassName(options.marginClassName)\n\t\t\t: null;\n\t\tthis.inlineClassName = options.inlineClassName\n\t\t\t? cleanClassName(options.inlineClassName)\n\t\t\t: null;\n\t\tthis.inlineClassNameAffectsLetterSpacing =\n\t\t\toptions.inlineClassNameAffectsLetterSpacing || false;\n\t\tthis.beforeContentClassName = options.beforeContentClassName\n\t\t\t? cleanClassName(options.beforeContentClassName)\n\t\t\t: null;\n\t\tthis.afterContentClassName = options.afterContentClassName\n\t\t\t? cleanClassName(options.afterContentClassName)\n\t\t\t: null;\n\t\tthis.after = options.after\n\t\t\t? ModelDecorationInjectedTextOptions.from(options.after)\n\t\t\t: null;\n\t\tthis.before = options.before\n\t\t\t? ModelDecorationInjectedTextOptions.from(options.before)\n\t\t\t: null;\n\t\tthis.hideInCommentTokens = options.hideInCommentTokens ?? false;\n\t\tthis.hideInStringTokens = options.hideInStringTokens ?? false;\n\t}\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({\n\tdescription: \"empty\",\n});\n\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n\tModelDecorationOptions.register({\n\t\tdescription: \"tracked-range-always-grows-when-typing-at-edges\",\n\t\tstickiness: model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t}),\n\tModelDecorationOptions.register({\n\t\tdescription: \"tracked-range-never-grows-when-typing-at-edges\",\n\t\tstickiness: model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t}),\n\tModelDecorationOptions.register({\n\t\tdescription: \"tracked-range-grows-only-when-typing-before\",\n\t\tstickiness: model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore,\n\t}),\n\tModelDecorationOptions.register({\n\t\tdescription: \"tracked-range-grows-only-when-typing-after\",\n\t\tstickiness: model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter,\n\t}),\n];\n\nfunction _normalizeOptions(\n\toptions: model.IModelDecorationOptions,\n): ModelDecorationOptions {\n\tif (options instanceof ModelDecorationOptions) {\n\t\treturn options;\n\t}\n\treturn ModelDecorationOptions.createDynamic(options);\n}\n\nclass DidChangeDecorationsEmitter extends Disposable {\n\tprivate readonly _actual: Emitter<IModelDecorationsChangedEvent> =\n\t\tthis._register(new Emitter<IModelDecorationsChangedEvent>());\n\tpublic readonly event: Event<IModelDecorationsChangedEvent> =\n\t\tthis._actual.event;\n\n\tprivate _deferredCnt: number;\n\tprivate _shouldFireDeferred: boolean;\n\tprivate _affectsMinimap: boolean;\n\tprivate _affectsOverviewRuler: boolean;\n\tprivate _affectedInjectedTextLines: Set<number> | null = null;\n\tprivate _affectsGlyphMargin: boolean;\n\tprivate _affectsLineNumber: boolean;\n\n\tconstructor(\n\t\tprivate readonly handleBeforeFire: (\n\t\t\taffectedInjectedTextLines: Set<number> | null,\n\t\t) => void,\n\t) {\n\t\tsuper();\n\t\tthis._deferredCnt = 0;\n\t\tthis._shouldFireDeferred = false;\n\t\tthis._affectsMinimap = false;\n\t\tthis._affectsOverviewRuler = false;\n\t\tthis._affectsGlyphMargin = false;\n\t\tthis._affectsLineNumber = false;\n\t}\n\n\thasListeners(): boolean {\n\t\treturn this._actual.hasListeners();\n\t}\n\n\tpublic beginDeferredEmit(): void {\n\t\tthis._deferredCnt++;\n\t}\n\n\tpublic endDeferredEmit(): void {\n\t\tthis._deferredCnt--;\n\t\tif (this._deferredCnt === 0) {\n\t\t\tif (this._shouldFireDeferred) {\n\t\t\t\tthis.doFire();\n\t\t\t}\n\n\t\t\tthis._affectedInjectedTextLines?.clear();\n\t\t\tthis._affectedInjectedTextLines = null;\n\t\t}\n\t}\n\n\tpublic recordLineAffectedByInjectedText(lineNumber: number): void {\n\t\tif (!this._affectedInjectedTextLines) {\n\t\t\tthis._affectedInjectedTextLines = new Set();\n\t\t}\n\t\tthis._affectedInjectedTextLines.add(lineNumber);\n\t}\n\n\tpublic checkAffectedAndFire(options: ModelDecorationOptions): void {\n\t\tthis._affectsMinimap ||= !!options.minimap?.position;\n\t\tthis._affectsOverviewRuler ||= !!options.overviewRuler?.color;\n\t\tthis._affectsGlyphMargin ||= !!options.glyphMarginClassName;\n\t\tthis._affectsLineNumber ||= !!options.lineNumberClassName;\n\t\tthis.tryFire();\n\t}\n\n\tpublic fire(): void {\n\t\tthis._affectsMinimap = true;\n\t\tthis._affectsOverviewRuler = true;\n\t\tthis._affectsGlyphMargin = true;\n\t\tthis.tryFire();\n\t}\n\n\tprivate tryFire() {\n\t\tif (this._deferredCnt === 0) {\n\t\t\tthis.doFire();\n\t\t} else {\n\t\t\tthis._shouldFireDeferred = true;\n\t\t}\n\t}\n\n\tprivate doFire() {\n\t\tthis.handleBeforeFire(this._affectedInjectedTextLines);\n\n\t\tconst event: IModelDecorationsChangedEvent = {\n\t\t\taffectsMinimap: this._affectsMinimap,\n\t\t\taffectsOverviewRuler: this._affectsOverviewRuler,\n\t\t\taffectsGlyphMargin: this._affectsGlyphMargin,\n\t\t\taffectsLineNumber: this._affectsLineNumber,\n\t\t};\n\t\tthis._shouldFireDeferred = false;\n\t\tthis._affectsMinimap = false;\n\t\tthis._affectsOverviewRuler = false;\n\t\tthis._affectsGlyphMargin = false;\n\t\tthis._actual.fire(event);\n\t}\n}\n\n//#endregion\n\nclass DidChangeContentEmitter extends Disposable {\n\t/**\n\t * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n\t */\n\tprivate readonly _fastEmitter: Emitter<InternalModelContentChangeEvent> =\n\t\tthis._register(new Emitter<InternalModelContentChangeEvent>());\n\tpublic readonly fastEvent: Event<InternalModelContentChangeEvent> =\n\t\tthis._fastEmitter.event;\n\tprivate readonly _slowEmitter: Emitter<InternalModelContentChangeEvent> =\n\t\tthis._register(new Emitter<InternalModelContentChangeEvent>());\n\tpublic readonly slowEvent: Event<InternalModelContentChangeEvent> =\n\t\tthis._slowEmitter.event;\n\n\tprivate _deferredCnt: number;\n\tprivate _deferredEvent: InternalModelContentChangeEvent | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._deferredCnt = 0;\n\t\tthis._deferredEvent = null;\n\t}\n\n\tpublic hasListeners(): boolean {\n\t\treturn (\n\t\t\tthis._fastEmitter.hasListeners() || this._slowEmitter.hasListeners()\n\t\t);\n\t}\n\n\tpublic beginDeferredEmit(): void {\n\t\tthis._deferredCnt++;\n\t}\n\n\tpublic endDeferredEmit(\n\t\tresultingSelection: Selection[] | null = null,\n\t): void {\n\t\tthis._deferredCnt--;\n\t\tif (this._deferredCnt === 0) {\n\t\t\tif (this._deferredEvent !== null) {\n\t\t\t\tthis._deferredEvent.rawContentChangedEvent.resultingSelection =\n\t\t\t\t\tresultingSelection;\n\t\t\t\tconst e = this._deferredEvent;\n\t\t\t\tthis._deferredEvent = null;\n\t\t\t\tthis._fastEmitter.fire(e);\n\t\t\t\tthis._slowEmitter.fire(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic fire(e: InternalModelContentChangeEvent): void {\n\t\tif (this._deferredCnt > 0) {\n\t\t\tif (this._deferredEvent) {\n\t\t\t\tthis._deferredEvent = this._deferredEvent.merge(e);\n\t\t\t} else {\n\t\t\t\tthis._deferredEvent = e;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._fastEmitter.fire(e);\n\t\tthis._slowEmitter.fire(e);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["StringOffsetValidationType", "injectedTextInEditedRangeQueue", "i"]
}
