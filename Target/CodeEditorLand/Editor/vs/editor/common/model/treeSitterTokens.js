import"../../../../vs/editor/common/core/position.js";import{StandardTokenType as o}from"../../../../vs/editor/common/encodedTokenAttributes.js";import{TreeSitterTokenizationRegistry as a}from"../../../../vs/editor/common/languages.js";import"../../../../vs/editor/common/model/textModel.js";import{AbstractTokens as s}from"../../../../vs/editor/common/model/tokens.js";import"../../../../vs/editor/common/services/treeSitterParserService.js";import"../../../../vs/editor/common/textModelEvents.js";import{LineTokens as n}from"../../../../vs/editor/common/tokens/lineTokens.js";class z extends s{constructor(e,t,i,r){super(t,i,r);this._treeSitterService=e;this._initialize()}_tokenizationSupport=null;_lastLanguageId;_initialize(){const e=this.getLanguageId();(!this._tokenizationSupport||this._lastLanguageId!==e)&&(this._lastLanguageId=e,this._tokenizationSupport=a.get(e))}getLineTokens(e){const t=this._textModel.getLineContent(e);if(this._tokenizationSupport){const i=this._tokenizationSupport.tokenizeEncoded(e,this._textModel);if(i)return new n(i,t,this._languageIdCodec)}return n.createEmpty(t,this._languageIdCodec)}resetTokenization(e=!0){e&&this._onDidChangeTokens.fire({semanticTokensApplied:!1,ranges:[{fromLineNumber:1,toLineNumber:this._textModel.getLineCount()}]}),this._initialize()}handleDidChangeAttached(){}handleDidChangeContent(e){e.isFlush&&this.resetTokenization(!1)}forceTokenization(e){}hasAccurateTokensForLine(e){return!0}isCheapToTokenize(e){return!0}getTokenTypeIfInsertingCharacter(e,t,i){return o.Other}tokenizeLineWithEdit(e,t,i){return null}get hasTokens(){return this._treeSitterService.getParseResult(this._textModel)!==void 0}}export{z as TreeSitterTokens};
