{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/fixedArray.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { arrayInsert } from \"../../../base/common/arrays.js\";\n\n/**\n * An array that avoids being sparse by always\n * filling up unused indices with a default value.\n */\nexport class FixedArray<T> {\n\tprivate _store: T[] = [];\n\n\tconstructor(private readonly _default: T) {}\n\n\tpublic get(index: number): T {\n\t\tif (index < this._store.length) {\n\t\t\treturn this._store[index];\n\t\t}\n\t\treturn this._default;\n\t}\n\n\tpublic set(index: number, value: T): void {\n\t\twhile (index >= this._store.length) {\n\t\t\tthis._store[this._store.length] = this._default;\n\t\t}\n\t\tthis._store[index] = value;\n\t}\n\n\tpublic replace(index: number, oldLength: number, newLength: number): void {\n\t\tif (index >= this._store.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (oldLength === 0) {\n\t\t\tthis.insert(index, newLength);\n\t\t\treturn;\n\t\t} else if (newLength === 0) {\n\t\t\tthis.delete(index, oldLength);\n\t\t\treturn;\n\t\t}\n\n\t\tconst before = this._store.slice(0, index);\n\t\tconst after = this._store.slice(index + oldLength);\n\t\tconst insertArr = arrayFill(newLength, this._default);\n\t\tthis._store = before.concat(insertArr, after);\n\t}\n\n\tpublic delete(deleteIndex: number, deleteCount: number): void {\n\t\tif (deleteCount === 0 || deleteIndex >= this._store.length) {\n\t\t\treturn;\n\t\t}\n\t\tthis._store.splice(deleteIndex, deleteCount);\n\t}\n\n\tpublic insert(insertIndex: number, insertCount: number): void {\n\t\tif (insertCount === 0 || insertIndex >= this._store.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst arr: T[] = [];\n\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\tarr[i] = this._default;\n\t\t}\n\t\tthis._store = arrayInsert(this._store, insertIndex, arr);\n\t}\n}\n\nfunction arrayFill<T>(length: number, value: T): T[] {\n\tconst arr: T[] = [];\n\tfor (let i = 0; i < length; i++) {\n\t\tarr[i] = value;\n\t}\n\treturn arr;\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAMrB,MAAM,WAAc;AAAA,EAG1B,YAA6B,UAAa;AAAb;AAAA,EAAc;AAAA,EAd5C,OAW2B;AAAA;AAAA;AAAA,EAClB,SAAc,CAAC;AAAA,EAIhB,IAAI,OAAkB;AAC5B,QAAI,QAAQ,KAAK,OAAO,QAAQ;AAC/B,aAAO,KAAK,OAAO,KAAK;AAAA,IACzB;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,IAAI,OAAe,OAAgB;AACzC,WAAO,SAAS,KAAK,OAAO,QAAQ;AACnC,WAAK,OAAO,KAAK,OAAO,MAAM,IAAI,KAAK;AAAA,IACxC;AACA,SAAK,OAAO,KAAK,IAAI;AAAA,EACtB;AAAA,EAEO,QAAQ,OAAe,WAAmB,WAAyB;AACzE,QAAI,SAAS,KAAK,OAAO,QAAQ;AAChC;AAAA,IACD;AAEA,QAAI,cAAc,GAAG;AACpB,WAAK,OAAO,OAAO,SAAS;AAC5B;AAAA,IACD,WAAW,cAAc,GAAG;AAC3B,WAAK,OAAO,OAAO,SAAS;AAC5B;AAAA,IACD;AAEA,UAAM,SAAS,KAAK,OAAO,MAAM,GAAG,KAAK;AACzC,UAAM,QAAQ,KAAK,OAAO,MAAM,QAAQ,SAAS;AACjD,UAAM,YAAY,UAAU,WAAW,KAAK,QAAQ;AACpD,SAAK,SAAS,OAAO,OAAO,WAAW,KAAK;AAAA,EAC7C;AAAA,EAEO,OAAO,aAAqB,aAA2B;AAC7D,QAAI,gBAAgB,KAAK,eAAe,KAAK,OAAO,QAAQ;AAC3D;AAAA,IACD;AACA,SAAK,OAAO,OAAO,aAAa,WAAW;AAAA,EAC5C;AAAA,EAEO,OAAO,aAAqB,aAA2B;AAC7D,QAAI,gBAAgB,KAAK,eAAe,KAAK,OAAO,QAAQ;AAC3D;AAAA,IACD;AACA,UAAM,MAAW,CAAC;AAClB,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACrC,UAAI,CAAC,IAAI,KAAK;AAAA,IACf;AACA,SAAK,SAAS,YAAY,KAAK,QAAQ,aAAa,GAAG;AAAA,EACxD;AACD;AAEA,SAAS,UAAa,QAAgB,OAAe;AACpD,QAAM,MAAW,CAAC;AAClB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,QAAI,CAAC,IAAI;AAAA,EACV;AACA,SAAO;AACR;AANS;",
  "names": []
}
