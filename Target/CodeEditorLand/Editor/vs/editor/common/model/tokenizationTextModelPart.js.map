{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/model/tokenizationTextModelPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { DisposableMap, DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IWordAtPosition, getWordAtText } from '../core/wordHelper.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { IBackgroundTokenizationStore, IBackgroundTokenizer, ILanguageIdCodec, IState, ITokenizationSupport, TokenizationRegistry, TreeSitterTokenizationRegistry } from '../languages.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService, LanguageConfigurationServiceChangeEvent, ResolvedLanguageConfiguration } from '../languages/languageConfigurationRegistry.js';\nimport { IAttachedView } from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { TextModel } from './textModel.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { DefaultBackgroundTokenizer, TokenizerWithStateStoreAndTextModel, TrackingTokenizationStateStore } from './textModelTokens.js';\nimport { AbstractTokens, AttachedViewHandler, AttachedViews } from './tokens.js';\nimport { TreeSitterTokens } from './treeSitterTokens.js';\nimport { ITreeSitterParserService } from '../services/treeSitterParserService.js';\nimport { IModelContentChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelTokensChangedEvent } from '../textModelEvents.js';\nimport { BackgroundTokenizationState, ITokenizationTextModelPart, ITokenizeLineWithEditResult, LineEditWithAdditionalLines } from '../tokenizationTextModelPart.js';\nimport { ContiguousMultilineTokens } from '../tokens/contiguousMultilineTokens.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { ContiguousTokensStore } from '../tokens/contiguousTokensStore.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { SparseMultilineTokens } from '../tokens/sparseMultilineTokens.js';\nimport { SparseTokensStore } from '../tokens/sparseTokensStore.js';\n\nexport class TokenizationTextModelPart extends TextModelPart implements ITokenizationTextModelPart {\n\tprivate readonly _semanticTokens: SparseTokensStore = new SparseTokensStore(this._languageService.languageIdCodec);\n\n\tprivate readonly _onDidChangeLanguage: Emitter<IModelLanguageChangedEvent> = this._register(new Emitter<IModelLanguageChangedEvent>());\n\tpublic readonly onDidChangeLanguage: Event<IModelLanguageChangedEvent> = this._onDidChangeLanguage.event;\n\n\tprivate readonly _onDidChangeLanguageConfiguration: Emitter<IModelLanguageConfigurationChangedEvent> = this._register(new Emitter<IModelLanguageConfigurationChangedEvent>());\n\tpublic readonly onDidChangeLanguageConfiguration: Event<IModelLanguageConfigurationChangedEvent> = this._onDidChangeLanguageConfiguration.event;\n\n\tprivate readonly _onDidChangeTokens: Emitter<IModelTokensChangedEvent> = this._register(new Emitter<IModelTokensChangedEvent>());\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tprivate _tokens!: AbstractTokens;\n\tprivate readonly _tokensDisposables: DisposableStore = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tprivate readonly _textModel: TextModel,\n\t\tprivate readonly _bracketPairsTextModelPart: BracketPairsTextModelPart,\n\t\tprivate _languageId: string,\n\t\tprivate readonly _attachedViews: AttachedViews,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@ITreeSitterParserService private readonly _treeSitterService: ITreeSitterParserService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._languageConfigurationService.onDidChange(e => {\n\t\t\tif (e.affects(this._languageId)) {\n\t\t\t\tthis._onDidChangeLanguageConfiguration.fire({});\n\t\t\t}\n\t\t}));\n\n\t\t// We just look at registry changes to determine whether to use tree sitter.\n\t\t// This means that removing a language from the setting will not cause a switch to textmate and will require a reload.\n\t\t// Adding a language to the setting will not need a reload, however.\n\t\tthis._register(Event.filter(TreeSitterTokenizationRegistry.onDidChange, (e) => e.changedLanguages.includes(this._languageId))(() => {\n\t\t\tthis.createPreferredTokenProvider();\n\t\t}));\n\t\tthis.createPreferredTokenProvider();\n\t}\n\n\tprivate createGrammarTokens() {\n\t\treturn this._register(new GrammarTokens(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));\n\t}\n\n\tprivate createTreeSitterTokens(): AbstractTokens {\n\t\treturn this._register(new TreeSitterTokens(this._treeSitterService, this._languageService.languageIdCodec, this._textModel, () => this._languageId));\n\t}\n\n\tprivate createTokens(useTreeSitter: boolean): void {\n\t\tconst needsReset = this._tokens !== undefined;\n\t\tthis._tokens?.dispose();\n\t\tthis._tokens = useTreeSitter ? this.createTreeSitterTokens() : this.createGrammarTokens();\n\t\tthis._tokensDisposables.clear();\n\t\tthis._tokensDisposables.add(this._tokens.onDidChangeTokens(e => {\n\t\t\tthis._emitModelTokensChangedEvent(e);\n\t\t}));\n\n\t\tthis._tokensDisposables.add(this._tokens.onDidChangeBackgroundTokenizationState(e => {\n\t\t\tthis._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n\t\t}));\n\t\tif (needsReset) {\n\t\t\t// We need to reset the tokenization, as the new token provider otherwise won't have a chance to provide tokens until some action happens in the editor.\n\t\t\tthis._tokens.resetTokenization();\n\t\t}\n\t}\n\n\tprivate createPreferredTokenProvider() {\n\t\tif (TreeSitterTokenizationRegistry.get(this._languageId)) {\n\t\t\tif (!(this._tokens instanceof TreeSitterTokens)) {\n\t\t\t\tthis.createTokens(true);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!(this._tokens instanceof GrammarTokens)) {\n\t\t\t\tthis.createTokens(false);\n\t\t\t}\n\t\t}\n\t}\n\n\t_hasListeners(): boolean {\n\t\treturn (this._onDidChangeLanguage.hasListeners()\n\t\t\t|| this._onDidChangeLanguageConfiguration.hasListeners()\n\t\t\t|| this._onDidChangeTokens.hasListeners());\n\t}\n\n\tpublic handleLanguageConfigurationServiceChange(e: LanguageConfigurationServiceChangeEvent): void {\n\t\tif (e.affects(this._languageId)) {\n\t\t\tthis._onDidChangeLanguageConfiguration.fire({});\n\t\t}\n\t}\n\n\tpublic handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\tthis._semanticTokens.flush();\n\t\t} else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n\t\t\tfor (const c of e.changes) {\n\t\t\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(c.text);\n\n\t\t\t\tthis._semanticTokens.acceptEdit(\n\t\t\t\t\tc.range,\n\t\t\t\t\teolCount,\n\t\t\t\t\tfirstLineLength,\n\t\t\t\t\tlastLineLength,\n\t\t\t\t\tc.text.length > 0 ? c.text.charCodeAt(0) : CharCode.Null\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._tokens.handleDidChangeContent(e);\n\t}\n\n\tpublic handleDidChangeAttached(): void {\n\t\tthis._tokens.handleDidChangeAttached();\n\t}\n\n\t/**\n\t * Includes grammar and semantic tokens.\n\t */\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tthis.validateLineNumber(lineNumber);\n\t\tconst syntacticTokens = this._tokens.getLineTokens(lineNumber);\n\t\treturn this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n\t}\n\n\tprivate _emitModelTokensChangedEvent(e: IModelTokensChangedEvent): void {\n\t\tif (!this._textModel._isDisposing()) {\n\t\t\tthis._bracketPairsTextModelPart.handleDidChangeTokens(e);\n\t\t\tthis._onDidChangeTokens.fire(e);\n\t\t}\n\t}\n\n\t// #region Grammar Tokens\n\n\tprivate validateLineNumber(lineNumber: number): void {\n\t\tif (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t}\n\n\tpublic get hasTokens(): boolean {\n\t\treturn this._tokens.hasTokens;\n\t}\n\n\tpublic resetTokenization() {\n\t\tthis._tokens.resetTokenization();\n\t}\n\n\tpublic get backgroundTokenizationState() {\n\t\treturn this._tokens.backgroundTokenizationState;\n\t}\n\n\tpublic forceTokenization(lineNumber: number): void {\n\t\tthis.validateLineNumber(lineNumber);\n\t\tthis._tokens.forceTokenization(lineNumber);\n\t}\n\n\tpublic hasAccurateTokensForLine(lineNumber: number): boolean {\n\t\tthis.validateLineNumber(lineNumber);\n\t\treturn this._tokens.hasAccurateTokensForLine(lineNumber);\n\t}\n\n\tpublic isCheapToTokenize(lineNumber: number): boolean {\n\t\tthis.validateLineNumber(lineNumber);\n\t\treturn this._tokens.isCheapToTokenize(lineNumber);\n\t}\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tthis.validateLineNumber(lineNumber);\n\t\tthis._tokens.tokenizeIfCheap(lineNumber);\n\t}\n\n\tpublic getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\treturn this._tokens.getTokenTypeIfInsertingCharacter(lineNumber, column, character);\n\t}\n\n\tpublic tokenizeLineWithEdit(lineNumber: number, edit: LineEditWithAdditionalLines): ITokenizeLineWithEditResult {\n\t\treturn this._tokens.tokenizeLineWithEdit(lineNumber, edit);\n\t}\n\n\t// #endregion\n\n\t// #region Semantic Tokens\n\n\tpublic setSemanticTokens(tokens: SparseMultilineTokens[] | null, isComplete: boolean): void {\n\t\tthis._semanticTokens.set(tokens, isComplete);\n\n\t\tthis._emitModelTokensChangedEvent({\n\t\t\tsemanticTokensApplied: tokens !== null,\n\t\t\tranges: [{ fromLineNumber: 1, toLineNumber: this._textModel.getLineCount() }],\n\t\t});\n\t}\n\n\tpublic hasCompleteSemanticTokens(): boolean {\n\t\treturn this._semanticTokens.isComplete();\n\t}\n\n\tpublic hasSomeSemanticTokens(): boolean {\n\t\treturn !this._semanticTokens.isEmpty();\n\t}\n\n\tpublic setPartialSemanticTokens(range: Range, tokens: SparseMultilineTokens[]): void {\n\t\tif (this.hasCompleteSemanticTokens()) {\n\t\t\treturn;\n\t\t}\n\t\tconst changedRange = this._textModel.validateRange(\n\t\t\tthis._semanticTokens.setPartial(range, tokens)\n\t\t);\n\n\t\tthis._emitModelTokensChangedEvent({\n\t\t\tsemanticTokensApplied: true,\n\t\t\tranges: [\n\t\t\t\t{\n\t\t\t\t\tfromLineNumber: changedRange.startLineNumber,\n\t\t\t\t\ttoLineNumber: changedRange.endLineNumber,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t// #endregion\n\n\t// #region Utility Methods\n\n\tpublic getWordAtPosition(_position: IPosition): IWordAtPosition | null {\n\t\tthis.assertNotDisposed();\n\n\t\tconst position = this._textModel.validatePosition(_position);\n\t\tconst lineContent = this._textModel.getLineContent(position.lineNumber);\n\t\tconst lineTokens = this.getLineTokens(position.lineNumber);\n\t\tconst tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\n\t\t// (1). First try checking right biased word\n\t\tconst [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n\t\tconst rightBiasedWord = getWordAtText(\n\t\t\tposition.column,\n\t\t\tthis.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(),\n\t\t\tlineContent.substring(rbStartOffset, rbEndOffset),\n\t\t\trbStartOffset\n\t\t);\n\t\t// Make sure the result touches the original passed in position\n\t\tif (\n\t\t\trightBiasedWord &&\n\t\t\trightBiasedWord.startColumn <= _position.column &&\n\t\t\t_position.column <= rightBiasedWord.endColumn\n\t\t) {\n\t\t\treturn rightBiasedWord;\n\t\t}\n\n\t\t// (2). Else, if we were at a language boundary, check the left biased word\n\t\tif (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n\t\t\t// edge case, where `position` sits between two tokens belonging to two different languages\n\t\t\tconst [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(\n\t\t\t\tlineTokens,\n\t\t\t\ttokenIndex - 1\n\t\t\t);\n\t\t\tconst leftBiasedWord = getWordAtText(\n\t\t\t\tposition.column,\n\t\t\t\tthis.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(),\n\t\t\t\tlineContent.substring(lbStartOffset, lbEndOffset),\n\t\t\t\tlbStartOffset\n\t\t\t);\n\t\t\t// Make sure the result touches the original passed in position\n\t\t\tif (\n\t\t\t\tleftBiasedWord &&\n\t\t\t\tleftBiasedWord.startColumn <= _position.column &&\n\t\t\t\t_position.column <= leftBiasedWord.endColumn\n\t\t\t) {\n\t\t\t\treturn leftBiasedWord;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getLanguageConfiguration(languageId: string): ResolvedLanguageConfiguration {\n\t\treturn this._languageConfigurationService.getLanguageConfiguration(languageId);\n\t}\n\n\tprivate static _findLanguageBoundaries(lineTokens: LineTokens, tokenIndex: number): [number, number] {\n\t\tconst languageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t// go left until a different language is hit\n\t\tlet startOffset = 0;\n\t\tfor (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n\t\t\tstartOffset = lineTokens.getStartOffset(i);\n\t\t}\n\n\t\t// go right until a different language is hit\n\t\tlet endOffset = lineTokens.getLineContent().length;\n\t\tfor (\n\t\t\tlet i = tokenIndex, tokenCount = lineTokens.getCount();\n\t\t\ti < tokenCount && lineTokens.getLanguageId(i) === languageId;\n\t\t\ti++\n\t\t) {\n\t\t\tendOffset = lineTokens.getEndOffset(i);\n\t\t}\n\n\t\treturn [startOffset, endOffset];\n\t}\n\n\tpublic getWordUntilPosition(position: IPosition): IWordAtPosition {\n\t\tconst wordAtPosition = this.getWordAtPosition(position);\n\t\tif (!wordAtPosition) {\n\t\t\treturn { word: '', startColumn: position.column, endColumn: position.column, };\n\t\t}\n\t\treturn {\n\t\t\tword: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n\t\t\tstartColumn: wordAtPosition.startColumn,\n\t\t\tendColumn: position.column,\n\t\t};\n\t}\n\n\t// #endregion\n\n\t// #region Language Id handling\n\n\tpublic getLanguageId(): string {\n\t\treturn this._languageId;\n\t}\n\n\tpublic getLanguageIdAtPosition(lineNumber: number, column: number): string {\n\t\tconst position = this._textModel.validatePosition(new Position(lineNumber, column));\n\t\tconst lineTokens = this.getLineTokens(position.lineNumber);\n\t\treturn lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n\t}\n\n\tpublic setLanguageId(languageId: string, source: string = 'api'): void {\n\t\tif (this._languageId === languageId) {\n\t\t\t// There's nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst e: IModelLanguageChangedEvent = {\n\t\t\toldLanguage: this._languageId,\n\t\t\tnewLanguage: languageId,\n\t\t\tsource\n\t\t};\n\n\t\tthis._languageId = languageId;\n\n\t\tthis._bracketPairsTextModelPart.handleDidChangeLanguage(e);\n\t\tthis._tokens.resetTokenization();\n\t\tthis.createPreferredTokenProvider();\n\t\tthis._onDidChangeLanguage.fire(e);\n\t\tthis._onDidChangeLanguageConfiguration.fire({});\n\t}\n\n\t// #endregion\n}\n\nclass GrammarTokens extends AbstractTokens {\n\tprivate _tokenizer: TokenizerWithStateStoreAndTextModel | null = null;\n\tprivate _defaultBackgroundTokenizer: DefaultBackgroundTokenizer | null = null;\n\tprivate readonly _backgroundTokenizer = this._register(new MutableDisposable<IBackgroundTokenizer>());\n\n\tprivate readonly _tokens = new ContiguousTokensStore(this._languageIdCodec);\n\tprivate _debugBackgroundTokens: ContiguousTokensStore | undefined;\n\tprivate _debugBackgroundStates: TrackingTokenizationStateStore<IState> | undefined;\n\n\tprivate readonly _debugBackgroundTokenizer = this._register(new MutableDisposable<IBackgroundTokenizer>());\n\n\tprivate readonly _attachedViewStates = this._register(new DisposableMap<IAttachedView, AttachedViewHandler>());\n\n\tconstructor(\n\t\tlanguageIdCodec: ILanguageIdCodec,\n\t\ttextModel: TextModel,\n\t\tgetLanguageId: () => string,\n\t\tattachedViews: AttachedViews,\n\t) {\n\t\tsuper(languageIdCodec, textModel, getLanguageId);\n\n\t\tthis._register(TokenizationRegistry.onDidChange((e) => {\n\t\t\tconst languageId = this.getLanguageId();\n\t\t\tif (e.changedLanguages.indexOf(languageId) === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.resetTokenization();\n\t\t}));\n\n\t\tthis.resetTokenization();\n\n\t\tthis._register(attachedViews.onDidChangeVisibleRanges(({ view, state }) => {\n\t\t\tif (state) {\n\t\t\t\tlet existing = this._attachedViewStates.get(view);\n\t\t\t\tif (!existing) {\n\t\t\t\t\texisting = new AttachedViewHandler(() => this.refreshRanges(existing!.lineRanges));\n\t\t\t\t\tthis._attachedViewStates.set(view, existing);\n\t\t\t\t}\n\t\t\t\texisting.handleStateChange(state);\n\t\t\t} else {\n\t\t\t\tthis._attachedViewStates.deleteAndDispose(view);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic resetTokenization(fireTokenChangeEvent: boolean = true): void {\n\t\tthis._tokens.flush();\n\t\tthis._debugBackgroundTokens?.flush();\n\t\tif (this._debugBackgroundStates) {\n\t\t\tthis._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n\t\t}\n\t\tif (fireTokenChangeEvent) {\n\t\t\tthis._onDidChangeTokens.fire({\n\t\t\t\tsemanticTokensApplied: false,\n\t\t\t\tranges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfromLineNumber: 1,\n\t\t\t\t\t\ttoLineNumber: this._textModel.getLineCount(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\tconst initializeTokenization = (): [ITokenizationSupport, IState] | [null, null] => {\n\t\t\tif (this._textModel.isTooLargeForTokenization()) {\n\t\t\t\treturn [null, null];\n\t\t\t}\n\t\t\tconst tokenizationSupport = TokenizationRegistry.get(this.getLanguageId());\n\t\t\tif (!tokenizationSupport) {\n\t\t\t\treturn [null, null];\n\t\t\t}\n\t\t\tlet initialState: IState;\n\t\t\ttry {\n\t\t\t\tinitialState = tokenizationSupport.getInitialState();\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedError(e);\n\t\t\t\treturn [null, null];\n\t\t\t}\n\t\t\treturn [tokenizationSupport, initialState];\n\t\t};\n\n\t\tconst [tokenizationSupport, initialState] = initializeTokenization();\n\t\tif (tokenizationSupport && initialState) {\n\t\t\tthis._tokenizer = new TokenizerWithStateStoreAndTextModel(this._textModel.getLineCount(), tokenizationSupport, this._textModel, this._languageIdCodec);\n\t\t} else {\n\t\t\tthis._tokenizer = null;\n\t\t}\n\n\t\tthis._backgroundTokenizer.clear();\n\n\t\tthis._defaultBackgroundTokenizer = null;\n\t\tif (this._tokenizer) {\n\t\t\tconst b: IBackgroundTokenizationStore = {\n\t\t\t\tsetTokens: (tokens) => {\n\t\t\t\t\tthis.setTokens(tokens);\n\t\t\t\t},\n\t\t\t\tbackgroundTokenizationFinished: () => {\n\t\t\t\t\tif (this._backgroundTokenizationState === BackgroundTokenizationState.Completed) {\n\t\t\t\t\t\t// We already did a full tokenization and don't go back to progressing.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst newState = BackgroundTokenizationState.Completed;\n\t\t\t\t\tthis._backgroundTokenizationState = newState;\n\t\t\t\t\tthis._onDidChangeBackgroundTokenizationState.fire();\n\t\t\t\t},\n\t\t\t\tsetEndState: (lineNumber, state) => {\n\t\t\t\t\tif (!this._tokenizer) { return; }\n\t\t\t\t\tconst firstInvalidEndStateLineNumber = this._tokenizer.store.getFirstInvalidEndStateLineNumber();\n\t\t\t\t\t// Don't accept states for definitely valid states, the renderer is ahead of the worker!\n\t\t\t\t\tif (firstInvalidEndStateLineNumber !== null && lineNumber >= firstInvalidEndStateLineNumber) {\n\t\t\t\t\t\tthis._tokenizer?.store.setEndState(lineNumber, state);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer && !tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) {\n\t\t\t\tthis._backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n\t\t\t}\n\t\t\tif (!this._backgroundTokenizer.value && !this._textModel.isTooLargeForTokenization()) {\n\t\t\t\tthis._backgroundTokenizer.value = this._defaultBackgroundTokenizer =\n\t\t\t\t\tnew DefaultBackgroundTokenizer(this._tokenizer, b);\n\t\t\t\tthis._defaultBackgroundTokenizer.handleChanges();\n\t\t\t}\n\n\t\t\tif (tokenizationSupport?.backgroundTokenizerShouldOnlyVerifyTokens && tokenizationSupport.createBackgroundTokenizer) {\n\t\t\t\tthis._debugBackgroundTokens = new ContiguousTokensStore(this._languageIdCodec);\n\t\t\t\tthis._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n\t\t\t\tthis._debugBackgroundTokenizer.clear();\n\t\t\t\tthis._debugBackgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, {\n\t\t\t\t\tsetTokens: (tokens) => {\n\t\t\t\t\t\tthis._debugBackgroundTokens?.setMultilineTokens(tokens, this._textModel);\n\t\t\t\t\t},\n\t\t\t\t\tbackgroundTokenizationFinished() {\n\t\t\t\t\t\t// NO OP\n\t\t\t\t\t},\n\t\t\t\t\tsetEndState: (lineNumber, state) => {\n\t\t\t\t\t\tthis._debugBackgroundStates?.setEndState(lineNumber, state);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._debugBackgroundTokens = undefined;\n\t\t\t\tthis._debugBackgroundStates = undefined;\n\t\t\t\tthis._debugBackgroundTokenizer.value = undefined;\n\t\t\t}\n\t\t}\n\n\t\tthis.refreshAllVisibleLineTokens();\n\t}\n\n\tpublic handleDidChangeAttached() {\n\t\tthis._defaultBackgroundTokenizer?.handleChanges();\n\t}\n\n\tpublic handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\t// Don't fire the event, as the view might not have got the text change event yet\n\t\t\tthis.resetTokenization(false);\n\t\t} else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n\t\t\tfor (const c of e.changes) {\n\t\t\t\tconst [eolCount, firstLineLength] = countEOL(c.text);\n\n\t\t\t\tthis._tokens.acceptEdit(c.range, eolCount, firstLineLength);\n\t\t\t\tthis._debugBackgroundTokens?.acceptEdit(c.range, eolCount, firstLineLength);\n\t\t\t}\n\t\t\tthis._debugBackgroundStates?.acceptChanges(e.changes);\n\n\t\t\tif (this._tokenizer) {\n\t\t\t\tthis._tokenizer.store.acceptChanges(e.changes);\n\t\t\t}\n\t\t\tthis._defaultBackgroundTokenizer?.handleChanges();\n\t\t}\n\t}\n\n\tprivate setTokens(tokens: ContiguousMultilineTokens[]): { changes: { fromLineNumber: number; toLineNumber: number }[] } {\n\t\tconst { changes } = this._tokens.setMultilineTokens(tokens, this._textModel);\n\n\t\tif (changes.length > 0) {\n\t\t\tthis._onDidChangeTokens.fire({ semanticTokensApplied: false, ranges: changes, });\n\t\t}\n\n\t\treturn { changes: changes };\n\t}\n\n\tprivate refreshAllVisibleLineTokens(): void {\n\t\tconst ranges = LineRange.joinMany([...this._attachedViewStates].map(([_, s]) => s.lineRanges));\n\t\tthis.refreshRanges(ranges);\n\t}\n\n\tprivate refreshRanges(ranges: readonly LineRange[]): void {\n\t\tfor (const range of ranges) {\n\t\t\tthis.refreshRange(range.startLineNumber, range.endLineNumberExclusive - 1);\n\t\t}\n\t}\n\n\tprivate refreshRange(startLineNumber: number, endLineNumber: number): void {\n\t\tif (!this._tokenizer) {\n\t\t\treturn;\n\t\t}\n\n\t\tstartLineNumber = Math.max(1, Math.min(this._textModel.getLineCount(), startLineNumber));\n\t\tendLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n\n\t\tconst builder = new ContiguousMultilineTokensBuilder();\n\t\tconst { heuristicTokens } = this._tokenizer.tokenizeHeuristically(builder, startLineNumber, endLineNumber);\n\t\tconst changedTokens = this.setTokens(builder.finalize());\n\n\t\tif (heuristicTokens) {\n\t\t\t// We overrode tokens with heuristically computed ones.\n\t\t\t// Because old states might get reused (thus stopping invalidation),\n\t\t\t// we have to explicitly request the tokens for the changed ranges again.\n\t\t\tfor (const c of changedTokens.changes) {\n\t\t\t\tthis._backgroundTokenizer.value?.requestTokens(c.fromLineNumber, c.toLineNumber + 1);\n\t\t\t}\n\t\t}\n\n\t\tthis._defaultBackgroundTokenizer?.checkFinished();\n\t}\n\n\tpublic forceTokenization(lineNumber: number): void {\n\t\tconst builder = new ContiguousMultilineTokensBuilder();\n\t\tthis._tokenizer?.updateTokensUntilLine(builder, lineNumber);\n\t\tthis.setTokens(builder.finalize());\n\t\tthis._defaultBackgroundTokenizer?.checkFinished();\n\t}\n\n\tpublic hasAccurateTokensForLine(lineNumber: number): boolean {\n\t\tif (!this._tokenizer) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._tokenizer.hasAccurateTokensForLine(lineNumber);\n\t}\n\n\tpublic isCheapToTokenize(lineNumber: number): boolean {\n\t\tif (!this._tokenizer) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._tokenizer.isCheapToTokenize(lineNumber);\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tconst lineText = this._textModel.getLineContent(lineNumber);\n\t\tconst result = this._tokens.getTokens(\n\t\t\tthis._textModel.getLanguageId(),\n\t\t\tlineNumber - 1,\n\t\t\tlineText\n\t\t);\n\t\tif (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer) {\n\t\t\tif (this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > lineNumber && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > lineNumber) {\n\t\t\t\tconst backgroundResult = this._debugBackgroundTokens.getTokens(\n\t\t\t\t\tthis._textModel.getLanguageId(),\n\t\t\t\t\tlineNumber - 1,\n\t\t\t\t\tlineText\n\t\t\t\t);\n\t\t\t\tif (!result.equals(backgroundResult) && this._debugBackgroundTokenizer.value?.reportMismatchingTokens) {\n\t\t\t\t\tthis._debugBackgroundTokenizer.value.reportMismatchingTokens(lineNumber);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\tif (!this._tokenizer) {\n\t\t\treturn StandardTokenType.Other;\n\t\t}\n\n\t\tconst position = this._textModel.validatePosition(new Position(lineNumber, column));\n\t\tthis.forceTokenization(position.lineNumber);\n\t\treturn this._tokenizer.getTokenTypeIfInsertingCharacter(position, character);\n\t}\n\n\tpublic tokenizeLineWithEdit(lineNumber: number, edit: LineEditWithAdditionalLines): ITokenizeLineWithEditResult {\n\t\tif (!this._tokenizer) {\n\t\t\treturn { mainLineTokens: null, additionalLines: null };\n\t\t}\n\t\tthis.forceTokenization(lineNumber);\n\t\treturn this._tokenizer.tokenizeLineWithEdit(lineNumber, edit);\n\t}\n\n\tpublic get hasTokens(): boolean {\n\t\treturn this._tokens.hasTokens;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["tokenizationSupport", "initialState"]
}
