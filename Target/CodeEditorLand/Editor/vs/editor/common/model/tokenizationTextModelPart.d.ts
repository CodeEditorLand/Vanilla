import { Event } from "vs/base/common/event";
import { IPosition } from "vs/editor/common/core/position";
import { Range } from "vs/editor/common/core/range";
import { IWordAtPosition } from "vs/editor/common/core/wordHelper";
import { StandardTokenType } from "vs/editor/common/encodedTokenAttributes";
import { ILanguageService } from "vs/editor/common/languages/language";
import { ILanguageConfigurationService, LanguageConfigurationServiceChangeEvent } from "vs/editor/common/languages/languageConfigurationRegistry";
import { BracketPairsTextModelPart } from "vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl";
import { TextModel } from "vs/editor/common/model/textModel";
import { TextModelPart } from "vs/editor/common/model/textModelPart";
import { AttachedViews } from "vs/editor/common/model/tokens";
import { ITreeSitterParserService } from "vs/editor/common/services/treeSitterParserService";
import { IModelContentChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelTokensChangedEvent } from "vs/editor/common/textModelEvents";
import { ITokenizationTextModelPart } from "vs/editor/common/tokenizationTextModelPart";
import { LineTokens } from "vs/editor/common/tokens/lineTokens";
import { SparseMultilineTokens } from "vs/editor/common/tokens/sparseMultilineTokens";
export declare class TokenizationTextModelPart extends TextModelPart implements ITokenizationTextModelPart {
    private readonly _textModel;
    private readonly _bracketPairsTextModelPart;
    private _languageId;
    private readonly _attachedViews;
    private readonly _languageService;
    private readonly _languageConfigurationService;
    private readonly _treeSitterService;
    private readonly _semanticTokens;
    private readonly _onDidChangeLanguage;
    readonly onDidChangeLanguage: Event<IModelLanguageChangedEvent>;
    private readonly _onDidChangeLanguageConfiguration;
    readonly onDidChangeLanguageConfiguration: Event<IModelLanguageConfigurationChangedEvent>;
    private readonly _onDidChangeTokens;
    readonly onDidChangeTokens: Event<IModelTokensChangedEvent>;
    private _tokens;
    private readonly _tokensDisposables;
    constructor(_textModel: TextModel, _bracketPairsTextModelPart: BracketPairsTextModelPart, _languageId: string, _attachedViews: AttachedViews, _languageService: ILanguageService, _languageConfigurationService: ILanguageConfigurationService, _treeSitterService: ITreeSitterParserService);
    private createGrammarTokens;
    private createTreeSitterTokens;
    private createTokens;
    private createPreferredTokenProvider;
    _hasListeners(): boolean;
    handleLanguageConfigurationServiceChange(e: LanguageConfigurationServiceChangeEvent): void;
    handleDidChangeContent(e: IModelContentChangedEvent): void;
    handleDidChangeAttached(): void;
    /**
     * Includes grammar and semantic tokens.
     */
    getLineTokens(lineNumber: number): LineTokens;
    private _emitModelTokensChangedEvent;
    private validateLineNumber;
    get hasTokens(): boolean;
    resetTokenization(): void;
    get backgroundTokenizationState(): any;
    forceTokenization(lineNumber: number): void;
    hasAccurateTokensForLine(lineNumber: number): boolean;
    isCheapToTokenize(lineNumber: number): boolean;
    tokenizeIfCheap(lineNumber: number): void;
    getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;
    tokenizeLineWithEdit(position: IPosition, length: number, newText: string): LineTokens | null;
    setSemanticTokens(tokens: SparseMultilineTokens[] | null, isComplete: boolean): void;
    hasCompleteSemanticTokens(): boolean;
    hasSomeSemanticTokens(): boolean;
    setPartialSemanticTokens(range: Range, tokens: SparseMultilineTokens[]): void;
    getWordAtPosition(_position: IPosition): IWordAtPosition | null;
    private getLanguageConfiguration;
    private static _findLanguageBoundaries;
    getWordUntilPosition(position: IPosition): IWordAtPosition;
    getLanguageId(): string;
    getLanguageIdAtPosition(lineNumber: number, column: number): string;
    setLanguageId(languageId: string, source?: string): void;
}
