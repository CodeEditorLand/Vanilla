import{Position as a}from"../../../../vs/editor/common/core/position.js";class t{startLineNumber;startColumn;endLineNumber;endColumn;constructor(e,n,u,r){e>u||e===u&&n>r?(this.startLineNumber=u,this.startColumn=r,this.endLineNumber=e,this.endColumn=n):(this.startLineNumber=e,this.startColumn=n,this.endLineNumber=u,this.endColumn=r)}isEmpty(){return t.isEmpty(this)}static isEmpty(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn}containsPosition(e){return t.containsPosition(this,e)}static containsPosition(e,n){return!(n.lineNumber<e.startLineNumber||n.lineNumber>e.endLineNumber||n.lineNumber===e.startLineNumber&&n.column<e.startColumn||n.lineNumber===e.endLineNumber&&n.column>e.endColumn)}static strictContainsPosition(e,n){return!(n.lineNumber<e.startLineNumber||n.lineNumber>e.endLineNumber||n.lineNumber===e.startLineNumber&&n.column<=e.startColumn||n.lineNumber===e.endLineNumber&&n.column>=e.endColumn)}containsRange(e){return t.containsRange(this,e)}static containsRange(e,n){return!(n.startLineNumber<e.startLineNumber||n.endLineNumber<e.startLineNumber||n.startLineNumber>e.endLineNumber||n.endLineNumber>e.endLineNumber||n.startLineNumber===e.startLineNumber&&n.startColumn<e.startColumn||n.endLineNumber===e.endLineNumber&&n.endColumn>e.endColumn)}strictContainsRange(e){return t.strictContainsRange(this,e)}static strictContainsRange(e,n){return!(n.startLineNumber<e.startLineNumber||n.endLineNumber<e.startLineNumber||n.startLineNumber>e.endLineNumber||n.endLineNumber>e.endLineNumber||n.startLineNumber===e.startLineNumber&&n.startColumn<=e.startColumn||n.endLineNumber===e.endLineNumber&&n.endColumn>=e.endColumn)}plusRange(e){return t.plusRange(this,e)}static plusRange(e,n){let u,r,i,s;return n.startLineNumber<e.startLineNumber?(u=n.startLineNumber,r=n.startColumn):n.startLineNumber===e.startLineNumber?(u=n.startLineNumber,r=Math.min(n.startColumn,e.startColumn)):(u=e.startLineNumber,r=e.startColumn),n.endLineNumber>e.endLineNumber?(i=n.endLineNumber,s=n.endColumn):n.endLineNumber===e.endLineNumber?(i=n.endLineNumber,s=Math.max(n.endColumn,e.endColumn)):(i=e.endLineNumber,s=e.endColumn),new t(u,r,i,s)}intersectRanges(e){return t.intersectRanges(this,e)}static intersectRanges(e,n){let u=e.startLineNumber,r=e.startColumn,i=e.endLineNumber,s=e.endColumn;const l=n.startLineNumber,o=n.startColumn,m=n.endLineNumber,b=n.endColumn;return u<l?(u=l,r=o):u===l&&(r=Math.max(r,o)),i>m?(i=m,s=b):i===m&&(s=Math.min(s,b)),u>i||u===i&&r>s?null:new t(u,r,i,s)}equalsRange(e){return t.equalsRange(this,e)}static equalsRange(e,n){return!e&&!n?!0:!!e&&!!n&&e.startLineNumber===n.startLineNumber&&e.startColumn===n.startColumn&&e.endLineNumber===n.endLineNumber&&e.endColumn===n.endColumn}getEndPosition(){return t.getEndPosition(this)}static getEndPosition(e){return new a(e.endLineNumber,e.endColumn)}getStartPosition(){return t.getStartPosition(this)}static getStartPosition(e){return new a(e.startLineNumber,e.startColumn)}toString(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"}setEndPosition(e,n){return new t(this.startLineNumber,this.startColumn,e,n)}setStartPosition(e,n){return new t(e,n,this.endLineNumber,this.endColumn)}collapseToStart(){return t.collapseToStart(this)}static collapseToStart(e){return new t(e.startLineNumber,e.startColumn,e.startLineNumber,e.startColumn)}collapseToEnd(){return t.collapseToEnd(this)}static collapseToEnd(e){return new t(e.endLineNumber,e.endColumn,e.endLineNumber,e.endColumn)}delta(e){return new t(this.startLineNumber+e,this.startColumn,this.endLineNumber+e,this.endColumn)}static fromPositions(e,n=e){return new t(e.lineNumber,e.column,n.lineNumber,n.column)}static lift(e){return e?new t(e.startLineNumber,e.startColumn,e.endLineNumber,e.endColumn):null}static isIRange(e){return e&&typeof e.startLineNumber=="number"&&typeof e.startColumn=="number"&&typeof e.endLineNumber=="number"&&typeof e.endColumn=="number"}static areIntersectingOrTouching(e,n){return!(e.endLineNumber<n.startLineNumber||e.endLineNumber===n.startLineNumber&&e.endColumn<n.startColumn||n.endLineNumber<e.startLineNumber||n.endLineNumber===e.startLineNumber&&n.endColumn<e.startColumn)}static areIntersecting(e,n){return!(e.endLineNumber<n.startLineNumber||e.endLineNumber===n.startLineNumber&&e.endColumn<=n.startColumn||n.endLineNumber<e.startLineNumber||n.endLineNumber===e.startLineNumber&&n.endColumn<=e.startColumn)}static compareRangesUsingStarts(e,n){if(e&&n){const i=e.startLineNumber|0,s=n.startLineNumber|0;if(i===s){const l=e.startColumn|0,o=n.startColumn|0;if(l===o){const m=e.endLineNumber|0,b=n.endLineNumber|0;if(m===b){const d=e.endColumn|0,N=n.endColumn|0;return d-N}return m-b}return l-o}return i-s}return(e?1:0)-(n?1:0)}static compareRangesUsingEnds(e,n){return e.endLineNumber===n.endLineNumber?e.endColumn===n.endColumn?e.startLineNumber===n.startLineNumber?e.startColumn-n.startColumn:e.startLineNumber-n.startLineNumber:e.endColumn-n.endColumn:e.endLineNumber-n.endLineNumber}static spansMultipleLines(e){return e.endLineNumber>e.startLineNumber}toJSON(){return this}}export{t as Range};
