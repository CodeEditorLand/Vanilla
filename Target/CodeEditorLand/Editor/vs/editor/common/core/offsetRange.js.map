{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/offsetRange.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../base/common/errors.js';\n\nexport interface IOffsetRange {\n\treadonly start: number;\n\treadonly endExclusive: number;\n}\n\n/**\n * A range of offsets (0-based).\n*/\nexport class OffsetRange implements IOffsetRange {\n\tpublic static addRange(range: OffsetRange, sortedRanges: OffsetRange[]): void {\n\t\tlet i = 0;\n\t\twhile (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\n\t\t\ti++;\n\t\t}\n\t\tlet j = i;\n\t\twhile (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\n\t\t\tj++;\n\t\t}\n\t\tif (i === j) {\n\t\t\tsortedRanges.splice(i, 0, range);\n\t\t} else {\n\t\t\tconst start = Math.min(range.start, sortedRanges[i].start);\n\t\t\tconst end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\n\t\t\tsortedRanges.splice(i, j - i, new OffsetRange(start, end));\n\t\t}\n\t}\n\n\tpublic static tryCreate(start: number, endExclusive: number): OffsetRange | undefined {\n\t\tif (start > endExclusive) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new OffsetRange(start, endExclusive);\n\t}\n\n\tpublic static ofLength(length: number): OffsetRange {\n\t\treturn new OffsetRange(0, length);\n\t}\n\n\tpublic static ofStartAndLength(start: number, length: number): OffsetRange {\n\t\treturn new OffsetRange(start, start + length);\n\t}\n\n\tpublic static emptyAt(offset: number): OffsetRange {\n\t\treturn new OffsetRange(offset, offset);\n\t}\n\n\tconstructor(public readonly start: number, public readonly endExclusive: number) {\n\t\tif (start > endExclusive) {\n\t\t\tthrow new BugIndicatingError(`Invalid range: ${this.toString()}`);\n\t\t}\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.start === this.endExclusive;\n\t}\n\n\tpublic delta(offset: number): OffsetRange {\n\t\treturn new OffsetRange(this.start + offset, this.endExclusive + offset);\n\t}\n\n\tpublic deltaStart(offset: number): OffsetRange {\n\t\treturn new OffsetRange(this.start + offset, this.endExclusive);\n\t}\n\n\tpublic deltaEnd(offset: number): OffsetRange {\n\t\treturn new OffsetRange(this.start, this.endExclusive + offset);\n\t}\n\n\tpublic get length(): number {\n\t\treturn this.endExclusive - this.start;\n\t}\n\n\tpublic toString() {\n\t\treturn `[${this.start}, ${this.endExclusive})`;\n\t}\n\n\tpublic equals(other: OffsetRange): boolean {\n\t\treturn this.start === other.start && this.endExclusive === other.endExclusive;\n\t}\n\n\tpublic containsRange(other: OffsetRange): boolean {\n\t\treturn this.start <= other.start && other.endExclusive <= this.endExclusive;\n\t}\n\n\tpublic contains(offset: number): boolean {\n\t\treturn this.start <= offset && offset < this.endExclusive;\n\t}\n\n\t/**\n\t * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\n\t * The joined range is the smallest range that contains both ranges.\n\t */\n\tpublic join(other: OffsetRange): OffsetRange {\n\t\treturn new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\n\t}\n\n\t/**\n\t * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\n\t *\n\t * The resulting range is empty if the ranges do not intersect, but touch.\n\t * If the ranges don't even touch, the result is undefined.\n\t */\n\tpublic intersect(other: OffsetRange): OffsetRange | undefined {\n\t\tconst start = Math.max(this.start, other.start);\n\t\tconst end = Math.min(this.endExclusive, other.endExclusive);\n\t\tif (start <= end) {\n\t\t\treturn new OffsetRange(start, end);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic intersectionLength(range: OffsetRange): number {\n\t\tconst start = Math.max(this.start, range.start);\n\t\tconst end = Math.min(this.endExclusive, range.endExclusive);\n\t\treturn Math.max(0, end - start);\n\t}\n\n\tpublic intersects(other: OffsetRange): boolean {\n\t\tconst start = Math.max(this.start, other.start);\n\t\tconst end = Math.min(this.endExclusive, other.endExclusive);\n\t\treturn start < end;\n\t}\n\n\tpublic intersectsOrTouches(other: OffsetRange): boolean {\n\t\tconst start = Math.max(this.start, other.start);\n\t\tconst end = Math.min(this.endExclusive, other.endExclusive);\n\t\treturn start <= end;\n\t}\n\n\tpublic isBefore(other: OffsetRange): boolean {\n\t\treturn this.endExclusive <= other.start;\n\t}\n\n\tpublic isAfter(other: OffsetRange): boolean {\n\t\treturn this.start >= other.endExclusive;\n\t}\n\n\tpublic slice<T>(arr: T[]): T[] {\n\t\treturn arr.slice(this.start, this.endExclusive);\n\t}\n\n\tpublic substring(str: string): string {\n\t\treturn str.substring(this.start, this.endExclusive);\n\t}\n\n\t/**\n\t * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.\n\t * The range must not be empty.\n\t */\n\tpublic clip(value: number): number {\n\t\tif (this.isEmpty) {\n\t\t\tthrow new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n\t\t}\n\t\treturn Math.max(this.start, Math.min(this.endExclusive - 1, value));\n\t}\n\n\t/**\n\t * Returns `r := value + k * length` such that `r` is contained in this range.\n\t * The range must not be empty.\n\t *\n\t * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.\n\t */\n\tpublic clipCyclic(value: number): number {\n\t\tif (this.isEmpty) {\n\t\t\tthrow new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n\t\t}\n\t\tif (value < this.start) {\n\t\t\treturn this.endExclusive - ((this.start - value) % this.length);\n\t\t}\n\t\tif (value >= this.endExclusive) {\n\t\t\treturn this.start + ((value - this.start) % this.length);\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic map<T>(f: (offset: number) => T): T[] {\n\t\tconst result: T[] = [];\n\t\tfor (let i = this.start; i < this.endExclusive; i++) {\n\t\t\tresult.push(f(i));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic forEach(f: (offset: number) => void): void {\n\t\tfor (let i = this.start; i < this.endExclusive; i++) {\n\t\t\tf(i);\n\t\t}\n\t}\n}\n\nexport class OffsetRangeSet {\n\tprivate readonly _sortedRanges: OffsetRange[] = [];\n\n\tpublic addRange(range: OffsetRange): void {\n\t\tlet i = 0;\n\t\twhile (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {\n\t\t\ti++;\n\t\t}\n\t\tlet j = i;\n\t\twhile (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {\n\t\t\tj++;\n\t\t}\n\t\tif (i === j) {\n\t\t\tthis._sortedRanges.splice(i, 0, range);\n\t\t} else {\n\t\t\tconst start = Math.min(range.start, this._sortedRanges[i].start);\n\t\t\tconst end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);\n\t\t\tthis._sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n\t\t}\n\t}\n\n\tpublic toString(): string {\n\t\treturn this._sortedRanges.map(r => r.toString()).join(', ');\n\t}\n\n\t/**\n\t * Returns of there is a value that is contained in this instance and the given range.\n\t */\n\tpublic intersectsStrict(other: OffsetRange): boolean {\n\t\t// TODO use binary search\n\t\tlet i = 0;\n\t\twhile (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {\n\t\t\ti++;\n\t\t}\n\t\treturn i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;\n\t}\n\n\tpublic intersectWithRange(other: OffsetRange): OffsetRangeSet {\n\t\t// TODO use binary search + slice\n\t\tconst result = new OffsetRangeSet();\n\t\tfor (const range of this._sortedRanges) {\n\t\t\tconst intersection = range.intersect(other);\n\t\t\tif (intersection) {\n\t\t\t\tresult.addRange(intersection);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic intersectWithRangeLength(other: OffsetRange): number {\n\t\treturn this.intersectWithRange(other).length;\n\t}\n\n\tpublic get length(): number {\n\t\treturn this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
