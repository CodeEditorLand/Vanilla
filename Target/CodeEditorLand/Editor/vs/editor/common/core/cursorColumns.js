import{CharCode as l}from"../../../base/common/charCode.js";import*as b from"../../../base/common/strings.js";class m{static _nextVisibleColumn(e,t,o){return e===l.Tab?m.nextRenderTabStop(t,o):b.isFullWidthCharacter(e)||b.isEmojiImprecise(e)?t+2:t+1}static visibleColumnFromColumn(e,t,o){const u=Math.min(t-1,e.length),n=e.substring(0,u),r=new b.GraphemeIterator(n);let a=0;for(;!r.eol();){const i=b.getNextCodePoint(n,u,r.offset);r.nextGraphemeLength(),a=this._nextVisibleColumn(i,a,o)}return a}static toStatusbarColumn(e,t,o){const u=e.substring(0,Math.min(t-1,e.length)),n=new b.CodePointIterator(u);let r=0;for(;!n.eol();)n.nextCodePoint()===l.Tab?r=m.nextRenderTabStop(r,o):r=r+1;return r+1}static columnFromVisibleColumn(e,t,o){if(t<=0)return 1;const u=e.length,n=new b.GraphemeIterator(e);let r=0,a=1;for(;!n.eol();){const i=b.getNextCodePoint(e,u,n.offset);n.nextGraphemeLength();const s=this._nextVisibleColumn(i,r,o),c=n.offset+1;if(s>=t){const p=t-r;return s-t<p?c:a}r=s,a=c}return u+1}static nextRenderTabStop(e,t){return e+t-e%t}static nextIndentTabStop(e,t){return e+t-e%t}static prevRenderTabStop(e,t){return Math.max(0,e-1-(e-1)%t)}static prevIndentTabStop(e,t){return Math.max(0,e-1-(e-1)%t)}}export{m as CursorColumns};
