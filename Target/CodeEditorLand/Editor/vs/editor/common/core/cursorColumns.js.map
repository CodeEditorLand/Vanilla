{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/cursorColumns.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\n\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n\n\tprivate static _nextVisibleColumn(codePoint: number, visibleColumn: number, tabSize: number): number {\n\t\tif (codePoint === CharCode.Tab) {\n\t\t\treturn CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n\t\t}\n\t\tif (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n\t\t\treturn visibleColumn + 2;\n\t\t}\n\t\treturn visibleColumn + 1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static visibleColumnFromColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tconst textLen = Math.min(column - 1, lineContent.length);\n\t\tconst text = lineContent.substring(0, textLen);\n\t\tconst iterator = new strings.GraphemeIterator(text);\n\n\t\tlet result = 0;\n\t\twhile (!iterator.eol()) {\n\t\t\tconst codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n\t\t\titerator.nextGraphemeLength();\n\n\t\t\tresult = this._nextVisibleColumn(codePoint, result, tabSize);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the value to display as \"Col\" in the status bar.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static toStatusbarColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tconst text = lineContent.substring(0, Math.min(column - 1, lineContent.length));\n\t\tconst iterator = new strings.CodePointIterator(text);\n\n\t\tlet result = 0;\n\t\twhile (!iterator.eol()) {\n\t\t\tconst codePoint = iterator.nextCodePoint();\n\n\t\t\tif (codePoint === CharCode.Tab) {\n\t\t\t\tresult = CursorColumns.nextRenderTabStop(result, tabSize);\n\t\t\t} else {\n\t\t\t\tresult = result + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn result + 1;\n\t}\n\n\t/**\n\t * Returns a column from a visible column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static columnFromVisibleColumn(lineContent: string, visibleColumn: number, tabSize: number): number {\n\t\tif (visibleColumn <= 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst lineContentLength = lineContent.length;\n\t\tconst iterator = new strings.GraphemeIterator(lineContent);\n\n\t\tlet beforeVisibleColumn = 0;\n\t\tlet beforeColumn = 1;\n\t\twhile (!iterator.eol()) {\n\t\t\tconst codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n\t\t\titerator.nextGraphemeLength();\n\n\t\t\tconst afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n\t\t\tconst afterColumn = iterator.offset + 1;\n\n\t\t\tif (afterVisibleColumn >= visibleColumn) {\n\t\t\t\tconst beforeDelta = visibleColumn - beforeVisibleColumn;\n\t\t\t\tconst afterDelta = afterVisibleColumn - visibleColumn;\n\t\t\t\tif (afterDelta < beforeDelta) {\n\t\t\t\t\treturn afterColumn;\n\t\t\t\t} else {\n\t\t\t\t\treturn beforeColumn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbeforeVisibleColumn = afterVisibleColumn;\n\t\t\tbeforeColumn = afterColumn;\n\t\t}\n\n\t\t// walked the entire string\n\t\treturn lineContentLength + 1;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static nextRenderTabStop(visibleColumn: number, tabSize: number): number {\n\t\treturn visibleColumn + tabSize - visibleColumn % tabSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static nextIndentTabStop(visibleColumn: number, indentSize: number): number {\n\t\treturn CursorColumns.nextRenderTabStop(visibleColumn, indentSize);\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static prevRenderTabStop(column: number, tabSize: number): number {\n\t\treturn Math.max(0, column - 1 - (column - 1) % tabSize);\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static prevIndentTabStop(column: number, indentSize: number): number {\n\t\treturn CursorColumns.prevRenderTabStop(column, indentSize);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
