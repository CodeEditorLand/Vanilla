{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/selection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type IPosition, Position } from \"./position.js\";\nimport { Range } from \"./range.js\";\n\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport interface ISelection {\n\t/**\n\t * The line number on which the selection has started.\n\t */\n\treadonly selectionStartLineNumber: number;\n\t/**\n\t * The column on `selectionStartLineNumber` where the selection has started.\n\t */\n\treadonly selectionStartColumn: number;\n\t/**\n\t * The line number on which the selection has ended.\n\t */\n\treadonly positionLineNumber: number;\n\t/**\n\t * The column on `positionLineNumber` where the selection has ended.\n\t */\n\treadonly positionColumn: number;\n}\n\n/**\n * The direction of a selection.\n */\nexport enum SelectionDirection {\n\t/**\n\t * The selection starts above where it ends.\n\t */\n\tLTR = 0,\n\t/**\n\t * The selection starts below where it ends.\n\t */\n\tRTL = 1,\n}\n\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport class Selection extends Range {\n\t/**\n\t * The line number on which the selection has started.\n\t */\n\tpublic readonly selectionStartLineNumber: number;\n\t/**\n\t * The column on `selectionStartLineNumber` where the selection has started.\n\t */\n\tpublic readonly selectionStartColumn: number;\n\t/**\n\t * The line number on which the selection has ended.\n\t */\n\tpublic readonly positionLineNumber: number;\n\t/**\n\t * The column on `positionLineNumber` where the selection has ended.\n\t */\n\tpublic readonly positionColumn: number;\n\n\tconstructor(\n\t\tselectionStartLineNumber: number,\n\t\tselectionStartColumn: number,\n\t\tpositionLineNumber: number,\n\t\tpositionColumn: number,\n\t) {\n\t\tsuper(\n\t\t\tselectionStartLineNumber,\n\t\t\tselectionStartColumn,\n\t\t\tpositionLineNumber,\n\t\t\tpositionColumn,\n\t\t);\n\t\tthis.selectionStartLineNumber = selectionStartLineNumber;\n\t\tthis.selectionStartColumn = selectionStartColumn;\n\t\tthis.positionLineNumber = positionLineNumber;\n\t\tthis.positionColumn = positionColumn;\n\t}\n\n\t/**\n\t * Transform to a human-readable representation.\n\t */\n\tpublic override toString(): string {\n\t\treturn (\n\t\t\t\"[\" +\n\t\t\tthis.selectionStartLineNumber +\n\t\t\t\",\" +\n\t\t\tthis.selectionStartColumn +\n\t\t\t\" -> \" +\n\t\t\tthis.positionLineNumber +\n\t\t\t\",\" +\n\t\t\tthis.positionColumn +\n\t\t\t\"]\"\n\t\t);\n\t}\n\n\t/**\n\t * Test if equals other selection.\n\t */\n\tpublic equalsSelection(other: ISelection): boolean {\n\t\treturn Selection.selectionsEqual(this, other);\n\t}\n\n\t/**\n\t * Test if the two selections are equal.\n\t */\n\tpublic static selectionsEqual(a: ISelection, b: ISelection): boolean {\n\t\treturn (\n\t\t\ta.selectionStartLineNumber === b.selectionStartLineNumber &&\n\t\t\ta.selectionStartColumn === b.selectionStartColumn &&\n\t\t\ta.positionLineNumber === b.positionLineNumber &&\n\t\t\ta.positionColumn === b.positionColumn\n\t\t);\n\t}\n\n\t/**\n\t * Get directions (LTR or RTL).\n\t */\n\tpublic getDirection(): SelectionDirection {\n\t\tif (\n\t\t\tthis.selectionStartLineNumber === this.startLineNumber &&\n\t\t\tthis.selectionStartColumn === this.startColumn\n\t\t) {\n\t\t\treturn SelectionDirection.LTR;\n\t\t}\n\t\treturn SelectionDirection.RTL;\n\t}\n\n\t/**\n\t * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n\t */\n\tpublic override setEndPosition(\n\t\tendLineNumber: number,\n\t\tendColumn: number,\n\t): Selection {\n\t\tif (this.getDirection() === SelectionDirection.LTR) {\n\t\t\treturn new Selection(\n\t\t\t\tthis.startLineNumber,\n\t\t\t\tthis.startColumn,\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn,\n\t\t\t);\n\t\t}\n\t\treturn new Selection(\n\t\t\tendLineNumber,\n\t\t\tendColumn,\n\t\t\tthis.startLineNumber,\n\t\t\tthis.startColumn,\n\t\t);\n\t}\n\n\t/**\n\t * Get the position at `positionLineNumber` and `positionColumn`.\n\t */\n\tpublic getPosition(): Position {\n\t\treturn new Position(this.positionLineNumber, this.positionColumn);\n\t}\n\n\t/**\n\t * Get the position at the start of the selection.\n\t */\n\tpublic getSelectionStart(): Position {\n\t\treturn new Position(\n\t\t\tthis.selectionStartLineNumber,\n\t\t\tthis.selectionStartColumn,\n\t\t);\n\t}\n\n\t/**\n\t * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n\t */\n\tpublic override setStartPosition(\n\t\tstartLineNumber: number,\n\t\tstartColumn: number,\n\t): Selection {\n\t\tif (this.getDirection() === SelectionDirection.LTR) {\n\t\t\treturn new Selection(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tthis.endLineNumber,\n\t\t\t\tthis.endColumn,\n\t\t\t);\n\t\t}\n\t\treturn new Selection(\n\t\t\tthis.endLineNumber,\n\t\t\tthis.endColumn,\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t);\n\t}\n\n\t// ----\n\n\t/**\n\t * Create a `Selection` from one or two positions\n\t */\n\tpublic static override fromPositions(\n\t\tstart: IPosition,\n\t\tend: IPosition = start,\n\t): Selection {\n\t\treturn new Selection(\n\t\t\tstart.lineNumber,\n\t\t\tstart.column,\n\t\t\tend.lineNumber,\n\t\t\tend.column,\n\t\t);\n\t}\n\n\t/**\n\t * Creates a `Selection` from a range, given a direction.\n\t */\n\tpublic static fromRange(\n\t\trange: Range,\n\t\tdirection: SelectionDirection,\n\t): Selection {\n\t\tif (direction === SelectionDirection.LTR) {\n\t\t\treturn new Selection(\n\t\t\t\trange.startLineNumber,\n\t\t\t\trange.startColumn,\n\t\t\t\trange.endLineNumber,\n\t\t\t\trange.endColumn,\n\t\t\t);\n\t\t} else {\n\t\t\treturn new Selection(\n\t\t\t\trange.endLineNumber,\n\t\t\t\trange.endColumn,\n\t\t\t\trange.startLineNumber,\n\t\t\t\trange.startColumn,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Create a `Selection` from an `ISelection`.\n\t */\n\tpublic static liftSelection(sel: ISelection): Selection {\n\t\treturn new Selection(\n\t\t\tsel.selectionStartLineNumber,\n\t\t\tsel.selectionStartColumn,\n\t\t\tsel.positionLineNumber,\n\t\t\tsel.positionColumn,\n\t\t);\n\t}\n\n\t/**\n\t * `a` equals `b`.\n\t */\n\tpublic static selectionsArrEqual(\n\t\ta: ISelection[],\n\t\tb: ISelection[],\n\t): boolean {\n\t\tif ((a && !b) || (!a && b)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = a.length; i < len; i++) {\n\t\t\tif (!this.selectionsEqual(a[i], b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Test if `obj` is an `ISelection`.\n\t */\n\tpublic static isISelection(obj: any): obj is ISelection {\n\t\treturn (\n\t\t\tobj &&\n\t\t\ttypeof obj.selectionStartLineNumber === \"number\" &&\n\t\t\ttypeof obj.selectionStartColumn === \"number\" &&\n\t\t\ttypeof obj.positionLineNumber === \"number\" &&\n\t\t\ttypeof obj.positionColumn === \"number\"\n\t\t);\n\t}\n\n\t/**\n\t * Create with a direction.\n\t */\n\tpublic static createWithDirection(\n\t\tstartLineNumber: number,\n\t\tstartColumn: number,\n\t\tendLineNumber: number,\n\t\tendColumn: number,\n\t\tdirection: SelectionDirection,\n\t): Selection {\n\t\tif (direction === SelectionDirection.LTR) {\n\t\t\treturn new Selection(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn,\n\t\t\t);\n\t\t}\n\n\t\treturn new Selection(\n\t\t\tendLineNumber,\n\t\t\tendColumn,\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SelectionDirection"]
}
