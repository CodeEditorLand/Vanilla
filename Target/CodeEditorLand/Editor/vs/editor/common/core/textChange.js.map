{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/textChange.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as buffer from \"../../../base/common/buffer.js\";\nimport { decodeUTF16LE } from \"./stringBuilder.js\";\n\nfunction escapeNewLine(str: string): string {\n\treturn str.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n}\n\nexport class TextChange {\n\tpublic get oldLength(): number {\n\t\treturn this.oldText.length;\n\t}\n\n\tpublic get oldEnd(): number {\n\t\treturn this.oldPosition + this.oldText.length;\n\t}\n\n\tpublic get newLength(): number {\n\t\treturn this.newText.length;\n\t}\n\n\tpublic get newEnd(): number {\n\t\treturn this.newPosition + this.newText.length;\n\t}\n\n\tconstructor(\n\t\tpublic readonly oldPosition: number,\n\t\tpublic readonly oldText: string,\n\t\tpublic readonly newPosition: number,\n\t\tpublic readonly newText: string,\n\t) {}\n\n\tpublic toString(): string {\n\t\tif (this.oldText.length === 0) {\n\t\t\treturn `(insert@${this.oldPosition} \"${escapeNewLine(this.newText)}\")`;\n\t\t}\n\t\tif (this.newText.length === 0) {\n\t\t\treturn `(delete@${this.oldPosition} \"${escapeNewLine(this.oldText)}\")`;\n\t\t}\n\t\treturn `(replace@${this.oldPosition} \"${escapeNewLine(this.oldText)}\" with \"${escapeNewLine(this.newText)}\")`;\n\t}\n\n\tprivate static _writeStringSize(str: string): number {\n\t\treturn 4 + 2 * str.length;\n\t}\n\n\tprivate static _writeString(\n\t\tb: Uint8Array,\n\t\tstr: string,\n\t\toffset: number,\n\t): number {\n\t\tconst len = str.length;\n\t\tbuffer.writeUInt32BE(b, len, offset);\n\t\toffset += 4;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tbuffer.writeUInt16LE(b, str.charCodeAt(i), offset);\n\t\t\toffset += 2;\n\t\t}\n\t\treturn offset;\n\t}\n\n\tprivate static _readString(b: Uint8Array, offset: number): string {\n\t\tconst len = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\treturn decodeUTF16LE(b, offset, len);\n\t}\n\n\tpublic writeSize(): number {\n\t\treturn (\n\t\t\t+4 + // oldPosition\n\t\t\t4 + // newPosition\n\t\t\tTextChange._writeStringSize(this.oldText) +\n\t\t\tTextChange._writeStringSize(this.newText)\n\t\t);\n\t}\n\n\tpublic write(b: Uint8Array, offset: number): number {\n\t\tbuffer.writeUInt32BE(b, this.oldPosition, offset);\n\t\toffset += 4;\n\t\tbuffer.writeUInt32BE(b, this.newPosition, offset);\n\t\toffset += 4;\n\t\toffset = TextChange._writeString(b, this.oldText, offset);\n\t\toffset = TextChange._writeString(b, this.newText, offset);\n\t\treturn offset;\n\t}\n\n\tpublic static read(\n\t\tb: Uint8Array,\n\t\toffset: number,\n\t\tdest: TextChange[],\n\t): number {\n\t\tconst oldPosition = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\tconst newPosition = buffer.readUInt32BE(b, offset);\n\t\toffset += 4;\n\t\tconst oldText = TextChange._readString(b, offset);\n\t\toffset += TextChange._writeStringSize(oldText);\n\t\tconst newText = TextChange._readString(b, offset);\n\t\toffset += TextChange._writeStringSize(newText);\n\t\tdest.push(new TextChange(oldPosition, oldText, newPosition, newText));\n\t\treturn offset;\n\t}\n}\n\nexport function compressConsecutiveTextChanges(\n\tprevEdits: TextChange[] | null,\n\tcurrEdits: TextChange[],\n): TextChange[] {\n\tif (prevEdits === null || prevEdits.length === 0) {\n\t\treturn currEdits;\n\t}\n\tconst compressor = new TextChangeCompressor(prevEdits, currEdits);\n\treturn compressor.compress();\n}\n\nclass TextChangeCompressor {\n\tprivate _prevEdits: TextChange[];\n\tprivate _currEdits: TextChange[];\n\n\tprivate _result: TextChange[];\n\tprivate _resultLen: number;\n\n\tprivate _prevLen: number;\n\tprivate _prevDeltaOffset: number;\n\n\tprivate _currLen: number;\n\tprivate _currDeltaOffset: number;\n\n\tconstructor(prevEdits: TextChange[], currEdits: TextChange[]) {\n\t\tthis._prevEdits = prevEdits;\n\t\tthis._currEdits = currEdits;\n\n\t\tthis._result = [];\n\t\tthis._resultLen = 0;\n\n\t\tthis._prevLen = this._prevEdits.length;\n\t\tthis._prevDeltaOffset = 0;\n\n\t\tthis._currLen = this._currEdits.length;\n\t\tthis._currDeltaOffset = 0;\n\t}\n\n\tpublic compress(): TextChange[] {\n\t\tlet prevIndex = 0;\n\t\tlet currIndex = 0;\n\n\t\tlet prevEdit = this._getPrev(prevIndex);\n\t\tlet currEdit = this._getCurr(currIndex);\n\n\t\twhile (prevIndex < this._prevLen || currIndex < this._currLen) {\n\t\t\tif (prevEdit === null) {\n\t\t\t\tthis._acceptCurr(currEdit!);\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currEdit === null) {\n\t\t\t\tthis._acceptPrev(prevEdit);\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currEdit.oldEnd <= prevEdit.newPosition) {\n\t\t\t\tthis._acceptCurr(currEdit);\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (prevEdit.newEnd <= currEdit.oldPosition) {\n\t\t\t\tthis._acceptPrev(prevEdit);\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currEdit.oldPosition < prevEdit.newPosition) {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitCurr(\n\t\t\t\t\tcurrEdit,\n\t\t\t\t\tprevEdit.newPosition - currEdit.oldPosition,\n\t\t\t\t);\n\t\t\t\tthis._acceptCurr(e1);\n\t\t\t\tcurrEdit = e2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (prevEdit.newPosition < currEdit.oldPosition) {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitPrev(\n\t\t\t\t\tprevEdit,\n\t\t\t\t\tcurrEdit.oldPosition - prevEdit.newPosition,\n\t\t\t\t);\n\t\t\t\tthis._acceptPrev(e1);\n\t\t\t\tprevEdit = e2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// At this point, currEdit.oldPosition === prevEdit.newPosition\n\n\t\t\tlet mergePrev: TextChange;\n\t\t\tlet mergeCurr: TextChange;\n\n\t\t\tif (currEdit.oldEnd === prevEdit.newEnd) {\n\t\t\t\tmergePrev = prevEdit;\n\t\t\t\tmergeCurr = currEdit;\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t} else if (currEdit.oldEnd < prevEdit.newEnd) {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitPrev(\n\t\t\t\t\tprevEdit,\n\t\t\t\t\tcurrEdit.oldLength,\n\t\t\t\t);\n\t\t\t\tmergePrev = e1;\n\t\t\t\tmergeCurr = currEdit;\n\t\t\t\tprevEdit = e2;\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t} else {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitCurr(\n\t\t\t\t\tcurrEdit,\n\t\t\t\t\tprevEdit.newLength,\n\t\t\t\t);\n\t\t\t\tmergePrev = prevEdit;\n\t\t\t\tmergeCurr = e1;\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcurrEdit = e2;\n\t\t\t}\n\n\t\t\tthis._result[this._resultLen++] = new TextChange(\n\t\t\t\tmergePrev.oldPosition,\n\t\t\t\tmergePrev.oldText,\n\t\t\t\tmergeCurr.newPosition,\n\t\t\t\tmergeCurr.newText,\n\t\t\t);\n\t\t\tthis._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\n\t\t\tthis._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\n\t\t}\n\n\t\tconst merged = TextChangeCompressor._merge(this._result);\n\t\tconst cleaned = TextChangeCompressor._removeNoOps(merged);\n\t\treturn cleaned;\n\t}\n\n\tprivate _acceptCurr(currEdit: TextChange): void {\n\t\tthis._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(\n\t\t\tthis._prevDeltaOffset,\n\t\t\tcurrEdit,\n\t\t);\n\t\tthis._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\n\t}\n\n\tprivate _getCurr(currIndex: number): TextChange | null {\n\t\treturn currIndex < this._currLen ? this._currEdits[currIndex] : null;\n\t}\n\n\tprivate _acceptPrev(prevEdit: TextChange): void {\n\t\tthis._result[this._resultLen++] = TextChangeCompressor._rebasePrev(\n\t\t\tthis._currDeltaOffset,\n\t\t\tprevEdit,\n\t\t);\n\t\tthis._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\n\t}\n\n\tprivate _getPrev(prevIndex: number): TextChange | null {\n\t\treturn prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null;\n\t}\n\n\tprivate static _rebaseCurr(\n\t\tprevDeltaOffset: number,\n\t\tcurrEdit: TextChange,\n\t): TextChange {\n\t\treturn new TextChange(\n\t\t\tcurrEdit.oldPosition - prevDeltaOffset,\n\t\t\tcurrEdit.oldText,\n\t\t\tcurrEdit.newPosition,\n\t\t\tcurrEdit.newText,\n\t\t);\n\t}\n\n\tprivate static _rebasePrev(\n\t\tcurrDeltaOffset: number,\n\t\tprevEdit: TextChange,\n\t): TextChange {\n\t\treturn new TextChange(\n\t\t\tprevEdit.oldPosition,\n\t\t\tprevEdit.oldText,\n\t\t\tprevEdit.newPosition + currDeltaOffset,\n\t\t\tprevEdit.newText,\n\t\t);\n\t}\n\n\tprivate static _splitPrev(\n\t\tedit: TextChange,\n\t\toffset: number,\n\t): [TextChange, TextChange] {\n\t\tconst preText = edit.newText.substr(0, offset);\n\t\tconst postText = edit.newText.substr(offset);\n\n\t\treturn [\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldPosition,\n\t\t\t\tedit.oldText,\n\t\t\t\tedit.newPosition,\n\t\t\t\tpreText,\n\t\t\t),\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldEnd,\n\t\t\t\t\"\",\n\t\t\t\tedit.newPosition + offset,\n\t\t\t\tpostText,\n\t\t\t),\n\t\t];\n\t}\n\n\tprivate static _splitCurr(\n\t\tedit: TextChange,\n\t\toffset: number,\n\t): [TextChange, TextChange] {\n\t\tconst preText = edit.oldText.substr(0, offset);\n\t\tconst postText = edit.oldText.substr(offset);\n\n\t\treturn [\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldPosition,\n\t\t\t\tpreText,\n\t\t\t\tedit.newPosition,\n\t\t\t\tedit.newText,\n\t\t\t),\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldPosition + offset,\n\t\t\t\tpostText,\n\t\t\t\tedit.newEnd,\n\t\t\t\t\"\",\n\t\t\t),\n\t\t];\n\t}\n\n\tprivate static _merge(edits: TextChange[]): TextChange[] {\n\t\tif (edits.length === 0) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tconst result: TextChange[] = [];\n\t\tlet resultLen = 0;\n\n\t\tlet prev = edits[0];\n\t\tfor (let i = 1; i < edits.length; i++) {\n\t\t\tconst curr = edits[i];\n\n\t\t\tif (prev.oldEnd === curr.oldPosition) {\n\t\t\t\t// Merge into `prev`\n\t\t\t\tprev = new TextChange(\n\t\t\t\t\tprev.oldPosition,\n\t\t\t\t\tprev.oldText + curr.oldText,\n\t\t\t\t\tprev.newPosition,\n\t\t\t\t\tprev.newText + curr.newText,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = prev;\n\t\t\t\tprev = curr;\n\t\t\t}\n\t\t}\n\t\tresult[resultLen++] = prev;\n\n\t\treturn result;\n\t}\n\n\tprivate static _removeNoOps(edits: TextChange[]): TextChange[] {\n\t\tif (edits.length === 0) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tconst result: TextChange[] = [];\n\t\tlet resultLen = 0;\n\n\t\tfor (let i = 0; i < edits.length; i++) {\n\t\t\tconst edit = edits[i];\n\n\t\t\tif (edit.oldText === edit.newText) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult[resultLen++] = edit;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
