{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/positionToOffset.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLastIdxMonotonous } from \"../../../base/common/arraysFind.js\";\nimport { OffsetRange } from \"./offsetRange.js\";\nimport { Position } from \"./position.js\";\nimport { Range } from \"./range.js\";\nimport { TextLength } from \"./textLength.js\";\n\nexport class PositionOffsetTransformer {\n\tprivate readonly lineStartOffsetByLineIdx: number[];\n\n\tconstructor(public readonly text: string) {\n\t\tthis.lineStartOffsetByLineIdx = [];\n\t\tthis.lineStartOffsetByLineIdx.push(0);\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text.charAt(i) === \"\\n\") {\n\t\t\t\tthis.lineStartOffsetByLineIdx.push(i + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetOffset(position: Position): number {\n\t\treturn (\n\t\t\tthis.lineStartOffsetByLineIdx[position.lineNumber - 1] +\n\t\t\tposition.column -\n\t\t\t1\n\t\t);\n\t}\n\n\tgetOffsetRange(range: Range): OffsetRange {\n\t\treturn new OffsetRange(\n\t\t\tthis.getOffset(range.getStartPosition()),\n\t\t\tthis.getOffset(range.getEndPosition()),\n\t\t);\n\t}\n\n\tgetPosition(offset: number): Position {\n\t\tconst idx = findLastIdxMonotonous(\n\t\t\tthis.lineStartOffsetByLineIdx,\n\t\t\t(i) => i <= offset,\n\t\t);\n\t\tconst lineNumber = idx + 1;\n\t\tconst column = offset - this.lineStartOffsetByLineIdx[idx] + 1;\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tgetRange(offsetRange: OffsetRange): Range {\n\t\treturn Range.fromPositions(\n\t\t\tthis.getPosition(offsetRange.start),\n\t\t\tthis.getPosition(offsetRange.endExclusive),\n\t\t);\n\t}\n\n\tgetTextLength(offsetRange: OffsetRange): TextLength {\n\t\treturn TextLength.ofRange(this.getRange(offsetRange));\n\t}\n\n\tget textLength(): TextLength {\n\t\tconst lineIdx = this.lineStartOffsetByLineIdx.length - 1;\n\t\treturn new TextLength(\n\t\t\tlineIdx,\n\t\t\tthis.text.length - this.lineStartOffsetByLineIdx[lineIdx],\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAEpB,MAAM,0BAA0B;AAAA,EAGtC,YAA4B,MAAc;AAAd;AAC3B,SAAK,2BAA2B,CAAC;AACjC,SAAK,yBAAyB,KAAK,CAAC;AACpC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,UAAI,KAAK,OAAO,CAAC,MAAM,MAAM;AAC5B,aAAK,yBAAyB,KAAK,IAAI,CAAC;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAAA,EAtBD,OAWuC;AAAA;AAAA;AAAA,EACrB;AAAA,EAYjB,UAAU,UAA4B;AACrC,WACC,KAAK,yBAAyB,SAAS,aAAa,CAAC,IACrD,SAAS,SACT;AAAA,EAEF;AAAA,EAEA,eAAe,OAA2B;AACzC,WAAO,IAAI;AAAA,MACV,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAAA,MACvC,KAAK,UAAU,MAAM,eAAe,CAAC;AAAA,IACtC;AAAA,EACD;AAAA,EAEA,YAAY,QAA0B;AACrC,UAAM,MAAM;AAAA,MACX,KAAK;AAAA,MACL,CAAC,MAAM,KAAK;AAAA,IACb;AACA,UAAM,aAAa,MAAM;AACzB,UAAM,SAAS,SAAS,KAAK,yBAAyB,GAAG,IAAI;AAC7D,WAAO,IAAI,SAAS,YAAY,MAAM;AAAA,EACvC;AAAA,EAEA,SAAS,aAAiC;AACzC,WAAO,MAAM;AAAA,MACZ,KAAK,YAAY,YAAY,KAAK;AAAA,MAClC,KAAK,YAAY,YAAY,YAAY;AAAA,IAC1C;AAAA,EACD;AAAA,EAEA,cAAc,aAAsC;AACnD,WAAO,WAAW,QAAQ,KAAK,SAAS,WAAW,CAAC;AAAA,EACrD;AAAA,EAEA,IAAI,aAAyB;AAC5B,UAAM,UAAU,KAAK,yBAAyB,SAAS;AACvD,WAAO,IAAI;AAAA,MACV;AAAA,MACA,KAAK,KAAK,SAAS,KAAK,yBAAyB,OAAO;AAAA,IACzD;AAAA,EACD;AACD;",
  "names": []
}
