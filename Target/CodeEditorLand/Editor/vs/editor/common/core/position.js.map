{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/position.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A position in the editor. This interface is suitable for serialization.\n */\nexport interface IPosition {\n\t/**\n\t * line number (starts at 1)\n\t */\n\treadonly lineNumber: number;\n\t/**\n\t * column (the first character in a line is between column 1 and column 2)\n\t */\n\treadonly column: number;\n}\n\n/**\n * A position in the editor.\n */\nexport class Position {\n\t/**\n\t * line number (starts at 1)\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * column (the first character in a line is between column 1 and column 2)\n\t */\n\tpublic readonly column: number;\n\n\tconstructor(lineNumber: number, column: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t}\n\n\t/**\n\t * Create a new position from this position.\n\t *\n\t * @param newLineNumber new line number\n\t * @param newColumn new column\n\t */\n\twith(newLineNumber: number = this.lineNumber, newColumn: number = this.column): Position {\n\t\tif (newLineNumber === this.lineNumber && newColumn === this.column) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new Position(newLineNumber, newColumn);\n\t\t}\n\t}\n\n\t/**\n\t * Derive a new position from this position.\n\t *\n\t * @param deltaLineNumber line number delta\n\t * @param deltaColumn column delta\n\t */\n\tdelta(deltaLineNumber: number = 0, deltaColumn: number = 0): Position {\n\t\treturn this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n\t}\n\n\t/**\n\t * Test if this position equals other position\n\t */\n\tpublic equals(other: IPosition): boolean {\n\t\treturn Position.equals(this, other);\n\t}\n\n\t/**\n\t * Test if position `a` equals position `b`\n\t */\n\tpublic static equals(a: IPosition | null, b: IPosition | null): boolean {\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\t!!a &&\n\t\t\t!!b &&\n\t\t\ta.lineNumber === b.lineNumber &&\n\t\t\ta.column === b.column\n\t\t);\n\t}\n\n\t/**\n\t * Test if this position is before other position.\n\t * If the two positions are equal, the result will be false.\n\t */\n\tpublic isBefore(other: IPosition): boolean {\n\t\treturn Position.isBefore(this, other);\n\t}\n\n\t/**\n\t * Test if position `a` is before position `b`.\n\t * If the two positions are equal, the result will be false.\n\t */\n\tpublic static isBefore(a: IPosition, b: IPosition): boolean {\n\t\tif (a.lineNumber < b.lineNumber) {\n\t\t\treturn true;\n\t\t}\n\t\tif (b.lineNumber < a.lineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.column < b.column;\n\t}\n\n\t/**\n\t * Test if this position is before other position.\n\t * If the two positions are equal, the result will be true.\n\t */\n\tpublic isBeforeOrEqual(other: IPosition): boolean {\n\t\treturn Position.isBeforeOrEqual(this, other);\n\t}\n\n\t/**\n\t * Test if position `a` is before position `b`.\n\t * If the two positions are equal, the result will be true.\n\t */\n\tpublic static isBeforeOrEqual(a: IPosition, b: IPosition): boolean {\n\t\tif (a.lineNumber < b.lineNumber) {\n\t\t\treturn true;\n\t\t}\n\t\tif (b.lineNumber < a.lineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.column <= b.column;\n\t}\n\n\t/**\n\t * A function that compares positions, useful for sorting\n\t */\n\tpublic static compare(a: IPosition, b: IPosition): number {\n\t\tconst aLineNumber = a.lineNumber | 0;\n\t\tconst bLineNumber = b.lineNumber | 0;\n\n\t\tif (aLineNumber === bLineNumber) {\n\t\t\tconst aColumn = a.column | 0;\n\t\t\tconst bColumn = b.column | 0;\n\t\t\treturn aColumn - bColumn;\n\t\t}\n\n\t\treturn aLineNumber - bLineNumber;\n\t}\n\n\t/**\n\t * Clone this position.\n\t */\n\tpublic clone(): Position {\n\t\treturn new Position(this.lineNumber, this.column);\n\t}\n\n\t/**\n\t * Convert to a human-readable representation.\n\t */\n\tpublic toString(): string {\n\t\treturn '(' + this.lineNumber + ',' + this.column + ')';\n\t}\n\n\t// ---\n\n\t/**\n\t * Create a `Position` from an `IPosition`.\n\t */\n\tpublic static lift(pos: IPosition): Position {\n\t\treturn new Position(pos.lineNumber, pos.column);\n\t}\n\n\t/**\n\t * Test if `obj` is an `IPosition`.\n\t */\n\tpublic static isIPosition(obj: any): obj is IPosition {\n\t\treturn (\n\t\t\tobj\n\t\t\t&& (typeof obj.lineNumber === 'number')\n\t\t\t&& (typeof obj.column === 'number')\n\t\t);\n\t}\n\n\tpublic toJSON(): IPosition {\n\t\treturn {\n\t\t\tlineNumber: this.lineNumber,\n\t\t\tcolumn: this.column\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
