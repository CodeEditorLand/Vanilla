{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/core/characterClassifier.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toUint8 } from '../../../base/common/uint.js';\n\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nexport class CharacterClassifier<T extends number> {\n\t/**\n\t * Maintain a compact (fully initialized ASCII map for quickly classifying ASCII characters - used more often in code).\n\t */\n\tprotected readonly _asciiMap: Uint8Array;\n\n\t/**\n\t * The entire map (sparse array).\n\t */\n\tprotected readonly _map: Map<number, number>;\n\n\tprotected readonly _defaultValue: number;\n\n\tconstructor(_defaultValue: T) {\n\t\tconst defaultValue = toUint8(_defaultValue);\n\n\t\tthis._defaultValue = defaultValue;\n\t\tthis._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n\t\tthis._map = new Map<number, number>();\n\t}\n\n\tprivate static _createAsciiMap(defaultValue: number): Uint8Array {\n\t\tconst asciiMap = new Uint8Array(256);\n\t\tasciiMap.fill(defaultValue);\n\t\treturn asciiMap;\n\t}\n\n\tpublic set(charCode: number, _value: T): void {\n\t\tconst value = toUint8(_value);\n\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\tthis._asciiMap[charCode] = value;\n\t\t} else {\n\t\t\tthis._map.set(charCode, value);\n\t\t}\n\t}\n\n\tpublic get(charCode: number): T {\n\t\tif (charCode >= 0 && charCode < 256) {\n\t\t\treturn <T>this._asciiMap[charCode];\n\t\t} else {\n\t\t\treturn <T>(this._map.get(charCode) || this._defaultValue);\n\t\t}\n\t}\n\n\tpublic clear() {\n\t\tthis._asciiMap.fill(this._defaultValue);\n\t\tthis._map.clear();\n\t}\n}\n\nconst enum Boolean {\n\tFalse = 0,\n\tTrue = 1\n}\n\nexport class CharacterSet {\n\n\tprivate readonly _actual: CharacterClassifier<Boolean>;\n\n\tconstructor() {\n\t\tthis._actual = new CharacterClassifier<Boolean>(Boolean.False);\n\t}\n\n\tpublic add(charCode: number): void {\n\t\tthis._actual.set(charCode, Boolean.True);\n\t}\n\n\tpublic has(charCode: number): boolean {\n\t\treturn (this._actual.get(charCode) === Boolean.True);\n\t}\n\n\tpublic clear(): void {\n\t\treturn this._actual.clear();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAKjB,MAAM,oBAAsC;AAAA,EAVnD,OAUmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAI/B;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,EAEA;AAAA,EAEnB,YAAY,eAAkB;AAC7B,UAAM,eAAe,QAAQ,aAAa;AAE1C,SAAK,gBAAgB;AACrB,SAAK,YAAY,oBAAoB,gBAAgB,YAAY;AACjE,SAAK,OAAO,oBAAI,IAAoB;AAAA,EACrC;AAAA,EAEA,OAAe,gBAAgB,cAAkC;AAChE,UAAM,WAAW,IAAI,WAAW,GAAG;AACnC,aAAS,KAAK,YAAY;AAC1B,WAAO;AAAA,EACR;AAAA,EAEO,IAAI,UAAkB,QAAiB;AAC7C,UAAM,QAAQ,QAAQ,MAAM;AAE5B,QAAI,YAAY,KAAK,WAAW,KAAK;AACpC,WAAK,UAAU,QAAQ,IAAI;AAAA,IAC5B,OAAO;AACN,WAAK,KAAK,IAAI,UAAU,KAAK;AAAA,IAC9B;AAAA,EACD;AAAA,EAEO,IAAI,UAAqB;AAC/B,QAAI,YAAY,KAAK,WAAW,KAAK;AACpC,aAAU,KAAK,UAAU,QAAQ;AAAA,IAClC,OAAO;AACN,aAAW,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK;AAAA,IAC5C;AAAA,EACD;AAAA,EAEO,QAAQ;AACd,SAAK,UAAU,KAAK,KAAK,aAAa;AACtC,SAAK,KAAK,MAAM;AAAA,EACjB;AACD;AAEA,IAAW,UAAX,kBAAWA,aAAX;AACC,EAAAA,kBAAA,WAAQ,KAAR;AACA,EAAAA,kBAAA,UAAO,KAAP;AAFU,SAAAA;AAAA,GAAA;AAKJ,MAAM,aAAa;AAAA,EAlE1B,OAkE0B;AAAA;AAAA;AAAA,EAER;AAAA,EAEjB,cAAc;AACb,SAAK,UAAU,IAAI,oBAA6B,aAAa;AAAA,EAC9D;AAAA,EAEO,IAAI,UAAwB;AAClC,SAAK,QAAQ,IAAI,UAAU,YAAY;AAAA,EACxC;AAAA,EAEO,IAAI,UAA2B;AACrC,WAAQ,KAAK,QAAQ,IAAI,QAAQ,MAAM;AAAA,EACxC;AAAA,EAEO,QAAc;AACpB,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC3B;AACD;",
  "names": ["Boolean"]
}
