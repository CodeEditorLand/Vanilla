import*as D from"../../../../vs/base/common/arrays.js";import"../../../../vs/base/common/lifecycle.js";import"../../../../vs/editor/common/config/editorOptions.js";import"../../../../vs/editor/common/config/fontInfo.js";import{Position as w}from"../../../../vs/editor/common/core/position.js";import{Range as g}from"../../../../vs/editor/common/core/range.js";import{PositionAffinity as C}from"../../../../vs/editor/common/model.js";import{ConstantTimePrefixSumComputer as A}from"../../../../vs/editor/common/model/prefixSumComputer.js";import{ModelDecorationOptions as _}from"../../../../vs/editor/common/model/textModel.js";import"../../../../vs/editor/common/modelLineProjectionData.js";import{LineInjectedText as T}from"../../../../vs/editor/common/textModelEvents.js";import{IndentGuide as N,IndentGuideHorizontalLine as j}from"../../../../vs/editor/common/textModelGuides.js";import*as P from"../../../../vs/editor/common/viewEvents.js";import{ViewLineData as k}from"../../../../vs/editor/common/viewModel.js";import{createModelLineProjection as v}from"../../../../vs/editor/common/viewModel/modelLineProjection.js";class Le{_editorId;model;_validModelVersionId;_domLineBreaksComputerFactory;_monospaceLineBreaksComputerFactory;fontInfo;tabSize;wrappingColumn;wrappingIndent;wordBreak;wrappingStrategy;modelLineProjections;projectedModelLineLineCounts;hiddenAreasDecorationIds;constructor(e,n,i,t,o,m,u,s,d,r){this._editorId=e,this.model=n,this._validModelVersionId=-1,this._domLineBreaksComputerFactory=i,this._monospaceLineBreaksComputerFactory=t,this.fontInfo=o,this.tabSize=m,this.wrappingStrategy=u,this.wrappingColumn=s,this.wrappingIndent=d,this.wordBreak=r,this._constructLines(!0,null)}dispose(){this.hiddenAreasDecorationIds=this.model.deltaDecorations(this.hiddenAreasDecorationIds,[])}createCoordinatesConverter(){return new B(this)}_constructLines(e,n){this.modelLineProjections=[],e&&(this.hiddenAreasDecorationIds=this.model.deltaDecorations(this.hiddenAreasDecorationIds,[]));const i=this.model.getLinesContent(),t=this.model.getInjectedTextDecorations(this._editorId),o=i.length,m=this.createLineBreaksComputer(),u=new D.ArrayQueue(T.fromDecorations(t));for(let L=0;L<o;L++){const p=u.takeWhile(h=>h.lineNumber===L+1);m.addRequest(i[L],p,n?n[L]:null)}const s=m.finalize(),d=[],r=this.hiddenAreasDecorationIds.map(L=>this.model.getDecorationRange(L)).sort(g.compareRangesUsingStarts);let c=1,l=0,a=-1,b=a+1<r.length?l+1:o+2;for(let L=0;L<o;L++){const p=L+1;p===b&&(a++,c=r[a].startLineNumber,l=r[a].endLineNumber,b=a+1<r.length?l+1:o+2);const h=p>=c&&p<=l,V=v(s[L],!h);d[L]=V.getViewLineCount(),this.modelLineProjections[L]=V}this._validModelVersionId=this.model.getVersionId(),this.projectedModelLineLineCounts=new A(d)}getHiddenAreas(){return this.hiddenAreasDecorationIds.map(e=>this.model.getDecorationRange(e))}setHiddenAreas(e){const n=e.map(l=>this.model.validateRange(l)),i=y(n),t=this.hiddenAreasDecorationIds.map(l=>this.model.getDecorationRange(l)).sort(g.compareRangesUsingStarts);if(i.length===t.length){let l=!1;for(let a=0;a<i.length;a++)if(!i[a].equalsRange(t[a])){l=!0;break}if(!l)return!1}const o=i.map(l=>({range:l,options:_.EMPTY}));this.hiddenAreasDecorationIds=this.model.deltaDecorations(this.hiddenAreasDecorationIds,o);const m=i;let u=1,s=0,d=-1,r=d+1<m.length?s+1:this.modelLineProjections.length+2,c=!1;for(let l=0;l<this.modelLineProjections.length;l++){const a=l+1;a===r&&(d++,u=m[d].startLineNumber,s=m[d].endLineNumber,r=d+1<m.length?s+1:this.modelLineProjections.length+2);let b=!1;if(a>=u&&a<=s?this.modelLineProjections[l].isVisible()&&(this.modelLineProjections[l]=this.modelLineProjections[l].setVisible(!1),b=!0):(c=!0,this.modelLineProjections[l].isVisible()||(this.modelLineProjections[l]=this.modelLineProjections[l].setVisible(!0),b=!0)),b){const L=this.modelLineProjections[l].getViewLineCount();this.projectedModelLineLineCounts.setValue(l,L)}}return c||this.setHiddenAreas([]),!0}modelPositionIsVisible(e,n){return e<1||e>this.modelLineProjections.length?!1:this.modelLineProjections[e-1].isVisible()}getModelLineViewLineCount(e){return e<1||e>this.modelLineProjections.length?1:this.modelLineProjections[e-1].getViewLineCount()}setTabSize(e){return this.tabSize===e?!1:(this.tabSize=e,this._constructLines(!1,null),!0)}setWrappingSettings(e,n,i,t,o){const m=this.fontInfo.equals(e),u=this.wrappingStrategy===n,s=this.wrappingColumn===i,d=this.wrappingIndent===t,r=this.wordBreak===o;if(m&&u&&s&&d&&r)return!1;const c=m&&u&&!s&&d&&r;this.fontInfo=e,this.wrappingStrategy=n,this.wrappingColumn=i,this.wrappingIndent=t,this.wordBreak=o;let l=null;if(c){l=[];for(let a=0,b=this.modelLineProjections.length;a<b;a++)l[a]=this.modelLineProjections[a].getProjectionData()}return this._constructLines(!1,l),!0}createLineBreaksComputer(){return(this.wrappingStrategy==="advanced"?this._domLineBreaksComputerFactory:this._monospaceLineBreaksComputerFactory).createLineBreaksComputer(this.fontInfo,this.tabSize,this.wrappingColumn,this.wrappingIndent,this.wordBreak)}onModelFlushed(){this._constructLines(!0,null)}onModelLinesDeleted(e,n,i){if(!e||e<=this._validModelVersionId)return null;const t=n===1?1:this.projectedModelLineLineCounts.getPrefixSum(n-1)+1,o=this.projectedModelLineLineCounts.getPrefixSum(i);return this.modelLineProjections.splice(n-1,i-n+1),this.projectedModelLineLineCounts.removeValues(n-1,i-n+1),new P.ViewLinesDeletedEvent(t,o)}onModelLinesInserted(e,n,i,t){if(!e||e<=this._validModelVersionId)return null;const o=n>2&&!this.modelLineProjections[n-2].isVisible(),m=n===1?1:this.projectedModelLineLineCounts.getPrefixSum(n-1)+1;let u=0;const s=[],d=[];for(let r=0,c=t.length;r<c;r++){const l=v(t[r],!o);s.push(l);const a=l.getViewLineCount();u+=a,d[r]=a}return this.modelLineProjections=this.modelLineProjections.slice(0,n-1).concat(s).concat(this.modelLineProjections.slice(n-1)),this.projectedModelLineLineCounts.insertValues(n-1,d),new P.ViewLinesInsertedEvent(m,m+u-1)}onModelLineChanged(e,n,i){if(e!==null&&e<=this._validModelVersionId)return[!1,null,null,null];const t=n-1,o=this.modelLineProjections[t].getViewLineCount(),m=this.modelLineProjections[t].isVisible(),u=v(i,m);this.modelLineProjections[t]=u;const s=this.modelLineProjections[t].getViewLineCount();let d=!1,r=0,c=-1,l=0,a=-1,b=0,L=-1;o>s?(r=this.projectedModelLineLineCounts.getPrefixSum(n-1)+1,c=r+s-1,b=c+1,L=b+(o-s)-1,d=!0):o<s?(r=this.projectedModelLineLineCounts.getPrefixSum(n-1)+1,c=r+o-1,l=c+1,a=l+(s-o)-1,d=!0):(r=this.projectedModelLineLineCounts.getPrefixSum(n-1)+1,c=r+s-1),this.projectedModelLineLineCounts.setValue(t,s);const p=r<=c?new P.ViewLinesChangedEvent(r,c-r+1):null,h=l<=a?new P.ViewLinesInsertedEvent(l,a):null,V=b<=L?new P.ViewLinesDeletedEvent(b,L):null;return[d,p,h,V]}acceptVersionId(e){this._validModelVersionId=e,this.modelLineProjections.length===1&&!this.modelLineProjections[0].isVisible()&&this.setHiddenAreas([])}getViewLineCount(){return this.projectedModelLineLineCounts.getTotalSum()}_toValidViewLineNumber(e){if(e<1)return 1;const n=this.getViewLineCount();return e>n?n:e|0}getActiveIndentGuide(e,n,i){e=this._toValidViewLineNumber(e),n=this._toValidViewLineNumber(n),i=this._toValidViewLineNumber(i);const t=this.convertViewPositionToModelPosition(e,this.getViewLineMinColumn(e)),o=this.convertViewPositionToModelPosition(n,this.getViewLineMinColumn(n)),m=this.convertViewPositionToModelPosition(i,this.getViewLineMinColumn(i)),u=this.model.guides.getActiveIndentGuide(t.lineNumber,o.lineNumber,m.lineNumber),s=this.convertModelPositionToViewPosition(u.startLineNumber,1),d=this.convertModelPositionToViewPosition(u.endLineNumber,this.model.getLineMaxColumn(u.endLineNumber));return{startLineNumber:s.lineNumber,endLineNumber:d.lineNumber,indent:u.indent}}getViewLineInfo(e){e=this._toValidViewLineNumber(e);const n=this.projectedModelLineLineCounts.getIndexOf(e-1),i=n.index,t=n.remainder;return new x(i+1,t)}getMinColumnOfViewLine(e){return this.modelLineProjections[e.modelLineNumber-1].getViewLineMinColumn(this.model,e.modelLineNumber,e.modelLineWrappedLineIdx)}getMaxColumnOfViewLine(e){return this.modelLineProjections[e.modelLineNumber-1].getViewLineMaxColumn(this.model,e.modelLineNumber,e.modelLineWrappedLineIdx)}getModelStartPositionOfViewLine(e){const n=this.modelLineProjections[e.modelLineNumber-1],i=n.getViewLineMinColumn(this.model,e.modelLineNumber,e.modelLineWrappedLineIdx),t=n.getModelColumnOfViewPosition(e.modelLineWrappedLineIdx,i);return new w(e.modelLineNumber,t)}getModelEndPositionOfViewLine(e){const n=this.modelLineProjections[e.modelLineNumber-1],i=n.getViewLineMaxColumn(this.model,e.modelLineNumber,e.modelLineWrappedLineIdx),t=n.getModelColumnOfViewPosition(e.modelLineWrappedLineIdx,i);return new w(e.modelLineNumber,t)}getViewLineInfosGroupedByModelRanges(e,n){const i=this.getViewLineInfo(e),t=this.getViewLineInfo(n),o=new Array;let m=this.getModelStartPositionOfViewLine(i),u=new Array;for(let s=i.modelLineNumber;s<=t.modelLineNumber;s++){const d=this.modelLineProjections[s-1];if(d.isVisible()){const r=s===i.modelLineNumber?i.modelLineWrappedLineIdx:0,c=s===t.modelLineNumber?t.modelLineWrappedLineIdx+1:d.getViewLineCount();for(let l=r;l<c;l++)u.push(new x(s,l))}if(!d.isVisible()&&m){const r=new w(s-1,this.model.getLineMaxColumn(s-1)+1),c=g.fromPositions(m,r);o.push(new R(c,u)),u=[],m=null}else d.isVisible()&&!m&&(m=new w(s,1))}if(m){const s=g.fromPositions(m,this.getModelEndPositionOfViewLine(t));o.push(new R(s,u))}return o}getViewLinesBracketGuides(e,n,i,t){const o=i?this.convertViewPositionToModelPosition(i.lineNumber,i.column):null,m=[];for(const u of this.getViewLineInfosGroupedByModelRanges(e,n)){const s=u.modelRange.startLineNumber,d=this.model.guides.getLinesBracketGuides(s,u.modelRange.endLineNumber,o,t);for(const r of u.viewLines){const l=d[r.modelLineNumber-s].map(a=>{if(a.forWrappedLinesAfterColumn!==-1&&this.modelLineProjections[r.modelLineNumber-1].getViewPositionOfModelPosition(0,a.forWrappedLinesAfterColumn).lineNumber>=r.modelLineWrappedLineIdx||a.forWrappedLinesBeforeOrAtColumn!==-1&&this.modelLineProjections[r.modelLineNumber-1].getViewPositionOfModelPosition(0,a.forWrappedLinesBeforeOrAtColumn).lineNumber<r.modelLineWrappedLineIdx)return;if(!a.horizontalLine)return a;let b=-1;if(a.column!==-1){const h=this.modelLineProjections[r.modelLineNumber-1].getViewPositionOfModelPosition(0,a.column);if(h.lineNumber===r.modelLineWrappedLineIdx)b=h.column;else if(h.lineNumber<r.modelLineWrappedLineIdx)b=this.getMinColumnOfViewLine(r);else if(h.lineNumber>r.modelLineWrappedLineIdx)return}const L=this.convertModelPositionToViewPosition(r.modelLineNumber,a.horizontalLine.endColumn),p=this.modelLineProjections[r.modelLineNumber-1].getViewPositionOfModelPosition(0,a.horizontalLine.endColumn);return p.lineNumber===r.modelLineWrappedLineIdx?new N(a.visibleColumn,b,a.className,new j(a.horizontalLine.top,L.column),-1,-1):p.lineNumber<r.modelLineWrappedLineIdx||a.visibleColumn!==-1?void 0:new N(a.visibleColumn,b,a.className,new j(a.horizontalLine.top,this.getMaxColumnOfViewLine(r)),-1,-1)});m.push(l.filter(a=>!!a))}}return m}getViewLinesIndentGuides(e,n){e=this._toValidViewLineNumber(e),n=this._toValidViewLineNumber(n);const i=this.convertViewPositionToModelPosition(e,this.getViewLineMinColumn(e)),t=this.convertViewPositionToModelPosition(n,this.getViewLineMaxColumn(n));let o=[];const m=[],u=[],s=i.lineNumber-1,d=t.lineNumber-1;let r=null;for(let b=s;b<=d;b++){const L=this.modelLineProjections[b];if(L.isVisible()){const p=L.getViewLineNumberOfModelPosition(0,b===s?i.column:1),h=L.getViewLineNumberOfModelPosition(0,this.model.getLineMaxColumn(b+1)),V=h-p+1;let I=0;V>1&&L.getViewLineMinColumn(this.model,b+1,h)===1&&(I=p===0?1:2),m.push(V),u.push(I),r===null&&(r=new w(b+1,0))}else r!==null&&(o=o.concat(this.model.guides.getLinesIndentGuides(r.lineNumber,b)),r=null)}r!==null&&(o=o.concat(this.model.guides.getLinesIndentGuides(r.lineNumber,t.lineNumber)),r=null);const c=n-e+1,l=new Array(c);let a=0;for(let b=0,L=o.length;b<L;b++){let p=o[b];const h=Math.min(c-a,m[b]),V=u[b];let I;V===2?I=0:V===1?I=1:I=h;for(let M=0;M<h;M++)M===I&&(p=0),l[a++]=p}return l}getViewLineContent(e){const n=this.getViewLineInfo(e);return this.modelLineProjections[n.modelLineNumber-1].getViewLineContent(this.model,n.modelLineNumber,n.modelLineWrappedLineIdx)}getViewLineLength(e){const n=this.getViewLineInfo(e);return this.modelLineProjections[n.modelLineNumber-1].getViewLineLength(this.model,n.modelLineNumber,n.modelLineWrappedLineIdx)}getViewLineMinColumn(e){const n=this.getViewLineInfo(e);return this.modelLineProjections[n.modelLineNumber-1].getViewLineMinColumn(this.model,n.modelLineNumber,n.modelLineWrappedLineIdx)}getViewLineMaxColumn(e){const n=this.getViewLineInfo(e);return this.modelLineProjections[n.modelLineNumber-1].getViewLineMaxColumn(this.model,n.modelLineNumber,n.modelLineWrappedLineIdx)}getViewLineData(e){const n=this.getViewLineInfo(e);return this.modelLineProjections[n.modelLineNumber-1].getViewLineData(this.model,n.modelLineNumber,n.modelLineWrappedLineIdx)}getViewLinesData(e,n,i){e=this._toValidViewLineNumber(e),n=this._toValidViewLineNumber(n);const t=this.projectedModelLineLineCounts.getIndexOf(e-1);let o=e;const m=t.index,u=t.remainder,s=[];for(let d=m,r=this.model.getLineCount();d<r;d++){const c=this.modelLineProjections[d];if(!c.isVisible())continue;const l=d===m?u:0;let a=c.getViewLineCount()-l,b=!1;if(o+a>n&&(b=!0,a=n-o+1),c.getViewLinesData(this.model,d+1,l,a,o-e,i,s),o+=a,b)break}return s}validateViewPosition(e,n,i){e=this._toValidViewLineNumber(e);const t=this.projectedModelLineLineCounts.getIndexOf(e-1),o=t.index,m=t.remainder,u=this.modelLineProjections[o],s=u.getViewLineMinColumn(this.model,o+1,m),d=u.getViewLineMaxColumn(this.model,o+1,m);n<s&&(n=s),n>d&&(n=d);const r=u.getModelColumnOfViewPosition(m,n);return this.model.validatePosition(new w(o+1,r)).equals(i)?new w(e,n):this.convertModelPositionToViewPosition(i.lineNumber,i.column)}validateViewRange(e,n){const i=this.validateViewPosition(e.startLineNumber,e.startColumn,n.getStartPosition()),t=this.validateViewPosition(e.endLineNumber,e.endColumn,n.getEndPosition());return new g(i.lineNumber,i.column,t.lineNumber,t.column)}convertViewPositionToModelPosition(e,n){const i=this.getViewLineInfo(e),t=this.modelLineProjections[i.modelLineNumber-1].getModelColumnOfViewPosition(i.modelLineWrappedLineIdx,n);return this.model.validatePosition(new w(i.modelLineNumber,t))}convertViewRangeToModelRange(e){const n=this.convertViewPositionToModelPosition(e.startLineNumber,e.startColumn),i=this.convertViewPositionToModelPosition(e.endLineNumber,e.endColumn);return new g(n.lineNumber,n.column,i.lineNumber,i.column)}convertModelPositionToViewPosition(e,n,i=C.None,t=!1,o=!1){const m=this.model.validatePosition(new w(e,n)),u=m.lineNumber,s=m.column;let d=u-1,r=!1;if(o)for(;d<this.modelLineProjections.length&&!this.modelLineProjections[d].isVisible();)d++,r=!0;else for(;d>0&&!this.modelLineProjections[d].isVisible();)d--,r=!0;if(d===0&&!this.modelLineProjections[d].isVisible())return new w(t?0:1,1);const c=1+this.projectedModelLineLineCounts.getPrefixSum(d);let l;return r?o?l=this.modelLineProjections[d].getViewPositionOfModelPosition(c,1,i):l=this.modelLineProjections[d].getViewPositionOfModelPosition(c,this.model.getLineMaxColumn(d+1),i):l=this.modelLineProjections[u-1].getViewPositionOfModelPosition(c,s,i),l}convertModelRangeToViewRange(e,n=C.Left){if(e.isEmpty()){const i=this.convertModelPositionToViewPosition(e.startLineNumber,e.startColumn,n);return g.fromPositions(i)}else{const i=this.convertModelPositionToViewPosition(e.startLineNumber,e.startColumn,C.Right),t=this.convertModelPositionToViewPosition(e.endLineNumber,e.endColumn,C.Left);return new g(i.lineNumber,i.column,t.lineNumber,t.column)}}getViewLineNumberOfModelPosition(e,n){let i=e-1;if(this.modelLineProjections[i].isVisible()){const o=1+this.projectedModelLineLineCounts.getPrefixSum(i);return this.modelLineProjections[i].getViewLineNumberOfModelPosition(o,n)}for(;i>0&&!this.modelLineProjections[i].isVisible();)i--;if(i===0&&!this.modelLineProjections[i].isVisible())return 1;const t=1+this.projectedModelLineLineCounts.getPrefixSum(i);return this.modelLineProjections[i].getViewLineNumberOfModelPosition(t,this.model.getLineMaxColumn(i+1))}getDecorationsInRange(e,n,i,t,o){const m=this.convertViewPositionToModelPosition(e.startLineNumber,e.startColumn),u=this.convertViewPositionToModelPosition(e.endLineNumber,e.endColumn);if(u.lineNumber-m.lineNumber<=e.endLineNumber-e.startLineNumber)return this.model.getDecorationsInRange(new g(m.lineNumber,1,u.lineNumber,u.column),n,i,t,o);let s=[];const d=m.lineNumber-1,r=u.lineNumber-1;let c=null;for(let L=d;L<=r;L++)if(this.modelLineProjections[L].isVisible())c===null&&(c=new w(L+1,L===d?m.column:1));else if(c!==null){const h=this.model.getLineMaxColumn(L);s=s.concat(this.model.getDecorationsInRange(new g(c.lineNumber,c.column,L,h),n,i,t)),c=null}c!==null&&(s=s.concat(this.model.getDecorationsInRange(new g(c.lineNumber,c.column,u.lineNumber,u.column),n,i,t)),c=null),s.sort((L,p)=>{const h=g.compareRangesUsingStarts(L.range,p.range);return h===0?L.id<p.id?-1:L.id>p.id?1:0:h});const l=[];let a=0,b=null;for(const L of s){const p=L.id;b!==p&&(b=p,l[a++]=L)}return l}getInjectedTextAt(e){const n=this.getViewLineInfo(e.lineNumber);return this.modelLineProjections[n.modelLineNumber-1].getInjectedTextAt(n.modelLineWrappedLineIdx,e.column)}normalizePosition(e,n){const i=this.getViewLineInfo(e.lineNumber);return this.modelLineProjections[i.modelLineNumber-1].normalizePosition(i.modelLineWrappedLineIdx,e,n)}getLineIndentColumn(e){const n=this.getViewLineInfo(e);return n.modelLineWrappedLineIdx===0?this.model.getLineIndentColumn(n.modelLineNumber):0}}function y(f){if(f.length===0)return[];const e=f.slice();e.sort(g.compareRangesUsingStarts);const n=[];let i=e[0].startLineNumber,t=e[0].endLineNumber;for(let o=1,m=e.length;o<m;o++){const u=e[o];u.startLineNumber>t+1?(n.push(new g(i,1,t,1)),i=u.startLineNumber,t=u.endLineNumber):u.endLineNumber>t&&(t=u.endLineNumber)}return n.push(new g(i,1,t,1)),n}class x{constructor(e,n){this.modelLineNumber=e;this.modelLineWrappedLineIdx=n}get isWrappedLineContinuation(){return this.modelLineWrappedLineIdx>0}}class R{constructor(e,n){this.modelRange=e;this.viewLines=n}}class B{_lines;constructor(e){this._lines=e}convertViewPositionToModelPosition(e){return this._lines.convertViewPositionToModelPosition(e.lineNumber,e.column)}convertViewRangeToModelRange(e){return this._lines.convertViewRangeToModelRange(e)}validateViewPosition(e,n){return this._lines.validateViewPosition(e.lineNumber,e.column,n)}validateViewRange(e,n){return this._lines.validateViewRange(e,n)}convertModelPositionToViewPosition(e,n,i,t){return this._lines.convertModelPositionToViewPosition(e.lineNumber,e.column,n,i,t)}convertModelRangeToViewRange(e,n){return this._lines.convertModelRangeToViewRange(e,n)}modelPositionIsVisible(e){return this._lines.modelPositionIsVisible(e.lineNumber,e.column)}getModelLineViewLineCount(e){return this._lines.getModelLineViewLineCount(e)}getViewLineNumberOfModelPosition(e,n){return this._lines.getViewLineNumberOfModelPosition(e,n)}}var E=(i=>(i[i.BlockNone=0]="BlockNone",i[i.BlockSubsequent=1]="BlockSubsequent",i[i.BlockAll=2]="BlockAll",i))(E||{});class be{model;constructor(e){this.model=e}dispose(){}createCoordinatesConverter(){return new S(this)}getHiddenAreas(){return[]}setHiddenAreas(e){return!1}setTabSize(e){return!1}setWrappingSettings(e,n,i,t){return!1}createLineBreaksComputer(){const e=[];return{addRequest:(n,i,t)=>{e.push(null)},finalize:()=>e}}onModelFlushed(){}onModelLinesDeleted(e,n,i){return new P.ViewLinesDeletedEvent(n,i)}onModelLinesInserted(e,n,i,t){return new P.ViewLinesInsertedEvent(n,i)}onModelLineChanged(e,n,i){return[!1,new P.ViewLinesChangedEvent(n,1),null,null]}acceptVersionId(e){}getViewLineCount(){return this.model.getLineCount()}getActiveIndentGuide(e,n,i){return{startLineNumber:e,endLineNumber:e,indent:0}}getViewLinesBracketGuides(e,n,i){return new Array(n-e+1).fill([])}getViewLinesIndentGuides(e,n){const i=n-e+1,t=new Array(i);for(let o=0;o<i;o++)t[o]=0;return t}getViewLineContent(e){return this.model.getLineContent(e)}getViewLineLength(e){return this.model.getLineLength(e)}getViewLineMinColumn(e){return this.model.getLineMinColumn(e)}getViewLineMaxColumn(e){return this.model.getLineMaxColumn(e)}getViewLineData(e){const n=this.model.tokenization.getLineTokens(e),i=n.getLineContent();return new k(i,!1,1,i.length+1,0,n.inflate(),null)}getViewLinesData(e,n,i){const t=this.model.getLineCount();e=Math.min(Math.max(1,e),t),n=Math.min(Math.max(1,n),t);const o=[];for(let m=e;m<=n;m++){const u=m-e;o[u]=i[u]?this.getViewLineData(m):null}return o}getDecorationsInRange(e,n,i,t,o){return this.model.getDecorationsInRange(e,n,i,t,o)}normalizePosition(e,n){return this.model.normalizePosition(e,n)}getLineIndentColumn(e){return this.model.getLineIndentColumn(e)}getInjectedTextAt(e){return null}}class S{_lines;constructor(e){this._lines=e}_validPosition(e){return this._lines.model.validatePosition(e)}_validRange(e){return this._lines.model.validateRange(e)}convertViewPositionToModelPosition(e){return this._validPosition(e)}convertViewRangeToModelRange(e){return this._validRange(e)}validateViewPosition(e,n){return this._validPosition(n)}validateViewRange(e,n){return this._validRange(n)}convertModelPositionToViewPosition(e){return this._validPosition(e)}convertModelRangeToViewRange(e){return this._validRange(e)}modelPositionIsVisible(e){const n=this._lines.model.getLineCount();return!(e.lineNumber<1||e.lineNumber>n)}modelRangeIsVisible(e){const n=this._lines.model.getLineCount();return!(e.startLineNumber<1||e.startLineNumber>n||e.endLineNumber<1||e.endLineNumber>n)}getModelLineViewLineCount(e){return 1}getViewLineNumberOfModelPosition(e,n){return e}}export{be as ViewModelLinesFromModelAsIs,Le as ViewModelLinesFromProjectedModel};
