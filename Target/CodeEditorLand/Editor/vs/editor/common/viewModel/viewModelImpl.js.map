{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewModel/viewModelImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ConfigurationChangedEvent, EditorOption, EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration, CursorState, EditOperationType, IColumnSelectData, PartialCursorState } from '../cursorCommon.js';\nimport { CursorChangeReason } from '../cursorEvents.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { ISelection, Selection } from '../core/selection.js';\nimport { ICommand, ICursorState, IViewState, ScrollType } from '../editorCommon.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { EndOfLinePreference, IAttachedView, ICursorStateComputer, IGlyphMarginLanesModel, IIdentifiedSingleEditOperation, ITextModel, PositionAffinity, TrackedRangeStickiness } from '../model.js';\nimport { IActiveIndentGuideInfo, BracketGuideOptions, IndentGuide } from '../textModelGuides.js';\nimport { ModelDecorationMinimapOptions, ModelDecorationOptions, ModelDecorationOverviewRulerOptions } from '../model/textModel.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { ColorId } from '../encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport { EditorTheme } from '../editorTheme.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { ILineBreaksComputer, ILineBreaksComputerFactory, InjectedText } from '../modelLineProjectionData.js';\nimport { ViewEventHandler } from '../viewEventHandler.js';\nimport { ICoordinatesConverter, InlineDecoration, IViewModel, IWhitespaceChangeAccessor, MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineData, ViewLineRenderingData, ViewModelDecoration } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, OutgoingViewModelEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewModelEventsCollector, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { IViewModelLines, ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\n\nconst USE_IDENTITY_LINES_COLLECTION = true;\n\nexport class ViewModel extends Disposable implements IViewModel {\n\n\tprivate readonly _editorId: number;\n\tprivate readonly _configuration: IEditorConfiguration;\n\tpublic readonly model: ITextModel;\n\tprivate readonly _eventDispatcher: ViewModelEventDispatcher;\n\tpublic readonly onEvent: Event<OutgoingViewModelEvent>;\n\tpublic cursorConfig: CursorConfiguration;\n\tprivate readonly _updateConfigurationViewLineCount: RunOnceScheduler;\n\tprivate _hasFocus: boolean;\n\tprivate readonly _viewportStart: ViewportStart;\n\tprivate readonly _lines: IViewModelLines;\n\tpublic readonly coordinatesConverter: ICoordinatesConverter;\n\tpublic readonly viewLayout: ViewLayout;\n\tprivate readonly _cursor: CursorsController;\n\tprivate readonly _decorations: ViewModelDecorations;\n\tpublic readonly glyphLanes: IGlyphMarginLanesModel;\n\n\tconstructor(\n\t\teditorId: number,\n\t\tconfiguration: IEditorConfiguration,\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tscheduleAtNextAnimationFrame: (callback: () => void) => IDisposable,\n\t\tprivate readonly languageConfigurationService: ILanguageConfigurationService,\n\t\tprivate readonly _themeService: IThemeService,\n\t\tprivate readonly _attachedView: IAttachedView,\n\t\tprivate readonly _transactionalTarget: IBatchableTarget,\n\t) {\n\t\tsuper();\n\n\t\tthis._editorId = editorId;\n\t\tthis._configuration = configuration;\n\t\tthis.model = model;\n\t\tthis._eventDispatcher = new ViewModelEventDispatcher();\n\t\tthis.onEvent = this._eventDispatcher.onEvent;\n\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\tthis._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n\t\tthis._hasFocus = false;\n\t\tthis._viewportStart = ViewportStart.create(this.model);\n\t\tthis.glyphLanes = new GlyphMarginLanesModel(0);\n\n\t\tif (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n\n\t\t\tthis._lines = new ViewModelLinesFromModelAsIs(this.model);\n\n\t\t} else {\n\t\t\tconst options = this._configuration.options;\n\t\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\t\tconst wrappingStrategy = options.get(EditorOption.wrappingStrategy);\n\t\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\t\tconst wrappingIndent = options.get(EditorOption.wrappingIndent);\n\t\t\tconst wordBreak = options.get(EditorOption.wordBreak);\n\n\t\t\tthis._lines = new ViewModelLinesFromProjectedModel(\n\t\t\t\tthis._editorId,\n\t\t\t\tthis.model,\n\t\t\t\tdomLineBreaksComputerFactory,\n\t\t\t\tmonospaceLineBreaksComputerFactory,\n\t\t\t\tfontInfo,\n\t\t\t\tthis.model.getOptions().tabSize,\n\t\t\t\twrappingStrategy,\n\t\t\t\twrappingInfo.wrappingColumn,\n\t\t\t\twrappingIndent,\n\t\t\t\twordBreak\n\t\t\t);\n\t\t}\n\n\t\tthis.coordinatesConverter = this._lines.createCoordinatesConverter();\n\n\t\tthis._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n\n\t\tthis.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n\n\t\tthis._register(this.viewLayout.onDidScroll((e) => {\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._handleVisibleLinesChanged();\n\t\t\t}\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._viewportStart.invalidate();\n\t\t\t}\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(\n\t\t\t\te.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop,\n\t\t\t\te.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop\n\t\t\t));\n\t\t}));\n\n\t\tthis._register(this.viewLayout.onDidContentSizeChange((e) => {\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(e);\n\t\t}));\n\n\t\tthis._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n\n\t\tthis._registerModelEvents();\n\n\t\tthis._register(this._configuration.onDidChangeFast((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\tthis._onConfigurationChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n\t\t}));\n\n\t\tthis._register(this._themeService.onDidColorThemeChange((theme) => {\n\t\t\tthis._invalidateDecorationsColorCache();\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n\t\t}));\n\n\t\tthis._updateConfigurationViewLineCountNow();\n\t}\n\n\tpublic override dispose(): void {\n\t\t// First remove listeners, as disposing the lines might end up sending\n\t\t// model decoration changed events ... and we no longer care about them ...\n\t\tsuper.dispose();\n\t\tthis._decorations.dispose();\n\t\tthis._lines.dispose();\n\t\tthis._viewportStart.dispose();\n\t\tthis._eventDispatcher.dispose();\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\treturn this._lines.createLineBreaksComputer();\n\t}\n\n\tpublic addViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis._eventDispatcher.addViewEventHandler(eventHandler);\n\t}\n\n\tpublic removeViewEventHandler(eventHandler: ViewEventHandler): void {\n\t\tthis._eventDispatcher.removeViewEventHandler(eventHandler);\n\t}\n\n\tprivate _updateConfigurationViewLineCountNow(): void {\n\t\tthis._configuration.setViewLineCount(this._lines.getViewLineCount());\n\t}\n\n\tprivate getModelVisibleRanges(): Range[] {\n\t\tconst linesViewportData = this.viewLayout.getLinesViewportData();\n\t\tconst viewVisibleRange = new Range(\n\t\t\tlinesViewportData.startLineNumber,\n\t\t\tthis.getLineMinColumn(linesViewportData.startLineNumber),\n\t\t\tlinesViewportData.endLineNumber,\n\t\t\tthis.getLineMaxColumn(linesViewportData.endLineNumber)\n\t\t);\n\t\tconst modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n\t\treturn modelVisibleRanges;\n\t}\n\n\tpublic visibleLinesStabilized(): void {\n\t\tconst modelVisibleRanges = this.getModelVisibleRanges();\n\t\tthis._attachedView.setVisibleLines(modelVisibleRanges, true);\n\t}\n\n\tprivate _handleVisibleLinesChanged(): void {\n\t\tconst modelVisibleRanges = this.getModelVisibleRanges();\n\t\tthis._attachedView.setVisibleLines(modelVisibleRanges, false);\n\t}\n\n\tpublic setHasFocus(hasFocus: boolean): void {\n\t\tthis._hasFocus = hasFocus;\n\t\tthis._cursor.setHasFocus(hasFocus);\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n\t\tthis._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n\t}\n\n\tpublic onCompositionStart(): void {\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n\t}\n\n\tpublic onCompositionEnd(): void {\n\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n\t}\n\n\tprivate _captureStableViewport(): StableViewport {\n\t\t// We might need to restore the current start view range, so save it (if available)\n\t\t// But only if the scroll position is not at the top of the file\n\t\tif (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n\t\t\tconst previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n\t\t\tconst previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n\t\t\treturn new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n\t\t}\n\t\treturn new StableViewport(null, 0);\n\t}\n\n\tprivate _onConfigurationChanged(eventsCollector: ViewModelEventsCollector, e: ConfigurationChangedEvent): void {\n\t\tconst stableViewport = this._captureStableViewport();\n\t\tconst options = this._configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst wrappingStrategy = options.get(EditorOption.wrappingStrategy);\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst wrappingIndent = options.get(EditorOption.wrappingIndent);\n\t\tconst wordBreak = options.get(EditorOption.wordBreak);\n\n\t\tif (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\n\t\t\tthis._updateConfigurationViewLineCount.schedule();\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.readOnly)) {\n\t\t\t// Must read again all decorations due to readOnly filtering\n\t\t\tthis._decorations.reset();\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t}\n\n\t\tif (e.hasChanged(EditorOption.renderValidationDecorations)) {\n\t\t\tthis._decorations.reset();\n\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t}\n\n\t\teventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n\t\tthis.viewLayout.onConfigurationChanged(e);\n\n\t\tstableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n\n\t\tif (CursorConfiguration.shouldRecreate(e)) {\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t}\n\t}\n\n\tprivate _registerModelEvents(): void {\n\n\t\tthis._register(this.model.onDidChangeContentOrInjectedText((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\n\t\t\t\tlet hadOtherModelChange = false;\n\t\t\t\tlet hadModelLineChangeThatChangedLineMapping = false;\n\n\t\t\t\tconst changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n\t\t\t\tconst versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n\n\t\t\t\t// Do a first pass to compute line mappings, and a second pass to actually interpret them\n\t\t\t\tconst lineBreaksComputer = this._lines.createLineBreaksComputer();\n\t\t\t\tfor (const change of changes) {\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tfor (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n\t\t\t\t\t\t\t\tconst line = change.detail[lineIdx];\n\t\t\t\t\t\t\t\tlet injectedText = change.injectedTexts[lineIdx];\n\t\t\t\t\t\t\t\tif (injectedText) {\n\t\t\t\t\t\t\t\t\tinjectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlineBreaksComputer.addRequest(line, injectedText, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tlet injectedText: textModelEvents.LineInjectedText[] | null = null;\n\t\t\t\t\t\t\tif (change.injectedText) {\n\t\t\t\t\t\t\t\tinjectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlineBreaksComputer.addRequest(change.detail, injectedText, null);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst lineBreaks = lineBreaksComputer.finalize();\n\t\t\t\tconst lineBreakQueue = new ArrayQueue(lineBreaks);\n\n\t\t\t\tfor (const change of changes) {\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.Flush: {\n\t\t\t\t\t\t\tthis._lines.onModelFlushed();\n\t\t\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\t\t\tthis._decorations.reset();\n\t\t\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesDeleted: {\n\t\t\t\t\t\t\tconst linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n\t\t\t\t\t\t\tif (linesDeletedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tconst insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n\t\t\t\t\t\t\tconst linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n\t\t\t\t\t\t\tif (linesInsertedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tconst changedLineBreakData = lineBreakQueue.dequeue()!;\n\t\t\t\t\t\t\tconst [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] =\n\t\t\t\t\t\t\t\tthis._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n\t\t\t\t\t\t\thadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n\t\t\t\t\t\t\tif (linesChangedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesChangedEvent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesInsertedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesDeletedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emitViewEvent(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.EOLChanged: {\n\t\t\t\t\t\t\t// Nothing to do. The new version will be accepted below\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (versionId !== null) {\n\t\t\t\t\tthis._lines.acceptVersionId(versionId);\n\t\t\t\t}\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\n\t\t\t\tif (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\n\t\t\t// Update the configuration and reset the centered view line\n\t\t\tconst viewportStartWasValid = this._viewportStart.isValid;\n\t\t\tthis._viewportStart.invalidate();\n\t\t\tthis._configuration.setModelLineCount(this.model.getLineCount());\n\t\t\tthis._updateConfigurationViewLineCountNow();\n\n\t\t\t// Recover viewport\n\t\t\tif (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n\t\t\t\tconst modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n\t\t\t\tif (modelRange) {\n\t\t\t\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n\t\t\t\t\tconst viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\t\t\t\tthis.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, ScrollType.Immediate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\tif (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n\t\t\t\t\teventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n\t\t\t\t}\n\t\t\t\tthis._cursor.onModelContentChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\n\t\t\tthis._handleVisibleLinesChanged();\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeTokens((e) => {\n\t\t\tconst viewRanges: { fromLineNumber: number; toLineNumber: number }[] = [];\n\t\t\tfor (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n\t\t\t\tconst modelRange = e.ranges[j];\n\t\t\t\tconst viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n\t\t\t\tconst viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n\t\t\t\tviewRanges[j] = {\n\t\t\t\t\tfromLineNumber: viewStartLineNumber,\n\t\t\t\t\ttoLineNumber: viewEndLineNumber\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguageConfiguration((e) => {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguage((e) => {\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeOptions((e) => {\n\t\t\t// A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n\t\t\tif (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\t\t\t\t} finally {\n\t\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t\t}\n\t\t\t\tthis._updateConfigurationViewLineCount.schedule();\n\t\t\t}\n\n\t\t\tthis.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n\t\t\tthis._cursor.updateConfiguration(this.cursorConfig);\n\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeDecorations((e) => {\n\t\t\tthis._decorations.onModelDecorationsChanged();\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n\t\t}));\n\t}\n\n\tprivate readonly hiddenAreasModel = new HiddenAreasModel();\n\tprivate previousHiddenAreas: readonly Range[] = [];\n\n\tpublic setHiddenAreas(ranges: Range[], source?: unknown): void {\n\t\tthis.hiddenAreasModel.setHiddenAreas(source, ranges);\n\t\tconst mergedRanges = this.hiddenAreasModel.getMergedRanges();\n\t\tif (mergedRanges === this.previousHiddenAreas) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.previousHiddenAreas = mergedRanges;\n\n\t\tconst stableViewport = this._captureStableViewport();\n\n\t\tlet lineMappingChanged = false;\n\t\ttry {\n\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\tlineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n\t\t\tif (lineMappingChanged) {\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\teventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n\t\t\t\tthis._cursor.onLineMappingChanged(eventsCollector);\n\t\t\t\tthis._decorations.onLineMappingChanged();\n\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\t\t\t}\n\n\t\t\tconst firstModelLineInViewPort = stableViewport.viewportStartModelPosition?.lineNumber;\n\t\t\tconst firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n\t\t\tif (!firstModelLineIsHidden) {\n\t\t\t\tstableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t}\n\t\tthis._updateConfigurationViewLineCount.schedule();\n\n\t\tif (lineMappingChanged) {\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n\t\t}\n\t}\n\n\tpublic getVisibleRangesPlusViewportAboveBelow(): Range[] {\n\t\tconst layoutInfo = this._configuration.options.get(EditorOption.layoutInfo);\n\t\tconst lineHeight = this._configuration.options.get(EditorOption.lineHeight);\n\t\tconst linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n\t\tconst endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n\n\t\treturn this._toModelVisibleRanges(new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t));\n\t}\n\n\tpublic getVisibleRanges(): Range[] {\n\t\tconst visibleViewRange = this.getCompletelyVisibleViewRange();\n\t\treturn this._toModelVisibleRanges(visibleViewRange);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this._lines.getHiddenAreas();\n\t}\n\n\tprivate _toModelVisibleRanges(visibleViewRange: Range): Range[] {\n\t\tconst visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\t\tconst hiddenAreas = this._lines.getHiddenAreas();\n\n\t\tif (hiddenAreas.length === 0) {\n\t\t\treturn [visibleRange];\n\t\t}\n\n\t\tconst result: Range[] = [];\n\t\tlet resultLen = 0;\n\t\tlet startLineNumber = visibleRange.startLineNumber;\n\t\tlet startColumn = visibleRange.startColumn;\n\t\tconst endLineNumber = visibleRange.endLineNumber;\n\t\tconst endColumn = visibleRange.endColumn;\n\t\tfor (let i = 0, len = hiddenAreas.length; i < len; i++) {\n\t\t\tconst hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n\t\t\tconst hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n\n\t\t\tif (hiddenEndLineNumber < startLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenStartLineNumber > endLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (startLineNumber < hiddenStartLineNumber) {\n\t\t\t\tresult[resultLen++] = new Range(\n\t\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\t\thiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1)\n\t\t\t\t);\n\t\t\t}\n\t\t\tstartLineNumber = hiddenEndLineNumber + 1;\n\t\t\tstartColumn = 1;\n\t\t}\n\n\t\tif (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n\t\t\tresult[resultLen++] = new Range(\n\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\tendLineNumber, endColumn\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getCompletelyVisibleViewRange(): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic getCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic saveState(): IViewState {\n\t\tconst compatViewState = this.viewLayout.saveState();\n\n\t\tconst scrollTop = compatViewState.scrollTop;\n\t\tconst firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n\t\tconst firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n\t\tconst firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n\n\t\treturn {\n\t\t\tscrollLeft: compatViewState.scrollLeft,\n\t\t\tfirstPosition: firstPosition,\n\t\t\tfirstPositionDeltaTop: firstPositionDeltaTop\n\t\t};\n\t}\n\n\tpublic reduceRestoreState(state: IViewState): { scrollLeft: number; scrollTop: number } {\n\t\tif (typeof state.firstPosition === 'undefined') {\n\t\t\t// This is a view state serialized by an older version\n\t\t\treturn this._reduceRestoreStateCompatibility(state);\n\t\t}\n\n\t\tconst modelPosition = this.model.validatePosition(state.firstPosition);\n\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\t\tconst scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: scrollTop\n\t\t};\n\t}\n\n\tprivate _reduceRestoreStateCompatibility(state: IViewState): { scrollLeft: number; scrollTop: number } {\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: state.scrollTopWithoutViewZones!\n\t\t};\n\t}\n\n\tprivate getTabSize(): number {\n\t\treturn this.model.getOptions().tabSize;\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.getViewLineCount();\n\t}\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tpublic setViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void {\n\t\tthis._viewportStart.update(this, startLineNumber);\n\t}\n\n\tpublic getActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n\t}\n\n\tpublic getLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[] {\n\t\treturn this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n\t}\n\n\tpublic getBracketGuidesInRangeByLine(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][] {\n\t\treturn this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._lines.getViewLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\treturn this._lines.getViewLineLength(lineNumber);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\treturn this._lines.getViewLineMinColumn(lineNumber);\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\treturn this._lines.getViewLineMaxColumn(lineNumber);\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tpublic getMinimapDecorationsInRange(range: Range): ViewModelDecoration[] {\n\t\treturn this._decorations.getMinimapDecorationsInRange(range);\n\t}\n\n\tpublic getDecorationsInViewport(visibleRange: Range): ViewModelDecoration[] {\n\t\treturn this._decorations.getDecorationsViewportData(visibleRange).decorations;\n\t}\n\n\tpublic getInjectedTextAt(viewPosition: Position): InjectedText | null {\n\t\treturn this._lines.getInjectedTextAt(viewPosition);\n\t}\n\n\tpublic getViewportViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData {\n\t\tconst allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n\t\tconst inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n\t\treturn this._getViewLineRenderingData(lineNumber, inlineDecorations);\n\t}\n\n\tpublic getViewLineRenderingData(lineNumber: number): ViewLineRenderingData {\n\t\tconst inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n\t\treturn this._getViewLineRenderingData(lineNumber, inlineDecorations);\n\t}\n\n\tprivate _getViewLineRenderingData(lineNumber: number, inlineDecorations: InlineDecoration[]): ViewLineRenderingData {\n\t\tconst mightContainRTL = this.model.mightContainRTL();\n\t\tconst mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n\t\tconst tabSize = this.getTabSize();\n\t\tconst lineData = this._lines.getViewLineData(lineNumber);\n\n\t\tif (lineData.inlineDecorations) {\n\t\t\tinlineDecorations = [\n\t\t\t\t...inlineDecorations,\n\t\t\t\t...lineData.inlineDecorations.map(d =>\n\t\t\t\t\td.toInlineDecoration(lineNumber)\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\n\t\treturn new ViewLineRenderingData(\n\t\t\tlineData.minColumn,\n\t\t\tlineData.maxColumn,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tmightContainRTL,\n\t\t\tmightContainNonBasicASCII,\n\t\t\tlineData.tokens,\n\t\t\tinlineDecorations,\n\t\t\ttabSize,\n\t\t\tlineData.startVisibleColumn\n\t\t);\n\t}\n\n\tpublic getViewLineData(lineNumber: number): ViewLineData {\n\t\treturn this._lines.getViewLineData(lineNumber);\n\t}\n\n\tpublic getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData {\n\t\tconst result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n\t\treturn new MinimapLinesRenderingData(\n\t\t\tthis.getTabSize(),\n\t\t\tresult\n\t\t);\n\t}\n\n\tpublic getAllOverviewRulerDecorations(theme: EditorTheme): OverviewRulerDecorationsGroup[] {\n\t\tconst decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n\t\tconst result = new OverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst decorationOptions = <ModelDecorationOptions>decoration.options;\n\t\t\tconst opts = decorationOptions.overviewRuler;\n\t\t\tif (!opts) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lane = <number>opts.position;\n\t\t\tif (lane === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst color = opts.getColor(theme.value);\n\t\t\tconst viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n\t\t\tconst viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n\n\t\t\tresult.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n\t\t}\n\t\treturn result.asArray;\n\t}\n\n\tprivate _invalidateDecorationsColorCache(): void {\n\t\tconst decorations = this.model.getOverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst opts1 = <ModelDecorationOverviewRulerOptions>decoration.options.overviewRuler;\n\t\t\topts1?.invalidateCachedColor();\n\t\t\tconst opts2 = <ModelDecorationMinimapOptions>decoration.options.minimap;\n\t\t\topts2?.invalidateCachedColor();\n\t\t}\n\t}\n\n\tpublic getValueInRange(range: Range, eol: EndOfLinePreference): string {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueInRange(modelRange, eol);\n\t}\n\n\tpublic getValueLengthInRange(range: Range, eol: EndOfLinePreference): number {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueLengthInRange(modelRange, eol);\n\t}\n\n\tpublic modifyPosition(position: Position, offset: number): Position {\n\t\tconst modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n\t\tconst resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n\t\treturn this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n\t}\n\n\tpublic deduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position {\n\t\tconst modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n\t\tif (this.model.getEOL().length === 2) {\n\t\t\t// This model uses CRLF, so the delta must take that into account\n\t\t\tif (deltaOffset < 0) {\n\t\t\t\tdeltaOffset -= lineFeedCnt;\n\t\t\t} else {\n\t\t\t\tdeltaOffset += lineFeedCnt;\n\t\t\t}\n\t\t}\n\n\t\tconst modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n\t\tconst resultOffset = modelAnchorOffset + deltaOffset;\n\t\treturn this.model.getPositionAt(resultOffset);\n\t}\n\n\tpublic getPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[] {\n\t\tconst newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n\n\t\tmodelRanges = modelRanges.slice(0);\n\t\tmodelRanges.sort(Range.compareRangesUsingStarts);\n\n\t\tlet hasEmptyRange = false;\n\t\tlet hasNonEmptyRange = false;\n\t\tfor (const range of modelRanges) {\n\t\t\tif (range.isEmpty()) {\n\t\t\t\thasEmptyRange = true;\n\t\t\t} else {\n\t\t\t\thasNonEmptyRange = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasNonEmptyRange) {\n\t\t\t// all ranges are empty\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n\n\t\t\tlet result = '';\n\t\t\tfor (let i = 0; i < modelLineNumbers.length; i++) {\n\t\t\t\tif (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tif (hasEmptyRange && emptySelectionClipboard) {\n\t\t\t// mixed empty selections and non-empty selections\n\t\t\tconst result: string[] = [];\n\t\t\tlet prevModelLineNumber = 0;\n\t\t\tfor (const modelRange of modelRanges) {\n\t\t\t\tconst modelLineNumber = modelRange.startLineNumber;\n\t\t\t\tif (modelRange.isEmpty()) {\n\t\t\t\t\tif (modelLineNumber !== prevModelLineNumber) {\n\t\t\t\t\t\tresult.push(this.model.getLineContent(modelLineNumber));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(this.model.getValueInRange(modelRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\t\t\t\tprevModelLineNumber = modelLineNumber;\n\t\t\t}\n\t\t\treturn result.length === 1 ? result[0] : result;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tfor (const modelRange of modelRanges) {\n\t\t\tif (!modelRange.isEmpty()) {\n\t\t\t\tresult.push(this.model.getValueInRange(modelRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t\t}\n\t\t}\n\t\treturn result.length === 1 ? result[0] : result;\n\t}\n\n\tpublic getRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): { html: string; mode: string } | null {\n\t\tconst languageId = this.model.getLanguageId();\n\t\tif (languageId === PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (modelRanges.length !== 1) {\n\t\t\t// no multiple selection support at this time\n\t\t\treturn null;\n\t\t}\n\n\t\tlet range = modelRanges[0];\n\t\tif (range.isEmpty()) {\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\t// nothing to copy\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst lineNumber = range.startLineNumber;\n\t\t\trange = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n\t\t}\n\n\t\tconst fontInfo = this._configuration.options.get(EditorOption.fontInfo);\n\t\tconst colorMap = this._getColorMap();\n\t\tconst hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n\t\tconst useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n\t\tlet fontFamily: string;\n\t\tif (useDefaultFontFamily) {\n\t\t\tfontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n\t\t} else {\n\t\t\tfontFamily = fontInfo.fontFamily;\n\t\t\tfontFamily = fontFamily.replace(/\"/g, '\\'');\n\t\t\tconst hasQuotesOrIsList = /[,']/.test(fontFamily);\n\t\t\tif (!hasQuotesOrIsList) {\n\t\t\t\tconst needsQuotes = /[+ ]/.test(fontFamily);\n\t\t\t\tif (needsQuotes) {\n\t\t\t\t\tfontFamily = `'${fontFamily}'`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n\t\t}\n\n\t\treturn {\n\t\t\tmode: languageId,\n\t\t\thtml: (\n\t\t\t\t`<div style=\"`\n\t\t\t\t+ `color: ${colorMap[ColorId.DefaultForeground]};`\n\t\t\t\t+ `background-color: ${colorMap[ColorId.DefaultBackground]};`\n\t\t\t\t+ `font-family: ${fontFamily};`\n\t\t\t\t+ `font-weight: ${fontInfo.fontWeight};`\n\t\t\t\t+ `font-size: ${fontInfo.fontSize}px;`\n\t\t\t\t+ `line-height: ${fontInfo.lineHeight}px;`\n\t\t\t\t+ `white-space: pre;`\n\t\t\t\t+ `\">`\n\t\t\t\t+ this._getHTMLToCopy(range, colorMap)\n\t\t\t\t+ '</div>'\n\t\t\t)\n\t\t};\n\t}\n\n\tprivate _getHTMLToCopy(modelRange: Range, colorMap: string[]): string {\n\t\tconst startLineNumber = modelRange.startLineNumber;\n\t\tconst startColumn = modelRange.startColumn;\n\t\tconst endLineNumber = modelRange.endLineNumber;\n\t\tconst endColumn = modelRange.endColumn;\n\n\t\tconst tabSize = this.getTabSize();\n\n\t\tlet result = '';\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst lineContent = lineTokens.getLineContent();\n\t\t\tconst startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n\t\t\tconst endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n\n\t\t\tif (lineContent === '') {\n\t\t\t\tresult += '<br>';\n\t\t\t} else {\n\t\t\t\tresult += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getColorMap(): string[] {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tconst result: string[] = ['#000000'];\n\t\tif (colorMap) {\n\t\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\t\tresult[i] = Color.Format.CSS.formatHex(colorMap[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t//#region cursor operations\n\n\tpublic getPrimaryCursorState(): CursorState {\n\t\treturn this._cursor.getPrimaryCursorState();\n\t}\n\tpublic getLastAddedCursorIndex(): number {\n\t\treturn this._cursor.getLastAddedCursorIndex();\n\t}\n\tpublic getCursorStates(): CursorState[] {\n\t\treturn this._cursor.getCursorStates();\n\t}\n\tpublic setCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean {\n\t\treturn this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n\t}\n\tpublic getCursorColumnSelectData(): IColumnSelectData {\n\t\treturn this._cursor.getCursorColumnSelectData();\n\t}\n\tpublic getCursorAutoClosedCharacters(): Range[] {\n\t\treturn this._cursor.getAutoClosedCharacters();\n\t}\n\tpublic setCursorColumnSelectData(columnSelectData: IColumnSelectData): void {\n\t\tthis._cursor.setCursorColumnSelectData(columnSelectData);\n\t}\n\tpublic getPrevEditOperationType(): EditOperationType {\n\t\treturn this._cursor.getPrevEditOperationType();\n\t}\n\tpublic setPrevEditOperationType(type: EditOperationType): void {\n\t\tthis._cursor.setPrevEditOperationType(type);\n\t}\n\tpublic getSelection(): Selection {\n\t\treturn this._cursor.getSelection();\n\t}\n\tpublic getSelections(): Selection[] {\n\t\treturn this._cursor.getSelections();\n\t}\n\tpublic getPosition(): Position {\n\t\treturn this._cursor.getPrimaryCursorState().modelState.position;\n\t}\n\tpublic setSelections(source: string | null | undefined, selections: readonly ISelection[], reason = CursorChangeReason.NotSet): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n\t}\n\tpublic saveCursorState(): ICursorState[] {\n\t\treturn this._cursor.saveState();\n\t}\n\tpublic restoreCursorState(states: ICursorState[]): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n\t}\n\n\tprivate _executeCursorEdit(callback: (eventsCollector: ViewModelEventsCollector) => void): void {\n\t\tif (this._cursor.context.cursorConfig.readOnly) {\n\t\t\t// we cannot edit when read only...\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n\t\t\treturn;\n\t\t}\n\t\tthis._withViewEventsCollector(callback);\n\t}\n\tpublic executeEdits(source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n\t}\n\tpublic startComposition(): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n\t}\n\tpublic endComposition(source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n\t}\n\tpublic type(text: string, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n\t}\n\tpublic compositionType(text: string, replacePrevCharCnt: number, replaceNextCharCnt: number, positionDelta: number, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n\t}\n\tpublic paste(text: string, pasteOnNewLine: boolean, multicursorText?: string[] | null | undefined, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n\t}\n\tpublic cut(source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n\t}\n\tpublic executeCommand(command: ICommand, source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n\t}\n\tpublic executeCommands(commands: ICommand[], source?: string | null | undefined): void {\n\t\tthis._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n\t}\n\tpublic revealAllCursors(source: string | null | undefined, revealHorizontal: boolean, minimalReveal: boolean = false): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, viewEvents.VerticalRevealType.Simple, revealHorizontal, ScrollType.Smooth));\n\t}\n\tpublic revealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean, minimalReveal: boolean = false): void {\n\t\tthis._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, viewEvents.VerticalRevealType.Simple, revealHorizontal, ScrollType.Smooth));\n\t}\n\tpublic revealTopMostCursor(source: string | null | undefined): void {\n\t\tconst viewPosition = this._cursor.getTopMostViewPosition();\n\t\tconst viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, viewEvents.VerticalRevealType.Simple, true, ScrollType.Smooth)));\n\t}\n\tpublic revealBottomMostCursor(source: string | null | undefined): void {\n\t\tconst viewPosition = this._cursor.getBottomMostViewPosition();\n\t\tconst viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, viewEvents.VerticalRevealType.Simple, true, ScrollType.Smooth)));\n\t}\n\tpublic revealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: viewEvents.VerticalRevealType, scrollType: ScrollType): void {\n\t\tthis._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n\t}\n\n\t//#endregion\n\n\t//#region viewLayout\n\tpublic changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void {\n\t\tconst hadAChange = this.viewLayout.changeWhitespace(callback);\n\t\tif (hadAChange) {\n\t\t\tthis._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n\t\t\tthis._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n\t\t}\n\t}\n\t//#endregion\n\n\tprivate _withViewEventsCollector<T>(callback: (eventsCollector: ViewModelEventsCollector) => T): T {\n\t\treturn this._transactionalTarget.batchChanges(() => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n\t\t\t\treturn callback(eventsCollector);\n\t\t\t} finally {\n\t\t\t\tthis._eventDispatcher.endEmitViewEvents();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic batchEvents(callback: () => void): void {\n\t\tthis._withViewEventsCollector(() => { callback(); });\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\treturn this._lines.normalizePosition(position, affinity);\n\t}\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number {\n\t\treturn this._lines.getLineIndentColumn(lineNumber);\n\t}\n}\n\nexport interface IBatchableTarget {\n\t/**\n\t * Allows the target to apply the changes introduced by the callback in a batch.\n\t*/\n\tbatchChanges<T>(cb: () => T): T;\n}\n\nclass ViewportStart implements IDisposable {\n\n\tpublic static create(model: ITextModel): ViewportStart {\n\t\tconst viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\treturn new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n\t}\n\n\tpublic get viewLineNumber(): number {\n\t\treturn this._viewLineNumber;\n\t}\n\n\tpublic get isValid(): boolean {\n\t\treturn this._isValid;\n\t}\n\n\tpublic get modelTrackedRange(): string {\n\t\treturn this._modelTrackedRange;\n\t}\n\n\tpublic get startLineDelta(): number {\n\t\treturn this._startLineDelta;\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate _viewLineNumber: number,\n\t\tprivate _isValid: boolean,\n\t\tprivate _modelTrackedRange: string,\n\t\tprivate _startLineDelta: number,\n\t) { }\n\n\tpublic dispose(): void {\n\t\tthis._model._setTrackedRange(this._modelTrackedRange, null, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic update(viewModel: IViewModel, startLineNumber: number): void {\n\t\tconst position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n\t\tconst viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\tconst viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n\t\tconst scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n\n\t\tthis._viewLineNumber = startLineNumber;\n\t\tthis._isValid = true;\n\t\tthis._modelTrackedRange = viewportStartLineTrackedRange;\n\t\tthis._startLineDelta = scrollTop - viewportStartLineTop;\n\t}\n\n\tpublic invalidate(): void {\n\t\tthis._isValid = false;\n\t}\n}\n\nclass OverviewRulerDecorations {\n\n\tprivate readonly _asMap: { [color: string]: OverviewRulerDecorationsGroup } = Object.create(null);\n\treadonly asArray: OverviewRulerDecorationsGroup[] = [];\n\n\tpublic accept(color: string, zIndex: number, startLineNumber: number, endLineNumber: number, lane: number): void {\n\t\tconst prevGroup = this._asMap[color];\n\n\t\tif (prevGroup) {\n\t\t\tconst prevData = prevGroup.data;\n\t\t\tconst prevLane = prevData[prevData.length - 3];\n\t\t\tconst prevEndLineNumber = prevData[prevData.length - 1];\n\t\t\tif (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n\t\t\t\t// merge into prev\n\t\t\t\tif (endLineNumber > prevEndLineNumber) {\n\t\t\t\t\tprevData[prevData.length - 1] = endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// push\n\t\t\tprevData.push(lane, startLineNumber, endLineNumber);\n\t\t} else {\n\t\t\tconst group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n\t\t\tthis._asMap[color] = group;\n\t\t\tthis.asArray.push(group);\n\t\t}\n\t}\n}\n\nclass HiddenAreasModel {\n\tprivate readonly hiddenAreas = new Map<unknown, Range[]>();\n\tprivate shouldRecompute = false;\n\tprivate ranges: Range[] = [];\n\n\tsetHiddenAreas(source: unknown, ranges: Range[]): void {\n\t\tconst existing = this.hiddenAreas.get(source);\n\t\tif (existing && rangeArraysEqual(existing, ranges)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.hiddenAreas.set(source, ranges);\n\t\tthis.shouldRecompute = true;\n\t}\n\n\t/**\n\t * The returned array is immutable.\n\t*/\n\tgetMergedRanges(): readonly Range[] {\n\t\tif (!this.shouldRecompute) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\tthis.shouldRecompute = false;\n\t\tconst newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n\t\tif (rangeArraysEqual(this.ranges, newRanges)) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\tthis.ranges = newRanges;\n\t\treturn this.ranges;\n\t}\n}\n\nfunction mergeLineRangeArray(arr1: Range[], arr2: Range[]): Range[] {\n\tconst result = [];\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < arr1.length && j < arr2.length) {\n\t\tconst item1 = arr1[i];\n\t\tconst item2 = arr2[j];\n\n\t\tif (item1.endLineNumber < item2.startLineNumber - 1) {\n\t\t\tresult.push(arr1[i++]);\n\t\t} else if (item2.endLineNumber < item1.startLineNumber - 1) {\n\t\t\tresult.push(arr2[j++]);\n\t\t} else {\n\t\t\tconst startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n\t\t\tconst endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n\t\t\tresult.push(new Range(startLineNumber, 1, endLineNumber, 1));\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) {\n\t\tresult.push(arr1[i++]);\n\t}\n\twhile (j < arr2.length) {\n\t\tresult.push(arr2[j++]);\n\t}\n\treturn result;\n}\n\nfunction rangeArraysEqual(arr1: Range[], arr2: Range[]): boolean {\n\tif (arr1.length !== arr2.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (!arr1[i].equalsRange(arr2[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n\tconstructor(\n\t\tpublic readonly viewportStartModelPosition: Position | null,\n\t\tpublic readonly startLineDelta: number\n\t) { }\n\n\tpublic recoverViewportStart(coordinatesConverter: ICoordinatesConverter, viewLayout: ViewLayout): void {\n\t\tif (!this.viewportStartModelPosition) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n\t\tconst viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\tviewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, ScrollType.Immediate);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
