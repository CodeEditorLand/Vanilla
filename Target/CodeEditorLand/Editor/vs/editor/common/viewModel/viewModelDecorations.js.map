{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewModel/viewModelDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { IModelDecoration, ITextModel, PositionAffinity } from '../model.js';\nimport { IViewModelLines } from './viewModelLines.js';\nimport { ICoordinatesConverter, InlineDecoration, InlineDecorationType, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\n\nexport interface IDecorationsViewportData {\n\t/**\n\t * decorations in the viewport.\n\t */\n\treadonly decorations: ViewModelDecoration[];\n\t/**\n\t * inline decorations grouped by each line in the viewport.\n\t */\n\treadonly inlineDecorations: InlineDecoration[][];\n}\n\nexport class ViewModelDecorations implements IDisposable {\n\n\tprivate readonly editorId: number;\n\tprivate readonly model: ITextModel;\n\tprivate readonly configuration: IEditorConfiguration;\n\tprivate readonly _linesCollection: IViewModelLines;\n\tprivate readonly _coordinatesConverter: ICoordinatesConverter;\n\n\tprivate _decorationsCache: { [decorationId: string]: ViewModelDecoration };\n\n\tprivate _cachedModelDecorationsResolver: IDecorationsViewportData | null;\n\tprivate _cachedModelDecorationsResolverViewRange: Range | null;\n\n\tconstructor(editorId: number, model: ITextModel, configuration: IEditorConfiguration, linesCollection: IViewModelLines, coordinatesConverter: ICoordinatesConverter) {\n\t\tthis.editorId = editorId;\n\t\tthis.model = model;\n\t\tthis.configuration = configuration;\n\t\tthis._linesCollection = linesCollection;\n\t\tthis._coordinatesConverter = coordinatesConverter;\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._cachedModelDecorationsResolver = null;\n\t\tthis._cachedModelDecorationsResolverViewRange = null;\n\t}\n\n\tprivate _clearCachedModelDecorationsResolver(): void {\n\t\tthis._cachedModelDecorationsResolver = null;\n\t\tthis._cachedModelDecorationsResolverViewRange = null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic reset(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic onModelDecorationsChanged(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tpublic onLineMappingChanged(): void {\n\t\tthis._decorationsCache = Object.create(null);\n\n\t\tthis._clearCachedModelDecorationsResolver();\n\t}\n\n\tprivate _getOrCreateViewModelDecoration(modelDecoration: IModelDecoration): ViewModelDecoration {\n\t\tconst id = modelDecoration.id;\n\t\tlet r = this._decorationsCache[id];\n\t\tif (!r) {\n\t\t\tconst modelRange = modelDecoration.range;\n\t\t\tconst options = modelDecoration.options;\n\t\t\tlet viewRange: Range;\n\t\t\tif (options.isWholeLine) {\n\t\t\t\tconst start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), PositionAffinity.Left, false, true);\n\t\t\t\tconst end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), PositionAffinity.Right);\n\t\t\t\tviewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t\t\t} else {\n\t\t\t\t// For backwards compatibility reasons, we want injected text before any decoration.\n\t\t\t\t// Thus, move decorations to the right.\n\t\t\t\tviewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, PositionAffinity.Right);\n\t\t\t}\n\t\t\tr = new ViewModelDecoration(viewRange, options);\n\t\t\tthis._decorationsCache[id] = r;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic getMinimapDecorationsInRange(range: Range): ViewModelDecoration[] {\n\t\treturn this._getDecorationsInRange(range, true, false).decorations;\n\t}\n\n\tpublic getDecorationsViewportData(viewRange: Range): IDecorationsViewportData {\n\t\tlet cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n\t\tcacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n\t\tif (!cacheIsValid) {\n\t\t\tthis._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n\t\t\tthis._cachedModelDecorationsResolverViewRange = viewRange;\n\t\t}\n\t\treturn this._cachedModelDecorationsResolver!;\n\t}\n\n\tpublic getInlineDecorationsOnLine(lineNumber: number, onlyMinimapDecorations: boolean = false, onlyMarginDecorations: boolean = false): InlineDecoration[] {\n\t\tconst range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n\t\treturn this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations).inlineDecorations[0];\n\t}\n\n\tprivate _getDecorationsInRange(viewRange: Range, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IDecorationsViewportData {\n\t\tconst modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n\t\tconst startLineNumber = viewRange.startLineNumber;\n\t\tconst endLineNumber = viewRange.endLineNumber;\n\n\t\tconst decorationsInViewport: ViewModelDecoration[] = [];\n\t\tlet decorationsInViewportLen = 0;\n\t\tconst inlineDecorations: InlineDecoration[][] = [];\n\t\tfor (let j = startLineNumber; j <= endLineNumber; j++) {\n\t\t\tinlineDecorations[j - startLineNumber] = [];\n\t\t}\n\n\t\tfor (let i = 0, len = modelDecorations.length; i < len; i++) {\n\t\t\tconst modelDecoration = modelDecorations[i];\n\t\t\tconst decorationOptions = modelDecoration.options;\n\n\t\t\tif (!isModelDecorationVisible(this.model, modelDecoration)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n\t\t\tconst viewRange = viewModelDecoration.range;\n\n\t\t\tdecorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n\n\t\t\tif (decorationOptions.inlineClassName) {\n\t\t\t\tconst inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? InlineDecorationType.RegularAffectingLetterSpacing : InlineDecorationType.Regular);\n\t\t\t\tconst intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n\t\t\t\tconst intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n\t\t\t\tfor (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n\t\t\t\t\tinlineDecorations[j - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.beforeContentClassName) {\n\t\t\t\tif (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n\t\t\t\t\tconst inlineDecoration = new InlineDecoration(\n\t\t\t\t\t\tnew Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn),\n\t\t\t\t\t\tdecorationOptions.beforeContentClassName,\n\t\t\t\t\t\tInlineDecorationType.Before\n\t\t\t\t\t);\n\t\t\t\t\tinlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (decorationOptions.afterContentClassName) {\n\t\t\t\tif (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n\t\t\t\t\tconst inlineDecoration = new InlineDecoration(\n\t\t\t\t\t\tnew Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn),\n\t\t\t\t\t\tdecorationOptions.afterContentClassName,\n\t\t\t\t\t\tInlineDecorationType.After\n\t\t\t\t\t);\n\t\t\t\t\tinlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdecorations: decorationsInViewport,\n\t\t\tinlineDecorations: inlineDecorations\n\t\t};\n\t}\n}\n\nexport function isModelDecorationVisible(model: ITextModel, decoration: IModelDecoration): boolean {\n\tif (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n\t\treturn false;\n\t}\n\n\tif (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function isModelDecorationInComment(model: ITextModel, decoration: IModelDecoration): boolean {\n\treturn testTokensInRange(\n\t\tmodel,\n\t\tdecoration.range,\n\t\t(tokenType) => tokenType === StandardTokenType.Comment\n\t);\n}\n\nexport function isModelDecorationInString(model: ITextModel, decoration: IModelDecoration): boolean {\n\treturn testTokensInRange(\n\t\tmodel,\n\t\tdecoration.range,\n\t\t(tokenType) => tokenType === StandardTokenType.String\n\t);\n}\n\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model: ITextModel, range: Range, callback: (tokenType: StandardTokenType) => boolean): boolean {\n\tfor (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\tconst isFirstLine = lineNumber === range.startLineNumber;\n\t\tconst isEndLine = lineNumber === range.endLineNumber;\n\n\t\tlet tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n\t\twhile (tokenIdx < lineTokens.getCount()) {\n\t\t\tif (isEndLine) {\n\t\t\t\tconst startOffset = lineTokens.getStartOffset(tokenIdx);\n\t\t\t\tif (startOffset > range.endColumn - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n\t\t\tif (!callbackResult) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttokenIdx++;\n\t\t}\n\t}\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": ["viewRange"]
}
