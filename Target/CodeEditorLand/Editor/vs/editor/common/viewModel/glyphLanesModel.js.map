{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewModel/glyphLanesModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Range } from \"../core/range.js\";\nimport { GlyphMarginLane, type IGlyphMarginLanesModel } from \"../model.js\";\n\nconst MAX_LANE = GlyphMarginLane.Right;\n\nexport class GlyphMarginLanesModel implements IGlyphMarginLanesModel {\n\tprivate lanes: Uint8Array;\n\tprivate persist = 0;\n\tprivate _requiredLanes = 1; // always render at least one lane\n\n\tconstructor(maxLine: number) {\n\t\tthis.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n\t}\n\n\tpublic reset(maxLine: number) {\n\t\tconst bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n\t\tif (this.lanes.length < bytes) {\n\t\t\tthis.lanes = new Uint8Array(bytes);\n\t\t} else {\n\t\t\tthis.lanes.fill(0);\n\t\t}\n\t\tthis._requiredLanes = 1;\n\t}\n\n\tpublic get requiredLanes() {\n\t\treturn this._requiredLanes;\n\t}\n\n\tpublic push(lane: GlyphMarginLane, range: Range, persist?: boolean): void {\n\t\tif (persist) {\n\t\t\tthis.persist |= 1 << (lane - 1);\n\t\t}\n\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\tconst bit = MAX_LANE * i + (lane - 1);\n\t\t\tthis.lanes[bit >>> 3] |= 1 << (bit % 8);\n\t\t\tthis._requiredLanes = Math.max(\n\t\t\t\tthis._requiredLanes,\n\t\t\t\tthis.countAtLine(i),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getLanesAtLine(lineNumber: number): GlyphMarginLane[] {\n\t\tconst lanes: GlyphMarginLane[] = [];\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (\n\t\t\t\tthis.persist & (1 << i) ||\n\t\t\t\tthis.lanes[bit >>> 3] & (1 << (bit % 8))\n\t\t\t) {\n\t\t\t\tlanes.push(i + 1);\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\n\t\treturn lanes.length ? lanes : [GlyphMarginLane.Center];\n\t}\n\n\tprivate countAtLine(lineNumber: number): number {\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (\n\t\t\t\tthis.persist & (1 << i) ||\n\t\t\t\tthis.lanes[bit >>> 3] & (1 << (bit % 8))\n\t\t\t) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,uBAAoD;AAE7D,MAAM,WAAW,gBAAgB;AAE1B,MAAM,sBAAwD;AAAA,EAVrE,OAUqE;AAAA;AAAA;AAAA,EAC5D;AAAA,EACA,UAAU;AAAA,EACV,iBAAiB;AAAA;AAAA,EAEzB,YAAY,SAAiB;AAC5B,SAAK,QAAQ,IAAI,WAAW,KAAK,MAAO,UAAU,KAAK,WAAY,CAAC,CAAC;AAAA,EACtE;AAAA,EAEO,MAAM,SAAiB;AAC7B,UAAM,QAAQ,KAAK,MAAO,UAAU,KAAK,WAAY,CAAC;AACtD,QAAI,KAAK,MAAM,SAAS,OAAO;AAC9B,WAAK,QAAQ,IAAI,WAAW,KAAK;AAAA,IAClC,OAAO;AACN,WAAK,MAAM,KAAK,CAAC;AAAA,IAClB;AACA,SAAK,iBAAiB;AAAA,EACvB;AAAA,EAEA,IAAW,gBAAgB;AAC1B,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,KAAK,MAAuB,OAAc,SAAyB;AACzE,QAAI,SAAS;AACZ,WAAK,WAAW,KAAM,OAAO;AAAA,IAC9B;AACA,aAAS,IAAI,MAAM,iBAAiB,KAAK,MAAM,eAAe,KAAK;AAClE,YAAM,MAAM,WAAW,KAAK,OAAO;AACnC,WAAK,MAAM,QAAQ,CAAC,KAAK,KAAM,MAAM;AACrC,WAAK,iBAAiB,KAAK;AAAA,QAC1B,KAAK;AAAA,QACL,KAAK,YAAY,CAAC;AAAA,MACnB;AAAA,IACD;AAAA,EACD;AAAA,EAEO,eAAe,YAAuC;AAC5D,UAAM,QAA2B,CAAC;AAClC,QAAI,MAAM,WAAW;AACrB,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAClC,UACC,KAAK,UAAW,KAAK,KACrB,KAAK,MAAM,QAAQ,CAAC,IAAK,KAAM,MAAM,GACpC;AACD,cAAM,KAAK,IAAI,CAAC;AAAA,MACjB;AACA;AAAA,IACD;AAEA,WAAO,MAAM,SAAS,QAAQ,CAAC,gBAAgB,MAAM;AAAA,EACtD;AAAA,EAEQ,YAAY,YAA4B;AAC/C,QAAI,MAAM,WAAW;AACrB,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAClC,UACC,KAAK,UAAW,KAAK,KACrB,KAAK,MAAM,QAAQ,CAAC,IAAK,KAAM,MAAM,GACpC;AACD;AAAA,MACD;AACA;AAAA,IACD;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
