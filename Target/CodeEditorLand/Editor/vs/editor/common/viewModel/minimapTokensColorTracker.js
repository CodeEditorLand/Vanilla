import{Emitter as l}from"../../../base/common/event.js";import{Disposable as c,markAsSingleton as p}from"../../../base/common/lifecycle.js";import{RGBA8 as i}from"../core/rgba.js";import{TokenizationRegistry as e}from"../languages.js";import{ColorId as n}from"../encodedTokenAttributes.js";class a extends c{static _INSTANCE=null;static getInstance(){return this._INSTANCE||(this._INSTANCE=p(new a)),this._INSTANCE}_colors;_backgroundIsLight;_onDidChange=new l;onDidChange=this._onDidChange.event;constructor(){super(),this._updateColorMap(),this._register(e.onDidChange(o=>{o.changedColorMap&&this._updateColorMap()}))}_updateColorMap(){const o=e.getColorMap();if(!o){this._colors=[i.Empty],this._backgroundIsLight=!0;return}this._colors=[i.Empty];for(let t=1;t<o.length;t++){const r=o[t].rgba;this._colors[t]=new i(r.r,r.g,r.b,Math.round(r.a*255))}const s=o[n.DefaultBackground].getRelativeLuminance();this._backgroundIsLight=s>=.5,this._onDidChange.fire(void 0)}getColor(o){return(o<1||o>=this._colors.length)&&(o=n.DefaultBackground),this._colors[o]}backgroundIsLight(){return this._backgroundIsLight}}export{a as MinimapTokensColorTracker};
