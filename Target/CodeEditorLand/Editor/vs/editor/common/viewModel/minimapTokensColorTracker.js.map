{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewModel/minimapTokensColorTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable, markAsSingleton } from \"../../../base/common/lifecycle.js\";\nimport { RGBA8 } from \"../core/rgba.js\";\nimport { ColorId } from \"../encodedTokenAttributes.js\";\nimport { TokenizationRegistry } from \"../languages.js\";\n\nexport class MinimapTokensColorTracker extends Disposable {\n\tprivate static _INSTANCE: MinimapTokensColorTracker | null = null;\n\tpublic static getInstance(): MinimapTokensColorTracker {\n\t\tif (!this._INSTANCE) {\n\t\t\tthis._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n\t\t}\n\t\treturn this._INSTANCE;\n\t}\n\n\tprivate _colors!: RGBA8[];\n\tprivate _backgroundIsLight!: boolean;\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate constructor() {\n\t\tsuper();\n\t\tthis._updateColorMap();\n\t\tthis._register(\n\t\t\tTokenizationRegistry.onDidChange((e) => {\n\t\t\t\tif (e.changedColorMap) {\n\t\t\t\t\tthis._updateColorMap();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _updateColorMap(): void {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tif (!colorMap) {\n\t\t\tthis._colors = [RGBA8.Empty];\n\t\t\tthis._backgroundIsLight = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._colors = [RGBA8.Empty];\n\t\tfor (let colorId = 1; colorId < colorMap.length; colorId++) {\n\t\t\tconst source = colorMap[colorId].rgba;\n\t\t\t// Use a VM friendly data-type\n\t\t\tthis._colors[colorId] = new RGBA8(\n\t\t\t\tsource.r,\n\t\t\t\tsource.g,\n\t\t\t\tsource.b,\n\t\t\t\tMath.round(source.a * 255),\n\t\t\t);\n\t\t}\n\t\tconst backgroundLuminosity =\n\t\t\tcolorMap[ColorId.DefaultBackground].getRelativeLuminance();\n\t\tthis._backgroundIsLight = backgroundLuminosity >= 0.5;\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic getColor(colorId: ColorId): RGBA8 {\n\t\tif (colorId < 1 || colorId >= this._colors.length) {\n\t\t\t// background color (basically invisible)\n\t\t\tcolorId = ColorId.DefaultBackground;\n\t\t}\n\t\treturn this._colors[colorId];\n\t}\n\n\tpublic backgroundIsLight(): boolean {\n\t\treturn this._backgroundIsLight;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAA2B;AACpC,SAAS,YAAY,uBAAuB;AAC5C,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,4BAA4B;AAE9B,MAAM,kCAAkC,WAAW;AAAA,EAX1D,OAW0D;AAAA;AAAA;AAAA,EACzD,OAAe,YAA8C;AAAA,EAC7D,OAAc,cAAyC;AACtD,QAAI,CAAC,KAAK,WAAW;AACpB,WAAK,YAAY,gBAAgB,IAAI,0BAA0B,CAAC;AAAA,IACjE;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EACA;AAAA,EAES,eAAe,IAAI,QAAc;AAAA,EAClC,cAA2B,KAAK,aAAa;AAAA,EAErD,cAAc;AACrB,UAAM;AACN,SAAK,gBAAgB;AACrB,SAAK;AAAA,MACJ,qBAAqB,YAAY,CAAC,MAAM;AACvC,YAAI,EAAE,iBAAiB;AACtB,eAAK,gBAAgB;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,kBAAwB;AAC/B,UAAM,WAAW,qBAAqB,YAAY;AAClD,QAAI,CAAC,UAAU;AACd,WAAK,UAAU,CAAC,MAAM,KAAK;AAC3B,WAAK,qBAAqB;AAC1B;AAAA,IACD;AACA,SAAK,UAAU,CAAC,MAAM,KAAK;AAC3B,aAAS,UAAU,GAAG,UAAU,SAAS,QAAQ,WAAW;AAC3D,YAAM,SAAS,SAAS,OAAO,EAAE;AAEjC,WAAK,QAAQ,OAAO,IAAI,IAAI;AAAA,QAC3B,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,KAAK,MAAM,OAAO,IAAI,GAAG;AAAA,MAC1B;AAAA,IACD;AACA,UAAM,uBACL,SAAS,QAAQ,iBAAiB,EAAE,qBAAqB;AAC1D,SAAK,qBAAqB,wBAAwB;AAClD,SAAK,aAAa,KAAK,MAAS;AAAA,EACjC;AAAA,EAEO,SAAS,SAAyB;AACxC,QAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAElD,gBAAU,QAAQ;AAAA,IACnB;AACA,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC5B;AAAA,EAEO,oBAA6B;AACnC,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
