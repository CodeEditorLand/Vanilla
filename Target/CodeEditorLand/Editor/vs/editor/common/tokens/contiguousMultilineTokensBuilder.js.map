{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/tokens/contiguousMultilineTokensBuilder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { readUInt32BE, writeUInt32BE } from \"../../../base/common/buffer.js\";\nimport { ContiguousMultilineTokens } from \"./contiguousMultilineTokens.js\";\n\nexport class ContiguousMultilineTokensBuilder {\n\tpublic static deserialize(buff: Uint8Array): ContiguousMultilineTokens[] {\n\t\tlet offset = 0;\n\t\tconst count = readUInt32BE(buff, offset);\n\t\toffset += 4;\n\t\tconst result: ContiguousMultilineTokens[] = [];\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\toffset = ContiguousMultilineTokens.deserialize(\n\t\t\t\tbuff,\n\t\t\t\toffset,\n\t\t\t\tresult,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate readonly _tokens: ContiguousMultilineTokens[];\n\n\tconstructor() {\n\t\tthis._tokens = [];\n\t}\n\n\tpublic add(lineNumber: number, lineTokens: Uint32Array): void {\n\t\tif (this._tokens.length > 0) {\n\t\t\tconst last = this._tokens[this._tokens.length - 1];\n\t\t\tif (last.endLineNumber + 1 === lineNumber) {\n\t\t\t\t// append\n\t\t\t\tlast.appendLineTokens(lineTokens);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._tokens.push(\n\t\t\tnew ContiguousMultilineTokens(lineNumber, [lineTokens]),\n\t\t);\n\t}\n\n\tpublic finalize(): ContiguousMultilineTokens[] {\n\t\treturn this._tokens;\n\t}\n\n\tpublic serialize(): Uint8Array {\n\t\tconst size = this._serializeSize();\n\t\tconst result = new Uint8Array(size);\n\t\tthis._serialize(result);\n\t\treturn result;\n\t}\n\n\tprivate _serializeSize(): number {\n\t\tlet result = 0;\n\t\tresult += 4; // 4 bytes for the count\n\t\tfor (let i = 0; i < this._tokens.length; i++) {\n\t\t\tresult += this._tokens[i].serializeSize();\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _serialize(destination: Uint8Array): void {\n\t\tlet offset = 0;\n\t\twriteUInt32BE(destination, this._tokens.length, offset);\n\t\toffset += 4;\n\t\tfor (let i = 0; i < this._tokens.length; i++) {\n\t\t\toffset = this._tokens[i].serialize(destination, offset);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc,qBAAqB;AAC5C,SAAS,iCAAiC;AAEnC,MAAM,iCAAiC;AAAA,EAR9C,OAQ8C;AAAA;AAAA;AAAA,EAC7C,OAAc,YAAY,MAA+C;AACxE,QAAI,SAAS;AACb,UAAM,QAAQ,aAAa,MAAM,MAAM;AACvC,cAAU;AACV,UAAM,SAAsC,CAAC;AAC7C,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC/B,eAAS,0BAA0B;AAAA,QAClC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEiB;AAAA,EAEjB,cAAc;AACb,SAAK,UAAU,CAAC;AAAA,EACjB;AAAA,EAEO,IAAI,YAAoB,YAA+B;AAC7D,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC5B,YAAM,OAAO,KAAK,QAAQ,KAAK,QAAQ,SAAS,CAAC;AACjD,UAAI,KAAK,gBAAgB,MAAM,YAAY;AAE1C,aAAK,iBAAiB,UAAU;AAChC;AAAA,MACD;AAAA,IACD;AACA,SAAK,QAAQ;AAAA,MACZ,IAAI,0BAA0B,YAAY,CAAC,UAAU,CAAC;AAAA,IACvD;AAAA,EACD;AAAA,EAEO,WAAwC;AAC9C,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,YAAwB;AAC9B,UAAM,OAAO,KAAK,eAAe;AACjC,UAAM,SAAS,IAAI,WAAW,IAAI;AAClC,SAAK,WAAW,MAAM;AACtB,WAAO;AAAA,EACR;AAAA,EAEQ,iBAAyB;AAChC,QAAI,SAAS;AACb,cAAU;AACV,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,gBAAU,KAAK,QAAQ,CAAC,EAAE,cAAc;AAAA,IACzC;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,WAAW,aAA+B;AACjD,QAAI,SAAS;AACb,kBAAc,aAAa,KAAK,QAAQ,QAAQ,MAAM;AACtD,cAAU;AACV,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,eAAS,KAAK,QAAQ,CAAC,EAAE,UAAU,aAAa,MAAM;AAAA,IACvD;AAAA,EACD;AACD;",
  "names": []
}
