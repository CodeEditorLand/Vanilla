{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/tokens/contiguousTokensEditing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from \"./lineTokens.js\";\n\nexport const EMPTY_LINE_TOKENS = new Uint32Array(0).buffer;\n\nexport class ContiguousTokensEditing {\n\tpublic static deleteBeginning(\n\t\tlineTokens: Uint32Array | ArrayBuffer | null,\n\t\ttoChIndex: number,\n\t): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\treturn ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n\t}\n\n\tpublic static deleteEnding(\n\t\tlineTokens: Uint32Array | ArrayBuffer | null,\n\t\tfromChIndex: number,\n\t): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst lineTextLength = tokens[tokens.length - 2];\n\t\treturn ContiguousTokensEditing.delete(\n\t\t\tlineTokens,\n\t\t\tfromChIndex,\n\t\t\tlineTextLength,\n\t\t);\n\t}\n\n\tpublic static delete(\n\t\tlineTokens: Uint32Array | ArrayBuffer | null,\n\t\tfromChIndex: number,\n\t\ttoChIndex: number,\n\t): Uint32Array | ArrayBuffer | null {\n\t\tif (\n\t\t\tlineTokens === null ||\n\t\t\tlineTokens === EMPTY_LINE_TOKENS ||\n\t\t\tfromChIndex === toChIndex\n\t\t) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = tokens.length >>> 1;\n\n\t\t// special case: deleting everything\n\t\tif (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t}\n\n\t\tconst fromTokenIndex = LineTokens.findIndexInTokensArray(\n\t\t\ttokens,\n\t\t\tfromChIndex,\n\t\t);\n\t\tconst fromTokenStartOffset =\n\t\t\tfromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0;\n\t\tconst fromTokenEndOffset = tokens[fromTokenIndex << 1];\n\n\t\tif (toChIndex < fromTokenEndOffset) {\n\t\t\t// the delete range is inside a single token\n\t\t\tconst delta = toChIndex - fromChIndex;\n\t\t\tfor (let i = fromTokenIndex; i < tokensCount; i++) {\n\t\t\t\ttokens[i << 1] -= delta;\n\t\t\t}\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tlet dest: number;\n\t\tlet lastEnd: number;\n\t\tif (fromTokenStartOffset !== fromChIndex) {\n\t\t\ttokens[fromTokenIndex << 1] = fromChIndex;\n\t\t\tdest = (fromTokenIndex + 1) << 1;\n\t\t\tlastEnd = fromChIndex;\n\t\t} else {\n\t\t\tdest = fromTokenIndex << 1;\n\t\t\tlastEnd = fromTokenStartOffset;\n\t\t}\n\n\t\tconst delta = toChIndex - fromChIndex;\n\t\tfor (\n\t\t\tlet tokenIndex = fromTokenIndex + 1;\n\t\t\ttokenIndex < tokensCount;\n\t\t\ttokenIndex++\n\t\t) {\n\t\t\tconst tokenEndOffset = tokens[tokenIndex << 1] - delta;\n\t\t\tif (tokenEndOffset > lastEnd) {\n\t\t\t\ttokens[dest++] = tokenEndOffset;\n\t\t\t\ttokens[dest++] = tokens[(tokenIndex << 1) + 1];\n\t\t\t\tlastEnd = tokenEndOffset;\n\t\t\t}\n\t\t}\n\n\t\tif (dest === tokens.length) {\n\t\t\t// nothing to trim\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tmp = new Uint32Array(dest);\n\t\ttmp.set(tokens.subarray(0, dest), 0);\n\t\treturn tmp.buffer;\n\t}\n\n\tpublic static append(\n\t\tlineTokens: Uint32Array | ArrayBuffer | null,\n\t\t_otherTokens: Uint32Array | ArrayBuffer | null,\n\t): Uint32Array | ArrayBuffer | null {\n\t\tif (_otherTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn _otherTokens;\n\t\t}\n\t\tif (lineTokens === null) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (_otherTokens === null) {\n\t\t\t// cannot determine combined line length...\n\t\t\treturn null;\n\t\t}\n\t\tconst myTokens = toUint32Array(lineTokens);\n\t\tconst otherTokens = toUint32Array(_otherTokens);\n\t\tconst otherTokensCount = otherTokens.length >>> 1;\n\n\t\tconst result = new Uint32Array(myTokens.length + otherTokens.length);\n\t\tresult.set(myTokens, 0);\n\t\tlet dest = myTokens.length;\n\t\tconst delta = myTokens[myTokens.length - 2];\n\t\tfor (let i = 0; i < otherTokensCount; i++) {\n\t\t\tresult[dest++] = otherTokens[i << 1] + delta;\n\t\t\tresult[dest++] = otherTokens[(i << 1) + 1];\n\t\t}\n\t\treturn result.buffer;\n\t}\n\n\tpublic static insert(\n\t\tlineTokens: Uint32Array | ArrayBuffer | null,\n\t\tchIndex: number,\n\t\ttextLength: number,\n\t): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\t// nothing to do\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = tokens.length >>> 1;\n\n\t\tlet fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n\t\tif (fromTokenIndex > 0) {\n\t\t\tconst fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n\t\t\tif (fromTokenStartOffset === chIndex) {\n\t\t\t\tfromTokenIndex--;\n\t\t\t}\n\t\t}\n\t\tfor (\n\t\t\tlet tokenIndex = fromTokenIndex;\n\t\t\ttokenIndex < tokensCount;\n\t\t\ttokenIndex++\n\t\t) {\n\t\t\ttokens[tokenIndex << 1] += textLength;\n\t\t}\n\t\treturn lineTokens;\n\t}\n}\n\nexport function toUint32Array(arr: Uint32Array | ArrayBuffer): Uint32Array {\n\tif (arr instanceof Uint32Array) {\n\t\treturn arr;\n\t} else {\n\t\treturn new Uint32Array(arr);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["delta"]
}
