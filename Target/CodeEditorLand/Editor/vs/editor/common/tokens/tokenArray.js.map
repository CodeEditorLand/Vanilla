{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/tokens/tokenArray.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from \"../core/offsetRange.js\";\n\n/**\n * This class represents a sequence of tokens.\n * Conceptually, each token has a length and a metadata number.\n * A token array might be used to annotate a string with metadata.\n * Use {@link TokenArrayBuilder} to efficiently create a token array.\n *\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n */\nexport class TokenArray {\n\tpublic static create(tokenInfo: TokenInfo[]): TokenArray {\n\t\treturn new TokenArray(tokenInfo);\n\t}\n\n\tprivate constructor(private readonly _tokenInfo: TokenInfo[]) {}\n\n\tpublic forEach(\n\t\tcb: (range: OffsetRange, tokenInfo: TokenInfo) => void,\n\t): void {\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst range = new OffsetRange(\n\t\t\t\tlengthSum,\n\t\t\t\tlengthSum + tokenInfo.length,\n\t\t\t);\n\t\t\tcb(range, tokenInfo);\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t}\n\n\tpublic slice(range: OffsetRange): TokenArray {\n\t\tconst result: TokenInfo[] = [];\n\t\tlet lengthSum = 0;\n\t\tfor (const tokenInfo of this._tokenInfo) {\n\t\t\tconst tokenStart = lengthSum;\n\t\t\tconst tokenEndEx = tokenStart + tokenInfo.length;\n\t\t\tif (tokenEndEx > range.start) {\n\t\t\t\tif (tokenStart >= range.endExclusive) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst deltaBefore = Math.max(0, range.start - tokenStart);\n\t\t\t\tconst deltaAfter = Math.max(0, tokenEndEx - range.endExclusive);\n\n\t\t\t\tresult.push(\n\t\t\t\t\tnew TokenInfo(\n\t\t\t\t\t\ttokenInfo.length - deltaBefore - deltaAfter,\n\t\t\t\t\t\ttokenInfo.metadata,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlengthSum += tokenInfo.length;\n\t\t}\n\t\treturn TokenArray.create(result);\n\t}\n}\n\nexport type TokenMetadata = number;\n\nexport class TokenInfo {\n\tconstructor(\n\t\tpublic readonly length: number,\n\t\tpublic readonly metadata: TokenMetadata,\n\t) {}\n}\n\n/**\n * TODO: Make this class more efficient (e.g. by using a Int32Array).\n */\nexport class TokenArrayBuilder {\n\tprivate readonly _tokens: TokenInfo[] = [];\n\n\tpublic add(length: number, metadata: TokenMetadata): void {\n\t\tthis._tokens.push(new TokenInfo(length, metadata));\n\t}\n\n\tpublic build(): TokenArray {\n\t\treturn TokenArray.create(this._tokens);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAUrB,MAAM,WAAW;AAAA,EAKf,YAA6B,YAAyB;AAAzB;AAAA,EAA0B;AAAA,EApBhE,OAewB;AAAA;AAAA;AAAA,EACvB,OAAc,OAAO,WAAoC;AACxD,WAAO,IAAI,WAAW,SAAS;AAAA,EAChC;AAAA,EAIO,QACN,IACO;AACP,QAAI,YAAY;AAChB,eAAW,aAAa,KAAK,YAAY;AACxC,YAAM,QAAQ,IAAI;AAAA,QACjB;AAAA,QACA,YAAY,UAAU;AAAA,MACvB;AACA,SAAG,OAAO,SAAS;AACnB,mBAAa,UAAU;AAAA,IACxB;AAAA,EACD;AAAA,EAEO,MAAM,OAAgC;AAC5C,UAAM,SAAsB,CAAC;AAC7B,QAAI,YAAY;AAChB,eAAW,aAAa,KAAK,YAAY;AACxC,YAAM,aAAa;AACnB,YAAM,aAAa,aAAa,UAAU;AAC1C,UAAI,aAAa,MAAM,OAAO;AAC7B,YAAI,cAAc,MAAM,cAAc;AACrC;AAAA,QACD;AAEA,cAAM,cAAc,KAAK,IAAI,GAAG,MAAM,QAAQ,UAAU;AACxD,cAAM,aAAa,KAAK,IAAI,GAAG,aAAa,MAAM,YAAY;AAE9D,eAAO;AAAA,UACN,IAAI;AAAA,YACH,UAAU,SAAS,cAAc;AAAA,YACjC,UAAU;AAAA,UACX;AAAA,QACD;AAAA,MACD;AAEA,mBAAa,UAAU;AAAA,IACxB;AACA,WAAO,WAAW,OAAO,MAAM;AAAA,EAChC;AACD;AAIO,MAAM,UAAU;AAAA,EACtB,YACiB,QACA,UACf;AAFe;AACA;AAAA,EACd;AAAA,EAtEJ,OAkEuB;AAAA;AAAA;AAKvB;AAKO,MAAM,kBAAkB;AAAA,EA5E/B,OA4E+B;AAAA;AAAA;AAAA,EACb,UAAuB,CAAC;AAAA,EAElC,IAAI,QAAgB,UAA+B;AACzD,SAAK,QAAQ,KAAK,IAAI,UAAU,QAAQ,QAAQ,CAAC;AAAA,EAClD;AAAA,EAEO,QAAoB;AAC1B,WAAO,WAAW,OAAO,KAAK,OAAO;AAAA,EACtC;AACD;",
  "names": []
}
