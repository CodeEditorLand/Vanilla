var I=class s{lineNumber;column;constructor(n,t){this.lineNumber=n,this.column=t}with(n=this.lineNumber,t=this.column){return n===this.lineNumber&&t===this.column?this:new s(n,t)}delta(n=0,t=0){return this.with(this.lineNumber+n,this.column+t)}equals(n){return s.equals(this,n)}static equals(n,t){return!n&&!t?!0:!!n&&!!t&&n.lineNumber===t.lineNumber&&n.column===t.column}isBefore(n){return s.isBefore(this,n)}static isBefore(n,t){return n.lineNumber<t.lineNumber?!0:t.lineNumber<n.lineNumber?!1:n.column<t.column}isBeforeOrEqual(n){return s.isBeforeOrEqual(this,n)}static isBeforeOrEqual(n,t){return n.lineNumber<t.lineNumber?!0:t.lineNumber<n.lineNumber?!1:n.column<=t.column}static compare(n,t){let i=n.lineNumber|0,u=t.lineNumber|0;if(i===u){let e=n.column|0,_=t.column|0;return e-_}return i-u}clone(){return new s(this.lineNumber,this.column)}toString(){return"("+this.lineNumber+","+this.column+")"}static lift(n){return new s(n.lineNumber,n.column)}static isIPosition(n){return n&&typeof n.lineNumber=="number"&&typeof n.column=="number"}toJSON(){return{lineNumber:this.lineNumber,column:this.column}}};var U=class s{startLineNumber;startColumn;endLineNumber;endColumn;constructor(n,t,i,u){n>i||n===i&&t>u?(this.startLineNumber=i,this.startColumn=u,this.endLineNumber=n,this.endColumn=t):(this.startLineNumber=n,this.startColumn=t,this.endLineNumber=i,this.endColumn=u)}isEmpty(){return s.isEmpty(this)}static isEmpty(n){return n.startLineNumber===n.endLineNumber&&n.startColumn===n.endColumn}containsPosition(n){return s.containsPosition(this,n)}static containsPosition(n,t){return!(t.lineNumber<n.startLineNumber||t.lineNumber>n.endLineNumber||t.lineNumber===n.startLineNumber&&t.column<n.startColumn||t.lineNumber===n.endLineNumber&&t.column>n.endColumn)}static strictContainsPosition(n,t){return!(t.lineNumber<n.startLineNumber||t.lineNumber>n.endLineNumber||t.lineNumber===n.startLineNumber&&t.column<=n.startColumn||t.lineNumber===n.endLineNumber&&t.column>=n.endColumn)}containsRange(n){return s.containsRange(this,n)}static containsRange(n,t){return!(t.startLineNumber<n.startLineNumber||t.endLineNumber<n.startLineNumber||t.startLineNumber>n.endLineNumber||t.endLineNumber>n.endLineNumber||t.startLineNumber===n.startLineNumber&&t.startColumn<n.startColumn||t.endLineNumber===n.endLineNumber&&t.endColumn>n.endColumn)}strictContainsRange(n){return s.strictContainsRange(this,n)}static strictContainsRange(n,t){return!(t.startLineNumber<n.startLineNumber||t.endLineNumber<n.startLineNumber||t.startLineNumber>n.endLineNumber||t.endLineNumber>n.endLineNumber||t.startLineNumber===n.startLineNumber&&t.startColumn<=n.startColumn||t.endLineNumber===n.endLineNumber&&t.endColumn>=n.endColumn)}plusRange(n){return s.plusRange(this,n)}static plusRange(n,t){let i,u,e,_;return t.startLineNumber<n.startLineNumber?(i=t.startLineNumber,u=t.startColumn):t.startLineNumber===n.startLineNumber?(i=t.startLineNumber,u=Math.min(t.startColumn,n.startColumn)):(i=n.startLineNumber,u=n.startColumn),t.endLineNumber>n.endLineNumber?(e=t.endLineNumber,_=t.endColumn):t.endLineNumber===n.endLineNumber?(e=t.endLineNumber,_=Math.max(t.endColumn,n.endColumn)):(e=n.endLineNumber,_=n.endColumn),new s(i,u,e,_)}intersectRanges(n){return s.intersectRanges(this,n)}static intersectRanges(n,t){let i=n.startLineNumber,u=n.startColumn,e=n.endLineNumber,_=n.endColumn,m=t.startLineNumber,L=t.startColumn,E=t.endLineNumber,r=t.endColumn;return i<m?(i=m,u=L):i===m&&(u=Math.max(u,L)),e>E?(e=E,_=r):e===E&&(_=Math.min(_,r)),i>e||i===e&&u>_?null:new s(i,u,e,_)}equalsRange(n){return s.equalsRange(this,n)}static equalsRange(n,t){return!n&&!t?!0:!!n&&!!t&&n.startLineNumber===t.startLineNumber&&n.startColumn===t.startColumn&&n.endLineNumber===t.endLineNumber&&n.endColumn===t.endColumn}getEndPosition(){return s.getEndPosition(this)}static getEndPosition(n){return new I(n.endLineNumber,n.endColumn)}getStartPosition(){return s.getStartPosition(this)}static getStartPosition(n){return new I(n.startLineNumber,n.startColumn)}toString(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"}setEndPosition(n,t){return new s(this.startLineNumber,this.startColumn,n,t)}setStartPosition(n,t){return new s(n,t,this.endLineNumber,this.endColumn)}collapseToStart(){return s.collapseToStart(this)}static collapseToStart(n){return new s(n.startLineNumber,n.startColumn,n.startLineNumber,n.startColumn)}collapseToEnd(){return s.collapseToEnd(this)}static collapseToEnd(n){return new s(n.endLineNumber,n.endColumn,n.endLineNumber,n.endColumn)}delta(n){return new s(this.startLineNumber+n,this.startColumn,this.endLineNumber+n,this.endColumn)}static fromPositions(n,t=n){return new s(n.lineNumber,n.column,t.lineNumber,t.column)}static lift(n){return n?new s(n.startLineNumber,n.startColumn,n.endLineNumber,n.endColumn):null}static isIRange(n){return n&&typeof n.startLineNumber=="number"&&typeof n.startColumn=="number"&&typeof n.endLineNumber=="number"&&typeof n.endColumn=="number"}static areIntersectingOrTouching(n,t){return!(n.endLineNumber<t.startLineNumber||n.endLineNumber===t.startLineNumber&&n.endColumn<t.startColumn||t.endLineNumber<n.startLineNumber||t.endLineNumber===n.startLineNumber&&t.endColumn<n.startColumn)}static areIntersecting(n,t){return!(n.endLineNumber<t.startLineNumber||n.endLineNumber===t.startLineNumber&&n.endColumn<=t.startColumn||t.endLineNumber<n.startLineNumber||t.endLineNumber===n.startLineNumber&&t.endColumn<=n.startColumn)}static compareRangesUsingStarts(n,t){if(n&&t){let e=n.startLineNumber|0,_=t.startLineNumber|0;if(e===_){let m=n.startColumn|0,L=t.startColumn|0;if(m===L){let E=n.endLineNumber|0,r=t.endLineNumber|0;if(E===r){let N=n.endColumn|0,c=t.endColumn|0;return N-c}return E-r}return m-L}return e-_}return(n?1:0)-(t?1:0)}static compareRangesUsingEnds(n,t){return n.endLineNumber===t.endLineNumber?n.endColumn===t.endColumn?n.startLineNumber===t.startLineNumber?n.startColumn-t.startColumn:n.startLineNumber-t.startLineNumber:n.endColumn-t.endColumn:n.endLineNumber-t.endLineNumber}static spansMultipleLines(n){return n.endLineNumber>n.startLineNumber}toJSON(){return this}};function A(s){let n=0,t=0,i=0,u=0;for(let e=0,_=s.length;e<_;e++){let m=s.charCodeAt(e);m===13?(n===0&&(t=e),n++,e+1<_&&s.charCodeAt(e+1)===10?(u|=2,e++):u|=3,i=e+1):m===10&&(u|=1,n===0&&(t=e),n++,i=e+1)}return n===0&&(t=s.length),[n,t,s.length-i,u]}var f=class s{static create(n,t){return new s(n,new T(t))}_startLineNumber;_endLineNumber;_tokens;get startLineNumber(){return this._startLineNumber}get endLineNumber(){return this._endLineNumber}constructor(n,t){this._startLineNumber=n,this._tokens=t,this._endLineNumber=this._startLineNumber+this._tokens.getMaxDeltaLine()}toString(){return this._tokens.toString(this._startLineNumber)}_updateEndLineNumber(){this._endLineNumber=this._startLineNumber+this._tokens.getMaxDeltaLine()}isEmpty(){return this._tokens.isEmpty()}getLineTokens(n){return this._startLineNumber<=n&&n<=this._endLineNumber?this._tokens.getLineTokens(n-this._startLineNumber):null}getRange(){let n=this._tokens.getRange();return n&&new U(this._startLineNumber+n.startLineNumber,n.startColumn,this._startLineNumber+n.endLineNumber,n.endColumn)}removeTokens(n){let t=n.startLineNumber-this._startLineNumber,i=n.endLineNumber-this._startLineNumber;this._startLineNumber+=this._tokens.removeTokens(t,n.startColumn-1,i,n.endColumn-1),this._updateEndLineNumber()}split(n){let t=n.startLineNumber-this._startLineNumber,i=n.endLineNumber-this._startLineNumber,[u,e,_]=this._tokens.split(t,n.startColumn-1,i,n.endColumn-1);return[new s(this._startLineNumber,u),new s(this._startLineNumber+_,e)]}applyEdit(n,t){let[i,u,e]=A(t);this.acceptEdit(n,i,u,e,t.length>0?t.charCodeAt(0):0)}acceptEdit(n,t,i,u,e){this._acceptDeleteRange(n),this._acceptInsertText(new I(n.startLineNumber,n.startColumn),t,i,u,e),this._updateEndLineNumber()}_acceptDeleteRange(n){if(n.startLineNumber===n.endLineNumber&&n.startColumn===n.endColumn)return;let t=n.startLineNumber-this._startLineNumber,i=n.endLineNumber-this._startLineNumber;if(i<0){let e=i-t;this._startLineNumber-=e;return}let u=this._tokens.getMaxDeltaLine();if(!(t>=u+1)){if(t<0&&i>=u+1){this._startLineNumber=0,this._tokens.clear();return}if(t<0){let e=-t;this._startLineNumber-=e,this._tokens.acceptDeleteRange(n.startColumn-1,0,0,i,n.endColumn-1)}else this._tokens.acceptDeleteRange(0,t,n.startColumn-1,i,n.endColumn-1)}}_acceptInsertText(n,t,i,u,e){if(t===0&&i===0)return;let _=n.lineNumber-this._startLineNumber;if(_<0){this._startLineNumber+=t;return}let m=this._tokens.getMaxDeltaLine();_>=m+1||this._tokens.acceptInsertText(_,n.column-1,t,i,u,e)}},T=class s{_tokens;_tokenCount;constructor(n){this._tokens=n,this._tokenCount=n.length/4}toString(n){let t=[];for(let i=0;i<this._tokenCount;i++)t.push(`(${this._getDeltaLine(i)+n},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);return`[${t.join(",")}]`}getMaxDeltaLine(){let n=this._getTokenCount();return n===0?-1:this._getDeltaLine(n-1)}getRange(){let n=this._getTokenCount();if(n===0)return null;let t=this._getStartCharacter(0),i=this._getDeltaLine(n-1),u=this._getEndCharacter(n-1);return new U(0,t+1,i,u+1)}_getTokenCount(){return this._tokenCount}_getDeltaLine(n){return this._tokens[4*n]}_getStartCharacter(n){return this._tokens[4*n+1]}_getEndCharacter(n){return this._tokens[4*n+2]}isEmpty(){return this._getTokenCount()===0}getLineTokens(n){let t=0,i=this._getTokenCount()-1;for(;t<i;){let u=t+Math.floor((i-t)/2),e=this._getDeltaLine(u);if(e<n)t=u+1;else if(e>n)i=u-1;else{let _=u;for(;_>t&&this._getDeltaLine(_-1)===n;)_--;let m=u;for(;m<i&&this._getDeltaLine(m+1)===n;)m++;return new o(this._tokens.subarray(4*_,4*m+4))}}return this._getDeltaLine(t)===n?new o(this._tokens.subarray(4*t,4*t+4)):null}clear(){this._tokenCount=0}removeTokens(n,t,i,u){let e=this._tokens,_=this._tokenCount,m=0,L=!1,E=0;for(let r=0;r<_;r++){let N=4*r,c=e[N],l=e[N+1],b=e[N+2],R=e[N+3];if((c>n||c===n&&b>=t)&&(c<i||c===i&&l<=u))L=!0;else{if(m===0&&(E=c),L){let g=4*m;e[g]=c-E,e[g+1]=l,e[g+2]=b,e[g+3]=R}m++}}return this._tokenCount=m,E}split(n,t,i,u){let e=this._tokens,_=this._tokenCount,m=[],L=[],E=m,r=0,N=0;for(let c=0;c<_;c++){let l=4*c,b=e[l],R=e[l+1],g=e[l+2],x=e[l+3];if(b>n||b===n&&g>=t){if(b<i||b===i&&R<=u)continue;E!==L&&(E=L,r=0,N=b)}E[r++]=b-N,E[r++]=R,E[r++]=g,E[r++]=x}return[new s(new Uint32Array(m)),new s(new Uint32Array(L)),N]}acceptDeleteRange(n,t,i,u,e){let _=this._tokens,m=this._tokenCount,L=u-t,E=0,r=!1;for(let N=0;N<m;N++){let c=4*N,l=_[c],b=_[c+1],R=_[c+2],g=_[c+3];if(l<t||l===t&&R<=i){E++;continue}else if(l===t&&b<i)l===u&&R>e?R-=e-i:R=i;else if(l===t&&b===i)if(l===u&&R>e)R-=e-i;else{r=!0;continue}else if(l<u||l===u&&b<e)if(l===u&&R>e)l=t,b=i,R=b+(R-e);else{r=!0;continue}else if(l>u){if(L===0&&!r){E=m;break}l-=L}else if(l===u&&b>=e)n&&l===0&&(b+=n,R+=n),l-=L,b-=e-i,R-=e-i;else throw new Error("Not possible!");let x=4*E;_[x]=l,_[x+1]=b,_[x+2]=R,_[x+3]=g,E++}this._tokenCount=E}acceptInsertText(n,t,i,u,e,_){let m=i===0&&u===1&&(_>=48&&_<=57||_>=65&&_<=90||_>=97&&_<=122),L=this._tokens,E=this._tokenCount;for(let r=0;r<E;r++){let N=4*r,c=L[N],l=L[N+1],b=L[N+2];if(!(c<n||c===n&&b<t)){if(c===n&&b===t)if(m)b+=1;else continue;else if(c===n&&l<t&&t<b)i===0?b+=u:b=t;else{if(c===n&&l===t&&m)continue;if(c===n)if(c+=i,i===0)l+=u,b+=u;else{let R=b-l;l=e+(l-t),b=l+R}else c+=i}L[N]=c,L[N+1]=l,L[N+2]=b}}}},o=class{_tokens;constructor(n){this._tokens=n}getCount(){return this._tokens.length/4}getStartCharacter(n){return this._tokens[4*n+1]}getEndCharacter(n){return this._tokens[4*n+2]}getMetadata(n){return this._tokens[4*n+3]}};export{o as SparseLineTokens,f as SparseMultilineTokens};
