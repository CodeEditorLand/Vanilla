{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/commands/replaceCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Range } from \"../core/range.js\";\nimport { Selection, SelectionDirection } from \"../core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../editorCommon.js\";\nimport type { ITextModel } from \"../model.js\";\n\nexport class ReplaceCommand implements ICommand {\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatSelectsText implements ICommand {\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\n\tconstructor(range: Range, text: string) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromRange(srcRange, SelectionDirection.LTR);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition implements ICommand {\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getStartPosition());\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState implements ICommand {\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _columnDeltaOffset: number;\n\tprivate readonly _lineNumberDeltaOffset: number;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(\n\t\trange: Range,\n\t\ttext: string,\n\t\tlineNumberDeltaOffset: number,\n\t\tcolumnDeltaOffset: number,\n\t\tinsertsAutoWhitespace = false,\n\t) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(\n\t\t\tsrcRange\n\t\t\t\t.getEndPosition()\n\t\t\t\t.delta(this._lineNumberDeltaOffset, this._columnDeltaOffset),\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection implements ICommand {\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _initialSelection: Selection;\n\tprivate readonly _forceMoveMarkers: boolean;\n\tprivate _selectionId: string | null;\n\n\tconstructor(\n\t\teditRange: Range,\n\t\ttext: string,\n\t\tinitialSelection: Selection,\n\t\tforceMoveMarkers = false,\n\t) {\n\t\tthis._range = editRange;\n\t\tthis._text = text;\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._forceMoveMarkers = forceMoveMarkers;\n\t\tthis._selectionId = null;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tbuilder.addTrackedEditOperation(\n\t\t\tthis._range,\n\t\t\tthis._text,\n\t\t\tthis._forceMoveMarkers,\n\t\t);\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
