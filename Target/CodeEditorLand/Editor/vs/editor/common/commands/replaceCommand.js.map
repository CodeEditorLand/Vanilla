{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/commands/replaceCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { Selection, SelectionDirection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\n\nexport class ReplaceCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatSelectsText implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\n\tconstructor(range: Range, text: string) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromRange(srcRange, SelectionDirection.LTR);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getStartPosition());\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _columnDeltaOffset: number;\n\tprivate readonly _lineNumberDeltaOffset: number;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, lineNumberDeltaOffset: number, columnDeltaOffset: number, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _initialSelection: Selection;\n\tprivate readonly _forceMoveMarkers: boolean;\n\tprivate _selectionId: string | null;\n\n\tconstructor(editRange: Range, text: string, initialSelection: Selection, forceMoveMarkers: boolean = false) {\n\t\tthis._range = editRange;\n\t\tthis._text = text;\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._forceMoveMarkers = forceMoveMarkers;\n\t\tthis._selectionId = null;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
