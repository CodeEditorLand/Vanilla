{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from \"../../../base/common/strings.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../core/editOperation.js\";\nimport type { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport type { Selection } from \"../core/selection.js\";\nimport type {\n\tICommand,\n\tICursorStateComputerData,\n\tIEditOperationBuilder,\n} from \"../editorCommon.js\";\nimport { StandardTokenType } from \"../encodedTokenAttributes.js\";\nimport type { ITextModel } from \"../model.js\";\n\nexport class TrimTrailingWhitespaceCommand implements ICommand {\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate readonly _cursors: Position[];\n\tprivate readonly _trimInRegexesAndStrings: boolean;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\tcursors: Position[],\n\t\ttrimInRegexesAndStrings: boolean,\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._cursors = cursors;\n\t\tthis._selectionId = null;\n\t\tthis._trimInRegexesAndStrings = trimInRegexesAndStrings;\n\t}\n\n\tpublic getEditOperations(\n\t\tmodel: ITextModel,\n\t\tbuilder: IEditOperationBuilder,\n\t): void {\n\t\tconst ops = trimTrailingWhitespace(\n\t\t\tmodel,\n\t\t\tthis._cursors,\n\t\t\tthis._trimInRegexesAndStrings,\n\t\t);\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(\n\tmodel: ITextModel,\n\tcursors: Position[],\n\ttrimInRegexesAndStrings: boolean,\n): ISingleEditOperation[] {\n\t// Sort cursors ascending\n\tcursors.sort((a, b) => {\n\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\treturn a.column - b.column;\n\t\t}\n\t\treturn a.lineNumber - b.lineNumber;\n\t});\n\n\t// Reduce multiple cursors on the same line and only keep the last one on the line\n\tfor (let i = cursors.length - 2; i >= 0; i--) {\n\t\tif (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n\t\t\t// Remove cursor at `i`\n\t\t\tcursors.splice(i, 1);\n\t\t}\n\t}\n\n\tconst r: ISingleEditOperation[] = [];\n\tlet rLen = 0;\n\tlet cursorIndex = 0;\n\tconst cursorLen = cursors.length;\n\n\tfor (\n\t\tlet lineNumber = 1, lineCount = model.getLineCount();\n\t\tlineNumber <= lineCount;\n\t\tlineNumber++\n\t) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst maxLineColumn = lineContent.length + 1;\n\t\tlet minEditColumn = 0;\n\n\t\tif (\n\t\t\tcursorIndex < cursorLen &&\n\t\t\tcursors[cursorIndex].lineNumber === lineNumber\n\t\t) {\n\t\t\tminEditColumn = cursors[cursorIndex].column;\n\t\t\tcursorIndex++;\n\t\t\tif (minEditColumn === maxLineColumn) {\n\t\t\t\t// The cursor is at the end of the line => no edits for sure on this line\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (lineContent.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst lastNonWhitespaceIndex =\n\t\t\tstrings.lastNonWhitespaceIndex(lineContent);\n\n\t\tlet fromColumn = 0;\n\t\tif (lastNonWhitespaceIndex === -1) {\n\t\t\t// Entire line is whitespace\n\t\t\tfromColumn = 1;\n\t\t} else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n\t\t\t// There is trailing whitespace\n\t\t\tfromColumn = lastNonWhitespaceIndex + 2;\n\t\t} else {\n\t\t\t// There is no trailing whitespace\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!trimInRegexesAndStrings) {\n\t\t\tif (!model.tokenization.hasAccurateTokensForLine(lineNumber)) {\n\t\t\t\t// We don't want to force line tokenization, as that can be expensive, but we also don't want to trim\n\t\t\t\t// trailing whitespace in lines that are not tokenized yet, as that can be wrong and trim whitespace from\n\t\t\t\t// lines that the user requested we don't. So we bail out if the tokens are not accurate for this line.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst fromColumnType = lineTokens.getStandardTokenType(\n\t\t\t\tlineTokens.findTokenIndexAtOffset(fromColumn),\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tfromColumnType === StandardTokenType.String ||\n\t\t\t\tfromColumnType === StandardTokenType.RegEx\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tfromColumn = Math.max(minEditColumn, fromColumn);\n\t\tr[rLen++] = EditOperation.delete(\n\t\t\tnew Range(lineNumber, fromColumn, lineNumber, maxLineColumn),\n\t\t);\n\t}\n\n\treturn r;\n}\n"],
  "mappings": ";;AAKA,YAAY,aAAa;AACzB;AAAA,EACC;AAAA,OAEM;AAEP,SAAS,aAAa;AAOtB,SAAS,yBAAyB;AAG3B,MAAM,8BAAkD;AAAA,EArB/D,OAqB+D;AAAA;AAAA;AAAA,EAC7C;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EAEjB,YACC,WACA,SACA,yBACC;AACD,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,2BAA2B;AAAA,EACjC;AAAA,EAEO,kBACN,OACA,SACO;AACP,UAAM,MAAM;AAAA,MACX;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AACA,aAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC/C,YAAM,KAAK,IAAI,CAAC;AAEhB,cAAQ,iBAAiB,GAAG,OAAO,GAAG,IAAI;AAAA,IAC3C;AAEA,SAAK,eAAe,QAAQ,eAAe,KAAK,UAAU;AAAA,EAC3D;AAAA,EAEO,mBACN,OACA,QACY;AACZ,WAAO,OAAO,oBAAoB,KAAK,YAAa;AAAA,EACrD;AACD;AAKO,SAAS,uBACf,OACA,SACA,yBACyB;AAEzB,UAAQ,KAAK,CAAC,GAAG,MAAM;AACtB,QAAI,EAAE,eAAe,EAAE,YAAY;AAClC,aAAO,EAAE,SAAS,EAAE;AAAA,IACrB;AACA,WAAO,EAAE,aAAa,EAAE;AAAA,EACzB,CAAC;AAGD,WAAS,IAAI,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,QAAI,QAAQ,CAAC,EAAE,eAAe,QAAQ,IAAI,CAAC,EAAE,YAAY;AAExD,cAAQ,OAAO,GAAG,CAAC;AAAA,IACpB;AAAA,EACD;AAEA,QAAM,IAA4B,CAAC;AACnC,MAAI,OAAO;AACX,MAAI,cAAc;AAClB,QAAM,YAAY,QAAQ;AAE1B,WACK,aAAa,GAAG,YAAY,MAAM,aAAa,GACnD,cAAc,WACd,cACC;AACD,UAAM,cAAc,MAAM,eAAe,UAAU;AACnD,UAAM,gBAAgB,YAAY,SAAS;AAC3C,QAAI,gBAAgB;AAEpB,QACC,cAAc,aACd,QAAQ,WAAW,EAAE,eAAe,YACnC;AACD,sBAAgB,QAAQ,WAAW,EAAE;AACrC;AACA,UAAI,kBAAkB,eAAe;AAEpC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,YAAY,WAAW,GAAG;AAC7B;AAAA,IACD;AAEA,UAAM,yBACL,QAAQ,uBAAuB,WAAW;AAE3C,QAAI,aAAa;AACjB,QAAI,2BAA2B,IAAI;AAElC,mBAAa;AAAA,IACd,WAAW,2BAA2B,YAAY,SAAS,GAAG;AAE7D,mBAAa,yBAAyB;AAAA,IACvC,OAAO;AAEN;AAAA,IACD;AAEA,QAAI,CAAC,yBAAyB;AAC7B,UAAI,CAAC,MAAM,aAAa,yBAAyB,UAAU,GAAG;AAI7D;AAAA,MACD;AAEA,YAAM,aAAa,MAAM,aAAa,cAAc,UAAU;AAC9D,YAAM,iBAAiB,WAAW;AAAA,QACjC,WAAW,uBAAuB,UAAU;AAAA,MAC7C;AAEA,UACC,mBAAmB,kBAAkB,UACrC,mBAAmB,kBAAkB,OACpC;AACD;AAAA,MACD;AAAA,IACD;AAEA,iBAAa,KAAK,IAAI,eAAe,UAAU;AAC/C,MAAE,MAAM,IAAI,cAAc;AAAA,MACzB,IAAI,MAAM,YAAY,YAAY,YAAY,aAAa;AAAA,IAC5D;AAAA,EACD;AAEA,SAAO;AACR;AA9FgB;",
  "names": []
}
