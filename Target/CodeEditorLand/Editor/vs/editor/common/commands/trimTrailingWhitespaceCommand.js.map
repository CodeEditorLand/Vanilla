{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../base/common/strings.js';\nimport { EditOperation, ISingleEditOperation } from '../core/editOperation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from '../editorCommon.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ITextModel } from '../model.js';\n\nexport class TrimTrailingWhitespaceCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate readonly _cursors: Position[];\n\tprivate readonly _trimInRegexesAndStrings: boolean;\n\n\tconstructor(selection: Selection, cursors: Position[], trimInRegexesAndStrings: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._cursors = cursors;\n\t\tthis._selectionId = null;\n\t\tthis._trimInRegexesAndStrings = trimInRegexesAndStrings;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst ops = trimTrailingWhitespace(model, this._cursors, this._trimInRegexesAndStrings);\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tconst op = ops[i];\n\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model: ITextModel, cursors: Position[], trimInRegexesAndStrings: boolean): ISingleEditOperation[] {\n\t// Sort cursors ascending\n\tcursors.sort((a, b) => {\n\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\treturn a.column - b.column;\n\t\t}\n\t\treturn a.lineNumber - b.lineNumber;\n\t});\n\n\t// Reduce multiple cursors on the same line and only keep the last one on the line\n\tfor (let i = cursors.length - 2; i >= 0; i--) {\n\t\tif (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n\t\t\t// Remove cursor at `i`\n\t\t\tcursors.splice(i, 1);\n\t\t}\n\t}\n\n\tconst r: ISingleEditOperation[] = [];\n\tlet rLen = 0;\n\tlet cursorIndex = 0;\n\tconst cursorLen = cursors.length;\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst maxLineColumn = lineContent.length + 1;\n\t\tlet minEditColumn = 0;\n\n\t\tif (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n\t\t\tminEditColumn = cursors[cursorIndex].column;\n\t\t\tcursorIndex++;\n\t\t\tif (minEditColumn === maxLineColumn) {\n\t\t\t\t// The cursor is at the end of the line => no edits for sure on this line\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (lineContent.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\tlet fromColumn = 0;\n\t\tif (lastNonWhitespaceIndex === -1) {\n\t\t\t// Entire line is whitespace\n\t\t\tfromColumn = 1;\n\t\t} else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n\t\t\t// There is trailing whitespace\n\t\t\tfromColumn = lastNonWhitespaceIndex + 2;\n\t\t} else {\n\t\t\t// There is no trailing whitespace\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!trimInRegexesAndStrings) {\n\t\t\tif (!model.tokenization.hasAccurateTokensForLine(lineNumber)) {\n\t\t\t\t// We don't want to force line tokenization, as that can be expensive, but we also don't want to trim\n\t\t\t\t// trailing whitespace in lines that are not tokenized yet, as that can be wrong and trim whitespace from\n\t\t\t\t// lines that the user requested we don't. So we bail out if the tokens are not accurate for this line.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst fromColumnType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(fromColumn));\n\n\t\t\tif (fromColumnType === StandardTokenType.String || fromColumnType === StandardTokenType.RegEx) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tfromColumn = Math.max(minEditColumn, fromColumn);\n\t\tr[rLen++] = EditOperation.delete(new Range(\n\t\t\tlineNumber, fromColumn,\n\t\t\tlineNumber, maxLineColumn\n\t\t));\n\t}\n\n\treturn r;\n}\n"],
  "mappings": ";;AAKA,YAAY,aAAa;AACzB,SAAS,eAAe,4BAA4B;AACpD,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,UAAU,0BAA0B,6BAA6B;AAC1E,SAAS,yBAAyB;AAClC,SAAS,kBAAkB;AAEpB,MAAM,8BAAkD;AAAA,EAd/D,OAc+D;AAAA;AAAA;AAAA,EAE7C;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EAEjB,YAAY,WAAsB,SAAqB,yBAAkC;AACxF,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,2BAA2B;AAAA,EACjC;AAAA,EAEO,kBAAkB,OAAmB,SAAsC;AACjF,UAAM,MAAM,uBAAuB,OAAO,KAAK,UAAU,KAAK,wBAAwB;AACtF,aAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC/C,YAAM,KAAK,IAAI,CAAC;AAEhB,cAAQ,iBAAiB,GAAG,OAAO,GAAG,IAAI;AAAA,IAC3C;AAEA,SAAK,eAAe,QAAQ,eAAe,KAAK,UAAU;AAAA,EAC3D;AAAA,EAEO,mBAAmB,OAAmB,QAA6C;AACzF,WAAO,OAAO,oBAAoB,KAAK,YAAa;AAAA,EACrD;AACD;AAKO,SAAS,uBAAuB,OAAmB,SAAqB,yBAA0D;AAExI,UAAQ,KAAK,CAAC,GAAG,MAAM;AACtB,QAAI,EAAE,eAAe,EAAE,YAAY;AAClC,aAAO,EAAE,SAAS,EAAE;AAAA,IACrB;AACA,WAAO,EAAE,aAAa,EAAE;AAAA,EACzB,CAAC;AAGD,WAAS,IAAI,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,QAAI,QAAQ,CAAC,EAAE,eAAe,QAAQ,IAAI,CAAC,EAAE,YAAY;AAExD,cAAQ,OAAO,GAAG,CAAC;AAAA,IACpB;AAAA,EACD;AAEA,QAAM,IAA4B,CAAC;AACnC,MAAI,OAAO;AACX,MAAI,cAAc;AAClB,QAAM,YAAY,QAAQ;AAE1B,WAAS,aAAa,GAAG,YAAY,MAAM,aAAa,GAAG,cAAc,WAAW,cAAc;AACjG,UAAM,cAAc,MAAM,eAAe,UAAU;AACnD,UAAM,gBAAgB,YAAY,SAAS;AAC3C,QAAI,gBAAgB;AAEpB,QAAI,cAAc,aAAa,QAAQ,WAAW,EAAE,eAAe,YAAY;AAC9E,sBAAgB,QAAQ,WAAW,EAAE;AACrC;AACA,UAAI,kBAAkB,eAAe;AAEpC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,YAAY,WAAW,GAAG;AAC7B;AAAA,IACD;AAEA,UAAM,yBAAyB,QAAQ,uBAAuB,WAAW;AAEzE,QAAI,aAAa;AACjB,QAAI,2BAA2B,IAAI;AAElC,mBAAa;AAAA,IACd,WAAW,2BAA2B,YAAY,SAAS,GAAG;AAE7D,mBAAa,yBAAyB;AAAA,IACvC,OAAO;AAEN;AAAA,IACD;AAEA,QAAI,CAAC,yBAAyB;AAC7B,UAAI,CAAC,MAAM,aAAa,yBAAyB,UAAU,GAAG;AAI7D;AAAA,MACD;AAEA,YAAM,aAAa,MAAM,aAAa,cAAc,UAAU;AAC9D,YAAM,iBAAiB,WAAW,qBAAqB,WAAW,uBAAuB,UAAU,CAAC;AAEpG,UAAI,mBAAmB,kBAAkB,UAAU,mBAAmB,kBAAkB,OAAO;AAC9F;AAAA,MACD;AAAA,IACD;AAEA,iBAAa,KAAK,IAAI,eAAe,UAAU;AAC/C,MAAE,MAAM,IAAI,cAAc,OAAO,IAAI;AAAA,MACpC;AAAA,MAAY;AAAA,MACZ;AAAA,MAAY;AAAA,IACb,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AA9EgB;",
  "names": []
}
