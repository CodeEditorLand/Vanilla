{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/diff/rangeMapping.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from \"../../../base/common/errors.js\";\nimport { LineRange } from \"../core/lineRange.js\";\nimport { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport { type AbstractText, SingleTextEdit } from \"../core/textEdit.js\";\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n\tpublic static inverse(\n\t\tmapping: readonly LineRangeMapping[],\n\t\toriginalLineCount: number,\n\t\tmodifiedLineCount: number,\n\t): LineRangeMapping[] {\n\t\tconst result: LineRangeMapping[] = [];\n\t\tlet lastOriginalEndLineNumber = 1;\n\t\tlet lastModifiedEndLineNumber = 1;\n\n\t\tfor (const m of mapping) {\n\t\t\tconst r = new LineRangeMapping(\n\t\t\t\tnew LineRange(\n\t\t\t\t\tlastOriginalEndLineNumber,\n\t\t\t\t\tm.original.startLineNumber,\n\t\t\t\t),\n\t\t\t\tnew LineRange(\n\t\t\t\t\tlastModifiedEndLineNumber,\n\t\t\t\t\tm.modified.startLineNumber,\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (!r.modified.isEmpty) {\n\t\t\t\tresult.push(r);\n\t\t\t}\n\t\t\tlastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n\t\t\tlastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n\t\t}\n\t\tconst r = new LineRangeMapping(\n\t\t\tnew LineRange(lastOriginalEndLineNumber, originalLineCount + 1),\n\t\t\tnew LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1),\n\t\t);\n\t\tif (!r.modified.isEmpty) {\n\t\t\tresult.push(r);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static clip(\n\t\tmapping: readonly LineRangeMapping[],\n\t\toriginalRange: LineRange,\n\t\tmodifiedRange: LineRange,\n\t): LineRangeMapping[] {\n\t\tconst result: LineRangeMapping[] = [];\n\t\tfor (const m of mapping) {\n\t\t\tconst original = m.original.intersect(originalRange);\n\t\t\tconst modified = m.modified.intersect(modifiedRange);\n\t\t\tif (\n\t\t\t\toriginal &&\n\t\t\t\t!original.isEmpty &&\n\t\t\t\tmodified &&\n\t\t\t\t!modified.isEmpty\n\t\t\t) {\n\t\t\t\tresult.push(new LineRangeMapping(original, modified));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * The line range in the original text model.\n\t */\n\tpublic readonly original: LineRange;\n\n\t/**\n\t * The line range in the modified text model.\n\t */\n\tpublic readonly modified: LineRange;\n\n\tconstructor(originalRange: LineRange, modifiedRange: LineRange) {\n\t\tthis.original = originalRange;\n\t\tthis.modified = modifiedRange;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `{${this.original.toString()}->${this.modified.toString()}}`;\n\t}\n\n\tpublic flip(): LineRangeMapping {\n\t\treturn new LineRangeMapping(this.modified, this.original);\n\t}\n\n\tpublic join(other: LineRangeMapping): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.original.join(other.original),\n\t\t\tthis.modified.join(other.modified),\n\t\t);\n\t}\n\n\tpublic get changedLineCount() {\n\t\treturn Math.max(this.original.length, this.modified.length);\n\t}\n\n\t/**\n\t * This method assumes that the LineRangeMapping describes a valid diff!\n\t * I.e. if one range is empty, the other range cannot be the entire document.\n\t * It avoids various problems when the line range points to non-existing line-numbers.\n\t */\n\tpublic toRangeMapping(): RangeMapping {\n\t\tconst origInclusiveRange = this.original.toInclusiveRange();\n\t\tconst modInclusiveRange = this.modified.toInclusiveRange();\n\t\tif (origInclusiveRange && modInclusiveRange) {\n\t\t\treturn new RangeMapping(origInclusiveRange, modInclusiveRange);\n\t\t} else if (\n\t\t\tthis.original.startLineNumber === 1 ||\n\t\t\tthis.modified.startLineNumber === 1\n\t\t) {\n\t\t\tif (\n\t\t\t\t!(\n\t\t\t\t\tthis.modified.startLineNumber === 1 &&\n\t\t\t\t\tthis.original.startLineNumber === 1\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// If one line range starts at 1, the other one must start at 1 as well.\n\t\t\t\tthrow new BugIndicatingError(\"not a valid diff\");\n\t\t\t}\n\n\t\t\t// Because one range is empty and both ranges start at line 1, none of the ranges can cover all lines.\n\t\t\t// Thus, `endLineNumberExclusive` is a valid line number.\n\t\t\treturn new RangeMapping(\n\t\t\t\tnew Range(\n\t\t\t\t\tthis.original.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tthis.original.endLineNumberExclusive,\n\t\t\t\t\t1,\n\t\t\t\t),\n\t\t\t\tnew Range(\n\t\t\t\t\tthis.modified.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tthis.modified.endLineNumberExclusive,\n\t\t\t\t\t1,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\t// We can assume here that both startLineNumbers are greater than 1.\n\t\t\treturn new RangeMapping(\n\t\t\t\tnew Range(\n\t\t\t\t\tthis.original.startLineNumber - 1,\n\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\tthis.original.endLineNumberExclusive - 1,\n\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t),\n\t\t\t\tnew Range(\n\t\t\t\t\tthis.modified.startLineNumber - 1,\n\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\tthis.modified.endLineNumberExclusive - 1,\n\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * This method assumes that the LineRangeMapping describes a valid diff!\n\t * I.e. if one range is empty, the other range cannot be the entire document.\n\t * It avoids various problems when the line range points to non-existing line-numbers.\n\t */\n\tpublic toRangeMapping2(\n\t\toriginal: string[],\n\t\tmodified: string[],\n\t): RangeMapping {\n\t\tif (\n\t\t\tisValidLineNumber(this.original.endLineNumberExclusive, original) &&\n\t\t\tisValidLineNumber(this.modified.endLineNumberExclusive, modified)\n\t\t) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tnew Range(\n\t\t\t\t\tthis.original.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tthis.original.endLineNumberExclusive,\n\t\t\t\t\t1,\n\t\t\t\t),\n\t\t\t\tnew Range(\n\t\t\t\t\tthis.modified.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tthis.modified.endLineNumberExclusive,\n\t\t\t\t\t1,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (!this.original.isEmpty && !this.modified.isEmpty) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnew Position(this.original.startLineNumber, 1),\n\t\t\t\t\tnormalizePosition(\n\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\tthis.original.endLineNumberExclusive - 1,\n\t\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t),\n\t\t\t\t\t\toriginal,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnew Position(this.modified.startLineNumber, 1),\n\t\t\t\t\tnormalizePosition(\n\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\tthis.modified.endLineNumberExclusive - 1,\n\t\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tmodified,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tthis.original.startLineNumber > 1 &&\n\t\t\tthis.modified.startLineNumber > 1\n\t\t) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnormalizePosition(\n\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\tthis.original.startLineNumber - 1,\n\t\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t),\n\t\t\t\t\t\toriginal,\n\t\t\t\t\t),\n\t\t\t\t\tnormalizePosition(\n\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\tthis.original.endLineNumberExclusive - 1,\n\t\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t),\n\t\t\t\t\t\toriginal,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnormalizePosition(\n\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\tthis.modified.startLineNumber - 1,\n\t\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tmodified,\n\t\t\t\t\t),\n\t\t\t\t\tnormalizePosition(\n\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\tthis.modified.endLineNumberExclusive - 1,\n\t\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tmodified,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Situation now: one range is empty and one range touches the last line and one range starts at line 1.\n\t\t// I don't think this can happen.\n\n\t\tthrow new BugIndicatingError();\n\t}\n}\n\nfunction normalizePosition(position: Position, content: string[]): Position {\n\tif (position.lineNumber < 1) {\n\t\treturn new Position(1, 1);\n\t}\n\tif (position.lineNumber > content.length) {\n\t\treturn new Position(\n\t\t\tcontent.length,\n\t\t\tcontent[content.length - 1].length + 1,\n\t\t);\n\t}\n\tconst line = content[position.lineNumber - 1];\n\tif (position.column > line.length + 1) {\n\t\treturn new Position(position.lineNumber, line.length + 1);\n\t}\n\treturn position;\n}\n\nfunction isValidLineNumber(lineNumber: number, lines: string[]): boolean {\n\treturn lineNumber >= 1 && lineNumber <= lines.length;\n}\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n\tpublic static fromRangeMappings(\n\t\trangeMappings: RangeMapping[],\n\t): DetailedLineRangeMapping {\n\t\tconst originalRange = LineRange.join(\n\t\t\trangeMappings.map((r) =>\n\t\t\t\tLineRange.fromRangeInclusive(r.originalRange),\n\t\t\t),\n\t\t);\n\t\tconst modifiedRange = LineRange.join(\n\t\t\trangeMappings.map((r) =>\n\t\t\t\tLineRange.fromRangeInclusive(r.modifiedRange),\n\t\t\t),\n\t\t);\n\t\treturn new DetailedLineRangeMapping(\n\t\t\toriginalRange,\n\t\t\tmodifiedRange,\n\t\t\trangeMappings,\n\t\t);\n\t}\n\n\t/**\n\t * If inner changes have not been computed, this is set to undefined.\n\t * Otherwise, it represents the character-level diff in this line range.\n\t * The original range of each range mapping should be contained in the original line range (same for modified), exceptions are new-lines.\n\t * Must not be an empty array.\n\t */\n\tpublic readonly innerChanges: RangeMapping[] | undefined;\n\n\tconstructor(\n\t\toriginalRange: LineRange,\n\t\tmodifiedRange: LineRange,\n\t\tinnerChanges: RangeMapping[] | undefined,\n\t) {\n\t\tsuper(originalRange, modifiedRange);\n\t\tthis.innerChanges = innerChanges;\n\t}\n\n\tpublic override flip(): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.modified,\n\t\t\tthis.original,\n\t\t\tthis.innerChanges?.map((c) => c.flip()),\n\t\t);\n\t}\n\n\tpublic withInnerChangesFromLineRanges(): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(this.original, this.modified, [\n\t\t\tthis.toRangeMapping(),\n\t\t]);\n\t}\n}\n\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n\tpublic static assertSorted(rangeMappings: RangeMapping[]): void {\n\t\tfor (let i = 1; i < rangeMappings.length; i++) {\n\t\t\tconst previous = rangeMappings[i - 1];\n\t\t\tconst current = rangeMappings[i];\n\t\t\tif (\n\t\t\t\t!(\n\t\t\t\t\tprevious.originalRange\n\t\t\t\t\t\t.getEndPosition()\n\t\t\t\t\t\t.isBeforeOrEqual(\n\t\t\t\t\t\t\tcurrent.originalRange.getStartPosition(),\n\t\t\t\t\t\t) &&\n\t\t\t\t\tprevious.modifiedRange\n\t\t\t\t\t\t.getEndPosition()\n\t\t\t\t\t\t.isBeforeOrEqual(\n\t\t\t\t\t\t\tcurrent.modifiedRange.getStartPosition(),\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new BugIndicatingError(\"Range mappings must be sorted\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The original range.\n\t */\n\treadonly originalRange: Range;\n\n\t/**\n\t * The modified range.\n\t */\n\treadonly modifiedRange: Range;\n\n\tconstructor(originalRange: Range, modifiedRange: Range) {\n\t\tthis.originalRange = originalRange;\n\t\tthis.modifiedRange = modifiedRange;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n\t}\n\n\tpublic flip(): RangeMapping {\n\t\treturn new RangeMapping(this.modifiedRange, this.originalRange);\n\t}\n\n\t/**\n\t * Creates a single text edit that describes the change from the original to the modified text.\n\t */\n\tpublic toTextEdit(modified: AbstractText): SingleTextEdit {\n\t\tconst newText = modified.getValueOfRange(this.modifiedRange);\n\t\treturn new SingleTextEdit(this.originalRange, newText);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["r"]
}
