import{CharCode as S}from"../../../base/common/charCode.js";import{LcsDiff as R}from"../../../base/common/diff/diff.js";import{LinesDiff as T}from"./linesDiffComputer.js";import{RangeMapping as q,DetailedLineRangeMapping as D}from"./rangeMapping.js";import*as y from"../../../base/common/strings.js";import{Range as _}from"../core/range.js";import{assertFn as A,checkAdjacentItems as W}from"../../../base/common/assert.js";import{LineRange as N}from"../core/lineRange.js";const k=3;class Z{computeDiff(e,n,i){const t=new O(e,n,{maxComputationTime:i.maxComputationTimeMs,shouldIgnoreTrimWhitespace:i.ignoreTrimWhitespace,shouldComputeCharChanges:!0,shouldMakePrettyDiff:!0,shouldPostProcessCharChanges:!0}).computeDiff(),u=[];let a=null;for(const r of t.changes){let o;r.originalEndLineNumber===0?o=new N(r.originalStartLineNumber+1,r.originalStartLineNumber+1):o=new N(r.originalStartLineNumber,r.originalEndLineNumber+1);let c;r.modifiedEndLineNumber===0?c=new N(r.modifiedStartLineNumber+1,r.modifiedStartLineNumber+1):c=new N(r.modifiedStartLineNumber,r.modifiedEndLineNumber+1);let m=new D(o,c,r.charChanges?.map(l=>new q(new _(l.originalStartLineNumber,l.originalStartColumn,l.originalEndLineNumber,l.originalEndColumn),new _(l.modifiedStartLineNumber,l.modifiedStartColumn,l.modifiedEndLineNumber,l.modifiedEndColumn))));a&&(a.modified.endLineNumberExclusive===m.modified.startLineNumber||a.original.endLineNumberExclusive===m.original.startLineNumber)&&(m=new D(a.original.join(m.original),a.modified.join(m.modified),a.innerChanges&&m.innerChanges?a.innerChanges.concat(m.innerChanges):void 0),u.pop()),u.push(m),a=m}return A(()=>W(u,(r,o)=>o.original.startLineNumber-r.original.endLineNumberExclusive===o.modified.startLineNumber-r.modified.endLineNumberExclusive&&r.original.endLineNumberExclusive<o.original.startLineNumber&&r.modified.endLineNumberExclusive<o.modified.startLineNumber)),new T(u,[],t.quitEarly)}}function x(h,e,n,i){return new R(h,e,n).ComputeDiff(i)}class v{lines;_startColumns;_endColumns;constructor(e){const n=[],i=[];for(let s=0,t=e.length;s<t;s++)n[s]=E(e[s],1),i[s]=I(e[s],1);this.lines=e,this._startColumns=n,this._endColumns=i}getElements(){const e=[];for(let n=0,i=this.lines.length;n<i;n++)e[n]=this.lines[n].substring(this._startColumns[n]-1,this._endColumns[n]-1);return e}getStrictElement(e){return this.lines[e]}getStartLineNumber(e){return e+1}getEndLineNumber(e){return e+1}createCharSequence(e,n,i){const s=[],t=[],u=[];let a=0;for(let r=n;r<=i;r++){const o=this.lines[r],c=e?this._startColumns[r]:1,m=e?this._endColumns[r]:o.length+1;for(let l=c;l<m;l++)s[a]=o.charCodeAt(l-1),t[a]=r+1,u[a]=l,a++;!e&&r<i&&(s[a]=S.LineFeed,t[a]=r+1,u[a]=o.length+1,a++)}return new F(s,t,u)}}class F{_charCodes;_lineNumbers;_columns;constructor(e,n,i){this._charCodes=e,this._lineNumbers=n,this._columns=i}toString(){return"["+this._charCodes.map((e,n)=>(e===S.LineFeed?"\\n":String.fromCharCode(e))+`-(${this._lineNumbers[n]},${this._columns[n]})`).join(", ")+"]"}_assertIndex(e,n){if(e<0||e>=n.length)throw new Error("Illegal index")}getElements(){return this._charCodes}getStartLineNumber(e){return e>0&&e===this._lineNumbers.length?this.getEndLineNumber(e-1):(this._assertIndex(e,this._lineNumbers),this._lineNumbers[e])}getEndLineNumber(e){return e===-1?this.getStartLineNumber(e+1):(this._assertIndex(e,this._lineNumbers),this._charCodes[e]===S.LineFeed?this._lineNumbers[e]+1:this._lineNumbers[e])}getStartColumn(e){return e>0&&e===this._columns.length?this.getEndColumn(e-1):(this._assertIndex(e,this._columns),this._columns[e])}getEndColumn(e){return e===-1?this.getStartColumn(e+1):(this._assertIndex(e,this._columns),this._charCodes[e]===S.LineFeed?1:this._columns[e]+1)}}class p{originalStartLineNumber;originalStartColumn;originalEndLineNumber;originalEndColumn;modifiedStartLineNumber;modifiedStartColumn;modifiedEndLineNumber;modifiedEndColumn;constructor(e,n,i,s,t,u,a,r){this.originalStartLineNumber=e,this.originalStartColumn=n,this.originalEndLineNumber=i,this.originalEndColumn=s,this.modifiedStartLineNumber=t,this.modifiedStartColumn=u,this.modifiedEndLineNumber=a,this.modifiedEndColumn=r}static createFromDiffChange(e,n,i){const s=n.getStartLineNumber(e.originalStart),t=n.getStartColumn(e.originalStart),u=n.getEndLineNumber(e.originalStart+e.originalLength-1),a=n.getEndColumn(e.originalStart+e.originalLength-1),r=i.getStartLineNumber(e.modifiedStart),o=i.getStartColumn(e.modifiedStart),c=i.getEndLineNumber(e.modifiedStart+e.modifiedLength-1),m=i.getEndColumn(e.modifiedStart+e.modifiedLength-1);return new p(s,t,u,a,r,o,c,m)}}function j(h){if(h.length<=1)return h;const e=[h[0]];let n=e[0];for(let i=1,s=h.length;i<s;i++){const t=h[i],u=t.originalStart-(n.originalStart+n.originalLength),a=t.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(u,a)<k?(n.originalLength=t.originalStart+t.originalLength-n.originalStart,n.modifiedLength=t.modifiedStart+t.modifiedLength-n.modifiedStart):(e.push(t),n=t)}return e}class L{originalStartLineNumber;originalEndLineNumber;modifiedStartLineNumber;modifiedEndLineNumber;charChanges;constructor(e,n,i,s,t){this.originalStartLineNumber=e,this.originalEndLineNumber=n,this.modifiedStartLineNumber=i,this.modifiedEndLineNumber=s,this.charChanges=t}static createFromDiffResult(e,n,i,s,t,u,a){let r,o,c,m,l;if(n.originalLength===0?(r=i.getStartLineNumber(n.originalStart)-1,o=0):(r=i.getStartLineNumber(n.originalStart),o=i.getEndLineNumber(n.originalStart+n.originalLength-1)),n.modifiedLength===0?(c=s.getStartLineNumber(n.modifiedStart)-1,m=0):(c=s.getStartLineNumber(n.modifiedStart),m=s.getEndLineNumber(n.modifiedStart+n.modifiedLength-1)),u&&n.originalLength>0&&n.originalLength<20&&n.modifiedLength>0&&n.modifiedLength<20&&t()){const b=i.createCharSequence(e,n.originalStart,n.originalStart+n.originalLength-1),g=s.createCharSequence(e,n.modifiedStart,n.modifiedStart+n.modifiedLength-1);if(b.getElements().length>0&&g.getElements().length>0){let d=x(b,g,t,!0).changes;a&&(d=j(d)),l=[];for(let f=0,C=d.length;f<C;f++)l.push(p.createFromDiffChange(d[f],b,g))}}return new L(r,o,c,m,l)}}class O{shouldComputeCharChanges;shouldPostProcessCharChanges;shouldIgnoreTrimWhitespace;shouldMakePrettyDiff;originalLines;modifiedLines;original;modified;continueLineDiff;continueCharDiff;constructor(e,n,i){this.shouldComputeCharChanges=i.shouldComputeCharChanges,this.shouldPostProcessCharChanges=i.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=i.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=i.shouldMakePrettyDiff,this.originalLines=e,this.modifiedLines=n,this.original=new v(e),this.modified=new v(n),this.continueLineDiff=w(i.maxComputationTime),this.continueCharDiff=w(i.maxComputationTime===0?0:Math.min(i.maxComputationTime,5e3))}computeDiff(){if(this.original.lines.length===1&&this.original.lines[0].length===0)return this.modified.lines.length===1&&this.modified.lines[0].length===0?{quitEarly:!1,changes:[]}:{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.lines.length,charChanges:void 0}]};if(this.modified.lines.length===1&&this.modified.lines[0].length===0)return{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:this.original.lines.length,modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:void 0}]};const e=x(this.original,this.modified,this.continueLineDiff,this.shouldMakePrettyDiff),n=e.changes,i=e.quitEarly;if(this.shouldIgnoreTrimWhitespace){const a=[];for(let r=0,o=n.length;r<o;r++)a.push(L.createFromDiffResult(this.shouldIgnoreTrimWhitespace,n[r],this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges));return{quitEarly:i,changes:a}}const s=[];let t=0,u=0;for(let a=-1,r=n.length;a<r;a++){const o=a+1<r?n[a+1]:null,c=o?o.originalStart:this.originalLines.length,m=o?o.modifiedStart:this.modifiedLines.length;for(;t<c&&u<m;){const l=this.originalLines[t],b=this.modifiedLines[u];if(l!==b){{let g=E(l,1),d=E(b,1);for(;g>1&&d>1;){const f=l.charCodeAt(g-2),C=b.charCodeAt(d-2);if(f!==C)break;g--,d--}(g>1||d>1)&&this._pushTrimWhitespaceCharChange(s,t+1,1,g,u+1,1,d)}{let g=I(l,1),d=I(b,1);const f=l.length+1,C=b.length+1;for(;g<f&&d<C;){const P=l.charCodeAt(g-1),M=l.charCodeAt(d-1);if(P!==M)break;g++,d++}(g<f||d<C)&&this._pushTrimWhitespaceCharChange(s,t+1,g,f,u+1,d,C)}}t++,u++}o&&(s.push(L.createFromDiffResult(this.shouldIgnoreTrimWhitespace,o,this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges)),t+=o.originalLength,u+=o.modifiedLength)}return{quitEarly:i,changes:s}}_pushTrimWhitespaceCharChange(e,n,i,s,t,u,a){if(this._mergeTrimWhitespaceCharChange(e,n,i,s,t,u,a))return;let r;this.shouldComputeCharChanges&&(r=[new p(n,i,n,s,t,u,t,a)]),e.push(new L(n,n,t,t,r))}_mergeTrimWhitespaceCharChange(e,n,i,s,t,u,a){const r=e.length;if(r===0)return!1;const o=e[r-1];return o.originalEndLineNumber===0||o.modifiedEndLineNumber===0?!1:o.originalEndLineNumber===n&&o.modifiedEndLineNumber===t?(this.shouldComputeCharChanges&&o.charChanges&&o.charChanges.push(new p(n,i,n,s,t,u,t,a)),!0):o.originalEndLineNumber+1===n&&o.modifiedEndLineNumber+1===t?(o.originalEndLineNumber=n,o.modifiedEndLineNumber=t,this.shouldComputeCharChanges&&o.charChanges&&o.charChanges.push(new p(n,i,n,s,t,u,t,a)),!0):!1}}function E(h,e){const n=y.firstNonWhitespaceIndex(h);return n===-1?e:n+1}function I(h,e){const n=y.lastNonWhitespaceIndex(h);return n===-1?e:n+2}function w(h){if(h===0)return()=>!0;const e=Date.now();return()=>Date.now()-e<h}export{O as DiffComputer,Z as LegacyLinesDiffComputer};
