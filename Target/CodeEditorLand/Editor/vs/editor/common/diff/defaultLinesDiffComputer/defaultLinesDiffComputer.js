import{equals as B}from"../../../../base/common/arrays.js";import{assertFn as A}from"../../../../base/common/assert.js";import{LineRange as T}from"../../core/lineRange.js";import{OffsetRange as O}from"../../core/offsetRange.js";import"../../core/position.js";import{Range as N}from"../../core/range.js";import{ArrayText as S}from"../../core/textEdit.js";import{LinesDiff as y,MovedText as V}from"../linesDiffComputer.js";import{DetailedLineRangeMapping as k,LineRangeMapping as j,lineRangeMappingFromRangeMappings as d,RangeMapping as P}from"../rangeMapping.js";import{DateTimeout as G,InfiniteTimeout as J,SequenceDiff as D}from"./algorithms/diffAlgorithm.js";import{DynamicProgrammingDiffing as K}from"./algorithms/dynamicProgrammingDiffing.js";import{MyersDiffAlgorithm as Q}from"./algorithms/myersDiffAlgorithm.js";import{computeMovedLines as U}from"./computeMovedLines.js";import{extendDiffsToEntireWordIfAppropriate as X,optimizeSequenceDiffs as W,removeShortMatches as Y,removeVeryShortMatchingLinesBetweenDiffs as Z,removeVeryShortMatchingTextBetweenLongDiffs as _}from"./heuristicSequenceOptimizations.js";import{LineSequence as H}from"./lineSequence.js";import{LinesSliceCharSequence as F}from"./linesSliceCharSequence.js";class ve{dynamicProgrammingDiffing=new K;myersDiffingAlgorithm=new Q;computeDiff(t,e,u){if(t.length<=1&&B(t,e,(n,o)=>n===o))return new y([],[],!1);if(t.length===1&&t[0].length===0||e.length===1&&e[0].length===0)return new y([new k(new T(1,t.length+1),new T(1,e.length+1),[new P(new N(1,1,t.length,t[t.length-1].length+1),new N(1,1,e.length,e[e.length-1].length+1))])],[],!1);const c=u.maxComputationTimeMs===0?J.instance:new G(u.maxComputationTimeMs),p=!u.ignoreTrimWhitespace,h=new Map;function R(n){let o=h.get(n);return o===void 0&&(o=h.size,h.set(n,o)),o}const f=t.map(n=>R(n.trim())),g=e.map(n=>R(n.trim())),m=new H(f,t),i=new H(g,e),s=m.length+i.length<1700?this.dynamicProgrammingDiffing.compute(m,i,c,(n,o)=>t[n]===e[o]?e[o].length===0?.1:1+Math.log(1+e[o].length):.99):this.myersDiffingAlgorithm.compute(m,i,c);let l=s.diffs,w=s.hitTimeout;l=W(m,i,l),l=Z(m,i,l);const b=[],E=n=>{if(p)for(let o=0;o<n;o++){const r=M+o,a=x+o;if(t[r]!==e[a]){const q=this.refineDiff(t,e,new D(new O(r,r+1),new O(a,a+1)),c,p);for(const z of q.mappings)b.push(z);q.hitTimeout&&(w=!0)}}};let M=0,x=0;for(const n of l){A(()=>n.seq1Range.start-M===n.seq2Range.start-x);const o=n.seq1Range.start-M;E(o),M=n.seq1Range.endExclusive,x=n.seq2Range.endExclusive;const r=this.refineDiff(t,e,n,c,p);r.hitTimeout&&(w=!0);for(const a of r.mappings)b.push(a)}E(t.length-M);const C=d(b,new S(t),new S(e));let I=[];return u.computeMoves&&(I=this.computeMoves(C,t,e,f,g,c,p)),A(()=>{function n(r,a){if(r.lineNumber<1||r.lineNumber>a.length)return!1;const q=a[r.lineNumber-1];return!(r.column<1||r.column>q.length+1)}function o(r,a){return!(r.startLineNumber<1||r.startLineNumber>a.length+1||r.endLineNumberExclusive<1||r.endLineNumberExclusive>a.length+1)}for(const r of C){if(!r.innerChanges)return!1;for(const a of r.innerChanges)if(!(n(a.modifiedRange.getStartPosition(),e)&&n(a.modifiedRange.getEndPosition(),e)&&n(a.originalRange.getStartPosition(),t)&&n(a.originalRange.getEndPosition(),t)))return!1;if(!o(r.modified,e)||!o(r.original,t))return!1}return!0}),new y(C,I,w)}computeMoves(t,e,u,c,p,h,R){return U(t,e,u,c,p,h).map(m=>{const i=this.refineDiff(e,u,new D(m.original.toOffsetRange(),m.modified.toOffsetRange()),h,R),s=d(i.mappings,new S(e),new S(u),!0);return new V(m,s)})}refineDiff(t,e,u,c,p){const R=$(u).toRangeMapping2(t,e),f=new F(t,R.originalRange,p),g=new F(e,R.modifiedRange,p),m=f.length+g.length<500?this.dynamicProgrammingDiffing.compute(f,g,c):this.myersDiffingAlgorithm.compute(f,g,c),i=!1;let s=m.diffs;i&&D.assertSorted(s),s=W(f,g,s),i&&D.assertSorted(s),s=X(f,g,s),i&&D.assertSorted(s),s=Y(f,g,s),i&&D.assertSorted(s),s=_(f,g,s),i&&D.assertSorted(s);const l=s.map(w=>new P(f.translateRange(w.seq1Range),g.translateRange(w.seq2Range)));return i&&P.assertSorted(l),{mappings:l,hitTimeout:m.hitTimeout}}}function $(v){return new j(new T(v.seq1Range.start+1,v.seq1Range.endExclusive+1),new T(v.seq2Range.start+1,v.seq2Range.endExclusive+1))}export{ve as DefaultLinesDiffComputer};
