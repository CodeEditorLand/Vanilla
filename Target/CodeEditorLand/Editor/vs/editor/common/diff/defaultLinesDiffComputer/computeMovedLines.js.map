{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tcompareBy,\n\tnumberComparator,\n\tpushMany,\n\treverseOrder,\n} from \"../../../../base/common/arrays.js\";\nimport {\n\tMonotonousArray,\n\tfindLastMonotonous,\n} from \"../../../../base/common/arraysFind.js\";\nimport { SetMap } from \"../../../../base/common/map.js\";\nimport { LineRange, LineRangeSet } from \"../../core/lineRange.js\";\nimport { Range } from \"../../core/range.js\";\nimport {\n\ttype DetailedLineRangeMapping,\n\tLineRangeMapping,\n} from \"../rangeMapping.js\";\nimport { type ITimeout, SequenceDiff } from \"./algorithms/diffAlgorithm.js\";\nimport { MyersDiffAlgorithm } from \"./algorithms/myersDiffAlgorithm.js\";\nimport { LinesSliceCharSequence } from \"./linesSliceCharSequence.js\";\nimport { LineRangeFragment, isSpace } from \"./utils.js\";\n\nexport function computeMovedLines(\n\tchanges: DetailedLineRangeMapping[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\thashedOriginalLines: number[],\n\thashedModifiedLines: number[],\n\ttimeout: ITimeout,\n): LineRangeMapping[] {\n\tlet { moves, excludedChanges } =\n\t\tcomputeMovesFromSimpleDeletionsToSimpleInsertions(\n\t\t\tchanges,\n\t\t\toriginalLines,\n\t\t\tmodifiedLines,\n\t\t\ttimeout,\n\t\t);\n\n\tif (!timeout.isValid()) {\n\t\treturn [];\n\t}\n\n\tconst filteredChanges = changes.filter((c) => !excludedChanges.has(c));\n\tconst unchangedMoves = computeUnchangedMoves(\n\t\tfilteredChanges,\n\t\thashedOriginalLines,\n\t\thashedModifiedLines,\n\t\toriginalLines,\n\t\tmodifiedLines,\n\t\ttimeout,\n\t);\n\tpushMany(moves, unchangedMoves);\n\n\tmoves = joinCloseConsecutiveMoves(moves);\n\t// Ignore too short moves\n\tmoves = moves.filter((current) => {\n\t\tconst lines = current.original\n\t\t\t.toOffsetRange()\n\t\t\t.slice(originalLines)\n\t\t\t.map((l) => l.trim());\n\t\tconst originalText = lines.join(\"\\n\");\n\t\treturn (\n\t\t\toriginalText.length >= 15 &&\n\t\t\tcountWhere(lines, (l) => l.length >= 2) >= 2\n\t\t);\n\t});\n\tmoves = removeMovesInSameDiff(changes, moves);\n\n\treturn moves;\n}\n\nfunction countWhere<T>(arr: T[], predicate: (t: T) => boolean): number {\n\tlet count = 0;\n\tfor (const t of arr) {\n\t\tif (predicate(t)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(\n\tchanges: DetailedLineRangeMapping[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\ttimeout: ITimeout,\n) {\n\tconst moves: LineRangeMapping[] = [];\n\n\tconst deletions = changes\n\t\t.filter((c) => c.modified.isEmpty && c.original.length >= 3)\n\t\t.map((d) => new LineRangeFragment(d.original, originalLines, d));\n\tconst insertions = new Set(\n\t\tchanges\n\t\t\t.filter((c) => c.original.isEmpty && c.modified.length >= 3)\n\t\t\t.map((d) => new LineRangeFragment(d.modified, modifiedLines, d)),\n\t);\n\n\tconst excludedChanges = new Set<DetailedLineRangeMapping>();\n\n\tfor (const deletion of deletions) {\n\t\tlet highestSimilarity = -1;\n\t\tlet best: LineRangeFragment | undefined;\n\t\tfor (const insertion of insertions) {\n\t\t\tconst similarity = deletion.computeSimilarity(insertion);\n\t\t\tif (similarity > highestSimilarity) {\n\t\t\t\thighestSimilarity = similarity;\n\t\t\t\tbest = insertion;\n\t\t\t}\n\t\t}\n\n\t\tif (highestSimilarity > 0.9 && best) {\n\t\t\tinsertions.delete(best);\n\t\t\tmoves.push(new LineRangeMapping(deletion.range, best.range));\n\t\t\texcludedChanges.add(deletion.source);\n\t\t\texcludedChanges.add(best.source);\n\t\t}\n\n\t\tif (!timeout.isValid()) {\n\t\t\treturn { moves, excludedChanges };\n\t\t}\n\t}\n\n\treturn { moves, excludedChanges };\n}\n\nfunction computeUnchangedMoves(\n\tchanges: DetailedLineRangeMapping[],\n\thashedOriginalLines: number[],\n\thashedModifiedLines: number[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\ttimeout: ITimeout,\n) {\n\tconst moves: LineRangeMapping[] = [];\n\n\tconst original3LineHashes = new SetMap<string, { range: LineRange }>();\n\n\tfor (const change of changes) {\n\t\tfor (\n\t\t\tlet i = change.original.startLineNumber;\n\t\t\ti < change.original.endLineNumberExclusive - 2;\n\t\t\ti++\n\t\t) {\n\t\t\tconst key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n\t\t\toriginal3LineHashes.add(key, { range: new LineRange(i, i + 3) });\n\t\t}\n\t}\n\n\tinterface PossibleMapping {\n\t\tmodifiedLineRange: LineRange;\n\t\toriginalLineRange: LineRange;\n\t}\n\n\tconst possibleMappings: PossibleMapping[] = [];\n\n\tchanges.sort(\n\t\tcompareBy((c) => c.modified.startLineNumber, numberComparator),\n\t);\n\n\tfor (const change of changes) {\n\t\tlet lastMappings: PossibleMapping[] = [];\n\t\tfor (\n\t\t\tlet i = change.modified.startLineNumber;\n\t\t\ti < change.modified.endLineNumberExclusive - 2;\n\t\t\ti++\n\t\t) {\n\t\t\tconst key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n\t\t\tconst currentModifiedRange = new LineRange(i, i + 3);\n\n\t\t\tconst nextMappings: PossibleMapping[] = [];\n\t\t\toriginal3LineHashes.forEach(key, ({ range }) => {\n\t\t\t\tfor (const lastMapping of lastMappings) {\n\t\t\t\t\t// does this match extend some last match?\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastMapping.originalLineRange.endLineNumberExclusive +\n\t\t\t\t\t\t\t1 ===\n\t\t\t\t\t\t\trange.endLineNumberExclusive &&\n\t\t\t\t\t\tlastMapping.modifiedLineRange.endLineNumberExclusive +\n\t\t\t\t\t\t\t1 ===\n\t\t\t\t\t\t\tcurrentModifiedRange.endLineNumberExclusive\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastMapping.originalLineRange = new LineRange(\n\t\t\t\t\t\t\tlastMapping.originalLineRange.startLineNumber,\n\t\t\t\t\t\t\trange.endLineNumberExclusive,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlastMapping.modifiedLineRange = new LineRange(\n\t\t\t\t\t\t\tlastMapping.modifiedLineRange.startLineNumber,\n\t\t\t\t\t\t\tcurrentModifiedRange.endLineNumberExclusive,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnextMappings.push(lastMapping);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst mapping: PossibleMapping = {\n\t\t\t\t\tmodifiedLineRange: currentModifiedRange,\n\t\t\t\t\toriginalLineRange: range,\n\t\t\t\t};\n\t\t\t\tpossibleMappings.push(mapping);\n\t\t\t\tnextMappings.push(mapping);\n\t\t\t});\n\t\t\tlastMappings = nextMappings;\n\t\t}\n\n\t\tif (!timeout.isValid()) {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpossibleMappings.sort(\n\t\treverseOrder(\n\t\t\tcompareBy((m) => m.modifiedLineRange.length, numberComparator),\n\t\t),\n\t);\n\n\tconst modifiedSet = new LineRangeSet();\n\tconst originalSet = new LineRangeSet();\n\n\tfor (const mapping of possibleMappings) {\n\t\tconst diffOrigToMod =\n\t\t\tmapping.modifiedLineRange.startLineNumber -\n\t\t\tmapping.originalLineRange.startLineNumber;\n\t\tconst modifiedSections = modifiedSet.subtractFrom(\n\t\t\tmapping.modifiedLineRange,\n\t\t);\n\t\tconst originalTranslatedSections = originalSet\n\t\t\t.subtractFrom(mapping.originalLineRange)\n\t\t\t.getWithDelta(diffOrigToMod);\n\n\t\tconst modifiedIntersectedSections = modifiedSections.getIntersection(\n\t\t\toriginalTranslatedSections,\n\t\t);\n\n\t\tfor (const s of modifiedIntersectedSections.ranges) {\n\t\t\tif (s.length < 3) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst modifiedLineRange = s;\n\t\t\tconst originalLineRange = s.delta(-diffOrigToMod);\n\n\t\t\tmoves.push(\n\t\t\t\tnew LineRangeMapping(originalLineRange, modifiedLineRange),\n\t\t\t);\n\n\t\t\tmodifiedSet.addRange(modifiedLineRange);\n\t\t\toriginalSet.addRange(originalLineRange);\n\t\t}\n\t}\n\n\tmoves.sort(compareBy((m) => m.original.startLineNumber, numberComparator));\n\n\tconst monotonousChanges = new MonotonousArray(changes);\n\tfor (let i = 0; i < moves.length; i++) {\n\t\tconst move = moves[i];\n\t\tconst firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(\n\t\t\t(c) => c.original.startLineNumber <= move.original.startLineNumber,\n\t\t)!;\n\t\tconst firstTouchingChangeMod = findLastMonotonous(\n\t\t\tchanges,\n\t\t\t(c) => c.modified.startLineNumber <= move.modified.startLineNumber,\n\t\t)!;\n\t\tconst linesAbove = Math.max(\n\t\t\tmove.original.startLineNumber -\n\t\t\t\tfirstTouchingChangeOrig.original.startLineNumber,\n\t\t\tmove.modified.startLineNumber -\n\t\t\t\tfirstTouchingChangeMod.modified.startLineNumber,\n\t\t);\n\n\t\tconst lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(\n\t\t\t(c) =>\n\t\t\t\tc.original.startLineNumber <\n\t\t\t\tmove.original.endLineNumberExclusive,\n\t\t)!;\n\t\tconst lastTouchingChangeMod = findLastMonotonous(\n\t\t\tchanges,\n\t\t\t(c) =>\n\t\t\t\tc.modified.startLineNumber <\n\t\t\t\tmove.modified.endLineNumberExclusive,\n\t\t)!;\n\t\tconst linesBelow = Math.max(\n\t\t\tlastTouchingChangeOrig.original.endLineNumberExclusive -\n\t\t\t\tmove.original.endLineNumberExclusive,\n\t\t\tlastTouchingChangeMod.modified.endLineNumberExclusive -\n\t\t\t\tmove.modified.endLineNumberExclusive,\n\t\t);\n\n\t\tlet extendToTop: number;\n\t\tfor (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n\t\t\tconst origLine = move.original.startLineNumber - extendToTop - 1;\n\t\t\tconst modLine = move.modified.startLineNumber - extendToTop - 1;\n\t\t\tif (\n\t\t\t\torigLine > originalLines.length ||\n\t\t\t\tmodLine > modifiedLines.length\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tmodifiedSet.contains(modLine) ||\n\t\t\t\toriginalSet.contains(origLine)\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!areLinesSimilar(\n\t\t\t\t\toriginalLines[origLine - 1],\n\t\t\t\t\tmodifiedLines[modLine - 1],\n\t\t\t\t\ttimeout,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (extendToTop > 0) {\n\t\t\toriginalSet.addRange(\n\t\t\t\tnew LineRange(\n\t\t\t\t\tmove.original.startLineNumber - extendToTop,\n\t\t\t\t\tmove.original.startLineNumber,\n\t\t\t\t),\n\t\t\t);\n\t\t\tmodifiedSet.addRange(\n\t\t\t\tnew LineRange(\n\t\t\t\t\tmove.modified.startLineNumber - extendToTop,\n\t\t\t\t\tmove.modified.startLineNumber,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tlet extendToBottom: number;\n\t\tfor (\n\t\t\textendToBottom = 0;\n\t\t\textendToBottom < linesBelow;\n\t\t\textendToBottom++\n\t\t) {\n\t\t\tconst origLine =\n\t\t\t\tmove.original.endLineNumberExclusive + extendToBottom;\n\t\t\tconst modLine =\n\t\t\t\tmove.modified.endLineNumberExclusive + extendToBottom;\n\t\t\tif (\n\t\t\t\torigLine > originalLines.length ||\n\t\t\t\tmodLine > modifiedLines.length\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tmodifiedSet.contains(modLine) ||\n\t\t\t\toriginalSet.contains(origLine)\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!areLinesSimilar(\n\t\t\t\t\toriginalLines[origLine - 1],\n\t\t\t\t\tmodifiedLines[modLine - 1],\n\t\t\t\t\ttimeout,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (extendToBottom > 0) {\n\t\t\toriginalSet.addRange(\n\t\t\t\tnew LineRange(\n\t\t\t\t\tmove.original.endLineNumberExclusive,\n\t\t\t\t\tmove.original.endLineNumberExclusive + extendToBottom,\n\t\t\t\t),\n\t\t\t);\n\t\t\tmodifiedSet.addRange(\n\t\t\t\tnew LineRange(\n\t\t\t\t\tmove.modified.endLineNumberExclusive,\n\t\t\t\t\tmove.modified.endLineNumberExclusive + extendToBottom,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (extendToTop > 0 || extendToBottom > 0) {\n\t\t\tmoves[i] = new LineRangeMapping(\n\t\t\t\tnew LineRange(\n\t\t\t\t\tmove.original.startLineNumber - extendToTop,\n\t\t\t\t\tmove.original.endLineNumberExclusive + extendToBottom,\n\t\t\t\t),\n\t\t\t\tnew LineRange(\n\t\t\t\t\tmove.modified.startLineNumber - extendToTop,\n\t\t\t\t\tmove.modified.endLineNumberExclusive + extendToBottom,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn moves;\n}\n\nfunction areLinesSimilar(\n\tline1: string,\n\tline2: string,\n\ttimeout: ITimeout,\n): boolean {\n\tif (line1.trim() === line2.trim()) {\n\t\treturn true;\n\t}\n\tif (line1.length > 300 && line2.length > 300) {\n\t\treturn false;\n\t}\n\n\tconst myersDiffingAlgorithm = new MyersDiffAlgorithm();\n\tconst result = myersDiffingAlgorithm.compute(\n\t\tnew LinesSliceCharSequence(\n\t\t\t[line1],\n\t\t\tnew Range(1, 1, 1, line1.length),\n\t\t\tfalse,\n\t\t),\n\t\tnew LinesSliceCharSequence(\n\t\t\t[line2],\n\t\t\tnew Range(1, 1, 1, line2.length),\n\t\t\tfalse,\n\t\t),\n\t\ttimeout,\n\t);\n\tlet commonNonSpaceCharCount = 0;\n\tconst inverted = SequenceDiff.invert(result.diffs, line1.length);\n\tfor (const seq of inverted) {\n\t\tseq.seq1Range.forEach((idx) => {\n\t\t\tif (!isSpace(line1.charCodeAt(idx))) {\n\t\t\t\tcommonNonSpaceCharCount++;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction countNonWsChars(str: string): number {\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < line1.length; i++) {\n\t\t\tif (!isSpace(str.charCodeAt(i))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tconst longerLineLength = countNonWsChars(\n\t\tline1.length > line2.length ? line1 : line2,\n\t);\n\tconst r =\n\t\tcommonNonSpaceCharCount / longerLineLength > 0.6 &&\n\t\tlongerLineLength > 10;\n\treturn r;\n}\n\nfunction joinCloseConsecutiveMoves(\n\tmoves: LineRangeMapping[],\n): LineRangeMapping[] {\n\tif (moves.length === 0) {\n\t\treturn moves;\n\t}\n\n\tmoves.sort(compareBy((m) => m.original.startLineNumber, numberComparator));\n\n\tconst result = [moves[0]];\n\tfor (let i = 1; i < moves.length; i++) {\n\t\tconst last = result[result.length - 1];\n\t\tconst current = moves[i];\n\n\t\tconst originalDist =\n\t\t\tcurrent.original.startLineNumber -\n\t\t\tlast.original.endLineNumberExclusive;\n\t\tconst modifiedDist =\n\t\t\tcurrent.modified.startLineNumber -\n\t\t\tlast.modified.endLineNumberExclusive;\n\t\tconst currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n\n\t\tif (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n\t\t\tresult[result.length - 1] = last.join(current);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(current);\n\t}\n\treturn result;\n}\n\nfunction removeMovesInSameDiff(\n\tchanges: DetailedLineRangeMapping[],\n\tmoves: LineRangeMapping[],\n) {\n\tconst changesMonotonous = new MonotonousArray(changes);\n\tmoves = moves.filter((m) => {\n\t\tconst diffBeforeEndOfMoveOriginal =\n\t\t\tchangesMonotonous.findLastMonotonous(\n\t\t\t\t(c) =>\n\t\t\t\t\tc.original.startLineNumber <\n\t\t\t\t\tm.original.endLineNumberExclusive,\n\t\t\t) || new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));\n\t\tconst diffBeforeEndOfMoveModified = findLastMonotonous(\n\t\t\tchanges,\n\t\t\t(c) =>\n\t\t\t\tc.modified.startLineNumber < m.modified.endLineNumberExclusive,\n\t\t);\n\n\t\tconst differentDiffs =\n\t\t\tdiffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n\t\treturn differentDiffs;\n\t});\n\treturn moves;\n}\n"],
  "mappings": "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",
  "names": []
}
