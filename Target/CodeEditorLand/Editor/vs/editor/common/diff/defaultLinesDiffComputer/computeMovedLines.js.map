{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITimeout, SequenceDiff } from './algorithms/diffAlgorithm.js';\nimport { DetailedLineRangeMapping, LineRangeMapping } from '../rangeMapping.js';\nimport { pushMany, compareBy, numberComparator, reverseOrder } from '../../../../base/common/arrays.js';\nimport { MonotonousArray, findLastMonotonous } from '../../../../base/common/arraysFind.js';\nimport { SetMap } from '../../../../base/common/map.js';\nimport { LineRange, LineRangeSet } from '../../core/lineRange.js';\nimport { LinesSliceCharSequence } from './linesSliceCharSequence.js';\nimport { LineRangeFragment, isSpace } from './utils.js';\nimport { MyersDiffAlgorithm } from './algorithms/myersDiffAlgorithm.js';\nimport { Range } from '../../core/range.js';\n\nexport function computeMovedLines(\n\tchanges: DetailedLineRangeMapping[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\thashedOriginalLines: number[],\n\thashedModifiedLines: number[],\n\ttimeout: ITimeout\n): LineRangeMapping[] {\n\tlet { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\n\n\tif (!timeout.isValid()) { return []; }\n\n\tconst filteredChanges = changes.filter(c => !excludedChanges.has(c));\n\tconst unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n\tpushMany(moves, unchangedMoves);\n\n\tmoves = joinCloseConsecutiveMoves(moves);\n\t// Ignore too short moves\n\tmoves = moves.filter(current => {\n\t\tconst lines = current.original.toOffsetRange().slice(originalLines).map(l => l.trim());\n\t\tconst originalText = lines.join('\\n');\n\t\treturn originalText.length >= 15 && countWhere(lines, l => l.length >= 2) >= 2;\n\t});\n\tmoves = removeMovesInSameDiff(changes, moves);\n\n\treturn moves;\n}\n\nfunction countWhere<T>(arr: T[], predicate: (t: T) => boolean): number {\n\tlet count = 0;\n\tfor (const t of arr) {\n\t\tif (predicate(t)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(\n\tchanges: DetailedLineRangeMapping[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\ttimeout: ITimeout,\n) {\n\tconst moves: LineRangeMapping[] = [];\n\n\tconst deletions = changes\n\t\t.filter(c => c.modified.isEmpty && c.original.length >= 3)\n\t\t.map(d => new LineRangeFragment(d.original, originalLines, d));\n\tconst insertions = new Set(changes\n\t\t.filter(c => c.original.isEmpty && c.modified.length >= 3)\n\t\t.map(d => new LineRangeFragment(d.modified, modifiedLines, d)));\n\n\tconst excludedChanges = new Set<DetailedLineRangeMapping>();\n\n\tfor (const deletion of deletions) {\n\t\tlet highestSimilarity = -1;\n\t\tlet best: LineRangeFragment | undefined;\n\t\tfor (const insertion of insertions) {\n\t\t\tconst similarity = deletion.computeSimilarity(insertion);\n\t\t\tif (similarity > highestSimilarity) {\n\t\t\t\thighestSimilarity = similarity;\n\t\t\t\tbest = insertion;\n\t\t\t}\n\t\t}\n\n\t\tif (highestSimilarity > 0.90 && best) {\n\t\t\tinsertions.delete(best);\n\t\t\tmoves.push(new LineRangeMapping(deletion.range, best.range));\n\t\t\texcludedChanges.add(deletion.source);\n\t\t\texcludedChanges.add(best.source);\n\t\t}\n\n\t\tif (!timeout.isValid()) {\n\t\t\treturn { moves, excludedChanges };\n\t\t}\n\t}\n\n\treturn { moves, excludedChanges };\n}\n\nfunction computeUnchangedMoves(\n\tchanges: DetailedLineRangeMapping[],\n\thashedOriginalLines: number[],\n\thashedModifiedLines: number[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\ttimeout: ITimeout,\n) {\n\tconst moves: LineRangeMapping[] = [];\n\n\tconst original3LineHashes = new SetMap<string, { range: LineRange }>();\n\n\tfor (const change of changes) {\n\t\tfor (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\n\t\t\tconst key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n\t\t\toriginal3LineHashes.add(key, { range: new LineRange(i, i + 3) });\n\t\t}\n\t}\n\n\tinterface PossibleMapping {\n\t\tmodifiedLineRange: LineRange;\n\t\toriginalLineRange: LineRange;\n\t}\n\n\tconst possibleMappings: PossibleMapping[] = [];\n\n\tchanges.sort(compareBy(c => c.modified.startLineNumber, numberComparator));\n\n\tfor (const change of changes) {\n\t\tlet lastMappings: PossibleMapping[] = [];\n\t\tfor (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\n\t\t\tconst key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n\t\t\tconst currentModifiedRange = new LineRange(i, i + 3);\n\n\t\t\tconst nextMappings: PossibleMapping[] = [];\n\t\t\toriginal3LineHashes.forEach(key, ({ range }) => {\n\t\t\t\tfor (const lastMapping of lastMappings) {\n\t\t\t\t\t// does this match extend some last match?\n\t\t\t\t\tif (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&\n\t\t\t\t\t\tlastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n\t\t\t\t\t\tlastMapping.originalLineRange = new LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n\t\t\t\t\t\tlastMapping.modifiedLineRange = new LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n\t\t\t\t\t\tnextMappings.push(lastMapping);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst mapping: PossibleMapping = {\n\t\t\t\t\tmodifiedLineRange: currentModifiedRange,\n\t\t\t\t\toriginalLineRange: range,\n\t\t\t\t};\n\t\t\t\tpossibleMappings.push(mapping);\n\t\t\t\tnextMappings.push(mapping);\n\t\t\t});\n\t\t\tlastMappings = nextMappings;\n\t\t}\n\n\t\tif (!timeout.isValid()) {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpossibleMappings.sort(reverseOrder(compareBy(m => m.modifiedLineRange.length, numberComparator)));\n\n\tconst modifiedSet = new LineRangeSet();\n\tconst originalSet = new LineRangeSet();\n\n\tfor (const mapping of possibleMappings) {\n\n\t\tconst diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n\t\tconst modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n\t\tconst originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n\n\t\tconst modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n\n\t\tfor (const s of modifiedIntersectedSections.ranges) {\n\t\t\tif (s.length < 3) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst modifiedLineRange = s;\n\t\t\tconst originalLineRange = s.delta(-diffOrigToMod);\n\n\t\t\tmoves.push(new LineRangeMapping(originalLineRange, modifiedLineRange));\n\n\t\t\tmodifiedSet.addRange(modifiedLineRange);\n\t\t\toriginalSet.addRange(originalLineRange);\n\t\t}\n\t}\n\n\tmoves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n\n\tconst monotonousChanges = new MonotonousArray(changes);\n\tfor (let i = 0; i < moves.length; i++) {\n\t\tconst move = moves[i];\n\t\tconst firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber)!;\n\t\tconst firstTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber)!;\n\t\tconst linesAbove = Math.max(\n\t\t\tmove.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber,\n\t\t\tmove.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber\n\t\t);\n\n\t\tconst lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive)!;\n\t\tconst lastTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive)!;\n\t\tconst linesBelow = Math.max(\n\t\t\tlastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive,\n\t\t\tlastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive\n\t\t);\n\n\t\tlet extendToTop: number;\n\t\tfor (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n\t\t\tconst origLine = move.original.startLineNumber - extendToTop - 1;\n\t\t\tconst modLine = move.modified.startLineNumber - extendToTop - 1;\n\t\t\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (extendToTop > 0) {\n\t\t\toriginalSet.addRange(new LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n\t\t\tmodifiedSet.addRange(new LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n\t\t}\n\n\t\tlet extendToBottom: number;\n\t\tfor (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n\t\t\tconst origLine = move.original.endLineNumberExclusive + extendToBottom;\n\t\t\tconst modLine = move.modified.endLineNumberExclusive + extendToBottom;\n\t\t\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (extendToBottom > 0) {\n\t\t\toriginalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n\t\t\tmodifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n\t\t}\n\n\t\tif (extendToTop > 0 || extendToBottom > 0) {\n\t\t\tmoves[i] = new LineRangeMapping(\n\t\t\t\tnew LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom),\n\t\t\t\tnew LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn moves;\n}\n\nfunction areLinesSimilar(line1: string, line2: string, timeout: ITimeout): boolean {\n\tif (line1.trim() === line2.trim()) { return true; }\n\tif (line1.length > 300 && line2.length > 300) { return false; }\n\n\tconst myersDiffingAlgorithm = new MyersDiffAlgorithm();\n\tconst result = myersDiffingAlgorithm.compute(\n\t\tnew LinesSliceCharSequence([line1], new Range(1, 1, 1, line1.length), false),\n\t\tnew LinesSliceCharSequence([line2], new Range(1, 1, 1, line2.length), false),\n\t\ttimeout\n\t);\n\tlet commonNonSpaceCharCount = 0;\n\tconst inverted = SequenceDiff.invert(result.diffs, line1.length);\n\tfor (const seq of inverted) {\n\t\tseq.seq1Range.forEach(idx => {\n\t\t\tif (!isSpace(line1.charCodeAt(idx))) {\n\t\t\t\tcommonNonSpaceCharCount++;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction countNonWsChars(str: string): number {\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < line1.length; i++) {\n\t\t\tif (!isSpace(str.charCodeAt(i))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tconst longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n\tconst r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n\treturn r;\n}\n\nfunction joinCloseConsecutiveMoves(moves: LineRangeMapping[]): LineRangeMapping[] {\n\tif (moves.length === 0) {\n\t\treturn moves;\n\t}\n\n\tmoves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n\n\tconst result = [moves[0]];\n\tfor (let i = 1; i < moves.length; i++) {\n\t\tconst last = result[result.length - 1];\n\t\tconst current = moves[i];\n\n\t\tconst originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n\t\tconst modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n\t\tconst currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n\n\t\tif (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n\t\t\tresult[result.length - 1] = last.join(current);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(current);\n\t}\n\treturn result;\n}\n\nfunction removeMovesInSameDiff(changes: DetailedLineRangeMapping[], moves: LineRangeMapping[]) {\n\tconst changesMonotonous = new MonotonousArray(changes);\n\tmoves = moves.filter(m => {\n\t\tconst diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.startLineNumber < m.original.endLineNumberExclusive)\n\t\t\t|| new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));\n\t\tconst diffBeforeEndOfMoveModified = findLastMonotonous(changes, c => c.modified.startLineNumber < m.modified.endLineNumberExclusive);\n\n\t\tconst differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n\t\treturn differentDiffs;\n\t});\n\treturn moves;\n}\n"],
  "mappings": "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",
  "names": []
}
