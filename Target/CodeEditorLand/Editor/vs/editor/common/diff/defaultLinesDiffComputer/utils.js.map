{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/diff/defaultLinesDiffComputer/utils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { LineRange } from '../../core/lineRange.js';\nimport { DetailedLineRangeMapping } from '../rangeMapping.js';\n\nexport class Array2D<T> {\n\tprivate readonly array: T[] = [];\n\n\tconstructor(public readonly width: number, public readonly height: number) {\n\t\tthis.array = new Array<T>(width * height);\n\t}\n\n\tget(x: number, y: number): T {\n\t\treturn this.array[x + y * this.width];\n\t}\n\n\tset(x: number, y: number, value: T): void {\n\t\tthis.array[x + y * this.width] = value;\n\t}\n}\n\nexport function isSpace(charCode: number): boolean {\n\treturn charCode === CharCode.Space || charCode === CharCode.Tab;\n}\n\nexport class LineRangeFragment {\n\tprivate static chrKeys = new Map<string, number>();\n\n\tprivate static getKey(chr: string): number {\n\t\tlet key = this.chrKeys.get(chr);\n\t\tif (key === undefined) {\n\t\t\tkey = this.chrKeys.size;\n\t\t\tthis.chrKeys.set(chr, key);\n\t\t}\n\t\treturn key;\n\t}\n\n\tprivate readonly totalCount: number;\n\tprivate readonly histogram: number[] = [];\n\tconstructor(\n\t\tpublic readonly range: LineRange,\n\t\tpublic readonly lines: string[],\n\t\tpublic readonly source: DetailedLineRangeMapping,\n\t) {\n\t\tlet counter = 0;\n\t\tfor (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {\n\t\t\tconst line = lines[i];\n\t\t\tfor (let j = 0; j < line.length; j++) {\n\t\t\t\tcounter++;\n\t\t\t\tconst chr = line[j];\n\t\t\t\tconst key = LineRangeFragment.getKey(chr);\n\t\t\t\tthis.histogram[key] = (this.histogram[key] || 0) + 1;\n\t\t\t}\n\t\t\tcounter++;\n\t\t\tconst key = LineRangeFragment.getKey('\\n');\n\t\t\tthis.histogram[key] = (this.histogram[key] || 0) + 1;\n\t\t}\n\n\t\tthis.totalCount = counter;\n\t}\n\n\tpublic computeSimilarity(other: LineRangeFragment): number {\n\t\tlet sumDifferences = 0;\n\t\tconst maxLength = Math.max(this.histogram.length, other.histogram.length);\n\t\tfor (let i = 0; i < maxLength; i++) {\n\t\t\tsumDifferences += Math.abs((this.histogram[i] ?? 0) - (other.histogram[i] ?? 0));\n\t\t}\n\t\treturn 1 - (sumDifferences / (this.totalCount + other.totalCount));\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,gCAAgC;AAElC,MAAM,QAAW;AAAA,EAGvB,YAA4B,OAA+B,QAAgB;AAA/C;AAA+B;AAC1D,SAAK,QAAQ,IAAI,MAAS,QAAQ,MAAM;AAAA,EACzC;AAAA,EAdD,OASwB;AAAA;AAAA;AAAA,EACN,QAAa,CAAC;AAAA,EAM/B,IAAI,GAAW,GAAc;AAC5B,WAAO,KAAK,MAAM,IAAI,IAAI,KAAK,KAAK;AAAA,EACrC;AAAA,EAEA,IAAI,GAAW,GAAW,OAAgB;AACzC,SAAK,MAAM,IAAI,IAAI,KAAK,KAAK,IAAI;AAAA,EAClC;AACD;AAEO,SAAS,QAAQ,UAA2B;AAClD,SAAO,aAAa,SAAS,SAAS,aAAa,SAAS;AAC7D;AAFgB;AAIT,MAAM,kBAAkB;AAAA,EAc9B,YACiB,OACA,OACA,QACf;AAHe;AACA;AACA;AAEhB,QAAI,UAAU;AACd,aAAS,IAAI,MAAM,kBAAkB,GAAG,IAAI,MAAM,yBAAyB,GAAG,KAAK;AAClF,YAAM,OAAO,MAAM,CAAC;AACpB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC;AACA,cAAM,MAAM,KAAK,CAAC;AAClB,cAAMA,OAAM,kBAAkB,OAAO,GAAG;AACxC,aAAK,UAAUA,IAAG,KAAK,KAAK,UAAUA,IAAG,KAAK,KAAK;AAAA,MACpD;AACA;AACA,YAAM,MAAM,kBAAkB,OAAO,IAAI;AACzC,WAAK,UAAU,GAAG,KAAK,KAAK,UAAU,GAAG,KAAK,KAAK;AAAA,IACpD;AAEA,SAAK,aAAa;AAAA,EACnB;AAAA,EA/DD,OA6B+B;AAAA;AAAA;AAAA,EAC9B,OAAe,UAAU,oBAAI,IAAoB;AAAA,EAEjD,OAAe,OAAO,KAAqB;AAC1C,QAAI,MAAM,KAAK,QAAQ,IAAI,GAAG;AAC9B,QAAI,QAAQ,QAAW;AACtB,YAAM,KAAK,QAAQ;AACnB,WAAK,QAAQ,IAAI,KAAK,GAAG;AAAA,IAC1B;AACA,WAAO;AAAA,EACR;AAAA,EAEiB;AAAA,EACA,YAAsB,CAAC;AAAA,EAuBjC,kBAAkB,OAAkC;AAC1D,QAAI,iBAAiB;AACrB,UAAM,YAAY,KAAK,IAAI,KAAK,UAAU,QAAQ,MAAM,UAAU,MAAM;AACxE,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AACnC,wBAAkB,KAAK,KAAK,KAAK,UAAU,CAAC,KAAK,MAAM,MAAM,UAAU,CAAC,KAAK,EAAE;AAAA,IAChF;AACA,WAAO,IAAK,kBAAkB,KAAK,aAAa,MAAM;AAAA,EACvD;AACD;",
  "names": ["key"]
}
