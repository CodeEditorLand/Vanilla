import{OffsetRange as D}from"../../../core/offsetRange.js";import{DiffAlgorithmResult as y,InfiniteTimeout as P,SequenceDiff as X}from"./diffAlgorithm.js";class E{compute(e,r,a=P.instance){if(e.length===0||r.length===0)return y.trivial(e,r);const s=e,g=r;function w(i,l){for(;i<s.length&&l<g.length&&s.getElement(i)===g.getElement(l);)i++,l++;return i}let u=0;const o=new q;o.set(0,w(0,0));const f=new L;f.set(0,o.get(0)===0?null:new k(null,0,0,o.get(0)));let t=0;e:for(;;){if(u++,!a.isValid())return y.trivialTimedOut(s,g);const i=-Math.min(u,g.length+u%2),l=Math.min(u,s.length+u%2);for(t=i;t<=l;t+=2){let I=0;const S=t===l?-1:o.get(t+1),M=t===i?-1:o.get(t-1)+1;I++;const h=Math.min(Math.max(S,M),s.length),v=h-t;if(I++,h>s.length||v>g.length)continue;const b=w(h,v);o.set(t,b);const T=h===S?f.get(t+1):f.get(t-1);if(f.set(t,b!==h?new k(T,h,v,b-h):T),o.get(t)===s.length&&o.get(t)-t===g.length)break e}}let n=f.get(t);const c=[];let A=s.length,p=g.length;for(;;){const i=n?n.x+n.length:0,l=n?n.y+n.length:0;if((i!==A||l!==p)&&c.push(new X(new D(i,A),new D(l,p))),!n)break;A=n.x,p=n.y,n=n.prev}return c.reverse(),new y(c,!1)}}class k{constructor(e,r,a,s){this.prev=e;this.x=r;this.y=a;this.length=s}}class q{positiveArr=new Int32Array(10);negativeArr=new Int32Array(10);get(e){return e<0?(e=-e-1,this.negativeArr[e]):this.positiveArr[e]}set(e,r){if(e<0){if(e=-e-1,e>=this.negativeArr.length){const a=this.negativeArr;this.negativeArr=new Int32Array(a.length*2),this.negativeArr.set(a)}this.negativeArr[e]=r}else{if(e>=this.positiveArr.length){const a=this.positiveArr;this.positiveArr=new Int32Array(a.length*2),this.positiveArr.set(a)}this.positiveArr[e]=r}}}class L{positiveArr=[];negativeArr=[];get(e){return e<0?(e=-e-1,this.negativeArr[e]):this.positiveArr[e]}set(e,r){e<0?(e=-e-1,this.negativeArr[e]=r):this.positiveArr[e]=r}}export{E as MyersDiffAlgorithm};
