{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from \"../../../core/offsetRange.js\";\nimport { Array2D } from \"../utils.js\";\nimport {\n\tDiffAlgorithmResult,\n\ttype IDiffAlgorithm,\n\ttype ISequence,\n\ttype ITimeout,\n\tInfiniteTimeout,\n\tSequenceDiff,\n} from \"./diffAlgorithm.js\";\n\n/**\n * A O(MN) diffing algorithm that supports a score function.\n * The algorithm can be improved by processing the 2d array diagonally.\n */\nexport class DynamicProgrammingDiffing implements IDiffAlgorithm {\n\tcompute(\n\t\tsequence1: ISequence,\n\t\tsequence2: ISequence,\n\t\ttimeout: ITimeout = InfiniteTimeout.instance,\n\t\tequalityScore?: (offset1: number, offset2: number) => number,\n\t): DiffAlgorithmResult {\n\t\tif (sequence1.length === 0 || sequence2.length === 0) {\n\t\t\treturn DiffAlgorithmResult.trivial(sequence1, sequence2);\n\t\t}\n\n\t\t/**\n\t\t * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).\n\t\t */\n\t\tconst lcsLengths = new Array2D<number>(\n\t\t\tsequence1.length,\n\t\t\tsequence2.length,\n\t\t);\n\t\tconst directions = new Array2D<number>(\n\t\t\tsequence1.length,\n\t\t\tsequence2.length,\n\t\t);\n\t\tconst lengths = new Array2D<number>(sequence1.length, sequence2.length);\n\n\t\t// ==== Initializing lcsLengths ====\n\t\tfor (let s1 = 0; s1 < sequence1.length; s1++) {\n\t\t\tfor (let s2 = 0; s2 < sequence2.length; s2++) {\n\t\t\t\tif (!timeout.isValid()) {\n\t\t\t\t\treturn DiffAlgorithmResult.trivialTimedOut(\n\t\t\t\t\t\tsequence1,\n\t\t\t\t\t\tsequence2,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);\n\t\t\t\tconst verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);\n\n\t\t\t\tlet extendedSeqScore: number;\n\t\t\t\tif (sequence1.getElement(s1) === sequence2.getElement(s2)) {\n\t\t\t\t\tif (s1 === 0 || s2 === 0) {\n\t\t\t\t\t\textendedSeqScore = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\textendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\ts1 > 0 &&\n\t\t\t\t\t\ts2 > 0 &&\n\t\t\t\t\t\tdirections.get(s1 - 1, s2 - 1) === 3\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Prefer consecutive diagonals\n\t\t\t\t\t\textendedSeqScore += lengths.get(s1 - 1, s2 - 1);\n\t\t\t\t\t}\n\t\t\t\t\textendedSeqScore += equalityScore\n\t\t\t\t\t\t? equalityScore(s1, s2)\n\t\t\t\t\t\t: 1;\n\t\t\t\t} else {\n\t\t\t\t\textendedSeqScore = -1;\n\t\t\t\t}\n\n\t\t\t\tconst newValue = Math.max(\n\t\t\t\t\thorizontalLen,\n\t\t\t\t\tverticalLen,\n\t\t\t\t\textendedSeqScore,\n\t\t\t\t);\n\n\t\t\t\tif (newValue === extendedSeqScore) {\n\t\t\t\t\t// Prefer diagonals\n\t\t\t\t\tconst prevLen =\n\t\t\t\t\t\ts1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;\n\t\t\t\t\tlengths.set(s1, s2, prevLen + 1);\n\t\t\t\t\tdirections.set(s1, s2, 3);\n\t\t\t\t} else if (newValue === horizontalLen) {\n\t\t\t\t\tlengths.set(s1, s2, 0);\n\t\t\t\t\tdirections.set(s1, s2, 1);\n\t\t\t\t} else if (newValue === verticalLen) {\n\t\t\t\t\tlengths.set(s1, s2, 0);\n\t\t\t\t\tdirections.set(s1, s2, 2);\n\t\t\t\t}\n\n\t\t\t\tlcsLengths.set(s1, s2, newValue);\n\t\t\t}\n\t\t}\n\n\t\t// ==== Backtracking ====\n\t\tconst result: SequenceDiff[] = [];\n\t\tlet lastAligningPosS1: number = sequence1.length;\n\t\tlet lastAligningPosS2: number = sequence2.length;\n\n\t\tfunction reportDecreasingAligningPositions(\n\t\t\ts1: number,\n\t\t\ts2: number,\n\t\t): void {\n\t\t\tif (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {\n\t\t\t\tresult.push(\n\t\t\t\t\tnew SequenceDiff(\n\t\t\t\t\t\tnew OffsetRange(s1 + 1, lastAligningPosS1),\n\t\t\t\t\t\tnew OffsetRange(s2 + 1, lastAligningPosS2),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tlastAligningPosS1 = s1;\n\t\t\tlastAligningPosS2 = s2;\n\t\t}\n\n\t\tlet s1 = sequence1.length - 1;\n\t\tlet s2 = sequence2.length - 1;\n\t\twhile (s1 >= 0 && s2 >= 0) {\n\t\t\tif (directions.get(s1, s2) === 3) {\n\t\t\t\treportDecreasingAligningPositions(s1, s2);\n\t\t\t\ts1--;\n\t\t\t\ts2--;\n\t\t\t} else if (directions.get(s1, s2) === 1) {\n\t\t\t\ts1--;\n\t\t\t} else {\n\t\t\t\ts2--;\n\t\t\t}\n\t\t}\n\t\treportDecreasingAligningPositions(-1, -1);\n\t\tresult.reverse();\n\t\treturn new DiffAlgorithmResult(result, false);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["s1", "s2"]
}
