{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from \"../../base/common/arrays.js\";\nimport type {\n\tIScrollPosition,\n\tScrollable,\n} from \"../../base/common/scrollable.js\";\nimport * as strings from \"../../base/common/strings.js\";\nimport type { IPosition, Position } from \"./core/position.js\";\nimport { Range } from \"./core/range.js\";\nimport type {\n\tCursorConfiguration,\n\tCursorState,\n\tEditOperationType,\n\tIColumnSelectData,\n\tICursorSimpleModel,\n\tPartialCursorState,\n} from \"./cursorCommon.js\";\nimport type { CursorChangeReason } from \"./cursorEvents.js\";\nimport type { INewScrollPosition, ScrollType } from \"./editorCommon.js\";\nimport type { EditorTheme } from \"./editorTheme.js\";\nimport type {\n\tEndOfLinePreference,\n\tIGlyphMarginLanesModel,\n\tIModelDecorationOptions,\n\tITextModel,\n\tPositionAffinity,\n} from \"./model.js\";\nimport type {\n\tILineBreaksComputer,\n\tInjectedText,\n} from \"./modelLineProjectionData.js\";\nimport type {\n\tBracketGuideOptions,\n\tIActiveIndentGuideInfo,\n\tIndentGuide,\n} from \"./textModelGuides.js\";\nimport type { IViewLineTokens } from \"./tokens/lineTokens.js\";\nimport type { ViewEventHandler } from \"./viewEventHandler.js\";\nimport type { VerticalRevealType } from \"./viewEvents.js\";\n\nexport interface IViewModel extends ICursorSimpleModel {\n\treadonly model: ITextModel;\n\n\treadonly coordinatesConverter: ICoordinatesConverter;\n\n\treadonly viewLayout: IViewLayout;\n\n\treadonly cursorConfig: CursorConfiguration;\n\n\treadonly glyphLanes: IGlyphMarginLanesModel;\n\n\taddViewEventHandler(eventHandler: ViewEventHandler): void;\n\tremoveViewEventHandler(eventHandler: ViewEventHandler): void;\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tsetViewport(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tcenteredLineNumber: number,\n\t): void;\n\tvisibleLinesStabilized(): void;\n\tsetHasFocus(hasFocus: boolean): void;\n\tonCompositionStart(): void;\n\tonCompositionEnd(): void;\n\n\tgetMinimapDecorationsInRange(range: Range): ViewModelDecoration[];\n\tgetDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];\n\tgetViewportViewLineRenderingData(\n\t\tvisibleRange: Range,\n\t\tlineNumber: number,\n\t): ViewLineRenderingData;\n\tgetViewLineRenderingData(lineNumber: number): ViewLineRenderingData;\n\tgetViewLineData(lineNumber: number): ViewLineData;\n\tgetMinimapLinesRenderingData(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tneeded: boolean[],\n\t): MinimapLinesRenderingData;\n\tgetCompletelyVisibleViewRange(): Range;\n\tgetCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range;\n\n\tgetHiddenAreas(): Range[];\n\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetActiveIndentGuide(\n\t\tlineNumber: number,\n\t\tminLineNumber: number,\n\t\tmaxLineNumber: number,\n\t): IActiveIndentGuideInfo;\n\tgetLinesIndentGuides(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t): number[];\n\tgetBracketGuidesInRangeByLine(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tactivePosition: IPosition | null,\n\t\toptions: BracketGuideOptions,\n\t): IndentGuide[][];\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tgetAllOverviewRulerDecorations(\n\t\ttheme: EditorTheme,\n\t): OverviewRulerDecorationsGroup[];\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\tmodifyPosition(position: Position, offset: number): Position;\n\n\tgetInjectedTextAt(viewPosition: Position): InjectedText | null;\n\n\tdeduceModelPositionRelativeToViewPosition(\n\t\tviewAnchorPosition: Position,\n\t\tdeltaOffset: number,\n\t\tlineFeedCnt: number,\n\t): Position;\n\tgetPlainTextToCopy(\n\t\tmodelRanges: Range[],\n\t\temptySelectionClipboard: boolean,\n\t\tforceCRLF: boolean,\n\t): string | string[];\n\tgetRichTextToCopy(\n\t\tmodelRanges: Range[],\n\t\temptySelectionClipboard: boolean,\n\t): { html: string; mode: string } | null;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\n\t//#region cursor\n\tgetPrimaryCursorState(): CursorState;\n\tgetLastAddedCursorIndex(): number;\n\tgetCursorStates(): CursorState[];\n\tsetCursorStates(\n\t\tsource: string | null | undefined,\n\t\treason: CursorChangeReason,\n\t\tstates: PartialCursorState[] | null,\n\t): boolean;\n\tgetCursorColumnSelectData(): IColumnSelectData;\n\tgetCursorAutoClosedCharacters(): Range[];\n\tsetCursorColumnSelectData(columnSelectData: IColumnSelectData): void;\n\tgetPrevEditOperationType(): EditOperationType;\n\tsetPrevEditOperationType(type: EditOperationType): void;\n\trevealAllCursors(\n\t\tsource: string | null | undefined,\n\t\trevealHorizontal: boolean,\n\t\tminimalReveal?: boolean,\n\t): void;\n\trevealPrimaryCursor(\n\t\tsource: string | null | undefined,\n\t\trevealHorizontal: boolean,\n\t\tminimalReveal?: boolean,\n\t): void;\n\trevealTopMostCursor(source: string | null | undefined): void;\n\trevealBottomMostCursor(source: string | null | undefined): void;\n\trevealRange(\n\t\tsource: string | null | undefined,\n\t\trevealHorizontal: boolean,\n\t\tviewRange: Range,\n\t\tverticalType: VerticalRevealType,\n\t\tscrollType: ScrollType,\n\t): void;\n\t//#endregion\n\n\t//#region viewLayout\n\tchangeWhitespace(\n\t\tcallback: (accessor: IWhitespaceChangeAccessor) => void,\n\t): void;\n\t//#endregion\n\n\tbatchEvents(callback: () => void): void;\n}\n\nexport interface IViewLayout {\n\tgetScrollable(): Scrollable;\n\n\tgetScrollWidth(): number;\n\tgetScrollHeight(): number;\n\n\tgetCurrentScrollLeft(): number;\n\tgetCurrentScrollTop(): number;\n\tgetCurrentViewport(): Viewport;\n\n\tgetFutureViewport(): Viewport;\n\n\tsetScrollPosition(position: INewScrollPosition, type: ScrollType): void;\n\tdeltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void;\n\n\tvalidateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition;\n\n\tsetMaxLineWidth(maxLineWidth: number): void;\n\tsetOverlayWidgetsMinWidth(overlayWidgetsMinWidth: number): void;\n\n\tgetLinesViewportData(): IPartialViewLinesViewportData;\n\tgetLinesViewportDataAtScrollTop(\n\t\tscrollTop: number,\n\t): IPartialViewLinesViewportData;\n\tgetWhitespaces(): IEditorWhitespace[];\n\n\tisAfterLines(verticalOffset: number): boolean;\n\tisInTopPadding(verticalOffset: number): boolean;\n\tisInBottomPadding(verticalOffset: number): boolean;\n\tgetLineNumberAtVerticalOffset(verticalOffset: number): number;\n\tgetVerticalOffsetForLineNumber(\n\t\tlineNumber: number,\n\t\tincludeViewZones?: boolean,\n\t): number;\n\tgetVerticalOffsetAfterLineNumber(\n\t\tlineNumber: number,\n\t\tincludeViewZones?: boolean,\n\t): number;\n\tgetWhitespaceAtVerticalOffset(\n\t\tverticalOffset: number,\n\t): IViewWhitespaceViewportData | null;\n\n\t/**\n\t * Get the layout information for whitespaces currently in the viewport\n\t */\n\tgetWhitespaceViewportData(): IViewWhitespaceViewportData[];\n}\n\nexport interface IEditorWhitespace {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly height: number;\n}\n\n/**\n * An accessor that allows for whitespace to be added, removed or changed in bulk.\n */\nexport interface IWhitespaceChangeAccessor {\n\tinsertWhitespace(\n\t\tafterLineNumber: number,\n\t\tordinal: number,\n\t\theightInPx: number,\n\t\tminWidth: number,\n\t): string;\n\tchangeOneWhitespace(\n\t\tid: string,\n\t\tnewAfterLineNumber: number,\n\t\tnewHeight: number,\n\t): void;\n\tremoveWhitespace(id: string): void;\n}\n\nexport interface IPartialViewLinesViewportData {\n\t/**\n\t * Value to be substracted from `scrollTop` (in order to vertical offset numbers < 1MM)\n\t */\n\treadonly bigNumbersDelta: number;\n\t/**\n\t * The first (partially) visible line number.\n\t */\n\treadonly startLineNumber: number;\n\t/**\n\t * The last (partially) visible line number.\n\t */\n\treadonly endLineNumber: number;\n\t/**\n\t * relativeVerticalOffset[i] is the `top` position for line at `i` + `startLineNumber`.\n\t */\n\treadonly relativeVerticalOffset: number[];\n\t/**\n\t * The centered line in the viewport.\n\t */\n\treadonly centeredLineNumber: number;\n\t/**\n\t * The first completely visible line number.\n\t */\n\treadonly completelyVisibleStartLineNumber: number;\n\t/**\n\t * The last completely visible line number.\n\t */\n\treadonly completelyVisibleEndLineNumber: number;\n\n\t/**\n\t * The height of a line.\n\t */\n\treadonly lineHeight: number;\n}\n\nexport interface IViewWhitespaceViewportData {\n\treadonly id: string;\n\treadonly afterLineNumber: number;\n\treadonly verticalOffset: number;\n\treadonly height: number;\n}\n\nexport class Viewport {\n\treadonly _viewportBrand: void = undefined;\n\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n\n\tconstructor(top: number, left: number, width: number, height: number) {\n\t\tthis.top = top | 0;\n\t\tthis.left = left | 0;\n\t\tthis.width = width | 0;\n\t\tthis.height = height | 0;\n\t}\n}\n\nexport interface ICoordinatesConverter {\n\t// View -> Model conversion and related methods\n\tconvertViewPositionToModelPosition(viewPosition: Position): Position;\n\tconvertViewRangeToModelRange(viewRange: Range): Range;\n\tvalidateViewPosition(\n\t\tviewPosition: Position,\n\t\texpectedModelPosition: Position,\n\t): Position;\n\tvalidateViewRange(viewRange: Range, expectedModelRange: Range): Range;\n\n\t// Model -> View conversion and related methods\n\t/**\n\t * @param allowZeroLineNumber Should it return 0 when there are hidden lines at the top and the position is in the hidden area?\n\t * @param belowHiddenRanges When the model position is in a hidden area, should it return the first view position after or before?\n\t */\n\tconvertModelPositionToViewPosition(\n\t\tmodelPosition: Position,\n\t\taffinity?: PositionAffinity,\n\t\tallowZeroLineNumber?: boolean,\n\t\tbelowHiddenRanges?: boolean,\n\t): Position;\n\t/**\n\t * @param affinity Only has an effect if the range is empty.\n\t */\n\tconvertModelRangeToViewRange(\n\t\tmodelRange: Range,\n\t\taffinity?: PositionAffinity,\n\t): Range;\n\tmodelPositionIsVisible(modelPosition: Position): boolean;\n\tgetModelLineViewLineCount(modelLineNumber: number): number;\n\tgetViewLineNumberOfModelPosition(\n\t\tmodelLineNumber: number,\n\t\tmodelColumn: number,\n\t): number;\n}\n\nexport class MinimapLinesRenderingData {\n\tpublic readonly tabSize: number;\n\tpublic readonly data: Array<ViewLineData | null>;\n\n\tconstructor(tabSize: number, data: Array<ViewLineData | null>) {\n\t\tthis.tabSize = tabSize;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ViewLineData {\n\t_viewLineDataBrand: void = undefined;\n\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent).\n\t */\n\tpublic readonly startVisibleColumn: number;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\n\t/**\n\t * Additional inline decorations for this line.\n\t */\n\tpublic readonly inlineDecorations:\n\t\t| readonly SingleLineInlineDecoration[]\n\t\t| null;\n\n\tconstructor(\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tstartVisibleColumn: number,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: readonly SingleLineInlineDecoration[] | null,\n\t) {\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t}\n}\n\nexport class ViewLineRenderingData {\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * Describes if `content` contains RTL characters.\n\t */\n\tpublic readonly containsRTL: boolean;\n\t/**\n\t * Describes if `content` contains non basic ASCII chars.\n\t */\n\tpublic readonly isBasicASCII: boolean;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\t/**\n\t * Inline decorations at this view line.\n\t */\n\tpublic readonly inlineDecorations: InlineDecoration[];\n\t/**\n\t * The tab size for this view model.\n\t */\n\tpublic readonly tabSize: number;\n\t/**\n\t * The visible column at the start of the line (after the fauxIndent)\n\t */\n\tpublic readonly startVisibleColumn: number;\n\n\tconstructor(\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tmightContainRTL: boolean,\n\t\tmightContainNonBasicASCII: boolean,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: InlineDecoration[],\n\t\ttabSize: number,\n\t\tstartVisibleColumn: number,\n\t) {\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\n\t\tthis.isBasicASCII = ViewLineRenderingData.isBasicASCII(\n\t\t\tcontent,\n\t\t\tmightContainNonBasicASCII,\n\t\t);\n\t\tthis.containsRTL = ViewLineRenderingData.containsRTL(\n\t\t\tcontent,\n\t\t\tthis.isBasicASCII,\n\t\t\tmightContainRTL,\n\t\t);\n\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t\tthis.tabSize = tabSize;\n\t\tthis.startVisibleColumn = startVisibleColumn;\n\t}\n\n\tpublic static isBasicASCII(\n\t\tlineContent: string,\n\t\tmightContainNonBasicASCII: boolean,\n\t): boolean {\n\t\tif (mightContainNonBasicASCII) {\n\t\t\treturn strings.isBasicASCII(lineContent);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static containsRTL(\n\t\tlineContent: string,\n\t\tisBasicASCII: boolean,\n\t\tmightContainRTL: boolean,\n\t): boolean {\n\t\tif (!isBasicASCII && mightContainRTL) {\n\t\t\treturn strings.containsRTL(lineContent);\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport enum InlineDecorationType {\n\tRegular = 0,\n\tBefore = 1,\n\tAfter = 2,\n\tRegularAffectingLetterSpacing = 3,\n}\n\nexport class InlineDecoration {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly type: InlineDecorationType,\n\t) {}\n}\n\nexport class SingleLineInlineDecoration {\n\tconstructor(\n\t\tpublic readonly startOffset: number,\n\t\tpublic readonly endOffset: number,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly inlineClassNameAffectsLetterSpacing: boolean,\n\t) {}\n\n\ttoInlineDecoration(lineNumber: number): InlineDecoration {\n\t\treturn new InlineDecoration(\n\t\t\tnew Range(\n\t\t\t\tlineNumber,\n\t\t\t\tthis.startOffset + 1,\n\t\t\t\tlineNumber,\n\t\t\t\tthis.endOffset + 1,\n\t\t\t),\n\t\t\tthis.inlineClassName,\n\t\t\tthis.inlineClassNameAffectsLetterSpacing\n\t\t\t\t? InlineDecorationType.RegularAffectingLetterSpacing\n\t\t\t\t: InlineDecorationType.Regular,\n\t\t);\n\t}\n}\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\nexport class OverviewRulerDecorationsGroup {\n\tconstructor(\n\t\tpublic readonly color: string,\n\t\tpublic readonly zIndex: number,\n\t\t/**\n\t\t * Decorations are encoded in a number array using the following scheme:\n\t\t *  - 3*i = lane\n\t\t *  - 3*i+1 = startLineNumber\n\t\t *  - 3*i+2 = endLineNumber\n\t\t */\n\t\tpublic readonly data: number[],\n\t) {}\n\n\tpublic static compareByRenderingProps(\n\t\ta: OverviewRulerDecorationsGroup,\n\t\tb: OverviewRulerDecorationsGroup,\n\t): number {\n\t\tif (a.zIndex === b.zIndex) {\n\t\t\tif (a.color < b.color) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.color > b.color) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\treturn a.zIndex - b.zIndex;\n\t}\n\n\tpublic static equals(\n\t\ta: OverviewRulerDecorationsGroup,\n\t\tb: OverviewRulerDecorationsGroup,\n\t): boolean {\n\t\treturn (\n\t\t\ta.color === b.color &&\n\t\t\ta.zIndex === b.zIndex &&\n\t\t\tarrays.equals(a.data, b.data)\n\t\t);\n\t}\n\n\tpublic static equalsArr(\n\t\ta: OverviewRulerDecorationsGroup[],\n\t\tb: OverviewRulerDecorationsGroup[],\n\t): boolean {\n\t\treturn arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["InlineDecorationType"]
}
