{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursorCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationChangedEvent, EditorAutoClosingEditStrategy, EditorAutoClosingStrategy, EditorAutoIndentStrategy, EditorAutoSurroundStrategy, EditorOption } from './config/editorOptions.js';\nimport { LineTokens } from './tokens/lineTokens.js';\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { ISelection, Selection } from './core/selection.js';\nimport { ICommand } from './editorCommon.js';\nimport { IEditorConfiguration } from './config/editorConfiguration.js';\nimport { PositionAffinity, TextModelResolvedOptions } from './model.js';\nimport { AutoClosingPairs } from './languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from './languages/languageConfigurationRegistry.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { IElectricAction } from './languages/supports/electricCharacter.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\n\nexport interface IColumnSelectData {\n\tisReal: boolean;\n\tfromViewLineNumber: number;\n\tfromViewVisualColumn: number;\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport const enum EditOperationType {\n\tOther = 0,\n\tDeletingLeft = 2,\n\tDeletingRight = 3,\n\tTypingOther = 4,\n\tTypingFirstSpace = 5,\n\tTypingConsecutiveSpace = 6,\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => (chr === ' ' || chr === '\\t');\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void = undefined;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly multiCursorPaste: 'spread' | 'full';\n\tpublic readonly multiCursorLimit: number;\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingComments: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingDelete: EditorAutoClosingEditStrategy;\n\tpublic readonly autoClosingOvertype: EditorAutoClosingEditStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: EditorAutoIndentStrategy;\n\tpublic readonly autoClosingPairs: AutoClosingPairs;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly blockCommentStartToken: string | null;\n\tpublic readonly shouldAutoCloseBefore: { quote: (ch: string) => boolean; bracket: (ch: string) => boolean; comment: (ch: string) => boolean };\n\tpublic readonly wordSegmenterLocales: string[];\n\n\tprivate readonly _languageId: string;\n\tprivate _electricChars: { [key: string]: boolean } | null;\n\n\tpublic static shouldRecreate(e: ConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.hasChanged(EditorOption.layoutInfo)\n\t\t\t|| e.hasChanged(EditorOption.wordSeparators)\n\t\t\t|| e.hasChanged(EditorOption.emptySelectionClipboard)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorMergeOverlapping)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorPaste)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorLimit)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingBrackets)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingComments)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingQuotes)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingDelete)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingOvertype)\n\t\t\t|| e.hasChanged(EditorOption.autoSurround)\n\t\t\t|| e.hasChanged(EditorOption.useTabStops)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.readOnly)\n\t\t\t|| e.hasChanged(EditorOption.wordSegmenterLocales)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageId: string,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IEditorConfiguration,\n\t\tpublic readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._languageId = languageId;\n\n\t\tconst options = configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis.readOnly = options.get(EditorOption.readOnly);\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.lineHeight = fontInfo.lineHeight;\n\t\tthis.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n\t\tthis.useTabStops = options.get(EditorOption.useTabStops);\n\t\tthis.wordSeparators = options.get(EditorOption.wordSeparators);\n\t\tthis.emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tthis.copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tthis.multiCursorMergeOverlapping = options.get(EditorOption.multiCursorMergeOverlapping);\n\t\tthis.multiCursorPaste = options.get(EditorOption.multiCursorPaste);\n\t\tthis.multiCursorLimit = options.get(EditorOption.multiCursorLimit);\n\t\tthis.autoClosingBrackets = options.get(EditorOption.autoClosingBrackets);\n\t\tthis.autoClosingComments = options.get(EditorOption.autoClosingComments);\n\t\tthis.autoClosingQuotes = options.get(EditorOption.autoClosingQuotes);\n\t\tthis.autoClosingDelete = options.get(EditorOption.autoClosingDelete);\n\t\tthis.autoClosingOvertype = options.get(EditorOption.autoClosingOvertype);\n\t\tthis.autoSurround = options.get(EditorOption.autoSurround);\n\t\tthis.autoIndent = options.get(EditorOption.autoIndent);\n\t\tthis.wordSegmenterLocales = options.get(EditorOption.wordSegmenterLocales);\n\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n\t\t\tcomment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n\t\t\tbracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n\t\t};\n\n\t\tthis.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n\n\t\tconst surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\n\t\tconst commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n\t\tthis.blockCommentStartToken = commentsConfiguration?.blockCommentStartToken ?? null;\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tconst electricChars = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter?.getElectricCharacters();\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\t/**\n\t * Should return opening bracket type to match indentation with\n\t */\n\tpublic onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction | null {\n\t\tconst scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\tconst electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate _getShouldAutoClose(languageId: string, autoCloseConfig: EditorAutoClosingStrategy, forQuotes: boolean): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase 'beforeWhitespace':\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase 'languageDefined':\n\t\t\t\treturn this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n\t\t\tcase 'always':\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase 'never':\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate _getLanguageDefinedShouldAutoClose(languageId: string, forQuotes: boolean): (ch: string) => boolean {\n\t\tconst autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n\t\treturn c => autoCloseBeforeSet.indexOf(c) !== -1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic visibleColumnFromColumn(model: ICursorSimpleModel, position: Position): number {\n\t\treturn CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic columnFromVisibleColumn(model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number {\n\t\tconst result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t */\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport type PartialCursorState = CursorState | PartialModelCursorState | PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void = undefined;\n\n\tpublic static fromModelState(modelState: SingleCursorState): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(viewState: SingleCursorState): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(modelSelection: ISelection): PartialModelCursorState {\n\t\tconst selection = Selection.liftSelection(modelSelection);\n\t\tconst modelState = new SingleCursorState(\n\t\t\tRange.fromPositions(selection.getSelectionStart()),\n\t\t\tSelectionStartKind.Simple, 0,\n\t\t\tselection.getPosition(), 0\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(modelSelections: readonly ISelection[]): PartialModelCursorState[] {\n\t\tconst states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport const enum SelectionStartKind {\n\tSimple,\n\tWord,\n\tLine\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void = undefined;\n\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tpublic readonly selectionStart: Range,\n\t\tpublic readonly selectionStartKind: SelectionStartKind,\n\t\tpublic readonly selectionStartLeftoverVisibleColumns: number,\n\t\tpublic readonly position: Position,\n\t\tpublic readonly leftoverVisibleColumns: number,\n\t) {\n\t\tthis.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n\t\t\t&& this.leftoverVisibleColumns === other.leftoverVisibleColumns\n\t\t\t&& this.selectionStartKind === other.selectionStartKind\n\t\t\t&& this.position.equals(other.position)\n\t\t\t&& this.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n\t}\n\n\tpublic move(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartKind,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(selectionStart: Range, position: Position): Selection {\n\t\tif (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n\t\t\treturn Selection.fromPositions(selectionStart.getStartPosition(), position);\n\t\t} else {\n\t\t\treturn Selection.fromPositions(selectionStart.getEndPosition(), position);\n\t\t}\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void = undefined;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t}\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"],
  "mappings": "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",
  "names": ["EditOperationType", "SelectionStartKind"]
}
