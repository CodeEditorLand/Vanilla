{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursorCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IEditorConfiguration } from \"./config/editorConfiguration.js\";\nimport {\n\ttype ConfigurationChangedEvent,\n\ttype EditorAutoClosingEditStrategy,\n\ttype EditorAutoClosingStrategy,\n\ttype EditorAutoIndentStrategy,\n\ttype EditorAutoSurroundStrategy,\n\tEditorOption,\n} from \"./config/editorOptions.js\";\nimport { CursorColumns } from \"./core/cursorColumns.js\";\nimport { normalizeIndentation } from \"./core/indentation.js\";\nimport { Position } from \"./core/position.js\";\nimport { Range } from \"./core/range.js\";\nimport { type ISelection, Selection } from \"./core/selection.js\";\nimport type { ICommand } from \"./editorCommon.js\";\nimport type { AutoClosingPairs } from \"./languages/languageConfiguration.js\";\nimport type { ILanguageConfigurationService } from \"./languages/languageConfigurationRegistry.js\";\nimport { createScopedLineTokens } from \"./languages/supports.js\";\nimport type { IElectricAction } from \"./languages/supports/electricCharacter.js\";\nimport type { PositionAffinity, TextModelResolvedOptions } from \"./model.js\";\nimport type { LineTokens } from \"./tokens/lineTokens.js\";\n\nexport interface IColumnSelectData {\n\tisReal: boolean;\n\tfromViewLineNumber: number;\n\tfromViewVisualColumn: number;\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport enum EditOperationType {\n\tOther = 0,\n\tDeletingLeft = 2,\n\tDeletingRight = 3,\n\tTypingOther = 4,\n\tTypingFirstSpace = 5,\n\tTypingConsecutiveSpace = 6,\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => chr === \" \" || chr === \"\\t\";\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void = undefined;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly multiCursorPaste: \"spread\" | \"full\";\n\tpublic readonly multiCursorLimit: number;\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingComments: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingDelete: EditorAutoClosingEditStrategy;\n\tpublic readonly autoClosingOvertype: EditorAutoClosingEditStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: EditorAutoIndentStrategy;\n\tpublic readonly autoClosingPairs: AutoClosingPairs;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly blockCommentStartToken: string | null;\n\tpublic readonly shouldAutoCloseBefore: {\n\t\tquote: (ch: string) => boolean;\n\t\tbracket: (ch: string) => boolean;\n\t\tcomment: (ch: string) => boolean;\n\t};\n\tpublic readonly wordSegmenterLocales: string[];\n\n\tprivate readonly _languageId: string;\n\tprivate _electricChars: { [key: string]: boolean } | null;\n\n\tpublic static shouldRecreate(e: ConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.hasChanged(EditorOption.layoutInfo) ||\n\t\t\te.hasChanged(EditorOption.wordSeparators) ||\n\t\t\te.hasChanged(EditorOption.emptySelectionClipboard) ||\n\t\t\te.hasChanged(EditorOption.multiCursorMergeOverlapping) ||\n\t\t\te.hasChanged(EditorOption.multiCursorPaste) ||\n\t\t\te.hasChanged(EditorOption.multiCursorLimit) ||\n\t\t\te.hasChanged(EditorOption.autoClosingBrackets) ||\n\t\t\te.hasChanged(EditorOption.autoClosingComments) ||\n\t\t\te.hasChanged(EditorOption.autoClosingQuotes) ||\n\t\t\te.hasChanged(EditorOption.autoClosingDelete) ||\n\t\t\te.hasChanged(EditorOption.autoClosingOvertype) ||\n\t\t\te.hasChanged(EditorOption.autoSurround) ||\n\t\t\te.hasChanged(EditorOption.useTabStops) ||\n\t\t\te.hasChanged(EditorOption.fontInfo) ||\n\t\t\te.hasChanged(EditorOption.readOnly) ||\n\t\t\te.hasChanged(EditorOption.wordSegmenterLocales)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageId: string,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IEditorConfiguration,\n\t\tpublic readonly languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._languageId = languageId;\n\n\t\tconst options = configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis.readOnly = options.get(EditorOption.readOnly);\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.lineHeight = fontInfo.lineHeight;\n\t\tthis.typicalHalfwidthCharacterWidth =\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.pageSize = Math.max(\n\t\t\t1,\n\t\t\tMath.floor(layoutInfo.height / this.lineHeight) - 2,\n\t\t);\n\t\tthis.useTabStops = options.get(EditorOption.useTabStops);\n\t\tthis.wordSeparators = options.get(EditorOption.wordSeparators);\n\t\tthis.emptySelectionClipboard = options.get(\n\t\t\tEditorOption.emptySelectionClipboard,\n\t\t);\n\t\tthis.copyWithSyntaxHighlighting = options.get(\n\t\t\tEditorOption.copyWithSyntaxHighlighting,\n\t\t);\n\t\tthis.multiCursorMergeOverlapping = options.get(\n\t\t\tEditorOption.multiCursorMergeOverlapping,\n\t\t);\n\t\tthis.multiCursorPaste = options.get(EditorOption.multiCursorPaste);\n\t\tthis.multiCursorLimit = options.get(EditorOption.multiCursorLimit);\n\t\tthis.autoClosingBrackets = options.get(\n\t\t\tEditorOption.autoClosingBrackets,\n\t\t);\n\t\tthis.autoClosingComments = options.get(\n\t\t\tEditorOption.autoClosingComments,\n\t\t);\n\t\tthis.autoClosingQuotes = options.get(EditorOption.autoClosingQuotes);\n\t\tthis.autoClosingDelete = options.get(EditorOption.autoClosingDelete);\n\t\tthis.autoClosingOvertype = options.get(\n\t\t\tEditorOption.autoClosingOvertype,\n\t\t);\n\t\tthis.autoSurround = options.get(EditorOption.autoSurround);\n\t\tthis.autoIndent = options.get(EditorOption.autoIndent);\n\t\tthis.wordSegmenterLocales = options.get(\n\t\t\tEditorOption.wordSegmenterLocales,\n\t\t);\n\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: this._getShouldAutoClose(\n\t\t\t\tlanguageId,\n\t\t\t\tthis.autoClosingQuotes,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tcomment: this._getShouldAutoClose(\n\t\t\t\tlanguageId,\n\t\t\t\tthis.autoClosingComments,\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tbracket: this._getShouldAutoClose(\n\t\t\t\tlanguageId,\n\t\t\t\tthis.autoClosingBrackets,\n\t\t\t\tfalse,\n\t\t\t),\n\t\t};\n\n\t\tthis.autoClosingPairs = this.languageConfigurationService\n\t\t\t.getLanguageConfiguration(languageId)\n\t\t\t.getAutoClosingPairs();\n\n\t\tconst surroundingPairs = this.languageConfigurationService\n\t\t\t.getLanguageConfiguration(languageId)\n\t\t\t.getSurroundingPairs();\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\n\t\tconst commentsConfiguration =\n\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlanguageId,\n\t\t\t).comments;\n\t\tthis.blockCommentStartToken =\n\t\t\tcommentsConfiguration?.blockCommentStartToken ?? null;\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tconst electricChars = this.languageConfigurationService\n\t\t\t\t.getLanguageConfiguration(this._languageId)\n\t\t\t\t.electricCharacter?.getElectricCharacters();\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\t/**\n\t * Should return opening bracket type to match indentation with\n\t */\n\tpublic onElectricCharacter(\n\t\tcharacter: string,\n\t\tcontext: LineTokens,\n\t\tcolumn: number,\n\t): IElectricAction | null {\n\t\tconst scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\tconst electricCharacterSupport =\n\t\t\tthis.languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tscopedLineTokens.languageId,\n\t\t\t).electricCharacter;\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn electricCharacterSupport.onElectricCharacter(\n\t\t\tcharacter,\n\t\t\tscopedLineTokens,\n\t\t\tcolumn - scopedLineTokens.firstCharOffset,\n\t\t);\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate _getShouldAutoClose(\n\t\tlanguageId: string,\n\t\tautoCloseConfig: EditorAutoClosingStrategy,\n\t\tforQuotes: boolean,\n\t): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase \"beforeWhitespace\":\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase \"languageDefined\":\n\t\t\t\treturn this._getLanguageDefinedShouldAutoClose(\n\t\t\t\t\tlanguageId,\n\t\t\t\t\tforQuotes,\n\t\t\t\t);\n\t\t\tcase \"always\":\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase \"never\":\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate _getLanguageDefinedShouldAutoClose(\n\t\tlanguageId: string,\n\t\tforQuotes: boolean,\n\t): (ch: string) => boolean {\n\t\tconst autoCloseBeforeSet = this.languageConfigurationService\n\t\t\t.getLanguageConfiguration(languageId)\n\t\t\t.getAutoCloseBeforeSet(forQuotes);\n\t\treturn (c) => autoCloseBeforeSet.indexOf(c) !== -1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic visibleColumnFromColumn(\n\t\tmodel: ICursorSimpleModel,\n\t\tposition: Position,\n\t): number {\n\t\treturn CursorColumns.visibleColumnFromColumn(\n\t\t\tmodel.getLineContent(position.lineNumber),\n\t\t\tposition.column,\n\t\t\tthis.tabSize,\n\t\t);\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic columnFromVisibleColumn(\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t\tvisibleColumn: number,\n\t): number {\n\t\tconst result = CursorColumns.columnFromVisibleColumn(\n\t\t\tmodel.getLineContent(lineNumber),\n\t\t\tvisibleColumn,\n\t\t\tthis.tabSize,\n\t\t);\n\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t */\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport type PartialCursorState =\n\t| CursorState\n\t| PartialModelCursorState\n\t| PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void = undefined;\n\n\tpublic static fromModelState(\n\t\tmodelState: SingleCursorState,\n\t): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(\n\t\tviewState: SingleCursorState,\n\t): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(\n\t\tmodelSelection: ISelection,\n\t): PartialModelCursorState {\n\t\tconst selection = Selection.liftSelection(modelSelection);\n\t\tconst modelState = new SingleCursorState(\n\t\t\tRange.fromPositions(selection.getSelectionStart()),\n\t\t\tSelectionStartKind.Simple,\n\t\t\t0,\n\t\t\tselection.getPosition(),\n\t\t\t0,\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(\n\t\tmodelSelections: readonly ISelection[],\n\t): PartialModelCursorState[] {\n\t\tconst states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (\n\t\t\tthis.viewState.equals(other.viewState) &&\n\t\t\tthis.modelState.equals(other.modelState)\n\t\t);\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport enum SelectionStartKind {\n\tSimple = 0,\n\tWord = 1,\n\tLine = 2,\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void = undefined;\n\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tpublic readonly selectionStart: Range,\n\t\tpublic readonly selectionStartKind: SelectionStartKind,\n\t\tpublic readonly selectionStartLeftoverVisibleColumns: number,\n\t\tpublic readonly position: Position,\n\t\tpublic readonly leftoverVisibleColumns: number,\n\t) {\n\t\tthis.selection = SingleCursorState._computeSelection(\n\t\t\tthis.selectionStart,\n\t\t\tthis.position,\n\t\t);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns ===\n\t\t\t\tother.selectionStartLeftoverVisibleColumns &&\n\t\t\tthis.leftoverVisibleColumns === other.leftoverVisibleColumns &&\n\t\t\tthis.selectionStartKind === other.selectionStartKind &&\n\t\t\tthis.position.equals(other.position) &&\n\t\t\tthis.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n\t}\n\n\tpublic move(\n\t\tinSelectionMode: boolean,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tleftoverVisibleColumns: number,\n\t): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartKind,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(\n\t\tselectionStart: Range,\n\t\tposition: Position,\n\t): Selection {\n\t\tif (\n\t\t\tselectionStart.isEmpty() ||\n\t\t\t!position.isBeforeOrEqual(selectionStart.getStartPosition())\n\t\t) {\n\t\t\treturn Selection.fromPositions(\n\t\t\t\tselectionStart.getStartPosition(),\n\t\t\t\tposition,\n\t\t\t);\n\t\t} else {\n\t\t\treturn Selection.fromPositions(\n\t\t\t\tselectionStart.getEndPosition(),\n\t\t\t\tposition,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void = undefined;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t},\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn ch === \"'\" || ch === '\"' || ch === \"`\";\n}\n"],
  "mappings": "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",
  "names": ["EditOperationType", "SelectionStartKind"]
}
