{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorMoveCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, ICursorSimpleModel, PartialCursorState, SelectionStartKind, SingleCursorState } from '../cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { ICommandMetadata } from '../../../platform/commands/common/commands.js';\nimport { IViewModel } from '../viewModel.js';\n\nexport class CursorMoveCommands {\n\n\tpublic static addCursorDown(viewModel: IViewModel, cursors: CursorState[], useLogicalLine: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\t\t\tif (useLogicalLine) {\n\t\t\t\tresult[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static addCursorUp(viewModel: IViewModel, cursors: CursorState[], useLogicalLine: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\t\t\tif (useLogicalLine) {\n\t\t\t\tresult[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToBeginningOfLine(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _moveToLineStart(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\tconst currentViewStateColumn = cursor.viewState.position.column;\n\t\tconst currentModelStateColumn = cursor.modelState.position.column;\n\t\tconst isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n\n\t\tconst currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n\t\tconst firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n\t\tconst isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n\n\t\tif (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n\t\t\treturn this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n\t\t} else {\n\t\t\treturn this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n\t\t}\n\t}\n\n\tprivate static _moveToLineStartByView(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tMoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)\n\t\t);\n\t}\n\n\tprivate static _moveToLineStartByModel(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tMoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)\n\t\t);\n\t}\n\n\tpublic static moveToEndOfLine(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, sticky: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _moveToLineEnd(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, sticky: boolean): PartialCursorState {\n\t\tconst viewStatePosition = cursor.viewState.position;\n\t\tconst viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n\t\tconst isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n\n\t\tconst modelStatePosition = cursor.modelState.position;\n\t\tconst modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n\t\tconst isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n\n\t\tif (isEndOfViewLine || isEndLineOfWrappedLine) {\n\t\t\treturn this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n\t\t} else {\n\t\t\treturn this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n\t\t}\n\t}\n\n\tprivate static _moveToLineEndByView(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, sticky: boolean): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tMoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky)\n\t\t);\n\t}\n\n\tprivate static _moveToLineEndByModel(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, sticky: boolean): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tMoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky)\n\t\t);\n\t}\n\n\tpublic static expandLineSelection(viewModel: IViewModel, cursors: CursorState[]): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\n\t\t\tconst startLineNumber = cursor.modelState.selection.startLineNumber;\n\t\t\tconst lineCount = viewModel.model.getLineCount();\n\n\t\t\tlet endLineNumber = cursor.modelState.selection.endLineNumber;\n\t\t\tlet endColumn: number;\n\t\t\tif (endLineNumber === lineCount) {\n\t\t\t\tendColumn = viewModel.model.getLineMaxColumn(lineCount);\n\t\t\t} else {\n\t\t\t\tendLineNumber++;\n\t\t\t\tendColumn = 1;\n\t\t\t}\n\n\t\t\tresult[i] = CursorState.fromModelState(new SingleCursorState(\n\t\t\t\tnew Range(startLineNumber, 1, startLineNumber, 1), SelectionStartKind.Simple, 0,\n\t\t\t\tnew Position(endLineNumber, endColumn), 0\n\t\t\t));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToBeginningOfBuffer(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToEndOfBuffer(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static selectAll(viewModel: IViewModel, cursor: CursorState): PartialCursorState {\n\t\tconst lineCount = viewModel.model.getLineCount();\n\t\tconst maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n\n\t\treturn CursorState.fromModelState(new SingleCursorState(\n\t\t\tnew Range(1, 1, 1, 1), SelectionStartKind.Simple, 0,\n\t\t\tnew Position(lineCount, maxColumn), 0\n\t\t));\n\t}\n\n\tpublic static line(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, _position: IPosition, _viewPosition: IPosition | undefined): PartialCursorState {\n\t\tconst position = viewModel.model.validatePosition(_position);\n\t\tconst viewPosition = (\n\t\t\t_viewPosition\n\t\t\t\t? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n\t\t\t\t: viewModel.coordinatesConverter.convertModelPositionToViewPosition(position)\n\t\t);\n\n\t\tif (!inSelectionMode) {\n\t\t\t// Entering line selection for the first time\n\t\t\tconst lineCount = viewModel.model.getLineCount();\n\n\t\t\tlet selectToLineNumber = position.lineNumber + 1;\n\t\t\tlet selectToColumn = 1;\n\t\t\tif (selectToLineNumber > lineCount) {\n\t\t\t\tselectToLineNumber = lineCount;\n\t\t\t\tselectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n\t\t\t}\n\n\t\t\treturn CursorState.fromModelState(new SingleCursorState(\n\t\t\t\tnew Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), SelectionStartKind.Line, 0,\n\t\t\t\tnew Position(selectToLineNumber, selectToColumn), 0\n\t\t\t));\n\t\t}\n\n\t\t// Continuing line selection\n\t\tconst enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n\t\tif (position.lineNumber < enteringLineNumber) {\n\n\t\t\treturn CursorState.fromViewState(cursor.viewState.move(\n\t\t\t\ttrue, viewPosition.lineNumber, 1, 0\n\t\t\t));\n\n\t\t} else if (position.lineNumber > enteringLineNumber) {\n\n\t\t\tconst lineCount = viewModel.getLineCount();\n\n\t\t\tlet selectToViewLineNumber = viewPosition.lineNumber + 1;\n\t\t\tlet selectToViewColumn = 1;\n\t\t\tif (selectToViewLineNumber > lineCount) {\n\t\t\t\tselectToViewLineNumber = lineCount;\n\t\t\t\tselectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n\t\t\t}\n\n\t\t\treturn CursorState.fromViewState(cursor.viewState.move(\n\t\t\t\ttrue, selectToViewLineNumber, selectToViewColumn, 0\n\t\t\t));\n\n\t\t} else {\n\n\t\t\tconst endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n\t\t\treturn CursorState.fromModelState(cursor.modelState.move(\n\t\t\t\ttrue, endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0\n\t\t\t));\n\n\t\t}\n\t}\n\n\tpublic static word(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, _position: IPosition): PartialCursorState {\n\t\tconst position = viewModel.model.validatePosition(_position);\n\t\treturn CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n\t}\n\n\tpublic static cancelSelection(viewModel: IViewModel, cursor: CursorState): PartialCursorState {\n\t\tif (!cursor.modelState.hasSelection()) {\n\t\t\treturn new CursorState(cursor.modelState, cursor.viewState);\n\t\t}\n\n\t\tconst lineNumber = cursor.viewState.position.lineNumber;\n\t\tconst column = cursor.viewState.position.column;\n\n\t\treturn CursorState.fromViewState(new SingleCursorState(\n\t\t\tnew Range(lineNumber, column, lineNumber, column), SelectionStartKind.Simple, 0,\n\t\t\tnew Position(lineNumber, column), 0\n\t\t));\n\t}\n\n\tpublic static moveTo(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, _position: IPosition, _viewPosition: IPosition | undefined): PartialCursorState {\n\t\tif (inSelectionMode) {\n\t\t\tif (cursor.modelState.selectionStartKind === SelectionStartKind.Word) {\n\t\t\t\treturn this.word(viewModel, cursor, inSelectionMode, _position);\n\t\t\t}\n\t\t\tif (cursor.modelState.selectionStartKind === SelectionStartKind.Line) {\n\t\t\t\treturn this.line(viewModel, cursor, inSelectionMode, _position, _viewPosition);\n\t\t\t}\n\t\t}\n\t\tconst position = viewModel.model.validatePosition(_position);\n\t\tconst viewPosition = (\n\t\t\t_viewPosition\n\t\t\t\t? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n\t\t\t\t: viewModel.coordinatesConverter.convertModelPositionToViewPosition(position)\n\t\t);\n\t\treturn CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n\t}\n\n\tpublic static simpleMove(viewModel: IViewModel, cursors: CursorState[], direction: CursorMove.SimpleMoveDirection, inSelectionMode: boolean, value: number, unit: CursorMove.Unit): PartialCursorState[] | null {\n\t\tswitch (direction) {\n\t\t\tcase CursorMove.Direction.Left: {\n\t\t\t\tif (unit === CursorMove.Unit.HalfLine) {\n\t\t\t\t\t// Move left by half the current line length\n\t\t\t\t\treturn this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n\t\t\t\t} else {\n\t\t\t\t\t// Move left by `moveParams.value` columns\n\t\t\t\t\treturn this._moveLeft(viewModel, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Right: {\n\t\t\t\tif (unit === CursorMove.Unit.HalfLine) {\n\t\t\t\t\t// Move right by half the current line length\n\t\t\t\t\treturn this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n\t\t\t\t} else {\n\t\t\t\t\t// Move right by `moveParams.value` columns\n\t\t\t\t\treturn this._moveRight(viewModel, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Up: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\t// Move up by view lines\n\t\t\t\t\treturn this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n\t\t\t\t} else {\n\t\t\t\t\t// Move up by model lines\n\t\t\t\t\treturn this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Down: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\t// Move down by view lines\n\t\t\t\t\treturn this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n\t\t\t\t} else {\n\t\t\t\t\t// Move down by model lines\n\t\t\t\t\treturn this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.PrevBlankLine: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\treturn cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n\t\t\t\t} else {\n\t\t\t\t\treturn cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.NextBlankLine: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\treturn cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n\t\t\t\t} else {\n\t\t\t\t\treturn cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineStart: {\n\t\t\t\t// Move to the beginning of the current view line\n\t\t\t\treturn this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter: {\n\t\t\t\t// Move to the first non-whitespace column of the current view line\n\t\t\t\treturn this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineColumnCenter: {\n\t\t\t\t// Move to the \"center\" of the current view line\n\t\t\t\treturn this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineEnd: {\n\t\t\t\t// Move to the end of the current view line\n\t\t\t\treturn this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter: {\n\t\t\t\t// Move to the last non-whitespace column of the current view line\n\t\t\t\treturn this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tpublic static viewportMove(viewModel: IViewModel, cursors: CursorState[], direction: CursorMove.ViewportDirection, inSelectionMode: boolean, value: number): PartialCursorState[] | null {\n\t\tconst visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n\t\tconst visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\t\tswitch (direction) {\n\t\t\tcase CursorMove.Direction.ViewPortTop: {\n\t\t\t\t// Move to the nth line start in the viewport (from the top)\n\t\t\t\tconst modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n\t\t\t\tconst modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n\t\t\t\treturn [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortBottom: {\n\t\t\t\t// Move to the nth line start in the viewport (from the bottom)\n\t\t\t\tconst modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n\t\t\t\tconst modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n\t\t\t\treturn [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortCenter: {\n\t\t\t\t// Move to the line start in the viewport center\n\t\t\t\tconst modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n\t\t\t\tconst modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n\t\t\t\treturn [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortIfOutside: {\n\t\t\t\t// Move to a position inside the viewport\n\t\t\t\tconst result: PartialCursorState[] = [];\n\t\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\t\tconst cursor = cursors[i];\n\t\t\t\t\tresult[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static findPositionInViewportIfOutside(viewModel: IViewModel, cursor: CursorState, visibleViewRange: Range, inSelectionMode: boolean): PartialCursorState {\n\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\n\t\tif (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n\t\t\t// Nothing to do, cursor is in viewport\n\t\t\treturn new CursorState(cursor.modelState, cursor.viewState);\n\n\t\t} else {\n\t\t\tlet newViewLineNumber: number;\n\t\t\tif (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n\t\t\t\tnewViewLineNumber = visibleViewRange.endLineNumber - 1;\n\t\t\t} else if (viewLineNumber < visibleViewRange.startLineNumber) {\n\t\t\t\tnewViewLineNumber = visibleViewRange.startLineNumber;\n\t\t\t} else {\n\t\t\t\tnewViewLineNumber = viewLineNumber;\n\t\t\t}\n\t\t\tconst position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n\t\t\treturn CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n\t\t}\n\t}\n\n\t/**\n\t * Find the nth line start included in the range (from the start).\n\t */\n\tprivate static _firstLineNumberInRange(model: ICursorSimpleModel, range: Range, count: number): number {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tif (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n\t\t\t// Move on to the second line if the first line start is not included in the range\n\t\t\tstartLineNumber++;\n\t\t}\n\n\t\treturn Math.min(range.endLineNumber, startLineNumber + count - 1);\n\t}\n\n\t/**\n\t * Find the nth line start included in the range (from the end).\n\t */\n\tprivate static _lastLineNumberInRange(model: ICursorSimpleModel, range: Range, count: number): number {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tif (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n\t\t\t// Move on to the second line if the first line start is not included in the range\n\t\t\tstartLineNumber++;\n\t\t}\n\n\t\treturn Math.max(startLineNumber, range.endLineNumber - count + 1);\n\t}\n\n\tprivate static _moveLeft(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, noOfColumns: number): PartialCursorState[] {\n\t\treturn cursors.map(cursor =>\n\t\t\tCursorState.fromViewState(\n\t\t\t\tMoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate static _moveHalfLineLeft(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveRight(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, noOfColumns: number): PartialCursorState[] {\n\t\treturn cursors.map(cursor =>\n\t\t\tCursorState.fromViewState(\n\t\t\t\tMoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate static _moveHalfLineRight(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveDownByViewLines(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveDownByModelLines(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveUpByViewLines(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveUpByModelLines(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewPosition(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, toViewLineNumber: number, toViewColumn: number): PartialCursorState {\n\t\treturn CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n\t}\n\n\tprivate static _moveToModelPosition(viewModel: IViewModel, cursor: CursorState, inSelectionMode: boolean, toModelLineNumber: number, toModelColumn: number): PartialCursorState {\n\t\treturn CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n\t}\n\n\tprivate static _moveToViewMinColumn(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewFirstNonWhitespaceColumn(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewCenterColumn(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n\t\t\tresult[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewMaxColumn(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewLastNonWhitespaceColumn(viewModel: IViewModel, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport namespace CursorMove {\n\n\tconst isCursorMoveArgs = function (arg: any): boolean {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst cursorMoveArg: RawArguments = arg;\n\n\t\tif (!types.isString(cursorMoveArg.to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const metadata: ICommandMetadata = {\n\t\tdescription: 'Move cursor to a logical position in the view',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'Cursor move argument object',\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n\t\t\t\tconstraint: isCursorMoveArgs,\n\t\t\t\tschema: {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'required': ['to'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'to': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'by': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'select': {\n\t\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t\t'default': false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\t/**\n\t * Positions in the view for cursor move command.\n\t */\n\texport const RawDirection = {\n\t\tLeft: 'left',\n\t\tRight: 'right',\n\t\tUp: 'up',\n\t\tDown: 'down',\n\n\t\tPrevBlankLine: 'prevBlankLine',\n\t\tNextBlankLine: 'nextBlankLine',\n\n\t\tWrappedLineStart: 'wrappedLineStart',\n\t\tWrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n\t\tWrappedLineColumnCenter: 'wrappedLineColumnCenter',\n\t\tWrappedLineEnd: 'wrappedLineEnd',\n\t\tWrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n\n\t\tViewPortTop: 'viewPortTop',\n\t\tViewPortCenter: 'viewPortCenter',\n\t\tViewPortBottom: 'viewPortBottom',\n\n\t\tViewPortIfOutside: 'viewPortIfOutside'\n\t};\n\n\t/**\n\t * Units for Cursor move 'by' argument\n\t */\n\texport const RawUnit = {\n\t\tLine: 'line',\n\t\tWrappedLine: 'wrappedLine',\n\t\tCharacter: 'character',\n\t\tHalfLine: 'halfLine'\n\t};\n\n\t/**\n\t * Arguments for Cursor move command\n\t */\n\texport interface RawArguments {\n\t\tto: string;\n\t\tselect?: boolean;\n\t\tby?: string;\n\t\tvalue?: number;\n\t}\n\n\texport function parse(args: Partial<RawArguments>): ParsedArguments | null {\n\t\tif (!args.to) {\n\t\t\t// illegal arguments\n\t\t\treturn null;\n\t\t}\n\n\t\tlet direction: Direction;\n\t\tswitch (args.to) {\n\t\t\tcase RawDirection.Left:\n\t\t\t\tdirection = Direction.Left;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Right:\n\t\t\t\tdirection = Direction.Right;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Up:\n\t\t\t\tdirection = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Down:\n\t\t\t\tdirection = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.PrevBlankLine:\n\t\t\t\tdirection = Direction.PrevBlankLine;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.NextBlankLine:\n\t\t\t\tdirection = Direction.NextBlankLine;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineStart:\n\t\t\t\tdirection = Direction.WrappedLineStart;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n\t\t\t\tdirection = Direction.WrappedLineFirstNonWhitespaceCharacter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineColumnCenter:\n\t\t\t\tdirection = Direction.WrappedLineColumnCenter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineEnd:\n\t\t\t\tdirection = Direction.WrappedLineEnd;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineLastNonWhitespaceCharacter:\n\t\t\t\tdirection = Direction.WrappedLineLastNonWhitespaceCharacter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortTop:\n\t\t\t\tdirection = Direction.ViewPortTop;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortBottom:\n\t\t\t\tdirection = Direction.ViewPortBottom;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortCenter:\n\t\t\t\tdirection = Direction.ViewPortCenter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortIfOutside:\n\t\t\t\tdirection = Direction.ViewPortIfOutside;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// illegal arguments\n\t\t\t\treturn null;\n\t\t}\n\n\t\tlet unit = Unit.None;\n\t\tswitch (args.by) {\n\t\t\tcase RawUnit.Line:\n\t\t\t\tunit = Unit.Line;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.WrappedLine:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Character:\n\t\t\t\tunit = Unit.Character;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.HalfLine:\n\t\t\t\tunit = Unit.HalfLine;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tdirection: direction,\n\t\t\tunit: unit,\n\t\t\tselect: (!!args.select),\n\t\t\tvalue: (args.value || 1)\n\t\t};\n\t}\n\n\texport interface ParsedArguments {\n\t\tdirection: Direction;\n\t\tunit: Unit;\n\t\tselect: boolean;\n\t\tvalue: number;\n\t}\n\n\texport interface SimpleMoveArguments {\n\t\tdirection: SimpleMoveDirection;\n\t\tunit: Unit;\n\t\tselect: boolean;\n\t\tvalue: number;\n\t}\n\n\texport const enum Direction {\n\t\tLeft,\n\t\tRight,\n\t\tUp,\n\t\tDown,\n\t\tPrevBlankLine,\n\t\tNextBlankLine,\n\n\t\tWrappedLineStart,\n\t\tWrappedLineFirstNonWhitespaceCharacter,\n\t\tWrappedLineColumnCenter,\n\t\tWrappedLineEnd,\n\t\tWrappedLineLastNonWhitespaceCharacter,\n\n\t\tViewPortTop,\n\t\tViewPortCenter,\n\t\tViewPortBottom,\n\n\t\tViewPortIfOutside,\n\t}\n\n\texport type SimpleMoveDirection = (\n\t\tDirection.Left\n\t\t| Direction.Right\n\t\t| Direction.Up\n\t\t| Direction.Down\n\t\t| Direction.PrevBlankLine\n\t\t| Direction.NextBlankLine\n\t\t| Direction.WrappedLineStart\n\t\t| Direction.WrappedLineFirstNonWhitespaceCharacter\n\t\t| Direction.WrappedLineColumnCenter\n\t\t| Direction.WrappedLineEnd\n\t\t| Direction.WrappedLineLastNonWhitespaceCharacter\n\t);\n\n\texport type ViewportDirection = (\n\t\tDirection.ViewPortTop\n\t\t| Direction.ViewPortCenter\n\t\t| Direction.ViewPortBottom\n\t\t| Direction.ViewPortIfOutside\n\t);\n\n\texport const enum Unit {\n\t\tNone,\n\t\tLine,\n\t\tWrappedLine,\n\t\tCharacter,\n\t\tHalfLine,\n\t}\n\n}\n"],
  "mappings": ";;AAKA,YAAY,WAAW;AACvB,SAAS,aAAa,oBAAoB,oBAAoB,oBAAoB,yBAAyB;AAC3G,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,WAAW,gBAAgB;AACpC,SAAS,aAAa;AACtB,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAEpB,MAAM,mBAAmB;AAAA,EAdhC,OAcgC;AAAA;AAAA;AAAA,EAE/B,OAAc,cAAc,WAAuB,SAAwB,gBAA+C;AACzH,UAAM,SAA+B,CAAC;AACtC,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,WAAW,IAAI,IAAI,YAAY,OAAO,YAAY,OAAO,SAAS;AACzE,UAAI,gBAAgB;AACnB,eAAO,WAAW,IAAI,YAAY,eAAe,eAAe,cAAc,UAAU,cAAc,UAAU,OAAO,OAAO,UAAU,CAAC;AAAA,MAC1I,OAAO;AACN,eAAO,WAAW,IAAI,YAAY,cAAc,eAAe,cAAc,UAAU,cAAc,WAAW,OAAO,SAAS,CAAC;AAAA,MAClI;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,YAAY,WAAuB,SAAwB,gBAA+C;AACvH,UAAM,SAA+B,CAAC;AACtC,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,WAAW,IAAI,IAAI,YAAY,OAAO,YAAY,OAAO,SAAS;AACzE,UAAI,gBAAgB;AACnB,eAAO,WAAW,IAAI,YAAY,eAAe,eAAe,YAAY,UAAU,cAAc,UAAU,OAAO,OAAO,UAAU,CAAC;AAAA,MACxI,OAAO;AACN,eAAO,WAAW,IAAI,YAAY,cAAc,eAAe,YAAY,UAAU,cAAc,WAAW,OAAO,SAAS,CAAC;AAAA,MAChI;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,sBAAsB,WAAuB,SAAwB,iBAAgD;AAClI,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,KAAK,iBAAiB,WAAW,QAAQ,eAAe;AAAA,IACrE;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,iBAAiB,WAAuB,QAAqB,iBAA8C;AACzH,UAAM,yBAAyB,OAAO,UAAU,SAAS;AACzD,UAAM,0BAA0B,OAAO,WAAW,SAAS;AAC3D,UAAM,2BAA2B,2BAA2B;AAE5D,UAAM,6BAA6B,OAAO,UAAU,SAAS;AAC7D,UAAM,sBAAsB,UAAU,gCAAgC,0BAA0B;AAChG,UAAM,wBAAwB,2BAA2B;AAEzD,QAAI,CAAC,4BAA4B,CAAC,uBAAuB;AACxD,aAAO,KAAK,uBAAuB,WAAW,QAAQ,eAAe;AAAA,IACtE,OAAO;AACN,aAAO,KAAK,wBAAwB,WAAW,QAAQ,eAAe;AAAA,IACvE;AAAA,EACD;AAAA,EAEA,OAAe,uBAAuB,WAAuB,QAAqB,iBAA8C;AAC/H,WAAO,YAAY;AAAA,MAClB,eAAe,sBAAsB,UAAU,cAAc,WAAW,OAAO,WAAW,eAAe;AAAA,IAC1G;AAAA,EACD;AAAA,EAEA,OAAe,wBAAwB,WAAuB,QAAqB,iBAA8C;AAChI,WAAO,YAAY;AAAA,MAClB,eAAe,sBAAsB,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,eAAe;AAAA,IACjH;AAAA,EACD;AAAA,EAEA,OAAc,gBAAgB,WAAuB,SAAwB,iBAA0B,QAAuC;AAC7I,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,KAAK,eAAe,WAAW,QAAQ,iBAAiB,MAAM;AAAA,IAC3E;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,eAAe,WAAuB,QAAqB,iBAA0B,QAAqC;AACxI,UAAM,oBAAoB,OAAO,UAAU;AAC3C,UAAM,qBAAqB,UAAU,iBAAiB,kBAAkB,UAAU;AAClF,UAAM,kBAAkB,kBAAkB,WAAW;AAErD,UAAM,qBAAqB,OAAO,WAAW;AAC7C,UAAM,iBAAiB,UAAU,MAAM,iBAAiB,mBAAmB,UAAU;AACrF,UAAM,yBAAyB,qBAAqB,kBAAkB,WAAW,iBAAiB,mBAAmB;AAErH,QAAI,mBAAmB,wBAAwB;AAC9C,aAAO,KAAK,sBAAsB,WAAW,QAAQ,iBAAiB,MAAM;AAAA,IAC7E,OAAO;AACN,aAAO,KAAK,qBAAqB,WAAW,QAAQ,iBAAiB,MAAM;AAAA,IAC5E;AAAA,EACD;AAAA,EAEA,OAAe,qBAAqB,WAAuB,QAAqB,iBAA0B,QAAqC;AAC9I,WAAO,YAAY;AAAA,MAClB,eAAe,gBAAgB,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,MAAM;AAAA,IAC5G;AAAA,EACD;AAAA,EAEA,OAAe,sBAAsB,WAAuB,QAAqB,iBAA0B,QAAqC;AAC/I,WAAO,YAAY;AAAA,MAClB,eAAe,gBAAgB,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,iBAAiB,MAAM;AAAA,IACnH;AAAA,EACD;AAAA,EAEA,OAAc,oBAAoB,WAAuB,SAA8C;AACtG,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AAExB,YAAM,kBAAkB,OAAO,WAAW,UAAU;AACpD,YAAM,YAAY,UAAU,MAAM,aAAa;AAE/C,UAAI,gBAAgB,OAAO,WAAW,UAAU;AAChD,UAAI;AACJ,UAAI,kBAAkB,WAAW;AAChC,oBAAY,UAAU,MAAM,iBAAiB,SAAS;AAAA,MACvD,OAAO;AACN;AACA,oBAAY;AAAA,MACb;AAEA,aAAO,CAAC,IAAI,YAAY,eAAe,IAAI;AAAA,QAC1C,IAAI,MAAM,iBAAiB,GAAG,iBAAiB,CAAC;AAAA,QAAG,mBAAmB;AAAA,QAAQ;AAAA,QAC9E,IAAI,SAAS,eAAe,SAAS;AAAA,QAAG;AAAA,MACzC,CAAC;AAAA,IACF;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,wBAAwB,WAAuB,SAAwB,iBAAgD;AACpI,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,YAAY,eAAe,eAAe,wBAAwB,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,eAAe,CAAC;AAAA,IAC3J;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,kBAAkB,WAAuB,SAAwB,iBAAgD;AAC9H,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,YAAY,eAAe,eAAe,kBAAkB,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,eAAe,CAAC;AAAA,IACrJ;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,UAAU,WAAuB,QAAyC;AACvF,UAAM,YAAY,UAAU,MAAM,aAAa;AAC/C,UAAM,YAAY,UAAU,MAAM,iBAAiB,SAAS;AAE5D,WAAO,YAAY,eAAe,IAAI;AAAA,MACrC,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,MAAG,mBAAmB;AAAA,MAAQ;AAAA,MAClD,IAAI,SAAS,WAAW,SAAS;AAAA,MAAG;AAAA,IACrC,CAAC;AAAA,EACF;AAAA,EAEA,OAAc,KAAK,WAAuB,QAAqB,iBAA0B,WAAsB,eAA0D;AACxK,UAAM,WAAW,UAAU,MAAM,iBAAiB,SAAS;AAC3D,UAAM,eACL,gBACG,UAAU,qBAAqB,qBAAqB,IAAI,SAAS,cAAc,YAAY,cAAc,MAAM,GAAG,QAAQ,IAC1H,UAAU,qBAAqB,mCAAmC,QAAQ;AAG9E,QAAI,CAAC,iBAAiB;AAErB,YAAM,YAAY,UAAU,MAAM,aAAa;AAE/C,UAAI,qBAAqB,SAAS,aAAa;AAC/C,UAAI,iBAAiB;AACrB,UAAI,qBAAqB,WAAW;AACnC,6BAAqB;AACrB,yBAAiB,UAAU,MAAM,iBAAiB,kBAAkB;AAAA,MACrE;AAEA,aAAO,YAAY,eAAe,IAAI;AAAA,QACrC,IAAI,MAAM,SAAS,YAAY,GAAG,oBAAoB,cAAc;AAAA,QAAG,mBAAmB;AAAA,QAAM;AAAA,QAChG,IAAI,SAAS,oBAAoB,cAAc;AAAA,QAAG;AAAA,MACnD,CAAC;AAAA,IACF;AAGA,UAAM,qBAAqB,OAAO,WAAW,eAAe,iBAAiB,EAAE;AAE/E,QAAI,SAAS,aAAa,oBAAoB;AAE7C,aAAO,YAAY,cAAc,OAAO,UAAU;AAAA,QACjD;AAAA,QAAM,aAAa;AAAA,QAAY;AAAA,QAAG;AAAA,MACnC,CAAC;AAAA,IAEF,WAAW,SAAS,aAAa,oBAAoB;AAEpD,YAAM,YAAY,UAAU,aAAa;AAEzC,UAAI,yBAAyB,aAAa,aAAa;AACvD,UAAI,qBAAqB;AACzB,UAAI,yBAAyB,WAAW;AACvC,iCAAyB;AACzB,6BAAqB,UAAU,iBAAiB,sBAAsB;AAAA,MACvE;AAEA,aAAO,YAAY,cAAc,OAAO,UAAU;AAAA,QACjD;AAAA,QAAM;AAAA,QAAwB;AAAA,QAAoB;AAAA,MACnD,CAAC;AAAA,IAEF,OAAO;AAEN,YAAM,8BAA8B,OAAO,WAAW,eAAe,eAAe;AACpF,aAAO,YAAY,eAAe,OAAO,WAAW;AAAA,QACnD;AAAA,QAAM,4BAA4B;AAAA,QAAY,4BAA4B;AAAA,QAAQ;AAAA,MACnF,CAAC;AAAA,IAEF;AAAA,EACD;AAAA,EAEA,OAAc,KAAK,WAAuB,QAAqB,iBAA0B,WAA0C;AAClI,UAAM,WAAW,UAAU,MAAM,iBAAiB,SAAS;AAC3D,WAAO,YAAY,eAAe,eAAe,KAAK,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,iBAAiB,QAAQ,CAAC;AAAA,EAC7I;AAAA,EAEA,OAAc,gBAAgB,WAAuB,QAAyC;AAC7F,QAAI,CAAC,OAAO,WAAW,aAAa,GAAG;AACtC,aAAO,IAAI,YAAY,OAAO,YAAY,OAAO,SAAS;AAAA,IAC3D;AAEA,UAAM,aAAa,OAAO,UAAU,SAAS;AAC7C,UAAM,SAAS,OAAO,UAAU,SAAS;AAEzC,WAAO,YAAY,cAAc,IAAI;AAAA,MACpC,IAAI,MAAM,YAAY,QAAQ,YAAY,MAAM;AAAA,MAAG,mBAAmB;AAAA,MAAQ;AAAA,MAC9E,IAAI,SAAS,YAAY,MAAM;AAAA,MAAG;AAAA,IACnC,CAAC;AAAA,EACF;AAAA,EAEA,OAAc,OAAO,WAAuB,QAAqB,iBAA0B,WAAsB,eAA0D;AAC1K,QAAI,iBAAiB;AACpB,UAAI,OAAO,WAAW,uBAAuB,mBAAmB,MAAM;AACrE,eAAO,KAAK,KAAK,WAAW,QAAQ,iBAAiB,SAAS;AAAA,MAC/D;AACA,UAAI,OAAO,WAAW,uBAAuB,mBAAmB,MAAM;AACrE,eAAO,KAAK,KAAK,WAAW,QAAQ,iBAAiB,WAAW,aAAa;AAAA,MAC9E;AAAA,IACD;AACA,UAAM,WAAW,UAAU,MAAM,iBAAiB,SAAS;AAC3D,UAAM,eACL,gBACG,UAAU,qBAAqB,qBAAqB,IAAI,SAAS,cAAc,YAAY,cAAc,MAAM,GAAG,QAAQ,IAC1H,UAAU,qBAAqB,mCAAmC,QAAQ;AAE9E,WAAO,YAAY,cAAc,OAAO,UAAU,KAAK,iBAAiB,aAAa,YAAY,aAAa,QAAQ,CAAC,CAAC;AAAA,EACzH;AAAA,EAEA,OAAc,WAAW,WAAuB,SAAwB,WAA2C,iBAA0B,OAAe,MAAoD;AAC/M,YAAQ,WAAW;AAAA,MAClB,KAAK,WAAW,UAAU,MAAM;AAC/B,YAAI,SAAS,WAAW,KAAK,UAAU;AAEtC,iBAAO,KAAK,kBAAkB,WAAW,SAAS,eAAe;AAAA,QAClE,OAAO;AAEN,iBAAO,KAAK,UAAU,WAAW,SAAS,iBAAiB,KAAK;AAAA,QACjE;AAAA,MACD;AAAA,MACA,KAAK,WAAW,UAAU,OAAO;AAChC,YAAI,SAAS,WAAW,KAAK,UAAU;AAEtC,iBAAO,KAAK,mBAAmB,WAAW,SAAS,eAAe;AAAA,QACnE,OAAO;AAEN,iBAAO,KAAK,WAAW,WAAW,SAAS,iBAAiB,KAAK;AAAA,QAClE;AAAA,MACD;AAAA,MACA,KAAK,WAAW,UAAU,IAAI;AAC7B,YAAI,SAAS,WAAW,KAAK,aAAa;AAEzC,iBAAO,KAAK,mBAAmB,WAAW,SAAS,iBAAiB,KAAK;AAAA,QAC1E,OAAO;AAEN,iBAAO,KAAK,oBAAoB,WAAW,SAAS,iBAAiB,KAAK;AAAA,QAC3E;AAAA,MACD;AAAA,MACA,KAAK,WAAW,UAAU,MAAM;AAC/B,YAAI,SAAS,WAAW,KAAK,aAAa;AAEzC,iBAAO,KAAK,qBAAqB,WAAW,SAAS,iBAAiB,KAAK;AAAA,QAC5E,OAAO;AAEN,iBAAO,KAAK,sBAAsB,WAAW,SAAS,iBAAiB,KAAK;AAAA,QAC7E;AAAA,MACD;AAAA,MACA,KAAK,WAAW,UAAU,eAAe;AACxC,YAAI,SAAS,WAAW,KAAK,aAAa;AACzC,iBAAO,QAAQ,IAAI,YAAU,YAAY,cAAc,eAAe,oBAAoB,UAAU,cAAc,WAAW,OAAO,WAAW,eAAe,CAAC,CAAC;AAAA,QACjK,OAAO;AACN,iBAAO,QAAQ,IAAI,YAAU,YAAY,eAAe,eAAe,oBAAoB,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,eAAe,CAAC,CAAC;AAAA,QACzK;AAAA,MACD;AAAA,MACA,KAAK,WAAW,UAAU,eAAe;AACxC,YAAI,SAAS,WAAW,KAAK,aAAa;AACzC,iBAAO,QAAQ,IAAI,YAAU,YAAY,cAAc,eAAe,oBAAoB,UAAU,cAAc,WAAW,OAAO,WAAW,eAAe,CAAC,CAAC;AAAA,QACjK,OAAO;AACN,iBAAO,QAAQ,IAAI,YAAU,YAAY,eAAe,eAAe,oBAAoB,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,eAAe,CAAC,CAAC;AAAA,QACzK;AAAA,MACD;AAAA,MACA,KAAK,WAAW,UAAU,kBAAkB;AAE3C,eAAO,KAAK,qBAAqB,WAAW,SAAS,eAAe;AAAA,MACrE;AAAA,MACA,KAAK,WAAW,UAAU,wCAAwC;AAEjE,eAAO,KAAK,oCAAoC,WAAW,SAAS,eAAe;AAAA,MACpF;AAAA,MACA,KAAK,WAAW,UAAU,yBAAyB;AAElD,eAAO,KAAK,wBAAwB,WAAW,SAAS,eAAe;AAAA,MACxE;AAAA,MACA,KAAK,WAAW,UAAU,gBAAgB;AAEzC,eAAO,KAAK,qBAAqB,WAAW,SAAS,eAAe;AAAA,MACrE;AAAA,MACA,KAAK,WAAW,UAAU,uCAAuC;AAEhE,eAAO,KAAK,mCAAmC,WAAW,SAAS,eAAe;AAAA,MACnF;AAAA,MACA;AACC,eAAO;AAAA,IACT;AAAA,EAED;AAAA,EAEA,OAAc,aAAa,WAAuB,SAAwB,WAAyC,iBAA0B,OAA4C;AACxL,UAAM,mBAAmB,UAAU,8BAA8B;AACjE,UAAM,oBAAoB,UAAU,qBAAqB,6BAA6B,gBAAgB;AACtG,YAAQ,WAAW;AAAA,MAClB,KAAK,WAAW,UAAU,aAAa;AAEtC,cAAM,kBAAkB,KAAK,wBAAwB,UAAU,OAAO,mBAAmB,KAAK;AAC9F,cAAM,cAAc,UAAU,MAAM,gCAAgC,eAAe;AACnF,eAAO,CAAC,KAAK,qBAAqB,WAAW,QAAQ,CAAC,GAAG,iBAAiB,iBAAiB,WAAW,CAAC;AAAA,MACxG;AAAA,MACA,KAAK,WAAW,UAAU,gBAAgB;AAEzC,cAAM,kBAAkB,KAAK,uBAAuB,UAAU,OAAO,mBAAmB,KAAK;AAC7F,cAAM,cAAc,UAAU,MAAM,gCAAgC,eAAe;AACnF,eAAO,CAAC,KAAK,qBAAqB,WAAW,QAAQ,CAAC,GAAG,iBAAiB,iBAAiB,WAAW,CAAC;AAAA,MACxG;AAAA,MACA,KAAK,WAAW,UAAU,gBAAgB;AAEzC,cAAM,kBAAkB,KAAK,OAAO,kBAAkB,kBAAkB,kBAAkB,iBAAiB,CAAC;AAC5G,cAAM,cAAc,UAAU,MAAM,gCAAgC,eAAe;AACnF,eAAO,CAAC,KAAK,qBAAqB,WAAW,QAAQ,CAAC,GAAG,iBAAiB,iBAAiB,WAAW,CAAC;AAAA,MACxG;AAAA,MACA,KAAK,WAAW,UAAU,mBAAmB;AAE5C,cAAM,SAA+B,CAAC;AACtC,iBAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,gBAAM,SAAS,QAAQ,CAAC;AACxB,iBAAO,CAAC,IAAI,KAAK,gCAAgC,WAAW,QAAQ,kBAAkB,eAAe;AAAA,QACtG;AACA,eAAO;AAAA,MACR;AAAA,MACA;AACC,eAAO;AAAA,IACT;AAAA,EACD;AAAA,EAEA,OAAc,gCAAgC,WAAuB,QAAqB,kBAAyB,iBAA8C;AAChK,UAAM,iBAAiB,OAAO,UAAU,SAAS;AAEjD,QAAI,iBAAiB,mBAAmB,kBAAkB,kBAAkB,iBAAiB,gBAAgB,GAAG;AAE/G,aAAO,IAAI,YAAY,OAAO,YAAY,OAAO,SAAS;AAAA,IAE3D,OAAO;AACN,UAAI;AACJ,UAAI,iBAAiB,iBAAiB,gBAAgB,GAAG;AACxD,4BAAoB,iBAAiB,gBAAgB;AAAA,MACtD,WAAW,iBAAiB,iBAAiB,iBAAiB;AAC7D,4BAAoB,iBAAiB;AAAA,MACtC,OAAO;AACN,4BAAoB;AAAA,MACrB;AACA,YAAM,WAAW,eAAe,SAAS,UAAU,cAAc,WAAW,gBAAgB,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,wBAAwB,mBAAmB,KAAK;AAC/L,aAAO,YAAY,cAAc,OAAO,UAAU,KAAK,iBAAiB,SAAS,YAAY,SAAS,QAAQ,SAAS,sBAAsB,CAAC;AAAA,IAC/I;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,wBAAwB,OAA2B,OAAc,OAAuB;AACtG,QAAI,kBAAkB,MAAM;AAC5B,QAAI,MAAM,gBAAgB,MAAM,iBAAiB,eAAe,GAAG;AAElE;AAAA,IACD;AAEA,WAAO,KAAK,IAAI,MAAM,eAAe,kBAAkB,QAAQ,CAAC;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,uBAAuB,OAA2B,OAAc,OAAuB;AACrG,QAAI,kBAAkB,MAAM;AAC5B,QAAI,MAAM,gBAAgB,MAAM,iBAAiB,eAAe,GAAG;AAElE;AAAA,IACD;AAEA,WAAO,KAAK,IAAI,iBAAiB,MAAM,gBAAgB,QAAQ,CAAC;AAAA,EACjE;AAAA,EAEA,OAAe,UAAU,WAAuB,SAAwB,iBAA0B,aAA2C;AAC5I,WAAO,QAAQ;AAAA,MAAI,YAClB,YAAY;AAAA,QACX,eAAe,SAAS,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,WAAW;AAAA,MAC1G;AAAA,IACD;AAAA,EACD;AAAA,EAEA,OAAe,kBAAkB,WAAuB,SAAwB,iBAAgD;AAC/H,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,WAAW,KAAK,MAAM,UAAU,cAAc,cAAc,IAAI,CAAC;AACvE,aAAO,CAAC,IAAI,YAAY,cAAc,eAAe,SAAS,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,QAAQ,CAAC;AAAA,IAC9I;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,WAAW,WAAuB,SAAwB,iBAA0B,aAA2C;AAC7I,WAAO,QAAQ;AAAA,MAAI,YAClB,YAAY;AAAA,QACX,eAAe,UAAU,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,WAAW;AAAA,MAC3G;AAAA,IACD;AAAA,EACD;AAAA,EAEA,OAAe,mBAAmB,WAAuB,SAAwB,iBAAgD;AAChI,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,WAAW,KAAK,MAAM,UAAU,cAAc,cAAc,IAAI,CAAC;AACvE,aAAO,CAAC,IAAI,YAAY,cAAc,eAAe,UAAU,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,QAAQ,CAAC;AAAA,IAC/I;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,qBAAqB,WAAuB,SAAwB,iBAA0B,YAA0C;AACtJ,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,YAAY,cAAc,eAAe,SAAS,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,UAAU,CAAC;AAAA,IAChJ;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,sBAAsB,WAAuB,SAAwB,iBAA0B,YAA0C;AACvJ,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,YAAY,eAAe,eAAe,SAAS,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,iBAAiB,UAAU,CAAC;AAAA,IACxJ;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,mBAAmB,WAAuB,SAAwB,iBAA0B,YAA0C;AACpJ,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,YAAY,cAAc,eAAe,OAAO,UAAU,cAAc,WAAW,OAAO,WAAW,iBAAiB,UAAU,CAAC;AAAA,IAC9I;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,oBAAoB,WAAuB,SAAwB,iBAA0B,YAA0C;AACrJ,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,aAAO,CAAC,IAAI,YAAY,eAAe,eAAe,OAAO,UAAU,cAAc,UAAU,OAAO,OAAO,YAAY,iBAAiB,UAAU,CAAC;AAAA,IACtJ;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,oBAAoB,WAAuB,QAAqB,iBAA0B,kBAA0B,cAA0C;AAC5K,WAAO,YAAY,cAAc,OAAO,UAAU,KAAK,iBAAiB,kBAAkB,cAAc,CAAC,CAAC;AAAA,EAC3G;AAAA,EAEA,OAAe,qBAAqB,WAAuB,QAAqB,iBAA0B,mBAA2B,eAA2C;AAC/K,WAAO,YAAY,eAAe,OAAO,WAAW,KAAK,iBAAiB,mBAAmB,eAAe,CAAC,CAAC;AAAA,EAC/G;AAAA,EAEA,OAAe,qBAAqB,WAAuB,SAAwB,iBAAgD;AAClI,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,aAAa,UAAU,iBAAiB,cAAc;AAC5D,aAAO,CAAC,IAAI,KAAK,oBAAoB,WAAW,QAAQ,iBAAiB,gBAAgB,UAAU;AAAA,IACpG;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,oCAAoC,WAAuB,SAAwB,iBAAgD;AACjJ,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,aAAa,UAAU,gCAAgC,cAAc;AAC3E,aAAO,CAAC,IAAI,KAAK,oBAAoB,WAAW,QAAQ,iBAAiB,gBAAgB,UAAU;AAAA,IACpG;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,wBAAwB,WAAuB,SAAwB,iBAAgD;AACrI,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,aAAa,KAAK,OAAO,UAAU,iBAAiB,cAAc,IAAI,UAAU,iBAAiB,cAAc,KAAK,CAAC;AAC3H,aAAO,CAAC,IAAI,KAAK,oBAAoB,WAAW,QAAQ,iBAAiB,gBAAgB,UAAU;AAAA,IACpG;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,qBAAqB,WAAuB,SAAwB,iBAAgD;AAClI,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,aAAa,UAAU,iBAAiB,cAAc;AAC5D,aAAO,CAAC,IAAI,KAAK,oBAAoB,WAAW,QAAQ,iBAAiB,gBAAgB,UAAU;AAAA,IACpG;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,mCAAmC,WAAuB,SAAwB,iBAAgD;AAChJ,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AACnD,YAAM,SAAS,QAAQ,CAAC;AACxB,YAAM,iBAAiB,OAAO,UAAU,SAAS;AACjD,YAAM,aAAa,UAAU,+BAA+B,cAAc;AAC1E,aAAO,CAAC,IAAI,KAAK,oBAAoB,WAAW,QAAQ,iBAAiB,gBAAgB,UAAU;AAAA,IACpG;AACA,WAAO;AAAA,EACR;AACD;AAEO,IAAU;AAAA,CAAV,CAAUA,gBAAV;AAEN,QAAM,mBAAmB,gCAAU,KAAmB;AACrD,QAAI,CAAC,MAAM,SAAS,GAAG,GAAG;AACzB,aAAO;AAAA,IACR;AAEA,UAAM,gBAA8B;AAEpC,QAAI,CAAC,MAAM,SAAS,cAAc,EAAE,GAAG;AACtC,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,MAAM,YAAY,cAAc,MAAM,KAAK,CAAC,MAAM,UAAU,cAAc,MAAM,GAAG;AACvF,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,MAAM,YAAY,cAAc,EAAE,KAAK,CAAC,MAAM,SAAS,cAAc,EAAE,GAAG;AAC9E,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,MAAM,YAAY,cAAc,KAAK,KAAK,CAAC,MAAM,SAAS,cAAc,KAAK,GAAG;AACpF,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR,GAxByB;AA0BlB,EAAMA,YAAA,WAA6B;AAAA,IACzC,aAAa;AAAA,IACb,MAAM;AAAA,MACL;AAAA,QACC,MAAM;AAAA,QACN,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAeb,YAAY;AAAA,QACZ,QAAQ;AAAA,UACP,QAAQ;AAAA,UACR,YAAY,CAAC,IAAI;AAAA,UACjB,cAAc;AAAA,YACb,MAAM;AAAA,cACL,QAAQ;AAAA,cACR,QAAQ,CAAC,QAAQ,SAAS,MAAM,QAAQ,iBAAiB,iBAAiB,oBAAoB,kBAAkB,2BAA2B,0CAA0C,yCAAyC,eAAe,kBAAkB,kBAAkB,mBAAmB;AAAA,YACrS;AAAA,YACA,MAAM;AAAA,cACL,QAAQ;AAAA,cACR,QAAQ,CAAC,QAAQ,eAAe,aAAa,UAAU;AAAA,YACxD;AAAA,YACA,SAAS;AAAA,cACR,QAAQ;AAAA,cACR,WAAW;AAAA,YACZ;AAAA,YACA,UAAU;AAAA,cACT,QAAQ;AAAA,cACR,WAAW;AAAA,YACZ;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAKO,EAAMA,YAAA,eAAe;AAAA,IAC3B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,MAAM;AAAA,IAEN,eAAe;AAAA,IACf,eAAe;AAAA,IAEf,kBAAkB;AAAA,IAClB,wCAAwC;AAAA,IACxC,yBAAyB;AAAA,IACzB,gBAAgB;AAAA,IAChB,uCAAuC;AAAA,IAEvC,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAEhB,mBAAmB;AAAA,EACpB;AAKO,EAAMA,YAAA,UAAU;AAAA,IACtB,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,IACX,UAAU;AAAA,EACX;AAYO,WAAS,MAAM,MAAqD;AAC1E,QAAI,CAAC,KAAK,IAAI;AAEb,aAAO;AAAA,IACR;AAEA,QAAI;AACJ,YAAQ,KAAK,IAAI;AAAA,MAChB,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD,KAAKA,YAAA,aAAa;AACjB,oBAAY;AACZ;AAAA,MACD;AAEC,eAAO;AAAA,IACT;AAEA,QAAI,OAAO;AACX,YAAQ,KAAK,IAAI;AAAA,MAChB,KAAKA,YAAA,QAAQ;AACZ,eAAO;AACP;AAAA,MACD,KAAKA,YAAA,QAAQ;AACZ,eAAO;AACP;AAAA,MACD,KAAKA,YAAA,QAAQ;AACZ,eAAO;AACP;AAAA,MACD,KAAKA,YAAA,QAAQ;AACZ,eAAO;AACP;AAAA,IACF;AAEA,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA,QAAS,CAAC,CAAC,KAAK;AAAA,MAChB,OAAQ,KAAK,SAAS;AAAA,IACvB;AAAA,EACD;AAhFO,EAAAA,YAAS;AAAA;AAgGT,MAAW;AAAX,IAAWC,eAAX;AACN,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AAAA,KAlBiB,YAAAD,YAAA,cAAAA,YAAA;AA0CX,MAAW;AAAX,IAAWE,UAAX;AACN,IAAAA,YAAA;AACA,IAAAA,YAAA;AACA,IAAAA,YAAA;AACA,IAAAA,YAAA;AACA,IAAAA,YAAA;AAAA,KALiB,OAAAF,YAAA,SAAAA,YAAA;AAAA,GAlQF;",
  "names": ["CursorMove", "Direction", "Unit"]
}
