{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorMoveCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as types from \"../../../base/common/types.js\";\nimport type { ICommandMetadata } from \"../../../platform/commands/common/commands.js\";\nimport { type IPosition, Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport {\n\tCursorState,\n\ttype ICursorSimpleModel,\n\ttype PartialCursorState,\n\tSelectionStartKind,\n\tSingleCursorState,\n} from \"../cursorCommon.js\";\nimport type { IViewModel } from \"../viewModel.js\";\nimport { MoveOperations } from \"./cursorMoveOperations.js\";\nimport { WordOperations } from \"./cursorWordOperations.js\";\n\nexport class CursorMoveCommands {\n\tpublic static addCursorDown(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tuseLogicalLine: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[resultLen++] = new CursorState(\n\t\t\t\tcursor.modelState,\n\t\t\t\tcursor.viewState,\n\t\t\t);\n\t\t\tif (useLogicalLine) {\n\t\t\t\tresult[resultLen++] = CursorState.fromModelState(\n\t\t\t\t\tMoveOperations.translateDown(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tcursor.modelState,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = CursorState.fromViewState(\n\t\t\t\t\tMoveOperations.translateDown(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursor.viewState,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static addCursorUp(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tuseLogicalLine: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[resultLen++] = new CursorState(\n\t\t\t\tcursor.modelState,\n\t\t\t\tcursor.viewState,\n\t\t\t);\n\t\t\tif (useLogicalLine) {\n\t\t\t\tresult[resultLen++] = CursorState.fromModelState(\n\t\t\t\t\tMoveOperations.translateUp(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\tcursor.modelState,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = CursorState.fromViewState(\n\t\t\t\t\tMoveOperations.translateUp(\n\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursor.viewState,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToBeginningOfLine(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = this._moveToLineStart(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _moveToLineStart(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState {\n\t\tconst currentViewStateColumn = cursor.viewState.position.column;\n\t\tconst currentModelStateColumn = cursor.modelState.position.column;\n\t\tconst isFirstLineOfWrappedLine =\n\t\t\tcurrentViewStateColumn === currentModelStateColumn;\n\n\t\tconst currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n\t\tconst firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(\n\t\t\tcurrentViewStatelineNumber,\n\t\t);\n\t\tconst isBeginningOfViewLine =\n\t\t\tcurrentViewStateColumn === firstNonBlankColumn;\n\n\t\tif (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n\t\t\treturn this._moveToLineStartByView(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t);\n\t\t} else {\n\t\t\treturn this._moveToLineStartByModel(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _moveToLineStartByView(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tMoveOperations.moveToBeginningOfLine(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel,\n\t\t\t\tcursor.viewState,\n\t\t\t\tinSelectionMode,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static _moveToLineStartByModel(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tMoveOperations.moveToBeginningOfLine(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel.model,\n\t\t\t\tcursor.modelState,\n\t\t\t\tinSelectionMode,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic static moveToEndOfLine(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tsticky: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = this._moveToLineEnd(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tsticky,\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _moveToLineEnd(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\tsticky: boolean,\n\t): PartialCursorState {\n\t\tconst viewStatePosition = cursor.viewState.position;\n\t\tconst viewModelMaxColumn = viewModel.getLineMaxColumn(\n\t\t\tviewStatePosition.lineNumber,\n\t\t);\n\t\tconst isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n\n\t\tconst modelStatePosition = cursor.modelState.position;\n\t\tconst modelMaxColumn = viewModel.model.getLineMaxColumn(\n\t\t\tmodelStatePosition.lineNumber,\n\t\t);\n\t\tconst isEndLineOfWrappedLine =\n\t\t\tviewModelMaxColumn - viewStatePosition.column ===\n\t\t\tmodelMaxColumn - modelStatePosition.column;\n\n\t\tif (isEndOfViewLine || isEndLineOfWrappedLine) {\n\t\t\treturn this._moveToLineEndByModel(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tsticky,\n\t\t\t);\n\t\t} else {\n\t\t\treturn this._moveToLineEndByView(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tsticky,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _moveToLineEndByView(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\tsticky: boolean,\n\t): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tMoveOperations.moveToEndOfLine(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel,\n\t\t\t\tcursor.viewState,\n\t\t\t\tinSelectionMode,\n\t\t\t\tsticky,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static _moveToLineEndByModel(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\tsticky: boolean,\n\t): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tMoveOperations.moveToEndOfLine(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel.model,\n\t\t\t\tcursor.modelState,\n\t\t\t\tinSelectionMode,\n\t\t\t\tsticky,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic static expandLineSelection(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\n\t\t\tconst startLineNumber = cursor.modelState.selection.startLineNumber;\n\t\t\tconst lineCount = viewModel.model.getLineCount();\n\n\t\t\tlet endLineNumber = cursor.modelState.selection.endLineNumber;\n\t\t\tlet endColumn: number;\n\t\t\tif (endLineNumber === lineCount) {\n\t\t\t\tendColumn = viewModel.model.getLineMaxColumn(lineCount);\n\t\t\t} else {\n\t\t\t\tendLineNumber++;\n\t\t\t\tendColumn = 1;\n\t\t\t}\n\n\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\tnew SingleCursorState(\n\t\t\t\t\tnew Range(startLineNumber, 1, startLineNumber, 1),\n\t\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t\t0,\n\t\t\t\t\tnew Position(endLineNumber, endColumn),\n\t\t\t\t\t0,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToBeginningOfBuffer(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\tMoveOperations.moveToBeginningOfBuffer(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel.model,\n\t\t\t\t\tcursor.modelState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToEndOfBuffer(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\tMoveOperations.moveToEndOfBuffer(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel.model,\n\t\t\t\t\tcursor.modelState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static selectAll(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t): PartialCursorState {\n\t\tconst lineCount = viewModel.model.getLineCount();\n\t\tconst maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n\n\t\treturn CursorState.fromModelState(\n\t\t\tnew SingleCursorState(\n\t\t\t\tnew Range(1, 1, 1, 1),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t0,\n\t\t\t\tnew Position(lineCount, maxColumn),\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic static line(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\t_position: IPosition,\n\t\t_viewPosition: IPosition | undefined,\n\t): PartialCursorState {\n\t\tconst position = viewModel.model.validatePosition(_position);\n\t\tconst viewPosition = _viewPosition\n\t\t\t? viewModel.coordinatesConverter.validateViewPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\t_viewPosition.lineNumber,\n\t\t\t\t\t\t_viewPosition.column,\n\t\t\t\t\t),\n\t\t\t\t\tposition,\n\t\t\t\t)\n\t\t\t: viewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tposition,\n\t\t\t\t);\n\n\t\tif (!inSelectionMode) {\n\t\t\t// Entering line selection for the first time\n\t\t\tconst lineCount = viewModel.model.getLineCount();\n\n\t\t\tlet selectToLineNumber = position.lineNumber + 1;\n\t\t\tlet selectToColumn = 1;\n\t\t\tif (selectToLineNumber > lineCount) {\n\t\t\t\tselectToLineNumber = lineCount;\n\t\t\t\tselectToColumn =\n\t\t\t\t\tviewModel.model.getLineMaxColumn(selectToLineNumber);\n\t\t\t}\n\n\t\t\treturn CursorState.fromModelState(\n\t\t\t\tnew SingleCursorState(\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tselectToLineNumber,\n\t\t\t\t\t\tselectToColumn,\n\t\t\t\t\t),\n\t\t\t\t\tSelectionStartKind.Line,\n\t\t\t\t\t0,\n\t\t\t\t\tnew Position(selectToLineNumber, selectToColumn),\n\t\t\t\t\t0,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Continuing line selection\n\t\tconst enteringLineNumber =\n\t\t\tcursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n\t\tif (position.lineNumber < enteringLineNumber) {\n\t\t\treturn CursorState.fromViewState(\n\t\t\t\tcursor.viewState.move(true, viewPosition.lineNumber, 1, 0),\n\t\t\t);\n\t\t} else if (position.lineNumber > enteringLineNumber) {\n\t\t\tconst lineCount = viewModel.getLineCount();\n\n\t\t\tlet selectToViewLineNumber = viewPosition.lineNumber + 1;\n\t\t\tlet selectToViewColumn = 1;\n\t\t\tif (selectToViewLineNumber > lineCount) {\n\t\t\t\tselectToViewLineNumber = lineCount;\n\t\t\t\tselectToViewColumn = viewModel.getLineMaxColumn(\n\t\t\t\t\tselectToViewLineNumber,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn CursorState.fromViewState(\n\t\t\t\tcursor.viewState.move(\n\t\t\t\t\ttrue,\n\t\t\t\t\tselectToViewLineNumber,\n\t\t\t\t\tselectToViewColumn,\n\t\t\t\t\t0,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tconst endPositionOfSelectionStart =\n\t\t\t\tcursor.modelState.selectionStart.getEndPosition();\n\t\t\treturn CursorState.fromModelState(\n\t\t\t\tcursor.modelState.move(\n\t\t\t\t\ttrue,\n\t\t\t\t\tendPositionOfSelectionStart.lineNumber,\n\t\t\t\t\tendPositionOfSelectionStart.column,\n\t\t\t\t\t0,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static word(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\t_position: IPosition,\n\t): PartialCursorState {\n\t\tconst position = viewModel.model.validatePosition(_position);\n\t\treturn CursorState.fromModelState(\n\t\t\tWordOperations.word(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel.model,\n\t\t\t\tcursor.modelState,\n\t\t\t\tinSelectionMode,\n\t\t\t\tposition,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic static cancelSelection(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t): PartialCursorState {\n\t\tif (!cursor.modelState.hasSelection()) {\n\t\t\treturn new CursorState(cursor.modelState, cursor.viewState);\n\t\t}\n\n\t\tconst lineNumber = cursor.viewState.position.lineNumber;\n\t\tconst column = cursor.viewState.position.column;\n\n\t\treturn CursorState.fromViewState(\n\t\t\tnew SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t0,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic static moveTo(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\t_position: IPosition,\n\t\t_viewPosition: IPosition | undefined,\n\t): PartialCursorState {\n\t\tif (inSelectionMode) {\n\t\t\tif (\n\t\t\t\tcursor.modelState.selectionStartKind === SelectionStartKind.Word\n\t\t\t) {\n\t\t\t\treturn this.word(viewModel, cursor, inSelectionMode, _position);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tcursor.modelState.selectionStartKind === SelectionStartKind.Line\n\t\t\t) {\n\t\t\t\treturn this.line(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t_position,\n\t\t\t\t\t_viewPosition,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tconst position = viewModel.model.validatePosition(_position);\n\t\tconst viewPosition = _viewPosition\n\t\t\t? viewModel.coordinatesConverter.validateViewPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\t_viewPosition.lineNumber,\n\t\t\t\t\t\t_viewPosition.column,\n\t\t\t\t\t),\n\t\t\t\t\tposition,\n\t\t\t\t)\n\t\t\t: viewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tposition,\n\t\t\t\t);\n\t\treturn CursorState.fromViewState(\n\t\t\tcursor.viewState.move(\n\t\t\t\tinSelectionMode,\n\t\t\t\tviewPosition.lineNumber,\n\t\t\t\tviewPosition.column,\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic static simpleMove(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tdirection: CursorMove.SimpleMoveDirection,\n\t\tinSelectionMode: boolean,\n\t\tvalue: number,\n\t\tunit: CursorMove.Unit,\n\t): PartialCursorState[] | null {\n\t\tswitch (direction) {\n\t\t\tcase CursorMove.Direction.Left: {\n\t\t\t\tif (unit === CursorMove.Unit.HalfLine) {\n\t\t\t\t\t// Move left by half the current line length\n\t\t\t\t\treturn this._moveHalfLineLeft(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move left by `moveParams.value` columns\n\t\t\t\t\treturn this._moveLeft(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Right: {\n\t\t\t\tif (unit === CursorMove.Unit.HalfLine) {\n\t\t\t\t\t// Move right by half the current line length\n\t\t\t\t\treturn this._moveHalfLineRight(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move right by `moveParams.value` columns\n\t\t\t\t\treturn this._moveRight(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Up: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\t// Move up by view lines\n\t\t\t\t\treturn this._moveUpByViewLines(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move up by model lines\n\t\t\t\t\treturn this._moveUpByModelLines(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Down: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\t// Move down by view lines\n\t\t\t\t\treturn this._moveDownByViewLines(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move down by model lines\n\t\t\t\t\treturn this._moveDownByModelLines(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.PrevBlankLine: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\treturn cursors.map((cursor) =>\n\t\t\t\t\t\tCursorState.fromViewState(\n\t\t\t\t\t\t\tMoveOperations.moveToPrevBlankLine(\n\t\t\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\t\t\tcursor.viewState,\n\t\t\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn cursors.map((cursor) =>\n\t\t\t\t\t\tCursorState.fromModelState(\n\t\t\t\t\t\t\tMoveOperations.moveToPrevBlankLine(\n\t\t\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\t\t\tcursor.modelState,\n\t\t\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.NextBlankLine: {\n\t\t\t\tif (unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\treturn cursors.map((cursor) =>\n\t\t\t\t\t\tCursorState.fromViewState(\n\t\t\t\t\t\t\tMoveOperations.moveToNextBlankLine(\n\t\t\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\t\t\tcursor.viewState,\n\t\t\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn cursors.map((cursor) =>\n\t\t\t\t\t\tCursorState.fromModelState(\n\t\t\t\t\t\t\tMoveOperations.moveToNextBlankLine(\n\t\t\t\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\t\t\t\tviewModel.model,\n\t\t\t\t\t\t\t\tcursor.modelState,\n\t\t\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineStart: {\n\t\t\t\t// Move to the beginning of the current view line\n\t\t\t\treturn this._moveToViewMinColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursors,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter: {\n\t\t\t\t// Move to the first non-whitespace column of the current view line\n\t\t\t\treturn this._moveToViewFirstNonWhitespaceColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursors,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineColumnCenter: {\n\t\t\t\t// Move to the \"center\" of the current view line\n\t\t\t\treturn this._moveToViewCenterColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursors,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineEnd: {\n\t\t\t\t// Move to the end of the current view line\n\t\t\t\treturn this._moveToViewMaxColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursors,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter: {\n\t\t\t\t// Move to the last non-whitespace column of the current view line\n\t\t\t\treturn this._moveToViewLastNonWhitespaceColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursors,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static viewportMove(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tdirection: CursorMove.ViewportDirection,\n\t\tinSelectionMode: boolean,\n\t\tvalue: number,\n\t): PartialCursorState[] | null {\n\t\tconst visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n\t\tconst visibleModelRange =\n\t\t\tviewModel.coordinatesConverter.convertViewRangeToModelRange(\n\t\t\t\tvisibleViewRange,\n\t\t\t);\n\t\tswitch (direction) {\n\t\t\tcase CursorMove.Direction.ViewPortTop: {\n\t\t\t\t// Move to the nth line start in the viewport (from the top)\n\t\t\t\tconst modelLineNumber = this._firstLineNumberInRange(\n\t\t\t\t\tviewModel.model,\n\t\t\t\t\tvisibleModelRange,\n\t\t\t\t\tvalue,\n\t\t\t\t);\n\t\t\t\tconst modelColumn =\n\t\t\t\t\tviewModel.model.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\tmodelLineNumber,\n\t\t\t\t\t);\n\t\t\t\treturn [\n\t\t\t\t\tthis._moveToModelPosition(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors[0],\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tmodelLineNumber,\n\t\t\t\t\t\tmodelColumn,\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortBottom: {\n\t\t\t\t// Move to the nth line start in the viewport (from the bottom)\n\t\t\t\tconst modelLineNumber = this._lastLineNumberInRange(\n\t\t\t\t\tviewModel.model,\n\t\t\t\t\tvisibleModelRange,\n\t\t\t\t\tvalue,\n\t\t\t\t);\n\t\t\t\tconst modelColumn =\n\t\t\t\t\tviewModel.model.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\tmodelLineNumber,\n\t\t\t\t\t);\n\t\t\t\treturn [\n\t\t\t\t\tthis._moveToModelPosition(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors[0],\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tmodelLineNumber,\n\t\t\t\t\t\tmodelColumn,\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortCenter: {\n\t\t\t\t// Move to the line start in the viewport center\n\t\t\t\tconst modelLineNumber = Math.round(\n\t\t\t\t\t(visibleModelRange.startLineNumber +\n\t\t\t\t\t\tvisibleModelRange.endLineNumber) /\n\t\t\t\t\t\t2,\n\t\t\t\t);\n\t\t\t\tconst modelColumn =\n\t\t\t\t\tviewModel.model.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\tmodelLineNumber,\n\t\t\t\t\t);\n\t\t\t\treturn [\n\t\t\t\t\tthis._moveToModelPosition(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursors[0],\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t\tmodelLineNumber,\n\t\t\t\t\t\tmodelColumn,\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortIfOutside: {\n\t\t\t\t// Move to a position inside the viewport\n\t\t\t\tconst result: PartialCursorState[] = [];\n\t\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\t\tconst cursor = cursors[i];\n\t\t\t\t\tresult[i] = this.findPositionInViewportIfOutside(\n\t\t\t\t\t\tviewModel,\n\t\t\t\t\t\tcursor,\n\t\t\t\t\t\tvisibleViewRange,\n\t\t\t\t\t\tinSelectionMode,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static findPositionInViewportIfOutside(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tvisibleViewRange: Range,\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState {\n\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\n\t\tif (\n\t\t\tvisibleViewRange.startLineNumber <= viewLineNumber &&\n\t\t\tviewLineNumber <= visibleViewRange.endLineNumber - 1\n\t\t) {\n\t\t\t// Nothing to do, cursor is in viewport\n\t\t\treturn new CursorState(cursor.modelState, cursor.viewState);\n\t\t} else {\n\t\t\tlet newViewLineNumber: number;\n\t\t\tif (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n\t\t\t\tnewViewLineNumber = visibleViewRange.endLineNumber - 1;\n\t\t\t} else if (viewLineNumber < visibleViewRange.startLineNumber) {\n\t\t\t\tnewViewLineNumber = visibleViewRange.startLineNumber;\n\t\t\t} else {\n\t\t\t\tnewViewLineNumber = viewLineNumber;\n\t\t\t}\n\t\t\tconst position = MoveOperations.vertical(\n\t\t\t\tviewModel.cursorConfig,\n\t\t\t\tviewModel,\n\t\t\t\tviewLineNumber,\n\t\t\t\tcursor.viewState.position.column,\n\t\t\t\tcursor.viewState.leftoverVisibleColumns,\n\t\t\t\tnewViewLineNumber,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\treturn CursorState.fromViewState(\n\t\t\t\tcursor.viewState.move(\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t\tposition.leftoverVisibleColumns,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Find the nth line start included in the range (from the start).\n\t */\n\tprivate static _firstLineNumberInRange(\n\t\tmodel: ICursorSimpleModel,\n\t\trange: Range,\n\t\tcount: number,\n\t): number {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tif (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n\t\t\t// Move on to the second line if the first line start is not included in the range\n\t\t\tstartLineNumber++;\n\t\t}\n\n\t\treturn Math.min(range.endLineNumber, startLineNumber + count - 1);\n\t}\n\n\t/**\n\t * Find the nth line start included in the range (from the end).\n\t */\n\tprivate static _lastLineNumberInRange(\n\t\tmodel: ICursorSimpleModel,\n\t\trange: Range,\n\t\tcount: number,\n\t): number {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tif (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n\t\t\t// Move on to the second line if the first line start is not included in the range\n\t\t\tstartLineNumber++;\n\t\t}\n\n\t\treturn Math.max(startLineNumber, range.endLineNumber - count + 1);\n\t}\n\n\tprivate static _moveLeft(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tnoOfColumns: number,\n\t): PartialCursorState[] {\n\t\treturn cursors.map((cursor) =>\n\t\t\tCursorState.fromViewState(\n\t\t\t\tMoveOperations.moveLeft(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor.viewState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tnoOfColumns,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static _moveHalfLineLeft(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst halfLine = Math.round(\n\t\t\t\tviewModel.getLineLength(viewLineNumber) / 2,\n\t\t\t);\n\t\t\tresult[i] = CursorState.fromViewState(\n\t\t\t\tMoveOperations.moveLeft(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor.viewState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\thalfLine,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveRight(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tnoOfColumns: number,\n\t): PartialCursorState[] {\n\t\treturn cursors.map((cursor) =>\n\t\t\tCursorState.fromViewState(\n\t\t\t\tMoveOperations.moveRight(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor.viewState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tnoOfColumns,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static _moveHalfLineRight(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst halfLine = Math.round(\n\t\t\t\tviewModel.getLineLength(viewLineNumber) / 2,\n\t\t\t);\n\t\t\tresult[i] = CursorState.fromViewState(\n\t\t\t\tMoveOperations.moveRight(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor.viewState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\thalfLine,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveDownByViewLines(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tlinesCount: number,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromViewState(\n\t\t\t\tMoveOperations.moveDown(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor.viewState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tlinesCount,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveDownByModelLines(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tlinesCount: number,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\tMoveOperations.moveDown(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel.model,\n\t\t\t\t\tcursor.modelState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tlinesCount,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveUpByViewLines(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tlinesCount: number,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromViewState(\n\t\t\t\tMoveOperations.moveUp(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcursor.viewState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tlinesCount,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveUpByModelLines(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t\tlinesCount: number,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(\n\t\t\t\tMoveOperations.moveUp(\n\t\t\t\t\tviewModel.cursorConfig,\n\t\t\t\t\tviewModel.model,\n\t\t\t\t\tcursor.modelState,\n\t\t\t\t\tinSelectionMode,\n\t\t\t\t\tlinesCount,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewPosition(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\ttoViewLineNumber: number,\n\t\ttoViewColumn: number,\n\t): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tcursor.viewState.move(\n\t\t\t\tinSelectionMode,\n\t\t\t\ttoViewLineNumber,\n\t\t\t\ttoViewColumn,\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static _moveToModelPosition(\n\t\tviewModel: IViewModel,\n\t\tcursor: CursorState,\n\t\tinSelectionMode: boolean,\n\t\ttoModelLineNumber: number,\n\t\ttoModelColumn: number,\n\t): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tcursor.modelState.move(\n\t\t\t\tinSelectionMode,\n\t\t\t\ttoModelLineNumber,\n\t\t\t\ttoModelColumn,\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static _moveToViewMinColumn(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tviewLineNumber,\n\t\t\t\tviewColumn,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewFirstNonWhitespaceColumn(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn =\n\t\t\t\tviewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tviewLineNumber,\n\t\t\t\tviewColumn,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewCenterColumn(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = Math.round(\n\t\t\t\t(viewModel.getLineMaxColumn(viewLineNumber) +\n\t\t\t\t\tviewModel.getLineMinColumn(viewLineNumber)) /\n\t\t\t\t\t2,\n\t\t\t);\n\t\t\tresult[i] = this._moveToViewPosition(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tviewLineNumber,\n\t\t\t\tviewColumn,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewMaxColumn(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tviewLineNumber,\n\t\t\t\tviewColumn,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewLastNonWhitespaceColumn(\n\t\tviewModel: IViewModel,\n\t\tcursors: CursorState[],\n\t\tinSelectionMode: boolean,\n\t): PartialCursorState[] {\n\t\tconst result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn =\n\t\t\t\tviewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(\n\t\t\t\tviewModel,\n\t\t\t\tcursor,\n\t\t\t\tinSelectionMode,\n\t\t\t\tviewLineNumber,\n\t\t\t\tviewColumn,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport namespace CursorMove {\n\tconst isCursorMoveArgs = (arg: any): boolean => {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst cursorMoveArg: RawArguments = arg;\n\n\t\tif (!types.isString(cursorMoveArg.to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!types.isUndefined(cursorMoveArg.select) &&\n\t\t\t!types.isBoolean(cursorMoveArg.select)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!types.isUndefined(cursorMoveArg.by) &&\n\t\t\t!types.isString(cursorMoveArg.by)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!types.isUndefined(cursorMoveArg.value) &&\n\t\t\t!types.isNumber(cursorMoveArg.value)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const metadata: ICommandMetadata = {\n\t\tdescription: \"Move cursor to a logical position in the view\",\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: \"Cursor move argument object\",\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n\t\t\t\tconstraint: isCursorMoveArgs,\n\t\t\t\tschema: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\trequired: [\"to\"],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tto: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tenum: [\n\t\t\t\t\t\t\t\t\"left\",\n\t\t\t\t\t\t\t\t\"right\",\n\t\t\t\t\t\t\t\t\"up\",\n\t\t\t\t\t\t\t\t\"down\",\n\t\t\t\t\t\t\t\t\"prevBlankLine\",\n\t\t\t\t\t\t\t\t\"nextBlankLine\",\n\t\t\t\t\t\t\t\t\"wrappedLineStart\",\n\t\t\t\t\t\t\t\t\"wrappedLineEnd\",\n\t\t\t\t\t\t\t\t\"wrappedLineColumnCenter\",\n\t\t\t\t\t\t\t\t\"wrappedLineFirstNonWhitespaceCharacter\",\n\t\t\t\t\t\t\t\t\"wrappedLineLastNonWhitespaceCharacter\",\n\t\t\t\t\t\t\t\t\"viewPortTop\",\n\t\t\t\t\t\t\t\t\"viewPortCenter\",\n\t\t\t\t\t\t\t\t\"viewPortBottom\",\n\t\t\t\t\t\t\t\t\"viewPortIfOutside\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tby: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tenum: [\n\t\t\t\t\t\t\t\t\"line\",\n\t\t\t\t\t\t\t\t\"wrappedLine\",\n\t\t\t\t\t\t\t\t\"character\",\n\t\t\t\t\t\t\t\t\"halfLine\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\tdefault: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\t/**\n\t * Positions in the view for cursor move command.\n\t */\n\texport const RawDirection = {\n\t\tLeft: \"left\",\n\t\tRight: \"right\",\n\t\tUp: \"up\",\n\t\tDown: \"down\",\n\n\t\tPrevBlankLine: \"prevBlankLine\",\n\t\tNextBlankLine: \"nextBlankLine\",\n\n\t\tWrappedLineStart: \"wrappedLineStart\",\n\t\tWrappedLineFirstNonWhitespaceCharacter:\n\t\t\t\"wrappedLineFirstNonWhitespaceCharacter\",\n\t\tWrappedLineColumnCenter: \"wrappedLineColumnCenter\",\n\t\tWrappedLineEnd: \"wrappedLineEnd\",\n\t\tWrappedLineLastNonWhitespaceCharacter:\n\t\t\t\"wrappedLineLastNonWhitespaceCharacter\",\n\n\t\tViewPortTop: \"viewPortTop\",\n\t\tViewPortCenter: \"viewPortCenter\",\n\t\tViewPortBottom: \"viewPortBottom\",\n\n\t\tViewPortIfOutside: \"viewPortIfOutside\",\n\t};\n\n\t/**\n\t * Units for Cursor move 'by' argument\n\t */\n\texport const RawUnit = {\n\t\tLine: \"line\",\n\t\tWrappedLine: \"wrappedLine\",\n\t\tCharacter: \"character\",\n\t\tHalfLine: \"halfLine\",\n\t};\n\n\t/**\n\t * Arguments for Cursor move command\n\t */\n\texport interface RawArguments {\n\t\tto: string;\n\t\tselect?: boolean;\n\t\tby?: string;\n\t\tvalue?: number;\n\t}\n\n\texport function parse(args: Partial<RawArguments>): ParsedArguments | null {\n\t\tif (!args.to) {\n\t\t\t// illegal arguments\n\t\t\treturn null;\n\t\t}\n\n\t\tlet direction: Direction;\n\t\tswitch (args.to) {\n\t\t\tcase RawDirection.Left:\n\t\t\t\tdirection = Direction.Left;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Right:\n\t\t\t\tdirection = Direction.Right;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Up:\n\t\t\t\tdirection = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Down:\n\t\t\t\tdirection = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.PrevBlankLine:\n\t\t\t\tdirection = Direction.PrevBlankLine;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.NextBlankLine:\n\t\t\t\tdirection = Direction.NextBlankLine;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineStart:\n\t\t\t\tdirection = Direction.WrappedLineStart;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n\t\t\t\tdirection = Direction.WrappedLineFirstNonWhitespaceCharacter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineColumnCenter:\n\t\t\t\tdirection = Direction.WrappedLineColumnCenter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineEnd:\n\t\t\t\tdirection = Direction.WrappedLineEnd;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineLastNonWhitespaceCharacter:\n\t\t\t\tdirection = Direction.WrappedLineLastNonWhitespaceCharacter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortTop:\n\t\t\t\tdirection = Direction.ViewPortTop;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortBottom:\n\t\t\t\tdirection = Direction.ViewPortBottom;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortCenter:\n\t\t\t\tdirection = Direction.ViewPortCenter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortIfOutside:\n\t\t\t\tdirection = Direction.ViewPortIfOutside;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// illegal arguments\n\t\t\t\treturn null;\n\t\t}\n\n\t\tlet unit = Unit.None;\n\t\tswitch (args.by) {\n\t\t\tcase RawUnit.Line:\n\t\t\t\tunit = Unit.Line;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.WrappedLine:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Character:\n\t\t\t\tunit = Unit.Character;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.HalfLine:\n\t\t\t\tunit = Unit.HalfLine;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tdirection: direction,\n\t\t\tunit: unit,\n\t\t\tselect: !!args.select,\n\t\t\tvalue: args.value || 1,\n\t\t};\n\t}\n\n\texport interface ParsedArguments {\n\t\tdirection: Direction;\n\t\tunit: Unit;\n\t\tselect: boolean;\n\t\tvalue: number;\n\t}\n\n\texport interface SimpleMoveArguments {\n\t\tdirection: SimpleMoveDirection;\n\t\tunit: Unit;\n\t\tselect: boolean;\n\t\tvalue: number;\n\t}\n\n\texport enum Direction {\n\t\tLeft = 0,\n\t\tRight = 1,\n\t\tUp = 2,\n\t\tDown = 3,\n\t\tPrevBlankLine = 4,\n\t\tNextBlankLine = 5,\n\n\t\tWrappedLineStart = 6,\n\t\tWrappedLineFirstNonWhitespaceCharacter = 7,\n\t\tWrappedLineColumnCenter = 8,\n\t\tWrappedLineEnd = 9,\n\t\tWrappedLineLastNonWhitespaceCharacter = 10,\n\n\t\tViewPortTop = 11,\n\t\tViewPortCenter = 12,\n\t\tViewPortBottom = 13,\n\n\t\tViewPortIfOutside = 14,\n\t}\n\n\texport type SimpleMoveDirection =\n\t\t| Direction.Left\n\t\t| Direction.Right\n\t\t| Direction.Up\n\t\t| Direction.Down\n\t\t| Direction.PrevBlankLine\n\t\t| Direction.NextBlankLine\n\t\t| Direction.WrappedLineStart\n\t\t| Direction.WrappedLineFirstNonWhitespaceCharacter\n\t\t| Direction.WrappedLineColumnCenter\n\t\t| Direction.WrappedLineEnd\n\t\t| Direction.WrappedLineLastNonWhitespaceCharacter;\n\n\texport type ViewportDirection =\n\t\t| Direction.ViewPortTop\n\t\t| Direction.ViewPortCenter\n\t\t| Direction.ViewPortBottom\n\t\t| Direction.ViewPortIfOutside;\n\n\texport enum Unit {\n\t\tNone = 0,\n\t\tLine = 1,\n\t\tWrappedLine = 2,\n\t\tCharacter = 3,\n\t\tHalfLine = 4,\n\t}\n}\n"],
  "mappings": "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",
  "names": ["CursorMove", "Direction", "Unit"]
}
