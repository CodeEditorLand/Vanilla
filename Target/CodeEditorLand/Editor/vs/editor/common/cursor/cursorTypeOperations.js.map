{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorTypeOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { CompositionSurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { CursorConfiguration, EditOperationResult, EditOperationType, ICursorSimpleModel, isQuote } from '../cursorCommon.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Position } from '../core/position.js';\nimport { ICommand } from '../editorCommon.js';\nimport { ITextModel } from '../model.js';\nimport { AutoClosingOpenCharTypeOperation, AutoClosingOvertypeOperation, AutoClosingOvertypeWithInterceptorsOperation, AutoIndentOperation, CompositionOperation, EnterOperation, InterceptorElectricCharOperation, PasteOperation, shiftIndent, shouldSurroundChar, SimpleCharacterTypeOperation, SurroundSelectionOperation, TabOperation, TypeWithoutInterceptorsOperation, unshiftIndent } from './cursorTypeEditOperations.js';\n\nexport class TypeOperations {\n\n\tpublic static indent(config: CursorConfiguration, model: ICursorSimpleModel | null, selections: Selection[] | null): ICommand[] {\n\t\tif (model === null || selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new ShiftCommand(selections[i], {\n\t\t\t\tisUnshift: false,\n\t\t\t\ttabSize: config.tabSize,\n\t\t\t\tindentSize: config.indentSize,\n\t\t\t\tinsertSpaces: config.insertSpaces,\n\t\t\t\tuseTabStops: config.useTabStops,\n\t\t\t\tautoIndent: config.autoIndent\n\t\t\t}, config.languageConfigurationService);\n\t\t}\n\t\treturn commands;\n\t}\n\n\tpublic static outdent(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[]): ICommand[] {\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new ShiftCommand(selections[i], {\n\t\t\t\tisUnshift: true,\n\t\t\t\ttabSize: config.tabSize,\n\t\t\t\tindentSize: config.indentSize,\n\t\t\t\tinsertSpaces: config.insertSpaces,\n\t\t\t\tuseTabStops: config.useTabStops,\n\t\t\t\tautoIndent: config.autoIndent\n\t\t\t}, config.languageConfigurationService);\n\t\t}\n\t\treturn commands;\n\t}\n\n\tpublic static shiftIndent(config: CursorConfiguration, indentation: string, count?: number): string {\n\t\treturn shiftIndent(config, indentation, count);\n\t}\n\n\tpublic static unshiftIndent(config: CursorConfiguration, indentation: string, count?: number): string {\n\t\treturn unshiftIndent(config, indentation, count);\n\t}\n\n\tpublic static paste(config: CursorConfiguration, model: ICursorSimpleModel, selections: Selection[], text: string, pasteOnNewLine: boolean, multicursorText: string[]): EditOperationResult {\n\t\treturn PasteOperation.getEdits(config, model, selections, text, pasteOnNewLine, multicursorText);\n\t}\n\n\tpublic static tab(config: CursorConfiguration, model: ITextModel, selections: Selection[]): ICommand[] {\n\t\treturn TabOperation.getCommands(config, model, selections);\n\t}\n\n\tpublic static compositionType(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ITextModel, selections: Selection[], text: string, replacePrevCharCnt: number, replaceNextCharCnt: number, positionDelta: number): EditOperationResult {\n\t\treturn CompositionOperation.getEdits(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n\t}\n\n\t/**\n\t * This is very similar with typing, but the character is already in the text buffer!\n\t */\n\tpublic static compositionEndWithInterceptors(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ITextModel, compositions: CompositionOutcome[] | null, selections: Selection[], autoClosedCharacters: Range[]): EditOperationResult | null {\n\t\tif (!compositions) {\n\t\t\t// could not deduce what the composition did\n\t\t\treturn null;\n\t\t}\n\n\t\tlet insertedText: string | null = null;\n\t\tfor (const composition of compositions) {\n\t\t\tif (insertedText === null) {\n\t\t\t\tinsertedText = composition.insertedText;\n\t\t\t} else if (insertedText !== composition.insertedText) {\n\t\t\t\t// not all selections agree on what was typed\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (!insertedText || insertedText.length !== 1) {\n\t\t\t// we're only interested in the case where a single character was inserted\n\t\t\treturn null;\n\t\t}\n\n\t\tconst ch = insertedText;\n\n\t\tlet hasDeletion = false;\n\t\tfor (const composition of compositions) {\n\t\t\tif (composition.deletedText.length !== 0) {\n\t\t\t\thasDeletion = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (hasDeletion) {\n\t\t\t// Check if this could have been a surround selection\n\n\t\t\tif (!shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst isTypingAQuoteCharacter = isQuote(ch);\n\n\t\t\tfor (const composition of compositions) {\n\t\t\t\tif (composition.deletedSelectionStart !== 0 || composition.deletedSelectionEnd !== composition.deletedText.length) {\n\t\t\t\t\t// more text was deleted than was selected, so this could not have been a surround selection\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (/^[ \\t]+$/.test(composition.deletedText)) {\n\t\t\t\t\t// deleted text was only whitespace\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (isTypingAQuoteCharacter && isQuote(composition.deletedText)) {\n\t\t\t\t\t// deleted text was a quote\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst positions: Position[] = [];\n\t\t\tfor (const selection of selections) {\n\t\t\t\tif (!selection.isEmpty()) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tpositions.push(selection.getPosition());\n\t\t\t}\n\n\t\t\tif (positions.length !== compositions.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst commands: ICommand[] = [];\n\t\t\tfor (let i = 0, len = positions.length; i < len; i++) {\n\t\t\t\tcommands.push(new CompositionSurroundSelectionCommand(positions[i], compositions[i].deletedText, config.surroundingPairs[ch]));\n\t\t\t}\n\t\t\treturn new EditOperationResult(EditOperationType.TypingOther, commands, {\n\t\t\t\tshouldPushStackElementBefore: true,\n\t\t\t\tshouldPushStackElementAfter: false\n\t\t\t});\n\t\t}\n\n\t\tconst autoClosingOvertypeEdits = AutoClosingOvertypeWithInterceptorsOperation.getEdits(config, model, selections, autoClosedCharacters, ch);\n\t\tif (autoClosingOvertypeEdits !== undefined) {\n\t\t\treturn autoClosingOvertypeEdits;\n\t\t}\n\n\t\tconst autoClosingOpenCharEdits = AutoClosingOpenCharTypeOperation.getEdits(config, model, selections, ch, true, false);\n\t\tif (autoClosingOpenCharEdits !== undefined) {\n\t\t\treturn autoClosingOpenCharEdits;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static typeWithInterceptors(isDoingComposition: boolean, prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ITextModel, selections: Selection[], autoClosedCharacters: Range[], ch: string): EditOperationResult {\n\n\t\tconst enterEdits = EnterOperation.getEdits(config, model, selections, ch, isDoingComposition);\n\t\tif (enterEdits !== undefined) {\n\t\t\treturn enterEdits;\n\t\t}\n\n\t\tconst autoIndentEdits = AutoIndentOperation.getEdits(config, model, selections, ch, isDoingComposition);\n\t\tif (autoIndentEdits !== undefined) {\n\t\t\treturn autoIndentEdits;\n\t\t}\n\n\t\tconst autoClosingOverTypeEdits = AutoClosingOvertypeOperation.getEdits(prevEditOperationType, config, model, selections, autoClosedCharacters, ch);\n\t\tif (autoClosingOverTypeEdits !== undefined) {\n\t\t\treturn autoClosingOverTypeEdits;\n\t\t}\n\n\t\tconst autoClosingOpenCharEdits = AutoClosingOpenCharTypeOperation.getEdits(config, model, selections, ch, false, isDoingComposition);\n\t\tif (autoClosingOpenCharEdits !== undefined) {\n\t\t\treturn autoClosingOpenCharEdits;\n\t\t}\n\n\t\tconst surroundSelectionEdits = SurroundSelectionOperation.getEdits(config, model, selections, ch, isDoingComposition);\n\t\tif (surroundSelectionEdits !== undefined) {\n\t\t\treturn surroundSelectionEdits;\n\t\t}\n\n\t\tconst interceptorElectricCharOperation = InterceptorElectricCharOperation.getEdits(prevEditOperationType, config, model, selections, ch, isDoingComposition);\n\t\tif (interceptorElectricCharOperation !== undefined) {\n\t\t\treturn interceptorElectricCharOperation;\n\t\t}\n\n\t\treturn SimpleCharacterTypeOperation.getEdits(prevEditOperationType, selections, ch);\n\t}\n\n\tpublic static typeWithoutInterceptors(prevEditOperationType: EditOperationType, config: CursorConfiguration, model: ITextModel, selections: Selection[], str: string): EditOperationResult {\n\t\treturn TypeWithoutInterceptorsOperation.getEdits(prevEditOperationType, selections, str);\n\t}\n}\n\nexport class CompositionOutcome {\n\tconstructor(\n\t\tpublic readonly deletedText: string,\n\t\tpublic readonly deletedSelectionStart: number,\n\t\tpublic readonly deletedSelectionEnd: number,\n\t\tpublic readonly insertedText: string,\n\t\tpublic readonly insertedSelectionStart: number,\n\t\tpublic readonly insertedSelectionEnd: number,\n\t) { }\n}\n"],
  "mappings": "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",
  "names": []
}
