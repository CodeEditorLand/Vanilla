{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorTypeOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ShiftCommand } from \"../commands/shiftCommand.js\";\nimport { CompositionSurroundSelectionCommand } from \"../commands/surroundSelectionCommand.js\";\nimport type { Position } from \"../core/position.js\";\nimport type { Range } from \"../core/range.js\";\nimport type { Selection } from \"../core/selection.js\";\nimport {\n\ttype CursorConfiguration,\n\tEditOperationResult,\n\tEditOperationType,\n\ttype ICursorSimpleModel,\n\tisQuote,\n} from \"../cursorCommon.js\";\nimport type { ICommand } from \"../editorCommon.js\";\nimport type { ITextModel } from \"../model.js\";\nimport {\n\tAutoClosingOpenCharTypeOperation,\n\tAutoClosingOvertypeOperation,\n\tAutoClosingOvertypeWithInterceptorsOperation,\n\tAutoIndentOperation,\n\tCompositionOperation,\n\tEnterOperation,\n\tInterceptorElectricCharOperation,\n\tPasteOperation,\n\tSimpleCharacterTypeOperation,\n\tSurroundSelectionOperation,\n\tTabOperation,\n\tTypeWithoutInterceptorsOperation,\n\tshiftIndent,\n\tshouldSurroundChar,\n\tunshiftIndent,\n} from \"./cursorTypeEditOperations.js\";\n\nexport class TypeOperations {\n\tpublic static indent(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel | null,\n\t\tselections: Selection[] | null,\n\t): ICommand[] {\n\t\tif (model === null || selections === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new ShiftCommand(\n\t\t\t\tselections[i],\n\t\t\t\t{\n\t\t\t\t\tisUnshift: false,\n\t\t\t\t\ttabSize: config.tabSize,\n\t\t\t\t\tindentSize: config.indentSize,\n\t\t\t\t\tinsertSpaces: config.insertSpaces,\n\t\t\t\t\tuseTabStops: config.useTabStops,\n\t\t\t\t\tautoIndent: config.autoIndent,\n\t\t\t\t},\n\t\t\t\tconfig.languageConfigurationService,\n\t\t\t);\n\t\t}\n\t\treturn commands;\n\t}\n\n\tpublic static outdent(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t): ICommand[] {\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tcommands[i] = new ShiftCommand(\n\t\t\t\tselections[i],\n\t\t\t\t{\n\t\t\t\t\tisUnshift: true,\n\t\t\t\t\ttabSize: config.tabSize,\n\t\t\t\t\tindentSize: config.indentSize,\n\t\t\t\t\tinsertSpaces: config.insertSpaces,\n\t\t\t\t\tuseTabStops: config.useTabStops,\n\t\t\t\t\tautoIndent: config.autoIndent,\n\t\t\t\t},\n\t\t\t\tconfig.languageConfigurationService,\n\t\t\t);\n\t\t}\n\t\treturn commands;\n\t}\n\n\tpublic static shiftIndent(\n\t\tconfig: CursorConfiguration,\n\t\tindentation: string,\n\t\tcount?: number,\n\t): string {\n\t\treturn shiftIndent(config, indentation, count);\n\t}\n\n\tpublic static unshiftIndent(\n\t\tconfig: CursorConfiguration,\n\t\tindentation: string,\n\t\tcount?: number,\n\t): string {\n\t\treturn unshiftIndent(config, indentation, count);\n\t}\n\n\tpublic static paste(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t\ttext: string,\n\t\tpasteOnNewLine: boolean,\n\t\tmulticursorText: string[],\n\t): EditOperationResult {\n\t\treturn PasteOperation.getEdits(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselections,\n\t\t\ttext,\n\t\t\tpasteOnNewLine,\n\t\t\tmulticursorText,\n\t\t);\n\t}\n\n\tpublic static tab(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ITextModel,\n\t\tselections: Selection[],\n\t): ICommand[] {\n\t\treturn TabOperation.getCommands(config, model, selections);\n\t}\n\n\tpublic static compositionType(\n\t\tprevEditOperationType: EditOperationType,\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ITextModel,\n\t\tselections: Selection[],\n\t\ttext: string,\n\t\treplacePrevCharCnt: number,\n\t\treplaceNextCharCnt: number,\n\t\tpositionDelta: number,\n\t): EditOperationResult {\n\t\treturn CompositionOperation.getEdits(\n\t\t\tprevEditOperationType,\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselections,\n\t\t\ttext,\n\t\t\treplacePrevCharCnt,\n\t\t\treplaceNextCharCnt,\n\t\t\tpositionDelta,\n\t\t);\n\t}\n\n\t/**\n\t * This is very similar with typing, but the character is already in the text buffer!\n\t */\n\tpublic static compositionEndWithInterceptors(\n\t\tprevEditOperationType: EditOperationType,\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ITextModel,\n\t\tcompositions: CompositionOutcome[] | null,\n\t\tselections: Selection[],\n\t\tautoClosedCharacters: Range[],\n\t): EditOperationResult | null {\n\t\tif (!compositions) {\n\t\t\t// could not deduce what the composition did\n\t\t\treturn null;\n\t\t}\n\n\t\tlet insertedText: string | null = null;\n\t\tfor (const composition of compositions) {\n\t\t\tif (insertedText === null) {\n\t\t\t\tinsertedText = composition.insertedText;\n\t\t\t} else if (insertedText !== composition.insertedText) {\n\t\t\t\t// not all selections agree on what was typed\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (!insertedText || insertedText.length !== 1) {\n\t\t\t// we're only interested in the case where a single character was inserted\n\t\t\treturn null;\n\t\t}\n\n\t\tconst ch = insertedText;\n\n\t\tlet hasDeletion = false;\n\t\tfor (const composition of compositions) {\n\t\t\tif (composition.deletedText.length !== 0) {\n\t\t\t\thasDeletion = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (hasDeletion) {\n\t\t\t// Check if this could have been a surround selection\n\n\t\t\tif (\n\t\t\t\t!shouldSurroundChar(config, ch) ||\n\t\t\t\t!config.surroundingPairs.hasOwnProperty(ch)\n\t\t\t) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst isTypingAQuoteCharacter = isQuote(ch);\n\n\t\t\tfor (const composition of compositions) {\n\t\t\t\tif (\n\t\t\t\t\tcomposition.deletedSelectionStart !== 0 ||\n\t\t\t\t\tcomposition.deletedSelectionEnd !==\n\t\t\t\t\t\tcomposition.deletedText.length\n\t\t\t\t) {\n\t\t\t\t\t// more text was deleted than was selected, so this could not have been a surround selection\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (/^[ \\t]+$/.test(composition.deletedText)) {\n\t\t\t\t\t// deleted text was only whitespace\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tisTypingAQuoteCharacter &&\n\t\t\t\t\tisQuote(composition.deletedText)\n\t\t\t\t) {\n\t\t\t\t\t// deleted text was a quote\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst positions: Position[] = [];\n\t\t\tfor (const selection of selections) {\n\t\t\t\tif (!selection.isEmpty()) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tpositions.push(selection.getPosition());\n\t\t\t}\n\n\t\t\tif (positions.length !== compositions.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst commands: ICommand[] = [];\n\t\t\tfor (let i = 0, len = positions.length; i < len; i++) {\n\t\t\t\tcommands.push(\n\t\t\t\t\tnew CompositionSurroundSelectionCommand(\n\t\t\t\t\t\tpositions[i],\n\t\t\t\t\t\tcompositions[i].deletedText,\n\t\t\t\t\t\tconfig.surroundingPairs[ch],\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn new EditOperationResult(\n\t\t\t\tEditOperationType.TypingOther,\n\t\t\t\tcommands,\n\t\t\t\t{\n\t\t\t\t\tshouldPushStackElementBefore: true,\n\t\t\t\t\tshouldPushStackElementAfter: false,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tconst autoClosingOvertypeEdits =\n\t\t\tAutoClosingOvertypeWithInterceptorsOperation.getEdits(\n\t\t\t\tconfig,\n\t\t\t\tmodel,\n\t\t\t\tselections,\n\t\t\t\tautoClosedCharacters,\n\t\t\t\tch,\n\t\t\t);\n\t\tif (autoClosingOvertypeEdits !== undefined) {\n\t\t\treturn autoClosingOvertypeEdits;\n\t\t}\n\n\t\tconst autoClosingOpenCharEdits =\n\t\t\tAutoClosingOpenCharTypeOperation.getEdits(\n\t\t\t\tconfig,\n\t\t\t\tmodel,\n\t\t\t\tselections,\n\t\t\t\tch,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t);\n\t\tif (autoClosingOpenCharEdits !== undefined) {\n\t\t\treturn autoClosingOpenCharEdits;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static typeWithInterceptors(\n\t\tisDoingComposition: boolean,\n\t\tprevEditOperationType: EditOperationType,\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ITextModel,\n\t\tselections: Selection[],\n\t\tautoClosedCharacters: Range[],\n\t\tch: string,\n\t): EditOperationResult {\n\t\tconst enterEdits = EnterOperation.getEdits(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselections,\n\t\t\tch,\n\t\t\tisDoingComposition,\n\t\t);\n\t\tif (enterEdits !== undefined) {\n\t\t\treturn enterEdits;\n\t\t}\n\n\t\tconst autoIndentEdits = AutoIndentOperation.getEdits(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselections,\n\t\t\tch,\n\t\t\tisDoingComposition,\n\t\t);\n\t\tif (autoIndentEdits !== undefined) {\n\t\t\treturn autoIndentEdits;\n\t\t}\n\n\t\tconst autoClosingOverTypeEdits = AutoClosingOvertypeOperation.getEdits(\n\t\t\tprevEditOperationType,\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselections,\n\t\t\tautoClosedCharacters,\n\t\t\tch,\n\t\t);\n\t\tif (autoClosingOverTypeEdits !== undefined) {\n\t\t\treturn autoClosingOverTypeEdits;\n\t\t}\n\n\t\tconst autoClosingOpenCharEdits =\n\t\t\tAutoClosingOpenCharTypeOperation.getEdits(\n\t\t\t\tconfig,\n\t\t\t\tmodel,\n\t\t\t\tselections,\n\t\t\t\tch,\n\t\t\t\tfalse,\n\t\t\t\tisDoingComposition,\n\t\t\t);\n\t\tif (autoClosingOpenCharEdits !== undefined) {\n\t\t\treturn autoClosingOpenCharEdits;\n\t\t}\n\n\t\tconst surroundSelectionEdits = SurroundSelectionOperation.getEdits(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselections,\n\t\t\tch,\n\t\t\tisDoingComposition,\n\t\t);\n\t\tif (surroundSelectionEdits !== undefined) {\n\t\t\treturn surroundSelectionEdits;\n\t\t}\n\n\t\tconst interceptorElectricCharOperation =\n\t\t\tInterceptorElectricCharOperation.getEdits(\n\t\t\t\tprevEditOperationType,\n\t\t\t\tconfig,\n\t\t\t\tmodel,\n\t\t\t\tselections,\n\t\t\t\tch,\n\t\t\t\tisDoingComposition,\n\t\t\t);\n\t\tif (interceptorElectricCharOperation !== undefined) {\n\t\t\treturn interceptorElectricCharOperation;\n\t\t}\n\n\t\treturn SimpleCharacterTypeOperation.getEdits(\n\t\t\tprevEditOperationType,\n\t\t\tselections,\n\t\t\tch,\n\t\t);\n\t}\n\n\tpublic static typeWithoutInterceptors(\n\t\tprevEditOperationType: EditOperationType,\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ITextModel,\n\t\tselections: Selection[],\n\t\tstr: string,\n\t): EditOperationResult {\n\t\treturn TypeWithoutInterceptorsOperation.getEdits(\n\t\t\tprevEditOperationType,\n\t\t\tselections,\n\t\t\tstr,\n\t\t);\n\t}\n}\n\nexport class CompositionOutcome {\n\tconstructor(\n\t\tpublic readonly deletedText: string,\n\t\tpublic readonly deletedSelectionStart: number,\n\t\tpublic readonly deletedSelectionEnd: number,\n\t\tpublic readonly insertedText: string,\n\t\tpublic readonly insertedSelectionStart: number,\n\t\tpublic readonly insertedSelectionEnd: number,\n\t) {}\n}\n"],
  "mappings": "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",
  "names": []
}
