{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorColumnSelection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorConfiguration, ICursorSimpleModel, SingleCursorState, IColumnSelectData, SelectionStartKind } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nexport class ColumnSelection {\n\n\tpublic static columnSelect(config: CursorConfiguration, model: ICursorSimpleModel, fromLineNumber: number, fromVisibleColumn: number, toLineNumber: number, toVisibleColumn: number): IColumnSelectResult {\n\t\tconst lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n\t\tconst reversed = (fromLineNumber > toLineNumber);\n\t\tconst isRTL = (fromVisibleColumn > toVisibleColumn);\n\t\tconst isLTR = (fromVisibleColumn < toVisibleColumn);\n\n\t\tconst result: SingleCursorState[] = [];\n\n\t\t// console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineNumber = fromLineNumber + (reversed ? -i : i);\n\n\t\t\tconst startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n\t\t\tconst endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n\t\t\tconst visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n\t\t\tconst visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n\n\t\t\t// console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n\t\t\tif (isLTR) {\n\t\t\t\tif (visibleStartColumn > toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleEndColumn < fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRTL) {\n\t\t\t\tif (visibleEndColumn > fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleStartColumn < toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, startColumn, lineNumber, startColumn), SelectionStartKind.Simple, 0,\n\t\t\t\tnew Position(lineNumber, endColumn), 0\n\t\t\t));\n\t\t}\n\n\t\tif (result.length === 0) {\n\t\t\t// We are after all the lines, so add cursor at the end of each line\n\t\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\t\tconst lineNumber = fromLineNumber + (reversed ? -i : i);\n\t\t\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\n\t\t\t\tresult.push(new SingleCursorState(\n\t\t\t\t\tnew Range(lineNumber, maxColumn, lineNumber, maxColumn), SelectionStartKind.Simple, 0,\n\t\t\t\t\tnew Position(lineNumber, maxColumn), 0\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tviewStates: result,\n\t\t\treversed: reversed,\n\t\t\tfromLineNumber: fromLineNumber,\n\t\t\tfromVisualColumn: fromVisibleColumn,\n\t\t\ttoLineNumber: toLineNumber,\n\t\t\ttoVisualColumn: toVisibleColumn\n\t\t};\n\t}\n\n\tpublic static columnSelectLeft(config: CursorConfiguration, model: ICursorSimpleModel, prevColumnSelectData: IColumnSelectData): IColumnSelectResult {\n\t\tlet toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\t\tif (toViewVisualColumn > 0) {\n\t\t\ttoViewVisualColumn--;\n\t\t}\n\n\t\treturn ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectRight(config: CursorConfiguration, model: ICursorSimpleModel, prevColumnSelectData: IColumnSelectData): IColumnSelectResult {\n\t\tlet maxVisualViewColumn = 0;\n\t\tconst minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n\t\tconst maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n\t\tfor (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n\t\t\tconst lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n\t\t\tconst lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n\t\t\tmaxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n\t\t}\n\n\t\tlet toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\t\tif (toViewVisualColumn < maxVisualViewColumn) {\n\t\t\ttoViewVisualColumn++;\n\t\t}\n\n\t\treturn this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectUp(config: CursorConfiguration, model: ICursorSimpleModel, prevColumnSelectData: IColumnSelectData, isPaged: boolean): IColumnSelectResult {\n\t\tconst linesCount = isPaged ? config.pageSize : 1;\n\t\tconst toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n\t\treturn this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectDown(config: CursorConfiguration, model: ICursorSimpleModel, prevColumnSelectData: IColumnSelectData, isPaged: boolean): IColumnSelectResult {\n\t\tconst linesCount = isPaged ? config.pageSize : 1;\n\t\tconst toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n\t\treturn this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n\t}\n}\n\nexport interface IColumnSelectResult {\n\tviewStates: SingleCursorState[];\n\treversed: boolean;\n\tfromLineNumber: number;\n\tfromVisualColumn: number;\n\ttoLineNumber: number;\n\ttoVisualColumn: number;\n}\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB,oBAAoB,mBAAmB,mBAAmB,0BAA0B;AAClH,SAAS,gBAAgB;AACzB,SAAS,aAAa;AAEf,MAAM,gBAAgB;AAAA,EAT7B,OAS6B;AAAA;AAAA;AAAA,EAE5B,OAAc,aAAa,QAA6B,OAA2B,gBAAwB,mBAA2B,cAAsB,iBAA8C;AACzM,UAAM,YAAY,KAAK,IAAI,eAAe,cAAc,IAAI;AAC5D,UAAM,WAAY,iBAAiB;AACnC,UAAM,QAAS,oBAAoB;AACnC,UAAM,QAAS,oBAAoB;AAEnC,UAAM,SAA8B,CAAC;AAIrC,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AACnC,YAAM,aAAa,kBAAkB,WAAW,CAAC,IAAI;AAErD,YAAM,cAAc,OAAO,wBAAwB,OAAO,YAAY,iBAAiB;AACvF,YAAM,YAAY,OAAO,wBAAwB,OAAO,YAAY,eAAe;AACnF,YAAM,qBAAqB,OAAO,wBAAwB,OAAO,IAAI,SAAS,YAAY,WAAW,CAAC;AACtG,YAAM,mBAAmB,OAAO,wBAAwB,OAAO,IAAI,SAAS,YAAY,SAAS,CAAC;AAIlG,UAAI,OAAO;AACV,YAAI,qBAAqB,iBAAiB;AACzC;AAAA,QACD;AACA,YAAI,mBAAmB,mBAAmB;AACzC;AAAA,QACD;AAAA,MACD;AAEA,UAAI,OAAO;AACV,YAAI,mBAAmB,mBAAmB;AACzC;AAAA,QACD;AACA,YAAI,qBAAqB,iBAAiB;AACzC;AAAA,QACD;AAAA,MACD;AAEA,aAAO,KAAK,IAAI;AAAA,QACf,IAAI,MAAM,YAAY,aAAa,YAAY,WAAW;AAAA,QAAG,mBAAmB;AAAA,QAAQ;AAAA,QACxF,IAAI,SAAS,YAAY,SAAS;AAAA,QAAG;AAAA,MACtC,CAAC;AAAA,IACF;AAEA,QAAI,OAAO,WAAW,GAAG;AAExB,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AACnC,cAAM,aAAa,kBAAkB,WAAW,CAAC,IAAI;AACrD,cAAM,YAAY,MAAM,iBAAiB,UAAU;AAEnD,eAAO,KAAK,IAAI;AAAA,UACf,IAAI,MAAM,YAAY,WAAW,YAAY,SAAS;AAAA,UAAG,mBAAmB;AAAA,UAAQ;AAAA,UACpF,IAAI,SAAS,YAAY,SAAS;AAAA,UAAG;AAAA,QACtC,CAAC;AAAA,MACF;AAAA,IACD;AAEA,WAAO;AAAA,MACN,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA,kBAAkB;AAAA,MAClB;AAAA,MACA,gBAAgB;AAAA,IACjB;AAAA,EACD;AAAA,EAEA,OAAc,iBAAiB,QAA6B,OAA2B,sBAA8D;AACpJ,QAAI,qBAAqB,qBAAqB;AAC9C,QAAI,qBAAqB,GAAG;AAC3B;AAAA,IACD;AAEA,WAAO,gBAAgB,aAAa,QAAQ,OAAO,qBAAqB,oBAAoB,qBAAqB,sBAAsB,qBAAqB,kBAAkB,kBAAkB;AAAA,EACjM;AAAA,EAEA,OAAc,kBAAkB,QAA6B,OAA2B,sBAA8D;AACrJ,QAAI,sBAAsB;AAC1B,UAAM,oBAAoB,KAAK,IAAI,qBAAqB,oBAAoB,qBAAqB,gBAAgB;AACjH,UAAM,oBAAoB,KAAK,IAAI,qBAAqB,oBAAoB,qBAAqB,gBAAgB;AACjH,aAAS,aAAa,mBAAmB,cAAc,mBAAmB,cAAc;AACvF,YAAM,oBAAoB,MAAM,iBAAiB,UAAU;AAC3D,YAAM,0BAA0B,OAAO,wBAAwB,OAAO,IAAI,SAAS,YAAY,iBAAiB,CAAC;AACjH,4BAAsB,KAAK,IAAI,qBAAqB,uBAAuB;AAAA,IAC5E;AAEA,QAAI,qBAAqB,qBAAqB;AAC9C,QAAI,qBAAqB,qBAAqB;AAC7C;AAAA,IACD;AAEA,WAAO,KAAK,aAAa,QAAQ,OAAO,qBAAqB,oBAAoB,qBAAqB,sBAAsB,qBAAqB,kBAAkB,kBAAkB;AAAA,EACtL;AAAA,EAEA,OAAc,eAAe,QAA6B,OAA2B,sBAAyC,SAAuC;AACpK,UAAM,aAAa,UAAU,OAAO,WAAW;AAC/C,UAAM,mBAAmB,KAAK,IAAI,GAAG,qBAAqB,mBAAmB,UAAU;AACvF,WAAO,KAAK,aAAa,QAAQ,OAAO,qBAAqB,oBAAoB,qBAAqB,sBAAsB,kBAAkB,qBAAqB,kBAAkB;AAAA,EACtL;AAAA,EAEA,OAAc,iBAAiB,QAA6B,OAA2B,sBAAyC,SAAuC;AACtK,UAAM,aAAa,UAAU,OAAO,WAAW;AAC/C,UAAM,mBAAmB,KAAK,IAAI,MAAM,aAAa,GAAG,qBAAqB,mBAAmB,UAAU;AAC1G,WAAO,KAAK,aAAa,QAAQ,OAAO,qBAAqB,oBAAoB,qBAAqB,sBAAsB,kBAAkB,qBAAqB,kBAAkB;AAAA,EACtL;AACD;",
  "names": []
}
