{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorColumnSelection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport {\n\ttype CursorConfiguration,\n\ttype IColumnSelectData,\n\ttype ICursorSimpleModel,\n\tSelectionStartKind,\n\tSingleCursorState,\n} from \"../cursorCommon.js\";\n\nexport class ColumnSelection {\n\tpublic static columnSelect(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tfromLineNumber: number,\n\t\tfromVisibleColumn: number,\n\t\ttoLineNumber: number,\n\t\ttoVisibleColumn: number,\n\t): IColumnSelectResult {\n\t\tconst lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n\t\tconst reversed = fromLineNumber > toLineNumber;\n\t\tconst isRTL = fromVisibleColumn > toVisibleColumn;\n\t\tconst isLTR = fromVisibleColumn < toVisibleColumn;\n\n\t\tconst result: SingleCursorState[] = [];\n\n\t\t// console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineNumber = fromLineNumber + (reversed ? -i : i);\n\n\t\t\tconst startColumn = config.columnFromVisibleColumn(\n\t\t\t\tmodel,\n\t\t\t\tlineNumber,\n\t\t\t\tfromVisibleColumn,\n\t\t\t);\n\t\t\tconst endColumn = config.columnFromVisibleColumn(\n\t\t\t\tmodel,\n\t\t\t\tlineNumber,\n\t\t\t\ttoVisibleColumn,\n\t\t\t);\n\t\t\tconst visibleStartColumn = config.visibleColumnFromColumn(\n\t\t\t\tmodel,\n\t\t\t\tnew Position(lineNumber, startColumn),\n\t\t\t);\n\t\t\tconst visibleEndColumn = config.visibleColumnFromColumn(\n\t\t\t\tmodel,\n\t\t\t\tnew Position(lineNumber, endColumn),\n\t\t\t);\n\n\t\t\t// console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n\t\t\tif (isLTR) {\n\t\t\t\tif (visibleStartColumn > toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleEndColumn < fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRTL) {\n\t\t\t\tif (visibleEndColumn > fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleStartColumn < toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(\n\t\t\t\tnew SingleCursorState(\n\t\t\t\t\tnew Range(lineNumber, startColumn, lineNumber, startColumn),\n\t\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t\t0,\n\t\t\t\t\tnew Position(lineNumber, endColumn),\n\t\t\t\t\t0,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (result.length === 0) {\n\t\t\t// We are after all the lines, so add cursor at the end of each line\n\t\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\t\tconst lineNumber = fromLineNumber + (reversed ? -i : i);\n\t\t\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\n\t\t\t\tresult.push(\n\t\t\t\t\tnew SingleCursorState(\n\t\t\t\t\t\tnew Range(lineNumber, maxColumn, lineNumber, maxColumn),\n\t\t\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tnew Position(lineNumber, maxColumn),\n\t\t\t\t\t\t0,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tviewStates: result,\n\t\t\treversed: reversed,\n\t\t\tfromLineNumber: fromLineNumber,\n\t\t\tfromVisualColumn: fromVisibleColumn,\n\t\t\ttoLineNumber: toLineNumber,\n\t\t\ttoVisualColumn: toVisibleColumn,\n\t\t};\n\t}\n\n\tpublic static columnSelectLeft(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tprevColumnSelectData: IColumnSelectData,\n\t): IColumnSelectResult {\n\t\tlet toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\t\tif (toViewVisualColumn > 0) {\n\t\t\ttoViewVisualColumn--;\n\t\t}\n\n\t\treturn ColumnSelection.columnSelect(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tprevColumnSelectData.fromViewLineNumber,\n\t\t\tprevColumnSelectData.fromViewVisualColumn,\n\t\t\tprevColumnSelectData.toViewLineNumber,\n\t\t\ttoViewVisualColumn,\n\t\t);\n\t}\n\n\tpublic static columnSelectRight(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tprevColumnSelectData: IColumnSelectData,\n\t): IColumnSelectResult {\n\t\tlet maxVisualViewColumn = 0;\n\t\tconst minViewLineNumber = Math.min(\n\t\t\tprevColumnSelectData.fromViewLineNumber,\n\t\t\tprevColumnSelectData.toViewLineNumber,\n\t\t);\n\t\tconst maxViewLineNumber = Math.max(\n\t\t\tprevColumnSelectData.fromViewLineNumber,\n\t\t\tprevColumnSelectData.toViewLineNumber,\n\t\t);\n\t\tfor (\n\t\t\tlet lineNumber = minViewLineNumber;\n\t\t\tlineNumber <= maxViewLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n\t\t\tconst lineMaxVisualViewColumn = config.visibleColumnFromColumn(\n\t\t\t\tmodel,\n\t\t\t\tnew Position(lineNumber, lineMaxViewColumn),\n\t\t\t);\n\t\t\tmaxVisualViewColumn = Math.max(\n\t\t\t\tmaxVisualViewColumn,\n\t\t\t\tlineMaxVisualViewColumn,\n\t\t\t);\n\t\t}\n\n\t\tlet toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\t\tif (toViewVisualColumn < maxVisualViewColumn) {\n\t\t\ttoViewVisualColumn++;\n\t\t}\n\n\t\treturn this.columnSelect(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tprevColumnSelectData.fromViewLineNumber,\n\t\t\tprevColumnSelectData.fromViewVisualColumn,\n\t\t\tprevColumnSelectData.toViewLineNumber,\n\t\t\ttoViewVisualColumn,\n\t\t);\n\t}\n\n\tpublic static columnSelectUp(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tprevColumnSelectData: IColumnSelectData,\n\t\tisPaged: boolean,\n\t): IColumnSelectResult {\n\t\tconst linesCount = isPaged ? config.pageSize : 1;\n\t\tconst toViewLineNumber = Math.max(\n\t\t\t1,\n\t\t\tprevColumnSelectData.toViewLineNumber - linesCount,\n\t\t);\n\t\treturn this.columnSelect(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tprevColumnSelectData.fromViewLineNumber,\n\t\t\tprevColumnSelectData.fromViewVisualColumn,\n\t\t\ttoViewLineNumber,\n\t\t\tprevColumnSelectData.toViewVisualColumn,\n\t\t);\n\t}\n\n\tpublic static columnSelectDown(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tprevColumnSelectData: IColumnSelectData,\n\t\tisPaged: boolean,\n\t): IColumnSelectResult {\n\t\tconst linesCount = isPaged ? config.pageSize : 1;\n\t\tconst toViewLineNumber = Math.min(\n\t\t\tmodel.getLineCount(),\n\t\t\tprevColumnSelectData.toViewLineNumber + linesCount,\n\t\t);\n\t\treturn this.columnSelect(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tprevColumnSelectData.fromViewLineNumber,\n\t\t\tprevColumnSelectData.fromViewVisualColumn,\n\t\t\ttoViewLineNumber,\n\t\t\tprevColumnSelectData.toViewVisualColumn,\n\t\t);\n\t}\n}\n\nexport interface IColumnSelectResult {\n\tviewStates: SingleCursorState[];\n\treversed: boolean;\n\tfromLineNumber: number;\n\tfromVisualColumn: number;\n\ttoLineNumber: number;\n\ttoVisualColumn: number;\n}\n"],
  "mappings": "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",
  "names": []
}
