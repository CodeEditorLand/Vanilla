{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorMoveOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../base/common/strings.js';\nimport { Constants } from '../../../base/common/uint.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { AtomicTabMoveOperations, Direction } from './cursorAtomicMoveOperations.js';\nimport { CursorConfiguration, ICursorSimpleModel, SelectionStartKind, SingleCursorState } from '../cursorCommon.js';\nimport { PositionAffinity } from '../model.js';\n\nexport class CursorPosition {\n\t_cursorPositionBrand: void = undefined;\n\n\tpublic readonly lineNumber: number;\n\tpublic readonly column: number;\n\tpublic readonly leftoverVisibleColumns: number;\n\n\tconstructor(lineNumber: number, column: number, leftoverVisibleColumns: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t}\n}\n\nexport class MoveOperations {\n\tpublic static leftPosition(model: ICursorSimpleModel, position: Position): Position {\n\t\tif (position.column > model.getLineMinColumn(position.lineNumber)) {\n\t\t\treturn position.delta(undefined, -strings.prevCharLength(model.getLineContent(position.lineNumber), position.column - 1));\n\t\t} else if (position.lineNumber > 1) {\n\t\t\tconst newLineNumber = position.lineNumber - 1;\n\t\t\treturn new Position(newLineNumber, model.getLineMaxColumn(newLineNumber));\n\t\t} else {\n\t\t\treturn position;\n\t\t}\n\t}\n\n\tprivate static leftPositionAtomicSoftTabs(model: ICursorSimpleModel, position: Position, tabSize: number): Position {\n\t\tif (position.column <= model.getLineIndentColumn(position.lineNumber)) {\n\t\t\tconst minColumn = model.getLineMinColumn(position.lineNumber);\n\t\t\tconst lineContent = model.getLineContent(position.lineNumber);\n\t\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, Direction.Left);\n\t\t\tif (newPosition !== -1 && newPosition + 1 >= minColumn) {\n\t\t\t\treturn new Position(position.lineNumber, newPosition + 1);\n\t\t\t}\n\t\t}\n\t\treturn this.leftPosition(model, position);\n\t}\n\n\tprivate static left(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.leftPositionAtomicSoftTabs(model, position, config.tabSize)\n\t\t\t: MoveOperations.leftPosition(model, position);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\t/**\n\t * @param noOfColumns Must be either `1`\n\t * or `Math.round(viewModel.getLineContent(viewLineNumber).length / 2)` (for half lines).\n\t*/\n\tpublic static moveLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If the user has a selection and does not want to extend it,\n\t\t\t// put the cursor at the beginning of the selection.\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\t// This has no effect if noOfColumns === 1.\n\t\t\t// It is ok to do so in the half-line scenario.\n\t\t\tconst pos = cursor.position.delta(undefined, -(noOfColumns - 1));\n\t\t\t// We clip the position before normalization, as normalization is not defined\n\t\t\t// for possibly negative columns.\n\t\t\tconst normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), PositionAffinity.Left);\n\t\t\tconst p = MoveOperations.left(config, model, normalizedPos);\n\n\t\t\tlineNumber = p.lineNumber;\n\t\t\tcolumn = p.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\t/**\n\t * Adjusts the column so that it is within min/max of the line.\n\t*/\n\tprivate static clipPositionColumn(position: Position, model: ICursorSimpleModel): Position {\n\t\treturn new Position(\n\t\t\tposition.lineNumber,\n\t\t\tMoveOperations.clipRange(position.column, model.getLineMinColumn(position.lineNumber),\n\t\t\t\tmodel.getLineMaxColumn(position.lineNumber))\n\t\t);\n\t}\n\n\tprivate static clipRange(value: number, min: number, max: number): number {\n\t\tif (value < min) {\n\t\t\treturn min;\n\t\t}\n\t\tif (value > max) {\n\t\t\treturn max;\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic static rightPosition(model: ICursorSimpleModel, lineNumber: number, column: number): Position {\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tcolumn = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic static rightPositionAtomicSoftTabs(model: ICursorSimpleModel, lineNumber: number, column: number, tabSize: number, indentSize: number): Position {\n\t\tif (column < model.getLineIndentColumn(lineNumber)) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, Direction.Right);\n\t\t\tif (newPosition !== -1) {\n\t\t\t\treturn new Position(lineNumber, newPosition + 1);\n\t\t\t}\n\t\t}\n\t\treturn this.rightPosition(model, lineNumber, column);\n\t}\n\n\tpublic static right(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.rightPositionAtomicSoftTabs(model, position.lineNumber, position.column, config.tabSize, config.indentSize)\n\t\t\t: MoveOperations.rightPosition(model, position.lineNumber, position.column);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\tpublic static moveRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tconst pos = cursor.position.delta(undefined, noOfColumns - 1);\n\t\t\tconst normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), PositionAffinity.Right);\n\t\t\tconst r = MoveOperations.right(config, model, normalizedPos);\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static vertical(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, newLineNumber: number, allowMoveOnEdgeLine: boolean, normalizationAffinity?: PositionAffinity): CursorPosition {\n\t\tconst currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n\t\tconst lineCount = model.getLineCount();\n\t\tconst wasOnFirstPosition = (lineNumber === 1 && column === 1);\n\t\tconst wasOnLastPosition = (lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber));\n\t\tconst wasAtEdgePosition = (newLineNumber < lineNumber ? wasOnFirstPosition : wasOnLastPosition);\n\n\t\tlineNumber = newLineNumber;\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tif (allowMoveOnEdgeLine) {\n\t\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else if (lineNumber > lineCount) {\n\t\t\tlineNumber = lineCount;\n\t\t\tif (allowMoveOnEdgeLine) {\n\t\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = config.columnFromVisibleColumn(model, lineNumber, currentVisibleColumn);\n\t\t}\n\n\t\tif (wasAtEdgePosition) {\n\t\t\tleftoverVisibleColumns = 0;\n\t\t} else {\n\t\t\tleftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n\t\t}\n\n\t\tif (normalizationAffinity !== undefined) {\n\t\t\tconst position = new Position(lineNumber, column);\n\t\t\tconst newPosition = model.normalizePosition(position, normalizationAffinity);\n\t\t\tleftoverVisibleColumns = leftoverVisibleColumns + (column - newPosition.column);\n\t\t\tlineNumber = newPosition.lineNumber;\n\t\t\tcolumn = newPosition.column;\n\t\t}\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static down(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnLastLine: boolean): CursorPosition {\n\t\treturn this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber + count, allowMoveOnLastLine, PositionAffinity.RightOfInjectedText);\n\t}\n\n\tpublic static moveDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move down acts relative to the end of selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet r: CursorPosition;\n\t\tdo {\n\t\t\tr = MoveOperations.down(config, model, lineNumber + i, column, cursor.leftoverVisibleColumns, linesCount, true);\n\t\t\tconst np = model.normalizePosition(new Position(r.lineNumber, r.column), PositionAffinity.None);\n\t\t\tif (np.lineNumber > lineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (i++ < 10 && lineNumber + i < model.getLineCount());\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\t\tconst selection = cursor.selection;\n\n\t\tconst selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tconst position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tSelectionStartKind.Simple,\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tpublic static up(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnFirstLine: boolean): CursorPosition {\n\t\treturn this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber - count, allowMoveOnFirstLine, PositionAffinity.LeftOfInjectedText);\n\t}\n\n\tpublic static moveUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move up acts relative to the beginning of selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tconst r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\n\t\tconst selection = cursor.selection;\n\n\t\tconst selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tconst position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tSelectionStartKind.Simple,\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tprivate static _isBlankLine(model: ICursorSimpleModel, lineNumber: number): boolean {\n\t\tif (model.getLineFirstNonWhitespaceColumn(lineNumber) === 0) {\n\t\t\t// empty or contains only whitespace\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static moveToPrevBlankLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the previous non-blank line\n\t\twhile (lineNumber > 1 && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\t// Find the previous blank line\n\t\twhile (lineNumber > 1 && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n\t}\n\n\tpublic static moveToNextBlankLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lineCount = model.getLineCount();\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the next non-blank line\n\t\twhile (lineNumber < lineCount && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\t// Find the next blank line\n\t\twhile (lineNumber < lineCount && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n\t}\n\n\tpublic static moveToBeginningOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lineNumber = cursor.position.lineNumber;\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tconst firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n\n\t\tlet column: number;\n\n\t\tconst relevantColumnNumber = cursor.position.column;\n\t\tif (relevantColumnNumber === firstNonBlankColumn) {\n\t\t\tcolumn = minColumn;\n\t\t} else {\n\t\t\tcolumn = firstNonBlankColumn;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static moveToEndOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, sticky: boolean): SingleCursorState {\n\t\tconst lineNumber = cursor.position.lineNumber;\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\treturn cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? Constants.MAX_SAFE_SMALL_INTEGER - maxColumn : 0);\n\t}\n\n\tpublic static moveToBeginningOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\treturn cursor.move(inSelectionMode, 1, 1, 0);\n\t}\n\n\tpublic static moveToEndOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lastLineNumber = model.getLineCount();\n\t\tconst lastColumn = model.getLineMaxColumn(lastLineNumber);\n\n\t\treturn cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
