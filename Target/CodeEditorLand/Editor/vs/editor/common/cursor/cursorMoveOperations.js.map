{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorMoveOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from \"../../../base/common/strings.js\";\nimport { Constants } from \"../../../base/common/uint.js\";\nimport { CursorColumns } from \"../core/cursorColumns.js\";\nimport { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport {\n\ttype CursorConfiguration,\n\ttype ICursorSimpleModel,\n\tSelectionStartKind,\n\tSingleCursorState,\n} from \"../cursorCommon.js\";\nimport { PositionAffinity } from \"../model.js\";\nimport {\n\tAtomicTabMoveOperations,\n\tDirection,\n} from \"./cursorAtomicMoveOperations.js\";\n\nexport class CursorPosition {\n\t_cursorPositionBrand: void = undefined;\n\n\tpublic readonly lineNumber: number;\n\tpublic readonly column: number;\n\tpublic readonly leftoverVisibleColumns: number;\n\n\tconstructor(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tleftoverVisibleColumns: number,\n\t) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t}\n}\n\nexport class MoveOperations {\n\tpublic static leftPosition(\n\t\tmodel: ICursorSimpleModel,\n\t\tposition: Position,\n\t): Position {\n\t\tif (position.column > model.getLineMinColumn(position.lineNumber)) {\n\t\t\treturn position.delta(\n\t\t\t\tundefined,\n\t\t\t\t-strings.prevCharLength(\n\t\t\t\t\tmodel.getLineContent(position.lineNumber),\n\t\t\t\t\tposition.column - 1,\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (position.lineNumber > 1) {\n\t\t\tconst newLineNumber = position.lineNumber - 1;\n\t\t\treturn new Position(\n\t\t\t\tnewLineNumber,\n\t\t\t\tmodel.getLineMaxColumn(newLineNumber),\n\t\t\t);\n\t\t} else {\n\t\t\treturn position;\n\t\t}\n\t}\n\n\tprivate static leftPositionAtomicSoftTabs(\n\t\tmodel: ICursorSimpleModel,\n\t\tposition: Position,\n\t\ttabSize: number,\n\t): Position {\n\t\tif (position.column <= model.getLineIndentColumn(position.lineNumber)) {\n\t\t\tconst minColumn = model.getLineMinColumn(position.lineNumber);\n\t\t\tconst lineContent = model.getLineContent(position.lineNumber);\n\t\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(\n\t\t\t\tlineContent,\n\t\t\t\tposition.column - 1,\n\t\t\t\ttabSize,\n\t\t\t\tDirection.Left,\n\t\t\t);\n\t\t\tif (newPosition !== -1 && newPosition + 1 >= minColumn) {\n\t\t\t\treturn new Position(position.lineNumber, newPosition + 1);\n\t\t\t}\n\t\t}\n\t\treturn this.leftPosition(model, position);\n\t}\n\n\tprivate static left(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tposition: Position,\n\t): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.leftPositionAtomicSoftTabs(\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition,\n\t\t\t\t\tconfig.tabSize,\n\t\t\t\t)\n\t\t\t: MoveOperations.leftPosition(model, position);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\t/**\n\t * @param noOfColumns Must be either `1`\n\t * or `Math.round(viewModel.getLineContent(viewLineNumber).length / 2)` (for half lines).\n\t */\n\tpublic static moveLeft(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t\tnoOfColumns: number,\n\t): SingleCursorState {\n\t\tlet lineNumber: number, column: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If the user has a selection and does not want to extend it,\n\t\t\t// put the cursor at the beginning of the selection.\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\t// This has no effect if noOfColumns === 1.\n\t\t\t// It is ok to do so in the half-line scenario.\n\t\t\tconst pos = cursor.position.delta(undefined, -(noOfColumns - 1));\n\t\t\t// We clip the position before normalization, as normalization is not defined\n\t\t\t// for possibly negative columns.\n\t\t\tconst normalizedPos = model.normalizePosition(\n\t\t\t\tMoveOperations.clipPositionColumn(pos, model),\n\t\t\t\tPositionAffinity.Left,\n\t\t\t);\n\t\t\tconst p = MoveOperations.left(config, model, normalizedPos);\n\n\t\t\tlineNumber = p.lineNumber;\n\t\t\tcolumn = p.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\t/**\n\t * Adjusts the column so that it is within min/max of the line.\n\t */\n\tprivate static clipPositionColumn(\n\t\tposition: Position,\n\t\tmodel: ICursorSimpleModel,\n\t): Position {\n\t\treturn new Position(\n\t\t\tposition.lineNumber,\n\t\t\tMoveOperations.clipRange(\n\t\t\t\tposition.column,\n\t\t\t\tmodel.getLineMinColumn(position.lineNumber),\n\t\t\t\tmodel.getLineMaxColumn(position.lineNumber),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static clipRange(value: number, min: number, max: number): number {\n\t\tif (value < min) {\n\t\t\treturn min;\n\t\t}\n\t\tif (value > max) {\n\t\t\treturn max;\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic static rightPosition(\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t): Position {\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tcolumn =\n\t\t\t\tcolumn +\n\t\t\t\tstrings.nextCharLength(\n\t\t\t\t\tmodel.getLineContent(lineNumber),\n\t\t\t\t\tcolumn - 1,\n\t\t\t\t);\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic static rightPositionAtomicSoftTabs(\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\ttabSize: number,\n\t\tindentSize: number,\n\t): Position {\n\t\tif (column < model.getLineIndentColumn(lineNumber)) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(\n\t\t\t\tlineContent,\n\t\t\t\tcolumn - 1,\n\t\t\t\ttabSize,\n\t\t\t\tDirection.Right,\n\t\t\t);\n\t\t\tif (newPosition !== -1) {\n\t\t\t\treturn new Position(lineNumber, newPosition + 1);\n\t\t\t}\n\t\t}\n\t\treturn this.rightPosition(model, lineNumber, column);\n\t}\n\n\tpublic static right(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tposition: Position,\n\t): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.rightPositionAtomicSoftTabs(\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t\tconfig.tabSize,\n\t\t\t\t\tconfig.indentSize,\n\t\t\t\t)\n\t\t\t: MoveOperations.rightPosition(\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\tpublic static moveRight(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t\tnoOfColumns: number,\n\t): SingleCursorState {\n\t\tlet lineNumber: number, column: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tconst pos = cursor.position.delta(undefined, noOfColumns - 1);\n\t\t\tconst normalizedPos = model.normalizePosition(\n\t\t\t\tMoveOperations.clipPositionColumn(pos, model),\n\t\t\t\tPositionAffinity.Right,\n\t\t\t);\n\t\t\tconst r = MoveOperations.right(config, model, normalizedPos);\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static vertical(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tleftoverVisibleColumns: number,\n\t\tnewLineNumber: number,\n\t\tallowMoveOnEdgeLine: boolean,\n\t\tnormalizationAffinity?: PositionAffinity,\n\t): CursorPosition {\n\t\tconst currentVisibleColumn =\n\t\t\tCursorColumns.visibleColumnFromColumn(\n\t\t\t\tmodel.getLineContent(lineNumber),\n\t\t\t\tcolumn,\n\t\t\t\tconfig.tabSize,\n\t\t\t) + leftoverVisibleColumns;\n\t\tconst lineCount = model.getLineCount();\n\t\tconst wasOnFirstPosition = lineNumber === 1 && column === 1;\n\t\tconst wasOnLastPosition =\n\t\t\tlineNumber === lineCount &&\n\t\t\tcolumn === model.getLineMaxColumn(lineNumber);\n\t\tconst wasAtEdgePosition =\n\t\t\tnewLineNumber < lineNumber ? wasOnFirstPosition : wasOnLastPosition;\n\n\t\tlineNumber = newLineNumber;\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tif (allowMoveOnEdgeLine) {\n\t\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else if (lineNumber > lineCount) {\n\t\t\tlineNumber = lineCount;\n\t\t\tif (allowMoveOnEdgeLine) {\n\t\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = config.columnFromVisibleColumn(\n\t\t\t\tmodel,\n\t\t\t\tlineNumber,\n\t\t\t\tcurrentVisibleColumn,\n\t\t\t);\n\t\t}\n\n\t\tif (wasAtEdgePosition) {\n\t\t\tleftoverVisibleColumns = 0;\n\t\t} else {\n\t\t\tleftoverVisibleColumns =\n\t\t\t\tcurrentVisibleColumn -\n\t\t\t\tCursorColumns.visibleColumnFromColumn(\n\t\t\t\t\tmodel.getLineContent(lineNumber),\n\t\t\t\t\tcolumn,\n\t\t\t\t\tconfig.tabSize,\n\t\t\t\t);\n\t\t}\n\n\t\tif (normalizationAffinity !== undefined) {\n\t\t\tconst position = new Position(lineNumber, column);\n\t\t\tconst newPosition = model.normalizePosition(\n\t\t\t\tposition,\n\t\t\t\tnormalizationAffinity,\n\t\t\t);\n\t\t\tleftoverVisibleColumns =\n\t\t\t\tleftoverVisibleColumns + (column - newPosition.column);\n\t\t\tlineNumber = newPosition.lineNumber;\n\t\t\tcolumn = newPosition.column;\n\t\t}\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static down(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tleftoverVisibleColumns: number,\n\t\tcount: number,\n\t\tallowMoveOnLastLine: boolean,\n\t): CursorPosition {\n\t\treturn this.vertical(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tlineNumber,\n\t\t\tcolumn,\n\t\t\tleftoverVisibleColumns,\n\t\t\tlineNumber + count,\n\t\t\tallowMoveOnLastLine,\n\t\t\tPositionAffinity.RightOfInjectedText,\n\t\t);\n\t}\n\n\tpublic static moveDown(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t\tlinesCount: number,\n\t): SingleCursorState {\n\t\tlet lineNumber: number, column: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move down acts relative to the end of selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet r: CursorPosition;\n\t\tdo {\n\t\t\tr = MoveOperations.down(\n\t\t\t\tconfig,\n\t\t\t\tmodel,\n\t\t\t\tlineNumber + i,\n\t\t\t\tcolumn,\n\t\t\t\tcursor.leftoverVisibleColumns,\n\t\t\t\tlinesCount,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst np = model.normalizePosition(\n\t\t\t\tnew Position(r.lineNumber, r.column),\n\t\t\t\tPositionAffinity.None,\n\t\t\t);\n\t\t\tif (np.lineNumber > lineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (i++ < 10 && lineNumber + i < model.getLineCount());\n\n\t\treturn cursor.move(\n\t\t\tinSelectionMode,\n\t\t\tr.lineNumber,\n\t\t\tr.column,\n\t\t\tr.leftoverVisibleColumns,\n\t\t);\n\t}\n\n\tpublic static translateDown(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t): SingleCursorState {\n\t\tconst selection = cursor.selection;\n\n\t\tconst selectionStart = MoveOperations.down(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselection.selectionStartLineNumber,\n\t\t\tselection.selectionStartColumn,\n\t\t\tcursor.selectionStartLeftoverVisibleColumns,\n\t\t\t1,\n\t\t\tfalse,\n\t\t);\n\t\tconst position = MoveOperations.down(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselection.positionLineNumber,\n\t\t\tselection.positionColumn,\n\t\t\tcursor.leftoverVisibleColumns,\n\t\t\t1,\n\t\t\tfalse,\n\t\t);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(\n\t\t\t\tselectionStart.lineNumber,\n\t\t\t\tselectionStart.column,\n\t\t\t\tselectionStart.lineNumber,\n\t\t\t\tselectionStart.column,\n\t\t\t),\n\t\t\tSelectionStartKind.Simple,\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns,\n\t\t);\n\t}\n\n\tpublic static up(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\tleftoverVisibleColumns: number,\n\t\tcount: number,\n\t\tallowMoveOnFirstLine: boolean,\n\t): CursorPosition {\n\t\treturn this.vertical(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tlineNumber,\n\t\t\tcolumn,\n\t\t\tleftoverVisibleColumns,\n\t\t\tlineNumber - count,\n\t\t\tallowMoveOnFirstLine,\n\t\t\tPositionAffinity.LeftOfInjectedText,\n\t\t);\n\t}\n\n\tpublic static moveUp(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t\tlinesCount: number,\n\t): SingleCursorState {\n\t\tlet lineNumber: number, column: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move up acts relative to the beginning of selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tconst r = MoveOperations.up(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tlineNumber,\n\t\t\tcolumn,\n\t\t\tcursor.leftoverVisibleColumns,\n\t\t\tlinesCount,\n\t\t\ttrue,\n\t\t);\n\n\t\treturn cursor.move(\n\t\t\tinSelectionMode,\n\t\t\tr.lineNumber,\n\t\t\tr.column,\n\t\t\tr.leftoverVisibleColumns,\n\t\t);\n\t}\n\n\tpublic static translateUp(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t): SingleCursorState {\n\t\tconst selection = cursor.selection;\n\n\t\tconst selectionStart = MoveOperations.up(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselection.selectionStartLineNumber,\n\t\t\tselection.selectionStartColumn,\n\t\t\tcursor.selectionStartLeftoverVisibleColumns,\n\t\t\t1,\n\t\t\tfalse,\n\t\t);\n\t\tconst position = MoveOperations.up(\n\t\t\tconfig,\n\t\t\tmodel,\n\t\t\tselection.positionLineNumber,\n\t\t\tselection.positionColumn,\n\t\t\tcursor.leftoverVisibleColumns,\n\t\t\t1,\n\t\t\tfalse,\n\t\t);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(\n\t\t\t\tselectionStart.lineNumber,\n\t\t\t\tselectionStart.column,\n\t\t\t\tselectionStart.lineNumber,\n\t\t\t\tselectionStart.column,\n\t\t\t),\n\t\t\tSelectionStartKind.Simple,\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns,\n\t\t);\n\t}\n\n\tprivate static _isBlankLine(\n\t\tmodel: ICursorSimpleModel,\n\t\tlineNumber: number,\n\t): boolean {\n\t\tif (model.getLineFirstNonWhitespaceColumn(lineNumber) === 0) {\n\t\t\t// empty or contains only whitespace\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static moveToPrevBlankLine(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the previous non-blank line\n\t\twhile (lineNumber > 1 && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\t// Find the previous blank line\n\t\twhile (lineNumber > 1 && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\treturn cursor.move(\n\t\t\tinSelectionMode,\n\t\t\tlineNumber,\n\t\t\tmodel.getLineMinColumn(lineNumber),\n\t\t\t0,\n\t\t);\n\t}\n\n\tpublic static moveToNextBlankLine(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t): SingleCursorState {\n\t\tconst lineCount = model.getLineCount();\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the next non-blank line\n\t\twhile (lineNumber < lineCount && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\t// Find the next blank line\n\t\twhile (\n\t\t\tlineNumber < lineCount &&\n\t\t\t!this._isBlankLine(model, lineNumber)\n\t\t) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\treturn cursor.move(\n\t\t\tinSelectionMode,\n\t\t\tlineNumber,\n\t\t\tmodel.getLineMinColumn(lineNumber),\n\t\t\t0,\n\t\t);\n\t}\n\n\tpublic static moveToBeginningOfLine(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t): SingleCursorState {\n\t\tconst lineNumber = cursor.position.lineNumber;\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tconst firstNonBlankColumn =\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n\n\t\tlet column: number;\n\n\t\tconst relevantColumnNumber = cursor.position.column;\n\t\tif (relevantColumnNumber === firstNonBlankColumn) {\n\t\t\tcolumn = minColumn;\n\t\t} else {\n\t\t\tcolumn = firstNonBlankColumn;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static moveToEndOfLine(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t\tsticky: boolean,\n\t): SingleCursorState {\n\t\tconst lineNumber = cursor.position.lineNumber;\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\treturn cursor.move(\n\t\t\tinSelectionMode,\n\t\t\tlineNumber,\n\t\t\tmaxColumn,\n\t\t\tsticky ? Constants.MAX_SAFE_SMALL_INTEGER - maxColumn : 0,\n\t\t);\n\t}\n\n\tpublic static moveToBeginningOfBuffer(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t): SingleCursorState {\n\t\treturn cursor.move(inSelectionMode, 1, 1, 0);\n\t}\n\n\tpublic static moveToEndOfBuffer(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tcursor: SingleCursorState,\n\t\tinSelectionMode: boolean,\n\t): SingleCursorState {\n\t\tconst lastLineNumber = model.getLineCount();\n\t\tconst lastColumn = model.getLineMaxColumn(lastLineNumber);\n\n\t\treturn cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
