{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorDeleteOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from \"../../../base/common/strings.js\";\nimport { ReplaceCommand } from \"../commands/replaceCommand.js\";\nimport type {\n\tEditorAutoClosingEditStrategy,\n\tEditorAutoClosingStrategy,\n} from \"../config/editorOptions.js\";\nimport { CursorColumns } from \"../core/cursorColumns.js\";\nimport { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport type { Selection } from \"../core/selection.js\";\nimport {\n\ttype CursorConfiguration,\n\tEditOperationResult,\n\tEditOperationType,\n\ttype ICursorSimpleModel,\n\tisQuote,\n} from \"../cursorCommon.js\";\nimport type { ICommand } from \"../editorCommon.js\";\nimport type { StandardAutoClosingPairConditional } from \"../languages/languageConfiguration.js\";\nimport { MoveOperations } from \"./cursorMoveOperations.js\";\n\nexport class DeleteOperations {\n\tpublic static deleteRight(\n\t\tprevEditOperationType: EditOperationType,\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t): [boolean, Array<ICommand | null>] {\n\t\tconst commands: Array<ICommand | null> = [];\n\t\tlet shouldPushStackElementBefore =\n\t\t\tprevEditOperationType !== EditOperationType.DeletingRight;\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tlet deleteSelection: Range = selection;\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\tconst position = selection.getPosition();\n\t\t\t\tconst rightOfPosition = MoveOperations.right(\n\t\t\t\t\tconfig,\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition,\n\t\t\t\t);\n\t\t\t\tdeleteSelection = new Range(\n\t\t\t\t\trightOfPosition.lineNumber,\n\t\t\t\t\trightOfPosition.column,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\t// Probably at end of file => ignore\n\t\t\t\tcommands[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tdeleteSelection.startLineNumber !==\n\t\t\t\tdeleteSelection.endLineNumber\n\t\t\t) {\n\t\t\t\tshouldPushStackElementBefore = true;\n\t\t\t}\n\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, \"\");\n\t\t}\n\t\treturn [shouldPushStackElementBefore, commands];\n\t}\n\n\tpublic static isAutoClosingPairDelete(\n\t\tautoClosingDelete: EditorAutoClosingEditStrategy,\n\t\tautoClosingBrackets: EditorAutoClosingStrategy,\n\t\tautoClosingQuotes: EditorAutoClosingStrategy,\n\t\tautoClosingPairsOpen: Map<string, StandardAutoClosingPairConditional[]>,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t\tautoClosedCharacters: Range[],\n\t): boolean {\n\t\tif (autoClosingBrackets === \"never\" && autoClosingQuotes === \"never\") {\n\t\t\treturn false;\n\t\t}\n\t\tif (autoClosingDelete === \"never\") {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\t\t\tconst position = selection.getPosition();\n\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst lineText = model.getLineContent(position.lineNumber);\n\t\t\tif (position.column < 2 || position.column >= lineText.length + 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst character = lineText.charAt(position.column - 2);\n\n\t\t\tconst autoClosingPairCandidates =\n\t\t\t\tautoClosingPairsOpen.get(character);\n\t\t\tif (!autoClosingPairCandidates) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (isQuote(character)) {\n\t\t\t\tif (autoClosingQuotes === \"never\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (autoClosingBrackets === \"never\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst afterCharacter = lineText.charAt(position.column - 1);\n\n\t\t\tlet foundAutoClosingPair = false;\n\t\t\tfor (const autoClosingPairCandidate of autoClosingPairCandidates) {\n\t\t\t\tif (\n\t\t\t\t\tautoClosingPairCandidate.open === character &&\n\t\t\t\t\tautoClosingPairCandidate.close === afterCharacter\n\t\t\t\t) {\n\t\t\t\t\tfoundAutoClosingPair = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!foundAutoClosingPair) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Must delete the pair only if it was automatically inserted by the editor\n\t\t\tif (autoClosingDelete === \"auto\") {\n\t\t\t\tlet found = false;\n\t\t\t\tfor (\n\t\t\t\t\tlet j = 0, lenJ = autoClosedCharacters.length;\n\t\t\t\t\tj < lenJ;\n\t\t\t\t\tj++\n\t\t\t\t) {\n\t\t\t\t\tconst autoClosedCharacter = autoClosedCharacters[j];\n\t\t\t\t\tif (\n\t\t\t\t\t\tposition.lineNumber ===\n\t\t\t\t\t\t\tautoClosedCharacter.startLineNumber &&\n\t\t\t\t\t\tposition.column === autoClosedCharacter.startColumn\n\t\t\t\t\t) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static _runAutoClosingPairDelete(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t): [boolean, ICommand[]] {\n\t\tconst commands: ICommand[] = [];\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst position = selections[i].getPosition();\n\t\t\tconst deleteSelection = new Range(\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column - 1,\n\t\t\t\tposition.lineNumber,\n\t\t\t\tposition.column + 1,\n\t\t\t);\n\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, \"\");\n\t\t}\n\t\treturn [true, commands];\n\t}\n\n\tpublic static deleteLeft(\n\t\tprevEditOperationType: EditOperationType,\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t\tautoClosedCharacters: Range[],\n\t): [boolean, Array<ICommand | null>] {\n\t\tif (\n\t\t\tthis.isAutoClosingPairDelete(\n\t\t\t\tconfig.autoClosingDelete,\n\t\t\t\tconfig.autoClosingBrackets,\n\t\t\t\tconfig.autoClosingQuotes,\n\t\t\t\tconfig.autoClosingPairs.autoClosingPairsOpenByEnd,\n\t\t\t\tmodel,\n\t\t\t\tselections,\n\t\t\t\tautoClosedCharacters,\n\t\t\t)\n\t\t) {\n\t\t\treturn this._runAutoClosingPairDelete(config, model, selections);\n\t\t}\n\n\t\tconst commands: Array<ICommand | null> = [];\n\t\tlet shouldPushStackElementBefore =\n\t\t\tprevEditOperationType !== EditOperationType.DeletingLeft;\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst deleteRange = DeleteOperations.getDeleteRange(\n\t\t\t\tselections[i],\n\t\t\t\tmodel,\n\t\t\t\tconfig,\n\t\t\t);\n\n\t\t\t// Ignore empty delete ranges, as they have no effect\n\t\t\t// They happen if the cursor is at the beginning of the file.\n\t\t\tif (deleteRange.isEmpty()) {\n\t\t\t\tcommands[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (deleteRange.startLineNumber !== deleteRange.endLineNumber) {\n\t\t\t\tshouldPushStackElementBefore = true;\n\t\t\t}\n\n\t\t\tcommands[i] = new ReplaceCommand(deleteRange, \"\");\n\t\t}\n\t\treturn [shouldPushStackElementBefore, commands];\n\t}\n\n\tprivate static getDeleteRange(\n\t\tselection: Selection,\n\t\tmodel: ICursorSimpleModel,\n\t\tconfig: CursorConfiguration,\n\t): Range {\n\t\tif (!selection.isEmpty()) {\n\t\t\treturn selection;\n\t\t}\n\n\t\tconst position = selection.getPosition();\n\n\t\t// Unintend when using tab stops and cursor is within indentation\n\t\tif (config.useTabStops && position.column > 1) {\n\t\t\tconst lineContent = model.getLineContent(position.lineNumber);\n\n\t\t\tconst firstNonWhitespaceIndex =\n\t\t\t\tstrings.firstNonWhitespaceIndex(lineContent);\n\t\t\tconst lastIndentationColumn =\n\t\t\t\tfirstNonWhitespaceIndex === -1\n\t\t\t\t\t? /* entire string is whitespace */ lineContent.length + 1\n\t\t\t\t\t: firstNonWhitespaceIndex + 1;\n\n\t\t\tif (position.column <= lastIndentationColumn) {\n\t\t\t\tconst fromVisibleColumn = config.visibleColumnFromColumn(\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition,\n\t\t\t\t);\n\t\t\t\tconst toVisibleColumn = CursorColumns.prevIndentTabStop(\n\t\t\t\t\tfromVisibleColumn,\n\t\t\t\t\tconfig.indentSize,\n\t\t\t\t);\n\t\t\t\tconst toColumn = config.columnFromVisibleColumn(\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\ttoVisibleColumn,\n\t\t\t\t);\n\t\t\t\treturn new Range(\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\ttoColumn,\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn Range.fromPositions(\n\t\t\tDeleteOperations.getPositionAfterDeleteLeft(position, model),\n\t\t\tposition,\n\t\t);\n\t}\n\n\tprivate static getPositionAfterDeleteLeft(\n\t\tposition: Position,\n\t\tmodel: ICursorSimpleModel,\n\t): Position {\n\t\tif (position.column > 1) {\n\t\t\t// Convert 1-based columns to 0-based offsets and back.\n\t\t\tconst idx = strings.getLeftDeleteOffset(\n\t\t\t\tposition.column - 1,\n\t\t\t\tmodel.getLineContent(position.lineNumber),\n\t\t\t);\n\t\t\treturn position.with(undefined, idx + 1);\n\t\t} else if (position.lineNumber > 1) {\n\t\t\tconst newLine = position.lineNumber - 1;\n\t\t\treturn new Position(newLine, model.getLineMaxColumn(newLine));\n\t\t} else {\n\t\t\treturn position;\n\t\t}\n\t}\n\n\tpublic static cut(\n\t\tconfig: CursorConfiguration,\n\t\tmodel: ICursorSimpleModel,\n\t\tselections: Selection[],\n\t): EditOperationResult {\n\t\tconst commands: Array<ICommand | null> = [];\n\t\tlet lastCutRange: Range | null = null;\n\t\tselections.sort((a, b) =>\n\t\t\tPosition.compare(a.getStartPosition(), b.getEndPosition()),\n\t\t);\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (config.emptySelectionClipboard) {\n\t\t\t\t\t// This is a full line cut\n\n\t\t\t\t\tconst position = selection.getPosition();\n\n\t\t\t\t\tlet startLineNumber: number,\n\t\t\t\t\t\tstartColumn: number,\n\t\t\t\t\t\tendLineNumber: number,\n\t\t\t\t\t\tendColumn: number;\n\n\t\t\t\t\tif (position.lineNumber < model.getLineCount()) {\n\t\t\t\t\t\t// Cutting a line in the middle of the model\n\t\t\t\t\t\tstartLineNumber = position.lineNumber;\n\t\t\t\t\t\tstartColumn = 1;\n\t\t\t\t\t\tendLineNumber = position.lineNumber + 1;\n\t\t\t\t\t\tendColumn = 1;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tposition.lineNumber > 1 &&\n\t\t\t\t\t\tlastCutRange?.endLineNumber !== position.lineNumber\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Cutting the last line & there are more than 1 lines in the model & a previous cut operation does not touch the current cut operation\n\t\t\t\t\t\tstartLineNumber = position.lineNumber - 1;\n\t\t\t\t\t\tstartColumn = model.getLineMaxColumn(\n\t\t\t\t\t\t\tposition.lineNumber - 1,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Cutting the single line that the model contains\n\t\t\t\t\t\tstartLineNumber = position.lineNumber;\n\t\t\t\t\t\tstartColumn = 1;\n\t\t\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\t\t\tendColumn = model.getLineMaxColumn(position.lineNumber);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst deleteSelection = new Range(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tstartColumn,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tendColumn,\n\t\t\t\t\t);\n\t\t\t\t\tlastCutRange = deleteSelection;\n\n\t\t\t\t\tif (deleteSelection.isEmpty()) {\n\t\t\t\t\t\tcommands[i] = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommands[i] = new ReplaceCommand(deleteSelection, \"\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Cannot cut empty selection\n\t\t\t\t\tcommands[i] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcommands[i] = new ReplaceCommand(selection, \"\");\n\t\t\t}\n\t\t}\n\t\treturn new EditOperationResult(EditOperationType.Other, commands, {\n\t\t\tshouldPushStackElementBefore: true,\n\t\t\tshouldPushStackElementAfter: true,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
