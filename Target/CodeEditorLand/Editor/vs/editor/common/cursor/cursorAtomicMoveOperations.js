import{CharCode as c}from"../../../base/common/charCode.js";import{CursorColumns as f}from"../core/cursorColumns.js";var C=(e=>(e[e.Left=0]="Left",e[e.Right=1]="Right",e[e.Nearest=2]="Nearest",e))(C||{});class p{static whitespaceVisibleColumn(o,a,e){const b=o.length;let r=0,u=-1,s=-1;for(let t=0;t<b;t++){if(t===a)return[u,s,r];switch(r%e===0&&(u=t,s=r),o.charCodeAt(t)){case c.Space:r+=1;break;case c.Tab:r=f.nextRenderTabStop(r,e);break;default:return[-1,-1,-1]}}return a===b?[u,s,r]:[-1,-1,-1]}static atomicPosition(o,a,e,b){const r=o.length,[u,s,t]=p.whitespaceVisibleColumn(o,a,e);if(t===-1)return-1;let l;switch(b){case 0:l=!0;break;case 1:l=!1;break;case 2:if(t%e===0)return a;l=t%e<=e/2;break}if(l){if(u===-1)return-1;let n=s;for(let m=u;m<r;++m){if(n===s+e)return u;switch(o.charCodeAt(m)){case c.Space:n+=1;break;case c.Tab:n=f.nextRenderTabStop(n,e);break;default:return-1}}return n===s+e?u:-1}const h=f.nextRenderTabStop(t,e);let i=t;for(let n=a;n<r;n++){if(i===h)return n;switch(o.charCodeAt(n)){case c.Space:i+=1;break;case c.Tab:i=f.nextRenderTabStop(i,e);break;default:return-1}}return i===h?r:-1}}export{p as AtomicTabMoveOperations,C as Direction};
