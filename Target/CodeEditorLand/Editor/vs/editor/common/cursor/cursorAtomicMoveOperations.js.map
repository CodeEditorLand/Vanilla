{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorAtomicMoveOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../base/common/charCode.js\";\nimport { CursorColumns } from \"../core/cursorColumns.js\";\n\nexport enum Direction {\n\tLeft = 0,\n\tRight = 1,\n\tNearest = 2,\n}\n\nexport class AtomicTabMoveOperations {\n\t/**\n\t * Get the visible column at the position. If we get to a non-whitespace character first\n\t * or past the end of string then return -1.\n\t *\n\t * **Note** `position` and the return value are 0-based.\n\t */\n\tpublic static whitespaceVisibleColumn(\n\t\tlineContent: string,\n\t\tposition: number,\n\t\ttabSize: number,\n\t): [number, number, number] {\n\t\tconst lineLength = lineContent.length;\n\t\tlet visibleColumn = 0;\n\t\tlet prevTabStopPosition = -1;\n\t\tlet prevTabStopVisibleColumn = -1;\n\t\tfor (let i = 0; i < lineLength; i++) {\n\t\t\tif (i === position) {\n\t\t\t\treturn [\n\t\t\t\t\tprevTabStopPosition,\n\t\t\t\t\tprevTabStopVisibleColumn,\n\t\t\t\t\tvisibleColumn,\n\t\t\t\t];\n\t\t\t}\n\t\t\tif (visibleColumn % tabSize === 0) {\n\t\t\t\tprevTabStopPosition = i;\n\t\t\t\tprevTabStopVisibleColumn = visibleColumn;\n\t\t\t}\n\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\tswitch (chCode) {\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tvisibleColumn += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\t// Skip to the next multiple of tabSize.\n\t\t\t\t\tvisibleColumn = CursorColumns.nextRenderTabStop(\n\t\t\t\t\t\tvisibleColumn,\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn [-1, -1, -1];\n\t\t\t}\n\t\t}\n\t\tif (position === lineLength) {\n\t\t\treturn [\n\t\t\t\tprevTabStopPosition,\n\t\t\t\tprevTabStopVisibleColumn,\n\t\t\t\tvisibleColumn,\n\t\t\t];\n\t\t}\n\t\treturn [-1, -1, -1];\n\t}\n\n\t/**\n\t * Return the position that should result from a move left, right or to the\n\t * nearest tab, if atomic tabs are enabled. Left and right are used for the\n\t * arrow key movements, nearest is used for mouse selection. It returns\n\t * -1 if atomic tabs are not relevant and you should fall back to normal\n\t * behaviour.\n\t *\n\t * **Note**: `position` and the return value are 0-based.\n\t */\n\tpublic static atomicPosition(\n\t\tlineContent: string,\n\t\tposition: number,\n\t\ttabSize: number,\n\t\tdirection: Direction,\n\t): number {\n\t\tconst lineLength = lineContent.length;\n\n\t\t// Get the 0-based visible column corresponding to the position, or return\n\t\t// -1 if it is not in the initial whitespace.\n\t\tconst [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] =\n\t\t\tAtomicTabMoveOperations.whitespaceVisibleColumn(\n\t\t\t\tlineContent,\n\t\t\t\tposition,\n\t\t\t\ttabSize,\n\t\t\t);\n\n\t\tif (visibleColumn === -1) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Is the output left or right of the current position. The case for nearest\n\t\t// where it is the same as the current position is handled in the switch.\n\t\tlet left: boolean;\n\t\tswitch (direction) {\n\t\t\tcase Direction.Left:\n\t\t\t\tleft = true;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Right:\n\t\t\t\tleft = false;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Nearest:\n\t\t\t\t// The code below assumes the output position is either left or right\n\t\t\t\t// of the input position. If it is the same, return immediately.\n\t\t\t\tif (visibleColumn % tabSize === 0) {\n\t\t\t\t\treturn position;\n\t\t\t\t}\n\t\t\t\t// Go to the nearest indentation.\n\t\t\t\tleft = visibleColumn % tabSize <= tabSize / 2;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// If going left, we can just use the info about the last tab stop position and\n\t\t// last tab stop visible column that we computed in the first walk over the whitespace.\n\t\tif (left) {\n\t\t\tif (prevTabStopPosition === -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// If the direction is left, we need to keep scanning right to ensure\n\t\t\t// that targetVisibleColumn + tabSize is before non-whitespace.\n\t\t\t// This is so that when we press left at the end of a partial\n\t\t\t// indentation it only goes one character. For example '      foo' with\n\t\t\t// tabSize 4, should jump from position 6 to position 5, not 4.\n\t\t\tlet currentVisibleColumn = prevTabStopVisibleColumn;\n\t\t\tfor (let i = prevTabStopPosition; i < lineLength; ++i) {\n\t\t\t\tif (\n\t\t\t\t\tcurrentVisibleColumn ===\n\t\t\t\t\tprevTabStopVisibleColumn + tabSize\n\t\t\t\t) {\n\t\t\t\t\t// It is a full indentation.\n\t\t\t\t\treturn prevTabStopPosition;\n\t\t\t\t}\n\n\t\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\t\tswitch (chCode) {\n\t\t\t\t\tcase CharCode.Space:\n\t\t\t\t\t\tcurrentVisibleColumn += 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\t\tcurrentVisibleColumn = CursorColumns.nextRenderTabStop(\n\t\t\t\t\t\t\tcurrentVisibleColumn,\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n\t\t\t\treturn prevTabStopPosition;\n\t\t\t}\n\t\t\t// It must have been a partial indentation.\n\t\t\treturn -1;\n\t\t}\n\n\t\t// We are going right.\n\t\tconst targetVisibleColumn = CursorColumns.nextRenderTabStop(\n\t\t\tvisibleColumn,\n\t\t\ttabSize,\n\t\t);\n\n\t\t// We can just continue from where whitespaceVisibleColumn got to.\n\t\tlet currentVisibleColumn = visibleColumn;\n\t\tfor (let i = position; i < lineLength; i++) {\n\t\t\tif (currentVisibleColumn === targetVisibleColumn) {\n\t\t\t\treturn i;\n\t\t\t}\n\n\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\tswitch (chCode) {\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tcurrentVisibleColumn += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\tcurrentVisibleColumn = CursorColumns.nextRenderTabStop(\n\t\t\t\t\t\tcurrentVisibleColumn,\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\t// This condition handles when the target column is at the end of the line.\n\t\tif (currentVisibleColumn === targetVisibleColumn) {\n\t\t\treturn lineLength;\n\t\t}\n\t\treturn -1;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Direction", "currentVisibleColumn"]
}
