{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from \"../../../base/common/errors.js\";\nimport { Disposable, dispose } from \"../../../base/common/lifecycle.js\";\nimport * as strings from \"../../../base/common/strings.js\";\nimport type { Position } from \"../core/position.js\";\nimport { type IRange, Range } from \"../core/range.js\";\nimport {\n\ttype ISelection,\n\tSelection,\n\tSelectionDirection,\n} from \"../core/selection.js\";\nimport {\n\ttype CursorConfiguration,\n\tCursorState,\n\tEditOperationResult,\n\tEditOperationType,\n\ttype IColumnSelectData,\n\ttype ICursorSimpleModel,\n\ttype PartialCursorState,\n} from \"../cursorCommon.js\";\nimport { CursorChangeReason } from \"../cursorEvents.js\";\nimport * as editorCommon from \"../editorCommon.js\";\nimport {\n\ttype ICursorStateComputer,\n\ttype IIdentifiedSingleEditOperation,\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\ttype IValidEditOperation,\n\tTrackedRangeStickiness,\n} from \"../model.js\";\nimport {\n\ttype InternalModelContentChangeEvent,\n\tModelInjectedTextChangedEvent,\n\tRawContentChangedType,\n} from \"../textModelEvents.js\";\nimport {\n\tVerticalRevealType,\n\tViewCursorStateChangedEvent,\n\tViewRevealRangeRequestEvent,\n} from \"../viewEvents.js\";\nimport type { ICoordinatesConverter } from \"../viewModel.js\";\nimport {\n\tCursorStateChangedEvent,\n\ttype ViewModelEventsCollector,\n} from \"../viewModelEventDispatcher.js\";\nimport { CursorCollection } from \"./cursorCollection.js\";\nimport { CursorContext } from \"./cursorContext.js\";\nimport { DeleteOperations } from \"./cursorDeleteOperations.js\";\nimport { BaseTypeWithAutoClosingCommand } from \"./cursorTypeEditOperations.js\";\nimport { CompositionOutcome, TypeOperations } from \"./cursorTypeOperations.js\";\n\nexport class CursorsController extends Disposable {\n\tprivate readonly _model: ITextModel;\n\tprivate _knownModelVersionId: number;\n\tprivate readonly _viewModel: ICursorSimpleModel;\n\tprivate readonly _coordinatesConverter: ICoordinatesConverter;\n\tpublic context: CursorContext;\n\tprivate _cursors: CursorCollection;\n\n\tprivate _hasFocus: boolean;\n\tprivate _isHandling: boolean;\n\tprivate _compositionState: CompositionState | null;\n\tprivate _columnSelectData: IColumnSelectData | null;\n\tprivate _autoClosedActions: AutoClosedAction[];\n\tprivate _prevEditOperationType: EditOperationType;\n\n\tconstructor(\n\t\tmodel: ITextModel,\n\t\tviewModel: ICursorSimpleModel,\n\t\tcoordinatesConverter: ICoordinatesConverter,\n\t\tcursorConfig: CursorConfiguration,\n\t) {\n\t\tsuper();\n\t\tthis._model = model;\n\t\tthis._knownModelVersionId = this._model.getVersionId();\n\t\tthis._viewModel = viewModel;\n\t\tthis._coordinatesConverter = coordinatesConverter;\n\t\tthis.context = new CursorContext(\n\t\t\tthis._model,\n\t\t\tthis._viewModel,\n\t\t\tthis._coordinatesConverter,\n\t\t\tcursorConfig,\n\t\t);\n\t\tthis._cursors = new CursorCollection(this.context);\n\n\t\tthis._hasFocus = false;\n\t\tthis._isHandling = false;\n\t\tthis._compositionState = null;\n\t\tthis._columnSelectData = null;\n\t\tthis._autoClosedActions = [];\n\t\tthis._prevEditOperationType = EditOperationType.Other;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._cursors.dispose();\n\t\tthis._autoClosedActions = dispose(this._autoClosedActions);\n\t\tsuper.dispose();\n\t}\n\n\tpublic updateConfiguration(cursorConfig: CursorConfiguration): void {\n\t\tthis.context = new CursorContext(\n\t\t\tthis._model,\n\t\t\tthis._viewModel,\n\t\t\tthis._coordinatesConverter,\n\t\t\tcursorConfig,\n\t\t);\n\t\tthis._cursors.updateContext(this.context);\n\t}\n\n\tpublic onLineMappingChanged(\n\t\teventsCollector: ViewModelEventsCollector,\n\t): void {\n\t\tif (this._knownModelVersionId !== this._model.getVersionId()) {\n\t\t\t// There are model change events that I didn't yet receive.\n\t\t\t//\n\t\t\t// This can happen when editing the model, and the view model receives the change events first,\n\t\t\t// and the view model emits line mapping changed events, all before the cursor gets a chance to\n\t\t\t// recover from markers.\n\t\t\t//\n\t\t\t// The model change listener above will be called soon and we'll ensure a valid cursor state there.\n\t\t\treturn;\n\t\t}\n\t\t// Ensure valid state\n\t\tthis.setStates(\n\t\t\teventsCollector,\n\t\t\t\"viewModel\",\n\t\t\tCursorChangeReason.NotSet,\n\t\t\tthis.getCursorStates(),\n\t\t);\n\t}\n\n\tpublic setHasFocus(hasFocus: boolean): void {\n\t\tthis._hasFocus = hasFocus;\n\t}\n\n\tprivate _validateAutoClosedActions(): void {\n\t\tif (this._autoClosedActions.length > 0) {\n\t\t\tconst selections: Range[] = this._cursors.getSelections();\n\t\t\tfor (let i = 0; i < this._autoClosedActions.length; i++) {\n\t\t\t\tconst autoClosedAction = this._autoClosedActions[i];\n\t\t\t\tif (!autoClosedAction.isValid(selections)) {\n\t\t\t\t\tautoClosedAction.dispose();\n\t\t\t\t\tthis._autoClosedActions.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// ------ some getters/setters\n\n\tpublic getPrimaryCursorState(): CursorState {\n\t\treturn this._cursors.getPrimaryCursor();\n\t}\n\n\tpublic getLastAddedCursorIndex(): number {\n\t\treturn this._cursors.getLastAddedCursorIndex();\n\t}\n\n\tpublic getCursorStates(): CursorState[] {\n\t\treturn this._cursors.getAll();\n\t}\n\n\tpublic setStates(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\treason: CursorChangeReason,\n\t\tstates: PartialCursorState[] | null,\n\t): boolean {\n\t\tlet reachedMaxCursorCount = false;\n\t\tconst multiCursorLimit = this.context.cursorConfig.multiCursorLimit;\n\t\tif (states !== null && states.length > multiCursorLimit) {\n\t\t\tstates = states.slice(0, multiCursorLimit);\n\t\t\treachedMaxCursorCount = true;\n\t\t}\n\n\t\tconst oldState = CursorModelState.from(this._model, this);\n\n\t\tthis._cursors.setStates(states);\n\t\tthis._cursors.normalize();\n\t\tthis._columnSelectData = null;\n\n\t\tthis._validateAutoClosedActions();\n\n\t\treturn this._emitStateChangedIfNecessary(\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t\treason,\n\t\t\toldState,\n\t\t\treachedMaxCursorCount,\n\t\t);\n\t}\n\n\tpublic setCursorColumnSelectData(\n\t\tcolumnSelectData: IColumnSelectData,\n\t): void {\n\t\tthis._columnSelectData = columnSelectData;\n\t}\n\n\tpublic revealAll(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\tminimalReveal: boolean,\n\t\tverticalType: VerticalRevealType,\n\t\trevealHorizontal: boolean,\n\t\tscrollType: editorCommon.ScrollType,\n\t): void {\n\t\tconst viewPositions = this._cursors.getViewPositions();\n\n\t\tlet revealViewRange: Range | null = null;\n\t\tlet revealViewSelections: Selection[] | null = null;\n\t\tif (viewPositions.length > 1) {\n\t\t\trevealViewSelections = this._cursors.getViewSelections();\n\t\t} else {\n\t\t\trevealViewRange = Range.fromPositions(\n\t\t\t\tviewPositions[0],\n\t\t\t\tviewPositions[0],\n\t\t\t);\n\t\t}\n\n\t\teventsCollector.emitViewEvent(\n\t\t\tnew ViewRevealRangeRequestEvent(\n\t\t\t\tsource,\n\t\t\t\tminimalReveal,\n\t\t\t\trevealViewRange,\n\t\t\t\trevealViewSelections,\n\t\t\t\tverticalType,\n\t\t\t\trevealHorizontal,\n\t\t\t\tscrollType,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic revealPrimary(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\tminimalReveal: boolean,\n\t\tverticalType: VerticalRevealType,\n\t\trevealHorizontal: boolean,\n\t\tscrollType: editorCommon.ScrollType,\n\t): void {\n\t\tconst primaryCursor = this._cursors.getPrimaryCursor();\n\t\tconst revealViewSelections = [primaryCursor.viewState.selection];\n\t\teventsCollector.emitViewEvent(\n\t\t\tnew ViewRevealRangeRequestEvent(\n\t\t\t\tsource,\n\t\t\t\tminimalReveal,\n\t\t\t\tnull,\n\t\t\t\trevealViewSelections,\n\t\t\t\tverticalType,\n\t\t\t\trevealHorizontal,\n\t\t\t\tscrollType,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic saveState(): editorCommon.ICursorState[] {\n\t\tconst result: editorCommon.ICursorState[] = [];\n\n\t\tconst selections = this._cursors.getSelections();\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tresult.push({\n\t\t\t\tinSelectionMode: !selection.isEmpty(),\n\t\t\t\tselectionStart: {\n\t\t\t\t\tlineNumber: selection.selectionStartLineNumber,\n\t\t\t\t\tcolumn: selection.selectionStartColumn,\n\t\t\t\t},\n\t\t\t\tposition: {\n\t\t\t\t\tlineNumber: selection.positionLineNumber,\n\t\t\t\t\tcolumn: selection.positionColumn,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic restoreState(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tstates: editorCommon.ICursorState[],\n\t): void {\n\t\tconst desiredSelections: ISelection[] = [];\n\n\t\tfor (let i = 0, len = states.length; i < len; i++) {\n\t\t\tconst state = states[i];\n\n\t\t\tlet positionLineNumber = 1;\n\t\t\tlet positionColumn = 1;\n\n\t\t\t// Avoid missing properties on the literal\n\t\t\tif (state.position && state.position.lineNumber) {\n\t\t\t\tpositionLineNumber = state.position.lineNumber;\n\t\t\t}\n\t\t\tif (state.position && state.position.column) {\n\t\t\t\tpositionColumn = state.position.column;\n\t\t\t}\n\n\t\t\tlet selectionStartLineNumber = positionLineNumber;\n\t\t\tlet selectionStartColumn = positionColumn;\n\n\t\t\t// Avoid missing properties on the literal\n\t\t\tif (state.selectionStart && state.selectionStart.lineNumber) {\n\t\t\t\tselectionStartLineNumber = state.selectionStart.lineNumber;\n\t\t\t}\n\t\t\tif (state.selectionStart && state.selectionStart.column) {\n\t\t\t\tselectionStartColumn = state.selectionStart.column;\n\t\t\t}\n\n\t\t\tdesiredSelections.push({\n\t\t\t\tselectionStartLineNumber: selectionStartLineNumber,\n\t\t\t\tselectionStartColumn: selectionStartColumn,\n\t\t\t\tpositionLineNumber: positionLineNumber,\n\t\t\t\tpositionColumn: positionColumn,\n\t\t\t});\n\t\t}\n\n\t\tthis.setStates(\n\t\t\teventsCollector,\n\t\t\t\"restoreState\",\n\t\t\tCursorChangeReason.NotSet,\n\t\t\tCursorState.fromModelSelections(desiredSelections),\n\t\t);\n\t\tthis.revealAll(\n\t\t\teventsCollector,\n\t\t\t\"restoreState\",\n\t\t\tfalse,\n\t\t\tVerticalRevealType.Simple,\n\t\t\ttrue,\n\t\t\teditorCommon.ScrollType.Immediate,\n\t\t);\n\t}\n\n\tpublic onModelContentChanged(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tevent: InternalModelContentChangeEvent | ModelInjectedTextChangedEvent,\n\t): void {\n\t\tif (event instanceof ModelInjectedTextChangedEvent) {\n\t\t\t// If injected texts change, the view positions of all cursors need to be updated.\n\t\t\tif (this._isHandling) {\n\t\t\t\t// The view positions will be updated when handling finishes\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// setStates might remove markers, which could trigger a decoration change.\n\t\t\t// If there are injected text decorations for that line, `onModelContentChanged` is emitted again\n\t\t\t// and an endless recursion happens.\n\t\t\t// _isHandling prevents that.\n\t\t\tthis._isHandling = true;\n\t\t\ttry {\n\t\t\t\tthis.setStates(\n\t\t\t\t\teventsCollector,\n\t\t\t\t\t\"modelChange\",\n\t\t\t\t\tCursorChangeReason.NotSet,\n\t\t\t\t\tthis.getCursorStates(),\n\t\t\t\t);\n\t\t\t} finally {\n\t\t\t\tthis._isHandling = false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst e = event.rawContentChangedEvent;\n\t\t\tthis._knownModelVersionId = e.versionId;\n\t\t\tif (this._isHandling) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hadFlushEvent = e.containsEvent(RawContentChangedType.Flush);\n\t\t\tthis._prevEditOperationType = EditOperationType.Other;\n\n\t\t\tif (hadFlushEvent) {\n\t\t\t\t// a model.setValue() was called\n\t\t\t\tthis._cursors.dispose();\n\t\t\t\tthis._cursors = new CursorCollection(this.context);\n\t\t\t\tthis._validateAutoClosedActions();\n\t\t\t\tthis._emitStateChangedIfNecessary(\n\t\t\t\t\teventsCollector,\n\t\t\t\t\t\"model\",\n\t\t\t\t\tCursorChangeReason.ContentFlush,\n\t\t\t\t\tnull,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\tthis._hasFocus &&\n\t\t\t\te.resultingSelection &&\n\t\t\t\te.resultingSelection.length > 0\n\t\t\t) {\n\t\t\t\tconst cursorState = CursorState.fromModelSelections(\n\t\t\t\t\te.resultingSelection,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tthis.setStates(\n\t\t\t\t\t\teventsCollector,\n\t\t\t\t\t\t\"modelChange\",\n\t\t\t\t\t\te.isUndoing\n\t\t\t\t\t\t\t? CursorChangeReason.Undo\n\t\t\t\t\t\t\t: e.isRedoing\n\t\t\t\t\t\t\t\t? CursorChangeReason.Redo\n\t\t\t\t\t\t\t\t: CursorChangeReason.RecoverFromMarkers,\n\t\t\t\t\t\tcursorState,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.revealAll(\n\t\t\t\t\t\teventsCollector,\n\t\t\t\t\t\t\"modelChange\",\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tVerticalRevealType.Simple,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\teditorCommon.ScrollType.Smooth,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst selectionsFromMarkers =\n\t\t\t\t\tthis._cursors.readSelectionFromMarkers();\n\t\t\t\tthis.setStates(\n\t\t\t\t\teventsCollector,\n\t\t\t\t\t\"modelChange\",\n\t\t\t\t\tCursorChangeReason.RecoverFromMarkers,\n\t\t\t\t\tCursorState.fromModelSelections(selectionsFromMarkers),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getSelection(): Selection {\n\t\treturn this._cursors.getPrimaryCursor().modelState.selection;\n\t}\n\n\tpublic getTopMostViewPosition(): Position {\n\t\treturn this._cursors.getTopMostViewPosition();\n\t}\n\n\tpublic getBottomMostViewPosition(): Position {\n\t\treturn this._cursors.getBottomMostViewPosition();\n\t}\n\n\tpublic getCursorColumnSelectData(): IColumnSelectData {\n\t\tif (this._columnSelectData) {\n\t\t\treturn this._columnSelectData;\n\t\t}\n\t\tconst primaryCursor = this._cursors.getPrimaryCursor();\n\t\tconst viewSelectionStart =\n\t\t\tprimaryCursor.viewState.selectionStart.getStartPosition();\n\t\tconst viewPosition = primaryCursor.viewState.position;\n\t\treturn {\n\t\t\tisReal: false,\n\t\t\tfromViewLineNumber: viewSelectionStart.lineNumber,\n\t\t\tfromViewVisualColumn:\n\t\t\t\tthis.context.cursorConfig.visibleColumnFromColumn(\n\t\t\t\t\tthis._viewModel,\n\t\t\t\t\tviewSelectionStart,\n\t\t\t\t),\n\t\t\ttoViewLineNumber: viewPosition.lineNumber,\n\t\t\ttoViewVisualColumn:\n\t\t\t\tthis.context.cursorConfig.visibleColumnFromColumn(\n\t\t\t\t\tthis._viewModel,\n\t\t\t\t\tviewPosition,\n\t\t\t\t),\n\t\t};\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\treturn this._cursors.getSelections();\n\t}\n\n\tpublic getPosition(): Position {\n\t\treturn this._cursors.getPrimaryCursor().modelState.position;\n\t}\n\n\tpublic setSelections(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\tselections: readonly ISelection[],\n\t\treason: CursorChangeReason,\n\t): void {\n\t\tthis.setStates(\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t\treason,\n\t\t\tCursorState.fromModelSelections(selections),\n\t\t);\n\t}\n\n\tpublic getPrevEditOperationType(): EditOperationType {\n\t\treturn this._prevEditOperationType;\n\t}\n\n\tpublic setPrevEditOperationType(type: EditOperationType): void {\n\t\tthis._prevEditOperationType = type;\n\t}\n\n\t// ------ auxiliary handling logic\n\n\tprivate _pushAutoClosedAction(\n\t\tautoClosedCharactersRanges: Range[],\n\t\tautoClosedEnclosingRanges: Range[],\n\t): void {\n\t\tconst autoClosedCharactersDeltaDecorations: IModelDeltaDecoration[] =\n\t\t\t[];\n\t\tconst autoClosedEnclosingDeltaDecorations: IModelDeltaDecoration[] = [];\n\n\t\tfor (let i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n\t\t\tautoClosedCharactersDeltaDecorations.push({\n\t\t\t\trange: autoClosedCharactersRanges[i],\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"auto-closed-character\",\n\t\t\t\t\tinlineClassName: \"auto-closed-character\",\n\t\t\t\t\tstickiness:\n\t\t\t\t\t\tTrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\t\t},\n\t\t\t});\n\t\t\tautoClosedEnclosingDeltaDecorations.push({\n\t\t\t\trange: autoClosedEnclosingRanges[i],\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"auto-closed-enclosing\",\n\t\t\t\t\tstickiness:\n\t\t\t\t\t\tTrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst autoClosedCharactersDecorations = this._model.deltaDecorations(\n\t\t\t[],\n\t\t\tautoClosedCharactersDeltaDecorations,\n\t\t);\n\t\tconst autoClosedEnclosingDecorations = this._model.deltaDecorations(\n\t\t\t[],\n\t\t\tautoClosedEnclosingDeltaDecorations,\n\t\t);\n\t\tthis._autoClosedActions.push(\n\t\t\tnew AutoClosedAction(\n\t\t\t\tthis._model,\n\t\t\t\tautoClosedCharactersDecorations,\n\t\t\t\tautoClosedEnclosingDecorations,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _executeEditOperation(opResult: EditOperationResult | null): void {\n\t\tif (!opResult) {\n\t\t\t// Nothing to execute\n\t\t\treturn;\n\t\t}\n\n\t\tif (opResult.shouldPushStackElementBefore) {\n\t\t\tthis._model.pushStackElement();\n\t\t}\n\n\t\tconst result = CommandExecutor.executeCommands(\n\t\t\tthis._model,\n\t\t\tthis._cursors.getSelections(),\n\t\t\topResult.commands,\n\t\t);\n\t\tif (result) {\n\t\t\t// The commands were applied correctly\n\t\t\tthis._interpretCommandResult(result);\n\n\t\t\t// Check for auto-closing closed characters\n\t\t\tconst autoClosedCharactersRanges: Range[] = [];\n\t\t\tconst autoClosedEnclosingRanges: Range[] = [];\n\n\t\t\tfor (let i = 0; i < opResult.commands.length; i++) {\n\t\t\t\tconst command = opResult.commands[i];\n\t\t\t\tif (\n\t\t\t\t\tcommand instanceof BaseTypeWithAutoClosingCommand &&\n\t\t\t\t\tcommand.enclosingRange &&\n\t\t\t\t\tcommand.closeCharacterRange\n\t\t\t\t) {\n\t\t\t\t\tautoClosedCharactersRanges.push(\n\t\t\t\t\t\tcommand.closeCharacterRange,\n\t\t\t\t\t);\n\t\t\t\t\tautoClosedEnclosingRanges.push(command.enclosingRange);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (autoClosedCharactersRanges.length > 0) {\n\t\t\t\tthis._pushAutoClosedAction(\n\t\t\t\t\tautoClosedCharactersRanges,\n\t\t\t\t\tautoClosedEnclosingRanges,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._prevEditOperationType = opResult.type;\n\t\t}\n\n\t\tif (opResult.shouldPushStackElementAfter) {\n\t\t\tthis._model.pushStackElement();\n\t\t}\n\t}\n\n\tprivate _interpretCommandResult(cursorState: Selection[] | null): void {\n\t\tif (!cursorState || cursorState.length === 0) {\n\t\t\tcursorState = this._cursors.readSelectionFromMarkers();\n\t\t}\n\n\t\tthis._columnSelectData = null;\n\t\tthis._cursors.setSelections(cursorState);\n\t\tthis._cursors.normalize();\n\t}\n\n\t// -----------------------------------------------------------------------------------------------------------\n\t// ----- emitting events\n\n\tprivate _emitStateChangedIfNecessary(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\treason: CursorChangeReason,\n\t\toldState: CursorModelState | null,\n\t\treachedMaxCursorCount: boolean,\n\t): boolean {\n\t\tconst newState = CursorModelState.from(this._model, this);\n\t\tif (newState.equals(oldState)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selections = this._cursors.getSelections();\n\t\tconst viewSelections = this._cursors.getViewSelections();\n\n\t\t// Let the view get the event first.\n\t\teventsCollector.emitViewEvent(\n\t\t\tnew ViewCursorStateChangedEvent(viewSelections, selections, reason),\n\t\t);\n\n\t\t// Only after the view has been notified, let the rest of the world know...\n\t\tif (\n\t\t\t!oldState ||\n\t\t\toldState.cursorState.length !== newState.cursorState.length ||\n\t\t\tnewState.cursorState.some(\n\t\t\t\t(newCursorState, i) =>\n\t\t\t\t\t!newCursorState.modelState.equals(\n\t\t\t\t\t\toldState.cursorState[i].modelState,\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\tconst oldSelections = oldState\n\t\t\t\t? oldState.cursorState.map((s) => s.modelState.selection)\n\t\t\t\t: null;\n\t\t\tconst oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n\t\t\teventsCollector.emitOutgoingEvent(\n\t\t\t\tnew CursorStateChangedEvent(\n\t\t\t\t\toldSelections,\n\t\t\t\t\tselections,\n\t\t\t\t\toldModelVersionId,\n\t\t\t\t\tnewState.modelVersionId,\n\t\t\t\t\tsource || \"keyboard\",\n\t\t\t\t\treason,\n\t\t\t\t\treachedMaxCursorCount,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// -----------------------------------------------------------------------------------------------------------\n\t// ----- handlers beyond this point\n\n\tprivate _findAutoClosingPairs(\n\t\tedits: IIdentifiedSingleEditOperation[],\n\t): [number, number][] | null {\n\t\tif (!edits.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indices: [number, number][] = [];\n\t\tfor (let i = 0, len = edits.length; i < len; i++) {\n\t\t\tconst edit = edits[i];\n\t\t\tif (!edit.text || edit.text.indexOf(\"\\n\") >= 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n\t\t\tif (!m) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst closeChar = m[1];\n\n\t\t\tconst autoClosingPairsCandidates =\n\t\t\t\tthis.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(\n\t\t\t\t\tcloseChar,\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\t!autoClosingPairsCandidates ||\n\t\t\t\tautoClosingPairsCandidates.length !== 1\n\t\t\t) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst openChar = autoClosingPairsCandidates[0].open;\n\t\t\tconst closeCharIndex = edit.text.length - m[2].length - 1;\n\t\t\tconst openCharIndex = edit.text.lastIndexOf(\n\t\t\t\topenChar,\n\t\t\t\tcloseCharIndex - 1,\n\t\t\t);\n\t\t\tif (openCharIndex === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tindices.push([openCharIndex, closeCharIndex]);\n\t\t}\n\n\t\treturn indices;\n\t}\n\n\tpublic executeEdits(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\tedits: IIdentifiedSingleEditOperation[],\n\t\tcursorStateComputer: ICursorStateComputer,\n\t): void {\n\t\tlet autoClosingIndices: [number, number][] | null = null;\n\t\tif (source === \"snippet\") {\n\t\t\tautoClosingIndices = this._findAutoClosingPairs(edits);\n\t\t}\n\n\t\tif (autoClosingIndices) {\n\t\t\tedits[0]._isTracked = true;\n\t\t}\n\t\tconst autoClosedCharactersRanges: Range[] = [];\n\t\tconst autoClosedEnclosingRanges: Range[] = [];\n\t\tconst selections = this._model.pushEditOperations(\n\t\t\tthis.getSelections(),\n\t\t\tedits,\n\t\t\t(undoEdits) => {\n\t\t\t\tif (autoClosingIndices) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet i = 0, len = autoClosingIndices.length;\n\t\t\t\t\t\ti < len;\n\t\t\t\t\t\ti++\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst [openCharInnerIndex, closeCharInnerIndex] =\n\t\t\t\t\t\t\tautoClosingIndices[i];\n\t\t\t\t\t\tconst undoEdit = undoEdits[i];\n\t\t\t\t\t\tconst lineNumber = undoEdit.range.startLineNumber;\n\t\t\t\t\t\tconst openCharIndex =\n\t\t\t\t\t\t\tundoEdit.range.startColumn - 1 + openCharInnerIndex;\n\t\t\t\t\t\tconst closeCharIndex =\n\t\t\t\t\t\t\tundoEdit.range.startColumn -\n\t\t\t\t\t\t\t1 +\n\t\t\t\t\t\t\tcloseCharInnerIndex;\n\n\t\t\t\t\t\tautoClosedCharactersRanges.push(\n\t\t\t\t\t\t\tnew Range(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcloseCharIndex + 1,\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcloseCharIndex + 2,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tautoClosedEnclosingRanges.push(\n\t\t\t\t\t\t\tnew Range(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\topenCharIndex + 1,\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcloseCharIndex + 2,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst selections = cursorStateComputer(undoEdits);\n\t\t\t\tif (selections) {\n\t\t\t\t\t// Don't recover the selection from markers because\n\t\t\t\t\t// we know what it should be.\n\t\t\t\t\tthis._isHandling = true;\n\t\t\t\t}\n\n\t\t\t\treturn selections;\n\t\t\t},\n\t\t);\n\t\tif (selections) {\n\t\t\tthis._isHandling = false;\n\t\t\tthis.setSelections(\n\t\t\t\teventsCollector,\n\t\t\t\tsource,\n\t\t\t\tselections,\n\t\t\t\tCursorChangeReason.NotSet,\n\t\t\t);\n\t\t}\n\t\tif (autoClosedCharactersRanges.length > 0) {\n\t\t\tthis._pushAutoClosedAction(\n\t\t\t\tautoClosedCharactersRanges,\n\t\t\t\tautoClosedEnclosingRanges,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _executeEdit(\n\t\tcallback: () => void,\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource: string | null | undefined,\n\t\tcursorChangeReason: CursorChangeReason = CursorChangeReason.NotSet,\n\t): void {\n\t\tif (this.context.cursorConfig.readOnly) {\n\t\t\t// we cannot edit when read only...\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldState = CursorModelState.from(this._model, this);\n\t\tthis._cursors.stopTrackingSelections();\n\t\tthis._isHandling = true;\n\n\t\ttry {\n\t\t\tthis._cursors.ensureValidState();\n\t\t\tcallback();\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\n\t\tthis._isHandling = false;\n\t\tthis._cursors.startTrackingSelections();\n\t\tthis._validateAutoClosedActions();\n\t\tif (\n\t\t\tthis._emitStateChangedIfNecessary(\n\t\t\t\teventsCollector,\n\t\t\t\tsource,\n\t\t\t\tcursorChangeReason,\n\t\t\t\toldState,\n\t\t\t\tfalse,\n\t\t\t)\n\t\t) {\n\t\t\tthis.revealAll(\n\t\t\t\teventsCollector,\n\t\t\t\tsource,\n\t\t\t\tfalse,\n\t\t\t\tVerticalRevealType.Simple,\n\t\t\t\ttrue,\n\t\t\t\teditorCommon.ScrollType.Smooth,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getAutoClosedCharacters(): Range[] {\n\t\treturn AutoClosedAction.getAllAutoClosedCharacters(\n\t\t\tthis._autoClosedActions,\n\t\t);\n\t}\n\n\tpublic startComposition(eventsCollector: ViewModelEventsCollector): void {\n\t\tthis._compositionState = new CompositionState(\n\t\t\tthis._model,\n\t\t\tthis.getSelections(),\n\t\t);\n\t}\n\n\tpublic endComposition(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tconst compositionOutcome = this._compositionState\n\t\t\t? this._compositionState.deduceOutcome(\n\t\t\t\t\tthis._model,\n\t\t\t\t\tthis.getSelections(),\n\t\t\t\t)\n\t\t\t: null;\n\t\tthis._compositionState = null;\n\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tif (source === \"keyboard\") {\n\t\t\t\t\t// composition finishes, let's check if we need to auto complete if necessary.\n\t\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\t\tTypeOperations.compositionEndWithInterceptors(\n\t\t\t\t\t\t\tthis._prevEditOperationType,\n\t\t\t\t\t\t\tthis.context.cursorConfig,\n\t\t\t\t\t\t\tthis._model,\n\t\t\t\t\t\t\tcompositionOutcome,\n\t\t\t\t\t\t\tthis.getSelections(),\n\t\t\t\t\t\t\tthis.getAutoClosedCharacters(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tpublic type(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\ttext: string,\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tif (source === \"keyboard\") {\n\t\t\t\t\t// If this event is coming straight from the keyboard, look for electric characters and enter\n\n\t\t\t\t\tconst len = text.length;\n\t\t\t\t\tlet offset = 0;\n\t\t\t\t\twhile (offset < len) {\n\t\t\t\t\t\tconst charLength = strings.nextCharLength(text, offset);\n\t\t\t\t\t\tconst chr = text.substr(offset, charLength);\n\n\t\t\t\t\t\t// Here we must interpret each typed character individually\n\t\t\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\t\t\tTypeOperations.typeWithInterceptors(\n\t\t\t\t\t\t\t\t!!this._compositionState,\n\t\t\t\t\t\t\t\tthis._prevEditOperationType,\n\t\t\t\t\t\t\t\tthis.context.cursorConfig,\n\t\t\t\t\t\t\t\tthis._model,\n\t\t\t\t\t\t\t\tthis.getSelections(),\n\t\t\t\t\t\t\t\tthis.getAutoClosedCharacters(),\n\t\t\t\t\t\t\t\tchr,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\toffset += charLength;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\t\tTypeOperations.typeWithoutInterceptors(\n\t\t\t\t\t\t\tthis._prevEditOperationType,\n\t\t\t\t\t\t\tthis.context.cursorConfig,\n\t\t\t\t\t\t\tthis._model,\n\t\t\t\t\t\t\tthis.getSelections(),\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tpublic compositionType(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\ttext: string,\n\t\treplacePrevCharCnt: number,\n\t\treplaceNextCharCnt: number,\n\t\tpositionDelta: number,\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tif (\n\t\t\ttext.length === 0 &&\n\t\t\treplacePrevCharCnt === 0 &&\n\t\t\treplaceNextCharCnt === 0\n\t\t) {\n\t\t\t// this edit is a no-op\n\t\t\tif (positionDelta !== 0) {\n\t\t\t\t// but it still wants to move the cursor\n\t\t\t\tconst newSelections = this.getSelections().map((selection) => {\n\t\t\t\t\tconst position = selection.getPosition();\n\t\t\t\t\treturn new Selection(\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column + positionDelta,\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column + positionDelta,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tthis.setSelections(\n\t\t\t\t\teventsCollector,\n\t\t\t\t\tsource,\n\t\t\t\t\tnewSelections,\n\t\t\t\t\tCursorChangeReason.NotSet,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\tTypeOperations.compositionType(\n\t\t\t\t\t\tthis._prevEditOperationType,\n\t\t\t\t\t\tthis.context.cursorConfig,\n\t\t\t\t\t\tthis._model,\n\t\t\t\t\t\tthis.getSelections(),\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\treplacePrevCharCnt,\n\t\t\t\t\t\treplaceNextCharCnt,\n\t\t\t\t\t\tpositionDelta,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tpublic paste(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\ttext: string,\n\t\tpasteOnNewLine: boolean,\n\t\tmulticursorText?: string[] | null | undefined,\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\tTypeOperations.paste(\n\t\t\t\t\t\tthis.context.cursorConfig,\n\t\t\t\t\t\tthis._model,\n\t\t\t\t\t\tthis.getSelections(),\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tpasteOnNewLine,\n\t\t\t\t\t\tmulticursorText || [],\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t\tCursorChangeReason.Paste,\n\t\t);\n\t}\n\n\tpublic cut(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\tDeleteOperations.cut(\n\t\t\t\t\t\tthis.context.cursorConfig,\n\t\t\t\t\t\tthis._model,\n\t\t\t\t\t\tthis.getSelections(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tpublic executeCommand(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tcommand: editorCommon.ICommand,\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tthis._cursors.killSecondaryCursors();\n\n\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\tnew EditOperationResult(\n\t\t\t\t\t\tEditOperationType.Other,\n\t\t\t\t\t\t[command],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshouldPushStackElementBefore: false,\n\t\t\t\t\t\t\tshouldPushStackElementAfter: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t);\n\t}\n\n\tpublic executeCommands(\n\t\teventsCollector: ViewModelEventsCollector,\n\t\tcommands: editorCommon.ICommand[],\n\t\tsource?: string | null | undefined,\n\t): void {\n\t\tthis._executeEdit(\n\t\t\t() => {\n\t\t\t\tthis._executeEditOperation(\n\t\t\t\t\tnew EditOperationResult(EditOperationType.Other, commands, {\n\t\t\t\t\t\tshouldPushStackElementBefore: false,\n\t\t\t\t\t\tshouldPushStackElementAfter: false,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t},\n\t\t\teventsCollector,\n\t\t\tsource,\n\t\t);\n\t}\n}\n\n/**\n * A snapshot of the cursor and the model state\n */\nclass CursorModelState {\n\tpublic static from(\n\t\tmodel: ITextModel,\n\t\tcursor: CursorsController,\n\t): CursorModelState {\n\t\treturn new CursorModelState(\n\t\t\tmodel.getVersionId(),\n\t\t\tcursor.getCursorStates(),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly modelVersionId: number,\n\t\tpublic readonly cursorState: CursorState[],\n\t) {}\n\n\tpublic equals(other: CursorModelState | null): boolean {\n\t\tif (!other) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.modelVersionId !== other.modelVersionId) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.cursorState.length !== other.cursorState.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = this.cursorState.length; i < len; i++) {\n\t\t\tif (!this.cursorState[i].equals(other.cursorState[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass AutoClosedAction {\n\tpublic static getAllAutoClosedCharacters(\n\t\tautoClosedActions: AutoClosedAction[],\n\t): Range[] {\n\t\tlet autoClosedCharacters: Range[] = [];\n\t\tfor (const autoClosedAction of autoClosedActions) {\n\t\t\tautoClosedCharacters = autoClosedCharacters.concat(\n\t\t\t\tautoClosedAction.getAutoClosedCharactersRanges(),\n\t\t\t);\n\t\t}\n\t\treturn autoClosedCharacters;\n\t}\n\n\tprivate readonly _model: ITextModel;\n\n\tprivate _autoClosedCharactersDecorations: string[];\n\tprivate _autoClosedEnclosingDecorations: string[];\n\n\tconstructor(\n\t\tmodel: ITextModel,\n\t\tautoClosedCharactersDecorations: string[],\n\t\tautoClosedEnclosingDecorations: string[],\n\t) {\n\t\tthis._model = model;\n\t\tthis._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n\t\tthis._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._autoClosedCharactersDecorations = this._model.deltaDecorations(\n\t\t\tthis._autoClosedCharactersDecorations,\n\t\t\t[],\n\t\t);\n\t\tthis._autoClosedEnclosingDecorations = this._model.deltaDecorations(\n\t\t\tthis._autoClosedEnclosingDecorations,\n\t\t\t[],\n\t\t);\n\t}\n\n\tpublic getAutoClosedCharactersRanges(): Range[] {\n\t\tconst result: Range[] = [];\n\t\tfor (let i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n\t\t\tconst decorationRange = this._model.getDecorationRange(\n\t\t\t\tthis._autoClosedCharactersDecorations[i],\n\t\t\t);\n\t\t\tif (decorationRange) {\n\t\t\t\tresult.push(decorationRange);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic isValid(selections: Range[]): boolean {\n\t\tconst enclosingRanges: Range[] = [];\n\t\tfor (let i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n\t\t\tconst decorationRange = this._model.getDecorationRange(\n\t\t\t\tthis._autoClosedEnclosingDecorations[i],\n\t\t\t);\n\t\t\tif (decorationRange) {\n\t\t\t\tenclosingRanges.push(decorationRange);\n\t\t\t\tif (\n\t\t\t\t\tdecorationRange.startLineNumber !==\n\t\t\t\t\tdecorationRange.endLineNumber\n\t\t\t\t) {\n\t\t\t\t\t// Stop tracking if the range becomes multiline...\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tenclosingRanges.sort(Range.compareRangesUsingStarts);\n\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (let i = 0; i < selections.length; i++) {\n\t\t\tif (i >= enclosingRanges.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!enclosingRanges[i].strictContainsRange(selections[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\ninterface IExecContext {\n\treadonly model: ITextModel;\n\treadonly selectionsBefore: Selection[];\n\treadonly trackedRanges: string[];\n\treadonly trackedRangesDirection: SelectionDirection[];\n}\n\ninterface ICommandData {\n\toperations: IIdentifiedSingleEditOperation[];\n\thadTrackedEditOperation: boolean;\n}\n\ninterface ICommandsData {\n\toperations: IIdentifiedSingleEditOperation[];\n\thadTrackedEditOperation: boolean;\n}\n\nexport class CommandExecutor {\n\tpublic static executeCommands(\n\t\tmodel: ITextModel,\n\t\tselectionsBefore: Selection[],\n\t\tcommands: (editorCommon.ICommand | null)[],\n\t): Selection[] | null {\n\t\tconst ctx: IExecContext = {\n\t\t\tmodel: model,\n\t\t\tselectionsBefore: selectionsBefore,\n\t\t\ttrackedRanges: [],\n\t\t\ttrackedRangesDirection: [],\n\t\t};\n\n\t\tconst result = this._innerExecuteCommands(ctx, commands);\n\n\t\tfor (let i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n\t\t\tctx.model._setTrackedRange(\n\t\t\t\tctx.trackedRanges[i],\n\t\t\t\tnull,\n\t\t\t\tTrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _innerExecuteCommands(\n\t\tctx: IExecContext,\n\t\tcommands: (editorCommon.ICommand | null)[],\n\t): Selection[] | null {\n\t\tif (this._arrayIsEmpty(commands)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst commandsData = this._getEditOperations(ctx, commands);\n\t\tif (commandsData.operations.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst rawOperations = commandsData.operations;\n\n\t\tconst loserCursorsMap = this._getLoserCursorMap(rawOperations);\n\t\tif (loserCursorsMap.hasOwnProperty(\"0\")) {\n\t\t\t// These commands are very messed up\n\t\t\tconsole.warn(\"Ignoring commands\");\n\t\t\treturn null;\n\t\t}\n\n\t\t// Remove operations belonging to losing cursors\n\t\tconst filteredOperations: IIdentifiedSingleEditOperation[] = [];\n\t\tfor (let i = 0, len = rawOperations.length; i < len; i++) {\n\t\t\tif (\n\t\t\t\t!loserCursorsMap.hasOwnProperty(\n\t\t\t\t\trawOperations[i].identifier!.major.toString(),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilteredOperations.push(rawOperations[i]);\n\t\t\t}\n\t\t}\n\n\t\t// TODO@Alex: find a better way to do this.\n\t\t// give the hint that edit operations are tracked to the model\n\t\tif (\n\t\t\tcommandsData.hadTrackedEditOperation &&\n\t\t\tfilteredOperations.length > 0\n\t\t) {\n\t\t\tfilteredOperations[0]._isTracked = true;\n\t\t}\n\t\tlet selectionsAfter = ctx.model.pushEditOperations(\n\t\t\tctx.selectionsBefore,\n\t\t\tfilteredOperations,\n\t\t\t(inverseEditOperations: IValidEditOperation[]): Selection[] => {\n\t\t\t\tconst groupedInverseEditOperations: IValidEditOperation[][] =\n\t\t\t\t\t[];\n\t\t\t\tfor (let i = 0; i < ctx.selectionsBefore.length; i++) {\n\t\t\t\t\tgroupedInverseEditOperations[i] = [];\n\t\t\t\t}\n\t\t\t\tfor (const op of inverseEditOperations) {\n\t\t\t\t\tif (!op.identifier) {\n\t\t\t\t\t\t// perhaps auto whitespace trim edits\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tgroupedInverseEditOperations[op.identifier.major].push(op);\n\t\t\t\t}\n\t\t\t\tconst minorBasedSorter = (\n\t\t\t\t\ta: IValidEditOperation,\n\t\t\t\t\tb: IValidEditOperation,\n\t\t\t\t) => {\n\t\t\t\t\treturn a.identifier!.minor - b.identifier!.minor;\n\t\t\t\t};\n\t\t\t\tconst cursorSelections: Selection[] = [];\n\t\t\t\tfor (let i = 0; i < ctx.selectionsBefore.length; i++) {\n\t\t\t\t\tif (groupedInverseEditOperations[i].length > 0) {\n\t\t\t\t\t\tgroupedInverseEditOperations[i].sort(minorBasedSorter);\n\t\t\t\t\t\tcursorSelections[i] = commands[i]!.computeCursorState(\n\t\t\t\t\t\t\tctx.model,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgetInverseEditOperations: () => {\n\t\t\t\t\t\t\t\t\treturn groupedInverseEditOperations[i];\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\tgetTrackedSelection: (id: string) => {\n\t\t\t\t\t\t\t\t\tconst idx = Number.parseInt(id, 10);\n\t\t\t\t\t\t\t\t\tconst range = ctx.model._getTrackedRange(\n\t\t\t\t\t\t\t\t\t\tctx.trackedRanges[idx],\n\t\t\t\t\t\t\t\t\t)!;\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tctx.trackedRangesDirection[idx] ===\n\t\t\t\t\t\t\t\t\t\tSelectionDirection.LTR\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn new Selection(\n\t\t\t\t\t\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn new Selection(\n\t\t\t\t\t\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursorSelections[i] = ctx.selectionsBefore[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn cursorSelections;\n\t\t\t},\n\t\t);\n\t\tif (!selectionsAfter) {\n\t\t\tselectionsAfter = ctx.selectionsBefore;\n\t\t}\n\n\t\t// Extract losing cursors\n\t\tconst losingCursors: number[] = [];\n\t\tfor (const losingCursorIndex in loserCursorsMap) {\n\t\t\tif (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n\t\t\t\tlosingCursors.push(Number.parseInt(losingCursorIndex, 10));\n\t\t\t}\n\t\t}\n\n\t\t// Sort losing cursors descending\n\t\tlosingCursors.sort((a: number, b: number): number => {\n\t\t\treturn b - a;\n\t\t});\n\n\t\t// Remove losing cursors\n\t\tfor (const losingCursor of losingCursors) {\n\t\t\tselectionsAfter.splice(losingCursor, 1);\n\t\t}\n\n\t\treturn selectionsAfter;\n\t}\n\n\tprivate static _arrayIsEmpty(\n\t\tcommands: (editorCommon.ICommand | null)[],\n\t): boolean {\n\t\tfor (let i = 0, len = commands.length; i < len; i++) {\n\t\t\tif (commands[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static _getEditOperations(\n\t\tctx: IExecContext,\n\t\tcommands: (editorCommon.ICommand | null)[],\n\t): ICommandsData {\n\t\tlet operations: IIdentifiedSingleEditOperation[] = [];\n\t\tlet hadTrackedEditOperation = false;\n\n\t\tfor (let i = 0, len = commands.length; i < len; i++) {\n\t\t\tconst command = commands[i];\n\t\t\tif (command) {\n\t\t\t\tconst r = this._getEditOperationsFromCommand(ctx, i, command);\n\t\t\t\toperations = operations.concat(r.operations);\n\t\t\t\thadTrackedEditOperation =\n\t\t\t\t\thadTrackedEditOperation || r.hadTrackedEditOperation;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\toperations: operations,\n\t\t\thadTrackedEditOperation: hadTrackedEditOperation,\n\t\t};\n\t}\n\n\tprivate static _getEditOperationsFromCommand(\n\t\tctx: IExecContext,\n\t\tmajorIdentifier: number,\n\t\tcommand: editorCommon.ICommand,\n\t): ICommandData {\n\t\t// This method acts as a transaction, if the command fails\n\t\t// everything it has done is ignored\n\t\tconst operations: IIdentifiedSingleEditOperation[] = [];\n\t\tlet operationMinor = 0;\n\n\t\tconst addEditOperation = (\n\t\t\trange: IRange,\n\t\t\ttext: string | null,\n\t\t\tforceMoveMarkers = false,\n\t\t) => {\n\t\t\tif (Range.isEmpty(range) && text === \"\") {\n\t\t\t\t// This command wants to add a no-op => no thank you\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toperations.push({\n\t\t\t\tidentifier: {\n\t\t\t\t\tmajor: majorIdentifier,\n\t\t\t\t\tminor: operationMinor++,\n\t\t\t\t},\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers,\n\t\t\t\tisAutoWhitespaceEdit: command.insertsAutoWhitespace,\n\t\t\t});\n\t\t};\n\n\t\tlet hadTrackedEditOperation = false;\n\t\tconst addTrackedEditOperation = (\n\t\t\tselection: IRange,\n\t\t\ttext: string | null,\n\t\t\tforceMoveMarkers?: boolean,\n\t\t) => {\n\t\t\thadTrackedEditOperation = true;\n\t\t\taddEditOperation(selection, text, forceMoveMarkers);\n\t\t};\n\n\t\tconst trackSelection = (\n\t\t\t_selection: ISelection,\n\t\t\ttrackPreviousOnEmpty?: boolean,\n\t\t) => {\n\t\t\tconst selection = Selection.liftSelection(_selection);\n\t\t\tlet stickiness: TrackedRangeStickiness;\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (typeof trackPreviousOnEmpty === \"boolean\") {\n\t\t\t\t\tif (trackPreviousOnEmpty) {\n\t\t\t\t\t\tstickiness =\n\t\t\t\t\t\t\tTrackedRangeStickiness.GrowsOnlyWhenTypingBefore;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstickiness =\n\t\t\t\t\t\t\tTrackedRangeStickiness.GrowsOnlyWhenTypingAfter;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Try to lock it with surrounding text\n\t\t\t\t\tconst maxLineColumn = ctx.model.getLineMaxColumn(\n\t\t\t\t\t\tselection.startLineNumber,\n\t\t\t\t\t);\n\t\t\t\t\tif (selection.startColumn === maxLineColumn) {\n\t\t\t\t\t\tstickiness =\n\t\t\t\t\t\t\tTrackedRangeStickiness.GrowsOnlyWhenTypingBefore;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstickiness =\n\t\t\t\t\t\t\tTrackedRangeStickiness.GrowsOnlyWhenTypingAfter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\t\t\t}\n\n\t\t\tconst l = ctx.trackedRanges.length;\n\t\t\tconst id = ctx.model._setTrackedRange(null, selection, stickiness);\n\t\t\tctx.trackedRanges[l] = id;\n\t\t\tctx.trackedRangesDirection[l] = selection.getDirection();\n\t\t\treturn l.toString();\n\t\t};\n\n\t\tconst editOperationBuilder: editorCommon.IEditOperationBuilder = {\n\t\t\taddEditOperation: addEditOperation,\n\t\t\taddTrackedEditOperation: addTrackedEditOperation,\n\t\t\ttrackSelection: trackSelection,\n\t\t};\n\n\t\ttry {\n\t\t\tcommand.getEditOperations(ctx.model, editOperationBuilder);\n\t\t} catch (e) {\n\t\t\t// TODO@Alex use notification service if this should be user facing\n\t\t\t// e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n\t\t\tonUnexpectedError(e);\n\t\t\treturn {\n\t\t\t\toperations: [],\n\t\t\t\thadTrackedEditOperation: false,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\toperations: operations,\n\t\t\thadTrackedEditOperation: hadTrackedEditOperation,\n\t\t};\n\t}\n\n\tprivate static _getLoserCursorMap(\n\t\toperations: IIdentifiedSingleEditOperation[],\n\t): { [index: string]: boolean } {\n\t\t// This is destructive on the array\n\t\toperations = operations.slice(0);\n\n\t\t// Sort operations with last one first\n\t\toperations.sort(\n\t\t\t(\n\t\t\t\ta: IIdentifiedSingleEditOperation,\n\t\t\t\tb: IIdentifiedSingleEditOperation,\n\t\t\t): number => {\n\t\t\t\t// Note the minus!\n\t\t\t\treturn -Range.compareRangesUsingEnds(a.range, b.range);\n\t\t\t},\n\t\t);\n\n\t\t// Operations can not overlap!\n\t\tconst loserCursorsMap: { [index: string]: boolean } = {};\n\n\t\tfor (let i = 1; i < operations.length; i++) {\n\t\t\tconst previousOp = operations[i - 1];\n\t\t\tconst currentOp = operations[i];\n\n\t\t\tif (\n\t\t\t\tRange.getStartPosition(previousOp.range).isBefore(\n\t\t\t\t\tRange.getEndPosition(currentOp.range),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tlet loserMajor: number;\n\n\t\t\t\tif (\n\t\t\t\t\tpreviousOp.identifier!.major > currentOp.identifier!.major\n\t\t\t\t) {\n\t\t\t\t\t// previousOp loses the battle\n\t\t\t\t\tloserMajor = previousOp.identifier!.major;\n\t\t\t\t} else {\n\t\t\t\t\tloserMajor = currentOp.identifier!.major;\n\t\t\t\t}\n\n\t\t\t\tloserCursorsMap[loserMajor.toString()] = true;\n\n\t\t\t\tfor (let j = 0; j < operations.length; j++) {\n\t\t\t\t\tif (operations[j].identifier!.major === loserMajor) {\n\t\t\t\t\t\toperations.splice(j, 1);\n\t\t\t\t\t\tif (j < i) {\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn loserCursorsMap;\n\t}\n}\n\nclass CompositionLineState {\n\tconstructor(\n\t\tpublic readonly text: string,\n\t\tpublic readonly startSelection: number,\n\t\tpublic readonly endSelection: number,\n\t) {}\n}\n\nclass CompositionState {\n\tprivate readonly _original: CompositionLineState[] | null;\n\n\tprivate static _capture(\n\t\ttextModel: ITextModel,\n\t\tselections: Selection[],\n\t): CompositionLineState[] | null {\n\t\tconst result: CompositionLineState[] = [];\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.startLineNumber !== selection.endLineNumber) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresult.push(\n\t\t\t\tnew CompositionLineState(\n\t\t\t\t\ttextModel.getLineContent(selection.startLineNumber),\n\t\t\t\t\tselection.startColumn - 1,\n\t\t\t\t\tselection.endColumn - 1,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tconstructor(textModel: ITextModel, selections: Selection[]) {\n\t\tthis._original = CompositionState._capture(textModel, selections);\n\t}\n\n\t/**\n\t * Returns the inserted text during this composition.\n\t * If the composition resulted in existing text being changed (i.e. not a pure insertion) it returns null.\n\t */\n\tdeduceOutcome(\n\t\ttextModel: ITextModel,\n\t\tselections: Selection[],\n\t): CompositionOutcome[] | null {\n\t\tif (!this._original) {\n\t\t\treturn null;\n\t\t}\n\t\tconst current = CompositionState._capture(textModel, selections);\n\t\tif (!current) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this._original.length !== current.length) {\n\t\t\treturn null;\n\t\t}\n\t\tconst result: CompositionOutcome[] = [];\n\t\tfor (let i = 0, len = this._original.length; i < len; i++) {\n\t\t\tresult.push(\n\t\t\t\tCompositionState._deduceOutcome(this._original[i], current[i]),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _deduceOutcome(\n\t\toriginal: CompositionLineState,\n\t\tcurrent: CompositionLineState,\n\t): CompositionOutcome {\n\t\tconst commonPrefix = Math.min(\n\t\t\toriginal.startSelection,\n\t\t\tcurrent.startSelection,\n\t\t\tstrings.commonPrefixLength(original.text, current.text),\n\t\t);\n\t\tconst commonSuffix = Math.min(\n\t\t\toriginal.text.length - original.endSelection,\n\t\t\tcurrent.text.length - current.endSelection,\n\t\t\tstrings.commonSuffixLength(original.text, current.text),\n\t\t);\n\t\tconst deletedText = original.text.substring(\n\t\t\tcommonPrefix,\n\t\t\toriginal.text.length - commonSuffix,\n\t\t);\n\t\tconst insertedText = current.text.substring(\n\t\t\tcommonPrefix,\n\t\t\tcurrent.text.length - commonSuffix,\n\t\t);\n\t\treturn new CompositionOutcome(\n\t\t\tdeletedText,\n\t\t\toriginal.startSelection - commonPrefix,\n\t\t\toriginal.endSelection - commonPrefix,\n\t\t\tinsertedText,\n\t\t\tcurrent.startSelection - commonPrefix,\n\t\t\tcurrent.endSelection - commonPrefix,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["selections"]
}
