{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorCollection } from './cursorCollection.js';\nimport { CursorConfiguration, CursorState, EditOperationResult, EditOperationType, IColumnSelectData, PartialCursorState, ICursorSimpleModel } from '../cursorCommon.js';\nimport { CursorContext } from './cursorContext.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { CursorChangeReason } from '../cursorEvents.js';\nimport { CompositionOutcome, TypeOperations } from './cursorTypeOperations.js';\nimport { BaseTypeWithAutoClosingCommand } from './cursorTypeEditOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range, IRange } from '../core/range.js';\nimport { ISelection, Selection, SelectionDirection } from '../core/selection.js';\nimport * as editorCommon from '../editorCommon.js';\nimport { ITextModel, TrackedRangeStickiness, IModelDeltaDecoration, ICursorStateComputer, IIdentifiedSingleEditOperation, IValidEditOperation } from '../model.js';\nimport { RawContentChangedType, ModelInjectedTextChangedEvent, InternalModelContentChangeEvent } from '../textModelEvents.js';\nimport { VerticalRevealType, ViewCursorStateChangedEvent, ViewRevealRangeRequestEvent } from '../viewEvents.js';\nimport { dispose, Disposable } from '../../../base/common/lifecycle.js';\nimport { ICoordinatesConverter } from '../viewModel.js';\nimport { CursorStateChangedEvent, ViewModelEventsCollector } from '../viewModelEventDispatcher.js';\n\nexport class CursorsController extends Disposable {\n\n\tprivate readonly _model: ITextModel;\n\tprivate _knownModelVersionId: number;\n\tprivate readonly _viewModel: ICursorSimpleModel;\n\tprivate readonly _coordinatesConverter: ICoordinatesConverter;\n\tpublic context: CursorContext;\n\tprivate _cursors: CursorCollection;\n\n\tprivate _hasFocus: boolean;\n\tprivate _isHandling: boolean;\n\tprivate _compositionState: CompositionState | null;\n\tprivate _columnSelectData: IColumnSelectData | null;\n\tprivate _autoClosedActions: AutoClosedAction[];\n\tprivate _prevEditOperationType: EditOperationType;\n\n\tconstructor(model: ITextModel, viewModel: ICursorSimpleModel, coordinatesConverter: ICoordinatesConverter, cursorConfig: CursorConfiguration) {\n\t\tsuper();\n\t\tthis._model = model;\n\t\tthis._knownModelVersionId = this._model.getVersionId();\n\t\tthis._viewModel = viewModel;\n\t\tthis._coordinatesConverter = coordinatesConverter;\n\t\tthis.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n\t\tthis._cursors = new CursorCollection(this.context);\n\n\t\tthis._hasFocus = false;\n\t\tthis._isHandling = false;\n\t\tthis._compositionState = null;\n\t\tthis._columnSelectData = null;\n\t\tthis._autoClosedActions = [];\n\t\tthis._prevEditOperationType = EditOperationType.Other;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._cursors.dispose();\n\t\tthis._autoClosedActions = dispose(this._autoClosedActions);\n\t\tsuper.dispose();\n\t}\n\n\tpublic updateConfiguration(cursorConfig: CursorConfiguration): void {\n\t\tthis.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n\t\tthis._cursors.updateContext(this.context);\n\t}\n\n\tpublic onLineMappingChanged(eventsCollector: ViewModelEventsCollector): void {\n\t\tif (this._knownModelVersionId !== this._model.getVersionId()) {\n\t\t\t// There are model change events that I didn't yet receive.\n\t\t\t//\n\t\t\t// This can happen when editing the model, and the view model receives the change events first,\n\t\t\t// and the view model emits line mapping changed events, all before the cursor gets a chance to\n\t\t\t// recover from markers.\n\t\t\t//\n\t\t\t// The model change listener above will be called soon and we'll ensure a valid cursor state there.\n\t\t\treturn;\n\t\t}\n\t\t// Ensure valid state\n\t\tthis.setStates(eventsCollector, 'viewModel', CursorChangeReason.NotSet, this.getCursorStates());\n\t}\n\n\tpublic setHasFocus(hasFocus: boolean): void {\n\t\tthis._hasFocus = hasFocus;\n\t}\n\n\tprivate _validateAutoClosedActions(): void {\n\t\tif (this._autoClosedActions.length > 0) {\n\t\t\tconst selections: Range[] = this._cursors.getSelections();\n\t\t\tfor (let i = 0; i < this._autoClosedActions.length; i++) {\n\t\t\t\tconst autoClosedAction = this._autoClosedActions[i];\n\t\t\t\tif (!autoClosedAction.isValid(selections)) {\n\t\t\t\t\tautoClosedAction.dispose();\n\t\t\t\t\tthis._autoClosedActions.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// ------ some getters/setters\n\n\tpublic getPrimaryCursorState(): CursorState {\n\t\treturn this._cursors.getPrimaryCursor();\n\t}\n\n\tpublic getLastAddedCursorIndex(): number {\n\t\treturn this._cursors.getLastAddedCursorIndex();\n\t}\n\n\tpublic getCursorStates(): CursorState[] {\n\t\treturn this._cursors.getAll();\n\t}\n\n\tpublic setStates(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean {\n\t\tlet reachedMaxCursorCount = false;\n\t\tconst multiCursorLimit = this.context.cursorConfig.multiCursorLimit;\n\t\tif (states !== null && states.length > multiCursorLimit) {\n\t\t\tstates = states.slice(0, multiCursorLimit);\n\t\t\treachedMaxCursorCount = true;\n\t\t}\n\n\t\tconst oldState = CursorModelState.from(this._model, this);\n\n\t\tthis._cursors.setStates(states);\n\t\tthis._cursors.normalize();\n\t\tthis._columnSelectData = null;\n\n\t\tthis._validateAutoClosedActions();\n\n\t\treturn this._emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount);\n\t}\n\n\tpublic setCursorColumnSelectData(columnSelectData: IColumnSelectData): void {\n\t\tthis._columnSelectData = columnSelectData;\n\t}\n\n\tpublic revealAll(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, minimalReveal: boolean, verticalType: VerticalRevealType, revealHorizontal: boolean, scrollType: editorCommon.ScrollType): void {\n\t\tconst viewPositions = this._cursors.getViewPositions();\n\n\t\tlet revealViewRange: Range | null = null;\n\t\tlet revealViewSelections: Selection[] | null = null;\n\t\tif (viewPositions.length > 1) {\n\t\t\trevealViewSelections = this._cursors.getViewSelections();\n\t\t} else {\n\t\t\trevealViewRange = Range.fromPositions(viewPositions[0], viewPositions[0]);\n\t\t}\n\n\t\teventsCollector.emitViewEvent(new ViewRevealRangeRequestEvent(source, minimalReveal, revealViewRange, revealViewSelections, verticalType, revealHorizontal, scrollType));\n\t}\n\n\tpublic revealPrimary(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, minimalReveal: boolean, verticalType: VerticalRevealType, revealHorizontal: boolean, scrollType: editorCommon.ScrollType): void {\n\t\tconst primaryCursor = this._cursors.getPrimaryCursor();\n\t\tconst revealViewSelections = [primaryCursor.viewState.selection];\n\t\teventsCollector.emitViewEvent(new ViewRevealRangeRequestEvent(source, minimalReveal, null, revealViewSelections, verticalType, revealHorizontal, scrollType));\n\t}\n\n\tpublic saveState(): editorCommon.ICursorState[] {\n\n\t\tconst result: editorCommon.ICursorState[] = [];\n\n\t\tconst selections = this._cursors.getSelections();\n\t\tfor (let i = 0, len = selections.length; i < len; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tresult.push({\n\t\t\t\tinSelectionMode: !selection.isEmpty(),\n\t\t\t\tselectionStart: {\n\t\t\t\t\tlineNumber: selection.selectionStartLineNumber,\n\t\t\t\t\tcolumn: selection.selectionStartColumn,\n\t\t\t\t},\n\t\t\t\tposition: {\n\t\t\t\t\tlineNumber: selection.positionLineNumber,\n\t\t\t\t\tcolumn: selection.positionColumn,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic restoreState(eventsCollector: ViewModelEventsCollector, states: editorCommon.ICursorState[]): void {\n\n\t\tconst desiredSelections: ISelection[] = [];\n\n\t\tfor (let i = 0, len = states.length; i < len; i++) {\n\t\t\tconst state = states[i];\n\n\t\t\tlet positionLineNumber = 1;\n\t\t\tlet positionColumn = 1;\n\n\t\t\t// Avoid missing properties on the literal\n\t\t\tif (state.position && state.position.lineNumber) {\n\t\t\t\tpositionLineNumber = state.position.lineNumber;\n\t\t\t}\n\t\t\tif (state.position && state.position.column) {\n\t\t\t\tpositionColumn = state.position.column;\n\t\t\t}\n\n\t\t\tlet selectionStartLineNumber = positionLineNumber;\n\t\t\tlet selectionStartColumn = positionColumn;\n\n\t\t\t// Avoid missing properties on the literal\n\t\t\tif (state.selectionStart && state.selectionStart.lineNumber) {\n\t\t\t\tselectionStartLineNumber = state.selectionStart.lineNumber;\n\t\t\t}\n\t\t\tif (state.selectionStart && state.selectionStart.column) {\n\t\t\t\tselectionStartColumn = state.selectionStart.column;\n\t\t\t}\n\n\t\t\tdesiredSelections.push({\n\t\t\t\tselectionStartLineNumber: selectionStartLineNumber,\n\t\t\t\tselectionStartColumn: selectionStartColumn,\n\t\t\t\tpositionLineNumber: positionLineNumber,\n\t\t\t\tpositionColumn: positionColumn\n\t\t\t});\n\t\t}\n\n\t\tthis.setStates(eventsCollector, 'restoreState', CursorChangeReason.NotSet, CursorState.fromModelSelections(desiredSelections));\n\t\tthis.revealAll(eventsCollector, 'restoreState', false, VerticalRevealType.Simple, true, editorCommon.ScrollType.Immediate);\n\t}\n\n\tpublic onModelContentChanged(eventsCollector: ViewModelEventsCollector, event: InternalModelContentChangeEvent | ModelInjectedTextChangedEvent): void {\n\t\tif (event instanceof ModelInjectedTextChangedEvent) {\n\t\t\t// If injected texts change, the view positions of all cursors need to be updated.\n\t\t\tif (this._isHandling) {\n\t\t\t\t// The view positions will be updated when handling finishes\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// setStates might remove markers, which could trigger a decoration change.\n\t\t\t// If there are injected text decorations for that line, `onModelContentChanged` is emitted again\n\t\t\t// and an endless recursion happens.\n\t\t\t// _isHandling prevents that.\n\t\t\tthis._isHandling = true;\n\t\t\ttry {\n\t\t\t\tthis.setStates(eventsCollector, 'modelChange', CursorChangeReason.NotSet, this.getCursorStates());\n\t\t\t} finally {\n\t\t\t\tthis._isHandling = false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst e = event.rawContentChangedEvent;\n\t\t\tthis._knownModelVersionId = e.versionId;\n\t\t\tif (this._isHandling) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hadFlushEvent = e.containsEvent(RawContentChangedType.Flush);\n\t\t\tthis._prevEditOperationType = EditOperationType.Other;\n\n\t\t\tif (hadFlushEvent) {\n\t\t\t\t// a model.setValue() was called\n\t\t\t\tthis._cursors.dispose();\n\t\t\t\tthis._cursors = new CursorCollection(this.context);\n\t\t\t\tthis._validateAutoClosedActions();\n\t\t\t\tthis._emitStateChangedIfNecessary(eventsCollector, 'model', CursorChangeReason.ContentFlush, null, false);\n\t\t\t} else {\n\t\t\t\tif (this._hasFocus && e.resultingSelection && e.resultingSelection.length > 0) {\n\t\t\t\t\tconst cursorState = CursorState.fromModelSelections(e.resultingSelection);\n\t\t\t\t\tif (this.setStates(eventsCollector, 'modelChange', e.isUndoing ? CursorChangeReason.Undo : e.isRedoing ? CursorChangeReason.Redo : CursorChangeReason.RecoverFromMarkers, cursorState)) {\n\t\t\t\t\t\tthis.revealAll(eventsCollector, 'modelChange', false, VerticalRevealType.Simple, true, editorCommon.ScrollType.Smooth);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\n\t\t\t\t\tthis.setStates(eventsCollector, 'modelChange', CursorChangeReason.RecoverFromMarkers, CursorState.fromModelSelections(selectionsFromMarkers));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getSelection(): Selection {\n\t\treturn this._cursors.getPrimaryCursor().modelState.selection;\n\t}\n\n\tpublic getTopMostViewPosition(): Position {\n\t\treturn this._cursors.getTopMostViewPosition();\n\t}\n\n\tpublic getBottomMostViewPosition(): Position {\n\t\treturn this._cursors.getBottomMostViewPosition();\n\t}\n\n\tpublic getCursorColumnSelectData(): IColumnSelectData {\n\t\tif (this._columnSelectData) {\n\t\t\treturn this._columnSelectData;\n\t\t}\n\t\tconst primaryCursor = this._cursors.getPrimaryCursor();\n\t\tconst viewSelectionStart = primaryCursor.viewState.selectionStart.getStartPosition();\n\t\tconst viewPosition = primaryCursor.viewState.position;\n\t\treturn {\n\t\t\tisReal: false,\n\t\t\tfromViewLineNumber: viewSelectionStart.lineNumber,\n\t\t\tfromViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewSelectionStart),\n\t\t\ttoViewLineNumber: viewPosition.lineNumber,\n\t\t\ttoViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewPosition),\n\t\t};\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\treturn this._cursors.getSelections();\n\t}\n\n\tpublic getPosition(): Position {\n\t\treturn this._cursors.getPrimaryCursor().modelState.position;\n\t}\n\n\tpublic setSelections(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, selections: readonly ISelection[], reason: CursorChangeReason): void {\n\t\tthis.setStates(eventsCollector, source, reason, CursorState.fromModelSelections(selections));\n\t}\n\n\tpublic getPrevEditOperationType(): EditOperationType {\n\t\treturn this._prevEditOperationType;\n\t}\n\n\tpublic setPrevEditOperationType(type: EditOperationType): void {\n\t\tthis._prevEditOperationType = type;\n\t}\n\n\t// ------ auxiliary handling logic\n\n\tprivate _pushAutoClosedAction(autoClosedCharactersRanges: Range[], autoClosedEnclosingRanges: Range[]): void {\n\t\tconst autoClosedCharactersDeltaDecorations: IModelDeltaDecoration[] = [];\n\t\tconst autoClosedEnclosingDeltaDecorations: IModelDeltaDecoration[] = [];\n\n\t\tfor (let i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n\t\t\tautoClosedCharactersDeltaDecorations.push({\n\t\t\t\trange: autoClosedCharactersRanges[i],\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'auto-closed-character',\n\t\t\t\t\tinlineClassName: 'auto-closed-character',\n\t\t\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\n\t\t\t\t}\n\t\t\t});\n\t\t\tautoClosedEnclosingDeltaDecorations.push({\n\t\t\t\trange: autoClosedEnclosingRanges[i],\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'auto-closed-enclosing',\n\t\t\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\n\t\tconst autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\n\t\tthis._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\n\t}\n\n\tprivate _executeEditOperation(opResult: EditOperationResult | null): void {\n\n\t\tif (!opResult) {\n\t\t\t// Nothing to execute\n\t\t\treturn;\n\t\t}\n\n\t\tif (opResult.shouldPushStackElementBefore) {\n\t\t\tthis._model.pushStackElement();\n\t\t}\n\n\t\tconst result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\n\t\tif (result) {\n\t\t\t// The commands were applied correctly\n\t\t\tthis._interpretCommandResult(result);\n\n\t\t\t// Check for auto-closing closed characters\n\t\t\tconst autoClosedCharactersRanges: Range[] = [];\n\t\t\tconst autoClosedEnclosingRanges: Range[] = [];\n\n\t\t\tfor (let i = 0; i < opResult.commands.length; i++) {\n\t\t\t\tconst command = opResult.commands[i];\n\t\t\t\tif (command instanceof BaseTypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\n\t\t\t\t\tautoClosedCharactersRanges.push(command.closeCharacterRange);\n\t\t\t\t\tautoClosedEnclosingRanges.push(command.enclosingRange);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (autoClosedCharactersRanges.length > 0) {\n\t\t\t\tthis._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n\t\t\t}\n\n\t\t\tthis._prevEditOperationType = opResult.type;\n\t\t}\n\n\t\tif (opResult.shouldPushStackElementAfter) {\n\t\t\tthis._model.pushStackElement();\n\t\t}\n\t}\n\n\tprivate _interpretCommandResult(cursorState: Selection[] | null): void {\n\t\tif (!cursorState || cursorState.length === 0) {\n\t\t\tcursorState = this._cursors.readSelectionFromMarkers();\n\t\t}\n\n\t\tthis._columnSelectData = null;\n\t\tthis._cursors.setSelections(cursorState);\n\t\tthis._cursors.normalize();\n\t}\n\n\t// -----------------------------------------------------------------------------------------------------------\n\t// ----- emitting events\n\n\tprivate _emitStateChangedIfNecessary(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, reason: CursorChangeReason, oldState: CursorModelState | null, reachedMaxCursorCount: boolean): boolean {\n\t\tconst newState = CursorModelState.from(this._model, this);\n\t\tif (newState.equals(oldState)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selections = this._cursors.getSelections();\n\t\tconst viewSelections = this._cursors.getViewSelections();\n\n\t\t// Let the view get the event first.\n\t\teventsCollector.emitViewEvent(new ViewCursorStateChangedEvent(viewSelections, selections, reason));\n\n\t\t// Only after the view has been notified, let the rest of the world know...\n\t\tif (!oldState\n\t\t\t|| oldState.cursorState.length !== newState.cursorState.length\n\t\t\t|| newState.cursorState.some((newCursorState, i) => !newCursorState.modelState.equals(oldState.cursorState[i].modelState))\n\t\t) {\n\t\t\tconst oldSelections = oldState ? oldState.cursorState.map(s => s.modelState.selection) : null;\n\t\t\tconst oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n\t\t\teventsCollector.emitOutgoingEvent(new CursorStateChangedEvent(oldSelections, selections, oldModelVersionId, newState.modelVersionId, source || 'keyboard', reason, reachedMaxCursorCount));\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// -----------------------------------------------------------------------------------------------------------\n\t// ----- handlers beyond this point\n\n\tprivate _findAutoClosingPairs(edits: IIdentifiedSingleEditOperation[]): [number, number][] | null {\n\t\tif (!edits.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst indices: [number, number][] = [];\n\t\tfor (let i = 0, len = edits.length; i < len; i++) {\n\t\t\tconst edit = edits[i];\n\t\t\tif (!edit.text || edit.text.indexOf('\\n') >= 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n\t\t\tif (!m) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst closeChar = m[1];\n\n\t\t\tconst autoClosingPairsCandidates = this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(closeChar);\n\t\t\tif (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst openChar = autoClosingPairsCandidates[0].open;\n\t\t\tconst closeCharIndex = edit.text.length - m[2].length - 1;\n\t\t\tconst openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\n\t\t\tif (openCharIndex === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tindices.push([openCharIndex, closeCharIndex]);\n\t\t}\n\n\t\treturn indices;\n\t}\n\n\tpublic executeEdits(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): void {\n\t\tlet autoClosingIndices: [number, number][] | null = null;\n\t\tif (source === 'snippet') {\n\t\t\tautoClosingIndices = this._findAutoClosingPairs(edits);\n\t\t}\n\n\t\tif (autoClosingIndices) {\n\t\t\tedits[0]._isTracked = true;\n\t\t}\n\t\tconst autoClosedCharactersRanges: Range[] = [];\n\t\tconst autoClosedEnclosingRanges: Range[] = [];\n\t\tconst selections = this._model.pushEditOperations(this.getSelections(), edits, (undoEdits) => {\n\t\t\tif (autoClosingIndices) {\n\t\t\t\tfor (let i = 0, len = autoClosingIndices.length; i < len; i++) {\n\t\t\t\t\tconst [openCharInnerIndex, closeCharInnerIndex] = autoClosingIndices[i];\n\t\t\t\t\tconst undoEdit = undoEdits[i];\n\t\t\t\t\tconst lineNumber = undoEdit.range.startLineNumber;\n\t\t\t\t\tconst openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\n\t\t\t\t\tconst closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\n\n\t\t\t\t\tautoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\n\t\t\t\t\tautoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst selections = cursorStateComputer(undoEdits);\n\t\t\tif (selections) {\n\t\t\t\t// Don't recover the selection from markers because\n\t\t\t\t// we know what it should be.\n\t\t\t\tthis._isHandling = true;\n\t\t\t}\n\n\t\t\treturn selections;\n\t\t});\n\t\tif (selections) {\n\t\t\tthis._isHandling = false;\n\t\t\tthis.setSelections(eventsCollector, source, selections, CursorChangeReason.NotSet);\n\t\t}\n\t\tif (autoClosedCharactersRanges.length > 0) {\n\t\t\tthis._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n\t\t}\n\t}\n\n\tprivate _executeEdit(callback: () => void, eventsCollector: ViewModelEventsCollector, source: string | null | undefined, cursorChangeReason: CursorChangeReason = CursorChangeReason.NotSet): void {\n\t\tif (this.context.cursorConfig.readOnly) {\n\t\t\t// we cannot edit when read only...\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldState = CursorModelState.from(this._model, this);\n\t\tthis._cursors.stopTrackingSelections();\n\t\tthis._isHandling = true;\n\n\t\ttry {\n\t\t\tthis._cursors.ensureValidState();\n\t\t\tcallback();\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\n\t\tthis._isHandling = false;\n\t\tthis._cursors.startTrackingSelections();\n\t\tthis._validateAutoClosedActions();\n\t\tif (this._emitStateChangedIfNecessary(eventsCollector, source, cursorChangeReason, oldState, false)) {\n\t\t\tthis.revealAll(eventsCollector, source, false, VerticalRevealType.Simple, true, editorCommon.ScrollType.Smooth);\n\t\t}\n\t}\n\n\tpublic getAutoClosedCharacters(): Range[] {\n\t\treturn AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n\t}\n\n\tpublic startComposition(eventsCollector: ViewModelEventsCollector): void {\n\t\tthis._compositionState = new CompositionState(this._model, this.getSelections());\n\t}\n\n\tpublic endComposition(eventsCollector: ViewModelEventsCollector, source?: string | null | undefined): void {\n\t\tconst compositionOutcome = this._compositionState ? this._compositionState.deduceOutcome(this._model, this.getSelections()) : null;\n\t\tthis._compositionState = null;\n\n\t\tthis._executeEdit(() => {\n\t\t\tif (source === 'keyboard') {\n\t\t\t\t// composition finishes, let's check if we need to auto complete if necessary.\n\t\t\t\tthis._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, compositionOutcome, this.getSelections(), this.getAutoClosedCharacters()));\n\t\t\t}\n\t\t}, eventsCollector, source);\n\t}\n\n\tpublic type(eventsCollector: ViewModelEventsCollector, text: string, source?: string | null | undefined): void {\n\t\tthis._executeEdit(() => {\n\t\t\tif (source === 'keyboard') {\n\t\t\t\t// If this event is coming straight from the keyboard, look for electric characters and enter\n\n\t\t\t\tconst len = text.length;\n\t\t\t\tlet offset = 0;\n\t\t\t\twhile (offset < len) {\n\t\t\t\t\tconst charLength = strings.nextCharLength(text, offset);\n\t\t\t\t\tconst chr = text.substr(offset, charLength);\n\n\t\t\t\t\t// Here we must interpret each typed character individually\n\t\t\t\t\tthis._executeEditOperation(TypeOperations.typeWithInterceptors(!!this._compositionState, this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), this.getAutoClosedCharacters(), chr));\n\n\t\t\t\t\toffset += charLength;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tthis._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text));\n\t\t\t}\n\t\t}, eventsCollector, source);\n\t}\n\n\tpublic compositionType(eventsCollector: ViewModelEventsCollector, text: string, replacePrevCharCnt: number, replaceNextCharCnt: number, positionDelta: number, source?: string | null | undefined): void {\n\t\tif (text.length === 0 && replacePrevCharCnt === 0 && replaceNextCharCnt === 0) {\n\t\t\t// this edit is a no-op\n\t\t\tif (positionDelta !== 0) {\n\t\t\t\t// but it still wants to move the cursor\n\t\t\t\tconst newSelections = this.getSelections().map(selection => {\n\t\t\t\t\tconst position = selection.getPosition();\n\t\t\t\t\treturn new Selection(position.lineNumber, position.column + positionDelta, position.lineNumber, position.column + positionDelta);\n\t\t\t\t});\n\t\t\t\tthis.setSelections(eventsCollector, source, newSelections, CursorChangeReason.NotSet);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._executeEdit(() => {\n\t\t\tthis._executeEditOperation(TypeOperations.compositionType(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n\t\t}, eventsCollector, source);\n\t}\n\n\tpublic paste(eventsCollector: ViewModelEventsCollector, text: string, pasteOnNewLine: boolean, multicursorText?: string[] | null | undefined, source?: string | null | undefined): void {\n\t\tthis._executeEdit(() => {\n\t\t\tthis._executeEditOperation(TypeOperations.paste(this.context.cursorConfig, this._model, this.getSelections(), text, pasteOnNewLine, multicursorText || []));\n\t\t}, eventsCollector, source, CursorChangeReason.Paste);\n\t}\n\n\tpublic cut(eventsCollector: ViewModelEventsCollector, source?: string | null | undefined): void {\n\t\tthis._executeEdit(() => {\n\t\t\tthis._executeEditOperation(DeleteOperations.cut(this.context.cursorConfig, this._model, this.getSelections()));\n\t\t}, eventsCollector, source);\n\t}\n\n\tpublic executeCommand(eventsCollector: ViewModelEventsCollector, command: editorCommon.ICommand, source?: string | null | undefined): void {\n\t\tthis._executeEdit(() => {\n\t\t\tthis._cursors.killSecondaryCursors();\n\n\t\t\tthis._executeEditOperation(new EditOperationResult(EditOperationType.Other, [command], {\n\t\t\t\tshouldPushStackElementBefore: false,\n\t\t\t\tshouldPushStackElementAfter: false\n\t\t\t}));\n\t\t}, eventsCollector, source);\n\t}\n\n\tpublic executeCommands(eventsCollector: ViewModelEventsCollector, commands: editorCommon.ICommand[], source?: string | null | undefined): void {\n\t\tthis._executeEdit(() => {\n\t\t\tthis._executeEditOperation(new EditOperationResult(EditOperationType.Other, commands, {\n\t\t\t\tshouldPushStackElementBefore: false,\n\t\t\t\tshouldPushStackElementAfter: false\n\t\t\t}));\n\t\t}, eventsCollector, source);\n\t}\n}\n\n/**\n * A snapshot of the cursor and the model state\n */\nclass CursorModelState {\n\tpublic static from(model: ITextModel, cursor: CursorsController): CursorModelState {\n\t\treturn new CursorModelState(model.getVersionId(), cursor.getCursorStates());\n\t}\n\n\tconstructor(\n\t\tpublic readonly modelVersionId: number,\n\t\tpublic readonly cursorState: CursorState[],\n\t) {\n\t}\n\n\tpublic equals(other: CursorModelState | null): boolean {\n\t\tif (!other) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.modelVersionId !== other.modelVersionId) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.cursorState.length !== other.cursorState.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = this.cursorState.length; i < len; i++) {\n\t\t\tif (!this.cursorState[i].equals(other.cursorState[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass AutoClosedAction {\n\n\tpublic static getAllAutoClosedCharacters(autoClosedActions: AutoClosedAction[]): Range[] {\n\t\tlet autoClosedCharacters: Range[] = [];\n\t\tfor (const autoClosedAction of autoClosedActions) {\n\t\t\tautoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\n\t\t}\n\t\treturn autoClosedCharacters;\n\t}\n\n\tprivate readonly _model: ITextModel;\n\n\tprivate _autoClosedCharactersDecorations: string[];\n\tprivate _autoClosedEnclosingDecorations: string[];\n\n\tconstructor(model: ITextModel, autoClosedCharactersDecorations: string[], autoClosedEnclosingDecorations: string[]) {\n\t\tthis._model = model;\n\t\tthis._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n\t\tthis._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\n\t\tthis._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\n\t}\n\n\tpublic getAutoClosedCharactersRanges(): Range[] {\n\t\tconst result: Range[] = [];\n\t\tfor (let i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n\t\t\tconst decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\n\t\t\tif (decorationRange) {\n\t\t\t\tresult.push(decorationRange);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic isValid(selections: Range[]): boolean {\n\t\tconst enclosingRanges: Range[] = [];\n\t\tfor (let i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n\t\t\tconst decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\n\t\t\tif (decorationRange) {\n\t\t\t\tenclosingRanges.push(decorationRange);\n\t\t\t\tif (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\n\t\t\t\t\t// Stop tracking if the range becomes multiline...\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tenclosingRanges.sort(Range.compareRangesUsingStarts);\n\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (let i = 0; i < selections.length; i++) {\n\t\t\tif (i >= enclosingRanges.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!enclosingRanges[i].strictContainsRange(selections[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\ninterface IExecContext {\n\treadonly model: ITextModel;\n\treadonly selectionsBefore: Selection[];\n\treadonly trackedRanges: string[];\n\treadonly trackedRangesDirection: SelectionDirection[];\n}\n\ninterface ICommandData {\n\toperations: IIdentifiedSingleEditOperation[];\n\thadTrackedEditOperation: boolean;\n}\n\ninterface ICommandsData {\n\toperations: IIdentifiedSingleEditOperation[];\n\thadTrackedEditOperation: boolean;\n}\n\nexport class CommandExecutor {\n\n\tpublic static executeCommands(model: ITextModel, selectionsBefore: Selection[], commands: (editorCommon.ICommand | null)[]): Selection[] | null {\n\n\t\tconst ctx: IExecContext = {\n\t\t\tmodel: model,\n\t\t\tselectionsBefore: selectionsBefore,\n\t\t\ttrackedRanges: [],\n\t\t\ttrackedRangesDirection: []\n\t\t};\n\n\t\tconst result = this._innerExecuteCommands(ctx, commands);\n\n\t\tfor (let i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n\t\t\tctx.model._setTrackedRange(ctx.trackedRanges[i], null, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _innerExecuteCommands(ctx: IExecContext, commands: (editorCommon.ICommand | null)[]): Selection[] | null {\n\n\t\tif (this._arrayIsEmpty(commands)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst commandsData = this._getEditOperations(ctx, commands);\n\t\tif (commandsData.operations.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst rawOperations = commandsData.operations;\n\n\t\tconst loserCursorsMap = this._getLoserCursorMap(rawOperations);\n\t\tif (loserCursorsMap.hasOwnProperty('0')) {\n\t\t\t// These commands are very messed up\n\t\t\tconsole.warn('Ignoring commands');\n\t\t\treturn null;\n\t\t}\n\n\t\t// Remove operations belonging to losing cursors\n\t\tconst filteredOperations: IIdentifiedSingleEditOperation[] = [];\n\t\tfor (let i = 0, len = rawOperations.length; i < len; i++) {\n\t\t\tif (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier!.major.toString())) {\n\t\t\t\tfilteredOperations.push(rawOperations[i]);\n\t\t\t}\n\t\t}\n\n\t\t// TODO@Alex: find a better way to do this.\n\t\t// give the hint that edit operations are tracked to the model\n\t\tif (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\n\t\t\tfilteredOperations[0]._isTracked = true;\n\t\t}\n\t\tlet selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, (inverseEditOperations: IValidEditOperation[]): Selection[] => {\n\t\t\tconst groupedInverseEditOperations: IValidEditOperation[][] = [];\n\t\t\tfor (let i = 0; i < ctx.selectionsBefore.length; i++) {\n\t\t\t\tgroupedInverseEditOperations[i] = [];\n\t\t\t}\n\t\t\tfor (const op of inverseEditOperations) {\n\t\t\t\tif (!op.identifier) {\n\t\t\t\t\t// perhaps auto whitespace trim edits\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tgroupedInverseEditOperations[op.identifier.major].push(op);\n\t\t\t}\n\t\t\tconst minorBasedSorter = (a: IValidEditOperation, b: IValidEditOperation) => {\n\t\t\t\treturn a.identifier!.minor - b.identifier!.minor;\n\t\t\t};\n\t\t\tconst cursorSelections: Selection[] = [];\n\t\t\tfor (let i = 0; i < ctx.selectionsBefore.length; i++) {\n\t\t\t\tif (groupedInverseEditOperations[i].length > 0) {\n\t\t\t\t\tgroupedInverseEditOperations[i].sort(minorBasedSorter);\n\t\t\t\t\tcursorSelections[i] = commands[i]!.computeCursorState(ctx.model, {\n\t\t\t\t\t\tgetInverseEditOperations: () => {\n\t\t\t\t\t\t\treturn groupedInverseEditOperations[i];\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tgetTrackedSelection: (id: string) => {\n\t\t\t\t\t\t\tconst idx = parseInt(id, 10);\n\t\t\t\t\t\t\tconst range = ctx.model._getTrackedRange(ctx.trackedRanges[idx])!;\n\t\t\t\t\t\t\tif (ctx.trackedRangesDirection[idx] === SelectionDirection.LTR) {\n\t\t\t\t\t\t\t\treturn new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcursorSelections[i] = ctx.selectionsBefore[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cursorSelections;\n\t\t});\n\t\tif (!selectionsAfter) {\n\t\t\tselectionsAfter = ctx.selectionsBefore;\n\t\t}\n\n\t\t// Extract losing cursors\n\t\tconst losingCursors: number[] = [];\n\t\tfor (const losingCursorIndex in loserCursorsMap) {\n\t\t\tif (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n\t\t\t\tlosingCursors.push(parseInt(losingCursorIndex, 10));\n\t\t\t}\n\t\t}\n\n\t\t// Sort losing cursors descending\n\t\tlosingCursors.sort((a: number, b: number): number => {\n\t\t\treturn b - a;\n\t\t});\n\n\t\t// Remove losing cursors\n\t\tfor (const losingCursor of losingCursors) {\n\t\t\tselectionsAfter.splice(losingCursor, 1);\n\t\t}\n\n\t\treturn selectionsAfter;\n\t}\n\n\tprivate static _arrayIsEmpty(commands: (editorCommon.ICommand | null)[]): boolean {\n\t\tfor (let i = 0, len = commands.length; i < len; i++) {\n\t\t\tif (commands[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static _getEditOperations(ctx: IExecContext, commands: (editorCommon.ICommand | null)[]): ICommandsData {\n\t\tlet operations: IIdentifiedSingleEditOperation[] = [];\n\t\tlet hadTrackedEditOperation: boolean = false;\n\n\t\tfor (let i = 0, len = commands.length; i < len; i++) {\n\t\t\tconst command = commands[i];\n\t\t\tif (command) {\n\t\t\t\tconst r = this._getEditOperationsFromCommand(ctx, i, command);\n\t\t\t\toperations = operations.concat(r.operations);\n\t\t\t\thadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\toperations: operations,\n\t\t\thadTrackedEditOperation: hadTrackedEditOperation\n\t\t};\n\t}\n\n\tprivate static _getEditOperationsFromCommand(ctx: IExecContext, majorIdentifier: number, command: editorCommon.ICommand): ICommandData {\n\t\t// This method acts as a transaction, if the command fails\n\t\t// everything it has done is ignored\n\t\tconst operations: IIdentifiedSingleEditOperation[] = [];\n\t\tlet operationMinor = 0;\n\n\t\tconst addEditOperation = (range: IRange, text: string | null, forceMoveMarkers: boolean = false) => {\n\t\t\tif (Range.isEmpty(range) && text === '') {\n\t\t\t\t// This command wants to add a no-op => no thank you\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toperations.push({\n\t\t\t\tidentifier: {\n\t\t\t\t\tmajor: majorIdentifier,\n\t\t\t\t\tminor: operationMinor++\n\t\t\t\t},\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers,\n\t\t\t\tisAutoWhitespaceEdit: command.insertsAutoWhitespace\n\t\t\t});\n\t\t};\n\n\t\tlet hadTrackedEditOperation = false;\n\t\tconst addTrackedEditOperation = (selection: IRange, text: string | null, forceMoveMarkers?: boolean) => {\n\t\t\thadTrackedEditOperation = true;\n\t\t\taddEditOperation(selection, text, forceMoveMarkers);\n\t\t};\n\n\t\tconst trackSelection = (_selection: ISelection, trackPreviousOnEmpty?: boolean) => {\n\t\t\tconst selection = Selection.liftSelection(_selection);\n\t\t\tlet stickiness: TrackedRangeStickiness;\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tif (typeof trackPreviousOnEmpty === 'boolean') {\n\t\t\t\t\tif (trackPreviousOnEmpty) {\n\t\t\t\t\t\tstickiness = TrackedRangeStickiness.GrowsOnlyWhenTypingBefore;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstickiness = TrackedRangeStickiness.GrowsOnlyWhenTypingAfter;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Try to lock it with surrounding text\n\t\t\t\t\tconst maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\n\t\t\t\t\tif (selection.startColumn === maxLineColumn) {\n\t\t\t\t\t\tstickiness = TrackedRangeStickiness.GrowsOnlyWhenTypingBefore;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstickiness = TrackedRangeStickiness.GrowsOnlyWhenTypingAfter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\t\t\t}\n\n\t\t\tconst l = ctx.trackedRanges.length;\n\t\t\tconst id = ctx.model._setTrackedRange(null, selection, stickiness);\n\t\t\tctx.trackedRanges[l] = id;\n\t\t\tctx.trackedRangesDirection[l] = selection.getDirection();\n\t\t\treturn l.toString();\n\t\t};\n\n\t\tconst editOperationBuilder: editorCommon.IEditOperationBuilder = {\n\t\t\taddEditOperation: addEditOperation,\n\t\t\taddTrackedEditOperation: addTrackedEditOperation,\n\t\t\ttrackSelection: trackSelection\n\t\t};\n\n\t\ttry {\n\t\t\tcommand.getEditOperations(ctx.model, editOperationBuilder);\n\t\t} catch (e) {\n\t\t\t// TODO@Alex use notification service if this should be user facing\n\t\t\t// e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n\t\t\tonUnexpectedError(e);\n\t\t\treturn {\n\t\t\t\toperations: [],\n\t\t\t\thadTrackedEditOperation: false\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\toperations: operations,\n\t\t\thadTrackedEditOperation: hadTrackedEditOperation\n\t\t};\n\t}\n\n\tprivate static _getLoserCursorMap(operations: IIdentifiedSingleEditOperation[]): { [index: string]: boolean } {\n\t\t// This is destructive on the array\n\t\toperations = operations.slice(0);\n\n\t\t// Sort operations with last one first\n\t\toperations.sort((a: IIdentifiedSingleEditOperation, b: IIdentifiedSingleEditOperation): number => {\n\t\t\t// Note the minus!\n\t\t\treturn -(Range.compareRangesUsingEnds(a.range, b.range));\n\t\t});\n\n\t\t// Operations can not overlap!\n\t\tconst loserCursorsMap: { [index: string]: boolean } = {};\n\n\t\tfor (let i = 1; i < operations.length; i++) {\n\t\t\tconst previousOp = operations[i - 1];\n\t\t\tconst currentOp = operations[i];\n\n\t\t\tif (Range.getStartPosition(previousOp.range).isBefore(Range.getEndPosition(currentOp.range))) {\n\n\t\t\t\tlet loserMajor: number;\n\n\t\t\t\tif (previousOp.identifier!.major > currentOp.identifier!.major) {\n\t\t\t\t\t// previousOp loses the battle\n\t\t\t\t\tloserMajor = previousOp.identifier!.major;\n\t\t\t\t} else {\n\t\t\t\t\tloserMajor = currentOp.identifier!.major;\n\t\t\t\t}\n\n\t\t\t\tloserCursorsMap[loserMajor.toString()] = true;\n\n\t\t\t\tfor (let j = 0; j < operations.length; j++) {\n\t\t\t\t\tif (operations[j].identifier!.major === loserMajor) {\n\t\t\t\t\t\toperations.splice(j, 1);\n\t\t\t\t\t\tif (j < i) {\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn loserCursorsMap;\n\t}\n}\n\nclass CompositionLineState {\n\tconstructor(\n\t\tpublic readonly text: string,\n\t\tpublic readonly startSelection: number,\n\t\tpublic readonly endSelection: number\n\t) { }\n}\n\nclass CompositionState {\n\n\tprivate readonly _original: CompositionLineState[] | null;\n\n\tprivate static _capture(textModel: ITextModel, selections: Selection[]): CompositionLineState[] | null {\n\t\tconst result: CompositionLineState[] = [];\n\t\tfor (const selection of selections) {\n\t\t\tif (selection.startLineNumber !== selection.endLineNumber) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresult.push(new CompositionLineState(\n\t\t\t\ttextModel.getLineContent(selection.startLineNumber),\n\t\t\t\tselection.startColumn - 1,\n\t\t\t\tselection.endColumn - 1\n\t\t\t));\n\t\t}\n\t\treturn result;\n\t}\n\n\tconstructor(textModel: ITextModel, selections: Selection[]) {\n\t\tthis._original = CompositionState._capture(textModel, selections);\n\t}\n\n\t/**\n\t * Returns the inserted text during this composition.\n\t * If the composition resulted in existing text being changed (i.e. not a pure insertion) it returns null.\n\t */\n\tdeduceOutcome(textModel: ITextModel, selections: Selection[]): CompositionOutcome[] | null {\n\t\tif (!this._original) {\n\t\t\treturn null;\n\t\t}\n\t\tconst current = CompositionState._capture(textModel, selections);\n\t\tif (!current) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this._original.length !== current.length) {\n\t\t\treturn null;\n\t\t}\n\t\tconst result: CompositionOutcome[] = [];\n\t\tfor (let i = 0, len = this._original.length; i < len; i++) {\n\t\t\tresult.push(CompositionState._deduceOutcome(this._original[i], current[i]));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _deduceOutcome(original: CompositionLineState, current: CompositionLineState): CompositionOutcome {\n\t\tconst commonPrefix = Math.min(\n\t\t\toriginal.startSelection,\n\t\t\tcurrent.startSelection,\n\t\t\tstrings.commonPrefixLength(original.text, current.text)\n\t\t);\n\t\tconst commonSuffix = Math.min(\n\t\t\toriginal.text.length - original.endSelection,\n\t\t\tcurrent.text.length - current.endSelection,\n\t\t\tstrings.commonSuffixLength(original.text, current.text)\n\t\t);\n\t\tconst deletedText = original.text.substring(commonPrefix, original.text.length - commonSuffix);\n\t\tconst insertedText = current.text.substring(commonPrefix, current.text.length - commonSuffix);\n\t\treturn new CompositionOutcome(\n\t\t\tdeletedText,\n\t\t\toriginal.startSelection - commonPrefix,\n\t\t\toriginal.endSelection - commonPrefix,\n\t\t\tinsertedText,\n\t\t\tcurrent.startSelection - commonPrefix,\n\t\t\tcurrent.endSelection - commonPrefix\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["selections"]
}
