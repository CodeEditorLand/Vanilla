{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/cursorCollection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy } from \"../../../base/common/arrays.js\";\nimport { findFirstMin, findLastMax } from \"../../../base/common/arraysFind.js\";\nimport { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport { type ISelection, Selection } from \"../core/selection.js\";\nimport { CursorState, type PartialCursorState } from \"../cursorCommon.js\";\nimport type { CursorContext } from \"./cursorContext.js\";\nimport { Cursor } from \"./oneCursor.js\";\n\nexport class CursorCollection {\n\tprivate context: CursorContext;\n\n\t/**\n\t * `cursors[0]` is the primary cursor, thus `cursors.length >= 1` is always true.\n\t * `cursors.slice(1)` are secondary cursors.\n\t */\n\tprivate cursors: Cursor[];\n\n\t// An index which identifies the last cursor that was added / moved (think Ctrl+drag)\n\t// This index refers to `cursors.slice(1)`, i.e. after removing the primary cursor.\n\tprivate lastAddedCursorIndex: number;\n\n\tconstructor(context: CursorContext) {\n\t\tthis.context = context;\n\t\tthis.cursors = [new Cursor(context)];\n\t\tthis.lastAddedCursorIndex = 0;\n\t}\n\n\tpublic dispose(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.dispose(this.context);\n\t\t}\n\t}\n\n\tpublic startTrackingSelections(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.startTrackingSelection(this.context);\n\t\t}\n\t}\n\n\tpublic stopTrackingSelections(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.stopTrackingSelection(this.context);\n\t\t}\n\t}\n\n\tpublic updateContext(context: CursorContext): void {\n\t\tthis.context = context;\n\t}\n\n\tpublic ensureValidState(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.ensureValidState(this.context);\n\t\t}\n\t}\n\n\tpublic readSelectionFromMarkers(): Selection[] {\n\t\treturn this.cursors.map((c) =>\n\t\t\tc.readSelectionFromMarkers(this.context),\n\t\t);\n\t}\n\n\tpublic getAll(): CursorState[] {\n\t\treturn this.cursors.map((c) => c.asCursorState());\n\t}\n\n\tpublic getViewPositions(): Position[] {\n\t\treturn this.cursors.map((c) => c.viewState.position);\n\t}\n\n\tpublic getTopMostViewPosition(): Position {\n\t\treturn findFirstMin(\n\t\t\tthis.cursors,\n\t\t\tcompareBy((c) => c.viewState.position, Position.compare),\n\t\t)!.viewState.position;\n\t}\n\n\tpublic getBottomMostViewPosition(): Position {\n\t\treturn findLastMax(\n\t\t\tthis.cursors,\n\t\t\tcompareBy((c) => c.viewState.position, Position.compare),\n\t\t)!.viewState.position;\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\treturn this.cursors.map((c) => c.modelState.selection);\n\t}\n\n\tpublic getViewSelections(): Selection[] {\n\t\treturn this.cursors.map((c) => c.viewState.selection);\n\t}\n\n\tpublic setSelections(selections: ISelection[]): void {\n\t\tthis.setStates(CursorState.fromModelSelections(selections));\n\t}\n\n\tpublic getPrimaryCursor(): CursorState {\n\t\treturn this.cursors[0].asCursorState();\n\t}\n\n\tpublic setStates(states: PartialCursorState[] | null): void {\n\t\tif (states === null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cursors[0].setState(\n\t\t\tthis.context,\n\t\t\tstates[0].modelState,\n\t\t\tstates[0].viewState,\n\t\t);\n\t\tthis._setSecondaryStates(states.slice(1));\n\t}\n\n\t/**\n\t * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n\t */\n\tprivate _setSecondaryStates(secondaryStates: PartialCursorState[]): void {\n\t\tconst secondaryCursorsLength = this.cursors.length - 1;\n\t\tconst secondaryStatesLength = secondaryStates.length;\n\n\t\tif (secondaryCursorsLength < secondaryStatesLength) {\n\t\t\tconst createCnt = secondaryStatesLength - secondaryCursorsLength;\n\t\t\tfor (let i = 0; i < createCnt; i++) {\n\t\t\t\tthis._addSecondaryCursor();\n\t\t\t}\n\t\t} else if (secondaryCursorsLength > secondaryStatesLength) {\n\t\t\tconst removeCnt = secondaryCursorsLength - secondaryStatesLength;\n\t\t\tfor (let i = 0; i < removeCnt; i++) {\n\t\t\t\tthis._removeSecondaryCursor(this.cursors.length - 2);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < secondaryStatesLength; i++) {\n\t\t\tthis.cursors[i + 1].setState(\n\t\t\t\tthis.context,\n\t\t\t\tsecondaryStates[i].modelState,\n\t\t\t\tsecondaryStates[i].viewState,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic killSecondaryCursors(): void {\n\t\tthis._setSecondaryStates([]);\n\t}\n\n\tprivate _addSecondaryCursor(): void {\n\t\tthis.cursors.push(new Cursor(this.context));\n\t\tthis.lastAddedCursorIndex = this.cursors.length - 1;\n\t}\n\n\tpublic getLastAddedCursorIndex(): number {\n\t\tif (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.lastAddedCursorIndex;\n\t}\n\n\tprivate _removeSecondaryCursor(removeIndex: number): void {\n\t\tif (this.lastAddedCursorIndex >= removeIndex + 1) {\n\t\t\tthis.lastAddedCursorIndex--;\n\t\t}\n\t\tthis.cursors[removeIndex + 1].dispose(this.context);\n\t\tthis.cursors.splice(removeIndex + 1, 1);\n\t}\n\n\tpublic normalize(): void {\n\t\tif (this.cursors.length === 1) {\n\t\t\treturn;\n\t\t}\n\t\tconst cursors = this.cursors.slice(0);\n\n\t\tinterface SortedCursor {\n\t\t\tindex: number;\n\t\t\tselection: Selection;\n\t\t}\n\t\tconst sortedCursors: SortedCursor[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tsortedCursors.push({\n\t\t\t\tindex: i,\n\t\t\t\tselection: cursors[i].modelState.selection,\n\t\t\t});\n\t\t}\n\n\t\tsortedCursors.sort(\n\t\t\tcompareBy((s) => s.selection, Range.compareRangesUsingStarts),\n\t\t);\n\n\t\tfor (\n\t\t\tlet sortedCursorIndex = 0;\n\t\t\tsortedCursorIndex < sortedCursors.length - 1;\n\t\t\tsortedCursorIndex++\n\t\t) {\n\t\t\tconst current = sortedCursors[sortedCursorIndex];\n\t\t\tconst next = sortedCursors[sortedCursorIndex + 1];\n\n\t\t\tconst currentSelection = current.selection;\n\t\t\tconst nextSelection = next.selection;\n\n\t\t\tif (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet shouldMergeCursors: boolean;\n\t\t\tif (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n\t\t\t\t// Merge touching cursors if one of them is collapsed\n\t\t\t\tshouldMergeCursors = nextSelection\n\t\t\t\t\t.getStartPosition()\n\t\t\t\t\t.isBeforeOrEqual(currentSelection.getEndPosition());\n\t\t\t} else {\n\t\t\t\t// Merge only overlapping cursors (i.e. allow touching ranges)\n\t\t\t\tshouldMergeCursors = nextSelection\n\t\t\t\t\t.getStartPosition()\n\t\t\t\t\t.isBefore(currentSelection.getEndPosition());\n\t\t\t}\n\n\t\t\tif (shouldMergeCursors) {\n\t\t\t\tconst winnerSortedCursorIndex =\n\t\t\t\t\tcurrent.index < next.index\n\t\t\t\t\t\t? sortedCursorIndex\n\t\t\t\t\t\t: sortedCursorIndex + 1;\n\t\t\t\tconst looserSortedCursorIndex =\n\t\t\t\t\tcurrent.index < next.index\n\t\t\t\t\t\t? sortedCursorIndex + 1\n\t\t\t\t\t\t: sortedCursorIndex;\n\n\t\t\t\tconst looserIndex =\n\t\t\t\t\tsortedCursors[looserSortedCursorIndex].index;\n\t\t\t\tconst winnerIndex =\n\t\t\t\t\tsortedCursors[winnerSortedCursorIndex].index;\n\n\t\t\t\tconst looserSelection =\n\t\t\t\t\tsortedCursors[looserSortedCursorIndex].selection;\n\t\t\t\tconst winnerSelection =\n\t\t\t\t\tsortedCursors[winnerSortedCursorIndex].selection;\n\n\t\t\t\tif (!looserSelection.equalsSelection(winnerSelection)) {\n\t\t\t\t\tconst resultingRange =\n\t\t\t\t\t\tlooserSelection.plusRange(winnerSelection);\n\t\t\t\t\tconst looserSelectionIsLTR =\n\t\t\t\t\t\tlooserSelection.selectionStartLineNumber ===\n\t\t\t\t\t\t\tlooserSelection.startLineNumber &&\n\t\t\t\t\t\tlooserSelection.selectionStartColumn ===\n\t\t\t\t\t\t\tlooserSelection.startColumn;\n\t\t\t\t\tconst winnerSelectionIsLTR =\n\t\t\t\t\t\twinnerSelection.selectionStartLineNumber ===\n\t\t\t\t\t\t\twinnerSelection.startLineNumber &&\n\t\t\t\t\t\twinnerSelection.selectionStartColumn ===\n\t\t\t\t\t\t\twinnerSelection.startColumn;\n\n\t\t\t\t\t// Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n\t\t\t\t\tlet resultingSelectionIsLTR: boolean;\n\t\t\t\t\tif (looserIndex === this.lastAddedCursorIndex) {\n\t\t\t\t\t\tresultingSelectionIsLTR = looserSelectionIsLTR;\n\t\t\t\t\t\tthis.lastAddedCursorIndex = winnerIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Winner takes it all\n\t\t\t\t\t\tresultingSelectionIsLTR = winnerSelectionIsLTR;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet resultingSelection: Selection;\n\t\t\t\t\tif (resultingSelectionIsLTR) {\n\t\t\t\t\t\tresultingSelection = new Selection(\n\t\t\t\t\t\t\tresultingRange.startLineNumber,\n\t\t\t\t\t\t\tresultingRange.startColumn,\n\t\t\t\t\t\t\tresultingRange.endLineNumber,\n\t\t\t\t\t\t\tresultingRange.endColumn,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultingSelection = new Selection(\n\t\t\t\t\t\t\tresultingRange.endLineNumber,\n\t\t\t\t\t\t\tresultingRange.endColumn,\n\t\t\t\t\t\t\tresultingRange.startLineNumber,\n\t\t\t\t\t\t\tresultingRange.startColumn,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tsortedCursors[winnerSortedCursorIndex].selection =\n\t\t\t\t\t\tresultingSelection;\n\t\t\t\t\tconst resultingState =\n\t\t\t\t\t\tCursorState.fromModelSelection(resultingSelection);\n\t\t\t\t\tcursors[winnerIndex].setState(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tresultingState.modelState,\n\t\t\t\t\t\tresultingState.viewState,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tfor (const sortedCursor of sortedCursors) {\n\t\t\t\t\tif (sortedCursor.index > looserIndex) {\n\t\t\t\t\t\tsortedCursor.index--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcursors.splice(looserIndex, 1);\n\t\t\t\tsortedCursors.splice(looserSortedCursorIndex, 1);\n\t\t\t\tthis._removeSecondaryCursor(looserIndex - 1);\n\n\t\t\t\tsortedCursorIndex--;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
