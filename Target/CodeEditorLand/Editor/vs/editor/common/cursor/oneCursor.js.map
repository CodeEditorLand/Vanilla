{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/oneCursor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorState, ICursorSimpleModel, SelectionStartKind, SingleCursorState } from '../cursorCommon.js';\nimport { CursorContext } from './cursorContext.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { PositionAffinity, TrackedRangeStickiness } from '../model.js';\n\n/**\n * Represents a single cursor.\n*/\nexport class Cursor {\n\n\tpublic modelState!: SingleCursorState;\n\tpublic viewState!: SingleCursorState;\n\n\tprivate _selTrackedRange: string | null;\n\tprivate _trackSelection: boolean;\n\n\tconstructor(context: CursorContext) {\n\t\tthis._selTrackedRange = null;\n\t\tthis._trackSelection = true;\n\n\t\tthis._setState(\n\t\t\tcontext,\n\t\t\tnew SingleCursorState(new Range(1, 1, 1, 1), SelectionStartKind.Simple, 0, new Position(1, 1), 0),\n\t\t\tnew SingleCursorState(new Range(1, 1, 1, 1), SelectionStartKind.Simple, 0, new Position(1, 1), 0)\n\t\t);\n\t}\n\n\tpublic dispose(context: CursorContext): void {\n\t\tthis._removeTrackedRange(context);\n\t}\n\n\tpublic startTrackingSelection(context: CursorContext): void {\n\t\tthis._trackSelection = true;\n\t\tthis._updateTrackedRange(context);\n\t}\n\n\tpublic stopTrackingSelection(context: CursorContext): void {\n\t\tthis._trackSelection = false;\n\t\tthis._removeTrackedRange(context);\n\t}\n\n\tprivate _updateTrackedRange(context: CursorContext): void {\n\t\tif (!this._trackSelection) {\n\t\t\t// don't track the selection\n\t\t\treturn;\n\t\t}\n\t\tthis._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t}\n\n\tprivate _removeTrackedRange(context: CursorContext): void {\n\t\tthis._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic asCursorState(): CursorState {\n\t\treturn new CursorState(this.modelState, this.viewState);\n\t}\n\n\tpublic readSelectionFromMarkers(context: CursorContext): Selection {\n\t\tconst range = context.model._getTrackedRange(this._selTrackedRange!)!;\n\n\t\tif (this.modelState.selection.isEmpty() && !range.isEmpty()) {\n\t\t\t// Avoid selecting text when recovering from markers\n\t\t\treturn Selection.fromRange(range.collapseToEnd(), this.modelState.selection.getDirection());\n\t\t}\n\n\t\treturn Selection.fromRange(range, this.modelState.selection.getDirection());\n\t}\n\n\tpublic ensureValidState(context: CursorContext): void {\n\t\tthis._setState(context, this.modelState, this.viewState);\n\t}\n\n\tpublic setState(context: CursorContext, modelState: SingleCursorState | null, viewState: SingleCursorState | null): void {\n\t\tthis._setState(context, modelState, viewState);\n\t}\n\n\tprivate static _validatePositionWithCache(viewModel: ICursorSimpleModel, position: Position, cacheInput: Position, cacheOutput: Position): Position {\n\t\tif (position.equals(cacheInput)) {\n\t\t\treturn cacheOutput;\n\t\t}\n\t\treturn viewModel.normalizePosition(position, PositionAffinity.None);\n\t}\n\n\tprivate static _validateViewState(viewModel: ICursorSimpleModel, viewState: SingleCursorState): SingleCursorState {\n\t\tconst position = viewState.position;\n\t\tconst sStartPosition = viewState.selectionStart.getStartPosition();\n\t\tconst sEndPosition = viewState.selectionStart.getEndPosition();\n\n\t\tconst validPosition = viewModel.normalizePosition(position, PositionAffinity.None);\n\t\tconst validSStartPosition = this._validatePositionWithCache(viewModel, sStartPosition, position, validPosition);\n\t\tconst validSEndPosition = this._validatePositionWithCache(viewModel, sEndPosition, sStartPosition, validSStartPosition);\n\n\t\tif (position.equals(validPosition) && sStartPosition.equals(validSStartPosition) && sEndPosition.equals(validSEndPosition)) {\n\t\t\t// fast path: the state is valid\n\t\t\treturn viewState;\n\t\t}\n\n\t\treturn new SingleCursorState(\n\t\t\tRange.fromPositions(validSStartPosition, validSEndPosition),\n\t\t\tviewState.selectionStartKind,\n\t\t\tviewState.selectionStartLeftoverVisibleColumns + sStartPosition.column - validSStartPosition.column,\n\t\t\tvalidPosition,\n\t\t\tviewState.leftoverVisibleColumns + position.column - validPosition.column,\n\t\t);\n\t}\n\n\tprivate _setState(context: CursorContext, modelState: SingleCursorState | null, viewState: SingleCursorState | null): void {\n\t\tif (viewState) {\n\t\t\tviewState = Cursor._validateViewState(context.viewModel, viewState);\n\t\t}\n\n\t\tif (!modelState) {\n\t\t\tif (!viewState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We only have the view state => compute the model state\n\t\t\tconst selectionStart = context.model.validateRange(\n\t\t\t\tcontext.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart)\n\t\t\t);\n\n\t\t\tconst position = context.model.validatePosition(\n\t\t\t\tcontext.coordinatesConverter.convertViewPositionToModelPosition(viewState.position)\n\t\t\t);\n\n\t\t\tmodelState = new SingleCursorState(selectionStart, viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n\t\t} else {\n\t\t\t// Validate new model state\n\t\t\tconst selectionStart = context.model.validateRange(modelState.selectionStart);\n\t\t\tconst selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n\n\t\t\tconst position = context.model.validatePosition(\n\t\t\t\tmodelState.position\n\t\t\t);\n\t\t\tconst leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n\n\t\t\tmodelState = new SingleCursorState(selectionStart, modelState.selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n\t\t}\n\n\t\tif (!viewState) {\n\t\t\t// We only have the model state => compute the view state\n\t\t\tconst viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n\t\t\tconst viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n\t\t\tconst viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n\t\t\tconst viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n\t\t\tviewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n\t\t} else {\n\t\t\t// Validate new view state\n\t\t\tconst viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n\t\t\tconst viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n\t\t\tviewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n\t\t}\n\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\n\t\tthis._updateTrackedRange(context);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
