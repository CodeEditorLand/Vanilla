{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/cursor/oneCursor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from \"../core/position.js\";\nimport { Range } from \"../core/range.js\";\nimport { Selection } from \"../core/selection.js\";\nimport {\n\tCursorState,\n\ttype ICursorSimpleModel,\n\tSelectionStartKind,\n\tSingleCursorState,\n} from \"../cursorCommon.js\";\nimport { PositionAffinity, TrackedRangeStickiness } from \"../model.js\";\nimport type { CursorContext } from \"./cursorContext.js\";\n\n/**\n * Represents a single cursor.\n */\nexport class Cursor {\n\tpublic modelState!: SingleCursorState;\n\tpublic viewState!: SingleCursorState;\n\n\tprivate _selTrackedRange: string | null;\n\tprivate _trackSelection: boolean;\n\n\tconstructor(context: CursorContext) {\n\t\tthis._selTrackedRange = null;\n\t\tthis._trackSelection = true;\n\n\t\tthis._setState(\n\t\t\tcontext,\n\t\t\tnew SingleCursorState(\n\t\t\t\tnew Range(1, 1, 1, 1),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t0,\n\t\t\t\tnew Position(1, 1),\n\t\t\t\t0,\n\t\t\t),\n\t\t\tnew SingleCursorState(\n\t\t\t\tnew Range(1, 1, 1, 1),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\t0,\n\t\t\t\tnew Position(1, 1),\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic dispose(context: CursorContext): void {\n\t\tthis._removeTrackedRange(context);\n\t}\n\n\tpublic startTrackingSelection(context: CursorContext): void {\n\t\tthis._trackSelection = true;\n\t\tthis._updateTrackedRange(context);\n\t}\n\n\tpublic stopTrackingSelection(context: CursorContext): void {\n\t\tthis._trackSelection = false;\n\t\tthis._removeTrackedRange(context);\n\t}\n\n\tprivate _updateTrackedRange(context: CursorContext): void {\n\t\tif (!this._trackSelection) {\n\t\t\t// don't track the selection\n\t\t\treturn;\n\t\t}\n\t\tthis._selTrackedRange = context.model._setTrackedRange(\n\t\t\tthis._selTrackedRange,\n\t\t\tthis.modelState.selection,\n\t\t\tTrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t\t);\n\t}\n\n\tprivate _removeTrackedRange(context: CursorContext): void {\n\t\tthis._selTrackedRange = context.model._setTrackedRange(\n\t\t\tthis._selTrackedRange,\n\t\t\tnull,\n\t\t\tTrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t\t);\n\t}\n\n\tpublic asCursorState(): CursorState {\n\t\treturn new CursorState(this.modelState, this.viewState);\n\t}\n\n\tpublic readSelectionFromMarkers(context: CursorContext): Selection {\n\t\tconst range = context.model._getTrackedRange(this._selTrackedRange!)!;\n\n\t\tif (this.modelState.selection.isEmpty() && !range.isEmpty()) {\n\t\t\t// Avoid selecting text when recovering from markers\n\t\t\treturn Selection.fromRange(\n\t\t\t\trange.collapseToEnd(),\n\t\t\t\tthis.modelState.selection.getDirection(),\n\t\t\t);\n\t\t}\n\n\t\treturn Selection.fromRange(\n\t\t\trange,\n\t\t\tthis.modelState.selection.getDirection(),\n\t\t);\n\t}\n\n\tpublic ensureValidState(context: CursorContext): void {\n\t\tthis._setState(context, this.modelState, this.viewState);\n\t}\n\n\tpublic setState(\n\t\tcontext: CursorContext,\n\t\tmodelState: SingleCursorState | null,\n\t\tviewState: SingleCursorState | null,\n\t): void {\n\t\tthis._setState(context, modelState, viewState);\n\t}\n\n\tprivate static _validatePositionWithCache(\n\t\tviewModel: ICursorSimpleModel,\n\t\tposition: Position,\n\t\tcacheInput: Position,\n\t\tcacheOutput: Position,\n\t): Position {\n\t\tif (position.equals(cacheInput)) {\n\t\t\treturn cacheOutput;\n\t\t}\n\t\treturn viewModel.normalizePosition(position, PositionAffinity.None);\n\t}\n\n\tprivate static _validateViewState(\n\t\tviewModel: ICursorSimpleModel,\n\t\tviewState: SingleCursorState,\n\t): SingleCursorState {\n\t\tconst position = viewState.position;\n\t\tconst sStartPosition = viewState.selectionStart.getStartPosition();\n\t\tconst sEndPosition = viewState.selectionStart.getEndPosition();\n\n\t\tconst validPosition = viewModel.normalizePosition(\n\t\t\tposition,\n\t\t\tPositionAffinity.None,\n\t\t);\n\t\tconst validSStartPosition = this._validatePositionWithCache(\n\t\t\tviewModel,\n\t\t\tsStartPosition,\n\t\t\tposition,\n\t\t\tvalidPosition,\n\t\t);\n\t\tconst validSEndPosition = this._validatePositionWithCache(\n\t\t\tviewModel,\n\t\t\tsEndPosition,\n\t\t\tsStartPosition,\n\t\t\tvalidSStartPosition,\n\t\t);\n\n\t\tif (\n\t\t\tposition.equals(validPosition) &&\n\t\t\tsStartPosition.equals(validSStartPosition) &&\n\t\t\tsEndPosition.equals(validSEndPosition)\n\t\t) {\n\t\t\t// fast path: the state is valid\n\t\t\treturn viewState;\n\t\t}\n\n\t\treturn new SingleCursorState(\n\t\t\tRange.fromPositions(validSStartPosition, validSEndPosition),\n\t\t\tviewState.selectionStartKind,\n\t\t\tviewState.selectionStartLeftoverVisibleColumns +\n\t\t\t\tsStartPosition.column -\n\t\t\t\tvalidSStartPosition.column,\n\t\t\tvalidPosition,\n\t\t\tviewState.leftoverVisibleColumns +\n\t\t\t\tposition.column -\n\t\t\t\tvalidPosition.column,\n\t\t);\n\t}\n\n\tprivate _setState(\n\t\tcontext: CursorContext,\n\t\tmodelState: SingleCursorState | null,\n\t\tviewState: SingleCursorState | null,\n\t): void {\n\t\tif (viewState) {\n\t\t\tviewState = Cursor._validateViewState(context.viewModel, viewState);\n\t\t}\n\n\t\tif (modelState) {\n\t\t\t// Validate new model state\n\t\t\tconst selectionStart = context.model.validateRange(\n\t\t\t\tmodelState.selectionStart,\n\t\t\t);\n\t\t\tconst selectionStartLeftoverVisibleColumns =\n\t\t\t\tmodelState.selectionStart.equalsRange(selectionStart)\n\t\t\t\t\t? modelState.selectionStartLeftoverVisibleColumns\n\t\t\t\t\t: 0;\n\n\t\t\tconst position = context.model.validatePosition(\n\t\t\t\tmodelState.position,\n\t\t\t);\n\t\t\tconst leftoverVisibleColumns = modelState.position.equals(position)\n\t\t\t\t? modelState.leftoverVisibleColumns\n\t\t\t\t: 0;\n\n\t\t\tmodelState = new SingleCursorState(\n\t\t\t\tselectionStart,\n\t\t\t\tmodelState.selectionStartKind,\n\t\t\t\tselectionStartLeftoverVisibleColumns,\n\t\t\t\tposition,\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t);\n\t\t} else {\n\t\t\tif (!viewState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We only have the view state => compute the model state\n\t\t\tconst selectionStart = context.model.validateRange(\n\t\t\t\tcontext.coordinatesConverter.convertViewRangeToModelRange(\n\t\t\t\t\tviewState.selectionStart,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst position = context.model.validatePosition(\n\t\t\t\tcontext.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\tviewState.position,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tmodelState = new SingleCursorState(\n\t\t\t\tselectionStart,\n\t\t\t\tviewState.selectionStartKind,\n\t\t\t\tviewState.selectionStartLeftoverVisibleColumns,\n\t\t\t\tposition,\n\t\t\t\tviewState.leftoverVisibleColumns,\n\t\t\t);\n\t\t}\n\n\t\tif (viewState) {\n\t\t\t// Validate new view state\n\t\t\tconst viewSelectionStart =\n\t\t\t\tcontext.coordinatesConverter.validateViewRange(\n\t\t\t\t\tviewState.selectionStart,\n\t\t\t\t\tmodelState.selectionStart,\n\t\t\t\t);\n\t\t\tconst viewPosition =\n\t\t\t\tcontext.coordinatesConverter.validateViewPosition(\n\t\t\t\t\tviewState.position,\n\t\t\t\t\tmodelState.position,\n\t\t\t\t);\n\t\t\tviewState = new SingleCursorState(\n\t\t\t\tviewSelectionStart,\n\t\t\t\tmodelState.selectionStartKind,\n\t\t\t\tmodelState.selectionStartLeftoverVisibleColumns,\n\t\t\t\tviewPosition,\n\t\t\t\tmodelState.leftoverVisibleColumns,\n\t\t\t);\n\t\t} else {\n\t\t\t// We only have the model state => compute the view state\n\t\t\tconst viewSelectionStart1 =\n\t\t\t\tcontext.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\tmodelState.selectionStart.startLineNumber,\n\t\t\t\t\t\tmodelState.selectionStart.startColumn,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tconst viewSelectionStart2 =\n\t\t\t\tcontext.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\tmodelState.selectionStart.endLineNumber,\n\t\t\t\t\t\tmodelState.selectionStart.endColumn,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tconst viewSelectionStart = new Range(\n\t\t\t\tviewSelectionStart1.lineNumber,\n\t\t\t\tviewSelectionStart1.column,\n\t\t\t\tviewSelectionStart2.lineNumber,\n\t\t\t\tviewSelectionStart2.column,\n\t\t\t);\n\t\t\tconst viewPosition =\n\t\t\t\tcontext.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tmodelState.position,\n\t\t\t\t);\n\t\t\tviewState = new SingleCursorState(\n\t\t\t\tviewSelectionStart,\n\t\t\t\tmodelState.selectionStartKind,\n\t\t\t\tmodelState.selectionStartLeftoverVisibleColumns,\n\t\t\t\tviewPosition,\n\t\t\t\tmodelState.leftoverVisibleColumns,\n\t\t\t);\n\t\t}\n\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\n\t\tthis._updateTrackedRange(context);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
