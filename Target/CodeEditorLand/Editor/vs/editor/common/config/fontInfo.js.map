{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/config/fontInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from '../../../base/common/platform.js';\nimport { EditorFontVariations, EditorOptions, EditorOption, FindComputedEditorOptionValueById, EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\n\n/**\n * @internal\n */\nexport interface IValidatedEditorOptions {\n\tget<T extends EditorOption>(id: T): FindComputedEditorOptionValueById<T>;\n}\n\nexport class BareFontInfo {\n\treadonly _bareFontInfoBrand: void = undefined;\n\n\t/**\n\t * @internal\n\t */\n\tpublic static createFromValidatedSettings(options: IValidatedEditorOptions, pixelRatio: number, ignoreEditorZoom: boolean): BareFontInfo {\n\t\tconst fontFamily = options.get(EditorOption.fontFamily);\n\t\tconst fontWeight = options.get(EditorOption.fontWeight);\n\t\tconst fontSize = options.get(EditorOption.fontSize);\n\t\tconst fontFeatureSettings = options.get(EditorOption.fontLigatures);\n\t\tconst fontVariationSettings = options.get(EditorOption.fontVariations);\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst letterSpacing = options.get(EditorOption.letterSpacing);\n\t\treturn BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, fontVariationSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic static createFromRawSettings(opts: { fontFamily?: string; fontWeight?: string; fontSize?: number; fontLigatures?: boolean | string; fontVariations?: boolean | string; lineHeight?: number; letterSpacing?: number }, pixelRatio: number, ignoreEditorZoom: boolean = false): BareFontInfo {\n\t\tconst fontFamily = EditorOptions.fontFamily.validate(opts.fontFamily);\n\t\tconst fontWeight = EditorOptions.fontWeight.validate(opts.fontWeight);\n\t\tconst fontSize = EditorOptions.fontSize.validate(opts.fontSize);\n\t\tconst fontFeatureSettings = EditorOptions.fontLigatures2.validate(opts.fontLigatures);\n\t\tconst fontVariationSettings = EditorOptions.fontVariations.validate(opts.fontVariations);\n\t\tconst lineHeight = EditorOptions.lineHeight.validate(opts.lineHeight);\n\t\tconst letterSpacing = EditorOptions.letterSpacing.validate(opts.letterSpacing);\n\t\treturn BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, fontVariationSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tprivate static _create(fontFamily: string, fontWeight: string, fontSize: number, fontFeatureSettings: string, fontVariationSettings: string, lineHeight: number, letterSpacing: number, pixelRatio: number, ignoreEditorZoom: boolean): BareFontInfo {\n\t\tif (lineHeight === 0) {\n\t\t\tlineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n\t\t} else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n\t\t\t// Values too small to be line heights in pixels are in ems.\n\t\t\tlineHeight = lineHeight * fontSize;\n\t\t}\n\n\t\t// Enforce integer, minimum constraints\n\t\tlineHeight = Math.round(lineHeight);\n\t\tif (lineHeight < MINIMUM_LINE_HEIGHT) {\n\t\t\tlineHeight = MINIMUM_LINE_HEIGHT;\n\t\t}\n\n\t\tconst editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n\t\tfontSize *= editorZoomLevelMultiplier;\n\t\tlineHeight *= editorZoomLevelMultiplier;\n\n\t\tif (fontVariationSettings === EditorFontVariations.TRANSLATE) {\n\t\t\tif (fontWeight === 'normal' || fontWeight === 'bold') {\n\t\t\t\tfontVariationSettings = EditorFontVariations.OFF;\n\t\t\t} else {\n\t\t\t\tconst fontWeightAsNumber = parseInt(fontWeight, 10);\n\t\t\t\tfontVariationSettings = `'wght' ${fontWeightAsNumber}`;\n\t\t\t\tfontWeight = 'normal';\n\t\t\t}\n\t\t}\n\n\t\treturn new BareFontInfo({\n\t\t\tpixelRatio: pixelRatio,\n\t\t\tfontFamily: fontFamily,\n\t\t\tfontWeight: fontWeight,\n\t\t\tfontSize: fontSize,\n\t\t\tfontFeatureSettings: fontFeatureSettings,\n\t\t\tfontVariationSettings,\n\t\t\tlineHeight: lineHeight,\n\t\t\tletterSpacing: letterSpacing\n\t\t});\n\t}\n\n\treadonly pixelRatio: number;\n\treadonly fontFamily: string;\n\treadonly fontWeight: string;\n\treadonly fontSize: number;\n\treadonly fontFeatureSettings: string;\n\treadonly fontVariationSettings: string;\n\treadonly lineHeight: number;\n\treadonly letterSpacing: number;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(opts: {\n\t\tpixelRatio: number;\n\t\tfontFamily: string;\n\t\tfontWeight: string;\n\t\tfontSize: number;\n\t\tfontFeatureSettings: string;\n\t\tfontVariationSettings: string;\n\t\tlineHeight: number;\n\t\tletterSpacing: number;\n\t}) {\n\t\tthis.pixelRatio = opts.pixelRatio;\n\t\tthis.fontFamily = String(opts.fontFamily);\n\t\tthis.fontWeight = String(opts.fontWeight);\n\t\tthis.fontSize = opts.fontSize;\n\t\tthis.fontFeatureSettings = opts.fontFeatureSettings;\n\t\tthis.fontVariationSettings = opts.fontVariationSettings;\n\t\tthis.lineHeight = opts.lineHeight | 0;\n\t\tthis.letterSpacing = opts.letterSpacing;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic getId(): string {\n\t\treturn `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.fontVariationSettings}-${this.lineHeight}-${this.letterSpacing}`;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic getMassagedFontFamily(): string {\n\t\tconst fallbackFontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n\t\tconst fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n\t\tif (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n\t\t\treturn `${fontFamily}, ${fallbackFontFamily}`;\n\t\t}\n\t\treturn fontFamily;\n\t}\n\n\tprivate static _wrapInQuotes(fontFamily: string): string {\n\t\tif (/[,\"']/.test(fontFamily)) {\n\t\t\t// Looks like the font family might be already escaped\n\t\t\treturn fontFamily;\n\t\t}\n\t\tif (/[+ ]/.test(fontFamily)) {\n\t\t\t// Wrap a font family using + or <space> with quotes\n\t\t\treturn `\"${fontFamily}\"`;\n\t\t}\n\t\treturn fontFamily;\n\t}\n}\n\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 2;\n\nexport class FontInfo extends BareFontInfo {\n\treadonly _editorStylingBrand: void = undefined;\n\n\treadonly version: number = SERIALIZED_FONT_INFO_VERSION;\n\treadonly isTrusted: boolean;\n\treadonly isMonospace: boolean;\n\treadonly typicalHalfwidthCharacterWidth: number;\n\treadonly typicalFullwidthCharacterWidth: number;\n\treadonly canUseHalfwidthRightwardsArrow: boolean;\n\treadonly spaceWidth: number;\n\treadonly middotWidth: number;\n\treadonly wsmiddotWidth: number;\n\treadonly maxDigitWidth: number;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(opts: {\n\t\tpixelRatio: number;\n\t\tfontFamily: string;\n\t\tfontWeight: string;\n\t\tfontSize: number;\n\t\tfontFeatureSettings: string;\n\t\tfontVariationSettings: string;\n\t\tlineHeight: number;\n\t\tletterSpacing: number;\n\t\tisMonospace: boolean;\n\t\ttypicalHalfwidthCharacterWidth: number;\n\t\ttypicalFullwidthCharacterWidth: number;\n\t\tcanUseHalfwidthRightwardsArrow: boolean;\n\t\tspaceWidth: number;\n\t\tmiddotWidth: number;\n\t\twsmiddotWidth: number;\n\t\tmaxDigitWidth: number;\n\t}, isTrusted: boolean) {\n\t\tsuper(opts);\n\t\tthis.isTrusted = isTrusted;\n\t\tthis.isMonospace = opts.isMonospace;\n\t\tthis.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n\t\tthis.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n\t\tthis.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n\t\tthis.spaceWidth = opts.spaceWidth;\n\t\tthis.middotWidth = opts.middotWidth;\n\t\tthis.wsmiddotWidth = opts.wsmiddotWidth;\n\t\tthis.maxDigitWidth = opts.maxDigitWidth;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other: FontInfo): boolean {\n\t\treturn (\n\t\t\tthis.fontFamily === other.fontFamily\n\t\t\t&& this.fontWeight === other.fontWeight\n\t\t\t&& this.fontSize === other.fontSize\n\t\t\t&& this.fontFeatureSettings === other.fontFeatureSettings\n\t\t\t&& this.fontVariationSettings === other.fontVariationSettings\n\t\t\t&& this.lineHeight === other.lineHeight\n\t\t\t&& this.letterSpacing === other.letterSpacing\n\t\t\t&& this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n\t\t\t&& this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n\t\t\t&& this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n\t\t\t&& this.spaceWidth === other.spaceWidth\n\t\t\t&& this.middotWidth === other.middotWidth\n\t\t\t&& this.wsmiddotWidth === other.wsmiddotWidth\n\t\t\t&& this.maxDigitWidth === other.maxDigitWidth\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
