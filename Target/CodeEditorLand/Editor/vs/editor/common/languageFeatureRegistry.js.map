{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languageFeatureRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../base/common/event.js';\nimport { IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { ITextModel, shouldSynchronizeModel } from './model.js';\nimport { LanguageFilter, LanguageSelector, score } from './languageSelector.js';\nimport { URI } from '../../base/common/uri.js';\n\ninterface Entry<T> {\n\treadonly selector: LanguageSelector;\n\treadonly provider: T;\n\t_score: number;\n\treadonly _time: number;\n}\n\nfunction isExclusive(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t} else if (Array.isArray(selector)) {\n\t\treturn selector.every(isExclusive);\n\t} else {\n\t\treturn !!(selector as LanguageFilter).exclusive; // TODO: microsoft/TypeScript#42768\n\t}\n}\n\nexport interface NotebookInfo {\n\treadonly uri: URI;\n\treadonly type: string;\n}\n\nexport interface NotebookInfoResolver {\n\t(uri: URI): NotebookInfo | undefined;\n}\n\nclass MatchCandidate {\n\tconstructor(\n\t\treadonly uri: URI,\n\t\treadonly languageId: string,\n\t\treadonly notebookUri: URI | undefined,\n\t\treadonly notebookType: string | undefined,\n\t\treadonly recursive: boolean,\n\t) { }\n\n\tequals(other: MatchCandidate): boolean {\n\t\treturn this.notebookType === other.notebookType\n\t\t\t&& this.languageId === other.languageId\n\t\t\t&& this.uri.toString() === other.uri.toString()\n\t\t\t&& this.notebookUri?.toString() === other.notebookUri?.toString()\n\t\t\t&& this.recursive === other.recursive;\n\t}\n}\n\nexport class LanguageFeatureRegistry<T> {\n\n\tprivate _clock: number = 0;\n\tprivate readonly _entries: Entry<T>[] = [];\n\n\tprivate readonly _onDidChange = new Emitter<number>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor(private readonly _notebookInfoResolver?: NotebookInfoResolver) { }\n\n\tregister(selector: LanguageSelector, provider: T): IDisposable {\n\n\t\tlet entry: Entry<T> | undefined = {\n\t\t\tselector,\n\t\t\tprovider,\n\t\t\t_score: -1,\n\t\t\t_time: this._clock++\n\t\t};\n\n\t\tthis._entries.push(entry);\n\t\tthis._lastCandidate = undefined;\n\t\tthis._onDidChange.fire(this._entries.length);\n\n\t\treturn toDisposable(() => {\n\t\t\tif (entry) {\n\t\t\t\tconst idx = this._entries.indexOf(entry);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tthis._entries.splice(idx, 1);\n\t\t\t\t\tthis._lastCandidate = undefined;\n\t\t\t\t\tthis._onDidChange.fire(this._entries.length);\n\t\t\t\t\tentry = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\thas(model: ITextModel): boolean {\n\t\treturn this.all(model).length > 0;\n\t}\n\n\tall(model: ITextModel): T[] {\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._updateScores(model, false);\n\t\tconst result: T[] = [];\n\n\t\t// from registry\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tresult.push(entry.provider);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tallNoModel(): T[] {\n\t\treturn this._entries.map(entry => entry.provider);\n\t}\n\n\tordered(model: ITextModel, recursive = false): T[] {\n\t\tconst result: T[] = [];\n\t\tthis._orderedForEach(model, recursive, entry => result.push(entry.provider));\n\t\treturn result;\n\t}\n\n\torderedGroups(model: ITextModel): T[][] {\n\t\tconst result: T[][] = [];\n\t\tlet lastBucket: T[];\n\t\tlet lastBucketScore: number;\n\n\t\tthis._orderedForEach(model, false, entry => {\n\t\t\tif (lastBucket && lastBucketScore === entry._score) {\n\t\t\t\tlastBucket.push(entry.provider);\n\t\t\t} else {\n\t\t\t\tlastBucketScore = entry._score;\n\t\t\t\tlastBucket = [entry.provider];\n\t\t\t\tresult.push(lastBucket);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate _orderedForEach(model: ITextModel, recursive: boolean, callback: (provider: Entry<T>) => any): void {\n\n\t\tthis._updateScores(model, recursive);\n\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tcallback(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _lastCandidate: MatchCandidate | undefined;\n\n\tprivate _updateScores(model: ITextModel, recursive: boolean): void {\n\n\t\tconst notebookInfo = this._notebookInfoResolver?.(model.uri);\n\n\t\t// use the uri (scheme, pattern) of the notebook info iff we have one\n\t\t// otherwise it's the model's/document's uri\n\t\tconst candidate = notebookInfo\n\t\t\t? new MatchCandidate(model.uri, model.getLanguageId(), notebookInfo.uri, notebookInfo.type, recursive)\n\t\t\t: new MatchCandidate(model.uri, model.getLanguageId(), undefined, undefined, recursive);\n\n\t\tif (this._lastCandidate?.equals(candidate)) {\n\t\t\t// nothing has changed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastCandidate = candidate;\n\n\t\tfor (const entry of this._entries) {\n\t\t\tentry._score = score(entry.selector, candidate.uri, candidate.languageId, shouldSynchronizeModel(model), candidate.notebookUri, candidate.notebookType);\n\n\t\t\tif (isExclusive(entry.selector) && entry._score > 0) {\n\t\t\t\tif (recursive) {\n\t\t\t\t\tentry._score = 0;\n\t\t\t\t} else {\n\t\t\t\t\t// support for one exclusive selector that overwrites\n\t\t\t\t\t// any other selector\n\t\t\t\t\tfor (const entry of this._entries) {\n\t\t\t\t\t\tentry._score = 0;\n\t\t\t\t\t}\n\t\t\t\t\tentry._score = 1000;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs sorting\n\t\tthis._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n\t}\n\n\tprivate static _compareByScoreAndTime(a: Entry<any>, b: Entry<any>): number {\n\t\tif (a._score < b._score) {\n\t\t\treturn 1;\n\t\t} else if (a._score > b._score) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// De-prioritize built-in providers\n\t\tif (isBuiltinSelector(a.selector) && !isBuiltinSelector(b.selector)) {\n\t\t\treturn 1;\n\t\t} else if (!isBuiltinSelector(a.selector) && isBuiltinSelector(b.selector)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (a._time < b._time) {\n\t\t\treturn 1;\n\t\t} else if (a._time > b._time) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nfunction isBuiltinSelector(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t}\n\n\tif (Array.isArray(selector)) {\n\t\treturn selector.some(isBuiltinSelector);\n\t}\n\n\treturn Boolean((selector as LanguageFilter).isBuiltin);\n}\n\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,aAAa,oBAAoB;AAC1C,SAAS,YAAY,8BAA8B;AACnD,SAAS,gBAAgB,kBAAkB,aAAa;AACxD,SAAS,WAAW;AASpB,SAAS,YAAY,UAAqC;AACzD,MAAI,OAAO,aAAa,UAAU;AACjC,WAAO;AAAA,EACR,WAAW,MAAM,QAAQ,QAAQ,GAAG;AACnC,WAAO,SAAS,MAAM,WAAW;AAAA,EAClC,OAAO;AACN,WAAO,CAAC,CAAE,SAA4B;AAAA,EACvC;AACD;AARS;AAmBT,MAAM,eAAe;AAAA,EACpB,YACU,KACA,YACA,aACA,cACA,WACR;AALQ;AACA;AACA;AACA;AACA;AAAA,EACN;AAAA,EA5CL,OAqCqB;AAAA;AAAA;AAAA,EASpB,OAAO,OAAgC;AACtC,WAAO,KAAK,iBAAiB,MAAM,gBAC/B,KAAK,eAAe,MAAM,cAC1B,KAAK,IAAI,SAAS,MAAM,MAAM,IAAI,SAAS,KAC3C,KAAK,aAAa,SAAS,MAAM,MAAM,aAAa,SAAS,KAC7D,KAAK,cAAc,MAAM;AAAA,EAC9B;AACD;AAEO,MAAM,wBAA2B;AAAA,EAQvC,YAA6B,uBAA8C;AAA9C;AAAA,EAAgD;AAAA,EA/D9E,OAuDwC;AAAA;AAAA;AAAA,EAE/B,SAAiB;AAAA,EACR,WAAuB,CAAC;AAAA,EAExB,eAAe,IAAI,QAAgB;AAAA,EAC3C,cAAc,KAAK,aAAa;AAAA,EAIzC,SAAS,UAA4B,UAA0B;AAE9D,QAAI,QAA8B;AAAA,MACjC;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,OAAO,KAAK;AAAA,IACb;AAEA,SAAK,SAAS,KAAK,KAAK;AACxB,SAAK,iBAAiB;AACtB,SAAK,aAAa,KAAK,KAAK,SAAS,MAAM;AAE3C,WAAO,aAAa,MAAM;AACzB,UAAI,OAAO;AACV,cAAM,MAAM,KAAK,SAAS,QAAQ,KAAK;AACvC,YAAI,OAAO,GAAG;AACb,eAAK,SAAS,OAAO,KAAK,CAAC;AAC3B,eAAK,iBAAiB;AACtB,eAAK,aAAa,KAAK,KAAK,SAAS,MAAM;AAC3C,kBAAQ;AAAA,QACT;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,IAAI,OAA4B;AAC/B,WAAO,KAAK,IAAI,KAAK,EAAE,SAAS;AAAA,EACjC;AAAA,EAEA,IAAI,OAAwB;AAC3B,QAAI,CAAC,OAAO;AACX,aAAO,CAAC;AAAA,IACT;AAEA,SAAK,cAAc,OAAO,KAAK;AAC/B,UAAM,SAAc,CAAC;AAGrB,eAAW,SAAS,KAAK,UAAU;AAClC,UAAI,MAAM,SAAS,GAAG;AACrB,eAAO,KAAK,MAAM,QAAQ;AAAA,MAC3B;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,aAAkB;AACjB,WAAO,KAAK,SAAS,IAAI,WAAS,MAAM,QAAQ;AAAA,EACjD;AAAA,EAEA,QAAQ,OAAmB,YAAY,OAAY;AAClD,UAAM,SAAc,CAAC;AACrB,SAAK,gBAAgB,OAAO,WAAW,WAAS,OAAO,KAAK,MAAM,QAAQ,CAAC;AAC3E,WAAO;AAAA,EACR;AAAA,EAEA,cAAc,OAA0B;AACvC,UAAM,SAAgB,CAAC;AACvB,QAAI;AACJ,QAAI;AAEJ,SAAK,gBAAgB,OAAO,OAAO,WAAS;AAC3C,UAAI,cAAc,oBAAoB,MAAM,QAAQ;AACnD,mBAAW,KAAK,MAAM,QAAQ;AAAA,MAC/B,OAAO;AACN,0BAAkB,MAAM;AACxB,qBAAa,CAAC,MAAM,QAAQ;AAC5B,eAAO,KAAK,UAAU;AAAA,MACvB;AAAA,IACD,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEQ,gBAAgB,OAAmB,WAAoB,UAA6C;AAE3G,SAAK,cAAc,OAAO,SAAS;AAEnC,eAAW,SAAS,KAAK,UAAU;AAClC,UAAI,MAAM,SAAS,GAAG;AACrB,iBAAS,KAAK;AAAA,MACf;AAAA,IACD;AAAA,EACD;AAAA,EAEQ;AAAA,EAEA,cAAc,OAAmB,WAA0B;AAElE,UAAM,eAAe,KAAK,wBAAwB,MAAM,GAAG;AAI3D,UAAM,YAAY,eACf,IAAI,eAAe,MAAM,KAAK,MAAM,cAAc,GAAG,aAAa,KAAK,aAAa,MAAM,SAAS,IACnG,IAAI,eAAe,MAAM,KAAK,MAAM,cAAc,GAAG,QAAW,QAAW,SAAS;AAEvF,QAAI,KAAK,gBAAgB,OAAO,SAAS,GAAG;AAE3C;AAAA,IACD;AAEA,SAAK,iBAAiB;AAEtB,eAAW,SAAS,KAAK,UAAU;AAClC,YAAM,SAAS,MAAM,MAAM,UAAU,UAAU,KAAK,UAAU,YAAY,uBAAuB,KAAK,GAAG,UAAU,aAAa,UAAU,YAAY;AAEtJ,UAAI,YAAY,MAAM,QAAQ,KAAK,MAAM,SAAS,GAAG;AACpD,YAAI,WAAW;AACd,gBAAM,SAAS;AAAA,QAChB,OAAO;AAGN,qBAAWA,UAAS,KAAK,UAAU;AAClC,YAAAA,OAAM,SAAS;AAAA,UAChB;AACA,gBAAM,SAAS;AACf;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,SAAK,SAAS,KAAK,wBAAwB,sBAAsB;AAAA,EAClE;AAAA,EAEA,OAAe,uBAAuB,GAAe,GAAuB;AAC3E,QAAI,EAAE,SAAS,EAAE,QAAQ;AACxB,aAAO;AAAA,IACR,WAAW,EAAE,SAAS,EAAE,QAAQ;AAC/B,aAAO;AAAA,IACR;AAGA,QAAI,kBAAkB,EAAE,QAAQ,KAAK,CAAC,kBAAkB,EAAE,QAAQ,GAAG;AACpE,aAAO;AAAA,IACR,WAAW,CAAC,kBAAkB,EAAE,QAAQ,KAAK,kBAAkB,EAAE,QAAQ,GAAG;AAC3E,aAAO;AAAA,IACR;AAEA,QAAI,EAAE,QAAQ,EAAE,OAAO;AACtB,aAAO;AAAA,IACR,WAAW,EAAE,QAAQ,EAAE,OAAO;AAC7B,aAAO;AAAA,IACR,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AACD;AAEA,SAAS,kBAAkB,UAAqC;AAC/D,MAAI,OAAO,aAAa,UAAU;AACjC,WAAO;AAAA,EACR;AAEA,MAAI,MAAM,QAAQ,QAAQ,GAAG;AAC5B,WAAO,SAAS,KAAK,iBAAiB;AAAA,EACvC;AAEA,SAAO,QAAS,SAA4B,SAAS;AACtD;AAVS;",
  "names": ["entry"]
}
