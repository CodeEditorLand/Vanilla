import"../../base/common/color.js";import{Emitter as p}from"../../base/common/event.js";import{Disposable as a,toDisposable as r}from"../../base/common/lifecycle.js";import"./languages.js";import{ColorId as s}from"./encodedTokenAttributes.js";class z{_tokenizationSupports=new Map;_factories=new Map;_onDidChange=new p;onDidChange=this._onDidChange.event;_colorMap;constructor(){this._colorMap=null}handleChange(t){this._onDidChange.fire({changedLanguages:t,changedColorMap:!1})}register(t,o){return this._tokenizationSupports.set(t,o),this.handleChange([t]),r(()=>{this._tokenizationSupports.get(t)===o&&(this._tokenizationSupports.delete(t),this.handleChange([t]))})}get(t){return this._tokenizationSupports.get(t)||null}registerFactory(t,o){this._factories.get(t)?.dispose();const e=new l(this,t,o);return this._factories.set(t,e),r(()=>{const i=this._factories.get(t);!i||i!==e||(this._factories.delete(t),i.dispose())})}async getOrCreate(t){const o=this.get(t);if(o)return o;const e=this._factories.get(t);return!e||e.isResolved?null:(await e.resolve(),this.get(t))}isResolved(t){if(this.get(t))return!0;const e=this._factories.get(t);return!!(!e||e.isResolved)}setColorMap(t){this._colorMap=t,this._onDidChange.fire({changedLanguages:Array.from(this._tokenizationSupports.keys()),changedColorMap:!0})}getColorMap(){return this._colorMap}getDefaultBackground(){return this._colorMap&&this._colorMap.length>s.DefaultBackground?this._colorMap[s.DefaultBackground]:null}}class l extends a{constructor(o,e,i){super();this._registry=o;this._languageId=e;this._factory=i}_isDisposed=!1;_resolvePromise=null;_isResolved=!1;get isResolved(){return this._isResolved}dispose(){this._isDisposed=!0,super.dispose()}async resolve(){return this._resolvePromise||(this._resolvePromise=this._create()),this._resolvePromise}async _create(){const o=await this._factory.tokenizationSupport;this._isResolved=!0,o&&!this._isDisposed&&this._register(this._registry.register(this._languageId,o))}}export{z as TokenizationRegistry};
