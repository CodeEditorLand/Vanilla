{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewLayout/linesLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorWhitespace, IPartialViewLinesViewportData, IViewWhitespaceViewportData, IWhitespaceChangeAccessor } from '../viewModel.js';\nimport * as strings from '../../../base/common/strings.js';\n\ninterface IPendingChange { id: string; newAfterLineNumber: number; newHeight: number }\ninterface IPendingRemove { id: string }\n\nclass PendingChanges {\n\tprivate _hasPending: boolean;\n\tprivate _inserts: EditorWhitespace[];\n\tprivate _changes: IPendingChange[];\n\tprivate _removes: IPendingRemove[];\n\n\tconstructor() {\n\t\tthis._hasPending = false;\n\t\tthis._inserts = [];\n\t\tthis._changes = [];\n\t\tthis._removes = [];\n\t}\n\n\tpublic insert(x: EditorWhitespace): void {\n\t\tthis._hasPending = true;\n\t\tthis._inserts.push(x);\n\t}\n\n\tpublic change(x: IPendingChange): void {\n\t\tthis._hasPending = true;\n\t\tthis._changes.push(x);\n\t}\n\n\tpublic remove(x: IPendingRemove): void {\n\t\tthis._hasPending = true;\n\t\tthis._removes.push(x);\n\t}\n\n\tpublic mustCommit(): boolean {\n\t\treturn this._hasPending;\n\t}\n\n\tpublic commit(linesLayout: LinesLayout): void {\n\t\tif (!this._hasPending) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inserts = this._inserts;\n\t\tconst changes = this._changes;\n\t\tconst removes = this._removes;\n\n\t\tthis._hasPending = false;\n\t\tthis._inserts = [];\n\t\tthis._changes = [];\n\t\tthis._removes = [];\n\n\t\tlinesLayout._commitPendingChanges(inserts, changes, removes);\n\t}\n}\n\nexport class EditorWhitespace implements IEditorWhitespace {\n\tpublic id: string;\n\tpublic afterLineNumber: number;\n\tpublic ordinal: number;\n\tpublic height: number;\n\tpublic minWidth: number;\n\tpublic prefixSum: number;\n\n\tconstructor(id: string, afterLineNumber: number, ordinal: number, height: number, minWidth: number) {\n\t\tthis.id = id;\n\t\tthis.afterLineNumber = afterLineNumber;\n\t\tthis.ordinal = ordinal;\n\t\tthis.height = height;\n\t\tthis.minWidth = minWidth;\n\t\tthis.prefixSum = 0;\n\t}\n}\n\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n\n\tprivate static INSTANCE_COUNT = 0;\n\n\tprivate readonly _instanceId: string;\n\tprivate readonly _pendingChanges: PendingChanges;\n\tprivate _lastWhitespaceId: number;\n\tprivate _arr: EditorWhitespace[];\n\tprivate _prefixSumValidIndex: number;\n\tprivate _minWidth: number;\n\tprivate _lineCount: number;\n\tprivate _lineHeight: number;\n\tprivate _paddingTop: number;\n\tprivate _paddingBottom: number;\n\n\tconstructor(lineCount: number, lineHeight: number, paddingTop: number, paddingBottom: number) {\n\t\tthis._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n\t\tthis._pendingChanges = new PendingChanges();\n\t\tthis._lastWhitespaceId = 0;\n\t\tthis._arr = [];\n\t\tthis._prefixSumValidIndex = -1;\n\t\tthis._minWidth = -1; /* marker for not being computed */\n\t\tthis._lineCount = lineCount;\n\t\tthis._lineHeight = lineHeight;\n\t\tthis._paddingTop = paddingTop;\n\t\tthis._paddingBottom = paddingBottom;\n\t}\n\n\t/**\n\t * Find the insertion index for a new value inside a sorted array of values.\n\t * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n\t */\n\tpublic static findInsertionIndex(arr: EditorWhitespace[], afterLineNumber: number, ordinal: number): number {\n\t\tlet low = 0;\n\t\tlet high = arr.length;\n\n\t\twhile (low < high) {\n\t\t\tconst mid = ((low + high) >>> 1);\n\n\t\t\tif (afterLineNumber === arr[mid].afterLineNumber) {\n\t\t\t\tif (ordinal < arr[mid].ordinal) {\n\t\t\t\t\thigh = mid;\n\t\t\t\t} else {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t}\n\t\t\t} else if (afterLineNumber < arr[mid].afterLineNumber) {\n\t\t\t\thigh = mid;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t/**\n\t * Change the height of a line in pixels.\n\t */\n\tpublic setLineHeight(lineHeight: number): void {\n\t\tthis._checkPendingChanges();\n\t\tthis._lineHeight = lineHeight;\n\t}\n\n\t/**\n\t * Changes the padding used to calculate vertical offsets.\n\t */\n\tpublic setPadding(paddingTop: number, paddingBottom: number): void {\n\t\tthis._paddingTop = paddingTop;\n\t\tthis._paddingBottom = paddingBottom;\n\t}\n\n\t/**\n\t * Set the number of lines.\n\t *\n\t * @param lineCount New number of lines.\n\t */\n\tpublic onFlushed(lineCount: number): void {\n\t\tthis._checkPendingChanges();\n\t\tthis._lineCount = lineCount;\n\t}\n\n\tpublic changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): boolean {\n\t\tlet hadAChange = false;\n\t\ttry {\n\t\t\tconst accessor: IWhitespaceChangeAccessor = {\n\t\t\t\tinsertWhitespace: (afterLineNumber: number, ordinal: number, heightInPx: number, minWidth: number): string => {\n\t\t\t\t\thadAChange = true;\n\t\t\t\t\tafterLineNumber = afterLineNumber | 0;\n\t\t\t\t\tordinal = ordinal | 0;\n\t\t\t\t\theightInPx = heightInPx | 0;\n\t\t\t\t\tminWidth = minWidth | 0;\n\t\t\t\t\tconst id = this._instanceId + (++this._lastWhitespaceId);\n\t\t\t\t\tthis._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n\t\t\t\t\treturn id;\n\t\t\t\t},\n\t\t\t\tchangeOneWhitespace: (id: string, newAfterLineNumber: number, newHeight: number): void => {\n\t\t\t\t\thadAChange = true;\n\t\t\t\t\tnewAfterLineNumber = newAfterLineNumber | 0;\n\t\t\t\t\tnewHeight = newHeight | 0;\n\t\t\t\t\tthis._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n\t\t\t\t},\n\t\t\t\tremoveWhitespace: (id: string): void => {\n\t\t\t\t\thadAChange = true;\n\t\t\t\t\tthis._pendingChanges.remove({ id });\n\t\t\t\t}\n\t\t\t};\n\t\t\tcallback(accessor);\n\t\t} finally {\n\t\t\tthis._pendingChanges.commit(this);\n\t\t}\n\t\treturn hadAChange;\n\t}\n\n\tpublic _commitPendingChanges(inserts: EditorWhitespace[], changes: IPendingChange[], removes: IPendingRemove[]): void {\n\t\tif (inserts.length > 0 || removes.length > 0) {\n\t\t\tthis._minWidth = -1; /* marker for not being computed */\n\t\t}\n\n\t\tif (inserts.length + changes.length + removes.length <= 1) {\n\t\t\t// when only one thing happened, handle it \"delicately\"\n\t\t\tfor (const insert of inserts) {\n\t\t\t\tthis._insertWhitespace(insert);\n\t\t\t}\n\t\t\tfor (const change of changes) {\n\t\t\t\tthis._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n\t\t\t}\n\t\t\tfor (const remove of removes) {\n\t\t\t\tconst index = this._findWhitespaceIndex(remove.id);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._removeWhitespace(index);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// simply rebuild the entire datastructure\n\n\t\tconst toRemove = new Set<string>();\n\t\tfor (const remove of removes) {\n\t\t\ttoRemove.add(remove.id);\n\t\t}\n\n\t\tconst toChange = new Map<string, IPendingChange>();\n\t\tfor (const change of changes) {\n\t\t\ttoChange.set(change.id, change);\n\t\t}\n\n\t\tconst applyRemoveAndChange = (whitespaces: EditorWhitespace[]): EditorWhitespace[] => {\n\t\t\tconst result: EditorWhitespace[] = [];\n\t\t\tfor (const whitespace of whitespaces) {\n\t\t\t\tif (toRemove.has(whitespace.id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (toChange.has(whitespace.id)) {\n\t\t\t\t\tconst change = toChange.get(whitespace.id)!;\n\t\t\t\t\twhitespace.afterLineNumber = change.newAfterLineNumber;\n\t\t\t\t\twhitespace.height = change.newHeight;\n\t\t\t\t}\n\t\t\t\tresult.push(whitespace);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n\t\tresult.sort((a, b) => {\n\t\t\tif (a.afterLineNumber === b.afterLineNumber) {\n\t\t\t\treturn a.ordinal - b.ordinal;\n\t\t\t}\n\t\t\treturn a.afterLineNumber - b.afterLineNumber;\n\t\t});\n\n\t\tthis._arr = result;\n\t\tthis._prefixSumValidIndex = -1;\n\t}\n\n\tprivate _checkPendingChanges(): void {\n\t\tif (this._pendingChanges.mustCommit()) {\n\t\t\tthis._pendingChanges.commit(this);\n\t\t}\n\t}\n\n\tprivate _insertWhitespace(whitespace: EditorWhitespace): void {\n\t\tconst insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n\t\tthis._arr.splice(insertIndex, 0, whitespace);\n\t\tthis._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n\t}\n\n\tprivate _findWhitespaceIndex(id: string): number {\n\t\tconst arr = this._arr;\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tif (arr[i].id === id) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate _changeOneWhitespace(id: string, newAfterLineNumber: number, newHeight: number): void {\n\t\tconst index = this._findWhitespaceIndex(id);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._arr[index].height !== newHeight) {\n\t\t\tthis._arr[index].height = newHeight;\n\t\t\tthis._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n\t\t}\n\t\tif (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n\t\t\t// `afterLineNumber` changed for this whitespace\n\n\t\t\t// Record old whitespace\n\t\t\tconst whitespace = this._arr[index];\n\n\t\t\t// Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n\t\t\tthis._removeWhitespace(index);\n\n\t\t\twhitespace.afterLineNumber = newAfterLineNumber;\n\n\t\t\t// And add it again\n\t\t\tthis._insertWhitespace(whitespace);\n\t\t}\n\t}\n\n\tprivate _removeWhitespace(removeIndex: number): void {\n\t\tthis._arr.splice(removeIndex, 1);\n\t\tthis._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n\t}\n\n\t/**\n\t * Notify the layouter that lines have been deleted (a continuous zone of lines).\n\t *\n\t * @param fromLineNumber The line number at which the deletion started, inclusive\n\t * @param toLineNumber The line number at which the deletion ended, inclusive\n\t */\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._checkPendingChanges();\n\t\tfromLineNumber = fromLineNumber | 0;\n\t\ttoLineNumber = toLineNumber | 0;\n\n\t\tthis._lineCount -= (toLineNumber - fromLineNumber + 1);\n\t\tfor (let i = 0, len = this._arr.length; i < len; i++) {\n\t\t\tconst afterLineNumber = this._arr[i].afterLineNumber;\n\n\t\t\tif (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n\t\t\t\t// The line this whitespace was after has been deleted\n\t\t\t\t//  => move whitespace to before first deleted line\n\t\t\t\tthis._arr[i].afterLineNumber = fromLineNumber - 1;\n\t\t\t} else if (afterLineNumber > toLineNumber) {\n\t\t\t\t// The line this whitespace was after has been moved up\n\t\t\t\t//  => move whitespace up\n\t\t\t\tthis._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Notify the layouter that lines have been inserted (a continuous zone of lines).\n\t *\n\t * @param fromLineNumber The line number at which the insertion started, inclusive\n\t * @param toLineNumber The line number at which the insertion ended, inclusive.\n\t */\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._checkPendingChanges();\n\t\tfromLineNumber = fromLineNumber | 0;\n\t\ttoLineNumber = toLineNumber | 0;\n\n\t\tthis._lineCount += (toLineNumber - fromLineNumber + 1);\n\t\tfor (let i = 0, len = this._arr.length; i < len; i++) {\n\t\t\tconst afterLineNumber = this._arr[i].afterLineNumber;\n\n\t\t\tif (fromLineNumber <= afterLineNumber) {\n\t\t\t\tthis._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the sum of all the whitespaces.\n\t */\n\tpublic getWhitespacesTotalHeight(): number {\n\t\tthis._checkPendingChanges();\n\t\tif (this._arr.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n\t}\n\n\t/**\n\t * Return the sum of the heights of the whitespaces at [0..index].\n\t * This includes the whitespace at `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n\t */\n\tpublic getWhitespacesAccumulatedHeight(index: number): number {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\tlet startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n\t\tif (startIndex === 0) {\n\t\t\tthis._arr[0].prefixSum = this._arr[0].height;\n\t\t\tstartIndex++;\n\t\t}\n\n\t\tfor (let i = startIndex; i <= index; i++) {\n\t\t\tthis._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n\t\t}\n\t\tthis._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n\t\treturn this._arr[index].prefixSum;\n\t}\n\n\t/**\n\t * Get the sum of heights for all objects.\n\t *\n\t * @return The sum of heights for all objects.\n\t */\n\tpublic getLinesTotalHeight(): number {\n\t\tthis._checkPendingChanges();\n\t\tconst linesHeight = this._lineHeight * this._lineCount;\n\t\tconst whitespacesHeight = this.getWhitespacesTotalHeight();\n\n\t\treturn linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n\t}\n\n\t/**\n\t * Returns the accumulated height of whitespaces before the given line number.\n\t *\n\t * @param lineNumber The line number\n\t */\n\tpublic getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber: number): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\n\t\tconst lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n\n\t\tif (lastWhitespaceBeforeLineNumber === -1) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n\t}\n\n\tprivate _findLastWhitespaceBeforeLineNumber(lineNumber: number): number {\n\t\tlineNumber = lineNumber | 0;\n\n\t\t// Find the whitespace before line number\n\t\tconst arr = this._arr;\n\t\tlet low = 0;\n\t\tlet high = arr.length - 1;\n\n\t\twhile (low <= high) {\n\t\t\tconst delta = (high - low) | 0;\n\t\t\tconst halfDelta = (delta / 2) | 0;\n\t\t\tconst mid = (low + halfDelta) | 0;\n\n\t\t\tif (arr[mid].afterLineNumber < lineNumber) {\n\t\t\t\tif (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n\t\t\t\t\treturn mid;\n\t\t\t\t} else {\n\t\t\t\t\tlow = (mid + 1) | 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thigh = (mid - 1) | 0;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tprivate _findFirstWhitespaceAfterLineNumber(lineNumber: number): number {\n\t\tlineNumber = lineNumber | 0;\n\n\t\tconst lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n\t\tconst firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n\n\t\tif (firstWhitespaceAfterLineNumber < this._arr.length) {\n\t\t\treturn firstWhitespaceAfterLineNumber;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n\t * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n\t */\n\tpublic getFirstWhitespaceIndexAfterLineNumber(lineNumber: number): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\n\t\treturn this._findFirstWhitespaceAfterLineNumber(lineNumber);\n\t}\n\n\t/**\n\t * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n\t *\n\t * @param lineNumber The line number\n\t * @return The sum of heights for all objects above `lineNumber`.\n\t */\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number, includeViewZones = false): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\n\t\tlet previousLinesHeight: number;\n\t\tif (lineNumber > 1) {\n\t\t\tpreviousLinesHeight = this._lineHeight * (lineNumber - 1);\n\t\t} else {\n\t\t\tpreviousLinesHeight = 0;\n\t\t}\n\n\t\tconst previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n\n\t\treturn previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n\t}\n\n\t/**\n\t * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n\t *\n\t * @param lineNumber The line number\n\t * @return The sum of heights for all objects above `lineNumber`.\n\t */\n\tpublic getVerticalOffsetAfterLineNumber(lineNumber: number, includeViewZones = false): number {\n\t\tthis._checkPendingChanges();\n\t\tlineNumber = lineNumber | 0;\n\t\tconst previousLinesHeight = this._lineHeight * lineNumber;\n\t\tconst previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n\t\treturn previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n\t}\n\n\t/**\n\t * Returns if there is any whitespace in the document.\n\t */\n\tpublic hasWhitespace(): boolean {\n\t\tthis._checkPendingChanges();\n\t\treturn this.getWhitespacesCount() > 0;\n\t}\n\n\t/**\n\t * The maximum min width for all whitespaces.\n\t */\n\tpublic getWhitespaceMinWidth(): number {\n\t\tthis._checkPendingChanges();\n\t\tif (this._minWidth === -1) {\n\t\t\tlet minWidth = 0;\n\t\t\tfor (let i = 0, len = this._arr.length; i < len; i++) {\n\t\t\t\tminWidth = Math.max(minWidth, this._arr[i].minWidth);\n\t\t\t}\n\t\t\tthis._minWidth = minWidth;\n\t\t}\n\t\treturn this._minWidth;\n\t}\n\n\t/**\n\t * Check if `verticalOffset` is below all lines.\n\t */\n\tpublic isAfterLines(verticalOffset: number): boolean {\n\t\tthis._checkPendingChanges();\n\t\tconst totalHeight = this.getLinesTotalHeight();\n\t\treturn verticalOffset > totalHeight;\n\t}\n\n\tpublic isInTopPadding(verticalOffset: number): boolean {\n\t\tif (this._paddingTop === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._checkPendingChanges();\n\t\treturn (verticalOffset < this._paddingTop);\n\t}\n\n\tpublic isInBottomPadding(verticalOffset: number): boolean {\n\t\tif (this._paddingBottom === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._checkPendingChanges();\n\t\tconst totalHeight = this.getLinesTotalHeight();\n\t\treturn (verticalOffset >= totalHeight - this._paddingBottom);\n\t}\n\n\t/**\n\t * Find the first line number that is at or after vertical offset `verticalOffset`.\n\t * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n\t * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n\t *\n\t * @param verticalOffset The vertical offset to search at.\n\t * @return The line number at or after vertical offset `verticalOffset`.\n\t */\n\tpublic getLineNumberAtOrAfterVerticalOffset(verticalOffset: number): number {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset = verticalOffset | 0;\n\n\t\tif (verticalOffset < 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst linesCount = this._lineCount | 0;\n\t\tconst lineHeight = this._lineHeight;\n\t\tlet minLineNumber = 1;\n\t\tlet maxLineNumber = linesCount;\n\n\t\twhile (minLineNumber < maxLineNumber) {\n\t\t\tconst midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n\n\t\t\tconst midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n\n\t\t\tif (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n\t\t\t\t// vertical offset is after mid line number\n\t\t\t\tminLineNumber = midLineNumber + 1;\n\t\t\t} else if (verticalOffset >= midLineNumberVerticalOffset) {\n\t\t\t\t// Hit\n\t\t\t\treturn midLineNumber;\n\t\t\t} else {\n\t\t\t\t// vertical offset is before mid line number, but mid line number could still be what we're searching for\n\t\t\t\tmaxLineNumber = midLineNumber;\n\t\t\t}\n\t\t}\n\n\t\tif (minLineNumber > linesCount) {\n\t\t\treturn linesCount;\n\t\t}\n\n\t\treturn minLineNumber;\n\t}\n\n\t/**\n\t * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport.\n\t * @param verticalOffset2 The end of the viewport.\n\t * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n\t */\n\tpublic getLinesViewportData(verticalOffset1: number, verticalOffset2: number): IPartialViewLinesViewportData {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset1 = verticalOffset1 | 0;\n\t\tverticalOffset2 = verticalOffset2 | 0;\n\t\tconst lineHeight = this._lineHeight;\n\n\t\t// Find first line number\n\t\t// We don't live in a perfect world, so the line number might start before or after verticalOffset1\n\t\tconst startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n\t\tconst startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n\n\t\tlet endLineNumber = this._lineCount | 0;\n\n\t\t// Also keep track of what whitespace we've got\n\t\tlet whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n\t\tconst whitespaceCount = this.getWhitespacesCount() | 0;\n\t\tlet currentWhitespaceHeight: number;\n\t\tlet currentWhitespaceAfterLineNumber: number;\n\n\t\tif (whitespaceIndex === -1) {\n\t\t\twhitespaceIndex = whitespaceCount;\n\t\t\tcurrentWhitespaceAfterLineNumber = endLineNumber + 1;\n\t\t\tcurrentWhitespaceHeight = 0;\n\t\t} else {\n\t\t\tcurrentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t\tcurrentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t}\n\n\t\tlet currentVerticalOffset = startLineNumberVerticalOffset;\n\t\tlet currentLineRelativeOffset = currentVerticalOffset;\n\n\t\t// IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n\t\tconst STEP_SIZE = 500000;\n\t\tlet bigNumbersDelta = 0;\n\t\tif (startLineNumberVerticalOffset >= STEP_SIZE) {\n\t\t\t// Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n\t\t\tbigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n\t\t\tbigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n\n\t\t\tcurrentLineRelativeOffset -= bigNumbersDelta;\n\t\t}\n\n\t\tconst linesOffsets: number[] = [];\n\n\t\tconst verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n\t\tlet centeredLineNumber = -1;\n\n\t\t// Figure out how far the lines go\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\n\t\t\tif (centeredLineNumber === -1) {\n\t\t\t\tconst currentLineTop = currentVerticalOffset;\n\t\t\t\tconst currentLineBottom = currentVerticalOffset + lineHeight;\n\t\t\t\tif ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n\t\t\t\t\tcenteredLineNumber = lineNumber;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Count current line height in the vertical offsets\n\t\t\tcurrentVerticalOffset += lineHeight;\n\t\t\tlinesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n\n\t\t\t// Next line starts immediately after this one\n\t\t\tcurrentLineRelativeOffset += lineHeight;\n\t\t\twhile (currentWhitespaceAfterLineNumber === lineNumber) {\n\t\t\t\t// Push down next line with the height of the current whitespace\n\t\t\t\tcurrentLineRelativeOffset += currentWhitespaceHeight;\n\n\t\t\t\t// Count current whitespace in the vertical offsets\n\t\t\t\tcurrentVerticalOffset += currentWhitespaceHeight;\n\t\t\t\twhitespaceIndex++;\n\n\t\t\t\tif (whitespaceIndex >= whitespaceCount) {\n\t\t\t\t\tcurrentWhitespaceAfterLineNumber = endLineNumber + 1;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t\t\t\tcurrentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (currentVerticalOffset >= verticalOffset2) {\n\t\t\t\t// We have covered the entire viewport area, time to stop\n\t\t\t\tendLineNumber = lineNumber;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (centeredLineNumber === -1) {\n\t\t\tcenteredLineNumber = endLineNumber;\n\t\t}\n\n\t\tconst endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n\n\t\tlet completelyVisibleStartLineNumber = startLineNumber;\n\t\tlet completelyVisibleEndLineNumber = endLineNumber;\n\n\t\tif (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n\t\t\tif (startLineNumberVerticalOffset < verticalOffset1) {\n\t\t\t\tcompletelyVisibleStartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tif (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n\t\t\tif (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n\t\t\t\tcompletelyVisibleEndLineNumber--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tbigNumbersDelta: bigNumbersDelta,\n\t\t\tstartLineNumber: startLineNumber,\n\t\t\tendLineNumber: endLineNumber,\n\t\t\trelativeVerticalOffset: linesOffsets,\n\t\t\tcenteredLineNumber: centeredLineNumber,\n\t\t\tcompletelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n\t\t\tcompletelyVisibleEndLineNumber: completelyVisibleEndLineNumber,\n\t\t\tlineHeight: this._lineHeight,\n\t\t};\n\t}\n\n\tpublic getVerticalOffsetForWhitespaceIndex(whitespaceIndex: number): number {\n\t\tthis._checkPendingChanges();\n\t\twhitespaceIndex = whitespaceIndex | 0;\n\n\t\tconst afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n\n\t\tlet previousLinesHeight: number;\n\t\tif (afterLineNumber >= 1) {\n\t\t\tpreviousLinesHeight = this._lineHeight * afterLineNumber;\n\t\t} else {\n\t\t\tpreviousLinesHeight = 0;\n\t\t}\n\n\t\tlet previousWhitespacesHeight: number;\n\t\tif (whitespaceIndex > 0) {\n\t\t\tpreviousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n\t\t} else {\n\t\t\tpreviousWhitespacesHeight = 0;\n\t\t}\n\t\treturn previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n\t}\n\n\tpublic getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset: number): number {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset = verticalOffset | 0;\n\n\t\tlet minWhitespaceIndex = 0;\n\t\tlet maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n\n\t\tif (maxWhitespaceIndex < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Special case: nothing to be found\n\t\tconst maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n\t\tconst maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n\t\tif (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (minWhitespaceIndex < maxWhitespaceIndex) {\n\t\t\tconst midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n\n\t\t\tconst midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n\t\t\tconst midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n\n\t\t\tif (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n\t\t\t\t// vertical offset is after whitespace\n\t\t\t\tminWhitespaceIndex = midWhitespaceIndex + 1;\n\t\t\t} else if (verticalOffset >= midWhitespaceVerticalOffset) {\n\t\t\t\t// Hit\n\t\t\t\treturn midWhitespaceIndex;\n\t\t\t} else {\n\t\t\t\t// vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n\t\t\t\tmaxWhitespaceIndex = midWhitespaceIndex;\n\t\t\t}\n\t\t}\n\t\treturn minWhitespaceIndex;\n\t}\n\n\t/**\n\t * Get exactly the whitespace that is layouted at `verticalOffset`.\n\t *\n\t * @param verticalOffset The vertical offset.\n\t * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n\t */\n\tpublic getWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset = verticalOffset | 0;\n\n\t\tconst candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n\n\t\tif (candidateIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (candidateIndex >= this.getWhitespacesCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n\n\t\tif (candidateTop > verticalOffset) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n\t\tconst candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n\t\tconst candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n\n\t\treturn {\n\t\t\tid: candidateId,\n\t\t\tafterLineNumber: candidateAfterLineNumber,\n\t\t\tverticalOffset: candidateTop,\n\t\t\theight: candidateHeight\n\t\t};\n\t}\n\n\t/**\n\t * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n\t *\n\t * @param verticalOffset1 The beginning of the viewport.\n\t * @param verticalOffset2 The end of the viewport.\n\t * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n\t */\n\tpublic getWhitespaceViewportData(verticalOffset1: number, verticalOffset2: number): IViewWhitespaceViewportData[] {\n\t\tthis._checkPendingChanges();\n\t\tverticalOffset1 = verticalOffset1 | 0;\n\t\tverticalOffset2 = verticalOffset2 | 0;\n\n\t\tconst startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n\t\tconst endIndex = this.getWhitespacesCount() - 1;\n\n\t\tif (startIndex < 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: IViewWhitespaceViewportData[] = [];\n\t\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\t\tconst top = this.getVerticalOffsetForWhitespaceIndex(i);\n\t\t\tconst height = this.getHeightForWhitespaceIndex(i);\n\t\t\tif (top >= verticalOffset2) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tresult.push({\n\t\t\t\tid: this.getIdForWhitespaceIndex(i),\n\t\t\t\tafterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n\t\t\t\tverticalOffset: top,\n\t\t\t\theight: height\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get all whitespaces.\n\t */\n\tpublic getWhitespaces(): IEditorWhitespace[] {\n\t\tthis._checkPendingChanges();\n\t\treturn this._arr.slice(0);\n\t}\n\n\t/**\n\t * The number of whitespaces.\n\t */\n\tpublic getWhitespacesCount(): number {\n\t\tthis._checkPendingChanges();\n\t\treturn this._arr.length;\n\t}\n\n\t/**\n\t * Get the `id` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `id` of whitespace at `index`.\n\t */\n\tpublic getIdForWhitespaceIndex(index: number): string {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\treturn this._arr[index].id;\n\t}\n\n\t/**\n\t * Get the `afterLineNumber` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `afterLineNumber` of whitespace at `index`.\n\t */\n\tpublic getAfterLineNumberForWhitespaceIndex(index: number): number {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\treturn this._arr[index].afterLineNumber;\n\t}\n\n\t/**\n\t * Get the `height` for whitespace at index `index`.\n\t *\n\t * @param index The index of the whitespace.\n\t * @return `height` of whitespace at `index`.\n\t */\n\tpublic getHeightForWhitespaceIndex(index: number): number {\n\t\tthis._checkPendingChanges();\n\t\tindex = index | 0;\n\n\t\treturn this._arr[index].height;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
