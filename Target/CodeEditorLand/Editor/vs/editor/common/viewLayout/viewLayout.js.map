{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewLayout/viewLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { IScrollPosition, ScrollEvent, Scrollable, ScrollbarVisibility, INewScrollPosition } from '../../../base/common/scrollable.js';\nimport { ConfigurationChangedEvent, EditorOption } from '../config/editorOptions.js';\nimport { ScrollType } from '../editorCommon.js';\nimport { IEditorConfiguration } from '../config/editorConfiguration.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { IEditorWhitespace, IPartialViewLinesViewportData, IViewLayout, IViewWhitespaceViewportData, IWhitespaceChangeAccessor, Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\n\nconst SMOOTH_SCROLLING_TIME = 125;\n\nclass EditorScrollDimensions {\n\n\tpublic readonly width: number;\n\tpublic readonly contentWidth: number;\n\tpublic readonly scrollWidth: number;\n\n\tpublic readonly height: number;\n\tpublic readonly contentHeight: number;\n\tpublic readonly scrollHeight: number;\n\n\tconstructor(\n\t\twidth: number,\n\t\tcontentWidth: number,\n\t\theight: number,\n\t\tcontentHeight: number,\n\t) {\n\t\twidth = width | 0;\n\t\tcontentWidth = contentWidth | 0;\n\t\theight = height | 0;\n\t\tcontentHeight = contentHeight | 0;\n\n\t\tif (width < 0) {\n\t\t\twidth = 0;\n\t\t}\n\t\tif (contentWidth < 0) {\n\t\t\tcontentWidth = 0;\n\t\t}\n\n\t\tif (height < 0) {\n\t\t\theight = 0;\n\t\t}\n\t\tif (contentHeight < 0) {\n\t\t\tcontentHeight = 0;\n\t\t}\n\n\t\tthis.width = width;\n\t\tthis.contentWidth = contentWidth;\n\t\tthis.scrollWidth = Math.max(width, contentWidth);\n\n\t\tthis.height = height;\n\t\tthis.contentHeight = contentHeight;\n\t\tthis.scrollHeight = Math.max(height, contentHeight);\n\t}\n\n\tpublic equals(other: EditorScrollDimensions): boolean {\n\t\treturn (\n\t\t\tthis.width === other.width\n\t\t\t&& this.contentWidth === other.contentWidth\n\t\t\t&& this.height === other.height\n\t\t\t&& this.contentHeight === other.contentHeight\n\t\t);\n\t}\n}\n\nclass EditorScrollable extends Disposable {\n\n\tprivate readonly _scrollable: Scrollable;\n\tprivate _dimensions: EditorScrollDimensions;\n\n\tpublic readonly onDidScroll: Event<ScrollEvent>;\n\n\tprivate readonly _onDidContentSizeChange = this._register(new Emitter<ContentSizeChangedEvent>());\n\tpublic readonly onDidContentSizeChange: Event<ContentSizeChangedEvent> = this._onDidContentSizeChange.event;\n\n\tconstructor(smoothScrollDuration: number, scheduleAtNextAnimationFrame: (callback: () => void) => IDisposable) {\n\t\tsuper();\n\t\tthis._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n\t\tthis._scrollable = this._register(new Scrollable({\n\t\t\tforceIntegerValues: true,\n\t\t\tsmoothScrollDuration,\n\t\t\tscheduleAtNextAnimationFrame\n\t\t}));\n\t\tthis.onDidScroll = this._scrollable.onScroll;\n\t}\n\n\tpublic getScrollable(): Scrollable {\n\t\treturn this._scrollable;\n\t}\n\n\tpublic setSmoothScrollDuration(smoothScrollDuration: number): void {\n\t\tthis._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n\t}\n\n\tpublic validateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition {\n\t\treturn this._scrollable.validateScrollPosition(scrollPosition);\n\t}\n\n\tpublic getScrollDimensions(): EditorScrollDimensions {\n\t\treturn this._dimensions;\n\t}\n\n\tpublic setScrollDimensions(dimensions: EditorScrollDimensions): void {\n\t\tif (this._dimensions.equals(dimensions)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldDimensions = this._dimensions;\n\t\tthis._dimensions = dimensions;\n\n\t\tthis._scrollable.setScrollDimensions({\n\t\t\twidth: dimensions.width,\n\t\t\tscrollWidth: dimensions.scrollWidth,\n\t\t\theight: dimensions.height,\n\t\t\tscrollHeight: dimensions.scrollHeight\n\t\t}, true);\n\n\t\tconst contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n\t\tconst contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n\t\tif (contentWidthChanged || contentHeightChanged) {\n\t\t\tthis._onDidContentSizeChange.fire(new ContentSizeChangedEvent(\n\t\t\t\toldDimensions.contentWidth, oldDimensions.contentHeight,\n\t\t\t\tdimensions.contentWidth, dimensions.contentHeight\n\t\t\t));\n\t\t}\n\t}\n\n\tpublic getFutureScrollPosition(): IScrollPosition {\n\t\treturn this._scrollable.getFutureScrollPosition();\n\t}\n\n\tpublic getCurrentScrollPosition(): IScrollPosition {\n\t\treturn this._scrollable.getCurrentScrollPosition();\n\t}\n\n\tpublic setScrollPositionNow(update: INewScrollPosition): void {\n\t\tthis._scrollable.setScrollPositionNow(update);\n\t}\n\n\tpublic setScrollPositionSmooth(update: INewScrollPosition): void {\n\t\tthis._scrollable.setScrollPositionSmooth(update);\n\t}\n\n\tpublic hasPendingScrollAnimation(): boolean {\n\t\treturn this._scrollable.hasPendingScrollAnimation();\n\t}\n}\n\nexport class ViewLayout extends Disposable implements IViewLayout {\n\n\tprivate readonly _configuration: IEditorConfiguration;\n\tprivate readonly _linesLayout: LinesLayout;\n\tprivate _maxLineWidth: number;\n\tprivate _overlayWidgetsMinWidth: number;\n\n\tprivate readonly _scrollable: EditorScrollable;\n\tpublic readonly onDidScroll: Event<ScrollEvent>;\n\tpublic readonly onDidContentSizeChange: Event<ContentSizeChangedEvent>;\n\n\tconstructor(configuration: IEditorConfiguration, lineCount: number, scheduleAtNextAnimationFrame: (callback: () => void) => IDisposable) {\n\t\tsuper();\n\n\t\tthis._configuration = configuration;\n\t\tconst options = this._configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst padding = options.get(EditorOption.padding);\n\n\t\tthis._linesLayout = new LinesLayout(lineCount, options.get(EditorOption.lineHeight), padding.top, padding.bottom);\n\t\tthis._maxLineWidth = 0;\n\t\tthis._overlayWidgetsMinWidth = 0;\n\n\t\tthis._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n\t\tthis._configureSmoothScrollDuration();\n\n\t\tthis._scrollable.setScrollDimensions(new EditorScrollDimensions(\n\t\t\tlayoutInfo.contentWidth,\n\t\t\t0,\n\t\t\tlayoutInfo.height,\n\t\t\t0\n\t\t));\n\t\tthis.onDidScroll = this._scrollable.onDidScroll;\n\t\tthis.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n\n\t\tthis._updateHeight();\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic getScrollable(): Scrollable {\n\t\treturn this._scrollable.getScrollable();\n\t}\n\n\tpublic onHeightMaybeChanged(): void {\n\t\tthis._updateHeight();\n\t}\n\n\tprivate _configureSmoothScrollDuration(): void {\n\t\tthis._scrollable.setSmoothScrollDuration(this._configuration.options.get(EditorOption.smoothScrolling) ? SMOOTH_SCROLLING_TIME : 0);\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tconst options = this._configuration.options;\n\t\tif (e.hasChanged(EditorOption.lineHeight)) {\n\t\t\tthis._linesLayout.setLineHeight(options.get(EditorOption.lineHeight));\n\t\t}\n\t\tif (e.hasChanged(EditorOption.padding)) {\n\t\t\tconst padding = options.get(EditorOption.padding);\n\t\t\tthis._linesLayout.setPadding(padding.top, padding.bottom);\n\t\t}\n\t\tif (e.hasChanged(EditorOption.layoutInfo)) {\n\t\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\t\tconst width = layoutInfo.contentWidth;\n\t\t\tconst height = layoutInfo.height;\n\t\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\t\tconst contentWidth = scrollDimensions.contentWidth;\n\t\t\tthis._scrollable.setScrollDimensions(new EditorScrollDimensions(\n\t\t\t\twidth,\n\t\t\t\tscrollDimensions.contentWidth,\n\t\t\t\theight,\n\t\t\t\tthis._getContentHeight(width, height, contentWidth)\n\t\t\t));\n\t\t} else {\n\t\t\tthis._updateHeight();\n\t\t}\n\t\tif (e.hasChanged(EditorOption.smoothScrolling)) {\n\t\t\tthis._configureSmoothScrollDuration();\n\t\t}\n\t}\n\tpublic onFlushed(lineCount: number): void {\n\t\tthis._linesLayout.onFlushed(lineCount);\n\t}\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n\t}\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n\t}\n\n\t// ---- end view event handlers\n\n\tprivate _getHorizontalScrollbarHeight(width: number, scrollWidth: number): number {\n\t\tconst options = this._configuration.options;\n\t\tconst scrollbar = options.get(EditorOption.scrollbar);\n\t\tif (scrollbar.horizontal === ScrollbarVisibility.Hidden) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\tif (width >= scrollWidth) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\treturn scrollbar.horizontalScrollbarSize;\n\t}\n\n\tprivate _getContentHeight(width: number, height: number, contentWidth: number): number {\n\t\tconst options = this._configuration.options;\n\n\t\tlet result = this._linesLayout.getLinesTotalHeight();\n\t\tif (options.get(EditorOption.scrollBeyondLastLine)) {\n\t\t\tresult += Math.max(0, height - options.get(EditorOption.lineHeight) - options.get(EditorOption.padding).bottom);\n\t\t} else if (!options.get(EditorOption.scrollbar).ignoreHorizontalScrollbarInContentHeight) {\n\t\t\tresult += this._getHorizontalScrollbarHeight(width, contentWidth);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _updateHeight(): void {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst width = scrollDimensions.width;\n\t\tconst height = scrollDimensions.height;\n\t\tconst contentWidth = scrollDimensions.contentWidth;\n\t\tthis._scrollable.setScrollDimensions(new EditorScrollDimensions(\n\t\t\twidth,\n\t\t\tscrollDimensions.contentWidth,\n\t\t\theight,\n\t\t\tthis._getContentHeight(width, height, contentWidth)\n\t\t));\n\t}\n\n\t// ---- Layouting logic\n\n\tpublic getCurrentViewport(): Viewport {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height\n\t\t);\n\t}\n\n\tpublic getFutureViewport(): Viewport {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height\n\t\t);\n\t}\n\n\tprivate _computeContentWidth(): number {\n\t\tconst options = this._configuration.options;\n\t\tconst maxLineWidth = this._maxLineWidth;\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tif (wrappingInfo.isViewportWrapping) {\n\t\t\tconst minimap = options.get(EditorOption.minimap);\n\t\t\tif (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n\t\t\t\t// This is a case where viewport wrapping is on, but the line extends above the viewport\n\t\t\t\tif (minimap.enabled && minimap.side === 'right') {\n\t\t\t\t\t// We need to accomodate the scrollbar width\n\t\t\t\t\treturn maxLineWidth + layoutInfo.verticalScrollbarWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxLineWidth;\n\t\t} else {\n\t\t\tconst extraHorizontalSpace = options.get(EditorOption.scrollBeyondLastColumn) * fontInfo.typicalHalfwidthCharacterWidth;\n\t\t\tconst whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n\t\t\treturn Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n\t\t}\n\t}\n\n\tpublic setMaxLineWidth(maxLineWidth: number): void {\n\t\tthis._maxLineWidth = maxLineWidth;\n\t\tthis._updateContentWidth();\n\t}\n\n\tpublic setOverlayWidgetsMinWidth(maxMinWidth: number): void {\n\t\tthis._overlayWidgetsMinWidth = maxMinWidth;\n\t\tthis._updateContentWidth();\n\t}\n\n\tprivate _updateContentWidth(): void {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tthis._scrollable.setScrollDimensions(new EditorScrollDimensions(\n\t\t\tscrollDimensions.width,\n\t\t\tthis._computeContentWidth(),\n\t\t\tscrollDimensions.height,\n\t\t\tscrollDimensions.contentHeight\n\t\t));\n\n\t\t// The height might depend on the fact that there is a horizontal scrollbar or not\n\t\tthis._updateHeight();\n\t}\n\n\t// ---- view state\n\n\tpublic saveState(): { scrollTop: number; scrollTopWithoutViewZones: number; scrollLeft: number } {\n\t\tconst currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\t\tconst scrollTop = currentScrollPosition.scrollTop;\n\t\tconst firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n\t\tconst whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n\t\treturn {\n\t\t\tscrollTop: scrollTop,\n\t\t\tscrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n\t\t\tscrollLeft: currentScrollPosition.scrollLeft\n\t\t};\n\t}\n\n\t// ----\n\tpublic changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): boolean {\n\t\tconst hadAChange = this._linesLayout.changeWhitespace(callback);\n\t\tif (hadAChange) {\n\t\t\tthis.onHeightMaybeChanged();\n\t\t}\n\t\treturn hadAChange;\n\t}\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number, includeViewZones: boolean = false): number {\n\t\treturn this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n\t}\n\tpublic getVerticalOffsetAfterLineNumber(lineNumber: number, includeViewZones: boolean = false): number {\n\t\treturn this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n\t}\n\tpublic isAfterLines(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isAfterLines(verticalOffset);\n\t}\n\tpublic isInTopPadding(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isInTopPadding(verticalOffset);\n\t}\n\tisInBottomPadding(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isInBottomPadding(verticalOffset);\n\t}\n\n\tpublic getLineNumberAtVerticalOffset(verticalOffset: number): number {\n\t\treturn this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n\t}\n\n\tpublic getWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null {\n\t\treturn this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n\t}\n\tpublic getLinesViewportData(): IPartialViewLinesViewportData {\n\t\tconst visibleBox = this.getCurrentViewport();\n\t\treturn this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n\t}\n\tpublic getLinesViewportDataAtScrollTop(scrollTop: number): IPartialViewLinesViewportData {\n\t\t// do some minimal validations on scrollTop\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tif (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n\t\t\tscrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n\t\t}\n\t\tif (scrollTop < 0) {\n\t\t\tscrollTop = 0;\n\t\t}\n\t\treturn this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n\t}\n\tpublic getWhitespaceViewportData(): IViewWhitespaceViewportData[] {\n\t\tconst visibleBox = this.getCurrentViewport();\n\t\treturn this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n\t}\n\tpublic getWhitespaces(): IEditorWhitespace[] {\n\t\treturn this._linesLayout.getWhitespaces();\n\t}\n\n\t// ----\n\n\tpublic getContentWidth(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.contentWidth;\n\t}\n\tpublic getScrollWidth(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.scrollWidth;\n\t}\n\tpublic getContentHeight(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.contentHeight;\n\t}\n\tpublic getScrollHeight(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.scrollHeight;\n\t}\n\n\tpublic getCurrentScrollLeft(): number {\n\t\tconst currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\t\treturn currentScrollPosition.scrollLeft;\n\t}\n\tpublic getCurrentScrollTop(): number {\n\t\tconst currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\t\treturn currentScrollPosition.scrollTop;\n\t}\n\n\tpublic validateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition {\n\t\treturn this._scrollable.validateScrollPosition(scrollPosition);\n\t}\n\n\tpublic setScrollPosition(position: INewScrollPosition, type: ScrollType): void {\n\t\tif (type === ScrollType.Immediate) {\n\t\t\tthis._scrollable.setScrollPositionNow(position);\n\t\t} else {\n\t\t\tthis._scrollable.setScrollPositionSmooth(position);\n\t\t}\n\t}\n\n\tpublic hasPendingScrollAnimation(): boolean {\n\t\treturn this._scrollable.hasPendingScrollAnimation();\n\t}\n\n\tpublic deltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void {\n\t\tconst currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\t\tthis._scrollable.setScrollPositionNow({\n\t\t\tscrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n\t\t\tscrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
