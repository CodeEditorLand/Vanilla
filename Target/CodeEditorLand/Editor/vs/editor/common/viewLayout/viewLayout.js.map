{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/viewLayout/viewLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype INewScrollPosition,\n\ttype IScrollPosition,\n\ttype ScrollEvent,\n\tScrollable,\n\tScrollbarVisibility,\n} from \"../../../base/common/scrollable.js\";\nimport type { IEditorConfiguration } from \"../config/editorConfiguration.js\";\nimport {\n\ttype ConfigurationChangedEvent,\n\tEditorOption,\n} from \"../config/editorOptions.js\";\nimport { ScrollType } from \"../editorCommon.js\";\nimport {\n\ttype IEditorWhitespace,\n\ttype IPartialViewLinesViewportData,\n\ttype IViewLayout,\n\ttype IViewWhitespaceViewportData,\n\ttype IWhitespaceChangeAccessor,\n\tViewport,\n} from \"../viewModel.js\";\nimport { ContentSizeChangedEvent } from \"../viewModelEventDispatcher.js\";\nimport { LinesLayout } from \"./linesLayout.js\";\n\nconst SMOOTH_SCROLLING_TIME = 125;\n\nclass EditorScrollDimensions {\n\tpublic readonly width: number;\n\tpublic readonly contentWidth: number;\n\tpublic readonly scrollWidth: number;\n\n\tpublic readonly height: number;\n\tpublic readonly contentHeight: number;\n\tpublic readonly scrollHeight: number;\n\n\tconstructor(\n\t\twidth: number,\n\t\tcontentWidth: number,\n\t\theight: number,\n\t\tcontentHeight: number,\n\t) {\n\t\twidth = width | 0;\n\t\tcontentWidth = contentWidth | 0;\n\t\theight = height | 0;\n\t\tcontentHeight = contentHeight | 0;\n\n\t\tif (width < 0) {\n\t\t\twidth = 0;\n\t\t}\n\t\tif (contentWidth < 0) {\n\t\t\tcontentWidth = 0;\n\t\t}\n\n\t\tif (height < 0) {\n\t\t\theight = 0;\n\t\t}\n\t\tif (contentHeight < 0) {\n\t\t\tcontentHeight = 0;\n\t\t}\n\n\t\tthis.width = width;\n\t\tthis.contentWidth = contentWidth;\n\t\tthis.scrollWidth = Math.max(width, contentWidth);\n\n\t\tthis.height = height;\n\t\tthis.contentHeight = contentHeight;\n\t\tthis.scrollHeight = Math.max(height, contentHeight);\n\t}\n\n\tpublic equals(other: EditorScrollDimensions): boolean {\n\t\treturn (\n\t\t\tthis.width === other.width &&\n\t\t\tthis.contentWidth === other.contentWidth &&\n\t\t\tthis.height === other.height &&\n\t\t\tthis.contentHeight === other.contentHeight\n\t\t);\n\t}\n}\n\nclass EditorScrollable extends Disposable {\n\tprivate readonly _scrollable: Scrollable;\n\tprivate _dimensions: EditorScrollDimensions;\n\n\tpublic readonly onDidScroll: Event<ScrollEvent>;\n\n\tprivate readonly _onDidContentSizeChange = this._register(\n\t\tnew Emitter<ContentSizeChangedEvent>(),\n\t);\n\tpublic readonly onDidContentSizeChange: Event<ContentSizeChangedEvent> =\n\t\tthis._onDidContentSizeChange.event;\n\n\tconstructor(\n\t\tsmoothScrollDuration: number,\n\t\tscheduleAtNextAnimationFrame: (callback: () => void) => IDisposable,\n\t) {\n\t\tsuper();\n\t\tthis._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n\t\tthis._scrollable = this._register(\n\t\t\tnew Scrollable({\n\t\t\t\tforceIntegerValues: true,\n\t\t\t\tsmoothScrollDuration,\n\t\t\t\tscheduleAtNextAnimationFrame,\n\t\t\t}),\n\t\t);\n\t\tthis.onDidScroll = this._scrollable.onScroll;\n\t}\n\n\tpublic getScrollable(): Scrollable {\n\t\treturn this._scrollable;\n\t}\n\n\tpublic setSmoothScrollDuration(smoothScrollDuration: number): void {\n\t\tthis._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n\t}\n\n\tpublic validateScrollPosition(\n\t\tscrollPosition: INewScrollPosition,\n\t): IScrollPosition {\n\t\treturn this._scrollable.validateScrollPosition(scrollPosition);\n\t}\n\n\tpublic getScrollDimensions(): EditorScrollDimensions {\n\t\treturn this._dimensions;\n\t}\n\n\tpublic setScrollDimensions(dimensions: EditorScrollDimensions): void {\n\t\tif (this._dimensions.equals(dimensions)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldDimensions = this._dimensions;\n\t\tthis._dimensions = dimensions;\n\n\t\tthis._scrollable.setScrollDimensions(\n\t\t\t{\n\t\t\t\twidth: dimensions.width,\n\t\t\t\tscrollWidth: dimensions.scrollWidth,\n\t\t\t\theight: dimensions.height,\n\t\t\t\tscrollHeight: dimensions.scrollHeight,\n\t\t\t},\n\t\t\ttrue,\n\t\t);\n\n\t\tconst contentWidthChanged =\n\t\t\toldDimensions.contentWidth !== dimensions.contentWidth;\n\t\tconst contentHeightChanged =\n\t\t\toldDimensions.contentHeight !== dimensions.contentHeight;\n\t\tif (contentWidthChanged || contentHeightChanged) {\n\t\t\tthis._onDidContentSizeChange.fire(\n\t\t\t\tnew ContentSizeChangedEvent(\n\t\t\t\t\toldDimensions.contentWidth,\n\t\t\t\t\toldDimensions.contentHeight,\n\t\t\t\t\tdimensions.contentWidth,\n\t\t\t\t\tdimensions.contentHeight,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getFutureScrollPosition(): IScrollPosition {\n\t\treturn this._scrollable.getFutureScrollPosition();\n\t}\n\n\tpublic getCurrentScrollPosition(): IScrollPosition {\n\t\treturn this._scrollable.getCurrentScrollPosition();\n\t}\n\n\tpublic setScrollPositionNow(update: INewScrollPosition): void {\n\t\tthis._scrollable.setScrollPositionNow(update);\n\t}\n\n\tpublic setScrollPositionSmooth(update: INewScrollPosition): void {\n\t\tthis._scrollable.setScrollPositionSmooth(update);\n\t}\n\n\tpublic hasPendingScrollAnimation(): boolean {\n\t\treturn this._scrollable.hasPendingScrollAnimation();\n\t}\n}\n\nexport class ViewLayout extends Disposable implements IViewLayout {\n\tprivate readonly _configuration: IEditorConfiguration;\n\tprivate readonly _linesLayout: LinesLayout;\n\tprivate _maxLineWidth: number;\n\tprivate _overlayWidgetsMinWidth: number;\n\n\tprivate readonly _scrollable: EditorScrollable;\n\tpublic readonly onDidScroll: Event<ScrollEvent>;\n\tpublic readonly onDidContentSizeChange: Event<ContentSizeChangedEvent>;\n\n\tconstructor(\n\t\tconfiguration: IEditorConfiguration,\n\t\tlineCount: number,\n\t\tscheduleAtNextAnimationFrame: (callback: () => void) => IDisposable,\n\t) {\n\t\tsuper();\n\n\t\tthis._configuration = configuration;\n\t\tconst options = this._configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst padding = options.get(EditorOption.padding);\n\n\t\tthis._linesLayout = new LinesLayout(\n\t\t\tlineCount,\n\t\t\toptions.get(EditorOption.lineHeight),\n\t\t\tpadding.top,\n\t\t\tpadding.bottom,\n\t\t);\n\t\tthis._maxLineWidth = 0;\n\t\tthis._overlayWidgetsMinWidth = 0;\n\n\t\tthis._scrollable = this._register(\n\t\t\tnew EditorScrollable(0, scheduleAtNextAnimationFrame),\n\t\t);\n\t\tthis._configureSmoothScrollDuration();\n\n\t\tthis._scrollable.setScrollDimensions(\n\t\t\tnew EditorScrollDimensions(\n\t\t\t\tlayoutInfo.contentWidth,\n\t\t\t\t0,\n\t\t\t\tlayoutInfo.height,\n\t\t\t\t0,\n\t\t\t),\n\t\t);\n\t\tthis.onDidScroll = this._scrollable.onDidScroll;\n\t\tthis.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n\n\t\tthis._updateHeight();\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic getScrollable(): Scrollable {\n\t\treturn this._scrollable.getScrollable();\n\t}\n\n\tpublic onHeightMaybeChanged(): void {\n\t\tthis._updateHeight();\n\t}\n\n\tprivate _configureSmoothScrollDuration(): void {\n\t\tthis._scrollable.setSmoothScrollDuration(\n\t\t\tthis._configuration.options.get(EditorOption.smoothScrolling)\n\t\t\t\t? SMOOTH_SCROLLING_TIME\n\t\t\t\t: 0,\n\t\t);\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tconst options = this._configuration.options;\n\t\tif (e.hasChanged(EditorOption.lineHeight)) {\n\t\t\tthis._linesLayout.setLineHeight(\n\t\t\t\toptions.get(EditorOption.lineHeight),\n\t\t\t);\n\t\t}\n\t\tif (e.hasChanged(EditorOption.padding)) {\n\t\t\tconst padding = options.get(EditorOption.padding);\n\t\t\tthis._linesLayout.setPadding(padding.top, padding.bottom);\n\t\t}\n\t\tif (e.hasChanged(EditorOption.layoutInfo)) {\n\t\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\t\tconst width = layoutInfo.contentWidth;\n\t\t\tconst height = layoutInfo.height;\n\t\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\t\tconst contentWidth = scrollDimensions.contentWidth;\n\t\t\tthis._scrollable.setScrollDimensions(\n\t\t\t\tnew EditorScrollDimensions(\n\t\t\t\t\twidth,\n\t\t\t\t\tscrollDimensions.contentWidth,\n\t\t\t\t\theight,\n\t\t\t\t\tthis._getContentHeight(width, height, contentWidth),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis._updateHeight();\n\t\t}\n\t\tif (e.hasChanged(EditorOption.smoothScrolling)) {\n\t\t\tthis._configureSmoothScrollDuration();\n\t\t}\n\t}\n\tpublic onFlushed(lineCount: number): void {\n\t\tthis._linesLayout.onFlushed(lineCount);\n\t}\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n\t}\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n\t}\n\n\t// ---- end view event handlers\n\n\tprivate _getHorizontalScrollbarHeight(\n\t\twidth: number,\n\t\tscrollWidth: number,\n\t): number {\n\t\tconst options = this._configuration.options;\n\t\tconst scrollbar = options.get(EditorOption.scrollbar);\n\t\tif (scrollbar.horizontal === ScrollbarVisibility.Hidden) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\tif (width >= scrollWidth) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\treturn scrollbar.horizontalScrollbarSize;\n\t}\n\n\tprivate _getContentHeight(\n\t\twidth: number,\n\t\theight: number,\n\t\tcontentWidth: number,\n\t): number {\n\t\tconst options = this._configuration.options;\n\n\t\tlet result = this._linesLayout.getLinesTotalHeight();\n\t\tif (options.get(EditorOption.scrollBeyondLastLine)) {\n\t\t\tresult += Math.max(\n\t\t\t\t0,\n\t\t\t\theight -\n\t\t\t\t\toptions.get(EditorOption.lineHeight) -\n\t\t\t\t\toptions.get(EditorOption.padding).bottom,\n\t\t\t);\n\t\t} else if (\n\t\t\t!options.get(EditorOption.scrollbar)\n\t\t\t\t.ignoreHorizontalScrollbarInContentHeight\n\t\t) {\n\t\t\tresult += this._getHorizontalScrollbarHeight(width, contentWidth);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _updateHeight(): void {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst width = scrollDimensions.width;\n\t\tconst height = scrollDimensions.height;\n\t\tconst contentWidth = scrollDimensions.contentWidth;\n\t\tthis._scrollable.setScrollDimensions(\n\t\t\tnew EditorScrollDimensions(\n\t\t\t\twidth,\n\t\t\t\tscrollDimensions.contentWidth,\n\t\t\t\theight,\n\t\t\t\tthis._getContentHeight(width, height, contentWidth),\n\t\t\t),\n\t\t);\n\t}\n\n\t// ---- Layouting logic\n\n\tpublic getCurrentViewport(): Viewport {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition =\n\t\t\tthis._scrollable.getCurrentScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height,\n\t\t);\n\t}\n\n\tpublic getFutureViewport(): Viewport {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition =\n\t\t\tthis._scrollable.getFutureScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height,\n\t\t);\n\t}\n\n\tprivate _computeContentWidth(): number {\n\t\tconst options = this._configuration.options;\n\t\tconst maxLineWidth = this._maxLineWidth;\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tif (wrappingInfo.isViewportWrapping) {\n\t\t\tconst minimap = options.get(EditorOption.minimap);\n\t\t\tif (\n\t\t\t\tmaxLineWidth >\n\t\t\t\tlayoutInfo.contentWidth +\n\t\t\t\t\tfontInfo.typicalHalfwidthCharacterWidth\n\t\t\t) {\n\t\t\t\t// This is a case where viewport wrapping is on, but the line extends above the viewport\n\t\t\t\tif (minimap.enabled && minimap.side === \"right\") {\n\t\t\t\t\t// We need to accomodate the scrollbar width\n\t\t\t\t\treturn maxLineWidth + layoutInfo.verticalScrollbarWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxLineWidth;\n\t\t} else {\n\t\t\tconst extraHorizontalSpace =\n\t\t\t\toptions.get(EditorOption.scrollBeyondLastColumn) *\n\t\t\t\tfontInfo.typicalHalfwidthCharacterWidth;\n\t\t\tconst whitespaceMinWidth =\n\t\t\t\tthis._linesLayout.getWhitespaceMinWidth();\n\t\t\treturn Math.max(\n\t\t\t\tmaxLineWidth +\n\t\t\t\t\textraHorizontalSpace +\n\t\t\t\t\tlayoutInfo.verticalScrollbarWidth,\n\t\t\t\twhitespaceMinWidth,\n\t\t\t\tthis._overlayWidgetsMinWidth,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic setMaxLineWidth(maxLineWidth: number): void {\n\t\tthis._maxLineWidth = maxLineWidth;\n\t\tthis._updateContentWidth();\n\t}\n\n\tpublic setOverlayWidgetsMinWidth(maxMinWidth: number): void {\n\t\tthis._overlayWidgetsMinWidth = maxMinWidth;\n\t\tthis._updateContentWidth();\n\t}\n\n\tprivate _updateContentWidth(): void {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tthis._scrollable.setScrollDimensions(\n\t\t\tnew EditorScrollDimensions(\n\t\t\t\tscrollDimensions.width,\n\t\t\t\tthis._computeContentWidth(),\n\t\t\t\tscrollDimensions.height,\n\t\t\t\tscrollDimensions.contentHeight,\n\t\t\t),\n\t\t);\n\n\t\t// The height might depend on the fact that there is a horizontal scrollbar or not\n\t\tthis._updateHeight();\n\t}\n\n\t// ---- view state\n\n\tpublic saveState(): {\n\t\tscrollTop: number;\n\t\tscrollTopWithoutViewZones: number;\n\t\tscrollLeft: number;\n\t} {\n\t\tconst currentScrollPosition =\n\t\t\tthis._scrollable.getFutureScrollPosition();\n\t\tconst scrollTop = currentScrollPosition.scrollTop;\n\t\tconst firstLineNumberInViewport =\n\t\t\tthis._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n\t\tconst whitespaceAboveFirstLine =\n\t\t\tthis._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(\n\t\t\t\tfirstLineNumberInViewport,\n\t\t\t);\n\t\treturn {\n\t\t\tscrollTop: scrollTop,\n\t\t\tscrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n\t\t\tscrollLeft: currentScrollPosition.scrollLeft,\n\t\t};\n\t}\n\n\t// ----\n\tpublic changeWhitespace(\n\t\tcallback: (accessor: IWhitespaceChangeAccessor) => void,\n\t): boolean {\n\t\tconst hadAChange = this._linesLayout.changeWhitespace(callback);\n\t\tif (hadAChange) {\n\t\t\tthis.onHeightMaybeChanged();\n\t\t}\n\t\treturn hadAChange;\n\t}\n\tpublic getVerticalOffsetForLineNumber(\n\t\tlineNumber: number,\n\t\tincludeViewZones = false,\n\t): number {\n\t\treturn this._linesLayout.getVerticalOffsetForLineNumber(\n\t\t\tlineNumber,\n\t\t\tincludeViewZones,\n\t\t);\n\t}\n\tpublic getVerticalOffsetAfterLineNumber(\n\t\tlineNumber: number,\n\t\tincludeViewZones = false,\n\t): number {\n\t\treturn this._linesLayout.getVerticalOffsetAfterLineNumber(\n\t\t\tlineNumber,\n\t\t\tincludeViewZones,\n\t\t);\n\t}\n\tpublic isAfterLines(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isAfterLines(verticalOffset);\n\t}\n\tpublic isInTopPadding(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isInTopPadding(verticalOffset);\n\t}\n\tisInBottomPadding(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isInBottomPadding(verticalOffset);\n\t}\n\n\tpublic getLineNumberAtVerticalOffset(verticalOffset: number): number {\n\t\treturn this._linesLayout.getLineNumberAtOrAfterVerticalOffset(\n\t\t\tverticalOffset,\n\t\t);\n\t}\n\n\tpublic getWhitespaceAtVerticalOffset(\n\t\tverticalOffset: number,\n\t): IViewWhitespaceViewportData | null {\n\t\treturn this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n\t}\n\tpublic getLinesViewportData(): IPartialViewLinesViewportData {\n\t\tconst visibleBox = this.getCurrentViewport();\n\t\treturn this._linesLayout.getLinesViewportData(\n\t\t\tvisibleBox.top,\n\t\t\tvisibleBox.top + visibleBox.height,\n\t\t);\n\t}\n\tpublic getLinesViewportDataAtScrollTop(\n\t\tscrollTop: number,\n\t): IPartialViewLinesViewportData {\n\t\t// do some minimal validations on scrollTop\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tif (\n\t\t\tscrollTop + scrollDimensions.height >\n\t\t\tscrollDimensions.scrollHeight\n\t\t) {\n\t\t\tscrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n\t\t}\n\t\tif (scrollTop < 0) {\n\t\t\tscrollTop = 0;\n\t\t}\n\t\treturn this._linesLayout.getLinesViewportData(\n\t\t\tscrollTop,\n\t\t\tscrollTop + scrollDimensions.height,\n\t\t);\n\t}\n\tpublic getWhitespaceViewportData(): IViewWhitespaceViewportData[] {\n\t\tconst visibleBox = this.getCurrentViewport();\n\t\treturn this._linesLayout.getWhitespaceViewportData(\n\t\t\tvisibleBox.top,\n\t\t\tvisibleBox.top + visibleBox.height,\n\t\t);\n\t}\n\tpublic getWhitespaces(): IEditorWhitespace[] {\n\t\treturn this._linesLayout.getWhitespaces();\n\t}\n\n\t// ----\n\n\tpublic getContentWidth(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.contentWidth;\n\t}\n\tpublic getScrollWidth(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.scrollWidth;\n\t}\n\tpublic getContentHeight(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.contentHeight;\n\t}\n\tpublic getScrollHeight(): number {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.scrollHeight;\n\t}\n\n\tpublic getCurrentScrollLeft(): number {\n\t\tconst currentScrollPosition =\n\t\t\tthis._scrollable.getCurrentScrollPosition();\n\t\treturn currentScrollPosition.scrollLeft;\n\t}\n\tpublic getCurrentScrollTop(): number {\n\t\tconst currentScrollPosition =\n\t\t\tthis._scrollable.getCurrentScrollPosition();\n\t\treturn currentScrollPosition.scrollTop;\n\t}\n\n\tpublic validateScrollPosition(\n\t\tscrollPosition: INewScrollPosition,\n\t): IScrollPosition {\n\t\treturn this._scrollable.validateScrollPosition(scrollPosition);\n\t}\n\n\tpublic setScrollPosition(\n\t\tposition: INewScrollPosition,\n\t\ttype: ScrollType,\n\t): void {\n\t\tif (type === ScrollType.Immediate) {\n\t\t\tthis._scrollable.setScrollPositionNow(position);\n\t\t} else {\n\t\t\tthis._scrollable.setScrollPositionSmooth(position);\n\t\t}\n\t}\n\n\tpublic hasPendingScrollAnimation(): boolean {\n\t\treturn this._scrollable.hasPendingScrollAnimation();\n\t}\n\n\tpublic deltaScrollNow(\n\t\tdeltaScrollLeft: number,\n\t\tdeltaScrollTop: number,\n\t): void {\n\t\tconst currentScrollPosition =\n\t\t\tthis._scrollable.getCurrentScrollPosition();\n\t\tthis._scrollable.setScrollPositionNow({\n\t\t\tscrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n\t\t\tscrollTop: currentScrollPosition.scrollTop + deltaScrollTop,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
