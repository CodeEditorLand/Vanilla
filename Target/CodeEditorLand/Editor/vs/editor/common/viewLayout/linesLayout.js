import*as V from"../../../base/common/strings.js";class H{_hasPending;_inserts;_changes;_removes;constructor(){this._hasPending=!1,this._inserts=[],this._changes=[],this._removes=[]}insert(e){this._hasPending=!0,this._inserts.push(e)}change(e){this._hasPending=!0,this._changes.push(e)}remove(e){this._hasPending=!0,this._removes.push(e)}mustCommit(){return this._hasPending}commit(e){if(!this._hasPending)return;const t=this._inserts,i=this._changes,n=this._removes;this._hasPending=!1,this._inserts=[],this._changes=[],this._removes=[],e._commitPendingChanges(t,i,n)}}class v{id;afterLineNumber;ordinal;height;minWidth;prefixSum;constructor(e,t,i,n,r){this.id=e,this.afterLineNumber=t,this.ordinal=i,this.height=n,this.minWidth=r,this.prefixSum=0}}class W{static INSTANCE_COUNT=0;_instanceId;_pendingChanges;_lastWhitespaceId;_arr;_prefixSumValidIndex;_minWidth;_lineCount;_lineHeight;_paddingTop;_paddingBottom;constructor(e,t,i,n){this._instanceId=V.singleLetterHash(++W.INSTANCE_COUNT),this._pendingChanges=new H,this._lastWhitespaceId=0,this._arr=[],this._prefixSumValidIndex=-1,this._minWidth=-1,this._lineCount=e,this._lineHeight=t,this._paddingTop=i,this._paddingBottom=n}static findInsertionIndex(e,t,i){let n=0,r=e.length;for(;n<r;){const s=n+r>>>1;t===e[s].afterLineNumber?i<e[s].ordinal?r=s:n=s+1:t<e[s].afterLineNumber?r=s:n=s+1}return n}setLineHeight(e){this._checkPendingChanges(),this._lineHeight=e}setPadding(e,t){this._paddingTop=e,this._paddingBottom=t}onFlushed(e){this._checkPendingChanges(),this._lineCount=e}changeWhitespace(e){let t=!1;try{e({insertWhitespace:(n,r,s,h)=>{t=!0,n=n|0,r=r|0,s=s|0,h=h|0;const a=this._instanceId+ ++this._lastWhitespaceId;return this._pendingChanges.insert(new v(a,n,r,s,h)),a},changeOneWhitespace:(n,r,s)=>{t=!0,r=r|0,s=s|0,this._pendingChanges.change({id:n,newAfterLineNumber:r,newHeight:s})},removeWhitespace:n=>{t=!0,this._pendingChanges.remove({id:n})}})}finally{this._pendingChanges.commit(this)}return t}_commitPendingChanges(e,t,i){if((e.length>0||i.length>0)&&(this._minWidth=-1),e.length+t.length+i.length<=1){for(const a of e)this._insertWhitespace(a);for(const a of t)this._changeOneWhitespace(a.id,a.newAfterLineNumber,a.newHeight);for(const a of i){const c=this._findWhitespaceIndex(a.id);c!==-1&&this._removeWhitespace(c)}return}const n=new Set;for(const a of i)n.add(a.id);const r=new Map;for(const a of t)r.set(a.id,a);const s=a=>{const c=[];for(const u of a)if(!n.has(u.id)){if(r.has(u.id)){const g=r.get(u.id);u.afterLineNumber=g.newAfterLineNumber,u.height=g.newHeight}c.push(u)}return c},h=s(this._arr).concat(s(e));h.sort((a,c)=>a.afterLineNumber===c.afterLineNumber?a.ordinal-c.ordinal:a.afterLineNumber-c.afterLineNumber),this._arr=h,this._prefixSumValidIndex=-1}_checkPendingChanges(){this._pendingChanges.mustCommit()&&this._pendingChanges.commit(this)}_insertWhitespace(e){const t=W.findInsertionIndex(this._arr,e.afterLineNumber,e.ordinal);this._arr.splice(t,0,e),this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,t-1)}_findWhitespaceIndex(e){const t=this._arr;for(let i=0,n=t.length;i<n;i++)if(t[i].id===e)return i;return-1}_changeOneWhitespace(e,t,i){const n=this._findWhitespaceIndex(e);if(n!==-1&&(this._arr[n].height!==i&&(this._arr[n].height=i,this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,n-1)),this._arr[n].afterLineNumber!==t)){const r=this._arr[n];this._removeWhitespace(n),r.afterLineNumber=t,this._insertWhitespace(r)}}_removeWhitespace(e){this._arr.splice(e,1),this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,e-1)}onLinesDeleted(e,t){this._checkPendingChanges(),e=e|0,t=t|0,this._lineCount-=t-e+1;for(let i=0,n=this._arr.length;i<n;i++){const r=this._arr[i].afterLineNumber;e<=r&&r<=t?this._arr[i].afterLineNumber=e-1:r>t&&(this._arr[i].afterLineNumber-=t-e+1)}}onLinesInserted(e,t){this._checkPendingChanges(),e=e|0,t=t|0,this._lineCount+=t-e+1;for(let i=0,n=this._arr.length;i<n;i++){const r=this._arr[i].afterLineNumber;e<=r&&(this._arr[i].afterLineNumber+=t-e+1)}}getWhitespacesTotalHeight(){return this._checkPendingChanges(),this._arr.length===0?0:this.getWhitespacesAccumulatedHeight(this._arr.length-1)}getWhitespacesAccumulatedHeight(e){this._checkPendingChanges(),e=e|0;let t=Math.max(0,this._prefixSumValidIndex+1);t===0&&(this._arr[0].prefixSum=this._arr[0].height,t++);for(let i=t;i<=e;i++)this._arr[i].prefixSum=this._arr[i-1].prefixSum+this._arr[i].height;return this._prefixSumValidIndex=Math.max(this._prefixSumValidIndex,e),this._arr[e].prefixSum}getLinesTotalHeight(){this._checkPendingChanges();const e=this._lineHeight*this._lineCount,t=this.getWhitespacesTotalHeight();return e+t+this._paddingTop+this._paddingBottom}getWhitespaceAccumulatedHeightBeforeLineNumber(e){this._checkPendingChanges(),e=e|0;const t=this._findLastWhitespaceBeforeLineNumber(e);return t===-1?0:this.getWhitespacesAccumulatedHeight(t)}_findLastWhitespaceBeforeLineNumber(e){e=e|0;const t=this._arr;let i=0,n=t.length-1;for(;i<=n;){const s=(n-i|0)/2|0,h=i+s|0;if(t[h].afterLineNumber<e){if(h+1>=t.length||t[h+1].afterLineNumber>=e)return h;i=h+1|0}else n=h-1|0}return-1}_findFirstWhitespaceAfterLineNumber(e){e=e|0;const i=this._findLastWhitespaceBeforeLineNumber(e)+1;return i<this._arr.length?i:-1}getFirstWhitespaceIndexAfterLineNumber(e){return this._checkPendingChanges(),e=e|0,this._findFirstWhitespaceAfterLineNumber(e)}getVerticalOffsetForLineNumber(e,t=!1){this._checkPendingChanges(),e=e|0;let i;e>1?i=this._lineHeight*(e-1):i=0;const n=this.getWhitespaceAccumulatedHeightBeforeLineNumber(e-(t?1:0));return i+n+this._paddingTop}getVerticalOffsetAfterLineNumber(e,t=!1){this._checkPendingChanges(),e=e|0;const i=this._lineHeight*e,n=this.getWhitespaceAccumulatedHeightBeforeLineNumber(e+(t?1:0));return i+n+this._paddingTop}hasWhitespace(){return this._checkPendingChanges(),this.getWhitespacesCount()>0}getWhitespaceMinWidth(){if(this._checkPendingChanges(),this._minWidth===-1){let e=0;for(let t=0,i=this._arr.length;t<i;t++)e=Math.max(e,this._arr[t].minWidth);this._minWidth=e}return this._minWidth}isAfterLines(e){this._checkPendingChanges();const t=this.getLinesTotalHeight();return e>t}isInTopPadding(e){return this._paddingTop===0?!1:(this._checkPendingChanges(),e<this._paddingTop)}isInBottomPadding(e){if(this._paddingBottom===0)return!1;this._checkPendingChanges();const t=this.getLinesTotalHeight();return e>=t-this._paddingBottom}getLineNumberAtOrAfterVerticalOffset(e){if(this._checkPendingChanges(),e=e|0,e<0)return 1;const t=this._lineCount|0,i=this._lineHeight;let n=1,r=t;for(;n<r;){const s=(n+r)/2|0,h=this.getVerticalOffsetForLineNumber(s)|0;if(e>=h+i)n=s+1;else{if(e>=h)return s;r=s}}return n>t?t:n}getLinesViewportData(e,t){this._checkPendingChanges(),e=e|0,t=t|0;const i=this._lineHeight,n=this.getLineNumberAtOrAfterVerticalOffset(e)|0,r=this.getVerticalOffsetForLineNumber(n)|0;let s=this._lineCount|0,h=this.getFirstWhitespaceIndexAfterLineNumber(n)|0;const a=this.getWhitespacesCount()|0;let c,u;h===-1?(h=a,u=s+1,c=0):(u=this.getAfterLineNumberForWhitespaceIndex(h)|0,c=this.getHeightForWhitespaceIndex(h)|0);let g=r,l=g;const _=5e5;let d=0;r>=_&&(d=Math.floor(r/_)*_,d=Math.floor(d/i)*i,l-=d);const I=[],f=e+(t-e)/2;let p=-1;for(let o=n;o<=s;o++){if(p===-1){const C=g,P=g+i;(C<=f&&f<P||C>f)&&(p=o)}for(g+=i,I[o-n]=l,l+=i;u===o;)l+=c,g+=c,h++,h>=a?u=s+1:(u=this.getAfterLineNumberForWhitespaceIndex(h)|0,c=this.getHeightForWhitespaceIndex(h)|0);if(g>=t){s=o;break}}p===-1&&(p=s);const x=this.getVerticalOffsetForLineNumber(s)|0;let m=n,b=s;return m<b&&r<e&&m++,m<b&&x+i>t&&b--,{bigNumbersDelta:d,startLineNumber:n,endLineNumber:s,relativeVerticalOffset:I,centeredLineNumber:p,completelyVisibleStartLineNumber:m,completelyVisibleEndLineNumber:b,lineHeight:this._lineHeight}}getVerticalOffsetForWhitespaceIndex(e){this._checkPendingChanges(),e=e|0;const t=this.getAfterLineNumberForWhitespaceIndex(e);let i;t>=1?i=this._lineHeight*t:i=0;let n;return e>0?n=this.getWhitespacesAccumulatedHeight(e-1):n=0,i+n+this._paddingTop}getWhitespaceIndexAtOrAfterVerticallOffset(e){this._checkPendingChanges(),e=e|0;let t=0,i=this.getWhitespacesCount()-1;if(i<0)return-1;const n=this.getVerticalOffsetForWhitespaceIndex(i),r=this.getHeightForWhitespaceIndex(i);if(e>=n+r)return-1;for(;t<i;){const s=Math.floor((t+i)/2),h=this.getVerticalOffsetForWhitespaceIndex(s),a=this.getHeightForWhitespaceIndex(s);if(e>=h+a)t=s+1;else{if(e>=h)return s;i=s}}return t}getWhitespaceAtVerticalOffset(e){this._checkPendingChanges(),e=e|0;const t=this.getWhitespaceIndexAtOrAfterVerticallOffset(e);if(t<0||t>=this.getWhitespacesCount())return null;const i=this.getVerticalOffsetForWhitespaceIndex(t);if(i>e)return null;const n=this.getHeightForWhitespaceIndex(t),r=this.getIdForWhitespaceIndex(t),s=this.getAfterLineNumberForWhitespaceIndex(t);return{id:r,afterLineNumber:s,verticalOffset:i,height:n}}getWhitespaceViewportData(e,t){this._checkPendingChanges(),e=e|0,t=t|0;const i=this.getWhitespaceIndexAtOrAfterVerticallOffset(e),n=this.getWhitespacesCount()-1;if(i<0)return[];const r=[];for(let s=i;s<=n;s++){const h=this.getVerticalOffsetForWhitespaceIndex(s),a=this.getHeightForWhitespaceIndex(s);if(h>=t)break;r.push({id:this.getIdForWhitespaceIndex(s),afterLineNumber:this.getAfterLineNumberForWhitespaceIndex(s),verticalOffset:h,height:a})}return r}getWhitespaces(){return this._checkPendingChanges(),this._arr.slice(0)}getWhitespacesCount(){return this._checkPendingChanges(),this._arr.length}getIdForWhitespaceIndex(e){return this._checkPendingChanges(),e=e|0,this._arr[e].id}getAfterLineNumberForWhitespaceIndex(e){return this._checkPendingChanges(),e=e|0,this._arr[e].afterLineNumber}getHeightForWhitespaceIndex(e){return this._checkPendingChanges(),e=e|0,this._arr[e].height}}export{v as EditorWhitespace,W as LinesLayout};
