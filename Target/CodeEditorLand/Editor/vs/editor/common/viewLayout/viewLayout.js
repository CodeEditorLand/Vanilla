import{Emitter as b}from"../../../base/common/event.js";import{Disposable as h}from"../../../base/common/lifecycle.js";import{Scrollable as g,ScrollbarVisibility as d}from"../../../base/common/scrollable.js";import"../config/editorConfiguration.js";import{EditorOption as n}from"../config/editorOptions.js";import{ScrollType as p}from"../editorCommon.js";import{Viewport as u}from"../viewModel.js";import{ContentSizeChangedEvent as m}from"../viewModelEventDispatcher.js";import{LinesLayout as S}from"./linesLayout.js";const _=125;class s{width;contentWidth;scrollWidth;height;contentHeight;scrollHeight;constructor(t,e,o,i){t=t|0,e=e|0,o=o|0,i=i|0,t<0&&(t=0),e<0&&(e=0),o<0&&(o=0),i<0&&(i=0),this.width=t,this.contentWidth=e,this.scrollWidth=Math.max(t,e),this.height=o,this.contentHeight=i,this.scrollHeight=Math.max(o,i)}equals(t){return this.width===t.width&&this.contentWidth===t.contentWidth&&this.height===t.height&&this.contentHeight===t.contentHeight}}class f extends h{_scrollable;_dimensions;onDidScroll;_onDidContentSizeChange=this._register(new b);onDidContentSizeChange=this._onDidContentSizeChange.event;constructor(t,e){super(),this._dimensions=new s(0,0,0,0),this._scrollable=this._register(new g({forceIntegerValues:!0,smoothScrollDuration:t,scheduleAtNextAnimationFrame:e})),this.onDidScroll=this._scrollable.onScroll}getScrollable(){return this._scrollable}setSmoothScrollDuration(t){this._scrollable.setSmoothScrollDuration(t)}validateScrollPosition(t){return this._scrollable.validateScrollPosition(t)}getScrollDimensions(){return this._dimensions}setScrollDimensions(t){if(this._dimensions.equals(t))return;const e=this._dimensions;this._dimensions=t,this._scrollable.setScrollDimensions({width:t.width,scrollWidth:t.scrollWidth,height:t.height,scrollHeight:t.scrollHeight},!0);const o=e.contentWidth!==t.contentWidth,i=e.contentHeight!==t.contentHeight;(o||i)&&this._onDidContentSizeChange.fire(new m(e.contentWidth,e.contentHeight,t.contentWidth,t.contentHeight))}getFutureScrollPosition(){return this._scrollable.getFutureScrollPosition()}getCurrentScrollPosition(){return this._scrollable.getCurrentScrollPosition()}setScrollPositionNow(t){this._scrollable.setScrollPositionNow(t)}setScrollPositionSmooth(t){this._scrollable.setScrollPositionSmooth(t)}hasPendingScrollAnimation(){return this._scrollable.hasPendingScrollAnimation()}}class k extends h{_configuration;_linesLayout;_maxLineWidth;_overlayWidgetsMinWidth;_scrollable;onDidScroll;onDidContentSizeChange;constructor(t,e,o){super(),this._configuration=t;const i=this._configuration.options,l=i.get(n.layoutInfo),r=i.get(n.padding);this._linesLayout=new S(e,i.get(n.lineHeight),r.top,r.bottom),this._maxLineWidth=0,this._overlayWidgetsMinWidth=0,this._scrollable=this._register(new f(0,o)),this._configureSmoothScrollDuration(),this._scrollable.setScrollDimensions(new s(l.contentWidth,0,l.height,0)),this.onDidScroll=this._scrollable.onDidScroll,this.onDidContentSizeChange=this._scrollable.onDidContentSizeChange,this._updateHeight()}dispose(){super.dispose()}getScrollable(){return this._scrollable.getScrollable()}onHeightMaybeChanged(){this._updateHeight()}_configureSmoothScrollDuration(){this._scrollable.setSmoothScrollDuration(this._configuration.options.get(n.smoothScrolling)?_:0)}onConfigurationChanged(t){const e=this._configuration.options;if(t.hasChanged(n.lineHeight)&&this._linesLayout.setLineHeight(e.get(n.lineHeight)),t.hasChanged(n.padding)){const o=e.get(n.padding);this._linesLayout.setPadding(o.top,o.bottom)}if(t.hasChanged(n.layoutInfo)){const o=e.get(n.layoutInfo),i=o.contentWidth,l=o.height,r=this._scrollable.getScrollDimensions(),c=r.contentWidth;this._scrollable.setScrollDimensions(new s(i,r.contentWidth,l,this._getContentHeight(i,l,c)))}else this._updateHeight();t.hasChanged(n.smoothScrolling)&&this._configureSmoothScrollDuration()}onFlushed(t){this._linesLayout.onFlushed(t)}onLinesDeleted(t,e){this._linesLayout.onLinesDeleted(t,e)}onLinesInserted(t,e){this._linesLayout.onLinesInserted(t,e)}_getHorizontalScrollbarHeight(t,e){const i=this._configuration.options.get(n.scrollbar);return i.horizontal===d.Hidden||t>=e?0:i.horizontalScrollbarSize}_getContentHeight(t,e,o){const i=this._configuration.options;let l=this._linesLayout.getLinesTotalHeight();return i.get(n.scrollBeyondLastLine)?l+=Math.max(0,e-i.get(n.lineHeight)-i.get(n.padding).bottom):i.get(n.scrollbar).ignoreHorizontalScrollbarInContentHeight||(l+=this._getHorizontalScrollbarHeight(t,o)),l}_updateHeight(){const t=this._scrollable.getScrollDimensions(),e=t.width,o=t.height,i=t.contentWidth;this._scrollable.setScrollDimensions(new s(e,t.contentWidth,o,this._getContentHeight(e,o,i)))}getCurrentViewport(){const t=this._scrollable.getScrollDimensions(),e=this._scrollable.getCurrentScrollPosition();return new u(e.scrollTop,e.scrollLeft,t.width,t.height)}getFutureViewport(){const t=this._scrollable.getScrollDimensions(),e=this._scrollable.getFutureScrollPosition();return new u(e.scrollTop,e.scrollLeft,t.width,t.height)}_computeContentWidth(){const t=this._configuration.options,e=this._maxLineWidth,o=t.get(n.wrappingInfo),i=t.get(n.fontInfo),l=t.get(n.layoutInfo);if(o.isViewportWrapping){const r=t.get(n.minimap);return e>l.contentWidth+i.typicalHalfwidthCharacterWidth&&r.enabled&&r.side==="right"?e+l.verticalScrollbarWidth:e}else{const r=t.get(n.scrollBeyondLastColumn)*i.typicalHalfwidthCharacterWidth,c=this._linesLayout.getWhitespaceMinWidth();return Math.max(e+r+l.verticalScrollbarWidth,c,this._overlayWidgetsMinWidth)}}setMaxLineWidth(t){this._maxLineWidth=t,this._updateContentWidth()}setOverlayWidgetsMinWidth(t){this._overlayWidgetsMinWidth=t,this._updateContentWidth()}_updateContentWidth(){const t=this._scrollable.getScrollDimensions();this._scrollable.setScrollDimensions(new s(t.width,this._computeContentWidth(),t.height,t.contentHeight)),this._updateHeight()}saveState(){const t=this._scrollable.getFutureScrollPosition(),e=t.scrollTop,o=this._linesLayout.getLineNumberAtOrAfterVerticalOffset(e),i=this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(o);return{scrollTop:e,scrollTopWithoutViewZones:e-i,scrollLeft:t.scrollLeft}}changeWhitespace(t){const e=this._linesLayout.changeWhitespace(t);return e&&this.onHeightMaybeChanged(),e}getVerticalOffsetForLineNumber(t,e=!1){return this._linesLayout.getVerticalOffsetForLineNumber(t,e)}getVerticalOffsetAfterLineNumber(t,e=!1){return this._linesLayout.getVerticalOffsetAfterLineNumber(t,e)}isAfterLines(t){return this._linesLayout.isAfterLines(t)}isInTopPadding(t){return this._linesLayout.isInTopPadding(t)}isInBottomPadding(t){return this._linesLayout.isInBottomPadding(t)}getLineNumberAtVerticalOffset(t){return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(t)}getWhitespaceAtVerticalOffset(t){return this._linesLayout.getWhitespaceAtVerticalOffset(t)}getLinesViewportData(){const t=this.getCurrentViewport();return this._linesLayout.getLinesViewportData(t.top,t.top+t.height)}getLinesViewportDataAtScrollTop(t){const e=this._scrollable.getScrollDimensions();return t+e.height>e.scrollHeight&&(t=e.scrollHeight-e.height),t<0&&(t=0),this._linesLayout.getLinesViewportData(t,t+e.height)}getWhitespaceViewportData(){const t=this.getCurrentViewport();return this._linesLayout.getWhitespaceViewportData(t.top,t.top+t.height)}getWhitespaces(){return this._linesLayout.getWhitespaces()}getContentWidth(){return this._scrollable.getScrollDimensions().contentWidth}getScrollWidth(){return this._scrollable.getScrollDimensions().scrollWidth}getContentHeight(){return this._scrollable.getScrollDimensions().contentHeight}getScrollHeight(){return this._scrollable.getScrollDimensions().scrollHeight}getCurrentScrollLeft(){return this._scrollable.getCurrentScrollPosition().scrollLeft}getCurrentScrollTop(){return this._scrollable.getCurrentScrollPosition().scrollTop}validateScrollPosition(t){return this._scrollable.validateScrollPosition(t)}setScrollPosition(t,e){e===p.Immediate?this._scrollable.setScrollPositionNow(t):this._scrollable.setScrollPositionSmooth(t)}hasPendingScrollAnimation(){return this._scrollable.hasPendingScrollAnimation()}deltaScrollNow(t,e){const o=this._scrollable.getCurrentScrollPosition();this._scrollable.setScrollPositionNow({scrollLeft:o.scrollLeft+t,scrollTop:o.scrollTop+e})}}export{k as ViewLayout};
