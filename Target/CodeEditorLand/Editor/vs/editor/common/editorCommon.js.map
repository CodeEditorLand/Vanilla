{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/editorCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../base/common/htmlContent.js\";\nimport type { IDisposable } from \"../../base/common/lifecycle.js\";\nimport type { ThemeColor } from \"../../base/common/themables.js\";\nimport type { URI, UriComponents } from \"../../base/common/uri.js\";\nimport type { ICommandMetadata } from \"../../platform/commands/common/commands.js\";\nimport type { IEditorOptions } from \"./config/editorOptions.js\";\nimport type { IDimension } from \"./core/dimension.js\";\nimport type { IPosition, Position } from \"./core/position.js\";\nimport type { IRange, Range } from \"./core/range.js\";\nimport type { ISelection, Selection } from \"./core/selection.js\";\nimport type {\n\tIModelDecoration,\n\tIModelDecorationsChangeAccessor,\n\tIModelDeltaDecoration,\n\tITextModel,\n\tIValidEditOperation,\n\tOverviewRulerLane,\n\tTrackedRangeStickiness,\n} from \"./model.js\";\nimport type { IModelDecorationsChangedEvent } from \"./textModelEvents.js\";\n\n/**\n * A builder and helper for edit operations for a command.\n */\nexport interface IEditOperationBuilder {\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddEditOperation(\n\t\trange: IRange,\n\t\ttext: string | null,\n\t\tforceMoveMarkers?: boolean,\n\t): void;\n\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * The inverse edits will be accessible in `ICursorStateComputerData.getInverseEditOperations()`\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddTrackedEditOperation(\n\t\trange: IRange,\n\t\ttext: string | null,\n\t\tforceMoveMarkers?: boolean,\n\t): void;\n\n\t/**\n\t * Track `selection` when applying edit operations.\n\t * A best effort will be made to not grow/expand the selection.\n\t * An empty selection will clamp to a nearby character.\n\t * @param selection The selection to track.\n\t * @param trackPreviousOnEmpty If set, and the selection is empty, indicates whether the selection\n\t *           should clamp to the previous or the next character.\n\t * @return A unique identifier.\n\t */\n\ttrackSelection(\n\t\tselection: Selection,\n\t\ttrackPreviousOnEmpty?: boolean,\n\t): string;\n}\n\n/**\n * A helper for computing cursor state after a command.\n */\nexport interface ICursorStateComputerData {\n\t/**\n\t * Get the inverse edit operations of the added edit operations.\n\t */\n\tgetInverseEditOperations(): IValidEditOperation[];\n\t/**\n\t * Get a previously tracked selection.\n\t * @param id The unique identifier returned by `trackSelection`.\n\t * @return The selection.\n\t */\n\tgetTrackedSelection(id: string): Selection;\n}\n\n/**\n * A command that modifies text / cursor state on a model.\n */\nexport interface ICommand {\n\t/**\n\t * Signal that this command is inserting automatic whitespace that should be trimmed if possible.\n\t * @internal\n\t */\n\treadonly insertsAutoWhitespace?: boolean;\n\n\t/**\n\t * Get the edit operations needed to execute this command.\n\t * @param model The model the command will execute on.\n\t * @param builder A helper to collect the needed edit operations and to track selections.\n\t */\n\tgetEditOperations(model: ITextModel, builder: IEditOperationBuilder): void;\n\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t * @param model The model the command has executed on.\n\t * @param helper A helper to get inverse edit operations and to get previously tracked selections.\n\t * @return The cursor state after the command executed.\n\t */\n\tcomputeCursorState(\n\t\tmodel: ITextModel,\n\t\thelper: ICursorStateComputerData,\n\t): Selection;\n}\n\n/**\n * A model for the diff editor.\n */\nexport interface IDiffEditorModel {\n\t/**\n\t * Original model.\n\t */\n\toriginal: ITextModel;\n\t/**\n\t * Modified model.\n\t */\n\tmodified: ITextModel;\n}\n\nexport interface IDiffEditorViewModel extends IDisposable {\n\treadonly model: IDiffEditorModel;\n\n\twaitForDiff(): Promise<void>;\n}\n\n/**\n * An event describing that an editor has had its model reset (i.e. `editor.setModel()`).\n */\nexport interface IModelChangedEvent {\n\t/**\n\t * The `uri` of the previous model or null.\n\t */\n\treadonly oldModelUrl: URI | null;\n\t/**\n\t * The `uri` of the new model or null.\n\t */\n\treadonly newModelUrl: URI | null;\n}\n\n// --- view\n\nexport interface IScrollEvent {\n\treadonly scrollTop: number;\n\treadonly scrollLeft: number;\n\treadonly scrollWidth: number;\n\treadonly scrollHeight: number;\n\n\treadonly scrollTopChanged: boolean;\n\treadonly scrollLeftChanged: boolean;\n\treadonly scrollWidthChanged: boolean;\n\treadonly scrollHeightChanged: boolean;\n}\n\nexport interface IContentSizeChangedEvent {\n\treadonly contentWidth: number;\n\treadonly contentHeight: number;\n\n\treadonly contentWidthChanged: boolean;\n\treadonly contentHeightChanged: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ITriggerEditorOperationEvent {\n\tsource: string | null | undefined;\n\thandlerId: string;\n\tpayload: any;\n}\n\nexport interface INewScrollPosition {\n\tscrollLeft?: number;\n\tscrollTop?: number;\n}\n\nexport interface IEditorAction {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly alias: string;\n\treadonly metadata: ICommandMetadata | undefined;\n\tisSupported(): boolean;\n\trun(args?: unknown): Promise<void>;\n}\n\nexport type IEditorModel = ITextModel | IDiffEditorModel | IDiffEditorViewModel;\n\n/**\n * A (serializable) state of the cursors.\n */\nexport interface ICursorState {\n\tinSelectionMode: boolean;\n\tselectionStart: IPosition;\n\tposition: IPosition;\n}\n/**\n * A (serializable) state of the view.\n */\nexport interface IViewState {\n\t/** written by previous versions */\n\tscrollTop?: number;\n\t/** written by previous versions */\n\tscrollTopWithoutViewZones?: number;\n\tscrollLeft: number;\n\tfirstPosition: IPosition;\n\tfirstPositionDeltaTop: number;\n}\n/**\n * A (serializable) state of the code editor.\n */\nexport interface ICodeEditorViewState {\n\tcursorState: ICursorState[];\n\tviewState: IViewState;\n\tcontributionsState: { [id: string]: any };\n}\n/**\n * (Serializable) View state for the diff editor.\n */\nexport interface IDiffEditorViewState {\n\toriginal: ICodeEditorViewState | null;\n\tmodified: ICodeEditorViewState | null;\n\tmodelState?: unknown;\n}\n/**\n * An editor view state.\n */\nexport type IEditorViewState = ICodeEditorViewState | IDiffEditorViewState;\n\nexport enum ScrollType {\n\tSmooth = 0,\n\tImmediate = 1,\n}\n\n/**\n * An editor.\n */\nexport interface IEditor {\n\t/**\n\t * An event emitted when the editor has been disposed.\n\t * @event\n\t */\n\tonDidDispose(listener: () => void): IDisposable;\n\n\t/**\n\t * Dispose the editor.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * Get a unique id for this editor instance.\n\t */\n\tgetId(): string;\n\n\t/**\n\t * Get the editor type. Please see `EditorType`.\n\t * This is to avoid an instanceof check\n\t */\n\tgetEditorType(): string;\n\n\t/**\n\t * Update the editor's options after the editor has been created.\n\t */\n\tupdateOptions(newOptions: IEditorOptions): void;\n\n\t/**\n\t * Indicates that the editor becomes visible.\n\t * @internal\n\t */\n\tonVisible(): void;\n\n\t/**\n\t * Indicates that the editor becomes hidden.\n\t * @internal\n\t */\n\tonHide(): void;\n\n\t/**\n\t * Instructs the editor to remeasure its container. This method should\n\t * be called when the container of the editor gets resized.\n\t *\n\t * If a dimension is passed in, the passed in value will be used.\n\t *\n\t * By default, this will also render the editor immediately.\n\t * If you prefer to delay rendering to the next animation frame, use postponeRendering == true.\n\t */\n\tlayout(dimension?: IDimension, postponeRendering?: boolean): void;\n\n\t/**\n\t * Brings browser focus to the editor text\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Returns true if the text inside this editor is focused (i.e. cursor is blinking).\n\t */\n\thasTextFocus(): boolean;\n\n\t/**\n\t * Returns all actions associated with this editor.\n\t */\n\tgetSupportedActions(): IEditorAction[];\n\n\t/**\n\t * Saves current view state of the editor in a serializable object.\n\t */\n\tsaveViewState(): IEditorViewState | null;\n\n\t/**\n\t * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n\t */\n\trestoreViewState(state: IEditorViewState | null): void;\n\n\t/**\n\t * Given a position, returns a column number that takes tab-widths into account.\n\t */\n\tgetVisibleColumnFromPosition(position: IPosition): number;\n\n\t/**\n\t * Given a position, returns a column number that takes tab-widths into account.\n\t * @internal\n\t */\n\tgetStatusbarColumn(position: IPosition): number;\n\n\t/**\n\t * Returns the primary position of the cursor.\n\t */\n\tgetPosition(): Position | null;\n\n\t/**\n\t * Set the primary position of the cursor. This will remove any secondary cursors.\n\t * @param position New primary cursor's position\n\t * @param source Source of the call that caused the position\n\t */\n\tsetPosition(position: IPosition, source?: string): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line.\n\t */\n\trevealLine(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically.\n\t */\n\trevealLineInCenter(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically only if it lies outside the viewport.\n\t */\n\trevealLineInCenterIfOutsideViewport(\n\t\tlineNumber: number,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealLineNearTop(lineNumber: number, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position.\n\t */\n\trevealPosition(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically.\n\t */\n\trevealPositionInCenter(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically only if it lies outside the viewport.\n\t */\n\trevealPositionInCenterIfOutsideViewport(\n\t\tposition: IPosition,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealPositionNearTop(position: IPosition, scrollType?: ScrollType): void;\n\n\t/**\n\t * Returns the primary selection of the editor.\n\t */\n\tgetSelection(): Selection | null;\n\n\t/**\n\t * Returns all the selections of the editor.\n\t */\n\tgetSelections(): Selection[] | null;\n\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: IRange, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: Range, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: ISelection, source?: string): void;\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelection(selection: Selection, source?: string): void;\n\n\t/**\n\t * Set the selections for all the cursors of the editor.\n\t * Cursors will be removed or added, as necessary.\n\t * @param selections The new selection\n\t * @param source Source of the call that caused the selection\n\t */\n\tsetSelections(selections: readonly ISelection[], source?: string): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines.\n\t */\n\trevealLines(\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically.\n\t */\n\trevealLinesInCenter(\n\t\tlineNumber: number,\n\t\tendLineNumber: number,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically only if it lies outside the viewport.\n\t */\n\trevealLinesInCenterIfOutsideViewport(\n\t\tlineNumber: number,\n\t\tendLineNumber: number,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealLinesNearTop(\n\t\tlineNumber: number,\n\t\tendLineNumber: number,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range.\n\t */\n\trevealRange(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically.\n\t */\n\trevealRangeInCenter(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range at the top of the viewport.\n\t */\n\trevealRangeAtTop(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n\t */\n\trevealRangeInCenterIfOutsideViewport(\n\t\trange: IRange,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n\t * optimized for viewing a code definition.\n\t */\n\trevealRangeNearTop(range: IRange, scrollType?: ScrollType): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n\t * optimized for viewing a code definition. Only if it lies outside the viewport.\n\t */\n\trevealRangeNearTopIfOutsideViewport(\n\t\trange: IRange,\n\t\tscrollType?: ScrollType,\n\t): void;\n\n\t/**\n\t * Directly trigger a handler or an editor action.\n\t * @param source The source of the call.\n\t * @param handlerId The id of the handler or the id of a contribution.\n\t * @param payload Extra data to be sent to the handler.\n\t */\n\ttrigger(\n\t\tsource: string | null | undefined,\n\t\thandlerId: string,\n\t\tpayload: any,\n\t): void;\n\n\t/**\n\t * Gets the current model attached to this editor.\n\t */\n\tgetModel(): IEditorModel | null;\n\n\t/**\n\t * Sets the current model attached to this editor.\n\t * If the previous model was created by the editor via the value key in the options\n\t * literal object, it will be destroyed. Otherwise, if the previous model was set\n\t * via setModel, or the model key in the options literal object, the previous model\n\t * will not be destroyed.\n\t * It is safe to call setModel(null) to simply detach the current model from the editor.\n\t */\n\tsetModel(model: IEditorModel | null): void;\n\n\t/**\n\t * Create a collection of decorations. All decorations added through this collection\n\t * will get the ownerId of the editor (meaning they will not show up in other editors).\n\t * These decorations will be automatically cleared when the editor's model changes.\n\t */\n\tcreateDecorationsCollection(\n\t\tdecorations?: IModelDeltaDecoration[],\n\t): IEditorDecorationsCollection;\n\n\t/**\n\t * Change the decorations. All decorations added through this changeAccessor\n\t * will get the ownerId of the editor (meaning they will not show up in other\n\t * editors).\n\t * @see {@link ITextModel.changeDecorations}\n\t * @internal\n\t */\n\tchangeDecorations(\n\t\tcallback: (changeAccessor: IModelDecorationsChangeAccessor) => any,\n\t): any;\n}\n\n/**\n * A diff editor.\n *\n * @internal\n */\nexport interface IDiffEditor extends IEditor {\n\t/**\n\t * Type the getModel() of IEditor.\n\t */\n\tgetModel(): IDiffEditorModel | null;\n\n\t/**\n\t * Get the `original` editor.\n\t */\n\tgetOriginalEditor(): IEditor;\n\n\t/**\n\t * Get the `modified` editor.\n\t */\n\tgetModifiedEditor(): IEditor;\n}\n\n/**\n * @internal\n */\nexport interface ICompositeCodeEditor {\n\t/**\n\t * An event that signals that the active editor has changed\n\t */\n\treadonly onDidChangeActiveEditor: Event<ICompositeCodeEditor>;\n\n\t/**\n\t * The active code editor iff any\n\t */\n\treadonly activeCodeEditor: IEditor | undefined;\n\t// readonly editors: readonly ICodeEditor[] maybe supported with uris\n}\n\n/**\n * A collection of decorations\n */\nexport interface IEditorDecorationsCollection {\n\t/**\n\t * An event emitted when decorations change in the editor,\n\t * but the change is not caused by us setting or clearing the collection.\n\t */\n\tonDidChange: Event<IModelDecorationsChangedEvent>;\n\t/**\n\t * Get the decorations count.\n\t */\n\tlength: number;\n\t/**\n\t * Get the range for a decoration.\n\t */\n\tgetRange(index: number): Range | null;\n\t/**\n\t * Get all ranges for decorations.\n\t */\n\tgetRanges(): Range[];\n\t/**\n\t * Determine if a decoration is in this collection.\n\t */\n\thas(decoration: IModelDecoration): boolean;\n\t/**\n\t * Replace all previous decorations with `newDecorations`.\n\t */\n\tset(newDecorations: readonly IModelDeltaDecoration[]): string[];\n\t/**\n\t * Append `newDecorations` to this collection.\n\t */\n\tappend(newDecorations: readonly IModelDeltaDecoration[]): string[];\n\t/**\n\t * Remove all previous decorations.\n\t */\n\tclear(): void;\n}\n\n/**\n * An editor contribution that gets created every time a new editor gets created and gets disposed when the editor gets disposed.\n */\nexport interface IEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): any;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: any): void;\n}\n\n/**\n * A diff editor contribution that gets created every time a new  diffeditor gets created and gets disposed when the diff editor gets disposed.\n * @internal\n */\nexport interface IDiffEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n}\n\n/**\n * @internal\n */\nexport function isThemeColor(o: any): o is ThemeColor {\n\treturn o && typeof o.id === \"string\";\n}\n\n/**\n * @internal\n */\nexport interface IThemeDecorationRenderOptions {\n\tbackgroundColor?: string | ThemeColor;\n\n\toutline?: string;\n\toutlineColor?: string | ThemeColor;\n\toutlineStyle?: string;\n\toutlineWidth?: string;\n\n\tborder?: string;\n\tborderColor?: string | ThemeColor;\n\tborderRadius?: string;\n\tborderSpacing?: string;\n\tborderStyle?: string;\n\tborderWidth?: string;\n\n\tfontStyle?: string;\n\tfontWeight?: string;\n\tfontSize?: string;\n\ttextDecoration?: string;\n\tcursor?: string;\n\tcolor?: string | ThemeColor;\n\topacity?: string;\n\tletterSpacing?: string;\n\n\tgutterIconPath?: UriComponents;\n\tgutterIconSize?: string;\n\n\toverviewRulerColor?: string | ThemeColor;\n\n\t/**\n\t * @deprecated\n\t */\n\tbefore?: IContentDecorationRenderOptions;\n\t/**\n\t * @deprecated\n\t */\n\tafter?: IContentDecorationRenderOptions;\n\n\t/**\n\t * @deprecated\n\t */\n\tbeforeInjectedText?: IContentDecorationRenderOptions & {\n\t\taffectsLetterSpacing?: boolean;\n\t};\n\t/**\n\t * @deprecated\n\t */\n\tafterInjectedText?: IContentDecorationRenderOptions & {\n\t\taffectsLetterSpacing?: boolean;\n\t};\n}\n\n/**\n * @internal\n */\nexport interface IContentDecorationRenderOptions {\n\tcontentText?: string;\n\tcontentIconPath?: UriComponents;\n\n\tborder?: string;\n\tborderColor?: string | ThemeColor;\n\tborderRadius?: string;\n\tfontStyle?: string;\n\tfontWeight?: string;\n\tfontSize?: string;\n\tfontFamily?: string;\n\ttextDecoration?: string;\n\tcolor?: string | ThemeColor;\n\tbackgroundColor?: string | ThemeColor;\n\topacity?: string;\n\tverticalAlign?: string;\n\n\tmargin?: string;\n\tpadding?: string;\n\twidth?: string;\n\theight?: string;\n}\n\n/**\n * @internal\n */\nexport interface IDecorationRenderOptions\n\textends IThemeDecorationRenderOptions {\n\tisWholeLine?: boolean;\n\trangeBehavior?: TrackedRangeStickiness;\n\toverviewRulerLane?: OverviewRulerLane;\n\n\tlight?: IThemeDecorationRenderOptions;\n\tdark?: IThemeDecorationRenderOptions;\n}\n\n/**\n * @internal\n */\nexport interface IThemeDecorationInstanceRenderOptions {\n\t/**\n\t * @deprecated\n\t */\n\tbefore?: IContentDecorationRenderOptions;\n\t/**\n\t * @deprecated\n\t */\n\tafter?: IContentDecorationRenderOptions;\n}\n\n/**\n * @internal\n */\nexport interface IDecorationInstanceRenderOptions\n\textends IThemeDecorationInstanceRenderOptions {\n\tlight?: IThemeDecorationInstanceRenderOptions;\n\tdark?: IThemeDecorationInstanceRenderOptions;\n}\n\n/**\n * @internal\n */\nexport interface IDecorationOptions {\n\trange: IRange;\n\thoverMessage?: IMarkdownString | IMarkdownString[];\n\trenderOptions?: IDecorationInstanceRenderOptions;\n}\n\n/**\n * The type of the `IEditor`.\n */\nexport const EditorType = {\n\tICodeEditor: \"vs.editor.ICodeEditor\",\n\tIDiffEditor: \"vs.editor.IDiffEditor\",\n};\n\n/**\n * Built-in commands.\n * @internal\n */\nexport enum Handler {\n\tCompositionStart = \"compositionStart\",\n\tCompositionEnd = \"compositionEnd\",\n\tType = \"type\",\n\tReplacePreviousChar = \"replacePreviousChar\",\n\tCompositionType = \"compositionType\",\n\tPaste = \"paste\",\n\tCut = \"cut\",\n}\n\n/**\n * @internal\n */\nexport interface TypePayload {\n\ttext: string;\n}\n\n/**\n * @internal\n */\nexport interface ReplacePreviousCharPayload {\n\ttext: string;\n\treplaceCharCnt: number;\n}\n\n/**\n * @internal\n */\nexport interface CompositionTypePayload {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n"],
  "mappings": ";;AA4OO,IAAK,aAAL,kBAAKA,gBAAL;AACN,EAAAA,wBAAA,YAAS,KAAT;AACA,EAAAA,wBAAA,eAAY,KAAZ;AAFW,SAAAA;AAAA,GAAA;AA8aL,SAAS,aAAa,GAAyB;AACrD,SAAO,KAAK,OAAO,EAAE,OAAO;AAC7B;AAFgB;AAqIT,MAAM,aAAa;AAAA,EACzB,aAAa;AAAA,EACb,aAAa;AACd;AAMO,IAAK,UAAL,kBAAKC,aAAL;AACN,EAAAA,SAAA,sBAAmB;AACnB,EAAAA,SAAA,oBAAiB;AACjB,EAAAA,SAAA,UAAO;AACP,EAAAA,SAAA,yBAAsB;AACtB,EAAAA,SAAA,qBAAkB;AAClB,EAAAA,SAAA,WAAQ;AACR,EAAAA,SAAA,SAAM;AAPK,SAAAA;AAAA,GAAA;",
  "names": ["ScrollType", "Handler"]
}
