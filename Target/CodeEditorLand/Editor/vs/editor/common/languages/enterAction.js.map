{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/enterAction.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { ITextModel } from '../model.js';\nimport { IndentAction, CompleteEnterAction } from './languageConfiguration.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { getIndentationAtPosition, ILanguageConfigurationService } from './languageConfigurationRegistry.js';\nimport { IndentationContextProcessor } from './supports/indentationLineProcessor.js';\n\nexport function getEnterAction(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): CompleteEnterAction | null {\n\tmodel.tokenization.forceTokenization(range.startLineNumber);\n\tconst languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n\tconst richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n\tif (!richEditSupport) {\n\t\treturn null;\n\t}\n\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\tconst processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n\tconst previousLineText = processedContextTokens.previousLineProcessedTokens.getLineContent();\n\tconst beforeEnterText = processedContextTokens.beforeRangeProcessedTokens.getLineContent();\n\tconst afterEnterText = processedContextTokens.afterRangeProcessedTokens.getLineContent();\n\n\tconst enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n\tif (!enterResult) {\n\t\treturn null;\n\t}\n\n\tconst indentAction = enterResult.indentAction;\n\tlet appendText = enterResult.appendText;\n\tconst removeText = enterResult.removeText || 0;\n\n\t// Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n\tif (!appendText) {\n\t\tif (\n\t\t\t(indentAction === IndentAction.Indent) ||\n\t\t\t(indentAction === IndentAction.IndentOutdent)\n\t\t) {\n\t\t\tappendText = '\\t';\n\t\t} else {\n\t\t\tappendText = '';\n\t\t}\n\t} else if (indentAction === IndentAction.Indent) {\n\t\tappendText = '\\t' + appendText;\n\t}\n\n\tlet indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n\tif (removeText) {\n\t\tindentation = indentation.substring(0, indentation.length - removeText);\n\t}\n\n\treturn {\n\t\tindentAction: indentAction,\n\t\tappendText: appendText,\n\t\tremoveText: removeText,\n\t\tindentation: indentation\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,cAAc,2BAA2B;AAClD,SAAS,gCAAgC;AACzC,SAAS,0BAA0B,qCAAqC;AACxE,SAAS,mCAAmC;AAErC,SAAS,eACf,YACA,OACA,OACA,8BAC6B;AAC7B,QAAM,aAAa,kBAAkB,MAAM,eAAe;AAC1D,QAAM,aAAa,MAAM,wBAAwB,MAAM,iBAAiB,MAAM,WAAW;AACzF,QAAM,kBAAkB,6BAA6B,yBAAyB,UAAU;AACxF,MAAI,CAAC,iBAAiB;AACrB,WAAO;AAAA,EACR;AACA,QAAM,8BAA8B,IAAI,4BAA4B,OAAO,4BAA4B;AACvG,QAAM,yBAAyB,4BAA4B,oCAAoC,KAAK;AACpG,QAAM,mBAAmB,uBAAuB,4BAA4B,eAAe;AAC3F,QAAM,kBAAkB,uBAAuB,2BAA2B,eAAe;AACzF,QAAM,iBAAiB,uBAAuB,0BAA0B,eAAe;AAEvF,QAAM,cAAc,gBAAgB,QAAQ,YAAY,kBAAkB,iBAAiB,cAAc;AACzG,MAAI,CAAC,aAAa;AACjB,WAAO;AAAA,EACR;AAEA,QAAM,eAAe,YAAY;AACjC,MAAI,aAAa,YAAY;AAC7B,QAAM,aAAa,YAAY,cAAc;AAG7C,MAAI,CAAC,YAAY;AAChB,QACE,iBAAiB,aAAa,UAC9B,iBAAiB,aAAa,eAC9B;AACD,mBAAa;AAAA,IACd,OAAO;AACN,mBAAa;AAAA,IACd;AAAA,EACD,WAAW,iBAAiB,aAAa,QAAQ;AAChD,iBAAa,MAAO;AAAA,EACrB;AAEA,MAAI,cAAc,yBAAyB,OAAO,MAAM,iBAAiB,MAAM,WAAW;AAC1F,MAAI,YAAY;AACf,kBAAc,YAAY,UAAU,GAAG,YAAY,SAAS,UAAU;AAAA,EACvE;AAEA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;AApDgB;",
  "names": []
}
