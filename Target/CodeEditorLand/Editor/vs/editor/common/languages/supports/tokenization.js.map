{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports/tokenization.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from \"../../../../base/common/color.js\";\nimport {\n\tColorId,\n\tFontStyle,\n\ttype LanguageId,\n\tMetadataConsts,\n\tStandardTokenType,\n} from \"../../encodedTokenAttributes.js\";\n\nexport interface ITokenThemeRule {\n\ttoken: string;\n\tforeground?: string;\n\tbackground?: string;\n\tfontStyle?: string;\n}\n\nexport class ParsedTokenThemeRule {\n\t_parsedThemeRuleBrand: void = undefined;\n\n\treadonly token: string;\n\treadonly index: number;\n\n\t/**\n\t * -1 if not set. An or mask of `FontStyle` otherwise.\n\t */\n\treadonly fontStyle: FontStyle;\n\treadonly foreground: string | null;\n\treadonly background: string | null;\n\n\tconstructor(\n\t\ttoken: string,\n\t\tindex: number,\n\t\tfontStyle: number,\n\t\tforeground: string | null,\n\t\tbackground: string | null,\n\t) {\n\t\tthis.token = token;\n\t\tthis.index = index;\n\t\tthis.fontStyle = fontStyle;\n\t\tthis.foreground = foreground;\n\t\tthis.background = background;\n\t}\n}\n\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(\n\tsource: ITokenThemeRule[],\n): ParsedTokenThemeRule[] {\n\tif (!source || !Array.isArray(source)) {\n\t\treturn [];\n\t}\n\tconst result: ParsedTokenThemeRule[] = [];\n\tlet resultLen = 0;\n\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\tconst entry = source[i];\n\n\t\tlet fontStyle: number = FontStyle.NotSet;\n\t\tif (typeof entry.fontStyle === \"string\") {\n\t\t\tfontStyle = FontStyle.None;\n\n\t\t\tconst segments = entry.fontStyle.split(\" \");\n\t\t\tfor (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n\t\t\t\tconst segment = segments[j];\n\t\t\t\tswitch (segment) {\n\t\t\t\t\tcase \"italic\":\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Italic;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"bold\":\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Bold;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"underline\":\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Underline;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"strikethrough\":\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Strikethrough;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet foreground: string | null = null;\n\t\tif (typeof entry.foreground === \"string\") {\n\t\t\tforeground = entry.foreground;\n\t\t}\n\n\t\tlet background: string | null = null;\n\t\tif (typeof entry.background === \"string\") {\n\t\t\tbackground = entry.background;\n\t\t}\n\n\t\tresult[resultLen++] = new ParsedTokenThemeRule(\n\t\t\tentry.token || \"\",\n\t\t\ti,\n\t\t\tfontStyle,\n\t\t\tforeground,\n\t\t\tbackground,\n\t\t);\n\t}\n\n\treturn result;\n}\n\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(\n\tparsedThemeRules: ParsedTokenThemeRule[],\n\tcustomTokenColors: string[],\n): TokenTheme {\n\t// Sort rules lexicographically, and then by index if necessary\n\tparsedThemeRules.sort((a, b) => {\n\t\tconst r = strcmp(a.token, b.token);\n\t\tif (r !== 0) {\n\t\t\treturn r;\n\t\t}\n\t\treturn a.index - b.index;\n\t});\n\n\t// Determine defaults\n\tlet defaultFontStyle = FontStyle.None;\n\tlet defaultForeground = \"000000\";\n\tlet defaultBackground = \"ffffff\";\n\twhile (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === \"\") {\n\t\tconst incomingDefaults = parsedThemeRules.shift()!;\n\t\tif (incomingDefaults.fontStyle !== FontStyle.NotSet) {\n\t\t\tdefaultFontStyle = incomingDefaults.fontStyle;\n\t\t}\n\t\tif (incomingDefaults.foreground !== null) {\n\t\t\tdefaultForeground = incomingDefaults.foreground;\n\t\t}\n\t\tif (incomingDefaults.background !== null) {\n\t\t\tdefaultBackground = incomingDefaults.background;\n\t\t}\n\t}\n\tconst colorMap = new ColorMap();\n\n\t// start with token colors from custom token themes\n\tfor (const color of customTokenColors) {\n\t\tcolorMap.getId(color);\n\t}\n\n\tconst foregroundColorId = colorMap.getId(defaultForeground);\n\tconst backgroundColorId = colorMap.getId(defaultBackground);\n\n\tconst defaults = new ThemeTrieElementRule(\n\t\tdefaultFontStyle,\n\t\tforegroundColorId,\n\t\tbackgroundColorId,\n\t);\n\tconst root = new ThemeTrieElement(defaults);\n\tfor (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n\t\tconst rule = parsedThemeRules[i];\n\t\troot.insert(\n\t\t\trule.token,\n\t\t\trule.fontStyle,\n\t\t\tcolorMap.getId(rule.foreground),\n\t\t\tcolorMap.getId(rule.background),\n\t\t);\n\t}\n\n\treturn new TokenTheme(colorMap, root);\n}\n\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\n\nexport class ColorMap {\n\tprivate _lastColorId: number;\n\tprivate readonly _id2color: Color[];\n\tprivate readonly _color2id: Map<string, ColorId>;\n\n\tconstructor() {\n\t\tthis._lastColorId = 0;\n\t\tthis._id2color = [];\n\t\tthis._color2id = new Map<string, ColorId>();\n\t}\n\n\tpublic getId(color: string | null): ColorId {\n\t\tif (color === null) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst match = color.match(colorRegExp);\n\t\tif (!match) {\n\t\t\tthrow new Error(\"Illegal value for token color: \" + color);\n\t\t}\n\t\tcolor = match[1].toUpperCase();\n\t\tlet value = this._color2id.get(color);\n\t\tif (value) {\n\t\t\treturn value;\n\t\t}\n\t\tvalue = ++this._lastColorId;\n\t\tthis._color2id.set(color, value);\n\t\tthis._id2color[value] = Color.fromHex(\"#\" + color);\n\t\treturn value;\n\t}\n\n\tpublic getColorMap(): Color[] {\n\t\treturn this._id2color.slice(0);\n\t}\n}\n\nexport class TokenTheme {\n\tpublic static createFromRawTokenTheme(\n\t\tsource: ITokenThemeRule[],\n\t\tcustomTokenColors: string[],\n\t): TokenTheme {\n\t\treturn this.createFromParsedTokenTheme(\n\t\t\tparseTokenTheme(source),\n\t\t\tcustomTokenColors,\n\t\t);\n\t}\n\n\tpublic static createFromParsedTokenTheme(\n\t\tsource: ParsedTokenThemeRule[],\n\t\tcustomTokenColors: string[],\n\t): TokenTheme {\n\t\treturn resolveParsedTokenThemeRules(source, customTokenColors);\n\t}\n\n\tprivate readonly _colorMap: ColorMap;\n\tprivate readonly _root: ThemeTrieElement;\n\tprivate readonly _cache: Map<string, number>;\n\n\tconstructor(colorMap: ColorMap, root: ThemeTrieElement) {\n\t\tthis._colorMap = colorMap;\n\t\tthis._root = root;\n\t\tthis._cache = new Map<string, number>();\n\t}\n\n\tpublic getColorMap(): Color[] {\n\t\treturn this._colorMap.getColorMap();\n\t}\n\n\t/**\n\t * used for testing purposes\n\t */\n\tpublic getThemeTrieElement(): ExternalThemeTrieElement {\n\t\treturn this._root.toExternalThemeTrieElement();\n\t}\n\n\tpublic _match(token: string): ThemeTrieElementRule {\n\t\treturn this._root.match(token);\n\t}\n\n\tpublic match(languageId: LanguageId, token: string): number {\n\t\t// The cache contains the metadata without the language bits set.\n\t\tlet result = this._cache.get(token);\n\t\tif (typeof result === \"undefined\") {\n\t\t\tconst rule = this._match(token);\n\t\t\tconst standardToken = toStandardTokenType(token);\n\t\t\tresult =\n\t\t\t\t(rule.metadata |\n\t\t\t\t\t(standardToken << MetadataConsts.TOKEN_TYPE_OFFSET)) >>>\n\t\t\t\t0;\n\t\t\tthis._cache.set(token, result);\n\t\t}\n\n\t\treturn (\n\t\t\t(result | (languageId << MetadataConsts.LANGUAGEID_OFFSET)) >>> 0\n\t\t);\n\t}\n}\n\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType: string): StandardTokenType {\n\tconst m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n\tif (!m) {\n\t\treturn StandardTokenType.Other;\n\t}\n\tswitch (m[1]) {\n\t\tcase \"comment\":\n\t\t\treturn StandardTokenType.Comment;\n\t\tcase \"string\":\n\t\t\treturn StandardTokenType.String;\n\t\tcase \"regex\":\n\t\t\treturn StandardTokenType.RegEx;\n\t\tcase \"regexp\":\n\t\t\treturn StandardTokenType.RegEx;\n\t}\n\tthrow new Error(\"Unexpected match for standard token type!\");\n}\n\nexport function strcmp(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t}\n\tif (a > b) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nexport class ThemeTrieElementRule {\n\t_themeTrieElementRuleBrand: void = undefined;\n\n\tprivate _fontStyle: FontStyle;\n\tprivate _foreground: ColorId;\n\tprivate _background: ColorId;\n\tpublic metadata: number;\n\n\tconstructor(\n\t\tfontStyle: FontStyle,\n\t\tforeground: ColorId,\n\t\tbackground: ColorId,\n\t) {\n\t\tthis._fontStyle = fontStyle;\n\t\tthis._foreground = foreground;\n\t\tthis._background = background;\n\t\tthis.metadata =\n\t\t\t((this._fontStyle << MetadataConsts.FONT_STYLE_OFFSET) |\n\t\t\t\t(this._foreground << MetadataConsts.FOREGROUND_OFFSET) |\n\t\t\t\t(this._background << MetadataConsts.BACKGROUND_OFFSET)) >>>\n\t\t\t0;\n\t}\n\n\tpublic clone(): ThemeTrieElementRule {\n\t\treturn new ThemeTrieElementRule(\n\t\t\tthis._fontStyle,\n\t\t\tthis._foreground,\n\t\t\tthis._background,\n\t\t);\n\t}\n\n\tpublic acceptOverwrite(\n\t\tfontStyle: FontStyle,\n\t\tforeground: ColorId,\n\t\tbackground: ColorId,\n\t): void {\n\t\tif (fontStyle !== FontStyle.NotSet) {\n\t\t\tthis._fontStyle = fontStyle;\n\t\t}\n\t\tif (foreground !== ColorId.None) {\n\t\t\tthis._foreground = foreground;\n\t\t}\n\t\tif (background !== ColorId.None) {\n\t\t\tthis._background = background;\n\t\t}\n\t\tthis.metadata =\n\t\t\t((this._fontStyle << MetadataConsts.FONT_STYLE_OFFSET) |\n\t\t\t\t(this._foreground << MetadataConsts.FOREGROUND_OFFSET) |\n\t\t\t\t(this._background << MetadataConsts.BACKGROUND_OFFSET)) >>>\n\t\t\t0;\n\t}\n}\n\nexport class ExternalThemeTrieElement {\n\tpublic readonly mainRule: ThemeTrieElementRule;\n\tpublic readonly children: Map<string, ExternalThemeTrieElement>;\n\n\tconstructor(\n\t\tmainRule: ThemeTrieElementRule,\n\t\tchildren:\n\t\t\t| Map<string, ExternalThemeTrieElement>\n\t\t\t| { [key: string]: ExternalThemeTrieElement } = new Map<\n\t\t\tstring,\n\t\t\tExternalThemeTrieElement\n\t\t>(),\n\t) {\n\t\tthis.mainRule = mainRule;\n\t\tif (children instanceof Map) {\n\t\t\tthis.children = children;\n\t\t} else {\n\t\t\tthis.children = new Map<string, ExternalThemeTrieElement>();\n\t\t\tfor (const key in children) {\n\t\t\t\tthis.children.set(key, children[key]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ThemeTrieElement {\n\t_themeTrieElementBrand: void = undefined;\n\n\tprivate readonly _mainRule: ThemeTrieElementRule;\n\tprivate readonly _children: Map<string, ThemeTrieElement>;\n\n\tconstructor(mainRule: ThemeTrieElementRule) {\n\t\tthis._mainRule = mainRule;\n\t\tthis._children = new Map<string, ThemeTrieElement>();\n\t}\n\n\t/**\n\t * used for testing purposes\n\t */\n\tpublic toExternalThemeTrieElement(): ExternalThemeTrieElement {\n\t\tconst children = new Map<string, ExternalThemeTrieElement>();\n\t\tthis._children.forEach((element, index) => {\n\t\t\tchildren.set(index, element.toExternalThemeTrieElement());\n\t\t});\n\t\treturn new ExternalThemeTrieElement(this._mainRule, children);\n\t}\n\n\tpublic match(token: string): ThemeTrieElementRule {\n\t\tif (token === \"\") {\n\t\t\treturn this._mainRule;\n\t\t}\n\n\t\tconst dotIndex = token.indexOf(\".\");\n\t\tlet head: string;\n\t\tlet tail: string;\n\t\tif (dotIndex === -1) {\n\t\t\thead = token;\n\t\t\ttail = \"\";\n\t\t} else {\n\t\t\thead = token.substring(0, dotIndex);\n\t\t\ttail = token.substring(dotIndex + 1);\n\t\t}\n\n\t\tconst child = this._children.get(head);\n\t\tif (typeof child !== \"undefined\") {\n\t\t\treturn child.match(tail);\n\t\t}\n\n\t\treturn this._mainRule;\n\t}\n\n\tpublic insert(\n\t\ttoken: string,\n\t\tfontStyle: FontStyle,\n\t\tforeground: ColorId,\n\t\tbackground: ColorId,\n\t): void {\n\t\tif (token === \"\") {\n\t\t\t// Merge into the main rule\n\t\t\tthis._mainRule.acceptOverwrite(fontStyle, foreground, background);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dotIndex = token.indexOf(\".\");\n\t\tlet head: string;\n\t\tlet tail: string;\n\t\tif (dotIndex === -1) {\n\t\t\thead = token;\n\t\t\ttail = \"\";\n\t\t} else {\n\t\t\thead = token.substring(0, dotIndex);\n\t\t\ttail = token.substring(dotIndex + 1);\n\t\t}\n\n\t\tlet child = this._children.get(head);\n\t\tif (typeof child === \"undefined\") {\n\t\t\tchild = new ThemeTrieElement(this._mainRule.clone());\n\t\t\tthis._children.set(head, child);\n\t\t}\n\n\t\tchild.insert(tail, fontStyle, foreground, background);\n\t}\n}\n\nexport function generateTokensCSSForColorMap(\n\tcolorMap: readonly Color[],\n): string {\n\tconst rules: string[] = [];\n\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\tconst color = colorMap[i];\n\t\trules[i] = `.mtk${i} { color: ${color}; }`;\n\t}\n\trules.push(\".mtki { font-style: italic; }\");\n\trules.push(\".mtkb { font-weight: bold; }\");\n\trules.push(\n\t\t\".mtku { text-decoration: underline; text-underline-position: under; }\",\n\t);\n\trules.push(\".mtks { text-decoration: line-through; }\");\n\trules.push(\n\t\t\".mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }\",\n\t);\n\treturn rules.join(\"\\n\");\n}\n"],
  "mappings": "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",
  "names": []
}
