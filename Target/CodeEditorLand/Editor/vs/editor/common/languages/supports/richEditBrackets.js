import*as x from"../../../../../vs/base/common/strings.js";import{Range as m}from"../../../../../vs/editor/common/core/range.js";import*as B from"../../../../../vs/editor/common/core/stringBuilder.js";import"../../../../../vs/editor/common/languages/languageConfiguration.js";class f{_richEditBracketBrand=void 0;languageId;index;open;close;forwardRegex;reversedRegex;_openSet;_closeSet;constructor(t,r,n,e,o,s){this.languageId=t,this.index=r,this.open=n,this.close=e,this.forwardRegex=o,this.reversedRegex=s,this._openSet=f._toSet(this.open),this._closeSet=f._toSet(this.close)}isOpen(t){return this._openSet.has(t)}isClose(t){return this._closeSet.has(t)}static _toSet(t){const r=new Set;for(const n of t)r.add(n);return r}}function b(i){const t=i.length;i=i.map(s=>[s[0].toLowerCase(),s[1].toLowerCase()]);const r=[];for(let s=0;s<t;s++)r[s]=s;const n=(s,c)=>{const[a,l]=s,[g,u]=c;return a===g||a===u||l===g||l===u},e=(s,c)=>{const a=Math.min(s,c),l=Math.max(s,c);for(let g=0;g<t;g++)r[g]===l&&(r[g]=a)};for(let s=0;s<t;s++){const c=i[s];for(let a=s+1;a<t;a++){const l=i[a];n(c,l)&&e(r[s],r[a])}}const o=[];for(let s=0;s<t;s++){const c=[],a=[];for(let l=0;l<t;l++)if(r[l]===s){const[g,u]=i[l];c.push(g),a.push(u)}c.length>0&&o.push({open:c,close:a})}return o}class L{_richEditBracketsBrand=void 0;brackets;forwardRegex;reversedRegex;maxBracketLength;textIsBracket;textIsOpenBracket;constructor(t,r){const n=b(r);this.brackets=n.map((e,o)=>new f(t,o,e.open,e.close,E(e.open,e.close,n,o),v(e.open,e.close,n,o))),this.forwardRegex=I(this.brackets),this.reversedRegex=S(this.brackets),this.textIsBracket={},this.textIsOpenBracket={},this.maxBracketLength=0;for(const e of this.brackets){for(const o of e.open)this.textIsBracket[o]=e,this.textIsOpenBracket[o]=!0,this.maxBracketLength=Math.max(this.maxBracketLength,o.length);for(const o of e.close)this.textIsBracket[o]=e,this.textIsOpenBracket[o]=!1,this.maxBracketLength=Math.max(this.maxBracketLength,o.length)}}}function R(i,t,r,n){for(let e=0,o=t.length;e<o;e++){if(e===r)continue;const s=t[e];for(const c of s.open)c.indexOf(i)>=0&&n.push(c);for(const c of s.close)c.indexOf(i)>=0&&n.push(c)}}function k(i,t){return i.length-t.length}function p(i){if(i.length<=1)return i;const t=[],r=new Set;for(const n of i)r.has(n)||(t.push(n),r.add(n));return t}function E(i,t,r,n){let e=[];e=e.concat(i),e=e.concat(t);for(let o=0,s=e.length;o<s;o++)R(e[o],r,n,e);return e=p(e),e.sort(k),e.reverse(),h(e)}function v(i,t,r,n){let e=[];e=e.concat(i),e=e.concat(t);for(let o=0,s=e.length;o<s;o++)R(e[o],r,n,e);return e=p(e),e.sort(k),e.reverse(),h(e.map(d))}function I(i){let t=[];for(const r of i){for(const n of r.open)t.push(n);for(const n of r.close)t.push(n)}return t=p(t),h(t)}function S(i){let t=[];for(const r of i){for(const n of r.open)t.push(n);for(const n of r.close)t.push(n)}return t=p(t),h(t.map(d))}function y(i){const t=/^[\w ]+$/.test(i);return i=x.escapeRegExpCharacters(i),t?`\\b${i}\\b`:i}function h(i,t){const r=`(${i.map(y).join(")|(")})`;return x.createRegExp(r,!0,t)}const d=function(){function i(n){const e=new Uint16Array(n.length);let o=0;for(let s=n.length-1;s>=0;s--)e[o++]=n.charCodeAt(s);return B.getPlatformTextDecoder().decode(e)}let t=null,r=null;return function(e){return t!==e&&(t=e,r=i(t)),r}}();class P{static _findPrevBracketInText(t,r,n,e){const o=n.match(t);if(!o)return null;const s=n.length-(o.index||0),c=o[0].length,a=e+s;return new m(r,a-c+1,r,a+1)}static findPrevBracketInRange(t,r,n,e,o){const c=d(n).substring(n.length-o,n.length-e);return this._findPrevBracketInText(t,r,c,e)}static findNextBracketInText(t,r,n,e){const o=n.match(t);if(!o)return null;const s=o.index||0,c=o[0].length;if(c===0)return null;const a=e+s;return new m(r,a+1,r,a+1+c)}static findNextBracketInRange(t,r,n,e,o){const s=n.substring(e,o);return this.findNextBracketInText(t,r,s,e)}}export{P as BracketsUtils,f as RichEditBracket,L as RichEditBrackets,h as createBracketOrRegExp};
