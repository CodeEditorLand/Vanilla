{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports/characterPair.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAutoClosingPair, StandardAutoClosingPairConditional, LanguageConfiguration } from '../languageConfiguration.js';\n\nexport class CharacterPairSupport {\n\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = ';:.,=}])> \\n\\t';\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = '\\'\"`;:.,=}])> \\n\\t';\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_WHITESPACE = ' \\n\\t';\n\n\tprivate readonly _autoClosingPairs: StandardAutoClosingPairConditional[];\n\tprivate readonly _surroundingPairs: IAutoClosingPair[];\n\tprivate readonly _autoCloseBeforeForQuotes: string;\n\tprivate readonly _autoCloseBeforeForBrackets: string;\n\n\tconstructor(config: LanguageConfiguration) {\n\t\tif (config.autoClosingPairs) {\n\t\t\tthis._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n\t\t} else if (config.brackets) {\n\t\t\tthis._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n\t\t} else {\n\t\t\tthis._autoClosingPairs = [];\n\t\t}\n\n\t\tif (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n\t\t\tconst docComment = config.__electricCharacterSupport.docComment;\n\t\t\t// IDocComment is legacy, only partially supported\n\t\t\tthis._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n\t\t}\n\n\t\tthis._autoCloseBeforeForQuotes = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n\t\tthis._autoCloseBeforeForBrackets = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n\n\t\tthis._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n\t}\n\n\tpublic getAutoClosingPairs(): StandardAutoClosingPairConditional[] {\n\t\treturn this._autoClosingPairs;\n\t}\n\n\tpublic getAutoCloseBeforeSet(forQuotes: boolean): string {\n\t\treturn (forQuotes ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets);\n\t}\n\n\tpublic getSurroundingPairs(): IAutoClosingPair[] {\n\t\treturn this._surroundingPairs;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB,oCAAoC,6BAA6B;AAErF,MAAM,qBAAqB;AAAA,EAPlC,OAOkC;AAAA;AAAA;AAAA,EAEjC,OAAgB,mDAAmD;AAAA,EACnE,OAAgB,qDAAqD;AAAA,EACrE,OAAgB,sCAAsC;AAAA,EAErC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,QAA+B;AAC1C,QAAI,OAAO,kBAAkB;AAC5B,WAAK,oBAAoB,OAAO,iBAAiB,IAAI,QAAM,IAAI,mCAAmC,EAAE,CAAC;AAAA,IACtG,WAAW,OAAO,UAAU;AAC3B,WAAK,oBAAoB,OAAO,SAAS,IAAI,OAAK,IAAI,mCAAmC,EAAE,MAAM,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;AAAA,IACtH,OAAO;AACN,WAAK,oBAAoB,CAAC;AAAA,IAC3B;AAEA,QAAI,OAAO,8BAA8B,OAAO,2BAA2B,YAAY;AACtF,YAAM,aAAa,OAAO,2BAA2B;AAErD,WAAK,kBAAkB,KAAK,IAAI,mCAAmC,EAAE,MAAM,WAAW,MAAM,OAAO,WAAW,SAAS,GAAG,CAAC,CAAC;AAAA,IAC7H;AAEA,SAAK,4BAA4B,OAAO,OAAO,oBAAoB,WAAW,OAAO,kBAAkB,qBAAqB;AAC5H,SAAK,8BAA8B,OAAO,OAAO,oBAAoB,WAAW,OAAO,kBAAkB,qBAAqB;AAE9H,SAAK,oBAAoB,OAAO,oBAAoB,KAAK;AAAA,EAC1D;AAAA,EAEO,sBAA4D;AAClE,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,sBAAsB,WAA4B;AACxD,WAAQ,YAAY,KAAK,4BAA4B,KAAK;AAAA,EAC3D;AAAA,EAEO,sBAA0C;AAChD,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
