{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports/characterPair.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype IAutoClosingPair,\n\ttype LanguageConfiguration,\n\tStandardAutoClosingPairConditional,\n} from \"../languageConfiguration.js\";\n\nexport class CharacterPairSupport {\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES =\n\t\t\";:.,=}])> \\n\\t\";\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS =\n\t\t\"'\\\"`;:.,=}])> \\n\\t\";\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_WHITESPACE = \" \\n\\t\";\n\n\tprivate readonly _autoClosingPairs: StandardAutoClosingPairConditional[];\n\tprivate readonly _surroundingPairs: IAutoClosingPair[];\n\tprivate readonly _autoCloseBeforeForQuotes: string;\n\tprivate readonly _autoCloseBeforeForBrackets: string;\n\n\tconstructor(config: LanguageConfiguration) {\n\t\tif (config.autoClosingPairs) {\n\t\t\tthis._autoClosingPairs = config.autoClosingPairs.map(\n\t\t\t\t(el) => new StandardAutoClosingPairConditional(el),\n\t\t\t);\n\t\t} else if (config.brackets) {\n\t\t\tthis._autoClosingPairs = config.brackets.map(\n\t\t\t\t(b) =>\n\t\t\t\t\tnew StandardAutoClosingPairConditional({\n\t\t\t\t\t\topen: b[0],\n\t\t\t\t\t\tclose: b[1],\n\t\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\tthis._autoClosingPairs = [];\n\t\t}\n\n\t\tif (\n\t\t\tconfig.__electricCharacterSupport &&\n\t\t\tconfig.__electricCharacterSupport.docComment\n\t\t) {\n\t\t\tconst docComment = config.__electricCharacterSupport.docComment;\n\t\t\t// IDocComment is legacy, only partially supported\n\t\t\tthis._autoClosingPairs.push(\n\t\t\t\tnew StandardAutoClosingPairConditional({\n\t\t\t\t\topen: docComment.open,\n\t\t\t\t\tclose: docComment.close || \"\",\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis._autoCloseBeforeForQuotes =\n\t\t\ttypeof config.autoCloseBefore === \"string\"\n\t\t\t\t? config.autoCloseBefore\n\t\t\t\t: CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n\t\tthis._autoCloseBeforeForBrackets =\n\t\t\ttypeof config.autoCloseBefore === \"string\"\n\t\t\t\t? config.autoCloseBefore\n\t\t\t\t: CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n\n\t\tthis._surroundingPairs =\n\t\t\tconfig.surroundingPairs || this._autoClosingPairs;\n\t}\n\n\tpublic getAutoClosingPairs(): StandardAutoClosingPairConditional[] {\n\t\treturn this._autoClosingPairs;\n\t}\n\n\tpublic getAutoCloseBeforeSet(forQuotes: boolean): string {\n\t\treturn forQuotes\n\t\t\t? this._autoCloseBeforeForQuotes\n\t\t\t: this._autoCloseBeforeForBrackets;\n\t}\n\n\tpublic getSurroundingPairs(): IAutoClosingPair[] {\n\t\treturn this._surroundingPairs;\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EAGC;AAAA,OACM;AAEA,MAAM,qBAAqB;AAAA,EAXlC,OAWkC;AAAA;AAAA;AAAA,EACjC,OAAgB,mDACf;AAAA,EACD,OAAgB,qDACf;AAAA,EACD,OAAgB,sCAAsC;AAAA,EAErC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,QAA+B;AAC1C,QAAI,OAAO,kBAAkB;AAC5B,WAAK,oBAAoB,OAAO,iBAAiB;AAAA,QAChD,CAAC,OAAO,IAAI,mCAAmC,EAAE;AAAA,MAClD;AAAA,IACD,WAAW,OAAO,UAAU;AAC3B,WAAK,oBAAoB,OAAO,SAAS;AAAA,QACxC,CAAC,MACA,IAAI,mCAAmC;AAAA,UACtC,MAAM,EAAE,CAAC;AAAA,UACT,OAAO,EAAE,CAAC;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACD,OAAO;AACN,WAAK,oBAAoB,CAAC;AAAA,IAC3B;AAEA,QACC,OAAO,8BACP,OAAO,2BAA2B,YACjC;AACD,YAAM,aAAa,OAAO,2BAA2B;AAErD,WAAK,kBAAkB;AAAA,QACtB,IAAI,mCAAmC;AAAA,UACtC,MAAM,WAAW;AAAA,UACjB,OAAO,WAAW,SAAS;AAAA,QAC5B,CAAC;AAAA,MACF;AAAA,IACD;AAEA,SAAK,4BACJ,OAAO,OAAO,oBAAoB,WAC/B,OAAO,kBACP,qBAAqB;AACzB,SAAK,8BACJ,OAAO,OAAO,oBAAoB,WAC/B,OAAO,kBACP,qBAAqB;AAEzB,SAAK,oBACJ,OAAO,oBAAoB,KAAK;AAAA,EAClC;AAAA,EAEO,sBAA4D;AAClE,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,sBAAsB,WAA4B;AACxD,WAAO,YACJ,KAAK,4BACL,KAAK;AAAA,EACT;AAAA,EAEO,sBAA0C;AAChD,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
