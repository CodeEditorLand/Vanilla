class i{static INSTANCE=new i;navigateValueSet(t,l,n,e,r){if(t&&l){const a=this.doNavigateValueSet(l,r);if(a)return{range:t,value:a}}if(n&&e){const a=this.doNavigateValueSet(e,r);if(a)return{range:n,value:a}}return null}doNavigateValueSet(t,l){const n=this.numberReplace(t,l);return n!==null?n:this.textReplace(t,l)}numberReplace(t,l){const n=Math.pow(10,t.length-(t.lastIndexOf(".")+1));let e=Number(t);const r=Number.parseFloat(t);return!isNaN(e)&&!isNaN(r)&&e===r?e===0&&!l?null:(e=Math.floor(e*n),e+=l?n:-n,String(e/n)):null}_defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]];textReplace(t,l){return this.valueSetsReplace(this._defaultValueSet,t,l)}valueSetsReplace(t,l,n){let e=null;for(let r=0,a=t.length;e===null&&r<a;r++)e=this.valueSetReplace(t[r],l,n);return e}valueSetReplace(t,l,n){let e=t.indexOf(l);return e>=0?(e+=n?1:-1,e<0?e=t.length-1:e%=t.length,t[e]):null}}export{i as BasicInplaceReplace};
