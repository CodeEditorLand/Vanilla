{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports/languageBracketsConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CachedFunction } from \"../../../../base/common/cache.js\";\nimport type { RegExpOptions } from \"../../../../base/common/strings.js\";\nimport type { LanguageConfiguration } from \"../languageConfiguration.js\";\nimport { createBracketOrRegExp } from \"./richEditBrackets.js\";\n\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n */\nexport class LanguageBracketsConfiguration {\n\tprivate readonly _openingBrackets: ReadonlyMap<string, OpeningBracketKind>;\n\tprivate readonly _closingBrackets: ReadonlyMap<string, ClosingBracketKind>;\n\n\tconstructor(\n\t\tpublic readonly languageId: string,\n\t\tconfig: LanguageConfiguration,\n\t) {\n\t\tconst bracketPairs = config.brackets\n\t\t\t? filterValidBrackets(config.brackets)\n\t\t\t: [];\n\t\tconst openingBracketInfos = new CachedFunction((bracket: string) => {\n\t\t\tconst closing = new Set<ClosingBracketKind>();\n\n\t\t\treturn {\n\t\t\t\tinfo: new OpeningBracketKind(this, bracket, closing),\n\t\t\t\tclosing,\n\t\t\t};\n\t\t});\n\t\tconst closingBracketInfos = new CachedFunction((bracket: string) => {\n\t\t\tconst opening = new Set<OpeningBracketKind>();\n\t\t\tconst openingColorized = new Set<OpeningBracketKind>();\n\t\t\treturn {\n\t\t\t\tinfo: new ClosingBracketKind(\n\t\t\t\t\tthis,\n\t\t\t\t\tbracket,\n\t\t\t\t\topening,\n\t\t\t\t\topeningColorized,\n\t\t\t\t),\n\t\t\t\topening,\n\t\t\t\topeningColorized,\n\t\t\t};\n\t\t});\n\n\t\tfor (const [open, close] of bracketPairs) {\n\t\t\tconst opening = openingBracketInfos.get(open);\n\t\t\tconst closing = closingBracketInfos.get(close);\n\n\t\t\topening.closing.add(closing.info);\n\t\t\tclosing.opening.add(opening.info);\n\t\t}\n\n\t\t// Treat colorized brackets as brackets, and mark them as colorized.\n\t\tconst colorizedBracketPairs = config.colorizedBracketPairs\n\t\t\t? filterValidBrackets(config.colorizedBracketPairs)\n\t\t\t: // If not configured: Take all brackets except `<` ... `>`\n\t\t\t\t// Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n\t\t\t\t// This leads to problems when colorizing this bracket, so we exclude it if not explicitly configured otherwise.\n\t\t\t\t// https://github.com/microsoft/vscode/issues/132476\n\t\t\t\tbracketPairs.filter((p) => !(p[0] === \"<\" && p[1] === \">\"));\n\t\tfor (const [open, close] of colorizedBracketPairs) {\n\t\t\tconst opening = openingBracketInfos.get(open);\n\t\t\tconst closing = closingBracketInfos.get(close);\n\n\t\t\topening.closing.add(closing.info);\n\t\t\tclosing.openingColorized.add(opening.info);\n\t\t\tclosing.opening.add(opening.info);\n\t\t}\n\n\t\tthis._openingBrackets = new Map(\n\t\t\t[...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]),\n\t\t);\n\t\tthis._closingBrackets = new Map(\n\t\t\t[...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]),\n\t\t);\n\t}\n\n\t/**\n\t * No two brackets have the same bracket text.\n\t */\n\tpublic get openingBrackets(): readonly OpeningBracketKind[] {\n\t\treturn [...this._openingBrackets.values()];\n\t}\n\n\t/**\n\t * No two brackets have the same bracket text.\n\t */\n\tpublic get closingBrackets(): readonly ClosingBracketKind[] {\n\t\treturn [...this._closingBrackets.values()];\n\t}\n\n\tpublic getOpeningBracketInfo(\n\t\tbracketText: string,\n\t): OpeningBracketKind | undefined {\n\t\treturn this._openingBrackets.get(bracketText);\n\t}\n\n\tpublic getClosingBracketInfo(\n\t\tbracketText: string,\n\t): ClosingBracketKind | undefined {\n\t\treturn this._closingBrackets.get(bracketText);\n\t}\n\n\tpublic getBracketInfo(bracketText: string): BracketKind | undefined {\n\t\treturn (\n\t\t\tthis.getOpeningBracketInfo(bracketText) ||\n\t\t\tthis.getClosingBracketInfo(bracketText)\n\t\t);\n\t}\n\n\tpublic getBracketRegExp(options?: RegExpOptions): RegExp {\n\t\tconst brackets = Array.from([\n\t\t\t...this._openingBrackets.keys(),\n\t\t\t...this._closingBrackets.keys(),\n\t\t]);\n\t\treturn createBracketOrRegExp(brackets, options);\n\t}\n}\n\nfunction filterValidBrackets(\n\tbracketPairs: [string, string][],\n): [string, string][] {\n\treturn bracketPairs.filter(([open, close]) => open !== \"\" && close !== \"\");\n}\n\nexport type BracketKind = OpeningBracketKind | ClosingBracketKind;\n\nexport class BracketKindBase {\n\tconstructor(\n\t\tprotected readonly config: LanguageBracketsConfiguration,\n\t\tpublic readonly bracketText: string,\n\t) {}\n\n\tpublic get languageId(): string {\n\t\treturn this.config.languageId;\n\t}\n}\n\nexport class OpeningBracketKind extends BracketKindBase {\n\tpublic readonly isOpeningBracket = true;\n\n\tconstructor(\n\t\tconfig: LanguageBracketsConfiguration,\n\t\tbracketText: string,\n\t\tpublic readonly openedBrackets: ReadonlySet<ClosingBracketKind>,\n\t) {\n\t\tsuper(config, bracketText);\n\t}\n}\n\nexport class ClosingBracketKind extends BracketKindBase {\n\tpublic readonly isOpeningBracket = false;\n\n\tconstructor(\n\t\tconfig: LanguageBracketsConfiguration,\n\t\tbracketText: string,\n\t\t/**\n\t\t * Non empty array of all opening brackets this bracket closes.\n\t\t */\n\t\tpublic readonly openingBrackets: ReadonlySet<OpeningBracketKind>,\n\t\tprivate readonly openingColorizedBrackets: ReadonlySet<OpeningBracketKind>,\n\t) {\n\t\tsuper(config, bracketText);\n\t}\n\n\t/**\n\t * Checks if this bracket closes the given other bracket.\n\t * If the bracket infos come from different configurations, this method will return false.\n\t */\n\tpublic closes(other: OpeningBracketKind): boolean {\n\t\tif (other[\"config\"] !== this.config) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.openingBrackets.has(other);\n\t}\n\n\tpublic closesColorized(other: OpeningBracketKind): boolean {\n\t\tif (other[\"config\"] !== this.config) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.openingColorizedBrackets.has(other);\n\t}\n\n\tpublic getOpeningBrackets(): readonly OpeningBracketKind[] {\n\t\treturn [...this.openingBrackets];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
