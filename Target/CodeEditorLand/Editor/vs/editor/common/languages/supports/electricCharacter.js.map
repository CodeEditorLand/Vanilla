{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports/electricCharacter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport { type ScopedLineTokens, ignoreBracketsInToken } from \"../supports.js\";\nimport { BracketsUtils, type RichEditBrackets } from \"./richEditBrackets.js\";\n\n/**\n * Interface used to support electric characters\n * @internal\n */\nexport interface IElectricAction {\n\t// The line will be indented at the same level of the line\n\t// which contains the matching given bracket type.\n\tmatchOpenBracket: string;\n}\n\nexport class BracketElectricCharacterSupport {\n\tprivate readonly _richEditBrackets: RichEditBrackets | null;\n\n\tconstructor(richEditBrackets: RichEditBrackets | null) {\n\t\tthis._richEditBrackets = richEditBrackets;\n\t}\n\n\tpublic getElectricCharacters(): string[] {\n\t\tconst result: string[] = [];\n\n\t\tif (this._richEditBrackets) {\n\t\t\tfor (const bracket of this._richEditBrackets.brackets) {\n\t\t\t\tfor (const close of bracket.close) {\n\t\t\t\t\tconst lastChar = close.charAt(close.length - 1);\n\t\t\t\t\tresult.push(lastChar);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn distinct(result);\n\t}\n\n\tpublic onElectricCharacter(\n\t\tcharacter: string,\n\t\tcontext: ScopedLineTokens,\n\t\tcolumn: number,\n\t): IElectricAction | null {\n\t\tif (\n\t\t\t!this._richEditBrackets ||\n\t\t\tthis._richEditBrackets.brackets.length === 0\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst tokenIndex = context.findTokenIndexAtOffset(column - 1);\n\t\tif (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst reversedBracketRegex = this._richEditBrackets.reversedRegex;\n\t\tconst text =\n\t\t\tcontext.getLineContent().substring(0, column - 1) + character;\n\n\t\tconst r = BracketsUtils.findPrevBracketInRange(\n\t\t\treversedBracketRegex,\n\t\t\t1,\n\t\t\ttext,\n\t\t\t0,\n\t\t\ttext.length,\n\t\t);\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst bracketText = text\n\t\t\t.substring(r.startColumn - 1, r.endColumn - 1)\n\t\t\t.toLowerCase();\n\n\t\tconst isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n\t\tif (isOpen) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst textBeforeBracket = context.getActualLineContentBefore(\n\t\t\tr.startColumn - 1,\n\t\t);\n\t\tif (!/^\\s*$/.test(textBeforeBracket)) {\n\t\t\t// There is other text on the line before the bracket\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tmatchOpenBracket: bracketText,\n\t\t};\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAgC,6BAA6B;AAC7D,SAAS,qBAA4C;AAY9C,MAAM,gCAAgC;AAAA,EAnB7C,OAmB6C;AAAA;AAAA;AAAA,EAC3B;AAAA,EAEjB,YAAY,kBAA2C;AACtD,SAAK,oBAAoB;AAAA,EAC1B;AAAA,EAEO,wBAAkC;AACxC,UAAM,SAAmB,CAAC;AAE1B,QAAI,KAAK,mBAAmB;AAC3B,iBAAW,WAAW,KAAK,kBAAkB,UAAU;AACtD,mBAAW,SAAS,QAAQ,OAAO;AAClC,gBAAM,WAAW,MAAM,OAAO,MAAM,SAAS,CAAC;AAC9C,iBAAO,KAAK,QAAQ;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAEA,WAAO,SAAS,MAAM;AAAA,EACvB;AAAA,EAEO,oBACN,WACA,SACA,QACyB;AACzB,QACC,CAAC,KAAK,qBACN,KAAK,kBAAkB,SAAS,WAAW,GAC1C;AACD,aAAO;AAAA,IACR;AAEA,UAAM,aAAa,QAAQ,uBAAuB,SAAS,CAAC;AAC5D,QAAI,sBAAsB,QAAQ,qBAAqB,UAAU,CAAC,GAAG;AACpE,aAAO;AAAA,IACR;AAEA,UAAM,uBAAuB,KAAK,kBAAkB;AACpD,UAAM,OACL,QAAQ,eAAe,EAAE,UAAU,GAAG,SAAS,CAAC,IAAI;AAErD,UAAM,IAAI,cAAc;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,IACN;AACA,QAAI,CAAC,GAAG;AACP,aAAO;AAAA,IACR;AAEA,UAAM,cAAc,KAClB,UAAU,EAAE,cAAc,GAAG,EAAE,YAAY,CAAC,EAC5C,YAAY;AAEd,UAAM,SAAS,KAAK,kBAAkB,kBAAkB,WAAW;AACnE,QAAI,QAAQ;AACX,aAAO;AAAA,IACR;AAEA,UAAM,oBAAoB,QAAQ;AAAA,MACjC,EAAE,cAAc;AAAA,IACjB;AACA,QAAI,CAAC,QAAQ,KAAK,iBAAiB,GAAG;AAErC,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,MACN,kBAAkB;AAAA,IACnB;AAAA,EACD;AACD;",
  "names": []
}
