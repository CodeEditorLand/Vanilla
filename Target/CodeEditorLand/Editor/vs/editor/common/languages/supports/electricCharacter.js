import{distinct as l}from"../../../../../vs/base/common/arrays.js";import{ignoreBracketsInToken as k}from"../../../../../vs/editor/common/languages/supports.js";import{BracketsUtils as h}from"../../../../../vs/editor/common/languages/supports/richEditBrackets.js";class m{_richEditBrackets;constructor(t){this._richEditBrackets=t}getElectricCharacters(){const t=[];if(this._richEditBrackets)for(const e of this._richEditBrackets.brackets)for(const r of e.close){const n=r.charAt(r.length-1);t.push(n)}return l(t)}onElectricCharacter(t,e,r){if(!this._richEditBrackets||this._richEditBrackets.brackets.length===0)return null;const n=e.findTokenIndexAtOffset(r-1);if(k(e.getStandardTokenType(n)))return null;const a=this._richEditBrackets.reversedRegex,i=e.getLineContent().substring(0,r-1)+t,c=h.findPrevBracketInRange(a,1,i,0,i.length);if(!c)return null;const s=i.substring(c.startColumn-1,c.endColumn-1).toLowerCase();if(this._richEditBrackets.textIsOpenBracket[s])return null;const o=e.getActualLineContentBefore(c.startColumn-1);return/^\s*$/.test(o)?{matchOpenBracket:s}:null}}export{m as BracketElectricCharacterSupport};
