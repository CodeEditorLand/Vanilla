{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/autoIndent.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../core/range.js';\nimport { ITextModel } from '../model.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { IndentConsts } from './supports/indentRules.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { ILanguageConfigurationService } from './languageConfigurationRegistry.js';\nimport { IViewLineTokens } from '../tokens/lineTokens.js';\nimport { IndentationContextProcessor, isLanguageDifferentFromLineStart, ProcessedIndentRulesSupport } from './supports/indentationLineProcessor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\n\nexport interface IVirtualModel {\n\ttokenization: {\n\t\tgetLineTokens(lineNumber: number): IViewLineTokens;\n\t\tgetLanguageId(): string;\n\t\tgetLanguageIdAtPosition(lineNumber: number, column: number): string;\n\t\tforceTokenization?(lineNumber: number): void;\n\t};\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface IIndentConverter {\n\tshiftIndent(indentation: string): string;\n\tunshiftIndent(indentation: string): string;\n\tnormalizeIndentation?(indentation: string): string;\n}\n\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model: IVirtualModel, lineNumber: number, processedIndentRulesSupport: ProcessedIndentRulesSupport) {\n\tconst languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n\tif (lineNumber > 1) {\n\t\tlet lastLineNumber: number;\n\t\tlet resultLineNumber = -1;\n\n\t\tfor (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n\t\t\tif (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n\t\t\t\treturn resultLineNumber;\n\t\t\t}\n\t\t\tconst text = model.getLineContent(lastLineNumber);\n\t\t\tif (processedIndentRulesSupport.shouldIgnore(lastLineNumber) || /^\\s+$/.test(text) || text === '') {\n\t\t\t\tresultLineNumber = lastLineNumber;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn lastLineNumber;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: IVirtualModel,\n\tlineNumber: number,\n\thonorIntentialIndent: boolean = true,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): { indentation: string; action: IndentAction | null; line?: number } | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentRulesSupport, languageConfigurationService);\n\n\tif (lineNumber <= 1) {\n\t\treturn {\n\t\t\tindentation: '',\n\t\t\taction: null\n\t\t};\n\t}\n\n\t// Use no indent if this is the first non-blank line\n\tfor (let priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n\t\tif (model.getLineContent(priorLineNumber) !== '') {\n\t\t\tbreak;\n\t\t}\n\t\tif (priorLineNumber === 1) {\n\t\t\treturn {\n\t\t\t\tindentation: '',\n\t\t\t\taction: null\n\t\t\t};\n\t\t}\n\t}\n\n\tconst precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, processedIndentRulesSupport);\n\tif (precedingUnIgnoredLine < 0) {\n\t\treturn null;\n\t} else if (precedingUnIgnoredLine < 1) {\n\t\treturn {\n\t\t\tindentation: '',\n\t\t\taction: null\n\t\t};\n\t}\n\n\tif (processedIndentRulesSupport.shouldIncrease(precedingUnIgnoredLine) || processedIndentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLine)) {\n\t\tconst precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n\t\treturn {\n\t\t\tindentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n\t\t\taction: IndentAction.Indent,\n\t\t\tline: precedingUnIgnoredLine\n\t\t};\n\t} else if (processedIndentRulesSupport.shouldDecrease(precedingUnIgnoredLine)) {\n\t\tconst precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n\t\treturn {\n\t\t\tindentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n\t\t\taction: null,\n\t\t\tline: precedingUnIgnoredLine\n\t\t};\n\t} else {\n\t\t// precedingUnIgnoredLine can not be ignored.\n\t\t// it doesn't increase indent of following lines\n\t\t// it doesn't increase just next line\n\t\t// so current line is not affect by precedingUnIgnoredLine\n\t\t// and then we should get a correct inheritted indentation from above lines\n\t\tif (precedingUnIgnoredLine === 1) {\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n\t\t\t\taction: null,\n\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t};\n\t\t}\n\n\t\tconst previousLine = precedingUnIgnoredLine - 1;\n\n\t\tconst previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n\t\tif (!(previousLineIndentMetadata & (IndentConsts.INCREASE_MASK | IndentConsts.DECREASE_MASK)) &&\n\t\t\t(previousLineIndentMetadata & IndentConsts.INDENT_NEXTLINE_MASK)) {\n\t\t\tlet stopLine = 0;\n\t\t\tfor (let i = previousLine - 1; i > 0; i--) {\n\t\t\t\tif (processedIndentRulesSupport.shouldIndentNextLine(i)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tstopLine = i;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n\t\t\t\taction: null,\n\t\t\t\tline: stopLine + 1\n\t\t\t};\n\t\t}\n\n\t\tif (honorIntentialIndent) {\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n\t\t\t\taction: null,\n\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t};\n\t\t} else {\n\t\t\t// search from precedingUnIgnoredLine until we find one whose indent is not temporary\n\t\t\tfor (let i = precedingUnIgnoredLine; i > 0; i--) {\n\t\t\t\tif (processedIndentRulesSupport.shouldIncrease(i)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(i)),\n\t\t\t\t\t\taction: IndentAction.Indent,\n\t\t\t\t\t\tline: i\n\t\t\t\t\t};\n\t\t\t\t} else if (processedIndentRulesSupport.shouldIndentNextLine(i)) {\n\t\t\t\t\tlet stopLine = 0;\n\t\t\t\t\tfor (let j = i - 1; j > 0; j--) {\n\t\t\t\t\t\tif (processedIndentRulesSupport.shouldIndentNextLine(i)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstopLine = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n\t\t\t\t\t\taction: null,\n\t\t\t\t\t\tline: stopLine + 1\n\t\t\t\t\t};\n\t\t\t\t} else if (processedIndentRulesSupport.shouldDecrease(i)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(i)),\n\t\t\t\t\t\taction: null,\n\t\t\t\t\t\tline: i\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n\t\t\t\taction: null,\n\t\t\t\tline: 1\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport function getGoodIndentForLine(\n\tautoIndent: EditorAutoIndentStrategy,\n\tvirtualModel: IVirtualModel,\n\tlanguageId: string,\n\tlineNumber: number,\n\tindentConverter: IIndentConverter,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): string | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\n\tconst richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n\tif (!richEditSupport) {\n\t\treturn null;\n\t}\n\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(virtualModel, indentRulesSupport, languageConfigurationService);\n\tconst indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n\n\tif (indent) {\n\t\tconst inheritLine = indent.line;\n\t\tif (inheritLine !== undefined) {\n\t\t\t// Apply enter action as long as there are only whitespace lines between inherited line and this line.\n\t\t\tlet shouldApplyEnterRules = true;\n\t\t\tfor (let inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n\t\t\t\tif (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n\t\t\t\t\tshouldApplyEnterRules = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shouldApplyEnterRules) {\n\t\t\t\tconst enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n\n\t\t\t\tif (enterResult) {\n\t\t\t\t\tlet indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n\n\t\t\t\t\tif (enterResult.removeText) {\n\t\t\t\t\t\tindentation = indentation.substring(0, indentation.length - enterResult.removeText);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(enterResult.indentAction === IndentAction.Indent) ||\n\t\t\t\t\t\t(enterResult.indentAction === IndentAction.IndentOutdent)\n\t\t\t\t\t) {\n\t\t\t\t\t\tindentation = indentConverter.shiftIndent(indentation);\n\t\t\t\t\t} else if (enterResult.indentAction === IndentAction.Outdent) {\n\t\t\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (processedIndentRulesSupport.shouldDecrease(lineNumber)) {\n\t\t\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (enterResult.appendText) {\n\t\t\t\t\t\tindentation += enterResult.appendText;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn strings.getLeadingWhitespace(indentation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (processedIndentRulesSupport.shouldDecrease(lineNumber)) {\n\t\t\tif (indent.action === IndentAction.Indent) {\n\t\t\t\treturn indent.indentation;\n\t\t\t} else {\n\t\t\t\treturn indentConverter.unshiftIndent(indent.indentation);\n\t\t\t}\n\t\t} else {\n\t\t\tif (indent.action === IndentAction.Indent) {\n\t\t\t\treturn indentConverter.shiftIndent(indent.indentation);\n\t\t\t} else {\n\t\t\t\treturn indent.indentation;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nexport function getIndentForEnter(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tindentConverter: IIndentConverter,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): { beforeEnter: string; afterEnter: string } | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\tconst languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tmodel.tokenization.forceTokenization(range.startLineNumber);\n\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\tconst processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n\tconst afterEnterProcessedTokens = processedContextTokens.afterRangeProcessedTokens;\n\tconst beforeEnterProcessedTokens = processedContextTokens.beforeRangeProcessedTokens;\n\tconst beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterProcessedTokens.getLineContent());\n\n\tconst virtualModel = createVirtualModelWithModifiedTokensAtLine(model, range.startLineNumber, beforeEnterProcessedTokens);\n\tconst languageIsDifferentFromLineStart = isLanguageDifferentFromLineStart(model, range.getStartPosition());\n\tconst currentLine = model.getLineContent(range.startLineNumber);\n\tconst currentLineIndent = strings.getLeadingWhitespace(currentLine);\n\tconst afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n\tif (!afterEnterAction) {\n\t\tconst beforeEnter = languageIsDifferentFromLineStart ? currentLineIndent : beforeEnterIndent;\n\t\treturn {\n\t\t\tbeforeEnter: beforeEnter,\n\t\t\tafterEnter: beforeEnter\n\t\t};\n\t}\n\n\tlet afterEnterIndent = languageIsDifferentFromLineStart ? currentLineIndent : afterEnterAction.indentation;\n\n\tif (afterEnterAction.action === IndentAction.Indent) {\n\t\tafterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n\t}\n\n\tif (indentRulesSupport.shouldDecrease(afterEnterProcessedTokens.getLineContent())) {\n\t\tafterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n\t}\n\n\treturn {\n\t\tbeforeEnter: languageIsDifferentFromLineStart ? currentLineIndent : beforeEnterIndent,\n\t\tafterEnter: afterEnterIndent\n\t};\n}\n\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(\n\tcursorConfig: CursorConfiguration,\n\tmodel: ITextModel,\n\trange: Range,\n\tch: string,\n\tindentConverter: IIndentConverter,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): string | null {\n\tconst autoIndent = cursorConfig.autoIndent;\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\tconst languageIsDifferentFromLineStart = isLanguageDifferentFromLineStart(model, range.getStartPosition());\n\tif (languageIsDifferentFromLineStart) {\n\t\t// this line has mixed languages and indentation rules will not work\n\t\treturn null;\n\t}\n\n\tconst languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\tconst processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n\tconst beforeRangeText = processedContextTokens.beforeRangeProcessedTokens.getLineContent();\n\tconst afterRangeText = processedContextTokens.afterRangeProcessedTokens.getLineContent();\n\tconst textAroundRange = beforeRangeText + afterRangeText;\n\tconst textAroundRangeWithCharacter = beforeRangeText + ch + afterRangeText;\n\n\t// If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n\t// Users might change the indentation by purpose and we should honor that instead of readjusting.\n\tif (!indentRulesSupport.shouldDecrease(textAroundRange) && indentRulesSupport.shouldDecrease(textAroundRangeWithCharacter)) {\n\t\t// after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n\t\t// 1. Get inherited indent action\n\t\tconst r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet indentation = r.indentation;\n\t\tif (r.action !== IndentAction.Indent) {\n\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t}\n\n\t\treturn indentation;\n\t}\n\n\tconst previousLineNumber = range.startLineNumber - 1;\n\tif (previousLineNumber > 0) {\n\t\tconst previousLine = model.getLineContent(previousLineNumber);\n\t\tif (indentRulesSupport.shouldIndentNextLine(previousLine) && indentRulesSupport.shouldIncrease(textAroundRangeWithCharacter)) {\n\t\t\tconst inheritedIndentationData = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n\t\t\tconst inheritedIndentation = inheritedIndentationData?.indentation;\n\t\t\tif (inheritedIndentation !== undefined) {\n\t\t\t\tconst currentLine = model.getLineContent(range.startLineNumber);\n\t\t\t\tconst actualCurrentIndentation = strings.getLeadingWhitespace(currentLine);\n\t\t\t\tconst inferredCurrentIndentation = indentConverter.shiftIndent(inheritedIndentation);\n\t\t\t\t// If the inferred current indentation is not equal to the actual current indentation, then the indentation has been intentionally changed, in that case keep it\n\t\t\t\tconst inferredIndentationEqualsActual = inferredCurrentIndentation === actualCurrentIndentation;\n\t\t\t\tconst textAroundRangeContainsOnlyWhitespace = /^\\s*$/.test(textAroundRange);\n\t\t\t\tconst autoClosingPairs = cursorConfig.autoClosingPairs.autoClosingPairsOpenByEnd.get(ch);\n\t\t\t\tconst autoClosingPairExists = autoClosingPairs && autoClosingPairs.length > 0;\n\t\t\t\tconst isChFirstNonWhitespaceCharacterAndInAutoClosingPair = autoClosingPairExists && textAroundRangeContainsOnlyWhitespace;\n\t\t\t\tif (inferredIndentationEqualsActual && isChFirstNonWhitespaceCharacterAndInAutoClosingPair) {\n\t\t\t\t\treturn inheritedIndentation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function getIndentMetadata(\n\tmodel: ITextModel,\n\tlineNumber: number,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): number | null {\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\tif (lineNumber < 1 || lineNumber > model.getLineCount()) {\n\t\treturn null;\n\t}\n\treturn indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n\nfunction createVirtualModelWithModifiedTokensAtLine(model: ITextModel, modifiedLineNumber: number, modifiedTokens: IViewLineTokens): IVirtualModel {\n\tconst virtualModel: IVirtualModel = {\n\t\ttokenization: {\n\t\t\tgetLineTokens: (lineNumber: number): IViewLineTokens => {\n\t\t\t\tif (lineNumber === modifiedLineNumber) {\n\t\t\t\t\treturn modifiedTokens;\n\t\t\t\t} else {\n\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetLanguageId: (): string => {\n\t\t\t\treturn model.getLanguageId();\n\t\t\t},\n\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number): string => {\n\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t},\n\t\t},\n\t\tgetLineContent: (lineNumber: number): string => {\n\t\t\tif (lineNumber === modifiedLineNumber) {\n\t\t\t\treturn modifiedTokens.getLineContent();\n\t\t\t} else {\n\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t}\n\t\t}\n\t};\n\treturn virtualModel;\n}\n\n"],
  "mappings": "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",
  "names": []
}
