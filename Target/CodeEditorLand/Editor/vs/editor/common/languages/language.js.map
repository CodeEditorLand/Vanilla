{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/language.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { ILanguageIdCodec } from \"../languages.js\";\n\nexport const ILanguageService =\n\tcreateDecorator<ILanguageService>(\"languageService\");\n\nexport interface ILanguageExtensionPoint {\n\tid: string;\n\textensions?: string[];\n\tfilenames?: string[];\n\tfilenamePatterns?: string[];\n\tfirstLine?: string;\n\taliases?: string[];\n\tmimetypes?: string[];\n\tconfiguration?: URI;\n\t/**\n\t * @internal\n\t */\n\ticon?: ILanguageIcon;\n}\n\nexport interface ILanguageSelection {\n\treadonly languageId: string;\n\treadonly onDidChange: Event<string>;\n}\n\nexport interface ILanguageNameIdPair {\n\treadonly languageName: string;\n\treadonly languageId: string;\n}\n\nexport interface ILanguageIcon {\n\treadonly light: URI;\n\treadonly dark: URI;\n}\n\nexport interface ILanguageService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * A codec which can encode and decode a string `languageId` as a number.\n\t */\n\treadonly languageIdCodec: ILanguageIdCodec;\n\n\t/**\n\t * An event emitted when basic language features are requested for the first time.\n\t * This event is emitted when embedded languages are encountered (e.g. JS code block inside Markdown)\n\t * or when a language is associated to a text model.\n\t *\n\t * **Note**: Basic language features refers to language configuration related features.\n\t * **Note**: This event is a superset of `onDidRequestRichLanguageFeatures`\n\t */\n\tonDidRequestBasicLanguageFeatures: Event<string>;\n\n\t/**\n\t * An event emitted when rich language features are requested for the first time.\n\t * This event is emitted when a language is associated to a text model.\n\t *\n\t * **Note**: Rich language features refers to tokenizers, language features based on providers, etc.\n\t * **Note**: This event is a subset of `onDidRequestRichLanguageFeatures`\n\t */\n\tonDidRequestRichLanguageFeatures: Event<string>;\n\n\t/**\n\t * An event emitted when languages have changed.\n\t */\n\tonDidChange: Event<void>;\n\n\t/**\n\t * Register a language.\n\t */\n\tregisterLanguage(def: ILanguageExtensionPoint): IDisposable;\n\n\t/**\n\t * Check if `languageId` is registered.\n\t */\n\tisRegisteredLanguageId(languageId: string): boolean;\n\n\t/**\n\t * Get a list of all registered languages.\n\t */\n\tgetRegisteredLanguageIds(): string[];\n\n\t/**\n\t * Get a list of all registered languages with a name.\n\t * If a language is explicitly registered without a name, it will not be part of the result.\n\t * The result is sorted using by name case insensitive.\n\t */\n\tgetSortedRegisteredLanguageNames(): ILanguageNameIdPair[];\n\n\t/**\n\t * Get the preferred language name for a language.\n\t */\n\tgetLanguageName(languageId: string): string | null;\n\n\t/**\n\t * Get the mimetype for a language.\n\t */\n\tgetMimeType(languageId: string): string | null;\n\n\t/**\n\t * Get the default icon for the language.\n\t */\n\tgetIcon(languageId: string): ILanguageIcon | null;\n\n\t/**\n\t * Get all file extensions for a language.\n\t */\n\tgetExtensions(languageId: string): ReadonlyArray<string>;\n\n\t/**\n\t * Get all file names for a language.\n\t */\n\tgetFilenames(languageId: string): ReadonlyArray<string>;\n\n\t/**\n\t * Get all language configuration files for a language.\n\t */\n\tgetConfigurationFiles(languageId: string): ReadonlyArray<URI>;\n\n\t/**\n\t * Look up a language by its name case insensitive.\n\t */\n\tgetLanguageIdByLanguageName(languageName: string): string | null;\n\n\t/**\n\t * Look up a language by its mime type.\n\t */\n\tgetLanguageIdByMimeType(mimeType: string | null | undefined): string | null;\n\n\t/**\n\t * Guess the language id for a resource.\n\t */\n\tguessLanguageIdByFilepathOrFirstLine(\n\t\tresource: URI,\n\t\tfirstLine?: string,\n\t): string | null;\n\n\t/**\n\t * Will fall back to 'plaintext' if `languageId` is unknown.\n\t */\n\tcreateById(languageId: string | null | undefined): ILanguageSelection;\n\n\t/**\n\t * Will fall back to 'plaintext' if `mimeType` is unknown.\n\t */\n\tcreateByMimeType(mimeType: string | null | undefined): ILanguageSelection;\n\n\t/**\n\t * Will fall back to 'plaintext' if the `languageId` cannot be determined.\n\t */\n\tcreateByFilepathOrFirstLine(\n\t\tresource: URI | null,\n\t\tfirstLine?: string,\n\t): ILanguageSelection;\n\n\t/**\n\t * Request basic language features for a language.\n\t */\n\trequestBasicLanguageFeatures(languageId: string): void;\n\n\t/**\n\t * Request rich language features for a language.\n\t */\n\trequestRichLanguageFeatures(languageId: string): void;\n}\n"],
  "mappings": "AAQA,SAAS,uBAAuB;AAGzB,MAAM,mBACZ,gBAAkC,iBAAiB;",
  "names": []
}
