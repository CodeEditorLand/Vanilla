{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewLineTokens, LineTokens } from '../tokens/lineTokens.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../languages.js';\n\nexport function createScopedLineTokens(context: LineTokens, offset: number): ScopedLineTokens {\n\tconst tokenCount = context.getCount();\n\tconst tokenIndex = context.findTokenIndexAtOffset(offset);\n\tconst desiredLanguageId = context.getLanguageId(tokenIndex);\n\n\tlet lastTokenIndex = tokenIndex;\n\twhile (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n\t\tlastTokenIndex++;\n\t}\n\n\tlet firstTokenIndex = tokenIndex;\n\twhile (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n\t\tfirstTokenIndex--;\n\t}\n\n\treturn new ScopedLineTokens(\n\t\tcontext,\n\t\tdesiredLanguageId,\n\t\tfirstTokenIndex,\n\t\tlastTokenIndex + 1,\n\t\tcontext.getStartOffset(firstTokenIndex),\n\t\tcontext.getEndOffset(lastTokenIndex)\n\t);\n}\n\nexport class ScopedLineTokens {\n\t_scopedLineTokensBrand: void = undefined;\n\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\tpublic readonly languageId: string;\n\tprivate readonly _actual: LineTokens;\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _lastTokenIndex: number;\n\tpublic readonly firstCharOffset: number;\n\tprivate readonly _lastCharOffset: number;\n\n\tconstructor(\n\t\tactual: LineTokens,\n\t\tlanguageId: string,\n\t\tfirstTokenIndex: number,\n\t\tlastTokenIndex: number,\n\t\tfirstCharOffset: number,\n\t\tlastCharOffset: number\n\t) {\n\t\tthis._actual = actual;\n\t\tthis.languageId = languageId;\n\t\tthis._firstTokenIndex = firstTokenIndex;\n\t\tthis._lastTokenIndex = lastTokenIndex;\n\t\tthis.firstCharOffset = firstCharOffset;\n\t\tthis._lastCharOffset = lastCharOffset;\n\t\tthis.languageIdCodec = actual.languageIdCodec;\n\t}\n\n\tpublic getLineContent(): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n\t}\n\n\tpublic getLineLength(): number {\n\t\treturn this._lastCharOffset - this.firstCharOffset;\n\t}\n\n\tpublic getActualLineContentBefore(offset: number): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(0, this.firstCharOffset + offset);\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._lastTokenIndex - this._firstTokenIndex;\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\treturn this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n\t}\n\n\tpublic toIViewLineTokens(): IViewLineTokens {\n\t\treturn this._actual.sliceAndInflate(this.firstCharOffset, this._lastCharOffset, 0);\n\t}\n}\n\nconst enum IgnoreBracketsInTokens {\n\tvalue = StandardTokenType.Comment | StandardTokenType.String | StandardTokenType.RegEx\n}\n\nexport function ignoreBracketsInToken(standardTokenType: StandardTokenType): boolean {\n\treturn (standardTokenType & IgnoreBracketsInTokens.value) !== 0;\n}\n"],
  "mappings": ";;AAKA,SAAS,iBAAiB,kBAAkB;AAC5C,SAAS,yBAAyB;AAClC,SAAS,wBAAwB;AAE1B,SAAS,uBAAuB,SAAqB,QAAkC;AAC7F,QAAM,aAAa,QAAQ,SAAS;AACpC,QAAM,aAAa,QAAQ,uBAAuB,MAAM;AACxD,QAAM,oBAAoB,QAAQ,cAAc,UAAU;AAE1D,MAAI,iBAAiB;AACrB,SAAO,iBAAiB,IAAI,cAAc,QAAQ,cAAc,iBAAiB,CAAC,MAAM,mBAAmB;AAC1G;AAAA,EACD;AAEA,MAAI,kBAAkB;AACtB,SAAO,kBAAkB,KAAK,QAAQ,cAAc,kBAAkB,CAAC,MAAM,mBAAmB;AAC/F;AAAA,EACD;AAEA,SAAO,IAAI;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB;AAAA,IACjB,QAAQ,eAAe,eAAe;AAAA,IACtC,QAAQ,aAAa,cAAc;AAAA,EACpC;AACD;AAvBgB;AAyBT,MAAM,iBAAiB;AAAA,EAlC9B,OAkC8B;AAAA;AAAA;AAAA,EAC7B,yBAA+B;AAAA,EAEf;AAAA,EACA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACD;AAAA,EACC;AAAA,EAEjB,YACC,QACA,YACA,iBACA,gBACA,iBACA,gBACC;AACD,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB,OAAO;AAAA,EAC/B;AAAA,EAEO,iBAAyB;AAC/B,UAAM,oBAAoB,KAAK,QAAQ,eAAe;AACtD,WAAO,kBAAkB,UAAU,KAAK,iBAAiB,KAAK,eAAe;AAAA,EAC9E;AAAA,EAEO,gBAAwB;AAC9B,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACpC;AAAA,EAEO,2BAA2B,QAAwB;AACzD,UAAM,oBAAoB,KAAK,QAAQ,eAAe;AACtD,WAAO,kBAAkB,UAAU,GAAG,KAAK,kBAAkB,MAAM;AAAA,EACpE;AAAA,EAEO,gBAAwB;AAC9B,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACpC;AAAA,EAEO,uBAAuB,QAAwB;AACrD,WAAO,KAAK,QAAQ,uBAAuB,SAAS,KAAK,eAAe,IAAI,KAAK;AAAA,EAClF;AAAA,EAEO,qBAAqB,YAAuC;AAClE,WAAO,KAAK,QAAQ,qBAAqB,aAAa,KAAK,gBAAgB;AAAA,EAC5E;AAAA,EAEO,oBAAqC;AAC3C,WAAO,KAAK,QAAQ,gBAAgB,KAAK,iBAAiB,KAAK,iBAAiB,CAAC;AAAA,EAClF;AACD;AAEA,IAAW,0BAAX,CAAWA,4BAAX;AACC,EAAAA,gDAAA,WAAQ,kBAAkB,UAAU,kBAAkB,SAAS,kBAAkB,SAAjF;AADU,SAAAA;AAAA,GAAA;AAIJ,SAAS,sBAAsB,mBAA+C;AACpF,UAAQ,oBAAoB,uBAAuB,WAAW;AAC/D;AAFgB;",
  "names": ["IgnoreBracketsInTokens"]
}
