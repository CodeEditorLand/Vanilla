{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/supports.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { StandardTokenType } from \"../encodedTokenAttributes.js\";\nimport type { ILanguageIdCodec } from \"../languages.js\";\nimport type { IViewLineTokens, LineTokens } from \"../tokens/lineTokens.js\";\n\nexport function createScopedLineTokens(\n\tcontext: LineTokens,\n\toffset: number,\n): ScopedLineTokens {\n\tconst tokenCount = context.getCount();\n\tconst tokenIndex = context.findTokenIndexAtOffset(offset);\n\tconst desiredLanguageId = context.getLanguageId(tokenIndex);\n\n\tlet lastTokenIndex = tokenIndex;\n\twhile (\n\t\tlastTokenIndex + 1 < tokenCount &&\n\t\tcontext.getLanguageId(lastTokenIndex + 1) === desiredLanguageId\n\t) {\n\t\tlastTokenIndex++;\n\t}\n\n\tlet firstTokenIndex = tokenIndex;\n\twhile (\n\t\tfirstTokenIndex > 0 &&\n\t\tcontext.getLanguageId(firstTokenIndex - 1) === desiredLanguageId\n\t) {\n\t\tfirstTokenIndex--;\n\t}\n\n\treturn new ScopedLineTokens(\n\t\tcontext,\n\t\tdesiredLanguageId,\n\t\tfirstTokenIndex,\n\t\tlastTokenIndex + 1,\n\t\tcontext.getStartOffset(firstTokenIndex),\n\t\tcontext.getEndOffset(lastTokenIndex),\n\t);\n}\n\nexport class ScopedLineTokens {\n\t_scopedLineTokensBrand: void = undefined;\n\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\tpublic readonly languageId: string;\n\tprivate readonly _actual: LineTokens;\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _lastTokenIndex: number;\n\tpublic readonly firstCharOffset: number;\n\tprivate readonly _lastCharOffset: number;\n\n\tconstructor(\n\t\tactual: LineTokens,\n\t\tlanguageId: string,\n\t\tfirstTokenIndex: number,\n\t\tlastTokenIndex: number,\n\t\tfirstCharOffset: number,\n\t\tlastCharOffset: number,\n\t) {\n\t\tthis._actual = actual;\n\t\tthis.languageId = languageId;\n\t\tthis._firstTokenIndex = firstTokenIndex;\n\t\tthis._lastTokenIndex = lastTokenIndex;\n\t\tthis.firstCharOffset = firstCharOffset;\n\t\tthis._lastCharOffset = lastCharOffset;\n\t\tthis.languageIdCodec = actual.languageIdCodec;\n\t}\n\n\tpublic getLineContent(): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(\n\t\t\tthis.firstCharOffset,\n\t\t\tthis._lastCharOffset,\n\t\t);\n\t}\n\n\tpublic getLineLength(): number {\n\t\treturn this._lastCharOffset - this.firstCharOffset;\n\t}\n\n\tpublic getActualLineContentBefore(offset: number): string {\n\t\tconst actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(0, this.firstCharOffset + offset);\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._lastTokenIndex - this._firstTokenIndex;\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn (\n\t\t\tthis._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) -\n\t\t\tthis._firstTokenIndex\n\t\t);\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\treturn this._actual.getStandardTokenType(\n\t\t\ttokenIndex + this._firstTokenIndex,\n\t\t);\n\t}\n\n\tpublic toIViewLineTokens(): IViewLineTokens {\n\t\treturn this._actual.sliceAndInflate(\n\t\t\tthis.firstCharOffset,\n\t\t\tthis._lastCharOffset,\n\t\t\t0,\n\t\t);\n\t}\n}\n\nenum IgnoreBracketsInTokens {\n\tvalue = StandardTokenType.Comment |\n\t\tStandardTokenType.String |\n\t\tStandardTokenType.RegEx,\n}\n\nexport function ignoreBracketsInToken(\n\tstandardTokenType: StandardTokenType,\n): boolean {\n\treturn (standardTokenType & IgnoreBracketsInTokens.value) !== 0;\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAI3B,SAAS,uBACf,SACA,QACmB;AACnB,QAAM,aAAa,QAAQ,SAAS;AACpC,QAAM,aAAa,QAAQ,uBAAuB,MAAM;AACxD,QAAM,oBAAoB,QAAQ,cAAc,UAAU;AAE1D,MAAI,iBAAiB;AACrB,SACC,iBAAiB,IAAI,cACrB,QAAQ,cAAc,iBAAiB,CAAC,MAAM,mBAC7C;AACD;AAAA,EACD;AAEA,MAAI,kBAAkB;AACtB,SACC,kBAAkB,KAClB,QAAQ,cAAc,kBAAkB,CAAC,MAAM,mBAC9C;AACD;AAAA,EACD;AAEA,SAAO,IAAI;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB;AAAA,IACjB,QAAQ,eAAe,eAAe;AAAA,IACtC,QAAQ,aAAa,cAAc;AAAA,EACpC;AACD;AAhCgB;AAkCT,MAAM,iBAAiB;AAAA,EA3C9B,OA2C8B;AAAA;AAAA;AAAA,EAC7B,yBAA+B;AAAA,EAEf;AAAA,EACA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACD;AAAA,EACC;AAAA,EAEjB,YACC,QACA,YACA,iBACA,gBACA,iBACA,gBACC;AACD,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB,OAAO;AAAA,EAC/B;AAAA,EAEO,iBAAyB;AAC/B,UAAM,oBAAoB,KAAK,QAAQ,eAAe;AACtD,WAAO,kBAAkB;AAAA,MACxB,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAAA,EACD;AAAA,EAEO,gBAAwB;AAC9B,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACpC;AAAA,EAEO,2BAA2B,QAAwB;AACzD,UAAM,oBAAoB,KAAK,QAAQ,eAAe;AACtD,WAAO,kBAAkB,UAAU,GAAG,KAAK,kBAAkB,MAAM;AAAA,EACpE;AAAA,EAEO,gBAAwB;AAC9B,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACpC;AAAA,EAEO,uBAAuB,QAAwB;AACrD,WACC,KAAK,QAAQ,uBAAuB,SAAS,KAAK,eAAe,IACjE,KAAK;AAAA,EAEP;AAAA,EAEO,qBAAqB,YAAuC;AAClE,WAAO,KAAK,QAAQ;AAAA,MACnB,aAAa,KAAK;AAAA,IACnB;AAAA,EACD;AAAA,EAEO,oBAAqC;AAC3C,WAAO,KAAK,QAAQ;AAAA,MACnB,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACD;AAAA,EACD;AACD;AAEA,IAAK,0BAAL,CAAKA,4BAAL;AACC,EAAAA,gDAAA,WAAQ,kBAAkB,UACzB,kBAAkB,SAClB,kBAAkB,SAFnB;AADI,SAAAA;AAAA,GAAA;AAME,SAAS,sBACf,mBACU;AACV,UAAQ,oBAAoB,uBAAuB,WAAW;AAC/D;AAJgB;",
  "names": ["IgnoreBracketsInTokens"]
}
