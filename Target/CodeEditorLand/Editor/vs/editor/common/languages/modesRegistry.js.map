{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/modesRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { ILanguageExtensionPoint } from './language.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n\n// Define extension point ids\nexport const Extensions = {\n\tModesRegistry: 'editor.modesRegistry'\n};\n\nexport class EditorModesRegistry {\n\n\tprivate readonly _languages: ILanguageExtensionPoint[];\n\n\tprivate readonly _onDidChangeLanguages = new Emitter<void>();\n\tpublic readonly onDidChangeLanguages: Event<void> = this._onDidChangeLanguages.event;\n\n\tconstructor() {\n\t\tthis._languages = [];\n\t}\n\n\tpublic registerLanguage(def: ILanguageExtensionPoint): IDisposable {\n\t\tthis._languages.push(def);\n\t\tthis._onDidChangeLanguages.fire(undefined);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0, len = this._languages.length; i < len; i++) {\n\t\t\t\t\tif (this._languages[i] === def) {\n\t\t\t\t\t\tthis._languages.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic getLanguages(): ReadonlyArray<ILanguageExtensionPoint> {\n\t\treturn this._languages;\n\t}\n}\n\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\n\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\n\nModesRegistry.registerLanguage({\n\tid: PLAINTEXT_LANGUAGE_ID,\n\textensions: [PLAINTEXT_EXTENSION],\n\taliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n\tmimetypes: [Mimes.text]\n});\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t.registerDefaultConfigurations([{\n\t\toverrides: {\n\t\t\t'[plaintext]': {\n\t\t\t\t'editor.unicodeHighlight.ambiguousCharacters': false,\n\t\t\t\t'editor.unicodeHighlight.invisibleCharacters': false\n\t\t\t}\n\t\t}\n\t}]);\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,SAAS,aAAa;AAC/B,SAAS,+BAA+B;AACxC,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,wBAAwB,cAAc,+BAA+B;AAGvE,MAAM,aAAa;AAAA,EACzB,eAAe;AAChB;AAEO,MAAM,oBAAoB;AAAA,EAlBjC,OAkBiC;AAAA;AAAA;AAAA,EAEf;AAAA,EAEA,wBAAwB,IAAI,QAAc;AAAA,EAC3C,uBAAoC,KAAK,sBAAsB;AAAA,EAE/E,cAAc;AACb,SAAK,aAAa,CAAC;AAAA,EACpB;AAAA,EAEO,iBAAiB,KAA2C;AAClE,SAAK,WAAW,KAAK,GAAG;AACxB,SAAK,sBAAsB,KAAK,MAAS;AACzC,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,iBAAS,IAAI,GAAG,MAAM,KAAK,WAAW,QAAQ,IAAI,KAAK,KAAK;AAC3D,cAAI,KAAK,WAAW,CAAC,MAAM,KAAK;AAC/B,iBAAK,WAAW,OAAO,GAAG,CAAC;AAC3B;AAAA,UACD;AAAA,QACD;AAAA,MACD,GAPS;AAAA,IAQV;AAAA,EACD;AAAA,EAEO,eAAuD;AAC7D,WAAO,KAAK;AAAA,EACb;AACD;AAEO,MAAM,gBAAgB,IAAI,oBAAoB;AACrD,SAAS,IAAI,WAAW,eAAe,aAAa;AAE7C,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAEnC,cAAc,iBAAiB;AAAA,EAC9B,IAAI;AAAA,EACJ,YAAY,CAAC,mBAAmB;AAAA,EAChC,SAAS,CAAC,IAAI,SAAS,mBAAmB,YAAY,GAAG,MAAM;AAAA,EAC/D,WAAW,CAAC,MAAM,IAAI;AACvB,CAAC;AAED,SAAS,GAA2B,wBAAwB,aAAa,EACvE,8BAA8B,CAAC;AAAA,EAC/B,WAAW;AAAA,IACV,eAAe;AAAA,MACd,+CAA+C;AAAA,MAC/C,+CAA+C;AAAA,IAChD;AAAA,EACD;AACD,CAAC,CAAC;",
  "names": []
}
