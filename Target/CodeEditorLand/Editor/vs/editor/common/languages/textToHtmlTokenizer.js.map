{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/textToHtmlTokenizer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { IViewLineTokens, LineTokens } from '../tokens/lineTokens.js';\nimport { ILanguageIdCodec, IState, ITokenizationSupport, TokenizationRegistry } from '../languages.js';\nimport { LanguageId } from '../encodedTokenAttributes.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nimport { ILanguageService } from './language.js';\n\nexport type IReducedTokenizationSupport = Omit<ITokenizationSupport, 'tokenize'>;\n\nconst fallback: IReducedTokenizationSupport = {\n\tgetInitialState: () => NullState,\n\ttokenizeEncoded: (buffer: string, hasEOL: boolean, state: IState) => nullTokenizeEncoded(LanguageId.Null, state)\n};\n\nexport function tokenizeToStringSync(languageService: ILanguageService, text: string, languageId: string): string {\n\treturn _tokenizeToString(text, languageService.languageIdCodec, TokenizationRegistry.get(languageId) || fallback);\n}\n\nexport async function tokenizeToString(languageService: ILanguageService, text: string, languageId: string | null): Promise<string> {\n\tif (!languageId) {\n\t\treturn _tokenizeToString(text, languageService.languageIdCodec, fallback);\n\t}\n\tconst tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n\treturn _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n}\n\nexport function tokenizeLineToHTML(text: string, viewLineTokens: IViewLineTokens, colorMap: string[], startOffset: number, endOffset: number, tabSize: number, useNbsp: boolean): string {\n\tlet result = `<div>`;\n\tlet charIndex = startOffset;\n\tlet tabsCharDelta = 0;\n\n\tlet prevIsSpace = true;\n\n\tfor (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n\t\tconst tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n\n\t\tif (tokenEndIndex <= startOffset) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet partContent = '';\n\n\t\tfor (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n\t\t\tconst charCode = text.charCodeAt(charIndex);\n\n\t\t\tswitch (charCode) {\n\t\t\t\tcase CharCode.Tab: {\n\t\t\t\t\tlet insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n\t\t\t\t\ttabsCharDelta += insertSpacesCount - 1;\n\t\t\t\t\twhile (insertSpacesCount > 0) {\n\t\t\t\t\t\tif (useNbsp && prevIsSpace) {\n\t\t\t\t\t\t\tpartContent += '&#160;';\n\t\t\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpartContent += ' ';\n\t\t\t\t\t\t\tprevIsSpace = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinsertSpacesCount--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase CharCode.LessThan:\n\t\t\t\t\tpartContent += '&lt;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.GreaterThan:\n\t\t\t\t\tpartContent += '&gt;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.Ampersand:\n\t\t\t\t\tpartContent += '&amp;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.Null:\n\t\t\t\t\tpartContent += '&#00;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.UTF8_BOM:\n\t\t\t\tcase CharCode.LINE_SEPARATOR:\n\t\t\t\tcase CharCode.PARAGRAPH_SEPARATOR:\n\t\t\t\tcase CharCode.NEXT_LINE:\n\t\t\t\t\tpartContent += '\\ufffd';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.CarriageReturn:\n\t\t\t\t\t// zero width space, because carriage return would introduce a line break\n\t\t\t\t\tpartContent += '&#8203';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tif (useNbsp && prevIsSpace) {\n\t\t\t\t\t\tpartContent += '&#160;';\n\t\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpartContent += ' ';\n\t\t\t\t\t\tprevIsSpace = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tpartContent += String.fromCharCode(charCode);\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t}\n\t\t}\n\n\t\tresult += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n\n\t\tif (tokenEndIndex > endOffset || charIndex >= endOffset) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tresult += `</div>`;\n\treturn result;\n}\n\nexport function _tokenizeToString(text: string, languageIdCodec: ILanguageIdCodec, tokenizationSupport: IReducedTokenizationSupport): string {\n\tlet result = `<div class=\"monaco-tokenized-source\">`;\n\tconst lines = strings.splitLines(text);\n\tlet currentState = tokenizationSupport.getInitialState();\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst line = lines[i];\n\n\t\tif (i > 0) {\n\t\t\tresult += `<br/>`;\n\t\t}\n\n\t\tconst tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n\t\tLineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n\t\tconst lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n\t\tconst viewLineTokens = lineTokens.inflate();\n\n\t\tlet startOffset = 0;\n\t\tfor (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n\t\t\tconst type = viewLineTokens.getClassName(j);\n\t\t\tconst endIndex = viewLineTokens.getEndOffset(j);\n\t\t\tresult += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n\t\t\tstartOffset = endIndex;\n\t\t}\n\n\t\tcurrentState = tokenizationResult.endState;\n\t}\n\n\tresult += `</div>`;\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,YAAY,aAAa;AACzB,SAAS,iBAAiB,kBAAkB;AAC5C,SAAS,kBAAkB,QAAQ,sBAAsB,4BAA4B;AACrF,SAAS,kBAAkB;AAC3B,SAAS,WAAW,2BAA2B;AAC/C,SAAS,wBAAwB;AAIjC,MAAM,WAAwC;AAAA,EAC7C,iBAAiB,6BAAM,WAAN;AAAA,EACjB,iBAAiB,wBAAC,QAAgB,QAAiB,UAAkB,oBAAoB,WAAW,MAAM,KAAK,GAA9F;AAClB;AAEO,SAAS,qBAAqB,iBAAmC,MAAc,YAA4B;AACjH,SAAO,kBAAkB,MAAM,gBAAgB,iBAAiB,qBAAqB,IAAI,UAAU,KAAK,QAAQ;AACjH;AAFgB;AAIhB,eAAsB,iBAAiB,iBAAmC,MAAc,YAA4C;AACnI,MAAI,CAAC,YAAY;AAChB,WAAO,kBAAkB,MAAM,gBAAgB,iBAAiB,QAAQ;AAAA,EACzE;AACA,QAAM,sBAAsB,MAAM,qBAAqB,YAAY,UAAU;AAC7E,SAAO,kBAAkB,MAAM,gBAAgB,iBAAiB,uBAAuB,QAAQ;AAChG;AANsB;AAQf,SAAS,mBAAmB,MAAc,gBAAiC,UAAoB,aAAqB,WAAmB,SAAiB,SAA0B;AACxL,MAAI,SAAS;AACb,MAAI,YAAY;AAChB,MAAI,gBAAgB;AAEpB,MAAI,cAAc;AAElB,WAAS,aAAa,GAAG,aAAa,eAAe,SAAS,GAAG,aAAa,YAAY,cAAc;AACvG,UAAM,gBAAgB,eAAe,aAAa,UAAU;AAE5D,QAAI,iBAAiB,aAAa;AACjC;AAAA,IACD;AAEA,QAAI,cAAc;AAElB,WAAO,YAAY,iBAAiB,YAAY,WAAW,aAAa;AACvE,YAAM,WAAW,KAAK,WAAW,SAAS;AAE1C,cAAQ,UAAU;AAAA,QACjB,KAAK,SAAS,KAAK;AAClB,cAAI,oBAAoB,WAAW,YAAY,iBAAiB;AAChE,2BAAiB,oBAAoB;AACrC,iBAAO,oBAAoB,GAAG;AAC7B,gBAAI,WAAW,aAAa;AAC3B,6BAAe;AACf,4BAAc;AAAA,YACf,OAAO;AACN,6BAAe;AACf,4BAAc;AAAA,YACf;AACA;AAAA,UACD;AACA;AAAA,QACD;AAAA,QACA,KAAK,SAAS;AACb,yBAAe;AACf,wBAAc;AACd;AAAA,QAED,KAAK,SAAS;AACb,yBAAe;AACf,wBAAc;AACd;AAAA,QAED,KAAK,SAAS;AACb,yBAAe;AACf,wBAAc;AACd;AAAA,QAED,KAAK,SAAS;AACb,yBAAe;AACf,wBAAc;AACd;AAAA,QAED,KAAK,SAAS;AAAA,QACd,KAAK,SAAS;AAAA,QACd,KAAK,SAAS;AAAA,QACd,KAAK,SAAS;AACb,yBAAe;AACf,wBAAc;AACd;AAAA,QAED,KAAK,SAAS;AAEb,yBAAe;AACf,wBAAc;AACd;AAAA,QAED,KAAK,SAAS;AACb,cAAI,WAAW,aAAa;AAC3B,2BAAe;AACf,0BAAc;AAAA,UACf,OAAO;AACN,2BAAe;AACf,0BAAc;AAAA,UACf;AACA;AAAA,QAED;AACC,yBAAe,OAAO,aAAa,QAAQ;AAC3C,wBAAc;AAAA,MAChB;AAAA,IACD;AAEA,cAAU,gBAAgB,eAAe,eAAe,YAAY,QAAQ,CAAC,KAAK,WAAW;AAE7F,QAAI,gBAAgB,aAAa,aAAa,WAAW;AACxD;AAAA,IACD;AAAA,EACD;AAEA,YAAU;AACV,SAAO;AACR;AA9FgB;AAgGT,SAAS,kBAAkB,MAAc,iBAAmC,qBAA0D;AAC5I,MAAI,SAAS;AACb,QAAM,QAAQ,QAAQ,WAAW,IAAI;AACrC,MAAI,eAAe,oBAAoB,gBAAgB;AACvD,WAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AACjD,UAAM,OAAO,MAAM,CAAC;AAEpB,QAAI,IAAI,GAAG;AACV,gBAAU;AAAA,IACX;AAEA,UAAM,qBAAqB,oBAAoB,gBAAgB,MAAM,MAAM,YAAY;AACvF,eAAW,mBAAmB,mBAAmB,QAAQ,KAAK,MAAM;AACpE,UAAM,aAAa,IAAI,WAAW,mBAAmB,QAAQ,MAAM,eAAe;AAClF,UAAM,iBAAiB,WAAW,QAAQ;AAE1C,QAAI,cAAc;AAClB,aAAS,IAAI,GAAG,OAAO,eAAe,SAAS,GAAG,IAAI,MAAM,KAAK;AAChE,YAAM,OAAO,eAAe,aAAa,CAAC;AAC1C,YAAM,WAAW,eAAe,aAAa,CAAC;AAC9C,gBAAU,gBAAgB,IAAI,KAAK,QAAQ,OAAO,KAAK,UAAU,aAAa,QAAQ,CAAC,CAAC;AACxF,oBAAc;AAAA,IACf;AAEA,mBAAe,mBAAmB;AAAA,EACnC;AAEA,YAAU;AACV,SAAO;AACR;AA7BgB;",
  "names": []
}
