{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/linkComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../base/common/charCode.js\";\nimport { CharacterClassifier } from \"../core/characterClassifier.js\";\nimport type { ILink } from \"../languages.js\";\n\nexport interface ILinkComputerTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport enum State {\n\tInvalid = 0,\n\tStart = 1,\n\tH = 2,\n\tHT = 3,\n\tHTT = 4,\n\tHTTP = 5,\n\tF = 6,\n\tFI = 7,\n\tFIL = 8,\n\tBeforeColon = 9,\n\tAfterColon = 10,\n\tAlmostThere = 11,\n\tEnd = 12,\n\tAccept = 13,\n\tLastKnownState = 14, // marker, custom states may follow\n}\n\nexport type Edge = [State, number, State];\n\nclass Uint8Matrix {\n\tprivate readonly _data: Uint8Array;\n\tpublic readonly rows: number;\n\tpublic readonly cols: number;\n\n\tconstructor(rows: number, cols: number, defaultValue: number) {\n\t\tconst data = new Uint8Array(rows * cols);\n\t\tfor (let i = 0, len = rows * cols; i < len; i++) {\n\t\t\tdata[i] = defaultValue;\n\t\t}\n\n\t\tthis._data = data;\n\t\tthis.rows = rows;\n\t\tthis.cols = cols;\n\t}\n\n\tpublic get(row: number, col: number): number {\n\t\treturn this._data[row * this.cols + col];\n\t}\n\n\tpublic set(row: number, col: number, value: number): void {\n\t\tthis._data[row * this.cols + col] = value;\n\t}\n}\n\nexport class StateMachine {\n\tprivate readonly _states: Uint8Matrix;\n\tprivate readonly _maxCharCode: number;\n\n\tconstructor(edges: Edge[]) {\n\t\tlet maxCharCode = 0;\n\t\tlet maxState = State.Invalid;\n\t\tfor (let i = 0, len = edges.length; i < len; i++) {\n\t\t\tconst [from, chCode, to] = edges[i];\n\t\t\tif (chCode > maxCharCode) {\n\t\t\t\tmaxCharCode = chCode;\n\t\t\t}\n\t\t\tif (from > maxState) {\n\t\t\t\tmaxState = from;\n\t\t\t}\n\t\t\tif (to > maxState) {\n\t\t\t\tmaxState = to;\n\t\t\t}\n\t\t}\n\n\t\tmaxCharCode++;\n\t\tmaxState++;\n\n\t\tconst states = new Uint8Matrix(maxState, maxCharCode, State.Invalid);\n\t\tfor (let i = 0, len = edges.length; i < len; i++) {\n\t\t\tconst [from, chCode, to] = edges[i];\n\t\t\tstates.set(from, chCode, to);\n\t\t}\n\n\t\tthis._states = states;\n\t\tthis._maxCharCode = maxCharCode;\n\t}\n\n\tpublic nextState(currentState: State, chCode: number): State {\n\t\tif (chCode < 0 || chCode >= this._maxCharCode) {\n\t\t\treturn State.Invalid;\n\t\t}\n\t\treturn this._states.get(currentState, chCode);\n\t}\n}\n\n// State machine for http:// or https:// or file://\nlet _stateMachine: StateMachine | null = null;\nfunction getStateMachine(): StateMachine {\n\tif (_stateMachine === null) {\n\t\t_stateMachine = new StateMachine([\n\t\t\t[State.Start, CharCode.h, State.H],\n\t\t\t[State.Start, CharCode.H, State.H],\n\t\t\t[State.Start, CharCode.f, State.F],\n\t\t\t[State.Start, CharCode.F, State.F],\n\n\t\t\t[State.H, CharCode.t, State.HT],\n\t\t\t[State.H, CharCode.T, State.HT],\n\n\t\t\t[State.HT, CharCode.t, State.HTT],\n\t\t\t[State.HT, CharCode.T, State.HTT],\n\n\t\t\t[State.HTT, CharCode.p, State.HTTP],\n\t\t\t[State.HTT, CharCode.P, State.HTTP],\n\n\t\t\t[State.HTTP, CharCode.s, State.BeforeColon],\n\t\t\t[State.HTTP, CharCode.S, State.BeforeColon],\n\t\t\t[State.HTTP, CharCode.Colon, State.AfterColon],\n\n\t\t\t[State.F, CharCode.i, State.FI],\n\t\t\t[State.F, CharCode.I, State.FI],\n\n\t\t\t[State.FI, CharCode.l, State.FIL],\n\t\t\t[State.FI, CharCode.L, State.FIL],\n\n\t\t\t[State.FIL, CharCode.e, State.BeforeColon],\n\t\t\t[State.FIL, CharCode.E, State.BeforeColon],\n\n\t\t\t[State.BeforeColon, CharCode.Colon, State.AfterColon],\n\n\t\t\t[State.AfterColon, CharCode.Slash, State.AlmostThere],\n\n\t\t\t[State.AlmostThere, CharCode.Slash, State.End],\n\t\t]);\n\t}\n\treturn _stateMachine;\n}\n\nenum CharacterClass {\n\tNone = 0,\n\tForceTermination = 1,\n\tCannotEndIn = 2,\n}\n\nlet _classifier: CharacterClassifier<CharacterClass> | null = null;\nfunction getClassifier(): CharacterClassifier<CharacterClass> {\n\tif (_classifier === null) {\n\t\t_classifier = new CharacterClassifier<CharacterClass>(\n\t\t\tCharacterClass.None,\n\t\t);\n\n\t\t// allow-any-unicode-next-line\n\t\tconst FORCE_TERMINATION_CHARACTERS =\n\t\t\t\" \\t<>'\\\"\u3001\u3002\uFF61\uFF64\uFF0C\uFF0E\uFF1A\uFF1B\u2018\u3008\u300C\u300E\u3014\uFF08\uFF3B\uFF5B\uFF62\uFF63\uFF5D\uFF3D\uFF09\u3015\u300F\u300D\u3009\u2019\uFF40\uFF5E\u2026\";\n\t\tfor (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n\t\t\t_classifier.set(\n\t\t\t\tFORCE_TERMINATION_CHARACTERS.charCodeAt(i),\n\t\t\t\tCharacterClass.ForceTermination,\n\t\t\t);\n\t\t}\n\n\t\tconst CANNOT_END_WITH_CHARACTERS = \".,;:\";\n\t\tfor (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n\t\t\t_classifier.set(\n\t\t\t\tCANNOT_END_WITH_CHARACTERS.charCodeAt(i),\n\t\t\t\tCharacterClass.CannotEndIn,\n\t\t\t);\n\t\t}\n\t}\n\treturn _classifier;\n}\n\nexport class LinkComputer {\n\tprivate static _createLink(\n\t\tclassifier: CharacterClassifier<CharacterClass>,\n\t\tline: string,\n\t\tlineNumber: number,\n\t\tlinkBeginIndex: number,\n\t\tlinkEndIndex: number,\n\t): ILink {\n\t\t// Do not allow to end link in certain characters...\n\t\tlet lastIncludedCharIndex = linkEndIndex - 1;\n\t\tdo {\n\t\t\tconst chCode = line.charCodeAt(lastIncludedCharIndex);\n\t\t\tconst chClass = classifier.get(chCode);\n\t\t\tif (chClass !== CharacterClass.CannotEndIn) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastIncludedCharIndex--;\n\t\t} while (lastIncludedCharIndex > linkBeginIndex);\n\n\t\t// Handle links enclosed in parens, square brackets and curlys.\n\t\tif (linkBeginIndex > 0) {\n\t\t\tconst charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n\t\t\tconst lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n\n\t\t\tif (\n\t\t\t\t(charCodeBeforeLink === CharCode.OpenParen &&\n\t\t\t\t\tlastCharCodeInLink === CharCode.CloseParen) ||\n\t\t\t\t(charCodeBeforeLink === CharCode.OpenSquareBracket &&\n\t\t\t\t\tlastCharCodeInLink === CharCode.CloseSquareBracket) ||\n\t\t\t\t(charCodeBeforeLink === CharCode.OpenCurlyBrace &&\n\t\t\t\t\tlastCharCodeInLink === CharCode.CloseCurlyBrace)\n\t\t\t) {\n\t\t\t\t// Do not end in ) if ( is before the link start\n\t\t\t\t// Do not end in ] if [ is before the link start\n\t\t\t\t// Do not end in } if { is before the link start\n\t\t\t\tlastIncludedCharIndex--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstartColumn: linkBeginIndex + 1,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tendColumn: lastIncludedCharIndex + 2,\n\t\t\t},\n\t\t\turl: line.substring(linkBeginIndex, lastIncludedCharIndex + 1),\n\t\t};\n\t}\n\n\tpublic static computeLinks(\n\t\tmodel: ILinkComputerTarget,\n\t\tstateMachine: StateMachine = getStateMachine(),\n\t): ILink[] {\n\t\tconst classifier = getClassifier();\n\n\t\tconst result: ILink[] = [];\n\t\tfor (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n\t\t\tconst line = model.getLineContent(i);\n\t\t\tconst len = line.length;\n\n\t\t\tlet j = 0;\n\t\t\tlet linkBeginIndex = 0;\n\t\t\tlet linkBeginChCode = 0;\n\t\t\tlet state = State.Start;\n\t\t\tlet hasOpenParens = false;\n\t\t\tlet hasOpenSquareBracket = false;\n\t\t\tlet inSquareBrackets = false;\n\t\t\tlet hasOpenCurlyBracket = false;\n\n\t\t\twhile (j < len) {\n\t\t\t\tlet resetStateMachine = false;\n\t\t\t\tconst chCode = line.charCodeAt(j);\n\n\t\t\t\tif (state === State.Accept) {\n\t\t\t\t\tlet chClass: CharacterClass;\n\t\t\t\t\tswitch (chCode) {\n\t\t\t\t\t\tcase CharCode.OpenParen:\n\t\t\t\t\t\t\thasOpenParens = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseParen:\n\t\t\t\t\t\t\tchClass = hasOpenParens\n\t\t\t\t\t\t\t\t? CharacterClass.None\n\t\t\t\t\t\t\t\t: CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.OpenSquareBracket:\n\t\t\t\t\t\t\tinSquareBrackets = true;\n\t\t\t\t\t\t\thasOpenSquareBracket = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseSquareBracket:\n\t\t\t\t\t\t\tinSquareBrackets = false;\n\t\t\t\t\t\t\tchClass = hasOpenSquareBracket\n\t\t\t\t\t\t\t\t? CharacterClass.None\n\t\t\t\t\t\t\t\t: CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.OpenCurlyBrace:\n\t\t\t\t\t\t\thasOpenCurlyBracket = true;\n\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.CloseCurlyBrace:\n\t\t\t\t\t\t\tchClass = hasOpenCurlyBracket\n\t\t\t\t\t\t\t\t? CharacterClass.None\n\t\t\t\t\t\t\t\t: CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// The following three rules make it that ' or \" or ` are allowed inside links\n\t\t\t\t\t\t// only if the link is wrapped by some other quote character\n\t\t\t\t\t\tcase CharCode.SingleQuote:\n\t\t\t\t\t\tcase CharCode.DoubleQuote:\n\t\t\t\t\t\tcase CharCode.BackTick:\n\t\t\t\t\t\t\tif (linkBeginChCode === chCode) {\n\t\t\t\t\t\t\t\tchClass = CharacterClass.ForceTermination;\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tlinkBeginChCode === CharCode.SingleQuote ||\n\t\t\t\t\t\t\t\tlinkBeginChCode === CharCode.DoubleQuote ||\n\t\t\t\t\t\t\t\tlinkBeginChCode === CharCode.BackTick\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tchClass = CharacterClass.ForceTermination;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.Asterisk:\n\t\t\t\t\t\t\t// `*` terminates a link if the link began with `*`\n\t\t\t\t\t\t\tchClass =\n\t\t\t\t\t\t\t\tlinkBeginChCode === CharCode.Asterisk\n\t\t\t\t\t\t\t\t\t? CharacterClass.ForceTermination\n\t\t\t\t\t\t\t\t\t: CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.Pipe:\n\t\t\t\t\t\t\t// `|` terminates a link if the link began with `|`\n\t\t\t\t\t\t\tchClass =\n\t\t\t\t\t\t\t\tlinkBeginChCode === CharCode.Pipe\n\t\t\t\t\t\t\t\t\t? CharacterClass.ForceTermination\n\t\t\t\t\t\t\t\t\t: CharacterClass.None;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CharCode.Space:\n\t\t\t\t\t\t\t// ` ` allow space in between [ and ]\n\t\t\t\t\t\t\tchClass = inSquareBrackets\n\t\t\t\t\t\t\t\t? CharacterClass.None\n\t\t\t\t\t\t\t\t: CharacterClass.ForceTermination;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tchClass = classifier.get(chCode);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if character terminates link\n\t\t\t\t\tif (chClass === CharacterClass.ForceTermination) {\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\tLinkComputer._createLink(\n\t\t\t\t\t\t\t\tclassifier,\n\t\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\tlinkBeginIndex,\n\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (state === State.End) {\n\t\t\t\t\tlet chClass: CharacterClass;\n\t\t\t\t\tif (chCode === CharCode.OpenSquareBracket) {\n\t\t\t\t\t\t// Allow for the authority part to contain ipv6 addresses which contain [ and ]\n\t\t\t\t\t\thasOpenSquareBracket = true;\n\t\t\t\t\t\tchClass = CharacterClass.None;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchClass = classifier.get(chCode);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if character terminates link\n\t\t\t\t\tif (chClass === CharacterClass.ForceTermination) {\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate = State.Accept;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate = stateMachine.nextState(state, chCode);\n\t\t\t\t\tif (state === State.Invalid) {\n\t\t\t\t\t\tresetStateMachine = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resetStateMachine) {\n\t\t\t\t\tstate = State.Start;\n\t\t\t\t\thasOpenParens = false;\n\t\t\t\t\thasOpenSquareBracket = false;\n\t\t\t\t\thasOpenCurlyBracket = false;\n\n\t\t\t\t\t// Record where the link started\n\t\t\t\t\tlinkBeginIndex = j + 1;\n\t\t\t\t\tlinkBeginChCode = chCode;\n\t\t\t\t}\n\n\t\t\t\tj++;\n\t\t\t}\n\n\t\t\tif (state === State.Accept) {\n\t\t\t\tresult.push(\n\t\t\t\t\tLinkComputer._createLink(\n\t\t\t\t\t\tclassifier,\n\t\t\t\t\t\tline,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\tlinkBeginIndex,\n\t\t\t\t\t\tlen,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model: ILinkComputerTarget | null): ILink[] {\n\tif (\n\t\t!model ||\n\t\ttypeof model.getLineCount !== \"function\" ||\n\t\ttypeof model.getLineContent !== \"function\"\n\t) {\n\t\t// Unknown caller!\n\t\treturn [];\n\t}\n\treturn LinkComputer.computeLinks(model);\n}\n"],
  "mappings": "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",
  "names": ["State", "CharacterClass"]
}
