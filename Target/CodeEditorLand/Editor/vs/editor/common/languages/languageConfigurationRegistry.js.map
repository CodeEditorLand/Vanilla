{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/languageConfigurationRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ITextModel } from '../model.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../core/wordHelper.js';\nimport { EnterAction, FoldingRules, IAutoClosingPair, IndentationRule, LanguageConfiguration, AutoClosingPairs, CharacterPair, ExplicitLanguageConfiguration } from './languageConfiguration.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from './language.js';\nimport { InstantiationType, registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { PLAINTEXT_LANGUAGE_ID } from './modesRegistry.js';\nimport { LanguageBracketsConfiguration } from './supports/languageBracketsConfiguration.js';\n\n/**\n * Interface used to support insertion of mode specific comments.\n */\nexport interface ICommentsConfiguration {\n\tlineCommentToken?: string;\n\tblockCommentStartToken?: string;\n\tblockCommentEndToken?: string;\n}\n\nexport interface ILanguageConfigurationService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChange: Event<LanguageConfigurationServiceChangeEvent>;\n\n\t/**\n\t * @param priority Use a higher number for higher priority\n\t */\n\tregister(languageId: string, configuration: LanguageConfiguration, priority?: number): IDisposable;\n\n\tgetLanguageConfiguration(languageId: string): ResolvedLanguageConfiguration;\n\n}\n\nexport class LanguageConfigurationServiceChangeEvent {\n\tconstructor(public readonly languageId: string | undefined) { }\n\n\tpublic affects(languageId: string): boolean {\n\t\treturn !this.languageId ? true : this.languageId === languageId;\n\t}\n}\n\nexport const ILanguageConfigurationService = createDecorator<ILanguageConfigurationService>('languageConfigurationService');\n\nexport class LanguageConfigurationService extends Disposable implements ILanguageConfigurationService {\n\t_serviceBrand: undefined;\n\n\tprivate readonly _registry = this._register(new LanguageConfigurationRegistry());\n\n\tprivate readonly onDidChangeEmitter = this._register(new Emitter<LanguageConfigurationServiceChangeEvent>());\n\tpublic readonly onDidChange = this.onDidChangeEmitter.event;\n\n\tprivate readonly configurations = new Map<string, ResolvedLanguageConfiguration>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILanguageService private readonly languageService: ILanguageService\n\t) {\n\t\tsuper();\n\n\t\tconst languageConfigKeys = new Set(Object.values(customizedLanguageConfigKeys));\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration((e) => {\n\t\t\tconst globalConfigChanged = e.change.keys.some((k) =>\n\t\t\t\tlanguageConfigKeys.has(k)\n\t\t\t);\n\t\t\tconst localConfigChanged = e.change.overrides\n\t\t\t\t.filter(([overrideLangName, keys]) =>\n\t\t\t\t\tkeys.some((k) => languageConfigKeys.has(k))\n\t\t\t\t)\n\t\t\t\t.map(([overrideLangName]) => overrideLangName);\n\n\t\t\tif (globalConfigChanged) {\n\t\t\t\tthis.configurations.clear();\n\t\t\t\tthis.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(undefined));\n\t\t\t} else {\n\t\t\t\tfor (const languageId of localConfigChanged) {\n\t\t\t\t\tif (this.languageService.isRegisteredLanguageId(languageId)) {\n\t\t\t\t\t\tthis.configurations.delete(languageId);\n\t\t\t\t\t\tthis.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._registry.onDidChange((e) => {\n\t\t\tthis.configurations.delete(e.languageId);\n\t\t\tthis.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId));\n\t\t}));\n\t}\n\n\tpublic register(languageId: string, configuration: LanguageConfiguration, priority?: number): IDisposable {\n\t\treturn this._registry.register(languageId, configuration, priority);\n\t}\n\n\tpublic getLanguageConfiguration(languageId: string): ResolvedLanguageConfiguration {\n\t\tlet result = this.configurations.get(languageId);\n\t\tif (!result) {\n\t\t\tresult = computeConfig(languageId, this._registry, this.configurationService, this.languageService);\n\t\t\tthis.configurations.set(languageId, result);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction computeConfig(\n\tlanguageId: string,\n\tregistry: LanguageConfigurationRegistry,\n\tconfigurationService: IConfigurationService,\n\tlanguageService: ILanguageService,\n): ResolvedLanguageConfiguration {\n\tlet languageConfig = registry.getLanguageConfiguration(languageId);\n\n\tif (!languageConfig) {\n\t\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\t\t// this happens for the null language, which can be returned by monarch.\n\t\t\t// Instead of throwing an error, we just return a default config.\n\t\t\treturn new ResolvedLanguageConfiguration(languageId, {});\n\t\t}\n\t\tlanguageConfig = new ResolvedLanguageConfiguration(languageId, {});\n\t}\n\n\tconst customizedConfig = getCustomizedLanguageConfig(languageConfig.languageId, configurationService);\n\tconst data = combineLanguageConfigurations([languageConfig.underlyingConfig, customizedConfig]);\n\tconst config = new ResolvedLanguageConfiguration(languageConfig.languageId, data);\n\treturn config;\n}\n\nconst customizedLanguageConfigKeys = {\n\tbrackets: 'editor.language.brackets',\n\tcolorizedBracketPairs: 'editor.language.colorizedBracketPairs'\n};\n\nfunction getCustomizedLanguageConfig(languageId: string, configurationService: IConfigurationService): LanguageConfiguration {\n\tconst brackets = configurationService.getValue(customizedLanguageConfigKeys.brackets, {\n\t\toverrideIdentifier: languageId,\n\t});\n\n\tconst colorizedBracketPairs = configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs, {\n\t\toverrideIdentifier: languageId,\n\t});\n\n\treturn {\n\t\tbrackets: validateBracketPairs(brackets),\n\t\tcolorizedBracketPairs: validateBracketPairs(colorizedBracketPairs),\n\t};\n}\n\nfunction validateBracketPairs(data: unknown): CharacterPair[] | undefined {\n\tif (!Array.isArray(data)) {\n\t\treturn undefined;\n\t}\n\treturn data.map(pair => {\n\t\tif (!Array.isArray(pair) || pair.length !== 2) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn [pair[0], pair[1]] as CharacterPair;\n\t}).filter((p): p is CharacterPair => !!p);\n}\n\nexport function getIndentationAtPosition(model: ITextModel, lineNumber: number, column: number): string {\n\tconst lineText = model.getLineContent(lineNumber);\n\tlet indentation = strings.getLeadingWhitespace(lineText);\n\tif (indentation.length > column - 1) {\n\t\tindentation = indentation.substring(0, column - 1);\n\t}\n\treturn indentation;\n}\n\nclass ComposedLanguageConfiguration {\n\tprivate readonly _entries: LanguageConfigurationContribution[];\n\tprivate _order: number;\n\tprivate _resolved: ResolvedLanguageConfiguration | null = null;\n\n\tconstructor(public readonly languageId: string) {\n\t\tthis._entries = [];\n\t\tthis._order = 0;\n\t\tthis._resolved = null;\n\t}\n\n\tpublic register(\n\t\tconfiguration: LanguageConfiguration,\n\t\tpriority: number\n\t): IDisposable {\n\t\tconst entry = new LanguageConfigurationContribution(\n\t\t\tconfiguration,\n\t\t\tpriority,\n\t\t\t++this._order\n\t\t);\n\t\tthis._entries.push(entry);\n\t\tthis._resolved = null;\n\t\treturn toDisposable(() => {\n\t\t\tfor (let i = 0; i < this._entries.length; i++) {\n\t\t\t\tif (this._entries[i] === entry) {\n\t\t\t\t\tthis._entries.splice(i, 1);\n\t\t\t\t\tthis._resolved = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getResolvedConfiguration(): ResolvedLanguageConfiguration | null {\n\t\tif (!this._resolved) {\n\t\t\tconst config = this._resolve();\n\t\t\tif (config) {\n\t\t\t\tthis._resolved = new ResolvedLanguageConfiguration(\n\t\t\t\t\tthis.languageId,\n\t\t\t\t\tconfig\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn this._resolved;\n\t}\n\n\tprivate _resolve(): LanguageConfiguration | null {\n\t\tif (this._entries.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis._entries.sort(LanguageConfigurationContribution.cmp);\n\t\treturn combineLanguageConfigurations(this._entries.map(e => e.configuration));\n\t}\n}\n\nfunction combineLanguageConfigurations(configs: LanguageConfiguration[]): LanguageConfiguration {\n\tlet result: ExplicitLanguageConfiguration = {\n\t\tcomments: undefined,\n\t\tbrackets: undefined,\n\t\twordPattern: undefined,\n\t\tindentationRules: undefined,\n\t\tonEnterRules: undefined,\n\t\tautoClosingPairs: undefined,\n\t\tsurroundingPairs: undefined,\n\t\tautoCloseBefore: undefined,\n\t\tfolding: undefined,\n\t\tcolorizedBracketPairs: undefined,\n\t\t__electricCharacterSupport: undefined,\n\t};\n\tfor (const entry of configs) {\n\t\tresult = {\n\t\t\tcomments: entry.comments || result.comments,\n\t\t\tbrackets: entry.brackets || result.brackets,\n\t\t\twordPattern: entry.wordPattern || result.wordPattern,\n\t\t\tindentationRules: entry.indentationRules || result.indentationRules,\n\t\t\tonEnterRules: entry.onEnterRules || result.onEnterRules,\n\t\t\tautoClosingPairs: entry.autoClosingPairs || result.autoClosingPairs,\n\t\t\tsurroundingPairs: entry.surroundingPairs || result.surroundingPairs,\n\t\t\tautoCloseBefore: entry.autoCloseBefore || result.autoCloseBefore,\n\t\t\tfolding: entry.folding || result.folding,\n\t\t\tcolorizedBracketPairs: entry.colorizedBracketPairs || result.colorizedBracketPairs,\n\t\t\t__electricCharacterSupport: entry.__electricCharacterSupport || result.__electricCharacterSupport,\n\t\t};\n\t}\n\n\treturn result;\n}\n\nclass LanguageConfigurationContribution {\n\tconstructor(\n\t\tpublic readonly configuration: LanguageConfiguration,\n\t\tpublic readonly priority: number,\n\t\tpublic readonly order: number\n\t) { }\n\n\tpublic static cmp(a: LanguageConfigurationContribution, b: LanguageConfigurationContribution) {\n\t\tif (a.priority === b.priority) {\n\t\t\t// higher order last\n\t\t\treturn a.order - b.order;\n\t\t}\n\t\t// higher priority last\n\t\treturn a.priority - b.priority;\n\t}\n}\n\nexport class LanguageConfigurationChangeEvent {\n\tconstructor(public readonly languageId: string) { }\n}\n\nexport class LanguageConfigurationRegistry extends Disposable {\n\tprivate readonly _entries = new Map<string, ComposedLanguageConfiguration>();\n\n\tprivate readonly _onDidChange = this._register(new Emitter<LanguageConfigurationChangeEvent>());\n\tpublic readonly onDidChange: Event<LanguageConfigurationChangeEvent> = this._onDidChange.event;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._register(this.register(PLAINTEXT_LANGUAGE_ID, {\n\t\t\tbrackets: [\n\t\t\t\t['(', ')'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['{', '}'],\n\t\t\t],\n\t\t\tsurroundingPairs: [\n\t\t\t\t{ open: '{', close: '}' },\n\t\t\t\t{ open: '[', close: ']' },\n\t\t\t\t{ open: '(', close: ')' },\n\t\t\t\t{ open: '<', close: '>' },\n\t\t\t\t{ open: '\\\"', close: '\\\"' },\n\t\t\t\t{ open: '\\'', close: '\\'' },\n\t\t\t\t{ open: '`', close: '`' },\n\t\t\t],\n\t\t\tcolorizedBracketPairs: [],\n\t\t\tfolding: {\n\t\t\t\toffSide: true\n\t\t\t}\n\t\t}, 0));\n\t}\n\n\t/**\n\t * @param priority Use a higher number for higher priority\n\t */\n\tpublic register(languageId: string, configuration: LanguageConfiguration, priority: number = 0): IDisposable {\n\t\tlet entries = this._entries.get(languageId);\n\t\tif (!entries) {\n\t\t\tentries = new ComposedLanguageConfiguration(languageId);\n\t\t\tthis._entries.set(languageId, entries);\n\t\t}\n\n\t\tconst disposable = entries.register(configuration, priority);\n\t\tthis._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n\n\t\treturn toDisposable(() => {\n\t\t\tdisposable.dispose();\n\t\t\tthis._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n\t\t});\n\t}\n\n\tpublic getLanguageConfiguration(languageId: string): ResolvedLanguageConfiguration | null {\n\t\tconst entries = this._entries.get(languageId);\n\t\treturn entries?.getResolvedConfiguration() || null;\n\t}\n}\n\n/**\n * Immutable.\n*/\nexport class ResolvedLanguageConfiguration {\n\tprivate _brackets: RichEditBrackets | null;\n\tprivate _electricCharacter: BracketElectricCharacterSupport | null;\n\tprivate readonly _onEnterSupport: OnEnterSupport | null;\n\n\tpublic readonly comments: ICommentsConfiguration | null;\n\tpublic readonly characterPair: CharacterPairSupport;\n\tpublic readonly wordDefinition: RegExp;\n\tpublic readonly indentRulesSupport: IndentRulesSupport | null;\n\tpublic readonly indentationRules: IndentationRule | undefined;\n\tpublic readonly foldingRules: FoldingRules;\n\tpublic readonly bracketsNew: LanguageBracketsConfiguration;\n\n\tconstructor(\n\t\tpublic readonly languageId: string,\n\t\tpublic readonly underlyingConfig: LanguageConfiguration\n\t) {\n\t\tthis._brackets = null;\n\t\tthis._electricCharacter = null;\n\t\tthis._onEnterSupport =\n\t\t\tthis.underlyingConfig.brackets ||\n\t\t\t\tthis.underlyingConfig.indentationRules ||\n\t\t\t\tthis.underlyingConfig.onEnterRules\n\t\t\t\t? new OnEnterSupport(this.underlyingConfig)\n\t\t\t\t: null;\n\t\tthis.comments = ResolvedLanguageConfiguration._handleComments(this.underlyingConfig);\n\t\tthis.characterPair = new CharacterPairSupport(this.underlyingConfig);\n\n\t\tthis.wordDefinition = this.underlyingConfig.wordPattern || DEFAULT_WORD_REGEXP;\n\t\tthis.indentationRules = this.underlyingConfig.indentationRules;\n\t\tif (this.underlyingConfig.indentationRules) {\n\t\t\tthis.indentRulesSupport = new IndentRulesSupport(\n\t\t\t\tthis.underlyingConfig.indentationRules\n\t\t\t);\n\t\t} else {\n\t\t\tthis.indentRulesSupport = null;\n\t\t}\n\t\tthis.foldingRules = this.underlyingConfig.folding || {};\n\n\t\tthis.bracketsNew = new LanguageBracketsConfiguration(\n\t\t\tlanguageId,\n\t\t\tthis.underlyingConfig\n\t\t);\n\t}\n\n\tpublic getWordDefinition(): RegExp {\n\t\treturn ensureValidWordDefinition(this.wordDefinition);\n\t}\n\n\tpublic get brackets(): RichEditBrackets | null {\n\t\tif (!this._brackets && this.underlyingConfig.brackets) {\n\t\t\tthis._brackets = new RichEditBrackets(\n\t\t\t\tthis.languageId,\n\t\t\t\tthis.underlyingConfig.brackets\n\t\t\t);\n\t\t}\n\t\treturn this._brackets;\n\t}\n\n\tpublic get electricCharacter(): BracketElectricCharacterSupport | null {\n\t\tif (!this._electricCharacter) {\n\t\t\tthis._electricCharacter = new BracketElectricCharacterSupport(\n\t\t\t\tthis.brackets\n\t\t\t);\n\t\t}\n\t\treturn this._electricCharacter;\n\t}\n\n\tpublic onEnter(\n\t\tautoIndent: EditorAutoIndentStrategy,\n\t\tpreviousLineText: string,\n\t\tbeforeEnterText: string,\n\t\tafterEnterText: string\n\t): EnterAction | null {\n\t\tif (!this._onEnterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._onEnterSupport.onEnter(\n\t\t\tautoIndent,\n\t\t\tpreviousLineText,\n\t\t\tbeforeEnterText,\n\t\t\tafterEnterText\n\t\t);\n\t}\n\n\tpublic getAutoClosingPairs(): AutoClosingPairs {\n\t\treturn new AutoClosingPairs(this.characterPair.getAutoClosingPairs());\n\t}\n\n\tpublic getAutoCloseBeforeSet(forQuotes: boolean): string {\n\t\treturn this.characterPair.getAutoCloseBeforeSet(forQuotes);\n\t}\n\n\tpublic getSurroundingPairs(): IAutoClosingPair[] {\n\t\treturn this.characterPair.getSurroundingPairs();\n\t}\n\n\tprivate static _handleComments(\n\t\tconf: LanguageConfiguration\n\t): ICommentsConfiguration | null {\n\t\tconst commentRule = conf.comments;\n\t\tif (!commentRule) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// comment configuration\n\t\tconst comments: ICommentsConfiguration = {};\n\n\t\tif (commentRule.lineComment) {\n\t\t\tcomments.lineCommentToken = commentRule.lineComment;\n\t\t}\n\t\tif (commentRule.blockComment) {\n\t\t\tconst [blockStart, blockEnd] = commentRule.blockComment;\n\t\t\tcomments.blockCommentStartToken = blockStart;\n\t\t\tcomments.blockCommentEndToken = blockEnd;\n\t\t}\n\n\t\treturn comments;\n\t}\n}\n\nregisterSingleton(ILanguageConfigurationService, LanguageConfigurationService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
