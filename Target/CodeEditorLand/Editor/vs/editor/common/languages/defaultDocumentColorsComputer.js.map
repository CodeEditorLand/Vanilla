{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/defaultDocumentColorsComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color, HSLA } from \"../../../base/common/color.js\";\nimport type { IPosition } from \"../core/position.js\";\nimport type { IRange } from \"../core/range.js\";\nimport type { IColor, IColorInformation } from \"../languages.js\";\n\nexport interface IDocumentColorComputerTarget {\n\tgetValue(): string;\n\tpositionAt(offset: number): IPosition;\n\tfindMatches(regex: RegExp): RegExpMatchArray[];\n}\n\nfunction _parseCaptureGroups(captureGroups: IterableIterator<string>) {\n\tconst values = [];\n\tfor (const captureGroup of captureGroups) {\n\t\tconst parsedNumber = Number(captureGroup);\n\t\tif (\n\t\t\tparsedNumber ||\n\t\t\t(parsedNumber === 0 && captureGroup.replace(/\\s/g, \"\") !== \"\")\n\t\t) {\n\t\t\tvalues.push(parsedNumber);\n\t\t}\n\t}\n\treturn values;\n}\n\nfunction _toIColor(r: number, g: number, b: number, a: number): IColor {\n\treturn {\n\t\tred: r / 255,\n\t\tblue: b / 255,\n\t\tgreen: g / 255,\n\t\talpha: a,\n\t};\n}\n\nfunction _findRange(\n\tmodel: IDocumentColorComputerTarget,\n\tmatch: RegExpMatchArray,\n): IRange | undefined {\n\tconst index = match.index;\n\tconst length = match[0].length;\n\tif (!index) {\n\t\treturn;\n\t}\n\tconst startPosition = model.positionAt(index);\n\tconst range: IRange = {\n\t\tstartLineNumber: startPosition.lineNumber,\n\t\tstartColumn: startPosition.column,\n\t\tendLineNumber: startPosition.lineNumber,\n\t\tendColumn: startPosition.column + length,\n\t};\n\treturn range;\n}\n\nfunction _findHexColorInformation(range: IRange | undefined, hexValue: string) {\n\tif (!range) {\n\t\treturn;\n\t}\n\tconst parsedHexColor = Color.Format.CSS.parseHex(hexValue);\n\tif (!parsedHexColor) {\n\t\treturn;\n\t}\n\treturn {\n\t\trange: range,\n\t\tcolor: _toIColor(\n\t\t\tparsedHexColor.rgba.r,\n\t\t\tparsedHexColor.rgba.g,\n\t\t\tparsedHexColor.rgba.b,\n\t\t\tparsedHexColor.rgba.a,\n\t\t),\n\t};\n}\n\nfunction _findRGBColorInformation(\n\trange: IRange | undefined,\n\tmatches: RegExpMatchArray[],\n\tisAlpha: boolean,\n) {\n\tif (!range || matches.length !== 1) {\n\t\treturn;\n\t}\n\tconst match = matches[0]!;\n\tconst captureGroups = match.values();\n\tconst parsedRegex = _parseCaptureGroups(captureGroups);\n\treturn {\n\t\trange: range,\n\t\tcolor: _toIColor(\n\t\t\tparsedRegex[0],\n\t\t\tparsedRegex[1],\n\t\t\tparsedRegex[2],\n\t\t\tisAlpha ? parsedRegex[3] : 1,\n\t\t),\n\t};\n}\n\nfunction _findHSLColorInformation(\n\trange: IRange | undefined,\n\tmatches: RegExpMatchArray[],\n\tisAlpha: boolean,\n) {\n\tif (!range || matches.length !== 1) {\n\t\treturn;\n\t}\n\tconst match = matches[0]!;\n\tconst captureGroups = match.values();\n\tconst parsedRegex = _parseCaptureGroups(captureGroups);\n\tconst colorEquivalent = new Color(\n\t\tnew HSLA(\n\t\t\tparsedRegex[0],\n\t\t\tparsedRegex[1] / 100,\n\t\t\tparsedRegex[2] / 100,\n\t\t\tisAlpha ? parsedRegex[3] : 1,\n\t\t),\n\t);\n\treturn {\n\t\trange: range,\n\t\tcolor: _toIColor(\n\t\t\tcolorEquivalent.rgba.r,\n\t\t\tcolorEquivalent.rgba.g,\n\t\t\tcolorEquivalent.rgba.b,\n\t\t\tcolorEquivalent.rgba.a,\n\t\t),\n\t};\n}\n\nfunction _findMatches(\n\tmodel: IDocumentColorComputerTarget | string,\n\tregex: RegExp,\n): RegExpMatchArray[] {\n\tif (typeof model === \"string\") {\n\t\treturn [...model.matchAll(regex)];\n\t} else {\n\t\treturn model.findMatches(regex);\n\t}\n}\n\nfunction computeColors(\n\tmodel: IDocumentColorComputerTarget,\n): IColorInformation[] {\n\tconst result: IColorInformation[] = [];\n\t// Early validation for RGB and HSL\n\tconst initialValidationRegex =\n\t\t/\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\n\tconst initialValidationMatches = _findMatches(\n\t\tmodel,\n\t\tinitialValidationRegex,\n\t);\n\n\t// Potential colors have been found, validate the parameters\n\tif (initialValidationMatches.length > 0) {\n\t\tfor (const initialMatch of initialValidationMatches) {\n\t\t\tconst initialCaptureGroups = initialMatch.filter(\n\t\t\t\t(captureGroup) => captureGroup !== undefined,\n\t\t\t);\n\t\t\tconst colorScheme = initialCaptureGroups[1];\n\t\t\tconst colorParameters = initialCaptureGroups[2];\n\t\t\tif (!colorParameters) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet colorInformation;\n\t\t\tif (colorScheme === \"rgb\") {\n\t\t\t\tconst regexParameters =\n\t\t\t\t\t/^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findRGBColorInformation(\n\t\t\t\t\t_findRange(model, initialMatch),\n\t\t\t\t\t_findMatches(colorParameters, regexParameters),\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t} else if (colorScheme === \"rgba\") {\n\t\t\t\tconst regexParameters =\n\t\t\t\t\t/^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findRGBColorInformation(\n\t\t\t\t\t_findRange(model, initialMatch),\n\t\t\t\t\t_findMatches(colorParameters, regexParameters),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t} else if (colorScheme === \"hsl\") {\n\t\t\t\tconst regexParameters =\n\t\t\t\t\t/^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findHSLColorInformation(\n\t\t\t\t\t_findRange(model, initialMatch),\n\t\t\t\t\t_findMatches(colorParameters, regexParameters),\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t} else if (colorScheme === \"hsla\") {\n\t\t\t\tconst regexParameters =\n\t\t\t\t\t/^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findHSLColorInformation(\n\t\t\t\t\t_findRange(model, initialMatch),\n\t\t\t\t\t_findMatches(colorParameters, regexParameters),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t} else if (colorScheme === \"#\") {\n\t\t\t\tcolorInformation = _findHexColorInformation(\n\t\t\t\t\t_findRange(model, initialMatch),\n\t\t\t\t\tcolorScheme + colorParameters,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (colorInformation) {\n\t\t\t\tresult.push(colorInformation);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Returns an array of all default document colors in the provided document\n */\nexport function computeDefaultDocumentColors(\n\tmodel: IDocumentColorComputerTarget,\n): IColorInformation[] {\n\tif (\n\t\t!model ||\n\t\ttypeof model.getValue !== \"function\" ||\n\t\ttypeof model.positionAt !== \"function\"\n\t) {\n\t\t// Unknown caller!\n\t\treturn [];\n\t}\n\treturn computeColors(model);\n}\n"],
  "mappings": "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",
  "names": []
}
