{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languages/defaultDocumentColorsComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color, HSLA } from '../../../base/common/color.js';\nimport { IPosition } from '../core/position.js';\nimport { IRange } from '../core/range.js';\nimport { IColor, IColorInformation } from '../languages.js';\n\nexport interface IDocumentColorComputerTarget {\n\tgetValue(): string;\n\tpositionAt(offset: number): IPosition;\n\tfindMatches(regex: RegExp): RegExpMatchArray[];\n}\n\nfunction _parseCaptureGroups(captureGroups: IterableIterator<string>) {\n\tconst values = [];\n\tfor (const captureGroup of captureGroups) {\n\t\tconst parsedNumber = Number(captureGroup);\n\t\tif (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\\s/g, '') !== '') {\n\t\t\tvalues.push(parsedNumber);\n\t\t}\n\t}\n\treturn values;\n}\n\nfunction _toIColor(r: number, g: number, b: number, a: number): IColor {\n\treturn {\n\t\tred: r / 255,\n\t\tblue: b / 255,\n\t\tgreen: g / 255,\n\t\talpha: a\n\t};\n}\n\nfunction _findRange(model: IDocumentColorComputerTarget, match: RegExpMatchArray): IRange | undefined {\n\tconst index = match.index;\n\tconst length = match[0].length;\n\tif (!index) {\n\t\treturn;\n\t}\n\tconst startPosition = model.positionAt(index);\n\tconst range: IRange = {\n\t\tstartLineNumber: startPosition.lineNumber,\n\t\tstartColumn: startPosition.column,\n\t\tendLineNumber: startPosition.lineNumber,\n\t\tendColumn: startPosition.column + length\n\t};\n\treturn range;\n}\n\nfunction _findHexColorInformation(range: IRange | undefined, hexValue: string) {\n\tif (!range) {\n\t\treturn;\n\t}\n\tconst parsedHexColor = Color.Format.CSS.parseHex(hexValue);\n\tif (!parsedHexColor) {\n\t\treturn;\n\t}\n\treturn {\n\t\trange: range,\n\t\tcolor: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)\n\t};\n}\n\nfunction _findRGBColorInformation(range: IRange | undefined, matches: RegExpMatchArray[], isAlpha: boolean) {\n\tif (!range || matches.length !== 1) {\n\t\treturn;\n\t}\n\tconst match = matches[0]!;\n\tconst captureGroups = match.values();\n\tconst parsedRegex = _parseCaptureGroups(captureGroups);\n\treturn {\n\t\trange: range,\n\t\tcolor: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)\n\t};\n}\n\nfunction _findHSLColorInformation(range: IRange | undefined, matches: RegExpMatchArray[], isAlpha: boolean) {\n\tif (!range || matches.length !== 1) {\n\t\treturn;\n\t}\n\tconst match = matches[0]!;\n\tconst captureGroups = match.values();\n\tconst parsedRegex = _parseCaptureGroups(captureGroups);\n\tconst colorEquivalent = new Color(new HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));\n\treturn {\n\t\trange: range,\n\t\tcolor: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)\n\t};\n}\n\nfunction _findMatches(model: IDocumentColorComputerTarget | string, regex: RegExp): RegExpMatchArray[] {\n\tif (typeof model === 'string') {\n\t\treturn [...model.matchAll(regex)];\n\t} else {\n\t\treturn model.findMatches(regex);\n\t}\n}\n\nfunction computeColors(model: IDocumentColorComputerTarget): IColorInformation[] {\n\tconst result: IColorInformation[] = [];\n\t// Early validation for RGB and HSL\n\tconst initialValidationRegex = /\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.\\%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\n\tconst initialValidationMatches = _findMatches(model, initialValidationRegex);\n\n\t// Potential colors have been found, validate the parameters\n\tif (initialValidationMatches.length > 0) {\n\t\tfor (const initialMatch of initialValidationMatches) {\n\t\t\tconst initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);\n\t\t\tconst colorScheme = initialCaptureGroups[1];\n\t\t\tconst colorParameters = initialCaptureGroups[2];\n\t\t\tif (!colorParameters) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet colorInformation;\n\t\t\tif (colorScheme === 'rgb') {\n\t\t\t\tconst regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n\t\t\t} else if (colorScheme === 'rgba') {\n\t\t\t\tconst regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n\t\t\t} else if (colorScheme === 'hsl') {\n\t\t\t\tconst regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n\t\t\t} else if (colorScheme === 'hsla') {\n\t\t\t\tconst regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n\t\t\t\tcolorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n\t\t\t} else if (colorScheme === '#') {\n\t\t\t\tcolorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);\n\t\t\t}\n\t\t\tif (colorInformation) {\n\t\t\t\tresult.push(colorInformation);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Returns an array of all default document colors in the provided document\n */\nexport function computeDefaultDocumentColors(model: IDocumentColorComputerTarget): IColorInformation[] {\n\tif (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {\n\t\t// Unknown caller!\n\t\treturn [];\n\t}\n\treturn computeColors(model);\n}\n"],
  "mappings": ";;AAIA,SAAS,OAAO,YAAY;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AACvB,SAAS,QAAQ,yBAAyB;AAQ1C,SAAS,oBAAoB,eAAyC;AACrE,QAAM,SAAS,CAAC;AAChB,aAAW,gBAAgB,eAAe;AACzC,UAAM,eAAe,OAAO,YAAY;AACxC,QAAI,gBAAgB,iBAAiB,KAAK,aAAa,QAAQ,OAAO,EAAE,MAAM,IAAI;AACjF,aAAO,KAAK,YAAY;AAAA,IACzB;AAAA,EACD;AACA,SAAO;AACR;AATS;AAWT,SAAS,UAAU,GAAW,GAAW,GAAW,GAAmB;AACtE,SAAO;AAAA,IACN,KAAK,IAAI;AAAA,IACT,MAAM,IAAI;AAAA,IACV,OAAO,IAAI;AAAA,IACX,OAAO;AAAA,EACR;AACD;AAPS;AAST,SAAS,WAAW,OAAqC,OAA6C;AACrG,QAAM,QAAQ,MAAM;AACpB,QAAM,SAAS,MAAM,CAAC,EAAE;AACxB,MAAI,CAAC,OAAO;AACX;AAAA,EACD;AACA,QAAM,gBAAgB,MAAM,WAAW,KAAK;AAC5C,QAAM,QAAgB;AAAA,IACrB,iBAAiB,cAAc;AAAA,IAC/B,aAAa,cAAc;AAAA,IAC3B,eAAe,cAAc;AAAA,IAC7B,WAAW,cAAc,SAAS;AAAA,EACnC;AACA,SAAO;AACR;AAdS;AAgBT,SAAS,yBAAyB,OAA2B,UAAkB;AAC9E,MAAI,CAAC,OAAO;AACX;AAAA,EACD;AACA,QAAM,iBAAiB,MAAM,OAAO,IAAI,SAAS,QAAQ;AACzD,MAAI,CAAC,gBAAgB;AACpB;AAAA,EACD;AACA,SAAO;AAAA,IACN;AAAA,IACA,OAAO,UAAU,eAAe,KAAK,GAAG,eAAe,KAAK,GAAG,eAAe,KAAK,GAAG,eAAe,KAAK,CAAC;AAAA,EAC5G;AACD;AAZS;AAcT,SAAS,yBAAyB,OAA2B,SAA6B,SAAkB;AAC3G,MAAI,CAAC,SAAS,QAAQ,WAAW,GAAG;AACnC;AAAA,EACD;AACA,QAAM,QAAQ,QAAQ,CAAC;AACvB,QAAM,gBAAgB,MAAM,OAAO;AACnC,QAAM,cAAc,oBAAoB,aAAa;AACrD,SAAO;AAAA,IACN;AAAA,IACA,OAAO,UAAU,YAAY,CAAC,GAAG,YAAY,CAAC,GAAG,YAAY,CAAC,GAAG,UAAU,YAAY,CAAC,IAAI,CAAC;AAAA,EAC9F;AACD;AAXS;AAaT,SAAS,yBAAyB,OAA2B,SAA6B,SAAkB;AAC3G,MAAI,CAAC,SAAS,QAAQ,WAAW,GAAG;AACnC;AAAA,EACD;AACA,QAAM,QAAQ,QAAQ,CAAC;AACvB,QAAM,gBAAgB,MAAM,OAAO;AACnC,QAAM,cAAc,oBAAoB,aAAa;AACrD,QAAM,kBAAkB,IAAI,MAAM,IAAI,KAAK,YAAY,CAAC,GAAG,YAAY,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,KAAK,UAAU,YAAY,CAAC,IAAI,CAAC,CAAC;AACpI,SAAO;AAAA,IACN;AAAA,IACA,OAAO,UAAU,gBAAgB,KAAK,GAAG,gBAAgB,KAAK,GAAG,gBAAgB,KAAK,GAAG,gBAAgB,KAAK,CAAC;AAAA,EAChH;AACD;AAZS;AAcT,SAAS,aAAa,OAA8C,OAAmC;AACtG,MAAI,OAAO,UAAU,UAAU;AAC9B,WAAO,CAAC,GAAG,MAAM,SAAS,KAAK,CAAC;AAAA,EACjC,OAAO;AACN,WAAO,MAAM,YAAY,KAAK;AAAA,EAC/B;AACD;AANS;AAQT,SAAS,cAAc,OAA0D;AAChF,QAAM,SAA8B,CAAC;AAErC,QAAM,yBAAyB;AAC/B,QAAM,2BAA2B,aAAa,OAAO,sBAAsB;AAG3E,MAAI,yBAAyB,SAAS,GAAG;AACxC,eAAW,gBAAgB,0BAA0B;AACpD,YAAM,uBAAuB,aAAa,OAAO,kBAAgB,iBAAiB,MAAS;AAC3F,YAAM,cAAc,qBAAqB,CAAC;AAC1C,YAAM,kBAAkB,qBAAqB,CAAC;AAC9C,UAAI,CAAC,iBAAiB;AACrB;AAAA,MACD;AACA,UAAI;AACJ,UAAI,gBAAgB,OAAO;AAC1B,cAAM,kBAAkB;AACxB,2BAAmB,yBAAyB,WAAW,OAAO,YAAY,GAAG,aAAa,iBAAiB,eAAe,GAAG,KAAK;AAAA,MACnI,WAAW,gBAAgB,QAAQ;AAClC,cAAM,kBAAkB;AACxB,2BAAmB,yBAAyB,WAAW,OAAO,YAAY,GAAG,aAAa,iBAAiB,eAAe,GAAG,IAAI;AAAA,MAClI,WAAW,gBAAgB,OAAO;AACjC,cAAM,kBAAkB;AACxB,2BAAmB,yBAAyB,WAAW,OAAO,YAAY,GAAG,aAAa,iBAAiB,eAAe,GAAG,KAAK;AAAA,MACnI,WAAW,gBAAgB,QAAQ;AAClC,cAAM,kBAAkB;AACxB,2BAAmB,yBAAyB,WAAW,OAAO,YAAY,GAAG,aAAa,iBAAiB,eAAe,GAAG,IAAI;AAAA,MAClI,WAAW,gBAAgB,KAAK;AAC/B,2BAAmB,yBAAyB,WAAW,OAAO,YAAY,GAAG,cAAc,eAAe;AAAA,MAC3G;AACA,UAAI,kBAAkB;AACrB,eAAO,KAAK,gBAAgB;AAAA,MAC7B;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR;AArCS;AA0CF,SAAS,6BAA6B,OAA0D;AACtG,MAAI,CAAC,SAAS,OAAO,MAAM,aAAa,cAAc,OAAO,MAAM,eAAe,YAAY;AAE7F,WAAO,CAAC;AAAA,EACT;AACA,SAAO,cAAc,KAAK;AAC3B;AANgB;",
  "names": []
}
