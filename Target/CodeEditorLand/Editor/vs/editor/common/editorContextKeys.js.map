{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/editorContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\n\nexport namespace EditorContextKeys {\n\n\texport const editorSimpleInput = new RawContextKey<boolean>('editorSimpleInput', false, true);\n\t/**\n\t * A context key that is set when the editor's text has focus (cursor is blinking).\n\t * Is false when focus is in simple editor widgets (repl input, scm commit input).\n\t */\n\texport const editorTextFocus = new RawContextKey<boolean>('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n\t/**\n\t * A context key that is set when the editor's text or an editor's widget has focus.\n\t */\n\texport const focus = new RawContextKey<boolean>('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n\n\t/**\n\t * A context key that is set when any editor input has focus (regular editor, repl input...).\n\t */\n\texport const textInputFocus = new RawContextKey<boolean>('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n\n\texport const readOnly = new RawContextKey<boolean>('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read-only\"));\n\texport const inDiffEditor = new RawContextKey<boolean>('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n\texport const isEmbeddedDiffEditor = new RawContextKey<boolean>('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', \"Whether the context is an embedded diff editor\"));\n\texport const multiDiffEditorAllCollapsed = new RawContextKey<boolean>('multiDiffEditorAllCollapsed', undefined, nls.localize('multiDiffEditorAllCollapsed', \"Whether all files in multi diff editor are collapsed\"));\n\texport const hasChanges = new RawContextKey<boolean>('diffEditorHasChanges', false, nls.localize('diffEditorHasChanges', \"Whether the diff editor has changes\"));\n\texport const comparingMovedCode = new RawContextKey<boolean>('comparingMovedCode', false, nls.localize('comparingMovedCode', \"Whether a moved code block is selected for comparison\"));\n\texport const accessibleDiffViewerVisible = new RawContextKey<boolean>('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', \"Whether the accessible diff viewer is visible\"));\n\texport const diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey<boolean>('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', \"Whether the diff editor render side by side inline breakpoint is reached\"));\n\texport const diffEditorInlineMode = new RawContextKey<boolean>('diffEditorInlineMode', false, nls.localize('diffEditorInlineMode', \"Whether inline mode is active\"));\n\n\texport const diffEditorOriginalWritable = new RawContextKey<boolean>('diffEditorOriginalWritable', false, nls.localize('diffEditorOriginalWritable', \"Whether modified is writable in the diff editor\"));\n\texport const diffEditorModifiedWritable = new RawContextKey<boolean>('diffEditorModifiedWritable', false, nls.localize('diffEditorModifiedWritable', \"Whether modified is writable in the diff editor\"));\n\texport const diffEditorOriginalUri = new RawContextKey<string>('diffEditorOriginalUri', '', nls.localize('diffEditorOriginalUri', \"The uri of the original document\"));\n\texport const diffEditorModifiedUri = new RawContextKey<string>('diffEditorModifiedUri', '', nls.localize('diffEditorModifiedUri', \"The uri of the modified document\"));\n\n\texport const columnSelection = new RawContextKey<boolean>('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n\texport const writable = readOnly.toNegated();\n\texport const hasNonEmptySelection = new RawContextKey<boolean>('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n\texport const hasOnlyEmptySelection = hasNonEmptySelection.toNegated();\n\texport const hasMultipleSelections = new RawContextKey<boolean>('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n\texport const hasSingleSelection = hasMultipleSelections.toNegated();\n\texport const tabMovesFocus = new RawContextKey<boolean>('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n\texport const tabDoesNotMoveFocus = tabMovesFocus.toNegated();\n\texport const isInEmbeddedEditor = new RawContextKey<boolean>('isInEmbeddedEditor', false, true);\n\texport const canUndo = new RawContextKey<boolean>('canUndo', false, true);\n\texport const canRedo = new RawContextKey<boolean>('canRedo', false, true);\n\n\texport const hoverVisible = new RawContextKey<boolean>('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n\texport const hoverFocused = new RawContextKey<boolean>('editorHoverFocused', false, nls.localize('editorHoverFocused', \"Whether the editor hover is focused\"));\n\n\texport const stickyScrollFocused = new RawContextKey<boolean>('stickyScrollFocused', false, nls.localize('stickyScrollFocused', \"Whether the sticky scroll is focused\"));\n\texport const stickyScrollVisible = new RawContextKey<boolean>('stickyScrollVisible', false, nls.localize('stickyScrollVisible', \"Whether the sticky scroll is visible\"));\n\n\texport const standaloneColorPickerVisible = new RawContextKey<boolean>('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', \"Whether the standalone color picker is visible\"));\n\texport const standaloneColorPickerFocused = new RawContextKey<boolean>('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', \"Whether the standalone color picker is focused\"));\n\t/**\n\t * A context key that is set when an editor is part of a larger editor, like notebooks or\n\t * (future) a diff editor\n\t */\n\texport const inCompositeEditor = new RawContextKey<boolean>('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n\texport const notInCompositeEditor = inCompositeEditor.toNegated();\n\n\t// -- mode context keys\n\texport const languageId = new RawContextKey<string>('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n\texport const hasCompletionItemProvider = new RawContextKey<boolean>('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n\texport const hasCodeActionsProvider = new RawContextKey<boolean>('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n\texport const hasCodeLensProvider = new RawContextKey<boolean>('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n\texport const hasDefinitionProvider = new RawContextKey<boolean>('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n\texport const hasDeclarationProvider = new RawContextKey<boolean>('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n\texport const hasImplementationProvider = new RawContextKey<boolean>('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n\texport const hasTypeDefinitionProvider = new RawContextKey<boolean>('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n\texport const hasHoverProvider = new RawContextKey<boolean>('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n\texport const hasDocumentHighlightProvider = new RawContextKey<boolean>('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n\texport const hasDocumentSymbolProvider = new RawContextKey<boolean>('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n\texport const hasReferenceProvider = new RawContextKey<boolean>('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n\texport const hasRenameProvider = new RawContextKey<boolean>('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n\texport const hasSignatureHelpProvider = new RawContextKey<boolean>('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n\texport const hasInlayHintsProvider = new RawContextKey<boolean>('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n\n\t// -- mode context keys: formatting\n\texport const hasDocumentFormattingProvider = new RawContextKey<boolean>('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n\texport const hasDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n\texport const hasMultipleDocumentFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n\texport const hasMultipleDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n\n}\n"],
  "mappings": "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",
  "names": ["EditorContextKeys"]
}
