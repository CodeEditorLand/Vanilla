{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/languageSelector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRelativePattern, match as matchGlobPattern } from '../../base/common/glob.js';\nimport { URI } from '../../base/common/uri.js';\nimport { normalize } from '../../base/common/path.js';\n\nexport interface LanguageFilter {\n\treadonly language?: string;\n\treadonly scheme?: string;\n\treadonly pattern?: string | IRelativePattern;\n\treadonly notebookType?: string;\n\t/**\n\t * This provider is implemented in the UI thread.\n\t */\n\treadonly hasAccessToAllModels?: boolean;\n\treadonly exclusive?: boolean;\n\n\t/**\n\t * This provider comes from a builtin extension.\n\t */\n\treadonly isBuiltin?: boolean;\n}\n\nexport type LanguageSelector = string | LanguageFilter | ReadonlyArray<string | LanguageFilter>;\n\nexport function score(selector: LanguageSelector | undefined, candidateUri: URI, candidateLanguage: string, candidateIsSynchronized: boolean, candidateNotebookUri: URI | undefined, candidateNotebookType: string | undefined): number {\n\n\tif (Array.isArray(selector)) {\n\t\t// array -> take max individual value\n\t\tlet ret = 0;\n\t\tfor (const filter of selector) {\n\t\t\tconst value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n\t\t\tif (value === 10) {\n\t\t\t\treturn value; // already at the highest\n\t\t\t}\n\t\t\tif (value > ret) {\n\t\t\t\tret = value;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\n\t} else if (typeof selector === 'string') {\n\n\t\tif (!candidateIsSynchronized) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// short-hand notion, desugars to\n\t\t// 'fooLang' -> { language: 'fooLang'}\n\t\t// '*' -> { language: '*' }\n\t\tif (selector === '*') {\n\t\t\treturn 5;\n\t\t} else if (selector === candidateLanguage) {\n\t\t\treturn 10;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t} else if (selector) {\n\t\t// filter -> select accordingly, use defaults for scheme\n\t\tconst { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector as LanguageFilter; // TODO: microsoft/TypeScript#42768\n\n\t\tif (!candidateIsSynchronized && !hasAccessToAllModels) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// selector targets a notebook -> use the notebook uri instead\n\t\t// of the \"normal\" document uri.\n\t\tif (notebookType && candidateNotebookUri) {\n\t\t\tcandidateUri = candidateNotebookUri;\n\t\t}\n\n\t\tlet ret = 0;\n\n\t\tif (scheme) {\n\t\t\tif (scheme === candidateUri.scheme) {\n\t\t\t\tret = 10;\n\t\t\t} else if (scheme === '*') {\n\t\t\t\tret = 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (language) {\n\t\t\tif (language === candidateLanguage) {\n\t\t\t\tret = 10;\n\t\t\t} else if (language === '*') {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (notebookType) {\n\t\t\tif (notebookType === candidateNotebookType) {\n\t\t\t\tret = 10;\n\t\t\t} else if (notebookType === '*' && candidateNotebookType !== undefined) {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tlet normalizedPattern: string | IRelativePattern;\n\t\t\tif (typeof pattern === 'string') {\n\t\t\t\tnormalizedPattern = pattern;\n\t\t\t} else {\n\t\t\t\t// Since this pattern has a `base` property, we need\n\t\t\t\t// to normalize this path first before passing it on\n\t\t\t\t// because we will compare it against `Uri.fsPath`\n\t\t\t\t// which uses platform specific separators.\n\t\t\t\t// Refs: https://github.com/microsoft/vscode/issues/99938\n\t\t\t\tnormalizedPattern = { ...pattern, base: normalize(pattern.base) };\n\t\t\t}\n\n\t\t\tif (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n\t\t\t\tret = 10;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n\nexport function targetsNotebooks(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t} else if (Array.isArray(selector)) {\n\t\treturn selector.some(targetsNotebooks);\n\t} else {\n\t\treturn !!(<LanguageFilter>selector).notebookType;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB,SAAS,wBAAwB;AAC5D,SAAS,WAAW;AACpB,SAAS,iBAAiB;AAqBnB,SAAS,MAAM,UAAwC,cAAmB,mBAA2B,yBAAkC,sBAAuC,uBAAmD;AAEvO,MAAI,MAAM,QAAQ,QAAQ,GAAG;AAE5B,QAAI,MAAM;AACV,eAAW,UAAU,UAAU;AAC9B,YAAM,QAAQ,MAAM,QAAQ,cAAc,mBAAmB,yBAAyB,sBAAsB,qBAAqB;AACjI,UAAI,UAAU,IAAI;AACjB,eAAO;AAAA,MACR;AACA,UAAI,QAAQ,KAAK;AAChB,cAAM;AAAA,MACP;AAAA,IACD;AACA,WAAO;AAAA,EAER,WAAW,OAAO,aAAa,UAAU;AAExC,QAAI,CAAC,yBAAyB;AAC7B,aAAO;AAAA,IACR;AAKA,QAAI,aAAa,KAAK;AACrB,aAAO;AAAA,IACR,WAAW,aAAa,mBAAmB;AAC1C,aAAO;AAAA,IACR,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EAED,WAAW,UAAU;AAEpB,UAAM,EAAE,UAAU,SAAS,QAAQ,sBAAsB,aAAa,IAAI;AAE1E,QAAI,CAAC,2BAA2B,CAAC,sBAAsB;AACtD,aAAO;AAAA,IACR;AAIA,QAAI,gBAAgB,sBAAsB;AACzC,qBAAe;AAAA,IAChB;AAEA,QAAI,MAAM;AAEV,QAAI,QAAQ;AACX,UAAI,WAAW,aAAa,QAAQ;AACnC,cAAM;AAAA,MACP,WAAW,WAAW,KAAK;AAC1B,cAAM;AAAA,MACP,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,UAAU;AACb,UAAI,aAAa,mBAAmB;AACnC,cAAM;AAAA,MACP,WAAW,aAAa,KAAK;AAC5B,cAAM,KAAK,IAAI,KAAK,CAAC;AAAA,MACtB,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,cAAc;AACjB,UAAI,iBAAiB,uBAAuB;AAC3C,cAAM;AAAA,MACP,WAAW,iBAAiB,OAAO,0BAA0B,QAAW;AACvE,cAAM,KAAK,IAAI,KAAK,CAAC;AAAA,MACtB,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,SAAS;AACZ,UAAI;AACJ,UAAI,OAAO,YAAY,UAAU;AAChC,4BAAoB;AAAA,MACrB,OAAO;AAMN,4BAAoB,EAAE,GAAG,SAAS,MAAM,UAAU,QAAQ,IAAI,EAAE;AAAA,MACjE;AAEA,UAAI,sBAAsB,aAAa,UAAU,iBAAiB,mBAAmB,aAAa,MAAM,GAAG;AAC1G,cAAM;AAAA,MACP,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EAER,OAAO;AACN,WAAO;AAAA,EACR;AACD;AAxGgB;AA2GT,SAAS,iBAAiB,UAAqC;AACrE,MAAI,OAAO,aAAa,UAAU;AACjC,WAAO;AAAA,EACR,WAAW,MAAM,QAAQ,QAAQ,GAAG;AACnC,WAAO,SAAS,KAAK,gBAAgB;AAAA,EACtC,OAAO;AACN,WAAO,CAAC,CAAkB,SAAU;AAAA,EACrC;AACD;AARgB;",
  "names": []
}
