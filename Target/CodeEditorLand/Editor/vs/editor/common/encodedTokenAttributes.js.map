{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/encodedTokenAttributes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Open ended enum at runtime\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4,\n\tStrikethrough = 8,\n}\n\n/**\n * Open ended enum at runtime\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type.\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 3\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (2 bits)\n *  - B = Balanced bracket (1 bit)\n *  - F = FontStyle (4 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n *\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK /*            */ = 0b00000000000000000000000011111111,\n\tTOKEN_TYPE_MASK /*            */ = 0b00000000000000000000001100000000,\n\tBALANCED_BRACKETS_MASK /*     */ = 0b00000000000000000000010000000000,\n\tFONT_STYLE_MASK /*            */ = 0b00000000000000000111100000000000,\n\tFOREGROUND_MASK /*            */ = 0b00000000111111111000000000000000,\n\tBACKGROUND_MASK /*            */ = 0b11111111000000000000000000000000,\n\n\tITALIC_MASK /*                */ = 0b00000000000000000000100000000000,\n\tBOLD_MASK /*                  */ = 0b00000000000000000001000000000000,\n\tUNDERLINE_MASK /*             */ = 0b00000000000000000010000000000000,\n\tSTRIKETHROUGH_MASK /*         */ = 0b00000000000000000100000000000000,\n\n\t// Semantic tokens cannot set the language id, so we can\n\t// use the first 8 bits for control purposes\n\tSEMANTIC_USE_ITALIC /*        */ = 0b00000000000000000000000000000001,\n\tSEMANTIC_USE_BOLD /*          */ = 0b00000000000000000000000000000010,\n\tSEMANTIC_USE_UNDERLINE  /*    */ = 0b00000000000000000000000000000100,\n\tSEMANTIC_USE_STRIKETHROUGH /* */ = 0b00000000000000000000000000001000,\n\tSEMANTIC_USE_FOREGROUND /*    */ = 0b00000000000000000000000000010000,\n\tSEMANTIC_USE_BACKGROUND /*    */ = 0b00000000000000000000000000100000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tBALANCED_BRACKETS_OFFSET = 10,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 15,\n\tBACKGROUND_OFFSET = 24\n}\n\n/**\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static containsBalancedBrackets(metadata: number): boolean {\n\t\treturn (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\tclassName += ' mtks';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tlet textDecoration = '';\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\ttextDecoration += ' underline';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\ttextDecoration += ' line-through';\n\t\t}\n\t\tif (textDecoration) {\n\t\t\tresult += `text-decoration:${textDecoration};`;\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static getPresentationFromMetadata(metadata: number): ITokenPresentation {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\treturn {\n\t\t\tforeground: foreground,\n\t\t\titalic: Boolean(fontStyle & FontStyle.Italic),\n\t\t\tbold: Boolean(fontStyle & FontStyle.Bold),\n\t\t\tunderline: Boolean(fontStyle & FontStyle.Underline),\n\t\t\tstrikethrough: Boolean(fontStyle & FontStyle.Strikethrough),\n\t\t};\n\t}\n}\n\n/**\n */\nexport interface ITokenPresentation {\n\tforeground: ColorId;\n\titalic: boolean;\n\tbold: boolean;\n\tunderline: boolean;\n\tstrikethrough: boolean;\n}\n"],
  "mappings": "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",
  "names": ["LanguageId", "FontStyle", "ColorId", "StandardTokenType", "MetadataConsts"]
}
