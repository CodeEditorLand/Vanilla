{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/textModelEvents.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IRange } from \"./core/range.js\";\nimport type { Selection } from \"./core/selection.js\";\nimport type { IModelDecoration, InjectedTextOptions } from \"./model.js\";\n\n/**\n * An event describing that the current language associated with a model has changed.\n */\nexport interface IModelLanguageChangedEvent {\n\t/**\n\t * Previous language\n\t */\n\treadonly oldLanguage: string;\n\t/**\n\t * New language\n\t */\n\treadonly newLanguage: string;\n\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\treadonly source: string;\n}\n\n/**\n * An event describing that the language configuration associated with a model has changed.\n */\nexport type IModelLanguageConfigurationChangedEvent = {};\n\nexport interface IModelContentChange {\n\t/**\n\t * The range that got replaced.\n\t */\n\treadonly range: IRange;\n\t/**\n\t * The offset of the range that got replaced.\n\t */\n\treadonly rangeOffset: number;\n\t/**\n\t * The length of the range that got replaced.\n\t */\n\treadonly rangeLength: number;\n\t/**\n\t * The new text for the range.\n\t */\n\treadonly text: string;\n}\n\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent {\n\t/**\n\t * The changes are ordered from the end of the document to the beginning, so they should be safe to apply in sequence.\n\t */\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n\n\t/**\n\t * Flag that indicates that this event describes an eol change.\n\t */\n\treadonly isEolChange: boolean;\n}\n\n/**\n * An event describing that model decorations have changed.\n */\nexport interface IModelDecorationsChangedEvent {\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n}\n\n/**\n * An event describing that some ranges of lines have been tokenized (their tokens have changed).\n * @internal\n */\nexport interface IModelTokensChangedEvent {\n\treadonly semanticTokensApplied: boolean;\n\treadonly ranges: {\n\t\t/**\n\t\t * The start of the range (inclusive)\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * The end of the range (inclusive)\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n}\n\nexport interface IModelOptionsChangedEvent {\n\treadonly tabSize: boolean;\n\treadonly indentSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly trimAutoWhitespace: boolean;\n}\n\n/**\n * @internal\n */\nexport enum RawContentChangedType {\n\tFlush = 1,\n\tLineChanged = 2,\n\tLinesDeleted = 3,\n\tLinesInserted = 4,\n\tEOLChanged = 5,\n}\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n\tpublic readonly changeType = RawContentChangedType.Flush;\n}\n\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n\tpublic static applyInjectedText(\n\t\tlineText: string,\n\t\tinjectedTexts: LineInjectedText[] | null,\n\t): string {\n\t\tif (!injectedTexts || injectedTexts.length === 0) {\n\t\t\treturn lineText;\n\t\t}\n\t\tlet result = \"\";\n\t\tlet lastOriginalOffset = 0;\n\t\tfor (const injectedText of injectedTexts) {\n\t\t\tresult += lineText.substring(\n\t\t\t\tlastOriginalOffset,\n\t\t\t\tinjectedText.column - 1,\n\t\t\t);\n\t\t\tlastOriginalOffset = injectedText.column - 1;\n\t\t\tresult += injectedText.options.content;\n\t\t}\n\t\tresult += lineText.substring(lastOriginalOffset);\n\t\treturn result;\n\t}\n\n\tpublic static fromDecorations(\n\t\tdecorations: IModelDecoration[],\n\t): LineInjectedText[] {\n\t\tconst result: LineInjectedText[] = [];\n\t\tfor (const decoration of decorations) {\n\t\t\tif (\n\t\t\t\tdecoration.options.before &&\n\t\t\t\tdecoration.options.before.content.length > 0\n\t\t\t) {\n\t\t\t\tresult.push(\n\t\t\t\t\tnew LineInjectedText(\n\t\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\t\tdecoration.range.startLineNumber,\n\t\t\t\t\t\tdecoration.range.startColumn,\n\t\t\t\t\t\tdecoration.options.before,\n\t\t\t\t\t\t0,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tdecoration.options.after &&\n\t\t\t\tdecoration.options.after.content.length > 0\n\t\t\t) {\n\t\t\t\tresult.push(\n\t\t\t\t\tnew LineInjectedText(\n\t\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\t\tdecoration.range.endLineNumber,\n\t\t\t\t\t\tdecoration.range.endColumn,\n\t\t\t\t\t\tdecoration.options.after,\n\t\t\t\t\t\t1,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tresult.sort((a, b) => {\n\t\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\t\tif (a.column === b.column) {\n\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t}\n\t\t\t\treturn a.column - b.column;\n\t\t\t}\n\t\t\treturn a.lineNumber - b.lineNumber;\n\t\t});\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly column: number,\n\t\tpublic readonly options: InjectedTextOptions,\n\t\tpublic readonly order: number,\n\t) {}\n\n\tpublic withText(text: string): LineInjectedText {\n\t\treturn new LineInjectedText(\n\t\t\tthis.ownerId,\n\t\t\tthis.lineNumber,\n\t\t\tthis.column,\n\t\t\t{ ...this.options, content: text },\n\t\t\tthis.order,\n\t\t);\n\t}\n}\n\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n\tpublic readonly changeType = RawContentChangedType.LineChanged;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The new value of the line.\n\t */\n\tpublic readonly detail: string;\n\t/**\n\t * The injected text on the line.\n\t */\n\tpublic readonly injectedText: LineInjectedText[] | null;\n\n\tconstructor(\n\t\tlineNumber: number,\n\t\tdetail: string,\n\t\tinjectedText: LineInjectedText[] | null,\n\t) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.detail = detail;\n\t\tthis.injectedText = injectedText;\n\t}\n}\n\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n\tpublic readonly changeType = RawContentChangedType.LinesDeleted;\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n\tpublic readonly changeType = RawContentChangedType.LinesInserted;\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\t/**\n\t * The text that was inserted\n\t */\n\tpublic readonly detail: string[];\n\t/**\n\t * The injected texts for every inserted line.\n\t */\n\tpublic readonly injectedTexts: (LineInjectedText[] | null)[];\n\n\tconstructor(\n\t\tfromLineNumber: number,\n\t\ttoLineNumber: number,\n\t\tdetail: string[],\n\t\tinjectedTexts: (LineInjectedText[] | null)[],\n\t) {\n\t\tthis.injectedTexts = injectedTexts;\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t\tthis.detail = detail;\n\t}\n}\n\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n\tpublic readonly changeType = RawContentChangedType.EOLChanged;\n}\n\n/**\n * @internal\n */\nexport type ModelRawChange =\n\t| ModelRawFlush\n\t| ModelRawLineChanged\n\t| ModelRawLinesDeleted\n\t| ModelRawLinesInserted\n\t| ModelRawEOLChanged;\n\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n\tpublic readonly changes: ModelRawChange[];\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tpublic readonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tpublic readonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tpublic readonly isRedoing: boolean;\n\n\tpublic resultingSelection: Selection[] | null;\n\n\tconstructor(\n\t\tchanges: ModelRawChange[],\n\t\tversionId: number,\n\t\tisUndoing: boolean,\n\t\tisRedoing: boolean,\n\t) {\n\t\tthis.changes = changes;\n\t\tthis.versionId = versionId;\n\t\tthis.isUndoing = isUndoing;\n\t\tthis.isRedoing = isRedoing;\n\t\tthis.resultingSelection = null;\n\t}\n\n\tpublic containsEvent(type: RawContentChangedType): boolean {\n\t\tfor (let i = 0, len = this.changes.length; i < len; i++) {\n\t\t\tconst change = this.changes[i];\n\t\t\tif (change.changeType === type) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static merge(\n\t\ta: ModelRawContentChangedEvent,\n\t\tb: ModelRawContentChangedEvent,\n\t): ModelRawContentChangedEvent {\n\t\tconst changes = ([] as ModelRawChange[])\n\t\t\t.concat(a.changes)\n\t\t\t.concat(b.changes);\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = a.isUndoing || b.isUndoing;\n\t\tconst isRedoing = a.isRedoing || b.isRedoing;\n\t\treturn new ModelRawContentChangedEvent(\n\t\t\tchanges,\n\t\t\tversionId,\n\t\t\tisUndoing,\n\t\t\tisRedoing,\n\t\t);\n\t}\n}\n\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n\tpublic readonly changes: ModelRawLineChanged[];\n\n\tconstructor(changes: ModelRawLineChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n\tconstructor(\n\t\tpublic readonly rawContentChangedEvent: ModelRawContentChangedEvent,\n\t\tpublic readonly contentChangedEvent: IModelContentChangedEvent,\n\t) {}\n\n\tpublic merge(\n\t\tother: InternalModelContentChangeEvent,\n\t): InternalModelContentChangeEvent {\n\t\tconst rawContentChangedEvent = ModelRawContentChangedEvent.merge(\n\t\t\tthis.rawContentChangedEvent,\n\t\t\tother.rawContentChangedEvent,\n\t\t);\n\t\tconst contentChangedEvent =\n\t\t\tInternalModelContentChangeEvent._mergeChangeEvents(\n\t\t\t\tthis.contentChangedEvent,\n\t\t\t\tother.contentChangedEvent,\n\t\t\t);\n\t\treturn new InternalModelContentChangeEvent(\n\t\t\trawContentChangedEvent,\n\t\t\tcontentChangedEvent,\n\t\t);\n\t}\n\n\tprivate static _mergeChangeEvents(\n\t\ta: IModelContentChangedEvent,\n\t\tb: IModelContentChangedEvent,\n\t): IModelContentChangedEvent {\n\t\tconst changes = ([] as IModelContentChange[])\n\t\t\t.concat(a.changes)\n\t\t\t.concat(b.changes);\n\t\tconst eol = b.eol;\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = a.isUndoing || b.isUndoing;\n\t\tconst isRedoing = a.isRedoing || b.isRedoing;\n\t\tconst isFlush = a.isFlush || b.isFlush;\n\t\tconst isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n\t\treturn {\n\t\t\tchanges: changes,\n\t\t\teol: eol,\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: versionId,\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["RawContentChangedType"]
}
