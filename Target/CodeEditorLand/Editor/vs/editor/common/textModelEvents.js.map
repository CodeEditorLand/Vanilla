{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/textModelEvents.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { IModelDecoration, InjectedTextOptions } from './model.js';\n\n/**\n * An event describing that the current language associated with a model has changed.\n */\nexport interface IModelLanguageChangedEvent {\n\t/**\n\t * Previous language\n\t */\n\treadonly oldLanguage: string;\n\t/**\n\t * New language\n\t */\n\treadonly newLanguage: string;\n\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\treadonly source: string;\n}\n\n/**\n * An event describing that the language configuration associated with a model has changed.\n */\nexport interface IModelLanguageConfigurationChangedEvent {\n}\n\nexport interface IModelContentChange {\n\t/**\n\t * The range that got replaced.\n\t */\n\treadonly range: IRange;\n\t/**\n\t * The offset of the range that got replaced.\n\t */\n\treadonly rangeOffset: number;\n\t/**\n\t * The length of the range that got replaced.\n\t */\n\treadonly rangeLength: number;\n\t/**\n\t * The new text for the range.\n\t */\n\treadonly text: string;\n}\n\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent {\n\t/**\n\t * The changes are ordered from the end of the document to the beginning, so they should be safe to apply in sequence.\n\t */\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n\n\t/**\n\t * Flag that indicates that this event describes an eol change.\n\t */\n\treadonly isEolChange: boolean;\n}\n\n/**\n * An event describing that model decorations have changed.\n */\nexport interface IModelDecorationsChangedEvent {\n\treadonly affectsMinimap: boolean;\n\treadonly affectsOverviewRuler: boolean;\n\treadonly affectsGlyphMargin: boolean;\n\treadonly affectsLineNumber: boolean;\n}\n\n/**\n * An event describing that some ranges of lines have been tokenized (their tokens have changed).\n * @internal\n */\nexport interface IModelTokensChangedEvent {\n\treadonly semanticTokensApplied: boolean;\n\treadonly ranges: {\n\t\t/**\n\t\t * The start of the range (inclusive)\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * The end of the range (inclusive)\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n}\n\nexport interface IModelOptionsChangedEvent {\n\treadonly tabSize: boolean;\n\treadonly indentSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly trimAutoWhitespace: boolean;\n}\n\n/**\n * @internal\n */\nexport const enum RawContentChangedType {\n\tFlush = 1,\n\tLineChanged = 2,\n\tLinesDeleted = 3,\n\tLinesInserted = 4,\n\tEOLChanged = 5\n}\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n\tpublic readonly changeType = RawContentChangedType.Flush;\n}\n\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n\tpublic static applyInjectedText(lineText: string, injectedTexts: LineInjectedText[] | null): string {\n\t\tif (!injectedTexts || injectedTexts.length === 0) {\n\t\t\treturn lineText;\n\t\t}\n\t\tlet result = '';\n\t\tlet lastOriginalOffset = 0;\n\t\tfor (const injectedText of injectedTexts) {\n\t\t\tresult += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n\t\t\tlastOriginalOffset = injectedText.column - 1;\n\t\t\tresult += injectedText.options.content;\n\t\t}\n\t\tresult += lineText.substring(lastOriginalOffset);\n\t\treturn result;\n\t}\n\n\tpublic static fromDecorations(decorations: IModelDecoration[]): LineInjectedText[] {\n\t\tconst result: LineInjectedText[] = [];\n\t\tfor (const decoration of decorations) {\n\t\t\tif (decoration.options.before && decoration.options.before.content.length > 0) {\n\t\t\t\tresult.push(new LineInjectedText(\n\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\tdecoration.range.startLineNumber,\n\t\t\t\t\tdecoration.range.startColumn,\n\t\t\t\t\tdecoration.options.before,\n\t\t\t\t\t0,\n\t\t\t\t));\n\t\t\t}\n\t\t\tif (decoration.options.after && decoration.options.after.content.length > 0) {\n\t\t\t\tresult.push(new LineInjectedText(\n\t\t\t\t\tdecoration.ownerId,\n\t\t\t\t\tdecoration.range.endLineNumber,\n\t\t\t\t\tdecoration.range.endColumn,\n\t\t\t\t\tdecoration.options.after,\n\t\t\t\t\t1,\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t\tresult.sort((a, b) => {\n\t\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\t\tif (a.column === b.column) {\n\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t}\n\t\t\t\treturn a.column - b.column;\n\t\t\t}\n\t\t\treturn a.lineNumber - b.lineNumber;\n\t\t});\n\t\treturn result;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly column: number,\n\t\tpublic readonly options: InjectedTextOptions,\n\t\tpublic readonly order: number\n\t) { }\n\n\tpublic withText(text: string): LineInjectedText {\n\t\treturn new LineInjectedText(this.ownerId, this.lineNumber, this.column, { ...this.options, content: text }, this.order);\n\t}\n}\n\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n\tpublic readonly changeType = RawContentChangedType.LineChanged;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The new value of the line.\n\t */\n\tpublic readonly detail: string;\n\t/**\n\t * The injected text on the line.\n\t */\n\tpublic readonly injectedText: LineInjectedText[] | null;\n\n\tconstructor(lineNumber: number, detail: string, injectedText: LineInjectedText[] | null) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.detail = detail;\n\t\tthis.injectedText = injectedText;\n\t}\n}\n\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n\tpublic readonly changeType = RawContentChangedType.LinesDeleted;\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n\tpublic readonly changeType = RawContentChangedType.LinesInserted;\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\t/**\n\t * The text that was inserted\n\t */\n\tpublic readonly detail: string[];\n\t/**\n\t * The injected texts for every inserted line.\n\t */\n\tpublic readonly injectedTexts: (LineInjectedText[] | null)[];\n\n\tconstructor(fromLineNumber: number, toLineNumber: number, detail: string[], injectedTexts: (LineInjectedText[] | null)[]) {\n\t\tthis.injectedTexts = injectedTexts;\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t\tthis.detail = detail;\n\t}\n}\n\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n\tpublic readonly changeType = RawContentChangedType.EOLChanged;\n}\n\n/**\n * @internal\n */\nexport type ModelRawChange = ModelRawFlush | ModelRawLineChanged | ModelRawLinesDeleted | ModelRawLinesInserted | ModelRawEOLChanged;\n\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n\n\tpublic readonly changes: ModelRawChange[];\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tpublic readonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tpublic readonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tpublic readonly isRedoing: boolean;\n\n\tpublic resultingSelection: Selection[] | null;\n\n\tconstructor(changes: ModelRawChange[], versionId: number, isUndoing: boolean, isRedoing: boolean) {\n\t\tthis.changes = changes;\n\t\tthis.versionId = versionId;\n\t\tthis.isUndoing = isUndoing;\n\t\tthis.isRedoing = isRedoing;\n\t\tthis.resultingSelection = null;\n\t}\n\n\tpublic containsEvent(type: RawContentChangedType): boolean {\n\t\tfor (let i = 0, len = this.changes.length; i < len; i++) {\n\t\t\tconst change = this.changes[i];\n\t\t\tif (change.changeType === type) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static merge(a: ModelRawContentChangedEvent, b: ModelRawContentChangedEvent): ModelRawContentChangedEvent {\n\t\tconst changes = ([] as ModelRawChange[]).concat(a.changes).concat(b.changes);\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\treturn new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n\t}\n}\n\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n\n\tpublic readonly changes: ModelRawLineChanged[];\n\n\tconstructor(changes: ModelRawLineChanged[]) {\n\t\tthis.changes = changes;\n\t}\n}\n\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n\tconstructor(\n\t\tpublic readonly rawContentChangedEvent: ModelRawContentChangedEvent,\n\t\tpublic readonly contentChangedEvent: IModelContentChangedEvent,\n\t) { }\n\n\tpublic merge(other: InternalModelContentChangeEvent): InternalModelContentChangeEvent {\n\t\tconst rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n\t\tconst contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n\t\treturn new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n\t}\n\n\tprivate static _mergeChangeEvents(a: IModelContentChangedEvent, b: IModelContentChangedEvent): IModelContentChangedEvent {\n\t\tconst changes = ([] as IModelContentChange[]).concat(a.changes).concat(b.changes);\n\t\tconst eol = b.eol;\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\tconst isFlush = (a.isFlush || b.isFlush);\n\t\tconst isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n\t\treturn {\n\t\t\tchanges: changes,\n\t\t\teol: eol,\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: versionId,\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["RawContentChangedType"]
}
