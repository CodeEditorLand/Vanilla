{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/tokenizationRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Color } from \"../../base/common/color.js\";\nimport { Emitter, type Event } from \"../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../base/common/lifecycle.js\";\nimport { ColorId } from \"./encodedTokenAttributes.js\";\nimport type {\n\tILazyTokenizationSupport,\n\tITokenizationRegistry,\n\tITokenizationSupportChangedEvent,\n} from \"./languages.js\";\n\nexport class TokenizationRegistry<TSupport>\n\timplements ITokenizationRegistry<TSupport>\n{\n\tprivate readonly _tokenizationSupports = new Map<string, TSupport>();\n\tprivate readonly _factories = new Map<\n\t\tstring,\n\t\tTokenizationSupportFactoryData<TSupport>\n\t>();\n\n\tprivate readonly _onDidChange =\n\t\tnew Emitter<ITokenizationSupportChangedEvent>();\n\tpublic readonly onDidChange: Event<ITokenizationSupportChangedEvent> =\n\t\tthis._onDidChange.event;\n\n\tprivate _colorMap: Color[] | null;\n\n\tconstructor() {\n\t\tthis._colorMap = null;\n\t}\n\n\tpublic handleChange(languageIds: string[]): void {\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: languageIds,\n\t\t\tchangedColorMap: false,\n\t\t});\n\t}\n\n\tpublic register(languageId: string, support: TSupport): IDisposable {\n\t\tthis._tokenizationSupports.set(languageId, support);\n\t\tthis.handleChange([languageId]);\n\t\treturn toDisposable(() => {\n\t\t\tif (this._tokenizationSupports.get(languageId) !== support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._tokenizationSupports.delete(languageId);\n\t\t\tthis.handleChange([languageId]);\n\t\t});\n\t}\n\n\tpublic get(languageId: string): TSupport | null {\n\t\treturn this._tokenizationSupports.get(languageId) || null;\n\t}\n\n\tpublic registerFactory(\n\t\tlanguageId: string,\n\t\tfactory: ILazyTokenizationSupport<TSupport>,\n\t): IDisposable {\n\t\tthis._factories.get(languageId)?.dispose();\n\t\tconst myData = new TokenizationSupportFactoryData(\n\t\t\tthis,\n\t\t\tlanguageId,\n\t\t\tfactory,\n\t\t);\n\t\tthis._factories.set(languageId, myData);\n\t\treturn toDisposable(() => {\n\t\t\tconst v = this._factories.get(languageId);\n\t\t\tif (!v || v !== myData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._factories.delete(languageId);\n\t\t\tv.dispose();\n\t\t});\n\t}\n\n\tpublic async getOrCreate(languageId: string): Promise<TSupport | null> {\n\t\t// check first if the support is already set\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn tokenizationSupport;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\t// no factory or factory.resolve already finished\n\t\t\treturn null;\n\t\t}\n\n\t\tawait factory.resolve();\n\n\t\treturn this.get(languageId);\n\t}\n\n\tpublic isResolved(languageId: string): boolean {\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic setColorMap(colorMap: Color[]): void {\n\t\tthis._colorMap = colorMap;\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: Array.from(this._tokenizationSupports.keys()),\n\t\t\tchangedColorMap: true,\n\t\t});\n\t}\n\n\tpublic getColorMap(): Color[] | null {\n\t\treturn this._colorMap;\n\t}\n\n\tpublic getDefaultBackground(): Color | null {\n\t\tif (\n\t\t\tthis._colorMap &&\n\t\t\tthis._colorMap.length > ColorId.DefaultBackground\n\t\t) {\n\t\t\treturn this._colorMap[ColorId.DefaultBackground];\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass TokenizationSupportFactoryData<TSupport> extends Disposable {\n\tprivate _isDisposed = false;\n\tprivate _resolvePromise: Promise<void> | null = null;\n\tprivate _isResolved = false;\n\n\tpublic get isResolved(): boolean {\n\t\treturn this._isResolved;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: TokenizationRegistry<TSupport>,\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _factory: ILazyTokenizationSupport<TSupport>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic async resolve(): Promise<void> {\n\t\tif (!this._resolvePromise) {\n\t\t\tthis._resolvePromise = this._create();\n\t\t}\n\t\treturn this._resolvePromise;\n\t}\n\n\tprivate async _create(): Promise<void> {\n\t\tconst value = await this._factory.tokenizationSupport;\n\t\tthis._isResolved = true;\n\t\tif (value && !this._isDisposed) {\n\t\t\tthis._register(this._registry.register(this._languageId, value));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
