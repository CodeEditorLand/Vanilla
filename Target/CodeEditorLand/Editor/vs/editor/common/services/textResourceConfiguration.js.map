{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/textResourceConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type {\n\tConfigurationTarget,\n\tIConfigurationValue,\n} from \"../../../platform/configuration/common/configuration.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { IPosition } from \"../core/position.js\";\n\nexport const ITextResourceConfigurationService =\n\tcreateDecorator<ITextResourceConfigurationService>(\n\t\t\"textResourceConfigurationService\",\n\t);\n\nexport interface ITextResourceConfigurationChangeEvent {\n\t/**\n\t * All affected keys. Also includes language overrides and keys changed under language overrides.\n\t */\n\treadonly affectedKeys: ReadonlySet<string>;\n\n\t/**\n\t * Returns `true` if the given section has changed for the given resource.\n\t *\n\t * Example: To check if the configuration section has changed for a given resource use `e.affectsConfiguration(resource, section)`.\n\t *\n\t * @param resource Resource for which the configuration has to be checked.\n\t * @param section Section of the configuration\n\t */\n\taffectsConfiguration(resource: URI | undefined, section: string): boolean;\n}\n\nexport interface ITextResourceConfigurationService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event that fires when the configuration changes.\n\t */\n\tonDidChangeConfiguration: Event<ITextResourceConfigurationChangeEvent>;\n\n\t/**\n\t * Fetches the value of the section for the given resource by applying language overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param resource - Resource for which the configuration has to be fetched.\n\t * @param position - Position in the resource for which configuration has to be fetched.\n\t * @param section - Section of the configuration.\n\t *\n\t */\n\tgetValue<T>(resource: URI | undefined, section?: string): T;\n\tgetValue<T>(\n\t\tresource: URI | undefined,\n\t\tposition?: IPosition,\n\t\tsection?: string,\n\t): T;\n\n\t/**\n\t * Inspects the values of the section for the given resource by applying language overrides.\n\t *\n\t * @param resource - Resource for which the configuration has to be fetched.\n\t * @param position - Position in the resource for which configuration has to be fetched.\n\t * @param section - Section of the configuration.\n\t *\n\t */\n\tinspect<T>(\n\t\tresource: URI | undefined,\n\t\tposition: IPosition | null,\n\t\tsection: string,\n\t): IConfigurationValue<Readonly<T>>;\n\n\t/**\n\t * Update the configuration value for the given resource at the effective location.\n\t *\n\t * - If configurationTarget is not specified, target will be derived by checking where the configuration is defined.\n\t * - If the language overrides for the give resource contains the configuration, then it is updated.\n\t *\n\t * @param resource Resource for which the configuration has to be updated\n\t * @param key Configuration key\n\t * @param value Configuration value\n\t * @param configurationTarget Optional target into which the configuration has to be updated.\n\t * If not specified, target will be derived by checking where the configuration is defined.\n\t */\n\tupdateValue(\n\t\tresource: URI,\n\t\tkey: string,\n\t\tvalue: any,\n\t\tconfigurationTarget?: ConfigurationTarget,\n\t): Promise<void>;\n}\n\nexport const ITextResourcePropertiesService =\n\tcreateDecorator<ITextResourcePropertiesService>(\n\t\t\"textResourcePropertiesService\",\n\t);\n\nexport interface ITextResourcePropertiesService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the End of Line characters for the given resource\n\t */\n\tgetEOL(resource: URI, language?: string): string;\n}\n"],
  "mappings": "AAWA,SAAS,uBAAuB;AAGzB,MAAM,oCACZ;AAAA,EACC;AACD;AA6EM,MAAM,iCACZ;AAAA,EACC;AACD;",
  "names": []
}
