{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/textResourceConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IPosition } from '../core/position.js';\nimport { ConfigurationTarget, IConfigurationValue } from '../../../platform/configuration/common/configuration.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\n\nexport const ITextResourceConfigurationService = createDecorator<ITextResourceConfigurationService>('textResourceConfigurationService');\n\nexport interface ITextResourceConfigurationChangeEvent {\n\n\t/**\n\t * All affected keys. Also includes language overrides and keys changed under language overrides.\n\t */\n\treadonly affectedKeys: ReadonlySet<string>;\n\n\t/**\n\t * Returns `true` if the given section has changed for the given resource.\n\t *\n\t * Example: To check if the configuration section has changed for a given resource use `e.affectsConfiguration(resource, section)`.\n\t *\n\t * @param resource Resource for which the configuration has to be checked.\n\t * @param section Section of the configuration\n\t */\n\taffectsConfiguration(resource: URI | undefined, section: string): boolean;\n}\n\nexport interface ITextResourceConfigurationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event that fires when the configuration changes.\n\t */\n\tonDidChangeConfiguration: Event<ITextResourceConfigurationChangeEvent>;\n\n\t/**\n\t * Fetches the value of the section for the given resource by applying language overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param resource - Resource for which the configuration has to be fetched.\n\t * @param position - Position in the resource for which configuration has to be fetched.\n\t * @param section - Section of the configuration.\n\t *\n\t */\n\tgetValue<T>(resource: URI | undefined, section?: string): T;\n\tgetValue<T>(resource: URI | undefined, position?: IPosition, section?: string): T;\n\n\t/**\n\t * Inspects the values of the section for the given resource by applying language overrides.\n\t *\n\t * @param resource - Resource for which the configuration has to be fetched.\n\t * @param position - Position in the resource for which configuration has to be fetched.\n\t * @param section - Section of the configuration.\n\t *\n\t */\n\tinspect<T>(resource: URI | undefined, position: IPosition | null, section: string): IConfigurationValue<Readonly<T>>;\n\n\t/**\n\t * Update the configuration value for the given resource at the effective location.\n\t *\n\t * - If configurationTarget is not specified, target will be derived by checking where the configuration is defined.\n\t * - If the language overrides for the give resource contains the configuration, then it is updated.\n\t *\n\t * @param resource Resource for which the configuration has to be updated\n\t * @param key Configuration key\n\t * @param value Configuration value\n\t * @param configurationTarget Optional target into which the configuration has to be updated.\n\t * If not specified, target will be derived by checking where the configuration is defined.\n\t */\n\tupdateValue(resource: URI, key: string, value: any, configurationTarget?: ConfigurationTarget): Promise<void>;\n\n}\n\nexport const ITextResourcePropertiesService = createDecorator<ITextResourcePropertiesService>('textResourcePropertiesService');\n\nexport interface ITextResourcePropertiesService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the End of Line characters for the given resource\n\t */\n\tgetEOL(resource: URI, language?: string): string;\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,WAAW;AACpB,SAAS,iBAAiB;AAC1B,SAAS,qBAAqB,2BAA2B;AACzD,SAAS,uBAAuB;AAEzB,MAAM,oCAAoC,gBAAmD,kCAAkC;AAmE/H,MAAM,iCAAiC,gBAAgD,+BAA+B;",
  "names": []
}
