{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/languagesRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { compareIgnoreCase, regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { LanguageId } from '../encodedTokenAttributes.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageExtensionPoint, ILanguageNameIdPair, ILanguageIcon } from '../languages/language.js';\nimport { Extensions, IConfigurationRegistry } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\n\ninterface IResolvedLanguage {\n\tidentifier: string;\n\tname: string | null;\n\tmimetypes: string[];\n\taliases: string[];\n\textensions: string[];\n\tfilenames: string[];\n\tconfigurationFiles: URI[];\n\ticons: ILanguageIcon[];\n}\n\nexport class LanguageIdCodec implements ILanguageIdCodec {\n\n\tprivate _nextLanguageId: number;\n\tprivate readonly _languageIdToLanguage: string[] = [];\n\tprivate readonly _languageToLanguageId = new Map<string, number>();\n\n\tconstructor() {\n\t\tthis._register(NULL_LANGUAGE_ID, LanguageId.Null);\n\t\tthis._register(PLAINTEXT_LANGUAGE_ID, LanguageId.PlainText);\n\t\tthis._nextLanguageId = 2;\n\t}\n\n\tprivate _register(language: string, languageId: LanguageId): void {\n\t\tthis._languageIdToLanguage[languageId] = language;\n\t\tthis._languageToLanguageId.set(language, languageId);\n\t}\n\n\tpublic register(language: string): void {\n\t\tif (this._languageToLanguageId.has(language)) {\n\t\t\treturn;\n\t\t}\n\t\tconst languageId = this._nextLanguageId++;\n\t\tthis._register(language, languageId);\n\t}\n\n\tpublic encodeLanguageId(languageId: string): LanguageId {\n\t\treturn this._languageToLanguageId.get(languageId) || LanguageId.Null;\n\t}\n\n\tpublic decodeLanguageId(languageId: LanguageId): string {\n\t\treturn this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n\t}\n}\n\nexport class LanguagesRegistry extends Disposable {\n\n\tstatic instanceCount = 0;\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly _warnOnOverwrite: boolean;\n\tpublic readonly languageIdCodec: LanguageIdCodec;\n\tprivate _dynamicLanguages: ILanguageExtensionPoint[];\n\tprivate _languages: { [id: string]: IResolvedLanguage };\n\tprivate _mimeTypesMap: { [mimeType: string]: string };\n\tprivate _nameMap: { [name: string]: string };\n\tprivate _lowercaseNameMap: { [name: string]: string };\n\n\tconstructor(useModesRegistry = true, warnOnOverwrite = false) {\n\t\tsuper();\n\t\tLanguagesRegistry.instanceCount++;\n\n\t\tthis._warnOnOverwrite = warnOnOverwrite;\n\t\tthis.languageIdCodec = new LanguageIdCodec();\n\t\tthis._dynamicLanguages = [];\n\t\tthis._languages = {};\n\t\tthis._mimeTypesMap = {};\n\t\tthis._nameMap = {};\n\t\tthis._lowercaseNameMap = {};\n\n\t\tif (useModesRegistry) {\n\t\t\tthis._initializeFromRegistry();\n\t\t\tthis._register(ModesRegistry.onDidChangeLanguages((m) => {\n\t\t\t\tthis._initializeFromRegistry();\n\t\t\t}));\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\tLanguagesRegistry.instanceCount--;\n\t\tsuper.dispose();\n\t}\n\n\tpublic setDynamicLanguages(def: ILanguageExtensionPoint[]): void {\n\t\tthis._dynamicLanguages = def;\n\t\tthis._initializeFromRegistry();\n\t}\n\n\tprivate _initializeFromRegistry(): void {\n\t\tthis._languages = {};\n\t\tthis._mimeTypesMap = {};\n\t\tthis._nameMap = {};\n\t\tthis._lowercaseNameMap = {};\n\n\t\tclearPlatformLanguageAssociations();\n\t\tconst desc = (<ILanguageExtensionPoint[]>[]).concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n\t\tthis._registerLanguages(desc);\n\t}\n\n\tregisterLanguage(desc: ILanguageExtensionPoint): IDisposable {\n\t\treturn ModesRegistry.registerLanguage(desc);\n\t}\n\n\t_registerLanguages(desc: ILanguageExtensionPoint[]): void {\n\n\t\tfor (const d of desc) {\n\t\t\tthis._registerLanguage(d);\n\t\t}\n\n\t\t// Rebuild fast path maps\n\t\tthis._mimeTypesMap = {};\n\t\tthis._nameMap = {};\n\t\tthis._lowercaseNameMap = {};\n\t\tObject.keys(this._languages).forEach((langId) => {\n\t\t\tconst language = this._languages[langId];\n\t\t\tif (language.name) {\n\t\t\t\tthis._nameMap[language.name] = language.identifier;\n\t\t\t}\n\t\t\tlanguage.aliases.forEach((alias) => {\n\t\t\t\tthis._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n\t\t\t});\n\t\t\tlanguage.mimetypes.forEach((mimetype) => {\n\t\t\t\tthis._mimeTypesMap[mimetype] = language.identifier;\n\t\t\t});\n\t\t});\n\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate _registerLanguage(lang: ILanguageExtensionPoint): void {\n\t\tconst langId = lang.id;\n\n\t\tlet resolvedLanguage: IResolvedLanguage;\n\t\tif (hasOwnProperty.call(this._languages, langId)) {\n\t\t\tresolvedLanguage = this._languages[langId];\n\t\t} else {\n\t\t\tthis.languageIdCodec.register(langId);\n\t\t\tresolvedLanguage = {\n\t\t\t\tidentifier: langId,\n\t\t\t\tname: null,\n\t\t\t\tmimetypes: [],\n\t\t\t\taliases: [],\n\t\t\t\textensions: [],\n\t\t\t\tfilenames: [],\n\t\t\t\tconfigurationFiles: [],\n\t\t\t\ticons: []\n\t\t\t};\n\t\t\tthis._languages[langId] = resolvedLanguage;\n\t\t}\n\n\t\tthis._mergeLanguage(resolvedLanguage, lang);\n\t}\n\n\tprivate _mergeLanguage(resolvedLanguage: IResolvedLanguage, lang: ILanguageExtensionPoint): void {\n\t\tconst langId = lang.id;\n\n\t\tlet primaryMime: string | null = null;\n\n\t\tif (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n\t\t\tresolvedLanguage.mimetypes.push(...lang.mimetypes);\n\t\t\tprimaryMime = lang.mimetypes[0];\n\t\t}\n\n\t\tif (!primaryMime) {\n\t\t\tprimaryMime = `text/x-${langId}`;\n\t\t\tresolvedLanguage.mimetypes.push(primaryMime);\n\t\t}\n\n\t\tif (Array.isArray(lang.extensions)) {\n\t\t\tif (lang.configuration) {\n\t\t\t\t// insert first as this appears to be the 'primary' language definition\n\t\t\t\tresolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n\t\t\t} else {\n\t\t\t\tresolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n\t\t\t}\n\t\t\tfor (const extension of lang.extensions) {\n\t\t\t\tregisterPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(lang.filenames)) {\n\t\t\tfor (const filename of lang.filenames) {\n\t\t\t\tregisterPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n\t\t\t\tresolvedLanguage.filenames.push(filename);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(lang.filenamePatterns)) {\n\t\t\tfor (const filenamePattern of lang.filenamePatterns) {\n\t\t\t\tregisterPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n\t\t\tlet firstLineRegexStr = lang.firstLine;\n\t\t\tif (firstLineRegexStr.charAt(0) !== '^') {\n\t\t\t\tfirstLineRegexStr = '^' + firstLineRegexStr;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst firstLineRegex = new RegExp(firstLineRegexStr);\n\t\t\t\tif (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n\t\t\t\t\tregisterPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// Most likely, the regex was bad\n\t\t\t\tconsole.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n\t\t\t}\n\t\t}\n\n\t\tresolvedLanguage.aliases.push(langId);\n\n\t\tlet langAliases: Array<string | null> | null = null;\n\t\tif (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n\t\t\tif (lang.aliases.length === 0) {\n\t\t\t\t// signal that this language should not get a name\n\t\t\t\tlangAliases = [null];\n\t\t\t} else {\n\t\t\t\tlangAliases = lang.aliases;\n\t\t\t}\n\t\t}\n\n\t\tif (langAliases !== null) {\n\t\t\tfor (const langAlias of langAliases) {\n\t\t\t\tif (!langAlias || langAlias.length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresolvedLanguage.aliases.push(langAlias);\n\t\t\t}\n\t\t}\n\n\t\tconst containsAliases = (langAliases !== null && langAliases.length > 0);\n\t\tif (containsAliases && langAliases![0] === null) {\n\t\t\t// signal that this language should not get a name\n\t\t} else {\n\t\t\tconst bestName = (containsAliases ? langAliases![0] : null) || langId;\n\t\t\tif (containsAliases || !resolvedLanguage.name) {\n\t\t\t\tresolvedLanguage.name = bestName;\n\t\t\t}\n\t\t}\n\n\t\tif (lang.configuration) {\n\t\t\tresolvedLanguage.configurationFiles.push(lang.configuration);\n\t\t}\n\n\t\tif (lang.icon) {\n\t\t\tresolvedLanguage.icons.push(lang.icon);\n\t\t}\n\t}\n\n\tpublic isRegisteredLanguageId(languageId: string | null | undefined): boolean {\n\t\tif (!languageId) {\n\t\t\treturn false;\n\t\t}\n\t\treturn hasOwnProperty.call(this._languages, languageId);\n\t}\n\n\tpublic getRegisteredLanguageIds(): string[] {\n\t\treturn Object.keys(this._languages);\n\t}\n\n\tpublic getSortedRegisteredLanguageNames(): ILanguageNameIdPair[] {\n\t\tconst result: ILanguageNameIdPair[] = [];\n\t\tfor (const languageName in this._nameMap) {\n\t\t\tif (hasOwnProperty.call(this._nameMap, languageName)) {\n\t\t\t\tresult.push({\n\t\t\t\t\tlanguageName: languageName,\n\t\t\t\t\tlanguageId: this._nameMap[languageName]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tresult.sort((a, b) => compareIgnoreCase(a.languageName, b.languageName));\n\t\treturn result;\n\t}\n\n\tpublic getLanguageName(languageId: string): string | null {\n\t\tif (!hasOwnProperty.call(this._languages, languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._languages[languageId].name;\n\t}\n\n\tpublic getMimeType(languageId: string): string | null {\n\t\tif (!hasOwnProperty.call(this._languages, languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst language = this._languages[languageId];\n\t\treturn (language.mimetypes[0] || null);\n\t}\n\n\tpublic getExtensions(languageId: string): ReadonlyArray<string> {\n\t\tif (!hasOwnProperty.call(this._languages, languageId)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._languages[languageId].extensions;\n\t}\n\n\tpublic getFilenames(languageId: string): ReadonlyArray<string> {\n\t\tif (!hasOwnProperty.call(this._languages, languageId)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._languages[languageId].filenames;\n\t}\n\n\tpublic getIcon(languageId: string): ILanguageIcon | null {\n\t\tif (!hasOwnProperty.call(this._languages, languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst language = this._languages[languageId];\n\t\treturn (language.icons[0] || null);\n\t}\n\n\tpublic getConfigurationFiles(languageId: string): ReadonlyArray<URI> {\n\t\tif (!hasOwnProperty.call(this._languages, languageId)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._languages[languageId].configurationFiles || [];\n\t}\n\n\tpublic getLanguageIdByLanguageName(languageName: string): string | null {\n\t\tconst languageNameLower = languageName.toLowerCase();\n\t\tif (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._lowercaseNameMap[languageNameLower];\n\t}\n\n\tpublic getLanguageIdByMimeType(mimeType: string | null | undefined): string | null {\n\t\tif (!mimeType) {\n\t\t\treturn null;\n\t\t}\n\t\tif (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n\t\t\treturn this._mimeTypesMap[mimeType];\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic guessLanguageIdByFilepathOrFirstLine(resource: URI | null, firstLine?: string): string[] {\n\t\tif (!resource && !firstLine) {\n\t\t\treturn [];\n\t\t}\n\t\treturn getLanguageIds(resource, firstLine);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
