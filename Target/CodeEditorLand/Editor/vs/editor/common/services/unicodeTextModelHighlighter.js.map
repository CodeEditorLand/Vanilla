{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/unicodeTextModelHighlighter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from \"../../../base/common/assert.js\";\nimport * as strings from \"../../../base/common/strings.js\";\nimport { type IRange, Range } from \"../core/range.js\";\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from \"../core/wordHelper.js\";\nimport { Searcher } from \"../model/textModelSearch.js\";\nimport type { IUnicodeHighlightsResult } from \"./editorWorker.js\";\n\nexport class UnicodeTextModelHighlighter {\n\tpublic static computeUnicodeHighlights(\n\t\tmodel: IUnicodeCharacterSearcherTarget,\n\t\toptions: UnicodeHighlighterOptions,\n\t\trange?: IRange,\n\t): IUnicodeHighlightsResult {\n\t\tconst startLine = range ? range.startLineNumber : 1;\n\t\tconst endLine = range ? range.endLineNumber : model.getLineCount();\n\n\t\tconst codePointHighlighter = new CodePointHighlighter(options);\n\n\t\tconst candidates = codePointHighlighter.getCandidateCodePoints();\n\t\tlet regex: RegExp;\n\t\tif (candidates === \"allNonBasicAscii\") {\n\t\t\tregex = /[^\\t\\n\\r\\x20-\\x7E]/g;\n\t\t} else {\n\t\t\tregex = new RegExp(\n\t\t\t\t`${buildRegExpCharClassExpr(Array.from(candidates))}`,\n\t\t\t\t\"g\",\n\t\t\t);\n\t\t}\n\n\t\tconst searcher = new Searcher(null, regex);\n\t\tconst ranges: Range[] = [];\n\t\tlet hasMore = false;\n\t\tlet m: RegExpExecArray | null;\n\n\t\tlet ambiguousCharacterCount = 0;\n\t\tlet invisibleCharacterCount = 0;\n\t\tlet nonBasicAsciiCharacterCount = 0;\n\n\t\tforLoop: for (\n\t\t\tlet lineNumber = startLine, lineCount = endLine;\n\t\t\tlineNumber <= lineCount;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst lineLength = lineContent.length;\n\n\t\t\t// Reset regex to search from the beginning\n\t\t\tsearcher.reset(0);\n\t\t\tdo {\n\t\t\t\tm = searcher.next(lineContent);\n\t\t\t\tif (m) {\n\t\t\t\t\tlet startIndex = m.index;\n\t\t\t\t\tlet endIndex = m.index + m[0].length;\n\n\t\t\t\t\t// Extend range to entire code point\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tconst charCodeBefore = lineContent.charCodeAt(\n\t\t\t\t\t\t\tstartIndex - 1,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\t\t\t\tstartIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (endIndex + 1 < lineLength) {\n\t\t\t\t\t\tconst charCodeBefore = lineContent.charCodeAt(\n\t\t\t\t\t\t\tendIndex - 1,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\t\t\t\tendIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst str = lineContent.substring(startIndex, endIndex);\n\t\t\t\t\tlet word = getWordAtText(\n\t\t\t\t\t\tstartIndex + 1,\n\t\t\t\t\t\tDEFAULT_WORD_REGEXP,\n\t\t\t\t\t\tlineContent,\n\t\t\t\t\t\t0,\n\t\t\t\t\t);\n\t\t\t\t\tif (word && word.endColumn <= startIndex + 1) {\n\t\t\t\t\t\t// The word does not include the problematic character, ignore the word\n\t\t\t\t\t\tword = null;\n\t\t\t\t\t}\n\t\t\t\t\tconst highlightReason =\n\t\t\t\t\t\tcodePointHighlighter.shouldHighlightNonBasicASCII(\n\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\tword ? word.word : null,\n\t\t\t\t\t\t);\n\n\t\t\t\t\tif (highlightReason !== SimpleHighlightReason.None) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\thighlightReason === SimpleHighlightReason.Ambiguous\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tambiguousCharacterCount++;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\thighlightReason === SimpleHighlightReason.Invisible\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tinvisibleCharacterCount++;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\thighlightReason ===\n\t\t\t\t\t\t\tSimpleHighlightReason.NonBasicASCII\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnonBasicAsciiCharacterCount++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertNever(highlightReason);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst MAX_RESULT_LENGTH = 1000;\n\t\t\t\t\t\tif (ranges.length >= MAX_RESULT_LENGTH) {\n\t\t\t\t\t\t\thasMore = true;\n\t\t\t\t\t\t\tbreak forLoop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tranges.push(\n\t\t\t\t\t\t\tnew Range(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tstartIndex + 1,\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tendIndex + 1,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (m);\n\t\t}\n\t\treturn {\n\t\t\tranges,\n\t\t\thasMore,\n\t\t\tambiguousCharacterCount,\n\t\t\tinvisibleCharacterCount,\n\t\t\tnonBasicAsciiCharacterCount,\n\t\t};\n\t}\n\n\tpublic static computeUnicodeHighlightReason(\n\t\tchar: string,\n\t\toptions: UnicodeHighlighterOptions,\n\t): UnicodeHighlighterReason | null {\n\t\tconst codePointHighlighter = new CodePointHighlighter(options);\n\n\t\tconst reason = codePointHighlighter.shouldHighlightNonBasicASCII(\n\t\t\tchar,\n\t\t\tnull,\n\t\t);\n\t\tswitch (reason) {\n\t\t\tcase SimpleHighlightReason.None:\n\t\t\t\treturn null;\n\t\t\tcase SimpleHighlightReason.Invisible:\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.Invisible };\n\n\t\t\tcase SimpleHighlightReason.Ambiguous: {\n\t\t\t\tconst codePoint = char.codePointAt(0)!;\n\t\t\t\tconst primaryConfusable =\n\t\t\t\t\tcodePointHighlighter.ambiguousCharacters.getPrimaryConfusable(\n\t\t\t\t\t\tcodePoint,\n\t\t\t\t\t)!;\n\t\t\t\tconst notAmbiguousInLocales =\n\t\t\t\t\tstrings.AmbiguousCharacters.getLocales().filter(\n\t\t\t\t\t\t(l) =>\n\t\t\t\t\t\t\t!strings.AmbiguousCharacters.getInstance(\n\t\t\t\t\t\t\t\tnew Set([...options.allowedLocales, l]),\n\t\t\t\t\t\t\t).isAmbiguous(codePoint),\n\t\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tkind: UnicodeHighlighterReasonKind.Ambiguous,\n\t\t\t\t\tconfusableWith: String.fromCodePoint(primaryConfusable),\n\t\t\t\t\tnotAmbiguousInLocales,\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase SimpleHighlightReason.NonBasicASCII:\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.NonBasicAscii };\n\t\t}\n\t}\n}\n\nfunction buildRegExpCharClassExpr(\n\tcodePoints: number[],\n\tflags?: string,\n): string {\n\tconst src = `[${strings.escapeRegExpCharacters(\n\t\tcodePoints.map((i) => String.fromCodePoint(i)).join(\"\"),\n\t)}]`;\n\treturn src;\n}\n\nexport enum UnicodeHighlighterReasonKind {\n\tAmbiguous = 0,\n\tInvisible = 1,\n\tNonBasicAscii = 2,\n}\n\nexport type UnicodeHighlighterReason =\n\t| {\n\t\t\tkind: UnicodeHighlighterReasonKind.Ambiguous;\n\t\t\tconfusableWith: string;\n\t\t\tnotAmbiguousInLocales: string[];\n\t  }\n\t| {\n\t\t\tkind: UnicodeHighlighterReasonKind.Invisible;\n\t  }\n\t| {\n\t\t\tkind: UnicodeHighlighterReasonKind.NonBasicAscii;\n\t  };\n\nclass CodePointHighlighter {\n\tprivate readonly allowedCodePoints: Set<number>;\n\tpublic readonly ambiguousCharacters: strings.AmbiguousCharacters;\n\tconstructor(private readonly options: UnicodeHighlighterOptions) {\n\t\tthis.allowedCodePoints = new Set(options.allowedCodePoints);\n\t\tthis.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(\n\t\t\tnew Set(options.allowedLocales),\n\t\t);\n\t}\n\n\tpublic getCandidateCodePoints(): Set<number> | \"allNonBasicAscii\" {\n\t\tif (this.options.nonBasicASCII) {\n\t\t\treturn \"allNonBasicAscii\";\n\t\t}\n\n\t\tconst set = new Set<number>();\n\n\t\tif (this.options.invisibleCharacters) {\n\t\t\tfor (const cp of strings.InvisibleCharacters.codePoints) {\n\t\t\t\tif (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n\t\t\t\t\tset.add(cp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.ambiguousCharacters) {\n\t\t\tfor (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n\t\t\t\tset.add(cp);\n\t\t\t}\n\t\t}\n\n\t\tfor (const cp of this.allowedCodePoints) {\n\t\t\tset.delete(cp);\n\t\t}\n\n\t\treturn set;\n\t}\n\n\tpublic shouldHighlightNonBasicASCII(\n\t\tcharacter: string,\n\t\twordContext: string | null,\n\t): SimpleHighlightReason {\n\t\tconst codePoint = character.codePointAt(0)!;\n\n\t\tif (this.allowedCodePoints.has(codePoint)) {\n\t\t\treturn SimpleHighlightReason.None;\n\t\t}\n\n\t\tif (this.options.nonBasicASCII) {\n\t\t\treturn SimpleHighlightReason.NonBasicASCII;\n\t\t}\n\n\t\tlet hasBasicASCIICharacters = false;\n\t\tlet hasNonConfusableNonBasicAsciiCharacter = false;\n\t\tif (wordContext) {\n\t\t\tfor (const char of wordContext) {\n\t\t\t\tconst codePoint = char.codePointAt(0)!;\n\t\t\t\tconst isBasicASCII = strings.isBasicASCII(char);\n\t\t\t\thasBasicASCIICharacters =\n\t\t\t\t\thasBasicASCIICharacters || isBasicASCII;\n\n\t\t\t\tif (\n\t\t\t\t\t!isBasicASCII &&\n\t\t\t\t\t!this.ambiguousCharacters.isAmbiguous(codePoint) &&\n\t\t\t\t\t!strings.InvisibleCharacters.isInvisibleCharacter(codePoint)\n\t\t\t\t) {\n\t\t\t\t\thasNonConfusableNonBasicAsciiCharacter = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\t/* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n\t\t\t/* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter\n\t\t) {\n\t\t\treturn SimpleHighlightReason.None;\n\t\t}\n\n\t\tif (this.options.invisibleCharacters) {\n\t\t\t// TODO check for emojis\n\t\t\tif (\n\t\t\t\t!isAllowedInvisibleCharacter(character) &&\n\t\t\t\tstrings.InvisibleCharacters.isInvisibleCharacter(codePoint)\n\t\t\t) {\n\t\t\t\treturn SimpleHighlightReason.Invisible;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.ambiguousCharacters) {\n\t\t\tif (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n\t\t\t\treturn SimpleHighlightReason.Ambiguous;\n\t\t\t}\n\t\t}\n\n\t\treturn SimpleHighlightReason.None;\n\t}\n}\n\nfunction isAllowedInvisibleCharacter(character: string): boolean {\n\treturn character === \" \" || character === \"\\n\" || character === \"\\t\";\n}\n\nenum SimpleHighlightReason {\n\tNone = 0,\n\tNonBasicASCII = 1,\n\tInvisible = 2,\n\tAmbiguous = 3,\n}\n\nexport interface IUnicodeCharacterSearcherTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface UnicodeHighlighterOptions {\n\tnonBasicASCII: boolean;\n\tambiguousCharacters: boolean;\n\tinvisibleCharacters: boolean;\n\tincludeComments: boolean;\n\tincludeStrings: boolean;\n\tallowedCodePoints: number[];\n\tallowedLocales: string[];\n}\n"],
  "mappings": "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",
  "names": ["UnicodeHighlighterReasonKind", "codePoint", "SimpleHighlightReason"]
}
