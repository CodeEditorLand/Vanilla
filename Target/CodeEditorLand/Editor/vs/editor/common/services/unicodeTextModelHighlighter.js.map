{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/unicodeTextModelHighlighter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange, Range } from '../core/range.js';\nimport { Searcher } from '../model/textModelSearch.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { IUnicodeHighlightsResult } from './editorWorker.js';\nimport { assertNever } from '../../../base/common/assert.js';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from '../core/wordHelper.js';\n\nexport class UnicodeTextModelHighlighter {\n\tpublic static computeUnicodeHighlights(model: IUnicodeCharacterSearcherTarget, options: UnicodeHighlighterOptions, range?: IRange): IUnicodeHighlightsResult {\n\t\tconst startLine = range ? range.startLineNumber : 1;\n\t\tconst endLine = range ? range.endLineNumber : model.getLineCount();\n\n\t\tconst codePointHighlighter = new CodePointHighlighter(options);\n\n\t\tconst candidates = codePointHighlighter.getCandidateCodePoints();\n\t\tlet regex: RegExp;\n\t\tif (candidates === 'allNonBasicAscii') {\n\t\t\tregex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n\t\t} else {\n\t\t\tregex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n\t\t}\n\n\t\tconst searcher = new Searcher(null, regex);\n\t\tconst ranges: Range[] = [];\n\t\tlet hasMore = false;\n\t\tlet m: RegExpExecArray | null;\n\n\t\tlet ambiguousCharacterCount = 0;\n\t\tlet invisibleCharacterCount = 0;\n\t\tlet nonBasicAsciiCharacterCount = 0;\n\n\t\tforLoop:\n\t\tfor (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst lineLength = lineContent.length;\n\n\t\t\t// Reset regex to search from the beginning\n\t\t\tsearcher.reset(0);\n\t\t\tdo {\n\t\t\t\tm = searcher.next(lineContent);\n\t\t\t\tif (m) {\n\t\t\t\t\tlet startIndex = m.index;\n\t\t\t\t\tlet endIndex = m.index + m[0].length;\n\n\t\t\t\t\t// Extend range to entire code point\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tconst charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n\t\t\t\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\t\t\t\tstartIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (endIndex + 1 < lineLength) {\n\t\t\t\t\t\tconst charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n\t\t\t\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\t\t\t\tendIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst str = lineContent.substring(startIndex, endIndex);\n\t\t\t\t\tlet word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n\t\t\t\t\tif (word && word.endColumn <= startIndex + 1) {\n\t\t\t\t\t\t// The word does not include the problematic character, ignore the word\n\t\t\t\t\t\tword = null;\n\t\t\t\t\t}\n\t\t\t\t\tconst highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n\n\t\t\t\t\tif (highlightReason !== SimpleHighlightReason.None) {\n\t\t\t\t\t\tif (highlightReason === SimpleHighlightReason.Ambiguous) {\n\t\t\t\t\t\t\tambiguousCharacterCount++;\n\t\t\t\t\t\t} else if (highlightReason === SimpleHighlightReason.Invisible) {\n\t\t\t\t\t\t\tinvisibleCharacterCount++;\n\t\t\t\t\t\t} else if (highlightReason === SimpleHighlightReason.NonBasicASCII) {\n\t\t\t\t\t\t\tnonBasicAsciiCharacterCount++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertNever(highlightReason);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst MAX_RESULT_LENGTH = 1000;\n\t\t\t\t\t\tif (ranges.length >= MAX_RESULT_LENGTH) {\n\t\t\t\t\t\t\thasMore = true;\n\t\t\t\t\t\t\tbreak forLoop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (m);\n\t\t}\n\t\treturn {\n\t\t\tranges,\n\t\t\thasMore,\n\t\t\tambiguousCharacterCount,\n\t\t\tinvisibleCharacterCount,\n\t\t\tnonBasicAsciiCharacterCount\n\t\t};\n\t}\n\n\tpublic static computeUnicodeHighlightReason(char: string, options: UnicodeHighlighterOptions): UnicodeHighlighterReason | null {\n\t\tconst codePointHighlighter = new CodePointHighlighter(options);\n\n\t\tconst reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n\t\tswitch (reason) {\n\t\t\tcase SimpleHighlightReason.None:\n\t\t\t\treturn null;\n\t\t\tcase SimpleHighlightReason.Invisible:\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.Invisible };\n\n\t\t\tcase SimpleHighlightReason.Ambiguous: {\n\t\t\t\tconst codePoint = char.codePointAt(0)!;\n\t\t\t\tconst primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint)!;\n\t\t\t\tconst notAmbiguousInLocales =\n\t\t\t\t\tstrings.AmbiguousCharacters.getLocales().filter(\n\t\t\t\t\t\t(l) =>\n\t\t\t\t\t\t\t!strings.AmbiguousCharacters.getInstance(\n\t\t\t\t\t\t\t\tnew Set([...options.allowedLocales, l])\n\t\t\t\t\t\t\t).isAmbiguous(codePoint)\n\t\t\t\t\t);\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.Ambiguous, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n\t\t\t}\n\t\t\tcase SimpleHighlightReason.NonBasicASCII:\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.NonBasicAscii };\n\t\t}\n\t}\n}\n\nfunction buildRegExpCharClassExpr(codePoints: number[], flags?: string): string {\n\tconst src = `[${strings.escapeRegExpCharacters(\n\t\tcodePoints.map((i) => String.fromCodePoint(i)).join('')\n\t)}]`;\n\treturn src;\n}\n\nexport const enum UnicodeHighlighterReasonKind {\n\tAmbiguous, Invisible, NonBasicAscii\n}\n\nexport type UnicodeHighlighterReason = {\n\tkind: UnicodeHighlighterReasonKind.Ambiguous;\n\tconfusableWith: string;\n\tnotAmbiguousInLocales: string[];\n} | {\n\tkind: UnicodeHighlighterReasonKind.Invisible;\n} | {\n\tkind: UnicodeHighlighterReasonKind.NonBasicAscii;\n};\n\nclass CodePointHighlighter {\n\tprivate readonly allowedCodePoints: Set<number>;\n\tpublic readonly ambiguousCharacters: strings.AmbiguousCharacters;\n\tconstructor(private readonly options: UnicodeHighlighterOptions) {\n\t\tthis.allowedCodePoints = new Set(options.allowedCodePoints);\n\t\tthis.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n\t}\n\n\tpublic getCandidateCodePoints(): Set<number> | 'allNonBasicAscii' {\n\t\tif (this.options.nonBasicASCII) {\n\t\t\treturn 'allNonBasicAscii';\n\t\t}\n\n\t\tconst set = new Set<number>();\n\n\t\tif (this.options.invisibleCharacters) {\n\t\t\tfor (const cp of strings.InvisibleCharacters.codePoints) {\n\t\t\t\tif (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n\t\t\t\t\tset.add(cp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.ambiguousCharacters) {\n\t\t\tfor (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n\t\t\t\tset.add(cp);\n\t\t\t}\n\t\t}\n\n\t\tfor (const cp of this.allowedCodePoints) {\n\t\t\tset.delete(cp);\n\t\t}\n\n\t\treturn set;\n\t}\n\n\tpublic shouldHighlightNonBasicASCII(character: string, wordContext: string | null): SimpleHighlightReason {\n\t\tconst codePoint = character.codePointAt(0)!;\n\n\t\tif (this.allowedCodePoints.has(codePoint)) {\n\t\t\treturn SimpleHighlightReason.None;\n\t\t}\n\n\t\tif (this.options.nonBasicASCII) {\n\t\t\treturn SimpleHighlightReason.NonBasicASCII;\n\t\t}\n\n\t\tlet hasBasicASCIICharacters = false;\n\t\tlet hasNonConfusableNonBasicAsciiCharacter = false;\n\t\tif (wordContext) {\n\t\t\tfor (const char of wordContext) {\n\t\t\t\tconst codePoint = char.codePointAt(0)!;\n\t\t\t\tconst isBasicASCII = strings.isBasicASCII(char);\n\t\t\t\thasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n\n\t\t\t\tif (\n\t\t\t\t\t!isBasicASCII &&\n\t\t\t\t\t!this.ambiguousCharacters.isAmbiguous(codePoint) &&\n\t\t\t\t\t!strings.InvisibleCharacters.isInvisibleCharacter(codePoint)\n\t\t\t\t) {\n\t\t\t\t\thasNonConfusableNonBasicAsciiCharacter = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\t/* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n\t\t\t/* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter\n\t\t) {\n\t\t\treturn SimpleHighlightReason.None;\n\t\t}\n\n\t\tif (this.options.invisibleCharacters) {\n\t\t\t// TODO check for emojis\n\t\t\tif (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n\t\t\t\treturn SimpleHighlightReason.Invisible;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.ambiguousCharacters) {\n\t\t\tif (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n\t\t\t\treturn SimpleHighlightReason.Ambiguous;\n\t\t\t}\n\t\t}\n\n\t\treturn SimpleHighlightReason.None;\n\t}\n}\n\nfunction isAllowedInvisibleCharacter(character: string): boolean {\n\treturn character === ' ' || character === '\\n' || character === '\\t';\n}\n\nconst enum SimpleHighlightReason {\n\tNone,\n\tNonBasicASCII,\n\tInvisible,\n\tAmbiguous\n}\n\nexport interface IUnicodeCharacterSearcherTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface UnicodeHighlighterOptions {\n\tnonBasicASCII: boolean;\n\tambiguousCharacters: boolean;\n\tinvisibleCharacters: boolean;\n\tincludeComments: boolean;\n\tincludeStrings: boolean;\n\tallowedCodePoints: number[];\n\tallowedLocales: string[];\n}\n"],
  "mappings": "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",
  "names": ["UnicodeHighlighterReasonKind", "codePoint", "SimpleHighlightReason"]
}
