{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/modelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { StringSHA1 } from \"../../../base/common/hash.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { equals } from \"../../../base/common/objects.js\";\nimport * as platform from \"../../../base/common/platform.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\ttype IConfigurationChangeEvent,\n\tIConfigurationService,\n} from \"../../../platform/configuration/common/configuration.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIUndoRedoService,\n\ttype ResourceEditStackSnapshot,\n} from \"../../../platform/undoRedo/common/undoRedo.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../core/editOperation.js\";\nimport { Range } from \"../core/range.js\";\nimport { EDITOR_MODEL_DEFAULTS } from \"../core/textModelDefaults.js\";\nimport type { ILanguageSelection } from \"../languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../languages/modesRegistry.js\";\nimport {\n\tDefaultEndOfLine,\n\tEndOfLinePreference,\n\tEndOfLineSequence,\n\ttype ITextBuffer,\n\ttype ITextBufferFactory,\n\ttype ITextModel,\n\ttype ITextModelCreationOptions,\n} from \"../model.js\";\nimport { isEditStackElement } from \"../model/editStack.js\";\nimport { TextModel, createTextBuffer } from \"../model/textModel.js\";\nimport type { IModelLanguageChangedEvent } from \"../textModelEvents.js\";\nimport type { IModelService } from \"./model.js\";\nimport { ITextResourcePropertiesService } from \"./textResourceConfiguration.js\";\n\nfunction MODEL_ID(resource: URI): string {\n\treturn resource.toString();\n}\n\nclass ModelData implements IDisposable {\n\tprivate readonly _modelEventListeners = new DisposableStore();\n\n\tconstructor(\n\t\tpublic readonly model: TextModel,\n\t\tonWillDispose: (model: ITextModel) => void,\n\t\tonDidChangeLanguage: (\n\t\t\tmodel: ITextModel,\n\t\t\te: IModelLanguageChangedEvent,\n\t\t) => void,\n\t) {\n\t\tthis.model = model;\n\t\tthis._modelEventListeners.add(\n\t\t\tmodel.onWillDispose(() => onWillDispose(model)),\n\t\t);\n\t\tthis._modelEventListeners.add(\n\t\t\tmodel.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)),\n\t\t);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._modelEventListeners.dispose();\n\t}\n}\n\ninterface IRawEditorConfig {\n\ttabSize?: any;\n\tindentSize?: any;\n\tinsertSpaces?: any;\n\tdetectIndentation?: any;\n\ttrimAutoWhitespace?: any;\n\tcreationOptions?: any;\n\tlargeFileOptimizations?: any;\n\tbracketPairColorization?: any;\n}\n\ninterface IRawConfig {\n\teol?: any;\n\teditor?: IRawEditorConfig;\n}\n\nconst DEFAULT_EOL =\n\tplatform.isLinux || platform.isMacintosh\n\t\t? DefaultEndOfLine.LF\n\t\t: DefaultEndOfLine.CRLF;\n\nclass DisposedModelInfo {\n\tconstructor(\n\t\tpublic readonly uri: URI,\n\t\tpublic readonly initialUndoRedoSnapshot: ResourceEditStackSnapshot | null,\n\t\tpublic readonly time: number,\n\t\tpublic readonly sharesUndoRedoStack: boolean,\n\t\tpublic readonly heapSize: number,\n\t\tpublic readonly sha1: string,\n\t\tpublic readonly versionId: number,\n\t\tpublic readonly alternativeVersionId: number,\n\t) {}\n}\n\nexport class ModelService extends Disposable implements IModelService {\n\tpublic static MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onModelAdded: Emitter<ITextModel> = this._register(\n\t\tnew Emitter<ITextModel>(),\n\t);\n\tpublic readonly onModelAdded: Event<ITextModel> = this._onModelAdded.event;\n\n\tprivate readonly _onModelRemoved: Emitter<ITextModel> = this._register(\n\t\tnew Emitter<ITextModel>(),\n\t);\n\tpublic readonly onModelRemoved: Event<ITextModel> =\n\t\tthis._onModelRemoved.event;\n\n\tprivate readonly _onModelModeChanged = this._register(\n\t\tnew Emitter<{ model: ITextModel; oldLanguageId: string }>(),\n\t);\n\tpublic readonly onModelLanguageChanged = this._onModelModeChanged.event;\n\n\tprivate _modelCreationOptionsByLanguageAndResource: {\n\t\t[languageAndResource: string]: ITextModelCreationOptions;\n\t};\n\n\t/**\n\t * All the models known in the system.\n\t */\n\tprivate readonly _models: { [modelId: string]: ModelData };\n\tprivate readonly _disposedModels: Map<string, DisposedModelInfo>;\n\tprivate _disposedModelsHeapSize: number;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly _resourcePropertiesService: ITextResourcePropertiesService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._modelCreationOptionsByLanguageAndResource = Object.create(null);\n\t\tthis._models = {};\n\t\tthis._disposedModels = new Map<string, DisposedModelInfo>();\n\t\tthis._disposedModelsHeapSize = 0;\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n\t\tthis._updateModelOptions(undefined);\n\t}\n\n\tprivate static _readModelOptions(\n\t\tconfig: IRawConfig,\n\t\tisForSimpleWidget: boolean,\n\t): ITextModelCreationOptions {\n\t\tlet tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n\t\tif (config.editor && typeof config.editor.tabSize !== \"undefined\") {\n\t\t\tconst parsedTabSize = Number.parseInt(config.editor.tabSize, 10);\n\t\t\tif (!isNaN(parsedTabSize)) {\n\t\t\t\ttabSize = parsedTabSize;\n\t\t\t}\n\t\t\tif (tabSize < 1) {\n\t\t\t\ttabSize = 1;\n\t\t\t}\n\t\t}\n\n\t\tlet indentSize: number | \"tabSize\" = \"tabSize\";\n\t\tif (\n\t\t\tconfig.editor &&\n\t\t\ttypeof config.editor.indentSize !== \"undefined\" &&\n\t\t\tconfig.editor.indentSize !== \"tabSize\"\n\t\t) {\n\t\t\tconst parsedIndentSize = Number.parseInt(\n\t\t\t\tconfig.editor.indentSize,\n\t\t\t\t10,\n\t\t\t);\n\t\t\tif (!isNaN(parsedIndentSize)) {\n\t\t\t\tindentSize = Math.max(parsedIndentSize, 1);\n\t\t\t}\n\t\t}\n\n\t\tlet insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n\t\tif (\n\t\t\tconfig.editor &&\n\t\t\ttypeof config.editor.insertSpaces !== \"undefined\"\n\t\t) {\n\t\t\tinsertSpaces =\n\t\t\t\tconfig.editor.insertSpaces === \"false\"\n\t\t\t\t\t? false\n\t\t\t\t\t: Boolean(config.editor.insertSpaces);\n\t\t}\n\n\t\tlet newDefaultEOL = DEFAULT_EOL;\n\t\tconst eol = config.eol;\n\t\tif (eol === \"\\r\\n\") {\n\t\t\tnewDefaultEOL = DefaultEndOfLine.CRLF;\n\t\t} else if (eol === \"\\n\") {\n\t\t\tnewDefaultEOL = DefaultEndOfLine.LF;\n\t\t}\n\n\t\tlet trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n\t\tif (\n\t\t\tconfig.editor &&\n\t\t\ttypeof config.editor.trimAutoWhitespace !== \"undefined\"\n\t\t) {\n\t\t\ttrimAutoWhitespace =\n\t\t\t\tconfig.editor.trimAutoWhitespace === \"false\"\n\t\t\t\t\t? false\n\t\t\t\t\t: Boolean(config.editor.trimAutoWhitespace);\n\t\t}\n\n\t\tlet detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n\t\tif (\n\t\t\tconfig.editor &&\n\t\t\ttypeof config.editor.detectIndentation !== \"undefined\"\n\t\t) {\n\t\t\tdetectIndentation =\n\t\t\t\tconfig.editor.detectIndentation === \"false\"\n\t\t\t\t\t? false\n\t\t\t\t\t: Boolean(config.editor.detectIndentation);\n\t\t}\n\n\t\tlet largeFileOptimizations =\n\t\t\tEDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n\t\tif (\n\t\t\tconfig.editor &&\n\t\t\ttypeof config.editor.largeFileOptimizations !== \"undefined\"\n\t\t) {\n\t\t\tlargeFileOptimizations =\n\t\t\t\tconfig.editor.largeFileOptimizations === \"false\"\n\t\t\t\t\t? false\n\t\t\t\t\t: Boolean(config.editor.largeFileOptimizations);\n\t\t}\n\t\tlet bracketPairColorizationOptions =\n\t\t\tEDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n\t\tif (\n\t\t\tconfig.editor?.bracketPairColorization &&\n\t\t\ttypeof config.editor.bracketPairColorization === \"object\"\n\t\t) {\n\t\t\tbracketPairColorizationOptions = {\n\t\t\t\tenabled: !!config.editor.bracketPairColorization.enabled,\n\t\t\t\tindependentColorPoolPerBracketType:\n\t\t\t\t\t!!config.editor.bracketPairColorization\n\t\t\t\t\t\t.independentColorPoolPerBracketType,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tisForSimpleWidget: isForSimpleWidget,\n\t\t\ttabSize: tabSize,\n\t\t\tindentSize: indentSize,\n\t\t\tinsertSpaces: insertSpaces,\n\t\t\tdetectIndentation: detectIndentation,\n\t\t\tdefaultEOL: newDefaultEOL,\n\t\t\ttrimAutoWhitespace: trimAutoWhitespace,\n\t\t\tlargeFileOptimizations: largeFileOptimizations,\n\t\t\tbracketPairColorizationOptions,\n\t\t};\n\t}\n\n\tprivate _getEOL(resource: URI | undefined, language: string): string {\n\t\tif (resource) {\n\t\t\treturn this._resourcePropertiesService.getEOL(resource, language);\n\t\t}\n\t\tconst eol = this._configurationService.getValue(\"files.eol\", {\n\t\t\toverrideIdentifier: language,\n\t\t});\n\t\tif (eol && typeof eol === \"string\" && eol !== \"auto\") {\n\t\t\treturn eol;\n\t\t}\n\t\treturn platform.OS === platform.OperatingSystem.Linux ||\n\t\t\tplatform.OS === platform.OperatingSystem.Macintosh\n\t\t\t? \"\\n\"\n\t\t\t: \"\\r\\n\";\n\t}\n\n\tprivate _shouldRestoreUndoStack(): boolean {\n\t\tconst result = this._configurationService.getValue(\n\t\t\t\"files.restoreUndoStack\",\n\t\t);\n\t\tif (typeof result === \"boolean\") {\n\t\t\treturn result;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getCreationOptions(\n\t\tlanguageIdOrSelection: string | ILanguageSelection,\n\t\tresource: URI | undefined,\n\t\tisForSimpleWidget: boolean,\n\t): ITextModelCreationOptions {\n\t\tconst language =\n\t\t\ttypeof languageIdOrSelection === \"string\"\n\t\t\t\t? languageIdOrSelection\n\t\t\t\t: languageIdOrSelection.languageId;\n\t\tlet creationOptions =\n\t\t\tthis._modelCreationOptionsByLanguageAndResource[\n\t\t\t\tlanguage + resource\n\t\t\t];\n\t\tif (!creationOptions) {\n\t\t\tconst editor =\n\t\t\t\tthis._configurationService.getValue<IRawEditorConfig>(\n\t\t\t\t\t\"editor\",\n\t\t\t\t\t{ overrideIdentifier: language, resource },\n\t\t\t\t);\n\t\t\tconst eol = this._getEOL(resource, language);\n\t\t\tcreationOptions = ModelService._readModelOptions(\n\t\t\t\t{ editor, eol },\n\t\t\t\tisForSimpleWidget,\n\t\t\t);\n\t\t\tthis._modelCreationOptionsByLanguageAndResource[\n\t\t\t\tlanguage + resource\n\t\t\t] = creationOptions;\n\t\t}\n\t\treturn creationOptions;\n\t}\n\n\tprivate _updateModelOptions(\n\t\te: IConfigurationChangeEvent | undefined,\n\t): void {\n\t\tconst oldOptionsByLanguageAndResource =\n\t\t\tthis._modelCreationOptionsByLanguageAndResource;\n\t\tthis._modelCreationOptionsByLanguageAndResource = Object.create(null);\n\n\t\t// Update options on all models\n\t\tconst keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tconst modelId = keys[i];\n\t\t\tconst modelData = this._models[modelId];\n\t\t\tconst language = modelData.model.getLanguageId();\n\t\t\tconst uri = modelData.model.uri;\n\n\t\t\tif (\n\t\t\t\te &&\n\t\t\t\t!e.affectsConfiguration(\"editor\", {\n\t\t\t\t\toverrideIdentifier: language,\n\t\t\t\t\tresource: uri,\n\t\t\t\t}) &&\n\t\t\t\t!e.affectsConfiguration(\"files.eol\", {\n\t\t\t\t\toverrideIdentifier: language,\n\t\t\t\t\tresource: uri,\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\tcontinue; // perf: skip if this model is not affected by configuration change\n\t\t\t}\n\n\t\t\tconst oldOptions = oldOptionsByLanguageAndResource[language + uri];\n\t\t\tconst newOptions = this.getCreationOptions(\n\t\t\t\tlanguage,\n\t\t\t\turi,\n\t\t\t\tmodelData.model.isForSimpleWidget,\n\t\t\t);\n\t\t\tModelService._setModelOptionsForModel(\n\t\t\t\tmodelData.model,\n\t\t\t\tnewOptions,\n\t\t\t\toldOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _setModelOptionsForModel(\n\t\tmodel: ITextModel,\n\t\tnewOptions: ITextModelCreationOptions,\n\t\tcurrentOptions: ITextModelCreationOptions,\n\t): void {\n\t\tif (\n\t\t\tcurrentOptions &&\n\t\t\tcurrentOptions.defaultEOL !== newOptions.defaultEOL &&\n\t\t\tmodel.getLineCount() === 1\n\t\t) {\n\t\t\tmodel.setEOL(\n\t\t\t\tnewOptions.defaultEOL === DefaultEndOfLine.LF\n\t\t\t\t\t? EndOfLineSequence.LF\n\t\t\t\t\t: EndOfLineSequence.CRLF,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tcurrentOptions &&\n\t\t\tcurrentOptions.detectIndentation === newOptions.detectIndentation &&\n\t\t\tcurrentOptions.insertSpaces === newOptions.insertSpaces &&\n\t\t\tcurrentOptions.tabSize === newOptions.tabSize &&\n\t\t\tcurrentOptions.indentSize === newOptions.indentSize &&\n\t\t\tcurrentOptions.trimAutoWhitespace ===\n\t\t\t\tnewOptions.trimAutoWhitespace &&\n\t\t\tequals(\n\t\t\t\tcurrentOptions.bracketPairColorizationOptions,\n\t\t\t\tnewOptions.bracketPairColorizationOptions,\n\t\t\t)\n\t\t) {\n\t\t\t// Same indent opts, no need to touch the model\n\t\t\treturn;\n\t\t}\n\n\t\tif (newOptions.detectIndentation) {\n\t\t\tmodel.detectIndentation(\n\t\t\t\tnewOptions.insertSpaces,\n\t\t\t\tnewOptions.tabSize,\n\t\t\t);\n\t\t\tmodel.updateOptions({\n\t\t\t\ttrimAutoWhitespace: newOptions.trimAutoWhitespace,\n\t\t\t\tbracketColorizationOptions:\n\t\t\t\t\tnewOptions.bracketPairColorizationOptions,\n\t\t\t});\n\t\t} else {\n\t\t\tmodel.updateOptions({\n\t\t\t\tinsertSpaces: newOptions.insertSpaces,\n\t\t\t\ttabSize: newOptions.tabSize,\n\t\t\t\tindentSize: newOptions.indentSize,\n\t\t\t\ttrimAutoWhitespace: newOptions.trimAutoWhitespace,\n\t\t\t\tbracketColorizationOptions:\n\t\t\t\t\tnewOptions.bracketPairColorizationOptions,\n\t\t\t});\n\t\t}\n\t}\n\n\t// --- begin IModelService\n\n\tprivate _insertDisposedModel(disposedModelData: DisposedModelInfo): void {\n\t\tthis._disposedModels.set(\n\t\t\tMODEL_ID(disposedModelData.uri),\n\t\t\tdisposedModelData,\n\t\t);\n\t\tthis._disposedModelsHeapSize += disposedModelData.heapSize;\n\t}\n\n\tprivate _removeDisposedModel(resource: URI): DisposedModelInfo | undefined {\n\t\tconst disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n\t\tif (disposedModelData) {\n\t\t\tthis._disposedModelsHeapSize -= disposedModelData.heapSize;\n\t\t}\n\t\tthis._disposedModels.delete(MODEL_ID(resource));\n\t\treturn disposedModelData;\n\t}\n\n\tprivate _ensureDisposedModelsHeapSize(maxModelsHeapSize: number): void {\n\t\tif (this._disposedModelsHeapSize > maxModelsHeapSize) {\n\t\t\t// we must remove some old undo stack elements to free up some memory\n\t\t\tconst disposedModels: DisposedModelInfo[] = [];\n\t\t\tthis._disposedModels.forEach((entry) => {\n\t\t\t\tif (!entry.sharesUndoRedoStack) {\n\t\t\t\t\tdisposedModels.push(entry);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdisposedModels.sort((a, b) => a.time - b.time);\n\t\t\twhile (\n\t\t\t\tdisposedModels.length > 0 &&\n\t\t\t\tthis._disposedModelsHeapSize > maxModelsHeapSize\n\t\t\t) {\n\t\t\t\tconst disposedModel = disposedModels.shift()!;\n\t\t\t\tthis._removeDisposedModel(disposedModel.uri);\n\t\t\t\tif (disposedModel.initialUndoRedoSnapshot !== null) {\n\t\t\t\t\tthis._undoRedoService.restoreSnapshot(\n\t\t\t\t\t\tdisposedModel.initialUndoRedoSnapshot,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createModelData(\n\t\tvalue: string | ITextBufferFactory,\n\t\tlanguageIdOrSelection: string | ILanguageSelection,\n\t\tresource: URI | undefined,\n\t\tisForSimpleWidget: boolean,\n\t): ModelData {\n\t\t// create & save the model\n\t\tconst options = this.getCreationOptions(\n\t\t\tlanguageIdOrSelection,\n\t\t\tresource,\n\t\t\tisForSimpleWidget,\n\t\t);\n\t\tconst model: TextModel = this._instantiationService.createInstance(\n\t\t\tTextModel,\n\t\t\tvalue,\n\t\t\tlanguageIdOrSelection,\n\t\t\toptions,\n\t\t\tresource,\n\t\t);\n\t\tif (resource && this._disposedModels.has(MODEL_ID(resource))) {\n\t\t\tconst disposedModelData = this._removeDisposedModel(resource)!;\n\t\t\tconst elements = this._undoRedoService.getElements(resource);\n\t\t\tconst sha1Computer = this._getSHA1Computer();\n\t\t\tconst sha1IsEqual = sha1Computer.canComputeSHA1(model)\n\t\t\t\t? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n\t\t\t\t: false;\n\t\t\tif (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n\t\t\t\tfor (const element of elements.past) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEditStackElement(element) &&\n\t\t\t\t\t\telement.matchesResource(resource)\n\t\t\t\t\t) {\n\t\t\t\t\t\telement.setModel(model);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const element of elements.future) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEditStackElement(element) &&\n\t\t\t\t\t\telement.matchesResource(resource)\n\t\t\t\t\t) {\n\t\t\t\t\t\telement.setModel(model);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._undoRedoService.setElementsValidFlag(\n\t\t\t\t\tresource,\n\t\t\t\t\ttrue,\n\t\t\t\t\t(element) =>\n\t\t\t\t\t\tisEditStackElement(element) &&\n\t\t\t\t\t\telement.matchesResource(resource),\n\t\t\t\t);\n\t\t\t\tif (sha1IsEqual) {\n\t\t\t\t\tmodel._overwriteVersionId(disposedModelData.versionId);\n\t\t\t\t\tmodel._overwriteAlternativeVersionId(\n\t\t\t\t\t\tdisposedModelData.alternativeVersionId,\n\t\t\t\t\t);\n\t\t\t\t\tmodel._overwriteInitialUndoRedoSnapshot(\n\t\t\t\t\t\tdisposedModelData.initialUndoRedoSnapshot,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (disposedModelData.initialUndoRedoSnapshot !== null) {\n\t\t\t\tthis._undoRedoService.restoreSnapshot(\n\t\t\t\t\tdisposedModelData.initialUndoRedoSnapshot,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tconst modelId = MODEL_ID(model.uri);\n\n\t\tif (this._models[modelId]) {\n\t\t\t// There already exists a model with this id => this is a programmer error\n\t\t\tthrow new Error(\n\t\t\t\t\"ModelService: Cannot add model because it already exists!\",\n\t\t\t);\n\t\t}\n\n\t\tconst modelData = new ModelData(\n\t\t\tmodel,\n\t\t\t(model) => this._onWillDispose(model),\n\t\t\t(model, e) => this._onDidChangeLanguage(model, e),\n\t\t);\n\t\tthis._models[modelId] = modelData;\n\n\t\treturn modelData;\n\t}\n\n\tpublic updateModel(\n\t\tmodel: ITextModel,\n\t\tvalue: string | ITextBufferFactory,\n\t): void {\n\t\tconst options = this.getCreationOptions(\n\t\t\tmodel.getLanguageId(),\n\t\t\tmodel.uri,\n\t\t\tmodel.isForSimpleWidget,\n\t\t);\n\t\tconst { textBuffer, disposable } = createTextBuffer(\n\t\t\tvalue,\n\t\t\toptions.defaultEOL,\n\t\t);\n\n\t\t// Return early if the text is already set in that form\n\t\tif (model.equalsTextBuffer(textBuffer)) {\n\t\t\tdisposable.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise find a diff between the values and update model\n\t\tmodel.pushStackElement();\n\t\tmodel.pushEOL(\n\t\t\ttextBuffer.getEOL() === \"\\r\\n\"\n\t\t\t\t? EndOfLineSequence.CRLF\n\t\t\t\t: EndOfLineSequence.LF,\n\t\t);\n\t\tmodel.pushEditOperations(\n\t\t\t[],\n\t\t\tModelService._computeEdits(model, textBuffer),\n\t\t\t() => [],\n\t\t);\n\t\tmodel.pushStackElement();\n\t\tdisposable.dispose();\n\t}\n\n\tprivate static _commonPrefix(\n\t\ta: ITextModel,\n\t\taLen: number,\n\t\taDelta: number,\n\t\tb: ITextBuffer,\n\t\tbLen: number,\n\t\tbDelta: number,\n\t): number {\n\t\tconst maxResult = Math.min(aLen, bLen);\n\n\t\tlet result = 0;\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < maxResult &&\n\t\t\ta.getLineContent(aDelta + i) === b.getLineContent(bDelta + i);\n\t\t\ti++\n\t\t) {\n\t\t\tresult++;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _commonSuffix(\n\t\ta: ITextModel,\n\t\taLen: number,\n\t\taDelta: number,\n\t\tb: ITextBuffer,\n\t\tbLen: number,\n\t\tbDelta: number,\n\t): number {\n\t\tconst maxResult = Math.min(aLen, bLen);\n\n\t\tlet result = 0;\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < maxResult &&\n\t\t\ta.getLineContent(aDelta + aLen - i) ===\n\t\t\t\tb.getLineContent(bDelta + bLen - i);\n\t\t\ti++\n\t\t) {\n\t\t\tresult++;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Compute edits to bring `model` to the state of `textSource`.\n\t */\n\tpublic static _computeEdits(\n\t\tmodel: ITextModel,\n\t\ttextBuffer: ITextBuffer,\n\t): ISingleEditOperation[] {\n\t\tconst modelLineCount = model.getLineCount();\n\t\tconst textBufferLineCount = textBuffer.getLineCount();\n\t\tconst commonPrefix = this._commonPrefix(\n\t\t\tmodel,\n\t\t\tmodelLineCount,\n\t\t\t1,\n\t\t\ttextBuffer,\n\t\t\ttextBufferLineCount,\n\t\t\t1,\n\t\t);\n\n\t\tif (\n\t\t\tmodelLineCount === textBufferLineCount &&\n\t\t\tcommonPrefix === modelLineCount\n\t\t) {\n\t\t\t// equality case\n\t\t\treturn [];\n\t\t}\n\n\t\tconst commonSuffix = this._commonSuffix(\n\t\t\tmodel,\n\t\t\tmodelLineCount - commonPrefix,\n\t\t\tcommonPrefix,\n\t\t\ttextBuffer,\n\t\t\ttextBufferLineCount - commonPrefix,\n\t\t\tcommonPrefix,\n\t\t);\n\n\t\tlet oldRange: Range;\n\t\tlet newRange: Range;\n\t\tif (commonSuffix > 0) {\n\t\t\toldRange = new Range(\n\t\t\t\tcommonPrefix + 1,\n\t\t\t\t1,\n\t\t\t\tmodelLineCount - commonSuffix + 1,\n\t\t\t\t1,\n\t\t\t);\n\t\t\tnewRange = new Range(\n\t\t\t\tcommonPrefix + 1,\n\t\t\t\t1,\n\t\t\t\ttextBufferLineCount - commonSuffix + 1,\n\t\t\t\t1,\n\t\t\t);\n\t\t} else if (commonPrefix > 0) {\n\t\t\toldRange = new Range(\n\t\t\t\tcommonPrefix,\n\t\t\t\tmodel.getLineMaxColumn(commonPrefix),\n\t\t\t\tmodelLineCount,\n\t\t\t\tmodel.getLineMaxColumn(modelLineCount),\n\t\t\t);\n\t\t\tnewRange = new Range(\n\t\t\t\tcommonPrefix,\n\t\t\t\t1 + textBuffer.getLineLength(commonPrefix),\n\t\t\t\ttextBufferLineCount,\n\t\t\t\t1 + textBuffer.getLineLength(textBufferLineCount),\n\t\t\t);\n\t\t} else {\n\t\t\toldRange = new Range(\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tmodelLineCount,\n\t\t\t\tmodel.getLineMaxColumn(modelLineCount),\n\t\t\t);\n\t\t\tnewRange = new Range(\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\ttextBufferLineCount,\n\t\t\t\t1 + textBuffer.getLineLength(textBufferLineCount),\n\t\t\t);\n\t\t}\n\n\t\treturn [\n\t\t\tEditOperation.replaceMove(\n\t\t\t\toldRange,\n\t\t\t\ttextBuffer.getValueInRange(\n\t\t\t\t\tnewRange,\n\t\t\t\t\tEndOfLinePreference.TextDefined,\n\t\t\t\t),\n\t\t\t),\n\t\t];\n\t}\n\n\tpublic createModel(\n\t\tvalue: string | ITextBufferFactory,\n\t\tlanguageSelection: ILanguageSelection | null,\n\t\tresource?: URI,\n\t\tisForSimpleWidget = false,\n\t): ITextModel {\n\t\tlet modelData: ModelData;\n\n\t\tif (languageSelection) {\n\t\t\tmodelData = this._createModelData(\n\t\t\t\tvalue,\n\t\t\t\tlanguageSelection,\n\t\t\t\tresource,\n\t\t\t\tisForSimpleWidget,\n\t\t\t);\n\t\t} else {\n\t\t\tmodelData = this._createModelData(\n\t\t\t\tvalue,\n\t\t\t\tPLAINTEXT_LANGUAGE_ID,\n\t\t\t\tresource,\n\t\t\t\tisForSimpleWidget,\n\t\t\t);\n\t\t}\n\n\t\tthis._onModelAdded.fire(modelData.model);\n\n\t\treturn modelData.model;\n\t}\n\n\tpublic destroyModel(resource: URI): void {\n\t\t// We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\n\t\tconst modelData = this._models[MODEL_ID(resource)];\n\t\tif (!modelData) {\n\t\t\treturn;\n\t\t}\n\t\tmodelData.model.dispose();\n\t}\n\n\tpublic getModels(): ITextModel[] {\n\t\tconst ret: ITextModel[] = [];\n\n\t\tconst keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tconst modelId = keys[i];\n\t\t\tret.push(this._models[modelId].model);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tpublic getModel(resource: URI): ITextModel | null {\n\t\tconst modelId = MODEL_ID(resource);\n\t\tconst modelData = this._models[modelId];\n\t\tif (!modelData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn modelData.model;\n\t}\n\n\t// --- end IModelService\n\n\tprotected _schemaShouldMaintainUndoRedoElements(resource: URI) {\n\t\treturn (\n\t\t\tresource.scheme === Schemas.file ||\n\t\t\tresource.scheme === Schemas.vscodeRemote ||\n\t\t\tresource.scheme === Schemas.vscodeUserData ||\n\t\t\tresource.scheme === Schemas.vscodeNotebookCell ||\n\t\t\tresource.scheme === \"fake-fs\" // for tests\n\t\t);\n\t}\n\n\tprivate _onWillDispose(model: ITextModel): void {\n\t\tconst modelId = MODEL_ID(model.uri);\n\t\tconst modelData = this._models[modelId];\n\n\t\tconst sharesUndoRedoStack =\n\t\t\tthis._undoRedoService.getUriComparisonKey(model.uri) !==\n\t\t\tmodel.uri.toString();\n\t\tlet maintainUndoRedoStack = false;\n\t\tlet heapSize = 0;\n\t\tif (\n\t\t\tsharesUndoRedoStack ||\n\t\t\t(this._shouldRestoreUndoStack() &&\n\t\t\t\tthis._schemaShouldMaintainUndoRedoElements(model.uri))\n\t\t) {\n\t\t\tconst elements = this._undoRedoService.getElements(model.uri);\n\t\t\tif (elements.past.length > 0 || elements.future.length > 0) {\n\t\t\t\tfor (const element of elements.past) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEditStackElement(element) &&\n\t\t\t\t\t\telement.matchesResource(model.uri)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmaintainUndoRedoStack = true;\n\t\t\t\t\t\theapSize += element.heapSize(model.uri);\n\t\t\t\t\t\telement.setModel(model.uri); // remove reference from text buffer instance\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const element of elements.future) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEditStackElement(element) &&\n\t\t\t\t\t\telement.matchesResource(model.uri)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmaintainUndoRedoStack = true;\n\t\t\t\t\t\theapSize += element.heapSize(model.uri);\n\t\t\t\t\t\telement.setModel(model.uri); // remove reference from text buffer instance\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst maxMemory = ModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n\t\tconst sha1Computer = this._getSHA1Computer();\n\t\tif (!maintainUndoRedoStack) {\n\t\t\tif (!sharesUndoRedoStack) {\n\t\t\t\tconst initialUndoRedoSnapshot =\n\t\t\t\t\tmodelData.model.getInitialUndoRedoSnapshot();\n\t\t\t\tif (initialUndoRedoSnapshot !== null) {\n\t\t\t\t\tthis._undoRedoService.restoreSnapshot(\n\t\t\t\t\t\tinitialUndoRedoSnapshot,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (\n\t\t\t!sharesUndoRedoStack &&\n\t\t\t(heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))\n\t\t) {\n\t\t\t// the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n\t\t\tconst initialUndoRedoSnapshot =\n\t\t\t\tmodelData.model.getInitialUndoRedoSnapshot();\n\t\t\tif (initialUndoRedoSnapshot !== null) {\n\t\t\t\tthis._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n\t\t\t// We only invalidate the elements, but they remain in the undo-redo service.\n\t\t\tthis._undoRedoService.setElementsValidFlag(\n\t\t\t\tmodel.uri,\n\t\t\t\tfalse,\n\t\t\t\t(element) =>\n\t\t\t\t\tisEditStackElement(element) &&\n\t\t\t\t\telement.matchesResource(model.uri),\n\t\t\t);\n\t\t\tthis._insertDisposedModel(\n\t\t\t\tnew DisposedModelInfo(\n\t\t\t\t\tmodel.uri,\n\t\t\t\t\tmodelData.model.getInitialUndoRedoSnapshot(),\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tsharesUndoRedoStack,\n\t\t\t\t\theapSize,\n\t\t\t\t\tsha1Computer.computeSHA1(model),\n\t\t\t\t\tmodel.getVersionId(),\n\t\t\t\t\tmodel.getAlternativeVersionId(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tdelete this._models[modelId];\n\t\tmodelData.dispose();\n\n\t\t// clean up cache\n\t\tdelete this._modelCreationOptionsByLanguageAndResource[\n\t\t\tmodel.getLanguageId() + model.uri\n\t\t];\n\n\t\tthis._onModelRemoved.fire(model);\n\t}\n\n\tprivate _onDidChangeLanguage(\n\t\tmodel: ITextModel,\n\t\te: IModelLanguageChangedEvent,\n\t): void {\n\t\tconst oldLanguageId = e.oldLanguage;\n\t\tconst newLanguageId = model.getLanguageId();\n\t\tconst oldOptions = this.getCreationOptions(\n\t\t\toldLanguageId,\n\t\t\tmodel.uri,\n\t\t\tmodel.isForSimpleWidget,\n\t\t);\n\t\tconst newOptions = this.getCreationOptions(\n\t\t\tnewLanguageId,\n\t\t\tmodel.uri,\n\t\t\tmodel.isForSimpleWidget,\n\t\t);\n\t\tModelService._setModelOptionsForModel(model, newOptions, oldOptions);\n\t\tthis._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n\t}\n\n\tprotected _getSHA1Computer(): ITextModelSHA1Computer {\n\t\treturn new DefaultModelSHA1Computer();\n\t}\n}\n\nexport interface ITextModelSHA1Computer {\n\tcanComputeSHA1(model: ITextModel): boolean;\n\tcomputeSHA1(model: ITextModel): string;\n}\n\nexport class DefaultModelSHA1Computer implements ITextModelSHA1Computer {\n\tpublic static MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine\n\n\tcanComputeSHA1(model: ITextModel): boolean {\n\t\treturn (\n\t\t\tmodel.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE\n\t\t);\n\t}\n\n\tcomputeSHA1(model: ITextModel): string {\n\t\t// compute the sha1\n\t\tconst shaComputer = new StringSHA1();\n\t\tconst snapshot = model.createSnapshot();\n\t\tlet text: string | null;\n\t\twhile ((text = snapshot.read())) {\n\t\t\tshaComputer.update(text);\n\t\t}\n\t\treturn shaComputer.digest();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["model"]
}
