{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/modelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { EditOperation, ISingleEditOperation } from '../core/editOperation.js';\nimport { Range } from '../core/range.js';\nimport { DefaultEndOfLine, EndOfLinePreference, EndOfLineSequence, ITextBuffer, ITextBufferFactory, ITextModel, ITextModelCreationOptions } from '../model.js';\nimport { TextModel, createTextBuffer } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { IModelLanguageChangedEvent } from '../textModelEvents.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageSelection } from '../languages/language.js';\nimport { IModelService } from './model.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationChangeEvent, IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\n\nfunction MODEL_ID(resource: URI): string {\n\treturn resource.toString();\n}\n\nclass ModelData implements IDisposable {\n\n\tprivate readonly _modelEventListeners = new DisposableStore();\n\n\tconstructor(\n\t\tpublic readonly model: TextModel,\n\t\tonWillDispose: (model: ITextModel) => void,\n\t\tonDidChangeLanguage: (model: ITextModel, e: IModelLanguageChangedEvent) => void\n\t) {\n\t\tthis.model = model;\n\t\tthis._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n\t\tthis._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._modelEventListeners.dispose();\n\t}\n}\n\ninterface IRawEditorConfig {\n\ttabSize?: any;\n\tindentSize?: any;\n\tinsertSpaces?: any;\n\tdetectIndentation?: any;\n\ttrimAutoWhitespace?: any;\n\tcreationOptions?: any;\n\tlargeFileOptimizations?: any;\n\tbracketPairColorization?: any;\n}\n\ninterface IRawConfig {\n\teol?: any;\n\teditor?: IRawEditorConfig;\n}\n\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? DefaultEndOfLine.LF : DefaultEndOfLine.CRLF;\n\nclass DisposedModelInfo {\n\tconstructor(\n\t\tpublic readonly uri: URI,\n\t\tpublic readonly initialUndoRedoSnapshot: ResourceEditStackSnapshot | null,\n\t\tpublic readonly time: number,\n\t\tpublic readonly sharesUndoRedoStack: boolean,\n\t\tpublic readonly heapSize: number,\n\t\tpublic readonly sha1: string,\n\t\tpublic readonly versionId: number,\n\t\tpublic readonly alternativeVersionId: number,\n\t) { }\n}\n\nexport class ModelService extends Disposable implements IModelService {\n\n\tpublic static MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onModelAdded: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onModelAdded: Event<ITextModel> = this._onModelAdded.event;\n\n\tprivate readonly _onModelRemoved: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onModelRemoved: Event<ITextModel> = this._onModelRemoved.event;\n\n\tprivate readonly _onModelModeChanged = this._register(new Emitter<{ model: ITextModel; oldLanguageId: string }>());\n\tpublic readonly onModelLanguageChanged = this._onModelModeChanged.event;\n\n\tprivate _modelCreationOptionsByLanguageAndResource: { [languageAndResource: string]: ITextModelCreationOptions };\n\n\t/**\n\t * All the models known in the system.\n\t */\n\tprivate readonly _models: { [modelId: string]: ModelData };\n\tprivate readonly _disposedModels: Map<string, DisposedModelInfo>;\n\tprivate _disposedModelsHeapSize: number;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly _resourcePropertiesService: ITextResourcePropertiesService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._modelCreationOptionsByLanguageAndResource = Object.create(null);\n\t\tthis._models = {};\n\t\tthis._disposedModels = new Map<string, DisposedModelInfo>();\n\t\tthis._disposedModelsHeapSize = 0;\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n\t\tthis._updateModelOptions(undefined);\n\t}\n\n\tprivate static _readModelOptions(config: IRawConfig, isForSimpleWidget: boolean): ITextModelCreationOptions {\n\t\tlet tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n\t\tif (config.editor && typeof config.editor.tabSize !== 'undefined') {\n\t\t\tconst parsedTabSize = parseInt(config.editor.tabSize, 10);\n\t\t\tif (!isNaN(parsedTabSize)) {\n\t\t\t\ttabSize = parsedTabSize;\n\t\t\t}\n\t\t\tif (tabSize < 1) {\n\t\t\t\ttabSize = 1;\n\t\t\t}\n\t\t}\n\n\t\tlet indentSize: number | 'tabSize' = 'tabSize';\n\t\tif (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n\t\t\tconst parsedIndentSize = parseInt(config.editor.indentSize, 10);\n\t\t\tif (!isNaN(parsedIndentSize)) {\n\t\t\t\tindentSize = Math.max(parsedIndentSize, 1);\n\t\t\t}\n\t\t}\n\n\t\tlet insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n\t\tif (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n\t\t\tinsertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n\t\t}\n\n\t\tlet newDefaultEOL = DEFAULT_EOL;\n\t\tconst eol = config.eol;\n\t\tif (eol === '\\r\\n') {\n\t\t\tnewDefaultEOL = DefaultEndOfLine.CRLF;\n\t\t} else if (eol === '\\n') {\n\t\t\tnewDefaultEOL = DefaultEndOfLine.LF;\n\t\t}\n\n\t\tlet trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n\t\tif (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n\t\t\ttrimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n\t\t}\n\n\t\tlet detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n\t\tif (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n\t\t\tdetectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n\t\t}\n\n\t\tlet largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n\t\tif (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n\t\t\tlargeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n\t\t}\n\t\tlet bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n\t\tif (config.editor?.bracketPairColorization && typeof config.editor.bracketPairColorization === 'object') {\n\t\t\tbracketPairColorizationOptions = {\n\t\t\t\tenabled: !!config.editor.bracketPairColorization.enabled,\n\t\t\t\tindependentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tisForSimpleWidget: isForSimpleWidget,\n\t\t\ttabSize: tabSize,\n\t\t\tindentSize: indentSize,\n\t\t\tinsertSpaces: insertSpaces,\n\t\t\tdetectIndentation: detectIndentation,\n\t\t\tdefaultEOL: newDefaultEOL,\n\t\t\ttrimAutoWhitespace: trimAutoWhitespace,\n\t\t\tlargeFileOptimizations: largeFileOptimizations,\n\t\t\tbracketPairColorizationOptions\n\t\t};\n\t}\n\n\tprivate _getEOL(resource: URI | undefined, language: string): string {\n\t\tif (resource) {\n\t\t\treturn this._resourcePropertiesService.getEOL(resource, language);\n\t\t}\n\t\tconst eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n\t\tif (eol && typeof eol === 'string' && eol !== 'auto') {\n\t\t\treturn eol;\n\t\t}\n\t\treturn platform.OS === platform.OperatingSystem.Linux || platform.OS === platform.OperatingSystem.Macintosh ? '\\n' : '\\r\\n';\n\t}\n\n\tprivate _shouldRestoreUndoStack(): boolean {\n\t\tconst result = this._configurationService.getValue('files.restoreUndoStack');\n\t\tif (typeof result === 'boolean') {\n\t\t\treturn result;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getCreationOptions(languageIdOrSelection: string | ILanguageSelection, resource: URI | undefined, isForSimpleWidget: boolean): ITextModelCreationOptions {\n\t\tconst language = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n\t\tlet creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n\t\tif (!creationOptions) {\n\t\t\tconst editor = this._configurationService.getValue<IRawEditorConfig>('editor', { overrideIdentifier: language, resource });\n\t\t\tconst eol = this._getEOL(resource, language);\n\t\t\tcreationOptions = ModelService._readModelOptions({ editor, eol }, isForSimpleWidget);\n\t\t\tthis._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n\t\t}\n\t\treturn creationOptions;\n\t}\n\n\tprivate _updateModelOptions(e: IConfigurationChangeEvent | undefined): void {\n\t\tconst oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n\t\tthis._modelCreationOptionsByLanguageAndResource = Object.create(null);\n\n\t\t// Update options on all models\n\t\tconst keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tconst modelId = keys[i];\n\t\t\tconst modelData = this._models[modelId];\n\t\t\tconst language = modelData.model.getLanguageId();\n\t\t\tconst uri = modelData.model.uri;\n\n\t\t\tif (e && !e.affectsConfiguration('editor', { overrideIdentifier: language, resource: uri }) && !e.affectsConfiguration('files.eol', { overrideIdentifier: language, resource: uri })) {\n\t\t\t\tcontinue; // perf: skip if this model is not affected by configuration change\n\t\t\t}\n\n\t\t\tconst oldOptions = oldOptionsByLanguageAndResource[language + uri];\n\t\t\tconst newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n\t\t\tModelService._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n\t\t}\n\t}\n\n\tprivate static _setModelOptionsForModel(model: ITextModel, newOptions: ITextModelCreationOptions, currentOptions: ITextModelCreationOptions): void {\n\t\tif (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n\t\t\tmodel.setEOL(newOptions.defaultEOL === DefaultEndOfLine.LF ? EndOfLineSequence.LF : EndOfLineSequence.CRLF);\n\t\t}\n\n\t\tif (currentOptions\n\t\t\t&& (currentOptions.detectIndentation === newOptions.detectIndentation)\n\t\t\t&& (currentOptions.insertSpaces === newOptions.insertSpaces)\n\t\t\t&& (currentOptions.tabSize === newOptions.tabSize)\n\t\t\t&& (currentOptions.indentSize === newOptions.indentSize)\n\t\t\t&& (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n\t\t\t&& equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)\n\t\t) {\n\t\t\t// Same indent opts, no need to touch the model\n\t\t\treturn;\n\t\t}\n\n\t\tif (newOptions.detectIndentation) {\n\t\t\tmodel.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n\t\t\tmodel.updateOptions({\n\t\t\t\ttrimAutoWhitespace: newOptions.trimAutoWhitespace,\n\t\t\t\tbracketColorizationOptions: newOptions.bracketPairColorizationOptions\n\t\t\t});\n\t\t} else {\n\t\t\tmodel.updateOptions({\n\t\t\t\tinsertSpaces: newOptions.insertSpaces,\n\t\t\t\ttabSize: newOptions.tabSize,\n\t\t\t\tindentSize: newOptions.indentSize,\n\t\t\t\ttrimAutoWhitespace: newOptions.trimAutoWhitespace,\n\t\t\t\tbracketColorizationOptions: newOptions.bracketPairColorizationOptions\n\t\t\t});\n\t\t}\n\t}\n\n\t// --- begin IModelService\n\n\tprivate _insertDisposedModel(disposedModelData: DisposedModelInfo): void {\n\t\tthis._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n\t\tthis._disposedModelsHeapSize += disposedModelData.heapSize;\n\t}\n\n\tprivate _removeDisposedModel(resource: URI): DisposedModelInfo | undefined {\n\t\tconst disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n\t\tif (disposedModelData) {\n\t\t\tthis._disposedModelsHeapSize -= disposedModelData.heapSize;\n\t\t}\n\t\tthis._disposedModels.delete(MODEL_ID(resource));\n\t\treturn disposedModelData;\n\t}\n\n\tprivate _ensureDisposedModelsHeapSize(maxModelsHeapSize: number): void {\n\t\tif (this._disposedModelsHeapSize > maxModelsHeapSize) {\n\t\t\t// we must remove some old undo stack elements to free up some memory\n\t\t\tconst disposedModels: DisposedModelInfo[] = [];\n\t\t\tthis._disposedModels.forEach(entry => {\n\t\t\t\tif (!entry.sharesUndoRedoStack) {\n\t\t\t\t\tdisposedModels.push(entry);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdisposedModels.sort((a, b) => a.time - b.time);\n\t\t\twhile (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n\t\t\t\tconst disposedModel = disposedModels.shift()!;\n\t\t\t\tthis._removeDisposedModel(disposedModel.uri);\n\t\t\t\tif (disposedModel.initialUndoRedoSnapshot !== null) {\n\t\t\t\t\tthis._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createModelData(value: string | ITextBufferFactory, languageIdOrSelection: string | ILanguageSelection, resource: URI | undefined, isForSimpleWidget: boolean): ModelData {\n\t\t// create & save the model\n\t\tconst options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n\t\tconst model: TextModel = this._instantiationService.createInstance(TextModel,\n\t\t\tvalue,\n\t\t\tlanguageIdOrSelection,\n\t\t\toptions,\n\t\t\tresource\n\t\t);\n\t\tif (resource && this._disposedModels.has(MODEL_ID(resource))) {\n\t\t\tconst disposedModelData = this._removeDisposedModel(resource)!;\n\t\t\tconst elements = this._undoRedoService.getElements(resource);\n\t\t\tconst sha1Computer = this._getSHA1Computer();\n\t\t\tconst sha1IsEqual = (\n\t\t\t\tsha1Computer.canComputeSHA1(model)\n\t\t\t\t\t? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n\t\t\t\t\t: false\n\t\t\t);\n\t\t\tif (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n\t\t\t\tfor (const element of elements.past) {\n\t\t\t\t\tif (isEditStackElement(element) && element.matchesResource(resource)) {\n\t\t\t\t\t\telement.setModel(model);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const element of elements.future) {\n\t\t\t\t\tif (isEditStackElement(element) && element.matchesResource(resource)) {\n\t\t\t\t\t\telement.setModel(model);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n\t\t\t\tif (sha1IsEqual) {\n\t\t\t\t\tmodel._overwriteVersionId(disposedModelData.versionId);\n\t\t\t\t\tmodel._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n\t\t\t\t\tmodel._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (disposedModelData.initialUndoRedoSnapshot !== null) {\n\t\t\t\t\tthis._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst modelId = MODEL_ID(model.uri);\n\n\t\tif (this._models[modelId]) {\n\t\t\t// There already exists a model with this id => this is a programmer error\n\t\t\tthrow new Error('ModelService: Cannot add model because it already exists!');\n\t\t}\n\n\t\tconst modelData = new ModelData(\n\t\t\tmodel,\n\t\t\t(model) => this._onWillDispose(model),\n\t\t\t(model, e) => this._onDidChangeLanguage(model, e)\n\t\t);\n\t\tthis._models[modelId] = modelData;\n\n\t\treturn modelData;\n\t}\n\n\tpublic updateModel(model: ITextModel, value: string | ITextBufferFactory): void {\n\t\tconst options = this.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n\t\tconst { textBuffer, disposable } = createTextBuffer(value, options.defaultEOL);\n\n\t\t// Return early if the text is already set in that form\n\t\tif (model.equalsTextBuffer(textBuffer)) {\n\t\t\tdisposable.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise find a diff between the values and update model\n\t\tmodel.pushStackElement();\n\t\tmodel.pushEOL(textBuffer.getEOL() === '\\r\\n' ? EndOfLineSequence.CRLF : EndOfLineSequence.LF);\n\t\tmodel.pushEditOperations(\n\t\t\t[],\n\t\t\tModelService._computeEdits(model, textBuffer),\n\t\t\t() => []\n\t\t);\n\t\tmodel.pushStackElement();\n\t\tdisposable.dispose();\n\t}\n\n\tprivate static _commonPrefix(a: ITextModel, aLen: number, aDelta: number, b: ITextBuffer, bLen: number, bDelta: number): number {\n\t\tconst maxResult = Math.min(aLen, bLen);\n\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < maxResult && a.getLineContent(aDelta + i) === b.getLineContent(bDelta + i); i++) {\n\t\t\tresult++;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _commonSuffix(a: ITextModel, aLen: number, aDelta: number, b: ITextBuffer, bLen: number, bDelta: number): number {\n\t\tconst maxResult = Math.min(aLen, bLen);\n\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < maxResult && a.getLineContent(aDelta + aLen - i) === b.getLineContent(bDelta + bLen - i); i++) {\n\t\t\tresult++;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Compute edits to bring `model` to the state of `textSource`.\n\t */\n\tpublic static _computeEdits(model: ITextModel, textBuffer: ITextBuffer): ISingleEditOperation[] {\n\t\tconst modelLineCount = model.getLineCount();\n\t\tconst textBufferLineCount = textBuffer.getLineCount();\n\t\tconst commonPrefix = this._commonPrefix(model, modelLineCount, 1, textBuffer, textBufferLineCount, 1);\n\n\t\tif (modelLineCount === textBufferLineCount && commonPrefix === modelLineCount) {\n\t\t\t// equality case\n\t\t\treturn [];\n\t\t}\n\n\t\tconst commonSuffix = this._commonSuffix(model, modelLineCount - commonPrefix, commonPrefix, textBuffer, textBufferLineCount - commonPrefix, commonPrefix);\n\n\t\tlet oldRange: Range;\n\t\tlet newRange: Range;\n\t\tif (commonSuffix > 0) {\n\t\t\toldRange = new Range(commonPrefix + 1, 1, modelLineCount - commonSuffix + 1, 1);\n\t\t\tnewRange = new Range(commonPrefix + 1, 1, textBufferLineCount - commonSuffix + 1, 1);\n\t\t} else if (commonPrefix > 0) {\n\t\t\toldRange = new Range(commonPrefix, model.getLineMaxColumn(commonPrefix), modelLineCount, model.getLineMaxColumn(modelLineCount));\n\t\t\tnewRange = new Range(commonPrefix, 1 + textBuffer.getLineLength(commonPrefix), textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n\t\t} else {\n\t\t\toldRange = new Range(1, 1, modelLineCount, model.getLineMaxColumn(modelLineCount));\n\t\t\tnewRange = new Range(1, 1, textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n\t\t}\n\n\t\treturn [EditOperation.replaceMove(oldRange, textBuffer.getValueInRange(newRange, EndOfLinePreference.TextDefined))];\n\t}\n\n\tpublic createModel(value: string | ITextBufferFactory, languageSelection: ILanguageSelection | null, resource?: URI, isForSimpleWidget: boolean = false): ITextModel {\n\t\tlet modelData: ModelData;\n\n\t\tif (languageSelection) {\n\t\t\tmodelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n\t\t} else {\n\t\t\tmodelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n\t\t}\n\n\t\tthis._onModelAdded.fire(modelData.model);\n\n\t\treturn modelData.model;\n\t}\n\n\tpublic destroyModel(resource: URI): void {\n\t\t// We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\n\t\tconst modelData = this._models[MODEL_ID(resource)];\n\t\tif (!modelData) {\n\t\t\treturn;\n\t\t}\n\t\tmodelData.model.dispose();\n\t}\n\n\tpublic getModels(): ITextModel[] {\n\t\tconst ret: ITextModel[] = [];\n\n\t\tconst keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tconst modelId = keys[i];\n\t\t\tret.push(this._models[modelId].model);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tpublic getModel(resource: URI): ITextModel | null {\n\t\tconst modelId = MODEL_ID(resource);\n\t\tconst modelData = this._models[modelId];\n\t\tif (!modelData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn modelData.model;\n\t}\n\n\t// --- end IModelService\n\n\tprotected _schemaShouldMaintainUndoRedoElements(resource: URI) {\n\t\treturn (\n\t\t\tresource.scheme === Schemas.file\n\t\t\t|| resource.scheme === Schemas.vscodeRemote\n\t\t\t|| resource.scheme === Schemas.vscodeUserData\n\t\t\t|| resource.scheme === Schemas.vscodeNotebookCell\n\t\t\t|| resource.scheme === 'fake-fs' // for tests\n\t\t);\n\t}\n\n\tprivate _onWillDispose(model: ITextModel): void {\n\t\tconst modelId = MODEL_ID(model.uri);\n\t\tconst modelData = this._models[modelId];\n\n\t\tconst sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n\t\tlet maintainUndoRedoStack = false;\n\t\tlet heapSize = 0;\n\t\tif (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n\t\t\tconst elements = this._undoRedoService.getElements(model.uri);\n\t\t\tif (elements.past.length > 0 || elements.future.length > 0) {\n\t\t\t\tfor (const element of elements.past) {\n\t\t\t\t\tif (isEditStackElement(element) && element.matchesResource(model.uri)) {\n\t\t\t\t\t\tmaintainUndoRedoStack = true;\n\t\t\t\t\t\theapSize += element.heapSize(model.uri);\n\t\t\t\t\t\telement.setModel(model.uri); // remove reference from text buffer instance\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const element of elements.future) {\n\t\t\t\t\tif (isEditStackElement(element) && element.matchesResource(model.uri)) {\n\t\t\t\t\t\tmaintainUndoRedoStack = true;\n\t\t\t\t\t\theapSize += element.heapSize(model.uri);\n\t\t\t\t\t\telement.setModel(model.uri); // remove reference from text buffer instance\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst maxMemory = ModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n\t\tconst sha1Computer = this._getSHA1Computer();\n\t\tif (!maintainUndoRedoStack) {\n\t\t\tif (!sharesUndoRedoStack) {\n\t\t\t\tconst initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n\t\t\t\tif (initialUndoRedoSnapshot !== null) {\n\t\t\t\t\tthis._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n\t\t\t// the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n\t\t\tconst initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n\t\t\tif (initialUndoRedoSnapshot !== null) {\n\t\t\t\tthis._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n\t\t\t// We only invalidate the elements, but they remain in the undo-redo service.\n\t\t\tthis._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n\t\t\tthis._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n\t\t}\n\n\t\tdelete this._models[modelId];\n\t\tmodelData.dispose();\n\n\t\t// clean up cache\n\t\tdelete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n\n\t\tthis._onModelRemoved.fire(model);\n\t}\n\n\tprivate _onDidChangeLanguage(model: ITextModel, e: IModelLanguageChangedEvent): void {\n\t\tconst oldLanguageId = e.oldLanguage;\n\t\tconst newLanguageId = model.getLanguageId();\n\t\tconst oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n\t\tconst newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n\t\tModelService._setModelOptionsForModel(model, newOptions, oldOptions);\n\t\tthis._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n\t}\n\n\tprotected _getSHA1Computer(): ITextModelSHA1Computer {\n\t\treturn new DefaultModelSHA1Computer();\n\t}\n}\n\nexport interface ITextModelSHA1Computer {\n\tcanComputeSHA1(model: ITextModel): boolean;\n\tcomputeSHA1(model: ITextModel): string;\n}\n\nexport class DefaultModelSHA1Computer implements ITextModelSHA1Computer {\n\n\tpublic static MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine\n\n\tcanComputeSHA1(model: ITextModel): boolean {\n\t\treturn (model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE);\n\t}\n\n\tcomputeSHA1(model: ITextModel): string {\n\t\t// compute the sha1\n\t\tconst shaComputer = new StringSHA1();\n\t\tconst snapshot = model.createSnapshot();\n\t\tlet text: string | null;\n\t\twhile ((text = snapshot.read())) {\n\t\t\tshaComputer.update(text);\n\t\t}\n\t\treturn shaComputer.digest();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["model"]
}
