{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/findSectionHeaders.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IRange } from \"../core/range.js\";\nimport type { FoldingRules } from \"../languages/languageConfiguration.js\";\n\nexport interface ISectionHeaderFinderTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface FindSectionHeaderOptions {\n\tfoldingRules?: FoldingRules;\n\tfindRegionSectionHeaders: boolean;\n\tfindMarkSectionHeaders: boolean;\n}\n\nexport interface SectionHeader {\n\t/**\n\t * The location of the header text in the text model.\n\t */\n\trange: IRange;\n\t/**\n\t * The section header text.\n\t */\n\ttext: string;\n\t/**\n\t * Whether the section header includes a separator line.\n\t */\n\thasSeparatorLine: boolean;\n\t/**\n\t * This section should be omitted before rendering if it's not in a comment.\n\t */\n\tshouldBeInComments: boolean;\n}\n\nconst markRegex = /\\bMARK:\\s*(.*)$/d;\nconst trimDashesRegex = /^-+|-+$/g;\n\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nexport function findSectionHeaders(\n\tmodel: ISectionHeaderFinderTarget,\n\toptions: FindSectionHeaderOptions,\n): SectionHeader[] {\n\tlet headers: SectionHeader[] = [];\n\tif (options.findRegionSectionHeaders && options.foldingRules?.markers) {\n\t\tconst regionHeaders = collectRegionHeaders(model, options);\n\t\theaders = headers.concat(regionHeaders);\n\t}\n\tif (options.findMarkSectionHeaders) {\n\t\tconst markHeaders = collectMarkHeaders(model);\n\t\theaders = headers.concat(markHeaders);\n\t}\n\treturn headers;\n}\n\nfunction collectRegionHeaders(\n\tmodel: ISectionHeaderFinderTarget,\n\toptions: FindSectionHeaderOptions,\n): SectionHeader[] {\n\tconst regionHeaders: SectionHeader[] = [];\n\tconst endLineNumber = model.getLineCount();\n\tfor (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst match = lineContent.match(options.foldingRules!.markers!.start);\n\t\tif (match) {\n\t\t\tconst range = {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstartColumn: match[0].length + 1,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tendColumn: lineContent.length + 1,\n\t\t\t};\n\t\t\tif (range.endColumn > range.startColumn) {\n\t\t\t\tconst sectionHeader = {\n\t\t\t\t\trange,\n\t\t\t\t\t...getHeaderText(lineContent.substring(match[0].length)),\n\t\t\t\t\tshouldBeInComments: false,\n\t\t\t\t};\n\t\t\t\tif (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n\t\t\t\t\tregionHeaders.push(sectionHeader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn regionHeaders;\n}\n\nfunction collectMarkHeaders(\n\tmodel: ISectionHeaderFinderTarget,\n): SectionHeader[] {\n\tconst markHeaders: SectionHeader[] = [];\n\tconst endLineNumber = model.getLineCount();\n\tfor (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\taddMarkHeaderIfFound(lineContent, lineNumber, markHeaders);\n\t}\n\treturn markHeaders;\n}\n\nfunction addMarkHeaderIfFound(\n\tlineContent: string,\n\tlineNumber: number,\n\tsectionHeaders: SectionHeader[],\n) {\n\tmarkRegex.lastIndex = 0;\n\tconst match = markRegex.exec(lineContent);\n\tif (match) {\n\t\tconst column = match.indices![1][0] + 1;\n\t\tconst endColumn = match.indices![1][1] + 1;\n\t\tconst range = {\n\t\t\tstartLineNumber: lineNumber,\n\t\t\tstartColumn: column,\n\t\t\tendLineNumber: lineNumber,\n\t\t\tendColumn: endColumn,\n\t\t};\n\t\tif (range.endColumn > range.startColumn) {\n\t\t\tconst sectionHeader = {\n\t\t\t\trange,\n\t\t\t\t...getHeaderText(match[1]),\n\t\t\t\tshouldBeInComments: true,\n\t\t\t};\n\t\t\tif (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n\t\t\t\tsectionHeaders.push(sectionHeader);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getHeaderText(text: string): {\n\ttext: string;\n\thasSeparatorLine: boolean;\n} {\n\ttext = text.trim();\n\tconst hasSeparatorLine = text.startsWith(\"-\");\n\ttext = text.replace(trimDashesRegex, \"\");\n\treturn { text, hasSeparatorLine };\n}\n"],
  "mappings": ";;AAsCA,MAAM,YAAY;AAClB,MAAM,kBAAkB;AASjB,SAAS,mBACf,OACA,SACkB;AAClB,MAAI,UAA2B,CAAC;AAChC,MAAI,QAAQ,4BAA4B,QAAQ,cAAc,SAAS;AACtE,UAAM,gBAAgB,qBAAqB,OAAO,OAAO;AACzD,cAAU,QAAQ,OAAO,aAAa;AAAA,EACvC;AACA,MAAI,QAAQ,wBAAwB;AACnC,UAAM,cAAc,mBAAmB,KAAK;AAC5C,cAAU,QAAQ,OAAO,WAAW;AAAA,EACrC;AACA,SAAO;AACR;AAdgB;AAgBhB,SAAS,qBACR,OACA,SACkB;AAClB,QAAM,gBAAiC,CAAC;AACxC,QAAM,gBAAgB,MAAM,aAAa;AACzC,WAAS,aAAa,GAAG,cAAc,eAAe,cAAc;AACnE,UAAM,cAAc,MAAM,eAAe,UAAU;AACnD,UAAM,QAAQ,YAAY,MAAM,QAAQ,aAAc,QAAS,KAAK;AACpE,QAAI,OAAO;AACV,YAAM,QAAQ;AAAA,QACb,iBAAiB;AAAA,QACjB,aAAa,MAAM,CAAC,EAAE,SAAS;AAAA,QAC/B,eAAe;AAAA,QACf,WAAW,YAAY,SAAS;AAAA,MACjC;AACA,UAAI,MAAM,YAAY,MAAM,aAAa;AACxC,cAAM,gBAAgB;AAAA,UACrB;AAAA,UACA,GAAG,cAAc,YAAY,UAAU,MAAM,CAAC,EAAE,MAAM,CAAC;AAAA,UACvD,oBAAoB;AAAA,QACrB;AACA,YAAI,cAAc,QAAQ,cAAc,kBAAkB;AACzD,wBAAc,KAAK,aAAa;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR;AA7BS;AA+BT,SAAS,mBACR,OACkB;AAClB,QAAM,cAA+B,CAAC;AACtC,QAAM,gBAAgB,MAAM,aAAa;AACzC,WAAS,aAAa,GAAG,cAAc,eAAe,cAAc;AACnE,UAAM,cAAc,MAAM,eAAe,UAAU;AACnD,yBAAqB,aAAa,YAAY,WAAW;AAAA,EAC1D;AACA,SAAO;AACR;AAVS;AAYT,SAAS,qBACR,aACA,YACA,gBACC;AACD,YAAU,YAAY;AACtB,QAAM,QAAQ,UAAU,KAAK,WAAW;AACxC,MAAI,OAAO;AACV,UAAM,SAAS,MAAM,QAAS,CAAC,EAAE,CAAC,IAAI;AACtC,UAAM,YAAY,MAAM,QAAS,CAAC,EAAE,CAAC,IAAI;AACzC,UAAM,QAAQ;AAAA,MACb,iBAAiB;AAAA,MACjB,aAAa;AAAA,MACb,eAAe;AAAA,MACf;AAAA,IACD;AACA,QAAI,MAAM,YAAY,MAAM,aAAa;AACxC,YAAM,gBAAgB;AAAA,QACrB;AAAA,QACA,GAAG,cAAc,MAAM,CAAC,CAAC;AAAA,QACzB,oBAAoB;AAAA,MACrB;AACA,UAAI,cAAc,QAAQ,cAAc,kBAAkB;AACzD,uBAAe,KAAK,aAAa;AAAA,MAClC;AAAA,IACD;AAAA,EACD;AACD;AA3BS;AA6BT,SAAS,cAAc,MAGrB;AACD,SAAO,KAAK,KAAK;AACjB,QAAM,mBAAmB,KAAK,WAAW,GAAG;AAC5C,SAAO,KAAK,QAAQ,iBAAiB,EAAE;AACvC,SAAO,EAAE,MAAM,iBAAiB;AACjC;AARS;",
  "names": []
}
