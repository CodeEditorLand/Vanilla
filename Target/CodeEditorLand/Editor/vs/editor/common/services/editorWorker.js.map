{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/editorWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { IRange } from \"../core/range.js\";\nimport type {\n\tIDocumentDiff,\n\tIDocumentDiffProviderOptions,\n} from \"../diff/documentDiffProvider.js\";\nimport type { IChange } from \"../diff/legacyLinesDiffComputer.js\";\nimport type {\n\tIColorInformation,\n\tIInplaceReplaceSupportResult,\n\tTextEdit,\n} from \"../languages.js\";\nimport type {\n\tFindSectionHeaderOptions,\n\tSectionHeader,\n} from \"./findSectionHeaders.js\";\nimport type { UnicodeHighlighterOptions } from \"./unicodeTextModelHighlighter.js\";\n\nexport const IEditorWorkerService = createDecorator<IEditorWorkerService>(\n\t\"editorWorkerService\",\n);\n\nexport type DiffAlgorithmName = \"legacy\" | \"advanced\";\n\nexport interface IEditorWorkerService {\n\treadonly _serviceBrand: undefined;\n\n\tcanComputeUnicodeHighlights(uri: URI): boolean;\n\tcomputedUnicodeHighlights(\n\t\turi: URI,\n\t\toptions: UnicodeHighlighterOptions,\n\t\trange?: IRange,\n\t): Promise<IUnicodeHighlightsResult>;\n\n\t/** Implementation in {@link BaseEditorSimpleWorker.computeDiff} */\n\tcomputeDiff(\n\t\toriginal: URI,\n\t\tmodified: URI,\n\t\toptions: IDocumentDiffProviderOptions,\n\t\talgorithm: DiffAlgorithmName,\n\t): Promise<IDocumentDiff | null>;\n\n\tcanComputeDirtyDiff(original: URI, modified: URI): boolean;\n\tcomputeDirtyDiff(\n\t\toriginal: URI,\n\t\tmodified: URI,\n\t\tignoreTrimWhitespace: boolean,\n\t): Promise<IChange[] | null>;\n\n\tcomputeMoreMinimalEdits(\n\t\tresource: URI,\n\t\tedits: TextEdit[] | null | undefined,\n\t\tpretty?: boolean,\n\t): Promise<TextEdit[] | undefined>;\n\tcomputeHumanReadableDiff(\n\t\tresource: URI,\n\t\tedits: TextEdit[] | null | undefined,\n\t): Promise<TextEdit[] | undefined>;\n\n\tcanComputeWordRanges(resource: URI): boolean;\n\tcomputeWordRanges(\n\t\tresource: URI,\n\t\trange: IRange,\n\t): Promise<{ [word: string]: IRange[] } | null>;\n\n\tcanNavigateValueSet(resource: URI): boolean;\n\tnavigateValueSet(\n\t\tresource: URI,\n\t\trange: IRange,\n\t\tup: boolean,\n\t): Promise<IInplaceReplaceSupportResult | null>;\n\n\tfindSectionHeaders(\n\t\turi: URI,\n\t\toptions: FindSectionHeaderOptions,\n\t): Promise<SectionHeader[]>;\n\n\tcomputeDefaultDocumentColors(uri: URI): Promise<IColorInformation[] | null>;\n}\n\nexport interface IDiffComputationResult {\n\tquitEarly: boolean;\n\tchanges: ILineChange[];\n\tidentical: boolean;\n\tmoves: ITextMove[];\n}\n\nexport type ILineChange = [\n\toriginalStartLine: number,\n\toriginalEndLine: number,\n\tmodifiedStartLine: number,\n\tmodifiedEndLine: number,\n\tcharChanges: ICharChange[] | undefined,\n];\n\nexport type ICharChange = [\n\toriginalStartLine: number,\n\toriginalStartColumn: number,\n\toriginalEndLine: number,\n\toriginalEndColumn: number,\n\tmodifiedStartLine: number,\n\tmodifiedStartColumn: number,\n\tmodifiedEndLine: number,\n\tmodifiedEndColumn: number,\n];\n\nexport type ITextMove = [\n\toriginalStartLine: number,\n\toriginalEndLine: number,\n\tmodifiedStartLine: number,\n\tmodifiedEndLine: number,\n\tchanges: ILineChange[],\n];\n\nexport interface IUnicodeHighlightsResult {\n\tranges: IRange[];\n\thasMore: boolean;\n\tnonBasicAsciiCharacterCount: number;\n\tinvisibleCharacterCount: number;\n\tambiguousCharacterCount: number;\n}\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAkBzB,MAAM,uBAAuB;AAAA,EACnC;AACD;",
  "names": []
}
