{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/textModelSync/textModelSync.impl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IntervalTimer } from \"../../../../base/common/async.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tIWorkerClient,\n\tIWorkerServer,\n} from \"../../../../base/common/worker/simpleWorker.js\";\nimport { type IPosition, Position } from \"../../core/position.js\";\nimport { type IRange, Range } from \"../../core/range.js\";\nimport {\n\ttype IWordAtPosition,\n\tensureValidWordDefinition,\n\tgetWordAtText,\n} from \"../../core/wordHelper.js\";\nimport type { IDocumentColorComputerTarget } from \"../../languages/defaultDocumentColorsComputer.js\";\nimport type { ILinkComputerTarget } from \"../../languages/linkComputer.js\";\nimport {\n\tMirrorTextModel as BaseMirrorModel,\n\ttype IModelChangedEvent,\n} from \"../../model/mirrorTextModel.js\";\nimport type { IMirrorModel, IWordRange } from \"../editorSimpleWorker.js\";\nimport type { IModelService } from \"../model.js\";\nimport type {\n\tIRawModelData,\n\tIWorkerTextModelSyncChannelServer,\n} from \"./textModelSync.protocol.js\";\n\n/**\n * Stop syncing a model to the worker if it was not needed for 1 min.\n */\nexport const STOP_SYNC_MODEL_DELTA_TIME_MS = 60 * 1000;\n\nexport const WORKER_TEXT_MODEL_SYNC_CHANNEL = \"workerTextModelSync\";\n\nexport class WorkerTextModelSyncClient extends Disposable {\n\tpublic static create(\n\t\tworkerClient: IWorkerClient<any>,\n\t\tmodelService: IModelService,\n\t): WorkerTextModelSyncClient {\n\t\treturn new WorkerTextModelSyncClient(\n\t\t\tworkerClient.getChannel<IWorkerTextModelSyncChannelServer>(\n\t\t\t\tWORKER_TEXT_MODEL_SYNC_CHANNEL,\n\t\t\t),\n\t\t\tmodelService,\n\t\t);\n\t}\n\n\tprivate readonly _proxy: IWorkerTextModelSyncChannelServer;\n\tprivate readonly _modelService: IModelService;\n\tprivate _syncedModels: { [modelUrl: string]: IDisposable } =\n\t\tObject.create(null);\n\tprivate _syncedModelsLastUsedTime: { [modelUrl: string]: number } =\n\t\tObject.create(null);\n\n\tconstructor(\n\t\tproxy: IWorkerTextModelSyncChannelServer,\n\t\tmodelService: IModelService,\n\t\tkeepIdleModels = false,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = proxy;\n\t\tthis._modelService = modelService;\n\n\t\tif (!keepIdleModels) {\n\t\t\tconst timer = new IntervalTimer();\n\t\t\ttimer.cancelAndSet(\n\t\t\t\t() => this._checkStopModelSync(),\n\t\t\t\tMath.round(STOP_SYNC_MODEL_DELTA_TIME_MS / 2),\n\t\t\t);\n\t\t\tthis._register(timer);\n\t\t}\n\t}\n\n\tpublic override dispose(): void {\n\t\tfor (const modelUrl in this._syncedModels) {\n\t\t\tdispose(this._syncedModels[modelUrl]);\n\t\t}\n\t\tthis._syncedModels = Object.create(null);\n\t\tthis._syncedModelsLastUsedTime = Object.create(null);\n\t\tsuper.dispose();\n\t}\n\n\tpublic ensureSyncedResources(\n\t\tresources: URI[],\n\t\tforceLargeModels = false,\n\t): void {\n\t\tfor (const resource of resources) {\n\t\t\tconst resourceStr = resource.toString();\n\n\t\t\tif (!this._syncedModels[resourceStr]) {\n\t\t\t\tthis._beginModelSync(resource, forceLargeModels);\n\t\t\t}\n\t\t\tif (this._syncedModels[resourceStr]) {\n\t\t\t\tthis._syncedModelsLastUsedTime[resourceStr] =\n\t\t\t\t\tnew Date().getTime();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _checkStopModelSync(): void {\n\t\tconst currentTime = new Date().getTime();\n\n\t\tconst toRemove: string[] = [];\n\t\tfor (const modelUrl in this._syncedModelsLastUsedTime) {\n\t\t\tconst elapsedTime =\n\t\t\t\tcurrentTime - this._syncedModelsLastUsedTime[modelUrl];\n\t\t\tif (elapsedTime > STOP_SYNC_MODEL_DELTA_TIME_MS) {\n\t\t\t\ttoRemove.push(modelUrl);\n\t\t\t}\n\t\t}\n\n\t\tfor (const e of toRemove) {\n\t\t\tthis._stopModelSync(e);\n\t\t}\n\t}\n\n\tprivate _beginModelSync(resource: URI, forceLargeModels: boolean): void {\n\t\tconst model = this._modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tif (!forceLargeModels && model.isTooLargeForSyncing()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelUrl = resource.toString();\n\n\t\tthis._proxy.$acceptNewModel({\n\t\t\turl: model.uri.toString(),\n\t\t\tlines: model.getLinesContent(),\n\t\t\tEOL: model.getEOL(),\n\t\t\tversionId: model.getVersionId(),\n\t\t});\n\n\t\tconst toDispose = new DisposableStore();\n\t\ttoDispose.add(\n\t\t\tmodel.onDidChangeContent((e) => {\n\t\t\t\tthis._proxy.$acceptModelChanged(modelUrl.toString(), e);\n\t\t\t}),\n\t\t);\n\t\ttoDispose.add(\n\t\t\tmodel.onWillDispose(() => {\n\t\t\t\tthis._stopModelSync(modelUrl);\n\t\t\t}),\n\t\t);\n\t\ttoDispose.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis._proxy.$acceptRemovedModel(modelUrl);\n\t\t\t}),\n\t\t);\n\n\t\tthis._syncedModels[modelUrl] = toDispose;\n\t}\n\n\tprivate _stopModelSync(modelUrl: string): void {\n\t\tconst toDispose = this._syncedModels[modelUrl];\n\t\tdelete this._syncedModels[modelUrl];\n\t\tdelete this._syncedModelsLastUsedTime[modelUrl];\n\t\tdispose(toDispose);\n\t}\n}\n\nexport class WorkerTextModelSyncServer\n\timplements IWorkerTextModelSyncChannelServer\n{\n\tprivate readonly _models: { [uri: string]: MirrorModel };\n\n\tconstructor() {\n\t\tthis._models = Object.create(null);\n\t}\n\n\tpublic bindToServer(workerServer: IWorkerServer): void {\n\t\tworkerServer.setChannel(WORKER_TEXT_MODEL_SYNC_CHANNEL, this);\n\t}\n\n\tpublic getModel(uri: string): ICommonModel | undefined {\n\t\treturn this._models[uri];\n\t}\n\n\tpublic getModels(): ICommonModel[] {\n\t\tconst all: MirrorModel[] = [];\n\t\tObject.keys(this._models).forEach((key) => all.push(this._models[key]));\n\t\treturn all;\n\t}\n\n\t$acceptNewModel(data: IRawModelData): void {\n\t\tthis._models[data.url] = new MirrorModel(\n\t\t\tURI.parse(data.url),\n\t\t\tdata.lines,\n\t\t\tdata.EOL,\n\t\t\tdata.versionId,\n\t\t);\n\t}\n\n\t$acceptModelChanged(uri: string, e: IModelChangedEvent): void {\n\t\tif (!this._models[uri]) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._models[uri];\n\t\tmodel.onEvents(e);\n\t}\n\n\t$acceptRemovedModel(uri: string): void {\n\t\tif (!this._models[uri]) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._models[uri];\n\t}\n}\n\nexport class MirrorModel extends BaseMirrorModel implements ICommonModel {\n\tpublic get uri(): URI {\n\t\treturn this._uri;\n\t}\n\n\tpublic get eol(): string {\n\t\treturn this._eol;\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this.getText();\n\t}\n\n\tpublic findMatches(regex: RegExp): RegExpMatchArray[] {\n\t\tconst matches = [];\n\t\tfor (let i = 0; i < this._lines.length; i++) {\n\t\t\tconst line = this._lines[i];\n\t\t\tconst offsetToAdd = this.offsetAt(new Position(i + 1, 1));\n\t\t\tconst iteratorOverMatches = line.matchAll(regex);\n\t\t\tfor (const match of iteratorOverMatches) {\n\t\t\t\tif (match.index || match.index === 0) {\n\t\t\t\t\tmatch.index = match.index + offsetToAdd;\n\t\t\t\t}\n\t\t\t\tmatches.push(match);\n\t\t\t}\n\t\t}\n\t\treturn matches;\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\treturn this._lines.slice(0);\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.length;\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._lines[lineNumber - 1];\n\t}\n\n\tpublic getWordAtPosition(\n\t\tposition: IPosition,\n\t\twordDefinition: RegExp,\n\t): Range | null {\n\t\tconst wordAtText = getWordAtText(\n\t\t\tposition.column,\n\t\t\tensureValidWordDefinition(wordDefinition),\n\t\t\tthis._lines[position.lineNumber - 1],\n\t\t\t0,\n\t\t);\n\n\t\tif (wordAtText) {\n\t\t\treturn new Range(\n\t\t\t\tposition.lineNumber,\n\t\t\t\twordAtText.startColumn,\n\t\t\t\tposition.lineNumber,\n\t\t\t\twordAtText.endColumn,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getWordUntilPosition(\n\t\tposition: IPosition,\n\t\twordDefinition: RegExp,\n\t): IWordAtPosition {\n\t\tconst wordAtPosition = this.getWordAtPosition(position, wordDefinition);\n\t\tif (!wordAtPosition) {\n\t\t\treturn {\n\t\t\t\tword: \"\",\n\t\t\t\tstartColumn: position.column,\n\t\t\t\tendColumn: position.column,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tword: this._lines[position.lineNumber - 1].substring(\n\t\t\t\twordAtPosition.startColumn - 1,\n\t\t\t\tposition.column - 1,\n\t\t\t),\n\t\t\tstartColumn: wordAtPosition.startColumn,\n\t\t\tendColumn: position.column,\n\t\t};\n\t}\n\n\tpublic words(wordDefinition: RegExp): Iterable<string> {\n\t\tconst lines = this._lines;\n\t\tconst wordenize = this._wordenize.bind(this);\n\n\t\tlet lineNumber = 0;\n\t\tlet lineText = \"\";\n\t\tlet wordRangesIdx = 0;\n\t\tlet wordRanges: IWordRange[] = [];\n\n\t\treturn {\n\t\t\t*[Symbol.iterator]() {\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (wordRangesIdx < wordRanges.length) {\n\t\t\t\t\t\tconst value = lineText.substring(\n\t\t\t\t\t\t\twordRanges[wordRangesIdx].start,\n\t\t\t\t\t\t\twordRanges[wordRangesIdx].end,\n\t\t\t\t\t\t);\n\t\t\t\t\t\twordRangesIdx += 1;\n\t\t\t\t\t\tyield value;\n\t\t\t\t\t} else if (lineNumber < lines.length) {\n\t\t\t\t\t\tlineText = lines[lineNumber];\n\t\t\t\t\t\twordRanges = wordenize(lineText, wordDefinition);\n\t\t\t\t\t\twordRangesIdx = 0;\n\t\t\t\t\t\tlineNumber += 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic getLineWords(\n\t\tlineNumber: number,\n\t\twordDefinition: RegExp,\n\t): IWordAtPosition[] {\n\t\tconst content = this._lines[lineNumber - 1];\n\t\tconst ranges = this._wordenize(content, wordDefinition);\n\t\tconst words: IWordAtPosition[] = [];\n\t\tfor (const range of ranges) {\n\t\t\twords.push({\n\t\t\t\tword: content.substring(range.start, range.end),\n\t\t\t\tstartColumn: range.start + 1,\n\t\t\t\tendColumn: range.end + 1,\n\t\t\t});\n\t\t}\n\t\treturn words;\n\t}\n\n\tprivate _wordenize(content: string, wordDefinition: RegExp): IWordRange[] {\n\t\tconst result: IWordRange[] = [];\n\t\tlet match: RegExpExecArray | null;\n\n\t\twordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n\n\t\twhile ((match = wordDefinition.exec(content))) {\n\t\t\tif (match[0].length === 0) {\n\t\t\t\t// it did match the empty string\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult.push({\n\t\t\t\tstart: match.index,\n\t\t\t\tend: match.index + match[0].length,\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getValueInRange(range: IRange): string {\n\t\trange = this._validateRange(range);\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn this._lines[range.startLineNumber - 1].substring(\n\t\t\t\trange.startColumn - 1,\n\t\t\t\trange.endColumn - 1,\n\t\t\t);\n\t\t}\n\n\t\tconst lineEnding = this._eol;\n\t\tconst startLineIndex = range.startLineNumber - 1;\n\t\tconst endLineIndex = range.endLineNumber - 1;\n\t\tconst resultLines: string[] = [];\n\n\t\tresultLines.push(\n\t\t\tthis._lines[startLineIndex].substring(range.startColumn - 1),\n\t\t);\n\t\tfor (let i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._lines[i]);\n\t\t}\n\t\tresultLines.push(\n\t\t\tthis._lines[endLineIndex].substring(0, range.endColumn - 1),\n\t\t);\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tpublic offsetAt(position: IPosition): number {\n\t\tposition = this._validatePosition(position);\n\t\tthis._ensureLineStarts();\n\t\treturn (\n\t\t\tthis._lineStarts!.getPrefixSum(position.lineNumber - 2) +\n\t\t\t(position.column - 1)\n\t\t);\n\t}\n\n\tpublic positionAt(offset: number): IPosition {\n\t\toffset = Math.floor(offset);\n\t\toffset = Math.max(0, offset);\n\n\t\tthis._ensureLineStarts();\n\t\tconst out = this._lineStarts!.getIndexOf(offset);\n\t\tconst lineLength = this._lines[out.index].length;\n\n\t\t// Ensure we return a valid position\n\t\treturn {\n\t\t\tlineNumber: 1 + out.index,\n\t\t\tcolumn: 1 + Math.min(out.remainder, lineLength),\n\t\t};\n\t}\n\n\tprivate _validateRange(range: IRange): IRange {\n\t\tconst start = this._validatePosition({\n\t\t\tlineNumber: range.startLineNumber,\n\t\t\tcolumn: range.startColumn,\n\t\t});\n\t\tconst end = this._validatePosition({\n\t\t\tlineNumber: range.endLineNumber,\n\t\t\tcolumn: range.endColumn,\n\t\t});\n\n\t\tif (\n\t\t\tstart.lineNumber !== range.startLineNumber ||\n\t\t\tstart.column !== range.startColumn ||\n\t\t\tend.lineNumber !== range.endLineNumber ||\n\t\t\tend.column !== range.endColumn\n\t\t) {\n\t\t\treturn {\n\t\t\t\tstartLineNumber: start.lineNumber,\n\t\t\t\tstartColumn: start.column,\n\t\t\t\tendLineNumber: end.lineNumber,\n\t\t\t\tendColumn: end.column,\n\t\t\t};\n\t\t}\n\n\t\treturn range;\n\t}\n\n\tprivate _validatePosition(position: IPosition): IPosition {\n\t\tif (!Position.isIPosition(position)) {\n\t\t\tthrow new Error(\"bad position\");\n\t\t}\n\t\tlet { lineNumber, column } = position;\n\t\tlet hasChanged = false;\n\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tcolumn = 1;\n\t\t\thasChanged = true;\n\t\t} else if (lineNumber > this._lines.length) {\n\t\t\tlineNumber = this._lines.length;\n\t\t\tcolumn = this._lines[lineNumber - 1].length + 1;\n\t\t\thasChanged = true;\n\t\t} else {\n\t\t\tconst maxCharacter = this._lines[lineNumber - 1].length + 1;\n\t\t\tif (column < 1) {\n\t\t\t\tcolumn = 1;\n\t\t\t\thasChanged = true;\n\t\t\t} else if (column > maxCharacter) {\n\t\t\t\tcolumn = maxCharacter;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (hasChanged) {\n\t\t\treturn { lineNumber, column };\n\t\t} else {\n\t\t\treturn position;\n\t\t}\n\t}\n}\n\nexport interface ICommonModel\n\textends ILinkComputerTarget,\n\t\tIDocumentColorComputerTarget,\n\t\tIMirrorModel {\n\turi: URI;\n\tversion: number;\n\teol: string;\n\tgetValue(): string;\n\n\tgetLinesContent(): string[];\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineWords(lineNumber: number, wordDefinition: RegExp): IWordAtPosition[];\n\twords(wordDefinition: RegExp): Iterable<string>;\n\tgetWordUntilPosition(\n\t\tposition: IPosition,\n\t\twordDefinition: RegExp,\n\t): IWordAtPosition;\n\tgetValueInRange(range: IRange): string;\n\tgetWordAtPosition(\n\t\tposition: IPosition,\n\t\twordDefinition: RegExp,\n\t): Range | null;\n\toffsetAt(position: IPosition): number;\n\tpositionAt(offset: number): IPosition;\n\tfindMatches(regex: RegExp): RegExpMatchArray[];\n}\n"],
  "mappings": "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",
  "names": []
}
