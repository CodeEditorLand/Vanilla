{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/getIconClasses.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { URI, URI as uri } from '../../../base/common/uri.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { IModelService } from './model.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\n\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\n\nexport function getIconClasses(modelService: IModelService, languageService: ILanguageService, resource: uri | undefined, fileKind?: FileKind, icon?: ThemeIcon | URI): string[] {\n\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\treturn [`codicon-${icon.id}`, 'predefined-file-icon'];\n\t}\n\n\tif (URI.isUri(icon)) {\n\t\treturn [];\n\t}\n\n\t// we always set these base classes even if we do not have a path\n\tconst classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\tif (resource) {\n\n\t\t// Get the path and name of the resource. For data-URIs, we need to parse specially\n\t\tlet name: string | undefined;\n\t\tif (resource.scheme === Schemas.data) {\n\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\tname = metadata.get(DataUri.META_DATA_LABEL);\n\t\t} else {\n\t\t\tconst match = resource.path.match(fileIconDirectoryRegex);\n\t\t\tif (match) {\n\t\t\t\tname = cssEscape(match[2].toLowerCase());\n\t\t\t\tif (match[1]) {\n\t\t\t\t\tclasses.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tname = cssEscape(resource.authority.toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\t// Root Folders\n\t\tif (fileKind === FileKind.ROOT_FOLDER) {\n\t\t\tclasses.push(`${name}-root-name-folder-icon`);\n\t\t}\n\n\t\t// Folders\n\t\telse if (fileKind === FileKind.FOLDER) {\n\t\t\tclasses.push(`${name}-name-folder-icon`);\n\t\t}\n\n\t\t// Files\n\t\telse {\n\n\t\t\t// Name & Extension(s)\n\t\t\tif (name) {\n\t\t\t\tclasses.push(`${name}-name-file-icon`);\n\t\t\t\tclasses.push(`name-file-icon`); // extra segment to increase file-name score\n\t\t\t\t// Avoid doing an explosive combination of extensions for very long filenames\n\t\t\t\t// (most file systems do not allow files > 255 length) with lots of `.` characters\n\t\t\t\t// https://github.com/microsoft/vscode/issues/116199\n\t\t\t\tif (name.length <= 255) {\n\t\t\t\t\tconst dotSegments = name.split('.');\n\t\t\t\t\tfor (let i = 1; i < dotSegments.length; i++) {\n\t\t\t\t\t\tclasses.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclasses.push(`ext-file-icon`); // extra segment to increase file-ext score\n\t\t\t}\n\n\t\t\t// Detected Mode\n\t\t\tconst detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n\t\t\tif (detectedLanguageId) {\n\t\t\t\tclasses.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n\t\t\t}\n\t\t}\n\t}\n\treturn classes;\n}\n\nexport function getIconClassesForLanguageId(languageId: string): string[] {\n\treturn ['file-icon', `${cssEscape(languageId)}-lang-file-icon`];\n}\n\nfunction detectLanguageId(modelService: IModelService, languageService: ILanguageService, resource: uri): string | null {\n\tif (!resource) {\n\t\treturn null; // we need a resource at least\n\t}\n\n\tlet languageId: string | null = null;\n\n\t// Data URI: check for encoded metadata\n\tif (resource.scheme === Schemas.data) {\n\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\tconst mime = metadata.get(DataUri.META_DATA_MIME);\n\n\t\tif (mime) {\n\t\t\tlanguageId = languageService.getLanguageIdByMimeType(mime);\n\t\t}\n\t}\n\n\t// Any other URI: check for model if existing\n\telse {\n\t\tconst model = modelService.getModel(resource);\n\t\tif (model) {\n\t\t\tlanguageId = model.getLanguageId();\n\t\t}\n\t}\n\n\t// only take if the language id is specific (aka no just plain text)\n\tif (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\treturn languageId;\n\t}\n\n\t// otherwise fallback to path based detection\n\treturn languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\n\nfunction cssEscape(str: string): string {\n\treturn str.replace(/[\\s]/g, '/'); // HTML class names can not contain certain whitespace characters (https://dom.spec.whatwg.org/#interface-domtokenlist), use / instead, which doesn't exist in file names.\n}\n"],
  "mappings": "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",
  "names": []
}
