{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/modelUndoRedoParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IModelService } from './model.js';\nimport { ITextModelService } from './resolverService.js';\nimport { Disposable, IDisposable, dispose } from '../../../base/common/lifecycle.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { IUndoRedoDelegate, MultiModelEditStackElement } from '../model/editStack.js';\n\nexport class ModelUndoRedoParticipant extends Disposable implements IUndoRedoDelegate {\n\tconstructor(\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._modelService.onModelRemoved((model) => {\n\t\t\t// a model will get disposed, so let's check if the undo redo stack is maintained\n\t\t\tconst elements = this._undoRedoService.getElements(model.uri);\n\t\t\tif (elements.past.length === 0 && elements.future.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const element of elements.past) {\n\t\t\t\tif (element instanceof MultiModelEditStackElement) {\n\t\t\t\t\telement.setDelegate(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const element of elements.future) {\n\t\t\t\tif (element instanceof MultiModelEditStackElement) {\n\t\t\t\t\telement.setDelegate(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic prepareUndoRedo(element: MultiModelEditStackElement): IDisposable | Promise<IDisposable> {\n\t\t// Load all the needed text models\n\t\tconst missingModels = element.getMissingModels();\n\t\tif (missingModels.length === 0) {\n\t\t\t// All models are available!\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst disposablesPromises = missingModels.map(async (uri) => {\n\t\t\ttry {\n\t\t\t\tconst reference = await this._textModelService.createModelReference(uri);\n\t\t\t\treturn <IDisposable>reference;\n\t\t\t} catch (err) {\n\t\t\t\t// This model could not be loaded, maybe it was deleted in the meantime?\n\t\t\t\treturn Disposable.None;\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.all(disposablesPromises).then(disposables => {\n\t\t\treturn {\n\t\t\t\tdispose: () => dispose(disposables)\n\t\t\t};\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,qBAAqB;AAC9B,SAAS,yBAAyB;AAClC,SAAS,YAAY,aAAa,eAAe;AACjD,SAAS,wBAAwB;AACjC,SAAS,mBAAmB,kCAAkC;AAEvD,IAAM,2BAAN,cAAuC,WAAwC;AAAA,EACrF,YACiC,eACI,mBACD,kBAClC;AACD,UAAM;AAJ0B;AACI;AACD;AAGnC,SAAK,UAAU,KAAK,cAAc,eAAe,CAAC,UAAU;AAE3D,YAAM,WAAW,KAAK,iBAAiB,YAAY,MAAM,GAAG;AAC5D,UAAI,SAAS,KAAK,WAAW,KAAK,SAAS,OAAO,WAAW,GAAG;AAC/D;AAAA,MACD;AACA,iBAAW,WAAW,SAAS,MAAM;AACpC,YAAI,mBAAmB,4BAA4B;AAClD,kBAAQ,YAAY,IAAI;AAAA,QACzB;AAAA,MACD;AACA,iBAAW,WAAW,SAAS,QAAQ;AACtC,YAAI,mBAAmB,4BAA4B;AAClD,kBAAQ,YAAY,IAAI;AAAA,QACzB;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAnCD,OAWsF;AAAA;AAAA;AAAA,EA0B9E,gBAAgB,SAAyE;AAE/F,UAAM,gBAAgB,QAAQ,iBAAiB;AAC/C,QAAI,cAAc,WAAW,GAAG;AAE/B,aAAO,WAAW;AAAA,IACnB;AAEA,UAAM,sBAAsB,cAAc,IAAI,OAAO,QAAQ;AAC5D,UAAI;AACH,cAAM,YAAY,MAAM,KAAK,kBAAkB,qBAAqB,GAAG;AACvE,eAAoB;AAAA,MACrB,SAAS,KAAK;AAEb,eAAO,WAAW;AAAA,MACnB;AAAA,IACD,CAAC;AAED,WAAO,QAAQ,IAAI,mBAAmB,EAAE,KAAK,iBAAe;AAC3D,aAAO;AAAA,QACN,SAAS,6BAAM,QAAQ,WAAW,GAAzB;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAlDa,2BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,GAJU;",
  "names": []
}
