{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/languageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tobservableFromEvent,\n} from \"../../../base/common/observable.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { type ILanguageIdCodec, TokenizationRegistry } from \"../languages.js\";\nimport type {\n\tILanguageExtensionPoint,\n\tILanguageIcon,\n\tILanguageNameIdPair,\n\tILanguageSelection,\n\tILanguageService,\n} from \"../languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../languages/modesRegistry.js\";\nimport { LanguagesRegistry } from \"./languagesRegistry.js\";\n\nexport class LanguageService extends Disposable implements ILanguageService {\n\tpublic _serviceBrand: undefined;\n\n\tstatic instanceCount = 0;\n\n\tprivate readonly _onDidRequestBasicLanguageFeatures = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\tpublic readonly onDidRequestBasicLanguageFeatures =\n\t\tthis._onDidRequestBasicLanguageFeatures.event;\n\n\tprivate readonly _onDidRequestRichLanguageFeatures = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\tpublic readonly onDidRequestRichLanguageFeatures =\n\t\tthis._onDidRequestRichLanguageFeatures.event;\n\n\tprotected readonly _onDidChange = this._register(\n\t\tnew Emitter<void>({\n\t\t\tleakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */,\n\t\t}),\n\t);\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly _requestedBasicLanguages = new Set<string>();\n\tprivate readonly _requestedRichLanguages = new Set<string>();\n\n\tprotected readonly _registry: LanguagesRegistry;\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(warnOnOverwrite = false) {\n\t\tsuper();\n\t\tLanguageService.instanceCount++;\n\t\tthis._registry = this._register(\n\t\t\tnew LanguagesRegistry(true, warnOnOverwrite),\n\t\t);\n\t\tthis.languageIdCodec = this._registry.languageIdCodec;\n\t\tthis._register(\n\t\t\tthis._registry.onDidChange(() => this._onDidChange.fire()),\n\t\t);\n\t}\n\n\tpublic override dispose(): void {\n\t\tLanguageService.instanceCount--;\n\t\tsuper.dispose();\n\t}\n\n\tpublic registerLanguage(def: ILanguageExtensionPoint): IDisposable {\n\t\treturn this._registry.registerLanguage(def);\n\t}\n\n\tpublic isRegisteredLanguageId(\n\t\tlanguageId: string | null | undefined,\n\t): boolean {\n\t\treturn this._registry.isRegisteredLanguageId(languageId);\n\t}\n\n\tpublic getRegisteredLanguageIds(): string[] {\n\t\treturn this._registry.getRegisteredLanguageIds();\n\t}\n\n\tpublic getSortedRegisteredLanguageNames(): ILanguageNameIdPair[] {\n\t\treturn this._registry.getSortedRegisteredLanguageNames();\n\t}\n\n\tpublic getLanguageName(languageId: string): string | null {\n\t\treturn this._registry.getLanguageName(languageId);\n\t}\n\n\tpublic getMimeType(languageId: string): string | null {\n\t\treturn this._registry.getMimeType(languageId);\n\t}\n\n\tpublic getIcon(languageId: string): ILanguageIcon | null {\n\t\treturn this._registry.getIcon(languageId);\n\t}\n\n\tpublic getExtensions(languageId: string): ReadonlyArray<string> {\n\t\treturn this._registry.getExtensions(languageId);\n\t}\n\n\tpublic getFilenames(languageId: string): ReadonlyArray<string> {\n\t\treturn this._registry.getFilenames(languageId);\n\t}\n\n\tpublic getConfigurationFiles(languageId: string): ReadonlyArray<URI> {\n\t\treturn this._registry.getConfigurationFiles(languageId);\n\t}\n\n\tpublic getLanguageIdByLanguageName(languageName: string): string | null {\n\t\treturn this._registry.getLanguageIdByLanguageName(languageName);\n\t}\n\n\tpublic getLanguageIdByMimeType(\n\t\tmimeType: string | null | undefined,\n\t): string | null {\n\t\treturn this._registry.getLanguageIdByMimeType(mimeType);\n\t}\n\n\tpublic guessLanguageIdByFilepathOrFirstLine(\n\t\tresource: URI | null,\n\t\tfirstLine?: string,\n\t): string | null {\n\t\tconst languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(\n\t\t\tresource,\n\t\t\tfirstLine,\n\t\t);\n\t\treturn languageIds.at(0) ?? null;\n\t}\n\n\tpublic createById(\n\t\tlanguageId: string | null | undefined,\n\t): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tpublic createByMimeType(\n\t\tmimeType: string | null | undefined,\n\t): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\tconst languageId = this.getLanguageIdByMimeType(mimeType);\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tpublic createByFilepathOrFirstLine(\n\t\tresource: URI | null,\n\t\tfirstLine?: string,\n\t): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\tconst languageId = this.guessLanguageIdByFilepathOrFirstLine(\n\t\t\t\tresource,\n\t\t\t\tfirstLine,\n\t\t\t);\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tprivate _createAndGetLanguageIdentifier(\n\t\tlanguageId: string | null | undefined,\n\t): string {\n\t\tif (!languageId || !this.isRegisteredLanguageId(languageId)) {\n\t\t\t// Fall back to plain text if language is unknown\n\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\n\t\treturn languageId;\n\t}\n\n\tpublic requestBasicLanguageFeatures(languageId: string): void {\n\t\tif (!this._requestedBasicLanguages.has(languageId)) {\n\t\t\tthis._requestedBasicLanguages.add(languageId);\n\t\t\tthis._onDidRequestBasicLanguageFeatures.fire(languageId);\n\t\t}\n\t}\n\n\tpublic requestRichLanguageFeatures(languageId: string): void {\n\t\tif (!this._requestedRichLanguages.has(languageId)) {\n\t\t\tthis._requestedRichLanguages.add(languageId);\n\n\t\t\t// Ensure basic features are requested\n\t\t\tthis.requestBasicLanguageFeatures(languageId);\n\n\t\t\t// Ensure tokenizers are created\n\t\t\tTokenizationRegistry.getOrCreate(languageId);\n\n\t\t\tthis._onDidRequestRichLanguageFeatures.fire(languageId);\n\t\t}\n\t}\n}\n\nclass LanguageSelection implements ILanguageSelection {\n\tprivate readonly _value: IObservable<string>;\n\tpublic readonly onDidChange: Event<string>;\n\n\tconstructor(onDidChangeLanguages: Event<void>, selector: () => string) {\n\t\tthis._value = observableFromEvent(this, onDidChangeLanguages, () =>\n\t\t\tselector(),\n\t\t);\n\t\tthis.onDidChange = Event.fromObservable(this._value);\n\t}\n\n\tpublic get languageId(): string {\n\t\treturn this._value.get();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
