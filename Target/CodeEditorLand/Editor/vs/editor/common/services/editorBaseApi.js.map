{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/editorBaseApi.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { KeyChord, KeyMod as ConstKeyMod } from '../../../base/common/keyCodes.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Token } from '../languages.js';\nimport * as standaloneEnums from '../standalone/standaloneEnums.js';\n\nexport class KeyMod {\n\tpublic static readonly CtrlCmd: number = ConstKeyMod.CtrlCmd;\n\tpublic static readonly Shift: number = ConstKeyMod.Shift;\n\tpublic static readonly Alt: number = ConstKeyMod.Alt;\n\tpublic static readonly WinCtrl: number = ConstKeyMod.WinCtrl;\n\n\tpublic static chord(firstPart: number, secondPart: number): number {\n\t\treturn KeyChord(firstPart, secondPart);\n\t}\n}\n\nexport function createMonacoBaseAPI(): typeof monaco {\n\treturn {\n\t\teditor: undefined!, // undefined override expected here\n\t\tlanguages: undefined!, // undefined override expected here\n\t\tCancellationTokenSource: CancellationTokenSource,\n\t\tEmitter: Emitter,\n\t\tKeyCode: standaloneEnums.KeyCode,\n\t\tKeyMod: KeyMod,\n\t\tPosition: Position,\n\t\tRange: Range,\n\t\tSelection: <any>Selection,\n\t\tSelectionDirection: standaloneEnums.SelectionDirection,\n\t\tMarkerSeverity: standaloneEnums.MarkerSeverity,\n\t\tMarkerTag: standaloneEnums.MarkerTag,\n\t\tUri: <any>URI,\n\t\tToken: Token\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,+BAA+B;AACxC,SAAS,eAAe;AACxB,SAAS,UAAU,UAAU,mBAAmB;AAChD,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,aAAa;AACtB,YAAY,qBAAqB;AAE1B,MAAM,OAAO;AAAA,EAfpB,OAeoB;AAAA;AAAA;AAAA,EACnB,OAAuB,UAAkB,YAAY;AAAA,EACrD,OAAuB,QAAgB,YAAY;AAAA,EACnD,OAAuB,MAAc,YAAY;AAAA,EACjD,OAAuB,UAAkB,YAAY;AAAA,EAErD,OAAc,MAAM,WAAmB,YAA4B;AAClE,WAAO,SAAS,WAAW,UAAU;AAAA,EACtC;AACD;AAEO,SAAS,sBAAqC;AACpD,SAAO;AAAA,IACN,QAAQ;AAAA;AAAA,IACR,WAAW;AAAA;AAAA,IACX;AAAA,IACA;AAAA,IACA,SAAS,gBAAgB;AAAA,IACzB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,oBAAoB,gBAAgB;AAAA,IACpC,gBAAgB,gBAAgB;AAAA,IAChC,WAAW,gBAAgB;AAAA,IAC3B,KAAU;AAAA,IACV;AAAA,EACD;AACD;AAjBgB;",
  "names": []
}
