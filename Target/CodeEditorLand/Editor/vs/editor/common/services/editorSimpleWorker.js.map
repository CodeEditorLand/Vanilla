{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/editorSimpleWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IRequestHandler, IWorkerServer } from '../../../base/common/worker/simpleWorker.js';\nimport { Position } from '../core/position.js';\nimport { IRange, Range } from '../core/range.js';\nimport { EndOfLineSequence, ITextModel } from '../model.js';\nimport { IMirrorTextModel, IModelChangedEvent } from '../model/mirrorTextModel.js';\nimport { IColorInformation, IInplaceReplaceSupportResult, ILink, TextEdit } from '../languages.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { DiffAlgorithmName, IDiffComputationResult, ILineChange, IUnicodeHighlightsResult } from './editorWorker.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter, UnicodeHighlighterOptions } from './unicodeTextModelHighlighter.js';\nimport { DiffComputer, IChange } from '../diff/legacyLinesDiffComputer.js';\nimport { ILinesDiffComputer, ILinesDiffComputerOptions } from '../diff/linesDiffComputer.js';\nimport { DetailedLineRangeMapping } from '../diff/rangeMapping.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { IDocumentDiffProviderOptions } from '../diff/documentDiffProvider.js';\nimport { AppResourcePath, FileAccess } from '../../../base/common/network.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { FindSectionHeaderOptions, SectionHeader, findSectionHeaders } from './findSectionHeaders.js';\nimport { IRawModelData, IWorkerTextModelSyncChannelServer } from './textModelSync/textModelSync.protocol.js';\nimport { ICommonModel, WorkerTextModelSyncServer } from './textModelSync/textModelSync.impl.js';\n\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n\nexport interface IMirrorModel extends IMirrorTextModel {\n\treadonly uri: URI;\n\treadonly version: number;\n\tgetValue(): string;\n}\n\nexport interface IWorkerContext<H = undefined> {\n\t/**\n\t * A proxy to the main thread host object.\n\t */\n\thost: H;\n\t/**\n\t * Get all available mirror models in this worker.\n\t */\n\tgetMirrorModels(): IMirrorModel[];\n}\n\n/**\n * Range of a word inside a model.\n * @internal\n */\nexport interface IWordRange {\n\t/**\n\t * The index where the word starts.\n\t */\n\treadonly start: number;\n\t/**\n\t * The index where the word ends.\n\t */\n\treadonly end: number;\n}\n\n/**\n * @internal\n */\nexport interface IForeignModuleFactory {\n\t(ctx: IWorkerContext, createData: any): any;\n}\n\ndeclare const require: any;\n\n/**\n * @internal\n */\nexport class BaseEditorSimpleWorker implements IDisposable, IWorkerTextModelSyncChannelServer, IRequestHandler {\n\t_requestHandlerBrand: any;\n\n\tprivate readonly _workerTextModelSyncServer = new WorkerTextModelSyncServer();\n\n\tconstructor() {\n\t}\n\n\tdispose(): void {\n\t}\n\n\tprotected _getModel(uri: string): ICommonModel | undefined {\n\t\treturn this._workerTextModelSyncServer.getModel(uri);\n\t}\n\n\tprotected _getModels(): ICommonModel[] {\n\t\treturn this._workerTextModelSyncServer.getModels();\n\t}\n\n\tpublic $acceptNewModel(data: IRawModelData): void {\n\t\tthis._workerTextModelSyncServer.$acceptNewModel(data);\n\t}\n\n\tpublic $acceptModelChanged(uri: string, e: IModelChangedEvent): void {\n\t\tthis._workerTextModelSyncServer.$acceptModelChanged(uri, e);\n\t}\n\n\tpublic $acceptRemovedModel(uri: string): void {\n\t\tthis._workerTextModelSyncServer.$acceptRemovedModel(uri);\n\t}\n\n\tpublic async $computeUnicodeHighlights(url: string, options: UnicodeHighlighterOptions, range?: IRange): Promise<IUnicodeHighlightsResult> {\n\t\tconst model = this._getModel(url);\n\t\tif (!model) {\n\t\t\treturn { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n\t\t}\n\t\treturn UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n\t}\n\n\tpublic async $findSectionHeaders(url: string, options: FindSectionHeaderOptions): Promise<SectionHeader[]> {\n\t\tconst model = this._getModel(url);\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\t\treturn findSectionHeaders(model, options);\n\t}\n\n\t// ---- BEGIN diff --------------------------------------------------------------------------\n\n\tpublic async $computeDiff(originalUrl: string, modifiedUrl: string, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): Promise<IDiffComputationResult | null> {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\t\tif (!original || !modified) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n\t\treturn result;\n\t}\n\n\tprivate static computeDiff(originalTextModel: ICommonModel | ITextModel, modifiedTextModel: ICommonModel | ITextModel, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): IDiffComputationResult {\n\t\tconst diffAlgorithm: ILinesDiffComputer = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n\n\t\tconst originalLines = originalTextModel.getLinesContent();\n\t\tconst modifiedLines = modifiedTextModel.getLinesContent();\n\n\t\tconst result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n\n\t\tconst identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n\n\t\tfunction getLineChanges(changes: readonly DetailedLineRangeMapping[]): ILineChange[] {\n\t\t\treturn changes.map(m => ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, m.innerChanges?.map(m => [\n\t\t\t\tm.originalRange.startLineNumber,\n\t\t\t\tm.originalRange.startColumn,\n\t\t\t\tm.originalRange.endLineNumber,\n\t\t\t\tm.originalRange.endColumn,\n\t\t\t\tm.modifiedRange.startLineNumber,\n\t\t\t\tm.modifiedRange.startColumn,\n\t\t\t\tm.modifiedRange.endLineNumber,\n\t\t\t\tm.modifiedRange.endColumn,\n\t\t\t])]));\n\t\t}\n\n\t\treturn {\n\t\t\tidentical,\n\t\t\tquitEarly: result.hitTimeout,\n\t\t\tchanges: getLineChanges(result.changes),\n\t\t\tmoves: result.moves.map(m => ([\n\t\t\t\tm.lineRangeMapping.original.startLineNumber,\n\t\t\t\tm.lineRangeMapping.original.endLineNumberExclusive,\n\t\t\t\tm.lineRangeMapping.modified.startLineNumber,\n\t\t\t\tm.lineRangeMapping.modified.endLineNumberExclusive,\n\t\t\t\tgetLineChanges(m.changes)\n\t\t\t])),\n\t\t};\n\t}\n\n\tprivate static _modelsAreIdentical(original: ICommonModel | ITextModel, modified: ICommonModel | ITextModel): boolean {\n\t\tconst originalLineCount = original.getLineCount();\n\t\tconst modifiedLineCount = modified.getLineCount();\n\t\tif (originalLineCount !== modifiedLineCount) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let line = 1; line <= originalLineCount; line++) {\n\t\t\tconst originalLine = original.getLineContent(line);\n\t\t\tconst modifiedLine = modified.getLineContent(line);\n\t\t\tif (originalLine !== modifiedLine) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic async $computeDirtyDiff(originalUrl: string, modifiedUrl: string, ignoreTrimWhitespace: boolean): Promise<IChange[] | null> {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\t\tif (!original || !modified) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst originalLines = original.getLinesContent();\n\t\tconst modifiedLines = modified.getLinesContent();\n\t\tconst diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\t\tshouldComputeCharChanges: false,\n\t\t\tshouldPostProcessCharChanges: false,\n\t\t\tshouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n\t\t\tshouldMakePrettyDiff: true,\n\t\t\tmaxComputationTime: 1000\n\t\t});\n\t\treturn diffComputer.computeDiff().changes;\n\t}\n\n\t// ---- END diff --------------------------------------------------------------------------\n\n\n\t// ---- BEGIN minimal edits ---------------------------------------------------------------\n\n\tprivate static readonly _diffLimit = 100000;\n\n\tpublic async $computeMoreMinimalEdits(modelUrl: string, edits: TextEdit[], pretty: boolean): Promise<TextEdit[]> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tconst result: TextEdit[] = [];\n\t\tlet lastEol: EndOfLineSequence | undefined = undefined;\n\n\t\tedits = edits.slice(0).sort((a, b) => {\n\t\t\tif (a.range && b.range) {\n\t\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\t}\n\t\t\t// eol only changes should go to the end\n\t\t\tconst aRng = a.range ? 0 : 1;\n\t\t\tconst bRng = b.range ? 0 : 1;\n\t\t\treturn aRng - bRng;\n\t\t});\n\n\t\t// merge adjacent edits\n\t\tlet writeIndex = 0;\n\t\tfor (let readIndex = 1; readIndex < edits.length; readIndex++) {\n\t\t\tif (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n\t\t\t\tedits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n\t\t\t\tedits[writeIndex].text += edits[readIndex].text;\n\t\t\t} else {\n\t\t\t\twriteIndex++;\n\t\t\t\tedits[writeIndex] = edits[readIndex];\n\t\t\t}\n\t\t}\n\t\tedits.length = writeIndex + 1;\n\n\t\tfor (let { range, text, eol } of edits) {\n\n\t\t\tif (typeof eol === 'number') {\n\t\t\t\tlastEol = eol;\n\t\t\t}\n\n\t\t\tif (Range.isEmpty(range) && !text) {\n\t\t\t\t// empty change\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst original = model.getValueInRange(range);\n\t\t\ttext = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n\n\t\t\tif (original === text) {\n\t\t\t\t// noop\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure diff won't take too long\n\t\t\tif (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n\t\t\t\tresult.push({ range, text });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// compute diff between original and edit.text\n\t\t\tconst changes = stringDiff(original, text, pretty);\n\t\t\tconst editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n\n\t\t\tfor (const change of changes) {\n\t\t\t\tconst start = model.positionAt(editOffset + change.originalStart);\n\t\t\t\tconst end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n\t\t\t\tconst newEdit: TextEdit = {\n\t\t\t\t\ttext: text.substr(change.modifiedStart, change.modifiedLength),\n\t\t\t\t\trange: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n\t\t\t\t};\n\n\t\t\t\tif (model.getValueInRange(newEdit.range) !== newEdit.text) {\n\t\t\t\t\tresult.push(newEdit);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lastEol === 'number') {\n\t\t\tresult.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic $computeHumanReadableDiff(modelUrl: string, edits: TextEdit[], options: ILinesDiffComputerOptions): TextEdit[] {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tconst result: TextEdit[] = [];\n\t\tlet lastEol: EndOfLineSequence | undefined = undefined;\n\n\t\tedits = edits.slice(0).sort((a, b) => {\n\t\t\tif (a.range && b.range) {\n\t\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\t}\n\t\t\t// eol only changes should go to the end\n\t\t\tconst aRng = a.range ? 0 : 1;\n\t\t\tconst bRng = b.range ? 0 : 1;\n\t\t\treturn aRng - bRng;\n\t\t});\n\n\t\tfor (let { range, text, eol } of edits) {\n\n\t\t\tif (typeof eol === 'number') {\n\t\t\t\tlastEol = eol;\n\t\t\t}\n\n\t\t\tif (Range.isEmpty(range) && !text) {\n\t\t\t\t// empty change\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst original = model.getValueInRange(range);\n\t\t\ttext = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n\n\t\t\tif (original === text) {\n\t\t\t\t// noop\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure diff won't take too long\n\t\t\tif (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n\t\t\t\tresult.push({ range, text });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// compute diff between original and edit.text\n\n\t\t\tconst originalLines = original.split(/\\r\\n|\\n|\\r/);\n\t\t\tconst modifiedLines = text.split(/\\r\\n|\\n|\\r/);\n\n\t\t\tconst diff = linesDiffComputers.getDefault().computeDiff(originalLines, modifiedLines, options);\n\n\t\t\tconst start = Range.lift(range).getStartPosition();\n\n\t\t\tfunction addPositions(pos1: Position, pos2: Position): Position {\n\t\t\t\treturn new Position(pos1.lineNumber + pos2.lineNumber - 1, pos2.lineNumber === 1 ? pos1.column + pos2.column - 1 : pos2.column);\n\t\t\t}\n\n\t\t\tfunction getText(lines: string[], range: Range): string[] {\n\t\t\t\tconst result: string[] = [];\n\t\t\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\t\t\tconst line = lines[i - 1];\n\t\t\t\t\tif (i === range.startLineNumber && i === range.endLineNumber) {\n\t\t\t\t\t\tresult.push(line.substring(range.startColumn - 1, range.endColumn - 1));\n\t\t\t\t\t} else if (i === range.startLineNumber) {\n\t\t\t\t\t\tresult.push(line.substring(range.startColumn - 1));\n\t\t\t\t\t} else if (i === range.endLineNumber) {\n\t\t\t\t\t\tresult.push(line.substring(0, range.endColumn - 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tfor (const c of diff.changes) {\n\t\t\t\tif (c.innerChanges) {\n\t\t\t\t\tfor (const x of c.innerChanges) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\trange: Range.fromPositions(\n\t\t\t\t\t\t\t\taddPositions(start, x.originalRange.getStartPosition()),\n\t\t\t\t\t\t\t\taddPositions(start, x.originalRange.getEndPosition())\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttext: getText(modifiedLines, x.modifiedRange).join(model.eol)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new BugIndicatingError('The experimental diff algorithm always produces inner changes');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lastEol === 'number') {\n\t\t\tresult.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// ---- END minimal edits ---------------------------------------------------------------\n\n\tpublic async $computeLinks(modelUrl: string): Promise<ILink[] | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn computeLinks(model);\n\t}\n\n\t// --- BEGIN default document colors -----------------------------------------------------------\n\n\tpublic async $computeDefaultDocumentColors(modelUrl: string): Promise<IColorInformation[] | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\treturn computeDefaultDocumentColors(model);\n\t}\n\n\t// ---- BEGIN suggest --------------------------------------------------------------------------\n\n\tprivate static readonly _suggestionsLimit = 10000;\n\n\tpublic async $textualSuggest(modelUrls: string[], leadingWord: string | undefined, wordDef: string, wordDefFlags: string): Promise<{ words: string[]; duration: number } | null> {\n\n\t\tconst sw = new StopWatch();\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\t\tconst seen = new Set<string>();\n\n\t\touter: for (const url of modelUrls) {\n\t\t\tconst model = this._getModel(url);\n\t\t\tif (!model) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const word of model.words(wordDefRegExp)) {\n\t\t\t\tif (word === leadingWord || !isNaN(Number(word))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tseen.add(word);\n\t\t\t\tif (seen.size > EditorSimpleWorker._suggestionsLimit) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { words: Array.from(seen), duration: sw.elapsed() };\n\t}\n\n\n\t// ---- END suggest --------------------------------------------------------------------------\n\n\t//#region -- word ranges --\n\n\tpublic async $computeWordRanges(modelUrl: string, range: IRange, wordDef: string, wordDefFlags: string): Promise<{ [word: string]: IRange[] }> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Object.create(null);\n\t\t}\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\t\tconst result: { [word: string]: IRange[] } = Object.create(null);\n\t\tfor (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n\t\t\tconst words = model.getLineWords(line, wordDefRegExp);\n\t\t\tfor (const word of words) {\n\t\t\t\tif (!isNaN(Number(word.word))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet array = result[word.word];\n\t\t\t\tif (!array) {\n\t\t\t\t\tarray = [];\n\t\t\t\t\tresult[word.word] = array;\n\t\t\t\t}\n\t\t\t\tarray.push({\n\t\t\t\t\tstartLineNumber: line,\n\t\t\t\t\tstartColumn: word.startColumn,\n\t\t\t\t\tendLineNumber: line,\n\t\t\t\t\tendColumn: word.endColumn\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t//#endregion\n\n\tpublic async $navigateValueSet(modelUrl: string, range: IRange, up: boolean, wordDef: string, wordDefFlags: string): Promise<IInplaceReplaceSupportResult | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\n\t\tif (range.startColumn === range.endColumn) {\n\t\t\trange = {\n\t\t\t\tstartLineNumber: range.startLineNumber,\n\t\t\t\tstartColumn: range.startColumn,\n\t\t\t\tendLineNumber: range.endLineNumber,\n\t\t\t\tendColumn: range.endColumn + 1\n\t\t\t};\n\t\t}\n\n\t\tconst selectionText = model.getValueInRange(range);\n\n\t\tconst wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n\t\tif (!wordRange) {\n\t\t\treturn null;\n\t\t}\n\t\tconst word = model.getValueInRange(wordRange);\n\t\tconst result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n\t\treturn result;\n\t}\n}\n\n/**\n * @internal\n */\nexport class EditorSimpleWorker extends BaseEditorSimpleWorker {\n\n\tprivate _foreignModule: any = null;\n\n\tconstructor(\n\t\tprivate readonly _host: EditorWorkerHost,\n\t\tprivate readonly _foreignModuleFactory: IForeignModuleFactory | null\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic async $ping() {\n\t\treturn 'pong';\n\t}\n\n\t// ---- BEGIN foreign module support --------------------------------------------------------------------------\n\n\tpublic $loadForeignModule(moduleId: string, createData: any, foreignHostMethods: string[]): Promise<string[]> {\n\t\tconst proxyMethodRequest = (method: string, args: any[]): Promise<any> => {\n\t\t\treturn this._host.$fhr(method, args);\n\t\t};\n\n\t\tconst foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n\n\t\tconst ctx: IWorkerContext<any> = {\n\t\t\thost: foreignHost,\n\t\t\tgetMirrorModels: (): IMirrorModel[] => {\n\t\t\t\treturn this._getModels();\n\t\t\t}\n\t\t};\n\n\t\tif (this._foreignModuleFactory) {\n\t\t\tthis._foreignModule = this._foreignModuleFactory(ctx, createData);\n\t\t\t// static foreing module\n\t\t\treturn Promise.resolve(getAllMethodNames(this._foreignModule));\n\t\t}\n\n\t\treturn new Promise<any>((resolve, reject) => {\n\n\t\t\tconst onModuleCallback = (foreignModule: { create: IForeignModuleFactory }) => {\n\t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n\t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n\t\t\t};\n\n\t\t\tif (!isESM) {\n\t\t\t\trequire([`${moduleId}`], onModuleCallback, reject);\n\t\t\t} else {\n\t\t\t\tconst url = FileAccess.asBrowserUri(`${moduleId}.js` as AppResourcePath).toString(true);\n\t\t\t\timport(`${url}`).then(onModuleCallback).catch(reject);\n\t\t\t}\n\t\t});\n\t}\n\n\t// foreign method request\n\tpublic $fmr(method: string, args: any[]): Promise<any> {\n\t\tif (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n\t\t\treturn Promise.reject(new Error('Missing requestHandler or method: ' + method));\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\t// ---- END foreign module support --------------------------------------------------------------------------\n}\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n * @internal\n */\nexport function create(workerServer: IWorkerServer): IRequestHandler {\n\treturn new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null);\n}\n\n// This is only available in a Web Worker\ndeclare function importScripts(...urls: string[]): void;\n\nif (typeof importScripts === 'function') {\n\t// Running in a web worker\n\tglobalThis.monaco = createMonacoBaseAPI();\n}\n"],
  "mappings": "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",
  "names": ["m", "addPositions", "getText", "range", "result"]
}
