{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/editorSimpleWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stringDiff } from \"../../../base/common/diff/diff.js\";\nimport { BugIndicatingError } from \"../../../base/common/errors.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n} from \"../../../base/common/network.js\";\nimport {\n\tcreateProxyObject,\n\tgetAllMethodNames,\n} from \"../../../base/common/objects.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type {\n\tIRequestHandler,\n\tIWorkerServer,\n} from \"../../../base/common/worker/simpleWorker.js\";\nimport { Position } from \"../core/position.js\";\nimport { type IRange, Range } from \"../core/range.js\";\nimport type { IDocumentDiffProviderOptions } from \"../diff/documentDiffProvider.js\";\nimport { DiffComputer, type IChange } from \"../diff/legacyLinesDiffComputer.js\";\nimport type {\n\tILinesDiffComputer,\n\tILinesDiffComputerOptions,\n} from \"../diff/linesDiffComputer.js\";\nimport { linesDiffComputers } from \"../diff/linesDiffComputers.js\";\nimport type { DetailedLineRangeMapping } from \"../diff/rangeMapping.js\";\nimport type {\n\tIColorInformation,\n\tIInplaceReplaceSupportResult,\n\tILink,\n\tTextEdit,\n} from \"../languages.js\";\nimport { computeDefaultDocumentColors } from \"../languages/defaultDocumentColorsComputer.js\";\nimport { computeLinks } from \"../languages/linkComputer.js\";\nimport { BasicInplaceReplace } from \"../languages/supports/inplaceReplaceSupport.js\";\nimport type { EndOfLineSequence, ITextModel } from \"../model.js\";\nimport type {\n\tIMirrorTextModel,\n\tIModelChangedEvent,\n} from \"../model/mirrorTextModel.js\";\nimport { createMonacoBaseAPI } from \"./editorBaseApi.js\";\nimport type {\n\tDiffAlgorithmName,\n\tIDiffComputationResult,\n\tILineChange,\n\tIUnicodeHighlightsResult,\n} from \"./editorWorker.js\";\nimport { EditorWorkerHost } from \"./editorWorkerHost.js\";\nimport {\n\ttype FindSectionHeaderOptions,\n\ttype SectionHeader,\n\tfindSectionHeaders,\n} from \"./findSectionHeaders.js\";\nimport {\n\ttype ICommonModel,\n\tWorkerTextModelSyncServer,\n} from \"./textModelSync/textModelSync.impl.js\";\nimport type {\n\tIRawModelData,\n\tIWorkerTextModelSyncChannelServer,\n} from \"./textModelSync/textModelSync.protocol.js\";\nimport {\n\ttype UnicodeHighlighterOptions,\n\tUnicodeTextModelHighlighter,\n} from \"./unicodeTextModelHighlighter.js\";\n\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n\nexport interface IMirrorModel extends IMirrorTextModel {\n\treadonly uri: URI;\n\treadonly version: number;\n\tgetValue(): string;\n}\n\nexport interface IWorkerContext<H = undefined> {\n\t/**\n\t * A proxy to the main thread host object.\n\t */\n\thost: H;\n\t/**\n\t * Get all available mirror models in this worker.\n\t */\n\tgetMirrorModels(): IMirrorModel[];\n}\n\n/**\n * Range of a word inside a model.\n * @internal\n */\nexport interface IWordRange {\n\t/**\n\t * The index where the word starts.\n\t */\n\treadonly start: number;\n\t/**\n\t * The index where the word ends.\n\t */\n\treadonly end: number;\n}\n\n/**\n * @internal\n */\nexport interface IForeignModuleFactory {\n\t(ctx: IWorkerContext, createData: any): any;\n}\n\ndeclare const require: any;\n\n/**\n * @internal\n */\nexport class BaseEditorSimpleWorker\n\timplements IDisposable, IWorkerTextModelSyncChannelServer, IRequestHandler\n{\n\t_requestHandlerBrand: any;\n\n\tprivate readonly _workerTextModelSyncServer =\n\t\tnew WorkerTextModelSyncServer();\n\n\tconstructor() {}\n\n\tdispose(): void {}\n\n\tprotected _getModel(uri: string): ICommonModel | undefined {\n\t\treturn this._workerTextModelSyncServer.getModel(uri);\n\t}\n\n\tprotected _getModels(): ICommonModel[] {\n\t\treturn this._workerTextModelSyncServer.getModels();\n\t}\n\n\tpublic $acceptNewModel(data: IRawModelData): void {\n\t\tthis._workerTextModelSyncServer.$acceptNewModel(data);\n\t}\n\n\tpublic $acceptModelChanged(uri: string, e: IModelChangedEvent): void {\n\t\tthis._workerTextModelSyncServer.$acceptModelChanged(uri, e);\n\t}\n\n\tpublic $acceptRemovedModel(uri: string): void {\n\t\tthis._workerTextModelSyncServer.$acceptRemovedModel(uri);\n\t}\n\n\tpublic async $computeUnicodeHighlights(\n\t\turl: string,\n\t\toptions: UnicodeHighlighterOptions,\n\t\trange?: IRange,\n\t): Promise<IUnicodeHighlightsResult> {\n\t\tconst model = this._getModel(url);\n\t\tif (!model) {\n\t\t\treturn {\n\t\t\t\tranges: [],\n\t\t\t\thasMore: false,\n\t\t\t\tambiguousCharacterCount: 0,\n\t\t\t\tinvisibleCharacterCount: 0,\n\t\t\t\tnonBasicAsciiCharacterCount: 0,\n\t\t\t};\n\t\t}\n\t\treturn UnicodeTextModelHighlighter.computeUnicodeHighlights(\n\t\t\tmodel,\n\t\t\toptions,\n\t\t\trange,\n\t\t);\n\t}\n\n\tpublic async $findSectionHeaders(\n\t\turl: string,\n\t\toptions: FindSectionHeaderOptions,\n\t): Promise<SectionHeader[]> {\n\t\tconst model = this._getModel(url);\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\t\treturn findSectionHeaders(model, options);\n\t}\n\n\t// ---- BEGIN diff --------------------------------------------------------------------------\n\n\tpublic async $computeDiff(\n\t\toriginalUrl: string,\n\t\tmodifiedUrl: string,\n\t\toptions: IDocumentDiffProviderOptions,\n\t\talgorithm: DiffAlgorithmName,\n\t): Promise<IDiffComputationResult | null> {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\t\tif (!original || !modified) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result = EditorSimpleWorker.computeDiff(\n\t\t\toriginal,\n\t\t\tmodified,\n\t\t\toptions,\n\t\t\talgorithm,\n\t\t);\n\t\treturn result;\n\t}\n\n\tprivate static computeDiff(\n\t\toriginalTextModel: ICommonModel | ITextModel,\n\t\tmodifiedTextModel: ICommonModel | ITextModel,\n\t\toptions: IDocumentDiffProviderOptions,\n\t\talgorithm: DiffAlgorithmName,\n\t): IDiffComputationResult {\n\t\tconst diffAlgorithm: ILinesDiffComputer =\n\t\t\talgorithm === \"advanced\"\n\t\t\t\t? linesDiffComputers.getDefault()\n\t\t\t\t: linesDiffComputers.getLegacy();\n\n\t\tconst originalLines = originalTextModel.getLinesContent();\n\t\tconst modifiedLines = modifiedTextModel.getLinesContent();\n\n\t\tconst result = diffAlgorithm.computeDiff(\n\t\t\toriginalLines,\n\t\t\tmodifiedLines,\n\t\t\toptions,\n\t\t);\n\n\t\tconst identical =\n\t\t\tresult.changes.length > 0\n\t\t\t\t? false\n\t\t\t\t: this._modelsAreIdentical(\n\t\t\t\t\t\toriginalTextModel,\n\t\t\t\t\t\tmodifiedTextModel,\n\t\t\t\t\t);\n\n\t\tfunction getLineChanges(\n\t\t\tchanges: readonly DetailedLineRangeMapping[],\n\t\t): ILineChange[] {\n\t\t\treturn changes.map((m) => [\n\t\t\t\tm.original.startLineNumber,\n\t\t\t\tm.original.endLineNumberExclusive,\n\t\t\t\tm.modified.startLineNumber,\n\t\t\t\tm.modified.endLineNumberExclusive,\n\t\t\t\tm.innerChanges?.map((m) => [\n\t\t\t\t\tm.originalRange.startLineNumber,\n\t\t\t\t\tm.originalRange.startColumn,\n\t\t\t\t\tm.originalRange.endLineNumber,\n\t\t\t\t\tm.originalRange.endColumn,\n\t\t\t\t\tm.modifiedRange.startLineNumber,\n\t\t\t\t\tm.modifiedRange.startColumn,\n\t\t\t\t\tm.modifiedRange.endLineNumber,\n\t\t\t\t\tm.modifiedRange.endColumn,\n\t\t\t\t]),\n\t\t\t]);\n\t\t}\n\n\t\treturn {\n\t\t\tidentical,\n\t\t\tquitEarly: result.hitTimeout,\n\t\t\tchanges: getLineChanges(result.changes),\n\t\t\tmoves: result.moves.map((m) => [\n\t\t\t\tm.lineRangeMapping.original.startLineNumber,\n\t\t\t\tm.lineRangeMapping.original.endLineNumberExclusive,\n\t\t\t\tm.lineRangeMapping.modified.startLineNumber,\n\t\t\t\tm.lineRangeMapping.modified.endLineNumberExclusive,\n\t\t\t\tgetLineChanges(m.changes),\n\t\t\t]),\n\t\t};\n\t}\n\n\tprivate static _modelsAreIdentical(\n\t\toriginal: ICommonModel | ITextModel,\n\t\tmodified: ICommonModel | ITextModel,\n\t): boolean {\n\t\tconst originalLineCount = original.getLineCount();\n\t\tconst modifiedLineCount = modified.getLineCount();\n\t\tif (originalLineCount !== modifiedLineCount) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let line = 1; line <= originalLineCount; line++) {\n\t\t\tconst originalLine = original.getLineContent(line);\n\t\t\tconst modifiedLine = modified.getLineContent(line);\n\t\t\tif (originalLine !== modifiedLine) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic async $computeDirtyDiff(\n\t\toriginalUrl: string,\n\t\tmodifiedUrl: string,\n\t\tignoreTrimWhitespace: boolean,\n\t): Promise<IChange[] | null> {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\t\tif (!original || !modified) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst originalLines = original.getLinesContent();\n\t\tconst modifiedLines = modified.getLinesContent();\n\t\tconst diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\t\tshouldComputeCharChanges: false,\n\t\t\tshouldPostProcessCharChanges: false,\n\t\t\tshouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n\t\t\tshouldMakePrettyDiff: true,\n\t\t\tmaxComputationTime: 1000,\n\t\t});\n\t\treturn diffComputer.computeDiff().changes;\n\t}\n\n\t// ---- END diff --------------------------------------------------------------------------\n\n\t// ---- BEGIN minimal edits ---------------------------------------------------------------\n\n\tprivate static readonly _diffLimit = 100000;\n\n\tpublic async $computeMoreMinimalEdits(\n\t\tmodelUrl: string,\n\t\tedits: TextEdit[],\n\t\tpretty: boolean,\n\t): Promise<TextEdit[]> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tconst result: TextEdit[] = [];\n\t\tlet lastEol: EndOfLineSequence | undefined;\n\n\t\tedits = edits.slice(0).sort((a, b) => {\n\t\t\tif (a.range && b.range) {\n\t\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\t}\n\t\t\t// eol only changes should go to the end\n\t\t\tconst aRng = a.range ? 0 : 1;\n\t\t\tconst bRng = b.range ? 0 : 1;\n\t\t\treturn aRng - bRng;\n\t\t});\n\n\t\t// merge adjacent edits\n\t\tlet writeIndex = 0;\n\t\tfor (let readIndex = 1; readIndex < edits.length; readIndex++) {\n\t\t\tif (\n\t\t\t\tRange.getEndPosition(edits[writeIndex].range).equals(\n\t\t\t\t\tRange.getStartPosition(edits[readIndex].range),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tedits[writeIndex].range = Range.fromPositions(\n\t\t\t\t\tRange.getStartPosition(edits[writeIndex].range),\n\t\t\t\t\tRange.getEndPosition(edits[readIndex].range),\n\t\t\t\t);\n\t\t\t\tedits[writeIndex].text += edits[readIndex].text;\n\t\t\t} else {\n\t\t\t\twriteIndex++;\n\t\t\t\tedits[writeIndex] = edits[readIndex];\n\t\t\t}\n\t\t}\n\t\tedits.length = writeIndex + 1;\n\n\t\tfor (let { range, text, eol } of edits) {\n\t\t\tif (typeof eol === \"number\") {\n\t\t\t\tlastEol = eol;\n\t\t\t}\n\n\t\t\tif (Range.isEmpty(range) && !text) {\n\t\t\t\t// empty change\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst original = model.getValueInRange(range);\n\t\t\ttext = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n\n\t\t\tif (original === text) {\n\t\t\t\t// noop\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure diff won't take too long\n\t\t\tif (\n\t\t\t\tMath.max(text.length, original.length) >\n\t\t\t\tEditorSimpleWorker._diffLimit\n\t\t\t) {\n\t\t\t\tresult.push({ range, text });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// compute diff between original and edit.text\n\t\t\tconst changes = stringDiff(original, text, pretty);\n\t\t\tconst editOffset = model.offsetAt(\n\t\t\t\tRange.lift(range).getStartPosition(),\n\t\t\t);\n\n\t\t\tfor (const change of changes) {\n\t\t\t\tconst start = model.positionAt(\n\t\t\t\t\teditOffset + change.originalStart,\n\t\t\t\t);\n\t\t\t\tconst end = model.positionAt(\n\t\t\t\t\teditOffset + change.originalStart + change.originalLength,\n\t\t\t\t);\n\t\t\t\tconst newEdit: TextEdit = {\n\t\t\t\t\ttext: text.substr(\n\t\t\t\t\t\tchange.modifiedStart,\n\t\t\t\t\t\tchange.modifiedLength,\n\t\t\t\t\t),\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstartLineNumber: start.lineNumber,\n\t\t\t\t\t\tstartColumn: start.column,\n\t\t\t\t\t\tendLineNumber: end.lineNumber,\n\t\t\t\t\t\tendColumn: end.column,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (model.getValueInRange(newEdit.range) !== newEdit.text) {\n\t\t\t\t\tresult.push(newEdit);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lastEol === \"number\") {\n\t\t\tresult.push({\n\t\t\t\teol: lastEol,\n\t\t\t\ttext: \"\",\n\t\t\t\trange: {\n\t\t\t\t\tstartLineNumber: 0,\n\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\tendColumn: 0,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic $computeHumanReadableDiff(\n\t\tmodelUrl: string,\n\t\tedits: TextEdit[],\n\t\toptions: ILinesDiffComputerOptions,\n\t): TextEdit[] {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tconst result: TextEdit[] = [];\n\t\tlet lastEol: EndOfLineSequence | undefined;\n\n\t\tedits = edits.slice(0).sort((a, b) => {\n\t\t\tif (a.range && b.range) {\n\t\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\t}\n\t\t\t// eol only changes should go to the end\n\t\t\tconst aRng = a.range ? 0 : 1;\n\t\t\tconst bRng = b.range ? 0 : 1;\n\t\t\treturn aRng - bRng;\n\t\t});\n\n\t\tfor (let { range, text, eol } of edits) {\n\t\t\tif (typeof eol === \"number\") {\n\t\t\t\tlastEol = eol;\n\t\t\t}\n\n\t\t\tif (Range.isEmpty(range) && !text) {\n\t\t\t\t// empty change\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst original = model.getValueInRange(range);\n\t\t\ttext = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n\n\t\t\tif (original === text) {\n\t\t\t\t// noop\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure diff won't take too long\n\t\t\tif (\n\t\t\t\tMath.max(text.length, original.length) >\n\t\t\t\tEditorSimpleWorker._diffLimit\n\t\t\t) {\n\t\t\t\tresult.push({ range, text });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// compute diff between original and edit.text\n\n\t\t\tconst originalLines = original.split(/\\r\\n|\\n|\\r/);\n\t\t\tconst modifiedLines = text.split(/\\r\\n|\\n|\\r/);\n\n\t\t\tconst diff = linesDiffComputers\n\t\t\t\t.getDefault()\n\t\t\t\t.computeDiff(originalLines, modifiedLines, options);\n\n\t\t\tconst start = Range.lift(range).getStartPosition();\n\n\t\t\tfunction addPositions(pos1: Position, pos2: Position): Position {\n\t\t\t\treturn new Position(\n\t\t\t\t\tpos1.lineNumber + pos2.lineNumber - 1,\n\t\t\t\t\tpos2.lineNumber === 1\n\t\t\t\t\t\t? pos1.column + pos2.column - 1\n\t\t\t\t\t\t: pos2.column,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfunction getText(lines: string[], range: Range): string[] {\n\t\t\t\tconst result: string[] = [];\n\t\t\t\tfor (\n\t\t\t\t\tlet i = range.startLineNumber;\n\t\t\t\t\ti <= range.endLineNumber;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tconst line = lines[i - 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\ti === range.startLineNumber &&\n\t\t\t\t\t\ti === range.endLineNumber\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\tline.substring(\n\t\t\t\t\t\t\t\trange.startColumn - 1,\n\t\t\t\t\t\t\t\trange.endColumn - 1,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (i === range.startLineNumber) {\n\t\t\t\t\t\tresult.push(line.substring(range.startColumn - 1));\n\t\t\t\t\t} else if (i === range.endLineNumber) {\n\t\t\t\t\t\tresult.push(line.substring(0, range.endColumn - 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tfor (const c of diff.changes) {\n\t\t\t\tif (c.innerChanges) {\n\t\t\t\t\tfor (const x of c.innerChanges) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\trange: Range.fromPositions(\n\t\t\t\t\t\t\t\taddPositions(\n\t\t\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\t\t\tx.originalRange.getStartPosition(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\taddPositions(\n\t\t\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\t\t\tx.originalRange.getEndPosition(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttext: getText(modifiedLines, x.modifiedRange).join(\n\t\t\t\t\t\t\t\tmodel.eol,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new BugIndicatingError(\n\t\t\t\t\t\t\"The experimental diff algorithm always produces inner changes\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lastEol === \"number\") {\n\t\t\tresult.push({\n\t\t\t\teol: lastEol,\n\t\t\t\ttext: \"\",\n\t\t\t\trange: {\n\t\t\t\t\tstartLineNumber: 0,\n\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\tendColumn: 0,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// ---- END minimal edits ---------------------------------------------------------------\n\n\tpublic async $computeLinks(modelUrl: string): Promise<ILink[] | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn computeLinks(model);\n\t}\n\n\t// --- BEGIN default document colors -----------------------------------------------------------\n\n\tpublic async $computeDefaultDocumentColors(\n\t\tmodelUrl: string,\n\t): Promise<IColorInformation[] | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\treturn computeDefaultDocumentColors(model);\n\t}\n\n\t// ---- BEGIN suggest --------------------------------------------------------------------------\n\n\tprivate static readonly _suggestionsLimit = 10000;\n\n\tpublic async $textualSuggest(\n\t\tmodelUrls: string[],\n\t\tleadingWord: string | undefined,\n\t\twordDef: string,\n\t\twordDefFlags: string,\n\t): Promise<{ words: string[]; duration: number } | null> {\n\t\tconst sw = new StopWatch();\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\t\tconst seen = new Set<string>();\n\n\t\touter: for (const url of modelUrls) {\n\t\t\tconst model = this._getModel(url);\n\t\t\tif (!model) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const word of model.words(wordDefRegExp)) {\n\t\t\t\tif (word === leadingWord || !isNaN(Number(word))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tseen.add(word);\n\t\t\t\tif (seen.size > EditorSimpleWorker._suggestionsLimit) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { words: Array.from(seen), duration: sw.elapsed() };\n\t}\n\n\t// ---- END suggest --------------------------------------------------------------------------\n\n\t//#region -- word ranges --\n\n\tpublic async $computeWordRanges(\n\t\tmodelUrl: string,\n\t\trange: IRange,\n\t\twordDef: string,\n\t\twordDefFlags: string,\n\t): Promise<{ [word: string]: IRange[] }> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn Object.create(null);\n\t\t}\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\t\tconst result: { [word: string]: IRange[] } = Object.create(null);\n\t\tfor (\n\t\t\tlet line = range.startLineNumber;\n\t\t\tline < range.endLineNumber;\n\t\t\tline++\n\t\t) {\n\t\t\tconst words = model.getLineWords(line, wordDefRegExp);\n\t\t\tfor (const word of words) {\n\t\t\t\tif (!isNaN(Number(word.word))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet array = result[word.word];\n\t\t\t\tif (!array) {\n\t\t\t\t\tarray = [];\n\t\t\t\t\tresult[word.word] = array;\n\t\t\t\t}\n\t\t\t\tarray.push({\n\t\t\t\t\tstartLineNumber: line,\n\t\t\t\t\tstartColumn: word.startColumn,\n\t\t\t\t\tendLineNumber: line,\n\t\t\t\t\tendColumn: word.endColumn,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t//#endregion\n\n\tpublic async $navigateValueSet(\n\t\tmodelUrl: string,\n\t\trange: IRange,\n\t\tup: boolean,\n\t\twordDef: string,\n\t\twordDefFlags: string,\n\t): Promise<IInplaceReplaceSupportResult | null> {\n\t\tconst model = this._getModel(modelUrl);\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n\n\t\tif (range.startColumn === range.endColumn) {\n\t\t\trange = {\n\t\t\t\tstartLineNumber: range.startLineNumber,\n\t\t\t\tstartColumn: range.startColumn,\n\t\t\t\tendLineNumber: range.endLineNumber,\n\t\t\t\tendColumn: range.endColumn + 1,\n\t\t\t};\n\t\t}\n\n\t\tconst selectionText = model.getValueInRange(range);\n\n\t\tconst wordRange = model.getWordAtPosition(\n\t\t\t{ lineNumber: range.startLineNumber, column: range.startColumn },\n\t\t\twordDefRegExp,\n\t\t);\n\t\tif (!wordRange) {\n\t\t\treturn null;\n\t\t}\n\t\tconst word = model.getValueInRange(wordRange);\n\t\tconst result = BasicInplaceReplace.INSTANCE.navigateValueSet(\n\t\t\trange,\n\t\t\tselectionText,\n\t\t\twordRange,\n\t\t\tword,\n\t\t\tup,\n\t\t);\n\t\treturn result;\n\t}\n}\n\n/**\n * @internal\n */\nexport class EditorSimpleWorker extends BaseEditorSimpleWorker {\n\tprivate _foreignModule: any = null;\n\n\tconstructor(\n\t\tprivate readonly _host: EditorWorkerHost,\n\t\tprivate readonly _foreignModuleFactory: IForeignModuleFactory | null,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic async $ping() {\n\t\treturn \"pong\";\n\t}\n\n\t// ---- BEGIN foreign module support --------------------------------------------------------------------------\n\n\tpublic $loadForeignModule(\n\t\tmoduleId: string,\n\t\tcreateData: any,\n\t\tforeignHostMethods: string[],\n\t): Promise<string[]> {\n\t\tconst proxyMethodRequest = (\n\t\t\tmethod: string,\n\t\t\targs: any[],\n\t\t): Promise<any> => {\n\t\t\treturn this._host.$fhr(method, args);\n\t\t};\n\n\t\tconst foreignHost = createProxyObject(\n\t\t\tforeignHostMethods,\n\t\t\tproxyMethodRequest,\n\t\t);\n\n\t\tconst ctx: IWorkerContext<any> = {\n\t\t\thost: foreignHost,\n\t\t\tgetMirrorModels: (): IMirrorModel[] => {\n\t\t\t\treturn this._getModels();\n\t\t\t},\n\t\t};\n\n\t\tif (this._foreignModuleFactory) {\n\t\t\tthis._foreignModule = this._foreignModuleFactory(ctx, createData);\n\t\t\t// static foreing module\n\t\t\treturn Promise.resolve(getAllMethodNames(this._foreignModule));\n\t\t}\n\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tconst onModuleCallback = (foreignModule: {\n\t\t\t\tcreate: IForeignModuleFactory;\n\t\t\t}) => {\n\t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n\t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n\t\t\t};\n\n\t\t\tif (isESM) {\n\t\t\t\tconst url = FileAccess.asBrowserUri(\n\t\t\t\t\t`${moduleId}.js` as AppResourcePath,\n\t\t\t\t).toString(true);\n\t\t\t\timport(`${url}`).then(onModuleCallback).catch(reject);\n\t\t\t} else {\n\t\t\t\trequire([`${moduleId}`], onModuleCallback, reject);\n\t\t\t}\n\t\t});\n\t}\n\n\t// foreign method request\n\tpublic $fmr(method: string, args: any[]): Promise<any> {\n\t\tif (\n\t\t\t!this._foreignModule ||\n\t\t\ttypeof this._foreignModule[method] !== \"function\"\n\t\t) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\"Missing requestHandler or method: \" + method),\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(\n\t\t\t\tthis._foreignModule[method].apply(this._foreignModule, args),\n\t\t\t);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\t// ---- END foreign module support --------------------------------------------------------------------------\n}\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n * @internal\n */\nexport function create(workerServer: IWorkerServer): IRequestHandler {\n\treturn new EditorSimpleWorker(\n\t\tEditorWorkerHost.getChannel(workerServer),\n\t\tnull,\n\t);\n}\n\n// This is only available in a Web Worker\ndeclare function importScripts(...urls: string[]): void;\n\nif (typeof importScripts === \"function\") {\n\t// Running in a web worker\n\tglobalThis.monaco = createMonacoBaseAPI();\n}\n"],
  "mappings": "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",
  "names": ["m", "addPositions", "getText", "range", "result"]
}
