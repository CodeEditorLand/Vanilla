{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/languagesAssociations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ParsedPattern, parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\n\nexport interface ILanguageAssociation {\n\treadonly id: string;\n\treadonly mime: string;\n\treadonly filename?: string;\n\treadonly extension?: string;\n\treadonly filepattern?: string;\n\treadonly firstline?: RegExp;\n}\n\ninterface ILanguageAssociationItem extends ILanguageAssociation {\n\treadonly userConfigured: boolean;\n\treadonly filenameLowercase?: string;\n\treadonly extensionLowercase?: string;\n\treadonly filepatternLowercase?: ParsedPattern;\n\treadonly filepatternOnPath?: boolean;\n}\n\nlet registeredAssociations: ILanguageAssociationItem[] = [];\nlet nonUserRegisteredAssociations: ILanguageAssociationItem[] = [];\nlet userRegisteredAssociations: ILanguageAssociationItem[] = [];\n\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association: ILanguageAssociation, warnOnOverwrite = false): void {\n\t_registerLanguageAssociation(association, false, warnOnOverwrite);\n}\n\n/**\n * Associate a language to the registry (configured).\n * * **NOTE**: This association will win over associations registered using `registerPlatformLanguageAssociation`.\n * * **NOTE**: Use `clearConfiguredLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerConfiguredLanguageAssociation(association: ILanguageAssociation): void {\n\t_registerLanguageAssociation(association, true, false);\n}\n\nfunction _registerLanguageAssociation(association: ILanguageAssociation, userConfigured: boolean, warnOnOverwrite: boolean): void {\n\n\t// Register\n\tconst associationItem = toLanguageAssociationItem(association, userConfigured);\n\tregisteredAssociations.push(associationItem);\n\tif (!associationItem.userConfigured) {\n\t\tnonUserRegisteredAssociations.push(associationItem);\n\t} else {\n\t\tuserRegisteredAssociations.push(associationItem);\n\t}\n\n\t// Check for conflicts unless this is a user configured association\n\tif (warnOnOverwrite && !associationItem.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === associationItem.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (associationItem.extension && a.extension === associationItem.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filename && a.filename === associationItem.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.firstline && a.firstline === associationItem.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toLanguageAssociationItem(association: ILanguageAssociation, userConfigured: boolean): ILanguageAssociationItem {\n\treturn {\n\t\tid: association.id,\n\t\tmime: association.mime,\n\t\tfilename: association.filename,\n\t\textension: association.extension,\n\t\tfilepattern: association.filepattern,\n\t\tfirstline: association.firstline,\n\t\tuserConfigured: userConfigured,\n\t\tfilenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n\t\textensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n\t\tfilepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n\t\tfilepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n\t};\n}\n\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations(): void {\n\tregisteredAssociations = registeredAssociations.filter(a => a.userConfigured);\n\tnonUserRegisteredAssociations = [];\n}\n\n/**\n * Clear language associations from the registry (configured).\n */\nexport function clearConfiguredLanguageAssociations(): void {\n\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\tuserRegisteredAssociations = [];\n}\n\ninterface IdAndMime {\n\tid: string;\n\tmime: string;\n}\n\n/**\n * Given a file, return the best matching mime types for it\n * based on the registered language associations.\n */\nexport function getMimeTypes(resource: URI | null, firstLine?: string): string[] {\n\treturn getAssociations(resource, firstLine).map(item => item.mime);\n}\n\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource: URI | null, firstLine?: string): string[] {\n\treturn getAssociations(resource, firstLine).map(item => item.id);\n}\n\nfunction getAssociations(resource: URI | null, firstLine?: string): IdAndMime[] {\n\tlet path: string | undefined;\n\tif (resource) {\n\t\tswitch (resource.scheme) {\n\t\t\tcase Schemas.file:\n\t\t\t\tpath = resource.fsPath;\n\t\t\t\tbreak;\n\t\t\tcase Schemas.data: {\n\t\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\t\tpath = metadata.get(DataUri.META_DATA_LABEL);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Schemas.vscodeNotebookCell:\n\t\t\t\t// File path not relevant for language detection of cell\n\t\t\t\tpath = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpath = resource.path;\n\t\t}\n\t}\n\n\tif (!path) {\n\t\treturn [{ id: 'unknown', mime: Mimes.unknown }];\n\t}\n\n\tpath = path.toLowerCase();\n\n\tconst filename = basename(path);\n\n\t// 1.) User configured mappings have highest priority\n\tconst configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n\tif (configuredLanguage) {\n\t\treturn [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tconst registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n\tif (registeredLanguage) {\n\t\treturn [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tconst firstlineLanguage = getAssociationByFirstline(firstLine);\n\t\tif (firstlineLanguage) {\n\t\t\treturn [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n\t\t}\n\t}\n\n\treturn [{ id: 'unknown', mime: Mimes.unknown }];\n}\n\nfunction getAssociationByPath(path: string, filename: string, associations: ILanguageAssociationItem[]): ILanguageAssociationItem | undefined {\n\tlet filenameMatch: ILanguageAssociationItem | undefined = undefined;\n\tlet patternMatch: ILanguageAssociationItem | undefined = undefined;\n\tlet extensionMatch: ILanguageAssociationItem | undefined = undefined;\n\n\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\tfor (let i = associations.length - 1; i >= 0; i--) {\n\t\tconst association = associations[i];\n\n\t\t// First exact name match\n\t\tif (filename === association.filenameLowercase) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern!.length) {\n\t\t\t\tconst target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\t\t\t\tif (association.filepatternLowercase?.(target)) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension!.length) {\n\t\t\t\tif (filename.endsWith(association.extensionLowercase!)) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest priority\n\tif (filenameMatch) {\n\t\treturn filenameMatch;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch;\n\t}\n\n\treturn undefined;\n}\n\nfunction getAssociationByFirstline(firstLine: string): ILanguageAssociationItem | undefined {\n\tif (startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\n\t\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\t\tfor (let i = registeredAssociations.length - 1; i >= 0; i--) {\n\t\t\tconst association = registeredAssociations[i];\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0) {\n\t\t\t\treturn association;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
