import{Emitter as f}from"../../../base/common/event.js";import{Disposable as h}from"../../../base/common/lifecycle.js";import{compareIgnoreCase as d,regExpLeadsToEndlessLoop as _}from"../../../base/common/strings.js";import"../../../base/common/uri.js";import{Extensions as L}from"../../../platform/configuration/common/configurationRegistry.js";import{Registry as I}from"../../../platform/registry/common/platform.js";import{LanguageId as l}from"../encodedTokenAttributes.js";import"../languages.js";import"../languages/language.js";import{ModesRegistry as m,PLAINTEXT_LANGUAGE_ID as y}from"../languages/modesRegistry.js";import{clearPlatformLanguageAssociations as x,getLanguageIds as v,registerPlatformLanguageAssociation as o}from"./languagesAssociations.js";const s=Object.prototype.hasOwnProperty,p="vs.editor.nullLanguage";class b{_nextLanguageId;_languageIdToLanguage=[];_languageToLanguageId=new Map;constructor(){this._register(p,l.Null),this._register(y,l.PlainText),this._nextLanguageId=2}_register(e,i){this._languageIdToLanguage[i]=e,this._languageToLanguageId.set(e,i)}register(e){if(this._languageToLanguageId.has(e))return;const i=this._nextLanguageId++;this._register(e,i)}encodeLanguageId(e){return this._languageToLanguageId.get(e)||l.Null}decodeLanguageId(e){return this._languageIdToLanguage[e]||p}}class c extends h{static instanceCount=0;_onDidChange=this._register(new f);onDidChange=this._onDidChange.event;_warnOnOverwrite;languageIdCodec;_dynamicLanguages;_languages;_mimeTypesMap;_nameMap;_lowercaseNameMap;constructor(e=!0,i=!1){super(),c.instanceCount++,this._warnOnOverwrite=i,this.languageIdCodec=new b,this._dynamicLanguages=[],this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},e&&(this._initializeFromRegistry(),this._register(m.onDidChangeLanguages(n=>{this._initializeFromRegistry()})))}dispose(){c.instanceCount--,super.dispose()}setDynamicLanguages(e){this._dynamicLanguages=e,this._initializeFromRegistry()}_initializeFromRegistry(){this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},x();const e=[].concat(m.getLanguages()).concat(this._dynamicLanguages);this._registerLanguages(e)}registerLanguage(e){return m.registerLanguage(e)}_registerLanguages(e){for(const i of e)this._registerLanguage(i);this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},Object.keys(this._languages).forEach(i=>{const n=this._languages[i];n.name&&(this._nameMap[n.name]=n.identifier),n.aliases.forEach(t=>{this._lowercaseNameMap[t.toLowerCase()]=n.identifier}),n.mimetypes.forEach(t=>{this._mimeTypesMap[t]=n.identifier})}),I.as(L.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds()),this._onDidChange.fire()}_registerLanguage(e){const i=e.id;let n;s.call(this._languages,i)?n=this._languages[i]:(this.languageIdCodec.register(i),n={identifier:i,name:null,mimetypes:[],aliases:[],extensions:[],filenames:[],configurationFiles:[],icons:[]},this._languages[i]=n),this._mergeLanguage(n,e)}_mergeLanguage(e,i){const n=i.id;let t=null;if(Array.isArray(i.mimetypes)&&i.mimetypes.length>0&&(e.mimetypes.push(...i.mimetypes),t=i.mimetypes[0]),t||(t=`text/x-${n}`,e.mimetypes.push(t)),Array.isArray(i.extensions)){i.configuration?e.extensions=i.extensions.concat(e.extensions):e.extensions=e.extensions.concat(i.extensions);for(const a of i.extensions)o({id:n,mime:t,extension:a},this._warnOnOverwrite)}if(Array.isArray(i.filenames))for(const a of i.filenames)o({id:n,mime:t,filename:a},this._warnOnOverwrite),e.filenames.push(a);if(Array.isArray(i.filenamePatterns))for(const a of i.filenamePatterns)o({id:n,mime:t,filepattern:a},this._warnOnOverwrite);if(typeof i.firstLine=="string"&&i.firstLine.length>0){let a=i.firstLine;a.charAt(0)!=="^"&&(a="^"+a);try{const g=new RegExp(a);_(g)||o({id:n,mime:t,firstline:g},this._warnOnOverwrite)}catch(g){console.warn(`[${i.id}]: Invalid regular expression \`${a}\`: `,g)}}e.aliases.push(n);let r=null;if(typeof i.aliases<"u"&&Array.isArray(i.aliases)&&(i.aliases.length===0?r=[null]:r=i.aliases),r!==null)for(const a of r)!a||a.length===0||e.aliases.push(a);const u=r!==null&&r.length>0;if(!(u&&r[0]===null)){const a=(u?r[0]:null)||n;(u||!e.name)&&(e.name=a)}i.configuration&&e.configurationFiles.push(i.configuration),i.icon&&e.icons.push(i.icon)}isRegisteredLanguageId(e){return e?s.call(this._languages,e):!1}getRegisteredLanguageIds(){return Object.keys(this._languages)}getSortedRegisteredLanguageNames(){const e=[];for(const i in this._nameMap)s.call(this._nameMap,i)&&e.push({languageName:i,languageId:this._nameMap[i]});return e.sort((i,n)=>d(i.languageName,n.languageName)),e}getLanguageName(e){return s.call(this._languages,e)?this._languages[e].name:null}getMimeType(e){return s.call(this._languages,e)&&this._languages[e].mimetypes[0]||null}getExtensions(e){return s.call(this._languages,e)?this._languages[e].extensions:[]}getFilenames(e){return s.call(this._languages,e)?this._languages[e].filenames:[]}getIcon(e){return s.call(this._languages,e)&&this._languages[e].icons[0]||null}getConfigurationFiles(e){return s.call(this._languages,e)?this._languages[e].configurationFiles||[]:[]}getLanguageIdByLanguageName(e){const i=e.toLowerCase();return s.call(this._lowercaseNameMap,i)?this._lowercaseNameMap[i]:null}getLanguageIdByMimeType(e){return e&&s.call(this._mimeTypesMap,e)?this._mimeTypesMap[e]:null}guessLanguageIdByFilepathOrFirstLine(e,i){return!e&&!i?[]:v(e,i)}}export{b as LanguageIdCodec,c as LanguagesRegistry};
