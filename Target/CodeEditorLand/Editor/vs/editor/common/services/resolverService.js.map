{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/common/services/resolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { IDisposable, IReference } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ITextModel, ITextSnapshot } from '../model.js';\nimport { IResolvableEditorModel } from '../../../platform/editor/common/editor.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\n\nexport const ITextModelService = createDecorator<ITextModelService>('textModelService');\n\nexport interface ITextModelService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provided a resource URI, it will return a model reference\n\t * which should be disposed once not needed anymore.\n\t */\n\tcreateModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>>;\n\n\t/**\n\t * Registers a specific `scheme` content provider.\n\t */\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable;\n\n\t/**\n\t * Check if the given resource can be resolved to a text model.\n\t */\n\tcanHandleResource(resource: URI): boolean;\n}\n\nexport interface ITextModelContentProvider {\n\n\t/**\n\t * Given a resource, return the content of the resource as `ITextModel`.\n\t */\n\tprovideTextContent(resource: URI): Promise<ITextModel | null> | null;\n}\n\nexport interface ITextEditorModel extends IResolvableEditorModel {\n\n\t/**\n\t * Emitted when the text model is about to be disposed.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Provides access to the underlying `ITextModel`.\n\t */\n\treadonly textEditorModel: ITextModel | null;\n\n\t/**\n\t * Creates a snapshot of the model's contents.\n\t */\n\tcreateSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;\n\tcreateSnapshot(this: ITextEditorModel): ITextSnapshot | null;\n\n\t/**\n\t * Signals if this model is readonly or not.\n\t */\n\tisReadonly(): boolean | IMarkdownString;\n\n\t/**\n\t * The language id of the text model if known.\n\t */\n\tgetLanguageId(): string | undefined;\n\n\t/**\n\t * Find out if this text model has been disposed.\n\t */\n\tisDisposed(): boolean;\n}\n\nexport interface IResolvedTextEditorModel extends ITextEditorModel {\n\n\t/**\n\t * Same as ITextEditorModel#textEditorModel, but never null.\n\t */\n\treadonly textEditorModel: ITextModel;\n}\n\nexport function isResolvedTextEditorModel(model: ITextEditorModel): model is IResolvedTextEditorModel {\n\tconst candidate = model as IResolvedTextEditorModel;\n\n\treturn !!candidate.textEditorModel;\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,aAAa,kBAAkB;AACxC,SAAS,WAAW;AACpB,SAAS,YAAY,qBAAqB;AAC1C,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAEzB,MAAM,oBAAoB,gBAAmC,kBAAkB;AAwE/E,SAAS,0BAA0B,OAA4D;AACrG,QAAM,YAAY;AAElB,SAAO,CAAC,CAAC,UAAU;AACpB;AAJgB;",
  "names": []
}
