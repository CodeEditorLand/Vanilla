{
  "version": 3,
  "sources": ["../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/editor.api.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorOptions, WrappingIndent, EditorAutoIndentStrategy } from './common/config/editorOptions.js';\nimport { createMonacoBaseAPI } from './common/services/editorBaseApi.js';\nimport { createMonacoEditorAPI } from './standalone/browser/standaloneEditor.js';\nimport { createMonacoLanguagesAPI } from './standalone/browser/standaloneLanguages.js';\nimport { FormattingConflicts } from './contrib/format/browser/format.js';\n\n// Set defaults for standalone editor\nEditorOptions.wrappingIndent.defaultValue = WrappingIndent.None;\nEditorOptions.glyphMargin.defaultValue = false;\nEditorOptions.autoIndent.defaultValue = EditorAutoIndentStrategy.Advanced;\nEditorOptions.overviewRulerLanes.defaultValue = 2;\n\n// We need to register a formatter selector which simply picks the first available formatter.\n// See https://github.com/microsoft/monaco-editor/issues/2327\nFormattingConflicts.setFormatterSelector((formatter, document, mode) => Promise.resolve(formatter[0]));\n\nconst api = createMonacoBaseAPI();\napi.editor = createMonacoEditorAPI();\napi.languages = createMonacoLanguagesAPI();\nexport const CancellationTokenSource = api.CancellationTokenSource;\nexport const Emitter = api.Emitter;\nexport const KeyCode = api.KeyCode;\nexport const KeyMod = api.KeyMod;\nexport const Position = api.Position;\nexport const Range = api.Range;\nexport const Selection = api.Selection;\nexport const SelectionDirection = api.SelectionDirection;\nexport const MarkerSeverity = api.MarkerSeverity;\nexport const MarkerTag = api.MarkerTag;\nexport const Uri = api.Uri;\nexport const Token = api.Token;\nexport const editor = api.editor;\nexport const languages = api.languages;\n\ninterface IMonacoEnvironment {\n\tglobalAPI?: boolean;\n}\nconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\nif (monacoEnvironment?.globalAPI || (typeof define === 'function' && (<any>define).amd)) {\n\tglobalThis.monaco = api;\n}\n\nif (typeof globalThis.require !== 'undefined' && typeof globalThis.require.config === 'function') {\n\tglobalThis.require.config({\n\t\tignoreDuplicateModules: [\n\t\t\t'vscode-languageserver-types',\n\t\t\t'vscode-languageserver-types/main',\n\t\t\t'vscode-languageserver-textdocument',\n\t\t\t'vscode-languageserver-textdocument/main',\n\t\t\t'vscode-nls',\n\t\t\t'vscode-nls/vscode-nls',\n\t\t\t'jsonc-parser',\n\t\t\t'jsonc-parser/main',\n\t\t\t'vscode-uri',\n\t\t\t'vscode-uri/index',\n\t\t\t'vs/basic-languages/typescript/typescript'\n\t\t]\n\t});\n}\n"],
  "mappings": "AAKA,SAAS,eAAe,gBAAgB,gCAAgC;AACxE,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC,SAAS,gCAAgC;AACzC,SAAS,2BAA2B;AAGpC,cAAc,eAAe,eAAe,eAAe;AAC3D,cAAc,YAAY,eAAe;AACzC,cAAc,WAAW,eAAe,yBAAyB;AACjE,cAAc,mBAAmB,eAAe;AAIhD,oBAAoB,qBAAqB,CAAC,WAAW,UAAU,SAAS,QAAQ,QAAQ,UAAU,CAAC,CAAC,CAAC;AAErG,MAAM,MAAM,oBAAoB;AAChC,IAAI,SAAS,sBAAsB;AACnC,IAAI,YAAY,yBAAyB;AAClC,MAAM,0BAA0B,IAAI;AACpC,MAAM,UAAU,IAAI;AACpB,MAAM,UAAU,IAAI;AACpB,MAAM,SAAS,IAAI;AACnB,MAAM,WAAW,IAAI;AACrB,MAAM,QAAQ,IAAI;AAClB,MAAM,YAAY,IAAI;AACtB,MAAM,qBAAqB,IAAI;AAC/B,MAAM,iBAAiB,IAAI;AAC3B,MAAM,YAAY,IAAI;AACtB,MAAM,MAAM,IAAI;AAChB,MAAM,QAAQ,IAAI;AAClB,MAAM,SAAS,IAAI;AACnB,MAAM,YAAY,IAAI;AAK7B,MAAM,oBAAqD,WAAmB;AAC9E,IAAI,mBAAmB,aAAc,OAAO,WAAW,cAAoB,OAAQ,KAAM;AACxF,aAAW,SAAS;AACrB;AAEA,IAAI,OAAO,WAAW,YAAY,eAAe,OAAO,WAAW,QAAQ,WAAW,YAAY;AACjG,aAAW,QAAQ,OAAO;AAAA,IACzB,wBAAwB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD,CAAC;AACF;",
  "names": []
}
