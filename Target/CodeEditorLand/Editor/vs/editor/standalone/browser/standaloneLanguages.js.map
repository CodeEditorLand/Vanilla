{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/browser/standaloneLanguages.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { MetadataConsts } from '../../common/encodedTokenAttributes.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageExtensionPoint, ILanguageService } from '../../common/languages/language.js';\nimport { LanguageConfiguration } from '../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { LanguageSelector } from '../../common/languageSelector.js';\nimport * as model from '../../common/model.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IMonarchLanguage } from '../common/monarch/monarchTypes.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IMarkerData, IMarkerService } from '../../../platform/markers/common/markers.js';\n\n/**\n * Register information about a new language.\n */\nexport function register(language: ILanguageExtensionPoint): void {\n\t// Intentionally using the `ModesRegistry` here to avoid\n\t// instantiating services too quickly in the standalone editor.\n\tModesRegistry.registerLanguage(language);\n}\n\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages(): ILanguageExtensionPoint[] {\n\tlet result: ILanguageExtensionPoint[] = [];\n\tresult = result.concat(ModesRegistry.getLanguages());\n\treturn result;\n}\n\nexport function getEncodedLanguageId(languageId: string): number {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\treturn languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestRichLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestBasicLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set configuration for unknown language ${languageId}`);\n\t}\n\tconst languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n\treturn languageConfigurationService.register(languageId, configuration, 100);\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tprivate readonly _languageId: string;\n\tprivate readonly _actual: EncodedTokensProvider;\n\n\tconstructor(languageId: string, actual: EncodedTokensProvider) {\n\t\tthis._languageId = languageId;\n\t\tthis._actual = actual;\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\tif (typeof this._actual.tokenize === 'function') {\n\t\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, <{ tokenize(line: string, state: languages.IState): ILineTokens }>this._actual, line, state);\n\t\t}\n\t\tthrow new Error('Not supported!');\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst result = this._actual.tokenizeEncoded(line, state);\n\t\treturn new languages.EncodedTokenizationResult(result.tokens, result.endState);\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tconstructor(\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _actual: TokensProvider,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _standaloneThemeService: IStandaloneThemeService,\n\t) {\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tprivate static _toClassicTokens(tokens: IToken[], language: string): languages.Token[] {\n\t\tconst result: languages.Token[] = [];\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[i] = new languages.Token(startIndex, t.scopes, language);\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static adaptTokenize(language: string, actual: { tokenize(line: string, state: languages.IState): ILineTokens }, line: string, state: languages.IState): languages.TokenizationResult {\n\t\tconst actualResult = actual.tokenize(line, state);\n\t\tconst tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.TokenizationResult(tokens, endState);\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n\t}\n\n\tprivate _toBinaryTokens(languageIdCodec: languages.ILanguageIdCodec, tokens: IToken[]): Uint32Array {\n\t\tconst languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\t\tconst tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tconst metadata = tokenTheme.match(languageId, t.scopes) | MetadataConsts.BALANCED_BRACKETS_MASK;\n\t\t\tif (resultLen > 0 && result[resultLen - 1] === metadata) {\n\t\t\t\t// same metadata\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[resultLen++] = startIndex;\n\t\t\tresult[resultLen++] = metadata;\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\n\t\tconst actualResult = new Uint32Array(resultLen);\n\t\tfor (let i = 0; i < resultLen; i++) {\n\t\t\tactualResult[i] = result[i];\n\t\t}\n\t\treturn actualResult;\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst actualResult = this._actual.tokenize(line, state);\n\t\tconst tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.EncodedTokenizationResult(tokens, endState);\n\t}\n}\n\n/**\n * A token.\n */\nexport interface IToken {\n\tstartIndex: number;\n\tscopes: string;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface ILineTokens {\n\t/**\n\t * The list of tokens on the line.\n\t */\n\ttokens: IToken[];\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface IEncodedLineTokens {\n\t/**\n\t * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:\n\t *  - at offset 2*i => startIndex\n\t *  - at offset 2*i + 1 => metadata\n\t * Meta data is in binary format:\n\t * - -------------------------------------------\n\t *     3322 2222 2222 1111 1111 1100 0000 0000\n\t *     1098 7654 3210 9876 5432 1098 7654 3210\n\t * - -------------------------------------------\n\t *     bbbb bbbb bfff ffff ffFF FFTT LLLL LLLL\n\t * - -------------------------------------------\n\t *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.\n\t *  - T = StandardTokenType (2 bits): Other = 0, Comment = 1, String = 2, RegEx = 3.\n\t *  - F = FontStyle (4 bits): None = 0, Italic = 1, Bold = 2, Underline = 4, Strikethrough = 8.\n\t *  - f = foreground ColorId (9 bits)\n\t *  - b = background ColorId (9 bits)\n\t *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:\n\t * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,\n\t * id = 1 is for the default foreground color, id = 2 for the default background.\n\t */\n\ttokens: Uint32Array;\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * A factory for token providers.\n */\nexport interface TokensProviderFactory {\n\tcreate(): languages.ProviderResult<TokensProvider | EncodedTokensProvider | IMonarchLanguage>;\n}\n\n/**\n * A \"manual\" provider of tokens.\n */\nexport interface TokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize(line: string, state: languages.IState): ILineTokens;\n}\n\n/**\n * A \"manual\" provider of tokens, returning tokens in a binary form.\n */\nexport interface EncodedTokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenizeEncoded(line: string, state: languages.IState): IEncodedLineTokens;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize?(line: string, state: languages.IState): ILineTokens;\n}\n\nfunction isATokensProvider(provider: TokensProvider | EncodedTokensProvider | IMonarchLanguage): provider is TokensProvider | EncodedTokensProvider {\n\treturn (typeof provider.getInitialState === 'function');\n}\n\nfunction isEncodedTokensProvider(provider: TokensProvider | EncodedTokensProvider): provider is EncodedTokensProvider {\n\treturn 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable<T>(obj: any): obj is Thenable<T> {\n\treturn obj && typeof obj.then === 'function';\n}\n\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap: string[] | null): void {\n\tconst standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\tif (colorMap) {\n\t\tconst result: Color[] = [null!];\n\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t\t}\n\t\tstandaloneThemeService.setColorMapOverride(result);\n\t} else {\n\t\tstandaloneThemeService.setColorMapOverride(null);\n\t}\n}\n\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId: string, provider: TokensProvider | EncodedTokensProvider) {\n\tif (isEncodedTokensProvider(provider)) {\n\t\treturn new EncodedTokenizationSupportAdapter(languageId, provider);\n\t} else {\n\t\treturn new TokenizationSupportAdapter(\n\t\t\tlanguageId,\n\t\t\tprovider,\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t);\n\t}\n}\n\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId: string, factory: TokensProviderFactory): IDisposable {\n\tconst adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n\t\tconst result = await Promise.resolve(factory.create());\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\t\tif (isATokensProvider(result)) {\n\t\t\treturn createTokenizationSupportAdapter(languageId, result);\n\t\t}\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n\t});\n\treturn languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n\t}\n\tif (isThenable<TokensProvider | EncodedTokensProvider>(provider)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => provider });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable {\n\tconst create = (languageDef: IMonarchLanguage) => {\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n\t};\n\tif (isThenable<IMonarchLanguage>(languageDef)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => languageDef });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector: LanguageSelector, provider: languages.ReferenceProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector: LanguageSelector, provider: languages.RenameProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(languageSelector: LanguageSelector, provider: languages.NewSymbolNamesProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.newSymbolNamesProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector: LanguageSelector, provider: languages.SignatureHelpProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector: LanguageSelector, provider: languages.HoverProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.hoverProvider.register(languageSelector, {\n\t\tprovideHover: async (model: model.ITextModel, position: Position, token: CancellationToken, context?: languages.HoverContext<languages.Hover>): Promise<languages.Hover | undefined> => {\n\t\t\tconst word = model.getWordAtPosition(position);\n\n\t\t\treturn Promise.resolve<languages.Hover | null | undefined>(provider.provideHover(model, position, token, context)).then((value): languages.Hover | undefined => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!value.range && word) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n\t\t\t\t}\n\t\t\t\tif (!value.range) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t}\n\t});\n}\n\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector: LanguageSelector, provider: languages.DocumentSymbolProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector: LanguageSelector, provider: languages.DocumentHighlightProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector: LanguageSelector, provider: languages.LinkedEditingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector: LanguageSelector, provider: languages.DefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector: LanguageSelector, provider: languages.ImplementationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector: LanguageSelector, provider: languages.TypeDefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector: LanguageSelector, provider: languages.CodeLensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector: LanguageSelector, provider: CodeActionProvider, metadata?: CodeActionProviderMetadata): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeActionProvider.register(languageSelector, {\n\t\tprovidedCodeActionKinds: metadata?.providedCodeActionKinds,\n\t\tdocumentation: metadata?.documentation,\n\t\tprovideCodeActions: (model: model.ITextModel, range: Range, context: languages.CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList> => {\n\t\t\tconst markerService = StandaloneServices.get(IMarkerService);\n\t\t\tconst markers = markerService.read({ resource: model.uri }).filter(m => {\n\t\t\t\treturn Range.areIntersectingOrTouching(m, range);\n\t\t\t});\n\t\t\treturn provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n\t\t},\n\t\tresolveCodeAction: provider.resolveCodeAction\n\t});\n}\n\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.OnTypeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector: LanguageSelector, provider: languages.LinkProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector: LanguageSelector, provider: languages.CompletionItemProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector: LanguageSelector, provider: languages.DocumentColorProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector: LanguageSelector, provider: languages.FoldingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector: LanguageSelector, provider: languages.DeclarationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector: LanguageSelector, provider: languages.SelectionRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector: LanguageSelector, provider: languages.InlineCompletionsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\n\nexport function registerInlineEditProvider(languageSelector: LanguageSelector, provider: languages.InlineEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlineEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector: LanguageSelector, provider: languages.InlayHintsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n\n/**\n * Contains additional diagnostic information about the context in which\n * a [code action](#CodeActionProvider.provideCodeActions) is run.\n */\nexport interface CodeActionContext {\n\n\t/**\n\t * An array of diagnostics.\n\t */\n\treadonly markers: IMarkerData[];\n\n\t/**\n\t * Requested kind of actions to return.\n\t */\n\treadonly only?: string;\n\n\t/**\n\t * The reason why code actions were requested.\n\t */\n\treadonly trigger: languages.CodeActionTriggerType;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n */\nexport interface CodeActionProvider {\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: languages.CodeAction, token: CancellationToken): languages.ProviderResult<languages.CodeAction>;\n}\n\n\n\n/**\n * Metadata about the type of code actions that a {@link CodeActionProvider} provides.\n */\nexport interface CodeActionProviderMetadata {\n\t/**\n\t * List of code action kinds that a {@link CodeActionProvider} may return.\n\t *\n\t * This list is used to determine if a given `CodeActionProvider` should be invoked or not.\n\t * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\n\t * list of kinds may either be generic, such as `[\"quickfix\", \"refactor\", \"source\"]`, or list out every kind provided,\n\t * such as `[\"quickfix.removeLine\", \"source.fixAll\" ...]`.\n\t */\n\treadonly providedCodeActionKinds?: readonly string[];\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: languages.Command }>;\n}\n\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI(): typeof monaco.languages {\n\treturn {\n\t\tregister: <any>register,\n\t\tgetLanguages: <any>getLanguages,\n\t\tonLanguage: <any>onLanguage,\n\t\tonLanguageEncountered: <any>onLanguageEncountered,\n\t\tgetEncodedLanguageId: <any>getEncodedLanguageId,\n\n\t\t// provider methods\n\t\tsetLanguageConfiguration: <any>setLanguageConfiguration,\n\t\tsetColorMap: setColorMap,\n\t\tregisterTokensProviderFactory: <any>registerTokensProviderFactory,\n\t\tsetTokensProvider: <any>setTokensProvider,\n\t\tsetMonarchTokensProvider: <any>setMonarchTokensProvider,\n\t\tregisterReferenceProvider: <any>registerReferenceProvider,\n\t\tregisterRenameProvider: <any>registerRenameProvider,\n\t\tregisterNewSymbolNameProvider: <any>registerNewSymbolNameProvider,\n\t\tregisterCompletionItemProvider: <any>registerCompletionItemProvider,\n\t\tregisterSignatureHelpProvider: <any>registerSignatureHelpProvider,\n\t\tregisterHoverProvider: <any>registerHoverProvider,\n\t\tregisterDocumentSymbolProvider: <any>registerDocumentSymbolProvider,\n\t\tregisterDocumentHighlightProvider: <any>registerDocumentHighlightProvider,\n\t\tregisterLinkedEditingRangeProvider: <any>registerLinkedEditingRangeProvider,\n\t\tregisterDefinitionProvider: <any>registerDefinitionProvider,\n\t\tregisterImplementationProvider: <any>registerImplementationProvider,\n\t\tregisterTypeDefinitionProvider: <any>registerTypeDefinitionProvider,\n\t\tregisterCodeLensProvider: <any>registerCodeLensProvider,\n\t\tregisterCodeActionProvider: <any>registerCodeActionProvider,\n\t\tregisterDocumentFormattingEditProvider: <any>registerDocumentFormattingEditProvider,\n\t\tregisterDocumentRangeFormattingEditProvider: <any>registerDocumentRangeFormattingEditProvider,\n\t\tregisterOnTypeFormattingEditProvider: <any>registerOnTypeFormattingEditProvider,\n\t\tregisterLinkProvider: <any>registerLinkProvider,\n\t\tregisterColorProvider: <any>registerColorProvider,\n\t\tregisterFoldingRangeProvider: <any>registerFoldingRangeProvider,\n\t\tregisterDeclarationProvider: <any>registerDeclarationProvider,\n\t\tregisterSelectionRangeProvider: <any>registerSelectionRangeProvider,\n\t\tregisterDocumentSemanticTokensProvider: <any>registerDocumentSemanticTokensProvider,\n\t\tregisterDocumentRangeSemanticTokensProvider: <any>registerDocumentRangeSemanticTokensProvider,\n\t\tregisterInlineCompletionsProvider: <any>registerInlineCompletionsProvider,\n\t\tregisterInlineEditProvider: <any>registerInlineEditProvider,\n\t\tregisterInlayHintsProvider: <any>registerInlayHintsProvider,\n\n\t\t// enums\n\t\tDocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n\t\tCompletionItemKind: standaloneEnums.CompletionItemKind,\n\t\tCompletionItemTag: standaloneEnums.CompletionItemTag,\n\t\tCompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n\t\tSymbolKind: standaloneEnums.SymbolKind,\n\t\tSymbolTag: standaloneEnums.SymbolTag,\n\t\tIndentAction: standaloneEnums.IndentAction,\n\t\tCompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n\t\tSignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n\t\tInlayHintKind: standaloneEnums.InlayHintKind,\n\t\tInlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n\t\tInlineEditTriggerKind: standaloneEnums.InlineEditTriggerKind,\n\t\tCodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n\t\tNewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n\t\tNewSymbolNameTriggerKind: standaloneEnums.NewSymbolNameTriggerKind,\n\t\tPartialAcceptTriggerKind: standaloneEnums.PartialAcceptTriggerKind,\n\t\tHoverVerbosityAction: standaloneEnums.HoverVerbosityAction,\n\n\t\t// classes\n\t\tFoldingRangeKind: languages.FoldingRangeKind,\n\t\tSelectedSuggestionInfo: <any>languages.SelectedSuggestionInfo,\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,sBAAsB;AAC/B,YAAY,eAAe;AAC3B,SAAS,yBAAyB,wBAAwB;AAC1D,SAAS,6BAA6B;AACtC,SAAS,qCAAqC;AAC9C,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,YAAY,WAAW;AACvB,SAAS,gCAAgC;AACzC,YAAY,qBAAqB;AACjC,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,aAAa,sBAAsB;AAKrC,SAAS,SAAS,UAAyC;AAGjE,gBAAc,iBAAiB,QAAQ;AACxC;AAJgB;AAST,SAAS,eAA0C;AACzD,MAAI,SAAoC,CAAC;AACzC,WAAS,OAAO,OAAO,cAAc,aAAa,CAAC;AACnD,SAAO;AACR;AAJgB;AAMT,SAAS,qBAAqB,YAA4B;AAChE,QAAM,kBAAkB,mBAAmB,IAAI,gBAAgB;AAC/D,SAAO,gBAAgB,gBAAgB,iBAAiB,UAAU;AACnE;AAHgB;AAST,SAAS,WAAW,YAAoB,UAAmC;AACjF,SAAO,mBAAmB,aAAa,MAAM;AAC5C,UAAM,kBAAkB,mBAAmB,IAAI,gBAAgB;AAC/D,UAAM,aAAa,gBAAgB,iCAAiC,CAAC,0BAA0B;AAC9F,UAAI,0BAA0B,YAAY;AAEzC,mBAAW,QAAQ;AAEnB,iBAAS;AAAA,MACV;AAAA,IACD,CAAC;AACD,WAAO;AAAA,EACR,CAAC;AACF;AAbgB;AAoBT,SAAS,sBAAsB,YAAoB,UAAmC;AAC5F,SAAO,mBAAmB,aAAa,MAAM;AAC5C,UAAM,kBAAkB,mBAAmB,IAAI,gBAAgB;AAC/D,UAAM,aAAa,gBAAgB,kCAAkC,CAAC,0BAA0B;AAC/F,UAAI,0BAA0B,YAAY;AAEzC,mBAAW,QAAQ;AAEnB,iBAAS;AAAA,MACV;AAAA,IACD,CAAC;AACD,WAAO;AAAA,EACR,CAAC;AACF;AAbgB;AAkBT,SAAS,yBAAyB,YAAoB,eAAmD;AAC/G,QAAM,kBAAkB,mBAAmB,IAAI,gBAAgB;AAC/D,MAAI,CAAC,gBAAgB,uBAAuB,UAAU,GAAG;AACxD,UAAM,IAAI,MAAM,iDAAiD,UAAU,EAAE;AAAA,EAC9E;AACA,QAAM,+BAA+B,mBAAmB,IAAI,6BAA6B;AACzF,SAAO,6BAA6B,SAAS,YAAY,eAAe,GAAG;AAC5E;AAPgB;AAYT,MAAM,kCAAyF;AAAA,EAzGtG,OAyGsG;AAAA;AAAA;AAAA,EAEpF;AAAA,EACA;AAAA,EAEjB,YAAY,YAAoB,QAA+B;AAC9D,SAAK,cAAc;AACnB,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,UAAgB;AAAA,EAEhB;AAAA,EAEO,kBAAoC;AAC1C,WAAO,KAAK,QAAQ,gBAAgB;AAAA,EACrC;AAAA,EAEO,SAAS,MAAc,QAAiB,OAAuD;AACrG,QAAI,OAAO,KAAK,QAAQ,aAAa,YAAY;AAChD,aAAO,2BAA2B,cAAc,KAAK,aAA+E,KAAK,SAAS,MAAM,KAAK;AAAA,IAC9J;AACA,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEO,gBAAgB,MAAc,QAAiB,OAA8D;AACnH,UAAM,SAAS,KAAK,QAAQ,gBAAgB,MAAM,KAAK;AACvD,WAAO,IAAI,UAAU,0BAA0B,OAAO,QAAQ,OAAO,QAAQ;AAAA,EAC9E;AACD;AAKO,MAAM,2BAAkF;AAAA,EAE9F,YACkB,aACA,SACA,kBACA,yBAChB;AAJgB;AACA;AACA;AACA;AAAA,EAElB;AAAA,EAnJD,OA2I+F;AAAA;AAAA;AAAA,EAU9F,UAAgB;AAAA,EAEhB;AAAA,EAEO,kBAAoC;AAC1C,WAAO,KAAK,QAAQ,gBAAgB;AAAA,EACrC;AAAA,EAEA,OAAe,iBAAiB,QAAkB,UAAqC;AACtF,UAAM,SAA4B,CAAC;AACnC,QAAI,qBAA6B;AACjC,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAClD,YAAM,IAAI,OAAO,CAAC;AAClB,UAAI,aAAa,EAAE;AAGnB,UAAI,MAAM,GAAG;AAEZ,qBAAa;AAAA,MACd,WAAW,aAAa,oBAAoB;AAE3C,qBAAa;AAAA,MACd;AAEA,aAAO,CAAC,IAAI,IAAI,UAAU,MAAM,YAAY,EAAE,QAAQ,QAAQ;AAE9D,2BAAqB;AAAA,IACtB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,cAAc,UAAkB,QAA0E,MAAc,OAAuD;AAC5L,UAAM,eAAe,OAAO,SAAS,MAAM,KAAK;AAChD,UAAM,SAAS,2BAA2B,iBAAiB,aAAa,QAAQ,QAAQ;AAExF,QAAI;AAEJ,QAAI,aAAa,SAAS,OAAO,KAAK,GAAG;AACxC,iBAAW;AAAA,IACZ,OAAO;AACN,iBAAW,aAAa;AAAA,IACzB;AAEA,WAAO,IAAI,UAAU,mBAAmB,QAAQ,QAAQ;AAAA,EACzD;AAAA,EAEO,SAAS,MAAc,QAAiB,OAAuD;AACrG,WAAO,2BAA2B,cAAc,KAAK,aAAa,KAAK,SAAS,MAAM,KAAK;AAAA,EAC5F;AAAA,EAEQ,gBAAgB,iBAA6C,QAA+B;AACnG,UAAM,aAAa,gBAAgB,iBAAiB,KAAK,WAAW;AACpE,UAAM,aAAa,KAAK,wBAAwB,cAAc,EAAE;AAEhE,UAAM,SAAmB,CAAC;AAC1B,QAAI,YAAY;AAChB,QAAI,qBAA6B;AACjC,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAClD,YAAM,IAAI,OAAO,CAAC;AAClB,YAAM,WAAW,WAAW,MAAM,YAAY,EAAE,MAAM,IAAI,eAAe;AACzE,UAAI,YAAY,KAAK,OAAO,YAAY,CAAC,MAAM,UAAU;AAExD;AAAA,MACD;AAEA,UAAI,aAAa,EAAE;AAGnB,UAAI,MAAM,GAAG;AAEZ,qBAAa;AAAA,MACd,WAAW,aAAa,oBAAoB;AAE3C,qBAAa;AAAA,MACd;AAEA,aAAO,WAAW,IAAI;AACtB,aAAO,WAAW,IAAI;AAEtB,2BAAqB;AAAA,IACtB;AAEA,UAAM,eAAe,IAAI,YAAY,SAAS;AAC9C,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AACnC,mBAAa,CAAC,IAAI,OAAO,CAAC;AAAA,IAC3B;AACA,WAAO;AAAA,EACR;AAAA,EAEO,gBAAgB,MAAc,QAAiB,OAA8D;AACnH,UAAM,eAAe,KAAK,QAAQ,SAAS,MAAM,KAAK;AACtD,UAAM,SAAS,KAAK,gBAAgB,KAAK,iBAAiB,iBAAiB,aAAa,MAAM;AAE9F,QAAI;AAEJ,QAAI,aAAa,SAAS,OAAO,KAAK,GAAG;AACxC,iBAAW;AAAA,IACZ,OAAO;AACN,iBAAW,aAAa;AAAA,IACzB;AAEA,WAAO,IAAI,UAAU,0BAA0B,QAAQ,QAAQ;AAAA,EAChE;AACD;AAgGA,SAAS,kBAAkB,UAAyH;AACnJ,SAAQ,OAAO,SAAS,oBAAoB;AAC7C;AAFS;AAIT,SAAS,wBAAwB,UAAqF;AACrH,SAAO,qBAAqB;AAC7B;AAFS;AAIT,SAAS,WAAc,KAA8B;AACpD,SAAO,OAAO,OAAO,IAAI,SAAS;AACnC;AAFS;AAQF,SAAS,YAAY,UAAiC;AAC5D,QAAM,yBAAyB,mBAAmB,IAAI,uBAAuB;AAC7E,MAAI,UAAU;AACb,UAAM,SAAkB,CAAC,IAAK;AAC9B,aAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,IAAI,KAAK,KAAK;AACpD,aAAO,CAAC,IAAI,MAAM,QAAQ,SAAS,CAAC,CAAC;AAAA,IACtC;AACA,2BAAuB,oBAAoB,MAAM;AAAA,EAClD,OAAO;AACN,2BAAuB,oBAAoB,IAAI;AAAA,EAChD;AACD;AAXgB;AAgBhB,SAAS,iCAAiC,YAAoB,UAAkD;AAC/G,MAAI,wBAAwB,QAAQ,GAAG;AACtC,WAAO,IAAI,kCAAkC,YAAY,QAAQ;AAAA,EAClE,OAAO;AACN,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA,mBAAmB,IAAI,gBAAgB;AAAA,MACvC,mBAAmB,IAAI,uBAAuB;AAAA,IAC/C;AAAA,EACD;AACD;AAXS;AAkBF,SAAS,8BAA8B,YAAoB,SAA6C;AAC9G,QAAM,iBAAiB,IAAI,UAAU,wBAAwB,YAAY;AACxE,UAAM,SAAS,MAAM,QAAQ,QAAQ,QAAQ,OAAO,CAAC;AACrD,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,IACR;AACA,QAAI,kBAAkB,MAAM,GAAG;AAC9B,aAAO,iCAAiC,YAAY,MAAM;AAAA,IAC3D;AACA,WAAO,IAAI,iBAAiB,mBAAmB,IAAI,gBAAgB,GAAG,mBAAmB,IAAI,uBAAuB,GAAG,YAAY,QAAQ,YAAY,MAAM,GAAG,mBAAmB,IAAI,qBAAqB,CAAC;AAAA,EAC9M,CAAC;AACD,SAAO,UAAU,qBAAqB,gBAAgB,YAAY,cAAc;AACjF;AAZgB;AAoBT,SAAS,kBAAkB,YAAoB,UAAkH;AACvK,QAAM,kBAAkB,mBAAmB,IAAI,gBAAgB;AAC/D,MAAI,CAAC,gBAAgB,uBAAuB,UAAU,GAAG;AACxD,UAAM,IAAI,MAAM,mDAAmD,UAAU,EAAE;AAAA,EAChF;AACA,MAAI,WAAmD,QAAQ,GAAG;AACjE,WAAO,8BAA8B,YAAY,EAAE,QAAQ,6BAAM,UAAN,UAAe,CAAC;AAAA,EAC5E;AACA,SAAO,UAAU,qBAAqB,SAAS,YAAY,iCAAiC,YAAY,QAAQ,CAAC;AAClH;AATgB;AAiBT,SAAS,yBAAyB,YAAoB,aAAyE;AACrI,QAAM,SAAS,wBAACA,iBAAkC;AACjD,WAAO,IAAI,iBAAiB,mBAAmB,IAAI,gBAAgB,GAAG,mBAAmB,IAAI,uBAAuB,GAAG,YAAY,QAAQ,YAAYA,YAAW,GAAG,mBAAmB,IAAI,qBAAqB,CAAC;AAAA,EACnN,GAFe;AAGf,MAAI,WAA6B,WAAW,GAAG;AAC9C,WAAO,8BAA8B,YAAY,EAAE,QAAQ,6BAAM,aAAN,UAAkB,CAAC;AAAA,EAC/E;AACA,SAAO,UAAU,qBAAqB,SAAS,YAAY,OAAO,WAAW,CAAC;AAC/E;AARgB;AAaT,SAAS,0BAA0B,kBAAoC,UAAoD;AACjI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,kBAAkB,SAAS,kBAAkB,QAAQ;AACrF;AAHgB;AAQT,SAAS,uBAAuB,kBAAoC,UAAiD;AAC3H,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,eAAe,SAAS,kBAAkB,QAAQ;AAClF;AAHgB;AAQT,SAAS,8BAA8B,kBAAoC,UAAyD;AAC1I,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,uBAAuB,SAAS,kBAAkB,QAAQ;AAC1F;AAHgB;AAQT,SAAS,8BAA8B,kBAAoC,UAAwD;AACzI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,sBAAsB,SAAS,kBAAkB,QAAQ;AACzF;AAHgB;AAQT,SAAS,sBAAsB,kBAAoC,UAAgD;AACzH,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,cAAc,SAAS,kBAAkB;AAAA,IACvE,cAAc,8BAAOC,QAAyB,UAAoB,OAA0B,YAA4F;AACvL,YAAM,OAAOA,OAAM,kBAAkB,QAAQ;AAE7C,aAAO,QAAQ,QAA4C,SAAS,aAAaA,QAAO,UAAU,OAAO,OAAO,CAAC,EAAE,KAAK,CAAC,UAAuC;AAC/J,YAAI,CAAC,OAAO;AACX,iBAAO;AAAA,QACR;AACA,YAAI,CAAC,MAAM,SAAS,MAAM;AACzB,gBAAM,QAAQ,IAAI,MAAM,SAAS,YAAY,KAAK,aAAa,SAAS,YAAY,KAAK,SAAS;AAAA,QACnG;AACA,YAAI,CAAC,MAAM,OAAO;AACjB,gBAAM,QAAQ,IAAI,MAAM,SAAS,YAAY,SAAS,QAAQ,SAAS,YAAY,SAAS,MAAM;AAAA,QACnG;AACA,eAAO;AAAA,MACR,CAAC;AAAA,IACF,GAfc;AAAA,EAgBf,CAAC;AACF;AApBgB;AAyBT,SAAS,+BAA+B,kBAAoC,UAAyD;AAC3I,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,uBAAuB,SAAS,kBAAkB,QAAQ;AAC1F;AAHgB;AAQT,SAAS,kCAAkC,kBAAoC,UAA4D;AACjJ,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,0BAA0B,SAAS,kBAAkB,QAAQ;AAC7F;AAHgB;AAQT,SAAS,mCAAmC,kBAAoC,UAA6D;AACnJ,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,2BAA2B,SAAS,kBAAkB,QAAQ;AAC9F;AAHgB;AAQT,SAAS,2BAA2B,kBAAoC,UAAqD;AACnI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,mBAAmB,SAAS,kBAAkB,QAAQ;AACtF;AAHgB;AAQT,SAAS,+BAA+B,kBAAoC,UAAyD;AAC3I,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,uBAAuB,SAAS,kBAAkB,QAAQ;AAC1F;AAHgB;AAQT,SAAS,+BAA+B,kBAAoC,UAAyD;AAC3I,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,uBAAuB,SAAS,kBAAkB,QAAQ;AAC1F;AAHgB;AAQT,SAAS,yBAAyB,kBAAoC,UAAmD;AAC/H,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,iBAAiB,SAAS,kBAAkB,QAAQ;AACpF;AAHgB;AAQT,SAAS,2BAA2B,kBAAoC,UAA8B,UAAoD;AAChK,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,mBAAmB,SAAS,kBAAkB;AAAA,IAC5E,yBAAyB,UAAU;AAAA,IACnC,eAAe,UAAU;AAAA,IACzB,oBAAoB,wBAACA,QAAyB,OAAc,SAAsC,UAAiF;AAClL,YAAM,gBAAgB,mBAAmB,IAAI,cAAc;AAC3D,YAAM,UAAU,cAAc,KAAK,EAAE,UAAUA,OAAM,IAAI,CAAC,EAAE,OAAO,OAAK;AACvE,eAAO,MAAM,0BAA0B,GAAG,KAAK;AAAA,MAChD,CAAC;AACD,aAAO,SAAS,mBAAmBA,QAAO,OAAO,EAAE,SAAS,MAAM,QAAQ,MAAM,SAAS,QAAQ,QAAQ,GAAG,KAAK;AAAA,IAClH,GANoB;AAAA,IAOpB,mBAAmB,SAAS;AAAA,EAC7B,CAAC;AACF;AAdgB;AAmBT,SAAS,uCAAuC,kBAAoC,UAAiE;AAC3J,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,+BAA+B,SAAS,kBAAkB,QAAQ;AAClG;AAHgB;AAQT,SAAS,4CAA4C,kBAAoC,UAAsE;AACrK,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,oCAAoC,SAAS,kBAAkB,QAAQ;AACvG;AAHgB;AAQT,SAAS,qCAAqC,kBAAoC,UAA+D;AACvJ,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,6BAA6B,SAAS,kBAAkB,QAAQ;AAChG;AAHgB;AAQT,SAAS,qBAAqB,kBAAoC,UAA+C;AACvH,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,aAAa,SAAS,kBAAkB,QAAQ;AAChF;AAHgB;AAQT,SAAS,+BAA+B,kBAAoC,UAAyD;AAC3I,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,mBAAmB,SAAS,kBAAkB,QAAQ;AACtF;AAHgB;AAQT,SAAS,sBAAsB,kBAAoC,UAAwD;AACjI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,cAAc,SAAS,kBAAkB,QAAQ;AACjF;AAHgB;AAQT,SAAS,6BAA6B,kBAAoC,UAAuD;AACvI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,qBAAqB,SAAS,kBAAkB,QAAQ;AACxF;AAHgB;AAQT,SAAS,4BAA4B,kBAAoC,UAAsD;AACrI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,oBAAoB,SAAS,kBAAkB,QAAQ;AACvF;AAHgB;AAQT,SAAS,+BAA+B,kBAAoC,UAAyD;AAC3I,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,uBAAuB,SAAS,kBAAkB,QAAQ;AAC1F;AAHgB;AAYT,SAAS,uCAAuC,kBAAoC,UAAiE;AAC3J,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,+BAA+B,SAAS,kBAAkB,QAAQ;AAClG;AAHgB;AAYT,SAAS,4CAA4C,kBAAoC,UAAsE;AACrK,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,oCAAoC,SAAS,kBAAkB,QAAQ;AACvG;AAHgB;AAQT,SAAS,kCAAkC,kBAAoC,UAA4D;AACjJ,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,0BAA0B,SAAS,kBAAkB,QAAQ;AAC7F;AAHgB;AAKT,SAAS,2BAA2B,kBAAoC,UAAqD;AACnI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,mBAAmB,SAAS,kBAAkB,QAAQ;AACtF;AAHgB;AAQT,SAAS,2BAA2B,kBAAoC,UAAqD;AACnI,QAAM,0BAA0B,mBAAmB,IAAI,wBAAwB;AAC/E,SAAO,wBAAwB,mBAAmB,SAAS,kBAAkB,QAAQ;AACtF;AAHgB;AAiET,SAAS,2BAAoD;AACnE,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,uBAAuB,gBAAgB;AAAA,IACvC,oBAAoB,gBAAgB;AAAA,IACpC,mBAAmB,gBAAgB;AAAA,IACnC,8BAA8B,gBAAgB;AAAA,IAC9C,YAAY,gBAAgB;AAAA,IAC5B,WAAW,gBAAgB;AAAA,IAC3B,cAAc,gBAAgB;AAAA,IAC9B,uBAAuB,gBAAgB;AAAA,IACvC,0BAA0B,gBAAgB;AAAA,IAC1C,eAAe,gBAAgB;AAAA,IAC/B,6BAA6B,gBAAgB;AAAA,IAC7C,uBAAuB,gBAAgB;AAAA,IACvC,uBAAuB,gBAAgB;AAAA,IACvC,kBAAkB,gBAAgB;AAAA,IAClC,0BAA0B,gBAAgB;AAAA,IAC1C,0BAA0B,gBAAgB;AAAA,IAC1C,sBAAsB,gBAAgB;AAAA;AAAA,IAGtC,kBAAkB,UAAU;AAAA,IAC5B,wBAA6B,UAAU;AAAA,EACxC;AACD;AAjEgB;",
  "names": ["languageDef", "model"]
}
