{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/browser/standaloneLanguages.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Color } from \"../../../base/common/color.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IMarkerData,\n\tIMarkerService,\n} from \"../../../platform/markers/common/markers.js\";\nimport type { Position } from \"../../common/core/position.js\";\nimport { Range } from \"../../common/core/range.js\";\nimport { MetadataConsts } from \"../../common/encodedTokenAttributes.js\";\nimport type { LanguageSelector } from \"../../common/languageSelector.js\";\nimport * as languages from \"../../common/languages.js\";\nimport {\n\ttype ILanguageExtensionPoint,\n\tILanguageService,\n} from \"../../common/languages/language.js\";\nimport type { LanguageConfiguration } from \"../../common/languages/languageConfiguration.js\";\nimport { ILanguageConfigurationService } from \"../../common/languages/languageConfigurationRegistry.js\";\nimport { ModesRegistry } from \"../../common/languages/modesRegistry.js\";\nimport { ILanguageFeaturesService } from \"../../common/services/languageFeatures.js\";\nimport * as standaloneEnums from \"../../common/standalone/standaloneEnums.js\";\nimport { compile } from \"../common/monarch/monarchCompile.js\";\nimport { MonarchTokenizer } from \"../common/monarch/monarchLexer.js\";\nimport type { IMonarchLanguage } from \"../common/monarch/monarchTypes.js\";\nimport { IStandaloneThemeService } from \"../common/standaloneTheme.js\";\nimport { StandaloneServices } from \"./standaloneServices.js\";\n\n/**\n * Register information about a new language.\n */\nexport function register(language: ILanguageExtensionPoint): void {\n\t// Intentionally using the `ModesRegistry` here to avoid\n\t// instantiating services too quickly in the standalone editor.\n\tModesRegistry.registerLanguage(language);\n}\n\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages(): ILanguageExtensionPoint[] {\n\tlet result: ILanguageExtensionPoint[] = [];\n\tresult = result.concat(ModesRegistry.getLanguages());\n\treturn result;\n}\n\nexport function getEncodedLanguageId(languageId: string): number {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\treturn languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(\n\tlanguageId: string,\n\tcallback: () => void,\n): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestRichLanguageFeatures(\n\t\t\t(encounteredLanguageId) => {\n\t\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t\t// stop listening\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t// invoke actual listener\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\treturn disposable;\n\t});\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(\n\tlanguageId: string,\n\tcallback: () => void,\n): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestBasicLanguageFeatures(\n\t\t\t(encounteredLanguageId) => {\n\t\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t\t// stop listening\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t// invoke actual listener\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\treturn disposable;\n\t});\n}\n\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(\n\tlanguageId: string,\n\tconfiguration: LanguageConfiguration,\n): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(\n\t\t\t`Cannot set configuration for unknown language ${languageId}`,\n\t\t);\n\t}\n\tconst languageConfigurationService = StandaloneServices.get(\n\t\tILanguageConfigurationService,\n\t);\n\treturn languageConfigurationService.register(\n\t\tlanguageId,\n\t\tconfiguration,\n\t\t100,\n\t);\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter\n\timplements languages.ITokenizationSupport, IDisposable\n{\n\tprivate readonly _languageId: string;\n\tprivate readonly _actual: EncodedTokensProvider;\n\n\tconstructor(languageId: string, actual: EncodedTokensProvider) {\n\t\tthis._languageId = languageId;\n\t\tthis._actual = actual;\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tpublic tokenize(\n\t\tline: string,\n\t\thasEOL: boolean,\n\t\tstate: languages.IState,\n\t): languages.TokenizationResult {\n\t\tif (typeof this._actual.tokenize === \"function\") {\n\t\t\treturn TokenizationSupportAdapter.adaptTokenize(\n\t\t\t\tthis._languageId,\n\t\t\t\t<\n\t\t\t\t\t{\n\t\t\t\t\t\ttokenize(\n\t\t\t\t\t\t\tline: string,\n\t\t\t\t\t\t\tstate: languages.IState,\n\t\t\t\t\t\t): ILineTokens;\n\t\t\t\t\t}\n\t\t\t\t>this._actual,\n\t\t\t\tline,\n\t\t\t\tstate,\n\t\t\t);\n\t\t}\n\t\tthrow new Error(\"Not supported!\");\n\t}\n\n\tpublic tokenizeEncoded(\n\t\tline: string,\n\t\thasEOL: boolean,\n\t\tstate: languages.IState,\n\t): languages.EncodedTokenizationResult {\n\t\tconst result = this._actual.tokenizeEncoded(line, state);\n\t\treturn new languages.EncodedTokenizationResult(\n\t\t\tresult.tokens,\n\t\t\tresult.endState,\n\t\t);\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter\n\timplements languages.ITokenizationSupport, IDisposable\n{\n\tconstructor(\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _actual: TokensProvider,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _standaloneThemeService: IStandaloneThemeService,\n\t) {}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tprivate static _toClassicTokens(\n\t\ttokens: IToken[],\n\t\tlanguage: string,\n\t): languages.Token[] {\n\t\tconst result: languages.Token[] = [];\n\t\tlet previousStartIndex = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[i] = new languages.Token(startIndex, t.scopes, language);\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static adaptTokenize(\n\t\tlanguage: string,\n\t\tactual: {\n\t\t\ttokenize(line: string, state: languages.IState): ILineTokens;\n\t\t},\n\t\tline: string,\n\t\tstate: languages.IState,\n\t): languages.TokenizationResult {\n\t\tconst actualResult = actual.tokenize(line, state);\n\t\tconst tokens = TokenizationSupportAdapter._toClassicTokens(\n\t\t\tactualResult.tokens,\n\t\t\tlanguage,\n\t\t);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.TokenizationResult(tokens, endState);\n\t}\n\n\tpublic tokenize(\n\t\tline: string,\n\t\thasEOL: boolean,\n\t\tstate: languages.IState,\n\t): languages.TokenizationResult {\n\t\treturn TokenizationSupportAdapter.adaptTokenize(\n\t\t\tthis._languageId,\n\t\t\tthis._actual,\n\t\t\tline,\n\t\t\tstate,\n\t\t);\n\t}\n\n\tprivate _toBinaryTokens(\n\t\tlanguageIdCodec: languages.ILanguageIdCodec,\n\t\ttokens: IToken[],\n\t): Uint32Array {\n\t\tconst languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\t\tconst tokenTheme =\n\t\t\tthis._standaloneThemeService.getColorTheme().tokenTheme;\n\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet previousStartIndex = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tconst metadata =\n\t\t\t\ttokenTheme.match(languageId, t.scopes) |\n\t\t\t\tMetadataConsts.BALANCED_BRACKETS_MASK;\n\t\t\tif (resultLen > 0 && result[resultLen - 1] === metadata) {\n\t\t\t\t// same metadata\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[resultLen++] = startIndex;\n\t\t\tresult[resultLen++] = metadata;\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\n\t\tconst actualResult = new Uint32Array(resultLen);\n\t\tfor (let i = 0; i < resultLen; i++) {\n\t\t\tactualResult[i] = result[i];\n\t\t}\n\t\treturn actualResult;\n\t}\n\n\tpublic tokenizeEncoded(\n\t\tline: string,\n\t\thasEOL: boolean,\n\t\tstate: languages.IState,\n\t): languages.EncodedTokenizationResult {\n\t\tconst actualResult = this._actual.tokenize(line, state);\n\t\tconst tokens = this._toBinaryTokens(\n\t\t\tthis._languageService.languageIdCodec,\n\t\t\tactualResult.tokens,\n\t\t);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.EncodedTokenizationResult(tokens, endState);\n\t}\n}\n\n/**\n * A token.\n */\nexport interface IToken {\n\tstartIndex: number;\n\tscopes: string;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface ILineTokens {\n\t/**\n\t * The list of tokens on the line.\n\t */\n\ttokens: IToken[];\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface IEncodedLineTokens {\n\t/**\n\t * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:\n\t *  - at offset 2*i => startIndex\n\t *  - at offset 2*i + 1 => metadata\n\t * Meta data is in binary format:\n\t * - -------------------------------------------\n\t *     3322 2222 2222 1111 1111 1100 0000 0000\n\t *     1098 7654 3210 9876 5432 1098 7654 3210\n\t * - -------------------------------------------\n\t *     bbbb bbbb bfff ffff ffFF FFTT LLLL LLLL\n\t * - -------------------------------------------\n\t *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.\n\t *  - T = StandardTokenType (2 bits): Other = 0, Comment = 1, String = 2, RegEx = 3.\n\t *  - F = FontStyle (4 bits): None = 0, Italic = 1, Bold = 2, Underline = 4, Strikethrough = 8.\n\t *  - f = foreground ColorId (9 bits)\n\t *  - b = background ColorId (9 bits)\n\t *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:\n\t * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,\n\t * id = 1 is for the default foreground color, id = 2 for the default background.\n\t */\n\ttokens: Uint32Array;\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * A factory for token providers.\n */\nexport interface TokensProviderFactory {\n\tcreate(): languages.ProviderResult<\n\t\tTokensProvider | EncodedTokensProvider | IMonarchLanguage\n\t>;\n}\n\n/**\n * A \"manual\" provider of tokens.\n */\nexport interface TokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize(line: string, state: languages.IState): ILineTokens;\n}\n\n/**\n * A \"manual\" provider of tokens, returning tokens in a binary form.\n */\nexport interface EncodedTokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenizeEncoded(line: string, state: languages.IState): IEncodedLineTokens;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize?(line: string, state: languages.IState): ILineTokens;\n}\n\nfunction isATokensProvider(\n\tprovider: TokensProvider | EncodedTokensProvider | IMonarchLanguage,\n): provider is TokensProvider | EncodedTokensProvider {\n\treturn typeof provider.getInitialState === \"function\";\n}\n\nfunction isEncodedTokensProvider(\n\tprovider: TokensProvider | EncodedTokensProvider,\n): provider is EncodedTokensProvider {\n\treturn \"tokenizeEncoded\" in provider;\n}\n\nfunction isThenable<T>(obj: any): obj is Thenable<T> {\n\treturn obj && typeof obj.then === \"function\";\n}\n\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap: string[] | null): void {\n\tconst standaloneThemeService = StandaloneServices.get(\n\t\tIStandaloneThemeService,\n\t);\n\tif (colorMap) {\n\t\tconst result: Color[] = [null!];\n\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t\t}\n\t\tstandaloneThemeService.setColorMapOverride(result);\n\t} else {\n\t\tstandaloneThemeService.setColorMapOverride(null);\n\t}\n}\n\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(\n\tlanguageId: string,\n\tprovider: TokensProvider | EncodedTokensProvider,\n) {\n\tif (isEncodedTokensProvider(provider)) {\n\t\treturn new EncodedTokenizationSupportAdapter(languageId, provider);\n\t} else {\n\t\treturn new TokenizationSupportAdapter(\n\t\t\tlanguageId,\n\t\t\tprovider,\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t);\n\t}\n}\n\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(\n\tlanguageId: string,\n\tfactory: TokensProviderFactory,\n): IDisposable {\n\tconst adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n\t\tconst result = await Promise.resolve(factory.create());\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\t\tif (isATokensProvider(result)) {\n\t\t\treturn createTokenizationSupportAdapter(languageId, result);\n\t\t}\n\t\treturn new MonarchTokenizer(\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t\tlanguageId,\n\t\t\tcompile(languageId, result),\n\t\t\tStandaloneServices.get(IConfigurationService),\n\t\t);\n\t});\n\treturn languages.TokenizationRegistry.registerFactory(\n\t\tlanguageId,\n\t\tadaptedFactory,\n\t);\n}\n\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(\n\tlanguageId: string,\n\tprovider:\n\t\t| TokensProvider\n\t\t| EncodedTokensProvider\n\t\t| Thenable<TokensProvider | EncodedTokensProvider>,\n): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(\n\t\t\t`Cannot set tokens provider for unknown language ${languageId}`,\n\t\t);\n\t}\n\tif (isThenable<TokensProvider | EncodedTokensProvider>(provider)) {\n\t\treturn registerTokensProviderFactory(languageId, {\n\t\t\tcreate: () => provider,\n\t\t});\n\t}\n\treturn languages.TokenizationRegistry.register(\n\t\tlanguageId,\n\t\tcreateTokenizationSupportAdapter(languageId, provider),\n\t);\n}\n\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(\n\tlanguageId: string,\n\tlanguageDef: IMonarchLanguage | Thenable<IMonarchLanguage>,\n): IDisposable {\n\tconst create = (languageDef: IMonarchLanguage) => {\n\t\treturn new MonarchTokenizer(\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t\tlanguageId,\n\t\t\tcompile(languageId, languageDef),\n\t\t\tStandaloneServices.get(IConfigurationService),\n\t\t);\n\t};\n\tif (isThenable<IMonarchLanguage>(languageDef)) {\n\t\treturn registerTokensProviderFactory(languageId, {\n\t\t\tcreate: () => languageDef,\n\t\t});\n\t}\n\treturn languages.TokenizationRegistry.register(\n\t\tlanguageId,\n\t\tcreate(languageDef),\n\t);\n}\n\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.ReferenceProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.referenceProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.RenameProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.renameProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.NewSymbolNamesProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.newSymbolNamesProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.SignatureHelpProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.signatureHelpProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.HoverProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.hoverProvider.register(languageSelector, {\n\t\tprovideHover: async (\n\t\t\tmodel: model.ITextModel,\n\t\t\tposition: Position,\n\t\t\ttoken: CancellationToken,\n\t\t\tcontext?: languages.HoverContext<languages.Hover>,\n\t\t): Promise<languages.Hover | undefined> => {\n\t\t\tconst word = model.getWordAtPosition(position);\n\n\t\t\treturn Promise.resolve<languages.Hover | null | undefined>(\n\t\t\t\tprovider.provideHover(model, position, token, context),\n\t\t\t).then((value): languages.Hover | undefined => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!value.range && word) {\n\t\t\t\t\tvalue.range = new Range(\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tword.startColumn,\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tword.endColumn,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (!value.range) {\n\t\t\t\t\tvalue.range = new Range(\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column,\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t},\n\t});\n}\n\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentSymbolProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.documentSymbolProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentHighlightProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.documentHighlightProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.LinkedEditingRangeProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.linkedEditingRangeProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DefinitionProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.definitionProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.ImplementationProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.implementationProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.TypeDefinitionProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.typeDefinitionProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.CodeLensProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.codeLensProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: CodeActionProvider,\n\tmetadata?: CodeActionProviderMetadata,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.codeActionProvider.register(\n\t\tlanguageSelector,\n\t\t{\n\t\t\tprovidedCodeActionKinds: metadata?.providedCodeActionKinds,\n\t\t\tdocumentation: metadata?.documentation,\n\t\t\tprovideCodeActions: (\n\t\t\t\tmodel: model.ITextModel,\n\t\t\t\trange: Range,\n\t\t\t\tcontext: languages.CodeActionContext,\n\t\t\t\ttoken: CancellationToken,\n\t\t\t): languages.ProviderResult<languages.CodeActionList> => {\n\t\t\t\tconst markerService = StandaloneServices.get(IMarkerService);\n\t\t\t\tconst markers = markerService\n\t\t\t\t\t.read({ resource: model.uri })\n\t\t\t\t\t.filter((m) => {\n\t\t\t\t\t\treturn Range.areIntersectingOrTouching(m, range);\n\t\t\t\t\t});\n\t\t\t\treturn provider.provideCodeActions(\n\t\t\t\t\tmodel,\n\t\t\t\t\trange,\n\t\t\t\t\t{ markers, only: context.only, trigger: context.trigger },\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t},\n\t\t\tresolveCodeAction: provider.resolveCodeAction,\n\t\t},\n\t);\n}\n\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentFormattingEditProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.documentFormattingEditProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentRangeFormattingEditProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.documentRangeFormattingEditProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.OnTypeFormattingEditProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.onTypeFormattingEditProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.LinkProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.linkProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.CompletionItemProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.completionProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentColorProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.colorProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.FoldingRangeProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.foldingRangeProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DeclarationProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.declarationProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.SelectionRangeProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.selectionRangeProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentSemanticTokensProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.documentSemanticTokensProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.DocumentRangeSemanticTokensProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.documentRangeSemanticTokensProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.InlineCompletionsProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.inlineCompletionsProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\nexport function registerInlineEditProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.InlineEditProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.inlineEditProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(\n\tlanguageSelector: LanguageSelector,\n\tprovider: languages.InlayHintsProvider,\n): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(\n\t\tILanguageFeaturesService,\n\t);\n\treturn languageFeaturesService.inlayHintsProvider.register(\n\t\tlanguageSelector,\n\t\tprovider,\n\t);\n}\n\n/**\n * Contains additional diagnostic information about the context in which\n * a [code action](#CodeActionProvider.provideCodeActions) is run.\n */\nexport interface CodeActionContext {\n\t/**\n\t * An array of diagnostics.\n\t */\n\treadonly markers: IMarkerData[];\n\n\t/**\n\t * Requested kind of actions to return.\n\t */\n\treadonly only?: string;\n\n\t/**\n\t * The reason why code actions were requested.\n\t */\n\treadonly trigger: languages.CodeActionTriggerType;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n */\nexport interface CodeActionProvider {\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(\n\t\tmodel: model.ITextModel,\n\t\trange: Range,\n\t\tcontext: CodeActionContext,\n\t\ttoken: CancellationToken,\n\t): languages.ProviderResult<languages.CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(\n\t\tcodeAction: languages.CodeAction,\n\t\ttoken: CancellationToken,\n\t): languages.ProviderResult<languages.CodeAction>;\n}\n\n/**\n * Metadata about the type of code actions that a {@link CodeActionProvider} provides.\n */\nexport interface CodeActionProviderMetadata {\n\t/**\n\t * List of code action kinds that a {@link CodeActionProvider} may return.\n\t *\n\t * This list is used to determine if a given `CodeActionProvider` should be invoked or not.\n\t * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\n\t * list of kinds may either be generic, such as `[\"quickfix\", \"refactor\", \"source\"]`, or list out every kind provided,\n\t * such as `[\"quickfix.removeLine\", \"source.fixAll\" ...]`.\n\t */\n\treadonly providedCodeActionKinds?: readonly string[];\n\n\treadonly documentation?: ReadonlyArray<{\n\t\treadonly kind: string;\n\t\treadonly command: languages.Command;\n\t}>;\n}\n\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI(): typeof monaco.languages {\n\treturn {\n\t\tregister: <any>register,\n\t\tgetLanguages: <any>getLanguages,\n\t\tonLanguage: <any>onLanguage,\n\t\tonLanguageEncountered: <any>onLanguageEncountered,\n\t\tgetEncodedLanguageId: <any>getEncodedLanguageId,\n\n\t\t// provider methods\n\t\tsetLanguageConfiguration: <any>setLanguageConfiguration,\n\t\tsetColorMap: setColorMap,\n\t\tregisterTokensProviderFactory: <any>registerTokensProviderFactory,\n\t\tsetTokensProvider: <any>setTokensProvider,\n\t\tsetMonarchTokensProvider: <any>setMonarchTokensProvider,\n\t\tregisterReferenceProvider: <any>registerReferenceProvider,\n\t\tregisterRenameProvider: <any>registerRenameProvider,\n\t\tregisterNewSymbolNameProvider: <any>registerNewSymbolNameProvider,\n\t\tregisterCompletionItemProvider: <any>registerCompletionItemProvider,\n\t\tregisterSignatureHelpProvider: <any>registerSignatureHelpProvider,\n\t\tregisterHoverProvider: <any>registerHoverProvider,\n\t\tregisterDocumentSymbolProvider: <any>registerDocumentSymbolProvider,\n\t\tregisterDocumentHighlightProvider: <any>(\n\t\t\tregisterDocumentHighlightProvider\n\t\t),\n\t\tregisterLinkedEditingRangeProvider: <any>(\n\t\t\tregisterLinkedEditingRangeProvider\n\t\t),\n\t\tregisterDefinitionProvider: <any>registerDefinitionProvider,\n\t\tregisterImplementationProvider: <any>registerImplementationProvider,\n\t\tregisterTypeDefinitionProvider: <any>registerTypeDefinitionProvider,\n\t\tregisterCodeLensProvider: <any>registerCodeLensProvider,\n\t\tregisterCodeActionProvider: <any>registerCodeActionProvider,\n\t\tregisterDocumentFormattingEditProvider: <any>(\n\t\t\tregisterDocumentFormattingEditProvider\n\t\t),\n\t\tregisterDocumentRangeFormattingEditProvider: <any>(\n\t\t\tregisterDocumentRangeFormattingEditProvider\n\t\t),\n\t\tregisterOnTypeFormattingEditProvider: <any>(\n\t\t\tregisterOnTypeFormattingEditProvider\n\t\t),\n\t\tregisterLinkProvider: <any>registerLinkProvider,\n\t\tregisterColorProvider: <any>registerColorProvider,\n\t\tregisterFoldingRangeProvider: <any>registerFoldingRangeProvider,\n\t\tregisterDeclarationProvider: <any>registerDeclarationProvider,\n\t\tregisterSelectionRangeProvider: <any>registerSelectionRangeProvider,\n\t\tregisterDocumentSemanticTokensProvider: <any>(\n\t\t\tregisterDocumentSemanticTokensProvider\n\t\t),\n\t\tregisterDocumentRangeSemanticTokensProvider: <any>(\n\t\t\tregisterDocumentRangeSemanticTokensProvider\n\t\t),\n\t\tregisterInlineCompletionsProvider: <any>(\n\t\t\tregisterInlineCompletionsProvider\n\t\t),\n\t\tregisterInlineEditProvider: <any>registerInlineEditProvider,\n\t\tregisterInlayHintsProvider: <any>registerInlayHintsProvider,\n\n\t\t// enums\n\t\tDocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n\t\tCompletionItemKind: standaloneEnums.CompletionItemKind,\n\t\tCompletionItemTag: standaloneEnums.CompletionItemTag,\n\t\tCompletionItemInsertTextRule:\n\t\t\tstandaloneEnums.CompletionItemInsertTextRule,\n\t\tSymbolKind: standaloneEnums.SymbolKind,\n\t\tSymbolTag: standaloneEnums.SymbolTag,\n\t\tIndentAction: standaloneEnums.IndentAction,\n\t\tCompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n\t\tSignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n\t\tInlayHintKind: standaloneEnums.InlayHintKind,\n\t\tInlineCompletionTriggerKind:\n\t\t\tstandaloneEnums.InlineCompletionTriggerKind,\n\t\tInlineEditTriggerKind: standaloneEnums.InlineEditTriggerKind,\n\t\tCodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n\t\tNewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n\t\tNewSymbolNameTriggerKind: standaloneEnums.NewSymbolNameTriggerKind,\n\t\tPartialAcceptTriggerKind: standaloneEnums.PartialAcceptTriggerKind,\n\t\tHoverVerbosityAction: standaloneEnums.HoverVerbosityAction,\n\n\t\t// classes\n\t\tFoldingRangeKind: languages.FoldingRangeKind,\n\t\tSelectedSuggestionInfo: <any>languages.SelectedSuggestionInfo,\n\t};\n}\n"],
  "mappings": "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",
  "names": ["languageDef"]
}
