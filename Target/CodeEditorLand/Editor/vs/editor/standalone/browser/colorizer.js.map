{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/browser/colorizer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ColorId, FontStyle, MetadataConsts } from '../../common/encodedTokenAttributes.js';\nimport { ILanguageIdCodec, ITokenizationSupport, TokenizationRegistry } from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { ITextModel } from '../../common/model.js';\nimport { IViewLineTokens, LineTokens } from '../../common/tokens/lineTokens.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\n\nconst ttPolicy = createTrustedTypesPolicy('standaloneColorizer', { createHTML: value => value });\n\nexport interface IColorizerOptions {\n\ttabSize?: number;\n}\n\nexport interface IColorizerElementOptions extends IColorizerOptions {\n\ttheme?: string;\n\tmimeType?: string;\n}\n\nexport class Colorizer {\n\n\tpublic static colorizeElement(themeService: IStandaloneThemeService, languageService: ILanguageService, domNode: HTMLElement, options: IColorizerElementOptions): Promise<void> {\n\t\toptions = options || {};\n\t\tconst theme = options.theme || 'vs';\n\t\tconst mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n\t\tif (!mimeType) {\n\t\t\tconsole.error('Mode not detected');\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst languageId = languageService.getLanguageIdByMimeType(mimeType) || mimeType;\n\n\t\tthemeService.setTheme(theme);\n\n\t\tconst text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n\t\tdomNode.className += ' ' + theme;\n\t\tconst render = (str: string) => {\n\t\t\tconst trustedhtml = ttPolicy?.createHTML(str) ?? str;\n\t\t\tdomNode.innerHTML = trustedhtml as string;\n\t\t};\n\t\treturn this.colorize(languageService, text || '', languageId, options).then(render, (err) => console.error(err));\n\t}\n\n\tpublic static async colorize(languageService: ILanguageService, text: string, languageId: string, options: IColorizerOptions | null | undefined): Promise<string> {\n\t\tconst languageIdCodec = languageService.languageIdCodec;\n\t\tlet tabSize = 4;\n\t\tif (options && typeof options.tabSize === 'number') {\n\t\t\ttabSize = options.tabSize;\n\t\t}\n\n\t\tif (strings.startsWithUTF8BOM(text)) {\n\t\t\ttext = text.substr(1);\n\t\t}\n\t\tconst lines = strings.splitLines(text);\n\t\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn _fakeColorize(lines, tabSize, languageIdCodec);\n\t\t}\n\n\t\tconst tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn _colorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n\t\t}\n\n\t\treturn _fakeColorize(lines, tabSize, languageIdCodec);\n\t}\n\n\tpublic static colorizeLine(line: string, mightContainNonBasicASCII: boolean, mightContainRTL: boolean, tokens: IViewLineTokens, tabSize: number = 4): string {\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n\t\tconst renderResult = renderViewLine(new RenderLineInput(\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\ttokens,\n\t\t\t[],\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-1,\n\t\t\t'none',\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnull\n\t\t));\n\t\treturn renderResult.html;\n\t}\n\n\tpublic static colorizeModelLine(model: ITextModel, lineNumber: number, tabSize: number = 4): string {\n\t\tconst content = model.getLineContent(lineNumber);\n\t\tmodel.tokenization.forceTokenization(lineNumber);\n\t\tconst tokens = model.tokenization.getLineTokens(lineNumber);\n\t\tconst inflatedTokens = tokens.inflate();\n\t\treturn this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n\t}\n}\n\nfunction _colorize(lines: string[], tabSize: number, tokenizationSupport: ITokenizationSupport, languageIdCodec: ILanguageIdCodec): Promise<string> {\n\treturn new Promise<string>((c, e) => {\n\t\tconst execute = () => {\n\t\t\tconst result = _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n\t\t\tif (tokenizationSupport instanceof MonarchTokenizer) {\n\t\t\t\tconst status = tokenizationSupport.getLoadStatus();\n\t\t\t\tif (status.loaded === false) {\n\t\t\t\t\tstatus.promise.then(execute, e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tc(result);\n\t\t};\n\t\texecute();\n\t});\n}\n\nfunction _fakeColorize(lines: string[], tabSize: number, languageIdCodec: ILanguageIdCodec): string {\n\tlet html: string[] = [];\n\n\tconst defaultMetadata = (\n\t\t(FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\tconst tokens = new Uint32Array(2);\n\ttokens[0] = 0;\n\ttokens[1] = defaultMetadata;\n\n\tfor (let i = 0, length = lines.length; i < length; i++) {\n\t\tconst line = lines[i];\n\n\t\ttokens[0] = line.length;\n\t\tconst lineTokens = new LineTokens(tokens, line, languageIdCodec);\n\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n\t\tconst renderResult = renderViewLine(new RenderLineInput(\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\t[],\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-1,\n\t\t\t'none',\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnull\n\t\t));\n\n\t\thtml = html.concat(renderResult.html);\n\t\thtml.push('<br/>');\n\t}\n\n\treturn html.join('');\n}\n\nfunction _actualColorize(lines: string[], tabSize: number, tokenizationSupport: ITokenizationSupport, languageIdCodec: ILanguageIdCodec): string {\n\tlet html: string[] = [];\n\tlet state = tokenizationSupport.getInitialState();\n\n\tfor (let i = 0, length = lines.length; i < length; i++) {\n\t\tconst line = lines[i];\n\t\tconst tokenizeResult = tokenizationSupport.tokenizeEncoded(line, true, state);\n\t\tLineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n\t\tconst lineTokens = new LineTokens(tokenizeResult.tokens, line, languageIdCodec);\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n\t\tconst renderResult = renderViewLine(new RenderLineInput(\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\t[],\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t-1,\n\t\t\t'none',\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnull\n\t\t));\n\n\t\thtml = html.concat(renderResult.html);\n\t\thtml.push('<br/>');\n\n\t\tstate = tokenizeResult.endState;\n\t}\n\n\treturn html.join('');\n}\n"],
  "mappings": "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",
  "names": []
}
