{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/browser/colorizer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from \"../../../base/browser/trustedTypes.js\";\nimport * as strings from \"../../../base/common/strings.js\";\nimport {\n\tColorId,\n\tFontStyle,\n\tMetadataConsts,\n} from \"../../common/encodedTokenAttributes.js\";\nimport {\n\ttype ILanguageIdCodec,\n\ttype ITokenizationSupport,\n\tTokenizationRegistry,\n} from \"../../common/languages.js\";\nimport type { ILanguageService } from \"../../common/languages/language.js\";\nimport type { ITextModel } from \"../../common/model.js\";\nimport {\n\ttype IViewLineTokens,\n\tLineTokens,\n} from \"../../common/tokens/lineTokens.js\";\nimport {\n\tRenderLineInput,\n\trenderViewLine2 as renderViewLine,\n} from \"../../common/viewLayout/viewLineRenderer.js\";\nimport { ViewLineRenderingData } from \"../../common/viewModel.js\";\nimport { MonarchTokenizer } from \"../common/monarch/monarchLexer.js\";\nimport type { IStandaloneThemeService } from \"../common/standaloneTheme.js\";\n\nconst ttPolicy = createTrustedTypesPolicy(\"standaloneColorizer\", {\n\tcreateHTML: (value) => value,\n});\n\nexport interface IColorizerOptions {\n\ttabSize?: number;\n}\n\nexport interface IColorizerElementOptions extends IColorizerOptions {\n\ttheme?: string;\n\tmimeType?: string;\n}\n\nexport class Colorizer {\n\tpublic static colorizeElement(\n\t\tthemeService: IStandaloneThemeService,\n\t\tlanguageService: ILanguageService,\n\t\tdomNode: HTMLElement,\n\t\toptions: IColorizerElementOptions,\n\t): Promise<void> {\n\t\toptions = options || {};\n\t\tconst theme = options.theme || \"vs\";\n\t\tconst mimeType =\n\t\t\toptions.mimeType ||\n\t\t\tdomNode.getAttribute(\"lang\") ||\n\t\t\tdomNode.getAttribute(\"data-lang\");\n\t\tif (!mimeType) {\n\t\t\tconsole.error(\"Mode not detected\");\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst languageId =\n\t\t\tlanguageService.getLanguageIdByMimeType(mimeType) || mimeType;\n\n\t\tthemeService.setTheme(theme);\n\n\t\tconst text = domNode.firstChild ? domNode.firstChild.nodeValue : \"\";\n\t\tdomNode.className += \" \" + theme;\n\t\tconst render = (str: string) => {\n\t\t\tconst trustedhtml = ttPolicy?.createHTML(str) ?? str;\n\t\t\tdomNode.innerHTML = trustedhtml as string;\n\t\t};\n\t\treturn this.colorize(\n\t\t\tlanguageService,\n\t\t\ttext || \"\",\n\t\t\tlanguageId,\n\t\t\toptions,\n\t\t).then(render, (err) => console.error(err));\n\t}\n\n\tpublic static async colorize(\n\t\tlanguageService: ILanguageService,\n\t\ttext: string,\n\t\tlanguageId: string,\n\t\toptions: IColorizerOptions | null | undefined,\n\t): Promise<string> {\n\t\tconst languageIdCodec = languageService.languageIdCodec;\n\t\tlet tabSize = 4;\n\t\tif (options && typeof options.tabSize === \"number\") {\n\t\t\ttabSize = options.tabSize;\n\t\t}\n\n\t\tif (strings.startsWithUTF8BOM(text)) {\n\t\t\ttext = text.substr(1);\n\t\t}\n\t\tconst lines = strings.splitLines(text);\n\t\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn _fakeColorize(lines, tabSize, languageIdCodec);\n\t\t}\n\n\t\tconst tokenizationSupport =\n\t\t\tawait TokenizationRegistry.getOrCreate(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn _colorize(\n\t\t\t\tlines,\n\t\t\t\ttabSize,\n\t\t\t\ttokenizationSupport,\n\t\t\t\tlanguageIdCodec,\n\t\t\t);\n\t\t}\n\n\t\treturn _fakeColorize(lines, tabSize, languageIdCodec);\n\t}\n\n\tpublic static colorizeLine(\n\t\tline: string,\n\t\tmightContainNonBasicASCII: boolean,\n\t\tmightContainRTL: boolean,\n\t\ttokens: IViewLineTokens,\n\t\ttabSize = 4,\n\t): string {\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(\n\t\t\tline,\n\t\t\tmightContainNonBasicASCII,\n\t\t);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(\n\t\t\tline,\n\t\t\tisBasicASCII,\n\t\t\tmightContainRTL,\n\t\t);\n\t\tconst renderResult = renderViewLine(\n\t\t\tnew RenderLineInput(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tline,\n\t\t\t\tfalse,\n\t\t\t\tisBasicASCII,\n\t\t\t\tcontainsRTL,\n\t\t\t\t0,\n\t\t\t\ttokens,\n\t\t\t\t[],\n\t\t\t\ttabSize,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t-1,\n\t\t\t\t\"none\",\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tnull,\n\t\t\t),\n\t\t);\n\t\treturn renderResult.html;\n\t}\n\n\tpublic static colorizeModelLine(\n\t\tmodel: ITextModel,\n\t\tlineNumber: number,\n\t\ttabSize = 4,\n\t): string {\n\t\tconst content = model.getLineContent(lineNumber);\n\t\tmodel.tokenization.forceTokenization(lineNumber);\n\t\tconst tokens = model.tokenization.getLineTokens(lineNumber);\n\t\tconst inflatedTokens = tokens.inflate();\n\t\treturn this.colorizeLine(\n\t\t\tcontent,\n\t\t\tmodel.mightContainNonBasicASCII(),\n\t\t\tmodel.mightContainRTL(),\n\t\t\tinflatedTokens,\n\t\t\ttabSize,\n\t\t);\n\t}\n}\n\nfunction _colorize(\n\tlines: string[],\n\ttabSize: number,\n\ttokenizationSupport: ITokenizationSupport,\n\tlanguageIdCodec: ILanguageIdCodec,\n): Promise<string> {\n\treturn new Promise<string>((c, e) => {\n\t\tconst execute = () => {\n\t\t\tconst result = _actualColorize(\n\t\t\t\tlines,\n\t\t\t\ttabSize,\n\t\t\t\ttokenizationSupport,\n\t\t\t\tlanguageIdCodec,\n\t\t\t);\n\t\t\tif (tokenizationSupport instanceof MonarchTokenizer) {\n\t\t\t\tconst status = tokenizationSupport.getLoadStatus();\n\t\t\t\tif (status.loaded === false) {\n\t\t\t\t\tstatus.promise.then(execute, e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tc(result);\n\t\t};\n\t\texecute();\n\t});\n}\n\nfunction _fakeColorize(\n\tlines: string[],\n\ttabSize: number,\n\tlanguageIdCodec: ILanguageIdCodec,\n): string {\n\tlet html: string[] = [];\n\n\tconst defaultMetadata =\n\t\t((FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET) |\n\t\t\t(ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET) |\n\t\t\t(ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)) >>>\n\t\t0;\n\n\tconst tokens = new Uint32Array(2);\n\ttokens[0] = 0;\n\ttokens[1] = defaultMetadata;\n\n\tfor (let i = 0, length = lines.length; i < length; i++) {\n\t\tconst line = lines[i];\n\n\t\ttokens[0] = line.length;\n\t\tconst lineTokens = new LineTokens(tokens, line, languageIdCodec);\n\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(\n\t\t\tline,\n\t\t\t/* check for basic ASCII */ true,\n\t\t);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(\n\t\t\tline,\n\t\t\tisBasicASCII,\n\t\t\t/* check for RTL */ true,\n\t\t);\n\t\tconst renderResult = renderViewLine(\n\t\t\tnew RenderLineInput(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tline,\n\t\t\t\tfalse,\n\t\t\t\tisBasicASCII,\n\t\t\t\tcontainsRTL,\n\t\t\t\t0,\n\t\t\t\tlineTokens,\n\t\t\t\t[],\n\t\t\t\ttabSize,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t-1,\n\t\t\t\t\"none\",\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tnull,\n\t\t\t),\n\t\t);\n\n\t\thtml = html.concat(renderResult.html);\n\t\thtml.push(\"<br/>\");\n\t}\n\n\treturn html.join(\"\");\n}\n\nfunction _actualColorize(\n\tlines: string[],\n\ttabSize: number,\n\ttokenizationSupport: ITokenizationSupport,\n\tlanguageIdCodec: ILanguageIdCodec,\n): string {\n\tlet html: string[] = [];\n\tlet state = tokenizationSupport.getInitialState();\n\n\tfor (let i = 0, length = lines.length; i < length; i++) {\n\t\tconst line = lines[i];\n\t\tconst tokenizeResult = tokenizationSupport.tokenizeEncoded(\n\t\t\tline,\n\t\t\ttrue,\n\t\t\tstate,\n\t\t);\n\t\tLineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n\t\tconst lineTokens = new LineTokens(\n\t\t\ttokenizeResult.tokens,\n\t\t\tline,\n\t\t\tlanguageIdCodec,\n\t\t);\n\t\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(\n\t\t\tline,\n\t\t\t/* check for basic ASCII */ true,\n\t\t);\n\t\tconst containsRTL = ViewLineRenderingData.containsRTL(\n\t\t\tline,\n\t\t\tisBasicASCII,\n\t\t\t/* check for RTL */ true,\n\t\t);\n\t\tconst renderResult = renderViewLine(\n\t\t\tnew RenderLineInput(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tline,\n\t\t\t\tfalse,\n\t\t\t\tisBasicASCII,\n\t\t\t\tcontainsRTL,\n\t\t\t\t0,\n\t\t\t\tlineTokens.inflate(),\n\t\t\t\t[],\n\t\t\t\ttabSize,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t-1,\n\t\t\t\t\"none\",\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tnull,\n\t\t\t),\n\t\t);\n\n\t\thtml = html.concat(renderResult.html);\n\t\thtml.push(\"<br/>\");\n\n\t\tstate = tokenizeResult.endState;\n\t}\n\n\treturn html.join(\"\");\n}\n"],
  "mappings": "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",
  "names": []
}
