{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/browser/standaloneTreeSitterService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Parser } from \"@vscode/tree-sitter-wasm\";\nimport { Event } from \"../../../base/common/event.js\";\nimport type { ITextModel } from \"../../common/model.js\";\nimport type {\n\tITreeSitterParseResult,\n\tITreeSitterParserService,\n} from \"../../common/services/treeSitterParserService.js\";\n\n/**\n * The monaco build doesn't like the dynamic import of tree sitter in the real service.\n * We use a dummy sertive here to make the build happy.\n */\nexport class StandaloneTreeSitterParserService\n\timplements ITreeSitterParserService\n{\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }> =\n\t\tEvent.None;\n\n\tgetOrInitLanguage(_languageId: string): Parser.Language | undefined {\n\t\treturn undefined;\n\t}\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined {\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,aAAa;AAWf,MAAM,kCAEb;AAAA,EAnBA,OAmBA;AAAA;AAAA;AAAA,EACU;AAAA,EACT,mBACC,MAAM;AAAA,EAEP,kBAAkB,aAAkD;AACnE,WAAO;AAAA,EACR;AAAA,EACA,eAAe,WAA2D;AACzE,WAAO;AAAA,EACR;AACD;",
  "names": []
}
