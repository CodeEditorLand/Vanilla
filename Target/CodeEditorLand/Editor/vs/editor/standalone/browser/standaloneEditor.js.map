{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/browser/standaloneEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport './standalone-tokens.css';\nimport { FontMeasurements } from '../../browser/config/fontMeasurements.js';\nimport { ICodeEditor } from '../../browser/editorBrowser.js';\nimport { EditorCommand, ServicesAccessor } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { IWebWorkerOptions, MonacoWebWorker, createWebWorker as actualCreateWebWorker } from './standaloneWebWorker.js';\nimport { ApplyUpdateResult, ConfigurationChangedEvent, EditorOptions } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { IPosition } from '../../common/core/position.js';\nimport { IRange } from '../../common/core/range.js';\nimport { EditorType, IDiffEditor } from '../../common/editorCommon.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../common/languages/modesRegistry.js';\nimport { NullState, nullTokenize } from '../../common/languages/nullTokenize.js';\nimport { FindMatch, ITextModel, TextModelResolvedOptions } from '../../common/model.js';\nimport { IModelService } from '../../common/services/model.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer, IColorizerElementOptions, IColorizerOptions } from './colorizer.js';\nimport { IActionDescriptor, IStandaloneCodeEditor, IStandaloneDiffEditor, IStandaloneDiffEditorConstructionOptions, IStandaloneEditorConstructionOptions, StandaloneDiffEditor2, StandaloneEditor, createTextModel } from './standaloneCodeEditor.js';\nimport { IEditorOverrideServices, StandaloneKeybindingService, StandaloneServices } from './standaloneServices.js';\nimport { StandaloneThemeService } from './standaloneThemeService.js';\nimport { IStandaloneThemeData, IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IMenuItem, MenuId, MenuRegistry } from '../../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandHandler } from '../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { ITextResourceEditorInput } from '../../../platform/editor/common/editor.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IMarker, IMarkerData, IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { MultiDiffEditorWidget } from '../../browser/widget/multiDiffEditor/multiDiffEditorWidget.js';\n\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function create(domElement: HTMLElement, options?: IStandaloneEditorConstructionOptions, override?: IEditorOverrideServices): IStandaloneCodeEditor {\n\tconst instantiationService = StandaloneServices.initialize(override || {});\n\treturn instantiationService.createInstance(StandaloneEditor, domElement, options);\n}\n\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\nexport function onDidCreateEditor(listener: (codeEditor: ICodeEditor) => void): IDisposable {\n\tconst codeEditorService = StandaloneServices.get(ICodeEditorService);\n\treturn codeEditorService.onCodeEditorAdd((editor) => {\n\t\tlistener(<ICodeEditor>editor);\n\t});\n}\n\n/**\n * Emitted when an diff editor is created.\n * @event\n */\nexport function onDidCreateDiffEditor(listener: (diffEditor: IDiffEditor) => void): IDisposable {\n\tconst codeEditorService = StandaloneServices.get(ICodeEditorService);\n\treturn codeEditorService.onDiffEditorAdd((editor) => {\n\t\tlistener(<IDiffEditor>editor);\n\t});\n}\n\n/**\n * Get all the created editors.\n */\nexport function getEditors(): readonly ICodeEditor[] {\n\tconst codeEditorService = StandaloneServices.get(ICodeEditorService);\n\treturn codeEditorService.listCodeEditors();\n}\n\n/**\n * Get all the created diff editors.\n */\nexport function getDiffEditors(): readonly IDiffEditor[] {\n\tconst codeEditorService = StandaloneServices.get(ICodeEditorService);\n\treturn codeEditorService.listDiffEditors();\n}\n\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function createDiffEditor(domElement: HTMLElement, options?: IStandaloneDiffEditorConstructionOptions, override?: IEditorOverrideServices): IStandaloneDiffEditor {\n\tconst instantiationService = StandaloneServices.initialize(override || {});\n\treturn instantiationService.createInstance(StandaloneDiffEditor2, domElement, options);\n}\n\nexport function createMultiFileDiffEditor(domElement: HTMLElement, override?: IEditorOverrideServices) {\n\tconst instantiationService = StandaloneServices.initialize(override || {});\n\treturn new MultiDiffEditorWidget(domElement, {}, instantiationService);\n}\n\n/**\n * Description of a command contribution\n */\nexport interface ICommandDescriptor {\n\t/**\n\t * An unique identifier of the contributed command.\n\t */\n\tid: string;\n\t/**\n\t * Callback that will be executed when the command is triggered.\n\t */\n\trun: ICommandHandler;\n}\n\n/**\n * Add a command.\n */\nexport function addCommand(descriptor: ICommandDescriptor): IDisposable {\n\tif ((typeof descriptor.id !== 'string') || (typeof descriptor.run !== 'function')) {\n\t\tthrow new Error('Invalid command descriptor, `id` and `run` are required properties!');\n\t}\n\treturn CommandsRegistry.registerCommand(descriptor.id, descriptor.run);\n}\n\n/**\n * Add an action to all editors.\n */\nexport function addEditorAction(descriptor: IActionDescriptor): IDisposable {\n\tif ((typeof descriptor.id !== 'string') || (typeof descriptor.label !== 'string') || (typeof descriptor.run !== 'function')) {\n\t\tthrow new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');\n\t}\n\n\tconst precondition = ContextKeyExpr.deserialize(descriptor.precondition);\n\tconst run = (accessor: ServicesAccessor, ...args: any[]): void | Promise<void> => {\n\t\treturn EditorCommand.runEditorCommand(accessor, args, precondition, (accessor, editor, args) => Promise.resolve(descriptor.run(editor, ...args)));\n\t};\n\n\tconst toDispose = new DisposableStore();\n\n\t// Register the command\n\ttoDispose.add(CommandsRegistry.registerCommand(descriptor.id, run));\n\n\t// Register the context menu item\n\tif (descriptor.contextMenuGroupId) {\n\t\tconst menuItem: IMenuItem = {\n\t\t\tcommand: {\n\t\t\t\tid: descriptor.id,\n\t\t\t\ttitle: descriptor.label\n\t\t\t},\n\t\t\twhen: precondition,\n\t\t\tgroup: descriptor.contextMenuGroupId,\n\t\t\torder: descriptor.contextMenuOrder || 0\n\t\t};\n\t\ttoDispose.add(MenuRegistry.appendMenuItem(MenuId.EditorContext, menuItem));\n\t}\n\n\t// Register the keybindings\n\tif (Array.isArray(descriptor.keybindings)) {\n\t\tconst keybindingService = StandaloneServices.get(IKeybindingService);\n\t\tif (!(keybindingService instanceof StandaloneKeybindingService)) {\n\t\t\tconsole.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n\t\t} else {\n\t\t\tconst keybindingsWhen = ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(descriptor.keybindingContext));\n\t\t\ttoDispose.add(keybindingService.addDynamicKeybindings(descriptor.keybindings.map((keybinding) => {\n\t\t\t\treturn {\n\t\t\t\t\tkeybinding,\n\t\t\t\t\tcommand: descriptor.id,\n\t\t\t\t\twhen: keybindingsWhen\n\t\t\t\t};\n\t\t\t})));\n\t\t}\n\t}\n\n\treturn toDispose;\n}\n\n/**\n * A keybinding rule.\n */\nexport interface IKeybindingRule {\n\tkeybinding: number;\n\tcommand?: string | null;\n\tcommandArgs?: any;\n\twhen?: string | null;\n}\n\n/**\n * Add a keybinding rule.\n */\nexport function addKeybindingRule(rule: IKeybindingRule): IDisposable {\n\treturn addKeybindingRules([rule]);\n}\n\n/**\n * Add keybinding rules.\n */\nexport function addKeybindingRules(rules: IKeybindingRule[]): IDisposable {\n\tconst keybindingService = StandaloneServices.get(IKeybindingService);\n\tif (!(keybindingService instanceof StandaloneKeybindingService)) {\n\t\tconsole.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n\t\treturn Disposable.None;\n\t}\n\n\treturn keybindingService.addDynamicKeybindings(rules.map((rule) => {\n\t\treturn {\n\t\t\tkeybinding: rule.keybinding,\n\t\t\tcommand: rule.command,\n\t\t\tcommandArgs: rule.commandArgs,\n\t\t\twhen: ContextKeyExpr.deserialize(rule.when),\n\t\t};\n\t}));\n}\n\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\nexport function createModel(value: string, language?: string, uri?: URI): ITextModel {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tconst languageId = languageService.getLanguageIdByMimeType(language) || language;\n\treturn createTextModel(\n\t\tStandaloneServices.get(IModelService),\n\t\tlanguageService,\n\t\tvalue,\n\t\tlanguageId,\n\t\turi\n\t);\n}\n\n/**\n * Change the language for a model.\n */\nexport function setModelLanguage(model: ITextModel, mimeTypeOrLanguageId: string): void {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tconst languageId = languageService.getLanguageIdByMimeType(mimeTypeOrLanguageId) || mimeTypeOrLanguageId || PLAINTEXT_LANGUAGE_ID;\n\tmodel.setLanguage(languageService.createById(languageId));\n}\n\n/**\n * Set the markers for a model.\n */\nexport function setModelMarkers(model: ITextModel, owner: string, markers: IMarkerData[]): void {\n\tif (model) {\n\t\tconst markerService = StandaloneServices.get(IMarkerService);\n\t\tmarkerService.changeOne(owner, model.uri, markers);\n\t}\n}\n\n/**\n * Remove all markers of an owner.\n */\nexport function removeAllMarkers(owner: string) {\n\tconst markerService = StandaloneServices.get(IMarkerService);\n\tmarkerService.changeAll(owner, []);\n}\n\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\nexport function getModelMarkers(filter: { owner?: string; resource?: URI; take?: number }): IMarker[] {\n\tconst markerService = StandaloneServices.get(IMarkerService);\n\treturn markerService.read(filter);\n}\n\n/**\n * Emitted when markers change for a model.\n * @event\n */\nexport function onDidChangeMarkers(listener: (e: readonly URI[]) => void): IDisposable {\n\tconst markerService = StandaloneServices.get(IMarkerService);\n\treturn markerService.onMarkerChanged(listener);\n}\n\n/**\n * Get the model that has `uri` if it exists.\n */\nexport function getModel(uri: URI): ITextModel | null {\n\tconst modelService = StandaloneServices.get(IModelService);\n\treturn modelService.getModel(uri);\n}\n\n/**\n * Get all the created models.\n */\nexport function getModels(): ITextModel[] {\n\tconst modelService = StandaloneServices.get(IModelService);\n\treturn modelService.getModels();\n}\n\n/**\n * Emitted when a model is created.\n * @event\n */\nexport function onDidCreateModel(listener: (model: ITextModel) => void): IDisposable {\n\tconst modelService = StandaloneServices.get(IModelService);\n\treturn modelService.onModelAdded(listener);\n}\n\n/**\n * Emitted right before a model is disposed.\n * @event\n */\nexport function onWillDisposeModel(listener: (model: ITextModel) => void): IDisposable {\n\tconst modelService = StandaloneServices.get(IModelService);\n\treturn modelService.onModelRemoved(listener);\n}\n\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\nexport function onDidChangeModelLanguage(listener: (e: { readonly model: ITextModel; readonly oldLanguage: string }) => void): IDisposable {\n\tconst modelService = StandaloneServices.get(IModelService);\n\treturn modelService.onModelLanguageChanged((e) => {\n\t\tlistener({\n\t\t\tmodel: e.model,\n\t\t\toldLanguage: e.oldLanguageId\n\t\t});\n\t});\n}\n\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker<T extends object>(opts: IWebWorkerOptions): MonacoWebWorker<T> {\n\treturn actualCreateWebWorker<T>(StandaloneServices.get(IModelService), opts);\n}\n\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\nexport function colorizeElement(domNode: HTMLElement, options: IColorizerElementOptions): Promise<void> {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tconst themeService = <StandaloneThemeService>StandaloneServices.get(IStandaloneThemeService);\n\treturn Colorizer.colorizeElement(themeService, languageService, domNode, options).then(() => {\n\t\tthemeService.registerEditorContainer(domNode);\n\t});\n}\n\n/**\n * Colorize `text` using language `languageId`.\n */\nexport function colorize(text: string, languageId: string, options: IColorizerOptions): Promise<string> {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tconst themeService = <StandaloneThemeService>StandaloneServices.get(IStandaloneThemeService);\n\tthemeService.registerEditorContainer(mainWindow.document.body);\n\treturn Colorizer.colorize(languageService, text, languageId, options);\n}\n\n/**\n * Colorize a line in a model.\n */\nexport function colorizeModelLine(model: ITextModel, lineNumber: number, tabSize: number = 4): string {\n\tconst themeService = <StandaloneThemeService>StandaloneServices.get(IStandaloneThemeService);\n\tthemeService.registerEditorContainer(mainWindow.document.body);\n\treturn Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n\n/**\n * @internal\n */\nfunction getSafeTokenizationSupport(language: string): Omit<languages.ITokenizationSupport, 'tokenizeEncoded'> {\n\tconst tokenizationSupport = languages.TokenizationRegistry.get(language);\n\tif (tokenizationSupport) {\n\t\treturn tokenizationSupport;\n\t}\n\treturn {\n\t\tgetInitialState: () => NullState,\n\t\ttokenize: (line: string, hasEOL: boolean, state: languages.IState) => nullTokenize(language, state)\n\t};\n}\n\n/**\n * Tokenize `text` using language `languageId`\n */\nexport function tokenize(text: string, languageId: string): languages.Token[][] {\n\t// Needed in order to get the mode registered for subsequent look-ups\n\tlanguages.TokenizationRegistry.getOrCreate(languageId);\n\n\tconst tokenizationSupport = getSafeTokenizationSupport(languageId);\n\tconst lines = splitLines(text);\n\tconst result: languages.Token[][] = [];\n\tlet state = tokenizationSupport.getInitialState();\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst line = lines[i];\n\t\tconst tokenizationResult = tokenizationSupport.tokenize(line, true, state);\n\n\t\tresult[i] = tokenizationResult.tokens;\n\t\tstate = tokenizationResult.endState;\n\t}\n\treturn result;\n}\n\n/**\n * Define a new theme or update an existing theme.\n */\nexport function defineTheme(themeName: string, themeData: IStandaloneThemeData): void {\n\tconst standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\tstandaloneThemeService.defineTheme(themeName, themeData);\n}\n\n/**\n * Switches to a theme.\n */\nexport function setTheme(themeName: string): void {\n\tconst standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\tstandaloneThemeService.setTheme(themeName);\n}\n\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\nexport function remeasureFonts(): void {\n\tFontMeasurements.clearAllFontInfos();\n}\n\n/**\n * Register a command.\n */\nexport function registerCommand(id: string, handler: (accessor: any, ...args: any[]) => void): IDisposable {\n\treturn CommandsRegistry.registerCommand({ id, handler });\n}\n\nexport interface ILinkOpener {\n\topen(resource: URI): boolean | Promise<boolean>;\n}\n\n/**\n * Registers a handler that is called when a link is opened in any editor. The handler callback should return `true` if the link was handled and `false` otherwise.\n * The handler that was registered last will be called first when a link is opened.\n *\n * Returns a disposable that can unregister the opener again.\n */\nexport function registerLinkOpener(opener: ILinkOpener): IDisposable {\n\tconst openerService = StandaloneServices.get(IOpenerService);\n\treturn openerService.registerOpener({\n\t\tasync open(resource: string | URI) {\n\t\t\tif (typeof resource === 'string') {\n\t\t\t\tresource = URI.parse(resource);\n\t\t\t}\n\t\t\treturn opener.open(resource);\n\t\t}\n\t});\n}\n\n/**\n * Represents an object that can handle editor open operations (e.g. when \"go to definition\" is called\n * with a resource other than the current model).\n */\nexport interface ICodeEditorOpener {\n\t/**\n\t * Callback that is invoked when a resource other than the current model should be opened (e.g. when \"go to definition\" is called).\n\t * The callback should return `true` if the request was handled and `false` otherwise.\n\t * @param source The code editor instance that initiated the request.\n\t * @param resource The URI of the resource that should be opened.\n\t * @param selectionOrPosition An optional position or selection inside the model corresponding to `resource` that can be used to set the cursor.\n\t */\n\topenCodeEditor(source: ICodeEditor, resource: URI, selectionOrPosition?: IRange | IPosition): boolean | Promise<boolean>;\n}\n\n/**\n * Registers a handler that is called when a resource other than the current model should be opened in the editor (e.g. \"go to definition\").\n * The handler callback should return `true` if the request was handled and `false` otherwise.\n *\n * Returns a disposable that can unregister the opener again.\n *\n * If no handler is registered the default behavior is to do nothing for models other than the currently attached one.\n */\nexport function registerEditorOpener(opener: ICodeEditorOpener): IDisposable {\n\tconst codeEditorService = StandaloneServices.get(ICodeEditorService);\n\treturn codeEditorService.registerCodeEditorOpenHandler(async (input: ITextResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean) => {\n\t\tif (!source) {\n\t\t\treturn null;\n\t\t}\n\t\tconst selection = input.options?.selection;\n\t\tlet selectionOrPosition: IRange | IPosition | undefined;\n\t\tif (selection && typeof selection.endLineNumber === 'number' && typeof selection.endColumn === 'number') {\n\t\t\tselectionOrPosition = <IRange>selection;\n\t\t} else if (selection) {\n\t\t\tselectionOrPosition = { lineNumber: selection.startLineNumber, column: selection.startColumn };\n\t\t}\n\t\tif (await opener.openCodeEditor(source, input.resource, selectionOrPosition)) {\n\t\t\treturn source; // return source editor to indicate that this handler has successfully handled the opening\n\t\t}\n\t\treturn null; // fallback to other registered handlers\n\t});\n}\n\n/**\n * @internal\n */\nexport function createMonacoEditorAPI(): typeof monaco.editor {\n\treturn {\n\t\t// methods\n\t\tcreate: <any>create,\n\t\tgetEditors: <any>getEditors,\n\t\tgetDiffEditors: <any>getDiffEditors,\n\t\tonDidCreateEditor: <any>onDidCreateEditor,\n\t\tonDidCreateDiffEditor: <any>onDidCreateDiffEditor,\n\t\tcreateDiffEditor: <any>createDiffEditor,\n\n\t\taddCommand: <any>addCommand,\n\t\taddEditorAction: <any>addEditorAction,\n\t\taddKeybindingRule: <any>addKeybindingRule,\n\t\taddKeybindingRules: <any>addKeybindingRules,\n\n\t\tcreateModel: <any>createModel,\n\t\tsetModelLanguage: <any>setModelLanguage,\n\t\tsetModelMarkers: <any>setModelMarkers,\n\t\tgetModelMarkers: <any>getModelMarkers,\n\t\tremoveAllMarkers: removeAllMarkers,\n\t\tonDidChangeMarkers: <any>onDidChangeMarkers,\n\t\tgetModels: <any>getModels,\n\t\tgetModel: <any>getModel,\n\t\tonDidCreateModel: <any>onDidCreateModel,\n\t\tonWillDisposeModel: <any>onWillDisposeModel,\n\t\tonDidChangeModelLanguage: <any>onDidChangeModelLanguage,\n\n\n\t\tcreateWebWorker: <any>createWebWorker,\n\t\tcolorizeElement: <any>colorizeElement,\n\t\tcolorize: <any>colorize,\n\t\tcolorizeModelLine: <any>colorizeModelLine,\n\t\ttokenize: <any>tokenize,\n\t\tdefineTheme: <any>defineTheme,\n\t\tsetTheme: <any>setTheme,\n\t\tremeasureFonts: remeasureFonts,\n\t\tregisterCommand: registerCommand,\n\n\t\tregisterLinkOpener: registerLinkOpener,\n\t\tregisterEditorOpener: <any>registerEditorOpener,\n\n\t\t// enums\n\t\tAccessibilitySupport: standaloneEnums.AccessibilitySupport,\n\t\tContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n\t\tCursorChangeReason: standaloneEnums.CursorChangeReason,\n\t\tDefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n\t\tEditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n\t\tEditorOption: standaloneEnums.EditorOption,\n\t\tEndOfLinePreference: standaloneEnums.EndOfLinePreference,\n\t\tEndOfLineSequence: standaloneEnums.EndOfLineSequence,\n\t\tMinimapPosition: standaloneEnums.MinimapPosition,\n\t\tMinimapSectionHeaderStyle: standaloneEnums.MinimapSectionHeaderStyle,\n\t\tMouseTargetType: standaloneEnums.MouseTargetType,\n\t\tOverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n\t\tOverviewRulerLane: standaloneEnums.OverviewRulerLane,\n\t\tGlyphMarginLane: standaloneEnums.GlyphMarginLane,\n\t\tRenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n\t\tRenderMinimap: standaloneEnums.RenderMinimap,\n\t\tScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n\t\tScrollType: standaloneEnums.ScrollType,\n\t\tTextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n\t\tTextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n\t\tTrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n\t\tWrappingIndent: standaloneEnums.WrappingIndent,\n\t\tInjectedTextCursorStops: standaloneEnums.InjectedTextCursorStops,\n\t\tPositionAffinity: standaloneEnums.PositionAffinity,\n\t\tShowLightbulbIconMode: standaloneEnums.ShowLightbulbIconMode,\n\n\t\t// classes\n\t\tConfigurationChangedEvent: <any>ConfigurationChangedEvent,\n\t\tBareFontInfo: <any>BareFontInfo,\n\t\tFontInfo: <any>FontInfo,\n\t\tTextModelResolvedOptions: <any>TextModelResolvedOptions,\n\t\tFindMatch: <any>FindMatch,\n\t\tApplyUpdateResult: <any>ApplyUpdateResult,\n\t\tEditorZoom: <any>EditorZoom,\n\n\t\tcreateMultiFileDiffEditor: <any>createMultiFileDiffEditor,\n\n\t\t// vars\n\t\tEditorType: EditorType,\n\t\tEditorOptions: <any>EditorOptions\n\n\t};\n}\n"],
  "mappings": "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",
  "names": ["accessor", "args"]
}
