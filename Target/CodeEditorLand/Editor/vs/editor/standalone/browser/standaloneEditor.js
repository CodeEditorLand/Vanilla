import{mainWindow as v}from"../../../base/browser/window.js";import{Disposable as x,DisposableStore as T}from"../../../base/common/lifecycle.js";import{splitLines as D}from"../../../base/common/strings.js";import{URI as h}from"../../../base/common/uri.js";import"./standalone-tokens.css";import{FontMeasurements as O}from"../../browser/config/fontMeasurements.js";import"../../browser/editorBrowser.js";import{EditorCommand as L}from"../../browser/editorExtensions.js";import{ICodeEditorService as l}from"../../browser/services/codeEditorService.js";import{createWebWorker as R}from"./standaloneWebWorker.js";import{ApplyUpdateResult as z,ConfigurationChangedEvent as A,EditorOptions as P}from"../../common/config/editorOptions.js";import{EditorZoom as W}from"../../common/config/editorZoom.js";import{BareFontInfo as w,FontInfo as K}from"../../common/config/fontInfo.js";import"../../common/core/position.js";import"../../common/core/range.js";import{EditorType as F}from"../../common/editorCommon.js";import*as M from"../../common/languages.js";import{ILanguageService as u}from"../../common/languages/language.js";import{PLAINTEXT_LANGUAGE_ID as U}from"../../common/languages/modesRegistry.js";import{NullState as H,nullTokenize as B}from"../../common/languages/nullTokenize.js";import{FindMatch as N,TextModelResolvedOptions as G}from"../../common/model.js";import{IModelService as c}from"../../common/services/model.js";import*as i from"../../common/standalone/standaloneEnums.js";import{Colorizer as S}from"./colorizer.js";import{StandaloneDiffEditor2 as q,StandaloneEditor as j,createTextModel as V}from"./standaloneCodeEditor.js";import{StandaloneKeybindingService as b,StandaloneServices as t}from"./standaloneServices.js";import"./standaloneThemeService.js";import{IStandaloneThemeService as m}from"../common/standaloneTheme.js";import{MenuId as Z,MenuRegistry as _}from"../../../platform/actions/common/actions.js";import{CommandsRegistry as y}from"../../../platform/commands/common/commands.js";import{ContextKeyExpr as g}from"../../../platform/contextkey/common/contextkey.js";import"../../../platform/editor/common/editor.js";import{IKeybindingService as C}from"../../../platform/keybinding/common/keybinding.js";import{IMarkerService as p}from"../../../platform/markers/common/markers.js";import{IOpenerService as X}from"../../../platform/opener/common/opener.js";import{MultiDiffEditorWidget as J}from"../../browser/widget/multiDiffEditor/multiDiffEditorWidget.js";function Q(e,n,o){return t.initialize(o||{}).createInstance(j,e,n)}function Y(e){return t.get(l).onCodeEditorAdd(o=>{e(o)})}function $(e){return t.get(l).onDiffEditorAdd(o=>{e(o)})}function ee(){return t.get(l).listCodeEditors()}function ne(){return t.get(l).listDiffEditors()}function oe(e,n,o){return t.initialize(o||{}).createInstance(q,e,n)}function te(e,n){const o=t.initialize(n||{});return new J(e,{},o)}function re(e){if(typeof e.id!="string"||typeof e.run!="function")throw new Error("Invalid command descriptor, `id` and `run` are required properties!");return y.registerCommand(e.id,e.run)}function ie(e){if(typeof e.id!="string"||typeof e.label!="string"||typeof e.run!="function")throw new Error("Invalid action descriptor, `id`, `label` and `run` are required properties!");const n=g.deserialize(e.precondition),o=(a,...d)=>L.runEditorCommand(a,d,n,(s,f,I)=>Promise.resolve(e.run(f,...I))),r=new T;if(r.add(y.registerCommand(e.id,o)),e.contextMenuGroupId){const a={command:{id:e.id,title:e.label},when:n,group:e.contextMenuGroupId,order:e.contextMenuOrder||0};r.add(_.appendMenuItem(Z.EditorContext,a))}if(Array.isArray(e.keybindings)){const a=t.get(C);if(a instanceof b){const d=g.and(n,g.deserialize(e.keybindingContext));r.add(a.addDynamicKeybindings(e.keybindings.map(s=>({keybinding:s,command:e.id,when:d}))))}}return r}function ae(e){return k([e])}function k(e){const n=t.get(C);return n instanceof b?n.addDynamicKeybindings(e.map(o=>({keybinding:o.keybinding,command:o.command,commandArgs:o.commandArgs,when:g.deserialize(o.when)}))):x.None}function de(e,n,o){const r=t.get(u),a=r.getLanguageIdByMimeType(n)||n;return V(t.get(c),r,e,a,o)}function se(e,n){const o=t.get(u),r=o.getLanguageIdByMimeType(n)||n||U;e.setLanguage(o.createById(r))}function ce(e,n,o){e&&t.get(p).changeOne(n,e.uri,o)}function le(e){t.get(p).changeAll(e,[])}function me(e){return t.get(p).read(e)}function ue(e){return t.get(p).onMarkerChanged(e)}function ge(e){return t.get(c).getModel(e)}function pe(){return t.get(c).getModels()}function fe(e){return t.get(c).onModelAdded(e)}function Ie(e){return t.get(c).onModelRemoved(e)}function Se(e){return t.get(c).onModelLanguageChanged(o=>{e({model:o.model,oldLanguage:o.oldLanguageId})})}function ye(e){return R(t.get(c),e)}function Ee(e,n){const o=t.get(u),r=t.get(m);return S.colorizeElement(r,o,e,n).then(()=>{r.registerEditorContainer(e)})}function ve(e,n,o){const r=t.get(u);return t.get(m).registerEditorContainer(v.document.body),S.colorize(r,e,n,o)}function Me(e,n,o=4){return t.get(m).registerEditorContainer(v.document.body),S.colorizeModelLine(e,n,o)}function be(e){const n=M.TokenizationRegistry.get(e);return n||{getInitialState:()=>H,tokenize:(o,r,a)=>B(e,a)}}function Ce(e,n){M.TokenizationRegistry.getOrCreate(n);const o=be(n),r=D(e),a=[];let d=o.getInitialState();for(let s=0,f=r.length;s<f;s++){const I=r[s],E=o.tokenize(I,!0,d);a[s]=E.tokens,d=E.endState}return a}function ke(e,n){t.get(m).defineTheme(e,n)}function xe(e){t.get(m).setTheme(e)}function Te(){O.clearAllFontInfos()}function De(e,n){return y.registerCommand({id:e,handler:n})}function he(e){return t.get(X).registerOpener({async open(o){return typeof o=="string"&&(o=h.parse(o)),e.open(o)}})}function Oe(e){return t.get(l).registerCodeEditorOpenHandler(async(o,r,a)=>{if(!r)return null;const d=o.options?.selection;let s;return d&&typeof d.endLineNumber=="number"&&typeof d.endColumn=="number"?s=d:d&&(s={lineNumber:d.startLineNumber,column:d.startColumn}),await e.openCodeEditor(r,o.resource,s)?r:null})}function Wn(){return{create:Q,getEditors:ee,getDiffEditors:ne,onDidCreateEditor:Y,onDidCreateDiffEditor:$,createDiffEditor:oe,addCommand:re,addEditorAction:ie,addKeybindingRule:ae,addKeybindingRules:k,createModel:de,setModelLanguage:se,setModelMarkers:ce,getModelMarkers:me,removeAllMarkers:le,onDidChangeMarkers:ue,getModels:pe,getModel:ge,onDidCreateModel:fe,onWillDisposeModel:Ie,onDidChangeModelLanguage:Se,createWebWorker:ye,colorizeElement:Ee,colorize:ve,colorizeModelLine:Me,tokenize:Ce,defineTheme:ke,setTheme:xe,remeasureFonts:Te,registerCommand:De,registerLinkOpener:he,registerEditorOpener:Oe,AccessibilitySupport:i.AccessibilitySupport,ContentWidgetPositionPreference:i.ContentWidgetPositionPreference,CursorChangeReason:i.CursorChangeReason,DefaultEndOfLine:i.DefaultEndOfLine,EditorAutoIndentStrategy:i.EditorAutoIndentStrategy,EditorOption:i.EditorOption,EndOfLinePreference:i.EndOfLinePreference,EndOfLineSequence:i.EndOfLineSequence,MinimapPosition:i.MinimapPosition,MinimapSectionHeaderStyle:i.MinimapSectionHeaderStyle,MouseTargetType:i.MouseTargetType,OverlayWidgetPositionPreference:i.OverlayWidgetPositionPreference,OverviewRulerLane:i.OverviewRulerLane,GlyphMarginLane:i.GlyphMarginLane,RenderLineNumbersType:i.RenderLineNumbersType,RenderMinimap:i.RenderMinimap,ScrollbarVisibility:i.ScrollbarVisibility,ScrollType:i.ScrollType,TextEditorCursorBlinkingStyle:i.TextEditorCursorBlinkingStyle,TextEditorCursorStyle:i.TextEditorCursorStyle,TrackedRangeStickiness:i.TrackedRangeStickiness,WrappingIndent:i.WrappingIndent,InjectedTextCursorStops:i.InjectedTextCursorStops,PositionAffinity:i.PositionAffinity,ShowLightbulbIconMode:i.ShowLightbulbIconMode,ConfigurationChangedEvent:A,BareFontInfo:w,FontInfo:K,TextModelResolvedOptions:G,FindMatch:N,ApplyUpdateResult:z,EditorZoom:W,createMultiFileDiffEditor:te,EditorType:F,EditorOptions:P}}export{re as addCommand,ie as addEditorAction,ae as addKeybindingRule,k as addKeybindingRules,ve as colorize,Ee as colorizeElement,Me as colorizeModelLine,Q as create,oe as createDiffEditor,de as createModel,Wn as createMonacoEditorAPI,te as createMultiFileDiffEditor,ye as createWebWorker,ke as defineTheme,ne as getDiffEditors,ee as getEditors,ge as getModel,me as getModelMarkers,pe as getModels,ue as onDidChangeMarkers,Se as onDidChangeModelLanguage,$ as onDidCreateDiffEditor,Y as onDidCreateEditor,fe as onDidCreateModel,Ie as onWillDisposeModel,De as registerCommand,Oe as registerEditorOpener,he as registerLinkOpener,Te as remeasureFonts,le as removeAllMarkers,se as setModelLanguage,ce as setModelMarkers,xe as setTheme,Ce as tokenize};
