{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/common/standaloneTheme.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Color } from \"../../../base/common/color.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tIColorTheme,\n\tIThemeService,\n} from \"../../../platform/theme/common/themeService.js\";\nimport type {\n\tITokenThemeRule,\n\tTokenTheme,\n} from \"../../common/languages/supports/tokenization.js\";\n\nexport const IStandaloneThemeService =\n\tcreateDecorator<IStandaloneThemeService>(\"themeService\");\n\nexport type BuiltinTheme = \"vs\" | \"vs-dark\" | \"hc-black\" | \"hc-light\";\nexport type IColors = { [colorId: string]: string };\n\nexport interface IStandaloneThemeData {\n\tbase: BuiltinTheme;\n\tinherit: boolean;\n\trules: ITokenThemeRule[];\n\tencodedTokensColors?: string[];\n\tcolors: IColors;\n}\n\nexport interface IStandaloneTheme extends IColorTheme {\n\ttokenTheme: TokenTheme;\n\tthemeName: string;\n}\n\nexport interface IStandaloneThemeService extends IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tsetTheme(themeName: string): void;\n\n\tsetAutoDetectHighContrast(autoDetectHighContrast: boolean): void;\n\n\tdefineTheme(themeName: string, themeData: IStandaloneThemeData): void;\n\n\tgetColorTheme(): IStandaloneTheme;\n\n\tsetColorMapOverride(colorMapOverride: Color[] | null): void;\n}\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAUzB,MAAM,0BACZ,gBAAyC,cAAc;",
  "names": []
}
