{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/common/monarch/monarchCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*\n * This module exports common types and functionality shared between\n * the Monarch compiler that compiles JSON to ILexer, and the Monarch\n * Tokenizer (that highlights at runtime)\n */\n\n/*\n * Type definitions to be used internally to Monarch.\n * Inside monarch we use fully typed definitions and compiled versions of the more abstract JSON descriptions.\n */\n\nexport const enum MonarchBracket {\n\tNone = 0,\n\tOpen = 1,\n\tClose = -1\n}\n\nexport interface ILexerMin {\n\tlanguageId: string;\n\tincludeLF: boolean;\n\tnoThrow: boolean;\n\tignoreCase: boolean;\n\tunicode: boolean;\n\tusesEmbedded: boolean;\n\tdefaultToken: string;\n\tstateNames: { [stateName: string]: any };\n\t[attr: string]: any;\n}\n\nexport interface ILexer extends ILexerMin {\n\tmaxStack: number;\n\tstart: string | null;\n\tignoreCase: boolean;\n\tunicode: boolean;\n\ttokenPostfix: string;\n\n\ttokenizer: { [stateName: string]: IRule[] };\n\tbrackets: IBracket[];\n}\n\nexport interface IBracket {\n\ttoken: string;\n\topen: string;\n\tclose: string;\n}\n\nexport type FuzzyAction = IAction | string;\n\nexport function isFuzzyActionArr(what: FuzzyAction | FuzzyAction[]): what is FuzzyAction[] {\n\treturn (Array.isArray(what));\n}\n\nexport function isFuzzyAction(what: FuzzyAction | FuzzyAction[]): what is FuzzyAction {\n\treturn !isFuzzyActionArr(what);\n}\n\nexport function isString(what: FuzzyAction): what is string {\n\treturn (typeof what === 'string');\n}\n\nexport function isIAction(what: FuzzyAction): what is IAction {\n\treturn !isString(what);\n}\n\nexport interface IRule {\n\taction: FuzzyAction;\n\tmatchOnlyAtLineStart: boolean;\n\tname: string;\n\tresolveRegex(state: string): RegExp;\n}\n\nexport interface IAction {\n\t// an action is either a group of actions\n\tgroup?: FuzzyAction[];\n\n\t// or a function that returns a fresh action\n\ttest?: (id: string, matches: string[], state: string, eos: boolean) => FuzzyAction;\n\n\t// or it is a declarative action with a token value and various other attributes\n\ttoken?: string;\n\ttokenSubst?: boolean;\n\tnext?: string;\n\tnextEmbedded?: string;\n\tbracket?: MonarchBracket;\n\tlog?: string;\n\tswitchTo?: string;\n\tgoBack?: number;\n\ttransform?: (states: string[]) => string[];\n}\n\nexport interface IBranch {\n\tname: string;\n\tvalue: FuzzyAction;\n\ttest?: (id: string, matches: string[], state: string, eos: boolean) => boolean;\n}\n\n// Small helper functions\n\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s: string): boolean {\n\treturn (s ? false : true);\n}\n\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer: ILexerMin, str: string): string {\n\treturn (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s: string) {\n\treturn s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n\n// Logging\n\n/**\n * Logs a message.\n */\nexport function log(lexer: ILexerMin, msg: string) {\n\tconsole.log(`${lexer.languageId}: ${msg}`);\n}\n\n// Throwing errors\n\nexport function createError(lexer: ILexerMin, msg: string): Error {\n\treturn new Error(`${lexer.languageId}: ${msg}`);\n}\n\n// Helper functions for rule finding and substitution\n\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer: ILexerMin, str: string, id: string, matches: string[], state: string): string {\n\tconst re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n\tlet stateMatches: string[] | null = null;\n\treturn str.replace(re, function (full, sub?, dollar?, hash?, n?, s?, attr?, ofs?, total?) {\n\t\tif (!empty(dollar)) {\n\t\t\treturn '$'; // $$\n\t\t}\n\t\tif (!empty(hash)) {\n\t\t\treturn fixCase(lexer, id);   // default $#\n\t\t}\n\t\tif (!empty(n) && n < matches.length) {\n\t\t\treturn fixCase(lexer, matches[n]); // $n\n\t\t}\n\t\tif (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n\t\t\treturn lexer[attr]; //@attribute\n\t\t}\n\t\tif (stateMatches === null) { // split state on demand\n\t\t\tstateMatches = state.split('.');\n\t\t\tstateMatches.unshift(state);\n\t\t}\n\t\tif (!empty(s) && s < stateMatches.length) {\n\t\t\treturn fixCase(lexer, stateMatches[s]); //$Sn\n\t\t}\n\t\treturn '';\n\t});\n}\n\n/**\n * substituteMatchesRe is used on lexer regex rules and can substitutes predefined patterns:\n * \t\t$Sn => n'th part of state\n *\n */\nexport function substituteMatchesRe(lexer: ILexerMin, str: string, state: string): string {\n\tconst re = /\\$[sS](\\d\\d?)/g;\n\tlet stateMatches: string[] | null = null;\n\treturn str.replace(re, function (full, s) {\n\t\tif (stateMatches === null) { // split state on demand\n\t\t\tstateMatches = state.split('.');\n\t\t\tstateMatches.unshift(state);\n\t\t}\n\t\tif (!empty(s) && s < stateMatches.length) {\n\t\t\treturn fixCase(lexer, stateMatches[s]); //$Sn\n\t\t}\n\t\treturn '';\n\t});\n}\n\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer: ILexer, inState: string): IRule[] | null {\n\tlet state: string | null = inState;\n\twhile (state && state.length > 0) {\n\t\tconst rules = lexer.tokenizer[state];\n\t\tif (rules) {\n\t\t\treturn rules;\n\t\t}\n\n\t\tconst idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer: ILexerMin, inState: string): boolean {\n\tlet state: string | null = inState;\n\twhile (state && state.length > 0) {\n\t\tconst exist = lexer.stateNames[state];\n\t\tif (exist) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn false;\n}\n"],
  "mappings": ";;AAgBO,IAAW,iBAAX,kBAAWA,oBAAX;AACN,EAAAA,gCAAA,UAAO,KAAP;AACA,EAAAA,gCAAA,UAAO,KAAP;AACA,EAAAA,gCAAA,WAAQ,MAAR;AAHiB,SAAAA;AAAA,GAAA;AAqCX,SAAS,iBAAiB,MAA0D;AAC1F,SAAQ,MAAM,QAAQ,IAAI;AAC3B;AAFgB;AAIT,SAAS,cAAc,MAAwD;AACrF,SAAO,CAAC,iBAAiB,IAAI;AAC9B;AAFgB;AAIT,SAAS,SAAS,MAAmC;AAC3D,SAAQ,OAAO,SAAS;AACzB;AAFgB;AAIT,SAAS,UAAU,MAAoC;AAC7D,SAAO,CAAC,SAAS,IAAI;AACtB;AAFgB;AAyCT,SAAS,MAAM,GAAoB;AACzC,SAAQ,IAAI,QAAQ;AACrB;AAFgB;AAOT,SAAS,QAAQ,OAAkB,KAAqB;AAC9D,SAAQ,MAAM,cAAc,MAAM,IAAI,YAAY,IAAI;AACvD;AAFgB;AAOT,SAAS,SAAS,GAAW;AACnC,SAAO,EAAE,QAAQ,aAAa,GAAG;AAClC;AAFgB;AAST,SAAS,IAAI,OAAkB,KAAa;AAClD,UAAQ,IAAI,GAAG,MAAM,UAAU,KAAK,GAAG,EAAE;AAC1C;AAFgB;AAMT,SAAS,YAAY,OAAkB,KAAoB;AACjE,SAAO,IAAI,MAAM,GAAG,MAAM,UAAU,KAAK,GAAG,EAAE;AAC/C;AAFgB;AAeT,SAAS,kBAAkB,OAAkB,KAAa,IAAY,SAAmB,OAAuB;AACtH,QAAM,KAAK;AACX,MAAI,eAAgC;AACpC,SAAO,IAAI,QAAQ,IAAI,SAAU,MAAM,KAAM,QAAS,MAAO,GAAI,GAAI,MAAO,KAAM,OAAQ;AACzF,QAAI,CAAC,MAAM,MAAM,GAAG;AACnB,aAAO;AAAA,IACR;AACA,QAAI,CAAC,MAAM,IAAI,GAAG;AACjB,aAAO,QAAQ,OAAO,EAAE;AAAA,IACzB;AACA,QAAI,CAAC,MAAM,CAAC,KAAK,IAAI,QAAQ,QAAQ;AACpC,aAAO,QAAQ,OAAO,QAAQ,CAAC,CAAC;AAAA,IACjC;AACA,QAAI,CAAC,MAAM,IAAI,KAAK,SAAS,OAAQ,MAAM,IAAI,MAAO,UAAU;AAC/D,aAAO,MAAM,IAAI;AAAA,IAClB;AACA,QAAI,iBAAiB,MAAM;AAC1B,qBAAe,MAAM,MAAM,GAAG;AAC9B,mBAAa,QAAQ,KAAK;AAAA,IAC3B;AACA,QAAI,CAAC,MAAM,CAAC,KAAK,IAAI,aAAa,QAAQ;AACzC,aAAO,QAAQ,OAAO,aAAa,CAAC,CAAC;AAAA,IACtC;AACA,WAAO;AAAA,EACR,CAAC;AACF;AAzBgB;AAgCT,SAAS,oBAAoB,OAAkB,KAAa,OAAuB;AACzF,QAAM,KAAK;AACX,MAAI,eAAgC;AACpC,SAAO,IAAI,QAAQ,IAAI,SAAU,MAAM,GAAG;AACzC,QAAI,iBAAiB,MAAM;AAC1B,qBAAe,MAAM,MAAM,GAAG;AAC9B,mBAAa,QAAQ,KAAK;AAAA,IAC3B;AACA,QAAI,CAAC,MAAM,CAAC,KAAK,IAAI,aAAa,QAAQ;AACzC,aAAO,QAAQ,OAAO,aAAa,CAAC,CAAC;AAAA,IACtC;AACA,WAAO;AAAA,EACR,CAAC;AACF;AAbgB;AAkBT,SAAS,UAAU,OAAe,SAAiC;AACzE,MAAI,QAAuB;AAC3B,SAAO,SAAS,MAAM,SAAS,GAAG;AACjC,UAAM,QAAQ,MAAM,UAAU,KAAK;AACnC,QAAI,OAAO;AACV,aAAO;AAAA,IACR;AAEA,UAAM,MAAM,MAAM,YAAY,GAAG;AACjC,QAAI,MAAM,GAAG;AACZ,cAAQ;AAAA,IACT,OAAO;AACN,cAAQ,MAAM,OAAO,GAAG,GAAG;AAAA,IAC5B;AAAA,EACD;AACA,SAAO;AACR;AAhBgB;AAuBT,SAAS,YAAY,OAAkB,SAA0B;AACvE,MAAI,QAAuB;AAC3B,SAAO,SAAS,MAAM,SAAS,GAAG;AACjC,UAAM,QAAQ,MAAM,WAAW,KAAK;AACpC,QAAI,OAAO;AACV,aAAO;AAAA,IACR;AAEA,UAAM,MAAM,MAAM,YAAY,GAAG;AACjC,QAAI,MAAM,GAAG;AACZ,cAAQ;AAAA,IACT,OAAO;AACN,cAAQ,MAAM,OAAO,GAAG,GAAG;AAAA,IAC5B;AAAA,EACD;AACA,SAAO;AACR;AAhBgB;",
  "names": ["MonarchBracket"]
}
