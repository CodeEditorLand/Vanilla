{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/common/monarch/monarchCompile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\n\nimport * as monarchCommon from './monarchCommon.js';\nimport { IMonarchLanguage, IMonarchLanguageBracket } from './monarchTypes.js';\n\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\n\nfunction isArrayOf(elemType: (x: any) => boolean, obj: any): boolean {\n\tif (!obj) {\n\t\treturn false;\n\t}\n\tif (!(Array.isArray(obj))) {\n\t\treturn false;\n\t}\n\tfor (const el of obj) {\n\t\tif (!(elemType(el))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction bool(prop: any, defValue: boolean): boolean {\n\tif (typeof prop === 'boolean') {\n\t\treturn prop;\n\t}\n\treturn defValue;\n}\n\nfunction string(prop: any, defValue: string): string {\n\tif (typeof (prop) === 'string') {\n\t\treturn prop;\n\t}\n\treturn defValue;\n}\n\n\nfunction arrayToHash(array: string[]): { [name: string]: true } {\n\tconst result: any = {};\n\tfor (const e of array) {\n\t\tresult[e] = true;\n\t}\n\treturn result;\n}\n\n\nfunction createKeywordMatcher(arr: string[], caseInsensitive: boolean = false): (str: string) => boolean {\n\tif (caseInsensitive) {\n\t\tarr = arr.map(function (x) { return x.toLowerCase(); });\n\t}\n\tconst hash = arrayToHash(arr);\n\tif (caseInsensitive) {\n\t\treturn function (word) {\n\t\t\treturn hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n\t\t};\n\t} else {\n\t\treturn function (word) {\n\t\t\treturn hash[word] !== undefined && hash.hasOwnProperty(word);\n\t\t};\n\t}\n}\n\n\n// Lexer helpers\n\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n * @\\w+ replacement can be avoided by escaping `@` signs with another `@` sign.\n * @example /@attr/ will be replaced with the value of lexer[attr]\n * @example /@@text/ will not be replaced and will become /@text/.\n */\nfunction compileRegExp<S extends true | false>(lexer: monarchCommon.ILexerMin, str: string, handleSn: S): S extends true ? RegExp | DynamicRegExp : RegExp;\nfunction compileRegExp(lexer: monarchCommon.ILexerMin, str: string, handleSn: true | false): RegExp | DynamicRegExp {\n\t// @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n\tstr = str.replace(/@@/g, `\\x01`);\n\n\tlet n = 0;\n\tlet hadExpansion: boolean;\n\tdo {\n\t\thadExpansion = false;\n\t\tstr = str.replace(/@(\\w+)/g, function (s, attr?) {\n\t\t\thadExpansion = true;\n\t\t\tlet sub = '';\n\t\t\tif (typeof (lexer[attr]) === 'string') {\n\t\t\t\tsub = lexer[attr];\n\t\t\t} else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n\t\t\t\tsub = lexer[attr].source;\n\t\t\t} else {\n\t\t\t\tif (lexer[attr] === undefined) {\n\t\t\t\t\tthrow monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n\t\t\t\t} else {\n\t\t\t\t\tthrow monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n\t\t});\n\t\tn++;\n\t} while (hadExpansion && n < 5);\n\n\t// handle escaped @@\n\tstr = str.replace(/\\x01/g, '@');\n\n\tconst flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n\n\t// handle $Sn\n\tif (handleSn) {\n\t\tconst match = str.match(/\\$[sS](\\d\\d?)/g);\n\t\tif (match) {\n\t\t\tlet lastState: string | null = null;\n\t\t\tlet lastRegEx: RegExp | null = null;\n\t\t\treturn (state: string) => {\n\t\t\t\tif (lastRegEx && lastState === state) {\n\t\t\t\t\treturn lastRegEx;\n\t\t\t\t}\n\t\t\t\tlastState = state;\n\t\t\t\tlastRegEx = new RegExp(monarchCommon.substituteMatchesRe(lexer, str, state), flags);\n\t\t\t\treturn lastRegEx;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn new RegExp(str, flags);\n}\n\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id: string, matches: string[], state: string, num: number): string | null {\n\tif (num < 0) {\n\t\treturn id;\n\t}\n\tif (num < matches.length) {\n\t\treturn matches[num];\n\t}\n\tif (num >= 100) {\n\t\tnum = num - 100;\n\t\tconst parts = state.split('.');\n\t\tparts.unshift(state);\n\t\tif (num < parts.length) {\n\t\t\treturn parts[num];\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction createGuard(lexer: monarchCommon.ILexerMin, ruleName: string, tkey: string, val: monarchCommon.FuzzyAction): monarchCommon.IBranch {\n\t// get the scrutinee and pattern\n\tlet scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n\tlet oppat = tkey;\n\tlet matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n\tif (matches) {\n\t\tif (matches[3]) { // if digits\n\t\t\tscrut = parseInt(matches[3]);\n\t\t\tif (matches[2]) {\n\t\t\t\tscrut = scrut + 100; // if [sS] present\n\t\t\t}\n\t\t}\n\t\toppat = matches[4];\n\t}\n\t// get operator\n\tlet op = '~';\n\tlet pat = oppat;\n\tif (!oppat || oppat.length === 0) {\n\t\top = '!=';\n\t\tpat = '';\n\t}\n\telse if (/^\\w*$/.test(pat)) {  // just a word\n\t\top = '==';\n\t}\n\telse {\n\t\tmatches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n\t\tif (matches) {\n\t\t\top = matches[1];\n\t\t\tpat = matches[2];\n\t\t}\n\t}\n\n\t// set the tester function\n\tlet tester: (s: string, id: string, matches: string[], state: string, eos: boolean) => boolean;\n\n\t// special case a regexp that matches just words\n\tif ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n\t\tconst inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n\t\ttester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n\t}\n\telse if (op === '@' || op === '!@') {\n\t\tconst words = lexer[pat];\n\t\tif (!words) {\n\t\t\tthrow monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n\t\t}\n\t\tif (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\n\t\t\tthrow monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n\t\t}\n\t\tconst inWords = createKeywordMatcher(words, lexer.ignoreCase);\n\t\ttester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n\t}\n\telse if (op === '~' || op === '!~') {\n\t\tif (pat.indexOf('$') < 0) {\n\t\t\t// precompile regular expression\n\t\t\tconst re = compileRegExp(lexer, '^' + pat + '$', false);\n\t\t\ttester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n\t\t}\n\t\telse {\n\t\t\ttester = function (s, id, matches, state) {\n\t\t\t\tconst re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$', false);\n\t\t\t\treturn re.test(s);\n\t\t\t};\n\t\t}\n\t}\n\telse { // if (op==='==' || op==='!=') {\n\t\tif (pat.indexOf('$') < 0) {\n\t\t\tconst patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = function (s) { return (op === '==' ? s === patx : s !== patx); };\n\t\t}\n\t\telse {\n\t\t\tconst patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = function (s, id, matches, state, eos) {\n\t\t\t\tconst patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n\t\t\t\treturn (op === '==' ? s === patexp : s !== patexp);\n\t\t\t};\n\t\t}\n\t}\n\n\t// return the branch object\n\tif (scrut === -1) {\n\t\treturn {\n\t\t\tname: tkey, value: val, test: function (id, matches, state, eos) {\n\t\t\t\treturn tester(id, id, matches, state, eos);\n\t\t\t}\n\t\t};\n\t}\n\telse {\n\t\treturn {\n\t\t\tname: tkey, value: val, test: function (id, matches, state, eos) {\n\t\t\t\tconst scrutinee = selectScrutinee(id, matches, state, scrut);\n\t\t\t\treturn tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer: monarchCommon.ILexerMin, ruleName: string, action: any): monarchCommon.FuzzyAction {\n\tif (!action) {\n\t\treturn { token: '' };\n\t}\n\telse if (typeof (action) === 'string') {\n\t\treturn action; // { token: action };\n\t}\n\telse if (action.token || action.token === '') {\n\t\tif (typeof (action.token) !== 'string') {\n\t\t\tthrow monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n\t\t}\n\t\telse {\n\t\t\t// only copy specific typed fields (only happens once during compile Lexer)\n\t\t\tconst newAction: monarchCommon.IAction = { token: action.token };\n\t\t\tif (action.token.indexOf('$') >= 0) {\n\t\t\t\tnewAction.tokenSubst = true;\n\t\t\t}\n\t\t\tif (typeof (action.bracket) === 'string') {\n\t\t\t\tif (action.bracket === '@open') {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Open;\n\t\t\t\t} else if (action.bracket === '@close') {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Close;\n\t\t\t\t} else {\n\t\t\t\t\tthrow monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (action.next) {\n\t\t\t\tif (typeof (action.next) !== 'string') {\n\t\t\t\t\tthrow monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet next: string = action.next;\n\t\t\t\t\tif (!/^(@pop|@push|@popall)$/.test(next)) {\n\t\t\t\t\t\tif (next[0] === '@') {\n\t\t\t\t\t\t\tnext = next.substr(1); // peel off starting @ sign\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (next.indexOf('$') < 0) {  // no dollar substitution, we can check if the state exists\n\t\t\t\t\t\t\tif (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n\t\t\t\t\t\t\t\tthrow monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewAction.next = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof (action.goBack) === 'number') {\n\t\t\t\tnewAction.goBack = action.goBack;\n\t\t\t}\n\t\t\tif (typeof (action.switchTo) === 'string') {\n\t\t\t\tnewAction.switchTo = action.switchTo;\n\t\t\t}\n\t\t\tif (typeof (action.log) === 'string') {\n\t\t\t\tnewAction.log = action.log;\n\t\t\t}\n\t\t\tif (typeof (action.nextEmbedded) === 'string') {\n\t\t\t\tnewAction.nextEmbedded = action.nextEmbedded;\n\t\t\t\tlexer.usesEmbedded = true;\n\t\t\t}\n\t\t\treturn newAction;\n\t\t}\n\t}\n\telse if (Array.isArray(action)) {\n\t\tconst results: monarchCommon.FuzzyAction[] = [];\n\t\tfor (let i = 0, len = action.length; i < len; i++) {\n\t\t\tresults[i] = compileAction(lexer, ruleName, action[i]);\n\t\t}\n\t\treturn { group: results };\n\t}\n\telse if (action.cases) {\n\t\t// build an array of test cases\n\t\tconst cases: monarchCommon.IBranch[] = [];\n\n\t\t// for each case, push a test function and result value\n\t\tfor (const tkey in action.cases) {\n\t\t\tif (action.cases.hasOwnProperty(tkey)) {\n\t\t\t\tconst val = compileAction(lexer, ruleName, action.cases[tkey]);\n\n\t\t\t\t// what kind of case\n\t\t\t\tif (tkey === '@default' || tkey === '@' || tkey === '') {\n\t\t\t\t\tcases.push({ test: undefined, value: val, name: tkey });\n\t\t\t\t}\n\t\t\t\telse if (tkey === '@eos') {\n\t\t\t\t\tcases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcases.push(createGuard(lexer, ruleName, tkey, val));  // call separate function to avoid local variable capture\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// create a matching function\n\t\tconst def = lexer.defaultToken;\n\t\treturn {\n\t\t\ttest: function (id, matches, state, eos) {\n\t\t\t\tfor (const _case of cases) {\n\t\t\t\t\tconst didmatch = (!_case.test || _case.test(id, matches, state, eos));\n\t\t\t\t\tif (didmatch) {\n\t\t\t\t\t\treturn _case.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn def;\n\t\t\t}\n\t\t};\n\t}\n\telse {\n\t\tthrow monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n\t}\n}\n\ntype DynamicRegExp = (state: string) => RegExp;\n\n/**\n * Helper class for creating matching rules\n */\nclass Rule implements monarchCommon.IRule {\n\tprivate regex: RegExp | DynamicRegExp = new RegExp('');\n\tpublic action: monarchCommon.FuzzyAction = { token: '' };\n\tpublic matchOnlyAtLineStart: boolean = false;\n\tpublic name: string = '';\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: string | RegExp): void {\n\t\tlet sregex: string;\n\t\tif (typeof (re) === 'string') {\n\t\t\tsregex = re;\n\t\t}\n\t\telse if (re instanceof RegExp) {\n\t\t\tsregex = (<RegExp>re).source;\n\t\t}\n\t\telse {\n\t\t\tthrow monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n\t\t}\n\n\t\tthis.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n\t\tthis.name = this.name + ': ' + sregex;\n\t\tthis.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')', true);\n\t}\n\n\tpublic setAction(lexer: monarchCommon.ILexerMin, act: monarchCommon.IAction) {\n\t\tthis.action = compileAction(lexer, this.name, act);\n\t}\n\n\tpublic resolveRegex(state: string): RegExp {\n\t\tif (this.regex instanceof RegExp) {\n\t\t\treturn this.regex;\n\t\t} else {\n\t\t\treturn this.regex(state);\n\t\t}\n\t}\n}\n\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(languageId: string, json: IMonarchLanguage): monarchCommon.ILexer {\n\tif (!json || typeof (json) !== 'object') {\n\t\tthrow new Error('Monarch: expecting a language definition object');\n\t}\n\n\t// Create our lexer\n\tconst lexer: monarchCommon.ILexer = {\n\t\tlanguageId: languageId,\n\t\tincludeLF: bool(json.includeLF, false),\n\t\tnoThrow: false, // raise exceptions during compilation\n\t\tmaxStack: 100,\n\t\tstart: (typeof json.start === 'string' ? json.start : null),\n\t\tignoreCase: bool(json.ignoreCase, false),\n\t\tunicode: bool(json.unicode, false),\n\t\ttokenPostfix: string(json.tokenPostfix, '.' + languageId),\n\t\tdefaultToken: string(json.defaultToken, 'source'),\n\t\tusesEmbedded: false, // becomes true if we find a nextEmbedded action\n\t\tstateNames: {},\n\t\ttokenizer: {},\n\t\tbrackets: []\n\t};\n\n\t// For calling compileAction later on\n\tconst lexerMin: monarchCommon.ILexerMin = <any>json;\n\tlexerMin.languageId = languageId;\n\tlexerMin.includeLF = lexer.includeLF;\n\tlexerMin.ignoreCase = lexer.ignoreCase;\n\tlexerMin.unicode = lexer.unicode;\n\tlexerMin.noThrow = lexer.noThrow;\n\tlexerMin.usesEmbedded = lexer.usesEmbedded;\n\tlexerMin.stateNames = json.tokenizer;\n\tlexerMin.defaultToken = lexer.defaultToken;\n\n\n\t// Compile an array of rules into newrules where RegExp objects are created.\n\tfunction addRules(state: string, newrules: monarchCommon.IRule[], rules: any[]) {\n\t\tfor (const rule of rules) {\n\n\t\t\tlet include = rule.include;\n\t\t\tif (include) {\n\t\t\t\tif (typeof (include) !== 'string') {\n\t\t\t\t\tthrow monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n\t\t\t\t}\n\t\t\t\tif (include[0] === '@') {\n\t\t\t\t\tinclude = include.substr(1); // peel off starting @\n\t\t\t\t}\n\t\t\t\tif (!json.tokenizer[include]) {\n\t\t\t\t\tthrow monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n\t\t\t\t}\n\t\t\t\taddRules(state + '.' + include, newrules, json.tokenizer[include]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst newrule = new Rule(state);\n\n\t\t\t\t// Set up new rule attributes\n\t\t\t\tif (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n\t\t\t\t\tnewrule.setRegex(lexerMin, rule[0]);\n\t\t\t\t\tif (rule.length >= 3) {\n\t\t\t\t\t\tif (typeof (rule[1]) === 'string') {\n\t\t\t\t\t\t\tnewrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (typeof (rule[1]) === 'object') {\n\t\t\t\t\t\t\tconst rule1 = rule[1];\n\t\t\t\t\t\t\trule1.next = rule[2];\n\t\t\t\t\t\t\tnewrule.setAction(lexerMin, rule1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnewrule.setAction(lexerMin, rule[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!rule.regex) {\n\t\t\t\t\t\tthrow monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n\t\t\t\t\t}\n\t\t\t\t\tif (rule.name) {\n\t\t\t\t\t\tif (typeof rule.name === 'string') {\n\t\t\t\t\t\t\tnewrule.name = rule.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (rule.matchOnlyAtStart) {\n\t\t\t\t\t\tnewrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n\t\t\t\t\t}\n\t\t\t\t\tnewrule.setRegex(lexerMin, rule.regex);\n\t\t\t\t\tnewrule.setAction(lexerMin, rule.action);\n\t\t\t\t}\n\n\t\t\t\tnewrules.push(newrule);\n\t\t\t}\n\t\t}\n\t}\n\n\t// compile the tokenizer rules\n\tif (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n\t\tthrow monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n\t}\n\n\tlexer.tokenizer = <any>[];\n\tfor (const key in json.tokenizer) {\n\t\tif (json.tokenizer.hasOwnProperty(key)) {\n\t\t\tif (!lexer.start) {\n\t\t\t\tlexer.start = key;\n\t\t\t}\n\n\t\t\tconst rules = json.tokenizer[key];\n\t\t\tlexer.tokenizer[key] = new Array();\n\t\t\taddRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n\t\t}\n\t}\n\tlexer.usesEmbedded = lexerMin.usesEmbedded;  // can be set during compileAction\n\n\t// Set simple brackets\n\tif (json.brackets) {\n\t\tif (!(Array.isArray(<any>json.brackets))) {\n\t\t\tthrow monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n\t\t}\n\t}\n\telse {\n\t\tjson.brackets = [\n\t\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t\t{ open: '<', close: '>', token: 'delimiter.angle' }];\n\t}\n\tconst brackets: IMonarchLanguageBracket[] = [];\n\tfor (const el of json.brackets) {\n\t\tlet desc: any = el;\n\t\tif (desc && Array.isArray(desc) && desc.length === 3) {\n\t\t\tdesc = { token: desc[2], open: desc[0], close: desc[1] };\n\t\t}\n\t\tif (desc.open === desc.close) {\n\t\t\tthrow monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n\t\t\t\t'\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n\t\t}\n\t\tif (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n\t\t\tbrackets.push({\n\t\t\t\ttoken: desc.token + lexer.tokenPostfix,\n\t\t\t\topen: monarchCommon.fixCase(lexer, desc.open),\n\t\t\t\tclose: monarchCommon.fixCase(lexer, desc.close)\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthrow monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n\t\t}\n\t}\n\tlexer.brackets = brackets;\n\n\t// Disable throw so the syntax highlighter goes, no matter what\n\tlexer.noThrow = true;\n\treturn lexer;\n}\n"],
  "mappings": "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",
  "names": ["matches"]
}
