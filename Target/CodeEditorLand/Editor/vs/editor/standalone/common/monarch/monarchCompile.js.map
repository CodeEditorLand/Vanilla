{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/common/monarch/monarchCompile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\n\nimport * as monarchCommon from \"./monarchCommon.js\";\nimport type {\n\tIMonarchLanguage,\n\tIMonarchLanguageBracket,\n} from \"./monarchTypes.js\";\n\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\n\nfunction isArrayOf(elemType: (x: any) => boolean, obj: any): boolean {\n\tif (!obj) {\n\t\treturn false;\n\t}\n\tif (!Array.isArray(obj)) {\n\t\treturn false;\n\t}\n\tfor (const el of obj) {\n\t\tif (!elemType(el)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction bool(prop: any, defValue: boolean): boolean {\n\tif (typeof prop === \"boolean\") {\n\t\treturn prop;\n\t}\n\treturn defValue;\n}\n\nfunction string(prop: any, defValue: string): string {\n\tif (typeof prop === \"string\") {\n\t\treturn prop;\n\t}\n\treturn defValue;\n}\n\nfunction arrayToHash(array: string[]): { [name: string]: true } {\n\tconst result: any = {};\n\tfor (const e of array) {\n\t\tresult[e] = true;\n\t}\n\treturn result;\n}\n\nfunction createKeywordMatcher(\n\tarr: string[],\n\tcaseInsensitive = false,\n): (str: string) => boolean {\n\tif (caseInsensitive) {\n\t\tarr = arr.map((x) => x.toLowerCase());\n\t}\n\tconst hash = arrayToHash(arr);\n\tif (caseInsensitive) {\n\t\treturn (word) =>\n\t\t\thash[word.toLowerCase()] !== undefined &&\n\t\t\thash.hasOwnProperty(word.toLowerCase());\n\t} else {\n\t\treturn (word) => hash[word] !== undefined && hash.hasOwnProperty(word);\n\t}\n}\n\n// Lexer helpers\n\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n * @\\w+ replacement can be avoided by escaping `@` signs with another `@` sign.\n * @example /@attr/ will be replaced with the value of lexer[attr]\n * @example /@@text/ will not be replaced and will become /@text/.\n */\nfunction compileRegExp<S extends true | false>(\n\tlexer: monarchCommon.ILexerMin,\n\tstr: string,\n\thandleSn: S,\n): S extends true ? RegExp | DynamicRegExp : RegExp;\nfunction compileRegExp(\n\tlexer: monarchCommon.ILexerMin,\n\tstr: string,\n\thandleSn: true | false,\n): RegExp | DynamicRegExp {\n\t// @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n\tstr = str.replace(/@@/g, `\\x01`);\n\n\tlet n = 0;\n\tlet hadExpansion: boolean;\n\tdo {\n\t\thadExpansion = false;\n\t\tstr = str.replace(/@(\\w+)/g, (s, attr?) => {\n\t\t\thadExpansion = true;\n\t\t\tlet sub = \"\";\n\t\t\tif (typeof lexer[attr] === \"string\") {\n\t\t\t\tsub = lexer[attr];\n\t\t\t} else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n\t\t\t\tsub = lexer[attr].source;\n\t\t\t} else if (lexer[attr] === undefined) {\n\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\tlexer,\n\t\t\t\t\t\"language definition does not contain attribute '\" +\n\t\t\t\t\t\tattr +\n\t\t\t\t\t\t\"', used at: \" +\n\t\t\t\t\t\tstr,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\tlexer,\n\t\t\t\t\t\"attribute reference '\" +\n\t\t\t\t\t\tattr +\n\t\t\t\t\t\t\"' must be a string, used at: \" +\n\t\t\t\t\t\tstr,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn monarchCommon.empty(sub) ? \"\" : \"(?:\" + sub + \")\";\n\t\t});\n\t\tn++;\n\t} while (hadExpansion && n < 5);\n\n\t// handle escaped @@\n\tstr = str.replace(/\\x01/g, \"@\");\n\n\tconst flags = (lexer.ignoreCase ? \"i\" : \"\") + (lexer.unicode ? \"u\" : \"\");\n\n\t// handle $Sn\n\tif (handleSn) {\n\t\tconst match = str.match(/\\$[sS](\\d\\d?)/g);\n\t\tif (match) {\n\t\t\tlet lastState: string | null = null;\n\t\t\tlet lastRegEx: RegExp | null = null;\n\t\t\treturn (state: string) => {\n\t\t\t\tif (lastRegEx && lastState === state) {\n\t\t\t\t\treturn lastRegEx;\n\t\t\t\t}\n\t\t\t\tlastState = state;\n\t\t\t\tlastRegEx = new RegExp(\n\t\t\t\t\tmonarchCommon.substituteMatchesRe(lexer, str, state),\n\t\t\t\t\tflags,\n\t\t\t\t);\n\t\t\t\treturn lastRegEx;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn new RegExp(str, flags);\n}\n\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(\n\tid: string,\n\tmatches: string[],\n\tstate: string,\n\tnum: number,\n): string | null {\n\tif (num < 0) {\n\t\treturn id;\n\t}\n\tif (num < matches.length) {\n\t\treturn matches[num];\n\t}\n\tif (num >= 100) {\n\t\tnum = num - 100;\n\t\tconst parts = state.split(\".\");\n\t\tparts.unshift(state);\n\t\tif (num < parts.length) {\n\t\t\treturn parts[num];\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction createGuard(\n\tlexer: monarchCommon.ILexerMin,\n\truleName: string,\n\ttkey: string,\n\tval: monarchCommon.FuzzyAction,\n): monarchCommon.IBranch {\n\t// get the scrutinee and pattern\n\tlet scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n\tlet oppat = tkey;\n\tlet matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n\tif (matches) {\n\t\tif (matches[3]) {\n\t\t\t// if digits\n\t\t\tscrut = Number.parseInt(matches[3]);\n\t\t\tif (matches[2]) {\n\t\t\t\tscrut = scrut + 100; // if [sS] present\n\t\t\t}\n\t\t}\n\t\toppat = matches[4];\n\t}\n\t// get operator\n\tlet op = \"~\";\n\tlet pat = oppat;\n\tif (!oppat || oppat.length === 0) {\n\t\top = \"!=\";\n\t\tpat = \"\";\n\t} else if (/^\\w*$/.test(pat)) {\n\t\t// just a word\n\t\top = \"==\";\n\t} else {\n\t\tmatches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n\t\tif (matches) {\n\t\t\top = matches[1];\n\t\t\tpat = matches[2];\n\t\t}\n\t}\n\n\t// set the tester function\n\tlet tester: (\n\t\ts: string,\n\t\tid: string,\n\t\tmatches: string[],\n\t\tstate: string,\n\t\teos: boolean,\n\t) => boolean;\n\n\t// special case a regexp that matches just words\n\tif ((op === \"~\" || op === \"!~\") && /^(\\w|\\|)*$/.test(pat)) {\n\t\tconst inWords = createKeywordMatcher(pat.split(\"|\"), lexer.ignoreCase);\n\t\ttester = (s) => (op === \"~\" ? inWords(s) : !inWords(s));\n\t} else if (op === \"@\" || op === \"!@\") {\n\t\tconst words = lexer[pat];\n\t\tif (!words) {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"the @ match target '\" +\n\t\t\t\t\tpat +\n\t\t\t\t\t\"' is not defined, in rule: \" +\n\t\t\t\t\truleName,\n\t\t\t);\n\t\t}\n\t\tif (!isArrayOf((elem) => typeof elem === \"string\", words)) {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"the @ match target '\" +\n\t\t\t\t\tpat +\n\t\t\t\t\t\"' must be an array of strings, in rule: \" +\n\t\t\t\t\truleName,\n\t\t\t);\n\t\t}\n\t\tconst inWords = createKeywordMatcher(words, lexer.ignoreCase);\n\t\ttester = (s) => (op === \"@\" ? inWords(s) : !inWords(s));\n\t} else if (op === \"~\" || op === \"!~\") {\n\t\tif (pat.indexOf(\"$\") < 0) {\n\t\t\t// precompile regular expression\n\t\t\tconst re = compileRegExp(lexer, \"^\" + pat + \"$\", false);\n\t\t\ttester = (s) => (op === \"~\" ? re.test(s) : !re.test(s));\n\t\t} else {\n\t\t\ttester = (s, id, matches, state) => {\n\t\t\t\tconst re = compileRegExp(\n\t\t\t\t\tlexer,\n\t\t\t\t\t\"^\" +\n\t\t\t\t\t\tmonarchCommon.substituteMatches(\n\t\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\tpat,\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tmatches,\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t) +\n\t\t\t\t\t\t\"$\",\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t\treturn re.test(s);\n\t\t\t};\n\t\t}\n\t} else {\n\t\t// if (op==='==' || op==='!=') {\n\t\tif (pat.indexOf(\"$\") < 0) {\n\t\t\tconst patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = (s) => (op === \"==\" ? s === patx : s !== patx);\n\t\t} else {\n\t\t\tconst patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = (s, id, matches, state, eos) => {\n\t\t\t\tconst patexp = monarchCommon.substituteMatches(\n\t\t\t\t\tlexer,\n\t\t\t\t\tpatx,\n\t\t\t\t\tid,\n\t\t\t\t\tmatches,\n\t\t\t\t\tstate,\n\t\t\t\t);\n\t\t\t\treturn op === \"==\" ? s === patexp : s !== patexp;\n\t\t\t};\n\t\t}\n\t}\n\n\t// return the branch object\n\tif (scrut === -1) {\n\t\treturn {\n\t\t\tname: tkey,\n\t\t\tvalue: val,\n\t\t\ttest: (id, matches, state, eos) =>\n\t\t\t\ttester(id, id, matches, state, eos),\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tname: tkey,\n\t\t\tvalue: val,\n\t\t\ttest: (id, matches, state, eos) => {\n\t\t\t\tconst scrutinee = selectScrutinee(id, matches, state, scrut);\n\t\t\t\treturn tester(\n\t\t\t\t\tscrutinee ? scrutinee : \"\",\n\t\t\t\t\tid,\n\t\t\t\t\tmatches,\n\t\t\t\t\tstate,\n\t\t\t\t\teos,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n}\n\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(\n\tlexer: monarchCommon.ILexerMin,\n\truleName: string,\n\taction: any,\n): monarchCommon.FuzzyAction {\n\tif (!action) {\n\t\treturn { token: \"\" };\n\t} else if (typeof action === \"string\") {\n\t\treturn action; // { token: action };\n\t} else if (action.token || action.token === \"\") {\n\t\tif (typeof action.token !== \"string\") {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"a 'token' attribute must be of type string, in rule: \" +\n\t\t\t\t\truleName,\n\t\t\t);\n\t\t} else {\n\t\t\t// only copy specific typed fields (only happens once during compile Lexer)\n\t\t\tconst newAction: monarchCommon.IAction = { token: action.token };\n\t\t\tif (action.token.indexOf(\"$\") >= 0) {\n\t\t\t\tnewAction.tokenSubst = true;\n\t\t\t}\n\t\t\tif (typeof action.bracket === \"string\") {\n\t\t\t\tif (action.bracket === \"@open\") {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Open;\n\t\t\t\t} else if (action.bracket === \"@close\") {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Close;\n\t\t\t\t} else {\n\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\"a 'bracket' attribute must be either '@open' or '@close', in rule: \" +\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (action.next) {\n\t\t\t\tif (typeof action.next !== \"string\") {\n\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\"the next state must be a string value in rule: \" +\n\t\t\t\t\t\t\truleName,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tlet next: string = action.next;\n\t\t\t\t\tif (!/^(@pop|@push|@popall)$/.test(next)) {\n\t\t\t\t\t\tif (next[0] === \"@\") {\n\t\t\t\t\t\t\tnext = next.substr(1); // peel off starting @ sign\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (next.indexOf(\"$\") < 0) {\n\t\t\t\t\t\t\t// no dollar substitution, we can check if the state exists\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!monarchCommon.stateExists(\n\t\t\t\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\t\t\tmonarchCommon.substituteMatches(\n\t\t\t\t\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\t\t\t\tnext,\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\t\t\t\"the next state '\" +\n\t\t\t\t\t\t\t\t\t\taction.next +\n\t\t\t\t\t\t\t\t\t\t\"' is not defined in rule: \" +\n\t\t\t\t\t\t\t\t\t\truleName,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewAction.next = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof action.goBack === \"number\") {\n\t\t\t\tnewAction.goBack = action.goBack;\n\t\t\t}\n\t\t\tif (typeof action.switchTo === \"string\") {\n\t\t\t\tnewAction.switchTo = action.switchTo;\n\t\t\t}\n\t\t\tif (typeof action.log === \"string\") {\n\t\t\t\tnewAction.log = action.log;\n\t\t\t}\n\t\t\tif (typeof action.nextEmbedded === \"string\") {\n\t\t\t\tnewAction.nextEmbedded = action.nextEmbedded;\n\t\t\t\tlexer.usesEmbedded = true;\n\t\t\t}\n\t\t\treturn newAction;\n\t\t}\n\t} else if (Array.isArray(action)) {\n\t\tconst results: monarchCommon.FuzzyAction[] = [];\n\t\tfor (let i = 0, len = action.length; i < len; i++) {\n\t\t\tresults[i] = compileAction(lexer, ruleName, action[i]);\n\t\t}\n\t\treturn { group: results };\n\t} else if (action.cases) {\n\t\t// build an array of test cases\n\t\tconst cases: monarchCommon.IBranch[] = [];\n\n\t\t// for each case, push a test function and result value\n\t\tfor (const tkey in action.cases) {\n\t\t\tif (action.cases.hasOwnProperty(tkey)) {\n\t\t\t\tconst val = compileAction(lexer, ruleName, action.cases[tkey]);\n\n\t\t\t\t// what kind of case\n\t\t\t\tif (tkey === \"@default\" || tkey === \"@\" || tkey === \"\") {\n\t\t\t\t\tcases.push({ test: undefined, value: val, name: tkey });\n\t\t\t\t} else if (tkey === \"@eos\") {\n\t\t\t\t\tcases.push({\n\t\t\t\t\t\ttest: (id, matches, state, eos) => eos,\n\t\t\t\t\t\tvalue: val,\n\t\t\t\t\t\tname: tkey,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// create a matching function\n\t\tconst def = lexer.defaultToken;\n\t\treturn {\n\t\t\ttest: (id, matches, state, eos) => {\n\t\t\t\tfor (const _case of cases) {\n\t\t\t\t\tconst didmatch =\n\t\t\t\t\t\t!_case.test || _case.test(id, matches, state, eos);\n\t\t\t\t\tif (didmatch) {\n\t\t\t\t\t\treturn _case.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn def;\n\t\t\t},\n\t\t};\n\t} else {\n\t\tthrow monarchCommon.createError(\n\t\t\tlexer,\n\t\t\t\"an action must be a string, an object with a 'token' or 'cases' attribute, or an array of actions; in rule: \" +\n\t\t\t\truleName,\n\t\t);\n\t}\n}\n\ntype DynamicRegExp = (state: string) => RegExp;\n\n/**\n * Helper class for creating matching rules\n */\nclass Rule implements monarchCommon.IRule {\n\tprivate regex: RegExp | DynamicRegExp = /(?:)/;\n\tpublic action: monarchCommon.FuzzyAction = { token: \"\" };\n\tpublic matchOnlyAtLineStart = false;\n\tpublic name = \"\";\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: string | RegExp): void {\n\t\tlet sregex: string;\n\t\tif (typeof re === \"string\") {\n\t\t\tsregex = re;\n\t\t} else if (re instanceof RegExp) {\n\t\t\tsregex = (<RegExp>re).source;\n\t\t} else {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"rules must start with a match string or regular expression: \" +\n\t\t\t\t\tthis.name,\n\t\t\t);\n\t\t}\n\n\t\tthis.matchOnlyAtLineStart = sregex.length > 0 && sregex[0] === \"^\";\n\t\tthis.name = this.name + \": \" + sregex;\n\t\tthis.regex = compileRegExp(\n\t\t\tlexer,\n\t\t\t\"^(?:\" +\n\t\t\t\t(this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) +\n\t\t\t\t\")\",\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tpublic setAction(\n\t\tlexer: monarchCommon.ILexerMin,\n\t\tact: monarchCommon.IAction,\n\t) {\n\t\tthis.action = compileAction(lexer, this.name, act);\n\t}\n\n\tpublic resolveRegex(state: string): RegExp {\n\t\tif (this.regex instanceof RegExp) {\n\t\t\treturn this.regex;\n\t\t} else {\n\t\t\treturn this.regex(state);\n\t\t}\n\t}\n}\n\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(\n\tlanguageId: string,\n\tjson: IMonarchLanguage,\n): monarchCommon.ILexer {\n\tif (!json || typeof json !== \"object\") {\n\t\tthrow new Error(\"Monarch: expecting a language definition object\");\n\t}\n\n\t// Create our lexer\n\tconst lexer: monarchCommon.ILexer = {\n\t\tlanguageId: languageId,\n\t\tincludeLF: bool(json.includeLF, false),\n\t\tnoThrow: false, // raise exceptions during compilation\n\t\tmaxStack: 100,\n\t\tstart: typeof json.start === \"string\" ? json.start : null,\n\t\tignoreCase: bool(json.ignoreCase, false),\n\t\tunicode: bool(json.unicode, false),\n\t\ttokenPostfix: string(json.tokenPostfix, \".\" + languageId),\n\t\tdefaultToken: string(json.defaultToken, \"source\"),\n\t\tusesEmbedded: false, // becomes true if we find a nextEmbedded action\n\t\tstateNames: {},\n\t\ttokenizer: {},\n\t\tbrackets: [],\n\t};\n\n\t// For calling compileAction later on\n\tconst lexerMin: monarchCommon.ILexerMin = <any>json;\n\tlexerMin.languageId = languageId;\n\tlexerMin.includeLF = lexer.includeLF;\n\tlexerMin.ignoreCase = lexer.ignoreCase;\n\tlexerMin.unicode = lexer.unicode;\n\tlexerMin.noThrow = lexer.noThrow;\n\tlexerMin.usesEmbedded = lexer.usesEmbedded;\n\tlexerMin.stateNames = json.tokenizer;\n\tlexerMin.defaultToken = lexer.defaultToken;\n\n\t// Compile an array of rules into newrules where RegExp objects are created.\n\tfunction addRules(\n\t\tstate: string,\n\t\tnewrules: monarchCommon.IRule[],\n\t\trules: any[],\n\t) {\n\t\tfor (const rule of rules) {\n\t\t\tlet include = rule.include;\n\t\t\tif (include) {\n\t\t\t\tif (typeof include !== \"string\") {\n\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\"an 'include' attribute must be a string at: \" + state,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (include[0] === \"@\") {\n\t\t\t\t\tinclude = include.substr(1); // peel off starting @\n\t\t\t\t}\n\t\t\t\tif (!json.tokenizer[include]) {\n\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\"include target '\" +\n\t\t\t\t\t\t\tinclude +\n\t\t\t\t\t\t\t\"' is not defined at: \" +\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\taddRules(\n\t\t\t\t\tstate + \".\" + include,\n\t\t\t\t\tnewrules,\n\t\t\t\t\tjson.tokenizer[include],\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst newrule = new Rule(state);\n\n\t\t\t\t// Set up new rule attributes\n\t\t\t\tif (\n\t\t\t\t\tArray.isArray(rule) &&\n\t\t\t\t\trule.length >= 1 &&\n\t\t\t\t\trule.length <= 3\n\t\t\t\t) {\n\t\t\t\t\tnewrule.setRegex(lexerMin, rule[0]);\n\t\t\t\t\tif (rule.length >= 3) {\n\t\t\t\t\t\tif (typeof rule[1] === \"string\") {\n\t\t\t\t\t\t\tnewrule.setAction(lexerMin, {\n\t\t\t\t\t\t\t\ttoken: rule[1],\n\t\t\t\t\t\t\t\tnext: rule[2],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (typeof rule[1] === \"object\") {\n\t\t\t\t\t\t\tconst rule1 = rule[1];\n\t\t\t\t\t\t\trule1.next = rule[2];\n\t\t\t\t\t\t\tnewrule.setAction(lexerMin, rule1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\t\t\"a next state as the last element of a rule can only be given if the action is either an object or a string, at: \" +\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewrule.setAction(lexerMin, rule[1]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!rule.regex) {\n\t\t\t\t\t\tthrow monarchCommon.createError(\n\t\t\t\t\t\t\tlexer,\n\t\t\t\t\t\t\t\"a rule must either be an array, or an object with a 'regex' or 'include' field at: \" +\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (rule.name) {\n\t\t\t\t\t\tif (typeof rule.name === \"string\") {\n\t\t\t\t\t\t\tnewrule.name = rule.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (rule.matchOnlyAtStart) {\n\t\t\t\t\t\tnewrule.matchOnlyAtLineStart = bool(\n\t\t\t\t\t\t\trule.matchOnlyAtLineStart,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tnewrule.setRegex(lexerMin, rule.regex);\n\t\t\t\t\tnewrule.setAction(lexerMin, rule.action);\n\t\t\t\t}\n\n\t\t\t\tnewrules.push(newrule);\n\t\t\t}\n\t\t}\n\t}\n\n\t// compile the tokenizer rules\n\tif (!json.tokenizer || typeof json.tokenizer !== \"object\") {\n\t\tthrow monarchCommon.createError(\n\t\t\tlexer,\n\t\t\t\"a language definition must define the 'tokenizer' attribute as an object\",\n\t\t);\n\t}\n\n\tlexer.tokenizer = <any>[];\n\tfor (const key in json.tokenizer) {\n\t\tif (json.tokenizer.hasOwnProperty(key)) {\n\t\t\tif (!lexer.start) {\n\t\t\t\tlexer.start = key;\n\t\t\t}\n\n\t\t\tconst rules = json.tokenizer[key];\n\t\t\tlexer.tokenizer[key] = new Array();\n\t\t\taddRules(\"tokenizer.\" + key, lexer.tokenizer[key], rules);\n\t\t}\n\t}\n\tlexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n\n\t// Set simple brackets\n\tif (json.brackets) {\n\t\tif (!Array.isArray(<any>json.brackets)) {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"the 'brackets' attribute must be defined as an array\",\n\t\t\t);\n\t\t}\n\t} else {\n\t\tjson.brackets = [\n\t\t\t{ open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n\t\t\t{ open: \"[\", close: \"]\", token: \"delimiter.square\" },\n\t\t\t{ open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n\t\t\t{ open: \"<\", close: \">\", token: \"delimiter.angle\" },\n\t\t];\n\t}\n\tconst brackets: IMonarchLanguageBracket[] = [];\n\tfor (const el of json.brackets) {\n\t\tlet desc: any = el;\n\t\tif (desc && Array.isArray(desc) && desc.length === 3) {\n\t\t\tdesc = { token: desc[2], open: desc[0], close: desc[1] };\n\t\t}\n\t\tif (desc.open === desc.close) {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"open and close brackets in a 'brackets' attribute must be different: \" +\n\t\t\t\t\tdesc.open +\n\t\t\t\t\t\"\\n hint: use the 'bracket' attribute if matching on equal brackets is required.\",\n\t\t\t);\n\t\t}\n\t\tif (\n\t\t\ttypeof desc.open === \"string\" &&\n\t\t\ttypeof desc.token === \"string\" &&\n\t\t\ttypeof desc.close === \"string\"\n\t\t) {\n\t\t\tbrackets.push({\n\t\t\t\ttoken: desc.token + lexer.tokenPostfix,\n\t\t\t\topen: monarchCommon.fixCase(lexer, desc.open),\n\t\t\t\tclose: monarchCommon.fixCase(lexer, desc.close),\n\t\t\t});\n\t\t} else {\n\t\t\tthrow monarchCommon.createError(\n\t\t\t\tlexer,\n\t\t\t\t\"every element in the 'brackets' array must be a '{open,close,token}' object or array\",\n\t\t\t);\n\t\t}\n\t}\n\tlexer.brackets = brackets;\n\n\t// Disable throw so the syntax highlighter goes, no matter what\n\tlexer.noThrow = true;\n\treturn lexer;\n}\n"],
  "mappings": "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",
  "names": ["matches"]
}
