{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/common/monarch/monarchLexer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport * as languages from '../../../common/languages.js';\nimport { NullState, nullTokenizeEncoded, nullTokenize } from '../../../common/languages/nullTokenize.js';\nimport { TokenTheme } from '../../../common/languages/supports/tokenization.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport * as monarchCommon from './monarchCommon.js';\nimport { IStandaloneThemeService } from '../standaloneTheme.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { LanguageId, MetadataConsts } from '../../../common/encodedTokenAttributes.js';\n\nconst CACHE_STACK_DEPTH = 5;\n\n/**\n * Reuse the same stack elements up to a certain depth.\n */\nclass MonarchStackElementFactory {\n\n\tprivate static readonly _INSTANCE = new MonarchStackElementFactory(CACHE_STACK_DEPTH);\n\tpublic static create(parent: MonarchStackElement | null, state: string): MonarchStackElement {\n\t\treturn this._INSTANCE.create(parent, state);\n\t}\n\n\tprivate readonly _maxCacheDepth: number;\n\tprivate readonly _entries: { [stackElementId: string]: MonarchStackElement };\n\n\tconstructor(maxCacheDepth: number) {\n\t\tthis._maxCacheDepth = maxCacheDepth;\n\t\tthis._entries = Object.create(null);\n\t}\n\n\tpublic create(parent: MonarchStackElement | null, state: string): MonarchStackElement {\n\t\tif (parent !== null && parent.depth >= this._maxCacheDepth) {\n\t\t\t// no caching above a certain depth\n\t\t\treturn new MonarchStackElement(parent, state);\n\t\t}\n\t\tlet stackElementId = MonarchStackElement.getStackElementId(parent);\n\t\tif (stackElementId.length > 0) {\n\t\t\tstackElementId += '|';\n\t\t}\n\t\tstackElementId += state;\n\n\t\tlet result = this._entries[stackElementId];\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = new MonarchStackElement(parent, state);\n\t\tthis._entries[stackElementId] = result;\n\t\treturn result;\n\t}\n}\n\nclass MonarchStackElement {\n\n\tpublic readonly parent: MonarchStackElement | null;\n\tpublic readonly state: string;\n\tpublic readonly depth: number;\n\n\tconstructor(parent: MonarchStackElement | null, state: string) {\n\t\tthis.parent = parent;\n\t\tthis.state = state;\n\t\tthis.depth = (this.parent ? this.parent.depth : 0) + 1;\n\t}\n\n\tpublic static getStackElementId(element: MonarchStackElement | null): string {\n\t\tlet result = '';\n\t\twhile (element !== null) {\n\t\t\tif (result.length > 0) {\n\t\t\t\tresult += '|';\n\t\t\t}\n\t\t\tresult += element.state;\n\t\t\telement = element.parent;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _equals(a: MonarchStackElement | null, b: MonarchStackElement | null): boolean {\n\t\twhile (a !== null && b !== null) {\n\t\t\tif (a === b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (a.state !== b.state) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ta = a.parent;\n\t\t\tb = b.parent;\n\t\t}\n\t\tif (a === null && b === null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic equals(other: MonarchStackElement): boolean {\n\t\treturn MonarchStackElement._equals(this, other);\n\t}\n\n\tpublic push(state: string): MonarchStackElement {\n\t\treturn MonarchStackElementFactory.create(this, state);\n\t}\n\n\tpublic pop(): MonarchStackElement | null {\n\t\treturn this.parent;\n\t}\n\n\tpublic popall(): MonarchStackElement {\n\t\tlet result: MonarchStackElement = this;\n\t\twhile (result.parent) {\n\t\t\tresult = result.parent;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic switchTo(state: string): MonarchStackElement {\n\t\treturn MonarchStackElementFactory.create(this.parent, state);\n\t}\n}\n\nclass EmbeddedLanguageData {\n\tpublic readonly languageId: string;\n\tpublic readonly state: languages.IState;\n\n\tconstructor(languageId: string, state: languages.IState) {\n\t\tthis.languageId = languageId;\n\t\tthis.state = state;\n\t}\n\n\tpublic equals(other: EmbeddedLanguageData): boolean {\n\t\treturn (\n\t\t\tthis.languageId === other.languageId\n\t\t\t&& this.state.equals(other.state)\n\t\t);\n\t}\n\n\tpublic clone(): EmbeddedLanguageData {\n\t\tconst stateClone = this.state.clone();\n\t\t// save an object\n\t\tif (stateClone === this.state) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new EmbeddedLanguageData(this.languageId, this.state);\n\t}\n}\n\n/**\n * Reuse the same line states up to a certain depth.\n */\nclass MonarchLineStateFactory {\n\n\tprivate static readonly _INSTANCE = new MonarchLineStateFactory(CACHE_STACK_DEPTH);\n\tpublic static create(stack: MonarchStackElement, embeddedLanguageData: EmbeddedLanguageData | null): MonarchLineState {\n\t\treturn this._INSTANCE.create(stack, embeddedLanguageData);\n\t}\n\n\tprivate readonly _maxCacheDepth: number;\n\tprivate readonly _entries: { [stackElementId: string]: MonarchLineState };\n\n\tconstructor(maxCacheDepth: number) {\n\t\tthis._maxCacheDepth = maxCacheDepth;\n\t\tthis._entries = Object.create(null);\n\t}\n\n\tpublic create(stack: MonarchStackElement, embeddedLanguageData: EmbeddedLanguageData | null): MonarchLineState {\n\t\tif (embeddedLanguageData !== null) {\n\t\t\t// no caching when embedding\n\t\t\treturn new MonarchLineState(stack, embeddedLanguageData);\n\t\t}\n\t\tif (stack !== null && stack.depth >= this._maxCacheDepth) {\n\t\t\t// no caching above a certain depth\n\t\t\treturn new MonarchLineState(stack, embeddedLanguageData);\n\t\t}\n\t\tconst stackElementId = MonarchStackElement.getStackElementId(stack);\n\n\t\tlet result = this._entries[stackElementId];\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = new MonarchLineState(stack, null);\n\t\tthis._entries[stackElementId] = result;\n\t\treturn result;\n\t}\n}\n\nclass MonarchLineState implements languages.IState {\n\n\tpublic readonly stack: MonarchStackElement;\n\tpublic readonly embeddedLanguageData: EmbeddedLanguageData | null;\n\n\tconstructor(\n\t\tstack: MonarchStackElement,\n\t\tembeddedLanguageData: EmbeddedLanguageData | null\n\t) {\n\t\tthis.stack = stack;\n\t\tthis.embeddedLanguageData = embeddedLanguageData;\n\t}\n\n\tpublic clone(): languages.IState {\n\t\tconst embeddedlanguageDataClone = this.embeddedLanguageData ? this.embeddedLanguageData.clone() : null;\n\t\t// save an object\n\t\tif (embeddedlanguageDataClone === this.embeddedLanguageData) {\n\t\t\treturn this;\n\t\t}\n\t\treturn MonarchLineStateFactory.create(this.stack, this.embeddedLanguageData);\n\t}\n\n\tpublic equals(other: languages.IState): boolean {\n\t\tif (!(other instanceof MonarchLineState)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.stack.equals(other.stack)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.embeddedLanguageData === null && other.embeddedLanguageData === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.embeddedLanguageData === null || other.embeddedLanguageData === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.embeddedLanguageData.equals(other.embeddedLanguageData);\n\t}\n}\n\ninterface IMonarchTokensCollector {\n\tenterLanguage(languageId: string): void;\n\temit(startOffset: number, type: string): void;\n\tnestedLanguageTokenize(embeddedLanguageLine: string, hasEOL: boolean, embeddedLanguageData: EmbeddedLanguageData, offsetDelta: number): languages.IState;\n}\n\nclass MonarchClassicTokensCollector implements IMonarchTokensCollector {\n\n\tprivate _tokens: languages.Token[];\n\tprivate _languageId: string | null;\n\tprivate _lastTokenType: string | null;\n\tprivate _lastTokenLanguage: string | null;\n\n\tconstructor() {\n\t\tthis._tokens = [];\n\t\tthis._languageId = null;\n\t\tthis._lastTokenType = null;\n\t\tthis._lastTokenLanguage = null;\n\t}\n\n\tpublic enterLanguage(languageId: string): void {\n\t\tthis._languageId = languageId;\n\t}\n\n\tpublic emit(startOffset: number, type: string): void {\n\t\tif (this._lastTokenType === type && this._lastTokenLanguage === this._languageId) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastTokenType = type;\n\t\tthis._lastTokenLanguage = this._languageId;\n\t\tthis._tokens.push(new languages.Token(startOffset, type, this._languageId!));\n\t}\n\n\tpublic nestedLanguageTokenize(embeddedLanguageLine: string, hasEOL: boolean, embeddedLanguageData: EmbeddedLanguageData, offsetDelta: number): languages.IState {\n\t\tconst nestedLanguageId = embeddedLanguageData.languageId;\n\t\tconst embeddedModeState = embeddedLanguageData.state;\n\n\t\tconst nestedLanguageTokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n\t\tif (!nestedLanguageTokenizationSupport) {\n\t\t\tthis.enterLanguage(nestedLanguageId);\n\t\t\tthis.emit(offsetDelta, '');\n\t\t\treturn embeddedModeState;\n\t\t}\n\n\t\tconst nestedResult = nestedLanguageTokenizationSupport.tokenize(embeddedLanguageLine, hasEOL, embeddedModeState);\n\t\tif (offsetDelta !== 0) {\n\t\t\tfor (const token of nestedResult.tokens) {\n\t\t\t\tthis._tokens.push(new languages.Token(token.offset + offsetDelta, token.type, token.language));\n\t\t\t}\n\t\t} else {\n\t\t\tthis._tokens = this._tokens.concat(nestedResult.tokens);\n\t\t}\n\t\tthis._lastTokenType = null;\n\t\tthis._lastTokenLanguage = null;\n\t\tthis._languageId = null;\n\t\treturn nestedResult.endState;\n\t}\n\n\tpublic finalize(endState: MonarchLineState): languages.TokenizationResult {\n\t\treturn new languages.TokenizationResult(this._tokens, endState);\n\t}\n}\n\nclass MonarchModernTokensCollector implements IMonarchTokensCollector {\n\n\tprivate readonly _languageService: ILanguageService;\n\tprivate readonly _theme: TokenTheme;\n\tprivate _prependTokens: Uint32Array | null;\n\tprivate _tokens: number[];\n\tprivate _currentLanguageId: LanguageId;\n\tprivate _lastTokenMetadata: number;\n\n\tconstructor(languageService: ILanguageService, theme: TokenTheme) {\n\t\tthis._languageService = languageService;\n\t\tthis._theme = theme;\n\t\tthis._prependTokens = null;\n\t\tthis._tokens = [];\n\t\tthis._currentLanguageId = LanguageId.Null;\n\t\tthis._lastTokenMetadata = 0;\n\t}\n\n\tpublic enterLanguage(languageId: string): void {\n\t\tthis._currentLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n\t}\n\n\tpublic emit(startOffset: number, type: string): void {\n\t\tconst metadata = this._theme.match(this._currentLanguageId, type) | MetadataConsts.BALANCED_BRACKETS_MASK;\n\t\tif (this._lastTokenMetadata === metadata) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastTokenMetadata = metadata;\n\t\tthis._tokens.push(startOffset);\n\t\tthis._tokens.push(metadata);\n\t}\n\n\tprivate static _merge(a: Uint32Array | null, b: number[], c: Uint32Array | null): Uint32Array {\n\t\tconst aLen = (a !== null ? a.length : 0);\n\t\tconst bLen = b.length;\n\t\tconst cLen = (c !== null ? c.length : 0);\n\n\t\tif (aLen === 0 && bLen === 0 && cLen === 0) {\n\t\t\treturn new Uint32Array(0);\n\t\t}\n\t\tif (aLen === 0 && bLen === 0) {\n\t\t\treturn c!;\n\t\t}\n\t\tif (bLen === 0 && cLen === 0) {\n\t\t\treturn a!;\n\t\t}\n\n\t\tconst result = new Uint32Array(aLen + bLen + cLen);\n\t\tif (a !== null) {\n\t\t\tresult.set(a);\n\t\t}\n\t\tfor (let i = 0; i < bLen; i++) {\n\t\t\tresult[aLen + i] = b[i];\n\t\t}\n\t\tif (c !== null) {\n\t\t\tresult.set(c, aLen + bLen);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic nestedLanguageTokenize(embeddedLanguageLine: string, hasEOL: boolean, embeddedLanguageData: EmbeddedLanguageData, offsetDelta: number): languages.IState {\n\t\tconst nestedLanguageId = embeddedLanguageData.languageId;\n\t\tconst embeddedModeState = embeddedLanguageData.state;\n\n\t\tconst nestedLanguageTokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n\t\tif (!nestedLanguageTokenizationSupport) {\n\t\t\tthis.enterLanguage(nestedLanguageId);\n\t\t\tthis.emit(offsetDelta, '');\n\t\t\treturn embeddedModeState;\n\t\t}\n\n\t\tconst nestedResult = nestedLanguageTokenizationSupport.tokenizeEncoded(embeddedLanguageLine, hasEOL, embeddedModeState);\n\t\tif (offsetDelta !== 0) {\n\t\t\tfor (let i = 0, len = nestedResult.tokens.length; i < len; i += 2) {\n\t\t\t\tnestedResult.tokens[i] += offsetDelta;\n\t\t\t}\n\t\t}\n\n\t\tthis._prependTokens = MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, nestedResult.tokens);\n\t\tthis._tokens = [];\n\t\tthis._currentLanguageId = 0;\n\t\tthis._lastTokenMetadata = 0;\n\t\treturn nestedResult.endState;\n\t}\n\n\tpublic finalize(endState: MonarchLineState): languages.EncodedTokenizationResult {\n\t\treturn new languages.EncodedTokenizationResult(\n\t\t\tMonarchModernTokensCollector._merge(this._prependTokens, this._tokens, null),\n\t\t\tendState\n\t\t);\n\t}\n}\n\nexport type ILoadStatus = { loaded: true } | { loaded: false; promise: Promise<void> };\n\nexport class MonarchTokenizer extends Disposable implements languages.ITokenizationSupport, IDisposable {\n\n\tprivate readonly _languageService: ILanguageService;\n\tprivate readonly _standaloneThemeService: IStandaloneThemeService;\n\tprivate readonly _languageId: string;\n\tprivate readonly _lexer: monarchCommon.ILexer;\n\tprivate readonly _embeddedLanguages: { [languageId: string]: boolean };\n\tpublic embeddedLoaded: Promise<void>;\n\tprivate _maxTokenizationLineLength: number;\n\n\tconstructor(languageService: ILanguageService, standaloneThemeService: IStandaloneThemeService, languageId: string, lexer: monarchCommon.ILexer, @IConfigurationService private readonly _configurationService: IConfigurationService) {\n\t\tsuper();\n\t\tthis._languageService = languageService;\n\t\tthis._standaloneThemeService = standaloneThemeService;\n\t\tthis._languageId = languageId;\n\t\tthis._lexer = lexer;\n\t\tthis._embeddedLanguages = Object.create(null);\n\t\tthis.embeddedLoaded = Promise.resolve(undefined);\n\n\t\t// Set up listening for embedded modes\n\t\tlet emitting = false;\n\t\tthis._register(languages.TokenizationRegistry.onDidChange((e) => {\n\t\t\tif (emitting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet isOneOfMyEmbeddedModes = false;\n\t\t\tfor (let i = 0, len = e.changedLanguages.length; i < len; i++) {\n\t\t\t\tconst language = e.changedLanguages[i];\n\t\t\t\tif (this._embeddedLanguages[language]) {\n\t\t\t\t\tisOneOfMyEmbeddedModes = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isOneOfMyEmbeddedModes) {\n\t\t\t\temitting = true;\n\t\t\t\tlanguages.TokenizationRegistry.handleChange([this._languageId]);\n\t\t\t\temitting = false;\n\t\t\t}\n\t\t}));\n\t\tthis._maxTokenizationLineLength = this._configurationService.getValue<number>('editor.maxTokenizationLineLength', {\n\t\t\toverrideIdentifier: this._languageId\n\t\t});\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.maxTokenizationLineLength')) {\n\t\t\t\tthis._maxTokenizationLineLength = this._configurationService.getValue<number>('editor.maxTokenizationLineLength', {\n\t\t\t\t\toverrideIdentifier: this._languageId\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic getLoadStatus(): ILoadStatus {\n\t\tconst promises: Thenable<any>[] = [];\n\t\tfor (const nestedLanguageId in this._embeddedLanguages) {\n\t\t\tconst tokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n\t\t\tif (tokenizationSupport) {\n\t\t\t\t// The nested language is already loaded\n\t\t\t\tif (tokenizationSupport instanceof MonarchTokenizer) {\n\t\t\t\t\tconst nestedModeStatus = tokenizationSupport.getLoadStatus();\n\t\t\t\t\tif (nestedModeStatus.loaded === false) {\n\t\t\t\t\t\tpromises.push(nestedModeStatus.promise);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!languages.TokenizationRegistry.isResolved(nestedLanguageId)) {\n\t\t\t\t// The nested language is in the process of being loaded\n\t\t\t\tpromises.push(languages.TokenizationRegistry.getOrCreate(nestedLanguageId));\n\t\t\t}\n\t\t}\n\n\t\tif (promises.length === 0) {\n\t\t\treturn {\n\t\t\t\tloaded: true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tloaded: false,\n\t\t\tpromise: Promise.all(promises).then(_ => undefined)\n\t\t};\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\tconst rootState = MonarchStackElementFactory.create(null, this._lexer.start!);\n\t\treturn MonarchLineStateFactory.create(rootState, null);\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, lineState: languages.IState): languages.TokenizationResult {\n\t\tif (line.length >= this._maxTokenizationLineLength) {\n\t\t\treturn nullTokenize(this._languageId, lineState);\n\t\t}\n\t\tconst tokensCollector = new MonarchClassicTokensCollector();\n\t\tconst endLineState = this._tokenize(line, hasEOL, <MonarchLineState>lineState, tokensCollector);\n\t\treturn tokensCollector.finalize(endLineState);\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, lineState: languages.IState): languages.EncodedTokenizationResult {\n\t\tif (line.length >= this._maxTokenizationLineLength) {\n\t\t\treturn nullTokenizeEncoded(this._languageService.languageIdCodec.encodeLanguageId(this._languageId), lineState);\n\t\t}\n\t\tconst tokensCollector = new MonarchModernTokensCollector(this._languageService, this._standaloneThemeService.getColorTheme().tokenTheme);\n\t\tconst endLineState = this._tokenize(line, hasEOL, <MonarchLineState>lineState, tokensCollector);\n\t\treturn tokensCollector.finalize(endLineState);\n\t}\n\n\tprivate _tokenize(line: string, hasEOL: boolean, lineState: MonarchLineState, collector: IMonarchTokensCollector): MonarchLineState {\n\t\tif (lineState.embeddedLanguageData) {\n\t\t\treturn this._nestedTokenize(line, hasEOL, lineState, 0, collector);\n\t\t} else {\n\t\t\treturn this._myTokenize(line, hasEOL, lineState, 0, collector);\n\t\t}\n\t}\n\n\tprivate _findLeavingNestedLanguageOffset(line: string, state: MonarchLineState): number {\n\t\tlet rules: monarchCommon.IRule[] | null = this._lexer.tokenizer[state.stack.state];\n\t\tif (!rules) {\n\t\t\trules = monarchCommon.findRules(this._lexer, state.stack.state); // do parent matching\n\t\t\tif (!rules) {\n\t\t\t\tthrow monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state.stack.state);\n\t\t\t}\n\t\t}\n\n\t\tlet popOffset = -1;\n\t\tlet hasEmbeddedPopRule = false;\n\n\t\tfor (const rule of rules) {\n\t\t\tif (!monarchCommon.isIAction(rule.action) || rule.action.nextEmbedded !== '@pop') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\thasEmbeddedPopRule = true;\n\n\t\t\tlet regex = rule.resolveRegex(state.stack.state);\n\t\t\tconst regexSource = regex.source;\n\t\t\tif (regexSource.substr(0, 4) === '^(?:' && regexSource.substr(regexSource.length - 1, 1) === ')') {\n\t\t\t\tconst flags = (regex.ignoreCase ? 'i' : '') + (regex.unicode ? 'u' : '');\n\t\t\t\tregex = new RegExp(regexSource.substr(4, regexSource.length - 5), flags);\n\t\t\t}\n\n\t\t\tconst result = line.search(regex);\n\t\t\tif (result === -1 || (result !== 0 && rule.matchOnlyAtLineStart)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (popOffset === -1 || result < popOffset) {\n\t\t\t\tpopOffset = result;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasEmbeddedPopRule) {\n\t\t\tthrow monarchCommon.createError(this._lexer, 'no rule containing nextEmbedded: \"@pop\" in tokenizer embedded state: ' + state.stack.state);\n\t\t}\n\n\t\treturn popOffset;\n\t}\n\n\tprivate _nestedTokenize(line: string, hasEOL: boolean, lineState: MonarchLineState, offsetDelta: number, tokensCollector: IMonarchTokensCollector): MonarchLineState {\n\n\t\tconst popOffset = this._findLeavingNestedLanguageOffset(line, lineState);\n\n\t\tif (popOffset === -1) {\n\t\t\t// tokenization will not leave nested language\n\t\t\tconst nestedEndState = tokensCollector.nestedLanguageTokenize(line, hasEOL, lineState.embeddedLanguageData!, offsetDelta);\n\t\t\treturn MonarchLineStateFactory.create(lineState.stack, new EmbeddedLanguageData(lineState.embeddedLanguageData!.languageId, nestedEndState));\n\t\t}\n\n\t\tconst nestedLanguageLine = line.substring(0, popOffset);\n\t\tif (nestedLanguageLine.length > 0) {\n\t\t\t// tokenize with the nested language\n\t\t\ttokensCollector.nestedLanguageTokenize(nestedLanguageLine, false, lineState.embeddedLanguageData!, offsetDelta);\n\t\t}\n\n\t\tconst restOfTheLine = line.substring(popOffset);\n\t\treturn this._myTokenize(restOfTheLine, hasEOL, lineState, offsetDelta + popOffset, tokensCollector);\n\t}\n\n\tprivate _safeRuleName(rule: monarchCommon.IRule | null): string {\n\t\tif (rule) {\n\t\t\treturn rule.name;\n\t\t}\n\t\treturn '(unknown)';\n\t}\n\n\tprivate _myTokenize(lineWithoutLF: string, hasEOL: boolean, lineState: MonarchLineState, offsetDelta: number, tokensCollector: IMonarchTokensCollector): MonarchLineState {\n\t\ttokensCollector.enterLanguage(this._languageId);\n\n\t\tconst lineWithoutLFLength = lineWithoutLF.length;\n\t\tconst line = (hasEOL && this._lexer.includeLF ? lineWithoutLF + '\\n' : lineWithoutLF);\n\t\tconst lineLength = line.length;\n\n\t\tlet embeddedLanguageData = lineState.embeddedLanguageData;\n\t\tlet stack = lineState.stack;\n\t\tlet pos = 0;\n\n\t\t// regular expression group matching\n\t\t// these never need cloning or equality since they are only used within a line match\n\t\tinterface GroupMatching {\n\t\t\tmatches: string[];\n\t\t\trule: monarchCommon.IRule | null;\n\t\t\tgroups: { action: monarchCommon.FuzzyAction; matched: string }[];\n\t\t}\n\t\tlet groupMatching: GroupMatching | null = null;\n\n\t\t// See https://github.com/microsoft/monaco-editor/issues/1235\n\t\t// Evaluate rules at least once for an empty line\n\t\tlet forceEvaluation = true;\n\n\t\twhile (forceEvaluation || pos < lineLength) {\n\n\t\t\tconst pos0 = pos;\n\t\t\tconst stackLen0 = stack.depth;\n\t\t\tconst groupLen0 = groupMatching ? groupMatching.groups.length : 0;\n\t\t\tconst state = stack.state;\n\n\t\t\tlet matches: string[] | null = null;\n\t\t\tlet matched: string | null = null;\n\t\t\tlet action: monarchCommon.FuzzyAction | monarchCommon.FuzzyAction[] | null = null;\n\t\t\tlet rule: monarchCommon.IRule | null = null;\n\n\t\t\tlet enteringEmbeddedLanguage: string | null = null;\n\n\t\t\t// check if we need to process group matches first\n\t\t\tif (groupMatching) {\n\t\t\t\tmatches = groupMatching.matches;\n\t\t\t\tconst groupEntry = groupMatching.groups.shift()!;\n\t\t\t\tmatched = groupEntry.matched;\n\t\t\t\taction = groupEntry.action;\n\t\t\t\trule = groupMatching.rule;\n\n\t\t\t\t// cleanup if necessary\n\t\t\t\tif (groupMatching.groups.length === 0) {\n\t\t\t\t\tgroupMatching = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// otherwise we match on the token stream\n\n\t\t\t\tif (!forceEvaluation && pos >= lineLength) {\n\t\t\t\t\t// nothing to do\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tforceEvaluation = false;\n\n\t\t\t\t// get the rules for this state\n\t\t\t\tlet rules: monarchCommon.IRule[] | null = this._lexer.tokenizer[state];\n\t\t\t\tif (!rules) {\n\t\t\t\t\trules = monarchCommon.findRules(this._lexer, state); // do parent matching\n\t\t\t\t\tif (!rules) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// try each rule until we match\n\t\t\t\tconst restOfLine = line.substr(pos);\n\t\t\t\tfor (const rule of rules) {\n\t\t\t\t\tif (pos === 0 || !rule.matchOnlyAtLineStart) {\n\t\t\t\t\t\tmatches = restOfLine.match(rule.resolveRegex(state));\n\t\t\t\t\t\tif (matches) {\n\t\t\t\t\t\t\tmatched = matches[0];\n\t\t\t\t\t\t\taction = rule.action;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We matched 'rule' with 'matches' and 'action'\n\t\t\tif (!matches) {\n\t\t\t\tmatches = [''];\n\t\t\t\tmatched = '';\n\t\t\t}\n\n\t\t\tif (!action) {\n\t\t\t\t// bad: we didn't match anything, and there is no action to take\n\t\t\t\t// we need to advance the stream or we get progress trouble\n\t\t\t\tif (pos < lineLength) {\n\t\t\t\t\tmatches = [line.charAt(pos)];\n\t\t\t\t\tmatched = matches[0];\n\t\t\t\t}\n\t\t\t\taction = this._lexer.defaultToken;\n\t\t\t}\n\n\t\t\tif (matched === null) {\n\t\t\t\t// should never happen, needed for strict null checking\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// advance stream\n\t\t\tpos += matched.length;\n\n\t\t\t// maybe call action function (used for 'cases')\n\t\t\twhile (monarchCommon.isFuzzyAction(action) && monarchCommon.isIAction(action) && action.test) {\n\t\t\t\taction = action.test(matched, matches, state, pos === lineLength);\n\t\t\t}\n\n\t\t\tlet result: monarchCommon.FuzzyAction | monarchCommon.FuzzyAction[] | null = null;\n\t\t\t// set the result: either a string or an array of actions\n\t\t\tif (typeof action === 'string' || Array.isArray(action)) {\n\t\t\t\tresult = action;\n\t\t\t} else if (action.group) {\n\t\t\t\tresult = action.group;\n\t\t\t} else if (action.token !== null && action.token !== undefined) {\n\n\t\t\t\t// do $n replacements?\n\t\t\t\tif (action.tokenSubst) {\n\t\t\t\t\tresult = monarchCommon.substituteMatches(this._lexer, action.token, matched, matches, state);\n\t\t\t\t} else {\n\t\t\t\t\tresult = action.token;\n\t\t\t\t}\n\n\t\t\t\t// enter embedded language?\n\t\t\t\tif (action.nextEmbedded) {\n\t\t\t\t\tif (action.nextEmbedded === '@pop') {\n\t\t\t\t\t\tif (!embeddedLanguageData) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'cannot pop embedded language if not inside one');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tembeddedLanguageData = null;\n\t\t\t\t\t} else if (embeddedLanguageData) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'cannot enter embedded language from within an embedded language');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenteringEmbeddedLanguage = monarchCommon.substituteMatches(this._lexer, action.nextEmbedded, matched, matches, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// state transformations\n\t\t\t\tif (action.goBack) { // back up the stream..\n\t\t\t\t\tpos = Math.max(0, pos - action.goBack);\n\t\t\t\t}\n\n\t\t\t\tif (action.switchTo && typeof action.switchTo === 'string') {\n\t\t\t\t\tlet nextState = monarchCommon.substituteMatches(this._lexer, action.switchTo, matched, matches, state);  // switch state without a push...\n\t\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t\t}\n\t\t\t\t\tif (!monarchCommon.findRules(this._lexer, nextState)) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstack = stack.switchTo(nextState);\n\t\t\t\t\t}\n\t\t\t\t} else if (action.transform && typeof action.transform === 'function') {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'action.transform not supported');\n\t\t\t\t} else if (action.next) {\n\t\t\t\t\tif (action.next === '@push') {\n\t\t\t\t\t\tif (stack.depth >= this._lexer.maxStack) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'maximum tokenizer stack size reached: [' +\n\t\t\t\t\t\t\t\tstack.state + ',' + stack.parent!.state + ',...]');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = stack.push(state);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (action.next === '@pop') {\n\t\t\t\t\t\tif (stack.depth <= 1) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'trying to pop an empty stack in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = stack.pop()!;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (action.next === '@popall') {\n\t\t\t\t\t\tstack = stack.popall();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet nextState = monarchCommon.substituteMatches(this._lexer, action.next, matched, matches, state);\n\t\t\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!monarchCommon.findRules(this._lexer, nextState)) {\n\t\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = stack.push(nextState);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (action.log && typeof (action.log) === 'string') {\n\t\t\t\t\tmonarchCommon.log(this._lexer, this._lexer.languageId + ': ' + monarchCommon.substituteMatches(this._lexer, action.log, matched, matches, state));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check result\n\t\t\tif (result === null) {\n\t\t\t\tthrow monarchCommon.createError(this._lexer, 'lexer rule has no well-defined action in rule: ' + this._safeRuleName(rule));\n\t\t\t}\n\n\t\t\tconst computeNewStateForEmbeddedLanguage = (enteringEmbeddedLanguage: string) => {\n\t\t\t\t// support language names, mime types, and language ids\n\t\t\t\tconst languageId = (\n\t\t\t\t\tthis._languageService.getLanguageIdByLanguageName(enteringEmbeddedLanguage)\n\t\t\t\t\t|| this._languageService.getLanguageIdByMimeType(enteringEmbeddedLanguage)\n\t\t\t\t\t|| enteringEmbeddedLanguage\n\t\t\t\t);\n\n\t\t\t\tconst embeddedLanguageData = this._getNestedEmbeddedLanguageData(languageId);\n\n\t\t\t\tif (pos < lineLength) {\n\t\t\t\t\t// there is content from the embedded language on this line\n\t\t\t\t\tconst restOfLine = lineWithoutLF.substr(pos);\n\t\t\t\t\treturn this._nestedTokenize(restOfLine, hasEOL, MonarchLineStateFactory.create(stack, embeddedLanguageData), offsetDelta + pos, tokensCollector);\n\t\t\t\t} else {\n\t\t\t\t\treturn MonarchLineStateFactory.create(stack, embeddedLanguageData);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// is the result a group match?\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tif (groupMatching && groupMatching.groups.length > 0) {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'groups cannot be nested: ' + this._safeRuleName(rule));\n\t\t\t\t}\n\t\t\t\tif (matches.length !== result.length + 1) {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'matched number of groups does not match the number of actions in rule: ' + this._safeRuleName(rule));\n\t\t\t\t}\n\t\t\t\tlet totalLen = 0;\n\t\t\t\tfor (let i = 1; i < matches.length; i++) {\n\t\t\t\t\ttotalLen += matches[i].length;\n\t\t\t\t}\n\t\t\t\tif (totalLen !== matched.length) {\n\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + this._safeRuleName(rule));\n\t\t\t\t}\n\n\t\t\t\tgroupMatching = {\n\t\t\t\t\trule: rule,\n\t\t\t\t\tmatches: matches,\n\t\t\t\t\tgroups: []\n\t\t\t\t};\n\t\t\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\t\t\tgroupMatching.groups[i] = {\n\t\t\t\t\t\taction: result[i],\n\t\t\t\t\t\tmatched: matches[i + 1]\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tpos -= matched.length;\n\t\t\t\t// call recursively to initiate first result match\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// regular result\n\n\t\t\t\t// check for '@rematch'\n\t\t\t\tif (result === '@rematch') {\n\t\t\t\t\tpos -= matched.length;\n\t\t\t\t\tmatched = '';  // better set the next state too..\n\t\t\t\t\tmatches = null;\n\t\t\t\t\tresult = '';\n\n\t\t\t\t\t// Even though `@rematch` was specified, if `nextEmbedded` also specified,\n\t\t\t\t\t// a state transition should occur.\n\t\t\t\t\tif (enteringEmbeddedLanguage !== null) {\n\t\t\t\t\t\treturn computeNewStateForEmbeddedLanguage(enteringEmbeddedLanguage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check progress\n\t\t\t\tif (matched.length === 0) {\n\t\t\t\t\tif (lineLength === 0 || stackLen0 !== stack.depth || state !== stack.state || (!groupMatching ? 0 : groupMatching.groups.length) !== groupLen0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, 'no progress in tokenizer in rule: ' + this._safeRuleName(rule));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// return the result (and check for brace matching)\n\t\t\t\t// todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\n\t\t\t\tlet tokenType: string | null = null;\n\t\t\t\tif (monarchCommon.isString(result) && result.indexOf('@brackets') === 0) {\n\t\t\t\t\tconst rest = result.substr('@brackets'.length);\n\t\t\t\t\tconst bracket = findBracket(this._lexer, matched);\n\t\t\t\t\tif (!bracket) {\n\t\t\t\t\t\tthrow monarchCommon.createError(this._lexer, '@brackets token returned but no bracket defined as: ' + matched);\n\t\t\t\t\t}\n\t\t\t\t\ttokenType = monarchCommon.sanitize(bracket.token + rest);\n\t\t\t\t} else {\n\t\t\t\t\tconst token = (result === '' ? '' : result + this._lexer.tokenPostfix);\n\t\t\t\t\ttokenType = monarchCommon.sanitize(token);\n\t\t\t\t}\n\n\t\t\t\tif (pos0 < lineWithoutLFLength) {\n\t\t\t\t\ttokensCollector.emit(pos0 + offsetDelta, tokenType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (enteringEmbeddedLanguage !== null) {\n\t\t\t\treturn computeNewStateForEmbeddedLanguage(enteringEmbeddedLanguage);\n\t\t\t}\n\t\t}\n\n\t\treturn MonarchLineStateFactory.create(stack, embeddedLanguageData);\n\t}\n\n\tprivate _getNestedEmbeddedLanguageData(languageId: string): EmbeddedLanguageData {\n\t\tif (!this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn new EmbeddedLanguageData(languageId, NullState);\n\t\t}\n\n\t\tif (languageId !== this._languageId) {\n\t\t\t// Fire language loading event\n\t\t\tthis._languageService.requestBasicLanguageFeatures(languageId);\n\t\t\tlanguages.TokenizationRegistry.getOrCreate(languageId);\n\t\t\tthis._embeddedLanguages[languageId] = true;\n\t\t}\n\n\t\tconst tokenizationSupport = languages.TokenizationRegistry.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn new EmbeddedLanguageData(languageId, tokenizationSupport.getInitialState());\n\t\t}\n\n\t\treturn new EmbeddedLanguageData(languageId, NullState);\n\t}\n}\n\n/**\n * Searches for a bracket in the 'brackets' attribute that matches the input.\n */\nfunction findBracket(lexer: monarchCommon.ILexer, matched: string) {\n\tif (!matched) {\n\t\treturn null;\n\t}\n\tmatched = monarchCommon.fixCase(lexer, matched);\n\n\tconst brackets = lexer.brackets;\n\tfor (const bracket of brackets) {\n\t\tif (bracket.open === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Open };\n\t\t}\n\t\telse if (bracket.close === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Close };\n\t\t}\n\t}\n\treturn null;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAUA,SAAS,YAAY,mBAAmB;AACxC,YAAY,eAAe;AAC3B,SAAS,WAAW,qBAAqB,oBAAoB;AAC7D,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,YAAY,mBAAmB;AAC/B,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,YAAY,sBAAsB;AAE3C,MAAM,oBAAoB;AAK1B,MAAM,2BAA2B;AAAA,EAzBjC,OAyBiC;AAAA;AAAA;AAAA,EAEhC,OAAwB,YAAY,IAAI,2BAA2B,iBAAiB;AAAA,EACpF,OAAc,OAAO,QAAoC,OAAoC;AAC5F,WAAO,KAAK,UAAU,OAAO,QAAQ,KAAK;AAAA,EAC3C;AAAA,EAEiB;AAAA,EACA;AAAA,EAEjB,YAAY,eAAuB;AAClC,SAAK,iBAAiB;AACtB,SAAK,WAAW,uBAAO,OAAO,IAAI;AAAA,EACnC;AAAA,EAEO,OAAO,QAAoC,OAAoC;AACrF,QAAI,WAAW,QAAQ,OAAO,SAAS,KAAK,gBAAgB;AAE3D,aAAO,IAAI,oBAAoB,QAAQ,KAAK;AAAA,IAC7C;AACA,QAAI,iBAAiB,oBAAoB,kBAAkB,MAAM;AACjE,QAAI,eAAe,SAAS,GAAG;AAC9B,wBAAkB;AAAA,IACnB;AACA,sBAAkB;AAElB,QAAI,SAAS,KAAK,SAAS,cAAc;AACzC,QAAI,QAAQ;AACX,aAAO;AAAA,IACR;AACA,aAAS,IAAI,oBAAoB,QAAQ,KAAK;AAC9C,SAAK,SAAS,cAAc,IAAI;AAChC,WAAO;AAAA,EACR;AACD;AAEA,MAAM,oBAAoB;AAAA,EA7D1B,OA6D0B;AAAA;AAAA;AAAA,EAET;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,YAAY,QAAoC,OAAe;AAC9D,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,SAAS,KAAK,SAAS,KAAK,OAAO,QAAQ,KAAK;AAAA,EACtD;AAAA,EAEA,OAAc,kBAAkB,SAA6C;AAC5E,QAAI,SAAS;AACb,WAAO,YAAY,MAAM;AACxB,UAAI,OAAO,SAAS,GAAG;AACtB,kBAAU;AAAA,MACX;AACA,gBAAU,QAAQ;AAClB,gBAAU,QAAQ;AAAA,IACnB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,QAAQ,GAA+B,GAAwC;AAC7F,WAAO,MAAM,QAAQ,MAAM,MAAM;AAChC,UAAI,MAAM,GAAG;AACZ,eAAO;AAAA,MACR;AACA,UAAI,EAAE,UAAU,EAAE,OAAO;AACxB,eAAO;AAAA,MACR;AACA,UAAI,EAAE;AACN,UAAI,EAAE;AAAA,IACP;AACA,QAAI,MAAM,QAAQ,MAAM,MAAM;AAC7B,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEO,OAAO,OAAqC;AAClD,WAAO,oBAAoB,QAAQ,MAAM,KAAK;AAAA,EAC/C;AAAA,EAEO,KAAK,OAAoC;AAC/C,WAAO,2BAA2B,OAAO,MAAM,KAAK;AAAA,EACrD;AAAA,EAEO,MAAkC;AACxC,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,SAA8B;AACpC,QAAI,SAA8B;AAClC,WAAO,OAAO,QAAQ;AACrB,eAAS,OAAO;AAAA,IACjB;AACA,WAAO;AAAA,EACR;AAAA,EAEO,SAAS,OAAoC;AACnD,WAAO,2BAA2B,OAAO,KAAK,QAAQ,KAAK;AAAA,EAC5D;AACD;AAEA,MAAM,qBAAqB;AAAA,EA/H3B,OA+H2B;AAAA;AAAA;AAAA,EACV;AAAA,EACA;AAAA,EAEhB,YAAY,YAAoB,OAAyB;AACxD,SAAK,aAAa;AAClB,SAAK,QAAQ;AAAA,EACd;AAAA,EAEO,OAAO,OAAsC;AACnD,WACC,KAAK,eAAe,MAAM,cACvB,KAAK,MAAM,OAAO,MAAM,KAAK;AAAA,EAElC;AAAA,EAEO,QAA8B;AACpC,UAAM,aAAa,KAAK,MAAM,MAAM;AAEpC,QAAI,eAAe,KAAK,OAAO;AAC9B,aAAO;AAAA,IACR;AACA,WAAO,IAAI,qBAAqB,KAAK,YAAY,KAAK,KAAK;AAAA,EAC5D;AACD;AAKA,MAAM,wBAAwB;AAAA,EA5J9B,OA4J8B;AAAA;AAAA;AAAA,EAE7B,OAAwB,YAAY,IAAI,wBAAwB,iBAAiB;AAAA,EACjF,OAAc,OAAO,OAA4B,sBAAqE;AACrH,WAAO,KAAK,UAAU,OAAO,OAAO,oBAAoB;AAAA,EACzD;AAAA,EAEiB;AAAA,EACA;AAAA,EAEjB,YAAY,eAAuB;AAClC,SAAK,iBAAiB;AACtB,SAAK,WAAW,uBAAO,OAAO,IAAI;AAAA,EACnC;AAAA,EAEO,OAAO,OAA4B,sBAAqE;AAC9G,QAAI,yBAAyB,MAAM;AAElC,aAAO,IAAI,iBAAiB,OAAO,oBAAoB;AAAA,IACxD;AACA,QAAI,UAAU,QAAQ,MAAM,SAAS,KAAK,gBAAgB;AAEzD,aAAO,IAAI,iBAAiB,OAAO,oBAAoB;AAAA,IACxD;AACA,UAAM,iBAAiB,oBAAoB,kBAAkB,KAAK;AAElE,QAAI,SAAS,KAAK,SAAS,cAAc;AACzC,QAAI,QAAQ;AACX,aAAO;AAAA,IACR;AACA,aAAS,IAAI,iBAAiB,OAAO,IAAI;AACzC,SAAK,SAAS,cAAc,IAAI;AAChC,WAAO;AAAA,EACR;AACD;AAEA,MAAM,iBAA6C;AAAA,EAhMnD,OAgMmD;AAAA;AAAA;AAAA,EAElC;AAAA,EACA;AAAA,EAEhB,YACC,OACA,sBACC;AACD,SAAK,QAAQ;AACb,SAAK,uBAAuB;AAAA,EAC7B;AAAA,EAEO,QAA0B;AAChC,UAAM,4BAA4B,KAAK,uBAAuB,KAAK,qBAAqB,MAAM,IAAI;AAElG,QAAI,8BAA8B,KAAK,sBAAsB;AAC5D,aAAO;AAAA,IACR;AACA,WAAO,wBAAwB,OAAO,KAAK,OAAO,KAAK,oBAAoB;AAAA,EAC5E;AAAA,EAEO,OAAO,OAAkC;AAC/C,QAAI,EAAE,iBAAiB,mBAAmB;AACzC,aAAO;AAAA,IACR;AACA,QAAI,CAAC,KAAK,MAAM,OAAO,MAAM,KAAK,GAAG;AACpC,aAAO;AAAA,IACR;AACA,QAAI,KAAK,yBAAyB,QAAQ,MAAM,yBAAyB,MAAM;AAC9E,aAAO;AAAA,IACR;AACA,QAAI,KAAK,yBAAyB,QAAQ,MAAM,yBAAyB,MAAM;AAC9E,aAAO;AAAA,IACR;AACA,WAAO,KAAK,qBAAqB,OAAO,MAAM,oBAAoB;AAAA,EACnE;AACD;AAQA,MAAM,8BAAiE;AAAA,EA7OvE,OA6OuE;AAAA;AAAA;AAAA,EAE9D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,cAAc;AACb,SAAK,UAAU,CAAC;AAChB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAEO,cAAc,YAA0B;AAC9C,SAAK,cAAc;AAAA,EACpB;AAAA,EAEO,KAAK,aAAqB,MAAoB;AACpD,QAAI,KAAK,mBAAmB,QAAQ,KAAK,uBAAuB,KAAK,aAAa;AACjF;AAAA,IACD;AACA,SAAK,iBAAiB;AACtB,SAAK,qBAAqB,KAAK;AAC/B,SAAK,QAAQ,KAAK,IAAI,UAAU,MAAM,aAAa,MAAM,KAAK,WAAY,CAAC;AAAA,EAC5E;AAAA,EAEO,uBAAuB,sBAA8B,QAAiB,sBAA4C,aAAuC;AAC/J,UAAM,mBAAmB,qBAAqB;AAC9C,UAAM,oBAAoB,qBAAqB;AAE/C,UAAM,oCAAoC,UAAU,qBAAqB,IAAI,gBAAgB;AAC7F,QAAI,CAAC,mCAAmC;AACvC,WAAK,cAAc,gBAAgB;AACnC,WAAK,KAAK,aAAa,EAAE;AACzB,aAAO;AAAA,IACR;AAEA,UAAM,eAAe,kCAAkC,SAAS,sBAAsB,QAAQ,iBAAiB;AAC/G,QAAI,gBAAgB,GAAG;AACtB,iBAAW,SAAS,aAAa,QAAQ;AACxC,aAAK,QAAQ,KAAK,IAAI,UAAU,MAAM,MAAM,SAAS,aAAa,MAAM,MAAM,MAAM,QAAQ,CAAC;AAAA,MAC9F;AAAA,IACD,OAAO;AACN,WAAK,UAAU,KAAK,QAAQ,OAAO,aAAa,MAAM;AAAA,IACvD;AACA,SAAK,iBAAiB;AACtB,SAAK,qBAAqB;AAC1B,SAAK,cAAc;AACnB,WAAO,aAAa;AAAA,EACrB;AAAA,EAEO,SAAS,UAA0D;AACzE,WAAO,IAAI,UAAU,mBAAmB,KAAK,SAAS,QAAQ;AAAA,EAC/D;AACD;AAEA,MAAM,6BAAgE;AAAA,EAtStE,OAsSsE;AAAA;AAAA;AAAA,EAEpD;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,iBAAmC,OAAmB;AACjE,SAAK,mBAAmB;AACxB,SAAK,SAAS;AACd,SAAK,iBAAiB;AACtB,SAAK,UAAU,CAAC;AAChB,SAAK,qBAAqB,WAAW;AACrC,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAEO,cAAc,YAA0B;AAC9C,SAAK,qBAAqB,KAAK,iBAAiB,gBAAgB,iBAAiB,UAAU;AAAA,EAC5F;AAAA,EAEO,KAAK,aAAqB,MAAoB;AACpD,UAAM,WAAW,KAAK,OAAO,MAAM,KAAK,oBAAoB,IAAI,IAAI,eAAe;AACnF,QAAI,KAAK,uBAAuB,UAAU;AACzC;AAAA,IACD;AACA,SAAK,qBAAqB;AAC1B,SAAK,QAAQ,KAAK,WAAW;AAC7B,SAAK,QAAQ,KAAK,QAAQ;AAAA,EAC3B;AAAA,EAEA,OAAe,OAAO,GAAuB,GAAa,GAAoC;AAC7F,UAAM,OAAQ,MAAM,OAAO,EAAE,SAAS;AACtC,UAAM,OAAO,EAAE;AACf,UAAM,OAAQ,MAAM,OAAO,EAAE,SAAS;AAEtC,QAAI,SAAS,KAAK,SAAS,KAAK,SAAS,GAAG;AAC3C,aAAO,IAAI,YAAY,CAAC;AAAA,IACzB;AACA,QAAI,SAAS,KAAK,SAAS,GAAG;AAC7B,aAAO;AAAA,IACR;AACA,QAAI,SAAS,KAAK,SAAS,GAAG;AAC7B,aAAO;AAAA,IACR;AAEA,UAAM,SAAS,IAAI,YAAY,OAAO,OAAO,IAAI;AACjD,QAAI,MAAM,MAAM;AACf,aAAO,IAAI,CAAC;AAAA,IACb;AACA,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC9B,aAAO,OAAO,CAAC,IAAI,EAAE,CAAC;AAAA,IACvB;AACA,QAAI,MAAM,MAAM;AACf,aAAO,IAAI,GAAG,OAAO,IAAI;AAAA,IAC1B;AACA,WAAO;AAAA,EACR;AAAA,EAEO,uBAAuB,sBAA8B,QAAiB,sBAA4C,aAAuC;AAC/J,UAAM,mBAAmB,qBAAqB;AAC9C,UAAM,oBAAoB,qBAAqB;AAE/C,UAAM,oCAAoC,UAAU,qBAAqB,IAAI,gBAAgB;AAC7F,QAAI,CAAC,mCAAmC;AACvC,WAAK,cAAc,gBAAgB;AACnC,WAAK,KAAK,aAAa,EAAE;AACzB,aAAO;AAAA,IACR;AAEA,UAAM,eAAe,kCAAkC,gBAAgB,sBAAsB,QAAQ,iBAAiB;AACtH,QAAI,gBAAgB,GAAG;AACtB,eAAS,IAAI,GAAG,MAAM,aAAa,OAAO,QAAQ,IAAI,KAAK,KAAK,GAAG;AAClE,qBAAa,OAAO,CAAC,KAAK;AAAA,MAC3B;AAAA,IACD;AAEA,SAAK,iBAAiB,6BAA6B,OAAO,KAAK,gBAAgB,KAAK,SAAS,aAAa,MAAM;AAChH,SAAK,UAAU,CAAC;AAChB,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,WAAO,aAAa;AAAA,EACrB;AAAA,EAEO,SAAS,UAAiE;AAChF,WAAO,IAAI,UAAU;AAAA,MACpB,6BAA6B,OAAO,KAAK,gBAAgB,KAAK,SAAS,IAAI;AAAA,MAC3E;AAAA,IACD;AAAA,EACD;AACD;AAIO,IAAM,mBAAN,cAA+B,WAAkE;AAAA,EAUvG,YAAY,iBAAmC,wBAAiD,YAAoB,OAAqE,uBAA8C;AACtO,UAAM;AADkL;AAExL,SAAK,mBAAmB;AACxB,SAAK,0BAA0B;AAC/B,SAAK,cAAc;AACnB,SAAK,SAAS;AACd,SAAK,qBAAqB,uBAAO,OAAO,IAAI;AAC5C,SAAK,iBAAiB,QAAQ,QAAQ,MAAS;AAG/C,QAAI,WAAW;AACf,SAAK,UAAU,UAAU,qBAAqB,YAAY,CAAC,MAAM;AAChE,UAAI,UAAU;AACb;AAAA,MACD;AACA,UAAI,yBAAyB;AAC7B,eAAS,IAAI,GAAG,MAAM,EAAE,iBAAiB,QAAQ,IAAI,KAAK,KAAK;AAC9D,cAAM,WAAW,EAAE,iBAAiB,CAAC;AACrC,YAAI,KAAK,mBAAmB,QAAQ,GAAG;AACtC,mCAAyB;AACzB;AAAA,QACD;AAAA,MACD;AACA,UAAI,wBAAwB;AAC3B,mBAAW;AACX,kBAAU,qBAAqB,aAAa,CAAC,KAAK,WAAW,CAAC;AAC9D,mBAAW;AAAA,MACZ;AAAA,IACD,CAAC,CAAC;AACF,SAAK,6BAA6B,KAAK,sBAAsB,SAAiB,oCAAoC;AAAA,MACjH,oBAAoB,KAAK;AAAA,IAC1B,CAAC;AACD,SAAK,UAAU,KAAK,sBAAsB,yBAAyB,OAAK;AACvE,UAAI,EAAE,qBAAqB,kCAAkC,GAAG;AAC/D,aAAK,6BAA6B,KAAK,sBAAsB,SAAiB,oCAAoC;AAAA,UACjH,oBAAoB,KAAK;AAAA,QAC1B,CAAC;AAAA,MACF;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAtbD,OAqYwG;AAAA;AAAA;AAAA,EAEtF;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACV;AAAA,EACC;AAAA,EA2CD,gBAA6B;AACnC,UAAM,WAA4B,CAAC;AACnC,eAAW,oBAAoB,KAAK,oBAAoB;AACvD,YAAM,sBAAsB,UAAU,qBAAqB,IAAI,gBAAgB;AAC/E,UAAI,qBAAqB;AAExB,YAAI,+BAA+B,kBAAkB;AACpD,gBAAM,mBAAmB,oBAAoB,cAAc;AAC3D,cAAI,iBAAiB,WAAW,OAAO;AACtC,qBAAS,KAAK,iBAAiB,OAAO;AAAA,UACvC;AAAA,QACD;AACA;AAAA,MACD;AAEA,UAAI,CAAC,UAAU,qBAAqB,WAAW,gBAAgB,GAAG;AAEjE,iBAAS,KAAK,UAAU,qBAAqB,YAAY,gBAAgB,CAAC;AAAA,MAC3E;AAAA,IACD;AAEA,QAAI,SAAS,WAAW,GAAG;AAC1B,aAAO;AAAA,QACN,QAAQ;AAAA,MACT;AAAA,IACD;AACA,WAAO;AAAA,MACN,QAAQ;AAAA,MACR,SAAS,QAAQ,IAAI,QAAQ,EAAE,KAAK,OAAK,MAAS;AAAA,IACnD;AAAA,EACD;AAAA,EAEO,kBAAoC;AAC1C,UAAM,YAAY,2BAA2B,OAAO,MAAM,KAAK,OAAO,KAAM;AAC5E,WAAO,wBAAwB,OAAO,WAAW,IAAI;AAAA,EACtD;AAAA,EAEO,SAAS,MAAc,QAAiB,WAA2D;AACzG,QAAI,KAAK,UAAU,KAAK,4BAA4B;AACnD,aAAO,aAAa,KAAK,aAAa,SAAS;AAAA,IAChD;AACA,UAAM,kBAAkB,IAAI,8BAA8B;AAC1D,UAAM,eAAe,KAAK,UAAU,MAAM,QAA0B,WAAW,eAAe;AAC9F,WAAO,gBAAgB,SAAS,YAAY;AAAA,EAC7C;AAAA,EAEO,gBAAgB,MAAc,QAAiB,WAAkE;AACvH,QAAI,KAAK,UAAU,KAAK,4BAA4B;AACnD,aAAO,oBAAoB,KAAK,iBAAiB,gBAAgB,iBAAiB,KAAK,WAAW,GAAG,SAAS;AAAA,IAC/G;AACA,UAAM,kBAAkB,IAAI,6BAA6B,KAAK,kBAAkB,KAAK,wBAAwB,cAAc,EAAE,UAAU;AACvI,UAAM,eAAe,KAAK,UAAU,MAAM,QAA0B,WAAW,eAAe;AAC9F,WAAO,gBAAgB,SAAS,YAAY;AAAA,EAC7C;AAAA,EAEQ,UAAU,MAAc,QAAiB,WAA6B,WAAsD;AACnI,QAAI,UAAU,sBAAsB;AACnC,aAAO,KAAK,gBAAgB,MAAM,QAAQ,WAAW,GAAG,SAAS;AAAA,IAClE,OAAO;AACN,aAAO,KAAK,YAAY,MAAM,QAAQ,WAAW,GAAG,SAAS;AAAA,IAC9D;AAAA,EACD;AAAA,EAEQ,iCAAiC,MAAc,OAAiC;AACvF,QAAI,QAAsC,KAAK,OAAO,UAAU,MAAM,MAAM,KAAK;AACjF,QAAI,CAAC,OAAO;AACX,cAAQ,cAAc,UAAU,KAAK,QAAQ,MAAM,MAAM,KAAK;AAC9D,UAAI,CAAC,OAAO;AACX,cAAM,cAAc,YAAY,KAAK,QAAQ,qCAAqC,MAAM,MAAM,KAAK;AAAA,MACpG;AAAA,IACD;AAEA,QAAI,YAAY;AAChB,QAAI,qBAAqB;AAEzB,eAAW,QAAQ,OAAO;AACzB,UAAI,CAAC,cAAc,UAAU,KAAK,MAAM,KAAK,KAAK,OAAO,iBAAiB,QAAQ;AACjF;AAAA,MACD;AACA,2BAAqB;AAErB,UAAI,QAAQ,KAAK,aAAa,MAAM,MAAM,KAAK;AAC/C,YAAM,cAAc,MAAM;AAC1B,UAAI,YAAY,OAAO,GAAG,CAAC,MAAM,UAAU,YAAY,OAAO,YAAY,SAAS,GAAG,CAAC,MAAM,KAAK;AACjG,cAAM,SAAS,MAAM,aAAa,MAAM,OAAO,MAAM,UAAU,MAAM;AACrE,gBAAQ,IAAI,OAAO,YAAY,OAAO,GAAG,YAAY,SAAS,CAAC,GAAG,KAAK;AAAA,MACxE;AAEA,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,UAAI,WAAW,MAAO,WAAW,KAAK,KAAK,sBAAuB;AACjE;AAAA,MACD;AAEA,UAAI,cAAc,MAAM,SAAS,WAAW;AAC3C,oBAAY;AAAA,MACb;AAAA,IACD;AAEA,QAAI,CAAC,oBAAoB;AACxB,YAAM,cAAc,YAAY,KAAK,QAAQ,0EAA0E,MAAM,MAAM,KAAK;AAAA,IACzI;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,gBAAgB,MAAc,QAAiB,WAA6B,aAAqB,iBAA4D;AAEpK,UAAM,YAAY,KAAK,iCAAiC,MAAM,SAAS;AAEvE,QAAI,cAAc,IAAI;AAErB,YAAM,iBAAiB,gBAAgB,uBAAuB,MAAM,QAAQ,UAAU,sBAAuB,WAAW;AACxH,aAAO,wBAAwB,OAAO,UAAU,OAAO,IAAI,qBAAqB,UAAU,qBAAsB,YAAY,cAAc,CAAC;AAAA,IAC5I;AAEA,UAAM,qBAAqB,KAAK,UAAU,GAAG,SAAS;AACtD,QAAI,mBAAmB,SAAS,GAAG;AAElC,sBAAgB,uBAAuB,oBAAoB,OAAO,UAAU,sBAAuB,WAAW;AAAA,IAC/G;AAEA,UAAM,gBAAgB,KAAK,UAAU,SAAS;AAC9C,WAAO,KAAK,YAAY,eAAe,QAAQ,WAAW,cAAc,WAAW,eAAe;AAAA,EACnG;AAAA,EAEQ,cAAc,MAA0C;AAC/D,QAAI,MAAM;AACT,aAAO,KAAK;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,YAAY,eAAuB,QAAiB,WAA6B,aAAqB,iBAA4D;AACzK,oBAAgB,cAAc,KAAK,WAAW;AAE9C,UAAM,sBAAsB,cAAc;AAC1C,UAAM,OAAQ,UAAU,KAAK,OAAO,YAAY,gBAAgB,OAAO;AACvE,UAAM,aAAa,KAAK;AAExB,QAAI,uBAAuB,UAAU;AACrC,QAAI,QAAQ,UAAU;AACtB,QAAI,MAAM;AASV,QAAI,gBAAsC;AAI1C,QAAI,kBAAkB;AAEtB,WAAO,mBAAmB,MAAM,YAAY;AAE3C,YAAM,OAAO;AACb,YAAM,YAAY,MAAM;AACxB,YAAM,YAAY,gBAAgB,cAAc,OAAO,SAAS;AAChE,YAAM,QAAQ,MAAM;AAEpB,UAAI,UAA2B;AAC/B,UAAI,UAAyB;AAC7B,UAAI,SAAyE;AAC7E,UAAI,OAAmC;AAEvC,UAAI,2BAA0C;AAG9C,UAAI,eAAe;AAClB,kBAAU,cAAc;AACxB,cAAM,aAAa,cAAc,OAAO,MAAM;AAC9C,kBAAU,WAAW;AACrB,iBAAS,WAAW;AACpB,eAAO,cAAc;AAGrB,YAAI,cAAc,OAAO,WAAW,GAAG;AACtC,0BAAgB;AAAA,QACjB;AAAA,MACD,OAAO;AAGN,YAAI,CAAC,mBAAmB,OAAO,YAAY;AAE1C;AAAA,QACD;AAEA,0BAAkB;AAGlB,YAAI,QAAsC,KAAK,OAAO,UAAU,KAAK;AACrE,YAAI,CAAC,OAAO;AACX,kBAAQ,cAAc,UAAU,KAAK,QAAQ,KAAK;AAClD,cAAI,CAAC,OAAO;AACX,kBAAM,cAAc,YAAY,KAAK,QAAQ,qCAAqC,KAAK;AAAA,UACxF;AAAA,QACD;AAGA,cAAM,aAAa,KAAK,OAAO,GAAG;AAClC,mBAAWA,SAAQ,OAAO;AACzB,cAAI,QAAQ,KAAK,CAACA,MAAK,sBAAsB;AAC5C,sBAAU,WAAW,MAAMA,MAAK,aAAa,KAAK,CAAC;AACnD,gBAAI,SAAS;AACZ,wBAAU,QAAQ,CAAC;AACnB,uBAASA,MAAK;AACd;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAGA,UAAI,CAAC,SAAS;AACb,kBAAU,CAAC,EAAE;AACb,kBAAU;AAAA,MACX;AAEA,UAAI,CAAC,QAAQ;AAGZ,YAAI,MAAM,YAAY;AACrB,oBAAU,CAAC,KAAK,OAAO,GAAG,CAAC;AAC3B,oBAAU,QAAQ,CAAC;AAAA,QACpB;AACA,iBAAS,KAAK,OAAO;AAAA,MACtB;AAEA,UAAI,YAAY,MAAM;AAErB;AAAA,MACD;AAGA,aAAO,QAAQ;AAGf,aAAO,cAAc,cAAc,MAAM,KAAK,cAAc,UAAU,MAAM,KAAK,OAAO,MAAM;AAC7F,iBAAS,OAAO,KAAK,SAAS,SAAS,OAAO,QAAQ,UAAU;AAAA,MACjE;AAEA,UAAI,SAAyE;AAE7E,UAAI,OAAO,WAAW,YAAY,MAAM,QAAQ,MAAM,GAAG;AACxD,iBAAS;AAAA,MACV,WAAW,OAAO,OAAO;AACxB,iBAAS,OAAO;AAAA,MACjB,WAAW,OAAO,UAAU,QAAQ,OAAO,UAAU,QAAW;AAG/D,YAAI,OAAO,YAAY;AACtB,mBAAS,cAAc,kBAAkB,KAAK,QAAQ,OAAO,OAAO,SAAS,SAAS,KAAK;AAAA,QAC5F,OAAO;AACN,mBAAS,OAAO;AAAA,QACjB;AAGA,YAAI,OAAO,cAAc;AACxB,cAAI,OAAO,iBAAiB,QAAQ;AACnC,gBAAI,CAAC,sBAAsB;AAC1B,oBAAM,cAAc,YAAY,KAAK,QAAQ,gDAAgD;AAAA,YAC9F;AACA,mCAAuB;AAAA,UACxB,WAAW,sBAAsB;AAChC,kBAAM,cAAc,YAAY,KAAK,QAAQ,iEAAiE;AAAA,UAC/G,OAAO;AACN,uCAA2B,cAAc,kBAAkB,KAAK,QAAQ,OAAO,cAAc,SAAS,SAAS,KAAK;AAAA,UACrH;AAAA,QACD;AAGA,YAAI,OAAO,QAAQ;AAClB,gBAAM,KAAK,IAAI,GAAG,MAAM,OAAO,MAAM;AAAA,QACtC;AAEA,YAAI,OAAO,YAAY,OAAO,OAAO,aAAa,UAAU;AAC3D,cAAI,YAAY,cAAc,kBAAkB,KAAK,QAAQ,OAAO,UAAU,SAAS,SAAS,KAAK;AACrG,cAAI,UAAU,CAAC,MAAM,KAAK;AACzB,wBAAY,UAAU,OAAO,CAAC;AAAA,UAC/B;AACA,cAAI,CAAC,cAAc,UAAU,KAAK,QAAQ,SAAS,GAAG;AACrD,kBAAM,cAAc,YAAY,KAAK,QAAQ,kCAAmC,YAAY,kCAAmC,KAAK,cAAc,IAAI,CAAC;AAAA,UACxJ,OAAO;AACN,oBAAQ,MAAM,SAAS,SAAS;AAAA,UACjC;AAAA,QACD,WAAW,OAAO,aAAa,OAAO,OAAO,cAAc,YAAY;AACtE,gBAAM,cAAc,YAAY,KAAK,QAAQ,gCAAgC;AAAA,QAC9E,WAAW,OAAO,MAAM;AACvB,cAAI,OAAO,SAAS,SAAS;AAC5B,gBAAI,MAAM,SAAS,KAAK,OAAO,UAAU;AACxC,oBAAM,cAAc,YAAY,KAAK,QAAQ,4CAC5C,MAAM,QAAQ,MAAM,MAAM,OAAQ,QAAQ,OAAO;AAAA,YACnD,OAAO;AACN,sBAAQ,MAAM,KAAK,KAAK;AAAA,YACzB;AAAA,UACD,WAAW,OAAO,SAAS,QAAQ;AAClC,gBAAI,MAAM,SAAS,GAAG;AACrB,oBAAM,cAAc,YAAY,KAAK,QAAQ,2CAA2C,KAAK,cAAc,IAAI,CAAC;AAAA,YACjH,OAAO;AACN,sBAAQ,MAAM,IAAI;AAAA,YACnB;AAAA,UACD,WAAW,OAAO,SAAS,WAAW;AACrC,oBAAQ,MAAM,OAAO;AAAA,UACtB,OAAO;AACN,gBAAI,YAAY,cAAc,kBAAkB,KAAK,QAAQ,OAAO,MAAM,SAAS,SAAS,KAAK;AACjG,gBAAI,UAAU,CAAC,MAAM,KAAK;AACzB,0BAAY,UAAU,OAAO,CAAC;AAAA,YAC/B;AAEA,gBAAI,CAAC,cAAc,UAAU,KAAK,QAAQ,SAAS,GAAG;AACrD,oBAAM,cAAc,YAAY,KAAK,QAAQ,iCAAkC,YAAY,kCAAmC,KAAK,cAAc,IAAI,CAAC;AAAA,YACvJ,OAAO;AACN,sBAAQ,MAAM,KAAK,SAAS;AAAA,YAC7B;AAAA,UACD;AAAA,QACD;AAEA,YAAI,OAAO,OAAO,OAAQ,OAAO,QAAS,UAAU;AACnD,wBAAc,IAAI,KAAK,QAAQ,KAAK,OAAO,aAAa,OAAO,cAAc,kBAAkB,KAAK,QAAQ,OAAO,KAAK,SAAS,SAAS,KAAK,CAAC;AAAA,QACjJ;AAAA,MACD;AAGA,UAAI,WAAW,MAAM;AACpB,cAAM,cAAc,YAAY,KAAK,QAAQ,oDAAoD,KAAK,cAAc,IAAI,CAAC;AAAA,MAC1H;AAEA,YAAM,qCAAqC,wBAACC,8BAAqC;AAEhF,cAAM,aACL,KAAK,iBAAiB,4BAA4BA,yBAAwB,KACvE,KAAK,iBAAiB,wBAAwBA,yBAAwB,KACtEA;AAGJ,cAAMC,wBAAuB,KAAK,+BAA+B,UAAU;AAE3E,YAAI,MAAM,YAAY;AAErB,gBAAM,aAAa,cAAc,OAAO,GAAG;AAC3C,iBAAO,KAAK,gBAAgB,YAAY,QAAQ,wBAAwB,OAAO,OAAOA,qBAAoB,GAAG,cAAc,KAAK,eAAe;AAAA,QAChJ,OAAO;AACN,iBAAO,wBAAwB,OAAO,OAAOA,qBAAoB;AAAA,QAClE;AAAA,MACD,GAjB2C;AAoB3C,UAAI,MAAM,QAAQ,MAAM,GAAG;AAC1B,YAAI,iBAAiB,cAAc,OAAO,SAAS,GAAG;AACrD,gBAAM,cAAc,YAAY,KAAK,QAAQ,8BAA8B,KAAK,cAAc,IAAI,CAAC;AAAA,QACpG;AACA,YAAI,QAAQ,WAAW,OAAO,SAAS,GAAG;AACzC,gBAAM,cAAc,YAAY,KAAK,QAAQ,4EAA4E,KAAK,cAAc,IAAI,CAAC;AAAA,QAClJ;AACA,YAAI,WAAW;AACf,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,sBAAY,QAAQ,CAAC,EAAE;AAAA,QACxB;AACA,YAAI,aAAa,QAAQ,QAAQ;AAChC,gBAAM,cAAc,YAAY,KAAK,QAAQ,kFAAkF,KAAK,cAAc,IAAI,CAAC;AAAA,QACxJ;AAEA,wBAAgB;AAAA,UACf;AAAA,UACA;AAAA,UACA,QAAQ,CAAC;AAAA,QACV;AACA,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,wBAAc,OAAO,CAAC,IAAI;AAAA,YACzB,QAAQ,OAAO,CAAC;AAAA,YAChB,SAAS,QAAQ,IAAI,CAAC;AAAA,UACvB;AAAA,QACD;AAEA,eAAO,QAAQ;AAEf;AAAA,MACD,OAAO;AAIN,YAAI,WAAW,YAAY;AAC1B,iBAAO,QAAQ;AACf,oBAAU;AACV,oBAAU;AACV,mBAAS;AAIT,cAAI,6BAA6B,MAAM;AACtC,mBAAO,mCAAmC,wBAAwB;AAAA,UACnE;AAAA,QACD;AAGA,YAAI,QAAQ,WAAW,GAAG;AACzB,cAAI,eAAe,KAAK,cAAc,MAAM,SAAS,UAAU,MAAM,UAAU,CAAC,gBAAgB,IAAI,cAAc,OAAO,YAAY,WAAW;AAC/I;AAAA,UACD,OAAO;AACN,kBAAM,cAAc,YAAY,KAAK,QAAQ,uCAAuC,KAAK,cAAc,IAAI,CAAC;AAAA,UAC7G;AAAA,QACD;AAIA,YAAI,YAA2B;AAC/B,YAAI,cAAc,SAAS,MAAM,KAAK,OAAO,QAAQ,WAAW,MAAM,GAAG;AACxE,gBAAM,OAAO,OAAO,OAAO,YAAY,MAAM;AAC7C,gBAAM,UAAU,YAAY,KAAK,QAAQ,OAAO;AAChD,cAAI,CAAC,SAAS;AACb,kBAAM,cAAc,YAAY,KAAK,QAAQ,yDAAyD,OAAO;AAAA,UAC9G;AACA,sBAAY,cAAc,SAAS,QAAQ,QAAQ,IAAI;AAAA,QACxD,OAAO;AACN,gBAAM,QAAS,WAAW,KAAK,KAAK,SAAS,KAAK,OAAO;AACzD,sBAAY,cAAc,SAAS,KAAK;AAAA,QACzC;AAEA,YAAI,OAAO,qBAAqB;AAC/B,0BAAgB,KAAK,OAAO,aAAa,SAAS;AAAA,QACnD;AAAA,MACD;AAEA,UAAI,6BAA6B,MAAM;AACtC,eAAO,mCAAmC,wBAAwB;AAAA,MACnE;AAAA,IACD;AAEA,WAAO,wBAAwB,OAAO,OAAO,oBAAoB;AAAA,EAClE;AAAA,EAEQ,+BAA+B,YAA0C;AAChF,QAAI,CAAC,KAAK,iBAAiB,uBAAuB,UAAU,GAAG;AAC9D,aAAO,IAAI,qBAAqB,YAAY,SAAS;AAAA,IACtD;AAEA,QAAI,eAAe,KAAK,aAAa;AAEpC,WAAK,iBAAiB,6BAA6B,UAAU;AAC7D,gBAAU,qBAAqB,YAAY,UAAU;AACrD,WAAK,mBAAmB,UAAU,IAAI;AAAA,IACvC;AAEA,UAAM,sBAAsB,UAAU,qBAAqB,IAAI,UAAU;AACzE,QAAI,qBAAqB;AACxB,aAAO,IAAI,qBAAqB,YAAY,oBAAoB,gBAAgB,CAAC;AAAA,IAClF;AAEA,WAAO,IAAI,qBAAqB,YAAY,SAAS;AAAA,EACtD;AACD;AAxfa,mBAAN;AAAA,EAU4I;AAAA,GAVtI;AA6fb,SAAS,YAAY,OAA6B,SAAiB;AAClE,MAAI,CAAC,SAAS;AACb,WAAO;AAAA,EACR;AACA,YAAU,cAAc,QAAQ,OAAO,OAAO;AAE9C,QAAM,WAAW,MAAM;AACvB,aAAW,WAAW,UAAU;AAC/B,QAAI,QAAQ,SAAS,SAAS;AAC7B,aAAO,EAAE,OAAO,QAAQ,OAAO,aAAa,cAAc,eAAe,KAAK;AAAA,IAC/E,WACS,QAAQ,UAAU,SAAS;AACnC,aAAO,EAAE,OAAO,QAAQ,OAAO,aAAa,cAAc,eAAe,MAAM;AAAA,IAChF;AAAA,EACD;AACA,SAAO;AACR;AAhBS;",
  "names": ["rule", "enteringEmbeddedLanguage", "embeddedLanguageData"]
}
