{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/standalone/test/browser/monarch.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Token, TokenizationRegistry } from '../../../common/languages.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { LanguageService } from '../../../common/services/languageService.js';\nimport { StandaloneConfigurationService } from '../../browser/standaloneServices.js';\nimport { compile } from '../../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../../common/monarch/monarchLexer.js';\nimport { IMonarchLanguage } from '../../common/monarch/monarchTypes.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\n\nsuite('Monarch', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createMonarchTokenizer(languageService: ILanguageService, languageId: string, language: IMonarchLanguage, configurationService: IConfigurationService): MonarchTokenizer {\n\t\treturn new MonarchTokenizer(languageService, null!, languageId, compile(languageId, language), configurationService);\n\t}\n\n\tfunction getTokens(tokenizer: MonarchTokenizer, lines: string[]): Token[][] {\n\t\tconst actualTokens: Token[][] = [];\n\t\tlet state = tokenizer.getInitialState();\n\t\tfor (const line of lines) {\n\t\t\tconst result = tokenizer.tokenize(line, true, state);\n\t\t\tactualTokens.push(result.tokens);\n\t\t\tstate = result.endState;\n\t\t}\n\t\treturn actualTokens;\n\t}\n\n\ttest('Ensure @rematch and nextEmbedded can be used together in Monarch grammar', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst languageService = disposables.add(new LanguageService());\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tdisposables.add(languageService.registerLanguage({ id: 'sql' }));\n\t\tdisposables.add(TokenizationRegistry.register('sql', disposables.add(createMonarchTokenizer(languageService, 'sql', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[/./, 'token']\n\t\t\t\t]\n\t\t\t}\n\t\t}, configurationService))));\n\t\tconst SQL_QUERY_START = '(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|WITH)';\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test1', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[`(\\\"\\\"\\\")${SQL_QUERY_START}`, [{ 'token': 'string.quote', }, { token: '@rematch', next: '@endStringWithSQL', nextEmbedded: 'sql', },]],\n\t\t\t\t\t[/(\"\"\")$/, [{ token: 'string.quote', next: '@maybeStringIsSQL', },]],\n\t\t\t\t],\n\t\t\t\tmaybeStringIsSQL: [\n\t\t\t\t\t[/(.*)/, {\n\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t[`${SQL_QUERY_START}\\\\b.*`]: { token: '@rematch', next: '@endStringWithSQL', nextEmbedded: 'sql', },\n\t\t\t\t\t\t\t'@default': { token: '@rematch', switchTo: '@endDblDocString', },\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t],\n\t\t\t\tendDblDocString: [\n\t\t\t\t\t['[^\\']+', 'string'],\n\t\t\t\t\t['\\\\\\\\\\'', 'string'],\n\t\t\t\t\t['\\'\\'\\'', 'string', '@popall'],\n\t\t\t\t\t['\\'', 'string']\n\t\t\t\t],\n\t\t\t\tendStringWithSQL: [[/\"\"\"/, { token: 'string.quote', next: '@popall', nextEmbedded: '@pop', },]],\n\t\t\t}\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`mysql_query(\"\"\"SELECT * FROM table_name WHERE ds = '<DATEID>'\"\"\")`,\n\t\t\t`mysql_query(\"\"\"`,\n\t\t\t`SELECT *`,\n\t\t\t`FROM table_name`,\n\t\t\t`WHERE ds = '<DATEID>'`,\n\t\t\t`\"\"\")`,\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'source.test1', 'test1'),\n\t\t\t\tnew Token(12, 'string.quote.test1', 'test1'),\n\t\t\t\tnew Token(15, 'token.sql', 'sql'),\n\t\t\t\tnew Token(61, 'string.quote.test1', 'test1'),\n\t\t\t\tnew Token(64, 'source.test1', 'test1')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'source.test1', 'test1'),\n\t\t\t\tnew Token(12, 'string.quote.test1', 'test1')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'token.sql', 'sql')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'token.sql', 'sql')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'token.sql', 'sql')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'string.quote.test1', 'test1'),\n\t\t\t\tnew Token(3, 'source.test1', 'test1')\n\t\t\t]\n\t\t]);\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#1235: Empty Line Handling', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tconst languageService = disposables.add(new LanguageService());\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{ include: '@comments' },\n\t\t\t\t],\n\n\t\t\t\tcomments: [\n\t\t\t\t\t[/\\/\\/$/, 'comment'], // empty single-line comment\n\t\t\t\t\t[/\\/\\//, 'comment', '@comment_cpp'],\n\t\t\t\t],\n\n\t\t\t\tcomment_cpp: [\n\t\t\t\t\t[/(?:[^\\\\]|(?:\\\\.))+$/, 'comment', '@pop'],\n\t\t\t\t\t[/.+$/, 'comment'],\n\t\t\t\t\t[/$/, 'comment', '@pop']\n\t\t\t\t\t// No possible rule to detect an empty line and @pop?\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`// This comment \\\\`,\n\t\t\t`   continues on the following line`,\n\t\t\t``,\n\t\t\t`// This comment does NOT continue \\\\\\\\`,\n\t\t\t`   because the escape char was itself escaped`,\n\t\t\t``,\n\t\t\t`// This comment DOES continue because \\\\\\\\\\\\`,\n\t\t\t`   the 1st '\\\\' escapes the 2nd; the 3rd escapes EOL`,\n\t\t\t``,\n\t\t\t`// This comment continues to the following line \\\\`,\n\t\t\t``,\n\t\t\t`But the line was empty. This line should not be commented.`,\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[new Token(0, 'source.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'source.test', 'test')]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#2265: Exit a state at end of line', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tconst languageService = disposables.add(new LanguageService());\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tincludeLF: true,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[/^\\*/, '', '@inner'],\n\t\t\t\t\t[/\\:\\*/, '', '@inner'],\n\t\t\t\t\t[/[^*:]+/, 'string'],\n\t\t\t\t\t[/[*:]/, 'string']\n\t\t\t\t],\n\t\t\t\tinner: [\n\t\t\t\t\t[/\\n/, '', '@pop'],\n\t\t\t\t\t[/\\d+/, 'number'],\n\t\t\t\t\t[/[^\\d]+/, '']\n\t\t\t\t]\n\t\t\t}\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`PRINT 10 * 20`,\n\t\t\t`*FX200, 3`,\n\t\t\t`PRINT 2*3:*FX200, 3`\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'string.test', 'test'),\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, '', 'test'),\n\t\t\t\tnew Token(3, 'number.test', 'test'),\n\t\t\t\tnew Token(6, '', 'test'),\n\t\t\t\tnew Token(8, 'number.test', 'test'),\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'string.test', 'test'),\n\t\t\t\tnew Token(9, '', 'test'),\n\t\t\t\tnew Token(13, 'number.test', 'test'),\n\t\t\t\tnew Token(16, '', 'test'),\n\t\t\t\tnew Token(18, 'number.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('issue #115662: monarchCompile function need an extra option which can control replacement', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\tconst tokenizer1 = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\tuselessReplaceKey1: '@uselessReplaceKey2',\n\t\t\tuselessReplaceKey2: '@uselessReplaceKey3',\n\t\t\tuselessReplaceKey3: '@uselessReplaceKey4',\n\t\t\tuselessReplaceKey4: '@uselessReplaceKey5',\n\t\t\tuselessReplaceKey5: '@ham',\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /@\\w+/.test('@ham')\n\t\t\t\t\t\t\t? new RegExp(`^${'@uselessReplaceKey1'}$`)\n\t\t\t\t\t\t\t: new RegExp(`^${'@ham'}$`),\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst tokenizer2 = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /@@ham/,\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`@ham`\n\t\t];\n\n\t\tconst actualTokens1 = getTokens(tokenizer1, lines);\n\t\tassert.deepStrictEqual(actualTokens1, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tconst actualTokens2 = getTokens(tokenizer2, lines);\n\t\tassert.deepStrictEqual(actualTokens2, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#2424: Allow to target @@', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /@@@@/,\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`@@`\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#3025: Check maxTokenizationLineLength before tokenizing', async () => {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\t// Set maxTokenizationLineLength to 4 so that \"ham\" works but \"hamham\" would fail\n\t\tawait configurationService.updateValue('editor.maxTokenizationLineLength', 4);\n\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /ham/,\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t'ham', // length 3, should be tokenized\n\t\t\t'hamham' // length 6, should NOT be tokenized\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t], [\n\t\t\t\tnew Token(0, '', 'test')\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#3128: allow state access within rules', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService(new NullLogService());\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\tencoding: /u|u8|U|L/,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t// C++ 11 Raw String\n\t\t\t\t\t[/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: 'string.raw.begin', next: '@raw.$1' }],\n\t\t\t\t],\n\n\t\t\t\traw: [\n\t\t\t\t\t[/.*\\)$S2\\\"/, 'string.raw', '@pop'],\n\t\t\t\t\t[/.*/, 'string.raw']\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`int main(){`,\n\t\t\t``,\n\t\t\t`\tauto s = R\"\"\"\"(`,\n\t\t\t`\tHello World`,\n\t\t\t`\t)\"\"\"\";`,\n\t\t\t``,\n\t\t\t`\tstd::cout << \"hello\";`,\n\t\t\t``,\n\t\t\t`}`,\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[new Token(0, 'source.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'source.test', 'test'), new Token(10, 'string.raw.begin.test', 'test')],\n\t\t\t[new Token(0, 'string.raw.test', 'test')],\n\t\t\t[new Token(0, 'string.raw.test', 'test'), new Token(6, 'source.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'source.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'source.test', 'test')],\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
