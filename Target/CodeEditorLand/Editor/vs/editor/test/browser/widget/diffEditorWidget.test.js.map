{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/widget/diffEditorWidget.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { UnchangedRegion } from '../../../browser/widget/diffEditor/diffEditorViewModel.js';\nimport { LineRange } from '../../../common/core/lineRange.js';\nimport { DetailedLineRangeMapping } from '../../../common/diff/rangeMapping.js';\n\nsuite('DiffEditorWidget2', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('UnchangedRegion', () => {\n\t\tfunction serialize(regions: UnchangedRegion[]): unknown {\n\t\t\treturn regions.map(r => `${r.originalUnchangedRange} - ${r.modifiedUnchangedRange}`);\n\t\t}\n\n\t\ttest('Everything changed', () => {\n\t\t\tassert.deepStrictEqual(serialize(UnchangedRegion.fromDiffs(\n\t\t\t\t[new DetailedLineRangeMapping(new LineRange(1, 10), new LineRange(1, 10), [])],\n\t\t\t\t10,\n\t\t\t\t10,\n\t\t\t\t3,\n\t\t\t\t3,\n\t\t\t)), []);\n\t\t});\n\n\t\ttest('Nothing changed', () => {\n\t\t\tassert.deepStrictEqual(serialize(UnchangedRegion.fromDiffs(\n\t\t\t\t[],\n\t\t\t\t10,\n\t\t\t\t10,\n\t\t\t\t3,\n\t\t\t\t3,\n\t\t\t)), [\n\t\t\t\t\"[1,11) - [1,11)\"\n\t\t\t]);\n\t\t});\n\n\t\ttest('Change in the middle', () => {\n\t\t\tassert.deepStrictEqual(serialize(UnchangedRegion.fromDiffs(\n\t\t\t\t[new DetailedLineRangeMapping(new LineRange(50, 60), new LineRange(50, 60), [])],\n\t\t\t\t100,\n\t\t\t\t100,\n\t\t\t\t3,\n\t\t\t\t3,\n\t\t\t)), ([\n\t\t\t\t'[1,47) - [1,47)',\n\t\t\t\t'[63,101) - [63,101)'\n\t\t\t]));\n\t\t});\n\n\t\ttest('Change at the end', () => {\n\t\t\tassert.deepStrictEqual(serialize(UnchangedRegion.fromDiffs(\n\t\t\t\t[new DetailedLineRangeMapping(new LineRange(99, 100), new LineRange(100, 100), [])],\n\t\t\t\t100,\n\t\t\t\t100,\n\t\t\t\t3,\n\t\t\t\t3,\n\t\t\t)), ([\"[1,96) - [1,96)\"]));\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAC1B,SAAS,gCAAgC;AAEzC,MAAM,qBAAqB,MAAM;AAEhC,0CAAwC;AAExC,QAAM,mBAAmB,MAAM;AAC9B,aAAS,UAAU,SAAqC;AACvD,aAAO,QAAQ,IAAI,OAAK,GAAG,EAAE,sBAAsB,MAAM,EAAE,sBAAsB,EAAE;AAAA,IACpF;AAFS;AAIT,SAAK,sBAAsB,MAAM;AAChC,aAAO,gBAAgB,UAAU,gBAAgB;AAAA,QAChD,CAAC,IAAI,yBAAyB,IAAI,UAAU,GAAG,EAAE,GAAG,IAAI,UAAU,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAAA,QAC7E;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC,GAAG,CAAC,CAAC;AAAA,IACP,CAAC;AAED,SAAK,mBAAmB,MAAM;AAC7B,aAAO,gBAAgB,UAAU,gBAAgB;AAAA,QAChD,CAAC;AAAA,QACD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC,GAAG;AAAA,QACH;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAED,SAAK,wBAAwB,MAAM;AAClC,aAAO,gBAAgB,UAAU,gBAAgB;AAAA,QAChD,CAAC,IAAI,yBAAyB,IAAI,UAAU,IAAI,EAAE,GAAG,IAAI,UAAU,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;AAAA,QAC/E;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC,GAAI;AAAA,QACJ;AAAA,QACA;AAAA,MACD,CAAE;AAAA,IACH,CAAC;AAED,SAAK,qBAAqB,MAAM;AAC/B,aAAO,gBAAgB,UAAU,gBAAgB;AAAA,QAChD,CAAC,IAAI,yBAAyB,IAAI,UAAU,IAAI,GAAG,GAAG,IAAI,UAAU,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;AAAA,QAClF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC,GAAI,CAAC,iBAAiB,CAAE;AAAA,IAC1B,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
