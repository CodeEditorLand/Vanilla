{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/testCommand.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IRange } from '../../common/core/range.js';\nimport { Selection, ISelection } from '../../common/core/selection.js';\nimport { ICommand, IEditOperationBuilder } from '../../common/editorCommon.js';\nimport { ITextModel } from '../../common/model.js';\nimport { instantiateTestCodeEditor, createCodeEditorServices } from './testCodeEditor.js';\nimport { instantiateTextModel } from '../common/testTextModel.js';\nimport { ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ISingleEditOperation } from '../../common/core/editOperation.js';\n\nexport function testCommand(\n\tlines: string[],\n\tlanguageId: string | null,\n\tselection: Selection,\n\tcommandFactory: (accessor: ServicesAccessor, selection: Selection) => ICommand,\n\texpectedLines: string[],\n\texpectedSelection: Selection,\n\tforceTokenization?: boolean,\n\tprepare?: (accessor: ServicesAccessor, disposables: DisposableStore) => void\n): void {\n\tconst disposables = new DisposableStore();\n\tconst instantiationService = createCodeEditorServices(disposables);\n\tif (prepare) {\n\t\tinstantiationService.invokeFunction(prepare, disposables);\n\t}\n\tconst model = disposables.add(instantiateTextModel(instantiationService, lines.join('\\n'), languageId));\n\tconst editor = disposables.add(instantiateTestCodeEditor(instantiationService, model));\n\tconst viewModel = editor.getViewModel()!;\n\n\tif (forceTokenization) {\n\t\tmodel.tokenization.forceTokenization(model.getLineCount());\n\t}\n\n\tviewModel.setSelections('tests', [selection]);\n\n\tconst command = instantiationService.invokeFunction((accessor) => commandFactory(accessor, viewModel.getSelection()));\n\tviewModel.executeCommand(command, 'tests');\n\n\tassert.deepStrictEqual(model.getLinesContent(), expectedLines);\n\n\tconst actualSelection = viewModel.getSelection();\n\tassert.deepStrictEqual(actualSelection.toString(), expectedSelection.toString());\n\n\tdisposables.dispose();\n}\n\n/**\n * Extract edit operations if command `command` were to execute on model `model`\n */\nexport function getEditOperation(model: ITextModel, command: ICommand): ISingleEditOperation[] {\n\tconst operations: ISingleEditOperation[] = [];\n\tconst editOperationBuilder: IEditOperationBuilder = {\n\t\taddEditOperation: (range: IRange, text: string, forceMoveMarkers: boolean = false) => {\n\t\t\toperations.push({\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers\n\t\t\t});\n\t\t},\n\n\t\taddTrackedEditOperation: (range: IRange, text: string, forceMoveMarkers: boolean = false) => {\n\t\t\toperations.push({\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers\n\t\t\t});\n\t\t},\n\n\n\t\ttrackSelection: (selection: ISelection) => {\n\t\t\treturn '';\n\t\t}\n\t};\n\tcommand.getEditOperations(model, editOperationBuilder);\n\treturn operations;\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,cAAc;AACvB,SAAS,WAAW,kBAAkB;AACtC,SAAS,UAAU,6BAA6B;AAChD,SAAS,kBAAkB;AAC3B,SAAS,2BAA2B,gCAAgC;AACpE,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,4BAA4B;AAE9B,SAAS,YACf,OACA,YACA,WACA,gBACA,eACA,mBACA,mBACA,SACO;AACP,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,uBAAuB,yBAAyB,WAAW;AACjE,MAAI,SAAS;AACZ,yBAAqB,eAAe,SAAS,WAAW;AAAA,EACzD;AACA,QAAM,QAAQ,YAAY,IAAI,qBAAqB,sBAAsB,MAAM,KAAK,IAAI,GAAG,UAAU,CAAC;AACtG,QAAM,SAAS,YAAY,IAAI,0BAA0B,sBAAsB,KAAK,CAAC;AACrF,QAAM,YAAY,OAAO,aAAa;AAEtC,MAAI,mBAAmB;AACtB,UAAM,aAAa,kBAAkB,MAAM,aAAa,CAAC;AAAA,EAC1D;AAEA,YAAU,cAAc,SAAS,CAAC,SAAS,CAAC;AAE5C,QAAM,UAAU,qBAAqB,eAAe,CAAC,aAAa,eAAe,UAAU,UAAU,aAAa,CAAC,CAAC;AACpH,YAAU,eAAe,SAAS,OAAO;AAEzC,SAAO,gBAAgB,MAAM,gBAAgB,GAAG,aAAa;AAE7D,QAAM,kBAAkB,UAAU,aAAa;AAC/C,SAAO,gBAAgB,gBAAgB,SAAS,GAAG,kBAAkB,SAAS,CAAC;AAE/E,cAAY,QAAQ;AACrB;AAlCgB;AAuCT,SAAS,iBAAiB,OAAmB,SAA2C;AAC9F,QAAM,aAAqC,CAAC;AAC5C,QAAM,uBAA8C;AAAA,IACnD,kBAAkB,wBAAC,OAAe,MAAc,mBAA4B,UAAU;AACrF,iBAAW,KAAK;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF,GANkB;AAAA,IAQlB,yBAAyB,wBAAC,OAAe,MAAc,mBAA4B,UAAU;AAC5F,iBAAW,KAAK;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF,GANyB;AAAA,IASzB,gBAAgB,wBAAC,cAA0B;AAC1C,aAAO;AAAA,IACR,GAFgB;AAAA,EAGjB;AACA,UAAQ,kBAAkB,OAAO,oBAAoB;AACrD,SAAO;AACR;AA1BgB;",
  "names": []
}
