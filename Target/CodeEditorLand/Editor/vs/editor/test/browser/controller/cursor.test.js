import a from"assert";import{DisposableStore as ct}from"../../../../base/common/lifecycle.js";import"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../../base/test/common/utils.js";import{CoreEditingCommands as c,CoreNavigationCommands as C}from"../../../browser/coreCommands.js";import"../../../common/config/editorOptions.js";import{EditOperation as ot}from"../../../common/core/editOperation.js";import{Position as g}from"../../../common/core/position.js";import{Range as N}from"../../../common/core/range.js";import{Selection as s}from"../../../common/core/selection.js";import"../../../common/cursorEvents.js";import"../../../common/editorCommon.js";import{MetadataConsts as at,StandardTokenType as W}from"../../../common/encodedTokenAttributes.js";import{EncodedTokenizationResult as M,TokenizationRegistry as tt}from"../../../common/languages.js";import{ILanguageService as gt}from"../../../common/languages/language.js";import{IndentAction as _}from"../../../common/languages/languageConfiguration.js";import{ILanguageConfigurationService as mt}from"../../../common/languages/languageConfigurationRegistry.js";import{NullState as rt}from"../../../common/languages/nullTokenize.js";import{EndOfLinePreference as S,EndOfLineSequence as G}from"../../../common/model.js";import{TextModel as Ct}from"../../../common/model/textModel.js";import"../../../common/viewModel/viewModelImpl.js";import{OutgoingViewModelEventKind as ut}from"../../../common/viewModelEventDispatcher.js";import{createCodeEditorServices as pt,instantiateTestCodeEditor as dt,withTestCodeEditor as O}from"../testCodeEditor.js";import{createTextModel as J,instantiateTextModel as Et}from"../../common/testTextModel.js";import"../../../../platform/instantiation/test/common/instantiationServiceMock.js";function l(d,m,p,k,T=!1){T?C.MoveToSelect.runCoreEditorCommand(m,{position:new g(p,k)}):C.MoveTo.runCoreEditorCommand(m,{position:new g(p,k)})}function U(d,m,p=!1){p?C.CursorLeftSelect.runCoreEditorCommand(m,{}):C.CursorLeft.runCoreEditorCommand(m,{})}function D(d,m,p=!1){p?C.CursorRightSelect.runCoreEditorCommand(m,{}):C.CursorRight.runCoreEditorCommand(m,{})}function R(d,m,p=!1){p?C.CursorDownSelect.runCoreEditorCommand(m,{}):C.CursorDown.runCoreEditorCommand(m,{})}function F(d,m,p=!1){p?C.CursorUpSelect.runCoreEditorCommand(m,{}):C.CursorUp.runCoreEditorCommand(m,{})}function B(d,m,p=!1){p?C.CursorHomeSelect.runCoreEditorCommand(m,{}):C.CursorHome.runCoreEditorCommand(m,{})}function $(d,m,p=!1){p?C.CursorEndSelect.runCoreEditorCommand(m,{}):C.CursorEnd.runCoreEditorCommand(m,{})}function Q(d,m,p=!1){p?C.CursorTopSelect.runCoreEditorCommand(m,{}):C.CursorTop.runCoreEditorCommand(m,{})}function Z(d,m,p=!1){p?C.CursorBottomSelect.runCoreEditorCommand(m,{}):C.CursorBottom.runCoreEditorCommand(m,{})}function r(d,m){let p;m instanceof g?p=[new s(m.lineNumber,m.column,m.lineNumber,m.column)]:m instanceof s?p=[m]:p=m;const k=d.getSelections().map(K=>K.toString()),T=p.map(K=>K.toString());a.deepStrictEqual(k,T)}suite("Editor Controller - Cursor",()=>{const d="    	My First Line	 ",m="	My Second Line",p="    Third Line\u{1F436}",k="",T="1",K=d+`\r
`+m+`
`+p+`
`+k+`\r
`+T;function y(u){O(K,{},(o,z)=>{u(o,z)})}v(),test("cursor initialized",()=>{y((u,o)=>{r(o,new g(1,1))})}),test("no move",()=>{y((u,o)=>{l(u,o,1,1),r(o,new g(1,1))})}),test("move",()=>{y((u,o)=>{l(u,o,1,2),r(o,new g(1,2))})}),test("move in selection mode",()=>{y((u,o)=>{l(u,o,1,2,!0),r(o,new s(1,1,1,2))})}),test("move beyond line end",()=>{y((u,o)=>{l(u,o,1,25),r(o,new g(1,d.length+1))})}),test("move empty line",()=>{y((u,o)=>{l(u,o,4,20),r(o,new g(4,1))})}),test("move one char line",()=>{y((u,o)=>{l(u,o,5,20),r(o,new g(5,2))})}),test("selection down",()=>{y((u,o)=>{l(u,o,2,1,!0),r(o,new s(1,1,2,1))})}),test("move and then select",()=>{y((u,o)=>{l(u,o,2,3),r(o,new g(2,3)),l(u,o,2,15,!0),r(o,new s(2,3,2,15)),l(u,o,1,2,!0),r(o,new s(2,3,1,2))})}),test("move left on top left position",()=>{y((u,o)=>{U(u,o),r(o,new g(1,1))})}),test("move left",()=>{y((u,o)=>{l(u,o,1,3),r(o,new g(1,3)),U(u,o),r(o,new g(1,2))})}),test("move left with surrogate pair",()=>{y((u,o)=>{l(u,o,3,17),r(o,new g(3,17)),U(u,o),r(o,new g(3,15))})}),test("move left goes to previous row",()=>{y((u,o)=>{l(u,o,2,1),r(o,new g(2,1)),U(u,o),r(o,new g(1,21))})}),test("move left selection",()=>{y((u,o)=>{l(u,o,2,1),r(o,new g(2,1)),U(u,o,!0),r(o,new s(2,1,1,21))})}),test("move right on bottom right position",()=>{y((u,o)=>{l(u,o,5,2),r(o,new g(5,2)),D(u,o),r(o,new g(5,2))})}),test("move right",()=>{y((u,o)=>{l(u,o,1,3),r(o,new g(1,3)),D(u,o),r(o,new g(1,4))})}),test("move right with surrogate pair",()=>{y((u,o)=>{l(u,o,3,15),r(o,new g(3,15)),D(u,o),r(o,new g(3,17))})}),test("move right goes to next row",()=>{y((u,o)=>{l(u,o,1,21),r(o,new g(1,21)),D(u,o),r(o,new g(2,1))})}),test("move right selection",()=>{y((u,o)=>{l(u,o,1,21),r(o,new g(1,21)),D(u,o,!0),r(o,new s(1,21,2,1))})}),test("move down",()=>{y((u,o)=>{R(u,o),r(o,new g(2,1)),R(u,o),r(o,new g(3,1)),R(u,o),r(o,new g(4,1)),R(u,o),r(o,new g(5,1)),R(u,o),r(o,new g(5,2))})}),test("move down with selection",()=>{y((u,o)=>{R(u,o,!0),r(o,new s(1,1,2,1)),R(u,o,!0),r(o,new s(1,1,3,1)),R(u,o,!0),r(o,new s(1,1,4,1)),R(u,o,!0),r(o,new s(1,1,5,1)),R(u,o,!0),r(o,new s(1,1,5,2))})}),test("move down with tabs",()=>{y((u,o)=>{l(u,o,1,5),r(o,new g(1,5)),R(u,o),r(o,new g(2,2)),R(u,o),r(o,new g(3,5)),R(u,o),r(o,new g(4,1)),R(u,o),r(o,new g(5,2))})}),test("move up",()=>{y((u,o)=>{l(u,o,3,5),r(o,new g(3,5)),F(u,o),r(o,new g(2,2)),F(u,o),r(o,new g(1,5))})}),test("move up with selection",()=>{y((u,o)=>{l(u,o,3,5),r(o,new g(3,5)),F(u,o,!0),r(o,new s(3,5,2,2)),F(u,o,!0),r(o,new s(3,5,1,5))})}),test("move up and down with tabs",()=>{y((u,o)=>{l(u,o,1,5),r(o,new g(1,5)),R(u,o),R(u,o),R(u,o),R(u,o),r(o,new g(5,2)),F(u,o),r(o,new g(4,1)),F(u,o),r(o,new g(3,5)),F(u,o),r(o,new g(2,2)),F(u,o),r(o,new g(1,5))})}),test("move up and down with end of lines starting from a long one",()=>{y((u,o)=>{$(u,o),r(o,new g(1,d.length+1)),$(u,o),r(o,new g(1,d.length+1)),R(u,o),r(o,new g(2,m.length+1)),R(u,o),r(o,new g(3,p.length+1)),R(u,o),r(o,new g(4,k.length+1)),R(u,o),r(o,new g(5,T.length+1)),F(u,o),F(u,o),F(u,o),F(u,o),r(o,new g(1,d.length+1))})}),test("issue #44465: cursor position not correct when move",()=>{y((u,o)=>{o.setSelections("test",[new s(1,5,1,5)]),F(u,o),r(o,new g(1,1)),R(u,o),r(o,new g(2,2)),F(u,o),r(o,new g(1,5)),F(u,o),r(o,new g(1,1)),F(u,o),r(o,new g(1,1)),R(u,o),r(o,new g(2,1))})}),test("issue #144041: Cursor up/down works",()=>{const u=J(["Word1 Word2 Word3 Word4","Word5 Word6 Word7 Word8"].join(`
`));O(u,{wrappingIndent:"indent",wordWrap:"wordWrapColumn",wordWrapColumn:20},(o,z)=>{z.setSelections("test",[new s(1,1,1,1)]);const P=[];function V(){P.push(z.getCursorStates()[0].viewState.position.toString())}V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),a.deepStrictEqual(P,["(1,1)","(2,5)","(3,1)","(4,5)","(4,10)","(3,1)","(2,5)","(1,1)","(1,1)"])}),u.dispose()}),test("issue #140195: Cursor up/down makes progress",()=>{const u=J(["Word1 Word2 Word3 Word4","Word5 Word6 Word7 Word8"].join(`
`));O(u,{wrappingIndent:"indent",wordWrap:"wordWrapColumn",wordWrapColumn:20},(o,z)=>{o.changeDecorations(X=>{X.deltaDecorations([],[{range:new N(1,22,1,22),options:{showIfCollapsed:!0,description:"test",after:{content:"some very very very very very very very very long text"}}}])}),z.setSelections("test",[new s(1,1,1,1)]);const P=[];function V(){P.push(z.getCursorStates()[0].viewState.position.toString())}V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorDown.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),C.CursorUp.runEditorCommand(null,o,null),V(),a.deepStrictEqual(P,["(1,1)","(2,5)","(5,19)","(6,1)","(7,5)","(6,1)","(2,8)","(1,1)","(1,1)"])}),u.dispose()}),test("move to beginning of line",()=>{y((u,o)=>{B(u,o),r(o,new g(1,6)),B(u,o),r(o,new g(1,1))})}),test("move to beginning of line from within line",()=>{y((u,o)=>{l(u,o,1,8),B(u,o),r(o,new g(1,6)),B(u,o),r(o,new g(1,1))})}),test("move to beginning of line from whitespace at beginning of line",()=>{y((u,o)=>{l(u,o,1,2),B(u,o),r(o,new g(1,6)),B(u,o),r(o,new g(1,1))})}),test("move to beginning of line from within line selection",()=>{y((u,o)=>{l(u,o,1,8),B(u,o,!0),r(o,new s(1,8,1,6)),B(u,o,!0),r(o,new s(1,8,1,1))})}),test("move to beginning of line with selection multiline forward",()=>{y((u,o)=>{l(u,o,1,8),l(u,o,3,9,!0),B(u,o,!1),r(o,new s(3,5,3,5))})}),test("move to beginning of line with selection multiline backward",()=>{y((u,o)=>{l(u,o,3,9),l(u,o,1,8,!0),B(u,o,!1),r(o,new s(1,6,1,6))})}),test("move to beginning of line with selection single line forward",()=>{y((u,o)=>{l(u,o,3,2),l(u,o,3,9,!0),B(u,o,!1),r(o,new s(3,5,3,5))})}),test("move to beginning of line with selection single line backward",()=>{y((u,o)=>{l(u,o,3,9),l(u,o,3,2,!0),B(u,o,!1),r(o,new s(3,5,3,5))})}),test('issue #15401: "End" key is behaving weird when text is selected part 1',()=>{y((u,o)=>{l(u,o,1,8),l(u,o,3,9,!0),B(u,o,!1),r(o,new s(3,5,3,5))})}),test("issue #17011: Shift+home/end now go to the end of the selection start's line, not the selection's end",()=>{y((u,o)=>{l(u,o,1,8),l(u,o,3,9,!0),B(u,o,!0),r(o,new s(1,8,3,5))})}),test("move to end of line",()=>{y((u,o)=>{$(u,o),r(o,new g(1,d.length+1)),$(u,o),r(o,new g(1,d.length+1))})}),test("move to end of line from within line",()=>{y((u,o)=>{l(u,o,1,6),$(u,o),r(o,new g(1,d.length+1)),$(u,o),r(o,new g(1,d.length+1))})}),test("move to end of line from whitespace at end of line",()=>{y((u,o)=>{l(u,o,1,20),$(u,o),r(o,new g(1,d.length+1)),$(u,o),r(o,new g(1,d.length+1))})}),test("move to end of line from within line selection",()=>{y((u,o)=>{l(u,o,1,6),$(u,o,!0),r(o,new s(1,6,1,d.length+1)),$(u,o,!0),r(o,new s(1,6,1,d.length+1))})}),test("move to end of line with selection multiline forward",()=>{y((u,o)=>{l(u,o,1,1),l(u,o,3,9,!0),$(u,o,!1),r(o,new s(3,17,3,17))})}),test("move to end of line with selection multiline backward",()=>{y((u,o)=>{l(u,o,3,9),l(u,o,1,1,!0),$(u,o,!1),r(o,new s(1,21,1,21))})}),test("move to end of line with selection single line forward",()=>{y((u,o)=>{l(u,o,3,1),l(u,o,3,9,!0),$(u,o,!1),r(o,new s(3,17,3,17))})}),test("move to end of line with selection single line backward",()=>{y((u,o)=>{l(u,o,3,9),l(u,o,3,1,!0),$(u,o,!1),r(o,new s(3,17,3,17))})}),test('issue #15401: "End" key is behaving weird when text is selected part 2',()=>{y((u,o)=>{l(u,o,1,1),l(u,o,3,9,!0),$(u,o,!1),r(o,new s(3,17,3,17))})}),test("move to beginning of buffer",()=>{y((u,o)=>{Q(u,o),r(o,new g(1,1))})}),test("move to beginning of buffer from within first line",()=>{y((u,o)=>{l(u,o,1,3),Q(u,o),r(o,new g(1,1))})}),test("move to beginning of buffer from within another line",()=>{y((u,o)=>{l(u,o,3,3),Q(u,o),r(o,new g(1,1))})}),test("move to beginning of buffer from within first line selection",()=>{y((u,o)=>{l(u,o,1,3),Q(u,o,!0),r(o,new s(1,3,1,1))})}),test("move to beginning of buffer from within another line selection",()=>{y((u,o)=>{l(u,o,3,3),Q(u,o,!0),r(o,new s(3,3,1,1))})}),test("move to end of buffer",()=>{y((u,o)=>{Z(u,o),r(o,new g(5,T.length+1))})}),test("move to end of buffer from within last line",()=>{y((u,o)=>{l(u,o,5,1),Z(u,o),r(o,new g(5,T.length+1))})}),test("move to end of buffer from within another line",()=>{y((u,o)=>{l(u,o,3,3),Z(u,o),r(o,new g(5,T.length+1))})}),test("move to end of buffer from within last line selection",()=>{y((u,o)=>{l(u,o,5,1),Z(u,o,!0),r(o,new s(5,1,5,T.length+1))})}),test("move to end of buffer from within another line selection",()=>{y((u,o)=>{l(u,o,3,3),Z(u,o,!0),r(o,new s(3,3,5,T.length+1))})}),test("select all",()=>{y((u,o)=>{C.SelectAll.runCoreEditorCommand(o,{}),r(o,new s(1,1,5,T.length+1))})}),test("no move doesn't trigger event",()=>{y((u,o)=>{const z=o.onEvent(P=>{a.ok(!1,"was not expecting event")});l(u,o,1,1),z.dispose()})}),test("move eventing",()=>{y((u,o)=>{let z=0;const P=o.onEvent(V=>{V.kind===ut.CursorStateChanged&&(z++,a.deepStrictEqual(V.selections,[new s(1,2,1,2)]))});l(u,o,1,2),a.strictEqual(z,1,"receives 1 event"),P.dispose()})}),test("move in selection mode eventing",()=>{y((u,o)=>{let z=0;const P=o.onEvent(V=>{V.kind===ut.CursorStateChanged&&(z++,a.deepStrictEqual(V.selections,[new s(1,1,1,2)]))});l(u,o,1,2,!0),a.strictEqual(z,1,"receives 1 event"),P.dispose()})}),test("saveState & restoreState",()=>{y((u,o)=>{l(u,o,2,1,!0),r(o,new s(1,1,2,1));const z=JSON.stringify(o.saveCursorState());l(u,o,1,1,!1),r(o,new g(1,1)),o.restoreCursorState(JSON.parse(z)),r(o,new s(1,1,2,1))})}),test("Independent model edit 1",()=>{y((u,o)=>{l(u,o,2,16,!0),u.getModel().applyEdits([ot.delete(new N(2,1,2,2))]),r(o,new s(1,1,2,15))})}),test("column select 1",()=>{O(["	private compute(a:number): boolean {","		if (a + 3 === 0 || a + 5 === 0) {","			return false;","		}","	}"],{},(u,o)=>{l(u,o,1,7,!1),r(o,new g(1,7)),C.ColumnSelect.runCoreEditorCommand(o,{position:new g(4,4),viewPosition:new g(4,4),mouseColumn:15,doColumnSelect:!0});const z=[new s(1,7,1,12),new s(2,4,2,9),new s(3,3,3,6),new s(4,4,4,4)];r(o,z)})}),test("grapheme breaking",()=>{O(["abcabc","a\u0303a\u0303a\u0303a\u0303a\u0303a\u0303","\u8FBB\u{E0100}\u8FBB\u{E0100}\u8FBB\u{E0100}","\u0BAA\u0BC1"],{},(u,o)=>{o.setSelections("test",[new s(2,1,2,1)]),D(u,o),r(o,new g(2,3)),U(u,o),r(o,new g(2,1)),o.setSelections("test",[new s(3,1,3,1)]),D(u,o),r(o,new g(3,4)),U(u,o),r(o,new g(3,1)),o.setSelections("test",[new s(4,1,4,1)]),D(u,o),r(o,new g(4,3)),U(u,o),r(o,new g(4,1)),o.setSelections("test",[new s(1,3,1,3)]),R(u,o),r(o,new g(2,5)),R(u,o),r(o,new g(3,4)),F(u,o),r(o,new g(2,5)),F(u,o),r(o,new g(1,3))})}),test("issue #4905 - column select is biased to the right",()=>{O(['var gulp = require("gulp");','var path = require("path");','var rimraf = require("rimraf");','var isarray = require("isarray");','var merge = require("merge-stream");','var concat = require("gulp-concat");','var newer = require("gulp-newer");'].join(`
`),{},(u,o)=>{l(u,o,1,4,!1),r(o,new g(1,4)),C.ColumnSelect.runCoreEditorCommand(o,{position:new g(4,1),viewPosition:new g(4,1),mouseColumn:1,doColumnSelect:!0}),r(o,[new s(1,4,1,1),new s(2,4,2,1),new s(3,4,3,1),new s(4,4,4,1)])})}),test("issue #20087: column select with mouse",()=>{O(['<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" Key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SoMEKEy" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" valuE="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="00X"/>'].join(`
`),{},(u,o)=>{l(u,o,10,10,!1),r(o,new g(10,10)),C.ColumnSelect.runCoreEditorCommand(o,{position:new g(1,1),viewPosition:new g(1,1),mouseColumn:1,doColumnSelect:!0}),r(o,[new s(10,10,10,1),new s(9,10,9,1),new s(8,10,8,1),new s(7,10,7,1),new s(6,10,6,1),new s(5,10,5,1),new s(4,10,4,1),new s(3,10,3,1),new s(2,10,2,1),new s(1,10,1,1)]),C.ColumnSelect.runCoreEditorCommand(o,{position:new g(1,1),viewPosition:new g(1,1),mouseColumn:1,doColumnSelect:!0}),r(o,[new s(10,10,10,1),new s(9,10,9,1),new s(8,10,8,1),new s(7,10,7,1),new s(6,10,6,1),new s(5,10,5,1),new s(4,10,4,1),new s(3,10,3,1),new s(2,10,2,1),new s(1,10,1,1)])})}),test("issue #20087: column select with keyboard",()=>{O(['<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" Key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SoMEKEy" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" valuE="000"/>','<property id="SomeThing" key="SomeKey" value="000"/>','<property id="SomeThing" key="SomeKey" value="00X"/>'].join(`
`),{},(u,o)=>{l(u,o,10,10,!1),r(o,new g(10,10)),C.CursorColumnSelectLeft.runCoreEditorCommand(o,{}),r(o,[new s(10,10,10,9)]),C.CursorColumnSelectLeft.runCoreEditorCommand(o,{}),r(o,[new s(10,10,10,8)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(10,10,10,9)]),C.CursorColumnSelectUp.runCoreEditorCommand(o,{}),r(o,[new s(10,10,10,9),new s(9,10,9,9)]),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),r(o,[new s(10,10,10,9)])})}),test("issue #118062: Column selection cannot select first position of a line",()=>{O(["hello world"].join(`
`),{},(u,o)=>{l(u,o,1,2,!1),r(o,new g(1,2)),C.CursorColumnSelectLeft.runCoreEditorCommand(o,{}),r(o,[new s(1,2,1,1)])})}),test("column select with keyboard",()=>{O(['var gulp = require("gulp");','var path = require("path");','var rimraf = require("rimraf");','var isarray = require("isarray");','var merge = require("merge-stream");','var concat = require("gulp-concat");','var newer = require("gulp-newer");'].join(`
`),{},(u,o)=>{l(u,o,1,4,!1),r(o,new g(1,4)),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,5)]),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,5),new s(2,4,2,5)]),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,5),new s(2,4,2,5),new s(3,4,3,5)]),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),C.CursorColumnSelectDown.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,5),new s(2,4,2,5),new s(3,4,3,5),new s(4,4,4,5),new s(5,4,5,5),new s(6,4,6,5),new s(7,4,7,5)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,6),new s(2,4,2,6),new s(3,4,3,6),new s(4,4,4,6),new s(5,4,5,6),new s(6,4,6,6),new s(7,4,7,6)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,16),new s(2,4,2,16),new s(3,4,3,16),new s(4,4,4,16),new s(5,4,5,16),new s(6,4,6,16),new s(7,4,7,16)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,26),new s(2,4,2,26),new s(3,4,3,26),new s(4,4,4,26),new s(5,4,5,26),new s(6,4,6,26),new s(7,4,7,26)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,28),new s(4,4,4,28),new s(5,4,5,28),new s(6,4,6,28),new s(7,4,7,28)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,32),new s(5,4,5,32),new s(6,4,6,32),new s(7,4,7,32)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,34),new s(5,4,5,34),new s(6,4,6,34),new s(7,4,7,34)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,34),new s(5,4,5,35),new s(6,4,6,35),new s(7,4,7,35)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,34),new s(5,4,5,37),new s(6,4,6,37),new s(7,4,7,35)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,34),new s(5,4,5,37),new s(6,4,6,37),new s(7,4,7,35)]),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),C.CursorColumnSelectRight.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,34),new s(5,4,5,37),new s(6,4,6,37),new s(7,4,7,35)]),C.CursorColumnSelectLeft.runCoreEditorCommand(o,{}),r(o,[new s(1,4,1,28),new s(2,4,2,28),new s(3,4,3,32),new s(4,4,4,34),new s(5,4,5,36),new s(6,4,6,36),new s(7,4,7,35)])})}),test("setSelection / setPosition with source",()=>{const u={getInitialState:()=>rt,tokenize:void 0,tokenizeEncoded:(V,X,q)=>new M(new Uint32Array(0),q)},o="modelModeTest1",z=tt.register(o,u),P=J("Just text",o);O(P,{},(V,X)=>{let q;const L=V.onDidChangeCursorPosition(E=>{q=E});V.setSelection(new N(1,2,1,3),"navigation"),a.strictEqual(q.source,"navigation"),q=void 0,V.setPosition(new g(1,2),"navigation"),a.strictEqual(q.source,"navigation"),L.dispose()}),z.dispose(),P.dispose()})}),suite("Editor Controller",()=>{const d="surroundingLanguage",m="indentRulesLanguage",p="electricCharLanguage",k="autoClosingLanguage";let T,K,y,u;setup(()=>{T=new ct,K=pt(T),y=K.get(mt),u=K.get(gt),T.add(u.registerLanguage({id:d})),T.add(y.register(d,{autoClosingPairs:[{open:"(",close:")"}]})),z(m,{decreaseIndentPattern:/^\s*((?!\S.*\/[*]).*[*]\/\s*)?[})\]]|^\s*(case\b.*|default):\s*(\/\/.*|\/[*].*[*]\/\s*)?$/,increaseIndentPattern:/^((?!\/\/).)*(\{[^}"'`]*|\([^)"']*|\[[^\]"']*|^\s*(\{\}|\(\)|\[\]|(case\b.*|default):))\s*(\/\/.*|\/[*].*[*]\/\s*)?$/,indentNextLinePattern:/^\s*(for|while|if|else)\b(?!.*[;{}]\s*(\/\/.*|\/[*].*[*]\/\s*)?$)/,unIndentedLinePattern:/^(?!.*([;{}]|\S:)\s*(\/\/.*|\/[*].*[*]\/\s*)?$)(?!.*(\{[^}"']*|\([^)"']*|\[[^\]"']*|^\s*(\{\}|\(\)|\[\]|(case\b.*|default):))\s*(\/\/.*|\/[*].*[*]\/\s*)?$)(?!^\s*((?!\S.*\/[*]).*[*]\/\s*)?[})\]]|^\s*(case\b.*|default):\s*(\/\/.*|\/[*].*[*]\/\s*)?$)(?!^\s*(for|while|if|else)\b(?!.*[;{}]\s*(\/\/.*|\/[*].*[*]\/\s*)?$))/}),T.add(u.registerLanguage({id:p})),T.add(y.register(p,{__electricCharacterSupport:{docComment:{open:"/**",close:" */"}},brackets:[["{","}"],["[","]"],["(",")"]]})),P()}),teardown(()=>{T.dispose()}),v();function o(e){const n="onEnterMode";return T.add(u.registerLanguage({id:n})),T.add(y.register(n,{onEnterRules:[{beforeText:/.*/,action:{indentAction:e}}]})),n}function z(e,n){return T.add(u.registerLanguage({id:e})),T.add(y.register(e,{indentationRules:n})),e}function P(){T.add(u.registerLanguage({id:k})),T.add(y.register(k,{comments:{blockComment:["/*","*/"]},autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"'",close:"'",notIn:["string","comment"]},{open:'"',close:'"',notIn:["string"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]},{open:"begin",close:"end",notIn:["string"]}],__electricCharacterSupport:{docComment:{open:"/**",close:" */"}}}))}function V(){class e{constructor(I=null){this.parent=I}clone(){return this}equals(I){return I instanceof e?!this.parent&&!I.parent?!0:!this.parent||!I.parent?!1:this.parent.equals(I.parent):!1}}class n{constructor(I,b){this.char=I;this.parentState=b}clone(){return this}equals(I){return I instanceof n&&this.char===I.char&&this.parentState.equals(I.parentState)}}class t{constructor(I){this.parentState=I}clone(){return this}equals(I){return I instanceof n&&this.parentState.equals(I.parentState)}}const i=u.languageIdCodec.encodeLanguageId(k);T.add(tt.register(k,{getInitialState:()=>new e,tokenize:void 0,tokenizeEncoded:function(f,I,b){let x=b;const h=[],w=(A,et,st)=>{h.length>0&&h[h.length-1].type===et?h[h.length-1].length+=A:h.push({length:A,type:et}),f=f.substring(A),st&&(x=st)};for(;f.length>0;)lt();const Y=new Uint32Array(h.length*2);let nt=0;for(let A=0;A<h.length;A++)Y[2*A]=nt,Y[2*A+1]=i<<at.LANGUAGEID_OFFSET|h[A].type<<at.TOKEN_TYPE_OFFSET,nt+=h[A].length;return new M(Y,x);function lt(){if(x instanceof e){const A=f.match(/^[^'"`{}/]+/g);return A?w(A[0].length,W.Other):/^['"`]/.test(f)?w(1,W.String,new n(f.charAt(0),x)):/^{/.test(f)?w(1,W.Other,new e(x)):/^}/.test(f)?w(1,W.Other,x.parent||new e):/^\/\//.test(f)?w(f.length,W.Comment,x):/^\/\*/.test(f)?w(2,W.Comment,new t(x)):w(1,W.Other,x)}else if(x instanceof n){const A=f.match(/^[^\\'"`\$]+/g);return A?w(A[0].length,W.String):/^\\/.test(f)?w(2,W.String):f.charAt(0)===x.char?w(1,W.String,x.parentState):/^\$\{/.test(f)?w(2,W.Other,new e(x)):w(1,W.Other,x)}else if(x instanceof t){const A=f.match(/^[^*]+/g);return A?w(A[0].length,W.String):/^\*\//.test(f)?w(2,W.Comment,x.parentState):w(1,W.Other,x)}else throw new Error("unknown state")}}}))}function X(e){T.add(y.register(k,{autoCloseBefore:e,autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"'",close:"'",notIn:["string","comment"]},{open:'"',close:'"',notIn:["string"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}]}))}function q(e,n=null,t=Ct.DEFAULT_CREATION_OPTIONS,i=null){return T.add(Et(K,e,n,t,i))}function L(e,n,t){let i;typeof e=="string"?i=q(e):Array.isArray(e)?i=q(e.join(`
`)):i=e;const f=T.add(dt(K,i,n)),I=f.getViewModel();I.setHasFocus(!0),t(f,I)}function E(e,n){const t=q(e.text.join(`
`),e.languageId,e.modelOpts),i=e.editorOpts||{};L(t,i,(f,I)=>{n(f,t,I)})}let it;(i=>(i[i.Normal=0]="Normal",i[i.Special1=1]="Special1",i[i.Special2=2]="Special2"))(it||={});function H(e,n){const t=[];for(let f=1;f<=e;f++)t[f]=0;let i=1;for(let f=0;f<n.length;f++)n.charAt(f)==="|"?t[i]=1:n.charAt(f)==="!"?t[i]=2:i++;return t}function j(e,n,t,i,f,I,b,x){const h=n.getLineContent(i),w=h.substr(0,f-1)+b+h.substr(f-1);l(e,t,i,f),t.type(I,"keyboard"),a.deepStrictEqual(n.getLineContent(i),w,x),n.undo()}test("issue microsoft/monaco-editor#443: Indentation of a single row deletes selected text in some cases",()=>{const e=q(["Hello world!","another line"].join(`
`),void 0,{insertSpaces:!1});L(e,{},(n,t)=>{t.setSelections("test",[new s(1,1,1,13)]),c.Tab.runEditorCommand(null,n,null),a.deepStrictEqual(t.getSelection(),new s(1,1,1,14))})}),test("Bug 9121: Auto indent + undo + redo is funky",()=>{const e=q([""].join(`
`),void 0,{insertSpaces:!1,trimAutoWhitespace:!1});L(e,{},(n,t)=>{t.type(`
`,"keyboard"),a.strictEqual(e.getValue(S.LF),`
`,"assert1"),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	`,"assert2"),t.type(`
`,"keyboard"),a.strictEqual(e.getValue(S.LF),`
	
	`,"assert3"),t.type("x"),a.strictEqual(e.getValue(S.LF),`
	
	x`,"assert4"),C.CursorLeft.runCoreEditorCommand(t,{}),a.strictEqual(e.getValue(S.LF),`
	
	x`,"assert5"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	
x`,"assert6"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	x`,"assert7"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
x`,"assert8"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"x","assert9"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
x`,"assert10"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	
x`,"assert11"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	
	x`,"assert12"),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	
x`,"assert13"),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
x`,"assert14"),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"x","assert15")})}),test("issue #23539: Setting model EOL isn't undoable",()=>{L(["Hello","world"],{},(e,n)=>{const t=e.getModel();r(n,new g(1,1)),t.setEOL(G.LF),a.strictEqual(t.getValue(),`Hello
world`),t.pushEOL(G.CRLF),a.strictEqual(t.getValue(),`Hello\r
world`),c.Undo.runEditorCommand(null,e,null),a.strictEqual(t.getValue(),`Hello
world`)})}),test("issue #47733: Undo mangles unicode characters",()=>{const e="myMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{surroundingPairs:[{open:"%",close:"%"}]}));const n=q("'\u{1F441}'",e);L(n,{},(t,i)=>{t.setSelection(new s(1,1,1,2)),i.type("%","keyboard"),a.strictEqual(n.getValue(S.LF),"%'%\u{1F441}'","assert1"),c.Undo.runEditorCommand(null,t,null),a.strictEqual(n.getValue(S.LF),"'\u{1F441}'","assert2")})}),test("issue #46208: Allow empty selections in the undo/redo stack",()=>{const e=q("");L(e,{},(n,t)=>{t.type("Hello","keyboard"),t.type(" ","keyboard"),t.type("world","keyboard"),t.type(" ","keyboard"),a.strictEqual(e.getLineContent(1),"Hello world "),r(t,new g(1,13)),U(n,t),D(n,t),e.pushEditOperations([],[ot.replaceMove(new N(1,12,1,13),"")],()=>[]),a.strictEqual(e.getLineContent(1),"Hello world"),r(t,new g(1,12)),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello world "),r(t,new s(1,13,1,13)),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello world"),r(t,new g(1,12)),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello"),r(t,new g(1,6)),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),""),r(t,new g(1,1)),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello"),r(t,new g(1,6)),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello world"),r(t,new g(1,12)),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello world "),r(t,new g(1,13)),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello world"),r(t,new g(1,12)),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"Hello world"),r(t,new g(1,12))})}),test("bug #16815:Shift+Tab doesn't go back to tabstop",()=>{const e=o(_.IndentOutdent),n=q(["     function baz() {"].join(`
`),e);L(n,{},(t,i)=>{l(t,i,1,6,!1),r(i,new s(1,6,1,6)),c.Outdent.runEditorCommand(null,t,null),a.strictEqual(n.getLineContent(1),"    function baz() {"),r(i,new s(1,5,1,5))})}),test("Bug #18293:[regression][editor] Can't outdent whitespace line",()=>{const e=q(["      "].join(`
`));L(e,{},(n,t)=>{l(n,t,1,7,!1),r(t,new s(1,7,1,7)),c.Outdent.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"    "),r(t,new s(1,5,1,5))})}),test("issue #95591: Unindenting moves cursor to beginning of line",()=>{const e=q(["        "].join(`
`));L(e,{useTabStops:!1},(n,t)=>{l(n,t,1,9,!1),r(t,new s(1,9,1,9)),c.Outdent.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"    "),r(t,new s(1,5,1,5))})}),test("Bug #16657: [editor] Tab on empty line of zero indentation moves cursor to position (1,1)",()=>{const e=q(["function baz() {","	function hello() { // something here","	","","	}","}",""].join(`
`),void 0,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,7,1,!1),r(t,new s(7,1,7,1)),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(7),"	"),r(t,new s(7,2,7,2))})}),test("bug #16740: [editor] Cut line doesn't quite cut the last line",()=>{L(["asdasd","qwerty"],{},(e,n)=>{const t=e.getModel();l(e,n,2,1,!1),r(n,new s(2,1,2,1)),n.cut("keyboard"),a.strictEqual(t.getLineCount(),1),a.strictEqual(t.getLineContent(1),"asdasd")}),L(["asdasd",""],{},(e,n)=>{const t=e.getModel();l(e,n,2,1,!1),r(n,new s(2,1,2,1)),n.cut("keyboard"),a.strictEqual(t.getLineCount(),1),a.strictEqual(t.getLineContent(1),"asdasd"),n.cut("keyboard"),a.strictEqual(t.getLineCount(),1),a.strictEqual(t.getLineContent(1),"")})}),test("issue #128602: When cutting multiple lines (ctrl x), the last line will not be erased",()=>{L(["a1","a2","a3"],{},(e,n)=>{const t=e.getModel();n.setSelections("test",[new s(1,1,1,1),new s(2,1,2,1),new s(3,1,3,1)]),n.cut("keyboard"),a.strictEqual(t.getLineCount(),1),a.strictEqual(t.getLineContent(1),"")})}),test("Bug #11476: Double bracket surrounding + undo is broken",()=>{E({text:["hello"],languageId:d},(e,n,t)=>{l(e,t,1,3,!1),l(e,t,1,5,!0),r(t,new s(1,3,1,5)),t.type("(","keyboard"),r(t,new s(1,4,1,6)),t.type("(","keyboard"),r(t,new s(1,5,1,7))})}),test("issue #1140: Backspace stops prematurely",()=>{const e=q(["function baz() {","  return 1;","};"].join(`
`));L(e,{},(n,t)=>{l(n,t,3,2,!1),l(n,t,1,14,!0),r(t,new s(3,2,1,14)),c.DeleteLeft.runEditorCommand(null,n,null),r(t,new s(1,14,1,14)),a.strictEqual(e.getLineCount(),1),a.strictEqual(e.getLineContent(1),"function baz(;")})}),test("issue #10212: Pasting entire line does not replace selection",()=>{E({text:["line1","line2"]},(e,n,t)=>{l(e,t,2,1,!1),l(e,t,2,6,!0),t.paste(`line1
`,!0),a.strictEqual(n.getLineContent(1),"line1"),a.strictEqual(n.getLineContent(2),"line1"),a.strictEqual(n.getLineContent(3),"")})}),test("issue #74722: Pasting whole line does not replace selection",()=>{E({text:["line1","line sel 2","line3"]},(e,n,t)=>{t.setSelections("test",[new s(2,6,2,9)]),t.paste(`line1
`,!0),a.strictEqual(n.getLineContent(1),"line1"),a.strictEqual(n.getLineContent(2),"line line1"),a.strictEqual(n.getLineContent(3)," 2"),a.strictEqual(n.getLineContent(4),"line3")})}),test("issue #4996: Multiple cursor paste pastes contents of all cursors",()=>{E({text:["line1","line2","line3"]},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,1),new s(2,1,2,1)]),t.paste(`a
b
c
d`,!1,[`a
b`,`c
d`]),a.strictEqual(n.getValue(),["a","bline1","c","dline2","line3"].join(`
`))})}),test("issue #16155: Paste into multiple cursors has edge case when number of lines equals number of cursors - 1",()=>{E({text:["test","test","test","test"]},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,5),new s(2,1,2,5),new s(3,1,3,5),new s(4,1,4,5)]),t.paste(`aaa
bbb
ccc
`,!1,null),a.strictEqual(n.getValue(),["aaa","bbb","ccc","","aaa","bbb","ccc","","aaa","bbb","ccc","","aaa","bbb","ccc",""].join(`
`))})}),test("issue #43722: Multiline paste doesn't work anymore",()=>{E({text:["test","test","test","test"]},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,5),new s(2,1,2,5),new s(3,1,3,5),new s(4,1,4,5)]),t.paste(`aaa\r
bbb\r
ccc\r
ddd\r
`,!1,null),a.strictEqual(n.getValue(),["aaa","bbb","ccc","ddd"].join(`
`))})}),test("issue #46440: (1) Pasting a multi-line selection pastes entire selection into every insertion point",()=>{E({text:["line1","line2","line3"]},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,1),new s(2,1,2,1),new s(3,1,3,1)]),t.paste(`a
b
c`,!1,null),a.strictEqual(n.getValue(),["aline1","bline2","cline3"].join(`
`))})}),test("issue #46440: (2) Pasting a multi-line selection pastes entire selection into every insertion point",()=>{E({text:["line1","line2","line3"]},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,1),new s(2,1,2,1),new s(3,1,3,1)]),t.paste(`a
b
c
`,!1,null),a.strictEqual(n.getValue(),["aline1","bline2","cline3"].join(`
`))})}),test("issue #3071: Investigate why undo stack gets corrupted",()=>{const e=q(["some lines","and more lines","just some text"].join(`
`));L(e,{},(n,t)=>{l(n,t,1,1,!1),l(n,t,3,4,!0);let i=!0;const f=e.onDidChangeContent(()=>{i&&(i=!1,t.type("	","keyboard"))});c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getValue(),["	 just some text"].join(`
`),"001"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(),["    some lines","    and more lines","    just some text"].join(`
`),"002"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(),["some lines","and more lines","just some text"].join(`
`),"003"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(),["some lines","and more lines","just some text"].join(`
`),"004"),f.dispose()})}),test("issue #12950: Cannot Double Click To Insert Emoji Using OSX Emoji Panel",()=>{E({text:["some lines","and more lines","just some text"],languageId:null},(e,n,t)=>{l(e,t,3,1,!1),t.type("\u{1F60D}","keyboard"),a.strictEqual(n.getValue(),["some lines","and more lines","\u{1F60D}just some text"].join(`
`))})}),test("issue #3463: pressing tab adds spaces, but not as many as for a tab",()=>{const e=q(["function a() {","	var a = {","		x: 3","	};","}"].join(`
`));L(e,{},(n,t)=>{l(n,t,3,2,!1),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(3),"	    	x: 3")})}),test("issue #4312: trying to type a tab character over a sequence of spaces results in unexpected behaviour",()=>{const e=q(["var foo = 123;       // this is a comment","var bar = 4;       // another comment"].join(`
`),void 0,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,1,15,!1),l(n,t,1,22,!0),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"var foo = 123;	// this is a comment")})}),test("issue #832: word right",()=>{E({text:["   /* Just some   more   text a+= 3 +5-3 + 7 */  "]},(e,n,t)=>{l(e,t,1,1,!1);function i(f,I){const b={position:{lineNumber:1,column:f}};f===1?C.WordSelect.runCoreEditorCommand(t,b):C.WordSelectDrag.runCoreEditorCommand(t,b),a.strictEqual(t.getSelection().startColumn,1,"TEST FOR "+f),a.strictEqual(t.getSelection().endColumn,I,"TEST FOR "+f)}i(1,4),i(2,4),i(3,4),i(4,4),i(5,5),i(6,6),i(7,7),i(8,11),i(9,11),i(10,11),i(11,11),i(12,12),i(13,16),i(14,16),i(15,16),i(16,16),i(17,17),i(18,18),i(19,19),i(20,23),i(21,23),i(22,23),i(23,23),i(24,24),i(25,25),i(26,26),i(27,30),i(28,30),i(29,30),i(30,30),i(31,31),i(32,32),i(33,33),i(34,34),i(35,35),i(36,36),i(37,37),i(38,38),i(39,39),i(40,40),i(41,41),i(42,42),i(43,43),i(44,44),i(45,45),i(46,46),i(47,47),i(48,48),i(49,49),i(50,50)})}),test("issue #33788: Wrong cursor position when double click to select a word",()=>{const e=q(["Just some text"].join(`
`));L(e,{},(n,t)=>{C.WordSelect.runCoreEditorCommand(t,{position:new g(1,8)}),a.deepStrictEqual(t.getSelection(),new s(1,6,1,10)),C.WordSelectDrag.runCoreEditorCommand(t,{position:new g(1,8)}),a.deepStrictEqual(t.getSelection(),new s(1,6,1,10))})}),test("issue #12887: Double-click highlighting separating white space",()=>{const e=q(["abc def"].join(`
`));L(e,{},(n,t)=>{C.WordSelect.runCoreEditorCommand(t,{position:new g(1,5)}),a.deepStrictEqual(t.getSelection(),new s(1,5,1,8))})}),test("issue #9675: Undo/Redo adds a stop in between CHN Characters",()=>{L([],{},(e,n)=>{const t=e.getModel();r(n,new g(1,1)),n.type("\uFF53","keyboard"),n.compositionType("\u305B",1,0,0),n.compositionType("\u305B\uFF4E",1,0,0),n.compositionType("\u305B\u3093",2,0,0),n.compositionType("\u305B\u3093\uFF53",2,0,0),n.compositionType("\u305B\u3093\u305B",3,0,0),n.compositionType("\u305B\u3093\u305B",3,0,0),n.compositionType("\u305B\u3093\u305B\u3044",3,0,0),n.compositionType("\u305B\u3093\u305B\u3044",4,0,0),n.compositionType("\u305B\u3093\u305B\u3044",4,0,0),n.compositionType("\u305B\u3093\u305B\u3044",4,0,0),a.strictEqual(t.getLineContent(1),"\u305B\u3093\u305B\u3044"),r(n,new g(1,5)),c.Undo.runEditorCommand(null,e,null),a.strictEqual(t.getLineContent(1),""),r(n,new g(1,1))})}),test("issue #23983: Calling model.setEOL does not reset cursor position",()=>{E({text:["first line","second line"]},(e,n,t)=>{n.setEOL(G.CRLF),t.setSelections("test",[new s(2,2,2,2)]),n.setEOL(G.LF),r(t,new s(2,2,2,2))})}),test("issue #23983: Calling model.setValue() resets cursor position",()=>{E({text:["first line","second line"]},(e,n,t)=>{n.setEOL(G.CRLF),t.setSelections("test",[new s(2,2,2,2)]),n.setValue(["different first line","different second line","new third line"].join(`
`)),r(t,new s(1,1,1,1))})}),test("issue #36740: wordwrap creates an extra step / character at the wrapping point",()=>{L([["Lorem ipsum ","dolor sit amet ","consectetur ","adipiscing elit"].join("")],{wordWrap:"wordWrapColumn",wordWrapColumn:16},(e,n)=>{n.setSelections("test",[new s(1,7,1,7)]),D(e,n),r(n,new s(1,8,1,8)),D(e,n),r(n,new s(1,9,1,9)),D(e,n),r(n,new s(1,10,1,10)),D(e,n),r(n,new s(1,11,1,11)),D(e,n),r(n,new s(1,12,1,12)),D(e,n),r(n,new s(1,13,1,13)),D(e,n),r(n,new s(1,14,1,14)),U(e,n),r(n,new s(1,13,1,13)),U(e,n),r(n,new s(1,12,1,12))})}),test("issue #110376: multiple selections with wordwrap behave differently",()=>{L([["just a sentence. just a ","sentence. just a sentence."].join("")],{wordWrap:"wordWrapColumn",wordWrapColumn:25},(e,n)=>{n.setSelections("test",[new s(1,1,1,16),new s(1,18,1,33),new s(1,35,1,50)]),U(e,n),r(n,[new s(1,1,1,1),new s(1,18,1,18),new s(1,35,1,35)]),n.setSelections("test",[new s(1,1,1,16),new s(1,18,1,33),new s(1,35,1,50)]),D(e,n),r(n,[new s(1,16,1,16),new s(1,33,1,33),new s(1,50,1,50)])})}),test("issue #98320: Multi-Cursor, Wrap lines and cursorSelectRight ==> cursors out of sync",()=>{L([["lorem_ipsum-1993x11x13","dolor_sit_amet-1998x04x27","consectetur-2007x10x08","adipiscing-2012x07x27","elit-2015x02x27"].join(`
`)],{wordWrap:"wordWrapColumn",wordWrapColumn:16},(e,n)=>{n.setSelections("test",[new s(1,13,1,13),new s(2,16,2,16),new s(3,13,3,13),new s(4,12,4,12),new s(5,6,5,6)]),r(n,[new s(1,13,1,13),new s(2,16,2,16),new s(3,13,3,13),new s(4,12,4,12),new s(5,6,5,6)]),D(e,n,!0),r(n,[new s(1,13,1,14),new s(2,16,2,17),new s(3,13,3,14),new s(4,12,4,13),new s(5,6,5,7)]),D(e,n,!0),r(n,[new s(1,13,1,15),new s(2,16,2,18),new s(3,13,3,15),new s(4,12,4,14),new s(5,6,5,8)]),D(e,n,!0),r(n,[new s(1,13,1,16),new s(2,16,2,19),new s(3,13,3,16),new s(4,12,4,15),new s(5,6,5,9)]),D(e,n,!0),r(n,[new s(1,13,1,17),new s(2,16,2,20),new s(3,13,3,17),new s(4,12,4,16),new s(5,6,5,10)])})}),test("issue #41573 - delete across multiple lines does not shrink the selection when word wraps",()=>{L(["Authorization: 'Bearer pHKRfCTFSnGxs6akKlb9ddIXcca0sIUSZJutPHYqz7vEeHdMTMh0SGN0IGU3a0n59DXjTLRsj5EJ2u33qLNIFi9fk5XF8pK39PndLYUZhPt4QvHGLScgSkK0L4gwzkzMloTQPpKhqiikiIOvyNNSpd2o8j29NnOmdTUOKi9DVt74PD2ohKxyOrWZ6oZprTkb3eKajcpnS0LABKfaw2rmv4',"].join(`
`),{wordWrap:"wordWrapColumn",wordWrapColumn:100},(e,n)=>{l(e,n,1,43,!1),l(e,n,1,147,!0),r(n,new s(1,43,1,147)),e.getModel().applyEdits([{range:new N(1,1,1,43),text:""}]),r(n,new s(1,1,1,105))})}),test("issue #22717: Moving text cursor cause an incorrect position in Chinese",()=>{L([["\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D\u4E03\u516B\u4E5D\u5341","12345678901234567890"].join(`
`)],{},(e,n)=>{n.setSelections("test",[new s(1,5,1,5)]),R(e,n),r(n,new s(2,9,2,9)),D(e,n),r(n,new s(2,10,2,10)),D(e,n),r(n,new s(2,11,2,11)),F(e,n),r(n,new s(1,6,1,6))})}),test("issue #112301: new stickyTabStops feature interferes with word wrap",()=>{L([["function hello() {","        console.log(`this is a long console message`)","}"].join(`
`)],{wordWrap:"wordWrapColumn",wordWrapColumn:32,stickyTabStops:!0},(e,n)=>{n.setSelections("test",[new s(2,31,2,31)]),D(e,n,!1),r(n,new g(2,32)),D(e,n,!1),r(n,new g(2,33)),D(e,n,!1),r(n,new g(2,34)),U(e,n,!1),r(n,new g(2,33)),U(e,n,!1),r(n,new g(2,32)),U(e,n,!1),r(n,new g(2,31))})}),test("issue #44805: Should not be able to undo in readonly editor",()=>{const e=q([""].join(`
`));L(e,{readOnly:!0},(n,t)=>{e.pushEditOperations([new s(1,1,1,1)],[{range:new N(1,1,1,1),text:"Hello world!"}],()=>[new s(1,1,1,1)]),a.strictEqual(e.getValue(S.LF),"Hello world!"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"Hello world!")})}),test("issue #46314: ViewModel is out of sync with Model!",()=>{const e={getInitialState:()=>rt,tokenize:void 0,tokenizeEncoded:(f,I,b)=>new M(new Uint32Array(0),b)},n="modelModeTest1",t=tt.register(n,e),i=q("Just text",n);L(i,{},(f,I)=>{L(i,{},(b,x)=>{const h=f.onDidChangeCursorPosition(()=>{i.tokenization.tokenizeIfCheap(1)});i.applyEdits([{range:new N(1,1,1,1),text:"-"}]),h.dispose()})}),t.dispose(),i.dispose()}),test("issue #37967: problem replacing consecutive characters",()=>{const e=q(['const a = "foo";','const b = ""'].join(`
`));L(e,{multiCursorMergeOverlapping:!1},(n,t)=>{n.setSelections([new s(1,12,1,12),new s(1,16,1,16),new s(2,12,2,12),new s(2,13,2,13)]),c.DeleteLeft.runEditorCommand(null,n,null),r(t,[new s(1,11,1,11),new s(1,14,1,14),new s(2,11,2,11),new s(2,11,2,11)]),t.type("'","keyboard"),a.strictEqual(e.getLineContent(1),"const a = 'foo';"),a.strictEqual(e.getLineContent(2),"const b = ''")})}),test("issue #15761: Cursor doesn't move in a redo operation",()=>{const e=q(["hello"].join(`
`));L(e,{},(n,t)=>{n.setSelections([new s(1,4,1,4)]),n.executeEdits("test",[{range:new N(1,1,1,1),text:"*",forceMoveMarkers:!0}]),r(t,[new s(1,5,1,5)]),c.Undo.runEditorCommand(null,n,null),r(t,[new s(1,4,1,4)]),c.Redo.runEditorCommand(null,n,null),r(t,[new s(1,5,1,5)])})}),test("issue #42783: API Calls with Undo Leave Cursor in Wrong Position",()=>{const e=q(["ab"].join(`
`));L(e,{},(n,t)=>{n.setSelections([new s(1,1,1,1)]),n.executeEdits("test",[{range:new N(1,1,1,3),text:""}]),r(t,[new s(1,1,1,1)]),c.Undo.runEditorCommand(null,n,null),r(t,[new s(1,1,1,1)]),n.executeEdits("test",[{range:new N(1,1,1,2),text:""}]),r(t,[new s(1,1,1,1)])})}),test("issue #85712: Paste line moves cursor to start of current line rather than start of next line",()=>{const e=q(["abc123",""].join(`
`));L(e,{},(n,t)=>{n.setSelections([new s(2,1,2,1)]),t.paste(`something
`,!0),a.strictEqual(e.getValue(),["abc123","something",""].join(`
`)),r(t,new g(3,1))})}),test("issue #84897: Left delete behavior in some languages is changed",()=>{const e=q(["\u0E2A\u0E27\u0E31\u0E2A\u0E14\u0E35"].join(`
`));L(e,{},(n,t)=>{n.setSelections([new s(1,7,1,7)]),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27\u0E31\u0E2A\u0E14"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27\u0E31\u0E2A"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27\u0E31"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"")})}),test("issue #122914: Left delete behavior in some languages is changed (useTabStops: false)",()=>{const e=q(["\u0E2A\u0E27\u0E31\u0E2A\u0E14\u0E35"].join(`
`));L(e,{useTabStops:!1},(n,t)=>{n.setSelections([new s(1,7,1,7)]),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27\u0E31\u0E2A\u0E14"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27\u0E31\u0E2A"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27\u0E31"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A\u0E27"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u0E2A"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"")})}),test("issue #99629: Emoji modifiers in text treated separately when using backspace",()=>{const e=q(["\u{1F476}\u{1F3FE}"].join(`
`));L(e,{useTabStops:!1},(n,t)=>{const i=e.getValueLength();n.setSelections([new s(1,1+i,1,1+i)]),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"")})}),test("issue #99629: Emoji modifiers in text treated separately when using backspace (ZWJ sequence)",()=>{const e=q(["\u{1F468}\u200D\u{1F469}\u{1F3FD}\u200D\u{1F467}\u200D\u{1F466}"].join(`
`));L(e,{useTabStops:!1},(n,t)=>{const i=e.getValueLength();n.setSelections([new s(1,1+i,1,1+i)]),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u{1F468}\u200D\u{1F469}\u{1F3FD}\u200D\u{1F467}"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u{1F468}\u200D\u{1F469}\u{1F3FD}"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"\u{1F468}"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"")})}),test("issue #105730: move left behaves differently for multiple cursors",()=>{const e=q("asdfghjkl, asdfghjkl, asdfghjkl, ");L(e,{wordWrap:"wordWrapColumn",wordWrapColumn:24},(n,t)=>{t.setSelections("test",[new s(1,10,1,12),new s(1,21,1,23),new s(1,32,1,34)]),U(n,t,!1),r(t,[new s(1,10,1,10),new s(1,21,1,21),new s(1,32,1,32)]),t.setSelections("test",[new s(1,10,1,12),new s(1,21,1,23),new s(1,32,1,34)]),U(n,t,!0),r(t,[new s(1,10,1,11),new s(1,21,1,22),new s(1,32,1,33)])})}),test("issue #105730: move right should always skip wrap point",()=>{const e=q(`asdfghjkl, asdfghjkl, asdfghjkl, 
asdfghjkl,`);L(e,{wordWrap:"wordWrapColumn",wordWrapColumn:24},(n,t)=>{t.setSelections("test",[new s(1,22,1,22)]),D(n,t,!1),D(n,t,!1),r(t,[new s(1,24,1,24)]),t.setSelections("test",[new s(1,22,1,22)]),D(n,t,!0),D(n,t,!0),r(t,[new s(1,22,1,24)])})}),test("issue #123178: sticky tab in consecutive wrapped lines",()=>{const e=q("    aaaa        aaaa",void 0,{tabSize:4});L(e,{wordWrap:"wordWrapColumn",wordWrapColumn:8,stickyTabStops:!0},(n,t)=>{t.setSelections("test",[new s(1,9,1,9)]),D(n,t,!1),r(t,[new s(1,10,1,10)]),U(n,t,!1),r(t,[new s(1,9,1,9)])})}),test("Cursor honors insertSpaces configuration on new line",()=>{E({text:["    	My First Line	 ","	My Second Line","    Third Line","","1"]},(e,n,t)=>{C.MoveTo.runCoreEditorCommand(t,{position:new g(1,21),source:"keyboard"}),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(1),"    	My First Line	 "),a.strictEqual(n.getLineContent(2),"        ")})}),test("Cursor honors insertSpaces configuration on tab",()=>{const e=q(["    	My First Line	 ","My Second Line123","    Third Line","","1"].join(`
`),void 0,{tabSize:13,indentSize:13});L(e,{},(n,t)=>{C.MoveTo.runCoreEditorCommand(t,{position:new g(2,1)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"             My Second Line123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,2)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"M            y Second Line123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,3)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My            Second Line123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,4)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My           Second Line123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,5)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My S         econd Line123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,5)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My S         econd Line123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,13)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Li ne123"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Line123"),C.MoveTo.runCoreEditorCommand(t,{position:new g(2,14)}),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"My Second Lin             e123")})}),test("Enter auto-indents with insertSpaces setting 1",()=>{const e=o(_.Indent);E({text:["	hello"],languageId:e},(n,t,i)=>{l(n,i,1,7,!1),r(i,new s(1,7,1,7)),i.type(`
`,"keyboard"),a.strictEqual(t.getValue(S.CRLF),`	hello\r
        `)})}),test("Enter auto-indents with insertSpaces setting 2",()=>{const e=o(_.None);E({text:["	hello"],languageId:e},(n,t,i)=>{l(n,i,1,7,!1),r(i,new s(1,7,1,7)),i.type(`
`,"keyboard"),a.strictEqual(t.getValue(S.CRLF),`	hello\r
    `)})}),test("Enter auto-indents with insertSpaces setting 3",()=>{const e=o(_.IndentOutdent);E({text:["	hell()"],languageId:e},(n,t,i)=>{l(n,i,1,7,!1),r(i,new s(1,7,1,7)),i.type(`
`,"keyboard"),a.strictEqual(t.getValue(S.CRLF),`	hell(\r
        \r
    )`)})}),test("issue #148256: Pressing Enter creates line with bad indent with insertSpaces: true",()=>{E({text:["  	"]},(e,n,t)=>{l(e,t,1,4,!1),t.type(`
`,"keyboard"),a.strictEqual(n.getValue(),`  	
    `)})}),test("issue #148256: Pressing Enter creates line with bad indent with insertSpaces: false",()=>{E({text:["  	"]},(e,n,t)=>{n.updateOptions({insertSpaces:!1}),l(e,t,1,4,!1),t.type(`
`,"keyboard"),a.strictEqual(n.getValue(),`  	
	`)})}),test("removeAutoWhitespace off",()=>{E({text:["    some  line abc  "],modelOpts:{trimAutoWhitespace:!1}},(e,n,t)=>{l(e,t,1,n.getLineContent(1).length+1),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(1),"    some  line abc  "),a.strictEqual(n.getLineContent(2),"    "),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(1),"    some  line abc  "),a.strictEqual(n.getLineContent(2),"    "),a.strictEqual(n.getLineContent(3),"    ")})}),test("removeAutoWhitespace on: removes only whitespace the cursor added 1",()=>{E({text:["    "]},(e,n,t)=>{l(e,t,1,n.getLineContent(1).length+1),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(1),"    "),a.strictEqual(n.getLineContent(2),"    "),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(1),"    "),a.strictEqual(n.getLineContent(2),""),a.strictEqual(n.getLineContent(3),"    ")})}),test("issue #115033: indent and appendText",()=>{const e="onEnterMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{onEnterRules:[{beforeText:/.*/,action:{indentAction:_.Indent,appendText:"x"}}]})),E({text:["text"],languageId:e},(n,t,i)=>{l(n,i,1,5),i.type(`
`,"keyboard"),a.strictEqual(t.getLineContent(1),"text"),a.strictEqual(t.getLineContent(2),"    x"),r(i,new g(2,6))})}),test("issue #6862: Editor removes auto inserted indentation when formatting on type",()=>{const e=o(_.IndentOutdent);E({text:["function foo (params: string) {}"],languageId:e},(n,t,i)=>{l(n,i,1,32),i.type(`
`,"keyboard"),a.strictEqual(t.getLineContent(1),"function foo (params: string) {"),a.strictEqual(t.getLineContent(2),"    "),a.strictEqual(t.getLineContent(3),"}");class f{_selectionId=null;getEditOperations(b,x){x.addEditOperation(new N(1,13,1,14),""),this._selectionId=x.trackSelection(i.getSelection())}computeCursorState(b,x){return x.getTrackedSelection(this._selectionId)}}i.executeCommand(new f,"autoFormat"),a.strictEqual(t.getLineContent(1),"function foo(params: string) {"),a.strictEqual(t.getLineContent(2),"    "),a.strictEqual(t.getLineContent(3),"}")})}),test("removeAutoWhitespace on: removes only whitespace the cursor added 2",()=>{const e="testLang",n=u.registerLanguage({id:e}),t=q(["    if (a) {","        ","","","    }"].join(`
`),e);L(t,{},(i,f)=>{l(i,f,3,1),c.Tab.runEditorCommand(null,i,null),a.strictEqual(t.getLineContent(1),"    if (a) {"),a.strictEqual(t.getLineContent(2),"        "),a.strictEqual(t.getLineContent(3),"    "),a.strictEqual(t.getLineContent(4),""),a.strictEqual(t.getLineContent(5),"    }"),l(i,f,4,1),c.Tab.runEditorCommand(null,i,null),a.strictEqual(t.getLineContent(1),"    if (a) {"),a.strictEqual(t.getLineContent(2),"        "),a.strictEqual(t.getLineContent(3),""),a.strictEqual(t.getLineContent(4),"    "),a.strictEqual(t.getLineContent(5),"    }"),l(i,f,5,t.getLineMaxColumn(5)),f.type("something","keyboard"),a.strictEqual(t.getLineContent(1),"    if (a) {"),a.strictEqual(t.getLineContent(2),"        "),a.strictEqual(t.getLineContent(3),""),a.strictEqual(t.getLineContent(4),""),a.strictEqual(t.getLineContent(5),"    }something")}),n.dispose()}),test("removeAutoWhitespace on: test 1",()=>{const e=q(["    some  line abc  "].join(`
`));L(e,{},(n,t)=>{l(n,t,1,e.getLineContent(1).length+1),t.type(`
`,"keyboard"),a.strictEqual(e.getLineContent(1),"    some  line abc  "),a.strictEqual(e.getLineContent(2),"    "),t.type(`
`,"keyboard"),a.strictEqual(e.getLineContent(1),"    some  line abc  "),a.strictEqual(e.getLineContent(2),""),a.strictEqual(e.getLineContent(3),"    "),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"    some  line abc  "),a.strictEqual(e.getLineContent(2),""),a.strictEqual(e.getLineContent(3),"        "),t.type(`
`,"keyboard"),a.strictEqual(e.getLineContent(1),"    some  line abc  "),a.strictEqual(e.getLineContent(2),""),a.strictEqual(e.getLineContent(3),""),a.strictEqual(e.getLineContent(4),"        "),l(n,t,1,5),t.type(`
`,"keyboard"),a.strictEqual(e.getLineContent(1),"    "),a.strictEqual(e.getLineContent(2),"    some  line abc  "),a.strictEqual(e.getLineContent(3),""),a.strictEqual(e.getLineContent(4),""),a.strictEqual(e.getLineContent(5),""),l(n,t,2,5),l(n,t,3,1,!0),t.type(`
`,"keyboard"),a.strictEqual(e.getLineContent(1),"    "),a.strictEqual(e.getLineContent(2),"    "),a.strictEqual(e.getLineContent(3),"    "),a.strictEqual(e.getLineContent(4),""),a.strictEqual(e.getLineContent(5),"")})}),test("issue #15118: remove auto whitespace when pasting entire line",()=>{const e=q(["    function f() {","        // I'm gonna copy this line","        return 3;","    }"].join(`
`));L(e,{},(n,t)=>{l(n,t,3,e.getLineMaxColumn(3)),t.type(`
`,"keyboard"),a.strictEqual(e.getValue(),["    function f() {","        // I'm gonna copy this line","        return 3;","        ","    }"].join(`
`)),r(t,new g(4,e.getLineMaxColumn(4))),t.paste(`        // I'm gonna copy this line
`,!0),a.strictEqual(e.getValue(),["    function f() {","        // I'm gonna copy this line","        return 3;","        // I'm gonna copy this line","","    }"].join(`
`)),r(t,new g(5,1))})}),test("issue #40695: maintain cursor position when copying lines using ctrl+c, ctrl+v",()=>{const e=q(["    function f() {","        // I'm gonna copy this line","        // Another line","        return 3;","    }"].join(`
`));L(e,{},(n,t)=>{n.setSelections([new s(4,10,4,10)]),t.paste(`        // I'm gonna copy this line
`,!0),a.strictEqual(e.getValue(),["    function f() {","        // I'm gonna copy this line","        // Another line","        // I'm gonna copy this line","        return 3;","    }"].join(`
`)),r(t,new g(5,10))})}),test("UseTabStops is off",()=>{const e=q(["    x","        a    ","    "].join(`
`));L(e,{useTabStops:!1},(n,t)=>{l(n,t,2,9),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"       a    ")})}),test("Backspace removes whitespaces with tab size",()=>{const e=q([" 	 	     x","        a    ","    "].join(`
`));L(e,{useTabStops:!0},(n,t)=>{l(n,t,2,e.getLineContent(2).length+1),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"        a   "),l(n,t,2,9),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"    a   "),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"a   "),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"        a   "),l(n,t,1,1),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1)," 	 	     x"),l(n,t,1,10),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1)," 	 	    x"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1)," 	 	x"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1)," 	x"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(1),"x"),l(n,t,3,e.getLineContent(3).length+1),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(3),""),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`x
        a   `),l(n,t,2,3),l(n,t,2,4,!0),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(2),"       a   ")})}),test("PR #5423: Auto indent + undo + redo is funky",()=>{const e=q([""].join(`
`),void 0,{insertSpaces:!1});L(e,{},(n,t)=>{t.type(`
`,"keyboard"),a.strictEqual(e.getValue(S.LF),`
`,"assert1"),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	`,"assert2"),t.type("y","keyboard"),a.strictEqual(e.getValue(S.LF),`
	y`,"assert2"),t.type(`
`,"keyboard"),a.strictEqual(e.getValue(S.LF),`
	y
	`,"assert3"),t.type("x"),a.strictEqual(e.getValue(S.LF),`
	y
	x`,"assert4"),C.CursorLeft.runCoreEditorCommand(t,{}),a.strictEqual(e.getValue(S.LF),`
	y
	x`,"assert5"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	y
x`,"assert6"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	yx`,"assert7"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	x`,"assert8"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
x`,"assert9"),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"x","assert10"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
x`,"assert11"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	y
x`,"assert12"),c.Undo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	y
	x`,"assert13"),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
	y
x`,"assert14"),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),`
x`,"assert15"),c.Redo.runEditorCommand(null,n,null),a.strictEqual(e.getValue(S.LF),"x","assert16")})}),test("issue #90973: Undo brings back model alternative version",()=>{const e=q([""].join(`
`),void 0,{insertSpaces:!1});L(e,{},(n,t)=>{const i=e.getVersionId(),f=e.getAlternativeVersionId();t.type("Hello","keyboard"),c.Undo.runEditorCommand(null,n,null);const I=e.getVersionId(),b=e.getAlternativeVersionId();a.notStrictEqual(i,I),a.strictEqual(f,b)})}),test("Enter honors increaseIndentPattern",()=>{E({text:["if (true) {","	if (true) {"],languageId:m,modelOpts:{insertSpaces:!1},editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,1,12,!1),r(t,new s(1,12,1,12)),t.type(`
`,"keyboard"),n.tokenization.forceTokenization(n.getLineCount()),r(t,new s(2,2,2,2)),l(e,t,3,13,!1),r(t,new s(3,13,3,13)),t.type(`
`,"keyboard"),r(t,new s(4,3,4,3))})}),test("Type honors decreaseIndentPattern",()=>{E({text:["if (true) {","	"],languageId:m,editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,2,2,!1),r(t,new s(2,2,2,2)),t.type("}","keyboard"),r(t,new s(2,2,2,2)),a.strictEqual(n.getLineContent(2),"}","001")})}),test("Enter honors unIndentedLinePattern",()=>{E({text:["if (true) {","			return true"],languageId:m,modelOpts:{insertSpaces:!1},editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,2,15,!1),r(t,new s(2,15,2,15)),t.type(`
`,"keyboard"),r(t,new s(3,2,3,2))})}),test("Enter honors indentNextLinePattern",()=>{E({text:["if (true)","	return true;","if (true)","				return true"],languageId:m,modelOpts:{insertSpaces:!1},editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,2,14,!1),r(t,new s(2,14,2,14)),t.type(`
`,"keyboard"),n.tokenization.forceTokenization(n.getLineCount()),r(t,new s(3,1,3,1)),l(e,t,5,16,!1),r(t,new s(5,16,5,16)),t.type(`
`,"keyboard"),r(t,new s(6,2,6,2))})}),test("Enter honors indentNextLinePattern 2",()=>{const e=q(["if (true)","	if (true)"].join(`
`),m,{insertSpaces:!1});L(e,{autoIndent:"full"},(n,t)=>{l(n,t,2,11,!1),r(t,new s(2,11,2,11)),t.type(`
`,"keyboard"),e.tokenization.forceTokenization(e.getLineCount()),r(t,new s(3,3,3,3)),t.type("console.log();","keyboard"),t.type(`
`,"keyboard"),r(t,new s(4,1,4,1))})}),test("Enter honors intential indent",()=>{E({text:["if (true) {","	if (true) {","return true;","}}"],languageId:m,editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,3,13,!1),r(t,new s(3,13,3,13)),t.type(`
`,"keyboard"),r(t,new s(4,1,4,1)),a.strictEqual(n.getLineContent(3),"return true;","001")})}),test("Enter supports selection 1",()=>{E({text:["if (true) {","	if (true) {","		return true;","	}a}"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,4,3,!1),l(e,t,4,4,!0),r(t,new s(4,3,4,4)),t.type(`
`,"keyboard"),r(t,new s(5,1,5,1)),a.strictEqual(n.getLineContent(4),"	}","001")})}),test("Enter supports selection 2",()=>{E({text:["if (true) {","	if (true) {"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,2,12,!1),l(e,t,2,13,!0),r(t,new s(2,12,2,13)),t.type(`
`,"keyboard"),r(t,new s(3,3,3,3)),t.type(`
`,"keyboard"),r(t,new s(4,3,4,3))})}),test("Enter honors tabSize and insertSpaces 1",()=>{E({text:["if (true) {","	if (true) {"],languageId:m},(e,n,t)=>{l(e,t,1,12,!1),r(t,new s(1,12,1,12)),t.type(`
`,"keyboard"),r(t,new s(2,5,2,5)),n.tokenization.forceTokenization(n.getLineCount()),l(e,t,3,13,!1),r(t,new s(3,13,3,13)),t.type(`
`,"keyboard"),r(t,new s(4,9,4,9))})}),test("Enter honors tabSize and insertSpaces 2",()=>{E({text:["if (true) {","    if (true) {"],languageId:m},(e,n,t)=>{l(e,t,1,12,!1),r(t,new s(1,12,1,12)),t.type(`
`,"keyboard"),n.tokenization.forceTokenization(n.getLineCount()),r(t,new s(2,5,2,5)),l(e,t,3,16,!1),r(t,new s(3,16,3,16)),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(3),"    if (true) {"),r(t,new s(4,9,4,9))})}),test("Enter honors tabSize and insertSpaces 3",()=>{E({text:["if (true) {","    if (true) {"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,1,12,!1),r(t,new s(1,12,1,12)),t.type(`
`,"keyboard"),n.tokenization.forceTokenization(n.getLineCount()),r(t,new s(2,2,2,2)),l(e,t,3,16,!1),r(t,new s(3,16,3,16)),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(3),"    if (true) {"),r(t,new s(4,3,4,3))})}),test("Enter supports intentional indentation",()=>{E({text:["	if (true) {","		switch(true) {","			case true:","				break;","		}","	}"],languageId:m,modelOpts:{insertSpaces:!1},editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,5,4,!1),r(t,new s(5,4,5,4)),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(5),"		}"),r(t,new s(6,3,6,3))})}),test("Enter should not adjust cursor position when press enter in the middle of a line 1",()=>{E({text:["if (true) {","	if (true) {","		return true;","	}a}"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,3,9,!1),r(t,new s(3,9,3,9)),t.type(`
`,"keyboard"),r(t,new s(4,3,4,3)),a.strictEqual(n.getLineContent(4),"		 true;","001")})}),test("Enter should not adjust cursor position when press enter in the middle of a line 2",()=>{E({text:["if (true) {","	if (true) {","		return true;","	}a}"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,3,3,!1),r(t,new s(3,3,3,3)),t.type(`
`,"keyboard"),r(t,new s(4,3,4,3)),a.strictEqual(n.getLineContent(4),"		return true;","001")})}),test("Enter should not adjust cursor position when press enter in the middle of a line 3",()=>{E({text:["if (true) {","  if (true) {","    return true;","  }a}"],languageId:m},(e,n,t)=>{l(e,t,3,11,!1),r(t,new s(3,11,3,11)),t.type(`
`,"keyboard"),r(t,new s(4,5,4,5)),a.strictEqual(n.getLineContent(4),"     true;","001")})}),test("Enter should adjust cursor position when press enter in the middle of leading whitespaces 1",()=>{E({text:["if (true) {","	if (true) {","		return true;","	}a}"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,3,2,!1),r(t,new s(3,2,3,2)),t.type(`
`,"keyboard"),r(t,new s(4,2,4,2)),a.strictEqual(n.getLineContent(4),"		return true;","001"),l(e,t,4,1,!1),r(t,new s(4,1,4,1)),t.type(`
`,"keyboard"),r(t,new s(5,1,5,1)),a.strictEqual(n.getLineContent(5),"		return true;","002")})}),test("Enter should adjust cursor position when press enter in the middle of leading whitespaces 2",()=>{E({text:["	if (true) {","		if (true) {","	    	return true;","		}a}"],languageId:m,modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,3,4,!1),r(t,new s(3,4,3,4)),t.type(`
`,"keyboard"),r(t,new s(4,3,4,3)),a.strictEqual(n.getLineContent(4),"			return true;","001"),l(e,t,4,1,!1),r(t,new s(4,1,4,1)),t.type(`
`,"keyboard"),r(t,new s(5,1,5,1)),a.strictEqual(n.getLineContent(5),"			return true;","002")})}),test("Enter should adjust cursor position when press enter in the middle of leading whitespaces 3",()=>{E({text:["if (true) {","  if (true) {","    return true;","}a}"],languageId:m},(e,n,t)=>{l(e,t,3,2,!1),r(t,new s(3,2,3,2)),t.type(`
`,"keyboard"),r(t,new s(4,2,4,2)),a.strictEqual(n.getLineContent(4),"    return true;","001"),l(e,t,4,3,!1),t.type(`
`,"keyboard"),r(t,new s(5,3,5,3)),a.strictEqual(n.getLineContent(5),"    return true;","002")})}),test("Enter should adjust cursor position when press enter in the middle of leading whitespaces 4",()=>{E({text:["if (true) {","  if (true) {","	  return true;","}a}","","if (true) {","  if (true) {","	  return true;","}a}"],languageId:m,modelOpts:{tabSize:2,indentSize:2}},(e,n,t)=>{l(e,t,3,3,!1),r(t,new s(3,3,3,3)),t.type(`
`,"keyboard"),r(t,new s(4,4,4,4)),a.strictEqual(n.getLineContent(4),"    return true;","001"),l(e,t,9,4,!1),t.type(`
`,"keyboard"),r(t,new s(10,5,10,5)),a.strictEqual(n.getLineContent(10),"    return true;","001")})}),test("Enter should adjust cursor position when press enter in the middle of leading whitespaces 5",()=>{E({text:["if (true) {","  if (true) {","    return true;","    return true;",""],languageId:m,modelOpts:{tabSize:2}},(e,n,t)=>{l(e,t,3,5,!1),l(e,t,4,3,!0),r(t,new s(3,5,4,3)),t.type(`
`,"keyboard"),r(t,new s(4,3,4,3)),a.strictEqual(n.getLineContent(4),"    return true;","001")})}),test("issue microsoft/monaco-editor#108 part 1/2: Auto indentation on Enter with selection is half broken",()=>{E({text:["function baz() {","	var x = 1;","							return x;","}"],modelOpts:{insertSpaces:!1},languageId:m},(e,n,t)=>{l(e,t,3,8,!1),l(e,t,2,12,!0),r(t,new s(3,8,2,12)),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(3),"	return x;"),r(t,new g(3,2))})}),test("issue microsoft/monaco-editor#108 part 2/2: Auto indentation on Enter with selection is half broken",()=>{E({text:["function baz() {","	var x = 1;","							return x;","}"],modelOpts:{insertSpaces:!1},languageId:m},(e,n,t)=>{l(e,t,2,12,!1),l(e,t,3,8,!0),r(t,new s(2,12,3,8)),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(3),"	return x;"),r(t,new g(3,2))})}),test("onEnter works if there are no indentation rules",()=>{E({text:["<?","	if (true) {","		echo $hi;","		echo $bye;","	}","?>"],modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,5,3,!1),r(t,new s(5,3,5,3)),t.type(`
`,"keyboard"),a.strictEqual(n.getLineContent(6),"	"),r(t,new s(6,2,6,2)),a.strictEqual(n.getLineContent(5),"	}")})}),test("onEnter works if there are no indentation rules 2",()=>{E({text:["	if (5)","		return 5;","	"],modelOpts:{insertSpaces:!1}},(e,n,t)=>{l(e,t,3,2,!1),r(t,new s(3,2,3,2)),t.type(`
`,"keyboard"),r(t,new s(4,2,4,2)),a.strictEqual(n.getLineContent(4),"	")})}),test("bug #16543: Tab should indent to correct indentation spot immediately",()=>{const e=q(["function baz() {","	function hello() { // something here","	","","	}","}"].join(`
`),m,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,4,1,!1),r(t,new s(4,1,4,1)),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(4),"		")})}),test("bug #2938 (1): When pressing Tab on white-space only lines, indent straight to the right spot (similar to empty lines)",()=>{const e=q(["	function baz() {","		function hello() { // something here","		","	","		}","	}"].join(`
`),m,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,4,2,!1),r(t,new s(4,2,4,2)),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(4),"			")})}),test("bug #2938 (2): When pressing Tab on white-space only lines, indent straight to the right spot (similar to empty lines)",()=>{const e=q(["	function baz() {","		function hello() { // something here","		","    ","		}","	}"].join(`
`),m,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,4,1,!1),r(t,new s(4,1,4,1)),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(4),"			")})}),test("bug #2938 (3): When pressing Tab on white-space only lines, indent straight to the right spot (similar to empty lines)",()=>{const e=q(["	function baz() {","		function hello() { // something here","		","			","		}","	}"].join(`
`),m,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,4,3,!1),r(t,new s(4,3,4,3)),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(4),"				")})}),test("bug #2938 (4): When pressing Tab on white-space only lines, indent straight to the right spot (similar to empty lines)",()=>{const e=q(["	function baz() {","		function hello() { // something here","		","				","		}","	}"].join(`
`),m,{insertSpaces:!1});L(e,{},(n,t)=>{l(n,t,4,4,!1),r(t,new s(4,4,4,4)),c.Tab.runEditorCommand(null,n,null),a.strictEqual(e.getLineContent(4),"					")})}),test("bug #31015: When pressing Tab on lines and Enter rules are avail, indent straight to the right spotTab",()=>{const e=o(_.Indent),n=q(["    if (a) {","        ","","","    }"].join(`
`),e);L(n,{},(t,i)=>{l(t,i,3,1),c.Tab.runEditorCommand(null,t,null),a.strictEqual(n.getLineContent(1),"    if (a) {"),a.strictEqual(n.getLineContent(2),"        "),a.strictEqual(n.getLineContent(3),"        "),a.strictEqual(n.getLineContent(4),""),a.strictEqual(n.getLineContent(5),"    }")})}),test("type honors indentation rules: ruby keywords",()=>{const e=z("ruby",{increaseIndentPattern:/^\s*((begin|class|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while)|(.*\sdo\b))\b[^\{;]*$/,decreaseIndentPattern:/^\s*([}\]]([,)]?\s*(#|$)|\.[a-zA-Z_]\w*\b)|(end|rescue|ensure|else|elsif|when)\b)/}),n=q(["class Greeter","  def initialize(name)","    @name = name","    en"].join(`
`),e);L(n,{autoIndent:"full"},(t,i)=>{l(t,i,4,7,!1),r(i,new s(4,7,4,7)),i.type("d","keyboard"),a.strictEqual(n.getLineContent(4),"  end")})}),test("Auto indent on type: increaseIndentPattern has higher priority than decreaseIndent when inheriting",()=>{E({text:["	if (true) {","		console.log();","	} else if {","		console.log()","	}"],languageId:m},(e,n,t)=>{l(e,t,5,3,!1),r(t,new s(5,3,5,3)),t.type("e","keyboard"),r(t,new s(5,4,5,4)),a.strictEqual(n.getLineContent(5),"	}e","This line should not decrease indent")})}),test("type honors users indentation adjustment",()=>{E({text:["	if (true ||","	 ) {","	}","if (true ||",") {","}"],languageId:m},(e,n,t)=>{l(e,t,2,3,!1),r(t,new s(2,3,2,3)),t.type(" ","keyboard"),r(t,new s(2,4,2,4)),a.strictEqual(n.getLineContent(2),"	  ) {","This line should not decrease indent")})}),test("bug 29972: if a line is line comment, open bracket should not indent next line",()=>{E({text:["if (true) {","	// {","		"],languageId:m,editorOpts:{autoIndent:"full"}},(e,n,t)=>{l(e,t,3,3,!1),r(t,new s(3,3,3,3)),t.type("}","keyboard"),r(t,new s(3,2,3,2)),a.strictEqual(n.getLineContent(3),"}")})}),test("issue #38261: TAB key results in bizarre indentation in C++ mode ",()=>{const e="indentRulesMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{brackets:[["{","}"],["[","]"],["(",")"]],indentationRules:{increaseIndentPattern:new RegExp("(^.*\\{[^}]*$)"),decreaseIndentPattern:new RegExp("^\\s*\\}")}}));const n=q(["int main() {","  return 0;","}","","bool Foo::bar(const string &a,","              const string &b) {","  foo();","",")"].join(`
`),e,{tabSize:2,indentSize:2});L(n,{autoIndent:"advanced"},(t,i)=>{l(t,i,8,1,!1),r(i,new s(8,1,8,1)),c.Tab.runEditorCommand(null,t,null),a.strictEqual(n.getValue(),["int main() {","  return 0;","}","","bool Foo::bar(const string &a,","              const string &b) {","  foo();","  ",")"].join(`
`)),a.deepStrictEqual(i.getSelection(),new s(8,3,8,3))})}),test("issue #57197: indent rules regex should be stateless",()=>{const e=z("lang",{decreaseIndentPattern:/^\s*}$/gm,increaseIndentPattern:/^(?![^\S\n]*(?!--|––|——)(?:[-❍❑■⬜□☐▪▫–—≡→›✘xX✔✓☑+]|\[[ xX+-]?\])\s[^\n]*)[^\S\n]*(.+:)[^\S\n]*(?:(?=@[^\s*~(]+(?::\/\/[^\s*~(:]+)?(?:\([^)]*\))?)|$)/gm});E({text:["Project:"],languageId:e,modelOpts:{insertSpaces:!1},editorOpts:{autoIndent:"full"}},(n,t,i)=>{l(n,i,1,9,!1),r(i,new s(1,9,1,9)),i.type(`
`,"keyboard"),t.tokenization.forceTokenization(t.getLineCount()),r(i,new s(2,2,2,2)),l(n,i,1,9,!1),r(i,new s(1,9,1,9)),i.type(`
`,"keyboard"),t.tokenization.forceTokenization(t.getLineCount()),r(i,new s(2,2,2,2))})}),test("typing in json",()=>{const e="indentRulesMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{brackets:[["{","}"],["[","]"],["(",")"]],indentationRules:{increaseIndentPattern:new RegExp('({+(?=([^"]*"[^"]*")*[^"}]*$))|(\\[+(?=([^"]*"[^"]*")*[^"\\]]*$))'),decreaseIndentPattern:new RegExp("^\\s*[}\\]],?\\s*$")}}));const n=q(["{",'  "scripts: {"','    "watch": "a {"','    "build{": "b"','    "tasks": []','    "tasks": ["a"]','  "}"','"}"'].join(`
`),e,{tabSize:2,indentSize:2});L(n,{autoIndent:"full"},(t,i)=>{l(t,i,3,19,!1),r(i,new s(3,19,3,19)),i.type(`
`,"keyboard"),a.deepStrictEqual(n.getLineContent(4),"    "),l(t,i,5,18,!1),r(i,new s(5,18,5,18)),i.type(`
`,"keyboard"),a.deepStrictEqual(n.getLineContent(6),"    "),l(t,i,7,15,!1),r(i,new s(7,15,7,15)),i.type(`
`,"keyboard"),a.deepStrictEqual(n.getLineContent(8),"      "),a.deepStrictEqual(n.getLineContent(9),"    ]"),l(t,i,10,18,!1),r(i,new s(10,18,10,18)),i.type(`
`,"keyboard"),a.deepStrictEqual(n.getLineContent(11),"    ]")})}),test("issue #111128: Multicursor `Enter` issue with indentation",()=>{const e=q("    let a, b, c;",m,{detectIndentation:!1,insertSpaces:!1,tabSize:4});L(e,{},(n,t)=>{n.setSelections([new s(1,11,1,11),new s(1,14,1,14)]),t.type(`
`,"keyboard"),a.strictEqual(e.getValue(),`    let a,
	 b,
	 c;`)})}),test("issue #122714: tabSize=1 prevent typing a string matching decreaseIndentPattern in an empty file",()=>{const e=z("latex",{increaseIndentPattern:new RegExp("\\\\begin{(?!document)([^}]*)}(?!.*\\\\end{\\1})"),decreaseIndentPattern:new RegExp("^\\s*\\\\end{(?!document)")}),n=q("\\end",e,{tabSize:1});L(n,{autoIndent:"full"},(t,i)=>{l(t,i,1,5,!1),r(i,new s(1,5,1,5)),i.type("{","keyboard"),a.strictEqual(n.getLineContent(1),"\\end{}")})}),test("ElectricCharacter - does nothing if no electric char",()=>{E({text:["  if (a) {",""],languageId:p},(e,n,t)=>{l(e,t,2,1),t.type("*","keyboard"),a.deepStrictEqual(n.getLineContent(2),"*")})}),test("ElectricCharacter - indents in order to match bracket",()=>{E({text:["  if (a) {",""],languageId:p},(e,n,t)=>{l(e,t,2,1),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(2),"  }")})}),test("ElectricCharacter - unindents in order to match bracket",()=>{E({text:["  if (a) {","    "],languageId:p},(e,n,t)=>{l(e,t,2,5),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(2),"  }")})}),test("ElectricCharacter - matches with correct bracket",()=>{E({text:["  if (a) {","    if (b) {","    }","    "],languageId:p},(e,n,t)=>{l(e,t,4,1),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(4),"  }    ")})}),test("ElectricCharacter - does nothing if bracket does not match",()=>{E({text:["  if (a) {","    if (b) {","    }","  }  "],languageId:p},(e,n,t)=>{l(e,t,4,6),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(4),"  }  }")})}),test("ElectricCharacter - matches bracket even in line with content",()=>{E({text:["  if (a) {","// hello"],languageId:p},(e,n,t)=>{l(e,t,2,1),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(2),"  }// hello")})}),test("ElectricCharacter - is no-op if bracket is lined up",()=>{E({text:["  if (a) {","  "],languageId:p},(e,n,t)=>{l(e,t,2,3),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(2),"  }")})}),test("ElectricCharacter - is no-op if there is non-whitespace text before",()=>{E({text:["  if (a) {","a"],languageId:p},(e,n,t)=>{l(e,t,2,2),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(2),"a}")})}),test("ElectricCharacter - is no-op if pairs are all matched before",()=>{E({text:["foo(() => {","  ( 1 + 2 ) ","})"],languageId:p},(e,n,t)=>{l(e,t,2,13),t.type("*","keyboard"),a.deepStrictEqual(n.getLineContent(2),"  ( 1 + 2 ) *")})}),test("ElectricCharacter - is no-op if matching bracket is on the same line",()=>{E({text:["(div"],languageId:p},(e,n,t)=>{l(e,t,1,5);let i=null;const f=n.onDidChangeContent(I=>{i=I.changes[0].text});t.type(")","keyboard"),a.deepStrictEqual(n.getLineContent(1),"(div)"),a.deepStrictEqual(i,")"),f.dispose()})}),test("ElectricCharacter - is no-op if the line has other content",()=>{E({text:["Math.max(","	2","	3"],languageId:p},(e,n,t)=>{l(e,t,3,3),t.type(")","keyboard"),a.deepStrictEqual(n.getLineContent(3),"	3)")})}),test("ElectricCharacter - appends text",()=>{E({text:["  if (a) {","/*"],languageId:p},(e,n,t)=>{l(e,t,2,3),t.type("*","keyboard"),a.deepStrictEqual(n.getLineContent(2),"/** */")})}),test("ElectricCharacter - appends text 2",()=>{E({text:["  if (a) {","  /*"],languageId:p},(e,n,t)=>{l(e,t,2,5),t.type("*","keyboard"),a.deepStrictEqual(n.getLineContent(2),"  /** */")})}),test("ElectricCharacter - issue #23711: Replacing selected text with )]} fails to delete old text with backwards-dragged selection",()=>{E({text:["{","word"],languageId:p},(e,n,t)=>{l(e,t,2,5),l(e,t,2,1,!0),t.type("}","keyboard"),a.deepStrictEqual(n.getLineContent(2),"}")})}),test("issue #61070: backtick (`) should auto-close after a word character",()=>{E({text:["const markup = highlight"],languageId:k},(e,n,t)=>{n.tokenization.forceTokenization(1),j(e,n,t,1,25,"`","``","auto closes ` @ (1, 25)")})}),test("issue #132912: quotes should not auto-close if they are closing a string",()=>{V();const e=q("const t2 = `something ${t1}",k);L(e,{},(n,t)=>{const i=t.model;i.tokenization.forceTokenization(1),j(n,i,t,1,28,"`","`","does not auto close ` @ (1, 28)")})}),test("autoClosingPairs - open parens: default",()=>{E({text:["var a = [];","var b = `asd`;","var c = 'asd';",'var d = "asd";',"var e = /*3*/	3;","var f = /** 3 */3;","var g = (3+5);","var h = { a: 'value' };"],languageId:k},(e,n,t)=>{const i=["var| a| |=| [|]|;|","var| b| |=| |`asd|`|;|","var| c| |=| |'asd|'|;|",'var| d| |=| |"asd|"|;|',"var| e| |=| /*3*/|	3|;|","var| f| |=| /**| 3| */3|;|","var| g| |=| (3+5|)|;|","var| h| |=| {| a|:| |'value|'| |}|;|"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?j(e,n,t,b,h,"(","()",`auto closes @ (${b}, ${h})`):j(e,n,t,b,h,"(","(",`does not auto close @ (${b}, ${h})`)}})}),test("autoClosingPairs - open parens: whitespace",()=>{E({text:["var a = [];","var b = `asd`;","var c = 'asd';",'var d = "asd";',"var e = /*3*/	3;","var f = /** 3 */3;","var g = (3+5);","var h = { a: 'value' };"],languageId:k,editorOpts:{autoClosingBrackets:"beforeWhitespace"}},(e,n,t)=>{const i=["var| a| =| [|];|","var| b| =| `asd`;|","var| c| =| 'asd';|",'var| d| =| "asd";|',"var| e| =| /*3*/|	3;|","var| f| =| /**| 3| */3;|","var| g| =| (3+5|);|","var| h| =| {| a:| 'value'| |};|"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?j(e,n,t,b,h,"(","()",`auto closes @ (${b}, ${h})`):j(e,n,t,b,h,"(","(",`does not auto close @ (${b}, ${h})`)}})}),test("autoClosingPairs - open parens disabled/enabled open quotes enabled/disabled",()=>{E({text:["var a = [];"],languageId:k,editorOpts:{autoClosingBrackets:"beforeWhitespace",autoClosingQuotes:"never"}},(e,n,t)=>{const i=["var| a| =| [|];|"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?j(e,n,t,b,h,"(","()",`auto closes @ (${b}, ${h})`):j(e,n,t,b,h,"(","(",`does not auto close @ (${b}, ${h})`),j(e,n,t,b,h,"'","'",`does not auto close @ (${b}, ${h})`)}}),E({text:["var b = [];"],languageId:k,editorOpts:{autoClosingBrackets:"never",autoClosingQuotes:"beforeWhitespace"}},(e,n,t)=>{const i=["var b =| [|];|"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?j(e,n,t,b,h,"'","''",`auto closes @ (${b}, ${h})`):j(e,n,t,b,h,"'","'",`does not auto close @ (${b}, ${h})`),j(e,n,t,b,h,"(","(",`does not auto close @ (${b}, ${h})`)}})}),test("autoClosingPairs - configurable open parens",()=>{X("abc"),E({text:["var a = [];","var b = `asd`;","var c = 'asd';",'var d = "asd";',"var e = /*3*/	3;","var f = /** 3 */3;","var g = (3+5);","var h = { a: 'value' };"],languageId:k,editorOpts:{autoClosingBrackets:"languageDefined"}},(e,n,t)=>{const i=["v|ar |a = [|];|","v|ar |b = `|asd`;|","v|ar |c = '|asd';|",'v|ar d = "|asd";|',"v|ar e = /*3*/	3;|","v|ar f = /** 3| */3;|","v|ar g = (3+5|);|","v|ar h = { |a: 'v|alue' |};|"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?j(e,n,t,b,h,"(","()",`auto closes @ (${b}, ${h})`):j(e,n,t,b,h,"(","(",`does not auto close @ (${b}, ${h})`)}})}),test("autoClosingPairs - auto-pairing can be disabled",()=>{E({text:["var a = [];","var b = `asd`;","var c = 'asd';",'var d = "asd";',"var e = /*3*/	3;","var f = /** 3 */3;","var g = (3+5);","var h = { a: 'value' };"],languageId:k,editorOpts:{autoClosingBrackets:"never",autoClosingQuotes:"never"}},(e,n,t)=>{const i=["var a = [];","var b = `asd`;","var c = 'asd';",'var d = "asd";',"var e = /*3*/	3;","var f = /** 3 */3;","var g = (3+5);","var h = { a: 'value' };"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?(j(e,n,t,b,h,"(","()",`auto closes @ (${b}, ${h})`),j(e,n,t,b,h,'"','""',`auto closes @ (${b}, ${h})`)):(j(e,n,t,b,h,"(","(",`does not auto close @ (${b}, ${h})`),j(e,n,t,b,h,'"','"',`does not auto close @ (${b}, ${h})`))}})}),test("autoClosingPairs - auto wrapping is configurable",()=>{E({text:["var a = asd"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,4),new s(1,9,1,12)]),t.type("`","keyboard"),a.strictEqual(n.getValue(),"`var` a = `asd`"),t.type("(","keyboard"),a.strictEqual(n.getValue(),"`(var)` a = `(asd)`")}),E({text:["var a = asd"],languageId:k,editorOpts:{autoSurround:"never"}},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,4)]),t.type("`","keyboard"),a.strictEqual(n.getValue(),"` a = asd")}),E({text:["var a = asd"],languageId:k,editorOpts:{autoSurround:"quotes"}},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,4)]),t.type("`","keyboard"),a.strictEqual(n.getValue(),"`var` a = asd"),t.type("(","keyboard"),a.strictEqual(n.getValue(),"`(` a = asd")}),E({text:["var a = asd"],languageId:k,editorOpts:{autoSurround:"brackets"}},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,4)]),t.type("(","keyboard"),a.strictEqual(n.getValue(),"(var) a = asd"),t.type("`","keyboard"),a.strictEqual(n.getValue(),"(`) a = asd")})}),test("autoClosingPairs - quote",()=>{E({text:["var a = [];","var b = `asd`;","var c = 'asd';",'var d = "asd";',"var e = /*3*/	3;","var f = /** 3 */3;","var g = (3+5);","var h = { a: 'value' };"],languageId:k},(e,n,t)=>{const i=["var a |=| [|]|;|","var b |=| `asd`|;|","var c |=| 'asd'|;|",'var d |=| "asd"|;|',"var e |=| /*3*/|	3;|","var f |=| /**| 3 */3;|","var g |=| (3+5)|;|","var h |=| {| a:| 'value'| |}|;|"];for(let f=0,I=i.length;f<I;f++){const b=f+1,x=H(n.getLineMaxColumn(b),i[f]);for(let h=1;h<x.length;h++)n.tokenization.forceTokenization(b),x[h]===1?j(e,n,t,b,h,"'","''",`auto closes @ (${b}, ${h})`):x[h]===2?j(e,n,t,b,h,"'","",`over types @ (${b}, ${h})`):j(e,n,t,b,h,"'","'",`does not auto close @ (${b}, ${h})`)}})}),test("autoClosingPairs - multi-character autoclose",()=>{E({text:[""],languageId:k},(e,n,t)=>{n.setValue("begi"),t.setSelections("test",[new s(1,5,1,5)]),t.type("n","keyboard"),a.strictEqual(n.getLineContent(1),"beginend"),n.setValue("/*"),t.setSelections("test",[new s(1,3,1,3)]),t.type("*","keyboard"),a.strictEqual(n.getLineContent(1),"/** */")})}),test("autoClosingPairs - doc comments can be turned off",()=>{E({text:[""],languageId:k,editorOpts:{autoClosingComments:"never"}},(e,n,t)=>{n.setValue("/*"),t.setSelections("test",[new s(1,3,1,3)]),t.type("*","keyboard"),a.strictEqual(n.getLineContent(1),"/**")})}),test("issue #72177: multi-character autoclose with conflicting patterns",()=>{const e="autoClosingModeMultiChar";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{autoClosingPairs:[{open:"(",close:")"},{open:"(*",close:"*)"},{open:"<@",close:"@>"},{open:"<@@",close:"@@>"}]})),E({text:[""],languageId:e},(n,t,i)=>{i.type("(","keyboard"),a.strictEqual(t.getLineContent(1),"()"),i.type("*","keyboard"),a.strictEqual(t.getLineContent(1),"(**)","doesn't add entire close when already closed substring is there"),t.setValue("("),i.setSelections("test",[new s(1,2,1,2)]),i.type("*","keyboard"),a.strictEqual(t.getLineContent(1),"(**)","does add entire close if not already there"),t.setValue(""),i.type("<@","keyboard"),a.strictEqual(t.getLineContent(1),"<@@>"),i.type("@","keyboard"),a.strictEqual(t.getLineContent(1),"<@@@@>","autocloses when before multi-character closing brace"),i.type("(","keyboard"),a.strictEqual(t.getLineContent(1),"<@@()@@>","autocloses when before multi-character closing brace")})}),test("issue #55314: Do not auto-close when ending with open",()=>{const e="myElectricMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"'",close:"'",notIn:["string","comment"]},{open:'"',close:'"',notIn:["string"]},{open:'B"',close:'"',notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}]})),E({text:["little goat","little LAMB","little sheep","Big LAMB"],languageId:e},(n,t,i)=>{t.tokenization.forceTokenization(t.getLineCount()),j(n,t,i,1,4,'"','"',"does not double quote when ending with open"),t.tokenization.forceTokenization(t.getLineCount()),j(n,t,i,2,4,'"','"',"does not double quote when ending with open"),t.tokenization.forceTokenization(t.getLineCount()),j(n,t,i,3,4,'"','"',"does not double quote when ending with open"),t.tokenization.forceTokenization(t.getLineCount()),j(n,t,i,4,2,'"','"',"does not double quote when ending with open"),t.tokenization.forceTokenization(t.getLineCount()),j(n,t,i,4,3,'"','"',"does not double quote when ending with open")})}),test("issue #27937: Trying to add an item to the front of a list is cumbersome",()=>{E({text:['var arr = ["b", "c"];'],languageId:k},(e,n,t)=>{j(e,n,t,1,12,'"','"',"does not over type and will not auto close")})}),test("issue #25658 - Do not auto-close single/double quotes after word characters",()=>{E({text:[""],languageId:k},(e,n,t)=>{function i(f,I){for(let b=0,x=I.length;b<x;b++)f.type(I[b],"keyboard")}n.tokenization.forceTokenization(n.getLineCount()),i(t,"teste1 = teste' ok"),a.strictEqual(n.getLineContent(1),"teste1 = teste' ok"),t.setSelections("test",[new s(1,1e3,1,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,"teste2 = teste 'ok"),a.strictEqual(n.getLineContent(2),"teste2 = teste 'ok'"),t.setSelections("test",[new s(2,1e3,2,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,'teste3 = teste" ok'),a.strictEqual(n.getLineContent(3),'teste3 = teste" ok'),t.setSelections("test",[new s(3,1e3,3,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,'teste4 = teste "ok'),a.strictEqual(n.getLineContent(4),'teste4 = teste "ok"'),t.setSelections("test",[new s(4,1e3,4,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,"teste '"),a.strictEqual(n.getLineContent(5),"teste ''"),t.setSelections("test",[new s(5,1e3,5,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,'teste "'),a.strictEqual(n.getLineContent(6),'teste ""'),t.setSelections("test",[new s(6,1e3,6,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,"teste'"),a.strictEqual(n.getLineContent(7),"teste'"),t.setSelections("test",[new s(7,1e3,7,1e3)]),i(t,`
`),n.tokenization.forceTokenization(n.getLineCount()),i(t,'teste"'),a.strictEqual(n.getLineContent(8),'teste"')})}),test("issue #37315 - overtypes only those characters that it inserted",()=>{E({text:["","y=();"],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.type("x=(","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.type("asd","keyboard"),a.strictEqual(n.getLineContent(1),"x=(asd)"),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=(asd)"),t.setSelections("test",[new s(2,4,2,4)]),t.type(")","keyboard"),a.strictEqual(n.getLineContent(2),"y=());")})}),test("issue #37315 - stops overtyping once cursor leaves area",()=>{E({text:["","y=();"],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.type("x=(","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.setSelections("test",[new s(1,5,1,5)]),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=())")})}),test("issue #37315 - it overtypes only once",()=>{E({text:["","y=();"],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.type("x=(","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.setSelections("test",[new s(1,4,1,4)]),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=())")})}),test("issue #37315 - it can remember multiple auto-closed instances",()=>{E({text:["","y=();"],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.type("x=(","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.type("(","keyboard"),a.strictEqual(n.getLineContent(1),"x=(())"),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=(())"),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=(())")})}),test("issue #118270 - auto closing deletes only those characters that it inserted",()=>{E({text:["","y=();"],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.type("x=(","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.type("asd","keyboard"),a.strictEqual(n.getLineContent(1),"x=(asd)"),c.DeleteLeft.runEditorCommand(null,e,null),c.DeleteLeft.runEditorCommand(null,e,null),c.DeleteLeft.runEditorCommand(null,e,null),a.strictEqual(n.getLineContent(1),"x=()"),c.DeleteLeft.runEditorCommand(null,e,null),a.strictEqual(n.getLineContent(1),"x="),t.setSelections("test",[new s(2,4,2,4)]),c.DeleteLeft.runEditorCommand(null,e,null),a.strictEqual(n.getLineContent(2),"y=);")})}),test("issue #78527 - does not close quote on odd count",()=>{E({text:[`std::cout << '"' << entryMap`],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,29,1,29)]),t.type("[","keyboard"),a.strictEqual(n.getLineContent(1),`std::cout << '"' << entryMap[]`),t.type('"',"keyboard"),a.strictEqual(n.getLineContent(1),`std::cout << '"' << entryMap[""]`),t.type("a","keyboard"),a.strictEqual(n.getLineContent(1),`std::cout << '"' << entryMap["a"]`),t.type('"',"keyboard"),a.strictEqual(n.getLineContent(1),`std::cout << '"' << entryMap["a"]`),t.type("]","keyboard"),a.strictEqual(n.getLineContent(1),`std::cout << '"' << entryMap["a"]`)})}),test("issue #85983 - editor.autoClosingBrackets: beforeWhitespace is incorrect for Python",()=>{const e="pythonMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:'r"',close:'"',notIn:["string","comment"]},{open:'R"',close:'"',notIn:["string","comment"]},{open:'u"',close:'"',notIn:["string","comment"]},{open:'U"',close:'"',notIn:["string","comment"]},{open:'f"',close:'"',notIn:["string","comment"]},{open:'F"',close:'"',notIn:["string","comment"]},{open:'b"',close:'"',notIn:["string","comment"]},{open:'B"',close:'"',notIn:["string","comment"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"r'",close:"'",notIn:["string","comment"]},{open:"R'",close:"'",notIn:["string","comment"]},{open:"u'",close:"'",notIn:["string","comment"]},{open:"U'",close:"'",notIn:["string","comment"]},{open:"f'",close:"'",notIn:["string","comment"]},{open:"F'",close:"'",notIn:["string","comment"]},{open:"b'",close:"'",notIn:["string","comment"]},{open:"B'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string"]}]})),E({text:["foo'hello'"],editorOpts:{autoClosingBrackets:"beforeWhitespace"},languageId:e},(n,t,i)=>{j(n,t,i,1,4,"(","(","does not auto close @ (1, 4)")})}),test("issue #78975 - Parentheses swallowing does not work when parentheses are inserted by autocomplete",()=>{E({text:["<div id"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,8,1,8)]),t.executeEdits("snippet",[{range:new N(1,6,1,8),text:'id=""'}],()=>[new s(1,10,1,10)]),a.strictEqual(n.getLineContent(1),'<div id=""'),t.type("a","keyboard"),a.strictEqual(n.getLineContent(1),'<div id="a"'),t.type('"',"keyboard"),a.strictEqual(n.getLineContent(1),'<div id="a"')})}),test("issue #78833 - Add config to use old brackets/quotes overtyping",()=>{E({text:["","y=();"],languageId:k,editorOpts:{autoClosingOvertype:"always"}},(e,n,t)=>{r(t,new g(1,1)),t.type("x=(","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.setSelections("test",[new s(1,4,1,4)]),t.type(")","keyboard"),a.strictEqual(n.getLineContent(1),"x=()"),t.setSelections("test",[new s(2,4,2,4)]),t.type(")","keyboard"),a.strictEqual(n.getLineContent(2),"y=();")})}),test("issue #15825: accents on mac US intl keyboard",()=>{E({text:[],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.startComposition(),t.type("`","keyboard"),t.compositionType("\xE8",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"\xE8")})}),test("issue #90016: allow accents on mac US intl keyboard to surround selection",()=>{E({text:["test"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,5)]),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"'test'")})}),test("issue #53357: Over typing ignores characters after backslash",()=>{E({text:["console.log();"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,13,1,13)]),t.type("'","keyboard"),a.strictEqual(n.getValue(),"console.log('');"),t.type("it","keyboard"),a.strictEqual(n.getValue(),"console.log('it');"),t.type("\\","keyboard"),a.strictEqual(n.getValue(),"console.log('it\\');"),t.type("'","keyboard"),a.strictEqual(n.getValue(),"console.log('it\\'');")})}),test("issue #84998: Overtyping Brackets doesn't work after backslash",()=>{E({text:[""],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,1,1,1)]),t.type("\\","keyboard"),a.strictEqual(n.getValue(),"\\"),t.type("(","keyboard"),a.strictEqual(n.getValue(),"\\()"),t.type("abc","keyboard"),a.strictEqual(n.getValue(),"\\(abc)"),t.type("\\","keyboard"),a.strictEqual(n.getValue(),"\\(abc\\)"),t.type(")","keyboard"),a.strictEqual(n.getValue(),"\\(abc\\)")})}),test("issue #2773: Accents (\xB4`\xA8^, others?) are inserted in the wrong position (Mac)",()=>{E({text:["hello","world"],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.startComposition(),t.type("`","keyboard"),R(e,t,!0),t.compositionType("`",1,0,0,"keyboard"),t.compositionType("`",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"`hello\nworld"),r(t,new s(1,2,2,2))})}),test("issue #26820: auto close quotes when not used as accents",()=>{E({text:[""],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"''"),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"''"),n.setValue("'abc"),t.setSelections("test",[new s(1,5,1,5)]),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"'abc'"),n.setValue("'abc'def "),t.setSelections("test",[new s(1,10,1,10)]),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"'abc'def ''"),n.setValue("abc"),t.setSelections("test",[new s(1,1,1,1)]),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),n.setValue("abc"),t.setSelections("test",[new s(1,4,1,4)]),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"abc'")})}),test("issue #144690: Quotes do not overtype when using US Intl PC keyboard layout",()=>{E({text:[""],languageId:k},(e,n,t)=>{r(t,new g(1,1)),t.startComposition(),t.type("'","keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.compositionType("'",1,0,0,"keyboard"),t.endComposition("keyboard"),t.startComposition(),t.type("'","keyboard"),t.compositionType("';",1,0,0,"keyboard"),t.compositionType("';",2,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"'';")})}),test("issue #144693: Typing a quote using US Intl PC keyboard layout always surrounds words",()=>{E({text:["const hello = 3;"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,7,1,12)]),t.startComposition(),t.type("'","keyboard"),t.compositionType("\xE9",1,0,0,"keyboard"),t.compositionType("\xE9",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"const \xE9 = 3;")})}),test("issue #82701: auto close does not execute when IME is canceled via backspace",()=>{E({text:["{}"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,2,1,2)]),t.startComposition(),t.type("a","keyboard"),t.compositionType("",1,0,0,"keyboard"),t.endComposition("keyboard"),a.strictEqual(n.getValue(),"{}")})}),test("issue #20891: All cursors should do the same thing",()=>{E({text:["var a = asd"],languageId:k},(e,n,t)=>{t.setSelections("test",[new s(1,9,1,9),new s(1,12,1,12)]),t.type("`","keyboard"),a.strictEqual(n.getValue(),"var a = `asd`")})}),test("issue #41825: Special handling of quotes in surrounding pairs",()=>{const e="myMode";T.add(u.registerLanguage({id:e})),T.add(y.register(e,{surroundingPairs:[{open:'"',close:'"'},{open:"'",close:"'"}]}));const n=q("var x = 'hi';",e);L(n,{},(t,i)=>{t.setSelections([new s(1,9,1,10),new s(1,12,1,13)]),i.type('"',"keyboard"),a.strictEqual(n.getValue(S.LF),'var x = "hi";',"assert1"),t.setSelections([new s(1,9,1,10),new s(1,12,1,13)]),i.type("'","keyboard"),a.strictEqual(n.getValue(S.LF),"var x = 'hi';","assert2")})}),test("All cursors should do the same thing when deleting left",()=>{const e=q(["var a = ()"].join(`
`),k);L(e,{},(n,t)=>{t.setSelections("test",[new s(1,4,1,4),new s(1,10,1,10)]),c.DeleteLeft.runEditorCommand(null,n,null),a.strictEqual(e.getValue(),"va a = )")})}),test("issue #7100: Mouse word selection is strange when non-word character is at the end of line",()=>{const e=q(["before.a","before","hello:","there:","this is strange:","here","it","is"].join(`
`));L(e,{},(n,t)=>{C.WordSelect.runEditorCommand(null,n,{position:new g(3,7)}),r(t,new s(3,7,3,7)),C.WordSelectDrag.runEditorCommand(null,n,{position:new g(4,7)}),r(t,new s(3,7,4,7))})}),test("issue #112039: shift-continuing a double/triple-click and drag selection does not remember its starting mode",()=>{const e=q(["just some text","and another line","and another one"].join(`
`));L(e,{},(n,t)=>{C.WordSelect.runEditorCommand(null,n,{position:new g(2,6)}),C.MoveToSelect.runEditorCommand(null,n,{position:new g(1,8)}),r(t,new s(2,12,1,6))})}),test("issue #158236: Shift click selection does not work on line number indicator",()=>{const e=q(["just some text","and another line","and another one"].join(`
`));L(e,{},(n,t)=>{C.MoveTo.runEditorCommand(null,n,{position:new g(3,5)}),C.LineSelectDrag.runEditorCommand(null,n,{position:new g(2,1)}),r(t,new s(3,5,2,1))})}),test("issue #111513: Text gets automatically selected when typing at the same location in another editor",()=>{const e=q(["just","","some text"].join(`
`));L(e,{},(n,t)=>{n.setSelections([new s(2,1,2,1)]),L(e,{},(i,f)=>{i.setSelections([new s(2,1,2,1)]),f.type("e","keyboard"),r(f,new g(2,2)),r(t,new g(2,2))})})})}),suite("Undo stops",()=>{v(),test("there is an undo stop between typing and deleting left",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(1,3,1,3)]),p.type("first","keyboard"),a.strictEqual(d.getLineContent(1),"A first line"),r(p,new s(1,8,1,8)),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A fir line"),r(p,new s(1,6,1,6)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A first line"),r(p,new s(1,8,1,8)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A  line"),r(p,new s(1,3,1,3))}),d.dispose()}),test("there is an undo stop between typing and deleting right",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(1,3,1,3)]),p.type("first","keyboard"),a.strictEqual(d.getLineContent(1),"A first line"),r(p,new s(1,8,1,8)),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A firstine"),r(p,new s(1,8,1,8)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A first line"),r(p,new s(1,8,1,8)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A  line"),r(p,new s(1,3,1,3))}),d.dispose()}),test("there is an undo stop between deleting left and typing",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(2,8,2,8)]),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2)," line"),r(p,new s(2,1,2,1)),p.type("Second","keyboard"),a.strictEqual(d.getLineContent(2),"Second line"),r(p,new s(2,7,2,7)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2)," line"),r(p,new s(2,1,2,1)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another line"),r(p,new s(2,8,2,8))}),d.dispose()}),test("there is an undo stop between deleting left and deleting right",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(2,8,2,8)]),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2)," line"),r(p,new s(2,1,2,1)),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),""),r(p,new s(2,1,2,1)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2)," line"),r(p,new s(2,1,2,1)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another line"),r(p,new s(2,8,2,8))}),d.dispose()}),test("there is an undo stop between deleting right and typing",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(2,9,2,9)]),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another "),r(p,new s(2,9,2,9)),p.type("text","keyboard"),a.strictEqual(d.getLineContent(2),"Another text"),r(p,new s(2,13,2,13)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another "),r(p,new s(2,9,2,9)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another line"),r(p,new s(2,9,2,9))}),d.dispose()}),test("there is an undo stop between deleting right and deleting left",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(2,9,2,9)]),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),c.DeleteRight.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another "),r(p,new s(2,9,2,9)),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),c.DeleteLeft.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"An"),r(p,new s(2,3,2,3)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another "),r(p,new s(2,9,2,9)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(2),"Another line"),r(p,new s(2,9,2,9))}),d.dispose()}),test("inserts undo stop when typing space",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(1,3,1,3)]),p.type("first and interesting","keyboard"),a.strictEqual(d.getLineContent(1),"A first and interesting line"),r(p,new s(1,24,1,24)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A first and line"),r(p,new s(1,12,1,12)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A first line"),r(p,new s(1,8,1,8)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getLineContent(1),"A  line"),r(p,new s(1,3,1,3))}),d.dispose()}),test("can undo typing and EOL change in one undo stop",()=>{const d=J(["A  line","Another line"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(1,3,1,3)]),p.type("first","keyboard"),a.strictEqual(d.getValue(),`A first line
Another line`),r(p,new s(1,8,1,8)),d.pushEOL(G.CRLF),a.strictEqual(d.getValue(),`A first line\r
Another line`),r(p,new s(1,8,1,8)),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(),`A  line
Another line`),r(p,new s(1,3,1,3))}),d.dispose()}),test("issue #93585: Undo multi cursor edit corrupts document",()=>{const d=J(["hello world","hello world"].join(`
`));O(d,{},(m,p)=>{p.setSelections("test",[new s(2,7,2,12),new s(1,7,1,12)]),p.type("no","keyboard"),a.strictEqual(d.getValue(),`hello no
hello no`),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(),`hello world
hello world`)}),d.dispose()}),test("there is a single undo stop for consecutive whitespaces",()=>{const d=J([""].join(`
`),void 0,{insertSpaces:!1});O(d,{},(m,p)=>{p.type("a","keyboard"),p.type("b","keyboard"),p.type(" ","keyboard"),p.type(" ","keyboard"),p.type("c","keyboard"),p.type("d","keyboard"),a.strictEqual(d.getValue(S.LF),"ab  cd","assert1"),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(S.LF),"ab  ","assert2"),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(S.LF),"ab","assert3"),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(S.LF),"","assert4")}),d.dispose()}),test("there is no undo stop after a single whitespace",()=>{const d=J([""].join(`
`),void 0,{insertSpaces:!1});O(d,{},(m,p)=>{p.type("a","keyboard"),p.type("b","keyboard"),p.type(" ","keyboard"),p.type("c","keyboard"),p.type("d","keyboard"),a.strictEqual(d.getValue(S.LF),"ab cd","assert1"),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(S.LF),"ab","assert3"),c.Undo.runEditorCommand(null,m,null),a.strictEqual(d.getValue(S.LF),"","assert4")}),d.dispose()})});
