{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/controller/textAreaState.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ITextAreaWrapper, TextAreaState } from '../../../browser/controller/editContext/textArea/textAreaEditContextState.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { createTextModel } from '../../common/testTextModel.js';\nimport { PagedScreenReaderStrategy } from '../../../browser/controller/editContext/screenReaderUtils.js';\n\nclass MockTextAreaWrapper extends Disposable implements ITextAreaWrapper {\n\n\tpublic _value: string;\n\tpublic _selectionStart: number;\n\tpublic _selectionEnd: number;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._value = '';\n\t\tthis._selectionStart = 0;\n\t\tthis._selectionEnd = 0;\n\t}\n\n\tpublic getValue(): string {\n\t\treturn this._value;\n\t}\n\n\tpublic setValue(reason: string, value: string): void {\n\t\tthis._value = value;\n\t\tthis._selectionStart = this._value.length;\n\t\tthis._selectionEnd = this._value.length;\n\t}\n\n\tpublic getSelectionStart(): number {\n\t\treturn this._selectionStart;\n\t}\n\n\tpublic getSelectionEnd(): number {\n\t\treturn this._selectionEnd;\n\t}\n\n\tpublic setSelectionRange(reason: string, selectionStart: number, selectionEnd: number): void {\n\t\tif (selectionStart < 0) {\n\t\t\tselectionStart = 0;\n\t\t}\n\t\tif (selectionStart > this._value.length) {\n\t\t\tselectionStart = this._value.length;\n\t\t}\n\t\tif (selectionEnd < 0) {\n\t\t\tselectionEnd = 0;\n\t\t}\n\t\tif (selectionEnd > this._value.length) {\n\t\t\tselectionEnd = this._value.length;\n\t\t}\n\t\tthis._selectionStart = selectionStart;\n\t\tthis._selectionEnd = selectionEnd;\n\t}\n}\n\nfunction equalsTextAreaState(a: TextAreaState, b: TextAreaState): boolean {\n\treturn (\n\t\ta.value === b.value\n\t\t&& a.selectionStart === b.selectionStart\n\t\t&& a.selectionEnd === b.selectionEnd\n\t\t&& Range.equalsRange(a.selection, b.selection)\n\t\t&& a.newlineCountBeforeSelection === b.newlineCountBeforeSelection\n\t);\n}\n\nsuite('TextAreaState', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertTextAreaState(actual: TextAreaState, value: string, selectionStart: number, selectionEnd: number): void {\n\t\tconst desired = new TextAreaState(value, selectionStart, selectionEnd, null, undefined);\n\t\tassert.ok(equalsTextAreaState(desired, actual), desired.toString() + ' == ' + actual.toString());\n\t}\n\n\ttest('fromTextArea', () => {\n\t\tconst textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = 'Hello world!';\n\t\ttextArea._selectionStart = 1;\n\t\ttextArea._selectionEnd = 12;\n\t\tlet actual = TextAreaState.readFromTextArea(textArea, null);\n\n\t\tassertTextAreaState(actual, 'Hello world!', 1, 12);\n\t\tassert.strictEqual(actual.value, 'Hello world!');\n\t\tassert.strictEqual(actual.selectionStart, 1);\n\n\t\tactual = actual.collapseSelection();\n\t\tassertTextAreaState(actual, 'Hello world!', 12, 12);\n\n\t\ttextArea.dispose();\n\t});\n\n\ttest('applyToTextArea', () => {\n\t\tconst textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = 'Hello world!';\n\t\ttextArea._selectionStart = 1;\n\t\ttextArea._selectionEnd = 12;\n\n\t\tlet state = new TextAreaState('Hi world!', 2, 2, null, undefined);\n\t\tstate.writeToTextArea('test', textArea, false);\n\n\t\tassert.strictEqual(textArea._value, 'Hi world!');\n\t\tassert.strictEqual(textArea._selectionStart, 9);\n\t\tassert.strictEqual(textArea._selectionEnd, 9);\n\n\t\tstate = new TextAreaState('Hi world!', 3, 3, null, undefined);\n\t\tstate.writeToTextArea('test', textArea, false);\n\n\t\tassert.strictEqual(textArea._value, 'Hi world!');\n\t\tassert.strictEqual(textArea._selectionStart, 9);\n\t\tassert.strictEqual(textArea._selectionEnd, 9);\n\n\t\tstate = new TextAreaState('Hi world!', 0, 2, null, undefined);\n\t\tstate.writeToTextArea('test', textArea, true);\n\n\t\tassert.strictEqual(textArea._value, 'Hi world!');\n\t\tassert.strictEqual(textArea._selectionStart, 0);\n\t\tassert.strictEqual(textArea._selectionEnd, 2);\n\n\t\ttextArea.dispose();\n\t});\n\n\tfunction testDeduceInput(prevState: TextAreaState | null, value: string, selectionStart: number, selectionEnd: number, couldBeEmojiInput: boolean, expected: string, expectedCharReplaceCnt: number): void {\n\t\tprevState = prevState || TextAreaState.EMPTY;\n\n\t\tconst textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = value;\n\t\ttextArea._selectionStart = selectionStart;\n\t\ttextArea._selectionEnd = selectionEnd;\n\n\t\tconst newState = TextAreaState.readFromTextArea(textArea, null);\n\t\tconst actual = TextAreaState.deduceInput(prevState, newState, couldBeEmojiInput);\n\n\t\tassert.deepStrictEqual(actual, {\n\t\t\ttext: expected,\n\t\t\treplacePrevCharCnt: expectedCharReplaceCnt,\n\t\t\treplaceNextCharCnt: 0,\n\t\t\tpositionDelta: 0,\n\t\t});\n\n\t\ttextArea.dispose();\n\t}\n\n\ttest('extractNewText - no previous state with selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnull,\n\t\t\t'a',\n\t\t\t0, 1, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('issue #2586: Replacing selected end-of-line with newline locks up the document', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState(']\\n', 1, 2, null, undefined),\n\t\t\t']\\n',\n\t\t\t2, 2, true,\n\t\t\t'\\n', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - no previous state without selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnull,\n\t\t\t'a',\n\t\t\t1, 1, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - typing does not cause a selection', () => {\n\t\ttestDeduceInput(\n\t\t\tTextAreaState.EMPTY,\n\t\t\t'a',\n\t\t\t0, 1, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had the textarea empty', () => {\n\t\ttestDeduceInput(\n\t\t\tTextAreaState.EMPTY,\n\t\t\t'a',\n\t\t\t1, 1, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had the entire line selected', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 0, 12, null, undefined),\n\t\t\t'H',\n\t\t\t1, 1, true,\n\t\t\t'H', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had previous text 1', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 12, 12, null, undefined),\n\t\t\t'Hello world!a',\n\t\t\t13, 13, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had previous text 2', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 0, 0, null, undefined),\n\t\t\t'aHello world!',\n\t\t\t1, 1, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - had previous text 3', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 6, 11, null, undefined),\n\t\t\t'Hello other!',\n\t\t\t11, 11, true,\n\t\t\t'other', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - IME', () => {\n\t\ttestDeduceInput(\n\t\t\tTextAreaState.EMPTY,\n\t\t\t'\u3053\u308C\u306F',\n\t\t\t3, 3, true,\n\t\t\t'\u3053\u308C\u306F', 0\n\t\t);\n\t});\n\n\ttest('extractNewText - isInOverwriteMode', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 0, 0, null, undefined),\n\t\t\t'Aello world!',\n\t\t\t1, 1, true,\n\t\t\t'A', 0\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText - does nothing if there is selection', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 5, 5, null, undefined),\n\t\t\t'Hell\u00F6 world!',\n\t\t\t4, 5, true,\n\t\t\t'\u00F6', 0\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText - does nothing if there is more than one extra char', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 5, 5, null, undefined),\n\t\t\t'Hell\u00F6\u00F6 world!',\n\t\t\t5, 5, true,\n\t\t\t'\u00F6\u00F6', 1\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText - does nothing if there is more than one changed char', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 5, 5, null, undefined),\n\t\t\t'Hel\u00F6\u00F6 world!',\n\t\t\t5, 5, true,\n\t\t\t'\u00F6\u00F6', 2\n\t\t);\n\t});\n\n\ttest('extractMacReplacedText', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('Hello world!', 5, 5, null, undefined),\n\t\t\t'Hell\u00F6 world!',\n\t\t\t5, 5, true,\n\t\t\t'\u00F6', 1\n\t\t);\n\t});\n\n\ttest('issue #25101 - First key press ignored', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('a', 0, 1, null, undefined),\n\t\t\t'a',\n\t\t\t1, 1, true,\n\t\t\t'a', 0\n\t\t);\n\t});\n\n\ttest('issue #16520 - Cmd-d of single character followed by typing same character as has no effect', () => {\n\t\ttestDeduceInput(\n\t\t\tnew TextAreaState('x x', 0, 1, null, undefined),\n\t\t\t'x x',\n\t\t\t1, 1, true,\n\t\t\t'x', 0\n\t\t);\n\t});\n\n\tfunction testDeduceAndroidCompositionInput(\n\t\tprevState: TextAreaState | null,\n\t\tvalue: string, selectionStart: number, selectionEnd: number,\n\t\texpected: string, expectedReplacePrevCharCnt: number, expectedReplaceNextCharCnt: number, expectedPositionDelta: number): void {\n\t\tprevState = prevState || TextAreaState.EMPTY;\n\n\t\tconst textArea = new MockTextAreaWrapper();\n\t\ttextArea._value = value;\n\t\ttextArea._selectionStart = selectionStart;\n\t\ttextArea._selectionEnd = selectionEnd;\n\n\t\tconst newState = TextAreaState.readFromTextArea(textArea, null);\n\t\tconst actual = TextAreaState.deduceAndroidCompositionInput(prevState, newState);\n\n\t\tassert.deepStrictEqual(actual, {\n\t\t\ttext: expected,\n\t\t\treplacePrevCharCnt: expectedReplacePrevCharCnt,\n\t\t\treplaceNextCharCnt: expectedReplaceNextCharCnt,\n\t\t\tpositionDelta: expectedPositionDelta,\n\t\t});\n\n\t\ttextArea.dispose();\n\t}\n\n\ttest('Android composition input 1', () => {\n\t\ttestDeduceAndroidCompositionInput(\n\t\t\tnew TextAreaState('Microsoft', 4, 4, null, undefined),\n\t\t\t'Microsoft',\n\t\t\t4, 4,\n\t\t\t'', 0, 0, 0,\n\t\t);\n\t});\n\n\ttest('Android composition input 2', () => {\n\t\ttestDeduceAndroidCompositionInput(\n\t\t\tnew TextAreaState('Microsoft', 4, 4, null, undefined),\n\t\t\t'Microsoft',\n\t\t\t0, 9,\n\t\t\t'', 0, 0, 5,\n\t\t);\n\t});\n\n\ttest('Android composition input 3', () => {\n\t\ttestDeduceAndroidCompositionInput(\n\t\t\tnew TextAreaState('Microsoft', 0, 9, null, undefined),\n\t\t\t'Microsoft\\'s',\n\t\t\t11, 11,\n\t\t\t'\\'s', 0, 0, 0,\n\t\t);\n\t});\n\n\ttest('Android backspace', () => {\n\t\ttestDeduceAndroidCompositionInput(\n\t\t\tnew TextAreaState('undefinedVariable', 2, 2, null, undefined),\n\t\t\t'udefinedVariable',\n\t\t\t1, 1,\n\t\t\t'', 1, 0, 0,\n\t\t);\n\t});\n\n\tsuite('PagedScreenReaderStrategy', () => {\n\n\t\tfunction testPagedScreenReaderStrategy(lines: string[], selection: Selection, expected: TextAreaState): void {\n\t\t\tconst model = createTextModel(lines.join('\\n'));\n\t\t\tconst screenReaderContentState = PagedScreenReaderStrategy.fromEditorSelection(model, selection, 10, true);\n\t\t\tconst textAreaState = TextAreaState.fromScreenReaderContentState(screenReaderContentState);\n\t\t\tassert.ok(equalsTextAreaState(textAreaState, expected));\n\t\t\tmodel.dispose();\n\t\t}\n\n\t\ttest('simple', () => {\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'Hello world!'\n\t\t\t\t],\n\t\t\t\tnew Selection(1, 13, 1, 13),\n\t\t\t\tnew TextAreaState('Hello world!', 12, 12, new Range(1, 13, 1, 13), 0)\n\t\t\t);\n\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'Hello world!'\n\t\t\t\t],\n\t\t\t\tnew Selection(1, 1, 1, 1),\n\t\t\t\tnew TextAreaState('Hello world!', 0, 0, new Range(1, 1, 1, 1), 0)\n\t\t\t);\n\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'Hello world!'\n\t\t\t\t],\n\t\t\t\tnew Selection(1, 1, 1, 6),\n\t\t\t\tnew TextAreaState('Hello world!', 0, 5, new Range(1, 1, 1, 6), 0)\n\t\t\t);\n\t\t});\n\n\t\ttest('multiline', () => {\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'Hello world!',\n\t\t\t\t\t'How are you?'\n\t\t\t\t],\n\t\t\t\tnew Selection(1, 1, 1, 1),\n\t\t\t\tnew TextAreaState('Hello world!\\nHow are you?', 0, 0, new Range(1, 1, 1, 1), 0)\n\t\t\t);\n\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'Hello world!',\n\t\t\t\t\t'How are you?'\n\t\t\t\t],\n\t\t\t\tnew Selection(2, 1, 2, 1),\n\t\t\t\tnew TextAreaState('Hello world!\\nHow are you?', 13, 13, new Range(2, 1, 2, 1), 1)\n\t\t\t);\n\t\t});\n\n\t\ttest('page', () => {\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'L1\\nL2\\nL3\\nL4\\nL5\\nL6\\nL7\\nL8\\nL9\\nL10\\nL11\\nL12\\nL13\\nL14\\nL15\\nL16\\nL17\\nL18\\nL19\\nL20\\nL21'\n\t\t\t\t],\n\t\t\t\tnew Selection(1, 1, 1, 1),\n\t\t\t\tnew TextAreaState('L1\\nL2\\nL3\\nL4\\nL5\\nL6\\nL7\\nL8\\nL9\\nL10\\n', 0, 0, new Range(1, 1, 1, 1), 0)\n\t\t\t);\n\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'L1\\nL2\\nL3\\nL4\\nL5\\nL6\\nL7\\nL8\\nL9\\nL10\\nL11\\nL12\\nL13\\nL14\\nL15\\nL16\\nL17\\nL18\\nL19\\nL20\\nL21'\n\t\t\t\t],\n\t\t\t\tnew Selection(11, 1, 11, 1),\n\t\t\t\tnew TextAreaState('L11\\nL12\\nL13\\nL14\\nL15\\nL16\\nL17\\nL18\\nL19\\nL20\\n', 0, 0, new Range(11, 1, 11, 1), 0)\n\t\t\t);\n\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'L1\\nL2\\nL3\\nL4\\nL5\\nL6\\nL7\\nL8\\nL9\\nL10\\nL11\\nL12\\nL13\\nL14\\nL15\\nL16\\nL17\\nL18\\nL19\\nL20\\nL21'\n\t\t\t\t],\n\t\t\t\tnew Selection(12, 1, 12, 1),\n\t\t\t\tnew TextAreaState('L11\\nL12\\nL13\\nL14\\nL15\\nL16\\nL17\\nL18\\nL19\\nL20\\n', 4, 4, new Range(12, 1, 12, 1), 1)\n\t\t\t);\n\n\t\t\ttestPagedScreenReaderStrategy(\n\t\t\t\t[\n\t\t\t\t\t'L1\\nL2\\nL3\\nL4\\nL5\\nL6\\nL7\\nL8\\nL9\\nL10\\nL11\\nL12\\nL13\\nL14\\nL15\\nL16\\nL17\\nL18\\nL19\\nL20\\nL21'\n\t\t\t\t],\n\t\t\t\tnew Selection(21, 1, 21, 1),\n\t\t\t\tnew TextAreaState('L21', 0, 0, new Range(21, 1, 21, 1), 0)\n\t\t\t);\n\t\t});\n\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
