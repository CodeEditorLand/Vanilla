{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/config/editorConfiguration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvConfiguration } from '../../../browser/config/editorConfiguration.js';\nimport { migrateOptions } from '../../../browser/config/migrateOptions.js';\nimport { ConfigurationChangedEvent, EditorOption, IEditorHoverOptions, IQuickSuggestionsOptions } from '../../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../../common/config/editorZoom.js';\nimport { TestConfiguration } from './testConfiguration.js';\nimport { AccessibilitySupport } from '../../../../platform/accessibility/common/accessibility.js';\n\nsuite('Common Editor Config', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Zoom Level', () => {\n\n\t\t//Zoom levels are defined to go between -5, 20 inclusive\n\t\tconst zoom = EditorZoom;\n\n\t\tzoom.setZoomLevel(0);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 0);\n\n\t\tzoom.setZoomLevel(-0);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 0);\n\n\t\tzoom.setZoomLevel(5);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 5);\n\n\t\tzoom.setZoomLevel(-1);\n\t\tassert.strictEqual(zoom.getZoomLevel(), -1);\n\n\t\tzoom.setZoomLevel(9);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 9);\n\n\t\tzoom.setZoomLevel(-9);\n\t\tassert.strictEqual(zoom.getZoomLevel(), -5);\n\n\t\tzoom.setZoomLevel(20);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 20);\n\n\t\tzoom.setZoomLevel(-10);\n\t\tassert.strictEqual(zoom.getZoomLevel(), -5);\n\n\t\tzoom.setZoomLevel(9.1);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 9.1);\n\n\t\tzoom.setZoomLevel(-9.1);\n\t\tassert.strictEqual(zoom.getZoomLevel(), -5);\n\n\t\tzoom.setZoomLevel(Infinity);\n\t\tassert.strictEqual(zoom.getZoomLevel(), 20);\n\n\t\tzoom.setZoomLevel(Number.NEGATIVE_INFINITY);\n\t\tassert.strictEqual(zoom.getZoomLevel(), -5);\n\t});\n\n\tclass TestWrappingConfiguration extends TestConfiguration {\n\t\tprotected override _readEnvConfiguration(): IEnvConfiguration {\n\t\t\treturn {\n\t\t\t\textraEditorClassName: '',\n\t\t\t\touterWidth: 1000,\n\t\t\t\touterHeight: 100,\n\t\t\t\temptySelectionClipboard: true,\n\t\t\t\tpixelRatio: 1,\n\t\t\t\taccessibilitySupport: AccessibilitySupport.Unknown\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction assertWrapping(config: TestConfiguration, isViewportWrapping: boolean, wrappingColumn: number): void {\n\t\tconst options = config.options;\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tassert.strictEqual(wrappingInfo.isViewportWrapping, isViewportWrapping);\n\t\tassert.strictEqual(wrappingInfo.wrappingColumn, wrappingColumn);\n\t}\n\n\ttest('wordWrap default', () => {\n\t\tconst config = new TestWrappingConfiguration({});\n\t\tassertWrapping(config, false, -1);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap compat false', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: <any>false\n\t\t});\n\t\tassertWrapping(config, false, -1);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap compat true', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: <any>true\n\t\t});\n\t\tassertWrapping(config, true, 80);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap on', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'on'\n\t\t});\n\t\tassertWrapping(config, true, 80);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap on without minimap', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'on',\n\t\t\tminimap: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t});\n\t\tassertWrapping(config, true, 88);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap on does not use wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'on',\n\t\t\twordWrapColumn: 10\n\t\t});\n\t\tassertWrapping(config, true, 80);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap off', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'off'\n\t\t});\n\t\tassertWrapping(config, false, -1);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap off does not use wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'off',\n\t\t\twordWrapColumn: 10\n\t\t});\n\t\tassertWrapping(config, false, -1);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap wordWrapColumn uses default wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'wordWrapColumn'\n\t\t});\n\t\tassertWrapping(config, false, 80);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap wordWrapColumn uses wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'wordWrapColumn',\n\t\t\twordWrapColumn: 100\n\t\t});\n\t\tassertWrapping(config, false, 100);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap wordWrapColumn validates wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'wordWrapColumn',\n\t\t\twordWrapColumn: -1\n\t\t});\n\t\tassertWrapping(config, false, 1);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap bounded uses default wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'bounded'\n\t\t});\n\t\tassertWrapping(config, true, 80);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap bounded uses wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'bounded',\n\t\t\twordWrapColumn: 40\n\t\t});\n\t\tassertWrapping(config, true, 40);\n\t\tconfig.dispose();\n\t});\n\n\ttest('wordWrap bounded validates wordWrapColumn', () => {\n\t\tconst config = new TestWrappingConfiguration({\n\t\t\twordWrap: 'bounded',\n\t\t\twordWrapColumn: -1\n\t\t});\n\t\tassertWrapping(config, true, 1);\n\t\tconfig.dispose();\n\t});\n\n\ttest('issue #53152: Cannot assign to read only property \\'enabled\\' of object', () => {\n\t\tconst hoverOptions: IEditorHoverOptions = {};\n\t\tObject.defineProperty(hoverOptions, 'enabled', {\n\t\t\twritable: false,\n\t\t\tvalue: true\n\t\t});\n\t\tconst config = new TestConfiguration({ hover: hoverOptions });\n\n\t\tassert.strictEqual(config.options.get(EditorOption.hover).enabled, true);\n\t\tconfig.updateOptions({ hover: { enabled: false } });\n\t\tassert.strictEqual(config.options.get(EditorOption.hover).enabled, false);\n\n\t\tconfig.dispose();\n\t});\n\n\ttest('does not emit event when nothing changes', () => {\n\t\tconst config = new TestConfiguration({ glyphMargin: true, roundedSelection: false });\n\t\tlet event: ConfigurationChangedEvent | null = null;\n\t\tconst disposable = config.onDidChange(e => event = e);\n\t\tassert.strictEqual(config.options.get(EditorOption.glyphMargin), true);\n\n\t\tconfig.updateOptions({ glyphMargin: true });\n\t\tconfig.updateOptions({ roundedSelection: false });\n\t\tassert.strictEqual(event, null);\n\t\tconfig.dispose();\n\t\tdisposable.dispose();\n\t});\n\n\ttest('issue #94931: Unable to open source file', () => {\n\t\tconst config = new TestConfiguration({ quickSuggestions: null! });\n\t\tconst actual = <Readonly<Required<IQuickSuggestionsOptions>>>config.options.get(EditorOption.quickSuggestions);\n\t\tassert.deepStrictEqual(actual, {\n\t\t\tother: 'on',\n\t\t\tcomments: 'off',\n\t\t\tstrings: 'off'\n\t\t});\n\t\tconfig.dispose();\n\t});\n\n\ttest('issue #102920: Can\\'t snap or split view with JSON files', () => {\n\t\tconst config = new TestConfiguration({ quickSuggestions: null! });\n\t\tconfig.updateOptions({ quickSuggestions: { strings: true } });\n\t\tconst actual = <Readonly<Required<IQuickSuggestionsOptions>>>config.options.get(EditorOption.quickSuggestions);\n\t\tassert.deepStrictEqual(actual, {\n\t\t\tother: 'on',\n\t\t\tcomments: 'off',\n\t\t\tstrings: 'on'\n\t\t});\n\t\tconfig.dispose();\n\t});\n\n\ttest('issue #151926: Untyped editor options apply', () => {\n\t\tconst config = new TestConfiguration({});\n\t\tconfig.updateOptions({ unicodeHighlight: { allowedCharacters: { 'x': true } } });\n\t\tconst actual = config.options.get(EditorOption.unicodeHighlighting);\n\t\tassert.deepStrictEqual(actual,\n\t\t\t{\n\t\t\t\tnonBasicASCII: \"inUntrustedWorkspace\",\n\t\t\t\tinvisibleCharacters: true,\n\t\t\t\tambiguousCharacters: true,\n\t\t\t\tincludeComments: \"inUntrustedWorkspace\",\n\t\t\t\tincludeStrings: \"inUntrustedWorkspace\",\n\t\t\t\tallowedCharacters: { \"x\": true },\n\t\t\t\tallowedLocales: { \"_os\": true, \"_vscode\": true }\n\t\t\t}\n\t\t);\n\t\tconfig.dispose();\n\t});\n});\n\nsuite('migrateOptions', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction migrate(options: any): any {\n\t\tmigrateOptions(options);\n\t\treturn options;\n\t}\n\n\ttest('wordWrap', () => {\n\t\tassert.deepStrictEqual(migrate({ wordWrap: true }), { wordWrap: 'on' });\n\t\tassert.deepStrictEqual(migrate({ wordWrap: false }), { wordWrap: 'off' });\n\t});\n\ttest('lineNumbers', () => {\n\t\tassert.deepStrictEqual(migrate({ lineNumbers: true }), { lineNumbers: 'on' });\n\t\tassert.deepStrictEqual(migrate({ lineNumbers: false }), { lineNumbers: 'off' });\n\t});\n\ttest('autoClosingBrackets', () => {\n\t\tassert.deepStrictEqual(migrate({ autoClosingBrackets: false }), { autoClosingBrackets: 'never', autoClosingQuotes: 'never', autoSurround: 'never' });\n\t});\n\ttest('cursorBlinking', () => {\n\t\tassert.deepStrictEqual(migrate({ cursorBlinking: 'visible' }), { cursorBlinking: 'solid' });\n\t});\n\ttest('renderWhitespace', () => {\n\t\tassert.deepStrictEqual(migrate({ renderWhitespace: true }), { renderWhitespace: 'boundary' });\n\t\tassert.deepStrictEqual(migrate({ renderWhitespace: false }), { renderWhitespace: 'none' });\n\t});\n\ttest('renderLineHighlight', () => {\n\t\tassert.deepStrictEqual(migrate({ renderLineHighlight: true }), { renderLineHighlight: 'line' });\n\t\tassert.deepStrictEqual(migrate({ renderLineHighlight: false }), { renderLineHighlight: 'none' });\n\t});\n\ttest('acceptSuggestionOnEnter', () => {\n\t\tassert.deepStrictEqual(migrate({ acceptSuggestionOnEnter: true }), { acceptSuggestionOnEnter: 'on' });\n\t\tassert.deepStrictEqual(migrate({ acceptSuggestionOnEnter: false }), { acceptSuggestionOnEnter: 'off' });\n\t});\n\ttest('tabCompletion', () => {\n\t\tassert.deepStrictEqual(migrate({ tabCompletion: true }), { tabCompletion: 'onlySnippets' });\n\t\tassert.deepStrictEqual(migrate({ tabCompletion: false }), { tabCompletion: 'off' });\n\t});\n\ttest('suggest.filteredTypes', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tmigrate({\n\t\t\t\tsuggest: {\n\t\t\t\t\tfilteredTypes: {\n\t\t\t\t\t\tmethod: false,\n\t\t\t\t\t\tfunction: false,\n\t\t\t\t\t\tconstructor: false,\n\t\t\t\t\t\tdeprecated: false,\n\t\t\t\t\t\tfield: false,\n\t\t\t\t\t\tvariable: false,\n\t\t\t\t\t\tclass: false,\n\t\t\t\t\t\tstruct: false,\n\t\t\t\t\t\tinterface: false,\n\t\t\t\t\t\tmodule: false,\n\t\t\t\t\t\tproperty: false,\n\t\t\t\t\t\tevent: false,\n\t\t\t\t\t\toperator: false,\n\t\t\t\t\t\tunit: false,\n\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t\tconstant: false,\n\t\t\t\t\t\tenum: false,\n\t\t\t\t\t\tenumMember: false,\n\t\t\t\t\t\tkeyword: false,\n\t\t\t\t\t\ttext: false,\n\t\t\t\t\t\tcolor: false,\n\t\t\t\t\t\tfile: false,\n\t\t\t\t\t\treference: false,\n\t\t\t\t\t\tfolder: false,\n\t\t\t\t\t\ttypeParameter: false,\n\t\t\t\t\t\tsnippet: false,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}), {\n\t\t\tsuggest: {\n\t\t\t\tfilteredTypes: undefined,\n\t\t\t\tshowMethods: false,\n\t\t\t\tshowFunctions: false,\n\t\t\t\tshowConstructors: false,\n\t\t\t\tshowDeprecated: false,\n\t\t\t\tshowFields: false,\n\t\t\t\tshowVariables: false,\n\t\t\t\tshowClasses: false,\n\t\t\t\tshowStructs: false,\n\t\t\t\tshowInterfaces: false,\n\t\t\t\tshowModules: false,\n\t\t\t\tshowProperties: false,\n\t\t\t\tshowEvents: false,\n\t\t\t\tshowOperators: false,\n\t\t\t\tshowUnits: false,\n\t\t\t\tshowValues: false,\n\t\t\t\tshowConstants: false,\n\t\t\t\tshowEnums: false,\n\t\t\t\tshowEnumMembers: false,\n\t\t\t\tshowKeywords: false,\n\t\t\t\tshowWords: false,\n\t\t\t\tshowColors: false,\n\t\t\t\tshowFiles: false,\n\t\t\t\tshowReferences: false,\n\t\t\t\tshowFolders: false,\n\t\t\t\tshowTypeParameters: false,\n\t\t\t\tshowSnippets: false,\n\t\t\t}\n\t\t});\n\t});\n\ttest('quickSuggestions', () => {\n\t\tassert.deepStrictEqual(migrate({ quickSuggestions: true }), { quickSuggestions: { comments: 'on', strings: 'on', other: 'on' } });\n\t\tassert.deepStrictEqual(migrate({ quickSuggestions: false }), { quickSuggestions: { comments: 'off', strings: 'off', other: 'off' } });\n\t\tassert.deepStrictEqual(migrate({ quickSuggestions: { comments: 'on', strings: 'off' } }), { quickSuggestions: { comments: 'on', strings: 'off' } });\n\t});\n\ttest('hover', () => {\n\t\tassert.deepStrictEqual(migrate({ hover: true }), { hover: { enabled: true } });\n\t\tassert.deepStrictEqual(migrate({ hover: false }), { hover: { enabled: false } });\n\t});\n\ttest('parameterHints', () => {\n\t\tassert.deepStrictEqual(migrate({ parameterHints: true }), { parameterHints: { enabled: true } });\n\t\tassert.deepStrictEqual(migrate({ parameterHints: false }), { parameterHints: { enabled: false } });\n\t});\n\ttest('autoIndent', () => {\n\t\tassert.deepStrictEqual(migrate({ autoIndent: true }), { autoIndent: 'full' });\n\t\tassert.deepStrictEqual(migrate({ autoIndent: false }), { autoIndent: 'advanced' });\n\t});\n\ttest('matchBrackets', () => {\n\t\tassert.deepStrictEqual(migrate({ matchBrackets: true }), { matchBrackets: 'always' });\n\t\tassert.deepStrictEqual(migrate({ matchBrackets: false }), { matchBrackets: 'never' });\n\t});\n\ttest('renderIndentGuides, highlightActiveIndentGuide', () => {\n\t\tassert.deepStrictEqual(migrate({ renderIndentGuides: true }), { renderIndentGuides: undefined, guides: { indentation: true } });\n\t\tassert.deepStrictEqual(migrate({ renderIndentGuides: false }), { renderIndentGuides: undefined, guides: { indentation: false } });\n\t\tassert.deepStrictEqual(migrate({ highlightActiveIndentGuide: true }), { highlightActiveIndentGuide: undefined, guides: { highlightActiveIndentation: true } });\n\t\tassert.deepStrictEqual(migrate({ highlightActiveIndentGuide: false }), { highlightActiveIndentGuide: undefined, guides: { highlightActiveIndentation: false } });\n\t});\n\n\ttest('migration does not overwrite new setting', () => {\n\t\tassert.deepStrictEqual(migrate({ renderIndentGuides: true, guides: { indentation: false } }), { renderIndentGuides: undefined, guides: { indentation: false } });\n\t\tassert.deepStrictEqual(migrate({ highlightActiveIndentGuide: true, guides: { highlightActiveIndentation: false } }), { highlightActiveIndentGuide: undefined, guides: { highlightActiveIndentation: false } });\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
