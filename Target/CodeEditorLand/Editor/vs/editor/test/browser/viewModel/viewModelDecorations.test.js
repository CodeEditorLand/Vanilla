import o from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as D}from"../../../../base/test/common/utils.js";import"../../../common/config/editorOptions.js";import{Range as e}from"../../../common/core/range.js";import{InlineDecoration as n,InlineDecorationType as t}from"../../../common/viewModel.js";import{testViewModel as p}from"./testViewModel.js";suite("ViewModelDecorations",()=>{D(),test("getDecorationsViewportData",()=>{p(["hello world, this is a buffer that will be wrapped"],{wordWrap:"wordWrapColumn",wordWrapColumn:13},(i,c)=>{o.strictEqual(i.getLineContent(1),"hello world, "),o.strictEqual(i.getLineContent(2),"this is a "),o.strictEqual(i.getLineContent(3),"buffer that "),o.strictEqual(i.getLineContent(4),"will be "),o.strictEqual(i.getLineContent(5),"wrapped"),c.changeDecorations(r=>{const a=l=>({description:"test",className:l,inlineClassName:"i-"+l,beforeContentClassName:"b-"+l,afterContentClassName:"a-"+l});r.addDecoration(new e(1,2,1,3),a("dec1")),r.addDecoration(new e(1,2,1,14),a("dec2")),r.addDecoration(new e(1,2,1,15),a("dec3")),r.addDecoration(new e(1,2,1,36),a("dec4")),r.addDecoration(new e(1,2,1,51),a("dec5")),r.addDecoration(new e(1,14,1,14),a("dec6")),r.addDecoration(new e(1,14,1,16),a("dec7")),r.addDecoration(new e(1,14,1,36),a("dec8")),r.addDecoration(new e(1,14,1,51),a("dec9")),r.addDecoration(new e(1,16,1,18),a("dec10")),r.addDecoration(new e(1,16,1,36),a("dec11")),r.addDecoration(new e(1,16,1,51),a("dec12")),r.addDecoration(new e(1,36,1,36),a("dec13")),r.addDecoration(new e(1,36,1,51),a("dec14")),r.addDecoration(new e(1,40,1,51),a("dec15"))});const w=i.getDecorationsInViewport(new e(2,i.getLineMinColumn(2),3,i.getLineMaxColumn(3))).map(r=>r.options.className).filter(Boolean);o.deepStrictEqual(w,["dec1","dec2","dec3","dec4","dec5","dec6","dec7","dec8","dec9","dec10","dec11","dec12","dec13","dec14"]);const u=i.getViewportViewLineRenderingData(new e(1,i.getLineMinColumn(1),2,i.getLineMaxColumn(2)),1).inlineDecorations;o.deepStrictEqual(u,[new n(new e(1,2,1,3),"i-dec1",t.Regular),new n(new e(1,2,1,2),"b-dec1",t.Before),new n(new e(1,3,1,3),"a-dec1",t.After),new n(new e(1,2,1,14),"i-dec2",t.Regular),new n(new e(1,2,1,2),"b-dec2",t.Before),new n(new e(1,14,1,14),"a-dec2",t.After),new n(new e(1,2,2,2),"i-dec3",t.Regular),new n(new e(1,2,1,2),"b-dec3",t.Before),new n(new e(1,2,3,13),"i-dec4",t.Regular),new n(new e(1,2,1,2),"b-dec4",t.Before),new n(new e(1,2,5,8),"i-dec5",t.Regular),new n(new e(1,2,1,2),"b-dec5",t.Before)]);const g=i.getViewportViewLineRenderingData(new e(2,i.getLineMinColumn(2),3,i.getLineMaxColumn(3)),2).inlineDecorations;o.deepStrictEqual(g,[new n(new e(1,2,2,2),"i-dec3",t.Regular),new n(new e(2,2,2,2),"a-dec3",t.After),new n(new e(1,2,3,13),"i-dec4",t.Regular),new n(new e(1,2,5,8),"i-dec5",t.Regular),new n(new e(2,1,2,1),"i-dec6",t.Regular),new n(new e(2,1,2,1),"b-dec6",t.Before),new n(new e(2,1,2,1),"a-dec6",t.After),new n(new e(2,1,2,3),"i-dec7",t.Regular),new n(new e(2,1,2,1),"b-dec7",t.Before),new n(new e(2,3,2,3),"a-dec7",t.After),new n(new e(2,1,3,13),"i-dec8",t.Regular),new n(new e(2,1,2,1),"b-dec8",t.Before),new n(new e(2,1,5,8),"i-dec9",t.Regular),new n(new e(2,1,2,1),"b-dec9",t.Before),new n(new e(2,3,2,5),"i-dec10",t.Regular),new n(new e(2,3,2,3),"b-dec10",t.Before),new n(new e(2,5,2,5),"a-dec10",t.After),new n(new e(2,3,3,13),"i-dec11",t.Regular),new n(new e(2,3,2,3),"b-dec11",t.Before),new n(new e(2,3,5,8),"i-dec12",t.Regular),new n(new e(2,3,2,3),"b-dec12",t.Before)]);const d=i.getViewportViewLineRenderingData(new e(2,i.getLineMinColumn(2),3,i.getLineMaxColumn(3)),3).inlineDecorations;o.deepStrictEqual(d,[new n(new e(1,2,3,13),"i-dec4",t.Regular),new n(new e(3,13,3,13),"a-dec4",t.After),new n(new e(1,2,5,8),"i-dec5",t.Regular),new n(new e(2,1,3,13),"i-dec8",t.Regular),new n(new e(3,13,3,13),"a-dec8",t.After),new n(new e(2,1,5,8),"i-dec9",t.Regular),new n(new e(2,3,3,13),"i-dec11",t.Regular),new n(new e(3,13,3,13),"a-dec11",t.After),new n(new e(2,3,5,8),"i-dec12",t.Regular)])})}),test("issue #17208: Problem scrolling in 1.8.0",()=>{p(["hello world, this is a buffer that will be wrapped"],{wordWrap:"wordWrapColumn",wordWrapColumn:13},(i,c)=>{o.strictEqual(i.getLineContent(1),"hello world, "),o.strictEqual(i.getLineContent(2),"this is a "),o.strictEqual(i.getLineContent(3),"buffer that "),o.strictEqual(i.getLineContent(4),"will be "),o.strictEqual(i.getLineContent(5),"wrapped"),c.changeDecorations(d=>{d.addDecoration(new e(1,50,1,51),{description:"test",beforeContentClassName:"dec1"})});const w=i.getDecorationsInViewport(new e(2,i.getLineMinColumn(2),3,i.getLineMaxColumn(3))).filter(d=>!!d.options.beforeContentClassName);o.deepStrictEqual(w,[]);const u=i.getViewportViewLineRenderingData(new e(2,i.getLineMinColumn(2),3,i.getLineMaxColumn(3)),2).inlineDecorations;o.deepStrictEqual(u,[]);const g=i.getViewportViewLineRenderingData(new e(2,i.getLineMinColumn(2),3,i.getLineMaxColumn(3)),3).inlineDecorations;o.deepStrictEqual(g,[])})}),test("issue #37401: Allow both before and after decorations on empty line",()=>{p([""],{},(s,i)=>{i.changeDecorations(w=>{w.addDecoration(new e(1,1,1,1),{description:"test",beforeContentClassName:"before1",afterContentClassName:"after1"})});const c=s.getViewportViewLineRenderingData(new e(1,1,1,1),1).inlineDecorations;o.deepStrictEqual(c,[new n(new e(1,1,1,1),"before1",t.Before),new n(new e(1,1,1,1),"after1",t.After)])})})});
