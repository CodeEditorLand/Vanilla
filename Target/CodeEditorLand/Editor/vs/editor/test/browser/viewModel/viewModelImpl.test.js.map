{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/viewModel/viewModelImpl.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EndOfLineSequence, PositionAffinity } from '../../../common/model.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nimport { ViewEvent } from '../../../common/viewEvents.js';\nimport { testViewModel } from './testViewModel.js';\n\nsuite('ViewModel', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #21073: SplitLinesCollection: attempt to access a \\'newer\\' model', () => {\n\t\tconst text = [''];\n\t\tconst opts = {\n\t\t\tlineNumbersMinChars: 1\n\t\t};\n\t\ttestViewModel(text, opts, (viewModel, model) => {\n\t\t\tassert.strictEqual(viewModel.getLineCount(), 1);\n\n\t\t\tviewModel.setViewport(1, 1, 1);\n\n\t\t\tmodel.applyEdits([{\n\t\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\t\ttext: [\n\t\t\t\t\t'line01',\n\t\t\t\t\t'line02',\n\t\t\t\t\t'line03',\n\t\t\t\t\t'line04',\n\t\t\t\t\t'line05',\n\t\t\t\t\t'line06',\n\t\t\t\t\t'line07',\n\t\t\t\t\t'line08',\n\t\t\t\t\t'line09',\n\t\t\t\t\t'line10',\n\t\t\t\t].join('\\n')\n\t\t\t}]);\n\n\t\t\tassert.strictEqual(viewModel.getLineCount(), 10);\n\t\t});\n\t});\n\n\ttest('issue #44805: SplitLinesCollection: attempt to access a \\'newer\\' model', () => {\n\t\tconst text = [''];\n\t\ttestViewModel(text, {}, (viewModel, model) => {\n\t\t\tassert.strictEqual(viewModel.getLineCount(), 1);\n\n\t\t\tmodel.pushEditOperations([], [{\n\t\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\t\ttext: '\\ninsert1'\n\t\t\t}], () => ([]));\n\n\t\t\tmodel.pushEditOperations([], [{\n\t\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\t\ttext: '\\ninsert2'\n\t\t\t}], () => ([]));\n\n\t\t\tmodel.pushEditOperations([], [{\n\t\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\t\ttext: '\\ninsert3'\n\t\t\t}], () => ([]));\n\n\t\t\tconst viewLineCount: number[] = [];\n\n\t\t\tviewLineCount.push(viewModel.getLineCount());\n\t\t\tconst eventHandler = new class extends ViewEventHandler {\n\t\t\t\toverride handleEvents(events: ViewEvent[]): void {\n\t\t\t\t\t// Access the view model\n\t\t\t\t\tviewLineCount.push(viewModel.getLineCount());\n\t\t\t\t}\n\t\t\t};\n\t\t\tviewModel.addViewEventHandler(eventHandler);\n\t\t\tmodel.undo();\n\t\t\tviewLineCount.push(viewModel.getLineCount());\n\n\t\t\tassert.deepStrictEqual(viewLineCount, [4, 1, 1, 1, 1]);\n\n\t\t\tviewModel.removeViewEventHandler(eventHandler);\n\t\t\teventHandler.dispose();\n\t\t});\n\t});\n\n\ttest('issue #44805: No visible lines via API call', () => {\n\t\tconst text = [\n\t\t\t'line1',\n\t\t\t'line2',\n\t\t\t'line3'\n\t\t];\n\t\ttestViewModel(text, {}, (viewModel, model) => {\n\t\t\tassert.strictEqual(viewModel.getLineCount(), 3);\n\t\t\tviewModel.setHiddenAreas([new Range(1, 1, 3, 1)]);\n\t\t\tassert.ok(viewModel.getVisibleRanges() !== null);\n\t\t});\n\t});\n\n\ttest('issue #44805: No visible lines via undoing', () => {\n\t\tconst text = [\n\t\t\t''\n\t\t];\n\t\ttestViewModel(text, {}, (viewModel, model) => {\n\t\t\tassert.strictEqual(viewModel.getLineCount(), 1);\n\n\t\t\tmodel.pushEditOperations([], [{\n\t\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\t\ttext: 'line1\\nline2\\nline3'\n\t\t\t}], () => ([]));\n\n\t\t\tviewModel.setHiddenAreas([new Range(1, 1, 1, 1)]);\n\t\t\tassert.strictEqual(viewModel.getLineCount(), 2);\n\n\t\t\tmodel.undo();\n\t\t\tassert.ok(viewModel.getVisibleRanges() !== null);\n\t\t});\n\t});\n\n\tfunction assertGetPlainTextToCopy(text: string[], ranges: Range[], emptySelectionClipboard: boolean, expected: string | string[]): void {\n\t\ttestViewModel(text, {}, (viewModel, model) => {\n\t\t\tconst actual = viewModel.getPlainTextToCopy(ranges, emptySelectionClipboard, false);\n\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t});\n\t}\n\n\tconst USUAL_TEXT = [\n\t\t'',\n\t\t'line2',\n\t\t'line3',\n\t\t'line4',\n\t\t''\n\t];\n\n\ttest('getPlainTextToCopy 0/1', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 2)\n\t\t\t],\n\t\t\tfalse,\n\t\t\t''\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 0/1 - emptySelectionClipboard', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 2)\n\t\t\t],\n\t\t\ttrue,\n\t\t\t'line2\\n'\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 1/1', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 6)\n\t\t\t],\n\t\t\tfalse,\n\t\t\t'ine2'\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 1/1 - emptySelectionClipboard', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 6)\n\t\t\t],\n\t\t\ttrue,\n\t\t\t'ine2'\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 0/2', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 2),\n\t\t\t\tnew Range(3, 2, 3, 2),\n\t\t\t],\n\t\t\tfalse,\n\t\t\t''\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 0/2 - emptySelectionClipboard', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 2),\n\t\t\t\tnew Range(3, 2, 3, 2),\n\t\t\t],\n\t\t\ttrue,\n\t\t\t'line2\\nline3\\n'\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 1/2', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 6),\n\t\t\t\tnew Range(3, 2, 3, 2),\n\t\t\t],\n\t\t\tfalse,\n\t\t\t'ine2'\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 1/2 - emptySelectionClipboard', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 6),\n\t\t\t\tnew Range(3, 2, 3, 2),\n\t\t\t],\n\t\t\ttrue,\n\t\t\t['ine2', 'line3']\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 2/2', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 6),\n\t\t\t\tnew Range(3, 2, 3, 6),\n\t\t\t],\n\t\t\tfalse,\n\t\t\t['ine2', 'ine3']\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 2/2 reversed', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(3, 2, 3, 6),\n\t\t\t\tnew Range(2, 2, 2, 6),\n\t\t\t],\n\t\t\tfalse,\n\t\t\t['ine2', 'ine3']\n\t\t);\n\t});\n\n\ttest('getPlainTextToCopy 0/3 - emptySelectionClipboard', () => {\n\t\tassertGetPlainTextToCopy(\n\t\t\tUSUAL_TEXT,\n\t\t\t[\n\t\t\t\tnew Range(2, 2, 2, 2),\n\t\t\t\tnew Range(2, 3, 2, 3),\n\t\t\t\tnew Range(3, 2, 3, 2),\n\t\t\t],\n\t\t\ttrue,\n\t\t\t'line2\\nline3\\n'\n\t\t);\n\t});\n\n\ttest('issue #22688 - always use CRLF for clipboard on Windows', () => {\n\t\ttestViewModel(USUAL_TEXT, {}, (viewModel, model) => {\n\t\t\tmodel.setEOL(EndOfLineSequence.LF);\n\t\t\tconst actual = viewModel.getPlainTextToCopy([new Range(2, 1, 5, 1)], true, true);\n\t\t\tassert.deepStrictEqual(actual, 'line2\\r\\nline3\\r\\nline4\\r\\n');\n\t\t});\n\t});\n\n\ttest('issue #40926: Incorrect spacing when inserting new line after multiple folded blocks of code', () => {\n\t\ttestViewModel(\n\t\t\t[\n\t\t\t\t'foo = {',\n\t\t\t\t'    foobar: function() {',\n\t\t\t\t'        this.foobar();',\n\t\t\t\t'    },',\n\t\t\t\t'    foobar: function() {',\n\t\t\t\t'        this.foobar();',\n\t\t\t\t'    },',\n\t\t\t\t'    foobar: function() {',\n\t\t\t\t'        this.foobar();',\n\t\t\t\t'    },',\n\t\t\t\t'}',\n\t\t\t], {}, (viewModel, model) => {\n\t\t\t\tviewModel.setHiddenAreas([\n\t\t\t\t\tnew Range(3, 1, 3, 1),\n\t\t\t\t\tnew Range(6, 1, 6, 1),\n\t\t\t\t\tnew Range(9, 1, 9, 1),\n\t\t\t\t]);\n\n\t\t\t\tmodel.applyEdits([\n\t\t\t\t\t{ range: new Range(4, 7, 4, 7), text: '\\n    ' },\n\t\t\t\t\t{ range: new Range(7, 7, 7, 7), text: '\\n    ' },\n\t\t\t\t\t{ range: new Range(10, 7, 10, 7), text: '\\n    ' }\n\t\t\t\t]);\n\n\t\t\t\tassert.strictEqual(viewModel.getLineCount(), 11);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('normalizePosition with multiple touching injected text', () => {\n\t\ttestViewModel(\n\t\t\t[\n\t\t\t\t'just some text'\n\t\t\t],\n\t\t\t{},\n\t\t\t(viewModel, model) => {\n\t\t\t\tmodel.deltaDecorations([], [\n\t\t\t\t\t{\n\t\t\t\t\t\trange: new Range(1, 8, 1, 8),\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tdescription: 'test',\n\t\t\t\t\t\t\tbefore: {\n\t\t\t\t\t\t\t\tcontent: 'bar'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tshowIfCollapsed: true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trange: new Range(1, 8, 1, 8),\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tdescription: 'test',\n\t\t\t\t\t\t\tbefore: {\n\t\t\t\t\t\t\t\tcontent: 'bz'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tshowIfCollapsed: true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t]);\n\n\t\t\t\t// just sobarbzme text\n\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 8), PositionAffinity.None), new Position(1, 8));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 9), PositionAffinity.None), new Position(1, 8));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 11), PositionAffinity.None), new Position(1, 11));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 12), PositionAffinity.None), new Position(1, 11));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 13), PositionAffinity.None), new Position(1, 13));\n\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 8), PositionAffinity.Left), new Position(1, 8));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 9), PositionAffinity.Left), new Position(1, 8));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 11), PositionAffinity.Left), new Position(1, 8));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 12), PositionAffinity.Left), new Position(1, 8));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 13), PositionAffinity.Left), new Position(1, 8));\n\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 8), PositionAffinity.Right), new Position(1, 13));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 9), PositionAffinity.Right), new Position(1, 13));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 11), PositionAffinity.Right), new Position(1, 13));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 12), PositionAffinity.Right), new Position(1, 13));\n\t\t\t\tassert.deepStrictEqual(viewModel.normalizePosition(new Position(1, 13), PositionAffinity.Right), new Position(1, 13));\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('issue #193262: Incorrect implementation of modifyPosition', () => {\n\t\ttestViewModel(\n\t\t\t[\n\t\t\t\t'just some text'\n\t\t\t],\n\t\t\t{\n\t\t\t\twordWrap: 'wordWrapColumn',\n\t\t\t\twordWrapColumn: 5\n\t\t\t},\n\t\t\t(viewModel, model) => {\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\tnew Position(3, 1),\n\t\t\t\t\tviewModel.modifyPosition(new Position(3, 2), -1)\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
