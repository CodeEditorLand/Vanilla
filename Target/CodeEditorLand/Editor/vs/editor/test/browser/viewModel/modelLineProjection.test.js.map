{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/viewModel/modelLineProjection.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { MetadataConsts } from '../../../common/encodedTokenAttributes.js';\nimport * as languages from '../../../common/languages.js';\nimport { NullState } from '../../../common/languages/nullTokenize.js';\nimport { EndOfLinePreference } from '../../../common/model.js';\nimport { TextModel } from '../../../common/model/textModel.js';\nimport { ModelLineProjectionData } from '../../../common/modelLineProjectionData.js';\nimport { IViewLineTokens } from '../../../common/tokens/lineTokens.js';\nimport { ViewLineData } from '../../../common/viewModel.js';\nimport { IModelLineProjection, ISimpleModel, createModelLineProjection } from '../../../common/viewModel/modelLineProjection.js';\nimport { MonospaceLineBreaksComputerFactory } from '../../../common/viewModel/monospaceLineBreaksComputer.js';\nimport { ViewModelLinesFromProjectedModel } from '../../../common/viewModel/viewModelLines.js';\nimport { TestConfiguration } from '../config/testConfiguration.js';\nimport { createTextModel } from '../../common/testTextModel.js';\n\nsuite('Editor ViewModel - SplitLinesCollection', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('SplitLine', () => {\n\t\tlet model1 = createModel('My First LineMy Second LineAnd another one');\n\t\tlet line1 = createSplitLine([13, 14, 15], [13, 13 + 14, 13 + 14 + 15], 0);\n\n\t\tassert.strictEqual(line1.getViewLineCount(), 3);\n\t\tassert.strictEqual(line1.getViewLineContent(model1, 1, 0), 'My First Line');\n\t\tassert.strictEqual(line1.getViewLineContent(model1, 1, 1), 'My Second Line');\n\t\tassert.strictEqual(line1.getViewLineContent(model1, 1, 2), 'And another one');\n\t\tassert.strictEqual(line1.getViewLineMaxColumn(model1, 1, 0), 14);\n\t\tassert.strictEqual(line1.getViewLineMaxColumn(model1, 1, 1), 15);\n\t\tassert.strictEqual(line1.getViewLineMaxColumn(model1, 1, 2), 16);\n\t\tfor (let col = 1; col <= 14; col++) {\n\t\t\tassert.strictEqual(line1.getModelColumnOfViewPosition(0, col), col, 'getInputColumnOfOutputPosition(0, ' + col + ')');\n\t\t}\n\t\tfor (let col = 1; col <= 15; col++) {\n\t\t\tassert.strictEqual(line1.getModelColumnOfViewPosition(1, col), 13 + col, 'getInputColumnOfOutputPosition(1, ' + col + ')');\n\t\t}\n\t\tfor (let col = 1; col <= 16; col++) {\n\t\t\tassert.strictEqual(line1.getModelColumnOfViewPosition(2, col), 13 + 14 + col, 'getInputColumnOfOutputPosition(2, ' + col + ')');\n\t\t}\n\t\tfor (let col = 1; col <= 13; col++) {\n\t\t\tassert.deepStrictEqual(line1.getViewPositionOfModelPosition(0, col), pos(0, col), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (let col = 1 + 13; col <= 14 + 13; col++) {\n\t\t\tassert.deepStrictEqual(line1.getViewPositionOfModelPosition(0, col), pos(1, col - 13), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (let col = 1 + 13 + 14; col <= 15 + 14 + 13; col++) {\n\t\t\tassert.deepStrictEqual(line1.getViewPositionOfModelPosition(0, col), pos(2, col - 13 - 14), 'getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\n\t\tmodel1 = createModel('My First LineMy Second LineAnd another one');\n\t\tline1 = createSplitLine([13, 14, 15], [13, 13 + 14, 13 + 14 + 15], 4);\n\n\t\tassert.strictEqual(line1.getViewLineCount(), 3);\n\t\tassert.strictEqual(line1.getViewLineContent(model1, 1, 0), 'My First Line');\n\t\tassert.strictEqual(line1.getViewLineContent(model1, 1, 1), '    My Second Line');\n\t\tassert.strictEqual(line1.getViewLineContent(model1, 1, 2), '    And another one');\n\t\tassert.strictEqual(line1.getViewLineMaxColumn(model1, 1, 0), 14);\n\t\tassert.strictEqual(line1.getViewLineMaxColumn(model1, 1, 1), 19);\n\t\tassert.strictEqual(line1.getViewLineMaxColumn(model1, 1, 2), 20);\n\n\t\tconst actualViewColumnMapping: number[][] = [];\n\t\tfor (let lineIndex = 0; lineIndex < line1.getViewLineCount(); lineIndex++) {\n\t\t\tconst actualLineViewColumnMapping: number[] = [];\n\t\t\tfor (let col = 1; col <= line1.getViewLineMaxColumn(model1, 1, lineIndex); col++) {\n\t\t\t\tactualLineViewColumnMapping.push(line1.getModelColumnOfViewPosition(lineIndex, col));\n\t\t\t}\n\t\t\tactualViewColumnMapping.push(actualLineViewColumnMapping);\n\t\t}\n\t\tassert.deepStrictEqual(actualViewColumnMapping, [\n\t\t\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n\t\t\t[14, 14, 14, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28],\n\t\t\t[28, 28, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],\n\t\t]);\n\n\t\tfor (let col = 1; col <= 13; col++) {\n\t\t\tassert.deepStrictEqual(line1.getViewPositionOfModelPosition(0, col), pos(0, col), '6.getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (let col = 1 + 13; col <= 14 + 13; col++) {\n\t\t\tassert.deepStrictEqual(line1.getViewPositionOfModelPosition(0, col), pos(1, 4 + col - 13), '7.getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t\tfor (let col = 1 + 13 + 14; col <= 15 + 14 + 13; col++) {\n\t\t\tassert.deepStrictEqual(line1.getViewPositionOfModelPosition(0, col), pos(2, 4 + col - 13 - 14), '8.getOutputPositionOfInputPosition(' + col + ')');\n\t\t}\n\t});\n\n\tfunction withSplitLinesCollection(text: string, callback: (model: TextModel, linesCollection: ViewModelLinesFromProjectedModel) => void): void {\n\t\tconst config = new TestConfiguration({});\n\t\tconst wrappingInfo = config.options.get(EditorOption.wrappingInfo);\n\t\tconst fontInfo = config.options.get(EditorOption.fontInfo);\n\t\tconst wordWrapBreakAfterCharacters = config.options.get(EditorOption.wordWrapBreakAfterCharacters);\n\t\tconst wordWrapBreakBeforeCharacters = config.options.get(EditorOption.wordWrapBreakBeforeCharacters);\n\t\tconst wrappingIndent = config.options.get(EditorOption.wrappingIndent);\n\t\tconst wordBreak = config.options.get(EditorOption.wordBreak);\n\t\tconst lineBreaksComputerFactory = new MonospaceLineBreaksComputerFactory(wordWrapBreakBeforeCharacters, wordWrapBreakAfterCharacters);\n\n\t\tconst model = createTextModel([\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t].join('\\n'));\n\n\t\tconst linesCollection = new ViewModelLinesFromProjectedModel(\n\t\t\t1,\n\t\t\tmodel,\n\t\t\tlineBreaksComputerFactory,\n\t\t\tlineBreaksComputerFactory,\n\t\t\tfontInfo,\n\t\t\tmodel.getOptions().tabSize,\n\t\t\t'simple',\n\t\t\twrappingInfo.wrappingColumn,\n\t\t\twrappingIndent,\n\t\t\twordBreak\n\t\t);\n\n\t\tcallback(model, linesCollection);\n\n\t\tlinesCollection.dispose();\n\t\tmodel.dispose();\n\t\tconfig.dispose();\n\t}\n\n\ttest('Invalid line numbers', () => {\n\n\t\tconst text = [\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\twithSplitLinesCollection(text, (model, linesCollection) => {\n\t\t\tassert.strictEqual(linesCollection.getViewLineCount(), 6);\n\n\t\t\t// getOutputIndentGuide\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(-1, -1), [0]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(0, 0), [0]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(1, 1), [0]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(2, 2), [1]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(3, 3), [0]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(4, 4), [0]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(5, 5), [1]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(6, 6), [0]);\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(7, 7), [0]);\n\n\t\t\tassert.deepStrictEqual(linesCollection.getViewLinesIndentGuides(0, 7), [0, 1, 0, 0, 1, 0]);\n\n\t\t\t// getOutputLineContent\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(-1), 'int main() {');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(0), 'int main() {');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(1), 'int main() {');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(2), '\\tprintf(\"Hello world!\");');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(3), '}');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(4), 'int main() {');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(5), '\\tprintf(\"Hello world!\");');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(6), '}');\n\t\t\tassert.strictEqual(linesCollection.getViewLineContent(7), '}');\n\n\t\t\t// getOutputLineMinColumn\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(-1), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(0), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(1), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(2), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(3), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(4), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(5), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(6), 1);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMinColumn(7), 1);\n\n\t\t\t// getOutputLineMaxColumn\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(-1), 13);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(0), 13);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(1), 13);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(2), 25);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(3), 2);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(4), 13);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(5), 25);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(6), 2);\n\t\t\tassert.strictEqual(linesCollection.getViewLineMaxColumn(7), 2);\n\n\t\t\t// convertOutputPositionToInputPosition\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(-1, 1), new Position(1, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(0, 1), new Position(1, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(1, 1), new Position(1, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(2, 1), new Position(2, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(3, 1), new Position(3, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(4, 1), new Position(4, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(5, 1), new Position(5, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(6, 1), new Position(6, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(7, 1), new Position(6, 1));\n\t\t\tassert.deepStrictEqual(linesCollection.convertViewPositionToModelPosition(8, 1), new Position(6, 1));\n\t\t});\n\t});\n\n\ttest('issue #3662', () => {\n\n\t\tconst text = [\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t\t'int main() {',\n\t\t\t'\\tprintf(\"Hello world!\");',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\twithSplitLinesCollection(text, (model, linesCollection) => {\n\t\t\tlinesCollection.setHiddenAreas([\n\t\t\t\tnew Range(1, 1, 3, 1),\n\t\t\t\tnew Range(5, 1, 6, 1)\n\t\t\t]);\n\n\t\t\tconst viewLineCount = linesCollection.getViewLineCount();\n\t\t\tassert.strictEqual(viewLineCount, 1, 'getOutputLineCount()');\n\n\t\t\tconst modelLineCount = model.getLineCount();\n\t\t\tfor (let lineNumber = 0; lineNumber <= modelLineCount + 1; lineNumber++) {\n\t\t\t\tconst lineMinColumn = (lineNumber >= 1 && lineNumber <= modelLineCount) ? model.getLineMinColumn(lineNumber) : 1;\n\t\t\t\tconst lineMaxColumn = (lineNumber >= 1 && lineNumber <= modelLineCount) ? model.getLineMaxColumn(lineNumber) : 1;\n\t\t\t\tfor (let column = lineMinColumn - 1; column <= lineMaxColumn + 1; column++) {\n\t\t\t\t\tconst viewPosition = linesCollection.convertModelPositionToViewPosition(lineNumber, column);\n\n\t\t\t\t\t// validate view position\n\t\t\t\t\tlet viewLineNumber = viewPosition.lineNumber;\n\t\t\t\t\tlet viewColumn = viewPosition.column;\n\t\t\t\t\tif (viewLineNumber < 1) {\n\t\t\t\t\t\tviewLineNumber = 1;\n\t\t\t\t\t}\n\t\t\t\t\tconst lineCount = linesCollection.getViewLineCount();\n\t\t\t\t\tif (viewLineNumber > lineCount) {\n\t\t\t\t\t\tviewLineNumber = lineCount;\n\t\t\t\t\t}\n\t\t\t\t\tconst viewMinColumn = linesCollection.getViewLineMinColumn(viewLineNumber);\n\t\t\t\t\tconst viewMaxColumn = linesCollection.getViewLineMaxColumn(viewLineNumber);\n\t\t\t\t\tif (viewColumn < viewMinColumn) {\n\t\t\t\t\t\tviewColumn = viewMinColumn;\n\t\t\t\t\t}\n\t\t\t\t\tif (viewColumn > viewMaxColumn) {\n\t\t\t\t\t\tviewColumn = viewMaxColumn;\n\t\t\t\t\t}\n\t\t\t\t\tconst validViewPosition = new Position(viewLineNumber, viewColumn);\n\t\t\t\t\tassert.strictEqual(viewPosition.toString(), validViewPosition.toString(), 'model->view for ' + lineNumber + ', ' + column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let lineNumber = 0; lineNumber <= viewLineCount + 1; lineNumber++) {\n\t\t\t\tconst lineMinColumn = linesCollection.getViewLineMinColumn(lineNumber);\n\t\t\t\tconst lineMaxColumn = linesCollection.getViewLineMaxColumn(lineNumber);\n\t\t\t\tfor (let column = lineMinColumn - 1; column <= lineMaxColumn + 1; column++) {\n\t\t\t\t\tconst modelPosition = linesCollection.convertViewPositionToModelPosition(lineNumber, column);\n\t\t\t\t\tconst validModelPosition = model.validatePosition(modelPosition);\n\t\t\t\t\tassert.strictEqual(modelPosition.toString(), validModelPosition.toString(), 'view->model for ' + lineNumber + ', ' + column);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n});\n\nsuite('SplitLinesCollection', () => {\n\n\tconst _text = [\n\t\t'class Nice {',\n\t\t'\tfunction hi() {',\n\t\t'\t\tconsole.log(\"Hello world\");',\n\t\t'\t}',\n\t\t'\tfunction hello() {',\n\t\t'\t\tconsole.log(\"Hello world, this is a somewhat longer line\");',\n\t\t'\t}',\n\t\t'}',\n\t];\n\n\tconst _tokens = [\n\t\t[\n\t\t\t{ startIndex: 0, value: 1 },\n\t\t\t{ startIndex: 5, value: 2 },\n\t\t\t{ startIndex: 6, value: 3 },\n\t\t\t{ startIndex: 10, value: 4 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 5 },\n\t\t\t{ startIndex: 1, value: 6 },\n\t\t\t{ startIndex: 9, value: 7 },\n\t\t\t{ startIndex: 10, value: 8 },\n\t\t\t{ startIndex: 12, value: 9 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 10 },\n\t\t\t{ startIndex: 2, value: 11 },\n\t\t\t{ startIndex: 9, value: 12 },\n\t\t\t{ startIndex: 10, value: 13 },\n\t\t\t{ startIndex: 13, value: 14 },\n\t\t\t{ startIndex: 14, value: 15 },\n\t\t\t{ startIndex: 27, value: 16 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 17 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 18 },\n\t\t\t{ startIndex: 1, value: 19 },\n\t\t\t{ startIndex: 9, value: 20 },\n\t\t\t{ startIndex: 10, value: 21 },\n\t\t\t{ startIndex: 15, value: 22 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 23 },\n\t\t\t{ startIndex: 2, value: 24 },\n\t\t\t{ startIndex: 9, value: 25 },\n\t\t\t{ startIndex: 10, value: 26 },\n\t\t\t{ startIndex: 13, value: 27 },\n\t\t\t{ startIndex: 14, value: 28 },\n\t\t\t{ startIndex: 59, value: 29 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 30 },\n\t\t],\n\t\t[\n\t\t\t{ startIndex: 0, value: 31 },\n\t\t]\n\t];\n\n\tlet model: TextModel;\n\tlet languageRegistration: IDisposable;\n\n\tsetup(() => {\n\t\tlet _lineIndex = 0;\n\t\tconst tokenizationSupport: languages.ITokenizationSupport = {\n\t\t\tgetInitialState: () => NullState,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult => {\n\t\t\t\tconst tokens = _tokens[_lineIndex++];\n\n\t\t\t\tconst result = new Uint32Array(2 * tokens.length);\n\t\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\t\tresult[2 * i] = tokens[i].startIndex;\n\t\t\t\t\tresult[2 * i + 1] = (\n\t\t\t\t\t\ttokens[i].value << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn new languages.EncodedTokenizationResult(result, state);\n\t\t\t}\n\t\t};\n\t\tconst LANGUAGE_ID = 'modelModeTest1';\n\t\tlanguageRegistration = languages.TokenizationRegistry.register(LANGUAGE_ID, tokenizationSupport);\n\t\tmodel = createTextModel(_text.join('\\n'), LANGUAGE_ID);\n\t\t// force tokenization\n\t\tmodel.tokenization.forceTokenization(model.getLineCount());\n\t});\n\n\tteardown(() => {\n\t\tmodel.dispose();\n\t\tlanguageRegistration.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tinterface ITestViewLineToken {\n\t\tendIndex: number;\n\t\tvalue: number;\n\t}\n\n\tfunction assertViewLineTokens(_actual: IViewLineTokens, expected: ITestViewLineToken[]): void {\n\t\tconst actual: ITestViewLineToken[] = [];\n\t\tfor (let i = 0, len = _actual.getCount(); i < len; i++) {\n\t\t\tactual[i] = {\n\t\t\t\tendIndex: _actual.getEndOffset(i),\n\t\t\t\tvalue: _actual.getForeground(i)\n\t\t\t};\n\t\t}\n\t\tassert.deepStrictEqual(actual, expected);\n\t}\n\n\tinterface ITestMinimapLineRenderingData {\n\t\tcontent: string;\n\t\tminColumn: number;\n\t\tmaxColumn: number;\n\t\ttokens: ITestViewLineToken[];\n\t}\n\n\tfunction assertMinimapLineRenderingData(actual: ViewLineData, expected: ITestMinimapLineRenderingData | null): void {\n\t\tif (actual === null && expected === null) {\n\t\t\tassert.ok(true);\n\t\t\treturn;\n\t\t}\n\t\tif (expected === null) {\n\t\t\tassert.ok(false);\n\t\t}\n\t\tassert.strictEqual(actual.content, expected.content);\n\t\tassert.strictEqual(actual.minColumn, expected.minColumn);\n\t\tassert.strictEqual(actual.maxColumn, expected.maxColumn);\n\t\tassertViewLineTokens(actual.tokens, expected.tokens);\n\t}\n\n\tfunction assertMinimapLinesRenderingData(actual: ViewLineData[], expected: Array<ITestMinimapLineRenderingData | null>): void {\n\t\tassert.strictEqual(actual.length, expected.length);\n\t\tfor (let i = 0; i < expected.length; i++) {\n\t\t\tassertMinimapLineRenderingData(actual[i], expected[i]);\n\t\t}\n\t}\n\n\tfunction assertAllMinimapLinesRenderingData(splitLinesCollection: ViewModelLinesFromProjectedModel, all: ITestMinimapLineRenderingData[]): void {\n\t\tconst lineCount = all.length;\n\t\tfor (let line = 1; line <= lineCount; line++) {\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineData(line).content, splitLinesCollection.getViewLineContent(line));\n\t\t}\n\n\t\tfor (let start = 1; start <= lineCount; start++) {\n\t\t\tfor (let end = start; end <= lineCount; end++) {\n\t\t\t\tconst count = end - start + 1;\n\t\t\t\tfor (let desired = Math.pow(2, count) - 1; desired >= 0; desired--) {\n\t\t\t\t\tconst needed: boolean[] = [];\n\t\t\t\t\tconst expected: Array<ITestMinimapLineRenderingData | null> = [];\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tneeded[i] = (desired & (1 << i)) ? true : false;\n\t\t\t\t\t\texpected[i] = (needed[i] ? all[start - 1 + i] : null);\n\t\t\t\t\t}\n\t\t\t\t\tconst actual = splitLinesCollection.getViewLinesData(start, end, needed);\n\n\t\t\t\t\tassertMinimapLinesRenderingData(actual, expected);\n\t\t\t\t\t// Comment out next line to test all possible combinations\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttest('getViewLinesData - no wrapping', () => {\n\t\twithSplitLinesCollection(model, 'off', 0, (splitLinesCollection) => {\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineCount(), 8);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(1, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(2, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(3, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(4, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(5, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(6, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(7, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(8, 1), true);\n\n\t\t\tconst _expected: ITestMinimapLineRenderingData[] = [\n\t\t\t\t{\n\t\t\t\t\tcontent: 'class Nice {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 13,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 5, value: 1 },\n\t\t\t\t\t\t{ endIndex: 6, value: 2 },\n\t\t\t\t\t\t{ endIndex: 10, value: 3 },\n\t\t\t\t\t\t{ endIndex: 12, value: 4 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\tfunction hi() {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 17,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 5 },\n\t\t\t\t\t\t{ endIndex: 9, value: 6 },\n\t\t\t\t\t\t{ endIndex: 10, value: 7 },\n\t\t\t\t\t\t{ endIndex: 12, value: 8 },\n\t\t\t\t\t\t{ endIndex: 16, value: 9 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t\tconsole.log(\"Hello world\");',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 30,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 10 },\n\t\t\t\t\t\t{ endIndex: 9, value: 11 },\n\t\t\t\t\t\t{ endIndex: 10, value: 12 },\n\t\t\t\t\t\t{ endIndex: 13, value: 13 },\n\t\t\t\t\t\t{ endIndex: 14, value: 14 },\n\t\t\t\t\t\t{ endIndex: 27, value: 15 },\n\t\t\t\t\t\t{ endIndex: 29, value: 16 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 3,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 17 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\tfunction hello() {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 20,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 18 },\n\t\t\t\t\t\t{ endIndex: 9, value: 19 },\n\t\t\t\t\t\t{ endIndex: 10, value: 20 },\n\t\t\t\t\t\t{ endIndex: 15, value: 21 },\n\t\t\t\t\t\t{ endIndex: 19, value: 22 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t\tconsole.log(\"Hello world, this is a somewhat longer line\");',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 62,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 23 },\n\t\t\t\t\t\t{ endIndex: 9, value: 24 },\n\t\t\t\t\t\t{ endIndex: 10, value: 25 },\n\t\t\t\t\t\t{ endIndex: 13, value: 26 },\n\t\t\t\t\t\t{ endIndex: 14, value: 27 },\n\t\t\t\t\t\t{ endIndex: 59, value: 28 },\n\t\t\t\t\t\t{ endIndex: 61, value: 29 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 3,\n\t\t\t\t\tcontent: '\t}',\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 30 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 2,\n\t\t\t\t\tcontent: '}',\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 31 },\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tassertAllMinimapLinesRenderingData(splitLinesCollection, [\n\t\t\t\t_expected[0],\n\t\t\t\t_expected[1],\n\t\t\t\t_expected[2],\n\t\t\t\t_expected[3],\n\t\t\t\t_expected[4],\n\t\t\t\t_expected[5],\n\t\t\t\t_expected[6],\n\t\t\t\t_expected[7],\n\t\t\t]);\n\n\t\t\tsplitLinesCollection.setHiddenAreas([new Range(2, 1, 4, 1)]);\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineCount(), 5);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(1, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(2, 1), false);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(3, 1), false);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(4, 1), false);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(5, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(6, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(7, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(8, 1), true);\n\n\t\t\tassertAllMinimapLinesRenderingData(splitLinesCollection, [\n\t\t\t\t_expected[0],\n\t\t\t\t_expected[4],\n\t\t\t\t_expected[5],\n\t\t\t\t_expected[6],\n\t\t\t\t_expected[7],\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('getViewLinesData - with wrapping', () => {\n\t\twithSplitLinesCollection(model, 'wordWrapColumn', 30, (splitLinesCollection) => {\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineCount(), 12);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(1, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(2, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(3, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(4, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(5, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(6, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(7, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(8, 1), true);\n\n\t\t\tconst _expected: ITestMinimapLineRenderingData[] = [\n\t\t\t\t{\n\t\t\t\t\tcontent: 'class Nice {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 13,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 5, value: 1 },\n\t\t\t\t\t\t{ endIndex: 6, value: 2 },\n\t\t\t\t\t\t{ endIndex: 10, value: 3 },\n\t\t\t\t\t\t{ endIndex: 12, value: 4 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\tfunction hi() {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 17,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 5 },\n\t\t\t\t\t\t{ endIndex: 9, value: 6 },\n\t\t\t\t\t\t{ endIndex: 10, value: 7 },\n\t\t\t\t\t\t{ endIndex: 12, value: 8 },\n\t\t\t\t\t\t{ endIndex: 16, value: 9 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t\tconsole.log(\"Hello ',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 22,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 10 },\n\t\t\t\t\t\t{ endIndex: 9, value: 11 },\n\t\t\t\t\t\t{ endIndex: 10, value: 12 },\n\t\t\t\t\t\t{ endIndex: 13, value: 13 },\n\t\t\t\t\t\t{ endIndex: 14, value: 14 },\n\t\t\t\t\t\t{ endIndex: 21, value: 15 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            world\");',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 21,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 18, value: 15 },\n\t\t\t\t\t\t{ endIndex: 20, value: 16 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 3,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 17 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\tfunction hello() {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 20,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 18 },\n\t\t\t\t\t\t{ endIndex: 9, value: 19 },\n\t\t\t\t\t\t{ endIndex: 10, value: 20 },\n\t\t\t\t\t\t{ endIndex: 15, value: 21 },\n\t\t\t\t\t\t{ endIndex: 19, value: 22 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t\tconsole.log(\"Hello ',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 22,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 23 },\n\t\t\t\t\t\t{ endIndex: 9, value: 24 },\n\t\t\t\t\t\t{ endIndex: 10, value: 25 },\n\t\t\t\t\t\t{ endIndex: 13, value: 26 },\n\t\t\t\t\t\t{ endIndex: 14, value: 27 },\n\t\t\t\t\t\t{ endIndex: 21, value: 28 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            world, this is a ',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 30,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 29, value: 28 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            somewhat longer ',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 29,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 28, value: 28 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            line\");',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 20,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 17, value: 28 },\n\t\t\t\t\t\t{ endIndex: 19, value: 29 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 3,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 30 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 2,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 31 },\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tassertAllMinimapLinesRenderingData(splitLinesCollection, [\n\t\t\t\t_expected[0],\n\t\t\t\t_expected[1],\n\t\t\t\t_expected[2],\n\t\t\t\t_expected[3],\n\t\t\t\t_expected[4],\n\t\t\t\t_expected[5],\n\t\t\t\t_expected[6],\n\t\t\t\t_expected[7],\n\t\t\t\t_expected[8],\n\t\t\t\t_expected[9],\n\t\t\t\t_expected[10],\n\t\t\t\t_expected[11],\n\t\t\t]);\n\n\t\t\tsplitLinesCollection.setHiddenAreas([new Range(2, 1, 4, 1)]);\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineCount(), 8);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(1, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(2, 1), false);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(3, 1), false);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(4, 1), false);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(5, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(6, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(7, 1), true);\n\t\t\tassert.strictEqual(splitLinesCollection.modelPositionIsVisible(8, 1), true);\n\n\t\t\tassertAllMinimapLinesRenderingData(splitLinesCollection, [\n\t\t\t\t_expected[0],\n\t\t\t\t_expected[5],\n\t\t\t\t_expected[6],\n\t\t\t\t_expected[7],\n\t\t\t\t_expected[8],\n\t\t\t\t_expected[9],\n\t\t\t\t_expected[10],\n\t\t\t\t_expected[11],\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('getViewLinesData - with wrapping and injected text', () => {\n\t\tmodel.deltaDecorations([], [{\n\t\t\trange: new Range(1, 9, 1, 9),\n\t\t\toptions: {\n\t\t\t\tdescription: 'example',\n\t\t\t\tafter: {\n\t\t\t\t\tcontent: 'very very long injected text that causes a line break',\n\t\t\t\t\tinlineClassName: 'myClassName'\n\t\t\t\t},\n\t\t\t\tshowIfCollapsed: true,\n\t\t\t}\n\t\t}]);\n\n\t\twithSplitLinesCollection(model, 'wordWrapColumn', 30, (splitLinesCollection) => {\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineCount(), 14);\n\n\t\t\tassert.strictEqual(splitLinesCollection.getViewLineMaxColumn(1), 24);\n\n\t\t\tconst _expected: ITestMinimapLineRenderingData[] = [\n\t\t\t\t{\n\t\t\t\t\tcontent: 'class Nivery very long ',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 24,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 5, value: 1 },\n\t\t\t\t\t\t{ endIndex: 6, value: 2 },\n\t\t\t\t\t\t{ endIndex: 8, value: 3 },\n\t\t\t\t\t\t{ endIndex: 23, value: 1 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '    injected text that causes ',\n\t\t\t\t\tminColumn: 5,\n\t\t\t\t\tmaxColumn: 31,\n\t\t\t\t\ttokens: [{ endIndex: 30, value: 1 }]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '    a line breakce {',\n\t\t\t\t\tminColumn: 5,\n\t\t\t\t\tmaxColumn: 21,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 16, value: 1 },\n\t\t\t\t\t\t{ endIndex: 18, value: 3 },\n\t\t\t\t\t\t{ endIndex: 20, value: 4 }\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\tfunction hi() {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 17,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 5 },\n\t\t\t\t\t\t{ endIndex: 9, value: 6 },\n\t\t\t\t\t\t{ endIndex: 10, value: 7 },\n\t\t\t\t\t\t{ endIndex: 12, value: 8 },\n\t\t\t\t\t\t{ endIndex: 16, value: 9 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t\tconsole.log(\"Hello ',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 22,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 10 },\n\t\t\t\t\t\t{ endIndex: 9, value: 11 },\n\t\t\t\t\t\t{ endIndex: 10, value: 12 },\n\t\t\t\t\t\t{ endIndex: 13, value: 13 },\n\t\t\t\t\t\t{ endIndex: 14, value: 14 },\n\t\t\t\t\t\t{ endIndex: 21, value: 15 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            world\");',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 21,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 18, value: 15 },\n\t\t\t\t\t\t{ endIndex: 20, value: 16 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 3,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 17 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\tfunction hello() {',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 20,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 18 },\n\t\t\t\t\t\t{ endIndex: 9, value: 19 },\n\t\t\t\t\t\t{ endIndex: 10, value: 20 },\n\t\t\t\t\t\t{ endIndex: 15, value: 21 },\n\t\t\t\t\t\t{ endIndex: 19, value: 22 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t\tconsole.log(\"Hello ',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 22,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 23 },\n\t\t\t\t\t\t{ endIndex: 9, value: 24 },\n\t\t\t\t\t\t{ endIndex: 10, value: 25 },\n\t\t\t\t\t\t{ endIndex: 13, value: 26 },\n\t\t\t\t\t\t{ endIndex: 14, value: 27 },\n\t\t\t\t\t\t{ endIndex: 21, value: 28 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            world, this is a ',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 30,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 29, value: 28 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            somewhat longer ',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 29,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 28, value: 28 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '            line\");',\n\t\t\t\t\tminColumn: 13,\n\t\t\t\t\tmaxColumn: 20,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 17, value: 28 },\n\t\t\t\t\t\t{ endIndex: 19, value: 29 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '\t}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 3,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 2, value: 30 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcontent: '}',\n\t\t\t\t\tminColumn: 1,\n\t\t\t\t\tmaxColumn: 2,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{ endIndex: 1, value: 31 },\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tassertAllMinimapLinesRenderingData(splitLinesCollection, [\n\t\t\t\t_expected[0],\n\t\t\t\t_expected[1],\n\t\t\t\t_expected[2],\n\t\t\t\t_expected[3],\n\t\t\t\t_expected[4],\n\t\t\t\t_expected[5],\n\t\t\t\t_expected[6],\n\t\t\t\t_expected[7],\n\t\t\t\t_expected[8],\n\t\t\t\t_expected[9],\n\t\t\t\t_expected[10],\n\t\t\t\t_expected[11],\n\t\t\t]);\n\n\t\t\tconst data = splitLinesCollection.getViewLinesData(1, 14, new Array(14).fill(true));\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tdata.map((d) => ({\n\t\t\t\t\tinlineDecorations: d.inlineDecorations?.map((d) => ({\n\t\t\t\t\t\tstartOffset: d.startOffset,\n\t\t\t\t\t\tendOffset: d.endOffset,\n\t\t\t\t\t})),\n\t\t\t\t})),\n\t\t\t\t[\n\t\t\t\t\t{ inlineDecorations: [{ startOffset: 8, endOffset: 23 }] },\n\t\t\t\t\t{ inlineDecorations: [{ startOffset: 4, endOffset: 30 }] },\n\t\t\t\t\t{ inlineDecorations: [{ startOffset: 4, endOffset: 16 }] },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t\t{ inlineDecorations: undefined },\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\t});\n\n\tfunction withSplitLinesCollection(model: TextModel, wordWrap: 'on' | 'off' | 'wordWrapColumn' | 'bounded', wordWrapColumn: number, callback: (splitLinesCollection: ViewModelLinesFromProjectedModel) => void): void {\n\t\tconst configuration = new TestConfiguration({\n\t\t\twordWrap: wordWrap,\n\t\t\twordWrapColumn: wordWrapColumn,\n\t\t\twrappingIndent: 'indent'\n\t\t});\n\t\tconst wrappingInfo = configuration.options.get(EditorOption.wrappingInfo);\n\t\tconst fontInfo = configuration.options.get(EditorOption.fontInfo);\n\t\tconst wordWrapBreakAfterCharacters = configuration.options.get(EditorOption.wordWrapBreakAfterCharacters);\n\t\tconst wordWrapBreakBeforeCharacters = configuration.options.get(EditorOption.wordWrapBreakBeforeCharacters);\n\t\tconst wrappingIndent = configuration.options.get(EditorOption.wrappingIndent);\n\t\tconst wordBreak = configuration.options.get(EditorOption.wordBreak);\n\n\t\tconst lineBreaksComputerFactory = new MonospaceLineBreaksComputerFactory(wordWrapBreakBeforeCharacters, wordWrapBreakAfterCharacters);\n\n\t\tconst linesCollection = new ViewModelLinesFromProjectedModel(\n\t\t\t1,\n\t\t\tmodel,\n\t\t\tlineBreaksComputerFactory,\n\t\t\tlineBreaksComputerFactory,\n\t\t\tfontInfo,\n\t\t\tmodel.getOptions().tabSize,\n\t\t\t'simple',\n\t\t\twrappingInfo.wrappingColumn,\n\t\t\twrappingIndent,\n\t\t\twordBreak\n\t\t);\n\n\t\tcallback(linesCollection);\n\n\t\tconfiguration.dispose();\n\t}\n});\n\n\nfunction pos(lineNumber: number, column: number): Position {\n\treturn new Position(lineNumber, column);\n}\n\nfunction createSplitLine(splitLengths: number[], breakingOffsetsVisibleColumn: number[], wrappedTextIndentWidth: number, isVisible: boolean = true): IModelLineProjection {\n\treturn createModelLineProjection(createLineBreakData(splitLengths, breakingOffsetsVisibleColumn, wrappedTextIndentWidth), isVisible);\n}\n\nfunction createLineBreakData(breakingLengths: number[], breakingOffsetsVisibleColumn: number[], wrappedTextIndentWidth: number): ModelLineProjectionData {\n\tconst sums: number[] = [];\n\tfor (let i = 0; i < breakingLengths.length; i++) {\n\t\tsums[i] = (i > 0 ? sums[i - 1] : 0) + breakingLengths[i];\n\t}\n\treturn new ModelLineProjectionData(null, null, sums, breakingOffsetsVisibleColumn, wrappedTextIndentWidth);\n}\n\nfunction createModel(text: string): ISimpleModel {\n\treturn {\n\t\ttokenization: {\n\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\treturn null!;\n\t\t\t},\n\t\t},\n\t\tgetLineContent: (lineNumber: number) => {\n\t\t\treturn text;\n\t\t},\n\t\tgetLineLength: (lineNumber: number) => {\n\t\t\treturn text.length;\n\t\t},\n\t\tgetLineMinColumn: (lineNumber: number) => {\n\t\t\treturn 1;\n\t\t},\n\t\tgetLineMaxColumn: (lineNumber: number) => {\n\t\t\treturn text.length + 1;\n\t\t},\n\t\tgetValueInRange: (range: IRange, eol?: EndOfLinePreference) => {\n\t\t\treturn text.substring(range.startColumn - 1, range.endColumn - 1);\n\t\t}\n\t};\n}\n"],
  "mappings": "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",
  "names": ["d", "model"]
}
