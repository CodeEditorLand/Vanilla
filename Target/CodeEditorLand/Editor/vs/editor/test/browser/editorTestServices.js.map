{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/editorTestServices.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { ICodeEditor } from '../../browser/editorBrowser.js';\nimport { AbstractCodeEditorService, GlobalStyleSheet } from '../../browser/services/abstractCodeEditorService.js';\nimport { CommandsRegistry, ICommandEvent, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IResourceEditorInput } from '../../../platform/editor/common/editor.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\n\nexport class TestCodeEditorService extends AbstractCodeEditorService {\n\n\tpublic readonly globalStyleSheet = new TestGlobalStyleSheet();\n\n\tprotected override _createGlobalStyleSheet(): GlobalStyleSheet {\n\t\treturn this.globalStyleSheet;\n\t}\n\n\tgetActiveCodeEditor(): ICodeEditor | null {\n\t\treturn null;\n\t}\n\tpublic lastInput?: IResourceEditorInput;\n\toverride openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\t\tthis.lastInput = input;\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class TestGlobalStyleSheet extends GlobalStyleSheet {\n\n\tpublic rules: string[] = [];\n\n\tconstructor() {\n\t\tsuper(null!);\n\t}\n\n\tpublic override insertRule(selector: string, rule: string): void {\n\t\tthis.rules.unshift(`${selector} {${rule}}`);\n\t}\n\n\tpublic override removeRulesContainingSelector(ruleName: string): void {\n\t\tfor (let i = 0; i < this.rules.length; i++) {\n\t\t\tif (this.rules[i].indexOf(ruleName) >= 0) {\n\t\t\t\tthis.rules.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic read(): string {\n\t\treturn this.rules.join('\\n');\n\t}\n}\n\nexport class TestCommandService implements ICommandService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _instantiationService: IInstantiationService;\n\n\tprivate readonly _onWillExecuteCommand = new Emitter<ICommandEvent>();\n\tpublic readonly onWillExecuteCommand: Event<ICommandEvent> = this._onWillExecuteCommand.event;\n\n\tprivate readonly _onDidExecuteCommand = new Emitter<ICommandEvent>();\n\tpublic readonly onDidExecuteCommand: Event<ICommandEvent> = this._onDidExecuteCommand.event;\n\n\tconstructor(instantiationService: IInstantiationService) {\n\t\tthis._instantiationService = instantiationService;\n\t}\n\n\tpublic executeCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tconst command = CommandsRegistry.getCommand(id);\n\t\tif (!command) {\n\t\t\treturn Promise.reject(new Error(`command '${id}' not found`));\n\t\t}\n\n\t\ttry {\n\t\t\tthis._onWillExecuteCommand.fire({ commandId: id, args });\n\t\t\tconst result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler, ...args]) as T;\n\t\t\tthis._onDidExecuteCommand.fire({ commandId: id, args });\n\t\t\treturn Promise.resolve(result);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,2BAA2B,wBAAwB;AAC5D,SAAS,kBAAkB,eAAe,uBAAuB;AACjE,SAAS,4BAA4B;AACrC,SAAS,6BAA6B;AAE/B,MAAM,8BAA8B,0BAA0B;AAAA,EAZrE,OAYqE;AAAA;AAAA;AAAA,EAEpD,mBAAmB,IAAI,qBAAqB;AAAA,EAEzC,0BAA4C;AAC9D,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAA0C;AACzC,WAAO;AAAA,EACR;AAAA,EACO;AAAA,EACE,eAAe,OAA6B,QAA4B,YAAmD;AACnI,SAAK,YAAY;AACjB,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC5B;AACD;AAEO,MAAM,6BAA6B,iBAAiB;AAAA,EA9B3D,OA8B2D;AAAA;AAAA;AAAA,EAEnD,QAAkB,CAAC;AAAA,EAE1B,cAAc;AACb,UAAM,IAAK;AAAA,EACZ;AAAA,EAEgB,WAAW,UAAkB,MAAoB;AAChE,SAAK,MAAM,QAAQ,GAAG,QAAQ,KAAK,IAAI,GAAG;AAAA,EAC3C;AAAA,EAEgB,8BAA8B,UAAwB;AACrE,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC3C,UAAI,KAAK,MAAM,CAAC,EAAE,QAAQ,QAAQ,KAAK,GAAG;AACzC,aAAK,MAAM,OAAO,GAAG,CAAC;AACtB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEO,OAAe;AACrB,WAAO,KAAK,MAAM,KAAK,IAAI;AAAA,EAC5B;AACD;AAEO,MAAM,mBAA8C;AAAA,EAxD3D,OAwD2D;AAAA;AAAA;AAAA,EAGzC;AAAA,EAEA,wBAAwB,IAAI,QAAuB;AAAA,EACpD,uBAA6C,KAAK,sBAAsB;AAAA,EAEvE,uBAAuB,IAAI,QAAuB;AAAA,EACnD,sBAA4C,KAAK,qBAAqB;AAAA,EAEtF,YAAY,sBAA6C;AACxD,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEO,eAAkB,OAAe,MAAyB;AAChE,UAAM,UAAU,iBAAiB,WAAW,EAAE;AAC9C,QAAI,CAAC,SAAS;AACb,aAAO,QAAQ,OAAO,IAAI,MAAM,YAAY,EAAE,aAAa,CAAC;AAAA,IAC7D;AAEA,QAAI;AACH,WAAK,sBAAsB,KAAK,EAAE,WAAW,IAAI,KAAK,CAAC;AACvD,YAAM,SAAS,KAAK,sBAAsB,eAAe,MAAM,KAAK,uBAAuB,CAAC,QAAQ,SAAS,GAAG,IAAI,CAAC;AACrH,WAAK,qBAAqB,KAAK,EAAE,WAAW,IAAI,KAAK,CAAC;AACtD,aAAO,QAAQ,QAAQ,MAAM;AAAA,IAC9B,SAAS,KAAK;AACb,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC1B;AAAA,EACD;AACD;",
  "names": []
}
