var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import assert from "assert";
import { ensureNoDisposablesAreLeakedInTestSuite } from "../../../../base/test/common/utils.js";
import { MinimapCharRendererFactory } from "../../../browser/viewParts/minimap/minimapCharRendererFactory.js";
import { Constants } from "../../../browser/viewParts/minimap/minimapCharSheet.js";
import { RGBA8 } from "../../../common/core/rgba.js";
suite("MinimapCharRenderer", () => {
  ensureNoDisposablesAreLeakedInTestSuite();
  const sampleD = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    208,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    208,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    208,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    13,
    255,
    255,
    255,
    163,
    255,
    255,
    255,
    243,
    255,
    255,
    255,
    229,
    255,
    255,
    255,
    94,
    255,
    255,
    255,
    208,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    164,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    247,
    255,
    255,
    255,
    252,
    255,
    255,
    255,
    240,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    16,
    255,
    255,
    255,
    251,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    148,
    255,
    255,
    255,
    2,
    255,
    255,
    255,
    106,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    59,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    34,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    3,
    255,
    255,
    255,
    240,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    71,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    214,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    49,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    22,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    231,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    14,
    255,
    255,
    255,
    247,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    105,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    61,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    155,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    249,
    255,
    255,
    255,
    185,
    255,
    255,
    255,
    240,
    255,
    255,
    255,
    247,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    14,
    255,
    255,
    255,
    167,
    255,
    255,
    255,
    245,
    255,
    255,
    255,
    232,
    255,
    255,
    255,
    113,
    255,
    255,
    255,
    208,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  function getSampleData() {
    const charCode = "d".charCodeAt(0);
    const result = new Uint8ClampedArray(Constants.SAMPLED_CHAR_HEIGHT * Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT * Constants.CHAR_COUNT);
    for (let i = 0; i < result.length; i++) {
      result[i] = 0;
    }
    const rowWidth = Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT * Constants.CHAR_COUNT;
    const chIndex = charCode - Constants.START_CH_CODE;
    let globalOutputOffset = chIndex * Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT;
    let inputOffset = 0;
    for (let i = 0; i < Constants.SAMPLED_CHAR_HEIGHT; i++) {
      let outputOffset = globalOutputOffset;
      for (let j = 0; j < Constants.SAMPLED_CHAR_WIDTH; j++) {
        for (let channel = 0; channel < Constants.RGBA_CHANNELS_CNT; channel++) {
          result[outputOffset] = sampleD[inputOffset];
          inputOffset++;
          outputOffset++;
        }
      }
      globalOutputOffset += rowWidth;
    }
    return result;
  }
  __name(getSampleData, "getSampleData");
  function createFakeImageData(width, height) {
    return {
      colorSpace: "srgb",
      width,
      height,
      data: new Uint8ClampedArray(width * height * Constants.RGBA_CHANNELS_CNT)
    };
  }
  __name(createFakeImageData, "createFakeImageData");
  test("letter d @ 2x", () => {
    const sampleData = getSampleData();
    const renderer = MinimapCharRendererFactory.createFromSampleData(sampleData, 2);
    const background = new RGBA8(0, 0, 0, 255);
    const color = new RGBA8(255, 255, 255, 255);
    const imageData = createFakeImageData(Constants.BASE_CHAR_WIDTH * 2, Constants.BASE_CHAR_HEIGHT * 2);
    for (let i = 0, len = imageData.data.length / 4; i < len; i++) {
      imageData.data[4 * i + 0] = background.r;
      imageData.data[4 * i + 1] = background.g;
      imageData.data[4 * i + 2] = background.b;
      imageData.data[4 * i + 3] = 255;
    }
    renderer.renderChar(imageData, 0, 0, "d".charCodeAt(0), color, 255, background, 255, 2, false, false);
    const actual = [];
    for (let i = 0; i < imageData.data.length; i++) {
      actual[i] = imageData.data[i];
    }
    assert.deepStrictEqual(actual, [
      45,
      45,
      45,
      255,
      172,
      172,
      172,
      255,
      198,
      198,
      198,
      255,
      200,
      200,
      200,
      255,
      192,
      192,
      192,
      255,
      203,
      203,
      203,
      255,
      0,
      0,
      0,
      255,
      0,
      0,
      0,
      255
    ]);
  });
  test("letter d @ 1x", () => {
    const sampleData = getSampleData();
    const renderer = MinimapCharRendererFactory.createFromSampleData(sampleData, 1);
    const background = new RGBA8(0, 0, 0, 255);
    const color = new RGBA8(255, 255, 255, 255);
    const imageData = createFakeImageData(Constants.BASE_CHAR_WIDTH, Constants.BASE_CHAR_HEIGHT);
    for (let i = 0, len = imageData.data.length / 4; i < len; i++) {
      imageData.data[4 * i + 0] = background.r;
      imageData.data[4 * i + 1] = background.g;
      imageData.data[4 * i + 2] = background.b;
      imageData.data[4 * i + 3] = 255;
    }
    renderer.renderChar(imageData, 0, 0, "d".charCodeAt(0), color, 255, background, 255, 1, false, false);
    const actual = [];
    for (let i = 0; i < imageData.data.length; i++) {
      actual[i] = imageData.data[i];
    }
    assert.deepStrictEqual(actual, [
      203,
      203,
      203,
      255,
      129,
      129,
      129,
      255
    ]);
  });
});
//# sourceMappingURL=minimapCharRenderer.test.js.map
