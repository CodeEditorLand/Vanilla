{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/view/minimapCharRenderer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { MinimapCharRendererFactory } from '../../../browser/viewParts/minimap/minimapCharRendererFactory.js';\nimport { Constants } from '../../../browser/viewParts/minimap/minimapCharSheet.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\n\nsuite('MinimapCharRenderer', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst sampleD = [\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0D, 0xFF, 0xFF, 0xFF, 0xA3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xE5, 0xFF, 0xFF, 0xFF, 0x5E, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xA4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0xFF, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x94, 0xFF, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x6A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0xFF, 0xFF, 0xFF, 0x3B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x22, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0xFF, 0xFF, 0xFF, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0xFF, 0xFF, 0xFF, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0xFF, 0xFF, 0xFF, 0x0E, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x69, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x9B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xB9, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0E, 0xFF, 0xFF, 0xFF, 0xA7, 0xFF, 0xFF, 0xFF, 0xF5, 0xFF, 0xFF, 0xFF, 0xE8, 0xFF, 0xFF, 0xFF, 0x71, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t];\n\n\tfunction getSampleData() {\n\t\tconst charCode = 'd'.charCodeAt(0);\n\t\tconst result = new Uint8ClampedArray(Constants.SAMPLED_CHAR_HEIGHT * Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT * Constants.CHAR_COUNT);\n\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\n\t\tconst rowWidth = Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT * Constants.CHAR_COUNT;\n\t\tconst chIndex = charCode - Constants.START_CH_CODE;\n\n\t\tlet globalOutputOffset = chIndex * Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT;\n\t\tlet inputOffset = 0;\n\t\tfor (let i = 0; i < Constants.SAMPLED_CHAR_HEIGHT; i++) {\n\t\t\tlet outputOffset = globalOutputOffset;\n\t\t\tfor (let j = 0; j < Constants.SAMPLED_CHAR_WIDTH; j++) {\n\t\t\t\tfor (let channel = 0; channel < Constants.RGBA_CHANNELS_CNT; channel++) {\n\t\t\t\t\tresult[outputOffset] = sampleD[inputOffset];\n\t\t\t\t\tinputOffset++;\n\t\t\t\t\toutputOffset++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tglobalOutputOffset += rowWidth;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction createFakeImageData(width: number, height: number): ImageData {\n\t\treturn {\n\t\t\tcolorSpace: 'srgb',\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdata: new Uint8ClampedArray(width * height * Constants.RGBA_CHANNELS_CNT)\n\t\t};\n\t}\n\n\ttest('letter d @ 2x', () => {\n\t\tconst sampleData = getSampleData();\n\t\tconst renderer = MinimapCharRendererFactory.createFromSampleData(sampleData, 2);\n\n\t\tconst background = new RGBA8(0, 0, 0, 255);\n\t\tconst color = new RGBA8(255, 255, 255, 255);\n\t\tconst imageData = createFakeImageData(Constants.BASE_CHAR_WIDTH * 2, Constants.BASE_CHAR_HEIGHT * 2);\n\t\t// set the background color\n\t\tfor (let i = 0, len = imageData.data.length / 4; i < len; i++) {\n\t\t\timageData.data[4 * i + 0] = background.r;\n\t\t\timageData.data[4 * i + 1] = background.g;\n\t\t\timageData.data[4 * i + 2] = background.b;\n\t\t\timageData.data[4 * i + 3] = 255;\n\t\t}\n\t\trenderer.renderChar(imageData, 0, 0, 'd'.charCodeAt(0), color, 255, background, 255, 2, false, false);\n\n\t\tconst actual: number[] = [];\n\t\tfor (let i = 0; i < imageData.data.length; i++) {\n\t\t\tactual[i] = imageData.data[i];\n\t\t}\n\n\t\tassert.deepStrictEqual(actual, [\n\t\t\t0x2D, 0x2D, 0x2D, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF,\n\t\t\t0xC6, 0xC6, 0xC6, 0xFF, 0xC8, 0xC8, 0xC8, 0xFF,\n\t\t\t0xC0, 0xC0, 0xC0, 0xFF, 0xCB, 0xCB, 0xCB, 0xFF,\n\t\t\t0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,\n\t\t]);\n\t});\n\n\ttest('letter d @ 1x', () => {\n\t\tconst sampleData = getSampleData();\n\t\tconst renderer = MinimapCharRendererFactory.createFromSampleData(sampleData, 1);\n\n\t\tconst background = new RGBA8(0, 0, 0, 255);\n\t\tconst color = new RGBA8(255, 255, 255, 255);\n\t\tconst imageData = createFakeImageData(Constants.BASE_CHAR_WIDTH, Constants.BASE_CHAR_HEIGHT);\n\t\t// set the background color\n\t\tfor (let i = 0, len = imageData.data.length / 4; i < len; i++) {\n\t\t\timageData.data[4 * i + 0] = background.r;\n\t\t\timageData.data[4 * i + 1] = background.g;\n\t\t\timageData.data[4 * i + 2] = background.b;\n\t\t\timageData.data[4 * i + 3] = 255;\n\t\t}\n\n\t\trenderer.renderChar(imageData, 0, 0, 'd'.charCodeAt(0), color, 255, background, 255, 1, false, false);\n\n\t\tconst actual: number[] = [];\n\t\tfor (let i = 0; i < imageData.data.length; i++) {\n\t\t\tactual[i] = imageData.data[i];\n\t\t}\n\n\t\tassert.deepStrictEqual(actual, [\n\t\t\t0xCB, 0xCB, 0xCB, 0xFF,\n\t\t\t0x81, 0x81, 0x81, 0xFF,\n\t\t]);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
