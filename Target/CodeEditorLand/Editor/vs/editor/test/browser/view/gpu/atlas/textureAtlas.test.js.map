{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/view/gpu/atlas/textureAtlas.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual, throws } from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport type { IGlyphRasterizer, IRasterizedGlyph } from '../../../../../browser/gpu/raster/raster.js';\nimport { ensureNonNullable } from '../../../../../browser/gpu/gpuUtils.js';\nimport type { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { TextureAtlas } from '../../../../../browser/gpu/atlas/textureAtlas.js';\nimport { createCodeEditorServices } from '../../../testCodeEditor.js';\nimport { assertIsValidGlyph } from './testUtil.js';\nimport { TextureAtlasSlabAllocator } from '../../../../../browser/gpu/atlas/textureAtlasSlabAllocator.js';\n\nconst blackInt = 0x000000FF;\n\nlet lastUniqueGlyph: string | undefined;\nfunction getUniqueGlyphId(): [chars: string, tokenFg: number] {\n\tif (!lastUniqueGlyph) {\n\t\tlastUniqueGlyph = 'a';\n\t} else {\n\t\tlastUniqueGlyph = String.fromCharCode(lastUniqueGlyph.charCodeAt(0) + 1);\n\t}\n\treturn [lastUniqueGlyph, blackInt];\n}\n\nclass TestGlyphRasterizer implements IGlyphRasterizer {\n\treadonly id = 0;\n\treadonly cacheKey = '';\n\tnextGlyphColor: [number, number, number, number] = [0, 0, 0, 0];\n\tnextGlyphDimensions: [number, number] = [0, 0];\n\trasterizeGlyph(chars: string, metadata: number, colorMap: string[]): Readonly<IRasterizedGlyph> {\n\t\tconst w = this.nextGlyphDimensions[0];\n\t\tconst h = this.nextGlyphDimensions[1];\n\t\tif (w === 0 || h === 0) {\n\t\t\tthrow new Error('TestGlyphRasterizer.nextGlyphDimensions must be set to a non-zero value before calling rasterizeGlyph');\n\t\t}\n\t\tconst imageData = new ImageData(w, h);\n\t\tlet i = 0;\n\t\tfor (let y = 0; y < h; y++) {\n\t\t\tfor (let x = 0; x < w; x++) {\n\t\t\t\tconst [r, g, b, a] = this.nextGlyphColor;\n\t\t\t\ti = (y * w + x) * 4;\n\t\t\t\timageData.data[i + 0] = r;\n\t\t\t\timageData.data[i + 1] = g;\n\t\t\t\timageData.data[i + 2] = b;\n\t\t\t\timageData.data[i + 3] = a;\n\t\t\t}\n\t\t}\n\t\tconst canvas = new OffscreenCanvas(w, h);\n\t\tconst ctx = ensureNonNullable(canvas.getContext('2d'));\n\t\tctx.putImageData(imageData, 0, 0);\n\t\treturn {\n\t\t\tsource: canvas,\n\t\t\tboundingBox: { top: 0, left: 0, bottom: h - 1, right: w - 1 },\n\t\t\toriginOffset: { x: 0, y: 0 },\n\t\t};\n\t}\n}\n\nsuite('TextureAtlas', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(() => {\n\t\tlastUniqueGlyph = undefined;\n\t});\n\n\tlet instantiationService: IInstantiationService;\n\n\tlet atlas: TextureAtlas;\n\tlet glyphRasterizer: TestGlyphRasterizer;\n\n\tsetup(() => {\n\t\tinstantiationService = createCodeEditorServices(store);\n\t\tatlas = store.add(instantiationService.createInstance(TextureAtlas, 2, undefined));\n\t\tglyphRasterizer = new TestGlyphRasterizer();\n\t\tglyphRasterizer.nextGlyphDimensions = [1, 1];\n\t\tglyphRasterizer.nextGlyphColor = [0, 0, 0, 0xFF];\n\t});\n\n\ttest('get single glyph', () => {\n\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t});\n\n\ttest('get multiple glyphs', () => {\n\t\tatlas = store.add(instantiationService.createInstance(TextureAtlas, 32, undefined));\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t\t}\n\t});\n\n\ttest('adding glyph to full page creates new page', () => {\n\t\tlet pageCount: number | undefined;\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t\t\tif (pageCount === undefined) {\n\t\t\t\tpageCount = atlas.pages.length;\n\t\t\t} else {\n\t\t\t\tstrictEqual(atlas.pages.length, pageCount, 'the number of pages should not change when the page is being filled');\n\t\t\t}\n\t\t}\n\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t\tstrictEqual(atlas.pages.length, pageCount! + 1, 'the 5th glyph should overflow to a new page');\n\t});\n\n\ttest('adding a glyph larger than the atlas', () => {\n\t\tglyphRasterizer.nextGlyphDimensions = [3, 2];\n\t\tthrows(() => atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), 'should throw when the glyph is too large, this should not happen in practice');\n\t});\n\n\ttest('adding a glyph larger than the standard slab size', () => {\n\t\tglyphRasterizer.nextGlyphDimensions = [2, 2];\n\t\tatlas = store.add(instantiationService.createInstance(TextureAtlas, 32, {\n\t\t\tallocatorType: (canvas, textureIndex) => new TextureAtlasSlabAllocator(canvas, textureIndex, { slabW: 1, slabH: 1 })\n\t\t}));\n\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t});\n\n\ttest('adding a non-first glyph larger than the standard slab size, causing an overflow to a new page', () => {\n\t\tatlas = store.add(instantiationService.createInstance(TextureAtlas, 2, {\n\t\t\tallocatorType: (canvas, textureIndex) => new TextureAtlasSlabAllocator(canvas, textureIndex, { slabW: 1, slabH: 1 })\n\t\t}));\n\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t\tstrictEqual(atlas.pages.length, 1);\n\t\tglyphRasterizer.nextGlyphDimensions = [2, 2];\n\t\tassertIsValidGlyph(atlas.getGlyph(glyphRasterizer, ...getUniqueGlyphId()), atlas);\n\t\tstrictEqual(atlas.pages.length, 2, 'the 2nd glyph should overflow to a new page with a larger slab size');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
