{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/view/gpu/atlas/textureAtlasAllocator.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual, throws } from 'assert';\nimport type { IRasterizedGlyph } from '../../../../../browser/gpu/raster/raster.js';\nimport { ensureNonNullable } from '../../../../../browser/gpu/gpuUtils.js';\nimport type { ITextureAtlasAllocator } from '../../../../../browser/gpu/atlas/atlas.js';\nimport { TextureAtlasShelfAllocator } from '../../../../../browser/gpu/atlas/textureAtlasShelfAllocator.js';\nimport { TextureAtlasSlabAllocator, type TextureAtlasSlabAllocatorOptions } from '../../../../../browser/gpu/atlas/textureAtlasSlabAllocator.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { assertIsValidGlyph } from './testUtil.js';\nimport { BugIndicatingError } from '../../../../../../base/common/errors.js';\n\nconst blackArr = [0x00, 0x00, 0x00, 0xFF];\n\nconst pixel1x1 = createRasterizedGlyph(1, 1, [...blackArr]);\nconst pixel2x1 = createRasterizedGlyph(2, 1, [...blackArr, ...blackArr]);\nconst pixel1x2 = createRasterizedGlyph(1, 2, [...blackArr, ...blackArr]);\n\nfunction createRasterizedGlyph(w: number, h: number, data: ArrayLike<number>): IRasterizedGlyph {\n\tstrictEqual(w * h * 4, data.length);\n\tconst source = new OffscreenCanvas(w, h);\n\tconst imageData = new ImageData(w, h);\n\timageData.data.set(data);\n\tensureNonNullable(source.getContext('2d')).putImageData(imageData, 0, 0);\n\treturn {\n\t\tsource,\n\t\tboundingBox: { top: 0, left: 0, bottom: h - 1, right: w - 1 },\n\t\toriginOffset: { x: 0, y: 0 },\n\t};\n}\n\nfunction allocateAndAssert(allocator: ITextureAtlasAllocator, rasterizedGlyph: IRasterizedGlyph, expected: { x: number; y: number; w: number; h: number } | undefined): void {\n\tconst actual = allocator.allocate(rasterizedGlyph);\n\tif (!actual) {\n\t\tstrictEqual(actual, expected);\n\t\treturn;\n\t}\n\tdeepStrictEqual({\n\t\tx: actual.x,\n\t\ty: actual.y,\n\t\tw: actual.w,\n\t\th: actual.h,\n\t}, expected);\n}\n\nfunction initShelfAllocator(w: number, h: number): { canvas: OffscreenCanvas; allocator: TextureAtlasShelfAllocator } {\n\tconst canvas = new OffscreenCanvas(w, h);\n\tconst allocator = new TextureAtlasShelfAllocator(canvas, 0);\n\treturn { canvas, allocator };\n}\n\nfunction initSlabAllocator(w: number, h: number, options?: TextureAtlasSlabAllocatorOptions): { canvas: OffscreenCanvas; allocator: TextureAtlasSlabAllocator } {\n\tconst canvas = new OffscreenCanvas(w, h);\n\tconst allocator = new TextureAtlasSlabAllocator(canvas, 0, options);\n\treturn { canvas, allocator };\n}\n\nconst allocatorDefinitions: { name: string; initAllocator: (w: number, h: number) => { canvas: OffscreenCanvas; allocator: ITextureAtlasAllocator } }[] = [\n\t{ name: 'shelf', initAllocator: initShelfAllocator },\n\t{ name: 'slab', initAllocator: initSlabAllocator },\n];\n\nsuite('TextureAtlasAllocator', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('shared tests', () => {\n\t\tfor (const { name, initAllocator } of allocatorDefinitions) {\n\t\t\ttest(`(${name}) single allocation`, () => {\n\t\t\t\tconst { canvas, allocator } = initAllocator(2, 2);\n\t\t\t\tassertIsValidGlyph(allocator.allocate(pixel1x1), canvas);\n\t\t\t});\n\t\t\t// Skipping because it fails unexpectedly on web only when asserting the error message\n\t\t\ttest.skip(`(${name}) glyph too large for canvas`, () => {\n\t\t\t\tconst { allocator } = initAllocator(1, 1);\n\t\t\t\tthrows(() => allocateAndAssert(allocator, pixel2x1, undefined), new BugIndicatingError('Glyph is too large for the atlas page'));\n\t\t\t});\n\t\t}\n\t});\n\n\tsuite('TextureAtlasShelfAllocator', () => {\n\t\tconst initAllocator = initShelfAllocator;\n\n\t\ttest('single allocation', () => {\n\t\t\tconst { allocator } = initAllocator(2, 2);\n\t\t\t// 1o\n\t\t\t// oo\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\t\t});\n\t\ttest('wrapping', () => {\n\t\t\tconst { allocator } = initAllocator(5, 4);\n\n\t\t\t// 1233o\n\t\t\t// o2ooo\n\t\t\t// ooooo\n\t\t\t// ooooo\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x2, { x: 1, y: 0, w: 1, h: 2 });\n\t\t\tallocateAndAssert(allocator, pixel2x1, { x: 2, y: 0, w: 2, h: 1 });\n\n\t\t\t// 1233x\n\t\t\t// x2xxx\n\t\t\t// 44556\n\t\t\t// ooooo\n\t\t\tallocateAndAssert(allocator, pixel2x1, { x: 0, y: 2, w: 2, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel2x1, { x: 2, y: 2, w: 2, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 4, y: 2, w: 1, h: 1 });\n\n\t\t\t// 1233x\n\t\t\t// x2xxx\n\t\t\t// 44556\n\t\t\t// 7oooo\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 3, w: 1, h: 1 });\n\t\t});\n\t\ttest('full', () => {\n\t\t\tconst { allocator } = initAllocator(3, 2);\n\t\t\t// 122\n\t\t\t// 1oo\n\t\t\tallocateAndAssert(allocator, pixel1x2, { x: 0, y: 0, w: 1, h: 2 });\n\t\t\tallocateAndAssert(allocator, pixel2x1, { x: 1, y: 0, w: 2, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, undefined);\n\t\t});\n\t});\n\n\tsuite('TextureAtlasSlabAllocator', () => {\n\t\tconst initAllocator = initSlabAllocator;\n\n\t\ttest('single allocation', () => {\n\t\t\tconst { allocator } = initAllocator(2, 2);\n\t\t\t// 1o\n\t\t\t// oo\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\t\t});\n\n\t\ttest('single slab single glyph full', () => {\n\t\t\tconst { allocator } = initAllocator(1, 1, { slabW: 1, slabH: 1 });\n\n\t\t\t// 1\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\n\t\t\tallocateAndAssert(allocator, pixel1x1, undefined);\n\t\t});\n\n\t\ttest('single slab multiple glyph full', () => {\n\t\t\tconst { allocator } = initAllocator(2, 2, { slabW: 2, slabH: 2 });\n\n\t\t\t// 1\n\t\t\t// 1\n\t\t\tallocateAndAssert(allocator, pixel1x2, { x: 0, y: 0, w: 1, h: 2 });\n\t\t\tallocateAndAssert(allocator, pixel1x2, { x: 1, y: 0, w: 1, h: 2 });\n\n\t\t\tallocateAndAssert(allocator, pixel1x2, undefined);\n\t\t});\n\n\t\ttest('allocate 1x1 to multiple slabs until full', () => {\n\t\t\tconst { allocator } = initAllocator(4, 2, { slabW: 2, slabH: 2 });\n\n\t\t\t// 12\u2502oo\n\t\t\t// 34\u2502oo\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 1, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 1, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 1, y: 1, w: 1, h: 1 });\n\n\t\t\t// 12\u250256\n\t\t\t// 34\u250278\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 2, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 3, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 2, y: 1, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 3, y: 1, w: 1, h: 1 });\n\n\t\t\tallocateAndAssert(allocator, pixel1x1, undefined);\n\t\t});\n\n\t\ttest('glyph too large for slab (increase slab size for first glyph)', () => {\n\t\t\tconst { allocator } = initAllocator(2, 2, { slabW: 1, slabH: 1 });\n\t\t\tallocateAndAssert(allocator, pixel2x1, { x: 0, y: 0, w: 2, h: 1 });\n\t\t});\n\n\t\ttest('glyph too large for slab (undefined as it\\'s not the first glyph)', () => {\n\t\t\tconst { allocator } = initAllocator(2, 2, { slabW: 1, slabH: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel2x1, undefined);\n\t\t});\n\n\t\ttest('separate slabs for different sized glyphs', () => {\n\t\t\tconst { allocator } = initAllocator(4, 2, { slabW: 2, slabH: 2 });\n\n\t\t\t// 10\u25022o\n\t\t\t// 00\u25022o\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 0, y: 0, w: 1, h: 1 });\n\t\t\tallocateAndAssert(allocator, pixel1x2, { x: 2, y: 0, w: 1, h: 2 });\n\n\t\t\t// 14\u250223\n\t\t\t// 00\u250223\n\t\t\tallocateAndAssert(allocator, pixel1x2, { x: 3, y: 0, w: 1, h: 2 });\n\t\t\tallocateAndAssert(allocator, pixel1x1, { x: 1, y: 0, w: 1, h: 1 });\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
