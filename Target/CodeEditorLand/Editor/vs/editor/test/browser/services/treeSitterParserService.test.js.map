{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/services/treeSitterParserService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { TextModelTreeSitter, TreeSitterImporter, TreeSitterLanguages } from '../../../browser/services/treeSitter/treeSitterParserService.js';\nimport type { Parser } from '@vscode/tree-sitter-wasm';\nimport { createTextModel } from '../../common/testTextModel.js';\nimport { timeout } from '../../../../base/common/async.js';\nimport { ConsoleMainLogger, ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { LogService } from '../../../../platform/log/common/logService.js';\nimport { mock } from '../../../../base/test/common/mock.js';\n\nclass MockParser implements Parser {\n\tstatic async init(): Promise<void> { }\n\tdelete(): void { }\n\tparse(input: string | Parser.Input, oldTree?: Parser.Tree, options?: Parser.Options): Parser.Tree {\n\t\treturn new MockTree();\n\t}\n\tgetIncludedRanges(): Parser.Range[] {\n\t\treturn [];\n\t}\n\tgetTimeoutMicros(): number { return 0; }\n\tsetTimeoutMicros(timeout: number): void { }\n\treset(): void { }\n\tgetLanguage(): Parser.Language { return {} as any; }\n\tsetLanguage(): void { }\n\tgetLogger(): Parser.Logger {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsetLogger(logFunc?: Parser.Logger | false | null): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nclass MockTreeSitterImporter extends TreeSitterImporter {\n\tpublic override async getParserClass(): Promise<typeof Parser> {\n\t\treturn MockParser as any;\n\t}\n}\n\nclass MockTree implements Parser.Tree {\n\teditorLanguage: string = '';\n\teditorContents: string = '';\n\trootNode: Parser.SyntaxNode = {} as any;\n\trootNodeWithOffset(offsetBytes: number, offsetExtent: Parser.Point): Parser.SyntaxNode {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcopy(): Parser.Tree {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdelete(): void { }\n\tedit(edit: Parser.Edit): Parser.Tree {\n\t\treturn this;\n\t}\n\twalk(): Parser.TreeCursor {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetChangedRanges(other: Parser.Tree): Parser.Range[] {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetIncludedRanges(): Parser.Range[] {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetEditedRange(other: Parser.Tree): Parser.Range {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetLanguage(): Parser.Language {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nclass MockLanguage implements Parser.Language {\n\tversion: number = 0;\n\tfieldCount: number = 0;\n\tstateCount: number = 0;\n\tnodeTypeCount: number = 0;\n\tfieldNameForId(fieldId: number): string | null {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tfieldIdForName(fieldName: string): number | null {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tidForNodeType(type: string, named: boolean): number {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tnodeTypeForId(typeId: number): string | null {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tnodeTypeIsNamed(typeId: number): boolean {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tnodeTypeIsVisible(typeId: number): boolean {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tnextState(stateId: number, typeId: number): number {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tquery(source: string): Parser.Query {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tlookaheadIterator(stateId: number): Parser.LookaheadIterable | null {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tlanguageId: string = '';\n}\n\nsuite('TreeSitterParserService', function () {\n\tconst treeSitterImporter: TreeSitterImporter = new MockTreeSitterImporter();\n\tlet logService: ILogService;\n\tlet telemetryService: ITelemetryService;\n\tsetup(function () {\n\t\tlogService = new LogService(new ConsoleMainLogger());\n\t\ttelemetryService = new class extends mock<ITelemetryService>() {\n\t\t\toverride async publicLog2() {\n\t\t\t\t//\n\t\t\t}\n\t\t};\n\t});\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('TextModelTreeSitter race condition: first language is slow to load', async function () {\n\t\tclass MockTreeSitterLanguages extends TreeSitterLanguages {\n\t\t\tprivate async _fetchJavascript(): Promise<void> {\n\t\t\t\tawait timeout(200);\n\t\t\t\tconst language = new MockLanguage();\n\t\t\t\tlanguage.languageId = 'javascript';\n\t\t\t\tthis._onDidAddLanguage.fire({ id: 'javascript', language });\n\t\t\t}\n\t\t\tpublic override getOrInitLanguage(languageId: string): Parser.Language | undefined {\n\t\t\t\tif (languageId === 'javascript') {\n\t\t\t\t\tthis._fetchJavascript();\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst language = new MockLanguage();\n\t\t\t\tlanguage.languageId = languageId;\n\t\t\t\treturn language;\n\t\t\t}\n\t\t}\n\n\t\tconst treeSitterParser: TreeSitterLanguages = store.add(new MockTreeSitterLanguages(treeSitterImporter, {} as any, { isBuilt: false } as any, new Map()));\n\t\tconst textModel = store.add(createTextModel('console.log(\"Hello, world!\");', 'javascript'));\n\t\tconst textModelTreeSitter = store.add(new TextModelTreeSitter(textModel, treeSitterParser, treeSitterImporter, logService, telemetryService));\n\t\ttextModel.setLanguage('typescript');\n\t\tawait timeout(300);\n\t\tassert.strictEqual((textModelTreeSitter.parseResult?.language as MockLanguage).languageId, 'typescript');\n\t});\n});\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,qBAAqB,oBAAoB,2BAA2B;AAE7E,SAAS,uBAAuB;AAChC,SAAS,eAAe;AACxB,SAAS,mBAAmB,mBAAmB;AAC/C,SAAS,yBAAyB;AAClC,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AAErB,MAAM,WAA6B;AAAA,EAfnC,OAemC;AAAA;AAAA;AAAA,EAClC,aAAa,OAAsB;AAAA,EAAE;AAAA,EACrC,SAAe;AAAA,EAAE;AAAA,EACjB,MAAM,OAA8B,SAAuB,SAAuC;AACjG,WAAO,IAAI,SAAS;AAAA,EACrB;AAAA,EACA,oBAAoC;AACnC,WAAO,CAAC;AAAA,EACT;AAAA,EACA,mBAA2B;AAAE,WAAO;AAAA,EAAG;AAAA,EACvC,iBAAiBA,UAAuB;AAAA,EAAE;AAAA,EAC1C,QAAc;AAAA,EAAE;AAAA,EAChB,cAA+B;AAAE,WAAO,CAAC;AAAA,EAAU;AAAA,EACnD,cAAoB;AAAA,EAAE;AAAA,EACtB,YAA2B;AAC1B,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,UAAU,SAA8C;AACvD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AACD;AAEA,MAAM,+BAA+B,mBAAmB;AAAA,EArCxD,OAqCwD;AAAA;AAAA;AAAA,EACvD,MAAsB,iBAAyC;AAC9D,WAAO;AAAA,EACR;AACD;AAEA,MAAM,SAAgC;AAAA,EA3CtC,OA2CsC;AAAA;AAAA;AAAA,EACrC,iBAAyB;AAAA,EACzB,iBAAyB;AAAA,EACzB,WAA8B,CAAC;AAAA,EAC/B,mBAAmB,aAAqB,cAA+C;AACtF,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,OAAoB;AACnB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,SAAe;AAAA,EAAE;AAAA,EACjB,KAAK,MAAgC;AACpC,WAAO;AAAA,EACR;AAAA,EACA,OAA0B;AACzB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,iBAAiB,OAAoC;AACpD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,oBAAoC;AACnC,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,eAAe,OAAkC;AAChD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,cAA+B;AAC9B,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AACD;AAEA,MAAM,aAAwC;AAAA,EA1E9C,OA0E8C;AAAA;AAAA;AAAA,EAC7C,UAAkB;AAAA,EAClB,aAAqB;AAAA,EACrB,aAAqB;AAAA,EACrB,gBAAwB;AAAA,EACxB,eAAe,SAAgC;AAC9C,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,eAAe,WAAkC;AAChD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,cAAc,MAAc,OAAwB;AACnD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,cAAc,QAA+B;AAC5C,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,gBAAgB,QAAyB;AACxC,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,kBAAkB,QAAyB;AAC1C,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,UAAU,SAAiB,QAAwB;AAClD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,MAAM,QAA8B;AACnC,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,kBAAkB,SAAkD;AACnE,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,aAAqB;AACtB;AAEA,MAAM,2BAA2B,WAAY;AAC5C,QAAM,qBAAyC,IAAI,uBAAuB;AAC1E,MAAI;AACJ,MAAI;AACJ,QAAM,WAAY;AACjB,iBAAa,IAAI,WAAW,IAAI,kBAAkB,CAAC;AACnD,uBAAmB,IAAI,cAAc,KAAwB,EAAE;AAAA,MAC9D,MAAe,aAAa;AAAA,MAE5B;AAAA,IACD;AAAA,EACD,CAAC;AAED,QAAM,QAAQ,wCAAwC;AAEtD,OAAK,sEAAsE,iBAAkB;AAAA,IAC5F,MAAM,gCAAgC,oBAAoB;AAAA,MA7H5D,OA6H4D;AAAA;AAAA;AAAA,MACzD,MAAc,mBAAkC;AAC/C,cAAM,QAAQ,GAAG;AACjB,cAAM,WAAW,IAAI,aAAa;AAClC,iBAAS,aAAa;AACtB,aAAK,kBAAkB,KAAK,EAAE,IAAI,cAAc,SAAS,CAAC;AAAA,MAC3D;AAAA,MACgB,kBAAkB,YAAiD;AAClF,YAAI,eAAe,cAAc;AAChC,eAAK,iBAAiB;AACtB,iBAAO;AAAA,QACR;AACA,cAAM,WAAW,IAAI,aAAa;AAClC,iBAAS,aAAa;AACtB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,UAAM,mBAAwC,MAAM,IAAI,IAAI,wBAAwB,oBAAoB,CAAC,GAAU,EAAE,SAAS,MAAM,GAAU,oBAAI,IAAI,CAAC,CAAC;AACxJ,UAAM,YAAY,MAAM,IAAI,gBAAgB,iCAAiC,YAAY,CAAC;AAC1F,UAAM,sBAAsB,MAAM,IAAI,IAAI,oBAAoB,WAAW,kBAAkB,oBAAoB,YAAY,gBAAgB,CAAC;AAC5I,cAAU,YAAY,YAAY;AAClC,UAAM,QAAQ,GAAG;AACjB,WAAO,aAAa,oBAAoB,aAAa,UAA0B,YAAY,YAAY;AAAA,EACxG,CAAC;AACF,CAAC;",
  "names": ["timeout"]
}
