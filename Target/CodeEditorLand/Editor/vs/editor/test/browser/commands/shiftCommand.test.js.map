{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/browser/commands/shiftCommand.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditorAutoIndentStrategy } from '../../../common/config/editorOptions.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { getEditOperation, testCommand } from '../testCommand.js';\nimport { javascriptOnEnterRules } from '../../common/modes/supports/onEnterRules.js';\nimport { TestLanguageConfigurationService } from '../../common/modes/testLanguageConfigurationService.js';\nimport { withEditorModel } from '../../common/testTextModel.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\n\n/**\n * Create single edit operation\n */\nfunction createSingleEditOp(text: string, positionLineNumber: number, positionColumn: number, selectionLineNumber: number = positionLineNumber, selectionColumn: number = positionColumn): ISingleEditOperation {\n\treturn {\n\t\trange: new Range(selectionLineNumber, selectionColumn, positionLineNumber, positionColumn),\n\t\ttext: text,\n\t\tforceMoveMarkers: false\n\t};\n}\n\nclass DocBlockCommentMode extends Disposable {\n\n\tpublic static languageId = 'commentMode';\n\tpublic readonly languageId = DocBlockCommentMode.languageId;\n\n\tconstructor(\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@ILanguageConfigurationService languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._register(languageService.registerLanguage({ id: this.languageId }));\n\t\tthis._register(languageConfigurationService.register(this.languageId, {\n\t\t\tbrackets: [\n\t\t\t\t['(', ')'],\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']']\n\t\t\t],\n\n\t\t\tonEnterRules: javascriptOnEnterRules\n\t\t}));\n\t}\n}\n\nfunction testShiftCommand(lines: string[], languageId: string | null, useTabStops: boolean, selection: Selection, expectedLines: string[], expectedSelection: Selection, prepare?: (accessor: ServicesAccessor, disposables: DisposableStore) => void): void {\n\ttestCommand(lines, languageId, selection, (accessor, sel) => new ShiftCommand(sel, {\n\t\tisUnshift: false,\n\t\ttabSize: 4,\n\t\tindentSize: 4,\n\t\tinsertSpaces: false,\n\t\tuseTabStops: useTabStops,\n\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t}, accessor.get(ILanguageConfigurationService)), expectedLines, expectedSelection, undefined, prepare);\n}\n\nfunction testUnshiftCommand(lines: string[], languageId: string | null, useTabStops: boolean, selection: Selection, expectedLines: string[], expectedSelection: Selection, prepare?: (accessor: ServicesAccessor, disposables: DisposableStore) => void): void {\n\ttestCommand(lines, languageId, selection, (accessor, sel) => new ShiftCommand(sel, {\n\t\tisUnshift: true,\n\t\ttabSize: 4,\n\t\tindentSize: 4,\n\t\tinsertSpaces: false,\n\t\tuseTabStops: useTabStops,\n\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t}, accessor.get(ILanguageConfigurationService)), expectedLines, expectedSelection, undefined, prepare);\n}\n\nfunction prepareDocBlockCommentLanguage(accessor: ServicesAccessor, disposables: DisposableStore) {\n\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\tconst languageService = accessor.get(ILanguageService);\n\tdisposables.add(new DocBlockCommentMode(languageService, languageConfigurationService));\n}\n\nsuite('Editor Commands - ShiftCommand', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\t// --------- shift\n\n\ttest('Bug 9503: Shifting without any selection', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 1, 1),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 2, 1, 2)\n\t\t);\n\t});\n\n\ttest('shift on single line selection 1', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 3, 1, 1),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 4, 1, 1)\n\t\t);\n\t});\n\n\ttest('shift on single line selection 2', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 1, 3),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 1, 4)\n\t\t);\n\t});\n\n\ttest('simple shift', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 2, 1),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 2, 1)\n\t\t);\n\t});\n\n\ttest('shifting on two separate lines', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 2, 1),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 2, 1)\n\t\t);\n\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(2, 1, 3, 1),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(2, 1, 3, 1)\n\t\t);\n\t});\n\n\ttest('shifting on two lines', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 2, 2, 2),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 3, 2, 2)\n\t\t);\n\t});\n\n\ttest('shifting on two lines again', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(2, 2, 1, 2),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(2, 2, 1, 3)\n\t\t);\n\t});\n\n\ttest('shifting at end of file', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(4, 1, 5, 2),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'\\t123'\n\t\t\t],\n\t\t\tnew Selection(4, 1, 5, 3)\n\t\t);\n\t});\n\n\ttest('issue #1120 TAB should not indent empty lines in a multi-line selection', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 2),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\t\\t\\tMy Second Line',\n\t\t\t\t'\\t\\tThird Line',\n\t\t\t\t'',\n\t\t\t\t'\\t123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 3)\n\t\t);\n\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(4, 1, 5, 1),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'\\t',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(4, 1, 5, 1)\n\t\t);\n\t});\n\n\t// --------- unshift\n\n\ttest('unshift on single line selection 1', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(2, 3, 2, 1),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(2, 3, 2, 1)\n\t\t);\n\t});\n\n\ttest('unshift on single line selection 2', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(2, 1, 2, 3),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(2, 1, 2, 3)\n\t\t);\n\t});\n\n\ttest('simple unshift', () => {\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 2, 1),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 2, 1)\n\t\t);\n\t});\n\n\ttest('unshifting on two lines 1', () => {\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 2, 2, 2),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 2, 2, 2)\n\t\t);\n\t});\n\n\ttest('unshifting on two lines 2', () => {\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(2, 3, 2, 1),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(2, 2, 2, 1)\n\t\t);\n\t});\n\n\ttest('unshifting at the end of the file', () => {\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(4, 1, 5, 2),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(4, 1, 5, 2)\n\t\t);\n\t});\n\n\ttest('unshift many times + shift', () => {\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 4),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\tMy Second Line',\n\t\t\t\t'Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 4)\n\t\t);\n\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\tMy Second Line',\n\t\t\t\t'Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 4),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'My Second Line',\n\t\t\t\t'Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 4)\n\t\t);\n\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'My Second Line',\n\t\t\t\t'Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 4),\n\t\t\t[\n\t\t\t\t'\\tMy First Line',\n\t\t\t\t'\\tMy Second Line',\n\t\t\t\t'\\tThird Line',\n\t\t\t\t'',\n\t\t\t\t'\\t123'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 5)\n\t\t);\n\t});\n\n\ttest('Bug 9119: Unshift from first column doesn\\'t work', () => {\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnull,\n\t\t\ttrue,\n\t\t\tnew Selection(2, 1, 2, 1),\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\tnew Selection(2, 1, 2, 1)\n\t\t);\n\t});\n\n\ttest('issue #348: indenting around doc block comments', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'/**',\n\t\t\t\t' * a doc comment',\n\t\t\t\t' */',\n\t\t\t\t'function hello() {}'\n\t\t\t],\n\t\t\tDocBlockCommentMode.languageId,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 20),\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'\\t/**',\n\t\t\t\t'\\t * a doc comment',\n\t\t\t\t'\\t */',\n\t\t\t\t'\\tfunction hello() {}'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 21),\n\t\t\tprepareDocBlockCommentLanguage\n\t\t);\n\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'/**',\n\t\t\t\t' * a doc comment',\n\t\t\t\t' */',\n\t\t\t\t'function hello() {}'\n\t\t\t],\n\t\t\tDocBlockCommentMode.languageId,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 20),\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'/**',\n\t\t\t\t' * a doc comment',\n\t\t\t\t' */',\n\t\t\t\t'function hello() {}'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 20),\n\t\t\tprepareDocBlockCommentLanguage\n\t\t);\n\n\t\ttestUnshiftCommand(\n\t\t\t[\n\t\t\t\t'\\t',\n\t\t\t\t'\\t/**',\n\t\t\t\t'\\t * a doc comment',\n\t\t\t\t'\\t */',\n\t\t\t\t'\\tfunction hello() {}'\n\t\t\t],\n\t\t\tDocBlockCommentMode.languageId,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 5, 21),\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'/**',\n\t\t\t\t' * a doc comment',\n\t\t\t\t' */',\n\t\t\t\t'function hello() {}'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 5, 20),\n\t\t\tprepareDocBlockCommentLanguage\n\t\t);\n\t});\n\n\ttest('issue #1609: Wrong indentation of block comments', () => {\n\t\ttestShiftCommand(\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'/**',\n\t\t\t\t' * test',\n\t\t\t\t' *',\n\t\t\t\t' * @type {number}',\n\t\t\t\t' */',\n\t\t\t\t'var foo = 0;'\n\t\t\t],\n\t\t\tDocBlockCommentMode.languageId,\n\t\t\ttrue,\n\t\t\tnew Selection(1, 1, 7, 13),\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'\\t/**',\n\t\t\t\t'\\t * test',\n\t\t\t\t'\\t *',\n\t\t\t\t'\\t * @type {number}',\n\t\t\t\t'\\t */',\n\t\t\t\t'\\tvar foo = 0;'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 7, 14),\n\t\t\tprepareDocBlockCommentLanguage\n\t\t);\n\t});\n\n\ttest('issue #1620: a) Line indent doesn\\'t handle leading whitespace properly', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'   Written | Numeric',\n\t\t\t\t'       one | 1',\n\t\t\t\t'       two | 2',\n\t\t\t\t'     three | 3',\n\t\t\t\t'      four | 4',\n\t\t\t\t'      five | 5',\n\t\t\t\t'       six | 6',\n\t\t\t\t'     seven | 7',\n\t\t\t\t'     eight | 8',\n\t\t\t\t'      nine | 9',\n\t\t\t\t'       ten | 10',\n\t\t\t\t'    eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnull,\n\t\t\tnew Selection(1, 1, 13, 1),\n\t\t\t(accessor, sel) => new ShiftCommand(sel, {\n\t\t\t\tisUnshift: false,\n\t\t\t\ttabSize: 4,\n\t\t\t\tindentSize: 4,\n\t\t\t\tinsertSpaces: true,\n\t\t\t\tuseTabStops: false,\n\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t}, accessor.get(ILanguageConfigurationService)),\n\t\t\t[\n\t\t\t\t'       Written | Numeric',\n\t\t\t\t'           one | 1',\n\t\t\t\t'           two | 2',\n\t\t\t\t'         three | 3',\n\t\t\t\t'          four | 4',\n\t\t\t\t'          five | 5',\n\t\t\t\t'           six | 6',\n\t\t\t\t'         seven | 7',\n\t\t\t\t'         eight | 8',\n\t\t\t\t'          nine | 9',\n\t\t\t\t'           ten | 10',\n\t\t\t\t'        eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnew Selection(1, 1, 13, 1)\n\t\t);\n\t});\n\n\ttest('issue #1620: b) Line indent doesn\\'t handle leading whitespace properly', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'       Written | Numeric',\n\t\t\t\t'           one | 1',\n\t\t\t\t'           two | 2',\n\t\t\t\t'         three | 3',\n\t\t\t\t'          four | 4',\n\t\t\t\t'          five | 5',\n\t\t\t\t'           six | 6',\n\t\t\t\t'         seven | 7',\n\t\t\t\t'         eight | 8',\n\t\t\t\t'          nine | 9',\n\t\t\t\t'           ten | 10',\n\t\t\t\t'        eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnull,\n\t\t\tnew Selection(1, 1, 13, 1),\n\t\t\t(accessor, sel) => new ShiftCommand(sel, {\n\t\t\t\tisUnshift: true,\n\t\t\t\ttabSize: 4,\n\t\t\t\tindentSize: 4,\n\t\t\t\tinsertSpaces: true,\n\t\t\t\tuseTabStops: false,\n\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t}, accessor.get(ILanguageConfigurationService)),\n\t\t\t[\n\t\t\t\t'   Written | Numeric',\n\t\t\t\t'       one | 1',\n\t\t\t\t'       two | 2',\n\t\t\t\t'     three | 3',\n\t\t\t\t'      four | 4',\n\t\t\t\t'      five | 5',\n\t\t\t\t'       six | 6',\n\t\t\t\t'     seven | 7',\n\t\t\t\t'     eight | 8',\n\t\t\t\t'      nine | 9',\n\t\t\t\t'       ten | 10',\n\t\t\t\t'    eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnew Selection(1, 1, 13, 1)\n\t\t);\n\t});\n\n\ttest('issue #1620: c) Line indent doesn\\'t handle leading whitespace properly', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'       Written | Numeric',\n\t\t\t\t'           one | 1',\n\t\t\t\t'           two | 2',\n\t\t\t\t'         three | 3',\n\t\t\t\t'          four | 4',\n\t\t\t\t'          five | 5',\n\t\t\t\t'           six | 6',\n\t\t\t\t'         seven | 7',\n\t\t\t\t'         eight | 8',\n\t\t\t\t'          nine | 9',\n\t\t\t\t'           ten | 10',\n\t\t\t\t'        eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnull,\n\t\t\tnew Selection(1, 1, 13, 1),\n\t\t\t(accessor, sel) => new ShiftCommand(sel, {\n\t\t\t\tisUnshift: true,\n\t\t\t\ttabSize: 4,\n\t\t\t\tindentSize: 4,\n\t\t\t\tinsertSpaces: false,\n\t\t\t\tuseTabStops: false,\n\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t}, accessor.get(ILanguageConfigurationService)),\n\t\t\t[\n\t\t\t\t'   Written | Numeric',\n\t\t\t\t'       one | 1',\n\t\t\t\t'       two | 2',\n\t\t\t\t'     three | 3',\n\t\t\t\t'      four | 4',\n\t\t\t\t'      five | 5',\n\t\t\t\t'       six | 6',\n\t\t\t\t'     seven | 7',\n\t\t\t\t'     eight | 8',\n\t\t\t\t'      nine | 9',\n\t\t\t\t'       ten | 10',\n\t\t\t\t'    eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnew Selection(1, 1, 13, 1)\n\t\t);\n\t});\n\n\ttest('issue #1620: d) Line indent doesn\\'t handle leading whitespace properly', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'\\t   Written | Numeric',\n\t\t\t\t'\\t       one | 1',\n\t\t\t\t'\\t       two | 2',\n\t\t\t\t'\\t     three | 3',\n\t\t\t\t'\\t      four | 4',\n\t\t\t\t'\\t      five | 5',\n\t\t\t\t'\\t       six | 6',\n\t\t\t\t'\\t     seven | 7',\n\t\t\t\t'\\t     eight | 8',\n\t\t\t\t'\\t      nine | 9',\n\t\t\t\t'\\t       ten | 10',\n\t\t\t\t'\\t    eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnull,\n\t\t\tnew Selection(1, 1, 13, 1),\n\t\t\t(accessor, sel) => new ShiftCommand(sel, {\n\t\t\t\tisUnshift: true,\n\t\t\t\ttabSize: 4,\n\t\t\t\tindentSize: 4,\n\t\t\t\tinsertSpaces: true,\n\t\t\t\tuseTabStops: false,\n\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t}, accessor.get(ILanguageConfigurationService)),\n\t\t\t[\n\t\t\t\t'   Written | Numeric',\n\t\t\t\t'       one | 1',\n\t\t\t\t'       two | 2',\n\t\t\t\t'     three | 3',\n\t\t\t\t'      four | 4',\n\t\t\t\t'      five | 5',\n\t\t\t\t'       six | 6',\n\t\t\t\t'     seven | 7',\n\t\t\t\t'     eight | 8',\n\t\t\t\t'      nine | 9',\n\t\t\t\t'       ten | 10',\n\t\t\t\t'    eleven | 11',\n\t\t\t\t'',\n\t\t\t],\n\t\t\tnew Selection(1, 1, 13, 1)\n\t\t);\n\t});\n\n\ttest('issue microsoft/monaco-editor#443: Indentation of a single row deletes selected text in some cases', () => {\n\t\ttestCommand(\n\t\t\t[\n\t\t\t\t'Hello world!',\n\t\t\t\t'another line'\n\t\t\t],\n\t\t\tnull,\n\t\t\tnew Selection(1, 1, 1, 13),\n\t\t\t(accessor, sel) => new ShiftCommand(sel, {\n\t\t\t\tisUnshift: false,\n\t\t\t\ttabSize: 4,\n\t\t\t\tindentSize: 4,\n\t\t\t\tinsertSpaces: false,\n\t\t\t\tuseTabStops: true,\n\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t}, accessor.get(ILanguageConfigurationService)),\n\t\t\t[\n\t\t\t\t'\\tHello world!',\n\t\t\t\t'another line'\n\t\t\t],\n\t\t\tnew Selection(1, 1, 1, 14)\n\t\t);\n\t});\n\n\ttest('bug #16815:Shift+Tab doesn\\'t go back to tabstop', () => {\n\n\t\tconst repeatStr = (str: string, cnt: number): string => {\n\t\t\tlet r = '';\n\t\t\tfor (let i = 0; i < cnt; i++) {\n\t\t\t\tr += str;\n\t\t\t}\n\t\t\treturn r;\n\t\t};\n\n\t\tconst testOutdent = (tabSize: number, indentSize: number, insertSpaces: boolean, lineText: string, expectedIndents: number) => {\n\t\t\tconst oneIndent = insertSpaces ? repeatStr(' ', indentSize) : '\\t';\n\t\t\tconst expectedIndent = repeatStr(oneIndent, expectedIndents);\n\t\t\tif (lineText.length > 0) {\n\t\t\t\t_assertUnshiftCommand(tabSize, indentSize, insertSpaces, [lineText + 'aaa'], [createSingleEditOp(expectedIndent, 1, 1, 1, lineText.length + 1)]);\n\t\t\t} else {\n\t\t\t\t_assertUnshiftCommand(tabSize, indentSize, insertSpaces, [lineText + 'aaa'], []);\n\t\t\t}\n\t\t};\n\n\t\tconst testIndent = (tabSize: number, indentSize: number, insertSpaces: boolean, lineText: string, expectedIndents: number) => {\n\t\t\tconst oneIndent = insertSpaces ? repeatStr(' ', indentSize) : '\\t';\n\t\t\tconst expectedIndent = repeatStr(oneIndent, expectedIndents);\n\t\t\t_assertShiftCommand(tabSize, indentSize, insertSpaces, [lineText + 'aaa'], [createSingleEditOp(expectedIndent, 1, 1, 1, lineText.length + 1)]);\n\t\t};\n\n\t\tconst testIndentation = (tabSize: number, indentSize: number, lineText: string, expectedOnOutdent: number, expectedOnIndent: number) => {\n\t\t\ttestOutdent(tabSize, indentSize, true, lineText, expectedOnOutdent);\n\t\t\ttestOutdent(tabSize, indentSize, false, lineText, expectedOnOutdent);\n\n\t\t\ttestIndent(tabSize, indentSize, true, lineText, expectedOnIndent);\n\t\t\ttestIndent(tabSize, indentSize, false, lineText, expectedOnIndent);\n\t\t};\n\n\t\t// insertSpaces: true\n\t\t// 0 => 0\n\t\ttestIndentation(4, 4, '', 0, 1);\n\n\t\t// 1 => 0\n\t\ttestIndentation(4, 4, '\\t', 0, 2);\n\t\ttestIndentation(4, 4, ' ', 0, 1);\n\t\ttestIndentation(4, 4, ' \\t', 0, 2);\n\t\ttestIndentation(4, 4, '  ', 0, 1);\n\t\ttestIndentation(4, 4, '  \\t', 0, 2);\n\t\ttestIndentation(4, 4, '   ', 0, 1);\n\t\ttestIndentation(4, 4, '   \\t', 0, 2);\n\t\ttestIndentation(4, 4, '    ', 0, 2);\n\n\t\t// 2 => 1\n\t\ttestIndentation(4, 4, '\\t\\t', 1, 3);\n\t\ttestIndentation(4, 4, '\\t ', 1, 2);\n\t\ttestIndentation(4, 4, '\\t \\t', 1, 3);\n\t\ttestIndentation(4, 4, '\\t  ', 1, 2);\n\t\ttestIndentation(4, 4, '\\t  \\t', 1, 3);\n\t\ttestIndentation(4, 4, '\\t   ', 1, 2);\n\t\ttestIndentation(4, 4, '\\t   \\t', 1, 3);\n\t\ttestIndentation(4, 4, '\\t    ', 1, 3);\n\t\ttestIndentation(4, 4, ' \\t\\t', 1, 3);\n\t\ttestIndentation(4, 4, ' \\t ', 1, 2);\n\t\ttestIndentation(4, 4, ' \\t \\t', 1, 3);\n\t\ttestIndentation(4, 4, ' \\t  ', 1, 2);\n\t\ttestIndentation(4, 4, ' \\t  \\t', 1, 3);\n\t\ttestIndentation(4, 4, ' \\t   ', 1, 2);\n\t\ttestIndentation(4, 4, ' \\t   \\t', 1, 3);\n\t\ttestIndentation(4, 4, ' \\t    ', 1, 3);\n\t\ttestIndentation(4, 4, '  \\t\\t', 1, 3);\n\t\ttestIndentation(4, 4, '  \\t ', 1, 2);\n\t\ttestIndentation(4, 4, '  \\t \\t', 1, 3);\n\t\ttestIndentation(4, 4, '  \\t  ', 1, 2);\n\t\ttestIndentation(4, 4, '  \\t  \\t', 1, 3);\n\t\ttestIndentation(4, 4, '  \\t   ', 1, 2);\n\t\ttestIndentation(4, 4, '  \\t   \\t', 1, 3);\n\t\ttestIndentation(4, 4, '  \\t    ', 1, 3);\n\t\ttestIndentation(4, 4, '   \\t\\t', 1, 3);\n\t\ttestIndentation(4, 4, '   \\t ', 1, 2);\n\t\ttestIndentation(4, 4, '   \\t \\t', 1, 3);\n\t\ttestIndentation(4, 4, '   \\t  ', 1, 2);\n\t\ttestIndentation(4, 4, '   \\t  \\t', 1, 3);\n\t\ttestIndentation(4, 4, '   \\t   ', 1, 2);\n\t\ttestIndentation(4, 4, '   \\t   \\t', 1, 3);\n\t\ttestIndentation(4, 4, '   \\t    ', 1, 3);\n\t\ttestIndentation(4, 4, '    \\t', 1, 3);\n\t\ttestIndentation(4, 4, '     ', 1, 2);\n\t\ttestIndentation(4, 4, '     \\t', 1, 3);\n\t\ttestIndentation(4, 4, '      ', 1, 2);\n\t\ttestIndentation(4, 4, '      \\t', 1, 3);\n\t\ttestIndentation(4, 4, '       ', 1, 2);\n\t\ttestIndentation(4, 4, '       \\t', 1, 3);\n\t\ttestIndentation(4, 4, '        ', 1, 3);\n\n\t\t// 3 => 2\n\t\ttestIndentation(4, 4, '         ', 2, 3);\n\n\t\tfunction _assertUnshiftCommand(tabSize: number, indentSize: number, insertSpaces: boolean, text: string[], expected: ISingleEditOperation[]): void {\n\t\t\treturn withEditorModel(text, (model) => {\n\t\t\t\tconst testLanguageConfigurationService = new TestLanguageConfigurationService();\n\t\t\t\tconst op = new ShiftCommand(new Selection(1, 1, text.length + 1, 1), {\n\t\t\t\t\tisUnshift: true,\n\t\t\t\t\ttabSize: tabSize,\n\t\t\t\t\tindentSize: indentSize,\n\t\t\t\t\tinsertSpaces: insertSpaces,\n\t\t\t\t\tuseTabStops: true,\n\t\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t\t}, testLanguageConfigurationService);\n\t\t\t\tconst actual = getEditOperation(model, op);\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t\ttestLanguageConfigurationService.dispose();\n\t\t\t});\n\t\t}\n\n\t\tfunction _assertShiftCommand(tabSize: number, indentSize: number, insertSpaces: boolean, text: string[], expected: ISingleEditOperation[]): void {\n\t\t\treturn withEditorModel(text, (model) => {\n\t\t\t\tconst testLanguageConfigurationService = new TestLanguageConfigurationService();\n\t\t\t\tconst op = new ShiftCommand(new Selection(1, 1, text.length + 1, 1), {\n\t\t\t\t\tisUnshift: false,\n\t\t\t\t\ttabSize: tabSize,\n\t\t\t\t\tindentSize: indentSize,\n\t\t\t\t\tinsertSpaces: insertSpaces,\n\t\t\t\t\tuseTabStops: true,\n\t\t\t\t\tautoIndent: EditorAutoIndentStrategy.Full,\n\t\t\t\t}, testLanguageConfigurationService);\n\t\t\t\tconst actual = getEditOperation(model, op);\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t\ttestLanguageConfigurationService.dispose();\n\t\t\t});\n\t\t}\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
