{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/modesTestUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { StandardTokenType, MetadataConsts } from '../../common/encodedTokenAttributes.js';\nimport { ScopedLineTokens, createScopedLineTokens } from '../../common/languages/supports.js';\nimport { LanguageIdCodec } from '../../common/services/languagesRegistry.js';\n\nexport interface TokenText {\n\ttext: string;\n\ttype: StandardTokenType;\n}\n\nexport function createFakeScopedLineTokens(rawTokens: TokenText[]): ScopedLineTokens {\n\tconst tokens = new Uint32Array(rawTokens.length << 1);\n\tlet line = '';\n\n\tfor (let i = 0, len = rawTokens.length; i < len; i++) {\n\t\tconst rawToken = rawTokens[i];\n\n\t\tconst startOffset = line.length;\n\t\tconst metadata = (\n\t\t\t(rawToken.type << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t) >>> 0;\n\n\t\ttokens[(i << 1)] = startOffset;\n\t\ttokens[(i << 1) + 1] = metadata;\n\t\tline += rawToken.text;\n\t}\n\n\tLineTokens.convertToEndOffset(tokens, line.length);\n\treturn createScopedLineTokens(new LineTokens(tokens, line, new LanguageIdCodec()), 0);\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB,sBAAsB;AAClD,SAAS,kBAAkB,8BAA8B;AACzD,SAAS,uBAAuB;AAOzB,SAAS,2BAA2B,WAA0C;AACpF,QAAM,SAAS,IAAI,YAAY,UAAU,UAAU,CAAC;AACpD,MAAI,OAAO;AAEX,WAAS,IAAI,GAAG,MAAM,UAAU,QAAQ,IAAI,KAAK,KAAK;AACrD,UAAM,WAAW,UAAU,CAAC;AAE5B,UAAM,cAAc,KAAK;AACzB,UAAM,WACJ,SAAS,QAAQ,eAAe,sBAC5B;AAEN,WAAQ,KAAK,CAAE,IAAI;AACnB,YAAQ,KAAK,KAAK,CAAC,IAAI;AACvB,YAAQ,SAAS;AAAA,EAClB;AAEA,aAAW,mBAAmB,QAAQ,KAAK,MAAM;AACjD,SAAO,uBAAuB,IAAI,WAAW,QAAQ,MAAM,IAAI,gBAAgB,CAAC,GAAG,CAAC;AACrF;AAnBgB;",
  "names": []
}
