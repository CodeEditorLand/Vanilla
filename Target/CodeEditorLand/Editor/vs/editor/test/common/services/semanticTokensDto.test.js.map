{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/services/semanticTokensDto.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IFullSemanticTokensDto, IDeltaSemanticTokensDto, encodeSemanticTokensDto, ISemanticTokensDto, decodeSemanticTokensDto } from '../../../common/services/semanticTokensDto.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('SemanticTokensDto', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction toArr(arr: Uint32Array): number[] {\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tresult[i] = arr[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction assertEqualFull(actual: IFullSemanticTokensDto, expected: IFullSemanticTokensDto): void {\n\t\tconst convert = (dto: IFullSemanticTokensDto) => {\n\t\t\treturn {\n\t\t\t\tid: dto.id,\n\t\t\t\ttype: dto.type,\n\t\t\t\tdata: toArr(dto.data)\n\t\t\t};\n\t\t};\n\t\tassert.deepStrictEqual(convert(actual), convert(expected));\n\t}\n\n\tfunction assertEqualDelta(actual: IDeltaSemanticTokensDto, expected: IDeltaSemanticTokensDto): void {\n\t\tconst convertOne = (delta: { start: number; deleteCount: number; data?: Uint32Array }) => {\n\t\t\tif (!delta.data) {\n\t\t\t\treturn delta;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstart: delta.start,\n\t\t\t\tdeleteCount: delta.deleteCount,\n\t\t\t\tdata: toArr(delta.data)\n\t\t\t};\n\t\t};\n\t\tconst convert = (dto: IDeltaSemanticTokensDto) => {\n\t\t\treturn {\n\t\t\t\tid: dto.id,\n\t\t\t\ttype: dto.type,\n\t\t\t\tdeltas: dto.deltas.map(convertOne)\n\t\t\t};\n\t\t};\n\t\tassert.deepStrictEqual(convert(actual), convert(expected));\n\t}\n\n\tfunction testRoundTrip(value: ISemanticTokensDto): void {\n\t\tconst decoded = decodeSemanticTokensDto(encodeSemanticTokensDto(value));\n\t\tif (value.type === 'full' && decoded.type === 'full') {\n\t\t\tassertEqualFull(decoded, value);\n\t\t} else if (value.type === 'delta' && decoded.type === 'delta') {\n\t\t\tassertEqualDelta(decoded, value);\n\t\t} else {\n\t\t\tassert.fail('wrong type');\n\t\t}\n\t}\n\n\ttest('full encoding', () => {\n\t\ttestRoundTrip({\n\t\t\tid: 12,\n\t\t\ttype: 'full',\n\t\t\tdata: new Uint32Array([(1 << 24) + (2 << 16) + (3 << 8) + 4])\n\t\t});\n\t});\n\n\ttest('delta encoding', () => {\n\t\ttestRoundTrip({\n\t\t\tid: 12,\n\t\t\ttype: 'delta',\n\t\t\tdeltas: [{\n\t\t\t\tstart: 0,\n\t\t\t\tdeleteCount: 4,\n\t\t\t\tdata: undefined\n\t\t\t}, {\n\t\t\t\tstart: 15,\n\t\t\t\tdeleteCount: 0,\n\t\t\t\tdata: new Uint32Array([(1 << 24) + (2 << 16) + (3 << 8) + 4])\n\t\t\t}, {\n\t\t\t\tstart: 27,\n\t\t\t\tdeleteCount: 5,\n\t\t\t\tdata: new Uint32Array([(1 << 24) + (2 << 16) + (3 << 8) + 4, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t\t\t}]\n\t\t});\n\t});\n\n\ttest('partial array buffer', () => {\n\t\tconst sharedArr = new Uint32Array([\n\t\t\t(1 << 24) + (2 << 16) + (3 << 8) + 4,\n\t\t\t1, 2, 3, 4, 5, (1 << 24) + (2 << 16) + (3 << 8) + 4\n\t\t]);\n\t\ttestRoundTrip({\n\t\t\tid: 12,\n\t\t\ttype: 'delta',\n\t\t\tdeltas: [{\n\t\t\t\tstart: 0,\n\t\t\t\tdeleteCount: 4,\n\t\t\t\tdata: sharedArr.subarray(0, 1)\n\t\t\t}, {\n\t\t\t\tstart: 15,\n\t\t\t\tdeleteCount: 0,\n\t\t\t\tdata: sharedArr.subarray(1, sharedArr.length)\n\t\t\t}]\n\t\t});\n\t});\n\n\ttest('issue #94521: unusual backing array buffer', () => {\n\t\tfunction wrapAndSliceUint8Arry(buff: Uint8Array, prefixLength: number, suffixLength: number): Uint8Array {\n\t\t\tconst wrapped = new Uint8Array(prefixLength + buff.byteLength + suffixLength);\n\t\t\twrapped.set(buff, prefixLength);\n\t\t\treturn wrapped.subarray(prefixLength, prefixLength + buff.byteLength);\n\t\t}\n\t\tfunction wrapAndSlice(buff: VSBuffer, prefixLength: number, suffixLength: number): VSBuffer {\n\t\t\treturn VSBuffer.wrap(wrapAndSliceUint8Arry(buff.buffer, prefixLength, suffixLength));\n\t\t}\n\t\tconst dto: ISemanticTokensDto = {\n\t\t\tid: 5,\n\t\t\ttype: 'full',\n\t\t\tdata: new Uint32Array([1, 2, 3, 4, 5])\n\t\t};\n\t\tconst encoded = encodeSemanticTokensDto(dto);\n\n\t\t// with misaligned prefix and misaligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 1, 1)), dto);\n\t\t// with misaligned prefix and aligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 1, 4)), dto);\n\t\t// with aligned prefix and misaligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 4, 1)), dto);\n\t\t// with aligned prefix and aligned suffix\n\t\tassertEqualFull(<IFullSemanticTokensDto>decodeSemanticTokensDto(wrapAndSlice(encoded, 4, 4)), dto);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
