{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/services/editorSimpleWorker.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { TextEdit } from '../../../common/languages.js';\nimport { BaseEditorSimpleWorker } from '../../../common/services/editorSimpleWorker.js';\nimport { ICommonModel } from '../../../common/services/textModelSync/textModelSync.impl.js';\n\nsuite('EditorSimpleWorker', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass WorkerWithModels extends BaseEditorSimpleWorker {\n\n\t\tgetModel(uri: string) {\n\t\t\treturn this._getModel(uri);\n\t\t}\n\n\t\taddModel(lines: string[], eol: string = '\\n') {\n\t\t\tconst uri = 'test:file#' + Date.now();\n\t\t\tthis.$acceptNewModel({\n\t\t\t\turl: uri,\n\t\t\t\tversionId: 1,\n\t\t\t\tlines: lines,\n\t\t\t\tEOL: eol\n\t\t\t});\n\t\t\treturn this._getModel(uri)!;\n\t\t}\n\t}\n\n\tlet worker: WorkerWithModels;\n\tlet model: ICommonModel;\n\n\tsetup(() => {\n\t\tworker = new WorkerWithModels();\n\t\tmodel = worker.addModel([\n\t\t\t'This is line one', //16\n\t\t\t'and this is line number two', //27\n\t\t\t'it is followed by #3', //20\n\t\t\t'and finished with the fourth.', //29\n\t\t]);\n\t});\n\n\tfunction assertPositionAt(offset: number, line: number, column: number) {\n\t\tconst position = model.positionAt(offset);\n\t\tassert.strictEqual(position.lineNumber, line);\n\t\tassert.strictEqual(position.column, column);\n\t}\n\n\tfunction assertOffsetAt(lineNumber: number, column: number, offset: number) {\n\t\tconst actual = model.offsetAt({ lineNumber, column });\n\t\tassert.strictEqual(actual, offset);\n\t}\n\n\ttest('ICommonModel#offsetAt', () => {\n\t\tassertOffsetAt(1, 1, 0);\n\t\tassertOffsetAt(1, 2, 1);\n\t\tassertOffsetAt(1, 17, 16);\n\t\tassertOffsetAt(2, 1, 17);\n\t\tassertOffsetAt(2, 4, 20);\n\t\tassertOffsetAt(3, 1, 45);\n\t\tassertOffsetAt(5, 30, 95);\n\t\tassertOffsetAt(5, 31, 95);\n\t\tassertOffsetAt(5, Number.MAX_VALUE, 95);\n\t\tassertOffsetAt(6, 30, 95);\n\t\tassertOffsetAt(Number.MAX_VALUE, 30, 95);\n\t\tassertOffsetAt(Number.MAX_VALUE, Number.MAX_VALUE, 95);\n\t});\n\n\ttest('ICommonModel#positionAt', () => {\n\t\tassertPositionAt(0, 1, 1);\n\t\tassertPositionAt(Number.MIN_VALUE, 1, 1);\n\t\tassertPositionAt(1, 1, 2);\n\t\tassertPositionAt(16, 1, 17);\n\t\tassertPositionAt(17, 2, 1);\n\t\tassertPositionAt(20, 2, 4);\n\t\tassertPositionAt(45, 3, 1);\n\t\tassertPositionAt(95, 4, 30);\n\t\tassertPositionAt(96, 4, 30);\n\t\tassertPositionAt(99, 4, 30);\n\t\tassertPositionAt(Number.MAX_VALUE, 4, 30);\n\t});\n\n\ttest('ICommonModel#validatePosition, issue #15882', function () {\n\t\tconst model = worker.addModel(['{\"id\": \"0001\",\"type\": \"donut\",\"name\": \"Cake\",\"image\":{\"url\": \"images/0001.jpg\",\"width\": 200,\"height\": 200},\"thumbnail\":{\"url\": \"images/thumbnails/0001.jpg\",\"width\": 32,\"height\": 32}}']);\n\t\tassert.strictEqual(model.offsetAt({ lineNumber: 1, column: 2 }), 1);\n\t});\n\n\ttest('MoreMinimal', () => {\n\n\t\treturn worker.$computeMoreMinimalEdits(model.uri.toString(), [{ text: 'This is line One', range: new Range(1, 1, 1, 17) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 1);\n\t\t\tconst [first] = edits;\n\t\t\tassert.strictEqual(first.text, 'O');\n\t\t\tassert.deepStrictEqual(first.range, { startLineNumber: 1, startColumn: 14, endLineNumber: 1, endColumn: 15 });\n\t\t});\n\t});\n\n\ttest('MoreMinimal, merge adjacent edits', async function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'one',\n\t\t\t'two',\n\t\t\t'three',\n\t\t\t'four',\n\t\t\t'five'\n\t\t], '\\n');\n\n\n\t\tconst newEdits = await worker.$computeMoreMinimalEdits(model.uri.toString(), [\n\t\t\t{\n\t\t\t\trange: new Range(1, 1, 2, 1),\n\t\t\t\ttext: 'one\\ntwo\\nthree\\n',\n\t\t\t}, {\n\t\t\t\trange: new Range(2, 1, 3, 1),\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\trange: new Range(3, 1, 4, 1),\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\trange: new Range(4, 2, 4, 3),\n\t\t\t\ttext: '4',\n\t\t\t}, {\n\t\t\t\trange: new Range(5, 3, 5, 5),\n\t\t\t\ttext: '5',\n\t\t\t}\n\t\t], false);\n\n\t\tassert.strictEqual(newEdits.length, 2);\n\t\tassert.strictEqual(newEdits[0].text, '4');\n\t\tassert.strictEqual(newEdits[1].text, '5');\n\t});\n\n\ttest('MoreMinimal, issue #15385 newline changes only', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'{',\n\t\t\t'\\t\"a\":1',\n\t\t\t'}'\n\t\t], '\\n');\n\n\t\treturn worker.$computeMoreMinimalEdits(model.uri.toString(), [{ text: '{\\r\\n\\t\"a\":1\\r\\n}', range: new Range(1, 1, 3, 2) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 0);\n\t\t});\n\t});\n\n\ttest('MoreMinimal, issue #15385 newline changes and other', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'{',\n\t\t\t'\\t\"a\":1',\n\t\t\t'}'\n\t\t], '\\n');\n\n\t\treturn worker.$computeMoreMinimalEdits(model.uri.toString(), [{ text: '{\\r\\n\\t\"b\":1\\r\\n}', range: new Range(1, 1, 3, 2) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 1);\n\t\t\tconst [first] = edits;\n\t\t\tassert.strictEqual(first.text, 'b');\n\t\t\tassert.deepStrictEqual(first.range, { startLineNumber: 2, startColumn: 3, endLineNumber: 2, endColumn: 4 });\n\t\t});\n\t});\n\n\ttest('MoreMinimal, issue #15385 newline changes and other 2/2', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'package main',\t// 1\n\t\t\t'func foo() {',\t// 2\n\t\t\t'}'\t\t\t\t// 3\n\t\t]);\n\n\t\treturn worker.$computeMoreMinimalEdits(model.uri.toString(), [{ text: '\\n', range: new Range(3, 2, 4, 1000) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 1);\n\t\t\tconst [first] = edits;\n\t\t\tassert.strictEqual(first.text, '\\n');\n\t\t\tassert.deepStrictEqual(first.range, { startLineNumber: 3, startColumn: 2, endLineNumber: 3, endColumn: 2 });\n\t\t});\n\t});\n\n\tasync function testEdits(lines: string[], edits: TextEdit[]): Promise<unknown> {\n\t\tconst model = worker.addModel(lines);\n\n\t\tconst smallerEdits = await worker.$computeHumanReadableDiff(\n\t\t\tmodel.uri.toString(),\n\t\t\tedits,\n\t\t\t{ ignoreTrimWhitespace: false, maxComputationTimeMs: 0, computeMoves: false }\n\t\t);\n\n\t\tconst t1 = applyEdits(model.getValue(), edits);\n\t\tconst t2 = applyEdits(model.getValue(), smallerEdits);\n\t\tassert.deepStrictEqual(t1, t2);\n\n\t\treturn smallerEdits.map(e => ({ range: Range.lift(e.range).toString(), text: e.text }));\n\t}\n\n\n\ttest('computeHumanReadableDiff 1', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'function test() {}'\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: \"\\n/** Some Comment */\\n\",\n\t\t\t\t\trange: new Range(1, 1, 1, 1)\n\t\t\t\t}]),\n\t\t\t([{ range: \"[1,1 -> 1,1]\", text: \"\\n/** Some Comment */\\n\" }])\n\t\t);\n\t});\n\n\ttest('computeHumanReadableDiff 2', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'function test() {}'\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: 'function test(myParam: number) { console.log(myParam); }',\n\t\t\t\t\trange: new Range(1, 1, 1, Number.MAX_SAFE_INTEGER)\n\t\t\t\t}]),\n\t\t\t([{ range: '[1,15 -> 1,15]', text: 'myParam: number' }, { range: '[1,18 -> 1,18]', text: ' console.log(myParam); ' }])\n\t\t);\n\t});\n\n\ttest('computeHumanReadableDiff 3', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t''\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: 'function test(myParam: number) { console.log(myParam); }\\n\\n',\n\t\t\t\t\trange: new Range(2, 1, 3, 20)\n\t\t\t\t}]),\n\t\t\t([{ range: '[2,1 -> 2,1]', text: 'function test(myParam: number) { console.log(myParam); }\\n' }])\n\t\t);\n\t});\n\n\ttest('computeHumanReadableDiff 4', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'function algorithm() {}',\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: 'function alm() {}',\n\t\t\t\t\trange: new Range(1, 1, 1, Number.MAX_SAFE_INTEGER)\n\t\t\t\t}]),\n\t\t\t([{ range: \"[1,10 -> 1,19]\", text: \"alm\" }])\n\t\t);\n\t});\n\n\ttest('[Bug] Getting Message \"Overlapping ranges are not allowed\" and nothing happens with Inline-Chat ', async function () {\n\t\tawait testEdits((\"const API = require('../src/api');\\n\\ndescribe('API', () => {\\n  let api;\\n  let database;\\n\\n  beforeAll(() => {\\n    database = {\\n      getAllBooks: jest.fn(),\\n      getBooksByAuthor: jest.fn(),\\n      getBooksByTitle: jest.fn(),\\n    };\\n    api = new API(database);\\n  });\\n\\n  describe('GET /books', () => {\\n    it('should return all books', async () => {\\n      const mockBooks = [{ title: 'Book 1' }, { title: 'Book 2' }];\\n      database.getAllBooks.mockResolvedValue(mockBooks);\\n\\n      const req = {};\\n      const res = {\\n        json: jest.fn(),\\n      };\\n\\n      await api.register({\\n        get: (path, handler) => {\\n          if (path === '/books') {\\n            handler(req, res);\\n          }\\n        },\\n      });\\n\\n      expect(database.getAllBooks).toHaveBeenCalled();\\n      expect(res.json).toHaveBeenCalledWith(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/author/:author', () => {\\n    it('should return books by author', async () => {\\n      const mockAuthor = 'John Doe';\\n      const mockBooks = [{ title: 'Book 1', author: mockAuthor }, { title: 'Book 2', author: mockAuthor }];\\n      database.getBooksByAuthor.mockResolvedValue(mockBooks);\\n\\n      const req = {\\n        params: {\\n          author: mockAuthor,\\n        },\\n      };\\n      const res = {\\n        json: jest.fn(),\\n      };\\n\\n      await api.register({\\n        get: (path, handler) => {\\n          if (path === `/books/author/${mockAuthor}`) {\\n            handler(req, res);\\n          }\\n        },\\n      });\\n\\n      expect(database.getBooksByAuthor).toHaveBeenCalledWith(mockAuthor);\\n      expect(res.json).toHaveBeenCalledWith(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/title/:title', () => {\\n    it('should return books by title', async () => {\\n      const mockTitle = 'Book 1';\\n      const mockBooks = [{ title: mockTitle, author: 'John Doe' }];\\n      database.getBooksByTitle.mockResolvedValue(mockBooks);\\n\\n      const req = {\\n        params: {\\n          title: mockTitle,\\n        },\\n      };\\n      const res = {\\n        json: jest.fn(),\\n      };\\n\\n      await api.register({\\n        get: (path, handler) => {\\n          if (path === `/books/title/${mockTitle}`) {\\n            handler(req, res);\\n          }\\n        },\\n      });\\n\\n      expect(database.getBooksByTitle).toHaveBeenCalledWith(mockTitle);\\n      expect(res.json).toHaveBeenCalledWith(mockBooks);\\n    });\\n  });\\n});\\n\").split('\\n'),\n\t\t\t[{\n\t\t\t\trange: { startLineNumber: 1, startColumn: 1, endLineNumber: 96, endColumn: 1 },\n\t\t\t\ttext: `const request = require('supertest');\\nconst API = require('../src/api');\\n\\ndescribe('API', () => {\\n  let api;\\n  let database;\\n\\n  beforeAll(() => {\\n    database = {\\n      getAllBooks: jest.fn(),\\n      getBooksByAuthor: jest.fn(),\\n      getBooksByTitle: jest.fn(),\\n    };\\n    api = new API(database);\\n  });\\n\\n  describe('GET /books', () => {\\n    it('should return all books', async () => {\\n      const mockBooks = [{ title: 'Book 1' }, { title: 'Book 2' }];\\n      database.getAllBooks.mockResolvedValue(mockBooks);\\n\\n      const response = await request(api.app).get('/books');\\n\\n      expect(database.getAllBooks).toHaveBeenCalled();\\n      expect(response.status).toBe(200);\\n      expect(response.body).toEqual(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/author/:author', () => {\\n    it('should return books by author', async () => {\\n      const mockAuthor = 'John Doe';\\n      const mockBooks = [{ title: 'Book 1', author: mockAuthor }, { title: 'Book 2', author: mockAuthor }];\\n      database.getBooksByAuthor.mockResolvedValue(mockBooks);\\n\\n      const response = await request(api.app).get(\\`/books/author/\\${mockAuthor}\\`);\\n\\n      expect(database.getBooksByAuthor).toHaveBeenCalledWith(mockAuthor);\\n      expect(response.status).toBe(200);\\n      expect(response.body).toEqual(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/title/:title', () => {\\n    it('should return books by title', async () => {\\n      const mockTitle = 'Book 1';\\n      const mockBooks = [{ title: mockTitle, author: 'John Doe' }];\\n      database.getBooksByTitle.mockResolvedValue(mockBooks);\\n\\n      const response = await request(api.app).get(\\`/books/title/\\${mockTitle}\\`);\\n\\n      expect(database.getBooksByTitle).toHaveBeenCalledWith(mockTitle);\\n      expect(response.status).toBe(200);\\n      expect(response.body).toEqual(mockBooks);\\n    });\\n  });\\n});\\n`,\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('ICommonModel#getValueInRange, issue #17424', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'package main',\t// 1\n\t\t\t'func foo() {',\t// 2\n\t\t\t'}'\t\t\t\t// 3\n\t\t]);\n\n\t\tconst value = model.getValueInRange({ startLineNumber: 3, startColumn: 1, endLineNumber: 4, endColumn: 1 });\n\t\tassert.strictEqual(value, '}');\n\t});\n\n\n\ttest('textualSuggest, issue #17785', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'foobar',\t// 1\n\t\t\t'f f'\t// 2\n\t\t]);\n\n\t\treturn worker.$textualSuggest([model.uri.toString()], 'f', '[a-z]+', 'img').then((result) => {\n\t\t\tif (!result) {\n\t\t\t\tassert.ok(false);\n\t\t\t}\n\t\t\tassert.strictEqual(result.words.length, 1);\n\t\t\tassert.strictEqual(typeof result.duration, 'number');\n\t\t\tassert.strictEqual(result.words[0], 'foobar');\n\t\t});\n\t});\n\n\ttest('get words via iterator, issue #46930', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'one line',\t// 1\n\t\t\t'two line',\t// 2\n\t\t\t'',\n\t\t\t'past empty',\n\t\t\t'single',\n\t\t\t'',\n\t\t\t'and now we are done'\n\t\t]);\n\n\t\tconst words: string[] = [...model.words(/[a-z]+/img)];\n\n\t\tassert.deepStrictEqual(words, ['one', 'line', 'two', 'line', 'past', 'empty', 'single', 'and', 'now', 'we', 'are', 'done']);\n\t});\n});\n\nfunction applyEdits(text: string, edits: { range: IRange; text: string }[]): string {\n\tconst transformer = new PositionOffsetTransformer(text);\n\tconst offsetEdits = edits.map(e => {\n\t\tconst range = Range.lift(e.range);\n\t\treturn ({\n\t\t\tstartOffset: transformer.getOffset(range.getStartPosition()),\n\t\t\tendOffset: transformer.getOffset(range.getEndPosition()),\n\t\t\ttext: e.text\n\t\t});\n\t});\n\n\toffsetEdits.sort((a, b) => b.startOffset - a.startOffset);\n\n\tfor (const edit of offsetEdits) {\n\t\ttext = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);\n\t}\n\n\treturn text;\n}\n\nclass PositionOffsetTransformer {\n\tprivate readonly lineStartOffsetByLineIdx: number[];\n\n\tconstructor(private readonly text: string) {\n\t\tthis.lineStartOffsetByLineIdx = [];\n\t\tthis.lineStartOffsetByLineIdx.push(0);\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text.charAt(i) === '\\n') {\n\t\t\t\tthis.lineStartOffsetByLineIdx.push(i + 1);\n\t\t\t}\n\t\t}\n\t\tthis.lineStartOffsetByLineIdx.push(text.length + 1);\n\t}\n\n\tgetOffset(position: Position): number {\n\t\tconst maxLineOffset = position.lineNumber >= this.lineStartOffsetByLineIdx.length ? this.text.length : (this.lineStartOffsetByLineIdx[position.lineNumber] - 1);\n\t\treturn Math.min(this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1, maxLineOffset);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["model"]
}
