import t from"assert";import{URI as o}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as n}from"../../../../base/test/common/utils.js";import{getMimeTypes as i,registerPlatformLanguageAssociation as a,registerConfiguredLanguageAssociation as m}from"../../../common/services/languagesAssociations.js";suite("LanguagesAssociations",()=>{n(),test("Dynamically Register Text Mime",()=>{let e=i(o.file("foo.monaco"));t.deepStrictEqual(e,["application/unknown"]),a({id:"monaco",extension:".monaco",mime:"text/monaco"}),e=i(o.file("foo.monaco")),t.deepStrictEqual(e,["text/monaco","text/plain"]),e=i(o.file(".monaco")),t.deepStrictEqual(e,["text/monaco","text/plain"]),a({id:"codefile",filename:"Codefile",mime:"text/code"}),e=i(o.file("Codefile")),t.deepStrictEqual(e,["text/code","text/plain"]),e=i(o.file("foo.Codefile")),t.deepStrictEqual(e,["application/unknown"]),a({id:"docker",filepattern:"Docker*",mime:"text/docker"}),e=i(o.file("Docker-debug")),t.deepStrictEqual(e,["text/docker","text/plain"]),e=i(o.file("docker-PROD")),t.deepStrictEqual(e,["text/docker","text/plain"]),a({id:"niceregex",mime:"text/nice-regex",firstline:/RegexesAreNice/}),e=i(o.file("Randomfile.noregistration"),"RegexesAreNice"),t.deepStrictEqual(e,["text/nice-regex","text/plain"]),e=i(o.file("Randomfile.noregistration"),"RegexesAreNotNice"),t.deepStrictEqual(e,["application/unknown"]),e=i(o.file("Codefile"),"RegexesAreNice"),t.deepStrictEqual(e,["text/code","text/plain"])}),test("Mimes Priority",()=>{a({id:"monaco",extension:".monaco",mime:"text/monaco"}),a({id:"foobar",mime:"text/foobar",firstline:/foobar/});let e=i(o.file("foo.monaco"));t.deepStrictEqual(e,["text/monaco","text/plain"]),e=i(o.file("foo.monaco"),"foobar"),t.deepStrictEqual(e,["text/monaco","text/plain"]),a({id:"docker",filename:"dockerfile",mime:"text/winner"}),a({id:"docker",filepattern:"dockerfile*",mime:"text/looser"}),e=i(o.file("dockerfile")),t.deepStrictEqual(e,["text/winner","text/plain"]),a({id:"azure-looser",mime:"text/azure-looser",firstline:/azure/}),a({id:"azure-winner",mime:"text/azure-winner",firstline:/azure/}),e=i(o.file("azure"),"azure"),t.deepStrictEqual(e,["text/azure-winner","text/plain"])}),test("Specificity priority 1",()=>{a({id:"monaco2",extension:".monaco2",mime:"text/monaco2"}),a({id:"monaco2",filename:"specific.monaco2",mime:"text/specific-monaco2"}),t.deepStrictEqual(i(o.file("specific.monaco2")),["text/specific-monaco2","text/plain"]),t.deepStrictEqual(i(o.file("foo.monaco2")),["text/monaco2","text/plain"])}),test("Specificity priority 2",()=>{a({id:"monaco3",filename:"specific.monaco3",mime:"text/specific-monaco3"}),a({id:"monaco3",extension:".monaco3",mime:"text/monaco3"}),t.deepStrictEqual(i(o.file("specific.monaco3")),["text/specific-monaco3","text/plain"]),t.deepStrictEqual(i(o.file("foo.monaco3")),["text/monaco3","text/plain"])}),test("Mimes Priority - Longest Extension wins",()=>{a({id:"monaco",extension:".monaco",mime:"text/monaco"}),a({id:"monaco",extension:".monaco.xml",mime:"text/monaco-xml"}),a({id:"monaco",extension:".monaco.xml.build",mime:"text/monaco-xml-build"});let e=i(o.file("foo.monaco"));t.deepStrictEqual(e,["text/monaco","text/plain"]),e=i(o.file("foo.monaco.xml")),t.deepStrictEqual(e,["text/monaco-xml","text/plain"]),e=i(o.file("foo.monaco.xml.build")),t.deepStrictEqual(e,["text/monaco-xml-build","text/plain"])}),test("Mimes Priority - User configured wins",()=>{m({id:"monaco",extension:".monaco.xnl",mime:"text/monaco"}),a({id:"monaco",extension:".monaco.xml",mime:"text/monaco-xml"});const e=i(o.file("foo.monaco.xnl"));t.deepStrictEqual(e,["text/monaco","text/plain"])}),test("Mimes Priority - Pattern matches on path if specified",()=>{a({id:"monaco",filepattern:"**/dot.monaco.xml",mime:"text/monaco"}),a({id:"other",filepattern:"*ot.other.xml",mime:"text/other"});const e=i(o.file("/some/path/dot.monaco.xml"));t.deepStrictEqual(e,["text/monaco","text/plain"])}),test("Mimes Priority - Last registered mime wins",()=>{a({id:"monaco",filepattern:"**/dot.monaco.xml",mime:"text/monaco"}),a({id:"other",filepattern:"**/dot.monaco.xml",mime:"text/other"});const e=i(o.file("/some/path/dot.monaco.xml"));t.deepStrictEqual(e,["text/other","text/plain"])}),test("Data URIs",()=>{a({id:"data",extension:".data",mime:"text/data"}),t.deepStrictEqual(i(o.parse("data:;label:something.data;description:data,")),["text/data","text/plain"])})});
