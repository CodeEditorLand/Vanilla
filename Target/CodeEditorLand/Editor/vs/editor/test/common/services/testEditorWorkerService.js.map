{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/services/testEditorWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { IRange } from '../../../common/core/range.js';\nimport { DiffAlgorithmName, IEditorWorkerService, IUnicodeHighlightsResult } from '../../../common/services/editorWorker.js';\nimport { TextEdit, IInplaceReplaceSupportResult, IColorInformation } from '../../../common/languages.js';\nimport { IDocumentDiff, IDocumentDiffProviderOptions } from '../../../common/diff/documentDiffProvider.js';\nimport { IChange } from '../../../common/diff/legacyLinesDiffComputer.js';\nimport { SectionHeader } from '../../../common/services/findSectionHeaders.js';\n\nexport class TestEditorWorkerService implements IEditorWorkerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tcanComputeUnicodeHighlights(uri: URI): boolean { return false; }\n\tasync computedUnicodeHighlights(uri: URI): Promise<IUnicodeHighlightsResult> { return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 }; }\n\tasync computeDiff(original: URI, modified: URI, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): Promise<IDocumentDiff | null> { return null; }\n\tcanComputeDirtyDiff(original: URI, modified: URI): boolean { return false; }\n\tasync computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IChange[] | null> { return null; }\n\tasync computeMoreMinimalEdits(resource: URI, edits: TextEdit[] | null | undefined): Promise<TextEdit[] | undefined> { return undefined; }\n\tasync computeHumanReadableDiff(resource: URI, edits: TextEdit[] | null | undefined): Promise<TextEdit[] | undefined> { return undefined; }\n\tcanComputeWordRanges(resource: URI): boolean { return false; }\n\tasync computeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> { return null; }\n\tcanNavigateValueSet(resource: URI): boolean { return false; }\n\tasync navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<IInplaceReplaceSupportResult | null> { return null; }\n\tasync findSectionHeaders(uri: URI): Promise<SectionHeader[]> { return []; }\n\tasync computeDefaultDocumentColors(uri: URI): Promise<IColorInformation[] | null> { return null; }\n}\n"],
  "mappings": ";;AAKA,SAAS,WAAW;AACpB,SAAS,cAAc;AACvB,SAAS,mBAAmB,sBAAsB,gCAAgC;AAClF,SAAS,UAAU,8BAA8B,yBAAyB;AAC1E,SAAS,eAAe,oCAAoC;AAC5D,SAAS,eAAe;AACxB,SAAS,qBAAqB;AAEvB,MAAM,wBAAwD;AAAA,EAbrE,OAaqE;AAAA;AAAA;AAAA,EAIpE,4BAA4B,KAAmB;AAAE,WAAO;AAAA,EAAO;AAAA,EAC/D,MAAM,0BAA0B,KAA6C;AAAE,WAAO,EAAE,QAAQ,CAAC,GAAG,SAAS,OAAO,yBAAyB,GAAG,yBAAyB,GAAG,6BAA6B,EAAE;AAAA,EAAG;AAAA,EAC9M,MAAM,YAAY,UAAe,UAAe,SAAuC,WAA6D;AAAE,WAAO;AAAA,EAAM;AAAA,EACnK,oBAAoB,UAAe,UAAwB;AAAE,WAAO;AAAA,EAAO;AAAA,EAC3E,MAAM,iBAAiB,UAAe,UAAe,sBAA0D;AAAE,WAAO;AAAA,EAAM;AAAA,EAC9H,MAAM,wBAAwB,UAAe,OAAuE;AAAE,WAAO;AAAA,EAAW;AAAA,EACxI,MAAM,yBAAyB,UAAe,OAAuE;AAAE,WAAO;AAAA,EAAW;AAAA,EACzI,qBAAqB,UAAwB;AAAE,WAAO;AAAA,EAAO;AAAA,EAC7D,MAAM,kBAAkB,UAAe,OAA6D;AAAE,WAAO;AAAA,EAAM;AAAA,EACnH,oBAAoB,UAAwB;AAAE,WAAO;AAAA,EAAO;AAAA,EAC5D,MAAM,iBAAiB,UAAe,OAAe,IAA2D;AAAE,WAAO;AAAA,EAAM;AAAA,EAC/H,MAAM,mBAAmB,KAAoC;AAAE,WAAO,CAAC;AAAA,EAAG;AAAA,EAC1E,MAAM,6BAA6B,KAA+C;AAAE,WAAO;AAAA,EAAM;AAClG;",
  "names": []
}
