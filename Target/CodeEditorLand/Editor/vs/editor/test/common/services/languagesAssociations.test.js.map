{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/services/languagesAssociations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { getMimeTypes, registerPlatformLanguageAssociation, registerConfiguredLanguageAssociation } from '../../../common/services/languagesAssociations.js';\n\nsuite('LanguagesAssociations', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Dynamically Register Text Mime', () => {\n\t\tlet guess = getMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['application/unknown']);\n\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', extension: '.monaco', mime: 'text/monaco' });\n\t\tguess = getMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tregisterPlatformLanguageAssociation({ id: 'codefile', filename: 'Codefile', mime: 'text/code' });\n\t\tguess = getMimeTypes(URI.file('Codefile'));\n\t\tassert.deepStrictEqual(guess, ['text/code', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('foo.Codefile'));\n\t\tassert.deepStrictEqual(guess, ['application/unknown']);\n\n\t\tregisterPlatformLanguageAssociation({ id: 'docker', filepattern: 'Docker*', mime: 'text/docker' });\n\t\tguess = getMimeTypes(URI.file('Docker-debug'));\n\t\tassert.deepStrictEqual(guess, ['text/docker', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('docker-PROD'));\n\t\tassert.deepStrictEqual(guess, ['text/docker', 'text/plain']);\n\n\t\tregisterPlatformLanguageAssociation({ id: 'niceregex', mime: 'text/nice-regex', firstline: /RegexesAreNice/ });\n\t\tguess = getMimeTypes(URI.file('Randomfile.noregistration'), 'RegexesAreNice');\n\t\tassert.deepStrictEqual(guess, ['text/nice-regex', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('Randomfile.noregistration'), 'RegexesAreNotNice');\n\t\tassert.deepStrictEqual(guess, ['application/unknown']);\n\n\t\tguess = getMimeTypes(URI.file('Codefile'), 'RegexesAreNice');\n\t\tassert.deepStrictEqual(guess, ['text/code', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', extension: '.monaco', mime: 'text/monaco' });\n\t\tregisterPlatformLanguageAssociation({ id: 'foobar', mime: 'text/foobar', firstline: /foobar/ });\n\n\t\tlet guess = getMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('foo.monaco'), 'foobar');\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tregisterPlatformLanguageAssociation({ id: 'docker', filename: 'dockerfile', mime: 'text/winner' });\n\t\tregisterPlatformLanguageAssociation({ id: 'docker', filepattern: 'dockerfile*', mime: 'text/looser' });\n\t\tguess = getMimeTypes(URI.file('dockerfile'));\n\t\tassert.deepStrictEqual(guess, ['text/winner', 'text/plain']);\n\n\t\tregisterPlatformLanguageAssociation({ id: 'azure-looser', mime: 'text/azure-looser', firstline: /azure/ });\n\t\tregisterPlatformLanguageAssociation({ id: 'azure-winner', mime: 'text/azure-winner', firstline: /azure/ });\n\t\tguess = getMimeTypes(URI.file('azure'), 'azure');\n\t\tassert.deepStrictEqual(guess, ['text/azure-winner', 'text/plain']);\n\t});\n\n\ttest('Specificity priority 1', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco2', extension: '.monaco2', mime: 'text/monaco2' });\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco2', filename: 'specific.monaco2', mime: 'text/specific-monaco2' });\n\n\t\tassert.deepStrictEqual(getMimeTypes(URI.file('specific.monaco2')), ['text/specific-monaco2', 'text/plain']);\n\t\tassert.deepStrictEqual(getMimeTypes(URI.file('foo.monaco2')), ['text/monaco2', 'text/plain']);\n\t});\n\n\ttest('Specificity priority 2', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco3', filename: 'specific.monaco3', mime: 'text/specific-monaco3' });\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco3', extension: '.monaco3', mime: 'text/monaco3' });\n\n\t\tassert.deepStrictEqual(getMimeTypes(URI.file('specific.monaco3')), ['text/specific-monaco3', 'text/plain']);\n\t\tassert.deepStrictEqual(getMimeTypes(URI.file('foo.monaco3')), ['text/monaco3', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Longest Extension wins', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', extension: '.monaco', mime: 'text/monaco' });\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', extension: '.monaco.xml', mime: 'text/monaco-xml' });\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', extension: '.monaco.xml.build', mime: 'text/monaco-xml-build' });\n\n\t\tlet guess = getMimeTypes(URI.file('foo.monaco'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('foo.monaco.xml'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco-xml', 'text/plain']);\n\n\t\tguess = getMimeTypes(URI.file('foo.monaco.xml.build'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco-xml-build', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - User configured wins', () => {\n\t\tregisterConfiguredLanguageAssociation({ id: 'monaco', extension: '.monaco.xnl', mime: 'text/monaco' });\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', extension: '.monaco.xml', mime: 'text/monaco-xml' });\n\n\t\tconst guess = getMimeTypes(URI.file('foo.monaco.xnl'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Pattern matches on path if specified', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', filepattern: '**/dot.monaco.xml', mime: 'text/monaco' });\n\t\tregisterPlatformLanguageAssociation({ id: 'other', filepattern: '*ot.other.xml', mime: 'text/other' });\n\n\t\tconst guess = getMimeTypes(URI.file('/some/path/dot.monaco.xml'));\n\t\tassert.deepStrictEqual(guess, ['text/monaco', 'text/plain']);\n\t});\n\n\ttest('Mimes Priority - Last registered mime wins', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'monaco', filepattern: '**/dot.monaco.xml', mime: 'text/monaco' });\n\t\tregisterPlatformLanguageAssociation({ id: 'other', filepattern: '**/dot.monaco.xml', mime: 'text/other' });\n\n\t\tconst guess = getMimeTypes(URI.file('/some/path/dot.monaco.xml'));\n\t\tassert.deepStrictEqual(guess, ['text/other', 'text/plain']);\n\t});\n\n\ttest('Data URIs', () => {\n\t\tregisterPlatformLanguageAssociation({ id: 'data', extension: '.data', mime: 'text/data' });\n\n\t\tassert.deepStrictEqual(getMimeTypes(URI.parse(`data:;label:something.data;description:data,`)), ['text/data', 'text/plain']);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
