{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/services/languagesRegistry.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { LanguagesRegistry } from '../../../common/services/languagesRegistry.js';\n\nsuite('LanguagesRegistry', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('output language does not have a name', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'outputLangId',\n\t\t\textensions: [],\n\t\t\taliases: [],\n\t\t\tmimetypes: ['outputLanguageMimeType'],\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), []);\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('language with alias does have a name', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\textensions: [],\n\t\t\taliases: ['LangName'],\n\t\t\tmimetypes: ['bla'],\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'LangName', languageId: 'langId' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageName('langId'), 'LangName');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('language without alias gets a name', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\textensions: [],\n\t\t\tmimetypes: ['bla'],\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'langId', languageId: 'langId' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageName('langId'), 'langId');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('bug #4360: f# not shown in status bar', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\textensions: ['.ext1'],\n\t\t\taliases: ['LangName'],\n\t\t\tmimetypes: ['bla'],\n\t\t}]);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\textensions: ['.ext2'],\n\t\t\taliases: [],\n\t\t\tmimetypes: ['bla'],\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'LangName', languageId: 'langId' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageName('langId'), 'LangName');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('issue #5278: Extension cannot override language name anymore', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\textensions: ['.ext1'],\n\t\t\taliases: ['LangName'],\n\t\t\tmimetypes: ['bla'],\n\t\t}]);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\textensions: ['.ext2'],\n\t\t\taliases: ['BetterLanguageName'],\n\t\t\tmimetypes: ['bla'],\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'BetterLanguageName', languageId: 'langId' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageName('langId'), 'BetterLanguageName');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('mimetypes are generated if necessary', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId'\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getMimeType('langId'), 'text/x-langId');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('first mimetype wins', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\tmimetypes: ['text/langId', 'text/langId2']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getMimeType('langId'), 'text/langId');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('first mimetype wins 2', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId'\n\t\t}]);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'langId',\n\t\t\tmimetypes: ['text/langId']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getMimeType('langId'), 'text/x-langId');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('aliases', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a'\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'a', languageId: 'a' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageName('a'), 'a');\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\taliases: ['A1', 'A2']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'A1', languageId: 'a' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a1'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a2'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageName('a'), 'A1');\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\taliases: ['A3', 'A4']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'A3', languageId: 'a' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a1'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a2'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a3'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a4'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageName('a'), 'A3');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('empty aliases array means no alias', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a'\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'a', languageId: 'a' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageName('a'), 'a');\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'b',\n\t\t\taliases: []\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getSortedRegisteredLanguageNames(), [{ languageName: 'a', languageId: 'a' }]);\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('a'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageIdByLanguageName('b'), 'b');\n\t\tassert.deepStrictEqual(registry.getLanguageName('a'), 'a');\n\t\tassert.deepStrictEqual(registry.getLanguageName('b'), null);\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('extensions', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\taliases: ['aName'],\n\t\t\textensions: ['aExt']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getExtensions('a'), ['aExt']);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\textensions: ['aExt2']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getExtensions('a'), ['aExt', 'aExt2']);\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('extensions of primary language registration come first', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\textensions: ['aExt3']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getExtensions('a')[0], 'aExt3');\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\tconfiguration: URI.file('conf.json'),\n\t\t\textensions: ['aExt']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getExtensions('a')[0], 'aExt');\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\textensions: ['aExt2']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getExtensions('a')[0], 'aExt');\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('filenames', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\taliases: ['aName'],\n\t\t\tfilenames: ['aFilename']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getFilenames('a'), ['aFilename']);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\tfilenames: ['aFilename2']\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getFilenames('a'), ['aFilename', 'aFilename2']);\n\n\t\tregistry.dispose();\n\t});\n\n\ttest('configuration', () => {\n\t\tconst registry = new LanguagesRegistry(false);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\taliases: ['aName'],\n\t\t\tconfiguration: URI.file('/path/to/aFilename')\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getConfigurationFiles('a'), [URI.file('/path/to/aFilename')]);\n\t\tassert.deepStrictEqual(registry.getConfigurationFiles('aname'), []);\n\t\tassert.deepStrictEqual(registry.getConfigurationFiles('aName'), []);\n\n\t\tregistry._registerLanguages([{\n\t\t\tid: 'a',\n\t\t\tconfiguration: URI.file('/path/to/aFilename2')\n\t\t}]);\n\n\t\tassert.deepStrictEqual(registry.getConfigurationFiles('a'), [URI.file('/path/to/aFilename'), URI.file('/path/to/aFilename2')]);\n\t\tassert.deepStrictEqual(registry.getConfigurationFiles('aname'), []);\n\t\tassert.deepStrictEqual(registry.getConfigurationFiles('aName'), []);\n\n\t\tregistry.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
