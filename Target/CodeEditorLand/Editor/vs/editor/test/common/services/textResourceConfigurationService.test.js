import u from"assert";import{TestConfigurationService as v}from"../../../../platform/configuration/test/common/testConfigurationService.js";import{TestInstantiationService as c}from"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{IModelService as f}from"../../../common/services/model.js";import{ILanguageService as p}from"../../../common/languages/language.js";import{IConfigurationService as w,ConfigurationTarget as r}from"../../../../platform/configuration/common/configuration.js";import{TextResourceConfigurationService as E}from"../../../common/services/textResourceConfigurationService.js";import{URI as d}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as S}from"../../../../base/test/common/utils.js";suite("TextResourceConfigurationService - Update",()=>{const l=S();let s,o={},t;const n=new class extends v{inspect(){return o}updateValue(){return t=[...arguments],Promise.resolve()}};let a=null,i;setup(()=>{s=l.add(new c),s.stub(f,{getModel(){return null}}),s.stub(p,{guessLanguageIdByFilepathOrFirstLine(){return a}}),s.stub(w,n),i=l.add(s.createInstance(E))}),test("updateValue writes without target and overrides when no language is defined",async()=>{const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.USER_LOCAL])}),test("updateValue writes with target and without overrides when no language is defined",async()=>{const e=d.file("someFile");await i.updateValue(e,"a","b",r.USER_LOCAL),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.USER_LOCAL])}),test("updateValue writes into given memory target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspaceFolder:{value:"1"}};const e=d.file("someFile");await i.updateValue(e,"a","b",r.MEMORY),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.MEMORY])}),test("updateValue writes into given workspace target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspaceFolder:{value:"2"}};const e=d.file("someFile");await i.updateValue(e,"a","b",r.WORKSPACE),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.WORKSPACE])}),test("updateValue writes into given user target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspaceFolder:{value:"2"}};const e=d.file("someFile");await i.updateValue(e,"a","b",r.USER),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.USER])}),test("updateValue writes into given workspace folder target with overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspaceFolder:{value:"2",override:"1"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b",r.WORKSPACE_FOLDER),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.WORKSPACE_FOLDER])}),test("updateValue writes into derived workspace folder target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspaceFolder:{value:"2"}};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.WORKSPACE_FOLDER])}),test("updateValue writes into derived workspace folder target with overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspace:{value:"2",override:"1"},workspaceFolder:{value:"2",override:"2"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.WORKSPACE_FOLDER])}),test("updateValue writes into derived workspace target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspace:{value:"2"}};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.WORKSPACE])}),test("updateValue writes into derived workspace target with overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},workspace:{value:"2",override:"2"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.WORKSPACE])}),test("updateValue writes into derived workspace target with overrides and value defined in folder",async()=>{a="a",o={default:{value:"1",override:"3"},userLocal:{value:"2"},workspace:{value:"2",override:"2"},workspaceFolder:{value:"2"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.WORKSPACE])}),test("updateValue writes into derived user remote target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},userRemote:{value:"2"}};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.USER_REMOTE])}),test("updateValue writes into derived user remote target with overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},userRemote:{value:"2",override:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.USER_REMOTE])}),test("updateValue writes into derived user remote target with overrides and value defined in workspace",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"},userRemote:{value:"2",override:"3"},workspace:{value:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.USER_REMOTE])}),test("updateValue writes into derived user remote target with overrides and value defined in workspace folder",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2",override:"1"},userRemote:{value:"2",override:"3"},workspace:{value:"3"},workspaceFolder:{value:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:a},r.USER_REMOTE])}),test("updateValue writes into derived user target without overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2"}};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.USER_LOCAL])}),test("updateValue writes into derived user target with overrides",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2",override:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","2"),u.deepStrictEqual(t,["a","2",{resource:e,overrideIdentifier:a},r.USER_LOCAL])}),test("updateValue writes into derived user target with overrides and value is defined in remote",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2",override:"3"},userRemote:{value:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","2"),u.deepStrictEqual(t,["a","2",{resource:e,overrideIdentifier:a},r.USER_LOCAL])}),test("updateValue writes into derived user target with overrides and value is defined in workspace",async()=>{a="a",o={default:{value:"1"},userLocal:{value:"2",override:"3"},workspaceValue:{value:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","2"),u.deepStrictEqual(t,["a","2",{resource:e,overrideIdentifier:a},r.USER_LOCAL])}),test("updateValue writes into derived user target with overrides and value is defined in workspace folder",async()=>{a="a",o={default:{value:"1",override:"3"},userLocal:{value:"2",override:"3"},userRemote:{value:"3"},workspaceFolderValue:{value:"3"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","2"),u.deepStrictEqual(t,["a","2",{resource:e,overrideIdentifier:a},r.USER_LOCAL])}),test("updateValue writes into derived user target when overridden in default and not in user",async()=>{a="a",o={default:{value:"1",override:"3"},userLocal:{value:"2"},overrideIdentifiers:[a]};const e=d.file("someFile");await i.updateValue(e,"a","2"),u.deepStrictEqual(t,["a","2",{resource:e,overrideIdentifier:a},r.USER_LOCAL])}),test("updateValue when not changed",async()=>{a="a",o={default:{value:"1"}};const e=d.file("someFile");await i.updateValue(e,"a","b"),u.deepStrictEqual(t,["a","b",{resource:e,overrideIdentifier:void 0},r.USER_LOCAL])})});
