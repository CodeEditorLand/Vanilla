{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/bracketPairColorizer/beforeEditPositionMapper.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { IRange, Range } from '../../../../common/core/range.js';\nimport { BeforeEditPositionMapper, TextEditInfo } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { Length, lengthOfString, lengthToObj, lengthToPosition, toLength } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/length.js';\n\nsuite('Bracket Pair Colorizer - BeforeEditPositionMapper', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Single-Line 1', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'0123456789',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 4), toLength(0, 7), 'xy')\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'0  1  2  3  x  y  7  8  9  ', // The line\n\n\t\t\t\t'0  0  0  0  0  0  0  0  0  0  ', // the old line numbers\n\t\t\t\t'0  1  2  3  4  5  7  8  9  10 ', // the old columns\n\n\t\t\t\t'0  0  0  0  0  0  \u221E  \u221E  \u221E  \u221E  ', // line count until next change\n\t\t\t\t'4  3  2  1  0  0  \u221E  \u221E  \u221E  \u221E  ', // column count until next change\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Single-Line 2', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'0123456789',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 2), toLength(0, 4), 'xxxx'),\n\t\t\t\t\tnew TextEdit(toLength(0, 6), toLength(0, 6), 'yy')\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'0  1  x  x  x  x  4  5  y  y  6  7  8  9  ',\n\n\t\t\t\t'0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ',\n\t\t\t\t'0  1  2  3  4  5  4  5  6  7  6  7  8  9  10 ',\n\n\t\t\t\t'0  0  0  0  0  0  0  0  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'2  1  0  0  0  0  2  1  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Replace 1', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089',\n\t\t\t\t\t'0123456789',\n\t\t\t\t\t'\u2070\u00B9\u00B2\u00B3\u2074\u2075\u2076\u2077\u2078\u2079',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(1, 3), 'xy'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'\u2080  \u2081  \u2082  x  y  3  4  5  6  7  8  9  ',\n\n\t\t\t\t'0  0  0  0  0  1  1  1  1  1  1  1  1  ',\n\t\t\t\t'0  1  2  3  4  3  4  5  6  7  8  9  10 ',\n\n\t\t\t\t\"0  0  0  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \",\n\t\t\t\t'3  2  1  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t// ------------------\n\t\t\t\t'\u2070  \u00B9  \u00B2  \u00B3  \u2074  \u2075  \u2076  \u2077  \u2078  \u2079  ',\n\n\t\t\t\t'2  2  2  2  2  2  2  2  2  2  2  ',\n\t\t\t\t'0  1  2  3  4  5  6  7  8  9  10 ',\n\n\t\t\t\t'\u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'\u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Replace 2', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089',\n\t\t\t\t\t'012345678',\n\t\t\t\t\t'\u2070\u00B9\u00B2\u00B3\u2074\u2075\u2076\u2077\u2078\u2079',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(1, 0), 'ab'),\n\t\t\t\t\tnew TextEdit(toLength(1, 5), toLength(1, 7), 'c'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'\u2080  \u2081  \u2082  a  b  0  1  2  3  4  c  7  8  ',\n\n\t\t\t\t'0  0  0  0  0  1  1  1  1  1  1  1  1  1  ',\n\t\t\t\t'0  1  2  3  4  0  1  2  3  4  5  7  8  9  ',\n\n\t\t\t\t'0  0  0  0  0  0  0  0  0  0  0  \u221E  \u221E  \u221E  ',\n\t\t\t\t'3  2  1  0  0  5  4  3  2  1  0  \u221E  \u221E  \u221E  ',\n\t\t\t\t// ------------------\n\t\t\t\t'\u2070  \u00B9  \u00B2  \u00B3  \u2074  \u2075  \u2076  \u2077  \u2078  \u2079  ',\n\n\t\t\t\t'2  2  2  2  2  2  2  2  2  2  2  ',\n\t\t\t\t'0  1  2  3  4  5  6  7  8  9  10 ',\n\n\t\t\t\t'\u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'\u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Replace 3', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089',\n\t\t\t\t\t'012345678',\n\t\t\t\t\t'\u2070\u00B9\u00B2\u00B3\u2074\u2075\u2076\u2077\u2078\u2079',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(1, 0), 'ab'),\n\t\t\t\t\tnew TextEdit(toLength(1, 5), toLength(1, 7), 'c'),\n\t\t\t\t\tnew TextEdit(toLength(1, 8), toLength(2, 4), 'd'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'\u2080  \u2081  \u2082  a  b  0  1  2  3  4  c  7  d  \u2074  \u2075  \u2076  \u2077  \u2078  \u2079  ',\n\n\t\t\t\t'0  0  0  0  0  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  ',\n\t\t\t\t'0  1  2  3  4  0  1  2  3  4  5  7  8  4  5  6  7  8  9  10 ',\n\n\t\t\t\t'0  0  0  0  0  0  0  0  0  0  0  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'3  2  1  0  0  5  4  3  2  1  0  1  0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Insert 1', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'012345678',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(0, 5), 'a\\nb'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'0  1  2  a  ',\n\n\t\t\t\t'0  0  0  0  0  ',\n\t\t\t\t'0  1  2  3  4  ',\n\n\t\t\t\t'0  0  0  0  0  ',\n\t\t\t\t'3  2  1  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'b  5  6  7  8  ',\n\n\t\t\t\t'1  0  0  0  0  0  ',\n\t\t\t\t'0  5  6  7  8  9  ',\n\n\t\t\t\t'0  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'0  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Insert 2', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'012345678',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(0, 5), 'a\\nb'),\n\t\t\t\t\tnew TextEdit(toLength(0, 7), toLength(0, 8), 'x\\ny'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'0  1  2  a  ',\n\n\t\t\t\t'0  0  0  0  0  ',\n\t\t\t\t'0  1  2  3  4  ',\n\n\t\t\t\t'0  0  0  0  0  ',\n\t\t\t\t'3  2  1  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'b  5  6  x  ',\n\n\t\t\t\t'1  0  0  0  0  ',\n\t\t\t\t'0  5  6  7  8  ',\n\n\t\t\t\t'0  0  0  0  0  ',\n\t\t\t\t'0  2  1  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'y  8  ',\n\n\t\t\t\t'1  0  0  ',\n\t\t\t\t'0  8  9  ',\n\n\t\t\t\t'0  \u221E  \u221E  ',\n\t\t\t\t'0  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Replace/Insert 1', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089',\n\t\t\t\t\t'012345678',\n\t\t\t\t\t'\u2070\u00B9\u00B2\u00B3\u2074\u2075\u2076\u2077\u2078\u2079',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(1, 1), 'aaa\\nbbb'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'\u2080  \u2081  \u2082  a  a  a  ',\n\t\t\t\t'0  0  0  0  0  0  0  ',\n\t\t\t\t'0  1  2  3  4  5  6  ',\n\n\t\t\t\t'0  0  0  0  0  0  0  ',\n\t\t\t\t'3  2  1  0  0  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'b  b  b  1  2  3  4  5  6  7  8  ',\n\n\t\t\t\t'1  1  1  1  1  1  1  1  1  1  1  1  ',\n\t\t\t\t'0  1  2  1  2  3  4  5  6  7  8  9  ',\n\n\t\t\t\t'0  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'0  0  0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t// ------------------\n\t\t\t\t'\u2070  \u00B9  \u00B2  \u00B3  \u2074  \u2075  \u2076  \u2077  \u2078  \u2079  ',\n\n\t\t\t\t'2  2  2  2  2  2  2  2  2  2  2  ',\n\t\t\t\t'0  1  2  3  4  5  6  7  8  9  10 ',\n\n\t\t\t\t'\u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'\u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Multi-Line Replace/Insert 2', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tcompute(\n\t\t\t\t[\n\t\t\t\t\t'\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089',\n\t\t\t\t\t'012345678',\n\t\t\t\t\t'\u2070\u00B9\u00B2\u00B3\u2074\u2075\u2076\u2077\u2078\u2079',\n\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextEdit(toLength(0, 3), toLength(1, 1), 'aaa\\nbbb'),\n\t\t\t\t\tnew TextEdit(toLength(1, 5), toLength(1, 5), 'x\\ny'),\n\t\t\t\t\tnew TextEdit(toLength(1, 7), toLength(2, 4), 'k\\nl'),\n\t\t\t\t]\n\t\t\t),\n\t\t\t[\n\t\t\t\t'\u2080  \u2081  \u2082  a  a  a  ',\n\n\t\t\t\t'0  0  0  0  0  0  0  ',\n\t\t\t\t'0  1  2  3  4  5  6  ',\n\n\t\t\t\t'0  0  0  0  0  0  0  ',\n\t\t\t\t'3  2  1  0  0  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'b  b  b  1  2  3  4  x  ',\n\n\t\t\t\t'1  1  1  1  1  1  1  1  1  ',\n\t\t\t\t'0  1  2  1  2  3  4  5  6  ',\n\n\t\t\t\t'0  0  0  0  0  0  0  0  0  ',\n\t\t\t\t'0  0  0  4  3  2  1  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'y  5  6  k  ',\n\n\t\t\t\t'2  1  1  1  1  ',\n\t\t\t\t'0  5  6  7  8  ',\n\n\t\t\t\t'0  0  0  0  0  ',\n\t\t\t\t'0  2  1  0  0  ',\n\t\t\t\t// ------------------\n\t\t\t\t'l  \u2074  \u2075  \u2076  \u2077  \u2078  \u2079  ',\n\n\t\t\t\t'2  2  2  2  2  2  2  2  ',\n\t\t\t\t'0  4  5  6  7  8  9  10 ',\n\n\t\t\t\t'0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t\t'0  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  \u221E  ',\n\t\t\t]\n\t\t);\n\t});\n});\n\n/** @pure */\nfunction compute(inputArr: string[], edits: TextEdit[]): string[] {\n\tconst newLines = splitLines(applyLineColumnEdits(inputArr.join('\\n'), edits.map(e => ({\n\t\ttext: e.newText,\n\t\trange: Range.fromPositions(lengthToPosition(e.startOffset), lengthToPosition(e.endOffset))\n\t}))));\n\n\tconst mapper = new BeforeEditPositionMapper(edits);\n\n\tconst result = new Array<string>();\n\n\tlet lineIdx = 0;\n\tfor (const line of newLines) {\n\t\tlet lineLine = '';\n\t\tlet colLine = '';\n\t\tlet lineStr = '';\n\n\t\tlet colDist = '';\n\t\tlet lineDist = '';\n\n\t\tfor (let colIdx = 0; colIdx <= line.length; colIdx++) {\n\t\t\tconst before = mapper.getOffsetBeforeChange(toLength(lineIdx, colIdx));\n\t\t\tconst beforeObj = lengthToObj(before);\n\t\t\tif (colIdx < line.length) {\n\t\t\t\tlineStr += rightPad(line[colIdx], 3);\n\t\t\t}\n\t\t\tlineLine += rightPad('' + beforeObj.lineCount, 3);\n\t\t\tcolLine += rightPad('' + beforeObj.columnCount, 3);\n\n\t\t\tconst distLen = mapper.getDistanceToNextChange(toLength(lineIdx, colIdx));\n\t\t\tif (distLen === null) {\n\t\t\t\tlineDist += '\u221E  ';\n\t\t\t\tcolDist += '\u221E  ';\n\t\t\t} else {\n\t\t\t\tconst dist = lengthToObj(distLen);\n\t\t\t\tlineDist += rightPad('' + dist.lineCount, 3);\n\t\t\t\tcolDist += rightPad('' + dist.columnCount, 3);\n\t\t\t}\n\t\t}\n\t\tresult.push(lineStr);\n\n\t\tresult.push(lineLine);\n\t\tresult.push(colLine);\n\n\t\tresult.push(lineDist);\n\t\tresult.push(colDist);\n\n\t\tlineIdx++;\n\t}\n\n\treturn result;\n}\n\nexport class TextEdit extends TextEditInfo {\n\tconstructor(\n\t\tstartOffset: Length,\n\t\tendOffset: Length,\n\t\tpublic readonly newText: string\n\t) {\n\t\tsuper(\n\t\t\tstartOffset,\n\t\t\tendOffset,\n\t\t\tlengthOfString(newText)\n\t\t);\n\t}\n}\n\nclass PositionOffsetTransformer {\n\tprivate readonly lineStartOffsetByLineIdx: number[];\n\n\tconstructor(text: string) {\n\t\tthis.lineStartOffsetByLineIdx = [];\n\t\tthis.lineStartOffsetByLineIdx.push(0);\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text.charAt(i) === '\\n') {\n\t\t\t\tthis.lineStartOffsetByLineIdx.push(i + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetOffset(position: Position): number {\n\t\treturn this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\n\t}\n}\n\nfunction applyLineColumnEdits(text: string, edits: { range: IRange; text: string }[]): string {\n\tconst transformer = new PositionOffsetTransformer(text);\n\tconst offsetEdits = edits.map(e => {\n\t\tconst range = Range.lift(e.range);\n\t\treturn ({\n\t\t\tstartOffset: transformer.getOffset(range.getStartPosition()),\n\t\t\tendOffset: transformer.getOffset(range.getEndPosition()),\n\t\t\ttext: e.text\n\t\t});\n\t});\n\n\toffsetEdits.sort((a, b) => b.startOffset - a.startOffset);\n\n\tfor (const edit of offsetEdits) {\n\t\ttext = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);\n\t}\n\n\treturn text;\n}\n\nfunction rightPad(str: string, len: number): string {\n\twhile (str.length < len) {\n\t\tstr += ' ';\n\t}\n\treturn str;\n}\n"],
  "mappings": "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",
  "names": []
}
