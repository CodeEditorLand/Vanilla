import n from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../base/test/common/utils.js";import{OffsetRange as a}from"../../../common/core/offsetRange.js";import{RangePriorityQueueImpl as g}from"../../../common/model/textModelTokens.js";suite("RangePriorityQueueImpl",()=>{d(),test("addRange",()=>{const e=[];a.addRange(new a(0,2),e),a.addRange(new a(10,13),e),a.addRange(new a(20,24),e),n.deepStrictEqual(e.map(t=>t.toString()),["[0, 2)","[10, 13)","[20, 24)"]),a.addRange(new a(2,10),e),n.deepStrictEqual(e.map(t=>t.toString()),["[0, 13)","[20, 24)"]),a.addRange(new a(14,19),e),n.deepStrictEqual(e.map(t=>t.toString()),["[0, 13)","[14, 19)","[20, 24)"]),a.addRange(new a(10,22),e),n.deepStrictEqual(e.map(t=>t.toString()),["[0, 24)"]),a.addRange(new a(-1,29),e),n.deepStrictEqual(e.map(t=>t.toString()),["[-1, 29)"]),a.addRange(new a(-10,-5),e),n.deepStrictEqual(e.map(t=>t.toString()),["[-10, -5)","[-1, 29)"])}),test("addRangeAndResize",()=>{const e=new g;e.addRange(new a(0,20)),e.addRange(new a(100,120)),e.addRange(new a(200,220)),e.addRangeAndResize(new a(25,27),0),n.deepStrictEqual(e.getRanges().map(t=>t.toString()),["[0, 20)","[98, 118)","[198, 218)"]),e.addRangeAndResize(new a(19,20),0),n.deepStrictEqual(e.getRanges().map(t=>t.toString()),["[0, 19)","[97, 117)","[197, 217)"]),e.addRangeAndResize(new a(19,97),0),n.deepStrictEqual(e.getRanges().map(t=>t.toString()),["[0, 39)","[119, 139)"]),e.addRangeAndResize(new a(-1e3,1e3),0),n.deepStrictEqual(e.getRanges().map(t=>t.toString()),[])})});
