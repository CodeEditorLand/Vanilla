{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/model.modes.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { NullState } from '../../../common/languages/nullTokenize.js';\nimport { TextModel } from '../../../common/model/textModel.js';\nimport { createTextModel } from '../testTextModel.js';\n\n// --------- utils\n\nsuite('Editor Model - Model Modes 1', () => {\n\n\tlet calledFor: string[] = [];\n\n\tfunction getAndClear(): string[] {\n\t\tconst result = calledFor;\n\t\tcalledFor = [];\n\t\treturn result;\n\t}\n\n\tconst tokenizationSupport: languages.ITokenizationSupport = {\n\t\tgetInitialState: () => NullState,\n\t\ttokenize: undefined!,\n\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult => {\n\t\t\tcalledFor.push(line.charAt(0));\n\t\t\treturn new languages.EncodedTokenizationResult(new Uint32Array(0), state);\n\t\t}\n\t};\n\n\tlet thisModel: TextModel;\n\tlet languageRegistration: IDisposable;\n\n\tsetup(() => {\n\t\tconst TEXT =\n\t\t\t'1\\r\\n' +\n\t\t\t'2\\n' +\n\t\t\t'3\\n' +\n\t\t\t'4\\r\\n' +\n\t\t\t'5';\n\t\tconst LANGUAGE_ID = 'modelModeTest1';\n\t\tcalledFor = [];\n\t\tlanguageRegistration = languages.TokenizationRegistry.register(LANGUAGE_ID, tokenizationSupport);\n\t\tthisModel = createTextModel(TEXT, LANGUAGE_ID);\n\t});\n\n\tteardown(() => {\n\t\tthisModel.dispose();\n\t\tlanguageRegistration.dispose();\n\t\tcalledFor = [];\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('model calls syntax highlighter 1', () => {\n\t\tthisModel.tokenization.forceTokenization(1);\n\t\tassert.deepStrictEqual(getAndClear(), ['1']);\n\t});\n\n\ttest('model calls syntax highlighter 2', () => {\n\t\tthisModel.tokenization.forceTokenization(2);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', '2']);\n\n\t\tthisModel.tokenization.forceTokenization(2);\n\t\tassert.deepStrictEqual(getAndClear(), []);\n\t});\n\n\ttest('model caches states', () => {\n\t\tthisModel.tokenization.forceTokenization(1);\n\t\tassert.deepStrictEqual(getAndClear(), ['1']);\n\n\t\tthisModel.tokenization.forceTokenization(2);\n\t\tassert.deepStrictEqual(getAndClear(), ['2']);\n\n\t\tthisModel.tokenization.forceTokenization(3);\n\t\tassert.deepStrictEqual(getAndClear(), ['3']);\n\n\t\tthisModel.tokenization.forceTokenization(4);\n\t\tassert.deepStrictEqual(getAndClear(), ['4']);\n\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['5']);\n\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), []);\n\t});\n\n\ttest('model invalidates states for one line insert', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', '2', '3', '4', '5']);\n\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(1, 1), '-')]);\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['-']);\n\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), []);\n\t});\n\n\ttest('model invalidates states for many lines insert', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', '2', '3', '4', '5']);\n\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(1, 1), '0\\n-\\n+')]);\n\t\tassert.strictEqual(thisModel.getLineCount(), 7);\n\t\tthisModel.tokenization.forceTokenization(7);\n\t\tassert.deepStrictEqual(getAndClear(), ['0', '-', '+']);\n\n\t\tthisModel.tokenization.forceTokenization(7);\n\t\tassert.deepStrictEqual(getAndClear(), []);\n\t});\n\n\ttest('model invalidates states for one new line', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', '2', '3', '4', '5']);\n\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(1, 2), '\\n')]);\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(2, 1), 'a')]);\n\t\tthisModel.tokenization.forceTokenization(6);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', 'a']);\n\t});\n\n\ttest('model invalidates states for one line delete', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', '2', '3', '4', '5']);\n\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(1, 2), '-')]);\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1']);\n\n\t\tthisModel.applyEdits([EditOperation.delete(new Range(1, 1, 1, 2))]);\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['-']);\n\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), []);\n\t});\n\n\ttest('model invalidates states for many lines delete', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', '2', '3', '4', '5']);\n\n\t\tthisModel.applyEdits([EditOperation.delete(new Range(1, 1, 3, 1))]);\n\t\tthisModel.tokenization.forceTokenization(3);\n\t\tassert.deepStrictEqual(getAndClear(), ['3']);\n\n\t\tthisModel.tokenization.forceTokenization(3);\n\t\tassert.deepStrictEqual(getAndClear(), []);\n\t});\n});\n\nsuite('Editor Model - Model Modes 2', () => {\n\n\tclass ModelState2 implements languages.IState {\n\t\tprevLineContent: string;\n\n\t\tconstructor(prevLineContent: string) {\n\t\t\tthis.prevLineContent = prevLineContent;\n\t\t}\n\n\t\tclone(): languages.IState {\n\t\t\treturn new ModelState2(this.prevLineContent);\n\t\t}\n\n\t\tequals(other: languages.IState): boolean {\n\t\t\treturn (other instanceof ModelState2) && other.prevLineContent === this.prevLineContent;\n\t\t}\n\t}\n\n\tlet calledFor: string[] = [];\n\n\tfunction getAndClear(): string[] {\n\t\tconst actual = calledFor;\n\t\tcalledFor = [];\n\t\treturn actual;\n\t}\n\n\tconst tokenizationSupport: languages.ITokenizationSupport = {\n\t\tgetInitialState: () => new ModelState2(''),\n\t\ttokenize: undefined!,\n\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult => {\n\t\t\tcalledFor.push(line);\n\t\t\t(<ModelState2>state).prevLineContent = line;\n\t\t\treturn new languages.EncodedTokenizationResult(new Uint32Array(0), state);\n\t\t}\n\t};\n\n\tlet thisModel: TextModel;\n\tlet languageRegistration: IDisposable;\n\n\tsetup(() => {\n\t\tconst TEXT =\n\t\t\t'Line1' + '\\r\\n' +\n\t\t\t'Line2' + '\\n' +\n\t\t\t'Line3' + '\\n' +\n\t\t\t'Line4' + '\\r\\n' +\n\t\t\t'Line5';\n\t\tconst LANGUAGE_ID = 'modelModeTest2';\n\t\tlanguageRegistration = languages.TokenizationRegistry.register(LANGUAGE_ID, tokenizationSupport);\n\t\tthisModel = createTextModel(TEXT, LANGUAGE_ID);\n\t});\n\n\tteardown(() => {\n\t\tthisModel.dispose();\n\t\tlanguageRegistration.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('getTokensForInvalidLines one text insert', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'Line2', 'Line3', 'Line4', 'Line5']);\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(1, 6), '-')]);\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1-', 'Line2']);\n\t});\n\n\ttest('getTokensForInvalidLines two text insert', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'Line2', 'Line3', 'Line4', 'Line5']);\n\t\tthisModel.applyEdits([\n\t\t\tEditOperation.insert(new Position(1, 6), '-'),\n\t\t\tEditOperation.insert(new Position(3, 6), '-')\n\t\t]);\n\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1-', 'Line2', 'Line3-', 'Line4']);\n\t});\n\n\ttest('getTokensForInvalidLines one multi-line text insert, one small text insert', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'Line2', 'Line3', 'Line4', 'Line5']);\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(1, 6), '\\nNew line\\nAnother new line')]);\n\t\tthisModel.applyEdits([EditOperation.insert(new Position(5, 6), '-')]);\n\t\tthisModel.tokenization.forceTokenization(7);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'New line', 'Another new line', 'Line2', 'Line3-', 'Line4']);\n\t});\n\n\ttest('getTokensForInvalidLines one delete text', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'Line2', 'Line3', 'Line4', 'Line5']);\n\t\tthisModel.applyEdits([EditOperation.delete(new Range(1, 1, 1, 5))]);\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['1', 'Line2']);\n\t});\n\n\ttest('getTokensForInvalidLines one line delete text', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'Line2', 'Line3', 'Line4', 'Line5']);\n\t\tthisModel.applyEdits([EditOperation.delete(new Range(1, 1, 2, 1))]);\n\t\tthisModel.tokenization.forceTokenization(4);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line2']);\n\t});\n\n\ttest('getTokensForInvalidLines multiple lines delete text', () => {\n\t\tthisModel.tokenization.forceTokenization(5);\n\t\tassert.deepStrictEqual(getAndClear(), ['Line1', 'Line2', 'Line3', 'Line4', 'Line5']);\n\t\tthisModel.applyEdits([EditOperation.delete(new Range(1, 1, 3, 3))]);\n\t\tthisModel.tokenization.forceTokenization(3);\n\t\tassert.deepStrictEqual(getAndClear(), ['ne3', 'Line4']);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
