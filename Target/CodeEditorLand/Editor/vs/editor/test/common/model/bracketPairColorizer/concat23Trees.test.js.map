{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/bracketPairColorizer/concat23Trees.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { AstNode, AstNodeKind, ListAstNode, TextAstNode } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/ast.js';\nimport { concat23Trees } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/concat23Trees.js';\nimport { toLength } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/length.js';\n\nsuite('Bracket Pair Colorizer - mergeItems', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Clone', () => {\n\t\tconst tree = ListAstNode.create([\n\t\t\tnew TextAstNode(toLength(1, 1)),\n\t\t\tnew TextAstNode(toLength(1, 1)),\n\t\t]);\n\n\t\tassert.ok(equals(tree, tree.deepClone()));\n\t});\n\n\tfunction equals(node1: AstNode, node2: AstNode): boolean {\n\t\tif (node1.length !== node2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node1.children.length !== node2.children.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < node1.children.length; i++) {\n\t\t\tif (!equals(node1.children[i], node2.children[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (!node1.missingOpeningBracketIds.equals(node2.missingOpeningBracketIds)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node1.kind === AstNodeKind.Pair && node2.kind === AstNodeKind.Pair) {\n\t\t\treturn true;\n\t\t} else if (node1.kind === node2.kind) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction testMerge(lists: AstNode[]) {\n\t\tconst node = (concat23Trees(lists.map(l => l.deepClone())) || ListAstNode.create([])).flattenLists();\n\t\t// This trivial merge does not maintain the (2,3) tree invariant.\n\t\tconst referenceNode = ListAstNode.create(lists).flattenLists();\n\n\t\tassert.ok(equals(node, referenceNode), 'merge23Trees failed');\n\t}\n\n\ttest('Empty List', () => {\n\t\ttestMerge([]);\n\t});\n\n\ttest('Same Height Lists', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\ttestMerge([tree.deepClone(), tree.deepClone(), tree.deepClone(), tree.deepClone(), tree.deepClone()]);\n\t});\n\n\ttest('Different Height Lists 1', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree1 = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\tconst tree2 = ListAstNode.create([tree1.deepClone(), tree1.deepClone()]);\n\n\t\ttestMerge([tree1, tree2]);\n\t});\n\n\ttest('Different Height Lists 2', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree1 = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\tconst tree2 = ListAstNode.create([tree1.deepClone(), tree1.deepClone()]);\n\n\t\ttestMerge([tree2, tree1]);\n\t});\n\n\ttest('Different Height Lists 3', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree1 = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\tconst tree2 = ListAstNode.create([tree1.deepClone(), tree1.deepClone()]);\n\n\t\ttestMerge([tree2, tree1, tree1, tree2, tree2]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
