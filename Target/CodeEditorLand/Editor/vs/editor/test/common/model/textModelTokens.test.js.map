{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/textModelTokens.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { OffsetRange } from '../../../common/core/offsetRange.js';\nimport { RangePriorityQueueImpl } from '../../../common/model/textModelTokens.js';\n\nsuite('RangePriorityQueueImpl', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('addRange', () => {\n\t\tconst ranges: OffsetRange[] = [];\n\n\t\tOffsetRange.addRange(new OffsetRange(0, 2), ranges);\n\t\tOffsetRange.addRange(new OffsetRange(10, 13), ranges);\n\t\tOffsetRange.addRange(new OffsetRange(20, 24), ranges);\n\n\t\tassert.deepStrictEqual(\n\t\t\tranges.map(r => r.toString()),\n\t\t\t(['[0, 2)', '[10, 13)', '[20, 24)'])\n\t\t);\n\n\t\tOffsetRange.addRange(new OffsetRange(2, 10), ranges);\n\n\t\tassert.deepStrictEqual(\n\t\t\tranges.map(r => r.toString()),\n\t\t\t(['[0, 13)', '[20, 24)'])\n\t\t);\n\n\t\tOffsetRange.addRange(new OffsetRange(14, 19), ranges);\n\n\t\tassert.deepStrictEqual(\n\t\t\tranges.map(r => r.toString()),\n\t\t\t(['[0, 13)', '[14, 19)', '[20, 24)'])\n\t\t);\n\n\t\tOffsetRange.addRange(new OffsetRange(10, 22), ranges);\n\n\t\tassert.deepStrictEqual(\n\t\t\tranges.map(r => r.toString()),\n\t\t\t(['[0, 24)'])\n\t\t);\n\n\t\tOffsetRange.addRange(new OffsetRange(-1, 29), ranges);\n\n\t\tassert.deepStrictEqual(\n\t\t\tranges.map(r => r.toString()),\n\t\t\t(['[-1, 29)'])\n\t\t);\n\n\t\tOffsetRange.addRange(new OffsetRange(-10, -5), ranges);\n\n\t\tassert.deepStrictEqual(\n\t\t\tranges.map(r => r.toString()),\n\t\t\t(['[-10, -5)', '[-1, 29)'])\n\t\t);\n\t});\n\n\ttest('addRangeAndResize', () => {\n\t\tconst queue = new RangePriorityQueueImpl();\n\n\t\tqueue.addRange(new OffsetRange(0, 20));\n\t\tqueue.addRange(new OffsetRange(100, 120));\n\t\tqueue.addRange(new OffsetRange(200, 220));\n\n\t\t// disjoint\n\t\tqueue.addRangeAndResize(new OffsetRange(25, 27), 0);\n\n\t\tassert.deepStrictEqual(\n\t\t\tqueue.getRanges().map(r => r.toString()),\n\t\t\t(['[0, 20)', '[98, 118)', '[198, 218)'])\n\t\t);\n\n\t\tqueue.addRangeAndResize(new OffsetRange(19, 20), 0);\n\n\t\tassert.deepStrictEqual(\n\t\t\tqueue.getRanges().map(r => r.toString()),\n\t\t\t(['[0, 19)', '[97, 117)', '[197, 217)'])\n\t\t);\n\n\t\tqueue.addRangeAndResize(new OffsetRange(19, 97), 0);\n\n\t\tassert.deepStrictEqual(\n\t\t\tqueue.getRanges().map(r => r.toString()),\n\t\t\t(['[0, 39)', '[119, 139)'])\n\t\t);\n\n\t\tqueue.addRangeAndResize(new OffsetRange(-1000, 1000), 0);\n\n\t\tassert.deepStrictEqual(\n\t\t\tqueue.getRanges().map(r => r.toString()),\n\t\t\t([])\n\t\t);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AAEvC,MAAM,0BAA0B,MAAM;AAErC,0CAAwC;AAExC,OAAK,YAAY,MAAM;AACtB,UAAM,SAAwB,CAAC;AAE/B,gBAAY,SAAS,IAAI,YAAY,GAAG,CAAC,GAAG,MAAM;AAClD,gBAAY,SAAS,IAAI,YAAY,IAAI,EAAE,GAAG,MAAM;AACpD,gBAAY,SAAS,IAAI,YAAY,IAAI,EAAE,GAAG,MAAM;AAEpD,WAAO;AAAA,MACN,OAAO,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MAC3B,CAAC,UAAU,YAAY,UAAU;AAAA,IACnC;AAEA,gBAAY,SAAS,IAAI,YAAY,GAAG,EAAE,GAAG,MAAM;AAEnD,WAAO;AAAA,MACN,OAAO,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MAC3B,CAAC,WAAW,UAAU;AAAA,IACxB;AAEA,gBAAY,SAAS,IAAI,YAAY,IAAI,EAAE,GAAG,MAAM;AAEpD,WAAO;AAAA,MACN,OAAO,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MAC3B,CAAC,WAAW,YAAY,UAAU;AAAA,IACpC;AAEA,gBAAY,SAAS,IAAI,YAAY,IAAI,EAAE,GAAG,MAAM;AAEpD,WAAO;AAAA,MACN,OAAO,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MAC3B,CAAC,SAAS;AAAA,IACZ;AAEA,gBAAY,SAAS,IAAI,YAAY,IAAI,EAAE,GAAG,MAAM;AAEpD,WAAO;AAAA,MACN,OAAO,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MAC3B,CAAC,UAAU;AAAA,IACb;AAEA,gBAAY,SAAS,IAAI,YAAY,KAAK,EAAE,GAAG,MAAM;AAErD,WAAO;AAAA,MACN,OAAO,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MAC3B,CAAC,aAAa,UAAU;AAAA,IAC1B;AAAA,EACD,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,UAAM,QAAQ,IAAI,uBAAuB;AAEzC,UAAM,SAAS,IAAI,YAAY,GAAG,EAAE,CAAC;AACrC,UAAM,SAAS,IAAI,YAAY,KAAK,GAAG,CAAC;AACxC,UAAM,SAAS,IAAI,YAAY,KAAK,GAAG,CAAC;AAGxC,UAAM,kBAAkB,IAAI,YAAY,IAAI,EAAE,GAAG,CAAC;AAElD,WAAO;AAAA,MACN,MAAM,UAAU,EAAE,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MACtC,CAAC,WAAW,aAAa,YAAY;AAAA,IACvC;AAEA,UAAM,kBAAkB,IAAI,YAAY,IAAI,EAAE,GAAG,CAAC;AAElD,WAAO;AAAA,MACN,MAAM,UAAU,EAAE,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MACtC,CAAC,WAAW,aAAa,YAAY;AAAA,IACvC;AAEA,UAAM,kBAAkB,IAAI,YAAY,IAAI,EAAE,GAAG,CAAC;AAElD,WAAO;AAAA,MACN,MAAM,UAAU,EAAE,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MACtC,CAAC,WAAW,YAAY;AAAA,IAC1B;AAEA,UAAM,kBAAkB,IAAI,YAAY,MAAO,GAAI,GAAG,CAAC;AAEvD,WAAO;AAAA,MACN,MAAM,UAAU,EAAE,IAAI,OAAK,EAAE,SAAS,CAAC;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,EACD,CAAC;AACF,CAAC;",
  "names": []
}
