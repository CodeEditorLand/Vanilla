{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/intervalTree.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { TrackedRangeStickiness } from '../../../common/model.js';\nimport { IntervalNode, IntervalTree, NodeColor, SENTINEL, getNodeColor, intervalCompare, nodeAcceptEdit, setNodeStickiness } from '../../../common/model/intervalTree.js';\n\nconst GENERATE_TESTS = false;\nconst TEST_COUNT = GENERATE_TESTS ? 10000 : 0;\nconst PRINT_TREE = false;\nconst MIN_INTERVAL_START = 1;\nconst MAX_INTERVAL_END = 100;\nconst MIN_INSERTS = 1;\nconst MAX_INSERTS = 30;\nconst MIN_CHANGE_CNT = 10;\nconst MAX_CHANGE_CNT = 20;\n\nsuite('IntervalTree 1', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass Interval {\n\t\t_intervalBrand: void = undefined;\n\n\t\tpublic start: number;\n\t\tpublic end: number;\n\n\t\tconstructor(start: number, end: number) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\t}\n\n\tclass Oracle {\n\t\tpublic intervals: Interval[];\n\n\t\tconstructor() {\n\t\t\tthis.intervals = [];\n\t\t}\n\n\t\tpublic insert(interval: Interval): Interval {\n\t\t\tthis.intervals.push(interval);\n\t\t\tthis.intervals.sort((a, b) => {\n\t\t\t\tif (a.start === b.start) {\n\t\t\t\t\treturn a.end - b.end;\n\t\t\t\t}\n\t\t\t\treturn a.start - b.start;\n\t\t\t});\n\t\t\treturn interval;\n\t\t}\n\n\t\tpublic delete(interval: Interval): void {\n\t\t\tfor (let i = 0, len = this.intervals.length; i < len; i++) {\n\t\t\t\tif (this.intervals[i] === interval) {\n\t\t\t\t\tthis.intervals.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic search(interval: Interval): Interval[] {\n\t\t\tconst result: Interval[] = [];\n\t\t\tfor (let i = 0, len = this.intervals.length; i < len; i++) {\n\t\t\t\tconst int = this.intervals[i];\n\t\t\t\tif (int.start <= interval.end && int.end >= interval.start) {\n\t\t\t\t\tresult.push(int);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tclass TestState {\n\t\tprivate _oracle: Oracle = new Oracle();\n\t\tprivate _tree: IntervalTree = new IntervalTree();\n\t\tprivate _lastNodeId = -1;\n\t\tprivate _treeNodes: Array<IntervalNode | null> = [];\n\t\tprivate _oracleNodes: Array<Interval | null> = [];\n\n\t\tpublic acceptOp(op: IOperation): void {\n\n\t\t\tif (op.type === 'insert') {\n\t\t\t\tif (PRINT_TREE) {\n\t\t\t\t\tconsole.log(`insert: {${JSON.stringify(new Interval(op.begin, op.end))}}`);\n\t\t\t\t}\n\t\t\t\tconst nodeId = (++this._lastNodeId);\n\t\t\t\tthis._treeNodes[nodeId] = new IntervalNode(null!, op.begin, op.end);\n\t\t\t\tthis._tree.insert(this._treeNodes[nodeId]!);\n\t\t\t\tthis._oracleNodes[nodeId] = this._oracle.insert(new Interval(op.begin, op.end));\n\t\t\t} else if (op.type === 'delete') {\n\t\t\t\tif (PRINT_TREE) {\n\t\t\t\t\tconsole.log(`delete: {${JSON.stringify(this._oracleNodes[op.id])}}`);\n\t\t\t\t}\n\t\t\t\tthis._tree.delete(this._treeNodes[op.id]!);\n\t\t\t\tthis._oracle.delete(this._oracleNodes[op.id]!);\n\n\t\t\t\tthis._treeNodes[op.id] = null;\n\t\t\t\tthis._oracleNodes[op.id] = null;\n\t\t\t} else if (op.type === 'change') {\n\n\t\t\t\tthis._tree.delete(this._treeNodes[op.id]!);\n\t\t\t\tthis._treeNodes[op.id]!.reset(0, op.begin, op.end, null!);\n\t\t\t\tthis._tree.insert(this._treeNodes[op.id]!);\n\n\t\t\t\tthis._oracle.delete(this._oracleNodes[op.id]!);\n\t\t\t\tthis._oracleNodes[op.id]!.start = op.begin;\n\t\t\t\tthis._oracleNodes[op.id]!.end = op.end;\n\t\t\t\tthis._oracle.insert(this._oracleNodes[op.id]!);\n\n\t\t\t} else {\n\t\t\t\tconst actualNodes = this._tree.intervalSearch(op.begin, op.end, 0, false, 0, false);\n\t\t\t\tconst actual = actualNodes.map(n => new Interval(n.cachedAbsoluteStart, n.cachedAbsoluteEnd));\n\t\t\t\tconst expected = this._oracle.search(new Interval(op.begin, op.end));\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (PRINT_TREE) {\n\t\t\t\tprintTree(this._tree);\n\t\t\t}\n\n\t\t\tassertTreeInvariants(this._tree);\n\n\t\t\tconst actual = this._tree.getAllInOrder().map(n => new Interval(n.cachedAbsoluteStart, n.cachedAbsoluteEnd));\n\t\t\tconst expected = this._oracle.intervals;\n\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t}\n\n\t\tpublic getExistingNodeId(index: number): number {\n\t\t\tlet currIndex = -1;\n\t\t\tfor (let i = 0; i < this._treeNodes.length; i++) {\n\t\t\t\tif (this._treeNodes[i] === null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcurrIndex++;\n\t\t\t\tif (currIndex === index) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new Error('unexpected');\n\t\t}\n\t}\n\n\tinterface IInsertOperation {\n\t\ttype: 'insert';\n\t\tbegin: number;\n\t\tend: number;\n\t}\n\n\tinterface IDeleteOperation {\n\t\ttype: 'delete';\n\t\tid: number;\n\t}\n\n\tinterface IChangeOperation {\n\t\ttype: 'change';\n\t\tid: number;\n\t\tbegin: number;\n\t\tend: number;\n\t}\n\n\tinterface ISearchOperation {\n\t\ttype: 'search';\n\t\tbegin: number;\n\t\tend: number;\n\t}\n\n\ttype IOperation = IInsertOperation | IDeleteOperation | IChangeOperation | ISearchOperation;\n\n\tfunction testIntervalTree(ops: IOperation[]): void {\n\t\tconst state = new TestState();\n\t\tfor (let i = 0; i < ops.length; i++) {\n\t\t\tstate.acceptOp(ops[i]);\n\t\t}\n\t}\n\n\tfunction getRandomInt(min: number, max: number): number {\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n\t}\n\n\tfunction getRandomRange(min: number, max: number): [number, number] {\n\t\tconst begin = getRandomInt(min, max);\n\t\tlet length: number;\n\t\tif (getRandomInt(1, 10) <= 2) {\n\t\t\t// large range\n\t\t\tlength = getRandomInt(0, max - begin);\n\t\t} else {\n\t\t\t// small range\n\t\t\tlength = getRandomInt(0, Math.min(max - begin, 10));\n\t\t}\n\t\treturn [begin, begin + length];\n\t}\n\n\tclass AutoTest {\n\t\tprivate _ops: IOperation[] = [];\n\t\tprivate _state: TestState = new TestState();\n\t\tprivate _insertCnt: number;\n\t\tprivate _deleteCnt: number;\n\t\tprivate _changeCnt: number;\n\n\t\tconstructor() {\n\t\t\tthis._insertCnt = getRandomInt(MIN_INSERTS, MAX_INSERTS);\n\t\t\tthis._changeCnt = getRandomInt(MIN_CHANGE_CNT, MAX_CHANGE_CNT);\n\t\t\tthis._deleteCnt = 0;\n\t\t}\n\n\t\tprivate _doRandomInsert(): void {\n\t\t\tconst range = getRandomRange(MIN_INTERVAL_START, MAX_INTERVAL_END);\n\t\t\tthis._run({\n\t\t\t\ttype: 'insert',\n\t\t\t\tbegin: range[0],\n\t\t\t\tend: range[1]\n\t\t\t});\n\t\t}\n\n\t\tprivate _doRandomDelete(): void {\n\t\t\tconst idx = getRandomInt(Math.floor(this._deleteCnt / 2), this._deleteCnt - 1);\n\t\t\tthis._run({\n\t\t\t\ttype: 'delete',\n\t\t\t\tid: this._state.getExistingNodeId(idx)\n\t\t\t});\n\t\t}\n\n\t\tprivate _doRandomChange(): void {\n\t\t\tconst idx = getRandomInt(0, this._deleteCnt - 1);\n\t\t\tconst range = getRandomRange(MIN_INTERVAL_START, MAX_INTERVAL_END);\n\t\t\tthis._run({\n\t\t\t\ttype: 'change',\n\t\t\t\tid: this._state.getExistingNodeId(idx),\n\t\t\t\tbegin: range[0],\n\t\t\t\tend: range[1]\n\t\t\t});\n\t\t}\n\n\t\tpublic run() {\n\t\t\twhile (this._insertCnt > 0 || this._deleteCnt > 0 || this._changeCnt > 0) {\n\t\t\t\tif (this._insertCnt > 0) {\n\t\t\t\t\tthis._doRandomInsert();\n\t\t\t\t\tthis._insertCnt--;\n\t\t\t\t\tthis._deleteCnt++;\n\t\t\t\t} else if (this._changeCnt > 0) {\n\t\t\t\t\tthis._doRandomChange();\n\t\t\t\t\tthis._changeCnt--;\n\t\t\t\t} else {\n\t\t\t\t\tthis._doRandomDelete();\n\t\t\t\t\tthis._deleteCnt--;\n\t\t\t\t}\n\n\t\t\t\t// Let's also search for something...\n\t\t\t\tconst searchRange = getRandomRange(MIN_INTERVAL_START, MAX_INTERVAL_END);\n\t\t\t\tthis._run({\n\t\t\t\t\ttype: 'search',\n\t\t\t\t\tbegin: searchRange[0],\n\t\t\t\t\tend: searchRange[1]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tprivate _run(op: IOperation): void {\n\t\t\tthis._ops.push(op);\n\t\t\tthis._state.acceptOp(op);\n\t\t}\n\n\t\tpublic print(): void {\n\t\t\tconsole.log(`testIntervalTree(${JSON.stringify(this._ops)})`);\n\t\t}\n\n\t}\n\n\tsuite('generated', () => {\n\t\ttest('gen01', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 28, end: 35 },\n\t\t\t\t{ type: 'insert', begin: 52, end: 54 },\n\t\t\t\t{ type: 'insert', begin: 63, end: 69 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen02', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 80, end: 89 },\n\t\t\t\t{ type: 'insert', begin: 92, end: 100 },\n\t\t\t\t{ type: 'insert', begin: 99, end: 99 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen03', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 89, end: 96 },\n\t\t\t\t{ type: 'insert', begin: 71, end: 74 },\n\t\t\t\t{ type: 'delete', id: 1 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen04', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 44, end: 46 },\n\t\t\t\t{ type: 'insert', begin: 85, end: 88 },\n\t\t\t\t{ type: 'delete', id: 0 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen05', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 82, end: 90 },\n\t\t\t\t{ type: 'insert', begin: 69, end: 73 },\n\t\t\t\t{ type: 'delete', id: 0 },\n\t\t\t\t{ type: 'delete', id: 1 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen06', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 41, end: 63 },\n\t\t\t\t{ type: 'insert', begin: 98, end: 98 },\n\t\t\t\t{ type: 'insert', begin: 47, end: 51 },\n\t\t\t\t{ type: 'delete', id: 2 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen07', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 24, end: 26 },\n\t\t\t\t{ type: 'insert', begin: 11, end: 28 },\n\t\t\t\t{ type: 'insert', begin: 27, end: 30 },\n\t\t\t\t{ type: 'insert', begin: 80, end: 85 },\n\t\t\t\t{ type: 'delete', id: 1 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen08', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 100, end: 100 },\n\t\t\t\t{ type: 'insert', begin: 100, end: 100 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen09', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 58, end: 65 },\n\t\t\t\t{ type: 'insert', begin: 82, end: 96 },\n\t\t\t\t{ type: 'insert', begin: 58, end: 65 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen10', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 32, end: 40 },\n\t\t\t\t{ type: 'insert', begin: 25, end: 29 },\n\t\t\t\t{ type: 'insert', begin: 24, end: 32 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen11', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 25, end: 70 },\n\t\t\t\t{ type: 'insert', begin: 99, end: 100 },\n\t\t\t\t{ type: 'insert', begin: 46, end: 51 },\n\t\t\t\t{ type: 'insert', begin: 57, end: 57 },\n\t\t\t\t{ type: 'delete', id: 2 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen12', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 20, end: 26 },\n\t\t\t\t{ type: 'insert', begin: 10, end: 18 },\n\t\t\t\t{ type: 'insert', begin: 99, end: 99 },\n\t\t\t\t{ type: 'insert', begin: 37, end: 59 },\n\t\t\t\t{ type: 'delete', id: 2 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen13', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 3, end: 91 },\n\t\t\t\t{ type: 'insert', begin: 57, end: 57 },\n\t\t\t\t{ type: 'insert', begin: 35, end: 44 },\n\t\t\t\t{ type: 'insert', begin: 72, end: 81 },\n\t\t\t\t{ type: 'delete', id: 2 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen14', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 58, end: 61 },\n\t\t\t\t{ type: 'insert', begin: 34, end: 35 },\n\t\t\t\t{ type: 'insert', begin: 56, end: 62 },\n\t\t\t\t{ type: 'insert', begin: 69, end: 78 },\n\t\t\t\t{ type: 'delete', id: 0 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen15', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 63, end: 69 },\n\t\t\t\t{ type: 'insert', begin: 17, end: 24 },\n\t\t\t\t{ type: 'insert', begin: 3, end: 13 },\n\t\t\t\t{ type: 'insert', begin: 84, end: 94 },\n\t\t\t\t{ type: 'insert', begin: 18, end: 23 },\n\t\t\t\t{ type: 'insert', begin: 96, end: 98 },\n\t\t\t\t{ type: 'delete', id: 1 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen16', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 27, end: 27 },\n\t\t\t\t{ type: 'insert', begin: 42, end: 87 },\n\t\t\t\t{ type: 'insert', begin: 42, end: 49 },\n\t\t\t\t{ type: 'insert', begin: 69, end: 71 },\n\t\t\t\t{ type: 'insert', begin: 20, end: 27 },\n\t\t\t\t{ type: 'insert', begin: 8, end: 9 },\n\t\t\t\t{ type: 'insert', begin: 42, end: 49 },\n\t\t\t\t{ type: 'delete', id: 1 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen17', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 21, end: 23 },\n\t\t\t\t{ type: 'insert', begin: 83, end: 87 },\n\t\t\t\t{ type: 'insert', begin: 56, end: 58 },\n\t\t\t\t{ type: 'insert', begin: 1, end: 55 },\n\t\t\t\t{ type: 'insert', begin: 56, end: 59 },\n\t\t\t\t{ type: 'insert', begin: 58, end: 60 },\n\t\t\t\t{ type: 'insert', begin: 56, end: 65 },\n\t\t\t\t{ type: 'delete', id: 1 },\n\t\t\t\t{ type: 'delete', id: 0 },\n\t\t\t\t{ type: 'delete', id: 6 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('gen18', () => {\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 25, end: 25 },\n\t\t\t\t{ type: 'insert', begin: 67, end: 79 },\n\t\t\t\t{ type: 'delete', id: 0 },\n\t\t\t\t{ type: 'search', begin: 65, end: 75 }\n\t\t\t]);\n\t\t});\n\n\t\ttest('force delta overflow', () => {\n\t\t\t// Search the IntervalNode ctor for FORCE_OVERFLOWING_TEST\n\t\t\t// to force that this test leads to a delta normalization\n\t\t\ttestIntervalTree([\n\t\t\t\t{ type: 'insert', begin: 686081138593427, end: 733009856502260 },\n\t\t\t\t{ type: 'insert', begin: 591031326181669, end: 591031326181672 },\n\t\t\t\t{ type: 'insert', begin: 940037682731896, end: 940037682731903 },\n\t\t\t\t{ type: 'insert', begin: 598413641151120, end: 598413641151128 },\n\t\t\t\t{ type: 'insert', begin: 800564156553344, end: 800564156553351 },\n\t\t\t\t{ type: 'insert', begin: 894198957565481, end: 894198957565491 }\n\t\t\t]);\n\t\t});\n\t});\n\n\t// TEST_COUNT = 0;\n\t// PRINT_TREE = true;\n\n\tfor (let i = 0; i < TEST_COUNT; i++) {\n\t\tif (i % 100 === 0) {\n\t\t\tconsole.log(`TEST ${i + 1}/${TEST_COUNT}`);\n\t\t}\n\t\tconst test = new AutoTest();\n\n\t\ttry {\n\t\t\ttest.run();\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\ttest.print();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tsuite('searching', () => {\n\n\t\tfunction createCormenTree(): IntervalTree {\n\t\t\tconst r = new IntervalTree();\n\t\t\tconst data: [number, number][] = [\n\t\t\t\t[16, 21],\n\t\t\t\t[8, 9],\n\t\t\t\t[25, 30],\n\t\t\t\t[5, 8],\n\t\t\t\t[15, 23],\n\t\t\t\t[17, 19],\n\t\t\t\t[26, 26],\n\t\t\t\t[0, 3],\n\t\t\t\t[6, 10],\n\t\t\t\t[19, 20]\n\t\t\t];\n\t\t\tdata.forEach((int) => {\n\t\t\t\tconst node = new IntervalNode(null!, int[0], int[1]);\n\t\t\t\tr.insert(node);\n\t\t\t});\n\t\t\treturn r;\n\t\t}\n\n\t\tconst T = createCormenTree();\n\n\t\tfunction assertIntervalSearch(start: number, end: number, expected: [number, number][]): void {\n\t\t\tconst actualNodes = T.intervalSearch(start, end, 0, false, 0, false);\n\t\t\tconst actual = actualNodes.map((n) => <[number, number]>[n.cachedAbsoluteStart, n.cachedAbsoluteEnd]);\n\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t}\n\n\t\ttest('cormen 1->2', () => {\n\t\t\tassertIntervalSearch(\n\t\t\t\t1, 2,\n\t\t\t\t[\n\t\t\t\t\t[0, 3],\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('cormen 4->8', () => {\n\t\t\tassertIntervalSearch(\n\t\t\t\t4, 8,\n\t\t\t\t[\n\t\t\t\t\t[5, 8],\n\t\t\t\t\t[6, 10],\n\t\t\t\t\t[8, 9],\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('cormen 10->15', () => {\n\t\t\tassertIntervalSearch(\n\t\t\t\t10, 15,\n\t\t\t\t[\n\t\t\t\t\t[6, 10],\n\t\t\t\t\t[15, 23],\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('cormen 21->25', () => {\n\t\t\tassertIntervalSearch(\n\t\t\t\t21, 25,\n\t\t\t\t[\n\t\t\t\t\t[15, 23],\n\t\t\t\t\t[16, 21],\n\t\t\t\t\t[25, 30],\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('cormen 24->24', () => {\n\t\t\tassertIntervalSearch(\n\t\t\t\t24, 24,\n\t\t\t\t[\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\t});\n});\n\nsuite('IntervalTree 2', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertNodeAcceptEdit(msg: string, nodeStart: number, nodeEnd: number, nodeStickiness: TrackedRangeStickiness, start: number, end: number, textLength: number, forceMoveMarkers: boolean, expectedNodeStart: number, expectedNodeEnd: number): void {\n\t\tconst node = new IntervalNode('', nodeStart, nodeEnd);\n\t\tsetNodeStickiness(node, nodeStickiness);\n\t\tnodeAcceptEdit(node, start, end, textLength, forceMoveMarkers);\n\t\tassert.deepStrictEqual([node.start, node.end], [expectedNodeStart, expectedNodeEnd], msg);\n\t}\n\n\ttest('nodeAcceptEdit', () => {\n\t\t// A. collapsed decoration\n\t\t{\n\t\t\t// no-op\n\t\t\tassertNodeAcceptEdit('A.000', 0, 0, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 0, false, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.001', 0, 0, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 0, false, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.002', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 0, false, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.003', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 0, false, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.004', 0, 0, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 0, true, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.005', 0, 0, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 0, true, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.006', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 0, true, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.007', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 0, true, 0, 0);\n\t\t\t// insertion\n\t\t\tassertNodeAcceptEdit('A.008', 0, 0, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 1, false, 0, 1);\n\t\t\tassertNodeAcceptEdit('A.009', 0, 0, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 1, false, 1, 1);\n\t\t\tassertNodeAcceptEdit('A.010', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 1, false, 0, 0);\n\t\t\tassertNodeAcceptEdit('A.011', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 1, false, 1, 1);\n\t\t\tassertNodeAcceptEdit('A.012', 0, 0, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 1, true, 1, 1);\n\t\t\tassertNodeAcceptEdit('A.013', 0, 0, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 1, true, 1, 1);\n\t\t\tassertNodeAcceptEdit('A.014', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 1, true, 1, 1);\n\t\t\tassertNodeAcceptEdit('A.015', 0, 0, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 1, true, 1, 1);\n\t\t}\n\n\t\t// B. non collapsed decoration\n\t\t{\n\t\t\t// no-op\n\t\t\tassertNodeAcceptEdit('B.000', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 0, false, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.001', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 0, false, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.002', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 0, false, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.003', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 0, false, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.004', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 0, true, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.005', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 0, true, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.006', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 0, true, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.007', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 0, true, 0, 5);\n\t\t\t// insertion at start\n\t\t\tassertNodeAcceptEdit('B.008', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.009', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 1, false, 1, 6);\n\t\t\tassertNodeAcceptEdit('B.010', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.011', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 1, false, 1, 6);\n\t\t\tassertNodeAcceptEdit('B.012', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 0, 0, 1, true, 1, 6);\n\t\t\tassertNodeAcceptEdit('B.013', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 0, 0, 1, true, 1, 6);\n\t\t\tassertNodeAcceptEdit('B.014', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 0, 0, 1, true, 1, 6);\n\t\t\tassertNodeAcceptEdit('B.015', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 0, 0, 1, true, 1, 6);\n\t\t\t// insertion in middle\n\t\t\tassertNodeAcceptEdit('B.016', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 2, 2, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.017', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 2, 2, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.018', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 2, 2, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.019', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 2, 2, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.020', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 2, 2, 1, true, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.021', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 2, 2, 1, true, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.022', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 2, 2, 1, true, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.023', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 2, 2, 1, true, 0, 6);\n\t\t\t// insertion at end\n\t\t\tassertNodeAcceptEdit('B.024', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 5, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.025', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 5, 1, false, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.026', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 5, 1, false, 0, 5);\n\t\t\tassertNodeAcceptEdit('B.027', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 5, 1, false, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.028', 0, 5, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 5, 1, true, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.029', 0, 5, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 5, 1, true, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.030', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 5, 1, true, 0, 6);\n\t\t\tassertNodeAcceptEdit('B.031', 0, 5, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 5, 1, true, 0, 6);\n\n\t\t\t// replace with larger text until start\n\t\t\tassertNodeAcceptEdit('B.032', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 5, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.033', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 5, 2, false, 6, 11);\n\t\t\tassertNodeAcceptEdit('B.034', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 5, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.035', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 5, 2, false, 6, 11);\n\t\t\tassertNodeAcceptEdit('B.036', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 5, 2, true, 6, 11);\n\t\t\tassertNodeAcceptEdit('B.037', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 5, 2, true, 6, 11);\n\t\t\tassertNodeAcceptEdit('B.038', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 5, 2, true, 6, 11);\n\t\t\tassertNodeAcceptEdit('B.039', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 5, 2, true, 6, 11);\n\t\t\t// replace with smaller text until start\n\t\t\tassertNodeAcceptEdit('B.040', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 3, 5, 1, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.041', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 3, 5, 1, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.042', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 3, 5, 1, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.043', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 3, 5, 1, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.044', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 3, 5, 1, true, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.045', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 3, 5, 1, true, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.046', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 3, 5, 1, true, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.047', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 3, 5, 1, true, 4, 9);\n\n\t\t\t// replace with larger text select start\n\t\t\tassertNodeAcceptEdit('B.048', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 6, 3, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.049', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 6, 3, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.050', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 6, 3, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.051', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 6, 3, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.052', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 6, 3, true, 7, 11);\n\t\t\tassertNodeAcceptEdit('B.053', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 6, 3, true, 7, 11);\n\t\t\tassertNodeAcceptEdit('B.054', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 6, 3, true, 7, 11);\n\t\t\tassertNodeAcceptEdit('B.055', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 6, 3, true, 7, 11);\n\t\t\t// replace with smaller text select start\n\t\t\tassertNodeAcceptEdit('B.056', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 6, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.057', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 6, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.058', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 6, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.059', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 6, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.060', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 6, 1, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.061', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 6, 1, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.062', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 6, 1, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.063', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 6, 1, true, 5, 9);\n\n\t\t\t// replace with larger text from start\n\t\t\tassertNodeAcceptEdit('B.064', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 6, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.065', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 6, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.066', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 6, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.067', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 6, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.068', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 6, 2, true, 7, 11);\n\t\t\tassertNodeAcceptEdit('B.069', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 6, 2, true, 7, 11);\n\t\t\tassertNodeAcceptEdit('B.070', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 6, 2, true, 7, 11);\n\t\t\tassertNodeAcceptEdit('B.071', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 6, 2, true, 7, 11);\n\t\t\t// replace with smaller text from start\n\t\t\tassertNodeAcceptEdit('B.072', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 7, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.073', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 7, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.074', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 7, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.075', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 7, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.076', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 7, 1, true, 6, 9);\n\t\t\tassertNodeAcceptEdit('B.077', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 7, 1, true, 6, 9);\n\t\t\tassertNodeAcceptEdit('B.078', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 7, 1, true, 6, 9);\n\t\t\tassertNodeAcceptEdit('B.079', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 7, 1, true, 6, 9);\n\n\t\t\t// replace with larger text to end\n\t\t\tassertNodeAcceptEdit('B.080', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 10, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.081', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 10, 2, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.082', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 10, 2, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.083', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 10, 2, false, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.084', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 10, 2, true, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.085', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 10, 2, true, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.086', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 10, 2, true, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.087', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 10, 2, true, 5, 11);\n\t\t\t// replace with smaller text to end\n\t\t\tassertNodeAcceptEdit('B.088', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 8, 10, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.089', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 8, 10, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.090', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 8, 10, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.091', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 8, 10, 1, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.092', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 8, 10, 1, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.093', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 8, 10, 1, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.094', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 8, 10, 1, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.095', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 8, 10, 1, true, 5, 9);\n\n\t\t\t// replace with larger text select end\n\t\t\tassertNodeAcceptEdit('B.096', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.097', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.098', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.099', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.100', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 11, 3, true, 5, 12);\n\t\t\tassertNodeAcceptEdit('B.101', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 11, 3, true, 5, 12);\n\t\t\tassertNodeAcceptEdit('B.102', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 11, 3, true, 5, 12);\n\t\t\tassertNodeAcceptEdit('B.103', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 11, 3, true, 5, 12);\n\t\t\t// replace with smaller text select end\n\t\t\tassertNodeAcceptEdit('B.104', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 11, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.105', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 11, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.106', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 11, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.107', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 11, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.108', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 11, 1, true, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.109', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 11, 1, true, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.110', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 11, 1, true, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.111', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 11, 1, true, 5, 10);\n\n\t\t\t// replace with larger text from end\n\t\t\tassertNodeAcceptEdit('B.112', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 10, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.113', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 10, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.114', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 10, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.115', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 10, 11, 3, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.116', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 10, 11, 3, true, 5, 13);\n\t\t\tassertNodeAcceptEdit('B.117', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 10, 11, 3, true, 5, 13);\n\t\t\tassertNodeAcceptEdit('B.118', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 10, 11, 3, true, 5, 13);\n\t\t\tassertNodeAcceptEdit('B.119', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 10, 11, 3, true, 5, 13);\n\t\t\t// replace with smaller text from end\n\t\t\tassertNodeAcceptEdit('B.120', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 10, 12, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.121', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 10, 12, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.122', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 10, 12, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.123', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 10, 12, 1, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.124', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 10, 12, 1, true, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.125', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 10, 12, 1, true, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.126', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 10, 12, 1, true, 5, 11);\n\t\t\tassertNodeAcceptEdit('B.127', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 10, 12, 1, true, 5, 11);\n\n\t\t\t// delete until start\n\t\t\tassertNodeAcceptEdit('B.128', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 5, 0, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.129', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 5, 0, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.130', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 5, 0, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.131', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 5, 0, false, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.132', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 5, 0, true, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.133', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 5, 0, true, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.134', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 5, 0, true, 4, 9);\n\t\t\tassertNodeAcceptEdit('B.135', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 5, 0, true, 4, 9);\n\n\t\t\t// delete select start\n\t\t\tassertNodeAcceptEdit('B.136', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 6, 0, false, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.137', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 6, 0, false, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.138', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 6, 0, false, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.139', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 6, 0, false, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.140', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 4, 6, 0, true, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.141', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 4, 6, 0, true, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.142', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 4, 6, 0, true, 4, 8);\n\t\t\tassertNodeAcceptEdit('B.143', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 4, 6, 0, true, 4, 8);\n\n\t\t\t// delete from start\n\t\t\tassertNodeAcceptEdit('B.144', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 6, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.145', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 6, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.146', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 6, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.147', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 6, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.148', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 6, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.149', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 6, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.150', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 6, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.151', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 6, 0, true, 5, 9);\n\n\t\t\t// delete to end\n\t\t\tassertNodeAcceptEdit('B.152', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 10, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.153', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 10, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.154', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 10, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.155', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 10, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.156', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 10, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.157', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 10, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.158', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 10, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.159', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 10, 0, true, 5, 9);\n\n\t\t\t// delete select end\n\t\t\tassertNodeAcceptEdit('B.160', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 11, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.161', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 11, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.162', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 11, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.163', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 11, 0, false, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.164', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 9, 11, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.165', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 9, 11, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.166', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 9, 11, 0, true, 5, 9);\n\t\t\tassertNodeAcceptEdit('B.167', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 9, 11, 0, true, 5, 9);\n\n\t\t\t// delete from end\n\t\t\tassertNodeAcceptEdit('B.168', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 10, 11, 0, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.169', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 10, 11, 0, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.170', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 10, 11, 0, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.171', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 10, 11, 0, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.172', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 10, 11, 0, true, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.173', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 10, 11, 0, true, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.174', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 10, 11, 0, true, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.175', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 10, 11, 0, true, 5, 10);\n\n\t\t\t// replace with larger text entire\n\t\t\tassertNodeAcceptEdit('B.176', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 10, 3, false, 5, 8);\n\t\t\tassertNodeAcceptEdit('B.177', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 10, 3, false, 5, 8);\n\t\t\tassertNodeAcceptEdit('B.178', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 10, 3, false, 5, 8);\n\t\t\tassertNodeAcceptEdit('B.179', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 10, 3, false, 5, 8);\n\t\t\tassertNodeAcceptEdit('B.180', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 10, 3, true, 8, 8);\n\t\t\tassertNodeAcceptEdit('B.181', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 10, 3, true, 8, 8);\n\t\t\tassertNodeAcceptEdit('B.182', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 10, 3, true, 8, 8);\n\t\t\tassertNodeAcceptEdit('B.183', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 10, 3, true, 8, 8);\n\t\t\t// replace with smaller text entire\n\t\t\tassertNodeAcceptEdit('B.184', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 10, 7, false, 5, 12);\n\t\t\tassertNodeAcceptEdit('B.185', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 10, 7, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.186', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 10, 7, false, 5, 10);\n\t\t\tassertNodeAcceptEdit('B.187', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 10, 7, false, 5, 12);\n\t\t\tassertNodeAcceptEdit('B.188', 5, 10, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, 5, 10, 7, true, 12, 12);\n\t\t\tassertNodeAcceptEdit('B.189', 5, 10, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, 5, 10, 7, true, 12, 12);\n\t\t\tassertNodeAcceptEdit('B.190', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingBefore, 5, 10, 7, true, 12, 12);\n\t\t\tassertNodeAcceptEdit('B.191', 5, 10, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter, 5, 10, 7, true, 12, 12);\n\n\t\t}\n\t});\n});\n\nfunction printTree(T: IntervalTree): void {\n\tif (T.root === SENTINEL) {\n\t\tconsole.log(`~~ empty`);\n\t\treturn;\n\t}\n\tconst out: string[] = [];\n\t_printTree(T, T.root, '', 0, out);\n\tconsole.log(out.join(''));\n}\n\nfunction _printTree(T: IntervalTree, n: IntervalNode, indent: string, delta: number, out: string[]): void {\n\tout.push(`${indent}[${getNodeColor(n) === NodeColor.Red ? 'R' : 'B'},${n.delta}, ${n.start}->${n.end}, ${n.maxEnd}] : {${delta + n.start}->${delta + n.end}}, maxEnd: ${n.maxEnd + delta}\\n`);\n\tif (n.left !== SENTINEL) {\n\t\t_printTree(T, n.left, indent + '    ', delta, out);\n\t} else {\n\t\tout.push(`${indent}    NIL\\n`);\n\t}\n\tif (n.right !== SENTINEL) {\n\t\t_printTree(T, n.right, indent + '    ', delta + n.delta, out);\n\t} else {\n\t\tout.push(`${indent}    NIL\\n`);\n\t}\n}\n\n//#region Assertion\n\nfunction assertTreeInvariants(T: IntervalTree): void {\n\tassert(getNodeColor(SENTINEL) === NodeColor.Black);\n\tassert(SENTINEL.parent === SENTINEL);\n\tassert(SENTINEL.left === SENTINEL);\n\tassert(SENTINEL.right === SENTINEL);\n\tassert(SENTINEL.start === 0);\n\tassert(SENTINEL.end === 0);\n\tassert(SENTINEL.delta === 0);\n\tassert(T.root.parent === SENTINEL);\n\tassertValidTree(T);\n}\n\nfunction depth(n: IntervalNode): number {\n\tif (n === SENTINEL) {\n\t\t// The leafs are black\n\t\treturn 1;\n\t}\n\tassert(depth(n.left) === depth(n.right));\n\treturn (getNodeColor(n) === NodeColor.Black ? 1 : 0) + depth(n.left);\n}\n\nfunction assertValidNode(n: IntervalNode, delta: number): void {\n\tif (n === SENTINEL) {\n\t\treturn;\n\t}\n\n\tconst l = n.left;\n\tconst r = n.right;\n\n\tif (getNodeColor(n) === NodeColor.Red) {\n\t\tassert(getNodeColor(l) === NodeColor.Black);\n\t\tassert(getNodeColor(r) === NodeColor.Black);\n\t}\n\n\tlet expectedMaxEnd = n.end;\n\tif (l !== SENTINEL) {\n\t\tassert(intervalCompare(l.start + delta, l.end + delta, n.start + delta, n.end + delta) <= 0);\n\t\texpectedMaxEnd = Math.max(expectedMaxEnd, l.maxEnd);\n\t}\n\tif (r !== SENTINEL) {\n\t\tassert(intervalCompare(n.start + delta, n.end + delta, r.start + delta + n.delta, r.end + delta + n.delta) <= 0);\n\t\texpectedMaxEnd = Math.max(expectedMaxEnd, r.maxEnd + n.delta);\n\t}\n\tassert(n.maxEnd === expectedMaxEnd);\n\n\tassertValidNode(l, delta);\n\tassertValidNode(r, delta + n.delta);\n}\n\nfunction assertValidTree(T: IntervalTree): void {\n\tif (T.root === SENTINEL) {\n\t\treturn;\n\t}\n\tassert(getNodeColor(T.root) === NodeColor.Black);\n\tassert(depth(T.root.left) === depth(T.root.right));\n\tassertValidNode(T.root, 0);\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["actual", "expected", "test"]
}
