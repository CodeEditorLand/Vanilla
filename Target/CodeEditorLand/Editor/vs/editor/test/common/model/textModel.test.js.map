{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/textModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { UTF8_BOM_CHARACTER } from '../../../../base/common/strings.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../common/languages/modesRegistry.js';\nimport { EndOfLinePreference } from '../../../common/model.js';\nimport { TextModel, createTextBuffer } from '../../../common/model/textModel.js';\nimport { createModelServices, createTextModel } from '../testTextModel.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\n\nfunction testGuessIndentation(defaultInsertSpaces: boolean, defaultTabSize: number, expectedInsertSpaces: boolean, expectedTabSize: number, text: string[], msg?: string): void {\n\tconst m = createTextModel(\n\t\ttext.join('\\n'),\n\t\tundefined,\n\t\t{\n\t\t\ttabSize: defaultTabSize,\n\t\t\tinsertSpaces: defaultInsertSpaces,\n\t\t\tdetectIndentation: true\n\t\t}\n\t);\n\tconst r = m.getOptions();\n\tm.dispose();\n\n\tassert.strictEqual(r.insertSpaces, expectedInsertSpaces, msg);\n\tassert.strictEqual(r.tabSize, expectedTabSize, msg);\n}\n\nfunction assertGuess(expectedInsertSpaces: boolean | undefined, expectedTabSize: number | undefined | [number], text: string[], msg?: string): void {\n\tif (typeof expectedInsertSpaces === 'undefined') {\n\t\t// cannot guess insertSpaces\n\t\tif (typeof expectedTabSize === 'undefined') {\n\t\t\t// cannot guess tabSize\n\t\t\ttestGuessIndentation(true, 13370, true, 13370, text, msg);\n\t\t\ttestGuessIndentation(false, 13371, false, 13371, text, msg);\n\t\t} else if (typeof expectedTabSize === 'number') {\n\t\t\t// can guess tabSize\n\t\t\ttestGuessIndentation(true, 13370, true, expectedTabSize, text, msg);\n\t\t\ttestGuessIndentation(false, 13371, false, expectedTabSize, text, msg);\n\t\t} else {\n\t\t\t// can only guess tabSize when insertSpaces is true\n\t\t\ttestGuessIndentation(true, 13370, true, expectedTabSize[0], text, msg);\n\t\t\ttestGuessIndentation(false, 13371, false, 13371, text, msg);\n\t\t}\n\t} else {\n\t\t// can guess insertSpaces\n\t\tif (typeof expectedTabSize === 'undefined') {\n\t\t\t// cannot guess tabSize\n\t\t\ttestGuessIndentation(true, 13370, expectedInsertSpaces, 13370, text, msg);\n\t\t\ttestGuessIndentation(false, 13371, expectedInsertSpaces, 13371, text, msg);\n\t\t} else if (typeof expectedTabSize === 'number') {\n\t\t\t// can guess tabSize\n\t\t\ttestGuessIndentation(true, 13370, expectedInsertSpaces, expectedTabSize, text, msg);\n\t\t\ttestGuessIndentation(false, 13371, expectedInsertSpaces, expectedTabSize, text, msg);\n\t\t} else {\n\t\t\t// can only guess tabSize when insertSpaces is true\n\t\t\tif (expectedInsertSpaces === true) {\n\t\t\t\ttestGuessIndentation(true, 13370, expectedInsertSpaces, expectedTabSize[0], text, msg);\n\t\t\t\ttestGuessIndentation(false, 13371, expectedInsertSpaces, expectedTabSize[0], text, msg);\n\t\t\t} else {\n\t\t\t\ttestGuessIndentation(true, 13370, expectedInsertSpaces, 13370, text, msg);\n\t\t\t\ttestGuessIndentation(false, 13371, expectedInsertSpaces, 13371, text, msg);\n\t\t\t}\n\t\t}\n\t}\n}\n\nsuite('TextModelData.fromString', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tinterface ITextBufferData {\n\t\tEOL: string;\n\t\tlines: string[];\n\t\tcontainsRTL: boolean;\n\t\tisBasicASCII: boolean;\n\t}\n\n\tfunction testTextModelDataFromString(text: string, expected: ITextBufferData): void {\n\t\tconst { textBuffer, disposable } = createTextBuffer(text, TextModel.DEFAULT_CREATION_OPTIONS.defaultEOL);\n\t\tconst actual: ITextBufferData = {\n\t\t\tEOL: textBuffer.getEOL(),\n\t\t\tlines: textBuffer.getLinesContent(),\n\t\t\tcontainsRTL: textBuffer.mightContainRTL(),\n\t\t\tisBasicASCII: !textBuffer.mightContainNonBasicASCII()\n\t\t};\n\t\tassert.deepStrictEqual(actual, expected);\n\t\tdisposable.dispose();\n\t}\n\n\ttest('one line text', () => {\n\t\ttestTextModelDataFromString('Hello world!',\n\t\t\t{\n\t\t\t\tEOL: '\\n',\n\t\t\t\tlines: [\n\t\t\t\t\t'Hello world!'\n\t\t\t\t],\n\t\t\t\tcontainsRTL: false,\n\t\t\t\tisBasicASCII: true\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('multiline text', () => {\n\t\ttestTextModelDataFromString('Hello,\\r\\ndear friend\\nHow\\rare\\r\\nyou?',\n\t\t\t{\n\t\t\t\tEOL: '\\r\\n',\n\t\t\t\tlines: [\n\t\t\t\t\t'Hello,',\n\t\t\t\t\t'dear friend',\n\t\t\t\t\t'How',\n\t\t\t\t\t'are',\n\t\t\t\t\t'you?'\n\t\t\t\t],\n\t\t\t\tcontainsRTL: false,\n\t\t\t\tisBasicASCII: true\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('Non Basic ASCII 1', () => {\n\t\ttestTextModelDataFromString('Hello,\\nZ\u00FCrich',\n\t\t\t{\n\t\t\t\tEOL: '\\n',\n\t\t\t\tlines: [\n\t\t\t\t\t'Hello,',\n\t\t\t\t\t'Z\u00FCrich'\n\t\t\t\t],\n\t\t\t\tcontainsRTL: false,\n\t\t\t\tisBasicASCII: false\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('containsRTL 1', () => {\n\t\ttestTextModelDataFromString('Hello,\\n\u05D6\u05D5\u05D4\u05D9 \u05E2\u05D5\u05D1\u05D3\u05D4 \u05DE\u05D1\u05D5\u05E1\u05E1\u05EA \u05E9\u05D3\u05E2\u05EA\u05D5',\n\t\t\t{\n\t\t\t\tEOL: '\\n',\n\t\t\t\tlines: [\n\t\t\t\t\t'Hello,',\n\t\t\t\t\t'\u05D6\u05D5\u05D4\u05D9 \u05E2\u05D5\u05D1\u05D3\u05D4 \u05DE\u05D1\u05D5\u05E1\u05E1\u05EA \u05E9\u05D3\u05E2\u05EA\u05D5'\n\t\t\t\t],\n\t\t\t\tcontainsRTL: true,\n\t\t\t\tisBasicASCII: false\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('containsRTL 2', () => {\n\t\ttestTextModelDataFromString('Hello,\\n\u0647\u0646\u0627\u0643 \u062D\u0642\u064A\u0642\u0629 \u0645\u062B\u0628\u062A\u0629 \u0645\u0646\u0630 \u0632\u0645\u0646 \u0637\u0648\u064A\u0644',\n\t\t\t{\n\t\t\t\tEOL: '\\n',\n\t\t\t\tlines: [\n\t\t\t\t\t'Hello,',\n\t\t\t\t\t'\u0647\u0646\u0627\u0643 \u062D\u0642\u064A\u0642\u0629 \u0645\u062B\u0628\u062A\u0629 \u0645\u0646\u0630 \u0632\u0645\u0646 \u0637\u0648\u064A\u0644'\n\t\t\t\t],\n\t\t\t\tcontainsRTL: true,\n\t\t\t\tisBasicASCII: false\n\t\t\t}\n\t\t);\n\t});\n\n});\n\nsuite('Editor Model - TextModel', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('TextModel does not use events internally', () => {\n\t\t// Make sure that all model parts receive text model events explicitly\n\t\t// to avoid that by any chance an outside listener receives events before\n\t\t// the parts and thus are able to access the text model in an inconsistent state.\n\t\t//\n\t\t// We simply check that there are no listeners attached to text model\n\t\t// after instantiation\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService: IInstantiationService = createModelServices(disposables);\n\t\tconst textModel = disposables.add(instantiationService.createInstance(TextModel, '', PLAINTEXT_LANGUAGE_ID, TextModel.DEFAULT_CREATION_OPTIONS, null));\n\t\tassert.strictEqual(textModel._hasListeners(), false);\n\t\tdisposables.dispose();\n\t});\n\n\ttest('getValueLengthInRange', () => {\n\n\t\tlet m = createTextModel('My First Line\\r\\nMy Second Line\\r\\nMy Third Line');\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1, 1)), ''.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1, 2)), 'M'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 1, 3)), 'y'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1, 14)), 'My First Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1)), 'My First Line\\r\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 2, 1)), 'y First Line\\r\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 2, 2)), 'y First Line\\r\\nM'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 2, 1000)), 'y First Line\\r\\nMy Second Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 3, 1)), 'y First Line\\r\\nMy Second Line\\r\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 3, 1000)), 'y First Line\\r\\nMy Second Line\\r\\nMy Third Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000)), 'My First Line\\r\\nMy Second Line\\r\\nMy Third Line'.length);\n\t\tm.dispose();\n\n\t\tm = createTextModel('My First Line\\nMy Second Line\\nMy Third Line');\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1, 1)), ''.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1, 2)), 'M'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 1, 3)), 'y'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1, 14)), 'My First Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1)), 'My First Line\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 2, 1)), 'y First Line\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 2, 2)), 'y First Line\\nM'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 2, 1000)), 'y First Line\\nMy Second Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 3, 1)), 'y First Line\\nMy Second Line\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 2, 3, 1000)), 'y First Line\\nMy Second Line\\nMy Third Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000)), 'My First Line\\nMy Second Line\\nMy Third Line'.length);\n\t\tm.dispose();\n\t});\n\n\ttest('getValueLengthInRange different EOL', () => {\n\n\t\tlet m = createTextModel('My First Line\\r\\nMy Second Line\\r\\nMy Third Line');\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1), EndOfLinePreference.TextDefined), 'My First Line\\r\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1), EndOfLinePreference.CRLF), 'My First Line\\r\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1), EndOfLinePreference.LF), 'My First Line\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000), EndOfLinePreference.TextDefined), 'My First Line\\r\\nMy Second Line\\r\\nMy Third Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000), EndOfLinePreference.CRLF), 'My First Line\\r\\nMy Second Line\\r\\nMy Third Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000), EndOfLinePreference.LF), 'My First Line\\nMy Second Line\\nMy Third Line'.length);\n\t\tm.dispose();\n\n\t\tm = createTextModel('My First Line\\nMy Second Line\\nMy Third Line');\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1), EndOfLinePreference.TextDefined), 'My First Line\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1), EndOfLinePreference.LF), 'My First Line\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 2, 1), EndOfLinePreference.CRLF), 'My First Line\\r\\n'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000), EndOfLinePreference.TextDefined), 'My First Line\\nMy Second Line\\nMy Third Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000), EndOfLinePreference.LF), 'My First Line\\nMy Second Line\\nMy Third Line'.length);\n\t\tassert.strictEqual(m.getValueLengthInRange(new Range(1, 1, 1000, 1000), EndOfLinePreference.CRLF), 'My First Line\\r\\nMy Second Line\\r\\nMy Third Line'.length);\n\t\tm.dispose();\n\t});\n\n\ttest('guess indentation 1', () => {\n\n\t\tassertGuess(undefined, undefined, [\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x'\n\t\t], 'no clues');\n\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x'\n\t\t], 'no spaces, 1xTAB');\n\n\t\tassertGuess(true, 2, [\n\t\t\t'  x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x'\n\t\t], '1x2');\n\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'\\tx'\n\t\t], '7xTAB');\n\n\t\tassertGuess(undefined, [2], [\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t], '4x2, 4xTAB');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t' x',\n\t\t\t'\\tx',\n\t\t\t' x',\n\t\t\t'\\tx',\n\t\t\t' x',\n\t\t\t'\\tx',\n\t\t\t' x'\n\t\t], '4x1, 4xTAB');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t], '4x2, 5xTAB');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t], '1x2, 5xTAB');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'    x',\n\t\t], '1x4, 5xTAB');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'x',\n\t\t\t'\\tx',\n\t\t\t'  x',\n\t\t\t'\\tx',\n\t\t\t'    x',\n\t\t], '1x2, 1x4, 5xTAB');\n\n\t\tassertGuess(undefined, undefined, [\n\t\t\t'x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x'\n\t\t], '7x1 - 1 space is never guessed as an indentation');\n\t\tassertGuess(true, undefined, [\n\t\t\t'x',\n\t\t\t'          x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x'\n\t\t], '1x10, 6x1');\n\t\tassertGuess(undefined, undefined, [\n\t\t\t'',\n\t\t\t'  ',\n\t\t\t'    ',\n\t\t\t'      ',\n\t\t\t'        ',\n\t\t\t'          ',\n\t\t\t'            ',\n\t\t\t'              ',\n\t\t], 'whitespace lines don\\'t count');\n\t\tassertGuess(true, 3, [\n\t\t\t'x',\n\t\t\t'   x',\n\t\t\t'   x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'   x',\n\t\t\t'   x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'   x',\n\t\t\t'   x',\n\t\t\t'    x',\n\t\t], '6x3, 3x4');\n\t\tassertGuess(true, 5, [\n\t\t\t'x',\n\t\t\t'     x',\n\t\t\t'     x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'     x',\n\t\t\t'     x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'     x',\n\t\t\t'     x',\n\t\t\t'    x',\n\t\t], '6x5, 3x4');\n\t\tassertGuess(true, 7, [\n\t\t\t'x',\n\t\t\t'       x',\n\t\t\t'       x',\n\t\t\t'     x',\n\t\t\t'x',\n\t\t\t'       x',\n\t\t\t'       x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'       x',\n\t\t\t'       x',\n\t\t\t'    x',\n\t\t], '6x7, 1x5, 2x4');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t], '8x2');\n\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t], '8x2');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t], '4x2, 4x4');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t], '6x2, 3x4');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t], '4x2, 4x4');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t], '2x2, 4x4');\n\t\tassertGuess(true, 4, [\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t], '8x4');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'      x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'      x',\n\t\t], '2x2, 4x4, 2x6');\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'      x',\n\t\t\t'      x',\n\t\t\t'        x',\n\t\t], '1x2, 2x4, 2x6, 1x8');\n\t\tassertGuess(true, 4, [\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'     x',\n\t\t\t'        x',\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'     x',\n\t\t\t'        x',\n\t\t], '6x4, 2x5, 2x8');\n\t\tassertGuess(true, 4, [\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'     x',\n\t\t\t'        x',\n\t\t\t'        x',\n\t\t], '3x4, 1x5, 2x8');\n\t\tassertGuess(true, 4, [\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'     x',\n\t\t\t'        x',\n\t\t\t'        x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t\t'     x',\n\t\t\t'        x',\n\t\t\t'        x',\n\t\t], '6x4, 2x5, 4x8');\n\t\tassertGuess(true, 3, [\n\t\t\t'x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t' x',\n\t\t\t'x',\n\t\t\t'   x',\n\t\t\t'    x',\n\t\t\t'    x',\n\t\t], '5x1, 2x0, 1x3, 2x4');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\t x',\n\t\t\t' \\t x',\n\t\t\t'\\tx'\n\t\t], 'mixed whitespace 1');\n\t\tassertGuess(false, undefined, [\n\t\t\t'\\tx',\n\t\t\t'\\t    x'\n\t\t], 'mixed whitespace 2');\n\t});\n\n\ttest('issue #44991: Wrong indentation size auto-detection', () => {\n\t\tassertGuess(true, 4, [\n\t\t\t'a = 10             # 0 space indent',\n\t\t\t'b = 5              # 0 space indent',\n\t\t\t'if a > 10:         # 0 space indent',\n\t\t\t'    a += 1         # 4 space indent      delta 4 spaces',\n\t\t\t'    if b > 5:      # 4 space indent',\n\t\t\t'        b += 1     # 8 space indent      delta 4 spaces',\n\t\t\t'        b += 1     # 8 space indent',\n\t\t\t'        b += 1     # 8 space indent',\n\t\t\t'# comment line 1   # 0 space indent      delta 8 spaces',\n\t\t\t'# comment line 2   # 0 space indent',\n\t\t\t'# comment line 3   # 0 space indent',\n\t\t\t'        b += 1     # 8 space indent      delta 8 spaces',\n\t\t\t'        b += 1     # 8 space indent',\n\t\t\t'        b += 1     # 8 space indent',\n\t\t]);\n\t});\n\n\ttest('issue #55818: Broken indentation detection', () => {\n\t\tassertGuess(true, 2, [\n\t\t\t'',\n\t\t\t'/* REQUIRE */',\n\t\t\t'',\n\t\t\t'const foo = require ( \\'foo\\' ),',\n\t\t\t'      bar = require ( \\'bar\\' );',\n\t\t\t'',\n\t\t\t'/* MY FN */',\n\t\t\t'',\n\t\t\t'function myFn () {',\n\t\t\t'',\n\t\t\t'  const asd = 1,',\n\t\t\t'        dsa = 2;',\n\t\t\t'',\n\t\t\t'  return bar ( foo ( asd ) );',\n\t\t\t'',\n\t\t\t'}',\n\t\t\t'',\n\t\t\t'/* EXPORT */',\n\t\t\t'',\n\t\t\t'module.exports = myFn;',\n\t\t\t'',\n\t\t]);\n\t});\n\n\ttest('issue #70832: Broken indentation detection', () => {\n\t\tassertGuess(false, undefined, [\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'\tx',\n\t\t\t'\t\tx',\n\t\t\t'    x',\n\t\t\t'\t\tx',\n\t\t\t'\tx',\n\t\t\t'\t\tx',\n\t\t\t'\tx',\n\t\t\t'\tx',\n\t\t\t'\tx',\n\t\t\t'\tx',\n\t\t\t'x',\n\t\t]);\n\t});\n\n\ttest('issue #62143: Broken indentation detection', () => {\n\t\t// works before the fix\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'x',\n\t\t\t'  x',\n\t\t\t'  x'\n\t\t]);\n\n\t\t// works before the fix\n\t\tassertGuess(true, 2, [\n\t\t\t'x',\n\t\t\t'  - item2',\n\t\t\t'  - item3'\n\t\t]);\n\n\t\t// works before the fix\n\t\ttestGuessIndentation(true, 2, true, 2, [\n\t\t\t'x x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t]);\n\n\t\t// fails before the fix\n\t\t// empty space inline breaks the indentation guess\n\t\ttestGuessIndentation(true, 2, true, 2, [\n\t\t\t'x x',\n\t\t\t'  x',\n\t\t\t'  x',\n\t\t\t'    x'\n\t\t]);\n\n\t\ttestGuessIndentation(true, 2, true, 2, [\n\t\t\t'<!--test1.md -->',\n\t\t\t'- item1',\n\t\t\t'  - item2',\n\t\t\t'    - item3'\n\t\t]);\n\t});\n\n\ttest('issue #84217: Broken indentation detection', () => {\n\t\tassertGuess(true, 4, [\n\t\t\t'def main():',\n\t\t\t'    print(\\'hello\\')',\n\t\t]);\n\t\tassertGuess(true, 4, [\n\t\t\t'def main():',\n\t\t\t'    with open(\\'foo\\') as fp:',\n\t\t\t'        print(fp.read())',\n\t\t]);\n\t});\n\n\ttest('validatePosition', () => {\n\n\t\tconst m = createTextModel('line one\\nline two');\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(0, 0)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(0, 1)), new Position(1, 1));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 1)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 2)), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 30)), new Position(1, 9));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 0)), new Position(2, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 1)), new Position(2, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 2)), new Position(2, 2));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 30)), new Position(2, 9));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(3, 0)), new Position(2, 9));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(3, 1)), new Position(2, 9));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(3, 30)), new Position(2, 9));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(30, 30)), new Position(2, 9));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(-123.123, -0.5)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(Number.MIN_VALUE, Number.MIN_VALUE)), new Position(1, 1));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(Number.MAX_VALUE, Number.MAX_VALUE)), new Position(2, 9));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(123.23, 47.5)), new Position(2, 9));\n\n\t\tm.dispose();\n\t});\n\n\ttest('validatePosition around high-low surrogate pairs 1', () => {\n\n\t\tconst m = createTextModel('a\uD83D\uDCDAb');\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(0, 0)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(0, 1)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(0, 7)), new Position(1, 1));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 1)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 2)), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 3)), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 4)), new Position(1, 4));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 5)), new Position(1, 5));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 30)), new Position(1, 5));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 0)), new Position(1, 5));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 1)), new Position(1, 5));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 2)), new Position(1, 5));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 30)), new Position(1, 5));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(-123.123, -0.5)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(Number.MIN_VALUE, Number.MIN_VALUE)), new Position(1, 1));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(Number.MAX_VALUE, Number.MAX_VALUE)), new Position(1, 5));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(123.23, 47.5)), new Position(1, 5));\n\n\t\tm.dispose();\n\t});\n\n\ttest('validatePosition around high-low surrogate pairs 2', () => {\n\n\t\tconst m = createTextModel('a\uD83D\uDCDA\uD83D\uDCDAb');\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 1)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 2)), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 3)), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 4)), new Position(1, 4));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 5)), new Position(1, 4));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 6)), new Position(1, 6));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 7)), new Position(1, 7));\n\n\t\tm.dispose();\n\n\t});\n\n\ttest('validatePosition handle NaN.', () => {\n\n\t\tconst m = createTextModel('line one\\nline two');\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(NaN, 1)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, NaN)), new Position(1, 1));\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(NaN, NaN)), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, NaN)), new Position(2, 1));\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(NaN, 3)), new Position(1, 3));\n\n\t\tm.dispose();\n\t});\n\n\ttest('issue #71480: validatePosition handle floats', () => {\n\t\tconst m = createTextModel('line one\\nline two');\n\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(0.2, 1)), new Position(1, 1), 'a');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1.2, 1)), new Position(1, 1), 'b');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1.5, 2)), new Position(1, 2), 'c');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1.8, 3)), new Position(1, 3), 'd');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 0.3)), new Position(1, 1), 'e');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 0.8)), new Position(2, 1), 'f');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(1, 1.2)), new Position(1, 1), 'g');\n\t\tassert.deepStrictEqual(m.validatePosition(new Position(2, 1.5)), new Position(2, 1), 'h');\n\n\t\tm.dispose();\n\t});\n\n\ttest('issue #71480: validateRange handle floats', () => {\n\t\tconst m = createTextModel('line one\\nline two');\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(0.2, 1.5, 0.8, 2.5)), new Range(1, 1, 1, 1));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1.2, 1.7, 1.8, 2.2)), new Range(1, 1, 1, 2));\n\n\t\tm.dispose();\n\t});\n\n\ttest('validateRange around high-low surrogate pairs 1', () => {\n\n\t\tconst m = createTextModel('a\uD83D\uDCDAb');\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(0, 0, 0, 1)), new Range(1, 1, 1, 1));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(0, 0, 0, 7)), new Range(1, 1, 1, 1));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 1)), new Range(1, 1, 1, 1));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 2)), new Range(1, 1, 1, 2));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 3)), new Range(1, 1, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 4)), new Range(1, 1, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 5)), new Range(1, 1, 1, 5));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 2)), new Range(1, 2, 1, 2));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 3)), new Range(1, 2, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 4)), new Range(1, 2, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 5)), new Range(1, 2, 1, 5));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 3)), new Range(1, 2, 1, 2));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 4)), new Range(1, 2, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 5)), new Range(1, 2, 1, 5));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 4, 1, 4)), new Range(1, 4, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 4, 1, 5)), new Range(1, 4, 1, 5));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 5, 1, 5)), new Range(1, 5, 1, 5));\n\n\t\tm.dispose();\n\t});\n\n\ttest('validateRange around high-low surrogate pairs 2', () => {\n\n\t\tconst m = createTextModel('a\uD83D\uDCDA\uD83D\uDCDAb');\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(0, 0, 0, 1)), new Range(1, 1, 1, 1));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(0, 0, 0, 7)), new Range(1, 1, 1, 1));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 1)), new Range(1, 1, 1, 1));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 2)), new Range(1, 1, 1, 2));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 3)), new Range(1, 1, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 4)), new Range(1, 1, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 5)), new Range(1, 1, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 6)), new Range(1, 1, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 1, 1, 7)), new Range(1, 1, 1, 7));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 2)), new Range(1, 2, 1, 2));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 3)), new Range(1, 2, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 4)), new Range(1, 2, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 5)), new Range(1, 2, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 6)), new Range(1, 2, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 2, 1, 7)), new Range(1, 2, 1, 7));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 3)), new Range(1, 2, 1, 2));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 4)), new Range(1, 2, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 5)), new Range(1, 2, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 6)), new Range(1, 2, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 3, 1, 7)), new Range(1, 2, 1, 7));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 4, 1, 4)), new Range(1, 4, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 4, 1, 5)), new Range(1, 4, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 4, 1, 6)), new Range(1, 4, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 4, 1, 7)), new Range(1, 4, 1, 7));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 5, 1, 5)), new Range(1, 4, 1, 4));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 5, 1, 6)), new Range(1, 4, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 5, 1, 7)), new Range(1, 4, 1, 7));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 6, 1, 6)), new Range(1, 6, 1, 6));\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 6, 1, 7)), new Range(1, 6, 1, 7));\n\n\t\tassert.deepStrictEqual(m.validateRange(new Range(1, 7, 1, 7)), new Range(1, 7, 1, 7));\n\n\t\tm.dispose();\n\t});\n\n\ttest('modifyPosition', () => {\n\n\t\tconst m = createTextModel('line one\\nline two');\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 1), 0), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(0, 0), 0), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(30, 1), 0), new Position(2, 9));\n\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 1), 17), new Position(2, 9));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 1), 1), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 1), 3), new Position(1, 4));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), 10), new Position(2, 3));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 5), 13), new Position(2, 9));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), 16), new Position(2, 9));\n\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(2, 9), -17), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), -1), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 4), -3), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(2, 3), -10), new Position(1, 2));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(2, 9), -13), new Position(1, 5));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(2, 9), -16), new Position(1, 2));\n\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), 17), new Position(2, 9));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), 100), new Position(2, 9));\n\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), -2), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(1, 2), -100), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(2, 2), -100), new Position(1, 1));\n\t\tassert.deepStrictEqual(m.modifyPosition(new Position(2, 9), -18), new Position(1, 1));\n\n\t\tm.dispose();\n\t});\n\n\ttest('normalizeIndentation 1', () => {\n\t\tconst model = createTextModel('',\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tinsertSpaces: false\n\t\t\t}\n\t\t);\n\n\t\tassert.strictEqual(model.normalizeIndentation('\\t'), '\\t');\n\t\tassert.strictEqual(model.normalizeIndentation('    '), '\\t');\n\t\tassert.strictEqual(model.normalizeIndentation('   '), '   ');\n\t\tassert.strictEqual(model.normalizeIndentation('  '), '  ');\n\t\tassert.strictEqual(model.normalizeIndentation(' '), ' ');\n\t\tassert.strictEqual(model.normalizeIndentation(''), '');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t    '), '\\t\\t');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t   '), '\\t   ');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t  '), '\\t  ');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t '), '\\t ');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t'), '\\t');\n\n\t\tassert.strictEqual(model.normalizeIndentation('\\ta'), '\\ta');\n\t\tassert.strictEqual(model.normalizeIndentation('    a'), '\\ta');\n\t\tassert.strictEqual(model.normalizeIndentation('   a'), '   a');\n\t\tassert.strictEqual(model.normalizeIndentation('  a'), '  a');\n\t\tassert.strictEqual(model.normalizeIndentation(' a'), ' a');\n\t\tassert.strictEqual(model.normalizeIndentation('a'), 'a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t    a'), '\\t\\ta');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t   a'), '\\t   a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t  a'), '\\t  a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t a'), '\\t a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\ta'), '\\ta');\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('normalizeIndentation 2', () => {\n\t\tconst model = createTextModel('');\n\n\t\tassert.strictEqual(model.normalizeIndentation('\\ta'), '    a');\n\t\tassert.strictEqual(model.normalizeIndentation('    a'), '    a');\n\t\tassert.strictEqual(model.normalizeIndentation('   a'), '   a');\n\t\tassert.strictEqual(model.normalizeIndentation('  a'), '  a');\n\t\tassert.strictEqual(model.normalizeIndentation(' a'), ' a');\n\t\tassert.strictEqual(model.normalizeIndentation('a'), 'a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t    a'), '        a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t   a'), '       a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t  a'), '      a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\t a'), '     a');\n\t\tassert.strictEqual(model.normalizeIndentation(' \\ta'), '    a');\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('getLineFirstNonWhitespaceColumn', () => {\n\t\tconst model = createTextModel([\n\t\t\t'asd',\n\t\t\t' asd',\n\t\t\t'\\tasd',\n\t\t\t'  asd',\n\t\t\t'\\t\\tasd',\n\t\t\t' ',\n\t\t\t'  ',\n\t\t\t'\\t',\n\t\t\t'\\t\\t',\n\t\t\t'  \\tasd',\n\t\t\t'',\n\t\t\t''\n\t\t].join('\\n'));\n\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(1), 1, '1');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(2), 2, '2');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(3), 2, '3');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(4), 3, '4');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(5), 3, '5');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(6), 0, '6');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(7), 0, '7');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(8), 0, '8');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(9), 0, '9');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(10), 4, '10');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(11), 0, '11');\n\t\tassert.strictEqual(model.getLineFirstNonWhitespaceColumn(12), 0, '12');\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('getLineLastNonWhitespaceColumn', () => {\n\t\tconst model = createTextModel([\n\t\t\t'asd',\n\t\t\t'asd ',\n\t\t\t'asd\\t',\n\t\t\t'asd  ',\n\t\t\t'asd\\t\\t',\n\t\t\t' ',\n\t\t\t'  ',\n\t\t\t'\\t',\n\t\t\t'\\t\\t',\n\t\t\t'asd  \\t',\n\t\t\t'',\n\t\t\t''\n\t\t].join('\\n'));\n\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(1), 4, '1');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(2), 4, '2');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(3), 4, '3');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(4), 4, '4');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(5), 4, '5');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(6), 0, '6');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(7), 0, '7');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(8), 0, '8');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(9), 0, '9');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(10), 4, '10');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(11), 0, '11');\n\t\tassert.strictEqual(model.getLineLastNonWhitespaceColumn(12), 0, '12');\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('#50471. getValueInRange with invalid range', () => {\n\t\tconst m = createTextModel('My First Line\\r\\nMy Second Line\\r\\nMy Third Line');\n\t\tassert.strictEqual(m.getValueInRange(new Range(1, NaN, 1, 3)), 'My');\n\t\tassert.strictEqual(m.getValueInRange(new Range(NaN, NaN, NaN, NaN)), '');\n\t\tm.dispose();\n\t});\n\n\ttest('issue #168836: updating tabSize should also update indentSize when indentSize is set to \"tabSize\"', () => {\n\t\tconst m = createTextModel('some text', null, {\n\t\t\ttabSize: 2,\n\t\t\tindentSize: 'tabSize'\n\t\t});\n\t\tassert.strictEqual(m.getOptions().tabSize, 2);\n\t\tassert.strictEqual(m.getOptions().indentSize, 2);\n\t\tassert.strictEqual(m.getOptions().originalIndentSize, 'tabSize');\n\t\tm.updateOptions({\n\t\t\ttabSize: 4\n\t\t});\n\t\tassert.strictEqual(m.getOptions().tabSize, 4);\n\t\tassert.strictEqual(m.getOptions().indentSize, 4);\n\t\tassert.strictEqual(m.getOptions().originalIndentSize, 'tabSize');\n\t\tm.dispose();\n\t});\n});\n\nsuite('TextModel.mightContainRTL', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('nope', () => {\n\t\tconst model = createTextModel('hello world!');\n\t\tassert.strictEqual(model.mightContainRTL(), false);\n\t\tmodel.dispose();\n\t});\n\n\ttest('yes', () => {\n\t\tconst model = createTextModel('Hello,\\n\u05D6\u05D5\u05D4\u05D9 \u05E2\u05D5\u05D1\u05D3\u05D4 \u05DE\u05D1\u05D5\u05E1\u05E1\u05EA \u05E9\u05D3\u05E2\u05EA\u05D5');\n\t\tassert.strictEqual(model.mightContainRTL(), true);\n\t\tmodel.dispose();\n\t});\n\n\ttest('setValue resets 1', () => {\n\t\tconst model = createTextModel('hello world!');\n\t\tassert.strictEqual(model.mightContainRTL(), false);\n\t\tmodel.setValue('Hello,\\n\u05D6\u05D5\u05D4\u05D9 \u05E2\u05D5\u05D1\u05D3\u05D4 \u05DE\u05D1\u05D5\u05E1\u05E1\u05EA \u05E9\u05D3\u05E2\u05EA\u05D5');\n\t\tassert.strictEqual(model.mightContainRTL(), true);\n\t\tmodel.dispose();\n\t});\n\n\ttest('setValue resets 2', () => {\n\t\tconst model = createTextModel('Hello,\\n\u0647\u0646\u0627\u0643 \u062D\u0642\u064A\u0642\u0629 \u0645\u062B\u0628\u062A\u0629 \u0645\u0646\u0630 \u0632\u0645\u0646 \u0637\u0648\u064A\u0644');\n\t\tassert.strictEqual(model.mightContainRTL(), true);\n\t\tmodel.setValue('hello world!');\n\t\tassert.strictEqual(model.mightContainRTL(), false);\n\t\tmodel.dispose();\n\t});\n\n});\n\nsuite('TextModel.createSnapshot', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('empty file', () => {\n\t\tconst model = createTextModel('');\n\t\tconst snapshot = model.createSnapshot();\n\t\tassert.strictEqual(snapshot.read(), null);\n\t\tmodel.dispose();\n\t});\n\n\ttest('file with BOM', () => {\n\t\tconst model = createTextModel(UTF8_BOM_CHARACTER + 'Hello');\n\t\tassert.strictEqual(model.getLineContent(1), 'Hello');\n\t\tconst snapshot = model.createSnapshot(true);\n\t\tassert.strictEqual(snapshot.read(), UTF8_BOM_CHARACTER + 'Hello');\n\t\tassert.strictEqual(snapshot.read(), null);\n\t\tmodel.dispose();\n\t});\n\n\ttest('regular file', () => {\n\t\tconst model = createTextModel('My First Line\\n\\t\\tMy Second Line\\n    Third Line\\n\\n1');\n\t\tconst snapshot = model.createSnapshot();\n\t\tassert.strictEqual(snapshot.read(), 'My First Line\\n\\t\\tMy Second Line\\n    Third Line\\n\\n1');\n\t\tassert.strictEqual(snapshot.read(), null);\n\t\tmodel.dispose();\n\t});\n\n\ttest('large file', () => {\n\t\tconst lines: string[] = [];\n\t\tfor (let i = 0; i < 1000; i++) {\n\t\t\tlines[i] = 'Just some text that is a bit long such that it can consume some memory';\n\t\t}\n\t\tconst text = lines.join('\\n');\n\n\t\tconst model = createTextModel(text);\n\t\tconst snapshot = model.createSnapshot();\n\t\tlet actual = '';\n\n\t\t// 70999 length => at most 2 read calls are necessary\n\t\tconst tmp1 = snapshot.read();\n\t\tassert.ok(tmp1);\n\t\tactual += tmp1;\n\n\t\tconst tmp2 = snapshot.read();\n\t\tif (tmp2 === null) {\n\t\t\t// all good\n\t\t} else {\n\t\t\tactual += tmp2;\n\t\t\tassert.strictEqual(snapshot.read(), null);\n\t\t}\n\n\t\tassert.strictEqual(actual, text);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('issue #119632: invalid range', () => {\n\t\tconst model = createTextModel('hello world!');\n\t\tconst actual = model._validateRangeRelaxedNoAllocations(new Range(<any>undefined, 0, <any>undefined, 1));\n\t\tassert.deepStrictEqual(actual, new Range(1, 1, 1, 1));\n\t\tmodel.dispose();\n\t});\n\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,+CAA+C;AACxD,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,WAAW,wBAAwB;AAC5C,SAAS,qBAAqB,uBAAuB;AACrD,SAAS,6BAA6B;AAEtC,SAAS,qBAAqB,qBAA8B,gBAAwB,sBAA+B,iBAAyB,MAAgB,KAAoB;AAC/K,QAAM,IAAI;AAAA,IACT,KAAK,KAAK,IAAI;AAAA,IACd;AAAA,IACA;AAAA,MACC,SAAS;AAAA,MACT,cAAc;AAAA,MACd,mBAAmB;AAAA,IACpB;AAAA,EACD;AACA,QAAM,IAAI,EAAE,WAAW;AACvB,IAAE,QAAQ;AAEV,SAAO,YAAY,EAAE,cAAc,sBAAsB,GAAG;AAC5D,SAAO,YAAY,EAAE,SAAS,iBAAiB,GAAG;AACnD;AAfS;AAiBT,SAAS,YAAY,sBAA2C,iBAAgD,MAAgB,KAAoB;AACnJ,MAAI,OAAO,yBAAyB,aAAa;AAEhD,QAAI,OAAO,oBAAoB,aAAa;AAE3C,2BAAqB,MAAM,OAAO,MAAM,OAAO,MAAM,GAAG;AACxD,2BAAqB,OAAO,OAAO,OAAO,OAAO,MAAM,GAAG;AAAA,IAC3D,WAAW,OAAO,oBAAoB,UAAU;AAE/C,2BAAqB,MAAM,OAAO,MAAM,iBAAiB,MAAM,GAAG;AAClE,2BAAqB,OAAO,OAAO,OAAO,iBAAiB,MAAM,GAAG;AAAA,IACrE,OAAO;AAEN,2BAAqB,MAAM,OAAO,MAAM,gBAAgB,CAAC,GAAG,MAAM,GAAG;AACrE,2BAAqB,OAAO,OAAO,OAAO,OAAO,MAAM,GAAG;AAAA,IAC3D;AAAA,EACD,OAAO;AAEN,QAAI,OAAO,oBAAoB,aAAa;AAE3C,2BAAqB,MAAM,OAAO,sBAAsB,OAAO,MAAM,GAAG;AACxE,2BAAqB,OAAO,OAAO,sBAAsB,OAAO,MAAM,GAAG;AAAA,IAC1E,WAAW,OAAO,oBAAoB,UAAU;AAE/C,2BAAqB,MAAM,OAAO,sBAAsB,iBAAiB,MAAM,GAAG;AAClF,2BAAqB,OAAO,OAAO,sBAAsB,iBAAiB,MAAM,GAAG;AAAA,IACpF,OAAO;AAEN,UAAI,yBAAyB,MAAM;AAClC,6BAAqB,MAAM,OAAO,sBAAsB,gBAAgB,CAAC,GAAG,MAAM,GAAG;AACrF,6BAAqB,OAAO,OAAO,sBAAsB,gBAAgB,CAAC,GAAG,MAAM,GAAG;AAAA,MACvF,OAAO;AACN,6BAAqB,MAAM,OAAO,sBAAsB,OAAO,MAAM,GAAG;AACxE,6BAAqB,OAAO,OAAO,sBAAsB,OAAO,MAAM,GAAG;AAAA,MAC1E;AAAA,IACD;AAAA,EACD;AACD;AArCS;AAuCT,MAAM,4BAA4B,MAAM;AAEvC,0CAAwC;AASxC,WAAS,4BAA4B,MAAc,UAAiC;AACnF,UAAM,EAAE,YAAY,WAAW,IAAI,iBAAiB,MAAM,UAAU,yBAAyB,UAAU;AACvG,UAAM,SAA0B;AAAA,MAC/B,KAAK,WAAW,OAAO;AAAA,MACvB,OAAO,WAAW,gBAAgB;AAAA,MAClC,aAAa,WAAW,gBAAgB;AAAA,MACxC,cAAc,CAAC,WAAW,0BAA0B;AAAA,IACrD;AACA,WAAO,gBAAgB,QAAQ,QAAQ;AACvC,eAAW,QAAQ;AAAA,EACpB;AAVS;AAYT,OAAK,iBAAiB,MAAM;AAC3B;AAAA,MAA4B;AAAA,MAC3B;AAAA,QACC,KAAK;AAAA,QACL,OAAO;AAAA,UACN;AAAA,QACD;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,kBAAkB,MAAM;AAC5B;AAAA,MAA4B;AAAA,MAC3B;AAAA,QACC,KAAK;AAAA,QACL,OAAO;AAAA,UACN;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B;AAAA,MAA4B;AAAA,MAC3B;AAAA,QACC,KAAK;AAAA,QACL,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B;AAAA,MAA4B;AAAA,MAC3B;AAAA,QACC,KAAK;AAAA,QACL,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B;AAAA,MAA4B;AAAA,MAC3B;AAAA,QACC,KAAK;AAAA,QACL,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AAEF,CAAC;AAED,MAAM,4BAA4B,MAAM;AAEvC,0CAAwC;AAExC,OAAK,4CAA4C,MAAM;AAOtD,UAAM,cAAc,IAAI,gBAAgB;AACxC,UAAM,uBAA8C,oBAAoB,WAAW;AACnF,UAAM,YAAY,YAAY,IAAI,qBAAqB,eAAe,WAAW,IAAI,uBAAuB,UAAU,0BAA0B,IAAI,CAAC;AACrJ,WAAO,YAAY,UAAU,cAAc,GAAG,KAAK;AACnD,gBAAY,QAAQ;AAAA,EACrB,CAAC;AAED,OAAK,yBAAyB,MAAM;AAEnC,QAAI,IAAI,gBAAgB,kDAAkD;AAC1E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM;AAC5E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM;AAC7E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM;AAC7E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,gBAAgB,MAAM;AAC1F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,oBAAoB,MAAM;AAC7F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,mBAAmB,MAAM;AAC5F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,oBAAoB,MAAM;AAC7F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,GAAI,CAAC,GAAG,iCAAiC,MAAM;AAC7G,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,qCAAqC,MAAM;AAC9G,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,GAAI,CAAC,GAAG,kDAAkD,MAAM;AAC9H,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,CAAC,GAAG,mDAAmD,MAAM;AAClI,MAAE,QAAQ;AAEV,QAAI,gBAAgB,8CAA8C;AAClE,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM;AAC5E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM;AAC7E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM;AAC7E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,gBAAgB,MAAM;AAC1F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,kBAAkB,MAAM;AAC3F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,iBAAiB,MAAM;AAC1F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,kBAAkB,MAAM;AAC3F,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,GAAI,CAAC,GAAG,+BAA+B,MAAM;AAC3G,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,iCAAiC,MAAM;AAC1G,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,GAAI,CAAC,GAAG,8CAA8C,MAAM;AAC1H,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,CAAC,GAAG,+CAA+C,MAAM;AAC9H,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,uCAAuC,MAAM;AAEjD,QAAI,IAAI,gBAAgB,kDAAkD;AAC1E,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,oBAAoB,WAAW,GAAG,oBAAoB,MAAM;AAC9H,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,oBAAoB,IAAI,GAAG,oBAAoB,MAAM;AACvH,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,oBAAoB,EAAE,GAAG,kBAAkB,MAAM;AACnH,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,GAAG,oBAAoB,WAAW,GAAG,mDAAmD,MAAM;AACnK,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,GAAG,oBAAoB,IAAI,GAAG,mDAAmD,MAAM;AAC5J,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,GAAG,oBAAoB,EAAE,GAAG,+CAA+C,MAAM;AACtJ,MAAE,QAAQ;AAEV,QAAI,gBAAgB,8CAA8C;AAClE,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,oBAAoB,WAAW,GAAG,kBAAkB,MAAM;AAC5H,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,oBAAoB,EAAE,GAAG,kBAAkB,MAAM;AACnH,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,oBAAoB,IAAI,GAAG,oBAAoB,MAAM;AACvH,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,GAAG,oBAAoB,WAAW,GAAG,+CAA+C,MAAM;AAC/J,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,GAAG,oBAAoB,EAAE,GAAG,+CAA+C,MAAM;AACtJ,WAAO,YAAY,EAAE,sBAAsB,IAAI,MAAM,GAAG,GAAG,KAAM,GAAI,GAAG,oBAAoB,IAAI,GAAG,mDAAmD,MAAM;AAC5J,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,uBAAuB,MAAM;AAEjC,gBAAY,QAAW,QAAW;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AAEb,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,kBAAkB;AAErB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,KAAK;AAER,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,OAAO;AAEV,gBAAY,QAAW,CAAC,CAAC,GAAG;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,YAAY;AACf,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,YAAY;AACf,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,YAAY;AACf,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,YAAY;AACf,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,YAAY;AACf,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,iBAAiB;AAEpB,gBAAY,QAAW,QAAW;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,kDAAkD;AACrD,gBAAY,MAAM,QAAW;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,WAAW;AACd,gBAAY,QAAW,QAAW;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,8BAA+B;AAClC,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AACb,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AACb,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,eAAe;AAClB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,KAAK;AAER,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,KAAK;AACR,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AACb,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AACb,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AACb,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,UAAU;AACb,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,KAAK;AACR,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,eAAe;AAClB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,oBAAoB;AACvB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,eAAe;AAClB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,eAAe;AAClB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,eAAe;AAClB,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,oBAAoB;AACvB,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,oBAAoB;AACvB,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,IACD,GAAG,oBAAoB;AAAA,EACxB,CAAC;AAED,OAAK,uDAAuD,MAAM;AACjE,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8CAA8C,MAAM;AACxD,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8CAA8C,MAAM;AACxD,gBAAY,OAAO,QAAW;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8CAA8C,MAAM;AAExD,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAGD,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAGD,yBAAqB,MAAM,GAAG,MAAM,GAAG;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAID,yBAAqB,MAAM,GAAG,MAAM,GAAG;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAED,yBAAqB,MAAM,GAAG,MAAM,GAAG;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8CAA8C,MAAM;AACxD,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,IACD,CAAC;AACD,gBAAY,MAAM,GAAG;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,oBAAoB,MAAM;AAE9B,UAAM,IAAI,gBAAgB,oBAAoB;AAE9C,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAElF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAElF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAElF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,IAAI,EAAE,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEnF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,UAAU,IAAI,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAC3F,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,OAAO,WAAW,OAAO,SAAS,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAE/G,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,OAAO,WAAW,OAAO,SAAS,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAC/G,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,QAAQ,IAAI,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEzF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,sDAAsD,MAAM;AAEhE,UAAM,IAAI,gBAAgB,aAAM;AAEhC,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAElF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAElF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,UAAU,IAAI,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAC3F,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,OAAO,WAAW,OAAO,SAAS,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAE/G,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,OAAO,WAAW,OAAO,SAAS,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAC/G,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,QAAQ,IAAI,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEzF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,sDAAsD,MAAM;AAEhE,UAAM,IAAI,gBAAgB,sBAAQ;AAElC,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACjF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEjF,MAAE,QAAQ;AAAA,EAEX,CAAC;AAED,OAAK,gCAAgC,MAAM;AAE1C,UAAM,IAAI,gBAAgB,oBAAoB;AAE9C,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEnF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACrF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEnF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,gDAAgD,MAAM;AAC1D,UAAM,IAAI,gBAAgB,oBAAoB;AAE9C,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AACxF,WAAO,gBAAgB,EAAE,iBAAiB,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG;AAExF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,6CAA6C,MAAM;AACvD,UAAM,IAAI,gBAAgB,oBAAoB;AAE9C,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAC5F,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAE5F,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,mDAAmD,MAAM;AAE7D,UAAM,IAAI,gBAAgB,aAAM;AAEhC,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,mDAAmD,MAAM;AAE7D,UAAM,IAAI,gBAAgB,sBAAQ;AAElC,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AAEpF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,kBAAkB,MAAM;AAE5B,UAAM,IAAI,gBAAgB,oBAAoB;AAC9C,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAClF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAClF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAClF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAClF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACpF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEpF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACnF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACrF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AACrF,WAAO,gBAAgB,EAAE,eAAe,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC;AAEpF,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,0BAA0B,MAAM;AACpC,UAAM,QAAQ;AAAA,MAAgB;AAAA,MAC7B;AAAA,MACA;AAAA,QACC,cAAc;AAAA,MACf;AAAA,IACD;AAEA,WAAO,YAAY,MAAM,qBAAqB,GAAI,GAAG,GAAI;AACzD,WAAO,YAAY,MAAM,qBAAqB,MAAM,GAAG,GAAI;AAC3D,WAAO,YAAY,MAAM,qBAAqB,KAAK,GAAG,KAAK;AAC3D,WAAO,YAAY,MAAM,qBAAqB,IAAI,GAAG,IAAI;AACzD,WAAO,YAAY,MAAM,qBAAqB,GAAG,GAAG,GAAG;AACvD,WAAO,YAAY,MAAM,qBAAqB,EAAE,GAAG,EAAE;AACrD,WAAO,YAAY,MAAM,qBAAqB,QAAS,GAAG,IAAM;AAChE,WAAO,YAAY,MAAM,qBAAqB,OAAQ,GAAG,MAAO;AAChE,WAAO,YAAY,MAAM,qBAAqB,MAAO,GAAG,KAAM;AAC9D,WAAO,YAAY,MAAM,qBAAqB,KAAM,GAAG,IAAK;AAC5D,WAAO,YAAY,MAAM,qBAAqB,IAAK,GAAG,GAAI;AAE1D,WAAO,YAAY,MAAM,qBAAqB,IAAK,GAAG,IAAK;AAC3D,WAAO,YAAY,MAAM,qBAAqB,OAAO,GAAG,IAAK;AAC7D,WAAO,YAAY,MAAM,qBAAqB,MAAM,GAAG,MAAM;AAC7D,WAAO,YAAY,MAAM,qBAAqB,KAAK,GAAG,KAAK;AAC3D,WAAO,YAAY,MAAM,qBAAqB,IAAI,GAAG,IAAI;AACzD,WAAO,YAAY,MAAM,qBAAqB,GAAG,GAAG,GAAG;AACvD,WAAO,YAAY,MAAM,qBAAqB,SAAU,GAAG,KAAO;AAClE,WAAO,YAAY,MAAM,qBAAqB,QAAS,GAAG,OAAQ;AAClE,WAAO,YAAY,MAAM,qBAAqB,OAAQ,GAAG,MAAO;AAChE,WAAO,YAAY,MAAM,qBAAqB,MAAO,GAAG,KAAM;AAC9D,WAAO,YAAY,MAAM,qBAAqB,KAAM,GAAG,IAAK;AAE5D,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,0BAA0B,MAAM;AACpC,UAAM,QAAQ,gBAAgB,EAAE;AAEhC,WAAO,YAAY,MAAM,qBAAqB,IAAK,GAAG,OAAO;AAC7D,WAAO,YAAY,MAAM,qBAAqB,OAAO,GAAG,OAAO;AAC/D,WAAO,YAAY,MAAM,qBAAqB,MAAM,GAAG,MAAM;AAC7D,WAAO,YAAY,MAAM,qBAAqB,KAAK,GAAG,KAAK;AAC3D,WAAO,YAAY,MAAM,qBAAqB,IAAI,GAAG,IAAI;AACzD,WAAO,YAAY,MAAM,qBAAqB,GAAG,GAAG,GAAG;AACvD,WAAO,YAAY,MAAM,qBAAqB,SAAU,GAAG,WAAW;AACtE,WAAO,YAAY,MAAM,qBAAqB,QAAS,GAAG,UAAU;AACpE,WAAO,YAAY,MAAM,qBAAqB,OAAQ,GAAG,SAAS;AAClE,WAAO,YAAY,MAAM,qBAAqB,MAAO,GAAG,QAAQ;AAChE,WAAO,YAAY,MAAM,qBAAqB,KAAM,GAAG,OAAO;AAE9D,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C,UAAM,QAAQ,gBAAgB;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI,CAAC;AAEZ,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,CAAC,GAAG,GAAG,GAAG;AACnE,WAAO,YAAY,MAAM,gCAAgC,EAAE,GAAG,GAAG,IAAI;AACrE,WAAO,YAAY,MAAM,gCAAgC,EAAE,GAAG,GAAG,IAAI;AACrE,WAAO,YAAY,MAAM,gCAAgC,EAAE,GAAG,GAAG,IAAI;AAErE,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C,UAAM,QAAQ,gBAAgB;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI,CAAC;AAEZ,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,CAAC,GAAG,GAAG,GAAG;AAClE,WAAO,YAAY,MAAM,+BAA+B,EAAE,GAAG,GAAG,IAAI;AACpE,WAAO,YAAY,MAAM,+BAA+B,EAAE,GAAG,GAAG,IAAI;AACpE,WAAO,YAAY,MAAM,+BAA+B,EAAE,GAAG,GAAG,IAAI;AAEpE,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,8CAA8C,MAAM;AACxD,UAAM,IAAI,gBAAgB,kDAAkD;AAC5E,WAAO,YAAY,EAAE,gBAAgB,IAAI,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI;AACnE,WAAO,YAAY,EAAE,gBAAgB,IAAI,MAAM,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,EAAE;AACvE,MAAE,QAAQ;AAAA,EACX,CAAC;AAED,OAAK,qGAAqG,MAAM;AAC/G,UAAM,IAAI,gBAAgB,aAAa,MAAM;AAAA,MAC5C,SAAS;AAAA,MACT,YAAY;AAAA,IACb,CAAC;AACD,WAAO,YAAY,EAAE,WAAW,EAAE,SAAS,CAAC;AAC5C,WAAO,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC;AAC/C,WAAO,YAAY,EAAE,WAAW,EAAE,oBAAoB,SAAS;AAC/D,MAAE,cAAc;AAAA,MACf,SAAS;AAAA,IACV,CAAC;AACD,WAAO,YAAY,EAAE,WAAW,EAAE,SAAS,CAAC;AAC5C,WAAO,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC;AAC/C,WAAO,YAAY,EAAE,WAAW,EAAE,oBAAoB,SAAS;AAC/D,MAAE,QAAQ;AAAA,EACX,CAAC;AACF,CAAC;AAED,MAAM,6BAA6B,MAAM;AAExC,0CAAwC;AAExC,OAAK,QAAQ,MAAM;AAClB,UAAM,QAAQ,gBAAgB,cAAc;AAC5C,WAAO,YAAY,MAAM,gBAAgB,GAAG,KAAK;AACjD,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,OAAO,MAAM;AACjB,UAAM,QAAQ,gBAAgB,qIAAiC;AAC/D,WAAO,YAAY,MAAM,gBAAgB,GAAG,IAAI;AAChD,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,UAAM,QAAQ,gBAAgB,cAAc;AAC5C,WAAO,YAAY,MAAM,gBAAgB,GAAG,KAAK;AACjD,UAAM,SAAS,qIAAiC;AAChD,WAAO,YAAY,MAAM,gBAAgB,GAAG,IAAI;AAChD,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,UAAM,QAAQ,gBAAgB,+JAAuC;AACrE,WAAO,YAAY,MAAM,gBAAgB,GAAG,IAAI;AAChD,UAAM,SAAS,cAAc;AAC7B,WAAO,YAAY,MAAM,gBAAgB,GAAG,KAAK;AACjD,UAAM,QAAQ;AAAA,EACf,CAAC;AAEF,CAAC;AAED,MAAM,4BAA4B,MAAM;AAEvC,0CAAwC;AAExC,OAAK,cAAc,MAAM;AACxB,UAAM,QAAQ,gBAAgB,EAAE;AAChC,UAAM,WAAW,MAAM,eAAe;AACtC,WAAO,YAAY,SAAS,KAAK,GAAG,IAAI;AACxC,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,UAAM,QAAQ,gBAAgB,qBAAqB,OAAO;AAC1D,WAAO,YAAY,MAAM,eAAe,CAAC,GAAG,OAAO;AACnD,UAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,WAAO,YAAY,SAAS,KAAK,GAAG,qBAAqB,OAAO;AAChE,WAAO,YAAY,SAAS,KAAK,GAAG,IAAI;AACxC,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,gBAAgB,MAAM;AAC1B,UAAM,QAAQ,gBAAgB,sDAAwD;AACtF,UAAM,WAAW,MAAM,eAAe;AACtC,WAAO,YAAY,SAAS,KAAK,GAAG,sDAAwD;AAC5F,WAAO,YAAY,SAAS,KAAK,GAAG,IAAI;AACxC,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,cAAc,MAAM;AACxB,UAAM,QAAkB,CAAC;AACzB,aAAS,IAAI,GAAG,IAAI,KAAM,KAAK;AAC9B,YAAM,CAAC,IAAI;AAAA,IACZ;AACA,UAAM,OAAO,MAAM,KAAK,IAAI;AAE5B,UAAM,QAAQ,gBAAgB,IAAI;AAClC,UAAM,WAAW,MAAM,eAAe;AACtC,QAAI,SAAS;AAGb,UAAM,OAAO,SAAS,KAAK;AAC3B,WAAO,GAAG,IAAI;AACd,cAAU;AAEV,UAAM,OAAO,SAAS,KAAK;AAC3B,QAAI,SAAS,MAAM;AAAA,IAEnB,OAAO;AACN,gBAAU;AACV,aAAO,YAAY,SAAS,KAAK,GAAG,IAAI;AAAA,IACzC;AAEA,WAAO,YAAY,QAAQ,IAAI;AAE/B,UAAM,QAAQ;AAAA,EACf,CAAC;AAED,OAAK,gCAAgC,MAAM;AAC1C,UAAM,QAAQ,gBAAgB,cAAc;AAC5C,UAAM,SAAS,MAAM,mCAAmC,IAAI,MAAW,QAAW,GAAQ,QAAW,CAAC,CAAC;AACvG,WAAO,gBAAgB,QAAQ,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;AACpD,UAAM,QAAQ;AAAA,EACf,CAAC;AAEF,CAAC;",
  "names": []
}
