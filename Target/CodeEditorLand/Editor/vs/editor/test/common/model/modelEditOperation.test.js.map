{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/modelEditOperation.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TextModel } from '../../../common/model/textModel.js';\nimport { createTextModel } from '../testTextModel.js';\n\nsuite('Editor Model - Model Edit Operation', () => {\n\tconst LINE1 = 'My First Line';\n\tconst LINE2 = '\\t\\tMy Second Line';\n\tconst LINE3 = '    Third Line';\n\tconst LINE4 = '';\n\tconst LINE5 = '1';\n\n\tlet model: TextModel;\n\n\tsetup(() => {\n\t\tconst text =\n\t\t\tLINE1 + '\\r\\n' +\n\t\t\tLINE2 + '\\n' +\n\t\t\tLINE3 + '\\n' +\n\t\t\tLINE4 + '\\r\\n' +\n\t\t\tLINE5;\n\t\tmodel = createTextModel(text);\n\t});\n\n\tteardown(() => {\n\t\tmodel.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createSingleEditOp(text: string, positionLineNumber: number, positionColumn: number, selectionLineNumber: number = positionLineNumber, selectionColumn: number = positionColumn): ISingleEditOperation {\n\t\tconst range = new Range(\n\t\t\tselectionLineNumber,\n\t\t\tselectionColumn,\n\t\t\tpositionLineNumber,\n\t\t\tpositionColumn\n\t\t);\n\n\t\treturn {\n\t\t\trange: range,\n\t\t\ttext: text,\n\t\t\tforceMoveMarkers: false\n\t\t};\n\t}\n\n\tfunction assertSingleEditOp(singleEditOp: ISingleEditOperation, editedLines: string[]) {\n\t\tconst editOp = [singleEditOp];\n\n\t\tconst inverseEditOp = model.applyEdits(editOp, true);\n\n\t\tassert.strictEqual(model.getLineCount(), editedLines.length);\n\t\tfor (let i = 0; i < editedLines.length; i++) {\n\t\t\tassert.strictEqual(model.getLineContent(i + 1), editedLines[i]);\n\t\t}\n\n\t\tconst originalOp = model.applyEdits(inverseEditOp, true);\n\n\t\tassert.strictEqual(model.getLineCount(), 5);\n\t\tassert.strictEqual(model.getLineContent(1), LINE1);\n\t\tassert.strictEqual(model.getLineContent(2), LINE2);\n\t\tassert.strictEqual(model.getLineContent(3), LINE3);\n\t\tassert.strictEqual(model.getLineContent(4), LINE4);\n\t\tassert.strictEqual(model.getLineContent(5), LINE5);\n\n\t\tconst simplifyEdit = (edit: ISingleEditOperation) => {\n\t\t\treturn {\n\t\t\t\trange: edit.range,\n\t\t\t\ttext: edit.text,\n\t\t\t\tforceMoveMarkers: edit.forceMoveMarkers || false\n\t\t\t};\n\t\t};\n\t\tassert.deepStrictEqual(originalOp.map(simplifyEdit), editOp.map(simplifyEdit));\n\t}\n\n\ttest('Insert inline', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp('a', 1, 1),\n\t\t\t[\n\t\t\t\t'aMy First Line',\n\t\t\t\tLINE2,\n\t\t\t\tLINE3,\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace inline/inline 1', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp(' incredibly awesome', 1, 3),\n\t\t\t[\n\t\t\t\t'My incredibly awesome First Line',\n\t\t\t\tLINE2,\n\t\t\t\tLINE3,\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace inline/inline 2', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp(' with text at the end.', 1, 14),\n\t\t\t[\n\t\t\t\t'My First Line with text at the end.',\n\t\t\t\tLINE2,\n\t\t\t\tLINE3,\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace inline/inline 3', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp('My new First Line.', 1, 1, 1, 14),\n\t\t\t[\n\t\t\t\t'My new First Line.',\n\t\t\t\tLINE2,\n\t\t\t\tLINE3,\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace inline/multi line 1', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp('My new First Line.', 1, 1, 3, 15),\n\t\t\t[\n\t\t\t\t'My new First Line.',\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace inline/multi line 2', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp('My new First Line.', 1, 2, 3, 15),\n\t\t\t[\n\t\t\t\t'MMy new First Line.',\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace inline/multi line 3', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp('My new First Line.', 1, 2, 3, 2),\n\t\t\t[\n\t\t\t\t'MMy new First Line.   Third Line',\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Replace muli line/multi line', () => {\n\t\tassertSingleEditOp(\n\t\t\tcreateSingleEditOp('1\\n2\\n3\\n4\\n', 1, 1),\n\t\t\t[\n\t\t\t\t'1',\n\t\t\t\t'2',\n\t\t\t\t'3',\n\t\t\t\t'4',\n\t\t\t\tLINE1,\n\t\t\t\tLINE2,\n\t\t\t\tLINE3,\n\t\t\t\tLINE4,\n\t\t\t\tLINE5\n\t\t\t]\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
