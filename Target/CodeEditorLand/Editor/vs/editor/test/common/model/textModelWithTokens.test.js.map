{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/textModelWithTokens.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IFoundBracket } from '../../../common/textModelBracketPairs.js';\nimport { TextModel } from '../../../common/model/textModel.js';\nimport { ITokenizationSupport, TokenizationRegistry, EncodedTokenizationResult } from '../../../common/languages.js';\nimport { StandardTokenType, MetadataConsts } from '../../../common/encodedTokenAttributes.js';\nimport { CharacterPair } from '../../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { NullState } from '../../../common/languages/nullTokenize.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { TestLineToken } from '../core/testLineToken.js';\nimport { createModelServices, createTextModel, instantiateTextModel } from '../testTextModel.js';\nimport { TestInstantiationService } from '../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nfunction createTextModelWithBrackets(disposables: DisposableStore, text: string, brackets: CharacterPair[]): TextModel {\n\tconst languageId = 'bracketMode2';\n\tconst instantiationService = createModelServices(disposables);\n\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\tconst languageService = instantiationService.get(ILanguageService);\n\n\tdisposables.add(languageService.registerLanguage({ id: languageId }));\n\tdisposables.add(languageConfigurationService.register(languageId, { brackets }));\n\n\treturn disposables.add(instantiateTextModel(instantiationService, text, languageId));\n}\n\nsuite('TextModelWithTokens', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction testBrackets(contents: string[], brackets: CharacterPair[]): void {\n\t\tconst languageId = 'testMode';\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposables);\n\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\t\tdisposables.add(languageService.registerLanguage({ id: languageId }));\n\t\tdisposables.add(languageConfigurationService.register(languageId, {\n\t\t\tbrackets: brackets\n\t\t}));\n\n\n\t\tfunction toRelaxedFoundBracket(a: IFoundBracket | null) {\n\t\t\tif (!a) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\trange: a.range.toString(),\n\t\t\t\tinfo: a.bracketInfo,\n\t\t\t};\n\t\t}\n\n\t\tconst charIsBracket: { [char: string]: boolean } = {};\n\t\tconst charIsOpenBracket: { [char: string]: boolean } = {};\n\t\tconst openForChar: { [char: string]: string } = {};\n\t\tconst closeForChar: { [char: string]: string } = {};\n\t\tbrackets.forEach((b) => {\n\t\t\tcharIsBracket[b[0]] = true;\n\t\t\tcharIsBracket[b[1]] = true;\n\n\t\t\tcharIsOpenBracket[b[0]] = true;\n\t\t\tcharIsOpenBracket[b[1]] = false;\n\n\t\t\topenForChar[b[0]] = b[0];\n\t\t\tcloseForChar[b[0]] = b[1];\n\n\t\t\topenForChar[b[1]] = b[0];\n\t\t\tcloseForChar[b[1]] = b[1];\n\t\t});\n\n\t\tconst expectedBrackets: IFoundBracket[] = [];\n\t\tfor (let lineIndex = 0; lineIndex < contents.length; lineIndex++) {\n\t\t\tconst lineText = contents[lineIndex];\n\n\t\t\tfor (let charIndex = 0; charIndex < lineText.length; charIndex++) {\n\t\t\t\tconst ch = lineText.charAt(charIndex);\n\t\t\t\tif (charIsBracket[ch]) {\n\t\t\t\t\texpectedBrackets.push({\n\t\t\t\t\t\tbracketInfo: languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew.getBracketInfo(ch)!,\n\t\t\t\t\t\trange: new Range(lineIndex + 1, charIndex + 1, lineIndex + 1, charIndex + 2)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, contents.join('\\n'), languageId));\n\n\t\t// findPrevBracket\n\t\t{\n\t\t\tlet expectedBracketIndex = expectedBrackets.length - 1;\n\t\t\tlet currentExpectedBracket = expectedBracketIndex >= 0 ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\tfor (let lineNumber = contents.length; lineNumber >= 1; lineNumber--) {\n\t\t\t\tconst lineText = contents[lineNumber - 1];\n\n\t\t\t\tfor (let column = lineText.length + 1; column >= 1; column--) {\n\n\t\t\t\t\tif (currentExpectedBracket) {\n\t\t\t\t\t\tif (lineNumber === currentExpectedBracket.range.startLineNumber && column < currentExpectedBracket.range.endColumn) {\n\t\t\t\t\t\t\texpectedBracketIndex--;\n\t\t\t\t\t\t\tcurrentExpectedBracket = expectedBracketIndex >= 0 ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst actual = model.bracketPairs.findPrevBracket({\n\t\t\t\t\t\tlineNumber: lineNumber,\n\t\t\t\t\t\tcolumn: column\n\t\t\t\t\t});\n\n\t\t\t\t\tassert.deepStrictEqual(toRelaxedFoundBracket(actual), toRelaxedFoundBracket(currentExpectedBracket), 'findPrevBracket of ' + lineNumber + ', ' + column);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// findNextBracket\n\t\t{\n\t\t\tlet expectedBracketIndex = 0;\n\t\t\tlet currentExpectedBracket = expectedBracketIndex < expectedBrackets.length ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\tfor (let lineNumber = 1; lineNumber <= contents.length; lineNumber++) {\n\t\t\t\tconst lineText = contents[lineNumber - 1];\n\n\t\t\t\tfor (let column = 1; column <= lineText.length + 1; column++) {\n\n\t\t\t\t\tif (currentExpectedBracket) {\n\t\t\t\t\t\tif (lineNumber === currentExpectedBracket.range.startLineNumber && column > currentExpectedBracket.range.startColumn) {\n\t\t\t\t\t\t\texpectedBracketIndex++;\n\t\t\t\t\t\t\tcurrentExpectedBracket = expectedBracketIndex < expectedBrackets.length ? expectedBrackets[expectedBracketIndex] : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst actual = model.bracketPairs.findNextBracket({\n\t\t\t\t\t\tlineNumber: lineNumber,\n\t\t\t\t\t\tcolumn: column\n\t\t\t\t\t});\n\n\t\t\t\t\tassert.deepStrictEqual(toRelaxedFoundBracket(actual), toRelaxedFoundBracket(currentExpectedBracket), 'findNextBracket of ' + lineNumber + ', ' + column);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdisposables.dispose();\n\t}\n\n\ttest('brackets1', () => {\n\t\ttestBrackets([\n\t\t\t'if (a == 3) { return (7 * (a + 5)); }'\n\t\t], [\n\t\t\t['{', '}'],\n\t\t\t['[', ']'],\n\t\t\t['(', ')']\n\t\t]);\n\t});\n});\n\nfunction assertIsNotBracket(model: TextModel, lineNumber: number, column: number) {\n\tconst match = model.bracketPairs.matchBracket(new Position(lineNumber, column));\n\tassert.strictEqual(match, null, 'is not matching brackets at ' + lineNumber + ', ' + column);\n}\n\nfunction assertIsBracket(model: TextModel, testPosition: Position, expected: [Range, Range]): void {\n\texpected.sort(Range.compareRangesUsingStarts);\n\tconst actual = model.bracketPairs.matchBracket(testPosition);\n\tactual?.sort(Range.compareRangesUsingStarts);\n\tassert.deepStrictEqual(actual, expected, 'matches brackets at ' + testPosition);\n}\n\nsuite('TextModelWithTokens - bracket matching', () => {\n\n\tconst languageId = 'bracketMode1';\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet languageConfigurationService: ILanguageConfigurationService;\n\tlet languageService: ILanguageService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = createModelServices(disposables);\n\t\tlanguageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tlanguageService = instantiationService.get(ILanguageService);\n\t\tdisposables.add(languageService.registerLanguage({ id: languageId }));\n\t\tdisposables.add(languageConfigurationService.register(languageId, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')'],\n\t\t\t]\n\t\t}));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('bracket matching 1', () => {\n\t\tconst text =\n\t\t\t')]}{[(' + '\\n' +\n\t\t\t')]}{[(';\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, text, languageId));\n\n\t\tassertIsNotBracket(model, 1, 1);\n\t\tassertIsNotBracket(model, 1, 2);\n\t\tassertIsNotBracket(model, 1, 3);\n\t\tassertIsBracket(model, new Position(1, 4), [new Range(1, 4, 1, 5), new Range(2, 3, 2, 4)]);\n\t\tassertIsBracket(model, new Position(1, 5), [new Range(1, 5, 1, 6), new Range(2, 2, 2, 3)]);\n\t\tassertIsBracket(model, new Position(1, 6), [new Range(1, 6, 1, 7), new Range(2, 1, 2, 2)]);\n\t\tassertIsBracket(model, new Position(1, 7), [new Range(1, 6, 1, 7), new Range(2, 1, 2, 2)]);\n\n\t\tassertIsBracket(model, new Position(2, 1), [new Range(2, 1, 2, 2), new Range(1, 6, 1, 7)]);\n\t\tassertIsBracket(model, new Position(2, 2), [new Range(2, 2, 2, 3), new Range(1, 5, 1, 6)]);\n\t\tassertIsBracket(model, new Position(2, 3), [new Range(2, 3, 2, 4), new Range(1, 4, 1, 5)]);\n\t\tassertIsBracket(model, new Position(2, 4), [new Range(2, 3, 2, 4), new Range(1, 4, 1, 5)]);\n\t\tassertIsNotBracket(model, 2, 5);\n\t\tassertIsNotBracket(model, 2, 6);\n\t\tassertIsNotBracket(model, 2, 7);\n\t});\n\n\ttest('bracket matching 2', () => {\n\t\tconst text =\n\t\t\t'var bar = {' + '\\n' +\n\t\t\t'foo: {' + '\\n' +\n\t\t\t'}, bar: {hallo: [{' + '\\n' +\n\t\t\t'}, {' + '\\n' +\n\t\t\t'}]}}';\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, text, languageId));\n\n\t\tconst brackets: [Position, Range, Range][] = [\n\t\t\t[new Position(1, 11), new Range(1, 11, 1, 12), new Range(5, 4, 5, 5)],\n\t\t\t[new Position(1, 12), new Range(1, 11, 1, 12), new Range(5, 4, 5, 5)],\n\n\t\t\t[new Position(2, 6), new Range(2, 6, 2, 7), new Range(3, 1, 3, 2)],\n\t\t\t[new Position(2, 7), new Range(2, 6, 2, 7), new Range(3, 1, 3, 2)],\n\n\t\t\t[new Position(3, 1), new Range(3, 1, 3, 2), new Range(2, 6, 2, 7)],\n\t\t\t[new Position(3, 2), new Range(3, 1, 3, 2), new Range(2, 6, 2, 7)],\n\t\t\t[new Position(3, 9), new Range(3, 9, 3, 10), new Range(5, 3, 5, 4)],\n\t\t\t[new Position(3, 10), new Range(3, 9, 3, 10), new Range(5, 3, 5, 4)],\n\t\t\t[new Position(3, 17), new Range(3, 17, 3, 18), new Range(5, 2, 5, 3)],\n\t\t\t[new Position(3, 18), new Range(3, 18, 3, 19), new Range(4, 1, 4, 2)],\n\t\t\t[new Position(3, 19), new Range(3, 18, 3, 19), new Range(4, 1, 4, 2)],\n\n\t\t\t[new Position(4, 1), new Range(4, 1, 4, 2), new Range(3, 18, 3, 19)],\n\t\t\t[new Position(4, 2), new Range(4, 1, 4, 2), new Range(3, 18, 3, 19)],\n\t\t\t[new Position(4, 4), new Range(4, 4, 4, 5), new Range(5, 1, 5, 2)],\n\t\t\t[new Position(4, 5), new Range(4, 4, 4, 5), new Range(5, 1, 5, 2)],\n\n\t\t\t[new Position(5, 1), new Range(5, 1, 5, 2), new Range(4, 4, 4, 5)],\n\t\t\t[new Position(5, 2), new Range(5, 2, 5, 3), new Range(3, 17, 3, 18)],\n\t\t\t[new Position(5, 3), new Range(5, 3, 5, 4), new Range(3, 9, 3, 10)],\n\t\t\t[new Position(5, 4), new Range(5, 4, 5, 5), new Range(1, 11, 1, 12)],\n\t\t\t[new Position(5, 5), new Range(5, 4, 5, 5), new Range(1, 11, 1, 12)],\n\t\t];\n\n\t\tconst isABracket: { [lineNumber: number]: { [col: number]: boolean } } = { 1: {}, 2: {}, 3: {}, 4: {}, 5: {} };\n\t\tfor (let i = 0, len = brackets.length; i < len; i++) {\n\t\t\tconst [testPos, b1, b2] = brackets[i];\n\t\t\tassertIsBracket(model, testPos, [b1, b2]);\n\t\t\tisABracket[testPos.lineNumber][testPos.column] = true;\n\t\t}\n\n\t\tfor (let i = 1, len = model.getLineCount(); i <= len; i++) {\n\t\t\tconst line = model.getLineContent(i);\n\t\t\tfor (let j = 1, lenJ = line.length + 1; j <= lenJ; j++) {\n\t\t\t\tif (!isABracket[i].hasOwnProperty(<any>j)) {\n\t\t\t\t\tassertIsNotBracket(model, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n\nsuite('TextModelWithTokens 2', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('bracket matching 3', () => {\n\t\tconst text = [\n\t\t\t'begin',\n\t\t\t'    loop',\n\t\t\t'        if then',\n\t\t\t'        end if;',\n\t\t\t'    end loop;',\n\t\t\t'end;',\n\t\t\t'',\n\t\t\t'begin',\n\t\t\t'    loop',\n\t\t\t'        if then',\n\t\t\t'        end ifa;',\n\t\t\t'    end loop;',\n\t\t\t'end;',\n\t\t].join('\\n');\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst model = createTextModelWithBrackets(disposables, text, [\n\t\t\t['if', 'end if'],\n\t\t\t['loop', 'end loop'],\n\t\t\t['begin', 'end']\n\t\t]);\n\n\t\t// <if> ... <end ifa> is not matched\n\t\tassertIsNotBracket(model, 10, 9);\n\n\t\t// <if> ... <end if> is matched\n\t\tassertIsBracket(model, new Position(3, 9), [new Range(3, 9, 3, 11), new Range(4, 9, 4, 15)]);\n\t\tassertIsBracket(model, new Position(4, 9), [new Range(4, 9, 4, 15), new Range(3, 9, 3, 11)]);\n\n\t\t// <loop> ... <end loop> is matched\n\t\tassertIsBracket(model, new Position(2, 5), [new Range(2, 5, 2, 9), new Range(5, 5, 5, 13)]);\n\t\tassertIsBracket(model, new Position(5, 5), [new Range(5, 5, 5, 13), new Range(2, 5, 2, 9)]);\n\n\t\t// <begin> ... <end> is matched\n\t\tassertIsBracket(model, new Position(1, 1), [new Range(1, 1, 1, 6), new Range(6, 1, 6, 4)]);\n\t\tassertIsBracket(model, new Position(6, 1), [new Range(6, 1, 6, 4), new Range(1, 1, 1, 6)]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('bracket matching 4', () => {\n\t\tconst text = [\n\t\t\t'recordbegin',\n\t\t\t'  simplerecordbegin',\n\t\t\t'  endrecord',\n\t\t\t'endrecord',\n\t\t].join('\\n');\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst model = createTextModelWithBrackets(disposables, text, [\n\t\t\t['recordbegin', 'endrecord'],\n\t\t\t['simplerecordbegin', 'endrecord'],\n\t\t]);\n\n\t\t// <recordbegin> ... <endrecord> is matched\n\t\tassertIsBracket(model, new Position(1, 1), [new Range(1, 1, 1, 12), new Range(4, 1, 4, 10)]);\n\t\tassertIsBracket(model, new Position(4, 1), [new Range(4, 1, 4, 10), new Range(1, 1, 1, 12)]);\n\n\t\t// <simplerecordbegin> ... <endrecord> is matched\n\t\tassertIsBracket(model, new Position(2, 3), [new Range(2, 3, 2, 20), new Range(3, 3, 3, 12)]);\n\t\tassertIsBracket(model, new Position(3, 3), [new Range(3, 3, 3, 12), new Range(2, 3, 2, 20)]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('issue #95843: Highlighting of closing braces is indicating wrong brace when cursor is behind opening brace', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposables);\n\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\t\tconst mode1 = 'testMode1';\n\t\tconst mode2 = 'testMode2';\n\n\t\tconst languageIdCodec = languageService.languageIdCodec;\n\n\t\tdisposables.add(languageService.registerLanguage({ id: mode1 }));\n\t\tdisposables.add(languageService.registerLanguage({ id: mode2 }));\n\t\tconst encodedMode1 = languageIdCodec.encodeLanguageId(mode1);\n\t\tconst encodedMode2 = languageIdCodec.encodeLanguageId(mode2);\n\n\t\tconst otherMetadata1 = (\n\t\t\t(encodedMode1 << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t\t| (MetadataConsts.BALANCED_BRACKETS_MASK)\n\t\t) >>> 0;\n\t\tconst otherMetadata2 = (\n\t\t\t(encodedMode2 << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t\t| (MetadataConsts.BALANCED_BRACKETS_MASK)\n\t\t) >>> 0;\n\n\t\tconst tokenizationSupport: ITokenizationSupport = {\n\t\t\tgetInitialState: () => NullState,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line, hasEOL, state) => {\n\t\t\t\tswitch (line) {\n\t\t\t\t\tcase 'function f() {': {\n\t\t\t\t\t\tconst tokens = new Uint32Array([\n\t\t\t\t\t\t\t0, otherMetadata1,\n\t\t\t\t\t\t\t8, otherMetadata1,\n\t\t\t\t\t\t\t9, otherMetadata1,\n\t\t\t\t\t\t\t10, otherMetadata1,\n\t\t\t\t\t\t\t11, otherMetadata1,\n\t\t\t\t\t\t\t12, otherMetadata1,\n\t\t\t\t\t\t\t13, otherMetadata1,\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t\t\t}\n\t\t\t\t\tcase '  return <p>{true}</p>;': {\n\t\t\t\t\t\tconst tokens = new Uint32Array([\n\t\t\t\t\t\t\t0, otherMetadata1,\n\t\t\t\t\t\t\t2, otherMetadata1,\n\t\t\t\t\t\t\t8, otherMetadata1,\n\t\t\t\t\t\t\t9, otherMetadata2,\n\t\t\t\t\t\t\t10, otherMetadata2,\n\t\t\t\t\t\t\t11, otherMetadata2,\n\t\t\t\t\t\t\t12, otherMetadata2,\n\t\t\t\t\t\t\t13, otherMetadata1,\n\t\t\t\t\t\t\t17, otherMetadata2,\n\t\t\t\t\t\t\t18, otherMetadata2,\n\t\t\t\t\t\t\t20, otherMetadata2,\n\t\t\t\t\t\t\t21, otherMetadata2,\n\t\t\t\t\t\t\t22, otherMetadata2,\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t\t\t}\n\t\t\t\t\tcase '}': {\n\t\t\t\t\t\tconst tokens = new Uint32Array([\n\t\t\t\t\t\t\t0, otherMetadata1\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new Error(`Unexpected`);\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(TokenizationRegistry.register(mode1, tokenizationSupport));\n\t\tdisposables.add(languageConfigurationService.register(mode1, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')']\n\t\t\t],\n\t\t}));\n\t\tdisposables.add(languageConfigurationService.register(mode2, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')']\n\t\t\t],\n\t\t}));\n\n\t\tconst model = disposables.add(instantiateTextModel(\n\t\t\tinstantiationService,\n\t\t\t[\n\t\t\t\t'function f() {',\n\t\t\t\t'  return <p>{true}</p>;',\n\t\t\t\t'}',\n\t\t\t].join('\\n'),\n\t\t\tmode1\n\t\t));\n\n\t\tmodel.tokenization.forceTokenization(1);\n\t\tmodel.tokenization.forceTokenization(2);\n\t\tmodel.tokenization.forceTokenization(3);\n\n\t\tassert.deepStrictEqual(\n\t\t\tmodel.bracketPairs.matchBracket(new Position(2, 14)),\n\t\t\t[new Range(2, 13, 2, 14), new Range(2, 18, 2, 19)]\n\t\t);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('issue #88075: TypeScript brace matching is incorrect in `${}` strings', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposables);\n\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tconst mode = 'testMode';\n\n\t\tconst languageIdCodec = instantiationService.get(ILanguageService).languageIdCodec;\n\n\t\tconst encodedMode = languageIdCodec.encodeLanguageId(mode);\n\n\t\tconst otherMetadata = (\n\t\t\t(encodedMode << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t) >>> 0;\n\t\tconst stringMetadata = (\n\t\t\t(encodedMode << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t\t| (StandardTokenType.String << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t) >>> 0;\n\n\t\tconst tokenizationSupport: ITokenizationSupport = {\n\t\t\tgetInitialState: () => NullState,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line, hasEOL, state) => {\n\t\t\t\tswitch (line) {\n\t\t\t\t\tcase 'function hello() {': {\n\t\t\t\t\t\tconst tokens = new Uint32Array([\n\t\t\t\t\t\t\t0, otherMetadata\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t\t\t}\n\t\t\t\t\tcase '    console.log(`${100}`);': {\n\t\t\t\t\t\tconst tokens = new Uint32Array([\n\t\t\t\t\t\t\t0, otherMetadata,\n\t\t\t\t\t\t\t16, stringMetadata,\n\t\t\t\t\t\t\t19, otherMetadata,\n\t\t\t\t\t\t\t22, stringMetadata,\n\t\t\t\t\t\t\t24, otherMetadata,\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t\t\t}\n\t\t\t\t\tcase '}': {\n\t\t\t\t\t\tconst tokens = new Uint32Array([\n\t\t\t\t\t\t\t0, otherMetadata\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new Error(`Unexpected`);\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(TokenizationRegistry.register(mode, tokenizationSupport));\n\t\tdisposables.add(languageConfigurationService.register(mode, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')']\n\t\t\t],\n\t\t}));\n\n\t\tconst model = disposables.add(instantiateTextModel(\n\t\t\tinstantiationService,\n\t\t\t[\n\t\t\t\t'function hello() {',\n\t\t\t\t'    console.log(`${100}`);',\n\t\t\t\t'}'\n\t\t\t].join('\\n'),\n\t\t\tmode\n\t\t));\n\n\t\tmodel.tokenization.forceTokenization(1);\n\t\tmodel.tokenization.forceTokenization(2);\n\t\tmodel.tokenization.forceTokenization(3);\n\n\t\tassert.deepStrictEqual(model.bracketPairs.matchBracket(new Position(2, 23)), null);\n\t\tassert.deepStrictEqual(model.bracketPairs.matchBracket(new Position(2, 20)), null);\n\n\t\tdisposables.dispose();\n\t});\n});\n\n\nsuite('TextModelWithTokens regression tests', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('microsoft/monaco-editor#122: Unhandled Exception: TypeError: Unable to get property \\'replace\\' of undefined or null reference', () => {\n\t\tfunction assertViewLineTokens(model: TextModel, lineNumber: number, forceTokenization: boolean, expected: TestLineToken[]): void {\n\t\t\tif (forceTokenization) {\n\t\t\t\tmodel.tokenization.forceTokenization(lineNumber);\n\t\t\t}\n\t\t\tconst _actual = model.tokenization.getLineTokens(lineNumber).inflate();\n\t\t\tinterface ISimpleViewToken {\n\t\t\t\tendIndex: number;\n\t\t\t\tforeground: number;\n\t\t\t}\n\t\t\tconst actual: ISimpleViewToken[] = [];\n\t\t\tfor (let i = 0, len = _actual.getCount(); i < len; i++) {\n\t\t\t\tactual[i] = {\n\t\t\t\t\tendIndex: _actual.getEndOffset(i),\n\t\t\t\t\tforeground: _actual.getForeground(i)\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst decode = (token: TestLineToken) => {\n\t\t\t\treturn {\n\t\t\t\t\tendIndex: token.endIndex,\n\t\t\t\t\tforeground: token.getForeground()\n\t\t\t\t};\n\t\t\t};\n\t\t\tassert.deepStrictEqual(actual, expected.map(decode));\n\t\t}\n\n\t\tlet _tokenId = 10;\n\t\tconst LANG_ID1 = 'indicisiveMode1';\n\t\tconst LANG_ID2 = 'indicisiveMode2';\n\n\t\tconst tokenizationSupport: ITokenizationSupport = {\n\t\t\tgetInitialState: () => NullState,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line, hasEOL, state) => {\n\t\t\t\tconst myId = ++_tokenId;\n\t\t\t\tconst tokens = new Uint32Array(2);\n\t\t\t\ttokens[0] = 0;\n\t\t\t\ttokens[1] = (\n\t\t\t\t\tmyId << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t\t) >>> 0;\n\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t}\n\t\t};\n\n\t\tconst registration1 = TokenizationRegistry.register(LANG_ID1, tokenizationSupport);\n\t\tconst registration2 = TokenizationRegistry.register(LANG_ID2, tokenizationSupport);\n\n\t\tconst model = createTextModel('A model with\\ntwo lines');\n\n\t\tassertViewLineTokens(model, 1, true, [createViewLineToken(12, 1)]);\n\t\tassertViewLineTokens(model, 2, true, [createViewLineToken(9, 1)]);\n\n\t\tmodel.setLanguage(LANG_ID1);\n\n\t\tassertViewLineTokens(model, 1, true, [createViewLineToken(12, 11)]);\n\t\tassertViewLineTokens(model, 2, true, [createViewLineToken(9, 12)]);\n\n\t\tmodel.setLanguage(LANG_ID2);\n\n\t\tassertViewLineTokens(model, 1, false, [createViewLineToken(12, 1)]);\n\t\tassertViewLineTokens(model, 2, false, [createViewLineToken(9, 1)]);\n\n\t\tmodel.dispose();\n\t\tregistration1.dispose();\n\t\tregistration2.dispose();\n\n\t\tfunction createViewLineToken(endIndex: number, foreground: number): TestLineToken {\n\t\t\tconst metadata = (\n\t\t\t\t(foreground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t) >>> 0;\n\t\t\treturn new TestLineToken(endIndex, metadata);\n\t\t}\n\t});\n\n\n\ttest('microsoft/monaco-editor#133: Error: Cannot read property \\'modeId\\' of undefined', () => {\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst model = createTextModelWithBrackets(\n\t\t\tdisposables,\n\t\t\t[\n\t\t\t\t'Imports System',\n\t\t\t\t'Imports System.Collections.Generic',\n\t\t\t\t'',\n\t\t\t\t'Module m1',\n\t\t\t\t'',\n\t\t\t\t'\\tSub Main()',\n\t\t\t\t'\\tEnd Sub',\n\t\t\t\t'',\n\t\t\t\t'End Module',\n\t\t\t].join('\\n'),\n\t\t\t[\n\t\t\t\t['module', 'end module'],\n\t\t\t\t['sub', 'end sub']\n\t\t\t]\n\t\t);\n\n\t\tconst actual = model.bracketPairs.matchBracket(new Position(4, 1));\n\t\tassert.deepStrictEqual(actual, [new Range(4, 1, 4, 7), new Range(9, 1, 9, 11)]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('issue #11856: Bracket matching does not work as expected if the opening brace symbol is contained in the closing brace symbol', () => {\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst model = createTextModelWithBrackets(\n\t\t\tdisposables,\n\t\t\t[\n\t\t\t\t'sequence \"outer\"',\n\t\t\t\t'     sequence \"inner\"',\n\t\t\t\t'     endsequence',\n\t\t\t\t'endsequence',\n\t\t\t].join('\\n'),\n\t\t\t[\n\t\t\t\t['sequence', 'endsequence'],\n\t\t\t\t['feature', 'endfeature']\n\t\t\t]\n\t\t);\n\n\t\tconst actual = model.bracketPairs.matchBracket(new Position(3, 9));\n\t\tassert.deepStrictEqual(actual, [new Range(2, 6, 2, 14), new Range(3, 6, 3, 17)]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('issue #63822: Wrong embedded language detected for empty lines', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposables);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\n\t\tconst outerMode = 'outerMode';\n\t\tconst innerMode = 'innerMode';\n\n\t\tdisposables.add(languageService.registerLanguage({ id: outerMode }));\n\t\tdisposables.add(languageService.registerLanguage({ id: innerMode }));\n\n\t\tconst languageIdCodec = instantiationService.get(ILanguageService).languageIdCodec;\n\t\tconst encodedInnerMode = languageIdCodec.encodeLanguageId(innerMode);\n\n\t\tconst tokenizationSupport: ITokenizationSupport = {\n\t\t\tgetInitialState: () => NullState,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line, hasEOL, state) => {\n\t\t\t\tconst tokens = new Uint32Array(2);\n\t\t\t\ttokens[0] = 0;\n\t\t\t\ttokens[1] = (\n\t\t\t\t\tencodedInnerMode << MetadataConsts.LANGUAGEID_OFFSET\n\t\t\t\t) >>> 0;\n\t\t\t\treturn new EncodedTokenizationResult(tokens, state);\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(TokenizationRegistry.register(outerMode, tokenizationSupport));\n\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, 'A model with one line', outerMode));\n\n\t\tmodel.tokenization.forceTokenization(1);\n\t\tassert.strictEqual(model.getLanguageIdAtPosition(1, 1), innerMode);\n\n\t\tdisposables.dispose();\n\t});\n});\n\nsuite('TextModel.getLineIndentGuide', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertIndentGuides(lines: [number, number, number, number, string][], indentSize: number): void {\n\t\tconst languageId = 'testLang';\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposables);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\t\tdisposables.add(languageService.registerLanguage({ id: languageId }));\n\n\t\tconst text = lines.map(l => l[4]).join('\\n');\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, text, languageId));\n\t\tmodel.updateOptions({ indentSize: indentSize });\n\n\t\tconst actualIndents = model.guides.getLinesIndentGuides(1, model.getLineCount());\n\n\t\tconst actual: [number, number, number, number, string][] = [];\n\t\tfor (let line = 1; line <= model.getLineCount(); line++) {\n\t\t\tconst activeIndentGuide = model.guides.getActiveIndentGuide(line, 1, model.getLineCount());\n\t\t\tactual[line - 1] = [actualIndents[line - 1], activeIndentGuide.startLineNumber, activeIndentGuide.endLineNumber, activeIndentGuide.indent, model.getLineContent(line)];\n\t\t}\n\n\t\tassert.deepStrictEqual(actual, lines);\n\n\t\tdisposables.dispose();\n\t}\n\n\ttest('getLineIndentGuide one level 2', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 4, 1, 'A'],\n\t\t\t[1, 2, 4, 1, '  A'],\n\t\t\t[1, 2, 4, 1, '  A'],\n\t\t\t[1, 2, 4, 1, '  A'],\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide two levels', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 5, 1, 'A'],\n\t\t\t[1, 2, 5, 1, '  A'],\n\t\t\t[1, 4, 5, 2, '  A'],\n\t\t\t[2, 4, 5, 2, '    A'],\n\t\t\t[2, 4, 5, 2, '    A'],\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide three levels', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 4, 1, 'A'],\n\t\t\t[1, 3, 4, 2, '  A'],\n\t\t\t[2, 4, 4, 3, '    A'],\n\t\t\t[3, 4, 4, 3, '      A'],\n\t\t\t[0, 5, 5, 0, 'A'],\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide decreasing indent', () => {\n\t\tassertIndentGuides([\n\t\t\t[2, 1, 1, 2, '    A'],\n\t\t\t[1, 1, 1, 2, '  A'],\n\t\t\t[0, 1, 2, 1, 'A'],\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide Java', () => {\n\t\tassertIndentGuides([\n\t\t\t/* 1*/[0, 2, 9, 1, 'class A {'],\n\t\t\t/* 2*/[1, 3, 4, 2, '  void foo() {'],\n\t\t\t/* 3*/[2, 3, 4, 2, '    console.log(1);'],\n\t\t\t/* 4*/[2, 3, 4, 2, '    console.log(2);'],\n\t\t\t/* 5*/[1, 3, 4, 2, '  }'],\n\t\t\t/* 6*/[1, 2, 9, 1, ''],\n\t\t\t/* 7*/[1, 8, 8, 2, '  void bar() {'],\n\t\t\t/* 8*/[2, 8, 8, 2, '    console.log(3);'],\n\t\t\t/* 9*/[1, 8, 8, 2, '  }'],\n\t\t\t/*10*/[0, 2, 9, 1, '}'],\n\t\t\t/*11*/[0, 12, 12, 1, 'interface B {'],\n\t\t\t/*12*/[1, 12, 12, 1, '  void bar();'],\n\t\t\t/*13*/[0, 12, 12, 1, '}'],\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide Javadoc', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 3, 1, '/**'],\n\t\t\t[1, 2, 3, 1, ' * Comment'],\n\t\t\t[1, 2, 3, 1, ' */'],\n\t\t\t[0, 5, 6, 1, 'class A {'],\n\t\t\t[1, 5, 6, 1, '  void foo() {'],\n\t\t\t[1, 5, 6, 1, '  }'],\n\t\t\t[0, 5, 6, 1, '}'],\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide Whitespace', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 7, 1, 'class A {'],\n\t\t\t[1, 2, 7, 1, ''],\n\t\t\t[1, 4, 5, 2, '  void foo() {'],\n\t\t\t[2, 4, 5, 2, '    '],\n\t\t\t[2, 4, 5, 2, '    return 1;'],\n\t\t\t[1, 4, 5, 2, '  }'],\n\t\t\t[1, 2, 7, 1, '      '],\n\t\t\t[0, 2, 7, 1, '}']\n\t\t], 2);\n\t});\n\n\ttest('getLineIndentGuide Tabs', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 7, 1, 'class A {'],\n\t\t\t[1, 2, 7, 1, '\\t\\t'],\n\t\t\t[1, 4, 5, 2, '\\tvoid foo() {'],\n\t\t\t[2, 4, 5, 2, '\\t \\t//hello'],\n\t\t\t[2, 4, 5, 2, '\\t    return 2;'],\n\t\t\t[1, 4, 5, 2, '  \\t}'],\n\t\t\t[1, 2, 7, 1, '      '],\n\t\t\t[0, 2, 7, 1, '}']\n\t\t], 4);\n\t});\n\n\ttest('getLineIndentGuide checker.ts', () => {\n\t\tassertIndentGuides([\n\t\t\t/* 1*/[0, 1, 1, 0, '/// <reference path=\"binder.ts\"/>'],\n\t\t\t/* 2*/[0, 2, 2, 0, ''],\n\t\t\t/* 3*/[0, 3, 3, 0, '/* @internal */'],\n\t\t\t/* 4*/[0, 5, 16, 1, 'namespace ts {'],\n\t\t\t/* 5*/[1, 5, 16, 1, '    let nextSymbolId = 1;'],\n\t\t\t/* 6*/[1, 5, 16, 1, '    let nextNodeId = 1;'],\n\t\t\t/* 7*/[1, 5, 16, 1, '    let nextMergeId = 1;'],\n\t\t\t/* 8*/[1, 5, 16, 1, '    let nextFlowId = 1;'],\n\t\t\t/* 9*/[1, 5, 16, 1, ''],\n\t\t\t/*10*/[1, 11, 15, 2, '    export function getNodeId(node: Node): number {'],\n\t\t\t/*11*/[2, 12, 13, 3, '        if (!node.id) {'],\n\t\t\t/*12*/[3, 12, 13, 3, '            node.id = nextNodeId;'],\n\t\t\t/*13*/[3, 12, 13, 3, '            nextNodeId++;'],\n\t\t\t/*14*/[2, 12, 13, 3, '        }'],\n\t\t\t/*15*/[2, 11, 15, 2, '        return node.id;'],\n\t\t\t/*16*/[1, 11, 15, 2, '    }'],\n\t\t\t/*17*/[0, 5, 16, 1, '}']\n\t\t], 4);\n\t});\n\n\ttest('issue #8425 - Missing indentation lines for first level indentation', () => {\n\t\tassertIndentGuides([\n\t\t\t[1, 2, 3, 2, '\\tindent1'],\n\t\t\t[2, 2, 3, 2, '\\t\\tindent2'],\n\t\t\t[2, 2, 3, 2, '\\t\\tindent2'],\n\t\t\t[1, 2, 3, 2, '\\tindent1']\n\t\t], 4);\n\t});\n\n\ttest('issue #8952 - Indentation guide lines going through text on .yml file', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 5, 1, 'properties:'],\n\t\t\t[1, 3, 5, 2, '    emailAddress:'],\n\t\t\t[2, 3, 5, 2, '        - bla'],\n\t\t\t[2, 5, 5, 3, '        - length:'],\n\t\t\t[3, 5, 5, 3, '            max: 255'],\n\t\t\t[0, 6, 6, 0, 'getters:']\n\t\t], 4);\n\t});\n\n\ttest('issue #11892 - Indent guides look funny', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 7, 1, 'function test(base) {'],\n\t\t\t[1, 3, 6, 2, '\\tswitch (base) {'],\n\t\t\t[2, 4, 4, 3, '\\t\\tcase 1:'],\n\t\t\t[3, 4, 4, 3, '\\t\\t\\treturn 1;'],\n\t\t\t[2, 6, 6, 3, '\\t\\tcase 2:'],\n\t\t\t[3, 6, 6, 3, '\\t\\t\\treturn 2;'],\n\t\t\t[1, 2, 7, 1, '\\t}'],\n\t\t\t[0, 2, 7, 1, '}']\n\t\t], 4);\n\t});\n\n\ttest('issue #12398 - Problem in indent guidelines', () => {\n\t\tassertIndentGuides([\n\t\t\t[2, 2, 2, 3, '\\t\\t.bla'],\n\t\t\t[3, 2, 2, 3, '\\t\\t\\tlabel(for)'],\n\t\t\t[0, 3, 3, 0, 'include script']\n\t\t], 4);\n\t});\n\n\ttest('issue #49173', () => {\n\t\tconst model = createTextModel([\n\t\t\t'class A {',\n\t\t\t'\tpublic m1(): void {',\n\t\t\t'\t}',\n\t\t\t'\tpublic m2(): void {',\n\t\t\t'\t}',\n\t\t\t'\tpublic m3(): void {',\n\t\t\t'\t}',\n\t\t\t'\tpublic m4(): void {',\n\t\t\t'\t}',\n\t\t\t'\tpublic m5(): void {',\n\t\t\t'\t}',\n\t\t\t'}',\n\t\t].join('\\n'));\n\n\t\tconst actual = model.guides.getActiveIndentGuide(2, 4, 9);\n\t\tassert.deepStrictEqual(actual, { startLineNumber: 2, endLineNumber: 9, indent: 1 });\n\t\tmodel.dispose();\n\t});\n\n\ttest('tweaks - no active', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 1, 1, 0, 'A'],\n\t\t\t[0, 2, 2, 0, 'A']\n\t\t], 2);\n\t});\n\n\ttest('tweaks - inside scope', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 2, 1, 'A'],\n\t\t\t[1, 2, 2, 1, '  A']\n\t\t], 2);\n\t});\n\n\ttest('tweaks - scope start', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 2, 1, 'A'],\n\t\t\t[1, 2, 2, 1, '  A'],\n\t\t\t[0, 2, 2, 1, 'A']\n\t\t], 2);\n\t});\n\n\ttest('tweaks - empty line', () => {\n\t\tassertIndentGuides([\n\t\t\t[0, 2, 4, 1, 'A'],\n\t\t\t[1, 2, 4, 1, '  A'],\n\t\t\t[1, 2, 4, 1, ''],\n\t\t\t[1, 2, 4, 1, '  A'],\n\t\t\t[0, 2, 4, 1, 'A']\n\t\t], 2);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["model"]
}
