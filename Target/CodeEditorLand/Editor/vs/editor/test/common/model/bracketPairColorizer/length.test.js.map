{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/bracketPairColorizer/length.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Length, lengthAdd, lengthDiffNonNegative, lengthToObj, toLength } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/length.js';\n\nsuite('Bracket Pair Colorizer - Length', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction toStr(length: Length): string {\n\t\treturn lengthToObj(length).toString();\n\t}\n\n\ttest('Basic', () => {\n\t\tconst l1 = toLength(100, 10);\n\t\tassert.strictEqual(lengthToObj(l1).lineCount, 100);\n\t\tassert.strictEqual(lengthToObj(l1).columnCount, 10);\n\n\t\tassert.deepStrictEqual(toStr(lengthAdd(l1, toLength(100, 10))), '200,10');\n\t\tassert.deepStrictEqual(toStr(lengthAdd(l1, toLength(0, 10))), '100,20');\n\t});\n\n\ttest('lengthDiffNonNeg', () => {\n\t\tassert.deepStrictEqual(\n\t\t\ttoStr(\n\t\t\t\tlengthDiffNonNegative(\n\t\t\t\t\ttoLength(100, 10),\n\t\t\t\t\ttoLength(100, 20))\n\t\t\t),\n\t\t\t'0,10'\n\t\t);\n\n\t\tassert.deepStrictEqual(\n\t\t\ttoStr(\n\t\t\t\tlengthDiffNonNegative(\n\t\t\t\t\ttoLength(100, 10),\n\t\t\t\t\ttoLength(101, 20))\n\t\t\t),\n\t\t\t'1,20'\n\t\t);\n\n\t\tassert.deepStrictEqual(\n\t\t\ttoStr(\n\t\t\t\tlengthDiffNonNegative(\n\t\t\t\t\ttoLength(101, 30),\n\t\t\t\t\ttoLength(101, 20))\n\t\t\t),\n\t\t\t'0,0'\n\t\t);\n\n\t\tassert.deepStrictEqual(\n\t\t\ttoStr(\n\t\t\t\tlengthDiffNonNegative(\n\t\t\t\t\ttoLength(102, 10),\n\t\t\t\t\ttoLength(101, 20))\n\t\t\t),\n\t\t\t'0,0'\n\t\t);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,QAAQ,WAAW,uBAAuB,aAAa,gBAAgB;AAEhF,MAAM,mCAAmC,MAAM;AAE9C,0CAAwC;AAExC,WAAS,MAAM,QAAwB;AACtC,WAAO,YAAY,MAAM,EAAE,SAAS;AAAA,EACrC;AAFS;AAIT,OAAK,SAAS,MAAM;AACnB,UAAM,KAAK,SAAS,KAAK,EAAE;AAC3B,WAAO,YAAY,YAAY,EAAE,EAAE,WAAW,GAAG;AACjD,WAAO,YAAY,YAAY,EAAE,EAAE,aAAa,EAAE;AAElD,WAAO,gBAAgB,MAAM,UAAU,IAAI,SAAS,KAAK,EAAE,CAAC,CAAC,GAAG,QAAQ;AACxE,WAAO,gBAAgB,MAAM,UAAU,IAAI,SAAS,GAAG,EAAE,CAAC,CAAC,GAAG,QAAQ;AAAA,EACvE,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,WAAO;AAAA,MACN;AAAA,QACC;AAAA,UACC,SAAS,KAAK,EAAE;AAAA,UAChB,SAAS,KAAK,EAAE;AAAA,QAAC;AAAA,MACnB;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,MACN;AAAA,QACC;AAAA,UACC,SAAS,KAAK,EAAE;AAAA,UAChB,SAAS,KAAK,EAAE;AAAA,QAAC;AAAA,MACnB;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,MACN;AAAA,QACC;AAAA,UACC,SAAS,KAAK,EAAE;AAAA,UAChB,SAAS,KAAK,EAAE;AAAA,QAAC;AAAA,MACnB;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,MACN;AAAA,QACC;AAAA,UACC,SAAS,KAAK,EAAE;AAAA,UAChB,SAAS,KAAK,EAAE;AAAA,QAAC;AAAA,MACnB;AAAA,MACA;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;",
  "names": []
}
