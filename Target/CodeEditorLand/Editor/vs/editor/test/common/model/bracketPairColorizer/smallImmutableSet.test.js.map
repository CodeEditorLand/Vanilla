{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/bracketPairColorizer/smallImmutableSet.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DenseKeyProvider, SmallImmutableSet } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.js';\n\nsuite('Bracket Pair Colorizer - ImmutableSet', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst keyProvider = new DenseKeyProvider<string>();\n\n\t\tconst empty = SmallImmutableSet.getEmpty<string>();\n\t\tconst items1 = empty.add('item1', keyProvider);\n\t\tconst items12 = items1.add('item2', keyProvider);\n\t\tconst items2 = empty.add('item2', keyProvider);\n\t\tconst items21 = items2.add('item1', keyProvider);\n\n\t\tconst items3 = empty.add('item3', keyProvider);\n\n\t\tassert.strictEqual(items12.intersects(items1), true);\n\t\tassert.strictEqual(items12.has('item1', keyProvider), true);\n\n\t\tassert.strictEqual(items12.intersects(items3), false);\n\t\tassert.strictEqual(items12.has('item3', keyProvider), false);\n\n\t\tassert.strictEqual(items21.equals(items12), true);\n\t\tassert.strictEqual(items21.equals(items2), false);\n\t});\n\n\ttest('Many Elements', () => {\n\t\tconst keyProvider = new DenseKeyProvider<string>();\n\n\t\tlet set = SmallImmutableSet.getEmpty<string>();\n\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tkeyProvider.getKey(`item${i}`);\n\t\t\tif (i % 2 === 0) {\n\t\t\t\tset = set.add(`item${i}`, keyProvider);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tassert.strictEqual(set.has(`item${i}`, keyProvider), i % 2 === 0);\n\t\t}\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,kBAAkB,yBAAyB;AAEpD,MAAM,yCAAyC,MAAM;AAEpD,0CAAwC;AAExC,OAAK,SAAS,MAAM;AACnB,UAAM,cAAc,IAAI,iBAAyB;AAEjD,UAAM,QAAQ,kBAAkB,SAAiB;AACjD,UAAM,SAAS,MAAM,IAAI,SAAS,WAAW;AAC7C,UAAM,UAAU,OAAO,IAAI,SAAS,WAAW;AAC/C,UAAM,SAAS,MAAM,IAAI,SAAS,WAAW;AAC7C,UAAM,UAAU,OAAO,IAAI,SAAS,WAAW;AAE/C,UAAM,SAAS,MAAM,IAAI,SAAS,WAAW;AAE7C,WAAO,YAAY,QAAQ,WAAW,MAAM,GAAG,IAAI;AACnD,WAAO,YAAY,QAAQ,IAAI,SAAS,WAAW,GAAG,IAAI;AAE1D,WAAO,YAAY,QAAQ,WAAW,MAAM,GAAG,KAAK;AACpD,WAAO,YAAY,QAAQ,IAAI,SAAS,WAAW,GAAG,KAAK;AAE3D,WAAO,YAAY,QAAQ,OAAO,OAAO,GAAG,IAAI;AAChD,WAAO,YAAY,QAAQ,OAAO,MAAM,GAAG,KAAK;AAAA,EACjD,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,UAAM,cAAc,IAAI,iBAAyB;AAEjD,QAAI,MAAM,kBAAkB,SAAiB;AAE7C,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC7B,kBAAY,OAAO,OAAO,CAAC,EAAE;AAC7B,UAAI,IAAI,MAAM,GAAG;AAChB,cAAM,IAAI,IAAI,OAAO,CAAC,IAAI,WAAW;AAAA,MACtC;AAAA,IACD;AAEA,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC7B,aAAO,YAAY,IAAI,IAAI,OAAO,CAAC,IAAI,WAAW,GAAG,IAAI,MAAM,CAAC;AAAA,IACjE;AAAA,EACD,CAAC;AACF,CAAC;",
  "names": []
}
