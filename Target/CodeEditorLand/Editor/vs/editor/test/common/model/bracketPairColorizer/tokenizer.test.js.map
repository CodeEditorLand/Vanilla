{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/bracketPairColorizer/tokenizer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { LanguageId, MetadataConsts, StandardTokenType } from '../../../../common/encodedTokenAttributes.js';\nimport { EncodedTokenizationResult, IState, ITokenizationSupport, TokenizationRegistry } from '../../../../common/languages.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { LanguageAgnosticBracketTokens } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/brackets.js';\nimport { Length, lengthAdd, lengthsToRange, lengthZero } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/length.js';\nimport { DenseKeyProvider } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer, Token, Tokenizer, TokenKind } from '../../../../common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer.js';\nimport { TextModel } from '../../../../common/model/textModel.js';\nimport { createModelServices, instantiateTextModel } from '../../testTextModel.js';\n\nsuite('Bracket Pair Colorizer - Tokenizer', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst mode1 = 'testMode1';\n\t\tconst disposableStore = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposableStore);\n\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\t\tdisposableStore.add(languageService.registerLanguage({ id: mode1 }));\n\t\tconst encodedMode1 = languageService.languageIdCodec.encodeLanguageId(mode1);\n\n\t\tconst denseKeyProvider = new DenseKeyProvider<string>();\n\n\t\tconst tStandard = (text: string) => new TokenInfo(text, encodedMode1, StandardTokenType.Other, true);\n\t\tconst tComment = (text: string) => new TokenInfo(text, encodedMode1, StandardTokenType.Comment, true);\n\t\tconst document = new TokenizedDocument([\n\t\t\ttStandard(' { } '), tStandard('be'), tStandard('gin end'), tStandard('\\n'),\n\t\t\ttStandard('hello'), tComment('{'), tStandard('}'),\n\t\t]);\n\n\t\tdisposableStore.add(TokenizationRegistry.register(mode1, document.getTokenizationSupport()));\n\t\tdisposableStore.add(languageConfigurationService.register(mode1, {\n\t\t\tbrackets: [['{', '}'], ['[', ']'], ['(', ')'], ['begin', 'end']],\n\t\t}));\n\n\t\tconst model = disposableStore.add(instantiateTextModel(instantiationService, document.getText(), mode1));\n\t\tmodel.tokenization.forceTokenization(model.getLineCount());\n\n\t\tconst brackets = new LanguageAgnosticBracketTokens(denseKeyProvider, l => languageConfigurationService.getLanguageConfiguration(l));\n\n\t\tconst tokens = readAllTokens(new TextBufferTokenizer(model, brackets));\n\n\t\tassert.deepStrictEqual(toArr(tokens, model, denseKeyProvider), [\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: '{',\n\t\t\t\tbracketId: 'testMode1:::{',\n\t\t\t\tbracketIds: ['testMode1:::{'],\n\t\t\t\tkind: 'OpeningBracket',\n\t\t\t},\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: '}',\n\t\t\t\tbracketId: 'testMode1:::{',\n\t\t\t\tbracketIds: ['testMode1:::{'],\n\t\t\t\tkind: 'ClosingBracket',\n\t\t\t},\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: 'begin',\n\t\t\t\tbracketId: 'testMode1:::begin',\n\t\t\t\tbracketIds: ['testMode1:::begin'],\n\t\t\t\tkind: 'OpeningBracket',\n\t\t\t},\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: 'end',\n\t\t\t\tbracketId: 'testMode1:::begin',\n\t\t\t\tbracketIds: ['testMode1:::begin'],\n\t\t\t\tkind: 'ClosingBracket',\n\t\t\t},\n\t\t\t{ text: '\\nhello{', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: '}',\n\t\t\t\tbracketId: 'testMode1:::{',\n\t\t\t\tbracketIds: ['testMode1:::{'],\n\t\t\t\tkind: 'ClosingBracket',\n\t\t\t},\n\t\t]);\n\n\t\tdisposableStore.dispose();\n\t});\n});\n\nfunction readAllTokens(tokenizer: Tokenizer): Token[] {\n\tconst tokens = new Array<Token>();\n\twhile (true) {\n\t\tconst token = tokenizer.read();\n\t\tif (!token) {\n\t\t\tbreak;\n\t\t}\n\t\ttokens.push(token);\n\t}\n\treturn tokens;\n}\n\nfunction toArr(tokens: Token[], model: TextModel, keyProvider: DenseKeyProvider<string>): any[] {\n\tconst result = new Array<any>();\n\tlet offset = lengthZero;\n\tfor (const token of tokens) {\n\t\tresult.push(tokenToObj(token, offset, model, keyProvider));\n\t\toffset = lengthAdd(offset, token.length);\n\t}\n\treturn result;\n}\n\nfunction tokenToObj(token: Token, offset: Length, model: TextModel, keyProvider: DenseKeyProvider<any>): any {\n\treturn {\n\t\ttext: model.getValueInRange(lengthsToRange(offset, lengthAdd(offset, token.length))),\n\t\tbracketId: keyProvider.reverseLookup(token.bracketId) || null,\n\t\tbracketIds: keyProvider.reverseLookupSet(token.bracketIds),\n\t\tkind: {\n\t\t\t[TokenKind.ClosingBracket]: 'ClosingBracket',\n\t\t\t[TokenKind.OpeningBracket]: 'OpeningBracket',\n\t\t\t[TokenKind.Text]: 'Text',\n\t\t}[token.kind]\n\t};\n}\n\nexport class TokenizedDocument {\n\tprivate readonly tokensByLine: readonly TokenInfo[][];\n\tconstructor(tokens: TokenInfo[]) {\n\t\tconst tokensByLine = new Array<TokenInfo[]>();\n\t\tlet curLine = new Array<TokenInfo>();\n\n\t\tfor (const token of tokens) {\n\t\t\tconst lines = token.text.split('\\n');\n\t\t\tlet first = true;\n\t\t\twhile (lines.length > 0) {\n\t\t\t\tif (!first) {\n\t\t\t\t\ttokensByLine.push(curLine);\n\t\t\t\t\tcurLine = new Array<TokenInfo>();\n\t\t\t\t} else {\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\n\t\t\t\tif (lines[0].length > 0) {\n\t\t\t\t\tcurLine.push(token.withText(lines[0]));\n\t\t\t\t}\n\t\t\t\tlines.pop();\n\t\t\t}\n\t\t}\n\n\t\ttokensByLine.push(curLine);\n\n\t\tthis.tokensByLine = tokensByLine;\n\t}\n\n\tgetText() {\n\t\treturn this.tokensByLine.map(t => t.map(t => t.text).join('')).join('\\n');\n\t}\n\n\tgetTokenizationSupport(): ITokenizationSupport {\n\t\tclass State implements IState {\n\t\t\tconstructor(public readonly lineNumber: number) { }\n\n\t\t\tclone(): IState {\n\t\t\t\treturn new State(this.lineNumber);\n\t\t\t}\n\n\t\t\tequals(other: IState): boolean {\n\t\t\t\treturn this.lineNumber === (other as State).lineNumber;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetInitialState: () => new State(0),\n\t\t\ttokenize: () => { throw new Error('Method not implemented.'); },\n\t\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult => {\n\t\t\t\tconst state2 = state as State;\n\t\t\t\tconst tokens = this.tokensByLine[state2.lineNumber];\n\t\t\t\tconst arr = new Array<number>();\n\t\t\t\tlet offset = 0;\n\t\t\t\tfor (const t of tokens) {\n\t\t\t\t\tarr.push(offset, t.getMetadata());\n\t\t\t\t\toffset += t.text.length;\n\t\t\t\t}\n\n\t\t\t\treturn new EncodedTokenizationResult(new Uint32Array(arr), new State(state2.lineNumber + 1));\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport class TokenInfo {\n\tconstructor(\n\t\tpublic readonly text: string,\n\t\tpublic readonly languageId: LanguageId,\n\t\tpublic readonly tokenType: StandardTokenType,\n\t\tpublic readonly hasBalancedBrackets: boolean,\n\t) { }\n\n\tgetMetadata(): number {\n\t\treturn (\n\t\t\t(((this.languageId << MetadataConsts.LANGUAGEID_OFFSET) |\n\t\t\t\t(this.tokenType << MetadataConsts.TOKEN_TYPE_OFFSET)) >>>\n\t\t\t\t0) |\n\t\t\t(this.hasBalancedBrackets ? MetadataConsts.BALANCED_BRACKETS_MASK : 0)\n\t\t);\n\t}\n\n\twithText(text: string): TokenInfo {\n\t\treturn new TokenInfo(text, this.languageId, this.tokenType, this.hasBalancedBrackets);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["t"]
}
