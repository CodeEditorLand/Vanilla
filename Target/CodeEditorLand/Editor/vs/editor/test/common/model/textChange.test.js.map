{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/textChange.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { compressConsecutiveTextChanges, TextChange } from '../../../common/core/textChange.js';\n\nconst GENERATE_TESTS = false;\n\ninterface IGeneratedEdit {\n\toffset: number;\n\tlength: number;\n\ttext: string;\n}\n\nsuite('TextChangeCompressor', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction getResultingContent(initialContent: string, edits: IGeneratedEdit[]): string {\n\t\tlet content = initialContent;\n\t\tfor (let i = edits.length - 1; i >= 0; i--) {\n\t\t\tcontent = (\n\t\t\t\tcontent.substring(0, edits[i].offset) +\n\t\t\t\tedits[i].text +\n\t\t\t\tcontent.substring(edits[i].offset + edits[i].length)\n\t\t\t);\n\t\t}\n\t\treturn content;\n\t}\n\n\tfunction getTextChanges(initialContent: string, edits: IGeneratedEdit[]): TextChange[] {\n\t\tlet content = initialContent;\n\t\tconst changes: TextChange[] = new Array<TextChange>(edits.length);\n\t\tlet deltaOffset = 0;\n\n\t\tfor (let i = 0; i < edits.length; i++) {\n\t\t\tconst edit = edits[i];\n\n\t\t\tconst position = edit.offset + deltaOffset;\n\t\t\tconst length = edit.length;\n\t\t\tconst text = edit.text;\n\n\t\t\tconst oldText = content.substr(position, length);\n\n\t\t\tcontent = (\n\t\t\t\tcontent.substr(0, position) +\n\t\t\t\ttext +\n\t\t\t\tcontent.substr(position + length)\n\t\t\t);\n\n\t\t\tchanges[i] = new TextChange(edit.offset, oldText, position, text);\n\n\t\t\tdeltaOffset += text.length - length;\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\tfunction assertCompression(initialText: string, edit1: IGeneratedEdit[], edit2: IGeneratedEdit[]): void {\n\n\t\tconst tmpText = getResultingContent(initialText, edit1);\n\t\tconst chg1 = getTextChanges(initialText, edit1);\n\n\t\tconst finalText = getResultingContent(tmpText, edit2);\n\t\tconst chg2 = getTextChanges(tmpText, edit2);\n\n\t\tconst compressedTextChanges = compressConsecutiveTextChanges(chg1, chg2);\n\n\t\t// Check that the compression was correct\n\t\tconst compressedDoTextEdits: IGeneratedEdit[] = compressedTextChanges.map((change) => {\n\t\t\treturn {\n\t\t\t\toffset: change.oldPosition,\n\t\t\t\tlength: change.oldLength,\n\t\t\t\ttext: change.newText\n\t\t\t};\n\t\t});\n\t\tconst actualDoResult = getResultingContent(initialText, compressedDoTextEdits);\n\t\tassert.strictEqual(actualDoResult, finalText);\n\n\t\tconst compressedUndoTextEdits: IGeneratedEdit[] = compressedTextChanges.map((change) => {\n\t\t\treturn {\n\t\t\t\toffset: change.newPosition,\n\t\t\t\tlength: change.newLength,\n\t\t\t\ttext: change.oldText\n\t\t\t};\n\t\t});\n\t\tconst actualUndoResult = getResultingContent(finalText, compressedUndoTextEdits);\n\t\tassert.strictEqual(actualUndoResult, initialText);\n\t}\n\n\ttest('simple 1', () => {\n\t\tassertCompression(\n\t\t\t'',\n\t\t\t[{ offset: 0, length: 0, text: 'h' }],\n\t\t\t[{ offset: 1, length: 0, text: 'e' }]\n\t\t);\n\t});\n\n\ttest('simple 2', () => {\n\t\tassertCompression(\n\t\t\t'|',\n\t\t\t[{ offset: 0, length: 0, text: 'h' }],\n\t\t\t[{ offset: 2, length: 0, text: 'e' }]\n\t\t);\n\t});\n\n\ttest('complex1', () => {\n\t\tassertCompression(\n\t\t\t'abcdefghij',\n\t\t\t[\n\t\t\t\t{ offset: 0, length: 3, text: 'qh' },\n\t\t\t\t{ offset: 5, length: 0, text: '1' },\n\t\t\t\t{ offset: 8, length: 2, text: 'X' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ offset: 1, length: 0, text: 'Z' },\n\t\t\t\t{ offset: 3, length: 3, text: 'Y' },\n\t\t\t]\n\t\t);\n\t});\n\n\t// test('issue #118041', () => {\n\t// \tassertCompression(\n\t// \t\t'\uFEFF',\n\t// \t\t[\n\t// \t\t\t{ offset: 0, length: 1, text: '' },\n\t// \t\t],\n\t// \t\t[\n\t// \t\t\t{ offset: 1, length: 0, text: 'Z' },\n\t// \t\t\t{ offset: 3, length: 3, text: 'Y' },\n\t// \t\t]\n\t// \t);\n\t// })\n\n\ttest('gen1', () => {\n\t\tassertCompression(\n\t\t\t'kxm',\n\t\t\t[{ offset: 0, length: 1, text: 'tod_neu' }],\n\t\t\t[{ offset: 1, length: 2, text: 'sag_e' }]\n\t\t);\n\t});\n\n\ttest('gen2', () => {\n\t\tassertCompression(\n\t\t\t'kpb_r_v',\n\t\t\t[{ offset: 5, length: 2, text: 'a_jvf_l' }],\n\t\t\t[{ offset: 10, length: 2, text: 'w' }]\n\t\t);\n\t});\n\n\ttest('gen3', () => {\n\t\tassertCompression(\n\t\t\t'slu_w',\n\t\t\t[{ offset: 4, length: 1, text: '_wfw' }],\n\t\t\t[{ offset: 3, length: 5, text: '' }]\n\t\t);\n\t});\n\n\ttest('gen4', () => {\n\t\tassertCompression(\n\t\t\t'_e',\n\t\t\t[{ offset: 2, length: 0, text: 'zo_b' }],\n\t\t\t[{ offset: 1, length: 3, text: 'tra' }]\n\t\t);\n\t});\n\n\ttest('gen5', () => {\n\t\tassertCompression(\n\t\t\t'ssn_',\n\t\t\t[{ offset: 0, length: 2, text: 'tat_nwe' }],\n\t\t\t[{ offset: 2, length: 6, text: 'jm' }]\n\t\t);\n\t});\n\n\ttest('gen6', () => {\n\t\tassertCompression(\n\t\t\t'kl_nru',\n\t\t\t[{ offset: 4, length: 1, text: '' }],\n\t\t\t[{ offset: 1, length: 4, text: '__ut' }]\n\t\t);\n\t});\n\n\tconst _a = 'a'.charCodeAt(0);\n\tconst _z = 'z'.charCodeAt(0);\n\n\tfunction getRandomInt(min: number, max: number): number {\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n\t}\n\n\tfunction getRandomString(minLength: number, maxLength: number): string {\n\t\tconst length = getRandomInt(minLength, maxLength);\n\t\tlet r = '';\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tr += String.fromCharCode(getRandomInt(_a, _z));\n\t\t}\n\t\treturn r;\n\t}\n\n\tfunction getRandomEOL(): string {\n\t\tswitch (getRandomInt(1, 3)) {\n\t\t\tcase 1: return '\\r';\n\t\t\tcase 2: return '\\n';\n\t\t\tcase 3: return '\\r\\n';\n\t\t}\n\t\tthrow new Error(`not possible`);\n\t}\n\n\tfunction getRandomBuffer(small: boolean): string {\n\t\tconst lineCount = getRandomInt(1, small ? 3 : 10);\n\t\tconst lines: string[] = [];\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tlines.push(getRandomString(0, small ? 3 : 10) + getRandomEOL());\n\t\t}\n\t\treturn lines.join('');\n\t}\n\n\tfunction getRandomEdits(content: string, min: number = 1, max: number = 5): IGeneratedEdit[] {\n\n\t\tconst result: IGeneratedEdit[] = [];\n\t\tlet cnt = getRandomInt(min, max);\n\n\t\tlet maxOffset = content.length;\n\n\t\twhile (cnt > 0 && maxOffset > 0) {\n\n\t\t\tconst offset = getRandomInt(0, maxOffset);\n\t\t\tconst length = getRandomInt(0, maxOffset - offset);\n\t\t\tconst text = getRandomBuffer(true);\n\n\t\t\tresult.push({\n\t\t\t\toffset: offset,\n\t\t\t\tlength: length,\n\t\t\t\ttext: text\n\t\t\t});\n\n\t\t\tmaxOffset = offset;\n\t\t\tcnt--;\n\t\t}\n\n\t\tresult.reverse();\n\n\t\treturn result;\n\t}\n\n\tclass GeneratedTest {\n\n\t\tprivate readonly _content: string;\n\t\tprivate readonly _edits1: IGeneratedEdit[];\n\t\tprivate readonly _edits2: IGeneratedEdit[];\n\n\t\tconstructor() {\n\t\t\tthis._content = getRandomBuffer(false).replace(/\\n/g, '_');\n\t\t\tthis._edits1 = getRandomEdits(this._content, 1, 5).map((e) => { return { offset: e.offset, length: e.length, text: e.text.replace(/\\n/g, '_') }; });\n\t\t\tconst tmp = getResultingContent(this._content, this._edits1);\n\t\t\tthis._edits2 = getRandomEdits(tmp, 1, 5).map((e) => { return { offset: e.offset, length: e.length, text: e.text.replace(/\\n/g, '_') }; });\n\t\t}\n\n\t\tpublic print(): void {\n\t\t\tconsole.log(`assertCompression(${JSON.stringify(this._content)}, ${JSON.stringify(this._edits1)}, ${JSON.stringify(this._edits2)});`);\n\t\t}\n\n\t\tpublic assert(): void {\n\t\t\tassertCompression(this._content, this._edits1, this._edits2);\n\t\t}\n\t}\n\n\tif (GENERATE_TESTS) {\n\t\tlet testNumber = 0;\n\t\twhile (true) {\n\t\t\ttestNumber++;\n\t\t\tconsole.log(`------RUNNING TextChangeCompressor TEST ${testNumber}`);\n\t\t\tconst test = new GeneratedTest();\n\t\t\ttry {\n\t\t\t\ttest.assert();\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\ttest.print();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n});\n\nsuite('TextChange', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #118041: unicode character undo bug', () => {\n\t\tconst textChange = new TextChange(428, '\uFEFF', 428, '');\n\t\tconst buff = new Uint8Array(textChange.writeSize());\n\t\ttextChange.write(buff, 0);\n\t\tconst actual: TextChange[] = [];\n\t\tTextChange.read(buff, 0, actual);\n\t\tassert.deepStrictEqual(actual[0], textChange);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": ["test"]
}
