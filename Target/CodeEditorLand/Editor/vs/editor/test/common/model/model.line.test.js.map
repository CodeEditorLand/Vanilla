{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/model.line.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MetadataConsts } from '../../../common/encodedTokenAttributes.js';\nimport { EncodedTokenizationResult, IBackgroundTokenizationStore, IBackgroundTokenizer, IState, ITokenizationSupport, TokenizationRegistry, TokenizationResult } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { computeIndentLevel } from '../../../common/model/utils.js';\nimport { ContiguousMultilineTokensBuilder } from '../../../common/tokens/contiguousMultilineTokensBuilder.js';\nimport { LineTokens } from '../../../common/tokens/lineTokens.js';\nimport { TestLineToken, TestLineTokenFactory } from '../core/testLineToken.js';\nimport { createTextModel } from '../testTextModel.js';\n\ninterface ILineEdit {\n\tstartColumn: number;\n\tendColumn: number;\n\ttext: string;\n}\n\nfunction assertLineTokens(__actual: LineTokens, _expected: TestToken[]): void {\n\tconst tmp = TestToken.toTokens(_expected);\n\tLineTokens.convertToEndOffset(tmp, __actual.getLineContent().length);\n\tconst expected = TestLineTokenFactory.inflateArr(tmp);\n\tconst _actual = __actual.inflate();\n\tinterface ITestToken {\n\t\tendIndex: number;\n\t\ttype: string;\n\t}\n\tconst actual: ITestToken[] = [];\n\tfor (let i = 0, len = _actual.getCount(); i < len; i++) {\n\t\tactual[i] = {\n\t\t\tendIndex: _actual.getEndOffset(i),\n\t\t\ttype: _actual.getClassName(i)\n\t\t};\n\t}\n\tconst decode = (token: TestLineToken) => {\n\t\treturn {\n\t\t\tendIndex: token.endIndex,\n\t\t\ttype: token.getType()\n\t\t};\n\t};\n\tassert.deepStrictEqual(actual, expected.map(decode));\n}\n\nsuite('ModelLine - getIndentLevel', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertIndentLevel(text: string, expected: number, tabSize: number = 4): void {\n\t\tconst actual = computeIndentLevel(text, tabSize);\n\t\tassert.strictEqual(actual, expected, text);\n\t}\n\n\ttest('getIndentLevel', () => {\n\t\tassertIndentLevel('', -1);\n\t\tassertIndentLevel(' ', -1);\n\t\tassertIndentLevel('   \\t', -1);\n\t\tassertIndentLevel('Hello', 0);\n\t\tassertIndentLevel(' Hello', 1);\n\t\tassertIndentLevel('   Hello', 3);\n\t\tassertIndentLevel('\\tHello', 4);\n\t\tassertIndentLevel(' \\tHello', 4);\n\t\tassertIndentLevel('  \\tHello', 4);\n\t\tassertIndentLevel('   \\tHello', 4);\n\t\tassertIndentLevel('    \\tHello', 8);\n\t\tassertIndentLevel('     \\tHello', 8);\n\t\tassertIndentLevel('\\t Hello', 5);\n\t\tassertIndentLevel('\\t \\tHello', 8);\n\t});\n});\n\nclass TestToken {\n\tpublic readonly startOffset: number;\n\tpublic readonly color: number;\n\n\tconstructor(startOffset: number, color: number) {\n\t\tthis.startOffset = startOffset;\n\t\tthis.color = color;\n\t}\n\n\tpublic static toTokens(tokens: TestToken[]): Uint32Array;\n\tpublic static toTokens(tokens: TestToken[] | null): Uint32Array | null {\n\t\tif (tokens === null) {\n\t\t\treturn null;\n\t\t}\n\t\tconst tokensLen = tokens.length;\n\t\tconst result = new Uint32Array((tokensLen << 1));\n\t\tfor (let i = 0; i < tokensLen; i++) {\n\t\t\tconst token = tokens[i];\n\t\t\tresult[(i << 1)] = token.startOffset;\n\t\t\tresult[(i << 1) + 1] = (\n\t\t\t\ttoken.color << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t) >>> 0;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nclass ManualTokenizationSupport implements ITokenizationSupport {\n\tprivate readonly tokens = new Map<number, Uint32Array>();\n\tprivate readonly stores = new Set<IBackgroundTokenizationStore>();\n\n\tpublic setLineTokens(lineNumber: number, tokens: Uint32Array): void {\n\t\tconst b = new ContiguousMultilineTokensBuilder();\n\t\tb.add(lineNumber, tokens);\n\t\tfor (const s of this.stores) {\n\t\t\ts.setTokens(b.finalize());\n\t\t}\n\t}\n\n\tgetInitialState(): IState {\n\t\treturn new LineState(1);\n\t}\n\n\ttokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult {\n\t\tthrow new Error();\n\t}\n\n\ttokenizeEncoded(line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult {\n\t\tconst s = state as LineState;\n\t\treturn new EncodedTokenizationResult(this.tokens.get(s.lineNumber)!, new LineState(s.lineNumber + 1));\n\t}\n\n\t/**\n\t * Can be/return undefined if default background tokenization should be used.\n\t */\n\tcreateBackgroundTokenizer?(textModel: ITextModel, store: IBackgroundTokenizationStore): IBackgroundTokenizer | undefined {\n\t\tthis.stores.add(store);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.stores.delete(store);\n\t\t\t},\n\t\t\trequestTokens(startLineNumber, endLineNumberExclusive) {\n\t\t\t},\n\t\t};\n\t}\n}\n\nclass LineState implements IState {\n\tconstructor(public readonly lineNumber: number) { }\n\tclone(): IState {\n\t\treturn this;\n\t}\n\tequals(other: IState): boolean {\n\t\treturn (other as LineState).lineNumber === this.lineNumber;\n\t}\n}\n\nsuite('ModelLinesTokens', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tinterface IBufferLineState {\n\t\ttext: string;\n\t\ttokens: TestToken[];\n\t}\n\n\tinterface IEdit {\n\t\trange: Range;\n\t\ttext: string;\n\t}\n\n\tfunction testApplyEdits(initial: IBufferLineState[], edits: IEdit[], expected: IBufferLineState[]): void {\n\t\tconst initialText = initial.map(el => el.text).join('\\n');\n\n\t\tconst s = new ManualTokenizationSupport();\n\t\tconst d = TokenizationRegistry.register('test', s);\n\n\t\tconst model = createTextModel(initialText, 'test');\n\t\tmodel.onBeforeAttached();\n\t\tfor (let lineIndex = 0; lineIndex < initial.length; lineIndex++) {\n\t\t\tconst lineTokens = initial[lineIndex].tokens;\n\t\t\tconst lineTextLength = model.getLineMaxColumn(lineIndex + 1) - 1;\n\t\t\tconst tokens = TestToken.toTokens(lineTokens);\n\t\t\tLineTokens.convertToEndOffset(tokens, lineTextLength);\n\t\t\ts.setLineTokens(lineIndex + 1, tokens);\n\t\t}\n\n\t\tmodel.applyEdits(edits.map((ed) => ({\n\t\t\tidentifier: null,\n\t\t\trange: ed.range,\n\t\t\ttext: ed.text,\n\t\t\tforceMoveMarkers: false\n\t\t})));\n\n\t\tfor (let lineIndex = 0; lineIndex < expected.length; lineIndex++) {\n\t\t\tconst actualLine = model.getLineContent(lineIndex + 1);\n\t\t\tconst actualTokens = model.tokenization.getLineTokens(lineIndex + 1);\n\t\t\tassert.strictEqual(actualLine, expected[lineIndex].text);\n\t\t\tassertLineTokens(actualTokens, expected[lineIndex].tokens);\n\t\t}\n\n\t\tmodel.dispose();\n\t\td.dispose();\n\t}\n\n\ttest('single delete 1', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 1, 1, 2), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'ello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(4, 2), new TestToken(5, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single delete 2', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'helloworld',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 3, 1, 8), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'herld',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(2, 2)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single delete 3', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 1, 1, 6), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: ' world',\n\t\t\t\ttokens: [new TestToken(0, 2), new TestToken(1, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single delete 4', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 2, 1, 7), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'hworld',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(1, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single delete 5', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 1, 1, 12), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: '',\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi delete 6', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 4), new TestToken(5, 5), new TestToken(6, 6)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 7), new TestToken(5, 8), new TestToken(6, 9)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 6, 3, 6), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 8), new TestToken(6, 9)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi delete 7', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 4), new TestToken(5, 5), new TestToken(6, 6)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 7), new TestToken(5, 8), new TestToken(6, 9)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 12, 3, 12), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi delete 8', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 4), new TestToken(5, 5), new TestToken(6, 6)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 7), new TestToken(5, 8), new TestToken(6, 9)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 1, 3, 1), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 7), new TestToken(5, 8), new TestToken(6, 9)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi delete 9', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 4), new TestToken(5, 5), new TestToken(6, 6)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 7), new TestToken(5, 8), new TestToken(6, 9)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 12, 3, 1), text: '' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello worldhello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3), new TestToken(11, 7), new TestToken(16, 8), new TestToken(17, 9)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single insert 1', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 1, 1, 1), text: 'xx' }],\n\t\t\t[{\n\t\t\t\ttext: 'xxhello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(7, 2), new TestToken(8, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single insert 2', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 2, 1, 2), text: 'xx' }],\n\t\t\t[{\n\t\t\t\ttext: 'hxxello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(7, 2), new TestToken(8, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single insert 3', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 6, 1, 6), text: 'xx' }],\n\t\t\t[{\n\t\t\t\ttext: 'helloxx world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(7, 2), new TestToken(8, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single insert 4', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 7, 1, 7), text: 'xx' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello xxworld',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(8, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('single insert 5', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 12, 1, 12), text: 'xx' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello worldxx',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi insert 6', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 1, 1, 1), text: '\\n' }],\n\t\t\t[{\n\t\t\t\ttext: '',\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi insert 7', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 12, 1, 12), text: '\\n' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}, {\n\t\t\t\ttext: '',\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi insert 8', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 7, 1, 7), text: '\\n' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello ',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2)]\n\t\t\t}, {\n\t\t\t\ttext: 'world',\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('multi insert 9', () => {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2), new TestToken(6, 3)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 4), new TestToken(5, 5), new TestToken(6, 6)]\n\t\t\t}],\n\t\t\t[{ range: new Range(1, 7, 1, 7), text: 'xx\\nyy' }],\n\t\t\t[{\n\t\t\t\ttext: 'hello xx',\n\t\t\t\ttokens: [new TestToken(0, 1), new TestToken(5, 2)]\n\t\t\t}, {\n\t\t\t\ttext: 'yyworld',\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}, {\n\t\t\t\ttext: 'hello world',\n\t\t\t\ttokens: [new TestToken(0, 4), new TestToken(5, 5), new TestToken(6, 6)]\n\t\t\t}]\n\t\t);\n\t});\n\n\tfunction testLineEditTokens(initialText: string, initialTokens: TestToken[], edits: ILineEdit[], expectedText: string, expectedTokens: TestToken[]): void {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: initialText,\n\t\t\t\ttokens: initialTokens\n\t\t\t}],\n\t\t\tedits.map((ed) => ({\n\t\t\t\trange: new Range(1, ed.startColumn, 1, ed.endColumn),\n\t\t\t\ttext: ed.text\n\t\t\t})),\n\t\t\t[{\n\t\t\t\ttext: expectedText,\n\t\t\t\ttokens: expectedTokens\n\t\t\t}]\n\t\t);\n\t}\n\n\ttest('insertion on empty line', () => {\n\t\tconst s = new ManualTokenizationSupport();\n\t\tconst d = TokenizationRegistry.register('test', s);\n\n\t\tconst model = createTextModel('some text', 'test');\n\t\tconst tokens = TestToken.toTokens([new TestToken(0, 1)]);\n\t\tLineTokens.convertToEndOffset(tokens, model.getLineMaxColumn(1) - 1);\n\t\ts.setLineTokens(1, tokens);\n\n\t\tmodel.applyEdits([{\n\t\t\trange: new Range(1, 1, 1, 10),\n\t\t\ttext: ''\n\t\t}]);\n\n\t\ts.setLineTokens(1, new Uint32Array(0));\n\n\t\tmodel.applyEdits([{\n\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\ttext: 'a'\n\t\t}]);\n\n\t\tconst actualTokens = model.tokenization.getLineTokens(1);\n\t\tassertLineTokens(actualTokens, [new TestToken(0, 1)]);\n\n\t\tmodel.dispose();\n\t\td.dispose();\n\t});\n\n\ttest('updates tokens on insertion 1', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\ttext: 'a',\n\t\t\t}],\n\t\t\t'aabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(5, 2),\n\t\t\t\tnew TestToken(6, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 2', () => {\n\t\ttestLineEditTokens(\n\t\t\t'aabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(5, 2),\n\t\t\t\tnew TestToken(6, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 2,\n\t\t\t\tendColumn: 2,\n\t\t\t\ttext: 'x',\n\t\t\t}],\n\t\t\t'axabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(6, 2),\n\t\t\t\tnew TestToken(7, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 3', () => {\n\t\ttestLineEditTokens(\n\t\t\t'axabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(6, 2),\n\t\t\t\tnew TestToken(7, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 3,\n\t\t\t\tendColumn: 3,\n\t\t\t\ttext: 'stu',\n\t\t\t}],\n\t\t\t'axstuabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(9, 2),\n\t\t\t\tnew TestToken(10, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 4', () => {\n\t\ttestLineEditTokens(\n\t\t\t'axstuabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(9, 2),\n\t\t\t\tnew TestToken(10, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 10,\n\t\t\t\tendColumn: 10,\n\t\t\t\ttext: '\\t',\n\t\t\t}],\n\t\t\t'axstuabcd\\t efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(10, 2),\n\t\t\t\tnew TestToken(11, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 5', () => {\n\t\ttestLineEditTokens(\n\t\t\t'axstuabcd\\t efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(10, 2),\n\t\t\t\tnew TestToken(11, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 12,\n\t\t\t\tendColumn: 12,\n\t\t\t\ttext: 'dd',\n\t\t\t}],\n\t\t\t'axstuabcd\\t ddefgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(10, 2),\n\t\t\t\tnew TestToken(13, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 6', () => {\n\t\ttestLineEditTokens(\n\t\t\t'axstuabcd\\t ddefgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(10, 2),\n\t\t\t\tnew TestToken(13, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 18,\n\t\t\t\tendColumn: 18,\n\t\t\t\ttext: 'xyz',\n\t\t\t}],\n\t\t\t'axstuabcd\\t ddefghxyz',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(10, 2),\n\t\t\t\tnew TestToken(13, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 7', () => {\n\t\ttestLineEditTokens(\n\t\t\t'axstuabcd\\t ddefghxyz',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(10, 2),\n\t\t\t\tnew TestToken(13, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\ttext: 'x',\n\t\t\t}],\n\t\t\t'xaxstuabcd\\t ddefghxyz',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(11, 2),\n\t\t\t\tnew TestToken(14, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 8', () => {\n\t\ttestLineEditTokens(\n\t\t\t'xaxstuabcd\\t ddefghxyz',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(11, 2),\n\t\t\t\tnew TestToken(14, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 22,\n\t\t\t\tendColumn: 22,\n\t\t\t\ttext: 'x',\n\t\t\t}],\n\t\t\t'xaxstuabcd\\t ddefghxyzx',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(11, 2),\n\t\t\t\tnew TestToken(14, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 9', () => {\n\t\ttestLineEditTokens(\n\t\t\t'xaxstuabcd\\t ddefghxyzx',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(11, 2),\n\t\t\t\tnew TestToken(14, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 2,\n\t\t\t\tendColumn: 2,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'xaxstuabcd\\t ddefghxyzx',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(11, 2),\n\t\t\t\tnew TestToken(14, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on insertion 10', () => {\n\t\ttestLineEditTokens(\n\t\t\t'',\n\t\t\t[],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\ttext: 'a',\n\t\t\t}],\n\t\t\t'a',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete second token 2', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcdefghij',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(3, 2),\n\t\t\t\tnew TestToken(6, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 4,\n\t\t\t\tendColumn: 7,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'abcghij',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(3, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('insert right before second token', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcdefghij',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(3, 2),\n\t\t\t\tnew TestToken(6, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 4,\n\t\t\t\tendColumn: 4,\n\t\t\t\ttext: 'hello',\n\t\t\t}],\n\t\t\t'abchellodefghij',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(8, 2),\n\t\t\t\tnew TestToken(11, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete first char', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 2,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'bcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(3, 2),\n\t\t\t\tnew TestToken(4, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete 2nd and 3rd chars', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 2,\n\t\t\t\tendColumn: 4,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'ad efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(2, 2),\n\t\t\t\tnew TestToken(3, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete first token', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 5,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t' efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 2),\n\t\t\t\tnew TestToken(1, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete second token', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 5,\n\t\t\t\tendColumn: 6,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'abcdefgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete second token + a bit of the third one', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 5,\n\t\t\t\tendColumn: 7,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'abcdfgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete second and third token', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 5,\n\t\t\t\tendColumn: 10,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'abcd',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('delete everything', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 10,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('noop', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('equivalent to deleting first two chars', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 3,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'cd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(2, 2),\n\t\t\t\tnew TestToken(3, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('equivalent to deleting from 5 to the end', () => {\n\t\ttestLineEditTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 5,\n\t\t\t\tendColumn: 10,\n\t\t\t\ttext: '',\n\t\t\t}],\n\t\t\t'abcd',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on replace 1', () => {\n\t\ttestLineEditTokens(\n\t\t\t'Hello world, ciao',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(5, 0),\n\t\t\t\tnew TestToken(6, 2),\n\t\t\t\tnew TestToken(11, 0),\n\t\t\t\tnew TestToken(13, 0)\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 6,\n\t\t\t\ttext: 'Hi',\n\t\t\t}],\n\t\t\t'Hi world, ciao',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 0),\n\t\t\t\tnew TestToken(3, 2),\n\t\t\t\tnew TestToken(8, 0),\n\t\t\t\tnew TestToken(10, 0),\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('updates tokens on replace 2', () => {\n\t\ttestLineEditTokens(\n\t\t\t'Hello world, ciao',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(5, 0),\n\t\t\t\tnew TestToken(6, 2),\n\t\t\t\tnew TestToken(11, 0),\n\t\t\t\tnew TestToken(13, 0),\n\t\t\t],\n\t\t\t[{\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: 6,\n\t\t\t\ttext: 'Hi',\n\t\t\t}, {\n\t\t\t\tstartColumn: 8,\n\t\t\t\tendColumn: 12,\n\t\t\t\ttext: 'my friends',\n\t\t\t}],\n\t\t\t'Hi wmy friends, ciao',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 0),\n\t\t\t\tnew TestToken(3, 2),\n\t\t\t\tnew TestToken(14, 0),\n\t\t\t\tnew TestToken(16, 0),\n\t\t\t]\n\t\t);\n\t});\n\n\tfunction testLineSplitTokens(initialText: string, initialTokens: TestToken[], splitColumn: number, expectedText1: string, expectedText2: string, expectedTokens: TestToken[]): void {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: initialText,\n\t\t\t\ttokens: initialTokens\n\t\t\t}],\n\t\t\t[{\n\t\t\t\trange: new Range(1, splitColumn, 1, splitColumn),\n\t\t\t\ttext: '\\n'\n\t\t\t}],\n\t\t\t[{\n\t\t\t\ttext: expectedText1,\n\t\t\t\ttokens: expectedTokens\n\t\t\t}, {\n\t\t\t\ttext: expectedText2,\n\t\t\t\ttokens: [new TestToken(0, 1)]\n\t\t\t}]\n\t\t);\n\t}\n\n\ttest('split at the beginning', () => {\n\t\ttestLineSplitTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t1,\n\t\t\t'',\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('split at the end', () => {\n\t\ttestLineSplitTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t10,\n\t\t\t'abcd efgh',\n\t\t\t'',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('split inthe middle 1', () => {\n\t\ttestLineSplitTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t5,\n\t\t\t'abcd',\n\t\t\t' efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('split inthe middle 2', () => {\n\t\ttestLineSplitTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t6,\n\t\t\t'abcd ',\n\t\t\t'efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2)\n\t\t\t]\n\t\t);\n\t});\n\n\tfunction testLineAppendTokens(aText: string, aTokens: TestToken[], bText: string, bTokens: TestToken[], expectedText: string, expectedTokens: TestToken[]): void {\n\t\ttestApplyEdits(\n\t\t\t[{\n\t\t\t\ttext: aText,\n\t\t\t\ttokens: aTokens\n\t\t\t}, {\n\t\t\t\ttext: bText,\n\t\t\t\ttokens: bTokens\n\t\t\t}],\n\t\t\t[{\n\t\t\t\trange: new Range(1, aText.length + 1, 2, 1),\n\t\t\t\ttext: ''\n\t\t\t}],\n\t\t\t[{\n\t\t\t\ttext: expectedText,\n\t\t\t\ttokens: expectedTokens\n\t\t\t}]\n\t\t);\n\t}\n\n\ttest('append empty 1', () => {\n\t\ttestLineAppendTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t'',\n\t\t\t[],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('append empty 2', () => {\n\t\ttestLineAppendTokens(\n\t\t\t'',\n\t\t\t[],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('append 1', () => {\n\t\ttestLineAppendTokens(\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 4),\n\t\t\t\tnew TestToken(4, 5),\n\t\t\t\tnew TestToken(5, 6)\n\t\t\t],\n\t\t\t'abcd efghabcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3),\n\t\t\t\tnew TestToken(9, 4),\n\t\t\t\tnew TestToken(13, 5),\n\t\t\t\tnew TestToken(14, 6)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('append 2', () => {\n\t\ttestLineAppendTokens(\n\t\t\t'abcd ',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2)\n\t\t\t],\n\t\t\t'efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 3)\n\t\t\t],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('append 3', () => {\n\t\ttestLineAppendTokens(\n\t\t\t'abcd',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t],\n\t\t\t' efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 2),\n\t\t\t\tnew TestToken(1, 3)\n\t\t\t],\n\t\t\t'abcd efgh',\n\t\t\t[\n\t\t\t\tnew TestToken(0, 1),\n\t\t\t\tnew TestToken(4, 2),\n\t\t\t\tnew TestToken(5, 3)\n\t\t\t]\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
