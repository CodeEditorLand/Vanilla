{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/tokensStore.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ColorId, FontStyle, MetadataConsts, TokenMetadata } from '../../../common/encodedTokenAttributes.js';\nimport { ILanguageConfigurationService, LanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { TextModel } from '../../../common/model/textModel.js';\nimport { LanguageIdCodec } from '../../../common/services/languagesRegistry.js';\nimport { LineTokens } from '../../../common/tokens/lineTokens.js';\nimport { SparseMultilineTokens } from '../../../common/tokens/sparseMultilineTokens.js';\nimport { SparseTokensStore } from '../../../common/tokens/sparseTokensStore.js';\nimport { createModelServices, createTextModel, instantiateTextModel } from '../testTextModel.js';\n\nsuite('TokensStore', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst SEMANTIC_COLOR = 5 as ColorId;\n\n\tfunction parseTokensState(state: string[]): { text: string; tokens: SparseMultilineTokens } {\n\t\tconst text: string[] = [];\n\t\tconst tokens: number[] = [];\n\t\tlet baseLine = 1;\n\t\tfor (let i = 0; i < state.length; i++) {\n\t\t\tconst line = state[i];\n\n\t\t\tlet startOffset = 0;\n\t\t\tlet lineText = '';\n\t\t\twhile (true) {\n\t\t\t\tconst firstPipeOffset = line.indexOf('|', startOffset);\n\t\t\t\tif (firstPipeOffset === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst secondPipeOffset = line.indexOf('|', firstPipeOffset + 1);\n\t\t\t\tif (secondPipeOffset === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (firstPipeOffset + 1 === secondPipeOffset) {\n\t\t\t\t\t// skip ||\n\t\t\t\t\tlineText += line.substring(startOffset, secondPipeOffset + 1);\n\t\t\t\t\tstartOffset = secondPipeOffset + 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlineText += line.substring(startOffset, firstPipeOffset);\n\t\t\t\tconst tokenStartCharacter = lineText.length;\n\t\t\t\tconst tokenLength = secondPipeOffset - firstPipeOffset - 1;\n\t\t\t\tconst metadata = (\n\t\t\t\t\tSEMANTIC_COLOR << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t\t\t| MetadataConsts.SEMANTIC_USE_FOREGROUND\n\t\t\t\t);\n\n\t\t\t\tif (tokens.length === 0) {\n\t\t\t\t\tbaseLine = i + 1;\n\t\t\t\t}\n\t\t\t\ttokens.push(i + 1 - baseLine, tokenStartCharacter, tokenStartCharacter + tokenLength, metadata);\n\n\t\t\t\tlineText += line.substr(firstPipeOffset + 1, tokenLength);\n\t\t\t\tstartOffset = secondPipeOffset + 1;\n\t\t\t}\n\n\t\t\tlineText += line.substring(startOffset);\n\n\t\t\ttext.push(lineText);\n\t\t}\n\n\t\treturn {\n\t\t\ttext: text.join('\\n'),\n\t\t\ttokens: SparseMultilineTokens.create(baseLine, new Uint32Array(tokens))\n\t\t};\n\t}\n\n\tfunction extractState(model: TextModel): string[] {\n\t\tconst result: string[] = [];\n\t\tfor (let lineNumber = 1; lineNumber <= model.getLineCount(); lineNumber++) {\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\n\t\t\tlet lineText = '';\n\t\t\tfor (let i = 0; i < lineTokens.getCount(); i++) {\n\t\t\t\tconst tokenStartCharacter = lineTokens.getStartOffset(i);\n\t\t\t\tconst tokenEndCharacter = lineTokens.getEndOffset(i);\n\t\t\t\tconst metadata = lineTokens.getMetadata(i);\n\t\t\t\tconst color = TokenMetadata.getForeground(metadata);\n\t\t\t\tconst tokenText = lineContent.substring(tokenStartCharacter, tokenEndCharacter);\n\t\t\t\tif (color === SEMANTIC_COLOR) {\n\t\t\t\t\tlineText += `|${tokenText}|`;\n\t\t\t\t} else {\n\t\t\t\t\tlineText += tokenText;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(lineText);\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction testTokensAdjustment(rawInitialState: string[], edits: ISingleEditOperation[], rawFinalState: string[]) {\n\t\tconst initialState = parseTokensState(rawInitialState);\n\t\tconst model = createTextModel(initialState.text);\n\t\tmodel.tokenization.setSemanticTokens([initialState.tokens], true);\n\n\t\tmodel.applyEdits(edits);\n\n\t\tconst actualState = extractState(model);\n\t\tassert.deepStrictEqual(actualState, rawFinalState);\n\n\t\tmodel.dispose();\n\t}\n\n\ttest('issue #86303 - color shifting between different tokens', () => {\n\t\ttestTokensAdjustment(\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';`,\n\t\t\t\t`const foo = |URI|.parse('hey');`\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ range: new Range(2, 9, 2, 10), text: '' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';`,\n\t\t\t\t`const fo = |URI|.parse('hey');`\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('deleting a newline', () => {\n\t\ttestTokensAdjustment(\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';`,\n\t\t\t\t`const foo = |URI|.parse('hey');`\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ range: new Range(1, 42, 2, 1), text: '' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';const foo = |URI|.parse('hey');`\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('inserting a newline', () => {\n\t\ttestTokensAdjustment(\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';const foo = |URI|.parse('hey');`\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ range: new Range(1, 42, 1, 42), text: '\\n' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';`,\n\t\t\t\t`const foo = |URI|.parse('hey');`\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('deleting a newline 2', () => {\n\t\ttestTokensAdjustment(\n\t\t\t[\n\t\t\t\t`import { `,\n\t\t\t\t`    |URI| } from 'vs/base/common/uri';const foo = |URI|.parse('hey');`\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ range: new Range(1, 10, 2, 5), text: '' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t`import { |URI| } from 'vs/base/common/uri';const foo = |URI|.parse('hey');`\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('issue #179268: a complex edit', () => {\n\t\ttestTokensAdjustment(\n\t\t\t[\n\t\t\t\t`|export| |'interior_material_selector.dart'|;`,\n\t\t\t\t`|export| |'mileage_selector.dart'|;`,\n\t\t\t\t`|export| |'owners_selector.dart'|;`,\n\t\t\t\t`|export| |'price_selector.dart'|;`,\n\t\t\t\t`|export| |'seat_count_selector.dart'|;`,\n\t\t\t\t`|export| |'year_selector.dart'|;`,\n\t\t\t\t`|export| |'winter_options_selector.dart'|;|export| |'camera_selector.dart'|;`\n\t\t\t],\n\t\t\t[\n\t\t\t\t{ range: new Range(1, 9, 1, 9), text: `camera_selector.dart';\\nexport '` },\n\t\t\t\t{ range: new Range(6, 9, 7, 9), text: `` },\n\t\t\t\t{ range: new Range(7, 39, 7, 39), text: `\\n` },\n\t\t\t\t{ range: new Range(7, 47, 7, 48), text: `ye` },\n\t\t\t\t{ range: new Range(7, 49, 7, 51), text: `` },\n\t\t\t\t{ range: new Range(7, 52, 7, 53), text: `` },\n\t\t\t],\n\t\t\t[\n\t\t\t\t`|export| |'|camera_selector.dart';`,\n\t\t\t\t`export 'interior_material_selector.dart';`,\n\t\t\t\t`|export| |'mileage_selector.dart'|;`,\n\t\t\t\t`|export| |'owners_selector.dart'|;`,\n\t\t\t\t`|export| |'price_selector.dart'|;`,\n\t\t\t\t`|export| |'seat_count_selector.dart'|;`,\n\t\t\t\t`|export| |'||winter_options_selector.dart'|;`,\n\t\t\t\t`|export| |'year_selector.dart'|;`\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('issue #91936: Semantic token color highlighting fails on line with selected text', () => {\n\t\tconst model = createTextModel('                    else if ($s = 08) then \\'\\\\b\\'');\n\t\tmodel.tokenization.setSemanticTokens([\n\t\t\tSparseMultilineTokens.create(1, new Uint32Array([\n\t\t\t\t0, 20, 24, 0b01111000000000010000,\n\t\t\t\t0, 25, 27, 0b01111000000000010000,\n\t\t\t\t0, 28, 29, 0b00001000000000010000,\n\t\t\t\t0, 29, 31, 0b10000000000000010000,\n\t\t\t\t0, 32, 33, 0b00001000000000010000,\n\t\t\t\t0, 34, 36, 0b00110000000000010000,\n\t\t\t\t0, 36, 37, 0b00001000000000010000,\n\t\t\t\t0, 38, 42, 0b01111000000000010000,\n\t\t\t\t0, 43, 47, 0b01011000000000010000,\n\t\t\t]))\n\t\t], true);\n\t\tconst lineTokens = model.tokenization.getLineTokens(1);\n\t\tconst decodedTokens: number[] = [];\n\t\tfor (let i = 0, len = lineTokens.getCount(); i < len; i++) {\n\t\t\tdecodedTokens.push(lineTokens.getEndOffset(i), lineTokens.getMetadata(i));\n\t\t}\n\n\t\tassert.deepStrictEqual(decodedTokens, [\n\t\t\t20, 0b10000000001000010000000001,\n\t\t\t24, 0b10000001111000010000000001,\n\t\t\t25, 0b10000000001000010000000001,\n\t\t\t27, 0b10000001111000010000000001,\n\t\t\t28, 0b10000000001000010000000001,\n\t\t\t29, 0b10000000001000010000000001,\n\t\t\t31, 0b10000010000000010000000001,\n\t\t\t32, 0b10000000001000010000000001,\n\t\t\t33, 0b10000000001000010000000001,\n\t\t\t34, 0b10000000001000010000000001,\n\t\t\t36, 0b10000000110000010000000001,\n\t\t\t37, 0b10000000001000010000000001,\n\t\t\t38, 0b10000000001000010000000001,\n\t\t\t42, 0b10000001111000010000000001,\n\t\t\t43, 0b10000000001000010000000001,\n\t\t\t47, 0b10000001011000010000000001\n\t\t]);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('issue #147944: Language id \"vs.editor.nullLanguage\" is not configured nor known', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposables, [\n\t\t\t[ILanguageConfigurationService, LanguageConfigurationService]\n\t\t]);\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, '--[[\\n\\n]]'));\n\t\tmodel.tokenization.setSemanticTokens([\n\t\t\tSparseMultilineTokens.create(1, new Uint32Array([\n\t\t\t\t0, 2, 4, 0b100000000000010000,\n\t\t\t\t1, 0, 0, 0b100000000000010000,\n\t\t\t\t2, 0, 2, 0b100000000000010000,\n\t\t\t]))\n\t\t], true);\n\t\tassert.strictEqual(model.getWordAtPosition(new Position(2, 1)), null);\n\t\tdisposables.dispose();\n\t});\n\n\ttest('partial tokens 1', () => {\n\t\tconst codec = new LanguageIdCodec();\n\t\tconst store = new SparseTokensStore(codec);\n\n\t\t// setPartial: [1,1 -> 31,2], [(5,5-10),(10,5-10),(15,5-10),(20,5-10),(25,5-10),(30,5-10)]\n\t\tstore.setPartial(new Range(1, 1, 31, 2), [\n\t\t\tSparseMultilineTokens.create(5, new Uint32Array([\n\t\t\t\t0, 5, 10, 1,\n\t\t\t\t5, 5, 10, 2,\n\t\t\t\t10, 5, 10, 3,\n\t\t\t\t15, 5, 10, 4,\n\t\t\t\t20, 5, 10, 5,\n\t\t\t\t25, 5, 10, 6,\n\t\t\t]))\n\t\t]);\n\n\t\t// setPartial: [18,1 -> 42,1], [(20,5-10),(25,5-10),(30,5-10),(35,5-10),(40,5-10)]\n\t\tstore.setPartial(new Range(18, 1, 42, 1), [\n\t\t\tSparseMultilineTokens.create(20, new Uint32Array([\n\t\t\t\t0, 5, 10, 4,\n\t\t\t\t5, 5, 10, 5,\n\t\t\t\t10, 5, 10, 6,\n\t\t\t\t15, 5, 10, 7,\n\t\t\t\t20, 5, 10, 8,\n\t\t\t]))\n\t\t]);\n\n\t\t// setPartial: [1,1 -> 31,2], [(5,5-10),(10,5-10),(15,5-10),(20,5-10),(25,5-10),(30,5-10)]\n\t\tstore.setPartial(new Range(1, 1, 31, 2), [\n\t\t\tSparseMultilineTokens.create(5, new Uint32Array([\n\t\t\t\t0, 5, 10, 1,\n\t\t\t\t5, 5, 10, 2,\n\t\t\t\t10, 5, 10, 3,\n\t\t\t\t15, 5, 10, 4,\n\t\t\t\t20, 5, 10, 5,\n\t\t\t\t25, 5, 10, 6,\n\t\t\t]))\n\t\t]);\n\n\t\tconst lineTokens = store.addSparseTokens(10, new LineTokens(new Uint32Array([12, 1]), `enum Enum1 {`, codec));\n\t\tassert.strictEqual(lineTokens.getCount(), 3);\n\t});\n\n\ttest('partial tokens 2', () => {\n\t\tconst codec = new LanguageIdCodec();\n\t\tconst store = new SparseTokensStore(codec);\n\n\t\t// setPartial: [1,1 -> 31,2], [(5,5-10),(10,5-10),(15,5-10),(20,5-10),(25,5-10),(30,5-10)]\n\t\tstore.setPartial(new Range(1, 1, 31, 2), [\n\t\t\tSparseMultilineTokens.create(5, new Uint32Array([\n\t\t\t\t0, 5, 10, 1,\n\t\t\t\t5, 5, 10, 2,\n\t\t\t\t10, 5, 10, 3,\n\t\t\t\t15, 5, 10, 4,\n\t\t\t\t20, 5, 10, 5,\n\t\t\t\t25, 5, 10, 6,\n\t\t\t]))\n\t\t]);\n\n\t\t// setPartial: [6,1 -> 36,2], [(10,5-10),(15,5-10),(20,5-10),(25,5-10),(30,5-10),(35,5-10)]\n\t\tstore.setPartial(new Range(6, 1, 36, 2), [\n\t\t\tSparseMultilineTokens.create(10, new Uint32Array([\n\t\t\t\t0, 5, 10, 2,\n\t\t\t\t5, 5, 10, 3,\n\t\t\t\t10, 5, 10, 4,\n\t\t\t\t15, 5, 10, 5,\n\t\t\t\t20, 5, 10, 6,\n\t\t\t]))\n\t\t]);\n\n\t\t// setPartial: [17,1 -> 42,1], [(20,5-10),(25,5-10),(30,5-10),(35,5-10),(40,5-10)]\n\t\tstore.setPartial(new Range(17, 1, 42, 1), [\n\t\t\tSparseMultilineTokens.create(20, new Uint32Array([\n\t\t\t\t0, 5, 10, 4,\n\t\t\t\t5, 5, 10, 5,\n\t\t\t\t10, 5, 10, 6,\n\t\t\t\t15, 5, 10, 7,\n\t\t\t\t20, 5, 10, 8,\n\t\t\t]))\n\t\t]);\n\n\t\tconst lineTokens = store.addSparseTokens(20, new LineTokens(new Uint32Array([12, 1]), `enum Enum1 {`, codec));\n\t\tassert.strictEqual(lineTokens.getCount(), 3);\n\t});\n\n\ttest('partial tokens 3', () => {\n\t\tconst codec = new LanguageIdCodec();\n\t\tconst store = new SparseTokensStore(codec);\n\n\t\t// setPartial: [1,1 -> 31,2], [(5,5-10),(10,5-10),(15,5-10),(20,5-10),(25,5-10),(30,5-10)]\n\t\tstore.setPartial(new Range(1, 1, 31, 2), [\n\t\t\tSparseMultilineTokens.create(5, new Uint32Array([\n\t\t\t\t0, 5, 10, 1,\n\t\t\t\t5, 5, 10, 2,\n\t\t\t\t10, 5, 10, 3,\n\t\t\t\t15, 5, 10, 4,\n\t\t\t\t20, 5, 10, 5,\n\t\t\t\t25, 5, 10, 6,\n\t\t\t]))\n\t\t]);\n\n\t\t// setPartial: [11,1 -> 16,2], [(15,5-10),(20,5-10)]\n\t\tstore.setPartial(new Range(11, 1, 16, 2), [\n\t\t\tSparseMultilineTokens.create(10, new Uint32Array([\n\t\t\t\t0, 5, 10, 3,\n\t\t\t\t5, 5, 10, 4,\n\t\t\t]))\n\t\t]);\n\n\t\tconst lineTokens = store.addSparseTokens(5, new LineTokens(new Uint32Array([12, 1]), `enum Enum1 {`, codec));\n\t\tassert.strictEqual(lineTokens.getCount(), 3);\n\t});\n\n\ttest('issue #94133: Semantic colors stick around when using (only) range provider', () => {\n\t\tconst codec = new LanguageIdCodec();\n\t\tconst store = new SparseTokensStore(codec);\n\n\t\t// setPartial: [1,1 -> 1,20] [(1,9-11)]\n\t\tstore.setPartial(new Range(1, 1, 1, 20), [\n\t\t\tSparseMultilineTokens.create(1, new Uint32Array([\n\t\t\t\t0, 9, 11, 1,\n\t\t\t]))\n\t\t]);\n\n\t\t// setPartial: [1,1 -> 1,20], []\n\t\tstore.setPartial(new Range(1, 1, 1, 20), []);\n\n\t\tconst lineTokens = store.addSparseTokens(1, new LineTokens(new Uint32Array([12, 1]), `enum Enum1 {`, codec));\n\t\tassert.strictEqual(lineTokens.getCount(), 1);\n\t});\n\n\ttest('bug', () => {\n\t\tfunction createTokens(str: string): SparseMultilineTokens {\n\t\t\tstr = str.replace(/^\\[\\(/, '');\n\t\t\tstr = str.replace(/\\)\\]$/, '');\n\t\t\tconst strTokens = str.split('),(');\n\t\t\tconst result: number[] = [];\n\t\t\tlet firstLineNumber = 0;\n\t\t\tfor (const strToken of strTokens) {\n\t\t\t\tconst pieces = strToken.split(',');\n\t\t\t\tconst chars = pieces[1].split('-');\n\t\t\t\tconst lineNumber = parseInt(pieces[0], 10);\n\t\t\t\tconst startChar = parseInt(chars[0], 10);\n\t\t\t\tconst endChar = parseInt(chars[1], 10);\n\t\t\t\tif (firstLineNumber === 0) {\n\t\t\t\t\t// this is the first line\n\t\t\t\t\tfirstLineNumber = lineNumber;\n\t\t\t\t}\n\t\t\t\tresult.push(lineNumber - firstLineNumber, startChar, endChar, (lineNumber + startChar) % 13);\n\t\t\t}\n\t\t\treturn SparseMultilineTokens.create(firstLineNumber, new Uint32Array(result));\n\t\t}\n\n\t\tconst codec = new LanguageIdCodec();\n\t\tconst store = new SparseTokensStore(codec);\n\t\t// setPartial [36446,1 -> 36475,115] [(36448,24-29),(36448,33-46),(36448,47-54),(36450,25-35),(36450,36-50),(36451,28-33),(36451,36-49),(36451,50-57),(36452,35-53),(36452,54-62),(36454,33-38),(36454,41-54),(36454,55-60),(36455,35-53),(36455,54-62),(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62),(36466,33-71),(36466,72-76),(36467,35-53),(36467,54-62),(36469,24-29),(36469,33-46),(36469,47-54),(36470,24-35),(36470,38-46),(36473,25-35),(36473,36-51),(36474,28-33),(36474,36-49),(36474,50-58),(36475,35-53),(36475,54-62)]\n\t\tstore.setPartial(\n\t\t\tnew Range(36446, 1, 36475, 115),\n\t\t\t[createTokens('[(36448,24-29),(36448,33-46),(36448,47-54),(36450,25-35),(36450,36-50),(36451,28-33),(36451,36-49),(36451,50-57),(36452,35-53),(36452,54-62),(36454,33-38),(36454,41-54),(36454,55-60),(36455,35-53),(36455,54-62),(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62),(36466,33-71),(36466,72-76),(36467,35-53),(36467,54-62),(36469,24-29),(36469,33-46),(36469,47-54),(36470,24-35),(36470,38-46),(36473,25-35),(36473,36-51),(36474,28-33),(36474,36-49),(36474,50-58),(36475,35-53),(36475,54-62)]')]\n\t\t);\n\t\t// setPartial [36436,1 -> 36464,142] [(36437,33-37),(36437,38-42),(36437,47-57),(36437,58-67),(36438,35-53),(36438,54-62),(36440,24-29),(36440,33-46),(36440,47-53),(36442,25-35),(36442,36-50),(36443,30-39),(36443,42-46),(36443,47-53),(36443,54-58),(36443,63-73),(36443,74-84),(36443,87-91),(36443,92-98),(36443,101-105),(36443,106-112),(36443,113-119),(36444,28-37),(36444,38-42),(36444,47-57),(36444,58-75),(36444,80-95),(36444,96-105),(36445,35-53),(36445,54-62),(36448,24-29),(36448,33-46),(36448,47-54),(36450,25-35),(36450,36-50),(36451,28-33),(36451,36-49),(36451,50-57),(36452,35-53),(36452,54-62),(36454,33-38),(36454,41-54),(36454,55-60),(36455,35-53),(36455,54-62),(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62)]\n\t\tstore.setPartial(\n\t\t\tnew Range(36436, 1, 36464, 142),\n\t\t\t[createTokens('[(36437,33-37),(36437,38-42),(36437,47-57),(36437,58-67),(36438,35-53),(36438,54-62),(36440,24-29),(36440,33-46),(36440,47-53),(36442,25-35),(36442,36-50),(36443,30-39),(36443,42-46),(36443,47-53),(36443,54-58),(36443,63-73),(36443,74-84),(36443,87-91),(36443,92-98),(36443,101-105),(36443,106-112),(36443,113-119),(36444,28-37),(36444,38-42),(36444,47-57),(36444,58-75),(36444,80-95),(36444,96-105),(36445,35-53),(36445,54-62),(36448,24-29),(36448,33-46),(36448,47-54),(36450,25-35),(36450,36-50),(36451,28-33),(36451,36-49),(36451,50-57),(36452,35-53),(36452,54-62),(36454,33-38),(36454,41-54),(36454,55-60),(36455,35-53),(36455,54-62),(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62)]')]\n\t\t);\n\t\t// setPartial [36457,1 -> 36485,140] [(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62),(36466,33-71),(36466,72-76),(36467,35-53),(36467,54-62),(36469,24-29),(36469,33-46),(36469,47-54),(36470,24-35),(36470,38-46),(36473,25-35),(36473,36-51),(36474,28-33),(36474,36-49),(36474,50-58),(36475,35-53),(36475,54-62),(36477,28-32),(36477,33-37),(36477,42-52),(36477,53-69),(36478,32-36),(36478,37-41),(36478,46-56),(36478,57-74),(36479,32-36),(36479,37-41),(36479,46-56),(36479,57-76),(36480,32-36),(36480,37-41),(36480,46-56),(36480,57-68),(36481,32-36),(36481,37-41),(36481,46-56),(36481,57-68),(36482,39-57),(36482,58-66),(36484,34-38),(36484,39-45),(36484,46-50),(36484,55-65),(36484,66-82),(36484,86-97),(36484,98-102),(36484,103-109),(36484,111-124),(36484,125-133),(36485,39-57),(36485,58-66)]\n\t\tstore.setPartial(\n\t\t\tnew Range(36457, 1, 36485, 140),\n\t\t\t[createTokens('[(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62),(36466,33-71),(36466,72-76),(36467,35-53),(36467,54-62),(36469,24-29),(36469,33-46),(36469,47-54),(36470,24-35),(36470,38-46),(36473,25-35),(36473,36-51),(36474,28-33),(36474,36-49),(36474,50-58),(36475,35-53),(36475,54-62),(36477,28-32),(36477,33-37),(36477,42-52),(36477,53-69),(36478,32-36),(36478,37-41),(36478,46-56),(36478,57-74),(36479,32-36),(36479,37-41),(36479,46-56),(36479,57-76),(36480,32-36),(36480,37-41),(36480,46-56),(36480,57-68),(36481,32-36),(36481,37-41),(36481,46-56),(36481,57-68),(36482,39-57),(36482,58-66),(36484,34-38),(36484,39-45),(36484,46-50),(36484,55-65),(36484,66-82),(36484,86-97),(36484,98-102),(36484,103-109),(36484,111-124),(36484,125-133),(36485,39-57),(36485,58-66)]')]\n\t\t);\n\t\t// setPartial [36441,1 -> 36469,56] [(36442,25-35),(36442,36-50),(36443,30-39),(36443,42-46),(36443,47-53),(36443,54-58),(36443,63-73),(36443,74-84),(36443,87-91),(36443,92-98),(36443,101-105),(36443,106-112),(36443,113-119),(36444,28-37),(36444,38-42),(36444,47-57),(36444,58-75),(36444,80-95),(36444,96-105),(36445,35-53),(36445,54-62),(36448,24-29),(36448,33-46),(36448,47-54),(36450,25-35),(36450,36-50),(36451,28-33),(36451,36-49),(36451,50-57),(36452,35-53),(36452,54-62),(36454,33-38),(36454,41-54),(36454,55-60),(36455,35-53),(36455,54-62),(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62),(36466,33-71),(36466,72-76),(36467,35-53),(36467,54-62),(36469,24-29),(36469,33-46),(36469,47-54),(36470,24-35)]\n\t\tstore.setPartial(\n\t\t\tnew Range(36441, 1, 36469, 56),\n\t\t\t[createTokens('[(36442,25-35),(36442,36-50),(36443,30-39),(36443,42-46),(36443,47-53),(36443,54-58),(36443,63-73),(36443,74-84),(36443,87-91),(36443,92-98),(36443,101-105),(36443,106-112),(36443,113-119),(36444,28-37),(36444,38-42),(36444,47-57),(36444,58-75),(36444,80-95),(36444,96-105),(36445,35-53),(36445,54-62),(36448,24-29),(36448,33-46),(36448,47-54),(36450,25-35),(36450,36-50),(36451,28-33),(36451,36-49),(36451,50-57),(36452,35-53),(36452,54-62),(36454,33-38),(36454,41-54),(36454,55-60),(36455,35-53),(36455,54-62),(36457,33-44),(36457,45-49),(36457,50-56),(36457,62-83),(36457,84-88),(36458,35-53),(36458,54-62),(36460,33-37),(36460,38-42),(36460,47-57),(36460,58-67),(36461,35-53),(36461,54-62),(36463,34-38),(36463,39-45),(36463,46-51),(36463,54-63),(36463,64-71),(36463,76-80),(36463,81-87),(36463,88-92),(36463,97-107),(36463,108-119),(36464,35-53),(36464,54-62),(36466,33-71),(36466,72-76),(36467,35-53),(36467,54-62),(36469,24-29),(36469,33-46),(36469,47-54),(36470,24-35)]')]\n\t\t);\n\n\t\tconst lineTokens = store.addSparseTokens(36451, new LineTokens(new Uint32Array([60, 1]), `                        if (flags & ModifierFlags.Ambient) {`, codec));\n\t\tassert.strictEqual(lineTokens.getCount(), 7);\n\t});\n\n\n\ttest('issue #95949: Identifiers are colored in bold when targetting keywords', () => {\n\n\t\tfunction createTMMetadata(foreground: number, fontStyle: number, languageId: number): number {\n\t\t\treturn (\n\t\t\t\t(languageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t\t\t| (fontStyle << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t| (foreground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t) >>> 0;\n\t\t}\n\n\t\tfunction toArr(lineTokens: LineTokens): number[] {\n\t\t\tconst r: number[] = [];\n\t\t\tfor (let i = 0; i < lineTokens.getCount(); i++) {\n\t\t\t\tr.push(lineTokens.getEndOffset(i));\n\t\t\t\tr.push(lineTokens.getMetadata(i));\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\n\t\tconst codec = new LanguageIdCodec();\n\t\tconst store = new SparseTokensStore(codec);\n\n\t\tstore.set([\n\t\t\tSparseMultilineTokens.create(1, new Uint32Array([\n\t\t\t\t0, 6, 11, (1 << MetadataConsts.FOREGROUND_OFFSET) | MetadataConsts.SEMANTIC_USE_FOREGROUND,\n\t\t\t]))\n\t\t], true);\n\n\t\tconst lineTokens = store.addSparseTokens(1, new LineTokens(new Uint32Array([\n\t\t\t5, createTMMetadata(5, FontStyle.Bold, 53),\n\t\t\t14, createTMMetadata(1, FontStyle.None, 53),\n\t\t\t17, createTMMetadata(6, FontStyle.None, 53),\n\t\t\t18, createTMMetadata(1, FontStyle.None, 53),\n\t\t]), `const hello = 123;`, codec));\n\n\t\tconst actual = toArr(lineTokens);\n\t\tassert.deepStrictEqual(actual, [\n\t\t\t5, createTMMetadata(5, FontStyle.Bold, 53),\n\t\t\t6, createTMMetadata(1, FontStyle.None, 53),\n\t\t\t11, createTMMetadata(1, FontStyle.None, 53),\n\t\t\t14, createTMMetadata(1, FontStyle.None, 53),\n\t\t\t17, createTMMetadata(6, FontStyle.None, 53),\n\t\t\t18, createTMMetadata(1, FontStyle.None, 53)\n\t\t]);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["lineTokens"]
}
