import h from"assert";import{DisposableStore as A}from"../../../../base/common/lifecycle.js";import{Position as i}from"../../../common/core/position.js";import{Range as e}from"../../../common/core/range.js";import"../../../common/textModelBracketPairs.js";import"../../../common/model/textModel.js";import{TokenizationRegistry as N,EncodedTokenizationResult as L}from"../../../common/languages.js";import{StandardTokenType as G,MetadataConsts as S}from"../../../common/encodedTokenAttributes.js";import"../../../common/languages/languageConfiguration.js";import{ILanguageConfigurationService as B}from"../../../common/languages/languageConfigurationRegistry.js";import{NullState as O}from"../../../common/languages/nullTokenize.js";import{ILanguageService as E}from"../../../common/languages/language.js";import{TestLineToken as U}from"../core/testLineToken.js";import{createModelServices as M,createTextModel as _,instantiateTextModel as v}from"../testTextModel.js";import"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ensureNoDisposablesAreLeakedInTestSuite as F}from"../../../../base/test/common/utils.js";function y(n,t,o){const d="bracketMode2",c=M(n),b=c.get(B),s=c.get(E);return n.add(s.registerLanguage({id:d})),n.add(b.register(d,{brackets:o})),n.add(v(c,t,d))}suite("TextModelWithTokens",()=>{F();function n(t,o){const d="testMode",c=new A,b=M(c),s=b.get(B),f=b.get(E);c.add(f.registerLanguage({id:d})),c.add(s.register(d,{brackets:o}));function l(a){return a?{range:a.range.toString(),info:a.bracketInfo}:null}const r={},w={},m={},u={};o.forEach(a=>{r[a[0]]=!0,r[a[1]]=!0,w[a[0]]=!0,w[a[1]]=!1,m[a[0]]=a[0],u[a[0]]=a[1],m[a[1]]=a[0],u[a[1]]=a[1]});const p=[];for(let a=0;a<t.length;a++){const g=t[a];for(let k=0;k<g.length;k++){const z=g.charAt(k);r[z]&&p.push({bracketInfo:s.getLanguageConfiguration(d).bracketsNew.getBracketInfo(z),range:new e(a+1,k+1,a+1,k+2)})}}const C=c.add(v(b,t.join(`
`),d));{let a=p.length-1,g=a>=0?p[a]:null;for(let k=t.length;k>=1;k--){const z=t[k-1];for(let T=z.length+1;T>=1;T--){g&&k===g.range.startLineNumber&&T<g.range.endColumn&&(a--,g=a>=0?p[a]:null);const P=C.bracketPairs.findPrevBracket({lineNumber:k,column:T});h.deepStrictEqual(l(P),l(g),"findPrevBracket of "+k+", "+T)}}}{let a=0,g=a<p.length?p[a]:null;for(let k=1;k<=t.length;k++){const z=t[k-1];for(let T=1;T<=z.length+1;T++){g&&k===g.range.startLineNumber&&T>g.range.startColumn&&(a++,g=a<p.length?p[a]:null);const P=C.bracketPairs.findNextBracket({lineNumber:k,column:T});h.deepStrictEqual(l(P),l(g),"findNextBracket of "+k+", "+T)}}}c.dispose()}test("brackets1",()=>{n(["if (a == 3) { return (7 * (a + 5)); }"],[["{","}"],["[","]"],["(",")"]])})});function x(n,t,o){const d=n.bracketPairs.matchBracket(new i(t,o));h.strictEqual(d,null,"is not matching brackets at "+t+", "+o)}function I(n,t,o){o.sort(e.compareRangesUsingStarts);const d=n.bracketPairs.matchBracket(t);d?.sort(e.compareRangesUsingStarts),h.deepStrictEqual(d,o,"matches brackets at "+t)}suite("TextModelWithTokens - bracket matching",()=>{const n="bracketMode1";let t,o,d,c;setup(()=>{t=new A,o=M(t),d=o.get(B),c=o.get(E),t.add(c.registerLanguage({id:n})),t.add(d.register(n,{brackets:[["{","}"],["[","]"],["(",")"]]}))}),teardown(()=>{t.dispose()}),F(),test("bracket matching 1",()=>{const s=t.add(v(o,`)]}{[(
)]}{[(`,n));x(s,1,1),x(s,1,2),x(s,1,3),I(s,new i(1,4),[new e(1,4,1,5),new e(2,3,2,4)]),I(s,new i(1,5),[new e(1,5,1,6),new e(2,2,2,3)]),I(s,new i(1,6),[new e(1,6,1,7),new e(2,1,2,2)]),I(s,new i(1,7),[new e(1,6,1,7),new e(2,1,2,2)]),I(s,new i(2,1),[new e(2,1,2,2),new e(1,6,1,7)]),I(s,new i(2,2),[new e(2,2,2,3),new e(1,5,1,6)]),I(s,new i(2,3),[new e(2,3,2,4),new e(1,4,1,5)]),I(s,new i(2,4),[new e(2,3,2,4),new e(1,4,1,5)]),x(s,2,5),x(s,2,6),x(s,2,7)}),test("bracket matching 2",()=>{const s=t.add(v(o,`var bar = {
foo: {
}, bar: {hallo: [{
}, {
}]}}`,n)),f=[[new i(1,11),new e(1,11,1,12),new e(5,4,5,5)],[new i(1,12),new e(1,11,1,12),new e(5,4,5,5)],[new i(2,6),new e(2,6,2,7),new e(3,1,3,2)],[new i(2,7),new e(2,6,2,7),new e(3,1,3,2)],[new i(3,1),new e(3,1,3,2),new e(2,6,2,7)],[new i(3,2),new e(3,1,3,2),new e(2,6,2,7)],[new i(3,9),new e(3,9,3,10),new e(5,3,5,4)],[new i(3,10),new e(3,9,3,10),new e(5,3,5,4)],[new i(3,17),new e(3,17,3,18),new e(5,2,5,3)],[new i(3,18),new e(3,18,3,19),new e(4,1,4,2)],[new i(3,19),new e(3,18,3,19),new e(4,1,4,2)],[new i(4,1),new e(4,1,4,2),new e(3,18,3,19)],[new i(4,2),new e(4,1,4,2),new e(3,18,3,19)],[new i(4,4),new e(4,4,4,5),new e(5,1,5,2)],[new i(4,5),new e(4,4,4,5),new e(5,1,5,2)],[new i(5,1),new e(5,1,5,2),new e(4,4,4,5)],[new i(5,2),new e(5,2,5,3),new e(3,17,3,18)],[new i(5,3),new e(5,3,5,4),new e(3,9,3,10)],[new i(5,4),new e(5,4,5,5),new e(1,11,1,12)],[new i(5,5),new e(5,4,5,5),new e(1,11,1,12)]],l={1:{},2:{},3:{},4:{},5:{}};for(let r=0,w=f.length;r<w;r++){const[m,u,p]=f[r];I(s,m,[u,p]),l[m.lineNumber][m.column]=!0}for(let r=1,w=s.getLineCount();r<=w;r++){const m=s.getLineContent(r);for(let u=1,p=m.length+1;u<=p;u++)l[r].hasOwnProperty(u)||x(s,r,u)}})}),suite("TextModelWithTokens 2",()=>{F(),test("bracket matching 3",()=>{const n=["begin","    loop","        if then","        end if;","    end loop;","end;","","begin","    loop","        if then","        end ifa;","    end loop;","end;"].join(`
`),t=new A,o=y(t,n,[["if","end if"],["loop","end loop"],["begin","end"]]);x(o,10,9),I(o,new i(3,9),[new e(3,9,3,11),new e(4,9,4,15)]),I(o,new i(4,9),[new e(4,9,4,15),new e(3,9,3,11)]),I(o,new i(2,5),[new e(2,5,2,9),new e(5,5,5,13)]),I(o,new i(5,5),[new e(5,5,5,13),new e(2,5,2,9)]),I(o,new i(1,1),[new e(1,1,1,6),new e(6,1,6,4)]),I(o,new i(6,1),[new e(6,1,6,4),new e(1,1,1,6)]),t.dispose()}),test("bracket matching 4",()=>{const n=["recordbegin","  simplerecordbegin","  endrecord","endrecord"].join(`
`),t=new A,o=y(t,n,[["recordbegin","endrecord"],["simplerecordbegin","endrecord"]]);I(o,new i(1,1),[new e(1,1,1,12),new e(4,1,4,10)]),I(o,new i(4,1),[new e(4,1,4,10),new e(1,1,1,12)]),I(o,new i(2,3),[new e(2,3,2,20),new e(3,3,3,12)]),I(o,new i(3,3),[new e(3,3,3,12),new e(2,3,2,20)]),t.dispose()}),test("issue #95843: Highlighting of closing braces is indicating wrong brace when cursor is behind opening brace",()=>{const n=new A,t=M(n),o=t.get(B),d=t.get(E),c="testMode1",b="testMode2",s=d.languageIdCodec;n.add(d.registerLanguage({id:c})),n.add(d.registerLanguage({id:b}));const f=s.encodeLanguageId(c),l=s.encodeLanguageId(b),r=(f<<S.LANGUAGEID_OFFSET|G.Other<<S.TOKEN_TYPE_OFFSET|S.BALANCED_BRACKETS_MASK)>>>0,w=(l<<S.LANGUAGEID_OFFSET|G.Other<<S.TOKEN_TYPE_OFFSET|S.BALANCED_BRACKETS_MASK)>>>0,m={getInitialState:()=>O,tokenize:void 0,tokenizeEncoded:(p,C,a)=>{switch(p){case"function f() {":{const g=new Uint32Array([0,r,8,r,9,r,10,r,11,r,12,r,13,r]);return new L(g,a)}case"  return <p>{true}</p>;":{const g=new Uint32Array([0,r,2,r,8,r,9,w,10,w,11,w,12,w,13,r,17,w,18,w,20,w,21,w,22,w]);return new L(g,a)}case"}":{const g=new Uint32Array([0,r]);return new L(g,a)}}throw new Error("Unexpected")}};n.add(N.register(c,m)),n.add(o.register(c,{brackets:[["{","}"],["[","]"],["(",")"]]})),n.add(o.register(b,{brackets:[["{","}"],["[","]"],["(",")"]]}));const u=n.add(v(t,["function f() {","  return <p>{true}</p>;","}"].join(`
`),c));u.tokenization.forceTokenization(1),u.tokenization.forceTokenization(2),u.tokenization.forceTokenization(3),h.deepStrictEqual(u.bracketPairs.matchBracket(new i(2,14)),[new e(2,13,2,14),new e(2,18,2,19)]),n.dispose()}),test("issue #88075: TypeScript brace matching is incorrect in `${}` strings",()=>{const n=new A,t=M(n),o=t.get(B),d="testMode",b=t.get(E).languageIdCodec.encodeLanguageId(d),s=(b<<S.LANGUAGEID_OFFSET|G.Other<<S.TOKEN_TYPE_OFFSET)>>>0,f=(b<<S.LANGUAGEID_OFFSET|G.String<<S.TOKEN_TYPE_OFFSET)>>>0,l={getInitialState:()=>O,tokenize:void 0,tokenizeEncoded:(w,m,u)=>{switch(w){case"function hello() {":{const p=new Uint32Array([0,s]);return new L(p,u)}case"    console.log(`${100}`);":{const p=new Uint32Array([0,s,16,f,19,s,22,f,24,s]);return new L(p,u)}case"}":{const p=new Uint32Array([0,s]);return new L(p,u)}}throw new Error("Unexpected")}};n.add(N.register(d,l)),n.add(o.register(d,{brackets:[["{","}"],["[","]"],["(",")"]]}));const r=n.add(v(t,["function hello() {","    console.log(`${100}`);","}"].join(`
`),d));r.tokenization.forceTokenization(1),r.tokenization.forceTokenization(2),r.tokenization.forceTokenization(3),h.deepStrictEqual(r.bracketPairs.matchBracket(new i(2,23)),null),h.deepStrictEqual(r.bracketPairs.matchBracket(new i(2,20)),null),n.dispose()})}),suite("TextModelWithTokens regression tests",()=>{F(),test("microsoft/monaco-editor#122: Unhandled Exception: TypeError: Unable to get property 'replace' of undefined or null reference",()=>{function n(r,w,m,u){m&&r.tokenization.forceTokenization(w);const p=r.tokenization.getLineTokens(w).inflate(),C=[];for(let g=0,k=p.getCount();g<k;g++)C[g]={endIndex:p.getEndOffset(g),foreground:p.getForeground(g)};const a=g=>({endIndex:g.endIndex,foreground:g.getForeground()});h.deepStrictEqual(C,u.map(a))}let t=10;const o="indicisiveMode1",d="indicisiveMode2",c={getInitialState:()=>O,tokenize:void 0,tokenizeEncoded:(r,w,m)=>{const u=++t,p=new Uint32Array(2);return p[0]=0,p[1]=u<<S.FOREGROUND_OFFSET>>>0,new L(p,m)}},b=N.register(o,c),s=N.register(d,c),f=_(`A model with
two lines`);n(f,1,!0,[l(12,1)]),n(f,2,!0,[l(9,1)]),f.setLanguage(o),n(f,1,!0,[l(12,11)]),n(f,2,!0,[l(9,12)]),f.setLanguage(d),n(f,1,!1,[l(12,1)]),n(f,2,!1,[l(9,1)]),f.dispose(),b.dispose(),s.dispose();function l(r,w){const m=w<<S.FOREGROUND_OFFSET>>>0;return new U(r,m)}}),test("microsoft/monaco-editor#133: Error: Cannot read property 'modeId' of undefined",()=>{const n=new A,o=y(n,["Imports System","Imports System.Collections.Generic","","Module m1","","	Sub Main()","	End Sub","","End Module"].join(`
`),[["module","end module"],["sub","end sub"]]).bracketPairs.matchBracket(new i(4,1));h.deepStrictEqual(o,[new e(4,1,4,7),new e(9,1,9,11)]),n.dispose()}),test("issue #11856: Bracket matching does not work as expected if the opening brace symbol is contained in the closing brace symbol",()=>{const n=new A,o=y(n,['sequence "outer"','     sequence "inner"',"     endsequence","endsequence"].join(`
`),[["sequence","endsequence"],["feature","endfeature"]]).bracketPairs.matchBracket(new i(3,9));h.deepStrictEqual(o,[new e(2,6,2,14),new e(3,6,3,17)]),n.dispose()}),test("issue #63822: Wrong embedded language detected for empty lines",()=>{const n=new A,t=M(n),o=t.get(E),d="outerMode",c="innerMode";n.add(o.registerLanguage({id:d})),n.add(o.registerLanguage({id:c}));const s=t.get(E).languageIdCodec.encodeLanguageId(c),f={getInitialState:()=>O,tokenize:void 0,tokenizeEncoded:(r,w,m)=>{const u=new Uint32Array(2);return u[0]=0,u[1]=s<<S.LANGUAGEID_OFFSET>>>0,new L(u,m)}};n.add(N.register(d,f));const l=n.add(v(t,"A model with one line",d));l.tokenization.forceTokenization(1),h.strictEqual(l.getLanguageIdAtPosition(1,1),c),n.dispose()})}),suite("TextModel.getLineIndentGuide",()=>{F();function n(t,o){const d="testLang",c=new A,b=M(c),s=b.get(E);c.add(s.registerLanguage({id:d}));const f=t.map(m=>m[4]).join(`
`),l=c.add(v(b,f,d));l.updateOptions({indentSize:o});const r=l.guides.getLinesIndentGuides(1,l.getLineCount()),w=[];for(let m=1;m<=l.getLineCount();m++){const u=l.guides.getActiveIndentGuide(m,1,l.getLineCount());w[m-1]=[r[m-1],u.startLineNumber,u.endLineNumber,u.indent,l.getLineContent(m)]}h.deepStrictEqual(w,t),c.dispose()}test("getLineIndentGuide one level 2",()=>{n([[0,2,4,1,"A"],[1,2,4,1,"  A"],[1,2,4,1,"  A"],[1,2,4,1,"  A"]],2)}),test("getLineIndentGuide two levels",()=>{n([[0,2,5,1,"A"],[1,2,5,1,"  A"],[1,4,5,2,"  A"],[2,4,5,2,"    A"],[2,4,5,2,"    A"]],2)}),test("getLineIndentGuide three levels",()=>{n([[0,2,4,1,"A"],[1,3,4,2,"  A"],[2,4,4,3,"    A"],[3,4,4,3,"      A"],[0,5,5,0,"A"]],2)}),test("getLineIndentGuide decreasing indent",()=>{n([[2,1,1,2,"    A"],[1,1,1,2,"  A"],[0,1,2,1,"A"]],2)}),test("getLineIndentGuide Java",()=>{n([[0,2,9,1,"class A {"],[1,3,4,2,"  void foo() {"],[2,3,4,2,"    console.log(1);"],[2,3,4,2,"    console.log(2);"],[1,3,4,2,"  }"],[1,2,9,1,""],[1,8,8,2,"  void bar() {"],[2,8,8,2,"    console.log(3);"],[1,8,8,2,"  }"],[0,2,9,1,"}"],[0,12,12,1,"interface B {"],[1,12,12,1,"  void bar();"],[0,12,12,1,"}"]],2)}),test("getLineIndentGuide Javadoc",()=>{n([[0,2,3,1,"/**"],[1,2,3,1," * Comment"],[1,2,3,1," */"],[0,5,6,1,"class A {"],[1,5,6,1,"  void foo() {"],[1,5,6,1,"  }"],[0,5,6,1,"}"]],2)}),test("getLineIndentGuide Whitespace",()=>{n([[0,2,7,1,"class A {"],[1,2,7,1,""],[1,4,5,2,"  void foo() {"],[2,4,5,2,"    "],[2,4,5,2,"    return 1;"],[1,4,5,2,"  }"],[1,2,7,1,"      "],[0,2,7,1,"}"]],2)}),test("getLineIndentGuide Tabs",()=>{n([[0,2,7,1,"class A {"],[1,2,7,1,"		"],[1,4,5,2,"	void foo() {"],[2,4,5,2,"	 	//hello"],[2,4,5,2,"	    return 2;"],[1,4,5,2,"  	}"],[1,2,7,1,"      "],[0,2,7,1,"}"]],4)}),test("getLineIndentGuide checker.ts",()=>{n([[0,1,1,0,'/// <reference path="binder.ts"/>'],[0,2,2,0,""],[0,3,3,0,"/* @internal */"],[0,5,16,1,"namespace ts {"],[1,5,16,1,"    let nextSymbolId = 1;"],[1,5,16,1,"    let nextNodeId = 1;"],[1,5,16,1,"    let nextMergeId = 1;"],[1,5,16,1,"    let nextFlowId = 1;"],[1,5,16,1,""],[1,11,15,2,"    export function getNodeId(node: Node): number {"],[2,12,13,3,"        if (!node.id) {"],[3,12,13,3,"            node.id = nextNodeId;"],[3,12,13,3,"            nextNodeId++;"],[2,12,13,3,"        }"],[2,11,15,2,"        return node.id;"],[1,11,15,2,"    }"],[0,5,16,1,"}"]],4)}),test("issue #8425 - Missing indentation lines for first level indentation",()=>{n([[1,2,3,2,"	indent1"],[2,2,3,2,"		indent2"],[2,2,3,2,"		indent2"],[1,2,3,2,"	indent1"]],4)}),test("issue #8952 - Indentation guide lines going through text on .yml file",()=>{n([[0,2,5,1,"properties:"],[1,3,5,2,"    emailAddress:"],[2,3,5,2,"        - bla"],[2,5,5,3,"        - length:"],[3,5,5,3,"            max: 255"],[0,6,6,0,"getters:"]],4)}),test("issue #11892 - Indent guides look funny",()=>{n([[0,2,7,1,"function test(base) {"],[1,3,6,2,"	switch (base) {"],[2,4,4,3,"		case 1:"],[3,4,4,3,"			return 1;"],[2,6,6,3,"		case 2:"],[3,6,6,3,"			return 2;"],[1,2,7,1,"	}"],[0,2,7,1,"}"]],4)}),test("issue #12398 - Problem in indent guidelines",()=>{n([[2,2,2,3,"		.bla"],[3,2,2,3,"			label(for)"],[0,3,3,0,"include script"]],4)}),test("issue #49173",()=>{const t=_(["class A {","	public m1(): void {","	}","	public m2(): void {","	}","	public m3(): void {","	}","	public m4(): void {","	}","	public m5(): void {","	}","}"].join(`
`)),o=t.guides.getActiveIndentGuide(2,4,9);h.deepStrictEqual(o,{startLineNumber:2,endLineNumber:9,indent:1}),t.dispose()}),test("tweaks - no active",()=>{n([[0,1,1,0,"A"],[0,2,2,0,"A"]],2)}),test("tweaks - inside scope",()=>{n([[0,2,2,1,"A"],[1,2,2,1,"  A"]],2)}),test("tweaks - scope start",()=>{n([[0,2,2,1,"A"],[1,2,2,1,"  A"],[0,2,2,1,"A"]],2)}),test("tweaks - empty line",()=>{n([[0,2,4,1,"A"],[1,2,4,1,"  A"],[1,2,4,1,""],[1,2,4,1,"  A"],[0,2,4,1,"A"]],2)})});
