{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/modelInjectedText.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelRawChange, RawContentChangedType } from '../../../common/textModelEvents.js';\nimport { createTextModel } from '../testTextModel.js';\n\nsuite('Editor Model - Injected Text Events', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst thisModel = store.add(createTextModel('First Line\\nSecond Line'));\n\n\t\tconst recordedChanges = new Array<unknown>();\n\n\t\tstore.add(thisModel.onDidChangeContentOrInjectedText((e) => {\n\t\t\tconst changes = (e instanceof InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n\t\t\tfor (const change of changes) {\n\t\t\t\trecordedChanges.push(mapChange(change));\n\t\t\t}\n\t\t}));\n\n\t\t// Initial decoration\n\t\tlet decorations = thisModel.deltaDecorations([], [{\n\t\t\toptions: {\n\t\t\t\tafter: { content: 'injected1' },\n\t\t\t\tdescription: 'test1',\n\t\t\t\tshowIfCollapsed: true\n\t\t\t},\n\t\t\trange: new Range(1, 1, 1, 1),\n\t\t}]);\n\t\tassert.deepStrictEqual(recordedChanges.splice(0), [\n\t\t\t{\n\t\t\t\tkind: 'lineChanged',\n\t\t\t\tline: '[injected1]First Line',\n\t\t\t\tlineNumber: 1,\n\t\t\t}\n\t\t]);\n\n\t\t// Decoration change\n\t\tdecorations = thisModel.deltaDecorations(decorations, [{\n\t\t\toptions: {\n\t\t\t\tafter: { content: 'injected1' },\n\t\t\t\tdescription: 'test1',\n\t\t\t\tshowIfCollapsed: true\n\t\t\t},\n\t\t\trange: new Range(2, 1, 2, 1),\n\t\t}, {\n\t\t\toptions: {\n\t\t\t\tafter: { content: 'injected2' },\n\t\t\t\tdescription: 'test2',\n\t\t\t\tshowIfCollapsed: true\n\t\t\t},\n\t\t\trange: new Range(2, 2, 2, 2),\n\t\t}]);\n\t\tassert.deepStrictEqual(recordedChanges.splice(0), [\n\t\t\t{\n\t\t\t\tkind: 'lineChanged',\n\t\t\t\tline: 'First Line',\n\t\t\t\tlineNumber: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: 'lineChanged',\n\t\t\t\tline: '[injected1]S[injected2]econd Line',\n\t\t\t\tlineNumber: 2,\n\t\t\t}\n\t\t]);\n\n\t\t// Simple Insert\n\t\tthisModel.applyEdits([EditOperation.replace(new Range(2, 2, 2, 2), 'Hello')]);\n\t\tassert.deepStrictEqual(recordedChanges.splice(0), [\n\t\t\t{\n\t\t\t\tkind: 'lineChanged',\n\t\t\t\tline: '[injected1]SHello[injected2]econd Line',\n\t\t\t\tlineNumber: 2,\n\t\t\t}\n\t\t]);\n\n\t\t// Multi-Line Insert\n\t\tthisModel.pushEditOperations(null, [EditOperation.replace(new Range(2, 2, 2, 2), '\\n\\n\\n')], null);\n\t\tassert.deepStrictEqual(thisModel.getAllDecorations(undefined).map(d => ({ description: d.options.description, range: d.range.toString() })), [{\n\t\t\t'description': 'test1',\n\t\t\t'range': '[2,1 -> 2,1]'\n\t\t},\n\t\t{\n\t\t\t'description': 'test2',\n\t\t\t'range': '[2,2 -> 5,6]'\n\t\t}]);\n\t\tassert.deepStrictEqual(recordedChanges.splice(0), [\n\t\t\t{\n\t\t\t\tkind: 'lineChanged',\n\t\t\t\tline: '[injected1]S',\n\t\t\t\tlineNumber: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfromLineNumber: 3,\n\t\t\t\tkind: 'linesInserted',\n\t\t\t\tlines: [\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'Hello[injected2]econd Line',\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\n\t\t// Multi-Line Replace\n\t\tthisModel.pushEditOperations(null, [EditOperation.replace(new Range(3, 1, 5, 1), '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')], null);\n\t\tassert.deepStrictEqual(recordedChanges.splice(0), [\n\t\t\t{\n\t\t\t\t'kind': 'lineChanged',\n\t\t\t\t'line': '',\n\t\t\t\t'lineNumber': 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t'kind': 'lineChanged',\n\t\t\t\t'line': '',\n\t\t\t\t'lineNumber': 4,\n\t\t\t},\n\t\t\t{\n\t\t\t\t'kind': 'lineChanged',\n\t\t\t\t'line': '',\n\t\t\t\t'lineNumber': 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t'fromLineNumber': 6,\n\t\t\t\t'kind': 'linesInserted',\n\t\t\t\t'lines': [\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'Hello[injected2]econd Line',\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\t// Multi-Line Replace undo\n\t\tassert.strictEqual(thisModel.undo(), undefined);\n\t\tassert.deepStrictEqual(recordedChanges.splice(0), [\n\t\t\t{\n\t\t\t\tkind: 'lineChanged',\n\t\t\t\tline: '[injected1]SHello[injected2]econd Line',\n\t\t\t\tlineNumber: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: 'linesDeleted',\n\t\t\t}\n\t\t]);\n\t});\n});\n\nfunction mapChange(change: ModelRawChange): unknown {\n\tif (change.changeType === RawContentChangedType.LineChanged) {\n\t\t(change.injectedText || []).every(e => {\n\t\t\tassert.deepStrictEqual(e.lineNumber, change.lineNumber);\n\t\t});\n\n\t\treturn {\n\t\t\tkind: 'lineChanged',\n\t\t\tline: getDetail(change.detail, change.injectedText),\n\t\t\tlineNumber: change.lineNumber,\n\t\t};\n\t} else if (change.changeType === RawContentChangedType.LinesInserted) {\n\t\treturn {\n\t\t\tkind: 'linesInserted',\n\t\t\tlines: change.detail.map((e, idx) => getDetail(e, change.injectedTexts[idx])),\n\t\t\tfromLineNumber: change.fromLineNumber\n\t\t};\n\t} else if (change.changeType === RawContentChangedType.LinesDeleted) {\n\t\treturn {\n\t\t\tkind: 'linesDeleted',\n\t\t};\n\t} else if (change.changeType === RawContentChangedType.EOLChanged) {\n\t\treturn {\n\t\t\tkind: 'eolChanged'\n\t\t};\n\t} else if (change.changeType === RawContentChangedType.Flush) {\n\t\treturn {\n\t\t\tkind: 'flush'\n\t\t};\n\t}\n\treturn { kind: 'unknown' };\n}\n\nfunction getDetail(line: string, injectedTexts: LineInjectedText[] | null): string {\n\treturn LineInjectedText.applyInjectedText(line, (injectedTexts || []).map(t => t.withText(`[${t.options.content}]`)));\n}\n"],
  "mappings": "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",
  "names": []
}
