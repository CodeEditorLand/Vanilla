{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/linesTextBuffer/linesTextBuffer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { DefaultEndOfLine } from '../../../../common/model.js';\nimport { IValidatedEditOperation, PieceTreeTextBuffer } from '../../../../common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { createTextBufferFactory } from '../../../../common/model/textModel.js';\n\nsuite('PieceTreeTextBuffer._getInverseEdits', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction editOp(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number, text: string[] | null): IValidatedEditOperation {\n\t\treturn {\n\t\t\tsortIndex: 0,\n\t\t\tidentifier: null,\n\t\t\trange: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n\t\t\trangeOffset: 0,\n\t\t\trangeLength: 0,\n\t\t\ttext: text ? text.join('\\n') : '',\n\t\t\teolCount: text ? text.length - 1 : 0,\n\t\t\tfirstLineLength: text ? text[0].length : 0,\n\t\t\tlastLineLength: text ? text[text.length - 1].length : 0,\n\t\t\tforceMoveMarkers: false,\n\t\t\tisAutoWhitespaceEdit: false\n\t\t};\n\t}\n\n\tfunction inverseEditOp(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number): Range {\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t}\n\n\tfunction assertInverseEdits(ops: IValidatedEditOperation[], expected: Range[]): void {\n\t\tconst actual = PieceTreeTextBuffer._getInverseEditRanges(ops);\n\t\tassert.deepStrictEqual(actual, expected);\n\t}\n\n\ttest('single insert', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello'])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 6)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Bug 19872: Undo is funky', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(2, 1, 2, 2, ['']),\n\t\t\t\teditOp(3, 1, 4, 2, [''])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(2, 1, 2, 1),\n\t\t\t\tinverseEditOp(3, 1, 3, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two single unrelated inserts', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello']),\n\t\t\t\teditOp(2, 1, 2, 1, ['world'])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 6),\n\t\t\t\tinverseEditOp(2, 1, 2, 6)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two single inserts 1', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello']),\n\t\t\t\teditOp(1, 2, 1, 2, ['world'])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 6),\n\t\t\t\tinverseEditOp(1, 7, 1, 12)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two single inserts 2', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello']),\n\t\t\t\teditOp(1, 4, 1, 4, ['world'])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 6),\n\t\t\t\tinverseEditOp(1, 9, 1, 14)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline insert', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello', 'world'])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 2, 6)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two unrelated multiline inserts', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello', 'world']),\n\t\t\t\teditOp(2, 1, 2, 1, ['how', 'are', 'you?']),\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 2, 6),\n\t\t\t\tinverseEditOp(3, 1, 5, 5),\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two multiline inserts 1', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, ['hello', 'world']),\n\t\t\t\teditOp(1, 2, 1, 2, ['how', 'are', 'you?']),\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 2, 6),\n\t\t\t\tinverseEditOp(2, 7, 4, 5),\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('single delete', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 6, null)\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two single unrelated deletes', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 6, null),\n\t\t\t\teditOp(2, 1, 2, 6, null)\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1),\n\t\t\t\tinverseEditOp(2, 1, 2, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two single deletes 1', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 6, null),\n\t\t\t\teditOp(1, 7, 1, 12, null)\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1),\n\t\t\t\tinverseEditOp(1, 2, 1, 2)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two single deletes 2', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 6, null),\n\t\t\t\teditOp(1, 9, 1, 14, null)\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1),\n\t\t\t\tinverseEditOp(1, 4, 1, 4)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline delete', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 2, 6, null)\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two unrelated multiline deletes', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 2, 6, null),\n\t\t\t\teditOp(3, 1, 5, 5, null),\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1),\n\t\t\t\tinverseEditOp(2, 1, 2, 1),\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two multiline deletes 1', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 2, 6, null),\n\t\t\t\teditOp(2, 7, 4, 5, null),\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 1),\n\t\t\t\tinverseEditOp(1, 2, 1, 2),\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('single replace', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 6, ['Hello world'])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 12)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('two replaces', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 6, ['Hello world']),\n\t\t\t\teditOp(1, 7, 1, 8, ['How are you?']),\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 1, 1, 12),\n\t\t\t\tinverseEditOp(1, 13, 1, 25)\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('many edits', () => {\n\t\tassertInverseEdits(\n\t\t\t[\n\t\t\t\teditOp(1, 2, 1, 2, ['', '  ']),\n\t\t\t\teditOp(1, 5, 1, 6, ['']),\n\t\t\t\teditOp(1, 9, 1, 9, ['', ''])\n\t\t\t],\n\t\t\t[\n\t\t\t\tinverseEditOp(1, 2, 2, 3),\n\t\t\t\tinverseEditOp(2, 6, 2, 6),\n\t\t\t\tinverseEditOp(2, 9, 3, 1)\n\t\t\t]\n\t\t);\n\t});\n});\n\nsuite('PieceTreeTextBuffer._toSingleEditOperation', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction editOp(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number, rangeOffset: number, rangeLength: number, text: string[] | null): IValidatedEditOperation {\n\t\treturn {\n\t\t\tsortIndex: 0,\n\t\t\tidentifier: null,\n\t\t\trange: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n\t\t\trangeOffset: rangeOffset,\n\t\t\trangeLength: rangeLength,\n\t\t\ttext: text ? text.join('\\n') : '',\n\t\t\teolCount: text ? text.length - 1 : 0,\n\t\t\tfirstLineLength: text ? text[0].length : 0,\n\t\t\tlastLineLength: text ? text[text.length - 1].length : 0,\n\t\t\tforceMoveMarkers: false,\n\t\t\tisAutoWhitespaceEdit: false\n\t\t};\n\t}\n\n\tfunction testToSingleEditOperation(original: string[], edits: IValidatedEditOperation[], expected: IValidatedEditOperation): void {\n\t\tconst { disposable, textBuffer } = createTextBufferFactory(original.join('\\n')).create(DefaultEndOfLine.LF);\n\n\t\tconst actual = (<PieceTreeTextBuffer>textBuffer)._toSingleEditOperation(edits);\n\t\tassert.deepStrictEqual(actual, expected);\n\t\tdisposable.dispose();\n\t}\n\n\ttest('one edit op is unchanged', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'1'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 3, 1, 3, 2, 0, [' new line', 'No longer'])\n\t\t\t],\n\t\t\teditOp(1, 3, 1, 3, 2, 0, [' new line', 'No longer'])\n\t\t);\n\t});\n\n\ttest('two edits on one line', () => {\n\t\ttestToSingleEditOperation([\n\t\t\t'My First Line',\n\t\t\t'\\t\\tMy Second Line',\n\t\t\t'    Third Line',\n\t\t\t'',\n\t\t\t'1'\n\t\t], [\n\t\t\teditOp(1, 1, 1, 3, 0, 2, ['Your']),\n\t\t\teditOp(1, 4, 1, 4, 3, 0, ['Interesting ']),\n\t\t\teditOp(2, 3, 2, 6, 16, 3, null)\n\t\t],\n\t\t\teditOp(1, 1, 2, 6, 0, 19, [\n\t\t\t\t'Your Interesting First Line',\n\t\t\t\t'\\t\\t'\n\t\t\t]));\n\t});\n\n\ttest('insert multiple newlines', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'1'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 3, 1, 3, 2, 0, ['', '', '', '', '']),\n\t\t\t\teditOp(3, 15, 3, 15, 45, 0, ['a', 'b'])\n\t\t\t],\n\t\t\teditOp(1, 3, 3, 15, 2, 43, [\n\t\t\t\t'',\n\t\t\t\t'',\n\t\t\t\t'',\n\t\t\t\t'',\n\t\t\t\t' First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Linea',\n\t\t\t\t'b'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('delete empty text', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'1'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 1, 0, 0, [''])\n\t\t\t],\n\t\t\teditOp(1, 1, 1, 1, 0, 0, [''])\n\t\t);\n\t});\n\n\ttest('two unrelated edits', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'My First Line',\n\t\t\t\t'\\t\\tMy Second Line',\n\t\t\t\t'    Third Line',\n\t\t\t\t'',\n\t\t\t\t'123'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(2, 1, 2, 3, 14, 2, ['\\t']),\n\t\t\t\teditOp(3, 1, 3, 5, 31, 4, [''])\n\t\t\t],\n\t\t\teditOp(2, 1, 3, 5, 14, 21, ['\\tMy Second Line', ''])\n\t\t);\n\t});\n\n\ttest('many edits', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'{\"x\" : 1}'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 2, 1, 2, 1, 0, ['\\n  ']),\n\t\t\t\teditOp(1, 5, 1, 6, 4, 1, ['']),\n\t\t\t\teditOp(1, 9, 1, 9, 8, 0, ['\\n'])\n\t\t\t],\n\t\t\teditOp(1, 2, 1, 9, 1, 7, [\n\t\t\t\t'',\n\t\t\t\t'  \"x\": 1',\n\t\t\t\t''\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('many edits reversed', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'{',\n\t\t\t\t'  \"x\": 1',\n\t\t\t\t'}'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 2, 2, 3, 1, 3, ['']),\n\t\t\t\teditOp(2, 6, 2, 6, 7, 0, [' ']),\n\t\t\t\teditOp(2, 9, 3, 1, 10, 1, [''])\n\t\t\t],\n\t\t\teditOp(1, 2, 3, 1, 1, 10, ['\"x\" : 1'])\n\t\t);\n\t});\n\n\ttest('replacing newlines 1', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'{',\n\t\t\t\t'\"a\": true,',\n\t\t\t\t'',\n\t\t\t\t'\"b\": true',\n\t\t\t\t'}'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 2, 2, 1, 1, 1, ['', '\\t']),\n\t\t\t\teditOp(2, 11, 4, 1, 12, 2, ['', '\\t'])\n\t\t\t],\n\t\t\teditOp(1, 2, 4, 1, 1, 13, [\n\t\t\t\t'',\n\t\t\t\t'\\t\"a\": true,',\n\t\t\t\t'\\t'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('replacing newlines 2', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'some text',\n\t\t\t\t'some more text',\n\t\t\t\t'now comes an empty line',\n\t\t\t\t'',\n\t\t\t\t'after empty line',\n\t\t\t\t'and the last line'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 5, 3, 1, 4, 21, [' text', 'some more text', 'some more text']),\n\t\t\t\teditOp(3, 2, 4, 1, 26, 23, ['o more lines', 'asd', 'asd', 'asd']),\n\t\t\t\teditOp(5, 1, 5, 6, 50, 5, ['zzzzzzzz']),\n\t\t\t\teditOp(5, 11, 6, 16, 60, 22, ['1', '2', '3', '4'])\n\t\t\t],\n\t\t\teditOp(1, 5, 6, 16, 4, 78, [\n\t\t\t\t' text',\n\t\t\t\t'some more text',\n\t\t\t\t'some more textno more lines',\n\t\t\t\t'asd',\n\t\t\t\t'asd',\n\t\t\t\t'asd',\n\t\t\t\t'zzzzzzzz empt1',\n\t\t\t\t'2',\n\t\t\t\t'3',\n\t\t\t\t'4'\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('advanced', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t' {       \"d\": [',\n\t\t\t\t'             null',\n\t\t\t\t'        ] /*comment*/',\n\t\t\t\t'        ,\"e\": /*comment*/ [null] }',\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 2, 0, 1, ['']),\n\t\t\t\teditOp(1, 3, 1, 10, 2, 7, ['', '  ']),\n\t\t\t\teditOp(1, 16, 2, 14, 15, 14, ['', '    ']),\n\t\t\t\teditOp(2, 18, 3, 9, 33, 9, ['', '  ']),\n\t\t\t\teditOp(3, 22, 4, 9, 55, 9, ['']),\n\t\t\t\teditOp(4, 10, 4, 10, 65, 0, ['', '  ']),\n\t\t\t\teditOp(4, 28, 4, 28, 83, 0, ['', '    ']),\n\t\t\t\teditOp(4, 32, 4, 32, 87, 0, ['', '  ']),\n\t\t\t\teditOp(4, 33, 4, 34, 88, 1, ['', ''])\n\t\t\t],\n\t\t\teditOp(1, 1, 4, 34, 0, 89, [\n\t\t\t\t'{',\n\t\t\t\t'  \"d\": [',\n\t\t\t\t'    null',\n\t\t\t\t'  ] /*comment*/,',\n\t\t\t\t'  \"e\": /*comment*/ [',\n\t\t\t\t'    null',\n\t\t\t\t'  ]',\n\t\t\t\t''\n\t\t\t])\n\t\t);\n\t});\n\n\ttest('advanced simplified', () => {\n\t\ttestToSingleEditOperation(\n\t\t\t[\n\t\t\t\t'   abc',\n\t\t\t\t' ,def'\n\t\t\t],\n\t\t\t[\n\t\t\t\teditOp(1, 1, 1, 4, 0, 3, ['']),\n\t\t\t\teditOp(1, 7, 2, 2, 6, 2, ['']),\n\t\t\t\teditOp(2, 3, 2, 3, 9, 0, ['', ''])\n\t\t\t],\n\t\t\teditOp(1, 1, 2, 3, 0, 9, [\n\t\t\t\t'abc,',\n\t\t\t\t''\n\t\t\t])\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
