{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/model/textModelSearch.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { getMapForWordSeparators } from '../../../common/core/wordCharacterClassifier.js';\nimport { USUAL_WORD_SEPARATORS } from '../../../common/core/wordHelper.js';\nimport { EndOfLineSequence, FindMatch, SearchData } from '../../../common/model.js';\nimport { TextModel } from '../../../common/model/textModel.js';\nimport { SearchParams, TextModelSearch, isMultilineRegexSource } from '../../../common/model/textModelSearch.js';\nimport { createTextModel } from '../testTextModel.js';\n\n// --------- Find\nsuite('TextModelSearch', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst usualWordSeparators = getMapForWordSeparators(USUAL_WORD_SEPARATORS, []);\n\n\tfunction assertFindMatch(actual: FindMatch | null, expectedRange: Range, expectedMatches: string[] | null = null): void {\n\t\tassert.deepStrictEqual(actual, new FindMatch(expectedRange, expectedMatches));\n\t}\n\n\tfunction _assertFindMatches(model: TextModel, searchParams: SearchParams, expectedMatches: FindMatch[]): void {\n\t\tconst actual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), false, 1000);\n\t\tassert.deepStrictEqual(actual, expectedMatches, 'findMatches OK');\n\n\t\t// test `findNextMatch`\n\t\tlet startPos = new Position(1, 1);\n\t\tlet match = TextModelSearch.findNextMatch(model, searchParams, startPos, false);\n\t\tassert.deepStrictEqual(match, expectedMatches[0], `findNextMatch ${startPos}`);\n\t\tfor (const expectedMatch of expectedMatches) {\n\t\t\tstartPos = expectedMatch.range.getStartPosition();\n\t\t\tmatch = TextModelSearch.findNextMatch(model, searchParams, startPos, false);\n\t\t\tassert.deepStrictEqual(match, expectedMatch, `findNextMatch ${startPos}`);\n\t\t}\n\n\t\t// test `findPrevMatch`\n\t\tstartPos = new Position(model.getLineCount(), model.getLineMaxColumn(model.getLineCount()));\n\t\tmatch = TextModelSearch.findPreviousMatch(model, searchParams, startPos, false);\n\t\tassert.deepStrictEqual(match, expectedMatches[expectedMatches.length - 1], `findPrevMatch ${startPos}`);\n\t\tfor (const expectedMatch of expectedMatches) {\n\t\t\tstartPos = expectedMatch.range.getEndPosition();\n\t\t\tmatch = TextModelSearch.findPreviousMatch(model, searchParams, startPos, false);\n\t\t\tassert.deepStrictEqual(match, expectedMatch, `findPrevMatch ${startPos}`);\n\t\t}\n\t}\n\n\tfunction assertFindMatches(text: string, searchString: string, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, _expected: [number, number, number, number][]): void {\n\t\tconst expectedRanges = _expected.map(entry => new Range(entry[0], entry[1], entry[2], entry[3]));\n\t\tconst expectedMatches = expectedRanges.map(entry => new FindMatch(entry, null));\n\t\tconst searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n\n\t\tconst model = createTextModel(text);\n\t\t_assertFindMatches(model, searchParams, expectedMatches);\n\t\tmodel.dispose();\n\n\n\t\tconst model2 = createTextModel(text);\n\t\tmodel2.setEOL(EndOfLineSequence.CRLF);\n\t\t_assertFindMatches(model2, searchParams, expectedMatches);\n\t\tmodel2.dispose();\n\t}\n\n\tconst regularText = [\n\t\t'This is some foo - bar text which contains foo and bar - as in Barcelona.',\n\t\t'Now it begins a word fooBar and now it is caps Foo-isn\\'t this great?',\n\t\t'And here\\'s a dull line with nothing interesting in it',\n\t\t'It is also interesting if it\\'s part of a word like amazingFooBar',\n\t\t'Again nothing interesting here'\n\t];\n\n\ttest('Simple find', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'foo', false, false, null,\n\t\t\t[\n\t\t\t\t[1, 14, 1, 17],\n\t\t\t\t[1, 44, 1, 47],\n\t\t\t\t[2, 22, 2, 25],\n\t\t\t\t[2, 48, 2, 51],\n\t\t\t\t[4, 59, 4, 62]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Case sensitive find', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'foo', false, true, null,\n\t\t\t[\n\t\t\t\t[1, 14, 1, 17],\n\t\t\t\t[1, 44, 1, 47],\n\t\t\t\t[2, 22, 2, 25]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Whole words find', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'foo', false, false, USUAL_WORD_SEPARATORS,\n\t\t\t[\n\t\t\t\t[1, 14, 1, 17],\n\t\t\t\t[1, 44, 1, 47],\n\t\t\t\t[2, 48, 2, 51]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('/^/ find', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'^', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 1],\n\t\t\t\t[2, 1, 2, 1],\n\t\t\t\t[3, 1, 3, 1],\n\t\t\t\t[4, 1, 4, 1],\n\t\t\t\t[5, 1, 5, 1]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('/$/ find', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'$', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 74, 1, 74],\n\t\t\t\t[2, 69, 2, 69],\n\t\t\t\t[3, 54, 3, 54],\n\t\t\t\t[4, 65, 4, 65],\n\t\t\t\t[5, 31, 5, 31]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('/.*/ find', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'.*', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 74],\n\t\t\t\t[2, 1, 2, 69],\n\t\t\t\t[3, 1, 3, 54],\n\t\t\t\t[4, 1, 4, 65],\n\t\t\t\t[5, 1, 5, 31]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('/^$/ find', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'This is some foo - bar text which contains foo and bar - as in Barcelona.',\n\t\t\t\t'',\n\t\t\t\t'And here\\'s a dull line with nothing interesting in it',\n\t\t\t\t'',\n\t\t\t\t'Again nothing interesting here'\n\t\t\t].join('\\n'),\n\t\t\t'^$', true, false, null,\n\t\t\t[\n\t\t\t\t[2, 1, 2, 1],\n\t\t\t\t[4, 1, 4, 1]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find 1', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text text',\n\t\t\t\t'Just some text text',\n\t\t\t\t'some text again',\n\t\t\t\t'again some text'\n\t\t\t].join('\\n'),\n\t\t\t'text\\\\n', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 16, 2, 1],\n\t\t\t\t[2, 16, 3, 1],\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find 2', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text text',\n\t\t\t\t'Just some text text',\n\t\t\t\t'some text again',\n\t\t\t\t'again some text'\n\t\t\t].join('\\n'),\n\t\t\t'text\\\\nJust', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 16, 2, 5]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find 3', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text text',\n\t\t\t\t'Just some text text',\n\t\t\t\t'some text again',\n\t\t\t\t'again some text'\n\t\t\t].join('\\n'),\n\t\t\t'\\\\nagain', true, false, null,\n\t\t\t[\n\t\t\t\t[3, 16, 4, 6]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find 4', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text text',\n\t\t\t\t'Just some text text',\n\t\t\t\t'some text again',\n\t\t\t\t'again some text'\n\t\t\t].join('\\n'),\n\t\t\t'.*\\\\nJust.*\\\\n', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 3, 1]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find with line beginning regex', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'if',\n\t\t\t\t'else',\n\t\t\t\t'',\n\t\t\t\t'if',\n\t\t\t\t'else'\n\t\t\t].join('\\n'),\n\t\t\t'^if\\\\nelse', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 2, 5],\n\t\t\t\t[4, 1, 5, 5]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('matching empty lines using boundary expression', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'if',\n\t\t\t\t'',\n\t\t\t\t'else',\n\t\t\t\t'  ',\n\t\t\t\t'if',\n\t\t\t\t' ',\n\t\t\t\t'else'\n\t\t\t].join('\\n'),\n\t\t\t'^\\\\s*$\\\\n', true, false, null,\n\t\t\t[\n\t\t\t\t[2, 1, 3, 1],\n\t\t\t\t[4, 1, 5, 1],\n\t\t\t\t[6, 1, 7, 1]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('matching lines starting with A and ending with B', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'a if b',\n\t\t\t\t'a',\n\t\t\t\t'ab',\n\t\t\t\t'eb'\n\t\t\t].join('\\n'),\n\t\t\t'^a.*b$', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 7],\n\t\t\t\t[3, 1, 3, 3]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find with line ending regex', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'if',\n\t\t\t\t'else',\n\t\t\t\t'',\n\t\t\t\t'if',\n\t\t\t\t'elseif',\n\t\t\t\t'else'\n\t\t\t].join('\\n'),\n\t\t\t'if\\\\nelse$', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 2, 5],\n\t\t\t\t[5, 5, 6, 5]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('issue #4836 - ^.*$', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text text',\n\t\t\t\t'',\n\t\t\t\t'some text again',\n\t\t\t\t'',\n\t\t\t\t'again some text'\n\t\t\t].join('\\n'),\n\t\t\t'^.*$', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 20],\n\t\t\t\t[2, 1, 2, 1],\n\t\t\t\t[3, 1, 3, 16],\n\t\t\t\t[4, 1, 4, 1],\n\t\t\t\t[5, 1, 5, 16],\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('multiline find for non-regex string', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text text',\n\t\t\t\t'some text text',\n\t\t\t\t'some text again',\n\t\t\t\t'again some text',\n\t\t\t\t'but not some'\n\t\t\t].join('\\n'),\n\t\t\t'text\\nsome', false, false, null,\n\t\t\t[\n\t\t\t\t[1, 16, 2, 5],\n\t\t\t\t[2, 11, 3, 5],\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('issue #3623: Match whole word does not work for not latin characters', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'\u044F',\n\t\t\t\t'\u043A\u043E\u043C\u043F\u0438\u043B\u044F\u0442\u043E\u0440',\n\t\t\t\t'\u043E\u0431\u0444\u0443\u0441\u043A\u0430\u0446\u0438\u044F',\n\t\t\t\t':\u044F-\u044F'\n\t\t\t].join('\\n'),\n\t\t\t'\u044F', false, false, USUAL_WORD_SEPARATORS,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 2],\n\t\t\t\t[4, 2, 4, 3],\n\t\t\t\t[4, 4, 4, 5],\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('issue #27459: Match whole words regression', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'this._register(this._textAreaInput.onKeyDown((e: IKeyboardEvent) => {',\n\t\t\t\t'\tthis._viewController.emitKeyDown(e);',\n\t\t\t\t'}));',\n\t\t\t].join('\\n'),\n\t\t\t'((e: ', false, false, USUAL_WORD_SEPARATORS,\n\t\t\t[\n\t\t\t\t[1, 45, 1, 50]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('issue #27594: Search results disappear', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'this.server.listen(0);',\n\t\t\t].join('\\n'),\n\t\t\t'listen(', false, false, USUAL_WORD_SEPARATORS,\n\t\t\t[\n\t\t\t\t[1, 13, 1, 20]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('findNextMatch without regex', () => {\n\t\tconst model = createTextModel('line line one\\nline two\\nthree');\n\n\t\tconst searchParams = new SearchParams('line', false, false, null);\n\n\t\tlet actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 1, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(1, 6, 1, 10));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 3), false);\n\t\tassertFindMatch(actual, new Range(1, 6, 1, 10));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(2, 1, 2, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 1, 5));\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findNextMatch with beginning boundary regex', () => {\n\t\tconst model = createTextModel('line one\\nline two\\nthree');\n\n\t\tconst searchParams = new SearchParams('^line', true, false, null);\n\n\t\tlet actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 1, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(2, 1, 2, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 3), false);\n\t\tassertFindMatch(actual, new Range(2, 1, 2, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 1, 5));\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findNextMatch with beginning boundary regex and line has repetitive beginnings', () => {\n\t\tconst model = createTextModel('line line one\\nline two\\nthree');\n\n\t\tconst searchParams = new SearchParams('^line', true, false, null);\n\n\t\tlet actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 1, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(2, 1, 2, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 3), false);\n\t\tassertFindMatch(actual, new Range(2, 1, 2, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 1, 5));\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findNextMatch with beginning boundary multiline regex and line has repetitive beginnings', () => {\n\t\tconst model = createTextModel('line line one\\nline two\\nline three\\nline four');\n\n\t\tconst searchParams = new SearchParams('^line.*\\\\nline', true, false, null);\n\n\t\tlet actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), false);\n\t\tassertFindMatch(actual, new Range(1, 1, 2, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(3, 1, 4, 5));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(2, 1), false);\n\t\tassertFindMatch(actual, new Range(2, 1, 3, 5));\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findNextMatch with ending boundary regex', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('line$', true, false, null);\n\n\t\tlet actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), false);\n\t\tassertFindMatch(actual, new Range(1, 10, 1, 14));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 4), false);\n\t\tassertFindMatch(actual, new Range(1, 10, 1, 14));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(2, 5, 2, 9));\n\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, actual!.range.getEndPosition(), false);\n\t\tassertFindMatch(actual, new Range(1, 10, 1, 14));\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findMatches with capturing matches', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('(l(in)e)', true, false, null);\n\n\t\tconst actual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 100);\n\t\tassert.deepStrictEqual(actual, [\n\t\t\tnew FindMatch(new Range(1, 5, 1, 9), ['line', 'line', 'in']),\n\t\t\tnew FindMatch(new Range(1, 10, 1, 14), ['line', 'line', 'in']),\n\t\t\tnew FindMatch(new Range(2, 5, 2, 9), ['line', 'line', 'in']),\n\t\t]);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findMatches multiline with capturing matches', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('(l(in)e)\\\\n', true, false, null);\n\n\t\tconst actual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 100);\n\t\tassert.deepStrictEqual(actual, [\n\t\t\tnew FindMatch(new Range(1, 10, 2, 1), ['line\\n', 'line', 'in']),\n\t\t\tnew FindMatch(new Range(2, 5, 3, 1), ['line\\n', 'line', 'in']),\n\t\t]);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findNextMatch with capturing matches', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('(l(in)e)', true, false, null);\n\n\t\tconst actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), true);\n\t\tassertFindMatch(actual, new Range(1, 5, 1, 9), ['line', 'line', 'in']);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findNextMatch multiline with capturing matches', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('(l(in)e)\\\\n', true, false, null);\n\n\t\tconst actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), true);\n\t\tassertFindMatch(actual, new Range(1, 10, 2, 1), ['line\\n', 'line', 'in']);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findPreviousMatch with capturing matches', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('(l(in)e)', true, false, null);\n\n\t\tconst actual = TextModelSearch.findPreviousMatch(model, searchParams, new Position(1, 1), true);\n\t\tassertFindMatch(actual, new Range(2, 5, 2, 9), ['line', 'line', 'in']);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('findPreviousMatch multiline with capturing matches', () => {\n\t\tconst model = createTextModel('one line line\\ntwo line\\nthree');\n\n\t\tconst searchParams = new SearchParams('(l(in)e)\\\\n', true, false, null);\n\n\t\tconst actual = TextModelSearch.findPreviousMatch(model, searchParams, new Position(1, 1), true);\n\t\tassertFindMatch(actual, new Range(2, 5, 3, 1), ['line\\n', 'line', 'in']);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('\\\\n matches \\\\r\\\\n', () => {\n\t\tconst model = createTextModel('a\\r\\nb\\r\\nc\\r\\nd\\r\\ne\\r\\nf\\r\\ng\\r\\nh\\r\\ni');\n\n\t\tassert.strictEqual(model.getEOL(), '\\r\\n');\n\n\t\tlet searchParams = new SearchParams('h\\\\n', true, false, null);\n\t\tlet actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), true);\n\t\tactual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 1000)[0];\n\t\tassertFindMatch(actual, new Range(8, 1, 9, 1), ['h\\n']);\n\n\t\tsearchParams = new SearchParams('g\\\\nh\\\\n', true, false, null);\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), true);\n\t\tactual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 1000)[0];\n\t\tassertFindMatch(actual, new Range(7, 1, 9, 1), ['g\\nh\\n']);\n\n\t\tsearchParams = new SearchParams('\\\\ni', true, false, null);\n\t\tactual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), true);\n\t\tactual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 1000)[0];\n\t\tassertFindMatch(actual, new Range(8, 2, 9, 2), ['\\ni']);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('\\\\r can never be found', () => {\n\t\tconst model = createTextModel('a\\r\\nb\\r\\nc\\r\\nd\\r\\ne\\r\\nf\\r\\ng\\r\\nh\\r\\ni');\n\n\t\tassert.strictEqual(model.getEOL(), '\\r\\n');\n\n\t\tconst searchParams = new SearchParams('\\\\r\\\\n', true, false, null);\n\t\tconst actual = TextModelSearch.findNextMatch(model, searchParams, new Position(1, 1), true);\n\t\tassert.strictEqual(actual, null);\n\t\tassert.deepStrictEqual(TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 1000), []);\n\n\t\tmodel.dispose();\n\t});\n\n\tfunction assertParseSearchResult(searchString: string, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, expected: SearchData | null): void {\n\t\tconst searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n\t\tconst actual = searchParams.parseSearchRequest();\n\n\t\tif (expected === null) {\n\t\t\tassert.ok(actual === null);\n\t\t} else {\n\t\t\tassert.deepStrictEqual(actual!.regex, expected.regex);\n\t\t\tassert.deepStrictEqual(actual!.simpleSearch, expected.simpleSearch);\n\t\t\tif (wordSeparators) {\n\t\t\t\tassert.ok(actual!.wordSeparators !== null);\n\t\t\t} else {\n\t\t\t\tassert.ok(actual!.wordSeparators === null);\n\t\t\t}\n\t\t}\n\t}\n\n\ttest('parseSearchRequest invalid', () => {\n\t\tassertParseSearchResult('', true, true, USUAL_WORD_SEPARATORS, null);\n\t\tassertParseSearchResult('(', true, false, null, null);\n\t});\n\n\ttest('parseSearchRequest non regex', () => {\n\t\tassertParseSearchResult('foo', false, false, null, new SearchData(/foo/giu, null, null));\n\t\tassertParseSearchResult('foo', false, false, USUAL_WORD_SEPARATORS, new SearchData(/foo/giu, usualWordSeparators, null));\n\t\tassertParseSearchResult('foo', false, true, null, new SearchData(/foo/gu, null, 'foo'));\n\t\tassertParseSearchResult('foo', false, true, USUAL_WORD_SEPARATORS, new SearchData(/foo/gu, usualWordSeparators, 'foo'));\n\t\tassertParseSearchResult('foo\\\\n', false, false, null, new SearchData(/foo\\\\n/giu, null, null));\n\t\tassertParseSearchResult('foo\\\\\\\\n', false, false, null, new SearchData(/foo\\\\\\\\n/giu, null, null));\n\t\tassertParseSearchResult('foo\\\\r', false, false, null, new SearchData(/foo\\\\r/giu, null, null));\n\t\tassertParseSearchResult('foo\\\\\\\\r', false, false, null, new SearchData(/foo\\\\\\\\r/giu, null, null));\n\t});\n\n\ttest('parseSearchRequest regex', () => {\n\t\tassertParseSearchResult('foo', true, false, null, new SearchData(/foo/giu, null, null));\n\t\tassertParseSearchResult('foo', true, false, USUAL_WORD_SEPARATORS, new SearchData(/foo/giu, usualWordSeparators, null));\n\t\tassertParseSearchResult('foo', true, true, null, new SearchData(/foo/gu, null, null));\n\t\tassertParseSearchResult('foo', true, true, USUAL_WORD_SEPARATORS, new SearchData(/foo/gu, usualWordSeparators, null));\n\t\tassertParseSearchResult('foo\\\\n', true, false, null, new SearchData(/foo\\n/gimu, null, null));\n\t\tassertParseSearchResult('foo\\\\\\\\n', true, false, null, new SearchData(/foo\\\\n/giu, null, null));\n\t\tassertParseSearchResult('foo\\\\r', true, false, null, new SearchData(/foo\\r/gimu, null, null));\n\t\tassertParseSearchResult('foo\\\\\\\\r', true, false, null, new SearchData(/foo\\\\r/giu, null, null));\n\t});\n\n\ttest('issue #53415. \\W should match line break.', () => {\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'text',\n\t\t\t\t'180702-',\n\t\t\t\t'180703-180704'\n\t\t\t].join('\\n'),\n\t\t\t'\\\\d{6}-\\\\W', true, false, null,\n\t\t\t[\n\t\t\t\t[2, 1, 3, 1]\n\t\t\t]\n\t\t);\n\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text',\n\t\t\t\t'',\n\t\t\t\t'Just'\n\t\t\t].join('\\n'),\n\t\t\t'\\\\W', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 5, 1, 6],\n\t\t\t\t[1, 10, 1, 11],\n\t\t\t\t[1, 15, 2, 1],\n\t\t\t\t[2, 1, 3, 1]\n\t\t\t]\n\t\t);\n\n\t\t// Line break doesn't affect the result as we always use \\n as line break when doing search\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text',\n\t\t\t\t'',\n\t\t\t\t'Just'\n\t\t\t].join('\\r\\n'),\n\t\t\t'\\\\W', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 5, 1, 6],\n\t\t\t\t[1, 10, 1, 11],\n\t\t\t\t[1, 15, 2, 1],\n\t\t\t\t[2, 1, 3, 1]\n\t\t\t]\n\t\t);\n\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just some text',\n\t\t\t\t'\\tJust',\n\t\t\t\t'Just'\n\t\t\t].join('\\n'),\n\t\t\t'\\\\W', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 5, 1, 6],\n\t\t\t\t[1, 10, 1, 11],\n\t\t\t\t[1, 15, 2, 1],\n\t\t\t\t[2, 1, 2, 2],\n\t\t\t\t[2, 6, 3, 1],\n\t\t\t]\n\t\t);\n\n\t\t// line break is seen as one non-word character\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just  some text',\n\t\t\t\t'',\n\t\t\t\t'Just'\n\t\t\t].join('\\n'),\n\t\t\t'\\\\W{2}', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 5, 1, 7],\n\t\t\t\t[1, 16, 3, 1]\n\t\t\t]\n\t\t);\n\n\t\t// even if it's \\r\\n\n\t\tassertFindMatches(\n\t\t\t[\n\t\t\t\t'Just  some text',\n\t\t\t\t'',\n\t\t\t\t'Just'\n\t\t\t].join('\\r\\n'),\n\t\t\t'\\\\W{2}', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 5, 1, 7],\n\t\t\t\t[1, 16, 3, 1]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('Simple find using unicode escape sequences', () => {\n\t\tassertFindMatches(\n\t\t\tregularText.join('\\n'),\n\t\t\t'\\\\u{0066}\\\\u006f\\\\u006F', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 14, 1, 17],\n\t\t\t\t[1, 44, 1, 47],\n\t\t\t\t[2, 22, 2, 25],\n\t\t\t\t[2, 48, 2, 51],\n\t\t\t\t[4, 59, 4, 62]\n\t\t\t]\n\t\t);\n\t});\n\n\ttest('isMultilineRegexSource', () => {\n\t\tassert(!isMultilineRegexSource('foo'));\n\t\tassert(!isMultilineRegexSource(''));\n\t\tassert(!isMultilineRegexSource('foo\\\\sbar'));\n\t\tassert(!isMultilineRegexSource('\\\\\\\\notnewline'));\n\n\t\tassert(isMultilineRegexSource('foo\\\\nbar'));\n\t\tassert(isMultilineRegexSource('foo\\\\nbar\\\\s'));\n\t\tassert(isMultilineRegexSource('foo\\\\r\\\\n'));\n\t\tassert(isMultilineRegexSource('\\\\n'));\n\t\tassert(isMultilineRegexSource('foo\\\\W'));\n\t\tassert(isMultilineRegexSource('foo\\n'));\n\t\tassert(isMultilineRegexSource('foo\\r\\n'));\n\t});\n\n\ttest('issue #74715. \\\\d* finds empty string and stops searching.', () => {\n\t\tconst model = createTextModel('10.243.30.10');\n\n\t\tconst searchParams = new SearchParams('\\\\d*', true, false, null);\n\n\t\tconst actual = TextModelSearch.findMatches(model, searchParams, model.getFullModelRange(), true, 100);\n\t\tassert.deepStrictEqual(actual, [\n\t\t\tnew FindMatch(new Range(1, 1, 1, 3), ['10']),\n\t\t\tnew FindMatch(new Range(1, 3, 1, 3), ['']),\n\t\t\tnew FindMatch(new Range(1, 4, 1, 7), ['243']),\n\t\t\tnew FindMatch(new Range(1, 7, 1, 7), ['']),\n\t\t\tnew FindMatch(new Range(1, 8, 1, 10), ['30']),\n\t\t\tnew FindMatch(new Range(1, 10, 1, 10), ['']),\n\t\t\tnew FindMatch(new Range(1, 11, 1, 13), ['10'])\n\t\t]);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('issue #100134. Zero-length matches should properly step over surrogate pairs', () => {\n\t\t// 1[Laptop]1 - there shoud be no matches inside of [Laptop] emoji\n\t\tassertFindMatches('1\\uD83D\\uDCBB1', '()', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 1],\n\t\t\t\t[1, 2, 1, 2],\n\t\t\t\t[1, 4, 1, 4],\n\t\t\t\t[1, 5, 1, 5],\n\n\t\t\t]\n\t\t);\n\t\t// 1[Hacker Cat]1 = 1[Cat Face][ZWJ][Laptop]1 - there shoud be matches between emoji and ZWJ\n\t\t// there shoud be no matches inside of [Cat Face] and [Laptop] emoji\n\t\tassertFindMatches('1\\uD83D\\uDC31\\u200D\\uD83D\\uDCBB1', '()', true, false, null,\n\t\t\t[\n\t\t\t\t[1, 1, 1, 1],\n\t\t\t\t[1, 2, 1, 2],\n\t\t\t\t[1, 4, 1, 4],\n\t\t\t\t[1, 5, 1, 5],\n\t\t\t\t[1, 7, 1, 7],\n\t\t\t\t[1, 8, 1, 8]\n\t\t\t]\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
