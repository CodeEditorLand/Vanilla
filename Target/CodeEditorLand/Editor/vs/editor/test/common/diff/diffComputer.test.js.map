{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/diff/diffComputer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Range } from '../../../common/core/range.js';\nimport { DiffComputer, ICharChange, ILineChange } from '../../../common/diff/legacyLinesDiffComputer.js';\nimport { IIdentifiedSingleEditOperation, ITextModel } from '../../../common/model.js';\nimport { createTextModel } from '../testTextModel.js';\n\nfunction assertDiff(originalLines: string[], modifiedLines: string[], expectedChanges: ILineChange[], shouldComputeCharChanges: boolean = true, shouldPostProcessCharChanges: boolean = false, shouldIgnoreTrimWhitespace: boolean = false) {\n\tconst diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\tshouldComputeCharChanges,\n\t\tshouldPostProcessCharChanges,\n\t\tshouldIgnoreTrimWhitespace,\n\t\tshouldMakePrettyDiff: true,\n\t\tmaxComputationTime: 0\n\t});\n\tconst changes = diffComputer.computeDiff().changes;\n\n\tconst mapCharChange = (charChange: ICharChange) => {\n\t\treturn {\n\t\t\toriginalStartLineNumber: charChange.originalStartLineNumber,\n\t\t\toriginalStartColumn: charChange.originalStartColumn,\n\t\t\toriginalEndLineNumber: charChange.originalEndLineNumber,\n\t\t\toriginalEndColumn: charChange.originalEndColumn,\n\t\t\tmodifiedStartLineNumber: charChange.modifiedStartLineNumber,\n\t\t\tmodifiedStartColumn: charChange.modifiedStartColumn,\n\t\t\tmodifiedEndLineNumber: charChange.modifiedEndLineNumber,\n\t\t\tmodifiedEndColumn: charChange.modifiedEndColumn,\n\t\t};\n\t};\n\n\tconst actual = changes.map((lineChange) => {\n\t\treturn {\n\t\t\toriginalStartLineNumber: lineChange.originalStartLineNumber,\n\t\t\toriginalEndLineNumber: lineChange.originalEndLineNumber,\n\t\t\tmodifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n\t\t\tmodifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n\t\t\tcharChanges: (lineChange.charChanges ? lineChange.charChanges.map(mapCharChange) : undefined)\n\t\t};\n\t});\n\n\tassert.deepStrictEqual(actual, expectedChanges);\n\n\tif (!shouldIgnoreTrimWhitespace) {\n\t\t// The diffs should describe how to apply edits to the original text model to get to the modified text model.\n\n\t\tconst modifiedTextModel = createTextModel(modifiedLines.join('\\n'));\n\t\tconst expectedValue = modifiedTextModel.getValue();\n\n\t\t{\n\t\t\t// Line changes:\n\t\t\tconst originalTextModel = createTextModel(originalLines.join('\\n'));\n\t\t\toriginalTextModel.applyEdits(changes.map(c => getLineEdit(c, modifiedTextModel)));\n\t\t\tassert.deepStrictEqual(originalTextModel.getValue(), expectedValue);\n\t\t\toriginalTextModel.dispose();\n\t\t}\n\n\t\tif (shouldComputeCharChanges) {\n\t\t\t// Char changes:\n\t\t\tconst originalTextModel = createTextModel(originalLines.join('\\n'));\n\t\t\toriginalTextModel.applyEdits(changes.flatMap(c => getCharEdits(c, modifiedTextModel)));\n\t\t\tassert.deepStrictEqual(originalTextModel.getValue(), expectedValue);\n\t\t\toriginalTextModel.dispose();\n\t\t}\n\n\t\tmodifiedTextModel.dispose();\n\t}\n}\n\nfunction getCharEdits(lineChange: ILineChange, modifiedTextModel: ITextModel): IIdentifiedSingleEditOperation[] {\n\tif (!lineChange.charChanges) {\n\t\treturn [getLineEdit(lineChange, modifiedTextModel)];\n\t}\n\treturn lineChange.charChanges.map(c => {\n\t\tconst originalRange = new Range(c.originalStartLineNumber, c.originalStartColumn, c.originalEndLineNumber, c.originalEndColumn);\n\t\tconst modifiedRange = new Range(c.modifiedStartLineNumber, c.modifiedStartColumn, c.modifiedEndLineNumber, c.modifiedEndColumn);\n\t\treturn {\n\t\t\trange: originalRange,\n\t\t\ttext: modifiedTextModel.getValueInRange(modifiedRange)\n\t\t};\n\t});\n}\n\nfunction getLineEdit(lineChange: ILineChange, modifiedTextModel: ITextModel): IIdentifiedSingleEditOperation {\n\tlet originalRange: LineRange;\n\tif (lineChange.originalEndLineNumber === 0) {\n\t\t// Insertion\n\t\toriginalRange = new LineRange(lineChange.originalStartLineNumber + 1, 0);\n\t} else {\n\t\toriginalRange = new LineRange(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1);\n\t}\n\n\tlet modifiedRange: LineRange;\n\tif (lineChange.modifiedEndLineNumber === 0) {\n\t\t// Deletion\n\t\tmodifiedRange = new LineRange(lineChange.modifiedStartLineNumber + 1, 0);\n\t} else {\n\t\tmodifiedRange = new LineRange(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1);\n\t}\n\n\tconst [r1, r2] = diffFromLineRanges(originalRange, modifiedRange);\n\treturn {\n\t\trange: r1,\n\t\ttext: modifiedTextModel.getValueInRange(r2),\n\t};\n}\n\nfunction diffFromLineRanges(originalRange: LineRange, modifiedRange: LineRange): [Range, Range] {\n\tif (originalRange.startLineNumber === 1 || modifiedRange.startLineNumber === 1) {\n\t\tif (!originalRange.isEmpty && !modifiedRange.isEmpty) {\n\t\t\treturn [\n\t\t\t\tnew Range(\n\t\t\t\t\toriginalRange.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\toriginalRange.endLineNumberExclusive - 1,\n\t\t\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t\t),\n\t\t\t\tnew Range(\n\t\t\t\t\tmodifiedRange.startLineNumber,\n\t\t\t\t\t1,\n\t\t\t\t\tmodifiedRange.endLineNumberExclusive - 1,\n\t\t\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\n\t\t// When one of them is one and one of them is empty, the other cannot be the last line of the document\n\t\treturn [\n\t\t\tnew Range(\n\t\t\t\toriginalRange.startLineNumber,\n\t\t\t\t1,\n\t\t\t\toriginalRange.endLineNumberExclusive,\n\t\t\t\t1,\n\t\t\t),\n\t\t\tnew Range(\n\t\t\t\tmodifiedRange.startLineNumber,\n\t\t\t\t1,\n\t\t\t\tmodifiedRange.endLineNumberExclusive,\n\t\t\t\t1,\n\t\t\t)\n\t\t];\n\t}\n\n\treturn [\n\t\tnew Range(\n\t\t\toriginalRange.startLineNumber - 1,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t\toriginalRange.endLineNumberExclusive - 1,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t),\n\t\tnew Range(\n\t\t\tmodifiedRange.startLineNumber - 1,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t\tmodifiedRange.endLineNumberExclusive - 1,\n\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t)\n\t];\n}\n\nclass LineRange {\n\tpublic constructor(\n\t\tpublic readonly startLineNumber: number,\n\t\tpublic readonly lineCount: number\n\t) { }\n\n\tpublic get isEmpty(): boolean {\n\t\treturn this.lineCount === 0;\n\t}\n\n\tpublic get endLineNumberExclusive(): number {\n\t\treturn this.startLineNumber + this.lineCount;\n\t}\n}\n\nfunction createLineDeletion(startLineNumber: number, endLineNumber: number, modifiedLineNumber: number): ILineChange {\n\treturn {\n\t\toriginalStartLineNumber: startLineNumber,\n\t\toriginalEndLineNumber: endLineNumber,\n\t\tmodifiedStartLineNumber: modifiedLineNumber,\n\t\tmodifiedEndLineNumber: 0,\n\t\tcharChanges: undefined\n\t};\n}\n\nfunction createLineInsertion(startLineNumber: number, endLineNumber: number, originalLineNumber: number): ILineChange {\n\treturn {\n\t\toriginalStartLineNumber: originalLineNumber,\n\t\toriginalEndLineNumber: 0,\n\t\tmodifiedStartLineNumber: startLineNumber,\n\t\tmodifiedEndLineNumber: endLineNumber,\n\t\tcharChanges: undefined\n\t};\n}\n\nfunction createLineChange(originalStartLineNumber: number, originalEndLineNumber: number, modifiedStartLineNumber: number, modifiedEndLineNumber: number, charChanges?: ICharChange[]): ILineChange {\n\treturn {\n\t\toriginalStartLineNumber: originalStartLineNumber,\n\t\toriginalEndLineNumber: originalEndLineNumber,\n\t\tmodifiedStartLineNumber: modifiedStartLineNumber,\n\t\tmodifiedEndLineNumber: modifiedEndLineNumber,\n\t\tcharChanges: charChanges\n\t};\n}\n\nfunction createCharChange(\n\toriginalStartLineNumber: number, originalStartColumn: number, originalEndLineNumber: number, originalEndColumn: number,\n\tmodifiedStartLineNumber: number, modifiedStartColumn: number, modifiedEndLineNumber: number, modifiedEndColumn: number\n) {\n\treturn {\n\t\toriginalStartLineNumber: originalStartLineNumber,\n\t\toriginalStartColumn: originalStartColumn,\n\t\toriginalEndLineNumber: originalEndLineNumber,\n\t\toriginalEndColumn: originalEndColumn,\n\t\tmodifiedStartLineNumber: modifiedStartLineNumber,\n\t\tmodifiedStartColumn: modifiedStartColumn,\n\t\tmodifiedEndLineNumber: modifiedEndLineNumber,\n\t\tmodifiedEndColumn: modifiedEndColumn\n\t};\n}\n\nsuite('Editor Diff - DiffComputer', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\t// ---- insertions\n\n\ttest('one inserted line below', () => {\n\t\tconst original = ['line'];\n\t\tconst modified = ['line', 'new line'];\n\t\tconst expected = [createLineInsertion(2, 2, 1)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two inserted lines below', () => {\n\t\tconst original = ['line'];\n\t\tconst modified = ['line', 'new line', 'another new line'];\n\t\tconst expected = [createLineInsertion(2, 3, 1)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one inserted line above', () => {\n\t\tconst original = ['line'];\n\t\tconst modified = ['new line', 'line'];\n\t\tconst expected = [createLineInsertion(1, 1, 0)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two inserted lines above', () => {\n\t\tconst original = ['line'];\n\t\tconst modified = ['new line', 'another new line', 'line'];\n\t\tconst expected = [createLineInsertion(1, 2, 0)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one inserted line in middle', () => {\n\t\tconst original = ['line1', 'line2', 'line3', 'line4'];\n\t\tconst modified = ['line1', 'line2', 'new line', 'line3', 'line4'];\n\t\tconst expected = [createLineInsertion(3, 3, 2)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two inserted lines in middle', () => {\n\t\tconst original = ['line1', 'line2', 'line3', 'line4'];\n\t\tconst modified = ['line1', 'line2', 'new line', 'another new line', 'line3', 'line4'];\n\t\tconst expected = [createLineInsertion(3, 4, 2)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two inserted lines in middle interrupted', () => {\n\t\tconst original = ['line1', 'line2', 'line3', 'line4'];\n\t\tconst modified = ['line1', 'line2', 'new line', 'line3', 'another new line', 'line4'];\n\t\tconst expected = [createLineInsertion(3, 3, 2), createLineInsertion(5, 5, 3)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\t// ---- deletions\n\n\ttest('one deleted line below', () => {\n\t\tconst original = ['line', 'new line'];\n\t\tconst modified = ['line'];\n\t\tconst expected = [createLineDeletion(2, 2, 1)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two deleted lines below', () => {\n\t\tconst original = ['line', 'new line', 'another new line'];\n\t\tconst modified = ['line'];\n\t\tconst expected = [createLineDeletion(2, 3, 1)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one deleted lines above', () => {\n\t\tconst original = ['new line', 'line'];\n\t\tconst modified = ['line'];\n\t\tconst expected = [createLineDeletion(1, 1, 0)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two deleted lines above', () => {\n\t\tconst original = ['new line', 'another new line', 'line'];\n\t\tconst modified = ['line'];\n\t\tconst expected = [createLineDeletion(1, 2, 0)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one deleted line in middle', () => {\n\t\tconst original = ['line1', 'line2', 'new line', 'line3', 'line4'];\n\t\tconst modified = ['line1', 'line2', 'line3', 'line4'];\n\t\tconst expected = [createLineDeletion(3, 3, 2)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two deleted lines in middle', () => {\n\t\tconst original = ['line1', 'line2', 'new line', 'another new line', 'line3', 'line4'];\n\t\tconst modified = ['line1', 'line2', 'line3', 'line4'];\n\t\tconst expected = [createLineDeletion(3, 4, 2)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two deleted lines in middle interrupted', () => {\n\t\tconst original = ['line1', 'line2', 'new line', 'line3', 'another new line', 'line4'];\n\t\tconst modified = ['line1', 'line2', 'line3', 'line4'];\n\t\tconst expected = [createLineDeletion(3, 3, 2), createLineDeletion(5, 5, 3)];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\t// ---- changes\n\n\ttest('one line changed: chars inserted at the end', () => {\n\t\tconst original = ['line'];\n\t\tconst modified = ['line changed'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 5, 1, 5, 1, 5, 1, 13)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one line changed: chars inserted at the beginning', () => {\n\t\tconst original = ['line'];\n\t\tconst modified = ['my line'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 1, 1, 1, 1, 1, 1, 4)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one line changed: chars inserted in the middle', () => {\n\t\tconst original = ['abba'];\n\t\tconst modified = ['abzzba'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 3, 1, 3, 1, 3, 1, 5)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one line changed: chars inserted in the middle (two spots)', () => {\n\t\tconst original = ['abba'];\n\t\tconst modified = ['abzzbzza'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 3, 1, 3, 1, 3, 1, 5),\n\t\t\t\tcreateCharChange(1, 4, 1, 4, 1, 6, 1, 8)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one line changed: chars deleted 1', () => {\n\t\tconst original = ['abcdefg'];\n\t\tconst modified = ['abcfg'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 4, 1, 6, 1, 4, 1, 4)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('one line changed: chars deleted 2', () => {\n\t\tconst original = ['abcdefg'];\n\t\tconst modified = ['acfg'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 2, 1, 3, 1, 2, 1, 2),\n\t\t\t\tcreateCharChange(1, 4, 1, 6, 1, 3, 1, 3)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two lines changed 1', () => {\n\t\tconst original = ['abcd', 'efgh'];\n\t\tconst modified = ['abcz'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 2, 1, 1, [\n\t\t\t\tcreateCharChange(1, 4, 2, 5, 1, 4, 1, 5)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two lines changed 2', () => {\n\t\tconst original = ['foo', 'abcd', 'efgh', 'BAR'];\n\t\tconst modified = ['foo', 'abcz', 'BAR'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(2, 3, 2, 2, [\n\t\t\t\tcreateCharChange(2, 4, 3, 5, 2, 4, 2, 5)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two lines changed 3', () => {\n\t\tconst original = ['foo', 'abcd', 'efgh', 'BAR'];\n\t\tconst modified = ['foo', 'abcz', 'zzzzefgh', 'BAR'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(2, 3, 2, 3, [\n\t\t\t\tcreateCharChange(2, 4, 2, 5, 2, 4, 2, 5),\n\t\t\t\tcreateCharChange(3, 1, 3, 1, 3, 1, 3, 5)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('two lines changed 4', () => {\n\t\tconst original = ['abc'];\n\t\tconst modified = ['', '', 'axc', ''];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 4, [\n\t\t\t\tcreateCharChange(1, 1, 1, 1, 1, 1, 3, 1),\n\t\t\t\tcreateCharChange(1, 2, 1, 3, 3, 2, 3, 3),\n\t\t\t\tcreateCharChange(1, 4, 1, 4, 3, 4, 4, 1)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('empty original sequence in char diff', () => {\n\t\tconst original = ['abc', '', 'xyz'];\n\t\tconst modified = ['abc', 'qwe', 'rty', 'xyz'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(2, 2, 2, 3)\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('three lines changed', () => {\n\t\tconst original = ['foo', 'abcd', 'efgh', 'BAR'];\n\t\tconst modified = ['foo', 'zzzefgh', 'xxx', 'BAR'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(2, 3, 2, 3, [\n\t\t\t\tcreateCharChange(2, 1, 3, 1, 2, 1, 2, 4),\n\t\t\t\tcreateCharChange(3, 5, 3, 5, 2, 8, 3, 4),\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('big change part 1', () => {\n\t\tconst original = ['foo', 'abcd', 'efgh', 'BAR'];\n\t\tconst modified = ['hello', 'foo', 'zzzefgh', 'xxx', 'BAR'];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(1, 1, 0),\n\t\t\tcreateLineChange(2, 3, 3, 4, [\n\t\t\t\tcreateCharChange(2, 1, 3, 1, 3, 1, 3, 4),\n\t\t\t\tcreateCharChange(3, 5, 3, 5, 3, 8, 4, 4)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('big change part 2', () => {\n\t\tconst original = ['foo', 'abcd', 'efgh', 'BAR', 'RAB'];\n\t\tconst modified = ['hello', 'foo', 'zzzefgh', 'xxx', 'BAR'];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(1, 1, 0),\n\t\t\tcreateLineChange(2, 3, 3, 4, [\n\t\t\t\tcreateCharChange(2, 1, 3, 1, 3, 1, 3, 4),\n\t\t\t\tcreateCharChange(3, 5, 3, 5, 3, 8, 4, 4)\n\t\t\t]),\n\t\t\tcreateLineDeletion(5, 5, 5)\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('char change postprocessing merges', () => {\n\t\tconst original = ['abba'];\n\t\tconst modified = ['azzzbzzzbzzza'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, [\n\t\t\t\tcreateCharChange(1, 2, 1, 4, 1, 2, 1, 13)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected, true, true);\n\t});\n\n\ttest('ignore trim whitespace', () => {\n\t\tconst original = ['\\t\\t foo ', 'abcd', 'efgh', '\\t\\t BAR\\t\\t'];\n\t\tconst modified = ['  hello\\t', '\\t foo   \\t', 'zzzefgh', 'xxx', '   BAR   \\t'];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(1, 1, 0),\n\t\t\tcreateLineChange(2, 3, 3, 4, [\n\t\t\t\tcreateCharChange(2, 1, 2, 5, 3, 1, 3, 4),\n\t\t\t\tcreateCharChange(3, 5, 3, 5, 4, 1, 4, 4)\n\t\t\t])\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('issue #12122 r.hasOwnProperty is not a function', () => {\n\t\tconst original = ['hasOwnProperty'];\n\t\tconst modified = ['hasOwnProperty', 'and another line'];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(2, 2, 1)\n\t\t];\n\t\tassertDiff(original, modified, expected);\n\t});\n\n\ttest('empty diff 1', () => {\n\t\tconst original = [''];\n\t\tconst modified = ['something'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, undefined)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('empty diff 2', () => {\n\t\tconst original = [''];\n\t\tconst modified = ['something', 'something else'];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 2, undefined)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('empty diff 3', () => {\n\t\tconst original = ['something', 'something else'];\n\t\tconst modified = [''];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 2, 1, 1, undefined)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('empty diff 4', () => {\n\t\tconst original = ['something'];\n\t\tconst modified = [''];\n\t\tconst expected = [\n\t\t\tcreateLineChange(1, 1, 1, 1, undefined)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('empty diff 5', () => {\n\t\tconst original = [''];\n\t\tconst modified = [''];\n\t\tconst expected: ILineChange[] = [];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('pretty diff 1', () => {\n\t\tconst original = [\n\t\t\t'suite(function () {',\n\t\t\t'\ttest1() {',\n\t\t\t'\t\tassert.ok(true);',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\ttest2() {',\n\t\t\t'\t\tassert.ok(true);',\n\t\t\t'\t}',\n\t\t\t'});',\n\t\t\t'',\n\t\t];\n\t\tconst modified = [\n\t\t\t'// An insertion',\n\t\t\t'suite(function () {',\n\t\t\t'\ttest1() {',\n\t\t\t'\t\tassert.ok(true);',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\ttest2() {',\n\t\t\t'\t\tassert.ok(true);',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\ttest3() {',\n\t\t\t'\t\tassert.ok(true);',\n\t\t\t'\t}',\n\t\t\t'});',\n\t\t\t'',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(1, 1, 0),\n\t\t\tcreateLineInsertion(10, 13, 8)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('pretty diff 2', () => {\n\t\tconst original = [\n\t\t\t'// Just a comment',\n\t\t\t'',\n\t\t\t'function compute(a, b, c, d) {',\n\t\t\t'\tif (a) {',\n\t\t\t'\t\tif (b) {',\n\t\t\t'\t\t\tif (c) {',\n\t\t\t'\t\t\t\treturn 5;',\n\t\t\t'\t\t\t}',\n\t\t\t'\t\t}',\n\t\t\t'\t\t// These next lines will be deleted',\n\t\t\t'\t\tif (d) {',\n\t\t\t'\t\t\treturn -1;',\n\t\t\t'\t\t}',\n\t\t\t'\t\treturn 0;',\n\t\t\t'\t}',\n\t\t\t'}',\n\t\t];\n\t\tconst modified = [\n\t\t\t'// Here is an inserted line',\n\t\t\t'// and another inserted line',\n\t\t\t'// and another one',\n\t\t\t'// Just a comment',\n\t\t\t'',\n\t\t\t'function compute(a, b, c, d) {',\n\t\t\t'\tif (a) {',\n\t\t\t'\t\tif (b) {',\n\t\t\t'\t\t\tif (c) {',\n\t\t\t'\t\t\t\treturn 5;',\n\t\t\t'\t\t\t}',\n\t\t\t'\t\t}',\n\t\t\t'\t\treturn 0;',\n\t\t\t'\t}',\n\t\t\t'}',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(1, 3, 0),\n\t\t\tcreateLineDeletion(10, 13, 12),\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('pretty diff 3', () => {\n\t\tconst original = [\n\t\t\t'class A {',\n\t\t\t'\t/**',\n\t\t\t'\t * m1',\n\t\t\t'\t */',\n\t\t\t'\tmethod1() {}',\n\t\t\t'',\n\t\t\t'\t/**',\n\t\t\t'\t * m3',\n\t\t\t'\t */',\n\t\t\t'\tmethod3() {}',\n\t\t\t'}',\n\t\t];\n\t\tconst modified = [\n\t\t\t'class A {',\n\t\t\t'\t/**',\n\t\t\t'\t * m1',\n\t\t\t'\t */',\n\t\t\t'\tmethod1() {}',\n\t\t\t'',\n\t\t\t'\t/**',\n\t\t\t'\t * m2',\n\t\t\t'\t */',\n\t\t\t'\tmethod2() {}',\n\t\t\t'',\n\t\t\t'\t/**',\n\t\t\t'\t * m3',\n\t\t\t'\t */',\n\t\t\t'\tmethod3() {}',\n\t\t\t'}',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineInsertion(7, 11, 6)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, true);\n\t});\n\n\ttest('issue #23636', () => {\n\t\tconst original = [\n\t\t\t'if(!TextDrawLoad[playerid])',\n\t\t\t'{',\n\t\t\t'',\n\t\t\t'\tTextDrawHideForPlayer(playerid,TD_AppleJob[3]);',\n\t\t\t'\tTextDrawHideForPlayer(playerid,TD_AppleJob[4]);',\n\t\t\t'\tif(!AppleJobTreesType[AppleJobTreesPlayerNum[playerid]])',\n\t\t\t'\t{',\n\t\t\t'\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[5+i]);',\n\t\t\t'\t}',\n\t\t\t'\telse',\n\t\t\t'\t{',\n\t\t\t'\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[15+i]);',\n\t\t\t'\t}',\n\t\t\t'}',\n\t\t\t'else',\n\t\t\t'{',\n\t\t\t'\tTextDrawHideForPlayer(playerid,TD_AppleJob[3]);',\n\t\t\t'\tTextDrawHideForPlayer(playerid,TD_AppleJob[27]);',\n\t\t\t'\tif(!AppleJobTreesType[AppleJobTreesPlayerNum[playerid]])',\n\t\t\t'\t{',\n\t\t\t'\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[28+i]);',\n\t\t\t'\t}',\n\t\t\t'\telse',\n\t\t\t'\t{',\n\t\t\t'\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[38+i]);',\n\t\t\t'\t}',\n\t\t\t'}',\n\t\t];\n\t\tconst modified = [\n\t\t\t'\tif(!TextDrawLoad[playerid])',\n\t\t\t'\t{',\n\t\t\t'\t',\n\t\t\t'\t\tTextDrawHideForPlayer(playerid,TD_AppleJob[3]);',\n\t\t\t'\t\tTextDrawHideForPlayer(playerid,TD_AppleJob[4]);',\n\t\t\t'\t\tif(!AppleJobTreesType[AppleJobTreesPlayerNum[playerid]])',\n\t\t\t'\t\t{',\n\t\t\t'\t\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[5+i]);',\n\t\t\t'\t\t}',\n\t\t\t'\t\telse',\n\t\t\t'\t\t{',\n\t\t\t'\t\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[15+i]);',\n\t\t\t'\t\t}',\n\t\t\t'\t}',\n\t\t\t'\telse',\n\t\t\t'\t{',\n\t\t\t'\t\tTextDrawHideForPlayer(playerid,TD_AppleJob[3]);',\n\t\t\t'\t\tTextDrawHideForPlayer(playerid,TD_AppleJob[27]);',\n\t\t\t'\t\tif(!AppleJobTreesType[AppleJobTreesPlayerNum[playerid]])',\n\t\t\t'\t\t{',\n\t\t\t'\t\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[28+i]);',\n\t\t\t'\t\t}',\n\t\t\t'\t\telse',\n\t\t\t'\t\t{',\n\t\t\t'\t\t\tfor(new i=0;i<10;i++) if(StatusTD_AppleJobApples[playerid][i]) TextDrawHideForPlayer(playerid,TD_AppleJob[38+i]);',\n\t\t\t'\t\t}',\n\t\t\t'\t}',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t1, 27, 1, 27,\n\t\t\t\t[\n\t\t\t\t\tcreateCharChange(1, 1, 1, 1, 1, 1, 1, 2),\n\t\t\t\t\tcreateCharChange(2, 1, 2, 1, 2, 1, 2, 2),\n\t\t\t\t\tcreateCharChange(3, 1, 3, 1, 3, 1, 3, 2),\n\t\t\t\t\tcreateCharChange(4, 1, 4, 1, 4, 1, 4, 2),\n\t\t\t\t\tcreateCharChange(5, 1, 5, 1, 5, 1, 5, 2),\n\t\t\t\t\tcreateCharChange(6, 1, 6, 1, 6, 1, 6, 2),\n\t\t\t\t\tcreateCharChange(7, 1, 7, 1, 7, 1, 7, 2),\n\t\t\t\t\tcreateCharChange(8, 1, 8, 1, 8, 1, 8, 2),\n\t\t\t\t\tcreateCharChange(9, 1, 9, 1, 9, 1, 9, 2),\n\t\t\t\t\tcreateCharChange(10, 1, 10, 1, 10, 1, 10, 2),\n\t\t\t\t\tcreateCharChange(11, 1, 11, 1, 11, 1, 11, 2),\n\t\t\t\t\tcreateCharChange(12, 1, 12, 1, 12, 1, 12, 2),\n\t\t\t\t\tcreateCharChange(13, 1, 13, 1, 13, 1, 13, 2),\n\t\t\t\t\tcreateCharChange(14, 1, 14, 1, 14, 1, 14, 2),\n\t\t\t\t\tcreateCharChange(15, 1, 15, 1, 15, 1, 15, 2),\n\t\t\t\t\tcreateCharChange(16, 1, 16, 1, 16, 1, 16, 2),\n\t\t\t\t\tcreateCharChange(17, 1, 17, 1, 17, 1, 17, 2),\n\t\t\t\t\tcreateCharChange(18, 1, 18, 1, 18, 1, 18, 2),\n\t\t\t\t\tcreateCharChange(19, 1, 19, 1, 19, 1, 19, 2),\n\t\t\t\t\tcreateCharChange(20, 1, 20, 1, 20, 1, 20, 2),\n\t\t\t\t\tcreateCharChange(21, 1, 21, 1, 21, 1, 21, 2),\n\t\t\t\t\tcreateCharChange(22, 1, 22, 1, 22, 1, 22, 2),\n\t\t\t\t\tcreateCharChange(23, 1, 23, 1, 23, 1, 23, 2),\n\t\t\t\t\tcreateCharChange(24, 1, 24, 1, 24, 1, 24, 2),\n\t\t\t\t\tcreateCharChange(25, 1, 25, 1, 25, 1, 25, 2),\n\t\t\t\t\tcreateCharChange(26, 1, 26, 1, 26, 1, 26, 2),\n\t\t\t\t\tcreateCharChange(27, 1, 27, 1, 27, 1, 27, 2),\n\t\t\t\t]\n\t\t\t)\n\t\t\t// createLineInsertion(7, 11, 6)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, true, false);\n\t});\n\n\ttest('issue #43922', () => {\n\t\tconst original = [\n\t\t\t' * `yarn [install]` -- Install project NPM dependencies. This is automatically done when you first create the project. You should only need to run this if you add dependencies in `package.json`.',\n\t\t];\n\t\tconst modified = [\n\t\t\t' * `yarn` -- Install project NPM dependencies. You should only need to run this if you add dependencies in `package.json`.',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t1, 1, 1, 1,\n\t\t\t\t[\n\t\t\t\t\tcreateCharChange(1, 9, 1, 19, 1, 9, 1, 9),\n\t\t\t\t\tcreateCharChange(1, 58, 1, 120, 1, 48, 1, 48),\n\t\t\t\t]\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, true, false);\n\t});\n\n\ttest('issue #42751', () => {\n\t\tconst original = [\n\t\t\t'    1',\n\t\t\t'  2',\n\t\t];\n\t\tconst modified = [\n\t\t\t'    1',\n\t\t\t'   3',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t2, 2, 2, 2,\n\t\t\t\t[\n\t\t\t\t\tcreateCharChange(2, 3, 2, 4, 2, 3, 2, 5)\n\t\t\t\t]\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, true, true, false);\n\t});\n\n\ttest('does not give character changes', () => {\n\t\tconst original = [\n\t\t\t'    1',\n\t\t\t'  2',\n\t\t\t'A',\n\t\t];\n\t\tconst modified = [\n\t\t\t'    1',\n\t\t\t'   3',\n\t\t\t' A',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t2, 3, 2, 3\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, false, false, false);\n\t});\n\n\ttest('issue #44422: Less than ideal diff results', () => {\n\t\tconst original = [\n\t\t\t'export class C {',\n\t\t\t'',\n\t\t\t'\tpublic m1(): void {',\n\t\t\t'\t\t{',\n\t\t\t'\t\t//2',\n\t\t\t'\t\t//3',\n\t\t\t'\t\t//4',\n\t\t\t'\t\t//5',\n\t\t\t'\t\t//6',\n\t\t\t'\t\t//7',\n\t\t\t'\t\t//8',\n\t\t\t'\t\t//9',\n\t\t\t'\t\t//10',\n\t\t\t'\t\t//11',\n\t\t\t'\t\t//12',\n\t\t\t'\t\t//13',\n\t\t\t'\t\t//14',\n\t\t\t'\t\t//15',\n\t\t\t'\t\t//16',\n\t\t\t'\t\t//17',\n\t\t\t'\t\t//18',\n\t\t\t'\t\t}',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\tpublic m2(): void {',\n\t\t\t'\t\tif (a) {',\n\t\t\t'\t\t\tif (b) {',\n\t\t\t'\t\t\t\t//A1',\n\t\t\t'\t\t\t\t//A2',\n\t\t\t'\t\t\t\t//A3',\n\t\t\t'\t\t\t\t//A4',\n\t\t\t'\t\t\t\t//A5',\n\t\t\t'\t\t\t\t//A6',\n\t\t\t'\t\t\t\t//A7',\n\t\t\t'\t\t\t\t//A8',\n\t\t\t'\t\t\t}',\n\t\t\t'\t\t}',\n\t\t\t'',\n\t\t\t'\t\t//A9',\n\t\t\t'\t\t//A10',\n\t\t\t'\t\t//A11',\n\t\t\t'\t\t//A12',\n\t\t\t'\t\t//A13',\n\t\t\t'\t\t//A14',\n\t\t\t'\t\t//A15',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\tpublic m3(): void {',\n\t\t\t'\t\tif (a) {',\n\t\t\t'\t\t\t//B1',\n\t\t\t'\t\t}',\n\t\t\t'\t\t//B2',\n\t\t\t'\t\t//B3',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\tpublic m4(): boolean {',\n\t\t\t'\t\t//1',\n\t\t\t'\t\t//2',\n\t\t\t'\t\t//3',\n\t\t\t'\t\t//4',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'}',\n\t\t];\n\t\tconst modified = [\n\t\t\t'export class C {',\n\t\t\t'',\n\t\t\t'\tconstructor() {',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\tpublic m1(): void {',\n\t\t\t'\t\t{',\n\t\t\t'\t\t//2',\n\t\t\t'\t\t//3',\n\t\t\t'\t\t//4',\n\t\t\t'\t\t//5',\n\t\t\t'\t\t//6',\n\t\t\t'\t\t//7',\n\t\t\t'\t\t//8',\n\t\t\t'\t\t//9',\n\t\t\t'\t\t//10',\n\t\t\t'\t\t//11',\n\t\t\t'\t\t//12',\n\t\t\t'\t\t//13',\n\t\t\t'\t\t//14',\n\t\t\t'\t\t//15',\n\t\t\t'\t\t//16',\n\t\t\t'\t\t//17',\n\t\t\t'\t\t//18',\n\t\t\t'\t\t}',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'\tpublic m4(): boolean {',\n\t\t\t'\t\t//1',\n\t\t\t'\t\t//2',\n\t\t\t'\t\t//3',\n\t\t\t'\t\t//4',\n\t\t\t'\t}',\n\t\t\t'',\n\t\t\t'}',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t2, 0, 3, 9\n\t\t\t),\n\t\t\tcreateLineChange(\n\t\t\t\t25, 55, 31, 0\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, false, false, false);\n\t});\n\n\ttest('gives preference to matching longer lines', () => {\n\t\tconst original = [\n\t\t\t'A',\n\t\t\t'A',\n\t\t\t'BB',\n\t\t\t'C',\n\t\t];\n\t\tconst modified = [\n\t\t\t'A',\n\t\t\t'BB',\n\t\t\t'A',\n\t\t\t'D',\n\t\t\t'E',\n\t\t\t'A',\n\t\t\t'C',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t2, 2, 1, 0\n\t\t\t),\n\t\t\tcreateLineChange(\n\t\t\t\t3, 0, 3, 6\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, false, false, false);\n\t});\n\n\ttest('issue #119051: gives preference to fewer diff hunks', () => {\n\t\tconst original = [\n\t\t\t'1',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'2',\n\t\t\t'',\n\t\t];\n\t\tconst modified = [\n\t\t\t'1',\n\t\t\t'',\n\t\t\t'1.5',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'2',\n\t\t\t'',\n\t\t\t'3',\n\t\t\t'',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t2, 0, 3, 4\n\t\t\t),\n\t\t\tcreateLineChange(\n\t\t\t\t5, 0, 8, 9\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, false, false, false);\n\t});\n\n\ttest('issue #121436: Diff chunk contains an unchanged line part 1', () => {\n\t\tconst original = [\n\t\t\t'if (cond) {',\n\t\t\t'    cmd',\n\t\t\t'}',\n\t\t];\n\t\tconst modified = [\n\t\t\t'if (cond) {',\n\t\t\t'    if (other_cond) {',\n\t\t\t'        cmd',\n\t\t\t'    }',\n\t\t\t'}',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t1, 0, 2, 2\n\t\t\t),\n\t\t\tcreateLineChange(\n\t\t\t\t2, 0, 4, 4\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, false, false, true);\n\t});\n\n\ttest('issue #121436: Diff chunk contains an unchanged line part 2', () => {\n\t\tconst original = [\n\t\t\t'if (cond) {',\n\t\t\t'    cmd',\n\t\t\t'}',\n\t\t];\n\t\tconst modified = [\n\t\t\t'if (cond) {',\n\t\t\t'    if (other_cond) {',\n\t\t\t'        cmd',\n\t\t\t'    }',\n\t\t\t'}',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t1, 0, 2, 2\n\t\t\t),\n\t\t\tcreateLineChange(\n\t\t\t\t2, 2, 3, 3\n\t\t\t),\n\t\t\tcreateLineChange(\n\t\t\t\t2, 0, 4, 4\n\t\t\t)\n\t\t];\n\t\tassertDiff(original, modified, expected, false, false, false);\n\t});\n\n\ttest('issue #169552: Assertion error when having both leading and trailing whitespace diffs', () => {\n\t\tconst original = [\n\t\t\t'if True:',\n\t\t\t'    print(2)',\n\t\t];\n\t\tconst modified = [\n\t\t\t'if True:',\n\t\t\t'\\tprint(2) ',\n\t\t];\n\t\tconst expected = [\n\t\t\tcreateLineChange(\n\t\t\t\t2, 2, 2, 2,\n\t\t\t\t[\n\t\t\t\t\tcreateCharChange(2, 1, 2, 5, 2, 1, 2, 2),\n\t\t\t\t\tcreateCharChange(2, 13, 2, 13, 2, 10, 2, 11),\n\t\t\t\t]\n\t\t\t),\n\t\t];\n\t\tassertDiff(original, modified, expected, true, false, false);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
