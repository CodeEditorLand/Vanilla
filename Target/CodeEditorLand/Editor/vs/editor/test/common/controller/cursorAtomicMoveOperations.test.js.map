{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/controller/cursorAtomicMoveOperations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { AtomicTabMoveOperations, Direction } from '../../../common/cursor/cursorAtomicMoveOperations.js';\n\nsuite('Cursor move command test', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Test whitespaceVisibleColumn', () => {\n\t\tconst testCases = [\n\t\t\t{\n\t\t\t\tlineContent: '        ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 2, 3, 4, 5, 6, 7, 8, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '  ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 2, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '\\t',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, -1],\n\t\t\t\texpectedVisibleColumn: [0, 4, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '\\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 4, -1],\n\t\t\t\texpectedVisibleColumn: [0, 4, 5, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\t\\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, 2, 3, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, 4, 8, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 4, 8, 9, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\tA',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, 0, 0, -1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, 0, 0, -1, -1],\n\t\t\t\texpectedVisibleColumn: [0, 1, 4, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: 'A',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, -1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, -1, -1],\n\t\t\t\texpectedVisibleColumn: [0, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedPrevTabStopPosition: [-1, -1],\n\t\t\t\texpectedPrevTabStopVisibleColumn: [-1, -1],\n\t\t\t\texpectedVisibleColumn: [0, -1],\n\t\t\t},\n\t\t];\n\n\t\tfor (const testCase of testCases) {\n\t\t\tconst maxPosition = testCase.expectedVisibleColumn.length;\n\t\t\tfor (let position = 0; position < maxPosition; position++) {\n\t\t\t\tconst actual = AtomicTabMoveOperations.whitespaceVisibleColumn(testCase.lineContent, position, testCase.tabSize);\n\t\t\t\tconst expected = [\n\t\t\t\t\ttestCase.expectedPrevTabStopPosition[position],\n\t\t\t\t\ttestCase.expectedPrevTabStopVisibleColumn[position],\n\t\t\t\t\ttestCase.expectedVisibleColumn[position]\n\t\t\t\t];\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('Test atomicPosition', () => {\n\t\tconst testCases = [\n\t\t\t{\n\t\t\t\tlineContent: '        ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1],\n\t\t\t\texpectedRight: [4, 4, 4, 4, 8, 8, 8, 8, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 0, 4, 4, 4, 4, 8, 8, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\t',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, -1],\n\t\t\t\texpectedRight: [2, 2, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 2, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '\\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, -1, -1],\n\t\t\t\texpectedRight: [1, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 1, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: ' \\t ',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, -1, -1],\n\t\t\t\texpectedRight: [2, 2, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 2, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '        A',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, 0, 0, 4, 4, 4, 4, -1, -1],\n\t\t\t\texpectedRight: [4, 4, 4, 4, 8, 8, 8, 8, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 0, 4, 4, 4, 4, 8, 8, -1, -1],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlineContent: '      foo',\n\t\t\t\ttabSize: 4,\n\t\t\t\texpectedLeft: [-1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1],\n\t\t\t\texpectedRight: [4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1],\n\t\t\t\texpectedNearest: [0, 0, 0, 4, 4, -1, -1, -1, -1, -1, -1],\n\t\t\t},\n\t\t];\n\n\t\tfor (const testCase of testCases) {\n\t\t\tfor (const { direction, expected } of [\n\t\t\t\t{\n\t\t\t\t\tdirection: Direction.Left,\n\t\t\t\t\texpected: testCase.expectedLeft,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdirection: Direction.Right,\n\t\t\t\t\texpected: testCase.expectedRight,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdirection: Direction.Nearest,\n\t\t\t\t\texpected: testCase.expectedNearest,\n\t\t\t\t},\n\t\t\t]) {\n\n\t\t\t\tconst actual = expected.map((_, i) => AtomicTabMoveOperations.atomicPosition(testCase.lineContent, i, testCase.tabSize, direction));\n\t\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t\t}\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
