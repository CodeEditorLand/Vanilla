{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/viewModel/lineBreakData.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { PositionAffinity } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ModelLineProjectionData } from '../../../common/modelLineProjectionData.js';\n\nsuite('Editor ViewModel - LineBreakData', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst data = new ModelLineProjectionData([], [], [100], [0], 10);\n\n\t\tassert.strictEqual(data.translateToInputOffset(0, 50), 50);\n\t\tassert.strictEqual(data.translateToInputOffset(1, 60), 150);\n\t});\n\n\tfunction sequence(length: number, start = 0): number[] {\n\t\tconst result = new Array<number>();\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tresult.push(i + start);\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction testInverse(data: ModelLineProjectionData) {\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tconst output = data.translateToOutputPosition(i);\n\t\t\tassert.deepStrictEqual(data.translateToInputOffset(output.outputLineIndex, output.outputOffset), i);\n\t\t}\n\t}\n\n\tfunction getInputOffsets(data: ModelLineProjectionData, outputLineIdx: number): number[] {\n\t\treturn sequence(20).map(i => data.translateToInputOffset(outputLineIdx, i));\n\t}\n\n\tfunction getOutputOffsets(data: ModelLineProjectionData, affinity: PositionAffinity): string[] {\n\t\treturn sequence(25).map(i => data.translateToOutputPosition(i, affinity).toString());\n\t}\n\n\tfunction mapTextToInjectedTextOptions(arr: string[]): ModelDecorationInjectedTextOptions[] {\n\t\treturn arr.map(e => ModelDecorationInjectedTextOptions.from({ content: e }));\n\t}\n\n\tsuite('Injected Text 1', () => {\n\t\tconst data = new ModelLineProjectionData([2, 3, 10], mapTextToInjectedTextOptions(['1', '22', '333']), [10, 100], [], 10);\n\n\t\ttest('getInputOffsetOfOutputPosition', () => {\n\t\t\t// For every view model position, what is the model position?\n\t\t\tassert.deepStrictEqual(getInputOffsets(data, 0), ([0, 1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13]));\n\t\t\tassert.deepStrictEqual(getInputOffsets(data, 1), ([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13]));\n\t\t});\n\n\t\ttest('getOutputPositionOfInputOffset', () => {\n\t\t\tdata.translateToOutputPosition(20);\n\t\t\tassert.deepStrictEqual(getOutputOffsets(data, PositionAffinity.None), [\n\t\t\t\t'0:0',\n\t\t\t\t'0:1',\n\t\t\t\t'0:2',\n\t\t\t\t'0:4',\n\t\t\t\t'0:7',\n\t\t\t\t'0:8',\n\t\t\t\t'0:9',\n\t\t\t\t'1:10',\n\t\t\t\t'1:11',\n\t\t\t\t'1:12',\n\t\t\t\t'1:13',\n\t\t\t\t'1:17',\n\t\t\t\t'1:18',\n\t\t\t\t'1:19',\n\t\t\t\t'1:20',\n\t\t\t\t'1:21',\n\t\t\t\t'1:22',\n\t\t\t\t'1:23',\n\t\t\t\t'1:24',\n\t\t\t\t'1:25',\n\t\t\t\t'1:26',\n\t\t\t\t'1:27',\n\t\t\t\t'1:28',\n\t\t\t\t'1:29',\n\t\t\t\t'1:30',\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(getOutputOffsets(data, PositionAffinity.Left), [\n\t\t\t\t'0:0',\n\t\t\t\t'0:1',\n\t\t\t\t'0:2',\n\t\t\t\t'0:4',\n\t\t\t\t'0:7',\n\t\t\t\t'0:8',\n\t\t\t\t'0:9',\n\t\t\t\t'0:10',\n\t\t\t\t'1:11',\n\t\t\t\t'1:12',\n\t\t\t\t'1:13',\n\t\t\t\t'1:17',\n\t\t\t\t'1:18',\n\t\t\t\t'1:19',\n\t\t\t\t'1:20',\n\t\t\t\t'1:21',\n\t\t\t\t'1:22',\n\t\t\t\t'1:23',\n\t\t\t\t'1:24',\n\t\t\t\t'1:25',\n\t\t\t\t'1:26',\n\t\t\t\t'1:27',\n\t\t\t\t'1:28',\n\t\t\t\t'1:29',\n\t\t\t\t'1:30',\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(getOutputOffsets(data, PositionAffinity.Right), [\n\t\t\t\t'0:0',\n\t\t\t\t'0:1',\n\t\t\t\t'0:3',\n\t\t\t\t'0:6',\n\t\t\t\t'0:7',\n\t\t\t\t'0:8',\n\t\t\t\t'0:9',\n\t\t\t\t'1:10',\n\t\t\t\t'1:11',\n\t\t\t\t'1:12',\n\t\t\t\t'1:16',\n\t\t\t\t'1:17',\n\t\t\t\t'1:18',\n\t\t\t\t'1:19',\n\t\t\t\t'1:20',\n\t\t\t\t'1:21',\n\t\t\t\t'1:22',\n\t\t\t\t'1:23',\n\t\t\t\t'1:24',\n\t\t\t\t'1:25',\n\t\t\t\t'1:26',\n\t\t\t\t'1:27',\n\t\t\t\t'1:28',\n\t\t\t\t'1:29',\n\t\t\t\t'1:30',\n\t\t\t]);\n\t\t});\n\n\t\ttest('getInputOffsetOfOutputPosition is inverse of getOutputPositionOfInputOffset', () => {\n\t\t\ttestInverse(data);\n\t\t});\n\n\n\t\ttest('normalization', () => {\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tsequence(25)\n\t\t\t\t\t.map((v) =>\n\t\t\t\t\t\tdata.normalizeOutputPosition(1, v, PositionAffinity.Right)\n\t\t\t\t\t)\n\t\t\t\t\t.map((s) => s.toString()),\n\t\t\t\t[\n\t\t\t\t\t'1:0',\n\t\t\t\t\t'1:1',\n\t\t\t\t\t'1:2',\n\t\t\t\t\t'1:3',\n\t\t\t\t\t'1:4',\n\t\t\t\t\t'1:5',\n\t\t\t\t\t'1:6',\n\t\t\t\t\t'1:7',\n\t\t\t\t\t'1:8',\n\t\t\t\t\t'1:9',\n\t\t\t\t\t'1:10',\n\t\t\t\t\t'1:11',\n\t\t\t\t\t'1:12',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:17',\n\t\t\t\t\t'1:18',\n\t\t\t\t\t'1:19',\n\t\t\t\t\t'1:20',\n\t\t\t\t\t'1:21',\n\t\t\t\t\t'1:22',\n\t\t\t\t\t'1:23',\n\t\t\t\t\t'1:24',\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\t});\n\n\tsuite('Injected Text 2', () => {\n\t\tconst data = new ModelLineProjectionData([2, 2, 6], mapTextToInjectedTextOptions(['1', '22', '333']), [10, 100], [], 0);\n\n\t\ttest('getInputOffsetOfOutputPosition', () => {\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 0),\n\t\t\t\t[0, 1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13]\n\t\t\t);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 1),\n\t\t\t\t[\n\t\t\t\t\t6, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n\t\t\t\t\t23,\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('getInputOffsetOfOutputPosition is inverse of getOutputPositionOfInputOffset', () => {\n\t\t\ttestInverse(data);\n\t\t});\n\t});\n\n\tsuite('Injected Text 3', () => {\n\t\tconst data = new ModelLineProjectionData([2, 2, 7], mapTextToInjectedTextOptions(['1', '22', '333']), [10, 100], [], 0);\n\n\t\ttest('getInputOffsetOfOutputPosition', () => {\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 0),\n\t\t\t\t[0, 1, 2, 2, 2, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13]\n\t\t\t);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 1),\n\t\t\t\t[\n\t\t\t\t\t7, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n\t\t\t\t\t23,\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('getInputOffsetOfOutputPosition is inverse of getOutputPositionOfInputOffset', () => {\n\t\t\ttestInverse(data);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
