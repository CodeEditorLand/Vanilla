{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/viewModel/glyphLanesModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { GlyphMarginLanesModel, } from '../../../common/viewModel/glyphLanesModel.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n\nsuite('GlyphLanesModel', () => {\n\tlet model: GlyphMarginLanesModel;\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst lineRange = (startLineNumber: number, endLineNumber: number) => new Range(startLineNumber, 1, endLineNumber, 1);\n\tconst assertLines = (fromLine: number, n: number, expected: GlyphMarginLane[][]) => {\n\t\tconst result: GlyphMarginLane[][] = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tresult.push(model.getLanesAtLine(fromLine + i));\n\t\t}\n\t\tassert.deepStrictEqual(result, expected, `fromLine: ${fromLine}, n: ${n}`);\n\t};\n\n\tsetup(() => {\n\t\tmodel = new GlyphMarginLanesModel(10);\n\t});\n\n\ttest('handles empty', () => {\n\t\tassert.equal(model.requiredLanes, 1);\n\t\tassertLines(1, 1, [\n\t\t\t[GlyphMarginLane.Center],\n\t\t]);\n\t});\n\n\ttest('works with a single line range', () => {\n\t\tmodel.push(GlyphMarginLane.Left, lineRange(2, 3));\n\t\tassert.equal(model.requiredLanes, 1);\n\t\tassertLines(1, 5, [\n\t\t\t[GlyphMarginLane.Center], // 1\n\t\t\t[GlyphMarginLane.Left], // 2\n\t\t\t[GlyphMarginLane.Left], // 3\n\t\t\t[GlyphMarginLane.Center], // 4\n\t\t\t[GlyphMarginLane.Center], // 5\n\t\t]);\n\t});\n\n\ttest('persists ranges', () => {\n\t\tmodel.push(GlyphMarginLane.Left, lineRange(2, 3), true);\n\t\tassert.equal(model.requiredLanes, 1);\n\t\tassertLines(1, 5, [\n\t\t\t[GlyphMarginLane.Left], // 1\n\t\t\t[GlyphMarginLane.Left], // 2\n\t\t\t[GlyphMarginLane.Left], // 3\n\t\t\t[GlyphMarginLane.Left], // 4\n\t\t\t[GlyphMarginLane.Left], // 5\n\t\t]);\n\t});\n\n\ttest('handles overlaps', () => {\n\t\tmodel.push(GlyphMarginLane.Left, lineRange(6, 9));\n\t\tmodel.push(GlyphMarginLane.Right, lineRange(5, 7));\n\t\tmodel.push(GlyphMarginLane.Center, lineRange(7, 8));\n\t\tassert.equal(model.requiredLanes, 3);\n\t\tassertLines(5, 6, [\n\t\t\t[GlyphMarginLane.Right], // 5\n\t\t\t[GlyphMarginLane.Left, GlyphMarginLane.Right], // 6\n\t\t\t[GlyphMarginLane.Left, GlyphMarginLane.Center, GlyphMarginLane.Right], // 7\n\t\t\t[GlyphMarginLane.Left, GlyphMarginLane.Center], // 8\n\t\t\t[GlyphMarginLane.Left], // 9\n\t\t\t[GlyphMarginLane.Center], // 10\n\t\t]);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,6BAA8B;AACvC,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAEhC,MAAM,mBAAmB,MAAM;AAC9B,MAAI;AAEJ,0CAAwC;AAExC,QAAM,YAAY,wBAAC,iBAAyB,kBAA0B,IAAI,MAAM,iBAAiB,GAAG,eAAe,CAAC,GAAlG;AAClB,QAAM,cAAc,wBAAC,UAAkB,GAAW,aAAkC;AACnF,UAAM,SAA8B,CAAC;AACrC,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,aAAO,KAAK,MAAM,eAAe,WAAW,CAAC,CAAC;AAAA,IAC/C;AACA,WAAO,gBAAgB,QAAQ,UAAU,aAAa,QAAQ,QAAQ,CAAC,EAAE;AAAA,EAC1E,GANoB;AAQpB,QAAM,MAAM;AACX,YAAQ,IAAI,sBAAsB,EAAE;AAAA,EACrC,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,WAAO,MAAM,MAAM,eAAe,CAAC;AACnC,gBAAY,GAAG,GAAG;AAAA,MACjB,CAAC,gBAAgB,MAAM;AAAA,IACxB,CAAC;AAAA,EACF,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C,UAAM,KAAK,gBAAgB,MAAM,UAAU,GAAG,CAAC,CAAC;AAChD,WAAO,MAAM,MAAM,eAAe,CAAC;AACnC,gBAAY,GAAG,GAAG;AAAA,MACjB,CAAC,gBAAgB,MAAM;AAAA;AAAA,MACvB,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,MAAM;AAAA;AAAA,MACvB,CAAC,gBAAgB,MAAM;AAAA;AAAA,IACxB,CAAC;AAAA,EACF,CAAC;AAED,OAAK,mBAAmB,MAAM;AAC7B,UAAM,KAAK,gBAAgB,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI;AACtD,WAAO,MAAM,MAAM,eAAe,CAAC;AACnC,gBAAY,GAAG,GAAG;AAAA,MACjB,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,IAAI;AAAA;AAAA,IACtB,CAAC;AAAA,EACF,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,UAAM,KAAK,gBAAgB,MAAM,UAAU,GAAG,CAAC,CAAC;AAChD,UAAM,KAAK,gBAAgB,OAAO,UAAU,GAAG,CAAC,CAAC;AACjD,UAAM,KAAK,gBAAgB,QAAQ,UAAU,GAAG,CAAC,CAAC;AAClD,WAAO,MAAM,MAAM,eAAe,CAAC;AACnC,gBAAY,GAAG,GAAG;AAAA,MACjB,CAAC,gBAAgB,KAAK;AAAA;AAAA,MACtB,CAAC,gBAAgB,MAAM,gBAAgB,KAAK;AAAA;AAAA,MAC5C,CAAC,gBAAgB,MAAM,gBAAgB,QAAQ,gBAAgB,KAAK;AAAA;AAAA,MACpE,CAAC,gBAAgB,MAAM,gBAAgB,MAAM;AAAA;AAAA,MAC7C,CAAC,gBAAgB,IAAI;AAAA;AAAA,MACrB,CAAC,gBAAgB,MAAM;AAAA;AAAA,IACxB,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
