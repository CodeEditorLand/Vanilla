{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/modes/supports/characterPair.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { StandardTokenType } from '../../../../common/encodedTokenAttributes.js';\nimport { StandardAutoClosingPairConditional } from '../../../../common/languages/languageConfiguration.js';\nimport { CharacterPairSupport } from '../../../../common/languages/supports/characterPair.js';\nimport { TokenText, createFakeScopedLineTokens } from '../../modesTestUtils.js';\n\nsuite('CharacterPairSupport', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('only autoClosingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [{ open: 'a', close: 'b' }] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t});\n\n\ttest('only empty autoClosingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('only brackets', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ brackets: [['a', 'b']] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t});\n\n\ttest('only empty brackets', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ brackets: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('only surroundingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ surroundingPairs: [{ open: 'a', close: 'b' }] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [{ open: 'a', close: 'b' }]);\n\t});\n\n\ttest('only empty surroundingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ surroundingPairs: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('brackets is ignored when having autoClosingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [], brackets: [['a', 'b']] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\tfunction testShouldAutoClose(characterPairSupport: CharacterPairSupport, line: TokenText[], column: number): boolean {\n\t\tconst autoClosingPair = characterPairSupport.getAutoClosingPairs()[0];\n\t\treturn autoClosingPair.shouldAutoClose(createFakeScopedLineTokens(line), column);\n\t}\n\n\ttest('shouldAutoClosePair in empty line', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), true);\n\t});\n\n\ttest('shouldAutoClosePair in not interesting line 1', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: 'do', type: StandardTokenType.Other }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), true);\n\t});\n\n\ttest('shouldAutoClosePair in not interesting line 2', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}' }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: 'do', type: StandardTokenType.String }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), true);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 1', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: '\"a\"', type: StandardTokenType.String }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 2), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 4), false);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 2', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: 'x=', type: StandardTokenType.Other },\n\t\t\t{ text: '\"a\"', type: StandardTokenType.String },\n\t\t\t{ text: ';', type: StandardTokenType.Other }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 2), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 5), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 6), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 7), true);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 3', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: ' ', type: StandardTokenType.Other },\n\t\t\t{ text: '//a', type: StandardTokenType.Comment }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 2), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 5), false);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
