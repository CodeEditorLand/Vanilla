{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/modes/supports/richEditBrackets.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { BracketsUtils } from '../../../../common/languages/supports/richEditBrackets.js';\n\nsuite('richEditBrackets', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction findPrevBracketInRange(reversedBracketRegex: RegExp, lineText: string, currentTokenStart: number, currentTokenEnd: number): Range | null {\n\t\treturn BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, lineText, currentTokenStart, currentTokenEnd);\n\t}\n\n\tfunction findNextBracketInRange(forwardBracketRegex: RegExp, lineText: string, currentTokenStart: number, currentTokenEnd: number): Range | null {\n\t\treturn BracketsUtils.findNextBracketInRange(forwardBracketRegex, 1, lineText, currentTokenStart, currentTokenEnd);\n\t}\n\n\ttest('findPrevBracketInToken one char 1', () => {\n\t\tconst result = findPrevBracketInRange(/(\\{)|(\\})/i, '{', 0, 1);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findPrevBracketInToken one char 2', () => {\n\t\tconst result = findPrevBracketInRange(/(\\{)|(\\})/i, '{{', 0, 1);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findPrevBracketInToken one char 3', () => {\n\t\tconst result = findPrevBracketInRange(/(\\{)|(\\})/i, '{hello world!', 0, 13);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findPrevBracketInToken more chars 1', () => {\n\t\tconst result = findPrevBracketInRange(/(olleh)/i, 'hello world!', 0, 12);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 6);\n\t});\n\n\ttest('findPrevBracketInToken more chars 2', () => {\n\t\tconst result = findPrevBracketInRange(/(olleh)/i, 'hello world!', 0, 5);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 6);\n\t});\n\n\ttest('findPrevBracketInToken more chars 3', () => {\n\t\tconst result = findPrevBracketInRange(/(olleh)/i, ' hello world!', 0, 6);\n\t\tassert.strictEqual(result!.startColumn, 2);\n\t\tassert.strictEqual(result!.endColumn, 7);\n\t});\n\n\ttest('findNextBracketInToken one char', () => {\n\t\tconst result = findNextBracketInRange(/(\\{)|(\\})/i, '{', 0, 1);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 2);\n\t});\n\n\ttest('findNextBracketInToken more chars', () => {\n\t\tconst result = findNextBracketInRange(/(world)/i, 'hello world!', 0, 12);\n\t\tassert.strictEqual(result!.startColumn, 7);\n\t\tassert.strictEqual(result!.endColumn, 12);\n\t});\n\n\ttest('findNextBracketInToken with emoty result', () => {\n\t\tconst result = findNextBracketInRange(/(\\{)|(\\})/i, '', 0, 0);\n\t\tassert.strictEqual(result, null);\n\t});\n\n\ttest('issue #3894: [Handlebars] Curly braces edit issues', () => {\n\t\tconst result = findPrevBracketInRange(/(\\-\\-!<)|(>\\-\\-)|(\\{\\{)|(\\}\\})/i, '{{asd}}', 0, 2);\n\t\tassert.strictEqual(result!.startColumn, 1);\n\t\tassert.strictEqual(result!.endColumn, 3);\n\t});\n\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,aAAa;AACtB,SAAS,qBAAqB;AAE9B,MAAM,oBAAoB,MAAM;AAE/B,0CAAwC;AAExC,WAAS,uBAAuB,sBAA8B,UAAkB,mBAA2B,iBAAuC;AACjJ,WAAO,cAAc,uBAAuB,sBAAsB,GAAG,UAAU,mBAAmB,eAAe;AAAA,EAClH;AAFS;AAIT,WAAS,uBAAuB,qBAA6B,UAAkB,mBAA2B,iBAAuC;AAChJ,WAAO,cAAc,uBAAuB,qBAAqB,GAAG,UAAU,mBAAmB,eAAe;AAAA,EACjH;AAFS;AAIT,OAAK,qCAAqC,MAAM;AAC/C,UAAM,SAAS,uBAAuB,cAAc,KAAK,GAAG,CAAC;AAC7D,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,qCAAqC,MAAM;AAC/C,UAAM,SAAS,uBAAuB,cAAc,MAAM,GAAG,CAAC;AAC9D,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,qCAAqC,MAAM;AAC/C,UAAM,SAAS,uBAAuB,cAAc,iBAAiB,GAAG,EAAE;AAC1E,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,uCAAuC,MAAM;AACjD,UAAM,SAAS,uBAAuB,YAAY,gBAAgB,GAAG,EAAE;AACvE,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,uCAAuC,MAAM;AACjD,UAAM,SAAS,uBAAuB,YAAY,gBAAgB,GAAG,CAAC;AACtE,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,uCAAuC,MAAM;AACjD,UAAM,SAAS,uBAAuB,YAAY,iBAAiB,GAAG,CAAC;AACvE,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C,UAAM,SAAS,uBAAuB,cAAc,KAAK,GAAG,CAAC;AAC7D,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,qCAAqC,MAAM;AAC/C,UAAM,SAAS,uBAAuB,YAAY,gBAAgB,GAAG,EAAE;AACvE,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,EAAE;AAAA,EACzC,CAAC;AAED,OAAK,4CAA4C,MAAM;AACtD,UAAM,SAAS,uBAAuB,cAAc,IAAI,GAAG,CAAC;AAC5D,WAAO,YAAY,QAAQ,IAAI;AAAA,EAChC,CAAC;AAED,OAAK,sDAAsD,MAAM;AAChE,UAAM,SAAS,uBAAuB,mCAAmC,WAAW,GAAG,CAAC;AACxF,WAAO,YAAY,OAAQ,aAAa,CAAC;AACzC,WAAO,YAAY,OAAQ,WAAW,CAAC;AAAA,EACxC,CAAC;AAEF,CAAC;",
  "names": []
}
