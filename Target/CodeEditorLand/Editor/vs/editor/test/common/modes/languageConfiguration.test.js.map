{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/modes/languageConfiguration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { StandardTokenType } from '../../../common/encodedTokenAttributes.js';\nimport { StandardAutoClosingPairConditional } from '../../../common/languages/languageConfiguration.js';\nimport { TestLanguageConfigurationService } from './testLanguageConfigurationService.js';\n\nsuite('StandardAutoClosingPairConditional', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Missing notIn', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}' });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('Empty notIn', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: [] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('Invalid notIn', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['bla'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in strings', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in comments', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['comment'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in regex', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('notIn in strings nor comments', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string', 'comment'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), true);\n\t});\n\n\ttest('notIn in strings nor regex', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string', 'regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('notIn in comments nor regex', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['comment', 'regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('notIn in strings, comments nor regex', () => {\n\t\tconst v = new StandardAutoClosingPairConditional({ open: '{', close: '}', notIn: ['string', 'comment', 'regex'] });\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Other), true);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.Comment), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.String), false);\n\t\tassert.strictEqual(v.isOK(StandardTokenType.RegEx), false);\n\t});\n\n\ttest('language configurations priorities', () => {\n\t\tconst languageConfigurationService = new TestLanguageConfigurationService();\n\t\tconst id = 'testLang1';\n\t\tconst d1 = languageConfigurationService.register(id, { comments: { lineComment: '1' } }, 100);\n\t\tconst d2 = languageConfigurationService.register(id, { comments: { lineComment: '2' } }, 10);\n\t\tassert.strictEqual(languageConfigurationService.getLanguageConfiguration(id).comments?.lineCommentToken, '1');\n\t\td1.dispose();\n\t\td2.dispose();\n\t\tlanguageConfigurationService.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
