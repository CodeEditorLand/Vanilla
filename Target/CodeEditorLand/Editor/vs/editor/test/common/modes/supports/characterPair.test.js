import e from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../../base/test/common/utils.js";import{StandardTokenType as n}from"../../../../common/encodedTokenAttributes.js";import{StandardAutoClosingPairConditional as a}from"../../../../common/languages/languageConfiguration.js";import{CharacterPairSupport as s}from"../../../../common/languages/supports/characterPair.js";import{createFakeScopedLineTokens as l}from"../../modesTestUtils.js";suite("CharacterPairSupport",()=>{u(),test("only autoClosingPairs",()=>{const t=new s({autoClosingPairs:[{open:"a",close:"b"}]});e.deepStrictEqual(t.getAutoClosingPairs(),[new a({open:"a",close:"b"})]),e.deepStrictEqual(t.getSurroundingPairs(),[new a({open:"a",close:"b"})])}),test("only empty autoClosingPairs",()=>{const t=new s({autoClosingPairs:[]});e.deepStrictEqual(t.getAutoClosingPairs(),[]),e.deepStrictEqual(t.getSurroundingPairs(),[])}),test("only brackets",()=>{const t=new s({brackets:[["a","b"]]});e.deepStrictEqual(t.getAutoClosingPairs(),[new a({open:"a",close:"b"})]),e.deepStrictEqual(t.getSurroundingPairs(),[new a({open:"a",close:"b"})])}),test("only empty brackets",()=>{const t=new s({brackets:[]});e.deepStrictEqual(t.getAutoClosingPairs(),[]),e.deepStrictEqual(t.getSurroundingPairs(),[])}),test("only surroundingPairs",()=>{const t=new s({surroundingPairs:[{open:"a",close:"b"}]});e.deepStrictEqual(t.getAutoClosingPairs(),[]),e.deepStrictEqual(t.getSurroundingPairs(),[{open:"a",close:"b"}])}),test("only empty surroundingPairs",()=>{const t=new s({surroundingPairs:[]});e.deepStrictEqual(t.getAutoClosingPairs(),[]),e.deepStrictEqual(t.getSurroundingPairs(),[])}),test("brackets is ignored when having autoClosingPairs",()=>{const t=new s({autoClosingPairs:[],brackets:[["a","b"]]});e.deepStrictEqual(t.getAutoClosingPairs(),[]),e.deepStrictEqual(t.getSurroundingPairs(),[])});function r(t,o,i){return t.getAutoClosingPairs()[0].shouldAutoClose(l(o),i)}test("shouldAutoClosePair in empty line",()=>{const t=new s({autoClosingPairs:[{open:"{",close:"}",notIn:["string","comment"]}]}),o=[];e.strictEqual(r(t,o,1),!0)}),test("shouldAutoClosePair in not interesting line 1",()=>{const t=new s({autoClosingPairs:[{open:"{",close:"}",notIn:["string","comment"]}]}),o=[{text:"do",type:n.Other}];e.strictEqual(r(t,o,3),!0)}),test("shouldAutoClosePair in not interesting line 2",()=>{const t=new s({autoClosingPairs:[{open:"{",close:"}"}]}),o=[{text:"do",type:n.String}];e.strictEqual(r(t,o,3),!0)}),test("shouldAutoClosePair in interesting line 1",()=>{const t=new s({autoClosingPairs:[{open:"{",close:"}",notIn:["string","comment"]}]}),o=[{text:'"a"',type:n.String}];e.strictEqual(r(t,o,1),!1),e.strictEqual(r(t,o,2),!1),e.strictEqual(r(t,o,3),!1),e.strictEqual(r(t,o,4),!1)}),test("shouldAutoClosePair in interesting line 2",()=>{const t=new s({autoClosingPairs:[{open:"{",close:"}",notIn:["string","comment"]}]}),o=[{text:"x=",type:n.Other},{text:'"a"',type:n.String},{text:";",type:n.Other}];e.strictEqual(r(t,o,1),!0),e.strictEqual(r(t,o,2),!0),e.strictEqual(r(t,o,3),!0),e.strictEqual(r(t,o,4),!1),e.strictEqual(r(t,o,5),!1),e.strictEqual(r(t,o,6),!1),e.strictEqual(r(t,o,7),!0)}),test("shouldAutoClosePair in interesting line 3",()=>{const t=new s({autoClosingPairs:[{open:"{",close:"}",notIn:["string","comment"]}]}),o=[{text:" ",type:n.Other},{text:"//a",type:n.Comment}];e.strictEqual(r(t,o,1),!0),e.strictEqual(r(t,o,2),!0),e.strictEqual(r(t,o,3),!1),e.strictEqual(r(t,o,4),!1),e.strictEqual(r(t,o,5),!1)})});
