var x=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var E=(i,a,l,e)=>{for(var s=e>1?void 0:e?N(a,l):a,t=i.length-1,f;t>=0;t--)(f=i[t])&&(s=(e?f(a,l,s):f(s))||s);return e&&s&&x(a,l,s),s},F=(i,a)=>(l,e)=>a(l,e,i);import n from"assert";import{Disposable as h,DisposableStore as v}from"../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../base/test/common/utils.js";import{FontStyle as m,MetadataConsts as o}from"../../../common/encodedTokenAttributes.js";import{EncodedTokenizationResult as R,TokenizationRegistry as y}from"../../../common/languages.js";import{ILanguageService as I}from"../../../common/languages/language.js";import{_tokenizeToString as g,tokenizeLineToHTML as c}from"../../../common/languages/textToHtmlTokenizer.js";import{LanguageIdCodec as O}from"../../../common/services/languagesRegistry.js";import{TestLineToken as p,TestLineTokens as k}from"../core/testLineToken.js";import{createModelServices as _}from"../testTextModel.js";import"../../../../platform/instantiation/test/common/instantiationServiceMock.js";suite("Editor Modes - textToHtmlTokenizer",()=>{let i,a;setup(()=>{i=new v,a=_(i)}),teardown(()=>{i.dispose()}),w();function l(e){return e.map(t=>`<span class="${t.className}">${t.text}</span>`).join("")}test("TextToHtmlTokenizer 1",()=>{const e=i.add(a.createInstance(u)),s=y.get(e.languageId),t=g(".abc..def...gh",new O,s),d=`<div class="monaco-tokenized-source">${l([{className:"mtk7",text:"."},{className:"mtk9",text:"abc"},{className:"mtk7",text:".."},{className:"mtk9",text:"def"},{className:"mtk7",text:"..."},{className:"mtk9",text:"gh"}])}</div>`;n.strictEqual(t,d)}),test("TextToHtmlTokenizer 2",()=>{const e=i.add(a.createInstance(u)),s=y.get(e.languageId),t=g(`.abc..def...gh
.abc..def...gh`,new O,s),f=[{className:"mtk7",text:"."},{className:"mtk9",text:"abc"},{className:"mtk7",text:".."},{className:"mtk9",text:"def"},{className:"mtk7",text:"..."},{className:"mtk9",text:"gh"}],d=[{className:"mtk7",text:"."},{className:"mtk9",text:"abc"},{className:"mtk7",text:".."},{className:"mtk9",text:"def"},{className:"mtk7",text:"..."},{className:"mtk9",text:"gh"}],r=l(f),T=l(d),S=`<div class="monaco-tokenized-source">${r}<br/>${T}</div>`;n.strictEqual(t,S)}),test("tokenizeLineToHTML",()=>{const e="Ciao hello world!",s=new k([new p(4,(3<<o.FOREGROUND_OFFSET|(m.Bold|m.Italic)<<o.FONT_STYLE_OFFSET)>>>0),new p(5,1<<o.FOREGROUND_OFFSET>>>0),new p(10,4<<o.FOREGROUND_OFFSET>>>0),new p(11,1<<o.FOREGROUND_OFFSET>>>0),new p(17,(5<<o.FOREGROUND_OFFSET|m.Underline<<o.FONT_STYLE_OFFSET)>>>0)]),t=[null,"#000000","#ffffff","#ff0000","#00ff00","#0000ff"];n.strictEqual(c(e,s,t,0,17,4,!0),["<div>",'<span style="color: #ff0000;font-style: italic;font-weight: bold;">Ciao</span>','<span style="color: #000000;"> </span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>','<span style="color: #0000ff;text-decoration: underline;">world!</span>',"</div>"].join("")),n.strictEqual(c(e,s,t,0,12,4,!0),["<div>",'<span style="color: #ff0000;font-style: italic;font-weight: bold;">Ciao</span>','<span style="color: #000000;"> </span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>','<span style="color: #0000ff;text-decoration: underline;">w</span>',"</div>"].join("")),n.strictEqual(c(e,s,t,0,11,4,!0),["<div>",'<span style="color: #ff0000;font-style: italic;font-weight: bold;">Ciao</span>','<span style="color: #000000;"> </span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>',"</div>"].join("")),n.strictEqual(c(e,s,t,1,11,4,!0),["<div>",'<span style="color: #ff0000;font-style: italic;font-weight: bold;">iao</span>','<span style="color: #000000;"> </span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>',"</div>"].join("")),n.strictEqual(c(e,s,t,4,11,4,!0),["<div>",'<span style="color: #000000;">&#160;</span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>',"</div>"].join("")),n.strictEqual(c(e,s,t,5,11,4,!0),["<div>",'<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>',"</div>"].join("")),n.strictEqual(c(e,s,t,5,10,4,!0),["<div>",'<span style="color: #00ff00;">hello</span>',"</div>"].join("")),n.strictEqual(c(e,s,t,6,9,4,!0),["<div>",'<span style="color: #00ff00;">ell</span>',"</div>"].join(""))}),test("tokenizeLineToHTML handle spaces #35954",()=>{const e="  Ciao   hello world!",s=new k([new p(2,1<<o.FOREGROUND_OFFSET>>>0),new p(6,(3<<o.FOREGROUND_OFFSET|(m.Bold|m.Italic)<<o.FONT_STYLE_OFFSET)>>>0),new p(9,1<<o.FOREGROUND_OFFSET>>>0),new p(14,4<<o.FOREGROUND_OFFSET>>>0),new p(15,1<<o.FOREGROUND_OFFSET>>>0),new p(21,(5<<o.FOREGROUND_OFFSET|m.Underline<<o.FONT_STYLE_OFFSET)>>>0)]),t=[null,"#000000","#ffffff","#ff0000","#00ff00","#0000ff"];n.strictEqual(c(e,s,t,0,21,4,!0),["<div>",'<span style="color: #000000;">&#160; </span>','<span style="color: #ff0000;font-style: italic;font-weight: bold;">Ciao</span>','<span style="color: #000000;"> &#160; </span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>','<span style="color: #0000ff;text-decoration: underline;">world!</span>',"</div>"].join("")),n.strictEqual(c(e,s,t,0,17,4,!0),["<div>",'<span style="color: #000000;">&#160; </span>','<span style="color: #ff0000;font-style: italic;font-weight: bold;">Ciao</span>','<span style="color: #000000;"> &#160; </span>','<span style="color: #00ff00;">hello</span>','<span style="color: #000000;"> </span>','<span style="color: #0000ff;text-decoration: underline;">wo</span>',"</div>"].join("")),n.strictEqual(c(e,s,t,0,3,4,!0),["<div>",'<span style="color: #000000;">&#160; </span>','<span style="color: #ff0000;font-style: italic;font-weight: bold;">C</span>',"</div>"].join(""))})});let u=class extends h{languageId="textToHtmlTokenizerMode";constructor(a){super(),this._register(a.registerLanguage({id:this.languageId})),this._register(y.register(this.languageId,{getInitialState:()=>null,tokenize:void 0,tokenizeEncoded:(l,e,s)=>{const t=[];let f=-1;for(let r=0;r<l.length;r++){const T=l.charAt(r)==="."?7:9;f!==T&&(t.push(r),t.push(T<<o.FOREGROUND_OFFSET>>>0)),f=T}const d=new Uint32Array(t.length);for(let r=0;r<d.length;r++)d[r]=t[r];return new R(d,null)}}))}};u=E([F(0,I)],u);
