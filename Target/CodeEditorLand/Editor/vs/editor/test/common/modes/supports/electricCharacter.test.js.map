{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/modes/supports/electricCharacter.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { StandardTokenType } from '../../../../common/encodedTokenAttributes.js';\nimport { BracketElectricCharacterSupport, IElectricAction } from '../../../../common/languages/supports/electricCharacter.js';\nimport { RichEditBrackets } from '../../../../common/languages/supports/richEditBrackets.js';\nimport { TokenText, createFakeScopedLineTokens } from '../../modesTestUtils.js';\n\nconst fakeLanguageId = 'test';\n\nsuite('Editor Modes - Auto Indentation', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction _testOnElectricCharacter(electricCharacterSupport: BracketElectricCharacterSupport, line: TokenText[], character: string, offset: number): IElectricAction | null {\n\t\treturn electricCharacterSupport.onElectricCharacter(character, createFakeScopedLineTokens(line), offset);\n\t}\n\n\tfunction testDoesNothing(electricCharacterSupport: BracketElectricCharacterSupport, line: TokenText[], character: string, offset: number): void {\n\t\tconst actual = _testOnElectricCharacter(electricCharacterSupport, line, character, offset);\n\t\tassert.deepStrictEqual(actual, null);\n\t}\n\n\tfunction testMatchBracket(electricCharacterSupport: BracketElectricCharacterSupport, line: TokenText[], character: string, offset: number, matchOpenBracket: string): void {\n\t\tconst actual = _testOnElectricCharacter(electricCharacterSupport, line, character, offset);\n\t\tassert.deepStrictEqual(actual, { matchOpenBracket: matchOpenBracket });\n\t}\n\n\ttest('getElectricCharacters uses all sources and dedups', () => {\n\t\tconst sup = new BracketElectricCharacterSupport(\n\t\t\tnew RichEditBrackets(fakeLanguageId, [\n\t\t\t\t['{', '}'],\n\t\t\t\t['(', ')']\n\t\t\t])\n\t\t);\n\n\t\tassert.deepStrictEqual(sup.getElectricCharacters(), ['}', ')']);\n\t});\n\n\ttest('matchOpenBracket', () => {\n\t\tconst sup = new BracketElectricCharacterSupport(\n\t\t\tnew RichEditBrackets(fakeLanguageId, [\n\t\t\t\t['{', '}'],\n\t\t\t\t['(', ')']\n\t\t\t])\n\t\t);\n\n\t\ttestDoesNothing(sup, [{ text: '\\t{', type: StandardTokenType.Other }], '\\t', 1);\n\t\ttestDoesNothing(sup, [{ text: '\\t{', type: StandardTokenType.Other }], '\\t', 2);\n\t\ttestDoesNothing(sup, [{ text: '\\t\\t', type: StandardTokenType.Other }], '{', 3);\n\n\t\ttestDoesNothing(sup, [{ text: '\\t}', type: StandardTokenType.Other }], '\\t', 1);\n\t\ttestDoesNothing(sup, [{ text: '\\t}', type: StandardTokenType.Other }], '\\t', 2);\n\t\ttestMatchBracket(sup, [{ text: '\\t\\t', type: StandardTokenType.Other }], '}', 3, '}');\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,yBAAyB;AAClC,SAAS,iCAAiC,uBAAuB;AACjE,SAAS,wBAAwB;AACjC,SAAS,WAAW,kCAAkC;AAEtD,MAAM,iBAAiB;AAEvB,MAAM,mCAAmC,MAAM;AAE9C,0CAAwC;AAExC,WAAS,yBAAyB,0BAA2D,MAAmB,WAAmB,QAAwC;AAC1K,WAAO,yBAAyB,oBAAoB,WAAW,2BAA2B,IAAI,GAAG,MAAM;AAAA,EACxG;AAFS;AAIT,WAAS,gBAAgB,0BAA2D,MAAmB,WAAmB,QAAsB;AAC/I,UAAM,SAAS,yBAAyB,0BAA0B,MAAM,WAAW,MAAM;AACzF,WAAO,gBAAgB,QAAQ,IAAI;AAAA,EACpC;AAHS;AAKT,WAAS,iBAAiB,0BAA2D,MAAmB,WAAmB,QAAgB,kBAAgC;AAC1K,UAAM,SAAS,yBAAyB,0BAA0B,MAAM,WAAW,MAAM;AACzF,WAAO,gBAAgB,QAAQ,EAAE,iBAAmC,CAAC;AAAA,EACtE;AAHS;AAKT,OAAK,qDAAqD,MAAM;AAC/D,UAAM,MAAM,IAAI;AAAA,MACf,IAAI,iBAAiB,gBAAgB;AAAA,QACpC,CAAC,KAAK,GAAG;AAAA,QACT,CAAC,KAAK,GAAG;AAAA,MACV,CAAC;AAAA,IACF;AAEA,WAAO,gBAAgB,IAAI,sBAAsB,GAAG,CAAC,KAAK,GAAG,CAAC;AAAA,EAC/D,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,UAAM,MAAM,IAAI;AAAA,MACf,IAAI,iBAAiB,gBAAgB;AAAA,QACpC,CAAC,KAAK,GAAG;AAAA,QACT,CAAC,KAAK,GAAG;AAAA,MACV,CAAC;AAAA,IACF;AAEA,oBAAgB,KAAK,CAAC,EAAE,MAAM,MAAO,MAAM,kBAAkB,MAAM,CAAC,GAAG,KAAM,CAAC;AAC9E,oBAAgB,KAAK,CAAC,EAAE,MAAM,MAAO,MAAM,kBAAkB,MAAM,CAAC,GAAG,KAAM,CAAC;AAC9E,oBAAgB,KAAK,CAAC,EAAE,MAAM,MAAQ,MAAM,kBAAkB,MAAM,CAAC,GAAG,KAAK,CAAC;AAE9E,oBAAgB,KAAK,CAAC,EAAE,MAAM,MAAO,MAAM,kBAAkB,MAAM,CAAC,GAAG,KAAM,CAAC;AAC9E,oBAAgB,KAAK,CAAC,EAAE,MAAM,MAAO,MAAM,kBAAkB,MAAM,CAAC,GAAG,KAAM,CAAC;AAC9E,qBAAiB,KAAK,CAAC,EAAE,MAAM,MAAQ,MAAM,kBAAkB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG;AAAA,EACrF,CAAC;AACF,CAAC;",
  "names": []
}
