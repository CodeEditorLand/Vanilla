{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/modes/textToHtmlTokenizer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ColorId, FontStyle, MetadataConsts } from '../../../common/encodedTokenAttributes.js';\nimport { EncodedTokenizationResult, IState, TokenizationRegistry } from '../../../common/languages.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { _tokenizeToString, tokenizeLineToHTML } from '../../../common/languages/textToHtmlTokenizer.js';\nimport { LanguageIdCodec } from '../../../common/services/languagesRegistry.js';\nimport { TestLineToken, TestLineTokens } from '../core/testLineToken.js';\nimport { createModelServices } from '../testTextModel.js';\nimport { TestInstantiationService } from '../../../../platform/instantiation/test/common/instantiationServiceMock.js';\n\nsuite('Editor Modes - textToHtmlTokenizer', () => {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = createModelServices(disposables);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction toStr(pieces: { className: string; text: string }[]): string {\n\t\tconst resultArr = pieces.map((t) => `<span class=\"${t.className}\">${t.text}</span>`);\n\t\treturn resultArr.join('');\n\t}\n\n\ttest('TextToHtmlTokenizer 1', () => {\n\t\tconst mode = disposables.add(instantiationService.createInstance(Mode));\n\t\tconst support = TokenizationRegistry.get(mode.languageId)!;\n\n\t\tconst actual = _tokenizeToString('.abc..def...gh', new LanguageIdCodec(), support);\n\t\tconst expected = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tconst expectedStr = `<div class=\"monaco-tokenized-source\">${toStr(expected)}</div>`;\n\n\t\tassert.strictEqual(actual, expectedStr);\n\t});\n\n\ttest('TextToHtmlTokenizer 2', () => {\n\t\tconst mode = disposables.add(instantiationService.createInstance(Mode));\n\t\tconst support = TokenizationRegistry.get(mode.languageId)!;\n\n\t\tconst actual = _tokenizeToString('.abc..def...gh\\n.abc..def...gh', new LanguageIdCodec(), support);\n\t\tconst expected1 = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tconst expected2 = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tconst expectedStr1 = toStr(expected1);\n\t\tconst expectedStr2 = toStr(expected2);\n\t\tconst expectedStr = `<div class=\"monaco-tokenized-source\">${expectedStr1}<br/>${expectedStr2}</div>`;\n\n\t\tassert.strictEqual(actual, expectedStr);\n\t});\n\n\ttest('tokenizeLineToHTML', () => {\n\t\tconst text = 'Ciao hello world!';\n\t\tconst lineTokens = new TestLineTokens([\n\t\t\tnew TestLineToken(\n\t\t\t\t4,\n\t\t\t\t(\n\t\t\t\t\t(3 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Bold | FontStyle.Italic) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t5,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t10,\n\t\t\t\t(\n\t\t\t\t\t(4 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t11,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t17,\n\t\t\t\t(\n\t\t\t\t\t(5 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Underline) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t)\n\t\t]);\n\t\tconst colorMap = [null!, '#000000', '#ffffff', '#ff0000', '#00ff00', '#0000ff'];\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 17, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">world!</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 12, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">w</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 1, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">iao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 4, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 5, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 5, 10, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 6, 9, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">ell</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\t});\n\ttest('tokenizeLineToHTML handle spaces #35954', () => {\n\t\tconst text = '  Ciao   hello world!';\n\t\tconst lineTokens = new TestLineTokens([\n\t\t\tnew TestLineToken(\n\t\t\t\t2,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t6,\n\t\t\t\t(\n\t\t\t\t\t(3 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Bold | FontStyle.Italic) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t9,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t14,\n\t\t\t\t(\n\t\t\t\t\t(4 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t15,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t21,\n\t\t\t\t(\n\t\t\t\t\t(5 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Underline) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t)\n\t\t]);\n\t\tconst colorMap = [null!, '#000000', '#ffffff', '#ff0000', '#00ff00', '#0000ff'];\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 21, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160; </span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> &#160; </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">world!</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 17, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160; </span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> &#160; </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">wo</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 3, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160; </span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">C</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\t});\n\n});\n\nclass Mode extends Disposable {\n\n\tpublic readonly languageId = 'textToHtmlTokenizerMode';\n\n\tconstructor(\n\t\t@ILanguageService languageService: ILanguageService\n\t) {\n\t\tsuper();\n\t\tthis._register(languageService.registerLanguage({ id: this.languageId }));\n\t\tthis._register(TokenizationRegistry.register(this.languageId, {\n\t\t\tgetInitialState: (): IState => null!,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult => {\n\t\t\t\tconst tokensArr: number[] = [];\n\t\t\t\tlet prevColor = -1 as ColorId;\n\t\t\t\tfor (let i = 0; i < line.length; i++) {\n\t\t\t\t\tconst colorId = (line.charAt(i) === '.' ? 7 : 9) as ColorId;\n\t\t\t\t\tif (prevColor !== colorId) {\n\t\t\t\t\t\ttokensArr.push(i);\n\t\t\t\t\t\ttokensArr.push((\n\t\t\t\t\t\t\tcolorId << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t\t\t\t) >>> 0);\n\t\t\t\t\t}\n\t\t\t\t\tprevColor = colorId;\n\t\t\t\t}\n\n\t\t\t\tconst tokens = new Uint32Array(tokensArr.length);\n\t\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\t\ttokens[i] = tokensArr[i];\n\t\t\t\t}\n\t\t\t\treturn new EncodedTokenizationResult(tokens, null!);\n\t\t\t}\n\t\t}));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
