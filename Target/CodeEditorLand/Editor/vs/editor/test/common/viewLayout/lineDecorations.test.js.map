{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/viewLayout/lineDecorations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Range } from '../../../common/core/range.js';\nimport { DecorationSegment, LineDecoration, LineDecorationsNormalizer } from '../../../common/viewLayout/lineDecorations.js';\nimport { InlineDecoration, InlineDecorationType } from '../../../common/viewModel.js';\n\nsuite('Editor ViewLayout - ViewLineParts', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Bug 9827:Overlapping inline decorations can cause wrong inline class to be applied', () => {\n\n\t\tconst result = LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 11, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular)\n\t\t]);\n\n\t\tassert.deepStrictEqual(result, [\n\t\t\tnew DecorationSegment(0, 1, 'c1', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c2 c1', 0),\n\t\t\tnew DecorationSegment(3, 9, 'c1', 0),\n\t\t]);\n\t});\n\n\ttest('issue #3462: no whitespace shown at the end of a decorated line', () => {\n\n\t\tconst result = LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(15, 21, 'mtkw', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(20, 21, 'inline-folded', InlineDecorationType.Regular),\n\t\t]);\n\n\t\tassert.deepStrictEqual(result, [\n\t\t\tnew DecorationSegment(14, 18, 'mtkw', 0),\n\t\t\tnew DecorationSegment(19, 19, 'mtkw inline-folded', 0)\n\t\t]);\n\t});\n\n\ttest('issue #3661: Link decoration bleeds to next line when wrapping', () => {\n\n\t\tconst result = LineDecoration.filter([\n\t\t\tnew InlineDecoration(new Range(2, 12, 3, 30), 'detected-link', InlineDecorationType.Regular)\n\t\t], 3, 12, 500);\n\n\t\tassert.deepStrictEqual(result, [\n\t\t\tnew LineDecoration(12, 30, 'detected-link', InlineDecorationType.Regular),\n\t\t]);\n\t});\n\n\ttest('issue #37401: Allow both before and after decorations on empty line', () => {\n\t\tconst result = LineDecoration.filter([\n\t\t\tnew InlineDecoration(new Range(4, 1, 4, 2), 'before', InlineDecorationType.Before),\n\t\t\tnew InlineDecoration(new Range(4, 0, 4, 1), 'after', InlineDecorationType.After),\n\t\t], 4, 1, 500);\n\n\t\tassert.deepStrictEqual(result, [\n\t\t\tnew LineDecoration(1, 2, 'before', InlineDecorationType.Before),\n\t\t\tnew LineDecoration(0, 1, 'after', InlineDecorationType.After),\n\t\t]);\n\t});\n\n\ttest('ViewLineParts', () => {\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 2, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 0, 'c1', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c2', 0)\n\t\t]);\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 3, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 1, 'c1', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c2', 0)\n\t\t]);\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 4, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 1, 'c1', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c1 c2', 0)\n\t\t]);\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 4, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1*', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 1, 'c1 c1*', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c1 c1* c2', 0)\n\t\t]);\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 4, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1*', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1**', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 1, 'c1 c1* c1**', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c1 c1* c1** c2', 0)\n\t\t]);\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 4, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1*', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1**', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2*', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 1, 'c1 c1* c1**', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c1 c1* c1** c2 c2*', 0)\n\t\t]);\n\n\t\tassert.deepStrictEqual(LineDecorationsNormalizer.normalize('abcabcabcabcabcabcabcabcabcabc', [\n\t\t\tnew LineDecoration(1, 4, 'c1', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1*', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(1, 4, 'c1**', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 4, 'c2', InlineDecorationType.Regular),\n\t\t\tnew LineDecoration(3, 5, 'c2*', InlineDecorationType.Regular)\n\t\t]), [\n\t\t\tnew DecorationSegment(0, 1, 'c1 c1* c1**', 0),\n\t\t\tnew DecorationSegment(2, 2, 'c1 c1* c1** c2 c2*', 0),\n\t\t\tnew DecorationSegment(3, 3, 'c2*', 0)\n\t\t]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
