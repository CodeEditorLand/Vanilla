{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/core/lineRange.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\n\nsuite('LineRange', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('contains', () => {\n\t\tconst r = new LineRange(2, 3);\n\t\tassert.deepStrictEqual(r.contains(1), false);\n\t\tassert.deepStrictEqual(r.contains(2), true);\n\t\tassert.deepStrictEqual(r.contains(3), false);\n\t\tassert.deepStrictEqual(r.contains(4), false);\n\t});\n});\n\nsuite('LineRangeSet', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('addRange', () => {\n\t\tconst set = new LineRangeSet();\n\t\tset.addRange(new LineRange(2, 3));\n\t\tset.addRange(new LineRange(3, 4));\n\t\tset.addRange(new LineRange(10, 20));\n\t\tassert.deepStrictEqual(set.toString(), '[2,4), [10,20)');\n\n\t\tset.addRange(new LineRange(3, 21));\n\t\tassert.deepStrictEqual(set.toString(), '[2,21)');\n\t});\n\n\ttest('getUnion', () => {\n\t\tconst set1 = new LineRangeSet([\n\t\t\tnew LineRange(2, 3),\n\t\t\tnew LineRange(5, 7),\n\t\t\tnew LineRange(10, 20)\n\t\t]);\n\t\tconst set2 = new LineRangeSet([\n\t\t\tnew LineRange(3, 4),\n\t\t\tnew LineRange(6, 8),\n\t\t\tnew LineRange(9, 11)\n\t\t]);\n\n\t\tconst union = set1.getUnion(set2);\n\t\tassert.deepStrictEqual(union.toString(), '[2,4), [5,8), [9,20)');\n\t});\n\n\ttest('intersects', () => {\n\t\tconst set1 = new LineRangeSet([\n\t\t\tnew LineRange(2, 3),\n\t\t\tnew LineRange(5, 7),\n\t\t\tnew LineRange(10, 20)\n\t\t]);\n\n\t\tassert.deepStrictEqual(set1.intersects(new LineRange(1, 2)), false);\n\t\tassert.deepStrictEqual(set1.intersects(new LineRange(1, 3)), true);\n\t\tassert.deepStrictEqual(set1.intersects(new LineRange(3, 5)), false);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,WAAW,oBAAoB;AAExC,MAAM,aAAa,MAAM;AAExB,0CAAwC;AAExC,OAAK,YAAY,MAAM;AACtB,UAAM,IAAI,IAAI,UAAU,GAAG,CAAC;AAC5B,WAAO,gBAAgB,EAAE,SAAS,CAAC,GAAG,KAAK;AAC3C,WAAO,gBAAgB,EAAE,SAAS,CAAC,GAAG,IAAI;AAC1C,WAAO,gBAAgB,EAAE,SAAS,CAAC,GAAG,KAAK;AAC3C,WAAO,gBAAgB,EAAE,SAAS,CAAC,GAAG,KAAK;AAAA,EAC5C,CAAC;AACF,CAAC;AAED,MAAM,gBAAgB,MAAM;AAE3B,0CAAwC;AAExC,OAAK,YAAY,MAAM;AACtB,UAAM,MAAM,IAAI,aAAa;AAC7B,QAAI,SAAS,IAAI,UAAU,GAAG,CAAC,CAAC;AAChC,QAAI,SAAS,IAAI,UAAU,GAAG,CAAC,CAAC;AAChC,QAAI,SAAS,IAAI,UAAU,IAAI,EAAE,CAAC;AAClC,WAAO,gBAAgB,IAAI,SAAS,GAAG,gBAAgB;AAEvD,QAAI,SAAS,IAAI,UAAU,GAAG,EAAE,CAAC;AACjC,WAAO,gBAAgB,IAAI,SAAS,GAAG,QAAQ;AAAA,EAChD,CAAC;AAED,OAAK,YAAY,MAAM;AACtB,UAAM,OAAO,IAAI,aAAa;AAAA,MAC7B,IAAI,UAAU,GAAG,CAAC;AAAA,MAClB,IAAI,UAAU,GAAG,CAAC;AAAA,MAClB,IAAI,UAAU,IAAI,EAAE;AAAA,IACrB,CAAC;AACD,UAAM,OAAO,IAAI,aAAa;AAAA,MAC7B,IAAI,UAAU,GAAG,CAAC;AAAA,MAClB,IAAI,UAAU,GAAG,CAAC;AAAA,MAClB,IAAI,UAAU,GAAG,EAAE;AAAA,IACpB,CAAC;AAED,UAAM,QAAQ,KAAK,SAAS,IAAI;AAChC,WAAO,gBAAgB,MAAM,SAAS,GAAG,sBAAsB;AAAA,EAChE,CAAC;AAED,OAAK,cAAc,MAAM;AACxB,UAAM,OAAO,IAAI,aAAa;AAAA,MAC7B,IAAI,UAAU,GAAG,CAAC;AAAA,MAClB,IAAI,UAAU,GAAG,CAAC;AAAA,MAClB,IAAI,UAAU,IAAI,EAAE;AAAA,IACrB,CAAC;AAED,WAAO,gBAAgB,KAAK,WAAW,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,KAAK;AAClE,WAAO,gBAAgB,KAAK,WAAW,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI;AACjE,WAAO,gBAAgB,KAAK,WAAW,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,KAAK;AAAA,EACnE,CAAC;AACF,CAAC;",
  "names": []
}
