{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/core/testLineToken.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewLineTokens } from '../../../common/tokens/lineTokens.js';\nimport { ColorId, TokenMetadata, ITokenPresentation, StandardTokenType } from '../../../common/encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../../../common/languages.js';\n\n/**\n * A token on a line.\n */\nexport class TestLineToken {\n\n\t/**\n\t * last char index of this token (not inclusive).\n\t */\n\tpublic readonly endIndex: number;\n\tprivate readonly _metadata: number;\n\n\tconstructor(endIndex: number, metadata: number) {\n\t\tthis.endIndex = endIndex;\n\t\tthis._metadata = metadata;\n\t}\n\n\tpublic getStandardTokenType(): StandardTokenType {\n\t\treturn TokenMetadata.getTokenType(this._metadata);\n\t}\n\n\tpublic getForeground(): ColorId {\n\t\treturn TokenMetadata.getForeground(this._metadata);\n\t}\n\n\tpublic getType(): string {\n\t\treturn TokenMetadata.getClassNameFromMetadata(this._metadata);\n\t}\n\n\tpublic getInlineStyle(colorMap: string[]): string {\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(this._metadata, colorMap);\n\t}\n\n\tpublic getPresentation(): ITokenPresentation {\n\t\treturn TokenMetadata.getPresentationFromMetadata(this._metadata);\n\t}\n\n\tprivate static _equals(a: TestLineToken, b: TestLineToken): boolean {\n\t\treturn (\n\t\t\ta.endIndex === b.endIndex\n\t\t\t&& a._metadata === b._metadata\n\t\t);\n\t}\n\n\tpublic static equalsArr(a: TestLineToken[], b: TestLineToken[]): boolean {\n\t\tconst aLen = a.length;\n\t\tconst bLen = b.length;\n\t\tif (aLen !== bLen) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < aLen; i++) {\n\t\t\tif (!this._equals(a[i], b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class TestLineTokens implements IViewLineTokens {\n\n\tprivate readonly _actual: TestLineToken[];\n\n\tconstructor(actual: TestLineToken[]) {\n\t\tthis._actual = actual;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof TestLineTokens) {\n\t\t\treturn TestLineToken.equalsArr(this._actual, other._actual);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._actual.length;\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\treturn this._actual[tokenIndex].getStandardTokenType();\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._actual[tokenIndex].getForeground();\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._actual[tokenIndex].endIndex;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._actual[tokenIndex].getType();\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._actual[tokenIndex].getInlineStyle(colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\treturn this._actual[tokenIndex].getPresentation();\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tpublic getLineContent(): string {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic getTokenText(tokenIndex: number): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic forEach(callback: (tokenIndex: number) => void): void {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tpublic get languageIdCodec(): ILanguageIdCodec {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport class TestLineTokenFactory {\n\n\tpublic static inflateArr(tokens: Uint32Array): TestLineToken[] {\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\tconst result: TestLineToken[] = new Array<TestLineToken>(tokensCount);\n\t\tfor (let i = 0; i < tokensCount; i++) {\n\t\t\tconst endOffset = tokens[i << 1];\n\t\t\tconst metadata = tokens[(i << 1) + 1];\n\n\t\t\tresult[i] = new TestLineToken(endOffset, metadata);\n\t\t}\n\n\t\treturn result;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
