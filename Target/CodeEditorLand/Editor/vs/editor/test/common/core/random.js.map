{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/core/random.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { numberComparator } from '../../../../base/common/arrays.js';\nimport { OffsetRange } from '../../../common/core/offsetRange.js';\nimport { Position } from '../../../common/core/position.js';\nimport { PositionOffsetTransformer } from '../../../common/core/positionToOffset.js';\nimport { Range } from '../../../common/core/range.js';\nimport { AbstractText, SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\n\nexport abstract class Random {\n\tpublic static basicAlphabet: string = '      abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\tpublic static basicAlphabetMultiline: string = '      \\n\\n\\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n\tpublic static create(seed: number): Random {\n\t\treturn new MersenneTwister(seed);\n\t}\n\n\tpublic abstract nextIntRange(start: number, endExclusive: number): number;\n\n\tpublic nextString(length: number, alphabet = Random.basicAlphabet): string {\n\t\tlet randomText: string = '';\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst characterIndex = this.nextIntRange(0, alphabet.length);\n\t\t\trandomText += alphabet.charAt(characterIndex);\n\t\t}\n\t\treturn randomText;\n\t}\n\n\tpublic nextMultiLineString(lineCount: number, lineLengthRange: OffsetRange, alphabet = Random.basicAlphabet): string {\n\t\tconst lines: string[] = [];\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineLength = this.nextIntRange(lineLengthRange.start, lineLengthRange.endExclusive);\n\t\t\tlines.push(this.nextString(lineLength, alphabet));\n\t\t}\n\t\treturn lines.join('\\n');\n\t}\n\n\tpublic nextConsecutivePositions(source: AbstractText, count: number): Position[] {\n\t\tconst t = new PositionOffsetTransformer(source.getValue());\n\t\tconst offsets = OffsetRange.ofLength(count).map(() => this.nextIntRange(0, t.text.length));\n\t\toffsets.sort(numberComparator);\n\t\treturn offsets.map(offset => t.getPosition(offset));\n\t}\n\n\tpublic nextRange(source: AbstractText): Range {\n\t\tconst [start, end] = this.nextConsecutivePositions(source, 2);\n\t\treturn Range.fromPositions(start, end);\n\t}\n\n\tpublic nextTextEdit(target: AbstractText, singleTextEditCount: number): TextEdit {\n\t\tconst singleTextEdits: SingleTextEdit[] = [];\n\n\t\tconst positions = this.nextConsecutivePositions(target, singleTextEditCount * 2);\n\n\t\tfor (let i = 0; i < singleTextEditCount; i++) {\n\t\t\tconst start = positions[i * 2];\n\t\t\tconst end = positions[i * 2 + 1];\n\t\t\tconst newText = this.nextString(end.column - start.column, Random.basicAlphabetMultiline);\n\t\t\tsingleTextEdits.push(new SingleTextEdit(Range.fromPositions(start, end), newText));\n\t\t}\n\n\t\treturn new TextEdit(singleTextEdits).normalize();\n\t}\n}\n\nclass MersenneTwister extends Random {\n\tprivate readonly mt = new Array(624);\n\tprivate index = 0;\n\n\tconstructor(seed: number) {\n\t\tsuper();\n\n\t\tthis.mt[0] = seed >>> 0;\n\t\tfor (let i = 1; i < 624; i++) {\n\t\t\tconst s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n\t\t\tthis.mt[i] = (((((s & 0xffff0000) >>> 16) * 0x6c078965) << 16) + (s & 0x0000ffff) * 0x6c078965 + i) >>> 0;\n\t\t}\n\t}\n\n\tprivate _nextInt() {\n\t\tif (this.index === 0) {\n\t\t\tthis.generateNumbers();\n\t\t}\n\n\t\tlet y = this.mt[this.index];\n\t\ty = y ^ (y >>> 11);\n\t\ty = y ^ ((y << 7) & 0x9d2c5680);\n\t\ty = y ^ ((y << 15) & 0xefc60000);\n\t\ty = y ^ (y >>> 18);\n\n\t\tthis.index = (this.index + 1) % 624;\n\n\t\treturn y >>> 0;\n\t}\n\n\tpublic nextIntRange(start: number, endExclusive: number) {\n\t\tconst range = endExclusive - start;\n\t\treturn Math.floor(this._nextInt() / (0x100000000 / range)) + start;\n\t}\n\n\tprivate generateNumbers() {\n\t\tfor (let i = 0; i < 624; i++) {\n\t\t\tconst y = (this.mt[i] & 0x80000000) + (this.mt[(i + 1) % 624] & 0x7fffffff);\n\t\t\tthis.mt[i] = this.mt[(i + 397) % 624] ^ (y >>> 1);\n\t\t\tif ((y % 2) !== 0) {\n\t\t\t\tthis.mt[i] = this.mt[i] ^ 0x9908b0df;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
