{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/core/stringBuilder.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { writeUInt16LE } from '../../../../base/common/buffer.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { decodeUTF16LE, StringBuilder } from '../../../common/core/stringBuilder.js';\n\nsuite('decodeUTF16LE', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #118041: unicode character undo bug 1', () => {\n\t\tconst buff = new Uint8Array(2);\n\t\twriteUInt16LE(buff, '\uFEFF'.charCodeAt(0), 0);\n\t\tconst actual = decodeUTF16LE(buff, 0, 1);\n\t\tassert.deepStrictEqual(actual, '\uFEFF');\n\t});\n\n\ttest('issue #118041: unicode character undo bug 2', () => {\n\t\tconst buff = new Uint8Array(4);\n\t\twriteUInt16LE(buff, 'a\uFEFF'.charCodeAt(0), 0);\n\t\twriteUInt16LE(buff, 'a\uFEFF'.charCodeAt(1), 2);\n\t\tconst actual = decodeUTF16LE(buff, 0, 2);\n\t\tassert.deepStrictEqual(actual, 'a\uFEFF');\n\t});\n\n\ttest('issue #118041: unicode character undo bug 3', () => {\n\t\tconst buff = new Uint8Array(6);\n\t\twriteUInt16LE(buff, 'a\uFEFFb'.charCodeAt(0), 0);\n\t\twriteUInt16LE(buff, 'a\uFEFFb'.charCodeAt(1), 2);\n\t\twriteUInt16LE(buff, 'a\uFEFFb'.charCodeAt(2), 4);\n\t\tconst actual = decodeUTF16LE(buff, 0, 3);\n\t\tassert.deepStrictEqual(actual, 'a\uFEFFb');\n\t});\n\n});\n\nsuite('StringBuilder', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('basic', () => {\n\t\tconst sb = new StringBuilder(100);\n\t\tsb.appendASCIICharCode(CharCode.A);\n\t\tsb.appendASCIICharCode(CharCode.Space);\n\t\tsb.appendString('\uD83D\uDE0A');\n\t\tassert.strictEqual(sb.build(), 'A \uD83D\uDE0A');\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AACxD,SAAS,eAAe,qBAAqB;AAE7C,MAAM,iBAAiB,MAAM;AAE5B,0CAAwC;AAExC,OAAK,+CAA+C,MAAM;AACzD,UAAM,OAAO,IAAI,WAAW,CAAC;AAC7B,kBAAc,MAAM,SAAI,WAAW,CAAC,GAAG,CAAC;AACxC,UAAM,SAAS,cAAc,MAAM,GAAG,CAAC;AACvC,WAAO,gBAAgB,QAAQ,QAAG;AAAA,EACnC,CAAC;AAED,OAAK,+CAA+C,MAAM;AACzD,UAAM,OAAO,IAAI,WAAW,CAAC;AAC7B,kBAAc,MAAM,UAAK,WAAW,CAAC,GAAG,CAAC;AACzC,kBAAc,MAAM,UAAK,WAAW,CAAC,GAAG,CAAC;AACzC,UAAM,SAAS,cAAc,MAAM,GAAG,CAAC;AACvC,WAAO,gBAAgB,QAAQ,SAAI;AAAA,EACpC,CAAC;AAED,OAAK,+CAA+C,MAAM;AACzD,UAAM,OAAO,IAAI,WAAW,CAAC;AAC7B,kBAAc,MAAM,WAAM,WAAW,CAAC,GAAG,CAAC;AAC1C,kBAAc,MAAM,WAAM,WAAW,CAAC,GAAG,CAAC;AAC1C,kBAAc,MAAM,WAAM,WAAW,CAAC,GAAG,CAAC;AAC1C,UAAM,SAAS,cAAc,MAAM,GAAG,CAAC;AACvC,WAAO,gBAAgB,QAAQ,UAAK;AAAA,EACrC,CAAC;AAEF,CAAC;AAED,MAAM,iBAAiB,MAAM;AAE5B,0CAAwC;AAExC,OAAK,SAAS,MAAM;AACnB,UAAM,KAAK,IAAI,cAAc,GAAG;AAChC,OAAG,oBAAoB,SAAS,CAAC;AACjC,OAAG,oBAAoB,SAAS,KAAK;AACrC,OAAG,aAAa,WAAI;AACpB,WAAO,YAAY,GAAG,MAAM,GAAG,aAAM;AAAA,EACtC,CAAC;AACF,CAAC;",
  "names": []
}
