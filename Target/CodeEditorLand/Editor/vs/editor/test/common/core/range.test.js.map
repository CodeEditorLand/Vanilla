{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/core/range.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\n\nsuite('Editor Core - Range', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('empty range', () => {\n\t\tconst s = new Range(1, 1, 1, 1);\n\t\tassert.strictEqual(s.startLineNumber, 1);\n\t\tassert.strictEqual(s.startColumn, 1);\n\t\tassert.strictEqual(s.endLineNumber, 1);\n\t\tassert.strictEqual(s.endColumn, 1);\n\t\tassert.strictEqual(s.isEmpty(), true);\n\t});\n\n\ttest('swap start and stop same line', () => {\n\t\tconst s = new Range(1, 2, 1, 1);\n\t\tassert.strictEqual(s.startLineNumber, 1);\n\t\tassert.strictEqual(s.startColumn, 1);\n\t\tassert.strictEqual(s.endLineNumber, 1);\n\t\tassert.strictEqual(s.endColumn, 2);\n\t\tassert.strictEqual(s.isEmpty(), false);\n\t});\n\n\ttest('swap start and stop', () => {\n\t\tconst s = new Range(2, 1, 1, 2);\n\t\tassert.strictEqual(s.startLineNumber, 1);\n\t\tassert.strictEqual(s.startColumn, 2);\n\t\tassert.strictEqual(s.endLineNumber, 2);\n\t\tassert.strictEqual(s.endColumn, 1);\n\t\tassert.strictEqual(s.isEmpty(), false);\n\t});\n\n\ttest('no swap same line', () => {\n\t\tconst s = new Range(1, 1, 1, 2);\n\t\tassert.strictEqual(s.startLineNumber, 1);\n\t\tassert.strictEqual(s.startColumn, 1);\n\t\tassert.strictEqual(s.endLineNumber, 1);\n\t\tassert.strictEqual(s.endColumn, 2);\n\t\tassert.strictEqual(s.isEmpty(), false);\n\t});\n\n\ttest('no swap', () => {\n\t\tconst s = new Range(1, 1, 2, 1);\n\t\tassert.strictEqual(s.startLineNumber, 1);\n\t\tassert.strictEqual(s.startColumn, 1);\n\t\tassert.strictEqual(s.endLineNumber, 2);\n\t\tassert.strictEqual(s.endColumn, 1);\n\t\tassert.strictEqual(s.isEmpty(), false);\n\t});\n\n\ttest('compareRangesUsingEnds', () => {\n\t\tlet a: Range, b: Range;\n\n\t\ta = new Range(1, 1, 1, 3);\n\t\tb = new Range(1, 2, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) < 0, 'a.start < b.start, a.end < b.end');\n\n\t\ta = new Range(1, 1, 1, 3);\n\t\tb = new Range(1, 1, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) < 0, 'a.start = b.start, a.end < b.end');\n\n\t\ta = new Range(1, 2, 1, 3);\n\t\tb = new Range(1, 1, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) < 0, 'a.start > b.start, a.end < b.end');\n\n\t\ta = new Range(1, 1, 1, 4);\n\t\tb = new Range(1, 2, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) < 0, 'a.start < b.start, a.end = b.end');\n\n\t\ta = new Range(1, 1, 1, 4);\n\t\tb = new Range(1, 1, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) === 0, 'a.start = b.start, a.end = b.end');\n\n\t\ta = new Range(1, 2, 1, 4);\n\t\tb = new Range(1, 1, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) > 0, 'a.start > b.start, a.end = b.end');\n\n\t\ta = new Range(1, 1, 1, 5);\n\t\tb = new Range(1, 2, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) > 0, 'a.start < b.start, a.end > b.end');\n\n\t\ta = new Range(1, 1, 2, 4);\n\t\tb = new Range(1, 1, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) > 0, 'a.start = b.start, a.end > b.end');\n\n\t\ta = new Range(1, 2, 5, 1);\n\t\tb = new Range(1, 1, 1, 4);\n\t\tassert.ok(Range.compareRangesUsingEnds(a, b) > 0, 'a.start > b.start, a.end > b.end');\n\t});\n\n\ttest('containsPosition', () => {\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(1, 3)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(2, 1)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(2, 2)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(2, 3)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(3, 1)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(5, 9)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(5, 10)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(5, 11)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsPosition(new Position(6, 1)), false);\n\t});\n\n\ttest('containsRange', () => {\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(1, 3, 2, 2)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(2, 1, 2, 2)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(2, 2, 5, 11)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(2, 2, 6, 1)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(5, 9, 6, 1)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(5, 10, 6, 1)), false);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(2, 2, 5, 10)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(2, 3, 5, 9)), true);\n\t\tassert.strictEqual(new Range(2, 2, 5, 10).containsRange(new Range(3, 100, 4, 100)), true);\n\t});\n\n\ttest('areIntersecting', () => {\n\t\tassert.strictEqual(Range.areIntersecting(new Range(2, 2, 3, 2), new Range(4, 2, 5, 2)), false);\n\t\tassert.strictEqual(Range.areIntersecting(new Range(4, 2, 5, 2), new Range(2, 2, 3, 2)), false);\n\t\tassert.strictEqual(Range.areIntersecting(new Range(4, 2, 5, 2), new Range(5, 2, 6, 2)), false);\n\t\tassert.strictEqual(Range.areIntersecting(new Range(5, 2, 6, 2), new Range(4, 2, 5, 2)), false);\n\t\tassert.strictEqual(Range.areIntersecting(new Range(2, 2, 2, 7), new Range(2, 4, 2, 6)), true);\n\t\tassert.strictEqual(Range.areIntersecting(new Range(2, 2, 2, 7), new Range(2, 4, 2, 9)), true);\n\t\tassert.strictEqual(Range.areIntersecting(new Range(2, 4, 2, 9), new Range(2, 2, 2, 7)), true);\n\t});\n});\n"],
  "mappings": "AAIA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,gBAAgB;AACzB,SAAS,aAAa;AAEtB,MAAM,uBAAuB,MAAM;AAElC,0CAAwC;AAExC,OAAK,eAAe,MAAM;AACzB,UAAM,IAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B,WAAO,YAAY,EAAE,iBAAiB,CAAC;AACvC,WAAO,YAAY,EAAE,aAAa,CAAC;AACnC,WAAO,YAAY,EAAE,eAAe,CAAC;AACrC,WAAO,YAAY,EAAE,WAAW,CAAC;AACjC,WAAO,YAAY,EAAE,QAAQ,GAAG,IAAI;AAAA,EACrC,CAAC;AAED,OAAK,iCAAiC,MAAM;AAC3C,UAAM,IAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B,WAAO,YAAY,EAAE,iBAAiB,CAAC;AACvC,WAAO,YAAY,EAAE,aAAa,CAAC;AACnC,WAAO,YAAY,EAAE,eAAe,CAAC;AACrC,WAAO,YAAY,EAAE,WAAW,CAAC;AACjC,WAAO,YAAY,EAAE,QAAQ,GAAG,KAAK;AAAA,EACtC,CAAC;AAED,OAAK,uBAAuB,MAAM;AACjC,UAAM,IAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B,WAAO,YAAY,EAAE,iBAAiB,CAAC;AACvC,WAAO,YAAY,EAAE,aAAa,CAAC;AACnC,WAAO,YAAY,EAAE,eAAe,CAAC;AACrC,WAAO,YAAY,EAAE,WAAW,CAAC;AACjC,WAAO,YAAY,EAAE,QAAQ,GAAG,KAAK;AAAA,EACtC,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,UAAM,IAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B,WAAO,YAAY,EAAE,iBAAiB,CAAC;AACvC,WAAO,YAAY,EAAE,aAAa,CAAC;AACnC,WAAO,YAAY,EAAE,eAAe,CAAC;AACrC,WAAO,YAAY,EAAE,WAAW,CAAC;AACjC,WAAO,YAAY,EAAE,QAAQ,GAAG,KAAK;AAAA,EACtC,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,UAAM,IAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B,WAAO,YAAY,EAAE,iBAAiB,CAAC;AACvC,WAAO,YAAY,EAAE,aAAa,CAAC;AACnC,WAAO,YAAY,EAAE,eAAe,CAAC;AACrC,WAAO,YAAY,EAAE,WAAW,CAAC;AACjC,WAAO,YAAY,EAAE,QAAQ,GAAG,KAAK;AAAA,EACtC,CAAC;AAED,OAAK,0BAA0B,MAAM;AACpC,QAAI,GAAU;AAEd,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,MAAM,GAAG,kCAAkC;AAEtF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAEpF,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,QAAI,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO,GAAG,MAAM,uBAAuB,GAAG,CAAC,IAAI,GAAG,kCAAkC;AAAA,EACrF,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI;AACpF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI;AACpF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI;AACpF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI;AACpF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,IAAI;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,KAAK;AACtF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,iBAAiB,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK;AAAA,EACtF,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,KAAK;AACtF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK;AACtF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI;AACrF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI;AACpF,WAAO,YAAY,IAAI,MAAM,GAAG,GAAG,GAAG,EAAE,EAAE,cAAc,IAAI,MAAM,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,IAAI;AAAA,EACzF,CAAC;AAED,OAAK,mBAAmB,MAAM;AAC7B,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AAC7F,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AAC7F,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AAC7F,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK;AAC7F,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI;AAC5F,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI;AAC5F,WAAO,YAAY,MAAM,gBAAgB,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI;AAAA,EAC7F,CAAC;AACF,CAAC;",
  "names": []
}
