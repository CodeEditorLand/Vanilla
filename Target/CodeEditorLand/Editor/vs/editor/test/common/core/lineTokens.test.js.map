{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/common/core/lineTokens.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { MetadataConsts } from '../../../common/encodedTokenAttributes.js';\nimport { LanguageIdCodec } from '../../../common/services/languagesRegistry.js';\nimport { IViewLineTokens, LineTokens } from '../../../common/tokens/lineTokens.js';\n\nsuite('LineTokens', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tinterface ILineToken {\n\t\tstartIndex: number;\n\t\tforeground: number;\n\t}\n\n\tfunction createLineTokens(text: string, tokens: ILineToken[]): LineTokens {\n\t\tconst binTokens = new Uint32Array(tokens.length << 1);\n\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tbinTokens[(i << 1)] = (i + 1 < len ? tokens[i + 1].startIndex : text.length);\n\t\t\tbinTokens[(i << 1) + 1] = (\n\t\t\t\ttokens[i].foreground << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t) >>> 0;\n\t\t}\n\n\t\treturn new LineTokens(binTokens, text, new LanguageIdCodec());\n\t}\n\n\tfunction createTestLineTokens(): LineTokens {\n\t\treturn createLineTokens(\n\t\t\t'Hello world, this is a lovely day',\n\t\t\t[\n\t\t\t\t{ startIndex: 0, foreground: 1 }, // Hello_\n\t\t\t\t{ startIndex: 6, foreground: 2 }, // world,_\n\t\t\t\t{ startIndex: 13, foreground: 3 }, // this_\n\t\t\t\t{ startIndex: 18, foreground: 4 }, // is_\n\t\t\t\t{ startIndex: 21, foreground: 5 }, // a_\n\t\t\t\t{ startIndex: 23, foreground: 6 }, // lovely_\n\t\t\t\t{ startIndex: 30, foreground: 7 }, // day\n\t\t\t]\n\t\t);\n\t}\n\n\tfunction renderLineTokens(tokens: LineTokens): string {\n\t\tlet result = '';\n\t\tconst str = tokens.getLineContent();\n\t\tlet lastOffset = 0;\n\t\tfor (let i = 0; i < tokens.getCount(); i++) {\n\t\t\tresult += str.substring(lastOffset, tokens.getEndOffset(i));\n\t\t\tresult += `(${tokens.getMetadata(i)})`;\n\t\t\tlastOffset = tokens.getEndOffset(i);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttest('withInserted 1', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\t\tassert.strictEqual(renderLineTokens(lineTokens), 'Hello (32768)world, (65536)this (98304)is (131072)a (163840)lovely (196608)day(229376)');\n\n\t\tconst lineTokens2 = lineTokens.withInserted([\n\t\t\t{ offset: 0, text: '1', tokenMetadata: 0, },\n\t\t\t{ offset: 6, text: '2', tokenMetadata: 0, },\n\t\t\t{ offset: 9, text: '3', tokenMetadata: 0, },\n\t\t]);\n\n\t\tassert.strictEqual(renderLineTokens(lineTokens2), '1(0)Hello (32768)2(0)wor(65536)3(0)ld, (65536)this (98304)is (131072)a (163840)lovely (196608)day(229376)');\n\t});\n\n\ttest('withInserted (tokens at the same position)', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\t\tassert.strictEqual(renderLineTokens(lineTokens), 'Hello (32768)world, (65536)this (98304)is (131072)a (163840)lovely (196608)day(229376)');\n\n\t\tconst lineTokens2 = lineTokens.withInserted([\n\t\t\t{ offset: 0, text: '1', tokenMetadata: 0, },\n\t\t\t{ offset: 0, text: '2', tokenMetadata: 0, },\n\t\t\t{ offset: 0, text: '3', tokenMetadata: 0, },\n\t\t]);\n\n\t\tassert.strictEqual(renderLineTokens(lineTokens2), '1(0)2(0)3(0)Hello (32768)world, (65536)this (98304)is (131072)a (163840)lovely (196608)day(229376)');\n\t});\n\n\ttest('withInserted (tokens at the end)', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\t\tassert.strictEqual(renderLineTokens(lineTokens), 'Hello (32768)world, (65536)this (98304)is (131072)a (163840)lovely (196608)day(229376)');\n\n\t\tconst lineTokens2 = lineTokens.withInserted([\n\t\t\t{ offset: 'Hello world, this is a lovely day'.length - 1, text: '1', tokenMetadata: 0, },\n\t\t\t{ offset: 'Hello world, this is a lovely day'.length, text: '2', tokenMetadata: 0, },\n\t\t]);\n\n\t\tassert.strictEqual(renderLineTokens(lineTokens2), 'Hello (32768)world, (65536)this (98304)is (131072)a (163840)lovely (196608)da(229376)1(0)y(229376)2(0)');\n\t});\n\n\ttest('basics', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\n\t\tassert.strictEqual(lineTokens.getLineContent(), 'Hello world, this is a lovely day');\n\t\tassert.strictEqual(lineTokens.getLineContent().length, 33);\n\t\tassert.strictEqual(lineTokens.getCount(), 7);\n\n\t\tassert.strictEqual(lineTokens.getStartOffset(0), 0);\n\t\tassert.strictEqual(lineTokens.getEndOffset(0), 6);\n\t\tassert.strictEqual(lineTokens.getStartOffset(1), 6);\n\t\tassert.strictEqual(lineTokens.getEndOffset(1), 13);\n\t\tassert.strictEqual(lineTokens.getStartOffset(2), 13);\n\t\tassert.strictEqual(lineTokens.getEndOffset(2), 18);\n\t\tassert.strictEqual(lineTokens.getStartOffset(3), 18);\n\t\tassert.strictEqual(lineTokens.getEndOffset(3), 21);\n\t\tassert.strictEqual(lineTokens.getStartOffset(4), 21);\n\t\tassert.strictEqual(lineTokens.getEndOffset(4), 23);\n\t\tassert.strictEqual(lineTokens.getStartOffset(5), 23);\n\t\tassert.strictEqual(lineTokens.getEndOffset(5), 30);\n\t\tassert.strictEqual(lineTokens.getStartOffset(6), 30);\n\t\tassert.strictEqual(lineTokens.getEndOffset(6), 33);\n\t});\n\n\ttest('findToken', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(0), 0);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(1), 0);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(2), 0);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(3), 0);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(4), 0);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(5), 0);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(6), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(7), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(8), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(9), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(10), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(11), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(12), 1);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(13), 2);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(14), 2);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(15), 2);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(16), 2);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(17), 2);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(18), 3);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(19), 3);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(20), 3);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(21), 4);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(22), 4);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(23), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(24), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(25), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(26), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(27), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(28), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(29), 5);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(30), 6);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(31), 6);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(32), 6);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(33), 6);\n\t\tassert.strictEqual(lineTokens.findTokenIndexAtOffset(34), 6);\n\t});\n\n\tinterface ITestViewLineToken {\n\t\tendIndex: number;\n\t\tforeground: number;\n\t}\n\n\tfunction assertViewLineTokens(_actual: IViewLineTokens, expected: ITestViewLineToken[]): void {\n\t\tconst actual: ITestViewLineToken[] = [];\n\t\tfor (let i = 0, len = _actual.getCount(); i < len; i++) {\n\t\t\tactual[i] = {\n\t\t\t\tendIndex: _actual.getEndOffset(i),\n\t\t\t\tforeground: _actual.getForeground(i)\n\t\t\t};\n\t\t}\n\t\tassert.deepStrictEqual(actual, expected);\n\t}\n\n\ttest('inflate', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\t\tassertViewLineTokens(lineTokens.inflate(), [\n\t\t\t{ endIndex: 6, foreground: 1 },\n\t\t\t{ endIndex: 13, foreground: 2 },\n\t\t\t{ endIndex: 18, foreground: 3 },\n\t\t\t{ endIndex: 21, foreground: 4 },\n\t\t\t{ endIndex: 23, foreground: 5 },\n\t\t\t{ endIndex: 30, foreground: 6 },\n\t\t\t{ endIndex: 33, foreground: 7 },\n\t\t]);\n\t});\n\n\ttest('sliceAndInflate', () => {\n\t\tconst lineTokens = createTestLineTokens();\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(0, 33, 0), [\n\t\t\t{ endIndex: 6, foreground: 1 },\n\t\t\t{ endIndex: 13, foreground: 2 },\n\t\t\t{ endIndex: 18, foreground: 3 },\n\t\t\t{ endIndex: 21, foreground: 4 },\n\t\t\t{ endIndex: 23, foreground: 5 },\n\t\t\t{ endIndex: 30, foreground: 6 },\n\t\t\t{ endIndex: 33, foreground: 7 },\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(0, 32, 0), [\n\t\t\t{ endIndex: 6, foreground: 1 },\n\t\t\t{ endIndex: 13, foreground: 2 },\n\t\t\t{ endIndex: 18, foreground: 3 },\n\t\t\t{ endIndex: 21, foreground: 4 },\n\t\t\t{ endIndex: 23, foreground: 5 },\n\t\t\t{ endIndex: 30, foreground: 6 },\n\t\t\t{ endIndex: 32, foreground: 7 },\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(0, 30, 0), [\n\t\t\t{ endIndex: 6, foreground: 1 },\n\t\t\t{ endIndex: 13, foreground: 2 },\n\t\t\t{ endIndex: 18, foreground: 3 },\n\t\t\t{ endIndex: 21, foreground: 4 },\n\t\t\t{ endIndex: 23, foreground: 5 },\n\t\t\t{ endIndex: 30, foreground: 6 }\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(0, 30, 1), [\n\t\t\t{ endIndex: 7, foreground: 1 },\n\t\t\t{ endIndex: 14, foreground: 2 },\n\t\t\t{ endIndex: 19, foreground: 3 },\n\t\t\t{ endIndex: 22, foreground: 4 },\n\t\t\t{ endIndex: 24, foreground: 5 },\n\t\t\t{ endIndex: 31, foreground: 6 }\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(6, 18, 0), [\n\t\t\t{ endIndex: 7, foreground: 2 },\n\t\t\t{ endIndex: 12, foreground: 3 }\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(7, 18, 0), [\n\t\t\t{ endIndex: 6, foreground: 2 },\n\t\t\t{ endIndex: 11, foreground: 3 }\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(6, 17, 0), [\n\t\t\t{ endIndex: 7, foreground: 2 },\n\t\t\t{ endIndex: 11, foreground: 3 }\n\t\t]);\n\n\t\tassertViewLineTokens(lineTokens.sliceAndInflate(6, 19, 0), [\n\t\t\t{ endIndex: 7, foreground: 2 },\n\t\t\t{ endIndex: 12, foreground: 3 },\n\t\t\t{ endIndex: 13, foreground: 4 },\n\t\t]);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,kBAAkB;AAE5C,MAAM,cAAc,MAAM;AAEzB,0CAAwC;AAOxC,WAAS,iBAAiB,MAAc,QAAkC;AACzE,UAAM,YAAY,IAAI,YAAY,OAAO,UAAU,CAAC;AAEpD,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAClD,gBAAW,KAAK,CAAE,IAAK,IAAI,IAAI,MAAM,OAAO,IAAI,CAAC,EAAE,aAAa,KAAK;AACrE,iBAAW,KAAK,KAAK,CAAC,IACrB,OAAO,CAAC,EAAE,cAAc,eAAe,sBAClC;AAAA,IACP;AAEA,WAAO,IAAI,WAAW,WAAW,MAAM,IAAI,gBAAgB,CAAC;AAAA,EAC7D;AAXS;AAaT,WAAS,uBAAmC;AAC3C,WAAO;AAAA,MACN;AAAA,MACA;AAAA,QACC,EAAE,YAAY,GAAG,YAAY,EAAE;AAAA;AAAA,QAC/B,EAAE,YAAY,GAAG,YAAY,EAAE;AAAA;AAAA,QAC/B,EAAE,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QAChC,EAAE,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QAChC,EAAE,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QAChC,EAAE,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QAChC,EAAE,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAbS;AAeT,WAAS,iBAAiB,QAA4B;AACrD,QAAI,SAAS;AACb,UAAM,MAAM,OAAO,eAAe;AAClC,QAAI,aAAa;AACjB,aAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,KAAK;AAC3C,gBAAU,IAAI,UAAU,YAAY,OAAO,aAAa,CAAC,CAAC;AAC1D,gBAAU,IAAI,OAAO,YAAY,CAAC,CAAC;AACnC,mBAAa,OAAO,aAAa,CAAC;AAAA,IACnC;AACA,WAAO;AAAA,EACR;AAVS;AAYT,OAAK,kBAAkB,MAAM;AAC5B,UAAM,aAAa,qBAAqB;AACxC,WAAO,YAAY,iBAAiB,UAAU,GAAG,wFAAwF;AAEzI,UAAM,cAAc,WAAW,aAAa;AAAA,MAC3C,EAAE,QAAQ,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,MAC1C,EAAE,QAAQ,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,MAC1C,EAAE,QAAQ,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,IAC3C,CAAC;AAED,WAAO,YAAY,iBAAiB,WAAW,GAAG,2GAA2G;AAAA,EAC9J,CAAC;AAED,OAAK,8CAA8C,MAAM;AACxD,UAAM,aAAa,qBAAqB;AACxC,WAAO,YAAY,iBAAiB,UAAU,GAAG,wFAAwF;AAEzI,UAAM,cAAc,WAAW,aAAa;AAAA,MAC3C,EAAE,QAAQ,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,MAC1C,EAAE,QAAQ,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,MAC1C,EAAE,QAAQ,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,IAC3C,CAAC;AAED,WAAO,YAAY,iBAAiB,WAAW,GAAG,oGAAoG;AAAA,EACvJ,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C,UAAM,aAAa,qBAAqB;AACxC,WAAO,YAAY,iBAAiB,UAAU,GAAG,wFAAwF;AAEzI,UAAM,cAAc,WAAW,aAAa;AAAA,MAC3C,EAAE,QAAQ,oCAAoC,SAAS,GAAG,MAAM,KAAK,eAAe,EAAG;AAAA,MACvF,EAAE,QAAQ,oCAAoC,QAAQ,MAAM,KAAK,eAAe,EAAG;AAAA,IACpF,CAAC;AAED,WAAO,YAAY,iBAAiB,WAAW,GAAG,wGAAwG;AAAA,EAC3J,CAAC;AAED,OAAK,UAAU,MAAM;AACpB,UAAM,aAAa,qBAAqB;AAExC,WAAO,YAAY,WAAW,eAAe,GAAG,mCAAmC;AACnF,WAAO,YAAY,WAAW,eAAe,EAAE,QAAQ,EAAE;AACzD,WAAO,YAAY,WAAW,SAAS,GAAG,CAAC;AAE3C,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,CAAC;AAClD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,CAAC;AAChD,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,CAAC;AAClD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,EAAE;AACjD,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,EAAE;AACnD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,EAAE;AACjD,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,EAAE;AACnD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,EAAE;AACjD,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,EAAE;AACnD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,EAAE;AACjD,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,EAAE;AACnD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,EAAE;AACjD,WAAO,YAAY,WAAW,eAAe,CAAC,GAAG,EAAE;AACnD,WAAO,YAAY,WAAW,aAAa,CAAC,GAAG,EAAE;AAAA,EAClD,CAAC;AAED,OAAK,aAAa,MAAM;AACvB,UAAM,aAAa,qBAAqB;AAExC,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,CAAC,GAAG,CAAC;AAC1D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAC3D,WAAO,YAAY,WAAW,uBAAuB,EAAE,GAAG,CAAC;AAAA,EAC5D,CAAC;AAOD,WAAS,qBAAqB,SAA0B,UAAsC;AAC7F,UAAM,SAA+B,CAAC;AACtC,aAAS,IAAI,GAAG,MAAM,QAAQ,SAAS,GAAG,IAAI,KAAK,KAAK;AACvD,aAAO,CAAC,IAAI;AAAA,QACX,UAAU,QAAQ,aAAa,CAAC;AAAA,QAChC,YAAY,QAAQ,cAAc,CAAC;AAAA,MACpC;AAAA,IACD;AACA,WAAO,gBAAgB,QAAQ,QAAQ;AAAA,EACxC;AATS;AAWT,OAAK,WAAW,MAAM;AACrB,UAAM,aAAa,qBAAqB;AACxC,yBAAqB,WAAW,QAAQ,GAAG;AAAA,MAC1C,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAAA,EACF,CAAC;AAED,OAAK,mBAAmB,MAAM;AAC7B,UAAM,aAAa,qBAAqB;AACxC,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAED,yBAAqB,WAAW,gBAAgB,GAAG,IAAI,CAAC,GAAG;AAAA,MAC1D,EAAE,UAAU,GAAG,YAAY,EAAE;AAAA,MAC7B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,MAC9B,EAAE,UAAU,IAAI,YAAY,EAAE;AAAA,IAC/B,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
