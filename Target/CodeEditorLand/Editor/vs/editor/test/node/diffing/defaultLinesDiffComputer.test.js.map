{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/editor/test/node/diffing/defaultLinesDiffComputer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Range } from '../../../common/core/range.js';\nimport { RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { OffsetRange } from '../../../common/core/offsetRange.js';\nimport { getLineRangeMapping } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { LinesSliceCharSequence } from '../../../common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js';\nimport { MyersDiffAlgorithm } from '../../../common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js';\nimport { DynamicProgrammingDiffing } from '../../../common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('myers', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('1', () => {\n\t\tconst s1 = new LinesSliceCharSequence(['hello world'], new Range(1, 1, 1, Number.MAX_SAFE_INTEGER), true);\n\t\tconst s2 = new LinesSliceCharSequence(['hallo welt'], new Range(1, 1, 1, Number.MAX_SAFE_INTEGER), true);\n\n\t\tconst a = true ? new MyersDiffAlgorithm() : new DynamicProgrammingDiffing();\n\t\ta.compute(s1, s2);\n\t});\n});\n\nsuite('lineRangeMapping', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Simple', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tgetLineRangeMapping(\n\t\t\t\tnew RangeMapping(\n\t\t\t\t\tnew Range(2, 1, 3, 1),\n\t\t\t\t\tnew Range(2, 1, 2, 1)\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t'const abc = \"helloworld\".split(\"\");',\n\t\t\t\t\t'',\n\t\t\t\t\t''\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'const asciiLower = \"helloworld\".split(\"\");',\n\t\t\t\t\t''\n\t\t\t\t]\n\t\t\t).toString(),\n\t\t\t\"{[2,3)->[2,2)}\"\n\t\t);\n\t});\n\n\ttest('Empty Lines', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tgetLineRangeMapping(\n\t\t\t\tnew RangeMapping(\n\t\t\t\t\tnew Range(2, 1, 2, 1),\n\t\t\t\t\tnew Range(2, 1, 4, 1),\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t]\n\t\t\t).toString(),\n\t\t\t\"{[2,2)->[2,4)}\"\n\t\t);\n\t});\n});\n\nsuite('LinesSliceCharSequence', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst sequence = new LinesSliceCharSequence(\n\t\t[\n\t\t\t'line1: foo',\n\t\t\t'line2: fizzbuzz',\n\t\t\t'line3: barr',\n\t\t\t'line4: hello world',\n\t\t\t'line5: bazz',\n\t\t],\n\t\tnew Range(2, 1, 5, 1), true\n\t);\n\n\ttest('translateOffset', () => {\n\t\tassert.deepStrictEqual(\n\t\t\t{ result: OffsetRange.ofLength(sequence.length).map(offset => sequence.translateOffset(offset).toString()) },\n\t\t\t({\n\t\t\t\tresult: [\n\t\t\t\t\t\"(2,1)\", \"(2,2)\", \"(2,3)\", \"(2,4)\", \"(2,5)\", \"(2,6)\", \"(2,7)\", \"(2,8)\", \"(2,9)\", \"(2,10)\", \"(2,11)\",\n\t\t\t\t\t\"(2,12)\", \"(2,13)\", \"(2,14)\", \"(2,15)\", \"(2,16)\",\n\n\t\t\t\t\t\"(3,1)\", \"(3,2)\", \"(3,3)\", \"(3,4)\", \"(3,5)\", \"(3,6)\", \"(3,7)\", \"(3,8)\", \"(3,9)\", \"(3,10)\", \"(3,11)\", \"(3,12)\",\n\n\t\t\t\t\t\"(4,1)\", \"(4,2)\", \"(4,3)\", \"(4,4)\", \"(4,5)\", \"(4,6)\", \"(4,7)\", \"(4,8)\", \"(4,9)\",\n\t\t\t\t\t\"(4,10)\", \"(4,11)\", \"(4,12)\", \"(4,13)\", \"(4,14)\", \"(4,15)\", \"(4,16)\", \"(4,17)\",\n\t\t\t\t\t\"(4,18)\", \"(4,19)\"\n\t\t\t\t]\n\t\t\t})\n\t\t);\n\t});\n\n\ttest('extendToFullLines', () => {\n\t\tassert.deepStrictEqual(\n\t\t\t{ result: sequence.getText(sequence.extendToFullLines(new OffsetRange(20, 25))) },\n\t\t\t({ result: \"line3: barr\\n\" })\n\t\t);\n\n\t\tassert.deepStrictEqual(\n\t\t\t{ result: sequence.getText(sequence.extendToFullLines(new OffsetRange(20, 45))) },\n\t\t\t({ result: \"line3: barr\\nline4: hello world\\n\" })\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
