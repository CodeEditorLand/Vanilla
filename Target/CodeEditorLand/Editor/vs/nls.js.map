{
  "version": 3,
  "sources": ["../../../../Dependency/CodeEditorLand/Editor/Source/vs/nls.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// eslint-disable-next-line local/code-import-patterns\nimport { getNLSLanguage, getNLSMessages } from \"./nls.messages.js\";\n// eslint-disable-next-line local/code-import-patterns\nexport { getNLSLanguage, getNLSMessages } from \"./nls.messages.js\";\n\nconst isPseudo =\n\tgetNLSLanguage() === \"pseudo\" ||\n\t(typeof document !== \"undefined\" &&\n\t\tdocument.location &&\n\t\tdocument.location.hash.indexOf(\"pseudo=true\") >= 0);\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport interface ILocalizedString {\n\toriginal: string;\n\tvalue: string;\n}\n\nfunction _format(\n\tmessage: string,\n\targs: (string | number | boolean | undefined | null)[],\n): string {\n\tlet result: string;\n\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n\t\t\tconst index = rest[0];\n\t\t\tconst arg = args[index];\n\t\t\tlet result = match;\n\t\t\tif (typeof arg === \"string\") {\n\t\t\t\tresult = arg;\n\t\t\t} else if (\n\t\t\t\ttypeof arg === \"number\" ||\n\t\t\t\ttypeof arg === \"boolean\" ||\n\t\t\t\targ === void 0 ||\n\t\t\t\targ === null\n\t\t\t) {\n\t\t\t\tresult = String(arg);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tif (isPseudo) {\n\t\t// FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n\t\tresult = \"\\uFF3B\" + result.replace(/[aouei]/g, \"$&$&\") + \"\\uFF3D\";\n\t}\n\n\treturn result;\n}\n\n/**\n * Marks a string to be localized. Returns the localized string.\n *\n * @param info The {@linkcode ILocalizeInfo} which describes the id and comments associated with the localized string.\n * @param message The string to localize\n * @param args The arguments to the string\n *\n * @note `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * @example `localize({ key: 'sayHello', comment: ['Welcomes user'] }, 'hello {0}', name)`\n *\n * @returns string The localized string.\n */\nexport function localize(\n\tinfo: ILocalizeInfo,\n\tmessage: string,\n\t...args: (string | number | boolean | undefined | null)[]\n): string;\n\n/**\n * Marks a string to be localized. Returns the localized string.\n *\n * @param key The key to use for localizing the string\n * @param message The string to localize\n * @param args The arguments to the string\n *\n * @note `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * @example For example, `localize('sayHello', 'hello {0}', name)`\n *\n * @returns string The localized string.\n */\nexport function localize(\n\tkey: string,\n\tmessage: string,\n\t...args: (string | number | boolean | undefined | null)[]\n): string;\n\n/**\n * @skipMangle\n */\nexport function localize(\n\tdata: ILocalizeInfo | string /* | number when built */,\n\tmessage: string /* | null when built */,\n\t...args: (string | number | boolean | undefined | null)[]\n): string {\n\tif (typeof data === \"number\") {\n\t\treturn _format(lookupMessage(data, message), args);\n\t}\n\treturn _format(message, args);\n}\n\n/**\n * Only used when built: Looks up the message in the global NLS table.\n * This table is being made available as a global through bootstrapping\n * depending on the target context.\n */\nfunction lookupMessage(index: number, fallback: string | null): string {\n\tconst message = getNLSMessages()?.[index];\n\tif (typeof message !== \"string\") {\n\t\tif (typeof fallback === \"string\") {\n\t\t\treturn fallback;\n\t\t}\n\t\tthrow new Error(`!!! NLS MISSING: ${index} !!!`);\n\t}\n\treturn message;\n}\n\n/**\n * Marks a string to be localized. Returns an {@linkcode ILocalizedString}\n * which contains the localized string and the original string.\n *\n * @param info The {@linkcode ILocalizeInfo} which describes the id and comments associated with the localized string.\n * @param message The string to localize\n * @param args The arguments to the string\n *\n * @note `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * @example `localize2({ key: 'sayHello', comment: ['Welcomes user'] }, 'hello {0}', name)`\n *\n * @returns ILocalizedString which contains the localized string and the original string.\n */\nexport function localize2(\n\tinfo: ILocalizeInfo,\n\tmessage: string,\n\t...args: (string | number | boolean | undefined | null)[]\n): ILocalizedString;\n\n/**\n * Marks a string to be localized. Returns an {@linkcode ILocalizedString}\n * which contains the localized string and the original string.\n *\n * @param key The key to use for localizing the string\n * @param message The string to localize\n * @param args The arguments to the string\n *\n * @note `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * @example `localize('sayHello', 'hello {0}', name)`\n *\n * @returns ILocalizedString which contains the localized string and the original string.\n */\nexport function localize2(\n\tkey: string,\n\tmessage: string,\n\t...args: (string | number | boolean | undefined | null)[]\n): ILocalizedString;\n\n/**\n * @skipMangle\n */\nexport function localize2(\n\tdata: ILocalizeInfo | string /* | number when built */,\n\toriginalMessage: string,\n\t...args: (string | number | boolean | undefined | null)[]\n): ILocalizedString {\n\tlet message: string;\n\tif (typeof data === \"number\") {\n\t\tmessage = lookupMessage(data, originalMessage);\n\t} else {\n\t\tmessage = originalMessage;\n\t}\n\n\tconst value = _format(message, args);\n\n\treturn {\n\t\tvalue,\n\t\toriginal:\n\t\t\toriginalMessage === message\n\t\t\t\t? value\n\t\t\t\t: _format(originalMessage, args),\n\t};\n}\n\nexport interface INLSLanguagePackConfiguration {\n\t/**\n\t * The path to the translations config file that contains pointers to\n\t * all message bundles for `main` and extensions.\n\t */\n\treadonly translationsConfigFile: string;\n\n\t/**\n\t * The path to the file containing the translations for this language\n\t * pack as flat string array.\n\t */\n\treadonly messagesFile: string;\n\n\t/**\n\t * The path to the file that can be used to signal a corrupt language\n\t * pack, for example when reading the `messagesFile` fails. This will\n\t * instruct the application to re-create the cache on next startup.\n\t */\n\treadonly corruptMarkerFile: string;\n}\n\nexport interface INLSConfiguration {\n\t/**\n\t * Locale as defined in `argv.json` or `app.getLocale()`.\n\t */\n\treadonly userLocale: string;\n\n\t/**\n\t * Locale as defined by the OS (e.g. `app.getPreferredSystemLanguages()`).\n\t */\n\treadonly osLocale: string;\n\n\t/**\n\t * The actual language of the UI that ends up being used considering `userLocale`\n\t * and `osLocale`.\n\t */\n\treadonly resolvedLanguage: string;\n\n\t/**\n\t * Defined if a language pack is used that is not the\n\t * default english language pack. This requires a language\n\t * pack to be installed as extension.\n\t */\n\treadonly languagePack?: INLSLanguagePackConfiguration;\n\n\t/**\n\t * The path to the file containing the default english messages\n\t * as flat string array. The file is only present in built\n\t * versions of the application.\n\t */\n\treadonly defaultMessagesFile: string;\n\n\t/**\n\t * Below properties are deprecated and only there to continue support\n\t * for `vscode-nls` module that depends on them.\n\t * Refs https://github.com/microsoft/vscode-nls/blob/main/src/node/main.ts#L36-L46\n\t */\n\t/** @deprecated */\n\treadonly locale: string;\n\t/** @deprecated */\n\treadonly availableLanguages: Record<string, string>;\n\t/** @deprecated */\n\treadonly _languagePackSupport?: boolean;\n\t/** @deprecated */\n\treadonly _languagePackId?: string;\n\t/** @deprecated */\n\treadonly _translationsConfigFile?: string;\n\t/** @deprecated */\n\treadonly _cacheRoot?: string;\n\t/** @deprecated */\n\treadonly _resolvedLanguagePackCoreLocation?: string;\n\t/** @deprecated */\n\treadonly _corruptedFile?: string;\n}\n\nexport interface ILanguagePack {\n\treadonly hash: string;\n\treadonly label: string | undefined;\n\treadonly extensions: {\n\t\treadonly extensionIdentifier: {\n\t\t\treadonly id: string;\n\t\t\treadonly uuid?: string;\n\t\t};\n\t\treadonly version: string;\n\t}[];\n\treadonly translations: Record<string, string | undefined>;\n}\n\nexport type ILanguagePacks = Record<string, ILanguagePack | undefined>;\n"],
  "mappings": ";;AAMA,SAAS,gBAAgB,sBAAsB;AAE/C,SAAS,kBAAAA,iBAAgB,kBAAAC,uBAAsB;AAE/C,MAAM,WACL,eAAe,MAAM,YACpB,OAAO,aAAa,eACpB,SAAS,YACT,SAAS,SAAS,KAAK,QAAQ,aAAa,KAAK;AAYnD,SAAS,QACR,SACA,MACS;AACT,MAAI;AAEJ,MAAI,KAAK,WAAW,GAAG;AACtB,aAAS;AAAA,EACV,OAAO;AACN,aAAS,QAAQ,QAAQ,cAAc,CAAC,OAAO,SAAS;AACvD,YAAM,QAAQ,KAAK,CAAC;AACpB,YAAM,MAAM,KAAK,KAAK;AACtB,UAAIC,UAAS;AACb,UAAI,OAAO,QAAQ,UAAU;AAC5B,QAAAA,UAAS;AAAA,MACV,WACC,OAAO,QAAQ,YACf,OAAO,QAAQ,aACf,QAAQ,UACR,QAAQ,MACP;AACD,QAAAA,UAAS,OAAO,GAAG;AAAA,MACpB;AACA,aAAOA;AAAA,IACR,CAAC;AAAA,EACF;AAEA,MAAI,UAAU;AAEb,aAAS,WAAW,OAAO,QAAQ,YAAY,MAAM,IAAI;AAAA,EAC1D;AAEA,SAAO;AACR;AAjCS;AA0EF,SAAS,SACf,MACA,YACG,MACM;AACT,MAAI,OAAO,SAAS,UAAU;AAC7B,WAAO,QAAQ,cAAc,MAAM,OAAO,GAAG,IAAI;AAAA,EAClD;AACA,SAAO,QAAQ,SAAS,IAAI;AAC7B;AATgB;AAgBhB,SAAS,cAAc,OAAe,UAAiC;AACtE,QAAM,UAAU,eAAe,IAAI,KAAK;AACxC,MAAI,OAAO,YAAY,UAAU;AAChC,QAAI,OAAO,aAAa,UAAU;AACjC,aAAO;AAAA,IACR;AACA,UAAM,IAAI,MAAM,oBAAoB,KAAK,MAAM;AAAA,EAChD;AACA,SAAO;AACR;AATS;AAoDF,SAAS,UACf,MACA,oBACG,MACgB;AACnB,MAAI;AACJ,MAAI,OAAO,SAAS,UAAU;AAC7B,cAAU,cAAc,MAAM,eAAe;AAAA,EAC9C,OAAO;AACN,cAAU;AAAA,EACX;AAEA,QAAM,QAAQ,QAAQ,SAAS,IAAI;AAEnC,SAAO;AAAA,IACN;AAAA,IACA,UACC,oBAAoB,UACjB,QACA,QAAQ,iBAAiB,IAAI;AAAA,EAClC;AACD;AArBgB;",
  "names": ["getNLSLanguage", "getNLSMessages", "result"]
}
