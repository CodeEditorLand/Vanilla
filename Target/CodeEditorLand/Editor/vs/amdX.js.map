{
  "version": 3,
  "sources": ["../../../../Dependency/CodeEditorLand/Editor/Source/vs/amdX.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { canASAR, isESM } from \"./base/common/amd.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n\tSchemas,\n\tVSCODE_AUTHORITY,\n\tnodeModulesAsarPath,\n\tnodeModulesPath,\n} from \"./base/common/network.js\";\nimport * as platform from \"./base/common/platform.js\";\nimport type { IProductConfiguration } from \"./base/common/product.js\";\nimport { assertType } from \"./base/common/types.js\";\nimport { URI } from \"./base/common/uri.js\";\nimport { generateUuid } from \"./base/common/uuid.js\";\n\nclass DefineCall {\n\tconstructor(\n\t\tpublic readonly id: string | null | undefined,\n\t\tpublic readonly dependencies: string[] | null | undefined,\n\t\tpublic readonly callback: any,\n\t) {}\n}\n\nenum AMDModuleImporterState {\n\tUninitialized = 1,\n\tInitializedInternal = 2,\n\tInitializedExternal = 3,\n}\n\nclass AMDModuleImporter {\n\tpublic static INSTANCE = new AMDModuleImporter();\n\n\tprivate readonly _isWebWorker =\n\t\ttypeof self === \"object\" &&\n\t\tself.constructor &&\n\t\tself.constructor.name === \"DedicatedWorkerGlobalScope\";\n\tprivate readonly _isRenderer = typeof document === \"object\";\n\n\tprivate readonly _defineCalls: DefineCall[] = [];\n\tprivate _state = AMDModuleImporterState.Uninitialized;\n\tprivate _amdPolicy:\n\t\t| Pick<\n\t\t\t\tTrustedTypePolicy<{\n\t\t\t\t\tcreateScriptURL(value: string): string;\n\t\t\t\t}>,\n\t\t\t\t\"name\" | \"createScriptURL\"\n\t\t  >\n\t\t| undefined;\n\n\tconstructor() {}\n\n\tprivate _initialize(): void {\n\t\tif (this._state === AMDModuleImporterState.Uninitialized) {\n\t\t\tif ((globalThis as any).define) {\n\t\t\t\tconsole.log(\"[amdX] AMD loader already present externally\");\n\t\t\t\tthis._state = AMDModuleImporterState.InitializedExternal;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state = AMDModuleImporterState.InitializedInternal;\n\n\t\t(globalThis as any).define = (\n\t\t\tid: any,\n\t\t\tdependencies: any,\n\t\t\tcallback: any,\n\t\t) => {\n\t\t\tif (typeof id !== \"string\") {\n\t\t\t\tcallback = dependencies;\n\t\t\t\tdependencies = id;\n\t\t\t\tid = null;\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttypeof dependencies !== \"object\" ||\n\t\t\t\t!Array.isArray(dependencies)\n\t\t\t) {\n\t\t\t\tcallback = dependencies;\n\t\t\t\tdependencies = null;\n\t\t\t}\n\t\t\t// if (!dependencies) {\n\t\t\t// \tdependencies = ['require', 'exports', 'module'];\n\t\t\t// }\n\t\t\tthis._defineCalls.push(new DefineCall(id, dependencies, callback));\n\t\t};\n\n\t\t(globalThis as any).define.amd = true;\n\n\t\tif (this._isRenderer) {\n\t\t\t// eslint-disable-next-line no-restricted-globals\n\t\t\tthis._amdPolicy =\n\t\t\t\t(globalThis as any)._VSCODE_WEB_PACKAGE_TTP ??\n\t\t\t\twindow.trustedTypes?.createPolicy(\"amdLoader\", {\n\t\t\t\t\tcreateScriptURL(value) {\n\t\t\t\t\t\t// eslint-disable-next-line no-restricted-globals\n\t\t\t\t\t\tif (value.startsWith(window.location.origin)) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvalue.startsWith(\n\t\t\t\t\t\t\t\t`${Schemas.vscodeFileResource}://${VSCODE_AUTHORITY}`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`[trusted_script_src] Invalid script url: ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t} else if (this._isWebWorker) {\n\t\t\tthis._amdPolicy =\n\t\t\t\t(globalThis as any)._VSCODE_WEB_PACKAGE_TTP ??\n\t\t\t\t(globalThis as any).trustedTypes?.createPolicy(\"amdLoader\", {\n\t\t\t\t\tcreateScriptURL(value: string) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t}\n\t}\n\n\tpublic async load<T>(scriptSrc: string): Promise<T> {\n\t\tthis._initialize();\n\n\t\tif (this._state === AMDModuleImporterState.InitializedExternal) {\n\t\t\treturn new Promise<T>((resolve) => {\n\t\t\t\tconst tmpModuleId = generateUuid();\n\t\t\t\tconsole.log(\n\t\t\t\t\t`[amdX] Using external define(\"${tmpModuleId}\", [\"${scriptSrc}\"])`,\n\t\t\t\t);\n\t\t\t\t(globalThis as any).define(\n\t\t\t\t\ttmpModuleId,\n\t\t\t\t\t[scriptSrc],\n\t\t\t\t\t(moduleResult: T) => {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t`[amdX] Got a result for ${tmpModuleId}: ${!!moduleResult}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(moduleResult);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tconst defineCall = await (this._isWebWorker\n\t\t\t? this._workerLoadScript(scriptSrc)\n\t\t\t: this._isRenderer\n\t\t\t\t? this._rendererLoadScript(scriptSrc)\n\t\t\t\t: this._nodeJSLoadScript(scriptSrc));\n\t\tif (!defineCall) {\n\t\t\t// throw new Error(`Did not receive a define call from script ${scriptSrc}`);\n\t\t\tconsole.warn(\n\t\t\t\t`Did not receive a define call from script ${scriptSrc}`,\n\t\t\t);\n\t\t\treturn <T>undefined;\n\t\t}\n\t\t// TODO@esm require, module\n\t\tconst exports = {};\n\t\tconst dependencyObjs: any[] = [];\n\t\tconst dependencyModules: string[] = [];\n\n\t\tif (Array.isArray(defineCall.dependencies)) {\n\t\t\tfor (const mod of defineCall.dependencies) {\n\t\t\t\tif (mod === \"exports\") {\n\t\t\t\t\tdependencyObjs.push(exports);\n\t\t\t\t} else {\n\t\t\t\t\tdependencyModules.push(mod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (dependencyModules.length > 0) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot resolve dependencies for script ${scriptSrc}. The dependencies are: ${dependencyModules.join(\", \")}`,\n\t\t\t);\n\t\t}\n\t\tif (typeof defineCall.callback === \"function\") {\n\t\t\treturn defineCall.callback(...dependencyObjs) ?? exports;\n\t\t} else {\n\t\t\treturn defineCall.callback;\n\t\t}\n\t}\n\n\tprivate _rendererLoadScript(\n\t\tscriptSrc: string,\n\t): Promise<DefineCall | undefined> {\n\t\treturn new Promise<DefineCall | undefined>((resolve, reject) => {\n\t\t\tconst scriptElement = document.createElement(\"script\");\n\t\t\tscriptElement.setAttribute(\"async\", \"async\");\n\t\t\tscriptElement.setAttribute(\"type\", \"text/javascript\");\n\n\t\t\tconst unbind = () => {\n\t\t\t\tscriptElement.removeEventListener(\"load\", loadEventListener);\n\t\t\t\tscriptElement.removeEventListener(\"error\", errorEventListener);\n\t\t\t};\n\n\t\t\tconst loadEventListener = (e: any) => {\n\t\t\t\tunbind();\n\t\t\t\tresolve(this._defineCalls.pop());\n\t\t\t};\n\n\t\t\tconst errorEventListener = (e: any) => {\n\t\t\t\tunbind();\n\t\t\t\treject(e);\n\t\t\t};\n\n\t\t\tscriptElement.addEventListener(\"load\", loadEventListener);\n\t\t\tscriptElement.addEventListener(\"error\", errorEventListener);\n\t\t\tif (this._amdPolicy) {\n\t\t\t\tscriptSrc = this._amdPolicy.createScriptURL(\n\t\t\t\t\tscriptSrc,\n\t\t\t\t) as any as string;\n\t\t\t}\n\t\t\tscriptElement.setAttribute(\"src\", scriptSrc);\n\t\t\t// eslint-disable-next-line no-restricted-globals\n\t\t\twindow.document\n\t\t\t\t.getElementsByTagName(\"head\")[0]\n\t\t\t\t.appendChild(scriptElement);\n\t\t});\n\t}\n\n\tprivate async _workerLoadScript(\n\t\tscriptSrc: string,\n\t): Promise<DefineCall | undefined> {\n\t\tif (this._amdPolicy) {\n\t\t\tscriptSrc = this._amdPolicy.createScriptURL(\n\t\t\t\tscriptSrc,\n\t\t\t) as any as string;\n\t\t}\n\t\tif (isESM) {\n\t\t\tawait import(scriptSrc);\n\t\t} else {\n\t\t\timportScripts(scriptSrc);\n\t\t}\n\t\treturn this._defineCalls.pop();\n\t}\n\n\tprivate async _nodeJSLoadScript(\n\t\tscriptSrc: string,\n\t): Promise<DefineCall | undefined> {\n\t\ttry {\n\t\t\tconst fs = (await import(`${\"fs\"}`)).default;\n\t\t\tconst vm = (await import(`${\"vm\"}`)).default;\n\t\t\tconst module = (await import(`${\"module\"}`)).default;\n\n\t\t\tconst filePath = URI.parse(scriptSrc).fsPath;\n\t\t\tconst content = fs.readFileSync(filePath).toString();\n\t\t\tconst scriptSource = module.wrap(content.replace(/^#!.*/, \"\"));\n\t\t\tconst script = new vm.Script(scriptSource);\n\t\t\tconst compileWrapper = script.runInThisContext();\n\t\t\tcompileWrapper.apply();\n\t\t\treturn this._defineCalls.pop();\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nconst cache = new Map<string, Promise<any>>();\n\n/**\n * Utility for importing an AMD node module. This util supports AMD and ESM contexts and should be used while the ESM adoption\n * is on its way.\n *\n * e.g. pass in `vscode-textmate/release/main.js`\n */\nexport async function importAMDNodeModule<T>(\n\tnodeModuleName: string,\n\tpathInsideNodeModule: string,\n\tisBuilt?: boolean,\n): Promise<T> {\n\tif (isESM) {\n\t\tif (isBuilt === undefined) {\n\t\t\tconst product =\n\t\t\t\tglobalThis._VSCODE_PRODUCT_JSON as unknown as IProductConfiguration;\n\t\t\tisBuilt = Boolean(\n\t\t\t\t(\n\t\t\t\t\tproduct ??\n\t\t\t\t\t(globalThis as any).vscode?.context?.configuration()\n\t\t\t\t\t\t?.product\n\t\t\t\t)?.commit,\n\t\t\t);\n\t\t}\n\n\t\tconst nodeModulePath = pathInsideNodeModule\n\t\t\t? `${nodeModuleName}/${pathInsideNodeModule}`\n\t\t\t: nodeModuleName;\n\t\tif (cache.has(nodeModulePath)) {\n\t\t\treturn cache.get(nodeModulePath)!;\n\t\t}\n\t\tlet scriptSrc: string;\n\t\tif (/^\\w[\\w\\d+.-]*:\\/\\//.test(nodeModulePath)) {\n\t\t\t// looks like a URL\n\t\t\t// bit of a special case for: src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts\n\t\t\tscriptSrc = nodeModulePath;\n\t\t} else {\n\t\t\tconst useASAR = canASAR && isBuilt && !platform.isWeb;\n\t\t\tconst actualNodeModulesPath = useASAR\n\t\t\t\t? nodeModulesAsarPath\n\t\t\t\t: nodeModulesPath;\n\t\t\tconst resourcePath: AppResourcePath = `${actualNodeModulesPath}/${nodeModulePath}`;\n\t\t\tscriptSrc = FileAccess.asBrowserUri(resourcePath).toString(true);\n\t\t}\n\t\tconst result = AMDModuleImporter.INSTANCE.load<T>(scriptSrc);\n\t\tcache.set(nodeModulePath, result);\n\t\treturn result;\n\t} else {\n\t\treturn await import(nodeModuleName);\n\t}\n}\n\nexport function resolveAmdNodeModulePath(\n\tnodeModuleName: string,\n\tpathInsideNodeModule: string,\n): string {\n\tassertType(isESM);\n\n\tconst product =\n\t\tglobalThis._VSCODE_PRODUCT_JSON as unknown as IProductConfiguration;\n\tconst isBuilt = Boolean(\n\t\t(\n\t\t\tproduct ??\n\t\t\t(globalThis as any).vscode?.context?.configuration()?.product\n\t\t)?.commit,\n\t);\n\tconst useASAR = canASAR && isBuilt && !platform.isWeb;\n\n\tconst nodeModulePath = `${nodeModuleName}/${pathInsideNodeModule}`;\n\tconst actualNodeModulesPath = useASAR\n\t\t? nodeModulesAsarPath\n\t\t: nodeModulesPath;\n\tconst resourcePath: AppResourcePath = `${actualNodeModulesPath}/${nodeModulePath}`;\n\treturn FileAccess.asBrowserUri(resourcePath).toString(true);\n}\n"],
  "mappings": "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",
  "names": ["AMDModuleImporterState"]
}
