{
  "version": 3,
  "sources": ["../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/workbench.web.main.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n// ####################################\n// ###                              ###\n// ### !!! PLEASE DO NOT MODIFY !!! ###\n// ###                              ###\n// ####################################\n\n// TODO@esm remove me once we stop supporting our web-esm-bridge\n\n(function () {\n\n\t// #region Types\n\ttype IGlobalDefine = {\n\t\t(moduleName: string, dependencies: string[], callback: (...args: any[]) => any): any;\n\t\t(moduleName: string, dependencies: string[], definition: any): any;\n\t\t(moduleName: string, callback: (...args: any[]) => any): any;\n\t\t(moduleName: string, definition: any): any;\n\t\t(dependencies: string[], callback: (...args: any[]) => any): any;\n\t\t(dependencies: string[], definition: any): any;\n\t};\n\n\tinterface ILoaderPlugin {\n\t\tload: (pluginParam: string, parentRequire: IRelativeRequire, loadCallback: IPluginLoadCallback, options: IConfigurationOptions) => void;\n\t\twrite?: (pluginName: string, moduleName: string, write: IPluginWriteCallback) => void;\n\t\twriteFile?: (pluginName: string, moduleName: string, req: IRelativeRequire, write: IPluginWriteFileCallback, config: IConfigurationOptions) => void;\n\t\tfinishBuild?: (write: (filename: string, contents: string) => void) => void;\n\t}\n\tinterface IRelativeRequire {\n\t\t(dependencies: string[], callback: Function, errorback?: (error: Error) => void): void;\n\t\ttoUrl(id: string): string;\n\t}\n\tinterface IPluginLoadCallback {\n\t\t(value: any): void;\n\t\terror(err: any): void;\n\t}\n\tinterface IConfigurationOptions {\n\t\tisBuild: boolean | undefined;\n\t\t[key: string]: any;\n\t}\n\tinterface IPluginWriteCallback {\n\t\t(contents: string): void;\n\t\tgetEntryPoint(): string;\n\t\tasModule(moduleId: string, contents: string): void;\n\t}\n\tinterface IPluginWriteFileCallback {\n\t\t(filename: string, contents: string): void;\n\t\tgetEntryPoint(): string;\n\t\tasModule(moduleId: string, contents: string): void;\n\t}\n\n\t//#endregion\n\n\tconst define: IGlobalDefine = (globalThis as any).define;\n\tconst require: { getConfig?(): any } | undefined = (globalThis as any).require;\n\n\tif (!define || !require || typeof require.getConfig !== 'function') {\n\t\tthrow new Error('Expected global define() and require() functions. Please only load this module in an AMD context!');\n\t}\n\n\tlet baseUrl = require?.getConfig().baseUrl;\n\tif (!baseUrl) {\n\t\tthrow new Error('Failed to determine baseUrl for loading AMD modules (tried require.getConfig().baseUrl)');\n\t}\n\tif (!baseUrl.endsWith('/')) {\n\t\tbaseUrl = baseUrl + '/';\n\t}\n\tglobalThis._VSCODE_FILE_ROOT = baseUrl;\n\n\tconst trustedTypesPolicy: Pick<TrustedTypePolicy<{ createScriptURL(value: string): string }>, 'name' | 'createScriptURL'> | undefined = require.getConfig().trustedTypesPolicy;\n\tif (trustedTypesPolicy) {\n\t\tglobalThis._VSCODE_WEB_PACKAGE_TTP = trustedTypesPolicy;\n\t}\n\n\tconst promise = new Promise(resolve => {\n\t\t(globalThis as any).__VSCODE_WEB_ESM_PROMISE = resolve;\n\t});\n\n\tdefine('vs/web-api', [], () => {\n\t\treturn {\n\t\t\tload: (_name, _req, _load, _config) => {\n\t\t\t\tconst script: any = document.createElement('script');\n\t\t\t\tscript.type = 'module';\n\t\t\t\tscript.src = trustedTypesPolicy ? trustedTypesPolicy.createScriptURL(`${baseUrl}vs/workbench/workbench.web.main.internal.js`) as any as string : `${baseUrl}vs/workbench/workbench.web.main.internal.js`;\n\t\t\t\tdocument.head.appendChild(script);\n\n\t\t\t\treturn promise.then(mod => _load(mod));\n\t\t\t}\n\t\t} as ILoaderPlugin;\n\t});\n\n\tdefine(\n\t\t'vs/workbench/workbench.web.main',\n\t\t['require', 'exports', 'vs/web-api!'],\n\t\tfunction (_require, exports, webApi) {\n\t\t\tObject.assign(exports, webApi);\n\t\t}\n\t);\n})();\n"],
  "mappings": ";;CAcC,WAAY;AA2CZ,QAAM,SAAyB,WAAmB;AAClD,QAAMA,WAA8C,WAAmB;AAEvE,MAAI,CAAC,UAAU,CAACA,YAAW,OAAOA,SAAQ,cAAc,YAAY;AACnE,UAAM,IAAI,MAAM,mGAAmG;AAAA,EACpH;AAEA,MAAI,UAAUA,UAAS,UAAU,EAAE;AACnC,MAAI,CAAC,SAAS;AACb,UAAM,IAAI,MAAM,yFAAyF;AAAA,EAC1G;AACA,MAAI,CAAC,QAAQ,SAAS,GAAG,GAAG;AAC3B,cAAU,UAAU;AAAA,EACrB;AACA,aAAW,oBAAoB;AAE/B,QAAM,qBAAkIA,SAAQ,UAAU,EAAE;AAC5J,MAAI,oBAAoB;AACvB,eAAW,0BAA0B;AAAA,EACtC;AAEA,QAAM,UAAU,IAAI,QAAQ,aAAW;AACtC,IAAC,WAAmB,2BAA2B;AAAA,EAChD,CAAC;AAED,SAAO,cAAc,CAAC,GAAG,MAAM;AAC9B,WAAO;AAAA,MACN,MAAM,wBAAC,OAAO,MAAM,OAAO,YAAY;AACtC,cAAM,SAAc,SAAS,cAAc,QAAQ;AACnD,eAAO,OAAO;AACd,eAAO,MAAM,qBAAqB,mBAAmB,gBAAgB,GAAG,OAAO,6CAA6C,IAAqB,GAAG,OAAO;AAC3J,iBAAS,KAAK,YAAY,MAAM;AAEhC,eAAO,QAAQ,KAAK,SAAO,MAAM,GAAG,CAAC;AAAA,MACtC,GAPM;AAAA,IAQP;AAAA,EACD,CAAC;AAED;AAAA,IACC;AAAA,IACA,CAAC,WAAW,WAAW,aAAa;AAAA,IACpC,SAAU,UAAU,SAAS,QAAQ;AACpC,aAAO,OAAO,SAAS,MAAM;AAAA,IAC9B;AAAA,EACD;AACD,GAAG;",
  "names": ["require"]
}
