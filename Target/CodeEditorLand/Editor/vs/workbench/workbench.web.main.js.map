{
  "version": 3,
  "sources": ["../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/workbench.web.main.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// ####################################\n// ###                              ###\n// ### !!! PLEASE DO NOT MODIFY !!! ###\n// ###                              ###\n// ####################################\n\n// TODO@esm remove me once we stop supporting our web-esm-bridge\n\n(() => {\n\t// #region Types\n\ttype IGlobalDefine = {\n\t\t(\n\t\t\tmoduleName: string,\n\t\t\tdependencies: string[],\n\t\t\tcallback: (...args: any[]) => any,\n\t\t): any;\n\t\t(moduleName: string, dependencies: string[], definition: any): any;\n\t\t(moduleName: string, callback: (...args: any[]) => any): any;\n\t\t(moduleName: string, definition: any): any;\n\t\t(dependencies: string[], callback: (...args: any[]) => any): any;\n\t\t(dependencies: string[], definition: any): any;\n\t};\n\n\tinterface ILoaderPlugin {\n\t\tload: (\n\t\t\tpluginParam: string,\n\t\t\tparentRequire: IRelativeRequire,\n\t\t\tloadCallback: IPluginLoadCallback,\n\t\t\toptions: IConfigurationOptions,\n\t\t) => void;\n\t\twrite?: (\n\t\t\tpluginName: string,\n\t\t\tmoduleName: string,\n\t\t\twrite: IPluginWriteCallback,\n\t\t) => void;\n\t\twriteFile?: (\n\t\t\tpluginName: string,\n\t\t\tmoduleName: string,\n\t\t\treq: IRelativeRequire,\n\t\t\twrite: IPluginWriteFileCallback,\n\t\t\tconfig: IConfigurationOptions,\n\t\t) => void;\n\t\tfinishBuild?: (\n\t\t\twrite: (filename: string, contents: string) => void,\n\t\t) => void;\n\t}\n\tinterface IRelativeRequire {\n\t\t(\n\t\t\tdependencies: string[],\n\t\t\tcallback: Function,\n\t\t\terrorback?: (error: Error) => void,\n\t\t): void;\n\t\ttoUrl(id: string): string;\n\t}\n\tinterface IPluginLoadCallback {\n\t\t(value: any): void;\n\t\terror(err: any): void;\n\t}\n\tinterface IConfigurationOptions {\n\t\tisBuild: boolean | undefined;\n\t\t[key: string]: any;\n\t}\n\tinterface IPluginWriteCallback {\n\t\t(contents: string): void;\n\t\tgetEntryPoint(): string;\n\t\tasModule(moduleId: string, contents: string): void;\n\t}\n\tinterface IPluginWriteFileCallback {\n\t\t(filename: string, contents: string): void;\n\t\tgetEntryPoint(): string;\n\t\tasModule(moduleId: string, contents: string): void;\n\t}\n\n\t//#endregion\n\n\tconst define: IGlobalDefine = (globalThis as any).define;\n\tconst require: { getConfig?(): any } | undefined = (globalThis as any)\n\t\t.require;\n\n\tif (!define || !require || typeof require.getConfig !== \"function\") {\n\t\tthrow new Error(\n\t\t\t\"Expected global define() and require() functions. Please only load this module in an AMD context!\",\n\t\t);\n\t}\n\n\tlet baseUrl = require?.getConfig().baseUrl;\n\tif (!baseUrl) {\n\t\tthrow new Error(\n\t\t\t\"Failed to determine baseUrl for loading AMD modules (tried require.getConfig().baseUrl)\",\n\t\t);\n\t}\n\tif (!baseUrl.endsWith(\"/\")) {\n\t\tbaseUrl = baseUrl + \"/\";\n\t}\n\tglobalThis._VSCODE_FILE_ROOT = baseUrl;\n\n\tconst trustedTypesPolicy:\n\t\t| Pick<\n\t\t\t\tTrustedTypePolicy<{ createScriptURL(value: string): string }>,\n\t\t\t\t\"name\" | \"createScriptURL\"\n\t\t  >\n\t\t| undefined = require.getConfig().trustedTypesPolicy;\n\tif (trustedTypesPolicy) {\n\t\tglobalThis._VSCODE_WEB_PACKAGE_TTP = trustedTypesPolicy;\n\t}\n\n\tconst promise = new Promise((resolve) => {\n\t\t(globalThis as any).__VSCODE_WEB_ESM_PROMISE = resolve;\n\t});\n\n\tdefine(\"vs/web-api\", [], () => {\n\t\treturn {\n\t\t\tload: (_name, _req, _load, _config) => {\n\t\t\t\tconst script: any = document.createElement(\"script\");\n\t\t\t\tscript.type = \"module\";\n\t\t\t\tscript.src = trustedTypesPolicy\n\t\t\t\t\t? (trustedTypesPolicy.createScriptURL(\n\t\t\t\t\t\t\t`${baseUrl}vs/workbench/workbench.web.main.internal.js`,\n\t\t\t\t\t\t) as any as string)\n\t\t\t\t\t: `${baseUrl}vs/workbench/workbench.web.main.internal.js`;\n\t\t\t\tdocument.head.appendChild(script);\n\n\t\t\t\treturn promise.then((mod) => _load(mod));\n\t\t\t},\n\t\t} as ILoaderPlugin;\n\t});\n\n\tdefine(\"vs/workbench/workbench.web.main\", [\n\t\t\"require\",\n\t\t\"exports\",\n\t\t\"vs/web-api!\",\n\t], (_require, exports, webApi) => {\n\t\tObject.assign(exports, webApi);\n\t});\n})();\n"],
  "mappings": ";;CAaC,MAAM;AAmEN,QAAM,SAAyB,WAAmB;AAClD,QAAMA,WAA8C,WAClD;AAEF,MAAI,CAAC,UAAU,CAACA,YAAW,OAAOA,SAAQ,cAAc,YAAY;AACnE,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AAEA,MAAI,UAAUA,UAAS,UAAU,EAAE;AACnC,MAAI,CAAC,SAAS;AACb,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AACA,MAAI,CAAC,QAAQ,SAAS,GAAG,GAAG;AAC3B,cAAU,UAAU;AAAA,EACrB;AACA,aAAW,oBAAoB;AAE/B,QAAM,qBAKSA,SAAQ,UAAU,EAAE;AACnC,MAAI,oBAAoB;AACvB,eAAW,0BAA0B;AAAA,EACtC;AAEA,QAAM,UAAU,IAAI,QAAQ,CAAC,YAAY;AACxC,IAAC,WAAmB,2BAA2B;AAAA,EAChD,CAAC;AAED,SAAO,cAAc,CAAC,GAAG,MAAM;AAC9B,WAAO;AAAA,MACN,MAAM,wBAAC,OAAO,MAAM,OAAO,YAAY;AACtC,cAAM,SAAc,SAAS,cAAc,QAAQ;AACnD,eAAO,OAAO;AACd,eAAO,MAAM,qBACT,mBAAmB;AAAA,UACpB,GAAG,OAAO;AAAA,QACX,IACC,GAAG,OAAO;AACb,iBAAS,KAAK,YAAY,MAAM;AAEhC,eAAO,QAAQ,KAAK,CAAC,QAAQ,MAAM,GAAG,CAAC;AAAA,MACxC,GAXM;AAAA,IAYP;AAAA,EACD,CAAC;AAED,SAAO,mCAAmC;AAAA,IACzC;AAAA,IACA;AAAA,IACA;AAAA,EACD,GAAG,CAAC,UAAU,SAAS,WAAW;AACjC,WAAO,OAAO,SAAS,MAAM;AAAA,EAC9B,CAAC;AACF,GAAG;",
  "names": ["require"]
}
