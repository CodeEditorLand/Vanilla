import{toErrorMessage as c}from"../../../../vs/base/common/errorMessage.js";import{isCancellationError as l}from"../../../../vs/base/common/errors.js";import{localize as a,localize2 as n}from"../../../../vs/nls.js";import"../../../../vs/platform/action/common/action.js";import{Action2 as s}from"../../../../vs/platform/actions/common/actions.js";import{IDialogService as m}from"../../../../vs/platform/dialogs/common/dialogs.js";import"../../../../vs/platform/instantiation/common/instantiation.js";import{INativeHostService as d}from"../../../../vs/platform/native/common/native.js";import p from"../../../../vs/platform/product/common/product.js";import{IProductService as u}from"../../../../vs/platform/product/common/productService.js";const S=n("shellCommand","Shell Command");class z extends s{constructor(){super({id:"workbench.action.installCommandLine",title:n("install","Install '{0}' command in PATH",p.applicationName),category:S,f1:!0})}async run(o){const t=o.get(d),e=o.get(m),i=o.get(u);try{await t.installShellCommand(),e.info(a("successIn","Shell command '{0}' successfully installed in PATH.",i.applicationName))}catch(r){if(l(r))return;e.error(c(r))}}}class L extends s{constructor(){super({id:"workbench.action.uninstallCommandLine",title:n("uninstall","Uninstall '{0}' command from PATH",p.applicationName),category:S,f1:!0})}async run(o){const t=o.get(d),e=o.get(m),i=o.get(u);try{await t.uninstallShellCommand(),e.info(a("successFrom","Shell command '{0}' successfully uninstalled from PATH.",i.applicationName))}catch(r){if(l(r))return;e.error(c(r))}}}export{z as InstallShellScriptAction,L as UninstallShellScriptAction};
