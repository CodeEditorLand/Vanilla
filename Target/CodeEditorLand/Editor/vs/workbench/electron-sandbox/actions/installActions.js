import{localize as c,localize2 as n}from"../../../nls.js";import{Action2 as l}from"../../../platform/actions/common/actions.js";import a from"../../../platform/product/common/product.js";import{IDialogService as s}from"../../../platform/dialogs/common/dialogs.js";import{INativeHostService as m}from"../../../platform/native/common/native.js";import{toErrorMessage as d}from"../../../base/common/errorMessage.js";import{IProductService as p}from"../../../platform/product/common/productService.js";import{isCancellationError as u}from"../../../base/common/errors.js";const S=n("shellCommand","Shell Command");class z extends l{constructor(){super({id:"workbench.action.installCommandLine",title:n("install","Install '{0}' command in PATH",a.applicationName),category:S,f1:!0})}async run(o){const t=o.get(m),e=o.get(s),i=o.get(p);try{await t.installShellCommand(),e.info(c("successIn","Shell command '{0}' successfully installed in PATH.",i.applicationName))}catch(r){if(u(r))return;e.error(d(r))}}}class L extends l{constructor(){super({id:"workbench.action.uninstallCommandLine",title:n("uninstall","Uninstall '{0}' command from PATH",a.applicationName),category:S,f1:!0})}async run(o){const t=o.get(m),e=o.get(s),i=o.get(p);try{await t.uninstallShellCommand(),e.info(c("successFrom","Shell command '{0}' successfully uninstalled from PATH.",i.applicationName))}catch(r){if(u(r))return;e.error(d(r))}}}export{z as InstallShellScriptAction,L as UninstallShellScriptAction};
