var u=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=(s,r,e,t)=>{for(var o=t>1?void 0:t?g(r,e):r,i=s.length-1,c;i>=0;i--)(c=s[i])&&(o=(t?c(r,e,o):c(o))||o);return t&&o&&u(r,e,o),o},n=(s,r)=>(e,t)=>r(e,t,s);import{getActiveWindow as l}from"../../../../../vs/base/browser/dom.js";import{fromNow as S}from"../../../../../vs/base/common/date.js";import{isLinuxSnap as b}from"../../../../../vs/base/common/platform.js";import{process as a}from"../../../../../vs/base/parts/sandbox/electron-sandbox/globals.js";import{localize as v}from"../../../../../vs/nls.js";import{IClipboardService as I}from"../../../../../vs/platform/clipboard/common/clipboardService.js";import{AbstractDialogHandler as w}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{ILogService as y}from"../../../../../vs/platform/log/common/log.js";import{INativeHostService as k}from"../../../../../vs/platform/native/common/native.js";import{IProductService as f}from"../../../../../vs/platform/product/common/productService.js";let d=class extends w{constructor(e,t,o,i){super();this.logService=e;this.nativeHostService=t;this.productService=o;this.clipboardService=i}async prompt(e){this.logService.trace("DialogService#prompt",e.message);const t=this.getPromptButtons(e),{response:o,checkboxChecked:i}=await this.nativeHostService.showMessageBox({type:this.getDialogType(e.type),title:e.title,message:e.message,detail:e.detail,buttons:t,cancelId:e.cancelButton?t.length-1:-1,checkboxLabel:e.checkbox?.label,checkboxChecked:e.checkbox?.checked,targetWindowId:l().vscodeWindowId});return this.getPromptResult(e,o,i)}async confirm(e){this.logService.trace("DialogService#confirm",e.message);const t=this.getConfirmationButtons(e),{response:o,checkboxChecked:i}=await this.nativeHostService.showMessageBox({type:this.getDialogType(e.type)??"question",title:e.title,message:e.message,detail:e.detail,buttons:t,cancelId:t.length-1,checkboxLabel:e.checkbox?.label,checkboxChecked:e.checkbox?.checked,targetWindowId:l().vscodeWindowId});return{confirmed:o===0,checkboxChecked:i}}input(){throw new Error("Unsupported")}async about(){let e=this.productService.version;this.productService.target?e=`${e} (${this.productService.target} setup)`:this.productService.darwinUniversalAssetId&&(e=`${e} (Universal)`);const t=await this.nativeHostService.getOSProperties(),o=p=>v({key:"aboutDetail",comment:["Electron, Chromium, Node.js and V8 are product names that need no translation"]},`Version: {0}
Commit: {1}
Date: {2}
Electron: {3}
ElectronBuildId: {4}
Chromium: {5}
Node.js: {6}
V8: {7}
OS: {8}`,e,this.productService.commit||"Unknown",this.productService.date?`${this.productService.date}${p?" ("+S(new Date(this.productService.date),!0)+")":""}`:"Unknown",a.versions.electron,a.versions["microsoft-build"],a.versions.chrome,a.versions.node,a.versions.v8,`${t.type} ${t.arch} ${t.release}${b?" snap":""}`),i=o(!0),c=o(!1),{response:h}=await this.nativeHostService.showMessageBox({type:"info",message:this.productService.nameLong,detail:`
${i}`,buttons:[v({key:"copy",comment:["&& denotes a mnemonic"]},"&&Copy"),v("okButton","OK")],targetWindowId:l().vscodeWindowId});h===0&&this.clipboardService.writeText(c)}};d=m([n(0,y),n(1,k),n(2,f),n(3,I)],d);export{d as NativeDialogHandler};
