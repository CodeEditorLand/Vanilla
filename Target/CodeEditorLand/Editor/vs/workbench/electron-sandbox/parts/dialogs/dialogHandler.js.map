{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { fromNow } from '../../../../base/common/date.js';\nimport { isLinuxSnap } from '../../../../base/common/platform.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { AbstractDialogHandler, IConfirmation, IConfirmationResult, IPrompt, IAsyncPromptResult } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { process } from '../../../../base/parts/sandbox/electron-sandbox/globals.js';\nimport { getActiveWindow } from '../../../../base/browser/dom.js';\n\nexport class NativeDialogHandler extends AbstractDialogHandler {\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync prompt<T>(prompt: IPrompt<T>): Promise<IAsyncPromptResult<T>> {\n\t\tthis.logService.trace('DialogService#prompt', prompt.message);\n\n\t\tconst buttons = this.getPromptButtons(prompt);\n\n\t\tconst { response, checkboxChecked } = await this.nativeHostService.showMessageBox({\n\t\t\ttype: this.getDialogType(prompt.type),\n\t\t\ttitle: prompt.title,\n\t\t\tmessage: prompt.message,\n\t\t\tdetail: prompt.detail,\n\t\t\tbuttons,\n\t\t\tcancelId: prompt.cancelButton ? buttons.length - 1 : -1 /* Disabled */,\n\t\t\tcheckboxLabel: prompt.checkbox?.label,\n\t\t\tcheckboxChecked: prompt.checkbox?.checked,\n\t\t\ttargetWindowId: getActiveWindow().vscodeWindowId\n\t\t});\n\n\t\treturn this.getPromptResult(prompt, response, checkboxChecked);\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tthis.logService.trace('DialogService#confirm', confirmation.message);\n\n\t\tconst buttons = this.getConfirmationButtons(confirmation);\n\n\t\tconst { response, checkboxChecked } = await this.nativeHostService.showMessageBox({\n\t\t\ttype: this.getDialogType(confirmation.type) ?? 'question',\n\t\t\ttitle: confirmation.title,\n\t\t\tmessage: confirmation.message,\n\t\t\tdetail: confirmation.detail,\n\t\t\tbuttons,\n\t\t\tcancelId: buttons.length - 1,\n\t\t\tcheckboxLabel: confirmation.checkbox?.label,\n\t\t\tcheckboxChecked: confirmation.checkbox?.checked,\n\t\t\ttargetWindowId: getActiveWindow().vscodeWindowId\n\t\t});\n\n\t\treturn { confirmed: response === 0, checkboxChecked };\n\t}\n\n\tinput(): never {\n\t\tthrow new Error('Unsupported'); // we have no native API for password dialogs in Electron\n\t}\n\n\tasync about(): Promise<void> {\n\t\tlet version = this.productService.version;\n\t\tif (this.productService.target) {\n\t\t\tversion = `${version} (${this.productService.target} setup)`;\n\t\t} else if (this.productService.darwinUniversalAssetId) {\n\t\t\tversion = `${version} (Universal)`;\n\t\t}\n\n\t\tconst osProps = await this.nativeHostService.getOSProperties();\n\n\t\tconst detailString = (useAgo: boolean): string => {\n\t\t\treturn localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },\n\t\t\t\t\"Version: {0}\\nCommit: {1}\\nDate: {2}\\nElectron: {3}\\nElectronBuildId: {4}\\nChromium: {5}\\nNode.js: {6}\\nV8: {7}\\nOS: {8}\",\n\t\t\t\tversion,\n\t\t\t\tthis.productService.commit || 'Unknown',\n\t\t\t\tthis.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',\n\t\t\t\tprocess.versions['electron'],\n\t\t\t\tprocess.versions['microsoft-build'],\n\t\t\t\tprocess.versions['chrome'],\n\t\t\t\tprocess.versions['node'],\n\t\t\t\tprocess.versions['v8'],\n\t\t\t\t`${osProps.type} ${osProps.arch} ${osProps.release}${isLinuxSnap ? ' snap' : ''}`\n\t\t\t);\n\t\t};\n\n\t\tconst detail = detailString(true);\n\t\tconst detailToCopy = detailString(false);\n\n\t\tconst { response } = await this.nativeHostService.showMessageBox({\n\t\t\ttype: 'info',\n\t\t\tmessage: this.productService.nameLong,\n\t\t\tdetail: `\\n${detail}`,\n\t\t\tbuttons: [\n\t\t\t\tlocalize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n\t\t\t\tlocalize('okButton', \"OK\")\n\t\t\t],\n\t\t\ttargetWindowId: getActiveWindow().vscodeWindowId\n\t\t});\n\n\t\tif (response === 0) {\n\t\t\tthis.clipboardService.writeText(detailToCopy);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,uBAAuB,eAAe,qBAAqB,SAAS,0BAA0B;AACvG,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAEzB,IAAM,sBAAN,cAAkC,sBAAsB;AAAA,EAE9D,YAC+B,YACO,mBACH,gBACE,kBACnC;AACD,UAAM;AALwB;AACO;AACH;AACE;AAAA,EAGrC;AAAA,EAzBD,OAgB+D;AAAA;AAAA;AAAA,EAW9D,MAAM,OAAU,QAAoD;AACnE,SAAK,WAAW,MAAM,wBAAwB,OAAO,OAAO;AAE5D,UAAM,UAAU,KAAK,iBAAiB,MAAM;AAE5C,UAAM,EAAE,UAAU,gBAAgB,IAAI,MAAM,KAAK,kBAAkB,eAAe;AAAA,MACjF,MAAM,KAAK,cAAc,OAAO,IAAI;AAAA,MACpC,OAAO,OAAO;AAAA,MACd,SAAS,OAAO;AAAA,MAChB,QAAQ,OAAO;AAAA,MACf;AAAA,MACA,UAAU,OAAO,eAAe,QAAQ,SAAS,IAAI;AAAA,MACrD,eAAe,OAAO,UAAU;AAAA,MAChC,iBAAiB,OAAO,UAAU;AAAA,MAClC,gBAAgB,gBAAgB,EAAE;AAAA,IACnC,CAAC;AAED,WAAO,KAAK,gBAAgB,QAAQ,UAAU,eAAe;AAAA,EAC9D;AAAA,EAEA,MAAM,QAAQ,cAA2D;AACxE,SAAK,WAAW,MAAM,yBAAyB,aAAa,OAAO;AAEnE,UAAM,UAAU,KAAK,uBAAuB,YAAY;AAExD,UAAM,EAAE,UAAU,gBAAgB,IAAI,MAAM,KAAK,kBAAkB,eAAe;AAAA,MACjF,MAAM,KAAK,cAAc,aAAa,IAAI,KAAK;AAAA,MAC/C,OAAO,aAAa;AAAA,MACpB,SAAS,aAAa;AAAA,MACtB,QAAQ,aAAa;AAAA,MACrB;AAAA,MACA,UAAU,QAAQ,SAAS;AAAA,MAC3B,eAAe,aAAa,UAAU;AAAA,MACtC,iBAAiB,aAAa,UAAU;AAAA,MACxC,gBAAgB,gBAAgB,EAAE;AAAA,IACnC,CAAC;AAED,WAAO,EAAE,WAAW,aAAa,GAAG,gBAAgB;AAAA,EACrD;AAAA,EAEA,QAAe;AACd,UAAM,IAAI,MAAM,aAAa;AAAA,EAC9B;AAAA,EAEA,MAAM,QAAuB;AAC5B,QAAI,UAAU,KAAK,eAAe;AAClC,QAAI,KAAK,eAAe,QAAQ;AAC/B,gBAAU,GAAG,OAAO,KAAK,KAAK,eAAe,MAAM;AAAA,IACpD,WAAW,KAAK,eAAe,wBAAwB;AACtD,gBAAU,GAAG,OAAO;AAAA,IACrB;AAEA,UAAM,UAAU,MAAM,KAAK,kBAAkB,gBAAgB;AAE7D,UAAM,eAAe,wBAAC,WAA4B;AACjD,aAAO;AAAA,QAAS,EAAE,KAAK,eAAe,SAAS,CAAC,+EAA+E,EAAE;AAAA,QAChI;AAAA,QACA;AAAA,QACA,KAAK,eAAe,UAAU;AAAA,QAC9B,KAAK,eAAe,OAAO,GAAG,KAAK,eAAe,IAAI,GAAG,SAAS,OAAO,QAAQ,IAAI,KAAK,KAAK,eAAe,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,KAAK;AAAA,QAC1I,QAAQ,SAAS,UAAU;AAAA,QAC3B,QAAQ,SAAS,iBAAiB;AAAA,QAClC,QAAQ,SAAS,QAAQ;AAAA,QACzB,QAAQ,SAAS,MAAM;AAAA,QACvB,QAAQ,SAAS,IAAI;AAAA,QACrB,GAAG,QAAQ,IAAI,IAAI,QAAQ,IAAI,IAAI,QAAQ,OAAO,GAAG,cAAc,UAAU,EAAE;AAAA,MAChF;AAAA,IACD,GAbqB;AAerB,UAAM,SAAS,aAAa,IAAI;AAChC,UAAM,eAAe,aAAa,KAAK;AAEvC,UAAM,EAAE,SAAS,IAAI,MAAM,KAAK,kBAAkB,eAAe;AAAA,MAChE,MAAM;AAAA,MACN,SAAS,KAAK,eAAe;AAAA,MAC7B,QAAQ;AAAA,EAAK,MAAM;AAAA,MACnB,SAAS;AAAA,QACR,SAAS,EAAE,KAAK,QAAQ,SAAS,CAAC,uBAAuB,EAAE,GAAG,QAAQ;AAAA,QACtE,SAAS,YAAY,IAAI;AAAA,MAC1B;AAAA,MACA,gBAAgB,gBAAgB,EAAE;AAAA,IACnC,CAAC;AAED,QAAI,aAAa,GAAG;AACnB,WAAK,iBAAiB,UAAU,YAAY;AAAA,IAC7C;AAAA,EACD;AACD;AAlGa,sBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GANU;",
  "names": []
}
