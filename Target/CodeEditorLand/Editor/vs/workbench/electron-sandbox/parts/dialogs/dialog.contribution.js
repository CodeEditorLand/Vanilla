var v=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=(s,t,r,i)=>{for(var e=i>1?void 0:i?h(t,r):t,l=s.length-1,n;l>=0;l--)(n=s[l])&&(e=(i?n(t,r,e):n(e))||e);return i&&e&&v(t,r,e),e},o=(s,t)=>(r,i)=>t(r,i,s);import{Lazy as p}from"../../../../../vs/base/common/lazy.js";import{Disposable as f}from"../../../../../vs/base/common/lifecycle.js";import{IClipboardService as D}from"../../../../../vs/platform/clipboard/common/clipboardService.js";import{IConfigurationService as d}from"../../../../../vs/platform/configuration/common/configuration.js";import{IDialogService as w}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{IInstantiationService as S}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{IKeybindingService as b}from"../../../../../vs/platform/keybinding/common/keybinding.js";import{ILayoutService as y}from"../../../../../vs/platform/layout/browser/layoutService.js";import{ILogService as C}from"../../../../../vs/platform/log/common/log.js";import{INativeHostService as L}from"../../../../../vs/platform/native/common/native.js";import{IProductService as k}from"../../../../../vs/platform/product/common/productService.js";import{BrowserDialogHandler as A}from"../../../../../vs/workbench/browser/parts/dialogs/dialogHandler.js";import{registerWorkbenchContribution2 as H,WorkbenchPhase as W}from"../../../../../vs/workbench/common/contributions.js";import"../../../../../vs/workbench/common/dialogs.js";import{NativeDialogHandler as P}from"../../../../../vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.js";import"../../../../../vs/workbench/services/dialogs/common/dialogService.js";let a=class extends f{constructor(r,i,e,l,n,u,m,c,I){super();this.configurationService=r;this.dialogService=i;this.browserImpl=new p(()=>new A(e,l,n,u,m,c)),this.nativeImpl=new p(()=>new P(e,I,m,c)),this.model=this.dialogService.model,this._register(this.model.onWillShowDialog(()=>{this.currentDialog||this.processDialogs()})),this.processDialogs()}static ID="workbench.contrib.dialogHandler";nativeImpl;browserImpl;model;currentDialog;async processDialogs(){for(;this.model.dialogs.length;){this.currentDialog=this.model.dialogs[0];let r;try{if(this.currentDialog.args.confirmArgs){const i=this.currentDialog.args.confirmArgs;r=this.useCustomDialog||i?.confirmation.custom?await this.browserImpl.value.confirm(i.confirmation):await this.nativeImpl.value.confirm(i.confirmation)}else if(this.currentDialog.args.inputArgs){const i=this.currentDialog.args.inputArgs;r=await this.browserImpl.value.input(i.input)}else if(this.currentDialog.args.promptArgs){const i=this.currentDialog.args.promptArgs;r=this.useCustomDialog||i?.prompt.custom?await this.browserImpl.value.prompt(i.prompt):await this.nativeImpl.value.prompt(i.prompt)}else this.useCustomDialog?await this.browserImpl.value.about():await this.nativeImpl.value.about()}catch(i){r=i}this.currentDialog.close(r),this.currentDialog=void 0}}get useCustomDialog(){return this.configurationService.getValue("window.dialogStyle")==="custom"}};a=g([o(0,d),o(1,w),o(2,C),o(3,y),o(4,b),o(5,S),o(6,k),o(7,D),o(8,L)],a),H(a.ID,a,W.BlockStartup);export{a as DialogHandlerContribution};
