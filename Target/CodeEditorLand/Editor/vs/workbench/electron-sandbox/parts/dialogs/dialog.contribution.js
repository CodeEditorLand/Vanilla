var I=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=(s,t,e,i)=>{for(var r=i>1?void 0:i?h(t,e):t,l=s.length-1,n;l>=0;l--)(n=s[l])&&(r=(i?n(t,e,r):n(r))||r);return i&&r&&I(t,e,r),r},o=(s,t)=>(e,i)=>t(e,i,s);import{Lazy as p}from"../../../../base/common/lazy.js";import{Disposable as f}from"../../../../base/common/lifecycle.js";import{IClipboardService as d}from"../../../../platform/clipboard/common/clipboardService.js";import{IConfigurationService as D}from"../../../../platform/configuration/common/configuration.js";import{IDialogService as w}from"../../../../platform/dialogs/common/dialogs.js";import{IInstantiationService as S}from"../../../../platform/instantiation/common/instantiation.js";import{IKeybindingService as b}from"../../../../platform/keybinding/common/keybinding.js";import{ILayoutService as y}from"../../../../platform/layout/browser/layoutService.js";import{ILogService as C}from"../../../../platform/log/common/log.js";import{INativeHostService as L}from"../../../../platform/native/common/native.js";import{IProductService as k}from"../../../../platform/product/common/productService.js";import{BrowserDialogHandler as A}from"../../../browser/parts/dialogs/dialogHandler.js";import{WorkbenchPhase as H,registerWorkbenchContribution2 as W}from"../../../common/contributions.js";import{NativeDialogHandler as P}from"./dialogHandler.js";let a=class extends f{constructor(e,i,r,l,n,u,m,c,v){super();this.configurationService=e;this.dialogService=i;this.browserImpl=new p(()=>new A(r,l,n,u,m,c)),this.nativeImpl=new p(()=>new P(r,v,m,c)),this.model=this.dialogService.model,this._register(this.model.onWillShowDialog(()=>{this.currentDialog||this.processDialogs()})),this.processDialogs()}static ID="workbench.contrib.dialogHandler";nativeImpl;browserImpl;model;currentDialog;async processDialogs(){for(;this.model.dialogs.length;){this.currentDialog=this.model.dialogs[0];let e;try{if(this.currentDialog.args.confirmArgs){const i=this.currentDialog.args.confirmArgs;e=this.useCustomDialog||i?.confirmation.custom?await this.browserImpl.value.confirm(i.confirmation):await this.nativeImpl.value.confirm(i.confirmation)}else if(this.currentDialog.args.inputArgs){const i=this.currentDialog.args.inputArgs;e=await this.browserImpl.value.input(i.input)}else if(this.currentDialog.args.promptArgs){const i=this.currentDialog.args.promptArgs;e=this.useCustomDialog||i?.prompt.custom?await this.browserImpl.value.prompt(i.prompt):await this.nativeImpl.value.prompt(i.prompt)}else this.useCustomDialog?await this.browserImpl.value.about():await this.nativeImpl.value.about()}catch(i){e=i}this.currentDialog.close(e),this.currentDialog=void 0}}get useCustomDialog(){return this.configurationService.getValue("window.dialogStyle")==="custom"}};a=g([o(0,D),o(1,w),o(2,C),o(3,y),o(4,b),o(5,S),o(6,k),o(7,d),o(8,L)],a),W(a.ID,a,H.BlockStartup);export{a as DialogHandlerContribution};
