import { Event } from '../../../base/common/event.js';
import { ITestInstantiationService, TestEncodingOracle, TestFileDialogService, TestFilesConfigurationService, TestFileService, TestLifecycleService, TestTextFileService } from '../browser/workbenchTestServices.js';
import { ISharedProcessService } from '../../../platform/ipc/electron-sandbox/services.js';
import { INativeHostService, INativeHostOptions, IOSProperties, IOSStatistics } from '../../../platform/native/common/native.js';
import { VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../base/common/buffer.js';
import { DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';
import { URI } from '../../../base/common/uri.js';
import { INativeOpenDialogOptions } from '../../../platform/dialogs/common/dialogs.js';
import { IPartsSplash } from '../../../platform/theme/common/themeService.js';
import { IOpenedMainWindow, IOpenEmptyWindowOptions, IWindowOpenable, IOpenWindowOptions, IColorScheme, IRectangle, IPoint } from '../../../platform/window/common/window.js';
import { TestConfigurationService } from '../../../platform/configuration/test/common/testConfigurationService.js';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';
import { IEnvironmentService, INativeEnvironmentService } from '../../../platform/environment/common/environment.js';
import { IFileService } from '../../../platform/files/common/files.js';
import { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';
import { IEditorService } from '../../services/editor/common/editorService.js';
import { IPathService } from '../../services/path/common/pathService.js';
import { ITextEditorService } from '../../services/textfile/common/textEditorService.js';
import { ITextFileService } from '../../services/textfile/common/textfiles.js';
import { AbstractNativeExtensionTipsService } from '../../../platform/extensionManagement/common/extensionTipsService.js';
import { IExtensionManagementService } from '../../../platform/extensionManagement/common/extensionManagement.js';
import { IExtensionRecommendationNotificationService } from '../../../platform/extensionRecommendations/common/extensionRecommendations.js';
import { IProductService } from '../../../platform/product/common/productService.js';
import { IStorageService } from '../../../platform/storage/common/storage.js';
import { ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';
import { ModelService } from '../../../editor/common/services/modelService.js';
import { IWorkingCopyService } from '../../services/workingCopy/common/workingCopyService.js';
import { TestContextService } from '../common/workbenchTestServices.js';
import { NativeTextFileService } from '../../services/textfile/electron-sandbox/nativeTextFileService.js';
import { IWorkingCopyIdentifier } from '../../services/workingCopy/common/workingCopy.js';
import { NativeWorkingCopyBackupService } from '../../services/workingCopy/electron-sandbox/workingCopyBackupService.js';
import { CancellationToken } from '../../../base/common/cancellation.js';
import { AuthInfo, Credentials } from '../../../platform/request/common/request.js';
export declare class TestSharedProcessService implements ISharedProcessService {
    readonly _serviceBrand: undefined;
    createRawConnection(): never;
    getChannel(channelName: string): any;
    registerChannel(channelName: string, channel: any): void;
    notifyRestored(): void;
}
export declare class TestNativeHostService implements INativeHostService {
    readonly _serviceBrand: undefined;
    readonly windowId = -1;
    onDidOpenMainWindow: Event<number>;
    onDidMaximizeWindow: Event<number>;
    onDidUnmaximizeWindow: Event<number>;
    onDidFocusMainWindow: Event<number>;
    onDidBlurMainWindow: Event<number>;
    onDidFocusMainOrAuxiliaryWindow: Event<number>;
    onDidBlurMainOrAuxiliaryWindow: Event<number>;
    onDidResumeOS: Event<unknown>;
    onDidChangeColorScheme: Event<any>;
    onDidChangePassword: Event<any>;
    onDidTriggerWindowSystemContextMenu: Event<{
        windowId: number;
        x: number;
        y: number;
    }>;
    onDidChangeWindowFullScreen: Event<any>;
    onDidChangeDisplay: Event<any>;
    windowCount: Promise<number>;
    getWindowCount(): Promise<number>;
    getWindows(): Promise<IOpenedMainWindow[]>;
    getActiveWindowId(): Promise<number | undefined>;
    getActiveWindowPosition(): Promise<IRectangle | undefined>;
    openWindow(options?: IOpenEmptyWindowOptions): Promise<void>;
    openWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;
    toggleFullScreen(): Promise<void>;
    handleTitleDoubleClick(): Promise<void>;
    isMaximized(): Promise<boolean>;
    isFullScreen(): Promise<boolean>;
    maximizeWindow(): Promise<void>;
    unmaximizeWindow(): Promise<void>;
    minimizeWindow(): Promise<void>;
    moveWindowTop(options?: INativeHostOptions): Promise<void>;
    getCursorScreenPoint(): Promise<{
        readonly point: IPoint;
        readonly display: IRectangle;
    }>;
    positionWindow(position: IRectangle, options?: INativeHostOptions): Promise<void>;
    updateWindowControls(options: {
        height?: number;
        backgroundColor?: string;
        foregroundColor?: string;
    }): Promise<void>;
    setMinimumSize(width: number | undefined, height: number | undefined): Promise<void>;
    saveWindowSplash(value: IPartsSplash): Promise<void>;
    focusWindow(options?: INativeHostOptions): Promise<void>;
    showMessageBox(options: Electron.MessageBoxOptions): Promise<Electron.MessageBoxReturnValue>;
    showSaveDialog(options: Electron.SaveDialogOptions): Promise<Electron.SaveDialogReturnValue>;
    showOpenDialog(options: Electron.OpenDialogOptions): Promise<Electron.OpenDialogReturnValue>;
    pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    showItemInFolder(path: string): Promise<void>;
    setRepresentedFilename(path: string): Promise<void>;
    isAdmin(): Promise<boolean>;
    writeElevated(source: URI, target: URI): Promise<void>;
    isRunningUnderARM64Translation(): Promise<boolean>;
    getOSProperties(): Promise<IOSProperties>;
    getOSStatistics(): Promise<IOSStatistics>;
    getOSVirtualMachineHint(): Promise<number>;
    getOSColorScheme(): Promise<IColorScheme>;
    hasWSLFeatureInstalled(): Promise<boolean>;
    getProcessId(): Promise<number>;
    killProcess(): Promise<void>;
    setDocumentEdited(edited: boolean): Promise<void>;
    openExternal(url: string, defaultApplication?: string): Promise<boolean>;
    updateTouchBar(): Promise<void>;
    moveItemToTrash(): Promise<void>;
    newWindowTab(): Promise<void>;
    showPreviousWindowTab(): Promise<void>;
    showNextWindowTab(): Promise<void>;
    moveWindowTabToNewWindow(): Promise<void>;
    mergeAllWindowTabs(): Promise<void>;
    toggleWindowTabsBar(): Promise<void>;
    installShellCommand(): Promise<void>;
    uninstallShellCommand(): Promise<void>;
    notifyReady(): Promise<void>;
    relaunch(options?: {
        addArgs?: string[] | undefined;
        removeArgs?: string[] | undefined;
    } | undefined): Promise<void>;
    reload(): Promise<void>;
    closeWindow(): Promise<void>;
    quit(): Promise<void>;
    exit(code: number): Promise<void>;
    openDevTools(): Promise<void>;
    toggleDevTools(): Promise<void>;
    resolveProxy(url: string): Promise<string | undefined>;
    lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;
    lookupKerberosAuthorization(url: string): Promise<string | undefined>;
    loadCertificates(): Promise<string[]>;
    findFreePort(startPort: number, giveUpAfter: number, timeout: number, stride?: number): Promise<number>;
    readClipboardText(type?: 'selection' | 'clipboard' | undefined): Promise<string>;
    writeClipboardText(text: string, type?: 'selection' | 'clipboard' | undefined): Promise<void>;
    readClipboardFindText(): Promise<string>;
    writeClipboardFindText(text: string): Promise<void>;
    writeClipboardBuffer(format: string, buffer: VSBuffer, type?: 'selection' | 'clipboard' | undefined): Promise<void>;
    readClipboardBuffer(format: string): Promise<VSBuffer>;
    hasClipboard(format: string, type?: 'selection' | 'clipboard' | undefined): Promise<boolean>;
    windowsGetStringRegKey(hive: 'HKEY_CURRENT_USER' | 'HKEY_LOCAL_MACHINE' | 'HKEY_CLASSES_ROOT' | 'HKEY_USERS' | 'HKEY_CURRENT_CONFIG', path: string, name: string): Promise<string | undefined>;
    profileRenderer(): Promise<any>;
}
export declare class TestExtensionTipsService extends AbstractNativeExtensionTipsService {
    constructor(environmentService: INativeEnvironmentService, telemetryService: ITelemetryService, extensionManagementService: IExtensionManagementService, storageService: IStorageService, nativeHostService: INativeHostService, extensionRecommendationNotificationService: IExtensionRecommendationNotificationService, fileService: IFileService, productService: IProductService);
}
export declare function workbenchInstantiationService(overrides?: {
    environmentService?: (instantiationService: IInstantiationService) => IEnvironmentService;
    fileService?: (instantiationService: IInstantiationService) => IFileService;
    configurationService?: (instantiationService: IInstantiationService) => TestConfigurationService;
    textFileService?: (instantiationService: IInstantiationService) => ITextFileService;
    pathService?: (instantiationService: IInstantiationService) => IPathService;
    editorService?: (instantiationService: IInstantiationService) => IEditorService;
    contextKeyService?: (instantiationService: IInstantiationService) => IContextKeyService;
    textEditorService?: (instantiationService: IInstantiationService) => ITextEditorService;
}, disposables?: DisposableStore): ITestInstantiationService;
export declare class TestServiceAccessor {
    lifecycleService: TestLifecycleService;
    textFileService: TestTextFileService;
    filesConfigurationService: TestFilesConfigurationService;
    contextService: TestContextService;
    modelService: ModelService;
    fileService: TestFileService;
    nativeHostService: TestNativeHostService;
    fileDialogService: TestFileDialogService;
    workingCopyBackupService: TestNativeWorkingCopyBackupService;
    workingCopyService: IWorkingCopyService;
    editorService: IEditorService;
    constructor(lifecycleService: TestLifecycleService, textFileService: TestTextFileService, filesConfigurationService: TestFilesConfigurationService, contextService: TestContextService, modelService: ModelService, fileService: TestFileService, nativeHostService: TestNativeHostService, fileDialogService: TestFileDialogService, workingCopyBackupService: TestNativeWorkingCopyBackupService, workingCopyService: IWorkingCopyService, editorService: IEditorService);
}
export declare class TestNativeTextFileServiceWithEncodingOverrides extends NativeTextFileService {
    private _testEncoding;
    get encoding(): TestEncodingOracle;
}
export declare class TestNativeWorkingCopyBackupService extends NativeWorkingCopyBackupService implements IDisposable {
    private backupResourceJoiners;
    private discardBackupJoiners;
    discardedBackups: IWorkingCopyIdentifier[];
    discardedAllBackups: boolean;
    private pendingBackupsArr;
    constructor();
    testGetFileService(): IFileService;
    waitForAllBackups(): Promise<void>;
    joinBackupResource(): Promise<void>;
    backup(identifier: IWorkingCopyIdentifier, content?: VSBufferReadableStream | VSBufferReadable, versionId?: number, meta?: any, token?: CancellationToken): Promise<void>;
    joinDiscardBackup(): Promise<void>;
    discardBackup(identifier: IWorkingCopyIdentifier): Promise<void>;
    discardBackups(filter?: {
        except: IWorkingCopyIdentifier[];
    }): Promise<void>;
    getBackupContents(identifier: IWorkingCopyIdentifier): Promise<string>;
}
