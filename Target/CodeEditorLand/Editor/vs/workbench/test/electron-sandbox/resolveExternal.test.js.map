{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/electron-sandbox/resolveExternal.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../base/test/common/utils.js';\nimport { NativeWindow } from '../../electron-sandbox/window.js';\nimport { ITunnelService, RemoteTunnel } from '../../../platform/tunnel/common/tunnel.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TestInstantiationService } from '../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IAddressProvider } from '../../../platform/remote/common/remoteAgentConnection.js';\nimport { workbenchInstantiationService } from './workbenchTestServices.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\n\ntype PortMap = Record<number, number>;\n\nclass TunnelMock implements Partial<ITunnelService> {\n\tprivate assignedPorts: PortMap = {};\n\tprivate expectedDispose = false;\n\n\treset(ports: PortMap) {\n\t\tthis.assignedPorts = ports;\n\t}\n\n\texpectDispose() {\n\t\tthis.expectedDispose = true;\n\t}\n\n\tgetExistingTunnel(): Promise<string | RemoteTunnel | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\topenTunnel(_addressProvider: IAddressProvider | undefined, _host: string | undefined, port: number): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tif (!this.assignedPorts[port]) {\n\t\t\treturn Promise.reject(new Error('Unexpected tunnel request'));\n\t\t}\n\t\tconst res: RemoteTunnel = {\n\t\t\tlocalAddress: `localhost:${this.assignedPorts[port]}`,\n\t\t\ttunnelRemoteHost: '4.3.2.1',\n\t\t\ttunnelRemotePort: this.assignedPorts[port],\n\t\t\tprivacy: '',\n\t\t\tdispose: () => {\n\t\t\t\tassert(this.expectedDispose, 'Unexpected dispose');\n\t\t\t\tthis.expectedDispose = false;\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t};\n\t\tdelete this.assignedPorts[port];\n\t\treturn Promise.resolve(res);\n\t}\n\n\tvalidate() {\n\t\ttry {\n\t\t\tassert(Object.keys(this.assignedPorts).length === 0, 'Expected tunnel to be used');\n\t\t\tassert(!this.expectedDispose, 'Expected dispose to be called');\n\t\t} finally {\n\t\t\tthis.expectedDispose = false;\n\t\t}\n\t}\n}\n\nclass TestNativeWindow extends NativeWindow {\n\tprotected override create(): void { }\n\tprotected override registerListeners(): void { }\n\tprotected override enableMultiWindowAwareTimeout(): void { }\n}\n\nsuite.skip('NativeWindow:resolveExternal', () => {\n\tconst disposables = new DisposableStore();\n\tconst tunnelMock = new TunnelMock();\n\tlet window: TestNativeWindow;\n\n\tsetup(() => {\n\t\tconst instantiationService: TestInstantiationService = <TestInstantiationService>workbenchInstantiationService(undefined, disposables);\n\t\tinstantiationService.stub(ITunnelService, tunnelMock);\n\t\twindow = disposables.add(instantiationService.createInstance(TestNativeWindow));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function doTest(uri: string, ports: PortMap = {}, expectedUri?: string) {\n\t\ttunnelMock.reset(ports);\n\t\tconst res = await window.resolveExternalUri(URI.parse(uri), {\n\t\t\tallowTunneling: true,\n\t\t\topenExternal: true\n\t\t});\n\t\tassert.strictEqual(!expectedUri, !res, `Expected URI ${expectedUri} but got ${res}`);\n\t\tif (expectedUri && res) {\n\t\t\tassert.strictEqual(res.resolved.toString(), URI.parse(expectedUri).toString());\n\t\t}\n\t\ttunnelMock.validate();\n\t}\n\n\ttest('invalid', async () => {\n\t\tawait doTest('file:///foo.bar/baz');\n\t\tawait doTest('http://foo.bar/path');\n\t});\n\ttest('simple', async () => {\n\t\tawait doTest('http://localhost:1234/path', { 1234: 1234 }, 'http://localhost:1234/path');\n\t});\n\ttest('all interfaces', async () => {\n\t\tawait doTest('http://0.0.0.0:1234/path', { 1234: 1234 }, 'http://localhost:1234/path');\n\t});\n\ttest('changed port', async () => {\n\t\tawait doTest('http://localhost:1234/path', { 1234: 1235 }, 'http://localhost:1235/path');\n\t});\n\ttest('query', async () => {\n\t\tawait doTest('http://foo.bar/path?a=b&c=http%3a%2f%2flocalhost%3a4455', { 4455: 4455 }, 'http://foo.bar/path?a=b&c=http%3a%2f%2flocalhost%3a4455');\n\t});\n\ttest('query with different port', async () => {\n\t\ttunnelMock.expectDispose();\n\t\tawait doTest('http://foo.bar/path?a=b&c=http%3a%2f%2flocalhost%3a4455', { 4455: 4567 });\n\t});\n\ttest('both url and query', async () => {\n\t\tawait doTest('http://localhost:1234/path?a=b&c=http%3a%2f%2flocalhost%3a4455',\n\t\t\t{ 1234: 4321, 4455: 4455 },\n\t\t\t'http://localhost:4321/path?a=b&c=http%3a%2f%2flocalhost%3a4455');\n\t});\n\ttest('both url and query, query rejected', async () => {\n\t\ttunnelMock.expectDispose();\n\t\tawait doTest('http://localhost:1234/path?a=b&c=http%3a%2f%2flocalhost%3a4455',\n\t\t\t{ 1234: 4321, 4455: 5544 },\n\t\t\t'http://localhost:4321/path?a=b&c=http%3a%2f%2flocalhost%3a4455');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
