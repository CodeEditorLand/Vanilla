{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/browser/quickAccess.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { IQuickAccessRegistry, Extensions, IQuickAccessProvider, QuickAccessRegistry } from '../../../platform/quickinput/common/quickAccess.js';\nimport { IQuickPick, IQuickPickItem, IQuickInputService } from '../../../platform/quickinput/common/quickInput.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { TestServiceAccessor, workbenchInstantiationService, createEditorPart } from './workbenchTestServices.js';\nimport { DisposableStore, toDisposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { timeout } from '../../../base/common/async.js';\nimport { PickerQuickAccessProvider, FastAndSlowPicks } from '../../../platform/quickinput/browser/pickerQuickAccess.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IEditorGroupsService } from '../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../services/editor/common/editorService.js';\nimport { EditorService } from '../../services/editor/browser/editorService.js';\nimport { PickerEditorState } from '../../browser/quickaccess.js';\nimport { EditorsOrder } from '../../common/editor.js';\nimport { Range } from '../../../editor/common/core/range.js';\nimport { TestInstantiationService } from '../../../platform/instantiation/test/common/instantiationServiceMock.js';\n\nsuite('QuickAccess', () => {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tlet providerDefaultCalled = false;\n\tlet providerDefaultCanceled = false;\n\tlet providerDefaultDisposed = false;\n\n\tlet provider1Called = false;\n\tlet provider1Canceled = false;\n\tlet provider1Disposed = false;\n\n\tlet provider2Called = false;\n\tlet provider2Canceled = false;\n\tlet provider2Disposed = false;\n\n\tlet provider3Called = false;\n\tlet provider3Canceled = false;\n\tlet provider3Disposed = false;\n\n\tclass TestProviderDefault implements IQuickAccessProvider {\n\n\t\tconstructor(@IQuickInputService private readonly quickInputService: IQuickInputService, disposables: DisposableStore) { }\n\n\t\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable {\n\t\t\tassert.ok(picker);\n\t\t\tproviderDefaultCalled = true;\n\t\t\ttoken.onCancellationRequested(() => providerDefaultCanceled = true);\n\n\t\t\t// bring up provider #3\n\t\t\tsetTimeout(() => this.quickInputService.quickAccess.show(providerDescriptor3.prefix));\n\n\t\t\treturn toDisposable(() => providerDefaultDisposed = true);\n\t\t}\n\t}\n\n\tclass TestProvider1 implements IQuickAccessProvider {\n\t\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable {\n\t\t\tassert.ok(picker);\n\t\t\tprovider1Called = true;\n\t\t\ttoken.onCancellationRequested(() => provider1Canceled = true);\n\n\t\t\treturn toDisposable(() => provider1Disposed = true);\n\t\t}\n\t}\n\n\tclass TestProvider2 implements IQuickAccessProvider {\n\t\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable {\n\t\t\tassert.ok(picker);\n\t\t\tprovider2Called = true;\n\t\t\ttoken.onCancellationRequested(() => provider2Canceled = true);\n\n\t\t\treturn toDisposable(() => provider2Disposed = true);\n\t\t}\n\t}\n\n\tclass TestProvider3 implements IQuickAccessProvider {\n\t\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable {\n\t\t\tassert.ok(picker);\n\t\t\tprovider3Called = true;\n\t\t\ttoken.onCancellationRequested(() => provider3Canceled = true);\n\n\t\t\t// hide without picking\n\t\t\tsetTimeout(() => picker.hide());\n\n\t\t\treturn toDisposable(() => provider3Disposed = true);\n\t\t}\n\t}\n\n\tconst providerDescriptorDefault = { ctor: TestProviderDefault, prefix: '', helpEntries: [] };\n\tconst providerDescriptor1 = { ctor: TestProvider1, prefix: 'test', helpEntries: [] };\n\tconst providerDescriptor2 = { ctor: TestProvider2, prefix: 'test something', helpEntries: [] };\n\tconst providerDescriptor3 = { ctor: TestProvider3, prefix: 'changed', helpEntries: [] };\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\ttest('registry', () => {\n\t\tconst registry = (Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess));\n\t\tconst restore = (registry as QuickAccessRegistry).clear();\n\n\t\tassert.ok(!registry.getQuickAccessProvider('test'));\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(registry.registerQuickAccessProvider(providerDescriptorDefault));\n\t\tassert(registry.getQuickAccessProvider('') === providerDescriptorDefault);\n\t\tassert(registry.getQuickAccessProvider('test') === providerDescriptorDefault);\n\n\t\tconst disposable = disposables.add(registry.registerQuickAccessProvider(providerDescriptor1));\n\t\tassert(registry.getQuickAccessProvider('test') === providerDescriptor1);\n\n\t\tconst providers = registry.getQuickAccessProviders();\n\t\tassert(providers.some(provider => provider.prefix === 'test'));\n\n\t\tdisposable.dispose();\n\t\tassert(registry.getQuickAccessProvider('test') === providerDescriptorDefault);\n\n\t\tdisposables.dispose();\n\t\tassert.ok(!registry.getQuickAccessProvider('test'));\n\n\t\trestore();\n\t});\n\n\ttest('provider', async () => {\n\t\tconst registry = (Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess));\n\t\tconst restore = (registry as QuickAccessRegistry).clear();\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(registry.registerQuickAccessProvider(providerDescriptorDefault));\n\t\tdisposables.add(registry.registerQuickAccessProvider(providerDescriptor1));\n\t\tdisposables.add(registry.registerQuickAccessProvider(providerDescriptor2));\n\t\tdisposables.add(registry.registerQuickAccessProvider(providerDescriptor3));\n\n\t\taccessor.quickInputService.quickAccess.show('test');\n\t\tassert.strictEqual(providerDefaultCalled, false);\n\t\tassert.strictEqual(provider1Called, true);\n\t\tassert.strictEqual(provider2Called, false);\n\t\tassert.strictEqual(provider3Called, false);\n\t\tassert.strictEqual(providerDefaultCanceled, false);\n\t\tassert.strictEqual(provider1Canceled, false);\n\t\tassert.strictEqual(provider2Canceled, false);\n\t\tassert.strictEqual(provider3Canceled, false);\n\t\tassert.strictEqual(providerDefaultDisposed, false);\n\t\tassert.strictEqual(provider1Disposed, false);\n\t\tassert.strictEqual(provider2Disposed, false);\n\t\tassert.strictEqual(provider3Disposed, false);\n\t\tprovider1Called = false;\n\n\t\taccessor.quickInputService.quickAccess.show('test something');\n\t\tassert.strictEqual(providerDefaultCalled, false);\n\t\tassert.strictEqual(provider1Called, false);\n\t\tassert.strictEqual(provider2Called, true);\n\t\tassert.strictEqual(provider3Called, false);\n\t\tassert.strictEqual(providerDefaultCanceled, false);\n\t\tassert.strictEqual(provider1Canceled, true);\n\t\tassert.strictEqual(provider2Canceled, false);\n\t\tassert.strictEqual(provider3Canceled, false);\n\t\tassert.strictEqual(providerDefaultDisposed, false);\n\t\tassert.strictEqual(provider1Disposed, true);\n\t\tassert.strictEqual(provider2Disposed, false);\n\t\tassert.strictEqual(provider3Disposed, false);\n\t\tprovider2Called = false;\n\t\tprovider1Canceled = false;\n\t\tprovider1Disposed = false;\n\n\t\taccessor.quickInputService.quickAccess.show('usedefault');\n\t\tassert.strictEqual(providerDefaultCalled, true);\n\t\tassert.strictEqual(provider1Called, false);\n\t\tassert.strictEqual(provider2Called, false);\n\t\tassert.strictEqual(provider3Called, false);\n\t\tassert.strictEqual(providerDefaultCanceled, false);\n\t\tassert.strictEqual(provider1Canceled, false);\n\t\tassert.strictEqual(provider2Canceled, true);\n\t\tassert.strictEqual(provider3Canceled, false);\n\t\tassert.strictEqual(providerDefaultDisposed, false);\n\t\tassert.strictEqual(provider1Disposed, false);\n\t\tassert.strictEqual(provider2Disposed, true);\n\t\tassert.strictEqual(provider3Disposed, false);\n\n\t\tawait timeout(1);\n\n\t\tassert.strictEqual(providerDefaultCanceled, true);\n\t\tassert.strictEqual(providerDefaultDisposed, true);\n\t\tassert.strictEqual(provider3Called, true);\n\n\t\tawait timeout(1);\n\n\t\tassert.strictEqual(provider3Canceled, true);\n\t\tassert.strictEqual(provider3Disposed, true);\n\n\t\tdisposables.dispose();\n\n\t\trestore();\n\t});\n\n\tlet fastProviderCalled = false;\n\tlet slowProviderCalled = false;\n\tlet fastAndSlowProviderCalled = false;\n\n\tlet slowProviderCanceled = false;\n\tlet fastAndSlowProviderCanceled = false;\n\n\tclass FastTestQuickPickProvider extends PickerQuickAccessProvider<IQuickPickItem> {\n\n\t\tconstructor() {\n\t\t\tsuper('fast');\n\t\t}\n\n\t\tprotected _getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Array<IQuickPickItem> {\n\t\t\tfastProviderCalled = true;\n\n\t\t\treturn [{ label: 'Fast Pick' }];\n\t\t}\n\t}\n\n\tclass SlowTestQuickPickProvider extends PickerQuickAccessProvider<IQuickPickItem> {\n\n\t\tconstructor() {\n\t\t\tsuper('slow');\n\t\t}\n\n\t\tprotected async _getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Promise<Array<IQuickPickItem>> {\n\t\t\tslowProviderCalled = true;\n\n\t\t\tawait timeout(1);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tslowProviderCanceled = true;\n\t\t\t}\n\n\t\t\treturn [{ label: 'Slow Pick' }];\n\t\t}\n\t}\n\n\tclass FastAndSlowTestQuickPickProvider extends PickerQuickAccessProvider<IQuickPickItem> {\n\n\t\tconstructor() {\n\t\t\tsuper('bothFastAndSlow');\n\t\t}\n\n\t\tprotected _getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): FastAndSlowPicks<IQuickPickItem> {\n\t\t\tfastAndSlowProviderCalled = true;\n\n\t\t\treturn {\n\t\t\t\tpicks: [{ label: 'Fast Pick' }],\n\t\t\t\tadditionalPicks: (async () => {\n\t\t\t\t\tawait timeout(1);\n\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\tfastAndSlowProviderCanceled = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [{ label: 'Slow Pick' }];\n\t\t\t\t})()\n\t\t\t};\n\t\t}\n\t}\n\n\tconst fastProviderDescriptor = { ctor: FastTestQuickPickProvider, prefix: 'fast', helpEntries: [] };\n\tconst slowProviderDescriptor = { ctor: SlowTestQuickPickProvider, prefix: 'slow', helpEntries: [] };\n\tconst fastAndSlowProviderDescriptor = { ctor: FastAndSlowTestQuickPickProvider, prefix: 'bothFastAndSlow', helpEntries: [] };\n\n\ttest('quick pick access - show()', async () => {\n\t\tconst registry = (Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess));\n\t\tconst restore = (registry as QuickAccessRegistry).clear();\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(registry.registerQuickAccessProvider(fastProviderDescriptor));\n\t\tdisposables.add(registry.registerQuickAccessProvider(slowProviderDescriptor));\n\t\tdisposables.add(registry.registerQuickAccessProvider(fastAndSlowProviderDescriptor));\n\n\t\taccessor.quickInputService.quickAccess.show('fast');\n\t\tassert.strictEqual(fastProviderCalled, true);\n\t\tassert.strictEqual(slowProviderCalled, false);\n\t\tassert.strictEqual(fastAndSlowProviderCalled, false);\n\t\tfastProviderCalled = false;\n\n\t\taccessor.quickInputService.quickAccess.show('slow');\n\t\tawait timeout(2);\n\n\t\tassert.strictEqual(fastProviderCalled, false);\n\t\tassert.strictEqual(slowProviderCalled, true);\n\t\tassert.strictEqual(slowProviderCanceled, false);\n\t\tassert.strictEqual(fastAndSlowProviderCalled, false);\n\t\tslowProviderCalled = false;\n\n\t\taccessor.quickInputService.quickAccess.show('bothFastAndSlow');\n\t\tawait timeout(2);\n\n\t\tassert.strictEqual(fastProviderCalled, false);\n\t\tassert.strictEqual(slowProviderCalled, false);\n\t\tassert.strictEqual(fastAndSlowProviderCalled, true);\n\t\tassert.strictEqual(fastAndSlowProviderCanceled, false);\n\t\tfastAndSlowProviderCalled = false;\n\n\t\taccessor.quickInputService.quickAccess.show('slow');\n\t\taccessor.quickInputService.quickAccess.show('bothFastAndSlow');\n\t\taccessor.quickInputService.quickAccess.show('fast');\n\n\t\tassert.strictEqual(fastProviderCalled, true);\n\t\tassert.strictEqual(slowProviderCalled, true);\n\t\tassert.strictEqual(fastAndSlowProviderCalled, true);\n\n\t\tawait timeout(2);\n\t\tassert.strictEqual(slowProviderCanceled, true);\n\t\tassert.strictEqual(fastAndSlowProviderCanceled, true);\n\n\t\tdisposables.dispose();\n\n\t\trestore();\n\t});\n\n\ttest('quick pick access - pick()', async () => {\n\t\tconst registry = (Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess));\n\t\tconst restore = (registry as QuickAccessRegistry).clear();\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(registry.registerQuickAccessProvider(fastProviderDescriptor));\n\n\t\tconst result = accessor.quickInputService.quickAccess.pick('fast');\n\t\tassert.strictEqual(fastProviderCalled, true);\n\t\tassert.ok(result instanceof Promise);\n\n\t\tdisposables.dispose();\n\n\t\trestore();\n\t});\n\n\ttest('PickerEditorState can properly restore editors', async () => {\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst editorViewState = disposables.add(instantiationService.createInstance(PickerEditorState));\n\t\tdisposables.add(part);\n\t\tdisposables.add(editorService);\n\n\t\tconst input1 = {\n\t\t\tresource: URI.parse('foo://bar1'),\n\t\t\toptions: {\n\t\t\t\tpinned: true, preserveFocus: true, selection: new Range(1, 0, 1, 3)\n\t\t\t}\n\t\t};\n\t\tconst input2 = {\n\t\t\tresource: URI.parse('foo://bar2'),\n\t\t\toptions: {\n\t\t\t\tpinned: true, selection: new Range(1, 0, 1, 3)\n\t\t\t}\n\t\t};\n\t\tconst input3 = {\n\t\t\tresource: URI.parse('foo://bar3')\n\t\t};\n\t\tconst input4 = {\n\t\t\tresource: URI.parse('foo://bar4')\n\t\t};\n\n\t\tconst editor = await editorService.openEditor(input1);\n\t\tassert.strictEqual(editor, editorService.activeEditorPane);\n\t\teditorViewState.set();\n\t\tawait editorService.openEditor(input2);\n\t\tawait editorViewState.openTransientEditor(input3);\n\t\tawait editorViewState.openTransientEditor(input4);\n\t\tawait editorViewState.restore();\n\n\t\tassert.strictEqual(part.activeGroup.activeEditor?.resource, input1.resource);\n\t\tassert.deepStrictEqual(part.activeGroup.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE).map(e => e.resource), [input1.resource, input2.resource]);\n\t\tif (part.activeGroup.activeEditorPane?.getSelection) {\n\t\t\tassert.deepStrictEqual(part.activeGroup.activeEditorPane?.getSelection(), input1.options.selection);\n\t\t}\n\t\tawait part.activeGroup.closeAllEditors();\n\t});\n});\n"],
  "mappings": "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",
  "names": ["disposables"]
}
