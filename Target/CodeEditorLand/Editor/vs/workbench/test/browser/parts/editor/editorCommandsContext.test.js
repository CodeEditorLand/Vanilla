import t from"assert";import"../../../../../platform/instantiation/common/instantiation.js";import{workbenchInstantiationService as q,TestServiceAccessor as C,registerTestEditor as G,registerTestFileEditor as h,registerTestResourceEditor as T,TestFileEditorInput as F,createEditorPart as w,registerTestSideBySideEditor as y,TestEditorInput as b}from"../../workbenchTestServices.js";import{DisposableStore as L}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as D}from"../../../../../base/test/common/utils.js";import{SyncDescriptor as O}from"../../../../../platform/instantiation/common/descriptors.js";import{GroupDirection as R,IEditorGroupsService as k}from"../../../../services/editor/common/editorGroupsService.js";import{EditorService as A}from"../../../../services/editor/browser/editorService.js";import{IEditorService as W}from"../../../../services/editor/common/editorService.js";import"../../../../common/editor/editorInput.js";import{URI as _}from"../../../../../base/common/uri.js";import{resolveCommandsContext as l}from"../../../../browser/parts/editor/editorCommandsContext.js";import"../../../../common/editor.js";import"../../../../../platform/list/browser/listService.js";class B{lastFocusedList=void 0}suite("Resolving Editor Commands Context",()=>{const n=new L,x="MyTestEditorForEditors";let S,I;const E=new B;setup(()=>{S=q(void 0,n),I=S.createInstance(C),n.add(I.untitledTextEditorService),n.add(h()),n.add(y()),n.add(T()),n.add(G(x,[new O(F)]))}),teardown(()=>{n.clear()});let f=0;function u(e=String(f++)){return n.add(new b(_.parse(`file://${e}`),"testInput"))}async function m(){const e=q(void 0,n),r=await w(e,n);e.stub(k,r);const o=n.add(e.createInstance(A,void 0));return e.stub(W,o),e.createInstance(C)}test("use editor group selection",async()=>{const e=await m(),r=e.editorGroupService.activeGroup,o=u(),s=u(),c=u();r.openEditor(o,{pinned:!0}),r.openEditor(s,{pinned:!0}),r.openEditor(c,{pinned:!0}),r.setSelection(o,[s]);const g={groupId:r.id,editorIndex:r.getIndexOfEditor(o),preserveFocus:!0},i=l([g],e.editorService,e.editorGroupService,E);t.strictEqual(i.groupedEditors.length,1),t.strictEqual(i.groupedEditors[0].group.id,r.id),t.strictEqual(i.groupedEditors[0].editors.length,2),t.strictEqual(i.groupedEditors[0].editors[0],o),t.strictEqual(i.groupedEditors[0].editors[1],s),t.strictEqual(i.preserveFocus,!0);const d=l([s.resource],e.editorService,e.editorGroupService,E);t.strictEqual(d.groupedEditors.length,1),t.strictEqual(d.groupedEditors[0].group.id,r.id),t.strictEqual(d.groupedEditors[0].editors.length,2),t.strictEqual(d.groupedEditors[0].editors[0],s),t.strictEqual(d.groupedEditors[0].editors[1],o),t.strictEqual(d.preserveFocus,!1);const p={groupId:r.id,editorIndex:r.getIndexOfEditor(o),preserveFocus:!0},a=l([p],e.editorService,e.editorGroupService,E);t.strictEqual(a.groupedEditors.length,1),t.strictEqual(a.groupedEditors[0].group.id,r.id),t.strictEqual(a.groupedEditors[0].editors.length,2),t.strictEqual(a.groupedEditors[0].editors[0],o),t.strictEqual(a.groupedEditors[0].editors[1],s),t.strictEqual(a.preserveFocus,!0)}),test("don't use editor group selection",async()=>{const e=await m(),r=e.editorGroupService.activeGroup,o=u(),s=u(),c=u();r.openEditor(o,{pinned:!0}),r.openEditor(s,{pinned:!0}),r.openEditor(c,{pinned:!0}),r.setSelection(o,[s]);const g={groupId:r.id,editorIndex:r.getIndexOfEditor(c),preserveFocus:!0},i=l([g],e.editorService,e.editorGroupService,E);t.strictEqual(i.groupedEditors.length,1),t.strictEqual(i.groupedEditors[0].group.id,r.id),t.strictEqual(i.groupedEditors[0].editors.length,1),t.strictEqual(i.groupedEditors[0].editors[0],c),t.strictEqual(i.preserveFocus,!0);const d=l([c.resource],e.editorService,e.editorGroupService,E);t.strictEqual(d.groupedEditors.length,1),t.strictEqual(d.groupedEditors[0].group.id,r.id),t.strictEqual(d.groupedEditors[0].editors.length,1),t.strictEqual(d.groupedEditors[0].editors[0],c),t.strictEqual(d.preserveFocus,!1)}),test("inactive edior group command context",async()=>{const e=await m(),r=e.editorGroupService,o=r.activeGroup,s=r.addGroup(o,R.RIGHT),c=u(),g=u();o.openEditor(c,{pinned:!0}),o.openEditor(g,{pinned:!0});const i=u();s.openEditor(i,{pinned:!0}),r.activateGroup(o),o.setSelection(c,[g]);const d={groupId:s.id,editorIndex:s.getIndexOfEditor(i),preserveFocus:!0},p=l([d],e.editorService,e.editorGroupService,E);t.strictEqual(p.groupedEditors.length,1),t.strictEqual(p.groupedEditors[0].group.id,s.id),t.strictEqual(p.groupedEditors[0].editors.length,1),t.strictEqual(p.groupedEditors[0].editors[0],i),t.strictEqual(p.preserveFocus,!0);const a={groupId:s.id,preserveFocus:!0},v=l([a],e.editorService,e.editorGroupService,E);t.strictEqual(v.groupedEditors.length,1),t.strictEqual(v.groupedEditors[0].group.id,s.id),t.strictEqual(v.groupedEditors[0].editors.length,1),t.strictEqual(p.groupedEditors[0].editors[0],i),t.strictEqual(v.preserveFocus,!0)}),D()});
