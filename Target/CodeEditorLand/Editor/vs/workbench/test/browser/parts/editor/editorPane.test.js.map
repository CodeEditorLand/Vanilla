{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/browser/parts/editor/editorPane.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { EditorPane, EditorMemento } from '../../../../browser/parts/editor/editorPane.js';\nimport { WorkspaceTrustRequiredPlaceholderEditor } from '../../../../browser/parts/editor/editorPlaceholder.js';\nimport { IEditorSerializer, IEditorFactoryRegistry, EditorExtensions, EditorInputCapabilities, IEditorDescriptor, IEditorPane } from '../../../../common/editor.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { SyncDescriptor } from '../../../../../platform/instantiation/common/descriptors.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { workbenchInstantiationService, TestEditorGroupView, TestEditorGroupsService, registerTestResourceEditor, TestEditorInput, createEditorPart, TestTextResourceConfigurationService } from '../../workbenchTestServices.js';\nimport { TextResourceEditorInput } from '../../../../common/editor/textResourceEditorInput.js';\nimport { TestThemeService } from '../../../../../platform/theme/test/common/testThemeService.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { EditorPaneDescriptor, EditorPaneRegistry } from '../../../../browser/editor.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { TestStorageService, TestWorkspaceTrustManagementService } from '../../../common/workbenchTestServices.js';\nimport { extUri } from '../../../../../base/common/resources.js';\nimport { EditorService } from '../../../../services/editor/browser/editorService.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { IWorkspaceTrustManagementService } from '../../../../../platform/workspace/common/workspaceTrust.js';\nimport { EditorInput } from '../../../../common/editor/editorInput.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst NullThemeService = new TestThemeService();\n\nconst editorRegistry: EditorPaneRegistry = Registry.as(EditorExtensions.EditorPane);\nconst editorInputRegistry: IEditorFactoryRegistry = Registry.as(EditorExtensions.EditorFactory);\n\nclass TestEditor extends EditorPane {\n\n\tconstructor(group: IEditorGroup,) {\n\t\tconst disposables = new DisposableStore();\n\t\tsuper('TestEditor', group, NullTelemetryService, NullThemeService, disposables.add(new TestStorageService()));\n\n\t\tthis._register(disposables);\n\t}\n\n\toverride getId(): string { return 'testEditor'; }\n\tlayout(): void { }\n\tprotected createEditor(): any { }\n}\n\nclass OtherTestEditor extends EditorPane {\n\n\tconstructor(group: IEditorGroup,) {\n\t\tconst disposables = new DisposableStore();\n\t\tsuper('testOtherEditor', group, NullTelemetryService, NullThemeService, disposables.add(new TestStorageService()));\n\n\t\tthis._register(disposables);\n\t}\n\n\toverride getId(): string { return 'testOtherEditor'; }\n\n\tlayout(): void { }\n\tprotected createEditor(): any { }\n}\n\nclass TestInputSerializer implements IEditorSerializer {\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(input: EditorInput): string {\n\t\treturn input.toString();\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, raw: string): EditorInput {\n\t\treturn {} as EditorInput;\n\t}\n}\n\nclass TestInput extends EditorInput {\n\n\treadonly resource = undefined;\n\n\toverride prefersEditorPane<T extends IEditorDescriptor<IEditorPane>>(editors: T[]): T | undefined {\n\t\treturn editors[1];\n\t}\n\n\toverride get typeId(): string {\n\t\treturn 'testInput';\n\t}\n\n\toverride resolve(): any {\n\t\treturn null;\n\t}\n}\n\nclass OtherTestInput extends EditorInput {\n\n\treadonly resource = undefined;\n\n\toverride get typeId(): string {\n\t\treturn 'otherTestInput';\n\t}\n\n\toverride resolve(): any {\n\t\treturn null;\n\t}\n}\nclass TestResourceEditorInput extends TextResourceEditorInput { }\n\nsuite('EditorPane', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('EditorPane API', async () => {\n\t\tconst group = new TestEditorGroupView(1);\n\t\tconst editor = new TestEditor(group);\n\t\tassert.ok(editor.group);\n\t\tconst input = disposables.add(new OtherTestInput());\n\t\tconst options = {};\n\n\t\tassert(!editor.isVisible());\n\t\tassert(!editor.input);\n\n\t\tawait editor.setInput(input, options, Object.create(null), CancellationToken.None);\n\t\tassert.strictEqual(<any>input, editor.input);\n\t\teditor.setVisible(true);\n\t\tassert(editor.isVisible());\n\t\teditor.dispose();\n\t\teditor.clearInput();\n\t\teditor.setVisible(false);\n\t\tassert(!editor.isVisible());\n\t\tassert(!editor.input);\n\t\tassert(!editor.getControl());\n\t});\n\n\ttest('EditorPaneDescriptor', () => {\n\t\tconst editorDescriptor = EditorPaneDescriptor.create(TestEditor, 'id', 'name');\n\t\tassert.strictEqual(editorDescriptor.typeId, 'id');\n\t\tassert.strictEqual(editorDescriptor.name, 'name');\n\t});\n\n\ttest('Editor Pane Registration', function () {\n\t\tconst editorDescriptor1 = EditorPaneDescriptor.create(TestEditor, 'id1', 'name');\n\t\tconst editorDescriptor2 = EditorPaneDescriptor.create(OtherTestEditor, 'id2', 'name');\n\n\t\tconst oldEditorsCnt = editorRegistry.getEditorPanes().length;\n\t\tconst oldInputCnt = editorRegistry.getEditors().length;\n\n\t\tdisposables.add(editorRegistry.registerEditorPane(editorDescriptor1, [new SyncDescriptor(TestInput)]));\n\t\tdisposables.add(editorRegistry.registerEditorPane(editorDescriptor2, [new SyncDescriptor(TestInput), new SyncDescriptor(OtherTestInput)]));\n\n\t\tassert.strictEqual(editorRegistry.getEditorPanes().length, oldEditorsCnt + 2);\n\t\tassert.strictEqual(editorRegistry.getEditors().length, oldInputCnt + 3);\n\n\t\tassert.strictEqual(editorRegistry.getEditorPane(disposables.add(new TestInput())), editorDescriptor2);\n\t\tassert.strictEqual(editorRegistry.getEditorPane(disposables.add(new OtherTestInput())), editorDescriptor2);\n\n\t\tassert.strictEqual(editorRegistry.getEditorPaneByType('id1'), editorDescriptor1);\n\t\tassert.strictEqual(editorRegistry.getEditorPaneByType('id2'), editorDescriptor2);\n\t\tassert(!editorRegistry.getEditorPaneByType('id3'));\n\t});\n\n\ttest('Editor Pane Lookup favors specific class over superclass (match on specific class)', function () {\n\t\tconst d1 = EditorPaneDescriptor.create(TestEditor, 'id1', 'name');\n\n\t\tdisposables.add(registerTestResourceEditor());\n\t\tdisposables.add(editorRegistry.registerEditorPane(d1, [new SyncDescriptor(TestResourceEditorInput)]));\n\n\t\tconst inst = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst group = new TestEditorGroupView(1);\n\n\t\tconst editor = disposables.add(editorRegistry.getEditorPane(disposables.add(inst.createInstance(TestResourceEditorInput, URI.file('/fake'), 'fake', '', undefined, undefined)))!.instantiate(inst, group));\n\t\tassert.strictEqual(editor.getId(), 'testEditor');\n\n\t\tconst otherEditor = disposables.add(editorRegistry.getEditorPane(disposables.add(inst.createInstance(TextResourceEditorInput, URI.file('/fake'), 'fake', '', undefined, undefined)))!.instantiate(inst, group));\n\t\tassert.strictEqual(otherEditor.getId(), 'workbench.editors.textResourceEditor');\n\t});\n\n\ttest('Editor Pane Lookup favors specific class over superclass (match on super class)', function () {\n\t\tconst inst = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst group = new TestEditorGroupView(1);\n\n\t\tdisposables.add(registerTestResourceEditor());\n\t\tconst editor = disposables.add(editorRegistry.getEditorPane(disposables.add(inst.createInstance(TestResourceEditorInput, URI.file('/fake'), 'fake', '', undefined, undefined)))!.instantiate(inst, group));\n\n\t\tassert.strictEqual('workbench.editors.textResourceEditor', editor.getId());\n\t});\n\n\ttest('Editor Input Serializer', function () {\n\t\tconst testInput = disposables.add(new TestEditorInput(URI.file('/fake'), 'testTypeId'));\n\t\tworkbenchInstantiationService(undefined, disposables).invokeFunction(accessor => editorInputRegistry.start(accessor));\n\t\tdisposables.add(editorInputRegistry.registerEditorSerializer(testInput.typeId, TestInputSerializer));\n\n\t\tlet factory = editorInputRegistry.getEditorSerializer('testTypeId');\n\t\tassert(factory);\n\n\t\tfactory = editorInputRegistry.getEditorSerializer(testInput);\n\t\tassert(factory);\n\n\t\t// throws when registering serializer for same type\n\t\tassert.throws(() => editorInputRegistry.registerEditorSerializer(testInput.typeId, TestInputSerializer));\n\t});\n\n\ttest('EditorMemento - basics', function () {\n\t\tconst testGroup0 = new TestEditorGroupView(0);\n\t\tconst testGroup1 = new TestEditorGroupView(1);\n\t\tconst testGroup4 = new TestEditorGroupView(4);\n\n\t\tconst configurationService = new TestTextResourceConfigurationService();\n\n\t\tconst editorGroupService = new TestEditorGroupsService([\n\t\t\ttestGroup0,\n\t\t\ttestGroup1,\n\t\t\tnew TestEditorGroupView(2)\n\t\t]);\n\n\t\tinterface TestViewState {\n\t\t\tline: number;\n\t\t}\n\n\t\tconst rawMemento = Object.create(null);\n\t\tlet memento = disposables.add(new EditorMemento<TestViewState>('id', 'key', rawMemento, 3, editorGroupService, configurationService));\n\n\t\tlet res = memento.loadEditorState(testGroup0, URI.file('/A'));\n\t\tassert.ok(!res);\n\n\t\tmemento.saveEditorState(testGroup0, URI.file('/A'), { line: 3 });\n\t\tres = memento.loadEditorState(testGroup0, URI.file('/A'));\n\t\tassert.ok(res);\n\t\tassert.strictEqual(res.line, 3);\n\n\t\tmemento.saveEditorState(testGroup1, URI.file('/A'), { line: 5 });\n\t\tres = memento.loadEditorState(testGroup1, URI.file('/A'));\n\t\tassert.ok(res);\n\t\tassert.strictEqual(res.line, 5);\n\n\t\t// Ensure capped at 3 elements\n\t\tmemento.saveEditorState(testGroup0, URI.file('/B'), { line: 1 });\n\t\tmemento.saveEditorState(testGroup0, URI.file('/C'), { line: 1 });\n\t\tmemento.saveEditorState(testGroup0, URI.file('/D'), { line: 1 });\n\t\tmemento.saveEditorState(testGroup0, URI.file('/E'), { line: 1 });\n\n\t\tassert.ok(!memento.loadEditorState(testGroup0, URI.file('/A')));\n\t\tassert.ok(!memento.loadEditorState(testGroup0, URI.file('/B')));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/C')));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/D')));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/E')));\n\n\t\t// Save at an unknown group\n\t\tmemento.saveEditorState(testGroup4, URI.file('/E'), { line: 1 });\n\t\tassert.ok(memento.loadEditorState(testGroup4, URI.file('/E'))); // only gets removed when memento is saved\n\t\tmemento.saveEditorState(testGroup4, URI.file('/C'), { line: 1 });\n\t\tassert.ok(memento.loadEditorState(testGroup4, URI.file('/C'))); // only gets removed when memento is saved\n\n\t\tmemento.saveState();\n\n\t\tmemento = disposables.add(new EditorMemento('id', 'key', rawMemento, 3, editorGroupService, configurationService));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/C')));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/D')));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/E')));\n\n\t\t// Check on entries no longer there from invalid groups\n\t\tassert.ok(!memento.loadEditorState(testGroup4, URI.file('/E')));\n\t\tassert.ok(!memento.loadEditorState(testGroup4, URI.file('/C')));\n\n\t\tmemento.clearEditorState(URI.file('/C'), testGroup4);\n\t\tmemento.clearEditorState(URI.file('/E'));\n\n\t\tassert.ok(!memento.loadEditorState(testGroup4, URI.file('/C')));\n\t\tassert.ok(memento.loadEditorState(testGroup0, URI.file('/D')));\n\t\tassert.ok(!memento.loadEditorState(testGroup0, URI.file('/E')));\n\t});\n\n\ttest('EditorMemento - move', function () {\n\t\tconst testGroup0 = new TestEditorGroupView(0);\n\n\t\tconst configurationService = new TestTextResourceConfigurationService();\n\t\tconst editorGroupService = new TestEditorGroupsService([testGroup0]);\n\n\t\tinterface TestViewState { line: number }\n\n\t\tconst rawMemento = Object.create(null);\n\t\tconst memento = disposables.add(new EditorMemento<TestViewState>('id', 'key', rawMemento, 3, editorGroupService, configurationService));\n\n\t\tmemento.saveEditorState(testGroup0, URI.file('/some/folder/file-1.txt'), { line: 1 });\n\t\tmemento.saveEditorState(testGroup0, URI.file('/some/folder/file-2.txt'), { line: 2 });\n\t\tmemento.saveEditorState(testGroup0, URI.file('/some/other/file.txt'), { line: 3 });\n\n\t\tmemento.moveEditorState(URI.file('/some/folder/file-1.txt'), URI.file('/some/folder/file-moved.txt'), extUri);\n\n\t\tlet res = memento.loadEditorState(testGroup0, URI.file('/some/folder/file-1.txt'));\n\t\tassert.ok(!res);\n\n\t\tres = memento.loadEditorState(testGroup0, URI.file('/some/folder/file-moved.txt'));\n\t\tassert.strictEqual(res?.line, 1);\n\n\t\tmemento.moveEditorState(URI.file('/some/folder'), URI.file('/some/folder-moved'), extUri);\n\n\t\tres = memento.loadEditorState(testGroup0, URI.file('/some/folder-moved/file-moved.txt'));\n\t\tassert.strictEqual(res?.line, 1);\n\n\t\tres = memento.loadEditorState(testGroup0, URI.file('/some/folder-moved/file-2.txt'));\n\t\tassert.strictEqual(res?.line, 2);\n\t});\n\n\ttest('EditoMemento - use with editor input', function () {\n\t\tconst testGroup0 = new TestEditorGroupView(0);\n\n\t\tinterface TestViewState {\n\t\t\tline: number;\n\t\t}\n\n\t\tclass TestEditorInput extends EditorInput {\n\t\t\tconstructor(public resource: URI, private id = 'testEditorInputForMementoTest') {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\toverride get typeId() { return 'testEditorInputForMementoTest'; }\n\t\t\toverride async resolve(): Promise<IDisposable | null> { return null; }\n\n\t\t\toverride matches(other: TestEditorInput): boolean {\n\t\t\t\treturn other && this.id === other.id && other instanceof TestEditorInput;\n\t\t\t}\n\t\t}\n\n\t\tconst rawMemento = Object.create(null);\n\t\tconst memento = disposables.add(new EditorMemento<TestViewState>('id', 'key', rawMemento, 3, new TestEditorGroupsService(), new TestTextResourceConfigurationService()));\n\n\t\tconst testInputA = disposables.add(new TestEditorInput(URI.file('/A')));\n\n\t\tlet res = memento.loadEditorState(testGroup0, testInputA);\n\t\tassert.ok(!res);\n\n\t\tmemento.saveEditorState(testGroup0, testInputA, { line: 3 });\n\t\tres = memento.loadEditorState(testGroup0, testInputA);\n\t\tassert.ok(res);\n\t\tassert.strictEqual(res.line, 3);\n\n\t\t// State removed when input gets disposed\n\t\ttestInputA.dispose();\n\t\tres = memento.loadEditorState(testGroup0, testInputA);\n\t\tassert.ok(!res);\n\t});\n\n\ttest('EditoMemento - clear on editor dispose', function () {\n\t\tconst testGroup0 = new TestEditorGroupView(0);\n\n\t\tinterface TestViewState {\n\t\t\tline: number;\n\t\t}\n\n\t\tclass TestEditorInput extends EditorInput {\n\t\t\tconstructor(public resource: URI, private id = 'testEditorInputForMementoTest') {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\toverride get typeId() { return 'testEditorInputForMementoTest'; }\n\t\t\toverride async resolve(): Promise<IDisposable | null> { return null; }\n\n\t\t\toverride matches(other: TestEditorInput): boolean {\n\t\t\t\treturn other && this.id === other.id && other instanceof TestEditorInput;\n\t\t\t}\n\t\t}\n\n\t\tconst rawMemento = Object.create(null);\n\t\tconst memento = disposables.add(new EditorMemento<TestViewState>('id', 'key', rawMemento, 3, new TestEditorGroupsService(), new TestTextResourceConfigurationService()));\n\n\t\tconst testInputA = disposables.add(new TestEditorInput(URI.file('/A')));\n\n\t\tlet res = memento.loadEditorState(testGroup0, testInputA);\n\t\tassert.ok(!res);\n\n\t\tmemento.saveEditorState(testGroup0, testInputA.resource, { line: 3 });\n\t\tres = memento.loadEditorState(testGroup0, testInputA);\n\t\tassert.ok(res);\n\t\tassert.strictEqual(res.line, 3);\n\n\t\t// State not yet removed when input gets disposed\n\t\t// because we used resource\n\t\ttestInputA.dispose();\n\t\tres = memento.loadEditorState(testGroup0, testInputA);\n\t\tassert.ok(res);\n\n\t\tconst testInputB = disposables.add(new TestEditorInput(URI.file('/B')));\n\n\t\tres = memento.loadEditorState(testGroup0, testInputB);\n\t\tassert.ok(!res);\n\n\t\tmemento.saveEditorState(testGroup0, testInputB.resource, { line: 3 });\n\t\tres = memento.loadEditorState(testGroup0, testInputB);\n\t\tassert.ok(res);\n\t\tassert.strictEqual(res.line, 3);\n\n\t\tmemento.clearEditorStateOnDispose(testInputB.resource, testInputB);\n\n\t\t// State removed when input gets disposed\n\t\ttestInputB.dispose();\n\t\tres = memento.loadEditorState(testGroup0, testInputB);\n\t\tassert.ok(!res);\n\t});\n\n\ttest('EditorMemento - workbench.editor.sharedViewState', function () {\n\t\tconst testGroup0 = new TestEditorGroupView(0);\n\t\tconst testGroup1 = new TestEditorGroupView(1);\n\n\t\tconst configurationService = new TestTextResourceConfigurationService(new TestConfigurationService({\n\t\t\tworkbench: {\n\t\t\t\teditor: {\n\t\t\t\t\tsharedViewState: true\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tconst editorGroupService = new TestEditorGroupsService([testGroup0]);\n\n\t\tinterface TestViewState { line: number }\n\n\t\tconst rawMemento = Object.create(null);\n\t\tconst memento = disposables.add(new EditorMemento<TestViewState>('id', 'key', rawMemento, 3, editorGroupService, configurationService));\n\n\t\tconst resource = URI.file('/some/folder/file-1.txt');\n\t\tmemento.saveEditorState(testGroup0, resource, { line: 1 });\n\n\t\tlet res = memento.loadEditorState(testGroup0, resource);\n\t\tassert.strictEqual(res!.line, 1);\n\n\t\tres = memento.loadEditorState(testGroup1, resource);\n\t\tassert.strictEqual(res!.line, 1);\n\n\t\tmemento.saveEditorState(testGroup0, resource, { line: 3 });\n\n\t\tres = memento.loadEditorState(testGroup1, resource);\n\t\tassert.strictEqual(res!.line, 3);\n\n\t\tmemento.saveEditorState(testGroup1, resource, { line: 1 });\n\n\t\tres = memento.loadEditorState(testGroup1, resource);\n\t\tassert.strictEqual(res!.line, 1);\n\n\t\tmemento.clearEditorState(resource, testGroup0);\n\t\tmemento.clearEditorState(resource, testGroup1);\n\n\t\tres = memento.loadEditorState(testGroup1, resource);\n\t\tassert.strictEqual(res!.line, 1);\n\n\t\tmemento.clearEditorState(resource);\n\n\t\tres = memento.loadEditorState(testGroup1, resource);\n\t\tassert.ok(!res);\n\t});\n\n\ttest('WorkspaceTrustRequiredEditor', async function () {\n\n\t\tclass TrustRequiredTestEditor extends EditorPane {\n\t\t\tconstructor(group: IEditorGroup, @ITelemetryService telemetryService: ITelemetryService) {\n\t\t\t\tsuper('TestEditor', group, NullTelemetryService, NullThemeService, disposables.add(new TestStorageService()));\n\t\t\t}\n\n\t\t\toverride getId(): string { return 'trustRequiredTestEditor'; }\n\t\t\tlayout(): void { }\n\t\t\tprotected createEditor(): any { }\n\t\t}\n\n\t\tclass TrustRequiredTestInput extends EditorInput {\n\n\t\t\treadonly resource = undefined;\n\n\t\t\toverride get typeId(): string {\n\t\t\t\treturn 'trustRequiredTestInput';\n\t\t\t}\n\n\t\t\toverride get capabilities(): EditorInputCapabilities {\n\t\t\t\treturn EditorInputCapabilities.RequiresTrust;\n\t\t\t}\n\n\t\t\toverride resolve(): any {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tconst workspaceTrustService = disposables.add(instantiationService.createInstance(TestWorkspaceTrustManagementService));\n\t\tinstantiationService.stub(IWorkspaceTrustManagementService, workspaceTrustService);\n\t\tworkspaceTrustService.setWorkspaceTrust(false);\n\n\t\tconst editorPart = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, editorPart);\n\n\t\tconst editorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst group = editorPart.activeGroup;\n\n\t\tconst editorDescriptor = EditorPaneDescriptor.create(TrustRequiredTestEditor, 'id1', 'name');\n\t\tdisposables.add(editorRegistry.registerEditorPane(editorDescriptor, [new SyncDescriptor(TrustRequiredTestInput)]));\n\n\t\tconst testInput = disposables.add(new TrustRequiredTestInput());\n\n\t\tawait group.openEditor(testInput);\n\t\tassert.strictEqual(group.activeEditorPane?.getId(), WorkspaceTrustRequiredPlaceholderEditor.ID);\n\n\t\tconst getEditorPaneIdAsync = () => new Promise(resolve => {\n\t\t\tdisposables.add(editorService.onDidActiveEditorChange(() => {\n\t\t\t\tresolve(group.activeEditorPane?.getId());\n\t\t\t}));\n\t\t});\n\n\t\tworkspaceTrustService.setWorkspaceTrust(true);\n\n\t\tassert.strictEqual(await getEditorPaneIdAsync(), 'trustRequiredTestEditor');\n\n\t\tworkspaceTrustService.setWorkspaceTrust(false);\n\t\tassert.strictEqual(await getEditorPaneIdAsync(), WorkspaceTrustRequiredPlaceholderEditor.ID);\n\n\t\tawait group.closeAllEditors();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["TestEditorInput", "group"]
}
