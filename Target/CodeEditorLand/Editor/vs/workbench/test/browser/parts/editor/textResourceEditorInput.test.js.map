{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/browser/parts/editor/textResourceEditorInput.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { TextResourceEditorInput } from '../../../../common/editor/textResourceEditorInput.js';\nimport { TextResourceEditorModel } from '../../../../common/editor/textResourceEditorModel.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../workbenchTestServices.js';\nimport { snapshotToString } from '../../../../services/textfile/common/textfiles.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('TextResourceEditorInput', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined));\n\n\t\tconst model = disposables.add(await input.resolve());\n\n\t\tassert.ok(model);\n\t\tassert.strictEqual(snapshotToString(((model as TextResourceEditorModel).createSnapshot()!)), 'function test() {}');\n\t});\n\n\ttest('preferred language (via ctor)', async () => {\n\t\tconst registration = accessor.languageService.registerLanguage({\n\t\t\tid: 'resource-input-test',\n\t\t});\n\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', 'resource-input-test', undefined));\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), 'resource-input-test');\n\n\t\tinput.setLanguageId('text');\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\n\t\tdisposables.add(await input.resolve());\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\t\tregistration.dispose();\n\t});\n\n\ttest('preferred language (via setPreferredLanguageId)', async () => {\n\t\tconst registration = accessor.languageService.registerLanguage({\n\t\t\tid: 'resource-input-test',\n\t\t});\n\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined));\n\t\tinput.setPreferredLanguageId('resource-input-test');\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), 'resource-input-test');\n\t\tregistration.dispose();\n\t});\n\n\ttest('preferred contents (via ctor)', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, 'My Resource Input Contents'));\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'My Resource Input Contents');\n\n\t\tmodel.textEditorModel.setValue('Some other contents');\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents');\n\n\t\tdisposables.add(await input.resolve());\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents'); // preferred contents only used once\n\t});\n\n\ttest('preferred contents (via setPreferredContents)', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined));\n\t\tinput.setPreferredContents('My Resource Input Contents');\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'My Resource Input Contents');\n\n\t\tmodel.textEditorModel.setValue('Some other contents');\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents');\n\n\t\tdisposables.add(await input.resolve());\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents'); // preferred contents only used once\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
