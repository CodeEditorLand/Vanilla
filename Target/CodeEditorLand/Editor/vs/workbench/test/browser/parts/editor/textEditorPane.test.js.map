{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/browser/parts/editor/textEditorPane.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { workbenchInstantiationService, TestServiceAccessor, registerTestFileEditor, createEditorPart, TestTextFileEditor } from '../../workbenchTestServices.js';\nimport { IResolvedTextFileEditorModel } from '../../../../services/textfile/common/textfiles.js';\nimport { IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { EditorService } from '../../../../services/editor/browser/editorService.js';\nimport { EditorPaneSelectionChangeReason, EditorPaneSelectionCompareResult, IEditorPaneSelectionChangeEvent, isEditorPaneWithSelection } from '../../../../common/editor.js';\nimport { DeferredPromise } from '../../../../../base/common/async.js';\nimport { TextEditorPaneSelection } from '../../../../browser/parts/editor/textEditor.js';\nimport { Selection } from '../../../../../editor/common/core/selection.js';\nimport { IEditorOptions } from '../../../../../platform/editor/common/editor.js';\n\nsuite('TextEditorPane', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createServices(): Promise<TestServiceAccessor> {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\treturn instantiationService.createInstance(TestServiceAccessor);\n\t}\n\n\ttest('editor pane selection', async function () {\n\t\tconst accessor = await createServices();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\t\tlet pane = (await accessor.editorService.openEditor({ resource }) as TestTextFileEditor);\n\n\t\tassert.ok(pane && isEditorPaneWithSelection(pane));\n\n\t\tconst onDidFireSelectionEventOfEditType = new DeferredPromise<IEditorPaneSelectionChangeEvent>();\n\t\tdisposables.add(pane.onDidChangeSelection(e => {\n\t\t\tif (e.reason === EditorPaneSelectionChangeReason.EDIT) {\n\t\t\t\tonDidFireSelectionEventOfEditType.complete(e);\n\t\t\t}\n\t\t}));\n\n\t\t// Changing model reports selection change\n\t\t// of EDIT kind\n\n\t\tconst model = disposables.add(await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel);\n\t\tmodel.textEditorModel.setValue('Hello World');\n\n\t\tconst event = await onDidFireSelectionEventOfEditType.p;\n\t\tassert.strictEqual(event.reason, EditorPaneSelectionChangeReason.EDIT);\n\n\t\t// getSelection() works and can be restored\n\t\t//\n\t\t// Note: this is a bit bogus because in tests our code editors have\n\t\t//       no view and no cursor can be set as such. So the selection\n\t\t//       will always report for the first line and column.\n\n\t\tpane.setSelection(new Selection(1, 1, 1, 1), EditorPaneSelectionChangeReason.USER);\n\t\tconst selection = pane.getSelection();\n\t\tassert.ok(selection);\n\t\tawait pane.group.closeAllEditors();\n\t\tconst options = selection.restore({});\n\t\tpane = (await accessor.editorService.openEditor({ resource, options }) as TestTextFileEditor);\n\n\t\tassert.ok(pane && isEditorPaneWithSelection(pane));\n\n\t\tconst newSelection = pane.getSelection();\n\t\tassert.ok(newSelection);\n\t\tassert.strictEqual(newSelection.compare(selection), EditorPaneSelectionCompareResult.IDENTICAL);\n\n\t\tawait model.revert();\n\t\tawait pane.group.closeAllEditors();\n\t});\n\n\ttest('TextEditorPaneSelection', function () {\n\t\tconst sel1 = new TextEditorPaneSelection(new Selection(1, 1, 2, 2));\n\t\tconst sel2 = new TextEditorPaneSelection(new Selection(5, 5, 6, 6));\n\t\tconst sel3 = new TextEditorPaneSelection(new Selection(50, 50, 60, 60));\n\t\tconst sel4 = { compare: () => { throw new Error(); }, restore: (options: IEditorOptions) => options };\n\n\t\tassert.strictEqual(sel1.compare(sel1), EditorPaneSelectionCompareResult.IDENTICAL);\n\t\tassert.strictEqual(sel1.compare(sel2), EditorPaneSelectionCompareResult.SIMILAR);\n\t\tassert.strictEqual(sel1.compare(sel3), EditorPaneSelectionCompareResult.DIFFERENT);\n\t\tassert.strictEqual(sel1.compare(sel4), EditorPaneSelectionCompareResult.DIFFERENT);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
