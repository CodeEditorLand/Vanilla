{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/browser/parts/editor/editorDiffModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { TextDiffEditorModel } from '../../../../common/editor/textDiffEditorModel.js';\nimport { DiffEditorInput } from '../../../../common/editor/diffEditorInput.js';\nimport { TextResourceEditorInput } from '../../../../common/editor/textResourceEditorInput.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../workbenchTestServices.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('TextDiffEditorModel', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', async () => {\n\t\tdisposables.add(accessor.textModelResolverService.registerTextModelContentProvider('test', {\n\t\t\tprovideTextContent: async function (resource: URI): Promise<ITextModel | null> {\n\t\t\t\tif (resource.scheme === 'test') {\n\t\t\t\t\tconst modelContent = 'Hello Test';\n\t\t\t\t\tconst languageSelection = accessor.languageService.createById('json');\n\n\t\t\t\t\treturn disposables.add(accessor.modelService.createModel(modelContent, languageSelection, resource));\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}));\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, URI.from({ scheme: 'test', authority: null!, path: 'thePath' }), 'name', 'description', undefined, undefined));\n\t\tconst otherInput = disposables.add(instantiationService.createInstance(TextResourceEditorInput, URI.from({ scheme: 'test', authority: null!, path: 'thePath' }), 'name2', 'description', undefined, undefined));\n\t\tconst diffInput = disposables.add(instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined));\n\n\t\tlet model = disposables.add(await diffInput.resolve() as TextDiffEditorModel);\n\n\t\tassert(model);\n\t\tassert(model instanceof TextDiffEditorModel);\n\n\t\tconst diffEditorModel = model.textDiffEditorModel!;\n\t\tassert(diffEditorModel.original);\n\t\tassert(diffEditorModel.modified);\n\n\t\tmodel = disposables.add(await diffInput.resolve() as TextDiffEditorModel);\n\t\tassert(model.isResolved());\n\n\t\tassert(diffEditorModel !== model.textDiffEditorModel);\n\t\tdiffInput.dispose();\n\t\tassert(!model.textDiffEditorModel);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,+BAA+B;AACxC,SAAS,WAAW;AACpB,SAAS,+BAA+B,2BAA2B;AACnE,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AAExD,MAAM,uBAAuB,MAAM;AAElC,QAAM,cAAc,IAAI,gBAAgB;AACxC,MAAI;AACJ,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAAA,EACnE,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,UAAU,YAAY;AAC1B,gBAAY,IAAI,SAAS,yBAAyB,iCAAiC,QAAQ;AAAA,MAC1F,oBAAoB,sCAAgB,UAA2C;AAC9E,YAAI,SAAS,WAAW,QAAQ;AAC/B,gBAAM,eAAe;AACrB,gBAAM,oBAAoB,SAAS,gBAAgB,WAAW,MAAM;AAEpE,iBAAO,YAAY,IAAI,SAAS,aAAa,YAAY,cAAc,mBAAmB,QAAQ,CAAC;AAAA,QACpG;AAEA,eAAO;AAAA,MACR,GAToB;AAAA,IAUrB,CAAC,CAAC;AAEF,UAAM,QAAQ,YAAY,IAAI,qBAAqB,eAAe,yBAAyB,IAAI,KAAK,EAAE,QAAQ,QAAQ,WAAW,MAAO,MAAM,UAAU,CAAC,GAAG,QAAQ,eAAe,QAAW,MAAS,CAAC;AACxM,UAAM,aAAa,YAAY,IAAI,qBAAqB,eAAe,yBAAyB,IAAI,KAAK,EAAE,QAAQ,QAAQ,WAAW,MAAO,MAAM,UAAU,CAAC,GAAG,SAAS,eAAe,QAAW,MAAS,CAAC;AAC9M,UAAM,YAAY,YAAY,IAAI,qBAAqB,eAAe,iBAAiB,QAAQ,eAAe,OAAO,YAAY,MAAS,CAAC;AAE3I,QAAI,QAAQ,YAAY,IAAI,MAAM,UAAU,QAAQ,CAAwB;AAE5E,WAAO,KAAK;AACZ,WAAO,iBAAiB,mBAAmB;AAE3C,UAAM,kBAAkB,MAAM;AAC9B,WAAO,gBAAgB,QAAQ;AAC/B,WAAO,gBAAgB,QAAQ;AAE/B,YAAQ,YAAY,IAAI,MAAM,UAAU,QAAQ,CAAwB;AACxE,WAAO,MAAM,WAAW,CAAC;AAEzB,WAAO,oBAAoB,MAAM,mBAAmB;AACpD,cAAU,QAAQ;AAClB,WAAO,CAAC,MAAM,mBAAmB;AAAA,EAClC,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
