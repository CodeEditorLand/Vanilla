{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/test/browser/parts/statusbar/statusbarModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { StatusbarViewModel } from '../../../../browser/parts/statusbar/statusbarModel.js';\nimport { TestStorageService } from '../../../common/workbenchTestServices.js';\nimport { StatusbarAlignment } from '../../../../services/statusbar/browser/statusbar.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('Workbench status bar model', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\tassert.strictEqual(model.entries.length, 0);\n\n\t\tconst entry1 = { id: '3', alignment: StatusbarAlignment.LEFT, name: '3', priority: { primary: 3, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry1);\n\t\tconst entry2 = { id: '2', alignment: StatusbarAlignment.LEFT, name: '2', priority: { primary: 2, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry2);\n\t\tconst entry3 = { id: '1', alignment: StatusbarAlignment.LEFT, name: '1', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry3);\n\t\tconst entry4 = { id: '1-right', alignment: StatusbarAlignment.RIGHT, name: '1-right', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry4);\n\n\t\tassert.strictEqual(model.entries.length, 4);\n\n\t\tconst leftEntries = model.getEntries(StatusbarAlignment.LEFT);\n\t\tassert.strictEqual(leftEntries.length, 3);\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.RIGHT).length, 1);\n\n\t\tassert.strictEqual(leftEntries[0].id, '3');\n\t\tassert.strictEqual(leftEntries[1].id, '2');\n\t\tassert.strictEqual(leftEntries[2].id, '1');\n\n\t\tconst entries = model.entries;\n\t\tassert.strictEqual(entries[0].id, '3');\n\t\tassert.strictEqual(entries[1].id, '2');\n\t\tassert.strictEqual(entries[2].id, '1');\n\t\tassert.strictEqual(entries[3].id, '1-right');\n\n\t\tassert.ok(model.findEntry(container));\n\n\t\tlet didChangeEntryVisibility: { id: string; visible: boolean } = { id: '', visible: false };\n\t\tdisposables.add(model.onDidChangeEntryVisibility(e => {\n\t\t\tdidChangeEntryVisibility = e;\n\t\t}));\n\n\t\tassert.strictEqual(model.isHidden('1'), false);\n\t\tmodel.hide('1');\n\t\tassert.strictEqual(didChangeEntryVisibility.id, '1');\n\t\tassert.strictEqual(didChangeEntryVisibility.visible, false);\n\t\tassert.strictEqual(model.isHidden('1'), true);\n\n\t\tdidChangeEntryVisibility = { id: '', visible: false };\n\n\t\tmodel.show('1');\n\t\tassert.strictEqual(didChangeEntryVisibility.id, '1');\n\t\tassert.strictEqual(didChangeEntryVisibility.visible, true);\n\t\tassert.strictEqual(model.isHidden('1'), false);\n\n\t\tmodel.remove(entry1);\n\t\tmodel.remove(entry4);\n\t\tassert.strictEqual(model.entries.length, 2);\n\n\t\tmodel.remove(entry2);\n\t\tmodel.remove(entry3);\n\t\tassert.strictEqual(model.entries.length, 0);\n\t});\n\n\ttest('secondary priority used when primary is same', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\tassert.strictEqual(model.entries.length, 0);\n\n\t\tmodel.add({ id: '1', alignment: StatusbarAlignment.LEFT, name: '1', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: '2', alignment: StatusbarAlignment.LEFT, name: '2', priority: { primary: 1, secondary: 2 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: '3', alignment: StatusbarAlignment.LEFT, name: '3', priority: { primary: 1, secondary: 3 }, container, labelContainer: container, hasCommand: false });\n\n\t\tconst entries = model.entries;\n\t\tassert.strictEqual(entries[0].id, '3');\n\t\tassert.strictEqual(entries[1].id, '2');\n\t\tassert.strictEqual(entries[2].id, '1');\n\t});\n\n\ttest('insertion order preserved when priorites are the same', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\tassert.strictEqual(model.entries.length, 0);\n\n\t\tmodel.add({ id: '1', alignment: StatusbarAlignment.LEFT, name: '1', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: '2', alignment: StatusbarAlignment.LEFT, name: '2', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: '3', alignment: StatusbarAlignment.LEFT, name: '3', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\n\t\tconst entries = model.entries;\n\t\tassert.strictEqual(entries[0].id, '1');\n\t\tassert.strictEqual(entries[1].id, '2');\n\t\tassert.strictEqual(entries[2].id, '3');\n\t});\n\n\ttest('entry with reference to other entry (existing)', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\t// Existing reference, Alignment: left\n\t\tmodel.add({ id: 'a', alignment: StatusbarAlignment.LEFT, name: '1', priority: { primary: 2, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: 'b', alignment: StatusbarAlignment.LEFT, name: '2', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\n\t\tlet entry = { id: 'c', alignment: StatusbarAlignment.LEFT, name: '3', priority: { primary: { id: 'a', alignment: StatusbarAlignment.LEFT }, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry);\n\n\t\tlet entries = model.entries;\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].id, 'c');\n\t\tassert.strictEqual(entries[1].id, 'a');\n\t\tassert.strictEqual(entries[2].id, 'b');\n\n\t\tmodel.remove(entry);\n\n\t\t// Existing reference, Alignment: right\n\t\tentry = { id: 'c', alignment: StatusbarAlignment.RIGHT, name: '3', priority: { primary: { id: 'a', alignment: StatusbarAlignment.RIGHT }, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry);\n\n\t\tentries = model.entries;\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].id, 'a');\n\t\tassert.strictEqual(entries[1].id, 'c');\n\t\tassert.strictEqual(entries[2].id, 'b');\n\t});\n\n\ttest('entry with reference to other entry (nonexistent)', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\t// Nonexistent reference, Alignment: left\n\t\tmodel.add({ id: 'a', alignment: StatusbarAlignment.LEFT, name: '1', priority: { primary: 2, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: 'b', alignment: StatusbarAlignment.LEFT, name: '2', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\n\t\tlet entry = { id: 'c', alignment: StatusbarAlignment.LEFT, name: '3', priority: { primary: { id: 'not-existing', alignment: StatusbarAlignment.LEFT }, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry);\n\n\t\tlet entries = model.entries;\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].id, 'a');\n\t\tassert.strictEqual(entries[1].id, 'b');\n\t\tassert.strictEqual(entries[2].id, 'c');\n\n\t\tmodel.remove(entry);\n\n\t\t// Nonexistent reference, Alignment: right\n\t\tentry = { id: 'c', alignment: StatusbarAlignment.RIGHT, name: '3', priority: { primary: { id: 'not-existing', alignment: StatusbarAlignment.RIGHT }, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry);\n\n\t\tentries = model.entries;\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].id, 'a');\n\t\tassert.strictEqual(entries[1].id, 'b');\n\t\tassert.strictEqual(entries[2].id, 'c');\n\t});\n\n\ttest('entry with reference to other entry resorts based on other entry being there or not', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\tmodel.add({ id: 'a', alignment: StatusbarAlignment.LEFT, name: '1', priority: { primary: 2, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: 'b', alignment: StatusbarAlignment.LEFT, name: '2', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: 'c', alignment: StatusbarAlignment.LEFT, name: '3', priority: { primary: { id: 'not-existing', alignment: StatusbarAlignment.LEFT }, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\n\t\tlet entries = model.entries;\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].id, 'a');\n\t\tassert.strictEqual(entries[1].id, 'b');\n\t\tassert.strictEqual(entries[2].id, 'c');\n\n\t\tconst entry = { id: 'not-existing', alignment: StatusbarAlignment.LEFT, name: 'not-existing', priority: { primary: 3, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(entry);\n\n\t\tentries = model.entries;\n\t\tassert.strictEqual(entries.length, 4);\n\t\tassert.strictEqual(entries[0].id, 'c');\n\t\tassert.strictEqual(entries[1].id, 'not-existing');\n\t\tassert.strictEqual(entries[2].id, 'a');\n\t\tassert.strictEqual(entries[3].id, 'b');\n\n\t\tmodel.remove(entry);\n\n\t\tentries = model.entries;\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].id, 'a');\n\t\tassert.strictEqual(entries[1].id, 'b');\n\t\tassert.strictEqual(entries[2].id, 'c');\n\t});\n\n\ttest('entry with reference to other entry but different alignment does not explode', () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = disposables.add(new StatusbarViewModel(disposables.add(new TestStorageService())));\n\n\t\tmodel.add({ id: '1-left', alignment: StatusbarAlignment.LEFT, name: '1-left', priority: { primary: 2, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: '2-left', alignment: StatusbarAlignment.LEFT, name: '2-left', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\n\t\tmodel.add({ id: '1-right', alignment: StatusbarAlignment.RIGHT, name: '1-right', priority: { primary: 2, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\t\tmodel.add({ id: '2-right', alignment: StatusbarAlignment.RIGHT, name: '2-right', priority: { primary: 1, secondary: 1 }, container, labelContainer: container, hasCommand: false });\n\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.LEFT).length, 2);\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.RIGHT).length, 2);\n\n\t\tconst relativeEntryLeft = { id: 'relative', alignment: StatusbarAlignment.LEFT, name: 'relative', priority: { primary: { id: '1-right', alignment: StatusbarAlignment.LEFT }, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(relativeEntryLeft);\n\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.LEFT).length, 3);\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.LEFT)[2], relativeEntryLeft);\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.RIGHT).length, 2);\n\n\t\tmodel.remove(relativeEntryLeft);\n\n\t\tconst relativeEntryRight = { id: 'relative', alignment: StatusbarAlignment.RIGHT, name: 'relative', priority: { primary: { id: '1-right', alignment: StatusbarAlignment.LEFT }, secondary: 1 }, container, labelContainer: container, hasCommand: false };\n\t\tmodel.add(relativeEntryRight);\n\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.LEFT).length, 2);\n\t\tassert.strictEqual(model.getEntries(StatusbarAlignment.RIGHT).length, 3);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
