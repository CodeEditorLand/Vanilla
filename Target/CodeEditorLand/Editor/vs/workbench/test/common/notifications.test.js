import e from"assert";import{NotificationsModel as T,NotificationViewItem as n,NotificationChangeType as E,NotificationViewItemContentChangeKind as p,StatusMessageChangeType as b}from"../../common/notifications.js";import{Action as N}from"../../../base/common/actions.js";import{Severity as i,NotificationsFilter as y,NotificationPriority as f}from"../../../platform/notification/common/notification.js";import{createErrorWithActions as w}from"../../../base/common/errorMessage.js";import{NotificationService as x}from"../../services/notification/common/notificationService.js";import{TestStorageService as F}from"./workbenchTestServices.js";import{timeout as A}from"../../../base/common/async.js";import{ensureNoDisposablesAreLeakedInTestSuite as R}from"../../../base/test/common/utils.js";import{DisposableStore as W}from"../../../base/common/lifecycle.js";suite("Notifications",()=>{const r=new W,d={global:y.OFF,sources:new Map};teardown(()=>{r.clear()}),test("Items",()=>{e.ok(!n.create({severity:i.Error,message:""},d)),e.ok(!n.create({severity:i.Error,message:null},d));const t=n.create({severity:i.Error,message:"Error Message"},d),s=n.create({severity:i.Error,message:"Error Message"},d),a=n.create({severity:i.Info,message:"Info Message"},d),c=n.create({severity:i.Error,message:"Error Message",source:"Source"},d),l=n.create({severity:i.Error,message:"Error Message",actions:{primary:[r.add(new N("id","label"))]}},d),u=n.create({severity:i.Error,message:"Error Message",actions:{primary:[r.add(new N("id","label"))]},progress:{infinite:!0}},d);e.strictEqual(t.equals(t),!0),e.strictEqual(s.equals(s),!0),e.strictEqual(a.equals(a),!0),e.strictEqual(c.equals(c),!0),e.strictEqual(l.equals(l),!0),e.strictEqual(t.equals(s),!0),e.strictEqual(t.equals(a),!1),e.strictEqual(t.equals(c),!1),e.strictEqual(t.equals(l),!1);const m=n.create({id:"same",message:"Info Message",severity:i.Info},d),q=n.create({id:"same",message:"Error Message",severity:i.Error},d);e.strictEqual(m.equals(q),!0),e.strictEqual(m.equals(a),!1),e.strictEqual(t.hasProgress,!1),e.strictEqual(u.hasProgress,!0),e.strictEqual(l.canCollapse,!1),e.strictEqual(l.expanded,!0);let o=0;r.add(t.onDidChangeExpansion(()=>{o++})),t.expand(),t.expand(),t.collapse(),t.collapse(),e.strictEqual(o,2),o=0,r.add(t.onDidChangeContent(g=>{g.kind===p.PROGRESS&&o++})),t.progress.infinite(),t.progress.done(),e.strictEqual(o,2),o=0,r.add(t.onDidChangeContent(g=>{g.kind===p.MESSAGE&&o++})),t.updateMessage("message update"),o=0,r.add(t.onDidChangeContent(g=>{g.kind===p.SEVERITY&&o++})),t.updateSeverity(i.Error),o=0,r.add(t.onDidChangeContent(g=>{g.kind===p.ACTIONS&&o++})),t.updateActions({primary:[r.add(new N("id2","label"))]}),e.strictEqual(o,1),o=0,r.add(t.onDidChangeVisibility(g=>{o++})),t.updateVisibility(!0),t.updateVisibility(!1),t.updateVisibility(!1),e.strictEqual(o,2),o=0,r.add(t.onDidClose(()=>{o++})),t.close(),e.strictEqual(o,1);const C=n.create({severity:i.Error,message:w("Hello Error",[r.add(new N("id","label"))])},d);e.strictEqual(C.actions.primary.length,1);const S=n.create({severity:i.Error,message:"Error Message"},{global:y.OFF,sources:new Map});e.strictEqual(S.priority,f.DEFAULT);const D=n.create({severity:i.Error,message:"Error Message"},{global:y.ERROR,sources:new Map});e.strictEqual(D.priority,f.DEFAULT);const h=n.create({severity:i.Warning,message:"Error Message"},{global:y.ERROR,sources:new Map});e.strictEqual(h.priority,f.SILENT);const v=new Map;v.set("test.source",y.ERROR);const I=n.create({severity:i.Warning,message:"Error Message",source:"test.source"},{global:y.OFF,sources:v});e.strictEqual(I.priority,f.DEFAULT);const M=n.create({severity:i.Warning,message:"Error Message",source:{id:"test.source",label:"foo"}},{global:y.OFF,sources:v});e.strictEqual(M.priority,f.SILENT);const k=n.create({severity:i.Warning,message:"Error Message",source:{id:"test.source2",label:"foo"}},{global:y.OFF,sources:v});e.strictEqual(k.priority,f.DEFAULT);for(const g of[t,s,a,c,l,u,m,q,C,S,D,h,I,M,k])g.close()}),test("Items - does not fire changed when message did not change (content, severity)",async()=>{const t=n.create({severity:i.Error,message:"Error Message"},d);let s=!1;r.add(t.onDidChangeContent(()=>{s=!0})),t.updateMessage("Error Message"),await A(0),e.ok(!s,"Expected onDidChangeContent to not be fired"),t.updateSeverity(i.Error),await A(0),e.ok(!s,"Expected onDidChangeContent to not be fired");for(const a of[t])a.close()}),test("Model",()=>{const t=r.add(new T);let s;r.add(t.onDidChangeNotification(M=>{s=M}));let a;r.add(t.onDidChangeStatusMessage(M=>{a=M}));const c={severity:i.Error,message:"Error Message",actions:{primary:[r.add(new N("id","label"))]}},l={severity:i.Warning,message:"Warning Message",source:"Some Source"},u={severity:i.Warning,message:"Warning Message",source:"Some Source"},m={severity:i.Info,message:"Info Message"},q=t.addNotification(c);e.strictEqual(s.item.severity,c.severity),e.strictEqual(s.item.message.linkedText.toString(),c.message),e.strictEqual(s.index,0),e.strictEqual(s.kind,E.ADD),q.updateMessage("Different Error Message"),e.strictEqual(s.kind,E.CHANGE),e.strictEqual(s.detail,p.MESSAGE),q.updateSeverity(i.Warning),e.strictEqual(s.kind,E.CHANGE),e.strictEqual(s.detail,p.SEVERITY),q.updateActions({primary:[],secondary:[]}),e.strictEqual(s.kind,E.CHANGE),e.strictEqual(s.detail,p.ACTIONS),q.progress.infinite(),e.strictEqual(s.kind,E.CHANGE),e.strictEqual(s.detail,p.PROGRESS);const o=t.addNotification(l);e.strictEqual(s.item.severity,l.severity),e.strictEqual(s.item.message.linkedText.toString(),l.message),e.strictEqual(s.index,0),e.strictEqual(s.kind,E.ADD);const C=t.addNotification(m);e.strictEqual(s.item.severity,m.severity),e.strictEqual(s.item.message.linkedText.toString(),m.message),e.strictEqual(s.index,0),e.strictEqual(s.kind,E.ADD),e.strictEqual(t.notifications.length,3);let S=0;r.add(q.onDidClose(()=>{S++})),q.close(),e.strictEqual(S,1),e.strictEqual(t.notifications.length,2),e.strictEqual(s.item.severity,i.Warning),e.strictEqual(s.item.message.linkedText.toString(),"Different Error Message"),e.strictEqual(s.index,2),e.strictEqual(s.kind,E.REMOVE);const D=t.addNotification(u);e.strictEqual(t.notifications.length,2),e.strictEqual(s.item.severity,u.severity),e.strictEqual(s.item.message.linkedText.toString(),u.message),e.strictEqual(s.index,0),e.strictEqual(s.kind,E.ADD),o.close(),e.strictEqual(t.notifications.length,1),e.strictEqual(s.item.severity,u.severity),e.strictEqual(s.item.message.linkedText.toString(),u.message),e.strictEqual(s.index,0),e.strictEqual(s.kind,E.REMOVE),t.notifications[0].expand(),e.strictEqual(s.item.severity,m.severity),e.strictEqual(s.item.message.linkedText.toString(),m.message),e.strictEqual(s.index,0),e.strictEqual(s.kind,E.EXPAND_COLLAPSE);const h=t.showStatusMessage("Hello World");e.strictEqual(t.statusMessage.message,"Hello World"),e.strictEqual(a.item.message,t.statusMessage.message),e.strictEqual(a.kind,b.ADD),h.dispose(),e.ok(!t.statusMessage),e.strictEqual(a.kind,b.REMOVE);const v=t.showStatusMessage("Hello World 2"),I=t.showStatusMessage("Hello World 3");e.strictEqual(t.statusMessage.message,"Hello World 3"),v.dispose(),e.strictEqual(t.statusMessage.message,"Hello World 3"),I.dispose(),e.ok(!t.statusMessage),D.close(),C.close()}),test("Service",async()=>{const t=r.add(new x(r.add(new F)));let s=0,a;r.add(t.onDidAddNotification(u=>{s++,a=u})),t.info("hello there"),e.strictEqual(s,1),e.strictEqual(a.message,"hello there"),e.strictEqual(a.priority,f.DEFAULT),e.strictEqual(a.source,void 0),t.model.notifications[0].close();let c=t.notify({message:"important message",severity:i.Warning});e.strictEqual(s,2),e.strictEqual(a.message,"important message"),e.strictEqual(a.severity,i.Warning);let l=0;r.add(t.onDidRemoveNotification(u=>{l++,a=u})),c.close(),e.strictEqual(l,1),e.strictEqual(a.message,"important message"),c=t.notify({priority:f.SILENT,message:"test",severity:i.Ignore}),e.strictEqual(s,3),e.strictEqual(a.message,"test"),e.strictEqual(a.priority,f.SILENT),c.close(),e.strictEqual(l,2),c.close()}),R()});
