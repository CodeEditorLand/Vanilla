{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/notifications.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../base/common/actions.js\";\nimport { equals } from \"../../base/common/arrays.js\";\nimport {\n\tisErrorWithActions,\n\ttoErrorMessage,\n} from \"../../base/common/errorMessage.js\";\nimport { isCancellationError } from \"../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../base/common/lifecycle.js\";\nimport {\n\ttype LinkedText,\n\tparseLinkedText,\n} from \"../../base/common/linkedText.js\";\nimport { mapsStrictEqualIgnoreOrder } from \"../../base/common/map.js\";\nimport {\n\ttype INotification,\n\ttype INotificationActions,\n\ttype INotificationHandle,\n\ttype INotificationProgress,\n\ttype INotificationProgressProperties,\n\ttype INotificationSource,\n\ttype IPromptChoice,\n\ttype IPromptChoiceWithMenu,\n\ttype IStatusMessageOptions,\n\tNoOpNotification,\n\ttype NotificationMessage,\n\tNotificationPriority,\n\tNotificationsFilter,\n\tSeverity,\n\tisNotificationSource,\n} from \"../../platform/notification/common/notification.js\";\n\nexport interface INotificationsModel {\n\t//#region Notifications as Toasts/Center\n\n\treadonly notifications: INotificationViewItem[];\n\n\treadonly onDidChangeNotification: Event<INotificationChangeEvent>;\n\treadonly onDidChangeFilter: Event<Partial<INotificationsFilter>>;\n\n\taddNotification(notification: INotification): INotificationHandle;\n\n\tsetFilter(filter: Partial<INotificationsFilter>): void;\n\n\t//#endregion\n\n\t//#region  Notifications as Status\n\n\treadonly statusMessage: IStatusMessageViewItem | undefined;\n\n\treadonly onDidChangeStatusMessage: Event<IStatusMessageChangeEvent>;\n\n\tshowStatusMessage(\n\t\tmessage: NotificationMessage,\n\t\toptions?: IStatusMessageOptions,\n\t): IDisposable;\n\n\t//#endregion\n}\n\nexport enum NotificationChangeType {\n\t/**\n\t * A notification was added.\n\t */\n\tADD = 0,\n\n\t/**\n\t * A notification changed. Check `detail` property\n\t * on the event for additional information.\n\t */\n\tCHANGE = 1,\n\n\t/**\n\t * A notification expanded or collapsed.\n\t */\n\tEXPAND_COLLAPSE = 2,\n\n\t/**\n\t * A notification was removed.\n\t */\n\tREMOVE = 3,\n}\n\nexport interface INotificationChangeEvent {\n\t/**\n\t * The index this notification has in the list of notifications.\n\t */\n\tindex: number;\n\n\t/**\n\t * The notification this change is about.\n\t */\n\titem: INotificationViewItem;\n\n\t/**\n\t * The kind of notification change.\n\t */\n\tkind: NotificationChangeType;\n\n\t/**\n\t * Additional detail about the item change. Only applies to\n\t * `NotificationChangeType.CHANGE`.\n\t */\n\tdetail?: NotificationViewItemContentChangeKind;\n}\n\nexport enum StatusMessageChangeType {\n\tADD = 0,\n\tREMOVE = 1,\n}\n\nexport interface IStatusMessageViewItem {\n\tmessage: string;\n\toptions?: IStatusMessageOptions;\n}\n\nexport interface IStatusMessageChangeEvent {\n\t/**\n\t * The status message item this change is about.\n\t */\n\titem: IStatusMessageViewItem;\n\n\t/**\n\t * The kind of status message change.\n\t */\n\tkind: StatusMessageChangeType;\n}\n\nexport class NotificationHandle\n\textends Disposable\n\timplements INotificationHandle\n{\n\tprivate readonly _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate readonly _onDidChangeVisibility = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tconstructor(\n\t\tprivate readonly item: INotificationViewItem,\n\t\tprivate readonly onClose: (item: INotificationViewItem) => void,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Visibility\n\t\tthis._register(\n\t\t\tthis.item.onDidChangeVisibility((visible) =>\n\t\t\t\tthis._onDidChangeVisibility.fire(visible),\n\t\t\t),\n\t\t);\n\n\t\t// Closing\n\t\tEvent.once(this.item.onDidClose)(() => {\n\t\t\tthis._onDidClose.fire();\n\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tget progress(): INotificationProgress {\n\t\treturn this.item.progress;\n\t}\n\n\tupdateSeverity(severity: Severity): void {\n\t\tthis.item.updateSeverity(severity);\n\t}\n\n\tupdateMessage(message: NotificationMessage): void {\n\t\tthis.item.updateMessage(message);\n\t}\n\n\tupdateActions(actions?: INotificationActions): void {\n\t\tthis.item.updateActions(actions);\n\t}\n\n\tclose(): void {\n\t\tthis.onClose(this.item);\n\n\t\tthis.dispose();\n\t}\n}\n\nexport interface INotificationsFilter {\n\treadonly global: NotificationsFilter;\n\treadonly sources: Map<string, NotificationsFilter>;\n}\n\nexport class NotificationsModel\n\textends Disposable\n\timplements INotificationsModel\n{\n\tprivate static readonly NO_OP_NOTIFICATION = new NoOpNotification();\n\n\tprivate readonly _onDidChangeNotification = this._register(\n\t\tnew Emitter<INotificationChangeEvent>(),\n\t);\n\treadonly onDidChangeNotification = this._onDidChangeNotification.event;\n\n\tprivate readonly _onDidChangeStatusMessage = this._register(\n\t\tnew Emitter<IStatusMessageChangeEvent>(),\n\t);\n\treadonly onDidChangeStatusMessage = this._onDidChangeStatusMessage.event;\n\n\tprivate readonly _onDidChangeFilter = this._register(\n\t\tnew Emitter<Partial<INotificationsFilter>>(),\n\t);\n\treadonly onDidChangeFilter = this._onDidChangeFilter.event;\n\n\tprivate readonly _notifications: INotificationViewItem[] = [];\n\tget notifications(): INotificationViewItem[] {\n\t\treturn this._notifications;\n\t}\n\n\tprivate _statusMessage: IStatusMessageViewItem | undefined;\n\tget statusMessage(): IStatusMessageViewItem | undefined {\n\t\treturn this._statusMessage;\n\t}\n\n\tprivate readonly filter = {\n\t\tglobal: NotificationsFilter.OFF,\n\t\tsources: new Map<string, NotificationsFilter>(),\n\t};\n\n\tsetFilter(filter: Partial<INotificationsFilter>): void {\n\t\tlet globalChanged = false;\n\t\tif (typeof filter.global === \"number\") {\n\t\t\tglobalChanged = this.filter.global !== filter.global;\n\t\t\tthis.filter.global = filter.global;\n\t\t}\n\n\t\tlet sourcesChanged = false;\n\t\tif (filter.sources) {\n\t\t\tsourcesChanged = !mapsStrictEqualIgnoreOrder(\n\t\t\t\tthis.filter.sources,\n\t\t\t\tfilter.sources,\n\t\t\t);\n\t\t\tthis.filter.sources = filter.sources;\n\t\t}\n\n\t\tif (globalChanged || sourcesChanged) {\n\t\t\tthis._onDidChangeFilter.fire({\n\t\t\t\tglobal: globalChanged ? filter.global : undefined,\n\t\t\t\tsources: sourcesChanged ? filter.sources : undefined,\n\t\t\t});\n\t\t}\n\t}\n\n\taddNotification(notification: INotification): INotificationHandle {\n\t\tconst item = this.createViewItem(notification);\n\t\tif (!item) {\n\t\t\treturn NotificationsModel.NO_OP_NOTIFICATION; // return early if this is a no-op\n\t\t}\n\n\t\t// Deduplicate\n\t\tconst duplicate = this.findNotification(item);\n\t\tduplicate?.close();\n\n\t\t// Add to list as first entry\n\t\tthis._notifications.splice(0, 0, item);\n\n\t\t// Events\n\t\tthis._onDidChangeNotification.fire({\n\t\t\titem,\n\t\t\tindex: 0,\n\t\t\tkind: NotificationChangeType.ADD,\n\t\t});\n\n\t\t// Wrap into handle\n\t\treturn new NotificationHandle(item, (item) => this.onClose(item));\n\t}\n\n\tprivate onClose(item: INotificationViewItem): void {\n\t\tconst liveItem = this.findNotification(item);\n\t\tif (liveItem && liveItem !== item) {\n\t\t\tliveItem.close(); // item could have been replaced with another one, make sure to close the live item\n\t\t} else {\n\t\t\titem.close(); // otherwise just close the item that was passed in\n\t\t}\n\t}\n\n\tprivate findNotification(\n\t\titem: INotificationViewItem,\n\t): INotificationViewItem | undefined {\n\t\treturn this._notifications.find((notification) =>\n\t\t\tnotification.equals(item),\n\t\t);\n\t}\n\n\tprivate createViewItem(\n\t\tnotification: INotification,\n\t): INotificationViewItem | undefined {\n\t\tconst item = NotificationViewItem.create(notification, this.filter);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Item Events\n\t\tconst fireNotificationChangeEvent = (\n\t\t\tkind: NotificationChangeType,\n\t\t\tdetail?: NotificationViewItemContentChangeKind,\n\t\t) => {\n\t\t\tconst index = this._notifications.indexOf(item);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._onDidChangeNotification.fire({\n\t\t\t\t\titem,\n\t\t\t\t\tindex,\n\t\t\t\t\tkind,\n\t\t\t\t\tdetail,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst itemExpansionChangeListener = item.onDidChangeExpansion(() =>\n\t\t\tfireNotificationChangeEvent(NotificationChangeType.EXPAND_COLLAPSE),\n\t\t);\n\t\tconst itemContentChangeListener = item.onDidChangeContent((e) =>\n\t\t\tfireNotificationChangeEvent(NotificationChangeType.CHANGE, e.kind),\n\t\t);\n\n\t\tEvent.once(item.onDidClose)(() => {\n\t\t\titemExpansionChangeListener.dispose();\n\t\t\titemContentChangeListener.dispose();\n\n\t\t\tconst index = this._notifications.indexOf(item);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._notifications.splice(index, 1);\n\t\t\t\tthis._onDidChangeNotification.fire({\n\t\t\t\t\titem,\n\t\t\t\t\tindex,\n\t\t\t\t\tkind: NotificationChangeType.REMOVE,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn item;\n\t}\n\n\tshowStatusMessage(\n\t\tmessage: NotificationMessage,\n\t\toptions?: IStatusMessageOptions,\n\t): IDisposable {\n\t\tconst item = StatusMessageViewItem.create(message, options);\n\t\tif (!item) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\t// Remember as current status message and fire events\n\t\tthis._statusMessage = item;\n\t\tthis._onDidChangeStatusMessage.fire({\n\t\t\tkind: StatusMessageChangeType.ADD,\n\t\t\titem,\n\t\t});\n\n\t\treturn toDisposable(() => {\n\t\t\t// Only reset status message if the item is still the one we had remembered\n\t\t\tif (this._statusMessage === item) {\n\t\t\t\tthis._statusMessage = undefined;\n\t\t\t\tthis._onDidChangeStatusMessage.fire({\n\t\t\t\t\tkind: StatusMessageChangeType.REMOVE,\n\t\t\t\t\titem,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface INotificationViewItem {\n\treadonly id: string | undefined;\n\treadonly severity: Severity;\n\treadonly sticky: boolean;\n\treadonly priority: NotificationPriority;\n\treadonly message: INotificationMessage;\n\treadonly source: string | undefined;\n\treadonly sourceId: string | undefined;\n\treadonly actions: INotificationActions | undefined;\n\treadonly progress: INotificationViewItemProgress;\n\n\treadonly expanded: boolean;\n\treadonly visible: boolean;\n\treadonly canCollapse: boolean;\n\treadonly hasProgress: boolean;\n\n\treadonly onDidChangeExpansion: Event<void>;\n\treadonly onDidChangeVisibility: Event<boolean>;\n\treadonly onDidChangeContent: Event<INotificationViewItemContentChangeEvent>;\n\treadonly onDidClose: Event<void>;\n\n\texpand(): void;\n\tcollapse(skipEvents?: boolean): void;\n\ttoggle(): void;\n\n\tupdateSeverity(severity: Severity): void;\n\tupdateMessage(message: NotificationMessage): void;\n\tupdateActions(actions?: INotificationActions): void;\n\n\tupdateVisibility(visible: boolean): void;\n\n\tclose(): void;\n\n\tequals(item: INotificationViewItem): boolean;\n}\n\nexport function isNotificationViewItem(\n\tobj: unknown,\n): obj is INotificationViewItem {\n\treturn obj instanceof NotificationViewItem;\n}\n\nexport enum NotificationViewItemContentChangeKind {\n\tSEVERITY = 0,\n\tMESSAGE = 1,\n\tACTIONS = 2,\n\tPROGRESS = 3,\n}\n\nexport interface INotificationViewItemContentChangeEvent {\n\tkind: NotificationViewItemContentChangeKind;\n}\n\nexport interface INotificationViewItemProgressState {\n\tinfinite?: boolean;\n\ttotal?: number;\n\tworked?: number;\n\tdone?: boolean;\n}\n\nexport interface INotificationViewItemProgress extends INotificationProgress {\n\treadonly state: INotificationViewItemProgressState;\n\n\tdispose(): void;\n}\n\nexport class NotificationViewItemProgress\n\textends Disposable\n\timplements INotificationViewItemProgress\n{\n\tprivate readonly _state: INotificationViewItemProgressState;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._state = Object.create(null);\n\t}\n\n\tget state(): INotificationViewItemProgressState {\n\t\treturn this._state;\n\t}\n\n\tinfinite(): void {\n\t\tif (this._state.infinite) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.infinite = true;\n\n\t\tthis._state.total = undefined;\n\t\tthis._state.worked = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tdone(): void {\n\t\tif (this._state.done) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.done = true;\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.total = undefined;\n\t\tthis._state.worked = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\ttotal(value: number): void {\n\t\tif (this._state.total === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.total = value;\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tworked(value: number): void {\n\t\tif (typeof this._state.worked === \"number\") {\n\t\t\tthis._state.worked += value;\n\t\t} else {\n\t\t\tthis._state.worked = value;\n\t\t}\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n}\n\nexport interface IMessageLink {\n\thref: string;\n\tname: string;\n\ttitle: string;\n\toffset: number;\n\tlength: number;\n}\n\nexport interface INotificationMessage {\n\traw: string;\n\toriginal: NotificationMessage;\n\tlinkedText: LinkedText;\n}\n\nexport class NotificationViewItem\n\textends Disposable\n\timplements INotificationViewItem\n{\n\tprivate static readonly MAX_MESSAGE_LENGTH = 1000;\n\n\tprivate _expanded: boolean | undefined;\n\tprivate _visible = false;\n\n\tprivate _actions: INotificationActions | undefined;\n\tprivate _progress: NotificationViewItemProgress | undefined;\n\n\tprivate readonly _onDidChangeExpansion = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeExpansion = this._onDidChangeExpansion.event;\n\n\tprivate readonly _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate readonly _onDidChangeContent = this._register(\n\t\tnew Emitter<INotificationViewItemContentChangeEvent>(),\n\t);\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeVisibility = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tstatic create(\n\t\tnotification: INotification,\n\t\tfilter: INotificationsFilter,\n\t): INotificationViewItem | undefined {\n\t\tif (\n\t\t\t!notification ||\n\t\t\t!notification.message ||\n\t\t\tisCancellationError(notification.message)\n\t\t) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tlet severity: Severity;\n\t\tif (typeof notification.severity === \"number\") {\n\t\t\tseverity = notification.severity;\n\t\t} else {\n\t\t\tseverity = Severity.Info;\n\t\t}\n\n\t\tconst message = NotificationViewItem.parseNotificationMessage(\n\t\t\tnotification.message,\n\t\t);\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tlet actions: INotificationActions | undefined;\n\t\tif (notification.actions) {\n\t\t\tactions = notification.actions;\n\t\t} else if (isErrorWithActions(notification.message)) {\n\t\t\tactions = { primary: notification.message.actions };\n\t\t}\n\n\t\tlet priority = notification.priority ?? NotificationPriority.DEFAULT;\n\t\tif (\n\t\t\tpriority === NotificationPriority.DEFAULT &&\n\t\t\tseverity !== Severity.Error\n\t\t) {\n\t\t\tif (filter.global === NotificationsFilter.ERROR) {\n\t\t\t\tpriority = NotificationPriority.SILENT; // filtered globally\n\t\t\t} else if (\n\t\t\t\tisNotificationSource(notification.source) &&\n\t\t\t\tfilter.sources.get(notification.source.id) ===\n\t\t\t\t\tNotificationsFilter.ERROR\n\t\t\t) {\n\t\t\t\tpriority = NotificationPriority.SILENT; // filtered by source\n\t\t\t}\n\t\t}\n\n\t\treturn new NotificationViewItem(\n\t\t\tnotification.id,\n\t\t\tseverity,\n\t\t\tnotification.sticky,\n\t\t\tpriority,\n\t\t\tmessage,\n\t\t\tnotification.source,\n\t\t\tnotification.progress,\n\t\t\tactions,\n\t\t);\n\t}\n\n\tprivate static parseNotificationMessage(\n\t\tinput: NotificationMessage,\n\t): INotificationMessage | undefined {\n\t\tlet message: string | undefined;\n\t\tif (input instanceof Error) {\n\t\t\tmessage = toErrorMessage(input, false);\n\t\t} else if (typeof input === \"string\") {\n\t\t\tmessage = input;\n\t\t}\n\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tconst raw = message;\n\n\t\t// Make sure message is in the limits\n\t\tif (message.length > NotificationViewItem.MAX_MESSAGE_LENGTH) {\n\t\t\tmessage = `${message.substr(0, NotificationViewItem.MAX_MESSAGE_LENGTH)}...`;\n\t\t}\n\n\t\t// Remove newlines from messages as we do not support that and it makes link parsing hard\n\t\tmessage = message.replace(/(\\r\\n|\\n|\\r)/gm, \" \").trim();\n\n\t\t// Parse Links\n\t\tconst linkedText = parseLinkedText(message);\n\n\t\treturn { raw, linkedText, original: input };\n\t}\n\n\tprivate constructor(\n\t\treadonly id: string | undefined,\n\t\tprivate _severity: Severity,\n\t\tprivate _sticky: boolean | undefined,\n\t\tprivate _priority: NotificationPriority,\n\t\tprivate _message: INotificationMessage,\n\t\tprivate _source: string | INotificationSource | undefined,\n\t\tprogress: INotificationProgressProperties | undefined,\n\t\tactions?: INotificationActions,\n\t) {\n\t\tsuper();\n\n\t\tif (progress) {\n\t\t\tthis.setProgress(progress);\n\t\t}\n\n\t\tthis.setActions(actions);\n\t}\n\n\tprivate setProgress(progress: INotificationProgressProperties): void {\n\t\tif (progress.infinite) {\n\t\t\tthis.progress.infinite();\n\t\t} else if (progress.total) {\n\t\t\tthis.progress.total(progress.total);\n\n\t\t\tif (progress.worked) {\n\t\t\t\tthis.progress.worked(progress.worked);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setActions(\n\t\tactions: INotificationActions = { primary: [], secondary: [] },\n\t): void {\n\t\tthis._actions = {\n\t\t\tprimary: Array.isArray(actions.primary) ? actions.primary : [],\n\t\t\tsecondary: Array.isArray(actions.secondary)\n\t\t\t\t? actions.secondary\n\t\t\t\t: [],\n\t\t};\n\n\t\tthis._expanded = actions.primary && actions.primary.length > 0;\n\t}\n\n\tget canCollapse(): boolean {\n\t\treturn !this.hasActions;\n\t}\n\n\tget expanded(): boolean {\n\t\treturn !!this._expanded;\n\t}\n\n\tget severity(): Severity {\n\t\treturn this._severity;\n\t}\n\n\tget sticky(): boolean {\n\t\tif (this._sticky) {\n\t\t\treturn true; // explicitly sticky\n\t\t}\n\n\t\tconst hasActions = this.hasActions;\n\t\tif (\n\t\t\t(hasActions && this._severity === Severity.Error) || // notification errors with actions are sticky\n\t\t\t(!hasActions && this._expanded) || // notifications that got expanded are sticky\n\t\t\t(this._progress && !this._progress.state.done) // notifications with running progress are sticky\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false; // not sticky\n\t}\n\n\tget priority(): NotificationPriority {\n\t\treturn this._priority;\n\t}\n\n\tprivate get hasActions(): boolean {\n\t\tif (!this._actions) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._actions.primary) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._actions.primary.length > 0;\n\t}\n\n\tget hasProgress(): boolean {\n\t\treturn !!this._progress;\n\t}\n\n\tget progress(): INotificationViewItemProgress {\n\t\tif (!this._progress) {\n\t\t\tthis._progress = this._register(new NotificationViewItemProgress());\n\t\t\tthis._register(\n\t\t\t\tthis._progress.onDidChange(() =>\n\t\t\t\t\tthis._onDidChangeContent.fire({\n\t\t\t\t\t\tkind: NotificationViewItemContentChangeKind.PROGRESS,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this._progress;\n\t}\n\n\tget message(): INotificationMessage {\n\t\treturn this._message;\n\t}\n\n\tget source(): string | undefined {\n\t\treturn typeof this._source === \"string\"\n\t\t\t? this._source\n\t\t\t: this._source\n\t\t\t\t? this._source.label\n\t\t\t\t: undefined;\n\t}\n\n\tget sourceId(): string | undefined {\n\t\treturn this._source &&\n\t\t\ttypeof this._source !== \"string\" &&\n\t\t\t\"id\" in this._source\n\t\t\t? this._source.id\n\t\t\t: undefined;\n\t}\n\n\tget actions(): INotificationActions | undefined {\n\t\treturn this._actions;\n\t}\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tupdateSeverity(severity: Severity): void {\n\t\tif (severity === this._severity) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._severity = severity;\n\t\tthis._onDidChangeContent.fire({\n\t\t\tkind: NotificationViewItemContentChangeKind.SEVERITY,\n\t\t});\n\t}\n\n\tupdateMessage(input: NotificationMessage): void {\n\t\tconst message = NotificationViewItem.parseNotificationMessage(input);\n\t\tif (!message || message.raw === this._message.raw) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._message = message;\n\t\tthis._onDidChangeContent.fire({\n\t\t\tkind: NotificationViewItemContentChangeKind.MESSAGE,\n\t\t});\n\t}\n\n\tupdateActions(actions?: INotificationActions): void {\n\t\tthis.setActions(actions);\n\t\tthis._onDidChangeContent.fire({\n\t\t\tkind: NotificationViewItemContentChangeKind.ACTIONS,\n\t\t});\n\t}\n\n\tupdateVisibility(visible: boolean): void {\n\t\tif (this._visible !== visible) {\n\t\t\tthis._visible = visible;\n\n\t\t\tthis._onDidChangeVisibility.fire(visible);\n\t\t}\n\t}\n\n\texpand(): void {\n\t\tif (this._expanded || !this.canCollapse) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._expanded = true;\n\t\tthis._onDidChangeExpansion.fire();\n\t}\n\n\tcollapse(skipEvents?: boolean): void {\n\t\tif (!this._expanded || !this.canCollapse) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._expanded = false;\n\n\t\tif (!skipEvents) {\n\t\t\tthis._onDidChangeExpansion.fire();\n\t\t}\n\t}\n\n\ttoggle(): void {\n\t\tif (this._expanded) {\n\t\t\tthis.collapse();\n\t\t} else {\n\t\t\tthis.expand();\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tthis._onDidClose.fire();\n\n\t\tthis.dispose();\n\t}\n\n\tequals(other: INotificationViewItem): boolean {\n\t\tif (this.hasProgress || other.hasProgress) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof this.id === \"string\" || typeof other.id === \"string\") {\n\t\t\treturn this.id === other.id;\n\t\t}\n\n\t\tif (typeof this._source === \"object\") {\n\t\t\tif (\n\t\t\t\tthis._source.label !== other.source ||\n\t\t\t\tthis._source.id !== other.sourceId\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (this._source !== other.source) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._message.raw !== other.message.raw) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst primaryActions = (this._actions && this._actions.primary) || [];\n\t\tconst otherPrimaryActions =\n\t\t\t(other.actions && other.actions.primary) || [];\n\t\treturn equals(\n\t\t\tprimaryActions,\n\t\t\totherPrimaryActions,\n\t\t\t(action, otherAction) =>\n\t\t\t\taction.id + action.label === otherAction.id + otherAction.label,\n\t\t);\n\t}\n}\n\nexport class ChoiceAction extends Action {\n\tprivate readonly _onDidRun = this._register(new Emitter<void>());\n\treadonly onDidRun = this._onDidRun.event;\n\n\tprivate readonly _keepOpen: boolean;\n\tprivate readonly _menu: ChoiceAction[] | undefined;\n\n\tconstructor(id: string, choice: IPromptChoice) {\n\t\tsuper(id, choice.label, undefined, true, async () => {\n\t\t\t// Pass to runner\n\t\t\tchoice.run();\n\n\t\t\t// Emit Event\n\t\t\tthis._onDidRun.fire();\n\t\t});\n\n\t\tthis._keepOpen = !!choice.keepOpen;\n\t\tthis._menu =\n\t\t\t!choice.isSecondary && (<IPromptChoiceWithMenu>choice).menu\n\t\t\t\t? (<IPromptChoiceWithMenu>choice).menu.map(\n\t\t\t\t\t\t(c, index) => new ChoiceAction(`${id}.${index}`, c),\n\t\t\t\t\t)\n\t\t\t\t: undefined;\n\t}\n\n\tget menu(): ChoiceAction[] | undefined {\n\t\treturn this._menu;\n\t}\n\n\tget keepOpen(): boolean {\n\t\treturn this._keepOpen;\n\t}\n}\n\nclass StatusMessageViewItem {\n\tstatic create(\n\t\tnotification: NotificationMessage,\n\t\toptions?: IStatusMessageOptions,\n\t): IStatusMessageViewItem | undefined {\n\t\tif (!notification || isCancellationError(notification)) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tlet message: string | undefined;\n\t\tif (notification instanceof Error) {\n\t\t\tmessage = toErrorMessage(notification, false);\n\t\t} else if (typeof notification === \"string\") {\n\t\t\tmessage = notification;\n\t\t}\n\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\treturn { message, options };\n\t}\n}\n"],
  "mappings": "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",
  "names": ["NotificationChangeType", "StatusMessageChangeType", "item", "NotificationViewItemContentChangeKind"]
}
