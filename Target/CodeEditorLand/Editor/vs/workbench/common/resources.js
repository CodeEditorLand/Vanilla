var h=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=(l,d,e,s)=>{for(var r=s>1?void 0:s?m(d,e):d,i=l.length-1,t;i>=0;i--)(t=l[i])&&(r=(s?t(d,e,r):t(r))||r);return s&&r&&h(d,e,r),r},x=(l,d)=>(e,s)=>d(e,s,l);import{Emitter as F}from"../../../vs/base/common/event.js";import{getDriveLetter as v}from"../../../vs/base/common/extpath.js";import{parse as g}from"../../../vs/base/common/glob.js";import{Disposable as C}from"../../../vs/base/common/lifecycle.js";import{ResourceSet as c}from"../../../vs/base/common/map.js";import{Schemas as T}from"../../../vs/base/common/network.js";import{equals as E}from"../../../vs/base/common/objects.js";import{isAbsolute as P}from"../../../vs/base/common/path.js";import{relativePath as O}from"../../../vs/base/common/resources.js";import{URI as I}from"../../../vs/base/common/uri.js";import{IConfigurationService as L}from"../../../vs/platform/configuration/common/configuration.js";import{IWorkspaceContextService as S}from"../../../vs/platform/workspace/common/workspace.js";let n=class extends C{constructor(e,s,r,i){super();this.getExpression=e;this.shouldUpdate=s;this.contextService=r;this.configurationService=i;this.updateExpressions(!1),this.registerListeners()}static NO_FOLDER=null;_onExpressionChange=this._register(new F);onExpressionChange=this._onExpressionChange.event;mapFolderToParsedExpression=new Map;mapFolderToConfiguredExpression=new Map;registerListeners(){this._register(this.configurationService.onDidChangeConfiguration(e=>{this.shouldUpdate(e)&&this.updateExpressions(!0)})),this._register(this.contextService.onDidChangeWorkspaceFolders(()=>this.updateExpressions(!0)))}updateExpressions(e){let s=!1;for(const o of this.contextService.getWorkspace().folders){const p=o.uri.toString(),a=this.doGetExpression(o.uri),f=this.mapFolderToConfiguredExpression.get(p);a?(!f||!E(f.expression,a.expression))&&(s=!0,this.mapFolderToParsedExpression.set(p,g(a.expression)),this.mapFolderToConfiguredExpression.set(p,a)):f&&(s=!0,this.mapFolderToParsedExpression.delete(p),this.mapFolderToConfiguredExpression.delete(p))}const r=new c(this.contextService.getWorkspace().folders.map(o=>o.uri));for(const[o]of this.mapFolderToConfiguredExpression)o!==n.NO_FOLDER&&(r.has(I.parse(o))||(this.mapFolderToParsedExpression.delete(o),this.mapFolderToConfiguredExpression.delete(o),s=!0));const i=this.doGetExpression(void 0),t=this.mapFolderToConfiguredExpression.get(n.NO_FOLDER);i?(!t||!E(t.expression,i.expression))&&(s=!0,this.mapFolderToParsedExpression.set(n.NO_FOLDER,g(i.expression)),this.mapFolderToConfiguredExpression.set(n.NO_FOLDER,i)):t&&(s=!0,this.mapFolderToParsedExpression.delete(n.NO_FOLDER),this.mapFolderToConfiguredExpression.delete(n.NO_FOLDER)),e&&s&&this._onExpressionChange.fire()}doGetExpression(e){const s=this.getExpression(e);if(!s)return;const r=Object.keys(s);if(r.length===0)return;let i=!1;const t=Object.create(null);for(const o of r){i||(i=P(o));let p=o;const a=v(p,!0);if(a){const f=a.toLowerCase();a!==a.toLowerCase()&&(p=`${f}${p.substring(1)}`)}t[p]=s[o]}return{expression:t,hasAbsolutePath:i}}matches(e,s){if(this.mapFolderToParsedExpression.size===0)return!1;const r=this.contextService.getWorkspaceFolder(e);let i,t;if(r&&this.mapFolderToParsedExpression.has(r.uri.toString())?(i=this.mapFolderToParsedExpression.get(r.uri.toString()),t=this.mapFolderToConfiguredExpression.get(r.uri.toString())):(i=this.mapFolderToParsedExpression.get(n.NO_FOLDER),t=this.mapFolderToConfiguredExpression.get(n.NO_FOLDER)),!i)return!1;let o;return r?o=O(r.uri,e):o=this.uriToPath(e),typeof o=="string"&&i(o,void 0,s)?!0:o!==this.uriToPath(e)&&t?.hasAbsolutePath?!!i(this.uriToPath(e),void 0,s):!1}uriToPath(e){return e.scheme===T.file?e.fsPath:e.path}};n=u([x(2,S),x(3,L)],n);export{n as ResourceGlobMatcher};
