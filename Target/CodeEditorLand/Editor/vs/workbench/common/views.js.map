{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/views.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Command } from '../../editor/common/languages.js';\nimport { UriComponents, URI } from '../../base/common/uri.js';\nimport { Event, Emitter } from '../../base/common/event.js';\nimport { ContextKeyExpression } from '../../platform/contextkey/common/contextkey.js';\nimport { localize } from '../../nls.js';\nimport { createDecorator } from '../../platform/instantiation/common/instantiation.js';\nimport { IDisposable, Disposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../base/common/themables.js';\nimport { getOrSet, SetMap } from '../../base/common/map.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { IKeybindings } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ExtensionIdentifier } from '../../platform/extensions/common/extensions.js';\nimport { SyncDescriptor } from '../../platform/instantiation/common/descriptors.js';\nimport { IProgressIndicator } from '../../platform/progress/common/progress.js';\nimport Severity from '../../base/common/severity.js';\nimport { IAccessibilityInformation } from '../../platform/accessibility/common/accessibility.js';\nimport { IMarkdownString, MarkdownString } from '../../base/common/htmlContent.js';\nimport { mixin } from '../../base/common/objects.js';\nimport { Codicon } from '../../base/common/codicons.js';\nimport { registerIcon } from '../../platform/theme/common/iconRegistry.js';\nimport { CancellationToken } from '../../base/common/cancellation.js';\nimport { VSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { ILocalizedString } from '../../platform/action/common/action.js';\n\nexport const VIEWS_LOG_ID = 'views';\nexport const VIEWS_LOG_NAME = localize('views log', \"Views\");\nexport const defaultViewIcon = registerIcon('default-view-icon', Codicon.window, localize('defaultViewIcon', 'Default view icon.'));\n\nexport namespace Extensions {\n\texport const ViewContainersRegistry = 'workbench.registry.view.containers';\n\texport const ViewsRegistry = 'workbench.registry.view';\n}\n\nexport const enum ViewContainerLocation {\n\tSidebar,\n\tPanel,\n\tAuxiliaryBar\n}\n\nexport const ViewContainerLocations = [ViewContainerLocation.Sidebar, ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar];\n\nexport function ViewContainerLocationToString(viewContainerLocation: ViewContainerLocation) {\n\tswitch (viewContainerLocation) {\n\t\tcase ViewContainerLocation.Sidebar: return 'sidebar';\n\t\tcase ViewContainerLocation.Panel: return 'panel';\n\t\tcase ViewContainerLocation.AuxiliaryBar: return 'auxiliarybar';\n\t}\n}\n\ntype OpenCommandActionDescriptor = {\n\treadonly id: string;\n\treadonly title?: ILocalizedString | string;\n\treadonly mnemonicTitle?: string;\n\treadonly order?: number;\n\treadonly keybindings?: IKeybindings & { when?: ContextKeyExpression };\n};\n\n/**\n * View Container Contexts\n */\n\nexport interface IViewContainerDescriptor {\n\n\t/**\n\t * The id of the view container\n\t */\n\treadonly id: string;\n\n\t/**\n\t * The title of the view container\n\t */\n\treadonly title: ILocalizedString;\n\n\t/**\n\t * Icon representation of the View container\n\t */\n\treadonly icon?: ThemeIcon | URI;\n\n\t/**\n\t * Order of the view container.\n\t */\n\treadonly order?: number;\n\n\t/**\n\t * IViewPaneContainer Ctor to instantiate\n\t */\n\treadonly ctorDescriptor: SyncDescriptor<IViewPaneContainer>;\n\n\t/**\n\t * Descriptor for open view container command\n\t * If not provided, view container info (id, title) is used.\n\t *\n\t * Note: To prevent registering open command, use `doNotRegisterOpenCommand` flag while registering the view container\n\t */\n\treadonly openCommandActionDescriptor?: OpenCommandActionDescriptor;\n\n\t/**\n\t * Storage id to use to store the view container state.\n\t * If not provided, it will be derived.\n\t */\n\treadonly storageId?: string;\n\n\t/**\n\t * If enabled, view container is not shown if it has no active views.\n\t */\n\treadonly hideIfEmpty?: boolean;\n\n\t/**\n\t * Id of the extension that contributed the view container\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly alwaysUseContainerInfo?: boolean;\n\n\treadonly viewOrderDelegate?: ViewOrderDelegate;\n\n\treadonly rejectAddedViews?: boolean;\n\n\trequestedIndex?: number;\n}\n\nexport interface IViewContainersRegistry {\n\t/**\n\t * An event that is triggered when a view container is registered.\n\t */\n\treadonly onDidRegister: Event<{ viewContainer: ViewContainer; viewContainerLocation: ViewContainerLocation }>;\n\n\t/**\n\t * An event that is triggered when a view container is deregistered.\n\t */\n\treadonly onDidDeregister: Event<{ viewContainer: ViewContainer; viewContainerLocation: ViewContainerLocation }>;\n\n\t/**\n\t * All registered view containers\n\t */\n\treadonly all: ViewContainer[];\n\n\t/**\n\t * Registers a view container to given location.\n\t * No op if a view container is already registered.\n\t *\n\t * @param viewContainerDescriptor descriptor of view container\n\t * @param location location of the view container\n\t *\n\t * @returns the registered ViewContainer.\n\t */\n\tregisterViewContainer(viewContainerDescriptor: IViewContainerDescriptor, location: ViewContainerLocation, options?: { isDefault?: boolean; doNotRegisterOpenCommand?: boolean }): ViewContainer;\n\n\t/**\n\t * Deregisters the given view container\n\t * No op if the view container is not registered\n\t */\n\tderegisterViewContainer(viewContainer: ViewContainer): void;\n\n\t/**\n\t * Returns the view container with given id.\n\t *\n\t * @returns the view container with given id.\n\t */\n\tget(id: string): ViewContainer | undefined;\n\n\t/**\n\t * Returns all view containers in the given location\n\t */\n\tgetViewContainers(location: ViewContainerLocation): ViewContainer[];\n\n\t/**\n\t * Returns the view container location\n\t */\n\tgetViewContainerLocation(container: ViewContainer): ViewContainerLocation;\n\n\t/**\n\t * Return the default view container from the given location\n\t */\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined;\n}\n\ninterface ViewOrderDelegate {\n\tgetOrder(group?: string): number | undefined;\n}\n\nexport interface ViewContainer extends IViewContainerDescriptor { }\n\ninterface RelaxedViewContainer extends ViewContainer {\n\n\topenCommandActionDescriptor?: OpenCommandActionDescriptor;\n}\n\nclass ViewContainersRegistryImpl extends Disposable implements IViewContainersRegistry {\n\n\tprivate readonly _onDidRegister = this._register(new Emitter<{ viewContainer: ViewContainer; viewContainerLocation: ViewContainerLocation }>());\n\treadonly onDidRegister: Event<{ viewContainer: ViewContainer; viewContainerLocation: ViewContainerLocation }> = this._onDidRegister.event;\n\n\tprivate readonly _onDidDeregister = this._register(new Emitter<{ viewContainer: ViewContainer; viewContainerLocation: ViewContainerLocation }>());\n\treadonly onDidDeregister: Event<{ viewContainer: ViewContainer; viewContainerLocation: ViewContainerLocation }> = this._onDidDeregister.event;\n\n\tprivate readonly viewContainers: Map<ViewContainerLocation, ViewContainer[]> = new Map<ViewContainerLocation, ViewContainer[]>();\n\tprivate readonly defaultViewContainers: ViewContainer[] = [];\n\n\tget all(): ViewContainer[] {\n\t\treturn [...this.viewContainers.values()].flat();\n\t}\n\n\tregisterViewContainer(viewContainerDescriptor: IViewContainerDescriptor, viewContainerLocation: ViewContainerLocation, options?: { isDefault?: boolean; doNotRegisterOpenCommand?: boolean }): ViewContainer {\n\t\tconst existing = this.get(viewContainerDescriptor.id);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst viewContainer: RelaxedViewContainer = viewContainerDescriptor;\n\t\tviewContainer.openCommandActionDescriptor = options?.doNotRegisterOpenCommand ? undefined : (viewContainer.openCommandActionDescriptor ?? { id: viewContainer.id });\n\t\tconst viewContainers = getOrSet(this.viewContainers, viewContainerLocation, []);\n\t\tviewContainers.push(viewContainer);\n\t\tif (options?.isDefault) {\n\t\t\tthis.defaultViewContainers.push(viewContainer);\n\t\t}\n\t\tthis._onDidRegister.fire({ viewContainer, viewContainerLocation });\n\t\treturn viewContainer;\n\t}\n\n\tderegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tfor (const viewContainerLocation of this.viewContainers.keys()) {\n\t\t\tconst viewContainers = this.viewContainers.get(viewContainerLocation)!;\n\t\t\tconst index = viewContainers?.indexOf(viewContainer);\n\t\t\tif (index !== -1) {\n\t\t\t\tviewContainers?.splice(index, 1);\n\t\t\t\tif (viewContainers.length === 0) {\n\t\t\t\t\tthis.viewContainers.delete(viewContainerLocation);\n\t\t\t\t}\n\t\t\t\tthis._onDidDeregister.fire({ viewContainer, viewContainerLocation });\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(id: string): ViewContainer | undefined {\n\t\treturn this.all.filter(viewContainer => viewContainer.id === id)[0];\n\t}\n\n\tgetViewContainers(location: ViewContainerLocation): ViewContainer[] {\n\t\treturn [...(this.viewContainers.get(location) || [])];\n\t}\n\n\tgetViewContainerLocation(container: ViewContainer): ViewContainerLocation {\n\t\treturn [...this.viewContainers.keys()].filter(location => this.getViewContainers(location).filter(viewContainer => viewContainer?.id === container.id).length > 0)[0];\n\t}\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined {\n\t\treturn this.defaultViewContainers.find(viewContainer => this.getViewContainerLocation(viewContainer) === location);\n\t}\n}\n\nRegistry.add(Extensions.ViewContainersRegistry, new ViewContainersRegistryImpl());\n\nexport interface IViewDescriptor {\n\n\treadonly type?: string;\n\n\treadonly id: string;\n\n\treadonly name: ILocalizedString;\n\n\treadonly ctorDescriptor: SyncDescriptor<IView>;\n\n\treadonly when?: ContextKeyExpression;\n\n\treadonly order?: number;\n\n\treadonly weight?: number;\n\n\treadonly collapsed?: boolean;\n\n\treadonly canToggleVisibility?: boolean;\n\n\treadonly canMoveView?: boolean;\n\n\treadonly containerIcon?: ThemeIcon | URI;\n\n\treadonly containerTitle?: string;\n\n\treadonly singleViewPaneContainerTitle?: string;\n\n\t// Applies only to newly created views\n\treadonly hideByDefault?: boolean;\n\n\treadonly workspace?: boolean;\n\n\treadonly focusCommand?: { id: string; keybindings?: IKeybindings };\n\n\t// For contributed remote explorer views\n\treadonly group?: string;\n\n\treadonly remoteAuthority?: string | string[];\n\treadonly virtualWorkspace?: string;\n\n\treadonly openCommandActionDescriptor?: OpenCommandActionDescriptor;\n\n\treadonly accessibilityHelpContent?: MarkdownString;\n}\n\nexport interface ICustomViewDescriptor extends IViewDescriptor {\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly originalContainerId: string;\n\treadonly treeView?: ITreeView;\n}\n\nexport interface IViewDescriptorRef {\n\tviewDescriptor: IViewDescriptor;\n\tindex: number;\n}\n\nexport interface IAddedViewDescriptorRef extends IViewDescriptorRef {\n\tcollapsed: boolean;\n\tsize?: number;\n}\n\nexport interface IAddedViewDescriptorState {\n\tviewDescriptor: IViewDescriptor;\n\tcollapsed?: boolean;\n\tvisible?: boolean;\n}\n\nexport interface IViewContainerModel {\n\n\treadonly viewContainer: ViewContainer;\n\n\treadonly title: string;\n\treadonly icon: ThemeIcon | URI | undefined;\n\treadonly keybindingId: string | undefined;\n\treadonly onDidChangeContainerInfo: Event<{ title?: boolean; icon?: boolean; keybindingId?: boolean; badgeEnablement?: boolean }>;\n\n\treadonly allViewDescriptors: ReadonlyArray<IViewDescriptor>;\n\treadonly onDidChangeAllViewDescriptors: Event<{ added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }>;\n\n\treadonly activeViewDescriptors: ReadonlyArray<IViewDescriptor>;\n\treadonly onDidChangeActiveViewDescriptors: Event<{ added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }>;\n\n\treadonly visibleViewDescriptors: ReadonlyArray<IViewDescriptor>;\n\treadonly onDidAddVisibleViewDescriptors: Event<IAddedViewDescriptorRef[]>;\n\treadonly onDidRemoveVisibleViewDescriptors: Event<IViewDescriptorRef[]>;\n\treadonly onDidMoveVisibleViewDescriptors: Event<{ from: IViewDescriptorRef; to: IViewDescriptorRef }>;\n\n\tisVisible(id: string): boolean;\n\tsetVisible(id: string, visible: boolean): void;\n\n\tisCollapsed(id: string): boolean;\n\tsetCollapsed(id: string, collapsed: boolean): void;\n\n\tgetSize(id: string): number | undefined;\n\tsetSizes(newSizes: readonly { id: string; size: number }[]): void;\n\n\tmove(from: string, to: string): void;\n}\n\nexport enum ViewContentGroups {\n\tOpen = '2_open',\n\tDebug = '4_debug',\n\tSCM = '5_scm',\n\tMore = '9_more'\n}\n\nexport interface IViewContentDescriptor {\n\treadonly content: string;\n\treadonly when?: ContextKeyExpression | 'default';\n\treadonly group?: string;\n\treadonly order?: number;\n\treadonly precondition?: ContextKeyExpression | undefined;\n}\n\nexport interface IViewsRegistry {\n\n\treadonly onViewsRegistered: Event<{ views: IViewDescriptor[]; viewContainer: ViewContainer }[]>;\n\n\treadonly onViewsDeregistered: Event<{ views: IViewDescriptor[]; viewContainer: ViewContainer }>;\n\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }>;\n\n\tregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tregisterViews2(views: { views: IViewDescriptor[]; viewContainer: ViewContainer }[]): void;\n\n\tderegisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tmoveViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tgetViews(viewContainer: ViewContainer): IViewDescriptor[];\n\n\tgetView(id: string): IViewDescriptor | null;\n\n\tgetViewContainer(id: string): ViewContainer | null;\n\n\treadonly onDidChangeViewWelcomeContent: Event<string>;\n\tregisterViewWelcomeContent(id: string, viewContent: IViewContentDescriptor): IDisposable;\n\tregisterViewWelcomeContent2<TKey>(id: string, viewContentMap: Map<TKey, IViewContentDescriptor>): Map<TKey, IDisposable>;\n\tgetViewWelcomeContent(id: string): IViewContentDescriptor[];\n}\n\nfunction compareViewContentDescriptors(a: IViewContentDescriptor, b: IViewContentDescriptor): number {\n\tconst aGroup = a.group ?? ViewContentGroups.More;\n\tconst bGroup = b.group ?? ViewContentGroups.More;\n\tif (aGroup !== bGroup) {\n\t\treturn aGroup.localeCompare(bGroup);\n\t}\n\treturn (a.order ?? 5) - (b.order ?? 5);\n}\n\nclass ViewsRegistry extends Disposable implements IViewsRegistry {\n\n\tprivate readonly _onViewsRegistered = this._register(new Emitter<{ views: IViewDescriptor[]; viewContainer: ViewContainer }[]>());\n\treadonly onViewsRegistered = this._onViewsRegistered.event;\n\n\tprivate readonly _onViewsDeregistered: Emitter<{ views: IViewDescriptor[]; viewContainer: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[]; viewContainer: ViewContainer }>());\n\treadonly onViewsDeregistered: Event<{ views: IViewDescriptor[]; viewContainer: ViewContainer }> = this._onViewsDeregistered.event;\n\n\tprivate readonly _onDidChangeContainer: Emitter<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }>());\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }> = this._onDidChangeContainer.event;\n\n\tprivate readonly _onDidChangeViewWelcomeContent: Emitter<string> = this._register(new Emitter<string>());\n\treadonly onDidChangeViewWelcomeContent: Event<string> = this._onDidChangeViewWelcomeContent.event;\n\n\tprivate _viewContainers: ViewContainer[] = [];\n\tprivate _views: Map<ViewContainer, IViewDescriptor[]> = new Map<ViewContainer, IViewDescriptor[]>();\n\tprivate _viewWelcomeContents = new SetMap<string, IViewContentDescriptor>();\n\n\tregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tthis.registerViews2([{ views, viewContainer }]);\n\t}\n\n\tregisterViews2(views: { views: IViewDescriptor[]; viewContainer: ViewContainer }[]): void {\n\t\tviews.forEach(({ views, viewContainer }) => this.addViews(views, viewContainer));\n\t\tthis._onViewsRegistered.fire(views);\n\t}\n\n\tderegisterViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tconst views = this.removeViews(viewDescriptors, viewContainer);\n\t\tif (views.length) {\n\t\t\tthis._onViewsDeregistered.fire({ views, viewContainer });\n\t\t}\n\t}\n\n\tmoveViews(viewsToMove: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tfor (const container of this._views.keys()) {\n\t\t\tif (container !== viewContainer) {\n\t\t\t\tconst views = this.removeViews(viewsToMove, container);\n\t\t\t\tif (views.length) {\n\t\t\t\t\tthis.addViews(views, viewContainer);\n\t\t\t\t\tthis._onDidChangeContainer.fire({ views, from: container, to: viewContainer });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetViews(loc: ViewContainer): IViewDescriptor[] {\n\t\treturn this._views.get(loc) || [];\n\t}\n\n\tgetView(id: string): IViewDescriptor | null {\n\t\tfor (const viewContainer of this._viewContainers) {\n\t\t\tconst viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === id)[0];\n\t\t\tif (viewDescriptor) {\n\t\t\t\treturn viewDescriptor;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetViewContainer(viewId: string): ViewContainer | null {\n\t\tfor (const viewContainer of this._viewContainers) {\n\t\t\tconst viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === viewId)[0];\n\t\t\tif (viewDescriptor) {\n\t\t\t\treturn viewContainer;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tregisterViewWelcomeContent(id: string, viewContent: IViewContentDescriptor): IDisposable {\n\t\tthis._viewWelcomeContents.add(id, viewContent);\n\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._viewWelcomeContents.delete(id, viewContent);\n\t\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\t\t});\n\t}\n\n\tregisterViewWelcomeContent2<TKey>(id: string, viewContentMap: Map<TKey, IViewContentDescriptor>): Map<TKey, IDisposable> {\n\t\tconst disposables = new Map<TKey, IDisposable>();\n\n\t\tfor (const [key, content] of viewContentMap) {\n\t\t\tthis._viewWelcomeContents.add(id, content);\n\n\t\t\tdisposables.set(key, toDisposable(() => {\n\t\t\t\tthis._viewWelcomeContents.delete(id, content);\n\t\t\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\t\t\t}));\n\t\t}\n\t\tthis._onDidChangeViewWelcomeContent.fire(id);\n\n\t\treturn disposables;\n\t}\n\n\tgetViewWelcomeContent(id: string): IViewContentDescriptor[] {\n\t\tconst result: IViewContentDescriptor[] = [];\n\t\tthis._viewWelcomeContents.forEach(id, descriptor => result.push(descriptor));\n\t\treturn result.sort(compareViewContentDescriptors);\n\t}\n\n\tprivate addViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tlet views = this._views.get(viewContainer);\n\t\tif (!views) {\n\t\t\tviews = [];\n\t\t\tthis._views.set(viewContainer, views);\n\t\t\tthis._viewContainers.push(viewContainer);\n\t\t}\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (this.getView(viewDescriptor.id) !== null) {\n\t\t\t\tthrow new Error(localize('duplicateId', \"A view with id '{0}' is already registered\", viewDescriptor.id));\n\t\t\t}\n\t\t\tviews.push(viewDescriptor);\n\t\t}\n\t}\n\n\tprivate removeViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): IViewDescriptor[] {\n\t\tconst views = this._views.get(viewContainer);\n\t\tif (!views) {\n\t\t\treturn [];\n\t\t}\n\t\tconst viewsToDeregister: IViewDescriptor[] = [];\n\t\tconst remaningViews: IViewDescriptor[] = [];\n\t\tfor (const view of views) {\n\t\t\tif (!viewDescriptors.includes(view)) {\n\t\t\t\tremaningViews.push(view);\n\t\t\t} else {\n\t\t\t\tviewsToDeregister.push(view);\n\t\t\t}\n\t\t}\n\t\tif (viewsToDeregister.length) {\n\t\t\tif (remaningViews.length) {\n\t\t\t\tthis._views.set(viewContainer, remaningViews);\n\t\t\t} else {\n\t\t\t\tthis._views.delete(viewContainer);\n\t\t\t\tthis._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);\n\t\t\t}\n\t\t}\n\t\treturn viewsToDeregister;\n\t}\n}\n\nRegistry.add(Extensions.ViewsRegistry, new ViewsRegistry());\n\nexport interface IView {\n\n\treadonly id: string;\n\n\tfocus(): void;\n\n\tisVisible(): boolean;\n\n\tisBodyVisible(): boolean;\n\n\tsetExpanded(expanded: boolean): boolean;\n\n\tgetProgressIndicator(): IProgressIndicator | undefined;\n}\n\nexport const IViewDescriptorService = createDecorator<IViewDescriptorService>('viewDescriptorService');\n\nexport enum ViewVisibilityState {\n\tDefault = 0,\n\tExpand = 1\n}\n\nexport interface IViewDescriptorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t// ViewContainers\n\treadonly viewContainers: ReadonlyArray<ViewContainer>;\n\treadonly onDidChangeViewContainers: Event<{ added: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }>; removed: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }> }>;\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined;\n\tgetViewContainerById(id: string): ViewContainer | null;\n\tisViewContainerRemovedPermanently(id: string): boolean;\n\tgetDefaultViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation | null;\n\tgetViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation | null;\n\tgetViewContainersByLocation(location: ViewContainerLocation): ViewContainer[];\n\tgetViewContainerModel(viewContainer: ViewContainer): IViewContainerModel;\n\n\treadonly onDidChangeContainerLocation: Event<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }>;\n\tmoveViewContainerToLocation(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number, reason?: string): void;\n\n\tgetViewContainerBadgeEnablementState(id: string): boolean;\n\tsetViewContainerBadgeEnablementState(id: string, badgesEnabled: boolean): void;\n\n\t// Views\n\tgetViewDescriptorById(id: string): IViewDescriptor | null;\n\tgetViewContainerByViewId(id: string): ViewContainer | null;\n\tgetDefaultContainerById(id: string): ViewContainer | null;\n\tgetViewLocationById(id: string): ViewContainerLocation | null;\n\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }>;\n\tmoveViewsToContainer(views: IViewDescriptor[], viewContainer: ViewContainer, visibilityState?: ViewVisibilityState, reason?: string): void;\n\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }>;\n\tmoveViewToLocation(view: IViewDescriptor, location: ViewContainerLocation, reason?: string): void;\n\n\treset(): void;\n}\n\n// Custom views\n\nexport interface ITreeView extends IDisposable {\n\n\tdataProvider: ITreeViewDataProvider | undefined;\n\n\tdragAndDropController?: ITreeViewDragAndDropController;\n\n\tshowCollapseAllAction: boolean;\n\n\tcanSelectMany: boolean;\n\n\tmanuallyManageCheckboxes: boolean;\n\n\tmessage?: string | IMarkdownString;\n\n\ttitle: string;\n\n\tdescription: string | undefined;\n\n\tbadge: IViewBadge | undefined;\n\n\treadonly visible: boolean;\n\n\treadonly onDidExpandItem: Event<ITreeItem>;\n\n\treadonly onDidCollapseItem: Event<ITreeItem>;\n\n\treadonly onDidChangeSelectionAndFocus: Event<{ selection: readonly ITreeItem[]; focus: ITreeItem }>;\n\n\treadonly onDidChangeVisibility: Event<boolean>;\n\n\treadonly onDidChangeActions: Event<void>;\n\n\treadonly onDidChangeTitle: Event<string>;\n\n\treadonly onDidChangeDescription: Event<string | undefined>;\n\n\treadonly onDidChangeWelcomeState: Event<void>;\n\n\treadonly onDidChangeCheckboxState: Event<readonly ITreeItem[]>;\n\n\treadonly container: any | undefined;\n\n\trefresh(treeItems?: readonly ITreeItem[]): Promise<void>;\n\n\tsetVisibility(visible: boolean): void;\n\n\tfocus(): void;\n\n\tlayout(height: number, width: number): void;\n\n\tgetOptimalWidth(): number;\n\n\treveal(item: ITreeItem): Promise<void>;\n\n\texpand(itemOrItems: ITreeItem | ITreeItem[]): Promise<void>;\n\n\tisCollapsed(item: ITreeItem): boolean;\n\n\tsetSelection(items: ITreeItem[]): void;\n\n\tgetSelection(): ITreeItem[];\n\n\tsetFocus(item?: ITreeItem): void;\n\n\tshow(container: any): void;\n}\n\nexport interface IRevealOptions {\n\n\tselect?: boolean;\n\n\tfocus?: boolean;\n\n\texpand?: boolean | number;\n\n}\n\nexport interface ITreeViewDescriptor extends IViewDescriptor {\n\ttreeView: ITreeView;\n}\n\nexport type TreeViewPaneHandleArg = {\n\t$treeViewId: string;\n\t$selectedTreeItems?: boolean;\n\t$focusedTreeItem?: boolean;\n};\n\nexport type TreeViewItemHandleArg = {\n\t$treeViewId: string;\n\t$treeItemHandle: string;\n};\n\nexport enum TreeItemCollapsibleState {\n\tNone = 0,\n\tCollapsed = 1,\n\tExpanded = 2\n}\n\nexport interface ITreeItemLabel {\n\n\tlabel: string;\n\n\thighlights?: [number, number][];\n\n\tstrikethrough?: boolean;\n\n}\n\nexport type TreeCommand = Command & { originalId?: string };\n\nexport interface ITreeItemCheckboxState {\n\tisChecked: boolean;\n\ttooltip?: string;\n\taccessibilityInformation?: IAccessibilityInformation;\n}\n\nexport interface ITreeItem {\n\n\thandle: string;\n\n\tparentHandle?: string;\n\n\tcollapsibleState: TreeItemCollapsibleState;\n\n\tlabel?: ITreeItemLabel;\n\n\tdescription?: string | boolean;\n\n\ticon?: UriComponents;\n\n\ticonDark?: UriComponents;\n\n\tthemeIcon?: ThemeIcon;\n\n\tresourceUri?: UriComponents;\n\n\ttooltip?: string | IMarkdownString;\n\n\tcontextValue?: string;\n\n\tcommand?: TreeCommand;\n\n\tchildren?: ITreeItem[];\n\n\tparent?: ITreeItem;\n\n\taccessibilityInformation?: IAccessibilityInformation;\n\n\tcheckbox?: ITreeItemCheckboxState;\n}\n\nexport class ResolvableTreeItem implements ITreeItem {\n\thandle!: string;\n\tparentHandle?: string;\n\tcollapsibleState!: TreeItemCollapsibleState;\n\tlabel?: ITreeItemLabel;\n\tdescription?: string | boolean;\n\ticon?: UriComponents;\n\ticonDark?: UriComponents;\n\tthemeIcon?: ThemeIcon;\n\tresourceUri?: UriComponents;\n\ttooltip?: string | IMarkdownString;\n\tcontextValue?: string;\n\tcommand?: Command & { originalId?: string };\n\tchildren?: ITreeItem[];\n\taccessibilityInformation?: IAccessibilityInformation;\n\tresolve: (token: CancellationToken) => Promise<void>;\n\tprivate resolved: boolean = false;\n\tprivate _hasResolve: boolean = false;\n\tconstructor(treeItem: ITreeItem, resolve?: ((token: CancellationToken) => Promise<ITreeItem | undefined>)) {\n\t\tmixin(this, treeItem);\n\t\tthis._hasResolve = !!resolve;\n\t\tthis.resolve = async (token: CancellationToken) => {\n\t\t\tif (resolve && !this.resolved) {\n\t\t\t\tconst resolvedItem = await resolve(token);\n\t\t\t\tif (resolvedItem) {\n\t\t\t\t\t// Resolvable elements. Currently tooltip and command.\n\t\t\t\t\tthis.tooltip = this.tooltip ?? resolvedItem.tooltip;\n\t\t\t\t\tthis.command = this.command ?? resolvedItem.command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\tthis.resolved = true;\n\t\t\t}\n\t\t};\n\t}\n\tget hasResolve(): boolean {\n\t\treturn this._hasResolve;\n\t}\n\tpublic resetResolve() {\n\t\tthis.resolved = false;\n\t}\n\tpublic asTreeItem(): ITreeItem {\n\t\treturn {\n\t\t\thandle: this.handle,\n\t\t\tparentHandle: this.parentHandle,\n\t\t\tcollapsibleState: this.collapsibleState,\n\t\t\tlabel: this.label,\n\t\t\tdescription: this.description,\n\t\t\ticon: this.icon,\n\t\t\ticonDark: this.iconDark,\n\t\t\tthemeIcon: this.themeIcon,\n\t\t\tresourceUri: this.resourceUri,\n\t\t\ttooltip: this.tooltip,\n\t\t\tcontextValue: this.contextValue,\n\t\t\tcommand: this.command,\n\t\t\tchildren: this.children,\n\t\t\taccessibilityInformation: this.accessibilityInformation\n\t\t};\n\t}\n}\n\nexport class NoTreeViewError extends Error {\n\toverride readonly name = 'NoTreeViewError';\n\tconstructor(treeViewId: string) {\n\t\tsuper(localize('treeView.notRegistered', 'No tree view with id \\'{0}\\' registered.', treeViewId));\n\t}\n\tstatic is(err: unknown): err is NoTreeViewError {\n\t\treturn !!err && (err as Error).name === 'NoTreeViewError';\n\t}\n}\n\nexport interface ITreeViewDataProvider {\n\treadonly isTreeEmpty?: boolean;\n\tonDidChangeEmpty?: Event<void>;\n\tgetChildren(element?: ITreeItem): Promise<ITreeItem[] | undefined>;\n}\n\nexport interface ITreeViewDragAndDropController {\n\treadonly dropMimeTypes: string[];\n\treadonly dragMimeTypes: string[];\n\thandleDrag(sourceTreeItemHandles: string[], operationUuid: string, token: CancellationToken): Promise<VSDataTransfer | undefined>;\n\thandleDrop(elements: VSDataTransfer, target: ITreeItem | undefined, token: CancellationToken, operationUuid?: string, sourceTreeId?: string, sourceTreeItemHandles?: string[]): Promise<void>;\n}\n\nexport interface IEditableData {\n\tvalidationMessage: (value: string) => { content: string; severity: Severity } | null;\n\tplaceholder?: string | null;\n\tstartingValue?: string | null;\n\tonFinish: (value: string, success: boolean) => Promise<void>;\n}\n\nexport interface IViewPaneContainer {\n\tonDidAddViews: Event<IView[]>;\n\tonDidRemoveViews: Event<IView[]>;\n\tonDidChangeViewVisibility: Event<IView>;\n\n\treadonly views: IView[];\n\n\tsetVisible(visible: boolean): void;\n\tisVisible(): boolean;\n\tfocus(): void;\n\tgetActionsContext(): unknown;\n\tgetView(viewId: string): IView | undefined;\n\ttoggleViewVisibility(viewId: string): void;\n}\n\nexport interface IViewBadge {\n\treadonly tooltip: string;\n\treadonly value: number;\n}\n"],
  "mappings": "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",
  "names": ["Extensions", "ViewContainerLocation", "ViewContentGroups", "views", "ViewVisibilityState", "TreeItemCollapsibleState"]
}
