{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from \"../../base/common/async.js\";\nimport { Emitter } from \"../../base/common/event.js\";\nimport { Disposable } from \"../../base/common/lifecycle.js\";\nimport { equals } from \"../../base/common/objects.js\";\nimport { OperatingSystem, isWindows } from \"../../base/common/platform.js\";\nimport type { URI } from \"../../base/common/uri.js\";\nimport { localize } from \"../../nls.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n\ttype IConfigurationValue,\n\ttype IInspectValue,\n} from \"../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\tConfigurationScope,\n\ttype IConfigurationNode,\n\ttype IConfigurationRegistry,\n} from \"../../platform/configuration/common/configurationRegistry.js\";\nimport { Registry } from \"../../platform/registry/common/platform.js\";\nimport {\n\ttype IUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n} from \"../../platform/workspace/common/workspace.js\";\nimport { IRemoteAgentService } from \"../services/remote/common/remoteAgentService.js\";\nimport type { IWorkbenchContribution } from \"./contributions.js\";\n\nexport const applicationConfigurationNodeBase =\n\tObject.freeze<IConfigurationNode>({\n\t\tid: \"application\",\n\t\torder: 100,\n\t\ttitle: localize(\"applicationConfigurationTitle\", \"Application\"),\n\t\ttype: \"object\",\n\t});\n\nexport const workbenchConfigurationNodeBase = Object.freeze<IConfigurationNode>(\n\t{\n\t\tid: \"workbench\",\n\t\torder: 7,\n\t\ttitle: localize(\"workbenchConfigurationTitle\", \"Workbench\"),\n\t\ttype: \"object\",\n\t},\n);\n\nexport const securityConfigurationNodeBase = Object.freeze<IConfigurationNode>({\n\tid: \"security\",\n\tscope: ConfigurationScope.APPLICATION,\n\ttitle: localize(\"securityConfigurationTitle\", \"Security\"),\n\ttype: \"object\",\n\torder: 7,\n});\n\nexport const problemsConfigurationNodeBase = Object.freeze<IConfigurationNode>({\n\tid: \"problems\",\n\ttitle: localize(\"problemsConfigurationTitle\", \"Problems\"),\n\ttype: \"object\",\n\torder: 101,\n});\n\nexport const windowConfigurationNodeBase = Object.freeze<IConfigurationNode>({\n\tid: \"window\",\n\torder: 8,\n\ttitle: localize(\"windowConfigurationTitle\", \"Window\"),\n\ttype: \"object\",\n});\n\nexport const Extensions = {\n\tConfigurationMigration: \"base.contributions.configuration.migration\",\n};\n\nexport type ConfigurationValue = { value: any | undefined /* Remove */ };\nexport type ConfigurationKeyValuePairs = [string, ConfigurationValue][];\nexport type ConfigurationMigrationFn = (\n\tvalue: any,\n\tvalueAccessor: (key: string) => any,\n) =>\n\t| ConfigurationValue\n\t| ConfigurationKeyValuePairs\n\t| Promise<ConfigurationValue | ConfigurationKeyValuePairs>;\nexport type ConfigurationMigration = {\n\tkey: string;\n\tmigrateFn: ConfigurationMigrationFn;\n};\n\nexport interface IConfigurationMigrationRegistry {\n\tregisterConfigurationMigrations(\n\t\tconfigurationMigrations: ConfigurationMigration[],\n\t): void;\n}\n\nclass ConfigurationMigrationRegistry\n\timplements IConfigurationMigrationRegistry\n{\n\treadonly migrations: ConfigurationMigration[] = [];\n\n\tprivate readonly _onDidRegisterConfigurationMigrations = new Emitter<\n\t\tConfigurationMigration[]\n\t>();\n\treadonly onDidRegisterConfigurationMigration =\n\t\tthis._onDidRegisterConfigurationMigrations.event;\n\n\tregisterConfigurationMigrations(\n\t\tconfigurationMigrations: ConfigurationMigration[],\n\t): void {\n\t\tthis.migrations.push(...configurationMigrations);\n\t}\n}\n\nconst configurationMigrationRegistry = new ConfigurationMigrationRegistry();\nRegistry.add(Extensions.ConfigurationMigration, configurationMigrationRegistry);\n\nexport class ConfigurationMigrationWorkbenchContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.configurationMigration\";\n\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly workspaceService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tthis.workspaceService.onDidChangeWorkspaceFolders(async (e) => {\n\t\t\t\tfor (const folder of e.added) {\n\t\t\t\t\tawait this.migrateConfigurationsForFolder(\n\t\t\t\t\t\tfolder,\n\t\t\t\t\t\tconfigurationMigrationRegistry.migrations,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.migrateConfigurations(configurationMigrationRegistry.migrations);\n\t\tthis._register(\n\t\t\tconfigurationMigrationRegistry.onDidRegisterConfigurationMigration(\n\t\t\t\t(migration) => this.migrateConfigurations(migration),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async migrateConfigurations(\n\t\tmigrations: ConfigurationMigration[],\n\t): Promise<void> {\n\t\tawait this.migrateConfigurationsForFolder(undefined, migrations);\n\t\tfor (const folder of this.workspaceService.getWorkspace().folders) {\n\t\t\tawait this.migrateConfigurationsForFolder(folder, migrations);\n\t\t}\n\t}\n\n\tprivate async migrateConfigurationsForFolder(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tmigrations: ConfigurationMigration[],\n\t): Promise<void> {\n\t\tawait Promise.all([\n\t\t\tmigrations.map((migration) =>\n\t\t\t\tthis.migrateConfigurationsForFolderAndOverride(\n\t\t\t\t\tmigration,\n\t\t\t\t\tfolder?.uri,\n\t\t\t\t),\n\t\t\t),\n\t\t]);\n\t}\n\n\tprivate async migrateConfigurationsForFolderAndOverride(\n\t\tmigration: ConfigurationMigration,\n\t\tresource?: URI,\n\t): Promise<void> {\n\t\tconst inspectData = this.configurationService.inspect(migration.key, {\n\t\t\tresource,\n\t\t});\n\n\t\tconst targetPairs: [\n\t\t\tkeyof IConfigurationValue<any>,\n\t\t\tConfigurationTarget,\n\t\t][] =\n\t\t\tthis.workspaceService.getWorkbenchState() ===\n\t\t\tWorkbenchState.WORKSPACE\n\t\t\t\t? [\n\t\t\t\t\t\t[\"user\", ConfigurationTarget.USER],\n\t\t\t\t\t\t[\"userLocal\", ConfigurationTarget.USER_LOCAL],\n\t\t\t\t\t\t[\"userRemote\", ConfigurationTarget.USER_REMOTE],\n\t\t\t\t\t\t[\"workspace\", ConfigurationTarget.WORKSPACE],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\"workspaceFolder\",\n\t\t\t\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t\t\t\t\t],\n\t\t\t\t\t]\n\t\t\t\t: [\n\t\t\t\t\t\t[\"user\", ConfigurationTarget.USER],\n\t\t\t\t\t\t[\"userLocal\", ConfigurationTarget.USER_LOCAL],\n\t\t\t\t\t\t[\"userRemote\", ConfigurationTarget.USER_REMOTE],\n\t\t\t\t\t\t[\"workspace\", ConfigurationTarget.WORKSPACE],\n\t\t\t\t\t];\n\t\tfor (const [dataKey, target] of targetPairs) {\n\t\t\tconst inspectValue = inspectData[dataKey] as\n\t\t\t\t| IInspectValue<any>\n\t\t\t\t| undefined;\n\t\t\tif (!inspectValue) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst migrationValues: [[string, ConfigurationValue], string[]][] =\n\t\t\t\t[];\n\n\t\t\tif (inspectValue.value !== undefined) {\n\t\t\t\tconst keyValuePairs = await this.runMigration(\n\t\t\t\t\tmigration,\n\t\t\t\t\tdataKey,\n\t\t\t\t\tinspectValue.value,\n\t\t\t\t\tresource,\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t\tfor (const keyValuePair of keyValuePairs ?? []) {\n\t\t\t\t\tmigrationValues.push([keyValuePair, []]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const { identifiers, value } of inspectValue.overrides ?? []) {\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tconst keyValuePairs = await this.runMigration(\n\t\t\t\t\t\tmigration,\n\t\t\t\t\t\tdataKey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tidentifiers,\n\t\t\t\t\t);\n\t\t\t\t\tfor (const keyValuePair of keyValuePairs ?? []) {\n\t\t\t\t\t\tmigrationValues.push([keyValuePair, identifiers]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (migrationValues.length) {\n\t\t\t\t// apply migrations\n\t\t\t\tawait Promise.allSettled(\n\t\t\t\t\tmigrationValues.map(\n\t\t\t\t\t\tasync ([[key, value], overrideIdentifiers]) =>\n\t\t\t\t\t\t\tthis.configurationService.updateValue(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tvalue.value,\n\t\t\t\t\t\t\t\t{ resource, overrideIdentifiers },\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async runMigration(\n\t\tmigration: ConfigurationMigration,\n\t\tdataKey: keyof IConfigurationValue<any>,\n\t\tvalue: any,\n\t\tresource: URI | undefined,\n\t\toverrideIdentifiers: string[] | undefined,\n\t): Promise<ConfigurationKeyValuePairs | undefined> {\n\t\tconst valueAccessor = (key: string) => {\n\t\t\tconst inspectData = this.configurationService.inspect(key, {\n\t\t\t\tresource,\n\t\t\t});\n\t\t\tconst inspectValue = inspectData[dataKey] as\n\t\t\t\t| IInspectValue<any>\n\t\t\t\t| undefined;\n\t\t\tif (!inspectValue) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (!overrideIdentifiers) {\n\t\t\t\treturn inspectValue.value;\n\t\t\t}\n\t\t\treturn inspectValue.overrides?.find(({ identifiers }) =>\n\t\t\t\tequals(identifiers, overrideIdentifiers),\n\t\t\t)?.value;\n\t\t};\n\t\tconst result = await migration.migrateFn(value, valueAccessor);\n\t\treturn Array.isArray(result) ? result : [[migration.key, result]];\n\t}\n}\n\nexport class DynamicWorkbenchSecurityConfiguration\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID =\n\t\t\"workbench.contrib.dynamicWorkbenchSecurityConfiguration\";\n\n\tprivate readonly _ready = new DeferredPromise<void>();\n\treadonly ready = this._ready.p;\n\n\tconstructor(\n\t\t@IRemoteAgentService\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper();\n\n\t\tthis.create();\n\t}\n\n\tprivate async create(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.doCreate();\n\t\t} finally {\n\t\t\tthis._ready.complete();\n\t\t}\n\t}\n\n\tprivate async doCreate(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\tconst remoteEnvironment =\n\t\t\t\tawait this.remoteAgentService.getEnvironment();\n\t\t\tif (remoteEnvironment?.os !== OperatingSystem.Windows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Windows: UNC allow list security configuration\n\t\tconst registry = Registry.as<IConfigurationRegistry>(\n\t\t\tConfigurationExtensions.Configuration,\n\t\t);\n\t\tregistry.registerConfiguration({\n\t\t\t...securityConfigurationNodeBase,\n\t\t\tproperties: {\n\t\t\t\t\"security.allowedUNCHosts\": {\n\t\t\t\t\ttype: \"array\",\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tpattern: \"^[^\\\\\\\\]+$\",\n\t\t\t\t\t\tpatternErrorMessage: localize(\n\t\t\t\t\t\t\t\"security.allowedUNCHosts.patternErrorMessage\",\n\t\t\t\t\t\t\t\"UNC host names must not contain backslashes.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\tdefault: [],\n\t\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\t\"security.allowedUNCHosts\",\n\t\t\t\t\t\t\"A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.\",\n\t\t\t\t\t),\n\t\t\t\t\tscope: ConfigurationScope.MACHINE,\n\t\t\t\t},\n\t\t\t\t\"security.restrictUNCAccess\": {\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdefault: true,\n\t\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\t\"security.restrictUNCAccess\",\n\t\t\t\t\t\t\"If enabled, only allows access to UNC host names that are allowed by the `#security.allowedUNCHosts#` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc.\",\n\t\t\t\t\t),\n\t\t\t\t\tscope: ConfigurationScope.MACHINE,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport const CONFIG_NEW_WINDOW_PROFILE = \"window.newWindowProfile\";\n\nexport class DynamicWindowConfiguration\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.dynamicWindowConfiguration\";\n\n\tprivate configurationNode: IConfigurationNode | undefined;\n\tprivate newWindowProfile: IUserDataProfile | undefined;\n\n\tconstructor(\n\t\t@IUserDataProfilesService\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis.registerNewWindowProfileConfiguration();\n\t\tthis._register(\n\t\t\tthis.userDataProfilesService.onDidChangeProfiles((e) =>\n\t\t\t\tthis.registerNewWindowProfileConfiguration(),\n\t\t\t),\n\t\t);\n\n\t\tthis.setNewWindowProfile();\n\t\tthis.checkAndResetNewWindowProfileConfig();\n\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.source !== ConfigurationTarget.DEFAULT &&\n\t\t\t\t\te.affectsConfiguration(CONFIG_NEW_WINDOW_PROFILE)\n\t\t\t\t) {\n\t\t\t\t\tthis.setNewWindowProfile();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.userDataProfilesService.onDidChangeProfiles(() =>\n\t\t\t\tthis.checkAndResetNewWindowProfileConfig(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate registerNewWindowProfileConfiguration(): void {\n\t\tconst registry = Registry.as<IConfigurationRegistry>(\n\t\t\tConfigurationExtensions.Configuration,\n\t\t);\n\t\tconst configurationNode: IConfigurationNode = {\n\t\t\t...windowConfigurationNodeBase,\n\t\t\tproperties: {\n\t\t\t\t[CONFIG_NEW_WINDOW_PROFILE]: {\n\t\t\t\t\ttype: [\"string\", \"null\"],\n\t\t\t\t\tdefault: null,\n\t\t\t\t\tenum: [\n\t\t\t\t\t\t...this.userDataProfilesService.profiles.map(\n\t\t\t\t\t\t\t(profile) => profile.name,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnull,\n\t\t\t\t\t],\n\t\t\t\t\tenumItemLabels: [\n\t\t\t\t\t\t...this.userDataProfilesService.profiles.map((p) => \"\"),\n\t\t\t\t\t\tlocalize(\"active window\", \"Active Window\"),\n\t\t\t\t\t],\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"newWindowProfile\",\n\t\t\t\t\t\t\"Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the Default profile if no active window exists.\",\n\t\t\t\t\t),\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (this.configurationNode) {\n\t\t\tregistry.updateConfigurations({\n\t\t\t\tadd: [configurationNode],\n\t\t\t\tremove: [this.configurationNode],\n\t\t\t});\n\t\t} else {\n\t\t\tregistry.registerConfiguration(configurationNode);\n\t\t}\n\t\tthis.configurationNode = configurationNode;\n\t}\n\n\tprivate setNewWindowProfile(): void {\n\t\tconst newWindowProfileName = this.configurationService.getValue(\n\t\t\tCONFIG_NEW_WINDOW_PROFILE,\n\t\t);\n\t\tthis.newWindowProfile = newWindowProfileName\n\t\t\t? this.userDataProfilesService.profiles.find(\n\t\t\t\t\t(profile) => profile.name === newWindowProfileName,\n\t\t\t\t)\n\t\t\t: undefined;\n\t}\n\n\tprivate checkAndResetNewWindowProfileConfig(): void {\n\t\tconst newWindowProfileName = this.configurationService.getValue(\n\t\t\tCONFIG_NEW_WINDOW_PROFILE,\n\t\t);\n\t\tif (!newWindowProfileName) {\n\t\t\treturn;\n\t\t}\n\t\tconst profile = this.newWindowProfile\n\t\t\t? this.userDataProfilesService.profiles.find(\n\t\t\t\t\t(profile) => profile.id === this.newWindowProfile!.id,\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tif (newWindowProfileName === profile?.name) {\n\t\t\treturn;\n\t\t}\n\t\tthis.configurationService.updateValue(\n\t\t\tCONFIG_NEW_WINDOW_PROFILE,\n\t\t\tprofile?.name,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["profile"]
}
