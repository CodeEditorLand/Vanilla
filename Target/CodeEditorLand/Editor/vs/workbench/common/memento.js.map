{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/memento.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget } from '../../platform/storage/common/storage.js';\nimport { isEmptyObject } from '../../base/common/types.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { DisposableStore } from '../../base/common/lifecycle.js';\nimport { Event } from '../../base/common/event.js';\n\nexport type MementoObject = { [key: string]: any };\n\nexport class Memento {\n\n\tprivate static readonly applicationMementos = new Map<string, ScopedMemento>();\n\tprivate static readonly profileMementos = new Map<string, ScopedMemento>();\n\tprivate static readonly workspaceMementos = new Map<string, ScopedMemento>();\n\n\tprivate static readonly COMMON_PREFIX = 'memento/';\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string, private storageService: IStorageService) {\n\t\tthis.id = Memento.COMMON_PREFIX + id;\n\t}\n\n\tgetMemento(scope: StorageScope, target: StorageTarget): MementoObject {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.WORKSPACE: {\n\t\t\t\tlet workspaceMemento = Memento.workspaceMementos.get(this.id);\n\t\t\t\tif (!workspaceMemento) {\n\t\t\t\t\tworkspaceMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\t\tMemento.workspaceMementos.set(this.id, workspaceMemento);\n\t\t\t\t}\n\n\t\t\t\treturn workspaceMemento.getMemento();\n\t\t\t}\n\n\t\t\tcase StorageScope.PROFILE: {\n\t\t\t\tlet profileMemento = Memento.profileMementos.get(this.id);\n\t\t\t\tif (!profileMemento) {\n\t\t\t\t\tprofileMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\t\tMemento.profileMementos.set(this.id, profileMemento);\n\t\t\t\t}\n\n\t\t\t\treturn profileMemento.getMemento();\n\t\t\t}\n\n\t\t\tcase StorageScope.APPLICATION: {\n\t\t\t\tlet applicationMemento = Memento.applicationMementos.get(this.id);\n\t\t\t\tif (!applicationMemento) {\n\t\t\t\t\tapplicationMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\t\tMemento.applicationMementos.set(this.id, applicationMemento);\n\t\t\t\t}\n\n\t\t\t\treturn applicationMemento.getMemento();\n\t\t\t}\n\t\t}\n\t}\n\n\tonDidChangeValue(scope: StorageScope, disposables: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\treturn this.storageService.onDidChangeValue(scope, this.id, disposables);\n\t}\n\n\tsaveMemento(): void {\n\t\tMemento.workspaceMementos.get(this.id)?.save();\n\t\tMemento.profileMementos.get(this.id)?.save();\n\t\tMemento.applicationMementos.get(this.id)?.save();\n\t}\n\n\treloadMemento(scope: StorageScope): void {\n\t\tlet memento: ScopedMemento | undefined;\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\tmemento = Memento.applicationMementos.get(this.id);\n\t\t\t\tbreak;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\tmemento = Memento.profileMementos.get(this.id);\n\t\t\t\tbreak;\n\t\t\tcase StorageScope.WORKSPACE:\n\t\t\t\tmemento = Memento.workspaceMementos.get(this.id);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tmemento?.reload();\n\t}\n\n\tstatic clear(scope: StorageScope): void {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.WORKSPACE:\n\t\t\t\tMemento.workspaceMementos.clear();\n\t\t\t\tbreak;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\tMemento.profileMementos.clear();\n\t\t\t\tbreak;\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\tMemento.applicationMementos.clear();\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nclass ScopedMemento {\n\n\tprivate mementoObj: MementoObject;\n\n\tconstructor(private id: string, private scope: StorageScope, private target: StorageTarget, private storageService: IStorageService) {\n\t\tthis.mementoObj = this.doLoad();\n\t}\n\n\tprivate doLoad(): MementoObject {\n\t\ttry {\n\t\t\treturn this.storageService.getObject<MementoObject>(this.id, this.scope, {});\n\t\t} catch (error) {\n\t\t\t// Seeing reports from users unable to open editors\n\t\t\t// from memento parsing exceptions. Log the contents\n\t\t\t// to diagnose further\n\t\t\t// https://github.com/microsoft/vscode/issues/102251\n\t\t\tonUnexpectedError(`[memento]: failed to parse contents: ${error} (id: ${this.id}, scope: ${this.scope}, contents: ${this.storageService.get(this.id, this.scope)})`);\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tgetMemento(): MementoObject {\n\t\treturn this.mementoObj;\n\t}\n\n\treload(): void {\n\n\t\t// Clear old\n\t\tfor (const name of Object.getOwnPropertyNames(this.mementoObj)) {\n\t\t\tdelete this.mementoObj[name];\n\t\t}\n\n\t\t// Assign new\n\t\tObject.assign(this.mementoObj, this.doLoad());\n\t}\n\n\tsave(): void {\n\t\tif (!isEmptyObject(this.mementoObj)) {\n\t\t\tthis.storageService.store(this.id, this.mementoObj, this.scope, this.target);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.id, this.scope);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
