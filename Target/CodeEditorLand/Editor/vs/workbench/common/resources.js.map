{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/resources.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../base/common/uri.js';\nimport { equals } from '../../base/common/objects.js';\nimport { isAbsolute } from '../../base/common/path.js';\nimport { Emitter } from '../../base/common/event.js';\nimport { relativePath } from '../../base/common/resources.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport { ParsedExpression, IExpression, parse } from '../../base/common/glob.js';\nimport { IWorkspaceContextService } from '../../platform/workspace/common/workspace.js';\nimport { IConfigurationService, IConfigurationChangeEvent } from '../../platform/configuration/common/configuration.js';\nimport { Schemas } from '../../base/common/network.js';\nimport { ResourceSet } from '../../base/common/map.js';\nimport { getDriveLetter } from '../../base/common/extpath.js';\n\ninterface IConfiguredExpression {\n\treadonly expression: IExpression;\n\treadonly hasAbsolutePath: boolean;\n}\n\nexport class ResourceGlobMatcher extends Disposable {\n\n\tprivate static readonly NO_FOLDER = null;\n\n\tprivate readonly _onExpressionChange = this._register(new Emitter<void>());\n\treadonly onExpressionChange = this._onExpressionChange.event;\n\n\tprivate readonly mapFolderToParsedExpression = new Map<string | null, ParsedExpression>();\n\tprivate readonly mapFolderToConfiguredExpression = new Map<string | null, IConfiguredExpression>();\n\n\tconstructor(\n\t\tprivate getExpression: (folder?: URI) => IExpression | undefined,\n\t\tprivate shouldUpdate: (event: IConfigurationChangeEvent) => boolean,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateExpressions(false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (this.shouldUpdate(e)) {\n\t\t\t\tthis.updateExpressions(true);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.updateExpressions(true)));\n\t}\n\n\tprivate updateExpressions(fromEvent: boolean): void {\n\t\tlet changed = false;\n\n\t\t// Add expressions per workspaces that got added\n\t\tfor (const folder of this.contextService.getWorkspace().folders) {\n\t\t\tconst folderUriStr = folder.uri.toString();\n\n\t\t\tconst newExpression = this.doGetExpression(folder.uri);\n\t\t\tconst currentExpression = this.mapFolderToConfiguredExpression.get(folderUriStr);\n\n\t\t\tif (newExpression) {\n\t\t\t\tif (!currentExpression || !equals(currentExpression.expression, newExpression.expression)) {\n\t\t\t\t\tchanged = true;\n\n\t\t\t\t\tthis.mapFolderToParsedExpression.set(folderUriStr, parse(newExpression.expression));\n\t\t\t\t\tthis.mapFolderToConfiguredExpression.set(folderUriStr, newExpression);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentExpression) {\n\t\t\t\t\tchanged = true;\n\n\t\t\t\t\tthis.mapFolderToParsedExpression.delete(folderUriStr);\n\t\t\t\t\tthis.mapFolderToConfiguredExpression.delete(folderUriStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove expressions per workspace no longer present\n\t\tconst foldersMap = new ResourceSet(this.contextService.getWorkspace().folders.map(folder => folder.uri));\n\t\tfor (const [folder] of this.mapFolderToConfiguredExpression) {\n\t\t\tif (folder === ResourceGlobMatcher.NO_FOLDER) {\n\t\t\t\tcontinue; // always keep this one\n\t\t\t}\n\n\t\t\tif (!foldersMap.has(URI.parse(folder))) {\n\t\t\t\tthis.mapFolderToParsedExpression.delete(folder);\n\t\t\t\tthis.mapFolderToConfiguredExpression.delete(folder);\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\t// Always set for resources outside workspace as well\n\t\tconst globalNewExpression = this.doGetExpression(undefined);\n\t\tconst globalCurrentExpression = this.mapFolderToConfiguredExpression.get(ResourceGlobMatcher.NO_FOLDER);\n\t\tif (globalNewExpression) {\n\t\t\tif (!globalCurrentExpression || !equals(globalCurrentExpression.expression, globalNewExpression.expression)) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapFolderToParsedExpression.set(ResourceGlobMatcher.NO_FOLDER, parse(globalNewExpression.expression));\n\t\t\t\tthis.mapFolderToConfiguredExpression.set(ResourceGlobMatcher.NO_FOLDER, globalNewExpression);\n\t\t\t}\n\t\t} else {\n\t\t\tif (globalCurrentExpression) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapFolderToParsedExpression.delete(ResourceGlobMatcher.NO_FOLDER);\n\t\t\t\tthis.mapFolderToConfiguredExpression.delete(ResourceGlobMatcher.NO_FOLDER);\n\t\t\t}\n\t\t}\n\n\t\tif (fromEvent && changed) {\n\t\t\tthis._onExpressionChange.fire();\n\t\t}\n\t}\n\n\tprivate doGetExpression(resource: URI | undefined): IConfiguredExpression | undefined {\n\t\tconst expression = this.getExpression(resource);\n\t\tif (!expression) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst keys = Object.keys(expression);\n\t\tif (keys.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet hasAbsolutePath = false;\n\n\t\t// Check the expression for absolute paths/globs\n\t\t// and specifically for Windows, make sure the\n\t\t// drive letter is lowercased, because we later\n\t\t// check with `URI.fsPath` which is always putting\n\t\t// the drive letter lowercased.\n\n\t\tconst massagedExpression: IExpression = Object.create(null);\n\t\tfor (const key of keys) {\n\t\t\tif (!hasAbsolutePath) {\n\t\t\t\thasAbsolutePath = isAbsolute(key);\n\t\t\t}\n\n\t\t\tlet massagedKey = key;\n\n\t\t\tconst driveLetter = getDriveLetter(massagedKey, true /* probe for windows */);\n\t\t\tif (driveLetter) {\n\t\t\t\tconst driveLetterLower = driveLetter.toLowerCase();\n\t\t\t\tif (driveLetter !== driveLetter.toLowerCase()) {\n\t\t\t\t\tmassagedKey = `${driveLetterLower}${massagedKey.substring(1)}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmassagedExpression[massagedKey] = expression[key];\n\t\t}\n\n\t\treturn {\n\t\t\texpression: massagedExpression,\n\t\t\thasAbsolutePath\n\t\t};\n\t}\n\n\tmatches(\n\t\tresource: URI,\n\t\thasSibling?: (name: string) => boolean\n\t): boolean {\n\t\tif (this.mapFolderToParsedExpression.size === 0) {\n\t\t\treturn false; // return early: no expression for this matcher\n\t\t}\n\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\tlet expressionForFolder: ParsedExpression | undefined;\n\t\tlet expressionConfigForFolder: IConfiguredExpression | undefined;\n\t\tif (folder && this.mapFolderToParsedExpression.has(folder.uri.toString())) {\n\t\t\texpressionForFolder = this.mapFolderToParsedExpression.get(folder.uri.toString());\n\t\t\texpressionConfigForFolder = this.mapFolderToConfiguredExpression.get(folder.uri.toString());\n\t\t} else {\n\t\t\texpressionForFolder = this.mapFolderToParsedExpression.get(ResourceGlobMatcher.NO_FOLDER);\n\t\t\texpressionConfigForFolder = this.mapFolderToConfiguredExpression.get(ResourceGlobMatcher.NO_FOLDER);\n\t\t}\n\n\t\tif (!expressionForFolder) {\n\t\t\treturn false; // return early: no expression for this resource\n\t\t}\n\n\t\t// If the resource if from a workspace, convert its absolute path to a relative\n\t\t// path so that glob patterns have a higher probability to match. For example\n\t\t// a glob pattern of \"src/**\" will not match on an absolute path \"/folder/src/file.txt\"\n\t\t// but can match on \"src/file.txt\"\n\n\t\tlet resourcePathToMatch: string | undefined;\n\t\tif (folder) {\n\t\t\tresourcePathToMatch = relativePath(folder.uri, resource);\n\t\t} else {\n\t\t\tresourcePathToMatch = this.uriToPath(resource);\n\t\t}\n\n\t\tif (typeof resourcePathToMatch === 'string' && !!expressionForFolder(resourcePathToMatch, undefined, hasSibling)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the configured expression has an absolute path, we also check for absolute paths\n\t\t// to match, otherwise we potentially miss out on matches. We only do that if we previously\n\t\t// matched on the relative path.\n\n\t\tif (resourcePathToMatch !== this.uriToPath(resource) && expressionConfigForFolder?.hasAbsolutePath) {\n\t\t\treturn !!expressionForFolder(this.uriToPath(resource), undefined, hasSibling);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate uriToPath(uri: URI): string {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn uri.fsPath;\n\t\t}\n\n\t\treturn uri.path;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
