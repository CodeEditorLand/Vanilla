{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/resources.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../base/common/event.js\";\nimport { getDriveLetter } from \"../../base/common/extpath.js\";\nimport {\n\ttype IExpression,\n\ttype ParsedExpression,\n\tparse,\n} from \"../../base/common/glob.js\";\nimport { Disposable } from \"../../base/common/lifecycle.js\";\nimport { ResourceSet } from \"../../base/common/map.js\";\nimport { Schemas } from \"../../base/common/network.js\";\nimport { equals } from \"../../base/common/objects.js\";\nimport { isAbsolute } from \"../../base/common/path.js\";\nimport { relativePath } from \"../../base/common/resources.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport {\n\ttype IConfigurationChangeEvent,\n\tIConfigurationService,\n} from \"../../platform/configuration/common/configuration.js\";\nimport { IWorkspaceContextService } from \"../../platform/workspace/common/workspace.js\";\n\ninterface IConfiguredExpression {\n\treadonly expression: IExpression;\n\treadonly hasAbsolutePath: boolean;\n}\n\nexport class ResourceGlobMatcher extends Disposable {\n\tprivate static readonly NO_FOLDER = null;\n\n\tprivate readonly _onExpressionChange = this._register(new Emitter<void>());\n\treadonly onExpressionChange = this._onExpressionChange.event;\n\n\tprivate readonly mapFolderToParsedExpression = new Map<\n\t\tstring | null,\n\t\tParsedExpression\n\t>();\n\tprivate readonly mapFolderToConfiguredExpression = new Map<\n\t\tstring | null,\n\t\tIConfiguredExpression\n\t>();\n\n\tconstructor(\n\t\tprivate getExpression: (folder?: URI) => IExpression | undefined,\n\t\tprivate shouldUpdate: (event: IConfigurationChangeEvent) => boolean,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.updateExpressions(false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (this.shouldUpdate(e)) {\n\t\t\t\t\tthis.updateExpressions(true);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceFolders(() =>\n\t\t\t\tthis.updateExpressions(true),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate updateExpressions(fromEvent: boolean): void {\n\t\tlet changed = false;\n\n\t\t// Add expressions per workspaces that got added\n\t\tfor (const folder of this.contextService.getWorkspace().folders) {\n\t\t\tconst folderUriStr = folder.uri.toString();\n\n\t\t\tconst newExpression = this.doGetExpression(folder.uri);\n\t\t\tconst currentExpression =\n\t\t\t\tthis.mapFolderToConfiguredExpression.get(folderUriStr);\n\n\t\t\tif (newExpression) {\n\t\t\t\tif (\n\t\t\t\t\t!currentExpression ||\n\t\t\t\t\t!equals(\n\t\t\t\t\t\tcurrentExpression.expression,\n\t\t\t\t\t\tnewExpression.expression,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tchanged = true;\n\n\t\t\t\t\tthis.mapFolderToParsedExpression.set(\n\t\t\t\t\t\tfolderUriStr,\n\t\t\t\t\t\tparse(newExpression.expression),\n\t\t\t\t\t);\n\t\t\t\t\tthis.mapFolderToConfiguredExpression.set(\n\t\t\t\t\t\tfolderUriStr,\n\t\t\t\t\t\tnewExpression,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (currentExpression) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapFolderToParsedExpression.delete(folderUriStr);\n\t\t\t\tthis.mapFolderToConfiguredExpression.delete(folderUriStr);\n\t\t\t}\n\t\t}\n\n\t\t// Remove expressions per workspace no longer present\n\t\tconst foldersMap = new ResourceSet(\n\t\t\tthis.contextService\n\t\t\t\t.getWorkspace()\n\t\t\t\t.folders.map((folder) => folder.uri),\n\t\t);\n\t\tfor (const [folder] of this.mapFolderToConfiguredExpression) {\n\t\t\tif (folder === ResourceGlobMatcher.NO_FOLDER) {\n\t\t\t\tcontinue; // always keep this one\n\t\t\t}\n\n\t\t\tif (!foldersMap.has(URI.parse(folder))) {\n\t\t\t\tthis.mapFolderToParsedExpression.delete(folder);\n\t\t\t\tthis.mapFolderToConfiguredExpression.delete(folder);\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\t// Always set for resources outside workspace as well\n\t\tconst globalNewExpression = this.doGetExpression(undefined);\n\t\tconst globalCurrentExpression =\n\t\t\tthis.mapFolderToConfiguredExpression.get(\n\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t);\n\t\tif (globalNewExpression) {\n\t\t\tif (\n\t\t\t\t!globalCurrentExpression ||\n\t\t\t\t!equals(\n\t\t\t\t\tglobalCurrentExpression.expression,\n\t\t\t\t\tglobalNewExpression.expression,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapFolderToParsedExpression.set(\n\t\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t\t\tparse(globalNewExpression.expression),\n\t\t\t\t);\n\t\t\t\tthis.mapFolderToConfiguredExpression.set(\n\t\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t\t\tglobalNewExpression,\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (globalCurrentExpression) {\n\t\t\tchanged = true;\n\n\t\t\tthis.mapFolderToParsedExpression.delete(\n\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t);\n\t\t\tthis.mapFolderToConfiguredExpression.delete(\n\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t);\n\t\t}\n\n\t\tif (fromEvent && changed) {\n\t\t\tthis._onExpressionChange.fire();\n\t\t}\n\t}\n\n\tprivate doGetExpression(\n\t\tresource: URI | undefined,\n\t): IConfiguredExpression | undefined {\n\t\tconst expression = this.getExpression(resource);\n\t\tif (!expression) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst keys = Object.keys(expression);\n\t\tif (keys.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet hasAbsolutePath = false;\n\n\t\t// Check the expression for absolute paths/globs\n\t\t// and specifically for Windows, make sure the\n\t\t// drive letter is lowercased, because we later\n\t\t// check with `URI.fsPath` which is always putting\n\t\t// the drive letter lowercased.\n\n\t\tconst massagedExpression: IExpression = Object.create(null);\n\t\tfor (const key of keys) {\n\t\t\tif (!hasAbsolutePath) {\n\t\t\t\thasAbsolutePath = isAbsolute(key);\n\t\t\t}\n\n\t\t\tlet massagedKey = key;\n\n\t\t\tconst driveLetter = getDriveLetter(\n\t\t\t\tmassagedKey,\n\t\t\t\ttrue /* probe for windows */,\n\t\t\t);\n\t\t\tif (driveLetter) {\n\t\t\t\tconst driveLetterLower = driveLetter.toLowerCase();\n\t\t\t\tif (driveLetter !== driveLetter.toLowerCase()) {\n\t\t\t\t\tmassagedKey = `${driveLetterLower}${massagedKey.substring(1)}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmassagedExpression[massagedKey] = expression[key];\n\t\t}\n\n\t\treturn {\n\t\t\texpression: massagedExpression,\n\t\t\thasAbsolutePath,\n\t\t};\n\t}\n\n\tmatches(resource: URI, hasSibling?: (name: string) => boolean): boolean {\n\t\tif (this.mapFolderToParsedExpression.size === 0) {\n\t\t\treturn false; // return early: no expression for this matcher\n\t\t}\n\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\tlet expressionForFolder: ParsedExpression | undefined;\n\t\tlet expressionConfigForFolder: IConfiguredExpression | undefined;\n\t\tif (\n\t\t\tfolder &&\n\t\t\tthis.mapFolderToParsedExpression.has(folder.uri.toString())\n\t\t) {\n\t\t\texpressionForFolder = this.mapFolderToParsedExpression.get(\n\t\t\t\tfolder.uri.toString(),\n\t\t\t);\n\t\t\texpressionConfigForFolder =\n\t\t\t\tthis.mapFolderToConfiguredExpression.get(folder.uri.toString());\n\t\t} else {\n\t\t\texpressionForFolder = this.mapFolderToParsedExpression.get(\n\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t);\n\t\t\texpressionConfigForFolder =\n\t\t\t\tthis.mapFolderToConfiguredExpression.get(\n\t\t\t\t\tResourceGlobMatcher.NO_FOLDER,\n\t\t\t\t);\n\t\t}\n\n\t\tif (!expressionForFolder) {\n\t\t\treturn false; // return early: no expression for this resource\n\t\t}\n\n\t\t// If the resource if from a workspace, convert its absolute path to a relative\n\t\t// path so that glob patterns have a higher probability to match. For example\n\t\t// a glob pattern of \"src/**\" will not match on an absolute path \"/folder/src/file.txt\"\n\t\t// but can match on \"src/file.txt\"\n\n\t\tlet resourcePathToMatch: string | undefined;\n\t\tif (folder) {\n\t\t\tresourcePathToMatch = relativePath(folder.uri, resource);\n\t\t} else {\n\t\t\tresourcePathToMatch = this.uriToPath(resource);\n\t\t}\n\n\t\tif (\n\t\t\ttypeof resourcePathToMatch === \"string\" &&\n\t\t\t!!expressionForFolder(resourcePathToMatch, undefined, hasSibling)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the configured expression has an absolute path, we also check for absolute paths\n\t\t// to match, otherwise we potentially miss out on matches. We only do that if we previously\n\t\t// matched on the relative path.\n\n\t\tif (\n\t\t\tresourcePathToMatch !== this.uriToPath(resource) &&\n\t\t\texpressionConfigForFolder?.hasAbsolutePath\n\t\t) {\n\t\t\treturn !!expressionForFolder(\n\t\t\t\tthis.uriToPath(resource),\n\t\t\t\tundefined,\n\t\t\t\thasSibling,\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate uriToPath(uri: URI): string {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn uri.fsPath;\n\t\t}\n\n\t\treturn uri.path;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
