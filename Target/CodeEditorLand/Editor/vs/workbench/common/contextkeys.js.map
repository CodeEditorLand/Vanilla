{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/contextkeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../base/common/lifecycle.js';\nimport { URI } from '../../base/common/uri.js';\nimport { localize } from '../../nls.js';\nimport { IContextKeyService, IContextKey, RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nimport { basename, dirname, extname, isEqual } from '../../base/common/resources.js';\nimport { ILanguageService } from '../../editor/common/languages/language.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { IModelService } from '../../editor/common/services/model.js';\nimport { Schemas } from '../../base/common/network.js';\nimport { EditorInput } from './editor/editorInput.js';\nimport { IEditorResolverService } from '../services/editor/common/editorResolverService.js';\nimport { DEFAULT_EDITOR_ASSOCIATION } from './editor.js';\nimport { isLinux } from '../../base/common/platform.js';\n\n//#region < --- Workbench --- >\n\nexport const WorkbenchStateContext = new RawContextKey<string>('workbenchState', undefined, { type: 'string', description: localize('workbenchState', \"The kind of workspace opened in the window, either 'empty' (no workspace), 'folder' (single folder) or 'workspace' (multi-root workspace)\") });\nexport const WorkspaceFolderCountContext = new RawContextKey<number>('workspaceFolderCount', 0, localize('workspaceFolderCount', \"The number of root folders in the workspace\"));\n\nexport const OpenFolderWorkspaceSupportContext = new RawContextKey<boolean>('openFolderWorkspaceSupport', true, true);\nexport const EnterMultiRootWorkspaceSupportContext = new RawContextKey<boolean>('enterMultiRootWorkspaceSupport', true, true);\nexport const EmptyWorkspaceSupportContext = new RawContextKey<boolean>('emptyWorkspaceSupport', true, true);\n\nexport const DirtyWorkingCopiesContext = new RawContextKey<boolean>('dirtyWorkingCopies', false, localize('dirtyWorkingCopies', \"Whether there are any working copies with unsaved changes\"));\n\nexport const RemoteNameContext = new RawContextKey<string>('remoteName', '', localize('remoteName', \"The name of the remote the window is connected to or an empty string if not connected to any remote\"));\n\nexport const VirtualWorkspaceContext = new RawContextKey<string>('virtualWorkspace', '', localize('virtualWorkspace', \"The scheme of the current workspace is from a virtual file system or an empty string.\"));\nexport const TemporaryWorkspaceContext = new RawContextKey<boolean>('temporaryWorkspace', false, localize('temporaryWorkspace', \"The scheme of the current workspace is from a temporary file system.\"));\n\nexport const IsMainWindowFullscreenContext = new RawContextKey<boolean>('isFullscreen', false, localize('isFullscreen', \"Whether the main window is in fullscreen mode\"));\nexport const IsAuxiliaryWindowFocusedContext = new RawContextKey<boolean>('isAuxiliaryWindowFocusedContext', false, localize('isAuxiliaryWindowFocusedContext', \"Whether an auxiliary window is focused\"));\n\nexport const HasWebFileSystemAccess = new RawContextKey<boolean>('hasWebFileSystemAccess', false, true); // Support for FileSystemAccess web APIs (https://wicg.github.io/file-system-access)\n\nexport const EmbedderIdentifierContext = new RawContextKey<string | undefined>('embedderIdentifier', undefined, localize('embedderIdentifier', 'The identifier of the embedder according to the product service, if one is defined'));\n\n//#endregion\n\n\n//#region < --- Editor --- >\n\n// Editor State Context Keys\nexport const ActiveEditorDirtyContext = new RawContextKey<boolean>('activeEditorIsDirty', false, localize('activeEditorIsDirty', \"Whether the active editor has unsaved changes\"));\nexport const ActiveEditorPinnedContext = new RawContextKey<boolean>('activeEditorIsNotPreview', false, localize('activeEditorIsNotPreview', \"Whether the active editor is not in preview mode\"));\nexport const ActiveEditorFirstInGroupContext = new RawContextKey<boolean>('activeEditorIsFirstInGroup', false, localize('activeEditorIsFirstInGroup', \"Whether the active editor is the first one in its group\"));\nexport const ActiveEditorLastInGroupContext = new RawContextKey<boolean>('activeEditorIsLastInGroup', false, localize('activeEditorIsLastInGroup', \"Whether the active editor is the last one in its group\"));\nexport const ActiveEditorStickyContext = new RawContextKey<boolean>('activeEditorIsPinned', false, localize('activeEditorIsPinned', \"Whether the active editor is pinned\"));\nexport const ActiveEditorReadonlyContext = new RawContextKey<boolean>('activeEditorIsReadonly', false, localize('activeEditorIsReadonly', \"Whether the active editor is read-only\"));\nexport const ActiveCompareEditorCanSwapContext = new RawContextKey<boolean>('activeCompareEditorCanSwap', false, localize('activeCompareEditorCanSwap', \"Whether the active compare editor can swap sides\"));\nexport const ActiveEditorCanToggleReadonlyContext = new RawContextKey<boolean>('activeEditorCanToggleReadonly', true, localize('activeEditorCanToggleReadonly', \"Whether the active editor can toggle between being read-only or writeable\"));\nexport const ActiveEditorCanRevertContext = new RawContextKey<boolean>('activeEditorCanRevert', false, localize('activeEditorCanRevert', \"Whether the active editor can revert\"));\nexport const ActiveEditorCanSplitInGroupContext = new RawContextKey<boolean>('activeEditorCanSplitInGroup', true);\n\n// Editor Kind Context Keys\nexport const ActiveEditorContext = new RawContextKey<string | null>('activeEditor', null, { type: 'string', description: localize('activeEditor', \"The identifier of the active editor\") });\nexport const ActiveEditorAvailableEditorIdsContext = new RawContextKey<string>('activeEditorAvailableEditorIds', '', localize('activeEditorAvailableEditorIds', \"The available editor identifiers that are usable for the active editor\"));\nexport const TextCompareEditorVisibleContext = new RawContextKey<boolean>('textCompareEditorVisible', false, localize('textCompareEditorVisible', \"Whether a text compare editor is visible\"));\nexport const TextCompareEditorActiveContext = new RawContextKey<boolean>('textCompareEditorActive', false, localize('textCompareEditorActive', \"Whether a text compare editor is active\"));\nexport const SideBySideEditorActiveContext = new RawContextKey<boolean>('sideBySideEditorActive', false, localize('sideBySideEditorActive', \"Whether a side by side editor is active\"));\n\n// Editor Group Context Keys\nexport const EditorGroupEditorsCountContext = new RawContextKey<number>('groupEditorsCount', 0, localize('groupEditorsCount', \"The number of opened editor groups\"));\nexport const ActiveEditorGroupEmptyContext = new RawContextKey<boolean>('activeEditorGroupEmpty', false, localize('activeEditorGroupEmpty', \"Whether the active editor group is empty\"));\nexport const ActiveEditorGroupIndexContext = new RawContextKey<number>('activeEditorGroupIndex', 0, localize('activeEditorGroupIndex', \"The index of the active editor group\"));\nexport const ActiveEditorGroupLastContext = new RawContextKey<boolean>('activeEditorGroupLast', false, localize('activeEditorGroupLast', \"Whether the active editor group is the last group\"));\nexport const ActiveEditorGroupLockedContext = new RawContextKey<boolean>('activeEditorGroupLocked', false, localize('activeEditorGroupLocked', \"Whether the active editor group is locked\"));\nexport const MultipleEditorGroupsContext = new RawContextKey<boolean>('multipleEditorGroups', false, localize('multipleEditorGroups', \"Whether there are multiple editor groups opened\"));\nexport const SingleEditorGroupsContext = MultipleEditorGroupsContext.toNegated();\nexport const MultipleEditorsSelectedInGroupContext = new RawContextKey<boolean>('multipleEditorsSelectedInGroup', false, localize('multipleEditorsSelectedInGroup', \"Whether multiple editors have been selected in an editor group\"));\nexport const TwoEditorsSelectedInGroupContext = new RawContextKey<boolean>('twoEditorsSelectedInGroup', false, localize('twoEditorsSelectedInGroup', \"Whether exactly two editors have been selected in an editor group\"));\nexport const SelectedEditorsInGroupFileOrUntitledResourceContextKey = new RawContextKey<boolean>('SelectedEditorsInGroupFileOrUntitledResourceContextKey', true, localize('SelectedEditorsInGroupFileOrUntitledResourceContextKey', \"Whether all selected editors in a group have a file or untitled resource associated\"));\n\n// Editor Part Context Keys\nexport const EditorPartMultipleEditorGroupsContext = new RawContextKey<boolean>('editorPartMultipleEditorGroups', false, localize('editorPartMultipleEditorGroups', \"Whether there are multiple editor groups opened in an editor part\"));\nexport const EditorPartSingleEditorGroupsContext = EditorPartMultipleEditorGroupsContext.toNegated();\nexport const EditorPartMaximizedEditorGroupContext = new RawContextKey<boolean>('editorPartMaximizedEditorGroup', false, localize('editorPartEditorGroupMaximized', \"Editor Part has a maximized group\"));\nexport const IsAuxiliaryEditorPartContext = new RawContextKey<boolean>('isAuxiliaryEditorPart', false, localize('isAuxiliaryEditorPart', \"Editor Part is in an auxiliary window\"));\n\n// Editor Layout Context Keys\nexport const EditorsVisibleContext = new RawContextKey<boolean>('editorIsOpen', false, localize('editorIsOpen', \"Whether an editor is open\"));\nexport const InEditorZenModeContext = new RawContextKey<boolean>('inZenMode', false, localize('inZenMode', \"Whether Zen mode is enabled\"));\nexport const IsMainEditorCenteredLayoutContext = new RawContextKey<boolean>('isCenteredLayout', false, localize('isMainEditorCenteredLayout', \"Whether centered layout is enabled for the main editor\"));\nexport const SplitEditorsVertically = new RawContextKey<boolean>('splitEditorsVertically', false, localize('splitEditorsVertically', \"Whether editors split vertically\"));\nexport const MainEditorAreaVisibleContext = new RawContextKey<boolean>('mainEditorAreaVisible', true, localize('mainEditorAreaVisible', \"Whether the editor area in the main window is visible\"));\nexport const EditorTabsVisibleContext = new RawContextKey<boolean>('editorTabsVisible', true, localize('editorTabsVisible', \"Whether editor tabs are visible\"));\n\n//#endregion\n\n\n//#region < --- Side Bar --- >\n\nexport const SideBarVisibleContext = new RawContextKey<boolean>('sideBarVisible', false, localize('sideBarVisible', \"Whether the sidebar is visible\"));\nexport const SidebarFocusContext = new RawContextKey<boolean>('sideBarFocus', false, localize('sideBarFocus', \"Whether the sidebar has keyboard focus\"));\nexport const ActiveViewletContext = new RawContextKey<string>('activeViewlet', '', localize('activeViewlet', \"The identifier of the active viewlet\"));\n\n//#endregion\n\n\n//#region < --- Status Bar --- >\n\nexport const StatusBarFocused = new RawContextKey<boolean>('statusBarFocused', false, localize('statusBarFocused', \"Whether the status bar has keyboard focus\"));\n\n//#endregion\n\n//#region < --- Title Bar --- >\n\nexport const TitleBarStyleContext = new RawContextKey<string>('titleBarStyle', isLinux ? 'native' : 'custom', localize('titleBarStyle', \"Style of the window title bar\"));\nexport const TitleBarVisibleContext = new RawContextKey<boolean>('titleBarVisible', false, localize('titleBarVisible', \"Whether the title bar is visible\"));\n\n//#endregion\n\n\n//#region < --- Banner --- >\n\nexport const BannerFocused = new RawContextKey<boolean>('bannerFocused', false, localize('bannerFocused', \"Whether the banner has keyboard focus\"));\n\n//#endregion\n\n\n//#region < --- Notifications --- >\n\nexport const NotificationFocusedContext = new RawContextKey<boolean>('notificationFocus', true, localize('notificationFocus', \"Whether a notification has keyboard focus\"));\nexport const NotificationsCenterVisibleContext = new RawContextKey<boolean>('notificationCenterVisible', false, localize('notificationCenterVisible', \"Whether the notifications center is visible\"));\nexport const NotificationsToastsVisibleContext = new RawContextKey<boolean>('notificationToastsVisible', false, localize('notificationToastsVisible', \"Whether a notification toast is visible\"));\n\n//#endregion\n\n\n//#region < --- Auxiliary Bar --- >\n\nexport const ActiveAuxiliaryContext = new RawContextKey<string>('activeAuxiliary', '', localize('activeAuxiliary', \"The identifier of the active auxiliary panel\"));\nexport const AuxiliaryBarFocusContext = new RawContextKey<boolean>('auxiliaryBarFocus', false, localize('auxiliaryBarFocus', \"Whether the auxiliary bar has keyboard focus\"));\nexport const AuxiliaryBarVisibleContext = new RawContextKey<boolean>('auxiliaryBarVisible', false, localize('auxiliaryBarVisible', \"Whether the auxiliary bar is visible\"));\n\n//#endregion\n\n\n//#region < --- Panel --- >\n\nexport const ActivePanelContext = new RawContextKey<string>('activePanel', '', localize('activePanel', \"The identifier of the active panel\"));\nexport const PanelFocusContext = new RawContextKey<boolean>('panelFocus', false, localize('panelFocus', \"Whether the panel has keyboard focus\"));\nexport const PanelPositionContext = new RawContextKey<string>('panelPosition', 'bottom', localize('panelPosition', \"The position of the panel, always 'bottom'\"));\nexport const PanelAlignmentContext = new RawContextKey<string>('panelAlignment', 'center', localize('panelAlignment', \"The alignment of the panel, either 'center', 'left', 'right' or 'justify'\"));\nexport const PanelVisibleContext = new RawContextKey<boolean>('panelVisible', false, localize('panelVisible', \"Whether the panel is visible\"));\nexport const PanelMaximizedContext = new RawContextKey<boolean>('panelMaximized', false, localize('panelMaximized', \"Whether the panel is maximized\"));\n\n//#endregion\n\n\n//#region < --- Views --- >\n\nexport const FocusedViewContext = new RawContextKey<string>('focusedView', '', localize('focusedView', \"The identifier of the view that has keyboard focus\"));\nexport function getVisbileViewContextKey(viewId: string): string { return `view.${viewId}.visible`; }\n\n//#endregion\n\n\n//#region < --- Resources --- >\n\nexport class ResourceContextKey {\n\n\t// NOTE: DO NOT CHANGE THE DEFAULT VALUE TO ANYTHING BUT\n\t// UNDEFINED! IT IS IMPORTANT THAT DEFAULTS ARE INHERITED\n\t// FROM THE PARENT CONTEXT AND ONLY UNDEFINED DOES THIS\n\n\tstatic readonly Scheme = new RawContextKey<string>('resourceScheme', undefined, { type: 'string', description: localize('resourceScheme', \"The scheme of the resource\") });\n\tstatic readonly Filename = new RawContextKey<string>('resourceFilename', undefined, { type: 'string', description: localize('resourceFilename', \"The file name of the resource\") });\n\tstatic readonly Dirname = new RawContextKey<string>('resourceDirname', undefined, { type: 'string', description: localize('resourceDirname', \"The folder name the resource is contained in\") });\n\tstatic readonly Path = new RawContextKey<string>('resourcePath', undefined, { type: 'string', description: localize('resourcePath', \"The full path of the resource\") });\n\tstatic readonly LangId = new RawContextKey<string>('resourceLangId', undefined, { type: 'string', description: localize('resourceLangId', \"The language identifier of the resource\") });\n\tstatic readonly Resource = new RawContextKey<string>('resource', undefined, { type: 'URI', description: localize('resource', \"The full value of the resource including scheme and path\") });\n\tstatic readonly Extension = new RawContextKey<string>('resourceExtname', undefined, { type: 'string', description: localize('resourceExtname', \"The extension name of the resource\") });\n\tstatic readonly HasResource = new RawContextKey<boolean>('resourceSet', undefined, { type: 'boolean', description: localize('resourceSet', \"Whether a resource is present or not\") });\n\tstatic readonly IsFileSystemResource = new RawContextKey<boolean>('isFileSystemResource', undefined, { type: 'boolean', description: localize('isFileSystemResource', \"Whether the resource is backed by a file system provider\") });\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate _value: URI | undefined;\n\tprivate readonly _resourceKey: IContextKey<string | null>;\n\tprivate readonly _schemeKey: IContextKey<string | null>;\n\tprivate readonly _filenameKey: IContextKey<string | null>;\n\tprivate readonly _dirnameKey: IContextKey<string | null>;\n\tprivate readonly _pathKey: IContextKey<string | null>;\n\tprivate readonly _langIdKey: IContextKey<string | null>;\n\tprivate readonly _extensionKey: IContextKey<string | null>;\n\tprivate readonly _hasResource: IContextKey<boolean>;\n\tprivate readonly _isFileSystemResource: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IModelService private readonly _modelService: IModelService\n\t) {\n\t\tthis._schemeKey = ResourceContextKey.Scheme.bindTo(this._contextKeyService);\n\t\tthis._filenameKey = ResourceContextKey.Filename.bindTo(this._contextKeyService);\n\t\tthis._dirnameKey = ResourceContextKey.Dirname.bindTo(this._contextKeyService);\n\t\tthis._pathKey = ResourceContextKey.Path.bindTo(this._contextKeyService);\n\t\tthis._langIdKey = ResourceContextKey.LangId.bindTo(this._contextKeyService);\n\t\tthis._resourceKey = ResourceContextKey.Resource.bindTo(this._contextKeyService);\n\t\tthis._extensionKey = ResourceContextKey.Extension.bindTo(this._contextKeyService);\n\t\tthis._hasResource = ResourceContextKey.HasResource.bindTo(this._contextKeyService);\n\t\tthis._isFileSystemResource = ResourceContextKey.IsFileSystemResource.bindTo(this._contextKeyService);\n\n\t\tthis._disposables.add(_fileService.onDidChangeFileSystemProviderRegistrations(() => {\n\t\t\tconst resource = this.get();\n\t\t\tthis._isFileSystemResource.set(Boolean(resource && _fileService.hasProvider(resource)));\n\t\t}));\n\n\t\tthis._disposables.add(_modelService.onModelAdded(model => {\n\t\t\tif (isEqual(model.uri, this.get())) {\n\t\t\t\tthis._setLangId();\n\t\t\t}\n\t\t}));\n\t\tthis._disposables.add(_modelService.onModelLanguageChanged(e => {\n\t\t\tif (isEqual(e.model.uri, this.get())) {\n\t\t\t\tthis._setLangId();\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _setLangId(): void {\n\t\tconst value = this.get();\n\t\tif (!value) {\n\t\t\tthis._langIdKey.set(null);\n\t\t\treturn;\n\t\t}\n\t\tconst langId = this._modelService.getModel(value)?.getLanguageId() ?? this._languageService.guessLanguageIdByFilepathOrFirstLine(value);\n\t\tthis._langIdKey.set(langId);\n\t}\n\n\tset(value: URI | null | undefined) {\n\t\tvalue = value ?? undefined;\n\t\tif (isEqual(this._value, value)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._value = value;\n\t\tthis._contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis._resourceKey.set(value ? value.toString() : null);\n\t\t\tthis._schemeKey.set(value ? value.scheme : null);\n\t\t\tthis._filenameKey.set(value ? basename(value) : null);\n\t\t\tthis._dirnameKey.set(value ? this.uriToPath(dirname(value)) : null);\n\t\t\tthis._pathKey.set(value ? this.uriToPath(value) : null);\n\t\t\tthis._setLangId();\n\t\t\tthis._extensionKey.set(value ? extname(value) : null);\n\t\t\tthis._hasResource.set(Boolean(value));\n\t\t\tthis._isFileSystemResource.set(value ? this._fileService.hasProvider(value) : false);\n\t\t});\n\t}\n\n\tprivate uriToPath(uri: URI): string {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn uri.fsPath;\n\t\t}\n\n\t\treturn uri.path;\n\t}\n\n\treset(): void {\n\t\tthis._value = undefined;\n\t\tthis._contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis._resourceKey.reset();\n\t\t\tthis._schemeKey.reset();\n\t\t\tthis._filenameKey.reset();\n\t\t\tthis._dirnameKey.reset();\n\t\t\tthis._pathKey.reset();\n\t\t\tthis._langIdKey.reset();\n\t\t\tthis._extensionKey.reset();\n\t\t\tthis._hasResource.reset();\n\t\t\tthis._isFileSystemResource.reset();\n\t\t});\n\t}\n\n\tget(): URI | undefined {\n\t\treturn this._value;\n\t}\n}\n\n//#endregion\n\nexport function applyAvailableEditorIds(contextKey: IContextKey<string>, editor: EditorInput | undefined | null, editorResolverService: IEditorResolverService): void {\n\tif (!editor) {\n\t\tcontextKey.set('');\n\t\treturn;\n\t}\n\n\tconst editorResource = editor.resource;\n\tif (editorResource?.scheme === Schemas.untitled && editor.editorId !== DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t// Non text editor untitled files cannot be easily serialized between extensions\n\t\t// so instead we disable this context key to prevent common commands that act on the active editor\n\t\tcontextKey.set('');\n\t} else {\n\t\tconst editors = editorResource ? editorResolverService.getEditors(editorResource).map(editor => editor.id) : [];\n\t\tcontextKey.set(editors.join(','));\n\t}\n}\n"],
  "mappings": "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",
  "names": ["editor"]
}
