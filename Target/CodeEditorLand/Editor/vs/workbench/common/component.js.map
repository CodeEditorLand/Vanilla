{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/component.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../base/common/event.js\";\nimport type { DisposableStore } from \"../../base/common/lifecycle.js\";\nimport type {\n\tIStorageService,\n\tIStorageValueChangeEvent,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../platform/storage/common/storage.js\";\nimport {\n\ttype IThemeService,\n\tThemable,\n} from \"../../platform/theme/common/themeService.js\";\nimport { Memento, type MementoObject } from \"./memento.js\";\n\nexport class Component extends Themable {\n\tprivate readonly memento: Memento;\n\n\tconstructor(\n\t\tprivate readonly id: string,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService,\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.memento = new Memento(this.id, storageService);\n\n\t\tthis._register(\n\t\t\tstorageService.onWillSaveState(() => {\n\t\t\t\t// Ask the component to persist state into the memento\n\t\t\t\tthis.saveState();\n\n\t\t\t\t// Then save the memento into storage\n\t\t\t\tthis.memento.saveMemento();\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tprotected getMemento(\n\t\tscope: StorageScope,\n\t\ttarget: StorageTarget,\n\t): MementoObject {\n\t\treturn this.memento.getMemento(scope, target);\n\t}\n\n\tprotected reloadMemento(scope: StorageScope): void {\n\t\treturn this.memento.reloadMemento(scope);\n\t}\n\n\tprotected onDidChangeMementoValue(\n\t\tscope: StorageScope,\n\t\tdisposables: DisposableStore,\n\t): Event<IStorageValueChangeEvent> {\n\t\treturn this.memento.onDidChangeValue(scope, disposables);\n\t}\n\n\tprotected saveState(): void {\n\t\t// Subclasses to implement for storing state\n\t}\n}\n"],
  "mappings": ";;AAaA;AAAA,EAEC;AAAA,OACM;AACP,SAAS,eAAmC;AAErC,MAAM,kBAAkB,SAAS;AAAA,EAGvC,YACkB,IACjB,cACA,gBACC;AACD,UAAM,YAAY;AAJD;AAMjB,SAAK,UAAU,IAAI,QAAQ,KAAK,IAAI,cAAc;AAElD,SAAK;AAAA,MACJ,eAAe,gBAAgB,MAAM;AAEpC,aAAK,UAAU;AAGf,aAAK,QAAQ,YAAY;AAAA,MAC1B,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAxCD,OAmBwC;AAAA;AAAA;AAAA,EACtB;AAAA,EAsBjB,QAAgB;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EAEU,WACT,OACA,QACgB;AAChB,WAAO,KAAK,QAAQ,WAAW,OAAO,MAAM;AAAA,EAC7C;AAAA,EAEU,cAAc,OAA2B;AAClD,WAAO,KAAK,QAAQ,cAAc,KAAK;AAAA,EACxC;AAAA,EAEU,wBACT,OACA,aACkC;AAClC,WAAO,KAAK,QAAQ,iBAAiB,OAAO,WAAW;AAAA,EACxD;AAAA,EAEU,YAAkB;AAAA,EAE5B;AACD;",
  "names": []
}
