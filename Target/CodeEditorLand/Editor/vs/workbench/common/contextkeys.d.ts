import { URI } from "vs/base/common/uri";
import { ILanguageService } from "vs/editor/common/languages/language";
import { IModelService } from "vs/editor/common/services/model";
import { IContextKey, IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IFileService } from "vs/platform/files/common/files";
import { EditorInput } from "vs/workbench/common/editor/editorInput";
import { IEditorResolverService } from "vs/workbench/services/editor/common/editorResolverService";
export declare const WorkbenchStateContext: any;
export declare const WorkspaceFolderCountContext: any;
export declare const OpenFolderWorkspaceSupportContext: any;
export declare const EnterMultiRootWorkspaceSupportContext: any;
export declare const EmptyWorkspaceSupportContext: any;
export declare const DirtyWorkingCopiesContext: any;
export declare const RemoteNameContext: any;
export declare const VirtualWorkspaceContext: any;
export declare const TemporaryWorkspaceContext: any;
export declare const IsMainWindowFullscreenContext: any;
export declare const IsAuxiliaryWindowFocusedContext: any;
export declare const HasWebFileSystemAccess: any;
export declare const EmbedderIdentifierContext: any;
export declare const ActiveEditorDirtyContext: any;
export declare const ActiveEditorPinnedContext: any;
export declare const ActiveEditorFirstInGroupContext: any;
export declare const ActiveEditorLastInGroupContext: any;
export declare const ActiveEditorStickyContext: any;
export declare const ActiveEditorReadonlyContext: any;
export declare const ActiveCompareEditorCanSwapContext: any;
export declare const ActiveEditorCanToggleReadonlyContext: any;
export declare const ActiveEditorCanRevertContext: any;
export declare const ActiveEditorCanSplitInGroupContext: any;
export declare const ActiveEditorContext: any;
export declare const ActiveEditorAvailableEditorIdsContext: any;
export declare const TextCompareEditorVisibleContext: any;
export declare const TextCompareEditorActiveContext: any;
export declare const SideBySideEditorActiveContext: any;
export declare const EditorGroupEditorsCountContext: any;
export declare const ActiveEditorGroupEmptyContext: any;
export declare const ActiveEditorGroupIndexContext: any;
export declare const ActiveEditorGroupLastContext: any;
export declare const ActiveEditorGroupLockedContext: any;
export declare const MultipleEditorGroupsContext: any;
export declare const SingleEditorGroupsContext: any;
export declare const MultipleEditorsSelectedInGroupContext: any;
export declare const TwoEditorsSelectedInGroupContext: any;
export declare const SelectedEditorsInGroupFileOrUntitledResourceContextKey: any;
export declare const EditorPartMultipleEditorGroupsContext: any;
export declare const EditorPartSingleEditorGroupsContext: any;
export declare const EditorPartMaximizedEditorGroupContext: any;
export declare const IsAuxiliaryEditorPartContext: any;
export declare const EditorsVisibleContext: any;
export declare const InEditorZenModeContext: any;
export declare const IsMainEditorCenteredLayoutContext: any;
export declare const SplitEditorsVertically: any;
export declare const MainEditorAreaVisibleContext: any;
export declare const EditorTabsVisibleContext: any;
export declare const SideBarVisibleContext: any;
export declare const SidebarFocusContext: any;
export declare const ActiveViewletContext: any;
export declare const StatusBarFocused: any;
export declare const TitleBarStyleContext: any;
export declare const TitleBarVisibleContext: any;
export declare const BannerFocused: any;
export declare const NotificationFocusedContext: any;
export declare const NotificationsCenterVisibleContext: any;
export declare const NotificationsToastsVisibleContext: any;
export declare const ActiveAuxiliaryContext: any;
export declare const AuxiliaryBarFocusContext: any;
export declare const AuxiliaryBarVisibleContext: any;
export declare const ActivePanelContext: any;
export declare const PanelFocusContext: any;
export declare const PanelPositionContext: any;
export declare const PanelAlignmentContext: any;
export declare const PanelVisibleContext: any;
export declare const PanelMaximizedContext: any;
export declare const FocusedViewContext: any;
export declare function getVisbileViewContextKey(viewId: string): string;
export declare class ResourceContextKey {
    private readonly _contextKeyService;
    private readonly _fileService;
    private readonly _languageService;
    private readonly _modelService;
    static readonly Scheme: any;
    static readonly Filename: any;
    static readonly Dirname: any;
    static readonly Path: any;
    static readonly LangId: any;
    static readonly Resource: any;
    static readonly Extension: any;
    static readonly HasResource: any;
    static readonly IsFileSystemResource: any;
    private readonly _disposables;
    private _value;
    private readonly _resourceKey;
    private readonly _schemeKey;
    private readonly _filenameKey;
    private readonly _dirnameKey;
    private readonly _pathKey;
    private readonly _langIdKey;
    private readonly _extensionKey;
    private readonly _hasResource;
    private readonly _isFileSystemResource;
    constructor(_contextKeyService: IContextKeyService, _fileService: IFileService, _languageService: ILanguageService, _modelService: IModelService);
    dispose(): void;
    private _setLangId;
    set(value: URI | null | undefined): void;
    private uriToPath;
    reset(): void;
    get(): URI | undefined;
}
export declare function applyAvailableEditorIds(contextKey: IContextKey<string>, editor: EditorInput | undefined | null, editorResolverService: IEditorResolverService): void;
