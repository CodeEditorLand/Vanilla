{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/diffEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../nls.js';\nimport { AbstractSideBySideEditorInputSerializer, SideBySideEditorInput } from './sideBySideEditorInput.js';\nimport { EditorInput, IUntypedEditorOptions } from './editorInput.js';\nimport { EditorModel } from './editorModel.js';\nimport { TEXT_DIFF_EDITOR_ID, BINARY_DIFF_EDITOR_ID, Verbosity, IEditorDescriptor, IEditorPane, IResourceDiffEditorInput, IUntypedEditorInput, isResourceDiffEditorInput, IDiffEditorInput, IResourceSideBySideEditorInput, EditorInputCapabilities } from '../editor.js';\nimport { BaseTextEditorModel } from './textEditorModel.js';\nimport { DiffEditorModel } from './diffEditorModel.js';\nimport { TextDiffEditorModel } from './textDiffEditorModel.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IEditorService } from '../../services/editor/common/editorService.js';\nimport { shorten } from '../../../base/common/labels.js';\nimport { isResolvedEditorModel } from '../../../platform/editor/common/editor.js';\n\ninterface IDiffEditorInputLabels {\n\tname: string;\n\n\tshortDescription: string | undefined;\n\tmediumDescription: string | undefined;\n\tlongDescription: string | undefined;\n\n\tforceDescription: boolean;\n\n\tshortTitle: string;\n\tmediumTitle: string;\n\tlongTitle: string;\n}\n\n/**\n * The base editor input for the diff editor. It is made up of two editor inputs, the original version\n * and the modified version.\n */\nexport class DiffEditorInput extends SideBySideEditorInput implements IDiffEditorInput {\n\n\tstatic override readonly ID: string = 'workbench.editors.diffEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn DiffEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn this.modified.editorId === this.original.editorId ? this.modified.editorId : undefined;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\tlet capabilities = super.capabilities;\n\n\t\t// Force description capability depends on labels\n\t\tif (this.labels.forceDescription) {\n\t\t\tcapabilities |= EditorInputCapabilities.ForceDescription;\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\tprivate cachedModel: DiffEditorModel | undefined = undefined;\n\n\tprivate readonly labels = this.computeLabels();\n\n\tconstructor(\n\t\tpreferredName: string | undefined,\n\t\tpreferredDescription: string | undefined,\n\t\treadonly original: EditorInput,\n\t\treadonly modified: EditorInput,\n\t\tprivate readonly forceOpenAsBinary: boolean | undefined,\n\t\t@IEditorService editorService: IEditorService\n\t) {\n\t\tsuper(preferredName, preferredDescription, original, modified, editorService);\n\t}\n\n\tprivate computeLabels(): IDiffEditorInputLabels {\n\n\t\t// Name\n\t\tlet name: string;\n\t\tlet forceDescription = false;\n\t\tif (this.preferredName) {\n\t\t\tname = this.preferredName;\n\t\t} else {\n\t\t\tconst originalName = this.original.getName();\n\t\t\tconst modifiedName = this.modified.getName();\n\n\t\t\tname = localize('sideBySideLabels', \"{0} \u2194 {1}\", originalName, modifiedName);\n\n\t\t\t// Enforce description when the names are identical\n\t\t\tforceDescription = originalName === modifiedName;\n\t\t}\n\n\t\t// Description\n\t\tlet shortDescription: string | undefined;\n\t\tlet mediumDescription: string | undefined;\n\t\tlet longDescription: string | undefined;\n\t\tif (this.preferredDescription) {\n\t\t\tshortDescription = this.preferredDescription;\n\t\t\tmediumDescription = this.preferredDescription;\n\t\t\tlongDescription = this.preferredDescription;\n\t\t} else {\n\t\t\tshortDescription = this.computeLabel(this.original.getDescription(Verbosity.SHORT), this.modified.getDescription(Verbosity.SHORT));\n\t\t\tlongDescription = this.computeLabel(this.original.getDescription(Verbosity.LONG), this.modified.getDescription(Verbosity.LONG));\n\n\t\t\t// Medium Description: try to be verbose by computing\n\t\t\t// a label that resembles the difference between the two\n\t\t\tconst originalMediumDescription = this.original.getDescription(Verbosity.MEDIUM);\n\t\t\tconst modifiedMediumDescription = this.modified.getDescription(Verbosity.MEDIUM);\n\t\t\tif (\n\t\t\t\t(typeof originalMediumDescription === 'string' && typeof modifiedMediumDescription === 'string') && // we can only `shorten` when both sides are strings...\n\t\t\t\t(originalMediumDescription || modifiedMediumDescription) \t\t\t\t\t\t\t\t\t\t\t// ...however never when both sides are empty strings\n\t\t\t) {\n\t\t\t\tconst [shortenedOriginalMediumDescription, shortenedModifiedMediumDescription] = shorten([originalMediumDescription, modifiedMediumDescription]);\n\t\t\t\tmediumDescription = this.computeLabel(shortenedOriginalMediumDescription, shortenedModifiedMediumDescription);\n\t\t\t}\n\t\t}\n\n\t\t// Title\n\t\tlet shortTitle = this.computeLabel(this.original.getTitle(Verbosity.SHORT) ?? this.original.getName(), this.modified.getTitle(Verbosity.SHORT) ?? this.modified.getName(), ' \u2194 ');\n\t\tlet mediumTitle = this.computeLabel(this.original.getTitle(Verbosity.MEDIUM) ?? this.original.getName(), this.modified.getTitle(Verbosity.MEDIUM) ?? this.modified.getName(), ' \u2194 ');\n\t\tlet longTitle = this.computeLabel(this.original.getTitle(Verbosity.LONG) ?? this.original.getName(), this.modified.getTitle(Verbosity.LONG) ?? this.modified.getName(), ' \u2194 ');\n\n\t\tconst preferredTitle = this.getPreferredTitle();\n\t\tif (preferredTitle) {\n\t\t\tshortTitle = `${preferredTitle} (${shortTitle})`;\n\t\t\tmediumTitle = `${preferredTitle} (${mediumTitle})`;\n\t\t\tlongTitle = `${preferredTitle} (${longTitle})`;\n\t\t}\n\n\t\treturn { name, shortDescription, mediumDescription, longDescription, forceDescription, shortTitle, mediumTitle, longTitle };\n\t}\n\n\tprivate computeLabel(originalLabel: string, modifiedLabel: string, separator?: string): string;\n\tprivate computeLabel(originalLabel: string | undefined, modifiedLabel: string | undefined, separator?: string): string | undefined;\n\tprivate computeLabel(originalLabel: string | undefined, modifiedLabel: string | undefined, separator = ' - '): string | undefined {\n\t\tif (!originalLabel || !modifiedLabel) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (originalLabel === modifiedLabel) {\n\t\t\treturn modifiedLabel;\n\t\t}\n\n\t\treturn `${originalLabel}${separator}${modifiedLabel}`;\n\t}\n\n\toverride getName(): string {\n\t\treturn this.labels.name;\n\t}\n\n\toverride getDescription(verbosity = Verbosity.MEDIUM): string | undefined {\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\treturn this.labels.shortDescription;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\treturn this.labels.longDescription;\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\tdefault:\n\t\t\t\treturn this.labels.mediumDescription;\n\t\t}\n\t}\n\n\toverride getTitle(verbosity?: Verbosity): string {\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\treturn this.labels.shortTitle;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\treturn this.labels.longTitle;\n\t\t\tdefault:\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\t\treturn this.labels.mediumTitle;\n\t\t}\n\t}\n\n\toverride async resolve(): Promise<EditorModel> {\n\n\t\t// Create Model - we never reuse our cached model if refresh is true because we cannot\n\t\t// decide for the inputs within if the cached model can be reused or not. There may be\n\t\t// inputs that need to be loaded again and thus we always recreate the model and dispose\n\t\t// the previous one - if any.\n\t\tconst resolvedModel = await this.createModel();\n\t\tthis.cachedModel?.dispose();\n\n\t\tthis.cachedModel = resolvedModel;\n\n\t\treturn this.cachedModel;\n\t}\n\n\toverride prefersEditorPane<T extends IEditorDescriptor<IEditorPane>>(editorPanes: T[]): T | undefined {\n\t\tif (this.forceOpenAsBinary) {\n\t\t\treturn editorPanes.find(editorPane => editorPane.typeId === BINARY_DIFF_EDITOR_ID);\n\t\t}\n\n\t\treturn editorPanes.find(editorPane => editorPane.typeId === TEXT_DIFF_EDITOR_ID);\n\t}\n\n\tprivate async createModel(): Promise<DiffEditorModel> {\n\n\t\t// Join resolve call over two inputs and build diff editor model\n\t\tconst [originalEditorModel, modifiedEditorModel] = await Promise.all([\n\t\t\tthis.original.resolve(),\n\t\t\tthis.modified.resolve()\n\t\t]);\n\n\t\t// If both are text models, return textdiffeditor model\n\t\tif (modifiedEditorModel instanceof BaseTextEditorModel && originalEditorModel instanceof BaseTextEditorModel) {\n\t\t\treturn new TextDiffEditorModel(originalEditorModel, modifiedEditorModel);\n\t\t}\n\n\t\t// Otherwise return normal diff model\n\t\treturn new DiffEditorModel(isResolvedEditorModel(originalEditorModel) ? originalEditorModel : undefined, isResolvedEditorModel(modifiedEditorModel) ? modifiedEditorModel : undefined);\n\t}\n\n\toverride toUntyped(options?: IUntypedEditorOptions): (IResourceDiffEditorInput & IResourceSideBySideEditorInput) | undefined {\n\t\tconst untyped = super.toUntyped(options);\n\t\tif (untyped) {\n\t\t\treturn {\n\t\t\t\t...untyped,\n\t\t\t\tmodified: untyped.primary,\n\t\t\t\toriginal: untyped.secondary\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof DiffEditorInput) {\n\t\t\treturn this.modified.matches(otherInput.modified) && this.original.matches(otherInput.original) && otherInput.forceOpenAsBinary === this.forceOpenAsBinary;\n\t\t}\n\n\t\tif (isResourceDiffEditorInput(otherInput)) {\n\t\t\treturn this.modified.matches(otherInput.modified) && this.original.matches(otherInput.original);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Free the diff editor model but do not propagate the dispose() call to the two inputs\n\t\t// We never created the two inputs (original and modified) so we can not dispose\n\t\t// them without sideeffects.\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = undefined;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport class DiffEditorInputSerializer extends AbstractSideBySideEditorInputSerializer {\n\n\tprotected createEditorInput(instantiationService: IInstantiationService, name: string | undefined, description: string | undefined, secondaryInput: EditorInput, primaryInput: EditorInput): EditorInput {\n\t\treturn instantiationService.createInstance(DiffEditorInput, name, description, secondaryInput, primaryInput, undefined);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
