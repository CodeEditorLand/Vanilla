{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/textDiffEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDiffEditorModel } from '../../../editor/common/editorCommon.js';\nimport { BaseTextEditorModel } from './textEditorModel.js';\nimport { DiffEditorModel } from './diffEditorModel.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\n\n/**\n * The base text editor model for the diff editor. It is made up of two text editor models, the original version\n * and the modified version.\n */\nexport class TextDiffEditorModel extends DiffEditorModel {\n\n\tprotected override readonly _originalModel: BaseTextEditorModel | undefined;\n\toverride get originalModel(): BaseTextEditorModel | undefined { return this._originalModel; }\n\n\tprotected override readonly _modifiedModel: BaseTextEditorModel | undefined;\n\toverride get modifiedModel(): BaseTextEditorModel | undefined { return this._modifiedModel; }\n\n\tprivate _textDiffEditorModel: IDiffEditorModel | undefined = undefined;\n\tget textDiffEditorModel(): IDiffEditorModel | undefined { return this._textDiffEditorModel; }\n\n\tconstructor(originalModel: BaseTextEditorModel, modifiedModel: BaseTextEditorModel) {\n\t\tsuper(originalModel, modifiedModel);\n\n\t\tthis._originalModel = originalModel;\n\t\tthis._modifiedModel = modifiedModel;\n\n\t\tthis.updateTextDiffEditorModel();\n\t}\n\n\toverride async resolve(): Promise<void> {\n\t\tawait super.resolve();\n\n\t\tthis.updateTextDiffEditorModel();\n\t}\n\n\tprivate updateTextDiffEditorModel(): void {\n\t\tif (this.originalModel?.isResolved() && this.modifiedModel?.isResolved()) {\n\n\t\t\t// Create new\n\t\t\tif (!this._textDiffEditorModel) {\n\t\t\t\tthis._textDiffEditorModel = {\n\t\t\t\t\toriginal: this.originalModel.textEditorModel,\n\t\t\t\t\tmodified: this.modifiedModel.textEditorModel\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Update existing\n\t\t\telse {\n\t\t\t\tthis._textDiffEditorModel.original = this.originalModel.textEditorModel;\n\t\t\t\tthis._textDiffEditorModel.modified = this.modifiedModel.textEditorModel;\n\t\t\t}\n\t\t}\n\t}\n\n\toverride isResolved(): boolean {\n\t\treturn !!this._textDiffEditorModel;\n\t}\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\treturn !!this.modifiedModel && this.modifiedModel.isReadonly();\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Free the diff editor model but do not propagate the dispose() call to the two models\n\t\t// inside. We never created the two models (original and modified) so we can not dispose\n\t\t// them without sideeffects. Rather rely on the models getting disposed when their related\n\t\t// inputs get disposed from the diffEditorInput.\n\t\tthis._textDiffEditorModel = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB;AACjC,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAMzB,MAAM,4BAA4B,gBAAgB;AAAA,EAdzD,OAcyD;AAAA;AAAA;AAAA,EAE5B;AAAA,EAC5B,IAAa,gBAAiD;AAAE,WAAO,KAAK;AAAA,EAAgB;AAAA,EAEhE;AAAA,EAC5B,IAAa,gBAAiD;AAAE,WAAO,KAAK;AAAA,EAAgB;AAAA,EAEpF,uBAAqD;AAAA,EAC7D,IAAI,sBAAoD;AAAE,WAAO,KAAK;AAAA,EAAsB;AAAA,EAE5F,YAAY,eAAoC,eAAoC;AACnF,UAAM,eAAe,aAAa;AAElC,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AAEtB,SAAK,0BAA0B;AAAA,EAChC;AAAA,EAEA,MAAe,UAAyB;AACvC,UAAM,MAAM,QAAQ;AAEpB,SAAK,0BAA0B;AAAA,EAChC;AAAA,EAEQ,4BAAkC;AACzC,QAAI,KAAK,eAAe,WAAW,KAAK,KAAK,eAAe,WAAW,GAAG;AAGzE,UAAI,CAAC,KAAK,sBAAsB;AAC/B,aAAK,uBAAuB;AAAA,UAC3B,UAAU,KAAK,cAAc;AAAA,UAC7B,UAAU,KAAK,cAAc;AAAA,QAC9B;AAAA,MACD,OAGK;AACJ,aAAK,qBAAqB,WAAW,KAAK,cAAc;AACxD,aAAK,qBAAqB,WAAW,KAAK,cAAc;AAAA,MACzD;AAAA,IACD;AAAA,EACD;AAAA,EAES,aAAsB;AAC9B,WAAO,CAAC,CAAC,KAAK;AAAA,EACf;AAAA,EAEA,aAAwC;AACvC,WAAO,CAAC,CAAC,KAAK,iBAAiB,KAAK,cAAc,WAAW;AAAA,EAC9D;AAAA,EAES,UAAgB;AAMxB,SAAK,uBAAuB;AAE5B,UAAM,QAAQ;AAAA,EACf;AACD;",
  "names": []
}
