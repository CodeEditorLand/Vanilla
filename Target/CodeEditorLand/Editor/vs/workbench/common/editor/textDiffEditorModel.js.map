{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/textDiffEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport type { IDiffEditorModel } from \"../../../editor/common/editorCommon.js\";\nimport { DiffEditorModel } from \"./diffEditorModel.js\";\nimport type { BaseTextEditorModel } from \"./textEditorModel.js\";\n\n/**\n * The base text editor model for the diff editor. It is made up of two text editor models, the original version\n * and the modified version.\n */\nexport class TextDiffEditorModel extends DiffEditorModel {\n\tprotected override readonly _originalModel: BaseTextEditorModel | undefined;\n\toverride get originalModel(): BaseTextEditorModel | undefined {\n\t\treturn this._originalModel;\n\t}\n\n\tprotected override readonly _modifiedModel: BaseTextEditorModel | undefined;\n\toverride get modifiedModel(): BaseTextEditorModel | undefined {\n\t\treturn this._modifiedModel;\n\t}\n\n\tprivate _textDiffEditorModel: IDiffEditorModel | undefined = undefined;\n\tget textDiffEditorModel(): IDiffEditorModel | undefined {\n\t\treturn this._textDiffEditorModel;\n\t}\n\n\tconstructor(\n\t\toriginalModel: BaseTextEditorModel,\n\t\tmodifiedModel: BaseTextEditorModel,\n\t) {\n\t\tsuper(originalModel, modifiedModel);\n\n\t\tthis._originalModel = originalModel;\n\t\tthis._modifiedModel = modifiedModel;\n\n\t\tthis.updateTextDiffEditorModel();\n\t}\n\n\toverride async resolve(): Promise<void> {\n\t\tawait super.resolve();\n\n\t\tthis.updateTextDiffEditorModel();\n\t}\n\n\tprivate updateTextDiffEditorModel(): void {\n\t\tif (\n\t\t\tthis.originalModel?.isResolved() &&\n\t\t\tthis.modifiedModel?.isResolved()\n\t\t) {\n\t\t\t// Create new\n\t\t\tif (this._textDiffEditorModel) {\n\t\t\t\tthis._textDiffEditorModel.original =\n\t\t\t\t\tthis.originalModel.textEditorModel;\n\t\t\t\tthis._textDiffEditorModel.modified =\n\t\t\t\t\tthis.modifiedModel.textEditorModel;\n\t\t\t} else {\n\t\t\t\tthis._textDiffEditorModel = {\n\t\t\t\t\toriginal: this.originalModel.textEditorModel,\n\t\t\t\t\tmodified: this.modifiedModel.textEditorModel,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\toverride isResolved(): boolean {\n\t\treturn !!this._textDiffEditorModel;\n\t}\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\treturn !!this.modifiedModel && this.modifiedModel.isReadonly();\n\t}\n\n\toverride dispose(): void {\n\t\t// Free the diff editor model but do not propagate the dispose() call to the two models\n\t\t// inside. We never created the two models (original and modified) so we can not dispose\n\t\t// them without sideeffects. Rather rely on the models getting disposed when their related\n\t\t// inputs get disposed from the diffEditorInput.\n\t\tthis._textDiffEditorModel = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;AAOA,SAAS,uBAAuB;AAOzB,MAAM,4BAA4B,gBAAgB;AAAA,EAdzD,OAcyD;AAAA;AAAA;AAAA,EAC5B;AAAA,EAC5B,IAAa,gBAAiD;AAC7D,WAAO,KAAK;AAAA,EACb;AAAA,EAE4B;AAAA,EAC5B,IAAa,gBAAiD;AAC7D,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,uBAAqD;AAAA,EAC7D,IAAI,sBAAoD;AACvD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,YACC,eACA,eACC;AACD,UAAM,eAAe,aAAa;AAElC,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AAEtB,SAAK,0BAA0B;AAAA,EAChC;AAAA,EAEA,MAAe,UAAyB;AACvC,UAAM,MAAM,QAAQ;AAEpB,SAAK,0BAA0B;AAAA,EAChC;AAAA,EAEQ,4BAAkC;AACzC,QACC,KAAK,eAAe,WAAW,KAC/B,KAAK,eAAe,WAAW,GAC9B;AAED,UAAI,KAAK,sBAAsB;AAC9B,aAAK,qBAAqB,WACzB,KAAK,cAAc;AACpB,aAAK,qBAAqB,WACzB,KAAK,cAAc;AAAA,MACrB,OAAO;AACN,aAAK,uBAAuB;AAAA,UAC3B,UAAU,KAAK,cAAc;AAAA,UAC7B,UAAU,KAAK,cAAc;AAAA,QAC9B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAES,aAAsB;AAC9B,WAAO,CAAC,CAAC,KAAK;AAAA,EACf;AAAA,EAEA,aAAwC;AACvC,WAAO,CAAC,CAAC,KAAK,iBAAiB,KAAK,cAAc,WAAW;AAAA,EAC9D;AAAA,EAES,UAAgB;AAKxB,SAAK,uBAAuB;AAE5B,UAAM,QAAQ;AAAA,EACf;AACD;",
  "names": []
}
