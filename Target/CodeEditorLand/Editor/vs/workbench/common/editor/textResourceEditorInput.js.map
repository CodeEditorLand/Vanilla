{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/textResourceEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IReference } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { isEqual } from \"../../../base/common/resources.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createTextBufferFactory } from \"../../../editor/common/model/textModel.js\";\nimport {\n\ttype ITextEditorModel,\n\tITextModelService,\n} from \"../../../editor/common/services/resolverService.js\";\nimport { ITextResourceConfigurationService } from \"../../../editor/common/services/textResourceConfiguration.js\";\nimport { IFileService } from \"../../../platform/files/common/files.js\";\nimport { ILabelService } from \"../../../platform/label/common/label.js\";\nimport { ICustomEditorLabelService } from \"../../services/editor/common/customEditorLabelService.js\";\nimport { IEditorService } from \"../../services/editor/common/editorService.js\";\nimport { IFilesConfigurationService } from \"../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport {\n\ttype ILanguageSupport,\n\ttype ITextFileSaveOptions,\n\tITextFileService,\n} from \"../../services/textfile/common/textfiles.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\ttype GroupIdentifier,\n\ttype IRevertOptions,\n\ttype IUntypedEditorInput,\n\tisResourceEditorInput,\n} from \"../editor.js\";\nimport type { EditorInput } from \"./editorInput.js\";\nimport { AbstractResourceEditorInput } from \"./resourceEditorInput.js\";\nimport { TextResourceEditorModel } from \"./textResourceEditorModel.js\";\n\n/**\n * The base class for all editor inputs that open in text editors.\n */\nexport abstract class AbstractTextResourceEditorInput extends AbstractResourceEditorInput {\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredResource: URI | undefined,\n\t\t@IEditorService protected readonly editorService: IEditorService,\n\t\t@ITextFileService protected readonly textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService customEditorLabelService: ICustomEditorLabelService\n\t) {\n\t\tsuper(resource, preferredResource, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService);\n\t}\n\n\toverride save(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: ITextFileSaveOptions,\n\t): Promise<IUntypedEditorInput | undefined> {\n\t\t// If this is neither an `untitled` resource, nor a resource\n\t\t// we can handle with the file service, we can only \"Save As...\"\n\t\tif (\n\t\t\tthis.resource.scheme !== Schemas.untitled &&\n\t\t\t!this.fileService.hasProvider(this.resource)\n\t\t) {\n\t\t\treturn this.saveAs(group, options);\n\t\t}\n\n\t\t// Normal save\n\t\treturn this.doSave(options, false, group);\n\t}\n\n\toverride saveAs(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: ITextFileSaveOptions,\n\t): Promise<IUntypedEditorInput | undefined> {\n\t\treturn this.doSave(options, true, group);\n\t}\n\n\tprivate async doSave(\n\t\toptions: ITextFileSaveOptions | undefined,\n\t\tsaveAs: boolean,\n\t\tgroup: GroupIdentifier | undefined,\n\t): Promise<IUntypedEditorInput | undefined> {\n\t\t// Save / Save As\n\t\tlet target: URI | undefined;\n\t\tif (saveAs) {\n\t\t\ttarget = await this.textFileService.saveAs(\n\t\t\t\tthis.resource,\n\t\t\t\tundefined,\n\t\t\t\t{ ...options, suggestedTarget: this.preferredResource },\n\t\t\t);\n\t\t} else {\n\t\t\ttarget = await this.textFileService.save(this.resource, options);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn undefined; // save cancelled\n\t\t}\n\n\t\treturn { resource: target };\n\t}\n\n\toverride async revert(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: IRevertOptions,\n\t): Promise<void> {\n\t\tawait this.textFileService.revert(this.resource, options);\n\t}\n}\n\n/**\n * A read-only text editor input whos contents are made of the provided resource that points to an existing\n * code editor model.\n */\nexport class TextResourceEditorInput\n\textends AbstractTextResourceEditorInput\n\timplements ILanguageSupport\n{\n\tstatic readonly ID: string = \"workbench.editors.resourceEditorInput\";\n\n\toverride get typeId(): string {\n\t\treturn TextResourceEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\tprivate cachedModel: TextResourceEditorModel | undefined = undefined;\n\tprivate modelReference: Promise<IReference<ITextEditorModel>> | undefined =\n\t\tundefined;\n\n\tconstructor(\n\t\tresource: URI,\n\t\tprivate name: string | undefined,\n\t\tprivate description: string | undefined,\n\t\tprivate preferredLanguageId: string | undefined,\n\t\tprivate preferredContents: string | undefined,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService customEditorLabelService: ICustomEditorLabelService\n\t) {\n\t\tsuper(resource, undefined, editorService, textFileService, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService);\n\t}\n\n\toverride getName(): string {\n\t\treturn this.name || super.getName();\n\t}\n\n\tsetName(name: string): void {\n\t\tif (this.name !== name) {\n\t\t\tthis.name = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\toverride getDescription(): string | undefined {\n\t\treturn this.description;\n\t}\n\n\tsetDescription(description: string): void {\n\t\tif (this.description !== description) {\n\t\t\tthis.description = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.setPreferredLanguageId(languageId);\n\n\t\tthis.cachedModel?.setLanguageId(languageId, source);\n\t}\n\n\tsetPreferredLanguageId(languageId: string): void {\n\t\tthis.preferredLanguageId = languageId;\n\t}\n\n\tsetPreferredContents(contents: string): void {\n\t\tthis.preferredContents = contents;\n\t}\n\n\toverride async resolve(): Promise<ITextEditorModel> {\n\t\t// Unset preferred contents and language after resolving\n\t\t// once to prevent these properties to stick. We still\n\t\t// want the user to change the language in the editor\n\t\t// and want to show updated contents (if any) in future\n\t\t// `resolve` calls.\n\t\tconst preferredContents = this.preferredContents;\n\t\tconst preferredLanguageId = this.preferredLanguageId;\n\t\tthis.preferredContents = undefined;\n\t\tthis.preferredLanguageId = undefined;\n\n\t\tif (!this.modelReference) {\n\t\t\tthis.modelReference = this.textModelService.createModelReference(\n\t\t\t\tthis.resource,\n\t\t\t);\n\t\t}\n\n\t\tconst ref = await this.modelReference;\n\n\t\t// Ensure the resolved model is of expected type\n\t\tconst model = ref.object;\n\t\tif (!(model instanceof TextResourceEditorModel)) {\n\t\t\tref.dispose();\n\t\t\tthis.modelReference = undefined;\n\n\t\t\tthrow new Error(\n\t\t\t\t`Unexpected model for TextResourceEditorInput: ${this.resource}`,\n\t\t\t);\n\t\t}\n\n\t\tthis.cachedModel = model;\n\n\t\t// Set contents and language if preferred\n\t\tif (\n\t\t\ttypeof preferredContents === \"string\" ||\n\t\t\ttypeof preferredLanguageId === \"string\"\n\t\t) {\n\t\t\tmodel.updateTextEditorModel(\n\t\t\t\ttypeof preferredContents === \"string\"\n\t\t\t\t\t? createTextBufferFactory(preferredContents)\n\t\t\t\t\t: undefined,\n\t\t\t\tpreferredLanguageId,\n\t\t\t);\n\t\t}\n\n\t\treturn model;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof TextResourceEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\tif (this.modelReference) {\n\t\t\tthis.modelReference.then((ref) => ref.dispose());\n\t\t\tthis.modelReference = undefined;\n\t\t}\n\n\t\tthis.cachedModel = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAAe;AACxB,SAAS,eAAe;AAExB,SAAS,+BAA+B;AACxC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,yCAAyC;AAClD,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB;AAC/B,SAAS,kCAAkC;AAC3C;AAAA,EAGC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAIA;AAAA,OACM;AAEP,SAAS,mCAAmC;AAC5C,SAAS,+BAA+B;AAKjC,IAAe,kCAAf,cAAuD,4BAA4B;AAAA,EACzF,YACC,UACA,mBACmC,eACE,iBACtB,cACD,aACc,2BACO,kCACR,0BAC1B;AACD,UAAM,UAAU,mBAAmB,cAAc,aAAa,2BAA2B,kCAAkC,wBAAwB;AARhH;AACE;AAAA,EAQtC;AAAA,EApDD,OAuC0F;AAAA;AAAA;AAAA,EAehF,KACR,OACA,SAC2C;AAG3C,QACC,KAAK,SAAS,WAAW,QAAQ,YACjC,CAAC,KAAK,YAAY,YAAY,KAAK,QAAQ,GAC1C;AACD,aAAO,KAAK,OAAO,OAAO,OAAO;AAAA,IAClC;AAGA,WAAO,KAAK,OAAO,SAAS,OAAO,KAAK;AAAA,EACzC;AAAA,EAES,OACR,OACA,SAC2C;AAC3C,WAAO,KAAK,OAAO,SAAS,MAAM,KAAK;AAAA,EACxC;AAAA,EAEA,MAAc,OACb,SACA,QACA,OAC2C;AAE3C,QAAI;AACJ,QAAI,QAAQ;AACX,eAAS,MAAM,KAAK,gBAAgB;AAAA,QACnC,KAAK;AAAA,QACL;AAAA,QACA,EAAE,GAAG,SAAS,iBAAiB,KAAK,kBAAkB;AAAA,MACvD;AAAA,IACD,OAAO;AACN,eAAS,MAAM,KAAK,gBAAgB,KAAK,KAAK,UAAU,OAAO;AAAA,IAChE;AAEA,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,IACR;AAEA,WAAO,EAAE,UAAU,OAAO;AAAA,EAC3B;AAAA,EAEA,MAAe,OACd,OACA,SACgB;AAChB,UAAM,KAAK,gBAAgB,OAAO,KAAK,UAAU,OAAO;AAAA,EACzD;AACD;AArEsB,kCAAf;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVmB;AA2Ef,IAAM,0BAAN,cACE,gCAET;AAAA,EAeC,YACC,UACQ,MACA,aACA,qBACA,mBAC4B,kBAClB,iBACF,eACF,aACC,cACa,2BACO,kCACR,0BAC1B;AACD,UAAM,UAAU,QAAW,eAAe,iBAAiB,cAAc,aAAa,2BAA2B,kCAAkC,wBAAwB;AAbnK;AACA;AACA;AACA;AAC4B;AAAA,EAUrC;AAAA,EApJD,OAqHA;AAAA;AAAA;AAAA,EACC,OAAgB,KAAa;AAAA,EAE7B,IAAa,SAAiB;AAC7B,WAAO,wBAAwB;AAAA,EAChC;AAAA,EAEA,IAAa,WAA+B;AAC3C,WAAO,2BAA2B;AAAA,EACnC;AAAA,EAEQ,cAAmD;AAAA,EACnD,iBACP;AAAA,EAoBQ,UAAkB;AAC1B,WAAO,KAAK,QAAQ,MAAM,QAAQ;AAAA,EACnC;AAAA,EAEA,QAAQ,MAAoB;AAC3B,QAAI,KAAK,SAAS,MAAM;AACvB,WAAK,OAAO;AAEZ,WAAK,kBAAkB,KAAK;AAAA,IAC7B;AAAA,EACD;AAAA,EAES,iBAAqC;AAC7C,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,eAAe,aAA2B;AACzC,QAAI,KAAK,gBAAgB,aAAa;AACrC,WAAK,cAAc;AAEnB,WAAK,kBAAkB,KAAK;AAAA,IAC7B;AAAA,EACD;AAAA,EAEA,cAAc,YAAoB,QAAuB;AACxD,SAAK,uBAAuB,UAAU;AAEtC,SAAK,aAAa,cAAc,YAAY,MAAM;AAAA,EACnD;AAAA,EAEA,uBAAuB,YAA0B;AAChD,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEA,qBAAqB,UAAwB;AAC5C,SAAK,oBAAoB;AAAA,EAC1B;AAAA,EAEA,MAAe,UAAqC;AAMnD,UAAM,oBAAoB,KAAK;AAC/B,UAAM,sBAAsB,KAAK;AACjC,SAAK,oBAAoB;AACzB,SAAK,sBAAsB;AAE3B,QAAI,CAAC,KAAK,gBAAgB;AACzB,WAAK,iBAAiB,KAAK,iBAAiB;AAAA,QAC3C,KAAK;AAAA,MACN;AAAA,IACD;AAEA,UAAM,MAAM,MAAM,KAAK;AAGvB,UAAM,QAAQ,IAAI;AAClB,QAAI,EAAE,iBAAiB,0BAA0B;AAChD,UAAI,QAAQ;AACZ,WAAK,iBAAiB;AAEtB,YAAM,IAAI;AAAA,QACT,iDAAiD,KAAK,QAAQ;AAAA,MAC/D;AAAA,IACD;AAEA,SAAK,cAAc;AAGnB,QACC,OAAO,sBAAsB,YAC7B,OAAO,wBAAwB,UAC9B;AACD,YAAM;AAAA,QACL,OAAO,sBAAsB,WAC1B,wBAAwB,iBAAiB,IACzC;AAAA,QACH;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAES,QAAQ,YAAwD;AACxE,QAAI,SAAS,YAAY;AACxB,aAAO;AAAA,IACR;AAEA,QAAI,sBAAsB,yBAAyB;AAClD,aAAO,QAAQ,WAAW,UAAU,KAAK,QAAQ;AAAA,IAClD;AAEA,QAAI,sBAAsB,UAAU,GAAG;AACtC,aAAO,MAAM,QAAQ,UAAU;AAAA,IAChC;AAEA,WAAO;AAAA,EACR;AAAA,EAES,UAAgB;AACxB,QAAI,KAAK,gBAAgB;AACxB,WAAK,eAAe,KAAK,CAAC,QAAQ,IAAI,QAAQ,CAAC;AAC/C,WAAK,iBAAiB;AAAA,IACvB;AAEA,SAAK,cAAc;AAEnB,UAAM,QAAQ;AAAA,EACf;AACD;AApJa,0BAAN;AAAA,EAwBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA/BU;",
  "names": []
}
