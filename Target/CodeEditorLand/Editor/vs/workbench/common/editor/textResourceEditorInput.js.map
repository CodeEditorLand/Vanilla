{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/textResourceEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DEFAULT_EDITOR_ASSOCIATION, GroupIdentifier, IRevertOptions, isResourceEditorInput, IUntypedEditorInput } from '../editor.js';\nimport { EditorInput } from './editorInput.js';\nimport { AbstractResourceEditorInput } from './resourceEditorInput.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ITextFileService, ITextFileSaveOptions, ILanguageSupport } from '../../services/textfile/common/textfiles.js';\nimport { IEditorService } from '../../services/editor/common/editorService.js';\nimport { IFileService } from '../../../platform/files/common/files.js';\nimport { ILabelService } from '../../../platform/label/common/label.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { isEqual } from '../../../base/common/resources.js';\nimport { ITextEditorModel, ITextModelService } from '../../../editor/common/services/resolverService.js';\nimport { TextResourceEditorModel } from './textResourceEditorModel.js';\nimport { IReference } from '../../../base/common/lifecycle.js';\nimport { createTextBufferFactory } from '../../../editor/common/model/textModel.js';\nimport { IFilesConfigurationService } from '../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { ITextResourceConfigurationService } from '../../../editor/common/services/textResourceConfiguration.js';\nimport { ICustomEditorLabelService } from '../../services/editor/common/customEditorLabelService.js';\n\n/**\n * The base class for all editor inputs that open in text editors.\n */\nexport abstract class AbstractTextResourceEditorInput extends AbstractResourceEditorInput {\n\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredResource: URI | undefined,\n\t\t@IEditorService protected readonly editorService: IEditorService,\n\t\t@ITextFileService protected readonly textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService customEditorLabelService: ICustomEditorLabelService\n\t) {\n\t\tsuper(resource, preferredResource, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService);\n\t}\n\n\toverride save(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IUntypedEditorInput | undefined> {\n\n\t\t// If this is neither an `untitled` resource, nor a resource\n\t\t// we can handle with the file service, we can only \"Save As...\"\n\t\tif (this.resource.scheme !== Schemas.untitled && !this.fileService.hasProvider(this.resource)) {\n\t\t\treturn this.saveAs(group, options);\n\t\t}\n\n\t\t// Normal save\n\t\treturn this.doSave(options, false, group);\n\t}\n\n\toverride saveAs(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IUntypedEditorInput | undefined> {\n\t\treturn this.doSave(options, true, group);\n\t}\n\n\tprivate async doSave(options: ITextFileSaveOptions | undefined, saveAs: boolean, group: GroupIdentifier | undefined): Promise<IUntypedEditorInput | undefined> {\n\n\t\t// Save / Save As\n\t\tlet target: URI | undefined;\n\t\tif (saveAs) {\n\t\t\ttarget = await this.textFileService.saveAs(this.resource, undefined, { ...options, suggestedTarget: this.preferredResource });\n\t\t} else {\n\t\t\ttarget = await this.textFileService.save(this.resource, options);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn undefined; // save cancelled\n\t\t}\n\n\t\treturn { resource: target };\n\t}\n\n\toverride async revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void> {\n\t\tawait this.textFileService.revert(this.resource, options);\n\t}\n}\n\n/**\n * A read-only text editor input whos contents are made of the provided resource that points to an existing\n * code editor model.\n */\nexport class TextResourceEditorInput extends AbstractTextResourceEditorInput implements ILanguageSupport {\n\n\tstatic readonly ID: string = 'workbench.editors.resourceEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn TextResourceEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\tprivate cachedModel: TextResourceEditorModel | undefined = undefined;\n\tprivate modelReference: Promise<IReference<ITextEditorModel>> | undefined = undefined;\n\n\tconstructor(\n\t\tresource: URI,\n\t\tprivate name: string | undefined,\n\t\tprivate description: string | undefined,\n\t\tprivate preferredLanguageId: string | undefined,\n\t\tprivate preferredContents: string | undefined,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService customEditorLabelService: ICustomEditorLabelService\n\t) {\n\t\tsuper(resource, undefined, editorService, textFileService, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService);\n\t}\n\n\toverride getName(): string {\n\t\treturn this.name || super.getName();\n\t}\n\n\tsetName(name: string): void {\n\t\tif (this.name !== name) {\n\t\t\tthis.name = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\toverride getDescription(): string | undefined {\n\t\treturn this.description;\n\t}\n\n\tsetDescription(description: string): void {\n\t\tif (this.description !== description) {\n\t\t\tthis.description = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.setPreferredLanguageId(languageId);\n\n\t\tthis.cachedModel?.setLanguageId(languageId, source);\n\t}\n\n\tsetPreferredLanguageId(languageId: string): void {\n\t\tthis.preferredLanguageId = languageId;\n\t}\n\n\tsetPreferredContents(contents: string): void {\n\t\tthis.preferredContents = contents;\n\t}\n\n\toverride async resolve(): Promise<ITextEditorModel> {\n\n\t\t// Unset preferred contents and language after resolving\n\t\t// once to prevent these properties to stick. We still\n\t\t// want the user to change the language in the editor\n\t\t// and want to show updated contents (if any) in future\n\t\t// `resolve` calls.\n\t\tconst preferredContents = this.preferredContents;\n\t\tconst preferredLanguageId = this.preferredLanguageId;\n\t\tthis.preferredContents = undefined;\n\t\tthis.preferredLanguageId = undefined;\n\n\t\tif (!this.modelReference) {\n\t\t\tthis.modelReference = this.textModelService.createModelReference(this.resource);\n\t\t}\n\n\t\tconst ref = await this.modelReference;\n\n\t\t// Ensure the resolved model is of expected type\n\t\tconst model = ref.object;\n\t\tif (!(model instanceof TextResourceEditorModel)) {\n\t\t\tref.dispose();\n\t\t\tthis.modelReference = undefined;\n\n\t\t\tthrow new Error(`Unexpected model for TextResourceEditorInput: ${this.resource}`);\n\t\t}\n\n\t\tthis.cachedModel = model;\n\n\t\t// Set contents and language if preferred\n\t\tif (typeof preferredContents === 'string' || typeof preferredLanguageId === 'string') {\n\t\t\tmodel.updateTextEditorModel(typeof preferredContents === 'string' ? createTextBufferFactory(preferredContents) : undefined, preferredLanguageId);\n\t\t}\n\n\t\treturn model;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof TextResourceEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\tif (this.modelReference) {\n\t\t\tthis.modelReference.then(ref => ref.dispose());\n\t\t\tthis.modelReference = undefined;\n\t\t}\n\n\t\tthis.cachedModel = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
