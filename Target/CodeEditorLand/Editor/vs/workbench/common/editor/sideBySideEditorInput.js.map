{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/sideBySideEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../platform/registry/common/platform.js\";\nimport { IEditorService } from \"../../services/editor/common/editorService.js\";\nimport {\n\tEditorExtensions,\n\tEditorInputCapabilities,\n\ttype GroupIdentifier,\n\ttype IEditorFactoryRegistry,\n\ttype IEditorSerializer,\n\ttype IMoveResult,\n\ttype IResourceSideBySideEditorInput,\n\ttype IRevertOptions,\n\ttype ISaveOptions,\n\ttype ISideBySideEditorInput,\n\ttype IUntypedEditorInput,\n\ttype Verbosity,\n\tfindViewStateForEditor,\n\tisDiffEditorInput,\n\tisEditorInput,\n\tisResourceDiffEditorInput,\n\tisResourceEditorInput,\n\tisResourceMergeEditorInput,\n\tisResourceMultiDiffEditorInput,\n\tisResourceSideBySideEditorInput,\n} from \"../editor.js\";\nimport { EditorInput, type IUntypedEditorOptions } from \"./editorInput.js\";\n\n/**\n * Side by side editor inputs that have a primary and secondary side.\n */\nexport class SideBySideEditorInput\n\textends EditorInput\n\timplements ISideBySideEditorInput\n{\n\tstatic readonly ID: string = \"workbench.editorinputs.sidebysideEditorInput\";\n\n\toverride get typeId(): string {\n\t\treturn SideBySideEditorInput.ID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\t// Use primary capabilities as main capabilities...\n\t\tlet capabilities = this.primary.capabilities;\n\n\t\t// ...with the exception of `CanSplitInGroup` which\n\t\t// is only relevant to single editors.\n\t\tcapabilities &= ~EditorInputCapabilities.CanSplitInGroup;\n\n\t\t// Trust: should be considered for both sides\n\t\tif (\n\t\t\tthis.secondary.hasCapability(EditorInputCapabilities.RequiresTrust)\n\t\t) {\n\t\t\tcapabilities |= EditorInputCapabilities.RequiresTrust;\n\t\t}\n\n\t\t// Singleton: should be considered for both sides\n\t\tif (this.secondary.hasCapability(EditorInputCapabilities.Singleton)) {\n\t\t\tcapabilities |= EditorInputCapabilities.Singleton;\n\t\t}\n\n\t\t// Indicate we show more than one editor\n\t\tcapabilities |= EditorInputCapabilities.MultipleEditors;\n\n\t\treturn capabilities;\n\t}\n\n\tget resource(): URI | undefined {\n\t\tif (this.hasIdenticalSides) {\n\t\t\t// pretend to be just primary side when being asked for a resource\n\t\t\t// in case both sides are the same. this can help when components\n\t\t\t// want to identify this input among others (e.g. in history).\n\t\t\treturn this.primary.resource;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate hasIdenticalSides = this.primary.matches(this.secondary);\n\n\tconstructor(\n\t\tprotected readonly preferredName: string | undefined,\n\t\tprotected readonly preferredDescription: string | undefined,\n\t\treadonly secondary: EditorInput,\n\t\treadonly primary: EditorInput,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// When the primary or secondary input gets disposed, dispose this diff editor input\n\t\tthis._register(\n\t\t\tEvent.once(\n\t\t\t\tEvent.any(\n\t\t\t\t\tthis.primary.onWillDispose,\n\t\t\t\t\tthis.secondary.onWillDispose,\n\t\t\t\t),\n\t\t\t)(() => {\n\t\t\t\tif (!this.isDisposed()) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Re-emit some events from the primary side to the outside\n\t\tthis._register(\n\t\t\tthis.primary.onDidChangeDirty(() => this._onDidChangeDirty.fire()),\n\t\t);\n\n\t\t// Re-emit some events from both sides to the outside\n\t\tthis._register(\n\t\t\tthis.primary.onDidChangeCapabilities(() =>\n\t\t\t\tthis._onDidChangeCapabilities.fire(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.secondary.onDidChangeCapabilities(() =>\n\t\t\t\tthis._onDidChangeCapabilities.fire(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.primary.onDidChangeLabel(() => this._onDidChangeLabel.fire()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.secondary.onDidChangeLabel(() =>\n\t\t\t\tthis._onDidChangeLabel.fire(),\n\t\t\t),\n\t\t);\n\t}\n\n\toverride getName(): string {\n\t\tconst preferredName = this.getPreferredName();\n\t\tif (preferredName) {\n\t\t\treturn preferredName;\n\t\t}\n\n\t\tif (this.hasIdenticalSides) {\n\t\t\treturn this.primary.getName(); // keep name concise when same editor is opened side by side\n\t\t}\n\n\t\treturn localize(\n\t\t\t\"sideBySideLabels\",\n\t\t\t\"{0} - {1}\",\n\t\t\tthis.secondary.getName(),\n\t\t\tthis.primary.getName(),\n\t\t);\n\t}\n\n\tgetPreferredName(): string | undefined {\n\t\treturn this.preferredName;\n\t}\n\n\toverride getDescription(verbosity?: Verbosity): string | undefined {\n\t\tconst preferredDescription = this.getPreferredDescription();\n\t\tif (preferredDescription) {\n\t\t\treturn preferredDescription;\n\t\t}\n\n\t\tif (this.hasIdenticalSides) {\n\t\t\treturn this.primary.getDescription(verbosity);\n\t\t}\n\n\t\treturn super.getDescription(verbosity);\n\t}\n\n\tgetPreferredDescription(): string | undefined {\n\t\treturn this.preferredDescription;\n\t}\n\n\toverride getTitle(verbosity?: Verbosity): string {\n\t\tlet title: string;\n\t\tif (this.hasIdenticalSides) {\n\t\t\ttitle = this.primary.getTitle(verbosity) ?? this.getName();\n\t\t} else {\n\t\t\ttitle = super.getTitle(verbosity);\n\t\t}\n\n\t\tconst preferredTitle = this.getPreferredTitle();\n\t\tif (preferredTitle) {\n\t\t\ttitle = `${preferredTitle} (${title})`;\n\t\t}\n\n\t\treturn title;\n\t}\n\n\tprotected getPreferredTitle(): string | undefined {\n\t\tif (this.preferredName && this.preferredDescription) {\n\t\t\treturn `${this.preferredName} ${this.preferredDescription}`;\n\t\t}\n\n\t\tif (this.preferredName || this.preferredDescription) {\n\t\t\treturn this.preferredName ?? this.preferredDescription;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride getLabelExtraClasses(): string[] {\n\t\tif (this.hasIdenticalSides) {\n\t\t\treturn this.primary.getLabelExtraClasses();\n\t\t}\n\n\t\treturn super.getLabelExtraClasses();\n\t}\n\n\toverride getAriaLabel(): string {\n\t\tif (this.hasIdenticalSides) {\n\t\t\treturn this.primary.getAriaLabel();\n\t\t}\n\n\t\treturn super.getAriaLabel();\n\t}\n\n\toverride getTelemetryDescriptor(): { [key: string]: unknown } {\n\t\tconst descriptor = this.primary.getTelemetryDescriptor();\n\n\t\treturn { ...descriptor, ...super.getTelemetryDescriptor() };\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn this.primary.isDirty();\n\t}\n\n\toverride isSaving(): boolean {\n\t\treturn this.primary.isSaving();\n\t}\n\n\toverride async save(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: ISaveOptions,\n\t): Promise<EditorInput | IUntypedEditorInput | undefined> {\n\t\tconst primarySaveResult = await this.primary.save(group, options);\n\n\t\treturn this.saveResultToEditor(primarySaveResult);\n\t}\n\n\toverride async saveAs(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: ISaveOptions,\n\t): Promise<EditorInput | IUntypedEditorInput | undefined> {\n\t\tconst primarySaveResult = await this.primary.saveAs(group, options);\n\n\t\treturn this.saveResultToEditor(primarySaveResult);\n\t}\n\n\tprivate saveResultToEditor(\n\t\tprimarySaveResult: EditorInput | IUntypedEditorInput | undefined,\n\t): EditorInput | IUntypedEditorInput | undefined {\n\t\tif (!primarySaveResult || !this.hasIdenticalSides) {\n\t\t\treturn primarySaveResult;\n\t\t}\n\n\t\tif (this.primary.matches(primarySaveResult)) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (primarySaveResult instanceof EditorInput) {\n\t\t\treturn new SideBySideEditorInput(\n\t\t\t\tthis.preferredName,\n\t\t\t\tthis.preferredDescription,\n\t\t\t\tprimarySaveResult,\n\t\t\t\tprimarySaveResult,\n\t\t\t\tthis.editorService,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t!isResourceDiffEditorInput(primarySaveResult) &&\n\t\t\t!isResourceMultiDiffEditorInput(primarySaveResult) &&\n\t\t\t!isResourceSideBySideEditorInput(primarySaveResult) &&\n\t\t\t!isResourceMergeEditorInput(primarySaveResult)\n\t\t) {\n\t\t\treturn {\n\t\t\t\tprimary: primarySaveResult,\n\t\t\t\tsecondary: primarySaveResult,\n\t\t\t\tlabel: this.preferredName,\n\t\t\t\tdescription: this.preferredDescription,\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride revert(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: IRevertOptions,\n\t): Promise<void> {\n\t\treturn this.primary.revert(group, options);\n\t}\n\n\toverride async rename(\n\t\tgroup: GroupIdentifier,\n\t\ttarget: URI,\n\t): Promise<IMoveResult | undefined> {\n\t\tif (!this.hasIdenticalSides) {\n\t\t\treturn; // currently only enabled when both sides are identical\n\t\t}\n\n\t\t// Forward rename to primary side\n\t\tconst renameResult = await this.primary.rename(group, target);\n\t\tif (!renameResult) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Build a side-by-side result from the rename result\n\n\t\tif (isEditorInput(renameResult.editor)) {\n\t\t\treturn {\n\t\t\t\teditor: new SideBySideEditorInput(\n\t\t\t\t\tthis.preferredName,\n\t\t\t\t\tthis.preferredDescription,\n\t\t\t\t\trenameResult.editor,\n\t\t\t\t\trenameResult.editor,\n\t\t\t\t\tthis.editorService,\n\t\t\t\t),\n\t\t\t\toptions: {\n\t\t\t\t\t...renameResult.options,\n\t\t\t\t\tviewState: findViewStateForEditor(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\tthis.editorService,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (isResourceEditorInput(renameResult.editor)) {\n\t\t\treturn {\n\t\t\t\teditor: {\n\t\t\t\t\tlabel: this.preferredName,\n\t\t\t\t\tdescription: this.preferredDescription,\n\t\t\t\t\tprimary: renameResult.editor,\n\t\t\t\t\tsecondary: renameResult.editor,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t...renameResult.options,\n\t\t\t\t\t\tviewState: findViewStateForEditor(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t\tthis.editorService,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride isReadonly(): boolean | IMarkdownString {\n\t\treturn this.primary.isReadonly();\n\t}\n\n\toverride toUntyped(\n\t\toptions?: IUntypedEditorOptions,\n\t): IResourceSideBySideEditorInput | undefined {\n\t\tconst primaryResourceEditorInput = this.primary.toUntyped(options);\n\t\tconst secondaryResourceEditorInput = this.secondary.toUntyped(options);\n\n\t\t// Prevent nested side by side editors which are unsupported\n\t\tif (\n\t\t\tprimaryResourceEditorInput &&\n\t\t\tsecondaryResourceEditorInput &&\n\t\t\t!isResourceDiffEditorInput(primaryResourceEditorInput) &&\n\t\t\t!isResourceDiffEditorInput(secondaryResourceEditorInput) &&\n\t\t\t!isResourceMultiDiffEditorInput(primaryResourceEditorInput) &&\n\t\t\t!isResourceMultiDiffEditorInput(secondaryResourceEditorInput) &&\n\t\t\t!isResourceSideBySideEditorInput(primaryResourceEditorInput) &&\n\t\t\t!isResourceSideBySideEditorInput(secondaryResourceEditorInput) &&\n\t\t\t!isResourceMergeEditorInput(primaryResourceEditorInput) &&\n\t\t\t!isResourceMergeEditorInput(secondaryResourceEditorInput)\n\t\t) {\n\t\t\tconst untypedInput: IResourceSideBySideEditorInput = {\n\t\t\t\tlabel: this.preferredName,\n\t\t\t\tdescription: this.preferredDescription,\n\t\t\t\tprimary: primaryResourceEditorInput,\n\t\t\t\tsecondary: secondaryResourceEditorInput,\n\t\t\t};\n\n\t\t\tif (typeof options?.preserveViewState === \"number\") {\n\t\t\t\tuntypedInput.options = {\n\t\t\t\t\tviewState: findViewStateForEditor(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\toptions.preserveViewState,\n\t\t\t\t\t\tthis.editorService,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn untypedInput;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\tisDiffEditorInput(otherInput) ||\n\t\t\tisResourceDiffEditorInput(otherInput)\n\t\t) {\n\t\t\treturn false; // prevent subclass from matching\n\t\t}\n\n\t\tif (otherInput instanceof SideBySideEditorInput) {\n\t\t\treturn (\n\t\t\t\tthis.primary.matches(otherInput.primary) &&\n\t\t\t\tthis.secondary.matches(otherInput.secondary)\n\t\t\t);\n\t\t}\n\n\t\tif (isResourceSideBySideEditorInput(otherInput)) {\n\t\t\treturn (\n\t\t\t\tthis.primary.matches(otherInput.primary) &&\n\t\t\t\tthis.secondary.matches(otherInput.secondary)\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n// Register SideBySide/DiffEditor Input Serializer\ninterface ISerializedSideBySideEditorInput {\n\tname: string | undefined;\n\tdescription: string | undefined;\n\n\tprimarySerialized: string;\n\tsecondarySerialized: string;\n\n\tprimaryTypeId: string;\n\tsecondaryTypeId: string;\n}\n\nexport abstract class AbstractSideBySideEditorInputSerializer\n\timplements IEditorSerializer\n{\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\tconst input = editorInput as SideBySideEditorInput;\n\n\t\tif (input.primary && input.secondary) {\n\t\t\tconst [secondaryInputSerializer, primaryInputSerializer] =\n\t\t\t\tthis.getSerializers(\n\t\t\t\t\tinput.secondary.typeId,\n\t\t\t\t\tinput.primary.typeId,\n\t\t\t\t);\n\n\t\t\treturn !!(\n\t\t\t\tsecondaryInputSerializer?.canSerialize(input.secondary) &&\n\t\t\t\tprimaryInputSerializer?.canSerialize(input.primary)\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tserialize(editorInput: EditorInput): string | undefined {\n\t\tconst input = editorInput as SideBySideEditorInput;\n\n\t\tif (input.primary && input.secondary) {\n\t\t\tconst [secondaryInputSerializer, primaryInputSerializer] =\n\t\t\t\tthis.getSerializers(\n\t\t\t\t\tinput.secondary.typeId,\n\t\t\t\t\tinput.primary.typeId,\n\t\t\t\t);\n\t\t\tif (primaryInputSerializer && secondaryInputSerializer) {\n\t\t\t\tconst primarySerialized = primaryInputSerializer.serialize(\n\t\t\t\t\tinput.primary,\n\t\t\t\t);\n\t\t\t\tconst secondarySerialized = secondaryInputSerializer.serialize(\n\t\t\t\t\tinput.secondary,\n\t\t\t\t);\n\n\t\t\t\tif (primarySerialized && secondarySerialized) {\n\t\t\t\t\tconst serializedEditorInput: ISerializedSideBySideEditorInput =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: input.getPreferredName(),\n\t\t\t\t\t\t\tdescription: input.getPreferredDescription(),\n\t\t\t\t\t\t\tprimarySerialized,\n\t\t\t\t\t\t\tsecondarySerialized,\n\t\t\t\t\t\t\tprimaryTypeId: input.primary.typeId,\n\t\t\t\t\t\t\tsecondaryTypeId: input.secondary.typeId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\treturn JSON.stringify(serializedEditorInput);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tdeserialize(\n\t\tinstantiationService: IInstantiationService,\n\t\tserializedEditorInput: string,\n\t): EditorInput | undefined {\n\t\tconst deserialized: ISerializedSideBySideEditorInput = JSON.parse(\n\t\t\tserializedEditorInput,\n\t\t);\n\n\t\tconst [secondaryInputSerializer, primaryInputSerializer] =\n\t\t\tthis.getSerializers(\n\t\t\t\tdeserialized.secondaryTypeId,\n\t\t\t\tdeserialized.primaryTypeId,\n\t\t\t);\n\t\tif (primaryInputSerializer && secondaryInputSerializer) {\n\t\t\tconst primaryInput = primaryInputSerializer.deserialize(\n\t\t\t\tinstantiationService,\n\t\t\t\tdeserialized.primarySerialized,\n\t\t\t);\n\t\t\tconst secondaryInput = secondaryInputSerializer.deserialize(\n\t\t\t\tinstantiationService,\n\t\t\t\tdeserialized.secondarySerialized,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tprimaryInput instanceof EditorInput &&\n\t\t\t\tsecondaryInput instanceof EditorInput\n\t\t\t) {\n\t\t\t\treturn this.createEditorInput(\n\t\t\t\t\tinstantiationService,\n\t\t\t\t\tdeserialized.name,\n\t\t\t\t\tdeserialized.description,\n\t\t\t\t\tsecondaryInput,\n\t\t\t\t\tprimaryInput,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getSerializers(\n\t\tsecondaryEditorInputTypeId: string,\n\t\tprimaryEditorInputTypeId: string,\n\t): [IEditorSerializer | undefined, IEditorSerializer | undefined] {\n\t\tconst registry = Registry.as<IEditorFactoryRegistry>(\n\t\t\tEditorExtensions.EditorFactory,\n\t\t);\n\n\t\treturn [\n\t\t\tregistry.getEditorSerializer(secondaryEditorInputTypeId),\n\t\t\tregistry.getEditorSerializer(primaryEditorInputTypeId),\n\t\t];\n\t}\n\n\tprotected abstract createEditorInput(\n\t\tinstantiationService: IInstantiationService,\n\t\tname: string | undefined,\n\t\tdescription: string | undefined,\n\t\tsecondaryInput: EditorInput,\n\t\tprimaryInput: EditorInput,\n\t): EditorInput;\n}\n\nexport class SideBySideEditorInputSerializer extends AbstractSideBySideEditorInputSerializer {\n\tprotected createEditorInput(\n\t\tinstantiationService: IInstantiationService,\n\t\tname: string | undefined,\n\t\tdescription: string | undefined,\n\t\tsecondaryInput: EditorInput,\n\t\tprimaryInput: EditorInput,\n\t): EditorInput {\n\t\treturn instantiationService.createInstance(\n\t\t\tSideBySideEditorInput,\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tsecondaryInput,\n\t\t\tprimaryInput,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
