{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/common/editor/textEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ThrottledDelayer } from \"../../../base/common/async.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport { MutableDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\ttype ILanguageSelection,\n\tILanguageService,\n} from \"../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../editor/common/languages/modesRegistry.js\";\nimport {\n\ttype ITextBufferFactory,\n\ttype ITextModel,\n\ttype ITextSnapshot,\n\tModelConstants,\n} from \"../../../editor/common/model.js\";\nimport { IModelService } from \"../../../editor/common/services/model.js\";\nimport type {\n\tIResolvedTextEditorModel,\n\tITextEditorModel,\n} from \"../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IAccessibilityService } from \"../../../platform/accessibility/common/accessibility.js\";\nimport {\n\tILanguageDetectionService,\n\tLanguageDetectionLanguageEventSource,\n} from \"../../services/languageDetection/common/languageDetectionWorkerService.js\";\nimport type { ILanguageSupport } from \"../../services/textfile/common/textfiles.js\";\nimport { EditorModel } from \"./editorModel.js\";\n\n/**\n * The base text editor model leverages the code editor model. This class is only intended to be subclassed and not instantiated.\n */\nexport class BaseTextEditorModel\n\textends EditorModel\n\timplements ITextEditorModel, ILanguageSupport\n{\n\tprivate static readonly AUTO_DETECT_LANGUAGE_THROTTLE_DELAY = 600;\n\n\tprotected textEditorModelHandle: URI | undefined = undefined;\n\n\tprivate createdEditorModel: boolean | undefined;\n\n\tprivate readonly modelDisposeListener = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly autoDetectLanguageThrottler = this._register(\n\t\tnew ThrottledDelayer<void>(\n\t\t\tBaseTextEditorModel.AUTO_DETECT_LANGUAGE_THROTTLE_DELAY,\n\t\t),\n\t);\n\n\tconstructor(\n\t\t@IModelService protected modelService: IModelService,\n\t\t@ILanguageService protected languageService: ILanguageService,\n\t\t@ILanguageDetectionService\n\t\tprivate readonly languageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService\n\t\tprivate readonly accessibilityService: IAccessibilityService,\n\t\ttextEditorModelHandle?: URI,\n\t) {\n\t\tsuper();\n\n\t\tif (textEditorModelHandle) {\n\t\t\tthis.handleExistingModel(textEditorModelHandle);\n\t\t}\n\t}\n\n\tprivate handleExistingModel(textEditorModelHandle: URI): void {\n\t\t// We need the resource to point to an existing model\n\t\tconst model = this.modelService.getModel(textEditorModelHandle);\n\t\tif (!model) {\n\t\t\tthrow new Error(\n\t\t\t\t`Document with resource ${textEditorModelHandle.toString(true)} does not exist`,\n\t\t\t);\n\t\t}\n\n\t\tthis.textEditorModelHandle = textEditorModelHandle;\n\n\t\t// Make sure we clean up when this model gets disposed\n\t\tthis.registerModelDisposeListener(model);\n\t}\n\n\tprivate registerModelDisposeListener(model: ITextModel): void {\n\t\tthis.modelDisposeListener.value = model.onWillDispose(() => {\n\t\t\tthis.textEditorModelHandle = undefined; // make sure we do not dispose code editor model again\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tget textEditorModel(): ITextModel | null {\n\t\treturn this.textEditorModelHandle\n\t\t\t? this.modelService.getModel(this.textEditorModelHandle)\n\t\t\t: null;\n\t}\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\treturn true;\n\t}\n\n\tprivate _hasLanguageSetExplicitly = false;\n\tget hasLanguageSetExplicitly(): boolean {\n\t\treturn this._hasLanguageSetExplicitly;\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\t// Remember that an explicit language was set\n\t\tthis._hasLanguageSetExplicitly = true;\n\n\t\tthis.setLanguageIdInternal(languageId, source);\n\t}\n\n\tprivate setLanguageIdInternal(languageId: string, source?: string): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!languageId ||\n\t\t\tlanguageId === this.textEditorModel.getLanguageId()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.textEditorModel.setLanguage(\n\t\t\tthis.languageService.createById(languageId),\n\t\t\tsource,\n\t\t);\n\t}\n\n\tprotected installModelListeners(model: ITextModel): void {\n\t\t// Setup listener for lower level language changes\n\t\tconst disposable = this._register(\n\t\t\tmodel.onDidChangeLanguage((e) => {\n\t\t\t\tif (e.source === LanguageDetectionLanguageEventSource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._hasLanguageSetExplicitly = true;\n\t\t\t\tdisposable.dispose();\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\treturn this.textEditorModel?.getLanguageId();\n\t}\n\n\tprotected autoDetectLanguage(): Promise<void> {\n\t\treturn this.autoDetectLanguageThrottler.trigger(() =>\n\t\t\tthis.doAutoDetectLanguage(),\n\t\t);\n\t}\n\n\tprivate async doAutoDetectLanguage(): Promise<void> {\n\t\tif (\n\t\t\tthis.hasLanguageSetExplicitly || // skip detection when the user has made an explicit choice on the language\n\t\t\t!this.textEditorModelHandle || // require a URI to run the detection for\n\t\t\t!this.languageDetectionService.isEnabledForLanguage(\n\t\t\t\tthis.getLanguageId() ?? PLAINTEXT_LANGUAGE_ID,\n\t\t\t) // require a valid language that is enlisted for detection\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lang = await this.languageDetectionService.detectLanguage(\n\t\t\tthis.textEditorModelHandle,\n\t\t);\n\t\tconst prevLang = this.getLanguageId();\n\t\tif (lang && lang !== prevLang && !this.isDisposed()) {\n\t\t\tthis.setLanguageIdInternal(\n\t\t\t\tlang,\n\t\t\t\tLanguageDetectionLanguageEventSource,\n\t\t\t);\n\t\t\tconst languageName = this.languageService.getLanguageName(lang);\n\t\t\tthis.accessibilityService.alert(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"languageAutoDetected\",\n\t\t\t\t\t\"Language {0} was automatically detected and set as the language mode.\",\n\t\t\t\t\tlanguageName ?? lang,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the text editor model with the provided value, optional preferred language\n\t * (can be comma separated for multiple values) and optional resource URL.\n\t */\n\tprotected createTextEditorModel(\n\t\tvalue: ITextBufferFactory,\n\t\tresource: URI | undefined,\n\t\tpreferredLanguageId?: string,\n\t): ITextModel {\n\t\tconst firstLineText = this.getFirstLineText(value);\n\t\tconst languageSelection = this.getOrCreateLanguage(\n\t\t\tresource,\n\t\t\tthis.languageService,\n\t\t\tpreferredLanguageId,\n\t\t\tfirstLineText,\n\t\t);\n\n\t\treturn this.doCreateTextEditorModel(value, languageSelection, resource);\n\t}\n\n\tprivate doCreateTextEditorModel(\n\t\tvalue: ITextBufferFactory,\n\t\tlanguageSelection: ILanguageSelection,\n\t\tresource: URI | undefined,\n\t): ITextModel {\n\t\tlet model = resource && this.modelService.getModel(resource);\n\t\tif (model) {\n\t\t\tthis.updateTextEditorModel(value, languageSelection.languageId);\n\t\t} else {\n\t\t\tmodel = this.modelService.createModel(\n\t\t\t\tvalue,\n\t\t\t\tlanguageSelection,\n\t\t\t\tresource,\n\t\t\t);\n\t\t\tthis.createdEditorModel = true;\n\n\t\t\t// Make sure we clean up when this model gets disposed\n\t\t\tthis.registerModelDisposeListener(model);\n\t\t}\n\n\t\tthis.textEditorModelHandle = model.uri;\n\n\t\treturn model;\n\t}\n\n\tprotected getFirstLineText(value: ITextBufferFactory | ITextModel): string {\n\t\t// text buffer factory\n\t\tconst textBufferFactory = value as ITextBufferFactory;\n\t\tif (typeof textBufferFactory.getFirstLineText === \"function\") {\n\t\t\treturn textBufferFactory.getFirstLineText(\n\t\t\t\tModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT,\n\t\t\t);\n\t\t}\n\n\t\t// text model\n\t\tconst textSnapshot = value as ITextModel;\n\t\treturn textSnapshot\n\t\t\t.getLineContent(1)\n\t\t\t.substr(0, ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT);\n\t}\n\n\t/**\n\t * Gets the language for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n\t *\n\t * @param firstLineText optional first line of the text buffer to set the language on. This can be used to guess a language from content.\n\t */\n\tprotected getOrCreateLanguage(\n\t\tresource: URI | undefined,\n\t\tlanguageService: ILanguageService,\n\t\tpreferredLanguage: string | undefined,\n\t\tfirstLineText?: string,\n\t): ILanguageSelection {\n\t\t// lookup language via resource path if the provided language is unspecific\n\t\tif (!preferredLanguage || preferredLanguage === PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn languageService.createByFilepathOrFirstLine(\n\t\t\t\tresource ?? null,\n\t\t\t\tfirstLineText,\n\t\t\t);\n\t\t}\n\n\t\t// otherwise take the preferred language for granted\n\t\treturn languageService.createById(preferredLanguage);\n\t}\n\n\t/**\n\t * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n\t */\n\tupdateTextEditorModel(\n\t\tnewValue?: ITextBufferFactory,\n\t\tpreferredLanguageId?: string,\n\t): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// contents\n\t\tif (newValue) {\n\t\t\tthis.modelService.updateModel(this.textEditorModel, newValue);\n\t\t}\n\n\t\t// language (only if specific and changed)\n\t\tif (\n\t\t\tpreferredLanguageId &&\n\t\t\tpreferredLanguageId !== PLAINTEXT_LANGUAGE_ID &&\n\t\t\tthis.textEditorModel.getLanguageId() !== preferredLanguageId\n\t\t) {\n\t\t\tthis.textEditorModel.setLanguage(\n\t\t\t\tthis.languageService.createById(preferredLanguageId),\n\t\t\t);\n\t\t}\n\t}\n\n\tcreateSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;\n\tcreateSnapshot(this: ITextEditorModel): ITextSnapshot | null;\n\tcreateSnapshot(): ITextSnapshot | null {\n\t\tif (!this.textEditorModel) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.textEditorModel.createSnapshot(true /* preserve BOM */);\n\t}\n\n\toverride isResolved(): this is IResolvedTextEditorModel {\n\t\treturn !!this.textEditorModelHandle;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise\n\n\t\tif (this.textEditorModelHandle && this.createdEditorModel) {\n\t\t\tthis.modelService.destroyModel(this.textEditorModelHandle);\n\t\t}\n\n\t\tthis.textEditorModelHandle = undefined;\n\t\tthis.createdEditorModel = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
