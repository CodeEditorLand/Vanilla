{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { matchesFuzzy } from \"../../../../base/common/filters.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { fuzzyContains } from \"../../../../base/common/strings.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport { Action2 } from \"../../../../platform/actions/common/actions.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\ttype IPickerQuickAccessItem,\n\tPickerQuickAccessProvider,\n} from \"../../../../platform/quickinput/browser/pickerQuickAccess.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickSeparator,\n\tItemActivation,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport type { PaneCompositeDescriptor } from \"../../../browser/panecomposite.js\";\nimport {\n\tIViewDescriptorService,\n\ttype ViewContainer,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport { IOutputService } from \"../../../services/output/common/output.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { IDebugService, REPL_VIEW_ID } from \"../../debug/common/debug.js\";\nimport {\n\tITerminalGroupService,\n\tITerminalService,\n} from \"../../terminal/browser/terminal.js\";\n\ninterface IViewQuickPickItem extends IPickerQuickAccessItem {\n\tcontainerLabel: string;\n}\n\nexport class ViewQuickAccessProvider extends PickerQuickAccessProvider<IViewQuickPickItem> {\n\tstatic PREFIX = \"view \";\n\n\tconstructor(\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@ITerminalGroupService private readonly terminalGroupService: ITerminalGroupService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(ViewQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noViewResults', \"No matching views\"),\n\t\t\t\tcontainerLabel: ''\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _getPicks(\n\t\tfilter: string,\n\t): Array<IViewQuickPickItem | IQuickPickSeparator> {\n\t\tconst filteredViewEntries = this.doGetViewPickItems().filter(\n\t\t\t(entry) => {\n\t\t\t\tif (!filter) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Match fuzzy on label\n\t\t\t\tentry.highlights = {\n\t\t\t\t\tlabel: matchesFuzzy(filter, entry.label, true) ?? undefined,\n\t\t\t\t};\n\n\t\t\t\t// Return if we have a match on label or container\n\t\t\t\treturn (\n\t\t\t\t\tentry.highlights.label ||\n\t\t\t\t\tfuzzyContains(entry.containerLabel, filter)\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\n\t\t// Map entries to container labels\n\t\tconst mapEntryToContainer = new Map<string, string>();\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (!mapEntryToContainer.has(entry.label)) {\n\t\t\t\tmapEntryToContainer.set(entry.label, entry.containerLabel);\n\t\t\t}\n\t\t}\n\n\t\t// Add separators for containers\n\t\tconst filteredViewEntriesWithSeparators: Array<\n\t\t\tIViewQuickPickItem | IQuickPickSeparator\n\t\t> = [];\n\t\tlet lastContainer: string | undefined;\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (lastContainer !== entry.containerLabel) {\n\t\t\t\tlastContainer = entry.containerLabel;\n\n\t\t\t\t// When the entry container has a parent container, set container\n\t\t\t\t// label as Parent / Child. For example, `Views / Explorer`.\n\t\t\t\tlet separatorLabel: string;\n\t\t\t\tif (mapEntryToContainer.has(lastContainer)) {\n\t\t\t\t\tseparatorLabel = `${mapEntryToContainer.get(lastContainer)} / ${lastContainer}`;\n\t\t\t\t} else {\n\t\t\t\t\tseparatorLabel = lastContainer;\n\t\t\t\t}\n\n\t\t\t\tfilteredViewEntriesWithSeparators.push({\n\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\tlabel: separatorLabel,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfilteredViewEntriesWithSeparators.push(entry);\n\t\t}\n\n\t\treturn filteredViewEntriesWithSeparators;\n\t}\n\n\tprivate doGetViewPickItems(): Array<IViewQuickPickItem> {\n\t\tconst viewEntries: Array<IViewQuickPickItem> = [];\n\n\t\tconst getViewEntriesForPaneComposite = (\n\t\t\tpaneComposite: PaneCompositeDescriptor,\n\t\t\tviewContainer: ViewContainer,\n\t\t): IViewQuickPickItem[] => {\n\t\t\tconst viewContainerModel =\n\t\t\t\tthis.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\t\tconst result: IViewQuickPickItem[] = [];\n\t\t\tfor (const view of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (this.contextKeyService.contextMatchesRules(view.when)) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tlabel: view.name.value,\n\t\t\t\t\t\tcontainerLabel: viewContainerModel.title,\n\t\t\t\t\t\taccept: () => this.viewsService.openView(view.id, true),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst addPaneComposites = (\n\t\t\tlocation: ViewContainerLocation,\n\t\t\tcontainerLabel: string,\n\t\t) => {\n\t\t\tconst paneComposites =\n\t\t\t\tthis.paneCompositeService.getPaneComposites(location);\n\t\t\tconst visiblePaneCompositeIds =\n\t\t\t\tthis.paneCompositeService.getVisiblePaneCompositeIds(location);\n\n\t\t\tpaneComposites.sort((a, b) => {\n\t\t\t\tlet aIndex = visiblePaneCompositeIds.findIndex(\n\t\t\t\t\t(id) => a.id === id,\n\t\t\t\t);\n\t\t\t\tlet bIndex = visiblePaneCompositeIds.findIndex(\n\t\t\t\t\t(id) => b.id === id,\n\t\t\t\t);\n\n\t\t\t\tif (aIndex < 0) {\n\t\t\t\t\taIndex =\n\t\t\t\t\t\tpaneComposites.indexOf(a) +\n\t\t\t\t\t\tvisiblePaneCompositeIds.length;\n\t\t\t\t}\n\n\t\t\t\tif (bIndex < 0) {\n\t\t\t\t\tbIndex =\n\t\t\t\t\t\tpaneComposites.indexOf(b) +\n\t\t\t\t\t\tvisiblePaneCompositeIds.length;\n\t\t\t\t}\n\n\t\t\t\treturn aIndex - bIndex;\n\t\t\t});\n\n\t\t\tfor (const paneComposite of paneComposites) {\n\t\t\t\tif (this.includeViewContainer(paneComposite)) {\n\t\t\t\t\tconst viewContainer =\n\t\t\t\t\t\tthis.viewDescriptorService.getViewContainerById(\n\t\t\t\t\t\t\tpaneComposite.id,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (viewContainer) {\n\t\t\t\t\t\tviewEntries.push({\n\t\t\t\t\t\t\tlabel: this.viewDescriptorService.getViewContainerModel(\n\t\t\t\t\t\t\t\tviewContainer,\n\t\t\t\t\t\t\t).title,\n\t\t\t\t\t\t\tcontainerLabel,\n\t\t\t\t\t\t\taccept: () =>\n\t\t\t\t\t\t\t\tthis.paneCompositeService.openPaneComposite(\n\t\t\t\t\t\t\t\t\tpaneComposite.id,\n\t\t\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Viewlets / Panels\n\t\taddPaneComposites(\n\t\t\tViewContainerLocation.Sidebar,\n\t\t\tlocalize(\"views\", \"Side Bar\"),\n\t\t);\n\t\taddPaneComposites(\n\t\t\tViewContainerLocation.Panel,\n\t\t\tlocalize(\"panels\", \"Panel\"),\n\t\t);\n\t\taddPaneComposites(\n\t\t\tViewContainerLocation.AuxiliaryBar,\n\t\t\tlocalize(\"secondary side bar\", \"Secondary Side Bar\"),\n\t\t);\n\n\t\tconst addPaneCompositeViews = (location: ViewContainerLocation) => {\n\t\t\tconst paneComposites =\n\t\t\t\tthis.paneCompositeService.getPaneComposites(location);\n\t\t\tfor (const paneComposite of paneComposites) {\n\t\t\t\tconst viewContainer =\n\t\t\t\t\tthis.viewDescriptorService.getViewContainerById(\n\t\t\t\t\t\tpaneComposite.id,\n\t\t\t\t\t);\n\t\t\t\tif (viewContainer) {\n\t\t\t\t\tviewEntries.push(\n\t\t\t\t\t\t...getViewEntriesForPaneComposite(\n\t\t\t\t\t\t\tpaneComposite,\n\t\t\t\t\t\t\tviewContainer,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Side Bar / Panel Views\n\t\taddPaneCompositeViews(ViewContainerLocation.Sidebar);\n\t\taddPaneCompositeViews(ViewContainerLocation.Panel);\n\t\taddPaneCompositeViews(ViewContainerLocation.AuxiliaryBar);\n\n\t\t// Terminals\n\t\tthis.terminalGroupService.groups.forEach((group, groupIndex) => {\n\t\t\tgroup.terminalInstances.forEach((terminal, terminalIndex) => {\n\t\t\t\tconst label = localize(\n\t\t\t\t\t\"terminalTitle\",\n\t\t\t\t\t\"{0}: {1}\",\n\t\t\t\t\t`${groupIndex + 1}.${terminalIndex + 1}`,\n\t\t\t\t\tterminal.title,\n\t\t\t\t);\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel,\n\t\t\t\t\tcontainerLabel: localize(\"terminals\", \"Terminal\"),\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait this.terminalGroupService.showPanel(true);\n\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Debug Consoles\n\t\tthis.debugService\n\t\t\t.getModel()\n\t\t\t.getSessions(true)\n\t\t\t.filter((s) => s.hasSeparateRepl())\n\t\t\t.forEach((session, _) => {\n\t\t\t\tconst label = session.name;\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel,\n\t\t\t\t\tcontainerLabel: localize(\"debugConsoles\", \"Debug Console\"),\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait this.debugService.focusStackFrame(\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\t{ explicit: true },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!this.viewsService.isViewVisible(REPL_VIEW_ID)) {\n\t\t\t\t\t\t\tawait this.viewsService.openView(\n\t\t\t\t\t\t\t\tREPL_VIEW_ID,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t// Output Channels\n\t\tconst channels = this.outputService.getChannelDescriptors();\n\t\tfor (const channel of channels) {\n\t\t\tviewEntries.push({\n\t\t\t\tlabel: channel.label,\n\t\t\t\tcontainerLabel: localize(\"channels\", \"Output\"),\n\t\t\t\taccept: () => this.outputService.showChannel(channel.id),\n\t\t\t});\n\t\t}\n\n\t\treturn viewEntries;\n\t}\n\n\tprivate includeViewContainer(container: PaneCompositeDescriptor): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(\n\t\t\tcontainer.id,\n\t\t);\n\t\tif (viewContainer?.hideIfEmpty) {\n\t\t\treturn (\n\t\t\t\tthis.viewDescriptorService.getViewContainerModel(viewContainer)\n\t\t\t\t\t.activeViewDescriptors.length > 0\n\t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n//#region Actions\n\nexport class OpenViewPickerAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.openView\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenViewPickerAction.ID,\n\t\t\ttitle: localize2(\"openView\", \"Open View\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor\n\t\t\t.get(IQuickInputService)\n\t\t\t.quickAccess.show(ViewQuickAccessProvider.PREFIX);\n\t}\n}\n\nexport class QuickAccessViewPickerAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.quickOpenView\";\n\tstatic readonly KEYBINDING = {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyQ,\n\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyQ },\n\t\tlinux: { primary: 0 },\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: QuickAccessViewPickerAction.ID,\n\t\t\ttitle: localize2(\"quickOpenView\", \"Quick Open View\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false, // hide quick pickers from command palette to not confuse with the other entry that shows a input field\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: undefined,\n\t\t\t\t...QuickAccessViewPickerAction.KEYBINDING,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(\n\t\t\tQuickAccessViewPickerAction.ID,\n\t\t);\n\n\t\tquickInputService.quickAccess.show(ViewQuickAccessProvider.PREFIX, {\n\t\t\tquickNavigateConfiguration: { keybindings: keys },\n\t\t\titemActivation: ItemActivation.FIRST,\n\t\t});\n\t}\n}\n\n//#endregion\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,oBAAoB;AAC7B,SAAS,SAAS,cAAc;AAChC,SAAS,qBAAqB;AAC9B,SAAS,UAAU,iBAAiB;AACpC,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,0BAA0B;AAEnC,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AAEP;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,iCAAiC;AAC1C,SAAS,qBAAqB;AAC9B,SAAS,eAAe,oBAAoB;AAC5C;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAMA,IAAM,0BAAN,cAAsC,0BAA8C;AAAA,EAG1F,YAC0C,uBACT,cACC,eACE,iBACK,sBACR,cACY,sBACP,mBACpC;AACD,UAAM,wBAAwB,QAAQ;AAAA,MACrC,eAAe;AAAA,QACd,OAAO,SAAS,iBAAiB,mBAAmB;AAAA,QACpD,gBAAgB;AAAA,MACjB;AAAA,IACD,CAAC;AAdwC;AACT;AACC;AACE;AACK;AACR;AACY;AACP;AAAA,EAQtC;AAAA,EA9DD,OA2C2F;AAAA;AAAA;AAAA,EAC1F,OAAO,SAAS;AAAA,EAoBN,UACT,QACkD;AAClD,UAAM,sBAAsB,KAAK,mBAAmB,EAAE;AAAA,MACrD,CAAC,UAAU;AACV,YAAI,CAAC,QAAQ;AACZ,iBAAO;AAAA,QACR;AAGA,cAAM,aAAa;AAAA,UAClB,OAAO,aAAa,QAAQ,MAAM,OAAO,IAAI,KAAK;AAAA,QACnD;AAGA,eACC,MAAM,WAAW,SACjB,cAAc,MAAM,gBAAgB,MAAM;AAAA,MAE5C;AAAA,IACD;AAGA,UAAM,sBAAsB,oBAAI,IAAoB;AACpD,eAAW,SAAS,qBAAqB;AACxC,UAAI,CAAC,oBAAoB,IAAI,MAAM,KAAK,GAAG;AAC1C,4BAAoB,IAAI,MAAM,OAAO,MAAM,cAAc;AAAA,MAC1D;AAAA,IACD;AAGA,UAAM,oCAEF,CAAC;AACL,QAAI;AACJ,eAAW,SAAS,qBAAqB;AACxC,UAAI,kBAAkB,MAAM,gBAAgB;AAC3C,wBAAgB,MAAM;AAItB,YAAI;AACJ,YAAI,oBAAoB,IAAI,aAAa,GAAG;AAC3C,2BAAiB,GAAG,oBAAoB,IAAI,aAAa,CAAC,MAAM,aAAa;AAAA,QAC9E,OAAO;AACN,2BAAiB;AAAA,QAClB;AAEA,0CAAkC,KAAK;AAAA,UACtC,MAAM;AAAA,UACN,OAAO;AAAA,QACR,CAAC;AAAA,MACF;AAEA,wCAAkC,KAAK,KAAK;AAAA,IAC7C;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,qBAAgD;AACvD,UAAM,cAAyC,CAAC;AAEhD,UAAM,iCAAiC,wBACtC,eACA,kBAC0B;AAC1B,YAAM,qBACL,KAAK,sBAAsB,sBAAsB,aAAa;AAC/D,YAAM,SAA+B,CAAC;AACtC,iBAAW,QAAQ,mBAAmB,oBAAoB;AACzD,YAAI,KAAK,kBAAkB,oBAAoB,KAAK,IAAI,GAAG;AAC1D,iBAAO,KAAK;AAAA,YACX,OAAO,KAAK,KAAK;AAAA,YACjB,gBAAgB,mBAAmB;AAAA,YACnC,QAAQ,6BAAM,KAAK,aAAa,SAAS,KAAK,IAAI,IAAI,GAA9C;AAAA,UACT,CAAC;AAAA,QACF;AAAA,MACD;AAEA,aAAO;AAAA,IACR,GAlBuC;AAoBvC,UAAM,oBAAoB,wBACzB,UACA,mBACI;AACJ,YAAM,iBACL,KAAK,qBAAqB,kBAAkB,QAAQ;AACrD,YAAM,0BACL,KAAK,qBAAqB,2BAA2B,QAAQ;AAE9D,qBAAe,KAAK,CAAC,GAAG,MAAM;AAC7B,YAAI,SAAS,wBAAwB;AAAA,UACpC,CAAC,OAAO,EAAE,OAAO;AAAA,QAClB;AACA,YAAI,SAAS,wBAAwB;AAAA,UACpC,CAAC,OAAO,EAAE,OAAO;AAAA,QAClB;AAEA,YAAI,SAAS,GAAG;AACf,mBACC,eAAe,QAAQ,CAAC,IACxB,wBAAwB;AAAA,QAC1B;AAEA,YAAI,SAAS,GAAG;AACf,mBACC,eAAe,QAAQ,CAAC,IACxB,wBAAwB;AAAA,QAC1B;AAEA,eAAO,SAAS;AAAA,MACjB,CAAC;AAED,iBAAW,iBAAiB,gBAAgB;AAC3C,YAAI,KAAK,qBAAqB,aAAa,GAAG;AAC7C,gBAAM,gBACL,KAAK,sBAAsB;AAAA,YAC1B,cAAc;AAAA,UACf;AACD,cAAI,eAAe;AAClB,wBAAY,KAAK;AAAA,cAChB,OAAO,KAAK,sBAAsB;AAAA,gBACjC;AAAA,cACD,EAAE;AAAA,cACF;AAAA,cACA,QAAQ,6BACP,KAAK,qBAAqB;AAAA,gBACzB,cAAc;AAAA,gBACd;AAAA,gBACA;AAAA,cACD,GALO;AAAA,YAMT,CAAC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IACD,GAtD0B;AAyD1B;AAAA,MACC,sBAAsB;AAAA,MACtB,SAAS,SAAS,UAAU;AAAA,IAC7B;AACA;AAAA,MACC,sBAAsB;AAAA,MACtB,SAAS,UAAU,OAAO;AAAA,IAC3B;AACA;AAAA,MACC,sBAAsB;AAAA,MACtB,SAAS,sBAAsB,oBAAoB;AAAA,IACpD;AAEA,UAAM,wBAAwB,wBAAC,aAAoC;AAClE,YAAM,iBACL,KAAK,qBAAqB,kBAAkB,QAAQ;AACrD,iBAAW,iBAAiB,gBAAgB;AAC3C,cAAM,gBACL,KAAK,sBAAsB;AAAA,UAC1B,cAAc;AAAA,QACf;AACD,YAAI,eAAe;AAClB,sBAAY;AAAA,YACX,GAAG;AAAA,cACF;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,GAjB8B;AAoB9B,0BAAsB,sBAAsB,OAAO;AACnD,0BAAsB,sBAAsB,KAAK;AACjD,0BAAsB,sBAAsB,YAAY;AAGxD,SAAK,qBAAqB,OAAO,QAAQ,CAAC,OAAO,eAAe;AAC/D,YAAM,kBAAkB,QAAQ,CAAC,UAAU,kBAAkB;AAC5D,cAAM,QAAQ;AAAA,UACb;AAAA,UACA;AAAA,UACA,GAAG,aAAa,CAAC,IAAI,gBAAgB,CAAC;AAAA,UACtC,SAAS;AAAA,QACV;AACA,oBAAY,KAAK;AAAA,UAChB;AAAA,UACA,gBAAgB,SAAS,aAAa,UAAU;AAAA,UAChD,QAAQ,mCAAY;AACnB,kBAAM,KAAK,qBAAqB,UAAU,IAAI;AAC9C,iBAAK,gBAAgB,kBAAkB,QAAQ;AAAA,UAChD,GAHQ;AAAA,QAIT,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAGD,SAAK,aACH,SAAS,EACT,YAAY,IAAI,EAChB,OAAO,CAAC,MAAM,EAAE,gBAAgB,CAAC,EACjC,QAAQ,CAAC,SAAS,MAAM;AACxB,YAAM,QAAQ,QAAQ;AACtB,kBAAY,KAAK;AAAA,QAChB;AAAA,QACA,gBAAgB,SAAS,iBAAiB,eAAe;AAAA,QACzD,QAAQ,mCAAY;AACnB,gBAAM,KAAK,aAAa;AAAA,YACvB;AAAA,YACA;AAAA,YACA;AAAA,YACA,EAAE,UAAU,KAAK;AAAA,UAClB;AAEA,cAAI,CAAC,KAAK,aAAa,cAAc,YAAY,GAAG;AACnD,kBAAM,KAAK,aAAa;AAAA,cACvB;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD,GAdQ;AAAA,MAeT,CAAC;AAAA,IACF,CAAC;AAGF,UAAM,WAAW,KAAK,cAAc,sBAAsB;AAC1D,eAAW,WAAW,UAAU;AAC/B,kBAAY,KAAK;AAAA,QAChB,OAAO,QAAQ;AAAA,QACf,gBAAgB,SAAS,YAAY,QAAQ;AAAA,QAC7C,QAAQ,6BAAM,KAAK,cAAc,YAAY,QAAQ,EAAE,GAA/C;AAAA,MACT,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,qBAAqB,WAA6C;AACzE,UAAM,gBAAgB,KAAK,sBAAsB;AAAA,MAChD,UAAU;AAAA,IACX;AACA,QAAI,eAAe,aAAa;AAC/B,aACC,KAAK,sBAAsB,sBAAsB,aAAa,EAC5D,sBAAsB,SAAS;AAAA,IAEnC;AAEA,WAAO;AAAA,EACR;AACD;AAhRa,0BAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;AAoRN,MAAM,6BAA6B,QAAQ;AAAA,EA/TlD,OA+TkD;AAAA;AAAA;AAAA,EACjD,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM;AAAA,MACL,IAAI,qBAAqB;AAAA,MACzB,OAAO,UAAU,YAAY,WAAW;AAAA,MACxC,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,aACE,IAAI,kBAAkB,EACtB,YAAY,KAAK,wBAAwB,MAAM;AAAA,EAClD;AACD;AAEO,MAAM,oCAAoC,QAAQ;AAAA,EAlVzD,OAkVyD;AAAA;AAAA;AAAA,EACxD,OAAgB,KAAK;AAAA,EACrB,OAAgB,aAAa;AAAA,IAC5B,SAAS,OAAO,UAAU,QAAQ;AAAA,IAClC,KAAK,EAAE,SAAS,OAAO,UAAU,QAAQ,KAAK;AAAA,IAC9C,OAAO,EAAE,SAAS,EAAE;AAAA,EACrB;AAAA,EAEA,cAAc;AACb,UAAM;AAAA,MACL,IAAI,4BAA4B;AAAA,MAChC,OAAO,UAAU,iBAAiB,iBAAiB;AAAA,MACnD,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA;AAAA,MACJ,YAAY;AAAA,QACX,QAAQ,iBAAiB;AAAA,QACzB,MAAM;AAAA,QACN,GAAG,4BAA4B;AAAA,MAChC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,UAAM,OAAO,kBAAkB;AAAA,MAC9B,4BAA4B;AAAA,IAC7B;AAEA,sBAAkB,YAAY,KAAK,wBAAwB,QAAQ;AAAA,MAClE,4BAA4B,EAAE,aAAa,KAAK;AAAA,MAChD,gBAAgB,eAAe;AAAA,IAChC,CAAC;AAAA,EACF;AACD;",
  "names": []
}
