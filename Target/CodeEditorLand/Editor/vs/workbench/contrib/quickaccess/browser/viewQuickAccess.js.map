{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IQuickPickSeparator, IQuickInputService, ItemActivation } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IPickerQuickAccessItem, PickerQuickAccessProvider } from '../../../../platform/quickinput/browser/pickerQuickAccess.js';\nimport { IViewDescriptorService, ViewContainer, ViewContainerLocation } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { IOutputService } from '../../../services/output/common/output.js';\nimport { ITerminalGroupService, ITerminalService } from '../../terminal/browser/terminal.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { PaneCompositeDescriptor } from '../../../browser/panecomposite.js';\nimport { matchesFuzzy } from '../../../../base/common/filters.js';\nimport { fuzzyContains } from '../../../../base/common/strings.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Action2 } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeyMod, KeyCode } from '../../../../base/common/keyCodes.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nimport { IDebugService, REPL_VIEW_ID } from '../../debug/common/debug.js';\n\ninterface IViewQuickPickItem extends IPickerQuickAccessItem {\n\tcontainerLabel: string;\n}\n\nexport class ViewQuickAccessProvider extends PickerQuickAccessProvider<IViewQuickPickItem> {\n\n\tstatic PREFIX = 'view ';\n\n\tconstructor(\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@ITerminalGroupService private readonly terminalGroupService: ITerminalGroupService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(ViewQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noViewResults', \"No matching views\"),\n\t\t\t\tcontainerLabel: ''\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _getPicks(filter: string): Array<IViewQuickPickItem | IQuickPickSeparator> {\n\t\tconst filteredViewEntries = this.doGetViewPickItems().filter(entry => {\n\t\t\tif (!filter) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Match fuzzy on label\n\t\t\tentry.highlights = { label: matchesFuzzy(filter, entry.label, true) ?? undefined };\n\n\t\t\t// Return if we have a match on label or container\n\t\t\treturn entry.highlights.label || fuzzyContains(entry.containerLabel, filter);\n\t\t});\n\n\t\t// Map entries to container labels\n\t\tconst mapEntryToContainer = new Map<string, string>();\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (!mapEntryToContainer.has(entry.label)) {\n\t\t\t\tmapEntryToContainer.set(entry.label, entry.containerLabel);\n\t\t\t}\n\t\t}\n\n\t\t// Add separators for containers\n\t\tconst filteredViewEntriesWithSeparators: Array<IViewQuickPickItem | IQuickPickSeparator> = [];\n\t\tlet lastContainer: string | undefined = undefined;\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (lastContainer !== entry.containerLabel) {\n\t\t\t\tlastContainer = entry.containerLabel;\n\n\t\t\t\t// When the entry container has a parent container, set container\n\t\t\t\t// label as Parent / Child. For example, `Views / Explorer`.\n\t\t\t\tlet separatorLabel: string;\n\t\t\t\tif (mapEntryToContainer.has(lastContainer)) {\n\t\t\t\t\tseparatorLabel = `${mapEntryToContainer.get(lastContainer)} / ${lastContainer}`;\n\t\t\t\t} else {\n\t\t\t\t\tseparatorLabel = lastContainer;\n\t\t\t\t}\n\n\t\t\t\tfilteredViewEntriesWithSeparators.push({ type: 'separator', label: separatorLabel });\n\n\t\t\t}\n\n\t\t\tfilteredViewEntriesWithSeparators.push(entry);\n\t\t}\n\n\t\treturn filteredViewEntriesWithSeparators;\n\t}\n\n\tprivate doGetViewPickItems(): Array<IViewQuickPickItem> {\n\t\tconst viewEntries: Array<IViewQuickPickItem> = [];\n\n\t\tconst getViewEntriesForPaneComposite = (paneComposite: PaneCompositeDescriptor, viewContainer: ViewContainer): IViewQuickPickItem[] => {\n\t\t\tconst viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\t\tconst result: IViewQuickPickItem[] = [];\n\t\t\tfor (const view of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (this.contextKeyService.contextMatchesRules(view.when)) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tlabel: view.name.value,\n\t\t\t\t\t\tcontainerLabel: viewContainerModel.title,\n\t\t\t\t\t\taccept: () => this.viewsService.openView(view.id, true)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst addPaneComposites = (location: ViewContainerLocation, containerLabel: string) => {\n\t\t\tconst paneComposites = this.paneCompositeService.getPaneComposites(location);\n\t\t\tconst visiblePaneCompositeIds = this.paneCompositeService.getVisiblePaneCompositeIds(location);\n\n\t\t\tpaneComposites.sort((a, b) => {\n\t\t\t\tlet aIndex = visiblePaneCompositeIds.findIndex(id => a.id === id);\n\t\t\t\tlet bIndex = visiblePaneCompositeIds.findIndex(id => b.id === id);\n\n\t\t\t\tif (aIndex < 0) {\n\t\t\t\t\taIndex = paneComposites.indexOf(a) + visiblePaneCompositeIds.length;\n\t\t\t\t}\n\n\t\t\t\tif (bIndex < 0) {\n\t\t\t\t\tbIndex = paneComposites.indexOf(b) + visiblePaneCompositeIds.length;\n\t\t\t\t}\n\n\t\t\t\treturn aIndex - bIndex;\n\t\t\t});\n\n\t\t\tfor (const paneComposite of paneComposites) {\n\t\t\t\tif (this.includeViewContainer(paneComposite)) {\n\t\t\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(paneComposite.id);\n\t\t\t\t\tif (viewContainer) {\n\t\t\t\t\t\tviewEntries.push({\n\t\t\t\t\t\t\tlabel: this.viewDescriptorService.getViewContainerModel(viewContainer).title,\n\t\t\t\t\t\t\tcontainerLabel,\n\t\t\t\t\t\t\taccept: () => this.paneCompositeService.openPaneComposite(paneComposite.id, location, true)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Viewlets / Panels\n\t\taddPaneComposites(ViewContainerLocation.Sidebar, localize('views', \"Side Bar\"));\n\t\taddPaneComposites(ViewContainerLocation.Panel, localize('panels', \"Panel\"));\n\t\taddPaneComposites(ViewContainerLocation.AuxiliaryBar, localize('secondary side bar', \"Secondary Side Bar\"));\n\n\t\tconst addPaneCompositeViews = (location: ViewContainerLocation) => {\n\t\t\tconst paneComposites = this.paneCompositeService.getPaneComposites(location);\n\t\t\tfor (const paneComposite of paneComposites) {\n\t\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(paneComposite.id);\n\t\t\t\tif (viewContainer) {\n\t\t\t\t\tviewEntries.push(...getViewEntriesForPaneComposite(paneComposite, viewContainer));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Side Bar / Panel Views\n\t\taddPaneCompositeViews(ViewContainerLocation.Sidebar);\n\t\taddPaneCompositeViews(ViewContainerLocation.Panel);\n\t\taddPaneCompositeViews(ViewContainerLocation.AuxiliaryBar);\n\n\t\t// Terminals\n\t\tthis.terminalGroupService.groups.forEach((group, groupIndex) => {\n\t\t\tgroup.terminalInstances.forEach((terminal, terminalIndex) => {\n\t\t\t\tconst label = localize('terminalTitle', \"{0}: {1}\", `${groupIndex + 1}.${terminalIndex + 1}`, terminal.title);\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel,\n\t\t\t\t\tcontainerLabel: localize('terminals', \"Terminal\"),\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait this.terminalGroupService.showPanel(true);\n\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Debug Consoles\n\t\tthis.debugService.getModel().getSessions(true).filter(s => s.hasSeparateRepl()).forEach((session, _) => {\n\t\t\tconst label = session.name;\n\t\t\tviewEntries.push({\n\t\t\t\tlabel,\n\t\t\t\tcontainerLabel: localize('debugConsoles', \"Debug Console\"),\n\t\t\t\taccept: async () => {\n\t\t\t\t\tawait this.debugService.focusStackFrame(undefined, undefined, session, { explicit: true });\n\n\t\t\t\t\tif (!this.viewsService.isViewVisible(REPL_VIEW_ID)) {\n\t\t\t\t\t\tawait this.viewsService.openView(REPL_VIEW_ID, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\n\t\t// Output Channels\n\t\tconst channels = this.outputService.getChannelDescriptors();\n\t\tfor (const channel of channels) {\n\t\t\tviewEntries.push({\n\t\t\t\tlabel: channel.label,\n\t\t\t\tcontainerLabel: localize('channels', \"Output\"),\n\t\t\t\taccept: () => this.outputService.showChannel(channel.id)\n\t\t\t});\n\t\t}\n\n\t\treturn viewEntries;\n\t}\n\n\tprivate includeViewContainer(container: PaneCompositeDescriptor): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(container.id);\n\t\tif (viewContainer?.hideIfEmpty) {\n\t\t\treturn this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.length > 0;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n\n//#region Actions\n\nexport class OpenViewPickerAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.openView';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenViewPickerAction.ID,\n\t\t\ttitle: localize2('openView', 'Open View'),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor.get(IQuickInputService).quickAccess.show(ViewQuickAccessProvider.PREFIX);\n\t}\n}\n\nexport class QuickAccessViewPickerAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.quickOpenView';\n\tstatic readonly KEYBINDING = {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyQ,\n\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyQ },\n\t\tlinux: { primary: 0 }\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: QuickAccessViewPickerAction.ID,\n\t\t\ttitle: localize2('quickOpenView', 'Quick Open View'),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false, // hide quick pickers from command palette to not confuse with the other entry that shows a input field\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: undefined,\n\t\t\t\t...QuickAccessViewPickerAction.KEYBINDING\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(QuickAccessViewPickerAction.ID);\n\n\t\tquickInputService.quickAccess.show(ViewQuickAccessProvider.PREFIX, { quickNavigateConfiguration: { keybindings: keys }, itemActivation: ItemActivation.FIRST });\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
