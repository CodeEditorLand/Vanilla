{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/common/smartSnippetInserter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { JSONScanner, createScanner as createJSONScanner, SyntaxKind as JSONSyntaxKind } from '../../../../base/common/json.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\n\nexport interface InsertSnippetResult {\n\tposition: Position;\n\tprepend: string;\n\tappend: string;\n}\n\nexport class SmartSnippetInserter {\n\n\tprivate static hasOpenBrace(scanner: JSONScanner): boolean {\n\n\t\twhile (scanner.scan() !== JSONSyntaxKind.EOF) {\n\t\t\tconst kind = scanner.getToken();\n\n\t\t\tif (kind === JSONSyntaxKind.OpenBraceToken) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static offsetToPosition(model: ITextModel, offset: number): Position {\n\t\tlet offsetBeforeLine = 0;\n\t\tconst eolLength = model.getEOL().length;\n\t\tconst lineCount = model.getLineCount();\n\t\tfor (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineTotalLength = model.getLineLength(lineNumber) + eolLength;\n\t\t\tconst offsetAfterLine = offsetBeforeLine + lineTotalLength;\n\n\t\t\tif (offsetAfterLine > offset) {\n\t\t\t\treturn new Position(\n\t\t\t\t\tlineNumber,\n\t\t\t\t\toffset - offsetBeforeLine + 1\n\t\t\t\t);\n\t\t\t}\n\t\t\toffsetBeforeLine = offsetAfterLine;\n\t\t}\n\t\treturn new Position(\n\t\t\tlineCount,\n\t\t\tmodel.getLineMaxColumn(lineCount)\n\t\t);\n\t}\n\n\tstatic insertSnippet(model: ITextModel, _position: Position): InsertSnippetResult {\n\n\t\tconst desiredPosition = model.getValueLengthInRange(new Range(1, 1, _position.lineNumber, _position.column));\n\n\t\t// <INVALID> [ <BEFORE_OBJECT> { <INVALID> } <AFTER_OBJECT>, <BEFORE_OBJECT> { <INVALID> } <AFTER_OBJECT> ] <INVALID>\n\t\tenum State {\n\t\t\tINVALID = 0,\n\t\t\tAFTER_OBJECT = 1,\n\t\t\tBEFORE_OBJECT = 2,\n\t\t}\n\t\tlet currentState = State.INVALID;\n\t\tlet lastValidPos = -1;\n\t\tlet lastValidState = State.INVALID;\n\n\t\tconst scanner = createJSONScanner(model.getValue());\n\t\tlet arrayLevel = 0;\n\t\tlet objLevel = 0;\n\n\t\tconst checkRangeStatus = (pos: number, state: State) => {\n\t\t\tif (state !== State.INVALID && arrayLevel === 1 && objLevel === 0) {\n\t\t\t\tcurrentState = state;\n\t\t\t\tlastValidPos = pos;\n\t\t\t\tlastValidState = state;\n\t\t\t} else {\n\t\t\t\tif (currentState !== State.INVALID) {\n\t\t\t\t\tcurrentState = State.INVALID;\n\t\t\t\t\tlastValidPos = scanner.getTokenOffset();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\twhile (scanner.scan() !== JSONSyntaxKind.EOF) {\n\t\t\tconst currentPos = scanner.getPosition();\n\t\t\tconst kind = scanner.getToken();\n\n\t\t\tlet goodKind = false;\n\t\t\tswitch (kind) {\n\t\t\t\tcase JSONSyntaxKind.OpenBracketToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tarrayLevel++;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.BEFORE_OBJECT);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.CloseBracketToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tarrayLevel--;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.INVALID);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.CommaToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.BEFORE_OBJECT);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.OpenBraceToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tobjLevel++;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.INVALID);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.CloseBraceToken:\n\t\t\t\t\tgoodKind = true;\n\t\t\t\t\tobjLevel--;\n\t\t\t\t\tcheckRangeStatus(currentPos, State.AFTER_OBJECT);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSONSyntaxKind.Trivia:\n\t\t\t\tcase JSONSyntaxKind.LineBreakTrivia:\n\t\t\t\t\tgoodKind = true;\n\t\t\t}\n\n\t\t\tif (currentPos >= desiredPosition && (currentState !== State.INVALID || lastValidPos !== -1)) {\n\t\t\t\tlet acceptPosition: number;\n\t\t\t\tlet acceptState: State;\n\n\t\t\t\tif (currentState !== State.INVALID) {\n\t\t\t\t\tacceptPosition = (goodKind ? currentPos : scanner.getTokenOffset());\n\t\t\t\t\tacceptState = currentState;\n\t\t\t\t} else {\n\t\t\t\t\tacceptPosition = lastValidPos;\n\t\t\t\t\tacceptState = lastValidState;\n\t\t\t\t}\n\n\t\t\t\tif (acceptState as State === State.AFTER_OBJECT) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposition: this.offsetToPosition(model, acceptPosition),\n\t\t\t\t\t\tprepend: ',',\n\t\t\t\t\t\tappend: ''\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tscanner.setPosition(acceptPosition);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tposition: this.offsetToPosition(model, acceptPosition),\n\t\t\t\t\t\tprepend: '',\n\t\t\t\t\t\tappend: this.hasOpenBrace(scanner) ? ',' : ''\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// no valid position found!\n\t\tconst modelLineCount = model.getLineCount();\n\t\treturn {\n\t\t\tposition: new Position(modelLineCount, model.getLineMaxColumn(modelLineCount)),\n\t\t\tprepend: '\\n[',\n\t\t\tappend: ']'\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["State"]
}
