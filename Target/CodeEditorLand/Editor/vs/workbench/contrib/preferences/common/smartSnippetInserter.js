import{createScanner as k,SyntaxKind as o}from"../../../../../vs/base/common/json.js";import{Position as g}from"../../../../../vs/editor/common/core/position.js";import{Range as B}from"../../../../../vs/editor/common/core/range.js";import"../../../../../vs/editor/common/model.js";class m{static hasOpenBrace(e){for(;e.scan()!==o.EOF;)if(e.getToken()===o.OpenBraceToken)return!0;return!1}static offsetToPosition(e,c){let p=0;const S=e.getEOL().length,n=e.getLineCount();for(let r=1;r<=n;r++){const f=e.getLineLength(r)+S,i=p+f;if(i>c)return new g(r,c-p+1);p=i}return new g(n,e.getLineMaxColumn(n))}static insertSnippet(e,c){const p=e.getValueLengthInRange(new B(1,1,c.lineNumber,c.column));let S;(t=>(t[t.INVALID=0]="INVALID",t[t.AFTER_OBJECT=1]="AFTER_OBJECT",t[t.BEFORE_OBJECT=2]="BEFORE_OBJECT"))(S||={});let n=0,r=-1,f=0;const i=k(e.getValue());let T=0,I=0;const l=(a,u)=>{u!==0&&T===1&&I===0?(n=u,r=a,f=u):n!==0&&(n=0,r=i.getTokenOffset())};for(;i.scan()!==o.EOF;){const a=i.getPosition(),u=i.getToken();let s=!1;switch(u){case o.OpenBracketToken:s=!0,T++,l(a,2);break;case o.CloseBracketToken:s=!0,T--,l(a,0);break;case o.CommaToken:s=!0,l(a,2);break;case o.OpenBraceToken:s=!0,I++,l(a,0);break;case o.CloseBraceToken:s=!0,I--,l(a,1);break;case o.Trivia:case o.LineBreakTrivia:s=!0}if(a>=p&&(n!==0||r!==-1)){let t,L;return n!==0?(t=s?a:i.getTokenOffset(),L=n):(t=r,L=f),L===1?{position:this.offsetToPosition(e,t),prepend:",",append:""}:(i.setPosition(t),{position:this.offsetToPosition(e,t),prepend:"",append:this.hasOpenBrace(i)?",":""})}}const O=e.getLineCount();return{position:new g(O,e.getLineMaxColumn(O)),prepend:`
[`,append:"]"}}}export{m as SmartSnippetInserter};
