var C=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var h=(a,r,e,t)=>{for(var i=t>1?void 0:t?I(r,e):r,o=a.length-1,s;o>=0;o--)(s=a[o])&&(i=(t?s(r,e,i):s(i))||i);return t&&i&&C(r,e,i),i},m=(a,r)=>(e,t)=>r(e,t,a);import{NotSupportedError as p}from"../../../../base/common/errors.js";import{Disposable as g}from"../../../../base/common/lifecycle.js";import{Schemas as u}from"../../../../base/common/network.js";import{URI as F}from"../../../../base/common/uri.js";import{FileChangeType as d,FilePermission as v,FileSystemProviderCapabilities as f,FileSystemProviderErrorCode as y,FileType as D}from"../../../../platform/files/common/files.js";import{IPreferencesService as R}from"../../../services/preferences/common/preferences.js";import{Event as b,Emitter as w}from"../../../../base/common/event.js";import{Registry as O}from"../../../../platform/registry/common/platform.js";import*as U from"../../../../platform/jsonschemas/common/jsonContributionRegistry.js";import{VSBuffer as P}from"../../../../base/common/buffer.js";import{ILogService as N,LogLevel as S}from"../../../../platform/log/common/log.js";const l=O.as(U.Extensions.JSONContribution);let n=class extends g{constructor(e,t){super();this.preferencesService=e;this.logService=t;this._register(l.onDidChangeSchema(i=>{this._onDidChangeFile.fire([{resource:F.parse(i),type:d.UPDATED}])})),this._register(e.onDidDefaultSettingsContentChanged(i=>{this._onDidChangeFile.fire([{resource:i,type:d.UPDATED}])}))}static SCHEMA=u.vscode;_onDidChangeFile=this._register(new w);onDidChangeFile=this._onDidChangeFile.event;capabilities=f.Readonly+f.FileReadWrite;async readFile(e){if(e.scheme!==n.SCHEMA)throw new p;let t;if(e.authority==="schemas"?t=this.getSchemaContent(e):e.authority==="defaultsettings"&&(t=this.preferencesService.getDefaultSettingsContent(e)),t)return P.fromString(t).buffer;throw y.FileNotFound}async stat(e){if(l.hasSchemaContent(e.toString())||this.preferencesService.hasDefaultSettingsContent(e)){const t=Date.now();return{type:D.File,permissions:v.Readonly,mtime:t,ctime:t,size:0}}throw y.FileNotFound}onDidChangeCapabilities=b.None;watch(e,t){return g.None}async mkdir(e){}async readdir(e){return[]}async rename(e,t,i){}async delete(e,t){}async writeFile(){throw new p}getSchemaContent(e){const t=Date.now(),i=l.getSchemaContent(e.toString())??"{}",o=this.logService.getLevel();if(o===S.Debug||o===S.Trace){const s=Date.now(),c=JSON.stringify(l.getSchemaContributions().schemas[e.toString()]);this.logService.debug(`${e.toString()}: ${c.length} -> ${i.length} (${Math.round((c.length-i.length)/c.length*100)}%) Took ${s-t}ms`)}return i}};n=h([m(0,R),m(1,N)],n);export{n as SettingsFileSystemProvider};
