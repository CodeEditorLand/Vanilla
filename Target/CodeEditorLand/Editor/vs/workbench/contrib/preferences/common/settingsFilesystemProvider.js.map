{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/common/settingsFilesystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NotSupportedError } from '../../../../base/common/errors.js';\nimport { IDisposable, Disposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { FileChangeType, FilePermission, FileSystemProviderCapabilities, FileSystemProviderErrorCode, FileType, IFileChange, IFileDeleteOptions, IFileOverwriteOptions, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions } from '../../../../platform/files/common/files.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport * as JSONContributionRegistry from '../../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { ILogService, LogLevel } from '../../../../platform/log/common/log.js';\n\nconst schemaRegistry = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\n\n\nexport class SettingsFileSystemProvider extends Disposable implements IFileSystemProviderWithFileReadWriteCapability {\n\n\tstatic readonly SCHEMA = Schemas.vscode;\n\n\tprotected readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tconstructor(\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._register(schemaRegistry.onDidChangeSchema(schemaUri => {\n\t\t\tthis._onDidChangeFile.fire([{ resource: URI.parse(schemaUri), type: FileChangeType.UPDATED }]);\n\t\t}));\n\t\tthis._register(preferencesService.onDidDefaultSettingsContentChanged(uri => {\n\t\t\tthis._onDidChangeFile.fire([{ resource: uri, type: FileChangeType.UPDATED }]);\n\t\t}));\n\t}\n\n\treadonly capabilities: FileSystemProviderCapabilities = FileSystemProviderCapabilities.Readonly + FileSystemProviderCapabilities.FileReadWrite;\n\n\tasync readFile(uri: URI): Promise<Uint8Array> {\n\t\tif (uri.scheme !== SettingsFileSystemProvider.SCHEMA) {\n\t\t\tthrow new NotSupportedError();\n\t\t}\n\t\tlet content: string | undefined;\n\t\tif (uri.authority === 'schemas') {\n\t\t\tcontent = this.getSchemaContent(uri);\n\t\t} else if (uri.authority === 'defaultsettings') {\n\t\t\tcontent = this.preferencesService.getDefaultSettingsContent(uri);\n\t\t}\n\t\tif (content) {\n\t\t\treturn VSBuffer.fromString(content).buffer;\n\t\t}\n\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t}\n\n\tasync stat(uri: URI): Promise<IStat> {\n\t\tif (schemaRegistry.hasSchemaContent(uri.toString()) || this.preferencesService.hasDefaultSettingsContent(uri)) {\n\t\t\tconst currentTime = Date.now();\n\t\t\treturn {\n\t\t\t\ttype: FileType.File,\n\t\t\t\tpermissions: FilePermission.Readonly,\n\t\t\t\tmtime: currentTime,\n\t\t\t\tctime: currentTime,\n\t\t\t\tsize: 0\n\t\t\t};\n\t\t}\n\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t}\n\n\treadonly onDidChangeCapabilities = Event.None;\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable { return Disposable.None; }\n\n\tasync mkdir(resource: URI): Promise<void> { }\n\tasync readdir(resource: URI): Promise<[string, FileType][]> { return []; }\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> { }\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> { }\n\n\tasync writeFile() {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tprivate getSchemaContent(uri: URI): string {\n\t\tconst startTime = Date.now();\n\t\tconst content = schemaRegistry.getSchemaContent(uri.toString()) ?? '{}' /* Use empty schema if not yet registered */;\n\t\tconst logLevel = this.logService.getLevel();\n\t\tif (logLevel === LogLevel.Debug || logLevel === LogLevel.Trace) {\n\t\t\tconst endTime = Date.now();\n\t\t\tconst uncompressed = JSON.stringify(schemaRegistry.getSchemaContributions().schemas[uri.toString()]);\n\t\t\tthis.logService.debug(`${uri.toString()}: ${uncompressed.length} -> ${content.length} (${Math.round((uncompressed.length - content.length) / uncompressed.length * 100)}%) Took ${endTime - startTime}ms`);\n\t\t}\n\t\treturn content;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
