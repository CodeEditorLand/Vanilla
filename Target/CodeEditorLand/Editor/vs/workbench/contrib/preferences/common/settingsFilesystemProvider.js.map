{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/common/settingsFilesystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { NotSupportedError } from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tFileChangeType,\n\tFilePermission,\n\tFileSystemProviderCapabilities,\n\tFileSystemProviderErrorCode,\n\tFileType,\n\ttype IFileChange,\n\ttype IFileDeleteOptions,\n\ttype IFileOverwriteOptions,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IStat,\n\ttype IWatchOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport * as JSONContributionRegistry from \"../../../../platform/jsonschemas/common/jsonContributionRegistry.js\";\nimport { ILogService, LogLevel } from \"../../../../platform/log/common/log.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\n\nconst schemaRegistry =\n\tRegistry.as<JSONContributionRegistry.IJSONContributionRegistry>(\n\t\tJSONContributionRegistry.Extensions.JSONContribution,\n\t);\n\nexport class SettingsFileSystemProvider\n\textends Disposable\n\timplements IFileSystemProviderWithFileReadWriteCapability\n{\n\tstatic readonly SCHEMA = Schemas.vscode;\n\n\tprotected readonly _onDidChangeFile = this._register(\n\t\tnew Emitter<readonly IFileChange[]>(),\n\t);\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tconstructor(\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._register(schemaRegistry.onDidChangeSchema(schemaUri => {\n\t\t\tthis._onDidChangeFile.fire([{ resource: URI.parse(schemaUri), type: FileChangeType.UPDATED }]);\n\t\t}));\n\t\tthis._register(preferencesService.onDidDefaultSettingsContentChanged(uri => {\n\t\t\tthis._onDidChangeFile.fire([{ resource: uri, type: FileChangeType.UPDATED }]);\n\t\t}));\n\t}\n\n\treadonly capabilities: FileSystemProviderCapabilities =\n\t\tFileSystemProviderCapabilities.Readonly +\n\t\tFileSystemProviderCapabilities.FileReadWrite;\n\n\tasync readFile(uri: URI): Promise<Uint8Array> {\n\t\tif (uri.scheme !== SettingsFileSystemProvider.SCHEMA) {\n\t\t\tthrow new NotSupportedError();\n\t\t}\n\t\tlet content: string | undefined;\n\t\tif (uri.authority === \"schemas\") {\n\t\t\tcontent = this.getSchemaContent(uri);\n\t\t} else if (uri.authority === \"defaultsettings\") {\n\t\t\tcontent = this.preferencesService.getDefaultSettingsContent(uri);\n\t\t}\n\t\tif (content) {\n\t\t\treturn VSBuffer.fromString(content).buffer;\n\t\t}\n\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t}\n\n\tasync stat(uri: URI): Promise<IStat> {\n\t\tif (\n\t\t\tschemaRegistry.hasSchemaContent(uri.toString()) ||\n\t\t\tthis.preferencesService.hasDefaultSettingsContent(uri)\n\t\t) {\n\t\t\tconst currentTime = Date.now();\n\t\t\treturn {\n\t\t\t\ttype: FileType.File,\n\t\t\t\tpermissions: FilePermission.Readonly,\n\t\t\t\tmtime: currentTime,\n\t\t\t\tctime: currentTime,\n\t\t\t\tsize: 0,\n\t\t\t};\n\t\t}\n\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t}\n\n\treadonly onDidChangeCapabilities = Event.None;\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tasync mkdir(resource: URI): Promise<void> {}\n\tasync readdir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn [];\n\t}\n\n\tasync rename(\n\t\tfrom: URI,\n\t\tto: URI,\n\t\topts: IFileOverwriteOptions,\n\t): Promise<void> {}\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {}\n\n\tasync writeFile() {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tprivate getSchemaContent(uri: URI): string {\n\t\tconst startTime = Date.now();\n\t\tconst content =\n\t\t\tschemaRegistry.getSchemaContent(uri.toString()) ??\n\t\t\t\"{}\" /* Use empty schema if not yet registered */;\n\t\tconst logLevel = this.logService.getLevel();\n\t\tif (logLevel === LogLevel.Debug || logLevel === LogLevel.Trace) {\n\t\t\tconst endTime = Date.now();\n\t\t\tconst uncompressed = JSON.stringify(\n\t\t\t\tschemaRegistry.getSchemaContributions().schemas[uri.toString()],\n\t\t\t);\n\t\t\tthis.logService.debug(\n\t\t\t\t`${uri.toString()}: ${uncompressed.length} -> ${content.length} (${Math.round(((uncompressed.length - content.length) / uncompressed.length) * 100)}%) Took ${endTime - startTime}ms`,\n\t\t\t);\n\t\t}\n\t\treturn content;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
