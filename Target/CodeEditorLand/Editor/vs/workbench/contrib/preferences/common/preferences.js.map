{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/common/preferences.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { IExtensionRecommendations } from '../../../../base/common/product.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IExtensionGalleryService, IGalleryExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ISearchResult, ISettingsEditorModel } from '../../../services/preferences/common/preferences.js';\n\nexport interface IWorkbenchSettingsConfiguration {\n\tworkbench: {\n\t\tsettings: {\n\t\t\topenDefaultSettings: boolean;\n\t\t\tnaturalLanguageSearchEndpoint: string;\n\t\t\tnaturalLanguageSearchKey: string;\n\t\t\tnaturalLanguageSearchAutoIngestFeedback: boolean;\n\t\t\tuseNaturalLanguageSearchPost: boolean;\n\t\t\tenableNaturalLanguageSearch: boolean;\n\t\t\tenableNaturalLanguageSearchFeedback: boolean;\n\t\t};\n\t};\n}\n\nexport interface IEndpointDetails {\n\turlBase: string;\n\tkey?: string;\n}\n\nexport const IPreferencesSearchService = createDecorator<IPreferencesSearchService>('preferencesSearchService');\n\nexport interface IPreferencesSearchService {\n\treadonly _serviceBrand: undefined;\n\n\tgetLocalSearchProvider(filter: string): ISearchProvider;\n\tgetRemoteSearchProvider(filter: string, newExtensionsOnly?: boolean): ISearchProvider | undefined;\n}\n\nexport interface ISearchProvider {\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null>;\n}\n\nexport interface IRemoteSearchProvider extends ISearchProvider {\n\tsetFilter(filter: string): void;\n}\n\nexport const SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS = 'settings.action.clearSearchResults';\nexport const SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU = 'settings.action.showContextMenu';\nexport const SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS = 'settings.action.suggestFilters';\n\nexport const CONTEXT_SETTINGS_EDITOR = new RawContextKey<boolean>('inSettingsEditor', false);\nexport const CONTEXT_SETTINGS_JSON_EDITOR = new RawContextKey<boolean>('inSettingsJSONEditor', false);\nexport const CONTEXT_SETTINGS_SEARCH_FOCUS = new RawContextKey<boolean>('inSettingsSearch', false);\nexport const CONTEXT_TOC_ROW_FOCUS = new RawContextKey<boolean>('settingsTocRowFocus', false);\nexport const CONTEXT_SETTINGS_ROW_FOCUS = new RawContextKey<boolean>('settingRowFocus', false);\nexport const CONTEXT_KEYBINDINGS_EDITOR = new RawContextKey<boolean>('inKeybindings', false);\nexport const CONTEXT_KEYBINDINGS_SEARCH_FOCUS = new RawContextKey<boolean>('inKeybindingsSearch', false);\nexport const CONTEXT_KEYBINDING_FOCUS = new RawContextKey<boolean>('keybindingFocus', false);\nexport const CONTEXT_WHEN_FOCUS = new RawContextKey<boolean>('whenFocus', false);\n\nexport const KEYBINDINGS_EDITOR_COMMAND_SEARCH = 'keybindings.editor.searchKeybindings';\nexport const KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS = 'keybindings.editor.clearSearchResults';\nexport const KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_HISTORY = 'keybindings.editor.clearSearchHistory';\nexport const KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS = 'keybindings.editor.recordSearchKeys';\nexport const KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE = 'keybindings.editor.toggleSortByPrecedence';\nexport const KEYBINDINGS_EDITOR_COMMAND_DEFINE = 'keybindings.editor.defineKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_ADD = 'keybindings.editor.addKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN = 'keybindings.editor.defineWhenExpression';\nexport const KEYBINDINGS_EDITOR_COMMAND_ACCEPT_WHEN = 'keybindings.editor.acceptWhenExpression';\nexport const KEYBINDINGS_EDITOR_COMMAND_REJECT_WHEN = 'keybindings.editor.rejectWhenExpression';\nexport const KEYBINDINGS_EDITOR_COMMAND_REMOVE = 'keybindings.editor.removeKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_RESET = 'keybindings.editor.resetKeybinding';\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY = 'keybindings.editor.copyKeybindingEntry';\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND = 'keybindings.editor.copyCommandKeybindingEntry';\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE = 'keybindings.editor.copyCommandTitle';\nexport const KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR = 'keybindings.editor.showConflicts';\nexport const KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS = 'keybindings.editor.focusKeybindings';\nexport const KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS = 'keybindings.editor.showDefaultKeybindings';\nexport const KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS = 'keybindings.editor.showUserKeybindings';\nexport const KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS = 'keybindings.editor.showExtensionKeybindings';\n\nexport const MODIFIED_SETTING_TAG = 'modified';\nexport const EXTENSION_SETTING_TAG = 'ext:';\nexport const FEATURE_SETTING_TAG = 'feature:';\nexport const ID_SETTING_TAG = 'id:';\nexport const LANGUAGE_SETTING_TAG = 'lang:';\nexport const GENERAL_TAG_SETTING_TAG = 'tag:';\nexport const POLICY_SETTING_TAG = 'hasPolicy';\nexport const WORKSPACE_TRUST_SETTING_TAG = 'workspaceTrust';\nexport const REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG = 'requireTrustedWorkspace';\nexport const KEYBOARD_LAYOUT_OPEN_PICKER = 'workbench.action.openKeyboardLayoutPicker';\n\nexport const ENABLE_LANGUAGE_FILTER = true;\n\nexport const ENABLE_EXTENSION_TOGGLE_SETTINGS = true;\n\nexport type ExtensionToggleData = {\n\tsettingsEditorRecommendedExtensions: IStringDictionary<IExtensionRecommendations>;\n\trecommendedExtensionsGalleryInfo: IStringDictionary<IGalleryExtension>;\n\tcommonlyUsed: string[];\n};\n\nlet cachedExtensionToggleData: ExtensionToggleData | undefined;\n\nexport async function getExperimentalExtensionToggleData(extensionGalleryService: IExtensionGalleryService, productService: IProductService): Promise<ExtensionToggleData | undefined> {\n\tif (!ENABLE_EXTENSION_TOGGLE_SETTINGS) {\n\t\treturn undefined;\n\t}\n\n\tif (!extensionGalleryService.isEnabled()) {\n\t\treturn undefined;\n\t}\n\n\tif (cachedExtensionToggleData) {\n\t\treturn cachedExtensionToggleData;\n\t}\n\n\tif (productService.extensionRecommendations && productService.commonlyUsedSettings) {\n\t\tconst settingsEditorRecommendedExtensions: IStringDictionary<IExtensionRecommendations> = {};\n\t\tObject.keys(productService.extensionRecommendations).forEach(extensionId => {\n\t\t\tconst extensionInfo = productService.extensionRecommendations![extensionId];\n\t\t\tif (extensionInfo.onSettingsEditorOpen) {\n\t\t\t\tsettingsEditorRecommendedExtensions[extensionId] = extensionInfo;\n\t\t\t}\n\t\t});\n\n\t\tconst recommendedExtensionsGalleryInfo: IStringDictionary<IGalleryExtension> = {};\n\t\tfor (const key in settingsEditorRecommendedExtensions) {\n\t\t\tconst extensionId = key;\n\t\t\t// Recommend prerelease if not on Stable.\n\t\t\tconst isStable = productService.quality === 'stable';\n\t\t\ttry {\n\t\t\t\tconst [extension] = await extensionGalleryService.getExtensions([{ id: extensionId, preRelease: !isStable }], CancellationToken.None);\n\t\t\t\tif (extension) {\n\t\t\t\t\trecommendedExtensionsGalleryInfo[key] = extension;\n\t\t\t\t} else {\n\t\t\t\t\t// same as network connection fail. we do not want a blank settings page: https://github.com/microsoft/vscode/issues/195722\n\t\t\t\t\t// so instead of returning partial data we return undefined here\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// Network connection fail. Return nothing rather than partial data.\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\tcachedExtensionToggleData = {\n\t\t\tsettingsEditorRecommendedExtensions,\n\t\t\trecommendedExtensionsGalleryInfo,\n\t\t\tcommonlyUsed: productService.commonlyUsedSettings\n\t\t};\n\t\treturn cachedExtensionToggleData;\n\t}\n\treturn undefined;\n}\n\n/**\n * Compares two nullable numbers such that null values always come after defined ones.\n */\nexport function compareTwoNullableNumbers(a: number | undefined, b: number | undefined): number {\n\tconst aOrMax = a ?? Number.MAX_SAFE_INTEGER;\n\tconst bOrMax = b ?? Number.MAX_SAFE_INTEGER;\n\tif (aOrMax < bOrMax) {\n\t\treturn -1;\n\t} else if (aOrMax > bOrMax) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
