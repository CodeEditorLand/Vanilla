{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/common/preferences.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport type { IExtensionRecommendations } from \"../../../../base/common/product.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type {\n\tIExtensionGalleryService,\n\tIGalleryExtension,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport type {\n\tISearchResult,\n\tISettingsEditorModel,\n} from \"../../../services/preferences/common/preferences.js\";\n\nexport interface IWorkbenchSettingsConfiguration {\n\tworkbench: {\n\t\tsettings: {\n\t\t\topenDefaultSettings: boolean;\n\t\t\tnaturalLanguageSearchEndpoint: string;\n\t\t\tnaturalLanguageSearchKey: string;\n\t\t\tnaturalLanguageSearchAutoIngestFeedback: boolean;\n\t\t\tuseNaturalLanguageSearchPost: boolean;\n\t\t\tenableNaturalLanguageSearch: boolean;\n\t\t\tenableNaturalLanguageSearchFeedback: boolean;\n\t\t};\n\t};\n}\n\nexport interface IEndpointDetails {\n\turlBase: string;\n\tkey?: string;\n}\n\nexport const IPreferencesSearchService =\n\tcreateDecorator<IPreferencesSearchService>(\"preferencesSearchService\");\n\nexport interface IPreferencesSearchService {\n\treadonly _serviceBrand: undefined;\n\n\tgetLocalSearchProvider(filter: string): ISearchProvider;\n\tgetRemoteSearchProvider(\n\t\tfilter: string,\n\t\tnewExtensionsOnly?: boolean,\n\t): ISearchProvider | undefined;\n}\n\nexport interface ISearchProvider {\n\tsearchModel(\n\t\tpreferencesModel: ISettingsEditorModel,\n\t\ttoken?: CancellationToken,\n\t): Promise<ISearchResult | null>;\n}\n\nexport interface IRemoteSearchProvider extends ISearchProvider {\n\tsetFilter(filter: string): void;\n}\n\nexport const SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS =\n\t\"settings.action.clearSearchResults\";\nexport const SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU =\n\t\"settings.action.showContextMenu\";\nexport const SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS =\n\t\"settings.action.suggestFilters\";\n\nexport const CONTEXT_SETTINGS_EDITOR = new RawContextKey<boolean>(\n\t\"inSettingsEditor\",\n\tfalse,\n);\nexport const CONTEXT_SETTINGS_JSON_EDITOR = new RawContextKey<boolean>(\n\t\"inSettingsJSONEditor\",\n\tfalse,\n);\nexport const CONTEXT_SETTINGS_SEARCH_FOCUS = new RawContextKey<boolean>(\n\t\"inSettingsSearch\",\n\tfalse,\n);\nexport const CONTEXT_TOC_ROW_FOCUS = new RawContextKey<boolean>(\n\t\"settingsTocRowFocus\",\n\tfalse,\n);\nexport const CONTEXT_SETTINGS_ROW_FOCUS = new RawContextKey<boolean>(\n\t\"settingRowFocus\",\n\tfalse,\n);\nexport const CONTEXT_KEYBINDINGS_EDITOR = new RawContextKey<boolean>(\n\t\"inKeybindings\",\n\tfalse,\n);\nexport const CONTEXT_KEYBINDINGS_SEARCH_FOCUS = new RawContextKey<boolean>(\n\t\"inKeybindingsSearch\",\n\tfalse,\n);\nexport const CONTEXT_KEYBINDING_FOCUS = new RawContextKey<boolean>(\n\t\"keybindingFocus\",\n\tfalse,\n);\nexport const CONTEXT_WHEN_FOCUS = new RawContextKey<boolean>(\n\t\"whenFocus\",\n\tfalse,\n);\n\nexport const KEYBINDINGS_EDITOR_COMMAND_SEARCH =\n\t\"keybindings.editor.searchKeybindings\";\nexport const KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS =\n\t\"keybindings.editor.clearSearchResults\";\nexport const KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_HISTORY =\n\t\"keybindings.editor.clearSearchHistory\";\nexport const KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS =\n\t\"keybindings.editor.recordSearchKeys\";\nexport const KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE =\n\t\"keybindings.editor.toggleSortByPrecedence\";\nexport const KEYBINDINGS_EDITOR_COMMAND_DEFINE =\n\t\"keybindings.editor.defineKeybinding\";\nexport const KEYBINDINGS_EDITOR_COMMAND_ADD =\n\t\"keybindings.editor.addKeybinding\";\nexport const KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN =\n\t\"keybindings.editor.defineWhenExpression\";\nexport const KEYBINDINGS_EDITOR_COMMAND_ACCEPT_WHEN =\n\t\"keybindings.editor.acceptWhenExpression\";\nexport const KEYBINDINGS_EDITOR_COMMAND_REJECT_WHEN =\n\t\"keybindings.editor.rejectWhenExpression\";\nexport const KEYBINDINGS_EDITOR_COMMAND_REMOVE =\n\t\"keybindings.editor.removeKeybinding\";\nexport const KEYBINDINGS_EDITOR_COMMAND_RESET =\n\t\"keybindings.editor.resetKeybinding\";\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY =\n\t\"keybindings.editor.copyKeybindingEntry\";\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND =\n\t\"keybindings.editor.copyCommandKeybindingEntry\";\nexport const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE =\n\t\"keybindings.editor.copyCommandTitle\";\nexport const KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR =\n\t\"keybindings.editor.showConflicts\";\nexport const KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS =\n\t\"keybindings.editor.focusKeybindings\";\nexport const KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS =\n\t\"keybindings.editor.showDefaultKeybindings\";\nexport const KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS =\n\t\"keybindings.editor.showUserKeybindings\";\nexport const KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS =\n\t\"keybindings.editor.showExtensionKeybindings\";\n\nexport const MODIFIED_SETTING_TAG = \"modified\";\nexport const EXTENSION_SETTING_TAG = \"ext:\";\nexport const FEATURE_SETTING_TAG = \"feature:\";\nexport const ID_SETTING_TAG = \"id:\";\nexport const LANGUAGE_SETTING_TAG = \"lang:\";\nexport const GENERAL_TAG_SETTING_TAG = \"tag:\";\nexport const POLICY_SETTING_TAG = \"hasPolicy\";\nexport const WORKSPACE_TRUST_SETTING_TAG = \"workspaceTrust\";\nexport const REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG = \"requireTrustedWorkspace\";\nexport const KEYBOARD_LAYOUT_OPEN_PICKER =\n\t\"workbench.action.openKeyboardLayoutPicker\";\n\nexport const ENABLE_LANGUAGE_FILTER = true;\n\nexport const ENABLE_EXTENSION_TOGGLE_SETTINGS = true;\n\nexport type ExtensionToggleData = {\n\tsettingsEditorRecommendedExtensions: IStringDictionary<IExtensionRecommendations>;\n\trecommendedExtensionsGalleryInfo: IStringDictionary<IGalleryExtension>;\n\tcommonlyUsed: string[];\n};\n\nlet cachedExtensionToggleData: ExtensionToggleData | undefined;\n\nexport async function getExperimentalExtensionToggleData(\n\textensionGalleryService: IExtensionGalleryService,\n\tproductService: IProductService,\n): Promise<ExtensionToggleData | undefined> {\n\tif (!ENABLE_EXTENSION_TOGGLE_SETTINGS) {\n\t\treturn undefined;\n\t}\n\n\tif (!extensionGalleryService.isEnabled()) {\n\t\treturn undefined;\n\t}\n\n\tif (cachedExtensionToggleData) {\n\t\treturn cachedExtensionToggleData;\n\t}\n\n\tif (\n\t\tproductService.extensionRecommendations &&\n\t\tproductService.commonlyUsedSettings\n\t) {\n\t\tconst settingsEditorRecommendedExtensions: IStringDictionary<IExtensionRecommendations> =\n\t\t\t{};\n\t\tObject.keys(productService.extensionRecommendations).forEach(\n\t\t\t(extensionId) => {\n\t\t\t\tconst extensionInfo =\n\t\t\t\t\tproductService.extensionRecommendations![extensionId];\n\t\t\t\tif (extensionInfo.onSettingsEditorOpen) {\n\t\t\t\t\tsettingsEditorRecommendedExtensions[extensionId] =\n\t\t\t\t\t\textensionInfo;\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tconst recommendedExtensionsGalleryInfo: IStringDictionary<IGalleryExtension> =\n\t\t\t{};\n\t\tfor (const key in settingsEditorRecommendedExtensions) {\n\t\t\tconst extensionId = key;\n\t\t\t// Recommend prerelease if not on Stable.\n\t\t\tconst isStable = productService.quality === \"stable\";\n\t\t\ttry {\n\t\t\t\tconst [extension] = await extensionGalleryService.getExtensions(\n\t\t\t\t\t[{ id: extensionId, preRelease: !isStable }],\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t\tif (extension) {\n\t\t\t\t\trecommendedExtensionsGalleryInfo[key] = extension;\n\t\t\t\t} else {\n\t\t\t\t\t// same as network connection fail. we do not want a blank settings page: https://github.com/microsoft/vscode/issues/195722\n\t\t\t\t\t// so instead of returning partial data we return undefined here\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// Network connection fail. Return nothing rather than partial data.\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\tcachedExtensionToggleData = {\n\t\t\tsettingsEditorRecommendedExtensions,\n\t\t\trecommendedExtensionsGalleryInfo,\n\t\t\tcommonlyUsed: productService.commonlyUsedSettings,\n\t\t};\n\t\treturn cachedExtensionToggleData;\n\t}\n\treturn undefined;\n}\n\n/**\n * Compares two nullable numbers such that null values always come after defined ones.\n */\nexport function compareTwoNullableNumbers(\n\ta: number | undefined,\n\tb: number | undefined,\n): number {\n\tconst aOrMax = a ?? Number.MAX_SAFE_INTEGER;\n\tconst bOrMax = b ?? Number.MAX_SAFE_INTEGER;\n\tif (aOrMax < bOrMax) {\n\t\treturn -1;\n\t} else if (aOrMax > bOrMax) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
