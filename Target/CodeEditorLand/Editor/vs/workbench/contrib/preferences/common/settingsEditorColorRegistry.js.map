{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { localize } from '../../../../nls.js';\nimport { editorWidgetBorder, focusBorder, inputBackground, inputBorder, inputForeground, listHoverBackground, registerColor, selectBackground, selectBorder, selectForeground, checkboxBackground, checkboxBorder, checkboxForeground, transparent } from '../../../../platform/theme/common/colorRegistry.js';\nimport { PANEL_BORDER } from '../../../common/theme.js';\n\n// General setting colors\nexport const settingsHeaderForeground = registerColor('settings.headerForeground', { light: '#444444', dark: '#e7e7e7', hcDark: '#ffffff', hcLight: '#292929' }, localize('headerForeground', \"The foreground color for a section header or active title.\"));\nexport const settingsHeaderHoverForeground = registerColor('settings.settingsHeaderHoverForeground', transparent(settingsHeaderForeground, 0.7), localize('settingsHeaderHoverForeground', \"The foreground color for a section header or hovered title.\"));\nexport const modifiedItemIndicator = registerColor('settings.modifiedItemIndicator', {\n\tlight: new Color(new RGBA(102, 175, 224)),\n\tdark: new Color(new RGBA(12, 125, 157)),\n\thcDark: new Color(new RGBA(0, 73, 122)),\n\thcLight: new Color(new RGBA(102, 175, 224)),\n}, localize('modifiedItemForeground', \"The color of the modified setting indicator.\"));\nexport const settingsHeaderBorder = registerColor('settings.headerBorder', PANEL_BORDER, localize('settingsHeaderBorder', \"The color of the header container border.\"));\nexport const settingsSashBorder = registerColor('settings.sashBorder', PANEL_BORDER, localize('settingsSashBorder', \"The color of the Settings editor splitview sash border.\"));\n\n// Enum control colors\nexport const settingsSelectBackground = registerColor(`settings.dropdownBackground`, selectBackground, localize('settingsDropdownBackground', \"Settings editor dropdown background.\"));\nexport const settingsSelectForeground = registerColor('settings.dropdownForeground', selectForeground, localize('settingsDropdownForeground', \"Settings editor dropdown foreground.\"));\nexport const settingsSelectBorder = registerColor('settings.dropdownBorder', selectBorder, localize('settingsDropdownBorder', \"Settings editor dropdown border.\"));\nexport const settingsSelectListBorder = registerColor('settings.dropdownListBorder', editorWidgetBorder, localize('settingsDropdownListBorder', \"Settings editor dropdown list border. This surrounds the options and separates the options from the description.\"));\n\n// Bool control colors\nexport const settingsCheckboxBackground = registerColor('settings.checkboxBackground', checkboxBackground, localize('settingsCheckboxBackground', \"Settings editor checkbox background.\"));\nexport const settingsCheckboxForeground = registerColor('settings.checkboxForeground', checkboxForeground, localize('settingsCheckboxForeground', \"Settings editor checkbox foreground.\"));\nexport const settingsCheckboxBorder = registerColor('settings.checkboxBorder', checkboxBorder, localize('settingsCheckboxBorder', \"Settings editor checkbox border.\"));\n\n// Text control colors\nexport const settingsTextInputBackground = registerColor('settings.textInputBackground', inputBackground, localize('textInputBoxBackground', \"Settings editor text input box background.\"));\nexport const settingsTextInputForeground = registerColor('settings.textInputForeground', inputForeground, localize('textInputBoxForeground', \"Settings editor text input box foreground.\"));\nexport const settingsTextInputBorder = registerColor('settings.textInputBorder', inputBorder, localize('textInputBoxBorder', \"Settings editor text input box border.\"));\n\n// Number control colors\nexport const settingsNumberInputBackground = registerColor('settings.numberInputBackground', inputBackground, localize('numberInputBoxBackground', \"Settings editor number input box background.\"));\nexport const settingsNumberInputForeground = registerColor('settings.numberInputForeground', inputForeground, localize('numberInputBoxForeground', \"Settings editor number input box foreground.\"));\nexport const settingsNumberInputBorder = registerColor('settings.numberInputBorder', inputBorder, localize('numberInputBoxBorder', \"Settings editor number input box border.\"));\n\nexport const focusedRowBackground = registerColor('settings.focusedRowBackground', {\n\tdark: transparent(listHoverBackground, .6),\n\tlight: transparent(listHoverBackground, .6),\n\thcDark: null,\n\thcLight: null,\n}, localize('focusedRowBackground', \"The background color of a settings row when focused.\"));\n\nexport const rowHoverBackground = registerColor('settings.rowHoverBackground', {\n\tdark: transparent(listHoverBackground, .3),\n\tlight: transparent(listHoverBackground, .3),\n\thcDark: null,\n\thcLight: null\n}, localize('settings.rowHoverBackground', \"The background color of a settings row when hovered.\"));\n\nexport const focusedRowBorder = registerColor('settings.focusedRowBorder', focusBorder, localize('settings.focusedRowBorder', \"The color of the row's top and bottom border when the row is focused.\"));\n"],
  "mappings": "AAKA,SAAS,OAAO,YAAY;AAC5B,SAAS,gBAAgB;AACzB,SAAS,oBAAoB,aAAa,iBAAiB,aAAa,iBAAiB,qBAAqB,eAAe,kBAAkB,cAAc,kBAAkB,oBAAoB,gBAAgB,oBAAoB,mBAAmB;AAC1P,SAAS,oBAAoB;AAGtB,MAAM,2BAA2B,cAAc,6BAA6B,EAAE,OAAO,WAAW,MAAM,WAAW,QAAQ,WAAW,SAAS,UAAU,GAAG,SAAS,oBAAoB,4DAA4D,CAAC;AACpP,MAAM,gCAAgC,cAAc,0CAA0C,YAAY,0BAA0B,GAAG,GAAG,SAAS,iCAAiC,6DAA6D,CAAC;AAClP,MAAM,wBAAwB,cAAc,kCAAkC;AAAA,EACpF,OAAO,IAAI,MAAM,IAAI,KAAK,KAAK,KAAK,GAAG,CAAC;AAAA,EACxC,MAAM,IAAI,MAAM,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC;AAAA,EACtC,QAAQ,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC;AAAA,EACtC,SAAS,IAAI,MAAM,IAAI,KAAK,KAAK,KAAK,GAAG,CAAC;AAC3C,GAAG,SAAS,0BAA0B,8CAA8C,CAAC;AAC9E,MAAM,uBAAuB,cAAc,yBAAyB,cAAc,SAAS,wBAAwB,2CAA2C,CAAC;AAC/J,MAAM,qBAAqB,cAAc,uBAAuB,cAAc,SAAS,sBAAsB,yDAAyD,CAAC;AAGvK,MAAM,2BAA2B,cAAc,+BAA+B,kBAAkB,SAAS,8BAA8B,sCAAsC,CAAC;AAC9K,MAAM,2BAA2B,cAAc,+BAA+B,kBAAkB,SAAS,8BAA8B,sCAAsC,CAAC;AAC9K,MAAM,uBAAuB,cAAc,2BAA2B,cAAc,SAAS,0BAA0B,kCAAkC,CAAC;AAC1J,MAAM,2BAA2B,cAAc,+BAA+B,oBAAoB,SAAS,8BAA8B,kHAAkH,CAAC;AAG5P,MAAM,6BAA6B,cAAc,+BAA+B,oBAAoB,SAAS,8BAA8B,sCAAsC,CAAC;AAClL,MAAM,6BAA6B,cAAc,+BAA+B,oBAAoB,SAAS,8BAA8B,sCAAsC,CAAC;AAClL,MAAM,yBAAyB,cAAc,2BAA2B,gBAAgB,SAAS,0BAA0B,kCAAkC,CAAC;AAG9J,MAAM,8BAA8B,cAAc,gCAAgC,iBAAiB,SAAS,0BAA0B,4CAA4C,CAAC;AACnL,MAAM,8BAA8B,cAAc,gCAAgC,iBAAiB,SAAS,0BAA0B,4CAA4C,CAAC;AACnL,MAAM,0BAA0B,cAAc,4BAA4B,aAAa,SAAS,sBAAsB,wCAAwC,CAAC;AAG/J,MAAM,gCAAgC,cAAc,kCAAkC,iBAAiB,SAAS,4BAA4B,8CAA8C,CAAC;AAC3L,MAAM,gCAAgC,cAAc,kCAAkC,iBAAiB,SAAS,4BAA4B,8CAA8C,CAAC;AAC3L,MAAM,4BAA4B,cAAc,8BAA8B,aAAa,SAAS,wBAAwB,0CAA0C,CAAC;AAEvK,MAAM,uBAAuB,cAAc,iCAAiC;AAAA,EAClF,MAAM,YAAY,qBAAqB,GAAE;AAAA,EACzC,OAAO,YAAY,qBAAqB,GAAE;AAAA,EAC1C,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,wBAAwB,sDAAsD,CAAC;AAEpF,MAAM,qBAAqB,cAAc,+BAA+B;AAAA,EAC9E,MAAM,YAAY,qBAAqB,GAAE;AAAA,EACzC,OAAO,YAAY,qBAAqB,GAAE;AAAA,EAC1C,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,+BAA+B,sDAAsD,CAAC;AAE3F,MAAM,mBAAmB,cAAc,6BAA6B,aAAa,SAAS,6BAA6B,uEAAuE,CAAC;",
  "names": []
}
