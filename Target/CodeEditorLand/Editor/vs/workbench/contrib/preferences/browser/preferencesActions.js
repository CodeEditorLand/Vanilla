var v=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var u=(r,o,n,e)=>{for(var i=e>1?void 0:e?S(o,n):o,t=r.length-1,a;t>=0;t--)(a=r[t])&&(i=(e?a(o,n,i):a(i))||i);return e&&i&&v(o,n,i),i},s=(r,o)=>(n,e)=>o(n,e,r);import{Action as I}from"../../../../base/common/actions.js";import{URI as p}from"../../../../base/common/uri.js";import{getIconClasses as k}from"../../../../editor/common/services/getIconClasses.js";import{IModelService as b}from"../../../../editor/common/services/model.js";import{ILanguageService as h}from"../../../../editor/common/languages/language.js";import*as d from"../../../../nls.js";import{IQuickInputService as L}from"../../../../platform/quickinput/common/quickInput.js";import{IPreferencesService as R}from"../../../services/preferences/common/preferences.js";import{CommandsRegistry as f}from"../../../../platform/commands/common/commands.js";import{Registry as C}from"../../../../platform/registry/common/platform.js";import{Extensions as P}from"../../../../platform/configuration/common/configurationRegistry.js";import{EditorExtensionsRegistry as x}from"../../../../editor/browser/editorExtensions.js";import{MenuId as z,MenuRegistry as E,isIMenuItem as M}from"../../../../platform/actions/common/actions.js";import{IKeybindingService as Q}from"../../../../platform/keybinding/common/keybinding.js";import{isLocalizedString as y}from"../../../../platform/action/common/action.js";let m=class extends I{constructor(n,e,i,t,a,c){super(n,e);this.modelService=i;this.languageService=t;this.quickInputService=a;this.preferencesService=c}static ID="workbench.action.configureLanguageBasedSettings";static LABEL=d.localize2("configureLanguageBasedSettings","Configure Language Specific Settings...");async run(){const e=this.languageService.getSortedRegisteredLanguageNames().map(({languageName:i,languageId:t})=>{const a=d.localize("languageDescriptionConfigured","({0})",t);let c;const g=this.languageService.getExtensions(t);if(g.length)c=p.file(g[0]);else{const l=this.languageService.getFilenames(t);l.length&&(c=p.file(l[0]))}return{label:i,iconClasses:k(this.modelService,this.languageService,c),description:a}});await this.quickInputService.pick(e,{placeHolder:d.localize("pickLanguage","Select Language")}).then(i=>{if(i){const t=this.languageService.getLanguageIdByLanguageName(i.label);if(typeof t=="string")return this.preferencesService.openLanguageSpecificSettings(t)}})}};m=u([s(2,b),s(3,h),s(4,L),s(5,R)],m),f.registerCommand({id:"_getAllSettings",handler:()=>C.as(P.Configuration).getConfigurationProperties()}),f.registerCommand("_getAllCommands",function(r){const o=r.get(Q),n=[];for(const e of x.getEditorActions()){const i=o.lookupKeybinding(e.id);n.push({command:e.id,label:e.label,description:y(e.metadata?.description)?e.metadata.description.value:e.metadata?.description,precondition:e.precondition?.serialize(),keybinding:i?.getLabel()??"Not set"})}for(const e of E.getMenuItems(z.CommandPalette))if(M(e)){const i=typeof e.command.title=="string"?e.command.title:e.command.title.value,t=e.command.category?typeof e.command.category=="string"?e.command.category:e.command.category.value:void 0,a=t?`${t}: ${i}`:i,c=y(e.command.metadata?.description)?e.command.metadata.description.value:e.command.metadata?.description,g=o.lookupKeybinding(e.command.id);n.push({command:e.command.id,label:a,description:c,precondition:e.when?.serialize(),keybinding:g?.getLabel()??"Not set"})}return n});export{m as ConfigureLanguageBasedSettingsAction};
