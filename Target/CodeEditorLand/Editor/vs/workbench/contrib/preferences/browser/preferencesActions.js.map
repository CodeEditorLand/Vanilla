{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/preferencesActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../../base/common/actions.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { EditorExtensionsRegistry } from \"../../../../editor/browser/editorExtensions.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { getIconClasses } from \"../../../../editor/common/services/getIconClasses.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { isLocalizedString } from \"../../../../platform/action/common/action.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n\tisIMenuItem,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\n\nexport class ConfigureLanguageBasedSettingsAction extends Action {\n\tstatic readonly ID = \"workbench.action.configureLanguageBasedSettings\";\n\tstatic readonly LABEL = nls.localize2(\n\t\t\"configureLanguageBasedSettings\",\n\t\t\"Configure Language Specific Settings...\",\n\t);\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst languages =\n\t\t\tthis.languageService.getSortedRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.map(\n\t\t\t({ languageName, languageId }): IQuickPickItem => {\n\t\t\t\tconst description: string = nls.localize(\n\t\t\t\t\t\"languageDescriptionConfigured\",\n\t\t\t\t\t\"({0})\",\n\t\t\t\t\tlanguageId,\n\t\t\t\t);\n\t\t\t\t// construct a fake resource to be able to show nice icons if any\n\t\t\t\tlet fakeResource: URI | undefined;\n\t\t\t\tconst extensions =\n\t\t\t\t\tthis.languageService.getExtensions(languageId);\n\t\t\t\tif (extensions.length) {\n\t\t\t\t\tfakeResource = URI.file(extensions[0]);\n\t\t\t\t} else {\n\t\t\t\t\tconst filenames =\n\t\t\t\t\t\tthis.languageService.getFilenames(languageId);\n\t\t\t\t\tif (filenames.length) {\n\t\t\t\t\t\tfakeResource = URI.file(filenames[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tlabel: languageName,\n\t\t\t\t\ticonClasses: getIconClasses(\n\t\t\t\t\t\tthis.modelService,\n\t\t\t\t\t\tthis.languageService,\n\t\t\t\t\t\tfakeResource,\n\t\t\t\t\t),\n\t\t\t\t\tdescription,\n\t\t\t\t};\n\t\t\t},\n\t\t);\n\n\t\tawait this.quickInputService\n\t\t\t.pick(picks, {\n\t\t\t\tplaceHolder: nls.localize(\"pickLanguage\", \"Select Language\"),\n\t\t\t})\n\t\t\t.then((pick) => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tconst languageId =\n\t\t\t\t\t\tthis.languageService.getLanguageIdByLanguageName(\n\t\t\t\t\t\t\tpick.label,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (typeof languageId === \"string\") {\n\t\t\t\t\t\treturn this.preferencesService.openLanguageSpecificSettings(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n}\n\n// Register a command that gets all settings\nCommandsRegistry.registerCommand({\n\tid: \"_getAllSettings\",\n\thandler: () => {\n\t\tconst configRegistry = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t);\n\t\tconst allSettings = configRegistry.getConfigurationProperties();\n\t\treturn allSettings;\n\t},\n});\n\n//#region --- Register a command to get all actions from the command palette\nCommandsRegistry.registerCommand(\"_getAllCommands\", (accessor) => {\n\tconst keybindingService = accessor.get(IKeybindingService);\n\tconst actions: {\n\t\tcommand: string;\n\t\tlabel: string;\n\t\tkeybinding: string;\n\t\tdescription?: string;\n\t\tprecondition?: string;\n\t}[] = [];\n\tfor (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n\t\tconst keybinding = keybindingService.lookupKeybinding(editorAction.id);\n\t\tactions.push({\n\t\t\tcommand: editorAction.id,\n\t\t\tlabel: editorAction.label,\n\t\t\tdescription: isLocalizedString(editorAction.metadata?.description)\n\t\t\t\t? editorAction.metadata.description.value\n\t\t\t\t: editorAction.metadata?.description,\n\t\t\tprecondition: editorAction.precondition?.serialize(),\n\t\t\tkeybinding: keybinding?.getLabel() ?? \"Not set\",\n\t\t});\n\t}\n\tfor (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n\t\tif (isIMenuItem(menuItem)) {\n\t\t\tconst title =\n\t\t\t\ttypeof menuItem.command.title === \"string\"\n\t\t\t\t\t? menuItem.command.title\n\t\t\t\t\t: menuItem.command.title.value;\n\t\t\tconst category = menuItem.command.category\n\t\t\t\t? typeof menuItem.command.category === \"string\"\n\t\t\t\t\t? menuItem.command.category\n\t\t\t\t\t: menuItem.command.category.value\n\t\t\t\t: undefined;\n\t\t\tconst label = category ? `${category}: ${title}` : title;\n\t\t\tconst description = isLocalizedString(\n\t\t\t\tmenuItem.command.metadata?.description,\n\t\t\t)\n\t\t\t\t? menuItem.command.metadata.description.value\n\t\t\t\t: menuItem.command.metadata?.description;\n\t\t\tconst keybinding = keybindingService.lookupKeybinding(\n\t\t\t\tmenuItem.command.id,\n\t\t\t);\n\t\t\tactions.push({\n\t\t\t\tcommand: menuItem.command.id,\n\t\t\t\tlabel,\n\t\t\t\tdescription,\n\t\t\t\tprecondition: menuItem.when?.serialize(),\n\t\t\t\tkeybinding: keybinding?.getLabel() ?? \"Not set\",\n\t\t\t});\n\t\t}\n\t}\n\treturn actions;\n});\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
