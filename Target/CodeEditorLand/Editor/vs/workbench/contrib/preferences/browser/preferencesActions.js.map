{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/preferencesActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from '../../../../base/common/actions.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { getIconClasses } from '../../../../editor/common/services/getIconClasses.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { EditorExtensionsRegistry } from '../../../../editor/browser/editorExtensions.js';\nimport { MenuId, MenuRegistry, isIMenuItem } from '../../../../platform/actions/common/actions.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { isLocalizedString } from '../../../../platform/action/common/action.js';\n\nexport class ConfigureLanguageBasedSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.configureLanguageBasedSettings';\n\tstatic readonly LABEL = nls.localize2('configureLanguageBasedSettings', \"Configure Language Specific Settings...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst languages = this.languageService.getSortedRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.map(({ languageName, languageId }): IQuickPickItem => {\n\t\t\tconst description: string = nls.localize('languageDescriptionConfigured', \"({0})\", languageId);\n\t\t\t// construct a fake resource to be able to show nice icons if any\n\t\t\tlet fakeResource: URI | undefined;\n\t\t\tconst extensions = this.languageService.getExtensions(languageId);\n\t\t\tif (extensions.length) {\n\t\t\t\tfakeResource = URI.file(extensions[0]);\n\t\t\t} else {\n\t\t\t\tconst filenames = this.languageService.getFilenames(languageId);\n\t\t\t\tif (filenames.length) {\n\t\t\t\t\tfakeResource = URI.file(filenames[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tlabel: languageName,\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.languageService, fakeResource),\n\t\t\t\tdescription\n\t\t\t};\n\t\t});\n\n\t\tawait this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language\") })\n\t\t\t.then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tconst languageId = this.languageService.getLanguageIdByLanguageName(pick.label);\n\t\t\t\t\tif (typeof languageId === 'string') {\n\t\t\t\t\t\treturn this.preferencesService.openLanguageSpecificSettings(languageId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t}\n}\n\n// Register a command that gets all settings\nCommandsRegistry.registerCommand({\n\tid: '_getAllSettings',\n\thandler: () => {\n\t\tconst configRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tconst allSettings = configRegistry.getConfigurationProperties();\n\t\treturn allSettings;\n\t}\n});\n\n//#region --- Register a command to get all actions from the command palette\nCommandsRegistry.registerCommand('_getAllCommands', function (accessor) {\n\tconst keybindingService = accessor.get(IKeybindingService);\n\tconst actions: { command: string; label: string; keybinding: string; description?: string; precondition?: string }[] = [];\n\tfor (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n\t\tconst keybinding = keybindingService.lookupKeybinding(editorAction.id);\n\t\tactions.push({\n\t\t\tcommand: editorAction.id,\n\t\t\tlabel: editorAction.label,\n\t\t\tdescription: isLocalizedString(editorAction.metadata?.description) ? editorAction.metadata.description.value : editorAction.metadata?.description,\n\t\t\tprecondition: editorAction.precondition?.serialize(),\n\t\t\tkeybinding: keybinding?.getLabel() ?? 'Not set'\n\t\t});\n\t}\n\tfor (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n\t\tif (isIMenuItem(menuItem)) {\n\t\t\tconst title = typeof menuItem.command.title === 'string' ? menuItem.command.title : menuItem.command.title.value;\n\t\t\tconst category = menuItem.command.category ? typeof menuItem.command.category === 'string' ? menuItem.command.category : menuItem.command.category.value : undefined;\n\t\t\tconst label = category ? `${category}: ${title}` : title;\n\t\t\tconst description = isLocalizedString(menuItem.command.metadata?.description) ? menuItem.command.metadata.description.value : menuItem.command.metadata?.description;\n\t\t\tconst keybinding = keybindingService.lookupKeybinding(menuItem.command.id);\n\t\t\tactions.push({\n\t\t\t\tcommand: menuItem.command.id,\n\t\t\t\tlabel,\n\t\t\t\tdescription,\n\t\t\t\tprecondition: menuItem.when?.serialize(),\n\t\t\t\tkeybinding: keybinding?.getLabel() ?? 'Not set'\n\t\t\t});\n\t\t}\n\t}\n\treturn actions;\n});\n//#endregion\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAAc;AACvB,SAAS,WAAW;AACpB,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,YAAY,SAAS;AACrB,SAAS,oBAAoB,sBAAsB;AACnD,SAAS,2BAA2B;AACpC,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,YAAY,8BAA8B;AACnD,SAAS,gCAAgC;AACzC,SAAS,QAAQ,cAAc,mBAAmB;AAClD,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAE3B,IAAM,uCAAN,cAAmD,OAAO;AAAA,EAKhE,YACC,IACA,OACgC,cACG,iBACE,mBACC,oBACrC;AACD,UAAM,IAAI,KAAK;AALiB;AACG;AACE;AACC;AAAA,EAGvC;AAAA,EAnCD,OAqBiE;AAAA;AAAA;AAAA,EAEhE,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ,IAAI,UAAU,kCAAkC,yCAAyC;AAAA,EAajH,MAAe,MAAqB;AACnC,UAAM,YAAY,KAAK,gBAAgB,iCAAiC;AACxE,UAAM,QAA0B,UAAU,IAAI,CAAC,EAAE,cAAc,WAAW,MAAsB;AAC/F,YAAM,cAAsB,IAAI,SAAS,iCAAiC,SAAS,UAAU;AAE7F,UAAI;AACJ,YAAM,aAAa,KAAK,gBAAgB,cAAc,UAAU;AAChE,UAAI,WAAW,QAAQ;AACtB,uBAAe,IAAI,KAAK,WAAW,CAAC,CAAC;AAAA,MACtC,OAAO;AACN,cAAM,YAAY,KAAK,gBAAgB,aAAa,UAAU;AAC9D,YAAI,UAAU,QAAQ;AACrB,yBAAe,IAAI,KAAK,UAAU,CAAC,CAAC;AAAA,QACrC;AAAA,MACD;AACA,aAAO;AAAA,QACN,OAAO;AAAA,QACP,aAAa,eAAe,KAAK,cAAc,KAAK,iBAAiB,YAAY;AAAA,QACjF;AAAA,MACD;AAAA,IACD,CAAC;AAED,UAAM,KAAK,kBAAkB,KAAK,OAAO,EAAE,aAAa,IAAI,SAAS,gBAAgB,iBAAiB,EAAE,CAAC,EACvG,KAAK,UAAQ;AACb,UAAI,MAAM;AACT,cAAM,aAAa,KAAK,gBAAgB,4BAA4B,KAAK,KAAK;AAC9E,YAAI,OAAO,eAAe,UAAU;AACnC,iBAAO,KAAK,mBAAmB,6BAA6B,UAAU;AAAA,QACvE;AAAA,MACD;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EAEH;AACD;AAlDa,uCAAN;AAAA,EAQJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;AAqDb,iBAAiB,gBAAgB;AAAA,EAChC,IAAI;AAAA,EACJ,SAAS,6BAAM;AACd,UAAM,iBAAiB,SAAS,GAA2B,WAAW,aAAa;AACnF,UAAM,cAAc,eAAe,2BAA2B;AAC9D,WAAO;AAAA,EACR,GAJS;AAKV,CAAC;AAGD,iBAAiB,gBAAgB,mBAAmB,SAAU,UAAU;AACvE,QAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,QAAM,UAAiH,CAAC;AACxH,aAAW,gBAAgB,yBAAyB,iBAAiB,GAAG;AACvE,UAAM,aAAa,kBAAkB,iBAAiB,aAAa,EAAE;AACrE,YAAQ,KAAK;AAAA,MACZ,SAAS,aAAa;AAAA,MACtB,OAAO,aAAa;AAAA,MACpB,aAAa,kBAAkB,aAAa,UAAU,WAAW,IAAI,aAAa,SAAS,YAAY,QAAQ,aAAa,UAAU;AAAA,MACtI,cAAc,aAAa,cAAc,UAAU;AAAA,MACnD,YAAY,YAAY,SAAS,KAAK;AAAA,IACvC,CAAC;AAAA,EACF;AACA,aAAW,YAAY,aAAa,aAAa,OAAO,cAAc,GAAG;AACxE,QAAI,YAAY,QAAQ,GAAG;AAC1B,YAAM,QAAQ,OAAO,SAAS,QAAQ,UAAU,WAAW,SAAS,QAAQ,QAAQ,SAAS,QAAQ,MAAM;AAC3G,YAAM,WAAW,SAAS,QAAQ,WAAW,OAAO,SAAS,QAAQ,aAAa,WAAW,SAAS,QAAQ,WAAW,SAAS,QAAQ,SAAS,QAAQ;AAC3J,YAAM,QAAQ,WAAW,GAAG,QAAQ,KAAK,KAAK,KAAK;AACnD,YAAM,cAAc,kBAAkB,SAAS,QAAQ,UAAU,WAAW,IAAI,SAAS,QAAQ,SAAS,YAAY,QAAQ,SAAS,QAAQ,UAAU;AACzJ,YAAM,aAAa,kBAAkB,iBAAiB,SAAS,QAAQ,EAAE;AACzE,cAAQ,KAAK;AAAA,QACZ,SAAS,SAAS,QAAQ;AAAA,QAC1B;AAAA,QACA;AAAA,QACA,cAAc,SAAS,MAAM,UAAU;AAAA,QACvC,YAAY,YAAY,SAAS,KAAK;AAAA,MACvC,CAAC;AAAA,IACF;AAAA,EACD;AACA,SAAO;AACR,CAAC;",
  "names": []
}
