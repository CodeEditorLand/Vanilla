{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/preferencesSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISettingsEditorModel, ISetting, ISettingsGroup, ISearchResult, IGroupFilter, SettingMatchType, ISettingMatch } from '../../../services/preferences/common/preferences.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IMatch, matchesContiguousSubString, matchesWords } from '../../../../base/common/filters.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IPreferencesSearchService, IRemoteSearchProvider, ISearchProvider, IWorkbenchSettingsConfiguration } from '../common/preferences.js';\nimport { IExtensionManagementService, ILocalExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ExtensionType } from '../../../../platform/extensions/common/extensions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IAiRelatedInformationService, RelatedInformationType, SettingInformationResult } from '../../../services/aiRelatedInformation/common/aiRelatedInformation.js';\nimport { TfIdfCalculator, TfIdfDocument } from '../../../../base/common/tfIdf.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { nullRange } from '../../../services/preferences/common/preferencesModels.js';\n\nexport interface IEndpointDetails {\n\turlBase?: string;\n\tkey?: string;\n}\n\nexport class PreferencesSearchService extends Disposable implements IPreferencesSearchService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\t// @ts-expect-error disable remote search for now, ref https://github.com/microsoft/vscode/issues/172411\n\tprivate _installedExtensions: Promise<ILocalExtension[]>;\n\tprivate _remoteSearchProvider: IRemoteSearchProvider | undefined;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService\n\t) {\n\t\tsuper();\n\n\t\t// This request goes to the shared process but results won't change during a window's lifetime, so cache the results.\n\t\tthis._installedExtensions = this.extensionManagementService.getInstalled(ExtensionType.User).then(exts => {\n\t\t\t// Filter to enabled extensions that have settings\n\t\t\treturn exts\n\t\t\t\t.filter(ext => this.extensionEnablementService.isEnabled(ext))\n\t\t\t\t.filter(ext => ext.manifest && ext.manifest.contributes && ext.manifest.contributes.configuration)\n\t\t\t\t.filter(ext => !!ext.identifier.uuid);\n\t\t});\n\t}\n\n\tprivate get remoteSearchAllowed(): boolean {\n\t\tconst workbenchSettings = this.configurationService.getValue<IWorkbenchSettingsConfiguration>().workbench.settings;\n\t\treturn workbenchSettings.enableNaturalLanguageSearch;\n\t}\n\n\tgetRemoteSearchProvider(filter: string): IRemoteSearchProvider | undefined {\n\t\tif (!this.remoteSearchAllowed) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._remoteSearchProvider ??= this.instantiationService.createInstance(RemoteSearchProvider);\n\t\tthis._remoteSearchProvider.setFilter(filter);\n\t\treturn this._remoteSearchProvider;\n\t}\n\n\tgetLocalSearchProvider(filter: string): LocalSearchProvider {\n\t\treturn this.instantiationService.createInstance(LocalSearchProvider, filter);\n\t}\n}\n\nfunction cleanFilter(filter: string): string {\n\t// Remove \" and : which are likely to be copypasted as part of a setting name.\n\t// Leave other special characters which the user might want to search for.\n\treturn filter\n\t\t.replace(/[\":]/g, ' ')\n\t\t.replace(/  /g, ' ')\n\t\t.trim();\n}\n\nexport class LocalSearchProvider implements ISearchProvider {\n\tstatic readonly EXACT_MATCH_SCORE = 10000;\n\tstatic readonly START_SCORE = 1000;\n\n\tconstructor(\n\t\tprivate _filter: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis._filter = cleanFilter(this._filter);\n\t}\n\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tif (!this._filter) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tlet orderedScore = LocalSearchProvider.START_SCORE; // Sort is not stable\n\t\tconst settingMatcher = (setting: ISetting) => {\n\t\t\tconst { matches, matchType } = new SettingMatches(this._filter, setting, true, true, (filter, setting) => preferencesModel.findValueMatches(filter, setting), this.configurationService);\n\t\t\tconst score = this._filter === setting.key ?\n\t\t\t\tLocalSearchProvider.EXACT_MATCH_SCORE :\n\t\t\t\torderedScore--;\n\n\t\t\treturn matches.length ?\n\t\t\t\t{\n\t\t\t\t\tmatches,\n\t\t\t\t\tmatchType,\n\t\t\t\t\tscore\n\t\t\t\t} :\n\t\t\t\tnull;\n\t\t};\n\n\t\tconst filterMatches = preferencesModel.filterSettings(this._filter, this.getGroupFilter(this._filter), settingMatcher);\n\t\tconst exactMatch = filterMatches.find(m => m.score === LocalSearchProvider.EXACT_MATCH_SCORE);\n\t\tif (exactMatch) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tfilterMatches: [exactMatch],\n\t\t\t\texactMatch: true\n\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.resolve({\n\t\t\t\tfilterMatches\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getGroupFilter(filter: string): IGroupFilter {\n\t\tconst regex = strings.createRegExp(filter, false, { global: true });\n\t\treturn (group: ISettingsGroup) => {\n\t\t\treturn group.id !== 'defaultOverrides' && regex.test(group.title);\n\t\t};\n\t}\n}\n\nexport class SettingMatches {\n\treadonly matches: IRange[];\n\tmatchType: SettingMatchType = SettingMatchType.None;\n\n\tconstructor(\n\t\tsearchString: string,\n\t\tsetting: ISetting,\n\t\trequireFullQueryMatch: boolean,\n\t\tprivate searchDescription: boolean,\n\t\tvaluesMatcher: (filter: string, setting: ISetting) => IRange[],\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.matches = distinct(this._findMatchesInSetting(searchString, setting), (match) => `${match.startLineNumber}_${match.startColumn}_${match.endLineNumber}_${match.endColumn}_`);\n\t}\n\n\tprivate _findMatchesInSetting(searchString: string, setting: ISetting): IRange[] {\n\t\tconst result = this._doFindMatchesInSetting(searchString, setting);\n\t\treturn result;\n\t}\n\n\tprivate _keyToLabel(settingId: string): string {\n\t\tconst label = settingId\n\t\t\t.replace(/[-._]/g, ' ')\n\t\t\t.replace(/([a-z]+)([A-Z])/g, '$1 $2')\n\t\t\t.replace(/([A-Za-z]+)(\\d+)/g, '$1 $2')\n\t\t\t.replace(/(\\d+)([A-Za-z]+)/g, '$1 $2')\n\t\t\t.toLowerCase();\n\t\treturn label;\n\t}\n\n\tprivate _doFindMatchesInSetting(searchString: string, setting: ISetting): IRange[] {\n\t\tconst descriptionMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\t\tconst keyMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\t\tconst valueMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\n\t\tconst words = new Set<string>(searchString.split(' '));\n\n\t\t// Key search\n\t\tconst settingKeyAsWords: string = this._keyToLabel(setting.key);\n\t\tfor (const word of words) {\n\t\t\t// Check if the key contains the word.\n\t\t\tconst keyMatches = matchesWords(word, settingKeyAsWords, true);\n\t\t\tif (keyMatches?.length) {\n\t\t\t\tkeyMatchingWords.set(word, keyMatches.map(match => this.toKeyRange(setting, match)));\n\t\t\t}\n\t\t}\n\t\t// For now, only allow a match if all words match in the key.\n\t\tif (keyMatchingWords.size === words.size) {\n\t\t\tthis.matchType |= SettingMatchType.KeyMatch;\n\t\t} else {\n\t\t\tkeyMatchingWords.clear();\n\t\t}\n\n\t\t// Also check if the user tried searching by id.\n\t\tconst keyIdMatches = matchesContiguousSubString(searchString, setting.key);\n\t\tif (keyIdMatches?.length) {\n\t\t\tkeyMatchingWords.set(setting.key, keyIdMatches.map(match => this.toKeyRange(setting, match)));\n\t\t\tthis.matchType |= SettingMatchType.KeyMatch;\n\t\t}\n\n\t\t// Check if the match was for a language tag group setting such as [markdown].\n\t\t// In such a case, move that setting to be last.\n\t\tif (setting.overrides?.length && (this.matchType & SettingMatchType.KeyMatch)) {\n\t\t\tthis.matchType = SettingMatchType.LanguageTagSettingMatch;\n\t\t\tconst keyRanges = keyMatchingWords.size ?\n\t\t\t\tArray.from(keyMatchingWords.values()).flat() : [];\n\t\t\treturn [...keyRanges];\n\t\t}\n\n\t\t// Description search\n\t\tif (this.searchDescription) {\n\t\t\tfor (const word of words) {\n\t\t\t\t// Search the description lines.\n\t\t\t\tfor (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n\t\t\t\t\tconst descriptionMatches = matchesContiguousSubString(word, setting.description[lineIndex]);\n\t\t\t\t\tif (descriptionMatches?.length) {\n\t\t\t\t\t\tdescriptionMatchingWords.set(word, descriptionMatches.map(match => this.toDescriptionRange(setting, match, lineIndex)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (descriptionMatchingWords.size === words.size) {\n\t\t\t\tthis.matchType |= SettingMatchType.DescriptionOrValueMatch;\n\t\t\t} else {\n\t\t\t\t// Clear out the match for now. We want to require all words to match in the description.\n\t\t\t\tdescriptionMatchingWords.clear();\n\t\t\t}\n\t\t}\n\n\t\t// Value search\n\t\t// Check if the value contains all the words.\n\t\tif (setting.enum?.length) {\n\t\t\t// Search all string values of enums.\n\t\t\tfor (const option of setting.enum) {\n\t\t\t\tif (typeof option !== 'string') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvalueMatchingWords.clear();\n\t\t\t\tfor (const word of words) {\n\t\t\t\t\tconst valueMatches = matchesContiguousSubString(word, option);\n\t\t\t\t\tif (valueMatches?.length) {\n\t\t\t\t\t\tvalueMatchingWords.set(word, valueMatches.map(match => this.toValueRange(setting, match)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (valueMatchingWords.size === words.size) {\n\t\t\t\t\tthis.matchType |= SettingMatchType.DescriptionOrValueMatch;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// Clear out the match for now. We want to require all words to match in the value.\n\t\t\t\t\tvalueMatchingWords.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Search single string value.\n\t\t\tconst settingValue = this.configurationService.getValue(setting.key);\n\t\t\tif (typeof settingValue === 'string') {\n\t\t\t\tfor (const word of words) {\n\t\t\t\t\tconst valueMatches = matchesContiguousSubString(word, settingValue);\n\t\t\t\t\tif (valueMatches?.length) {\n\t\t\t\t\t\tvalueMatchingWords.set(word, valueMatches.map(match => this.toValueRange(setting, match)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (valueMatchingWords.size === words.size) {\n\t\t\t\t\tthis.matchType |= SettingMatchType.DescriptionOrValueMatch;\n\t\t\t\t} else {\n\t\t\t\t\t// Clear out the match for now. We want to require all words to match in the value.\n\t\t\t\t\tvalueMatchingWords.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst descriptionRanges = descriptionMatchingWords.size ?\n\t\t\tArray.from(descriptionMatchingWords.values()).flat() : [];\n\t\tconst keyRanges = keyMatchingWords.size ?\n\t\t\tArray.from(keyMatchingWords.values()).flat() : [];\n\t\tconst valueRanges = valueMatchingWords.size ?\n\t\t\tArray.from(valueMatchingWords.values()).flat() : [];\n\t\treturn [...descriptionRanges, ...keyRanges, ...valueRanges];\n\t}\n\n\tprivate toKeyRange(setting: ISetting, match: IMatch): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.keyRange.startLineNumber,\n\t\t\tstartColumn: setting.keyRange.startColumn + match.start,\n\t\t\tendLineNumber: setting.keyRange.startLineNumber,\n\t\t\tendColumn: setting.keyRange.startColumn + match.end\n\t\t};\n\t}\n\n\tprivate toDescriptionRange(setting: ISetting, match: IMatch, lineIndex: number): IRange {\n\t\tconst descriptionRange = setting.descriptionRanges[lineIndex];\n\t\tif (!descriptionRange) {\n\t\t\t// This case occurs with added settings such as the\n\t\t\t// manage extension setting.\n\t\t\treturn nullRange;\n\t\t}\n\t\treturn {\n\t\t\tstartLineNumber: descriptionRange.startLineNumber,\n\t\t\tstartColumn: descriptionRange.startColumn + match.start,\n\t\t\tendLineNumber: descriptionRange.endLineNumber,\n\t\t\tendColumn: descriptionRange.startColumn + match.end\n\t\t};\n\t}\n\n\tprivate toValueRange(setting: ISetting, match: IMatch): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.valueRange.startLineNumber,\n\t\t\tstartColumn: setting.valueRange.startColumn + match.start + 1,\n\t\t\tendLineNumber: setting.valueRange.startLineNumber,\n\t\t\tendColumn: setting.valueRange.startColumn + match.end + 1\n\t\t};\n\t}\n}\n\nclass AiRelatedInformationSearchKeysProvider {\n\tprivate settingKeys: string[] = [];\n\tprivate settingsRecord: IStringDictionary<ISetting> = {};\n\tprivate currentPreferencesModel: ISettingsEditorModel | undefined;\n\n\tconstructor(\n\t\tprivate readonly aiRelatedInformationService: IAiRelatedInformationService\n\t) { }\n\n\tupdateModel(preferencesModel: ISettingsEditorModel) {\n\t\tif (preferencesModel === this.currentPreferencesModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentPreferencesModel = preferencesModel;\n\t\tthis.refresh();\n\t}\n\n\tprivate refresh() {\n\t\tthis.settingKeys = [];\n\t\tthis.settingsRecord = {};\n\n\t\tif (\n\t\t\t!this.currentPreferencesModel ||\n\t\t\t!this.aiRelatedInformationService.isEnabled()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const group of this.currentPreferencesModel.settingsGroups) {\n\t\t\tif (group.id === 'mostCommonlyUsed') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tthis.settingKeys.push(setting.key);\n\t\t\t\t\tthis.settingsRecord[setting.key] = setting;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSettingKeys(): string[] {\n\t\treturn this.settingKeys;\n\t}\n\n\tgetSettingsRecord(): IStringDictionary<ISetting> {\n\t\treturn this.settingsRecord;\n\t}\n}\n\nclass AiRelatedInformationSearchProvider implements IRemoteSearchProvider {\n\tprivate static readonly AI_RELATED_INFORMATION_THRESHOLD = 0.73;\n\tprivate static readonly AI_RELATED_INFORMATION_MAX_PICKS = 5;\n\n\tprivate readonly _keysProvider: AiRelatedInformationSearchKeysProvider;\n\tprivate _filter: string = '';\n\n\tconstructor(\n\t\t@IAiRelatedInformationService private readonly aiRelatedInformationService: IAiRelatedInformationService\n\t) {\n\t\tthis._keysProvider = new AiRelatedInformationSearchKeysProvider(aiRelatedInformationService);\n\t}\n\n\tsetFilter(filter: string) {\n\t\tthis._filter = cleanFilter(filter);\n\t}\n\n\tasync searchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken | undefined): Promise<ISearchResult | null> {\n\t\tif (\n\t\t\t!this._filter ||\n\t\t\t!this.aiRelatedInformationService.isEnabled()\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis._keysProvider.updateModel(preferencesModel);\n\n\t\treturn {\n\t\t\tfilterMatches: await this.getAiRelatedInformationItems(token)\n\t\t};\n\t}\n\n\tprivate async getAiRelatedInformationItems(token?: CancellationToken | undefined) {\n\t\tconst settingsRecord = this._keysProvider.getSettingsRecord();\n\n\t\tconst filterMatches: ISettingMatch[] = [];\n\t\tconst relatedInformation = await this.aiRelatedInformationService.getRelatedInformation(this._filter, [RelatedInformationType.SettingInformation], token ?? CancellationToken.None) as SettingInformationResult[];\n\t\trelatedInformation.sort((a, b) => b.weight - a.weight);\n\n\t\tfor (const info of relatedInformation) {\n\t\t\tif (info.weight < AiRelatedInformationSearchProvider.AI_RELATED_INFORMATION_THRESHOLD || filterMatches.length === AiRelatedInformationSearchProvider.AI_RELATED_INFORMATION_MAX_PICKS) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst pick = info.setting;\n\t\t\tfilterMatches.push({\n\t\t\t\tsetting: settingsRecord[pick],\n\t\t\t\tmatches: [settingsRecord[pick].range],\n\t\t\t\tmatchType: SettingMatchType.RemoteMatch,\n\t\t\t\tscore: info.weight\n\t\t\t});\n\t\t}\n\n\t\treturn filterMatches;\n\t}\n}\n\nclass TfIdfSearchProvider implements IRemoteSearchProvider {\n\tprivate static readonly TF_IDF_PRE_NORMALIZE_THRESHOLD = 50;\n\tprivate static readonly TF_IDF_POST_NORMALIZE_THRESHOLD = 0.7;\n\tprivate static readonly TF_IDF_MAX_PICKS = 5;\n\n\tprivate _currentPreferencesModel: ISettingsEditorModel | undefined;\n\tprivate _filter: string = '';\n\tprivate _documents: TfIdfDocument[] = [];\n\tprivate _settingsRecord: IStringDictionary<ISetting> = {};\n\n\tconstructor() {\n\t}\n\n\tsetFilter(filter: string) {\n\t\tthis._filter = cleanFilter(filter);\n\t}\n\n\tkeyToLabel(settingId: string): string {\n\t\tconst label = settingId\n\t\t\t.replace(/[-._]/g, ' ')\n\t\t\t.replace(/([a-z]+)([A-Z])/g, '$1 $2')\n\t\t\t.replace(/([A-Za-z]+)(\\d+)/g, '$1 $2')\n\t\t\t.replace(/(\\d+)([A-Za-z]+)/g, '$1 $2')\n\t\t\t.toLowerCase();\n\t\treturn label;\n\t}\n\n\tsettingItemToEmbeddingString(item: ISetting): string {\n\t\tlet result = `Setting Id: ${item.key}\\n`;\n\t\tresult += `Label: ${this.keyToLabel(item.key)}\\n`;\n\t\tresult += `Description: ${item.description}\\n`;\n\t\treturn result;\n\t}\n\n\tasync searchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken | undefined): Promise<ISearchResult | null> {\n\t\tif (!this._filter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._currentPreferencesModel !== preferencesModel) {\n\t\t\t// Refresh the documents and settings record\n\t\t\tthis._currentPreferencesModel = preferencesModel;\n\t\t\tthis._documents = [];\n\t\t\tthis._settingsRecord = {};\n\t\t\tfor (const group of preferencesModel.settingsGroups) {\n\t\t\t\tif (group.id === 'mostCommonlyUsed') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (const section of group.sections) {\n\t\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\t\tthis._documents.push({\n\t\t\t\t\t\t\tkey: setting.key,\n\t\t\t\t\t\t\ttextChunks: [this.settingItemToEmbeddingString(setting)]\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis._settingsRecord[setting.key] = setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tfilterMatches: await this.getTfIdfItems(token)\n\t\t};\n\t}\n\n\tprivate async getTfIdfItems(token?: CancellationToken | undefined): Promise<ISettingMatch[]> {\n\t\tconst filterMatches: ISettingMatch[] = [];\n\t\tconst tfIdfCalculator = new TfIdfCalculator();\n\t\ttfIdfCalculator.updateDocuments(this._documents);\n\t\tconst tfIdfRankings = tfIdfCalculator.calculateScores(this._filter, token ?? CancellationToken.None);\n\t\ttfIdfRankings.sort((a, b) => b.score - a.score);\n\t\tconst maxScore = tfIdfRankings[0].score;\n\n\t\tif (maxScore < TfIdfSearchProvider.TF_IDF_PRE_NORMALIZE_THRESHOLD) {\n\t\t\t// Reject all the matches.\n\t\t\treturn [];\n\t\t}\n\n\t\tfor (const info of tfIdfRankings) {\n\t\t\tif (info.score / maxScore < TfIdfSearchProvider.TF_IDF_POST_NORMALIZE_THRESHOLD || filterMatches.length === TfIdfSearchProvider.TF_IDF_MAX_PICKS) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst pick = info.key;\n\t\t\tfilterMatches.push({\n\t\t\t\tsetting: this._settingsRecord[pick],\n\t\t\t\tmatches: [this._settingsRecord[pick].range],\n\t\t\t\tmatchType: SettingMatchType.RemoteMatch,\n\t\t\t\tscore: info.score\n\t\t\t});\n\t\t}\n\n\t\treturn filterMatches;\n\t}\n}\n\nclass RemoteSearchProvider implements IRemoteSearchProvider {\n\tprivate adaSearchProvider: AiRelatedInformationSearchProvider | undefined;\n\tprivate tfIdfSearchProvider: TfIdfSearchProvider | undefined;\n\tprivate filter: string = '';\n\n\tconstructor(\n\t\t@IAiRelatedInformationService private readonly aiRelatedInformationService: IAiRelatedInformationService\n\t) {\n\t}\n\n\tprivate initializeSearchProviders() {\n\t\tif (this.aiRelatedInformationService.isEnabled()) {\n\t\t\tthis.adaSearchProvider ??= new AiRelatedInformationSearchProvider(this.aiRelatedInformationService);\n\t\t}\n\t\tthis.tfIdfSearchProvider ??= new TfIdfSearchProvider();\n\t}\n\n\tsetFilter(filter: string): void {\n\t\tthis.initializeSearchProviders();\n\t\tthis.filter = filter;\n\t\tif (this.adaSearchProvider) {\n\t\t\tthis.adaSearchProvider.setFilter(filter);\n\t\t}\n\t\tthis.tfIdfSearchProvider!.setFilter(filter);\n\t}\n\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tif (!this.filter) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tif (!this.adaSearchProvider) {\n\t\t\treturn this.tfIdfSearchProvider!.searchModel(preferencesModel, token);\n\t\t}\n\n\t\t// Use TF-IDF search as a fallback, ref https://github.com/microsoft/vscode/issues/224946\n\t\treturn this.adaSearchProvider.searchModel(preferencesModel, token).then((results) => {\n\t\t\treturn results?.filterMatches.length ? results : this.tfIdfSearchProvider!.searchModel(preferencesModel, token);\n\t\t});\n\t}\n}\n\nregisterSingleton(IPreferencesSearchService, PreferencesSearchService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["setting", "keyRanges"]
}
