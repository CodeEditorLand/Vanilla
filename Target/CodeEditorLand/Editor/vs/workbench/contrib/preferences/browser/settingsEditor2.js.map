{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/settingsEditor2.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../base/browser/dom.js';\nimport * as aria from '../../../../base/browser/ui/aria/aria.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { Button } from '../../../../base/browser/ui/button/button.js';\nimport { ITreeElement } from '../../../../base/browser/ui/tree/tree.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { Delayer } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { fromNow } from '../../../../base/common/date.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, dispose, type IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport './media/settingsEditor2.css';\nimport { localize } from '../../../../nls.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ConfigurationTarget, IConfigurationUpdateOverrides } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { asCssVariable, badgeBackground, badgeForeground, contrastBorder, editorForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IUserDataSyncEnablementService, IUserDataSyncService, SyncStatus } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { EditorPane } from '../../../browser/parts/editor/editorPane.js';\nimport { IEditorMemento, IEditorOpenContext, IEditorPane } from '../../../common/editor.js';\nimport { SuggestEnabledInput } from '../../codeEditor/browser/suggestEnabledInput/suggestEnabledInput.js';\nimport { SettingsTarget, SettingsTargetsWidget } from './preferencesWidgets.js';\nimport { ITOCEntry, getCommonlyUsedData, tocData } from './settingsLayout.js';\nimport { AbstractSettingRenderer, HeightChangeParams, ISettingLinkClickEvent, resolveConfiguredUntrustedSettings, createTocTreeForExtensionSettings, resolveSettingsTree, SettingsTree, SettingTreeRenderers } from './settingsTree.js';\nimport { ISettingsEditorViewState, parseQuery, SearchResultIdx, SearchResultModel, SettingsTreeElement, SettingsTreeGroupChild, SettingsTreeGroupElement, SettingsTreeModel, SettingsTreeSettingElement } from './settingsTreeModels.js';\nimport { createTOCIterator, TOCTree, TOCTreeModel } from './tocTree.js';\nimport { CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_ROW_FOCUS, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, ENABLE_LANGUAGE_FILTER, EXTENSION_SETTING_TAG, FEATURE_SETTING_TAG, ID_SETTING_TAG, IPreferencesSearchService, ISearchProvider, LANGUAGE_SETTING_TAG, MODIFIED_SETTING_TAG, POLICY_SETTING_TAG, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG, SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS, WORKSPACE_TRUST_SETTING_TAG, getExperimentalExtensionToggleData } from '../common/preferences.js';\nimport { settingsHeaderBorder, settingsSashBorder, settingsTextInputBorder } from '../common/settingsEditorColorRegistry.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IOpenSettingsOptions, IPreferencesService, ISearchResult, ISetting, ISettingsEditorModel, ISettingsEditorOptions, ISettingsGroup, SettingMatchType, SettingValueType, validateSettingsEditorOptions } from '../../../services/preferences/common/preferences.js';\nimport { SettingsEditor2Input } from '../../../services/preferences/common/preferencesEditorInput.js';\nimport { Settings2EditorModel, nullRange } from '../../../services/preferences/common/preferencesModels.js';\nimport { IUserDataSyncWorkbenchService } from '../../../services/userDataSync/common/userDataSync.js';\nimport { preferencesClearInputIcon, preferencesFilterIcon } from './preferencesIcons.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { Orientation, Sizing, SplitView } from '../../../../base/browser/ui/splitview/splitview.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { SettingsSearchFilterDropdownMenuActionViewItem } from './settingsSearchMenu.js';\nimport { IExtensionGalleryService, IExtensionManagementService, IGalleryExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ISettingOverrideClickEvent } from './settingsEditorSettingIndicators.js';\nimport { ConfigurationScope, Extensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { defaultButtonStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { registerNavigableContainer } from '../../../browser/actions/widgetNavigationCommands.js';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IExtensionManifest } from '../../../../platform/extensions/common/extensions.js';\nimport { CodeWindow } from '../../../../base/browser/window.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\n\n\nexport const enum SettingsFocusContext {\n\tSearch,\n\tTableOfContents,\n\tSettingTree,\n\tSettingControl\n}\n\nexport function createGroupIterator(group: SettingsTreeGroupElement): Iterable<ITreeElement<SettingsTreeGroupChild>> {\n\treturn Iterable.map(group.children, g => {\n\t\treturn {\n\t\t\telement: g,\n\t\t\tchildren: g instanceof SettingsTreeGroupElement ?\n\t\t\t\tcreateGroupIterator(g) :\n\t\t\t\tundefined\n\t\t};\n\t});\n}\n\nconst $ = DOM.$;\n\ninterface IFocusEventFromScroll extends KeyboardEvent {\n\tfromScroll: true;\n}\n\nconst searchBoxLabel = localize('SearchSettings.AriaLabel', \"Search settings\");\nconst SEARCH_TOC_BEHAVIOR_KEY = 'workbench.settings.settingsSearchTocBehavior';\n\nconst SETTINGS_EDITOR_STATE_KEY = 'settingsEditorState';\nexport class SettingsEditor2 extends EditorPane {\n\n\tstatic readonly ID: string = 'workbench.editor.settings2';\n\tprivate static NUM_INSTANCES: number = 0;\n\tprivate static SEARCH_DEBOUNCE: number = 200;\n\tprivate static SETTING_UPDATE_FAST_DEBOUNCE: number = 200;\n\tprivate static SETTING_UPDATE_SLOW_DEBOUNCE: number = 1000;\n\tprivate static CONFIG_SCHEMA_UPDATE_DELAYER = 500;\n\tprivate static TOC_MIN_WIDTH: number = 100;\n\tprivate static TOC_RESET_WIDTH: number = 200;\n\tprivate static EDITOR_MIN_WIDTH: number = 500;\n\t// Below NARROW_TOTAL_WIDTH, we only render the editor rather than the ToC.\n\tprivate static NARROW_TOTAL_WIDTH: number = this.TOC_RESET_WIDTH + this.EDITOR_MIN_WIDTH;\n\n\tprivate static SUGGESTIONS: string[] = [\n\t\t`@${MODIFIED_SETTING_TAG}`,\n\t\t'@tag:notebookLayout',\n\t\t'@tag:notebookOutputLayout',\n\t\t`@tag:${REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG}`,\n\t\t`@tag:${WORKSPACE_TRUST_SETTING_TAG}`,\n\t\t'@tag:sync',\n\t\t'@tag:usesOnlineServices',\n\t\t'@tag:telemetry',\n\t\t'@tag:accessibility',\n\t\t`@${ID_SETTING_TAG}`,\n\t\t`@${EXTENSION_SETTING_TAG}`,\n\t\t`@${FEATURE_SETTING_TAG}scm`,\n\t\t`@${FEATURE_SETTING_TAG}explorer`,\n\t\t`@${FEATURE_SETTING_TAG}search`,\n\t\t`@${FEATURE_SETTING_TAG}debug`,\n\t\t`@${FEATURE_SETTING_TAG}extensions`,\n\t\t`@${FEATURE_SETTING_TAG}terminal`,\n\t\t`@${FEATURE_SETTING_TAG}task`,\n\t\t`@${FEATURE_SETTING_TAG}problems`,\n\t\t`@${FEATURE_SETTING_TAG}output`,\n\t\t`@${FEATURE_SETTING_TAG}comments`,\n\t\t`@${FEATURE_SETTING_TAG}remote`,\n\t\t`@${FEATURE_SETTING_TAG}timeline`,\n\t\t`@${FEATURE_SETTING_TAG}notebook`,\n\t\t`@${POLICY_SETTING_TAG}`\n\t];\n\n\tprivate static shouldSettingUpdateFast(type: SettingValueType | SettingValueType[]): boolean {\n\t\tif (Array.isArray(type)) {\n\t\t\t// nullable integer/number or complex\n\t\t\treturn false;\n\t\t}\n\t\treturn type === SettingValueType.Enum ||\n\t\t\ttype === SettingValueType.Array ||\n\t\t\ttype === SettingValueType.BooleanObject ||\n\t\t\ttype === SettingValueType.Object ||\n\t\t\ttype === SettingValueType.Complex ||\n\t\t\ttype === SettingValueType.Boolean ||\n\t\t\ttype === SettingValueType.Exclude ||\n\t\t\ttype === SettingValueType.Include;\n\t}\n\n\t// (!) Lots of props that are set once on the first render\n\tprivate defaultSettingsEditorModel!: Settings2EditorModel;\n\tprivate readonly modelDisposables: DisposableStore;\n\n\tprivate rootElement!: HTMLElement;\n\tprivate headerContainer!: HTMLElement;\n\tprivate bodyContainer!: HTMLElement;\n\tprivate searchWidget!: SuggestEnabledInput;\n\tprivate countElement!: HTMLElement;\n\tprivate controlsElement!: HTMLElement;\n\tprivate settingsTargetsWidget!: SettingsTargetsWidget;\n\n\tprivate splitView!: SplitView<number>;\n\n\tprivate settingsTreeContainer!: HTMLElement;\n\tprivate settingsTree!: SettingsTree;\n\tprivate settingRenderers!: SettingTreeRenderers;\n\tprivate tocTreeModel!: TOCTreeModel;\n\tprivate settingsTreeModel!: SettingsTreeModel;\n\tprivate noResultsMessage!: HTMLElement;\n\tprivate clearFilterLinkContainer!: HTMLElement;\n\n\tprivate tocTreeContainer!: HTMLElement;\n\tprivate tocTree!: TOCTree;\n\n\tprivate delayedFilterLogging: Delayer<void>;\n\tprivate searchDelayer: Delayer<void>;\n\tprivate searchInProgress: CancellationTokenSource | null = null;\n\n\tprivate searchInputDelayer: Delayer<void>;\n\tprivate updatedConfigSchemaDelayer: Delayer<void>;\n\n\tprivate settingFastUpdateDelayer: Delayer<void>;\n\tprivate settingSlowUpdateDelayer: Delayer<void>;\n\tprivate pendingSettingUpdate: { key: string; value: any; languageFilter: string | undefined } | null = null;\n\n\tprivate readonly viewState: ISettingsEditorViewState;\n\tprivate _searchResultModel: SearchResultModel | null = null;\n\tprivate searchResultLabel: string | null = null;\n\tprivate lastSyncedLabel: string | null = null;\n\tprivate settingsOrderByTocIndex: Map<string, number> | null = null;\n\n\tprivate tocRowFocused: IContextKey<boolean>;\n\tprivate settingRowFocused: IContextKey<boolean>;\n\tprivate inSettingsEditorContextKey: IContextKey<boolean>;\n\tprivate searchFocusContextKey: IContextKey<boolean>;\n\n\tprivate scheduledRefreshes: Map<string, DOM.IFocusTracker>;\n\tprivate _currentFocusContext: SettingsFocusContext = SettingsFocusContext.Search;\n\n\t/** Don't spam warnings */\n\tprivate hasWarnedMissingSettings = false;\n\tprivate tocTreeDisposed = false;\n\n\t/** Persist the search query upon reloads */\n\tprivate editorMemento: IEditorMemento<ISettingsEditor2State>;\n\n\tprivate tocFocusedElement: SettingsTreeGroupElement | null = null;\n\tprivate treeFocusedElement: SettingsTreeElement | null = null;\n\tprivate settingsTreeScrollTop = 0;\n\tprivate dimension!: DOM.Dimension;\n\n\tprivate installedExtensionIds: string[] = [];\n\tprivate dismissedExtensionSettings: string[] = [];\n\n\tprivate readonly DISMISSED_EXTENSION_SETTINGS_STORAGE_KEY = 'settingsEditor2.dismissedExtensionSettings';\n\tprivate readonly DISMISSED_EXTENSION_SETTINGS_DELIMITER = '\\t';\n\n\tprivate readonly inputChangeListener: MutableDisposable<IDisposable>;\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchConfigurationService private readonly configurationService: IWorkbenchConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IPreferencesSearchService private readonly preferencesSearchService: IPreferencesSearchService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEditorGroupsService protected editorGroupService: IEditorGroupsService,\n\t\t@IUserDataSyncWorkbenchService private readonly userDataSyncWorkbenchService: IUserDataSyncWorkbenchService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IEditorProgressService private readonly editorProgressService: IEditorProgressService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t) {\n\t\tsuper(SettingsEditor2.ID, group, telemetryService, themeService, storageService);\n\t\tthis.delayedFilterLogging = new Delayer<void>(1000);\n\t\tthis.searchDelayer = new Delayer(300);\n\t\tthis.viewState = { settingsTarget: ConfigurationTarget.USER_LOCAL };\n\n\t\tthis.settingFastUpdateDelayer = new Delayer<void>(SettingsEditor2.SETTING_UPDATE_FAST_DEBOUNCE);\n\t\tthis.settingSlowUpdateDelayer = new Delayer<void>(SettingsEditor2.SETTING_UPDATE_SLOW_DEBOUNCE);\n\n\t\tthis.searchInputDelayer = new Delayer<void>(SettingsEditor2.SEARCH_DEBOUNCE);\n\t\tthis.updatedConfigSchemaDelayer = new Delayer<void>(SettingsEditor2.CONFIG_SCHEMA_UPDATE_DELAYER);\n\n\t\tthis.inSettingsEditorContextKey = CONTEXT_SETTINGS_EDITOR.bindTo(contextKeyService);\n\t\tthis.searchFocusContextKey = CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(contextKeyService);\n\t\tthis.tocRowFocused = CONTEXT_TOC_ROW_FOCUS.bindTo(contextKeyService);\n\t\tthis.settingRowFocused = CONTEXT_SETTINGS_ROW_FOCUS.bindTo(contextKeyService);\n\n\t\tthis.scheduledRefreshes = new Map<string, DOM.IFocusTracker>();\n\n\t\tthis.editorMemento = this.getEditorMemento<ISettingsEditor2State>(editorGroupService, textResourceConfigurationService, SETTINGS_EDITOR_STATE_KEY);\n\n\t\tthis.dismissedExtensionSettings = this.storageService\n\t\t\t.get(this.DISMISSED_EXTENSION_SETTINGS_STORAGE_KEY, StorageScope.PROFILE, '')\n\t\t\t.split(this.DISMISSED_EXTENSION_SETTINGS_DELIMITER);\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\tthis.onConfigUpdate(e.affectedKeys);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => {\n\t\t\te.join(this.whenCurrentProfileChanged());\n\t\t}));\n\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(() => {\n\t\t\tthis.searchResultModel?.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\t\tif (this.settingsTreeModel) {\n\t\t\t\tthis.settingsTreeModel.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n\t\t\t\tthis.renderTree();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(configurationService.onDidChangeRestrictedSettings(e => {\n\t\t\tif (e.default.length && this.currentSettingsModel) {\n\t\t\t\tthis.updateElementsByKey(new Set(e.default));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(extensionManagementService.onDidInstallExtensions(() => {\n\t\t\tthis.refreshInstalledExtensionsList();\n\t\t}));\n\t\tthis._register(extensionManagementService.onDidUninstallExtension(() => {\n\t\t\tthis.refreshInstalledExtensionsList();\n\t\t}));\n\n\t\tthis.modelDisposables = this._register(new DisposableStore());\n\n\t\tif (ENABLE_LANGUAGE_FILTER && !SettingsEditor2.SUGGESTIONS.includes(`@${LANGUAGE_SETTING_TAG}`)) {\n\t\t\tSettingsEditor2.SUGGESTIONS.push(`@${LANGUAGE_SETTING_TAG}`);\n\t\t}\n\t\tthis.inputChangeListener = this._register(new MutableDisposable());\n\t}\n\n\tprivate async whenCurrentProfileChanged(): Promise<void> {\n\t\tthis.updatedConfigSchemaDelayer.trigger(() => {\n\t\t\tthis.dismissedExtensionSettings = this.storageService\n\t\t\t\t.get(this.DISMISSED_EXTENSION_SETTINGS_STORAGE_KEY, StorageScope.PROFILE, '')\n\t\t\t\t.split(this.DISMISSED_EXTENSION_SETTINGS_DELIMITER);\n\t\t\tthis.onConfigUpdate(undefined, true);\n\t\t});\n\t}\n\n\toverride get minimumWidth(): number { return SettingsEditor2.EDITOR_MIN_WIDTH; }\n\toverride get maximumWidth(): number { return Number.POSITIVE_INFINITY; }\n\toverride get minimumHeight() { return 180; }\n\n\t// these setters need to exist because this extends from EditorPane\n\toverride set minimumWidth(value: number) { /*noop*/ }\n\toverride set maximumWidth(value: number) { /*noop*/ }\n\n\tprivate get currentSettingsModel() {\n\t\treturn this.searchResultModel || this.settingsTreeModel;\n\t}\n\n\tprivate get searchResultModel(): SearchResultModel | null {\n\t\treturn this._searchResultModel;\n\t}\n\n\tprivate set searchResultModel(value: SearchResultModel | null) {\n\t\tthis._searchResultModel = value;\n\n\t\tthis.rootElement.classList.toggle('search-mode', !!this._searchResultModel);\n\t}\n\n\tprivate get focusedSettingDOMElement(): HTMLElement | undefined {\n\t\tconst focused = this.settingsTree.getFocus()[0];\n\t\tif (!(focused instanceof SettingsTreeSettingElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), focused.setting.key)[0];\n\t}\n\n\tget currentFocusContext() {\n\t\treturn this._currentFocusContext;\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\t\tparent.setAttribute('tabindex', '-1');\n\t\tthis.rootElement = DOM.append(parent, $('.settings-editor', { tabindex: '-1' }));\n\n\t\tthis.createHeader(this.rootElement);\n\t\tthis.createBody(this.rootElement);\n\t\tthis.addCtrlAInterceptor(this.rootElement);\n\t\tthis.updateStyles();\n\n\t\tthis._register(registerNavigableContainer({\n\t\t\tname: 'settingsEditor2',\n\t\t\tfocusNotifiers: [this],\n\t\t\tfocusNextWidget: () => {\n\t\t\t\tif (this.searchWidget.inputWidget.hasWidgetFocus()) {\n\t\t\t\t\tthis.focusTOC();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusPreviousWidget: () => {\n\t\t\t\tif (!this.searchWidget.inputWidget.hasWidgetFocus()) {\n\t\t\t\t\tthis.focusSearch();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\toverride async setInput(input: SettingsEditor2Input, options: ISettingsEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tthis.inSettingsEditorContextKey.set(true);\n\t\tawait super.setInput(input, options, context, token);\n\t\tif (!this.input) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = await this.input.resolve();\n\t\tif (token.isCancellationRequested || !(model instanceof Settings2EditorModel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modelDisposables.clear();\n\t\tthis.modelDisposables.add(model.onDidChangeGroups(() => {\n\t\t\tthis.updatedConfigSchemaDelayer.trigger(() => {\n\t\t\t\tthis.onConfigUpdate(undefined, false, true);\n\t\t\t});\n\t\t}));\n\t\tthis.defaultSettingsEditorModel = model;\n\n\t\toptions = options || validateSettingsEditorOptions({});\n\t\tif (!this.viewState.settingsTarget || !this.settingsTargetsWidget.settingsTarget) {\n\t\t\tconst optionsHasViewStateTarget = options.viewState && (options.viewState as ISettingsEditorViewState).settingsTarget;\n\t\t\tif (!options.target && !optionsHasViewStateTarget) {\n\t\t\t\toptions.target = ConfigurationTarget.USER_LOCAL;\n\t\t\t}\n\t\t}\n\t\tthis._setOptions(options);\n\n\t\t// Don't block setInput on render (which can trigger an async search)\n\t\tthis.onConfigUpdate(undefined, true).then(() => {\n\t\t\tthis.inputChangeListener.value = input.onWillDispose(() => {\n\t\t\t\tthis.searchWidget.setValue('');\n\t\t\t});\n\n\t\t\t// Init TOC selection\n\t\t\tthis.updateTreeScrollSync();\n\t\t});\n\n\t\tawait this.refreshInstalledExtensionsList();\n\t}\n\n\tprivate async refreshInstalledExtensionsList(): Promise<void> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled();\n\t\tthis.installedExtensionIds = installedExtensions\n\t\t\t.filter(ext => ext.manifest.contributes?.configuration)\n\t\t\t.map(ext => ext.identifier.id);\n\t}\n\n\tprivate restoreCachedState(): ISettingsEditor2State | null {\n\t\tconst cachedState = this.input && this.editorMemento.loadEditorState(this.group, this.input);\n\t\tif (cachedState && typeof cachedState.target === 'object') {\n\t\t\tcachedState.target = URI.revive(cachedState.target);\n\t\t}\n\n\t\tif (cachedState) {\n\t\t\tconst settingsTarget = cachedState.target;\n\t\t\tthis.settingsTargetsWidget.settingsTarget = settingsTarget;\n\t\t\tthis.viewState.settingsTarget = settingsTarget;\n\t\t\tif (!this.searchWidget.getValue()) {\n\t\t\t\tthis.searchWidget.setValue(cachedState.searchQuery);\n\t\t\t}\n\t\t}\n\n\t\tif (this.input) {\n\t\t\tthis.editorMemento.clearEditorState(this.input, this.group);\n\t\t}\n\n\t\treturn cachedState ?? null;\n\t}\n\n\toverride getViewState(): object | undefined {\n\t\treturn this.viewState;\n\t}\n\n\toverride setOptions(options: ISettingsEditorOptions | undefined): void {\n\t\tsuper.setOptions(options);\n\n\t\tif (options) {\n\t\t\tthis._setOptions(options);\n\t\t}\n\t}\n\n\tprivate _setOptions(options: ISettingsEditorOptions): void {\n\t\tif (options.focusSearch && !platform.isIOS) {\n\t\t\t// isIOS - #122044\n\t\t\tthis.focusSearch();\n\t\t}\n\n\t\tconst recoveredViewState = options.viewState ?\n\t\t\toptions.viewState as ISettingsEditorViewState : undefined;\n\n\t\tconst query: string | undefined = recoveredViewState?.query ?? options.query;\n\t\tif (query !== undefined) {\n\t\t\tthis.searchWidget.setValue(query);\n\t\t\tthis.viewState.query = query;\n\t\t}\n\n\t\tconst target: SettingsTarget | undefined = options.folderUri ?? recoveredViewState?.settingsTarget ?? <SettingsTarget | undefined>options.target;\n\t\tif (target) {\n\t\t\tthis.settingsTargetsWidget.updateTarget(target);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\t\tthis.inSettingsEditorContextKey.set(false);\n\t\tsuper.clearInput();\n\t}\n\n\tlayout(dimension: DOM.Dimension): void {\n\t\tthis.dimension = dimension;\n\n\t\tif (!this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.layoutSplitView(dimension);\n\n\t\tconst innerWidth = Math.min(this.headerContainer.clientWidth, dimension.width) - 24 * 2; // 24px padding on left and right;\n\t\t// minus padding inside inputbox, countElement width, controls width, extra padding before countElement\n\t\tconst monacoWidth = innerWidth - 10 - this.countElement.clientWidth - this.controlsElement.clientWidth - 12;\n\t\tthis.searchWidget.layout(new DOM.Dimension(monacoWidth, 20));\n\n\t\tthis.rootElement.classList.toggle('narrow-width', dimension.width < SettingsEditor2.NARROW_TOTAL_WIDTH);\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\n\t\tif (this._currentFocusContext === SettingsFocusContext.Search) {\n\t\t\tif (!platform.isIOS) {\n\t\t\t\t// #122044\n\t\t\t\tthis.focusSearch();\n\t\t\t}\n\t\t} else if (this._currentFocusContext === SettingsFocusContext.SettingControl) {\n\t\t\tconst element = this.focusedSettingDOMElement;\n\t\t\tif (element) {\n\t\t\t\tconst control = element.querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n\t\t\t\tif (control) {\n\t\t\t\t\t(<HTMLElement>control).focus();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this._currentFocusContext === SettingsFocusContext.SettingTree) {\n\t\t\tthis.settingsTree.domFocus();\n\t\t} else if (this._currentFocusContext === SettingsFocusContext.TableOfContents) {\n\t\t\tthis.tocTree.domFocus();\n\t\t}\n\t}\n\n\tprotected override setEditorVisible(visible: boolean): void {\n\t\tsuper.setEditorVisible(visible);\n\n\t\tif (!visible) {\n\t\t\t// Wait for editor to be removed from DOM #106303\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.searchWidget.onHide();\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\tfocusSettings(focusSettingInput = false): void {\n\t\tconst focused = this.settingsTree.getFocus();\n\t\tif (!focused.length) {\n\t\t\tthis.settingsTree.focusFirst();\n\t\t}\n\n\t\tthis.settingsTree.domFocus();\n\n\t\tif (focusSettingInput) {\n\t\t\tconst controlInFocusedRow = this.settingsTree.getHTMLElement().querySelector(`.focused ${AbstractSettingRenderer.CONTROL_SELECTOR}`);\n\t\t\tif (controlInFocusedRow) {\n\t\t\t\t(<HTMLElement>controlInFocusedRow).focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tfocusTOC(): void {\n\t\tthis.tocTree.domFocus();\n\t}\n\n\tshowContextMenu(): void {\n\t\tconst focused = this.settingsTree.getFocus()[0];\n\t\tconst rowElement = this.focusedSettingDOMElement;\n\t\tif (rowElement && focused instanceof SettingsTreeSettingElement) {\n\t\t\tthis.settingRenderers.showContextMenu(focused, rowElement);\n\t\t}\n\t}\n\n\tfocusSearch(filter?: string, selectAll = true): void {\n\t\tif (filter && this.searchWidget) {\n\t\t\tthis.searchWidget.setValue(filter);\n\t\t}\n\n\t\t// Do not select all if the user is already searching.\n\t\tthis.searchWidget.focus(selectAll && !this.searchInputDelayer.isTriggered);\n\t}\n\n\tclearSearchResults(): void {\n\t\tthis.searchWidget.setValue('');\n\t\tthis.focusSearch();\n\t}\n\n\tclearSearchFilters(): void {\n\t\tconst query = this.searchWidget.getValue();\n\n\t\tconst splitQuery = query.split(' ').filter(word => {\n\t\t\treturn word.length && !SettingsEditor2.SUGGESTIONS.some(suggestion => word.startsWith(suggestion));\n\t\t});\n\n\t\tthis.searchWidget.setValue(splitQuery.join(' '));\n\t}\n\n\tprivate updateInputAriaLabel() {\n\t\tlet label = searchBoxLabel;\n\t\tif (this.searchResultLabel) {\n\t\t\tlabel += `. ${this.searchResultLabel}`;\n\t\t}\n\n\t\tif (this.lastSyncedLabel) {\n\t\t\tlabel += `. ${this.lastSyncedLabel}`;\n\t\t}\n\n\t\tthis.searchWidget.updateAriaLabel(label);\n\t}\n\n\t/**\n\t * Render the header of the Settings editor, which includes the content above the splitview.\n\t */\n\tprivate createHeader(parent: HTMLElement): void {\n\t\tthis.headerContainer = DOM.append(parent, $('.settings-header'));\n\n\t\tconst searchContainer = DOM.append(this.headerContainer, $('.search-container'));\n\n\t\tconst clearInputAction = new Action(SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, localize('clearInput', \"Clear Settings Search Input\"), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults());\n\t\tconst filterAction = new Action(SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS, localize('filterInput', \"Filter Settings\"), ThemeIcon.asClassName(preferencesFilterIcon));\n\t\tthis.searchWidget = this._register(this.instantiationService.createInstance(SuggestEnabledInput, `${SettingsEditor2.ID}.searchbox`, searchContainer, {\n\t\t\ttriggerCharacters: ['@', ':'],\n\t\t\tprovideResults: (query: string) => {\n\t\t\t\t// Based on testing, the trigger character is always at the end of the query.\n\t\t\t\t// for the ':' trigger, only return suggestions if there was a '@' before it in the same word.\n\t\t\t\tconst queryParts = query.split(/\\s/g);\n\t\t\t\tif (queryParts[queryParts.length - 1].startsWith(`@${LANGUAGE_SETTING_TAG}`)) {\n\t\t\t\t\tconst sortedLanguages = this.languageService.getRegisteredLanguageIds().map(languageId => {\n\t\t\t\t\t\treturn `@${LANGUAGE_SETTING_TAG}${languageId} `;\n\t\t\t\t\t}).sort();\n\t\t\t\t\treturn sortedLanguages.filter(langFilter => !query.includes(langFilter));\n\t\t\t\t} else if (queryParts[queryParts.length - 1].startsWith(`@${EXTENSION_SETTING_TAG}`)) {\n\t\t\t\t\tconst installedExtensionsTags = this.installedExtensionIds.map(extensionId => {\n\t\t\t\t\t\treturn `@${EXTENSION_SETTING_TAG}${extensionId} `;\n\t\t\t\t\t}).sort();\n\t\t\t\t\treturn installedExtensionsTags.filter(extFilter => !query.includes(extFilter));\n\t\t\t\t} else if (queryParts[queryParts.length - 1].startsWith('@')) {\n\t\t\t\t\treturn SettingsEditor2.SUGGESTIONS.filter(tag => !query.includes(tag)).map(tag => tag.endsWith(':') ? tag : tag + ' ');\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}, searchBoxLabel, 'settingseditor:searchinput' + SettingsEditor2.NUM_INSTANCES++, {\n\t\t\tplaceholderText: searchBoxLabel,\n\t\t\tfocusContextKey: this.searchFocusContextKey,\n\t\t\tstyleOverrides: {\n\t\t\t\tinputBorder: settingsTextInputBorder\n\t\t\t}\n\t\t\t// TODO: Aria-live\n\t\t}));\n\t\tthis._register(this.searchWidget.onDidFocus(() => {\n\t\t\tthis._currentFocusContext = SettingsFocusContext.Search;\n\t\t}));\n\n\t\tthis.countElement = DOM.append(searchContainer, DOM.$('.settings-count-widget.monaco-count-badge.long'));\n\n\t\tthis.countElement.style.backgroundColor = asCssVariable(badgeBackground);\n\t\tthis.countElement.style.color = asCssVariable(badgeForeground);\n\t\tthis.countElement.style.border = `1px solid ${asCssVariable(contrastBorder)}`;\n\n\t\tthis._register(this.searchWidget.onInputDidChange(() => {\n\t\t\tconst searchVal = this.searchWidget.getValue();\n\t\t\tclearInputAction.enabled = !!searchVal;\n\t\t\tthis.searchInputDelayer.trigger(() => this.onSearchInputChanged());\n\t\t}));\n\n\t\tconst headerControlsContainer = DOM.append(this.headerContainer, $('.settings-header-controls'));\n\t\theaderControlsContainer.style.borderColor = asCssVariable(settingsHeaderBorder);\n\n\t\tconst targetWidgetContainer = DOM.append(headerControlsContainer, $('.settings-target-container'));\n\t\tthis.settingsTargetsWidget = this._register(this.instantiationService.createInstance(SettingsTargetsWidget, targetWidgetContainer, { enableRemoteSettings: true }));\n\t\tthis.settingsTargetsWidget.settingsTarget = ConfigurationTarget.USER_LOCAL;\n\t\tthis.settingsTargetsWidget.onDidTargetChange(target => this.onDidSettingsTargetChange(target));\n\t\tthis._register(DOM.addDisposableListener(targetWidgetContainer, DOM.EventType.KEY_DOWN, e => {\n\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\tif (event.keyCode === KeyCode.DownArrow) {\n\t\t\t\tthis.focusSettings();\n\t\t\t}\n\t\t}));\n\n\t\tif (this.userDataSyncWorkbenchService.enabled && this.userDataSyncEnablementService.canToggleEnablement()) {\n\t\t\tconst syncControls = this._register(this.instantiationService.createInstance(SyncControls, this.window, headerControlsContainer));\n\t\t\tthis._register(syncControls.onDidChangeLastSyncedLabel(lastSyncedLabel => {\n\t\t\t\tthis.lastSyncedLabel = lastSyncedLabel;\n\t\t\t\tthis.updateInputAriaLabel();\n\t\t\t}));\n\t\t}\n\n\t\tthis.controlsElement = DOM.append(searchContainer, DOM.$('.settings-clear-widget'));\n\n\t\tconst actionBar = this._register(new ActionBar(this.controlsElement, {\n\t\t\tactionViewItemProvider: (action, options) => {\n\t\t\t\tif (action.id === filterAction.id) {\n\t\t\t\t\treturn this.instantiationService.createInstance(SettingsSearchFilterDropdownMenuActionViewItem, action, options, this.actionRunner, this.searchWidget);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\tactionBar.push([clearInputAction, filterAction], { label: false, icon: true });\n\t}\n\n\tprivate onDidSettingsTargetChange(target: SettingsTarget): void {\n\t\tthis.viewState.settingsTarget = target;\n\n\t\t// TODO Instead of rebuilding the whole model, refresh and uncache the inspected setting value\n\t\tthis.onConfigUpdate(undefined, true);\n\t}\n\n\tprivate onDidDismissExtensionSetting(extensionId: string): void {\n\t\tif (!this.dismissedExtensionSettings.includes(extensionId)) {\n\t\t\tthis.dismissedExtensionSettings.push(extensionId);\n\t\t}\n\t\tthis.storageService.store(\n\t\t\tthis.DISMISSED_EXTENSION_SETTINGS_STORAGE_KEY,\n\t\t\tthis.dismissedExtensionSettings.join(this.DISMISSED_EXTENSION_SETTINGS_DELIMITER),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER\n\t\t);\n\t\tthis.onConfigUpdate(undefined, true);\n\t}\n\n\tprivate onDidClickSetting(evt: ISettingLinkClickEvent, recursed?: boolean): void {\n\t\tconst targetElement = this.currentSettingsModel.getElementsByName(evt.targetKey)?.[0];\n\t\tlet revealFailed = false;\n\t\tif (targetElement) {\n\t\t\tlet sourceTop = 0.5;\n\t\t\ttry {\n\t\t\t\tconst _sourceTop = this.settingsTree.getRelativeTop(evt.source);\n\t\t\t\tif (_sourceTop !== null) {\n\t\t\t\t\tsourceTop = _sourceTop;\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// e.g. clicked a searched element, now the search has been cleared\n\t\t\t}\n\n\t\t\t// If we search for something and focus on a category, the settings tree\n\t\t\t// only renders settings in that category.\n\t\t\t// If the target display category is different than the source's, unfocus the category\n\t\t\t// so that we can render all found settings again.\n\t\t\t// Then, the reveal call will correctly find the target setting.\n\t\t\tif (this.viewState.filterToCategory && evt.source.displayCategory !== targetElement.displayCategory) {\n\t\t\t\tthis.tocTree.setFocus([]);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.settingsTree.reveal(targetElement, sourceTop);\n\t\t\t} catch (_) {\n\t\t\t\t// The listwidget couldn't find the setting to reveal,\n\t\t\t\t// even though it's in the model, meaning there might be a filter\n\t\t\t\t// preventing it from showing up.\n\t\t\t\trevealFailed = true;\n\t\t\t}\n\n\t\t\tif (!revealFailed) {\n\t\t\t\t// We need to shift focus from the setting that contains the link to the setting that's\n\t\t\t\t// linked. Clicking on the link sets focus on the setting that contains the link,\n\t\t\t\t// which is why we need the setTimeout.\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.settingsTree.setFocus([targetElement]);\n\t\t\t\t}, 50);\n\n\t\t\t\tconst domElements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), evt.targetKey);\n\t\t\t\tif (domElements && domElements[0]) {\n\t\t\t\t\tconst control = domElements[0].querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n\t\t\t\t\tif (control) {\n\t\t\t\t\t\t(<HTMLElement>control).focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!recursed && (!targetElement || revealFailed)) {\n\t\t\t// We'll call this event handler again after clearing the search query,\n\t\t\t// so that more settings show up in the list.\n\t\t\tconst p = this.triggerSearch('');\n\t\t\tp.then(() => {\n\t\t\t\tthis.searchWidget.setValue('');\n\t\t\t\tthis.onDidClickSetting(evt, true);\n\t\t\t});\n\t\t}\n\t}\n\n\tswitchToSettingsFile(): Promise<IEditorPane | undefined> {\n\t\tconst query = parseQuery(this.searchWidget.getValue()).query;\n\t\treturn this.openSettingsFile({ query });\n\t}\n\n\tprivate async openSettingsFile(options?: ISettingsEditorOptions): Promise<IEditorPane | undefined> {\n\t\tconst currentSettingsTarget = this.settingsTargetsWidget.settingsTarget;\n\n\t\tconst openOptions: IOpenSettingsOptions = { jsonEditor: true, ...options };\n\t\tif (currentSettingsTarget === ConfigurationTarget.USER_LOCAL) {\n\t\t\tif (options?.revealSetting) {\n\t\t\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\t\t\tconst configurationScope = configurationProperties[options?.revealSetting.key]?.scope;\n\t\t\t\tif (configurationScope === ConfigurationScope.APPLICATION) {\n\t\t\t\t\treturn this.preferencesService.openApplicationSettings(openOptions);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.preferencesService.openUserSettings(openOptions);\n\t\t} else if (currentSettingsTarget === ConfigurationTarget.USER_REMOTE) {\n\t\t\treturn this.preferencesService.openRemoteSettings(openOptions);\n\t\t} else if (currentSettingsTarget === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn this.preferencesService.openWorkspaceSettings(openOptions);\n\t\t} else if (URI.isUri(currentSettingsTarget)) {\n\t\t\treturn this.preferencesService.openFolderSettings({ folderUri: currentSettingsTarget, ...openOptions });\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate createBody(parent: HTMLElement): void {\n\t\tthis.bodyContainer = DOM.append(parent, $('.settings-body'));\n\n\t\tthis.noResultsMessage = DOM.append(this.bodyContainer, $('.no-results-message'));\n\n\t\tthis.noResultsMessage.innerText = localize('noResults', \"No Settings Found\");\n\n\t\tthis.clearFilterLinkContainer = $('span.clear-search-filters');\n\n\t\tthis.clearFilterLinkContainer.textContent = ' - ';\n\t\tconst clearFilterLink = DOM.append(this.clearFilterLinkContainer, $('a.pointer.prominent', { tabindex: 0 }, localize('clearSearchFilters', 'Clear Filters')));\n\t\tthis._register(DOM.addDisposableListener(clearFilterLink, DOM.EventType.CLICK, (e: MouseEvent) => {\n\t\t\tDOM.EventHelper.stop(e, false);\n\t\t\tthis.clearSearchFilters();\n\t\t}));\n\n\t\tDOM.append(this.noResultsMessage, this.clearFilterLinkContainer);\n\n\t\tthis.noResultsMessage.style.color = asCssVariable(editorForeground);\n\n\t\tthis.tocTreeContainer = $('.settings-toc-container');\n\t\tthis.settingsTreeContainer = $('.settings-tree-container');\n\n\t\tthis.createTOC(this.tocTreeContainer);\n\t\tthis.createSettingsTree(this.settingsTreeContainer);\n\n\t\tthis.splitView = this._register(new SplitView(this.bodyContainer, {\n\t\t\torientation: Orientation.HORIZONTAL,\n\t\t\tproportionalLayout: true\n\t\t}));\n\t\tconst startingWidth = this.storageService.getNumber('settingsEditor2.splitViewWidth', StorageScope.PROFILE, SettingsEditor2.TOC_RESET_WIDTH);\n\t\tthis.splitView.addView({\n\t\t\tonDidChange: Event.None,\n\t\t\telement: this.tocTreeContainer,\n\t\t\tminimumSize: SettingsEditor2.TOC_MIN_WIDTH,\n\t\t\tmaximumSize: Number.POSITIVE_INFINITY,\n\t\t\tlayout: (width, _, height) => {\n\t\t\t\tthis.tocTreeContainer.style.width = `${width}px`;\n\t\t\t\tthis.tocTree.layout(height, width);\n\t\t\t}\n\t\t}, startingWidth, undefined, true);\n\t\tthis.splitView.addView({\n\t\t\tonDidChange: Event.None,\n\t\t\telement: this.settingsTreeContainer,\n\t\t\tminimumSize: SettingsEditor2.EDITOR_MIN_WIDTH,\n\t\t\tmaximumSize: Number.POSITIVE_INFINITY,\n\t\t\tlayout: (width, _, height) => {\n\t\t\t\tthis.settingsTreeContainer.style.width = `${width}px`;\n\t\t\t\tthis.settingsTree.layout(height, width);\n\t\t\t}\n\t\t}, Sizing.Distribute, undefined, true);\n\t\tthis._register(this.splitView.onDidSashReset(() => {\n\t\t\tconst totalSize = this.splitView.getViewSize(0) + this.splitView.getViewSize(1);\n\t\t\tthis.splitView.resizeView(0, SettingsEditor2.TOC_RESET_WIDTH);\n\t\t\tthis.splitView.resizeView(1, totalSize - SettingsEditor2.TOC_RESET_WIDTH);\n\t\t}));\n\t\tthis._register(this.splitView.onDidSashChange(() => {\n\t\t\tconst width = this.splitView.getViewSize(0);\n\t\t\tthis.storageService.store('settingsEditor2.splitViewWidth', width, StorageScope.PROFILE, StorageTarget.USER);\n\t\t}));\n\t\tconst borderColor = this.theme.getColor(settingsSashBorder)!;\n\t\tthis.splitView.style({ separatorBorder: borderColor });\n\t}\n\n\tprivate addCtrlAInterceptor(container: HTMLElement): void {\n\t\tthis._register(DOM.addStandardDisposableListener(container, DOM.EventType.KEY_DOWN, (e: StandardKeyboardEvent) => {\n\t\t\tif (\n\t\t\t\te.keyCode === KeyCode.KeyA &&\n\t\t\t\t(platform.isMacintosh ? e.metaKey : e.ctrlKey) &&\n\t\t\t\t!DOM.isEditableElement(e.target)\n\t\t\t) {\n\t\t\t\t// Avoid browser ctrl+a\n\t\t\t\te.browserEvent.stopPropagation();\n\t\t\t\te.browserEvent.preventDefault();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createTOC(container: HTMLElement): void {\n\t\tthis.tocTreeModel = this.instantiationService.createInstance(TOCTreeModel, this.viewState);\n\n\t\tthis.tocTree = this._register(this.instantiationService.createInstance(TOCTree,\n\t\t\tDOM.append(container, $('.settings-toc-wrapper', {\n\t\t\t\t'role': 'navigation',\n\t\t\t\t'aria-label': localize('settings', \"Settings\"),\n\t\t\t})),\n\t\t\tthis.viewState));\n\t\tthis.tocTreeDisposed = false;\n\n\t\tthis._register(this.tocTree.onDidFocus(() => {\n\t\t\tthis._currentFocusContext = SettingsFocusContext.TableOfContents;\n\t\t}));\n\n\t\tthis._register(this.tocTree.onDidChangeFocus(e => {\n\t\t\tconst element: SettingsTreeGroupElement | null = e.elements?.[0] ?? null;\n\t\t\tif (this.tocFocusedElement === element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.tocFocusedElement = element;\n\t\t\tthis.tocTree.setSelection(element ? [element] : []);\n\t\t\tif (this.searchResultModel) {\n\t\t\t\tif (this.viewState.filterToCategory !== element) {\n\t\t\t\t\tthis.viewState.filterToCategory = element ?? undefined;\n\t\t\t\t\t// Force render in this case, because\n\t\t\t\t\t// onDidClickSetting relies on the updated view.\n\t\t\t\t\tthis.renderTree(undefined, true);\n\t\t\t\t\tthis.settingsTree.scrollTop = 0;\n\t\t\t\t}\n\t\t\t} else if (element && (!e.browserEvent || !(<IFocusEventFromScroll>e.browserEvent).fromScroll)) {\n\t\t\t\tthis.settingsTree.reveal(element, 0);\n\t\t\t\tthis.settingsTree.setFocus([element]);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tocTree.onDidFocus(() => {\n\t\t\tthis.tocRowFocused.set(true);\n\t\t}));\n\n\t\tthis._register(this.tocTree.onDidBlur(() => {\n\t\t\tthis.tocRowFocused.set(false);\n\t\t}));\n\n\t\tthis._register(this.tocTree.onDidDispose(() => {\n\t\t\tthis.tocTreeDisposed = true;\n\t\t}));\n\t}\n\n\tprivate applyFilter(filter: string) {\n\t\tif (this.searchWidget && !this.searchWidget.getValue().includes(filter)) {\n\t\t\t// Prepend the filter to the query.\n\t\t\tconst newQuery = `${filter} ${this.searchWidget.getValue().trimStart()}`;\n\t\t\tthis.focusSearch(newQuery, false);\n\t\t}\n\t}\n\n\tprivate removeLanguageFilters() {\n\t\tif (this.searchWidget && this.searchWidget.getValue().includes(`@${LANGUAGE_SETTING_TAG}`)) {\n\t\t\tconst query = this.searchWidget.getValue().split(' ');\n\t\t\tconst newQuery = query.filter(word => !word.startsWith(`@${LANGUAGE_SETTING_TAG}`)).join(' ');\n\t\t\tthis.focusSearch(newQuery, false);\n\t\t}\n\t}\n\n\tprivate createSettingsTree(container: HTMLElement): void {\n\t\tthis.settingRenderers = this._register(this.instantiationService.createInstance(SettingTreeRenderers));\n\t\tthis._register(this.settingRenderers.onDidChangeSetting(e => this.onDidChangeSetting(e.key, e.value, e.type, e.manualReset, e.scope)));\n\t\tthis._register(this.settingRenderers.onDidDismissExtensionSetting((e) => this.onDidDismissExtensionSetting(e)));\n\t\tthis._register(this.settingRenderers.onDidOpenSettings(settingKey => {\n\t\t\tthis.openSettingsFile({ revealSetting: { key: settingKey, edit: true } });\n\t\t}));\n\t\tthis._register(this.settingRenderers.onDidClickSettingLink(settingName => this.onDidClickSetting(settingName)));\n\t\tthis._register(this.settingRenderers.onDidFocusSetting(element => {\n\t\t\tthis.settingsTree.setFocus([element]);\n\t\t\tthis._currentFocusContext = SettingsFocusContext.SettingControl;\n\t\t\tthis.settingRowFocused.set(false);\n\t\t}));\n\t\tthis._register(this.settingRenderers.onDidChangeSettingHeight((params: HeightChangeParams) => {\n\t\t\tconst { element, height } = params;\n\t\t\ttry {\n\t\t\t\tthis.settingsTree.updateElementHeight(element, height);\n\t\t\t} catch (e) {\n\t\t\t\t// the element was not found\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.settingRenderers.onApplyFilter((filter) => this.applyFilter(filter)));\n\t\tthis._register(this.settingRenderers.onDidClickOverrideElement((element: ISettingOverrideClickEvent) => {\n\t\t\tthis.removeLanguageFilters();\n\t\t\tif (element.language) {\n\t\t\t\tthis.applyFilter(`@${LANGUAGE_SETTING_TAG}${element.language}`);\n\t\t\t}\n\n\t\t\tif (element.scope === 'workspace') {\n\t\t\t\tthis.settingsTargetsWidget.updateTarget(ConfigurationTarget.WORKSPACE);\n\t\t\t} else if (element.scope === 'user') {\n\t\t\t\tthis.settingsTargetsWidget.updateTarget(ConfigurationTarget.USER_LOCAL);\n\t\t\t} else if (element.scope === 'remote') {\n\t\t\t\tthis.settingsTargetsWidget.updateTarget(ConfigurationTarget.USER_REMOTE);\n\t\t\t}\n\t\t\tthis.applyFilter(`@${ID_SETTING_TAG}${element.settingKey}`);\n\t\t}));\n\n\t\tthis.settingsTree = this._register(this.instantiationService.createInstance(SettingsTree,\n\t\t\tcontainer,\n\t\t\tthis.viewState,\n\t\t\tthis.settingRenderers.allRenderers));\n\n\t\tthis._register(this.settingsTree.onDidScroll(() => {\n\t\t\tif (this.settingsTree.scrollTop === this.settingsTreeScrollTop) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.settingsTreeScrollTop = this.settingsTree.scrollTop;\n\n\t\t\t// setTimeout because calling setChildren on the settingsTree can trigger onDidScroll, so it fires when\n\t\t\t// setChildren has called on the settings tree but not the toc tree yet, so their rendered elements are out of sync\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.updateTreeScrollSync();\n\t\t\t}, 0);\n\t\t}));\n\n\t\tthis._register(this.settingsTree.onDidFocus(() => {\n\t\t\tconst classList = container.ownerDocument.activeElement?.classList;\n\t\t\tif (classList && classList.contains('monaco-list') && classList.contains('settings-editor-tree')) {\n\t\t\t\tthis._currentFocusContext = SettingsFocusContext.SettingTree;\n\t\t\t\tthis.settingRowFocused.set(true);\n\t\t\t\tthis.treeFocusedElement ??= this.settingsTree.firstVisibleElement ?? null;\n\t\t\t\tif (this.treeFocusedElement) {\n\t\t\t\t\tthis.treeFocusedElement.tabbable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.settingsTree.onDidBlur(() => {\n\t\t\tthis.settingRowFocused.set(false);\n\t\t\t// Clear out the focused element, otherwise it could be\n\t\t\t// out of date during the next onDidFocus event.\n\t\t\tthis.treeFocusedElement = null;\n\t\t}));\n\n\t\t// There is no different select state in the settings tree\n\t\tthis._register(this.settingsTree.onDidChangeFocus(e => {\n\t\t\tconst element = e.elements[0];\n\t\t\tif (this.treeFocusedElement === element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.treeFocusedElement) {\n\t\t\t\tthis.treeFocusedElement.tabbable = false;\n\t\t\t}\n\n\t\t\tthis.treeFocusedElement = element;\n\n\t\t\tif (this.treeFocusedElement) {\n\t\t\t\tthis.treeFocusedElement.tabbable = true;\n\t\t\t}\n\n\t\t\tthis.settingsTree.setSelection(element ? [element] : []);\n\t\t}));\n\t}\n\n\tprivate onDidChangeSetting(key: string, value: any, type: SettingValueType | SettingValueType[], manualReset: boolean, scope: ConfigurationScope | undefined): void {\n\t\tconst parsedQuery = parseQuery(this.searchWidget.getValue());\n\t\tconst languageFilter = parsedQuery.languageFilter;\n\t\tif (manualReset || (this.pendingSettingUpdate && this.pendingSettingUpdate.key !== key)) {\n\t\t\tthis.updateChangedSetting(key, value, manualReset, languageFilter, scope);\n\t\t}\n\n\t\tthis.pendingSettingUpdate = { key, value, languageFilter };\n\t\tif (SettingsEditor2.shouldSettingUpdateFast(type)) {\n\t\t\tthis.settingFastUpdateDelayer.trigger(() => this.updateChangedSetting(key, value, manualReset, languageFilter, scope));\n\t\t} else {\n\t\t\tthis.settingSlowUpdateDelayer.trigger(() => this.updateChangedSetting(key, value, manualReset, languageFilter, scope));\n\t\t}\n\t}\n\n\tprivate updateTreeScrollSync(): void {\n\t\tthis.settingRenderers.cancelSuggesters();\n\t\tif (this.searchResultModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tocTreeModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elementToSync = this.settingsTree.firstVisibleElement;\n\t\tconst element = elementToSync instanceof SettingsTreeSettingElement ? elementToSync.parent :\n\t\t\telementToSync instanceof SettingsTreeGroupElement ? elementToSync :\n\t\t\t\tnull;\n\n\t\t// It's possible for this to be called when the TOC and settings tree are out of sync - e.g. when the settings tree has deferred a refresh because\n\t\t// it is focused. So, bail if element doesn't exist in the TOC.\n\t\tlet nodeExists = true;\n\t\ttry { this.tocTree.getNode(element); } catch (e) { nodeExists = false; }\n\t\tif (!nodeExists) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element && this.tocTree.getSelection()[0] !== element) {\n\t\t\tconst ancestors = this.getAncestors(element);\n\t\t\tancestors.forEach(e => this.tocTree.expand(<SettingsTreeGroupElement>e));\n\n\t\t\tthis.tocTree.reveal(element);\n\t\t\tconst elementTop = this.tocTree.getRelativeTop(element);\n\t\t\tif (typeof elementTop !== 'number') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.tocTree.collapseAll();\n\n\t\t\tancestors.forEach(e => this.tocTree.expand(<SettingsTreeGroupElement>e));\n\t\t\tif (elementTop < 0 || elementTop > 1) {\n\t\t\t\tthis.tocTree.reveal(element);\n\t\t\t} else {\n\t\t\t\tthis.tocTree.reveal(element, elementTop);\n\t\t\t}\n\n\t\t\tthis.tocTree.expand(element);\n\n\t\t\tthis.tocTree.setSelection([element]);\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t(<IFocusEventFromScroll>fakeKeyboardEvent).fromScroll = true;\n\t\t\tthis.tocTree.setFocus([element], fakeKeyboardEvent);\n\t\t}\n\t}\n\n\tprivate getAncestors(element: SettingsTreeElement): SettingsTreeElement[] {\n\t\tconst ancestors: any[] = [];\n\n\t\twhile (element.parent) {\n\t\t\tif (element.parent.id !== 'root') {\n\t\t\t\tancestors.push(element.parent);\n\t\t\t}\n\n\t\t\telement = element.parent;\n\t\t}\n\n\t\treturn ancestors.reverse();\n\t}\n\n\tprivate updateChangedSetting(key: string, value: any, manualReset: boolean, languageFilter: string | undefined, scope: ConfigurationScope | undefined): Promise<void> {\n\t\t// ConfigurationService displays the error if this fails.\n\t\t// Force a render afterwards because onDidConfigurationUpdate doesn't fire if the update doesn't result in an effective setting value change.\n\t\tconst settingsTarget = this.settingsTargetsWidget.settingsTarget;\n\t\tconst resource = URI.isUri(settingsTarget) ? settingsTarget : undefined;\n\t\tconst configurationTarget = <ConfigurationTarget | null>(resource ? ConfigurationTarget.WORKSPACE_FOLDER : settingsTarget) ?? ConfigurationTarget.USER_LOCAL;\n\t\tconst overrides: IConfigurationUpdateOverrides = { resource, overrideIdentifiers: languageFilter ? [languageFilter] : undefined };\n\n\t\tconst configurationTargetIsWorkspace = configurationTarget === ConfigurationTarget.WORKSPACE || configurationTarget === ConfigurationTarget.WORKSPACE_FOLDER;\n\n\t\tconst userPassedInManualReset = configurationTargetIsWorkspace || !!languageFilter;\n\t\tconst isManualReset = userPassedInManualReset ? manualReset : value === undefined;\n\n\t\t// If the user is changing the value back to the default, and we're not targeting a workspace scope, do a 'reset' instead\n\t\tconst inspected = this.configurationService.inspect(key, overrides);\n\t\tif (!userPassedInManualReset && inspected.defaultValue === value) {\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\treturn this.configurationService.updateValue(key, value, overrides, configurationTarget, { handleDirtyFile: 'save' })\n\t\t\t.then(() => {\n\t\t\t\tconst query = this.searchWidget.getValue();\n\t\t\t\tif (query.includes(`@${MODIFIED_SETTING_TAG}`)) {\n\t\t\t\t\t// The user might have reset a setting.\n\t\t\t\t\tthis.refreshTOCTree();\n\t\t\t\t}\n\t\t\t\tthis.renderTree(key, isManualReset);\n\t\t\t\tconst reportModifiedProps = {\n\t\t\t\t\tkey,\n\t\t\t\t\tquery,\n\t\t\t\t\tsearchResults: this.searchResultModel?.getUniqueResults() ?? null,\n\t\t\t\t\trawResults: this.searchResultModel?.getRawResults() ?? null,\n\t\t\t\t\tshowConfiguredOnly: !!this.viewState.tagFilters && this.viewState.tagFilters.has(MODIFIED_SETTING_TAG),\n\t\t\t\t\tisReset: typeof value === 'undefined',\n\t\t\t\t\tsettingsTarget: this.settingsTargetsWidget.settingsTarget as SettingsTarget\n\t\t\t\t};\n\n\t\t\t\tthis.pendingSettingUpdate = null;\n\t\t\t\treturn this.reportModifiedSetting(reportModifiedProps);\n\t\t\t});\n\t}\n\n\tprivate reportModifiedSetting(props: { key: string; query: string; searchResults: ISearchResult | null; rawResults: ISearchResult[] | null; showConfiguredOnly: boolean; isReset: boolean; settingsTarget: SettingsTarget }): void {\n\t\ttype SettingsEditorModifiedSettingEvent = {\n\t\t\tkey: string;\n\t\t\tgroupId: string | undefined;\n\t\t\tnlpIndex: number | undefined;\n\t\t\tdisplayIndex: number | undefined;\n\t\t\tshowConfiguredOnly: boolean;\n\t\t\tisReset: boolean;\n\t\t\ttarget: string;\n\t\t};\n\t\ttype SettingsEditorModifiedSettingClassification = {\n\t\t\tkey: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The setting that is being modified.' };\n\t\t\tgroupId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the setting is from the local search or remote search provider, if applicable.' };\n\t\t\tnlpIndex: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The index of the setting in the remote search provider results, if applicable.' };\n\t\t\tdisplayIndex: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The index of the setting in the combined search results, if applicable.' };\n\t\t\tshowConfiguredOnly: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the user is in the modified view, which shows configured settings only.' };\n\t\t\tisReset: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Identifies whether a setting was reset to its default value.' };\n\t\t\ttarget: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The scope of the setting, such as user or workspace.' };\n\t\t\towner: 'rzhao271';\n\t\t\tcomment: 'Event emitted when the user modifies a setting in the Settings editor';\n\t\t};\n\n\t\tlet groupId: string | undefined = undefined;\n\t\tlet nlpIndex: number | undefined = undefined;\n\t\tlet displayIndex: number | undefined = undefined;\n\t\tif (props.searchResults) {\n\t\t\tdisplayIndex = props.searchResults.filterMatches.findIndex(m => m.setting.key === props.key);\n\n\t\t\tif (this.searchResultModel) {\n\t\t\t\tconst rawResults = this.searchResultModel.getRawResults();\n\t\t\t\tif (rawResults[SearchResultIdx.Local] && displayIndex >= 0) {\n\t\t\t\t\tconst settingInLocalResults = rawResults[SearchResultIdx.Local].filterMatches.some(m => m.setting.key === props.key);\n\t\t\t\t\tgroupId = settingInLocalResults ? 'local' : 'remote';\n\t\t\t\t}\n\t\t\t\tif (rawResults[SearchResultIdx.Remote]) {\n\t\t\t\t\tconst _nlpIndex = rawResults[SearchResultIdx.Remote].filterMatches.findIndex(m => m.setting.key === props.key);\n\t\t\t\t\tnlpIndex = _nlpIndex >= 0 ? _nlpIndex : undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst reportedTarget = props.settingsTarget === ConfigurationTarget.USER_LOCAL ? 'user' :\n\t\t\tprops.settingsTarget === ConfigurationTarget.USER_REMOTE ? 'user_remote' :\n\t\t\t\tprops.settingsTarget === ConfigurationTarget.WORKSPACE ? 'workspace' :\n\t\t\t\t\t'folder';\n\n\t\tconst data = {\n\t\t\tkey: props.key,\n\t\t\tgroupId,\n\t\t\tnlpIndex,\n\t\t\tdisplayIndex,\n\t\t\tshowConfiguredOnly: props.showConfiguredOnly,\n\t\t\tisReset: props.isReset,\n\t\t\ttarget: reportedTarget\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<SettingsEditorModifiedSettingEvent, SettingsEditorModifiedSettingClassification>('settingsEditor.settingModified', data);\n\t}\n\n\tprivate scheduleRefresh(element: HTMLElement, key = ''): void {\n\t\tif (key && this.scheduledRefreshes.has(key)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!key) {\n\t\t\tdispose(this.scheduledRefreshes.values());\n\t\t\tthis.scheduledRefreshes.clear();\n\t\t}\n\n\t\tconst scheduledRefreshTracker = DOM.trackFocus(element);\n\t\tthis.scheduledRefreshes.set(key, scheduledRefreshTracker);\n\t\tscheduledRefreshTracker.onDidBlur(() => {\n\t\t\tscheduledRefreshTracker.dispose();\n\t\t\tthis.scheduledRefreshes.delete(key);\n\t\t\tthis.onConfigUpdate(new Set([key]));\n\t\t});\n\t}\n\n\tprivate createSettingsOrderByTocIndex(resolvedSettingsRoot: ITOCEntry<ISetting>): Map<string, number> {\n\t\tconst index = new Map<string, number>();\n\t\tfunction indexSettings(resolvedSettingsRoot: ITOCEntry<ISetting>, counter = 0): number {\n\t\t\tif (resolvedSettingsRoot.settings) {\n\t\t\t\tfor (const setting of resolvedSettingsRoot.settings) {\n\t\t\t\t\tif (!index.has(setting.key)) {\n\t\t\t\t\t\tindex.set(setting.key, counter++);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (resolvedSettingsRoot.children) {\n\t\t\t\tfor (const child of resolvedSettingsRoot.children) {\n\t\t\t\t\tcounter = indexSettings(child, counter);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\t\tindexSettings(resolvedSettingsRoot);\n\t\treturn index;\n\t}\n\n\tprivate refreshModels(resolvedSettingsRoot: ITOCEntry<ISetting>) {\n\t\tthis.settingsTreeModel.update(resolvedSettingsRoot);\n\t\tthis.tocTreeModel.settingsTreeRoot = this.settingsTreeModel.root;\n\t\tthis.settingsOrderByTocIndex = this.createSettingsOrderByTocIndex(resolvedSettingsRoot);\n\t}\n\n\tprivate async onConfigUpdate(keys?: ReadonlySet<string>, forceRefresh = false, schemaChange = false): Promise<void> {\n\t\tif (keys && this.settingsTreeModel) {\n\t\t\treturn this.updateElementsByKey(keys);\n\t\t}\n\n\t\tif (!this.defaultSettingsEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst groups = this.defaultSettingsEditorModel.settingsGroups.slice(1); // Without commonlyUsed\n\n\t\tconst coreSettings = groups.filter(g => !g.extensionInfo);\n\t\tconst settingsResult = resolveSettingsTree(tocData, coreSettings, this.logService);\n\t\tconst resolvedSettingsRoot = settingsResult.tree;\n\n\t\t// Warn for settings not included in layout\n\t\tif (settingsResult.leftoverSettings.size && !this.hasWarnedMissingSettings) {\n\t\t\tconst settingKeyList: string[] = [];\n\t\t\tsettingsResult.leftoverSettings.forEach(s => {\n\t\t\t\tsettingKeyList.push(s.key);\n\t\t\t});\n\n\t\t\tthis.logService.warn(`SettingsEditor2: Settings not included in settingsLayout.ts: ${settingKeyList.join(', ')}`);\n\t\t\tthis.hasWarnedMissingSettings = true;\n\t\t}\n\n\t\tconst additionalGroups: ISettingsGroup[] = [];\n\t\tlet setAdditionalGroups = false;\n\t\tconst toggleData = await getExperimentalExtensionToggleData(this.extensionGalleryService, this.productService);\n\t\tif (toggleData && groups.filter(g => g.extensionInfo).length) {\n\t\t\tfor (const key in toggleData.settingsEditorRecommendedExtensions) {\n\t\t\t\tconst extension: IGalleryExtension = toggleData.recommendedExtensionsGalleryInfo[key];\n\t\t\t\tif (!extension) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst extensionId = extension.identifier.id;\n\t\t\t\tconst extensionInstalled = this.installedExtensionIds.includes(extensionId);\n\n\t\t\t\t// Drill down to see whether the group and setting already exist\n\t\t\t\t// and need to be removed.\n\t\t\t\tconst matchingGroupIndex = groups.findIndex(g =>\n\t\t\t\t\tg.extensionInfo && g.extensionInfo!.id.toLowerCase() === extensionId.toLowerCase() &&\n\t\t\t\t\tg.sections.length === 1 && g.sections[0].settings.length === 1 && g.sections[0].settings[0].displayExtensionId\n\t\t\t\t);\n\t\t\t\tif (extensionInstalled || this.dismissedExtensionSettings.includes(extensionId)) {\n\t\t\t\t\tif (matchingGroupIndex !== -1) {\n\t\t\t\t\t\tgroups.splice(matchingGroupIndex, 1);\n\t\t\t\t\t\tsetAdditionalGroups = true;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (matchingGroupIndex !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create the entry. extensionInstalled is false in this case.\n\t\t\t\tlet manifest: IExtensionManifest | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tmanifest = await this.extensionGalleryService.getManifest(extension, CancellationToken.None);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Likely a networking issue.\n\t\t\t\t\t// Skip adding a button for this extension to the Settings editor.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst contributesConfiguration = manifest?.contributes?.configuration;\n\n\t\t\t\tlet groupTitle: string | undefined;\n\t\t\t\tif (!Array.isArray(contributesConfiguration)) {\n\t\t\t\t\tgroupTitle = contributesConfiguration?.title;\n\t\t\t\t} else if (contributesConfiguration.length === 1) {\n\t\t\t\t\tgroupTitle = contributesConfiguration[0].title;\n\t\t\t\t}\n\n\t\t\t\tconst recommendationInfo = toggleData.settingsEditorRecommendedExtensions[key];\n\t\t\t\tconst extensionName = extension.displayName ?? extension.name ?? extensionId;\n\t\t\t\tconst settingKey = `${key}.manageExtension`;\n\t\t\t\tconst setting: ISetting = {\n\t\t\t\t\trange: nullRange,\n\t\t\t\t\tkey: settingKey,\n\t\t\t\t\tkeyRange: nullRange,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\tdescription: [recommendationInfo.onSettingsEditorOpen?.descriptionOverride ?? extension.description],\n\t\t\t\t\tdescriptionIsMarkdown: false,\n\t\t\t\t\tdescriptionRanges: [],\n\t\t\t\t\tscope: ConfigurationScope.WINDOW,\n\t\t\t\t\ttype: 'null',\n\t\t\t\t\tdisplayExtensionId: extensionId,\n\t\t\t\t\textensionGroupTitle: groupTitle ?? extensionName,\n\t\t\t\t\tcategoryLabel: 'Extensions',\n\t\t\t\t\ttitle: extensionName\n\t\t\t\t};\n\t\t\t\tconst additionalGroup: ISettingsGroup = {\n\t\t\t\t\tsections: [{\n\t\t\t\t\t\tsettings: [setting],\n\t\t\t\t\t}],\n\t\t\t\t\tid: extensionId,\n\t\t\t\t\ttitle: setting.extensionGroupTitle!,\n\t\t\t\t\ttitleRange: nullRange,\n\t\t\t\t\trange: nullRange,\n\t\t\t\t\textensionInfo: {\n\t\t\t\t\t\tid: extensionId,\n\t\t\t\t\t\tdisplayName: extension.displayName,\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tgroups.push(additionalGroup);\n\t\t\t\tadditionalGroups.push(additionalGroup);\n\t\t\t\tsetAdditionalGroups = true;\n\t\t\t}\n\t\t}\n\n\t\tresolvedSettingsRoot.children!.push(await createTocTreeForExtensionSettings(this.extensionService, groups.filter(g => g.extensionInfo)));\n\n\t\tconst commonlyUsedDataToUse = getCommonlyUsedData(toggleData);\n\t\tconst commonlyUsed = resolveSettingsTree(commonlyUsedDataToUse, groups, this.logService);\n\t\tresolvedSettingsRoot.children!.unshift(commonlyUsed.tree);\n\n\t\tif (toggleData && setAdditionalGroups) {\n\t\t\t// Add the additional groups to the model to help with searching.\n\t\t\tthis.defaultSettingsEditorModel.setAdditionalGroups(additionalGroups);\n\t\t}\n\n\t\tif (!this.workspaceTrustManagementService.isWorkspaceTrusted() && (this.viewState.settingsTarget instanceof URI || this.viewState.settingsTarget === ConfigurationTarget.WORKSPACE)) {\n\t\t\tconst configuredUntrustedWorkspaceSettings = resolveConfiguredUntrustedSettings(groups, this.viewState.settingsTarget, this.viewState.languageFilter, this.configurationService);\n\t\t\tif (configuredUntrustedWorkspaceSettings.length) {\n\t\t\t\tresolvedSettingsRoot.children!.unshift({\n\t\t\t\t\tid: 'workspaceTrust',\n\t\t\t\t\tlabel: localize('settings require trust', \"Workspace Trust\"),\n\t\t\t\t\tsettings: configuredUntrustedWorkspaceSettings\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.searchResultModel?.updateChildren();\n\n\t\tif (this.settingsTreeModel) {\n\t\t\tthis.refreshModels(resolvedSettingsRoot);\n\n\t\t\tif (schemaChange && !!this.searchResultModel) {\n\t\t\t\t// If an extension's settings were just loaded and a search is active, retrigger the search so it shows up\n\t\t\t\treturn await this.onSearchInputChanged();\n\t\t\t}\n\n\t\t\tthis.refreshTOCTree();\n\t\t\tthis.renderTree(undefined, forceRefresh);\n\t\t} else {\n\t\t\tthis.settingsTreeModel = this.instantiationService.createInstance(SettingsTreeModel, this.viewState, this.workspaceTrustManagementService.isWorkspaceTrusted());\n\t\t\tthis.refreshModels(resolvedSettingsRoot);\n\n\t\t\t// Don't restore the cached state if we already have a query value from calling _setOptions().\n\t\t\tconst cachedState = !this.viewState.query ? this.restoreCachedState() : undefined;\n\t\t\tif (cachedState?.searchQuery || this.searchWidget.getValue()) {\n\t\t\t\tawait this.onSearchInputChanged();\n\t\t\t} else {\n\t\t\t\tthis.refreshTOCTree();\n\t\t\t\tthis.refreshTree();\n\t\t\t\tthis.tocTree.collapseAll();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateElementsByKey(keys: ReadonlySet<string>): void {\n\t\tif (keys.size) {\n\t\t\tif (this.searchResultModel) {\n\t\t\t\tkeys.forEach(key => this.searchResultModel!.updateElementsByName(key));\n\t\t\t}\n\n\t\t\tif (this.settingsTreeModel) {\n\t\t\t\tkeys.forEach(key => this.settingsTreeModel.updateElementsByName(key));\n\t\t\t}\n\n\t\t\tkeys.forEach(key => this.renderTree(key));\n\t\t} else {\n\t\t\tthis.renderTree();\n\t\t}\n\t}\n\n\tprivate getActiveControlInSettingsTree(): HTMLElement | null {\n\t\tconst element = this.settingsTree.getHTMLElement();\n\t\tconst activeElement = element.ownerDocument.activeElement;\n\t\treturn (activeElement && DOM.isAncestorOfActiveElement(element)) ?\n\t\t\t<HTMLElement>activeElement :\n\t\t\tnull;\n\t}\n\n\tprivate renderTree(key?: string, force = false): void {\n\t\tif (!force && key && this.scheduledRefreshes.has(key)) {\n\t\t\tthis.updateModifiedLabelForKey(key);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the context view is focused, delay rendering settings\n\t\tif (this.contextViewFocused()) {\n\t\t\tconst element = this.window.document.querySelector('.context-view');\n\t\t\tif (element) {\n\t\t\t\tthis.scheduleRefresh(element as HTMLElement, key);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If a setting control is currently focused, schedule a refresh for later\n\t\tconst activeElement = this.getActiveControlInSettingsTree();\n\t\tconst focusedSetting = activeElement && this.settingRenderers.getSettingDOMElementForDOMElement(activeElement);\n\t\tif (focusedSetting && !force) {\n\t\t\t// If a single setting is being refreshed, it's ok to refresh now if that is not the focused setting\n\t\t\tif (key) {\n\t\t\t\tconst focusedKey = focusedSetting.getAttribute(AbstractSettingRenderer.SETTING_KEY_ATTR);\n\t\t\t\tif (focusedKey === key &&\n\t\t\t\t\t// update `list`s live, as they have a separate \"submit edit\" step built in before this\n\t\t\t\t\t(focusedSetting.parentElement && !focusedSetting.parentElement.classList.contains('setting-item-list'))\n\t\t\t\t) {\n\t\t\t\t\tthis.updateModifiedLabelForKey(key);\n\t\t\t\t\tthis.scheduleRefresh(focusedSetting, key);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.scheduleRefresh(focusedSetting);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.renderResultCountMessages();\n\n\t\tif (key) {\n\t\t\tconst elements = this.currentSettingsModel.getElementsByName(key);\n\t\t\tif (elements && elements.length) {\n\t\t\t\tif (elements.length >= 2) {\n\t\t\t\t\tconsole.warn('More than one setting with key ' + key + ' found');\n\t\t\t\t}\n\t\t\t\tthis.refreshSingleElement(elements[0]);\n\t\t\t} else {\n\t\t\t\t// Refresh requested for a key that we don't know about\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.refreshTree();\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate contextViewFocused(): boolean {\n\t\treturn !!DOM.findParentWithClass(<HTMLElement>this.rootElement.ownerDocument.activeElement, 'context-view');\n\t}\n\n\tprivate refreshSingleElement(element: SettingsTreeSettingElement): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.settingsTree.rerender(element);\n\t\t}\n\t}\n\n\tprivate refreshTree(): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.settingsTree.setChildren(null, createGroupIterator(this.currentSettingsModel.root));\n\t\t}\n\t}\n\n\tprivate refreshTOCTree(): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.tocTreeModel.update();\n\t\t\tthis.tocTree.setChildren(null, createTOCIterator(this.tocTreeModel, this.tocTree));\n\t\t}\n\t}\n\n\tprivate updateModifiedLabelForKey(key: string): void {\n\t\tconst dataElements = this.currentSettingsModel.getElementsByName(key);\n\t\tconst isModified = dataElements && dataElements[0] && dataElements[0].isConfigured; // all elements are either configured or not\n\t\tconst elements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), key);\n\t\tif (elements && elements[0]) {\n\t\t\telements[0].classList.toggle('is-configured', !!isModified);\n\t\t}\n\t}\n\n\tprivate async onSearchInputChanged(): Promise<void> {\n\t\tif (!this.currentSettingsModel) {\n\t\t\t// Initializing search widget value\n\t\t\treturn;\n\t\t}\n\n\t\tconst query = this.searchWidget.getValue().trim();\n\t\tthis.viewState.query = query;\n\t\tthis.delayedFilterLogging.cancel();\n\t\tawait this.triggerSearch(query.replace(/\\u203A/g, ' '));\n\n\t\tif (query && this.searchResultModel) {\n\t\t\tthis.delayedFilterLogging.trigger(() => this.reportFilteringUsed(this.searchResultModel));\n\t\t}\n\t}\n\n\tprivate parseSettingFromJSON(query: string): string | null {\n\t\tconst match = query.match(/\"([a-zA-Z.]+)\": /);\n\t\treturn match && match[1];\n\t}\n\n\t/**\n\t * Toggles the visibility of the Settings editor table of contents during a search\n\t * depending on the behavior.\n\t */\n\tprivate toggleTocBySearchBehaviorType() {\n\t\tconst tocBehavior = this.configurationService.getValue<'filter' | 'hide'>(SEARCH_TOC_BEHAVIOR_KEY);\n\t\tconst hideToc = tocBehavior === 'hide';\n\t\tif (hideToc) {\n\t\t\tthis.splitView.setViewVisible(0, false);\n\t\t\tthis.splitView.style({\n\t\t\t\tseparatorBorder: Color.transparent\n\t\t\t});\n\t\t} else {\n\t\t\tthis.splitView.setViewVisible(0, true);\n\t\t\tthis.splitView.style({\n\t\t\t\tseparatorBorder: this.theme.getColor(settingsSashBorder)!\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async triggerSearch(query: string): Promise<void> {\n\t\tconst progressRunner = this.editorProgressService.show(true);\n\t\tthis.viewState.tagFilters = new Set<string>();\n\t\tthis.viewState.extensionFilters = new Set<string>();\n\t\tthis.viewState.featureFilters = new Set<string>();\n\t\tthis.viewState.idFilters = new Set<string>();\n\t\tthis.viewState.languageFilter = undefined;\n\t\tif (query) {\n\t\t\tconst parsedQuery = parseQuery(query);\n\t\t\tquery = parsedQuery.query;\n\t\t\tparsedQuery.tags.forEach(tag => this.viewState.tagFilters!.add(tag));\n\t\t\tparsedQuery.extensionFilters.forEach(extensionId => this.viewState.extensionFilters!.add(extensionId));\n\t\t\tparsedQuery.featureFilters.forEach(feature => this.viewState.featureFilters!.add(feature));\n\t\t\tparsedQuery.idFilters.forEach(id => this.viewState.idFilters!.add(id));\n\t\t\tthis.viewState.languageFilter = parsedQuery.languageFilter;\n\t\t}\n\n\t\tthis.settingsTargetsWidget.updateLanguageFilterIndicators(this.viewState.languageFilter);\n\n\t\tif (query && query !== '@') {\n\t\t\tquery = this.parseSettingFromJSON(query) || query;\n\t\t\tawait this.triggerFilterPreferences(query);\n\t\t\tthis.toggleTocBySearchBehaviorType();\n\t\t} else {\n\t\t\tif (this.viewState.tagFilters.size || this.viewState.extensionFilters.size || this.viewState.featureFilters.size || this.viewState.idFilters.size || this.viewState.languageFilter) {\n\t\t\t\tthis.searchResultModel = this.createFilterModel();\n\t\t\t} else {\n\t\t\t\tthis.searchResultModel = null;\n\t\t\t}\n\n\t\t\tthis.searchDelayer.cancel();\n\t\t\tif (this.searchInProgress) {\n\t\t\t\tthis.searchInProgress.cancel();\n\t\t\t\tthis.searchInProgress.dispose();\n\t\t\t\tthis.searchInProgress = null;\n\t\t\t}\n\n\t\t\tthis.tocTree.setFocus([]);\n\t\t\tthis.viewState.filterToCategory = undefined;\n\t\t\tthis.tocTreeModel.currentSearchModel = this.searchResultModel;\n\n\t\t\tif (this.searchResultModel) {\n\t\t\t\t// Added a filter model\n\t\t\t\tthis.tocTree.setSelection([]);\n\t\t\t\tthis.tocTree.expandAll();\n\t\t\t\tthis.refreshTOCTree();\n\t\t\t\tthis.renderResultCountMessages();\n\t\t\t\tthis.refreshTree();\n\t\t\t\tthis.toggleTocBySearchBehaviorType();\n\t\t\t} else if (!this.tocTreeDisposed) {\n\t\t\t\t// Leaving search mode\n\t\t\t\tthis.tocTree.collapseAll();\n\t\t\t\tthis.refreshTOCTree();\n\t\t\t\tthis.renderResultCountMessages();\n\t\t\t\tthis.refreshTree();\n\t\t\t\t// Always show the ToC when leaving search mode\n\t\t\t\tthis.splitView.setViewVisible(0, true);\n\t\t\t}\n\t\t}\n\t\tprogressRunner.done();\n\t}\n\n\t/**\n\t * Return a fake SearchResultModel which can hold a flat list of all settings, to be filtered (@modified etc)\n\t */\n\tprivate createFilterModel(): SearchResultModel {\n\t\tconst filterModel = this.instantiationService.createInstance(SearchResultModel, this.viewState, this.settingsOrderByTocIndex, this.workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\tconst fullResult: ISearchResult = {\n\t\t\tfilterMatches: []\n\t\t};\n\t\tfor (const g of this.defaultSettingsEditorModel.settingsGroups.slice(1)) {\n\t\t\tfor (const sect of g.sections) {\n\t\t\t\tfor (const setting of sect.settings) {\n\t\t\t\t\tfullResult.filterMatches.push({ setting, matches: [], matchType: SettingMatchType.None, score: 0 });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfilterModel.setResult(0, fullResult);\n\t\treturn filterModel;\n\t}\n\n\tprivate reportFilteringUsed(searchResultModel: SearchResultModel | null): void {\n\t\tif (!searchResultModel) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype SettingsEditorFilterEvent = {\n\t\t\t'counts.nlpResult': number | undefined;\n\t\t\t'counts.filterResult': number | undefined;\n\t\t\t'counts.uniqueResultsCount': number | undefined;\n\t\t};\n\t\ttype SettingsEditorFilterClassification = {\n\t\t\t'counts.nlpResult': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; 'comment': 'The number of matches found by the remote search provider, if applicable.' };\n\t\t\t'counts.filterResult': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; 'comment': 'The number of matches found by the local search provider, if applicable.' };\n\t\t\t'counts.uniqueResultsCount': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; 'comment': 'The number of unique matches over both search providers, if applicable.' };\n\t\t\towner: 'rzhao271';\n\t\t\tcomment: 'Tracks the performance of the built-in search providers';\n\t\t};\n\t\t// Count unique results\n\t\tconst counts: { nlpResult?: number; filterResult?: number } = {};\n\t\tconst rawResults = searchResultModel.getRawResults();\n\t\tconst filterResult = rawResults[SearchResultIdx.Local];\n\t\tif (filterResult) {\n\t\t\tcounts['filterResult'] = filterResult.filterMatches.length;\n\t\t}\n\t\tconst nlpResult = rawResults[SearchResultIdx.Remote];\n\t\tif (nlpResult) {\n\t\t\tcounts['nlpResult'] = nlpResult.filterMatches.length;\n\t\t}\n\n\t\tconst uniqueResults = searchResultModel.getUniqueResults();\n\t\tconst data = {\n\t\t\t'counts.nlpResult': counts['nlpResult'],\n\t\t\t'counts.filterResult': counts['filterResult'],\n\t\t\t'counts.uniqueResultsCount': uniqueResults?.filterMatches.length\n\t\t};\n\t\tthis.telemetryService.publicLog2<SettingsEditorFilterEvent, SettingsEditorFilterClassification>('settingsEditor.filter', data);\n\t}\n\n\tprivate async triggerFilterPreferences(query: string): Promise<void> {\n\t\tif (this.searchInProgress) {\n\t\t\tthis.searchInProgress.cancel();\n\t\t\tthis.searchInProgress = null;\n\t\t}\n\n\t\t// Trigger the local search. If it didn't find an exact match, trigger the remote search.\n\t\tconst searchInProgress = this.searchInProgress = new CancellationTokenSource();\n\t\treturn this.searchDelayer.trigger(async () => {\n\t\t\tif (!searchInProgress.token.isCancellationRequested) {\n\t\t\t\tconst localResults = await this.localFilterPreferences(query, searchInProgress.token);\n\t\t\t\tif (localResults && !localResults.exactMatch && !searchInProgress.token.isCancellationRequested) {\n\t\t\t\t\tawait this.remoteSearchPreferences(query, searchInProgress.token);\n\t\t\t\t}\n\n\t\t\t\t// Update UI only after all the search results are in\n\t\t\t\t// ref https://github.com/microsoft/vscode/issues/224946\n\t\t\t\tthis.onDidFinishSearch();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate onDidFinishSearch() {\n\t\tthis.tocTreeModel.currentSearchModel = this.searchResultModel;\n\t\tthis.tocTreeModel.update();\n\t\tthis.tocTree.setFocus([]);\n\t\tthis.viewState.filterToCategory = undefined;\n\t\tthis.tocTree.expandAll();\n\t\tthis.settingsTree.scrollTop = 0;\n\t\tthis.refreshTOCTree();\n\t\tthis.renderTree(undefined, true);\n\t}\n\n\tprivate localFilterPreferences(query: string, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tconst localSearchProvider = this.preferencesSearchService.getLocalSearchProvider(query);\n\t\treturn this.filterOrSearchPreferences(query, SearchResultIdx.Local, localSearchProvider, token);\n\t}\n\n\tprivate remoteSearchPreferences(query: string, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tconst remoteSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query);\n\t\treturn this.filterOrSearchPreferences(query, SearchResultIdx.Remote, remoteSearchProvider, token);\n\t}\n\n\tprivate async filterOrSearchPreferences(query: string, type: SearchResultIdx, searchProvider?: ISearchProvider, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tconst result = await this._filterOrSearchPreferencesModel(query, this.defaultSettingsEditorModel, searchProvider, token);\n\t\tif (token?.isCancellationRequested) {\n\t\t\t// Handle cancellation like this because cancellation is lost inside the search provider due to async/await\n\t\t\treturn null;\n\t\t}\n\t\tthis.searchResultModel ??= this.instantiationService.createInstance(SearchResultModel, this.viewState, this.settingsOrderByTocIndex, this.workspaceTrustManagementService.isWorkspaceTrusted());\n\t\tthis.searchResultModel.setResult(type, result);\n\t\treturn result;\n\t}\n\n\tprivate renderResultCountMessages() {\n\t\tif (!this.currentSettingsModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.clearFilterLinkContainer.style.display = this.viewState.tagFilters && this.viewState.tagFilters.size > 0\n\t\t\t? 'initial'\n\t\t\t: 'none';\n\n\t\tif (!this.searchResultModel) {\n\t\t\tif (this.countElement.style.display !== 'none') {\n\t\t\t\tthis.searchResultLabel = null;\n\t\t\t\tthis.updateInputAriaLabel();\n\t\t\t\tthis.countElement.style.display = 'none';\n\t\t\t\tthis.countElement.innerText = '';\n\t\t\t\tthis.layout(this.dimension);\n\t\t\t}\n\n\t\t\tthis.rootElement.classList.remove('no-results');\n\t\t\tthis.splitView.el.style.visibility = 'visible';\n\t\t\treturn;\n\t\t} else {\n\t\t\tconst count = this.searchResultModel.getUniqueResultsCount();\n\t\t\tlet resultString: string;\n\t\t\tswitch (count) {\n\t\t\t\tcase 0: resultString = localize('noResults', \"No Settings Found\"); break;\n\t\t\t\tcase 1: resultString = localize('oneResult', \"1 Setting Found\"); break;\n\t\t\t\tdefault: resultString = localize('moreThanOneResult', \"{0} Settings Found\", count);\n\t\t\t}\n\n\t\t\tthis.searchResultLabel = resultString;\n\t\t\tthis.updateInputAriaLabel();\n\t\t\tthis.countElement.innerText = resultString;\n\t\t\taria.status(resultString);\n\n\t\t\tif (this.countElement.style.display !== 'block') {\n\t\t\t\tthis.countElement.style.display = 'block';\n\t\t\t\tthis.layout(this.dimension);\n\t\t\t}\n\t\t\tthis.rootElement.classList.toggle('no-results', count === 0);\n\t\t\tthis.splitView.el.style.visibility = count === 0 ? 'hidden' : 'visible';\n\t\t}\n\t}\n\n\tprivate _filterOrSearchPreferencesModel(filter: string, model: ISettingsEditorModel, provider?: ISearchProvider, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tconst searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);\n\t\treturn searchP\n\t\t\t.then<ISearchResult, ISearchResult | null>(undefined, err => {\n\t\t\t\tif (isCancellationError(err)) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t} else {\n\t\t\t\t\t// type SettingsSearchErrorEvent = {\n\t\t\t\t\t// \t'message': string;\n\t\t\t\t\t// };\n\t\t\t\t\t// type SettingsSearchErrorClassification = {\n\t\t\t\t\t// \towner: 'rzhao271';\n\t\t\t\t\t// \tcomment: 'Helps understand when settings search errors out';\n\t\t\t\t\t// \t'message': { 'classification': 'CallstackOrException'; 'purpose': 'FeatureInsight'; 'owner': 'rzhao271'; 'comment': 'The error message of the search error.' };\n\t\t\t\t\t// };\n\n\t\t\t\t\t// const message = getErrorMessage(err).trim();\n\t\t\t\t\t// if (message && message !== 'Error') {\n\t\t\t\t\t// \t// \"Error\" = any generic network error\n\t\t\t\t\t// \tthis.telemetryService.publicLogError2<SettingsSearchErrorEvent, SettingsSearchErrorClassification>('settingsEditor.searchError', { message });\n\t\t\t\t\t// \tthis.logService.info('Setting search error: ' + message);\n\t\t\t\t\t// }\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate layoutSplitView(dimension: DOM.Dimension): void {\n\t\tconst listHeight = dimension.height - (72 + 11 + 14 /* header height + editor padding */);\n\n\t\tthis.splitView.el.style.height = `${listHeight}px`;\n\n\t\t// We call layout first so the splitView has an idea of how much\n\t\t// space it has, otherwise setViewVisible results in the first panel\n\t\t// showing up at the minimum size whenever the Settings editor\n\t\t// opens for the first time.\n\t\tthis.splitView.layout(this.bodyContainer.clientWidth, listHeight);\n\n\t\tconst tocBehavior = this.configurationService.getValue<'filter' | 'hide'>(SEARCH_TOC_BEHAVIOR_KEY);\n\t\tconst hideTocForSearch = tocBehavior === 'hide' && this.searchResultModel;\n\t\tif (!hideTocForSearch) {\n\t\t\tconst firstViewWasVisible = this.splitView.isViewVisible(0);\n\t\t\tconst firstViewVisible = this.bodyContainer.clientWidth >= SettingsEditor2.NARROW_TOTAL_WIDTH;\n\n\t\t\tthis.splitView.setViewVisible(0, firstViewVisible);\n\t\t\t// If the first view is again visible, and we have enough space, immediately set the\n\t\t\t// editor to use the reset width rather than the cached min width\n\t\t\tif (!firstViewWasVisible && firstViewVisible && this.bodyContainer.clientWidth >= SettingsEditor2.EDITOR_MIN_WIDTH + SettingsEditor2.TOC_RESET_WIDTH) {\n\t\t\t\tthis.splitView.resizeView(0, SettingsEditor2.TOC_RESET_WIDTH);\n\t\t\t}\n\t\t\tthis.splitView.style({\n\t\t\t\tseparatorBorder: firstViewVisible ? this.theme.getColor(settingsSashBorder)! : Color.transparent\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected override saveState(): void {\n\t\tif (this.isVisible()) {\n\t\t\tconst searchQuery = this.searchWidget.getValue().trim();\n\t\t\tconst target = this.settingsTargetsWidget.settingsTarget as SettingsTarget;\n\t\t\tif (this.input) {\n\t\t\t\tthis.editorMemento.saveEditorState(this.group, this.input, { searchQuery, target });\n\t\t\t}\n\t\t} else if (this.input) {\n\t\t\tthis.editorMemento.clearEditorState(this.input, this.group);\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n}\n\nclass SyncControls extends Disposable {\n\tprivate readonly lastSyncedLabel!: HTMLElement;\n\tprivate readonly turnOnSyncButton!: Button;\n\n\tprivate readonly _onDidChangeLastSyncedLabel = this._register(new Emitter<string>());\n\tpublic readonly onDidChangeLastSyncedLabel = this._onDidChangeLastSyncedLabel.event;\n\n\tconstructor(\n\t\twindow: CodeWindow,\n\t\tcontainer: HTMLElement,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IUserDataSyncService private readonly userDataSyncService: IUserDataSyncService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tconst headerRightControlsContainer = DOM.append(container, $('.settings-right-controls'));\n\t\tconst turnOnSyncButtonContainer = DOM.append(headerRightControlsContainer, $('.turn-on-sync'));\n\t\tthis.turnOnSyncButton = this._register(new Button(turnOnSyncButtonContainer, { title: true, ...defaultButtonStyles }));\n\t\tthis.lastSyncedLabel = DOM.append(headerRightControlsContainer, $('.last-synced-label'));\n\t\tDOM.hide(this.lastSyncedLabel);\n\n\t\tthis.turnOnSyncButton.enabled = true;\n\t\tthis.turnOnSyncButton.label = localize('turnOnSyncButton', \"Backup and Sync Settings\");\n\t\tDOM.hide(this.turnOnSyncButton.element);\n\n\t\tthis._register(this.turnOnSyncButton.onDidClick(async () => {\n\t\t\ttelemetryService.publicLog2<{}, {\n\t\t\t\towner: 'sandy081';\n\t\t\t\tcomment: 'This event tracks whenever settings sync is turned on from settings editor.';\n\t\t\t}>('sync/turnOnSyncFromSettings');\n\t\t\tawait this.commandService.executeCommand('workbench.userDataSync.actions.turnOn');\n\t\t}));\n\n\t\tthis.updateLastSyncedTime();\n\t\tthis._register(this.userDataSyncService.onDidChangeLastSyncTime(() => {\n\t\t\tthis.updateLastSyncedTime();\n\t\t}));\n\n\t\tconst updateLastSyncedTimer = this._register(new DOM.WindowIntervalTimer());\n\t\tupdateLastSyncedTimer.cancelAndSet(() => this.updateLastSyncedTime(), 60 * 1000, window);\n\n\t\tthis.update();\n\t\tthis._register(this.userDataSyncService.onDidChangeStatus(() => {\n\t\t\tthis.update();\n\t\t}));\n\n\t\tthis._register(this.userDataSyncEnablementService.onDidChangeEnablement(() => {\n\t\t\tthis.update();\n\t\t}));\n\t}\n\n\tprivate updateLastSyncedTime(): void {\n\t\tconst last = this.userDataSyncService.lastSyncTime;\n\t\tlet label: string;\n\t\tif (typeof last === 'number') {\n\t\t\tconst d = fromNow(last, true, undefined, true);\n\t\t\tlabel = localize('lastSyncedLabel', \"Last synced: {0}\", d);\n\t\t} else {\n\t\t\tlabel = '';\n\t\t}\n\n\t\tthis.lastSyncedLabel.textContent = label;\n\t\tthis._onDidChangeLastSyncedLabel.fire(label);\n\t}\n\n\tprivate update(): void {\n\t\tif (this.userDataSyncService.status === SyncStatus.Uninitialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.userDataSyncEnablementService.isEnabled() || this.userDataSyncService.status !== SyncStatus.Idle) {\n\t\t\tDOM.show(this.lastSyncedLabel);\n\t\t\tDOM.hide(this.turnOnSyncButton.element);\n\t\t} else {\n\t\t\tDOM.hide(this.lastSyncedLabel);\n\t\t\tDOM.show(this.turnOnSyncButton.element);\n\t\t}\n\t}\n}\n\ninterface ISettingsEditor2State {\n\tsearchQuery: string;\n\ttarget: SettingsTarget;\n}\n"],
  "mappings": "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",
  "names": ["SettingsFocusContext", "resolvedSettingsRoot"]
}
