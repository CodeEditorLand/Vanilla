var b=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var S=(i,e,r,t)=>{for(var n=t>1?void 0:t?y(e,r):e,o=i.length-1,s;o>=0;o--)(s=i[o])&&(n=(t?s(e,r,n):s(n))||n);return t&&n&&b(e,r,n),n},c=(i,e)=>(r,t)=>e(r,t,i);import*as u from"../../../../base/browser/dom.js";import{getDefaultHoverDelegate as C}from"../../../../base/browser/ui/hover/hoverDelegateFactory.js";import"../../../../base/browser/ui/list/list.js";import{DefaultStyleController as G}from"../../../../base/browser/ui/list/listWidget.js";import{RenderIndentGuides as _}from"../../../../base/browser/ui/tree/abstractTree.js";import"../../../../base/browser/ui/tree/tree.js";import{Iterable as F}from"../../../../base/common/iterator.js";import{DisposableStore as R}from"../../../../base/common/lifecycle.js";import{localize as T}from"../../../../nls.js";import{IConfigurationService as A}from"../../../../platform/configuration/common/configuration.js";import{IContextKeyService as k}from"../../../../platform/contextkey/common/contextkey.js";import{IHoverService as w}from"../../../../platform/hover/browser/hover.js";import{IInstantiationService as D}from"../../../../platform/instantiation/common/instantiation.js";import{IListService as L,WorkbenchObjectTree as M}from"../../../../platform/list/browser/listService.js";import{getListStyles as O}from"../../../../platform/theme/browser/defaultStyles.js";import{editorBackground as l,focusBorder as H}from"../../../../platform/theme/common/colorRegistry.js";import{SettingsTreeFilter as x}from"./settingsTree.js";import{SettingsTreeGroupElement as a,SettingsTreeSettingElement as B}from"./settingsTreeModels.js";import{settingsHeaderForeground as f,settingsHeaderHoverForeground as h}from"../common/settingsEditorColorRegistry.js";import{IWorkbenchEnvironmentService as P}from"../../../services/environment/common/environmentService.js";const v=u.$;let m=class{constructor(e,r){this._viewState=e;this.environmentService=r}_currentSearchModel=null;_settingsTreeRoot;get settingsTreeRoot(){return this._settingsTreeRoot}set settingsTreeRoot(e){this._settingsTreeRoot=e,this.update()}get currentSearchModel(){return this._currentSearchModel}set currentSearchModel(e){this._currentSearchModel=e,this.update()}get children(){return this._settingsTreeRoot.children}update(){this._settingsTreeRoot&&this.updateGroupCount(this._settingsTreeRoot)}updateGroupCount(e){e.children.forEach(t=>{t instanceof a&&this.updateGroupCount(t)});const r=e.children.filter(t=>t instanceof a).reduce((t,n)=>t+n.count,0);e.count=r+this.getGroupCount(e)}getGroupCount(e){return e.children.filter(r=>{if(!(r instanceof B)||this._currentSearchModel&&!this._currentSearchModel.root.containsSetting(r.setting.key))return!1;const t=!!this.environmentService.remoteAuthority;return r.matchesScope(this._viewState.settingsTarget,t)&&r.matchesAllTags(this._viewState.tagFilters)&&r.matchesAnyFeature(this._viewState.featureFilters)&&r.matchesAnyExtension(this._viewState.extensionFilters)&&r.matchesAnyId(this._viewState.idFilters)}).length}};m=S([c(1,P)],m);const E="settings.toc.entry";class W{constructor(e){this._hoverService=e}templateId=E;renderTemplate(e){return{labelElement:u.append(e,v(".settings-toc-entry")),countElement:u.append(e,v(".settings-toc-count")),elementDisposables:new R}}renderElement(e,r,t){t.elementDisposables.clear();const n=e.element,o=n.count,s=n.label;t.labelElement.textContent=s,t.elementDisposables.add(this._hoverService.setupManagedHover(C("mouse"),t.labelElement,s)),o?t.countElement.textContent=` (${o})`:t.countElement.textContent=""}disposeTemplate(e){e.elementDisposables.dispose()}}class V{getTemplateId(e){return E}getHeight(e){return 22}}function N(i,e){const r=i.children.filter(t=>t instanceof a);return F.map(r,t=>{const n=t.children.some(o=>o instanceof a);return{element:t,collapsed:void 0,collapsible:n,children:t instanceof a?N(t,e):void 0}})}class j{getWidgetAriaLabel(){return T({key:"settingsTOC",comment:["A label for the table of contents for the full settings list"]},"Settings Table of Contents")}getAriaLabel(e){return e&&e instanceof a?T("groupRowAriaLabel","{0}, group",e.label):""}getAriaLevel(e){let r=1;for(;e instanceof a&&e.parent;)r++,e=e.parent;return r}}let d=class extends M{constructor(e,r,t,n,o,s,p){const I={filter:p.createInstance(x,r),multipleSelectionSupport:!1,identityProvider:{getId(g){return g.id}},styleController:g=>new G(u.createStyleSheet(e),g),accessibilityProvider:p.createInstance(j),collapseByDefault:!0,horizontalScrolling:!1,hideTwistiesOfChildlessElements:!0,renderIndentGuides:_.None};super("SettingsTOC",e,new V,[new W(s)],I,p,t,n,o),this.style(O({listBackground:l,listFocusOutline:H,listActiveSelectionBackground:l,listActiveSelectionForeground:f,listFocusAndSelectionBackground:l,listFocusAndSelectionForeground:f,listFocusBackground:l,listFocusForeground:h,listHoverForeground:h,listHoverBackground:l,listInactiveSelectionBackground:l,listInactiveSelectionForeground:f,listInactiveFocusBackground:l,listInactiveFocusOutline:l,treeIndentGuidesStroke:void 0,treeInactiveIndentGuidesStroke:void 0}))}};d=S([c(2,k),c(3,L),c(4,A),c(5,w),c(6,D)],d);export{W as TOCRenderer,d as TOCTree,m as TOCTreeModel,N as createTOCIterator};
