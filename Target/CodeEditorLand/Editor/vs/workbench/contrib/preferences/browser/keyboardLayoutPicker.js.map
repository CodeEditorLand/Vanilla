{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor } from '../../../services/statusbar/browser/statusbar.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { parseKeyboardLayoutDescription, areKeyboardLayoutsEqual, getKeyboardLayoutId, IKeyboardLayoutService, IKeyboardLayoutInfo } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { KEYBOARD_LAYOUT_OPEN_PICKER } from '../common/preferences.js';\nimport { isMacintosh, isWindows } from '../../../../base/common/platform.js';\nimport { QuickPickInput, IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { IEditorPane } from '../../../common/editor.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport class KeyboardLayoutPickerContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.keyboardLayoutPicker';\n\n\tprivate readonly pickerElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tconstructor(\n\t\t@IKeyboardLayoutService private readonly keyboardLayoutService: IKeyboardLayoutService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\n\t\tconst name = nls.localize('status.workbench.keyboardLayout', \"Keyboard Layout\");\n\n\t\tconst layout = this.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\tif (layout) {\n\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\t\t\tconst text = nls.localize('keyboardLayout', \"Layout: {0}\", layoutInfo.label);\n\n\t\t\tthis.pickerElement.value = this.statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER\n\t\t\t\t},\n\t\t\t\t'status.workbench.keyboardLayout',\n\t\t\t\tStatusbarAlignment.RIGHT\n\t\t\t);\n\t\t}\n\n\t\tthis._register(this.keyboardLayoutService.onDidChangeKeyboardLayout(() => {\n\t\t\tconst layout = this.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\n\t\t\tif (this.pickerElement.value) {\n\t\t\t\tconst text = nls.localize('keyboardLayout', \"Layout: {0}\", layoutInfo.label);\n\t\t\t\tthis.pickerElement.value.update({\n\t\t\t\t\tname,\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst text = nls.localize('keyboardLayout', \"Layout: {0}\", layoutInfo.label);\n\t\t\t\tthis.pickerElement.value = this.statusbarService.addEntry(\n\t\t\t\t\t{\n\t\t\t\t\t\tname,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tariaLabel: text,\n\t\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER\n\t\t\t\t\t},\n\t\t\t\t\t'status.workbench.keyboardLayout',\n\t\t\t\t\tStatusbarAlignment.RIGHT\n\t\t\t\t);\n\t\t\t}\n\t\t}));\n\t}\n}\n\nregisterWorkbenchContribution2(KeyboardLayoutPickerContribution.ID, KeyboardLayoutPickerContribution, WorkbenchPhase.BlockStartup);\n\ninterface LayoutQuickPickItem extends IQuickPickItem {\n\tlayout: IKeyboardLayoutInfo;\n}\n\ninterface IUnknownLayout {\n\ttext?: string;\n\tlang?: string;\n\tlayout?: string;\n}\n\nconst DEFAULT_CONTENT: string = [\n\t`// ${nls.localize('displayLanguage', 'Defines the keyboard layout used in VS Code in the browser environment.')}`,\n\t`// ${nls.localize('doc', 'Open VS Code and run \"Developer: Inspect Key Mappings (JSON)\" from Command Palette.')}`,\n\t``,\n\t`// Once you have the keyboard layout info, please paste it below.`,\n\t'\\n'\n].join('\\n');\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: KEYBOARD_LAYOUT_OPEN_PICKER,\n\t\t\ttitle: nls.localize2('keyboard.chooseLayout', \"Change Keyboard Layout\"),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst keyboardLayoutService = accessor.get(IKeyboardLayoutService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst environmentService = accessor.get(IEnvironmentService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst fileService = accessor.get(IFileService);\n\n\t\tconst layouts = keyboardLayoutService.getAllKeyboardLayouts();\n\t\tconst currentLayout = keyboardLayoutService.getCurrentKeyboardLayout();\n\t\tconst layoutConfig = configurationService.getValue('keyboard.layout');\n\t\tconst isAutoDetect = layoutConfig === 'autodetect';\n\n\t\tconst picks: QuickPickInput[] = layouts.map(layout => {\n\t\t\tconst picked = !isAutoDetect && areKeyboardLayoutsEqual(currentLayout, layout);\n\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\t\t\treturn {\n\t\t\t\tlayout: layout,\n\t\t\t\tlabel: [layoutInfo.label, (layout && layout.isUserKeyboardLayout) ? '(User configured layout)' : ''].join(' '),\n\t\t\t\tid: (layout as IUnknownLayout).text || (layout as IUnknownLayout).lang || (layout as IUnknownLayout).layout,\n\t\t\t\tdescription: layoutInfo.description + (picked ? ' (Current layout)' : ''),\n\t\t\t\tpicked: !isAutoDetect && areKeyboardLayoutsEqual(currentLayout, layout)\n\t\t\t};\n\t\t}).sort((a: IQuickPickItem, b: IQuickPickItem) => {\n\t\t\treturn a.label < b.label ? -1 : (a.label > b.label ? 1 : 0);\n\t\t});\n\n\t\tif (picks.length > 0) {\n\t\t\tconst platform = isMacintosh ? 'Mac' : isWindows ? 'Win' : 'Linux';\n\t\t\tpicks.unshift({ type: 'separator', label: nls.localize('layoutPicks', \"Keyboard Layouts ({0})\", platform) });\n\t\t}\n\n\t\tconst configureKeyboardLayout: IQuickPickItem = { label: nls.localize('configureKeyboardLayout', \"Configure Keyboard Layout\") };\n\n\t\tpicks.unshift(configureKeyboardLayout);\n\n\t\t// Offer to \"Auto Detect\"\n\t\tconst autoDetectMode: IQuickPickItem = {\n\t\t\tlabel: nls.localize('autoDetect', \"Auto Detect\"),\n\t\t\tdescription: isAutoDetect ? `Current: ${parseKeyboardLayoutDescription(currentLayout).label}` : undefined,\n\t\t\tpicked: isAutoDetect ? true : undefined\n\t\t};\n\n\t\tpicks.unshift(autoDetectMode);\n\n\t\tconst pick = await quickInputService.pick(picks, { placeHolder: nls.localize('pickKeyboardLayout', \"Select Keyboard Layout\"), matchOnDescription: true });\n\t\tif (!pick) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (pick === autoDetectMode) {\n\t\t\t// set keymap service to auto mode\n\t\t\tconfigurationService.updateValue('keyboard.layout', 'autodetect');\n\t\t\treturn;\n\t\t}\n\n\t\tif (pick === configureKeyboardLayout) {\n\t\t\tconst file = environmentService.keyboardLayoutResource;\n\n\t\t\tawait fileService.stat(file).then(undefined, () => {\n\t\t\t\treturn fileService.createFile(file, VSBuffer.fromString(DEFAULT_CONTENT));\n\t\t\t}).then((stat): Promise<IEditorPane | undefined> | undefined => {\n\t\t\t\tif (!stat) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn editorService.openEditor({\n\t\t\t\t\tresource: stat.resource,\n\t\t\t\t\tlanguageId: 'jsonc',\n\t\t\t\t\toptions: { pinned: true }\n\t\t\t\t});\n\t\t\t}, (error) => {\n\t\t\t\tthrow new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", file.toString(), error));\n\t\t\t});\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconfigurationService.updateValue('keyboard.layout', getKeyboardLayoutId((<LayoutQuickPickItem>pick).layout));\n\t}\n});\n"],
  "mappings": "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",
  "names": ["layout"]
}
