{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isMacintosh, isWindows } from \"../../../../base/common/platform.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IKeyboardLayoutInfo,\n\tIKeyboardLayoutService,\n\tareKeyboardLayoutsEqual,\n\tgetKeyboardLayoutId,\n\tparseKeyboardLayoutDescription,\n} from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype QuickPickInput,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport type { IEditorPane } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport {\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\nimport { KEYBOARD_LAYOUT_OPEN_PICKER } from \"../common/preferences.js\";\n\nexport class KeyboardLayoutPickerContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.keyboardLayoutPicker\";\n\n\tprivate readonly pickerElement = this._register(\n\t\tnew MutableDisposable<IStatusbarEntryAccessor>(),\n\t);\n\n\tconstructor(\n\t\t@IKeyboardLayoutService\n\t\tprivate readonly keyboardLayoutService: IKeyboardLayoutService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\n\t\tconst name = nls.localize(\n\t\t\t\"status.workbench.keyboardLayout\",\n\t\t\t\"Keyboard Layout\",\n\t\t);\n\n\t\tconst layout = this.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\tif (layout) {\n\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\t\t\tconst text = nls.localize(\n\t\t\t\t\"keyboardLayout\",\n\t\t\t\t\"Layout: {0}\",\n\t\t\t\tlayoutInfo.label,\n\t\t\t);\n\n\t\t\tthis.pickerElement.value = this.statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER,\n\t\t\t\t},\n\t\t\t\t\"status.workbench.keyboardLayout\",\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t);\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.keyboardLayoutService.onDidChangeKeyboardLayout(() => {\n\t\t\t\tconst layout =\n\t\t\t\t\tthis.keyboardLayoutService.getCurrentKeyboardLayout();\n\t\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\n\t\t\t\tif (this.pickerElement.value) {\n\t\t\t\t\tconst text = nls.localize(\n\t\t\t\t\t\t\"keyboardLayout\",\n\t\t\t\t\t\t\"Layout: {0}\",\n\t\t\t\t\t\tlayoutInfo.label,\n\t\t\t\t\t);\n\t\t\t\t\tthis.pickerElement.value.update({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tariaLabel: text,\n\t\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst text = nls.localize(\n\t\t\t\t\t\t\"keyboardLayout\",\n\t\t\t\t\t\t\"Layout: {0}\",\n\t\t\t\t\t\tlayoutInfo.label,\n\t\t\t\t\t);\n\t\t\t\t\tthis.pickerElement.value = this.statusbarService.addEntry(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\tariaLabel: text,\n\t\t\t\t\t\t\tcommand: KEYBOARD_LAYOUT_OPEN_PICKER,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"status.workbench.keyboardLayout\",\n\t\t\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n}\n\nregisterWorkbenchContribution2(\n\tKeyboardLayoutPickerContribution.ID,\n\tKeyboardLayoutPickerContribution,\n\tWorkbenchPhase.BlockStartup,\n);\n\ninterface LayoutQuickPickItem extends IQuickPickItem {\n\tlayout: IKeyboardLayoutInfo;\n}\n\ninterface IUnknownLayout {\n\ttext?: string;\n\tlang?: string;\n\tlayout?: string;\n}\n\nconst DEFAULT_CONTENT: string = [\n\t`// ${nls.localize(\"displayLanguage\", \"Defines the keyboard layout used in VS Code in the browser environment.\")}`,\n\t`// ${nls.localize(\"doc\", 'Open VS Code and run \"Developer: Inspect Key Mappings (JSON)\" from Command Palette.')}`,\n\t``,\n\t`// Once you have the keyboard layout info, please paste it below.`,\n\t\"\\n\",\n].join(\"\\n\");\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: KEYBOARD_LAYOUT_OPEN_PICKER,\n\t\t\t\ttitle: nls.localize2(\n\t\t\t\t\t\"keyboard.chooseLayout\",\n\t\t\t\t\t\"Change Keyboard Layout\",\n\t\t\t\t),\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst keyboardLayoutService = accessor.get(IKeyboardLayoutService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst environmentService = accessor.get(IEnvironmentService);\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\n\t\t\tconst layouts = keyboardLayoutService.getAllKeyboardLayouts();\n\t\t\tconst currentLayout =\n\t\t\t\tkeyboardLayoutService.getCurrentKeyboardLayout();\n\t\t\tconst layoutConfig =\n\t\t\t\tconfigurationService.getValue(\"keyboard.layout\");\n\t\t\tconst isAutoDetect = layoutConfig === \"autodetect\";\n\n\t\t\tconst picks: QuickPickInput[] = layouts\n\t\t\t\t.map((layout) => {\n\t\t\t\t\tconst picked =\n\t\t\t\t\t\t!isAutoDetect &&\n\t\t\t\t\t\tareKeyboardLayoutsEqual(currentLayout, layout);\n\t\t\t\t\tconst layoutInfo = parseKeyboardLayoutDescription(layout);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlayout: layout,\n\t\t\t\t\t\tlabel: [\n\t\t\t\t\t\t\tlayoutInfo.label,\n\t\t\t\t\t\t\tlayout && layout.isUserKeyboardLayout\n\t\t\t\t\t\t\t\t? \"(User configured layout)\"\n\t\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\t].join(\" \"),\n\t\t\t\t\t\tid:\n\t\t\t\t\t\t\t(layout as IUnknownLayout).text ||\n\t\t\t\t\t\t\t(layout as IUnknownLayout).lang ||\n\t\t\t\t\t\t\t(layout as IUnknownLayout).layout,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\tlayoutInfo.description +\n\t\t\t\t\t\t\t(picked ? \" (Current layout)\" : \"\"),\n\t\t\t\t\t\tpicked:\n\t\t\t\t\t\t\t!isAutoDetect &&\n\t\t\t\t\t\t\tareKeyboardLayoutsEqual(currentLayout, layout),\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.sort((a: IQuickPickItem, b: IQuickPickItem) => {\n\t\t\t\t\treturn a.label < b.label ? -1 : a.label > b.label ? 1 : 0;\n\t\t\t\t});\n\n\t\t\tif (picks.length > 0) {\n\t\t\t\tconst platform = isMacintosh\n\t\t\t\t\t? \"Mac\"\n\t\t\t\t\t: isWindows\n\t\t\t\t\t\t? \"Win\"\n\t\t\t\t\t\t: \"Linux\";\n\t\t\t\tpicks.unshift({\n\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"layoutPicks\",\n\t\t\t\t\t\t\"Keyboard Layouts ({0})\",\n\t\t\t\t\t\tplatform,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst configureKeyboardLayout: IQuickPickItem = {\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"configureKeyboardLayout\",\n\t\t\t\t\t\"Configure Keyboard Layout\",\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tpicks.unshift(configureKeyboardLayout);\n\n\t\t\t// Offer to \"Auto Detect\"\n\t\t\tconst autoDetectMode: IQuickPickItem = {\n\t\t\t\tlabel: nls.localize(\"autoDetect\", \"Auto Detect\"),\n\t\t\t\tdescription: isAutoDetect\n\t\t\t\t\t? `Current: ${parseKeyboardLayoutDescription(currentLayout).label}`\n\t\t\t\t\t: undefined,\n\t\t\t\tpicked: isAutoDetect ? true : undefined,\n\t\t\t};\n\n\t\t\tpicks.unshift(autoDetectMode);\n\n\t\t\tconst pick = await quickInputService.pick(picks, {\n\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\"pickKeyboardLayout\",\n\t\t\t\t\t\"Select Keyboard Layout\",\n\t\t\t\t),\n\t\t\t\tmatchOnDescription: true,\n\t\t\t});\n\t\t\tif (!pick) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pick === autoDetectMode) {\n\t\t\t\t// set keymap service to auto mode\n\t\t\t\tconfigurationService.updateValue(\n\t\t\t\t\t\"keyboard.layout\",\n\t\t\t\t\t\"autodetect\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pick === configureKeyboardLayout) {\n\t\t\t\tconst file = environmentService.keyboardLayoutResource;\n\n\t\t\t\tawait fileService\n\t\t\t\t\t.stat(file)\n\t\t\t\t\t.then(undefined, () => {\n\t\t\t\t\t\treturn fileService.createFile(\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\tVSBuffer.fromString(DEFAULT_CONTENT),\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.then(\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tstat,\n\t\t\t\t\t\t): Promise<IEditorPane | undefined> | undefined => {\n\t\t\t\t\t\t\tif (!stat) {\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn editorService.openEditor({\n\t\t\t\t\t\t\t\tresource: stat.resource,\n\t\t\t\t\t\t\t\tlanguageId: \"jsonc\",\n\t\t\t\t\t\t\t\toptions: { pinned: true },\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(error) => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"fail.createSettings\",\n\t\t\t\t\t\t\t\t\t\"Unable to create '{0}' ({1}).\",\n\t\t\t\t\t\t\t\t\tfile.toString(),\n\t\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\n\t\t\tconfigurationService.updateValue(\n\t\t\t\t\"keyboard.layout\",\n\t\t\t\tgetKeyboardLayoutId((<LayoutQuickPickItem>pick).layout),\n\t\t\t);\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": ["layout"]
}
