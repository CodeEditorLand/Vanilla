{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { escapeRegExpCharacters, isFalsyOrWhitespace } from '../../../../base/common/strings.js';\nimport { isUndefinedOrNull } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ConfigurationTarget, IConfigurationValue } from '../../../../platform/configuration/common/configuration.js';\nimport { SettingsTarget } from './preferencesWidgets.js';\nimport { ITOCEntry, knownAcronyms, knownTermMappings, tocData } from './settingsLayout.js';\nimport { ENABLE_EXTENSION_TOGGLE_SETTINGS, ENABLE_LANGUAGE_FILTER, MODIFIED_SETTING_TAG, POLICY_SETTING_TAG, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG, compareTwoNullableNumbers } from '../common/preferences.js';\nimport { IExtensionSetting, ISearchResult, ISetting, ISettingMatch, SettingMatchType, SettingValueType } from '../../../services/preferences/common/preferences.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { FOLDER_SCOPES, WORKSPACE_SCOPES, REMOTE_MACHINE_SCOPES, LOCAL_MACHINE_SCOPES, IWorkbenchConfigurationService, APPLICATION_SCOPES } from '../../../services/configuration/common/configuration.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { ConfigurationDefaultValueSource, ConfigurationScope, EditPresentationTypes, Extensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\n\nexport const ONLINE_SERVICES_SETTING_TAG = 'usesOnlineServices';\n\nexport interface ISettingsEditorViewState {\n\tsettingsTarget: SettingsTarget;\n\tquery?: string; // used to keep track of loading from setInput vs loading from cache\n\ttagFilters?: Set<string>;\n\textensionFilters?: Set<string>;\n\tfeatureFilters?: Set<string>;\n\tidFilters?: Set<string>;\n\tlanguageFilter?: string;\n\tfilterToCategory?: SettingsTreeGroupElement;\n}\n\nexport abstract class SettingsTreeElement extends Disposable {\n\tid: string;\n\tparent?: SettingsTreeGroupElement;\n\n\tprivate _tabbable = false;\n\tprotected readonly _onDidChangeTabbable = new Emitter<void>();\n\treadonly onDidChangeTabbable = this._onDidChangeTabbable.event;\n\n\tconstructor(_id: string) {\n\t\tsuper();\n\t\tthis.id = _id;\n\t}\n\n\tget tabbable(): boolean {\n\t\treturn this._tabbable;\n\t}\n\n\tset tabbable(value: boolean) {\n\t\tthis._tabbable = value;\n\t\tthis._onDidChangeTabbable.fire();\n\t}\n}\n\nexport type SettingsTreeGroupChild = (SettingsTreeGroupElement | SettingsTreeSettingElement | SettingsTreeNewExtensionsElement);\n\nexport class SettingsTreeGroupElement extends SettingsTreeElement {\n\tcount?: number;\n\tlabel: string;\n\tlevel: number;\n\tisFirstGroup: boolean;\n\n\tprivate _childSettingKeys: Set<string> = new Set();\n\tprivate _children: SettingsTreeGroupChild[] = [];\n\n\tget children(): SettingsTreeGroupChild[] {\n\t\treturn this._children;\n\t}\n\n\tset children(newChildren: SettingsTreeGroupChild[]) {\n\t\tthis._children = newChildren;\n\n\t\tthis._childSettingKeys = new Set();\n\t\tthis._children.forEach(child => {\n\t\t\tif (child instanceof SettingsTreeSettingElement) {\n\t\t\t\tthis._childSettingKeys.add(child.setting.key);\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(_id: string, count: number | undefined, label: string, level: number, isFirstGroup: boolean) {\n\t\tsuper(_id);\n\n\t\tthis.count = count;\n\t\tthis.label = label;\n\t\tthis.level = level;\n\t\tthis.isFirstGroup = isFirstGroup;\n\t}\n\n\t/**\n\t * Returns whether this group contains the given child key (to a depth of 1 only)\n\t */\n\tcontainsSetting(key: string): boolean {\n\t\treturn this._childSettingKeys.has(key);\n\t}\n}\n\nexport class SettingsTreeNewExtensionsElement extends SettingsTreeElement {\n\tconstructor(_id: string, public readonly extensionIds: string[]) {\n\t\tsuper(_id);\n\t}\n}\n\nexport class SettingsTreeSettingElement extends SettingsTreeElement {\n\tprivate static readonly MAX_DESC_LINES = 20;\n\n\tsetting: ISetting;\n\n\tprivate _displayCategory: string | null = null;\n\tprivate _displayLabel: string | null = null;\n\n\t/**\n\t * scopeValue || defaultValue, for rendering convenience.\n\t */\n\tvalue: any;\n\n\t/**\n\t * The value in the current settings scope.\n\t */\n\tscopeValue: any;\n\n\t/**\n\t * The default value\n\t */\n\tdefaultValue?: any;\n\n\t/**\n\t * The source of the default value to display.\n\t * This value also accounts for extension-contributed language-specific default value overrides.\n\t */\n\tdefaultValueSource: ConfigurationDefaultValueSource | undefined;\n\n\t/**\n\t * Whether the setting is configured in the selected scope.\n\t */\n\tisConfigured = false;\n\n\t/**\n\t * Whether the setting requires trusted target\n\t */\n\tisUntrusted = false;\n\n\t/**\n\t * Whether the setting is under a policy that blocks all changes.\n\t */\n\thasPolicyValue = false;\n\n\ttags?: Set<string>;\n\toverriddenScopeList: string[] = [];\n\toverriddenDefaultsLanguageList: string[] = [];\n\n\t/**\n\t * For each language that contributes setting values or default overrides, we can see those values here.\n\t */\n\tlanguageOverrideValues: Map<string, IConfigurationValue<unknown>> = new Map<string, IConfigurationValue<unknown>>();\n\n\tdescription!: string;\n\tvalueType!: SettingValueType;\n\n\tconstructor(\n\t\tsetting: ISetting,\n\t\tparent: SettingsTreeGroupElement,\n\t\treadonly settingsTarget: SettingsTarget,\n\t\tprivate readonly isWorkspaceTrusted: boolean,\n\t\tprivate readonly languageFilter: string | undefined,\n\t\tprivate readonly languageService: ILanguageService,\n\t\tprivate readonly productService: IProductService,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tprivate readonly configurationService: IWorkbenchConfigurationService,\n\t) {\n\t\tsuper(sanitizeId(parent.id + '_' + setting.key));\n\t\tthis.setting = setting;\n\t\tthis.parent = parent;\n\n\t\t// Make sure description and valueType are initialized\n\t\tthis.initSettingDescription();\n\t\tthis.initSettingValueType();\n\t}\n\n\tget displayCategory(): string {\n\t\tif (!this._displayCategory) {\n\t\t\tthis.initLabels();\n\t\t}\n\n\t\treturn this._displayCategory!;\n\t}\n\n\tget displayLabel(): string {\n\t\tif (!this._displayLabel) {\n\t\t\tthis.initLabels();\n\t\t}\n\n\t\treturn this._displayLabel!;\n\t}\n\n\tprivate initLabels(): void {\n\t\tif (this.setting.title) {\n\t\t\tthis._displayLabel = this.setting.title;\n\t\t\tthis._displayCategory = this.setting.categoryLabel ?? null;\n\t\t\treturn;\n\t\t}\n\t\tconst displayKeyFormat = settingKeyToDisplayFormat(this.setting.key, this.parent!.id, this.setting.isLanguageTagSetting);\n\t\tthis._displayLabel = displayKeyFormat.label;\n\t\tthis._displayCategory = displayKeyFormat.category;\n\t}\n\n\tprivate initSettingDescription() {\n\t\tif (this.setting.description.length > SettingsTreeSettingElement.MAX_DESC_LINES) {\n\t\t\tconst truncatedDescLines = this.setting.description.slice(0, SettingsTreeSettingElement.MAX_DESC_LINES);\n\t\t\ttruncatedDescLines.push('[...]');\n\t\t\tthis.description = truncatedDescLines.join('\\n');\n\t\t} else {\n\t\t\tthis.description = this.setting.description.join('\\n');\n\t\t}\n\t}\n\n\tprivate initSettingValueType() {\n\t\tif (isExtensionToggleSetting(this.setting, this.productService)) {\n\t\t\tthis.valueType = SettingValueType.ExtensionToggle;\n\t\t} else if (this.setting.enum && (!this.setting.type || settingTypeEnumRenderable(this.setting.type))) {\n\t\t\tthis.valueType = SettingValueType.Enum;\n\t\t} else if (this.setting.type === 'string') {\n\t\t\tif (this.setting.editPresentation === EditPresentationTypes.Multiline) {\n\t\t\t\tthis.valueType = SettingValueType.MultilineString;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.String;\n\t\t\t}\n\t\t} else if (isExcludeSetting(this.setting)) {\n\t\t\tthis.valueType = SettingValueType.Exclude;\n\t\t} else if (isIncludeSetting(this.setting)) {\n\t\t\tthis.valueType = SettingValueType.Include;\n\t\t} else if (this.setting.type === 'integer') {\n\t\t\tthis.valueType = SettingValueType.Integer;\n\t\t} else if (this.setting.type === 'number') {\n\t\t\tthis.valueType = SettingValueType.Number;\n\t\t} else if (this.setting.type === 'boolean') {\n\t\t\tthis.valueType = SettingValueType.Boolean;\n\t\t} else if (this.setting.type === 'array' && this.setting.arrayItemType &&\n\t\t\t['string', 'enum', 'number', 'integer'].includes(this.setting.arrayItemType)) {\n\t\t\tthis.valueType = SettingValueType.Array;\n\t\t} else if (Array.isArray(this.setting.type) && this.setting.type.includes(SettingValueType.Null) && this.setting.type.length === 2) {\n\t\t\tif (this.setting.type.includes(SettingValueType.Integer)) {\n\t\t\t\tthis.valueType = SettingValueType.NullableInteger;\n\t\t\t} else if (this.setting.type.includes(SettingValueType.Number)) {\n\t\t\t\tthis.valueType = SettingValueType.NullableNumber;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.Complex;\n\t\t\t}\n\t\t} else if (isObjectSetting(this.setting)) {\n\t\t\tif (this.setting.allKeysAreBoolean) {\n\t\t\t\tthis.valueType = SettingValueType.BooleanObject;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.Object;\n\t\t\t}\n\t\t} else if (this.setting.isLanguageTagSetting) {\n\t\t\tthis.valueType = SettingValueType.LanguageTag;\n\t\t} else {\n\t\t\tthis.valueType = SettingValueType.Complex;\n\t\t}\n\t}\n\n\tinspectSelf() {\n\t\tconst targetToInspect = this.getTargetToInspect(this.setting);\n\t\tconst inspectResult = inspectSetting(this.setting.key, targetToInspect, this.languageFilter, this.configurationService);\n\t\tthis.update(inspectResult, this.isWorkspaceTrusted);\n\t}\n\n\tprivate getTargetToInspect(setting: ISetting): SettingsTarget {\n\t\tif (!this.userDataProfileService.currentProfile.isDefault && !this.userDataProfileService.currentProfile.useDefaultFlags?.settings) {\n\t\t\tif (setting.scope === ConfigurationScope.APPLICATION) {\n\t\t\t\treturn ConfigurationTarget.APPLICATION;\n\t\t\t}\n\t\t\tif (this.configurationService.isSettingAppliedForAllProfiles(setting.key) && this.settingsTarget === ConfigurationTarget.USER_LOCAL) {\n\t\t\t\treturn ConfigurationTarget.APPLICATION;\n\t\t\t}\n\t\t}\n\t\treturn this.settingsTarget;\n\t}\n\n\tprivate update(inspectResult: IInspectResult, isWorkspaceTrusted: boolean): void {\n\t\tlet { isConfigured, inspected, targetSelector, inspectedLanguageOverrides, languageSelector } = inspectResult;\n\n\t\tswitch (targetSelector) {\n\t\t\tcase 'workspaceFolderValue':\n\t\t\tcase 'workspaceValue':\n\t\t\t\tthis.isUntrusted = !!this.setting.restricted && !isWorkspaceTrusted;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet displayValue = isConfigured ? inspected[targetSelector] : inspected.defaultValue;\n\t\tconst overriddenScopeList: string[] = [];\n\t\tconst overriddenDefaultsLanguageList: string[] = [];\n\t\tif ((languageSelector || targetSelector !== 'workspaceValue') && typeof inspected.workspaceValue !== 'undefined') {\n\t\t\toverriddenScopeList.push('workspace:');\n\t\t}\n\t\tif ((languageSelector || targetSelector !== 'userRemoteValue') && typeof inspected.userRemoteValue !== 'undefined') {\n\t\t\toverriddenScopeList.push('remote:');\n\t\t}\n\t\tif ((languageSelector || targetSelector !== 'userLocalValue') && typeof inspected.userLocalValue !== 'undefined') {\n\t\t\toverriddenScopeList.push('user:');\n\t\t}\n\n\t\tif (inspected.overrideIdentifiers) {\n\t\t\tfor (const overrideIdentifier of inspected.overrideIdentifiers) {\n\t\t\t\tconst inspectedOverride = inspectedLanguageOverrides.get(overrideIdentifier);\n\t\t\t\tif (inspectedOverride) {\n\t\t\t\t\tif (this.languageService.isRegisteredLanguageId(overrideIdentifier)) {\n\t\t\t\t\t\tif (languageSelector !== overrideIdentifier && typeof inspectedOverride.default?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenDefaultsLanguageList.push(overrideIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((languageSelector !== overrideIdentifier || targetSelector !== 'workspaceValue') && typeof inspectedOverride.workspace?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenScopeList.push(`workspace:${overrideIdentifier}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((languageSelector !== overrideIdentifier || targetSelector !== 'userRemoteValue') && typeof inspectedOverride.userRemote?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenScopeList.push(`remote:${overrideIdentifier}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((languageSelector !== overrideIdentifier || targetSelector !== 'userLocalValue') && typeof inspectedOverride.userLocal?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenScopeList.push(`user:${overrideIdentifier}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.languageOverrideValues.set(overrideIdentifier, inspectedOverride);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.overriddenScopeList = overriddenScopeList;\n\t\tthis.overriddenDefaultsLanguageList = overriddenDefaultsLanguageList;\n\n\t\t// The user might have added, removed, or modified a language filter,\n\t\t// so we reset the default value source to the non-language-specific default value source for now.\n\t\tthis.defaultValueSource = this.setting.nonLanguageSpecificDefaultValueSource;\n\n\t\tif (inspected.policyValue) {\n\t\t\tthis.hasPolicyValue = true;\n\t\t\tisConfigured = false; // The user did not manually configure the setting themselves.\n\t\t\tdisplayValue = inspected.policyValue;\n\t\t\tthis.scopeValue = inspected.policyValue;\n\t\t\tthis.defaultValue = inspected.defaultValue;\n\t\t} else if (languageSelector && this.languageOverrideValues.has(languageSelector)) {\n\t\t\tconst overrideValues = this.languageOverrideValues.get(languageSelector)!;\n\t\t\t// In the worst case, go back to using the previous display value.\n\t\t\t// Also, sometimes the override is in the form of a default value override, so consider that second.\n\t\t\tdisplayValue = (isConfigured ? overrideValues[targetSelector] : overrideValues.defaultValue) ?? displayValue;\n\t\t\tthis.scopeValue = isConfigured && overrideValues[targetSelector];\n\t\t\tthis.defaultValue = overrideValues.defaultValue ?? inspected.defaultValue;\n\n\t\t\tconst registryValues = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationDefaultsOverrides();\n\t\t\tconst source = registryValues.get(`[${languageSelector}]`)?.source;\n\t\t\tconst overrideValueSource = source instanceof Map ? source.get(this.setting.key) : undefined;\n\t\t\tif (overrideValueSource) {\n\t\t\t\tthis.defaultValueSource = overrideValueSource;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.scopeValue = isConfigured && inspected[targetSelector];\n\t\t\tthis.defaultValue = inspected.defaultValue;\n\t\t}\n\n\t\tthis.value = displayValue;\n\t\tthis.isConfigured = isConfigured;\n\t\tif (isConfigured || this.setting.tags || this.tags || this.setting.restricted || this.hasPolicyValue) {\n\t\t\t// Don't create an empty Set for all 1000 settings, only if needed\n\t\t\tthis.tags = new Set<string>();\n\t\t\tif (isConfigured) {\n\t\t\t\tthis.tags.add(MODIFIED_SETTING_TAG);\n\t\t\t}\n\n\t\t\tthis.setting.tags?.forEach(tag => this.tags!.add(tag));\n\n\t\t\tif (this.setting.restricted) {\n\t\t\t\tthis.tags.add(REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG);\n\t\t\t}\n\n\t\t\tif (this.hasPolicyValue) {\n\t\t\t\tthis.tags.add(POLICY_SETTING_TAG);\n\t\t\t}\n\t\t}\n\t}\n\n\tmatchesAllTags(tagFilters?: Set<string>): boolean {\n\t\tif (!tagFilters?.size) {\n\t\t\t// This setting, which may have tags,\n\t\t\t// matches against a query with no tags.\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this.tags) {\n\t\t\t// The setting must inspect itself to get tag information\n\t\t\t// including for the hasPolicy tag.\n\t\t\tthis.inspectSelf();\n\t\t}\n\n\t\t// Check that the filter tags are a subset of this setting's tags\n\t\treturn !!this.tags?.size &&\n\t\t\tArray.from(tagFilters).every(tag => this.tags!.has(tag));\n\t}\n\n\tmatchesScope(scope: SettingsTarget, isRemote: boolean): boolean {\n\t\tconst configTarget = URI.isUri(scope) ? ConfigurationTarget.WORKSPACE_FOLDER : scope;\n\n\t\tif (!this.setting.scope) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.APPLICATION) {\n\t\t\treturn APPLICATION_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn FOLDER_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn WORKSPACE_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.USER_REMOTE) {\n\t\t\treturn REMOTE_MACHINE_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.USER_LOCAL) {\n\t\t\tif (isRemote) {\n\t\t\t\treturn LOCAL_MACHINE_SCOPES.includes(this.setting.scope);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tmatchesAnyExtension(extensionFilters?: Set<string>): boolean {\n\t\tif (!extensionFilters || !extensionFilters.size) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this.setting.extensionInfo) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Array.from(extensionFilters).some(extensionId => extensionId.toLowerCase() === this.setting.extensionInfo!.id.toLowerCase());\n\t}\n\n\tmatchesAnyFeature(featureFilters?: Set<string>): boolean {\n\t\tif (!featureFilters || !featureFilters.size) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst features = tocData.children!.find(child => child.id === 'features');\n\n\t\treturn Array.from(featureFilters).some(filter => {\n\t\t\tif (features && features.children) {\n\t\t\t\tconst feature = features.children.find(feature => 'features/' + filter === feature.id);\n\t\t\t\tif (feature) {\n\t\t\t\t\tconst patterns = feature.settings?.map(setting => createSettingMatchRegExp(setting));\n\t\t\t\t\treturn patterns && !this.setting.extensionInfo && patterns.some(pattern => pattern.test(this.setting.key.toLowerCase()));\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tmatchesAnyId(idFilters?: Set<string>): boolean {\n\t\tif (!idFilters || !idFilters.size) {\n\t\t\treturn true;\n\t\t}\n\t\treturn idFilters.has(this.setting.key);\n\t}\n\n\tmatchesAllLanguages(languageFilter?: string): boolean {\n\t\tif (!languageFilter) {\n\t\t\t// We're not filtering by language.\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this.languageService.isRegisteredLanguageId(languageFilter)) {\n\t\t\t// We're trying to filter by an invalid language.\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have a language filter in the search widget at this point.\n\t\t// We decide to show all language overridable settings to make the\n\t\t// lang filter act more like a scope filter,\n\t\t// rather than adding on an implicit @modified as well.\n\t\tif (this.setting.scope === ConfigurationScope.LANGUAGE_OVERRIDABLE) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n\nfunction createSettingMatchRegExp(pattern: string): RegExp {\n\tpattern = escapeRegExpCharacters(pattern)\n\t\t.replace(/\\\\\\*/g, '.*');\n\n\treturn new RegExp(`^${pattern}$`, 'i');\n}\n\nexport class SettingsTreeModel {\n\tprotected _root!: SettingsTreeGroupElement;\n\tprivate _tocRoot!: ITOCEntry<ISetting>;\n\tprivate readonly _treeElementsBySettingName = new Map<string, SettingsTreeSettingElement[]>();\n\n\tconstructor(\n\t\tprotected readonly _viewState: ISettingsEditorViewState,\n\t\tprivate _isWorkspaceTrusted: boolean,\n\t\t@IWorkbenchConfigurationService private readonly _configurationService: IWorkbenchConfigurationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t}\n\n\tget root(): SettingsTreeGroupElement {\n\t\treturn this._root;\n\t}\n\n\tupdate(newTocRoot = this._tocRoot): void {\n\t\tthis._treeElementsBySettingName.clear();\n\n\t\tconst newRoot = this.createSettingsTreeGroupElement(newTocRoot);\n\t\tif (newRoot.children[0] instanceof SettingsTreeGroupElement) {\n\t\t\t(<SettingsTreeGroupElement>newRoot.children[0]).isFirstGroup = true;\n\t\t}\n\n\t\tif (this._root) {\n\t\t\tthis.disposeChildren(this._root.children);\n\t\t\tthis._root.children = newRoot.children;\n\t\t} else {\n\t\t\tthis._root = newRoot;\n\t\t}\n\t}\n\n\tupdateWorkspaceTrust(workspaceTrusted: boolean): void {\n\t\tthis._isWorkspaceTrusted = workspaceTrusted;\n\t\tthis.updateRequireTrustedTargetElements();\n\t}\n\n\tprivate disposeChildren(children: SettingsTreeGroupChild[]) {\n\t\tfor (const child of children) {\n\t\t\tthis.recursiveDispose(child);\n\t\t}\n\t}\n\n\tprivate recursiveDispose(element: SettingsTreeElement) {\n\t\tif (element instanceof SettingsTreeGroupElement) {\n\t\t\tthis.disposeChildren(element.children);\n\t\t}\n\n\t\telement.dispose();\n\t}\n\n\tgetElementsByName(name: string): SettingsTreeSettingElement[] | null {\n\t\treturn this._treeElementsBySettingName.get(name) ?? null;\n\t}\n\n\tupdateElementsByName(name: string): void {\n\t\tif (!this._treeElementsBySettingName.has(name)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.reinspectSettings(this._treeElementsBySettingName.get(name)!);\n\t}\n\n\tprivate updateRequireTrustedTargetElements(): void {\n\t\tthis.reinspectSettings([...this._treeElementsBySettingName.values()].flat().filter(s => s.isUntrusted));\n\t}\n\n\tprivate reinspectSettings(settings: SettingsTreeSettingElement[]): void {\n\t\tfor (const element of settings) {\n\t\t\telement.inspectSelf();\n\t\t}\n\t}\n\n\tprivate createSettingsTreeGroupElement(tocEntry: ITOCEntry<ISetting>, parent?: SettingsTreeGroupElement): SettingsTreeGroupElement {\n\t\tconst depth = parent ? this.getDepth(parent) + 1 : 0;\n\t\tconst element = new SettingsTreeGroupElement(tocEntry.id, undefined, tocEntry.label, depth, false);\n\t\telement.parent = parent;\n\n\t\tconst children: SettingsTreeGroupChild[] = [];\n\t\tif (tocEntry.settings) {\n\t\t\tconst settingChildren = tocEntry.settings.map(s => this.createSettingsTreeSettingElement(s, element))\n\t\t\t\t.filter(el => el.setting.deprecationMessage ? el.isConfigured : true);\n\t\t\tchildren.push(...settingChildren);\n\t\t}\n\n\t\tif (tocEntry.children) {\n\t\t\tconst groupChildren = tocEntry.children.map(child => this.createSettingsTreeGroupElement(child, element));\n\t\t\tchildren.push(...groupChildren);\n\t\t}\n\n\t\telement.children = children;\n\n\t\treturn element;\n\t}\n\n\tprivate getDepth(element: SettingsTreeElement): number {\n\t\tif (element.parent) {\n\t\t\treturn 1 + this.getDepth(element.parent);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate createSettingsTreeSettingElement(setting: ISetting, parent: SettingsTreeGroupElement): SettingsTreeSettingElement {\n\t\tconst element = new SettingsTreeSettingElement(\n\t\t\tsetting,\n\t\t\tparent,\n\t\t\tthis._viewState.settingsTarget,\n\t\t\tthis._isWorkspaceTrusted,\n\t\t\tthis._viewState.languageFilter,\n\t\t\tthis._languageService,\n\t\t\tthis._productService,\n\t\t\tthis._userDataProfileService,\n\t\t\tthis._configurationService);\n\n\t\tconst nameElements = this._treeElementsBySettingName.get(setting.key) || [];\n\t\tnameElements.push(element);\n\t\tthis._treeElementsBySettingName.set(setting.key, nameElements);\n\t\treturn element;\n\t}\n}\n\ninterface IInspectResult {\n\tisConfigured: boolean;\n\tinspected: IConfigurationValue<unknown>;\n\ttargetSelector: 'applicationValue' | 'userLocalValue' | 'userRemoteValue' | 'workspaceValue' | 'workspaceFolderValue';\n\tinspectedLanguageOverrides: Map<string, IConfigurationValue<unknown>>;\n\tlanguageSelector: string | undefined;\n}\n\nexport function inspectSetting(key: string, target: SettingsTarget, languageFilter: string | undefined, configurationService: IWorkbenchConfigurationService): IInspectResult {\n\tconst inspectOverrides = URI.isUri(target) ? { resource: target } : undefined;\n\tconst inspected = configurationService.inspect(key, inspectOverrides);\n\tconst targetSelector = target === ConfigurationTarget.APPLICATION ? 'applicationValue' :\n\t\ttarget === ConfigurationTarget.USER_LOCAL ? 'userLocalValue' :\n\t\t\ttarget === ConfigurationTarget.USER_REMOTE ? 'userRemoteValue' :\n\t\t\t\ttarget === ConfigurationTarget.WORKSPACE ? 'workspaceValue' :\n\t\t\t\t\t'workspaceFolderValue';\n\tconst targetOverrideSelector = target === ConfigurationTarget.APPLICATION ? 'application' :\n\t\ttarget === ConfigurationTarget.USER_LOCAL ? 'userLocal' :\n\t\t\ttarget === ConfigurationTarget.USER_REMOTE ? 'userRemote' :\n\t\t\t\ttarget === ConfigurationTarget.WORKSPACE ? 'workspace' :\n\t\t\t\t\t'workspaceFolder';\n\tlet isConfigured = typeof inspected[targetSelector] !== 'undefined';\n\n\tconst overrideIdentifiers = inspected.overrideIdentifiers;\n\tconst inspectedLanguageOverrides = new Map<string, IConfigurationValue<unknown>>();\n\n\t// We must reset isConfigured to be false if languageFilter is set, and manually\n\t// determine whether it can be set to true later.\n\tif (languageFilter) {\n\t\tisConfigured = false;\n\t}\n\tif (overrideIdentifiers) {\n\t\t// The setting we're looking at has language overrides.\n\t\tfor (const overrideIdentifier of overrideIdentifiers) {\n\t\t\tinspectedLanguageOverrides.set(overrideIdentifier, configurationService.inspect(key, { overrideIdentifier }));\n\t\t}\n\n\t\t// For all language filters, see if there's an override for that filter.\n\t\tif (languageFilter) {\n\t\t\tif (inspectedLanguageOverrides.has(languageFilter)) {\n\t\t\t\tconst overrideValue = inspectedLanguageOverrides.get(languageFilter)![targetOverrideSelector]?.override;\n\t\t\t\tif (typeof overrideValue !== 'undefined') {\n\t\t\t\t\tisConfigured = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { isConfigured, inspected, targetSelector, inspectedLanguageOverrides, languageSelector: languageFilter };\n}\n\nfunction sanitizeId(id: string): string {\n\treturn id.replace(/[\\.\\/]/, '_');\n}\n\nexport function settingKeyToDisplayFormat(key: string, groupId: string = '', isLanguageTagSetting: boolean = false): { category: string; label: string } {\n\tconst lastDotIdx = key.lastIndexOf('.');\n\tlet category = '';\n\tif (lastDotIdx >= 0) {\n\t\tcategory = key.substring(0, lastDotIdx);\n\t\tkey = key.substring(lastDotIdx + 1);\n\t}\n\n\tgroupId = groupId.replace(/\\//g, '.');\n\tcategory = trimCategoryForGroup(category, groupId);\n\tcategory = wordifyKey(category);\n\n\tif (isLanguageTagSetting) {\n\t\tkey = key.replace(/[\\[\\]]/g, '');\n\t\tkey = '$(bracket) ' + key;\n\t}\n\n\tconst label = wordifyKey(key);\n\treturn { category, label };\n}\n\nfunction wordifyKey(key: string): string {\n\tkey = key\n\t\t.replace(/\\.([a-z0-9])/g, (_, p1) => ` \\u203A ${p1.toUpperCase()}`) // Replace dot with spaced '>'\n\t\t.replace(/([a-z0-9])([A-Z])/g, '$1 $2') // Camel case to spacing, fooBar => foo Bar\n\t\t.replace(/^[a-z]/g, match => match.toUpperCase()) // Upper casing all first letters, foo => Foo\n\t\t.replace(/\\b\\w+\\b/g, match => { // Upper casing known acronyms\n\t\t\treturn knownAcronyms.has(match.toLowerCase()) ?\n\t\t\t\tmatch.toUpperCase() :\n\t\t\t\tmatch;\n\t\t});\n\n\tfor (const [k, v] of knownTermMappings) {\n\t\tkey = key.replace(new RegExp(`\\\\b${k}\\\\b`, 'gi'), v);\n\t}\n\n\treturn key;\n}\n\n/**\n * Removes redundant sections of the category label.\n * A redundant section is a section already reflected in the groupId.\n *\n * @param category The category of the specific setting.\n * @param groupId The author + extension ID.\n * @returns The new category label to use.\n */\nfunction trimCategoryForGroup(category: string, groupId: string): string {\n\tconst doTrim = (forward: boolean) => {\n\t\t// Remove the Insiders portion if the category doesn't use it.\n\t\tif (!/insiders$/i.test(category)) {\n\t\t\tgroupId = groupId.replace(/-?insiders$/i, '');\n\t\t}\n\t\tconst parts = groupId.split('.')\n\t\t\t.map(part => {\n\t\t\t\t// Remove hyphens, but only if that results in a match with the category.\n\t\t\t\tif (part.replace(/-/g, '').toLowerCase() === category.toLowerCase()) {\n\t\t\t\t\treturn part.replace(/-/g, '');\n\t\t\t\t} else {\n\t\t\t\t\treturn part;\n\t\t\t\t}\n\t\t\t});\n\t\twhile (parts.length) {\n\t\t\tconst reg = new RegExp(`^${parts.join('\\\\.')}(\\\\.|$)`, 'i');\n\t\t\tif (reg.test(category)) {\n\t\t\t\treturn category.replace(reg, '');\n\t\t\t}\n\n\t\t\tif (forward) {\n\t\t\t\tparts.pop();\n\t\t\t} else {\n\t\t\t\tparts.shift();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tlet trimmed = doTrim(true);\n\tif (trimmed === null) {\n\t\ttrimmed = doTrim(false);\n\t}\n\n\tif (trimmed === null) {\n\t\ttrimmed = category;\n\t}\n\n\treturn trimmed;\n}\n\nfunction isExtensionToggleSetting(setting: ISetting, productService: IProductService): boolean {\n\treturn ENABLE_EXTENSION_TOGGLE_SETTINGS &&\n\t\t!!productService.extensionRecommendations &&\n\t\t!!setting.displayExtensionId;\n}\n\nfunction isExcludeSetting(setting: ISetting): boolean {\n\treturn setting.key === 'files.exclude' ||\n\t\tsetting.key === 'search.exclude' ||\n\t\tsetting.key === 'workbench.localHistory.exclude' ||\n\t\tsetting.key === 'explorer.autoRevealExclude' ||\n\t\tsetting.key === 'files.readonlyExclude' ||\n\t\tsetting.key === 'files.watcherExclude';\n}\n\nfunction isIncludeSetting(setting: ISetting): boolean {\n\treturn setting.key === 'files.readonlyInclude';\n}\n\n// The values of the following settings when a default values has been removed\nexport function objectSettingSupportsRemoveDefaultValue(key: string): boolean {\n\treturn key === 'workbench.editor.customLabels.patterns';\n}\n\nfunction isObjectRenderableSchema({ type }: IJSONSchema, key: string): boolean {\n\tif (type === 'string' || type === 'boolean' || type === 'integer' || type === 'number') {\n\t\treturn true;\n\t}\n\n\tif (objectSettingSupportsRemoveDefaultValue(key) && Array.isArray(type) && type.length === 2) {\n\t\treturn type.includes('null') && (type.includes('string') || type.includes('boolean') || type.includes('integer') || type.includes('number'));\n\t}\n\n\treturn false;\n}\n\nfunction isObjectSetting({\n\tkey,\n\ttype,\n\tobjectProperties,\n\tobjectPatternProperties,\n\tobjectAdditionalProperties\n}: ISetting): boolean {\n\tif (type !== 'object') {\n\t\treturn false;\n\t}\n\n\t// object can have any shape\n\tif (\n\t\tisUndefinedOrNull(objectProperties) &&\n\t\tisUndefinedOrNull(objectPatternProperties) &&\n\t\tisUndefinedOrNull(objectAdditionalProperties)\n\t) {\n\t\treturn false;\n\t}\n\n\t// objectAdditionalProperties allow the setting to have any shape,\n\t// but if there's a pattern property that handles everything, then every\n\t// property will match that patternProperty, so we don't need to look at\n\t// the value of objectAdditionalProperties in that case.\n\tif ((objectAdditionalProperties === true || objectAdditionalProperties === undefined)\n\t\t&& !Object.keys(objectPatternProperties ?? {}).includes('.*')) {\n\t\treturn false;\n\t}\n\n\tconst schemas = [...Object.values(objectProperties ?? {}), ...Object.values(objectPatternProperties ?? {})];\n\n\tif (objectAdditionalProperties && typeof objectAdditionalProperties === 'object') {\n\t\tschemas.push(objectAdditionalProperties);\n\t}\n\n\t// Flatten anyof schemas\n\tconst flatSchemas = schemas.map((schema): IJSONSchema[] => {\n\t\tif (Array.isArray(schema.anyOf)) {\n\t\t\treturn schema.anyOf;\n\t\t}\n\t\treturn [schema];\n\t}).flat();\n\n\treturn flatSchemas.every((schema) => isObjectRenderableSchema(schema, key));\n}\n\nfunction settingTypeEnumRenderable(_type: string | string[]) {\n\tconst enumRenderableSettingTypes = ['string', 'boolean', 'null', 'integer', 'number'];\n\tconst type = Array.isArray(_type) ? _type : [_type];\n\treturn type.every(type => enumRenderableSettingTypes.includes(type));\n}\n\nexport const enum SearchResultIdx {\n\tLocal = 0,\n\tRemote = 1,\n\tNewExtensions = 2\n}\n\nexport class SearchResultModel extends SettingsTreeModel {\n\tprivate rawSearchResults: ISearchResult[] | null = null;\n\tprivate cachedUniqueSearchResults: ISearchResult | null = null;\n\tprivate newExtensionSearchResults: ISearchResult | null = null;\n\tprivate searchResultCount: number | null = null;\n\tprivate settingsOrderByTocIndex: Map<string, number> | null;\n\n\treadonly id = 'searchResultModel';\n\n\tconstructor(\n\t\tviewState: ISettingsEditorViewState,\n\t\tsettingsOrderByTocIndex: Map<string, number> | null,\n\t\tisWorkspaceTrusted: boolean,\n\t\t@IWorkbenchConfigurationService configurationService: IWorkbenchConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(viewState, isWorkspaceTrusted, configurationService, languageService, userDataProfileService, productService);\n\t\tthis.settingsOrderByTocIndex = settingsOrderByTocIndex;\n\t\tthis.update({ id: 'searchResultModel', label: '' });\n\t}\n\n\tprivate sortResults(filterMatches: ISettingMatch[]): ISettingMatch[] {\n\t\tif (this.settingsOrderByTocIndex) {\n\t\t\tfor (const match of filterMatches) {\n\t\t\t\tmatch.setting.internalOrder = this.settingsOrderByTocIndex.get(match.setting.key);\n\t\t\t}\n\t\t}\n\n\t\t// The search only has filters, so we can sort by the order in the TOC.\n\t\tif (!this._viewState.query) {\n\t\t\treturn filterMatches.sort((a, b) => compareTwoNullableNumbers(a.setting.internalOrder, b.setting.internalOrder));\n\t\t}\n\n\t\t// Sort the settings according to their relevancy.\n\t\t// https://github.com/microsoft/vscode/issues/197773\n\t\tfilterMatches.sort((a, b) => {\n\t\t\tif (a.matchType !== b.matchType) {\n\t\t\t\t// Sort by match type if the match types are not the same.\n\t\t\t\t// The priority of the match type is given by the SettingMatchType enum.\n\t\t\t\treturn b.matchType - a.matchType;\n\t\t\t} else if (a.matchType === SettingMatchType.RemoteMatch) {\n\t\t\t\t// The match types are the same and are RemoteMatch.\n\t\t\t\t// Sort by score.\n\t\t\t\treturn b.score - a.score;\n\t\t\t} else {\n\t\t\t\t// The match types are the same but are not RemoteMatch.\n\t\t\t\t// Sort by their order in the table of contents.\n\t\t\t\treturn compareTwoNullableNumbers(a.setting.internalOrder, b.setting.internalOrder);\n\t\t\t}\n\t\t});\n\n\t\t// Remove duplicates, which sometimes occur with settings\n\t\t// such as the experimental toggle setting.\n\t\treturn arrays.distinct(filterMatches, (match) => match.setting.key);\n\t}\n\n\tgetUniqueResults(): ISearchResult | null {\n\t\tif (this.cachedUniqueSearchResults) {\n\t\t\treturn this.cachedUniqueSearchResults;\n\t\t}\n\n\t\tif (!this.rawSearchResults) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet combinedFilterMatches: ISettingMatch[] = [];\n\n\t\tconst localMatchKeys = new Set();\n\t\tconst localResult = this.rawSearchResults[SearchResultIdx.Local];\n\t\tif (localResult) {\n\t\t\tlocalResult.filterMatches.forEach(m => localMatchKeys.add(m.setting.key));\n\t\t\tcombinedFilterMatches = localResult.filterMatches;\n\t\t}\n\n\t\tconst remoteResult = this.rawSearchResults[SearchResultIdx.Remote];\n\t\tif (remoteResult) {\n\t\t\tremoteResult.filterMatches = remoteResult.filterMatches.filter(m => !localMatchKeys.has(m.setting.key));\n\t\t\tcombinedFilterMatches = combinedFilterMatches.concat(remoteResult.filterMatches);\n\n\t\t\tthis.newExtensionSearchResults = this.rawSearchResults[SearchResultIdx.NewExtensions];\n\t\t}\n\n\t\tcombinedFilterMatches = this.sortResults(combinedFilterMatches);\n\n\t\tthis.cachedUniqueSearchResults = {\n\t\t\tfilterMatches: combinedFilterMatches,\n\t\t\texactMatch: localResult?.exactMatch || remoteResult?.exactMatch\n\t\t};\n\n\t\treturn this.cachedUniqueSearchResults;\n\t}\n\n\tgetRawResults(): ISearchResult[] {\n\t\treturn this.rawSearchResults || [];\n\t}\n\n\tsetResult(order: SearchResultIdx, result: ISearchResult | null): void {\n\t\tthis.cachedUniqueSearchResults = null;\n\t\tthis.newExtensionSearchResults = null;\n\n\t\tthis.rawSearchResults = this.rawSearchResults || [];\n\t\tif (!result) {\n\t\t\tdelete this.rawSearchResults[order];\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.exactMatch) {\n\t\t\tthis.rawSearchResults = [];\n\t\t}\n\n\t\tthis.rawSearchResults[order] = result;\n\t\tthis.updateChildren();\n\t}\n\n\tupdateChildren(): void {\n\t\tthis.update({\n\t\t\tid: 'searchResultModel',\n\t\t\tlabel: 'searchResultModel',\n\t\t\tsettings: this.getFlatSettings()\n\t\t});\n\n\t\t// Save time, filter children in the search model instead of relying on the tree filter, which still requires heights to be calculated.\n\t\tconst isRemote = !!this.environmentService.remoteAuthority;\n\n\t\tthis.root.children = this.root.children\n\t\t\t.filter(child => child instanceof SettingsTreeSettingElement && child.matchesAllTags(this._viewState.tagFilters) && child.matchesScope(this._viewState.settingsTarget, isRemote) && child.matchesAnyExtension(this._viewState.extensionFilters) && child.matchesAnyId(this._viewState.idFilters) && child.matchesAnyFeature(this._viewState.featureFilters) && child.matchesAllLanguages(this._viewState.languageFilter));\n\t\tthis.searchResultCount = this.root.children.length;\n\n\t\tif (this.newExtensionSearchResults?.filterMatches.length) {\n\t\t\tlet resultExtensionIds = this.newExtensionSearchResults.filterMatches\n\t\t\t\t.map(result => (<IExtensionSetting>result.setting))\n\t\t\t\t.filter(setting => setting.extensionName && setting.extensionPublisher)\n\t\t\t\t.map(setting => `${setting.extensionPublisher}.${setting.extensionName}`);\n\t\t\tresultExtensionIds = arrays.distinct(resultExtensionIds);\n\n\t\t\tif (resultExtensionIds.length) {\n\t\t\t\tconst newExtElement = new SettingsTreeNewExtensionsElement('newExtensions', resultExtensionIds);\n\t\t\t\tnewExtElement.parent = this._root;\n\t\t\t\tthis._root.children.push(newExtElement);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUniqueResultsCount(): number {\n\t\treturn this.searchResultCount ?? 0;\n\t}\n\n\tprivate getFlatSettings(): ISetting[] {\n\t\treturn this.getUniqueResults()?.filterMatches.map(m => m.setting) ?? [];\n\t}\n}\n\nexport interface IParsedQuery {\n\ttags: string[];\n\tquery: string;\n\textensionFilters: string[];\n\tidFilters: string[];\n\tfeatureFilters: string[];\n\tlanguageFilter: string | undefined;\n}\n\nconst tagRegex = /(^|\\s)@tag:(\"([^\"]*)\"|[^\"]\\S*)/g;\nconst extensionRegex = /(^|\\s)@ext:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst featureRegex = /(^|\\s)@feature:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst idRegex = /(^|\\s)@id:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst languageRegex = /(^|\\s)@lang:(\"([^\"]*)\"|[^\"]\\S*)?/g;\n\nexport function parseQuery(query: string): IParsedQuery {\n\t/**\n\t * A helper function to parse the query on one type of regex.\n\t *\n\t * @param query The search query\n\t * @param filterRegex The regex to use on the query\n\t * @param parsedParts The parts that the regex parses out will be appended to the array passed in here.\n\t * @returns The query with the parsed parts removed\n\t */\n\tfunction getTagsForType(query: string, filterRegex: RegExp, parsedParts: string[]): string {\n\t\treturn query.replace(filterRegex, (_, __, quotedParsedElement, unquotedParsedElement) => {\n\t\t\tconst parsedElement: string = unquotedParsedElement || quotedParsedElement;\n\t\t\tif (parsedElement) {\n\t\t\t\tparsedParts.push(...parsedElement.split(',').map(s => s.trim()).filter(s => !isFalsyOrWhitespace(s)));\n\t\t\t}\n\t\t\treturn '';\n\t\t});\n\t}\n\n\tconst tags: string[] = [];\n\tquery = query.replace(tagRegex, (_, __, quotedTag, tag) => {\n\t\ttags.push(tag || quotedTag);\n\t\treturn '';\n\t});\n\n\tquery = query.replace(`@${MODIFIED_SETTING_TAG}`, () => {\n\t\ttags.push(MODIFIED_SETTING_TAG);\n\t\treturn '';\n\t});\n\n\tquery = query.replace(`@${POLICY_SETTING_TAG}`, () => {\n\t\ttags.push(POLICY_SETTING_TAG);\n\t\treturn '';\n\t});\n\n\tconst extensions: string[] = [];\n\tconst features: string[] = [];\n\tconst ids: string[] = [];\n\tconst langs: string[] = [];\n\tquery = getTagsForType(query, extensionRegex, extensions);\n\tquery = getTagsForType(query, featureRegex, features);\n\tquery = getTagsForType(query, idRegex, ids);\n\n\tif (ENABLE_LANGUAGE_FILTER) {\n\t\tquery = getTagsForType(query, languageRegex, langs);\n\t}\n\n\tquery = query.trim();\n\n\t// For now, only return the first found language filter\n\treturn {\n\t\ttags,\n\t\textensionFilters: extensions,\n\t\tfeatureFilters: features,\n\t\tidFilters: ids,\n\t\tlanguageFilter: langs.length ? langs[0] : undefined,\n\t\tquery,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,YAAY;AACxB,SAAS,wBAAwB,2BAA2B;AAC5D,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,qBAAqB,2BAA2B;AACzD,SAAS,sBAAsB;AAC/B,SAAS,WAAW,eAAe,mBAAmB,eAAe;AACrE,SAAS,kCAAkC,wBAAwB,sBAAsB,oBAAoB,uCAAuC,iCAAiC;AACrL,SAAS,mBAAmB,eAAe,UAAU,eAAe,kBAAkB,wBAAwB;AAC9G,SAAS,oCAAoC;AAC7C,SAAS,eAAe,kBAAkB,uBAAuB,sBAAsB,gCAAgC,0BAA0B;AACjJ,SAAS,mBAAmB;AAC5B,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,iCAAiC,oBAAoB,uBAAuB,YAAY,8BAA8B;AAC/H,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AACxC,SAAS,uBAAuB;AAEzB,MAAM,8BAA8B;AAapC,MAAe,4BAA4B,WAAW;AAAA,EAtC7D,OAsC6D;AAAA;AAAA;AAAA,EAC5D;AAAA,EACA;AAAA,EAEQ,YAAY;AAAA,EACD,uBAAuB,IAAI,QAAc;AAAA,EACnD,sBAAsB,KAAK,qBAAqB;AAAA,EAEzD,YAAY,KAAa;AACxB,UAAM;AACN,SAAK,KAAK;AAAA,EACX;AAAA,EAEA,IAAI,WAAoB;AACvB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,SAAS,OAAgB;AAC5B,SAAK,YAAY;AACjB,SAAK,qBAAqB,KAAK;AAAA,EAChC;AACD;AAIO,MAAM,iCAAiC,oBAAoB;AAAA,EA/DlE,OA+DkE;AAAA;AAAA;AAAA,EACjE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEQ,oBAAiC,oBAAI,IAAI;AAAA,EACzC,YAAsC,CAAC;AAAA,EAE/C,IAAI,WAAqC;AACxC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,SAAS,aAAuC;AACnD,SAAK,YAAY;AAEjB,SAAK,oBAAoB,oBAAI,IAAI;AACjC,SAAK,UAAU,QAAQ,WAAS;AAC/B,UAAI,iBAAiB,4BAA4B;AAChD,aAAK,kBAAkB,IAAI,MAAM,QAAQ,GAAG;AAAA,MAC7C;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,YAAY,KAAa,OAA2B,OAAe,OAAe,cAAuB;AACxG,UAAM,GAAG;AAET,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,eAAe;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,KAAsB;AACrC,WAAO,KAAK,kBAAkB,IAAI,GAAG;AAAA,EACtC;AACD;AAEO,MAAM,yCAAyC,oBAAoB;AAAA,EACzE,YAAY,KAA6B,cAAwB;AAChE,UAAM,GAAG;AAD+B;AAAA,EAEzC;AAAA,EA3GD,OAwG0E;AAAA;AAAA;AAI1E;AAEO,MAAM,mCAAmC,oBAAoB;AAAA,EAwDnE,YACC,SACA,QACS,gBACQ,oBACA,gBACA,iBACA,gBACA,wBACA,sBAChB;AACD,UAAM,WAAW,OAAO,KAAK,MAAM,QAAQ,GAAG,CAAC;AARtC;AACQ;AACA;AACA;AACA;AACA;AACA;AAGjB,SAAK,UAAU;AACf,SAAK,SAAS;AAGd,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAxLD,OA8GoE;AAAA;AAAA;AAAA,EACnE,OAAwB,iBAAiB;AAAA,EAEzC;AAAA,EAEQ,mBAAkC;AAAA,EAClC,gBAA+B;AAAA;AAAA;AAAA;AAAA,EAKvC;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,cAAc;AAAA;AAAA;AAAA;AAAA,EAKd,iBAAiB;AAAA,EAEjB;AAAA,EACA,sBAAgC,CAAC;AAAA,EACjC,iCAA2C,CAAC;AAAA;AAAA;AAAA;AAAA,EAK5C,yBAAoE,oBAAI,IAA0C;AAAA,EAElH;AAAA,EACA;AAAA,EAsBA,IAAI,kBAA0B;AAC7B,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,WAAW;AAAA,IACjB;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,eAAuB;AAC1B,QAAI,CAAC,KAAK,eAAe;AACxB,WAAK,WAAW;AAAA,IACjB;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,aAAmB;AAC1B,QAAI,KAAK,QAAQ,OAAO;AACvB,WAAK,gBAAgB,KAAK,QAAQ;AAClC,WAAK,mBAAmB,KAAK,QAAQ,iBAAiB;AACtD;AAAA,IACD;AACA,UAAM,mBAAmB,0BAA0B,KAAK,QAAQ,KAAK,KAAK,OAAQ,IAAI,KAAK,QAAQ,oBAAoB;AACvH,SAAK,gBAAgB,iBAAiB;AACtC,SAAK,mBAAmB,iBAAiB;AAAA,EAC1C;AAAA,EAEQ,yBAAyB;AAChC,QAAI,KAAK,QAAQ,YAAY,SAAS,2BAA2B,gBAAgB;AAChF,YAAM,qBAAqB,KAAK,QAAQ,YAAY,MAAM,GAAG,2BAA2B,cAAc;AACtG,yBAAmB,KAAK,OAAO;AAC/B,WAAK,cAAc,mBAAmB,KAAK,IAAI;AAAA,IAChD,OAAO;AACN,WAAK,cAAc,KAAK,QAAQ,YAAY,KAAK,IAAI;AAAA,IACtD;AAAA,EACD;AAAA,EAEQ,uBAAuB;AAC9B,QAAI,yBAAyB,KAAK,SAAS,KAAK,cAAc,GAAG;AAChE,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,KAAK,QAAQ,SAAS,CAAC,KAAK,QAAQ,QAAQ,0BAA0B,KAAK,QAAQ,IAAI,IAAI;AACrG,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,KAAK,QAAQ,SAAS,UAAU;AAC1C,UAAI,KAAK,QAAQ,qBAAqB,sBAAsB,WAAW;AACtE,aAAK,YAAY,iBAAiB;AAAA,MACnC,OAAO;AACN,aAAK,YAAY,iBAAiB;AAAA,MACnC;AAAA,IACD,WAAW,iBAAiB,KAAK,OAAO,GAAG;AAC1C,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,iBAAiB,KAAK,OAAO,GAAG;AAC1C,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,KAAK,QAAQ,SAAS,WAAW;AAC3C,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,KAAK,QAAQ,SAAS,UAAU;AAC1C,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,KAAK,QAAQ,SAAS,WAAW;AAC3C,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,KAAK,QAAQ,SAAS,WAAW,KAAK,QAAQ,iBACxD,CAAC,UAAU,QAAQ,UAAU,SAAS,EAAE,SAAS,KAAK,QAAQ,aAAa,GAAG;AAC9E,WAAK,YAAY,iBAAiB;AAAA,IACnC,WAAW,MAAM,QAAQ,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,KAAK,SAAS,iBAAiB,IAAI,KAAK,KAAK,QAAQ,KAAK,WAAW,GAAG;AACnI,UAAI,KAAK,QAAQ,KAAK,SAAS,iBAAiB,OAAO,GAAG;AACzD,aAAK,YAAY,iBAAiB;AAAA,MACnC,WAAW,KAAK,QAAQ,KAAK,SAAS,iBAAiB,MAAM,GAAG;AAC/D,aAAK,YAAY,iBAAiB;AAAA,MACnC,OAAO;AACN,aAAK,YAAY,iBAAiB;AAAA,MACnC;AAAA,IACD,WAAW,gBAAgB,KAAK,OAAO,GAAG;AACzC,UAAI,KAAK,QAAQ,mBAAmB;AACnC,aAAK,YAAY,iBAAiB;AAAA,MACnC,OAAO;AACN,aAAK,YAAY,iBAAiB;AAAA,MACnC;AAAA,IACD,WAAW,KAAK,QAAQ,sBAAsB;AAC7C,WAAK,YAAY,iBAAiB;AAAA,IACnC,OAAO;AACN,WAAK,YAAY,iBAAiB;AAAA,IACnC;AAAA,EACD;AAAA,EAEA,cAAc;AACb,UAAM,kBAAkB,KAAK,mBAAmB,KAAK,OAAO;AAC5D,UAAM,gBAAgB,eAAe,KAAK,QAAQ,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,oBAAoB;AACtH,SAAK,OAAO,eAAe,KAAK,kBAAkB;AAAA,EACnD;AAAA,EAEQ,mBAAmB,SAAmC;AAC7D,QAAI,CAAC,KAAK,uBAAuB,eAAe,aAAa,CAAC,KAAK,uBAAuB,eAAe,iBAAiB,UAAU;AACnI,UAAI,QAAQ,UAAU,mBAAmB,aAAa;AACrD,eAAO,oBAAoB;AAAA,MAC5B;AACA,UAAI,KAAK,qBAAqB,+BAA+B,QAAQ,GAAG,KAAK,KAAK,mBAAmB,oBAAoB,YAAY;AACpI,eAAO,oBAAoB;AAAA,MAC5B;AAAA,IACD;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,OAAO,eAA+B,oBAAmC;AAChF,QAAI,EAAE,cAAc,WAAW,gBAAgB,4BAA4B,iBAAiB,IAAI;AAEhG,YAAQ,gBAAgB;AAAA,MACvB,KAAK;AAAA,MACL,KAAK;AACJ,aAAK,cAAc,CAAC,CAAC,KAAK,QAAQ,cAAc,CAAC;AACjD;AAAA,IACF;AAEA,QAAI,eAAe,eAAe,UAAU,cAAc,IAAI,UAAU;AACxE,UAAM,sBAAgC,CAAC;AACvC,UAAM,iCAA2C,CAAC;AAClD,SAAK,oBAAoB,mBAAmB,qBAAqB,OAAO,UAAU,mBAAmB,aAAa;AACjH,0BAAoB,KAAK,YAAY;AAAA,IACtC;AACA,SAAK,oBAAoB,mBAAmB,sBAAsB,OAAO,UAAU,oBAAoB,aAAa;AACnH,0BAAoB,KAAK,SAAS;AAAA,IACnC;AACA,SAAK,oBAAoB,mBAAmB,qBAAqB,OAAO,UAAU,mBAAmB,aAAa;AACjH,0BAAoB,KAAK,OAAO;AAAA,IACjC;AAEA,QAAI,UAAU,qBAAqB;AAClC,iBAAW,sBAAsB,UAAU,qBAAqB;AAC/D,cAAM,oBAAoB,2BAA2B,IAAI,kBAAkB;AAC3E,YAAI,mBAAmB;AACtB,cAAI,KAAK,gBAAgB,uBAAuB,kBAAkB,GAAG;AACpE,gBAAI,qBAAqB,sBAAsB,OAAO,kBAAkB,SAAS,aAAa,aAAa;AAC1G,6CAA+B,KAAK,kBAAkB;AAAA,YACvD;AACA,iBAAK,qBAAqB,sBAAsB,mBAAmB,qBAAqB,OAAO,kBAAkB,WAAW,aAAa,aAAa;AACrJ,kCAAoB,KAAK,aAAa,kBAAkB,EAAE;AAAA,YAC3D;AACA,iBAAK,qBAAqB,sBAAsB,mBAAmB,sBAAsB,OAAO,kBAAkB,YAAY,aAAa,aAAa;AACvJ,kCAAoB,KAAK,UAAU,kBAAkB,EAAE;AAAA,YACxD;AACA,iBAAK,qBAAqB,sBAAsB,mBAAmB,qBAAqB,OAAO,kBAAkB,WAAW,aAAa,aAAa;AACrJ,kCAAoB,KAAK,QAAQ,kBAAkB,EAAE;AAAA,YACtD;AAAA,UACD;AACA,eAAK,uBAAuB,IAAI,oBAAoB,iBAAiB;AAAA,QACtE;AAAA,MACD;AAAA,IACD;AACA,SAAK,sBAAsB;AAC3B,SAAK,iCAAiC;AAItC,SAAK,qBAAqB,KAAK,QAAQ;AAEvC,QAAI,UAAU,aAAa;AAC1B,WAAK,iBAAiB;AACtB,qBAAe;AACf,qBAAe,UAAU;AACzB,WAAK,aAAa,UAAU;AAC5B,WAAK,eAAe,UAAU;AAAA,IAC/B,WAAW,oBAAoB,KAAK,uBAAuB,IAAI,gBAAgB,GAAG;AACjF,YAAM,iBAAiB,KAAK,uBAAuB,IAAI,gBAAgB;AAGvE,sBAAgB,eAAe,eAAe,cAAc,IAAI,eAAe,iBAAiB;AAChG,WAAK,aAAa,gBAAgB,eAAe,cAAc;AAC/D,WAAK,eAAe,eAAe,gBAAgB,UAAU;AAE7D,YAAM,iBAAiB,SAAS,GAA2B,WAAW,aAAa,EAAE,kCAAkC;AACvH,YAAM,SAAS,eAAe,IAAI,IAAI,gBAAgB,GAAG,GAAG;AAC5D,YAAM,sBAAsB,kBAAkB,MAAM,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI;AACnF,UAAI,qBAAqB;AACxB,aAAK,qBAAqB;AAAA,MAC3B;AAAA,IACD,OAAO;AACN,WAAK,aAAa,gBAAgB,UAAU,cAAc;AAC1D,WAAK,eAAe,UAAU;AAAA,IAC/B;AAEA,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,QAAI,gBAAgB,KAAK,QAAQ,QAAQ,KAAK,QAAQ,KAAK,QAAQ,cAAc,KAAK,gBAAgB;AAErG,WAAK,OAAO,oBAAI,IAAY;AAC5B,UAAI,cAAc;AACjB,aAAK,KAAK,IAAI,oBAAoB;AAAA,MACnC;AAEA,WAAK,QAAQ,MAAM,QAAQ,SAAO,KAAK,KAAM,IAAI,GAAG,CAAC;AAErD,UAAI,KAAK,QAAQ,YAAY;AAC5B,aAAK,KAAK,IAAI,qCAAqC;AAAA,MACpD;AAEA,UAAI,KAAK,gBAAgB;AACxB,aAAK,KAAK,IAAI,kBAAkB;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,eAAe,YAAmC;AACjD,QAAI,CAAC,YAAY,MAAM;AAGtB,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,MAAM;AAGf,WAAK,YAAY;AAAA,IAClB;AAGA,WAAO,CAAC,CAAC,KAAK,MAAM,QACnB,MAAM,KAAK,UAAU,EAAE,MAAM,SAAO,KAAK,KAAM,IAAI,GAAG,CAAC;AAAA,EACzD;AAAA,EAEA,aAAa,OAAuB,UAA4B;AAC/D,UAAM,eAAe,IAAI,MAAM,KAAK,IAAI,oBAAoB,mBAAmB;AAE/E,QAAI,CAAC,KAAK,QAAQ,OAAO;AACxB,aAAO;AAAA,IACR;AAEA,QAAI,iBAAiB,oBAAoB,aAAa;AACrD,aAAO,mBAAmB,SAAS,KAAK,QAAQ,KAAK;AAAA,IACtD;AAEA,QAAI,iBAAiB,oBAAoB,kBAAkB;AAC1D,aAAO,cAAc,SAAS,KAAK,QAAQ,KAAK;AAAA,IACjD;AAEA,QAAI,iBAAiB,oBAAoB,WAAW;AACnD,aAAO,iBAAiB,SAAS,KAAK,QAAQ,KAAK;AAAA,IACpD;AAEA,QAAI,iBAAiB,oBAAoB,aAAa;AACrD,aAAO,sBAAsB,SAAS,KAAK,QAAQ,KAAK;AAAA,IACzD;AAEA,QAAI,iBAAiB,oBAAoB,YAAY;AACpD,UAAI,UAAU;AACb,eAAO,qBAAqB,SAAS,KAAK,QAAQ,KAAK;AAAA,MACxD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,oBAAoB,kBAAyC;AAC5D,QAAI,CAAC,oBAAoB,CAAC,iBAAiB,MAAM;AAChD,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,QAAQ,eAAe;AAChC,aAAO;AAAA,IACR;AAEA,WAAO,MAAM,KAAK,gBAAgB,EAAE,KAAK,iBAAe,YAAY,YAAY,MAAM,KAAK,QAAQ,cAAe,GAAG,YAAY,CAAC;AAAA,EACnI;AAAA,EAEA,kBAAkB,gBAAuC;AACxD,QAAI,CAAC,kBAAkB,CAAC,eAAe,MAAM;AAC5C,aAAO;AAAA,IACR;AAEA,UAAM,WAAW,QAAQ,SAAU,KAAK,WAAS,MAAM,OAAO,UAAU;AAExE,WAAO,MAAM,KAAK,cAAc,EAAE,KAAK,YAAU;AAChD,UAAI,YAAY,SAAS,UAAU;AAClC,cAAM,UAAU,SAAS,SAAS,KAAK,CAAAA,aAAW,cAAc,WAAWA,SAAQ,EAAE;AACrF,YAAI,SAAS;AACZ,gBAAM,WAAW,QAAQ,UAAU,IAAI,aAAW,yBAAyB,OAAO,CAAC;AACnF,iBAAO,YAAY,CAAC,KAAK,QAAQ,iBAAiB,SAAS,KAAK,aAAW,QAAQ,KAAK,KAAK,QAAQ,IAAI,YAAY,CAAC,CAAC;AAAA,QACxH,OAAO;AACN,iBAAO;AAAA,QACR;AAAA,MACD,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,aAAa,WAAkC;AAC9C,QAAI,CAAC,aAAa,CAAC,UAAU,MAAM;AAClC,aAAO;AAAA,IACR;AACA,WAAO,UAAU,IAAI,KAAK,QAAQ,GAAG;AAAA,EACtC;AAAA,EAEA,oBAAoB,gBAAkC;AACrD,QAAI,CAAC,gBAAgB;AAEpB,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,gBAAgB,uBAAuB,cAAc,GAAG;AAEjE,aAAO;AAAA,IACR;AAMA,QAAI,KAAK,QAAQ,UAAU,mBAAmB,sBAAsB;AACnE,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AACD;AAGA,SAAS,yBAAyB,SAAyB;AAC1D,YAAU,uBAAuB,OAAO,EACtC,QAAQ,SAAS,IAAI;AAEvB,SAAO,IAAI,OAAO,IAAI,OAAO,KAAK,GAAG;AACtC;AALS;AAOF,IAAM,oBAAN,MAAwB;AAAA,EAK9B,YACoB,YACX,qBACyC,uBACd,kBACO,yBACR,iBACjC;AANkB;AACX;AACyC;AACd;AACO;AACR;AAAA,EAEnC;AAAA,EAvgBD,OA0f+B;AAAA;AAAA;AAAA,EACpB;AAAA,EACF;AAAA,EACS,6BAA6B,oBAAI,IAA0C;AAAA,EAY5F,IAAI,OAAiC;AACpC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,OAAO,aAAa,KAAK,UAAgB;AACxC,SAAK,2BAA2B,MAAM;AAEtC,UAAM,UAAU,KAAK,+BAA+B,UAAU;AAC9D,QAAI,QAAQ,SAAS,CAAC,aAAa,0BAA0B;AAC5D,MAA2B,QAAQ,SAAS,CAAC,EAAG,eAAe;AAAA,IAChE;AAEA,QAAI,KAAK,OAAO;AACf,WAAK,gBAAgB,KAAK,MAAM,QAAQ;AACxC,WAAK,MAAM,WAAW,QAAQ;AAAA,IAC/B,OAAO;AACN,WAAK,QAAQ;AAAA,IACd;AAAA,EACD;AAAA,EAEA,qBAAqB,kBAAiC;AACrD,SAAK,sBAAsB;AAC3B,SAAK,mCAAmC;AAAA,EACzC;AAAA,EAEQ,gBAAgB,UAAoC;AAC3D,eAAW,SAAS,UAAU;AAC7B,WAAK,iBAAiB,KAAK;AAAA,IAC5B;AAAA,EACD;AAAA,EAEQ,iBAAiB,SAA8B;AACtD,QAAI,mBAAmB,0BAA0B;AAChD,WAAK,gBAAgB,QAAQ,QAAQ;AAAA,IACtC;AAEA,YAAQ,QAAQ;AAAA,EACjB;AAAA,EAEA,kBAAkB,MAAmD;AACpE,WAAO,KAAK,2BAA2B,IAAI,IAAI,KAAK;AAAA,EACrD;AAAA,EAEA,qBAAqB,MAAoB;AACxC,QAAI,CAAC,KAAK,2BAA2B,IAAI,IAAI,GAAG;AAC/C;AAAA,IACD;AAEA,SAAK,kBAAkB,KAAK,2BAA2B,IAAI,IAAI,CAAE;AAAA,EAClE;AAAA,EAEQ,qCAA2C;AAClD,SAAK,kBAAkB,CAAC,GAAG,KAAK,2BAA2B,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,OAAK,EAAE,WAAW,CAAC;AAAA,EACvG;AAAA,EAEQ,kBAAkB,UAA8C;AACvE,eAAW,WAAW,UAAU;AAC/B,cAAQ,YAAY;AAAA,IACrB;AAAA,EACD;AAAA,EAEQ,+BAA+B,UAA+B,QAA6D;AAClI,UAAM,QAAQ,SAAS,KAAK,SAAS,MAAM,IAAI,IAAI;AACnD,UAAM,UAAU,IAAI,yBAAyB,SAAS,IAAI,QAAW,SAAS,OAAO,OAAO,KAAK;AACjG,YAAQ,SAAS;AAEjB,UAAM,WAAqC,CAAC;AAC5C,QAAI,SAAS,UAAU;AACtB,YAAM,kBAAkB,SAAS,SAAS,IAAI,OAAK,KAAK,iCAAiC,GAAG,OAAO,CAAC,EAClG,OAAO,QAAM,GAAG,QAAQ,qBAAqB,GAAG,eAAe,IAAI;AACrE,eAAS,KAAK,GAAG,eAAe;AAAA,IACjC;AAEA,QAAI,SAAS,UAAU;AACtB,YAAM,gBAAgB,SAAS,SAAS,IAAI,WAAS,KAAK,+BAA+B,OAAO,OAAO,CAAC;AACxG,eAAS,KAAK,GAAG,aAAa;AAAA,IAC/B;AAEA,YAAQ,WAAW;AAEnB,WAAO;AAAA,EACR;AAAA,EAEQ,SAAS,SAAsC;AACtD,QAAI,QAAQ,QAAQ;AACnB,aAAO,IAAI,KAAK,SAAS,QAAQ,MAAM;AAAA,IACxC,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEQ,iCAAiC,SAAmB,QAA8D;AACzH,UAAM,UAAU,IAAI;AAAA,MACnB;AAAA,MACA;AAAA,MACA,KAAK,WAAW;AAAA,MAChB,KAAK;AAAA,MACL,KAAK,WAAW;AAAA,MAChB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IAAqB;AAE3B,UAAM,eAAe,KAAK,2BAA2B,IAAI,QAAQ,GAAG,KAAK,CAAC;AAC1E,iBAAa,KAAK,OAAO;AACzB,SAAK,2BAA2B,IAAI,QAAQ,KAAK,YAAY;AAC7D,WAAO;AAAA,EACR;AACD;AA3Ha,oBAAN;AAAA,EAQJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;AAqIN,SAAS,eAAe,KAAa,QAAwB,gBAAoC,sBAAsE;AAC7K,QAAM,mBAAmB,IAAI,MAAM,MAAM,IAAI,EAAE,UAAU,OAAO,IAAI;AACpE,QAAM,YAAY,qBAAqB,QAAQ,KAAK,gBAAgB;AACpE,QAAM,iBAAiB,WAAW,oBAAoB,cAAc,qBACnE,WAAW,oBAAoB,aAAa,mBAC3C,WAAW,oBAAoB,cAAc,oBAC5C,WAAW,oBAAoB,YAAY,mBAC1C;AACJ,QAAM,yBAAyB,WAAW,oBAAoB,cAAc,gBAC3E,WAAW,oBAAoB,aAAa,cAC3C,WAAW,oBAAoB,cAAc,eAC5C,WAAW,oBAAoB,YAAY,cAC1C;AACJ,MAAI,eAAe,OAAO,UAAU,cAAc,MAAM;AAExD,QAAM,sBAAsB,UAAU;AACtC,QAAM,6BAA6B,oBAAI,IAA0C;AAIjF,MAAI,gBAAgB;AACnB,mBAAe;AAAA,EAChB;AACA,MAAI,qBAAqB;AAExB,eAAW,sBAAsB,qBAAqB;AACrD,iCAA2B,IAAI,oBAAoB,qBAAqB,QAAQ,KAAK,EAAE,mBAAmB,CAAC,CAAC;AAAA,IAC7G;AAGA,QAAI,gBAAgB;AACnB,UAAI,2BAA2B,IAAI,cAAc,GAAG;AACnD,cAAM,gBAAgB,2BAA2B,IAAI,cAAc,EAAG,sBAAsB,GAAG;AAC/F,YAAI,OAAO,kBAAkB,aAAa;AACzC,yBAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,SAAO,EAAE,cAAc,WAAW,gBAAgB,4BAA4B,kBAAkB,eAAe;AAChH;AAzCgB;AA2ChB,SAAS,WAAW,IAAoB;AACvC,SAAO,GAAG,QAAQ,UAAU,GAAG;AAChC;AAFS;AAIF,SAAS,0BAA0B,KAAa,UAAkB,IAAI,uBAAgC,OAA4C;AACxJ,QAAM,aAAa,IAAI,YAAY,GAAG;AACtC,MAAI,WAAW;AACf,MAAI,cAAc,GAAG;AACpB,eAAW,IAAI,UAAU,GAAG,UAAU;AACtC,UAAM,IAAI,UAAU,aAAa,CAAC;AAAA,EACnC;AAEA,YAAU,QAAQ,QAAQ,OAAO,GAAG;AACpC,aAAW,qBAAqB,UAAU,OAAO;AACjD,aAAW,WAAW,QAAQ;AAE9B,MAAI,sBAAsB;AACzB,UAAM,IAAI,QAAQ,WAAW,EAAE;AAC/B,UAAM,gBAAgB;AAAA,EACvB;AAEA,QAAM,QAAQ,WAAW,GAAG;AAC5B,SAAO,EAAE,UAAU,MAAM;AAC1B;AAnBgB;AAqBhB,SAAS,WAAW,KAAqB;AACxC,QAAM,IACJ,QAAQ,iBAAiB,CAAC,GAAG,OAAO,WAAW,GAAG,YAAY,CAAC,EAAE,EACjE,QAAQ,sBAAsB,OAAO,EACrC,QAAQ,WAAW,WAAS,MAAM,YAAY,CAAC,EAC/C,QAAQ,YAAY,WAAS;AAC7B,WAAO,cAAc,IAAI,MAAM,YAAY,CAAC,IAC3C,MAAM,YAAY,IAClB;AAAA,EACF,CAAC;AAEF,aAAW,CAAC,GAAG,CAAC,KAAK,mBAAmB;AACvC,UAAM,IAAI,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,IAAI,GAAG,CAAC;AAAA,EACpD;AAEA,SAAO;AACR;AAhBS;AA0BT,SAAS,qBAAqB,UAAkB,SAAyB;AACxE,QAAM,SAAS,wBAAC,YAAqB;AAEpC,QAAI,CAAC,aAAa,KAAK,QAAQ,GAAG;AACjC,gBAAU,QAAQ,QAAQ,gBAAgB,EAAE;AAAA,IAC7C;AACA,UAAM,QAAQ,QAAQ,MAAM,GAAG,EAC7B,IAAI,UAAQ;AAEZ,UAAI,KAAK,QAAQ,MAAM,EAAE,EAAE,YAAY,MAAM,SAAS,YAAY,GAAG;AACpE,eAAO,KAAK,QAAQ,MAAM,EAAE;AAAA,MAC7B,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD,CAAC;AACF,WAAO,MAAM,QAAQ;AACpB,YAAM,MAAM,IAAI,OAAO,IAAI,MAAM,KAAK,KAAK,CAAC,WAAW,GAAG;AAC1D,UAAI,IAAI,KAAK,QAAQ,GAAG;AACvB,eAAO,SAAS,QAAQ,KAAK,EAAE;AAAA,MAChC;AAEA,UAAI,SAAS;AACZ,cAAM,IAAI;AAAA,MACX,OAAO;AACN,cAAM,MAAM;AAAA,MACb;AAAA,IACD;AAEA,WAAO;AAAA,EACR,GA5Be;AA8Bf,MAAI,UAAU,OAAO,IAAI;AACzB,MAAI,YAAY,MAAM;AACrB,cAAU,OAAO,KAAK;AAAA,EACvB;AAEA,MAAI,YAAY,MAAM;AACrB,cAAU;AAAA,EACX;AAEA,SAAO;AACR;AAzCS;AA2CT,SAAS,yBAAyB,SAAmB,gBAA0C;AAC9F,SAAO,oCACN,CAAC,CAAC,eAAe,4BACjB,CAAC,CAAC,QAAQ;AACZ;AAJS;AAMT,SAAS,iBAAiB,SAA4B;AACrD,SAAO,QAAQ,QAAQ,mBACtB,QAAQ,QAAQ,oBAChB,QAAQ,QAAQ,oCAChB,QAAQ,QAAQ,gCAChB,QAAQ,QAAQ,2BAChB,QAAQ,QAAQ;AAClB;AAPS;AAST,SAAS,iBAAiB,SAA4B;AACrD,SAAO,QAAQ,QAAQ;AACxB;AAFS;AAKF,SAAS,wCAAwC,KAAsB;AAC7E,SAAO,QAAQ;AAChB;AAFgB;AAIhB,SAAS,yBAAyB,EAAE,KAAK,GAAgB,KAAsB;AAC9E,MAAI,SAAS,YAAY,SAAS,aAAa,SAAS,aAAa,SAAS,UAAU;AACvF,WAAO;AAAA,EACR;AAEA,MAAI,wCAAwC,GAAG,KAAK,MAAM,QAAQ,IAAI,KAAK,KAAK,WAAW,GAAG;AAC7F,WAAO,KAAK,SAAS,MAAM,MAAM,KAAK,SAAS,QAAQ,KAAK,KAAK,SAAS,SAAS,KAAK,KAAK,SAAS,SAAS,KAAK,KAAK,SAAS,QAAQ;AAAA,EAC3I;AAEA,SAAO;AACR;AAVS;AAYT,SAAS,gBAAgB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAAsB;AACrB,MAAI,SAAS,UAAU;AACtB,WAAO;AAAA,EACR;AAGA,MACC,kBAAkB,gBAAgB,KAClC,kBAAkB,uBAAuB,KACzC,kBAAkB,0BAA0B,GAC3C;AACD,WAAO;AAAA,EACR;AAMA,OAAK,+BAA+B,QAAQ,+BAA+B,WACvE,CAAC,OAAO,KAAK,2BAA2B,CAAC,CAAC,EAAE,SAAS,IAAI,GAAG;AAC/D,WAAO;AAAA,EACR;AAEA,QAAM,UAAU,CAAC,GAAG,OAAO,OAAO,oBAAoB,CAAC,CAAC,GAAG,GAAG,OAAO,OAAO,2BAA2B,CAAC,CAAC,CAAC;AAE1G,MAAI,8BAA8B,OAAO,+BAA+B,UAAU;AACjF,YAAQ,KAAK,0BAA0B;AAAA,EACxC;AAGA,QAAM,cAAc,QAAQ,IAAI,CAAC,WAA0B;AAC1D,QAAI,MAAM,QAAQ,OAAO,KAAK,GAAG;AAChC,aAAO,OAAO;AAAA,IACf;AACA,WAAO,CAAC,MAAM;AAAA,EACf,CAAC,EAAE,KAAK;AAER,SAAO,YAAY,MAAM,CAAC,WAAW,yBAAyB,QAAQ,GAAG,CAAC;AAC3E;AA5CS;AA8CT,SAAS,0BAA0B,OAA0B;AAC5D,QAAM,6BAA6B,CAAC,UAAU,WAAW,QAAQ,WAAW,QAAQ;AACpF,QAAM,OAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAClD,SAAO,KAAK,MAAM,CAAAC,UAAQ,2BAA2B,SAASA,KAAI,CAAC;AACpE;AAJS;AAMF,IAAW,kBAAX,kBAAWC,qBAAX;AACN,EAAAA,kCAAA,WAAQ,KAAR;AACA,EAAAA,kCAAA,YAAS,KAAT;AACA,EAAAA,kCAAA,mBAAgB,KAAhB;AAHiB,SAAAA;AAAA,GAAA;AAMX,IAAM,oBAAN,cAAgC,kBAAkB;AAAA,EASxD,YACC,WACA,yBACA,oBACgC,sBACe,oBAC7B,iBACO,wBACR,gBAChB;AACD,UAAM,WAAW,oBAAoB,sBAAsB,iBAAiB,wBAAwB,cAAc;AALnE;AAM/C,SAAK,0BAA0B;AAC/B,SAAK,OAAO,EAAE,IAAI,qBAAqB,OAAO,GAAG,CAAC;AAAA,EACnD;AAAA,EA53BD,OAs2ByD;AAAA;AAAA;AAAA,EAChD,mBAA2C;AAAA,EAC3C,4BAAkD;AAAA,EAClD,4BAAkD;AAAA,EAClD,oBAAmC;AAAA,EACnC;AAAA,EAEC,KAAK;AAAA,EAiBN,YAAY,eAAiD;AACpE,QAAI,KAAK,yBAAyB;AACjC,iBAAW,SAAS,eAAe;AAClC,cAAM,QAAQ,gBAAgB,KAAK,wBAAwB,IAAI,MAAM,QAAQ,GAAG;AAAA,MACjF;AAAA,IACD;AAGA,QAAI,CAAC,KAAK,WAAW,OAAO;AAC3B,aAAO,cAAc,KAAK,CAAC,GAAG,MAAM,0BAA0B,EAAE,QAAQ,eAAe,EAAE,QAAQ,aAAa,CAAC;AAAA,IAChH;AAIA,kBAAc,KAAK,CAAC,GAAG,MAAM;AAC5B,UAAI,EAAE,cAAc,EAAE,WAAW;AAGhC,eAAO,EAAE,YAAY,EAAE;AAAA,MACxB,WAAW,EAAE,cAAc,iBAAiB,aAAa;AAGxD,eAAO,EAAE,QAAQ,EAAE;AAAA,MACpB,OAAO;AAGN,eAAO,0BAA0B,EAAE,QAAQ,eAAe,EAAE,QAAQ,aAAa;AAAA,MAClF;AAAA,IACD,CAAC;AAID,WAAO,OAAO,SAAS,eAAe,CAAC,UAAU,MAAM,QAAQ,GAAG;AAAA,EACnE;AAAA,EAEA,mBAAyC;AACxC,QAAI,KAAK,2BAA2B;AACnC,aAAO,KAAK;AAAA,IACb;AAEA,QAAI,CAAC,KAAK,kBAAkB;AAC3B,aAAO;AAAA,IACR;AAEA,QAAI,wBAAyC,CAAC;AAE9C,UAAM,iBAAiB,oBAAI,IAAI;AAC/B,UAAM,cAAc,KAAK,iBAAiB,aAAqB;AAC/D,QAAI,aAAa;AAChB,kBAAY,cAAc,QAAQ,OAAK,eAAe,IAAI,EAAE,QAAQ,GAAG,CAAC;AACxE,8BAAwB,YAAY;AAAA,IACrC;AAEA,UAAM,eAAe,KAAK,iBAAiB,cAAsB;AACjE,QAAI,cAAc;AACjB,mBAAa,gBAAgB,aAAa,cAAc,OAAO,OAAK,CAAC,eAAe,IAAI,EAAE,QAAQ,GAAG,CAAC;AACtG,8BAAwB,sBAAsB,OAAO,aAAa,aAAa;AAE/E,WAAK,4BAA4B,KAAK,iBAAiB,qBAA6B;AAAA,IACrF;AAEA,4BAAwB,KAAK,YAAY,qBAAqB;AAE9D,SAAK,4BAA4B;AAAA,MAChC,eAAe;AAAA,MACf,YAAY,aAAa,cAAc,cAAc;AAAA,IACtD;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,gBAAiC;AAChC,WAAO,KAAK,oBAAoB,CAAC;AAAA,EAClC;AAAA,EAEA,UAAU,OAAwB,QAAoC;AACrE,SAAK,4BAA4B;AACjC,SAAK,4BAA4B;AAEjC,SAAK,mBAAmB,KAAK,oBAAoB,CAAC;AAClD,QAAI,CAAC,QAAQ;AACZ,aAAO,KAAK,iBAAiB,KAAK;AAClC;AAAA,IACD;AAEA,QAAI,OAAO,YAAY;AACtB,WAAK,mBAAmB,CAAC;AAAA,IAC1B;AAEA,SAAK,iBAAiB,KAAK,IAAI;AAC/B,SAAK,eAAe;AAAA,EACrB;AAAA,EAEA,iBAAuB;AACtB,SAAK,OAAO;AAAA,MACX,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,UAAU,KAAK,gBAAgB;AAAA,IAChC,CAAC;AAGD,UAAM,WAAW,CAAC,CAAC,KAAK,mBAAmB;AAE3C,SAAK,KAAK,WAAW,KAAK,KAAK,SAC7B,OAAO,WAAS,iBAAiB,8BAA8B,MAAM,eAAe,KAAK,WAAW,UAAU,KAAK,MAAM,aAAa,KAAK,WAAW,gBAAgB,QAAQ,KAAK,MAAM,oBAAoB,KAAK,WAAW,gBAAgB,KAAK,MAAM,aAAa,KAAK,WAAW,SAAS,KAAK,MAAM,kBAAkB,KAAK,WAAW,cAAc,KAAK,MAAM,oBAAoB,KAAK,WAAW,cAAc,CAAC;AACzZ,SAAK,oBAAoB,KAAK,KAAK,SAAS;AAE5C,QAAI,KAAK,2BAA2B,cAAc,QAAQ;AACzD,UAAI,qBAAqB,KAAK,0BAA0B,cACtD,IAAI,YAA8B,OAAO,OAAQ,EACjD,OAAO,aAAW,QAAQ,iBAAiB,QAAQ,kBAAkB,EACrE,IAAI,aAAW,GAAG,QAAQ,kBAAkB,IAAI,QAAQ,aAAa,EAAE;AACzE,2BAAqB,OAAO,SAAS,kBAAkB;AAEvD,UAAI,mBAAmB,QAAQ;AAC9B,cAAM,gBAAgB,IAAI,iCAAiC,iBAAiB,kBAAkB;AAC9F,sBAAc,SAAS,KAAK;AAC5B,aAAK,MAAM,SAAS,KAAK,aAAa;AAAA,MACvC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,wBAAgC;AAC/B,WAAO,KAAK,qBAAqB;AAAA,EAClC;AAAA,EAEQ,kBAA8B;AACrC,WAAO,KAAK,iBAAiB,GAAG,cAAc,IAAI,OAAK,EAAE,OAAO,KAAK,CAAC;AAAA,EACvE;AACD;AAzJa,oBAAN;AAAA,EAaJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAjBU;AAoKb,MAAM,WAAW;AACjB,MAAM,iBAAiB;AACvB,MAAM,eAAe;AACrB,MAAM,UAAU;AAChB,MAAM,gBAAgB;AAEf,SAAS,WAAW,OAA6B;AASvD,WAAS,eAAeC,QAAe,aAAqB,aAA+B;AAC1F,WAAOA,OAAM,QAAQ,aAAa,CAAC,GAAG,IAAI,qBAAqB,0BAA0B;AACxF,YAAM,gBAAwB,yBAAyB;AACvD,UAAI,eAAe;AAClB,oBAAY,KAAK,GAAG,cAAc,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC,EAAE,OAAO,OAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAAA,MACrG;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AARS;AAUT,QAAM,OAAiB,CAAC;AACxB,UAAQ,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI,WAAW,QAAQ;AAC1D,SAAK,KAAK,OAAO,SAAS;AAC1B,WAAO;AAAA,EACR,CAAC;AAED,UAAQ,MAAM,QAAQ,IAAI,oBAAoB,IAAI,MAAM;AACvD,SAAK,KAAK,oBAAoB;AAC9B,WAAO;AAAA,EACR,CAAC;AAED,UAAQ,MAAM,QAAQ,IAAI,kBAAkB,IAAI,MAAM;AACrD,SAAK,KAAK,kBAAkB;AAC5B,WAAO;AAAA,EACR,CAAC;AAED,QAAM,aAAuB,CAAC;AAC9B,QAAM,WAAqB,CAAC;AAC5B,QAAM,MAAgB,CAAC;AACvB,QAAM,QAAkB,CAAC;AACzB,UAAQ,eAAe,OAAO,gBAAgB,UAAU;AACxD,UAAQ,eAAe,OAAO,cAAc,QAAQ;AACpD,UAAQ,eAAe,OAAO,SAAS,GAAG;AAE1C,MAAI,wBAAwB;AAC3B,YAAQ,eAAe,OAAO,eAAe,KAAK;AAAA,EACnD;AAEA,UAAQ,MAAM,KAAK;AAGnB,SAAO;AAAA,IACN;AAAA,IACA,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,IAChB,WAAW;AAAA,IACX,gBAAgB,MAAM,SAAS,MAAM,CAAC,IAAI;AAAA,IAC1C;AAAA,EACD;AACD;AA1DgB;",
  "names": ["feature", "type", "SearchResultIdx", "query"]
}
