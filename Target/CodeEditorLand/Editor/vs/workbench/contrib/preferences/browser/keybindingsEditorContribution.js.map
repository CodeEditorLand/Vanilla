{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { registerEditorContribution, EditorContributionInstantiation } from '../../../../editor/browser/editorExtensions.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { SnippetController2 } from '../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport { SmartSnippetInserter } from '../common/smartSnippetInserter.js';\nimport { DefineKeybindingOverlayWidget } from './keybindingWidgets.js';\nimport { parseTree, Node } from '../../../../base/common/json.js';\nimport { WindowsNativeResolvedKeybinding } from '../../../services/keybinding/common/windowsKeyboardMapper.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeColor } from '../../../../base/common/themables.js';\nimport { overviewRulerInfo, overviewRulerError } from '../../../../editor/common/core/editorColorRegistry.js';\nimport { IModelDeltaDecoration, ITextModel, TrackedRangeStickiness, OverviewRulerLane } from '../../../../editor/common/model.js';\nimport { KeybindingParser } from '../../../../base/common/keybindingParser.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { DEFINE_KEYBINDING_EDITOR_CONTRIB_ID, IDefineKeybindingEditorContribution } from '../../../services/preferences/common/preferences.js';\n\nconst NLS_KB_LAYOUT_ERROR_MESSAGE = nls.localize('defineKeybinding.kbLayoutErrorMessage', \"You won't be able to produce this key combination under your current keyboard layout.\");\n\nclass DefineKeybindingEditorContribution extends Disposable implements IDefineKeybindingEditorContribution {\n\n\tprivate readonly _keybindingDecorationRenderer = this._register(new MutableDisposable<KeybindingEditorDecorationsRenderer>());\n\n\tprivate readonly _defineWidget: DefineKeybindingOverlayWidget;\n\n\tconstructor(\n\t\tprivate _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService\n\t) {\n\t\tsuper();\n\n\t\tthis._defineWidget = this._register(this._instantiationService.createInstance(DefineKeybindingOverlayWidget, this._editor));\n\t\tthis._register(this._editor.onDidChangeModel(e => this._update()));\n\t\tthis._update();\n\t}\n\n\tprivate _update(): void {\n\t\tthis._keybindingDecorationRenderer.value = isInterestingEditorModel(this._editor, this._userDataProfileService)\n\t\t\t// Decorations are shown for the default keybindings.json **and** for the user keybindings.json\n\t\t\t? this._instantiationService.createInstance(KeybindingEditorDecorationsRenderer, this._editor)\n\t\t\t: undefined;\n\t}\n\n\tshowDefineKeybindingWidget(): void {\n\t\tif (isInterestingEditorModel(this._editor, this._userDataProfileService)) {\n\t\t\tthis._defineWidget.start().then(keybinding => this._onAccepted(keybinding));\n\t\t}\n\t}\n\n\tprivate _onAccepted(keybinding: string | null): void {\n\t\tthis._editor.focus();\n\t\tif (keybinding && this._editor.hasModel()) {\n\t\t\tconst regexp = new RegExp(/\\\\/g);\n\t\t\tconst backslash = regexp.test(keybinding);\n\t\t\tif (backslash) {\n\t\t\t\tkeybinding = keybinding.slice(0, -1) + '\\\\\\\\';\n\t\t\t}\n\t\t\tlet snippetText = [\n\t\t\t\t'{',\n\t\t\t\t'\\t\"key\": ' + JSON.stringify(keybinding) + ',',\n\t\t\t\t'\\t\"command\": \"${1:commandId}\",',\n\t\t\t\t'\\t\"when\": \"${2:editorTextFocus}\"',\n\t\t\t\t'}$0'\n\t\t\t].join('\\n');\n\n\t\t\tconst smartInsertInfo = SmartSnippetInserter.insertSnippet(this._editor.getModel(), this._editor.getPosition());\n\t\t\tsnippetText = smartInsertInfo.prepend + snippetText + smartInsertInfo.append;\n\t\t\tthis._editor.setPosition(smartInsertInfo.position);\n\n\t\t\tSnippetController2.get(this._editor)?.insert(snippetText, { overwriteBefore: 0, overwriteAfter: 0 });\n\t\t}\n\t}\n}\n\nexport class KeybindingEditorDecorationsRenderer extends Disposable {\n\n\tprivate _updateDecorations: RunOnceScheduler;\n\tprivate readonly _dec = this._editor.createDecorationsCollection();\n\n\tconstructor(\n\t\tprivate _editor: ICodeEditor,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tthis._updateDecorations = this._register(new RunOnceScheduler(() => this._updateDecorationsNow(), 500));\n\n\t\tconst model = assertIsDefined(this._editor.getModel());\n\t\tthis._register(model.onDidChangeContent(() => this._updateDecorations.schedule()));\n\t\tthis._register(this._keybindingService.onDidUpdateKeybindings(() => this._updateDecorations.schedule()));\n\t\tthis._register({\n\t\t\tdispose: () => {\n\t\t\t\tthis._dec.clear();\n\t\t\t\tthis._updateDecorations.cancel();\n\t\t\t}\n\t\t});\n\t\tthis._updateDecorations.schedule();\n\t}\n\n\tprivate _updateDecorationsNow(): void {\n\t\tconst model = assertIsDefined(this._editor.getModel());\n\n\t\tconst newDecorations: IModelDeltaDecoration[] = [];\n\n\t\tconst root = parseTree(model.getValue());\n\t\tif (root && Array.isArray(root.children)) {\n\t\t\tfor (let i = 0, len = root.children.length; i < len; i++) {\n\t\t\t\tconst entry = root.children[i];\n\t\t\t\tconst dec = this._getDecorationForEntry(model, entry);\n\t\t\t\tif (dec !== null) {\n\t\t\t\t\tnewDecorations.push(dec);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._dec.set(newDecorations);\n\t}\n\n\tprivate _getDecorationForEntry(model: ITextModel, entry: Node): IModelDeltaDecoration | null {\n\t\tif (!Array.isArray(entry.children)) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (let i = 0, len = entry.children.length; i < len; i++) {\n\t\t\tconst prop = entry.children[i];\n\t\t\tif (prop.type !== 'property') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!Array.isArray(prop.children) || prop.children.length !== 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst key = prop.children[0];\n\t\t\tif (key.value !== 'key') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst value = prop.children[1];\n\t\t\tif (value.type !== 'string') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst resolvedKeybindings = this._keybindingService.resolveUserBinding(value.value);\n\t\t\tif (resolvedKeybindings.length === 0) {\n\t\t\t\treturn this._createDecoration(true, null, null, model, value);\n\t\t\t}\n\t\t\tconst resolvedKeybinding = resolvedKeybindings[0];\n\t\t\tlet usLabel: string | null = null;\n\t\t\tif (resolvedKeybinding instanceof WindowsNativeResolvedKeybinding) {\n\t\t\t\tusLabel = resolvedKeybinding.getUSLabel();\n\t\t\t}\n\t\t\tif (!resolvedKeybinding.isWYSIWYG()) {\n\t\t\t\tconst uiLabel = resolvedKeybinding.getLabel();\n\t\t\t\tif (typeof uiLabel === 'string' && value.value.toLowerCase() === uiLabel.toLowerCase()) {\n\t\t\t\t\t// coincidentally, this is actually WYSIWYG\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n\t\t\t}\n\t\t\tif (/abnt_|oem_/.test(value.value)) {\n\t\t\t\treturn this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n\t\t\t}\n\t\t\tconst expectedUserSettingsLabel = resolvedKeybinding.getUserSettingsLabel();\n\t\t\tif (typeof expectedUserSettingsLabel === 'string' && !KeybindingEditorDecorationsRenderer._userSettingsFuzzyEquals(value.value, expectedUserSettingsLabel)) {\n\t\t\t\treturn this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic _userSettingsFuzzyEquals(a: string, b: string): boolean {\n\t\ta = a.trim().toLowerCase();\n\t\tb = b.trim().toLowerCase();\n\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst aKeybinding = KeybindingParser.parseKeybinding(a);\n\t\tconst bKeybinding = KeybindingParser.parseKeybinding(b);\n\t\tif (aKeybinding === null && bKeybinding === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!aKeybinding || !bKeybinding) {\n\t\t\treturn false;\n\t\t}\n\t\treturn aKeybinding.equals(bKeybinding);\n\t}\n\n\tprivate _createDecoration(isError: boolean, uiLabel: string | null, usLabel: string | null, model: ITextModel, keyNode: Node): IModelDeltaDecoration {\n\t\tlet msg: MarkdownString;\n\t\tlet className: string;\n\t\tlet overviewRulerColor: ThemeColor;\n\n\t\tif (isError) {\n\t\t\t// this is the error case\n\t\t\tmsg = new MarkdownString().appendText(NLS_KB_LAYOUT_ERROR_MESSAGE);\n\t\t\tclassName = 'keybindingError';\n\t\t\toverviewRulerColor = themeColorFromId(overviewRulerError);\n\t\t} else {\n\t\t\t// this is the info case\n\t\t\tif (usLabel && uiLabel !== usLabel) {\n\t\t\t\tmsg = new MarkdownString(\n\t\t\t\t\tnls.localize({\n\t\t\t\t\t\tkey: 'defineKeybinding.kbLayoutLocalAndUSMessage',\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t'Please translate maintaining the stars (*) around the placeholders such that they will be rendered in bold.',\n\t\t\t\t\t\t\t'The placeholders will contain a keyboard combination e.g. Ctrl+Shift+/'\n\t\t\t\t\t\t]\n\t\t\t\t\t}, \"**{0}** for your current keyboard layout (**{1}** for US standard).\", uiLabel, usLabel)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmsg = new MarkdownString(\n\t\t\t\t\tnls.localize({\n\t\t\t\t\t\tkey: 'defineKeybinding.kbLayoutLocalMessage',\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t'Please translate maintaining the stars (*) around the placeholder such that it will be rendered in bold.',\n\t\t\t\t\t\t\t'The placeholder will contain a keyboard combination e.g. Ctrl+Shift+/'\n\t\t\t\t\t\t]\n\t\t\t\t\t}, \"**{0}** for your current keyboard layout.\", uiLabel)\n\t\t\t\t);\n\t\t\t}\n\t\t\tclassName = 'keybindingInfo';\n\t\t\toverviewRulerColor = themeColorFromId(overviewRulerInfo);\n\t\t}\n\n\t\tconst startPosition = model.getPositionAt(keyNode.offset);\n\t\tconst endPosition = model.getPositionAt(keyNode.offset + keyNode.length);\n\t\tconst range = new Range(\n\t\t\tstartPosition.lineNumber, startPosition.column,\n\t\t\tendPosition.lineNumber, endPosition.column\n\t\t);\n\n\t\t// icon + highlight + message decoration\n\t\treturn {\n\t\t\trange: range,\n\t\t\toptions: {\n\t\t\t\tdescription: 'keybindings-widget',\n\t\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\t\tclassName: className,\n\t\t\t\thoverMessage: msg,\n\t\t\t\toverviewRuler: {\n\t\t\t\t\tcolor: overviewRulerColor,\n\t\t\t\t\tposition: OverviewRulerLane.Right\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n}\n\nfunction isInterestingEditorModel(editor: ICodeEditor, userDataProfileService: IUserDataProfileService): boolean {\n\tconst model = editor.getModel();\n\tif (!model) {\n\t\treturn false;\n\t}\n\treturn isEqual(model.uri, userDataProfileService.currentProfile.keybindingsResource);\n}\n\nregisterEditorContribution(DEFINE_KEYBINDING_EDITOR_CONTRIB_ID, DefineKeybindingEditorContribution, EditorContributionInstantiation.AfterFirstRender);\n"],
  "mappings": "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",
  "names": []
}
