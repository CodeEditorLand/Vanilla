{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/browser/tocTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../base/browser/dom.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { IListVirtualDelegate } from '../../../../base/browser/ui/list/list.js';\nimport { DefaultStyleController, IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';\nimport { RenderIndentGuides } from '../../../../base/browser/ui/tree/abstractTree.js';\nimport { ITreeElement, ITreeNode, ITreeRenderer } from '../../../../base/browser/ui/tree/tree.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IListService, IWorkbenchObjectTreeOptions, WorkbenchObjectTree } from '../../../../platform/list/browser/listService.js';\nimport { getListStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { editorBackground, focusBorder } from '../../../../platform/theme/common/colorRegistry.js';\nimport { SettingsTreeFilter } from './settingsTree.js';\nimport { ISettingsEditorViewState, SearchResultModel, SettingsTreeElement, SettingsTreeGroupElement, SettingsTreeSettingElement } from './settingsTreeModels.js';\nimport { settingsHeaderForeground, settingsHeaderHoverForeground } from '../common/settingsEditorColorRegistry.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\n\nconst $ = DOM.$;\n\nexport class TOCTreeModel {\n\n\tprivate _currentSearchModel: SearchResultModel | null = null;\n\tprivate _settingsTreeRoot!: SettingsTreeGroupElement;\n\n\tconstructor(\n\t\tprivate _viewState: ISettingsEditorViewState,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService\n\t) {\n\t}\n\n\tget settingsTreeRoot(): SettingsTreeGroupElement {\n\t\treturn this._settingsTreeRoot;\n\t}\n\n\tset settingsTreeRoot(value: SettingsTreeGroupElement) {\n\t\tthis._settingsTreeRoot = value;\n\t\tthis.update();\n\t}\n\n\tget currentSearchModel(): SearchResultModel | null {\n\t\treturn this._currentSearchModel;\n\t}\n\n\tset currentSearchModel(model: SearchResultModel | null) {\n\t\tthis._currentSearchModel = model;\n\t\tthis.update();\n\t}\n\n\tget children(): SettingsTreeElement[] {\n\t\treturn this._settingsTreeRoot.children;\n\t}\n\n\tupdate(): void {\n\t\tif (this._settingsTreeRoot) {\n\t\t\tthis.updateGroupCount(this._settingsTreeRoot);\n\t\t}\n\t}\n\n\tprivate updateGroupCount(group: SettingsTreeGroupElement): void {\n\t\tgroup.children.forEach(child => {\n\t\t\tif (child instanceof SettingsTreeGroupElement) {\n\t\t\t\tthis.updateGroupCount(child);\n\t\t\t}\n\t\t});\n\n\t\tconst childCount = group.children\n\t\t\t.filter(child => child instanceof SettingsTreeGroupElement)\n\t\t\t.reduce((acc, cur) => acc + (<SettingsTreeGroupElement>cur).count!, 0);\n\n\t\tgroup.count = childCount + this.getGroupCount(group);\n\t}\n\n\tprivate getGroupCount(group: SettingsTreeGroupElement): number {\n\t\treturn group.children.filter(child => {\n\t\t\tif (!(child instanceof SettingsTreeSettingElement)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this._currentSearchModel && !this._currentSearchModel.root.containsSetting(child.setting.key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check everything that the SettingsFilter checks except whether it's filtered by a category\n\t\t\tconst isRemote = !!this.environmentService.remoteAuthority;\n\t\t\treturn child.matchesScope(this._viewState.settingsTarget, isRemote) &&\n\t\t\t\tchild.matchesAllTags(this._viewState.tagFilters) &&\n\t\t\t\tchild.matchesAnyFeature(this._viewState.featureFilters) &&\n\t\t\t\tchild.matchesAnyExtension(this._viewState.extensionFilters) &&\n\t\t\t\tchild.matchesAnyId(this._viewState.idFilters);\n\t\t}).length;\n\t}\n}\n\nconst TOC_ENTRY_TEMPLATE_ID = 'settings.toc.entry';\n\ninterface ITOCEntryTemplate {\n\tlabelElement: HTMLElement;\n\tcountElement: HTMLElement;\n\telementDisposables: DisposableStore;\n}\n\nexport class TOCRenderer implements ITreeRenderer<SettingsTreeGroupElement, never, ITOCEntryTemplate> {\n\n\ttemplateId = TOC_ENTRY_TEMPLATE_ID;\n\n\tconstructor(private readonly _hoverService: IHoverService) {\n\t}\n\n\trenderTemplate(container: HTMLElement): ITOCEntryTemplate {\n\t\treturn {\n\t\t\tlabelElement: DOM.append(container, $('.settings-toc-entry')),\n\t\t\tcountElement: DOM.append(container, $('.settings-toc-count')),\n\t\t\telementDisposables: new DisposableStore()\n\t\t};\n\t}\n\n\trenderElement(node: ITreeNode<SettingsTreeGroupElement>, index: number, template: ITOCEntryTemplate): void {\n\t\ttemplate.elementDisposables.clear();\n\n\t\tconst element = node.element;\n\t\tconst count = element.count;\n\t\tconst label = element.label;\n\n\t\ttemplate.labelElement.textContent = label;\n\t\ttemplate.elementDisposables.add(this._hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), template.labelElement, label));\n\n\t\tif (count) {\n\t\t\ttemplate.countElement.textContent = ` (${count})`;\n\t\t} else {\n\t\t\ttemplate.countElement.textContent = '';\n\t\t}\n\t}\n\n\tdisposeTemplate(templateData: ITOCEntryTemplate): void {\n\t\ttemplateData.elementDisposables.dispose();\n\t}\n}\n\nclass TOCTreeDelegate implements IListVirtualDelegate<SettingsTreeElement> {\n\tgetTemplateId(element: SettingsTreeElement): string {\n\t\treturn TOC_ENTRY_TEMPLATE_ID;\n\t}\n\n\tgetHeight(element: SettingsTreeElement): number {\n\t\treturn 22;\n\t}\n}\n\nexport function createTOCIterator(model: TOCTreeModel | SettingsTreeGroupElement, tree: TOCTree): Iterable<ITreeElement<SettingsTreeGroupElement>> {\n\tconst groupChildren = <SettingsTreeGroupElement[]>model.children.filter(c => c instanceof SettingsTreeGroupElement);\n\n\treturn Iterable.map(groupChildren, g => {\n\t\tconst hasGroupChildren = g.children.some(c => c instanceof SettingsTreeGroupElement);\n\n\t\treturn {\n\t\t\telement: g,\n\t\t\tcollapsed: undefined,\n\t\t\tcollapsible: hasGroupChildren,\n\t\t\tchildren: g instanceof SettingsTreeGroupElement ?\n\t\t\t\tcreateTOCIterator(g, tree) :\n\t\t\t\tundefined\n\t\t};\n\t});\n}\n\nclass SettingsAccessibilityProvider implements IListAccessibilityProvider<SettingsTreeGroupElement> {\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize({\n\t\t\tkey: 'settingsTOC',\n\t\t\tcomment: ['A label for the table of contents for the full settings list']\n\t\t},\n\t\t\t\"Settings Table of Contents\");\n\t}\n\n\tgetAriaLabel(element: SettingsTreeElement): string {\n\t\tif (!element) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (element instanceof SettingsTreeGroupElement) {\n\t\t\treturn localize('groupRowAriaLabel', \"{0}, group\", element.label);\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tgetAriaLevel(element: SettingsTreeGroupElement): number {\n\t\tlet i = 1;\n\t\twhile (element instanceof SettingsTreeGroupElement && element.parent) {\n\t\t\ti++;\n\t\t\telement = element.parent;\n\t\t}\n\n\t\treturn i;\n\t}\n}\n\nexport class TOCTree extends WorkbenchObjectTree<SettingsTreeGroupElement> {\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tviewState: ISettingsEditorViewState,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\t// test open mode\n\n\t\tconst filter = instantiationService.createInstance(SettingsTreeFilter, viewState);\n\t\tconst options: IWorkbenchObjectTreeOptions<SettingsTreeGroupElement, void> = {\n\t\t\tfilter,\n\t\t\tmultipleSelectionSupport: false,\n\t\t\tidentityProvider: {\n\t\t\t\tgetId(e) {\n\t\t\t\t\treturn e.id;\n\t\t\t\t}\n\t\t\t},\n\t\t\tstyleController: id => new DefaultStyleController(DOM.createStyleSheet(container), id),\n\t\t\taccessibilityProvider: instantiationService.createInstance(SettingsAccessibilityProvider),\n\t\t\tcollapseByDefault: true,\n\t\t\thorizontalScrolling: false,\n\t\t\thideTwistiesOfChildlessElements: true,\n\t\t\trenderIndentGuides: RenderIndentGuides.None\n\t\t};\n\n\t\tsuper(\n\t\t\t'SettingsTOC',\n\t\t\tcontainer,\n\t\t\tnew TOCTreeDelegate(),\n\t\t\t[new TOCRenderer(hoverService)],\n\t\t\toptions,\n\t\t\tinstantiationService,\n\t\t\tcontextKeyService,\n\t\t\tlistService,\n\t\t\tconfigurationService,\n\t\t);\n\n\t\tthis.style(getListStyles({\n\t\t\tlistBackground: editorBackground,\n\t\t\tlistFocusOutline: focusBorder,\n\t\t\tlistActiveSelectionBackground: editorBackground,\n\t\t\tlistActiveSelectionForeground: settingsHeaderForeground,\n\t\t\tlistFocusAndSelectionBackground: editorBackground,\n\t\t\tlistFocusAndSelectionForeground: settingsHeaderForeground,\n\t\t\tlistFocusBackground: editorBackground,\n\t\t\tlistFocusForeground: settingsHeaderHoverForeground,\n\t\t\tlistHoverForeground: settingsHeaderHoverForeground,\n\t\t\tlistHoverBackground: editorBackground,\n\t\t\tlistInactiveSelectionBackground: editorBackground,\n\t\t\tlistInactiveSelectionForeground: settingsHeaderForeground,\n\t\t\tlistInactiveFocusBackground: editorBackground,\n\t\t\tlistInactiveFocusOutline: editorBackground,\n\t\t\ttreeIndentGuidesStroke: undefined,\n\t\t\ttreeInactiveIndentGuidesStroke: undefined\n\t\t}));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
