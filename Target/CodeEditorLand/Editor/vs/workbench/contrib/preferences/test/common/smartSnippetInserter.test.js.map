{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/preferences/test/common/smartSnippetInserter.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { SmartSnippetInserter } from '../../common/smartSnippetInserter.js';\nimport { createTextModel } from '../../../../../editor/test/common/testTextModel.js';\nimport { Position } from '../../../../../editor/common/core/position.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('SmartSnippetInserter', () => {\n\n\tfunction testSmartSnippetInserter(text: string[], runner: (assert: (desiredPos: Position, pos: Position, prepend: string, append: string) => void) => void): void {\n\t\tconst model = createTextModel(text.join('\\n'));\n\t\trunner((desiredPos, pos, prepend, append) => {\n\t\t\tconst actual = SmartSnippetInserter.insertSnippet(model, desiredPos);\n\t\t\tconst expected = {\n\t\t\t\tposition: pos,\n\t\t\t\tprepend,\n\t\t\t\tappend\n\t\t\t};\n\t\t\tassert.deepStrictEqual(actual, expected);\n\t\t});\n\t\tmodel.dispose();\n\t}\n\n\ttest('empty text', () => {\n\t\ttestSmartSnippetInserter([\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(1, 1), '\\n[', ']');\n\t\t});\n\n\t\ttestSmartSnippetInserter([\n\t\t\t' '\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(1, 2), '\\n[', ']');\n\t\t\tassert(new Position(1, 2), new Position(1, 2), '\\n[', ']');\n\t\t});\n\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(1, 18), '\\n[', ']');\n\t\t\tassert(new Position(1, 18), new Position(1, 18), '\\n[', ']');\n\t\t});\n\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t''\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 1), '\\n[', ']');\n\t\t\tassert(new Position(1, 18), new Position(2, 1), '\\n[', ']');\n\t\t\tassert(new Position(2, 1), new Position(2, 1), '\\n[', ']');\n\t\t});\n\t});\n\n\ttest('empty array 1', () => {\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t'[]'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 1), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 2), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 3), new Position(2, 2), '', '');\n\t\t});\n\t});\n\n\ttest('empty array 2', () => {\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t'[',\n\t\t\t']'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 1), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 2), new Position(2, 2), '', '');\n\t\t\tassert(new Position(3, 1), new Position(3, 1), '', '');\n\t\t\tassert(new Position(3, 2), new Position(3, 1), '', '');\n\t\t});\n\t});\n\n\ttest('empty array 3', () => {\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t'[',\n\t\t\t'// just some text',\n\t\t\t']'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 1), new Position(2, 2), '', '');\n\t\t\tassert(new Position(2, 2), new Position(2, 2), '', '');\n\t\t\tassert(new Position(3, 1), new Position(3, 1), '', '');\n\t\t\tassert(new Position(3, 2), new Position(3, 1), '', '');\n\t\t\tassert(new Position(4, 1), new Position(4, 1), '', '');\n\t\t\tassert(new Position(4, 2), new Position(4, 1), '', '');\n\t\t});\n\t});\n\n\ttest('one element array 1', () => {\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t'[',\n\t\t\t'{}',\n\t\t\t']'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(2, 1), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(2, 2), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(3, 1), new Position(3, 1), '', ',');\n\t\t\tassert(new Position(3, 2), new Position(3, 1), '', ',');\n\t\t\tassert(new Position(3, 3), new Position(3, 3), ',', '');\n\t\t\tassert(new Position(4, 1), new Position(4, 1), ',', '');\n\t\t\tassert(new Position(4, 2), new Position(4, 1), ',', '');\n\t\t});\n\t});\n\n\ttest('two elements array 1', () => {\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t'[',\n\t\t\t'{},',\n\t\t\t'{}',\n\t\t\t']'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(2, 1), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(2, 2), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(3, 1), new Position(3, 1), '', ',');\n\t\t\tassert(new Position(3, 2), new Position(3, 1), '', ',');\n\t\t\tassert(new Position(3, 3), new Position(3, 3), ',', '');\n\t\t\tassert(new Position(3, 4), new Position(3, 4), '', ',');\n\t\t\tassert(new Position(4, 1), new Position(4, 1), '', ',');\n\t\t\tassert(new Position(4, 2), new Position(4, 1), '', ',');\n\t\t\tassert(new Position(4, 3), new Position(4, 3), ',', '');\n\t\t\tassert(new Position(5, 1), new Position(5, 1), ',', '');\n\t\t\tassert(new Position(5, 2), new Position(5, 1), ',', '');\n\t\t});\n\t});\n\n\ttest('two elements array 2', () => {\n\t\ttestSmartSnippetInserter([\n\t\t\t'// just some text',\n\t\t\t'[',\n\t\t\t'{},{}',\n\t\t\t']'\n\t\t], (assert) => {\n\t\t\tassert(new Position(1, 1), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(2, 1), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(2, 2), new Position(2, 2), '', ',');\n\t\t\tassert(new Position(3, 1), new Position(3, 1), '', ',');\n\t\t\tassert(new Position(3, 2), new Position(3, 1), '', ',');\n\t\t\tassert(new Position(3, 3), new Position(3, 3), ',', '');\n\t\t\tassert(new Position(3, 4), new Position(3, 4), '', ',');\n\t\t\tassert(new Position(3, 5), new Position(3, 4), '', ',');\n\t\t\tassert(new Position(3, 6), new Position(3, 6), ',', '');\n\t\t\tassert(new Position(4, 1), new Position(4, 1), ',', '');\n\t\t\tassert(new Position(4, 2), new Position(4, 1), ',', '');\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AAExD,MAAM,wBAAwB,MAAM;AAEnC,WAAS,yBAAyB,MAAgB,QAAgH;AACjK,UAAM,QAAQ,gBAAgB,KAAK,KAAK,IAAI,CAAC;AAC7C,WAAO,CAAC,YAAY,KAAK,SAAS,WAAW;AAC5C,YAAM,SAAS,qBAAqB,cAAc,OAAO,UAAU;AACnE,YAAM,WAAW;AAAA,QAChB,UAAU;AAAA,QACV;AAAA,QACA;AAAA,MACD;AACA,aAAO,gBAAgB,QAAQ,QAAQ;AAAA,IACxC,CAAC;AACD,UAAM,QAAQ;AAAA,EACf;AAZS;AAcT,OAAK,cAAc,MAAM;AACxB,6BAAyB,CACzB,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,OAAO,GAAG;AAAA,IAC1D,CAAC;AAED,6BAAyB;AAAA,MACxB;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,OAAO,GAAG;AACzD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,OAAO,GAAG;AAAA,IAC1D,CAAC;AAED,6BAAyB;AAAA,MACxB;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,EAAE,GAAG,OAAO,GAAG;AAC1D,MAAAA,QAAO,IAAI,SAAS,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,EAAE,GAAG,OAAO,GAAG;AAAA,IAC5D,CAAC;AAED,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,OAAO,GAAG;AACzD,MAAAA,QAAO,IAAI,SAAS,GAAG,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,OAAO,GAAG;AAC1D,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,OAAO,GAAG;AAAA,IAC1D,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AAAA,IACtD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AAAA,IACtD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AACrD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;AAAA,IACtD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,uBAAuB,MAAM;AACjC,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AAAA,IACvD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,wBAAwB,MAAM;AAClC,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AAAA,IACvD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,wBAAwB,MAAM;AAClC,6BAAyB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAG,CAACA,YAAW;AACd,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AACtD,MAAAA,QAAO,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,EAAE;AAAA,IACvD,CAAC;AAAA,EACF,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": ["assert"]
}
