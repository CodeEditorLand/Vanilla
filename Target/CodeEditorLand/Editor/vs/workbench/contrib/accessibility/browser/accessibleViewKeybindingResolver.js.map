{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accessibility/browser/accessibleViewKeybindingResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport type { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport type { IPickerQuickAccessItem } from \"../../../../platform/quickinput/browser/pickerQuickAccess.js\";\n\nexport function resolveContentAndKeybindingItems(\n\tkeybindingService: IKeybindingService,\n\tvalue?: string,\n):\n\t| {\n\t\t\tcontent: MarkdownString;\n\t\t\tconfigureKeybindingItems: IPickerQuickAccessItem[] | undefined;\n\t\t\tconfiguredKeybindingItems: IPickerQuickAccessItem[] | undefined;\n\t  }\n\t| undefined {\n\tif (!value) {\n\t\treturn;\n\t}\n\tconst configureKeybindingItems: IPickerQuickAccessItem[] = [];\n\tconst configuredKeybindingItems: IPickerQuickAccessItem[] = [];\n\tconst matches = value.matchAll(/(<keybinding:(?<commandId>[^<]*)>)/gm);\n\tfor (const match of [...matches]) {\n\t\tconst commandId = match?.groups?.commandId;\n\t\tlet kbLabel;\n\t\tif (match?.length && commandId) {\n\t\t\tconst keybinding = keybindingService\n\t\t\t\t.lookupKeybinding(commandId)\n\t\t\t\t?.getAriaLabel();\n\t\t\tif (keybinding) {\n\t\t\t\tkbLabel = \" (\" + keybinding + \")\";\n\t\t\t\tconfiguredKeybindingItems.push({\n\t\t\t\t\tlabel: commandId,\n\t\t\t\t\tid: commandId,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tkbLabel = ` (unassigned keybinding)`;\n\t\t\t\tconfigureKeybindingItems.push({\n\t\t\t\t\tlabel: commandId,\n\t\t\t\t\tid: commandId,\n\t\t\t\t});\n\t\t\t}\n\t\t\tvalue = value.replace(match[0], kbLabel);\n\t\t}\n\t}\n\tconst content = new MarkdownString(value);\n\tcontent.isTrusted = true;\n\treturn {\n\t\tcontent,\n\t\tconfigureKeybindingItems: configureKeybindingItems.length\n\t\t\t? configureKeybindingItems\n\t\t\t: undefined,\n\t\tconfiguredKeybindingItems: configuredKeybindingItems.length\n\t\t\t? configuredKeybindingItems\n\t\t\t: undefined,\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,sBAAsB;AAIxB,SAAS,iCACf,mBACA,OAOY;AACZ,MAAI,CAAC,OAAO;AACX;AAAA,EACD;AACA,QAAM,2BAAqD,CAAC;AAC5D,QAAM,4BAAsD,CAAC;AAC7D,QAAM,UAAU,MAAM,SAAS,sCAAsC;AACrE,aAAW,SAAS,CAAC,GAAG,OAAO,GAAG;AACjC,UAAM,YAAY,OAAO,QAAQ;AACjC,QAAI;AACJ,QAAI,OAAO,UAAU,WAAW;AAC/B,YAAM,aAAa,kBACjB,iBAAiB,SAAS,GACzB,aAAa;AAChB,UAAI,YAAY;AACf,kBAAU,OAAO,aAAa;AAC9B,kCAA0B,KAAK;AAAA,UAC9B,OAAO;AAAA,UACP,IAAI;AAAA,QACL,CAAC;AAAA,MACF,OAAO;AACN,kBAAU;AACV,iCAAyB,KAAK;AAAA,UAC7B,OAAO;AAAA,UACP,IAAI;AAAA,QACL,CAAC;AAAA,MACF;AACA,cAAQ,MAAM,QAAQ,MAAM,CAAC,GAAG,OAAO;AAAA,IACxC;AAAA,EACD;AACA,QAAM,UAAU,IAAI,eAAe,KAAK;AACxC,UAAQ,YAAY;AACpB,SAAO;AAAA,IACN;AAAA,IACA,0BAA0B,yBAAyB,SAChD,2BACA;AAAA,IACH,2BAA2B,0BAA0B,SAClD,4BACA;AAAA,EACJ;AACD;AAlDgB;",
  "names": []
}
