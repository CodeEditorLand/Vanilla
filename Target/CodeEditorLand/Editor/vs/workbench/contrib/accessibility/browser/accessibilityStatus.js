var f=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var l=(o,t,e,i)=>{for(var r=i>1?void 0:i?S(t,e):t,s=o.length-1,d;s>=0;s--)(d=o[s])&&(r=(i?d(t,e,r):d(r))||r);return i&&r&&f(t,e,r),r},n=(o,t)=>(e,i)=>t(e,i,o);import{Event as u}from"../../../../base/common/event.js";import{Disposable as m,MutableDisposable as h}from"../../../../base/common/lifecycle.js";import R from"../../../../base/common/severity.js";import{localize as a}from"../../../../nls.js";import{IAccessibilityService as v}from"../../../../platform/accessibility/common/accessibility.js";import{CommandsRegistry as b}from"../../../../platform/commands/common/commands.js";import{ConfigurationTarget as p,IConfigurationService as g}from"../../../../platform/configuration/common/configuration.js";import{INotificationService as y,NotificationPriority as E}from"../../../../platform/notification/common/notification.js";import"../../../common/contributions.js";import{IStatusbarService as N,StatusbarAlignment as C}from"../../../services/statusbar/browser/statusbar.js";let c=class extends m{constructor(e,i,r,s){super();this.configurationService=e;this.notificationService=i;this.accessibilityService=r;this.statusbarService=s;this._register(b.registerCommand({id:"showEditorScreenReaderNotification",handler:()=>this.showScreenReaderNotification()})),this.updateScreenReaderModeElement(this.accessibilityService.isScreenReaderOptimized()),this.registerListeners()}static ID="workbench.contrib.accessibilityStatus";screenReaderNotification=null;promptedScreenReader=!1;screenReaderModeElement=this._register(new h);registerListeners(){this._register(this.accessibilityService.onDidChangeScreenReaderOptimized(()=>this.onScreenReaderModeChange())),this._register(this.configurationService.onDidChangeConfiguration(e=>{e.affectsConfiguration("editor.accessibilitySupport")&&this.onScreenReaderModeChange()}))}showScreenReaderNotification(){this.screenReaderNotification=this.notificationService.prompt(R.Info,a("screenReaderDetectedExplanation.question","Are you using a screen reader to operate VS Code?"),[{label:a("screenReaderDetectedExplanation.answerYes","Yes"),run:()=>{this.configurationService.updateValue("editor.accessibilitySupport","on",p.USER)}},{label:a("screenReaderDetectedExplanation.answerNo","No"),run:()=>{this.configurationService.updateValue("editor.accessibilitySupport","off",p.USER)}}],{sticky:!0,priority:E.URGENT}),u.once(this.screenReaderNotification.onDidClose)(()=>this.screenReaderNotification=null)}updateScreenReaderModeElement(e){if(e){if(!this.screenReaderModeElement.value){const i=a("screenReaderDetected","Screen Reader Optimized");this.screenReaderModeElement.value=this.statusbarService.addEntry({name:a("status.editor.screenReaderMode","Screen Reader Mode"),text:i,ariaLabel:i,command:"showEditorScreenReaderNotification",kind:"prominent",showInAllWindows:!0},"status.editor.screenReaderMode",C.RIGHT,100.6)}}else this.screenReaderModeElement.clear()}onScreenReaderModeChange(){this.accessibilityService.isScreenReaderOptimized()&&this.configurationService.getValue("editor.accessibilitySupport")==="auto"&&(this.promptedScreenReader||(this.promptedScreenReader=!0,setTimeout(()=>this.showScreenReaderNotification(),100))),this.screenReaderNotification&&this.screenReaderNotification.close(),this.updateScreenReaderModeElement(this.accessibilityService.isScreenReaderOptimized())}};c=l([n(0,g),n(1,y),n(2,v),n(3,N)],c);export{c as AccessibilityStatus};
