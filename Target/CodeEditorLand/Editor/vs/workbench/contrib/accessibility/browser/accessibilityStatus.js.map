{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accessibility/browser/accessibilityStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Event } from '../../../../base/common/event.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { localize } from '../../../../nls.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { INotificationHandle, INotificationService, NotificationPriority } from '../../../../platform/notification/common/notification.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from '../../../services/statusbar/browser/statusbar.js';\n\nexport class AccessibilityStatus extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.accessibilityStatus';\n\n\tprivate screenReaderNotification: INotificationHandle | null = null;\n\tprivate promptedScreenReader: boolean = false;\n\tprivate readonly screenReaderModeElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(CommandsRegistry.registerCommand({ id: 'showEditorScreenReaderNotification', handler: () => this.showScreenReaderNotification() }));\n\n\t\tthis.updateScreenReaderModeElement(this.accessibilityService.isScreenReaderOptimized());\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.accessibilityService.onDidChangeScreenReaderOptimized(() => this.onScreenReaderModeChange()));\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(c => {\n\t\t\tif (c.affectsConfiguration('editor.accessibilitySupport')) {\n\t\t\t\tthis.onScreenReaderModeChange();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate showScreenReaderNotification(): void {\n\t\tthis.screenReaderNotification = this.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('screenReaderDetectedExplanation.question', \"Are you using a screen reader to operate VS Code?\"),\n\t\t\t[{\n\t\t\t\tlabel: localize('screenReaderDetectedExplanation.answerYes', \"Yes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.configurationService.updateValue('editor.accessibilitySupport', 'on', ConfigurationTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('screenReaderDetectedExplanation.answerNo', \"No\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.configurationService.updateValue('editor.accessibilitySupport', 'off', ConfigurationTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{\n\t\t\t\tsticky: true,\n\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t}\n\t\t);\n\n\t\tEvent.once(this.screenReaderNotification.onDidClose)(() => this.screenReaderNotification = null);\n\t}\n\tprivate updateScreenReaderModeElement(visible: boolean): void {\n\t\tif (visible) {\n\t\t\tif (!this.screenReaderModeElement.value) {\n\t\t\t\tconst text = localize('screenReaderDetected', \"Screen Reader Optimized\");\n\t\t\t\tthis.screenReaderModeElement.value = this.statusbarService.addEntry({\n\t\t\t\t\tname: localize('status.editor.screenReaderMode', \"Screen Reader Mode\"),\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: 'showEditorScreenReaderNotification',\n\t\t\t\t\tkind: 'prominent',\n\t\t\t\t\tshowInAllWindows: true\n\t\t\t\t}, 'status.editor.screenReaderMode', StatusbarAlignment.RIGHT, 100.6);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.screenReaderModeElement.clear();\n\t\t}\n\t}\n\n\tprivate onScreenReaderModeChange(): void {\n\n\t\t// We only support text based editors\n\t\tconst screenReaderDetected = this.accessibilityService.isScreenReaderOptimized();\n\t\tif (screenReaderDetected) {\n\t\t\tconst screenReaderConfiguration = this.configurationService.getValue('editor.accessibilitySupport');\n\t\t\tif (screenReaderConfiguration === 'auto') {\n\t\t\t\tif (!this.promptedScreenReader) {\n\t\t\t\t\tthis.promptedScreenReader = true;\n\t\t\t\t\tsetTimeout(() => this.showScreenReaderNotification(), 100);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.screenReaderNotification) {\n\t\t\tthis.screenReaderNotification.close();\n\t\t}\n\t\tthis.updateScreenReaderModeElement(this.accessibilityService.isScreenReaderOptimized());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
