{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accessibility/browser/accessibilityStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype INotificationHandle,\n\tINotificationService,\n\tNotificationPriority,\n} from \"../../../../platform/notification/common/notification.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\n\nexport class AccessibilityStatus\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.accessibilityStatus\";\n\n\tprivate screenReaderNotification: INotificationHandle | null = null;\n\tprivate promptedScreenReader = false;\n\tprivate readonly screenReaderModeElement = this._register(\n\t\tnew MutableDisposable<IStatusbarEntryAccessor>(),\n\t);\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(CommandsRegistry.registerCommand({ id: 'showEditorScreenReaderNotification', handler: () => this.showScreenReaderNotification() }));\n\n\t\tthis.updateScreenReaderModeElement(this.accessibilityService.isScreenReaderOptimized());\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.accessibilityService.onDidChangeScreenReaderOptimized(() =>\n\t\t\t\tthis.onScreenReaderModeChange(),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((c) => {\n\t\t\t\tif (c.affectsConfiguration(\"editor.accessibilitySupport\")) {\n\t\t\t\t\tthis.onScreenReaderModeChange();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate showScreenReaderNotification(): void {\n\t\tthis.screenReaderNotification = this.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize(\n\t\t\t\t\"screenReaderDetectedExplanation.question\",\n\t\t\t\t\"Are you using a screen reader to operate VS Code?\",\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"screenReaderDetectedExplanation.answerYes\",\n\t\t\t\t\t\t\"Yes\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.configurationService.updateValue(\n\t\t\t\t\t\t\t\"editor.accessibilitySupport\",\n\t\t\t\t\t\t\t\"on\",\n\t\t\t\t\t\t\tConfigurationTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"screenReaderDetectedExplanation.answerNo\",\n\t\t\t\t\t\t\"No\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.configurationService.updateValue(\n\t\t\t\t\t\t\t\"editor.accessibilitySupport\",\n\t\t\t\t\t\t\t\"off\",\n\t\t\t\t\t\t\tConfigurationTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{\n\t\t\t\tsticky: true,\n\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t},\n\t\t);\n\n\t\tEvent.once(this.screenReaderNotification.onDidClose)(\n\t\t\t() => (this.screenReaderNotification = null),\n\t\t);\n\t}\n\tprivate updateScreenReaderModeElement(visible: boolean): void {\n\t\tif (visible) {\n\t\t\tif (!this.screenReaderModeElement.value) {\n\t\t\t\tconst text = localize(\n\t\t\t\t\t\"screenReaderDetected\",\n\t\t\t\t\t\"Screen Reader Optimized\",\n\t\t\t\t);\n\t\t\t\tthis.screenReaderModeElement.value =\n\t\t\t\t\tthis.statusbarService.addEntry(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: localize(\n\t\t\t\t\t\t\t\t\"status.editor.screenReaderMode\",\n\t\t\t\t\t\t\t\t\"Screen Reader Mode\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\tariaLabel: text,\n\t\t\t\t\t\t\tcommand: \"showEditorScreenReaderNotification\",\n\t\t\t\t\t\t\tkind: \"prominent\",\n\t\t\t\t\t\t\tshowInAllWindows: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"status.editor.screenReaderMode\",\n\t\t\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t\t\t100.6,\n\t\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.screenReaderModeElement.clear();\n\t\t}\n\t}\n\n\tprivate onScreenReaderModeChange(): void {\n\t\t// We only support text based editors\n\t\tconst screenReaderDetected =\n\t\t\tthis.accessibilityService.isScreenReaderOptimized();\n\t\tif (screenReaderDetected) {\n\t\t\tconst screenReaderConfiguration =\n\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\t\"editor.accessibilitySupport\",\n\t\t\t\t);\n\t\t\tif (screenReaderConfiguration === \"auto\") {\n\t\t\t\tif (!this.promptedScreenReader) {\n\t\t\t\t\tthis.promptedScreenReader = true;\n\t\t\t\t\tsetTimeout(() => this.showScreenReaderNotification(), 100);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.screenReaderNotification) {\n\t\t\tthis.screenReaderNotification.close();\n\t\t}\n\t\tthis.updateScreenReaderModeElement(\n\t\t\tthis.accessibilityService.isScreenReaderOptimized(),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
