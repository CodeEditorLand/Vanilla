var y=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var c=(r,e,i,s)=>{for(var t=s>1?void 0:s?f(e,i):e,o=r.length-1,n;o>=0;o--)(n=r[o])&&(t=(s?n(e,i,t):n(t))||t);return s&&t&&y(e,i,t),t},a=(r,e)=>(i,s)=>e(i,s,r);import{Disposable as m,DisposableMap as v,DisposableStore as b}from"../../../../base/common/lifecycle.js";import{AccessibleViewType as d,ExtensionContentProvider as V}from"../../../../platform/accessibility/browser/accessibleView.js";import{AccessibleViewRegistry as I}from"../../../../platform/accessibility/browser/accessibleViewRegistry.js";import{IKeybindingService as h}from"../../../../platform/keybinding/common/keybinding.js";import{Registry as l}from"../../../../platform/registry/common/platform.js";import{FocusedViewContext as D}from"../../../common/contextkeys.js";import{Extensions as w}from"../../../common/views.js";import{IViewsService as R}from"../../../services/views/common/viewsService.js";let p=class extends m{static ID="extensionAccessibilityHelpDialogContribution";_viewHelpDialogMap=this._register(new v);constructor(e){super(),this._register(l.as(w.ViewsRegistry).onViewsRegistered(i=>{for(const s of i)for(const t of s.views)t.accessibilityHelpContent&&this._viewHelpDialogMap.set(t.id,g(e,t))})),this._register(l.as(w.ViewsRegistry).onViewsDeregistered(i=>{for(const s of i.views)s.accessibilityHelpContent&&this._viewHelpDialogMap.get(s.id)?.dispose()}))}};p=c([a(0,h)],p);function g(r,e){const i=new b,s=e.accessibilityHelpContent?.value;if(!s)throw new Error("No content provided for the accessibility help dialog");return i.add(I.register({priority:95,name:e.id,type:d.Help,when:D.isEqualTo(e.id),getProvider:t=>{const o=t.get(R);return new V(e.id,{type:d.Help},()=>s,()=>o.openView(e.id,!0))}})),i.add(r.onDidUpdateKeybindings(()=>{i.clear(),i.add(g(r,e))})),i}export{p as ExtensionAccessibilityHelpDialogContribution};
