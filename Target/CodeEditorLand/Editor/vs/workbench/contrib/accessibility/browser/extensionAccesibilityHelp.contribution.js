var f=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var c=(t,e,i,s)=>{for(var r=s>1?void 0:s?m(e,i):e,o=t.length-1,p;o>=0;o--)(p=t[o])&&(r=(s?p(e,i,r):p(r))||r);return s&&r&&f(e,i,r),r},a=(t,e)=>(i,s)=>e(i,s,t);import{DisposableMap as y,DisposableStore as v,Disposable as V}from"../../../../base/common/lifecycle.js";import{AccessibleViewType as d,ExtensionContentProvider as b}from"../../../../platform/accessibility/browser/accessibleView.js";import{AccessibleViewRegistry as I}from"../../../../platform/accessibility/browser/accessibleViewRegistry.js";import{IKeybindingService as h}from"../../../../platform/keybinding/common/keybinding.js";import{Registry as l}from"../../../../platform/registry/common/platform.js";import{FocusedViewContext as D}from"../../../common/contextkeys.js";import{Extensions as w}from"../../../common/views.js";import{IViewsService as R}from"../../../services/views/common/viewsService.js";let n=class extends V{static ID="extensionAccessibilityHelpDialogContribution";_viewHelpDialogMap=this._register(new y);constructor(e){super(),this._register(l.as(w.ViewsRegistry).onViewsRegistered(i=>{for(const s of i)for(const r of s.views)r.accessibilityHelpContent&&this._viewHelpDialogMap.set(r.id,g(e,r))})),this._register(l.as(w.ViewsRegistry).onViewsDeregistered(i=>{for(const s of i.views)s.accessibilityHelpContent&&this._viewHelpDialogMap.get(s.id)?.dispose()}))}};n=c([a(0,h)],n);function g(t,e){const i=new v,s=e.accessibilityHelpContent?.value;if(!s)throw new Error("No content provided for the accessibility help dialog");return i.add(I.register({priority:95,name:e.id,type:d.Help,when:D.isEqualTo(e.id),getProvider:r=>{const o=r.get(R);return new b(e.id,{type:d.Help},()=>s,()=>o.openView(e.id,!0))}})),i.add(t.onDidUpdateKeybindings(()=>{i.clear(),i.add(g(t,e))})),i}export{n as ExtensionAccessibilityHelpDialogContribution};
