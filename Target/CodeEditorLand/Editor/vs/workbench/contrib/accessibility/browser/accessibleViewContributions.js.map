{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accessibility/browser/accessibleViewContributions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { accessibleViewIsShown } from './accessibilityConfiguration.js';\nimport { AccessibilityHelpAction, AccessibleViewAction } from './accessibleViewActions.js';\nimport { AccessibleViewType, AccessibleContentProvider, ExtensionContentProvider, IAccessibleViewService } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { AccessibleViewRegistry } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport class AccesibleViewHelpContribution extends Disposable {\n\tstatic ID: 'accesibleViewHelpContribution';\n\tconstructor() {\n\t\tsuper();\n\t\tthis._register(AccessibilityHelpAction.addImplementation(115, 'accessible-view-help', accessor => {\n\t\t\taccessor.get(IAccessibleViewService).showAccessibleViewHelp();\n\t\t\treturn true;\n\t\t}, accessibleViewIsShown));\n\t}\n}\n\nexport class AccesibleViewContributions extends Disposable {\n\tstatic ID: 'accesibleViewContributions';\n\tconstructor() {\n\t\tsuper();\n\t\tAccessibleViewRegistry.getImplementations().forEach(impl => {\n\t\t\tconst implementation = (accessor: ServicesAccessor) => {\n\t\t\t\tconst provider: AccessibleContentProvider | ExtensionContentProvider | undefined = impl.getProvider(accessor);\n\t\t\t\tif (!provider) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\taccessor.get(IAccessibleViewService).show(provider);\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\tprovider.dispose();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (impl.type === AccessibleViewType.View) {\n\t\t\t\tthis._register(AccessibleViewAction.addImplementation(impl.priority, impl.name, implementation, impl.when));\n\t\t\t} else {\n\t\t\t\tthis._register(AccessibilityHelpAction.addImplementation(impl.priority, impl.name, implementation, impl.when));\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AACtC,SAAS,yBAAyB,4BAA4B;AAC9D,SAAS,oBAAoB,2BAA2B,0BAA0B,8BAA8B;AAChH,SAAS,8BAA8B;AACvC,SAAS,wBAAwB;AAE1B,MAAM,sCAAsC,WAAW;AAAA,EAZ9D,OAY8D;AAAA;AAAA;AAAA,EAC7D,OAAO;AAAA,EACP,cAAc;AACb,UAAM;AACN,SAAK,UAAU,wBAAwB,kBAAkB,KAAK,wBAAwB,cAAY;AACjG,eAAS,IAAI,sBAAsB,EAAE,uBAAuB;AAC5D,aAAO;AAAA,IACR,GAAG,qBAAqB,CAAC;AAAA,EAC1B;AACD;AAEO,MAAM,mCAAmC,WAAW;AAAA,EAvB3D,OAuB2D;AAAA;AAAA;AAAA,EAC1D,OAAO;AAAA,EACP,cAAc;AACb,UAAM;AACN,2BAAuB,mBAAmB,EAAE,QAAQ,UAAQ;AAC3D,YAAM,iBAAiB,wBAAC,aAA+B;AACtD,cAAM,WAA6E,KAAK,YAAY,QAAQ;AAC5G,YAAI,CAAC,UAAU;AACd,iBAAO;AAAA,QACR;AACA,YAAI;AACH,mBAAS,IAAI,sBAAsB,EAAE,KAAK,QAAQ;AAClD,iBAAO;AAAA,QACR,QAAQ;AACP,mBAAS,QAAQ;AACjB,iBAAO;AAAA,QACR;AAAA,MACD,GAZuB;AAavB,UAAI,KAAK,SAAS,mBAAmB,MAAM;AAC1C,aAAK,UAAU,qBAAqB,kBAAkB,KAAK,UAAU,KAAK,MAAM,gBAAgB,KAAK,IAAI,CAAC;AAAA,MAC3G,OAAO;AACN,aAAK,UAAU,wBAAwB,kBAAkB,KAAK,UAAU,KAAK,MAAM,gBAAgB,KAAK,IAAI,CAAC;AAAA,MAC9G;AAAA,IACD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
