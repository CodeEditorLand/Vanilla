var C=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var b=(p,u,i,s)=>{for(var n=s>1?void 0:s?F(u,i):u,o=p.length-1,e;o>=0;o--)(e=p[o])&&(n=(s?e(u,i,n):e(n))||n);return s&&n&&C(u,i,n),n},d=(p,u)=>(i,s)=>u(i,s,p);import{promiseWithResolvers as N}from"../../../../base/common/async.js";import{KeyCode as D,KeyMod as h}from"../../../../base/common/keyCodes.js";import{Disposable as P,DisposableStore as x}from"../../../../base/common/lifecycle.js";import{assertIsDefined as E}from"../../../../base/common/types.js";import{localize as l,localize2 as k}from"../../../../nls.js";import{Action2 as K,IMenuService as A,MenuId as y,MenuItemAction as Q,MenuRegistry as W,registerAction2 as R}from"../../../../platform/actions/common/actions.js";import{ICommandService as M}from"../../../../platform/commands/common/commands.js";import{IContextKeyService as z}from"../../../../platform/contextkey/common/contextkey.js";import{IKeybindingService as B}from"../../../../platform/keybinding/common/keybinding.js";import{KeybindingWeight as L}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{IQuickInputService as q}from"../../../../platform/quickinput/common/quickInput.js";import{Registry as j}from"../../../../platform/registry/common/platform.js";import{Extensions as O}from"../../../common/contributions.js";import{LifecyclePhase as T}from"../../../services/lifecycle/common/lifecycle.js";const I=l("Built-In","Built-In"),U=k("Create","Create");R(class extends K{constructor(){super({id:"welcome.showNewFileEntries",title:k("welcome.newFile","New File..."),category:U,f1:!0,keybinding:{primary:h.Alt+h.CtrlCmd+h.WinCtrl+D.KeyN,weight:L.WorkbenchContrib},menu:{id:y.MenubarFileMenu,group:"1_new",order:2}})}async run(p){return E(a.Instance).run()}});let a=class extends P{constructor(i,s,n,o,e){super();this.quickInputService=i;this.contextKeyService=s;this.commandService=n;this.keybindingService=o;a.Instance=this,this._register({dispose(){a.Instance===this&&(a.Instance=void 0)}}),this.menu=e.createMenu(y.NewFile,s)}static Instance;menu;allEntries(){const i=[];for(const[s,n]of this.menu.getActions({renderShortTitle:!0}))for(const o of n)o instanceof Q&&i.push({commandID:o.item.id,from:o.item.source?.title??I,title:o.label,group:s});return i}async run(){const i=this.allEntries();if(i.length===0)throw Error("Unexpected empty new items list");return i.length===1?(this.commandService.executeCommand(i[0].commandID),!0):this.selectNewEntry(i)}async selectNewEntry(i){const{promise:s,resolve:n}=N(),o=new x,e=this.quickInputService.createQuickPick({useSeparators:!0});e.title=l("newFileTitle","New File..."),e.placeholder=l("newFilePlaceholder","Select File Type or Enter File Name..."),e.sortByLabel=!1,e.matchOnDetail=!0,e.matchOnDescription=!0;const w=(r,t)=>{const c={file:1,notebook:2};if(c[r.group]&&c[t.group]){if(c[r.group]!==c[t.group])return c[t.group]-c[r.group]}else{if(c[r.group])return 1;if(c[t.group])return-1}return r.from===I?1:t.from===I?-1:r.from.localeCompare(t.from)},S={file:l("file","File"),notebook:l("notebook","Notebook")},f=r=>{const t=[];let c;r.sort((m,g)=>-w(m,g)).forEach(m=>{const g=m.commandID,v=this.keybindingService.lookupKeybinding(g||"",this.contextKeyService);c!==m.group&&(t.push({type:"separator",label:S[m.group]??m.group}),c=m.group),t.push({...m,label:m.title,type:"item",keybinding:v,buttons:g?[{iconClass:"codicon codicon-gear",tooltip:l("change keybinding","Configure Keybinding")}]:[],detail:"",description:m.from})}),e.items=t};return f(i),o.add(this.menu.onDidChange(()=>f(this.allEntries()))),o.add(e.onDidChangeValue(r=>{if(r===""){f(i);return}const t={commandID:"workbench.action.files.newFile",commandArgs:{languageId:void 0,viewType:void 0,fileName:r},title:l("miNewFileWithName","Create New File ({0})",r),group:"file",from:I};f([t,...i])})),o.add(e.onDidAccept(async r=>{const t=e.selectedItems[0];n(!!t),e.hide(),t&&await this.commandService.executeCommand(t.commandID,t.commandArgs)})),o.add(e.onDidHide(()=>{e.dispose(),o.dispose(),n(!1)})),o.add(e.onDidTriggerItemButton(r=>{e.hide(),this.commandService.executeCommand("workbench.action.openGlobalKeybindings",r.item.commandID),n(!1)})),e.show(),s}};a=b([d(0,q),d(1,z),d(2,M),d(3,B),d(4,A)],a),j.as(O.Workbench).registerWorkbenchContribution(a,T.Restored),W.appendMenuItem(y.NewFile,{group:"file",command:{id:"workbench.action.files.newUntitledFile",title:l("miNewFile2","Text File")},order:1});
