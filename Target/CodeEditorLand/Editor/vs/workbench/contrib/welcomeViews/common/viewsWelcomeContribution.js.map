{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\ttype IViewContentDescriptor,\n\ttype IViewsRegistry,\n\tExtensions as ViewContainerExtensions,\n} from \"../../../common/views.js\";\nimport { isProposedApiEnabled } from \"../../../services/extensions/common/extensions.js\";\nimport type {\n\tIExtensionPoint,\n\tIExtensionPointUser,\n} from \"../../../services/extensions/common/extensionsRegistry.js\";\nimport {\n\tViewIdentifierMap,\n\ttype ViewWelcome,\n\ttype ViewsWelcomeExtensionPoint,\n} from \"./viewsWelcomeExtensionPoint.js\";\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(\n\tViewContainerExtensions.ViewsRegistry,\n);\n\nexport class ViewsWelcomeContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate viewWelcomeContents = new Map<ViewWelcome, IDisposable>();\n\n\tconstructor(extensionPoint: IExtensionPoint<ViewsWelcomeExtensionPoint>) {\n\t\tsuper();\n\n\t\textensionPoint.setHandler((_, { added, removed }) => {\n\t\t\tfor (const contribution of removed) {\n\t\t\t\tfor (const welcome of contribution.value) {\n\t\t\t\t\tconst disposable = this.viewWelcomeContents.get(welcome);\n\n\t\t\t\t\tdisposable?.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst welcomesByViewId = new Map<\n\t\t\t\tstring,\n\t\t\t\tMap<ViewWelcome, IViewContentDescriptor>\n\t\t\t>();\n\n\t\t\tfor (const contribution of added) {\n\t\t\t\tfor (const welcome of contribution.value) {\n\t\t\t\t\tconst { group, order } = parseGroupAndOrder(\n\t\t\t\t\t\twelcome,\n\t\t\t\t\t\tcontribution,\n\t\t\t\t\t);\n\t\t\t\t\tconst precondition = ContextKeyExpr.deserialize(\n\t\t\t\t\t\twelcome.enablement,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst id = ViewIdentifierMap[welcome.view] ?? welcome.view;\n\t\t\t\t\tlet viewContentMap = welcomesByViewId.get(id);\n\t\t\t\t\tif (!viewContentMap) {\n\t\t\t\t\t\tviewContentMap = new Map();\n\t\t\t\t\t\twelcomesByViewId.set(id, viewContentMap);\n\t\t\t\t\t}\n\n\t\t\t\t\tviewContentMap.set(welcome, {\n\t\t\t\t\t\tcontent: welcome.contents,\n\t\t\t\t\t\twhen: ContextKeyExpr.deserialize(welcome.when),\n\t\t\t\t\t\tprecondition,\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\torder,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [id, viewContentMap] of welcomesByViewId) {\n\t\t\t\tconst disposables = viewsRegistry.registerViewWelcomeContent2(\n\t\t\t\t\tid,\n\t\t\t\t\tviewContentMap,\n\t\t\t\t);\n\n\t\t\t\tfor (const [welcome, disposable] of disposables) {\n\t\t\t\t\tthis.viewWelcomeContents.set(welcome, disposable);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction parseGroupAndOrder(\n\twelcome: ViewWelcome,\n\tcontribution: IExtensionPointUser<ViewsWelcomeExtensionPoint>,\n): { group: string | undefined; order: number | undefined } {\n\tlet group: string | undefined;\n\tlet order: number | undefined;\n\tif (welcome.group) {\n\t\tif (\n\t\t\t!isProposedApiEnabled(\n\t\t\t\tcontribution.description,\n\t\t\t\t\"contribViewsWelcome\",\n\t\t\t)\n\t\t) {\n\t\t\tcontribution.collector.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"ViewsWelcomeExtensionPoint.proposedAPI\",\n\t\t\t\t\t\"The viewsWelcome contribution in '{0}' requires 'enabledApiProposals: [\\\"contribViewsWelcome\\\"]' in order to use the 'group' proposed property.\",\n\t\t\t\t\tcontribution.description.identifier.value,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn { group, order };\n\t\t}\n\n\t\tconst idx = welcome.group.lastIndexOf(\"@\");\n\t\tif (idx > 0) {\n\t\t\tgroup = welcome.group.substr(0, idx);\n\t\t\torder = Number(welcome.group.substr(idx + 1)) || undefined;\n\t\t} else {\n\t\t\tgroup = welcome.group;\n\t\t}\n\t}\n\treturn { group, order };\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,OAEM;AACP,YAAY,SAAS;AACrB,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AAEzB;AAAA,EAGC,cAAc;AAAA,OACR;AACP,SAAS,4BAA4B;AAKrC;AAAA,EACC;AAAA,OAGM;AAEP,MAAM,gBAAgB,SAAS;AAAA,EAC9B,wBAAwB;AACzB;AAEO,MAAM,iCACJ,WAET;AAAA,EApCA,OAoCA;AAAA;AAAA;AAAA,EACS,sBAAsB,oBAAI,IAA8B;AAAA,EAEhE,YAAY,gBAA6D;AACxE,UAAM;AAEN,mBAAe,WAAW,CAAC,GAAG,EAAE,OAAO,QAAQ,MAAM;AACpD,iBAAW,gBAAgB,SAAS;AACnC,mBAAW,WAAW,aAAa,OAAO;AACzC,gBAAM,aAAa,KAAK,oBAAoB,IAAI,OAAO;AAEvD,sBAAY,QAAQ;AAAA,QACrB;AAAA,MACD;AAEA,YAAM,mBAAmB,oBAAI,IAG3B;AAEF,iBAAW,gBAAgB,OAAO;AACjC,mBAAW,WAAW,aAAa,OAAO;AACzC,gBAAM,EAAE,OAAO,MAAM,IAAI;AAAA,YACxB;AAAA,YACA;AAAA,UACD;AACA,gBAAM,eAAe,eAAe;AAAA,YACnC,QAAQ;AAAA,UACT;AAEA,gBAAM,KAAK,kBAAkB,QAAQ,IAAI,KAAK,QAAQ;AACtD,cAAI,iBAAiB,iBAAiB,IAAI,EAAE;AAC5C,cAAI,CAAC,gBAAgB;AACpB,6BAAiB,oBAAI,IAAI;AACzB,6BAAiB,IAAI,IAAI,cAAc;AAAA,UACxC;AAEA,yBAAe,IAAI,SAAS;AAAA,YAC3B,SAAS,QAAQ;AAAA,YACjB,MAAM,eAAe,YAAY,QAAQ,IAAI;AAAA,YAC7C;AAAA,YACA;AAAA,YACA;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD;AAEA,iBAAW,CAAC,IAAI,cAAc,KAAK,kBAAkB;AACpD,cAAM,cAAc,cAAc;AAAA,UACjC;AAAA,UACA;AAAA,QACD;AAEA,mBAAW,CAAC,SAAS,UAAU,KAAK,aAAa;AAChD,eAAK,oBAAoB,IAAI,SAAS,UAAU;AAAA,QACjD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAEA,SAAS,mBACR,SACA,cAC2D;AAC3D,MAAI;AACJ,MAAI;AACJ,MAAI,QAAQ,OAAO;AAClB,QACC,CAAC;AAAA,MACA,aAAa;AAAA,MACb;AAAA,IACD,GACC;AACD,mBAAa,UAAU;AAAA,QACtB,IAAI;AAAA,UACH;AAAA,UACA;AAAA,UACA,aAAa,YAAY,WAAW;AAAA,QACrC;AAAA,MACD;AACA,aAAO,EAAE,OAAO,MAAM;AAAA,IACvB;AAEA,UAAM,MAAM,QAAQ,MAAM,YAAY,GAAG;AACzC,QAAI,MAAM,GAAG;AACZ,cAAQ,QAAQ,MAAM,OAAO,GAAG,GAAG;AACnC,cAAQ,OAAO,QAAQ,MAAM,OAAO,MAAM,CAAC,CAAC,KAAK;AAAA,IAClD,OAAO;AACN,cAAQ,QAAQ;AAAA,IACjB;AAAA,EACD;AACA,SAAO,EAAE,OAAO,MAAM;AACvB;AAhCS;",
  "names": []
}
