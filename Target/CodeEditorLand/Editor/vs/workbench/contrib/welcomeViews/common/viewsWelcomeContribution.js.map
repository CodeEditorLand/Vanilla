{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IExtensionPoint, IExtensionPointUser } from '../../../services/extensions/common/extensionsRegistry.js';\nimport { ViewsWelcomeExtensionPoint, ViewWelcome, ViewIdentifierMap } from './viewsWelcomeExtensionPoint.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions as ViewContainerExtensions, IViewContentDescriptor, IViewsRegistry } from '../../../common/views.js';\nimport { isProposedApiEnabled } from '../../../services/extensions/common/extensions.js';\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\nexport class ViewsWelcomeContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate viewWelcomeContents = new Map<ViewWelcome, IDisposable>();\n\n\tconstructor(extensionPoint: IExtensionPoint<ViewsWelcomeExtensionPoint>) {\n\t\tsuper();\n\n\t\textensionPoint.setHandler((_, { added, removed }) => {\n\t\t\tfor (const contribution of removed) {\n\t\t\t\tfor (const welcome of contribution.value) {\n\t\t\t\t\tconst disposable = this.viewWelcomeContents.get(welcome);\n\n\t\t\t\t\tdisposable?.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst welcomesByViewId = new Map<string, Map<ViewWelcome, IViewContentDescriptor>>();\n\n\t\t\tfor (const contribution of added) {\n\t\t\t\tfor (const welcome of contribution.value) {\n\t\t\t\t\tconst { group, order } = parseGroupAndOrder(welcome, contribution);\n\t\t\t\t\tconst precondition = ContextKeyExpr.deserialize(welcome.enablement);\n\n\t\t\t\t\tconst id = ViewIdentifierMap[welcome.view] ?? welcome.view;\n\t\t\t\t\tlet viewContentMap = welcomesByViewId.get(id);\n\t\t\t\t\tif (!viewContentMap) {\n\t\t\t\t\t\tviewContentMap = new Map();\n\t\t\t\t\t\twelcomesByViewId.set(id, viewContentMap);\n\t\t\t\t\t}\n\n\t\t\t\t\tviewContentMap.set(welcome, {\n\t\t\t\t\t\tcontent: welcome.contents,\n\t\t\t\t\t\twhen: ContextKeyExpr.deserialize(welcome.when),\n\t\t\t\t\t\tprecondition,\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\torder\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [id, viewContentMap] of welcomesByViewId) {\n\t\t\t\tconst disposables = viewsRegistry.registerViewWelcomeContent2(id, viewContentMap);\n\n\t\t\t\tfor (const [welcome, disposable] of disposables) {\n\t\t\t\t\tthis.viewWelcomeContents.set(welcome, disposable);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction parseGroupAndOrder(welcome: ViewWelcome, contribution: IExtensionPointUser<ViewsWelcomeExtensionPoint>): { group: string | undefined; order: number | undefined } {\n\n\tlet group: string | undefined;\n\tlet order: number | undefined;\n\tif (welcome.group) {\n\t\tif (!isProposedApiEnabled(contribution.description, 'contribViewsWelcome')) {\n\t\t\tcontribution.collector.warn(nls.localize('ViewsWelcomeExtensionPoint.proposedAPI', \"The viewsWelcome contribution in '{0}' requires 'enabledApiProposals: [\\\"contribViewsWelcome\\\"]' in order to use the 'group' proposed property.\", contribution.description.identifier.value));\n\t\t\treturn { group, order };\n\t\t}\n\n\t\tconst idx = welcome.group.lastIndexOf('@');\n\t\tif (idx > 0) {\n\t\t\tgroup = welcome.group.substr(0, idx);\n\t\t\torder = Number(welcome.group.substr(idx + 1)) || undefined;\n\t\t} else {\n\t\t\tgroup = welcome.group;\n\t\t}\n\t}\n\treturn { group, order };\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,YAAY,mBAAmB;AACxC,SAAS,sBAAsB;AAC/B,SAAS,8BAA8B;AACvC,SAAS,iBAAiB,2BAA2B;AACrD,SAAS,4BAA4B,aAAa,yBAAyB;AAC3E,SAAS,gBAAgB;AACzB,SAAS,cAAc,yBAAyB,wBAAwB,sBAAsB;AAC9F,SAAS,4BAA4B;AAErC,MAAM,gBAAgB,SAAS,GAAmB,wBAAwB,aAAa;AAEhF,MAAM,iCAAiC,WAA6C;AAAA,EAjB3F,OAiB2F;AAAA;AAAA;AAAA,EAElF,sBAAsB,oBAAI,IAA8B;AAAA,EAEhE,YAAY,gBAA6D;AACxE,UAAM;AAEN,mBAAe,WAAW,CAAC,GAAG,EAAE,OAAO,QAAQ,MAAM;AACpD,iBAAW,gBAAgB,SAAS;AACnC,mBAAW,WAAW,aAAa,OAAO;AACzC,gBAAM,aAAa,KAAK,oBAAoB,IAAI,OAAO;AAEvD,sBAAY,QAAQ;AAAA,QACrB;AAAA,MACD;AAEA,YAAM,mBAAmB,oBAAI,IAAsD;AAEnF,iBAAW,gBAAgB,OAAO;AACjC,mBAAW,WAAW,aAAa,OAAO;AACzC,gBAAM,EAAE,OAAO,MAAM,IAAI,mBAAmB,SAAS,YAAY;AACjE,gBAAM,eAAe,eAAe,YAAY,QAAQ,UAAU;AAElE,gBAAM,KAAK,kBAAkB,QAAQ,IAAI,KAAK,QAAQ;AACtD,cAAI,iBAAiB,iBAAiB,IAAI,EAAE;AAC5C,cAAI,CAAC,gBAAgB;AACpB,6BAAiB,oBAAI,IAAI;AACzB,6BAAiB,IAAI,IAAI,cAAc;AAAA,UACxC;AAEA,yBAAe,IAAI,SAAS;AAAA,YAC3B,SAAS,QAAQ;AAAA,YACjB,MAAM,eAAe,YAAY,QAAQ,IAAI;AAAA,YAC7C;AAAA,YACA;AAAA,YACA;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD;AAEA,iBAAW,CAAC,IAAI,cAAc,KAAK,kBAAkB;AACpD,cAAM,cAAc,cAAc,4BAA4B,IAAI,cAAc;AAEhF,mBAAW,CAAC,SAAS,UAAU,KAAK,aAAa;AAChD,eAAK,oBAAoB,IAAI,SAAS,UAAU;AAAA,QACjD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAEA,SAAS,mBAAmB,SAAsB,cAAyH;AAE1K,MAAI;AACJ,MAAI;AACJ,MAAI,QAAQ,OAAO;AAClB,QAAI,CAAC,qBAAqB,aAAa,aAAa,qBAAqB,GAAG;AAC3E,mBAAa,UAAU,KAAK,IAAI,SAAS,0CAA0C,iJAAmJ,aAAa,YAAY,WAAW,KAAK,CAAC;AAChR,aAAO,EAAE,OAAO,MAAM;AAAA,IACvB;AAEA,UAAM,MAAM,QAAQ,MAAM,YAAY,GAAG;AACzC,QAAI,MAAM,GAAG;AACZ,cAAQ,QAAQ,MAAM,OAAO,GAAG,GAAG;AACnC,cAAQ,OAAO,QAAQ,MAAM,OAAO,MAAM,CAAC,CAAC,KAAK;AAAA,IAClD,OAAO;AACN,cAAQ,QAAQ;AAAA,IACjB;AAAA,EACD;AACA,SAAO,EAAE,OAAO,MAAM;AACvB;AAnBS;",
  "names": []
}
