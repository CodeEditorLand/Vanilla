{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/test/browser/taskTerminalStatus.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ok } from 'assert';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ACTIVE_TASK_STATUS, FAILED_TASK_STATUS, SUCCEEDED_TASK_STATUS, TaskTerminalStatus } from '../../browser/taskTerminalStatus.js';\nimport { AbstractProblemCollector } from '../../common/problemCollectors.js';\nimport { CommonTask, ITaskEvent, TaskEventKind, TaskRunType } from '../../common/tasks.js';\nimport { ITaskService, Task } from '../../common/taskService.js';\nimport { ITerminalInstance } from '../../../terminal/browser/terminal.js';\nimport { ITerminalStatusList, TerminalStatusList } from '../../../terminal/browser/terminalStatusList.js';\nimport { ITerminalStatus } from '../../../terminal/common/terminal.js';\n\nclass TestTaskService implements Partial<ITaskService> {\n\tprivate readonly _onDidStateChange: Emitter<ITaskEvent> = new Emitter();\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\tpublic triggerStateChange(event: Partial<ITaskEvent>): void {\n\t\tthis._onDidStateChange.fire(event as ITaskEvent);\n\t}\n}\n\nclass TestaccessibilitySignalService implements Partial<IAccessibilitySignalService> {\n\tasync playSignal(cue: AccessibilitySignal): Promise<void> {\n\t\treturn;\n\t}\n}\n\nclass TestTerminal extends Disposable implements Partial<ITerminalInstance> {\n\tstatusList: TerminalStatusList = this._register(new TerminalStatusList(new TestConfigurationService()));\n\tconstructor() {\n\t\tsuper();\n\t}\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t}\n}\n\nclass TestTask extends CommonTask {\n\n\tconstructor() {\n\t\tsuper('test', undefined, undefined, {}, {}, { kind: '', label: '' });\n\t}\n\n\tprotected getFolderId(): string | undefined {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprotected fromObject(object: any): Task {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nclass TestProblemCollector extends Disposable implements Partial<AbstractProblemCollector> {\n\tprotected readonly _onDidFindFirstMatch = new Emitter<void>();\n\treadonly onDidFindFirstMatch = this._onDidFindFirstMatch.event;\n\tprotected readonly _onDidFindErrors = new Emitter<void>();\n\treadonly onDidFindErrors = this._onDidFindErrors.event;\n\tprotected readonly _onDidRequestInvalidateLastMarker = new Emitter<void>();\n\treadonly onDidRequestInvalidateLastMarker = this._onDidRequestInvalidateLastMarker.event;\n}\n\nsuite('Task Terminal Status', () => {\n\tlet instantiationService: TestInstantiationService;\n\tlet taskService: TestTaskService;\n\tlet taskTerminalStatus: TaskTerminalStatus;\n\tlet testTerminal: ITerminalInstance;\n\tlet testTask: Task;\n\tlet problemCollector: AbstractProblemCollector;\n\tlet accessibilitySignalService: TestaccessibilitySignalService;\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tsetup(() => {\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\ttaskService = new TestTaskService();\n\t\taccessibilitySignalService = new TestaccessibilitySignalService();\n\t\ttaskTerminalStatus = store.add(new TaskTerminalStatus(taskService as any, accessibilitySignalService as any));\n\t\ttestTerminal = store.add(instantiationService.createInstance(TestTerminal) as any);\n\t\ttestTask = instantiationService.createInstance(TestTask) as unknown as Task;\n\t\tproblemCollector = store.add(instantiationService.createInstance(TestProblemCollector) as any);\n\t});\n\ttest('Should add failed status when there is an exit code on task end', async () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.End });\n\t\tawait poll<void>(async () => Promise.resolve(), () => testTerminal?.statusList.primary?.id === FAILED_TASK_STATUS.id, 'terminal status should be updated');\n\t});\n\ttest('Should add active status when a non-background task is run for a second time in the same terminal', () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted, runType: TaskRunType.SingleRun });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t});\n\ttest('Should drop status when a background task exits', async () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted, runType: TaskRunType.Background });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessEnded, exitCode: 0 });\n\t\tawait poll<void>(async () => Promise.resolve(), () => testTerminal?.statusList.statuses?.includes(SUCCEEDED_TASK_STATUS) === false, 'terminal should have dropped status');\n\t});\n\ttest('Should add succeeded status when a non-background task exits', () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted, runType: TaskRunType.SingleRun });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessEnded, exitCode: 0 });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t});\n});\n\nfunction assertStatus(actual: ITerminalStatusList, expected: ITerminalStatus): void {\n\tok(actual.statuses.length === 1, '# of statuses');\n\tok(actual.primary?.id === expected.id, 'ID');\n\tok(actual.primary?.severity === expected.severity, 'Severity');\n}\n\nasync function poll<T>(\n\tfn: () => Thenable<T>,\n\tacceptFn: (result: T) => boolean,\n\ttimeoutMessage: string,\n\tretryCount: number = 200,\n\tretryInterval: number = 10 // millis\n): Promise<T> {\n\tlet trial = 1;\n\tlet lastError: string = '';\n\n\twhile (true) {\n\t\tif (trial > retryCount) {\n\t\t\tthrow new Error(`Timeout: ${timeoutMessage} after ${(retryCount * retryInterval) / 1000} seconds.\\r${lastError}`);\n\t\t}\n\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await fn();\n\t\t\tif (acceptFn(result)) {\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\tlastError = 'Did not pass accept function';\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tlastError = Array.isArray(e.stack) ? e.stack.join('\\n') : e.stack;\n\t\t}\n\n\t\tawait new Promise(resolve => setTimeout(resolve, retryInterval));\n\t\ttrial++;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
