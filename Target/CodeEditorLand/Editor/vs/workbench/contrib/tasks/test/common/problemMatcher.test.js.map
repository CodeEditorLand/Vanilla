{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/test/common/problemMatcher.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as matchers from '../../common/problemMatcher.js';\n\nimport assert from 'assert';\nimport { ValidationState, IProblemReporter, ValidationStatus } from '../../../../../base/common/parsers.js';\n\nclass ProblemReporter implements IProblemReporter {\n\tprivate _validationStatus: ValidationStatus;\n\tprivate _messages: string[];\n\n\tconstructor() {\n\t\tthis._validationStatus = new ValidationStatus();\n\t\tthis._messages = [];\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Info;\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Warning;\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Error;\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._messages.push(message);\n\t\tthis._validationStatus.state = ValidationState.Fatal;\n\t}\n\n\tpublic hasMessage(message: string): boolean {\n\t\treturn this._messages.indexOf(message) !== null;\n\t}\n\tpublic get messages(): string[] {\n\t\treturn this._messages;\n\t}\n\tpublic get state(): ValidationState {\n\t\treturn this._validationStatus.state;\n\t}\n\n\tpublic isOK(): boolean {\n\t\treturn this._validationStatus.isOK();\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n}\n\nsuite('ProblemPatternParser', () => {\n\tlet reporter: ProblemReporter;\n\tlet parser: matchers.ProblemPatternParser;\n\tconst testRegexp = new RegExp('test');\n\n\tsetup(() => {\n\t\treporter = new ProblemReporter();\n\t\tparser = new matchers.ProblemPatternParser(reporter);\n\t});\n\n\tsuite('single-pattern definitions', () => {\n\t\ttest('parses a pattern defined by only a regexp', () => {\n\t\t\tconst problemPattern: matchers.Config.IProblemPattern = {\n\t\t\t\tregexp: 'test'\n\t\t\t};\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed, {\n\t\t\t\tregexp: testRegexp,\n\t\t\t\tkind: matchers.ProblemLocationKind.Location,\n\t\t\t\tfile: 1,\n\t\t\t\tline: 2,\n\t\t\t\tcharacter: 3,\n\t\t\t\tmessage: 0\n\t\t\t});\n\t\t});\n\t\ttest('does not sets defaults for line and character if kind is File', () => {\n\t\t\tconst problemPattern: matchers.Config.IProblemPattern = {\n\t\t\t\tregexp: 'test',\n\t\t\t\tkind: 'file'\n\t\t\t};\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.deepStrictEqual(parsed, {\n\t\t\t\tregexp: testRegexp,\n\t\t\t\tkind: matchers.ProblemLocationKind.File,\n\t\t\t\tfile: 1,\n\t\t\t\tmessage: 0\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('multi-pattern definitions', () => {\n\t\ttest('defines a pattern based on regexp and property fields, with file/line location', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3, line: 4, column: 5, message: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed,\n\t\t\t\t[{\n\t\t\t\t\tregexp: testRegexp,\n\t\t\t\t\tkind: matchers.ProblemLocationKind.Location,\n\t\t\t\t\tfile: 3,\n\t\t\t\t\tline: 4,\n\t\t\t\t\tcharacter: 5,\n\t\t\t\t\tmessage: 6\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\t\ttest('defines a pattern bsaed on regexp and property fields, with location', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3, location: 4, message: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed,\n\t\t\t\t[{\n\t\t\t\t\tregexp: testRegexp,\n\t\t\t\t\tkind: matchers.ProblemLocationKind.Location,\n\t\t\t\t\tfile: 3,\n\t\t\t\t\tlocation: 4,\n\t\t\t\t\tmessage: 6\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\t\ttest('accepts a pattern that provides the fields from multiple entries', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3 },\n\t\t\t\t{ regexp: 'test1', line: 4 },\n\t\t\t\t{ regexp: 'test2', column: 5 },\n\t\t\t\t{ regexp: 'test3', message: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed, [\n\t\t\t\t{ regexp: testRegexp, kind: matchers.ProblemLocationKind.Location, file: 3 },\n\t\t\t\t{ regexp: new RegExp('test1'), line: 4 },\n\t\t\t\t{ regexp: new RegExp('test2'), character: 5 },\n\t\t\t\t{ regexp: new RegExp('test3'), message: 6 }\n\t\t\t]);\n\t\t});\n\t\ttest('forbids setting the loop flag outside of the last element in the array', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3, loop: true },\n\t\t\t\t{ regexp: 'test1', line: 4 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The loop property is only supported on the last line matcher.'));\n\t\t});\n\t\ttest('forbids setting the kind outside of the first element of the array', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3 },\n\t\t\t\t{ regexp: 'test1', kind: 'file', line: 4 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. The kind property must be provided only in the first element'));\n\t\t});\n\n\t\ttest('kind: Location requires a regexp', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ file: 0, line: 1, column: 20, message: 0 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is missing a regular expression.'));\n\t\t});\n\t\ttest('kind: Location requires a regexp on every entry', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 3 },\n\t\t\t\t{ line: 4 },\n\t\t\t\t{ regexp: 'test2', column: 5 },\n\t\t\t\t{ regexp: 'test3', message: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is missing a regular expression.'));\n\t\t});\n\t\ttest('kind: Location requires a message', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 0, line: 1, column: 20 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must have at least have a file and a message.'));\n\t\t});\n\n\t\ttest('kind: Location requires a file', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', line: 1, column: 20, message: 0 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must either have kind: \"file\" or have a line or location match group.'));\n\t\t});\n\n\t\ttest('kind: Location requires either a line or location', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 1, column: 20, message: 0 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must either have kind: \"file\" or have a line or location match group.'));\n\t\t});\n\n\t\ttest('kind: File accepts a regexp, file and message', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', file: 2, kind: 'file', message: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert(reporter.isOK());\n\t\t\tassert.deepStrictEqual(parsed,\n\t\t\t\t[{\n\t\t\t\t\tregexp: testRegexp,\n\t\t\t\t\tkind: matchers.ProblemLocationKind.File,\n\t\t\t\t\tfile: 2,\n\t\t\t\t\tmessage: 6\n\t\t\t\t}]\n\t\t\t);\n\t\t});\n\n\t\ttest('kind: File requires a file', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', kind: 'file', message: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must have at least have a file and a message.'));\n\t\t});\n\n\t\ttest('kind: File requires a message', () => {\n\t\t\tconst problemPattern: matchers.Config.MultiLineProblemPattern = [\n\t\t\t\t{ regexp: 'test', kind: 'file', file: 6 }\n\t\t\t];\n\t\t\tconst parsed = parser.parse(problemPattern);\n\t\t\tassert.strictEqual(null, parsed);\n\t\t\tassert.strictEqual(ValidationState.Error, reporter.state);\n\t\t\tassert(reporter.hasMessage('The problem pattern is invalid. It must have at least have a file and a message.'));\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAIA,YAAY,cAAc;AAE1B,OAAO,YAAY;AACnB,SAAS,iBAAiB,kBAAkB,wBAAwB;AAEpE,MAAM,gBAA4C;AAAA,EATlD,OASkD;AAAA;AAAA;AAAA,EACzC;AAAA,EACA;AAAA,EAER,cAAc;AACb,SAAK,oBAAoB,IAAI,iBAAiB;AAC9C,SAAK,YAAY,CAAC;AAAA,EACnB;AAAA,EAEO,KAAK,SAAuB;AAClC,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,kBAAkB,QAAQ,gBAAgB;AAAA,EAChD;AAAA,EAEO,KAAK,SAAuB;AAClC,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,kBAAkB,QAAQ,gBAAgB;AAAA,EAChD;AAAA,EAEO,MAAM,SAAuB;AACnC,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,kBAAkB,QAAQ,gBAAgB;AAAA,EAChD;AAAA,EAEO,MAAM,SAAuB;AACnC,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,kBAAkB,QAAQ,gBAAgB;AAAA,EAChD;AAAA,EAEO,WAAW,SAA0B;AAC3C,WAAO,KAAK,UAAU,QAAQ,OAAO,MAAM;AAAA,EAC5C;AAAA,EACA,IAAW,WAAqB;AAC/B,WAAO,KAAK;AAAA,EACb;AAAA,EACA,IAAW,QAAyB;AACnC,WAAO,KAAK,kBAAkB;AAAA,EAC/B;AAAA,EAEO,OAAgB;AACtB,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACpC;AAAA,EAEA,IAAW,SAA2B;AACrC,WAAO,KAAK;AAAA,EACb;AACD;AAEA,MAAM,wBAAwB,MAAM;AACnC,MAAI;AACJ,MAAI;AACJ,QAAM,aAAa,IAAI,OAAO,MAAM;AAEpC,QAAM,MAAM;AACX,eAAW,IAAI,gBAAgB;AAC/B,aAAS,IAAI,SAAS,qBAAqB,QAAQ;AAAA,EACpD,CAAC;AAED,QAAM,8BAA8B,MAAM;AACzC,SAAK,6CAA6C,MAAM;AACvD,YAAM,iBAAkD;AAAA,QACvD,QAAQ;AAAA,MACT;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,SAAS,KAAK,CAAC;AACtB,aAAO,gBAAgB,QAAQ;AAAA,QAC9B,QAAQ;AAAA,QACR,MAAM,SAAS,oBAAoB;AAAA,QACnC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,WAAW;AAAA,QACX,SAAS;AAAA,MACV,CAAC;AAAA,IACF,CAAC;AACD,SAAK,iEAAiE,MAAM;AAC3E,YAAM,iBAAkD;AAAA,QACvD,QAAQ;AAAA,QACR,MAAM;AAAA,MACP;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,gBAAgB,QAAQ;AAAA,QAC9B,QAAQ;AAAA,QACR,MAAM,SAAS,oBAAoB;AAAA,QACnC,MAAM;AAAA,QACN,SAAS;AAAA,MACV,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,QAAM,6BAA6B,MAAM;AACxC,SAAK,kFAAkF,MAAM;AAC5F,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,EAAE;AAAA,MAC3D;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,SAAS,KAAK,CAAC;AACtB,aAAO;AAAA,QAAgB;AAAA,QACtB,CAAC;AAAA,UACA,QAAQ;AAAA,UACR,MAAM,SAAS,oBAAoB;AAAA,UACnC,MAAM;AAAA,UACN,MAAM;AAAA,UACN,WAAW;AAAA,UACX,SAAS;AAAA,QACV,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AACD,SAAK,wEAAwE,MAAM;AAClF,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,UAAU,GAAG,SAAS,EAAE;AAAA,MACpD;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,SAAS,KAAK,CAAC;AACtB,aAAO;AAAA,QAAgB;AAAA,QACtB,CAAC;AAAA,UACA,QAAQ;AAAA,UACR,MAAM,SAAS,oBAAoB;AAAA,UACnC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AACD,SAAK,oEAAoE,MAAM;AAC9E,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,EAAE;AAAA,QAC1B,EAAE,QAAQ,SAAS,MAAM,EAAE;AAAA,QAC3B,EAAE,QAAQ,SAAS,QAAQ,EAAE;AAAA,QAC7B,EAAE,QAAQ,SAAS,SAAS,EAAE;AAAA,MAC/B;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,SAAS,KAAK,CAAC;AACtB,aAAO,gBAAgB,QAAQ;AAAA,QAC9B,EAAE,QAAQ,YAAY,MAAM,SAAS,oBAAoB,UAAU,MAAM,EAAE;AAAA,QAC3E,EAAE,QAAQ,IAAI,OAAO,OAAO,GAAG,MAAM,EAAE;AAAA,QACvC,EAAE,QAAQ,IAAI,OAAO,OAAO,GAAG,WAAW,EAAE;AAAA,QAC5C,EAAE,QAAQ,IAAI,OAAO,OAAO,GAAG,SAAS,EAAE;AAAA,MAC3C,CAAC;AAAA,IACF,CAAC;AACD,SAAK,0EAA0E,MAAM;AACpF,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,MAAM,KAAK;AAAA,QACtC,EAAE,QAAQ,SAAS,MAAM,EAAE;AAAA,MAC5B;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,+DAA+D,CAAC;AAAA,IAC5F,CAAC;AACD,SAAK,sEAAsE,MAAM;AAChF,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,EAAE;AAAA,QAC1B,EAAE,QAAQ,SAAS,MAAM,QAAQ,MAAM,EAAE;AAAA,MAC1C;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,8FAA8F,CAAC;AAAA,IAC3H,CAAC;AAED,SAAK,oCAAoC,MAAM;AAC9C,YAAM,iBAA0D;AAAA,QAC/D,EAAE,MAAM,GAAG,MAAM,GAAG,QAAQ,IAAI,SAAS,EAAE;AAAA,MAC5C;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,sDAAsD,CAAC;AAAA,IACnF,CAAC;AACD,SAAK,mDAAmD,MAAM;AAC7D,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,EAAE;AAAA,QAC1B,EAAE,MAAM,EAAE;AAAA,QACV,EAAE,QAAQ,SAAS,QAAQ,EAAE;AAAA,QAC7B,EAAE,QAAQ,SAAS,SAAS,EAAE;AAAA,MAC/B;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,sDAAsD,CAAC;AAAA,IACnF,CAAC;AACD,SAAK,qCAAqC,MAAM;AAC/C,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,MAAM,GAAG,QAAQ,GAAG;AAAA,MAChD;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,kFAAkF,CAAC;AAAA,IAC/G,CAAC;AAED,SAAK,kCAAkC,MAAM;AAC5C,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,QAAQ,IAAI,SAAS,EAAE;AAAA,MACnD;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,0GAA0G,CAAC;AAAA,IACvI,CAAC;AAED,SAAK,qDAAqD,MAAM;AAC/D,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,QAAQ,IAAI,SAAS,EAAE;AAAA,MACnD;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,0GAA0G,CAAC;AAAA,IACvI,CAAC;AAED,SAAK,iDAAiD,MAAM;AAC3D,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,GAAG,MAAM,QAAQ,SAAS,EAAE;AAAA,MACrD;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,SAAS,KAAK,CAAC;AACtB,aAAO;AAAA,QAAgB;AAAA,QACtB,CAAC;AAAA,UACA,QAAQ;AAAA,UACR,MAAM,SAAS,oBAAoB;AAAA,UACnC,MAAM;AAAA,UACN,SAAS;AAAA,QACV,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AAED,SAAK,8BAA8B,MAAM;AACxC,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,QAAQ,SAAS,EAAE;AAAA,MAC5C;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,kFAAkF,CAAC;AAAA,IAC/G,CAAC;AAED,SAAK,iCAAiC,MAAM;AAC3C,YAAM,iBAA0D;AAAA,QAC/D,EAAE,QAAQ,QAAQ,MAAM,QAAQ,MAAM,EAAE;AAAA,MACzC;AACA,YAAM,SAAS,OAAO,MAAM,cAAc;AAC1C,aAAO,YAAY,MAAM,MAAM;AAC/B,aAAO,YAAY,gBAAgB,OAAO,SAAS,KAAK;AACxD,aAAO,SAAS,WAAW,kFAAkF,CAAC;AAAA,IAC/G,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
