{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/test/common/taskConfiguration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from '../../../../../base/common/uri.js';\nimport assert from 'assert';\nimport Severity from '../../../../../base/common/severity.js';\nimport * as UUID from '../../../../../base/common/uuid.js';\n\nimport * as Types from '../../../../../base/common/types.js';\nimport * as Platform from '../../../../../base/common/platform.js';\nimport { ValidationStatus } from '../../../../../base/common/parsers.js';\nimport { ProblemMatcher, FileLocationKind, IProblemPattern, ApplyToKind, INamedProblemMatcher } from '../../common/problemMatcher.js';\nimport { WorkspaceFolder, IWorkspace } from '../../../../../platform/workspace/common/workspace.js';\n\nimport * as Tasks from '../../common/tasks.js';\nimport { parse, IParseResult, IProblemReporter, IExternalTaskRunnerConfiguration, ICustomTask, TaskConfigSource, IParseContext, ProblemMatcherConverter, IGlobals, ITaskParseResult, UUIDMap, TaskParser } from '../../common/taskConfiguration.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { IContext } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { Workspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ITaskDefinitionRegistry } from '../../common/taskDefinitionRegistry.js';\n\nconst workspaceFolder: WorkspaceFolder = new WorkspaceFolder({\n\turi: URI.file('/workspace/folderOne'),\n\tname: 'folderOne',\n\tindex: 0\n});\n\nconst workspace: IWorkspace = new Workspace('id', [workspaceFolder]);\n\nclass ProblemReporter implements IProblemReporter {\n\n\tprivate _validationStatus: ValidationStatus = new ValidationStatus();\n\n\tpublic receivedMessage: boolean = false;\n\tpublic lastMessage: string | undefined = undefined;\n\n\tpublic info(message: string): void {\n\t\tthis.log(message);\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis.log(message);\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis.log(message);\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis.log(message);\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n\n\tprivate log(message: string): void {\n\t\tthis.receivedMessage = true;\n\t\tthis.lastMessage = message;\n\t}\n\n\tpublic clearMessage(): void {\n\t\tthis.lastMessage = undefined;\n\t}\n}\n\nclass ConfigurationBuilder {\n\n\tpublic result: Tasks.Task[];\n\tprivate builders: CustomTaskBuilder[];\n\n\tconstructor() {\n\t\tthis.result = [];\n\t\tthis.builders = [];\n\t}\n\n\tpublic task(name: string, command: string): CustomTaskBuilder {\n\t\tconst builder = new CustomTaskBuilder(this, name, command);\n\t\tthis.builders.push(builder);\n\t\tthis.result.push(builder.result);\n\t\treturn builder;\n\t}\n\n\tpublic done(): void {\n\t\tfor (const builder of this.builders) {\n\t\t\tbuilder.done();\n\t\t}\n\t}\n}\n\nclass PresentationBuilder {\n\n\tpublic result: Tasks.IPresentationOptions;\n\n\tconstructor(public parent: CommandConfigurationBuilder) {\n\t\tthis.result = { echo: false, reveal: Tasks.RevealKind.Always, revealProblems: Tasks.RevealProblemKind.Never, focus: false, panel: Tasks.PanelKind.Shared, showReuseMessage: true, clear: false, close: false };\n\t}\n\n\tpublic echo(value: boolean): PresentationBuilder {\n\t\tthis.result.echo = value;\n\t\treturn this;\n\t}\n\n\tpublic reveal(value: Tasks.RevealKind): PresentationBuilder {\n\t\tthis.result.reveal = value;\n\t\treturn this;\n\t}\n\n\tpublic focus(value: boolean): PresentationBuilder {\n\t\tthis.result.focus = value;\n\t\treturn this;\n\t}\n\n\tpublic instance(value: Tasks.PanelKind): PresentationBuilder {\n\t\tthis.result.panel = value;\n\t\treturn this;\n\t}\n\n\tpublic showReuseMessage(value: boolean): PresentationBuilder {\n\t\tthis.result.showReuseMessage = value;\n\t\treturn this;\n\t}\n\n\tpublic close(value: boolean): PresentationBuilder {\n\t\tthis.result.close = value;\n\t\treturn this;\n\t}\n\n\tpublic done(): void {\n\t}\n}\n\nclass CommandConfigurationBuilder {\n\tpublic result: Tasks.ICommandConfiguration;\n\n\tprivate presentationBuilder: PresentationBuilder;\n\n\tconstructor(public parent: CustomTaskBuilder, command: string) {\n\t\tthis.presentationBuilder = new PresentationBuilder(this);\n\t\tthis.result = {\n\t\t\tname: command,\n\t\t\truntime: Tasks.RuntimeType.Process,\n\t\t\targs: [],\n\t\t\toptions: {\n\t\t\t\tcwd: '${workspaceFolder}'\n\t\t\t},\n\t\t\tpresentation: this.presentationBuilder.result,\n\t\t\tsuppressTaskName: false\n\t\t};\n\t}\n\n\tpublic name(value: string): CommandConfigurationBuilder {\n\t\tthis.result.name = value;\n\t\treturn this;\n\t}\n\n\tpublic runtime(value: Tasks.RuntimeType): CommandConfigurationBuilder {\n\t\tthis.result.runtime = value;\n\t\treturn this;\n\t}\n\n\tpublic args(value: string[]): CommandConfigurationBuilder {\n\t\tthis.result.args = value;\n\t\treturn this;\n\t}\n\n\tpublic options(value: Tasks.CommandOptions): CommandConfigurationBuilder {\n\t\tthis.result.options = value;\n\t\treturn this;\n\t}\n\n\tpublic taskSelector(value: string): CommandConfigurationBuilder {\n\t\tthis.result.taskSelector = value;\n\t\treturn this;\n\t}\n\n\tpublic suppressTaskName(value: boolean): CommandConfigurationBuilder {\n\t\tthis.result.suppressTaskName = value;\n\t\treturn this;\n\t}\n\n\tpublic presentation(): PresentationBuilder {\n\t\treturn this.presentationBuilder;\n\t}\n\n\tpublic done(taskName: string): void {\n\t\tthis.result.args = this.result.args!.map(arg => arg === '$name' ? taskName : arg);\n\t\tthis.presentationBuilder.done();\n\t}\n}\n\nclass CustomTaskBuilder {\n\n\tpublic result: Tasks.CustomTask;\n\tprivate commandBuilder: CommandConfigurationBuilder;\n\n\tconstructor(public parent: ConfigurationBuilder, name: string, command: string) {\n\t\tthis.commandBuilder = new CommandConfigurationBuilder(this, command);\n\t\tthis.result = new Tasks.CustomTask(\n\t\t\tname,\n\t\t\t{ kind: Tasks.TaskSourceKind.Workspace, label: 'workspace', config: { workspaceFolder: workspaceFolder, element: undefined, index: -1, file: '.vscode/tasks.json' } },\n\t\t\tname,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tthis.commandBuilder.result,\n\t\t\tfalse,\n\t\t\t{ reevaluateOnRerun: true },\n\t\t\t{\n\t\t\t\tidentifier: name,\n\t\t\t\tname: name,\n\t\t\t\tisBackground: false,\n\t\t\t\tpromptOnClose: true,\n\t\t\t\tproblemMatchers: [],\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic identifier(value: string): CustomTaskBuilder {\n\t\tthis.result.configurationProperties.identifier = value;\n\t\treturn this;\n\t}\n\n\tpublic group(value: string | Tasks.TaskGroup): CustomTaskBuilder {\n\t\tthis.result.configurationProperties.group = value;\n\t\treturn this;\n\t}\n\n\tpublic isBackground(value: boolean): CustomTaskBuilder {\n\t\tthis.result.configurationProperties.isBackground = value;\n\t\treturn this;\n\t}\n\n\tpublic promptOnClose(value: boolean): CustomTaskBuilder {\n\t\tthis.result.configurationProperties.promptOnClose = value;\n\t\treturn this;\n\t}\n\n\tpublic problemMatcher(): ProblemMatcherBuilder {\n\t\tconst builder = new ProblemMatcherBuilder(this);\n\t\tthis.result.configurationProperties.problemMatchers!.push(builder.result);\n\t\treturn builder;\n\t}\n\n\tpublic command(): CommandConfigurationBuilder {\n\t\treturn this.commandBuilder;\n\t}\n\n\tpublic done(): void {\n\t\tthis.commandBuilder.done(this.result.configurationProperties.name!);\n\t}\n}\n\nclass ProblemMatcherBuilder {\n\n\tpublic static readonly DEFAULT_UUID = UUID.generateUuid();\n\n\tpublic result: ProblemMatcher;\n\n\tconstructor(public parent: CustomTaskBuilder) {\n\t\tthis.result = {\n\t\t\towner: ProblemMatcherBuilder.DEFAULT_UUID,\n\t\t\tapplyTo: ApplyToKind.allDocuments,\n\t\t\tseverity: undefined,\n\t\t\tfileLocation: FileLocationKind.Relative,\n\t\t\tfilePrefix: '${workspaceFolder}',\n\t\t\tpattern: undefined!\n\t\t};\n\t}\n\n\tpublic owner(value: string): ProblemMatcherBuilder {\n\t\tthis.result.owner = value;\n\t\treturn this;\n\t}\n\n\tpublic applyTo(value: ApplyToKind): ProblemMatcherBuilder {\n\t\tthis.result.applyTo = value;\n\t\treturn this;\n\t}\n\n\tpublic severity(value: Severity): ProblemMatcherBuilder {\n\t\tthis.result.severity = value;\n\t\treturn this;\n\t}\n\n\tpublic fileLocation(value: FileLocationKind): ProblemMatcherBuilder {\n\t\tthis.result.fileLocation = value;\n\t\treturn this;\n\t}\n\n\tpublic filePrefix(value: string): ProblemMatcherBuilder {\n\t\tthis.result.filePrefix = value;\n\t\treturn this;\n\t}\n\n\tpublic pattern(regExp: RegExp): PatternBuilder {\n\t\tconst builder = new PatternBuilder(this, regExp);\n\t\tif (!this.result.pattern) {\n\t\t\tthis.result.pattern = builder.result;\n\t\t}\n\t\treturn builder;\n\t}\n}\n\nclass PatternBuilder {\n\tpublic result: IProblemPattern;\n\n\tconstructor(public parent: ProblemMatcherBuilder, regExp: RegExp) {\n\t\tthis.result = {\n\t\t\tregexp: regExp,\n\t\t\tfile: 1,\n\t\t\tmessage: 0,\n\t\t\tline: 2,\n\t\t\tcharacter: 3\n\t\t};\n\t}\n\n\tpublic file(value: number): PatternBuilder {\n\t\tthis.result.file = value;\n\t\treturn this;\n\t}\n\n\tpublic message(value: number): PatternBuilder {\n\t\tthis.result.message = value;\n\t\treturn this;\n\t}\n\n\tpublic location(value: number): PatternBuilder {\n\t\tthis.result.location = value;\n\t\treturn this;\n\t}\n\n\tpublic line(value: number): PatternBuilder {\n\t\tthis.result.line = value;\n\t\treturn this;\n\t}\n\n\tpublic character(value: number): PatternBuilder {\n\t\tthis.result.character = value;\n\t\treturn this;\n\t}\n\n\tpublic endLine(value: number): PatternBuilder {\n\t\tthis.result.endLine = value;\n\t\treturn this;\n\t}\n\n\tpublic endCharacter(value: number): PatternBuilder {\n\t\tthis.result.endCharacter = value;\n\t\treturn this;\n\t}\n\n\tpublic code(value: number): PatternBuilder {\n\t\tthis.result.code = value;\n\t\treturn this;\n\t}\n\n\tpublic severity(value: number): PatternBuilder {\n\t\tthis.result.severity = value;\n\t\treturn this;\n\t}\n\n\tpublic loop(value: boolean): PatternBuilder {\n\t\tthis.result.loop = value;\n\t\treturn this;\n\t}\n}\n\nclass TasksMockContextKeyService extends MockContextKeyService {\n\tpublic override getContext(domNode: HTMLElement): IContext {\n\t\treturn {\n\t\t\tgetValue: <T>(_key: string) => {\n\t\t\t\treturn <T><unknown>true;\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction testDefaultProblemMatcher(external: IExternalTaskRunnerConfiguration, resolved: number) {\n\tconst reporter = new ProblemReporter();\n\tconst result = parse(workspaceFolder, workspace, Platform.platform, external, reporter, TaskConfigSource.TasksJson, new TasksMockContextKeyService());\n\tassert.ok(!reporter.receivedMessage);\n\tassert.strictEqual(result.custom.length, 1);\n\tconst task = result.custom[0];\n\tassert.ok(task);\n\tassert.strictEqual(task.configurationProperties.problemMatchers!.length, resolved);\n}\n\nfunction testConfiguration(external: IExternalTaskRunnerConfiguration, builder: ConfigurationBuilder): void {\n\tbuilder.done();\n\tconst reporter = new ProblemReporter();\n\tconst result = parse(workspaceFolder, workspace, Platform.platform, external, reporter, TaskConfigSource.TasksJson, new TasksMockContextKeyService());\n\tif (reporter.receivedMessage) {\n\t\tassert.ok(false, reporter.lastMessage);\n\t}\n\tassertConfiguration(result, builder.result);\n}\n\nclass TaskGroupMap {\n\tprivate _store: { [key: string]: Tasks.Task[] };\n\n\tconstructor() {\n\t\tthis._store = Object.create(null);\n\t}\n\n\tpublic add(group: string, task: Tasks.Task): void {\n\t\tlet tasks = this._store[group];\n\t\tif (!tasks) {\n\t\t\ttasks = [];\n\t\t\tthis._store[group] = tasks;\n\t\t}\n\t\ttasks.push(task);\n\t}\n\n\tpublic static assert(actual: TaskGroupMap, expected: TaskGroupMap): void {\n\t\tconst actualKeys = Object.keys(actual._store);\n\t\tconst expectedKeys = Object.keys(expected._store);\n\t\tif (actualKeys.length === 0 && expectedKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tassert.strictEqual(actualKeys.length, expectedKeys.length);\n\t\tactualKeys.forEach(key => assert.ok(expected._store[key]));\n\t\texpectedKeys.forEach(key => actual._store[key]);\n\t\tactualKeys.forEach((key) => {\n\t\t\tconst actualTasks = actual._store[key];\n\t\t\tconst expectedTasks = expected._store[key];\n\t\t\tassert.strictEqual(actualTasks.length, expectedTasks.length);\n\t\t\tif (actualTasks.length === 1) {\n\t\t\t\tassert.strictEqual(actualTasks[0].configurationProperties.name, expectedTasks[0].configurationProperties.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst expectedTaskMap: { [key: string]: boolean } = Object.create(null);\n\t\t\texpectedTasks.forEach(task => expectedTaskMap[task.configurationProperties.name!] = true);\n\t\t\tactualTasks.forEach(task => delete expectedTaskMap[task.configurationProperties.name!]);\n\t\t\tassert.strictEqual(Object.keys(expectedTaskMap).length, 0);\n\t\t});\n\t}\n}\n\nfunction assertConfiguration(result: IParseResult, expected: Tasks.Task[]): void {\n\tassert.ok(result.validationStatus.isOK());\n\tconst actual = result.custom;\n\tassert.strictEqual(typeof actual, typeof expected);\n\tif (!actual) {\n\t\treturn;\n\t}\n\n\t// We can't compare Ids since the parser uses UUID which are random\n\t// So create a new map using the name.\n\tconst actualTasks: { [key: string]: Tasks.Task } = Object.create(null);\n\tconst actualId2Name: { [key: string]: string } = Object.create(null);\n\tconst actualTaskGroups = new TaskGroupMap();\n\tactual.forEach(task => {\n\t\tassert.ok(!actualTasks[task.configurationProperties.name!]);\n\t\tactualTasks[task.configurationProperties.name!] = task;\n\t\tactualId2Name[task._id] = task.configurationProperties.name!;\n\n\t\tconst taskId = Tasks.TaskGroup.from(task.configurationProperties.group)?._id;\n\t\tif (taskId) {\n\t\t\tactualTaskGroups.add(taskId, task);\n\t\t}\n\t});\n\tconst expectedTasks: { [key: string]: Tasks.Task } = Object.create(null);\n\tconst expectedTaskGroup = new TaskGroupMap();\n\texpected.forEach(task => {\n\t\tassert.ok(!expectedTasks[task.configurationProperties.name!]);\n\t\texpectedTasks[task.configurationProperties.name!] = task;\n\t\tconst taskId = Tasks.TaskGroup.from(task.configurationProperties.group)?._id;\n\t\tif (taskId) {\n\t\t\texpectedTaskGroup.add(taskId, task);\n\t\t}\n\t});\n\tconst actualKeys = Object.keys(actualTasks);\n\tassert.strictEqual(actualKeys.length, expected.length);\n\tactualKeys.forEach((key) => {\n\t\tconst actualTask = actualTasks[key];\n\t\tconst expectedTask = expectedTasks[key];\n\t\tassert.ok(expectedTask);\n\t\tassertTask(actualTask, expectedTask);\n\t});\n\tTaskGroupMap.assert(actualTaskGroups, expectedTaskGroup);\n}\n\nfunction assertTask(actual: Tasks.Task, expected: Tasks.Task) {\n\tassert.ok(actual._id);\n\tassert.strictEqual(actual.configurationProperties.name, expected.configurationProperties.name, 'name');\n\tif (!Tasks.InMemoryTask.is(actual) && !Tasks.InMemoryTask.is(expected)) {\n\t\tassertCommandConfiguration(actual.command, expected.command);\n\t}\n\tassert.strictEqual(actual.configurationProperties.isBackground, expected.configurationProperties.isBackground, 'isBackground');\n\tassert.strictEqual(typeof actual.configurationProperties.problemMatchers, typeof expected.configurationProperties.problemMatchers);\n\tassert.strictEqual(actual.configurationProperties.promptOnClose, expected.configurationProperties.promptOnClose, 'promptOnClose');\n\tassert.strictEqual(typeof actual.configurationProperties.group, typeof expected.configurationProperties.group, `group types unequal`);\n\n\tif (actual.configurationProperties.problemMatchers && expected.configurationProperties.problemMatchers) {\n\t\tassert.strictEqual(actual.configurationProperties.problemMatchers.length, expected.configurationProperties.problemMatchers.length);\n\t\tfor (let i = 0; i < actual.configurationProperties.problemMatchers.length; i++) {\n\t\t\tassertProblemMatcher(actual.configurationProperties.problemMatchers[i], expected.configurationProperties.problemMatchers[i]);\n\t\t}\n\t}\n\n\tif (actual.configurationProperties.group && expected.configurationProperties.group) {\n\t\tif (Types.isString(actual.configurationProperties.group)) {\n\t\t\tassert.strictEqual(actual.configurationProperties.group, expected.configurationProperties.group);\n\t\t} else {\n\t\t\tassertGroup(actual.configurationProperties.group as Tasks.TaskGroup, expected.configurationProperties.group as Tasks.TaskGroup);\n\t\t}\n\t}\n}\n\nfunction assertCommandConfiguration(actual: Tasks.ICommandConfiguration, expected: Tasks.ICommandConfiguration) {\n\tassert.strictEqual(typeof actual, typeof expected);\n\tif (actual && expected) {\n\t\tassertPresentation(actual.presentation!, expected.presentation!);\n\t\tassert.strictEqual(actual.name, expected.name, 'name');\n\t\tassert.strictEqual(actual.runtime, expected.runtime, 'runtime type');\n\t\tassert.strictEqual(actual.suppressTaskName, expected.suppressTaskName, 'suppressTaskName');\n\t\tassert.strictEqual(actual.taskSelector, expected.taskSelector, 'taskSelector');\n\t\tassert.deepStrictEqual(actual.args, expected.args, 'args');\n\t\tassert.strictEqual(typeof actual.options, typeof expected.options);\n\t\tif (actual.options && expected.options) {\n\t\t\tassert.strictEqual(actual.options.cwd, expected.options.cwd, 'cwd');\n\t\t\tassert.strictEqual(typeof actual.options.env, typeof expected.options.env, 'env');\n\t\t\tif (actual.options.env && expected.options.env) {\n\t\t\t\tassert.deepStrictEqual(actual.options.env, expected.options.env, 'env');\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction assertGroup(actual: Tasks.TaskGroup, expected: Tasks.TaskGroup) {\n\tassert.strictEqual(typeof actual, typeof expected);\n\tif (actual && expected) {\n\t\tassert.strictEqual(actual._id, expected._id, `group ids unequal. actual: ${actual._id} expected ${expected._id}`);\n\t\tassert.strictEqual(actual.isDefault, expected.isDefault, `group defaults unequal. actual: ${actual.isDefault} expected ${expected.isDefault}`);\n\t}\n}\n\nfunction assertPresentation(actual: Tasks.IPresentationOptions, expected: Tasks.IPresentationOptions) {\n\tassert.strictEqual(typeof actual, typeof expected);\n\tif (actual && expected) {\n\t\tassert.strictEqual(actual.echo, expected.echo);\n\t\tassert.strictEqual(actual.reveal, expected.reveal);\n\t}\n}\n\nfunction assertProblemMatcher(actual: string | ProblemMatcher, expected: string | ProblemMatcher) {\n\tassert.strictEqual(typeof actual, typeof expected);\n\tif (typeof actual === 'string' && typeof expected === 'string') {\n\t\tassert.strictEqual(actual, expected, 'Problem matcher references are different');\n\t\treturn;\n\t}\n\tif (typeof actual !== 'string' && typeof expected !== 'string') {\n\t\tif (expected.owner === ProblemMatcherBuilder.DEFAULT_UUID) {\n\t\t\tassert.ok(UUID.isUUID(actual.owner), 'Owner must be a UUID');\n\t\t} else {\n\t\t\tassert.strictEqual(actual.owner, expected.owner);\n\t\t}\n\t\tassert.strictEqual(actual.applyTo, expected.applyTo);\n\t\tassert.strictEqual(actual.severity, expected.severity);\n\t\tassert.strictEqual(actual.fileLocation, expected.fileLocation);\n\t\tassert.strictEqual(actual.filePrefix, expected.filePrefix);\n\t\tif (actual.pattern && expected.pattern) {\n\t\t\tassertProblemPatterns(actual.pattern, expected.pattern);\n\t\t}\n\t}\n}\n\nfunction assertProblemPatterns(actual: IProblemPattern | IProblemPattern[], expected: IProblemPattern | IProblemPattern[]) {\n\tassert.strictEqual(typeof actual, typeof expected);\n\tif (Array.isArray(actual)) {\n\t\tconst actuals = <IProblemPattern[]>actual;\n\t\tconst expecteds = <IProblemPattern[]>expected;\n\t\tassert.strictEqual(actuals.length, expecteds.length);\n\t\tfor (let i = 0; i < actuals.length; i++) {\n\t\t\tassertProblemPattern(actuals[i], expecteds[i]);\n\t\t}\n\t} else {\n\t\tassertProblemPattern(<IProblemPattern>actual, <IProblemPattern>expected);\n\t}\n}\n\nfunction assertProblemPattern(actual: IProblemPattern, expected: IProblemPattern) {\n\tassert.strictEqual(actual.regexp.toString(), expected.regexp.toString());\n\tassert.strictEqual(actual.file, expected.file);\n\tassert.strictEqual(actual.message, expected.message);\n\tif (typeof expected.location !== 'undefined') {\n\t\tassert.strictEqual(actual.location, expected.location);\n\t} else {\n\t\tassert.strictEqual(actual.line, expected.line);\n\t\tassert.strictEqual(actual.character, expected.character);\n\t\tassert.strictEqual(actual.endLine, expected.endLine);\n\t\tassert.strictEqual(actual.endCharacter, expected.endCharacter);\n\t}\n\tassert.strictEqual(actual.code, expected.code);\n\tassert.strictEqual(actual.severity, expected.severity);\n\tassert.strictEqual(actual.loop, expected.loop);\n}\n\nsuite('Tasks version 0.1.0', () => {\n\ttest('tasks: all default', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc'\n\t\t\t}, builder);\n\t});\n\n\ttest('tasks: global isShellCommand', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\tisShellCommand: true\n\t\t\t},\n\t\t\tbuilder);\n\t});\n\n\ttest('tasks: global show output silent', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\tpresentation().reveal(Tasks.RevealKind.Silent);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\tshowOutput: 'silent'\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: global promptOnClose default', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\tpromptOnClose: true\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: global promptOnClose', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tpromptOnClose(false).\n\t\t\tcommand().suppressTaskName(true);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\tpromptOnClose: false\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: global promptOnClose default watching', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tisBackground(true).\n\t\t\tpromptOnClose(false).\n\t\t\tcommand().suppressTaskName(true);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\tisWatching: true\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: global show output never', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\tpresentation().reveal(Tasks.RevealKind.Never);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\tshowOutput: 'never'\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: global echo Command', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\tpresentation().\n\t\t\techo(true);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\techoCommand: true\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: global args', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\targs(['--p']);\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\targs: [\n\t\t\t\t\t'--p'\n\t\t\t\t]\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: options - cwd', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\toptions({\n\t\t\t\tcwd: 'myPath'\n\t\t\t});\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\toptions: {\n\t\t\t\t\tcwd: 'myPath'\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: options - env', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\toptions({ cwd: '${workspaceFolder}', env: { key: 'value' } });\n\t\ttestConfiguration(\n\t\t\t{\n\t\t\t\tversion: '0.1.0',\n\t\t\t\tcommand: 'tsc',\n\t\t\t\toptions: {\n\t\t\t\t\tenv: {\n\t\t\t\t\t\tkey: 'value'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuilder\n\t\t);\n\t});\n\n\ttest('tasks: os windows', () => {\n\t\tconst name: string = Platform.isWindows ? 'tsc.win' : 'tsc';\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask(name, name).\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true);\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\twindows: {\n\t\t\t\tcommand: 'tsc.win'\n\t\t\t}\n\t\t};\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: os windows & global isShellCommand', () => {\n\t\tconst name: string = Platform.isWindows ? 'tsc.win' : 'tsc';\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask(name, name).\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell);\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tisShellCommand: true,\n\t\t\twindows: {\n\t\t\t\tcommand: 'tsc.win'\n\t\t\t}\n\t\t};\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: os mac', () => {\n\t\tconst name: string = Platform.isMacintosh ? 'tsc.osx' : 'tsc';\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask(name, name).\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true);\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tosx: {\n\t\t\t\tcommand: 'tsc.osx'\n\t\t\t}\n\t\t};\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: os linux', () => {\n\t\tconst name: string = Platform.isLinux ? 'tsc.linux' : 'tsc';\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask(name, name).\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true);\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tlinux: {\n\t\t\t\tcommand: 'tsc.linux'\n\t\t\t}\n\t\t};\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: overwrite showOutput', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\tpresentation().reveal(Platform.isWindows ? Tasks.RevealKind.Always : Tasks.RevealKind.Never);\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tshowOutput: 'never',\n\t\t\twindows: {\n\t\t\t\tshowOutput: 'always'\n\t\t\t}\n\t\t};\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: overwrite echo Command', () => {\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.\n\t\t\ttask('tsc', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\tpresentation().\n\t\t\techo(Platform.isWindows ? false : true);\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\techoCommand: true,\n\t\t\twindows: {\n\t\t\t\techoCommand: false\n\t\t\t}\n\t\t};\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: global problemMatcher one', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tproblemMatcher: '$msCompile'\n\t\t};\n\t\ttestDefaultProblemMatcher(external, 1);\n\t});\n\n\ttest('tasks: global problemMatcher two', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tproblemMatcher: ['$eslint-compact', '$msCompile']\n\t\t};\n\t\ttestDefaultProblemMatcher(external, 2);\n\t});\n\n\ttest('tasks: task definition', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').command().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: build task', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tisBuildCommand: true\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').group(Tasks.TaskGroup.Build).command().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: default build task', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'build'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('build', 'tsc').group(Tasks.TaskGroup.Build).command().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: test task', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tisTestCommand: true\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').group(Tasks.TaskGroup.Test).command().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: default test task', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'test'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('test', 'tsc').group(Tasks.TaskGroup.Test).command().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: task with values', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'test',\n\t\t\t\t\tshowOutput: 'never',\n\t\t\t\t\techoCommand: true,\n\t\t\t\t\targs: ['--p'],\n\t\t\t\t\tisWatching: true\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('test', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Test).\n\t\t\tisBackground(true).\n\t\t\tpromptOnClose(false).\n\t\t\tcommand().args(['$name', '--p']).\n\t\t\tpresentation().\n\t\t\techo(true).reveal(Tasks.RevealKind.Never);\n\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: task inherits global values', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tshowOutput: 'never',\n\t\t\techoCommand: true,\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'test'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('test', 'tsc').\n\t\t\tgroup(Tasks.TaskGroup.Test).\n\t\t\tcommand().args(['$name']).presentation().\n\t\t\techo(true).reveal(Tasks.RevealKind.Never);\n\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: problem matcher default', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tproblemMatcher: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tregexp: 'abc'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().args(['$name']).parent.\n\t\t\tproblemMatcher().pattern(/abc/);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: problem matcher .* regular expression', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tproblemMatcher: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tregexp: '.*'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().args(['$name']).parent.\n\t\t\tproblemMatcher().pattern(/.*/);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: problem matcher owner, applyTo, severity and fileLocation', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tproblemMatcher: {\n\t\t\t\t\t\towner: 'myOwner',\n\t\t\t\t\t\tapplyTo: 'closedDocuments',\n\t\t\t\t\t\tseverity: 'warning',\n\t\t\t\t\t\tfileLocation: 'absolute',\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tregexp: 'abc'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().args(['$name']).parent.\n\t\t\tproblemMatcher().\n\t\t\towner('myOwner').\n\t\t\tapplyTo(ApplyToKind.closedDocuments).\n\t\t\tseverity(Severity.Warning).\n\t\t\tfileLocation(FileLocationKind.Absolute).\n\t\t\tfilePrefix(undefined!).\n\t\t\tpattern(/abc/);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: problem matcher fileLocation and filePrefix', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tproblemMatcher: {\n\t\t\t\t\t\tfileLocation: ['relative', 'myPath'],\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tregexp: 'abc'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().args(['$name']).parent.\n\t\t\tproblemMatcher().\n\t\t\tfileLocation(FileLocationKind.Relative).\n\t\t\tfilePrefix('myPath').\n\t\t\tpattern(/abc/);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: problem pattern location', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tproblemMatcher: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tregexp: 'abc',\n\t\t\t\t\t\t\tfile: 10,\n\t\t\t\t\t\t\tmessage: 11,\n\t\t\t\t\t\t\tlocation: 12,\n\t\t\t\t\t\t\tseverity: 13,\n\t\t\t\t\t\t\tcode: 14\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().args(['$name']).parent.\n\t\t\tproblemMatcher().\n\t\t\tpattern(/abc/).file(10).message(11).location(12).severity(13).code(14);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: problem pattern line & column', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tproblemMatcher: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tregexp: 'abc',\n\t\t\t\t\t\t\tfile: 10,\n\t\t\t\t\t\t\tmessage: 11,\n\t\t\t\t\t\t\tline: 12,\n\t\t\t\t\t\t\tcolumn: 13,\n\t\t\t\t\t\t\tendLine: 14,\n\t\t\t\t\t\t\tendColumn: 15,\n\t\t\t\t\t\t\tseverity: 16,\n\t\t\t\t\t\t\tcode: 17\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().args(['$name']).parent.\n\t\t\tproblemMatcher().\n\t\t\tpattern(/abc/).file(10).message(11).\n\t\t\tline(12).character(13).endLine(14).endCharacter(15).\n\t\t\tseverity(16).code(17);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: prompt on close default', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tpromptOnClose(true).\n\t\t\tcommand().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: prompt on close watching', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tisWatching: true\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tisBackground(true).promptOnClose(false).\n\t\t\tcommand().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: prompt on close set', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tpromptOnClose: false\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tpromptOnClose(false).\n\t\t\tcommand().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: task selector set', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttaskSelector: '/t:',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().\n\t\t\ttaskSelector('/t:').\n\t\t\targs(['/t:taskName']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: suppress task name set', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tsuppressTaskName: false,\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName',\n\t\t\t\t\tsuppressTaskName: true\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().suppressTaskName(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: suppress task name inherit', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\tsuppressTaskName: true,\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskName'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskName', 'tsc').\n\t\t\tcommand().suppressTaskName(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: two tasks', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameTwo'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').\n\t\t\tcommand().args(['$name']);\n\t\tbuilder.task('taskNameTwo', 'tsc').\n\t\t\tcommand().args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: with command', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\tcommand: 'tsc'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').command().suppressTaskName(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: two tasks with command', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\tcommand: 'tsc'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameTwo',\n\t\t\t\t\tcommand: 'dir'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').command().suppressTaskName(true);\n\t\tbuilder.task('taskNameTwo', 'dir').command().suppressTaskName(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: with command and args', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\tcommand: 'tsc',\n\t\t\t\t\tisShellCommand: true,\n\t\t\t\t\targs: ['arg'],\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tcwd: 'cwd',\n\t\t\t\t\t\tenv: {\n\t\t\t\t\t\t\tenv: 'env'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').command().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).args(['arg']).options({ cwd: 'cwd', env: { env: 'env' } });\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: with command os specific', () => {\n\t\tconst name: string = Platform.isWindows ? 'tsc.win' : 'tsc';\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\tcommand: 'tsc',\n\t\t\t\t\twindows: {\n\t\t\t\t\t\tcommand: 'tsc.win'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', name).command().suppressTaskName(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: with Windows specific args', () => {\n\t\tconst args: string[] = Platform.isWindows ? ['arg1', 'arg2'] : ['arg1'];\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'tsc',\n\t\t\t\t\tcommand: 'tsc',\n\t\t\t\t\targs: ['arg1'],\n\t\t\t\t\twindows: {\n\t\t\t\t\t\targs: ['arg2']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').command().suppressTaskName(true).args(args);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: with Linux specific args', () => {\n\t\tconst args: string[] = Platform.isLinux ? ['arg1', 'arg2'] : ['arg1'];\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'tsc',\n\t\t\t\t\tcommand: 'tsc',\n\t\t\t\t\targs: ['arg1'],\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\targs: ['arg2']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('tsc', 'tsc').command().suppressTaskName(true).args(args);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: global command and task command properties', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\tisShellCommand: true,\n\t\t\t\t} as ICustomTask\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').command().runtime(Tasks.RuntimeType.Shell).args(['$name']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: global and tasks args', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\targs: ['global'],\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\targs: ['local']\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').command().args(['global', '$name', 'local']);\n\t\ttestConfiguration(external, builder);\n\t});\n\n\ttest('tasks: global and tasks args with task selector', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: 'tsc',\n\t\t\targs: ['global'],\n\t\t\ttaskSelector: '/t:',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'taskNameOne',\n\t\t\t\t\targs: ['local']\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('taskNameOne', 'tsc').command().taskSelector('/t:').args(['global', '/t:taskNameOne', 'local']);\n\t\ttestConfiguration(external, builder);\n\t});\n});\n\nsuite('Tasks version 2.0.0', () => {\n\ttest.skip('Build workspace task', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'dir',\n\t\t\t\t\tcommand: 'dir',\n\t\t\t\t\ttype: 'shell',\n\t\t\t\t\tgroup: 'build'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('dir', 'dir').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest('Global group none', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\tcommand: 'dir',\n\t\t\ttype: 'shell',\n\t\t\tgroup: 'none'\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('dir', 'dir').\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest.skip('Global group build', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\tcommand: 'dir',\n\t\t\ttype: 'shell',\n\t\t\tgroup: 'build'\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('dir', 'dir').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest.skip('Global group default build', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\tcommand: 'dir',\n\t\t\ttype: 'shell',\n\t\t\tgroup: { kind: 'build', isDefault: true }\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tconst taskGroup = Tasks.TaskGroup.Build;\n\t\ttaskGroup.isDefault = true;\n\t\tbuilder.task('dir', 'dir').\n\t\t\tgroup(taskGroup).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest('Local group none', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'dir',\n\t\t\t\t\tcommand: 'dir',\n\t\t\t\t\ttype: 'shell',\n\t\t\t\t\tgroup: 'none'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('dir', 'dir').\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest.skip('Local group build', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'dir',\n\t\t\t\t\tcommand: 'dir',\n\t\t\t\t\ttype: 'shell',\n\t\t\t\t\tgroup: 'build'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('dir', 'dir').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest.skip('Local group default build', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'dir',\n\t\t\t\t\tcommand: 'dir',\n\t\t\t\t\ttype: 'shell',\n\t\t\t\t\tgroup: { kind: 'build', isDefault: true }\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tconst taskGroup = Tasks.TaskGroup.Build;\n\t\ttaskGroup.isDefault = true;\n\t\tbuilder.task('dir', 'dir').\n\t\t\tgroup(taskGroup).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\tpresentation().echo(true);\n\t\ttestConfiguration(external, builder);\n\t});\n\ttest('Arg overwrite', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '2.0.0',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'echo',\n\t\t\t\t\ttype: 'shell',\n\t\t\t\t\tcommand: 'echo',\n\t\t\t\t\targs: [\n\t\t\t\t\t\t'global'\n\t\t\t\t\t],\n\t\t\t\t\twindows: {\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t'windows'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t'linux'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tosx: {\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t'osx'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tif (Platform.isWindows) {\n\t\t\tbuilder.task('echo', 'echo').\n\t\t\t\tcommand().suppressTaskName(true).args(['windows']).\n\t\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\t\tpresentation().echo(true);\n\t\t\ttestConfiguration(external, builder);\n\t\t} else if (Platform.isLinux) {\n\t\t\tbuilder.task('echo', 'echo').\n\t\t\t\tcommand().suppressTaskName(true).args(['linux']).\n\t\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\t\tpresentation().echo(true);\n\t\t\ttestConfiguration(external, builder);\n\t\t} else if (Platform.isMacintosh) {\n\t\t\tbuilder.task('echo', 'echo').\n\t\t\t\tcommand().suppressTaskName(true).args(['osx']).\n\t\t\t\truntime(Tasks.RuntimeType.Shell).\n\t\t\t\tpresentation().echo(true);\n\t\t\ttestConfiguration(external, builder);\n\t\t}\n\t});\n});\n\nsuite('Bugs / regression tests', () => {\n\t(Platform.isLinux ? test.skip : test)('Bug 19548', () => {\n\t\tconst external: IExternalTaskRunnerConfiguration = {\n\t\t\tversion: '0.1.0',\n\t\t\twindows: {\n\t\t\t\tcommand: 'powershell',\n\t\t\t\toptions: {\n\t\t\t\t\tcwd: '${workspaceFolder}'\n\t\t\t\t},\n\t\t\t\ttasks: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttaskName: 'composeForDebug',\n\t\t\t\t\t\tsuppressTaskName: true,\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t'-ExecutionPolicy',\n\t\t\t\t\t\t\t'RemoteSigned',\n\t\t\t\t\t\t\t'.\\\\dockerTask.ps1',\n\t\t\t\t\t\t\t'-ComposeForDebug',\n\t\t\t\t\t\t\t'-Environment',\n\t\t\t\t\t\t\t'debug'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tisBuildCommand: false,\n\t\t\t\t\t\tshowOutput: 'always',\n\t\t\t\t\t\techoCommand: true\n\t\t\t\t\t} as ICustomTask\n\t\t\t\t]\n\t\t\t},\n\t\t\tosx: {\n\t\t\t\tcommand: '/bin/bash',\n\t\t\t\toptions: {\n\t\t\t\t\tcwd: '${workspaceFolder}'\n\t\t\t\t},\n\t\t\t\ttasks: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttaskName: 'composeForDebug',\n\t\t\t\t\t\tsuppressTaskName: true,\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t'-c',\n\t\t\t\t\t\t\t'./dockerTask.sh composeForDebug debug'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tisBuildCommand: false,\n\t\t\t\t\t\tshowOutput: 'always'\n\t\t\t\t\t} as ICustomTask\n\t\t\t\t]\n\t\t\t}\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tif (Platform.isWindows) {\n\t\t\tbuilder.task('composeForDebug', 'powershell').\n\t\t\t\tcommand().suppressTaskName(true).\n\t\t\t\targs(['-ExecutionPolicy', 'RemoteSigned', '.\\\\dockerTask.ps1', '-ComposeForDebug', '-Environment', 'debug']).\n\t\t\t\toptions({ cwd: '${workspaceFolder}' }).\n\t\t\t\tpresentation().echo(true).reveal(Tasks.RevealKind.Always);\n\t\t\ttestConfiguration(external, builder);\n\t\t} else if (Platform.isMacintosh) {\n\t\t\tbuilder.task('composeForDebug', '/bin/bash').\n\t\t\t\tcommand().suppressTaskName(true).\n\t\t\t\targs(['-c', './dockerTask.sh composeForDebug debug']).\n\t\t\t\toptions({ cwd: '${workspaceFolder}' }).\n\t\t\t\tpresentation().reveal(Tasks.RevealKind.Always);\n\t\t\ttestConfiguration(external, builder);\n\t\t}\n\t});\n\n\ttest('Bug 28489', () => {\n\t\tconst external = {\n\t\t\tversion: '0.1.0',\n\t\t\tcommand: '',\n\t\t\tisShellCommand: true,\n\t\t\targs: [''],\n\t\t\tshowOutput: 'always',\n\t\t\t'tasks': [\n\t\t\t\t{\n\t\t\t\t\ttaskName: 'build',\n\t\t\t\t\tcommand: 'bash',\n\t\t\t\t\targs: [\n\t\t\t\t\t\t'build.sh'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tconst builder = new ConfigurationBuilder();\n\t\tbuilder.task('build', 'bash').\n\t\t\tgroup(Tasks.TaskGroup.Build).\n\t\t\tcommand().suppressTaskName(true).\n\t\t\targs(['build.sh']).\n\t\t\truntime(Tasks.RuntimeType.Shell);\n\t\ttestConfiguration(external, builder);\n\t});\n});\n\nclass TestNamedProblemMatcher implements Partial<ProblemMatcher> {\n}\n\nclass TestParseContext implements Partial<IParseContext> {\n}\n\nclass TestTaskDefinitionRegistry implements Partial<ITaskDefinitionRegistry> {\n\tprivate _task: Tasks.ITaskDefinition | undefined;\n\tpublic get(key: string): Tasks.ITaskDefinition {\n\t\treturn this._task!;\n\t}\n\tpublic set(task: Tasks.ITaskDefinition) {\n\t\tthis._task = task;\n\t}\n}\n\nsuite('Task configuration conversions', () => {\n\tconst globals = {} as IGlobals;\n\tconst taskConfigSource = {} as TaskConfigSource;\n\tconst TaskDefinitionRegistry = new TestTaskDefinitionRegistry();\n\tlet instantiationService: TestInstantiationService;\n\tlet parseContext: IParseContext;\n\tlet namedProblemMatcher: INamedProblemMatcher;\n\tlet problemReporter: ProblemReporter;\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tnamedProblemMatcher = instantiationService.createInstance(TestNamedProblemMatcher);\n\t\tnamedProblemMatcher.name = 'real';\n\t\tnamedProblemMatcher.label = 'real label';\n\t\tproblemReporter = new ProblemReporter();\n\t\tparseContext = instantiationService.createInstance(TestParseContext);\n\t\tparseContext.problemReporter = problemReporter;\n\t\tparseContext.namedProblemMatchers = { 'real': namedProblemMatcher };\n\t\tparseContext.uuidMap = new UUIDMap();\n\t});\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\tsuite('ProblemMatcherConverter.from', () => {\n\t\ttest('returns [] and an error for an unknown problem matcher', () => {\n\t\t\tconst result = (ProblemMatcherConverter.from('$fake', parseContext));\n\t\t\tassert.deepEqual(result.value, []);\n\t\t\tassert.strictEqual(result.errors?.length, 1);\n\t\t});\n\t\ttest('returns config for a known problem matcher', () => {\n\t\t\tconst result = (ProblemMatcherConverter.from('$real', parseContext));\n\t\t\tassert.strictEqual(result.errors?.length, 0);\n\t\t\tassert.deepEqual(result.value, [{ \"label\": \"real label\" }]);\n\t\t});\n\t\ttest('returns config for a known problem matcher including applyTo', () => {\n\t\t\tnamedProblemMatcher.applyTo = ApplyToKind.closedDocuments;\n\t\t\tconst result = (ProblemMatcherConverter.from('$real', parseContext));\n\t\t\tassert.strictEqual(result.errors?.length, 0);\n\t\t\tassert.deepEqual(result.value, [{ \"label\": \"real label\", \"applyTo\": ApplyToKind.closedDocuments }]);\n\t\t});\n\t});\n\tsuite('TaskParser.from', () => {\n\t\tsuite('CustomTask', () => {\n\t\t\tsuite('incomplete config reports an appropriate error for missing', () => {\n\t\t\t\ttest('name', () => {\n\t\t\t\t\tconst result = TaskParser.from([{} as ICustomTask], globals, parseContext, taskConfigSource);\n\t\t\t\t\tassertTaskParseResult(result, undefined, problemReporter, 'Error: a task must provide a label property');\n\t\t\t\t});\n\t\t\t\ttest('command', () => {\n\t\t\t\t\tconst result = TaskParser.from([{ taskName: 'task' } as ICustomTask], globals, parseContext, taskConfigSource);\n\t\t\t\t\tassertTaskParseResult(result, undefined, problemReporter, \"Error: the task 'task' doesn't define a command\");\n\t\t\t\t});\n\t\t\t});\n\t\t\ttest('returns expected result', () => {\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ taskName: 'task', command: 'echo test' } as ICustomTask,\n\t\t\t\t\t{ taskName: 'task 2', command: 'echo test' } as ICustomTask\n\t\t\t\t];\n\t\t\t\tconst result = TaskParser.from(expected, globals, parseContext, taskConfigSource);\n\t\t\t\tassertTaskParseResult(result, { custom: expected }, problemReporter, undefined);\n\t\t\t});\n\t\t});\n\t\tsuite('ConfiguredTask', () => {\n\t\t\ttest('returns expected result', () => {\n\t\t\t\tconst expected = [{ taskName: 'task', command: 'echo test', type: 'any', label: 'task' }, { taskName: 'task 2', command: 'echo test', type: 'any', label: 'task 2' }];\n\t\t\t\tTaskDefinitionRegistry.set({ extensionId: 'registered', taskType: 'any', properties: {} } as Tasks.ITaskDefinition);\n\t\t\t\tconst result = TaskParser.from(expected, globals, parseContext, taskConfigSource, TaskDefinitionRegistry);\n\t\t\t\tassertTaskParseResult(result, { configured: expected }, problemReporter, undefined);\n\t\t\t});\n\t\t});\n\t});\n});\n\nfunction assertTaskParseResult(actual: ITaskParseResult, expected: ITestTaskParseResult | undefined, problemReporter: ProblemReporter, expectedMessage?: string): void {\n\tif (expectedMessage === undefined) {\n\t\tassert.strictEqual(problemReporter.lastMessage, undefined);\n\t} else {\n\t\tassert.ok(problemReporter.lastMessage?.includes(expectedMessage));\n\t}\n\n\tassert.deepEqual(actual.custom.length, expected?.custom?.length || 0);\n\tassert.deepEqual(actual.configured.length, expected?.configured?.length || 0);\n\n\tlet index = 0;\n\tif (expected?.configured) {\n\t\tfor (const taskParseResult of expected?.configured) {\n\t\t\tassert.strictEqual(actual.configured[index]._label, taskParseResult.label);\n\t\t\tindex++;\n\t\t}\n\t}\n\tindex = 0;\n\tif (expected?.custom) {\n\t\tfor (const taskParseResult of expected?.custom) {\n\t\t\tassert.strictEqual(actual.custom[index]._label, taskParseResult.taskName);\n\t\t\tindex++;\n\t\t}\n\t}\n\tproblemReporter.clearMessage();\n}\n\ninterface ITestTaskParseResult {\n\tcustom?: Partial<ICustomTask>[];\n\tconfigured?: Partial<ITestConfiguringTask>[];\n}\n\ninterface ITestConfiguringTask extends Partial<Tasks.ConfiguringTask> {\n\tlabel: string;\n}\n"],
  "mappings": "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",
  "names": []
}
