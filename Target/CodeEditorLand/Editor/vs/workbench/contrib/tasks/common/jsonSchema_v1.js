import*as o from"../../../../nls.js";import*as r from"../../../../base/common/objects.js";import{ProblemMatcherRegistry as m}from"./problemMatcher.js";import f from"./jsonSchemaCommon.js";const s={oneOf:[{allOf:[{type:"object",required:["version"],properties:{version:{type:"string",enum:["0.1.0"],deprecationMessage:o.localize("JsonSchema.version.deprecated","Task version 0.1.0 is deprecated. Please use 2.0.0"),description:o.localize("JsonSchema.version","The config's version number")},_runner:{deprecationMessage:o.localize("JsonSchema._runner","The runner has graduated. Use the official runner property")},runner:{type:"string",enum:["process","terminal"],default:"process",description:o.localize("JsonSchema.runner","Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.")},windows:{$ref:"#/definitions/taskRunnerConfiguration",description:o.localize("JsonSchema.windows","Windows specific command configuration")},osx:{$ref:"#/definitions/taskRunnerConfiguration",description:o.localize("JsonSchema.mac","Mac specific command configuration")},linux:{$ref:"#/definitions/taskRunnerConfiguration",description:o.localize("JsonSchema.linux","Linux specific command configuration")}}},{$ref:"#/definitions/taskRunnerConfiguration"}]}]},a={type:"boolean",default:!0,description:o.localize("JsonSchema.shell","Specifies whether the command is a shell command or an external program. Defaults to false if omitted.")};s.definitions=r.deepClone(f.definitions);const n=s.definitions;n.commandConfiguration.properties.isShellCommand=r.deepClone(a),n.taskDescription.properties.isShellCommand=r.deepClone(a),n.taskRunnerConfiguration.properties.isShellCommand=r.deepClone(a),Object.getOwnPropertyNames(n).forEach(e=>{const i=e+"1";n[i]=n[e],delete n[e]});function c(e){Array.isArray(e)?e.forEach(c):typeof e=="object"&&(e.$ref&&(e.$ref=e.$ref+"1"),Object.getOwnPropertyNames(e).forEach(i=>{const t=e[i];(Array.isArray(t)||typeof t=="object")&&c(t)}))}c(s),m.onReady().then(()=>{try{const e=m.keys().map(i=>"$"+i);n.problemMatcherType1.oneOf[0].enum=e,n.problemMatcherType1.oneOf[2].items.anyOf[1].enum=e}catch{console.log("Installing problem matcher ids failed")}});var u=s;export{u as default};
