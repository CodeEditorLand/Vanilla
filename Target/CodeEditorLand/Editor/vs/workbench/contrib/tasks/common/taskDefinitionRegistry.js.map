{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport type {\n\tIJSONSchema,\n\tIJSONSchemaMap,\n} from \"../../../../base/common/jsonSchema.js\";\nimport * as Objects from \"../../../../base/common/objects.js\";\nimport * as Types from \"../../../../base/common/types.js\";\nimport * as nls from \"../../../../nls.js\";\n\nimport {\n\ttype ExtensionMessageCollector,\n\tExtensionsRegistry,\n} from \"../../../services/extensions/common/extensionsRegistry.js\";\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport type * as Tasks from \"./tasks.js\";\n\nconst taskDefinitionSchema: IJSONSchema = {\n\ttype: \"object\",\n\tadditionalProperties: false,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"TaskDefinition.description\",\n\t\t\t\t\"The actual task type. Please note that types starting with a '$' are reserved for internal usage.\",\n\t\t\t),\n\t\t},\n\t\trequired: {\n\t\t\ttype: \"array\",\n\t\t\titems: {\n\t\t\t\ttype: \"string\",\n\t\t\t},\n\t\t},\n\t\tproperties: {\n\t\t\ttype: \"object\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"TaskDefinition.properties\",\n\t\t\t\t\"Additional properties of the task type\",\n\t\t\t),\n\t\t\tadditionalProperties: {\n\t\t\t\t$ref: \"http://json-schema.org/draft-07/schema#\",\n\t\t\t},\n\t\t},\n\t\twhen: {\n\t\t\ttype: \"string\",\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"TaskDefinition.when\",\n\t\t\t\t\"Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition. See the [API documentation](https://code.visualstudio.com/api/extension-guides/task-provider#when-clause) for more information.\",\n\t\t\t),\n\t\t\tdefault: \"\",\n\t\t},\n\t},\n};\n\nnamespace Configuration {\n\texport interface ITaskDefinition {\n\t\ttype?: string;\n\t\trequired?: string[];\n\t\tproperties?: IJSONSchemaMap;\n\t\twhen?: string;\n\t}\n\n\texport function from(\n\t\tvalue: ITaskDefinition,\n\t\textensionId: ExtensionIdentifier,\n\t\tmessageCollector: ExtensionMessageCollector,\n\t): Tasks.ITaskDefinition | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst taskType = Types.isString(value.type) ? value.type : undefined;\n\t\tif (!taskType || taskType.length === 0) {\n\t\t\tmessageCollector.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskTypeConfiguration.noType\",\n\t\t\t\t\t\"The task type configuration is missing the required 'taskType' property\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst required: string[] = [];\n\t\tif (Array.isArray(value.required)) {\n\t\t\tfor (const element of value.required) {\n\t\t\t\tif (Types.isString(element)) {\n\t\t\t\t\trequired.push(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\textensionId: extensionId.value,\n\t\t\ttaskType,\n\t\t\trequired: required,\n\t\t\tproperties: value.properties\n\t\t\t\t? Objects.deepClone(value.properties)\n\t\t\t\t: {},\n\t\t\twhen: value.when\n\t\t\t\t? ContextKeyExpr.deserialize(value.when)\n\t\t\t\t: undefined,\n\t\t};\n\t}\n}\n\nconst taskDefinitionsExtPoint = ExtensionsRegistry.registerExtensionPoint<\n\tConfiguration.ITaskDefinition[]\n>({\n\textensionPoint: \"taskDefinitions\",\n\tactivationEventsGenerator: (\n\t\tcontributions: Configuration.ITaskDefinition[],\n\t\tresult: { push(item: string): void },\n\t) => {\n\t\tfor (const task of contributions) {\n\t\t\tif (task.type) {\n\t\t\t\tresult.push(`onTaskType:${task.type}`);\n\t\t\t}\n\t\t}\n\t},\n\tjsonSchema: {\n\t\tdescription: nls.localize(\n\t\t\t\"TaskDefinitionExtPoint\",\n\t\t\t\"Contributes task kinds\",\n\t\t),\n\t\ttype: \"array\",\n\t\titems: taskDefinitionSchema,\n\t},\n});\n\nexport interface ITaskDefinitionRegistry {\n\tonReady(): Promise<void>;\n\n\tget(key: string): Tasks.ITaskDefinition;\n\tall(): Tasks.ITaskDefinition[];\n\tgetJsonSchema(): IJSONSchema;\n\tonDefinitionsChanged: Event<void>;\n}\n\nclass TaskDefinitionRegistryImpl implements ITaskDefinitionRegistry {\n\tprivate taskTypes: IStringDictionary<Tasks.ITaskDefinition>;\n\tprivate readyPromise: Promise<void>;\n\tprivate _schema: IJSONSchema | undefined;\n\tprivate _onDefinitionsChanged: Emitter<void> = new Emitter();\n\tpublic onDefinitionsChanged: Event<void> = this._onDefinitionsChanged.event;\n\n\tconstructor() {\n\t\tthis.taskTypes = Object.create(null);\n\t\tthis.readyPromise = new Promise<void>((resolve, reject) => {\n\t\t\ttaskDefinitionsExtPoint.setHandler((extensions, delta) => {\n\t\t\t\tthis._schema = undefined;\n\t\t\t\ttry {\n\t\t\t\t\tfor (const extension of delta.removed) {\n\t\t\t\t\t\tconst taskTypes = extension.value;\n\t\t\t\t\t\tfor (const taskType of taskTypes) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.taskTypes &&\n\t\t\t\t\t\t\t\ttaskType.type &&\n\t\t\t\t\t\t\t\tthis.taskTypes[taskType.type]\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tdelete this.taskTypes[taskType.type];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const extension of delta.added) {\n\t\t\t\t\t\tconst taskTypes = extension.value;\n\t\t\t\t\t\tfor (const taskType of taskTypes) {\n\t\t\t\t\t\t\tconst type = Configuration.from(\n\t\t\t\t\t\t\t\ttaskType,\n\t\t\t\t\t\t\t\textension.description.identifier,\n\t\t\t\t\t\t\t\textension.collector,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (type) {\n\t\t\t\t\t\t\t\tthis.taskTypes[type.taskType] = type;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (delta.removed.length > 0 || delta.added.length > 0) {\n\t\t\t\t\t\tthis._onDefinitionsChanged.fire();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {}\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic onReady(): Promise<void> {\n\t\treturn this.readyPromise;\n\t}\n\n\tpublic get(key: string): Tasks.ITaskDefinition {\n\t\treturn this.taskTypes[key];\n\t}\n\n\tpublic all(): Tasks.ITaskDefinition[] {\n\t\treturn Object.keys(this.taskTypes).map((key) => this.taskTypes[key]);\n\t}\n\n\tpublic getJsonSchema(): IJSONSchema {\n\t\tif (this._schema === undefined) {\n\t\t\tconst schemas: IJSONSchema[] = [];\n\t\t\tfor (const definition of this.all()) {\n\t\t\t\tconst schema: IJSONSchema = {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t};\n\t\t\t\tif (definition.required.length > 0) {\n\t\t\t\t\tschema.required = definition.required.slice(0);\n\t\t\t\t}\n\t\t\t\tif (definition.properties !== undefined) {\n\t\t\t\t\tschema.properties = Objects.deepClone(\n\t\t\t\t\t\tdefinition.properties,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tschema.properties = Object.create(null);\n\t\t\t\t}\n\t\t\t\tschema.properties!.type = {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tenum: [definition.taskType],\n\t\t\t\t};\n\t\t\t\tschemas.push(schema);\n\t\t\t}\n\t\t\tthis._schema = { oneOf: schemas };\n\t\t}\n\t\treturn this._schema;\n\t}\n}\n\nexport const TaskDefinitionRegistry: ITaskDefinitionRegistry =\n\tnew TaskDefinitionRegistryImpl();\n"],
  "mappings": "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",
  "names": ["Configuration"]
}
