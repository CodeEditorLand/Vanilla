{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/taskService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\n\nimport { IWorkspaceFolder, IWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport { Task, ContributedTask, CustomTask, ITaskSet, TaskSorter, ITaskEvent, ITaskIdentifier, ConfiguringTask, TaskRunSource } from './tasks.js';\nimport { ITaskSummary, ITaskTerminateResponse, ITaskSystemInfo } from './taskSystem.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { RawContextKey, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\n\nexport type { ITaskSummary, Task, ITaskTerminateResponse as TaskTerminateResponse };\n\nexport const CustomExecutionSupportedContext = new RawContextKey<boolean>('customExecutionSupported', false, nls.localize('tasks.customExecutionSupported', \"Whether CustomExecution tasks are supported. Consider using in the when clause of a \\'taskDefinition\\' contribution.\"));\nexport const ShellExecutionSupportedContext = new RawContextKey<boolean>('shellExecutionSupported', false, nls.localize('tasks.shellExecutionSupported', \"Whether ShellExecution tasks are supported. Consider using in the when clause of a \\'taskDefinition\\' contribution.\"));\nexport const TaskCommandsRegistered = new RawContextKey<boolean>('taskCommandsRegistered', false, nls.localize('tasks.taskCommandsRegistered', \"Whether the task commands have been registered yet\"));\nexport const ProcessExecutionSupportedContext = new RawContextKey<boolean>('processExecutionSupported', false, nls.localize('tasks.processExecutionSupported', \"Whether ProcessExecution tasks are supported. Consider using in the when clause of a \\'taskDefinition\\' contribution.\"));\nexport const ServerlessWebContext = new RawContextKey<boolean>('serverlessWebContext', false, nls.localize('tasks.serverlessWebContext', \"True when in the web with no remote authority.\"));\nexport const TaskExecutionSupportedContext = ContextKeyExpr.or(ContextKeyExpr.and(ShellExecutionSupportedContext, ProcessExecutionSupportedContext), CustomExecutionSupportedContext);\n\nexport const ITaskService = createDecorator<ITaskService>('taskService');\n\nexport interface ITaskProvider {\n\tprovideTasks(validTypes: IStringDictionary<boolean>): Promise<ITaskSet>;\n\tresolveTask(task: ConfiguringTask): Promise<ContributedTask | undefined>;\n}\n\nexport interface IProblemMatcherRunOptions {\n\tattachProblemMatcher?: boolean;\n}\n\nexport interface ICustomizationProperties {\n\tgroup?: string | { kind?: string; isDefault?: boolean };\n\tproblemMatcher?: string | string[];\n\tisBackground?: boolean;\n\tcolor?: string;\n\ticon?: string;\n}\n\nexport interface ITaskFilter {\n\tversion?: string;\n\ttype?: string;\n\ttask?: string;\n}\n\ninterface IWorkspaceTaskResult {\n\tset: ITaskSet | undefined;\n\tconfigurations: {\n\t\tbyIdentifier: IStringDictionary<ConfiguringTask>;\n\t} | undefined;\n\thasErrors: boolean;\n}\n\nexport interface IWorkspaceFolderTaskResult extends IWorkspaceTaskResult {\n\tworkspaceFolder: IWorkspaceFolder;\n}\n\nexport interface ITaskService {\n\treadonly _serviceBrand: undefined;\n\tonDidStateChange: Event<ITaskEvent>;\n\t/** Fired when task providers are registered or unregistered */\n\tonDidChangeTaskProviders: Event<void>;\n\tisReconnected: boolean;\n\tonDidReconnectToTasks: Event<void>;\n\tsupportsMultipleTaskExecutions: boolean;\n\n\tconfigureAction(): Action;\n\trun(task: Task | undefined, options?: IProblemMatcherRunOptions): Promise<ITaskSummary | undefined>;\n\tinTerminal(): boolean;\n\tgetActiveTasks(): Promise<Task[]>;\n\tgetBusyTasks(): Promise<Task[]>;\n\tterminate(task: Task): Promise<ITaskTerminateResponse>;\n\ttasks(filter?: ITaskFilter): Promise<Task[]>;\n\t/**\n\t * Gets tasks currently known to the task system. Unlike {@link tasks},\n\t * this does not activate extensions or prompt for workspace trust.\n\t */\n\tgetKnownTasks(filter?: ITaskFilter): Promise<Task[]>;\n\ttaskTypes(): string[];\n\tgetWorkspaceTasks(runSource?: TaskRunSource): Promise<Map<string, IWorkspaceFolderTaskResult>>;\n\tgetSavedTasks(type: 'persistent' | 'historical'): Promise<(Task | ConfiguringTask)[]>;\n\tremoveRecentlyUsedTask(taskRecentlyUsedKey: string): void;\n\t/**\n\t * @param alias The task's name, label or defined identifier.\n\t */\n\tgetTask(workspaceFolder: IWorkspace | IWorkspaceFolder | string, alias: string | ITaskIdentifier, compareId?: boolean): Promise<Task | undefined>;\n\ttryResolveTask(configuringTask: ConfiguringTask): Promise<Task | undefined>;\n\tcreateSorter(): TaskSorter;\n\n\tgetTaskDescription(task: Task | ConfiguringTask): string | undefined;\n\tcustomize(task: ContributedTask | CustomTask | ConfiguringTask, properties?: {}, openConfig?: boolean): Promise<void>;\n\topenConfig(task: CustomTask | ConfiguringTask | undefined): Promise<boolean>;\n\n\tregisterTaskProvider(taskProvider: ITaskProvider, type: string): IDisposable;\n\n\tregisterTaskSystem(scheme: string, taskSystemInfo: ITaskSystemInfo): void;\n\tonDidChangeTaskSystemInfo: Event<void>;\n\tonDidChangeTaskConfig: Event<void>;\n\treadonly hasTaskSystemInfo: boolean;\n\tregisterSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean): void;\n\n\textensionCallbackTaskComplete(task: Task, result: number | undefined): Promise<void>;\n}\n"],
  "mappings": "AAKA,YAAY,SAAS;AACrB,SAAS,cAAc;AACvB,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAE5B,SAAS,kBAAkB,kBAAkB;AAC7C,SAAS,MAAM,iBAAiB,YAAY,UAAU,YAAY,YAAY,iBAAiB,iBAAiB,qBAAqB;AACrI,SAAS,cAAc,wBAAwB,uBAAuB;AACtE,SAAS,yBAAyB;AAClC,SAAS,eAAe,sBAAsB;AAIvC,MAAM,kCAAkC,IAAI,cAAuB,4BAA4B,OAAO,IAAI,SAAS,kCAAkC,oHAAsH,CAAC;AAC5Q,MAAM,iCAAiC,IAAI,cAAuB,2BAA2B,OAAO,IAAI,SAAS,iCAAiC,mHAAqH,CAAC;AACxQ,MAAM,yBAAyB,IAAI,cAAuB,0BAA0B,OAAO,IAAI,SAAS,gCAAgC,oDAAoD,CAAC;AAC7L,MAAM,mCAAmC,IAAI,cAAuB,6BAA6B,OAAO,IAAI,SAAS,mCAAmC,qHAAuH,CAAC;AAChR,MAAM,uBAAuB,IAAI,cAAuB,wBAAwB,OAAO,IAAI,SAAS,8BAA8B,gDAAgD,CAAC;AACnL,MAAM,gCAAgC,eAAe,GAAG,eAAe,IAAI,gCAAgC,gCAAgC,GAAG,+BAA+B;AAE7K,MAAM,eAAe,gBAA8B,aAAa;",
  "names": []
}
