{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/taskConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport type { IJSONSchemaMap } from \"../../../../base/common/jsonSchema.js\";\nimport * as Objects from \"../../../../base/common/objects.js\";\nimport { Platform } from \"../../../../base/common/platform.js\";\nimport * as Types from \"../../../../base/common/types.js\";\nimport * as UUID from \"../../../../base/common/uuid.js\";\n\nimport type {\n\tIProblemReporter as IProblemReporterBase,\n\tValidationStatus,\n} from \"../../../../base/common/parsers.js\";\nimport {\n\ttype INamedProblemMatcher,\n\ttype ProblemMatcher,\n\ttype Config as ProblemMatcherConfig,\n\tProblemMatcherParser,\n\tProblemMatcherRegistry,\n\tisNamedProblemMatcher,\n} from \"./problemMatcher.js\";\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type {\n\tIWorkspace,\n\tIWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport type { ConfiguredInput } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport {\n\ttype ITaskDefinitionRegistry,\n\tTaskDefinitionRegistry,\n} from \"./taskDefinitionRegistry.js\";\nimport {\n\tProcessExecutionSupportedContext,\n\tShellExecutionSupportedContext,\n} from \"./taskService.js\";\nimport * as Tasks from \"./tasks.js\";\n\nexport enum ShellQuoting {\n\t/**\n\t * Default is character escaping.\n\t */\n\tescape = 1,\n\n\t/**\n\t * Default is strong quoting\n\t */\n\tstrong = 2,\n\n\t/**\n\t * Default is weak quoting.\n\t */\n\tweak = 3,\n}\n\nexport interface IShellQuotingOptions {\n\t/**\n\t * The character used to do character escaping.\n\t */\n\tescape?:\n\t\t| string\n\t\t| {\n\t\t\t\tescapeChar: string;\n\t\t\t\tcharsToEscape: string;\n\t\t  };\n\n\t/**\n\t * The character used for string quoting.\n\t */\n\tstrong?: string;\n\n\t/**\n\t * The character used for weak quoting.\n\t */\n\tweak?: string;\n}\n\nexport interface IShellConfiguration {\n\texecutable?: string;\n\targs?: string[];\n\tquoting?: IShellQuotingOptions;\n}\n\nexport interface ICommandOptionsConfig {\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The additional environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: IStringDictionary<string>;\n\n\t/**\n\t * The shell configuration;\n\t */\n\tshell?: IShellConfiguration;\n}\n\nexport interface IPresentationOptionsConfig {\n\t/**\n\t * Controls whether the terminal executing a task is brought to front or not.\n\t * Defaults to `RevealKind.Always`.\n\t */\n\treveal?: string;\n\n\t/**\n\t * Controls whether the problems panel is revealed when running this task or not.\n\t * Defaults to `RevealKind.Never`.\n\t */\n\trevealProblems?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output window or terminal as well.\n\t */\n\techo?: boolean;\n\n\t/**\n\t * Controls whether the terminal is focus when this task is executed\n\t */\n\tfocus?: boolean;\n\n\t/**\n\t * Controls whether the task runs in a new terminal\n\t */\n\tpanel?: string;\n\n\t/**\n\t * Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.\n\t */\n\tshowReuseMessage?: boolean;\n\n\t/**\n\t * Controls whether the terminal should be cleared before running the task.\n\t */\n\tclear?: boolean;\n\n\t/**\n\t * Controls whether the task is executed in a specific terminal group using split panes.\n\t */\n\tgroup?: string;\n\n\t/**\n\t * Controls whether the terminal that the task runs in is closed when the task completes.\n\t * Note that if the terminal process exits with a non-zero exit code, it will not close.\n\t */\n\tclose?: boolean;\n}\n\nexport interface IRunOptionsConfig {\n\treevaluateOnRerun?: boolean;\n\trunOn?: string;\n\tinstanceLimit?: number;\n}\n\nexport interface ITaskIdentifier {\n\ttype?: string;\n\t[name: string]: any;\n}\n\nexport namespace ITaskIdentifier {\n\texport function is(value: any): value is ITaskIdentifier {\n\t\tconst candidate: ITaskIdentifier = value;\n\t\treturn candidate !== undefined && Types.isString(value.type);\n\t}\n}\n\nexport interface ILegacyTaskProperties {\n\t/**\n\t * @deprecated Use `isBackground` instead.\n\t * Whether the executed command is kept alive and is watching the file system.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * @deprecated Use `group` instead.\n\t * Whether this task maps to the default build command.\n\t */\n\tisBuildCommand?: boolean;\n\n\t/**\n\t * @deprecated Use `group` instead.\n\t * Whether this task maps to the default test command.\n\t */\n\tisTestCommand?: boolean;\n}\n\nexport interface ILegacyCommandProperties {\n\t/**\n\t * Whether this is a shell or process\n\t */\n\ttype?: string;\n\n\t/**\n\t * @deprecated Use presentation options\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * See BaseTaskRunnerConfiguration#showOutput for details.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * @deprecated Use presentation options\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * @deprecated Use presentation instead\n\t */\n\tterminal?: IPresentationOptionsConfig;\n\n\t/**\n\t * @deprecated Use inline commands.\n\t * See BaseTaskRunnerConfiguration#suppressTaskName for details.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * @deprecated use the task type instead.\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean | IShellConfiguration;\n}\n\nexport type CommandString =\n\t| string\n\t| string[]\n\t| { value: string | string[]; quoting: \"escape\" | \"strong\" | \"weak\" };\n\nexport namespace CommandString {\n\texport function value(value: CommandString): string {\n\t\tif (Types.isString(value)) {\n\t\t\treturn value;\n\t\t} else if (Types.isStringArray(value)) {\n\t\t\treturn value.join(\" \");\n\t\t} else if (Types.isString(value.value)) {\n\t\t\treturn value.value;\n\t\t} else {\n\t\t\treturn value.value.join(\" \");\n\t\t}\n\t}\n}\n\nexport interface IBaseCommandProperties {\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: CommandString;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The arguments passed to the command or additional arguments passed to the\n\t * command when using a global command.\n\t */\n\targs?: CommandString[];\n}\n\nexport interface ICommandProperties extends IBaseCommandProperties {\n\t/**\n\t * Windows specific command properties\n\t */\n\twindows?: IBaseCommandProperties;\n\n\t/**\n\t * OSX specific command properties\n\t */\n\tosx?: IBaseCommandProperties;\n\n\t/**\n\t * linux specific command properties\n\t */\n\tlinux?: IBaseCommandProperties;\n}\n\nexport interface IGroupKind {\n\tkind?: string;\n\tisDefault?: boolean | string;\n}\n\nexport interface IConfigurationProperties {\n\t/**\n\t * The task's name\n\t */\n\ttaskName?: string;\n\n\t/**\n\t * The UI label used for the task.\n\t */\n\tlabel?: string;\n\n\t/**\n\t * An optional identifier which can be used to reference a task\n\t * in a dependsOn or other attributes.\n\t */\n\tidentifier?: string;\n\n\t/**\n\t * Whether the executed command is kept alive and runs in the background.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * Defines the group the task belongs too.\n\t */\n\tgroup?: string | IGroupKind;\n\n\t/**\n\t * A description of the task.\n\t */\n\tdetail?: string;\n\n\t/**\n\t * The other tasks the task depend on\n\t */\n\tdependsOn?: string | ITaskIdentifier | Array<string | ITaskIdentifier>;\n\n\t/**\n\t * The order the dependsOn tasks should be executed in.\n\t */\n\tdependsOrder?: string;\n\n\t/**\n\t * Controls the behavior of the used terminal\n\t */\n\tpresentation?: IPresentationOptionsConfig;\n\n\t/**\n\t * Controls shell options.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The problem matcher(s) to use to capture problems in the tasks\n\t * output.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * Task run options. Control run related properties.\n\t */\n\trunOptions?: IRunOptionsConfig;\n\n\t/**\n\t * The icon for this task in the terminal tabs list\n\t */\n\ticon?: { id: string; color?: string };\n\n\t/**\n\t * The icon's color in the terminal tabs list\n\t */\n\tcolor?: string;\n\n\t/**\n\t * Do not show this task in the run task quickpick\n\t */\n\thide?: boolean;\n}\n\nexport interface ICustomTask\n\textends ICommandProperties,\n\t\tIConfigurationProperties {\n\t/**\n\t * Custom tasks have the type CUSTOMIZED_TASK_TYPE\n\t */\n\ttype?: string;\n}\n\nexport interface IConfiguringTask extends IConfigurationProperties {\n\t/**\n\t * The contributed type of the task\n\t */\n\ttype?: string;\n}\n\n/**\n * The base task runner configuration\n */\nexport interface IBaseTaskRunnerConfiguration {\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: CommandString;\n\n\t/**\n\t * @deprecated Use type instead\n\t *\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean;\n\n\t/**\n\t * The task type\n\t */\n\ttype?: string;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The arguments passed to the command. Can be omitted.\n\t */\n\targs?: CommandString[];\n\n\t/**\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * Valid values are:\n\t *   \"always\": bring the output window always to front when a task is executed.\n\t *   \"silent\": only bring it to front if no problem matcher is defined for the task executed.\n\t *   \"never\": never bring the output window to front.\n\t *\n\t * If omitted \"always\" is used.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * The group\n\t */\n\tgroup?: string | IGroupKind;\n\n\t/**\n\t * Controls the behavior of the used terminal\n\t */\n\tpresentation?: IPresentationOptionsConfig;\n\n\t/**\n\t * If set to false the task name is added as an additional argument to the\n\t * command when executed. If set to true the task name is suppressed. If\n\t * omitted false is used.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * The problem matcher(s) to used if a global command is executed (e.g. no tasks\n\t * are defined). A tasks.json file can either contain a global problemMatcher\n\t * property or a tasks property but not both.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * @deprecated Use `isBackground` instead.\n\t *\n\t * Specifies whether a global command is a watching the filesystem. A task.json\n\t * file can either contain a global isWatching property or a tasks property\n\t * but not both.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * Specifies whether a global command is a background task.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * The configuration of the available tasks. A tasks.json file can either\n\t * contain a global problemMatcher property or a tasks property but not both.\n\t */\n\ttasks?: Array<ICustomTask | IConfiguringTask>;\n\n\t/**\n\t * Problem matcher declarations.\n\t */\n\tdeclares?: ProblemMatcherConfig.INamedProblemMatcher[];\n\n\t/**\n\t * Optional user input variables.\n\t */\n\tinputs?: ConfiguredInput[];\n}\n\n/**\n * A configuration of an external build system. BuildConfiguration.buildSystem\n * must be set to 'program'\n */\nexport interface IExternalTaskRunnerConfiguration\n\textends IBaseTaskRunnerConfiguration {\n\t_runner?: string;\n\n\t/**\n\t * Determines the runner to use\n\t */\n\trunner?: string;\n\n\t/**\n\t * The config's version number\n\t */\n\tversion: string;\n\n\t/**\n\t * Windows specific task configuration\n\t */\n\twindows?: IBaseTaskRunnerConfiguration;\n\n\t/**\n\t * Mac specific task configuration\n\t */\n\tosx?: IBaseTaskRunnerConfiguration;\n\n\t/**\n\t * Linux specific task configuration\n\t */\n\tlinux?: IBaseTaskRunnerConfiguration;\n}\n\nenum ProblemMatcherKind {\n\tUnknown = 0,\n\tString = 1,\n\tProblemMatcher = 2,\n\tArray = 3,\n}\n\ntype TaskConfigurationValueWithErrors<T> = {\n\tvalue?: T;\n\terrors?: string[];\n};\n\nconst EMPTY_ARRAY: any[] = [];\nObject.freeze(EMPTY_ARRAY);\n\nfunction assignProperty<T, K extends keyof T>(\n\ttarget: T,\n\tsource: Partial<T>,\n\tkey: K,\n) {\n\tconst sourceAtKey = source[key];\n\tif (sourceAtKey !== undefined) {\n\t\ttarget[key] = sourceAtKey!;\n\t}\n}\n\nfunction fillProperty<T, K extends keyof T>(\n\ttarget: T,\n\tsource: Partial<T>,\n\tkey: K,\n) {\n\tconst sourceAtKey = source[key];\n\tif (target[key] === undefined && sourceAtKey !== undefined) {\n\t\ttarget[key] = sourceAtKey!;\n\t}\n}\n\ninterface IParserType<T> {\n\tisEmpty(value: T | undefined): boolean;\n\tassignProperties(\n\t\ttarget: T | undefined,\n\t\tsource: T | undefined,\n\t): T | undefined;\n\tfillProperties(target: T | undefined, source: T | undefined): T | undefined;\n\tfillDefaults(value: T | undefined, context: IParseContext): T | undefined;\n\tfreeze(value: T): Readonly<T> | undefined;\n}\n\ninterface IMetaData<T, U> {\n\tproperty: keyof T;\n\ttype?: IParserType<U>;\n}\n\nfunction _isEmpty<T>(\n\tthis: void,\n\tvalue: T | undefined,\n\tproperties: IMetaData<T, any>[] | undefined,\n\tallowEmptyArray = false,\n): boolean {\n\tif (value === undefined || value === null || properties === undefined) {\n\t\treturn true;\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = value[meta.property];\n\t\tif (property !== undefined && property !== null) {\n\t\t\tif (meta.type !== undefined && !meta.type.isEmpty(property)) {\n\t\t\t\treturn false;\n\t\t\t} else if (\n\t\t\t\t!Array.isArray(property) ||\n\t\t\t\tproperty.length > 0 ||\n\t\t\t\tallowEmptyArray\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction _assignProperties<T>(\n\tthis: void,\n\ttarget: T | undefined,\n\tsource: T | undefined,\n\tproperties: IMetaData<T, any>[],\n): T | undefined {\n\tif (!source || _isEmpty(source, properties)) {\n\t\treturn target;\n\t}\n\tif (!target || _isEmpty(target, properties)) {\n\t\treturn source;\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = meta.property;\n\t\tlet value: any;\n\t\tif (meta.type !== undefined) {\n\t\t\tvalue = meta.type.assignProperties(\n\t\t\t\ttarget[property],\n\t\t\t\tsource[property],\n\t\t\t);\n\t\t} else {\n\t\t\tvalue = source[property];\n\t\t}\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _fillProperties<T>(\n\tthis: void,\n\ttarget: T | undefined,\n\tsource: T | undefined,\n\tproperties: IMetaData<T, any>[] | undefined,\n\tallowEmptyArray = false,\n): T | undefined {\n\tif (!source || _isEmpty(source, properties)) {\n\t\treturn target;\n\t}\n\tif (!target || _isEmpty(target, properties, allowEmptyArray)) {\n\t\treturn source;\n\t}\n\tfor (const meta of properties!) {\n\t\tconst property = meta.property;\n\t\tlet value: any;\n\t\tif (meta.type) {\n\t\t\tvalue = meta.type.fillProperties(\n\t\t\t\ttarget[property],\n\t\t\t\tsource[property],\n\t\t\t);\n\t\t} else if (target[property] === undefined) {\n\t\t\tvalue = source[property];\n\t\t}\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _fillDefaults<T>(\n\tthis: void,\n\ttarget: T | undefined,\n\tdefaults: T | undefined,\n\tproperties: IMetaData<T, any>[],\n\tcontext: IParseContext,\n): T | undefined {\n\tif (target && Object.isFrozen(target)) {\n\t\treturn target;\n\t}\n\tif (\n\t\ttarget === undefined ||\n\t\ttarget === null ||\n\t\tdefaults === undefined ||\n\t\tdefaults === null\n\t) {\n\t\tif (defaults !== undefined && defaults !== null) {\n\t\t\treturn Objects.deepClone(defaults);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = meta.property;\n\t\tif (target[property] !== undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet value: any;\n\t\tif (meta.type) {\n\t\t\tvalue = meta.type.fillDefaults(target[property], context);\n\t\t} else {\n\t\t\tvalue = defaults[property];\n\t\t}\n\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _freeze<T>(\n\tthis: void,\n\ttarget: T,\n\tproperties: IMetaData<T, any>[],\n): Readonly<T> | undefined {\n\tif (target === undefined || target === null) {\n\t\treturn undefined;\n\t}\n\tif (Object.isFrozen(target)) {\n\t\treturn target;\n\t}\n\tfor (const meta of properties) {\n\t\tif (meta.type) {\n\t\t\tconst value = target[meta.property];\n\t\t\tif (value) {\n\t\t\t\tmeta.type.freeze(value);\n\t\t\t}\n\t\t}\n\t}\n\tObject.freeze(target);\n\treturn target;\n}\n\nexport namespace RunOnOptions {\n\texport function fromString(value: string | undefined): Tasks.RunOnOptions {\n\t\tif (!value) {\n\t\t\treturn Tasks.RunOnOptions.default;\n\t\t}\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase \"folderopen\":\n\t\t\t\treturn Tasks.RunOnOptions.folderOpen;\n\t\t\tcase \"default\":\n\t\t\tdefault:\n\t\t\t\treturn Tasks.RunOnOptions.default;\n\t\t}\n\t}\n}\n\nexport namespace RunOptions {\n\tconst properties: IMetaData<Tasks.IRunOptions, void>[] = [\n\t\t{ property: \"reevaluateOnRerun\" },\n\t\t{ property: \"runOn\" },\n\t\t{ property: \"instanceLimit\" },\n\t];\n\texport function fromConfiguration(\n\t\tvalue: IRunOptionsConfig | undefined,\n\t): Tasks.IRunOptions {\n\t\treturn {\n\t\t\treevaluateOnRerun: value ? value.reevaluateOnRerun : true,\n\t\t\trunOn: value\n\t\t\t\t? RunOnOptions.fromString(value.runOn)\n\t\t\t\t: Tasks.RunOnOptions.default,\n\t\t\tinstanceLimit: value ? value.instanceLimit : 1,\n\t\t};\n\t}\n\n\texport function assignProperties(\n\t\ttarget: Tasks.IRunOptions,\n\t\tsource: Tasks.IRunOptions | undefined,\n\t): Tasks.IRunOptions {\n\t\treturn _assignProperties(target, source, properties)!;\n\t}\n\n\texport function fillProperties(\n\t\ttarget: Tasks.IRunOptions,\n\t\tsource: Tasks.IRunOptions | undefined,\n\t): Tasks.IRunOptions {\n\t\treturn _fillProperties(target, source, properties)!;\n\t}\n}\n\nexport interface IParseContext {\n\tworkspaceFolder: IWorkspaceFolder;\n\tworkspace: IWorkspace | undefined;\n\tproblemReporter: IProblemReporter;\n\tnamedProblemMatchers: IStringDictionary<INamedProblemMatcher>;\n\tuuidMap: UUIDMap;\n\tengine: Tasks.ExecutionEngine;\n\tschemaVersion: Tasks.JsonSchemaVersion;\n\tplatform: Platform;\n\ttaskLoadIssues: string[];\n\tcontextKeyService: IContextKeyService;\n}\n\nnamespace ShellConfiguration {\n\tconst properties: IMetaData<Tasks.IShellConfiguration, void>[] = [\n\t\t{ property: \"executable\" },\n\t\t{ property: \"args\" },\n\t\t{ property: \"quoting\" },\n\t];\n\n\texport function is(value: any): value is IShellConfiguration {\n\t\tconst candidate: IShellConfiguration = value;\n\t\treturn (\n\t\t\tcandidate &&\n\t\t\t(Types.isString(candidate.executable) ||\n\t\t\t\tTypes.isStringArray(candidate.args))\n\t\t);\n\t}\n\n\texport function from(\n\t\tthis: void,\n\t\tconfig: IShellConfiguration | undefined,\n\t\tcontext: IParseContext,\n\t): Tasks.IShellConfiguration | undefined {\n\t\tif (!is(config)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: IShellConfiguration = {};\n\t\tif (config.executable !== undefined) {\n\t\t\tresult.executable = config.executable;\n\t\t}\n\t\tif (config.args !== undefined) {\n\t\t\tresult.args = config.args.slice();\n\t\t}\n\t\tif (config.quoting !== undefined) {\n\t\t\tresult.quoting = Objects.deepClone(config.quoting);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function isEmpty(\n\t\tthis: void,\n\t\tvalue: Tasks.IShellConfiguration,\n\t): boolean {\n\t\treturn _isEmpty(value, properties, true);\n\t}\n\n\texport function assignProperties(\n\t\tthis: void,\n\t\ttarget: Tasks.IShellConfiguration | undefined,\n\t\tsource: Tasks.IShellConfiguration | undefined,\n\t): Tasks.IShellConfiguration | undefined {\n\t\treturn _assignProperties(target, source, properties);\n\t}\n\n\texport function fillProperties(\n\t\tthis: void,\n\t\ttarget: Tasks.IShellConfiguration,\n\t\tsource: Tasks.IShellConfiguration,\n\t): Tasks.IShellConfiguration | undefined {\n\t\treturn _fillProperties(target, source, properties, true);\n\t}\n\n\texport function fillDefaults(\n\t\tthis: void,\n\t\tvalue: Tasks.IShellConfiguration,\n\t\tcontext: IParseContext,\n\t): Tasks.IShellConfiguration {\n\t\treturn value;\n\t}\n\n\texport function freeze(\n\t\tthis: void,\n\t\tvalue: Tasks.IShellConfiguration,\n\t): Readonly<Tasks.IShellConfiguration> | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.freeze(value);\n\t}\n}\n\nnamespace CommandOptions {\n\tconst properties: IMetaData<\n\t\tTasks.CommandOptions,\n\t\tTasks.IShellConfiguration\n\t>[] = [\n\t\t{ property: \"cwd\" },\n\t\t{ property: \"env\" },\n\t\t{ property: \"shell\", type: ShellConfiguration },\n\t];\n\tconst defaults: ICommandOptionsConfig = { cwd: \"${workspaceFolder}\" };\n\n\texport function from(\n\t\tthis: void,\n\t\toptions: ICommandOptionsConfig,\n\t\tcontext: IParseContext,\n\t): Tasks.CommandOptions | undefined {\n\t\tconst result: Tasks.CommandOptions = {};\n\t\tif (options.cwd !== undefined) {\n\t\t\tif (Types.isString(options.cwd)) {\n\t\t\t\tresult.cwd = options.cwd;\n\t\t\t} else {\n\t\t\t\tcontext.taskLoadIssues.push(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"ConfigurationParser.invalidCWD\",\n\t\t\t\t\t\t\"Warning: options.cwd must be of type string. Ignoring value {0}\\n\",\n\t\t\t\t\t\toptions.cwd,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (options.env !== undefined) {\n\t\t\tresult.env = Objects.deepClone(options.env);\n\t\t}\n\t\tresult.shell = ShellConfiguration.from(options.shell, context);\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\texport function isEmpty(value: Tasks.CommandOptions | undefined): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n\n\texport function assignProperties(\n\t\ttarget: Tasks.CommandOptions | undefined,\n\t\tsource: Tasks.CommandOptions | undefined,\n\t): Tasks.CommandOptions | undefined {\n\t\tif (source === undefined || isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (target === undefined || isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, \"cwd\");\n\t\tif (target.env === undefined) {\n\t\t\ttarget.env = source.env;\n\t\t} else if (source.env !== undefined) {\n\t\t\tconst env: { [key: string]: string } = Object.create(null);\n\t\t\tif (target.env !== undefined) {\n\t\t\t\tObject.keys(target.env).forEach(\n\t\t\t\t\t(key) => (env[key] = target.env![key]),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (source.env !== undefined) {\n\t\t\t\tObject.keys(source.env).forEach(\n\t\t\t\t\t(key) => (env[key] = source.env![key]),\n\t\t\t\t);\n\t\t\t}\n\t\t\ttarget.env = env;\n\t\t}\n\t\ttarget.shell = ShellConfiguration.assignProperties(\n\t\t\ttarget.shell,\n\t\t\tsource.shell,\n\t\t);\n\t\treturn target;\n\t}\n\n\texport function fillProperties(\n\t\ttarget: Tasks.CommandOptions | undefined,\n\t\tsource: Tasks.CommandOptions | undefined,\n\t): Tasks.CommandOptions | undefined {\n\t\treturn _fillProperties(target, source, properties);\n\t}\n\n\texport function fillDefaults(\n\t\tvalue: Tasks.CommandOptions | undefined,\n\t\tcontext: IParseContext,\n\t): Tasks.CommandOptions | undefined {\n\t\treturn _fillDefaults(value, defaults, properties, context);\n\t}\n\n\texport function freeze(\n\t\tvalue: Tasks.CommandOptions,\n\t): Readonly<Tasks.CommandOptions> | undefined {\n\t\treturn _freeze(value, properties);\n\t}\n}\n\nnamespace CommandConfiguration {\n\texport namespace PresentationOptions {\n\t\tconst properties: IMetaData<Tasks.IPresentationOptions, void>[] = [\n\t\t\t{ property: \"echo\" },\n\t\t\t{ property: \"reveal\" },\n\t\t\t{ property: \"revealProblems\" },\n\t\t\t{ property: \"focus\" },\n\t\t\t{ property: \"panel\" },\n\t\t\t{ property: \"showReuseMessage\" },\n\t\t\t{ property: \"clear\" },\n\t\t\t{ property: \"group\" },\n\t\t\t{ property: \"close\" },\n\t\t];\n\n\t\tinterface IPresentationOptionsShape extends ILegacyCommandProperties {\n\t\t\tpresentation?: IPresentationOptionsConfig;\n\t\t}\n\n\t\texport function from(\n\t\t\tthis: void,\n\t\t\tconfig: IPresentationOptionsShape,\n\t\t\tcontext: IParseContext,\n\t\t): Tasks.IPresentationOptions | undefined {\n\t\t\tlet echo: boolean;\n\t\t\tlet reveal: Tasks.RevealKind;\n\t\t\tlet revealProblems: Tasks.RevealProblemKind;\n\t\t\tlet focus: boolean;\n\t\t\tlet panel: Tasks.PanelKind;\n\t\t\tlet showReuseMessage: boolean;\n\t\t\tlet clear: boolean;\n\t\t\tlet group: string | undefined;\n\t\t\tlet close: boolean | undefined;\n\t\t\tlet hasProps = false;\n\t\t\tif (Types.isBoolean(config.echoCommand)) {\n\t\t\t\techo = config.echoCommand;\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tif (Types.isString(config.showOutput)) {\n\t\t\t\treveal = Tasks.RevealKind.fromString(config.showOutput);\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tconst presentation = config.presentation || config.terminal;\n\t\t\tif (presentation) {\n\t\t\t\tif (Types.isBoolean(presentation.echo)) {\n\t\t\t\t\techo = presentation.echo;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.reveal)) {\n\t\t\t\t\treveal = Tasks.RevealKind.fromString(presentation.reveal);\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.revealProblems)) {\n\t\t\t\t\trevealProblems = Tasks.RevealProblemKind.fromString(\n\t\t\t\t\t\tpresentation.revealProblems,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.focus)) {\n\t\t\t\t\tfocus = presentation.focus;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.panel)) {\n\t\t\t\t\tpanel = Tasks.PanelKind.fromString(presentation.panel);\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.showReuseMessage)) {\n\t\t\t\t\tshowReuseMessage = presentation.showReuseMessage;\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.clear)) {\n\t\t\t\t\tclear = presentation.clear;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.group)) {\n\t\t\t\t\tgroup = presentation.group;\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.close)) {\n\t\t\t\t\tclose = presentation.close;\n\t\t\t\t}\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tif (!hasProps) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\techo: echo!,\n\t\t\t\treveal: reveal!,\n\t\t\t\trevealProblems: revealProblems!,\n\t\t\t\tfocus: focus!,\n\t\t\t\tpanel: panel!,\n\t\t\t\tshowReuseMessage: showReuseMessage!,\n\t\t\t\tclear: clear!,\n\t\t\t\tgroup,\n\t\t\t\tclose: close,\n\t\t\t};\n\t\t}\n\n\t\texport function assignProperties(\n\t\t\ttarget: Tasks.IPresentationOptions,\n\t\t\tsource: Tasks.IPresentationOptions | undefined,\n\t\t): Tasks.IPresentationOptions | undefined {\n\t\t\treturn _assignProperties(target, source, properties);\n\t\t}\n\n\t\texport function fillProperties(\n\t\t\ttarget: Tasks.IPresentationOptions,\n\t\t\tsource: Tasks.IPresentationOptions | undefined,\n\t\t): Tasks.IPresentationOptions | undefined {\n\t\t\treturn _fillProperties(target, source, properties);\n\t\t}\n\n\t\texport function fillDefaults(\n\t\t\tvalue: Tasks.IPresentationOptions,\n\t\t\tcontext: IParseContext,\n\t\t): Tasks.IPresentationOptions | undefined {\n\t\t\tconst defaultEcho =\n\t\t\t\tcontext.engine === Tasks.ExecutionEngine.Terminal\n\t\t\t\t\t? true\n\t\t\t\t\t: false;\n\t\t\treturn _fillDefaults(\n\t\t\t\tvalue,\n\t\t\t\t{\n\t\t\t\t\techo: defaultEcho,\n\t\t\t\t\treveal: Tasks.RevealKind.Always,\n\t\t\t\t\trevealProblems: Tasks.RevealProblemKind.Never,\n\t\t\t\t\tfocus: false,\n\t\t\t\t\tpanel: Tasks.PanelKind.Shared,\n\t\t\t\t\tshowReuseMessage: true,\n\t\t\t\t\tclear: false,\n\t\t\t\t},\n\t\t\t\tproperties,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t}\n\n\t\texport function freeze(\n\t\t\tvalue: Tasks.IPresentationOptions,\n\t\t): Readonly<Tasks.IPresentationOptions> | undefined {\n\t\t\treturn _freeze(value, properties);\n\t\t}\n\n\t\texport function isEmpty(\n\t\t\tthis: void,\n\t\t\tvalue: Tasks.IPresentationOptions,\n\t\t): boolean {\n\t\t\treturn _isEmpty(value, properties);\n\t\t}\n\t}\n\n\tnamespace ShellString {\n\t\texport function from(\n\t\t\tthis: void,\n\t\t\tvalue: CommandString | undefined,\n\t\t): Tasks.CommandString | undefined {\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Types.isString(value)) {\n\t\t\t\treturn value;\n\t\t\t} else if (Types.isStringArray(value)) {\n\t\t\t\treturn value.join(\" \");\n\t\t\t} else {\n\t\t\t\tconst quoting = Tasks.ShellQuoting.from(value.quoting);\n\t\t\t\tconst result = Types.isString(value.value)\n\t\t\t\t\t? value.value\n\t\t\t\t\t: Types.isStringArray(value.value)\n\t\t\t\t\t\t? value.value.join(\" \")\n\t\t\t\t\t\t: undefined;\n\t\t\t\tif (result) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: result,\n\t\t\t\t\t\tquoting: quoting,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tinterface IBaseCommandConfigurationShape\n\t\textends IBaseCommandProperties,\n\t\t\tILegacyCommandProperties {}\n\n\tinterface ICommandConfigurationShape\n\t\textends IBaseCommandConfigurationShape {\n\t\twindows?: IBaseCommandConfigurationShape;\n\t\tosx?: IBaseCommandConfigurationShape;\n\t\tlinux?: IBaseCommandConfigurationShape;\n\t}\n\n\tconst properties: IMetaData<Tasks.ICommandConfiguration, any>[] = [\n\t\t{ property: \"runtime\" },\n\t\t{ property: \"name\" },\n\t\t{ property: \"options\", type: CommandOptions },\n\t\t{ property: \"args\" },\n\t\t{ property: \"taskSelector\" },\n\t\t{ property: \"suppressTaskName\" },\n\t\t{ property: \"presentation\", type: PresentationOptions },\n\t];\n\n\texport function from(\n\t\tthis: void,\n\t\tconfig: ICommandConfigurationShape,\n\t\tcontext: IParseContext,\n\t): Tasks.ICommandConfiguration | undefined {\n\t\tlet result: Tasks.ICommandConfiguration = fromBase(config, context)!;\n\n\t\tlet osConfig: Tasks.ICommandConfiguration | undefined;\n\t\tif (config.windows && context.platform === Platform.Windows) {\n\t\t\tosConfig = fromBase(config.windows, context);\n\t\t} else if (config.osx && context.platform === Platform.Mac) {\n\t\t\tosConfig = fromBase(config.osx, context);\n\t\t} else if (config.linux && context.platform === Platform.Linux) {\n\t\t\tosConfig = fromBase(config.linux, context);\n\t\t}\n\t\tif (osConfig) {\n\t\t\tresult = assignProperties(\n\t\t\t\tresult,\n\t\t\t\tosConfig,\n\t\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0,\n\t\t\t);\n\t\t}\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\tfunction fromBase(\n\t\tthis: void,\n\t\tconfig: IBaseCommandConfigurationShape,\n\t\tcontext: IParseContext,\n\t): Tasks.ICommandConfiguration | undefined {\n\t\tconst name: Tasks.CommandString | undefined = ShellString.from(\n\t\t\tconfig.command,\n\t\t);\n\t\tlet runtime: Tasks.RuntimeType;\n\t\tif (Types.isString(config.type)) {\n\t\t\tif (config.type === \"shell\" || config.type === \"process\") {\n\t\t\t\truntime = Tasks.RuntimeType.fromString(config.type);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tTypes.isBoolean(config.isShellCommand) ||\n\t\t\tShellConfiguration.is(config.isShellCommand)\n\t\t) {\n\t\t\truntime = Tasks.RuntimeType.Shell;\n\t\t} else if (config.isShellCommand !== undefined) {\n\t\t\truntime = !!config.isShellCommand\n\t\t\t\t? Tasks.RuntimeType.Shell\n\t\t\t\t: Tasks.RuntimeType.Process;\n\t\t}\n\n\t\tconst result: Tasks.ICommandConfiguration = {\n\t\t\tname: name,\n\t\t\truntime: runtime!,\n\t\t\tpresentation: PresentationOptions.from(config, context)!,\n\t\t};\n\n\t\tif (config.args !== undefined) {\n\t\t\tresult.args = [];\n\t\t\tfor (const arg of config.args) {\n\t\t\t\tconst converted = ShellString.from(arg);\n\t\t\t\tif (converted !== undefined) {\n\t\t\t\t\tresult.args.push(converted);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.taskLoadIssues.push(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"ConfigurationParser.inValidArg\",\n\t\t\t\t\t\t\t\"Error: command argument must either be a string or a quoted string. Provided value is:\\n{0}\",\n\t\t\t\t\t\t\targ\n\t\t\t\t\t\t\t\t? JSON.stringify(arg, undefined, 4)\n\t\t\t\t\t\t\t\t: \"undefined\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (config.options !== undefined) {\n\t\t\tresult.options = CommandOptions.from(config.options, context);\n\t\t\tif (\n\t\t\t\tresult.options &&\n\t\t\t\tresult.options.shell === undefined &&\n\t\t\t\tShellConfiguration.is(config.isShellCommand)\n\t\t\t) {\n\t\t\t\tresult.options.shell = ShellConfiguration.from(\n\t\t\t\t\tconfig.isShellCommand,\n\t\t\t\t\tcontext,\n\t\t\t\t);\n\t\t\t\tif (context.engine !== Tasks.ExecutionEngine.Terminal) {\n\t\t\t\t\tcontext.taskLoadIssues.push(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"ConfigurationParser.noShell\",\n\t\t\t\t\t\t\t\"Warning: shell configuration is only supported when executing tasks in the terminal.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Types.isString(config.taskSelector)) {\n\t\t\tresult.taskSelector = config.taskSelector;\n\t\t}\n\t\tif (Types.isBoolean(config.suppressTaskName)) {\n\t\t\tresult.suppressTaskName = config.suppressTaskName;\n\t\t}\n\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\texport function hasCommand(value: Tasks.ICommandConfiguration): boolean {\n\t\treturn value && !!value.name;\n\t}\n\n\texport function isEmpty(\n\t\tvalue: Tasks.ICommandConfiguration | undefined,\n\t): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n\n\texport function assignProperties(\n\t\ttarget: Tasks.ICommandConfiguration,\n\t\tsource: Tasks.ICommandConfiguration,\n\t\toverwriteArgs: boolean,\n\t): Tasks.ICommandConfiguration {\n\t\tif (isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, \"name\");\n\t\tassignProperty(target, source, \"runtime\");\n\t\tassignProperty(target, source, \"taskSelector\");\n\t\tassignProperty(target, source, \"suppressTaskName\");\n\t\tif (source.args !== undefined) {\n\t\t\tif (target.args === undefined || overwriteArgs) {\n\t\t\t\ttarget.args = source.args;\n\t\t\t} else {\n\t\t\t\ttarget.args = target.args.concat(source.args);\n\t\t\t}\n\t\t}\n\t\ttarget.presentation = PresentationOptions.assignProperties(\n\t\t\ttarget.presentation!,\n\t\t\tsource.presentation,\n\t\t)!;\n\t\ttarget.options = CommandOptions.assignProperties(\n\t\t\ttarget.options,\n\t\t\tsource.options,\n\t\t);\n\t\treturn target;\n\t}\n\n\texport function fillProperties(\n\t\ttarget: Tasks.ICommandConfiguration,\n\t\tsource: Tasks.ICommandConfiguration,\n\t): Tasks.ICommandConfiguration | undefined {\n\t\treturn _fillProperties(target, source, properties);\n\t}\n\n\texport function fillGlobals(\n\t\ttarget: Tasks.ICommandConfiguration,\n\t\tsource: Tasks.ICommandConfiguration | undefined,\n\t\ttaskName: string | undefined,\n\t): Tasks.ICommandConfiguration {\n\t\tif (source === undefined || isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\ttarget = target || {\n\t\t\tname: undefined,\n\t\t\truntime: undefined,\n\t\t\tpresentation: undefined,\n\t\t};\n\t\tif (target.name === undefined) {\n\t\t\tfillProperty(target, source, \"name\");\n\t\t\tfillProperty(target, source, \"taskSelector\");\n\t\t\tfillProperty(target, source, \"suppressTaskName\");\n\t\t\tlet args: Tasks.CommandString[] = source.args\n\t\t\t\t? source.args.slice()\n\t\t\t\t: [];\n\t\t\tif (!target.suppressTaskName && taskName) {\n\t\t\t\tif (target.taskSelector !== undefined) {\n\t\t\t\t\targs.push(target.taskSelector + taskName);\n\t\t\t\t} else {\n\t\t\t\t\targs.push(taskName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (target.args) {\n\t\t\t\targs = args.concat(target.args);\n\t\t\t}\n\t\t\ttarget.args = args;\n\t\t}\n\t\tfillProperty(target, source, \"runtime\");\n\n\t\ttarget.presentation = PresentationOptions.fillProperties(\n\t\t\ttarget.presentation!,\n\t\t\tsource.presentation,\n\t\t)!;\n\t\ttarget.options = CommandOptions.fillProperties(\n\t\t\ttarget.options,\n\t\t\tsource.options,\n\t\t);\n\n\t\treturn target;\n\t}\n\n\texport function fillDefaults(\n\t\tvalue: Tasks.ICommandConfiguration | undefined,\n\t\tcontext: IParseContext,\n\t): void {\n\t\tif (!value || Object.isFrozen(value)) {\n\t\t\treturn;\n\t\t}\n\t\tif (value.name !== undefined && value.runtime === undefined) {\n\t\t\tvalue.runtime = Tasks.RuntimeType.Process;\n\t\t}\n\t\tvalue.presentation = PresentationOptions.fillDefaults(\n\t\t\tvalue.presentation!,\n\t\t\tcontext,\n\t\t)!;\n\t\tif (!isEmpty(value)) {\n\t\t\tvalue.options = CommandOptions.fillDefaults(value.options, context);\n\t\t}\n\t\tif (value.args === undefined) {\n\t\t\tvalue.args = EMPTY_ARRAY;\n\t\t}\n\t\tif (value.suppressTaskName === undefined) {\n\t\t\tvalue.suppressTaskName =\n\t\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\t}\n\t}\n\n\texport function freeze(\n\t\tvalue: Tasks.ICommandConfiguration,\n\t): Readonly<Tasks.ICommandConfiguration> | undefined {\n\t\treturn _freeze(value, properties);\n\t}\n}\n\nexport namespace ProblemMatcherConverter {\n\texport function namedFrom(\n\t\tthis: void,\n\t\tdeclares: ProblemMatcherConfig.INamedProblemMatcher[] | undefined,\n\t\tcontext: IParseContext,\n\t): IStringDictionary<INamedProblemMatcher> {\n\t\tconst result: IStringDictionary<INamedProblemMatcher> =\n\t\t\tObject.create(null);\n\n\t\tif (!Array.isArray(declares)) {\n\t\t\treturn result;\n\t\t}\n\t\t(<ProblemMatcherConfig.INamedProblemMatcher[]>declares).forEach(\n\t\t\t(value) => {\n\t\t\t\tconst namedProblemMatcher = new ProblemMatcherParser(\n\t\t\t\t\tcontext.problemReporter,\n\t\t\t\t).parse(value);\n\t\t\t\tif (isNamedProblemMatcher(namedProblemMatcher)) {\n\t\t\t\t\tresult[namedProblemMatcher.name] = namedProblemMatcher;\n\t\t\t\t} else {\n\t\t\t\t\tcontext.problemReporter.error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"ConfigurationParser.noName\",\n\t\t\t\t\t\t\t\"Error: Problem Matcher in declare scope must have a name:\\n{0}\\n\",\n\t\t\t\t\t\t\tJSON.stringify(value, undefined, 4),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\treturn result;\n\t}\n\n\texport function fromWithOsConfig(\n\t\tthis: void,\n\t\texternal: IConfigurationProperties & { [key: string]: any },\n\t\tcontext: IParseContext,\n\t): TaskConfigurationValueWithErrors<ProblemMatcher[]> {\n\t\tlet result: TaskConfigurationValueWithErrors<ProblemMatcher[]> = {};\n\t\tif (\n\t\t\texternal.windows &&\n\t\t\texternal.windows.problemMatcher &&\n\t\t\tcontext.platform === Platform.Windows\n\t\t) {\n\t\t\tresult = from(external.windows.problemMatcher, context);\n\t\t} else if (\n\t\t\texternal.osx &&\n\t\t\texternal.osx.problemMatcher &&\n\t\t\tcontext.platform === Platform.Mac\n\t\t) {\n\t\t\tresult = from(external.osx.problemMatcher, context);\n\t\t} else if (\n\t\t\texternal.linux &&\n\t\t\texternal.linux.problemMatcher &&\n\t\t\tcontext.platform === Platform.Linux\n\t\t) {\n\t\t\tresult = from(external.linux.problemMatcher, context);\n\t\t} else if (external.problemMatcher) {\n\t\t\tresult = from(external.problemMatcher, context);\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function from(\n\t\tthis: void,\n\t\tconfig: ProblemMatcherConfig.ProblemMatcherType | undefined,\n\t\tcontext: IParseContext,\n\t): TaskConfigurationValueWithErrors<ProblemMatcher[]> {\n\t\tconst result: ProblemMatcher[] = [];\n\t\tif (config === undefined) {\n\t\t\treturn { value: result };\n\t\t}\n\t\tconst errors: string[] = [];\n\t\tfunction addResult(\n\t\t\tmatcher: TaskConfigurationValueWithErrors<ProblemMatcher>,\n\t\t) {\n\t\t\tif (matcher.value) {\n\t\t\t\tresult.push(matcher.value);\n\t\t\t}\n\t\t\tif (matcher.errors) {\n\t\t\t\terrors.push(...matcher.errors);\n\t\t\t}\n\t\t}\n\t\tconst kind = getProblemMatcherKind(config);\n\t\tif (kind === ProblemMatcherKind.Unknown) {\n\t\t\tconst error = nls.localize(\n\t\t\t\t\"ConfigurationParser.unknownMatcherKind\",\n\t\t\t\t\"Warning: the defined problem matcher is unknown. Supported types are string | ProblemMatcher | Array<string | ProblemMatcher>.\\n{0}\\n\",\n\t\t\t\tJSON.stringify(config, null, 4),\n\t\t\t);\n\t\t\tcontext.problemReporter.warn(error);\n\t\t} else if (\n\t\t\tkind === ProblemMatcherKind.String ||\n\t\t\tkind === ProblemMatcherKind.ProblemMatcher\n\t\t) {\n\t\t\taddResult(\n\t\t\t\tresolveProblemMatcher(\n\t\t\t\t\tconfig as ProblemMatcherConfig.ProblemMatcher,\n\t\t\t\t\tcontext,\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (kind === ProblemMatcherKind.Array) {\n\t\t\tconst problemMatchers = <\n\t\t\t\t(string | ProblemMatcherConfig.ProblemMatcher)[]\n\t\t\t>config;\n\t\t\tproblemMatchers.forEach((problemMatcher) => {\n\t\t\t\taddResult(resolveProblemMatcher(problemMatcher, context));\n\t\t\t});\n\t\t}\n\t\treturn { value: result, errors };\n\t}\n\n\tfunction getProblemMatcherKind(\n\t\tthis: void,\n\t\tvalue: ProblemMatcherConfig.ProblemMatcherType,\n\t): ProblemMatcherKind {\n\t\tif (Types.isString(value)) {\n\t\t\treturn ProblemMatcherKind.String;\n\t\t} else if (Array.isArray(value)) {\n\t\t\treturn ProblemMatcherKind.Array;\n\t\t} else if (Types.isUndefined(value)) {\n\t\t\treturn ProblemMatcherKind.Unknown;\n\t\t} else {\n\t\t\treturn ProblemMatcherKind.ProblemMatcher;\n\t\t}\n\t}\n\n\tfunction resolveProblemMatcher(\n\t\tthis: void,\n\t\tvalue: string | ProblemMatcherConfig.ProblemMatcher,\n\t\tcontext: IParseContext,\n\t): TaskConfigurationValueWithErrors<ProblemMatcher> {\n\t\tif (Types.isString(value)) {\n\t\t\tlet variableName = <string>value;\n\t\t\tif (variableName.length > 1 && variableName[0] === \"$\") {\n\t\t\t\tvariableName = variableName.substring(1);\n\t\t\t\tconst global = ProblemMatcherRegistry.get(variableName);\n\t\t\t\tif (global) {\n\t\t\t\t\treturn { value: Objects.deepClone(global) };\n\t\t\t\t}\n\t\t\t\tlet localProblemMatcher: ProblemMatcher &\n\t\t\t\t\tPartial<INamedProblemMatcher> =\n\t\t\t\t\tcontext.namedProblemMatchers[variableName];\n\t\t\t\tif (localProblemMatcher) {\n\t\t\t\t\tlocalProblemMatcher =\n\t\t\t\t\t\tObjects.deepClone(localProblemMatcher);\n\t\t\t\t\t// remove the name\n\t\t\t\t\tdelete localProblemMatcher.name;\n\t\t\t\t\treturn { value: localProblemMatcher };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\terrors: [\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"ConfigurationParser.invalidVariableReference\",\n\t\t\t\t\t\t\"Error: Invalid problemMatcher reference: {0}\\n\",\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t};\n\t\t} else {\n\t\t\tconst json = <ProblemMatcherConfig.ProblemMatcher>value;\n\t\t\treturn {\n\t\t\t\tvalue: new ProblemMatcherParser(context.problemReporter).parse(\n\t\t\t\t\tjson,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport namespace GroupKind {\n\texport function from(\n\t\tthis: void,\n\t\texternal: string | IGroupKind | undefined,\n\t): Tasks.TaskGroup | undefined {\n\t\tif (external === undefined) {\n\t\t\treturn undefined;\n\t\t} else if (Types.isString(external) && Tasks.TaskGroup.is(external)) {\n\t\t\treturn { _id: external, isDefault: false };\n\t\t} else if (\n\t\t\tTypes.isString(external.kind) &&\n\t\t\tTasks.TaskGroup.is(external.kind)\n\t\t) {\n\t\t\tconst group: string = external.kind;\n\t\t\tconst isDefault: boolean | string = Types.isUndefined(\n\t\t\t\texternal.isDefault,\n\t\t\t)\n\t\t\t\t? false\n\t\t\t\t: external.isDefault;\n\n\t\t\treturn { _id: group, isDefault };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\texport function to(group: Tasks.TaskGroup | string): IGroupKind | string {\n\t\tif (Types.isString(group)) {\n\t\t\treturn group;\n\t\t} else if (!group.isDefault) {\n\t\t\treturn group._id;\n\t\t}\n\t\treturn {\n\t\t\tkind: group._id,\n\t\t\tisDefault: group.isDefault,\n\t\t};\n\t}\n}\n\nnamespace TaskDependency {\n\tfunction uriFromSource(\n\t\tcontext: IParseContext,\n\t\tsource: TaskConfigSource,\n\t): URI | string {\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User:\n\t\t\t\treturn Tasks.USER_TASKS_GROUP_KEY;\n\t\t\tcase TaskConfigSource.TasksJson:\n\t\t\t\treturn context.workspaceFolder.uri;\n\t\t\tdefault:\n\t\t\t\treturn context.workspace && context.workspace.configuration\n\t\t\t\t\t? context.workspace.configuration\n\t\t\t\t\t: context.workspaceFolder.uri;\n\t\t}\n\t}\n\n\texport function from(\n\t\tthis: void,\n\t\texternal: string | ITaskIdentifier,\n\t\tcontext: IParseContext,\n\t\tsource: TaskConfigSource,\n\t): Tasks.ITaskDependency | undefined {\n\t\tif (Types.isString(external)) {\n\t\t\treturn { uri: uriFromSource(context, source), task: external };\n\t\t} else if (ITaskIdentifier.is(external)) {\n\t\t\treturn {\n\t\t\t\turi: uriFromSource(context, source),\n\t\t\t\ttask: Tasks.TaskDefinition.createTaskIdentifier(\n\t\t\t\t\texternal as Tasks.ITaskIdentifier,\n\t\t\t\t\tcontext.problemReporter,\n\t\t\t\t),\n\t\t\t};\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nnamespace DependsOrder {\n\texport function from(order: string | undefined): Tasks.DependsOrder {\n\t\tswitch (order) {\n\t\t\tcase Tasks.DependsOrder.sequence:\n\t\t\t\treturn Tasks.DependsOrder.sequence;\n\t\t\tcase Tasks.DependsOrder.parallel:\n\t\t\tdefault:\n\t\t\t\treturn Tasks.DependsOrder.parallel;\n\t\t}\n\t}\n}\n\nnamespace ConfigurationProperties {\n\tconst properties: IMetaData<Tasks.IConfigurationProperties, any>[] = [\n\t\t{ property: \"name\" },\n\t\t{ property: \"identifier\" },\n\t\t{ property: \"group\" },\n\t\t{ property: \"isBackground\" },\n\t\t{ property: \"promptOnClose\" },\n\t\t{ property: \"dependsOn\" },\n\t\t{\n\t\t\tproperty: \"presentation\",\n\t\t\ttype: CommandConfiguration.PresentationOptions,\n\t\t},\n\t\t{ property: \"problemMatchers\" },\n\t\t{ property: \"options\" },\n\t\t{ property: \"icon\" },\n\t\t{ property: \"hide\" },\n\t];\n\n\texport function from(\n\t\tthis: void,\n\t\texternal: IConfigurationProperties & { [key: string]: any },\n\t\tcontext: IParseContext,\n\t\tincludeCommandOptions: boolean,\n\t\tsource: TaskConfigSource,\n\t\tproperties?: IJSONSchemaMap,\n\t): TaskConfigurationValueWithErrors<Tasks.IConfigurationProperties> {\n\t\tif (!external) {\n\t\t\treturn {};\n\t\t}\n\t\tconst result: Tasks.IConfigurationProperties & { [key: string]: any } =\n\t\t\t{};\n\n\t\tif (properties) {\n\t\t\tfor (const propertyName of Object.keys(properties)) {\n\t\t\t\tif (external[propertyName] !== undefined) {\n\t\t\t\t\tresult[propertyName] = Objects.deepClone(\n\t\t\t\t\t\texternal[propertyName],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Types.isString(external.taskName)) {\n\t\t\tresult.name = external.taskName;\n\t\t}\n\t\tif (\n\t\t\tTypes.isString(external.label) &&\n\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0\n\t\t) {\n\t\t\tresult.name = external.label;\n\t\t}\n\t\tif (Types.isString(external.identifier)) {\n\t\t\tresult.identifier = external.identifier;\n\t\t}\n\t\tresult.icon = external.icon;\n\t\tresult.hide = external.hide;\n\t\tif (external.isBackground !== undefined) {\n\t\t\tresult.isBackground = !!external.isBackground;\n\t\t}\n\t\tif (external.promptOnClose !== undefined) {\n\t\t\tresult.promptOnClose = !!external.promptOnClose;\n\t\t}\n\t\tresult.group = GroupKind.from(external.group);\n\t\tif (external.dependsOn !== undefined) {\n\t\t\tif (Array.isArray(external.dependsOn)) {\n\t\t\t\tresult.dependsOn = external.dependsOn.reduce(\n\t\t\t\t\t(\n\t\t\t\t\t\tdependencies: Tasks.ITaskDependency[],\n\t\t\t\t\t\titem,\n\t\t\t\t\t): Tasks.ITaskDependency[] => {\n\t\t\t\t\t\tconst dependency = TaskDependency.from(\n\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (dependency) {\n\t\t\t\t\t\t\tdependencies.push(dependency);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn dependencies;\n\t\t\t\t\t},\n\t\t\t\t\t[],\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst dependsOnValue = TaskDependency.from(\n\t\t\t\t\texternal.dependsOn,\n\t\t\t\t\tcontext,\n\t\t\t\t\tsource,\n\t\t\t\t);\n\t\t\t\tresult.dependsOn = dependsOnValue\n\t\t\t\t\t? [dependsOnValue]\n\t\t\t\t\t: undefined;\n\t\t\t}\n\t\t}\n\t\tresult.dependsOrder = DependsOrder.from(external.dependsOrder);\n\t\tif (\n\t\t\tincludeCommandOptions &&\n\t\t\t(external.presentation !== undefined ||\n\t\t\t\t(external as ILegacyCommandProperties).terminal !== undefined)\n\t\t) {\n\t\t\tresult.presentation = CommandConfiguration.PresentationOptions.from(\n\t\t\t\texternal,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t}\n\t\tif (includeCommandOptions && external.options !== undefined) {\n\t\t\tresult.options = CommandOptions.from(external.options, context);\n\t\t}\n\t\tconst configProblemMatcher = ProblemMatcherConverter.fromWithOsConfig(\n\t\t\texternal,\n\t\t\tcontext,\n\t\t);\n\t\tif (configProblemMatcher.value !== undefined) {\n\t\t\tresult.problemMatchers = configProblemMatcher.value;\n\t\t}\n\t\tif (external.detail) {\n\t\t\tresult.detail = external.detail;\n\t\t}\n\t\treturn isEmpty(result)\n\t\t\t? {}\n\t\t\t: { value: result, errors: configProblemMatcher.errors };\n\t}\n\n\texport function isEmpty(\n\t\tthis: void,\n\t\tvalue: Tasks.IConfigurationProperties,\n\t): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n}\nconst label = \"Workspace\";\n\nnamespace ConfiguringTask {\n\tconst grunt = \"grunt.\";\n\tconst jake = \"jake.\";\n\tconst gulp = \"gulp.\";\n\tconst npm = \"vscode.npm.\";\n\tconst typescript = \"vscode.typescript.\";\n\n\tinterface ICustomizeShape {\n\t\tcustomize: string;\n\t}\n\n\texport function from(\n\t\tthis: void,\n\t\texternal: IConfiguringTask,\n\t\tcontext: IParseContext,\n\t\tindex: number,\n\t\tsource: TaskConfigSource,\n\t\tregistry?: Partial<ITaskDefinitionRegistry>,\n\t): Tasks.ConfiguringTask | undefined {\n\t\tif (!external) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst type = external.type;\n\t\tconst customize = (external as ICustomizeShape).customize;\n\t\tif (!type && !customize) {\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"ConfigurationParser.noTaskType\",\n\t\t\t\t\t\"Error: tasks configuration must have a type property. The configuration will be ignored.\\n{0}\\n\",\n\t\t\t\t\tJSON.stringify(external, null, 4),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst typeDeclaration = type\n\t\t\t? registry?.get?.(type) || TaskDefinitionRegistry.get(type)\n\t\t\t: undefined;\n\t\tif (!typeDeclaration) {\n\t\t\tconst message = nls.localize(\n\t\t\t\t\"ConfigurationParser.noTypeDefinition\",\n\t\t\t\t\"Error: there is no registered task type '{0}'. Did you miss installing an extension that provides a corresponding task provider?\",\n\t\t\t\ttype,\n\t\t\t);\n\t\t\tcontext.problemReporter.error(message);\n\t\t\treturn undefined;\n\t\t}\n\t\tlet identifier: Tasks.ITaskIdentifier | undefined;\n\t\tif (Types.isString(customize)) {\n\t\t\tif (customize.indexOf(grunt) === 0) {\n\t\t\t\tidentifier = {\n\t\t\t\t\ttype: \"grunt\",\n\t\t\t\t\ttask: customize.substring(grunt.length),\n\t\t\t\t};\n\t\t\t} else if (customize.indexOf(jake) === 0) {\n\t\t\t\tidentifier = {\n\t\t\t\t\ttype: \"jake\",\n\t\t\t\t\ttask: customize.substring(jake.length),\n\t\t\t\t};\n\t\t\t} else if (customize.indexOf(gulp) === 0) {\n\t\t\t\tidentifier = {\n\t\t\t\t\ttype: \"gulp\",\n\t\t\t\t\ttask: customize.substring(gulp.length),\n\t\t\t\t};\n\t\t\t} else if (customize.indexOf(npm) === 0) {\n\t\t\t\tidentifier = {\n\t\t\t\t\ttype: \"npm\",\n\t\t\t\t\tscript: customize.substring(npm.length + 4),\n\t\t\t\t};\n\t\t\t} else if (customize.indexOf(typescript) === 0) {\n\t\t\t\tidentifier = {\n\t\t\t\t\ttype: \"typescript\",\n\t\t\t\t\ttsconfig: customize.substring(typescript.length + 6),\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (Types.isString(external.type)) {\n\t\t\tidentifier = external as Tasks.ITaskIdentifier;\n\t\t}\n\t\tif (identifier === undefined) {\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"ConfigurationParser.missingType\",\n\t\t\t\t\t\"Error: the task configuration '{0}' is missing the required property 'type'. The task configuration will be ignored.\",\n\t\t\t\t\tJSON.stringify(external, undefined, 0),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst taskIdentifier: Tasks.KeyedTaskIdentifier | undefined =\n\t\t\tTasks.TaskDefinition.createTaskIdentifier(\n\t\t\t\tidentifier,\n\t\t\t\tcontext.problemReporter,\n\t\t\t);\n\t\tif (taskIdentifier === undefined) {\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"ConfigurationParser.incorrectType\",\n\t\t\t\t\t\"Error: the task configuration '{0}' is using an unknown type. The task configuration will be ignored.\",\n\t\t\t\t\tJSON.stringify(external, undefined, 0),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst configElement: Tasks.ITaskSourceConfigElement = {\n\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\tfile: \".vscode/tasks.json\",\n\t\t\tindex,\n\t\t\telement: external,\n\t\t};\n\t\tlet taskSource: Tasks.FileBasedTaskSource;\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: {\n\t\t\t\ttaskSource = {\n\t\t\t\t\tkind: Tasks.TaskSourceKind.User,\n\t\t\t\t\tconfig: configElement,\n\t\t\t\t\tlabel,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TaskConfigSource.WorkspaceFile: {\n\t\t\t\ttaskSource = {\n\t\t\t\t\tkind: Tasks.TaskSourceKind.WorkspaceFile,\n\t\t\t\t\tconfig: configElement,\n\t\t\t\t\tlabel,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\ttaskSource = {\n\t\t\t\t\tkind: Tasks.TaskSourceKind.Workspace,\n\t\t\t\t\tconfig: configElement,\n\t\t\t\t\tlabel,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst result: Tasks.ConfiguringTask = new Tasks.ConfiguringTask(\n\t\t\t`${typeDeclaration.extensionId}.${taskIdentifier._key}`,\n\t\t\ttaskSource,\n\t\t\tundefined,\n\t\t\ttype,\n\t\t\ttaskIdentifier,\n\t\t\tRunOptions.fromConfiguration(external.runOptions),\n\t\t\t{ hide: external.hide },\n\t\t);\n\t\tconst configuration = ConfigurationProperties.from(\n\t\t\texternal,\n\t\t\tcontext,\n\t\t\ttrue,\n\t\t\tsource,\n\t\t\ttypeDeclaration.properties,\n\t\t);\n\t\tresult.addTaskLoadMessages(configuration.errors);\n\t\tif (configuration.value) {\n\t\t\tresult.configurationProperties = Object.assign(\n\t\t\t\tresult.configurationProperties,\n\t\t\t\tconfiguration.value,\n\t\t\t);\n\t\t\tif (result.configurationProperties.name) {\n\t\t\t\tresult._label = result.configurationProperties.name;\n\t\t\t} else {\n\t\t\t\tlet label = result.configures.type;\n\t\t\t\tif (\n\t\t\t\t\ttypeDeclaration.required &&\n\t\t\t\t\ttypeDeclaration.required.length > 0\n\t\t\t\t) {\n\t\t\t\t\tfor (const required of typeDeclaration.required) {\n\t\t\t\t\t\tconst value = result.configures[required];\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tlabel = label + \": \" + value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult._label = label;\n\t\t\t}\n\t\t\tif (!result.configurationProperties.identifier) {\n\t\t\t\tresult.configurationProperties.identifier = taskIdentifier._key;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace CustomTask {\n\texport function from(\n\t\tthis: void,\n\t\texternal: ICustomTask,\n\t\tcontext: IParseContext,\n\t\tindex: number,\n\t\tsource: TaskConfigSource,\n\t): Tasks.CustomTask | undefined {\n\t\tif (!external) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet type = external.type;\n\t\tif (type === undefined || type === null) {\n\t\t\ttype = Tasks.CUSTOMIZED_TASK_TYPE;\n\t\t}\n\t\tif (\n\t\t\ttype !== Tasks.CUSTOMIZED_TASK_TYPE &&\n\t\t\ttype !== \"shell\" &&\n\t\t\ttype !== \"process\"\n\t\t) {\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"ConfigurationParser.notCustom\",\n\t\t\t\t\t\"Error: tasks is not declared as a custom task. The configuration will be ignored.\\n{0}\\n\",\n\t\t\t\t\tJSON.stringify(external, null, 4),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tlet taskName = external.taskName;\n\t\tif (\n\t\t\tTypes.isString(external.label) &&\n\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0\n\t\t) {\n\t\t\ttaskName = external.label;\n\t\t}\n\t\tif (!taskName) {\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"ConfigurationParser.noTaskName\",\n\t\t\t\t\t\"Error: a task must provide a label property. The task will be ignored.\\n{0}\\n\",\n\t\t\t\t\tJSON.stringify(external, null, 4),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet taskSource: Tasks.FileBasedTaskSource;\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: {\n\t\t\t\ttaskSource = {\n\t\t\t\t\tkind: Tasks.TaskSourceKind.User,\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\telement: external,\n\t\t\t\t\t\tfile: \".vscode/tasks.json\",\n\t\t\t\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\t\t\t},\n\t\t\t\t\tlabel,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TaskConfigSource.WorkspaceFile: {\n\t\t\t\ttaskSource = {\n\t\t\t\t\tkind: Tasks.TaskSourceKind.WorkspaceFile,\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\telement: external,\n\t\t\t\t\t\tfile: \".vscode/tasks.json\",\n\t\t\t\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\t\t\t\tworkspace: context.workspace,\n\t\t\t\t\t},\n\t\t\t\t\tlabel,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\ttaskSource = {\n\t\t\t\t\tkind: Tasks.TaskSourceKind.Workspace,\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\telement: external,\n\t\t\t\t\t\tfile: \".vscode/tasks.json\",\n\t\t\t\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\t\t\t},\n\t\t\t\t\tlabel,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst result: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\tcontext.uuidMap.getUUID(taskName),\n\t\t\ttaskSource,\n\t\t\ttaskName,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t\tRunOptions.fromConfiguration(external.runOptions),\n\t\t\t{\n\t\t\t\tname: taskName,\n\t\t\t\tidentifier: taskName,\n\t\t\t},\n\t\t);\n\t\tconst configuration = ConfigurationProperties.from(\n\t\t\texternal,\n\t\t\tcontext,\n\t\t\tfalse,\n\t\t\tsource,\n\t\t);\n\t\tresult.addTaskLoadMessages(configuration.errors);\n\t\tif (configuration.value) {\n\t\t\tresult.configurationProperties = Object.assign(\n\t\t\t\tresult.configurationProperties,\n\t\t\t\tconfiguration.value,\n\t\t\t);\n\t\t}\n\t\tconst supportLegacy: boolean = true; //context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\tif (supportLegacy) {\n\t\t\tconst legacy: ILegacyTaskProperties =\n\t\t\t\texternal as ILegacyTaskProperties;\n\t\t\tif (\n\t\t\t\tresult.configurationProperties.isBackground === undefined &&\n\t\t\t\tlegacy.isWatching !== undefined\n\t\t\t) {\n\t\t\t\tresult.configurationProperties.isBackground =\n\t\t\t\t\t!!legacy.isWatching;\n\t\t\t}\n\t\t\tif (result.configurationProperties.group === undefined) {\n\t\t\t\tif (legacy.isBuildCommand === true) {\n\t\t\t\t\tresult.configurationProperties.group =\n\t\t\t\t\t\tTasks.TaskGroup.Build;\n\t\t\t\t} else if (legacy.isTestCommand === true) {\n\t\t\t\t\tresult.configurationProperties.group = Tasks.TaskGroup.Test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst command: Tasks.ICommandConfiguration = CommandConfiguration.from(\n\t\t\texternal,\n\t\t\tcontext,\n\t\t)!;\n\t\tif (command) {\n\t\t\tresult.command = command;\n\t\t}\n\t\tif (external.command !== undefined) {\n\t\t\t// if the task has its own command then we suppress the\n\t\t\t// task name by default.\n\t\t\tcommand.suppressTaskName = true;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function fillGlobals(\n\t\ttask: Tasks.CustomTask,\n\t\tglobals: IGlobals,\n\t): void {\n\t\t// We only merge a command from a global definition if there is no dependsOn\n\t\t// or there is a dependsOn and a defined command.\n\t\tif (\n\t\t\tCommandConfiguration.hasCommand(task.command) ||\n\t\t\ttask.configurationProperties.dependsOn === undefined\n\t\t) {\n\t\t\ttask.command = CommandConfiguration.fillGlobals(\n\t\t\t\ttask.command,\n\t\t\t\tglobals.command,\n\t\t\t\ttask.configurationProperties.name,\n\t\t\t);\n\t\t}\n\t\tif (\n\t\t\ttask.configurationProperties.problemMatchers === undefined &&\n\t\t\tglobals.problemMatcher !== undefined\n\t\t) {\n\t\t\ttask.configurationProperties.problemMatchers = Objects.deepClone(\n\t\t\t\tglobals.problemMatcher,\n\t\t\t);\n\t\t\ttask.hasDefinedMatchers = true;\n\t\t}\n\t\t// promptOnClose is inferred from isBackground if available\n\t\tif (\n\t\t\ttask.configurationProperties.promptOnClose === undefined &&\n\t\t\ttask.configurationProperties.isBackground === undefined &&\n\t\t\tglobals.promptOnClose !== undefined\n\t\t) {\n\t\t\ttask.configurationProperties.promptOnClose = globals.promptOnClose;\n\t\t}\n\t}\n\n\texport function fillDefaults(\n\t\ttask: Tasks.CustomTask,\n\t\tcontext: IParseContext,\n\t): void {\n\t\tCommandConfiguration.fillDefaults(task.command, context);\n\t\tif (task.configurationProperties.promptOnClose === undefined) {\n\t\t\ttask.configurationProperties.promptOnClose =\n\t\t\t\ttask.configurationProperties.isBackground !== undefined\n\t\t\t\t\t? !task.configurationProperties.isBackground\n\t\t\t\t\t: true;\n\t\t}\n\t\tif (task.configurationProperties.isBackground === undefined) {\n\t\t\ttask.configurationProperties.isBackground = false;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers === undefined) {\n\t\t\ttask.configurationProperties.problemMatchers = EMPTY_ARRAY;\n\t\t}\n\t}\n\n\texport function createCustomTask(\n\t\tcontributedTask: Tasks.ContributedTask,\n\t\tconfiguredProps: Tasks.ConfiguringTask | Tasks.CustomTask,\n\t): Tasks.CustomTask {\n\t\tconst result: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\tconfiguredProps._id,\n\t\t\tObject.assign({}, configuredProps._source, {\n\t\t\t\tcustomizes: contributedTask.defines,\n\t\t\t}),\n\t\t\tconfiguredProps.configurationProperties.name ||\n\t\t\t\tcontributedTask._label,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tcontributedTask.command,\n\t\t\tfalse,\n\t\t\tcontributedTask.runOptions,\n\t\t\t{\n\t\t\t\tname:\n\t\t\t\t\tconfiguredProps.configurationProperties.name ||\n\t\t\t\t\tcontributedTask.configurationProperties.name,\n\t\t\t\tidentifier:\n\t\t\t\t\tconfiguredProps.configurationProperties.identifier ||\n\t\t\t\t\tcontributedTask.configurationProperties.identifier,\n\t\t\t\ticon: configuredProps.configurationProperties.icon,\n\t\t\t\thide: configuredProps.configurationProperties.hide,\n\t\t\t},\n\t\t);\n\t\tresult.addTaskLoadMessages(configuredProps.taskLoadMessages);\n\t\tconst resultConfigProps: Tasks.IConfigurationProperties =\n\t\t\tresult.configurationProperties;\n\n\t\tassignProperty(\n\t\t\tresultConfigProps,\n\t\t\tconfiguredProps.configurationProperties,\n\t\t\t\"group\",\n\t\t);\n\t\tassignProperty(\n\t\t\tresultConfigProps,\n\t\t\tconfiguredProps.configurationProperties,\n\t\t\t\"isBackground\",\n\t\t);\n\t\tassignProperty(\n\t\t\tresultConfigProps,\n\t\t\tconfiguredProps.configurationProperties,\n\t\t\t\"dependsOn\",\n\t\t);\n\t\tassignProperty(\n\t\t\tresultConfigProps,\n\t\t\tconfiguredProps.configurationProperties,\n\t\t\t\"problemMatchers\",\n\t\t);\n\t\tassignProperty(\n\t\t\tresultConfigProps,\n\t\t\tconfiguredProps.configurationProperties,\n\t\t\t\"promptOnClose\",\n\t\t);\n\t\tassignProperty(\n\t\t\tresultConfigProps,\n\t\t\tconfiguredProps.configurationProperties,\n\t\t\t\"detail\",\n\t\t);\n\t\tresult.command.presentation =\n\t\t\tCommandConfiguration.PresentationOptions.assignProperties(\n\t\t\t\tresult.command.presentation!,\n\t\t\t\tconfiguredProps.configurationProperties.presentation,\n\t\t\t)!;\n\t\tresult.command.options = CommandOptions.assignProperties(\n\t\t\tresult.command.options,\n\t\t\tconfiguredProps.configurationProperties.options,\n\t\t);\n\t\tresult.runOptions = RunOptions.assignProperties(\n\t\t\tresult.runOptions,\n\t\t\tconfiguredProps.runOptions,\n\t\t);\n\n\t\tconst contributedConfigProps: Tasks.IConfigurationProperties =\n\t\t\tcontributedTask.configurationProperties;\n\t\tfillProperty(resultConfigProps, contributedConfigProps, \"group\");\n\t\tfillProperty(resultConfigProps, contributedConfigProps, \"isBackground\");\n\t\tfillProperty(resultConfigProps, contributedConfigProps, \"dependsOn\");\n\t\tfillProperty(\n\t\t\tresultConfigProps,\n\t\t\tcontributedConfigProps,\n\t\t\t\"problemMatchers\",\n\t\t);\n\t\tfillProperty(\n\t\t\tresultConfigProps,\n\t\t\tcontributedConfigProps,\n\t\t\t\"promptOnClose\",\n\t\t);\n\t\tfillProperty(resultConfigProps, contributedConfigProps, \"detail\");\n\t\tresult.command.presentation =\n\t\t\tCommandConfiguration.PresentationOptions.fillProperties(\n\t\t\t\tresult.command.presentation,\n\t\t\t\tcontributedConfigProps.presentation,\n\t\t\t)!;\n\t\tresult.command.options = CommandOptions.fillProperties(\n\t\t\tresult.command.options,\n\t\t\tcontributedConfigProps.options,\n\t\t);\n\t\tresult.runOptions = RunOptions.fillProperties(\n\t\t\tresult.runOptions,\n\t\t\tcontributedTask.runOptions,\n\t\t);\n\n\t\tif (contributedTask.hasDefinedMatchers === true) {\n\t\t\tresult.hasDefinedMatchers = true;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport interface ITaskParseResult {\n\tcustom: Tasks.CustomTask[];\n\tconfigured: Tasks.ConfiguringTask[];\n}\n\nexport namespace TaskParser {\n\tfunction isCustomTask(\n\t\tvalue: ICustomTask | IConfiguringTask,\n\t): value is ICustomTask {\n\t\tconst type = value.type;\n\t\tconst customize = (value as any).customize;\n\t\treturn (\n\t\t\tcustomize === undefined &&\n\t\t\t(type === undefined ||\n\t\t\t\ttype === null ||\n\t\t\t\ttype === Tasks.CUSTOMIZED_TASK_TYPE ||\n\t\t\t\ttype === \"shell\" ||\n\t\t\t\ttype === \"process\")\n\t\t);\n\t}\n\n\tconst builtinTypeContextMap: IStringDictionary<RawContextKey<boolean>> = {\n\t\tshell: ShellExecutionSupportedContext,\n\t\tprocess: ProcessExecutionSupportedContext,\n\t};\n\n\texport function from(\n\t\tthis: void,\n\t\texternals: Array<ICustomTask | IConfiguringTask> | undefined,\n\t\tglobals: IGlobals,\n\t\tcontext: IParseContext,\n\t\tsource: TaskConfigSource,\n\t\tregistry?: Partial<ITaskDefinitionRegistry>,\n\t): ITaskParseResult {\n\t\tconst result: ITaskParseResult = { custom: [], configured: [] };\n\t\tif (!externals) {\n\t\t\treturn result;\n\t\t}\n\t\tconst defaultBuildTask: { task: Tasks.Task | undefined; rank: number } =\n\t\t\t{ task: undefined, rank: -1 };\n\t\tconst defaultTestTask: { task: Tasks.Task | undefined; rank: number } =\n\t\t\t{ task: undefined, rank: -1 };\n\t\tconst schema2_0_0: boolean =\n\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\tconst baseLoadIssues = Objects.deepClone(context.taskLoadIssues);\n\t\tfor (let index = 0; index < externals.length; index++) {\n\t\t\tconst external = externals[index];\n\t\t\tconst definition = external.type\n\t\t\t\t? registry?.get?.(external.type) ||\n\t\t\t\t\tTaskDefinitionRegistry.get(external.type)\n\t\t\t\t: undefined;\n\t\t\tlet typeNotSupported = false;\n\t\t\tif (\n\t\t\t\tdefinition &&\n\t\t\t\tdefinition.when &&\n\t\t\t\t!context.contextKeyService.contextMatchesRules(definition.when)\n\t\t\t) {\n\t\t\t\ttypeNotSupported = true;\n\t\t\t} else if (!definition && external.type) {\n\t\t\t\tfor (const key of Object.keys(builtinTypeContextMap)) {\n\t\t\t\t\tif (external.type === key) {\n\t\t\t\t\t\ttypeNotSupported =\n\t\t\t\t\t\t\t!ShellExecutionSupportedContext.evaluate(\n\t\t\t\t\t\t\t\tcontext.contextKeyService.getContext(null),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeNotSupported) {\n\t\t\t\tcontext.problemReporter.info(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"taskConfiguration.providerUnavailable\",\n\t\t\t\t\t\t\"Warning: {0} tasks are unavailable in the current environment.\\n\",\n\t\t\t\t\t\texternal.type,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (isCustomTask(external)) {\n\t\t\t\tconst customTask = CustomTask.from(\n\t\t\t\t\texternal,\n\t\t\t\t\tcontext,\n\t\t\t\t\tindex,\n\t\t\t\t\tsource,\n\t\t\t\t);\n\t\t\t\tif (customTask) {\n\t\t\t\t\tCustomTask.fillGlobals(customTask, globals);\n\t\t\t\t\tCustomTask.fillDefaults(customTask, context);\n\t\t\t\t\tif (schema2_0_0) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(customTask.command === undefined ||\n\t\t\t\t\t\t\t\tcustomTask.command.name === undefined) &&\n\t\t\t\t\t\t\t(customTask.configurationProperties.dependsOn ===\n\t\t\t\t\t\t\t\tundefined ||\n\t\t\t\t\t\t\t\tcustomTask.configurationProperties.dependsOn\n\t\t\t\t\t\t\t\t\t.length === 0)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontext.problemReporter.error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"taskConfiguration.noCommandOrDependsOn\",\n\t\t\t\t\t\t\t\t\t\"Error: the task '{0}' neither specifies a command nor a dependsOn property. The task will be ignored. Its definition is:\\n{1}\",\n\t\t\t\t\t\t\t\t\tcustomTask.configurationProperties.name,\n\t\t\t\t\t\t\t\t\tJSON.stringify(external, undefined, 4),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tcustomTask.command === undefined ||\n\t\t\t\t\t\tcustomTask.command.name === undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontext.problemReporter.warn(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"taskConfiguration.noCommand\",\n\t\t\t\t\t\t\t\t\"Error: the task '{0}' doesn't define a command. The task will be ignored. Its definition is:\\n{1}\",\n\t\t\t\t\t\t\t\tcustomTask.configurationProperties.name,\n\t\t\t\t\t\t\t\tJSON.stringify(external, undefined, 4),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tcustomTask.configurationProperties.group ===\n\t\t\t\t\t\t\tTasks.TaskGroup.Build &&\n\t\t\t\t\t\tdefaultBuildTask.rank < 2\n\t\t\t\t\t) {\n\t\t\t\t\t\tdefaultBuildTask.task = customTask;\n\t\t\t\t\t\tdefaultBuildTask.rank = 2;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tcustomTask.configurationProperties.group ===\n\t\t\t\t\t\t\tTasks.TaskGroup.Test &&\n\t\t\t\t\t\tdefaultTestTask.rank < 2\n\t\t\t\t\t) {\n\t\t\t\t\t\tdefaultTestTask.task = customTask;\n\t\t\t\t\t\tdefaultTestTask.rank = 2;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tcustomTask.configurationProperties.name === \"build\" &&\n\t\t\t\t\t\tdefaultBuildTask.rank < 1\n\t\t\t\t\t) {\n\t\t\t\t\t\tdefaultBuildTask.task = customTask;\n\t\t\t\t\t\tdefaultBuildTask.rank = 1;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tcustomTask.configurationProperties.name === \"test\" &&\n\t\t\t\t\t\tdefaultTestTask.rank < 1\n\t\t\t\t\t) {\n\t\t\t\t\t\tdefaultTestTask.task = customTask;\n\t\t\t\t\t\tdefaultTestTask.rank = 1;\n\t\t\t\t\t}\n\t\t\t\t\tcustomTask.addTaskLoadMessages(context.taskLoadIssues);\n\t\t\t\t\tresult.custom.push(customTask);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst configuredTask = ConfiguringTask.from(\n\t\t\t\t\texternal,\n\t\t\t\t\tcontext,\n\t\t\t\t\tindex,\n\t\t\t\t\tsource,\n\t\t\t\t\tregistry,\n\t\t\t\t);\n\t\t\t\tif (configuredTask) {\n\t\t\t\t\tconfiguredTask.addTaskLoadMessages(context.taskLoadIssues);\n\t\t\t\t\tresult.configured.push(configuredTask);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.taskLoadIssues = Objects.deepClone(baseLoadIssues);\n\t\t}\n\t\t// There is some special logic for tasks with the labels \"build\" and \"test\".\n\t\t// Even if they are not marked as a task group Build or Test, we automagically group them as such.\n\t\t// However, if they are already grouped as Build or Test, we don't need to add this grouping.\n\t\tconst defaultBuildGroupName = Types.isString(\n\t\t\tdefaultBuildTask.task?.configurationProperties.group,\n\t\t)\n\t\t\t? defaultBuildTask.task?.configurationProperties.group\n\t\t\t: defaultBuildTask.task?.configurationProperties.group?._id;\n\t\tconst defaultTestTaskGroupName = Types.isString(\n\t\t\tdefaultTestTask.task?.configurationProperties.group,\n\t\t)\n\t\t\t? defaultTestTask.task?.configurationProperties.group\n\t\t\t: defaultTestTask.task?.configurationProperties.group?._id;\n\t\tif (\n\t\t\tdefaultBuildGroupName !== Tasks.TaskGroup.Build._id &&\n\t\t\tdefaultBuildTask.rank > -1 &&\n\t\t\tdefaultBuildTask.rank < 2 &&\n\t\t\tdefaultBuildTask.task\n\t\t) {\n\t\t\tdefaultBuildTask.task.configurationProperties.group =\n\t\t\t\tTasks.TaskGroup.Build;\n\t\t} else if (\n\t\t\tdefaultTestTaskGroupName !== Tasks.TaskGroup.Test._id &&\n\t\t\tdefaultTestTask.rank > -1 &&\n\t\t\tdefaultTestTask.rank < 2 &&\n\t\t\tdefaultTestTask.task\n\t\t) {\n\t\t\tdefaultTestTask.task.configurationProperties.group =\n\t\t\t\tTasks.TaskGroup.Test;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function assignTasks(\n\t\ttarget: Tasks.CustomTask[],\n\t\tsource: Tasks.CustomTask[],\n\t): Tasks.CustomTask[] {\n\t\tif (source === undefined || source.length === 0) {\n\t\t\treturn target;\n\t\t}\n\t\tif (target === undefined || target.length === 0) {\n\t\t\treturn source;\n\t\t}\n\n\t\tif (source) {\n\t\t\t// Tasks are keyed by ID but we need to merge by name\n\t\t\tconst map: IStringDictionary<Tasks.CustomTask> =\n\t\t\t\tObject.create(null);\n\t\t\ttarget.forEach((task) => {\n\t\t\t\tmap[task.configurationProperties.name!] = task;\n\t\t\t});\n\n\t\t\tsource.forEach((task) => {\n\t\t\t\tmap[task.configurationProperties.name!] = task;\n\t\t\t});\n\t\t\tconst newTarget: Tasks.CustomTask[] = [];\n\t\t\ttarget.forEach((task) => {\n\t\t\t\tnewTarget.push(map[task.configurationProperties.name!]);\n\t\t\t\tdelete map[task.configurationProperties.name!];\n\t\t\t});\n\t\t\tObject.keys(map).forEach((key) => newTarget.push(map[key]));\n\t\t\ttarget = newTarget;\n\t\t}\n\t\treturn target;\n\t}\n}\n\nexport interface IGlobals {\n\tcommand?: Tasks.ICommandConfiguration;\n\tproblemMatcher?: ProblemMatcher[];\n\tpromptOnClose?: boolean;\n\tsuppressTaskName?: boolean;\n}\n\nnamespace Globals {\n\texport function from(\n\t\tconfig: IExternalTaskRunnerConfiguration,\n\t\tcontext: IParseContext,\n\t): IGlobals {\n\t\tlet result = fromBase(config, context);\n\t\tlet osGlobals: IGlobals | undefined;\n\t\tif (config.windows && context.platform === Platform.Windows) {\n\t\t\tosGlobals = fromBase(config.windows, context);\n\t\t} else if (config.osx && context.platform === Platform.Mac) {\n\t\t\tosGlobals = fromBase(config.osx, context);\n\t\t} else if (config.linux && context.platform === Platform.Linux) {\n\t\t\tosGlobals = fromBase(config.linux, context);\n\t\t}\n\t\tif (osGlobals) {\n\t\t\tresult = Globals.assignProperties(result, osGlobals);\n\t\t}\n\t\tconst command = CommandConfiguration.from(config, context);\n\t\tif (command) {\n\t\t\tresult.command = command;\n\t\t}\n\t\tGlobals.fillDefaults(result, context);\n\t\tGlobals.freeze(result);\n\t\treturn result;\n\t}\n\n\texport function fromBase(\n\t\tthis: void,\n\t\tconfig: IBaseTaskRunnerConfiguration,\n\t\tcontext: IParseContext,\n\t): IGlobals {\n\t\tconst result: IGlobals = {};\n\t\tif (config.suppressTaskName !== undefined) {\n\t\t\tresult.suppressTaskName = !!config.suppressTaskName;\n\t\t}\n\t\tif (config.promptOnClose !== undefined) {\n\t\t\tresult.promptOnClose = !!config.promptOnClose;\n\t\t}\n\t\tif (config.problemMatcher) {\n\t\t\tresult.problemMatcher = ProblemMatcherConverter.from(\n\t\t\t\tconfig.problemMatcher,\n\t\t\t\tcontext,\n\t\t\t).value;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function isEmpty(value: IGlobals): boolean {\n\t\treturn (\n\t\t\t!value ||\n\t\t\t(value.command === undefined &&\n\t\t\t\tvalue.promptOnClose === undefined &&\n\t\t\t\tvalue.suppressTaskName === undefined)\n\t\t);\n\t}\n\n\texport function assignProperties(\n\t\ttarget: IGlobals,\n\t\tsource: IGlobals,\n\t): IGlobals {\n\t\tif (isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, \"promptOnClose\");\n\t\tassignProperty(target, source, \"suppressTaskName\");\n\t\treturn target;\n\t}\n\n\texport function fillDefaults(\n\t\tvalue: IGlobals,\n\t\tcontext: IParseContext,\n\t): void {\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tCommandConfiguration.fillDefaults(value.command, context);\n\t\tif (value.suppressTaskName === undefined) {\n\t\t\tvalue.suppressTaskName =\n\t\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\t}\n\t\tif (value.promptOnClose === undefined) {\n\t\t\tvalue.promptOnClose = true;\n\t\t}\n\t}\n\n\texport function freeze(value: IGlobals): void {\n\t\tObject.freeze(value);\n\t\tif (value.command) {\n\t\t\tCommandConfiguration.freeze(value.command);\n\t\t}\n\t}\n}\n\nexport namespace ExecutionEngine {\n\texport function from(\n\t\tconfig: IExternalTaskRunnerConfiguration,\n\t): Tasks.ExecutionEngine {\n\t\tconst runner = config.runner || config._runner;\n\t\tlet result: Tasks.ExecutionEngine | undefined;\n\t\tif (runner) {\n\t\t\tswitch (runner) {\n\t\t\t\tcase \"terminal\":\n\t\t\t\t\tresult = Tasks.ExecutionEngine.Terminal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"process\":\n\t\t\t\t\tresult = Tasks.ExecutionEngine.Process;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst schemaVersion = JsonSchemaVersion.from(config);\n\t\tif (schemaVersion === Tasks.JsonSchemaVersion.V0_1_0) {\n\t\t\treturn result || Tasks.ExecutionEngine.Process;\n\t\t} else if (schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\treturn Tasks.ExecutionEngine.Terminal;\n\t\t} else {\n\t\t\tthrow new Error(\"Shouldn't happen.\");\n\t\t}\n\t}\n}\n\nexport namespace JsonSchemaVersion {\n\tconst _default: Tasks.JsonSchemaVersion = Tasks.JsonSchemaVersion.V2_0_0;\n\n\texport function from(\n\t\tconfig: IExternalTaskRunnerConfiguration,\n\t): Tasks.JsonSchemaVersion {\n\t\tconst version = config.version;\n\t\tif (!version) {\n\t\t\treturn _default;\n\t\t}\n\t\tswitch (version) {\n\t\t\tcase \"0.1.0\":\n\t\t\t\treturn Tasks.JsonSchemaVersion.V0_1_0;\n\t\t\tcase \"2.0.0\":\n\t\t\t\treturn Tasks.JsonSchemaVersion.V2_0_0;\n\t\t\tdefault:\n\t\t\t\treturn _default;\n\t\t}\n\t}\n}\n\nexport interface IParseResult {\n\tvalidationStatus: ValidationStatus;\n\tcustom: Tasks.CustomTask[];\n\tconfigured: Tasks.ConfiguringTask[];\n\tengine: Tasks.ExecutionEngine;\n}\n\nexport interface IProblemReporter extends IProblemReporterBase {}\n\nexport class UUIDMap {\n\tprivate last: IStringDictionary<string | string[]> | undefined;\n\tprivate current: IStringDictionary<string | string[]>;\n\n\tconstructor(other?: UUIDMap) {\n\t\tthis.current = Object.create(null);\n\t\tif (other) {\n\t\t\tfor (const key of Object.keys(other.current)) {\n\t\t\t\tconst value = other.current[key];\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthis.current[key] = value.slice();\n\t\t\t\t} else {\n\t\t\t\t\tthis.current[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic start(): void {\n\t\tthis.last = this.current;\n\t\tthis.current = Object.create(null);\n\t}\n\n\tpublic getUUID(identifier: string): string {\n\t\tconst lastValue = this.last ? this.last[identifier] : undefined;\n\t\tlet result: string | undefined;\n\t\tif (lastValue !== undefined) {\n\t\t\tif (Array.isArray(lastValue)) {\n\t\t\t\tresult = lastValue.shift();\n\t\t\t\tif (lastValue.length === 0) {\n\t\t\t\t\tdelete this.last![identifier];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = lastValue;\n\t\t\t\tdelete this.last![identifier];\n\t\t\t}\n\t\t}\n\t\tif (result === undefined) {\n\t\t\tresult = UUID.generateUuid();\n\t\t}\n\t\tconst currentValue = this.current[identifier];\n\t\tif (currentValue === undefined) {\n\t\t\tthis.current[identifier] = result;\n\t\t} else if (Array.isArray(currentValue)) {\n\t\t\tcurrentValue.push(result);\n\t\t} else {\n\t\t\tconst arrayValue: string[] = [currentValue];\n\t\t\tarrayValue.push(result);\n\t\t\tthis.current[identifier] = arrayValue;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic finish(): void {\n\t\tthis.last = undefined;\n\t}\n}\n\nexport enum TaskConfigSource {\n\tTasksJson = 0,\n\tWorkspaceFile = 1,\n\tUser = 2,\n}\n\nclass ConfigurationParser {\n\tprivate workspaceFolder: IWorkspaceFolder;\n\tprivate workspace: IWorkspace | undefined;\n\tprivate problemReporter: IProblemReporter;\n\tprivate uuidMap: UUIDMap;\n\tprivate platform: Platform;\n\n\tconstructor(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\tworkspace: IWorkspace | undefined,\n\t\tplatform: Platform,\n\t\tproblemReporter: IProblemReporter,\n\t\tuuidMap: UUIDMap,\n\t) {\n\t\tthis.workspaceFolder = workspaceFolder;\n\t\tthis.workspace = workspace;\n\t\tthis.platform = platform;\n\t\tthis.problemReporter = problemReporter;\n\t\tthis.uuidMap = uuidMap;\n\t}\n\n\tpublic run(\n\t\tfileConfig: IExternalTaskRunnerConfiguration,\n\t\tsource: TaskConfigSource,\n\t\tcontextKeyService: IContextKeyService,\n\t): IParseResult {\n\t\tconst engine = ExecutionEngine.from(fileConfig);\n\t\tconst schemaVersion = JsonSchemaVersion.from(fileConfig);\n\t\tconst context: IParseContext = {\n\t\t\tworkspaceFolder: this.workspaceFolder,\n\t\t\tworkspace: this.workspace,\n\t\t\tproblemReporter: this.problemReporter,\n\t\t\tuuidMap: this.uuidMap,\n\t\t\tnamedProblemMatchers: {},\n\t\t\tengine,\n\t\t\tschemaVersion,\n\t\t\tplatform: this.platform,\n\t\t\ttaskLoadIssues: [],\n\t\t\tcontextKeyService,\n\t\t};\n\t\tconst taskParseResult = this.createTaskRunnerConfiguration(\n\t\t\tfileConfig,\n\t\t\tcontext,\n\t\t\tsource,\n\t\t);\n\t\treturn {\n\t\t\tvalidationStatus: this.problemReporter.status,\n\t\t\tcustom: taskParseResult.custom,\n\t\t\tconfigured: taskParseResult.configured,\n\t\t\tengine,\n\t\t};\n\t}\n\n\tprivate createTaskRunnerConfiguration(\n\t\tfileConfig: IExternalTaskRunnerConfiguration,\n\t\tcontext: IParseContext,\n\t\tsource: TaskConfigSource,\n\t): ITaskParseResult {\n\t\tconst globals = Globals.from(fileConfig, context);\n\t\tif (this.problemReporter.status.isFatal()) {\n\t\t\treturn { custom: [], configured: [] };\n\t\t}\n\t\tcontext.namedProblemMatchers = ProblemMatcherConverter.namedFrom(\n\t\t\tfileConfig.declares,\n\t\t\tcontext,\n\t\t);\n\t\tlet globalTasks: Tasks.CustomTask[] | undefined;\n\t\tlet externalGlobalTasks:\n\t\t\t| Array<IConfiguringTask | ICustomTask>\n\t\t\t| undefined;\n\t\tif (fileConfig.windows && context.platform === Platform.Windows) {\n\t\t\tglobalTasks = TaskParser.from(\n\t\t\t\tfileConfig.windows.tasks,\n\t\t\t\tglobals,\n\t\t\t\tcontext,\n\t\t\t\tsource,\n\t\t\t).custom;\n\t\t\texternalGlobalTasks = fileConfig.windows.tasks;\n\t\t} else if (fileConfig.osx && context.platform === Platform.Mac) {\n\t\t\tglobalTasks = TaskParser.from(\n\t\t\t\tfileConfig.osx.tasks,\n\t\t\t\tglobals,\n\t\t\t\tcontext,\n\t\t\t\tsource,\n\t\t\t).custom;\n\t\t\texternalGlobalTasks = fileConfig.osx.tasks;\n\t\t} else if (fileConfig.linux && context.platform === Platform.Linux) {\n\t\t\tglobalTasks = TaskParser.from(\n\t\t\t\tfileConfig.linux.tasks,\n\t\t\t\tglobals,\n\t\t\t\tcontext,\n\t\t\t\tsource,\n\t\t\t).custom;\n\t\t\texternalGlobalTasks = fileConfig.linux.tasks;\n\t\t}\n\t\tif (\n\t\t\tcontext.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0 &&\n\t\t\tglobalTasks &&\n\t\t\tglobalTasks.length > 0 &&\n\t\t\texternalGlobalTasks &&\n\t\t\texternalGlobalTasks.length > 0\n\t\t) {\n\t\t\tconst taskContent: string[] = [];\n\t\t\tfor (const task of externalGlobalTasks) {\n\t\t\t\ttaskContent.push(JSON.stringify(task, null, 4));\n\t\t\t}\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"TaskParse.noOsSpecificGlobalTasks\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t'\"Task version 2.0.0\" refers to the 2.0.0 version of the task system. The \"version 2.0.0\" is not localizable as it is a json key and value.',\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Task version 2.0.0 doesn't support global OS specific tasks. Convert them to a task with a OS specific command. Affected tasks are:\\n{0}\",\n\t\t\t\t\ttaskContent.join(\"\\n\"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tlet result: ITaskParseResult = { custom: [], configured: [] };\n\t\tif (fileConfig.tasks) {\n\t\t\tresult = TaskParser.from(\n\t\t\t\tfileConfig.tasks,\n\t\t\t\tglobals,\n\t\t\t\tcontext,\n\t\t\t\tsource,\n\t\t\t);\n\t\t}\n\t\tif (globalTasks) {\n\t\t\tresult.custom = TaskParser.assignTasks(result.custom, globalTasks);\n\t\t}\n\n\t\tif (\n\t\t\t(!result.custom || result.custom.length === 0) &&\n\t\t\tglobals.command &&\n\t\t\tglobals.command.name\n\t\t) {\n\t\t\tconst matchers: ProblemMatcher[] =\n\t\t\t\tProblemMatcherConverter.from(fileConfig.problemMatcher, context)\n\t\t\t\t\t.value ?? [];\n\t\t\tconst isBackground = fileConfig.isBackground\n\t\t\t\t? !!fileConfig.isBackground\n\t\t\t\t: fileConfig.isWatching\n\t\t\t\t\t? !!fileConfig.isWatching\n\t\t\t\t\t: undefined;\n\t\t\tconst name = Tasks.CommandString.value(globals.command.name);\n\t\t\tconst task: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\t\tcontext.uuidMap.getUUID(name),\n\t\t\t\tObject.assign({}, source, \"workspace\", {\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tindex: -1,\n\t\t\t\t\t\telement: fileConfig,\n\t\t\t\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\t\t\t},\n\t\t\t\t}) satisfies Tasks.IWorkspaceTaskSource,\n\t\t\t\tname,\n\t\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\t\t{\n\t\t\t\t\tname: undefined,\n\t\t\t\t\truntime: undefined,\n\t\t\t\t\tpresentation: undefined,\n\t\t\t\t\tsuppressTaskName: true,\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tname: name,\n\t\t\t\t\tidentifier: name,\n\t\t\t\t\tgroup: Tasks.TaskGroup.Build,\n\t\t\t\t\tisBackground: isBackground,\n\t\t\t\t\tproblemMatchers: matchers,\n\t\t\t\t},\n\t\t\t);\n\t\t\tconst taskGroupKind = GroupKind.from(fileConfig.group);\n\t\t\tif (taskGroupKind !== undefined) {\n\t\t\t\ttask.configurationProperties.group = taskGroupKind;\n\t\t\t} else if (fileConfig.group === \"none\") {\n\t\t\t\ttask.configurationProperties.group = undefined;\n\t\t\t}\n\t\t\tCustomTask.fillGlobals(task, globals);\n\t\t\tCustomTask.fillDefaults(task, context);\n\t\t\tresult.custom = [task];\n\t\t}\n\t\tresult.custom = result.custom || [];\n\t\tresult.configured = result.configured || [];\n\t\treturn result;\n\t}\n}\n\nconst uuidMaps: Map<TaskConfigSource, Map<string, UUIDMap>> = new Map();\nconst recentUuidMaps: Map<TaskConfigSource, Map<string, UUIDMap>> = new Map();\nexport function parse(\n\tworkspaceFolder: IWorkspaceFolder,\n\tworkspace: IWorkspace | undefined,\n\tplatform: Platform,\n\tconfiguration: IExternalTaskRunnerConfiguration,\n\tlogger: IProblemReporter,\n\tsource: TaskConfigSource,\n\tcontextKeyService: IContextKeyService,\n\tisRecents = false,\n): IParseResult {\n\tconst recentOrOtherMaps = isRecents ? recentUuidMaps : uuidMaps;\n\tlet selectedUuidMaps = recentOrOtherMaps.get(source);\n\tif (!selectedUuidMaps) {\n\t\trecentOrOtherMaps.set(source, new Map());\n\t\tselectedUuidMaps = recentOrOtherMaps.get(source)!;\n\t}\n\tlet uuidMap = selectedUuidMaps.get(workspaceFolder.uri.toString());\n\tif (!uuidMap) {\n\t\tuuidMap = new UUIDMap();\n\t\tselectedUuidMaps.set(workspaceFolder.uri.toString(), uuidMap);\n\t}\n\ttry {\n\t\tuuidMap.start();\n\t\treturn new ConfigurationParser(\n\t\t\tworkspaceFolder,\n\t\t\tworkspace,\n\t\t\tplatform,\n\t\t\tlogger,\n\t\t\tuuidMap,\n\t\t).run(configuration, source, contextKeyService);\n\t} finally {\n\t\tuuidMap.finish();\n\t}\n}\n\nexport function createCustomTask(\n\tcontributedTask: Tasks.ContributedTask,\n\tconfiguredProps: Tasks.ConfiguringTask | Tasks.CustomTask,\n): Tasks.CustomTask {\n\treturn CustomTask.createCustomTask(contributedTask, configuredProps);\n}\n"],
  "mappings": "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",
  "names": ["ShellQuoting", "ITaskIdentifier", "CommandString", "value", "ProblemMatcherKind", "RunOnOptions", "RunOptions", "ShellConfiguration", "CommandOptions", "CommandConfiguration", "PresentationOptions", "properties", "from", "assignProperties", "fillProperties", "fillDefaults", "freeze", "isEmpty", "ShellString", "ProblemMatcherConverter", "GroupKind", "TaskDependency", "DependsOrder", "ConfigurationProperties", "ConfiguringTask", "label", "CustomTask", "createCustomTask", "TaskParser", "Globals", "ExecutionEngine", "JsonSchemaVersion", "TaskConfigSource"]
}
