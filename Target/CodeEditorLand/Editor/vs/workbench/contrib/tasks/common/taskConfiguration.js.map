{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/taskConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\nimport * as Objects from '../../../../base/common/objects.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { IJSONSchemaMap } from '../../../../base/common/jsonSchema.js';\nimport { Platform } from '../../../../base/common/platform.js';\nimport * as Types from '../../../../base/common/types.js';\nimport * as UUID from '../../../../base/common/uuid.js';\n\nimport { ValidationStatus, IProblemReporter as IProblemReporterBase } from '../../../../base/common/parsers.js';\nimport {\n\tINamedProblemMatcher, ProblemMatcherParser, Config as ProblemMatcherConfig,\n\tisNamedProblemMatcher, ProblemMatcherRegistry, ProblemMatcher\n} from './problemMatcher.js';\n\nimport { IWorkspaceFolder, IWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport * as Tasks from './tasks.js';\nimport { ITaskDefinitionRegistry, TaskDefinitionRegistry } from './taskDefinitionRegistry.js';\nimport { ConfiguredInput } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ShellExecutionSupportedContext, ProcessExecutionSupportedContext } from './taskService.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\n\nexport const enum ShellQuoting {\n\t/**\n\t * Default is character escaping.\n\t */\n\tescape = 1,\n\n\t/**\n\t * Default is strong quoting\n\t */\n\tstrong = 2,\n\n\t/**\n\t * Default is weak quoting.\n\t */\n\tweak = 3\n}\n\nexport interface IShellQuotingOptions {\n\t/**\n\t * The character used to do character escaping.\n\t */\n\tescape?: string | {\n\t\tescapeChar: string;\n\t\tcharsToEscape: string;\n\t};\n\n\t/**\n\t * The character used for string quoting.\n\t */\n\tstrong?: string;\n\n\t/**\n\t * The character used for weak quoting.\n\t */\n\tweak?: string;\n}\n\nexport interface IShellConfiguration {\n\texecutable?: string;\n\targs?: string[];\n\tquoting?: IShellQuotingOptions;\n}\n\nexport interface ICommandOptionsConfig {\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The additional environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: IStringDictionary<string>;\n\n\t/**\n\t * The shell configuration;\n\t */\n\tshell?: IShellConfiguration;\n}\n\nexport interface IPresentationOptionsConfig {\n\t/**\n\t * Controls whether the terminal executing a task is brought to front or not.\n\t * Defaults to `RevealKind.Always`.\n\t */\n\treveal?: string;\n\n\t/**\n\t * Controls whether the problems panel is revealed when running this task or not.\n\t * Defaults to `RevealKind.Never`.\n\t */\n\trevealProblems?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output window or terminal as well.\n\t */\n\techo?: boolean;\n\n\t/**\n\t * Controls whether the terminal is focus when this task is executed\n\t */\n\tfocus?: boolean;\n\n\t/**\n\t * Controls whether the task runs in a new terminal\n\t */\n\tpanel?: string;\n\n\t/**\n\t * Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.\n\t */\n\tshowReuseMessage?: boolean;\n\n\t/**\n\t * Controls whether the terminal should be cleared before running the task.\n\t */\n\tclear?: boolean;\n\n\t/**\n\t * Controls whether the task is executed in a specific terminal group using split panes.\n\t */\n\tgroup?: string;\n\n\t/**\n\t * Controls whether the terminal that the task runs in is closed when the task completes.\n\t * Note that if the terminal process exits with a non-zero exit code, it will not close.\n\t */\n\tclose?: boolean;\n}\n\nexport interface IRunOptionsConfig {\n\treevaluateOnRerun?: boolean;\n\trunOn?: string;\n\tinstanceLimit?: number;\n}\n\nexport interface ITaskIdentifier {\n\ttype?: string;\n\t[name: string]: any;\n}\n\nexport namespace ITaskIdentifier {\n\texport function is(value: any): value is ITaskIdentifier {\n\t\tconst candidate: ITaskIdentifier = value;\n\t\treturn candidate !== undefined && Types.isString(value.type);\n\t}\n}\n\nexport interface ILegacyTaskProperties {\n\t/**\n\t * @deprecated Use `isBackground` instead.\n\t * Whether the executed command is kept alive and is watching the file system.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * @deprecated Use `group` instead.\n\t * Whether this task maps to the default build command.\n\t */\n\tisBuildCommand?: boolean;\n\n\t/**\n\t * @deprecated Use `group` instead.\n\t * Whether this task maps to the default test command.\n\t */\n\tisTestCommand?: boolean;\n}\n\nexport interface ILegacyCommandProperties {\n\n\t/**\n\t * Whether this is a shell or process\n\t */\n\ttype?: string;\n\n\t/**\n\t * @deprecated Use presentation options\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * See BaseTaskRunnerConfiguration#showOutput for details.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * @deprecated Use presentation options\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * @deprecated Use presentation instead\n\t */\n\tterminal?: IPresentationOptionsConfig;\n\n\t/**\n\t * @deprecated Use inline commands.\n\t * See BaseTaskRunnerConfiguration#suppressTaskName for details.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * @deprecated use the task type instead.\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean | IShellConfiguration;\n}\n\nexport type CommandString = string | string[] | { value: string | string[]; quoting: 'escape' | 'strong' | 'weak' };\n\nexport namespace CommandString {\n\texport function value(value: CommandString): string {\n\t\tif (Types.isString(value)) {\n\t\t\treturn value;\n\t\t} else if (Types.isStringArray(value)) {\n\t\t\treturn value.join(' ');\n\t\t} else {\n\t\t\tif (Types.isString(value.value)) {\n\t\t\t\treturn value.value;\n\t\t\t} else {\n\t\t\t\treturn value.value.join(' ');\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface IBaseCommandProperties {\n\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: CommandString;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The arguments passed to the command or additional arguments passed to the\n\t * command when using a global command.\n\t */\n\targs?: CommandString[];\n}\n\n\nexport interface ICommandProperties extends IBaseCommandProperties {\n\n\t/**\n\t * Windows specific command properties\n\t */\n\twindows?: IBaseCommandProperties;\n\n\t/**\n\t * OSX specific command properties\n\t */\n\tosx?: IBaseCommandProperties;\n\n\t/**\n\t * linux specific command properties\n\t */\n\tlinux?: IBaseCommandProperties;\n}\n\nexport interface IGroupKind {\n\tkind?: string;\n\tisDefault?: boolean | string;\n}\n\nexport interface IConfigurationProperties {\n\t/**\n\t * The task's name\n\t */\n\ttaskName?: string;\n\n\t/**\n\t * The UI label used for the task.\n\t */\n\tlabel?: string;\n\n\t/**\n\t * An optional identifier which can be used to reference a task\n\t * in a dependsOn or other attributes.\n\t */\n\tidentifier?: string;\n\n\t/**\n\t * Whether the executed command is kept alive and runs in the background.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * Defines the group the task belongs too.\n\t */\n\tgroup?: string | IGroupKind;\n\n\t/**\n\t * A description of the task.\n\t */\n\tdetail?: string;\n\n\t/**\n\t * The other tasks the task depend on\n\t */\n\tdependsOn?: string | ITaskIdentifier | Array<string | ITaskIdentifier>;\n\n\t/**\n\t * The order the dependsOn tasks should be executed in.\n\t */\n\tdependsOrder?: string;\n\n\t/**\n\t * Controls the behavior of the used terminal\n\t */\n\tpresentation?: IPresentationOptionsConfig;\n\n\t/**\n\t * Controls shell options.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The problem matcher(s) to use to capture problems in the tasks\n\t * output.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * Task run options. Control run related properties.\n\t */\n\trunOptions?: IRunOptionsConfig;\n\n\t/**\n\t * The icon for this task in the terminal tabs list\n\t */\n\ticon?: { id: string; color?: string };\n\n\t/**\n\t * The icon's color in the terminal tabs list\n\t */\n\tcolor?: string;\n\n\t/**\n\t * Do not show this task in the run task quickpick\n\t */\n\thide?: boolean;\n}\n\nexport interface ICustomTask extends ICommandProperties, IConfigurationProperties {\n\t/**\n\t * Custom tasks have the type CUSTOMIZED_TASK_TYPE\n\t */\n\ttype?: string;\n\n}\n\nexport interface IConfiguringTask extends IConfigurationProperties {\n\t/**\n\t * The contributed type of the task\n\t */\n\ttype?: string;\n}\n\n/**\n * The base task runner configuration\n */\nexport interface IBaseTaskRunnerConfiguration {\n\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: CommandString;\n\n\t/**\n\t * @deprecated Use type instead\n\t *\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean;\n\n\t/**\n\t * The task type\n\t */\n\ttype?: string;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The arguments passed to the command. Can be omitted.\n\t */\n\targs?: CommandString[];\n\n\t/**\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * Valid values are:\n\t *   \"always\": bring the output window always to front when a task is executed.\n\t *   \"silent\": only bring it to front if no problem matcher is defined for the task executed.\n\t *   \"never\": never bring the output window to front.\n\t *\n\t * If omitted \"always\" is used.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * The group\n\t */\n\tgroup?: string | IGroupKind;\n\n\t/**\n\t * Controls the behavior of the used terminal\n\t */\n\tpresentation?: IPresentationOptionsConfig;\n\n\t/**\n\t * If set to false the task name is added as an additional argument to the\n\t * command when executed. If set to true the task name is suppressed. If\n\t * omitted false is used.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * The problem matcher(s) to used if a global command is executed (e.g. no tasks\n\t * are defined). A tasks.json file can either contain a global problemMatcher\n\t * property or a tasks property but not both.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * @deprecated Use `isBackground` instead.\n\t *\n\t * Specifies whether a global command is a watching the filesystem. A task.json\n\t * file can either contain a global isWatching property or a tasks property\n\t * but not both.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * Specifies whether a global command is a background task.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * The configuration of the available tasks. A tasks.json file can either\n\t * contain a global problemMatcher property or a tasks property but not both.\n\t */\n\ttasks?: Array<ICustomTask | IConfiguringTask>;\n\n\t/**\n\t * Problem matcher declarations.\n\t */\n\tdeclares?: ProblemMatcherConfig.INamedProblemMatcher[];\n\n\t/**\n\t * Optional user input variables.\n\t */\n\tinputs?: ConfiguredInput[];\n}\n\n/**\n * A configuration of an external build system. BuildConfiguration.buildSystem\n * must be set to 'program'\n */\nexport interface IExternalTaskRunnerConfiguration extends IBaseTaskRunnerConfiguration {\n\n\t_runner?: string;\n\n\t/**\n\t * Determines the runner to use\n\t */\n\trunner?: string;\n\n\t/**\n\t * The config's version number\n\t */\n\tversion: string;\n\n\t/**\n\t * Windows specific task configuration\n\t */\n\twindows?: IBaseTaskRunnerConfiguration;\n\n\t/**\n\t * Mac specific task configuration\n\t */\n\tosx?: IBaseTaskRunnerConfiguration;\n\n\t/**\n\t * Linux specific task configuration\n\t */\n\tlinux?: IBaseTaskRunnerConfiguration;\n}\n\nenum ProblemMatcherKind {\n\tUnknown,\n\tString,\n\tProblemMatcher,\n\tArray\n}\n\ntype TaskConfigurationValueWithErrors<T> = {\n\tvalue?: T;\n\terrors?: string[];\n};\n\nconst EMPTY_ARRAY: any[] = [];\nObject.freeze(EMPTY_ARRAY);\n\nfunction assignProperty<T, K extends keyof T>(target: T, source: Partial<T>, key: K) {\n\tconst sourceAtKey = source[key];\n\tif (sourceAtKey !== undefined) {\n\t\ttarget[key] = sourceAtKey!;\n\t}\n}\n\nfunction fillProperty<T, K extends keyof T>(target: T, source: Partial<T>, key: K) {\n\tconst sourceAtKey = source[key];\n\tif (target[key] === undefined && sourceAtKey !== undefined) {\n\t\ttarget[key] = sourceAtKey!;\n\t}\n}\n\n\ninterface IParserType<T> {\n\tisEmpty(value: T | undefined): boolean;\n\tassignProperties(target: T | undefined, source: T | undefined): T | undefined;\n\tfillProperties(target: T | undefined, source: T | undefined): T | undefined;\n\tfillDefaults(value: T | undefined, context: IParseContext): T | undefined;\n\tfreeze(value: T): Readonly<T> | undefined;\n}\n\ninterface IMetaData<T, U> {\n\tproperty: keyof T;\n\ttype?: IParserType<U>;\n}\n\n\nfunction _isEmpty<T>(this: void, value: T | undefined, properties: IMetaData<T, any>[] | undefined, allowEmptyArray: boolean = false): boolean {\n\tif (value === undefined || value === null || properties === undefined) {\n\t\treturn true;\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = value[meta.property];\n\t\tif (property !== undefined && property !== null) {\n\t\t\tif (meta.type !== undefined && !meta.type.isEmpty(property)) {\n\t\t\t\treturn false;\n\t\t\t} else if (!Array.isArray(property) || (property.length > 0) || allowEmptyArray) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction _assignProperties<T>(this: void, target: T | undefined, source: T | undefined, properties: IMetaData<T, any>[]): T | undefined {\n\tif (!source || _isEmpty(source, properties)) {\n\t\treturn target;\n\t}\n\tif (!target || _isEmpty(target, properties)) {\n\t\treturn source;\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = meta.property;\n\t\tlet value: any;\n\t\tif (meta.type !== undefined) {\n\t\t\tvalue = meta.type.assignProperties(target[property], source[property]);\n\t\t} else {\n\t\t\tvalue = source[property];\n\t\t}\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _fillProperties<T>(this: void, target: T | undefined, source: T | undefined, properties: IMetaData<T, any>[] | undefined, allowEmptyArray: boolean = false): T | undefined {\n\tif (!source || _isEmpty(source, properties)) {\n\t\treturn target;\n\t}\n\tif (!target || _isEmpty(target, properties, allowEmptyArray)) {\n\t\treturn source;\n\t}\n\tfor (const meta of properties!) {\n\t\tconst property = meta.property;\n\t\tlet value: any;\n\t\tif (meta.type) {\n\t\t\tvalue = meta.type.fillProperties(target[property], source[property]);\n\t\t} else if (target[property] === undefined) {\n\t\t\tvalue = source[property];\n\t\t}\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _fillDefaults<T>(this: void, target: T | undefined, defaults: T | undefined, properties: IMetaData<T, any>[], context: IParseContext): T | undefined {\n\tif (target && Object.isFrozen(target)) {\n\t\treturn target;\n\t}\n\tif (target === undefined || target === null || defaults === undefined || defaults === null) {\n\t\tif (defaults !== undefined && defaults !== null) {\n\t\t\treturn Objects.deepClone(defaults);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = meta.property;\n\t\tif (target[property] !== undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet value: any;\n\t\tif (meta.type) {\n\t\t\tvalue = meta.type.fillDefaults(target[property], context);\n\t\t} else {\n\t\t\tvalue = defaults[property];\n\t\t}\n\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _freeze<T>(this: void, target: T, properties: IMetaData<T, any>[]): Readonly<T> | undefined {\n\tif (target === undefined || target === null) {\n\t\treturn undefined;\n\t}\n\tif (Object.isFrozen(target)) {\n\t\treturn target;\n\t}\n\tfor (const meta of properties) {\n\t\tif (meta.type) {\n\t\t\tconst value = target[meta.property];\n\t\t\tif (value) {\n\t\t\t\tmeta.type.freeze(value);\n\t\t\t}\n\t\t}\n\t}\n\tObject.freeze(target);\n\treturn target;\n}\n\nexport namespace RunOnOptions {\n\texport function fromString(value: string | undefined): Tasks.RunOnOptions {\n\t\tif (!value) {\n\t\t\treturn Tasks.RunOnOptions.default;\n\t\t}\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'folderopen':\n\t\t\t\treturn Tasks.RunOnOptions.folderOpen;\n\t\t\tcase 'default':\n\t\t\tdefault:\n\t\t\t\treturn Tasks.RunOnOptions.default;\n\t\t}\n\t}\n}\n\nexport namespace RunOptions {\n\tconst properties: IMetaData<Tasks.IRunOptions, void>[] = [{ property: 'reevaluateOnRerun' }, { property: 'runOn' }, { property: 'instanceLimit' }];\n\texport function fromConfiguration(value: IRunOptionsConfig | undefined): Tasks.IRunOptions {\n\t\treturn {\n\t\t\treevaluateOnRerun: value ? value.reevaluateOnRerun : true,\n\t\t\trunOn: value ? RunOnOptions.fromString(value.runOn) : Tasks.RunOnOptions.default,\n\t\t\tinstanceLimit: value ? value.instanceLimit : 1\n\t\t};\n\t}\n\n\texport function assignProperties(target: Tasks.IRunOptions, source: Tasks.IRunOptions | undefined): Tasks.IRunOptions {\n\t\treturn _assignProperties(target, source, properties)!;\n\t}\n\n\texport function fillProperties(target: Tasks.IRunOptions, source: Tasks.IRunOptions | undefined): Tasks.IRunOptions {\n\t\treturn _fillProperties(target, source, properties)!;\n\t}\n}\n\nexport interface IParseContext {\n\tworkspaceFolder: IWorkspaceFolder;\n\tworkspace: IWorkspace | undefined;\n\tproblemReporter: IProblemReporter;\n\tnamedProblemMatchers: IStringDictionary<INamedProblemMatcher>;\n\tuuidMap: UUIDMap;\n\tengine: Tasks.ExecutionEngine;\n\tschemaVersion: Tasks.JsonSchemaVersion;\n\tplatform: Platform;\n\ttaskLoadIssues: string[];\n\tcontextKeyService: IContextKeyService;\n}\n\n\nnamespace ShellConfiguration {\n\n\tconst properties: IMetaData<Tasks.IShellConfiguration, void>[] = [{ property: 'executable' }, { property: 'args' }, { property: 'quoting' }];\n\n\texport function is(value: any): value is IShellConfiguration {\n\t\tconst candidate: IShellConfiguration = value;\n\t\treturn candidate && (Types.isString(candidate.executable) || Types.isStringArray(candidate.args));\n\t}\n\n\texport function from(this: void, config: IShellConfiguration | undefined, context: IParseContext): Tasks.IShellConfiguration | undefined {\n\t\tif (!is(config)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: IShellConfiguration = {};\n\t\tif (config.executable !== undefined) {\n\t\t\tresult.executable = config.executable;\n\t\t}\n\t\tif (config.args !== undefined) {\n\t\t\tresult.args = config.args.slice();\n\t\t}\n\t\tif (config.quoting !== undefined) {\n\t\t\tresult.quoting = Objects.deepClone(config.quoting);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function isEmpty(this: void, value: Tasks.IShellConfiguration): boolean {\n\t\treturn _isEmpty(value, properties, true);\n\t}\n\n\texport function assignProperties(this: void, target: Tasks.IShellConfiguration | undefined, source: Tasks.IShellConfiguration | undefined): Tasks.IShellConfiguration | undefined {\n\t\treturn _assignProperties(target, source, properties);\n\t}\n\n\texport function fillProperties(this: void, target: Tasks.IShellConfiguration, source: Tasks.IShellConfiguration): Tasks.IShellConfiguration | undefined {\n\t\treturn _fillProperties(target, source, properties, true);\n\t}\n\n\texport function fillDefaults(this: void, value: Tasks.IShellConfiguration, context: IParseContext): Tasks.IShellConfiguration {\n\t\treturn value;\n\t}\n\n\texport function freeze(this: void, value: Tasks.IShellConfiguration): Readonly<Tasks.IShellConfiguration> | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.freeze(value);\n\t}\n}\n\nnamespace CommandOptions {\n\n\tconst properties: IMetaData<Tasks.CommandOptions, Tasks.IShellConfiguration>[] = [{ property: 'cwd' }, { property: 'env' }, { property: 'shell', type: ShellConfiguration }];\n\tconst defaults: ICommandOptionsConfig = { cwd: '${workspaceFolder}' };\n\n\texport function from(this: void, options: ICommandOptionsConfig, context: IParseContext): Tasks.CommandOptions | undefined {\n\t\tconst result: Tasks.CommandOptions = {};\n\t\tif (options.cwd !== undefined) {\n\t\t\tif (Types.isString(options.cwd)) {\n\t\t\t\tresult.cwd = options.cwd;\n\t\t\t} else {\n\t\t\t\tcontext.taskLoadIssues.push(nls.localize('ConfigurationParser.invalidCWD', 'Warning: options.cwd must be of type string. Ignoring value {0}\\n', options.cwd));\n\t\t\t}\n\t\t}\n\t\tif (options.env !== undefined) {\n\t\t\tresult.env = Objects.deepClone(options.env);\n\t\t}\n\t\tresult.shell = ShellConfiguration.from(options.shell, context);\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\texport function isEmpty(value: Tasks.CommandOptions | undefined): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n\n\texport function assignProperties(target: Tasks.CommandOptions | undefined, source: Tasks.CommandOptions | undefined): Tasks.CommandOptions | undefined {\n\t\tif ((source === undefined) || isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif ((target === undefined) || isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, 'cwd');\n\t\tif (target.env === undefined) {\n\t\t\ttarget.env = source.env;\n\t\t} else if (source.env !== undefined) {\n\t\t\tconst env: { [key: string]: string } = Object.create(null);\n\t\t\tif (target.env !== undefined) {\n\t\t\t\tObject.keys(target.env).forEach(key => env[key] = target.env![key]);\n\t\t\t}\n\t\t\tif (source.env !== undefined) {\n\t\t\t\tObject.keys(source.env).forEach(key => env[key] = source.env![key]);\n\t\t\t}\n\t\t\ttarget.env = env;\n\t\t}\n\t\ttarget.shell = ShellConfiguration.assignProperties(target.shell, source.shell);\n\t\treturn target;\n\t}\n\n\texport function fillProperties(target: Tasks.CommandOptions | undefined, source: Tasks.CommandOptions | undefined): Tasks.CommandOptions | undefined {\n\t\treturn _fillProperties(target, source, properties);\n\t}\n\n\texport function fillDefaults(value: Tasks.CommandOptions | undefined, context: IParseContext): Tasks.CommandOptions | undefined {\n\t\treturn _fillDefaults(value, defaults, properties, context);\n\t}\n\n\texport function freeze(value: Tasks.CommandOptions): Readonly<Tasks.CommandOptions> | undefined {\n\t\treturn _freeze(value, properties);\n\t}\n}\n\nnamespace CommandConfiguration {\n\n\texport namespace PresentationOptions {\n\t\tconst properties: IMetaData<Tasks.IPresentationOptions, void>[] = [{ property: 'echo' }, { property: 'reveal' }, { property: 'revealProblems' }, { property: 'focus' }, { property: 'panel' }, { property: 'showReuseMessage' }, { property: 'clear' }, { property: 'group' }, { property: 'close' }];\n\n\t\tinterface IPresentationOptionsShape extends ILegacyCommandProperties {\n\t\t\tpresentation?: IPresentationOptionsConfig;\n\t\t}\n\n\t\texport function from(this: void, config: IPresentationOptionsShape, context: IParseContext): Tasks.IPresentationOptions | undefined {\n\t\t\tlet echo: boolean;\n\t\t\tlet reveal: Tasks.RevealKind;\n\t\t\tlet revealProblems: Tasks.RevealProblemKind;\n\t\t\tlet focus: boolean;\n\t\t\tlet panel: Tasks.PanelKind;\n\t\t\tlet showReuseMessage: boolean;\n\t\t\tlet clear: boolean;\n\t\t\tlet group: string | undefined;\n\t\t\tlet close: boolean | undefined;\n\t\t\tlet hasProps = false;\n\t\t\tif (Types.isBoolean(config.echoCommand)) {\n\t\t\t\techo = config.echoCommand;\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tif (Types.isString(config.showOutput)) {\n\t\t\t\treveal = Tasks.RevealKind.fromString(config.showOutput);\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tconst presentation = config.presentation || config.terminal;\n\t\t\tif (presentation) {\n\t\t\t\tif (Types.isBoolean(presentation.echo)) {\n\t\t\t\t\techo = presentation.echo;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.reveal)) {\n\t\t\t\t\treveal = Tasks.RevealKind.fromString(presentation.reveal);\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.revealProblems)) {\n\t\t\t\t\trevealProblems = Tasks.RevealProblemKind.fromString(presentation.revealProblems);\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.focus)) {\n\t\t\t\t\tfocus = presentation.focus;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.panel)) {\n\t\t\t\t\tpanel = Tasks.PanelKind.fromString(presentation.panel);\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.showReuseMessage)) {\n\t\t\t\t\tshowReuseMessage = presentation.showReuseMessage;\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.clear)) {\n\t\t\t\t\tclear = presentation.clear;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.group)) {\n\t\t\t\t\tgroup = presentation.group;\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.close)) {\n\t\t\t\t\tclose = presentation.close;\n\t\t\t\t}\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tif (!hasProps) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn { echo: echo!, reveal: reveal!, revealProblems: revealProblems!, focus: focus!, panel: panel!, showReuseMessage: showReuseMessage!, clear: clear!, group, close: close };\n\t\t}\n\n\t\texport function assignProperties(target: Tasks.IPresentationOptions, source: Tasks.IPresentationOptions | undefined): Tasks.IPresentationOptions | undefined {\n\t\t\treturn _assignProperties(target, source, properties);\n\t\t}\n\n\t\texport function fillProperties(target: Tasks.IPresentationOptions, source: Tasks.IPresentationOptions | undefined): Tasks.IPresentationOptions | undefined {\n\t\t\treturn _fillProperties(target, source, properties);\n\t\t}\n\n\t\texport function fillDefaults(value: Tasks.IPresentationOptions, context: IParseContext): Tasks.IPresentationOptions | undefined {\n\t\t\tconst defaultEcho = context.engine === Tasks.ExecutionEngine.Terminal ? true : false;\n\t\t\treturn _fillDefaults(value, { echo: defaultEcho, reveal: Tasks.RevealKind.Always, revealProblems: Tasks.RevealProblemKind.Never, focus: false, panel: Tasks.PanelKind.Shared, showReuseMessage: true, clear: false }, properties, context);\n\t\t}\n\n\t\texport function freeze(value: Tasks.IPresentationOptions): Readonly<Tasks.IPresentationOptions> | undefined {\n\t\t\treturn _freeze(value, properties);\n\t\t}\n\n\t\texport function isEmpty(this: void, value: Tasks.IPresentationOptions): boolean {\n\t\t\treturn _isEmpty(value, properties);\n\t\t}\n\t}\n\n\tnamespace ShellString {\n\t\texport function from(this: void, value: CommandString | undefined): Tasks.CommandString | undefined {\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Types.isString(value)) {\n\t\t\t\treturn value;\n\t\t\t} else if (Types.isStringArray(value)) {\n\t\t\t\treturn value.join(' ');\n\t\t\t} else {\n\t\t\t\tconst quoting = Tasks.ShellQuoting.from(value.quoting);\n\t\t\t\tconst result = Types.isString(value.value) ? value.value : Types.isStringArray(value.value) ? value.value.join(' ') : undefined;\n\t\t\t\tif (result) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: result,\n\t\t\t\t\t\tquoting: quoting\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tinterface IBaseCommandConfigurationShape extends IBaseCommandProperties, ILegacyCommandProperties {\n\t}\n\n\tinterface ICommandConfigurationShape extends IBaseCommandConfigurationShape {\n\t\twindows?: IBaseCommandConfigurationShape;\n\t\tosx?: IBaseCommandConfigurationShape;\n\t\tlinux?: IBaseCommandConfigurationShape;\n\t}\n\n\tconst properties: IMetaData<Tasks.ICommandConfiguration, any>[] = [\n\t\t{ property: 'runtime' }, { property: 'name' }, { property: 'options', type: CommandOptions },\n\t\t{ property: 'args' }, { property: 'taskSelector' }, { property: 'suppressTaskName' },\n\t\t{ property: 'presentation', type: PresentationOptions }\n\t];\n\n\texport function from(this: void, config: ICommandConfigurationShape, context: IParseContext): Tasks.ICommandConfiguration | undefined {\n\t\tlet result: Tasks.ICommandConfiguration = fromBase(config, context)!;\n\n\t\tlet osConfig: Tasks.ICommandConfiguration | undefined = undefined;\n\t\tif (config.windows && context.platform === Platform.Windows) {\n\t\t\tosConfig = fromBase(config.windows, context);\n\t\t} else if (config.osx && context.platform === Platform.Mac) {\n\t\t\tosConfig = fromBase(config.osx, context);\n\t\t} else if (config.linux && context.platform === Platform.Linux) {\n\t\t\tosConfig = fromBase(config.linux, context);\n\t\t}\n\t\tif (osConfig) {\n\t\t\tresult = assignProperties(result, osConfig, context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0);\n\t\t}\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\tfunction fromBase(this: void, config: IBaseCommandConfigurationShape, context: IParseContext): Tasks.ICommandConfiguration | undefined {\n\t\tconst name: Tasks.CommandString | undefined = ShellString.from(config.command);\n\t\tlet runtime: Tasks.RuntimeType;\n\t\tif (Types.isString(config.type)) {\n\t\t\tif (config.type === 'shell' || config.type === 'process') {\n\t\t\t\truntime = Tasks.RuntimeType.fromString(config.type);\n\t\t\t}\n\t\t}\n\t\tif (Types.isBoolean(config.isShellCommand) || ShellConfiguration.is(config.isShellCommand)) {\n\t\t\truntime = Tasks.RuntimeType.Shell;\n\t\t} else if (config.isShellCommand !== undefined) {\n\t\t\truntime = !!config.isShellCommand ? Tasks.RuntimeType.Shell : Tasks.RuntimeType.Process;\n\t\t}\n\n\t\tconst result: Tasks.ICommandConfiguration = {\n\t\t\tname: name,\n\t\t\truntime: runtime!,\n\t\t\tpresentation: PresentationOptions.from(config, context)!\n\t\t};\n\n\t\tif (config.args !== undefined) {\n\t\t\tresult.args = [];\n\t\t\tfor (const arg of config.args) {\n\t\t\t\tconst converted = ShellString.from(arg);\n\t\t\t\tif (converted !== undefined) {\n\t\t\t\t\tresult.args.push(converted);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.taskLoadIssues.push(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t'ConfigurationParser.inValidArg',\n\t\t\t\t\t\t\t'Error: command argument must either be a string or a quoted string. Provided value is:\\n{0}',\n\t\t\t\t\t\t\targ ? JSON.stringify(arg, undefined, 4) : 'undefined'\n\t\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (config.options !== undefined) {\n\t\t\tresult.options = CommandOptions.from(config.options, context);\n\t\t\tif (result.options && result.options.shell === undefined && ShellConfiguration.is(config.isShellCommand)) {\n\t\t\t\tresult.options.shell = ShellConfiguration.from(config.isShellCommand, context);\n\t\t\t\tif (context.engine !== Tasks.ExecutionEngine.Terminal) {\n\t\t\t\t\tcontext.taskLoadIssues.push(nls.localize('ConfigurationParser.noShell', 'Warning: shell configuration is only supported when executing tasks in the terminal.'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Types.isString(config.taskSelector)) {\n\t\t\tresult.taskSelector = config.taskSelector;\n\t\t}\n\t\tif (Types.isBoolean(config.suppressTaskName)) {\n\t\t\tresult.suppressTaskName = config.suppressTaskName;\n\t\t}\n\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\texport function hasCommand(value: Tasks.ICommandConfiguration): boolean {\n\t\treturn value && !!value.name;\n\t}\n\n\texport function isEmpty(value: Tasks.ICommandConfiguration | undefined): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n\n\texport function assignProperties(target: Tasks.ICommandConfiguration, source: Tasks.ICommandConfiguration, overwriteArgs: boolean): Tasks.ICommandConfiguration {\n\t\tif (isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, 'name');\n\t\tassignProperty(target, source, 'runtime');\n\t\tassignProperty(target, source, 'taskSelector');\n\t\tassignProperty(target, source, 'suppressTaskName');\n\t\tif (source.args !== undefined) {\n\t\t\tif (target.args === undefined || overwriteArgs) {\n\t\t\t\ttarget.args = source.args;\n\t\t\t} else {\n\t\t\t\ttarget.args = target.args.concat(source.args);\n\t\t\t}\n\t\t}\n\t\ttarget.presentation = PresentationOptions.assignProperties(target.presentation!, source.presentation)!;\n\t\ttarget.options = CommandOptions.assignProperties(target.options, source.options);\n\t\treturn target;\n\t}\n\n\texport function fillProperties(target: Tasks.ICommandConfiguration, source: Tasks.ICommandConfiguration): Tasks.ICommandConfiguration | undefined {\n\t\treturn _fillProperties(target, source, properties);\n\t}\n\n\texport function fillGlobals(target: Tasks.ICommandConfiguration, source: Tasks.ICommandConfiguration | undefined, taskName: string | undefined): Tasks.ICommandConfiguration {\n\t\tif ((source === undefined) || isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\ttarget = target || {\n\t\t\tname: undefined,\n\t\t\truntime: undefined,\n\t\t\tpresentation: undefined\n\t\t};\n\t\tif (target.name === undefined) {\n\t\t\tfillProperty(target, source, 'name');\n\t\t\tfillProperty(target, source, 'taskSelector');\n\t\t\tfillProperty(target, source, 'suppressTaskName');\n\t\t\tlet args: Tasks.CommandString[] = source.args ? source.args.slice() : [];\n\t\t\tif (!target.suppressTaskName && taskName) {\n\t\t\t\tif (target.taskSelector !== undefined) {\n\t\t\t\t\targs.push(target.taskSelector + taskName);\n\t\t\t\t} else {\n\t\t\t\t\targs.push(taskName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (target.args) {\n\t\t\t\targs = args.concat(target.args);\n\t\t\t}\n\t\t\ttarget.args = args;\n\t\t}\n\t\tfillProperty(target, source, 'runtime');\n\n\t\ttarget.presentation = PresentationOptions.fillProperties(target.presentation!, source.presentation)!;\n\t\ttarget.options = CommandOptions.fillProperties(target.options, source.options);\n\n\t\treturn target;\n\t}\n\n\texport function fillDefaults(value: Tasks.ICommandConfiguration | undefined, context: IParseContext): void {\n\t\tif (!value || Object.isFrozen(value)) {\n\t\t\treturn;\n\t\t}\n\t\tif (value.name !== undefined && value.runtime === undefined) {\n\t\t\tvalue.runtime = Tasks.RuntimeType.Process;\n\t\t}\n\t\tvalue.presentation = PresentationOptions.fillDefaults(value.presentation!, context)!;\n\t\tif (!isEmpty(value)) {\n\t\t\tvalue.options = CommandOptions.fillDefaults(value.options, context);\n\t\t}\n\t\tif (value.args === undefined) {\n\t\t\tvalue.args = EMPTY_ARRAY;\n\t\t}\n\t\tif (value.suppressTaskName === undefined) {\n\t\t\tvalue.suppressTaskName = (context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0);\n\t\t}\n\t}\n\n\texport function freeze(value: Tasks.ICommandConfiguration): Readonly<Tasks.ICommandConfiguration> | undefined {\n\t\treturn _freeze(value, properties);\n\t}\n}\n\nexport namespace ProblemMatcherConverter {\n\n\texport function namedFrom(this: void, declares: ProblemMatcherConfig.INamedProblemMatcher[] | undefined, context: IParseContext): IStringDictionary<INamedProblemMatcher> {\n\t\tconst result: IStringDictionary<INamedProblemMatcher> = Object.create(null);\n\n\t\tif (!Array.isArray(declares)) {\n\t\t\treturn result;\n\t\t}\n\t\t(<ProblemMatcherConfig.INamedProblemMatcher[]>declares).forEach((value) => {\n\t\t\tconst namedProblemMatcher = (new ProblemMatcherParser(context.problemReporter)).parse(value);\n\t\t\tif (isNamedProblemMatcher(namedProblemMatcher)) {\n\t\t\t\tresult[namedProblemMatcher.name] = namedProblemMatcher;\n\t\t\t} else {\n\t\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.noName', 'Error: Problem Matcher in declare scope must have a name:\\n{0}\\n', JSON.stringify(value, undefined, 4)));\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\texport function fromWithOsConfig(this: void, external: IConfigurationProperties & { [key: string]: any }, context: IParseContext): TaskConfigurationValueWithErrors<ProblemMatcher[]> {\n\t\tlet result: TaskConfigurationValueWithErrors<ProblemMatcher[]> = {};\n\t\tif (external.windows && external.windows.problemMatcher && context.platform === Platform.Windows) {\n\t\t\tresult = from(external.windows.problemMatcher, context);\n\t\t} else if (external.osx && external.osx.problemMatcher && context.platform === Platform.Mac) {\n\t\t\tresult = from(external.osx.problemMatcher, context);\n\t\t} else if (external.linux && external.linux.problemMatcher && context.platform === Platform.Linux) {\n\t\t\tresult = from(external.linux.problemMatcher, context);\n\t\t} else if (external.problemMatcher) {\n\t\t\tresult = from(external.problemMatcher, context);\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function from(this: void, config: ProblemMatcherConfig.ProblemMatcherType | undefined, context: IParseContext): TaskConfigurationValueWithErrors<ProblemMatcher[]> {\n\t\tconst result: ProblemMatcher[] = [];\n\t\tif (config === undefined) {\n\t\t\treturn { value: result };\n\t\t}\n\t\tconst errors: string[] = [];\n\t\tfunction addResult(matcher: TaskConfigurationValueWithErrors<ProblemMatcher>) {\n\t\t\tif (matcher.value) {\n\t\t\t\tresult.push(matcher.value);\n\t\t\t}\n\t\t\tif (matcher.errors) {\n\t\t\t\terrors.push(...matcher.errors);\n\t\t\t}\n\t\t}\n\t\tconst kind = getProblemMatcherKind(config);\n\t\tif (kind === ProblemMatcherKind.Unknown) {\n\t\t\tconst error = nls.localize(\n\t\t\t\t'ConfigurationParser.unknownMatcherKind',\n\t\t\t\t'Warning: the defined problem matcher is unknown. Supported types are string | ProblemMatcher | Array<string | ProblemMatcher>.\\n{0}\\n',\n\t\t\t\tJSON.stringify(config, null, 4));\n\t\t\tcontext.problemReporter.warn(error);\n\t\t} else if (kind === ProblemMatcherKind.String || kind === ProblemMatcherKind.ProblemMatcher) {\n\t\t\taddResult(resolveProblemMatcher(config as ProblemMatcherConfig.ProblemMatcher, context));\n\t\t} else if (kind === ProblemMatcherKind.Array) {\n\t\t\tconst problemMatchers = <(string | ProblemMatcherConfig.ProblemMatcher)[]>config;\n\t\t\tproblemMatchers.forEach(problemMatcher => {\n\t\t\t\taddResult(resolveProblemMatcher(problemMatcher, context));\n\t\t\t});\n\t\t}\n\t\treturn { value: result, errors };\n\t}\n\n\tfunction getProblemMatcherKind(this: void, value: ProblemMatcherConfig.ProblemMatcherType): ProblemMatcherKind {\n\t\tif (Types.isString(value)) {\n\t\t\treturn ProblemMatcherKind.String;\n\t\t} else if (Array.isArray(value)) {\n\t\t\treturn ProblemMatcherKind.Array;\n\t\t} else if (!Types.isUndefined(value)) {\n\t\t\treturn ProblemMatcherKind.ProblemMatcher;\n\t\t} else {\n\t\t\treturn ProblemMatcherKind.Unknown;\n\t\t}\n\t}\n\n\tfunction resolveProblemMatcher(this: void, value: string | ProblemMatcherConfig.ProblemMatcher, context: IParseContext): TaskConfigurationValueWithErrors<ProblemMatcher> {\n\t\tif (Types.isString(value)) {\n\t\t\tlet variableName = <string>value;\n\t\t\tif (variableName.length > 1 && variableName[0] === '$') {\n\t\t\t\tvariableName = variableName.substring(1);\n\t\t\t\tconst global = ProblemMatcherRegistry.get(variableName);\n\t\t\t\tif (global) {\n\t\t\t\t\treturn { value: Objects.deepClone(global) };\n\t\t\t\t}\n\t\t\t\tlet localProblemMatcher: ProblemMatcher & Partial<INamedProblemMatcher> = context.namedProblemMatchers[variableName];\n\t\t\t\tif (localProblemMatcher) {\n\t\t\t\t\tlocalProblemMatcher = Objects.deepClone(localProblemMatcher);\n\t\t\t\t\t// remove the name\n\t\t\t\t\tdelete localProblemMatcher.name;\n\t\t\t\t\treturn { value: localProblemMatcher };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { errors: [nls.localize('ConfigurationParser.invalidVariableReference', 'Error: Invalid problemMatcher reference: {0}\\n', value)] };\n\t\t} else {\n\t\t\tconst json = <ProblemMatcherConfig.ProblemMatcher>value;\n\t\t\treturn { value: new ProblemMatcherParser(context.problemReporter).parse(json) };\n\t\t}\n\t}\n}\n\nexport namespace GroupKind {\n\texport function from(this: void, external: string | IGroupKind | undefined): Tasks.TaskGroup | undefined {\n\t\tif (external === undefined) {\n\t\t\treturn undefined;\n\t\t} else if (Types.isString(external) && Tasks.TaskGroup.is(external)) {\n\t\t\treturn { _id: external, isDefault: false };\n\t\t} else if (Types.isString(external.kind) && Tasks.TaskGroup.is(external.kind)) {\n\t\t\tconst group: string = external.kind;\n\t\t\tconst isDefault: boolean | string = Types.isUndefined(external.isDefault) ? false : external.isDefault;\n\n\t\t\treturn { _id: group, isDefault };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\texport function to(group: Tasks.TaskGroup | string): IGroupKind | string {\n\t\tif (Types.isString(group)) {\n\t\t\treturn group;\n\t\t} else if (!group.isDefault) {\n\t\t\treturn group._id;\n\t\t}\n\t\treturn {\n\t\t\tkind: group._id,\n\t\t\tisDefault: group.isDefault,\n\t\t};\n\t}\n}\n\nnamespace TaskDependency {\n\tfunction uriFromSource(context: IParseContext, source: TaskConfigSource): URI | string {\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: return Tasks.USER_TASKS_GROUP_KEY;\n\t\t\tcase TaskConfigSource.TasksJson: return context.workspaceFolder.uri;\n\t\t\tdefault: return context.workspace && context.workspace.configuration ? context.workspace.configuration : context.workspaceFolder.uri;\n\t\t}\n\t}\n\n\texport function from(this: void, external: string | ITaskIdentifier, context: IParseContext, source: TaskConfigSource): Tasks.ITaskDependency | undefined {\n\t\tif (Types.isString(external)) {\n\t\t\treturn { uri: uriFromSource(context, source), task: external };\n\t\t} else if (ITaskIdentifier.is(external)) {\n\t\t\treturn {\n\t\t\t\turi: uriFromSource(context, source),\n\t\t\t\ttask: Tasks.TaskDefinition.createTaskIdentifier(external as Tasks.ITaskIdentifier, context.problemReporter)\n\t\t\t};\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nnamespace DependsOrder {\n\texport function from(order: string | undefined): Tasks.DependsOrder {\n\t\tswitch (order) {\n\t\t\tcase Tasks.DependsOrder.sequence:\n\t\t\t\treturn Tasks.DependsOrder.sequence;\n\t\t\tcase Tasks.DependsOrder.parallel:\n\t\t\tdefault:\n\t\t\t\treturn Tasks.DependsOrder.parallel;\n\t\t}\n\t}\n}\n\nnamespace ConfigurationProperties {\n\n\tconst properties: IMetaData<Tasks.IConfigurationProperties, any>[] = [\n\t\t{ property: 'name' },\n\t\t{ property: 'identifier' },\n\t\t{ property: 'group' },\n\t\t{ property: 'isBackground' },\n\t\t{ property: 'promptOnClose' },\n\t\t{ property: 'dependsOn' },\n\t\t{ property: 'presentation', type: CommandConfiguration.PresentationOptions },\n\t\t{ property: 'problemMatchers' },\n\t\t{ property: 'options' },\n\t\t{ property: 'icon' },\n\t\t{ property: 'hide' }\n\t];\n\n\texport function from(this: void, external: IConfigurationProperties & { [key: string]: any }, context: IParseContext,\n\t\tincludeCommandOptions: boolean, source: TaskConfigSource, properties?: IJSONSchemaMap): TaskConfigurationValueWithErrors<Tasks.IConfigurationProperties> {\n\t\tif (!external) {\n\t\t\treturn {};\n\t\t}\n\t\tconst result: Tasks.IConfigurationProperties & { [key: string]: any } = {};\n\n\t\tif (properties) {\n\t\t\tfor (const propertyName of Object.keys(properties)) {\n\t\t\t\tif (external[propertyName] !== undefined) {\n\t\t\t\t\tresult[propertyName] = Objects.deepClone(external[propertyName]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Types.isString(external.taskName)) {\n\t\t\tresult.name = external.taskName;\n\t\t}\n\t\tif (Types.isString(external.label) && context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\tresult.name = external.label;\n\t\t}\n\t\tif (Types.isString(external.identifier)) {\n\t\t\tresult.identifier = external.identifier;\n\t\t}\n\t\tresult.icon = external.icon;\n\t\tresult.hide = external.hide;\n\t\tif (external.isBackground !== undefined) {\n\t\t\tresult.isBackground = !!external.isBackground;\n\t\t}\n\t\tif (external.promptOnClose !== undefined) {\n\t\t\tresult.promptOnClose = !!external.promptOnClose;\n\t\t}\n\t\tresult.group = GroupKind.from(external.group);\n\t\tif (external.dependsOn !== undefined) {\n\t\t\tif (Array.isArray(external.dependsOn)) {\n\t\t\t\tresult.dependsOn = external.dependsOn.reduce((dependencies: Tasks.ITaskDependency[], item): Tasks.ITaskDependency[] => {\n\t\t\t\t\tconst dependency = TaskDependency.from(item, context, source);\n\t\t\t\t\tif (dependency) {\n\t\t\t\t\t\tdependencies.push(dependency);\n\t\t\t\t\t}\n\t\t\t\t\treturn dependencies;\n\t\t\t\t}, []);\n\t\t\t} else {\n\t\t\t\tconst dependsOnValue = TaskDependency.from(external.dependsOn, context, source);\n\t\t\t\tresult.dependsOn = dependsOnValue ? [dependsOnValue] : undefined;\n\t\t\t}\n\t\t}\n\t\tresult.dependsOrder = DependsOrder.from(external.dependsOrder);\n\t\tif (includeCommandOptions && (external.presentation !== undefined || (external as ILegacyCommandProperties).terminal !== undefined)) {\n\t\t\tresult.presentation = CommandConfiguration.PresentationOptions.from(external, context);\n\t\t}\n\t\tif (includeCommandOptions && (external.options !== undefined)) {\n\t\t\tresult.options = CommandOptions.from(external.options, context);\n\t\t}\n\t\tconst configProblemMatcher = ProblemMatcherConverter.fromWithOsConfig(external, context);\n\t\tif (configProblemMatcher.value !== undefined) {\n\t\t\tresult.problemMatchers = configProblemMatcher.value;\n\t\t}\n\t\tif (external.detail) {\n\t\t\tresult.detail = external.detail;\n\t\t}\n\t\treturn isEmpty(result) ? {} : { value: result, errors: configProblemMatcher.errors };\n\t}\n\n\texport function isEmpty(this: void, value: Tasks.IConfigurationProperties): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n}\nconst label = 'Workspace';\n\nnamespace ConfiguringTask {\n\n\tconst grunt = 'grunt.';\n\tconst jake = 'jake.';\n\tconst gulp = 'gulp.';\n\tconst npm = 'vscode.npm.';\n\tconst typescript = 'vscode.typescript.';\n\n\tinterface ICustomizeShape {\n\t\tcustomize: string;\n\t}\n\n\texport function from(this: void, external: IConfiguringTask, context: IParseContext, index: number, source: TaskConfigSource, registry?: Partial<ITaskDefinitionRegistry>): Tasks.ConfiguringTask | undefined {\n\t\tif (!external) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst type = external.type;\n\t\tconst customize = (external as ICustomizeShape).customize;\n\t\tif (!type && !customize) {\n\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.noTaskType', 'Error: tasks configuration must have a type property. The configuration will be ignored.\\n{0}\\n', JSON.stringify(external, null, 4)));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst typeDeclaration = type ? registry?.get?.(type) || TaskDefinitionRegistry.get(type) : undefined;\n\t\tif (!typeDeclaration) {\n\t\t\tconst message = nls.localize('ConfigurationParser.noTypeDefinition', 'Error: there is no registered task type \\'{0}\\'. Did you miss installing an extension that provides a corresponding task provider?', type);\n\t\t\tcontext.problemReporter.error(message);\n\t\t\treturn undefined;\n\t\t}\n\t\tlet identifier: Tasks.ITaskIdentifier | undefined;\n\t\tif (Types.isString(customize)) {\n\t\t\tif (customize.indexOf(grunt) === 0) {\n\t\t\t\tidentifier = { type: 'grunt', task: customize.substring(grunt.length) };\n\t\t\t} else if (customize.indexOf(jake) === 0) {\n\t\t\t\tidentifier = { type: 'jake', task: customize.substring(jake.length) };\n\t\t\t} else if (customize.indexOf(gulp) === 0) {\n\t\t\t\tidentifier = { type: 'gulp', task: customize.substring(gulp.length) };\n\t\t\t} else if (customize.indexOf(npm) === 0) {\n\t\t\t\tidentifier = { type: 'npm', script: customize.substring(npm.length + 4) };\n\t\t\t} else if (customize.indexOf(typescript) === 0) {\n\t\t\t\tidentifier = { type: 'typescript', tsconfig: customize.substring(typescript.length + 6) };\n\t\t\t}\n\t\t} else {\n\t\t\tif (Types.isString(external.type)) {\n\t\t\t\tidentifier = external as Tasks.ITaskIdentifier;\n\t\t\t}\n\t\t}\n\t\tif (identifier === undefined) {\n\t\t\tcontext.problemReporter.error(nls.localize(\n\t\t\t\t'ConfigurationParser.missingType',\n\t\t\t\t'Error: the task configuration \\'{0}\\' is missing the required property \\'type\\'. The task configuration will be ignored.', JSON.stringify(external, undefined, 0)\n\t\t\t));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst taskIdentifier: Tasks.KeyedTaskIdentifier | undefined = Tasks.TaskDefinition.createTaskIdentifier(identifier, context.problemReporter);\n\t\tif (taskIdentifier === undefined) {\n\t\t\tcontext.problemReporter.error(nls.localize(\n\t\t\t\t'ConfigurationParser.incorrectType',\n\t\t\t\t'Error: the task configuration \\'{0}\\' is using an unknown type. The task configuration will be ignored.', JSON.stringify(external, undefined, 0)\n\t\t\t));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst configElement: Tasks.ITaskSourceConfigElement = {\n\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\tfile: '.vscode/tasks.json',\n\t\t\tindex,\n\t\t\telement: external\n\t\t};\n\t\tlet taskSource: Tasks.FileBasedTaskSource;\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: {\n\t\t\t\ttaskSource = { kind: Tasks.TaskSourceKind.User, config: configElement, label };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TaskConfigSource.WorkspaceFile: {\n\t\t\t\ttaskSource = { kind: Tasks.TaskSourceKind.WorkspaceFile, config: configElement, label };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\ttaskSource = { kind: Tasks.TaskSourceKind.Workspace, config: configElement, label };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst result: Tasks.ConfiguringTask = new Tasks.ConfiguringTask(\n\t\t\t`${typeDeclaration.extensionId}.${taskIdentifier._key}`,\n\t\t\ttaskSource,\n\t\t\tundefined,\n\t\t\ttype,\n\t\t\ttaskIdentifier,\n\t\t\tRunOptions.fromConfiguration(external.runOptions),\n\t\t\t{ hide: external.hide }\n\t\t);\n\t\tconst configuration = ConfigurationProperties.from(external, context, true, source, typeDeclaration.properties);\n\t\tresult.addTaskLoadMessages(configuration.errors);\n\t\tif (configuration.value) {\n\t\t\tresult.configurationProperties = Object.assign(result.configurationProperties, configuration.value);\n\t\t\tif (result.configurationProperties.name) {\n\t\t\t\tresult._label = result.configurationProperties.name;\n\t\t\t} else {\n\t\t\t\tlet label = result.configures.type;\n\t\t\t\tif (typeDeclaration.required && typeDeclaration.required.length > 0) {\n\t\t\t\t\tfor (const required of typeDeclaration.required) {\n\t\t\t\t\t\tconst value = result.configures[required];\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tlabel = label + ': ' + value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult._label = label;\n\t\t\t}\n\t\t\tif (!result.configurationProperties.identifier) {\n\t\t\t\tresult.configurationProperties.identifier = taskIdentifier._key;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace CustomTask {\n\texport function from(this: void, external: ICustomTask, context: IParseContext, index: number, source: TaskConfigSource): Tasks.CustomTask | undefined {\n\t\tif (!external) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet type = external.type;\n\t\tif (type === undefined || type === null) {\n\t\t\ttype = Tasks.CUSTOMIZED_TASK_TYPE;\n\t\t}\n\t\tif (type !== Tasks.CUSTOMIZED_TASK_TYPE && type !== 'shell' && type !== 'process') {\n\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.notCustom', 'Error: tasks is not declared as a custom task. The configuration will be ignored.\\n{0}\\n', JSON.stringify(external, null, 4)));\n\t\t\treturn undefined;\n\t\t}\n\t\tlet taskName = external.taskName;\n\t\tif (Types.isString(external.label) && context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\ttaskName = external.label;\n\t\t}\n\t\tif (!taskName) {\n\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.noTaskName', 'Error: a task must provide a label property. The task will be ignored.\\n{0}\\n', JSON.stringify(external, null, 4)));\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet taskSource: Tasks.FileBasedTaskSource;\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: {\n\t\t\t\ttaskSource = { kind: Tasks.TaskSourceKind.User, config: { index, element: external, file: '.vscode/tasks.json', workspaceFolder: context.workspaceFolder }, label };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TaskConfigSource.WorkspaceFile: {\n\t\t\t\ttaskSource = { kind: Tasks.TaskSourceKind.WorkspaceFile, config: { index, element: external, file: '.vscode/tasks.json', workspaceFolder: context.workspaceFolder, workspace: context.workspace }, label };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\ttaskSource = { kind: Tasks.TaskSourceKind.Workspace, config: { index, element: external, file: '.vscode/tasks.json', workspaceFolder: context.workspaceFolder }, label };\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst result: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\tcontext.uuidMap.getUUID(taskName),\n\t\t\ttaskSource,\n\t\t\ttaskName,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t\tRunOptions.fromConfiguration(external.runOptions),\n\t\t\t{\n\t\t\t\tname: taskName,\n\t\t\t\tidentifier: taskName,\n\t\t\t}\n\t\t);\n\t\tconst configuration = ConfigurationProperties.from(external, context, false, source);\n\t\tresult.addTaskLoadMessages(configuration.errors);\n\t\tif (configuration.value) {\n\t\t\tresult.configurationProperties = Object.assign(result.configurationProperties, configuration.value);\n\t\t}\n\t\tconst supportLegacy: boolean = true; //context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\tif (supportLegacy) {\n\t\t\tconst legacy: ILegacyTaskProperties = external as ILegacyTaskProperties;\n\t\t\tif (result.configurationProperties.isBackground === undefined && legacy.isWatching !== undefined) {\n\t\t\t\tresult.configurationProperties.isBackground = !!legacy.isWatching;\n\t\t\t}\n\t\t\tif (result.configurationProperties.group === undefined) {\n\t\t\t\tif (legacy.isBuildCommand === true) {\n\t\t\t\t\tresult.configurationProperties.group = Tasks.TaskGroup.Build;\n\t\t\t\t} else if (legacy.isTestCommand === true) {\n\t\t\t\t\tresult.configurationProperties.group = Tasks.TaskGroup.Test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst command: Tasks.ICommandConfiguration = CommandConfiguration.from(external, context)!;\n\t\tif (command) {\n\t\t\tresult.command = command;\n\t\t}\n\t\tif (external.command !== undefined) {\n\t\t\t// if the task has its own command then we suppress the\n\t\t\t// task name by default.\n\t\t\tcommand.suppressTaskName = true;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function fillGlobals(task: Tasks.CustomTask, globals: IGlobals): void {\n\t\t// We only merge a command from a global definition if there is no dependsOn\n\t\t// or there is a dependsOn and a defined command.\n\t\tif (CommandConfiguration.hasCommand(task.command) || task.configurationProperties.dependsOn === undefined) {\n\t\t\ttask.command = CommandConfiguration.fillGlobals(task.command, globals.command, task.configurationProperties.name);\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers === undefined && globals.problemMatcher !== undefined) {\n\t\t\ttask.configurationProperties.problemMatchers = Objects.deepClone(globals.problemMatcher);\n\t\t\ttask.hasDefinedMatchers = true;\n\t\t}\n\t\t// promptOnClose is inferred from isBackground if available\n\t\tif (task.configurationProperties.promptOnClose === undefined && task.configurationProperties.isBackground === undefined && globals.promptOnClose !== undefined) {\n\t\t\ttask.configurationProperties.promptOnClose = globals.promptOnClose;\n\t\t}\n\t}\n\n\texport function fillDefaults(task: Tasks.CustomTask, context: IParseContext): void {\n\t\tCommandConfiguration.fillDefaults(task.command, context);\n\t\tif (task.configurationProperties.promptOnClose === undefined) {\n\t\t\ttask.configurationProperties.promptOnClose = task.configurationProperties.isBackground !== undefined ? !task.configurationProperties.isBackground : true;\n\t\t}\n\t\tif (task.configurationProperties.isBackground === undefined) {\n\t\t\ttask.configurationProperties.isBackground = false;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers === undefined) {\n\t\t\ttask.configurationProperties.problemMatchers = EMPTY_ARRAY;\n\t\t}\n\t}\n\n\texport function createCustomTask(contributedTask: Tasks.ContributedTask, configuredProps: Tasks.ConfiguringTask | Tasks.CustomTask): Tasks.CustomTask {\n\t\tconst result: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\tconfiguredProps._id,\n\t\t\tObject.assign({}, configuredProps._source, { customizes: contributedTask.defines }),\n\t\t\tconfiguredProps.configurationProperties.name || contributedTask._label,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tcontributedTask.command,\n\t\t\tfalse,\n\t\t\tcontributedTask.runOptions,\n\t\t\t{\n\t\t\t\tname: configuredProps.configurationProperties.name || contributedTask.configurationProperties.name,\n\t\t\t\tidentifier: configuredProps.configurationProperties.identifier || contributedTask.configurationProperties.identifier,\n\t\t\t\ticon: configuredProps.configurationProperties.icon,\n\t\t\t\thide: configuredProps.configurationProperties.hide\n\t\t\t},\n\n\t\t);\n\t\tresult.addTaskLoadMessages(configuredProps.taskLoadMessages);\n\t\tconst resultConfigProps: Tasks.IConfigurationProperties = result.configurationProperties;\n\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'group');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'isBackground');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'dependsOn');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'problemMatchers');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'promptOnClose');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'detail');\n\t\tresult.command.presentation = CommandConfiguration.PresentationOptions.assignProperties(\n\t\t\tresult.command.presentation!, configuredProps.configurationProperties.presentation)!;\n\t\tresult.command.options = CommandOptions.assignProperties(result.command.options, configuredProps.configurationProperties.options);\n\t\tresult.runOptions = RunOptions.assignProperties(result.runOptions, configuredProps.runOptions);\n\n\t\tconst contributedConfigProps: Tasks.IConfigurationProperties = contributedTask.configurationProperties;\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'group');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'isBackground');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'dependsOn');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'problemMatchers');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'promptOnClose');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'detail');\n\t\tresult.command.presentation = CommandConfiguration.PresentationOptions.fillProperties(\n\t\t\tresult.command.presentation, contributedConfigProps.presentation)!;\n\t\tresult.command.options = CommandOptions.fillProperties(result.command.options, contributedConfigProps.options);\n\t\tresult.runOptions = RunOptions.fillProperties(result.runOptions, contributedTask.runOptions);\n\n\t\tif (contributedTask.hasDefinedMatchers === true) {\n\t\t\tresult.hasDefinedMatchers = true;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport interface ITaskParseResult {\n\tcustom: Tasks.CustomTask[];\n\tconfigured: Tasks.ConfiguringTask[];\n}\n\nexport namespace TaskParser {\n\n\tfunction isCustomTask(value: ICustomTask | IConfiguringTask): value is ICustomTask {\n\t\tconst type = value.type;\n\t\tconst customize = (value as any).customize;\n\t\treturn customize === undefined && (type === undefined || type === null || type === Tasks.CUSTOMIZED_TASK_TYPE || type === 'shell' || type === 'process');\n\t}\n\n\tconst builtinTypeContextMap: IStringDictionary<RawContextKey<boolean>> = {\n\t\tshell: ShellExecutionSupportedContext,\n\t\tprocess: ProcessExecutionSupportedContext\n\t};\n\n\texport function from(this: void, externals: Array<ICustomTask | IConfiguringTask> | undefined, globals: IGlobals, context: IParseContext, source: TaskConfigSource, registry?: Partial<ITaskDefinitionRegistry>): ITaskParseResult {\n\t\tconst result: ITaskParseResult = { custom: [], configured: [] };\n\t\tif (!externals) {\n\t\t\treturn result;\n\t\t}\n\t\tconst defaultBuildTask: { task: Tasks.Task | undefined; rank: number } = { task: undefined, rank: -1 };\n\t\tconst defaultTestTask: { task: Tasks.Task | undefined; rank: number } = { task: undefined, rank: -1 };\n\t\tconst schema2_0_0: boolean = context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\tconst baseLoadIssues = Objects.deepClone(context.taskLoadIssues);\n\t\tfor (let index = 0; index < externals.length; index++) {\n\t\t\tconst external = externals[index];\n\t\t\tconst definition = external.type ? registry?.get?.(external.type) || TaskDefinitionRegistry.get(external.type) : undefined;\n\t\t\tlet typeNotSupported: boolean = false;\n\t\t\tif (definition && definition.when && !context.contextKeyService.contextMatchesRules(definition.when)) {\n\t\t\t\ttypeNotSupported = true;\n\t\t\t} else if (!definition && external.type) {\n\t\t\t\tfor (const key of Object.keys(builtinTypeContextMap)) {\n\t\t\t\t\tif (external.type === key) {\n\t\t\t\t\t\ttypeNotSupported = !ShellExecutionSupportedContext.evaluate(context.contextKeyService.getContext(null));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeNotSupported) {\n\t\t\t\tcontext.problemReporter.info(nls.localize(\n\t\t\t\t\t'taskConfiguration.providerUnavailable', 'Warning: {0} tasks are unavailable in the current environment.\\n',\n\t\t\t\t\texternal.type\n\t\t\t\t));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (isCustomTask(external)) {\n\t\t\t\tconst customTask = CustomTask.from(external, context, index, source);\n\t\t\t\tif (customTask) {\n\t\t\t\t\tCustomTask.fillGlobals(customTask, globals);\n\t\t\t\t\tCustomTask.fillDefaults(customTask, context);\n\t\t\t\t\tif (schema2_0_0) {\n\t\t\t\t\t\tif ((customTask.command === undefined || customTask.command.name === undefined) && (customTask.configurationProperties.dependsOn === undefined || customTask.configurationProperties.dependsOn.length === 0)) {\n\t\t\t\t\t\t\tcontext.problemReporter.error(nls.localize(\n\t\t\t\t\t\t\t\t'taskConfiguration.noCommandOrDependsOn', 'Error: the task \\'{0}\\' neither specifies a command nor a dependsOn property. The task will be ignored. Its definition is:\\n{1}',\n\t\t\t\t\t\t\t\tcustomTask.configurationProperties.name, JSON.stringify(external, undefined, 4)\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (customTask.command === undefined || customTask.command.name === undefined) {\n\t\t\t\t\t\t\tcontext.problemReporter.warn(nls.localize(\n\t\t\t\t\t\t\t\t'taskConfiguration.noCommand', 'Error: the task \\'{0}\\' doesn\\'t define a command. The task will be ignored. Its definition is:\\n{1}',\n\t\t\t\t\t\t\t\tcustomTask.configurationProperties.name, JSON.stringify(external, undefined, 4)\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (customTask.configurationProperties.group === Tasks.TaskGroup.Build && defaultBuildTask.rank < 2) {\n\t\t\t\t\t\tdefaultBuildTask.task = customTask;\n\t\t\t\t\t\tdefaultBuildTask.rank = 2;\n\t\t\t\t\t} else if (customTask.configurationProperties.group === Tasks.TaskGroup.Test && defaultTestTask.rank < 2) {\n\t\t\t\t\t\tdefaultTestTask.task = customTask;\n\t\t\t\t\t\tdefaultTestTask.rank = 2;\n\t\t\t\t\t} else if (customTask.configurationProperties.name === 'build' && defaultBuildTask.rank < 1) {\n\t\t\t\t\t\tdefaultBuildTask.task = customTask;\n\t\t\t\t\t\tdefaultBuildTask.rank = 1;\n\t\t\t\t\t} else if (customTask.configurationProperties.name === 'test' && defaultTestTask.rank < 1) {\n\t\t\t\t\t\tdefaultTestTask.task = customTask;\n\t\t\t\t\t\tdefaultTestTask.rank = 1;\n\t\t\t\t\t}\n\t\t\t\t\tcustomTask.addTaskLoadMessages(context.taskLoadIssues);\n\t\t\t\t\tresult.custom.push(customTask);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst configuredTask = ConfiguringTask.from(external, context, index, source, registry);\n\t\t\t\tif (configuredTask) {\n\t\t\t\t\tconfiguredTask.addTaskLoadMessages(context.taskLoadIssues);\n\t\t\t\t\tresult.configured.push(configuredTask);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.taskLoadIssues = Objects.deepClone(baseLoadIssues);\n\t\t}\n\t\t// There is some special logic for tasks with the labels \"build\" and \"test\".\n\t\t// Even if they are not marked as a task group Build or Test, we automagically group them as such.\n\t\t// However, if they are already grouped as Build or Test, we don't need to add this grouping.\n\t\tconst defaultBuildGroupName = Types.isString(defaultBuildTask.task?.configurationProperties.group) ? defaultBuildTask.task?.configurationProperties.group : defaultBuildTask.task?.configurationProperties.group?._id;\n\t\tconst defaultTestTaskGroupName = Types.isString(defaultTestTask.task?.configurationProperties.group) ? defaultTestTask.task?.configurationProperties.group : defaultTestTask.task?.configurationProperties.group?._id;\n\t\tif ((defaultBuildGroupName !== Tasks.TaskGroup.Build._id) && (defaultBuildTask.rank > -1) && (defaultBuildTask.rank < 2) && defaultBuildTask.task) {\n\t\t\tdefaultBuildTask.task.configurationProperties.group = Tasks.TaskGroup.Build;\n\t\t} else if ((defaultTestTaskGroupName !== Tasks.TaskGroup.Test._id) && (defaultTestTask.rank > -1) && (defaultTestTask.rank < 2) && defaultTestTask.task) {\n\t\t\tdefaultTestTask.task.configurationProperties.group = Tasks.TaskGroup.Test;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function assignTasks(target: Tasks.CustomTask[], source: Tasks.CustomTask[]): Tasks.CustomTask[] {\n\t\tif (source === undefined || source.length === 0) {\n\t\t\treturn target;\n\t\t}\n\t\tif (target === undefined || target.length === 0) {\n\t\t\treturn source;\n\t\t}\n\n\t\tif (source) {\n\t\t\t// Tasks are keyed by ID but we need to merge by name\n\t\t\tconst map: IStringDictionary<Tasks.CustomTask> = Object.create(null);\n\t\t\ttarget.forEach((task) => {\n\t\t\t\tmap[task.configurationProperties.name!] = task;\n\t\t\t});\n\n\t\t\tsource.forEach((task) => {\n\t\t\t\tmap[task.configurationProperties.name!] = task;\n\t\t\t});\n\t\t\tconst newTarget: Tasks.CustomTask[] = [];\n\t\t\ttarget.forEach(task => {\n\t\t\t\tnewTarget.push(map[task.configurationProperties.name!]);\n\t\t\t\tdelete map[task.configurationProperties.name!];\n\t\t\t});\n\t\t\tObject.keys(map).forEach(key => newTarget.push(map[key]));\n\t\t\ttarget = newTarget;\n\t\t}\n\t\treturn target;\n\t}\n}\n\nexport interface IGlobals {\n\tcommand?: Tasks.ICommandConfiguration;\n\tproblemMatcher?: ProblemMatcher[];\n\tpromptOnClose?: boolean;\n\tsuppressTaskName?: boolean;\n}\n\nnamespace Globals {\n\n\texport function from(config: IExternalTaskRunnerConfiguration, context: IParseContext): IGlobals {\n\t\tlet result = fromBase(config, context);\n\t\tlet osGlobals: IGlobals | undefined = undefined;\n\t\tif (config.windows && context.platform === Platform.Windows) {\n\t\t\tosGlobals = fromBase(config.windows, context);\n\t\t} else if (config.osx && context.platform === Platform.Mac) {\n\t\t\tosGlobals = fromBase(config.osx, context);\n\t\t} else if (config.linux && context.platform === Platform.Linux) {\n\t\t\tosGlobals = fromBase(config.linux, context);\n\t\t}\n\t\tif (osGlobals) {\n\t\t\tresult = Globals.assignProperties(result, osGlobals);\n\t\t}\n\t\tconst command = CommandConfiguration.from(config, context);\n\t\tif (command) {\n\t\t\tresult.command = command;\n\t\t}\n\t\tGlobals.fillDefaults(result, context);\n\t\tGlobals.freeze(result);\n\t\treturn result;\n\t}\n\n\texport function fromBase(this: void, config: IBaseTaskRunnerConfiguration, context: IParseContext): IGlobals {\n\t\tconst result: IGlobals = {};\n\t\tif (config.suppressTaskName !== undefined) {\n\t\t\tresult.suppressTaskName = !!config.suppressTaskName;\n\t\t}\n\t\tif (config.promptOnClose !== undefined) {\n\t\t\tresult.promptOnClose = !!config.promptOnClose;\n\t\t}\n\t\tif (config.problemMatcher) {\n\t\t\tresult.problemMatcher = ProblemMatcherConverter.from(config.problemMatcher, context).value;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function isEmpty(value: IGlobals): boolean {\n\t\treturn !value || value.command === undefined && value.promptOnClose === undefined && value.suppressTaskName === undefined;\n\t}\n\n\texport function assignProperties(target: IGlobals, source: IGlobals): IGlobals {\n\t\tif (isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, 'promptOnClose');\n\t\tassignProperty(target, source, 'suppressTaskName');\n\t\treturn target;\n\t}\n\n\texport function fillDefaults(value: IGlobals, context: IParseContext): void {\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tCommandConfiguration.fillDefaults(value.command, context);\n\t\tif (value.suppressTaskName === undefined) {\n\t\t\tvalue.suppressTaskName = (context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0);\n\t\t}\n\t\tif (value.promptOnClose === undefined) {\n\t\t\tvalue.promptOnClose = true;\n\t\t}\n\t}\n\n\texport function freeze(value: IGlobals): void {\n\t\tObject.freeze(value);\n\t\tif (value.command) {\n\t\t\tCommandConfiguration.freeze(value.command);\n\t\t}\n\t}\n}\n\nexport namespace ExecutionEngine {\n\n\texport function from(config: IExternalTaskRunnerConfiguration): Tasks.ExecutionEngine {\n\t\tconst runner = config.runner || config._runner;\n\t\tlet result: Tasks.ExecutionEngine | undefined;\n\t\tif (runner) {\n\t\t\tswitch (runner) {\n\t\t\t\tcase 'terminal':\n\t\t\t\t\tresult = Tasks.ExecutionEngine.Terminal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'process':\n\t\t\t\t\tresult = Tasks.ExecutionEngine.Process;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst schemaVersion = JsonSchemaVersion.from(config);\n\t\tif (schemaVersion === Tasks.JsonSchemaVersion.V0_1_0) {\n\t\t\treturn result || Tasks.ExecutionEngine.Process;\n\t\t} else if (schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\treturn Tasks.ExecutionEngine.Terminal;\n\t\t} else {\n\t\t\tthrow new Error('Shouldn\\'t happen.');\n\t\t}\n\t}\n}\n\nexport namespace JsonSchemaVersion {\n\n\tconst _default: Tasks.JsonSchemaVersion = Tasks.JsonSchemaVersion.V2_0_0;\n\n\texport function from(config: IExternalTaskRunnerConfiguration): Tasks.JsonSchemaVersion {\n\t\tconst version = config.version;\n\t\tif (!version) {\n\t\t\treturn _default;\n\t\t}\n\t\tswitch (version) {\n\t\t\tcase '0.1.0':\n\t\t\t\treturn Tasks.JsonSchemaVersion.V0_1_0;\n\t\t\tcase '2.0.0':\n\t\t\t\treturn Tasks.JsonSchemaVersion.V2_0_0;\n\t\t\tdefault:\n\t\t\t\treturn _default;\n\t\t}\n\t}\n}\n\nexport interface IParseResult {\n\tvalidationStatus: ValidationStatus;\n\tcustom: Tasks.CustomTask[];\n\tconfigured: Tasks.ConfiguringTask[];\n\tengine: Tasks.ExecutionEngine;\n}\n\nexport interface IProblemReporter extends IProblemReporterBase {\n}\n\nexport class UUIDMap {\n\n\tprivate last: IStringDictionary<string | string[]> | undefined;\n\tprivate current: IStringDictionary<string | string[]>;\n\n\tconstructor(other?: UUIDMap) {\n\t\tthis.current = Object.create(null);\n\t\tif (other) {\n\t\t\tfor (const key of Object.keys(other.current)) {\n\t\t\t\tconst value = other.current[key];\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthis.current[key] = value.slice();\n\t\t\t\t} else {\n\t\t\t\t\tthis.current[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic start(): void {\n\t\tthis.last = this.current;\n\t\tthis.current = Object.create(null);\n\t}\n\n\tpublic getUUID(identifier: string): string {\n\t\tconst lastValue = this.last ? this.last[identifier] : undefined;\n\t\tlet result: string | undefined = undefined;\n\t\tif (lastValue !== undefined) {\n\t\t\tif (Array.isArray(lastValue)) {\n\t\t\t\tresult = lastValue.shift();\n\t\t\t\tif (lastValue.length === 0) {\n\t\t\t\t\tdelete this.last![identifier];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = lastValue;\n\t\t\t\tdelete this.last![identifier];\n\t\t\t}\n\t\t}\n\t\tif (result === undefined) {\n\t\t\tresult = UUID.generateUuid();\n\t\t}\n\t\tconst currentValue = this.current[identifier];\n\t\tif (currentValue === undefined) {\n\t\t\tthis.current[identifier] = result;\n\t\t} else {\n\t\t\tif (Array.isArray(currentValue)) {\n\t\t\t\tcurrentValue.push(result);\n\t\t\t} else {\n\t\t\t\tconst arrayValue: string[] = [currentValue];\n\t\t\t\tarrayValue.push(result);\n\t\t\t\tthis.current[identifier] = arrayValue;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic finish(): void {\n\t\tthis.last = undefined;\n\t}\n}\n\nexport enum TaskConfigSource {\n\tTasksJson,\n\tWorkspaceFile,\n\tUser\n}\n\nclass ConfigurationParser {\n\n\tprivate workspaceFolder: IWorkspaceFolder;\n\tprivate workspace: IWorkspace | undefined;\n\tprivate problemReporter: IProblemReporter;\n\tprivate uuidMap: UUIDMap;\n\tprivate platform: Platform;\n\n\tconstructor(workspaceFolder: IWorkspaceFolder, workspace: IWorkspace | undefined, platform: Platform, problemReporter: IProblemReporter, uuidMap: UUIDMap) {\n\t\tthis.workspaceFolder = workspaceFolder;\n\t\tthis.workspace = workspace;\n\t\tthis.platform = platform;\n\t\tthis.problemReporter = problemReporter;\n\t\tthis.uuidMap = uuidMap;\n\t}\n\n\tpublic run(fileConfig: IExternalTaskRunnerConfiguration, source: TaskConfigSource, contextKeyService: IContextKeyService): IParseResult {\n\t\tconst engine = ExecutionEngine.from(fileConfig);\n\t\tconst schemaVersion = JsonSchemaVersion.from(fileConfig);\n\t\tconst context: IParseContext = {\n\t\t\tworkspaceFolder: this.workspaceFolder,\n\t\t\tworkspace: this.workspace,\n\t\t\tproblemReporter: this.problemReporter,\n\t\t\tuuidMap: this.uuidMap,\n\t\t\tnamedProblemMatchers: {},\n\t\t\tengine,\n\t\t\tschemaVersion,\n\t\t\tplatform: this.platform,\n\t\t\ttaskLoadIssues: [],\n\t\t\tcontextKeyService\n\t\t};\n\t\tconst taskParseResult = this.createTaskRunnerConfiguration(fileConfig, context, source);\n\t\treturn {\n\t\t\tvalidationStatus: this.problemReporter.status,\n\t\t\tcustom: taskParseResult.custom,\n\t\t\tconfigured: taskParseResult.configured,\n\t\t\tengine\n\t\t};\n\t}\n\n\tprivate createTaskRunnerConfiguration(fileConfig: IExternalTaskRunnerConfiguration, context: IParseContext, source: TaskConfigSource): ITaskParseResult {\n\t\tconst globals = Globals.from(fileConfig, context);\n\t\tif (this.problemReporter.status.isFatal()) {\n\t\t\treturn { custom: [], configured: [] };\n\t\t}\n\t\tcontext.namedProblemMatchers = ProblemMatcherConverter.namedFrom(fileConfig.declares, context);\n\t\tlet globalTasks: Tasks.CustomTask[] | undefined = undefined;\n\t\tlet externalGlobalTasks: Array<IConfiguringTask | ICustomTask> | undefined = undefined;\n\t\tif (fileConfig.windows && context.platform === Platform.Windows) {\n\t\t\tglobalTasks = TaskParser.from(fileConfig.windows.tasks, globals, context, source).custom;\n\t\t\texternalGlobalTasks = fileConfig.windows.tasks;\n\t\t} else if (fileConfig.osx && context.platform === Platform.Mac) {\n\t\t\tglobalTasks = TaskParser.from(fileConfig.osx.tasks, globals, context, source).custom;\n\t\t\texternalGlobalTasks = fileConfig.osx.tasks;\n\t\t} else if (fileConfig.linux && context.platform === Platform.Linux) {\n\t\t\tglobalTasks = TaskParser.from(fileConfig.linux.tasks, globals, context, source).custom;\n\t\t\texternalGlobalTasks = fileConfig.linux.tasks;\n\t\t}\n\t\tif (context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0 && globalTasks && globalTasks.length > 0 && externalGlobalTasks && externalGlobalTasks.length > 0) {\n\t\t\tconst taskContent: string[] = [];\n\t\t\tfor (const task of externalGlobalTasks) {\n\t\t\t\ttaskContent.push(JSON.stringify(task, null, 4));\n\t\t\t}\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'TaskParse.noOsSpecificGlobalTasks', comment: ['\\\"Task version 2.0.0\\\" refers to the 2.0.0 version of the task system. The \\\"version 2.0.0\\\" is not localizable as it is a json key and value.'] },\n\t\t\t\t\t'Task version 2.0.0 doesn\\'t support global OS specific tasks. Convert them to a task with a OS specific command. Affected tasks are:\\n{0}', taskContent.join('\\n'))\n\t\t\t);\n\t\t}\n\n\t\tlet result: ITaskParseResult = { custom: [], configured: [] };\n\t\tif (fileConfig.tasks) {\n\t\t\tresult = TaskParser.from(fileConfig.tasks, globals, context, source);\n\t\t}\n\t\tif (globalTasks) {\n\t\t\tresult.custom = TaskParser.assignTasks(result.custom, globalTasks);\n\t\t}\n\n\t\tif ((!result.custom || result.custom.length === 0) && (globals.command && globals.command.name)) {\n\t\t\tconst matchers: ProblemMatcher[] = ProblemMatcherConverter.from(fileConfig.problemMatcher, context).value ?? [];\n\t\t\tconst isBackground = fileConfig.isBackground ? !!fileConfig.isBackground : fileConfig.isWatching ? !!fileConfig.isWatching : undefined;\n\t\t\tconst name = Tasks.CommandString.value(globals.command.name);\n\t\t\tconst task: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\t\tcontext.uuidMap.getUUID(name),\n\t\t\t\tObject.assign({}, source, 'workspace', { config: { index: -1, element: fileConfig, workspaceFolder: context.workspaceFolder } }) satisfies Tasks.IWorkspaceTaskSource,\n\t\t\t\tname,\n\t\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\t\t{\n\t\t\t\t\tname: undefined,\n\t\t\t\t\truntime: undefined,\n\t\t\t\t\tpresentation: undefined,\n\t\t\t\t\tsuppressTaskName: true\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tname: name,\n\t\t\t\t\tidentifier: name,\n\t\t\t\t\tgroup: Tasks.TaskGroup.Build,\n\t\t\t\t\tisBackground: isBackground,\n\t\t\t\t\tproblemMatchers: matchers\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst taskGroupKind = GroupKind.from(fileConfig.group);\n\t\t\tif (taskGroupKind !== undefined) {\n\t\t\t\ttask.configurationProperties.group = taskGroupKind;\n\t\t\t} else if (fileConfig.group === 'none') {\n\t\t\t\ttask.configurationProperties.group = undefined;\n\t\t\t}\n\t\t\tCustomTask.fillGlobals(task, globals);\n\t\t\tCustomTask.fillDefaults(task, context);\n\t\t\tresult.custom = [task];\n\t\t}\n\t\tresult.custom = result.custom || [];\n\t\tresult.configured = result.configured || [];\n\t\treturn result;\n\t}\n}\n\nconst uuidMaps: Map<TaskConfigSource, Map<string, UUIDMap>> = new Map();\nconst recentUuidMaps: Map<TaskConfigSource, Map<string, UUIDMap>> = new Map();\nexport function parse(workspaceFolder: IWorkspaceFolder, workspace: IWorkspace | undefined, platform: Platform, configuration: IExternalTaskRunnerConfiguration, logger: IProblemReporter, source: TaskConfigSource, contextKeyService: IContextKeyService, isRecents: boolean = false): IParseResult {\n\tconst recentOrOtherMaps = isRecents ? recentUuidMaps : uuidMaps;\n\tlet selectedUuidMaps = recentOrOtherMaps.get(source);\n\tif (!selectedUuidMaps) {\n\t\trecentOrOtherMaps.set(source, new Map());\n\t\tselectedUuidMaps = recentOrOtherMaps.get(source)!;\n\t}\n\tlet uuidMap = selectedUuidMaps.get(workspaceFolder.uri.toString());\n\tif (!uuidMap) {\n\t\tuuidMap = new UUIDMap();\n\t\tselectedUuidMaps.set(workspaceFolder.uri.toString(), uuidMap);\n\t}\n\ttry {\n\t\tuuidMap.start();\n\t\treturn (new ConfigurationParser(workspaceFolder, workspace, platform, logger, uuidMap)).run(configuration, source, contextKeyService);\n\t} finally {\n\t\tuuidMap.finish();\n\t}\n}\n\n\n\nexport function createCustomTask(contributedTask: Tasks.ContributedTask, configuredProps: Tasks.ConfiguringTask | Tasks.CustomTask): Tasks.CustomTask {\n\treturn CustomTask.createCustomTask(contributedTask, configuredProps);\n}\n"],
  "mappings": "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",
  "names": ["ShellQuoting", "ITaskIdentifier", "CommandString", "value", "ProblemMatcherKind", "RunOnOptions", "RunOptions", "ShellConfiguration", "CommandOptions", "CommandConfiguration", "PresentationOptions", "properties", "from", "assignProperties", "fillProperties", "fillDefaults", "freeze", "isEmpty", "ShellString", "ProblemMatcherConverter", "GroupKind", "TaskDependency", "DependsOrder", "ConfigurationProperties", "ConfiguringTask", "label", "CustomTask", "createCustomTask", "TaskParser", "Globals", "ExecutionEngine", "JsonSchemaVersion", "TaskConfigSource"]
}
