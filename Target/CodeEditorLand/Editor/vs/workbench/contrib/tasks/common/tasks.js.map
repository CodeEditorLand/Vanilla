{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/tasks.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as Types from '../../../../base/common/types.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { IJSONSchemaMap } from '../../../../base/common/jsonSchema.js';\nimport * as Objects from '../../../../base/common/objects.js';\nimport { UriComponents, URI } from '../../../../base/common/uri.js';\n\nimport { ProblemMatcher } from './problemMatcher.js';\nimport { IWorkspaceFolder, IWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport { RawContextKey, ContextKeyExpression } from '../../../../platform/contextkey/common/contextkey.js';\nimport { TaskDefinitionRegistry } from './taskDefinitionRegistry.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { ConfigurationTarget } from '../../../../platform/configuration/common/configuration.js';\nimport { TerminalExitReason } from '../../../../platform/terminal/common/terminal.js';\n\n\n\nexport const USER_TASKS_GROUP_KEY = 'settings';\n\nexport const TASK_RUNNING_STATE = new RawContextKey<boolean>('taskRunning', false, nls.localize('tasks.taskRunningContext', \"Whether a task is currently running.\"));\nexport const TASKS_CATEGORY = nls.localize2('tasksCategory', \"Tasks\");\n\nexport enum ShellQuoting {\n\t/**\n\t * Use character escaping.\n\t */\n\tEscape = 1,\n\n\t/**\n\t * Use strong quoting\n\t */\n\tStrong = 2,\n\n\t/**\n\t * Use weak quoting.\n\t */\n\tWeak = 3,\n}\n\nexport const CUSTOMIZED_TASK_TYPE = '$customized';\n\nexport namespace ShellQuoting {\n\texport function from(this: void, value: string): ShellQuoting {\n\t\tif (!value) {\n\t\t\treturn ShellQuoting.Strong;\n\t\t}\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'escape':\n\t\t\t\treturn ShellQuoting.Escape;\n\t\t\tcase 'strong':\n\t\t\t\treturn ShellQuoting.Strong;\n\t\t\tcase 'weak':\n\t\t\t\treturn ShellQuoting.Weak;\n\t\t\tdefault:\n\t\t\t\treturn ShellQuoting.Strong;\n\t\t}\n\t}\n}\n\nexport interface IShellQuotingOptions {\n\t/**\n\t * The character used to do character escaping.\n\t */\n\tescape?: string | {\n\t\tescapeChar: string;\n\t\tcharsToEscape: string;\n\t};\n\n\t/**\n\t * The character used for string quoting.\n\t */\n\tstrong?: string;\n\n\t/**\n\t * The character used for weak quoting.\n\t */\n\tweak?: string;\n}\n\nexport interface IShellConfiguration {\n\t/**\n\t * The shell executable.\n\t */\n\texecutable?: string;\n\n\t/**\n\t * The arguments to be passed to the shell executable.\n\t */\n\targs?: string[];\n\n\t/**\n\t * Which kind of quotes the shell supports.\n\t */\n\tquoting?: IShellQuotingOptions;\n}\n\nexport interface CommandOptions {\n\n\t/**\n\t * The shell to use if the task is a shell command.\n\t */\n\tshell?: IShellConfiguration;\n\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: { [key: string]: string };\n}\n\nexport namespace CommandOptions {\n\texport const defaults: CommandOptions = { cwd: '${workspaceFolder}' };\n}\n\nexport enum RevealKind {\n\t/**\n\t * Always brings the terminal to front if the task is executed.\n\t */\n\tAlways = 1,\n\n\t/**\n\t * Only brings the terminal to front if a problem is detected executing the task\n\t * e.g. the task couldn't be started,\n\t * the task ended with an exit code other than zero,\n\t * or the problem matcher found an error.\n\t */\n\tSilent = 2,\n\n\t/**\n\t * The terminal never comes to front when the task is executed.\n\t */\n\tNever = 3\n}\n\nexport namespace RevealKind {\n\texport function fromString(this: void, value: string): RevealKind {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'always':\n\t\t\t\treturn RevealKind.Always;\n\t\t\tcase 'silent':\n\t\t\t\treturn RevealKind.Silent;\n\t\t\tcase 'never':\n\t\t\t\treturn RevealKind.Never;\n\t\t\tdefault:\n\t\t\t\treturn RevealKind.Always;\n\t\t}\n\t}\n}\n\nexport enum RevealProblemKind {\n\t/**\n\t * Never reveals the problems panel when this task is executed.\n\t */\n\tNever = 1,\n\n\n\t/**\n\t * Only reveals the problems panel if a problem is found.\n\t */\n\tOnProblem = 2,\n\n\t/**\n\t * Never reveals the problems panel when this task is executed.\n\t */\n\tAlways = 3\n}\n\nexport namespace RevealProblemKind {\n\texport function fromString(this: void, value: string): RevealProblemKind {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'always':\n\t\t\t\treturn RevealProblemKind.Always;\n\t\t\tcase 'never':\n\t\t\t\treturn RevealProblemKind.Never;\n\t\t\tcase 'onproblem':\n\t\t\t\treturn RevealProblemKind.OnProblem;\n\t\t\tdefault:\n\t\t\t\treturn RevealProblemKind.OnProblem;\n\t\t}\n\t}\n}\n\nexport enum PanelKind {\n\n\t/**\n\t * Shares a panel with other tasks. This is the default.\n\t */\n\tShared = 1,\n\n\t/**\n\t * Uses a dedicated panel for this tasks. The panel is not\n\t * shared with other tasks.\n\t */\n\tDedicated = 2,\n\n\t/**\n\t * Creates a new panel whenever this task is executed.\n\t */\n\tNew = 3\n}\n\nexport namespace PanelKind {\n\texport function fromString(value: string): PanelKind {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'shared':\n\t\t\t\treturn PanelKind.Shared;\n\t\t\tcase 'dedicated':\n\t\t\t\treturn PanelKind.Dedicated;\n\t\t\tcase 'new':\n\t\t\t\treturn PanelKind.New;\n\t\t\tdefault:\n\t\t\t\treturn PanelKind.Shared;\n\t\t}\n\t}\n}\n\nexport interface IPresentationOptions {\n\t/**\n\t * Controls whether the task output is reveal in the user interface.\n\t * Defaults to `RevealKind.Always`.\n\t */\n\treveal: RevealKind;\n\n\t/**\n\t * Controls whether the problems pane is revealed when running this task or not.\n\t * Defaults to `RevealProblemKind.Never`.\n\t */\n\trevealProblems: RevealProblemKind;\n\n\t/**\n\t * Controls whether the command associated with the task is echoed\n\t * in the user interface.\n\t */\n\techo: boolean;\n\n\t/**\n\t * Controls whether the panel showing the task output is taking focus.\n\t */\n\tfocus: boolean;\n\n\t/**\n\t * Controls if the task panel is used for this task only (dedicated),\n\t * shared between tasks (shared) or if a new panel is created on\n\t * every task execution (new). Defaults to `TaskInstanceKind.Shared`\n\t */\n\tpanel: PanelKind;\n\n\t/**\n\t * Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.\n\t */\n\tshowReuseMessage: boolean;\n\n\t/**\n\t * Controls whether to clear the terminal before executing the task.\n\t */\n\tclear: boolean;\n\n\t/**\n\t * Controls whether the task is executed in a specific terminal group using split panes.\n\t */\n\tgroup?: string;\n\n\t/**\n\t * Controls whether the terminal that the task runs in is closed when the task completes.\n\t */\n\tclose?: boolean;\n}\n\nexport namespace PresentationOptions {\n\texport const defaults: IPresentationOptions = {\n\t\techo: true, reveal: RevealKind.Always, revealProblems: RevealProblemKind.Never, focus: false, panel: PanelKind.Shared, showReuseMessage: true, clear: false\n\t};\n}\n\nexport enum RuntimeType {\n\tShell = 1,\n\tProcess = 2,\n\tCustomExecution = 3\n}\n\nexport namespace RuntimeType {\n\texport function fromString(value: string): RuntimeType {\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'shell':\n\t\t\t\treturn RuntimeType.Shell;\n\t\t\tcase 'process':\n\t\t\t\treturn RuntimeType.Process;\n\t\t\tcase 'customExecution':\n\t\t\t\treturn RuntimeType.CustomExecution;\n\t\t\tdefault:\n\t\t\t\treturn RuntimeType.Process;\n\t\t}\n\t}\n\texport function toString(value: RuntimeType): string {\n\t\tswitch (value) {\n\t\t\tcase RuntimeType.Shell: return 'shell';\n\t\t\tcase RuntimeType.Process: return 'process';\n\t\t\tcase RuntimeType.CustomExecution: return 'customExecution';\n\t\t\tdefault: return 'process';\n\t\t}\n\t}\n}\n\nexport interface IQuotedString {\n\tvalue: string;\n\tquoting: ShellQuoting;\n}\n\nexport type CommandString = string | IQuotedString;\n\nexport namespace CommandString {\n\texport function value(value: CommandString): string {\n\t\tif (Types.isString(value)) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\treturn value.value;\n\t\t}\n\t}\n}\n\nexport interface ICommandConfiguration {\n\n\t/**\n\t * The task type\n\t */\n\truntime?: RuntimeType;\n\n\t/**\n\t * The command to execute\n\t */\n\tname?: CommandString;\n\n\t/**\n\t * Additional command options.\n\t */\n\toptions?: CommandOptions;\n\n\t/**\n\t * Command arguments.\n\t */\n\targs?: CommandString[];\n\n\t/**\n\t * The task selector if needed.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * Whether to suppress the task name when merging global args\n\t *\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Describes how the task is presented in the UI.\n\t */\n\tpresentation?: IPresentationOptions;\n}\n\nexport namespace TaskGroup {\n\texport const Clean: TaskGroup = { _id: 'clean', isDefault: false };\n\n\texport const Build: TaskGroup = { _id: 'build', isDefault: false };\n\n\texport const Rebuild: TaskGroup = { _id: 'rebuild', isDefault: false };\n\n\texport const Test: TaskGroup = { _id: 'test', isDefault: false };\n\n\texport function is(value: any): value is string {\n\t\treturn value === Clean._id || value === Build._id || value === Rebuild._id || value === Test._id;\n\t}\n\n\texport function from(value: string | TaskGroup | undefined): TaskGroup | undefined {\n\t\tif (value === undefined) {\n\t\t\treturn undefined;\n\t\t} else if (Types.isString(value)) {\n\t\t\tif (is(value)) {\n\t\t\t\treturn { _id: value, isDefault: false };\n\t\t\t}\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n}\n\nexport interface TaskGroup {\n\t_id: string;\n\tisDefault?: boolean | string;\n}\n\nexport const enum TaskScope {\n\tGlobal = 1,\n\tWorkspace = 2,\n\tFolder = 3\n}\n\nexport namespace TaskSourceKind {\n\texport const Workspace: 'workspace' = 'workspace';\n\texport const Extension: 'extension' = 'extension';\n\texport const InMemory: 'inMemory' = 'inMemory';\n\texport const WorkspaceFile: 'workspaceFile' = 'workspaceFile';\n\texport const User: 'user' = 'user';\n\n\texport function toConfigurationTarget(kind: string): ConfigurationTarget {\n\t\tswitch (kind) {\n\t\t\tcase TaskSourceKind.User: return ConfigurationTarget.USER;\n\t\t\tcase TaskSourceKind.WorkspaceFile: return ConfigurationTarget.WORKSPACE;\n\t\t\tdefault: return ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t}\n\t}\n}\n\nexport interface ITaskSourceConfigElement {\n\tworkspaceFolder?: IWorkspaceFolder;\n\tworkspace?: IWorkspace;\n\tfile: string;\n\tindex: number;\n\telement: any;\n}\n\ninterface IBaseTaskSource {\n\treadonly kind: string;\n\treadonly label: string;\n}\n\nexport interface IWorkspaceTaskSource extends IBaseTaskSource {\n\treadonly kind: 'workspace';\n\treadonly config: ITaskSourceConfigElement;\n\treadonly customizes?: KeyedTaskIdentifier;\n}\n\nexport interface IExtensionTaskSource extends IBaseTaskSource {\n\treadonly kind: 'extension';\n\treadonly extension?: string;\n\treadonly scope: TaskScope;\n\treadonly workspaceFolder: IWorkspaceFolder | undefined;\n}\n\nexport interface IExtensionTaskSourceTransfer {\n\t__workspaceFolder: UriComponents;\n\t__definition: { type: string;[name: string]: any };\n}\n\nexport interface IInMemoryTaskSource extends IBaseTaskSource {\n\treadonly kind: 'inMemory';\n}\n\nexport interface IUserTaskSource extends IBaseTaskSource {\n\treadonly kind: 'user';\n\treadonly config: ITaskSourceConfigElement;\n\treadonly customizes?: KeyedTaskIdentifier;\n}\n\nexport interface WorkspaceFileTaskSource extends IBaseTaskSource {\n\treadonly kind: 'workspaceFile';\n\treadonly config: ITaskSourceConfigElement;\n\treadonly customizes?: KeyedTaskIdentifier;\n}\n\nexport type TaskSource = IWorkspaceTaskSource | IExtensionTaskSource | IInMemoryTaskSource | IUserTaskSource | WorkspaceFileTaskSource;\nexport type FileBasedTaskSource = IWorkspaceTaskSource | IUserTaskSource | WorkspaceFileTaskSource;\nexport interface ITaskIdentifier {\n\ttype: string;\n\t[name: string]: any;\n}\n\nexport interface KeyedTaskIdentifier extends ITaskIdentifier {\n\t_key: string;\n}\n\nexport interface ITaskDependency {\n\turi: URI | string;\n\ttask: string | KeyedTaskIdentifier | undefined;\n}\n\nexport const enum DependsOrder {\n\tparallel = 'parallel',\n\tsequence = 'sequence'\n}\n\nexport interface IConfigurationProperties {\n\n\t/**\n\t * The task's name\n\t */\n\tname?: string;\n\n\t/**\n\t * The task's name\n\t */\n\tidentifier?: string;\n\n\t/**\n\t * The task's group;\n\t */\n\tgroup?: string | TaskGroup;\n\n\t/**\n\t * The presentation options\n\t */\n\tpresentation?: IPresentationOptions;\n\n\t/**\n\t * The command options;\n\t */\n\toptions?: CommandOptions;\n\n\t/**\n\t * Whether the task is a background task or not.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * The other tasks this task depends on.\n\t */\n\tdependsOn?: ITaskDependency[];\n\n\t/**\n\t * The order the dependsOn tasks should be executed in.\n\t */\n\tdependsOrder?: DependsOrder;\n\n\t/**\n\t * A description of the task.\n\t */\n\tdetail?: string;\n\n\t/**\n\t * The problem watchers to use for this task\n\t */\n\tproblemMatchers?: Array<string | ProblemMatcher>;\n\n\t/**\n\t * The icon for this task in the terminal tabs list\n\t */\n\ticon?: { id?: string; color?: string };\n\n\t/**\n\t * Do not show this task in the run task quickpick\n\t */\n\thide?: boolean;\n}\n\nexport enum RunOnOptions {\n\tdefault = 1,\n\tfolderOpen = 2\n}\n\nexport interface IRunOptions {\n\treevaluateOnRerun?: boolean;\n\trunOn?: RunOnOptions;\n\tinstanceLimit?: number;\n}\n\nexport namespace RunOptions {\n\texport const defaults: IRunOptions = { reevaluateOnRerun: true, runOn: RunOnOptions.default, instanceLimit: 1 };\n}\n\nexport abstract class CommonTask {\n\n\t/**\n\t * The task's internal id\n\t */\n\treadonly _id: string;\n\n\t/**\n\t * The cached label.\n\t */\n\t_label: string = '';\n\n\ttype?: string;\n\n\trunOptions: IRunOptions;\n\n\tconfigurationProperties: IConfigurationProperties;\n\n\t_source: IBaseTaskSource;\n\n\tprivate _taskLoadMessages: string[] | undefined;\n\n\tprotected constructor(id: string, label: string | undefined, type: string | undefined, runOptions: IRunOptions,\n\t\tconfigurationProperties: IConfigurationProperties, source: IBaseTaskSource) {\n\t\tthis._id = id;\n\t\tif (label) {\n\t\t\tthis._label = label;\n\t\t}\n\t\tif (type) {\n\t\t\tthis.type = type;\n\t\t}\n\t\tthis.runOptions = runOptions;\n\t\tthis.configurationProperties = configurationProperties;\n\t\tthis._source = source;\n\t}\n\n\tpublic getDefinition(useSource?: boolean): KeyedTaskIdentifier | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic getMapKey(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic getKey(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tprotected abstract getFolderId(): string | undefined;\n\n\tpublic getCommonTaskId(): string {\n\t\tinterface IRecentTaskKey {\n\t\t\tfolder: string | undefined;\n\t\t\tid: string;\n\t\t}\n\n\t\tconst key: IRecentTaskKey = { folder: this.getFolderId(), id: this._id };\n\t\treturn JSON.stringify(key);\n\t}\n\n\tpublic clone(): Task {\n\t\treturn this.fromObject(Object.assign({}, <any>this));\n\t}\n\n\tprotected abstract fromObject(object: any): Task;\n\n\tpublic getWorkspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic getWorkspaceFileName(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic getTelemetryKind(): string {\n\t\treturn 'unknown';\n\t}\n\n\tpublic matches(key: string | KeyedTaskIdentifier | undefined, compareId: boolean = false): boolean {\n\t\tif (key === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Types.isString(key)) {\n\t\t\treturn key === this._label || key === this.configurationProperties.identifier || (compareId && key === this._id);\n\t\t}\n\t\tconst identifier = this.getDefinition(true);\n\t\treturn identifier !== undefined && identifier._key === key._key;\n\t}\n\n\tpublic getQualifiedLabel(): string {\n\t\tconst workspaceFolder = this.getWorkspaceFolder();\n\t\tif (workspaceFolder) {\n\t\t\treturn `${this._label} (${workspaceFolder.name})`;\n\t\t} else {\n\t\t\treturn this._label;\n\t\t}\n\t}\n\n\tpublic getTaskExecution(): ITaskExecution {\n\t\tconst result: ITaskExecution = {\n\t\t\tid: this._id,\n\t\t\ttask: <any>this\n\t\t};\n\t\treturn result;\n\t}\n\n\tpublic addTaskLoadMessages(messages: string[] | undefined) {\n\t\tif (this._taskLoadMessages === undefined) {\n\t\t\tthis._taskLoadMessages = [];\n\t\t}\n\t\tif (messages) {\n\t\t\tthis._taskLoadMessages = this._taskLoadMessages.concat(messages);\n\t\t}\n\t}\n\n\tget taskLoadMessages(): string[] | undefined {\n\t\treturn this._taskLoadMessages;\n\t}\n}\n\n/**\n * For tasks of type shell or process, this is created upon parse\n * of the tasks.json or workspace file.\n * For ContributedTasks of all other types, this is the result of\n * resolving a ConfiguringTask.\n */\nexport class CustomTask extends CommonTask {\n\n\tdeclare type: '$customized'; // CUSTOMIZED_TASK_TYPE\n\n\tinstance: number | undefined;\n\n\t/**\n\t * Indicated the source of the task (e.g. tasks.json or extension)\n\t */\n\toverride _source: FileBasedTaskSource;\n\n\thasDefinedMatchers: boolean;\n\n\t/**\n\t * The command configuration\n\t */\n\tcommand: ICommandConfiguration = {};\n\n\tpublic constructor(id: string, source: FileBasedTaskSource, label: string, type: string, command: ICommandConfiguration | undefined,\n\t\thasDefinedMatchers: boolean, runOptions: IRunOptions, configurationProperties: IConfigurationProperties) {\n\t\tsuper(id, label, undefined, runOptions, configurationProperties, source);\n\t\tthis._source = source;\n\t\tthis.hasDefinedMatchers = hasDefinedMatchers;\n\t\tif (command) {\n\t\t\tthis.command = command;\n\t\t}\n\t}\n\n\tpublic override clone(): CustomTask {\n\t\treturn new CustomTask(this._id, this._source, this._label, this.type, this.command, this.hasDefinedMatchers, this.runOptions, this.configurationProperties);\n\t}\n\n\tpublic customizes(): KeyedTaskIdentifier | undefined {\n\t\tif (this._source && this._source.customizes) {\n\t\t\treturn this._source.customizes;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic override getDefinition(useSource: boolean = false): KeyedTaskIdentifier {\n\t\tif (useSource && this._source.customizes !== undefined) {\n\t\t\treturn this._source.customizes;\n\t\t} else {\n\t\t\tlet type: string;\n\t\t\tconst commandRuntime = this.command ? this.command.runtime : undefined;\n\t\t\tswitch (commandRuntime) {\n\t\t\t\tcase RuntimeType.Shell:\n\t\t\t\t\ttype = 'shell';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RuntimeType.Process:\n\t\t\t\t\ttype = 'process';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RuntimeType.CustomExecution:\n\t\t\t\t\ttype = 'customExecution';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase undefined:\n\t\t\t\t\ttype = '$composite';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unexpected task runtime');\n\t\t\t}\n\n\t\t\tconst result: KeyedTaskIdentifier = {\n\t\t\t\ttype,\n\t\t\t\t_key: this._id,\n\t\t\t\tid: this._id\n\t\t\t};\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tpublic static is(value: any): value is CustomTask {\n\t\treturn value instanceof CustomTask;\n\t}\n\n\tpublic override getMapKey(): string {\n\t\tconst workspaceFolder = this._source.config.workspaceFolder;\n\t\treturn workspaceFolder ? `${workspaceFolder.uri.toString()}|${this._id}|${this.instance}` : `${this._id}|${this.instance}`;\n\t}\n\n\tprotected getFolderId(): string | undefined {\n\t\treturn this._source.kind === TaskSourceKind.User ? USER_TASKS_GROUP_KEY : this._source.config.workspaceFolder?.uri.toString();\n\t}\n\n\tpublic override getCommonTaskId(): string {\n\t\treturn this._source.customizes ? super.getCommonTaskId() : (this.getKey() ?? super.getCommonTaskId());\n\t}\n\n\t/**\n\t * @returns A key representing the task\n\t */\n\tpublic override getKey(): string | undefined {\n\t\tinterface ICustomKey {\n\t\t\ttype: string;\n\t\t\tfolder: string;\n\t\t\tid: string;\n\t\t}\n\t\tconst workspaceFolder = this.getFolderId();\n\t\tif (!workspaceFolder) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet id: string = this.configurationProperties.identifier!;\n\t\tif (this._source.kind !== TaskSourceKind.Workspace) {\n\t\t\tid += this._source.kind;\n\t\t}\n\t\tconst key: ICustomKey = { type: CUSTOMIZED_TASK_TYPE, folder: workspaceFolder, id };\n\t\treturn JSON.stringify(key);\n\t}\n\n\tpublic override getWorkspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn this._source.config.workspaceFolder;\n\t}\n\n\tpublic override getWorkspaceFileName(): string | undefined {\n\t\treturn (this._source.config.workspace && this._source.config.workspace.configuration) ? resources.basename(this._source.config.workspace.configuration) : undefined;\n\t}\n\n\tpublic override getTelemetryKind(): string {\n\t\tif (this._source.customizes) {\n\t\t\treturn 'workspace>extension';\n\t\t} else {\n\t\t\treturn 'workspace';\n\t\t}\n\t}\n\n\tprotected fromObject(object: CustomTask): CustomTask {\n\t\treturn new CustomTask(object._id, object._source, object._label, object.type, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n\t}\n}\n\n/**\n * After a contributed task has been parsed, but before\n * the task has been resolved via the extension, its properties\n * are stored in this\n */\nexport class ConfiguringTask extends CommonTask {\n\n\t/**\n\t * Indicated the source of the task (e.g. tasks.json or extension)\n\t */\n\toverride _source: FileBasedTaskSource;\n\n\tconfigures: KeyedTaskIdentifier;\n\n\tpublic constructor(id: string, source: FileBasedTaskSource, label: string | undefined, type: string | undefined,\n\t\tconfigures: KeyedTaskIdentifier, runOptions: IRunOptions, configurationProperties: IConfigurationProperties) {\n\t\tsuper(id, label, type, runOptions, configurationProperties, source);\n\t\tthis._source = source;\n\t\tthis.configures = configures;\n\t}\n\n\tpublic static is(value: any): value is ConfiguringTask {\n\t\treturn value instanceof ConfiguringTask;\n\t}\n\n\tprotected fromObject(object: any): Task {\n\t\treturn object;\n\t}\n\n\tpublic override getDefinition(): KeyedTaskIdentifier {\n\t\treturn this.configures;\n\t}\n\n\tpublic override getWorkspaceFileName(): string | undefined {\n\t\treturn (this._source.config.workspace && this._source.config.workspace.configuration) ? resources.basename(this._source.config.workspace.configuration) : undefined;\n\t}\n\n\tpublic override getWorkspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn this._source.config.workspaceFolder;\n\t}\n\n\tprotected getFolderId(): string | undefined {\n\t\treturn this._source.kind === TaskSourceKind.User ? USER_TASKS_GROUP_KEY : this._source.config.workspaceFolder?.uri.toString();\n\t}\n\n\tpublic override getKey(): string | undefined {\n\t\tinterface ICustomKey {\n\t\t\ttype: string;\n\t\t\tfolder: string;\n\t\t\tid: string;\n\t\t}\n\t\tconst workspaceFolder = this.getFolderId();\n\t\tif (!workspaceFolder) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet id: string = this.configurationProperties.identifier!;\n\t\tif (this._source.kind !== TaskSourceKind.Workspace) {\n\t\t\tid += this._source.kind;\n\t\t}\n\t\tconst key: ICustomKey = { type: CUSTOMIZED_TASK_TYPE, folder: workspaceFolder, id };\n\t\treturn JSON.stringify(key);\n\t}\n}\n\n/**\n * A task from an extension created via resolveTask or provideTask\n */\nexport class ContributedTask extends CommonTask {\n\n\t/**\n\t * Indicated the source of the task (e.g. tasks.json or extension)\n\t * Set in the super constructor\n\t */\n\tdeclare _source: IExtensionTaskSource;\n\n\tinstance: number | undefined;\n\n\tdefines: KeyedTaskIdentifier;\n\n\thasDefinedMatchers: boolean;\n\n\t/**\n\t * The command configuration\n\t */\n\tcommand: ICommandConfiguration;\n\n\t/**\n\t * The icon for the task\n\t */\n\ticon: { id?: string; color?: string } | undefined;\n\n\t/**\n\t * Don't show the task in the run task quickpick\n\t */\n\thide?: boolean;\n\n\tpublic constructor(id: string, source: IExtensionTaskSource, label: string, type: string | undefined, defines: KeyedTaskIdentifier,\n\t\tcommand: ICommandConfiguration, hasDefinedMatchers: boolean, runOptions: IRunOptions,\n\t\tconfigurationProperties: IConfigurationProperties) {\n\t\tsuper(id, label, type, runOptions, configurationProperties, source);\n\t\tthis.defines = defines;\n\t\tthis.hasDefinedMatchers = hasDefinedMatchers;\n\t\tthis.command = command;\n\t\tthis.icon = configurationProperties.icon;\n\t\tthis.hide = configurationProperties.hide;\n\t}\n\n\tpublic override clone(): ContributedTask {\n\t\treturn new ContributedTask(this._id, this._source, this._label, this.type, this.defines, this.command, this.hasDefinedMatchers, this.runOptions, this.configurationProperties);\n\t}\n\n\tpublic override getDefinition(): KeyedTaskIdentifier {\n\t\treturn this.defines;\n\t}\n\n\tpublic static is(value: any): value is ContributedTask {\n\t\treturn value instanceof ContributedTask;\n\t}\n\n\tpublic override getMapKey(): string {\n\t\tconst workspaceFolder = this._source.workspaceFolder;\n\t\treturn workspaceFolder\n\t\t\t? `${this._source.scope.toString()}|${workspaceFolder.uri.toString()}|${this._id}|${this.instance}`\n\t\t\t: `${this._source.scope.toString()}|${this._id}|${this.instance}`;\n\t}\n\n\tprotected getFolderId(): string | undefined {\n\t\tif (this._source.scope === TaskScope.Folder && this._source.workspaceFolder) {\n\t\t\treturn this._source.workspaceFolder.uri.toString();\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic override getKey(): string | undefined {\n\t\tinterface IContributedKey {\n\t\t\ttype: string;\n\t\t\tscope: number;\n\t\t\tfolder?: string;\n\t\t\tid: string;\n\t\t}\n\n\t\tconst key: IContributedKey = { type: 'contributed', scope: this._source.scope, id: this._id };\n\t\tkey.folder = this.getFolderId();\n\t\treturn JSON.stringify(key);\n\t}\n\n\tpublic override getWorkspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn this._source.workspaceFolder;\n\t}\n\n\tpublic override getTelemetryKind(): string {\n\t\treturn 'extension';\n\t}\n\n\tprotected fromObject(object: ContributedTask): ContributedTask {\n\t\treturn new ContributedTask(object._id, object._source, object._label, object.type, object.defines, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n\t}\n}\n\nexport class InMemoryTask extends CommonTask {\n\t/**\n\t * Indicated the source of the task (e.g. tasks.json or extension)\n\t */\n\toverride _source: IInMemoryTaskSource;\n\n\tinstance: number | undefined;\n\n\tdeclare type: 'inMemory';\n\n\tpublic constructor(id: string, source: IInMemoryTaskSource, label: string, type: string,\n\t\trunOptions: IRunOptions, configurationProperties: IConfigurationProperties) {\n\t\tsuper(id, label, type, runOptions, configurationProperties, source);\n\t\tthis._source = source;\n\t}\n\n\tpublic override clone(): InMemoryTask {\n\t\treturn new InMemoryTask(this._id, this._source, this._label, this.type, this.runOptions, this.configurationProperties);\n\t}\n\n\tpublic static is(value: any): value is InMemoryTask {\n\t\treturn value instanceof InMemoryTask;\n\t}\n\n\tpublic override getTelemetryKind(): string {\n\t\treturn 'composite';\n\t}\n\n\tpublic override getMapKey(): string {\n\t\treturn `${this._id}|${this.instance}`;\n\t}\n\n\tprotected getFolderId(): undefined {\n\t\treturn undefined;\n\t}\n\n\tprotected fromObject(object: InMemoryTask): InMemoryTask {\n\t\treturn new InMemoryTask(object._id, object._source, object._label, object.type, object.runOptions, object.configurationProperties);\n\t}\n}\n\nexport type Task = CustomTask | ContributedTask | InMemoryTask;\n\nexport interface ITaskExecution {\n\tid: string;\n\ttask: Task;\n}\n\nexport enum ExecutionEngine {\n\tProcess = 1,\n\tTerminal = 2\n}\n\nexport namespace ExecutionEngine {\n\texport const _default: ExecutionEngine = ExecutionEngine.Terminal;\n}\n\nexport const enum JsonSchemaVersion {\n\tV0_1_0 = 1,\n\tV2_0_0 = 2\n}\n\nexport interface ITaskSet {\n\ttasks: Task[];\n\textension?: IExtensionDescription;\n}\n\nexport interface ITaskDefinition {\n\textensionId: string;\n\ttaskType: string;\n\trequired: string[];\n\tproperties: IJSONSchemaMap;\n\twhen?: ContextKeyExpression;\n}\n\nexport class TaskSorter {\n\n\tprivate _order: Map<string, number> = new Map();\n\n\tconstructor(workspaceFolders: IWorkspaceFolder[]) {\n\t\tfor (let i = 0; i < workspaceFolders.length; i++) {\n\t\t\tthis._order.set(workspaceFolders[i].uri.toString(), i);\n\t\t}\n\t}\n\n\tpublic compare(a: Task | ConfiguringTask, b: Task | ConfiguringTask): number {\n\t\tconst aw = a.getWorkspaceFolder();\n\t\tconst bw = b.getWorkspaceFolder();\n\t\tif (aw && bw) {\n\t\t\tlet ai = this._order.get(aw.uri.toString());\n\t\t\tai = ai === undefined ? 0 : ai + 1;\n\t\t\tlet bi = this._order.get(bw.uri.toString());\n\t\t\tbi = bi === undefined ? 0 : bi + 1;\n\t\t\tif (ai === bi) {\n\t\t\t\treturn a._label.localeCompare(b._label);\n\t\t\t} else {\n\t\t\t\treturn ai - bi;\n\t\t\t}\n\t\t} else if (!aw && bw) {\n\t\t\treturn -1;\n\t\t} else if (aw && !bw) {\n\t\t\treturn +1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nexport const enum TaskEventKind {\n\tDependsOnStarted = 'dependsOnStarted',\n\tAcquiredInput = 'acquiredInput',\n\tStart = 'start',\n\tProcessStarted = 'processStarted',\n\tActive = 'active',\n\tInactive = 'inactive',\n\tChanged = 'changed',\n\tTerminated = 'terminated',\n\tProcessEnded = 'processEnded',\n\tEnd = 'end'\n}\n\n\nexport const enum TaskRunType {\n\tSingleRun = 'singleRun',\n\tBackground = 'background'\n}\n\nexport interface ITaskChangedEvent {\n\tkind: TaskEventKind.Changed;\n}\n\ninterface ITaskCommon {\n\ttaskId: string;\n\trunType: TaskRunType;\n\ttaskName: string | undefined;\n\tgroup: string | TaskGroup | undefined;\n\t__task: Task;\n}\n\nexport interface ITaskProcessStartedEvent extends ITaskCommon {\n\tkind: TaskEventKind.ProcessStarted;\n\tterminalId: number;\n\tprocessId: number;\n}\n\nexport interface ITaskProcessEndedEvent extends ITaskCommon {\n\tkind: TaskEventKind.ProcessEnded;\n\tterminalId: number | undefined;\n\texitCode?: number;\n}\n\nexport interface ITaskTerminatedEvent extends ITaskCommon {\n\tkind: TaskEventKind.Terminated;\n\tterminalId: number;\n\texitReason: TerminalExitReason | undefined;\n}\n\nexport interface ITaskStartedEvent extends ITaskCommon {\n\tkind: TaskEventKind.Start;\n\tterminalId: number;\n\tresolvedVariables: Map<string, string>;\n}\n\nexport interface ITaskGeneralEvent extends ITaskCommon {\n\tkind: TaskEventKind.AcquiredInput | TaskEventKind.DependsOnStarted | TaskEventKind.Active | TaskEventKind.Inactive | TaskEventKind.End;\n\tterminalId: number | undefined;\n}\n\nexport type ITaskEvent =\n\t| ITaskChangedEvent\n\t| ITaskProcessStartedEvent\n\t| ITaskProcessEndedEvent\n\t| ITaskTerminatedEvent\n\t| ITaskStartedEvent\n\t| ITaskGeneralEvent;\n\nexport const enum TaskRunSource {\n\tSystem,\n\tUser,\n\tFolderOpen,\n\tConfigurationChange,\n\tReconnect\n}\n\nexport namespace TaskEvent {\n\tfunction common(task: Task): ITaskCommon {\n\t\treturn {\n\t\t\ttaskId: task._id,\n\t\t\ttaskName: task.configurationProperties.name,\n\t\t\trunType: task.configurationProperties.isBackground ? TaskRunType.Background : TaskRunType.SingleRun,\n\t\t\tgroup: task.configurationProperties.group,\n\t\t\t__task: task,\n\t\t};\n\t}\n\n\texport function start(task: Task, terminalId: number, resolvedVariables: Map<string, string>): ITaskStartedEvent {\n\t\treturn {\n\t\t\t...common(task),\n\t\t\tkind: TaskEventKind.Start,\n\t\t\tterminalId,\n\t\t\tresolvedVariables,\n\t\t};\n\t}\n\n\texport function processStarted(task: Task, terminalId: number, processId: number): ITaskProcessStartedEvent {\n\t\treturn {\n\t\t\t...common(task),\n\t\t\tkind: TaskEventKind.ProcessStarted,\n\t\t\tterminalId,\n\t\t\tprocessId,\n\t\t};\n\t}\n\texport function processEnded(task: Task, terminalId: number | undefined, exitCode: number | undefined): ITaskProcessEndedEvent {\n\t\treturn {\n\t\t\t...common(task),\n\t\t\tkind: TaskEventKind.ProcessEnded,\n\t\t\tterminalId,\n\t\t\texitCode,\n\t\t};\n\t}\n\n\texport function terminated(task: Task, terminalId: number, exitReason: TerminalExitReason | undefined): ITaskTerminatedEvent {\n\t\treturn {\n\t\t\t...common(task),\n\t\t\tkind: TaskEventKind.Terminated,\n\t\t\texitReason,\n\t\t\tterminalId,\n\t\t};\n\t}\n\n\texport function general(kind: TaskEventKind.AcquiredInput | TaskEventKind.DependsOnStarted | TaskEventKind.Active | TaskEventKind.Inactive | TaskEventKind.End, task: Task, terminalId?: number): ITaskGeneralEvent {\n\t\treturn {\n\t\t\t...common(task),\n\t\t\tkind,\n\t\t\tterminalId,\n\t\t};\n\t}\n\n\texport function changed(): ITaskChangedEvent {\n\t\treturn { kind: TaskEventKind.Changed };\n\t}\n}\n\nexport namespace KeyedTaskIdentifier {\n\tfunction sortedStringify(literal: any): string {\n\t\tconst keys = Object.keys(literal).sort();\n\t\tlet result: string = '';\n\t\tfor (const key of keys) {\n\t\t\tlet stringified = literal[key];\n\t\t\tif (stringified instanceof Object) {\n\t\t\t\tstringified = sortedStringify(stringified);\n\t\t\t} else if (typeof stringified === 'string') {\n\t\t\t\tstringified = stringified.replace(/,/g, ',,');\n\t\t\t}\n\t\t\tresult += key + ',' + stringified + ',';\n\t\t}\n\t\treturn result;\n\t}\n\texport function create(value: ITaskIdentifier): KeyedTaskIdentifier {\n\t\tconst resultKey = sortedStringify(value);\n\t\tconst result = { _key: resultKey, type: value.taskType };\n\t\tObject.assign(result, value);\n\t\treturn result;\n\t}\n}\n\nexport const enum TaskSettingId {\n\tAutoDetect = 'task.autoDetect',\n\tSaveBeforeRun = 'task.saveBeforeRun',\n\tShowDecorations = 'task.showDecorations',\n\tProblemMatchersNeverPrompt = 'task.problemMatchers.neverPrompt',\n\tSlowProviderWarning = 'task.slowProviderWarning',\n\tQuickOpenHistory = 'task.quickOpen.history',\n\tQuickOpenDetail = 'task.quickOpen.detail',\n\tQuickOpenSkip = 'task.quickOpen.skip',\n\tQuickOpenShowAll = 'task.quickOpen.showAll',\n\tAllowAutomaticTasks = 'task.allowAutomaticTasks',\n\tReconnection = 'task.reconnection',\n\tVerboseLogging = 'task.verboseLogging'\n}\n\nexport const enum TasksSchemaProperties {\n\tTasks = 'tasks',\n\tSuppressTaskName = 'tasks.suppressTaskName',\n\tWindows = 'tasks.windows',\n\tOsx = 'tasks.osx',\n\tLinux = 'tasks.linux',\n\tShowOutput = 'tasks.showOutput',\n\tIsShellCommand = 'tasks.isShellCommand',\n\tServiceTestSetting = 'tasks.service.testSetting',\n}\n\nexport namespace TaskDefinition {\n\texport function createTaskIdentifier(external: ITaskIdentifier, reporter: { error(message: string): void }): KeyedTaskIdentifier | undefined {\n\t\tconst definition = TaskDefinitionRegistry.get(external.type);\n\t\tif (definition === undefined) {\n\t\t\t// We have no task definition so we can't sanitize the literal. Take it as is\n\t\t\tconst copy = Objects.deepClone(external);\n\t\t\tdelete copy._key;\n\t\t\treturn KeyedTaskIdentifier.create(copy);\n\t\t}\n\n\t\tconst literal: { type: string;[name: string]: any } = Object.create(null);\n\t\tliteral.type = definition.taskType;\n\t\tconst required: Set<string> = new Set();\n\t\tdefinition.required.forEach(element => required.add(element));\n\n\t\tconst properties = definition.properties;\n\t\tfor (const property of Object.keys(properties)) {\n\t\t\tconst value = external[property];\n\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\tliteral[property] = value;\n\t\t\t} else if (required.has(property)) {\n\t\t\t\tconst schema = properties[property];\n\t\t\t\tif (schema.default !== undefined) {\n\t\t\t\t\tliteral[property] = Objects.deepClone(schema.default);\n\t\t\t\t} else {\n\t\t\t\t\tswitch (schema.type) {\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tliteral[property] = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\t\tliteral[property] = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tliteral[property] = '';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treporter.error(nls.localize(\n\t\t\t\t\t\t\t\t'TaskDefinition.missingRequiredProperty',\n\t\t\t\t\t\t\t\t'Error: the task identifier \\'{0}\\' is missing the required property \\'{1}\\'. The task identifier will be ignored.', JSON.stringify(external, undefined, 0), property\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn KeyedTaskIdentifier.create(literal);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ShellQuoting", "CommandOptions", "RevealKind", "RevealProblemKind", "PanelKind", "PresentationOptions", "RuntimeType", "CommandString", "value", "TaskGroup", "TaskScope", "TaskSourceKind", "DependsOrder", "RunOnOptions", "RunOptions", "ExecutionEngine", "JsonSchemaVersion", "TaskEventKind", "TaskRunType", "TaskRunSource", "TaskEvent", "KeyedTaskIdentifier", "TaskSettingId", "TasksSchemaProperties", "TaskDefinition"]
}
