{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/taskSystem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { TerminateResponse } from '../../../../base/common/processes.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Platform } from '../../../../base/common/platform.js';\nimport { IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { Task, ITaskEvent, KeyedTaskIdentifier } from './tasks.js';\nimport { ConfigurationTarget } from '../../../../platform/configuration/common/configuration.js';\n\nexport const enum TaskErrors {\n\tNotConfigured,\n\tRunningTask,\n\tNoBuildTask,\n\tNoTestTask,\n\tConfigValidationError,\n\tTaskNotFound,\n\tNoValidTaskRunner,\n\tUnknownError\n}\n\nexport class TaskError {\n\tpublic severity: Severity;\n\tpublic message: string;\n\tpublic code: TaskErrors;\n\n\tconstructor(severity: Severity, message: string, code: TaskErrors) {\n\t\tthis.severity = severity;\n\t\tthis.message = message;\n\t\tthis.code = code;\n\t}\n}\n\nexport namespace Triggers {\n\texport const shortcut: string = 'shortcut';\n\texport const command: string = 'command';\n\texport const reconnect: string = 'reconnect';\n}\n\nexport interface ITaskSummary {\n\t/**\n\t * Exit code of the process.\n\t */\n\texitCode?: number;\n}\n\nexport const enum TaskExecuteKind {\n\tStarted = 1,\n\tActive = 2\n}\n\nexport interface ITaskExecuteResult {\n\tkind: TaskExecuteKind;\n\tpromise: Promise<ITaskSummary>;\n\ttask: Task;\n\tstarted?: {\n\t\trestartOnFileChanges?: string;\n\t};\n\tactive?: {\n\t\tsame: boolean;\n\t\tbackground: boolean;\n\t};\n}\n\nexport interface ITaskResolver {\n\tresolve(uri: URI | string, identifier: string | KeyedTaskIdentifier | undefined): Promise<Task | undefined>;\n}\n\nexport interface ITaskTerminateResponse extends TerminateResponse {\n\ttask: Task | undefined;\n}\n\nexport interface IResolveSet {\n\tprocess?: {\n\t\tname: string;\n\t\tcwd?: string;\n\t\tpath?: string;\n\t};\n\tvariables: Set<string>;\n}\n\nexport interface IResolvedVariables {\n\tprocess?: string;\n\tvariables: Map<string, string>;\n}\n\nexport interface ITaskSystemInfo {\n\tplatform: Platform;\n\tcontext: any;\n\turiProvider: (this: void, path: string) => URI;\n\tresolveVariables(workspaceFolder: IWorkspaceFolder, toResolve: IResolveSet, target: ConfigurationTarget): Promise<IResolvedVariables | undefined>;\n\tfindExecutable(command: string, cwd?: string, paths?: string[]): Promise<string | undefined>;\n}\n\nexport interface ITaskSystemInfoResolver {\n\t(workspaceFolder: IWorkspaceFolder | undefined): ITaskSystemInfo | undefined;\n}\n\nexport interface ITaskSystem {\n\tonDidStateChange: Event<ITaskEvent>;\n\treconnect(task: Task, resolver: ITaskResolver): ITaskExecuteResult;\n\trun(task: Task, resolver: ITaskResolver): ITaskExecuteResult;\n\trerun(): ITaskExecuteResult | undefined;\n\tisActive(): Promise<boolean>;\n\tisActiveSync(): boolean;\n\tgetActiveTasks(): Task[];\n\tgetLastInstance(task: Task): Task | undefined;\n\tgetBusyTasks(): Task[];\n\tcanAutoTerminate(): boolean;\n\tterminate(task: Task): Promise<ITaskTerminateResponse>;\n\tterminateAll(): Promise<ITaskTerminateResponse[]>;\n\trevealTask(task: Task): boolean;\n\tcustomExecutionComplete(task: Task, result: number): Promise<void>;\n\tisTaskVisible(task: Task): boolean;\n}\n"],
  "mappings": ";;AAKA,SAAS,WAAW;AACpB,OAAO,cAAc;AACrB,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,wBAAwB;AACjC,SAAS,MAAM,YAAY,2BAA2B;AACtD,SAAS,2BAA2B;AAE7B,IAAW,aAAX,kBAAWA,gBAAX;AACN,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AARiB,SAAAA;AAAA,GAAA;AAWX,MAAM,UAAU;AAAA,EAzBvB,OAyBuB;AAAA;AAAA;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EAEP,YAAY,UAAoB,SAAiB,MAAkB;AAClE,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,OAAO;AAAA,EACb;AACD;AAEO,IAAU;AAAA,CAAV,CAAUC,cAAV;AACC,EAAMA,UAAA,WAAmB;AACzB,EAAMA,UAAA,UAAkB;AACxB,EAAMA,UAAA,YAAoB;AAAA,GAHjB;AAaV,IAAW,kBAAX,kBAAWC,qBAAX;AACN,EAAAA,kCAAA,aAAU,KAAV;AACA,EAAAA,kCAAA,YAAS,KAAT;AAFiB,SAAAA;AAAA,GAAA;",
  "names": ["TaskErrors", "Triggers", "TaskExecuteKind"]
}
