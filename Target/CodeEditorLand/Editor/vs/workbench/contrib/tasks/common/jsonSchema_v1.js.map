{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as Objects from '../../../../base/common/objects.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\n\nimport { ProblemMatcherRegistry } from './problemMatcher.js';\n\nimport commonSchema from './jsonSchemaCommon.js';\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\tallOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['version'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tenum: ['0.1.0'],\n\t\t\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema.version.deprecated', 'Task version 0.1.0 is deprecated. Please use 2.0.0'),\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.version', 'The config\\'s version number')\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_runner: {\n\t\t\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema._runner', 'The runner has graduated. Use the official runner property')\n\t\t\t\t\t\t},\n\t\t\t\t\t\trunner: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tenum: ['process', 'terminal'],\n\t\t\t\t\t\t\tdefault: 'process',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.runner', 'Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.')\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nconst shellCommand: IJSONSchema = {\n\ttype: 'boolean',\n\tdefault: true,\n\tdescription: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n};\n\nschema.definitions = Objects.deepClone(commonSchema.definitions);\nconst definitions = schema.definitions!;\ndefinitions['commandConfiguration']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskDescription']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskRunnerConfiguration']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\n\nObject.getOwnPropertyNames(definitions).forEach(key => {\n\tconst newKey = key + '1';\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n});\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === 'object') {\n\t\tif (literal['$ref']) {\n\t\t\tliteral['$ref'] = literal['$ref'] + '1';\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach(property => {\n\t\t\tconst value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === 'object') {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\nfixReferences(schema);\n\nProblemMatcherRegistry.onReady().then(() => {\n\ttry {\n\t\tconst matcherIds = ProblemMatcherRegistry.keys().map(key => '$' + key);\n\t\tdefinitions.problemMatcherType1.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType1.oneOf![2].items as IJSONSchema).anyOf![1].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log('Installing problem matcher ids failed');\n\t}\n});\n\nexport default schema;\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,YAAY,aAAa;AACzB,SAAS,mBAAmB;AAE5B,SAAS,8BAA8B;AAEvC,OAAO,kBAAkB;AAEzB,MAAM,SAAsB;AAAA,EAC3B,OAAO;AAAA,IACN;AAAA,MACC,OAAO;AAAA,QACN;AAAA,UACC,MAAM;AAAA,UACN,UAAU,CAAC,SAAS;AAAA,UACpB,YAAY;AAAA,YACX,SAAS;AAAA,cACR,MAAM;AAAA,cACN,MAAM,CAAC,OAAO;AAAA,cACd,oBAAoB,IAAI,SAAS,iCAAiC,oDAAoD;AAAA,cACtH,aAAa,IAAI,SAAS,sBAAsB,6BAA8B;AAAA,YAC/E;AAAA,YACA,SAAS;AAAA,cACR,oBAAoB,IAAI,SAAS,sBAAsB,4DAA4D;AAAA,YACpH;AAAA,YACA,QAAQ;AAAA,cACP,MAAM;AAAA,cACN,MAAM,CAAC,WAAW,UAAU;AAAA,cAC5B,SAAS;AAAA,cACT,aAAa,IAAI,SAAS,qBAAqB,wHAAwH;AAAA,YACxK;AAAA,YACA,SAAS;AAAA,cACR,MAAM;AAAA,cACN,aAAa,IAAI,SAAS,sBAAsB,wCAAwC;AAAA,YACzF;AAAA,YACA,KAAK;AAAA,cACJ,MAAM;AAAA,cACN,aAAa,IAAI,SAAS,kBAAkB,oCAAoC;AAAA,YACjF;AAAA,YACA,OAAO;AAAA,cACN,MAAM;AAAA,cACN,aAAa,IAAI,SAAS,oBAAoB,sCAAsC;AAAA,YACrF;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,eAA4B;AAAA,EACjC,MAAM;AAAA,EACN,SAAS;AAAA,EACT,aAAa,IAAI,SAAS,oBAAoB,wGAAwG;AACvJ;AAEA,OAAO,cAAc,QAAQ,UAAU,aAAa,WAAW;AAC/D,MAAM,cAAc,OAAO;AAC3B,YAAY,sBAAsB,EAAE,YAAY,EAAG,gBAAgB,IAAI,QAAQ,UAAU,YAAY;AACrG,YAAY,iBAAiB,EAAE,YAAY,EAAG,gBAAgB,IAAI,QAAQ,UAAU,YAAY;AAChG,YAAY,yBAAyB,EAAE,YAAY,EAAG,gBAAgB,IAAI,QAAQ,UAAU,YAAY;AAExG,OAAO,oBAAoB,WAAW,EAAE,QAAQ,SAAO;AACtD,QAAM,SAAS,MAAM;AACrB,cAAY,MAAM,IAAI,YAAY,GAAG;AACrC,SAAO,YAAY,GAAG;AACvB,CAAC;AAED,SAAS,cAAc,SAAc;AACpC,MAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,YAAQ,QAAQ,aAAa;AAAA,EAC9B,WAAW,OAAO,YAAY,UAAU;AACvC,QAAI,QAAQ,MAAM,GAAG;AACpB,cAAQ,MAAM,IAAI,QAAQ,MAAM,IAAI;AAAA,IACrC;AACA,WAAO,oBAAoB,OAAO,EAAE,QAAQ,cAAY;AACvD,YAAM,QAAQ,QAAQ,QAAQ;AAC9B,UAAI,MAAM,QAAQ,KAAK,KAAK,OAAO,UAAU,UAAU;AACtD,sBAAc,KAAK;AAAA,MACpB;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAdS;AAeT,cAAc,MAAM;AAEpB,uBAAuB,QAAQ,EAAE,KAAK,MAAM;AAC3C,MAAI;AACH,UAAM,aAAa,uBAAuB,KAAK,EAAE,IAAI,SAAO,MAAM,GAAG;AACrE,gBAAY,oBAAoB,MAAO,CAAC,EAAE,OAAO;AACjD,IAAC,YAAY,oBAAoB,MAAO,CAAC,EAAE,MAAsB,MAAO,CAAC,EAAE,OAAO;AAAA,EACnF,SAAS,KAAK;AACb,YAAQ,IAAI,uCAAuC;AAAA,EACpD;AACD,CAAC;AAED,IAAO,wBAAQ;",
  "names": []
}
