{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tIJSONSchema,\n\tIJSONSchemaMap,\n} from \"../../../../base/common/jsonSchema.js\";\nimport * as Objects from \"../../../../base/common/objects.js\";\nimport * as nls from \"../../../../nls.js\";\n\nimport commonSchema from \"./jsonSchemaCommon.js\";\n\nimport { getAllCodicons } from \"../../../../base/common/codicons.js\";\nimport { inputsSchema } from \"../../../services/configurationResolver/common/configurationResolverSchema.js\";\nimport * as ConfigurationResolverUtils from \"../../../services/configurationResolver/common/configurationResolverUtils.js\";\nimport { ProblemMatcherRegistry } from \"./problemMatcher.js\";\nimport { TaskDefinitionRegistry } from \"./taskDefinitionRegistry.js\";\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === \"object\") {\n\t\tif (literal[\"$ref\"]) {\n\t\t\tliteral[\"$ref\"] = literal[\"$ref\"] + \"2\";\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach((property) => {\n\t\t\tconst value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst shellCommand: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.shell\",\n\t\t\t\t\"Specifies whether the command is a shell command or an external program. Defaults to false if omitted.\",\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\t$ref: \"#/definitions/shellConfiguration\",\n\t\t},\n\t],\n\tdeprecationMessage: nls.localize(\n\t\t\"JsonSchema.tasks.isShellCommand.deprecated\",\n\t\t\"The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.\",\n\t),\n};\n\nconst hide: IJSONSchema = {\n\ttype: \"boolean\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.hide\",\n\t\t\"Hide this task from the run task quick pick\",\n\t),\n\tdefault: true,\n};\n\nconst taskIdentifier: IJSONSchema = {\n\ttype: \"object\",\n\tadditionalProperties: true,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.dependsOn.identifier\",\n\t\t\t\t\"The task identifier.\",\n\t\t\t),\n\t\t},\n\t},\n};\n\nconst dependsOn: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.dependsOn.string\",\n\t\t\t\t\"Another task this task depends on.\",\n\t\t\t),\n\t\t},\n\t\ttaskIdentifier,\n\t\t{\n\t\t\ttype: \"array\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.dependsOn.array\",\n\t\t\t\t\"The other tasks this task depends on.\",\n\t\t\t),\n\t\t\titems: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\ttaskIdentifier,\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t],\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.dependsOn\",\n\t\t\"Either a string representing another task or an array of other tasks that this task depends on.\",\n\t),\n};\n\nconst dependsOrder: IJSONSchema = {\n\ttype: \"string\",\n\tenum: [\"parallel\", \"sequence\"],\n\tenumDescriptions: [\n\t\tnls.localize(\n\t\t\t\"JsonSchema.tasks.dependsOrder.parallel\",\n\t\t\t\"Run all dependsOn tasks in parallel.\",\n\t\t),\n\t\tnls.localize(\n\t\t\t\"JsonSchema.tasks.dependsOrder.sequence\",\n\t\t\t\"Run all dependsOn tasks in sequence.\",\n\t\t),\n\t],\n\tdefault: \"parallel\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.dependsOrder\",\n\t\t\"Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.\",\n\t),\n};\n\nconst detail: IJSONSchema = {\n\ttype: \"string\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.detail\",\n\t\t\"An optional description of a task that shows in the Run Task quick pick as a detail.\",\n\t),\n};\n\nconst icon: IJSONSchema = {\n\ttype: \"object\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.icon\",\n\t\t\"An optional icon for the task\",\n\t),\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.icon.id\",\n\t\t\t\t\"An optional codicon ID to use\",\n\t\t\t),\n\t\t\ttype: [\"string\", \"null\"],\n\t\t\tenum: Array.from(getAllCodicons(), (icon) => icon.id),\n\t\t\tmarkdownEnumDescriptions: Array.from(\n\t\t\t\tgetAllCodicons(),\n\t\t\t\t(icon) => `$(${icon.id})`,\n\t\t\t),\n\t\t},\n\t\tcolor: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.icon.color\",\n\t\t\t\t\"An optional color of the icon\",\n\t\t\t),\n\t\t\ttype: [\"string\", \"null\"],\n\t\t\tenum: [\n\t\t\t\t\"terminal.ansiBlack\",\n\t\t\t\t\"terminal.ansiRed\",\n\t\t\t\t\"terminal.ansiGreen\",\n\t\t\t\t\"terminal.ansiYellow\",\n\t\t\t\t\"terminal.ansiBlue\",\n\t\t\t\t\"terminal.ansiMagenta\",\n\t\t\t\t\"terminal.ansiCyan\",\n\t\t\t\t\"terminal.ansiWhite\",\n\t\t\t],\n\t\t},\n\t},\n};\n\nconst presentation: IJSONSchema = {\n\ttype: \"object\",\n\tdefault: {\n\t\techo: true,\n\t\treveal: \"always\",\n\t\tfocus: false,\n\t\tpanel: \"shared\",\n\t\tshowReuseMessage: true,\n\t\tclear: false,\n\t},\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.presentation\",\n\t\t\"Configures the panel that is used to present the task's output and reads its input.\",\n\t),\n\tadditionalProperties: false,\n\tproperties: {\n\t\techo: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.echo\",\n\t\t\t\t\"Controls whether the executed command is echoed to the panel. Default is true.\",\n\t\t\t),\n\t\t},\n\t\tfocus: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.focus\",\n\t\t\t\t\"Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.\",\n\t\t\t),\n\t\t},\n\t\trevealProblems: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"always\", \"onProblem\", \"never\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"JsonSchema.tasks.presentation.revealProblems.always\",\n\t\t\t\t\t\"Always reveals the problems panel when this task is executed.\",\n\t\t\t\t),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"JsonSchema.tasks.presentation.revealProblems.onProblem\",\n\t\t\t\t\t\"Only reveals the problems panel if a problem is found.\",\n\t\t\t\t),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"JsonSchema.tasks.presentation.revealProblems.never\",\n\t\t\t\t\t\"Never reveals the problems panel when this task is executed.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"never\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.revealProblems\",\n\t\t\t\t'Controls whether the problems panel is revealed when running this task or not. Takes precedence over option \"reveal\". Default is \"never\".',\n\t\t\t),\n\t\t},\n\t\treveal: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"always\", \"silent\", \"never\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"JsonSchema.tasks.presentation.reveal.always\",\n\t\t\t\t\t\"Always reveals the terminal when this task is executed.\",\n\t\t\t\t),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"JsonSchema.tasks.presentation.reveal.silent\",\n\t\t\t\t\t\"Only reveals the terminal if the task exits with an error or the problem matcher finds an error.\",\n\t\t\t\t),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"JsonSchema.tasks.presentation.reveal.never\",\n\t\t\t\t\t\"Never reveals the terminal when this task is executed.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"always\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.reveal\",\n\t\t\t\t'Controls whether the terminal running the task is revealed or not. May be overridden by option \"revealProblems\". Default is \"always\".',\n\t\t\t),\n\t\t},\n\t\tpanel: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"shared\", \"dedicated\", \"new\"],\n\t\t\tdefault: \"shared\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.instance\",\n\t\t\t\t\"Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.\",\n\t\t\t),\n\t\t},\n\t\tshowReuseMessage: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.showReuseMessage\",\n\t\t\t\t\"Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.\",\n\t\t\t),\n\t\t},\n\t\tclear: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.clear\",\n\t\t\t\t\"Controls whether the terminal is cleared before executing the task.\",\n\t\t\t),\n\t\t},\n\t\tgroup: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.group\",\n\t\t\t\t\"Controls whether the task is executed in a specific terminal group using split panes.\",\n\t\t\t),\n\t\t},\n\t\tclose: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.presentation.close\",\n\t\t\t\t\"Controls whether the terminal the task runs in is closed when the task exits.\",\n\t\t\t),\n\t\t},\n\t},\n};\n\nconst terminal: IJSONSchema = Objects.deepClone(presentation);\nterminal.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.terminal\",\n\t\"The terminal property is deprecated. Use presentation instead\",\n);\n\nconst groupStrings: IJSONSchema = {\n\ttype: \"string\",\n\tenum: [\"build\", \"test\", \"none\"],\n\tenumDescriptions: [\n\t\tnls.localize(\n\t\t\t\"JsonSchema.tasks.group.build\",\n\t\t\t\"Marks the task as a build task accessible through the 'Run Build Task' command.\",\n\t\t),\n\t\tnls.localize(\n\t\t\t\"JsonSchema.tasks.group.test\",\n\t\t\t\"Marks the task as a test task accessible through the 'Run Test Task' command.\",\n\t\t),\n\t\tnls.localize(\n\t\t\t\"JsonSchema.tasks.group.none\",\n\t\t\t\"Assigns the task to no group\",\n\t\t),\n\t],\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.group.kind\",\n\t\t\"The task's execution group.\",\n\t),\n};\n\nconst group: IJSONSchema = {\n\toneOf: [\n\t\tgroupStrings,\n\t\t{\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tkind: groupStrings,\n\t\t\t\tisDefault: {\n\t\t\t\t\ttype: [\"boolean\", \"string\"],\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"JsonSchema.tasks.group.isDefault\",\n\t\t\t\t\t\t\"Defines if this task is the default task in the group, or a glob to match the file which should trigger this task.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tdefaultSnippets: [\n\t\t{\n\t\t\tbody: { kind: \"build\", isDefault: true },\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.group.defaultBuild\",\n\t\t\t\t\"Marks the task as the default build task.\",\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tbody: { kind: \"test\", isDefault: true },\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.group.defaultTest\",\n\t\t\t\t\"Marks the task as the default test task.\",\n\t\t\t),\n\t\t},\n\t],\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.group\",\n\t\t'Defines to which execution group this task belongs to. It supports \"build\" to add it to the build group and \"test\" to add it to the test group.',\n\t),\n};\n\nconst taskType: IJSONSchema = {\n\ttype: \"string\",\n\tenum: [\"shell\"],\n\tdefault: \"process\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.type\",\n\t\t\"Defines whether the task is run as a process or as a command inside a shell.\",\n\t),\n};\n\nconst command: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"array\",\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"JsonSchema.commandArray\",\n\t\t\t\t\t\t\"The shell command to be executed. Array items will be joined using a space character\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\ttype: \"object\",\n\t\t\trequired: [\"value\", \"quoting\"],\n\t\t\tproperties: {\n\t\t\t\tvalue: {\n\t\t\t\t\toneOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.commandArray\",\n\t\t\t\t\t\t\t\t\"The shell command to be executed. Array items will be joined using a space character\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"JsonSchema.command.quotedString.value\",\n\t\t\t\t\t\t\"The actual command value\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tquoting: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tenum: [\"escape\", \"strong\", \"weak\"],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"JsonSchema.tasks.quoting.escape\",\n\t\t\t\t\t\t\t\"Escapes characters using the shell's escape character (e.g. ` under PowerShell and \\\\ under bash).\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"JsonSchema.tasks.quoting.strong\",\n\t\t\t\t\t\t\t\"Quotes the argument using the shell's strong quote character (e.g. ' under PowerShell and bash).\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"JsonSchema.tasks.quoting.weak\",\n\t\t\t\t\t\t\t\"Quotes the argument using the shell's weak quote character (e.g. \\\" under PowerShell and bash).\",\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t\tdefault: \"strong\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"JsonSchema.command.quotesString.quote\",\n\t\t\t\t\t\t\"How the command value should be quoted.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tdescription: nls.localize(\n\t\t\"JsonSchema.command\",\n\t\t\"The command to be executed. Can be an external program or a shell command.\",\n\t),\n};\n\nconst args: IJSONSchema = {\n\ttype: \"array\",\n\titems: {\n\t\toneOf: [\n\t\t\t{\n\t\t\t\ttype: \"string\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"object\",\n\t\t\t\trequired: [\"value\", \"quoting\"],\n\t\t\t\tproperties: {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"JsonSchema.args.quotedString.value\",\n\t\t\t\t\t\t\t\"The actual argument value\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\tquoting: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tenum: [\"escape\", \"strong\", \"weak\"],\n\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.tasks.quoting.escape\",\n\t\t\t\t\t\t\t\t\"Escapes characters using the shell's escape character (e.g. ` under PowerShell and \\\\ under bash).\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.tasks.quoting.strong\",\n\t\t\t\t\t\t\t\t\"Quotes the argument using the shell's strong quote character (e.g. ' under PowerShell and bash).\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.tasks.quoting.weak\",\n\t\t\t\t\t\t\t\t\"Quotes the argument using the shell's weak quote character (e.g. \\\" under PowerShell and bash).\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: \"strong\",\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"JsonSchema.args.quotesString.quote\",\n\t\t\t\t\t\t\t\"How the argument value should be quoted.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.args\",\n\t\t\"Arguments passed to the command when this task is invoked.\",\n\t),\n};\n\nconst label: IJSONSchema = {\n\ttype: \"string\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.label\",\n\t\t\"The task's user interface label\",\n\t),\n};\n\nconst version: IJSONSchema = {\n\ttype: \"string\",\n\tenum: [\"2.0.0\"],\n\tdescription: nls.localize(\n\t\t\"JsonSchema.version\",\n\t\t\"The config's version number.\",\n\t),\n};\n\nconst identifier: IJSONSchema = {\n\ttype: \"string\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.identifier\",\n\t\t\"A user defined identifier to reference the task in launch.json or a dependsOn clause.\",\n\t),\n\tdeprecationMessage: nls.localize(\n\t\t\"JsonSchema.tasks.identifier.deprecated\",\n\t\t\"User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.\",\n\t),\n};\n\nconst runOptions: IJSONSchema = {\n\ttype: \"object\",\n\tadditionalProperties: false,\n\tproperties: {\n\t\treevaluateOnRerun: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.reevaluateOnRerun\",\n\t\t\t\t\"Whether to reevaluate task variables on rerun.\",\n\t\t\t),\n\t\t\tdefault: true,\n\t\t},\n\t\trunOn: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"default\", \"folderOpen\"],\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.runOn\",\n\t\t\t\t\"Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.\",\n\t\t\t),\n\t\t\tdefault: \"default\",\n\t\t},\n\t\tinstanceLimit: {\n\t\t\ttype: \"number\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.instanceLimit\",\n\t\t\t\t\"The number of instances of the task that are allowed to run simultaneously.\",\n\t\t\t),\n\t\t\tdefault: 1,\n\t\t},\n\t},\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.runOptions\",\n\t\t\"The task's run related options\",\n\t),\n};\n\nconst commonSchemaDefinitions = commonSchema.definitions!;\nconst options: IJSONSchema = Objects.deepClone(commonSchemaDefinitions.options);\nconst optionsProperties = options.properties!;\noptionsProperties.shell = Objects.deepClone(\n\tcommonSchemaDefinitions.shellConfiguration,\n);\n\nconst taskConfiguration: IJSONSchema = {\n\ttype: \"object\",\n\tadditionalProperties: false,\n\tproperties: {\n\t\tlabel: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.taskLabel\",\n\t\t\t\t\"The task's label\",\n\t\t\t),\n\t\t},\n\t\ttaskName: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.taskName\",\n\t\t\t\t\"The task's name\",\n\t\t\t),\n\t\t\tdeprecationMessage: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.taskName.deprecated\",\n\t\t\t\t\"The task's name property is deprecated. Use the label property instead.\",\n\t\t\t),\n\t\t},\n\t\tidentifier: Objects.deepClone(identifier),\n\t\tgroup: Objects.deepClone(group),\n\t\tisBackground: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.background\",\n\t\t\t\t\"Whether the executed task is kept alive and is running in the background.\",\n\t\t\t),\n\t\t\tdefault: true,\n\t\t},\n\t\tpromptOnClose: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.promptOnClose\",\n\t\t\t\t\"Whether the user is prompted when VS Code closes with a running task.\",\n\t\t\t),\n\t\t\tdefault: false,\n\t\t},\n\t\tpresentation: Objects.deepClone(presentation),\n\t\ticon: Objects.deepClone(icon),\n\t\thide: Objects.deepClone(hide),\n\t\toptions: options,\n\t\tproblemMatcher: {\n\t\t\t$ref: \"#/definitions/problemMatcherType\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.tasks.matchers\",\n\t\t\t\t\"The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.\",\n\t\t\t),\n\t\t},\n\t\trunOptions: Objects.deepClone(runOptions),\n\t\tdependsOn: Objects.deepClone(dependsOn),\n\t\tdependsOrder: Objects.deepClone(dependsOrder),\n\t\tdetail: Objects.deepClone(detail),\n\t},\n};\n\nconst taskDefinitions: IJSONSchema[] = [];\nTaskDefinitionRegistry.onReady().then(() => {\n\tupdateTaskDefinitions();\n});\n\nexport function updateTaskDefinitions() {\n\tfor (const taskType of TaskDefinitionRegistry.all()) {\n\t\t// Check that we haven't already added this task type\n\t\tif (\n\t\t\ttaskDefinitions.find((schema) => {\n\t\t\t\treturn schema.properties?.type?.enum?.find\n\t\t\t\t\t? schema.properties?.type.enum.find(\n\t\t\t\t\t\t\t(element) => element === taskType.taskType,\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined;\n\t\t\t})\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst schema: IJSONSchema = Objects.deepClone(taskConfiguration);\n\t\tconst schemaProperties = schema.properties!;\n\t\t// Since we do this after the schema is assigned we need to patch the refs.\n\t\tschemaProperties.type = {\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"JsonSchema.customizations.customizes.type\",\n\t\t\t\t\"The task type to customize\",\n\t\t\t),\n\t\t\tenum: [taskType.taskType],\n\t\t};\n\t\tif (taskType.required) {\n\t\t\tschema.required = taskType.required.slice();\n\t\t} else {\n\t\t\tschema.required = [];\n\t\t}\n\t\t// Customized tasks require that the task type be set.\n\t\tschema.required.push(\"type\");\n\t\tif (taskType.properties) {\n\t\t\tfor (const key of Object.keys(taskType.properties)) {\n\t\t\t\tconst property = taskType.properties[key];\n\t\t\t\tschemaProperties[key] = Objects.deepClone(property);\n\t\t\t}\n\t\t}\n\t\tfixReferences(schema);\n\t\ttaskDefinitions.push(schema);\n\t}\n}\n\nconst customize = Objects.deepClone(taskConfiguration);\ncustomize.properties!.customize = {\n\ttype: \"string\",\n\tdeprecationMessage: nls.localize(\n\t\t\"JsonSchema.tasks.customize.deprecated\",\n\t\t\"The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach\",\n\t),\n};\nif (!customize.required) {\n\tcustomize.required = [];\n}\ncustomize.required.push(\"customize\");\ntaskDefinitions.push(customize);\n\nconst definitions = Objects.deepClone(commonSchemaDefinitions);\nconst taskDescription: IJSONSchema = definitions.taskDescription;\ntaskDescription.required = [\"label\"];\nconst taskDescriptionProperties = taskDescription.properties!;\ntaskDescriptionProperties.label = Objects.deepClone(label);\ntaskDescriptionProperties.command = Objects.deepClone(command);\ntaskDescriptionProperties.args = Objects.deepClone(args);\ntaskDescriptionProperties.isShellCommand = Objects.deepClone(shellCommand);\ntaskDescriptionProperties.dependsOn = dependsOn;\ntaskDescriptionProperties.hide = Objects.deepClone(hide);\ntaskDescriptionProperties.dependsOrder = dependsOrder;\ntaskDescriptionProperties.identifier = Objects.deepClone(identifier);\ntaskDescriptionProperties.type = Objects.deepClone(taskType);\ntaskDescriptionProperties.presentation = Objects.deepClone(presentation);\ntaskDescriptionProperties.terminal = terminal;\ntaskDescriptionProperties.icon = Objects.deepClone(icon);\ntaskDescriptionProperties.group = Objects.deepClone(group);\ntaskDescriptionProperties.runOptions = Objects.deepClone(runOptions);\ntaskDescriptionProperties.detail = detail;\ntaskDescriptionProperties.taskName.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.taskName.deprecated\",\n\t\"The task's name property is deprecated. Use the label property instead.\",\n);\n// Clone the taskDescription for process task before setting a default to prevent two defaults #115281\nconst processTask = Objects.deepClone(taskDescription);\ntaskDescription.default = {\n\tlabel: \"My Task\",\n\ttype: \"shell\",\n\tcommand: \"echo Hello\",\n\tproblemMatcher: [],\n};\ndefinitions.showOutputType.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.showOutput.deprecated\",\n\t\"The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.\",\n);\ntaskDescriptionProperties.echoCommand.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.echoCommand.deprecated\",\n\t\"The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.\",\n);\ntaskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.suppressTaskName.deprecated\",\n\t\"The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.\",\n);\ntaskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.isBuildCommand.deprecated\",\n\t\"The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.\",\n);\ntaskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize(\n\t\"JsonSchema.tasks.isTestCommand.deprecated\",\n\t\"The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.\",\n);\n\n// Process tasks are almost identical schema-wise to shell tasks, but they are required to have a command\nprocessTask.properties!.type = {\n\ttype: \"string\",\n\tenum: [\"process\"],\n\tdefault: \"process\",\n\tdescription: nls.localize(\n\t\t\"JsonSchema.tasks.type\",\n\t\t\"Defines whether the task is run as a process or as a command inside a shell.\",\n\t),\n};\nprocessTask.required!.push(\"command\");\nprocessTask.required!.push(\"type\");\n\ntaskDefinitions.push(processTask);\n\ntaskDefinitions.push({\n\t$ref: \"#/definitions/taskDescription\",\n});\n\nconst definitionsTaskRunnerConfigurationProperties =\n\tdefinitions.taskRunnerConfiguration.properties!;\nconst tasks = definitionsTaskRunnerConfigurationProperties.tasks;\ntasks.items = {\n\toneOf: taskDefinitions,\n};\n\ndefinitionsTaskRunnerConfigurationProperties.inputs =\n\tinputsSchema.definitions!.inputs;\n\ndefinitions.commandConfiguration.properties!.isShellCommand =\n\tObjects.deepClone(shellCommand);\ndefinitions.commandConfiguration.properties!.args = Objects.deepClone(args);\ndefinitions.options.properties!.shell = {\n\t$ref: \"#/definitions/shellConfiguration\",\n};\n\ndefinitionsTaskRunnerConfigurationProperties.isShellCommand =\n\tObjects.deepClone(shellCommand);\ndefinitionsTaskRunnerConfigurationProperties.type = Objects.deepClone(taskType);\ndefinitionsTaskRunnerConfigurationProperties.group = Objects.deepClone(group);\ndefinitionsTaskRunnerConfigurationProperties.presentation =\n\tObjects.deepClone(presentation);\ndefinitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage =\n\tnls.localize(\n\t\t\"JsonSchema.tasks.suppressTaskName.deprecated\",\n\t\t\"The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.\",\n\t);\ndefinitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage =\n\tnls.localize(\n\t\t\"JsonSchema.tasks.taskSelector.deprecated\",\n\t\t\"The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.\",\n\t);\n\nconst osSpecificTaskRunnerConfiguration = Objects.deepClone(\n\tdefinitions.taskRunnerConfiguration,\n);\ndelete osSpecificTaskRunnerConfiguration.properties!.tasks;\nosSpecificTaskRunnerConfiguration.additionalProperties = false;\ndefinitions.osSpecificTaskRunnerConfiguration =\n\tosSpecificTaskRunnerConfiguration;\ndefinitionsTaskRunnerConfigurationProperties.version =\n\tObjects.deepClone(version);\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\tallOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\trequired: [\"version\"],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: Objects.deepClone(version),\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t$ref: \"#/definitions/osSpecificTaskRunnerConfiguration\",\n\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.windows\",\n\t\t\t\t\t\t\t\t\"Windows specific command configuration\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t$ref: \"#/definitions/osSpecificTaskRunnerConfiguration\",\n\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.mac\",\n\t\t\t\t\t\t\t\t\"Mac specific command configuration\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t$ref: \"#/definitions/osSpecificTaskRunnerConfiguration\",\n\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\"JsonSchema.linux\",\n\t\t\t\t\t\t\t\t\"Linux specific command configuration\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: \"#/definitions/taskRunnerConfiguration\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nschema.definitions = definitions;\n\nfunction deprecatedVariableMessage(\n\tschemaMap: IJSONSchemaMap,\n\tproperty: string,\n) {\n\tconst mapAtProperty = schemaMap[property].properties!;\n\tif (mapAtProperty) {\n\t\tObject.keys(mapAtProperty).forEach((name) => {\n\t\t\tdeprecatedVariableMessage(mapAtProperty, name);\n\t\t});\n\t} else {\n\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(\n\t\t\tschemaMap[property],\n\t\t);\n\t}\n}\n\nObject.getOwnPropertyNames(definitions).forEach((key) => {\n\tconst newKey = key + \"2\";\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n\tdeprecatedVariableMessage(definitions, newKey);\n});\nfixReferences(schema);\n\nexport function updateProblemMatchers() {\n\ttry {\n\t\tconst matcherIds = ProblemMatcherRegistry.keys().map(\n\t\t\t(key) => \"$\" + key,\n\t\t);\n\t\tdefinitions.problemMatcherType2.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType2.oneOf![2].items as IJSONSchema)\n\t\t\t.anyOf![0].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log(\"Installing problem matcher ids failed\");\n\t}\n}\n\nProblemMatcherRegistry.onReady().then(() => {\n\tupdateProblemMatchers();\n});\n\nexport default schema;\n"],
  "mappings": "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",
  "names": ["icon", "taskType", "schema"]
}
