{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as Objects from '../../../../base/common/objects.js';\nimport { IJSONSchema, IJSONSchemaMap } from '../../../../base/common/jsonSchema.js';\n\nimport commonSchema from './jsonSchemaCommon.js';\n\nimport { ProblemMatcherRegistry } from './problemMatcher.js';\nimport { TaskDefinitionRegistry } from './taskDefinitionRegistry.js';\nimport * as ConfigurationResolverUtils from '../../../services/configurationResolver/common/configurationResolverUtils.js';\nimport { inputsSchema } from '../../../services/configurationResolver/common/configurationResolverSchema.js';\nimport { getAllCodicons } from '../../../../base/common/codicons.js';\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === 'object') {\n\t\tif (literal['$ref']) {\n\t\t\tliteral['$ref'] = literal['$ref'] + '2';\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach(property => {\n\t\t\tconst value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === 'object') {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst shellCommand: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n\t\t},\n\t\t{\n\t\t\t$ref: '#/definitions/shellConfiguration'\n\t\t}\n\t],\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.isShellCommand.deprecated', 'The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.')\n};\n\n\nconst hide: IJSONSchema = {\n\ttype: 'boolean',\n\tdescription: nls.localize('JsonSchema.hide', 'Hide this task from the run task quick pick'),\n\tdefault: true\n};\n\nconst taskIdentifier: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: true,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.identifier', 'The task identifier.')\n\t\t}\n\t}\n};\n\nconst dependsOn: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.string', 'Another task this task depends on.')\n\t\t},\n\t\ttaskIdentifier,\n\t\t{\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.array', 'The other tasks this task depends on.'),\n\t\t\titems: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t\ttaskIdentifier\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\tdescription: nls.localize('JsonSchema.tasks.dependsOn', 'Either a string representing another task or an array of other tasks that this task depends on.')\n};\n\nconst dependsOrder: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['parallel', 'sequence'],\n\tenumDescriptions: [\n\t\tnls.localize('JsonSchema.tasks.dependsOrder.parallel', 'Run all dependsOn tasks in parallel.'),\n\t\tnls.localize('JsonSchema.tasks.dependsOrder.sequence', 'Run all dependsOn tasks in sequence.'),\n\t],\n\tdefault: 'parallel',\n\tdescription: nls.localize('JsonSchema.tasks.dependsOrder', 'Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.')\n};\n\nconst detail: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.detail', 'An optional description of a task that shows in the Run Task quick pick as a detail.')\n};\n\nconst icon: IJSONSchema = {\n\ttype: 'object',\n\tdescription: nls.localize('JsonSchema.tasks.icon', 'An optional icon for the task'),\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: nls.localize('JsonSchema.tasks.icon.id', 'An optional codicon ID to use'),\n\t\t\ttype: ['string', 'null'],\n\t\t\tenum: Array.from(getAllCodicons(), icon => icon.id),\n\t\t\tmarkdownEnumDescriptions: Array.from(getAllCodicons(), icon => `$(${icon.id})`),\n\t\t},\n\t\tcolor: {\n\t\t\tdescription: nls.localize('JsonSchema.tasks.icon.color', 'An optional color of the icon'),\n\t\t\ttype: ['string', 'null'],\n\t\t\tenum: [\n\t\t\t\t'terminal.ansiBlack',\n\t\t\t\t'terminal.ansiRed',\n\t\t\t\t'terminal.ansiGreen',\n\t\t\t\t'terminal.ansiYellow',\n\t\t\t\t'terminal.ansiBlue',\n\t\t\t\t'terminal.ansiMagenta',\n\t\t\t\t'terminal.ansiCyan',\n\t\t\t\t'terminal.ansiWhite'\n\t\t\t],\n\t\t},\n\t}\n};\n\nconst presentation: IJSONSchema = {\n\ttype: 'object',\n\tdefault: {\n\t\techo: true,\n\t\treveal: 'always',\n\t\tfocus: false,\n\t\tpanel: 'shared',\n\t\tshowReuseMessage: true,\n\t\tclear: false,\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.presentation', 'Configures the panel that is used to present the task\\'s output and reads its input.'),\n\tadditionalProperties: false,\n\tproperties: {\n\t\techo: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.echo', 'Controls whether the executed command is echoed to the panel. Default is true.')\n\t\t},\n\t\tfocus: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.focus', 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.')\n\t\t},\n\t\trevealProblems: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'onProblem', 'never'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.revealProblems.always', 'Always reveals the problems panel when this task is executed.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.revealProblems.onProblem', 'Only reveals the problems panel if a problem is found.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.revealProblems.never', 'Never reveals the problems panel when this task is executed.'),\n\t\t\t],\n\t\t\tdefault: 'never',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.revealProblems', 'Controls whether the problems panel is revealed when running this task or not. Takes precedence over option \\\"reveal\\\". Default is \\\"never\\\".')\n\t\t},\n\t\treveal: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'silent', 'never'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.always', 'Always reveals the terminal when this task is executed.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.silent', 'Only reveals the terminal if the task exits with an error or the problem matcher finds an error.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.never', 'Never reveals the terminal when this task is executed.'),\n\t\t\t],\n\t\t\tdefault: 'always',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.reveal', 'Controls whether the terminal running the task is revealed or not. May be overridden by option \\\"revealProblems\\\". Default is \\\"always\\\".')\n\t\t},\n\t\tpanel: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['shared', 'dedicated', 'new'],\n\t\t\tdefault: 'shared',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.instance', 'Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.')\n\t\t},\n\t\tshowReuseMessage: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.showReuseMessage', 'Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.')\n\t\t},\n\t\tclear: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.clear', 'Controls whether the terminal is cleared before executing the task.')\n\t\t},\n\t\tgroup: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.group', 'Controls whether the task is executed in a specific terminal group using split panes.')\n\t\t},\n\t\tclose: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.close', 'Controls whether the terminal the task runs in is closed when the task exits.')\n\t\t}\n\t}\n};\n\nconst terminal: IJSONSchema = Objects.deepClone(presentation);\nterminal.deprecationMessage = nls.localize('JsonSchema.tasks.terminal', 'The terminal property is deprecated. Use presentation instead');\n\nconst groupStrings: IJSONSchema = {\n\ttype: 'string',\n\tenum: [\n\t\t'build',\n\t\t'test',\n\t\t'none'\n\t],\n\tenumDescriptions: [\n\t\tnls.localize('JsonSchema.tasks.group.build', 'Marks the task as a build task accessible through the \\'Run Build Task\\' command.'),\n\t\tnls.localize('JsonSchema.tasks.group.test', 'Marks the task as a test task accessible through the \\'Run Test Task\\' command.'),\n\t\tnls.localize('JsonSchema.tasks.group.none', 'Assigns the task to no group')\n\t],\n\tdescription: nls.localize('JsonSchema.tasks.group.kind', 'The task\\'s execution group.')\n};\n\nconst group: IJSONSchema = {\n\toneOf: [\n\t\tgroupStrings,\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tkind: groupStrings,\n\t\t\t\tisDefault: {\n\t\t\t\t\ttype: ['boolean', 'string'],\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.group.isDefault', 'Defines if this task is the default task in the group, or a glob to match the file which should trigger this task.')\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t],\n\tdefaultSnippets: [\n\t\t{\n\t\t\tbody: { kind: 'build', isDefault: true },\n\t\t\tdescription: nls.localize('JsonSchema.tasks.group.defaultBuild', 'Marks the task as the default build task.')\n\t\t},\n\t\t{\n\t\t\tbody: { kind: 'test', isDefault: true },\n\t\t\tdescription: nls.localize('JsonSchema.tasks.group.defaultTest', 'Marks the task as the default test task.')\n\t\t}\n\t],\n\tdescription: nls.localize('JsonSchema.tasks.group', 'Defines to which execution group this task belongs to. It supports \"build\" to add it to the build group and \"test\" to add it to the test group.')\n};\n\nconst taskType: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['shell'],\n\tdefault: 'process',\n\tdescription: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\n\nconst command: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\tdescription: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttype: 'object',\n\t\t\trequired: ['value', 'quoting'],\n\t\t\tproperties: {\n\t\t\t\tvalue: {\n\t\t\t\t\toneOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command.quotedString.value', 'The actual command value')\n\t\t\t\t},\n\t\t\t\tquoting: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['escape', 'strong', 'weak'],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \\' under PowerShell and bash).'),\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \" under PowerShell and bash).'),\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'strong',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command.quotesString.quote', 'How the command value should be quoted.')\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t],\n\tdescription: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n};\n\nconst args: IJSONSchema = {\n\ttype: 'array',\n\titems: {\n\t\toneOf: [\n\t\t\t{\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['value', 'quoting'],\n\t\t\t\tproperties: {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('JsonSchema.args.quotedString.value', 'The actual argument value')\n\t\t\t\t\t},\n\t\t\t\t\tquoting: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tenum: ['escape', 'strong', 'weak'],\n\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \\' under PowerShell and bash).'),\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \" under PowerShell and bash).'),\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'strong',\n\t\t\t\t\t\tdescription: nls.localize('JsonSchema.args.quotesString.quote', 'How the argument value should be quoted.')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t]\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.')\n};\n\nconst label: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.label', \"The task's user interface label\")\n};\n\nconst version: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['2.0.0'],\n\tdescription: nls.localize('JsonSchema.version', 'The config\\'s version number.')\n};\n\nconst identifier: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.identifier', 'A user defined identifier to reference the task in launch.json or a dependsOn clause.'),\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.identifier.deprecated', 'User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.')\n};\n\nconst runOptions: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\treevaluateOnRerun: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.reevaluateOnRerun', 'Whether to reevaluate task variables on rerun.'),\n\t\t\tdefault: true\n\t\t},\n\t\trunOn: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['default', 'folderOpen'],\n\t\t\tdescription: nls.localize('JsonSchema.tasks.runOn', 'Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.'),\n\t\t\tdefault: 'default'\n\t\t},\n\t\tinstanceLimit: {\n\t\t\ttype: 'number',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.instanceLimit', 'The number of instances of the task that are allowed to run simultaneously.'),\n\t\t\tdefault: 1\n\t\t},\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.runOptions', 'The task\\'s run related options')\n};\n\nconst commonSchemaDefinitions = commonSchema.definitions!;\nconst options: IJSONSchema = Objects.deepClone(commonSchemaDefinitions.options);\nconst optionsProperties = options.properties!;\noptionsProperties.shell = Objects.deepClone(commonSchemaDefinitions.shellConfiguration);\n\nconst taskConfiguration: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\tlabel: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.taskLabel', \"The task's label\")\n\t\t},\n\t\ttaskName: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.taskName', 'The task\\'s name'),\n\t\t\tdeprecationMessage: nls.localize('JsonSchema.tasks.taskName.deprecated', 'The task\\'s name property is deprecated. Use the label property instead.')\n\t\t},\n\t\tidentifier: Objects.deepClone(identifier),\n\t\tgroup: Objects.deepClone(group),\n\t\tisBackground: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n\t\t\tdefault: true\n\t\t},\n\t\tpromptOnClose: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n\t\t\tdefault: false\n\t\t},\n\t\tpresentation: Objects.deepClone(presentation),\n\t\ticon: Objects.deepClone(icon),\n\t\thide: Objects.deepClone(hide),\n\t\toptions: options,\n\t\tproblemMatcher: {\n\t\t\t$ref: '#/definitions/problemMatcherType',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n\t\t},\n\t\trunOptions: Objects.deepClone(runOptions),\n\t\tdependsOn: Objects.deepClone(dependsOn),\n\t\tdependsOrder: Objects.deepClone(dependsOrder),\n\t\tdetail: Objects.deepClone(detail),\n\t}\n};\n\nconst taskDefinitions: IJSONSchema[] = [];\nTaskDefinitionRegistry.onReady().then(() => {\n\tupdateTaskDefinitions();\n});\n\nexport function updateTaskDefinitions() {\n\tfor (const taskType of TaskDefinitionRegistry.all()) {\n\t\t// Check that we haven't already added this task type\n\t\tif (taskDefinitions.find(schema => {\n\t\t\treturn schema.properties?.type?.enum?.find ? schema.properties?.type.enum.find(element => element === taskType.taskType) : undefined;\n\t\t})) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst schema: IJSONSchema = Objects.deepClone(taskConfiguration);\n\t\tconst schemaProperties = schema.properties!;\n\t\t// Since we do this after the schema is assigned we need to patch the refs.\n\t\tschemaProperties.type = {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.customizations.customizes.type', 'The task type to customize'),\n\t\t\tenum: [taskType.taskType]\n\t\t};\n\t\tif (taskType.required) {\n\t\t\tschema.required = taskType.required.slice();\n\t\t} else {\n\t\t\tschema.required = [];\n\t\t}\n\t\t// Customized tasks require that the task type be set.\n\t\tschema.required.push('type');\n\t\tif (taskType.properties) {\n\t\t\tfor (const key of Object.keys(taskType.properties)) {\n\t\t\t\tconst property = taskType.properties[key];\n\t\t\t\tschemaProperties[key] = Objects.deepClone(property);\n\t\t\t}\n\t\t}\n\t\tfixReferences(schema);\n\t\ttaskDefinitions.push(schema);\n\t}\n}\n\nconst customize = Objects.deepClone(taskConfiguration);\ncustomize.properties!.customize = {\n\ttype: 'string',\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.customize.deprecated', 'The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach')\n};\nif (!customize.required) {\n\tcustomize.required = [];\n}\ncustomize.required.push('customize');\ntaskDefinitions.push(customize);\n\nconst definitions = Objects.deepClone(commonSchemaDefinitions);\nconst taskDescription: IJSONSchema = definitions.taskDescription;\ntaskDescription.required = ['label'];\nconst taskDescriptionProperties = taskDescription.properties!;\ntaskDescriptionProperties.label = Objects.deepClone(label);\ntaskDescriptionProperties.command = Objects.deepClone(command);\ntaskDescriptionProperties.args = Objects.deepClone(args);\ntaskDescriptionProperties.isShellCommand = Objects.deepClone(shellCommand);\ntaskDescriptionProperties.dependsOn = dependsOn;\ntaskDescriptionProperties.hide = Objects.deepClone(hide);\ntaskDescriptionProperties.dependsOrder = dependsOrder;\ntaskDescriptionProperties.identifier = Objects.deepClone(identifier);\ntaskDescriptionProperties.type = Objects.deepClone(taskType);\ntaskDescriptionProperties.presentation = Objects.deepClone(presentation);\ntaskDescriptionProperties.terminal = terminal;\ntaskDescriptionProperties.icon = Objects.deepClone(icon);\ntaskDescriptionProperties.group = Objects.deepClone(group);\ntaskDescriptionProperties.runOptions = Objects.deepClone(runOptions);\ntaskDescriptionProperties.detail = detail;\ntaskDescriptionProperties.taskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.taskName.deprecated',\n\t'The task\\'s name property is deprecated. Use the label property instead.'\n);\n// Clone the taskDescription for process task before setting a default to prevent two defaults #115281\nconst processTask = Objects.deepClone(taskDescription);\ntaskDescription.default = {\n\tlabel: 'My Task',\n\ttype: 'shell',\n\tcommand: 'echo Hello',\n\tproblemMatcher: []\n};\ndefinitions.showOutputType.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.showOutput.deprecated',\n\t'The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.echoCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.echoCommand.deprecated',\n\t'The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.suppressTaskName.deprecated',\n\t'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.isBuildCommand.deprecated',\n\t'The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.isTestCommand.deprecated',\n\t'The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.'\n);\n\n// Process tasks are almost identical schema-wise to shell tasks, but they are required to have a command\nprocessTask.properties!.type = {\n\ttype: 'string',\n\tenum: ['process'],\n\tdefault: 'process',\n\tdescription: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\nprocessTask.required!.push('command');\nprocessTask.required!.push('type');\n\ntaskDefinitions.push(processTask);\n\ntaskDefinitions.push({\n\t$ref: '#/definitions/taskDescription'\n});\n\nconst definitionsTaskRunnerConfigurationProperties = definitions.taskRunnerConfiguration.properties!;\nconst tasks = definitionsTaskRunnerConfigurationProperties.tasks;\ntasks.items = {\n\toneOf: taskDefinitions\n};\n\ndefinitionsTaskRunnerConfigurationProperties.inputs = inputsSchema.definitions!.inputs;\n\ndefinitions.commandConfiguration.properties!.isShellCommand = Objects.deepClone(shellCommand);\ndefinitions.commandConfiguration.properties!.args = Objects.deepClone(args);\ndefinitions.options.properties!.shell = {\n\t$ref: '#/definitions/shellConfiguration'\n};\n\ndefinitionsTaskRunnerConfigurationProperties.isShellCommand = Objects.deepClone(shellCommand);\ndefinitionsTaskRunnerConfigurationProperties.type = Objects.deepClone(taskType);\ndefinitionsTaskRunnerConfigurationProperties.group = Objects.deepClone(group);\ndefinitionsTaskRunnerConfigurationProperties.presentation = Objects.deepClone(presentation);\ndefinitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.suppressTaskName.deprecated',\n\t'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\ndefinitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.taskSelector.deprecated',\n\t'The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\n\nconst osSpecificTaskRunnerConfiguration = Objects.deepClone(definitions.taskRunnerConfiguration);\ndelete osSpecificTaskRunnerConfiguration.properties!.tasks;\nosSpecificTaskRunnerConfiguration.additionalProperties = false;\ndefinitions.osSpecificTaskRunnerConfiguration = osSpecificTaskRunnerConfiguration;\ndefinitionsTaskRunnerConfigurationProperties.version = Objects.deepClone(version);\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\t'allOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['version'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: Objects.deepClone(version),\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nschema.definitions = definitions;\n\nfunction deprecatedVariableMessage(schemaMap: IJSONSchemaMap, property: string) {\n\tconst mapAtProperty = schemaMap[property].properties!;\n\tif (mapAtProperty) {\n\t\tObject.keys(mapAtProperty).forEach(name => {\n\t\t\tdeprecatedVariableMessage(mapAtProperty, name);\n\t\t});\n\t} else {\n\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(schemaMap[property]);\n\t}\n}\n\nObject.getOwnPropertyNames(definitions).forEach(key => {\n\tconst newKey = key + '2';\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n\tdeprecatedVariableMessage(definitions, newKey);\n});\nfixReferences(schema);\n\nexport function updateProblemMatchers() {\n\ttry {\n\t\tconst matcherIds = ProblemMatcherRegistry.keys().map(key => '$' + key);\n\t\tdefinitions.problemMatcherType2.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType2.oneOf![2].items as IJSONSchema).anyOf![0].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log('Installing problem matcher ids failed');\n\t}\n}\n\nProblemMatcherRegistry.onReady().then(() => {\n\tupdateProblemMatchers();\n});\n\nexport default schema;\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,YAAY,aAAa;AACzB,SAAS,aAAa,sBAAsB;AAE5C,OAAO,kBAAkB;AAEzB,SAAS,8BAA8B;AACvC,SAAS,8BAA8B;AACvC,YAAY,gCAAgC;AAC5C,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAE/B,SAAS,cAAc,SAAc;AACpC,MAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,YAAQ,QAAQ,aAAa;AAAA,EAC9B,WAAW,OAAO,YAAY,UAAU;AACvC,QAAI,QAAQ,MAAM,GAAG;AACpB,cAAQ,MAAM,IAAI,QAAQ,MAAM,IAAI;AAAA,IACrC;AACA,WAAO,oBAAoB,OAAO,EAAE,QAAQ,cAAY;AACvD,YAAM,QAAQ,QAAQ,QAAQ;AAC9B,UAAI,MAAM,QAAQ,KAAK,KAAK,OAAO,UAAU,UAAU;AACtD,sBAAc,KAAK;AAAA,MACpB;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAdS;AAgBT,MAAM,eAA4B;AAAA,EACjC,OAAO;AAAA,IACN;AAAA,MACC,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,oBAAoB,wGAAwG;AAAA,IACvJ;AAAA,IACA;AAAA,MACC,MAAM;AAAA,IACP;AAAA,EACD;AAAA,EACA,oBAAoB,IAAI,SAAS,8CAA8C,8JAA8J;AAC9O;AAGA,MAAM,OAAoB;AAAA,EACzB,MAAM;AAAA,EACN,aAAa,IAAI,SAAS,mBAAmB,6CAA6C;AAAA,EAC1F,SAAS;AACV;AAEA,MAAM,iBAA8B;AAAA,EACnC,MAAM;AAAA,EACN,sBAAsB;AAAA,EACtB,YAAY;AAAA,IACX,MAAM;AAAA,MACL,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,yCAAyC,sBAAsB;AAAA,IAC1F;AAAA,EACD;AACD;AAEA,MAAM,YAAyB;AAAA,EAC9B,OAAO;AAAA,IACN;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,qCAAqC,oCAAoC;AAAA,IACpG;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,oCAAoC,uCAAuC;AAAA,MACrG,OAAO;AAAA,QACN,OAAO;AAAA,UACN;AAAA,YACC,MAAM;AAAA,UACP;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,aAAa,IAAI,SAAS,8BAA8B,iGAAiG;AAC1J;AAEA,MAAM,eAA4B;AAAA,EACjC,MAAM;AAAA,EACN,MAAM,CAAC,YAAY,UAAU;AAAA,EAC7B,kBAAkB;AAAA,IACjB,IAAI,SAAS,0CAA0C,sCAAsC;AAAA,IAC7F,IAAI,SAAS,0CAA0C,sCAAsC;AAAA,EAC9F;AAAA,EACA,SAAS;AAAA,EACT,aAAa,IAAI,SAAS,iCAAiC,sGAAsG;AAClK;AAEA,MAAM,SAAsB;AAAA,EAC3B,MAAM;AAAA,EACN,aAAa,IAAI,SAAS,2BAA2B,sFAAsF;AAC5I;AAEA,MAAM,OAAoB;AAAA,EACzB,MAAM;AAAA,EACN,aAAa,IAAI,SAAS,yBAAyB,+BAA+B;AAAA,EAClF,YAAY;AAAA,IACX,IAAI;AAAA,MACH,aAAa,IAAI,SAAS,4BAA4B,+BAA+B;AAAA,MACrF,MAAM,CAAC,UAAU,MAAM;AAAA,MACvB,MAAM,MAAM,KAAK,eAAe,GAAG,CAAAA,UAAQA,MAAK,EAAE;AAAA,MAClD,0BAA0B,MAAM,KAAK,eAAe,GAAG,CAAAA,UAAQ,KAAKA,MAAK,EAAE,GAAG;AAAA,IAC/E;AAAA,IACA,OAAO;AAAA,MACN,aAAa,IAAI,SAAS,+BAA+B,+BAA+B;AAAA,MACxF,MAAM,CAAC,UAAU,MAAM;AAAA,MACvB,MAAM;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,eAA4B;AAAA,EACjC,MAAM;AAAA,EACN,SAAS;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,OAAO;AAAA,IACP,kBAAkB;AAAA,IAClB,OAAO;AAAA,EACR;AAAA,EACA,aAAa,IAAI,SAAS,iCAAiC,qFAAsF;AAAA,EACjJ,sBAAsB;AAAA,EACtB,YAAY;AAAA,IACX,MAAM;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,sCAAsC,gFAAgF;AAAA,IACjJ;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,uCAAuC,yGAAyG;AAAA,IAC3K;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,MACN,MAAM,CAAC,UAAU,aAAa,OAAO;AAAA,MACrC,kBAAkB;AAAA,QACjB,IAAI,SAAS,uDAAuD,+DAA+D;AAAA,QACnI,IAAI,SAAS,0DAA0D,wDAAwD;AAAA,QAC/H,IAAI,SAAS,sDAAsD,8DAA8D;AAAA,MAClI;AAAA,MACA,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,gDAAgD,2IAA+I;AAAA,IAC1N;AAAA,IACA,QAAQ;AAAA,MACP,MAAM;AAAA,MACN,MAAM,CAAC,UAAU,UAAU,OAAO;AAAA,MAClC,kBAAkB;AAAA,QACjB,IAAI,SAAS,+CAA+C,yDAAyD;AAAA,QACrH,IAAI,SAAS,+CAA+C,kGAAkG;AAAA,QAC9J,IAAI,SAAS,8CAA8C,wDAAwD;AAAA,MACpH;AAAA,MACA,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,wCAAwC,uIAA2I;AAAA,IAC9M;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,MAAM,CAAC,UAAU,aAAa,KAAK;AAAA,MACnC,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,0CAA0C,6GAA6G;AAAA,IAClL;AAAA,IACA,kBAAkB;AAAA,MACjB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,kDAAkD,qGAAqG;AAAA,IAClL;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,IAAI,SAAS,uCAAuC,qEAAqE;AAAA,IACvI;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,uCAAuC,uFAAuF;AAAA,IACzJ;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,uCAAuC,+EAA+E;AAAA,IACjJ;AAAA,EACD;AACD;AAEA,MAAM,WAAwB,QAAQ,UAAU,YAAY;AAC5D,SAAS,qBAAqB,IAAI,SAAS,6BAA6B,+DAA+D;AAEvI,MAAM,eAA4B;AAAA,EACjC,MAAM;AAAA,EACN,MAAM;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,kBAAkB;AAAA,IACjB,IAAI,SAAS,gCAAgC,iFAAmF;AAAA,IAChI,IAAI,SAAS,+BAA+B,+EAAiF;AAAA,IAC7H,IAAI,SAAS,+BAA+B,8BAA8B;AAAA,EAC3E;AAAA,EACA,aAAa,IAAI,SAAS,+BAA+B,6BAA8B;AACxF;AAEA,MAAM,QAAqB;AAAA,EAC1B,OAAO;AAAA,IACN;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,YAAY;AAAA,QACX,MAAM;AAAA,QACN,WAAW;AAAA,UACV,MAAM,CAAC,WAAW,QAAQ;AAAA,UAC1B,SAAS;AAAA,UACT,aAAa,IAAI,SAAS,oCAAoC,oHAAoH;AAAA,QACnL;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,iBAAiB;AAAA,IAChB;AAAA,MACC,MAAM,EAAE,MAAM,SAAS,WAAW,KAAK;AAAA,MACvC,aAAa,IAAI,SAAS,uCAAuC,2CAA2C;AAAA,IAC7G;AAAA,IACA;AAAA,MACC,MAAM,EAAE,MAAM,QAAQ,WAAW,KAAK;AAAA,MACtC,aAAa,IAAI,SAAS,sCAAsC,0CAA0C;AAAA,IAC3G;AAAA,EACD;AAAA,EACA,aAAa,IAAI,SAAS,0BAA0B,iJAAiJ;AACtM;AAEA,MAAM,WAAwB;AAAA,EAC7B,MAAM;AAAA,EACN,MAAM,CAAC,OAAO;AAAA,EACd,SAAS;AAAA,EACT,aAAa,IAAI,SAAS,yBAAyB,8EAA8E;AAClI;AAEA,MAAM,UAAuB;AAAA,EAC5B,OAAO;AAAA,IACN;AAAA,MACC,OAAO;AAAA,QACN;AAAA,UACC,MAAM;AAAA,QACP;AAAA,QACA;AAAA,UACC,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,UACA,aAAa,IAAI,SAAS,2BAA2B,sFAAsF;AAAA,QAC5I;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,UAAU,CAAC,SAAS,SAAS;AAAA,MAC7B,YAAY;AAAA,QACX,OAAO;AAAA,UACN,OAAO;AAAA,YACN;AAAA,cACC,MAAM;AAAA,YACP;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,gBACN,MAAM;AAAA,cACP;AAAA,cACA,aAAa,IAAI,SAAS,2BAA2B,sFAAsF;AAAA,YAC5I;AAAA,UACD;AAAA,UACA,aAAa,IAAI,SAAS,yCAAyC,0BAA0B;AAAA,QAC9F;AAAA,QACA,SAAS;AAAA,UACR,MAAM;AAAA,UACN,MAAM,CAAC,UAAU,UAAU,MAAM;AAAA,UACjC,kBAAkB;AAAA,YACjB,IAAI,SAAS,mCAAmC,oGAAqG;AAAA,YACrJ,IAAI,SAAS,mCAAmC,kGAAoG;AAAA,YACpJ,IAAI,SAAS,iCAAiC,gGAAiG;AAAA,UAChJ;AAAA,UACA,SAAS;AAAA,UACT,aAAa,IAAI,SAAS,yCAAyC,yCAAyC;AAAA,QAC7G;AAAA,MACD;AAAA,IAED;AAAA,EACD;AAAA,EACA,aAAa,IAAI,SAAS,sBAAsB,4EAA4E;AAC7H;AAEA,MAAM,OAAoB;AAAA,EACzB,MAAM;AAAA,EACN,OAAO;AAAA,IACN,OAAO;AAAA,MACN;AAAA,QACC,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,UAAU,CAAC,SAAS,SAAS;AAAA,QAC7B,YAAY;AAAA,UACX,OAAO;AAAA,YACN,MAAM;AAAA,YACN,aAAa,IAAI,SAAS,sCAAsC,2BAA2B;AAAA,UAC5F;AAAA,UACA,SAAS;AAAA,YACR,MAAM;AAAA,YACN,MAAM,CAAC,UAAU,UAAU,MAAM;AAAA,YACjC,kBAAkB;AAAA,cACjB,IAAI,SAAS,mCAAmC,oGAAqG;AAAA,cACrJ,IAAI,SAAS,mCAAmC,kGAAoG;AAAA,cACpJ,IAAI,SAAS,iCAAiC,gGAAiG;AAAA,YAChJ;AAAA,YACA,SAAS;AAAA,YACT,aAAa,IAAI,SAAS,sCAAsC,0CAA0C;AAAA,UAC3G;AAAA,QACD;AAAA,MAED;AAAA,IACD;AAAA,EACD;AAAA,EACA,aAAa,IAAI,SAAS,yBAAyB,4DAA4D;AAChH;AAEA,MAAM,QAAqB;AAAA,EAC1B,MAAM;AAAA,EACN,aAAa,IAAI,SAAS,0BAA0B,iCAAiC;AACtF;AAEA,MAAM,UAAuB;AAAA,EAC5B,MAAM;AAAA,EACN,MAAM,CAAC,OAAO;AAAA,EACd,aAAa,IAAI,SAAS,sBAAsB,8BAA+B;AAChF;AAEA,MAAM,aAA0B;AAAA,EAC/B,MAAM;AAAA,EACN,aAAa,IAAI,SAAS,+BAA+B,uFAAuF;AAAA,EAChJ,oBAAoB,IAAI,SAAS,0CAA0C,8JAA8J;AAC1O;AAEA,MAAM,aAA0B;AAAA,EAC/B,MAAM;AAAA,EACN,sBAAsB;AAAA,EACtB,YAAY;AAAA,IACX,mBAAmB;AAAA,MAClB,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,sCAAsC,gDAAgD;AAAA,MAChH,SAAS;AAAA,IACV;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,MAAM,CAAC,WAAW,YAAY;AAAA,MAC9B,aAAa,IAAI,SAAS,0BAA0B,kIAAkI;AAAA,MACtL,SAAS;AAAA,IACV;AAAA,IACA,eAAe;AAAA,MACd,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,kCAAkC,6EAA6E;AAAA,MACzI,SAAS;AAAA,IACV;AAAA,EACD;AAAA,EACA,aAAa,IAAI,SAAS,+BAA+B,gCAAiC;AAC3F;AAEA,MAAM,0BAA0B,aAAa;AAC7C,MAAM,UAAuB,QAAQ,UAAU,wBAAwB,OAAO;AAC9E,MAAM,oBAAoB,QAAQ;AAClC,kBAAkB,QAAQ,QAAQ,UAAU,wBAAwB,kBAAkB;AAEtF,MAAM,oBAAiC;AAAA,EACtC,MAAM;AAAA,EACN,sBAAsB;AAAA,EACtB,YAAY;AAAA,IACX,OAAO;AAAA,MACN,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,8BAA8B,kBAAkB;AAAA,IAC3E;AAAA,IACA,UAAU;AAAA,MACT,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,6BAA6B,iBAAkB;AAAA,MACzE,oBAAoB,IAAI,SAAS,wCAAwC,yEAA0E;AAAA,IACpJ;AAAA,IACA,YAAY,QAAQ,UAAU,UAAU;AAAA,IACxC,OAAO,QAAQ,UAAU,KAAK;AAAA,IAC9B,cAAc;AAAA,MACb,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,+BAA+B,2EAA2E;AAAA,MACpI,SAAS;AAAA,IACV;AAAA,IACA,eAAe;AAAA,MACd,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,kCAAkC,uEAAuE;AAAA,MACnI,SAAS;AAAA,IACV;AAAA,IACA,cAAc,QAAQ,UAAU,YAAY;AAAA,IAC5C,MAAM,QAAQ,UAAU,IAAI;AAAA,IAC5B,MAAM,QAAQ,UAAU,IAAI;AAAA,IAC5B;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,6BAA6B,oIAAoI;AAAA,IAC5L;AAAA,IACA,YAAY,QAAQ,UAAU,UAAU;AAAA,IACxC,WAAW,QAAQ,UAAU,SAAS;AAAA,IACtC,cAAc,QAAQ,UAAU,YAAY;AAAA,IAC5C,QAAQ,QAAQ,UAAU,MAAM;AAAA,EACjC;AACD;AAEA,MAAM,kBAAiC,CAAC;AACxC,uBAAuB,QAAQ,EAAE,KAAK,MAAM;AAC3C,wBAAsB;AACvB,CAAC;AAEM,SAAS,wBAAwB;AACvC,aAAWC,aAAY,uBAAuB,IAAI,GAAG;AAEpD,QAAI,gBAAgB,KAAK,CAAAC,YAAU;AAClC,aAAOA,QAAO,YAAY,MAAM,MAAM,OAAOA,QAAO,YAAY,KAAK,KAAK,KAAK,aAAW,YAAYD,UAAS,QAAQ,IAAI;AAAA,IAC5H,CAAC,GAAG;AACH;AAAA,IACD;AAEA,UAAMC,UAAsB,QAAQ,UAAU,iBAAiB;AAC/D,UAAM,mBAAmBA,QAAO;AAEhC,qBAAiB,OAAO;AAAA,MACvB,MAAM;AAAA,MACN,aAAa,IAAI,SAAS,6CAA6C,4BAA4B;AAAA,MACnG,MAAM,CAACD,UAAS,QAAQ;AAAA,IACzB;AACA,QAAIA,UAAS,UAAU;AACtB,MAAAC,QAAO,WAAWD,UAAS,SAAS,MAAM;AAAA,IAC3C,OAAO;AACN,MAAAC,QAAO,WAAW,CAAC;AAAA,IACpB;AAEA,IAAAA,QAAO,SAAS,KAAK,MAAM;AAC3B,QAAID,UAAS,YAAY;AACxB,iBAAW,OAAO,OAAO,KAAKA,UAAS,UAAU,GAAG;AACnD,cAAM,WAAWA,UAAS,WAAW,GAAG;AACxC,yBAAiB,GAAG,IAAI,QAAQ,UAAU,QAAQ;AAAA,MACnD;AAAA,IACD;AACA,kBAAcC,OAAM;AACpB,oBAAgB,KAAKA,OAAM;AAAA,EAC5B;AACD;AAjCgB;AAmChB,MAAM,YAAY,QAAQ,UAAU,iBAAiB;AACrD,UAAU,WAAY,YAAY;AAAA,EACjC,MAAM;AAAA,EACN,oBAAoB,IAAI,SAAS,yCAAyC,2HAA2H;AACtM;AACA,IAAI,CAAC,UAAU,UAAU;AACxB,YAAU,WAAW,CAAC;AACvB;AACA,UAAU,SAAS,KAAK,WAAW;AACnC,gBAAgB,KAAK,SAAS;AAE9B,MAAM,cAAc,QAAQ,UAAU,uBAAuB;AAC7D,MAAM,kBAA+B,YAAY;AACjD,gBAAgB,WAAW,CAAC,OAAO;AACnC,MAAM,4BAA4B,gBAAgB;AAClD,0BAA0B,QAAQ,QAAQ,UAAU,KAAK;AACzD,0BAA0B,UAAU,QAAQ,UAAU,OAAO;AAC7D,0BAA0B,OAAO,QAAQ,UAAU,IAAI;AACvD,0BAA0B,iBAAiB,QAAQ,UAAU,YAAY;AACzE,0BAA0B,YAAY;AACtC,0BAA0B,OAAO,QAAQ,UAAU,IAAI;AACvD,0BAA0B,eAAe;AACzC,0BAA0B,aAAa,QAAQ,UAAU,UAAU;AACnE,0BAA0B,OAAO,QAAQ,UAAU,QAAQ;AAC3D,0BAA0B,eAAe,QAAQ,UAAU,YAAY;AACvE,0BAA0B,WAAW;AACrC,0BAA0B,OAAO,QAAQ,UAAU,IAAI;AACvD,0BAA0B,QAAQ,QAAQ,UAAU,KAAK;AACzD,0BAA0B,aAAa,QAAQ,UAAU,UAAU;AACnE,0BAA0B,SAAS;AACnC,0BAA0B,SAAS,qBAAqB,IAAI;AAAA,EAC3D;AAAA,EACA;AACD;AAEA,MAAM,cAAc,QAAQ,UAAU,eAAe;AACrD,gBAAgB,UAAU;AAAA,EACzB,OAAO;AAAA,EACP,MAAM;AAAA,EACN,SAAS;AAAA,EACT,gBAAgB,CAAC;AAClB;AACA,YAAY,eAAe,qBAAqB,IAAI;AAAA,EACnD;AAAA,EACA;AACD;AACA,0BAA0B,YAAY,qBAAqB,IAAI;AAAA,EAC9D;AAAA,EACA;AACD;AACA,0BAA0B,iBAAiB,qBAAqB,IAAI;AAAA,EACnE;AAAA,EACA;AACD;AACA,0BAA0B,eAAe,qBAAqB,IAAI;AAAA,EACjE;AAAA,EACA;AACD;AACA,0BAA0B,cAAc,qBAAqB,IAAI;AAAA,EAChE;AAAA,EACA;AACD;AAGA,YAAY,WAAY,OAAO;AAAA,EAC9B,MAAM;AAAA,EACN,MAAM,CAAC,SAAS;AAAA,EAChB,SAAS;AAAA,EACT,aAAa,IAAI,SAAS,yBAAyB,8EAA8E;AAClI;AACA,YAAY,SAAU,KAAK,SAAS;AACpC,YAAY,SAAU,KAAK,MAAM;AAEjC,gBAAgB,KAAK,WAAW;AAEhC,gBAAgB,KAAK;AAAA,EACpB,MAAM;AACP,CAAC;AAED,MAAM,+CAA+C,YAAY,wBAAwB;AACzF,MAAM,QAAQ,6CAA6C;AAC3D,MAAM,QAAQ;AAAA,EACb,OAAO;AACR;AAEA,6CAA6C,SAAS,aAAa,YAAa;AAEhF,YAAY,qBAAqB,WAAY,iBAAiB,QAAQ,UAAU,YAAY;AAC5F,YAAY,qBAAqB,WAAY,OAAO,QAAQ,UAAU,IAAI;AAC1E,YAAY,QAAQ,WAAY,QAAQ;AAAA,EACvC,MAAM;AACP;AAEA,6CAA6C,iBAAiB,QAAQ,UAAU,YAAY;AAC5F,6CAA6C,OAAO,QAAQ,UAAU,QAAQ;AAC9E,6CAA6C,QAAQ,QAAQ,UAAU,KAAK;AAC5E,6CAA6C,eAAe,QAAQ,UAAU,YAAY;AAC1F,6CAA6C,iBAAiB,qBAAqB,IAAI;AAAA,EACtF;AAAA,EACA;AACD;AACA,6CAA6C,aAAa,qBAAqB,IAAI;AAAA,EAClF;AAAA,EACA;AACD;AAEA,MAAM,oCAAoC,QAAQ,UAAU,YAAY,uBAAuB;AAC/F,OAAO,kCAAkC,WAAY;AACrD,kCAAkC,uBAAuB;AACzD,YAAY,oCAAoC;AAChD,6CAA6C,UAAU,QAAQ,UAAU,OAAO;AAEhF,MAAM,SAAsB;AAAA,EAC3B,OAAO;AAAA,IACN;AAAA,MACC,SAAS;AAAA,QACR;AAAA,UACC,MAAM;AAAA,UACN,UAAU,CAAC,SAAS;AAAA,UACpB,YAAY;AAAA,YACX,SAAS,QAAQ,UAAU,OAAO;AAAA,YAClC,SAAS;AAAA,cACR,QAAQ;AAAA,cACR,eAAe,IAAI,SAAS,sBAAsB,wCAAwC;AAAA,YAC3F;AAAA,YACA,KAAK;AAAA,cACJ,QAAQ;AAAA,cACR,eAAe,IAAI,SAAS,kBAAkB,oCAAoC;AAAA,YACnF;AAAA,YACA,OAAO;AAAA,cACN,QAAQ;AAAA,cACR,eAAe,IAAI,SAAS,oBAAoB,sCAAsC;AAAA,YACvF;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,OAAO,cAAc;AAErB,SAAS,0BAA0B,WAA2B,UAAkB;AAC/E,QAAM,gBAAgB,UAAU,QAAQ,EAAE;AAC1C,MAAI,eAAe;AAClB,WAAO,KAAK,aAAa,EAAE,QAAQ,UAAQ;AAC1C,gCAA0B,eAAe,IAAI;AAAA,IAC9C,CAAC;AAAA,EACF,OAAO;AACN,+BAA2B,+BAA+B,UAAU,QAAQ,CAAC;AAAA,EAC9E;AACD;AATS;AAWT,OAAO,oBAAoB,WAAW,EAAE,QAAQ,SAAO;AACtD,QAAM,SAAS,MAAM;AACrB,cAAY,MAAM,IAAI,YAAY,GAAG;AACrC,SAAO,YAAY,GAAG;AACtB,4BAA0B,aAAa,MAAM;AAC9C,CAAC;AACD,cAAc,MAAM;AAEb,SAAS,wBAAwB;AACvC,MAAI;AACH,UAAM,aAAa,uBAAuB,KAAK,EAAE,IAAI,SAAO,MAAM,GAAG;AACrE,gBAAY,oBAAoB,MAAO,CAAC,EAAE,OAAO;AACjD,IAAC,YAAY,oBAAoB,MAAO,CAAC,EAAE,MAAsB,MAAO,CAAC,EAAE,OAAO;AAAA,EACnF,SAAS,KAAK;AACb,YAAQ,IAAI,uCAAuC;AAAA,EACpD;AACD;AARgB;AAUhB,uBAAuB,QAAQ,EAAE,KAAK,MAAM;AAC3C,wBAAsB;AACvB,CAAC;AAED,IAAO,wBAAQ;",
  "names": ["icon", "taskType", "schema"]
}
