{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/taskService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport type { IWorkspaceFolder } from \"../../../../platform/workspace/common/workspace.js\";\nimport { type ITaskFilter, ITaskService } from \"../common/taskService.js\";\nimport type { ITaskSystem } from \"../common/taskSystem.js\";\nimport { ExecutionEngine } from \"../common/tasks.js\";\nimport {\n\tAbstractTaskService,\n\ttype IWorkspaceFolderConfigurationResult,\n} from \"./abstractTaskService.js\";\n\nexport class TaskService extends AbstractTaskService {\n\tprivate static readonly ProcessTaskSystemSupportMessage = nls.localize(\n\t\t\"taskService.processTaskSystem\",\n\t\t\"Process task system is not support in the web.\",\n\t);\n\n\tprotected _getTaskSystem(): ITaskSystem {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem;\n\t\t}\n\t\tif (this.executionEngine !== ExecutionEngine.Terminal) {\n\t\t\tthrow new Error(TaskService.ProcessTaskSystemSupportMessage);\n\t\t}\n\t\tthis._taskSystem = this._createTerminalTaskSystem();\n\t\tthis._taskSystemListeners = [\n\t\t\tthis._taskSystem.onDidStateChange((event) => {\n\t\t\t\tthis._taskRunningState.set(this._taskSystem!.isActiveSync());\n\t\t\t\tthis._onDidStateChange.fire(event);\n\t\t\t}),\n\t\t];\n\t\treturn this._taskSystem;\n\t}\n\n\tprotected _computeLegacyConfiguration(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t): Promise<IWorkspaceFolderConfigurationResult> {\n\t\tthrow new Error(TaskService.ProcessTaskSystemSupportMessage);\n\t}\n\n\tprotected _versionAndEngineCompatible(filter?: ITaskFilter): boolean {\n\t\treturn this.executionEngine === ExecutionEngine.Terminal;\n\t}\n}\n\nregisterSingleton(ITaskService, TaskService, InstantiationType.Delayed);\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAA2B,oBAAoB;AAE/C,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,OAEM;AAEA,MAAM,oBAAoB,oBAAoB;AAAA,EAnBrD,OAmBqD;AAAA;AAAA;AAAA,EACpD,OAAwB,kCAAkC,IAAI;AAAA,IAC7D;AAAA,IACA;AAAA,EACD;AAAA,EAEU,iBAA8B;AACvC,QAAI,KAAK,aAAa;AACrB,aAAO,KAAK;AAAA,IACb;AACA,QAAI,KAAK,oBAAoB,gBAAgB,UAAU;AACtD,YAAM,IAAI,MAAM,YAAY,+BAA+B;AAAA,IAC5D;AACA,SAAK,cAAc,KAAK,0BAA0B;AAClD,SAAK,uBAAuB;AAAA,MAC3B,KAAK,YAAY,iBAAiB,CAAC,UAAU;AAC5C,aAAK,kBAAkB,IAAI,KAAK,YAAa,aAAa,CAAC;AAC3D,aAAK,kBAAkB,KAAK,KAAK;AAAA,MAClC,CAAC;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEU,4BACT,iBAC+C;AAC/C,UAAM,IAAI,MAAM,YAAY,+BAA+B;AAAA,EAC5D;AAAA,EAEU,4BAA4B,QAA+B;AACpE,WAAO,KAAK,oBAAoB,gBAAgB;AAAA,EACjD;AACD;AAEA,kBAAkB,cAAc,aAAa,kBAAkB,OAAO;",
  "names": []
}
