{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/taskQuickPick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as Objects from '../../../../base/common/objects.js';\nimport { Task, ContributedTask, CustomTask, ConfiguringTask, TaskSorter, KeyedTaskIdentifier } from '../common/tasks.js';\nimport { IWorkspace, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport * as Types from '../../../../base/common/types.js';\nimport { ITaskService, IWorkspaceFolderTaskResult } from '../common/taskService.js';\nimport { IQuickPickItem, QuickPickInput, IQuickPick, IQuickInputButton, IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { getColorClass, createColorStyleElement } from '../../terminal/browser/terminalIcon.js';\nimport { TaskQuickPickEntryType } from './abstractTaskService.js';\nimport { showWithPinnedItems } from '../../../../platform/quickinput/browser/quickPickPin.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\n\nexport const QUICKOPEN_DETAIL_CONFIG = 'task.quickOpen.detail';\nexport const QUICKOPEN_SKIP_CONFIG = 'task.quickOpen.skip';\nexport function isWorkspaceFolder(folder: IWorkspace | IWorkspaceFolder): folder is IWorkspaceFolder {\n\treturn 'uri' in folder;\n}\n\nexport interface ITaskQuickPickEntry extends IQuickPickItem {\n\ttask: Task | undefined | null;\n}\n\nexport interface ITaskTwoLevelQuickPickEntry extends IQuickPickItem {\n\ttask: Task | ConfiguringTask | string | undefined | null;\n\tsettingType?: string;\n}\n\nconst SHOW_ALL: string = nls.localize('taskQuickPick.showAll', \"Show All Tasks...\");\n\nexport const configureTaskIcon = registerIcon('tasks-list-configure', Codicon.gear, nls.localize('configureTaskIcon', 'Configuration icon in the tasks selection list.'));\nconst removeTaskIcon = registerIcon('tasks-remove', Codicon.close, nls.localize('removeTaskIcon', 'Icon for remove in the tasks selection list.'));\n\nconst runTaskStorageKey = 'runTaskStorageKey';\n\nexport class TaskQuickPick extends Disposable {\n\tprivate _sorter: TaskSorter;\n\tprivate _topLevelEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] | undefined;\n\tconstructor(\n\t\t@ITaskService private _taskService: ITaskService,\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IQuickInputService private _quickInputService: IQuickInputService,\n\t\t@INotificationService private _notificationService: INotificationService,\n\t\t@IThemeService private _themeService: IThemeService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IStorageService private _storageService: IStorageService) {\n\t\tsuper();\n\t\tthis._sorter = this._taskService.createSorter();\n\t}\n\n\tprivate _showDetail(): boolean {\n\t\t// Ensure invalid values get converted into boolean values\n\t\treturn !!this._configurationService.getValue(QUICKOPEN_DETAIL_CONFIG);\n\t}\n\n\tprivate _guessTaskLabel(task: Task | ConfiguringTask): string {\n\t\tif (task._label) {\n\t\t\treturn task._label;\n\t\t}\n\t\tif (ConfiguringTask.is(task)) {\n\t\t\tlet label: string = task.configures.type;\n\t\t\tconst configures: Partial<KeyedTaskIdentifier> = Objects.deepClone(task.configures);\n\t\t\tdelete configures['_key'];\n\t\t\tdelete configures['type'];\n\t\t\tObject.keys(configures).forEach(key => label += `: ${configures[key]}`);\n\t\t\treturn label;\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic static getTaskLabelWithIcon(task: Task | ConfiguringTask, labelGuess?: string): string {\n\t\tconst label = labelGuess || task._label;\n\t\tconst icon = task.configurationProperties.icon;\n\t\tif (!icon) {\n\t\t\treturn `${label}`;\n\t\t}\n\t\treturn icon.id ? `$(${icon.id}) ${label}` : `$(${Codicon.tools.id}) ${label}`;\n\t}\n\n\tpublic static applyColorStyles(task: Task | ConfiguringTask, entry: TaskQuickPickEntryType | ITaskTwoLevelQuickPickEntry, themeService: IThemeService): IDisposable | undefined {\n\t\tif (task.configurationProperties.icon?.color) {\n\t\t\tconst colorTheme = themeService.getColorTheme();\n\t\t\tconst disposable = createColorStyleElement(colorTheme);\n\t\t\tentry.iconClasses = [getColorClass(task.configurationProperties.icon.color)];\n\t\t\treturn disposable;\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate _createTaskEntry(task: Task | ConfiguringTask, extraButtons: IQuickInputButton[] = []): ITaskTwoLevelQuickPickEntry {\n\t\tconst buttons: IQuickInputButton[] = [\n\t\t\t{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', \"Configure Task\") },\n\t\t\t...extraButtons\n\t\t];\n\t\tconst entry: ITaskTwoLevelQuickPickEntry = { label: TaskQuickPick.getTaskLabelWithIcon(task, this._guessTaskLabel(task)), description: this._taskService.getTaskDescription(task), task, detail: this._showDetail() ? task.configurationProperties.detail : undefined, buttons };\n\t\tconst disposable = TaskQuickPick.applyColorStyles(task, entry, this._themeService);\n\t\tif (disposable) {\n\t\t\tthis._register(disposable);\n\t\t}\n\t\treturn entry;\n\t}\n\n\tprivate _createEntriesForGroup(entries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[], tasks: (Task | ConfiguringTask)[],\n\t\tgroupLabel: string, extraButtons: IQuickInputButton[] = []) {\n\t\tentries.push({ type: 'separator', label: groupLabel });\n\t\ttasks.forEach(task => {\n\t\t\tif (!task.configurationProperties.hide) {\n\t\t\t\tentries.push(this._createTaskEntry(task, extraButtons));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _createTypeEntries(entries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[], types: string[]) {\n\t\tentries.push({ type: 'separator', label: nls.localize('contributedTasks', \"contributed\") });\n\t\ttypes.forEach(type => {\n\t\t\tentries.push({ label: `$(folder) ${type}`, task: type, ariaLabel: nls.localize('taskType', \"All {0} tasks\", type) });\n\t\t});\n\t\tentries.push({ label: SHOW_ALL, task: SHOW_ALL, alwaysShow: true });\n\t}\n\n\tprivate _handleFolderTaskResult(result: Map<string, IWorkspaceFolderTaskResult>): (Task | ConfiguringTask)[] {\n\t\tconst tasks: (Task | ConfiguringTask)[] = [];\n\t\tArray.from(result).forEach(([key, folderTasks]) => {\n\t\t\tif (folderTasks.set) {\n\t\t\t\ttasks.push(...folderTasks.set.tasks);\n\t\t\t}\n\t\t\tif (folderTasks.configurations) {\n\t\t\t\tfor (const configuration in folderTasks.configurations.byIdentifier) {\n\t\t\t\t\ttasks.push(folderTasks.configurations.byIdentifier[configuration]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn tasks;\n\t}\n\n\tprivate _dedupeConfiguredAndRecent(recentTasks: (Task | ConfiguringTask)[], configuredTasks: (Task | ConfiguringTask)[]): { configuredTasks: (Task | ConfiguringTask)[]; recentTasks: (Task | ConfiguringTask)[] } {\n\t\tlet dedupedConfiguredTasks: (Task | ConfiguringTask)[] = [];\n\t\tconst foundRecentTasks: boolean[] = Array(recentTasks.length).fill(false);\n\t\tfor (let j = 0; j < configuredTasks.length; j++) {\n\t\t\tconst workspaceFolder = configuredTasks[j].getWorkspaceFolder()?.uri.toString();\n\t\t\tconst definition = configuredTasks[j].getDefinition()?._key;\n\t\t\tconst type = configuredTasks[j].type;\n\t\t\tconst label = configuredTasks[j]._label;\n\t\t\tconst recentKey = configuredTasks[j].getKey();\n\t\t\tconst findIndex = recentTasks.findIndex((value) => {\n\t\t\t\treturn (workspaceFolder && definition && value.getWorkspaceFolder()?.uri.toString() === workspaceFolder\n\t\t\t\t\t&& ((value.getDefinition()?._key === definition) || (value.type === type && value._label === label)))\n\t\t\t\t\t|| (recentKey && value.getKey() === recentKey);\n\t\t\t});\n\t\t\tif (findIndex === -1) {\n\t\t\t\tdedupedConfiguredTasks.push(configuredTasks[j]);\n\t\t\t} else {\n\t\t\t\trecentTasks[findIndex] = configuredTasks[j];\n\t\t\t\tfoundRecentTasks[findIndex] = true;\n\t\t\t}\n\t\t}\n\t\tdedupedConfiguredTasks = dedupedConfiguredTasks.sort((a, b) => this._sorter.compare(a, b));\n\t\tconst prunedRecentTasks: (Task | ConfiguringTask)[] = [];\n\t\tfor (let i = 0; i < recentTasks.length; i++) {\n\t\t\tif (foundRecentTasks[i] || ConfiguringTask.is(recentTasks[i])) {\n\t\t\t\tprunedRecentTasks.push(recentTasks[i]);\n\t\t\t}\n\t\t}\n\t\treturn { configuredTasks: dedupedConfiguredTasks, recentTasks: prunedRecentTasks };\n\t}\n\n\tpublic async getTopLevelEntries(defaultEntry?: ITaskQuickPickEntry): Promise<{ entries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[]; isSingleConfigured?: Task | ConfiguringTask }> {\n\t\tif (this._topLevelEntries !== undefined) {\n\t\t\treturn { entries: this._topLevelEntries };\n\t\t}\n\t\tlet recentTasks: (Task | ConfiguringTask)[] = (await this._taskService.getSavedTasks('historical')).reverse();\n\t\tconst configuredTasks: (Task | ConfiguringTask)[] = this._handleFolderTaskResult(await this._taskService.getWorkspaceTasks());\n\t\tconst extensionTaskTypes = this._taskService.taskTypes();\n\t\tthis._topLevelEntries = [];\n\t\t// Dedupe will update recent tasks if they've changed in tasks.json.\n\t\tconst dedupeAndPrune = this._dedupeConfiguredAndRecent(recentTasks, configuredTasks);\n\t\tconst dedupedConfiguredTasks: (Task | ConfiguringTask)[] = dedupeAndPrune.configuredTasks;\n\t\trecentTasks = dedupeAndPrune.recentTasks;\n\t\tif (recentTasks.length > 0) {\n\t\t\tconst removeRecentButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(removeTaskIcon),\n\t\t\t\ttooltip: nls.localize('removeRecent', 'Remove Recently Used Task')\n\t\t\t};\n\t\t\tthis._createEntriesForGroup(this._topLevelEntries, recentTasks, nls.localize('recentlyUsed', 'recently used'), [removeRecentButton]);\n\t\t}\n\t\tif (configuredTasks.length > 0) {\n\t\t\tif (dedupedConfiguredTasks.length > 0) {\n\t\t\t\tthis._createEntriesForGroup(this._topLevelEntries, dedupedConfiguredTasks, nls.localize('configured', 'configured'));\n\t\t\t}\n\t\t}\n\n\t\tif (defaultEntry && (configuredTasks.length === 0)) {\n\t\t\tthis._topLevelEntries.push({ type: 'separator', label: nls.localize('configured', 'configured') });\n\t\t\tthis._topLevelEntries.push(defaultEntry);\n\t\t}\n\n\t\tif (extensionTaskTypes.length > 0) {\n\t\t\tthis._createTypeEntries(this._topLevelEntries, extensionTaskTypes);\n\t\t}\n\t\treturn { entries: this._topLevelEntries, isSingleConfigured: configuredTasks.length === 1 ? configuredTasks[0] : undefined };\n\t}\n\n\tpublic async handleSettingOption(selectedType: string) {\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: nls.localize('TaskQuickPick.changeSettingDetails',\n\t\t\t\t\"Task detection for {0} tasks causes files in any workspace you open to be run as code. Enabling {0} task detection is a user setting and will apply to any workspace you open. \\n\\n Do you want to enable {0} task detection for all workspaces?\", selectedType),\n\t\t\tcancelButton: nls.localize('TaskQuickPick.changeSettingNo', \"No\")\n\t\t});\n\t\tif (confirmed) {\n\t\t\tawait this._configurationService.updateValue(`${selectedType}.autoDetect`, 'on');\n\t\t\tawait new Promise<void>(resolve => setTimeout(() => resolve(), 100));\n\t\t\treturn this.show(nls.localize('TaskService.pickRunTask', 'Select the task to run'), undefined, selectedType);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async show(placeHolder: string, defaultEntry?: ITaskQuickPickEntry, startAtType?: string, name?: string): Promise<Task | undefined | null> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(this._quickInputService.createQuickPick<ITaskTwoLevelQuickPickEntry>({ useSeparators: true }));\n\t\tpicker.placeholder = placeHolder;\n\t\tpicker.matchOnDescription = true;\n\t\tpicker.ignoreFocusOut = false;\n\t\tdisposables.add(picker.onDidTriggerItemButton(async (context) => {\n\t\t\tconst task = context.item.task;\n\t\t\tif (context.button.iconClass === ThemeIcon.asClassName(removeTaskIcon)) {\n\t\t\t\tconst key = (task && !Types.isString(task)) ? task.getKey() : undefined;\n\t\t\t\tif (key) {\n\t\t\t\t\tthis._taskService.removeRecentlyUsedTask(key);\n\t\t\t\t}\n\t\t\t\tconst indexToRemove = picker.items.indexOf(context.item);\n\t\t\t\tif (indexToRemove >= 0) {\n\t\t\t\t\tpicker.items = [...picker.items.slice(0, indexToRemove), ...picker.items.slice(indexToRemove + 1)];\n\t\t\t\t}\n\t\t\t} else if (context.button.iconClass === ThemeIcon.asClassName(configureTaskIcon)) {\n\t\t\t\tthis._quickInputService.cancel();\n\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t} else if (CustomTask.is(task) || ConfiguringTask.is(task)) {\n\t\t\t\t\tlet canOpenConfig: boolean = false;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcanOpenConfig = await this._taskService.openConfig(task);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// do nothing.\n\t\t\t\t\t}\n\t\t\t\t\tif (!canOpenConfig) {\n\t\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tif (name) {\n\t\t\tpicker.value = name;\n\t\t}\n\t\tlet firstLevelTask: Task | ConfiguringTask | string | undefined | null = startAtType;\n\t\tif (!firstLevelTask) {\n\t\t\t// First show recent tasks configured tasks. Other tasks will be available at a second level\n\t\t\tconst topLevelEntriesResult = await this.getTopLevelEntries(defaultEntry);\n\t\t\tif (topLevelEntriesResult.isSingleConfigured && this._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treturn this._toTask(topLevelEntriesResult.isSingleConfigured);\n\t\t\t}\n\t\t\tconst taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] = topLevelEntriesResult.entries;\n\t\t\tfirstLevelTask = await this._doPickerFirstLevel(picker, taskQuickPickEntries, disposables);\n\t\t}\n\t\tdo {\n\t\t\tif (Types.isString(firstLevelTask)) {\n\t\t\t\tif (name) {\n\t\t\t\t\tawait this._doPickerFirstLevel(picker, (await this.getTopLevelEntries(defaultEntry)).entries, disposables);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst selectedEntry = await this.doPickerSecondLevel(picker, disposables, firstLevelTask);\n\t\t\t\t// Proceed to second level of quick pick\n\t\t\t\tif (selectedEntry && !selectedEntry.settingType && selectedEntry.task === null) {\n\t\t\t\t\t// The user has chosen to go back to the first level\n\t\t\t\t\tpicker.value = '';\n\t\t\t\t\tfirstLevelTask = await this._doPickerFirstLevel(picker, (await this.getTopLevelEntries(defaultEntry)).entries, disposables);\n\t\t\t\t} else if (selectedEntry && Types.isString(selectedEntry.settingType)) {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treturn this.handleSettingOption(selectedEntry.settingType);\n\t\t\t\t} else {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treturn (selectedEntry?.task && !Types.isString(selectedEntry?.task)) ? this._toTask(selectedEntry?.task) : undefined;\n\t\t\t\t}\n\t\t\t} else if (firstLevelTask) {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treturn this._toTask(firstLevelTask);\n\t\t\t} else {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treturn firstLevelTask;\n\t\t\t}\n\t\t} while (1);\n\t\treturn;\n\t}\n\n\n\n\tprivate async _doPickerFirstLevel(picker: IQuickPick<ITaskTwoLevelQuickPickEntry, { useSeparators: true }>, taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[], disposables: DisposableStore): Promise<Task | ConfiguringTask | string | null | undefined> {\n\t\tpicker.items = taskQuickPickEntries;\n\t\tdisposables.add(showWithPinnedItems(this._storageService, runTaskStorageKey, picker, true));\n\t\tconst firstLevelPickerResult = await new Promise<ITaskTwoLevelQuickPickEntry | undefined | null>(resolve => {\n\t\t\tdisposables.add(Event.once(picker.onDidAccept)(async () => {\n\t\t\t\tresolve(picker.selectedItems ? picker.selectedItems[0] : undefined);\n\t\t\t}));\n\t\t});\n\t\treturn firstLevelPickerResult?.task;\n\t}\n\n\tpublic async doPickerSecondLevel(picker: IQuickPick<ITaskTwoLevelQuickPickEntry, { useSeparators: true }>, disposables: DisposableStore, type: string, name?: string) {\n\t\tpicker.busy = true;\n\t\tif (type === SHOW_ALL) {\n\t\t\tconst items = (await this._taskService.tasks()).filter(t => !t.configurationProperties.hide).sort((a, b) => this._sorter.compare(a, b)).map(task => this._createTaskEntry(task));\n\t\t\titems.push(...TaskQuickPick.allSettingEntries(this._configurationService));\n\t\t\tpicker.items = items;\n\t\t} else {\n\t\t\tpicker.value = name || '';\n\t\t\tpicker.items = await this._getEntriesForProvider(type);\n\t\t}\n\t\tawait picker.show();\n\t\tpicker.busy = false;\n\t\tconst secondLevelPickerResult = await new Promise<ITaskTwoLevelQuickPickEntry | undefined | null>(resolve => {\n\t\t\tdisposables.add(Event.once(picker.onDidAccept)(async () => {\n\t\t\t\tresolve(picker.selectedItems ? picker.selectedItems[0] : undefined);\n\t\t\t}));\n\t\t});\n\t\treturn secondLevelPickerResult;\n\t}\n\n\tpublic static allSettingEntries(configurationService: IConfigurationService): (ITaskTwoLevelQuickPickEntry & { settingType: string })[] {\n\t\tconst entries: (ITaskTwoLevelQuickPickEntry & { settingType: string })[] = [];\n\t\tconst gruntEntry = TaskQuickPick.getSettingEntry(configurationService, 'grunt');\n\t\tif (gruntEntry) {\n\t\t\tentries.push(gruntEntry);\n\t\t}\n\t\tconst gulpEntry = TaskQuickPick.getSettingEntry(configurationService, 'gulp');\n\t\tif (gulpEntry) {\n\t\t\tentries.push(gulpEntry);\n\t\t}\n\t\tconst jakeEntry = TaskQuickPick.getSettingEntry(configurationService, 'jake');\n\t\tif (jakeEntry) {\n\t\t\tentries.push(jakeEntry);\n\t\t}\n\t\treturn entries;\n\t}\n\n\tpublic static getSettingEntry(configurationService: IConfigurationService, type: string): (ITaskTwoLevelQuickPickEntry & { settingType: string }) | undefined {\n\t\tif (configurationService.getValue(`${type}.autoDetect`) === 'off') {\n\t\t\treturn {\n\t\t\t\tlabel: nls.localize('TaskQuickPick.changeSettingsOptions', \"$(gear) {0} task detection is turned off. Enable {1} task detection...\",\n\t\t\t\t\ttype[0].toUpperCase() + type.slice(1), type),\n\t\t\t\ttask: null,\n\t\t\t\tsettingType: type,\n\t\t\t\talwaysShow: true\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getEntriesForProvider(type: string): Promise<QuickPickInput<ITaskTwoLevelQuickPickEntry>[]> {\n\t\tconst tasks = (await this._taskService.tasks({ type })).sort((a, b) => this._sorter.compare(a, b));\n\t\tlet taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] = [];\n\t\tif (tasks.length > 0) {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tif (!task.configurationProperties.hide) {\n\t\t\t\t\ttaskQuickPickEntries.push(this._createTaskEntry(task));\n\t\t\t\t}\n\t\t\t}\n\t\t\ttaskQuickPickEntries.push({\n\t\t\t\ttype: 'separator'\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('TaskQuickPick.goBack', 'Go back \u21A9'),\n\t\t\t\ttask: null,\n\t\t\t\talwaysShow: true\n\t\t\t});\n\t\t} else {\n\t\t\ttaskQuickPickEntries = [{\n\t\t\t\tlabel: nls.localize('TaskQuickPick.noTasksForType', 'No {0} tasks found. Go back \u21A9', type),\n\t\t\t\ttask: null,\n\t\t\t\talwaysShow: true\n\t\t\t}];\n\t\t}\n\n\t\tconst settingEntry = TaskQuickPick.getSettingEntry(this._configurationService, type);\n\t\tif (settingEntry) {\n\t\t\ttaskQuickPickEntries.push(settingEntry);\n\t\t}\n\t\treturn taskQuickPickEntries;\n\t}\n\n\tprivate async _toTask(task: Task | ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!ConfiguringTask.is(task)) {\n\t\t\treturn task;\n\t\t}\n\n\t\tconst resolvedTask = await this._taskService.tryResolveTask(task);\n\n\t\tif (!resolvedTask) {\n\t\t\tthis._notificationService.error(nls.localize('noProviderForTask', \"There is no task provider registered for tasks of type \\\"{0}\\\".\", task.type));\n\t\t}\n\t\treturn resolvedTask;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
