{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/taskQuickPick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as Objects from \"../../../../base/common/objects.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport * as Types from \"../../../../base/common/types.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { showWithPinnedItems } from \"../../../../platform/quickinput/browser/quickPickPin.js\";\nimport {\n\ttype IQuickInputButton,\n\tIQuickInputService,\n\ttype IQuickPick,\n\ttype IQuickPickItem,\n\ttype QuickPickInput,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport type {\n\tIWorkspace,\n\tIWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tcreateColorStyleElement,\n\tgetColorClass,\n} from \"../../terminal/browser/terminalIcon.js\";\nimport {\n\tITaskService,\n\ttype IWorkspaceFolderTaskResult,\n} from \"../common/taskService.js\";\nimport {\n\tConfiguringTask,\n\tContributedTask,\n\tCustomTask,\n\ttype KeyedTaskIdentifier,\n\ttype Task,\n\ttype TaskSorter,\n} from \"../common/tasks.js\";\nimport type { TaskQuickPickEntryType } from \"./abstractTaskService.js\";\n\nexport const QUICKOPEN_DETAIL_CONFIG = \"task.quickOpen.detail\";\nexport const QUICKOPEN_SKIP_CONFIG = \"task.quickOpen.skip\";\nexport function isWorkspaceFolder(\n\tfolder: IWorkspace | IWorkspaceFolder,\n): folder is IWorkspaceFolder {\n\treturn \"uri\" in folder;\n}\n\nexport interface ITaskQuickPickEntry extends IQuickPickItem {\n\ttask: Task | undefined | null;\n}\n\nexport interface ITaskTwoLevelQuickPickEntry extends IQuickPickItem {\n\ttask: Task | ConfiguringTask | string | undefined | null;\n\tsettingType?: string;\n}\n\nconst SHOW_ALL: string = nls.localize(\n\t\"taskQuickPick.showAll\",\n\t\"Show All Tasks...\",\n);\n\nexport const configureTaskIcon = registerIcon(\n\t\"tasks-list-configure\",\n\tCodicon.gear,\n\tnls.localize(\n\t\t\"configureTaskIcon\",\n\t\t\"Configuration icon in the tasks selection list.\",\n\t),\n);\nconst removeTaskIcon = registerIcon(\n\t\"tasks-remove\",\n\tCodicon.close,\n\tnls.localize(\n\t\t\"removeTaskIcon\",\n\t\t\"Icon for remove in the tasks selection list.\",\n\t),\n);\n\nconst runTaskStorageKey = \"runTaskStorageKey\";\n\nexport class TaskQuickPick extends Disposable {\n\tprivate _sorter: TaskSorter;\n\tprivate _topLevelEntries:\n\t\t| QuickPickInput<ITaskTwoLevelQuickPickEntry>[]\n\t\t| undefined;\n\tconstructor(\n\t\t@ITaskService private _taskService: ITaskService,\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IQuickInputService private _quickInputService: IQuickInputService,\n\t\t@INotificationService private _notificationService: INotificationService,\n\t\t@IThemeService private _themeService: IThemeService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IStorageService private _storageService: IStorageService) {\n\t\tsuper();\n\t\tthis._sorter = this._taskService.createSorter();\n\t}\n\n\tprivate _showDetail(): boolean {\n\t\t// Ensure invalid values get converted into boolean values\n\t\treturn !!this._configurationService.getValue(QUICKOPEN_DETAIL_CONFIG);\n\t}\n\n\tprivate _guessTaskLabel(task: Task | ConfiguringTask): string {\n\t\tif (task._label) {\n\t\t\treturn task._label;\n\t\t}\n\t\tif (ConfiguringTask.is(task)) {\n\t\t\tlet label: string = task.configures.type;\n\t\t\tconst configures: Partial<KeyedTaskIdentifier> = Objects.deepClone(\n\t\t\t\ttask.configures,\n\t\t\t);\n\t\t\tdelete configures[\"_key\"];\n\t\t\tdelete configures[\"type\"];\n\t\t\tObject.keys(configures).forEach(\n\t\t\t\t(key) => (label += `: ${configures[key]}`),\n\t\t\t);\n\t\t\treturn label;\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic static getTaskLabelWithIcon(\n\t\ttask: Task | ConfiguringTask,\n\t\tlabelGuess?: string,\n\t): string {\n\t\tconst label = labelGuess || task._label;\n\t\tconst icon = task.configurationProperties.icon;\n\t\tif (!icon) {\n\t\t\treturn `${label}`;\n\t\t}\n\t\treturn icon.id\n\t\t\t? `$(${icon.id}) ${label}`\n\t\t\t: `$(${Codicon.tools.id}) ${label}`;\n\t}\n\n\tpublic static applyColorStyles(\n\t\ttask: Task | ConfiguringTask,\n\t\tentry: TaskQuickPickEntryType | ITaskTwoLevelQuickPickEntry,\n\t\tthemeService: IThemeService,\n\t): IDisposable | undefined {\n\t\tif (task.configurationProperties.icon?.color) {\n\t\t\tconst colorTheme = themeService.getColorTheme();\n\t\t\tconst disposable = createColorStyleElement(colorTheme);\n\t\t\tentry.iconClasses = [\n\t\t\t\tgetColorClass(task.configurationProperties.icon.color),\n\t\t\t];\n\t\t\treturn disposable;\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate _createTaskEntry(\n\t\ttask: Task | ConfiguringTask,\n\t\textraButtons: IQuickInputButton[] = [],\n\t): ITaskTwoLevelQuickPickEntry {\n\t\tconst buttons: IQuickInputButton[] = [\n\t\t\t{\n\t\t\t\ticonClass: ThemeIcon.asClassName(configureTaskIcon),\n\t\t\t\ttooltip: nls.localize(\"configureTask\", \"Configure Task\"),\n\t\t\t},\n\t\t\t...extraButtons,\n\t\t];\n\t\tconst entry: ITaskTwoLevelQuickPickEntry = {\n\t\t\tlabel: TaskQuickPick.getTaskLabelWithIcon(\n\t\t\t\ttask,\n\t\t\t\tthis._guessTaskLabel(task),\n\t\t\t),\n\t\t\tdescription: this._taskService.getTaskDescription(task),\n\t\t\ttask,\n\t\t\tdetail: this._showDetail()\n\t\t\t\t? task.configurationProperties.detail\n\t\t\t\t: undefined,\n\t\t\tbuttons,\n\t\t};\n\t\tconst disposable = TaskQuickPick.applyColorStyles(\n\t\t\ttask,\n\t\t\tentry,\n\t\t\tthis._themeService,\n\t\t);\n\t\tif (disposable) {\n\t\t\tthis._register(disposable);\n\t\t}\n\t\treturn entry;\n\t}\n\n\tprivate _createEntriesForGroup(\n\t\tentries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[],\n\t\ttasks: (Task | ConfiguringTask)[],\n\t\tgroupLabel: string,\n\t\textraButtons: IQuickInputButton[] = [],\n\t) {\n\t\tentries.push({ type: \"separator\", label: groupLabel });\n\t\ttasks.forEach((task) => {\n\t\t\tif (!task.configurationProperties.hide) {\n\t\t\t\tentries.push(this._createTaskEntry(task, extraButtons));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _createTypeEntries(\n\t\tentries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[],\n\t\ttypes: string[],\n\t) {\n\t\tentries.push({\n\t\t\ttype: \"separator\",\n\t\t\tlabel: nls.localize(\"contributedTasks\", \"contributed\"),\n\t\t});\n\t\ttypes.forEach((type) => {\n\t\t\tentries.push({\n\t\t\t\tlabel: `$(folder) ${type}`,\n\t\t\t\ttask: type,\n\t\t\t\tariaLabel: nls.localize(\"taskType\", \"All {0} tasks\", type),\n\t\t\t});\n\t\t});\n\t\tentries.push({ label: SHOW_ALL, task: SHOW_ALL, alwaysShow: true });\n\t}\n\n\tprivate _handleFolderTaskResult(\n\t\tresult: Map<string, IWorkspaceFolderTaskResult>,\n\t): (Task | ConfiguringTask)[] {\n\t\tconst tasks: (Task | ConfiguringTask)[] = [];\n\t\tArray.from(result).forEach(([key, folderTasks]) => {\n\t\t\tif (folderTasks.set) {\n\t\t\t\ttasks.push(...folderTasks.set.tasks);\n\t\t\t}\n\t\t\tif (folderTasks.configurations) {\n\t\t\t\tfor (const configuration in folderTasks.configurations\n\t\t\t\t\t.byIdentifier) {\n\t\t\t\t\ttasks.push(\n\t\t\t\t\t\tfolderTasks.configurations.byIdentifier[configuration],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn tasks;\n\t}\n\n\tprivate _dedupeConfiguredAndRecent(\n\t\trecentTasks: (Task | ConfiguringTask)[],\n\t\tconfiguredTasks: (Task | ConfiguringTask)[],\n\t): {\n\t\tconfiguredTasks: (Task | ConfiguringTask)[];\n\t\trecentTasks: (Task | ConfiguringTask)[];\n\t} {\n\t\tlet dedupedConfiguredTasks: (Task | ConfiguringTask)[] = [];\n\t\tconst foundRecentTasks: boolean[] = Array(recentTasks.length).fill(\n\t\t\tfalse,\n\t\t);\n\t\tfor (let j = 0; j < configuredTasks.length; j++) {\n\t\t\tconst workspaceFolder = configuredTasks[j]\n\t\t\t\t.getWorkspaceFolder()\n\t\t\t\t?.uri.toString();\n\t\t\tconst definition = configuredTasks[j].getDefinition()?._key;\n\t\t\tconst type = configuredTasks[j].type;\n\t\t\tconst label = configuredTasks[j]._label;\n\t\t\tconst recentKey = configuredTasks[j].getKey();\n\t\t\tconst findIndex = recentTasks.findIndex((value) => {\n\t\t\t\treturn (\n\t\t\t\t\t(workspaceFolder &&\n\t\t\t\t\t\tdefinition &&\n\t\t\t\t\t\tvalue.getWorkspaceFolder()?.uri.toString() ===\n\t\t\t\t\t\t\tworkspaceFolder &&\n\t\t\t\t\t\t(value.getDefinition()?._key === definition ||\n\t\t\t\t\t\t\t(value.type === type && value._label === label))) ||\n\t\t\t\t\t(recentKey && value.getKey() === recentKey)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (findIndex === -1) {\n\t\t\t\tdedupedConfiguredTasks.push(configuredTasks[j]);\n\t\t\t} else {\n\t\t\t\trecentTasks[findIndex] = configuredTasks[j];\n\t\t\t\tfoundRecentTasks[findIndex] = true;\n\t\t\t}\n\t\t}\n\t\tdedupedConfiguredTasks = dedupedConfiguredTasks.sort((a, b) =>\n\t\t\tthis._sorter.compare(a, b),\n\t\t);\n\t\tconst prunedRecentTasks: (Task | ConfiguringTask)[] = [];\n\t\tfor (let i = 0; i < recentTasks.length; i++) {\n\t\t\tif (foundRecentTasks[i] || ConfiguringTask.is(recentTasks[i])) {\n\t\t\t\tprunedRecentTasks.push(recentTasks[i]);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tconfiguredTasks: dedupedConfiguredTasks,\n\t\t\trecentTasks: prunedRecentTasks,\n\t\t};\n\t}\n\n\tpublic async getTopLevelEntries(\n\t\tdefaultEntry?: ITaskQuickPickEntry,\n\t): Promise<{\n\t\tentries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[];\n\t\tisSingleConfigured?: Task | ConfiguringTask;\n\t}> {\n\t\tif (this._topLevelEntries !== undefined) {\n\t\t\treturn { entries: this._topLevelEntries };\n\t\t}\n\t\tlet recentTasks: (Task | ConfiguringTask)[] = (\n\t\t\tawait this._taskService.getSavedTasks(\"historical\")\n\t\t).reverse();\n\t\tconst configuredTasks: (Task | ConfiguringTask)[] =\n\t\t\tthis._handleFolderTaskResult(\n\t\t\t\tawait this._taskService.getWorkspaceTasks(),\n\t\t\t);\n\t\tconst extensionTaskTypes = this._taskService.taskTypes();\n\t\tthis._topLevelEntries = [];\n\t\t// Dedupe will update recent tasks if they've changed in tasks.json.\n\t\tconst dedupeAndPrune = this._dedupeConfiguredAndRecent(\n\t\t\trecentTasks,\n\t\t\tconfiguredTasks,\n\t\t);\n\t\tconst dedupedConfiguredTasks: (Task | ConfiguringTask)[] =\n\t\t\tdedupeAndPrune.configuredTasks;\n\t\trecentTasks = dedupeAndPrune.recentTasks;\n\t\tif (recentTasks.length > 0) {\n\t\t\tconst removeRecentButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(removeTaskIcon),\n\t\t\t\ttooltip: nls.localize(\n\t\t\t\t\t\"removeRecent\",\n\t\t\t\t\t\"Remove Recently Used Task\",\n\t\t\t\t),\n\t\t\t};\n\t\t\tthis._createEntriesForGroup(\n\t\t\t\tthis._topLevelEntries,\n\t\t\t\trecentTasks,\n\t\t\t\tnls.localize(\"recentlyUsed\", \"recently used\"),\n\t\t\t\t[removeRecentButton],\n\t\t\t);\n\t\t}\n\t\tif (configuredTasks.length > 0) {\n\t\t\tif (dedupedConfiguredTasks.length > 0) {\n\t\t\t\tthis._createEntriesForGroup(\n\t\t\t\t\tthis._topLevelEntries,\n\t\t\t\t\tdedupedConfiguredTasks,\n\t\t\t\t\tnls.localize(\"configured\", \"configured\"),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (defaultEntry && configuredTasks.length === 0) {\n\t\t\tthis._topLevelEntries.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: nls.localize(\"configured\", \"configured\"),\n\t\t\t});\n\t\t\tthis._topLevelEntries.push(defaultEntry);\n\t\t}\n\n\t\tif (extensionTaskTypes.length > 0) {\n\t\t\tthis._createTypeEntries(this._topLevelEntries, extensionTaskTypes);\n\t\t}\n\t\treturn {\n\t\t\tentries: this._topLevelEntries,\n\t\t\tisSingleConfigured:\n\t\t\t\tconfiguredTasks.length === 1 ? configuredTasks[0] : undefined,\n\t\t};\n\t}\n\n\tpublic async handleSettingOption(selectedType: string) {\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: nls.localize(\n\t\t\t\t\"TaskQuickPick.changeSettingDetails\",\n\t\t\t\t\"Task detection for {0} tasks causes files in any workspace you open to be run as code. Enabling {0} task detection is a user setting and will apply to any workspace you open. \\n\\n Do you want to enable {0} task detection for all workspaces?\",\n\t\t\t\tselectedType,\n\t\t\t),\n\t\t\tcancelButton: nls.localize(\"TaskQuickPick.changeSettingNo\", \"No\"),\n\t\t});\n\t\tif (confirmed) {\n\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t`${selectedType}.autoDetect`,\n\t\t\t\t\"on\",\n\t\t\t);\n\t\t\tawait new Promise<void>((resolve) =>\n\t\t\t\tsetTimeout(() => resolve(), 100),\n\t\t\t);\n\t\t\treturn this.show(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.pickRunTask\",\n\t\t\t\t\t\"Select the task to run\",\n\t\t\t\t),\n\t\t\t\tundefined,\n\t\t\t\tselectedType,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async show(\n\t\tplaceHolder: string,\n\t\tdefaultEntry?: ITaskQuickPickEntry,\n\t\tstartAtType?: string,\n\t\tname?: string,\n\t): Promise<Task | undefined | null> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(\n\t\t\tthis._quickInputService.createQuickPick<ITaskTwoLevelQuickPickEntry>(\n\t\t\t\t{ useSeparators: true },\n\t\t\t),\n\t\t);\n\t\tpicker.placeholder = placeHolder;\n\t\tpicker.matchOnDescription = true;\n\t\tpicker.ignoreFocusOut = false;\n\t\tdisposables.add(\n\t\t\tpicker.onDidTriggerItemButton(async (context) => {\n\t\t\t\tconst task = context.item.task;\n\t\t\t\tif (\n\t\t\t\t\tcontext.button.iconClass ===\n\t\t\t\t\tThemeIcon.asClassName(removeTaskIcon)\n\t\t\t\t) {\n\t\t\t\t\tconst key =\n\t\t\t\t\t\ttask && !Types.isString(task)\n\t\t\t\t\t\t\t? task.getKey()\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\tthis._taskService.removeRecentlyUsedTask(key);\n\t\t\t\t\t}\n\t\t\t\t\tconst indexToRemove = picker.items.indexOf(context.item);\n\t\t\t\t\tif (indexToRemove >= 0) {\n\t\t\t\t\t\tpicker.items = [\n\t\t\t\t\t\t\t...picker.items.slice(0, indexToRemove),\n\t\t\t\t\t\t\t...picker.items.slice(indexToRemove + 1),\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\tcontext.button.iconClass ===\n\t\t\t\t\tThemeIcon.asClassName(configureTaskIcon)\n\t\t\t\t) {\n\t\t\t\t\tthis._quickInputService.cancel();\n\t\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tCustomTask.is(task) ||\n\t\t\t\t\t\tConfiguringTask.is(task)\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet canOpenConfig = false;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcanOpenConfig =\n\t\t\t\t\t\t\t\tawait this._taskService.openConfig(task);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// do nothing.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!canOpenConfig) {\n\t\t\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tif (name) {\n\t\t\tpicker.value = name;\n\t\t}\n\t\tlet firstLevelTask: Task | ConfiguringTask | string | undefined | null =\n\t\t\tstartAtType;\n\t\tif (!firstLevelTask) {\n\t\t\t// First show recent tasks configured tasks. Other tasks will be available at a second level\n\t\t\tconst topLevelEntriesResult =\n\t\t\t\tawait this.getTopLevelEntries(defaultEntry);\n\t\t\tif (\n\t\t\t\ttopLevelEntriesResult.isSingleConfigured &&\n\t\t\t\tthis._configurationService.getValue<boolean>(\n\t\t\t\t\tQUICKOPEN_SKIP_CONFIG,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treturn this._toTask(topLevelEntriesResult.isSingleConfigured);\n\t\t\t}\n\t\t\tconst taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] =\n\t\t\t\ttopLevelEntriesResult.entries;\n\t\t\tfirstLevelTask = await this._doPickerFirstLevel(\n\t\t\t\tpicker,\n\t\t\t\ttaskQuickPickEntries,\n\t\t\t\tdisposables,\n\t\t\t);\n\t\t}\n\t\tdo {\n\t\t\tif (Types.isString(firstLevelTask)) {\n\t\t\t\tif (name) {\n\t\t\t\t\tawait this._doPickerFirstLevel(\n\t\t\t\t\t\tpicker,\n\t\t\t\t\t\t(await this.getTopLevelEntries(defaultEntry)).entries,\n\t\t\t\t\t\tdisposables,\n\t\t\t\t\t);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst selectedEntry = await this.doPickerSecondLevel(\n\t\t\t\t\tpicker,\n\t\t\t\t\tdisposables,\n\t\t\t\t\tfirstLevelTask,\n\t\t\t\t);\n\t\t\t\t// Proceed to second level of quick pick\n\t\t\t\tif (\n\t\t\t\t\tselectedEntry &&\n\t\t\t\t\t!selectedEntry.settingType &&\n\t\t\t\t\tselectedEntry.task === null\n\t\t\t\t) {\n\t\t\t\t\t// The user has chosen to go back to the first level\n\t\t\t\t\tpicker.value = \"\";\n\t\t\t\t\tfirstLevelTask = await this._doPickerFirstLevel(\n\t\t\t\t\t\tpicker,\n\t\t\t\t\t\t(await this.getTopLevelEntries(defaultEntry)).entries,\n\t\t\t\t\t\tdisposables,\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\tselectedEntry &&\n\t\t\t\t\tTypes.isString(selectedEntry.settingType)\n\t\t\t\t) {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treturn this.handleSettingOption(selectedEntry.settingType);\n\t\t\t\t} else {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treturn selectedEntry?.task &&\n\t\t\t\t\t\t!Types.isString(selectedEntry?.task)\n\t\t\t\t\t\t? this._toTask(selectedEntry?.task)\n\t\t\t\t\t\t: undefined;\n\t\t\t\t}\n\t\t\t} else if (firstLevelTask) {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treturn this._toTask(firstLevelTask);\n\t\t\t} else {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treturn firstLevelTask;\n\t\t\t}\n\t\t} while (1);\n\t\treturn;\n\t}\n\n\tprivate async _doPickerFirstLevel(\n\t\tpicker: IQuickPick<\n\t\t\tITaskTwoLevelQuickPickEntry,\n\t\t\t{ useSeparators: true }\n\t\t>,\n\t\ttaskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[],\n\t\tdisposables: DisposableStore,\n\t): Promise<Task | ConfiguringTask | string | null | undefined> {\n\t\tpicker.items = taskQuickPickEntries;\n\t\tdisposables.add(\n\t\t\tshowWithPinnedItems(\n\t\t\t\tthis._storageService,\n\t\t\t\trunTaskStorageKey,\n\t\t\t\tpicker,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tconst firstLevelPickerResult = await new Promise<\n\t\t\tITaskTwoLevelQuickPickEntry | undefined | null\n\t\t>((resolve) => {\n\t\t\tdisposables.add(\n\t\t\t\tEvent.once(picker.onDidAccept)(async () => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tpicker.selectedItems\n\t\t\t\t\t\t\t? picker.selectedItems[0]\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t});\n\t\treturn firstLevelPickerResult?.task;\n\t}\n\n\tpublic async doPickerSecondLevel(\n\t\tpicker: IQuickPick<\n\t\t\tITaskTwoLevelQuickPickEntry,\n\t\t\t{ useSeparators: true }\n\t\t>,\n\t\tdisposables: DisposableStore,\n\t\ttype: string,\n\t\tname?: string,\n\t) {\n\t\tpicker.busy = true;\n\t\tif (type === SHOW_ALL) {\n\t\t\tconst items = (await this._taskService.tasks())\n\t\t\t\t.filter((t) => !t.configurationProperties.hide)\n\t\t\t\t.sort((a, b) => this._sorter.compare(a, b))\n\t\t\t\t.map((task) => this._createTaskEntry(task));\n\t\t\titems.push(\n\t\t\t\t...TaskQuickPick.allSettingEntries(this._configurationService),\n\t\t\t);\n\t\t\tpicker.items = items;\n\t\t} else {\n\t\t\tpicker.value = name || \"\";\n\t\t\tpicker.items = await this._getEntriesForProvider(type);\n\t\t}\n\t\tawait picker.show();\n\t\tpicker.busy = false;\n\t\tconst secondLevelPickerResult = await new Promise<\n\t\t\tITaskTwoLevelQuickPickEntry | undefined | null\n\t\t>((resolve) => {\n\t\t\tdisposables.add(\n\t\t\t\tEvent.once(picker.onDidAccept)(async () => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tpicker.selectedItems\n\t\t\t\t\t\t\t? picker.selectedItems[0]\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t});\n\t\treturn secondLevelPickerResult;\n\t}\n\n\tpublic static allSettingEntries(\n\t\tconfigurationService: IConfigurationService,\n\t): (ITaskTwoLevelQuickPickEntry & { settingType: string })[] {\n\t\tconst entries: (ITaskTwoLevelQuickPickEntry & {\n\t\t\tsettingType: string;\n\t\t})[] = [];\n\t\tconst gruntEntry = TaskQuickPick.getSettingEntry(\n\t\t\tconfigurationService,\n\t\t\t\"grunt\",\n\t\t);\n\t\tif (gruntEntry) {\n\t\t\tentries.push(gruntEntry);\n\t\t}\n\t\tconst gulpEntry = TaskQuickPick.getSettingEntry(\n\t\t\tconfigurationService,\n\t\t\t\"gulp\",\n\t\t);\n\t\tif (gulpEntry) {\n\t\t\tentries.push(gulpEntry);\n\t\t}\n\t\tconst jakeEntry = TaskQuickPick.getSettingEntry(\n\t\t\tconfigurationService,\n\t\t\t\"jake\",\n\t\t);\n\t\tif (jakeEntry) {\n\t\t\tentries.push(jakeEntry);\n\t\t}\n\t\treturn entries;\n\t}\n\n\tpublic static getSettingEntry(\n\t\tconfigurationService: IConfigurationService,\n\t\ttype: string,\n\t): (ITaskTwoLevelQuickPickEntry & { settingType: string }) | undefined {\n\t\tif (configurationService.getValue(`${type}.autoDetect`) === \"off\") {\n\t\t\treturn {\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"TaskQuickPick.changeSettingsOptions\",\n\t\t\t\t\t\"$(gear) {0} task detection is turned off. Enable {1} task detection...\",\n\t\t\t\t\ttype[0].toUpperCase() + type.slice(1),\n\t\t\t\t\ttype,\n\t\t\t\t),\n\t\t\t\ttask: null,\n\t\t\t\tsettingType: type,\n\t\t\t\talwaysShow: true,\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getEntriesForProvider(\n\t\ttype: string,\n\t): Promise<QuickPickInput<ITaskTwoLevelQuickPickEntry>[]> {\n\t\tconst tasks = (await this._taskService.tasks({ type })).sort((a, b) =>\n\t\t\tthis._sorter.compare(a, b),\n\t\t);\n\t\tlet taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] =\n\t\t\t[];\n\t\tif (tasks.length > 0) {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tif (!task.configurationProperties.hide) {\n\t\t\t\t\ttaskQuickPickEntries.push(this._createTaskEntry(task));\n\t\t\t\t}\n\t\t\t}\n\t\t\ttaskQuickPickEntries.push(\n\t\t\t\t{\n\t\t\t\t\ttype: \"separator\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"TaskQuickPick.goBack\", \"Go back \u21A9\"),\n\t\t\t\t\ttask: null,\n\t\t\t\t\talwaysShow: true,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\ttaskQuickPickEntries = [\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"TaskQuickPick.noTasksForType\",\n\t\t\t\t\t\t\"No {0} tasks found. Go back \u21A9\",\n\t\t\t\t\t\ttype,\n\t\t\t\t\t),\n\t\t\t\t\ttask: null,\n\t\t\t\t\talwaysShow: true,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\tconst settingEntry = TaskQuickPick.getSettingEntry(\n\t\t\tthis._configurationService,\n\t\t\ttype,\n\t\t);\n\t\tif (settingEntry) {\n\t\t\ttaskQuickPickEntries.push(settingEntry);\n\t\t}\n\t\treturn taskQuickPickEntries;\n\t}\n\n\tprivate async _toTask(\n\t\ttask: Task | ConfiguringTask,\n\t): Promise<Task | undefined> {\n\t\tif (!ConfiguringTask.is(task)) {\n\t\t\treturn task;\n\t\t}\n\n\t\tconst resolvedTask = await this._taskService.tryResolveTask(task);\n\n\t\tif (!resolvedTask) {\n\t\t\tthis._notificationService.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"noProviderForTask\",\n\t\t\t\t\t'There is no task provider registered for tasks of type \"{0}\".',\n\t\t\t\t\ttask.type,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn resolvedTask;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
