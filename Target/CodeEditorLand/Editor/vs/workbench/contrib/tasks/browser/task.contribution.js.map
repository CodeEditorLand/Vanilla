{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/task.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { MenuRegistry, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\n\nimport { ProblemMatcherRegistry } from '../common/problemMatcher.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\n\nimport * as jsonContributionRegistry from '../../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\n\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor, IStatusbarEntry } from '../../../services/statusbar/browser/statusbar.js';\n\nimport { IOutputChannelRegistry, Extensions as OutputExt } from '../../../services/output/common/output.js';\n\nimport { ITaskEvent, TaskEventKind, TaskGroup, TaskSettingId, TASKS_CATEGORY, TASK_RUNNING_STATE } from '../common/tasks.js';\nimport { ITaskService, TaskCommandsRegistered, TaskExecutionSupportedContext } from '../common/taskService.js';\n\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { RunAutomaticTasks, ManageAutomaticTaskRunning } from './runAutomaticTasks.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyMod, KeyCode } from '../../../../base/common/keyCodes.js';\nimport schemaVersion1 from '../common/jsonSchema_v1.js';\nimport schemaVersion2, { updateProblemMatchers, updateTaskDefinitions } from '../common/jsonSchema_v2.js';\nimport { AbstractTaskService, ConfigureTaskAction } from './abstractTaskService.js';\nimport { tasksSchemaId } from '../../../services/configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { WorkbenchStateContext } from '../../../common/contextkeys.js';\nimport { IQuickAccessRegistry, Extensions as QuickAccessExtensions } from '../../../../platform/quickinput/common/quickAccess.js';\nimport { TasksQuickAccessProvider } from './tasksQuickAccess.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { TaskDefinitionRegistry } from '../common/taskDefinitionRegistry.js';\nimport { TerminalMenuBarGroup } from '../../terminal/browser/terminalMenus.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { promiseWithResolvers } from '../../../../base/common/async.js';\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RunAutomaticTasks, LifecyclePhase.Eventually);\n\nregisterAction2(ManageAutomaticTaskRunning);\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ManageAutomaticTaskRunning.ID,\n\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\n\nexport class TaskStatusBarContributions extends Disposable implements IWorkbenchContribution {\n\tprivate _runningTasksStatusItem: IStatusbarEntryAccessor | undefined;\n\tprivate _activeTasksCount: number = 0;\n\n\tconstructor(\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@IProgressService private readonly _progressService: IProgressService\n\t) {\n\t\tsuper();\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tlet promise: Promise<void> | undefined = undefined;\n\t\tlet resolve: (value?: void | Thenable<void>) => void;\n\t\tthis._register(this._taskService.onDidStateChange(event => {\n\t\t\tif (event.kind === TaskEventKind.Changed) {\n\t\t\t\tthis._updateRunningTasksStatus();\n\t\t\t}\n\n\t\t\tif (!this._ignoreEventForUpdateRunningTasksCount(event)) {\n\t\t\t\tswitch (event.kind) {\n\t\t\t\t\tcase TaskEventKind.Active:\n\t\t\t\t\t\tthis._activeTasksCount++;\n\t\t\t\t\t\tif (this._activeTasksCount === 1) {\n\t\t\t\t\t\t\tif (!promise) {\n\t\t\t\t\t\t\t\t({ promise, resolve } = promiseWithResolvers<void>());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskEventKind.Inactive:\n\t\t\t\t\t\t// Since the exiting of the sub process is communicated async we can't order inactive and terminate events.\n\t\t\t\t\t\t// So try to treat them accordingly.\n\t\t\t\t\t\tif (this._activeTasksCount > 0) {\n\t\t\t\t\t\t\tthis._activeTasksCount--;\n\t\t\t\t\t\t\tif (this._activeTasksCount === 0) {\n\t\t\t\t\t\t\t\tif (promise && resolve) {\n\t\t\t\t\t\t\t\t\tresolve!();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskEventKind.Terminated:\n\t\t\t\t\t\tif (this._activeTasksCount !== 0) {\n\t\t\t\t\t\t\tthis._activeTasksCount = 0;\n\t\t\t\t\t\t\tif (promise && resolve) {\n\t\t\t\t\t\t\t\tresolve!();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (promise && (event.kind === TaskEventKind.Active) && (this._activeTasksCount === 1)) {\n\t\t\t\tthis._progressService.withProgress({ location: ProgressLocation.Window, command: 'workbench.action.tasks.showTasks' }, progress => {\n\t\t\t\t\tprogress.report({ message: nls.localize('building', 'Building...') });\n\t\t\t\t\treturn promise!;\n\t\t\t\t}).then(() => {\n\t\t\t\t\tpromise = undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async _updateRunningTasksStatus(): Promise<void> {\n\t\tconst tasks = await this._taskService.getActiveTasks();\n\t\tif (tasks.length === 0) {\n\t\t\tif (this._runningTasksStatusItem) {\n\t\t\t\tthis._runningTasksStatusItem.dispose();\n\t\t\t\tthis._runningTasksStatusItem = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst itemProps: IStatusbarEntry = {\n\t\t\t\tname: nls.localize('status.runningTasks', \"Running Tasks\"),\n\t\t\t\ttext: `$(tools) ${tasks.length}`,\n\t\t\t\tariaLabel: nls.localize('numberOfRunningTasks', \"{0} running tasks\", tasks.length),\n\t\t\t\ttooltip: nls.localize('runningTasks', \"Show Running Tasks\"),\n\t\t\t\tcommand: 'workbench.action.tasks.showTasks',\n\t\t\t};\n\n\t\t\tif (!this._runningTasksStatusItem) {\n\t\t\t\tthis._runningTasksStatusItem = this._statusbarService.addEntry(itemProps, 'status.runningTasks', StatusbarAlignment.LEFT, 49 /* Medium Priority, next to Markers */);\n\t\t\t} else {\n\t\t\t\tthis._runningTasksStatusItem.update(itemProps);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _ignoreEventForUpdateRunningTasksCount(event: ITaskEvent): boolean {\n\t\tif (!this._taskService.inTerminal() || event.kind === TaskEventKind.Changed) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((isString(event.group) ? event.group : event.group?._id) !== TaskGroup.Build._id) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn event.__task.configurationProperties.problemMatchers === undefined || event.__task.configurationProperties.problemMatchers.length === 0;\n\t}\n}\n\nworkbenchRegistry.registerWorkbenchContribution(TaskStatusBarContributions, LifecyclePhase.Restored);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Run,\n\tcommand: {\n\t\tid: 'workbench.action.tasks.runTask',\n\t\ttitle: nls.localize({ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, \"&&Run Task...\")\n\t},\n\torder: 1,\n\twhen: TaskExecutionSupportedContext\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Run,\n\tcommand: {\n\t\tid: 'workbench.action.tasks.build',\n\t\ttitle: nls.localize({ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, \"Run &&Build Task...\")\n\t},\n\torder: 2,\n\twhen: TaskExecutionSupportedContext\n});\n\n// Manage Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Manage,\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.showTasks',\n\t\ttitle: nls.localize({ key: 'miRunningTask', comment: ['&& denotes a mnemonic'] }, \"Show Runnin&&g Tasks...\")\n\t},\n\torder: 1,\n\twhen: TaskExecutionSupportedContext\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Manage,\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.restartTask',\n\t\ttitle: nls.localize({ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, \"R&&estart Running Task...\")\n\t},\n\torder: 2,\n\twhen: TaskExecutionSupportedContext\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Manage,\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.terminate',\n\t\ttitle: nls.localize({ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task...\")\n\t},\n\torder: 3,\n\twhen: TaskExecutionSupportedContext\n});\n\n// Configure Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Configure,\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureTaskRunner',\n\t\ttitle: nls.localize({ key: 'miConfigureTask', comment: ['&& denotes a mnemonic'] }, \"&&Configure Tasks...\")\n\t},\n\torder: 1,\n\twhen: TaskExecutionSupportedContext\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Configure,\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultBuildTask',\n\t\ttitle: nls.localize({ key: 'miConfigureBuildTask', comment: ['&& denotes a mnemonic'] }, \"Configure De&&fault Build Task...\")\n\t},\n\torder: 2,\n\twhen: TaskExecutionSupportedContext\n});\n\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.openWorkspaceFileTasks',\n\t\ttitle: nls.localize2('workbench.action.tasks.openWorkspaceFileTasks', \"Open Workspace Tasks\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('workspace'), TaskExecutionSupportedContext)\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ConfigureTaskAction.ID,\n\t\ttitle: ConfigureTaskAction.TEXT,\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.showLog',\n\t\ttitle: nls.localize2('ShowLogAction.label', \"Show Task Log\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.runTask',\n\t\ttitle: nls.localize2('RunTaskAction.label', \"Run Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t}\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.reRunTask',\n\t\ttitle: nls.localize2('ReRunTaskAction.label', \"Rerun Last Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.restartTask',\n\t\ttitle: nls.localize2('RestartTaskAction.label', \"Restart Running Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.showTasks',\n\t\ttitle: nls.localize2('ShowTasksAction.label', \"Show Running Tasks\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.terminate',\n\t\ttitle: nls.localize2('TerminateAction.label', \"Terminate Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.build',\n\t\ttitle: nls.localize2('BuildAction.label', \"Run Build Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.test',\n\t\ttitle: nls.localize2('TestAction.label', \"Run Test Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultBuildTask',\n\t\ttitle: nls.localize2('ConfigureDefaultBuildTask.label', \"Configure Default Build Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultTestTask',\n\t\ttitle: nls.localize2('ConfigureDefaultTestTask.label', \"Configure Default Test Task\"),\n\t\tcategory: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: 'workbench.action.tasks.openUserTasks',\n\t\ttitle: nls.localize2('workbench.action.tasks.openUserTasks', \"Open User Tasks\"), category: TASKS_CATEGORY\n\t},\n\twhen: TaskExecutionSupportedContext\n});\n\nclass UserTasksGlobalActionContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerActions();\n\t}\n\n\tprivate registerActions() {\n\t\tconst id = 'workbench.action.tasks.openUserTasks';\n\t\tconst title = nls.localize('tasks', \"Tasks\");\n\t\tthis._register(MenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tcommand: {\n\t\t\t\tid,\n\t\t\t\ttitle\n\t\t\t},\n\t\t\twhen: TaskExecutionSupportedContext,\n\t\t\tgroup: '2_configuration',\n\t\t\torder: 6\n\t\t}));\n\t\tthis._register(MenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\t\t\tcommand: {\n\t\t\t\tid,\n\t\t\t\ttitle\n\t\t\t},\n\t\t\twhen: TaskExecutionSupportedContext,\n\t\t\tgroup: '2_configuration',\n\t\t\torder: 6\n\t\t}));\n\t}\n}\nworkbenchRegistry.registerWorkbenchContribution(UserTasksGlobalActionContribution, LifecyclePhase.Restored);\n\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.rebuild', title: nls.localize('RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.clean', title: nls.localize('CleanAction.label', 'Run Clean Task'), category: tasksCategory });\n\nKeybindingsRegistry.registerKeybindingRule({\n\tid: 'workbench.action.tasks.build',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: TaskCommandsRegistered,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyB\n});\n\n// Tasks Output channel. Register it before using it in Task Service.\nconst outputChannelRegistry = Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels);\noutputChannelRegistry.registerChannel({ id: AbstractTaskService.OutputChannelId, label: AbstractTaskService.OutputChannelLabel, log: false });\n\n\n// Register Quick Access\nconst quickAccessRegistry = (Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess));\nconst tasksPickerContextKey = 'inTasksPicker';\n\nquickAccessRegistry.registerQuickAccessProvider({\n\tctor: TasksQuickAccessProvider,\n\tprefix: TasksQuickAccessProvider.PREFIX,\n\tcontextKey: tasksPickerContextKey,\n\tplaceholder: nls.localize('tasksQuickAccessPlaceholder', \"Type the name of a task to run.\"),\n\thelpEntries: [{ description: nls.localize('tasksQuickAccessHelp', \"Run Task\"), commandCenterOrder: 60 }]\n});\n\n// tasks.json validation\nconst schema: IJSONSchema = {\n\tid: tasksSchemaId,\n\tdescription: 'Task definition file',\n\ttype: 'object',\n\tallowTrailingCommas: true,\n\tallowComments: true,\n\tdefault: {\n\t\tversion: '2.0.0',\n\t\ttasks: [\n\t\t\t{\n\t\t\t\tlabel: 'My Task',\n\t\t\t\tcommand: 'echo hello',\n\t\t\t\ttype: 'shell',\n\t\t\t\targs: [],\n\t\t\t\tproblemMatcher: ['$tsc'],\n\t\t\t\tpresentation: {\n\t\t\t\t\treveal: 'always'\n\t\t\t\t},\n\t\t\t\tgroup: 'build'\n\t\t\t}\n\t\t]\n\t}\n};\n\nschema.definitions = {\n\t...schemaVersion1.definitions,\n\t...schemaVersion2.definitions,\n};\nschema.oneOf = [...(schemaVersion2.oneOf || []), ...(schemaVersion1.oneOf || [])];\n\nconst jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(tasksSchemaId, schema);\n\nexport class TaskRegistryContribution extends Disposable implements IWorkbenchContribution {\n\tstatic ID = 'taskRegistryContribution';\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._register(ProblemMatcherRegistry.onMatcherChanged(() => {\n\t\t\tupdateProblemMatchers();\n\t\t\tjsonRegistry.notifySchemaChanged(tasksSchemaId);\n\t\t}));\n\n\t\tthis._register(TaskDefinitionRegistry.onDefinitionsChanged(() => {\n\t\t\tupdateTaskDefinitions();\n\t\t\tjsonRegistry.notifySchemaChanged(tasksSchemaId);\n\t\t}));\n\t}\n}\nregisterWorkbenchContribution2(TaskRegistryContribution.ID, TaskRegistryContribution, WorkbenchPhase.AfterRestored);\n\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\tid: 'task',\n\torder: 100,\n\ttitle: nls.localize('tasksConfigurationTitle', \"Tasks\"),\n\ttype: 'object',\n\tproperties: {\n\t\t[TaskSettingId.ProblemMatchersNeverPrompt]: {\n\t\t\tmarkdownDescription: nls.localize('task.problemMatchers.neverPrompt', \"Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.\"),\n\t\t\t'oneOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tmarkdownDescription: nls.localize('task.problemMatchers.neverPrompt.boolean', 'Sets problem matcher prompting behavior for all tasks.')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tpatternProperties: {\n\t\t\t\t\t\t'.*': {\n\t\t\t\t\t\t\ttype: 'boolean'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkdownDescription: nls.localize('task.problemMatchers.neverPrompt.array', 'An object containing task type-boolean pairs to never prompt for problem matchers on.'),\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t'shell': true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tdefault: false\n\t\t},\n\t\t[TaskSettingId.AutoDetect]: {\n\t\t\tmarkdownDescription: nls.localize('task.autoDetect', \"Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.\"),\n\t\t\ttype: 'string',\n\t\t\tenum: ['on', 'off'],\n\t\t\tdefault: 'on'\n\t\t},\n\t\t[TaskSettingId.SlowProviderWarning]: {\n\t\t\tmarkdownDescription: nls.localize('task.slowProviderWarning', \"Configures whether a warning is shown when a provider is slow\"),\n\t\t\t'oneOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tmarkdownDescription: nls.localize('task.slowProviderWarning.boolean', 'Sets the slow provider warning for all tasks.')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('task.slowProviderWarning.array', 'An array of task types to never show the slow provider warning.')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tdefault: true\n\t\t},\n\t\t[TaskSettingId.QuickOpenHistory]: {\n\t\t\tmarkdownDescription: nls.localize('task.quickOpen.history', \"Controls the number of recent items tracked in task quick open dialog.\"),\n\t\t\ttype: 'number',\n\t\t\tdefault: 30, minimum: 0, maximum: 30\n\t\t},\n\t\t[TaskSettingId.QuickOpenDetail]: {\n\t\t\tmarkdownDescription: nls.localize('task.quickOpen.detail', \"Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true\n\t\t},\n\t\t[TaskSettingId.QuickOpenSkip]: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('task.quickOpen.skip', \"Controls whether the task quick pick is skipped when there is only one task to pick from.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t[TaskSettingId.QuickOpenShowAll]: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('task.quickOpen.showAll', \"Causes the Tasks: Run Task command to use the slower \\\"show all\\\" behavior instead of the faster two level picker where tasks are grouped by provider.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t[TaskSettingId.AllowAutomaticTasks]: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['on', 'off'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('task.allowAutomaticTasks.on', \"Always\"),\n\t\t\t\tnls.localize('task.allowAutomaticTasks.off', \"Never\"),\n\t\t\t],\n\t\t\tdescription: nls.localize('task.allowAutomaticTasks', \"Enable automatic tasks - note that tasks won't run in an untrusted workspace.\"),\n\t\t\tdefault: 'on',\n\t\t\trestricted: true\n\t\t},\n\t\t[TaskSettingId.Reconnection]: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('task.reconnection', \"On window reload, reconnect to tasks that have problem matchers.\"),\n\t\t\tdefault: true\n\t\t},\n\t\t[TaskSettingId.SaveBeforeRun]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t'task.saveBeforeRun',\n\t\t\t\t'Save all dirty editors before running a task.'\n\t\t\t),\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'never', 'prompt'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('task.saveBeforeRun.always', 'Always saves all editors before running.'),\n\t\t\t\tnls.localize('task.saveBeforeRun.never', 'Never saves editors before running.'),\n\t\t\t\tnls.localize('task.SaveBeforeRun.prompt', 'Prompts whether to save editors before running.'),\n\t\t\t],\n\t\t\tdefault: 'always',\n\t\t},\n\t\t[TaskSettingId.VerboseLogging]: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('task.verboseLogging', \"Enable verbose logging for tasks.\"),\n\t\t\tdefault: false\n\t\t},\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
