{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/task.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\n\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { ProblemMatcherRegistry } from \"../common/problemMatcher.js\";\n\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport * as jsonContributionRegistry from \"../../../../platform/jsonschemas/common/jsonContributionRegistry.js\";\n\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\n\nimport {\n\ttype IOutputChannelRegistry,\n\tExtensions as OutputExt,\n} from \"../../../services/output/common/output.js\";\n\nimport {\n\tITaskService,\n\tTaskCommandsRegistered,\n\tTaskExecutionSupportedContext,\n} from \"../common/taskService.js\";\nimport {\n\ttype ITaskEvent,\n\tTASKS_CATEGORY,\n\tTASK_RUNNING_STATE,\n\tTaskEventKind,\n\tTaskGroup,\n\tTaskSettingId,\n} from \"../common/tasks.js\";\n\nimport { promiseWithResolvers } from \"../../../../base/common/async.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { isString } from \"../../../../base/common/types.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\ttype IQuickAccessRegistry,\n\tExtensions as QuickAccessExtensions,\n} from \"../../../../platform/quickinput/common/quickAccess.js\";\nimport { WorkbenchStateContext } from \"../../../common/contextkeys.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { tasksSchemaId } from \"../../../services/configuration/common/configuration.js\";\nimport { TerminalMenuBarGroup } from \"../../terminal/browser/terminalMenus.js\";\nimport schemaVersion1 from \"../common/jsonSchema_v1.js\";\nimport schemaVersion2, {\n\tupdateProblemMatchers,\n\tupdateTaskDefinitions,\n} from \"../common/jsonSchema_v2.js\";\nimport { TaskDefinitionRegistry } from \"../common/taskDefinitionRegistry.js\";\nimport {\n\tAbstractTaskService,\n\tConfigureTaskAction,\n} from \"./abstractTaskService.js\";\nimport {\n\tManageAutomaticTaskRunning,\n\tRunAutomaticTasks,\n} from \"./runAutomaticTasks.js\";\nimport { TasksQuickAccessProvider } from \"./tasksQuickAccess.js\";\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n);\nworkbenchRegistry.registerWorkbenchContribution(\n\tRunAutomaticTasks,\n\tLifecyclePhase.Eventually,\n);\n\nregisterAction2(ManageAutomaticTaskRunning);\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ManageAutomaticTaskRunning.ID,\n\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\n\nexport class TaskStatusBarContributions\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate _runningTasksStatusItem: IStatusbarEntryAccessor | undefined;\n\tprivate _activeTasksCount = 0;\n\n\tconstructor(\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IStatusbarService\n\t\tprivate readonly _statusbarService: IStatusbarService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tlet promise: Promise<void> | undefined;\n\t\tlet resolve: (value?: void | Thenable<void>) => void;\n\t\tthis._register(\n\t\t\tthis._taskService.onDidStateChange((event) => {\n\t\t\t\tif (event.kind === TaskEventKind.Changed) {\n\t\t\t\t\tthis._updateRunningTasksStatus();\n\t\t\t\t}\n\n\t\t\t\tif (!this._ignoreEventForUpdateRunningTasksCount(event)) {\n\t\t\t\t\tswitch (event.kind) {\n\t\t\t\t\t\tcase TaskEventKind.Active:\n\t\t\t\t\t\t\tthis._activeTasksCount++;\n\t\t\t\t\t\t\tif (this._activeTasksCount === 1) {\n\t\t\t\t\t\t\t\tif (!promise) {\n\t\t\t\t\t\t\t\t\t({ promise, resolve } =\n\t\t\t\t\t\t\t\t\t\tpromiseWithResolvers<void>());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TaskEventKind.Inactive:\n\t\t\t\t\t\t\t// Since the exiting of the sub process is communicated async we can't order inactive and terminate events.\n\t\t\t\t\t\t\t// So try to treat them accordingly.\n\t\t\t\t\t\t\tif (this._activeTasksCount > 0) {\n\t\t\t\t\t\t\t\tthis._activeTasksCount--;\n\t\t\t\t\t\t\t\tif (this._activeTasksCount === 0) {\n\t\t\t\t\t\t\t\t\tif (promise && resolve) {\n\t\t\t\t\t\t\t\t\t\tresolve!();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TaskEventKind.Terminated:\n\t\t\t\t\t\t\tif (this._activeTasksCount !== 0) {\n\t\t\t\t\t\t\t\tthis._activeTasksCount = 0;\n\t\t\t\t\t\t\t\tif (promise && resolve) {\n\t\t\t\t\t\t\t\t\tresolve!();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpromise &&\n\t\t\t\t\tevent.kind === TaskEventKind.Active &&\n\t\t\t\t\tthis._activeTasksCount === 1\n\t\t\t\t) {\n\t\t\t\t\tthis._progressService\n\t\t\t\t\t\t.withProgress(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\t\t\t\t\tcommand: \"workbench.action.tasks.showTasks\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t(progress) => {\n\t\t\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"building\",\n\t\t\t\t\t\t\t\t\t\t\"Building...\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn promise!;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tpromise = undefined;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async _updateRunningTasksStatus(): Promise<void> {\n\t\tconst tasks = await this._taskService.getActiveTasks();\n\t\tif (tasks.length === 0) {\n\t\t\tif (this._runningTasksStatusItem) {\n\t\t\t\tthis._runningTasksStatusItem.dispose();\n\t\t\t\tthis._runningTasksStatusItem = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst itemProps: IStatusbarEntry = {\n\t\t\t\tname: nls.localize(\"status.runningTasks\", \"Running Tasks\"),\n\t\t\t\ttext: `$(tools) ${tasks.length}`,\n\t\t\t\tariaLabel: nls.localize(\n\t\t\t\t\t\"numberOfRunningTasks\",\n\t\t\t\t\t\"{0} running tasks\",\n\t\t\t\t\ttasks.length,\n\t\t\t\t),\n\t\t\t\ttooltip: nls.localize(\"runningTasks\", \"Show Running Tasks\"),\n\t\t\t\tcommand: \"workbench.action.tasks.showTasks\",\n\t\t\t};\n\n\t\t\tif (this._runningTasksStatusItem) {\n\t\t\t\tthis._runningTasksStatusItem.update(itemProps);\n\t\t\t} else {\n\t\t\t\tthis._runningTasksStatusItem = this._statusbarService.addEntry(\n\t\t\t\t\titemProps,\n\t\t\t\t\t\"status.runningTasks\",\n\t\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t\t49 /* Medium Priority, next to Markers */,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _ignoreEventForUpdateRunningTasksCount(event: ITaskEvent): boolean {\n\t\tif (\n\t\t\t!this._taskService.inTerminal() ||\n\t\t\tevent.kind === TaskEventKind.Changed\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t(isString(event.group) ? event.group : event.group?._id) !==\n\t\t\tTaskGroup.Build._id\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (\n\t\t\tevent.__task.configurationProperties.problemMatchers ===\n\t\t\t\tundefined ||\n\t\t\tevent.__task.configurationProperties.problemMatchers.length === 0\n\t\t);\n\t}\n}\n\nworkbenchRegistry.registerWorkbenchContribution(\n\tTaskStatusBarContributions,\n\tLifecyclePhase.Restored,\n);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Run,\n\tcommand: {\n\t\tid: \"workbench.action.tasks.runTask\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miRunTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"&&Run Task...\",\n\t\t),\n\t},\n\torder: 1,\n\twhen: TaskExecutionSupportedContext,\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Run,\n\tcommand: {\n\t\tid: \"workbench.action.tasks.build\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miBuildTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"Run &&Build Task...\",\n\t\t),\n\t},\n\torder: 2,\n\twhen: TaskExecutionSupportedContext,\n});\n\n// Manage Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Manage,\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: \"workbench.action.tasks.showTasks\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miRunningTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"Show Runnin&&g Tasks...\",\n\t\t),\n\t},\n\torder: 1,\n\twhen: TaskExecutionSupportedContext,\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Manage,\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: \"workbench.action.tasks.restartTask\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miRestartTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"R&&estart Running Task...\",\n\t\t),\n\t},\n\torder: 2,\n\twhen: TaskExecutionSupportedContext,\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Manage,\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: \"workbench.action.tasks.terminate\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miTerminateTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"&&Terminate Task...\",\n\t\t),\n\t},\n\torder: 3,\n\twhen: TaskExecutionSupportedContext,\n});\n\n// Configure Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Configure,\n\tcommand: {\n\t\tid: \"workbench.action.tasks.configureTaskRunner\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miConfigureTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"&&Configure Tasks...\",\n\t\t),\n\t},\n\torder: 1,\n\twhen: TaskExecutionSupportedContext,\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: TerminalMenuBarGroup.Configure,\n\tcommand: {\n\t\tid: \"workbench.action.tasks.configureDefaultBuildTask\",\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miConfigureBuildTask\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"Configure De&&fault Build Task...\",\n\t\t),\n\t},\n\torder: 2,\n\twhen: TaskExecutionSupportedContext,\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.openWorkspaceFileTasks\",\n\t\ttitle: nls.localize2(\n\t\t\t\"workbench.action.tasks.openWorkspaceFileTasks\",\n\t\t\t\"Open Workspace Tasks\",\n\t\t),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchStateContext.isEqualTo(\"workspace\"),\n\t\tTaskExecutionSupportedContext,\n\t),\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ConfigureTaskAction.ID,\n\t\ttitle: ConfigureTaskAction.TEXT,\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.showLog\",\n\t\ttitle: nls.localize2(\"ShowLogAction.label\", \"Show Task Log\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.runTask\",\n\t\ttitle: nls.localize2(\"RunTaskAction.label\", \"Run Task\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.reRunTask\",\n\t\ttitle: nls.localize2(\"ReRunTaskAction.label\", \"Rerun Last Task\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.restartTask\",\n\t\ttitle: nls.localize2(\"RestartTaskAction.label\", \"Restart Running Task\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.showTasks\",\n\t\ttitle: nls.localize2(\"ShowTasksAction.label\", \"Show Running Tasks\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.terminate\",\n\t\ttitle: nls.localize2(\"TerminateAction.label\", \"Terminate Task\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.build\",\n\t\ttitle: nls.localize2(\"BuildAction.label\", \"Run Build Task\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.test\",\n\t\ttitle: nls.localize2(\"TestAction.label\", \"Run Test Task\"),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.configureDefaultBuildTask\",\n\t\ttitle: nls.localize2(\n\t\t\t\"ConfigureDefaultBuildTask.label\",\n\t\t\t\"Configure Default Build Task\",\n\t\t),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.configureDefaultTestTask\",\n\t\ttitle: nls.localize2(\n\t\t\t\"ConfigureDefaultTestTask.label\",\n\t\t\t\"Configure Default Test Task\",\n\t\t),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: \"workbench.action.tasks.openUserTasks\",\n\t\ttitle: nls.localize2(\n\t\t\t\"workbench.action.tasks.openUserTasks\",\n\t\t\t\"Open User Tasks\",\n\t\t),\n\t\tcategory: TASKS_CATEGORY,\n\t},\n\twhen: TaskExecutionSupportedContext,\n});\n\nclass UserTasksGlobalActionContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerActions();\n\t}\n\n\tprivate registerActions() {\n\t\tconst id = \"workbench.action.tasks.openUserTasks\";\n\t\tconst title = nls.localize(\"tasks\", \"Tasks\");\n\t\tthis._register(\n\t\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\t\tcommand: {\n\t\t\t\t\tid,\n\t\t\t\t\ttitle,\n\t\t\t\t},\n\t\t\t\twhen: TaskExecutionSupportedContext,\n\t\t\t\tgroup: \"2_configuration\",\n\t\t\t\torder: 6,\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\t\t\t\tcommand: {\n\t\t\t\t\tid,\n\t\t\t\t\ttitle,\n\t\t\t\t},\n\t\t\t\twhen: TaskExecutionSupportedContext,\n\t\t\t\tgroup: \"2_configuration\",\n\t\t\t\torder: 6,\n\t\t\t}),\n\t\t);\n\t}\n}\nworkbenchRegistry.registerWorkbenchContribution(\n\tUserTasksGlobalActionContribution,\n\tLifecyclePhase.Restored,\n);\n\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.rebuild', title: nls.localize('RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.clean', title: nls.localize('CleanAction.label', 'Run Clean Task'), category: tasksCategory });\n\nKeybindingsRegistry.registerKeybindingRule({\n\tid: \"workbench.action.tasks.build\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: TaskCommandsRegistered,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyB,\n});\n\n// Tasks Output channel. Register it before using it in Task Service.\nconst outputChannelRegistry = Registry.as<IOutputChannelRegistry>(\n\tOutputExt.OutputChannels,\n);\noutputChannelRegistry.registerChannel({\n\tid: AbstractTaskService.OutputChannelId,\n\tlabel: AbstractTaskService.OutputChannelLabel,\n\tlog: false,\n});\n\n// Register Quick Access\nconst quickAccessRegistry = Registry.as<IQuickAccessRegistry>(\n\tQuickAccessExtensions.Quickaccess,\n);\nconst tasksPickerContextKey = \"inTasksPicker\";\n\nquickAccessRegistry.registerQuickAccessProvider({\n\tctor: TasksQuickAccessProvider,\n\tprefix: TasksQuickAccessProvider.PREFIX,\n\tcontextKey: tasksPickerContextKey,\n\tplaceholder: nls.localize(\n\t\t\"tasksQuickAccessPlaceholder\",\n\t\t\"Type the name of a task to run.\",\n\t),\n\thelpEntries: [\n\t\t{\n\t\t\tdescription: nls.localize(\"tasksQuickAccessHelp\", \"Run Task\"),\n\t\t\tcommandCenterOrder: 60,\n\t\t},\n\t],\n});\n\n// tasks.json validation\nconst schema: IJSONSchema = {\n\tid: tasksSchemaId,\n\tdescription: \"Task definition file\",\n\ttype: \"object\",\n\tallowTrailingCommas: true,\n\tallowComments: true,\n\tdefault: {\n\t\tversion: \"2.0.0\",\n\t\ttasks: [\n\t\t\t{\n\t\t\t\tlabel: \"My Task\",\n\t\t\t\tcommand: \"echo hello\",\n\t\t\t\ttype: \"shell\",\n\t\t\t\targs: [],\n\t\t\t\tproblemMatcher: [\"$tsc\"],\n\t\t\t\tpresentation: {\n\t\t\t\t\treveal: \"always\",\n\t\t\t\t},\n\t\t\t\tgroup: \"build\",\n\t\t\t},\n\t\t],\n\t},\n};\n\nschema.definitions = {\n\t...schemaVersion1.definitions,\n\t...schemaVersion2.definitions,\n};\nschema.oneOf = [\n\t...(schemaVersion2.oneOf || []),\n\t...(schemaVersion1.oneOf || []),\n];\n\nconst jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>(\n\tRegistry.as(jsonContributionRegistry.Extensions.JSONContribution)\n);\njsonRegistry.registerSchema(tasksSchemaId, schema);\n\nexport class TaskRegistryContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic ID = \"taskRegistryContribution\";\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tProblemMatcherRegistry.onMatcherChanged(() => {\n\t\t\t\tupdateProblemMatchers();\n\t\t\t\tjsonRegistry.notifySchemaChanged(tasksSchemaId);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tTaskDefinitionRegistry.onDefinitionsChanged(() => {\n\t\t\t\tupdateTaskDefinitions();\n\t\t\t\tjsonRegistry.notifySchemaChanged(tasksSchemaId);\n\t\t\t}),\n\t\t);\n\t}\n}\nregisterWorkbenchContribution2(\n\tTaskRegistryContribution.ID,\n\tTaskRegistryContribution,\n\tWorkbenchPhase.AfterRestored,\n);\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n);\nconfigurationRegistry.registerConfiguration({\n\tid: \"task\",\n\torder: 100,\n\ttitle: nls.localize(\"tasksConfigurationTitle\", \"Tasks\"),\n\ttype: \"object\",\n\tproperties: {\n\t\t[TaskSettingId.ProblemMatchersNeverPrompt]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"task.problemMatchers.neverPrompt\",\n\t\t\t\t\"Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.\",\n\t\t\t),\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\t\"task.problemMatchers.neverPrompt.boolean\",\n\t\t\t\t\t\t\"Sets problem matcher prompting behavior for all tasks.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tpatternProperties: {\n\t\t\t\t\t\t\".*\": {\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\t\"task.problemMatchers.neverPrompt.array\",\n\t\t\t\t\t\t\"An object containing task type-boolean pairs to never prompt for problem matchers on.\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tshell: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: false,\n\t\t},\n\t\t[TaskSettingId.AutoDetect]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"task.autoDetect\",\n\t\t\t\t\"Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"on\", \"off\"],\n\t\t\tdefault: \"on\",\n\t\t},\n\t\t[TaskSettingId.SlowProviderWarning]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"task.slowProviderWarning\",\n\t\t\t\t\"Configures whether a warning is shown when a provider is slow\",\n\t\t\t),\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\t\"task.slowProviderWarning.boolean\",\n\t\t\t\t\t\t\"Sets the slow provider warning for all tasks.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"array\",\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\t\t\"task.slowProviderWarning.array\",\n\t\t\t\t\t\t\t\"An array of task types to never show the slow provider warning.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: true,\n\t\t},\n\t\t[TaskSettingId.QuickOpenHistory]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"task.quickOpen.history\",\n\t\t\t\t\"Controls the number of recent items tracked in task quick open dialog.\",\n\t\t\t),\n\t\t\ttype: \"number\",\n\t\t\tdefault: 30,\n\t\t\tminimum: 0,\n\t\t\tmaximum: 30,\n\t\t},\n\t\t[TaskSettingId.QuickOpenDetail]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"task.quickOpen.detail\",\n\t\t\t\t\"Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TaskSettingId.QuickOpenSkip]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"task.quickOpen.skip\",\n\t\t\t\t\"Controls whether the task quick pick is skipped when there is only one task to pick from.\",\n\t\t\t),\n\t\t\tdefault: false,\n\t\t},\n\t\t[TaskSettingId.QuickOpenShowAll]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"task.quickOpen.showAll\",\n\t\t\t\t'Causes the Tasks: Run Task command to use the slower \"show all\" behavior instead of the faster two level picker where tasks are grouped by provider.',\n\t\t\t),\n\t\t\tdefault: false,\n\t\t},\n\t\t[TaskSettingId.AllowAutomaticTasks]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"on\", \"off\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize(\"task.allowAutomaticTasks.on\", \"Always\"),\n\t\t\t\tnls.localize(\"task.allowAutomaticTasks.off\", \"Never\"),\n\t\t\t],\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"task.allowAutomaticTasks\",\n\t\t\t\t\"Enable automatic tasks - note that tasks won't run in an untrusted workspace.\",\n\t\t\t),\n\t\t\tdefault: \"on\",\n\t\t\trestricted: true,\n\t\t},\n\t\t[TaskSettingId.Reconnection]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"task.reconnection\",\n\t\t\t\t\"On window reload, reconnect to tasks that have problem matchers.\",\n\t\t\t),\n\t\t\tdefault: true,\n\t\t},\n\t\t[TaskSettingId.SaveBeforeRun]: {\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"task.saveBeforeRun\",\n\t\t\t\t\"Save all dirty editors before running a task.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"always\", \"never\", \"prompt\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"task.saveBeforeRun.always\",\n\t\t\t\t\t\"Always saves all editors before running.\",\n\t\t\t\t),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"task.saveBeforeRun.never\",\n\t\t\t\t\t\"Never saves editors before running.\",\n\t\t\t\t),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"task.SaveBeforeRun.prompt\",\n\t\t\t\t\t\"Prompts whether to save editors before running.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"always\",\n\t\t},\n\t\t[TaskSettingId.VerboseLogging]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"task.verboseLogging\",\n\t\t\t\t\"Enable verbose logging for tasks.\",\n\t\t\t),\n\t\t\tdefault: false,\n\t\t},\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
