{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tAccessibilitySignal,\n\tIAccessibilitySignalService,\n} from \"../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js\";\nimport { MarkerSeverity } from \"../../../../platform/markers/common/markers.js\";\nimport type { IMarker } from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport { spinningLoading } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport type { ITerminalInstance } from \"../../terminal/browser/terminal.js\";\nimport type { ITerminalStatus } from \"../../terminal/common/terminal.js\";\nimport {\n\ttype AbstractProblemCollector,\n\tStartStopProblemCollector,\n} from \"../common/problemCollectors.js\";\nimport { ITaskService, type Task } from \"../common/taskService.js\";\nimport {\n\ttype ITaskGeneralEvent,\n\ttype ITaskProcessEndedEvent,\n\ttype ITaskProcessStartedEvent,\n\tTaskEventKind,\n\tTaskRunType,\n} from \"../common/tasks.js\";\n\ninterface ITerminalData {\n\tterminal: ITerminalInstance;\n\ttask: Task;\n\tstatus: ITerminalStatus;\n\tproblemMatcher: AbstractProblemCollector;\n\ttaskRunEnded: boolean;\n\tdisposeListener?: MutableDisposable<IDisposable>;\n}\n\nconst TASK_TERMINAL_STATUS_ID = \"task_terminal_status\";\nexport const ACTIVE_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: spinningLoading,\n\tseverity: Severity.Info,\n\ttooltip: nls.localize(\"taskTerminalStatus.active\", \"Task is running\"),\n};\nexport const SUCCEEDED_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.check,\n\tseverity: Severity.Info,\n\ttooltip: nls.localize(\"taskTerminalStatus.succeeded\", \"Task succeeded\"),\n};\nconst SUCCEEDED_INACTIVE_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.check,\n\tseverity: Severity.Info,\n\ttooltip: nls.localize(\n\t\t\"taskTerminalStatus.succeededInactive\",\n\t\t\"Task succeeded and waiting...\",\n\t),\n};\nexport const FAILED_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.error,\n\tseverity: Severity.Error,\n\ttooltip: nls.localize(\"taskTerminalStatus.errors\", \"Task has errors\"),\n};\nconst FAILED_INACTIVE_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.error,\n\tseverity: Severity.Error,\n\ttooltip: nls.localize(\n\t\t\"taskTerminalStatus.errorsInactive\",\n\t\t\"Task has errors and is waiting...\",\n\t),\n};\nconst WARNING_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.warning,\n\tseverity: Severity.Warning,\n\ttooltip: nls.localize(\"taskTerminalStatus.warnings\", \"Task has warnings\"),\n};\nconst WARNING_INACTIVE_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.warning,\n\tseverity: Severity.Warning,\n\ttooltip: nls.localize(\n\t\t\"taskTerminalStatus.warningsInactive\",\n\t\t\"Task has warnings and is waiting...\",\n\t),\n};\nconst INFO_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.info,\n\tseverity: Severity.Info,\n\ttooltip: nls.localize(\"taskTerminalStatus.infos\", \"Task has infos\"),\n};\nconst INFO_INACTIVE_TASK_STATUS: ITerminalStatus = {\n\tid: TASK_TERMINAL_STATUS_ID,\n\ticon: Codicon.info,\n\tseverity: Severity.Info,\n\ttooltip: nls.localize(\n\t\t\"taskTerminalStatus.infosInactive\",\n\t\t\"Task has infos and is waiting...\",\n\t),\n};\n\nexport class TaskTerminalStatus extends Disposable {\n\tprivate terminalMap: Map<number, ITerminalData> = new Map();\n\tprivate _marker: IMarker | undefined;\n\tconstructor(\n\t\t@ITaskService taskService: ITaskService,\n\t\t@IAccessibilitySignalService\n\t\tprivate readonly _accessibilitySignalService: IAccessibilitySignalService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\ttaskService.onDidStateChange((event) => {\n\t\t\t\tswitch (event.kind) {\n\t\t\t\t\tcase TaskEventKind.ProcessStarted:\n\t\t\t\t\tcase TaskEventKind.Active:\n\t\t\t\t\t\tthis.eventActive(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskEventKind.Inactive:\n\t\t\t\t\t\tthis.eventInactive(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskEventKind.ProcessEnded:\n\t\t\t\t\t\tthis.eventEnd(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tfor (const terminalData of this.terminalMap.values()) {\n\t\t\t\t\tterminalData.disposeListener?.dispose();\n\t\t\t\t}\n\t\t\t\tthis.terminalMap.clear();\n\t\t\t}),\n\t\t);\n\t}\n\n\taddTerminal(\n\t\ttask: Task,\n\t\tterminal: ITerminalInstance,\n\t\tproblemMatcher: AbstractProblemCollector,\n\t) {\n\t\tconst status: ITerminalStatus = {\n\t\t\tid: TASK_TERMINAL_STATUS_ID,\n\t\t\tseverity: Severity.Info,\n\t\t};\n\t\tterminal.statusList.add(status);\n\t\tthis._register(\n\t\t\tproblemMatcher.onDidFindFirstMatch(() => {\n\t\t\t\tthis._marker = terminal.registerMarker();\n\t\t\t\tif (this._marker) {\n\t\t\t\t\tthis._register(this._marker);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tproblemMatcher.onDidFindErrors(() => {\n\t\t\t\tif (this._marker) {\n\t\t\t\t\tterminal.addBufferMarker({\n\t\t\t\t\t\tmarker: this._marker,\n\t\t\t\t\t\thoverMessage: nls.localize(\n\t\t\t\t\t\t\t\"task.watchFirstError\",\n\t\t\t\t\t\t\t\"Beginning of detected errors for this run\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdisableCommandStorage: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tproblemMatcher.onDidRequestInvalidateLastMarker(() => {\n\t\t\t\tthis._marker?.dispose();\n\t\t\t\tthis._marker = undefined;\n\t\t\t}),\n\t\t);\n\n\t\tthis.terminalMap.set(terminal.instanceId, {\n\t\t\tterminal,\n\t\t\ttask,\n\t\t\tstatus,\n\t\t\tproblemMatcher,\n\t\t\ttaskRunEnded: false,\n\t\t});\n\t}\n\n\tprivate terminalFromEvent(event: { terminalId: number | undefined }):\n\t\t| ITerminalData\n\t\t| undefined {\n\t\tif (!(\"terminalId\" in event) || !event.terminalId) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.terminalMap.get(event.terminalId);\n\t}\n\n\tprivate eventEnd(event: ITaskProcessEndedEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData) {\n\t\t\treturn;\n\t\t}\n\t\tterminalData.taskRunEnded = true;\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\tif (\n\t\t\tevent.exitCode === 0 &&\n\t\t\tterminalData.problemMatcher.numberOfMatches === 0\n\t\t) {\n\t\t\tthis._accessibilitySignalService.playSignal(\n\t\t\t\tAccessibilitySignal.taskCompleted,\n\t\t\t);\n\t\t\tif (terminalData.task.configurationProperties.isBackground) {\n\t\t\t\tfor (const status of terminalData.terminal.statusList\n\t\t\t\t\t.statuses) {\n\t\t\t\t\tterminalData.terminal.statusList.remove(status);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tterminalData.terminal.statusList.add(SUCCEEDED_TASK_STATUS);\n\t\t\t}\n\t\t} else if (\n\t\t\tevent.exitCode ||\n\t\t\tterminalData.problemMatcher.maxMarkerSeverity ===\n\t\t\t\tMarkerSeverity.Error\n\t\t) {\n\t\t\tthis._accessibilitySignalService.playSignal(\n\t\t\t\tAccessibilitySignal.taskFailed,\n\t\t\t);\n\t\t\tterminalData.terminal.statusList.add(FAILED_TASK_STATUS);\n\t\t} else if (\n\t\t\tterminalData.problemMatcher.maxMarkerSeverity ===\n\t\t\tMarkerSeverity.Warning\n\t\t) {\n\t\t\tterminalData.terminal.statusList.add(WARNING_TASK_STATUS);\n\t\t} else if (\n\t\t\tterminalData.problemMatcher.maxMarkerSeverity ===\n\t\t\tMarkerSeverity.Info\n\t\t) {\n\t\t\tterminalData.terminal.statusList.add(INFO_TASK_STATUS);\n\t\t}\n\t}\n\n\tprivate eventInactive(event: ITaskGeneralEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (\n\t\t\t!terminalData ||\n\t\t\t!terminalData.problemMatcher ||\n\t\t\tterminalData.taskRunEnded\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\tif (terminalData.problemMatcher.numberOfMatches === 0) {\n\t\t\tthis._accessibilitySignalService.playSignal(\n\t\t\t\tAccessibilitySignal.taskCompleted,\n\t\t\t);\n\t\t\tterminalData.terminal.statusList.add(\n\t\t\t\tSUCCEEDED_INACTIVE_TASK_STATUS,\n\t\t\t);\n\t\t} else if (\n\t\t\tterminalData.problemMatcher.maxMarkerSeverity ===\n\t\t\tMarkerSeverity.Error\n\t\t) {\n\t\t\tthis._accessibilitySignalService.playSignal(\n\t\t\t\tAccessibilitySignal.taskFailed,\n\t\t\t);\n\t\t\tterminalData.terminal.statusList.add(FAILED_INACTIVE_TASK_STATUS);\n\t\t} else if (\n\t\t\tterminalData.problemMatcher.maxMarkerSeverity ===\n\t\t\tMarkerSeverity.Warning\n\t\t) {\n\t\t\tterminalData.terminal.statusList.add(WARNING_INACTIVE_TASK_STATUS);\n\t\t} else if (\n\t\t\tterminalData.problemMatcher.maxMarkerSeverity ===\n\t\t\tMarkerSeverity.Info\n\t\t) {\n\t\t\tterminalData.terminal.statusList.add(INFO_INACTIVE_TASK_STATUS);\n\t\t}\n\t}\n\n\tprivate eventActive(event: ITaskGeneralEvent | ITaskProcessStartedEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData) {\n\t\t\treturn;\n\t\t}\n\t\tif (!terminalData.disposeListener) {\n\t\t\tterminalData.disposeListener = this._register(\n\t\t\t\tnew MutableDisposable(),\n\t\t\t);\n\t\t\tterminalData.disposeListener.value =\n\t\t\t\tterminalData.terminal.onDisposed(() => {\n\t\t\t\t\tif (!event.terminalId) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.terminalMap.delete(event.terminalId);\n\t\t\t\t\tterminalData.disposeListener?.dispose();\n\t\t\t\t});\n\t\t}\n\t\tterminalData.taskRunEnded = false;\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\t// We don't want to show an infinite status for a background task that doesn't have a problem matcher.\n\t\tif (\n\t\t\tterminalData.problemMatcher instanceof StartStopProblemCollector ||\n\t\t\tterminalData.problemMatcher?.problemMatchers.length > 0 ||\n\t\t\tevent.runType === TaskRunType.SingleRun\n\t\t) {\n\t\t\tterminalData.terminal.statusList.add(ACTIVE_TASK_STATUS);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
