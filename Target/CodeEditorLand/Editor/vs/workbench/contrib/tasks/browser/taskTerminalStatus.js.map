{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { AbstractProblemCollector, StartStopProblemCollector } from '../common/problemCollectors.js';\nimport { ITaskGeneralEvent, ITaskProcessEndedEvent, ITaskProcessStartedEvent, TaskEventKind, TaskRunType } from '../common/tasks.js';\nimport { ITaskService, Task } from '../common/taskService.js';\nimport { ITerminalInstance } from '../../terminal/browser/terminal.js';\nimport { MarkerSeverity } from '../../../../platform/markers/common/markers.js';\nimport { spinningLoading } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IMarker } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { ITerminalStatus } from '../../terminal/common/terminal.js';\n\ninterface ITerminalData {\n\tterminal: ITerminalInstance;\n\ttask: Task;\n\tstatus: ITerminalStatus;\n\tproblemMatcher: AbstractProblemCollector;\n\ttaskRunEnded: boolean;\n\tdisposeListener?: MutableDisposable<IDisposable>;\n}\n\nconst TASK_TERMINAL_STATUS_ID = 'task_terminal_status';\nexport const ACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: spinningLoading, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.active', \"Task is running\") };\nexport const SUCCEEDED_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.check, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.succeeded', \"Task succeeded\") };\nconst SUCCEEDED_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.check, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.succeededInactive', \"Task succeeded and waiting...\") };\nexport const FAILED_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.error, severity: Severity.Error, tooltip: nls.localize('taskTerminalStatus.errors', \"Task has errors\") };\nconst FAILED_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.error, severity: Severity.Error, tooltip: nls.localize('taskTerminalStatus.errorsInactive', \"Task has errors and is waiting...\") };\nconst WARNING_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.warning, severity: Severity.Warning, tooltip: nls.localize('taskTerminalStatus.warnings', \"Task has warnings\") };\nconst WARNING_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.warning, severity: Severity.Warning, tooltip: nls.localize('taskTerminalStatus.warningsInactive', \"Task has warnings and is waiting...\") };\nconst INFO_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.info, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.infos', \"Task has infos\") };\nconst INFO_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.info, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.infosInactive', \"Task has infos and is waiting...\") };\n\nexport class TaskTerminalStatus extends Disposable {\n\tprivate terminalMap: Map<number, ITerminalData> = new Map();\n\tprivate _marker: IMarker | undefined;\n\tconstructor(@ITaskService taskService: ITaskService, @IAccessibilitySignalService private readonly _accessibilitySignalService: IAccessibilitySignalService) {\n\t\tsuper();\n\t\tthis._register(taskService.onDidStateChange((event) => {\n\t\t\tswitch (event.kind) {\n\t\t\t\tcase TaskEventKind.ProcessStarted:\n\t\t\t\tcase TaskEventKind.Active: this.eventActive(event); break;\n\t\t\t\tcase TaskEventKind.Inactive: this.eventInactive(event); break;\n\t\t\t\tcase TaskEventKind.ProcessEnded: this.eventEnd(event); break;\n\t\t\t}\n\t\t}));\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const terminalData of this.terminalMap.values()) {\n\t\t\t\tterminalData.disposeListener?.dispose();\n\t\t\t}\n\t\t\tthis.terminalMap.clear();\n\t\t}));\n\t}\n\n\taddTerminal(task: Task, terminal: ITerminalInstance, problemMatcher: AbstractProblemCollector) {\n\t\tconst status: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, severity: Severity.Info };\n\t\tterminal.statusList.add(status);\n\t\tthis._register(problemMatcher.onDidFindFirstMatch(() => {\n\t\t\tthis._marker = terminal.registerMarker();\n\t\t\tif (this._marker) {\n\t\t\t\tthis._register(this._marker);\n\t\t\t}\n\t\t}));\n\t\tthis._register(problemMatcher.onDidFindErrors(() => {\n\t\t\tif (this._marker) {\n\t\t\t\tterminal.addBufferMarker({ marker: this._marker, hoverMessage: nls.localize('task.watchFirstError', \"Beginning of detected errors for this run\"), disableCommandStorage: true });\n\t\t\t}\n\t\t}));\n\t\tthis._register(problemMatcher.onDidRequestInvalidateLastMarker(() => {\n\t\t\tthis._marker?.dispose();\n\t\t\tthis._marker = undefined;\n\t\t}));\n\n\t\tthis.terminalMap.set(terminal.instanceId, { terminal, task, status, problemMatcher, taskRunEnded: false });\n\t}\n\n\tprivate terminalFromEvent(event: { terminalId: number | undefined }): ITerminalData | undefined {\n\t\tif (!('terminalId' in event) || !event.terminalId) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.terminalMap.get(event.terminalId);\n\t}\n\n\tprivate eventEnd(event: ITaskProcessEndedEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData) {\n\t\t\treturn;\n\t\t}\n\t\tterminalData.taskRunEnded = true;\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\tif ((event.exitCode === 0) && (terminalData.problemMatcher.numberOfMatches === 0)) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.taskCompleted);\n\t\t\tif (terminalData.task.configurationProperties.isBackground) {\n\t\t\t\tfor (const status of terminalData.terminal.statusList.statuses) {\n\t\t\t\t\tterminalData.terminal.statusList.remove(status);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tterminalData.terminal.statusList.add(SUCCEEDED_TASK_STATUS);\n\t\t\t}\n\t\t} else if (event.exitCode || terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Error) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.taskFailed);\n\t\t\tterminalData.terminal.statusList.add(FAILED_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Warning) {\n\t\t\tterminalData.terminal.statusList.add(WARNING_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Info) {\n\t\t\tterminalData.terminal.statusList.add(INFO_TASK_STATUS);\n\t\t}\n\t}\n\n\tprivate eventInactive(event: ITaskGeneralEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData || !terminalData.problemMatcher || terminalData.taskRunEnded) {\n\t\t\treturn;\n\t\t}\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\tif (terminalData.problemMatcher.numberOfMatches === 0) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.taskCompleted);\n\t\t\tterminalData.terminal.statusList.add(SUCCEEDED_INACTIVE_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Error) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.taskFailed);\n\t\t\tterminalData.terminal.statusList.add(FAILED_INACTIVE_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Warning) {\n\t\t\tterminalData.terminal.statusList.add(WARNING_INACTIVE_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Info) {\n\t\t\tterminalData.terminal.statusList.add(INFO_INACTIVE_TASK_STATUS);\n\t\t}\n\t}\n\n\tprivate eventActive(event: ITaskGeneralEvent | ITaskProcessStartedEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData) {\n\t\t\treturn;\n\t\t}\n\t\tif (!terminalData.disposeListener) {\n\t\t\tterminalData.disposeListener = this._register(new MutableDisposable());\n\t\t\tterminalData.disposeListener.value = terminalData.terminal.onDisposed(() => {\n\t\t\t\tif (!event.terminalId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.terminalMap.delete(event.terminalId);\n\t\t\t\tterminalData.disposeListener?.dispose();\n\t\t\t});\n\t\t}\n\t\tterminalData.taskRunEnded = false;\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\t// We don't want to show an infinite status for a background task that doesn't have a problem matcher.\n\t\tif ((terminalData.problemMatcher instanceof StartStopProblemCollector) || (terminalData.problemMatcher?.problemMatchers.length > 0) || event.runType === TaskRunType.SingleRun) {\n\t\t\tterminalData.terminal.statusList.add(ACTIVE_TASK_STATUS);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
