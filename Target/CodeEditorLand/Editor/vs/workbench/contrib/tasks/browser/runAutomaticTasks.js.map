{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ITaskService, IWorkspaceFolderTaskResult } from '../common/taskService.js';\nimport { RunOnOptions, Task, TaskRunSource, TaskSource, TaskSourceKind, TASKS_CATEGORY, WorkspaceFileTaskSource, IWorkspaceTaskSource } from '../common/tasks.js';\nimport { IQuickPickItem, IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { Action2 } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nconst ALLOW_AUTOMATIC_TASKS = 'task.allowAutomaticTasks';\n\nexport class RunAutomaticTasks extends Disposable implements IWorkbenchContribution {\n\tprivate _hasRunTasks: boolean = false;\n\tconstructor(\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly _logService: ILogService) {\n\t\tsuper();\n\t\tif (this._taskService.isReconnected) {\n\t\t\tthis._tryRunTasks();\n\t\t} else {\n\t\t\tthis._register(Event.once(this._taskService.onDidReconnectToTasks)(async () => await this._tryRunTasks()));\n\t\t}\n\t\tthis._register(this._workspaceTrustManagementService.onDidChangeTrust(async () => await this._tryRunTasks()));\n\t}\n\n\tprivate async _tryRunTasks() {\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._hasRunTasks || this._configurationService.getValue(ALLOW_AUTOMATIC_TASKS) === 'off') {\n\t\t\treturn;\n\t\t}\n\t\tthis._hasRunTasks = true;\n\t\tthis._logService.trace('RunAutomaticTasks: Trying to run tasks.');\n\t\t// Wait until we have task system info (the extension host and workspace folders are available).\n\t\tif (!this._taskService.hasTaskSystemInfo) {\n\t\t\tthis._logService.trace('RunAutomaticTasks: Awaiting task system info.');\n\t\t\tawait Event.toPromise(Event.once(this._taskService.onDidChangeTaskSystemInfo));\n\t\t}\n\t\tlet workspaceTasks = await this._taskService.getWorkspaceTasks(TaskRunSource.FolderOpen);\n\t\tthis._logService.trace(`RunAutomaticTasks: Found ${workspaceTasks.size} automatic tasks`);\n\n\t\tlet autoTasks = this._findAutoTasks(this._taskService, workspaceTasks);\n\t\tthis._logService.trace(`RunAutomaticTasks: taskNames=${JSON.stringify(autoTasks.taskNames)}`);\n\n\t\t// As seen in some cases with the Remote SSH extension, the tasks configuration is loaded after we have come\n\t\t// to this point. Let's give it some extra time.\n\t\tif (autoTasks.taskNames.length === 0) {\n\t\t\tconst updatedWithinTimeout = await Promise.race([\n\t\t\t\tnew Promise<boolean>((resolve) => {\n\t\t\t\t\tEvent.toPromise(Event.once(this._taskService.onDidChangeTaskConfig)).then(() => resolve(true));\n\t\t\t\t}),\n\t\t\t\tnew Promise<boolean>((resolve) => {\n\t\t\t\t\tconst timer = setTimeout(() => { clearTimeout(timer); resolve(false); }, 10000);\n\t\t\t\t})]);\n\n\t\t\tif (!updatedWithinTimeout) {\n\t\t\t\tthis._logService.trace(`RunAutomaticTasks: waited some extra time, but no update of tasks configuration`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tworkspaceTasks = await this._taskService.getWorkspaceTasks(TaskRunSource.FolderOpen);\n\t\t\tautoTasks = this._findAutoTasks(this._taskService, workspaceTasks);\n\t\t\tthis._logService.trace(`RunAutomaticTasks: updated taskNames=${JSON.stringify(autoTasks.taskNames)}`);\n\t\t}\n\n\t\tthis._runWithPermission(this._taskService, this._configurationService, autoTasks.tasks, autoTasks.taskNames);\n\t}\n\n\tprivate _runTasks(taskService: ITaskService, tasks: Array<Task | Promise<Task | undefined>>) {\n\t\ttasks.forEach(task => {\n\t\t\tif (task instanceof Promise) {\n\t\t\t\ttask.then(promiseResult => {\n\t\t\t\t\tif (promiseResult) {\n\t\t\t\t\t\ttaskService.run(promiseResult);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttaskService.run(task);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getTaskSource(source: TaskSource): URI | undefined {\n\t\tconst taskKind = TaskSourceKind.toConfigurationTarget(source.kind);\n\t\tswitch (taskKind) {\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\treturn resources.joinPath((<IWorkspaceTaskSource>source).config.workspaceFolder!.uri, (<IWorkspaceTaskSource>source).config.file);\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE: {\n\t\t\t\treturn (<WorkspaceFileTaskSource>source).config.workspace?.configuration ?? undefined;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _findAutoTasks(taskService: ITaskService, workspaceTaskResult: Map<string, IWorkspaceFolderTaskResult>): { tasks: Array<Task | Promise<Task | undefined>>; taskNames: Array<string>; locations: Map<string, URI> } {\n\t\tconst tasks = new Array<Task | Promise<Task | undefined>>();\n\t\tconst taskNames = new Array<string>();\n\t\tconst locations = new Map<string, URI>();\n\n\t\tif (workspaceTaskResult) {\n\t\t\tworkspaceTaskResult.forEach(resultElement => {\n\t\t\t\tif (resultElement.set) {\n\t\t\t\t\tresultElement.set.tasks.forEach(task => {\n\t\t\t\t\t\tif (task.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t\ttaskNames.push(task._label);\n\t\t\t\t\t\t\tconst location = this._getTaskSource(task._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (resultElement.configurations) {\n\t\t\t\t\tfor (const configuredTask of Object.values(resultElement.configurations.byIdentifier)) {\n\t\t\t\t\t\tif (configuredTask.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(new Promise<Task | undefined>(resolve => {\n\t\t\t\t\t\t\t\ttaskService.getTask(resultElement.workspaceFolder, configuredTask._id, true).then(task => resolve(task));\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tif (configuredTask._label) {\n\t\t\t\t\t\t\t\ttaskNames.push(configuredTask._label);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttaskNames.push(configuredTask.configures.task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst location = this._getTaskSource(configuredTask._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn { tasks, taskNames, locations };\n\t}\n\n\tprivate async _runWithPermission(taskService: ITaskService, configurationService: IConfigurationService, tasks: (Task | Promise<Task | undefined>)[], taskNames: string[]) {\n\t\tif (taskNames.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (configurationService.getValue(ALLOW_AUTOMATIC_TASKS) === 'off') {\n\t\t\treturn;\n\t\t}\n\t\tthis._runTasks(taskService, tasks);\n\t}\n}\n\nexport class ManageAutomaticTaskRunning extends Action2 {\n\n\tpublic static readonly ID = 'workbench.action.tasks.manageAutomaticRunning';\n\tpublic static readonly LABEL = nls.localize('workbench.action.tasks.manageAutomaticRunning', \"Manage Automatic Tasks\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ManageAutomaticTaskRunning.ID,\n\t\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\t\tcategory: TASKS_CATEGORY\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<any> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst allowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.allowAutomaticTasks', \"Allow Automatic Tasks\") };\n\t\tconst disallowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.disallowAutomaticTasks', \"Disallow Automatic Tasks\") };\n\t\tconst value = await quickInputService.pick([allowItem, disallowItem], { canPickMany: false });\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tconfigurationService.updateValue(ALLOW_AUTOMATIC_TASKS, value === allowItem ? 'on' : 'off', ConfigurationTarget.USER);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
