{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { Action2 } from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tITaskService,\n\ttype IWorkspaceFolderTaskResult,\n} from \"../common/taskService.js\";\nimport {\n\ttype IWorkspaceTaskSource,\n\tRunOnOptions,\n\tTASKS_CATEGORY,\n\ttype Task,\n\tTaskRunSource,\n\ttype TaskSource,\n\tTaskSourceKind,\n\ttype WorkspaceFileTaskSource,\n} from \"../common/tasks.js\";\n\nconst ALLOW_AUTOMATIC_TASKS = \"task.allowAutomaticTasks\";\n\nexport class RunAutomaticTasks\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate _hasRunTasks = false;\n\tconstructor(\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly _logService: ILogService) {\n\t\tsuper();\n\t\tif (this._taskService.isReconnected) {\n\t\t\tthis._tryRunTasks();\n\t\t} else {\n\t\t\tthis._register(Event.once(this._taskService.onDidReconnectToTasks)(async () => await this._tryRunTasks()));\n\t\t}\n\t\tthis._register(this._workspaceTrustManagementService.onDidChangeTrust(async () => await this._tryRunTasks()));\n\t}\n\n\tprivate async _tryRunTasks() {\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tthis._hasRunTasks ||\n\t\t\tthis._configurationService.getValue(ALLOW_AUTOMATIC_TASKS) === \"off\"\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._hasRunTasks = true;\n\t\tthis._logService.trace(\"RunAutomaticTasks: Trying to run tasks.\");\n\t\t// Wait until we have task system info (the extension host and workspace folders are available).\n\t\tif (!this._taskService.hasTaskSystemInfo) {\n\t\t\tthis._logService.trace(\n\t\t\t\t\"RunAutomaticTasks: Awaiting task system info.\",\n\t\t\t);\n\t\t\tawait Event.toPromise(\n\t\t\t\tEvent.once(this._taskService.onDidChangeTaskSystemInfo),\n\t\t\t);\n\t\t}\n\t\tlet workspaceTasks = await this._taskService.getWorkspaceTasks(\n\t\t\tTaskRunSource.FolderOpen,\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t`RunAutomaticTasks: Found ${workspaceTasks.size} automatic tasks`,\n\t\t);\n\n\t\tlet autoTasks = this._findAutoTasks(this._taskService, workspaceTasks);\n\t\tthis._logService.trace(\n\t\t\t`RunAutomaticTasks: taskNames=${JSON.stringify(autoTasks.taskNames)}`,\n\t\t);\n\n\t\t// As seen in some cases with the Remote SSH extension, the tasks configuration is loaded after we have come\n\t\t// to this point. Let's give it some extra time.\n\t\tif (autoTasks.taskNames.length === 0) {\n\t\t\tconst updatedWithinTimeout = await Promise.race([\n\t\t\t\tnew Promise<boolean>((resolve) => {\n\t\t\t\t\tEvent.toPromise(\n\t\t\t\t\t\tEvent.once(this._taskService.onDidChangeTaskConfig),\n\t\t\t\t\t).then(() => resolve(true));\n\t\t\t\t}),\n\t\t\t\tnew Promise<boolean>((resolve) => {\n\t\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t}, 10000);\n\t\t\t\t}),\n\t\t\t]);\n\n\t\t\tif (!updatedWithinTimeout) {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t`RunAutomaticTasks: waited some extra time, but no update of tasks configuration`,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tworkspaceTasks = await this._taskService.getWorkspaceTasks(\n\t\t\t\tTaskRunSource.FolderOpen,\n\t\t\t);\n\t\t\tautoTasks = this._findAutoTasks(this._taskService, workspaceTasks);\n\t\t\tthis._logService.trace(\n\t\t\t\t`RunAutomaticTasks: updated taskNames=${JSON.stringify(autoTasks.taskNames)}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._runWithPermission(\n\t\t\tthis._taskService,\n\t\t\tthis._configurationService,\n\t\t\tautoTasks.tasks,\n\t\t\tautoTasks.taskNames,\n\t\t);\n\t}\n\n\tprivate _runTasks(\n\t\ttaskService: ITaskService,\n\t\ttasks: Array<Task | Promise<Task | undefined>>,\n\t) {\n\t\ttasks.forEach((task) => {\n\t\t\tif (task instanceof Promise) {\n\t\t\t\ttask.then((promiseResult) => {\n\t\t\t\t\tif (promiseResult) {\n\t\t\t\t\t\ttaskService.run(promiseResult);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttaskService.run(task);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getTaskSource(source: TaskSource): URI | undefined {\n\t\tconst taskKind = TaskSourceKind.toConfigurationTarget(source.kind);\n\t\tswitch (taskKind) {\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\treturn resources.joinPath(\n\t\t\t\t\t(<IWorkspaceTaskSource>source).config.workspaceFolder!.uri,\n\t\t\t\t\t(<IWorkspaceTaskSource>source).config.file,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE: {\n\t\t\t\treturn (\n\t\t\t\t\t(<WorkspaceFileTaskSource>source).config.workspace\n\t\t\t\t\t\t?.configuration ?? undefined\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _findAutoTasks(\n\t\ttaskService: ITaskService,\n\t\tworkspaceTaskResult: Map<string, IWorkspaceFolderTaskResult>,\n\t): {\n\t\ttasks: Array<Task | Promise<Task | undefined>>;\n\t\ttaskNames: Array<string>;\n\t\tlocations: Map<string, URI>;\n\t} {\n\t\tconst tasks = new Array<Task | Promise<Task | undefined>>();\n\t\tconst taskNames = new Array<string>();\n\t\tconst locations = new Map<string, URI>();\n\n\t\tif (workspaceTaskResult) {\n\t\t\tworkspaceTaskResult.forEach((resultElement) => {\n\t\t\t\tif (resultElement.set) {\n\t\t\t\t\tresultElement.set.tasks.forEach((task) => {\n\t\t\t\t\t\tif (task.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t\ttaskNames.push(task._label);\n\t\t\t\t\t\t\tconst location = this._getTaskSource(task._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (resultElement.configurations) {\n\t\t\t\t\tfor (const configuredTask of Object.values(\n\t\t\t\t\t\tresultElement.configurations.byIdentifier,\n\t\t\t\t\t)) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tconfiguredTask.runOptions.runOn ===\n\t\t\t\t\t\t\tRunOnOptions.folderOpen\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\ttasks.push(\n\t\t\t\t\t\t\t\tnew Promise<Task | undefined>((resolve) => {\n\t\t\t\t\t\t\t\t\ttaskService\n\t\t\t\t\t\t\t\t\t\t.getTask(\n\t\t\t\t\t\t\t\t\t\t\tresultElement.workspaceFolder,\n\t\t\t\t\t\t\t\t\t\t\tconfiguredTask._id,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.then((task) => resolve(task));\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (configuredTask._label) {\n\t\t\t\t\t\t\t\ttaskNames.push(configuredTask._label);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttaskNames.push(configuredTask.configures.task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst location = this._getTaskSource(\n\t\t\t\t\t\t\t\tconfiguredTask._source,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn { tasks, taskNames, locations };\n\t}\n\n\tprivate async _runWithPermission(\n\t\ttaskService: ITaskService,\n\t\tconfigurationService: IConfigurationService,\n\t\ttasks: (Task | Promise<Task | undefined>)[],\n\t\ttaskNames: string[],\n\t) {\n\t\tif (taskNames.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (configurationService.getValue(ALLOW_AUTOMATIC_TASKS) === \"off\") {\n\t\t\treturn;\n\t\t}\n\t\tthis._runTasks(taskService, tasks);\n\t}\n}\n\nexport class ManageAutomaticTaskRunning extends Action2 {\n\tpublic static readonly ID = \"workbench.action.tasks.manageAutomaticRunning\";\n\tpublic static readonly LABEL = nls.localize(\n\t\t\"workbench.action.tasks.manageAutomaticRunning\",\n\t\t\"Manage Automatic Tasks\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ManageAutomaticTaskRunning.ID,\n\t\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\t\tcategory: TASKS_CATEGORY,\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<any> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst allowItem: IQuickPickItem = {\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"workbench.action.tasks.allowAutomaticTasks\",\n\t\t\t\t\"Allow Automatic Tasks\",\n\t\t\t),\n\t\t};\n\t\tconst disallowItem: IQuickPickItem = {\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"workbench.action.tasks.disallowAutomaticTasks\",\n\t\t\t\t\"Disallow Automatic Tasks\",\n\t\t\t),\n\t\t};\n\t\tconst value = await quickInputService.pick([allowItem, disallowItem], {\n\t\t\tcanPickMany: false,\n\t\t});\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tconfigurationService.updateValue(\n\t\t\tALLOW_AUTOMATIC_TASKS,\n\t\t\tvalue === allowItem ? \"on\" : \"off\",\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
