import { IStringDictionary } from "vs/base/common/collections";
import { Event } from "vs/base/common/event";
import { Disposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IModelService } from "vs/editor/common/services/model";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILogService } from "vs/platform/log/common/log";
import { IMarkerService } from "vs/platform/markers/common/markers";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IViewDescriptorService } from "vs/workbench/common/views";
import { ITaskEvent, Task } from "vs/workbench/contrib/tasks/common/tasks";
import { ITaskExecuteResult, ITaskResolver, ITaskSystem, ITaskSystemInfoResolver, ITaskTerminateResponse } from "vs/workbench/contrib/tasks/common/taskSystem";
import { ITerminalGroupService, ITerminalService } from "vs/workbench/contrib/terminal/browser/terminal";
import { ITerminalProfileResolverService } from "vs/workbench/contrib/terminal/common/terminal";
import { IConfigurationResolverService } from "vs/workbench/services/configurationResolver/common/configurationResolver";
import { IWorkbenchEnvironmentService } from "vs/workbench/services/environment/common/environmentService";
import { IOutputService } from "vs/workbench/services/output/common/output";
import { IPaneCompositePartService } from "vs/workbench/services/panecomposite/browser/panecomposite";
import { IPathService } from "vs/workbench/services/path/common/pathService";
import { IViewsService } from "vs/workbench/services/views/common/viewsService";
export declare class TerminalTaskSystem extends Disposable implements ITaskSystem {
    private _terminalService;
    private _terminalGroupService;
    private _outputService;
    private _paneCompositeService;
    private _viewsService;
    private _markerService;
    private _modelService;
    private _configurationResolverService;
    private _contextService;
    private _environmentService;
    private _outputChannelId;
    private _fileService;
    private _terminalProfileResolverService;
    private _pathService;
    private _viewDescriptorService;
    private _logService;
    private _notificationService;
    static TelemetryEventName: string;
    private static readonly ProcessVarName;
    private static _shellQuotes;
    private static _osShellQuotes;
    private _activeTasks;
    private _busyTasks;
    private _terminals;
    private _idleTaskTerminals;
    private _sameTaskTerminals;
    private _taskSystemInfoResolver;
    private _lastTask;
    private _currentTask;
    private _isRerun;
    private _previousPanelId;
    private _previousTerminalInstance;
    private _terminalStatusManager;
    private _terminalCreationQueue;
    private _hasReconnected;
    private readonly _onDidStateChange;
    private _reconnectedTerminals;
    taskShellIntegrationStartSequence(cwd: string | URI | undefined): string;
    get taskShellIntegrationOutputSequence(): string;
    constructor(_terminalService: ITerminalService, _terminalGroupService: ITerminalGroupService, _outputService: IOutputService, _paneCompositeService: IPaneCompositePartService, _viewsService: IViewsService, _markerService: IMarkerService, _modelService: IModelService, _configurationResolverService: IConfigurationResolverService, _contextService: IWorkspaceContextService, _environmentService: IWorkbenchEnvironmentService, _outputChannelId: string, _fileService: IFileService, _terminalProfileResolverService: ITerminalProfileResolverService, _pathService: IPathService, _viewDescriptorService: IViewDescriptorService, _logService: ILogService, _notificationService: INotificationService, instantiationService: IInstantiationService, taskSystemInfoResolver: ITaskSystemInfoResolver);
    get onDidStateChange(): Event<ITaskEvent>;
    private _log;
    protected _showOutput(): void;
    reconnect(task: Task, resolver: ITaskResolver): ITaskExecuteResult;
    run(task: Task, resolver: ITaskResolver, trigger?: string): ITaskExecuteResult;
    rerun(): ITaskExecuteResult | undefined;
    private _showTaskLoadErrors;
    isTaskVisible(task: Task): boolean;
    revealTask(task: Task): boolean;
    isActive(): Promise<boolean>;
    isActiveSync(): boolean;
    canAutoTerminate(): boolean;
    getActiveTasks(): Task[];
    getLastInstance(task: Task): Task | undefined;
    getBusyTasks(): Task[];
    customExecutionComplete(task: Task, result: number): Promise<void>;
    private _getInstances;
    private _removeFromActiveTasks;
    private _fireTaskEvent;
    terminate(task: Task): Promise<ITaskTerminateResponse>;
    terminateAll(): Promise<ITaskTerminateResponse[]>;
    private _showDependencyCycleMessage;
    private _executeTask;
    private _createInactiveDependencyPromise;
    private _adoptConfigurationForDependencyTask;
    private _getDependencyPromise;
    private _executeDependencyTask;
    private _resolveAndFindExecutable;
    private _findUnresolvedVariables;
    private _mergeMaps;
    private _acquireInput;
    private _resolveVariablesFromSet;
    private _executeCommand;
    private _isTaskEmpty;
    private _reexecuteCommand;
    private _executeInTerminal;
    private _createTerminalName;
    private _createShellLaunchConfig;
    private _addAllArgument;
    private _reconnectToTerminal;
    private _doCreateTerminal;
    private _reconnectToTerminals;
    private _deleteTaskAndTerminal;
    private _createTerminal;
    private _buildShellCommandLine;
    private _getQuotingOptions;
    private _collectTaskVariables;
    private _collectDefinitionVariables;
    private _collectCommandVariables;
    private _collectMatcherVariables;
    private _collectVariables;
    private _resolveCommandAndArgs;
    private _resolveVariables;
    private _resolveMatchers;
    private _resolveVariable;
    private _resolveOptions;
    static WellKnownCommands: IStringDictionary<boolean>;
    getSanitizedCommand(cmd: string): string;
    private _appendOutput;
}
