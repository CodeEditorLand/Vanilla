{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/abstractTaskService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from '../../../../base/common/actions.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport * as glob from '../../../../base/common/glob.js';\nimport * as json from '../../../../base/common/json.js';\nimport { Disposable, dispose, IDisposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { LRUCache, Touch } from '../../../../base/common/map.js';\nimport * as Objects from '../../../../base/common/objects.js';\nimport { ValidationState, ValidationStatus } from '../../../../base/common/parsers.js';\nimport * as Platform from '../../../../base/common/platform.js';\nimport { TerminateResponseCode } from '../../../../base/common/processes.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport Severity from '../../../../base/common/severity.js';\nimport * as Types from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as UUID from '../../../../base/common/uuid.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IFileService, IFileStatWithPartialMetadata } from '../../../../platform/files/common/files.js';\nimport { IMarkerService } from '../../../../platform/markers/common/markers.js';\nimport { IProgressOptions, IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { INamedProblemMatcher, ProblemMatcherRegistry } from '../common/problemMatcher.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\n\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\n\nimport { IModelService } from '../../../../editor/common/services/model.js';\n\nimport { IWorkspace, IWorkspaceContextService, IWorkspaceFolder, WorkbenchState, WorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { Markers } from '../../markers/common/markers.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nimport { IOutputChannel, IOutputService } from '../../../services/output/common/output.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\n\nimport { ITerminalGroupService, ITerminalService } from '../../terminal/browser/terminal.js';\nimport { ITerminalProfileResolverService } from '../../terminal/common/terminal.js';\n\nimport { ConfiguringTask, ContributedTask, CustomTask, ExecutionEngine, InMemoryTask, ITaskEvent, ITaskIdentifier, ITaskSet, JsonSchemaVersion, KeyedTaskIdentifier, RuntimeType, Task, TASK_RUNNING_STATE, TaskDefinition, TaskEventKind, TaskGroup, TaskRunSource, TaskSettingId, TaskSorter, TaskSourceKind, TasksSchemaProperties, USER_TASKS_GROUP_KEY } from '../common/tasks.js';\nimport { CustomExecutionSupportedContext, ICustomizationProperties, IProblemMatcherRunOptions, ITaskFilter, ITaskProvider, ITaskService, IWorkspaceFolderTaskResult, ProcessExecutionSupportedContext, ServerlessWebContext, ShellExecutionSupportedContext, TaskCommandsRegistered, TaskExecutionSupportedContext } from '../common/taskService.js';\nimport { ITaskExecuteResult, ITaskResolver, ITaskSummary, ITaskSystem, ITaskSystemInfo, ITaskTerminateResponse, TaskError, TaskErrors, TaskExecuteKind } from '../common/taskSystem.js';\nimport { getTemplates as getTaskTemplates } from '../common/taskTemplates.js';\n\nimport * as TaskConfig from '../common/taskConfiguration.js';\nimport { TerminalTaskSystem } from './terminalTaskSystem.js';\n\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator, QuickPickInput } from '../../../../platform/quickinput/common/quickInput.js';\n\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { TaskDefinitionRegistry } from '../common/taskDefinitionRegistry.js';\n\nimport { raceTimeout } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { toFormattedString } from '../../../../base/common/jsonFormatter.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { TextEditorSelectionRevealType } from '../../../../platform/editor/common/editor.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { TerminalExitReason } from '../../../../platform/terminal/common/terminal.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { VirtualWorkspaceContext } from '../../../common/contextkeys.js';\nimport { EditorResourceAccessor, SaveReason } from '../../../common/editor.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { configureTaskIcon, isWorkspaceFolder, ITaskQuickPickEntry, QUICKOPEN_DETAIL_CONFIG, QUICKOPEN_SKIP_CONFIG, TaskQuickPick } from './taskQuickPick.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { ILifecycleService, ShutdownReason, StartupKind } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nimport { IPathService } from '../../../services/path/common/pathService.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\n\nconst QUICKOPEN_HISTORY_LIMIT_CONFIG = 'task.quickOpen.history';\nconst PROBLEM_MATCHER_NEVER_CONFIG = 'task.problemMatchers.neverPrompt';\nconst USE_SLOW_PICKER = 'task.quickOpen.showAll';\n\nexport namespace ConfigureTaskAction {\n\texport const ID = 'workbench.action.tasks.configureTaskRunner';\n\texport const TEXT = nls.localize2('ConfigureTaskRunnerAction.label', \"Configure Task\");\n}\n\nexport type TaskQuickPickEntryType = (IQuickPickItem & { task: Task }) | (IQuickPickItem & { folder: IWorkspaceFolder }) | (IQuickPickItem & { settingType: string });\n\nclass ProblemReporter implements TaskConfig.IProblemReporter {\n\n\tprivate _validationStatus: ValidationStatus;\n\n\tconstructor(private _outputChannel: IOutputChannel) {\n\t\tthis._validationStatus = new ValidationStatus();\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Info;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Warning;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Error;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Fatal;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n}\n\nexport interface IWorkspaceFolderConfigurationResult {\n\tworkspaceFolder: IWorkspaceFolder;\n\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined;\n\thasErrors: boolean;\n}\n\ninterface ICommandUpgrade {\n\tcommand?: string;\n\targs?: string[];\n}\n\nclass TaskMap {\n\tprivate _store: Map<string, Task[]> = new Map();\n\n\tpublic forEach(callback: (value: Task[], folder: string) => void): void {\n\t\tthis._store.forEach(callback);\n\t}\n\n\tpublic static getKey(workspaceFolder: IWorkspace | IWorkspaceFolder | string): string {\n\t\tlet key: string | undefined;\n\t\tif (Types.isString(workspaceFolder)) {\n\t\t\tkey = workspaceFolder;\n\t\t} else {\n\t\t\tconst uri: URI | null | undefined = isWorkspaceFolder(workspaceFolder) ? workspaceFolder.uri : workspaceFolder.configuration;\n\t\t\tkey = uri ? uri.toString() : '';\n\t\t}\n\t\treturn key;\n\t}\n\n\tpublic get(workspaceFolder: IWorkspace | IWorkspaceFolder | string): Task[] {\n\t\tconst key = TaskMap.getKey(workspaceFolder);\n\t\tlet result: Task[] | undefined = this._store.get(key);\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tthis._store.set(key, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic add(workspaceFolder: IWorkspace | IWorkspaceFolder | string, ...task: Task[]): void {\n\t\tconst key = TaskMap.getKey(workspaceFolder);\n\t\tlet values = this._store.get(key);\n\t\tif (!values) {\n\t\t\tvalues = [];\n\t\t\tthis._store.set(key, values);\n\t\t}\n\t\tvalues.push(...task);\n\t}\n\n\tpublic all(): Task[] {\n\t\tconst result: Task[] = [];\n\t\tthis._store.forEach((values) => result.push(...values));\n\t\treturn result;\n\t}\n}\n\nexport abstract class AbstractTaskService extends Disposable implements ITaskService {\n\n\t// private static autoDetectTelemetryName: string = 'taskServer.autoDetect';\n\tprivate static readonly RecentlyUsedTasks_Key = 'workbench.tasks.recentlyUsedTasks';\n\tprivate static readonly RecentlyUsedTasks_KeyV2 = 'workbench.tasks.recentlyUsedTasks2';\n\tprivate static readonly PersistentTasks_Key = 'workbench.tasks.persistentTasks';\n\tprivate static readonly IgnoreTask010DonotShowAgain_key = 'workbench.tasks.ignoreTask010Shown';\n\n\tpublic _serviceBrand: undefined;\n\tpublic static OutputChannelId: string = 'tasks';\n\tpublic static OutputChannelLabel: string = nls.localize('tasks', \"Tasks\");\n\n\tprivate static _nextHandle: number = 0;\n\n\tprivate _tasksReconnected: boolean = false;\n\tprivate _schemaVersion: JsonSchemaVersion | undefined;\n\tprivate _executionEngine: ExecutionEngine | undefined;\n\tprivate _workspaceFolders: IWorkspaceFolder[] | undefined;\n\tprivate _workspace: IWorkspace | undefined;\n\tprivate _ignoredWorkspaceFolders: IWorkspaceFolder[] | undefined;\n\tprivate _showIgnoreMessage?: boolean;\n\tprivate _providers: Map<number, ITaskProvider>;\n\tprivate _providerTypes: Map<number, string>;\n\tprotected _taskSystemInfos: Map<string, ITaskSystemInfo[]>;\n\n\tprotected _workspaceTasksPromise?: Promise<Map<string, IWorkspaceFolderTaskResult>>;\n\tprotected readonly _whenTaskSystemReady: Promise<void>;\n\n\tprotected _taskSystem?: ITaskSystem;\n\tprotected _taskSystemListeners?: IDisposable[] = [];\n\tprivate _recentlyUsedTasksV1: LRUCache<string, string> | undefined;\n\tprivate _recentlyUsedTasks: LRUCache<string, string> | undefined;\n\n\tprivate _persistentTasks: LRUCache<string, string> | undefined;\n\n\tprotected _taskRunningState: IContextKey<boolean>;\n\n\tprotected _outputChannel: IOutputChannel;\n\tprotected readonly _onDidStateChange: Emitter<ITaskEvent>;\n\tprivate _waitForAllSupportedExecutions: Promise<void>;\n\tprivate _onDidRegisterSupportedExecutions: Emitter<void> = new Emitter();\n\tprivate _onDidRegisterAllSupportedExecutions: Emitter<void> = new Emitter();\n\tprivate _onDidChangeTaskSystemInfo: Emitter<void> = new Emitter();\n\tprivate _willRestart: boolean = false;\n\tpublic onDidChangeTaskSystemInfo: Event<void> = this._onDidChangeTaskSystemInfo.event;\n\tprivate _onDidReconnectToTasks: Emitter<void> = new Emitter();\n\tpublic onDidReconnectToTasks: Event<void> = this._onDidReconnectToTasks.event;\n\tprivate _onDidChangeTaskConfig: Emitter<void> = new Emitter();\n\tpublic onDidChangeTaskConfig: Event<void> = this._onDidChangeTaskConfig.event;\n\tpublic get isReconnected(): boolean { return this._tasksReconnected; }\n\tprivate _onDidChangeTaskProviders = this._register(new Emitter<void>());\n\tpublic onDidChangeTaskProviders = this._onDidChangeTaskProviders.event;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IMarkerService protected readonly _markerService: IMarkerService,\n\t\t@IOutputService protected readonly _outputService: IOutputService,\n\t\t@IPaneCompositePartService private readonly _paneCompositeService: IPaneCompositePartService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IWorkspaceContextService protected readonly _contextService: IWorkspaceContextService,\n\t\t@ITelemetryService protected readonly _telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IModelService protected readonly _modelService: IModelService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IConfigurationResolverService protected readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IDialogService protected readonly _dialogService: IDialogService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IContextKeyService protected readonly _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IPreferencesService private readonly _preferencesService: IPreferencesService,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkspaceTrustRequestService private readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._whenTaskSystemReady = Event.toPromise(this.onDidChangeTaskSystemInfo);\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._taskSystem = undefined;\n\t\tthis._taskSystemListeners = undefined;\n\t\tthis._outputChannel = this._outputService.getChannel(AbstractTaskService.OutputChannelId)!;\n\t\tthis._providers = new Map<number, ITaskProvider>();\n\t\tthis._providerTypes = new Map<number, string>();\n\t\tthis._taskSystemInfos = new Map<string, ITaskSystemInfo[]>();\n\t\tthis._register(this._contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tconst folderSetup = this._computeWorkspaceFolderSetup();\n\t\t\tif (this.executionEngine !== folderSetup[2]) {\n\t\t\t\tthis._disposeTaskSystemListeners();\n\t\t\t\tthis._taskSystem = undefined;\n\t\t\t}\n\t\t\tthis._updateSetup(folderSetup);\n\t\t\treturn this._updateWorkspaceTasks(TaskRunSource.FolderOpen);\n\t\t}));\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (!e.affectsConfiguration('tasks') || (!this._taskSystem && !this._workspaceTasksPromise)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._taskSystem || this._taskSystem instanceof TerminalTaskSystem) {\n\t\t\t\tthis._outputChannel.clear();\n\t\t\t}\n\n\t\t\tif (e.affectsConfiguration(TaskSettingId.Reconnection)) {\n\t\t\t\tif (!this._configurationService.getValue(TaskSettingId.Reconnection)) {\n\t\t\t\t\tthis._persistentTasks?.clear();\n\t\t\t\t\tthis._storageService.remove(AbstractTaskService.PersistentTasks_Key, StorageScope.WORKSPACE);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._setTaskLRUCacheLimit();\n\t\t\tawait this._updateWorkspaceTasks(TaskRunSource.ConfigurationChange);\n\t\t\tthis._onDidChangeTaskConfig.fire();\n\t\t}));\n\t\tthis._taskRunningState = TASK_RUNNING_STATE.bindTo(_contextKeyService);\n\t\tthis._onDidStateChange = this._register(new Emitter());\n\t\tthis._registerCommands().then(() => TaskCommandsRegistered.bindTo(this._contextKeyService).set(true));\n\t\tServerlessWebContext.bindTo(this._contextKeyService).set(Platform.isWeb && !remoteAgentService.getConnection()?.remoteAuthority);\n\t\tthis._configurationResolverService.contributeVariable('defaultBuildTask', async (): Promise<string | undefined> => {\n\t\t\t// delay provider activation, we might find a single default build task in the tasks.json file\n\t\t\tlet tasks = await this._getTasksForGroup(TaskGroup.Build, true);\n\t\t\tif (tasks.length > 0) {\n\t\t\t\tconst defaults = this._getDefaultTasks(tasks);\n\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\treturn defaults[0]._label;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// activate all providers, we haven't found the default build task in the tasks.json file\n\t\t\ttasks = await this._getTasksForGroup(TaskGroup.Build);\n\t\t\tconst defaults = this._getDefaultTasks(tasks);\n\t\t\tif (defaults.length === 1) {\n\t\t\t\treturn defaults[0]._label;\n\t\t\t} else if (defaults.length) {\n\t\t\t\ttasks = defaults;\n\t\t\t}\n\n\t\t\tlet entry: ITaskQuickPickEntry | null | undefined;\n\t\t\tif (tasks && tasks.length > 0) {\n\t\t\t\tentry = await this._showQuickPick(tasks, nls.localize('TaskService.pickBuildTaskForLabel', 'Select the build task (there is no default build task defined)'));\n\t\t\t}\n\n\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\tif (!task) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn task._label;\n\t\t});\n\t\tthis._register(this._lifecycleService.onBeforeShutdown(e => {\n\t\t\tthis._willRestart = e.reason !== ShutdownReason.RELOAD;\n\t\t}));\n\t\tthis._register(this.onDidStateChange(e => {\n\t\t\tthis._log(nls.localize('taskEvent', 'Task Event kind: {0}', e.kind), true);\n\t\t\tif (e.kind === TaskEventKind.Changed) {\n\t\t\t\t// no-op\n\t\t\t} else if ((this._willRestart || (e.kind === TaskEventKind.Terminated && e.exitReason === TerminalExitReason.User)) && e.taskId) {\n\t\t\t\tconst key = e.__task.getKey();\n\t\t\t\tif (key) {\n\t\t\t\t\tthis.removePersistentTask(key);\n\t\t\t\t}\n\t\t\t} else if (e.kind === TaskEventKind.Start && e.__task && e.__task.getWorkspaceFolder()) {\n\t\t\t\tthis._setPersistentTask(e.__task);\n\t\t\t}\n\t\t}));\n\t\tthis._waitForAllSupportedExecutions = new Promise(resolve => {\n\t\t\tEvent.once(this._onDidRegisterAllSupportedExecutions.event)(() => resolve());\n\t\t});\n\t\tif (this._terminalService.getReconnectedTerminals('Task')?.length) {\n\t\t\tthis._attemptTaskReconnection();\n\t\t} else {\n\t\t\tthis._terminalService.whenConnected.then(() => {\n\t\t\t\tif (this._terminalService.getReconnectedTerminals('Task')?.length) {\n\t\t\t\t\tthis._attemptTaskReconnection();\n\t\t\t\t} else {\n\t\t\t\t\tthis._tasksReconnected = true;\n\t\t\t\t\tthis._onDidReconnectToTasks.fire();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis._upgrade();\n\t}\n\n\tpublic registerSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean) {\n\t\tif (custom !== undefined) {\n\t\t\tconst customContext = CustomExecutionSupportedContext.bindTo(this._contextKeyService);\n\t\t\tcustomContext.set(custom);\n\t\t}\n\t\tconst isVirtual = !!VirtualWorkspaceContext.getValue(this._contextKeyService);\n\t\tif (shell !== undefined) {\n\t\t\tconst shellContext = ShellExecutionSupportedContext.bindTo(this._contextKeyService);\n\t\t\tshellContext.set(shell && !isVirtual);\n\t\t}\n\t\tif (process !== undefined) {\n\t\t\tconst processContext = ProcessExecutionSupportedContext.bindTo(this._contextKeyService);\n\t\t\tprocessContext.set(process && !isVirtual);\n\t\t}\n\t\t// update tasks so an incomplete list isn't returned when getWorkspaceTasks is called\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._onDidRegisterSupportedExecutions.fire();\n\t\tif (Platform.isWeb || (custom && shell && process)) {\n\t\t\tthis._onDidRegisterAllSupportedExecutions.fire();\n\t\t}\n\t}\n\n\tprivate _attemptTaskReconnection(): void {\n\t\tif (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow) {\n\t\t\tthis._log(nls.localize('TaskService.skippingReconnection', 'Startup kind not window reload, setting connected and removing persistent tasks'), true);\n\t\t\tthis._tasksReconnected = true;\n\t\t\tthis._storageService.remove(AbstractTaskService.PersistentTasks_Key, StorageScope.WORKSPACE);\n\t\t}\n\t\tif (!this._configurationService.getValue(TaskSettingId.Reconnection) || this._tasksReconnected) {\n\t\t\tthis._log(nls.localize('TaskService.notConnecting', 'Setting tasks connected configured value {0}, tasks were already reconnected {1}', this._configurationService.getValue(TaskSettingId.Reconnection), this._tasksReconnected), true);\n\t\t\tthis._tasksReconnected = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._log(nls.localize('TaskService.reconnecting', 'Reconnecting to running tasks...'), true);\n\t\tthis.getWorkspaceTasks(TaskRunSource.Reconnect).then(async () => {\n\t\t\tthis._tasksReconnected = await this._reconnectTasks();\n\t\t\tthis._log(nls.localize('TaskService.reconnected', 'Reconnected to running tasks.'), true);\n\t\t\tthis._onDidReconnectToTasks.fire();\n\t\t});\n\t}\n\n\tprivate async _reconnectTasks(): Promise<boolean> {\n\t\tconst tasks = await this.getSavedTasks('persistent');\n\t\tif (!tasks.length) {\n\t\t\tthis._log(nls.localize('TaskService.noTasks', 'No persistent tasks to reconnect.'), true);\n\t\t\treturn true;\n\t\t}\n\t\tconst taskLabels = tasks.map(task => task._label).join(', ');\n\t\tthis._log(nls.localize('TaskService.reconnectingTasks', 'Reconnecting to {0} tasks...', taskLabels), true);\n\t\tfor (const task of tasks) {\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\tconst resolved = await this.tryResolveTask(task);\n\t\t\t\tif (resolved) {\n\t\t\t\t\tthis.run(resolved, undefined, TaskRunSource.Reconnect);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.run(task, undefined, TaskRunSource.Reconnect);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic get supportsMultipleTaskExecutions(): boolean {\n\t\treturn this.inTerminal();\n\t}\n\n\tprivate async _registerCommands(): Promise<void> {\n\t\tCommandsRegistry.registerCommand({\n\t\t\tid: 'workbench.action.tasks.runTask',\n\t\t\thandler: async (accessor, arg) => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tawait this._runTaskCommand(arg);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Run Task',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tisOptional: true,\n\t\t\t\t\tdescription: nls.localize('runTask.arg', \"Filters the tasks shown in the quickpick\"),\n\t\t\t\t\tschema: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('runTask.label', \"The task's label or a term to filter by\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('runTask.type', \"The contributed task type\")\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttask: {\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('runTask.task', \"The task's label or a term to filter by\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.reRunTask', async (accessor, arg) => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._reRunTaskCommand();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.restartTask', async (accessor, arg) => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runRestartTaskCommand(arg);\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.terminate', async (accessor, arg) => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runTerminateCommand(arg);\n\t\t\t}\n\t\t});\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.showLog', () => {\n\t\t\tthis._showOutput(undefined, true);\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.build', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runBuildCommand();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.test', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runTestCommand();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureTaskRunner', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runConfigureTasks();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultBuildTask', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runConfigureDefaultBuildTask();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultTestTask', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runConfigureDefaultTestTask();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.showTasks', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\treturn this.runShowTasks();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.toggleProblems', () => this._commandService.executeCommand(Markers.TOGGLE_MARKERS_VIEW_ACTION_ID));\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.openUserTasks', async () => {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.User);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.User);\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.openWorkspaceFileTasks', async () => {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.WorkspaceFile);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.WorkspaceFile);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate get workspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._workspaceFolders) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._workspaceFolders!;\n\t}\n\n\tprivate get ignoredWorkspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._ignoredWorkspaceFolders) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._ignoredWorkspaceFolders!;\n\t}\n\n\tprotected get executionEngine(): ExecutionEngine {\n\t\tif (this._executionEngine === undefined) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._executionEngine!;\n\t}\n\n\tprivate get schemaVersion(): JsonSchemaVersion {\n\t\tif (this._schemaVersion === undefined) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._schemaVersion!;\n\t}\n\n\tprivate get showIgnoreMessage(): boolean {\n\t\tif (this._showIgnoreMessage === undefined) {\n\t\t\tthis._showIgnoreMessage = !this._storageService.getBoolean(AbstractTaskService.IgnoreTask010DonotShowAgain_key, StorageScope.WORKSPACE, false);\n\t\t}\n\t\treturn this._showIgnoreMessage;\n\t}\n\n\tprivate _getActivationEvents(type: string | undefined): string[] {\n\t\tconst result: string[] = [];\n\t\tresult.push('onCommand:workbench.action.tasks.runTask');\n\t\tif (type) {\n\t\t\t// send a specific activation event for this task type\n\t\t\tresult.push(`onTaskType:${type}`);\n\t\t} else {\n\t\t\t// send activation events for all task types\n\t\t\tfor (const definition of TaskDefinitionRegistry.all()) {\n\t\t\t\tresult.push(`onTaskType:${definition.taskType}`);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _activateTaskProviders(type: string | undefined): Promise<void> {\n\t\t// We need to first wait for extensions to be registered because we might read\n\t\t// the `TaskDefinitionRegistry` in case `type` is `undefined`\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tthis._log('Activating task providers ' + (type ?? 'all'));\n\t\tawait raceTimeout(\n\t\t\tPromise.all(this._getActivationEvents(type).map(activationEvent => this._extensionService.activateByEvent(activationEvent))),\n\t\t\t5000,\n\t\t\t() => console.warn('Timed out activating extensions for task providers')\n\t\t);\n\t}\n\n\tprivate _updateSetup(setup?: [IWorkspaceFolder[], IWorkspaceFolder[], ExecutionEngine, JsonSchemaVersion, IWorkspace | undefined]): void {\n\t\tif (!setup) {\n\t\t\tsetup = this._computeWorkspaceFolderSetup();\n\t\t}\n\t\tthis._workspaceFolders = setup[0];\n\t\tif (this._ignoredWorkspaceFolders) {\n\t\t\tif (this._ignoredWorkspaceFolders.length !== setup[1].length) {\n\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t} else {\n\t\t\t\tconst set: Set<string> = new Set();\n\t\t\t\tthis._ignoredWorkspaceFolders.forEach(folder => set.add(folder.uri.toString()));\n\t\t\t\tfor (const folder of setup[1]) {\n\t\t\t\t\tif (!set.has(folder.uri.toString())) {\n\t\t\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._ignoredWorkspaceFolders = setup[1];\n\t\tthis._executionEngine = setup[2];\n\t\tthis._schemaVersion = setup[3];\n\t\tthis._workspace = setup[4];\n\t}\n\n\tprotected _showOutput(runSource: TaskRunSource = TaskRunSource.User, userRequested?: boolean): void {\n\t\tif (!VirtualWorkspaceContext.getValue(this._contextKeyService) && ((runSource === TaskRunSource.User) || (runSource === TaskRunSource.ConfigurationChange))) {\n\t\t\tif (userRequested) {\n\t\t\t\tthis._outputService.showChannel(this._outputChannel.id, true);\n\t\t\t} else {\n\t\t\t\tthis._notificationService.prompt(Severity.Warning, nls.localize('taskServiceOutputPrompt', 'There are task errors. See the output for details.'),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('showOutput', \"Show output\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._outputService.showChannel(this._outputChannel.id, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _disposeTaskSystemListeners(): void {\n\t\tif (this._taskSystemListeners) {\n\t\t\tdispose(this._taskSystemListeners);\n\t\t\tthis._taskSystemListeners = undefined;\n\t\t}\n\t}\n\n\tpublic registerTaskProvider(provider: ITaskProvider, type: string): IDisposable {\n\t\tif (!provider) {\n\t\t\treturn {\n\t\t\t\tdispose: () => { }\n\t\t\t};\n\t\t}\n\t\tconst handle = AbstractTaskService._nextHandle++;\n\t\tthis._providers.set(handle, provider);\n\t\tthis._providerTypes.set(handle, type);\n\t\tthis._onDidChangeTaskProviders.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._providers.delete(handle);\n\t\t\t\tthis._providerTypes.delete(handle);\n\t\t\t\tthis._onDidChangeTaskProviders.fire();\n\t\t\t}\n\t\t};\n\t}\n\n\tget hasTaskSystemInfo(): boolean {\n\t\tconst infosCount = Array.from(this._taskSystemInfos.values()).flat().length;\n\t\t// If there's a remoteAuthority, then we end up with 2 taskSystemInfos,\n\t\t// one for each extension host.\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\treturn infosCount > 1;\n\t\t}\n\t\treturn infosCount > 0;\n\t}\n\n\tpublic registerTaskSystem(key: string, info: ITaskSystemInfo): void {\n\t\t// Ideally the Web caller of registerRegisterTaskSystem would use the correct key.\n\t\t// However, the caller doesn't know about the workspace folders at the time of the call, even though we know about them here.\n\t\tif (info.platform === Platform.Platform.Web) {\n\t\t\tkey = this.workspaceFolders.length ? this.workspaceFolders[0].uri.scheme : key;\n\t\t}\n\t\tif (!this._taskSystemInfos.has(key)) {\n\t\t\tthis._taskSystemInfos.set(key, [info]);\n\t\t} else {\n\t\t\tconst infos = this._taskSystemInfos.get(key)!;\n\t\t\tif (info.platform === Platform.Platform.Web) {\n\t\t\t\t// Web infos should be pushed last.\n\t\t\t\tinfos.push(info);\n\t\t\t} else {\n\t\t\t\tinfos.unshift(info);\n\t\t\t}\n\t\t}\n\n\t\tif (this.hasTaskSystemInfo) {\n\t\t\tthis._onDidChangeTaskSystemInfo.fire();\n\t\t}\n\t}\n\n\tprivate _getTaskSystemInfo(key: string): ITaskSystemInfo | undefined {\n\t\tconst infos = this._taskSystemInfos.get(key);\n\t\treturn (infos && infos.length) ? infos[0] : undefined;\n\t}\n\n\tpublic extensionCallbackTaskComplete(task: Task, result: number): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\treturn this._taskSystem.customExecutionComplete(task, result);\n\t}\n\n\t/**\n\t * Get a subset of workspace tasks that match a certain predicate.\n\t */\n\tprivate async _findWorkspaceTasks(predicate: (task: ConfiguringTask | Task, workspaceFolder: IWorkspaceFolder) => boolean): Promise<(ConfiguringTask | Task)[]> {\n\t\tconst result: (ConfiguringTask | Task)[] = [];\n\n\t\tconst tasks = await this.getWorkspaceTasks();\n\t\tfor (const [, workspaceTasks] of tasks) {\n\t\t\tif (workspaceTasks.configurations) {\n\t\t\t\tfor (const taskName in workspaceTasks.configurations.byIdentifier) {\n\t\t\t\t\tconst task = workspaceTasks.configurations.byIdentifier[taskName];\n\t\t\t\t\tif (predicate(task, workspaceTasks.workspaceFolder)) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (workspaceTasks.set) {\n\t\t\t\tfor (const task of workspaceTasks.set.tasks) {\n\t\t\t\t\tif (predicate(task, workspaceTasks.workspaceFolder)) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _findWorkspaceTasksInGroup(group: TaskGroup, isDefault: boolean): Promise<(ConfiguringTask | Task)[]> {\n\t\treturn this._findWorkspaceTasks((task) => {\n\t\t\tconst taskGroup = task.configurationProperties.group;\n\t\t\tif (taskGroup && typeof taskGroup !== 'string') {\n\t\t\t\treturn (taskGroup._id === group._id && (!isDefault || !!taskGroup.isDefault));\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tpublic async getTask(folder: IWorkspace | IWorkspaceFolder | string, identifier: string | ITaskIdentifier, compareId: boolean = false, type: string | undefined = undefined): Promise<Task | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tconst name = Types.isString(folder) ? folder : isWorkspaceFolder(folder) ? folder.name : folder.configuration ? resources.basename(folder.configuration) : undefined;\n\t\tif (this.ignoredWorkspaceFolders.some(ignored => ignored.name === name)) {\n\t\t\treturn Promise.reject(new Error(nls.localize('TaskServer.folderIgnored', 'The folder {0} is ignored since it uses task version 0.1.0', name)));\n\t\t}\n\t\tconst key: string | KeyedTaskIdentifier | undefined = !Types.isString(identifier)\n\t\t\t? TaskDefinition.createTaskIdentifier(identifier, console)\n\t\t\t: identifier;\n\n\t\tif (key === undefined) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Try to find the task in the workspace\n\t\tconst requestedFolder = TaskMap.getKey(folder);\n\t\tconst matchedTasks = await this._findWorkspaceTasks((task, workspaceFolder) => {\n\t\t\tconst taskFolder = TaskMap.getKey(workspaceFolder);\n\t\t\tif (taskFolder !== requestedFolder && taskFolder !== USER_TASKS_GROUP_KEY) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn task.matches(key, compareId);\n\t\t});\n\t\tmatchedTasks.sort(task => task._source.kind === TaskSourceKind.Extension ? 1 : -1);\n\t\tif (matchedTasks.length > 0) {\n\t\t\t// Nice, we found a configured task!\n\t\t\tconst task = matchedTasks[0];\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\treturn this.tryResolveTask(task);\n\t\t\t} else {\n\t\t\t\treturn task;\n\t\t\t}\n\t\t}\n\n\t\t// We didn't find the task, so we need to ask all resolvers about it\n\t\tconst map = await this._getGroupedTasks({ type });\n\t\tlet values = map.get(folder);\n\t\tvalues = values.concat(map.get(USER_TASKS_GROUP_KEY));\n\n\t\tif (!values) {\n\t\t\treturn undefined;\n\t\t}\n\t\tvalues = values.filter(task => task.matches(key, compareId)).sort(task => task._source.kind === TaskSourceKind.Extension ? 1 : -1);\n\t\treturn values.length > 0 ? values[0] : undefined;\n\t}\n\n\tpublic async tryResolveTask(configuringTask: ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tawait this._activateTaskProviders(configuringTask.type);\n\t\tlet matchingProvider: ITaskProvider | undefined;\n\t\tlet matchingProviderUnavailable: boolean = false;\n\t\tfor (const [handle, provider] of this._providers) {\n\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\tif (configuringTask.type === providerType) {\n\t\t\t\tif (providerType && !this._isTaskProviderEnabled(providerType)) {\n\t\t\t\t\tmatchingProviderUnavailable = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmatchingProvider = provider;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!matchingProvider) {\n\t\t\tif (matchingProviderUnavailable) {\n\t\t\t\tthis._log(nls.localize(\n\t\t\t\t\t'TaskService.providerUnavailable',\n\t\t\t\t\t'Warning: {0} tasks are unavailable in the current environment.',\n\t\t\t\t\tconfiguringTask.configures.type\n\t\t\t\t));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to resolve the task first\n\t\ttry {\n\t\t\tconst resolvedTask = await matchingProvider.resolveTask(configuringTask);\n\t\t\tif (resolvedTask && (resolvedTask._id === configuringTask._id)) {\n\t\t\t\treturn TaskConfig.createCustomTask(resolvedTask, configuringTask);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Ignore errors. The task could not be provided by any of the providers.\n\t\t}\n\n\t\t// The task couldn't be resolved. Instead, use the less efficient provideTask.\n\t\tconst tasks = await this.tasks({ type: configuringTask.type });\n\t\tfor (const task of tasks) {\n\t\t\tif (task._id === configuringTask._id) {\n\t\t\t\treturn TaskConfig.createCustomTask(<ContributedTask>task, configuringTask);\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprotected abstract _versionAndEngineCompatible(filter?: ITaskFilter): boolean;\n\n\tpublic async tasks(filter?: ITaskFilter): Promise<Task[]> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn [];\n\t\t}\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn Promise.resolve<Task[]>([]);\n\t\t}\n\t\treturn this._getGroupedTasks(filter).then((map) => this.applyFilterToTaskMap(filter, map));\n\t}\n\n\tpublic async getKnownTasks(filter?: ITaskFilter): Promise<Task[]> {\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn Promise.resolve<Task[]>([]);\n\t\t}\n\n\t\treturn this._getGroupedTasks(filter, true, true).then((map) => this.applyFilterToTaskMap(filter, map));\n\t}\n\n\tpublic taskTypes(): string[] {\n\t\tconst types: string[] = [];\n\t\tif (this._isProvideTasksEnabled()) {\n\t\t\tfor (const definition of TaskDefinitionRegistry.all()) {\n\t\t\t\tif (this._isTaskProviderEnabled(definition.taskType)) {\n\t\t\t\t\ttypes.push(definition.taskType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn types;\n\t}\n\n\tpublic createSorter(): TaskSorter {\n\t\treturn new TaskSorter(this._contextService.getWorkspace() ? this._contextService.getWorkspace().folders : []);\n\t}\n\n\tprivate _isActive(): Promise<boolean> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\treturn this._taskSystem.isActive();\n\t}\n\n\tpublic async getActiveTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._taskSystem.getActiveTasks();\n\t}\n\n\tpublic async getBusyTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._taskSystem.getBusyTasks();\n\t}\n\n\tpublic getRecentlyUsedTasksV1(): LRUCache<string, string> {\n\t\tif (this._recentlyUsedTasksV1) {\n\t\t\treturn this._recentlyUsedTasksV1;\n\t\t}\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\tthis._recentlyUsedTasksV1 = new LRUCache<string, string>(quickOpenHistoryLimit);\n\n\t\tconst storageValue = this._storageService.get(AbstractTaskService.RecentlyUsedTasks_Key, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: string[] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasksV1.set(value, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasksV1;\n\t}\n\n\tprivate applyFilterToTaskMap(filter: ITaskFilter | undefined, map: TaskMap): Task[] {\n\t\tif (!filter || !filter.type) {\n\t\t\treturn map.all();\n\t\t}\n\t\tconst result: Task[] = [];\n\t\tmap.forEach((tasks) => {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tif (ContributedTask.is(task) && ((task.defines.type === filter.type) || (task._source.label === filter.type))) {\n\t\t\t\t\tresult.push(task);\n\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst customizes = task.customizes();\n\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate _getTasksFromStorage(type: 'persistent' | 'historical'): LRUCache<string, string> {\n\t\treturn type === 'persistent' ? this._getPersistentTasks() : this._getRecentTasks();\n\t}\n\n\tprivate _getRecentTasks(): LRUCache<string, string> {\n\t\tif (this._recentlyUsedTasks) {\n\t\t\treturn this._recentlyUsedTasks;\n\t\t}\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\tthis._recentlyUsedTasks = new LRUCache<string, string>(quickOpenHistoryLimit);\n\n\t\tconst storageValue = this._storageService.get(AbstractTaskService.RecentlyUsedTasks_KeyV2, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: [string, string][] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasks.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasks;\n\t}\n\n\tprivate _getPersistentTasks(): LRUCache<string, string> {\n\t\tif (this._persistentTasks) {\n\t\t\tthis._log(nls.localize('taskService.gettingCachedTasks', 'Returning cached tasks {0}', this._persistentTasks.size), true);\n\t\t\treturn this._persistentTasks;\n\t\t}\n\t\t//TODO: should this # be configurable?\n\t\tthis._persistentTasks = new LRUCache<string, string>(10);\n\t\tconst storageValue = this._storageService.get(AbstractTaskService.PersistentTasks_Key, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: [string, string][] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._persistentTasks.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._persistentTasks;\n\t}\n\n\tprivate _getFolderFromTaskKey(key: string): { folder: string | undefined; isWorkspaceFile: boolean | undefined } {\n\t\tconst keyValue: { folder: string | undefined; id: string | undefined } = JSON.parse(key);\n\t\treturn {\n\t\t\tfolder: keyValue.folder, isWorkspaceFile: keyValue.id?.endsWith(TaskSourceKind.WorkspaceFile)\n\t\t};\n\t}\n\n\tpublic async getSavedTasks(type: 'persistent' | 'historical'): Promise<(Task | ConfiguringTask)[]> {\n\t\tconst folderMap: IStringDictionary<IWorkspaceFolder> = Object.create(null);\n\t\tthis.workspaceFolders.forEach(folder => {\n\t\t\tfolderMap[folder.uri.toString()] = folder;\n\t\t});\n\t\tconst folderToTasksMap: Map<string, any> = new Map();\n\t\tconst workspaceToTaskMap: Map<string, any> = new Map();\n\t\tconst storedTasks = this._getTasksFromStorage(type);\n\t\tconst tasks: (Task | ConfiguringTask)[] = [];\n\t\tthis._log(nls.localize('taskService.getSavedTasks', 'Fetching tasks from task storage.'), true);\n\t\tfunction addTaskToMap(map: Map<string, any>, folder: string | undefined, task: any) {\n\t\t\tif (folder && !map.has(folder)) {\n\t\t\t\tmap.set(folder, []);\n\t\t\t}\n\t\t\tif (folder && (folderMap[folder] || (folder === USER_TASKS_GROUP_KEY)) && task) {\n\t\t\t\tmap.get(folder).push(task);\n\t\t\t}\n\t\t}\n\t\tfor (const entry of storedTasks.entries()) {\n\t\t\ttry {\n\t\t\t\tconst key = entry[0];\n\t\t\t\tconst task = JSON.parse(entry[1]);\n\t\t\t\tconst folderInfo = this._getFolderFromTaskKey(key);\n\t\t\t\tthis._log(nls.localize('taskService.getSavedTasks.reading', 'Reading tasks from task storage, {0}, {1}, {2}', key, task, folderInfo.folder), true);\n\t\t\t\taddTaskToMap(folderInfo.isWorkspaceFile ? workspaceToTaskMap : folderToTasksMap, folderInfo.folder, task);\n\t\t\t} catch (error) {\n\t\t\t\tthis._log(nls.localize('taskService.getSavedTasks.error', 'Fetching a task from task storage failed: {0}.', error), true);\n\t\t\t}\n\t\t}\n\n\t\tconst readTasksMap: Map<string, (Task | ConfiguringTask)> = new Map();\n\n\t\tasync function readTasks(that: AbstractTaskService, map: Map<string, any>, isWorkspaceFile: boolean) {\n\t\t\tfor (const key of map.keys()) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> = Object.create(null);\n\t\t\t\tconst taskConfigSource = (folderMap[key]\n\t\t\t\t\t? (isWorkspaceFile\n\t\t\t\t\t\t? TaskConfig.TaskConfigSource.WorkspaceFile : TaskConfig.TaskConfigSource.TasksJson)\n\t\t\t\t\t: TaskConfig.TaskConfigSource.User);\n\t\t\t\tawait that._computeTasksForSingleConfig(folderMap[key] ?? await that._getAFolder(), {\n\t\t\t\t\tversion: '2.0.0',\n\t\t\t\t\ttasks: map.get(key)\n\t\t\t\t}, TaskRunSource.System, custom, customized, taskConfigSource, true);\n\t\t\t\tcustom.forEach(task => {\n\t\t\t\t\tconst taskKey = task.getKey();\n\t\t\t\t\tif (taskKey) {\n\t\t\t\t\t\treadTasksMap.set(taskKey, task);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tconst taskKey = customized[configuration].getKey();\n\t\t\t\t\tif (taskKey) {\n\t\t\t\t\t\treadTasksMap.set(taskKey, customized[configuration]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait readTasks(this, folderToTasksMap, false);\n\t\tawait readTasks(this, workspaceToTaskMap, true);\n\t\tfor (const key of storedTasks.keys()) {\n\t\t\tif (readTasksMap.has(key)) {\n\t\t\t\ttasks.push(readTasksMap.get(key)!);\n\t\t\t\tthis._log(nls.localize('taskService.getSavedTasks.resolved', 'Resolved task {0}', key), true);\n\t\t\t} else {\n\t\t\t\tthis._log(nls.localize('taskService.getSavedTasks.unresolved', 'Unable to resolve task {0} ', key), true);\n\t\t\t}\n\t\t}\n\t\treturn tasks;\n\t}\n\n\tpublic removeRecentlyUsedTask(taskRecentlyUsedKey: string) {\n\t\tif (this._getTasksFromStorage('historical').has(taskRecentlyUsedKey)) {\n\t\t\tthis._getTasksFromStorage('historical').delete(taskRecentlyUsedKey);\n\t\t\tthis._saveRecentlyUsedTasks();\n\t\t}\n\t}\n\n\tpublic removePersistentTask(key: string) {\n\t\tthis._log(nls.localize('taskService.removePersistentTask', 'Removing persistent task {0}', key), true);\n\t\tif (this._getTasksFromStorage('persistent').has(key)) {\n\t\t\tthis._getTasksFromStorage('persistent').delete(key);\n\t\t\tthis._savePersistentTasks();\n\t\t}\n\t}\n\n\tprivate _setTaskLRUCacheLimit() {\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\tif (this._recentlyUsedTasks) {\n\t\t\tthis._recentlyUsedTasks.limit = quickOpenHistoryLimit;\n\t\t}\n\t}\n\n\tprivate async _setRecentlyUsedTask(task: Task): Promise<void> {\n\t\tlet key = task.getKey();\n\t\tif (!InMemoryTask.is(task) && key) {\n\t\t\tconst customizations = this._createCustomizableTask(task);\n\t\t\tif (ContributedTask.is(task) && customizations) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> = Object.create(null);\n\t\t\t\tawait this._computeTasksForSingleConfig(task._source.workspaceFolder ?? this.workspaceFolders[0], {\n\t\t\t\t\tversion: '2.0.0',\n\t\t\t\t\ttasks: [customizations]\n\t\t\t\t}, TaskRunSource.System, custom, customized, TaskConfig.TaskConfigSource.TasksJson, true);\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tkey = customized[configuration].getKey()!;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._getTasksFromStorage('historical').set(key, JSON.stringify(customizations));\n\t\t\tthis._saveRecentlyUsedTasks();\n\t\t}\n\t}\n\n\tprivate _saveRecentlyUsedTasks(): void {\n\t\tif (!this._recentlyUsedTasks) {\n\t\t\treturn;\n\t\t}\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\t// setting history limit to 0 means no LRU sorting\n\t\tif (quickOpenHistoryLimit === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet keys = [...this._recentlyUsedTasks.keys()];\n\t\tif (keys.length > quickOpenHistoryLimit) {\n\t\t\tkeys = keys.slice(0, quickOpenHistoryLimit);\n\t\t}\n\t\tconst keyValues: [string, string][] = [];\n\t\tfor (const key of keys) {\n\t\t\tkeyValues.push([key, this._recentlyUsedTasks.get(key, Touch.None)!]);\n\t\t}\n\t\tthis._storageService.store(AbstractTaskService.RecentlyUsedTasks_KeyV2, JSON.stringify(keyValues), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate async _setPersistentTask(task: Task): Promise<void> {\n\t\tif (!this._configurationService.getValue(TaskSettingId.Reconnection)) {\n\t\t\treturn;\n\t\t}\n\t\tlet key = task.getKey();\n\t\tif (!InMemoryTask.is(task) && key) {\n\t\t\tconst customizations = this._createCustomizableTask(task);\n\t\t\tif (ContributedTask.is(task) && customizations) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> = Object.create(null);\n\t\t\t\tawait this._computeTasksForSingleConfig(task._source.workspaceFolder ?? this.workspaceFolders[0], {\n\t\t\t\t\tversion: '2.0.0',\n\t\t\t\t\ttasks: [customizations]\n\t\t\t\t}, TaskRunSource.System, custom, customized, TaskConfig.TaskConfigSource.TasksJson, true);\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tkey = customized[configuration].getKey()!;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!task.configurationProperties.isBackground) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._log(nls.localize('taskService.setPersistentTask', 'Setting persistent task {0}', key), true);\n\t\t\tthis._getTasksFromStorage('persistent').set(key, JSON.stringify(customizations));\n\t\t\tthis._savePersistentTasks();\n\t\t}\n\t}\n\n\tprivate _savePersistentTasks(): void {\n\t\tthis._persistentTasks = this._getTasksFromStorage('persistent');\n\t\tconst keys = [...this._persistentTasks.keys()];\n\t\tconst keyValues: [string, string][] = [];\n\t\tfor (const key of keys) {\n\t\t\tkeyValues.push([key, this._persistentTasks.get(key, Touch.None)!]);\n\t\t}\n\t\tthis._log(nls.localize('savePersistentTask', 'Saving persistent tasks: {0}', keys.join(', ')), true);\n\t\tthis._storageService.store(AbstractTaskService.PersistentTasks_Key, JSON.stringify(keyValues), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate _openDocumentation(): void {\n\t\tthis._openerService.open(URI.parse('https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher'));\n\t}\n\n\tprivate async _findSingleWorkspaceTaskOfGroup(group: TaskGroup): Promise<ITaskSummary | undefined> {\n\t\tconst tasksOfGroup = await this._findWorkspaceTasksInGroup(group, true);\n\t\tif ((tasksOfGroup.length === 1) && (typeof tasksOfGroup[0].configurationProperties.group !== 'string') && tasksOfGroup[0].configurationProperties.group?.isDefault) {\n\t\t\tlet resolvedTask: Task | undefined;\n\t\t\tif (ConfiguringTask.is(tasksOfGroup[0])) {\n\t\t\t\tresolvedTask = await this.tryResolveTask(tasksOfGroup[0]);\n\t\t\t} else {\n\t\t\t\tresolvedTask = tasksOfGroup[0];\n\t\t\t}\n\t\t\tif (resolvedTask) {\n\t\t\t\treturn this.run(resolvedTask, undefined, TaskRunSource.User);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _build(): Promise<ITaskSummary> {\n\t\tconst tryBuildShortcut = await this._findSingleWorkspaceTaskOfGroup(TaskGroup.Build);\n\t\tif (tryBuildShortcut) {\n\t\t\treturn tryBuildShortcut;\n\t\t}\n\t\treturn this._getGroupedTasksAndExecute();\n\t}\n\n\tprivate async _runTest(): Promise<ITaskSummary> {\n\t\tconst tryTestShortcut = await this._findSingleWorkspaceTaskOfGroup(TaskGroup.Test);\n\t\tif (tryTestShortcut) {\n\t\t\treturn tryTestShortcut;\n\t\t}\n\n\t\treturn this._getGroupedTasksAndExecute(true);\n\t}\n\n\tprivate async _getGroupedTasksAndExecute(test?: boolean): Promise<ITaskSummary> {\n\t\tconst tasks = await this._getGroupedTasks();\n\t\tconst runnable = this._createRunnableTask(tasks, test ? TaskGroup.Test : TaskGroup.Build);\n\t\tif (!runnable || !runnable.task) {\n\t\t\tif (test) {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noTestTask1', 'No test task defined. Mark a task with \\'isTestCommand\\' in the tasks.json file.'), TaskErrors.NoTestTask);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noTestTask2', 'No test task defined. Mark a task with as a \\'test\\' group in the tasks.json file.'), TaskErrors.NoTestTask);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask1', 'No build task defined. Mark a task with \\'isBuildCommand\\' in the tasks.json file.'), TaskErrors.NoBuildTask);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask2', 'No build task defined. Mark a task with as a \\'build\\' group in the tasks.json file.'), TaskErrors.NoBuildTask);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet executeTaskResult: ITaskSummary;\n\t\ttry {\n\t\t\texecuteTaskResult = await this._executeTask(runnable.task, runnable.resolver, TaskRunSource.User);\n\t\t} catch (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\treturn executeTaskResult;\n\t}\n\n\tpublic async run(task: Task | undefined, options?: IProblemMatcherRunOptions, runSource: TaskRunSource = TaskRunSource.System): Promise<ITaskSummary | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tif (!task) {\n\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskServer.noTask', 'Task to execute is undefined'), TaskErrors.TaskNotFound);\n\t\t}\n\t\tconst resolver = this._createResolver();\n\t\tlet executeTaskResult: ITaskSummary | undefined;\n\t\ttry {\n\t\t\tif (options && options.attachProblemMatcher && this._shouldAttachProblemMatcher(task) && !InMemoryTask.is(task)) {\n\t\t\t\tconst taskToExecute = await this._attachProblemMatcher(task);\n\t\t\t\tif (taskToExecute) {\n\t\t\t\t\texecuteTaskResult = await this._executeTask(taskToExecute, resolver, runSource);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texecuteTaskResult = await this._executeTask(task, resolver, runSource);\n\t\t\t}\n\t\t\treturn executeTaskResult;\n\t\t} catch (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\tprivate _isProvideTasksEnabled(): boolean {\n\t\tconst settingValue = this._configurationService.getValue(TaskSettingId.AutoDetect);\n\t\treturn settingValue === 'on';\n\t}\n\n\tprivate _isProblemMatcherPromptEnabled(type?: string): boolean {\n\t\tconst settingValue = this._configurationService.getValue(PROBLEM_MATCHER_NEVER_CONFIG);\n\t\tif (Types.isBoolean(settingValue)) {\n\t\t\treturn !settingValue;\n\t\t}\n\t\tif (type === undefined) {\n\t\t\treturn true;\n\t\t}\n\t\tconst settingValueMap: IStringDictionary<boolean> = settingValue as any;\n\t\treturn !settingValueMap[type];\n\t}\n\n\tprivate _getTypeForTask(task: Task): string {\n\t\tlet type: string;\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties = task._source.config.element;\n\t\t\ttype = (<any>configProperties).type;\n\t\t} else {\n\t\t\ttype = task.getDefinition()!.type;\n\t\t}\n\t\treturn type;\n\t}\n\n\tprivate _shouldAttachProblemMatcher(task: Task): boolean {\n\t\tconst enabled = this._isProblemMatcherPromptEnabled(this._getTypeForTask(task));\n\t\tif (enabled === false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._canCustomize(task)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (task.configurationProperties.group !== undefined && task.configurationProperties.group !== TaskGroup.Build) {\n\t\t\treturn false;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers !== undefined && task.configurationProperties.problemMatchers.length > 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !task.hasDefinedMatchers && !!task.configurationProperties.problemMatchers && (task.configurationProperties.problemMatchers.length === 0);\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties = task._source.config.element;\n\t\t\treturn configProperties.problemMatcher === undefined && !task.hasDefinedMatchers;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _updateNeverProblemMatcherSetting(type: string): Promise<void> {\n\t\tconst current = this._configurationService.getValue(PROBLEM_MATCHER_NEVER_CONFIG);\n\t\tif (current === true) {\n\t\t\treturn;\n\t\t}\n\t\tlet newValue: IStringDictionary<boolean>;\n\t\tif (current !== false) {\n\t\t\tnewValue = <any>current;\n\t\t} else {\n\t\t\tnewValue = Object.create(null);\n\t\t}\n\t\tnewValue[type] = true;\n\t\treturn this._configurationService.updateValue(PROBLEM_MATCHER_NEVER_CONFIG, newValue);\n\t}\n\n\tprivate async _attachProblemMatcher(task: ContributedTask | CustomTask): Promise<Task | undefined> {\n\t\tinterface IProblemMatcherPickEntry extends IQuickPickItem {\n\t\t\tmatcher: INamedProblemMatcher | undefined;\n\t\t\tnever?: boolean;\n\t\t\tlearnMore?: boolean;\n\t\t\tsetting?: string;\n\t\t}\n\t\tlet entries: QuickPickInput<IProblemMatcherPickEntry>[] = [];\n\t\tfor (const key of ProblemMatcherRegistry.keys()) {\n\t\t\tconst matcher = ProblemMatcherRegistry.get(key);\n\t\t\tif (matcher.deprecated) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (matcher.name === matcher.label) {\n\t\t\t\tentries.push({ label: matcher.name, matcher: matcher });\n\t\t\t} else {\n\t\t\t\tentries.push({\n\t\t\t\t\tlabel: matcher.label,\n\t\t\t\t\tdescription: `$${matcher.name}`,\n\t\t\t\t\tmatcher: matcher\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (entries.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tentries = entries.sort((a, b) => {\n\t\t\tif (a.label && b.label) {\n\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\tentries.unshift({ type: 'separator', label: nls.localize('TaskService.associate', 'associate') });\n\t\tlet taskType: string;\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties = task._source.config.element;\n\t\t\ttaskType = (<any>configProperties).type;\n\t\t} else {\n\t\t\ttaskType = task.getDefinition().type;\n\t\t}\n\t\tentries.unshift(\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.continueWithout', 'Continue without scanning the task output'), matcher: undefined },\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.never', 'Never scan the task output for this task'), matcher: undefined, never: true },\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.neverType', 'Never scan the task output for {0} tasks', taskType), matcher: undefined, setting: taskType },\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.learnMoreAbout', 'Learn more about scanning the task output'), matcher: undefined, learnMore: true }\n\t\t);\n\t\tconst problemMatcher = await this._quickInputService.pick(entries, { placeHolder: nls.localize('selectProblemMatcher', 'Select for which kind of errors and warnings to scan the task output') });\n\t\tif (!problemMatcher) {\n\t\t\treturn task;\n\t\t}\n\t\tif (problemMatcher.learnMore) {\n\t\t\tthis._openDocumentation();\n\t\t\treturn undefined;\n\t\t}\n\t\tif (problemMatcher.never) {\n\t\t\tthis.customize(task, { problemMatcher: [] }, true);\n\t\t\treturn task;\n\t\t}\n\t\tif (problemMatcher.matcher) {\n\t\t\tconst newTask = task.clone();\n\t\t\tconst matcherReference = `$${problemMatcher.matcher.name}`;\n\t\t\tconst properties: ICustomizationProperties = { problemMatcher: [matcherReference] };\n\t\t\tnewTask.configurationProperties.problemMatchers = [matcherReference];\n\t\t\tconst matcher = ProblemMatcherRegistry.get(problemMatcher.matcher.name);\n\t\t\tif (matcher && matcher.watching !== undefined) {\n\t\t\t\tproperties.isBackground = true;\n\t\t\t\tnewTask.configurationProperties.isBackground = true;\n\t\t\t}\n\t\t\tthis.customize(task, properties, true);\n\t\t\treturn newTask;\n\t\t}\n\t\tif (problemMatcher.setting) {\n\t\t\tawait this._updateNeverProblemMatcherSetting(problemMatcher.setting);\n\t\t}\n\t\treturn task;\n\t}\n\n\tprivate async _getTasksForGroup(group: TaskGroup, waitToActivate?: boolean): Promise<Task[]> {\n\t\tconst groups = await this._getGroupedTasks(undefined, waitToActivate);\n\t\tconst result: Task[] = [];\n\t\tgroups.forEach(tasks => {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst configTaskGroup = TaskGroup.from(task.configurationProperties.group);\n\t\t\t\tif (configTaskGroup?._id === group._id) {\n\t\t\t\t\tresult.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic needsFolderQualification(): boolean {\n\t\treturn this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t}\n\n\tprivate _canCustomize(task: Task): boolean {\n\t\tif (this.schemaVersion !== JsonSchemaVersion.V2_0_0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !!task.getWorkspaceFolder();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _formatTaskForJson(resource: URI, task: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask): Promise<string> {\n\t\tlet reference: IReference<IResolvedTextEditorModel> | undefined;\n\t\tlet stringValue: string = '';\n\t\ttry {\n\t\t\treference = await this._textModelResolverService.createModelReference(resource);\n\t\t\tconst model = reference.object.textEditorModel;\n\t\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\t\tconst eol = model.getEOL();\n\t\t\tlet stringified = toFormattedString(task, { eol, tabSize, insertSpaces });\n\t\t\tconst regex = new RegExp(eol + (insertSpaces ? ' '.repeat(tabSize) : '\\\\t'), 'g');\n\t\t\tstringified = stringified.replace(regex, eol + (insertSpaces ? ' '.repeat(tabSize * 3) : '\\t\\t\\t'));\n\t\t\tconst twoTabs = insertSpaces ? ' '.repeat(tabSize * 2) : '\\t\\t';\n\t\t\tstringValue = twoTabs + stringified.slice(0, stringified.length - 1) + twoTabs + stringified.slice(stringified.length - 1);\n\t\t} finally {\n\t\t\treference?.dispose();\n\t\t}\n\t\treturn stringValue;\n\t}\n\n\tprivate async _openEditorAtTask(resource: URI | undefined, task: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | string | undefined, configIndex: number = -1): Promise<boolean> {\n\t\tif (resource === undefined) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\tconst fileContent = await this._fileService.readFile(resource);\n\t\tconst content = fileContent.value;\n\t\tif (!content || !task) {\n\t\t\treturn false;\n\t\t}\n\t\tconst contentValue = content.toString();\n\t\tlet stringValue: string | undefined;\n\t\tif (configIndex !== -1) {\n\t\t\tconst json: TaskConfig.IExternalTaskRunnerConfiguration = this._configurationService.getValue<TaskConfig.IExternalTaskRunnerConfiguration>('tasks', { resource });\n\t\t\tif (json.tasks && (json.tasks.length > configIndex)) {\n\t\t\t\tstringValue = await this._formatTaskForJson(resource, json.tasks[configIndex]);\n\t\t\t}\n\t\t}\n\t\tif (!stringValue) {\n\t\t\tif (typeof task === 'string') {\n\t\t\t\tstringValue = task;\n\t\t\t} else {\n\t\t\t\tstringValue = await this._formatTaskForJson(resource, task);\n\t\t\t}\n\t\t}\n\n\t\tconst index = contentValue.indexOf(stringValue);\n\t\tlet startLineNumber = 1;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (contentValue.charAt(i) === '\\n') {\n\t\t\t\tstartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tlet endLineNumber = startLineNumber;\n\t\tfor (let i = 0; i < stringValue.length; i++) {\n\t\t\tif (stringValue.charAt(i) === '\\n') {\n\t\t\t\tendLineNumber++;\n\t\t\t}\n\t\t}\n\t\tconst selection = startLineNumber > 1 ? { startLineNumber, startColumn: startLineNumber === endLineNumber ? 4 : 3, endLineNumber, endColumn: startLineNumber === endLineNumber ? undefined : 4 } : undefined;\n\n\t\tawait this._editorService.openEditor({\n\t\t\tresource,\n\t\t\toptions: {\n\t\t\t\tpinned: false,\n\t\t\t\tforceReload: true, // because content might have changed\n\t\t\t\tselection,\n\t\t\t\tselectionRevealType: TextEditorSelectionRevealType.CenterIfOutsideViewport\n\t\t\t}\n\t\t});\n\t\treturn !!selection;\n\t}\n\n\tprivate _createCustomizableTask(task: ContributedTask | CustomTask | ConfiguringTask): TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined {\n\t\tlet toCustomize: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined;\n\t\tconst taskConfig = CustomTask.is(task) || ConfiguringTask.is(task) ? task._source.config : undefined;\n\t\tif (taskConfig && taskConfig.element) {\n\t\t\ttoCustomize = { ...(taskConfig.element) };\n\t\t} else if (ContributedTask.is(task)) {\n\t\t\ttoCustomize = {\n\t\t\t};\n\t\t\tconst identifier: TaskConfig.ITaskIdentifier = Object.assign(Object.create(null), task.defines);\n\t\t\tdelete identifier['_key'];\n\t\t\tObject.keys(identifier).forEach(key => (<any>toCustomize)![key] = identifier[key]);\n\t\t\tif (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length > 0 && Types.isStringArray(task.configurationProperties.problemMatchers)) {\n\t\t\t\ttoCustomize.problemMatcher = task.configurationProperties.problemMatchers;\n\t\t\t}\n\t\t\tif (task.configurationProperties.group) {\n\t\t\t\ttoCustomize.group = TaskConfig.GroupKind.to(task.configurationProperties.group);\n\t\t\t}\n\t\t}\n\t\tif (!toCustomize) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (toCustomize.problemMatcher === undefined && task.configurationProperties.problemMatchers === undefined || (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length === 0)) {\n\t\t\ttoCustomize.problemMatcher = [];\n\t\t}\n\t\tif (task._source.label !== 'Workspace') {\n\t\t\ttoCustomize.label = task.configurationProperties.identifier;\n\t\t} else {\n\t\t\ttoCustomize.label = task._label;\n\t\t}\n\t\ttoCustomize.detail = task.configurationProperties.detail;\n\t\treturn toCustomize;\n\t}\n\n\tpublic async customize(task: ContributedTask | CustomTask | ConfiguringTask, properties?: ICustomizationProperties, openConfig?: boolean): Promise<void> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\tif (!workspaceFolder) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst configuration = this._getConfiguration(workspaceFolder, task._source.kind);\n\t\tif (configuration.hasParseErrors) {\n\t\t\tthis._notificationService.warn(nls.localize('customizeParseErrors', 'The current task configuration has errors. Please fix the errors first before customizing a task.'));\n\t\t\treturn Promise.resolve<void>(undefined);\n\t\t}\n\n\t\tconst fileConfig = configuration.config;\n\t\tconst toCustomize = this._createCustomizableTask(task);\n\t\tif (!toCustomize) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst index: number | undefined = CustomTask.is(task) ? task._source.config.index : undefined;\n\t\tif (properties) {\n\t\t\tfor (const property of Object.getOwnPropertyNames(properties)) {\n\t\t\t\tconst value = (<any>properties)[property];\n\t\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\t\t(<any>toCustomize)[property] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!fileConfig) {\n\t\t\tconst value = {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\ttasks: [toCustomize]\n\t\t\t};\n\t\t\tlet content = [\n\t\t\t\t'{',\n\t\t\t\tnls.localize('tasksJsonComment', '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \\n\\t// for the documentation about the tasks.json format'),\n\t\t\t].join('\\n') + JSON.stringify(value, null, '\\t').substr(1);\n\t\t\tconst editorConfig = this._configurationService.getValue<any>();\n\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\tcontent = content.replace(/(\\n)(\\t+)/g, (_, s1, s2) => s1 + ' '.repeat(s2.length * editorConfig.editor.tabSize));\n\t\t\t}\n\t\t\tawait this._textFileService.create([{ resource: workspaceFolder.toResource('.vscode/tasks.json'), value: content }]);\n\t\t} else {\n\t\t\t// We have a global task configuration\n\t\t\tif ((index === -1) && properties) {\n\t\t\t\tif (properties.problemMatcher !== undefined) {\n\t\t\t\t\tfileConfig.problemMatcher = properties.problemMatcher;\n\t\t\t\t\tawait this._writeConfiguration(workspaceFolder, 'tasks.problemMatchers', fileConfig.problemMatcher, task._source.kind);\n\t\t\t\t} else if (properties.group !== undefined) {\n\t\t\t\t\tfileConfig.group = properties.group;\n\t\t\t\t\tawait this._writeConfiguration(workspaceFolder, 'tasks.group', fileConfig.group, task._source.kind);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!Array.isArray(fileConfig.tasks)) {\n\t\t\t\t\tfileConfig.tasks = [];\n\t\t\t\t}\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\tfileConfig.tasks.push(toCustomize);\n\t\t\t\t} else {\n\t\t\t\t\tfileConfig.tasks[index] = toCustomize;\n\t\t\t\t}\n\t\t\t\tawait this._writeConfiguration(workspaceFolder, 'tasks.tasks', fileConfig.tasks, task._source.kind);\n\t\t\t}\n\t\t}\n\n\t\tif (openConfig) {\n\t\t\tthis._openEditorAtTask(this._getResourceForTask(task), toCustomize);\n\t\t}\n\t}\n\n\tprivate _writeConfiguration(workspaceFolder: IWorkspaceFolder, key: string, value: any, source?: string): Promise<void> | undefined {\n\t\tlet target: ConfigurationTarget | undefined = undefined;\n\t\tswitch (source) {\n\t\t\tcase TaskSourceKind.User: target = ConfigurationTarget.USER; break;\n\t\t\tcase TaskSourceKind.WorkspaceFile: target = ConfigurationTarget.WORKSPACE; break;\n\t\t\tdefault: if (this._contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t} else if (this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\t\ttarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\tif (target) {\n\t\t\treturn this._configurationService.updateValue(key, value, { resource: workspaceFolder.uri }, target);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _getResourceForKind(kind: string): URI | undefined {\n\t\tthis._updateSetup();\n\t\tswitch (kind) {\n\t\t\tcase TaskSourceKind.User: {\n\t\t\t\treturn resources.joinPath(resources.dirname(this._preferencesService.userSettingsResource), 'tasks.json');\n\t\t\t}\n\t\t\tcase TaskSourceKind.WorkspaceFile: {\n\t\t\t\tif (this._workspace && this._workspace.configuration) {\n\t\t\t\t\treturn this._workspace.configuration;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getResourceForTask(task: CustomTask | ConfiguringTask | ContributedTask): URI {\n\t\tif (CustomTask.is(task)) {\n\t\t\tlet uri = this._getResourceForKind(task._source.kind);\n\t\t\tif (!uri) {\n\t\t\t\tconst taskFolder = task.getWorkspaceFolder();\n\t\t\t\tif (taskFolder) {\n\t\t\t\t\turi = taskFolder.toResource(task._source.config.file);\n\t\t\t\t} else {\n\t\t\t\t\turi = this.workspaceFolders[0].uri;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uri;\n\t\t} else {\n\t\t\treturn task.getWorkspaceFolder()!.toResource('.vscode/tasks.json');\n\t\t}\n\t}\n\n\tpublic async openConfig(task: CustomTask | ConfiguringTask | undefined): Promise<boolean> {\n\t\tlet resource: URI | undefined;\n\t\tif (task) {\n\t\t\tresource = this._getResourceForTask(task);\n\t\t} else {\n\t\t\tresource = (this._workspaceFolders && (this._workspaceFolders.length > 0)) ? this._workspaceFolders[0].toResource('.vscode/tasks.json') : undefined;\n\t\t}\n\t\treturn this._openEditorAtTask(resource, task ? task._label : undefined, task ? task._source.config.index : -1);\n\t}\n\n\tprivate _createRunnableTask(tasks: TaskMap, group: TaskGroup): { task: Task; resolver: ITaskResolver } | undefined {\n\t\tinterface IResolverData {\n\t\t\tid: Map<string, Task>;\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t}\n\n\t\tconst resolverData: Map<string, IResolverData> = new Map();\n\t\tconst workspaceTasks: Task[] = [];\n\t\tconst extensionTasks: Task[] = [];\n\t\ttasks.forEach((tasks, folder) => {\n\t\t\tlet data = resolverData.get(folder);\n\t\t\tif (!data) {\n\t\t\t\tdata = {\n\t\t\t\t\tid: new Map<string, Task>(),\n\t\t\t\t\tlabel: new Map<string, Task>(),\n\t\t\t\t\tidentifier: new Map<string, Task>()\n\t\t\t\t};\n\t\t\t\tresolverData.set(folder, data);\n\t\t\t}\n\t\t\tfor (const task of tasks) {\n\t\t\t\tdata.id.set(task._id, task);\n\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\tdata.identifier.set(task.configurationProperties.identifier, task);\n\t\t\t\t}\n\t\t\t\tif (group && task.configurationProperties.group === group) {\n\t\t\t\t\tif (task._source.kind === TaskSourceKind.Workspace) {\n\t\t\t\t\t\tworkspaceTasks.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensionTasks.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst resolver: ITaskResolver = {\n\t\t\tresolve: async (uri: URI | string, alias: string) => {\n\t\t\t\tconst data = resolverData.get(typeof uri === 'string' ? uri : uri.toString());\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn data.id.get(alias) || data.label.get(alias) || data.identifier.get(alias);\n\t\t\t}\n\t\t};\n\t\tif (workspaceTasks.length > 0) {\n\t\t\tif (workspaceTasks.length > 1) {\n\t\t\t\tthis._log(nls.localize('moreThanOneBuildTask', 'There are many build tasks defined in the tasks.json. Executing the first one.'));\n\t\t\t}\n\t\t\treturn { task: workspaceTasks[0], resolver };\n\t\t}\n\t\tif (extensionTasks.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We can only have extension tasks if we are in version 2.0.0. Then we can even run\n\t\t// multiple build tasks.\n\t\tif (extensionTasks.length === 1) {\n\t\t\treturn { task: extensionTasks[0], resolver };\n\t\t} else {\n\t\t\tconst id: string = UUID.generateUuid();\n\t\t\tconst task: InMemoryTask = new InMemoryTask(\n\t\t\t\tid,\n\t\t\t\t{ kind: TaskSourceKind.InMemory, label: 'inMemory' },\n\t\t\t\tid,\n\t\t\t\t'inMemory',\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tidentifier: id,\n\t\t\t\t\tdependsOn: extensionTasks.map((extensionTask) => { return { uri: extensionTask.getWorkspaceFolder()!.uri, task: extensionTask._id }; }),\n\t\t\t\t\tname: id\n\t\t\t\t}\n\t\t\t);\n\t\t\treturn { task, resolver };\n\t\t}\n\t}\n\n\tprivate _createResolver(grouped?: TaskMap): ITaskResolver {\n\t\tinterface ResolverData {\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t\ttaskIdentifier: Map<string, Task>;\n\t\t}\n\n\t\tlet resolverData: Map<string, ResolverData> | undefined;\n\n\t\tasync function quickResolve(that: AbstractTaskService, uri: URI | string, identifier: string | ITaskIdentifier) {\n\t\t\tconst foundTasks = await that._findWorkspaceTasks((task: Task | ConfiguringTask): boolean => {\n\t\t\t\tconst taskUri = ((ConfiguringTask.is(task) || CustomTask.is(task)) ? task._source.config.workspaceFolder?.uri : undefined);\n\t\t\t\tconst originalUri = (typeof uri === 'string' ? uri : uri.toString());\n\t\t\t\tif (taskUri?.toString() !== originalUri) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(identifier)) {\n\t\t\t\t\treturn ((task._label === identifier) || (task.configurationProperties.identifier === identifier));\n\t\t\t\t} else {\n\t\t\t\t\tconst keyedIdentifier = task.getDefinition(true);\n\t\t\t\t\tconst searchIdentifier = TaskDefinition.createTaskIdentifier(identifier, console);\n\t\t\t\t\treturn (searchIdentifier && keyedIdentifier) ? (searchIdentifier._key === keyedIdentifier._key) : false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (foundTasks.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst task = foundTasks[0];\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\treturn that.tryResolveTask(task);\n\t\t\t}\n\t\t\treturn task;\n\t\t}\n\n\t\tasync function getResolverData(that: AbstractTaskService) {\n\t\t\tif (resolverData === undefined) {\n\t\t\t\tresolverData = new Map();\n\t\t\t\t(grouped || await that._getGroupedTasks()).forEach((tasks, folder) => {\n\t\t\t\t\tlet data = resolverData!.get(folder);\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\tdata = { label: new Map<string, Task>(), identifier: new Map<string, Task>(), taskIdentifier: new Map<string, Task>() };\n\t\t\t\t\t\tresolverData!.set(folder, data);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\t\t\tdata.identifier.set(task.configurationProperties.identifier, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst keyedIdentifier = task.getDefinition(true);\n\t\t\t\t\t\tif (keyedIdentifier !== undefined) {\n\t\t\t\t\t\t\tdata.taskIdentifier.set(keyedIdentifier._key, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn resolverData;\n\t\t}\n\n\t\tasync function fullResolve(that: AbstractTaskService, uri: URI | string, identifier: string | ITaskIdentifier) {\n\t\t\tconst allResolverData = await getResolverData(that);\n\t\t\tconst data = allResolverData.get(typeof uri === 'string' ? uri : uri.toString());\n\t\t\tif (!data) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Types.isString(identifier)) {\n\t\t\t\treturn data.label.get(identifier) || data.identifier.get(identifier);\n\t\t\t} else {\n\t\t\t\tconst key = TaskDefinition.createTaskIdentifier(identifier, console);\n\t\t\t\treturn key !== undefined ? data.taskIdentifier.get(key._key) : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tresolve: async (uri: URI | string, identifier: string | ITaskIdentifier | undefined) => {\n\t\t\t\tif (!identifier) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif ((resolverData === undefined) && (grouped === undefined)) {\n\t\t\t\t\treturn (await quickResolve(this, uri, identifier)) ?? fullResolve(this, uri, identifier);\n\t\t\t\t} else {\n\t\t\t\t\treturn fullResolve(this, uri, identifier);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async _saveBeforeRun(): Promise<boolean> {\n\t\tenum SaveBeforeRunConfigOptions {\n\t\t\tAlways = 'always',\n\t\t\tNever = 'never',\n\t\t\tPrompt = 'prompt'\n\t\t}\n\n\t\tconst saveBeforeRunTaskConfig: SaveBeforeRunConfigOptions = this._configurationService.getValue(TaskSettingId.SaveBeforeRun);\n\n\t\tif (saveBeforeRunTaskConfig === SaveBeforeRunConfigOptions.Never) {\n\t\t\treturn false;\n\t\t} else if (saveBeforeRunTaskConfig === SaveBeforeRunConfigOptions.Prompt && this._editorService.editors.some(e => e.isDirty())) {\n\t\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\t\tmessage: nls.localize('TaskSystem.saveBeforeRun.prompt.title', \"Save all editors?\"),\n\t\t\t\tdetail: nls.localize('detail', \"Do you want to save all editors before running the task?\"),\n\t\t\t\tprimaryButton: nls.localize({ key: 'saveBeforeRun.save', comment: ['&& denotes a mnemonic'] }, '&&Save'),\n\t\t\t\tcancelButton: nls.localize({ key: 'saveBeforeRun.dontSave', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t});\n\n\t\t\tif (!confirmed) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tawait this._editorService.saveAll({ reason: SaveReason.AUTO });\n\t\treturn true;\n\t}\n\n\tprivate async _executeTask(task: Task, resolver: ITaskResolver, runSource: TaskRunSource): Promise<ITaskSummary> {\n\t\tlet taskToRun: Task = task;\n\t\tif (await this._saveBeforeRun()) {\n\t\t\tawait this._configurationService.reloadConfiguration();\n\t\t\tawait this._updateWorkspaceTasks();\n\t\t\tconst taskFolder = task.getWorkspaceFolder();\n\t\t\tconst taskIdentifier = task.configurationProperties.identifier;\n\t\t\tconst taskType = CustomTask.is(task) ? task.customizes()?.type : (ContributedTask.is(task) ? task.type : undefined);\n\t\t\t// Since we save before running tasks, the task may have changed as part of the save.\n\t\t\t// However, if the TaskRunSource is not User, then we shouldn't try to fetch the task again\n\t\t\t// since this can cause a new'd task to get overwritten with a provided task.\n\t\t\ttaskToRun = ((taskFolder && taskIdentifier && (runSource === TaskRunSource.User))\n\t\t\t\t? await this.getTask(taskFolder, taskIdentifier, false, taskType) : task) ?? task;\n\t\t}\n\t\tawait ProblemMatcherRegistry.onReady();\n\t\tconst executeResult = runSource === TaskRunSource.Reconnect ? this._getTaskSystem().reconnect(taskToRun, resolver) : this._getTaskSystem().run(taskToRun, resolver);\n\t\tif (executeResult) {\n\t\t\treturn this._handleExecuteResult(executeResult, runSource);\n\t\t}\n\t\treturn { exitCode: 0 };\n\t}\n\n\tprivate async _handleExecuteResult(executeResult: ITaskExecuteResult, runSource?: TaskRunSource): Promise<ITaskSummary> {\n\t\tif (runSource === TaskRunSource.User) {\n\t\t\tawait this._setRecentlyUsedTask(executeResult.task);\n\t\t}\n\t\tif (executeResult.kind === TaskExecuteKind.Active) {\n\t\t\tconst active = executeResult.active;\n\t\t\tif (active && active.same && runSource === TaskRunSource.FolderOpen || runSource === TaskRunSource.Reconnect) {\n\t\t\t\t// ignore, the task is already active, likely from being reconnected or from folder open.\n\t\t\t\tthis._logService.debug('Ignoring task that is already active', executeResult.task);\n\t\t\t\treturn executeResult.promise;\n\t\t\t}\n\t\t\tif (active && active.same) {\n\t\t\t\tif (this._taskSystem?.isTaskVisible(executeResult.task)) {\n\t\t\t\t\tconst message = nls.localize('TaskSystem.activeSame.noBackground', 'The task \\'{0}\\' is already active.', executeResult.task.getQualifiedLabel());\n\t\t\t\t\tconst lastInstance = this._getTaskSystem().getLastInstance(executeResult.task) ?? executeResult.task;\n\t\t\t\t\tthis._notificationService.prompt(Severity.Warning, message,\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: nls.localize('terminateTask', \"Terminate Task\"),\n\t\t\t\t\t\t\trun: () => this.terminate(lastInstance)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize('restartTask', \"Restart Task\"),\n\t\t\t\t\t\t\trun: () => this._restart(lastInstance)\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._taskSystem?.revealTask(executeResult.task);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new TaskError(Severity.Warning, nls.localize('TaskSystem.active', 'There is already a task running. Terminate it first before executing another task.'), TaskErrors.RunningTask);\n\t\t\t}\n\t\t}\n\t\tthis._setRecentlyUsedTask(executeResult.task);\n\t\treturn executeResult.promise;\n\t}\n\n\tprivate async _restart(task: Task): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn;\n\t\t}\n\t\tconst response = await this._taskSystem.terminate(task);\n\t\tif (response.success) {\n\t\t\ttry {\n\t\t\t\tawait this.run(task);\n\t\t\t} catch {\n\t\t\t\t// eat the error, we don't care about it here\n\t\t\t}\n\t\t} else {\n\t\t\tthis._notificationService.warn(nls.localize('TaskSystem.restartFailed', 'Failed to terminate and restart task {0}', Types.isString(task) ? task : task.configurationProperties.name));\n\t\t}\n\t}\n\n\tpublic async terminate(task: Task): Promise<ITaskTerminateResponse> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn { success: true, task: undefined };\n\t\t}\n\n\t\tif (!this._taskSystem) {\n\t\t\treturn { success: true, task: undefined };\n\t\t}\n\t\treturn this._taskSystem.terminate(task);\n\t}\n\n\tprivate _terminateAll(): Promise<ITaskTerminateResponse[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse[]>([]);\n\t\t}\n\t\treturn this._taskSystem.terminateAll();\n\t}\n\n\tprotected _createTerminalTaskSystem(): ITaskSystem {\n\t\treturn new TerminalTaskSystem(\n\t\t\tthis._terminalService, this._terminalGroupService, this._outputService, this._paneCompositeService, this._viewsService, this._markerService,\n\t\t\tthis._modelService, this._configurationResolverService,\n\t\t\tthis._contextService, this._environmentService,\n\t\t\tAbstractTaskService.OutputChannelId, this._fileService, this._terminalProfileResolverService,\n\t\t\tthis._pathService, this._viewDescriptorService, this._logService, this._notificationService,\n\t\t\tthis._instantiationService,\n\t\t\t(workspaceFolder: IWorkspaceFolder | undefined) => {\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\treturn this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\t\t\t} else if (this._taskSystemInfos.size > 0) {\n\t\t\t\t\tconst infos = Array.from(this._taskSystemInfos.entries());\n\t\t\t\t\tconst notFile = infos.filter(info => info[0] !== Schemas.file);\n\t\t\t\t\tif (notFile.length > 0) {\n\t\t\t\t\t\treturn notFile[0][1][0];\n\t\t\t\t\t}\n\t\t\t\t\treturn infos[0][1][0];\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tprotected abstract _getTaskSystem(): ITaskSystem;\n\n\tprivate _isTaskProviderEnabled(type: string) {\n\t\tconst definition = TaskDefinitionRegistry.get(type);\n\t\treturn !definition || !definition.when || this._contextKeyService.contextMatchesRules(definition.when);\n\t}\n\n\tprivate async _getGroupedTasks(filter?: ITaskFilter, waitToActivate?: boolean, knownOnlyOrTrusted?: boolean): Promise<TaskMap> {\n\t\tawait this._waitForAllSupportedExecutions;\n\t\tconst type = filter?.type;\n\t\tconst needsRecentTasksMigration = this._needsRecentTasksMigration();\n\t\tif (!waitToActivate) {\n\t\t\tawait this._activateTaskProviders(filter?.type);\n\t\t}\n\t\tconst validTypes: IStringDictionary<boolean> = Object.create(null);\n\t\tTaskDefinitionRegistry.all().forEach(definition => validTypes[definition.taskType] = true);\n\t\tvalidTypes['shell'] = true;\n\t\tvalidTypes['process'] = true;\n\t\tconst contributedTaskSets = await new Promise<ITaskSet[]>(resolve => {\n\t\t\tconst result: ITaskSet[] = [];\n\t\t\tlet counter: number = 0;\n\t\t\tconst done = (value: ITaskSet | undefined) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t\tif (--counter === 0) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst error = (error: any) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (error && Types.isString(error.message)) {\n\t\t\t\t\t\tthis._log(`Error: ${error.message}\\n`);\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._log('Unknown error received while collecting tasks from providers.');\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (--counter === 0) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (this._isProvideTasksEnabled() && (this.schemaVersion === JsonSchemaVersion.V2_0_0) && (this._providers.size > 0)) {\n\t\t\t\tlet foundAnyProviders = false;\n\t\t\t\tfor (const [handle, provider] of this._providers) {\n\t\t\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\t\t\tif ((type === undefined) || (type === providerType)) {\n\t\t\t\t\t\tif (providerType && !this._isTaskProviderEnabled(providerType)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfoundAnyProviders = true;\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\traceTimeout(provider.provideTasks(validTypes).then((taskSet: ITaskSet) => {\n\t\t\t\t\t\t\t// Check that the tasks provided are of the correct type\n\t\t\t\t\t\t\tfor (const task of taskSet.tasks) {\n\t\t\t\t\t\t\t\tif (task.type !== this._providerTypes.get(handle)) {\n\t\t\t\t\t\t\t\t\tthis._log(nls.localize('unexpectedTaskType', \"The task provider for \\\"{0}\\\" tasks unexpectedly provided a task of type \\\"{1}\\\".\\n\", this._providerTypes.get(handle), task.type));\n\t\t\t\t\t\t\t\t\tif ((task.type !== 'shell') && (task.type !== 'process')) {\n\t\t\t\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn done(taskSet);\n\t\t\t\t\t\t}, error), 5000, () => {\n\t\t\t\t\t\t\t// onTimeout\n\t\t\t\t\t\t\tconsole.error('Timed out getting tasks from ', providerType);\n\t\t\t\t\t\t\tdone(undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!foundAnyProviders) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\n\t\tconst result: TaskMap = new TaskMap();\n\t\tconst contributedTasks: TaskMap = new TaskMap();\n\n\t\tfor (const set of contributedTaskSets) {\n\t\t\tfor (const task of set.tasks) {\n\t\t\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\tcontributedTasks.add(workspaceFolder, task);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlet tasks: [string, IWorkspaceFolderTaskResult][] = [];\n\t\t\t// prevent workspace trust dialog from being shown in unexpected cases #224881\n\t\t\tif (!knownOnlyOrTrusted || this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\t\ttasks = Array.from(await this.getWorkspaceTasks());\n\t\t\t}\n\t\t\tawait Promise.all(this._getCustomTaskPromises(tasks, filter, result, contributedTasks, waitToActivate));\n\t\t\tif (needsRecentTasksMigration) {\n\t\t\t\t// At this point we have all the tasks and can migrate the recently used tasks.\n\t\t\t\tawait this._migrateRecentTasks(result.all());\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch {\n\t\t\t// If we can't read the tasks.json file provide at least the contributed tasks\n\t\t\tconst result: TaskMap = new TaskMap();\n\t\t\tfor (const set of contributedTaskSets) {\n\t\t\t\tfor (const task of set.tasks) {\n\t\t\t\t\tconst folder = task.getWorkspaceFolder();\n\t\t\t\t\tif (folder) {\n\t\t\t\t\t\tresult.add(folder, task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate _getCustomTaskPromises(customTasksKeyValuePairs: [string, IWorkspaceFolderTaskResult][], filter: ITaskFilter | undefined, result: TaskMap, contributedTasks: TaskMap, waitToActivate: boolean | undefined) {\n\t\treturn customTasksKeyValuePairs.map(async ([key, folderTasks]) => {\n\t\t\tconst contributed = contributedTasks.get(key);\n\t\t\tif (!folderTasks.set) {\n\t\t\t\tif (contributed) {\n\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t} else {\n\t\t\t\tconst configurations = folderTasks.configurations;\n\t\t\t\tconst legacyTaskConfigurations = folderTasks.set ? this._getLegacyTaskConfigurations(folderTasks.set) : undefined;\n\t\t\t\tconst customTasksToDelete: Task[] = [];\n\t\t\t\tif (configurations || legacyTaskConfigurations) {\n\t\t\t\t\tconst unUsedConfigurations: Set<string> = new Set<string>();\n\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\tObject.keys(configurations.byIdentifier).forEach(key => unUsedConfigurations.add(key));\n\t\t\t\t\t}\n\t\t\t\t\tfor (const task of contributed) {\n\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\t\tconst configuringTask = configurations.byIdentifier[task.defines._key];\n\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\tunUsedConfigurations.delete(task.defines._key);\n\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(task, configuringTask));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (legacyTaskConfigurations) {\n\t\t\t\t\t\t\tconst configuringTask = legacyTaskConfigurations[task.defines._key];\n\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(task, configuringTask));\n\t\t\t\t\t\t\t\tcustomTasksToDelete.push(configuringTask);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (customTasksToDelete.length > 0) {\n\t\t\t\t\t\tconst toDelete = customTasksToDelete.reduce<IStringDictionary<boolean>>((map, task) => {\n\t\t\t\t\t\t\tmap[task._id] = true;\n\t\t\t\t\t\t\treturn map;\n\t\t\t\t\t\t}, Object.create(null));\n\t\t\t\t\t\tfor (const task of folderTasks.set.tasks) {\n\t\t\t\t\t\t\tif (toDelete[task._id]) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst unUsedConfigurationsAsArray = Array.from(unUsedConfigurations);\n\n\t\t\t\t\tconst unUsedConfigurationPromises = unUsedConfigurationsAsArray.map(async (value) => {\n\t\t\t\t\t\tconst configuringTask = configurations!.byIdentifier[value];\n\t\t\t\t\t\tif (filter?.type && (filter.type !== configuringTask.configures.type)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet requiredTaskProviderUnavailable: boolean = false;\n\n\t\t\t\t\t\tfor (const [handle, provider] of this._providers) {\n\t\t\t\t\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\t\t\t\t\tif (configuringTask.type === providerType) {\n\t\t\t\t\t\t\t\tif (providerType && !this._isTaskProviderEnabled(providerType)) {\n\t\t\t\t\t\t\t\t\trequiredTaskProviderUnavailable = true;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst resolvedTask = await provider.resolveTask(configuringTask);\n\t\t\t\t\t\t\t\t\tif (resolvedTask && (resolvedTask._id === configuringTask._id)) {\n\t\t\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(resolvedTask, configuringTask));\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t// Ignore errors. The task could not be provided by any of the providers.\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (requiredTaskProviderUnavailable) {\n\t\t\t\t\t\t\tthis._log(nls.localize(\n\t\t\t\t\t\t\t\t'TaskService.providerUnavailable',\n\t\t\t\t\t\t\t\t'Warning: {0} tasks are unavailable in the current environment.',\n\t\t\t\t\t\t\t\tconfiguringTask.configures.type\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t} else if (!waitToActivate) {\n\t\t\t\t\t\t\tthis._log(nls.localize(\n\t\t\t\t\t\t\t\t'TaskService.noConfiguration',\n\t\t\t\t\t\t\t\t'Error: The {0} task detection didn\\'t contribute a task for the following configuration:\\n{1}\\nThe task will be ignored.',\n\t\t\t\t\t\t\t\tconfiguringTask.configures.type,\n\t\t\t\t\t\t\t\tJSON.stringify(configuringTask._source.config.element, undefined, 4)\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tawait Promise.all(unUsedConfigurationPromises);\n\t\t\t\t} else {\n\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getLegacyTaskConfigurations(workspaceTasks: ITaskSet): IStringDictionary<CustomTask> | undefined {\n\t\tlet result: IStringDictionary<CustomTask> | undefined;\n\t\tfunction getResult(): IStringDictionary<CustomTask> {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = Object.create(null);\n\t\t\treturn result!;\n\t\t}\n\t\tfor (const task of workspaceTasks.tasks) {\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tconst commandName = task.command && task.command.name;\n\t\t\t\t// This is for backwards compatibility with the 0.1.0 task annotation code\n\t\t\t\t// if we had a gulp, jake or grunt command a task specification was a annotation\n\t\t\t\tif (commandName === 'gulp' || commandName === 'grunt' || commandName === 'jake') {\n\t\t\t\t\tconst identifier = KeyedTaskIdentifier.create({\n\t\t\t\t\t\ttype: commandName,\n\t\t\t\t\t\ttask: task.configurationProperties.name\n\t\t\t\t\t});\n\t\t\t\t\tgetResult()[identifier._key] = task;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async getWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn new Map();\n\t\t}\n\t\tawait raceTimeout(this._waitForAllSupportedExecutions, 2000, () => {\n\t\t\tthis._logService.warn('Timed out waiting for all supported executions');\n\t\t});\n\t\tawait this._whenTaskSystemReady;\n\t\tif (this._workspaceTasksPromise) {\n\t\t\treturn this._workspaceTasksPromise;\n\t\t}\n\t\treturn this._updateWorkspaceTasks(runSource);\n\t}\n\n\tprivate _updateWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tthis._workspaceTasksPromise = this._computeWorkspaceTasks(runSource);\n\t\treturn this._workspaceTasksPromise;\n\t}\n\n\tprivate async _getAFolder(): Promise<IWorkspaceFolder> {\n\t\tlet folder = this.workspaceFolders.length > 0 ? this.workspaceFolders[0] : undefined;\n\t\tif (!folder) {\n\t\t\tconst userhome = await this._pathService.userHome();\n\t\t\tfolder = new WorkspaceFolder({ uri: userhome, name: resources.basename(userhome), index: 0 });\n\t\t}\n\t\treturn folder;\n\t}\n\n\tprotected async _computeWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tconst promises: Promise<IWorkspaceFolderTaskResult | undefined>[] = [];\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tpromises.push(this._computeWorkspaceFolderTasks(folder, runSource));\n\t\t}\n\t\tconst values = await Promise.all(promises);\n\t\tconst result = new Map<string, IWorkspaceFolderTaskResult>();\n\t\tfor (const value of values) {\n\t\t\tif (value) {\n\t\t\t\tresult.set(value.workspaceFolder.uri.toString(), value);\n\t\t\t}\n\t\t}\n\n\t\tconst folder = await this._getAFolder();\n\t\tif (this._contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\tconst workspaceFileTasks = await this._computeWorkspaceFileTasks(folder, runSource);\n\t\t\tif (workspaceFileTasks && this._workspace && this._workspace.configuration) {\n\t\t\t\tresult.set(this._workspace.configuration.toString(), workspaceFileTasks);\n\t\t\t}\n\t\t}\n\n\t\tconst userTasks = await this._computeUserTasks(folder, runSource);\n\t\tif (userTasks) {\n\t\t\tresult.set(USER_TASKS_GROUP_KEY, userTasks);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate get _jsonTasksSupported(): boolean {\n\t\treturn ShellExecutionSupportedContext.getValue(this._contextKeyService) === true && ProcessExecutionSupportedContext.getValue(this._contextKeyService) === true;\n\t}\n\n\tprivate async _computeWorkspaceFolderTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<IWorkspaceFolderTaskResult> {\n\t\tconst workspaceFolderConfiguration = (this._executionEngine === ExecutionEngine.Process ? await this._computeLegacyConfiguration(workspaceFolder) : await this._computeConfiguration(workspaceFolder));\n\t\tif (!workspaceFolderConfiguration || !workspaceFolderConfiguration.config || workspaceFolderConfiguration.hasErrors) {\n\t\t\treturn Promise.resolve({ workspaceFolder, set: undefined, configurations: undefined, hasErrors: workspaceFolderConfiguration ? workspaceFolderConfiguration.hasErrors : false });\n\t\t}\n\t\tawait ProblemMatcherRegistry.onReady();\n\t\tconst taskSystemInfo: ITaskSystemInfo | undefined = this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\tconst problemReporter = new ProblemReporter(this._outputChannel);\n\t\tconst parseResult = TaskConfig.parse(workspaceFolder, undefined, taskSystemInfo ? taskSystemInfo.platform : Platform.platform, workspaceFolderConfiguration.config, problemReporter, TaskConfig.TaskConfigSource.TasksJson, this._contextKeyService);\n\t\tlet hasErrors = false;\n\t\tif (!parseResult.validationStatus.isOK() && (parseResult.validationStatus.state !== ValidationState.Info)) {\n\t\t\thasErrors = true;\n\t\t\tthis._showOutput(runSource);\n\t\t}\n\t\tif (problemReporter.status.isFatal()) {\n\t\t\tproblemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\\'t not be used. Please correct the errors first.'));\n\t\t\treturn { workspaceFolder, set: undefined, configurations: undefined, hasErrors };\n\t\t}\n\t\tlet customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask> } | undefined;\n\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\tcustomizedTasks = {\n\t\t\t\tbyIdentifier: Object.create(null)\n\t\t\t};\n\t\t\tfor (const task of parseResult.configured) {\n\t\t\t\tcustomizedTasks.byIdentifier[task.configures._key] = task;\n\t\t\t}\n\t\t}\n\t\tif (!this._jsonTasksSupported && (parseResult.custom.length > 0)) {\n\t\t\tconsole.warn('Custom workspace tasks are not supported.');\n\t\t}\n\t\treturn { workspaceFolder, set: { tasks: this._jsonTasksSupported ? parseResult.custom : [] }, configurations: customizedTasks, hasErrors };\n\t}\n\n\tprivate _testParseExternalConfig(config: TaskConfig.IExternalTaskRunnerConfiguration | undefined, location: string): { config: TaskConfig.IExternalTaskRunnerConfiguration | undefined; hasParseErrors: boolean } {\n\t\tif (!config) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tconst parseErrors: string[] = (config as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._log(nls.localize({ key: 'TaskSystem.invalidTaskJsonOther', comment: ['Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json'] }, 'Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.', location));\n\t\t\t\tthis._showOutput();\n\t\t\t\treturn { config, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config, hasParseErrors: false };\n\t}\n\n\tprivate _log(value: string, verbose?: boolean): void {\n\t\tif (!verbose || this._configurationService.getValue(TaskSettingId.VerboseLogging)) {\n\t\t\tthis._outputChannel.append(value + '\\n');\n\t\t}\n\t}\n\n\tprivate async _computeWorkspaceFileTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<IWorkspaceFolderTaskResult> {\n\t\tif (this._executionEngine === ExecutionEngine.Process) {\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\tconst workspaceFileConfig = this._getConfiguration(workspaceFolder, TaskSourceKind.WorkspaceFile);\n\t\tconst configuration = this._testParseExternalConfig(workspaceFileConfig.config, nls.localize('TasksSystem.locationWorkspaceConfig', 'workspace file'));\n\t\tconst customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask> } = {\n\t\t\tbyIdentifier: Object.create(null)\n\t\t};\n\n\t\tconst custom: CustomTask[] = [];\n\t\tawait this._computeTasksForSingleConfig(workspaceFolder, configuration.config, runSource, custom, customizedTasks.byIdentifier, TaskConfig.TaskConfigSource.WorkspaceFile);\n\t\tconst engine = configuration.config ? TaskConfig.ExecutionEngine.from(configuration.config) : ExecutionEngine.Terminal;\n\t\tif (engine === ExecutionEngine.Process) {\n\t\t\tthis._notificationService.warn(nls.localize('TaskSystem.versionWorkspaceFile', 'Only tasks version 2.0.0 permitted in workspace configuration files.'));\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\treturn { workspaceFolder, set: { tasks: custom }, configurations: customizedTasks, hasErrors: configuration.hasParseErrors };\n\t}\n\n\tprivate async _computeUserTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<IWorkspaceFolderTaskResult> {\n\t\tif (this._executionEngine === ExecutionEngine.Process) {\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\tconst userTasksConfig = this._getConfiguration(workspaceFolder, TaskSourceKind.User);\n\t\tconst configuration = this._testParseExternalConfig(userTasksConfig.config, nls.localize('TasksSystem.locationUserConfig', 'user settings'));\n\t\tconst customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask> } = {\n\t\t\tbyIdentifier: Object.create(null)\n\t\t};\n\n\t\tconst custom: CustomTask[] = [];\n\t\tawait this._computeTasksForSingleConfig(workspaceFolder, configuration.config, runSource, custom, customizedTasks.byIdentifier, TaskConfig.TaskConfigSource.User);\n\t\tconst engine = configuration.config ? TaskConfig.ExecutionEngine.from(configuration.config) : ExecutionEngine.Terminal;\n\t\tif (engine === ExecutionEngine.Process) {\n\t\t\tthis._notificationService.warn(nls.localize('TaskSystem.versionSettings', 'Only tasks version 2.0.0 permitted in user settings.'));\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\treturn { workspaceFolder, set: { tasks: custom }, configurations: customizedTasks, hasErrors: configuration.hasParseErrors };\n\t}\n\n\tprivate _emptyWorkspaceTaskResults(workspaceFolder: IWorkspaceFolder): IWorkspaceFolderTaskResult {\n\t\treturn { workspaceFolder, set: undefined, configurations: undefined, hasErrors: false };\n\t}\n\n\tprivate async _computeTasksForSingleConfig(workspaceFolder: IWorkspaceFolder, config: TaskConfig.IExternalTaskRunnerConfiguration | undefined, runSource: TaskRunSource, custom: CustomTask[], customized: IStringDictionary<ConfiguringTask>, source: TaskConfig.TaskConfigSource, isRecentTask: boolean = false): Promise<boolean> {\n\t\tif (!config) {\n\t\t\treturn false;\n\t\t} else if (!workspaceFolder) {\n\t\t\tthis._logService.trace('TaskService.computeTasksForSingleConfig: no workspace folder for worskspace', this._workspace?.id);\n\t\t\treturn false;\n\t\t}\n\t\tconst taskSystemInfo: ITaskSystemInfo | undefined = this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\tconst problemReporter = new ProblemReporter(this._outputChannel);\n\t\tconst parseResult = TaskConfig.parse(workspaceFolder, this._workspace, taskSystemInfo ? taskSystemInfo.platform : Platform.platform, config, problemReporter, source, this._contextKeyService, isRecentTask);\n\t\tlet hasErrors = false;\n\t\tif (!parseResult.validationStatus.isOK() && (parseResult.validationStatus.state !== ValidationState.Info)) {\n\t\t\tthis._showOutput(runSource);\n\t\t\thasErrors = true;\n\t\t}\n\t\tif (problemReporter.status.isFatal()) {\n\t\t\tproblemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\\'t not be used. Please correct the errors first.'));\n\t\t\treturn hasErrors;\n\t\t}\n\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\tfor (const task of parseResult.configured) {\n\t\t\t\tcustomized[task.configures._key] = task;\n\t\t\t}\n\t\t}\n\t\tif (!this._jsonTasksSupported && (parseResult.custom.length > 0)) {\n\t\t\tconsole.warn('Custom workspace tasks are not supported.');\n\t\t} else {\n\t\t\tfor (const task of parseResult.custom) {\n\t\t\t\tcustom.push(task);\n\t\t\t}\n\t\t}\n\t\treturn hasErrors;\n\t}\n\n\tprivate _computeConfiguration(workspaceFolder: IWorkspaceFolder): Promise<IWorkspaceFolderConfigurationResult> {\n\t\tconst { config, hasParseErrors } = this._getConfiguration(workspaceFolder);\n\t\treturn Promise.resolve<IWorkspaceFolderConfigurationResult>({ workspaceFolder, config, hasErrors: hasParseErrors });\n\t}\n\n\tprotected abstract _computeLegacyConfiguration(workspaceFolder: IWorkspaceFolder): Promise<IWorkspaceFolderConfigurationResult>;\n\n\tprivate _computeWorkspaceFolderSetup(): [IWorkspaceFolder[], IWorkspaceFolder[], ExecutionEngine, JsonSchemaVersion, IWorkspace | undefined] {\n\t\tconst workspaceFolders: IWorkspaceFolder[] = [];\n\t\tconst ignoredWorkspaceFolders: IWorkspaceFolder[] = [];\n\t\tlet executionEngine = ExecutionEngine.Terminal;\n\t\tlet schemaVersion = JsonSchemaVersion.V2_0_0;\n\t\tlet workspace: IWorkspace | undefined;\n\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceFolder: IWorkspaceFolder = this._contextService.getWorkspace().folders[0];\n\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\texecutionEngine = this._computeExecutionEngine(workspaceFolder);\n\t\t\tconst telemetryData: { [key: string]: any } = {\n\t\t\t\texecutionEngineVersion: executionEngine\n\t\t\t};\n\t\t\t/* __GDPR__\n\t\t\t\t\"taskService.engineVersion\" : {\n\t\t\t\t\t\"owner\": \"alexr00\",\n\t\t\t\t\t\"comment\": \"The engine version of tasks. Used to determine if a user is using a deprecated version.\",\n\t\t\t\t\t\"executionEngineVersion\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"comment\": \"The engine version of tasks.\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('taskService.engineVersion', telemetryData);\n\t\t\tschemaVersion = this._computeJsonSchemaVersion(workspaceFolder);\n\t\t} else if (this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tworkspace = this._contextService.getWorkspace();\n\t\t\tfor (const workspaceFolder of this._contextService.getWorkspace().folders) {\n\t\t\t\tif (schemaVersion === this._computeJsonSchemaVersion(workspaceFolder)) {\n\t\t\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\t\t} else {\n\t\t\t\t\tignoredWorkspaceFolders.push(workspaceFolder);\n\t\t\t\t\tthis._log(nls.localize(\n\t\t\t\t\t\t'taskService.ignoreingFolder',\n\t\t\t\t\t\t'Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0',\n\t\t\t\t\t\tworkspaceFolder.uri.fsPath));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [workspaceFolders, ignoredWorkspaceFolders, executionEngine, schemaVersion, workspace];\n\t}\n\n\tprivate _computeExecutionEngine(workspaceFolder: IWorkspaceFolder): ExecutionEngine {\n\t\tconst { config } = this._getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn ExecutionEngine._default;\n\t\t}\n\t\treturn TaskConfig.ExecutionEngine.from(config);\n\t}\n\n\tprivate _computeJsonSchemaVersion(workspaceFolder: IWorkspaceFolder): JsonSchemaVersion {\n\t\tconst { config } = this._getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn JsonSchemaVersion.V2_0_0;\n\t\t}\n\t\treturn TaskConfig.JsonSchemaVersion.from(config);\n\t}\n\n\tprotected _getConfiguration(workspaceFolder: IWorkspaceFolder, source?: string): { config: TaskConfig.IExternalTaskRunnerConfiguration | undefined; hasParseErrors: boolean } {\n\t\tlet result;\n\t\tif ((source !== TaskSourceKind.User) && (this._contextService.getWorkbenchState() === WorkbenchState.EMPTY)) {\n\t\t\tresult = undefined;\n\t\t} else {\n\t\t\tconst wholeConfig = this._configurationService.inspect<TaskConfig.IExternalTaskRunnerConfiguration>('tasks', { resource: workspaceFolder.uri });\n\t\t\tswitch (source) {\n\t\t\t\tcase TaskSourceKind.User: {\n\t\t\t\t\tif (wholeConfig.userValue !== wholeConfig.workspaceFolderValue) {\n\t\t\t\t\t\tresult = Objects.deepClone(wholeConfig.userValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase TaskSourceKind.Workspace: result = Objects.deepClone(wholeConfig.workspaceFolderValue); break;\n\t\t\t\tcase TaskSourceKind.WorkspaceFile: {\n\t\t\t\t\tif ((this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE)\n\t\t\t\t\t\t&& (wholeConfig.workspaceFolderValue !== wholeConfig.workspaceValue)) {\n\t\t\t\t\t\tresult = Objects.deepClone(wholeConfig.workspaceValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: result = Objects.deepClone(wholeConfig.workspaceFolderValue);\n\t\t\t}\n\t\t}\n\t\tif (!result) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tconst parseErrors: string[] = (result as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._log(nls.localize('TaskSystem.invalidTaskJson', 'Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.'));\n\t\t\t\tthis._showOutput();\n\t\t\t\treturn { config: undefined, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config: result, hasParseErrors: false };\n\t}\n\n\tpublic inTerminal(): boolean {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem instanceof TerminalTaskSystem;\n\t\t}\n\t\treturn this._executionEngine === ExecutionEngine.Terminal;\n\t}\n\n\tpublic configureAction(): Action {\n\t\tconst thisCapture: AbstractTaskService = this;\n\t\treturn new class extends Action {\n\t\t\tconstructor() {\n\t\t\t\tsuper(ConfigureTaskAction.ID, ConfigureTaskAction.TEXT.value, undefined, true, () => { thisCapture._runConfigureTasks(); return Promise.resolve(undefined); });\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _handleError(err: any): void {\n\t\tlet showOutput = true;\n\t\tif (err instanceof TaskError) {\n\t\t\tconst buildError = err;\n\t\t\tconst needsConfig = buildError.code === TaskErrors.NotConfigured || buildError.code === TaskErrors.NoBuildTask || buildError.code === TaskErrors.NoTestTask;\n\t\t\tconst needsTerminate = buildError.code === TaskErrors.RunningTask;\n\t\t\tif (needsConfig || needsTerminate) {\n\t\t\t\tthis._notificationService.prompt(buildError.severity, buildError.message, [{\n\t\t\t\t\tlabel: needsConfig ? ConfigureTaskAction.TEXT.value : nls.localize('TerminateAction.label', \"Terminate Task\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tif (needsConfig) {\n\t\t\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._runTerminateCommand();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\t\t\t} else {\n\t\t\t\tthis._notificationService.notify({ severity: buildError.severity, message: buildError.message });\n\t\t\t}\n\t\t} else if (err instanceof Error) {\n\t\t\tconst error = err;\n\t\t\tthis._notificationService.error(error.message);\n\t\t\tshowOutput = false;\n\t\t} else if (Types.isString(err)) {\n\t\t\tthis._notificationService.error(<string>err);\n\t\t} else {\n\t\t\tthis._notificationService.error(nls.localize('TaskSystem.unknownError', 'An error has occurred while running a task. See task log for details.'));\n\t\t}\n\t\tif (showOutput) {\n\t\t\tthis._showOutput();\n\t\t}\n\t}\n\n\tprivate _showDetail(): boolean {\n\t\treturn this._configurationService.getValue<boolean>(QUICKOPEN_DETAIL_CONFIG);\n\t}\n\n\tprivate async _createTaskQuickPickEntries(tasks: Task[], group: boolean = false, sort: boolean = false, selectedEntry?: ITaskQuickPickEntry, includeRecents: boolean = true): Promise<ITaskQuickPickEntry[]> {\n\t\tlet encounteredTasks: { [key: string]: ITaskQuickPickEntry[] } = {};\n\t\tif (tasks === undefined || tasks === null || tasks.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst TaskQuickPickEntry = (task: Task): ITaskQuickPickEntry => {\n\t\t\tconst newEntry = { label: task._label, description: this.getTaskDescription(task), task, detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\tif (encounteredTasks[task._id]) {\n\t\t\t\tif (encounteredTasks[task._id].length === 1) {\n\t\t\t\t\tencounteredTasks[task._id][0].label += ' (1)';\n\t\t\t\t}\n\t\t\t\tnewEntry.label = newEntry.label + ' (' + (encounteredTasks[task._id].length + 1).toString() + ')';\n\t\t\t} else {\n\t\t\t\tencounteredTasks[task._id] = [];\n\t\t\t}\n\t\t\tencounteredTasks[task._id].push(newEntry);\n\t\t\treturn newEntry;\n\n\t\t};\n\t\tfunction fillEntries(entries: QuickPickInput<ITaskQuickPickEntry>[], tasks: Task[], groupLabel: string): void {\n\t\t\tif (tasks.length) {\n\t\t\t\tentries.push({ type: 'separator', label: groupLabel });\n\t\t\t}\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst entry: ITaskQuickPickEntry = TaskQuickPickEntry(task);\n\t\t\t\tentry.buttons = [{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', \"Configure Task\") }];\n\t\t\t\tif (selectedEntry && (task === selectedEntry.task)) {\n\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t} else {\n\t\t\t\t\tentries.push(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet entries: ITaskQuickPickEntry[];\n\t\tif (group) {\n\t\t\tentries = [];\n\t\t\tif (tasks.length === 1) {\n\t\t\t\tentries.push(TaskQuickPickEntry(tasks[0]));\n\t\t\t} else {\n\t\t\t\tconst recentlyUsedTasks = await this.getSavedTasks('historical');\n\t\t\t\tconst recent: Task[] = [];\n\t\t\t\tconst recentSet: Set<string> = new Set();\n\t\t\t\tlet configured: Task[] = [];\n\t\t\t\tlet detected: Task[] = [];\n\t\t\t\tconst taskMap: IStringDictionary<Task> = Object.create(null);\n\t\t\t\ttasks.forEach(task => {\n\t\t\t\t\tconst key = task.getCommonTaskId();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\ttaskMap[key] = task;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\trecentlyUsedTasks.reverse().forEach(recentTask => {\n\t\t\t\t\tconst key = recentTask.getCommonTaskId();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\trecentSet.add(key);\n\t\t\t\t\t\tconst task = taskMap[key];\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\trecent.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst key = task.getCommonTaskId();\n\t\t\t\t\tif (!key || !recentSet.has(key)) {\n\t\t\t\t\t\tif ((task._source.kind === TaskSourceKind.Workspace) || (task._source.kind === TaskSourceKind.User)) {\n\t\t\t\t\t\t\tconfigured.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdetected.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\tif (includeRecents) {\n\t\t\t\t\tfillEntries(entries, recent, nls.localize('recentlyUsed', 'recently used tasks'));\n\t\t\t\t}\n\t\t\t\tconfigured = configured.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(entries, configured, nls.localize('configured', 'configured tasks'));\n\t\t\t\tdetected = detected.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(entries, detected, nls.localize('detected', 'detected tasks'));\n\t\t\t}\n\t\t} else {\n\t\t\tif (sort) {\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\ttasks = tasks.sort((a, b) => sorter.compare(a, b));\n\t\t\t}\n\t\t\tentries = tasks.map<ITaskQuickPickEntry>(task => TaskQuickPickEntry(task));\n\t\t}\n\t\tencounteredTasks = {};\n\t\treturn entries;\n\t}\n\tprivate async _showTwoLevelQuickPick(placeHolder: string, defaultEntry?: ITaskQuickPickEntry, type?: string, name?: string) {\n\t\treturn this._instantiationService.createInstance(TaskQuickPick).show(placeHolder, defaultEntry, type, name);\n\t}\n\n\tprivate async _showQuickPick(tasks: Promise<Task[]> | Task[], placeHolder: string, defaultEntry?: ITaskQuickPickEntry, group: boolean = false, sort: boolean = false, selectedEntry?: ITaskQuickPickEntry, additionalEntries?: ITaskQuickPickEntry[], name?: string): Promise<ITaskQuickPickEntry | undefined | null> {\n\t\tconst resolvedTasks = await tasks;\n\t\tconst entries: (ITaskQuickPickEntry | IQuickPickSeparator)[] | undefined = await raceTimeout(this._createTaskQuickPickEntries(resolvedTasks, group, sort, selectedEntry), 200, () => undefined);\n\t\tif (!entries) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (entries.length === 1 && this._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\treturn (<ITaskQuickPickEntry>entries[0]);\n\t\t} else if ((entries.length === 0) && defaultEntry) {\n\t\t\tentries.push(defaultEntry);\n\t\t} else if (entries.length > 1 && additionalEntries && additionalEntries.length > 0) {\n\t\t\tentries.push({ type: 'separator', label: '' });\n\t\t\tentries.push(additionalEntries[0]);\n\t\t}\n\n\t\treturn this._quickInputService.pick<ITaskQuickPickEntry>(\n\t\t\tentries,\n\t\t\t{\n\t\t\t\tvalue: name,\n\t\t\t\tplaceHolder,\n\t\t\t\tmatchOnDescription: true,\n\t\t\t\tonDidTriggerItemButton: context => {\n\t\t\t\t\tconst task = context.item.task;\n\t\t\t\t\tthis._quickInputService.cancel();\n\t\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\t\tthis.customize(task, undefined, true);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t}\n\n\tprivate _needsRecentTasksMigration(): boolean {\n\t\treturn (this.getRecentlyUsedTasksV1().size > 0) && (this._getTasksFromStorage('historical').size === 0);\n\t}\n\n\tprivate async _migrateRecentTasks(tasks: Task[]) {\n\t\tif (!this._needsRecentTasksMigration()) {\n\t\t\treturn;\n\t\t}\n\t\tconst recentlyUsedTasks = this.getRecentlyUsedTasksV1();\n\t\tconst taskMap: IStringDictionary<Task> = Object.create(null);\n\t\ttasks.forEach(task => {\n\t\t\tconst key = task.getKey();\n\t\t\tif (key) {\n\t\t\t\ttaskMap[key] = task;\n\t\t\t}\n\t\t});\n\t\tconst reversed = [...recentlyUsedTasks.keys()].reverse();\n\t\tfor (const key in reversed) {\n\t\t\tconst task = taskMap[key];\n\t\t\tif (task) {\n\t\t\t\tawait this._setRecentlyUsedTask(task);\n\t\t\t}\n\t\t}\n\t\tthis._storageService.remove(AbstractTaskService.RecentlyUsedTasks_Key, StorageScope.WORKSPACE);\n\t}\n\n\tprivate _showIgnoredFoldersMessage(): Promise<void> {\n\t\tif (this.ignoredWorkspaceFolders.length === 0 || !this.showIgnoreMessage) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('TaskService.ignoredFolder', 'The following workspace folders are ignored since they use task version 0.1.0: {0}', this.ignoredWorkspaceFolders.map(f => f.name).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('TaskService.notAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._storageService.store(AbstractTaskService.IgnoreTask010DonotShowAgain_key, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\t\tthis._showIgnoreMessage = false;\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate async _trust(): Promise<boolean> {\n\t\tif (ServerlessWebContext && !TaskExecutionSupportedContext) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this._workspaceTrustManagementService.workspaceTrustInitialized;\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn (await this._workspaceTrustRequestService.requestWorkspaceTrust(\n\t\t\t\t{\n\t\t\t\t\tmessage: nls.localize('TaskService.requestTrust', \"Listing and running tasks requires that some of the files in this workspace be executed as code.\")\n\t\t\t\t})) === true;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async _runTaskCommand(filter?: string | ITaskIdentifier): Promise<void> {\n\t\tif (!this._tasksReconnected) {\n\t\t\treturn;\n\t\t}\n\t\tif (!filter) {\n\t\t\treturn this._doRunTaskCommand();\n\t\t}\n\t\tconst type = typeof filter === 'string' ? undefined : filter.type;\n\t\tconst taskName = typeof filter === 'string' ? filter : filter.task;\n\t\tconst grouped = await this._getGroupedTasks({ type });\n\t\tconst identifier = this._getTaskIdentifier(filter);\n\t\tconst tasks = grouped.all();\n\t\tconst resolver = this._createResolver(grouped);\n\t\tconst folderURIs: (URI | string)[] = this._contextService.getWorkspace().folders.map(folder => folder.uri);\n\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tfolderURIs.push(this._contextService.getWorkspace().configuration!);\n\t\t}\n\t\tfolderURIs.push(USER_TASKS_GROUP_KEY);\n\t\tif (identifier) {\n\t\t\tfor (const uri of folderURIs) {\n\t\t\t\tconst task = await resolver.resolve(uri, identifier);\n\t\t\t\tif (task) {\n\t\t\t\t\tthis.run(task);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst exactMatchTask = !taskName ? undefined : tasks.find(t => t.configurationProperties.identifier === taskName || t.getDefinition(true)?.configurationProperties?.identifier === taskName);\n\t\tif (!exactMatchTask) {\n\t\t\treturn this._doRunTaskCommand(tasks, type, taskName);\n\t\t}\n\t\tfor (const uri of folderURIs) {\n\t\t\tconst task = await resolver.resolve(uri, taskName);\n\t\t\tif (task) {\n\t\t\t\tawait this.run(task, { attachProblemMatcher: true }, TaskRunSource.User);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _tasksAndGroupedTasks(filter?: ITaskFilter): { tasks: Promise<Task[]>; grouped: Promise<TaskMap> } {\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn { tasks: Promise.resolve<Task[]>([]), grouped: Promise.resolve(new TaskMap()) };\n\t\t}\n\t\tconst grouped = this._getGroupedTasks(filter);\n\t\tconst tasks = grouped.then((map) => {\n\t\t\tif (!filter || !filter.type) {\n\t\t\t\treturn map.all();\n\t\t\t}\n\t\t\tconst result: Task[] = [];\n\t\t\tmap.forEach((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (ContributedTask.is(task) && task.defines.type === filter.type) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst customizes = task.customizes();\n\t\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t\treturn { tasks, grouped };\n\t}\n\n\tprivate _doRunTaskCommand(tasks?: Task[], type?: string, name?: string): void {\n\t\tconst pickThen = (task: Task | undefined | null) => {\n\t\t\tif (task === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (task === null) {\n\t\t\t\tthis._runConfigureTasks();\n\t\t\t} else {\n\t\t\t\tthis.run(task, { attachProblemMatcher: true }, TaskRunSource.User).then(undefined, reason => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst placeholder = nls.localize('TaskService.pickRunTask', 'Select the task to run');\n\n\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\tif (this._configurationService.getValue(USE_SLOW_PICKER)) {\n\t\t\t\tlet taskResult: { tasks: Promise<Task[]>; grouped: Promise<TaskMap> } | undefined = undefined;\n\t\t\t\tif (!tasks) {\n\t\t\t\t\ttaskResult = this._tasksAndGroupedTasks();\n\t\t\t\t}\n\t\t\t\tthis._showQuickPick(tasks ? tasks : taskResult!.tasks, placeholder,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '$(plus) ' + nls.localize('TaskService.noEntryToRun', 'Configure a Task'),\n\t\t\t\t\t\ttask: null\n\t\t\t\t\t},\n\t\t\t\t\ttrue, undefined, undefined, undefined, name).\n\t\t\t\t\tthen((entry) => {\n\t\t\t\t\t\treturn pickThen(entry ? entry.task : undefined);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._showTwoLevelQuickPick(placeholder,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '$(plus) ' + nls.localize('TaskService.noEntryToRun', 'Configure a Task'),\n\t\t\t\t\t\ttask: null\n\t\t\t\t\t}, type, name).\n\t\t\t\t\tthen(pickThen);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _reRunTaskCommand(): void {\n\n\t\tProblemMatcherRegistry.onReady().then(() => {\n\t\t\treturn this._editorService.saveAll({ reason: SaveReason.AUTO }).then(() => { // make sure all dirty editors are saved\n\t\t\t\tconst executeResult = this._getTaskSystem().rerun();\n\t\t\t\tif (executeResult) {\n\t\t\t\t\treturn this._handleExecuteResult(executeResult);\n\t\t\t\t} else {\n\t\t\t\t\tif (!this._taskRunningState.get()) {\n\t\t\t\t\t\t// No task running, prompt to ask which to run\n\t\t\t\t\t\tthis._doRunTaskCommand();\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param tasks - The tasks which need to be filtered\n\t * @param tasksInList - This tells splitPerGroupType to filter out globbed tasks (into defaults)\n\t * @returns\n\t */\n\tprivate _getDefaultTasks(tasks: Task[], taskGlobsInList: boolean = false): Task[] {\n\t\tconst defaults: Task[] = [];\n\t\tfor (const task of tasks.filter(t => !!t.configurationProperties.group)) {\n\t\t\t// At this point (assuming taskGlobsInList is true) there are tasks with matching globs, so only put those in defaults\n\t\t\tif (taskGlobsInList && typeof (task.configurationProperties.group as TaskGroup).isDefault === 'string') {\n\t\t\t\tdefaults.push(task);\n\t\t\t} else if (!taskGlobsInList && (task.configurationProperties.group as TaskGroup).isDefault === true) {\n\t\t\t\tdefaults.push(task);\n\t\t\t}\n\t\t}\n\t\treturn defaults;\n\t}\n\n\tprivate _runTaskGroupCommand(taskGroup: TaskGroup, strings: {\n\t\tfetching: string;\n\t\tselect: string;\n\t\tnotFoundConfigure: string;\n\t}, configure: () => void, legacyCommand: () => void): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\tlegacyCommand();\n\t\t\treturn;\n\t\t}\n\t\tconst options: IProgressOptions = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: strings.fetching\n\t\t};\n\t\tconst promise = (async () => {\n\n\t\t\tasync function runSingleTask(task: Task | undefined, problemMatcherOptions: IProblemMatcherRunOptions | undefined, that: AbstractTaskService) {\n\t\t\t\tthat.run(task, problemMatcherOptions, TaskRunSource.User).then(undefined, reason => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst chooseAndRunTask = (tasks: Task[]) => {\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis._showQuickPick(tasks,\n\t\t\t\t\t\tstrings.select,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: strings.notFoundConfigure,\n\t\t\t\t\t\t\ttask: null\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue).then((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif (task === undefined) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === null) {\n\t\t\t\t\t\t\t\tconfigure.apply(this);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trunSingleTask(task, { attachProblemMatcher: true }, this);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\tlet groupTasks: (Task | ConfiguringTask)[] = [];\n\t\t\tconst { globGroupTasks, globTasksDetected } = await this._getGlobTasks(taskGroup._id);\n\t\t\tgroupTasks = [...globGroupTasks];\n\t\t\tif (!globTasksDetected && groupTasks.length === 0) {\n\t\t\t\tgroupTasks = await this._findWorkspaceTasksInGroup(taskGroup, true);\n\t\t\t}\n\n\t\t\tconst handleMultipleTasks = (areGlobTasks: boolean) => {\n\t\t\t\treturn this._getTasksForGroup(taskGroup).then((tasks) => {\n\t\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\t\t// If we're dealing with tasks that were chosen because of a glob match,\n\t\t\t\t\t\t// then put globs in the defaults and everything else in none\n\t\t\t\t\t\tconst defaults = this._getDefaultTasks(tasks, areGlobTasks);\n\t\t\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\t\t\trunSingleTask(defaults[0], undefined, this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (defaults.length > 0) {\n\t\t\t\t\t\t\ttasks = defaults;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// At this this point there are multiple tasks.\n\t\t\t\t\tchooseAndRunTask(tasks);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst resolveTaskAndRun = (taskGroupTask: Task | ConfiguringTask) => {\n\t\t\t\tif (ConfiguringTask.is(taskGroupTask)) {\n\t\t\t\t\tthis.tryResolveTask(taskGroupTask).then(resolvedTask => {\n\t\t\t\t\t\trunSingleTask(resolvedTask, undefined, this);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\trunSingleTask(taskGroupTask, undefined, this);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// A single default glob task was returned, just run it directly\n\t\t\tif (groupTasks.length === 1) {\n\t\t\t\treturn resolveTaskAndRun(groupTasks[0]);\n\t\t\t}\n\n\t\t\t// If there's multiple globs that match we want to show the quick picker for those tasks\n\t\t\t// We will need to call splitPerGroupType putting globs in defaults and the remaining tasks in none.\n\t\t\t// We don't need to carry on after here\n\t\t\tif (globTasksDetected && groupTasks.length > 1) {\n\t\t\t\treturn handleMultipleTasks(true);\n\t\t\t}\n\n\t\t\t// If no globs are found or matched fallback to checking for default tasks of the task group\n\t\t\tif (!groupTasks.length) {\n\t\t\t\tgroupTasks = await this._findWorkspaceTasksInGroup(taskGroup, true);\n\t\t\t}\n\n\t\t\tif (groupTasks.length === 1) {\n\t\t\t\t// A single default task was returned, just run it directly\n\t\t\t\treturn resolveTaskAndRun(groupTasks[0]);\n\t\t\t}\n\t\t\t// Multiple default tasks returned, show the quickPicker\n\t\t\treturn handleMultipleTasks(false);\n\t\t})();\n\t\tthis._progressService.withProgress(options, () => promise);\n\t}\n\n\tprivate async _getGlobTasks(taskGroupId: string): Promise<{ globGroupTasks: (Task | ConfiguringTask)[]; globTasksDetected: boolean }> {\n\t\tlet globTasksDetected = false;\n\t\t// First check for globs before checking for the default tasks of the task group\n\t\tconst absoluteURI = EditorResourceAccessor.getOriginalUri(this._editorService.activeEditor);\n\t\tif (absoluteURI) {\n\t\t\tconst workspaceFolder = this._contextService.getWorkspaceFolder(absoluteURI);\n\t\t\tif (workspaceFolder) {\n\t\t\t\tconst configuredTasks = this._getConfiguration(workspaceFolder)?.config?.tasks;\n\t\t\t\tif (configuredTasks) {\n\t\t\t\t\tglobTasksDetected = configuredTasks.filter(task => task.group && typeof task.group !== 'string' && typeof task.group.isDefault === 'string').length > 0;\n\t\t\t\t\t// This will activate extensions, so only do so if necessary #185960\n\t\t\t\t\tif (globTasksDetected) {\n\t\t\t\t\t\t// Fallback to absolute path of the file if it is not in a workspace or relative path cannot be found\n\t\t\t\t\t\tconst relativePath = workspaceFolder?.uri ? (resources.relativePath(workspaceFolder.uri, absoluteURI) ?? absoluteURI.path) : absoluteURI.path;\n\n\t\t\t\t\t\tconst globGroupTasks = await this._findWorkspaceTasks((task) => {\n\t\t\t\t\t\t\tconst currentTaskGroup = task.configurationProperties.group;\n\t\t\t\t\t\t\tif (currentTaskGroup && typeof currentTaskGroup !== 'string' && typeof currentTaskGroup.isDefault === 'string') {\n\t\t\t\t\t\t\t\treturn (currentTaskGroup._id === taskGroupId && glob.match(currentTaskGroup.isDefault, relativePath));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tglobTasksDetected = false;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn { globGroupTasks, globTasksDetected };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { globGroupTasks: [], globTasksDetected };\n\n\t}\n\n\tprivate _runBuildCommand(): void {\n\t\tif (!this._tasksReconnected) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._runTaskGroupCommand(TaskGroup.Build, {\n\t\t\tfetching: nls.localize('TaskService.fetchingBuildTasks', 'Fetching build tasks...'),\n\t\t\tselect: nls.localize('TaskService.pickBuildTask', 'Select the build task to run'),\n\t\t\tnotFoundConfigure: nls.localize('TaskService.noBuildTask', 'No build task to run found. Configure Build Task...')\n\t\t}, this._runConfigureDefaultBuildTask, this._build);\n\t}\n\n\tprivate _runTestCommand(): void {\n\t\treturn this._runTaskGroupCommand(TaskGroup.Test, {\n\t\t\tfetching: nls.localize('TaskService.fetchingTestTasks', 'Fetching test tasks...'),\n\t\t\tselect: nls.localize('TaskService.pickTestTask', 'Select the test task to run'),\n\t\t\tnotFoundConfigure: nls.localize('TaskService.noTestTaskTerminal', 'No test task to run found. Configure Tasks...')\n\t\t}, this._runConfigureDefaultTestTask, this._runTest);\n\t}\n\n\tprivate _runTerminateCommand(arg?: any): void {\n\t\tif (arg === 'terminateAll') {\n\t\t\tthis._terminateAll();\n\t\t\treturn;\n\t\t}\n\t\tconst runQuickPick = (promise?: Promise<Task[]>) => {\n\t\t\tthis._showQuickPick(promise || this.getActiveTasks(),\n\t\t\t\tnls.localize('TaskService.taskToTerminate', 'Select a task to terminate'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskRunning', 'No task is currently running'),\n\t\t\t\t\ttask: undefined\n\t\t\t\t},\n\t\t\t\tfalse, true,\n\t\t\t\tundefined,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('TaskService.terminateAllRunningTasks', 'All Running Tasks'),\n\t\t\t\t\tid: 'terminateAll',\n\t\t\t\t\ttask: undefined\n\t\t\t\t}]\n\t\t\t).then(entry => {\n\t\t\t\tif (entry && entry.id === 'terminateAll') {\n\t\t\t\t\tthis._terminateAll();\n\t\t\t\t}\n\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.terminate(task);\n\t\t\t});\n\t\t};\n\t\tif (this.inTerminal()) {\n\t\t\tconst identifier = this._getTaskIdentifier(arg);\n\t\t\tlet promise: Promise<Task[]>;\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tpromise = this.getActiveTasks();\n\t\t\t\tpromise.then((tasks) => {\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\t\tthis.terminate(task);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trunQuickPick(promise);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trunQuickPick();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._isActive().then((active) => {\n\t\t\t\tif (active) {\n\t\t\t\t\tthis._terminateAll().then((responses) => {\n\t\t\t\t\t\t// the output runner has only one task\n\t\t\t\t\t\tconst response = responses[0];\n\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (response.code && response.code === TerminateResponseCode.ProcessNotFound) {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('TerminateAction.noProcess', 'The launched process doesn\\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('TerminateAction.failed', 'Failed to terminate running task'));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _runRestartTaskCommand(arg?: any): Promise<void> {\n\n\t\tconst activeTasks = await this.getActiveTasks();\n\n\t\tif (activeTasks.length === 1) {\n\t\t\tthis._restart(activeTasks[0]);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.inTerminal()) {\n\t\t\t// try dispatching using task identifier\n\t\t\tconst identifier = this._getTaskIdentifier(arg);\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tfor (const task of activeTasks) {\n\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\tthis._restart(task);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// show quick pick with active tasks\n\t\t\tconst entry = await this._showQuickPick(\n\t\t\t\tactiveTasks,\n\t\t\t\tnls.localize('TaskService.taskToRestart', 'Select the task to restart'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskToRestart', 'No task to restart'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tif (entry && entry.task) {\n\t\t\t\tthis._restart(entry.task);\n\t\t\t}\n\t\t} else {\n\t\t\tif (activeTasks.length > 0) {\n\t\t\t\tthis._restart(activeTasks[0]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getTaskIdentifier(filter?: string | ITaskIdentifier): string | KeyedTaskIdentifier | undefined {\n\t\tlet result: string | KeyedTaskIdentifier | undefined = undefined;\n\t\tif (Types.isString(filter)) {\n\t\t\tresult = filter;\n\t\t} else if (filter && Types.isString(filter.type)) {\n\t\t\tresult = TaskDefinition.createTaskIdentifier(filter, console);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _configHasTasks(taskConfig?: TaskConfig.IExternalTaskRunnerConfiguration): boolean {\n\t\treturn !!taskConfig && !!taskConfig.tasks && taskConfig.tasks.length > 0;\n\t}\n\n\tprivate _openTaskFile(resource: URI, taskSource: string) {\n\t\tlet configFileCreated = false;\n\t\tthis._fileService.stat(resource).then((stat) => stat, () => undefined).then(async (stat) => {\n\t\t\tconst fileExists: boolean = !!stat;\n\t\t\tconst configValue = this._configurationService.inspect<TaskConfig.IExternalTaskRunnerConfiguration>('tasks', { resource });\n\t\t\tlet tasksExistInFile: boolean;\n\t\t\tlet target: ConfigurationTarget;\n\t\t\tswitch (taskSource) {\n\t\t\t\tcase TaskSourceKind.User: tasksExistInFile = this._configHasTasks(configValue.userValue); target = ConfigurationTarget.USER; break;\n\t\t\t\tcase TaskSourceKind.WorkspaceFile: tasksExistInFile = this._configHasTasks(configValue.workspaceValue); target = ConfigurationTarget.WORKSPACE; break;\n\t\t\t\tdefault: tasksExistInFile = this._configHasTasks(configValue.workspaceFolderValue); target = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t\tlet content;\n\t\t\tif (!tasksExistInFile) {\n\t\t\t\tconst pickTemplateResult = await this._quickInputService.pick(getTaskTemplates(), { placeHolder: nls.localize('TaskService.template', 'Select a Task Template') });\n\t\t\t\tif (!pickTemplateResult) {\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t\tcontent = pickTemplateResult.content;\n\t\t\t\tconst editorConfig = this._configurationService.getValue() as any;\n\t\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\t\tcontent = content.replace(/(\\n)(\\t+)/g, (_, s1, s2) => s1 + ' '.repeat(s2.length * editorConfig.editor.tabSize));\n\t\t\t\t}\n\t\t\t\tconfigFileCreated = true;\n\t\t\t}\n\n\t\t\tif (!fileExists && content) {\n\t\t\t\treturn this._textFileService.create([{ resource, value: content }]).then(result => {\n\t\t\t\t\treturn result[0].resource;\n\t\t\t\t});\n\t\t\t} else if (fileExists && (tasksExistInFile || content)) {\n\t\t\t\tconst statResource = stat?.resource;\n\t\t\t\tif (content && statResource) {\n\t\t\t\t\tthis._configurationService.updateValue('tasks', json.parse(content), { resource: statResource }, target);\n\t\t\t\t}\n\t\t\t\treturn statResource;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}).then((resource) => {\n\t\t\tif (!resource) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._editorService.openEditor({\n\t\t\t\tresource,\n\t\t\t\toptions: {\n\t\t\t\t\tpinned: configFileCreated // pin only if config file is created #8727\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _isTaskEntry(value: IQuickPickItem): value is IQuickPickItem & { task: Task } {\n\t\tconst candidate: IQuickPickItem & { task: Task } = value as any;\n\t\treturn candidate && !!candidate.task;\n\t}\n\n\tprivate _isSettingEntry(value: IQuickPickItem): value is IQuickPickItem & { settingType: string } {\n\t\tconst candidate: IQuickPickItem & { settingType: string } = value as any;\n\t\treturn candidate && !!candidate.settingType;\n\t}\n\n\tprivate _configureTask(task: Task) {\n\t\tif (ContributedTask.is(task)) {\n\t\t\tthis.customize(task, undefined, true);\n\t\t} else if (CustomTask.is(task)) {\n\t\t\tthis.openConfig(task);\n\t\t} else if (ConfiguringTask.is(task)) {\n\t\t\t// Do nothing.\n\t\t}\n\t}\n\n\tprivate _handleSelection(selection: TaskQuickPickEntryType | undefined) {\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._isTaskEntry(selection)) {\n\t\t\tthis._configureTask(selection.task);\n\t\t} else if (this._isSettingEntry(selection)) {\n\t\t\tconst taskQuickPick = this._instantiationService.createInstance(TaskQuickPick);\n\t\t\ttaskQuickPick.handleSettingOption(selection.settingType);\n\t\t} else if (selection.folder && (this._contextService.getWorkbenchState() !== WorkbenchState.EMPTY)) {\n\t\t\tthis._openTaskFile(selection.folder.toResource('.vscode/tasks.json'), TaskSourceKind.Workspace);\n\t\t} else {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.User);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.User);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getTaskDescription(task: Task | ConfiguringTask): string | undefined {\n\t\tlet description: string | undefined;\n\t\tif (task._source.kind === TaskSourceKind.User) {\n\t\t\tdescription = nls.localize('taskQuickPick.userSettings', 'User');\n\t\t} else if (task._source.kind === TaskSourceKind.WorkspaceFile) {\n\t\t\tdescription = task.getWorkspaceFileName();\n\t\t} else if (this.needsFolderQualification()) {\n\t\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\t\tif (workspaceFolder) {\n\t\t\t\tdescription = workspaceFolder.name;\n\t\t\t}\n\t\t}\n\t\treturn description;\n\t}\n\n\tprivate async _runConfigureTasks(): Promise<void> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet taskPromise: Promise<TaskMap>;\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\ttaskPromise = this._getGroupedTasks();\n\t\t} else {\n\t\t\ttaskPromise = Promise.resolve(new TaskMap());\n\t\t}\n\n\t\tconst stats = this._contextService.getWorkspace().folders.map<Promise<IFileStatWithPartialMetadata | undefined>>((folder) => {\n\t\t\treturn this._fileService.stat(folder.toResource('.vscode/tasks.json')).then(stat => stat, () => undefined);\n\t\t});\n\n\t\tconst createLabel = nls.localize('TaskService.createJsonFile', 'Create tasks.json file from template');\n\t\tconst openLabel = nls.localize('TaskService.openJsonFile', 'Open tasks.json file');\n\t\tconst tokenSource = new CancellationTokenSource();\n\t\tconst cancellationToken: CancellationToken = tokenSource.token;\n\t\tconst entries = Promise.all(stats).then((stats) => {\n\t\t\treturn taskPromise.then((taskMap) => {\n\t\t\t\tconst entries: QuickPickInput<TaskQuickPickEntryType>[] = [];\n\t\t\t\tlet configuredCount = 0;\n\t\t\t\tlet tasks = taskMap.all();\n\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\ttasks = tasks.sort((a, b) => a._label.localeCompare(b._label));\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tconst entry = { label: TaskQuickPick.getTaskLabelWithIcon(task), task, description: this.getTaskDescription(task), detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\t\t\t\tTaskQuickPick.applyColorStyles(task, entry, this._themeService);\n\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\tconfiguredCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst needsCreateOrOpen = (configuredCount === 0);\n\t\t\t\t// If the only configured tasks are user tasks, then we should also show the option to create from a template.\n\t\t\t\tif (needsCreateOrOpen || (taskMap.get(USER_TASKS_GROUP_KEY).length === configuredCount)) {\n\t\t\t\t\tconst label = stats[0] !== undefined ? openLabel : createLabel;\n\t\t\t\t\tif (entries.length) {\n\t\t\t\t\t\tentries.push({ type: 'separator' });\n\t\t\t\t\t}\n\t\t\t\t\tentries.push({ label, folder: this._contextService.getWorkspace().folders[0] });\n\t\t\t\t}\n\t\t\t\tif ((entries.length === 1) && !needsCreateOrOpen) {\n\t\t\t\t\ttokenSource.cancel();\n\t\t\t\t}\n\t\t\t\treturn entries;\n\t\t\t});\n\t\t});\n\n\t\tconst timeout: boolean = await Promise.race([new Promise<boolean>((resolve) => {\n\t\t\tentries.then(() => resolve(false));\n\t\t}), new Promise<boolean>((resolve) => {\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tclearTimeout(timer);\n\t\t\t\tresolve(true);\n\t\t\t}, 200);\n\t\t})]);\n\n\t\tif (!timeout && ((await entries).length === 1) && this._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\tconst entry: any = (await entries)[0];\n\t\t\tif (entry.task) {\n\t\t\t\tthis._handleSelection(entry);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst entriesWithSettings = entries.then(resolvedEntries => {\n\t\t\tresolvedEntries.push(...TaskQuickPick.allSettingEntries(this._configurationService));\n\t\t\treturn resolvedEntries;\n\t\t});\n\n\t\tthis._quickInputService.pick(entriesWithSettings,\n\t\t\t{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }, cancellationToken).\n\t\t\tthen(async (selection) => {\n\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\t// canceled when there's only one task\n\t\t\t\t\tconst task = (await entries)[0];\n\t\t\t\t\tif ((<any>task).task) {\n\t\t\t\t\t\tselection = <TaskQuickPickEntryType>task;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._handleSelection(selection);\n\t\t\t});\n\t}\n\n\tprivate _runConfigureDefaultBuildTask(): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst entries: QuickPickInput<TaskQuickPickEntryType>[] = [];\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: TaskQuickPickEntryType | undefined;\n\t\t\t\tthis._showIgnoredFoldersMessage().then(async () => {\n\t\t\t\t\tconst { globGroupTasks } = await this._getGlobTasks(TaskGroup.Build._id);\n\t\t\t\t\tlet defaultTasks = globGroupTasks;\n\t\t\t\t\tif (!defaultTasks?.length) {\n\t\t\t\t\t\tdefaultTasks = this._getDefaultTasks(tasks, false);\n\t\t\t\t\t}\n\t\t\t\t\tlet defaultBuildTask;\n\t\t\t\t\tif (defaultTasks.length === 1) {\n\t\t\t\t\t\tconst group: string | TaskGroup | undefined = defaultTasks[0].configurationProperties.group;\n\t\t\t\t\t\tif (group) {\n\t\t\t\t\t\t\tif (typeof group === 'string' && group === TaskGroup.Build._id) {\n\t\t\t\t\t\t\t\tdefaultBuildTask = defaultTasks[0];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdefaultBuildTask = defaultTasks[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tif (task === defaultBuildTask) {\n\t\t\t\t\t\t\tconst label = nls.localize('TaskService.defaultBuildTaskExists', '{0} is already marked as the default build task', TaskQuickPick.getTaskLabelWithIcon(task, task.getQualifiedLabel()));\n\t\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\t\tselectedEntry = { label, task, description: this.getTaskDescription(task), detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\t\t\t\t\tTaskQuickPick.applyColorStyles(task, selectedEntry, this._themeService);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst entry = { label: TaskQuickPick.getTaskLabelWithIcon(task), task, description: this.getTaskDescription(task), detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\t\t\t\t\tTaskQuickPick.applyColorStyles(task, entry, this._themeService);\n\t\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (selectedEntry) {\n\t\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t\t}\n\t\t\t\t\tconst tokenSource = new CancellationTokenSource();\n\t\t\t\t\tconst cancellationToken: CancellationToken = tokenSource.token;\n\t\t\t\t\tthis._quickInputService.pick(entries,\n\t\t\t\t\t\t{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }, cancellationToken).\n\t\t\t\t\t\tthen(async (entry) => {\n\t\t\t\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\t// canceled when there's only one task\n\t\t\t\t\t\t\t\tconst task = (await entries)[0];\n\t\t\t\t\t\t\t\tif ((<any>task).task) {\n\t\t\t\t\t\t\t\t\tentry = <TaskQuickPickEntryType>task;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry && 'task' in entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif ((task === undefined) || (task === null)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'build', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'build' }, false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tthis._quickInputService.pick(entries, {\n\t\t\t\t\t\tplaceHolder: nls.localize('TaskService.pickDefaultBuildTask', 'Select the task to be used as the default build task')\n\t\t\t\t\t}).\n\t\t\t\t\t\tthen((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry && 'task' in entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif ((task === undefined) || (task === null)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'build', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'build' }, false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}));\n\t\t} else {\n\t\t\tthis._runConfigureTasks();\n\t\t}\n\t}\n\n\tprivate _runConfigureDefaultTestTask(): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: ITaskQuickPickEntry;\n\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst taskGroup: TaskGroup | undefined = TaskGroup.from(task.configurationProperties.group);\n\t\t\t\t\tif (taskGroup && taskGroup.isDefault && taskGroup._id === TaskGroup.Test._id) {\n\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (selectedTask) {\n\t\t\t\t\tselectedEntry = {\n\t\t\t\t\t\tlabel: nls.localize('TaskService.defaultTestTaskExists', '{0} is already marked as the default test task.', selectedTask.getQualifiedLabel()),\n\t\t\t\t\t\ttask: selectedTask,\n\t\t\t\t\t\tdetail: this._showDetail() ? selectedTask.configurationProperties.detail : undefined\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis._showQuickPick(tasks,\n\t\t\t\t\t\tnls.localize('TaskService.pickDefaultTestTask', 'Select the task to be used as the default test task'), undefined, true, false, selectedEntry).then((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif (!task) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'test', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'test' }, false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}));\n\t\t} else {\n\t\t\tthis._runConfigureTasks();\n\t\t}\n\t}\n\n\tpublic async runShowTasks(): Promise<void> {\n\t\tconst activeTasksPromise: Promise<Task[]> = this.getActiveTasks();\n\t\tconst activeTasks: Task[] = await activeTasksPromise;\n\t\tlet group: string | undefined;\n\t\tif (activeTasks.length === 1) {\n\t\t\tthis._taskSystem!.revealTask(activeTasks[0]);\n\t\t} else if (activeTasks.length && activeTasks.every((task) => {\n\t\t\tif (InMemoryTask.is(task)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!group) {\n\t\t\t\tgroup = task.command.presentation?.group;\n\t\t\t}\n\t\t\treturn task.command.presentation?.group && (task.command.presentation.group === group);\n\t\t})) {\n\t\t\tthis._taskSystem!.revealTask(activeTasks[0]);\n\t\t} else {\n\t\t\tthis._showQuickPick(activeTasksPromise,\n\t\t\t\tnls.localize('TaskService.pickShowTask', 'Select the task to show its output'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskIsRunning', 'No task is running'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\tfalse, true\n\t\t\t).then((entry) => {\n\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._taskSystem!.revealTask(task);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _createTasksDotOld(folder: IWorkspaceFolder): Promise<[URI, URI] | undefined> {\n\t\tconst tasksFile = folder.toResource('.vscode/tasks.json');\n\t\tif (await this._fileService.exists(tasksFile)) {\n\t\t\tconst oldFile = tasksFile.with({ path: `${tasksFile.path}.old` });\n\t\t\tawait this._fileService.copy(tasksFile, oldFile, true);\n\t\t\treturn [oldFile, tasksFile];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _upgradeTask(task: Task, suppressTaskName: boolean, globalConfig: { windows?: ICommandUpgrade; osx?: ICommandUpgrade; linux?: ICommandUpgrade }): TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined {\n\t\tif (!CustomTask.is(task)) {\n\t\t\treturn;\n\t\t}\n\t\tconst configElement: any = {\n\t\t\tlabel: task._label\n\t\t};\n\t\tconst oldTaskTypes = new Set(['gulp', 'jake', 'grunt']);\n\t\tif (Types.isString(task.command.name) && oldTaskTypes.has(task.command.name)) {\n\t\t\tconfigElement.type = task.command.name;\n\t\t\tconfigElement.task = task.command.args![0];\n\t\t} else {\n\t\t\tif (task.command.runtime === RuntimeType.Shell) {\n\t\t\t\tconfigElement.type = RuntimeType.toString(RuntimeType.Shell);\n\t\t\t}\n\t\t\tif (task.command.name && !suppressTaskName && !globalConfig.windows?.command && !globalConfig.osx?.command && !globalConfig.linux?.command) {\n\t\t\t\tconfigElement.command = task.command.name;\n\t\t\t} else if (suppressTaskName) {\n\t\t\t\tconfigElement.command = task._source.config.element.command;\n\t\t\t}\n\t\t\tif (task.command.args && (!Array.isArray(task.command.args) || (task.command.args.length > 0))) {\n\t\t\t\tif (!globalConfig.windows?.args && !globalConfig.osx?.args && !globalConfig.linux?.args) {\n\t\t\t\t\tconfigElement.args = task.command.args;\n\t\t\t\t} else {\n\t\t\t\t\tconfigElement.args = task._source.config.element.args;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (task.configurationProperties.presentation) {\n\t\t\tconfigElement.presentation = task.configurationProperties.presentation;\n\t\t}\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconfigElement.isBackground = task.configurationProperties.isBackground;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers) {\n\t\t\tconfigElement.problemMatcher = task._source.config.element.problemMatcher;\n\t\t}\n\t\tif (task.configurationProperties.group) {\n\t\t\tconfigElement.group = task.configurationProperties.group;\n\t\t}\n\n\t\ttask._source.config.element = configElement;\n\t\tconst tempTask = new CustomTask(task._id, task._source, task._label, task.type, task.command, task.hasDefinedMatchers, task.runOptions, task.configurationProperties);\n\t\tconst configTask = this._createCustomizableTask(tempTask);\n\t\tif (configTask) {\n\t\t\treturn configTask;\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate async _upgrade(): Promise<void> {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tthis._register(Event.once(this._workspaceTrustManagementService.onDidChangeTrust)(isTrusted => {\n\t\t\t\tif (isTrusted) {\n\t\t\t\t\tthis._upgrade();\n\t\t\t\t}\n\t\t\t}));\n\t\t\treturn;\n\t\t}\n\n\t\tconst tasks = await this._getGroupedTasks();\n\t\tconst fileDiffs: [URI, URI][] = [];\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tconst diff = await this._createTasksDotOld(folder);\n\t\t\tif (diff) {\n\t\t\t\tfileDiffs.push(diff);\n\t\t\t}\n\t\t\tif (!diff) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst configTasks: (TaskConfig.ICustomTask | TaskConfig.IConfiguringTask)[] = [];\n\t\t\tconst suppressTaskName = !!this._configurationService.getValue(TasksSchemaProperties.SuppressTaskName, { resource: folder.uri });\n\t\t\tconst globalConfig = {\n\t\t\t\twindows: <ICommandUpgrade>this._configurationService.getValue(TasksSchemaProperties.Windows, { resource: folder.uri }),\n\t\t\t\tosx: <ICommandUpgrade>this._configurationService.getValue(TasksSchemaProperties.Osx, { resource: folder.uri }),\n\t\t\t\tlinux: <ICommandUpgrade>this._configurationService.getValue(TasksSchemaProperties.Linux, { resource: folder.uri })\n\t\t\t};\n\t\t\ttasks.get(folder).forEach(task => {\n\t\t\t\tconst configTask = this._upgradeTask(task, suppressTaskName, globalConfig);\n\t\t\t\tif (configTask) {\n\t\t\t\t\tconfigTasks.push(configTask);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._taskSystem = undefined;\n\t\t\tthis._workspaceTasksPromise = undefined;\n\t\t\tawait this._writeConfiguration(folder, 'tasks.tasks', configTasks);\n\t\t\tawait this._writeConfiguration(folder, 'tasks.version', '2.0.0');\n\t\t\tif (this._configurationService.getValue(TasksSchemaProperties.ShowOutput, { resource: folder.uri })) {\n\t\t\t\tawait this._configurationService.updateValue(TasksSchemaProperties.ShowOutput, undefined, { resource: folder.uri });\n\t\t\t}\n\t\t\tif (this._configurationService.getValue(TasksSchemaProperties.IsShellCommand, { resource: folder.uri })) {\n\t\t\t\tawait this._configurationService.updateValue(TasksSchemaProperties.IsShellCommand, undefined, { resource: folder.uri });\n\t\t\t}\n\t\t\tif (this._configurationService.getValue(TasksSchemaProperties.SuppressTaskName, { resource: folder.uri })) {\n\t\t\t\tawait this._configurationService.updateValue(TasksSchemaProperties.SuppressTaskName, undefined, { resource: folder.uri });\n\t\t\t}\n\t\t}\n\t\tthis._updateSetup();\n\n\t\tthis._notificationService.prompt(Severity.Warning,\n\t\t\tfileDiffs.length === 1 ?\n\t\t\t\tnls.localize('taskService.upgradeVersion', \"The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diff to review the upgrade.\")\n\t\t\t\t: nls.localize('taskService.upgradeVersionPlural', \"The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diffs to review the upgrade.\"),\n\t\t\t[{\n\t\t\t\tlabel: fileDiffs.length === 1 ? nls.localize('taskService.openDiff', \"Open diff\") : nls.localize('taskService.openDiffs', \"Open diffs\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tfor (const upgrade of fileDiffs) {\n\t\t\t\t\t\tawait this._editorService.openEditor({\n\t\t\t\t\t\t\toriginal: { resource: upgrade[0] },\n\t\t\t\t\t\t\tmodified: { resource: upgrade[1] }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ConfigureTaskAction", "defaults", "json", "tasks", "task", "SaveBeforeRunConfigOptions", "result", "error", "key", "folder", "entries", "resource", "stats"]
}
