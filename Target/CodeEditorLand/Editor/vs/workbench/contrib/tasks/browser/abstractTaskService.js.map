{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/abstractTaskService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../../base/common/actions.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport * as glob from \"../../../../base/common/glob.js\";\nimport * as json from \"../../../../base/common/json.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttype IReference,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache, Touch } from \"../../../../base/common/map.js\";\nimport * as Objects from \"../../../../base/common/objects.js\";\nimport {\n\tValidationState,\n\tValidationStatus,\n} from \"../../../../base/common/parsers.js\";\nimport * as Platform from \"../../../../base/common/platform.js\";\nimport { TerminateResponseCode } from \"../../../../base/common/processes.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport * as Types from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as UUID from \"../../../../base/common/uuid.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tCommandsRegistry,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tIFileService,\n\ttype IFileStatWithPartialMetadata,\n} from \"../../../../platform/files/common/files.js\";\nimport { IMarkerService } from \"../../../../platform/markers/common/markers.js\";\nimport {\n\ttype IProgressOptions,\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\ttype INamedProblemMatcher,\n\tProblemMatcherRegistry,\n} from \"../common/problemMatcher.js\";\n\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\n\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\n\nimport {\n\ttype IWorkspace,\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n\tWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { Markers } from \"../../markers/common/markers.js\";\n\nimport {\n\ttype IOutputChannel,\n\tIOutputService,\n} from \"../../../services/output/common/output.js\";\nimport { ITextFileService } from \"../../../services/textfile/common/textfiles.js\";\n\nimport {\n\tITerminalGroupService,\n\tITerminalService,\n} from \"../../terminal/browser/terminal.js\";\nimport { ITerminalProfileResolverService } from \"../../terminal/common/terminal.js\";\n\nimport {\n\tCustomExecutionSupportedContext,\n\ttype ICustomizationProperties,\n\ttype IProblemMatcherRunOptions,\n\ttype ITaskFilter,\n\ttype ITaskProvider,\n\ttype ITaskService,\n\ttype IWorkspaceFolderTaskResult,\n\tProcessExecutionSupportedContext,\n\tServerlessWebContext,\n\tShellExecutionSupportedContext,\n\tTaskCommandsRegistered,\n\tTaskExecutionSupportedContext,\n} from \"../common/taskService.js\";\nimport {\n\ttype ITaskExecuteResult,\n\ttype ITaskResolver,\n\ttype ITaskSummary,\n\ttype ITaskSystem,\n\ttype ITaskSystemInfo,\n\ttype ITaskTerminateResponse,\n\tTaskError,\n\tTaskErrors,\n\tTaskExecuteKind,\n} from \"../common/taskSystem.js\";\nimport { getTemplates as getTaskTemplates } from \"../common/taskTemplates.js\";\nimport {\n\tConfiguringTask,\n\tContributedTask,\n\tCustomTask,\n\tExecutionEngine,\n\ttype ITaskEvent,\n\ttype ITaskIdentifier,\n\ttype ITaskSet,\n\tInMemoryTask,\n\tJsonSchemaVersion,\n\tKeyedTaskIdentifier,\n\tRuntimeType,\n\tTASK_RUNNING_STATE,\n\ttype Task,\n\tTaskDefinition,\n\tTaskEventKind,\n\tTaskGroup,\n\tTaskRunSource,\n\tTaskSettingId,\n\tTaskSorter,\n\tTaskSourceKind,\n\tTasksSchemaProperties,\n\tUSER_TASKS_GROUP_KEY,\n} from \"../common/tasks.js\";\n\nimport * as TaskConfig from \"../common/taskConfiguration.js\";\nimport { TerminalTaskSystem } from \"./terminalTaskSystem.js\";\n\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n\ttype QuickPickInput,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\n\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { TaskDefinitionRegistry } from \"../common/taskDefinitionRegistry.js\";\n\nimport { raceTimeout } from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { toFormattedString } from \"../../../../base/common/jsonFormatter.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { TextEditorSelectionRevealType } from \"../../../../platform/editor/common/editor.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { TerminalExitReason } from \"../../../../platform/terminal/common/terminal.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tIWorkspaceTrustManagementService,\n\tIWorkspaceTrustRequestService,\n} from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { VirtualWorkspaceContext } from \"../../../common/contextkeys.js\";\nimport { EditorResourceAccessor, SaveReason } from \"../../../common/editor.js\";\nimport { IViewDescriptorService } from \"../../../common/views.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport {\n\tILifecycleService,\n\tShutdownReason,\n\tStartupKind,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport { IPathService } from \"../../../services/path/common/pathService.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport {\n\ttype ITaskQuickPickEntry,\n\tQUICKOPEN_DETAIL_CONFIG,\n\tQUICKOPEN_SKIP_CONFIG,\n\tTaskQuickPick,\n\tconfigureTaskIcon,\n\tisWorkspaceFolder,\n} from \"./taskQuickPick.js\";\n\nconst QUICKOPEN_HISTORY_LIMIT_CONFIG = \"task.quickOpen.history\";\nconst PROBLEM_MATCHER_NEVER_CONFIG = \"task.problemMatchers.neverPrompt\";\nconst USE_SLOW_PICKER = \"task.quickOpen.showAll\";\n\nexport namespace ConfigureTaskAction {\n\texport const ID = \"workbench.action.tasks.configureTaskRunner\";\n\texport const TEXT = nls.localize2(\n\t\t\"ConfigureTaskRunnerAction.label\",\n\t\t\"Configure Task\",\n\t);\n}\n\nexport type TaskQuickPickEntryType =\n\t| (IQuickPickItem & { task: Task })\n\t| (IQuickPickItem & { folder: IWorkspaceFolder })\n\t| (IQuickPickItem & { settingType: string });\n\nclass ProblemReporter implements TaskConfig.IProblemReporter {\n\tprivate _validationStatus: ValidationStatus;\n\n\tconstructor(private _outputChannel: IOutputChannel) {\n\t\tthis._validationStatus = new ValidationStatus();\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Info;\n\t\tthis._outputChannel.append(message + \"\\n\");\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Warning;\n\t\tthis._outputChannel.append(message + \"\\n\");\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Error;\n\t\tthis._outputChannel.append(message + \"\\n\");\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Fatal;\n\t\tthis._outputChannel.append(message + \"\\n\");\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n}\n\nexport interface IWorkspaceFolderConfigurationResult {\n\tworkspaceFolder: IWorkspaceFolder;\n\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined;\n\thasErrors: boolean;\n}\n\ninterface ICommandUpgrade {\n\tcommand?: string;\n\targs?: string[];\n}\n\nclass TaskMap {\n\tprivate _store: Map<string, Task[]> = new Map();\n\n\tpublic forEach(callback: (value: Task[], folder: string) => void): void {\n\t\tthis._store.forEach(callback);\n\t}\n\n\tpublic static getKey(\n\t\tworkspaceFolder: IWorkspace | IWorkspaceFolder | string,\n\t): string {\n\t\tlet key: string | undefined;\n\t\tif (Types.isString(workspaceFolder)) {\n\t\t\tkey = workspaceFolder;\n\t\t} else {\n\t\t\tconst uri: URI | null | undefined = isWorkspaceFolder(\n\t\t\t\tworkspaceFolder,\n\t\t\t)\n\t\t\t\t? workspaceFolder.uri\n\t\t\t\t: workspaceFolder.configuration;\n\t\t\tkey = uri ? uri.toString() : \"\";\n\t\t}\n\t\treturn key;\n\t}\n\n\tpublic get(\n\t\tworkspaceFolder: IWorkspace | IWorkspaceFolder | string,\n\t): Task[] {\n\t\tconst key = TaskMap.getKey(workspaceFolder);\n\t\tlet result: Task[] | undefined = this._store.get(key);\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tthis._store.set(key, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic add(\n\t\tworkspaceFolder: IWorkspace | IWorkspaceFolder | string,\n\t\t...task: Task[]\n\t): void {\n\t\tconst key = TaskMap.getKey(workspaceFolder);\n\t\tlet values = this._store.get(key);\n\t\tif (!values) {\n\t\t\tvalues = [];\n\t\t\tthis._store.set(key, values);\n\t\t}\n\t\tvalues.push(...task);\n\t}\n\n\tpublic all(): Task[] {\n\t\tconst result: Task[] = [];\n\t\tthis._store.forEach((values) => result.push(...values));\n\t\treturn result;\n\t}\n}\n\nexport abstract class AbstractTaskService\n\textends Disposable\n\timplements ITaskService\n{\n\t// private static autoDetectTelemetryName: string = 'taskServer.autoDetect';\n\tprivate static readonly RecentlyUsedTasks_Key =\n\t\t\"workbench.tasks.recentlyUsedTasks\";\n\tprivate static readonly RecentlyUsedTasks_KeyV2 =\n\t\t\"workbench.tasks.recentlyUsedTasks2\";\n\tprivate static readonly PersistentTasks_Key =\n\t\t\"workbench.tasks.persistentTasks\";\n\tprivate static readonly IgnoreTask010DonotShowAgain_key =\n\t\t\"workbench.tasks.ignoreTask010Shown\";\n\n\tpublic _serviceBrand: undefined;\n\tpublic static OutputChannelId = \"tasks\";\n\tpublic static OutputChannelLabel: string = nls.localize(\"tasks\", \"Tasks\");\n\n\tprivate static _nextHandle = 0;\n\n\tprivate _tasksReconnected = false;\n\tprivate _schemaVersion: JsonSchemaVersion | undefined;\n\tprivate _executionEngine: ExecutionEngine | undefined;\n\tprivate _workspaceFolders: IWorkspaceFolder[] | undefined;\n\tprivate _workspace: IWorkspace | undefined;\n\tprivate _ignoredWorkspaceFolders: IWorkspaceFolder[] | undefined;\n\tprivate _showIgnoreMessage?: boolean;\n\tprivate _providers: Map<number, ITaskProvider>;\n\tprivate _providerTypes: Map<number, string>;\n\tprotected _taskSystemInfos: Map<string, ITaskSystemInfo[]>;\n\n\tprotected _workspaceTasksPromise?: Promise<\n\t\tMap<string, IWorkspaceFolderTaskResult>\n\t>;\n\tprotected readonly _whenTaskSystemReady: Promise<void>;\n\n\tprotected _taskSystem?: ITaskSystem;\n\tprotected _taskSystemListeners?: IDisposable[] = [];\n\tprivate _recentlyUsedTasksV1: LRUCache<string, string> | undefined;\n\tprivate _recentlyUsedTasks: LRUCache<string, string> | undefined;\n\n\tprivate _persistentTasks: LRUCache<string, string> | undefined;\n\n\tprotected _taskRunningState: IContextKey<boolean>;\n\n\tprotected _outputChannel: IOutputChannel;\n\tprotected readonly _onDidStateChange: Emitter<ITaskEvent>;\n\tprivate _waitForAllSupportedExecutions: Promise<void>;\n\tprivate _onDidRegisterSupportedExecutions: Emitter<void> = new Emitter();\n\tprivate _onDidRegisterAllSupportedExecutions: Emitter<void> = new Emitter();\n\tprivate _onDidChangeTaskSystemInfo: Emitter<void> = new Emitter();\n\tprivate _willRestart = false;\n\tpublic onDidChangeTaskSystemInfo: Event<void> =\n\t\tthis._onDidChangeTaskSystemInfo.event;\n\tprivate _onDidReconnectToTasks: Emitter<void> = new Emitter();\n\tpublic onDidReconnectToTasks: Event<void> =\n\t\tthis._onDidReconnectToTasks.event;\n\tprivate _onDidChangeTaskConfig: Emitter<void> = new Emitter();\n\tpublic onDidChangeTaskConfig: Event<void> =\n\t\tthis._onDidChangeTaskConfig.event;\n\tpublic get isReconnected(): boolean {\n\t\treturn this._tasksReconnected;\n\t}\n\tprivate _onDidChangeTaskProviders = this._register(new Emitter<void>());\n\tpublic onDidChangeTaskProviders = this._onDidChangeTaskProviders.event;\n\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IMarkerService protected readonly _markerService: IMarkerService,\n\t\t@IOutputService protected readonly _outputService: IOutputService,\n\t\t@IPaneCompositePartService\n\t\tprivate readonly _paneCompositeService: IPaneCompositePartService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IWorkspaceContextService\n\t\tprotected readonly _contextService: IWorkspaceContextService,\n\t\t@ITelemetryService\n\t\tprotected readonly _telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IModelService protected readonly _modelService: IModelService,\n\t\t@IExtensionService\n\t\tprivate readonly _extensionService: IExtensionService,\n\t\t@IQuickInputService\n\t\tprivate readonly _quickInputService: IQuickInputService,\n\t\t@IConfigurationResolverService\n\t\tprotected readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ITerminalGroupService\n\t\tprivate readonly _terminalGroupService: ITerminalGroupService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IDialogService protected readonly _dialogService: IDialogService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@IContextKeyService\n\t\tprotected readonly _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalProfileResolverService\n\t\tprivate readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@ITextModelService\n\t\tprivate readonly _textModelResolverService: ITextModelService,\n\t\t@IPreferencesService\n\t\tprivate readonly _preferencesService: IPreferencesService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkspaceTrustRequestService\n\t\tprivate readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IWorkspaceTrustManagementService\n\t\tprivate readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ILifecycleService\n\t\tprivate readonly _lifecycleService: ILifecycleService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._whenTaskSystemReady = Event.toPromise(\n\t\t\tthis.onDidChangeTaskSystemInfo,\n\t\t);\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._taskSystem = undefined;\n\t\tthis._taskSystemListeners = undefined;\n\t\tthis._outputChannel = this._outputService.getChannel(\n\t\t\tAbstractTaskService.OutputChannelId,\n\t\t)!;\n\t\tthis._providers = new Map<number, ITaskProvider>();\n\t\tthis._providerTypes = new Map<number, string>();\n\t\tthis._taskSystemInfos = new Map<string, ITaskSystemInfo[]>();\n\t\tthis._register(\n\t\t\tthis._contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\t\tconst folderSetup = this._computeWorkspaceFolderSetup();\n\t\t\t\tif (this.executionEngine !== folderSetup[2]) {\n\t\t\t\t\tthis._disposeTaskSystemListeners();\n\t\t\t\t\tthis._taskSystem = undefined;\n\t\t\t\t}\n\t\t\t\tthis._updateSetup(folderSetup);\n\t\t\t\treturn this._updateWorkspaceTasks(TaskRunSource.FolderOpen);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\t!e.affectsConfiguration(\"tasks\") ||\n\t\t\t\t\t(!this._taskSystem && !this._workspaceTasksPromise)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!this._taskSystem ||\n\t\t\t\t\tthis._taskSystem instanceof TerminalTaskSystem\n\t\t\t\t) {\n\t\t\t\t\tthis._outputChannel.clear();\n\t\t\t\t}\n\n\t\t\t\tif (e.affectsConfiguration(TaskSettingId.Reconnection)) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this._configurationService.getValue(\n\t\t\t\t\t\t\tTaskSettingId.Reconnection,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._persistentTasks?.clear();\n\t\t\t\t\t\tthis._storageService.remove(\n\t\t\t\t\t\t\tAbstractTaskService.PersistentTasks_Key,\n\t\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._setTaskLRUCacheLimit();\n\t\t\t\tawait this._updateWorkspaceTasks(\n\t\t\t\t\tTaskRunSource.ConfigurationChange,\n\t\t\t\t);\n\t\t\t\tthis._onDidChangeTaskConfig.fire();\n\t\t\t}),\n\t\t);\n\t\tthis._taskRunningState = TASK_RUNNING_STATE.bindTo(_contextKeyService);\n\t\tthis._onDidStateChange = this._register(new Emitter());\n\t\tthis._registerCommands().then(() =>\n\t\t\tTaskCommandsRegistered.bindTo(this._contextKeyService).set(true),\n\t\t);\n\t\tServerlessWebContext.bindTo(this._contextKeyService).set(\n\t\t\tPlatform.isWeb &&\n\t\t\t\t!remoteAgentService.getConnection()?.remoteAuthority,\n\t\t);\n\t\tthis._configurationResolverService.contributeVariable(\n\t\t\t\"defaultBuildTask\",\n\t\t\tasync (): Promise<string | undefined> => {\n\t\t\t\t// delay provider activation, we might find a single default build task in the tasks.json file\n\t\t\t\tlet tasks = await this._getTasksForGroup(TaskGroup.Build, true);\n\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\tconst defaults = this._getDefaultTasks(tasks);\n\t\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\t\treturn defaults[0]._label;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// activate all providers, we haven't found the default build task in the tasks.json file\n\t\t\t\ttasks = await this._getTasksForGroup(TaskGroup.Build);\n\t\t\t\tconst defaults = this._getDefaultTasks(tasks);\n\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\treturn defaults[0]._label;\n\t\t\t\t} else if (defaults.length) {\n\t\t\t\t\ttasks = defaults;\n\t\t\t\t}\n\n\t\t\t\tlet entry: ITaskQuickPickEntry | null | undefined;\n\t\t\t\tif (tasks && tasks.length > 0) {\n\t\t\t\t\tentry = await this._showQuickPick(\n\t\t\t\t\t\ttasks,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"TaskService.pickBuildTaskForLabel\",\n\t\t\t\t\t\t\t\"Select the build task (there is no default build task defined)\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst task: Task | undefined | null = entry\n\t\t\t\t\t? entry.task\n\t\t\t\t\t: undefined;\n\t\t\t\tif (!task) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn task._label;\n\t\t\t},\n\t\t);\n\t\tthis._register(\n\t\t\tthis._lifecycleService.onBeforeShutdown((e) => {\n\t\t\t\tthis._willRestart = e.reason !== ShutdownReason.RELOAD;\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onDidStateChange((e) => {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\"taskEvent\", \"Task Event kind: {0}\", e.kind),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\tif (e.kind === TaskEventKind.Changed) {\n\t\t\t\t\t// no-op\n\t\t\t\t} else if (\n\t\t\t\t\t(this._willRestart ||\n\t\t\t\t\t\t(e.kind === TaskEventKind.Terminated &&\n\t\t\t\t\t\t\te.exitReason === TerminalExitReason.User)) &&\n\t\t\t\t\te.taskId\n\t\t\t\t) {\n\t\t\t\t\tconst key = e.__task.getKey();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\tthis.removePersistentTask(key);\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\te.kind === TaskEventKind.Start &&\n\t\t\t\t\te.__task &&\n\t\t\t\t\te.__task.getWorkspaceFolder()\n\t\t\t\t) {\n\t\t\t\t\tthis._setPersistentTask(e.__task);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._waitForAllSupportedExecutions = new Promise((resolve) => {\n\t\t\tEvent.once(this._onDidRegisterAllSupportedExecutions.event)(() =>\n\t\t\t\tresolve(),\n\t\t\t);\n\t\t});\n\t\tif (this._terminalService.getReconnectedTerminals(\"Task\")?.length) {\n\t\t\tthis._attemptTaskReconnection();\n\t\t} else {\n\t\t\tthis._terminalService.whenConnected.then(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis._terminalService.getReconnectedTerminals(\"Task\")\n\t\t\t\t\t\t?.length\n\t\t\t\t) {\n\t\t\t\t\tthis._attemptTaskReconnection();\n\t\t\t\t} else {\n\t\t\t\t\tthis._tasksReconnected = true;\n\t\t\t\t\tthis._onDidReconnectToTasks.fire();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis._upgrade();\n\t}\n\n\tpublic registerSupportedExecutions(\n\t\tcustom?: boolean,\n\t\tshell?: boolean,\n\t\tprocess?: boolean,\n\t) {\n\t\tif (custom !== undefined) {\n\t\t\tconst customContext = CustomExecutionSupportedContext.bindTo(\n\t\t\t\tthis._contextKeyService,\n\t\t\t);\n\t\t\tcustomContext.set(custom);\n\t\t}\n\t\tconst isVirtual = !!VirtualWorkspaceContext.getValue(\n\t\t\tthis._contextKeyService,\n\t\t);\n\t\tif (shell !== undefined) {\n\t\t\tconst shellContext = ShellExecutionSupportedContext.bindTo(\n\t\t\t\tthis._contextKeyService,\n\t\t\t);\n\t\t\tshellContext.set(shell && !isVirtual);\n\t\t}\n\t\tif (process !== undefined) {\n\t\t\tconst processContext = ProcessExecutionSupportedContext.bindTo(\n\t\t\t\tthis._contextKeyService,\n\t\t\t);\n\t\t\tprocessContext.set(process && !isVirtual);\n\t\t}\n\t\t// update tasks so an incomplete list isn't returned when getWorkspaceTasks is called\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._onDidRegisterSupportedExecutions.fire();\n\t\tif (Platform.isWeb || (custom && shell && process)) {\n\t\t\tthis._onDidRegisterAllSupportedExecutions.fire();\n\t\t}\n\t}\n\n\tprivate _attemptTaskReconnection(): void {\n\t\tif (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow) {\n\t\t\tthis._log(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.skippingReconnection\",\n\t\t\t\t\t\"Startup kind not window reload, setting connected and removing persistent tasks\",\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis._tasksReconnected = true;\n\t\t\tthis._storageService.remove(\n\t\t\t\tAbstractTaskService.PersistentTasks_Key,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\t\tif (\n\t\t\t!this._configurationService.getValue(TaskSettingId.Reconnection) ||\n\t\t\tthis._tasksReconnected\n\t\t) {\n\t\t\tthis._log(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.notConnecting\",\n\t\t\t\t\t\"Setting tasks connected configured value {0}, tasks were already reconnected {1}\",\n\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\tTaskSettingId.Reconnection,\n\t\t\t\t\t),\n\t\t\t\t\tthis._tasksReconnected,\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis._tasksReconnected = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._log(\n\t\t\tnls.localize(\n\t\t\t\t\"TaskService.reconnecting\",\n\t\t\t\t\"Reconnecting to running tasks...\",\n\t\t\t),\n\t\t\ttrue,\n\t\t);\n\t\tthis.getWorkspaceTasks(TaskRunSource.Reconnect).then(async () => {\n\t\t\tthis._tasksReconnected = await this._reconnectTasks();\n\t\t\tthis._log(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.reconnected\",\n\t\t\t\t\t\"Reconnected to running tasks.\",\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis._onDidReconnectToTasks.fire();\n\t\t});\n\t}\n\n\tprivate async _reconnectTasks(): Promise<boolean> {\n\t\tconst tasks = await this.getSavedTasks(\"persistent\");\n\t\tif (!tasks.length) {\n\t\t\tthis._log(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.noTasks\",\n\t\t\t\t\t\"No persistent tasks to reconnect.\",\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn true;\n\t\t}\n\t\tconst taskLabels = tasks.map((task) => task._label).join(\", \");\n\t\tthis._log(\n\t\t\tnls.localize(\n\t\t\t\t\"TaskService.reconnectingTasks\",\n\t\t\t\t\"Reconnecting to {0} tasks...\",\n\t\t\t\ttaskLabels,\n\t\t\t),\n\t\t\ttrue,\n\t\t);\n\t\tfor (const task of tasks) {\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\tconst resolved = await this.tryResolveTask(task);\n\t\t\t\tif (resolved) {\n\t\t\t\t\tthis.run(resolved, undefined, TaskRunSource.Reconnect);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.run(task, undefined, TaskRunSource.Reconnect);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic get supportsMultipleTaskExecutions(): boolean {\n\t\treturn this.inTerminal();\n\t}\n\n\tprivate async _registerCommands(): Promise<void> {\n\t\tCommandsRegistry.registerCommand({\n\t\t\tid: \"workbench.action.tasks.runTask\",\n\t\t\thandler: async (accessor, arg) => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tawait this._runTaskCommand(arg);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: \"Run Task\",\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\tisOptional: true,\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"runTask.arg\",\n\t\t\t\t\t\t\t\"Filters the tasks shown in the quickpick\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"runTask.label\",\n\t\t\t\t\t\t\t\t\t\t\"The task's label or a term to filter by\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"runTask.type\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"The contributed task type\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\ttask: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"runTask.task\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"The task's label or a term to filter by\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.reRunTask\",\n\t\t\tasync (accessor, arg) => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._reRunTaskCommand();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.restartTask\",\n\t\t\tasync (accessor, arg) => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runRestartTaskCommand(arg);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.terminate\",\n\t\t\tasync (accessor, arg) => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runTerminateCommand(arg);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.showLog\",\n\t\t\t() => {\n\t\t\t\tthis._showOutput(undefined, true);\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.build\",\n\t\t\tasync () => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runBuildCommand();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.test\",\n\t\t\tasync () => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runTestCommand();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.configureTaskRunner\",\n\t\t\tasync () => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.configureDefaultBuildTask\",\n\t\t\tasync () => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runConfigureDefaultBuildTask();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.configureDefaultTestTask\",\n\t\t\tasync () => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tthis._runConfigureDefaultTestTask();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.showTasks\",\n\t\t\tasync () => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\treturn this.runShowTasks();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.toggleProblems\",\n\t\t\t() =>\n\t\t\t\tthis._commandService.executeCommand(\n\t\t\t\t\tMarkers.TOGGLE_MARKERS_VIEW_ACTION_ID,\n\t\t\t\t),\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.openUserTasks\",\n\t\t\tasync () => {\n\t\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.User);\n\t\t\t\tif (resource) {\n\t\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.User);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tCommandsRegistry.registerCommand(\n\t\t\t\"workbench.action.tasks.openWorkspaceFileTasks\",\n\t\t\tasync () => {\n\t\t\t\tconst resource = this._getResourceForKind(\n\t\t\t\t\tTaskSourceKind.WorkspaceFile,\n\t\t\t\t);\n\t\t\t\tif (resource) {\n\t\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.WorkspaceFile);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate get workspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._workspaceFolders) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._workspaceFolders!;\n\t}\n\n\tprivate get ignoredWorkspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._ignoredWorkspaceFolders) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._ignoredWorkspaceFolders!;\n\t}\n\n\tprotected get executionEngine(): ExecutionEngine {\n\t\tif (this._executionEngine === undefined) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._executionEngine!;\n\t}\n\n\tprivate get schemaVersion(): JsonSchemaVersion {\n\t\tif (this._schemaVersion === undefined) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._schemaVersion!;\n\t}\n\n\tprivate get showIgnoreMessage(): boolean {\n\t\tif (this._showIgnoreMessage === undefined) {\n\t\t\tthis._showIgnoreMessage = !this._storageService.getBoolean(\n\t\t\t\tAbstractTaskService.IgnoreTask010DonotShowAgain_key,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\t\treturn this._showIgnoreMessage;\n\t}\n\n\tprivate _getActivationEvents(type: string | undefined): string[] {\n\t\tconst result: string[] = [];\n\t\tresult.push(\"onCommand:workbench.action.tasks.runTask\");\n\t\tif (type) {\n\t\t\t// send a specific activation event for this task type\n\t\t\tresult.push(`onTaskType:${type}`);\n\t\t} else {\n\t\t\t// send activation events for all task types\n\t\t\tfor (const definition of TaskDefinitionRegistry.all()) {\n\t\t\t\tresult.push(`onTaskType:${definition.taskType}`);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _activateTaskProviders(\n\t\ttype: string | undefined,\n\t): Promise<void> {\n\t\t// We need to first wait for extensions to be registered because we might read\n\t\t// the `TaskDefinitionRegistry` in case `type` is `undefined`\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tthis._log(\"Activating task providers \" + (type ?? \"all\"));\n\t\tawait raceTimeout(\n\t\t\tPromise.all(\n\t\t\t\tthis._getActivationEvents(type).map((activationEvent) =>\n\t\t\t\t\tthis._extensionService.activateByEvent(activationEvent),\n\t\t\t\t),\n\t\t\t),\n\t\t\t5000,\n\t\t\t() =>\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"Timed out activating extensions for task providers\",\n\t\t\t\t),\n\t\t);\n\t}\n\n\tprivate _updateSetup(\n\t\tsetup?: [\n\t\t\tIWorkspaceFolder[],\n\t\t\tIWorkspaceFolder[],\n\t\t\tExecutionEngine,\n\t\t\tJsonSchemaVersion,\n\t\t\tIWorkspace | undefined,\n\t\t],\n\t): void {\n\t\tif (!setup) {\n\t\t\tsetup = this._computeWorkspaceFolderSetup();\n\t\t}\n\t\tthis._workspaceFolders = setup[0];\n\t\tif (this._ignoredWorkspaceFolders) {\n\t\t\tif (this._ignoredWorkspaceFolders.length !== setup[1].length) {\n\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t} else {\n\t\t\t\tconst set: Set<string> = new Set();\n\t\t\t\tthis._ignoredWorkspaceFolders.forEach((folder) =>\n\t\t\t\t\tset.add(folder.uri.toString()),\n\t\t\t\t);\n\t\t\t\tfor (const folder of setup[1]) {\n\t\t\t\t\tif (!set.has(folder.uri.toString())) {\n\t\t\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._ignoredWorkspaceFolders = setup[1];\n\t\tthis._executionEngine = setup[2];\n\t\tthis._schemaVersion = setup[3];\n\t\tthis._workspace = setup[4];\n\t}\n\n\tprotected _showOutput(\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t\tuserRequested?: boolean,\n\t): void {\n\t\tif (\n\t\t\t!VirtualWorkspaceContext.getValue(this._contextKeyService) &&\n\t\t\t(runSource === TaskRunSource.User ||\n\t\t\t\trunSource === TaskRunSource.ConfigurationChange)\n\t\t) {\n\t\t\tif (userRequested) {\n\t\t\t\tthis._outputService.showChannel(this._outputChannel.id, true);\n\t\t\t} else {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"taskServiceOutputPrompt\",\n\t\t\t\t\t\t\"There are task errors. See the output for details.\",\n\t\t\t\t\t),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize(\"showOutput\", \"Show output\"),\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\tthis._outputService.showChannel(\n\t\t\t\t\t\t\t\t\tthis._outputChannel.id,\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _disposeTaskSystemListeners(): void {\n\t\tif (this._taskSystemListeners) {\n\t\t\tdispose(this._taskSystemListeners);\n\t\t\tthis._taskSystemListeners = undefined;\n\t\t}\n\t}\n\n\tpublic registerTaskProvider(\n\t\tprovider: ITaskProvider,\n\t\ttype: string,\n\t): IDisposable {\n\t\tif (!provider) {\n\t\t\treturn {\n\t\t\t\tdispose: () => {},\n\t\t\t};\n\t\t}\n\t\tconst handle = AbstractTaskService._nextHandle++;\n\t\tthis._providers.set(handle, provider);\n\t\tthis._providerTypes.set(handle, type);\n\t\tthis._onDidChangeTaskProviders.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._providers.delete(handle);\n\t\t\t\tthis._providerTypes.delete(handle);\n\t\t\t\tthis._onDidChangeTaskProviders.fire();\n\t\t\t},\n\t\t};\n\t}\n\n\tget hasTaskSystemInfo(): boolean {\n\t\tconst infosCount = Array.from(this._taskSystemInfos.values()).flat()\n\t\t\t.length;\n\t\t// If there's a remoteAuthority, then we end up with 2 taskSystemInfos,\n\t\t// one for each extension host.\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\treturn infosCount > 1;\n\t\t}\n\t\treturn infosCount > 0;\n\t}\n\n\tpublic registerTaskSystem(key: string, info: ITaskSystemInfo): void {\n\t\t// Ideally the Web caller of registerRegisterTaskSystem would use the correct key.\n\t\t// However, the caller doesn't know about the workspace folders at the time of the call, even though we know about them here.\n\t\tif (info.platform === Platform.Platform.Web) {\n\t\t\tkey = this.workspaceFolders.length\n\t\t\t\t? this.workspaceFolders[0].uri.scheme\n\t\t\t\t: key;\n\t\t}\n\t\tif (this._taskSystemInfos.has(key)) {\n\t\t\tconst infos = this._taskSystemInfos.get(key)!;\n\t\t\tif (info.platform === Platform.Platform.Web) {\n\t\t\t\t// Web infos should be pushed last.\n\t\t\t\tinfos.push(info);\n\t\t\t} else {\n\t\t\t\tinfos.unshift(info);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._taskSystemInfos.set(key, [info]);\n\t\t}\n\n\t\tif (this.hasTaskSystemInfo) {\n\t\t\tthis._onDidChangeTaskSystemInfo.fire();\n\t\t}\n\t}\n\n\tprivate _getTaskSystemInfo(key: string): ITaskSystemInfo | undefined {\n\t\tconst infos = this._taskSystemInfos.get(key);\n\t\treturn infos && infos.length ? infos[0] : undefined;\n\t}\n\n\tpublic extensionCallbackTaskComplete(\n\t\ttask: Task,\n\t\tresult: number,\n\t): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\treturn this._taskSystem.customExecutionComplete(task, result);\n\t}\n\n\t/**\n\t * Get a subset of workspace tasks that match a certain predicate.\n\t */\n\tprivate async _findWorkspaceTasks(\n\t\tpredicate: (\n\t\t\ttask: ConfiguringTask | Task,\n\t\t\tworkspaceFolder: IWorkspaceFolder,\n\t\t) => boolean,\n\t): Promise<(ConfiguringTask | Task)[]> {\n\t\tconst result: (ConfiguringTask | Task)[] = [];\n\n\t\tconst tasks = await this.getWorkspaceTasks();\n\t\tfor (const [, workspaceTasks] of tasks) {\n\t\t\tif (workspaceTasks.configurations) {\n\t\t\t\tfor (const taskName in workspaceTasks.configurations\n\t\t\t\t\t.byIdentifier) {\n\t\t\t\t\tconst task =\n\t\t\t\t\t\tworkspaceTasks.configurations.byIdentifier[taskName];\n\t\t\t\t\tif (predicate(task, workspaceTasks.workspaceFolder)) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (workspaceTasks.set) {\n\t\t\t\tfor (const task of workspaceTasks.set.tasks) {\n\t\t\t\t\tif (predicate(task, workspaceTasks.workspaceFolder)) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _findWorkspaceTasksInGroup(\n\t\tgroup: TaskGroup,\n\t\tisDefault: boolean,\n\t): Promise<(ConfiguringTask | Task)[]> {\n\t\treturn this._findWorkspaceTasks((task) => {\n\t\t\tconst taskGroup = task.configurationProperties.group;\n\t\t\tif (taskGroup && typeof taskGroup !== \"string\") {\n\t\t\t\treturn (\n\t\t\t\t\ttaskGroup._id === group._id &&\n\t\t\t\t\t(!isDefault || !!taskGroup.isDefault)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tpublic async getTask(\n\t\tfolder: IWorkspace | IWorkspaceFolder | string,\n\t\tidentifier: string | ITaskIdentifier,\n\t\tcompareId = false,\n\t\ttype: string | undefined = undefined,\n\t): Promise<Task | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tconst name = Types.isString(folder)\n\t\t\t? folder\n\t\t\t: isWorkspaceFolder(folder)\n\t\t\t\t? folder.name\n\t\t\t\t: folder.configuration\n\t\t\t\t\t? resources.basename(folder.configuration)\n\t\t\t\t\t: undefined;\n\t\tif (\n\t\t\tthis.ignoredWorkspaceFolders.some(\n\t\t\t\t(ignored) => ignored.name === name,\n\t\t\t)\n\t\t) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TaskServer.folderIgnored\",\n\t\t\t\t\t\t\"The folder {0} is ignored since it uses task version 0.1.0\",\n\t\t\t\t\t\tname,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst key: string | KeyedTaskIdentifier | undefined = Types.isString(\n\t\t\tidentifier,\n\t\t)\n\t\t\t? identifier\n\t\t\t: TaskDefinition.createTaskIdentifier(identifier, console);\n\n\t\tif (key === undefined) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Try to find the task in the workspace\n\t\tconst requestedFolder = TaskMap.getKey(folder);\n\t\tconst matchedTasks = await this._findWorkspaceTasks(\n\t\t\t(task, workspaceFolder) => {\n\t\t\t\tconst taskFolder = TaskMap.getKey(workspaceFolder);\n\t\t\t\tif (\n\t\t\t\t\ttaskFolder !== requestedFolder &&\n\t\t\t\t\ttaskFolder !== USER_TASKS_GROUP_KEY\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn task.matches(key, compareId);\n\t\t\t},\n\t\t);\n\t\tmatchedTasks.sort((task) =>\n\t\t\ttask._source.kind === TaskSourceKind.Extension ? 1 : -1,\n\t\t);\n\t\tif (matchedTasks.length > 0) {\n\t\t\t// Nice, we found a configured task!\n\t\t\tconst task = matchedTasks[0];\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\treturn this.tryResolveTask(task);\n\t\t\t} else {\n\t\t\t\treturn task;\n\t\t\t}\n\t\t}\n\n\t\t// We didn't find the task, so we need to ask all resolvers about it\n\t\tconst map = await this._getGroupedTasks({ type });\n\t\tlet values = map.get(folder);\n\t\tvalues = values.concat(map.get(USER_TASKS_GROUP_KEY));\n\n\t\tif (!values) {\n\t\t\treturn undefined;\n\t\t}\n\t\tvalues = values\n\t\t\t.filter((task) => task.matches(key, compareId))\n\t\t\t.sort((task) =>\n\t\t\t\ttask._source.kind === TaskSourceKind.Extension ? 1 : -1,\n\t\t\t);\n\t\treturn values.length > 0 ? values[0] : undefined;\n\t}\n\n\tpublic async tryResolveTask(\n\t\tconfiguringTask: ConfiguringTask,\n\t): Promise<Task | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tawait this._activateTaskProviders(configuringTask.type);\n\t\tlet matchingProvider: ITaskProvider | undefined;\n\t\tlet matchingProviderUnavailable = false;\n\t\tfor (const [handle, provider] of this._providers) {\n\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\tif (configuringTask.type === providerType) {\n\t\t\t\tif (\n\t\t\t\t\tproviderType &&\n\t\t\t\t\t!this._isTaskProviderEnabled(providerType)\n\t\t\t\t) {\n\t\t\t\t\tmatchingProviderUnavailable = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmatchingProvider = provider;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!matchingProvider) {\n\t\t\tif (matchingProviderUnavailable) {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TaskService.providerUnavailable\",\n\t\t\t\t\t\t\"Warning: {0} tasks are unavailable in the current environment.\",\n\t\t\t\t\t\tconfiguringTask.configures.type,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to resolve the task first\n\t\ttry {\n\t\t\tconst resolvedTask =\n\t\t\t\tawait matchingProvider.resolveTask(configuringTask);\n\t\t\tif (resolvedTask && resolvedTask._id === configuringTask._id) {\n\t\t\t\treturn TaskConfig.createCustomTask(\n\t\t\t\t\tresolvedTask,\n\t\t\t\t\tconfiguringTask,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Ignore errors. The task could not be provided by any of the providers.\n\t\t}\n\n\t\t// The task couldn't be resolved. Instead, use the less efficient provideTask.\n\t\tconst tasks = await this.tasks({ type: configuringTask.type });\n\t\tfor (const task of tasks) {\n\t\t\tif (task._id === configuringTask._id) {\n\t\t\t\treturn TaskConfig.createCustomTask(\n\t\t\t\t\t<ContributedTask>task,\n\t\t\t\t\tconfiguringTask,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprotected abstract _versionAndEngineCompatible(\n\t\tfilter?: ITaskFilter,\n\t): boolean;\n\n\tpublic async tasks(filter?: ITaskFilter): Promise<Task[]> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn [];\n\t\t}\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn Promise.resolve<Task[]>([]);\n\t\t}\n\t\treturn this._getGroupedTasks(filter).then((map) =>\n\t\t\tthis.applyFilterToTaskMap(filter, map),\n\t\t);\n\t}\n\n\tpublic async getKnownTasks(filter?: ITaskFilter): Promise<Task[]> {\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn Promise.resolve<Task[]>([]);\n\t\t}\n\n\t\treturn this._getGroupedTasks(filter, true, true).then((map) =>\n\t\t\tthis.applyFilterToTaskMap(filter, map),\n\t\t);\n\t}\n\n\tpublic taskTypes(): string[] {\n\t\tconst types: string[] = [];\n\t\tif (this._isProvideTasksEnabled()) {\n\t\t\tfor (const definition of TaskDefinitionRegistry.all()) {\n\t\t\t\tif (this._isTaskProviderEnabled(definition.taskType)) {\n\t\t\t\t\ttypes.push(definition.taskType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn types;\n\t}\n\n\tpublic createSorter(): TaskSorter {\n\t\treturn new TaskSorter(\n\t\t\tthis._contextService.getWorkspace()\n\t\t\t\t? this._contextService.getWorkspace().folders\n\t\t\t\t: [],\n\t\t);\n\t}\n\n\tprivate _isActive(): Promise<boolean> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\treturn this._taskSystem.isActive();\n\t}\n\n\tpublic async getActiveTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._taskSystem.getActiveTasks();\n\t}\n\n\tpublic async getBusyTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._taskSystem.getBusyTasks();\n\t}\n\n\tpublic getRecentlyUsedTasksV1(): LRUCache<string, string> {\n\t\tif (this._recentlyUsedTasksV1) {\n\t\t\treturn this._recentlyUsedTasksV1;\n\t\t}\n\t\tconst quickOpenHistoryLimit =\n\t\t\tthis._configurationService.getValue<number>(\n\t\t\t\tQUICKOPEN_HISTORY_LIMIT_CONFIG,\n\t\t\t);\n\t\tthis._recentlyUsedTasksV1 = new LRUCache<string, string>(\n\t\t\tquickOpenHistoryLimit,\n\t\t);\n\n\t\tconst storageValue = this._storageService.get(\n\t\t\tAbstractTaskService.RecentlyUsedTasks_Key,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: string[] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasksV1.set(value, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasksV1;\n\t}\n\n\tprivate applyFilterToTaskMap(\n\t\tfilter: ITaskFilter | undefined,\n\t\tmap: TaskMap,\n\t): Task[] {\n\t\tif (!filter || !filter.type) {\n\t\t\treturn map.all();\n\t\t}\n\t\tconst result: Task[] = [];\n\t\tmap.forEach((tasks) => {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tif (\n\t\t\t\t\tContributedTask.is(task) &&\n\t\t\t\t\t(task.defines.type === filter.type ||\n\t\t\t\t\t\ttask._source.label === filter.type)\n\t\t\t\t) {\n\t\t\t\t\tresult.push(task);\n\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst customizes = task.customizes();\n\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate _getTasksFromStorage(\n\t\ttype: \"persistent\" | \"historical\",\n\t): LRUCache<string, string> {\n\t\treturn type === \"persistent\"\n\t\t\t? this._getPersistentTasks()\n\t\t\t: this._getRecentTasks();\n\t}\n\n\tprivate _getRecentTasks(): LRUCache<string, string> {\n\t\tif (this._recentlyUsedTasks) {\n\t\t\treturn this._recentlyUsedTasks;\n\t\t}\n\t\tconst quickOpenHistoryLimit =\n\t\t\tthis._configurationService.getValue<number>(\n\t\t\t\tQUICKOPEN_HISTORY_LIMIT_CONFIG,\n\t\t\t);\n\t\tthis._recentlyUsedTasks = new LRUCache<string, string>(\n\t\t\tquickOpenHistoryLimit,\n\t\t);\n\n\t\tconst storageValue = this._storageService.get(\n\t\t\tAbstractTaskService.RecentlyUsedTasks_KeyV2,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: [string, string][] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasks.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasks;\n\t}\n\n\tprivate _getPersistentTasks(): LRUCache<string, string> {\n\t\tif (this._persistentTasks) {\n\t\t\tthis._log(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"taskService.gettingCachedTasks\",\n\t\t\t\t\t\"Returning cached tasks {0}\",\n\t\t\t\t\tthis._persistentTasks.size,\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn this._persistentTasks;\n\t\t}\n\t\t//TODO: should this # be configurable?\n\t\tthis._persistentTasks = new LRUCache<string, string>(10);\n\t\tconst storageValue = this._storageService.get(\n\t\t\tAbstractTaskService.PersistentTasks_Key,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: [string, string][] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._persistentTasks.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._persistentTasks;\n\t}\n\n\tprivate _getFolderFromTaskKey(key: string): {\n\t\tfolder: string | undefined;\n\t\tisWorkspaceFile: boolean | undefined;\n\t} {\n\t\tconst keyValue: { folder: string | undefined; id: string | undefined } =\n\t\t\tJSON.parse(key);\n\t\treturn {\n\t\t\tfolder: keyValue.folder,\n\t\t\tisWorkspaceFile: keyValue.id?.endsWith(\n\t\t\t\tTaskSourceKind.WorkspaceFile,\n\t\t\t),\n\t\t};\n\t}\n\n\tpublic async getSavedTasks(\n\t\ttype: \"persistent\" | \"historical\",\n\t): Promise<(Task | ConfiguringTask)[]> {\n\t\tconst folderMap: IStringDictionary<IWorkspaceFolder> =\n\t\t\tObject.create(null);\n\t\tthis.workspaceFolders.forEach((folder) => {\n\t\t\tfolderMap[folder.uri.toString()] = folder;\n\t\t});\n\t\tconst folderToTasksMap: Map<string, any> = new Map();\n\t\tconst workspaceToTaskMap: Map<string, any> = new Map();\n\t\tconst storedTasks = this._getTasksFromStorage(type);\n\t\tconst tasks: (Task | ConfiguringTask)[] = [];\n\t\tthis._log(\n\t\t\tnls.localize(\n\t\t\t\t\"taskService.getSavedTasks\",\n\t\t\t\t\"Fetching tasks from task storage.\",\n\t\t\t),\n\t\t\ttrue,\n\t\t);\n\t\tfunction addTaskToMap(\n\t\t\tmap: Map<string, any>,\n\t\t\tfolder: string | undefined,\n\t\t\ttask: any,\n\t\t) {\n\t\t\tif (folder && !map.has(folder)) {\n\t\t\t\tmap.set(folder, []);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tfolder &&\n\t\t\t\t(folderMap[folder] || folder === USER_TASKS_GROUP_KEY) &&\n\t\t\t\ttask\n\t\t\t) {\n\t\t\t\tmap.get(folder).push(task);\n\t\t\t}\n\t\t}\n\t\tfor (const entry of storedTasks.entries()) {\n\t\t\ttry {\n\t\t\t\tconst key = entry[0];\n\t\t\t\tconst task = JSON.parse(entry[1]);\n\t\t\t\tconst folderInfo = this._getFolderFromTaskKey(key);\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"taskService.getSavedTasks.reading\",\n\t\t\t\t\t\t\"Reading tasks from task storage, {0}, {1}, {2}\",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\ttask,\n\t\t\t\t\t\tfolderInfo.folder,\n\t\t\t\t\t),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\taddTaskToMap(\n\t\t\t\t\tfolderInfo.isWorkspaceFile\n\t\t\t\t\t\t? workspaceToTaskMap\n\t\t\t\t\t\t: folderToTasksMap,\n\t\t\t\t\tfolderInfo.folder,\n\t\t\t\t\ttask,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"taskService.getSavedTasks.error\",\n\t\t\t\t\t\t\"Fetching a task from task storage failed: {0}.\",\n\t\t\t\t\t\terror,\n\t\t\t\t\t),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst readTasksMap: Map<string, Task | ConfiguringTask> = new Map();\n\n\t\tasync function readTasks(\n\t\t\tthat: AbstractTaskService,\n\t\t\tmap: Map<string, any>,\n\t\t\tisWorkspaceFile: boolean,\n\t\t) {\n\t\t\tfor (const key of map.keys()) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> =\n\t\t\t\t\tObject.create(null);\n\t\t\t\tconst taskConfigSource = folderMap[key]\n\t\t\t\t\t? isWorkspaceFile\n\t\t\t\t\t\t? TaskConfig.TaskConfigSource.WorkspaceFile\n\t\t\t\t\t\t: TaskConfig.TaskConfigSource.TasksJson\n\t\t\t\t\t: TaskConfig.TaskConfigSource.User;\n\t\t\t\tawait that._computeTasksForSingleConfig(\n\t\t\t\t\tfolderMap[key] ?? (await that._getAFolder()),\n\t\t\t\t\t{\n\t\t\t\t\t\tversion: \"2.0.0\",\n\t\t\t\t\t\ttasks: map.get(key),\n\t\t\t\t\t},\n\t\t\t\t\tTaskRunSource.System,\n\t\t\t\t\tcustom,\n\t\t\t\t\tcustomized,\n\t\t\t\t\ttaskConfigSource,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\tcustom.forEach((task) => {\n\t\t\t\t\tconst taskKey = task.getKey();\n\t\t\t\t\tif (taskKey) {\n\t\t\t\t\t\treadTasksMap.set(taskKey, task);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tconst taskKey = customized[configuration].getKey();\n\t\t\t\t\tif (taskKey) {\n\t\t\t\t\t\treadTasksMap.set(taskKey, customized[configuration]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait readTasks(this, folderToTasksMap, false);\n\t\tawait readTasks(this, workspaceToTaskMap, true);\n\t\tfor (const key of storedTasks.keys()) {\n\t\t\tif (readTasksMap.has(key)) {\n\t\t\t\ttasks.push(readTasksMap.get(key)!);\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"taskService.getSavedTasks.resolved\",\n\t\t\t\t\t\t\"Resolved task {0}\",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"taskService.getSavedTasks.unresolved\",\n\t\t\t\t\t\t\"Unable to resolve task {0} \",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn tasks;\n\t}\n\n\tpublic removeRecentlyUsedTask(taskRecentlyUsedKey: string) {\n\t\tif (this._getTasksFromStorage(\"historical\").has(taskRecentlyUsedKey)) {\n\t\t\tthis._getTasksFromStorage(\"historical\").delete(taskRecentlyUsedKey);\n\t\t\tthis._saveRecentlyUsedTasks();\n\t\t}\n\t}\n\n\tpublic removePersistentTask(key: string) {\n\t\tthis._log(\n\t\t\tnls.localize(\n\t\t\t\t\"taskService.removePersistentTask\",\n\t\t\t\t\"Removing persistent task {0}\",\n\t\t\t\tkey,\n\t\t\t),\n\t\t\ttrue,\n\t\t);\n\t\tif (this._getTasksFromStorage(\"persistent\").has(key)) {\n\t\t\tthis._getTasksFromStorage(\"persistent\").delete(key);\n\t\t\tthis._savePersistentTasks();\n\t\t}\n\t}\n\n\tprivate _setTaskLRUCacheLimit() {\n\t\tconst quickOpenHistoryLimit =\n\t\t\tthis._configurationService.getValue<number>(\n\t\t\t\tQUICKOPEN_HISTORY_LIMIT_CONFIG,\n\t\t\t);\n\t\tif (this._recentlyUsedTasks) {\n\t\t\tthis._recentlyUsedTasks.limit = quickOpenHistoryLimit;\n\t\t}\n\t}\n\n\tprivate async _setRecentlyUsedTask(task: Task): Promise<void> {\n\t\tlet key = task.getKey();\n\t\tif (!InMemoryTask.is(task) && key) {\n\t\t\tconst customizations = this._createCustomizableTask(task);\n\t\t\tif (ContributedTask.is(task) && customizations) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> =\n\t\t\t\t\tObject.create(null);\n\t\t\t\tawait this._computeTasksForSingleConfig(\n\t\t\t\t\ttask._source.workspaceFolder ?? this.workspaceFolders[0],\n\t\t\t\t\t{\n\t\t\t\t\t\tversion: \"2.0.0\",\n\t\t\t\t\t\ttasks: [customizations],\n\t\t\t\t\t},\n\t\t\t\t\tTaskRunSource.System,\n\t\t\t\t\tcustom,\n\t\t\t\t\tcustomized,\n\t\t\t\t\tTaskConfig.TaskConfigSource.TasksJson,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tkey = customized[configuration].getKey()!;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._getTasksFromStorage(\"historical\").set(\n\t\t\t\tkey,\n\t\t\t\tJSON.stringify(customizations),\n\t\t\t);\n\t\t\tthis._saveRecentlyUsedTasks();\n\t\t}\n\t}\n\n\tprivate _saveRecentlyUsedTasks(): void {\n\t\tif (!this._recentlyUsedTasks) {\n\t\t\treturn;\n\t\t}\n\t\tconst quickOpenHistoryLimit =\n\t\t\tthis._configurationService.getValue<number>(\n\t\t\t\tQUICKOPEN_HISTORY_LIMIT_CONFIG,\n\t\t\t);\n\t\t// setting history limit to 0 means no LRU sorting\n\t\tif (quickOpenHistoryLimit === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet keys = [...this._recentlyUsedTasks.keys()];\n\t\tif (keys.length > quickOpenHistoryLimit) {\n\t\t\tkeys = keys.slice(0, quickOpenHistoryLimit);\n\t\t}\n\t\tconst keyValues: [string, string][] = [];\n\t\tfor (const key of keys) {\n\t\t\tkeyValues.push([\n\t\t\t\tkey,\n\t\t\t\tthis._recentlyUsedTasks.get(key, Touch.None)!,\n\t\t\t]);\n\t\t}\n\t\tthis._storageService.store(\n\t\t\tAbstractTaskService.RecentlyUsedTasks_KeyV2,\n\t\t\tJSON.stringify(keyValues),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate async _setPersistentTask(task: Task): Promise<void> {\n\t\tif (!this._configurationService.getValue(TaskSettingId.Reconnection)) {\n\t\t\treturn;\n\t\t}\n\t\tlet key = task.getKey();\n\t\tif (!InMemoryTask.is(task) && key) {\n\t\t\tconst customizations = this._createCustomizableTask(task);\n\t\t\tif (ContributedTask.is(task) && customizations) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> =\n\t\t\t\t\tObject.create(null);\n\t\t\t\tawait this._computeTasksForSingleConfig(\n\t\t\t\t\ttask._source.workspaceFolder ?? this.workspaceFolders[0],\n\t\t\t\t\t{\n\t\t\t\t\t\tversion: \"2.0.0\",\n\t\t\t\t\t\ttasks: [customizations],\n\t\t\t\t\t},\n\t\t\t\t\tTaskRunSource.System,\n\t\t\t\t\tcustom,\n\t\t\t\t\tcustomized,\n\t\t\t\t\tTaskConfig.TaskConfigSource.TasksJson,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tkey = customized[configuration].getKey()!;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!task.configurationProperties.isBackground) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._log(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"taskService.setPersistentTask\",\n\t\t\t\t\t\"Setting persistent task {0}\",\n\t\t\t\t\tkey,\n\t\t\t\t),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis._getTasksFromStorage(\"persistent\").set(\n\t\t\t\tkey,\n\t\t\t\tJSON.stringify(customizations),\n\t\t\t);\n\t\t\tthis._savePersistentTasks();\n\t\t}\n\t}\n\n\tprivate _savePersistentTasks(): void {\n\t\tthis._persistentTasks = this._getTasksFromStorage(\"persistent\");\n\t\tconst keys = [...this._persistentTasks.keys()];\n\t\tconst keyValues: [string, string][] = [];\n\t\tfor (const key of keys) {\n\t\t\tkeyValues.push([key, this._persistentTasks.get(key, Touch.None)!]);\n\t\t}\n\t\tthis._log(\n\t\t\tnls.localize(\n\t\t\t\t\"savePersistentTask\",\n\t\t\t\t\"Saving persistent tasks: {0}\",\n\t\t\t\tkeys.join(\", \"),\n\t\t\t),\n\t\t\ttrue,\n\t\t);\n\t\tthis._storageService.store(\n\t\t\tAbstractTaskService.PersistentTasks_Key,\n\t\t\tJSON.stringify(keyValues),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate _openDocumentation(): void {\n\t\tthis._openerService.open(\n\t\t\tURI.parse(\n\t\t\t\t\"https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async _findSingleWorkspaceTaskOfGroup(\n\t\tgroup: TaskGroup,\n\t): Promise<ITaskSummary | undefined> {\n\t\tconst tasksOfGroup = await this._findWorkspaceTasksInGroup(group, true);\n\t\tif (\n\t\t\ttasksOfGroup.length === 1 &&\n\t\t\ttypeof tasksOfGroup[0].configurationProperties.group !== \"string\" &&\n\t\t\ttasksOfGroup[0].configurationProperties.group?.isDefault\n\t\t) {\n\t\t\tlet resolvedTask: Task | undefined;\n\t\t\tif (ConfiguringTask.is(tasksOfGroup[0])) {\n\t\t\t\tresolvedTask = await this.tryResolveTask(tasksOfGroup[0]);\n\t\t\t} else {\n\t\t\t\tresolvedTask = tasksOfGroup[0];\n\t\t\t}\n\t\t\tif (resolvedTask) {\n\t\t\t\treturn this.run(resolvedTask, undefined, TaskRunSource.User);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _build(): Promise<ITaskSummary> {\n\t\tconst tryBuildShortcut = await this._findSingleWorkspaceTaskOfGroup(\n\t\t\tTaskGroup.Build,\n\t\t);\n\t\tif (tryBuildShortcut) {\n\t\t\treturn tryBuildShortcut;\n\t\t}\n\t\treturn this._getGroupedTasksAndExecute();\n\t}\n\n\tprivate async _runTest(): Promise<ITaskSummary> {\n\t\tconst tryTestShortcut = await this._findSingleWorkspaceTaskOfGroup(\n\t\t\tTaskGroup.Test,\n\t\t);\n\t\tif (tryTestShortcut) {\n\t\t\treturn tryTestShortcut;\n\t\t}\n\n\t\treturn this._getGroupedTasksAndExecute(true);\n\t}\n\n\tprivate async _getGroupedTasksAndExecute(\n\t\ttest?: boolean,\n\t): Promise<ITaskSummary> {\n\t\tconst tasks = await this._getGroupedTasks();\n\t\tconst runnable = this._createRunnableTask(\n\t\t\ttasks,\n\t\t\ttest ? TaskGroup.Test : TaskGroup.Build,\n\t\t);\n\t\tif (!runnable || !runnable.task) {\n\t\t\tif (test) {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(\n\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"TaskService.noTestTask1\",\n\t\t\t\t\t\t\t\"No test task defined. Mark a task with 'isTestCommand' in the tasks.json file.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTaskErrors.NoTestTask,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(\n\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"TaskService.noTestTask2\",\n\t\t\t\t\t\t\t\"No test task defined. Mark a task with as a 'test' group in the tasks.json file.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTaskErrors.NoTestTask,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\tthrow new TaskError(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TaskService.noBuildTask1\",\n\t\t\t\t\t\t\"No build task defined. Mark a task with 'isBuildCommand' in the tasks.json file.\",\n\t\t\t\t\t),\n\t\t\t\t\tTaskErrors.NoBuildTask,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow new TaskError(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TaskService.noBuildTask2\",\n\t\t\t\t\t\t\"No build task defined. Mark a task with as a 'build' group in the tasks.json file.\",\n\t\t\t\t\t),\n\t\t\t\t\tTaskErrors.NoBuildTask,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tlet executeTaskResult: ITaskSummary;\n\t\ttry {\n\t\t\texecuteTaskResult = await this._executeTask(\n\t\t\t\trunnable.task,\n\t\t\t\trunnable.resolver,\n\t\t\t\tTaskRunSource.User,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\treturn executeTaskResult;\n\t}\n\n\tpublic async run(\n\t\ttask: Task | undefined,\n\t\toptions?: IProblemMatcherRunOptions,\n\t\trunSource: TaskRunSource = TaskRunSource.System,\n\t): Promise<ITaskSummary | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tif (!task) {\n\t\t\tthrow new TaskError(\n\t\t\t\tSeverity.Info,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskServer.noTask\",\n\t\t\t\t\t\"Task to execute is undefined\",\n\t\t\t\t),\n\t\t\t\tTaskErrors.TaskNotFound,\n\t\t\t);\n\t\t}\n\t\tconst resolver = this._createResolver();\n\t\tlet executeTaskResult: ITaskSummary | undefined;\n\t\ttry {\n\t\t\tif (\n\t\t\t\toptions &&\n\t\t\t\toptions.attachProblemMatcher &&\n\t\t\t\tthis._shouldAttachProblemMatcher(task) &&\n\t\t\t\t!InMemoryTask.is(task)\n\t\t\t) {\n\t\t\t\tconst taskToExecute = await this._attachProblemMatcher(task);\n\t\t\t\tif (taskToExecute) {\n\t\t\t\t\texecuteTaskResult = await this._executeTask(\n\t\t\t\t\t\ttaskToExecute,\n\t\t\t\t\t\tresolver,\n\t\t\t\t\t\trunSource,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texecuteTaskResult = await this._executeTask(\n\t\t\t\t\ttask,\n\t\t\t\t\tresolver,\n\t\t\t\t\trunSource,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn executeTaskResult;\n\t\t} catch (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\tprivate _isProvideTasksEnabled(): boolean {\n\t\tconst settingValue = this._configurationService.getValue(\n\t\t\tTaskSettingId.AutoDetect,\n\t\t);\n\t\treturn settingValue === \"on\";\n\t}\n\n\tprivate _isProblemMatcherPromptEnabled(type?: string): boolean {\n\t\tconst settingValue = this._configurationService.getValue(\n\t\t\tPROBLEM_MATCHER_NEVER_CONFIG,\n\t\t);\n\t\tif (Types.isBoolean(settingValue)) {\n\t\t\treturn !settingValue;\n\t\t}\n\t\tif (type === undefined) {\n\t\t\treturn true;\n\t\t}\n\t\tconst settingValueMap: IStringDictionary<boolean> = settingValue as any;\n\t\treturn !settingValueMap[type];\n\t}\n\n\tprivate _getTypeForTask(task: Task): string {\n\t\tlet type: string;\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties =\n\t\t\t\ttask._source.config.element;\n\t\t\ttype = (<any>configProperties).type;\n\t\t} else {\n\t\t\ttype = task.getDefinition()!.type;\n\t\t}\n\t\treturn type;\n\t}\n\n\tprivate _shouldAttachProblemMatcher(task: Task): boolean {\n\t\tconst enabled = this._isProblemMatcherPromptEnabled(\n\t\t\tthis._getTypeForTask(task),\n\t\t);\n\t\tif (enabled === false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._canCustomize(task)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\ttask.configurationProperties.group !== undefined &&\n\t\t\ttask.configurationProperties.group !== TaskGroup.Build\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\ttask.configurationProperties.problemMatchers !== undefined &&\n\t\t\ttask.configurationProperties.problemMatchers.length > 0\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn (\n\t\t\t\t!task.hasDefinedMatchers &&\n\t\t\t\t!!task.configurationProperties.problemMatchers &&\n\t\t\t\ttask.configurationProperties.problemMatchers.length === 0\n\t\t\t);\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties =\n\t\t\t\ttask._source.config.element;\n\t\t\treturn (\n\t\t\t\tconfigProperties.problemMatcher === undefined &&\n\t\t\t\t!task.hasDefinedMatchers\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _updateNeverProblemMatcherSetting(\n\t\ttype: string,\n\t): Promise<void> {\n\t\tconst current = this._configurationService.getValue(\n\t\t\tPROBLEM_MATCHER_NEVER_CONFIG,\n\t\t);\n\t\tif (current === true) {\n\t\t\treturn;\n\t\t}\n\t\tlet newValue: IStringDictionary<boolean>;\n\t\tif (current !== false) {\n\t\t\tnewValue = <any>current;\n\t\t} else {\n\t\t\tnewValue = Object.create(null);\n\t\t}\n\t\tnewValue[type] = true;\n\t\treturn this._configurationService.updateValue(\n\t\t\tPROBLEM_MATCHER_NEVER_CONFIG,\n\t\t\tnewValue,\n\t\t);\n\t}\n\n\tprivate async _attachProblemMatcher(\n\t\ttask: ContributedTask | CustomTask,\n\t): Promise<Task | undefined> {\n\t\tinterface IProblemMatcherPickEntry extends IQuickPickItem {\n\t\t\tmatcher: INamedProblemMatcher | undefined;\n\t\t\tnever?: boolean;\n\t\t\tlearnMore?: boolean;\n\t\t\tsetting?: string;\n\t\t}\n\t\tlet entries: QuickPickInput<IProblemMatcherPickEntry>[] = [];\n\t\tfor (const key of ProblemMatcherRegistry.keys()) {\n\t\t\tconst matcher = ProblemMatcherRegistry.get(key);\n\t\t\tif (matcher.deprecated) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (matcher.name === matcher.label) {\n\t\t\t\tentries.push({ label: matcher.name, matcher: matcher });\n\t\t\t} else {\n\t\t\t\tentries.push({\n\t\t\t\t\tlabel: matcher.label,\n\t\t\t\t\tdescription: `$${matcher.name}`,\n\t\t\t\t\tmatcher: matcher,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (entries.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tentries = entries.sort((a, b) => {\n\t\t\tif (a.label && b.label) {\n\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\tentries.unshift({\n\t\t\ttype: \"separator\",\n\t\t\tlabel: nls.localize(\"TaskService.associate\", \"associate\"),\n\t\t});\n\t\tlet taskType: string;\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties =\n\t\t\t\ttask._source.config.element;\n\t\t\ttaskType = (<any>configProperties).type;\n\t\t} else {\n\t\t\ttaskType = task.getDefinition().type;\n\t\t}\n\t\tentries.unshift(\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"TaskService.attachProblemMatcher.continueWithout\",\n\t\t\t\t\t\"Continue without scanning the task output\",\n\t\t\t\t),\n\t\t\t\tmatcher: undefined,\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"TaskService.attachProblemMatcher.never\",\n\t\t\t\t\t\"Never scan the task output for this task\",\n\t\t\t\t),\n\t\t\t\tmatcher: undefined,\n\t\t\t\tnever: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"TaskService.attachProblemMatcher.neverType\",\n\t\t\t\t\t\"Never scan the task output for {0} tasks\",\n\t\t\t\t\ttaskType,\n\t\t\t\t),\n\t\t\t\tmatcher: undefined,\n\t\t\t\tsetting: taskType,\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"TaskService.attachProblemMatcher.learnMoreAbout\",\n\t\t\t\t\t\"Learn more about scanning the task output\",\n\t\t\t\t),\n\t\t\t\tmatcher: undefined,\n\t\t\t\tlearnMore: true,\n\t\t\t},\n\t\t);\n\t\tconst problemMatcher = await this._quickInputService.pick(entries, {\n\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\"selectProblemMatcher\",\n\t\t\t\t\"Select for which kind of errors and warnings to scan the task output\",\n\t\t\t),\n\t\t});\n\t\tif (!problemMatcher) {\n\t\t\treturn task;\n\t\t}\n\t\tif (problemMatcher.learnMore) {\n\t\t\tthis._openDocumentation();\n\t\t\treturn undefined;\n\t\t}\n\t\tif (problemMatcher.never) {\n\t\t\tthis.customize(task, { problemMatcher: [] }, true);\n\t\t\treturn task;\n\t\t}\n\t\tif (problemMatcher.matcher) {\n\t\t\tconst newTask = task.clone();\n\t\t\tconst matcherReference = `$${problemMatcher.matcher.name}`;\n\t\t\tconst properties: ICustomizationProperties = {\n\t\t\t\tproblemMatcher: [matcherReference],\n\t\t\t};\n\t\t\tnewTask.configurationProperties.problemMatchers = [\n\t\t\t\tmatcherReference,\n\t\t\t];\n\t\t\tconst matcher = ProblemMatcherRegistry.get(\n\t\t\t\tproblemMatcher.matcher.name,\n\t\t\t);\n\t\t\tif (matcher && matcher.watching !== undefined) {\n\t\t\t\tproperties.isBackground = true;\n\t\t\t\tnewTask.configurationProperties.isBackground = true;\n\t\t\t}\n\t\t\tthis.customize(task, properties, true);\n\t\t\treturn newTask;\n\t\t}\n\t\tif (problemMatcher.setting) {\n\t\t\tawait this._updateNeverProblemMatcherSetting(\n\t\t\t\tproblemMatcher.setting,\n\t\t\t);\n\t\t}\n\t\treturn task;\n\t}\n\n\tprivate async _getTasksForGroup(\n\t\tgroup: TaskGroup,\n\t\twaitToActivate?: boolean,\n\t): Promise<Task[]> {\n\t\tconst groups = await this._getGroupedTasks(undefined, waitToActivate);\n\t\tconst result: Task[] = [];\n\t\tgroups.forEach((tasks) => {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst configTaskGroup = TaskGroup.from(\n\t\t\t\t\ttask.configurationProperties.group,\n\t\t\t\t);\n\t\t\t\tif (configTaskGroup?._id === group._id) {\n\t\t\t\t\tresult.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic needsFolderQualification(): boolean {\n\t\treturn (\n\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\tWorkbenchState.WORKSPACE\n\t\t);\n\t}\n\n\tprivate _canCustomize(task: Task): boolean {\n\t\tif (this.schemaVersion !== JsonSchemaVersion.V2_0_0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !!task.getWorkspaceFolder();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _formatTaskForJson(\n\t\tresource: URI,\n\t\ttask: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask,\n\t): Promise<string> {\n\t\tlet reference: IReference<IResolvedTextEditorModel> | undefined;\n\t\tlet stringValue = \"\";\n\t\ttry {\n\t\t\treference =\n\t\t\t\tawait this._textModelResolverService.createModelReference(\n\t\t\t\t\tresource,\n\t\t\t\t);\n\t\t\tconst model = reference.object.textEditorModel;\n\t\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\t\tconst eol = model.getEOL();\n\t\t\tlet stringified = toFormattedString(task, {\n\t\t\t\teol,\n\t\t\t\ttabSize,\n\t\t\t\tinsertSpaces,\n\t\t\t});\n\t\t\tconst regex = new RegExp(\n\t\t\t\teol + (insertSpaces ? \" \".repeat(tabSize) : \"\\\\t\"),\n\t\t\t\t\"g\",\n\t\t\t);\n\t\t\tstringified = stringified.replace(\n\t\t\t\tregex,\n\t\t\t\teol + (insertSpaces ? \" \".repeat(tabSize * 3) : \"\\t\\t\\t\"),\n\t\t\t);\n\t\t\tconst twoTabs = insertSpaces ? \" \".repeat(tabSize * 2) : \"\\t\\t\";\n\t\t\tstringValue =\n\t\t\t\ttwoTabs +\n\t\t\t\tstringified.slice(0, stringified.length - 1) +\n\t\t\t\ttwoTabs +\n\t\t\t\tstringified.slice(stringified.length - 1);\n\t\t} finally {\n\t\t\treference?.dispose();\n\t\t}\n\t\treturn stringValue;\n\t}\n\n\tprivate async _openEditorAtTask(\n\t\tresource: URI | undefined,\n\t\ttask:\n\t\t\t| TaskConfig.ICustomTask\n\t\t\t| TaskConfig.IConfiguringTask\n\t\t\t| string\n\t\t\t| undefined,\n\t\tconfigIndex = -1,\n\t): Promise<boolean> {\n\t\tif (resource === undefined) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\tconst fileContent = await this._fileService.readFile(resource);\n\t\tconst content = fileContent.value;\n\t\tif (!content || !task) {\n\t\t\treturn false;\n\t\t}\n\t\tconst contentValue = content.toString();\n\t\tlet stringValue: string | undefined;\n\t\tif (configIndex !== -1) {\n\t\t\tconst json: TaskConfig.IExternalTaskRunnerConfiguration =\n\t\t\t\tthis._configurationService.getValue<TaskConfig.IExternalTaskRunnerConfiguration>(\n\t\t\t\t\t\"tasks\",\n\t\t\t\t\t{ resource },\n\t\t\t\t);\n\t\t\tif (json.tasks && json.tasks.length > configIndex) {\n\t\t\t\tstringValue = await this._formatTaskForJson(\n\t\t\t\t\tresource,\n\t\t\t\t\tjson.tasks[configIndex],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (!stringValue) {\n\t\t\tif (typeof task === \"string\") {\n\t\t\t\tstringValue = task;\n\t\t\t} else {\n\t\t\t\tstringValue = await this._formatTaskForJson(resource, task);\n\t\t\t}\n\t\t}\n\n\t\tconst index = contentValue.indexOf(stringValue);\n\t\tlet startLineNumber = 1;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (contentValue.charAt(i) === \"\\n\") {\n\t\t\t\tstartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tlet endLineNumber = startLineNumber;\n\t\tfor (let i = 0; i < stringValue.length; i++) {\n\t\t\tif (stringValue.charAt(i) === \"\\n\") {\n\t\t\t\tendLineNumber++;\n\t\t\t}\n\t\t}\n\t\tconst selection =\n\t\t\tstartLineNumber > 1\n\t\t\t\t? {\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tstartColumn: startLineNumber === endLineNumber ? 4 : 3,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tendColumn:\n\t\t\t\t\t\t\tstartLineNumber === endLineNumber ? undefined : 4,\n\t\t\t\t\t}\n\t\t\t\t: undefined;\n\n\t\tawait this._editorService.openEditor({\n\t\t\tresource,\n\t\t\toptions: {\n\t\t\t\tpinned: false,\n\t\t\t\tforceReload: true, // because content might have changed\n\t\t\t\tselection,\n\t\t\t\tselectionRevealType:\n\t\t\t\t\tTextEditorSelectionRevealType.CenterIfOutsideViewport,\n\t\t\t},\n\t\t});\n\t\treturn !!selection;\n\t}\n\n\tprivate _createCustomizableTask(\n\t\ttask: ContributedTask | CustomTask | ConfiguringTask,\n\t): TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined {\n\t\tlet toCustomize:\n\t\t\t| TaskConfig.ICustomTask\n\t\t\t| TaskConfig.IConfiguringTask\n\t\t\t| undefined;\n\t\tconst taskConfig =\n\t\t\tCustomTask.is(task) || ConfiguringTask.is(task)\n\t\t\t\t? task._source.config\n\t\t\t\t: undefined;\n\t\tif (taskConfig && taskConfig.element) {\n\t\t\ttoCustomize = { ...taskConfig.element };\n\t\t} else if (ContributedTask.is(task)) {\n\t\t\ttoCustomize = {};\n\t\t\tconst identifier: TaskConfig.ITaskIdentifier = Object.assign(\n\t\t\t\tObject.create(null),\n\t\t\t\ttask.defines,\n\t\t\t);\n\t\t\tdelete identifier[\"_key\"];\n\t\t\tObject.keys(identifier).forEach(\n\t\t\t\t(key) => ((<any>toCustomize)![key] = identifier[key]),\n\t\t\t);\n\t\t\tif (\n\t\t\t\ttask.configurationProperties.problemMatchers &&\n\t\t\t\ttask.configurationProperties.problemMatchers.length > 0 &&\n\t\t\t\tTypes.isStringArray(\n\t\t\t\t\ttask.configurationProperties.problemMatchers,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\ttoCustomize.problemMatcher =\n\t\t\t\t\ttask.configurationProperties.problemMatchers;\n\t\t\t}\n\t\t\tif (task.configurationProperties.group) {\n\t\t\t\ttoCustomize.group = TaskConfig.GroupKind.to(\n\t\t\t\t\ttask.configurationProperties.group,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (!toCustomize) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (\n\t\t\t(toCustomize.problemMatcher === undefined &&\n\t\t\t\ttask.configurationProperties.problemMatchers === undefined) ||\n\t\t\t(task.configurationProperties.problemMatchers &&\n\t\t\t\ttask.configurationProperties.problemMatchers.length === 0)\n\t\t) {\n\t\t\ttoCustomize.problemMatcher = [];\n\t\t}\n\t\tif (task._source.label !== \"Workspace\") {\n\t\t\ttoCustomize.label = task.configurationProperties.identifier;\n\t\t} else {\n\t\t\ttoCustomize.label = task._label;\n\t\t}\n\t\ttoCustomize.detail = task.configurationProperties.detail;\n\t\treturn toCustomize;\n\t}\n\n\tpublic async customize(\n\t\ttask: ContributedTask | CustomTask | ConfiguringTask,\n\t\tproperties?: ICustomizationProperties,\n\t\topenConfig?: boolean,\n\t): Promise<void> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\tif (!workspaceFolder) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst configuration = this._getConfiguration(\n\t\t\tworkspaceFolder,\n\t\t\ttask._source.kind,\n\t\t);\n\t\tif (configuration.hasParseErrors) {\n\t\t\tthis._notificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"customizeParseErrors\",\n\t\t\t\t\t\"The current task configuration has errors. Please fix the errors first before customizing a task.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn Promise.resolve<void>(undefined);\n\t\t}\n\n\t\tconst fileConfig = configuration.config;\n\t\tconst toCustomize = this._createCustomizableTask(task);\n\t\tif (!toCustomize) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst index: number | undefined = CustomTask.is(task)\n\t\t\t? task._source.config.index\n\t\t\t: undefined;\n\t\tif (properties) {\n\t\t\tfor (const property of Object.getOwnPropertyNames(properties)) {\n\t\t\t\tconst value = (<any>properties)[property];\n\t\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\t\t(<any>toCustomize)[property] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (fileConfig) {\n\t\t\t// We have a global task configuration\n\t\t\tif (index === -1 && properties) {\n\t\t\t\tif (properties.problemMatcher !== undefined) {\n\t\t\t\t\tfileConfig.problemMatcher = properties.problemMatcher;\n\t\t\t\t\tawait this._writeConfiguration(\n\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\"tasks.problemMatchers\",\n\t\t\t\t\t\tfileConfig.problemMatcher,\n\t\t\t\t\t\ttask._source.kind,\n\t\t\t\t\t);\n\t\t\t\t} else if (properties.group !== undefined) {\n\t\t\t\t\tfileConfig.group = properties.group;\n\t\t\t\t\tawait this._writeConfiguration(\n\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\"tasks.group\",\n\t\t\t\t\t\tfileConfig.group,\n\t\t\t\t\t\ttask._source.kind,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!Array.isArray(fileConfig.tasks)) {\n\t\t\t\t\tfileConfig.tasks = [];\n\t\t\t\t}\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\tfileConfig.tasks.push(toCustomize);\n\t\t\t\t} else {\n\t\t\t\t\tfileConfig.tasks[index] = toCustomize;\n\t\t\t\t}\n\t\t\t\tawait this._writeConfiguration(\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\"tasks.tasks\",\n\t\t\t\t\tfileConfig.tasks,\n\t\t\t\t\ttask._source.kind,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst value = {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t\ttasks: [toCustomize],\n\t\t\t};\n\t\t\tlet content =\n\t\t\t\t[\n\t\t\t\t\t\"{\",\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"tasksJsonComment\",\n\t\t\t\t\t\t\"\\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \\n\\t// for the documentation about the tasks.json format\",\n\t\t\t\t\t),\n\t\t\t\t].join(\"\\n\") + JSON.stringify(value, null, \"\\t\").substr(1);\n\t\t\tconst editorConfig = this._configurationService.getValue<any>();\n\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\tcontent = content.replace(\n\t\t\t\t\t/(\\n)(\\t+)/g,\n\t\t\t\t\t(_, s1, s2) =>\n\t\t\t\t\t\ts1 +\n\t\t\t\t\t\t\" \".repeat(s2.length * editorConfig.editor.tabSize),\n\t\t\t\t);\n\t\t\t}\n\t\t\tawait this._textFileService.create([\n\t\t\t\t{\n\t\t\t\t\tresource: workspaceFolder.toResource(\".vscode/tasks.json\"),\n\t\t\t\t\tvalue: content,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\n\t\tif (openConfig) {\n\t\t\tthis._openEditorAtTask(this._getResourceForTask(task), toCustomize);\n\t\t}\n\t}\n\n\tprivate _writeConfiguration(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\tkey: string,\n\t\tvalue: any,\n\t\tsource?: string,\n\t): Promise<void> | undefined {\n\t\tlet target: ConfigurationTarget | undefined;\n\t\tswitch (source) {\n\t\t\tcase TaskSourceKind.User:\n\t\t\t\ttarget = ConfigurationTarget.USER;\n\t\t\t\tbreak;\n\t\t\tcase TaskSourceKind.WorkspaceFile:\n\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (\n\t\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\t\tWorkbenchState.FOLDER\n\t\t\t\t) {\n\t\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t\t} else if (\n\t\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\t\tWorkbenchState.WORKSPACE\n\t\t\t\t) {\n\t\t\t\t\ttarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t\t}\n\t\t}\n\t\tif (target) {\n\t\t\treturn this._configurationService.updateValue(\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\t{ resource: workspaceFolder.uri },\n\t\t\t\ttarget,\n\t\t\t);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _getResourceForKind(kind: string): URI | undefined {\n\t\tthis._updateSetup();\n\t\tswitch (kind) {\n\t\t\tcase TaskSourceKind.User: {\n\t\t\t\treturn resources.joinPath(\n\t\t\t\t\tresources.dirname(\n\t\t\t\t\t\tthis._preferencesService.userSettingsResource,\n\t\t\t\t\t),\n\t\t\t\t\t\"tasks.json\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase TaskSourceKind.WorkspaceFile: {\n\t\t\t\tif (this._workspace && this._workspace.configuration) {\n\t\t\t\t\treturn this._workspace.configuration;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getResourceForTask(\n\t\ttask: CustomTask | ConfiguringTask | ContributedTask,\n\t): URI {\n\t\tif (CustomTask.is(task)) {\n\t\t\tlet uri = this._getResourceForKind(task._source.kind);\n\t\t\tif (!uri) {\n\t\t\t\tconst taskFolder = task.getWorkspaceFolder();\n\t\t\t\tif (taskFolder) {\n\t\t\t\t\turi = taskFolder.toResource(task._source.config.file);\n\t\t\t\t} else {\n\t\t\t\t\turi = this.workspaceFolders[0].uri;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uri;\n\t\t} else {\n\t\t\treturn task.getWorkspaceFolder()!.toResource(\".vscode/tasks.json\");\n\t\t}\n\t}\n\n\tpublic async openConfig(\n\t\ttask: CustomTask | ConfiguringTask | undefined,\n\t): Promise<boolean> {\n\t\tlet resource: URI | undefined;\n\t\tif (task) {\n\t\t\tresource = this._getResourceForTask(task);\n\t\t} else {\n\t\t\tresource =\n\t\t\t\tthis._workspaceFolders && this._workspaceFolders.length > 0\n\t\t\t\t\t? this._workspaceFolders[0].toResource(\".vscode/tasks.json\")\n\t\t\t\t\t: undefined;\n\t\t}\n\t\treturn this._openEditorAtTask(\n\t\t\tresource,\n\t\t\ttask ? task._label : undefined,\n\t\t\ttask ? task._source.config.index : -1,\n\t\t);\n\t}\n\n\tprivate _createRunnableTask(\n\t\ttasks: TaskMap,\n\t\tgroup: TaskGroup,\n\t): { task: Task; resolver: ITaskResolver } | undefined {\n\t\tinterface IResolverData {\n\t\t\tid: Map<string, Task>;\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t}\n\n\t\tconst resolverData: Map<string, IResolverData> = new Map();\n\t\tconst workspaceTasks: Task[] = [];\n\t\tconst extensionTasks: Task[] = [];\n\t\ttasks.forEach((tasks, folder) => {\n\t\t\tlet data = resolverData.get(folder);\n\t\t\tif (!data) {\n\t\t\t\tdata = {\n\t\t\t\t\tid: new Map<string, Task>(),\n\t\t\t\t\tlabel: new Map<string, Task>(),\n\t\t\t\t\tidentifier: new Map<string, Task>(),\n\t\t\t\t};\n\t\t\t\tresolverData.set(folder, data);\n\t\t\t}\n\t\t\tfor (const task of tasks) {\n\t\t\t\tdata.id.set(task._id, task);\n\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\tdata.identifier.set(\n\t\t\t\t\t\ttask.configurationProperties.identifier,\n\t\t\t\t\t\ttask,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (group && task.configurationProperties.group === group) {\n\t\t\t\t\tif (task._source.kind === TaskSourceKind.Workspace) {\n\t\t\t\t\t\tworkspaceTasks.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensionTasks.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst resolver: ITaskResolver = {\n\t\t\tresolve: async (uri: URI | string, alias: string) => {\n\t\t\t\tconst data = resolverData.get(\n\t\t\t\t\ttypeof uri === \"string\" ? uri : uri.toString(),\n\t\t\t\t);\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\tdata.id.get(alias) ||\n\t\t\t\t\tdata.label.get(alias) ||\n\t\t\t\t\tdata.identifier.get(alias)\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tif (workspaceTasks.length > 0) {\n\t\t\tif (workspaceTasks.length > 1) {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"moreThanOneBuildTask\",\n\t\t\t\t\t\t\"There are many build tasks defined in the tasks.json. Executing the first one.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { task: workspaceTasks[0], resolver };\n\t\t}\n\t\tif (extensionTasks.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We can only have extension tasks if we are in version 2.0.0. Then we can even run\n\t\t// multiple build tasks.\n\t\tif (extensionTasks.length === 1) {\n\t\t\treturn { task: extensionTasks[0], resolver };\n\t\t} else {\n\t\t\tconst id: string = UUID.generateUuid();\n\t\t\tconst task: InMemoryTask = new InMemoryTask(\n\t\t\t\tid,\n\t\t\t\t{ kind: TaskSourceKind.InMemory, label: \"inMemory\" },\n\t\t\t\tid,\n\t\t\t\t\"inMemory\",\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tidentifier: id,\n\t\t\t\t\tdependsOn: extensionTasks.map((extensionTask) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\turi: extensionTask.getWorkspaceFolder()!.uri,\n\t\t\t\t\t\t\ttask: extensionTask._id,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\tname: id,\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn { task, resolver };\n\t\t}\n\t}\n\n\tprivate _createResolver(grouped?: TaskMap): ITaskResolver {\n\t\tinterface ResolverData {\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t\ttaskIdentifier: Map<string, Task>;\n\t\t}\n\n\t\tlet resolverData: Map<string, ResolverData> | undefined;\n\n\t\tasync function quickResolve(\n\t\t\tthat: AbstractTaskService,\n\t\t\turi: URI | string,\n\t\t\tidentifier: string | ITaskIdentifier,\n\t\t) {\n\t\t\tconst foundTasks = await that._findWorkspaceTasks(\n\t\t\t\t(task: Task | ConfiguringTask): boolean => {\n\t\t\t\t\tconst taskUri =\n\t\t\t\t\t\tConfiguringTask.is(task) || CustomTask.is(task)\n\t\t\t\t\t\t\t? task._source.config.workspaceFolder?.uri\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst originalUri =\n\t\t\t\t\t\ttypeof uri === \"string\" ? uri : uri.toString();\n\t\t\t\t\tif (taskUri?.toString() !== originalUri) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (Types.isString(identifier)) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\ttask._label === identifier ||\n\t\t\t\t\t\t\ttask.configurationProperties.identifier ===\n\t\t\t\t\t\t\t\tidentifier\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst keyedIdentifier = task.getDefinition(true);\n\t\t\t\t\t\tconst searchIdentifier =\n\t\t\t\t\t\t\tTaskDefinition.createTaskIdentifier(\n\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t\tconsole,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn searchIdentifier && keyedIdentifier\n\t\t\t\t\t\t\t? searchIdentifier._key === keyedIdentifier._key\n\t\t\t\t\t\t\t: false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (foundTasks.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst task = foundTasks[0];\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\treturn that.tryResolveTask(task);\n\t\t\t}\n\t\t\treturn task;\n\t\t}\n\n\t\tasync function getResolverData(that: AbstractTaskService) {\n\t\t\tif (resolverData === undefined) {\n\t\t\t\tresolverData = new Map();\n\t\t\t\t(grouped || (await that._getGroupedTasks())).forEach(\n\t\t\t\t\t(tasks, folder) => {\n\t\t\t\t\t\tlet data = resolverData!.get(folder);\n\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\tdata = {\n\t\t\t\t\t\t\t\tlabel: new Map<string, Task>(),\n\t\t\t\t\t\t\t\tidentifier: new Map<string, Task>(),\n\t\t\t\t\t\t\t\ttaskIdentifier: new Map<string, Task>(),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tresolverData!.set(folder, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\t\t\t\tdata.identifier.set(\n\t\t\t\t\t\t\t\t\ttask.configurationProperties.identifier,\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst keyedIdentifier = task.getDefinition(true);\n\t\t\t\t\t\t\tif (keyedIdentifier !== undefined) {\n\t\t\t\t\t\t\t\tdata.taskIdentifier.set(\n\t\t\t\t\t\t\t\t\tkeyedIdentifier._key,\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn resolverData;\n\t\t}\n\n\t\tasync function fullResolve(\n\t\t\tthat: AbstractTaskService,\n\t\t\turi: URI | string,\n\t\t\tidentifier: string | ITaskIdentifier,\n\t\t) {\n\t\t\tconst allResolverData = await getResolverData(that);\n\t\t\tconst data = allResolverData.get(\n\t\t\t\ttypeof uri === \"string\" ? uri : uri.toString(),\n\t\t\t);\n\t\t\tif (!data) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Types.isString(identifier)) {\n\t\t\t\treturn (\n\t\t\t\t\tdata.label.get(identifier) ||\n\t\t\t\t\tdata.identifier.get(identifier)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst key = TaskDefinition.createTaskIdentifier(\n\t\t\t\t\tidentifier,\n\t\t\t\t\tconsole,\n\t\t\t\t);\n\t\t\t\treturn key !== undefined\n\t\t\t\t\t? data.taskIdentifier.get(key._key)\n\t\t\t\t\t: undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tresolve: async (\n\t\t\t\turi: URI | string,\n\t\t\t\tidentifier: string | ITaskIdentifier | undefined,\n\t\t\t) => {\n\t\t\t\tif (!identifier) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (resolverData === undefined && grouped === undefined) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(await quickResolve(this, uri, identifier)) ??\n\t\t\t\t\t\tfullResolve(this, uri, identifier)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn fullResolve(this, uri, identifier);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate async _saveBeforeRun(): Promise<boolean> {\n\t\tenum SaveBeforeRunConfigOptions {\n\t\t\tAlways = \"always\",\n\t\t\tNever = \"never\",\n\t\t\tPrompt = \"prompt\",\n\t\t}\n\n\t\tconst saveBeforeRunTaskConfig: SaveBeforeRunConfigOptions =\n\t\t\tthis._configurationService.getValue(TaskSettingId.SaveBeforeRun);\n\n\t\tif (saveBeforeRunTaskConfig === SaveBeforeRunConfigOptions.Never) {\n\t\t\treturn false;\n\t\t} else if (\n\t\t\tsaveBeforeRunTaskConfig === SaveBeforeRunConfigOptions.Prompt &&\n\t\t\tthis._editorService.editors.some((e) => e.isDirty())\n\t\t) {\n\t\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"TaskSystem.saveBeforeRun.prompt.title\",\n\t\t\t\t\t\"Save all editors?\",\n\t\t\t\t),\n\t\t\t\tdetail: nls.localize(\n\t\t\t\t\t\"detail\",\n\t\t\t\t\t\"Do you want to save all editors before running the task?\",\n\t\t\t\t),\n\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"saveBeforeRun.save\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Save\",\n\t\t\t\t),\n\t\t\t\tcancelButton: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"saveBeforeRun.dontSave\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Do&&n't Save\",\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tif (!confirmed) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tawait this._editorService.saveAll({ reason: SaveReason.AUTO });\n\t\treturn true;\n\t}\n\n\tprivate async _executeTask(\n\t\ttask: Task,\n\t\tresolver: ITaskResolver,\n\t\trunSource: TaskRunSource,\n\t): Promise<ITaskSummary> {\n\t\tlet taskToRun: Task = task;\n\t\tif (await this._saveBeforeRun()) {\n\t\t\tawait this._configurationService.reloadConfiguration();\n\t\t\tawait this._updateWorkspaceTasks();\n\t\t\tconst taskFolder = task.getWorkspaceFolder();\n\t\t\tconst taskIdentifier = task.configurationProperties.identifier;\n\t\t\tconst taskType = CustomTask.is(task)\n\t\t\t\t? task.customizes()?.type\n\t\t\t\t: ContributedTask.is(task)\n\t\t\t\t\t? task.type\n\t\t\t\t\t: undefined;\n\t\t\t// Since we save before running tasks, the task may have changed as part of the save.\n\t\t\t// However, if the TaskRunSource is not User, then we shouldn't try to fetch the task again\n\t\t\t// since this can cause a new'd task to get overwritten with a provided task.\n\t\t\ttaskToRun =\n\t\t\t\t(taskFolder &&\n\t\t\t\ttaskIdentifier &&\n\t\t\t\trunSource === TaskRunSource.User\n\t\t\t\t\t? await this.getTask(\n\t\t\t\t\t\t\ttaskFolder,\n\t\t\t\t\t\t\ttaskIdentifier,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\ttaskType,\n\t\t\t\t\t\t)\n\t\t\t\t\t: task) ?? task;\n\t\t}\n\t\tawait ProblemMatcherRegistry.onReady();\n\t\tconst executeResult =\n\t\t\trunSource === TaskRunSource.Reconnect\n\t\t\t\t? this._getTaskSystem().reconnect(taskToRun, resolver)\n\t\t\t\t: this._getTaskSystem().run(taskToRun, resolver);\n\t\tif (executeResult) {\n\t\t\treturn this._handleExecuteResult(executeResult, runSource);\n\t\t}\n\t\treturn { exitCode: 0 };\n\t}\n\n\tprivate async _handleExecuteResult(\n\t\texecuteResult: ITaskExecuteResult,\n\t\trunSource?: TaskRunSource,\n\t): Promise<ITaskSummary> {\n\t\tif (runSource === TaskRunSource.User) {\n\t\t\tawait this._setRecentlyUsedTask(executeResult.task);\n\t\t}\n\t\tif (executeResult.kind === TaskExecuteKind.Active) {\n\t\t\tconst active = executeResult.active;\n\t\t\tif (\n\t\t\t\t(active &&\n\t\t\t\t\tactive.same &&\n\t\t\t\t\trunSource === TaskRunSource.FolderOpen) ||\n\t\t\t\trunSource === TaskRunSource.Reconnect\n\t\t\t) {\n\t\t\t\t// ignore, the task is already active, likely from being reconnected or from folder open.\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t\"Ignoring task that is already active\",\n\t\t\t\t\texecuteResult.task,\n\t\t\t\t);\n\t\t\t\treturn executeResult.promise;\n\t\t\t}\n\t\t\tif (active && active.same) {\n\t\t\t\tif (this._taskSystem?.isTaskVisible(executeResult.task)) {\n\t\t\t\t\tconst message = nls.localize(\n\t\t\t\t\t\t\"TaskSystem.activeSame.noBackground\",\n\t\t\t\t\t\t\"The task '{0}' is already active.\",\n\t\t\t\t\t\texecuteResult.task.getQualifiedLabel(),\n\t\t\t\t\t);\n\t\t\t\t\tconst lastInstance =\n\t\t\t\t\t\tthis._getTaskSystem().getLastInstance(\n\t\t\t\t\t\t\texecuteResult.task,\n\t\t\t\t\t\t) ?? executeResult.task;\n\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\"terminateTask\",\n\t\t\t\t\t\t\t\t\t\"Terminate Task\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\trun: () => this.terminate(lastInstance),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\"restartTask\",\n\t\t\t\t\t\t\t\t\t\"Restart Task\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\trun: () => this._restart(lastInstance),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\t{ sticky: true },\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._taskSystem?.revealTask(executeResult.task);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new TaskError(\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TaskSystem.active\",\n\t\t\t\t\t\t\"There is already a task running. Terminate it first before executing another task.\",\n\t\t\t\t\t),\n\t\t\t\t\tTaskErrors.RunningTask,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._setRecentlyUsedTask(executeResult.task);\n\t\treturn executeResult.promise;\n\t}\n\n\tprivate async _restart(task: Task): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn;\n\t\t}\n\t\tconst response = await this._taskSystem.terminate(task);\n\t\tif (response.success) {\n\t\t\ttry {\n\t\t\t\tawait this.run(task);\n\t\t\t} catch {\n\t\t\t\t// eat the error, we don't care about it here\n\t\t\t}\n\t\t} else {\n\t\t\tthis._notificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskSystem.restartFailed\",\n\t\t\t\t\t\"Failed to terminate and restart task {0}\",\n\t\t\t\t\tTypes.isString(task)\n\t\t\t\t\t\t? task\n\t\t\t\t\t\t: task.configurationProperties.name,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async terminate(task: Task): Promise<ITaskTerminateResponse> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn { success: true, task: undefined };\n\t\t}\n\n\t\tif (!this._taskSystem) {\n\t\t\treturn { success: true, task: undefined };\n\t\t}\n\t\treturn this._taskSystem.terminate(task);\n\t}\n\n\tprivate _terminateAll(): Promise<ITaskTerminateResponse[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse[]>([]);\n\t\t}\n\t\treturn this._taskSystem.terminateAll();\n\t}\n\n\tprotected _createTerminalTaskSystem(): ITaskSystem {\n\t\treturn new TerminalTaskSystem(\n\t\t\tthis._terminalService,\n\t\t\tthis._terminalGroupService,\n\t\t\tthis._outputService,\n\t\t\tthis._paneCompositeService,\n\t\t\tthis._viewsService,\n\t\t\tthis._markerService,\n\t\t\tthis._modelService,\n\t\t\tthis._configurationResolverService,\n\t\t\tthis._contextService,\n\t\t\tthis._environmentService,\n\t\t\tAbstractTaskService.OutputChannelId,\n\t\t\tthis._fileService,\n\t\t\tthis._terminalProfileResolverService,\n\t\t\tthis._pathService,\n\t\t\tthis._viewDescriptorService,\n\t\t\tthis._logService,\n\t\t\tthis._notificationService,\n\t\t\tthis._instantiationService,\n\t\t\t(workspaceFolder: IWorkspaceFolder | undefined) => {\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\treturn this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\t\t\t} else if (this._taskSystemInfos.size > 0) {\n\t\t\t\t\tconst infos = Array.from(this._taskSystemInfos.entries());\n\t\t\t\t\tconst notFile = infos.filter(\n\t\t\t\t\t\t(info) => info[0] !== Schemas.file,\n\t\t\t\t\t);\n\t\t\t\t\tif (notFile.length > 0) {\n\t\t\t\t\t\treturn notFile[0][1][0];\n\t\t\t\t\t}\n\t\t\t\t\treturn infos[0][1][0];\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected abstract _getTaskSystem(): ITaskSystem;\n\n\tprivate _isTaskProviderEnabled(type: string) {\n\t\tconst definition = TaskDefinitionRegistry.get(type);\n\t\treturn (\n\t\t\t!definition ||\n\t\t\t!definition.when ||\n\t\t\tthis._contextKeyService.contextMatchesRules(definition.when)\n\t\t);\n\t}\n\n\tprivate async _getGroupedTasks(\n\t\tfilter?: ITaskFilter,\n\t\twaitToActivate?: boolean,\n\t\tknownOnlyOrTrusted?: boolean,\n\t): Promise<TaskMap> {\n\t\tawait this._waitForAllSupportedExecutions;\n\t\tconst type = filter?.type;\n\t\tconst needsRecentTasksMigration = this._needsRecentTasksMigration();\n\t\tif (!waitToActivate) {\n\t\t\tawait this._activateTaskProviders(filter?.type);\n\t\t}\n\t\tconst validTypes: IStringDictionary<boolean> = Object.create(null);\n\t\tTaskDefinitionRegistry.all().forEach(\n\t\t\t(definition) => (validTypes[definition.taskType] = true),\n\t\t);\n\t\tvalidTypes[\"shell\"] = true;\n\t\tvalidTypes[\"process\"] = true;\n\t\tconst contributedTaskSets = await new Promise<ITaskSet[]>((resolve) => {\n\t\t\tconst result: ITaskSet[] = [];\n\t\t\tlet counter = 0;\n\t\t\tconst done = (value: ITaskSet | undefined) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t\tif (--counter === 0) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst error = (error: any) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (error && Types.isString(error.message)) {\n\t\t\t\t\t\tthis._log(`Error: ${error.message}\\n`);\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\t\"Unknown error received while collecting tasks from providers.\",\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (--counter === 0) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (\n\t\t\t\tthis._isProvideTasksEnabled() &&\n\t\t\t\tthis.schemaVersion === JsonSchemaVersion.V2_0_0 &&\n\t\t\t\tthis._providers.size > 0\n\t\t\t) {\n\t\t\t\tlet foundAnyProviders = false;\n\t\t\t\tfor (const [handle, provider] of this._providers) {\n\t\t\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\t\t\tif (type === undefined || type === providerType) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tproviderType &&\n\t\t\t\t\t\t\t!this._isTaskProviderEnabled(providerType)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfoundAnyProviders = true;\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\traceTimeout(\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t\t.provideTasks(validTypes)\n\t\t\t\t\t\t\t\t.then((taskSet: ITaskSet) => {\n\t\t\t\t\t\t\t\t\t// Check that the tasks provided are of the correct type\n\t\t\t\t\t\t\t\t\tfor (const task of taskSet.tasks) {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\ttask.type !==\n\t\t\t\t\t\t\t\t\t\t\tthis._providerTypes.get(handle)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"unexpectedTaskType\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t'The task provider for \"{0}\" tasks unexpectedly provided a task of type \"{1}\".\\n',\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis._providerTypes.get(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\ttask.type,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\ttask.type !== \"shell\" &&\n\t\t\t\t\t\t\t\t\t\t\t\ttask.type !== \"process\"\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn done(taskSet);\n\t\t\t\t\t\t\t\t}, error),\n\t\t\t\t\t\t\t5000,\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t// onTimeout\n\t\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\t\"Timed out getting tasks from \",\n\t\t\t\t\t\t\t\t\tproviderType,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdone(undefined);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!foundAnyProviders) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\n\t\tconst result: TaskMap = new TaskMap();\n\t\tconst contributedTasks: TaskMap = new TaskMap();\n\n\t\tfor (const set of contributedTaskSets) {\n\t\t\tfor (const task of set.tasks) {\n\t\t\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\tcontributedTasks.add(workspaceFolder, task);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlet tasks: [string, IWorkspaceFolderTaskResult][] = [];\n\t\t\t// prevent workspace trust dialog from being shown in unexpected cases #224881\n\t\t\tif (\n\t\t\t\t!knownOnlyOrTrusted ||\n\t\t\t\tthis._workspaceTrustManagementService.isWorkspaceTrusted()\n\t\t\t) {\n\t\t\t\ttasks = Array.from(await this.getWorkspaceTasks());\n\t\t\t}\n\t\t\tawait Promise.all(\n\t\t\t\tthis._getCustomTaskPromises(\n\t\t\t\t\ttasks,\n\t\t\t\t\tfilter,\n\t\t\t\t\tresult,\n\t\t\t\t\tcontributedTasks,\n\t\t\t\t\twaitToActivate,\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (needsRecentTasksMigration) {\n\t\t\t\t// At this point we have all the tasks and can migrate the recently used tasks.\n\t\t\t\tawait this._migrateRecentTasks(result.all());\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch {\n\t\t\t// If we can't read the tasks.json file provide at least the contributed tasks\n\t\t\tconst result: TaskMap = new TaskMap();\n\t\t\tfor (const set of contributedTaskSets) {\n\t\t\t\tfor (const task of set.tasks) {\n\t\t\t\t\tconst folder = task.getWorkspaceFolder();\n\t\t\t\t\tif (folder) {\n\t\t\t\t\t\tresult.add(folder, task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate _getCustomTaskPromises(\n\t\tcustomTasksKeyValuePairs: [string, IWorkspaceFolderTaskResult][],\n\t\tfilter: ITaskFilter | undefined,\n\t\tresult: TaskMap,\n\t\tcontributedTasks: TaskMap,\n\t\twaitToActivate: boolean | undefined,\n\t) {\n\t\treturn customTasksKeyValuePairs.map(async ([key, folderTasks]) => {\n\t\t\tconst contributed = contributedTasks.get(key);\n\t\t\tif (!folderTasks.set) {\n\t\t\t\tif (contributed) {\n\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.EMPTY\n\t\t\t) {\n\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t} else {\n\t\t\t\tconst configurations = folderTasks.configurations;\n\t\t\t\tconst legacyTaskConfigurations = folderTasks.set\n\t\t\t\t\t? this._getLegacyTaskConfigurations(folderTasks.set)\n\t\t\t\t\t: undefined;\n\t\t\t\tconst customTasksToDelete: Task[] = [];\n\t\t\t\tif (configurations || legacyTaskConfigurations) {\n\t\t\t\t\tconst unUsedConfigurations: Set<string> = new Set<string>();\n\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\tObject.keys(configurations.byIdentifier).forEach(\n\t\t\t\t\t\t\t(key) => unUsedConfigurations.add(key),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const task of contributed) {\n\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\t\tconst configuringTask =\n\t\t\t\t\t\t\t\tconfigurations.byIdentifier[task.defines._key];\n\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\tunUsedConfigurations.delete(task.defines._key);\n\t\t\t\t\t\t\t\tresult.add(\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\tTaskConfig.createCustomTask(\n\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t\tconfiguringTask,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (legacyTaskConfigurations) {\n\t\t\t\t\t\t\tconst configuringTask =\n\t\t\t\t\t\t\t\tlegacyTaskConfigurations[task.defines._key];\n\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\tresult.add(\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\tTaskConfig.createCustomTask(\n\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t\tconfiguringTask,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcustomTasksToDelete.push(configuringTask);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (customTasksToDelete.length > 0) {\n\t\t\t\t\t\tconst toDelete = customTasksToDelete.reduce<\n\t\t\t\t\t\t\tIStringDictionary<boolean>\n\t\t\t\t\t\t>((map, task) => {\n\t\t\t\t\t\t\tmap[task._id] = true;\n\t\t\t\t\t\t\treturn map;\n\t\t\t\t\t\t}, Object.create(null));\n\t\t\t\t\t\tfor (const task of folderTasks.set.tasks) {\n\t\t\t\t\t\t\tif (toDelete[task._id]) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst unUsedConfigurationsAsArray =\n\t\t\t\t\t\tArray.from(unUsedConfigurations);\n\n\t\t\t\t\tconst unUsedConfigurationPromises =\n\t\t\t\t\t\tunUsedConfigurationsAsArray.map(async (value) => {\n\t\t\t\t\t\t\tconst configuringTask =\n\t\t\t\t\t\t\t\tconfigurations!.byIdentifier[value];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tfilter?.type &&\n\t\t\t\t\t\t\t\tfilter.type !== configuringTask.configures.type\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet requiredTaskProviderUnavailable = false;\n\n\t\t\t\t\t\t\tfor (const [handle, provider] of this._providers) {\n\t\t\t\t\t\t\t\tconst providerType =\n\t\t\t\t\t\t\t\t\tthis._providerTypes.get(handle);\n\t\t\t\t\t\t\t\tif (configuringTask.type === providerType) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tproviderType &&\n\t\t\t\t\t\t\t\t\t\t!this._isTaskProviderEnabled(\n\t\t\t\t\t\t\t\t\t\t\tproviderType,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\trequiredTaskProviderUnavailable = true;\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst resolvedTask =\n\t\t\t\t\t\t\t\t\t\t\tawait provider.resolveTask(\n\t\t\t\t\t\t\t\t\t\t\t\tconfiguringTask,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tresolvedTask &&\n\t\t\t\t\t\t\t\t\t\t\tresolvedTask._id ===\n\t\t\t\t\t\t\t\t\t\t\t\tconfiguringTask._id\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tresult.add(\n\t\t\t\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\t\t\t\tTaskConfig.createCustomTask(\n\t\t\t\t\t\t\t\t\t\t\t\t\tresolvedTask,\n\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguringTask,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t// Ignore errors. The task could not be provided by any of the providers.\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (requiredTaskProviderUnavailable) {\n\t\t\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\"TaskService.providerUnavailable\",\n\t\t\t\t\t\t\t\t\t\t\"Warning: {0} tasks are unavailable in the current environment.\",\n\t\t\t\t\t\t\t\t\t\tconfiguringTask.configures.type,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (!waitToActivate) {\n\t\t\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\"TaskService.noConfiguration\",\n\t\t\t\t\t\t\t\t\t\t\"Error: The {0} task detection didn't contribute a task for the following configuration:\\n{1}\\nThe task will be ignored.\",\n\t\t\t\t\t\t\t\t\t\tconfiguringTask.configures.type,\n\t\t\t\t\t\t\t\t\t\tJSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\tconfiguringTask._source.config\n\t\t\t\t\t\t\t\t\t\t\t\t.element,\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\t4,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tawait Promise.all(unUsedConfigurationPromises);\n\t\t\t\t} else {\n\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getLegacyTaskConfigurations(\n\t\tworkspaceTasks: ITaskSet,\n\t): IStringDictionary<CustomTask> | undefined {\n\t\tlet result: IStringDictionary<CustomTask> | undefined;\n\t\tfunction getResult(): IStringDictionary<CustomTask> {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = Object.create(null);\n\t\t\treturn result!;\n\t\t}\n\t\tfor (const task of workspaceTasks.tasks) {\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tconst commandName = task.command && task.command.name;\n\t\t\t\t// This is for backwards compatibility with the 0.1.0 task annotation code\n\t\t\t\t// if we had a gulp, jake or grunt command a task specification was a annotation\n\t\t\t\tif (\n\t\t\t\t\tcommandName === \"gulp\" ||\n\t\t\t\t\tcommandName === \"grunt\" ||\n\t\t\t\t\tcommandName === \"jake\"\n\t\t\t\t) {\n\t\t\t\t\tconst identifier = KeyedTaskIdentifier.create({\n\t\t\t\t\t\ttype: commandName,\n\t\t\t\t\t\ttask: task.configurationProperties.name,\n\t\t\t\t\t});\n\t\t\t\t\tgetResult()[identifier._key] = task;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async getWorkspaceTasks(\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn new Map();\n\t\t}\n\t\tawait raceTimeout(this._waitForAllSupportedExecutions, 2000, () => {\n\t\t\tthis._logService.warn(\n\t\t\t\t\"Timed out waiting for all supported executions\",\n\t\t\t);\n\t\t});\n\t\tawait this._whenTaskSystemReady;\n\t\tif (this._workspaceTasksPromise) {\n\t\t\treturn this._workspaceTasksPromise;\n\t\t}\n\t\treturn this._updateWorkspaceTasks(runSource);\n\t}\n\n\tprivate _updateWorkspaceTasks(\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tthis._workspaceTasksPromise = this._computeWorkspaceTasks(runSource);\n\t\treturn this._workspaceTasksPromise;\n\t}\n\n\tprivate async _getAFolder(): Promise<IWorkspaceFolder> {\n\t\tlet folder =\n\t\t\tthis.workspaceFolders.length > 0\n\t\t\t\t? this.workspaceFolders[0]\n\t\t\t\t: undefined;\n\t\tif (!folder) {\n\t\t\tconst userhome = await this._pathService.userHome();\n\t\t\tfolder = new WorkspaceFolder({\n\t\t\t\turi: userhome,\n\t\t\t\tname: resources.basename(userhome),\n\t\t\t\tindex: 0,\n\t\t\t});\n\t\t}\n\t\treturn folder;\n\t}\n\n\tprotected async _computeWorkspaceTasks(\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tconst promises: Promise<IWorkspaceFolderTaskResult | undefined>[] = [];\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tpromises.push(this._computeWorkspaceFolderTasks(folder, runSource));\n\t\t}\n\t\tconst values = await Promise.all(promises);\n\t\tconst result = new Map<string, IWorkspaceFolderTaskResult>();\n\t\tfor (const value of values) {\n\t\t\tif (value) {\n\t\t\t\tresult.set(value.workspaceFolder.uri.toString(), value);\n\t\t\t}\n\t\t}\n\n\t\tconst folder = await this._getAFolder();\n\t\tif (this._contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\tconst workspaceFileTasks = await this._computeWorkspaceFileTasks(\n\t\t\t\tfolder,\n\t\t\t\trunSource,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tworkspaceFileTasks &&\n\t\t\t\tthis._workspace &&\n\t\t\t\tthis._workspace.configuration\n\t\t\t) {\n\t\t\t\tresult.set(\n\t\t\t\t\tthis._workspace.configuration.toString(),\n\t\t\t\t\tworkspaceFileTasks,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst userTasks = await this._computeUserTasks(folder, runSource);\n\t\tif (userTasks) {\n\t\t\tresult.set(USER_TASKS_GROUP_KEY, userTasks);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate get _jsonTasksSupported(): boolean {\n\t\treturn (\n\t\t\tShellExecutionSupportedContext.getValue(this._contextKeyService) ===\n\t\t\t\ttrue &&\n\t\t\tProcessExecutionSupportedContext.getValue(\n\t\t\t\tthis._contextKeyService,\n\t\t\t) === true\n\t\t);\n\t}\n\n\tprivate async _computeWorkspaceFolderTasks(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t): Promise<IWorkspaceFolderTaskResult> {\n\t\tconst workspaceFolderConfiguration =\n\t\t\tthis._executionEngine === ExecutionEngine.Process\n\t\t\t\t? await this._computeLegacyConfiguration(workspaceFolder)\n\t\t\t\t: await this._computeConfiguration(workspaceFolder);\n\t\tif (\n\t\t\t!workspaceFolderConfiguration ||\n\t\t\t!workspaceFolderConfiguration.config ||\n\t\t\tworkspaceFolderConfiguration.hasErrors\n\t\t) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tworkspaceFolder,\n\t\t\t\tset: undefined,\n\t\t\t\tconfigurations: undefined,\n\t\t\t\thasErrors: workspaceFolderConfiguration\n\t\t\t\t\t? workspaceFolderConfiguration.hasErrors\n\t\t\t\t\t: false,\n\t\t\t});\n\t\t}\n\t\tawait ProblemMatcherRegistry.onReady();\n\t\tconst taskSystemInfo: ITaskSystemInfo | undefined =\n\t\t\tthis._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\tconst problemReporter = new ProblemReporter(this._outputChannel);\n\t\tconst parseResult = TaskConfig.parse(\n\t\t\tworkspaceFolder,\n\t\t\tundefined,\n\t\t\ttaskSystemInfo ? taskSystemInfo.platform : Platform.platform,\n\t\t\tworkspaceFolderConfiguration.config,\n\t\t\tproblemReporter,\n\t\t\tTaskConfig.TaskConfigSource.TasksJson,\n\t\t\tthis._contextKeyService,\n\t\t);\n\t\tlet hasErrors = false;\n\t\tif (\n\t\t\t!parseResult.validationStatus.isOK() &&\n\t\t\tparseResult.validationStatus.state !== ValidationState.Info\n\t\t) {\n\t\t\thasErrors = true;\n\t\t\tthis._showOutput(runSource);\n\t\t}\n\t\tif (problemReporter.status.isFatal()) {\n\t\t\tproblemReporter.fatal(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskSystem.configurationErrors\",\n\t\t\t\t\t\"Error: the provided task configuration has validation errors and can't not be used. Please correct the errors first.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tworkspaceFolder,\n\t\t\t\tset: undefined,\n\t\t\t\tconfigurations: undefined,\n\t\t\t\thasErrors,\n\t\t\t};\n\t\t}\n\t\tlet customizedTasks:\n\t\t\t| { byIdentifier: IStringDictionary<ConfiguringTask> }\n\t\t\t| undefined;\n\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\tcustomizedTasks = {\n\t\t\t\tbyIdentifier: Object.create(null),\n\t\t\t};\n\t\t\tfor (const task of parseResult.configured) {\n\t\t\t\tcustomizedTasks.byIdentifier[task.configures._key] = task;\n\t\t\t}\n\t\t}\n\t\tif (!this._jsonTasksSupported && parseResult.custom.length > 0) {\n\t\t\tconsole.warn(\"Custom workspace tasks are not supported.\");\n\t\t}\n\t\treturn {\n\t\t\tworkspaceFolder,\n\t\t\tset: { tasks: this._jsonTasksSupported ? parseResult.custom : [] },\n\t\t\tconfigurations: customizedTasks,\n\t\t\thasErrors,\n\t\t};\n\t}\n\n\tprivate _testParseExternalConfig(\n\t\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined,\n\t\tlocation: string,\n\t): {\n\t\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined;\n\t\thasParseErrors: boolean;\n\t} {\n\t\tif (!config) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tconst parseErrors: string[] = (config as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"TaskSystem.invalidTaskJsonOther\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.\",\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._showOutput();\n\t\t\t\treturn { config, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config, hasParseErrors: false };\n\t}\n\n\tprivate _log(value: string, verbose?: boolean): void {\n\t\tif (\n\t\t\t!verbose ||\n\t\t\tthis._configurationService.getValue(TaskSettingId.VerboseLogging)\n\t\t) {\n\t\t\tthis._outputChannel.append(value + \"\\n\");\n\t\t}\n\t}\n\n\tprivate async _computeWorkspaceFileTasks(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t): Promise<IWorkspaceFolderTaskResult> {\n\t\tif (this._executionEngine === ExecutionEngine.Process) {\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\tconst workspaceFileConfig = this._getConfiguration(\n\t\t\tworkspaceFolder,\n\t\t\tTaskSourceKind.WorkspaceFile,\n\t\t);\n\t\tconst configuration = this._testParseExternalConfig(\n\t\t\tworkspaceFileConfig.config,\n\t\t\tnls.localize(\n\t\t\t\t\"TasksSystem.locationWorkspaceConfig\",\n\t\t\t\t\"workspace file\",\n\t\t\t),\n\t\t);\n\t\tconst customizedTasks: {\n\t\t\tbyIdentifier: IStringDictionary<ConfiguringTask>;\n\t\t} = {\n\t\t\tbyIdentifier: Object.create(null),\n\t\t};\n\n\t\tconst custom: CustomTask[] = [];\n\t\tawait this._computeTasksForSingleConfig(\n\t\t\tworkspaceFolder,\n\t\t\tconfiguration.config,\n\t\t\trunSource,\n\t\t\tcustom,\n\t\t\tcustomizedTasks.byIdentifier,\n\t\t\tTaskConfig.TaskConfigSource.WorkspaceFile,\n\t\t);\n\t\tconst engine = configuration.config\n\t\t\t? TaskConfig.ExecutionEngine.from(configuration.config)\n\t\t\t: ExecutionEngine.Terminal;\n\t\tif (engine === ExecutionEngine.Process) {\n\t\t\tthis._notificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskSystem.versionWorkspaceFile\",\n\t\t\t\t\t\"Only tasks version 2.0.0 permitted in workspace configuration files.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\treturn {\n\t\t\tworkspaceFolder,\n\t\t\tset: { tasks: custom },\n\t\t\tconfigurations: customizedTasks,\n\t\t\thasErrors: configuration.hasParseErrors,\n\t\t};\n\t}\n\n\tprivate async _computeUserTasks(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\trunSource: TaskRunSource = TaskRunSource.User,\n\t): Promise<IWorkspaceFolderTaskResult> {\n\t\tif (this._executionEngine === ExecutionEngine.Process) {\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\tconst userTasksConfig = this._getConfiguration(\n\t\t\tworkspaceFolder,\n\t\t\tTaskSourceKind.User,\n\t\t);\n\t\tconst configuration = this._testParseExternalConfig(\n\t\t\tuserTasksConfig.config,\n\t\t\tnls.localize(\"TasksSystem.locationUserConfig\", \"user settings\"),\n\t\t);\n\t\tconst customizedTasks: {\n\t\t\tbyIdentifier: IStringDictionary<ConfiguringTask>;\n\t\t} = {\n\t\t\tbyIdentifier: Object.create(null),\n\t\t};\n\n\t\tconst custom: CustomTask[] = [];\n\t\tawait this._computeTasksForSingleConfig(\n\t\t\tworkspaceFolder,\n\t\t\tconfiguration.config,\n\t\t\trunSource,\n\t\t\tcustom,\n\t\t\tcustomizedTasks.byIdentifier,\n\t\t\tTaskConfig.TaskConfigSource.User,\n\t\t);\n\t\tconst engine = configuration.config\n\t\t\t? TaskConfig.ExecutionEngine.from(configuration.config)\n\t\t\t: ExecutionEngine.Terminal;\n\t\tif (engine === ExecutionEngine.Process) {\n\t\t\tthis._notificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskSystem.versionSettings\",\n\t\t\t\t\t\"Only tasks version 2.0.0 permitted in user settings.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\treturn {\n\t\t\tworkspaceFolder,\n\t\t\tset: { tasks: custom },\n\t\t\tconfigurations: customizedTasks,\n\t\t\thasErrors: configuration.hasParseErrors,\n\t\t};\n\t}\n\n\tprivate _emptyWorkspaceTaskResults(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t): IWorkspaceFolderTaskResult {\n\t\treturn {\n\t\t\tworkspaceFolder,\n\t\t\tset: undefined,\n\t\t\tconfigurations: undefined,\n\t\t\thasErrors: false,\n\t\t};\n\t}\n\n\tprivate async _computeTasksForSingleConfig(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined,\n\t\trunSource: TaskRunSource,\n\t\tcustom: CustomTask[],\n\t\tcustomized: IStringDictionary<ConfiguringTask>,\n\t\tsource: TaskConfig.TaskConfigSource,\n\t\tisRecentTask = false,\n\t): Promise<boolean> {\n\t\tif (!config) {\n\t\t\treturn false;\n\t\t} else if (!workspaceFolder) {\n\t\t\tthis._logService.trace(\n\t\t\t\t\"TaskService.computeTasksForSingleConfig: no workspace folder for worskspace\",\n\t\t\t\tthis._workspace?.id,\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t\tconst taskSystemInfo: ITaskSystemInfo | undefined =\n\t\t\tthis._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\tconst problemReporter = new ProblemReporter(this._outputChannel);\n\t\tconst parseResult = TaskConfig.parse(\n\t\t\tworkspaceFolder,\n\t\t\tthis._workspace,\n\t\t\ttaskSystemInfo ? taskSystemInfo.platform : Platform.platform,\n\t\t\tconfig,\n\t\t\tproblemReporter,\n\t\t\tsource,\n\t\t\tthis._contextKeyService,\n\t\t\tisRecentTask,\n\t\t);\n\t\tlet hasErrors = false;\n\t\tif (\n\t\t\t!parseResult.validationStatus.isOK() &&\n\t\t\tparseResult.validationStatus.state !== ValidationState.Info\n\t\t) {\n\t\t\tthis._showOutput(runSource);\n\t\t\thasErrors = true;\n\t\t}\n\t\tif (problemReporter.status.isFatal()) {\n\t\t\tproblemReporter.fatal(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskSystem.configurationErrors\",\n\t\t\t\t\t\"Error: the provided task configuration has validation errors and can't not be used. Please correct the errors first.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn hasErrors;\n\t\t}\n\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\tfor (const task of parseResult.configured) {\n\t\t\t\tcustomized[task.configures._key] = task;\n\t\t\t}\n\t\t}\n\t\tif (!this._jsonTasksSupported && parseResult.custom.length > 0) {\n\t\t\tconsole.warn(\"Custom workspace tasks are not supported.\");\n\t\t} else {\n\t\t\tfor (const task of parseResult.custom) {\n\t\t\t\tcustom.push(task);\n\t\t\t}\n\t\t}\n\t\treturn hasErrors;\n\t}\n\n\tprivate _computeConfiguration(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t): Promise<IWorkspaceFolderConfigurationResult> {\n\t\tconst { config, hasParseErrors } =\n\t\t\tthis._getConfiguration(workspaceFolder);\n\t\treturn Promise.resolve<IWorkspaceFolderConfigurationResult>({\n\t\t\tworkspaceFolder,\n\t\t\tconfig,\n\t\t\thasErrors: hasParseErrors,\n\t\t});\n\t}\n\n\tprotected abstract _computeLegacyConfiguration(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t): Promise<IWorkspaceFolderConfigurationResult>;\n\n\tprivate _computeWorkspaceFolderSetup(): [\n\t\tIWorkspaceFolder[],\n\t\tIWorkspaceFolder[],\n\t\tExecutionEngine,\n\t\tJsonSchemaVersion,\n\t\tIWorkspace | undefined,\n\t] {\n\t\tconst workspaceFolders: IWorkspaceFolder[] = [];\n\t\tconst ignoredWorkspaceFolders: IWorkspaceFolder[] = [];\n\t\tlet executionEngine = ExecutionEngine.Terminal;\n\t\tlet schemaVersion = JsonSchemaVersion.V2_0_0;\n\t\tlet workspace: IWorkspace | undefined;\n\t\tif (\n\t\t\tthis._contextService.getWorkbenchState() === WorkbenchState.FOLDER\n\t\t) {\n\t\t\tconst workspaceFolder: IWorkspaceFolder =\n\t\t\t\tthis._contextService.getWorkspace().folders[0];\n\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\texecutionEngine = this._computeExecutionEngine(workspaceFolder);\n\t\t\tconst telemetryData: { [key: string]: any } = {\n\t\t\t\texecutionEngineVersion: executionEngine,\n\t\t\t};\n\t\t\t/* __GDPR__\n\t\t\t\t\"taskService.engineVersion\" : {\n\t\t\t\t\t\"owner\": \"alexr00\",\n\t\t\t\t\t\"comment\": \"The engine version of tasks. Used to determine if a user is using a deprecated version.\",\n\t\t\t\t\t\"executionEngineVersion\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"comment\": \"The engine version of tasks.\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog(\n\t\t\t\t\"taskService.engineVersion\",\n\t\t\t\ttelemetryData,\n\t\t\t);\n\t\t\tschemaVersion = this._computeJsonSchemaVersion(workspaceFolder);\n\t\t} else if (\n\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\tWorkbenchState.WORKSPACE\n\t\t) {\n\t\t\tworkspace = this._contextService.getWorkspace();\n\t\t\tfor (const workspaceFolder of this._contextService.getWorkspace()\n\t\t\t\t.folders) {\n\t\t\t\tif (\n\t\t\t\t\tschemaVersion ===\n\t\t\t\t\tthis._computeJsonSchemaVersion(workspaceFolder)\n\t\t\t\t) {\n\t\t\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\t\t} else {\n\t\t\t\t\tignoredWorkspaceFolders.push(workspaceFolder);\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"taskService.ignoreingFolder\",\n\t\t\t\t\t\t\t\"Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0\",\n\t\t\t\t\t\t\tworkspaceFolder.uri.fsPath,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [\n\t\t\tworkspaceFolders,\n\t\t\tignoredWorkspaceFolders,\n\t\t\texecutionEngine,\n\t\t\tschemaVersion,\n\t\t\tworkspace,\n\t\t];\n\t}\n\n\tprivate _computeExecutionEngine(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t): ExecutionEngine {\n\t\tconst { config } = this._getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn ExecutionEngine._default;\n\t\t}\n\t\treturn TaskConfig.ExecutionEngine.from(config);\n\t}\n\n\tprivate _computeJsonSchemaVersion(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t): JsonSchemaVersion {\n\t\tconst { config } = this._getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn JsonSchemaVersion.V2_0_0;\n\t\t}\n\t\treturn TaskConfig.JsonSchemaVersion.from(config);\n\t}\n\n\tprotected _getConfiguration(\n\t\tworkspaceFolder: IWorkspaceFolder,\n\t\tsource?: string,\n\t): {\n\t\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined;\n\t\thasParseErrors: boolean;\n\t} {\n\t\tlet result;\n\t\tif (\n\t\t\tsource !== TaskSourceKind.User &&\n\t\t\tthis._contextService.getWorkbenchState() === WorkbenchState.EMPTY\n\t\t) {\n\t\t\tresult = undefined;\n\t\t} else {\n\t\t\tconst wholeConfig =\n\t\t\t\tthis._configurationService.inspect<TaskConfig.IExternalTaskRunnerConfiguration>(\n\t\t\t\t\t\"tasks\",\n\t\t\t\t\t{ resource: workspaceFolder.uri },\n\t\t\t\t);\n\t\t\tswitch (source) {\n\t\t\t\tcase TaskSourceKind.User: {\n\t\t\t\t\tif (\n\t\t\t\t\t\twholeConfig.userValue !==\n\t\t\t\t\t\twholeConfig.workspaceFolderValue\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult = Objects.deepClone(wholeConfig.userValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase TaskSourceKind.Workspace:\n\t\t\t\t\tresult = Objects.deepClone(\n\t\t\t\t\t\twholeConfig.workspaceFolderValue,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase TaskSourceKind.WorkspaceFile: {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\t\t\t\tWorkbenchState.WORKSPACE &&\n\t\t\t\t\t\twholeConfig.workspaceFolderValue !==\n\t\t\t\t\t\t\twholeConfig.workspaceValue\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult = Objects.deepClone(wholeConfig.workspaceValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tresult = Objects.deepClone(\n\t\t\t\t\t\twholeConfig.workspaceFolderValue,\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (!result) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tconst parseErrors: string[] = (result as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._log(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TaskSystem.invalidTaskJson\",\n\t\t\t\t\t\t\"Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._showOutput();\n\t\t\t\treturn { config: undefined, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config: result, hasParseErrors: false };\n\t}\n\n\tpublic inTerminal(): boolean {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem instanceof TerminalTaskSystem;\n\t\t}\n\t\treturn this._executionEngine === ExecutionEngine.Terminal;\n\t}\n\n\tpublic configureAction(): Action {\n\t\tconst thisCapture: AbstractTaskService = this;\n\t\treturn new (class extends Action {\n\t\t\tconstructor() {\n\t\t\t\tsuper(\n\t\t\t\t\tConfigureTaskAction.ID,\n\t\t\t\t\tConfigureTaskAction.TEXT.value,\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tthisCapture._runConfigureTasks();\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t})();\n\t}\n\n\tprivate _handleError(err: any): void {\n\t\tlet showOutput = true;\n\t\tif (err instanceof TaskError) {\n\t\t\tconst buildError = err;\n\t\t\tconst needsConfig =\n\t\t\t\tbuildError.code === TaskErrors.NotConfigured ||\n\t\t\t\tbuildError.code === TaskErrors.NoBuildTask ||\n\t\t\t\tbuildError.code === TaskErrors.NoTestTask;\n\t\t\tconst needsTerminate = buildError.code === TaskErrors.RunningTask;\n\t\t\tif (needsConfig || needsTerminate) {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tbuildError.severity,\n\t\t\t\t\tbuildError.message,\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: needsConfig\n\t\t\t\t\t\t\t\t? ConfigureTaskAction.TEXT.value\n\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"TerminateAction.label\",\n\t\t\t\t\t\t\t\t\t\t\"Terminate Task\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\tif (needsConfig) {\n\t\t\t\t\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis._runTerminateCommand();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._notificationService.notify({\n\t\t\t\t\tseverity: buildError.severity,\n\t\t\t\t\tmessage: buildError.message,\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (err instanceof Error) {\n\t\t\tconst error = err;\n\t\t\tthis._notificationService.error(error.message);\n\t\t\tshowOutput = false;\n\t\t} else if (Types.isString(err)) {\n\t\t\tthis._notificationService.error(<string>err);\n\t\t} else {\n\t\t\tthis._notificationService.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskSystem.unknownError\",\n\t\t\t\t\t\"An error has occurred while running a task. See task log for details.\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (showOutput) {\n\t\t\tthis._showOutput();\n\t\t}\n\t}\n\n\tprivate _showDetail(): boolean {\n\t\treturn this._configurationService.getValue<boolean>(\n\t\t\tQUICKOPEN_DETAIL_CONFIG,\n\t\t);\n\t}\n\n\tprivate async _createTaskQuickPickEntries(\n\t\ttasks: Task[],\n\t\tgroup = false,\n\t\tsort = false,\n\t\tselectedEntry?: ITaskQuickPickEntry,\n\t\tincludeRecents = true,\n\t): Promise<ITaskQuickPickEntry[]> {\n\t\tlet encounteredTasks: { [key: string]: ITaskQuickPickEntry[] } = {};\n\t\tif (tasks === undefined || tasks === null || tasks.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst TaskQuickPickEntry = (task: Task): ITaskQuickPickEntry => {\n\t\t\tconst newEntry = {\n\t\t\t\tlabel: task._label,\n\t\t\t\tdescription: this.getTaskDescription(task),\n\t\t\t\ttask,\n\t\t\t\tdetail: this._showDetail()\n\t\t\t\t\t? task.configurationProperties.detail\n\t\t\t\t\t: undefined,\n\t\t\t};\n\t\t\tif (encounteredTasks[task._id]) {\n\t\t\t\tif (encounteredTasks[task._id].length === 1) {\n\t\t\t\t\tencounteredTasks[task._id][0].label += \" (1)\";\n\t\t\t\t}\n\t\t\t\tnewEntry.label =\n\t\t\t\t\tnewEntry.label +\n\t\t\t\t\t\" (\" +\n\t\t\t\t\t(encounteredTasks[task._id].length + 1).toString() +\n\t\t\t\t\t\")\";\n\t\t\t} else {\n\t\t\t\tencounteredTasks[task._id] = [];\n\t\t\t}\n\t\t\tencounteredTasks[task._id].push(newEntry);\n\t\t\treturn newEntry;\n\t\t};\n\t\tfunction fillEntries(\n\t\t\tentries: QuickPickInput<ITaskQuickPickEntry>[],\n\t\t\ttasks: Task[],\n\t\t\tgroupLabel: string,\n\t\t): void {\n\t\t\tif (tasks.length) {\n\t\t\t\tentries.push({ type: \"separator\", label: groupLabel });\n\t\t\t}\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst entry: ITaskQuickPickEntry = TaskQuickPickEntry(task);\n\t\t\t\tentry.buttons = [\n\t\t\t\t\t{\n\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(configureTaskIcon),\n\t\t\t\t\t\ttooltip: nls.localize(\n\t\t\t\t\t\t\t\"configureTask\",\n\t\t\t\t\t\t\t\"Configure Task\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t\tif (selectedEntry && task === selectedEntry.task) {\n\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t} else {\n\t\t\t\t\tentries.push(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet entries: ITaskQuickPickEntry[];\n\t\tif (group) {\n\t\t\tentries = [];\n\t\t\tif (tasks.length === 1) {\n\t\t\t\tentries.push(TaskQuickPickEntry(tasks[0]));\n\t\t\t} else {\n\t\t\t\tconst recentlyUsedTasks =\n\t\t\t\t\tawait this.getSavedTasks(\"historical\");\n\t\t\t\tconst recent: Task[] = [];\n\t\t\t\tconst recentSet: Set<string> = new Set();\n\t\t\t\tlet configured: Task[] = [];\n\t\t\t\tlet detected: Task[] = [];\n\t\t\t\tconst taskMap: IStringDictionary<Task> = Object.create(null);\n\t\t\t\ttasks.forEach((task) => {\n\t\t\t\t\tconst key = task.getCommonTaskId();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\ttaskMap[key] = task;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\trecentlyUsedTasks.reverse().forEach((recentTask) => {\n\t\t\t\t\tconst key = recentTask.getCommonTaskId();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\trecentSet.add(key);\n\t\t\t\t\t\tconst task = taskMap[key];\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\trecent.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst key = task.getCommonTaskId();\n\t\t\t\t\tif (!key || !recentSet.has(key)) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttask._source.kind === TaskSourceKind.Workspace ||\n\t\t\t\t\t\t\ttask._source.kind === TaskSourceKind.User\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconfigured.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdetected.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\tif (includeRecents) {\n\t\t\t\t\tfillEntries(\n\t\t\t\t\t\tentries,\n\t\t\t\t\t\trecent,\n\t\t\t\t\t\tnls.localize(\"recentlyUsed\", \"recently used tasks\"),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconfigured = configured.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(\n\t\t\t\t\tentries,\n\t\t\t\t\tconfigured,\n\t\t\t\t\tnls.localize(\"configured\", \"configured tasks\"),\n\t\t\t\t);\n\t\t\t\tdetected = detected.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(\n\t\t\t\t\tentries,\n\t\t\t\t\tdetected,\n\t\t\t\t\tnls.localize(\"detected\", \"detected tasks\"),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (sort) {\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\ttasks = tasks.sort((a, b) => sorter.compare(a, b));\n\t\t\t}\n\t\t\tentries = tasks.map<ITaskQuickPickEntry>((task) =>\n\t\t\t\tTaskQuickPickEntry(task),\n\t\t\t);\n\t\t}\n\t\tencounteredTasks = {};\n\t\treturn entries;\n\t}\n\tprivate async _showTwoLevelQuickPick(\n\t\tplaceHolder: string,\n\t\tdefaultEntry?: ITaskQuickPickEntry,\n\t\ttype?: string,\n\t\tname?: string,\n\t) {\n\t\treturn this._instantiationService\n\t\t\t.createInstance(TaskQuickPick)\n\t\t\t.show(placeHolder, defaultEntry, type, name);\n\t}\n\n\tprivate async _showQuickPick(\n\t\ttasks: Promise<Task[]> | Task[],\n\t\tplaceHolder: string,\n\t\tdefaultEntry?: ITaskQuickPickEntry,\n\t\tgroup = false,\n\t\tsort = false,\n\t\tselectedEntry?: ITaskQuickPickEntry,\n\t\tadditionalEntries?: ITaskQuickPickEntry[],\n\t\tname?: string,\n\t): Promise<ITaskQuickPickEntry | undefined | null> {\n\t\tconst resolvedTasks = await tasks;\n\t\tconst entries:\n\t\t\t| (ITaskQuickPickEntry | IQuickPickSeparator)[]\n\t\t\t| undefined = await raceTimeout(\n\t\t\tthis._createTaskQuickPickEntries(\n\t\t\t\tresolvedTasks,\n\t\t\t\tgroup,\n\t\t\t\tsort,\n\t\t\t\tselectedEntry,\n\t\t\t),\n\t\t\t200,\n\t\t\t() => undefined,\n\t\t);\n\t\tif (!entries) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (\n\t\t\tentries.length === 1 &&\n\t\t\tthis._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)\n\t\t) {\n\t\t\treturn <ITaskQuickPickEntry>entries[0];\n\t\t} else if (entries.length === 0 && defaultEntry) {\n\t\t\tentries.push(defaultEntry);\n\t\t} else if (\n\t\t\tentries.length > 1 &&\n\t\t\tadditionalEntries &&\n\t\t\tadditionalEntries.length > 0\n\t\t) {\n\t\t\tentries.push({ type: \"separator\", label: \"\" });\n\t\t\tentries.push(additionalEntries[0]);\n\t\t}\n\n\t\treturn this._quickInputService.pick<ITaskQuickPickEntry>(entries, {\n\t\t\tvalue: name,\n\t\t\tplaceHolder,\n\t\t\tmatchOnDescription: true,\n\t\t\tonDidTriggerItemButton: (context) => {\n\t\t\t\tconst task = context.item.task;\n\t\t\t\tthis._quickInputService.cancel();\n\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\tthis.customize(task, undefined, true);\n\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate _needsRecentTasksMigration(): boolean {\n\t\treturn (\n\t\t\tthis.getRecentlyUsedTasksV1().size > 0 &&\n\t\t\tthis._getTasksFromStorage(\"historical\").size === 0\n\t\t);\n\t}\n\n\tprivate async _migrateRecentTasks(tasks: Task[]) {\n\t\tif (!this._needsRecentTasksMigration()) {\n\t\t\treturn;\n\t\t}\n\t\tconst recentlyUsedTasks = this.getRecentlyUsedTasksV1();\n\t\tconst taskMap: IStringDictionary<Task> = Object.create(null);\n\t\ttasks.forEach((task) => {\n\t\t\tconst key = task.getKey();\n\t\t\tif (key) {\n\t\t\t\ttaskMap[key] = task;\n\t\t\t}\n\t\t});\n\t\tconst reversed = [...recentlyUsedTasks.keys()].reverse();\n\t\tfor (const key in reversed) {\n\t\t\tconst task = taskMap[key];\n\t\t\tif (task) {\n\t\t\t\tawait this._setRecentlyUsedTask(task);\n\t\t\t}\n\t\t}\n\t\tthis._storageService.remove(\n\t\t\tAbstractTaskService.RecentlyUsedTasks_Key,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t}\n\n\tprivate _showIgnoredFoldersMessage(): Promise<void> {\n\t\tif (\n\t\t\tthis.ignoredWorkspaceFolders.length === 0 ||\n\t\t\t!this.showIgnoreMessage\n\t\t) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize(\n\t\t\t\t\"TaskService.ignoredFolder\",\n\t\t\t\t\"The following workspace folders are ignored since they use task version 0.1.0: {0}\",\n\t\t\t\tthis.ignoredWorkspaceFolders.map((f) => f.name).join(\", \"),\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"TaskService.notAgain\",\n\t\t\t\t\t\t\"Don't Show Again\",\n\t\t\t\t\t),\n\t\t\t\t\tisSecondary: true,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._storageService.store(\n\t\t\t\t\t\t\tAbstractTaskService.IgnoreTask010DonotShowAgain_key,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._showIgnoreMessage = false;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate async _trust(): Promise<boolean> {\n\t\tif (ServerlessWebContext && !TaskExecutionSupportedContext) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this._workspaceTrustManagementService.workspaceTrustInitialized;\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn (\n\t\t\t\t(await this._workspaceTrustRequestService.requestWorkspaceTrust(\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\"TaskService.requestTrust\",\n\t\t\t\t\t\t\t\"Listing and running tasks requires that some of the files in this workspace be executed as code.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t)) === true\n\t\t\t);\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async _runTaskCommand(\n\t\tfilter?: string | ITaskIdentifier,\n\t): Promise<void> {\n\t\tif (!this._tasksReconnected) {\n\t\t\treturn;\n\t\t}\n\t\tif (!filter) {\n\t\t\treturn this._doRunTaskCommand();\n\t\t}\n\t\tconst type = typeof filter === \"string\" ? undefined : filter.type;\n\t\tconst taskName = typeof filter === \"string\" ? filter : filter.task;\n\t\tconst grouped = await this._getGroupedTasks({ type });\n\t\tconst identifier = this._getTaskIdentifier(filter);\n\t\tconst tasks = grouped.all();\n\t\tconst resolver = this._createResolver(grouped);\n\t\tconst folderURIs: (URI | string)[] = this._contextService\n\t\t\t.getWorkspace()\n\t\t\t.folders.map((folder) => folder.uri);\n\t\tif (\n\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\tWorkbenchState.WORKSPACE\n\t\t) {\n\t\t\tfolderURIs.push(this._contextService.getWorkspace().configuration!);\n\t\t}\n\t\tfolderURIs.push(USER_TASKS_GROUP_KEY);\n\t\tif (identifier) {\n\t\t\tfor (const uri of folderURIs) {\n\t\t\t\tconst task = await resolver.resolve(uri, identifier);\n\t\t\t\tif (task) {\n\t\t\t\t\tthis.run(task);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst exactMatchTask = taskName\n\t\t\t? tasks.find(\n\t\t\t\t\t(t) =>\n\t\t\t\t\t\tt.configurationProperties.identifier === taskName ||\n\t\t\t\t\t\tt.getDefinition(true)?.configurationProperties\n\t\t\t\t\t\t\t?.identifier === taskName,\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tif (!exactMatchTask) {\n\t\t\treturn this._doRunTaskCommand(tasks, type, taskName);\n\t\t}\n\t\tfor (const uri of folderURIs) {\n\t\t\tconst task = await resolver.resolve(uri, taskName);\n\t\t\tif (task) {\n\t\t\t\tawait this.run(\n\t\t\t\t\ttask,\n\t\t\t\t\t{ attachProblemMatcher: true },\n\t\t\t\t\tTaskRunSource.User,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _tasksAndGroupedTasks(filter?: ITaskFilter): {\n\t\ttasks: Promise<Task[]>;\n\t\tgrouped: Promise<TaskMap>;\n\t} {\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn {\n\t\t\t\ttasks: Promise.resolve<Task[]>([]),\n\t\t\t\tgrouped: Promise.resolve(new TaskMap()),\n\t\t\t};\n\t\t}\n\t\tconst grouped = this._getGroupedTasks(filter);\n\t\tconst tasks = grouped.then((map) => {\n\t\t\tif (!filter || !filter.type) {\n\t\t\t\treturn map.all();\n\t\t\t}\n\t\t\tconst result: Task[] = [];\n\t\t\tmap.forEach((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tContributedTask.is(task) &&\n\t\t\t\t\t\ttask.defines.type === filter.type\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst customizes = task.customizes();\n\t\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t\treturn { tasks, grouped };\n\t}\n\n\tprivate _doRunTaskCommand(\n\t\ttasks?: Task[],\n\t\ttype?: string,\n\t\tname?: string,\n\t): void {\n\t\tconst pickThen = (task: Task | undefined | null) => {\n\t\t\tif (task === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (task === null) {\n\t\t\t\tthis._runConfigureTasks();\n\t\t\t} else {\n\t\t\t\tthis.run(\n\t\t\t\t\ttask,\n\t\t\t\t\t{ attachProblemMatcher: true },\n\t\t\t\t\tTaskRunSource.User,\n\t\t\t\t).then(undefined, (reason) => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst placeholder = nls.localize(\n\t\t\t\"TaskService.pickRunTask\",\n\t\t\t\"Select the task to run\",\n\t\t);\n\n\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\tif (this._configurationService.getValue(USE_SLOW_PICKER)) {\n\t\t\t\tlet taskResult:\n\t\t\t\t\t| { tasks: Promise<Task[]>; grouped: Promise<TaskMap> }\n\t\t\t\t\t| undefined;\n\t\t\t\tif (!tasks) {\n\t\t\t\t\ttaskResult = this._tasksAndGroupedTasks();\n\t\t\t\t}\n\t\t\t\tthis._showQuickPick(\n\t\t\t\t\ttasks ? tasks : taskResult!.tasks,\n\t\t\t\t\tplaceholder,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\t\"$(plus) \" +\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"TaskService.noEntryToRun\",\n\t\t\t\t\t\t\t\t\"Configure a Task\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\ttask: null,\n\t\t\t\t\t},\n\t\t\t\t\ttrue,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tname,\n\t\t\t\t).then((entry) => {\n\t\t\t\t\treturn pickThen(entry ? entry.task : undefined);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._showTwoLevelQuickPick(\n\t\t\t\t\tplaceholder,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\t\"$(plus) \" +\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"TaskService.noEntryToRun\",\n\t\t\t\t\t\t\t\t\"Configure a Task\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\ttask: null,\n\t\t\t\t\t},\n\t\t\t\t\ttype,\n\t\t\t\t\tname,\n\t\t\t\t).then(pickThen);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _reRunTaskCommand(): void {\n\t\tProblemMatcherRegistry.onReady().then(() => {\n\t\t\treturn this._editorService\n\t\t\t\t.saveAll({ reason: SaveReason.AUTO })\n\t\t\t\t.then(() => {\n\t\t\t\t\t// make sure all dirty editors are saved\n\t\t\t\t\tconst executeResult = this._getTaskSystem().rerun();\n\t\t\t\t\tif (executeResult) {\n\t\t\t\t\t\treturn this._handleExecuteResult(executeResult);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this._taskRunningState.get()) {\n\t\t\t\t\t\t\t// No task running, prompt to ask which to run\n\t\t\t\t\t\t\tthis._doRunTaskCommand();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param tasks - The tasks which need to be filtered\n\t * @param tasksInList - This tells splitPerGroupType to filter out globbed tasks (into defaults)\n\t * @returns\n\t */\n\tprivate _getDefaultTasks(tasks: Task[], taskGlobsInList = false): Task[] {\n\t\tconst defaults: Task[] = [];\n\t\tfor (const task of tasks.filter(\n\t\t\t(t) => !!t.configurationProperties.group,\n\t\t)) {\n\t\t\t// At this point (assuming taskGlobsInList is true) there are tasks with matching globs, so only put those in defaults\n\t\t\tif (\n\t\t\t\ttaskGlobsInList &&\n\t\t\t\ttypeof (task.configurationProperties.group as TaskGroup)\n\t\t\t\t\t.isDefault === \"string\"\n\t\t\t) {\n\t\t\t\tdefaults.push(task);\n\t\t\t} else if (\n\t\t\t\t!taskGlobsInList &&\n\t\t\t\t(task.configurationProperties.group as TaskGroup).isDefault ===\n\t\t\t\t\ttrue\n\t\t\t) {\n\t\t\t\tdefaults.push(task);\n\t\t\t}\n\t\t}\n\t\treturn defaults;\n\t}\n\n\tprivate _runTaskGroupCommand(\n\t\ttaskGroup: TaskGroup,\n\t\tstrings: {\n\t\t\tfetching: string;\n\t\t\tselect: string;\n\t\t\tnotFoundConfigure: string;\n\t\t},\n\t\tconfigure: () => void,\n\t\tlegacyCommand: () => void,\n\t): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\tlegacyCommand();\n\t\t\treturn;\n\t\t}\n\t\tconst options: IProgressOptions = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: strings.fetching,\n\t\t};\n\t\tconst promise = (async () => {\n\t\t\tasync function runSingleTask(\n\t\t\t\ttask: Task | undefined,\n\t\t\t\tproblemMatcherOptions: IProblemMatcherRunOptions | undefined,\n\t\t\t\tthat: AbstractTaskService,\n\t\t\t) {\n\t\t\t\tthat.run(task, problemMatcherOptions, TaskRunSource.User).then(\n\t\t\t\t\tundefined,\n\t\t\t\t\t(reason) => {\n\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst chooseAndRunTask = (tasks: Task[]) => {\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis._showQuickPick(\n\t\t\t\t\t\ttasks,\n\t\t\t\t\t\tstrings.select,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: strings.notFoundConfigure,\n\t\t\t\t\t\t\ttask: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t).then((entry) => {\n\t\t\t\t\t\tconst task: Task | undefined | null = entry\n\t\t\t\t\t\t\t? entry.task\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\tif (task === undefined) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (task === null) {\n\t\t\t\t\t\t\tconfigure.apply(this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunSingleTask(\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t{ attachProblemMatcher: true },\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\tlet groupTasks: (Task | ConfiguringTask)[] = [];\n\t\t\tconst { globGroupTasks, globTasksDetected } =\n\t\t\t\tawait this._getGlobTasks(taskGroup._id);\n\t\t\tgroupTasks = [...globGroupTasks];\n\t\t\tif (!globTasksDetected && groupTasks.length === 0) {\n\t\t\t\tgroupTasks = await this._findWorkspaceTasksInGroup(\n\t\t\t\t\ttaskGroup,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst handleMultipleTasks = (areGlobTasks: boolean) => {\n\t\t\t\treturn this._getTasksForGroup(taskGroup).then((tasks) => {\n\t\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\t\t// If we're dealing with tasks that were chosen because of a glob match,\n\t\t\t\t\t\t// then put globs in the defaults and everything else in none\n\t\t\t\t\t\tconst defaults = this._getDefaultTasks(\n\t\t\t\t\t\t\ttasks,\n\t\t\t\t\t\t\tareGlobTasks,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\t\t\trunSingleTask(defaults[0], undefined, this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (defaults.length > 0) {\n\t\t\t\t\t\t\ttasks = defaults;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// At this this point there are multiple tasks.\n\t\t\t\t\tchooseAndRunTask(tasks);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst resolveTaskAndRun = (\n\t\t\t\ttaskGroupTask: Task | ConfiguringTask,\n\t\t\t) => {\n\t\t\t\tif (ConfiguringTask.is(taskGroupTask)) {\n\t\t\t\t\tthis.tryResolveTask(taskGroupTask).then((resolvedTask) => {\n\t\t\t\t\t\trunSingleTask(resolvedTask, undefined, this);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\trunSingleTask(taskGroupTask, undefined, this);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// A single default glob task was returned, just run it directly\n\t\t\tif (groupTasks.length === 1) {\n\t\t\t\treturn resolveTaskAndRun(groupTasks[0]);\n\t\t\t}\n\n\t\t\t// If there's multiple globs that match we want to show the quick picker for those tasks\n\t\t\t// We will need to call splitPerGroupType putting globs in defaults and the remaining tasks in none.\n\t\t\t// We don't need to carry on after here\n\t\t\tif (globTasksDetected && groupTasks.length > 1) {\n\t\t\t\treturn handleMultipleTasks(true);\n\t\t\t}\n\n\t\t\t// If no globs are found or matched fallback to checking for default tasks of the task group\n\t\t\tif (!groupTasks.length) {\n\t\t\t\tgroupTasks = await this._findWorkspaceTasksInGroup(\n\t\t\t\t\ttaskGroup,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (groupTasks.length === 1) {\n\t\t\t\t// A single default task was returned, just run it directly\n\t\t\t\treturn resolveTaskAndRun(groupTasks[0]);\n\t\t\t}\n\t\t\t// Multiple default tasks returned, show the quickPicker\n\t\t\treturn handleMultipleTasks(false);\n\t\t})();\n\t\tthis._progressService.withProgress(options, () => promise);\n\t}\n\n\tprivate async _getGlobTasks(\n\t\ttaskGroupId: string,\n\t): Promise<{\n\t\tglobGroupTasks: (Task | ConfiguringTask)[];\n\t\tglobTasksDetected: boolean;\n\t}> {\n\t\tlet globTasksDetected = false;\n\t\t// First check for globs before checking for the default tasks of the task group\n\t\tconst absoluteURI = EditorResourceAccessor.getOriginalUri(\n\t\t\tthis._editorService.activeEditor,\n\t\t);\n\t\tif (absoluteURI) {\n\t\t\tconst workspaceFolder =\n\t\t\t\tthis._contextService.getWorkspaceFolder(absoluteURI);\n\t\t\tif (workspaceFolder) {\n\t\t\t\tconst configuredTasks =\n\t\t\t\t\tthis._getConfiguration(workspaceFolder)?.config?.tasks;\n\t\t\t\tif (configuredTasks) {\n\t\t\t\t\tglobTasksDetected =\n\t\t\t\t\t\tconfiguredTasks.filter(\n\t\t\t\t\t\t\t(task) =>\n\t\t\t\t\t\t\t\ttask.group &&\n\t\t\t\t\t\t\t\ttypeof task.group !== \"string\" &&\n\t\t\t\t\t\t\t\ttypeof task.group.isDefault === \"string\",\n\t\t\t\t\t\t).length > 0;\n\t\t\t\t\t// This will activate extensions, so only do so if necessary #185960\n\t\t\t\t\tif (globTasksDetected) {\n\t\t\t\t\t\t// Fallback to absolute path of the file if it is not in a workspace or relative path cannot be found\n\t\t\t\t\t\tconst relativePath = workspaceFolder?.uri\n\t\t\t\t\t\t\t? (resources.relativePath(\n\t\t\t\t\t\t\t\t\tworkspaceFolder.uri,\n\t\t\t\t\t\t\t\t\tabsoluteURI,\n\t\t\t\t\t\t\t\t) ?? absoluteURI.path)\n\t\t\t\t\t\t\t: absoluteURI.path;\n\n\t\t\t\t\t\tconst globGroupTasks = await this._findWorkspaceTasks(\n\t\t\t\t\t\t\t(task) => {\n\t\t\t\t\t\t\t\tconst currentTaskGroup =\n\t\t\t\t\t\t\t\t\ttask.configurationProperties.group;\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tcurrentTaskGroup &&\n\t\t\t\t\t\t\t\t\ttypeof currentTaskGroup !== \"string\" &&\n\t\t\t\t\t\t\t\t\ttypeof currentTaskGroup.isDefault ===\n\t\t\t\t\t\t\t\t\t\t\"string\"\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\tcurrentTaskGroup._id === taskGroupId &&\n\t\t\t\t\t\t\t\t\t\tglob.match(\n\t\t\t\t\t\t\t\t\t\t\tcurrentTaskGroup.isDefault,\n\t\t\t\t\t\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tglobTasksDetected = false;\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn { globGroupTasks, globTasksDetected };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { globGroupTasks: [], globTasksDetected };\n\t}\n\n\tprivate _runBuildCommand(): void {\n\t\tif (!this._tasksReconnected) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._runTaskGroupCommand(\n\t\t\tTaskGroup.Build,\n\t\t\t{\n\t\t\t\tfetching: nls.localize(\n\t\t\t\t\t\"TaskService.fetchingBuildTasks\",\n\t\t\t\t\t\"Fetching build tasks...\",\n\t\t\t\t),\n\t\t\t\tselect: nls.localize(\n\t\t\t\t\t\"TaskService.pickBuildTask\",\n\t\t\t\t\t\"Select the build task to run\",\n\t\t\t\t),\n\t\t\t\tnotFoundConfigure: nls.localize(\n\t\t\t\t\t\"TaskService.noBuildTask\",\n\t\t\t\t\t\"No build task to run found. Configure Build Task...\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tthis._runConfigureDefaultBuildTask,\n\t\t\tthis._build,\n\t\t);\n\t}\n\n\tprivate _runTestCommand(): void {\n\t\treturn this._runTaskGroupCommand(\n\t\t\tTaskGroup.Test,\n\t\t\t{\n\t\t\t\tfetching: nls.localize(\n\t\t\t\t\t\"TaskService.fetchingTestTasks\",\n\t\t\t\t\t\"Fetching test tasks...\",\n\t\t\t\t),\n\t\t\t\tselect: nls.localize(\n\t\t\t\t\t\"TaskService.pickTestTask\",\n\t\t\t\t\t\"Select the test task to run\",\n\t\t\t\t),\n\t\t\t\tnotFoundConfigure: nls.localize(\n\t\t\t\t\t\"TaskService.noTestTaskTerminal\",\n\t\t\t\t\t\"No test task to run found. Configure Tasks...\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tthis._runConfigureDefaultTestTask,\n\t\t\tthis._runTest,\n\t\t);\n\t}\n\n\tprivate _runTerminateCommand(arg?: any): void {\n\t\tif (arg === \"terminateAll\") {\n\t\t\tthis._terminateAll();\n\t\t\treturn;\n\t\t}\n\t\tconst runQuickPick = (promise?: Promise<Task[]>) => {\n\t\t\tthis._showQuickPick(\n\t\t\t\tpromise || this.getActiveTasks(),\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.taskToTerminate\",\n\t\t\t\t\t\"Select a task to terminate\",\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"TaskService.noTaskRunning\",\n\t\t\t\t\t\t\"No task is currently running\",\n\t\t\t\t\t),\n\t\t\t\t\ttask: undefined,\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tundefined,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\"TaskService.terminateAllRunningTasks\",\n\t\t\t\t\t\t\t\"All Running Tasks\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tid: \"terminateAll\",\n\t\t\t\t\t\ttask: undefined,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t).then((entry) => {\n\t\t\t\tif (entry && entry.id === \"terminateAll\") {\n\t\t\t\t\tthis._terminateAll();\n\t\t\t\t}\n\t\t\t\tconst task: Task | undefined | null = entry\n\t\t\t\t\t? entry.task\n\t\t\t\t\t: undefined;\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.terminate(task);\n\t\t\t});\n\t\t};\n\t\tif (this.inTerminal()) {\n\t\t\tconst identifier = this._getTaskIdentifier(arg);\n\t\t\tlet promise: Promise<Task[]>;\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tpromise = this.getActiveTasks();\n\t\t\t\tpromise.then((tasks) => {\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\t\tthis.terminate(task);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trunQuickPick(promise);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trunQuickPick();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._isActive().then((active) => {\n\t\t\t\tif (active) {\n\t\t\t\t\tthis._terminateAll().then((responses) => {\n\t\t\t\t\t\t// the output runner has only one task\n\t\t\t\t\t\tconst response = responses[0];\n\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tresponse.code &&\n\t\t\t\t\t\t\tresponse.code ===\n\t\t\t\t\t\t\t\tTerminateResponseCode.ProcessNotFound\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis._notificationService.error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"TerminateAction.noProcess\",\n\t\t\t\t\t\t\t\t\t\"The launched process doesn't exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._notificationService.error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"TerminateAction.failed\",\n\t\t\t\t\t\t\t\t\t\"Failed to terminate running task\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _runRestartTaskCommand(arg?: any): Promise<void> {\n\t\tconst activeTasks = await this.getActiveTasks();\n\n\t\tif (activeTasks.length === 1) {\n\t\t\tthis._restart(activeTasks[0]);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.inTerminal()) {\n\t\t\t// try dispatching using task identifier\n\t\t\tconst identifier = this._getTaskIdentifier(arg);\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tfor (const task of activeTasks) {\n\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\tthis._restart(task);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// show quick pick with active tasks\n\t\t\tconst entry = await this._showQuickPick(\n\t\t\t\tactiveTasks,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.taskToRestart\",\n\t\t\t\t\t\"Select the task to restart\",\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"TaskService.noTaskToRestart\",\n\t\t\t\t\t\t\"No task to restart\",\n\t\t\t\t\t),\n\t\t\t\t\ttask: null,\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tif (entry && entry.task) {\n\t\t\t\tthis._restart(entry.task);\n\t\t\t}\n\t\t} else if (activeTasks.length > 0) {\n\t\t\tthis._restart(activeTasks[0]);\n\t\t}\n\t}\n\n\tprivate _getTaskIdentifier(\n\t\tfilter?: string | ITaskIdentifier,\n\t): string | KeyedTaskIdentifier | undefined {\n\t\tlet result: string | KeyedTaskIdentifier | undefined;\n\t\tif (Types.isString(filter)) {\n\t\t\tresult = filter;\n\t\t} else if (filter && Types.isString(filter.type)) {\n\t\t\tresult = TaskDefinition.createTaskIdentifier(filter, console);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _configHasTasks(\n\t\ttaskConfig?: TaskConfig.IExternalTaskRunnerConfiguration,\n\t): boolean {\n\t\treturn (\n\t\t\t!!taskConfig && !!taskConfig.tasks && taskConfig.tasks.length > 0\n\t\t);\n\t}\n\n\tprivate _openTaskFile(resource: URI, taskSource: string) {\n\t\tlet configFileCreated = false;\n\t\tthis._fileService\n\t\t\t.stat(resource)\n\t\t\t.then(\n\t\t\t\t(stat) => stat,\n\t\t\t\t() => undefined,\n\t\t\t)\n\t\t\t.then(async (stat) => {\n\t\t\t\tconst fileExists: boolean = !!stat;\n\t\t\t\tconst configValue =\n\t\t\t\t\tthis._configurationService.inspect<TaskConfig.IExternalTaskRunnerConfiguration>(\n\t\t\t\t\t\t\"tasks\",\n\t\t\t\t\t\t{ resource },\n\t\t\t\t\t);\n\t\t\t\tlet tasksExistInFile: boolean;\n\t\t\t\tlet target: ConfigurationTarget;\n\t\t\t\tswitch (taskSource) {\n\t\t\t\t\tcase TaskSourceKind.User:\n\t\t\t\t\t\ttasksExistInFile = this._configHasTasks(\n\t\t\t\t\t\t\tconfigValue.userValue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttarget = ConfigurationTarget.USER;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TaskSourceKind.WorkspaceFile:\n\t\t\t\t\t\ttasksExistInFile = this._configHasTasks(\n\t\t\t\t\t\t\tconfigValue.workspaceValue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttasksExistInFile = this._configHasTasks(\n\t\t\t\t\t\t\tconfigValue.workspaceFolderValue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t\t}\n\t\t\t\tlet content;\n\t\t\t\tif (!tasksExistInFile) {\n\t\t\t\t\tconst pickTemplateResult =\n\t\t\t\t\t\tawait this._quickInputService.pick(getTaskTemplates(), {\n\t\t\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t\t\t\"TaskService.template\",\n\t\t\t\t\t\t\t\t\"Select a Task Template\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\tif (!pickTemplateResult) {\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tcontent = pickTemplateResult.content;\n\t\t\t\t\tconst editorConfig =\n\t\t\t\t\t\tthis._configurationService.getValue() as any;\n\t\t\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\t\t\tcontent = content.replace(\n\t\t\t\t\t\t\t/(\\n)(\\t+)/g,\n\t\t\t\t\t\t\t(_, s1, s2) =>\n\t\t\t\t\t\t\t\ts1 +\n\t\t\t\t\t\t\t\t\" \".repeat(\n\t\t\t\t\t\t\t\t\ts2.length * editorConfig.editor.tabSize,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconfigFileCreated = true;\n\t\t\t\t}\n\n\t\t\t\tif (!fileExists && content) {\n\t\t\t\t\treturn this._textFileService\n\t\t\t\t\t\t.create([{ resource, value: content }])\n\t\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\t\treturn result[0].resource;\n\t\t\t\t\t\t});\n\t\t\t\t} else if (fileExists && (tasksExistInFile || content)) {\n\t\t\t\t\tconst statResource = stat?.resource;\n\t\t\t\t\tif (content && statResource) {\n\t\t\t\t\t\tthis._configurationService.updateValue(\n\t\t\t\t\t\t\t\"tasks\",\n\t\t\t\t\t\t\tjson.parse(content),\n\t\t\t\t\t\t\t{ resource: statResource },\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn statResource;\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._editorService.openEditor({\n\t\t\t\t\tresource,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: configFileCreated, // pin only if config file is created #8727\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate _isTaskEntry(\n\t\tvalue: IQuickPickItem,\n\t): value is IQuickPickItem & { task: Task } {\n\t\tconst candidate: IQuickPickItem & { task: Task } = value as any;\n\t\treturn candidate && !!candidate.task;\n\t}\n\n\tprivate _isSettingEntry(\n\t\tvalue: IQuickPickItem,\n\t): value is IQuickPickItem & { settingType: string } {\n\t\tconst candidate: IQuickPickItem & { settingType: string } =\n\t\t\tvalue as any;\n\t\treturn candidate && !!candidate.settingType;\n\t}\n\n\tprivate _configureTask(task: Task) {\n\t\tif (ContributedTask.is(task)) {\n\t\t\tthis.customize(task, undefined, true);\n\t\t} else if (CustomTask.is(task)) {\n\t\t\tthis.openConfig(task);\n\t\t} else if (ConfiguringTask.is(task)) {\n\t\t\t// Do nothing.\n\t\t}\n\t}\n\n\tprivate _handleSelection(selection: TaskQuickPickEntryType | undefined) {\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._isTaskEntry(selection)) {\n\t\t\tthis._configureTask(selection.task);\n\t\t} else if (this._isSettingEntry(selection)) {\n\t\t\tconst taskQuickPick =\n\t\t\t\tthis._instantiationService.createInstance(TaskQuickPick);\n\t\t\ttaskQuickPick.handleSettingOption(selection.settingType);\n\t\t} else if (\n\t\t\tselection.folder &&\n\t\t\tthis._contextService.getWorkbenchState() !== WorkbenchState.EMPTY\n\t\t) {\n\t\t\tthis._openTaskFile(\n\t\t\t\tselection.folder.toResource(\".vscode/tasks.json\"),\n\t\t\t\tTaskSourceKind.Workspace,\n\t\t\t);\n\t\t} else {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.User);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.User);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getTaskDescription(\n\t\ttask: Task | ConfiguringTask,\n\t): string | undefined {\n\t\tlet description: string | undefined;\n\t\tif (task._source.kind === TaskSourceKind.User) {\n\t\t\tdescription = nls.localize(\"taskQuickPick.userSettings\", \"User\");\n\t\t} else if (task._source.kind === TaskSourceKind.WorkspaceFile) {\n\t\t\tdescription = task.getWorkspaceFileName();\n\t\t} else if (this.needsFolderQualification()) {\n\t\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\t\tif (workspaceFolder) {\n\t\t\t\tdescription = workspaceFolder.name;\n\t\t\t}\n\t\t}\n\t\treturn description;\n\t}\n\n\tprivate async _runConfigureTasks(): Promise<void> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet taskPromise: Promise<TaskMap>;\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\ttaskPromise = this._getGroupedTasks();\n\t\t} else {\n\t\t\ttaskPromise = Promise.resolve(new TaskMap());\n\t\t}\n\n\t\tconst stats = this._contextService\n\t\t\t.getWorkspace()\n\t\t\t.folders.map<Promise<IFileStatWithPartialMetadata | undefined>>(\n\t\t\t\t(folder) => {\n\t\t\t\t\treturn this._fileService\n\t\t\t\t\t\t.stat(folder.toResource(\".vscode/tasks.json\"))\n\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t(stat) => stat,\n\t\t\t\t\t\t\t() => undefined,\n\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tconst createLabel = nls.localize(\n\t\t\t\"TaskService.createJsonFile\",\n\t\t\t\"Create tasks.json file from template\",\n\t\t);\n\t\tconst openLabel = nls.localize(\n\t\t\t\"TaskService.openJsonFile\",\n\t\t\t\"Open tasks.json file\",\n\t\t);\n\t\tconst tokenSource = new CancellationTokenSource();\n\t\tconst cancellationToken: CancellationToken = tokenSource.token;\n\t\tconst entries = Promise.all(stats).then((stats) => {\n\t\t\treturn taskPromise.then((taskMap) => {\n\t\t\t\tconst entries: QuickPickInput<TaskQuickPickEntryType>[] = [];\n\t\t\t\tlet configuredCount = 0;\n\t\t\t\tlet tasks = taskMap.all();\n\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\ttasks = tasks.sort((a, b) =>\n\t\t\t\t\t\ta._label.localeCompare(b._label),\n\t\t\t\t\t);\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tconst entry = {\n\t\t\t\t\t\t\tlabel: TaskQuickPick.getTaskLabelWithIcon(task),\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tdescription: this.getTaskDescription(task),\n\t\t\t\t\t\t\tdetail: this._showDetail()\n\t\t\t\t\t\t\t\t? task.configurationProperties.detail\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tTaskQuickPick.applyColorStyles(\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tentry,\n\t\t\t\t\t\t\tthis._themeService,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\tconfiguredCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst needsCreateOrOpen = configuredCount === 0;\n\t\t\t\t// If the only configured tasks are user tasks, then we should also show the option to create from a template.\n\t\t\t\tif (\n\t\t\t\t\tneedsCreateOrOpen ||\n\t\t\t\t\ttaskMap.get(USER_TASKS_GROUP_KEY).length === configuredCount\n\t\t\t\t) {\n\t\t\t\t\tconst label =\n\t\t\t\t\t\tstats[0] !== undefined ? openLabel : createLabel;\n\t\t\t\t\tif (entries.length) {\n\t\t\t\t\t\tentries.push({ type: \"separator\" });\n\t\t\t\t\t}\n\t\t\t\t\tentries.push({\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tfolder: this._contextService.getWorkspace().folders[0],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (entries.length === 1 && !needsCreateOrOpen) {\n\t\t\t\t\ttokenSource.cancel();\n\t\t\t\t}\n\t\t\t\treturn entries;\n\t\t\t});\n\t\t});\n\n\t\tconst timeout: boolean = await Promise.race([\n\t\t\tnew Promise<boolean>((resolve) => {\n\t\t\t\tentries.then(() => resolve(false));\n\t\t\t}),\n\t\t\tnew Promise<boolean>((resolve) => {\n\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\tresolve(true);\n\t\t\t\t}, 200);\n\t\t\t}),\n\t\t]);\n\n\t\tif (\n\t\t\t!timeout &&\n\t\t\t(await entries).length === 1 &&\n\t\t\tthis._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)\n\t\t) {\n\t\t\tconst entry: any = (await entries)[0];\n\t\t\tif (entry.task) {\n\t\t\t\tthis._handleSelection(entry);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst entriesWithSettings = entries.then((resolvedEntries) => {\n\t\t\tresolvedEntries.push(\n\t\t\t\t...TaskQuickPick.allSettingEntries(this._configurationService),\n\t\t\t);\n\t\t\treturn resolvedEntries;\n\t\t});\n\n\t\tthis._quickInputService\n\t\t\t.pick(\n\t\t\t\tentriesWithSettings,\n\t\t\t\t{\n\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t\"TaskService.pickTask\",\n\t\t\t\t\t\t\"Select a task to configure\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tcancellationToken,\n\t\t\t)\n\t\t\t.then(async (selection) => {\n\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\t// canceled when there's only one task\n\t\t\t\t\tconst task = (await entries)[0];\n\t\t\t\t\tif ((<any>task).task) {\n\t\t\t\t\t\tselection = <TaskQuickPickEntryType>task;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._handleSelection(selection);\n\t\t\t});\n\t}\n\n\tprivate _runConfigureDefaultBuildTask(): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks) => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst entries: QuickPickInput<TaskQuickPickEntryType>[] = [];\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: TaskQuickPickEntryType | undefined;\n\t\t\t\tthis._showIgnoredFoldersMessage().then(async () => {\n\t\t\t\t\tconst { globGroupTasks } = await this._getGlobTasks(\n\t\t\t\t\t\tTaskGroup.Build._id,\n\t\t\t\t\t);\n\t\t\t\t\tlet defaultTasks = globGroupTasks;\n\t\t\t\t\tif (!defaultTasks?.length) {\n\t\t\t\t\t\tdefaultTasks = this._getDefaultTasks(tasks, false);\n\t\t\t\t\t}\n\t\t\t\t\tlet defaultBuildTask;\n\t\t\t\t\tif (defaultTasks.length === 1) {\n\t\t\t\t\t\tconst group: string | TaskGroup | undefined =\n\t\t\t\t\t\t\tdefaultTasks[0].configurationProperties.group;\n\t\t\t\t\t\tif (group) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttypeof group === \"string\" &&\n\t\t\t\t\t\t\t\tgroup === TaskGroup.Build._id\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tdefaultBuildTask = defaultTasks[0];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdefaultBuildTask = defaultTasks[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tif (task === defaultBuildTask) {\n\t\t\t\t\t\t\tconst label = nls.localize(\n\t\t\t\t\t\t\t\t\"TaskService.defaultBuildTaskExists\",\n\t\t\t\t\t\t\t\t\"{0} is already marked as the default build task\",\n\t\t\t\t\t\t\t\tTaskQuickPick.getTaskLabelWithIcon(\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\ttask.getQualifiedLabel(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\t\tselectedEntry = {\n\t\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tdescription: this.getTaskDescription(task),\n\t\t\t\t\t\t\t\tdetail: this._showDetail()\n\t\t\t\t\t\t\t\t\t? task.configurationProperties.detail\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tTaskQuickPick.applyColorStyles(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tselectedEntry,\n\t\t\t\t\t\t\t\tthis._themeService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst entry = {\n\t\t\t\t\t\t\t\tlabel: TaskQuickPick.getTaskLabelWithIcon(task),\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tdescription: this.getTaskDescription(task),\n\t\t\t\t\t\t\t\tdetail: this._showDetail()\n\t\t\t\t\t\t\t\t\t? task.configurationProperties.detail\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tTaskQuickPick.applyColorStyles(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tentry,\n\t\t\t\t\t\t\t\tthis._themeService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (selectedEntry) {\n\t\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t\t}\n\t\t\t\t\tconst tokenSource = new CancellationTokenSource();\n\t\t\t\t\tconst cancellationToken: CancellationToken =\n\t\t\t\t\t\ttokenSource.token;\n\t\t\t\t\tthis._quickInputService\n\t\t\t\t\t\t.pick(\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t\t\t\t\"TaskService.pickTask\",\n\t\t\t\t\t\t\t\t\t\"Select a task to configure\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcancellationToken,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(async (entry) => {\n\t\t\t\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\t// canceled when there's only one task\n\t\t\t\t\t\t\t\tconst task = (await entries)[0];\n\t\t\t\t\t\t\t\tif ((<any>task).task) {\n\t\t\t\t\t\t\t\t\tentry = <TaskQuickPickEntryType>task;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst task: Task | undefined | null =\n\t\t\t\t\t\t\t\tentry && \"task\" in entry\n\t\t\t\t\t\t\t\t\t? entry.task\n\t\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tgroup: {\n\t\t\t\t\t\t\t\t\t\t\tkind: \"build\",\n\t\t\t\t\t\t\t\t\t\t\tisDefault: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t).then(() => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tselectedTask &&\n\t\t\t\t\t\t\t\t\t\ttask !== selectedTask &&\n\t\t\t\t\t\t\t\t\t\t!InMemoryTask.is(selectedTask)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(\n\t\t\t\t\t\t\t\t\t\t\tselectedTask,\n\t\t\t\t\t\t\t\t\t\t\t{ group: \"build\" },\n\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tthis._quickInputService\n\t\t\t\t\t\t.pick(entries, {\n\t\t\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t\t\t\"TaskService.pickDefaultBuildTask\",\n\t\t\t\t\t\t\t\t\"Select the task to be used as the default build task\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null =\n\t\t\t\t\t\t\t\tentry && \"task\" in entry\n\t\t\t\t\t\t\t\t\t? entry.task\n\t\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tgroup: {\n\t\t\t\t\t\t\t\t\t\t\tkind: \"build\",\n\t\t\t\t\t\t\t\t\t\t\tisDefault: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t).then(() => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tselectedTask &&\n\t\t\t\t\t\t\t\t\t\ttask !== selectedTask &&\n\t\t\t\t\t\t\t\t\t\t!InMemoryTask.is(selectedTask)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(\n\t\t\t\t\t\t\t\t\t\t\tselectedTask,\n\t\t\t\t\t\t\t\t\t\t\t{ group: \"build\" },\n\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tthis._runConfigureTasks();\n\t\t}\n\t}\n\n\tprivate _runConfigureDefaultTestTask(): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks) => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: ITaskQuickPickEntry;\n\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst taskGroup: TaskGroup | undefined = TaskGroup.from(\n\t\t\t\t\t\ttask.configurationProperties.group,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\ttaskGroup &&\n\t\t\t\t\t\ttaskGroup.isDefault &&\n\t\t\t\t\t\ttaskGroup._id === TaskGroup.Test._id\n\t\t\t\t\t) {\n\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (selectedTask) {\n\t\t\t\t\tselectedEntry = {\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\"TaskService.defaultTestTaskExists\",\n\t\t\t\t\t\t\t\"{0} is already marked as the default test task.\",\n\t\t\t\t\t\t\tselectedTask.getQualifiedLabel(),\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttask: selectedTask,\n\t\t\t\t\t\tdetail: this._showDetail()\n\t\t\t\t\t\t\t? selectedTask.configurationProperties.detail\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis._showQuickPick(\n\t\t\t\t\t\ttasks,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"TaskService.pickDefaultTestTask\",\n\t\t\t\t\t\t\t\"Select the task to be used as the default test task\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tselectedEntry,\n\t\t\t\t\t).then((entry) => {\n\t\t\t\t\t\tconst task: Task | undefined | null = entry\n\t\t\t\t\t\t\t? entry.task\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\tif (!task) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\tthis.customize(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t{ group: { kind: \"test\", isDefault: true } },\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t).then(() => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tselectedTask &&\n\t\t\t\t\t\t\t\t\ttask !== selectedTask &&\n\t\t\t\t\t\t\t\t\t!InMemoryTask.is(selectedTask)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tthis.customize(\n\t\t\t\t\t\t\t\t\t\tselectedTask,\n\t\t\t\t\t\t\t\t\t\t{ group: \"test\" },\n\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tthis._runConfigureTasks();\n\t\t}\n\t}\n\n\tpublic async runShowTasks(): Promise<void> {\n\t\tconst activeTasksPromise: Promise<Task[]> = this.getActiveTasks();\n\t\tconst activeTasks: Task[] = await activeTasksPromise;\n\t\tlet group: string | undefined;\n\t\tif (activeTasks.length === 1) {\n\t\t\tthis._taskSystem!.revealTask(activeTasks[0]);\n\t\t} else if (\n\t\t\tactiveTasks.length &&\n\t\t\tactiveTasks.every((task) => {\n\t\t\t\tif (InMemoryTask.is(task)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!group) {\n\t\t\t\t\tgroup = task.command.presentation?.group;\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\ttask.command.presentation?.group &&\n\t\t\t\t\ttask.command.presentation.group === group\n\t\t\t\t);\n\t\t\t})\n\t\t) {\n\t\t\tthis._taskSystem!.revealTask(activeTasks[0]);\n\t\t} else {\n\t\t\tthis._showQuickPick(\n\t\t\t\tactiveTasksPromise,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TaskService.pickShowTask\",\n\t\t\t\t\t\"Select the task to show its output\",\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"TaskService.noTaskIsRunning\",\n\t\t\t\t\t\t\"No task is running\",\n\t\t\t\t\t),\n\t\t\t\t\ttask: null,\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t).then((entry) => {\n\t\t\t\tconst task: Task | undefined | null = entry\n\t\t\t\t\t? entry.task\n\t\t\t\t\t: undefined;\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._taskSystem!.revealTask(task);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _createTasksDotOld(\n\t\tfolder: IWorkspaceFolder,\n\t): Promise<[URI, URI] | undefined> {\n\t\tconst tasksFile = folder.toResource(\".vscode/tasks.json\");\n\t\tif (await this._fileService.exists(tasksFile)) {\n\t\t\tconst oldFile = tasksFile.with({ path: `${tasksFile.path}.old` });\n\t\t\tawait this._fileService.copy(tasksFile, oldFile, true);\n\t\t\treturn [oldFile, tasksFile];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _upgradeTask(\n\t\ttask: Task,\n\t\tsuppressTaskName: boolean,\n\t\tglobalConfig: {\n\t\t\twindows?: ICommandUpgrade;\n\t\t\tosx?: ICommandUpgrade;\n\t\t\tlinux?: ICommandUpgrade;\n\t\t},\n\t): TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined {\n\t\tif (!CustomTask.is(task)) {\n\t\t\treturn;\n\t\t}\n\t\tconst configElement: any = {\n\t\t\tlabel: task._label,\n\t\t};\n\t\tconst oldTaskTypes = new Set([\"gulp\", \"jake\", \"grunt\"]);\n\t\tif (\n\t\t\tTypes.isString(task.command.name) &&\n\t\t\toldTaskTypes.has(task.command.name)\n\t\t) {\n\t\t\tconfigElement.type = task.command.name;\n\t\t\tconfigElement.task = task.command.args![0];\n\t\t} else {\n\t\t\tif (task.command.runtime === RuntimeType.Shell) {\n\t\t\t\tconfigElement.type = RuntimeType.toString(RuntimeType.Shell);\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttask.command.name &&\n\t\t\t\t!suppressTaskName &&\n\t\t\t\t!globalConfig.windows?.command &&\n\t\t\t\t!globalConfig.osx?.command &&\n\t\t\t\t!globalConfig.linux?.command\n\t\t\t) {\n\t\t\t\tconfigElement.command = task.command.name;\n\t\t\t} else if (suppressTaskName) {\n\t\t\t\tconfigElement.command = task._source.config.element.command;\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttask.command.args &&\n\t\t\t\t(!Array.isArray(task.command.args) ||\n\t\t\t\t\ttask.command.args.length > 0)\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\t!globalConfig.windows?.args &&\n\t\t\t\t\t!globalConfig.osx?.args &&\n\t\t\t\t\t!globalConfig.linux?.args\n\t\t\t\t) {\n\t\t\t\t\tconfigElement.args = task.command.args;\n\t\t\t\t} else {\n\t\t\t\t\tconfigElement.args = task._source.config.element.args;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (task.configurationProperties.presentation) {\n\t\t\tconfigElement.presentation =\n\t\t\t\ttask.configurationProperties.presentation;\n\t\t}\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconfigElement.isBackground =\n\t\t\t\ttask.configurationProperties.isBackground;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers) {\n\t\t\tconfigElement.problemMatcher =\n\t\t\t\ttask._source.config.element.problemMatcher;\n\t\t}\n\t\tif (task.configurationProperties.group) {\n\t\t\tconfigElement.group = task.configurationProperties.group;\n\t\t}\n\n\t\ttask._source.config.element = configElement;\n\t\tconst tempTask = new CustomTask(\n\t\t\ttask._id,\n\t\t\ttask._source,\n\t\t\ttask._label,\n\t\t\ttask.type,\n\t\t\ttask.command,\n\t\t\ttask.hasDefinedMatchers,\n\t\t\ttask.runOptions,\n\t\t\ttask.configurationProperties,\n\t\t);\n\t\tconst configTask = this._createCustomizableTask(tempTask);\n\t\tif (configTask) {\n\t\t\treturn configTask;\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate async _upgrade(): Promise<void> {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tthis._register(\n\t\t\t\tEvent.once(\n\t\t\t\t\tthis._workspaceTrustManagementService.onDidChangeTrust,\n\t\t\t\t)((isTrusted) => {\n\t\t\t\t\tif (isTrusted) {\n\t\t\t\t\t\tthis._upgrade();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tasks = await this._getGroupedTasks();\n\t\tconst fileDiffs: [URI, URI][] = [];\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tconst diff = await this._createTasksDotOld(folder);\n\t\t\tif (diff) {\n\t\t\t\tfileDiffs.push(diff);\n\t\t\t}\n\t\t\tif (!diff) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst configTasks: (\n\t\t\t\t| TaskConfig.ICustomTask\n\t\t\t\t| TaskConfig.IConfiguringTask\n\t\t\t)[] = [];\n\t\t\tconst suppressTaskName = !!this._configurationService.getValue(\n\t\t\t\tTasksSchemaProperties.SuppressTaskName,\n\t\t\t\t{ resource: folder.uri },\n\t\t\t);\n\t\t\tconst globalConfig = {\n\t\t\t\twindows: <ICommandUpgrade>(\n\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\tTasksSchemaProperties.Windows,\n\t\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tosx: <ICommandUpgrade>(\n\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\tTasksSchemaProperties.Osx,\n\t\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tlinux: <ICommandUpgrade>(\n\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\tTasksSchemaProperties.Linux,\n\t\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t};\n\t\t\ttasks.get(folder).forEach((task) => {\n\t\t\t\tconst configTask = this._upgradeTask(\n\t\t\t\t\ttask,\n\t\t\t\t\tsuppressTaskName,\n\t\t\t\t\tglobalConfig,\n\t\t\t\t);\n\t\t\t\tif (configTask) {\n\t\t\t\t\tconfigTasks.push(configTask);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._taskSystem = undefined;\n\t\t\tthis._workspaceTasksPromise = undefined;\n\t\t\tawait this._writeConfiguration(folder, \"tasks.tasks\", configTasks);\n\t\t\tawait this._writeConfiguration(folder, \"tasks.version\", \"2.0.0\");\n\t\t\tif (\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTasksSchemaProperties.ShowOutput,\n\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t\tTasksSchemaProperties.ShowOutput,\n\t\t\t\t\tundefined,\n\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTasksSchemaProperties.IsShellCommand,\n\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t\tTasksSchemaProperties.IsShellCommand,\n\t\t\t\t\tundefined,\n\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTasksSchemaProperties.SuppressTaskName,\n\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t\tTasksSchemaProperties.SuppressTaskName,\n\t\t\t\t\tundefined,\n\t\t\t\t\t{ resource: folder.uri },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._updateSetup();\n\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Warning,\n\t\t\tfileDiffs.length === 1\n\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\"taskService.upgradeVersion\",\n\t\t\t\t\t\t\"The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diff to review the upgrade.\",\n\t\t\t\t\t)\n\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\"taskService.upgradeVersionPlural\",\n\t\t\t\t\t\t\"The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diffs to review the upgrade.\",\n\t\t\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel:\n\t\t\t\t\t\tfileDiffs.length === 1\n\t\t\t\t\t\t\t? nls.localize(\"taskService.openDiff\", \"Open diff\")\n\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\"taskService.openDiffs\",\n\t\t\t\t\t\t\t\t\t\"Open diffs\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tfor (const upgrade of fileDiffs) {\n\t\t\t\t\t\t\tawait this._editorService.openEditor({\n\t\t\t\t\t\t\t\toriginal: { resource: upgrade[0] },\n\t\t\t\t\t\t\t\tmodified: { resource: upgrade[1] },\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ConfigureTaskAction", "defaults", "json", "tasks", "task", "SaveBeforeRunConfigOptions", "result", "error", "key", "folder", "entries", "resource", "stats"]
}
