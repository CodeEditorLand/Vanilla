{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from \"../../../../base/common/arrays.js\";\nimport * as Async from \"../../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { isUNC } from \"../../../../base/common/extpath.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LinkedMap, Touch } from \"../../../../base/common/map.js\";\nimport * as Objects from \"../../../../base/common/objects.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport * as Platform from \"../../../../base/common/platform.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport * as Types from \"../../../../base/common/types.js\";\nimport * as nls from \"../../../../nls.js\";\n\nimport type { IModelService } from \"../../../../editor/common/services/model.js\";\nimport type { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\ttype IMarkerService,\n\tMarkerSeverity,\n} from \"../../../../platform/markers/common/markers.js\";\nimport {\n\ttype IWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { Markers } from \"../../markers/common/markers.js\";\nimport {\n\ttype ProblemMatcher,\n\tProblemMatcherRegistry /*, ProblemPattern, getResource */,\n} from \"../common/problemMatcher.js\";\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport type {\n\tIShellLaunchConfig,\n\tWaitOnExitValue,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { formatMessageForTerminal } from \"../../../../platform/terminal/common/terminalStrings.js\";\nimport {\n\ttype IViewDescriptorService,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport type { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport type { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport type { IOutputService } from \"../../../services/output/common/output.js\";\nimport type { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport type { IPathService } from \"../../../services/path/common/pathService.js\";\nimport type { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport type {\n\tITerminalGroupService,\n\tITerminalInstance,\n\tITerminalService,\n} from \"../../terminal/browser/terminal.js\";\nimport {\n\tVSCodeOscProperty,\n\tVSCodeOscPt,\n\tVSCodeSequence,\n} from \"../../terminal/browser/terminalEscapeSequences.js\";\nimport { TerminalProcessExtHostProxy } from \"../../terminal/browser/terminalProcessExtHostProxy.js\";\nimport {\n\ttype ITerminalProfileResolverService,\n\tTERMINAL_VIEW_ID,\n} from \"../../terminal/common/terminal.js\";\nimport {\n\tProblemCollectorEventKind,\n\tProblemHandlingStrategy,\n\tStartStopProblemCollector,\n\tWatchingProblemCollector,\n} from \"../common/problemCollectors.js\";\nimport { GroupKind } from \"../common/taskConfiguration.js\";\nimport {\n\ttype IResolveSet,\n\ttype IResolvedVariables,\n\ttype ITaskExecuteResult,\n\ttype ITaskResolver,\n\ttype ITaskSummary,\n\ttype ITaskSystem,\n\ttype ITaskSystemInfo,\n\ttype ITaskSystemInfoResolver,\n\ttype ITaskTerminateResponse,\n\tTaskError,\n\tTaskErrors,\n\tTaskExecuteKind,\n\tTriggers,\n} from \"../common/taskSystem.js\";\nimport {\n\ttype CommandOptions,\n\tCommandString,\n\tContributedTask,\n\tCustomTask,\n\tDependsOrder,\n\ttype ICommandConfiguration,\n\ttype IConfigurationProperties,\n\ttype IExtensionTaskSource,\n\ttype IPresentationOptions,\n\ttype IShellConfiguration,\n\ttype IShellQuotingOptions,\n\ttype ITaskEvent,\n\tInMemoryTask,\n\tPanelKind,\n\tRevealKind,\n\tRevealProblemKind,\n\tRuntimeType,\n\tShellQuoting,\n\ttype Task,\n\tTaskEvent,\n\tTaskEventKind,\n\tTaskScope,\n\tTaskSourceKind,\n} from \"../common/tasks.js\";\nimport { TaskTerminalStatus } from \"./taskTerminalStatus.js\";\n\ninterface ITerminalData {\n\tterminal: ITerminalInstance;\n\tlastTask: string;\n\tgroup?: string;\n}\n\ninterface IInstanceCount {\n\tcount: number;\n}\n\ninterface IActiveTerminalData {\n\tterminal?: ITerminalInstance;\n\ttask: Task;\n\tpromise: Promise<ITaskSummary>;\n\tstate?: TaskEventKind;\n\tcount: IInstanceCount;\n}\n\ninterface IReconnectionTaskData {\n\tlabel: string;\n\tid: string;\n\tlastTask: string;\n\tgroup?: string;\n}\n\nconst ReconnectionType = \"Task\";\n\nclass VariableResolver {\n\tprivate static _regex = /\\$\\{(.*?)\\}/g;\n\tconstructor(\n\t\tpublic workspaceFolder: IWorkspaceFolder | undefined,\n\t\tpublic taskSystemInfo: ITaskSystemInfo | undefined,\n\t\tpublic readonly values: Map<string, string>,\n\t\tprivate _service: IConfigurationResolverService | undefined,\n\t) {}\n\tasync resolve(value: string): Promise<string> {\n\t\tconst replacers: Promise<string>[] = [];\n\t\tvalue.replace(VariableResolver._regex, (match, ...args) => {\n\t\t\treplacers.push(this._replacer(match, args));\n\t\t\treturn match;\n\t\t});\n\t\tconst resolvedReplacers = await Promise.all(replacers);\n\t\treturn value.replace(\n\t\t\tVariableResolver._regex,\n\t\t\t() => resolvedReplacers.shift()!,\n\t\t);\n\t}\n\n\tprivate async _replacer(match: string, args: string[]): Promise<string> {\n\t\t// Strip out the ${} because the map contains them variables without those characters.\n\t\tconst result = this.values.get(match.substring(2, match.length - 1));\n\t\tif (result !== undefined && result !== null) {\n\t\t\treturn result;\n\t\t}\n\t\tif (this._service) {\n\t\t\treturn this._service.resolveAsync(this.workspaceFolder, match);\n\t\t}\n\t\treturn match;\n\t}\n}\n\nclass VerifiedTask {\n\treadonly task: Task;\n\treadonly resolver: ITaskResolver;\n\treadonly trigger: string;\n\tresolvedVariables?: IResolvedVariables;\n\tsystemInfo?: ITaskSystemInfo;\n\tworkspaceFolder?: IWorkspaceFolder;\n\tshellLaunchConfig?: IShellLaunchConfig;\n\n\tconstructor(task: Task, resolver: ITaskResolver, trigger: string) {\n\t\tthis.task = task;\n\t\tthis.resolver = resolver;\n\t\tthis.trigger = trigger;\n\t}\n\n\tpublic verify(): boolean {\n\t\tlet verified = false;\n\t\tif (\n\t\t\tthis.trigger &&\n\t\t\tthis.resolvedVariables &&\n\t\t\tthis.workspaceFolder &&\n\t\t\tthis.shellLaunchConfig !== undefined\n\t\t) {\n\t\t\tverified = true;\n\t\t}\n\t\treturn verified;\n\t}\n\n\tpublic getVerifiedTask(): {\n\t\ttask: Task;\n\t\tresolver: ITaskResolver;\n\t\ttrigger: string;\n\t\tresolvedVariables: IResolvedVariables;\n\t\tsystemInfo: ITaskSystemInfo;\n\t\tworkspaceFolder: IWorkspaceFolder;\n\t\tshellLaunchConfig: IShellLaunchConfig;\n\t} {\n\t\tif (this.verify()) {\n\t\t\treturn {\n\t\t\t\ttask: this.task,\n\t\t\t\tresolver: this.resolver,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tresolvedVariables: this.resolvedVariables!,\n\t\t\t\tsystemInfo: this.systemInfo!,\n\t\t\t\tworkspaceFolder: this.workspaceFolder!,\n\t\t\t\tshellLaunchConfig: this.shellLaunchConfig!,\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t\"VerifiedTask was not checked. verify must be checked before getVerifiedTask.\",\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport class TerminalTaskSystem extends Disposable implements ITaskSystem {\n\tpublic static TelemetryEventName = \"taskService\";\n\n\tprivate static readonly ProcessVarName = \"__process__\";\n\n\tprivate static _shellQuotes: IStringDictionary<IShellQuotingOptions> = {\n\t\tcmd: {\n\t\t\tstrong: '\"',\n\t\t},\n\t\tpowershell: {\n\t\t\tescape: {\n\t\t\t\tescapeChar: \"`\",\n\t\t\t\tcharsToEscape: \" \\\"'()\",\n\t\t\t},\n\t\t\tstrong: \"'\",\n\t\t\tweak: '\"',\n\t\t},\n\t\tbash: {\n\t\t\tescape: {\n\t\t\t\tescapeChar: \"\\\\\",\n\t\t\t\tcharsToEscape: \" \\\"'\",\n\t\t\t},\n\t\t\tstrong: \"'\",\n\t\t\tweak: '\"',\n\t\t},\n\t\tzsh: {\n\t\t\tescape: {\n\t\t\t\tescapeChar: \"\\\\\",\n\t\t\t\tcharsToEscape: \" \\\"'\",\n\t\t\t},\n\t\t\tstrong: \"'\",\n\t\t\tweak: '\"',\n\t\t},\n\t};\n\n\tprivate static _osShellQuotes: IStringDictionary<IShellQuotingOptions> = {\n\t\tLinux: TerminalTaskSystem._shellQuotes[\"bash\"],\n\t\tMac: TerminalTaskSystem._shellQuotes[\"bash\"],\n\t\tWindows: TerminalTaskSystem._shellQuotes[\"powershell\"],\n\t};\n\n\tprivate _activeTasks: IStringDictionary<IActiveTerminalData>;\n\tprivate _busyTasks: IStringDictionary<Task>;\n\tprivate _terminals: IStringDictionary<ITerminalData>;\n\tprivate _idleTaskTerminals: LinkedMap<string, string>;\n\tprivate _sameTaskTerminals: IStringDictionary<string>;\n\tprivate _taskSystemInfoResolver: ITaskSystemInfoResolver;\n\tprivate _lastTask: VerifiedTask | undefined;\n\t// Should always be set in run\n\tprivate _currentTask!: VerifiedTask;\n\tprivate _isRerun = false;\n\tprivate _previousPanelId: string | undefined;\n\tprivate _previousTerminalInstance: ITerminalInstance | undefined;\n\tprivate _terminalStatusManager: TaskTerminalStatus;\n\tprivate _terminalCreationQueue: Promise<ITerminalInstance | void> =\n\t\tPromise.resolve();\n\tprivate _hasReconnected = false;\n\tprivate readonly _onDidStateChange: Emitter<ITaskEvent>;\n\tprivate _reconnectedTerminals: ITerminalInstance[] | undefined;\n\n\ttaskShellIntegrationStartSequence(cwd: string | URI | undefined): string {\n\t\treturn (\n\t\t\tVSCodeSequence(VSCodeOscPt.PromptStart) +\n\t\t\tVSCodeSequence(\n\t\t\t\tVSCodeOscPt.Property,\n\t\t\t\t`${VSCodeOscProperty.Task}=True`,\n\t\t\t) +\n\t\t\t(cwd\n\t\t\t\t? VSCodeSequence(\n\t\t\t\t\t\tVSCodeOscPt.Property,\n\t\t\t\t\t\t`${VSCodeOscProperty.Cwd}=${typeof cwd === \"string\" ? cwd : cwd.fsPath}`,\n\t\t\t\t\t)\n\t\t\t\t: \"\") +\n\t\t\tVSCodeSequence(VSCodeOscPt.CommandStart)\n\t\t);\n\t}\n\tget taskShellIntegrationOutputSequence(): string {\n\t\treturn VSCodeSequence(VSCodeOscPt.CommandExecuted);\n\t}\n\n\tconstructor(\n\t\tprivate _terminalService: ITerminalService,\n\t\tprivate _terminalGroupService: ITerminalGroupService,\n\t\tprivate _outputService: IOutputService,\n\t\tprivate _paneCompositeService: IPaneCompositePartService,\n\t\tprivate _viewsService: IViewsService,\n\t\tprivate _markerService: IMarkerService,\n\t\tprivate _modelService: IModelService,\n\t\tprivate _configurationResolverService: IConfigurationResolverService,\n\t\tprivate _contextService: IWorkspaceContextService,\n\t\tprivate _environmentService: IWorkbenchEnvironmentService,\n\t\tprivate _outputChannelId: string,\n\t\tprivate _fileService: IFileService,\n\t\tprivate _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\tprivate _pathService: IPathService,\n\t\tprivate _viewDescriptorService: IViewDescriptorService,\n\t\tprivate _logService: ILogService,\n\t\tprivate _notificationService: INotificationService,\n\t\tinstantiationService: IInstantiationService,\n\t\ttaskSystemInfoResolver: ITaskSystemInfoResolver,\n\t) {\n\t\tsuper();\n\n\t\tthis._activeTasks = Object.create(null);\n\t\tthis._busyTasks = Object.create(null);\n\t\tthis._terminals = Object.create(null);\n\t\tthis._idleTaskTerminals = new LinkedMap<string, string>();\n\t\tthis._sameTaskTerminals = Object.create(null);\n\t\tthis._onDidStateChange = new Emitter();\n\t\tthis._taskSystemInfoResolver = taskSystemInfoResolver;\n\t\tthis._register(\n\t\t\t(this._terminalStatusManager =\n\t\t\t\tinstantiationService.createInstance(TaskTerminalStatus)),\n\t\t);\n\t}\n\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tprivate _log(value: string): void {\n\t\tthis._appendOutput(value + \"\\n\");\n\t}\n\n\tprotected _showOutput(): void {\n\t\tthis._outputService.showChannel(this._outputChannelId, true);\n\t}\n\n\tpublic reconnect(task: Task, resolver: ITaskResolver): ITaskExecuteResult {\n\t\tthis._reconnectToTerminals();\n\t\treturn this.run(task, resolver, Triggers.reconnect);\n\t}\n\n\tpublic run(\n\t\ttask: Task,\n\t\tresolver: ITaskResolver,\n\t\ttrigger: string = Triggers.command,\n\t): ITaskExecuteResult {\n\t\ttask = task.clone(); // A small amount of task state is stored in the task (instance) and tasks passed in to run may have that set already.\n\t\tconst instances =\n\t\t\tInMemoryTask.is(task) || this._isTaskEmpty(task)\n\t\t\t\t? []\n\t\t\t\t: this._getInstances(task);\n\t\tconst validInstance =\n\t\t\tinstances.length <\n\t\t\t((task.runOptions && task.runOptions.instanceLimit) ?? 1);\n\t\tconst instance = instances[0]?.count?.count ?? 0;\n\t\tthis._currentTask = new VerifiedTask(task, resolver, trigger);\n\t\tif (instance > 0) {\n\t\t\ttask.instance = instance;\n\t\t}\n\t\tif (!validInstance) {\n\t\t\tconst terminalData = instances[instances.length - 1];\n\t\t\tthis._lastTask = this._currentTask;\n\t\t\treturn {\n\t\t\t\tkind: TaskExecuteKind.Active,\n\t\t\t\ttask: terminalData.task,\n\t\t\t\tactive: {\n\t\t\t\t\tsame: true,\n\t\t\t\t\tbackground: task.configurationProperties.isBackground!,\n\t\t\t\t},\n\t\t\t\tpromise: terminalData.promise,\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst executeResult = {\n\t\t\t\tkind: TaskExecuteKind.Started,\n\t\t\t\ttask,\n\t\t\t\tstarted: {},\n\t\t\t\tpromise: this._executeTask(\n\t\t\t\t\ttask,\n\t\t\t\t\tresolver,\n\t\t\t\t\ttrigger,\n\t\t\t\t\tnew Set(),\n\t\t\t\t\tnew Map(),\n\t\t\t\t\tundefined,\n\t\t\t\t),\n\t\t\t};\n\t\t\texecuteResult.promise.then((summary) => {\n\t\t\t\tthis._lastTask = this._currentTask;\n\t\t\t});\n\t\t\treturn executeResult;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TaskError) {\n\t\t\t\tthrow error;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\tthis._log(error.message);\n\t\t\t\tthrow new TaskError(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\terror.message,\n\t\t\t\t\tTaskErrors.UnknownError,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._log(error.toString());\n\t\t\t\tthrow new TaskError(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TerminalTaskSystem.unknownError\",\n\t\t\t\t\t\t\"A unknown error has occurred while executing a task. See task output log for details.\",\n\t\t\t\t\t),\n\t\t\t\t\tTaskErrors.UnknownError,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic rerun(): ITaskExecuteResult | undefined {\n\t\tif (this._lastTask && this._lastTask.verify()) {\n\t\t\tif (\n\t\t\t\tthis._lastTask.task.runOptions.reevaluateOnRerun !==\n\t\t\t\t\tundefined &&\n\t\t\t\t!this._lastTask.task.runOptions.reevaluateOnRerun\n\t\t\t) {\n\t\t\t\tthis._isRerun = true;\n\t\t\t}\n\t\t\tconst result = this.run(\n\t\t\t\tthis._lastTask.task,\n\t\t\t\tthis._lastTask.resolver,\n\t\t\t);\n\t\t\tresult.promise.then((summary) => {\n\t\t\t\tthis._isRerun = false;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _showTaskLoadErrors(task: Task) {\n\t\tif (task.taskLoadMessages && task.taskLoadMessages.length > 0) {\n\t\t\ttask.taskLoadMessages.forEach((loadMessage) => {\n\t\t\t\tthis._log(loadMessage + \"\\n\");\n\t\t\t});\n\t\t\tconst openOutput = \"Show Output\";\n\t\t\tthis._notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"TerminalTaskSystem.taskLoadReporting\",\n\t\t\t\t\t'There are issues with task \"{0}\". See the output for more details.',\n\t\t\t\t\ttask._label,\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: openOutput,\n\t\t\t\t\t\trun: () => this._showOutput(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic isTaskVisible(task: Task): boolean {\n\t\tconst terminalData = this._activeTasks[task.getMapKey()];\n\t\tif (!terminalData?.terminal) {\n\t\t\treturn false;\n\t\t}\n\t\tconst activeTerminalInstance = this._terminalService.activeInstance;\n\t\tconst isPanelShowingTerminal =\n\t\t\t!!this._viewsService.getActiveViewWithId(TERMINAL_VIEW_ID);\n\t\treturn (\n\t\t\tisPanelShowingTerminal &&\n\t\t\tactiveTerminalInstance?.instanceId ===\n\t\t\t\tterminalData.terminal.instanceId\n\t\t);\n\t}\n\n\tpublic revealTask(task: Task): boolean {\n\t\tconst terminalData = this._activeTasks[task.getMapKey()];\n\t\tif (!terminalData?.terminal) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isTerminalInPanel: boolean =\n\t\t\tthis._viewDescriptorService.getViewLocationById(\n\t\t\t\tTERMINAL_VIEW_ID,\n\t\t\t) === ViewContainerLocation.Panel;\n\t\tif (isTerminalInPanel && this.isTaskVisible(task)) {\n\t\t\tif (this._previousPanelId) {\n\t\t\t\tif (this._previousTerminalInstance) {\n\t\t\t\t\tthis._terminalService.setActiveInstance(\n\t\t\t\t\t\tthis._previousTerminalInstance,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis._paneCompositeService.openPaneComposite(\n\t\t\t\t\tthis._previousPanelId,\n\t\t\t\t\tViewContainerLocation.Panel,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._paneCompositeService.hideActivePaneComposite(\n\t\t\t\t\tViewContainerLocation.Panel,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._previousPanelId = undefined;\n\t\t\tthis._previousTerminalInstance = undefined;\n\t\t} else {\n\t\t\tif (isTerminalInPanel) {\n\t\t\t\tthis._previousPanelId = this._paneCompositeService\n\t\t\t\t\t.getActivePaneComposite(ViewContainerLocation.Panel)\n\t\t\t\t\t?.getId();\n\t\t\t\tif (this._previousPanelId === TERMINAL_VIEW_ID) {\n\t\t\t\t\tthis._previousTerminalInstance =\n\t\t\t\t\t\tthis._terminalService.activeInstance ?? undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._terminalService.setActiveInstance(terminalData.terminal);\n\t\t\tif (CustomTask.is(task) || ContributedTask.is(task)) {\n\t\t\t\tthis._terminalGroupService.showPanel(\n\t\t\t\t\ttask.command.presentation!.focus,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic isActive(): Promise<boolean> {\n\t\treturn Promise.resolve(this.isActiveSync());\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn Object.values(this._activeTasks).some(\n\t\t\t(value) => !!value.terminal,\n\t\t);\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\treturn Object.values(this._activeTasks).every(\n\t\t\t(value) => !value.task.configurationProperties.promptOnClose,\n\t\t);\n\t}\n\n\tpublic getActiveTasks(): Task[] {\n\t\treturn Object.values(this._activeTasks).flatMap((value) =>\n\t\t\tvalue.terminal ? value.task : [],\n\t\t);\n\t}\n\n\tpublic getLastInstance(task: Task): Task | undefined {\n\t\tconst recentKey = task.getKey();\n\t\treturn Object.values(this._activeTasks)\n\t\t\t.reverse()\n\t\t\t.find((value) => recentKey && recentKey === value.task.getKey())\n\t\t\t?.task;\n\t}\n\n\tpublic getBusyTasks(): Task[] {\n\t\treturn Object.keys(this._busyTasks).map((key) => this._busyTasks[key]);\n\t}\n\n\tpublic customExecutionComplete(task: Task, result: number): Promise<void> {\n\t\tconst activeTerminal = this._activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal?.terminal) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\t\"Expected to have a terminal for a custom execution task\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn new Promise<void>((resolve) => {\n\t\t\t// activeTerminal.terminal.rendererExit(result);\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tprivate _getInstances(task: Task): IActiveTerminalData[] {\n\t\tconst recentKey = task.getKey();\n\t\treturn Object.values(this._activeTasks).filter(\n\t\t\t(value) => recentKey && recentKey === value.task.getKey(),\n\t\t);\n\t}\n\n\tprivate _removeFromActiveTasks(task: Task | string): void {\n\t\tconst key = typeof task === \"string\" ? task : task.getMapKey();\n\t\tconst taskToRemove = this._activeTasks[key];\n\t\tif (!taskToRemove) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._activeTasks[key];\n\t}\n\n\tprivate _fireTaskEvent(event: ITaskEvent) {\n\t\tif (event.kind !== TaskEventKind.Changed) {\n\t\t\tconst activeTask = this._activeTasks[event.__task.getMapKey()];\n\t\t\tif (activeTask) {\n\t\t\t\tactiveTask.state = event.kind;\n\t\t\t}\n\t\t}\n\t\tthis._onDidStateChange.fire(event);\n\t}\n\n\tpublic terminate(task: Task): Promise<ITaskTerminateResponse> {\n\t\tconst activeTerminal = this._activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse>({\n\t\t\t\tsuccess: false,\n\t\t\t\ttask: undefined,\n\t\t\t});\n\t\t}\n\t\tconst terminal = activeTerminal.terminal;\n\t\tif (!terminal) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse>({\n\t\t\t\tsuccess: false,\n\t\t\t\ttask: undefined,\n\t\t\t});\n\t\t}\n\t\treturn new Promise<ITaskTerminateResponse>((resolve, reject) => {\n\t\t\tterminal.onDisposed((terminal) => {\n\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\tTaskEvent.terminated(\n\t\t\t\t\t\ttask,\n\t\t\t\t\t\tterminal.instanceId,\n\t\t\t\t\t\tterminal.exitReason,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\tconst task = activeTerminal.task;\n\t\t\t\ttry {\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.terminated(\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tterminal.instanceId,\n\t\t\t\t\t\t\tterminal.exitReason,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Do nothing.\n\t\t\t\t}\n\t\t\t\tresolve({ success: true, task: task });\n\t\t\t});\n\t\t\tterminal.dispose();\n\t\t});\n\t}\n\n\tpublic terminateAll(): Promise<ITaskTerminateResponse[]> {\n\t\tconst promises: Promise<ITaskTerminateResponse>[] = [];\n\t\tfor (const [key, terminalData] of Object.entries(this._activeTasks)) {\n\t\t\tconst terminal = terminalData?.terminal;\n\t\t\tif (terminal) {\n\t\t\t\tpromises.push(\n\t\t\t\t\tnew Promise<ITaskTerminateResponse>((resolve, reject) => {\n\t\t\t\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\t\t\t\tconst task = terminalData.task;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tonExit.dispose();\n\t\t\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\t\t\tTaskEvent.terminated(\n\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t\tterminal.instanceId,\n\t\t\t\t\t\t\t\t\t\tterminal.exitReason,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t// Do nothing.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (this._activeTasks[key] === terminalData) {\n\t\t\t\t\t\t\t\tdelete this._activeTasks[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve({ success: true, task: terminalData.task });\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tterminal.dispose();\n\t\t\t}\n\t\t}\n\t\treturn Promise.all<ITaskTerminateResponse>(promises);\n\t}\n\n\tprivate _showDependencyCycleMessage(task: Task) {\n\t\tthis._log(\n\t\t\tnls.localize(\n\t\t\t\t\"dependencyCycle\",\n\t\t\t\t'There is a dependency cycle. See task \"{0}\".',\n\t\t\t\ttask._label,\n\t\t\t),\n\t\t);\n\t\tthis._showOutput();\n\t}\n\n\tprivate _executeTask(\n\t\ttask: Task,\n\t\tresolver: ITaskResolver,\n\t\ttrigger: string,\n\t\tliveDependencies: Set<string>,\n\t\tencounteredTasks: Map<string, Promise<ITaskSummary>>,\n\t\talreadyResolved?: Map<string, string>,\n\t): Promise<ITaskSummary> {\n\t\tthis._showTaskLoadErrors(task);\n\n\t\tconst mapKey = task.getMapKey();\n\n\t\t// It's important that we add this task's entry to _activeTasks before\n\t\t// any of the code in the then runs (see #180541 and #180578). Wrapping\n\t\t// it in Promise.resolve().then() ensures that.\n\t\tconst promise = Promise.resolve()\n\t\t\t.then(async () => {\n\t\t\t\talreadyResolved = alreadyResolved ?? new Map<string, string>();\n\t\t\t\tconst promises: Promise<ITaskSummary>[] = [];\n\t\t\t\tif (task.configurationProperties.dependsOn) {\n\t\t\t\t\tconst nextLiveDependencies = new Set(liveDependencies).add(\n\t\t\t\t\t\ttask.getCommonTaskId(),\n\t\t\t\t\t);\n\t\t\t\t\tfor (const dependency of task.configurationProperties\n\t\t\t\t\t\t.dependsOn) {\n\t\t\t\t\t\tconst dependencyTask = await resolver.resolve(\n\t\t\t\t\t\t\tdependency.uri,\n\t\t\t\t\t\t\tdependency.task,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (dependencyTask) {\n\t\t\t\t\t\t\tthis._adoptConfigurationForDependencyTask(\n\t\t\t\t\t\t\t\tdependencyTask,\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tlet taskResult;\n\t\t\t\t\t\t\tconst commonKey = dependencyTask.getCommonTaskId();\n\t\t\t\t\t\t\tif (nextLiveDependencies.has(commonKey)) {\n\t\t\t\t\t\t\t\tthis._showDependencyCycleMessage(\n\t\t\t\t\t\t\t\t\tdependencyTask,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttaskResult = Promise.resolve<ITaskSummary>({});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttaskResult = encounteredTasks.get(commonKey);\n\t\t\t\t\t\t\t\tif (!taskResult) {\n\t\t\t\t\t\t\t\t\tconst activeTask =\n\t\t\t\t\t\t\t\t\t\tthis._activeTasks[\n\t\t\t\t\t\t\t\t\t\t\tdependencyTask.getMapKey()\n\t\t\t\t\t\t\t\t\t\t] ??\n\t\t\t\t\t\t\t\t\t\tthis._getInstances(\n\t\t\t\t\t\t\t\t\t\t\tdependencyTask,\n\t\t\t\t\t\t\t\t\t\t).pop();\n\t\t\t\t\t\t\t\t\ttaskResult =\n\t\t\t\t\t\t\t\t\t\tactiveTask &&\n\t\t\t\t\t\t\t\t\t\tthis._getDependencyPromise(activeTask);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!taskResult) {\n\t\t\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\t\t\tTaskEvent.general(\n\t\t\t\t\t\t\t\t\t\tTaskEventKind.DependsOnStarted,\n\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttaskResult = this._executeDependencyTask(\n\t\t\t\t\t\t\t\t\tdependencyTask,\n\t\t\t\t\t\t\t\t\tresolver,\n\t\t\t\t\t\t\t\t\ttrigger,\n\t\t\t\t\t\t\t\t\tnextLiveDependencies,\n\t\t\t\t\t\t\t\t\tencounteredTasks,\n\t\t\t\t\t\t\t\t\talreadyResolved,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tencounteredTasks.set(commonKey, taskResult);\n\t\t\t\t\t\t\tpromises.push(taskResult);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttask.configurationProperties.dependsOrder ===\n\t\t\t\t\t\t\t\tDependsOrder.sequence\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst promiseResult = await taskResult;\n\t\t\t\t\t\t\t\tif (promiseResult.exitCode !== 0) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"dependencyFailed\",\n\t\t\t\t\t\t\t\t\t\"Couldn't resolve dependent task '{0}' in workspace folder '{1}'\",\n\t\t\t\t\t\t\t\t\tTypes.isString(dependency.task)\n\t\t\t\t\t\t\t\t\t\t? dependency.task\n\t\t\t\t\t\t\t\t\t\t: JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\tdependency.task,\n\t\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tdependency.uri.toString(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all(promises).then(\n\t\t\t\t\t(summaries): Promise<ITaskSummary> | ITaskSummary => {\n\t\t\t\t\t\tfor (const summary of summaries) {\n\t\t\t\t\t\t\tif (summary.exitCode !== 0) {\n\t\t\t\t\t\t\t\treturn { exitCode: summary.exitCode };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(ContributedTask.is(task) || CustomTask.is(task)) &&\n\t\t\t\t\t\t\ttask.command\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (this._isRerun) {\n\t\t\t\t\t\t\t\treturn this._reexecuteCommand(\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\ttrigger,\n\t\t\t\t\t\t\t\t\talreadyResolved!,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn this._executeCommand(\n\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\ttrigger,\n\t\t\t\t\t\t\t\t\talreadyResolved!,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { exitCode: 0 };\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tdelete this._activeTasks[mapKey];\n\t\t\t});\n\t\tconst lastInstance = this._getInstances(task).pop();\n\t\tconst count = lastInstance?.count ?? { count: 0 };\n\t\tcount.count++;\n\t\tconst activeTask = { task, promise, count };\n\t\tthis._activeTasks[mapKey] = activeTask;\n\t\treturn promise;\n\t}\n\n\tprivate _createInactiveDependencyPromise(\n\t\ttask: Task,\n\t): Promise<ITaskSummary> {\n\t\treturn new Promise<ITaskSummary>((resolve) => {\n\t\t\tconst taskInactiveDisposable = this.onDidStateChange(\n\t\t\t\t(taskEvent) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttaskEvent.kind === TaskEventKind.Inactive &&\n\t\t\t\t\t\ttaskEvent.__task === task\n\t\t\t\t\t) {\n\t\t\t\t\t\ttaskInactiveDisposable.dispose();\n\t\t\t\t\t\tresolve({ exitCode: 0 });\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _adoptConfigurationForDependencyTask(\n\t\tdependencyTask: Task,\n\t\ttask: Task,\n\t): void {\n\t\tif (dependencyTask.configurationProperties.icon) {\n\t\t\tdependencyTask.configurationProperties.icon.id ||=\n\t\t\t\ttask.configurationProperties.icon?.id;\n\t\t\tdependencyTask.configurationProperties.icon.color ||=\n\t\t\t\ttask.configurationProperties.icon?.color;\n\t\t} else {\n\t\t\tdependencyTask.configurationProperties.icon =\n\t\t\t\ttask.configurationProperties.icon;\n\t\t}\n\t}\n\n\tprivate async _getDependencyPromise(\n\t\ttask: IActiveTerminalData,\n\t): Promise<ITaskSummary> {\n\t\tif (!task.task.configurationProperties.isBackground) {\n\t\t\treturn task.promise;\n\t\t}\n\t\tif (\n\t\t\t!task.task.configurationProperties.problemMatchers ||\n\t\t\ttask.task.configurationProperties.problemMatchers.length === 0\n\t\t) {\n\t\t\treturn task.promise;\n\t\t}\n\t\tif (task.state === TaskEventKind.Inactive) {\n\t\t\treturn { exitCode: 0 };\n\t\t}\n\t\treturn this._createInactiveDependencyPromise(task.task);\n\t}\n\n\tprivate async _executeDependencyTask(\n\t\ttask: Task,\n\t\tresolver: ITaskResolver,\n\t\ttrigger: string,\n\t\tliveDependencies: Set<string>,\n\t\tencounteredTasks: Map<string, Promise<ITaskSummary>>,\n\t\talreadyResolved?: Map<string, string>,\n\t): Promise<ITaskSummary> {\n\t\t// If the task is a background task with a watching problem matcher, we don't wait for the whole task to finish,\n\t\t// just for the problem matcher to go inactive.\n\t\tif (!task.configurationProperties.isBackground) {\n\t\t\treturn this._executeTask(\n\t\t\t\ttask,\n\t\t\t\tresolver,\n\t\t\t\ttrigger,\n\t\t\t\tliveDependencies,\n\t\t\t\tencounteredTasks,\n\t\t\t\talreadyResolved,\n\t\t\t);\n\t\t}\n\n\t\tconst inactivePromise = this._createInactiveDependencyPromise(task);\n\t\treturn Promise.race([\n\t\t\tinactivePromise,\n\t\t\tthis._executeTask(\n\t\t\t\ttask,\n\t\t\t\tresolver,\n\t\t\t\ttrigger,\n\t\t\t\tliveDependencies,\n\t\t\t\tencounteredTasks,\n\t\t\t\talreadyResolved,\n\t\t\t),\n\t\t]);\n\t}\n\n\tprivate async _resolveAndFindExecutable(\n\t\tsystemInfo: ITaskSystemInfo | undefined,\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\ttask: CustomTask | ContributedTask,\n\t\tcwd: string | undefined,\n\t\tenvPath: string | undefined,\n\t): Promise<string> {\n\t\tconst command = await this._configurationResolverService.resolveAsync(\n\t\t\tworkspaceFolder,\n\t\t\tCommandString.value(task.command.name!),\n\t\t);\n\t\tcwd = cwd\n\t\t\t? await this._configurationResolverService.resolveAsync(\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\tcwd,\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tconst paths = envPath\n\t\t\t? await Promise.all(\n\t\t\t\t\tenvPath\n\t\t\t\t\t\t.split(path.delimiter)\n\t\t\t\t\t\t.map((p) =>\n\t\t\t\t\t\t\tthis._configurationResolverService.resolveAsync(\n\t\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\t\tp,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tlet foundExecutable = await systemInfo?.findExecutable(\n\t\t\tcommand,\n\t\t\tcwd,\n\t\t\tpaths,\n\t\t);\n\t\tif (!foundExecutable) {\n\t\t\tfoundExecutable = path.join(cwd ?? \"\", command);\n\t\t}\n\t\treturn foundExecutable;\n\t}\n\n\tprivate _findUnresolvedVariables(\n\t\tvariables: Set<string>,\n\t\talreadyResolved: Map<string, string>,\n\t): Set<string> {\n\t\tif (alreadyResolved.size === 0) {\n\t\t\treturn variables;\n\t\t}\n\t\tconst unresolved = new Set<string>();\n\t\tfor (const variable of variables) {\n\t\t\tif (\n\t\t\t\t!alreadyResolved.has(variable.substring(2, variable.length - 1))\n\t\t\t) {\n\t\t\t\tunresolved.add(variable);\n\t\t\t}\n\t\t}\n\t\treturn unresolved;\n\t}\n\n\tprivate _mergeMaps(\n\t\tmergeInto: Map<string, string>,\n\t\tmergeFrom: Map<string, string>,\n\t) {\n\t\tfor (const entry of mergeFrom) {\n\t\t\tif (!mergeInto.has(entry[0])) {\n\t\t\t\tmergeInto.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _acquireInput(\n\t\ttaskSystemInfo: ITaskSystemInfo | undefined,\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\ttask: CustomTask | ContributedTask,\n\t\tvariables: Set<string>,\n\t\talreadyResolved: Map<string, string>,\n\t): Promise<IResolvedVariables | undefined> {\n\t\tconst resolved = await this._resolveVariablesFromSet(\n\t\t\ttaskSystemInfo,\n\t\t\tworkspaceFolder,\n\t\t\ttask,\n\t\t\tvariables,\n\t\t\talreadyResolved,\n\t\t);\n\t\tthis._fireTaskEvent(\n\t\t\tTaskEvent.general(TaskEventKind.AcquiredInput, task),\n\t\t);\n\t\treturn resolved;\n\t}\n\n\tprivate _resolveVariablesFromSet(\n\t\ttaskSystemInfo: ITaskSystemInfo | undefined,\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\ttask: CustomTask | ContributedTask,\n\t\tvariables: Set<string>,\n\t\talreadyResolved: Map<string, string>,\n\t): Promise<IResolvedVariables | undefined> {\n\t\tconst isProcess =\n\t\t\ttask.command && task.command.runtime === RuntimeType.Process;\n\t\tconst options =\n\t\t\ttask.command && task.command.options\n\t\t\t\t? task.command.options\n\t\t\t\t: undefined;\n\t\tconst cwd = options ? options.cwd : undefined;\n\t\tlet envPath: string | undefined;\n\t\tif (options && options.env) {\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tif (key.toLowerCase() === \"path\") {\n\t\t\t\t\tif (Types.isString(options.env[key])) {\n\t\t\t\t\t\tenvPath = options.env[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst unresolved = this._findUnresolvedVariables(\n\t\t\tvariables,\n\t\t\talreadyResolved,\n\t\t);\n\t\tlet resolvedVariables: Promise<IResolvedVariables | undefined>;\n\t\tif (taskSystemInfo && workspaceFolder) {\n\t\t\tconst resolveSet: IResolveSet = {\n\t\t\t\tvariables: unresolved,\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\ttaskSystemInfo.platform === Platform.Platform.Windows &&\n\t\t\t\tisProcess\n\t\t\t) {\n\t\t\t\tresolveSet.process = {\n\t\t\t\t\tname: CommandString.value(task.command.name!),\n\t\t\t\t};\n\t\t\t\tif (cwd) {\n\t\t\t\t\tresolveSet.process.cwd = cwd;\n\t\t\t\t}\n\t\t\t\tif (envPath) {\n\t\t\t\t\tresolveSet.process.path = envPath;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolvedVariables = taskSystemInfo\n\t\t\t\t.resolveVariables(\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\tresolveSet,\n\t\t\t\t\tTaskSourceKind.toConfigurationTarget(task._source.kind),\n\t\t\t\t)\n\t\t\t\t.then(async (resolved) => {\n\t\t\t\t\tif (!resolved) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._mergeMaps(alreadyResolved, resolved.variables);\n\t\t\t\t\tresolved.variables = new Map(alreadyResolved);\n\t\t\t\t\tif (isProcess) {\n\t\t\t\t\t\tlet process = CommandString.value(task.command.name!);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttaskSystemInfo.platform ===\n\t\t\t\t\t\t\tPlatform.Platform.Windows\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tprocess = await this._resolveAndFindExecutable(\n\t\t\t\t\t\t\t\ttaskSystemInfo,\n\t\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tcwd,\n\t\t\t\t\t\t\t\tenvPath,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolved.variables.set(\n\t\t\t\t\t\t\tTerminalTaskSystem.ProcessVarName,\n\t\t\t\t\t\t\tprocess,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn resolved;\n\t\t\t\t});\n\t\t\treturn resolvedVariables;\n\t\t} else {\n\t\t\tconst variablesArray = new Array<string>();\n\t\t\tunresolved.forEach((variable) => variablesArray.push(variable));\n\n\t\t\treturn new Promise<IResolvedVariables | undefined>(\n\t\t\t\t(resolve, reject) => {\n\t\t\t\t\tthis._configurationResolverService\n\t\t\t\t\t\t.resolveWithInteraction(\n\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\tvariablesArray,\n\t\t\t\t\t\t\t\"tasks\",\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tTaskSourceKind.toConfigurationTarget(\n\t\t\t\t\t\t\t\ttask._source.kind,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\tasync (\n\t\t\t\t\t\t\t\tresolvedVariablesMap:\n\t\t\t\t\t\t\t\t\t| Map<string, string>\n\t\t\t\t\t\t\t\t\t| undefined,\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tif (resolvedVariablesMap) {\n\t\t\t\t\t\t\t\t\tthis._mergeMaps(\n\t\t\t\t\t\t\t\t\t\talreadyResolved,\n\t\t\t\t\t\t\t\t\t\tresolvedVariablesMap,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tresolvedVariablesMap = new Map(\n\t\t\t\t\t\t\t\t\t\talreadyResolved,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (isProcess) {\n\t\t\t\t\t\t\t\t\t\tlet processVarValue: string;\n\t\t\t\t\t\t\t\t\t\tif (Platform.isWindows) {\n\t\t\t\t\t\t\t\t\t\t\tprocessVarValue =\n\t\t\t\t\t\t\t\t\t\t\t\tawait this._resolveAndFindExecutable(\n\t\t\t\t\t\t\t\t\t\t\t\t\ttaskSystemInfo,\n\t\t\t\t\t\t\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcwd,\n\t\t\t\t\t\t\t\t\t\t\t\t\tenvPath,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tprocessVarValue =\n\t\t\t\t\t\t\t\t\t\t\t\tawait this._configurationResolverService.resolveAsync(\n\t\t\t\t\t\t\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\t\t\t\t\t\t\tCommandString.value(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttask.command.name!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tresolvedVariablesMap.set(\n\t\t\t\t\t\t\t\t\t\t\tTerminalTaskSystem.ProcessVarName,\n\t\t\t\t\t\t\t\t\t\t\tprocessVarValue,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst resolvedVariablesResult: IResolvedVariables =\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvariables: resolvedVariablesMap,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tresolve(resolvedVariablesResult);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t(reason) => {\n\t\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _executeCommand(\n\t\ttask: CustomTask | ContributedTask,\n\t\ttrigger: string,\n\t\talreadyResolved: Map<string, string>,\n\t): Promise<ITaskSummary> {\n\t\tconst taskWorkspaceFolder = task.getWorkspaceFolder();\n\t\tlet workspaceFolder: IWorkspaceFolder | undefined;\n\t\tif (taskWorkspaceFolder) {\n\t\t\tworkspaceFolder = this._currentTask.workspaceFolder =\n\t\t\t\ttaskWorkspaceFolder;\n\t\t} else {\n\t\t\tconst folders = this._contextService.getWorkspace().folders;\n\t\t\tworkspaceFolder = folders.length > 0 ? folders[0] : undefined;\n\t\t}\n\t\tconst systemInfo: ITaskSystemInfo | undefined =\n\t\t\t(this._currentTask.systemInfo =\n\t\t\t\tthis._taskSystemInfoResolver(workspaceFolder));\n\n\t\tconst variables = new Set<string>();\n\t\tthis._collectTaskVariables(variables, task);\n\t\tconst resolvedVariables = this._acquireInput(\n\t\t\tsystemInfo,\n\t\t\tworkspaceFolder,\n\t\t\ttask,\n\t\t\tvariables,\n\t\t\talreadyResolved,\n\t\t);\n\n\t\treturn resolvedVariables.then(\n\t\t\t(resolvedVariables) => {\n\t\t\t\tif (resolvedVariables && !this._isTaskEmpty(task)) {\n\t\t\t\t\tthis._currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\t\treturn this._executeInTerminal(\n\t\t\t\t\t\ttask,\n\t\t\t\t\t\ttrigger,\n\t\t\t\t\t\tnew VariableResolver(\n\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\tsystemInfo,\n\t\t\t\t\t\t\tresolvedVariables.variables,\n\t\t\t\t\t\t\tthis._configurationResolverService,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.general(TaskEventKind.End, task),\n\t\t\t\t\t);\n\t\t\t\t\treturn Promise.resolve({ exitCode: 0 });\n\t\t\t\t}\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\treturn Promise.reject(reason);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate _isTaskEmpty(task: CustomTask | ContributedTask): boolean {\n\t\tconst isCustomExecution =\n\t\t\ttask.command.runtime === RuntimeType.CustomExecution;\n\t\treturn !(\n\t\t\ttask.command !== undefined &&\n\t\t\ttask.command.runtime &&\n\t\t\t(isCustomExecution || task.command.name !== undefined)\n\t\t);\n\t}\n\n\tprivate _reexecuteCommand(\n\t\ttask: CustomTask | ContributedTask,\n\t\ttrigger: string,\n\t\talreadyResolved: Map<string, string>,\n\t): Promise<ITaskSummary> {\n\t\tconst lastTask = this._lastTask;\n\t\tif (!lastTask) {\n\t\t\treturn Promise.reject(new Error(\"No task previously run\"));\n\t\t}\n\t\tconst workspaceFolder = (this._currentTask.workspaceFolder =\n\t\t\tlastTask.workspaceFolder);\n\t\tconst variables = new Set<string>();\n\t\tthis._collectTaskVariables(variables, task);\n\n\t\t// Check that the task hasn't changed to include new variables\n\t\tlet hasAllVariables = true;\n\t\tvariables.forEach((value) => {\n\t\t\tif (\n\t\t\t\tvalue.substring(2, value.length - 1) in\n\t\t\t\tlastTask.getVerifiedTask().resolvedVariables\n\t\t\t) {\n\t\t\t\thasAllVariables = false;\n\t\t\t}\n\t\t});\n\n\t\tif (hasAllVariables) {\n\t\t\tthis._currentTask.resolvedVariables =\n\t\t\t\tlastTask.getVerifiedTask().resolvedVariables;\n\t\t\treturn this._executeInTerminal(\n\t\t\t\ttask,\n\t\t\t\ttrigger,\n\t\t\t\tnew VariableResolver(\n\t\t\t\t\tlastTask.getVerifiedTask().workspaceFolder,\n\t\t\t\t\tlastTask.getVerifiedTask().systemInfo,\n\t\t\t\t\tlastTask.getVerifiedTask().resolvedVariables.variables,\n\t\t\t\t\tthis._configurationResolverService,\n\t\t\t\t),\n\t\t\t\tworkspaceFolder,\n\t\t\t);\n\t\t} else {\n\t\t\treturn this._acquireInput(\n\t\t\t\tlastTask.getVerifiedTask().systemInfo,\n\t\t\t\tlastTask.getVerifiedTask().workspaceFolder,\n\t\t\t\ttask,\n\t\t\t\tvariables,\n\t\t\t\talreadyResolved,\n\t\t\t).then(\n\t\t\t\t(resolvedVariables) => {\n\t\t\t\t\tif (!resolvedVariables) {\n\t\t\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.general(TaskEventKind.End, task),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn { exitCode: 0 };\n\t\t\t\t\t}\n\t\t\t\t\tthis._currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\t\treturn this._executeInTerminal(\n\t\t\t\t\t\ttask,\n\t\t\t\t\t\ttrigger,\n\t\t\t\t\t\tnew VariableResolver(\n\t\t\t\t\t\t\tlastTask.getVerifiedTask().workspaceFolder,\n\t\t\t\t\t\t\tlastTask.getVerifiedTask().systemInfo,\n\t\t\t\t\t\t\tresolvedVariables.variables,\n\t\t\t\t\t\t\tthis._configurationResolverService,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\t(reason) => {\n\t\t\t\t\treturn Promise.reject(reason);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _executeInTerminal(\n\t\ttask: CustomTask | ContributedTask,\n\t\ttrigger: string,\n\t\tresolver: VariableResolver,\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t): Promise<ITaskSummary> {\n\t\tlet terminal: ITerminalInstance | undefined;\n\t\tlet error: TaskError | undefined;\n\t\tlet promise: Promise<ITaskSummary> | undefined;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconst problemMatchers = await this._resolveMatchers(\n\t\t\t\tresolver,\n\t\t\t\ttask.configurationProperties.problemMatchers,\n\t\t\t);\n\t\t\tconst watchingProblemMatcher = new WatchingProblemCollector(\n\t\t\t\tproblemMatchers,\n\t\t\t\tthis._markerService,\n\t\t\t\tthis._modelService,\n\t\t\t\tthis._fileService,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tproblemMatchers.length > 0 &&\n\t\t\t\t!watchingProblemMatcher.isWatching()\n\t\t\t) {\n\t\t\t\tthis._appendOutput(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"TerminalTaskSystem.nonWatchingMatcher\",\n\t\t\t\t\t\t\"Task {0} is a background task but uses a problem matcher without a background pattern\",\n\t\t\t\t\t\ttask._label,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._showOutput();\n\t\t\t}\n\t\t\tconst toDispose = new DisposableStore();\n\t\t\tlet eventCounter = 0;\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\ttoDispose.add(\n\t\t\t\twatchingProblemMatcher.onDidStateChange((event) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tevent.kind ===\n\t\t\t\t\t\tProblemCollectorEventKind.BackgroundProcessingBegins\n\t\t\t\t\t) {\n\t\t\t\t\t\teventCounter++;\n\t\t\t\t\t\tthis._busyTasks[mapKey] = task;\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.general(\n\t\t\t\t\t\t\t\tTaskEventKind.Active,\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal?.instanceId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tevent.kind ===\n\t\t\t\t\t\tProblemCollectorEventKind.BackgroundProcessingEnds\n\t\t\t\t\t) {\n\t\t\t\t\t\teventCounter--;\n\t\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.general(\n\t\t\t\t\t\t\t\tTaskEventKind.Inactive,\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal?.instanceId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (eventCounter === 0) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\twatchingProblemMatcher.numberOfMatches > 0 &&\n\t\t\t\t\t\t\t\twatchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t\t\twatchingProblemMatcher.maxMarkerSeverity >=\n\t\t\t\t\t\t\t\t\tMarkerSeverity.Error\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst reveal =\n\t\t\t\t\t\t\t\t\ttask.command.presentation!.reveal;\n\t\t\t\t\t\t\t\tconst revealProblems =\n\t\t\t\t\t\t\t\t\ttask.command.presentation!.revealProblems;\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\trevealProblems ===\n\t\t\t\t\t\t\t\t\tRevealProblemKind.OnProblem\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tthis._viewsService.openView(\n\t\t\t\t\t\t\t\t\t\tMarkers.MARKERS_VIEW_ID,\n\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (reveal === RevealKind.Silent) {\n\t\t\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(\n\t\t\t\t\t\t\t\t\t\tterminal!,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\twatchingProblemMatcher.aboutToStart();\n\t\t\tlet delayer: Async.Delayer<any> | undefined;\n\t\t\t[terminal, error] = await this._createTerminal(\n\t\t\t\ttask,\n\t\t\t\tresolver,\n\t\t\t\tworkspaceFolder,\n\t\t\t);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Failed to create terminal for task ${task._label}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._terminalStatusManager.addTerminal(\n\t\t\t\ttask,\n\t\t\t\tterminal,\n\t\t\t\twatchingProblemMatcher,\n\t\t\t);\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(\n\t\t\t\t() => {\n\t\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.processStarted(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal!.instanceId,\n\t\t\t\t\t\t\t\tterminal!.processId!,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(_error) => {\n\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\"Task terminal process never got ready\",\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._fireTaskEvent(\n\t\t\t\tTaskEvent.start(task, terminal.instanceId, resolver.values),\n\t\t\t);\n\t\t\tlet onData: IDisposable | undefined;\n\t\t\tif (problemMatchers.length) {\n\t\t\t\t// prevent https://github.com/microsoft/vscode/issues/174511 from happening\n\t\t\t\tonData = terminal.onLineData((line) => {\n\t\t\t\t\twatchingProblemMatcher.processLine(line);\n\t\t\t\t\tif (!delayer) {\n\t\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t\t}\n\t\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\t\tdelayer = undefined;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((terminalLaunchResult) => {\n\t\t\t\t\tconst exitCode =\n\t\t\t\t\t\ttypeof terminalLaunchResult === \"number\"\n\t\t\t\t\t\t\t? terminalLaunchResult\n\t\t\t\t\t\t\t: terminalLaunchResult?.code;\n\t\t\t\t\tonData?.dispose();\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tconst key = task.getMapKey();\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._removeFromActiveTasks(task);\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\t\t\t\tif (terminalLaunchResult !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis._sameTaskTerminals[key] =\n\t\t\t\t\t\t\t\t\tterminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis._idleTaskTerminals.set(\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\tterminal!.instanceId.toString(),\n\t\t\t\t\t\t\t\t\tTouch.AsOld,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\tif (\n\t\t\t\t\t\treveal === RevealKind.Silent &&\n\t\t\t\t\t\t(exitCode !== 0 ||\n\t\t\t\t\t\t\t(watchingProblemMatcher.numberOfMatches > 0 &&\n\t\t\t\t\t\t\t\twatchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t\t\twatchingProblemMatcher.maxMarkerSeverity >=\n\t\t\t\t\t\t\t\t\tMarkerSeverity.Error))\n\t\t\t\t\t) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twatchingProblemMatcher.done();\n\t\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.processStarted(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal!.instanceId,\n\t\t\t\t\t\t\t\tterminal!.processId!,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.processEnded(\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tterminal!.instanceId,\n\t\t\t\t\t\t\texitCode,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.general(\n\t\t\t\t\t\t\t\tTaskEventKind.Inactive,\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal!.instanceId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\teventCounter = 0;\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.general(TaskEventKind.End, task),\n\t\t\t\t\t);\n\t\t\t\t\ttoDispose.dispose();\n\t\t\t\t\tresolve({ exitCode: exitCode ?? undefined });\n\t\t\t\t});\n\t\t\t});\n\t\t\tif (trigger === Triggers.reconnect && !!terminal.xterm) {\n\t\t\t\tconst bufferLines = [];\n\t\t\t\tconst bufferReverseIterator =\n\t\t\t\t\tterminal.xterm.getBufferReverseIterator();\n\t\t\t\tconst startRegex = new RegExp(\n\t\t\t\t\twatchingProblemMatcher.beginPatterns\n\t\t\t\t\t\t.map((pattern) => pattern.source)\n\t\t\t\t\t\t.join(\"|\"),\n\t\t\t\t);\n\t\t\t\tfor (const nextLine of bufferReverseIterator) {\n\t\t\t\t\tbufferLines.push(nextLine);\n\t\t\t\t\tif (startRegex.test(nextLine)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet delayer: Async.Delayer<any> | undefined;\n\t\t\t\tfor (let i = bufferLines.length - 1; i >= 0; i--) {\n\t\t\t\t\twatchingProblemMatcher.processLine(bufferLines[i]);\n\t\t\t\t\tif (!delayer) {\n\t\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t\t}\n\t\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\t\tdelayer = undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t[terminal, error] = await this._createTerminal(\n\t\t\t\ttask,\n\t\t\t\tresolver,\n\t\t\t\tworkspaceFolder,\n\t\t\t);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Failed to create terminal for task ${task._label}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._fireTaskEvent(\n\t\t\t\tTaskEvent.start(task, terminal.instanceId, resolver.values),\n\t\t\t);\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\tthis._busyTasks[mapKey] = task;\n\t\t\tthis._fireTaskEvent(\n\t\t\t\tTaskEvent.general(\n\t\t\t\t\tTaskEventKind.Active,\n\t\t\t\t\ttask,\n\t\t\t\t\tterminal.instanceId,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst problemMatchers = await this._resolveMatchers(\n\t\t\t\tresolver,\n\t\t\t\ttask.configurationProperties.problemMatchers,\n\t\t\t);\n\t\t\tconst startStopProblemMatcher = new StartStopProblemCollector(\n\t\t\t\tproblemMatchers,\n\t\t\t\tthis._markerService,\n\t\t\t\tthis._modelService,\n\t\t\t\tProblemHandlingStrategy.Clean,\n\t\t\t\tthis._fileService,\n\t\t\t);\n\t\t\tthis._terminalStatusManager.addTerminal(\n\t\t\t\ttask,\n\t\t\t\tterminal,\n\t\t\t\tstartStopProblemMatcher,\n\t\t\t);\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(\n\t\t\t\t() => {\n\t\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.processStarted(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal!.instanceId,\n\t\t\t\t\t\t\t\tterminal!.processId!,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(_error) => {\n\t\t\t\t\t// The process never got ready. Need to think how to handle this.\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst onData = terminal.onLineData((line) => {\n\t\t\t\tstartStopProblemMatcher.processLine(line);\n\t\t\t});\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((terminalLaunchResult) => {\n\t\t\t\t\tconst exitCode =\n\t\t\t\t\t\ttypeof terminalLaunchResult === \"number\"\n\t\t\t\t\t\t\t? terminalLaunchResult\n\t\t\t\t\t\t\t: terminalLaunchResult?.code;\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tconst key = task.getMapKey();\n\t\t\t\t\tthis._removeFromActiveTasks(task);\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\t\t\t\tif (terminalLaunchResult !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis._sameTaskTerminals[key] =\n\t\t\t\t\t\t\t\t\tterminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis._idleTaskTerminals.set(\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\tterminal!.instanceId.toString(),\n\t\t\t\t\t\t\t\t\tTouch.AsOld,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\tconst revealProblems =\n\t\t\t\t\t\ttask.command.presentation!.revealProblems;\n\t\t\t\t\tconst revealProblemPanel =\n\t\t\t\t\t\tterminal &&\n\t\t\t\t\t\trevealProblems === RevealProblemKind.OnProblem &&\n\t\t\t\t\t\tstartStopProblemMatcher.numberOfMatches > 0;\n\t\t\t\t\tif (revealProblemPanel) {\n\t\t\t\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tterminal &&\n\t\t\t\t\t\treveal === RevealKind.Silent &&\n\t\t\t\t\t\t(exitCode !== 0 ||\n\t\t\t\t\t\t\t(startStopProblemMatcher.numberOfMatches > 0 &&\n\t\t\t\t\t\t\t\tstartStopProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t\t\tstartStopProblemMatcher.maxMarkerSeverity >=\n\t\t\t\t\t\t\t\t\tMarkerSeverity.Error))\n\t\t\t\t\t) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal);\n\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Hack to work around #92868 until terminal is fixed.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tonData.dispose();\n\t\t\t\t\t\tstartStopProblemMatcher.done();\n\t\t\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\t\t}, 100);\n\t\t\t\t\tif (!processStartedSignaled && terminal) {\n\t\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\t\tTaskEvent.processStarted(\n\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\tterminal.instanceId,\n\t\t\t\t\t\t\t\tterminal.processId!,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.processEnded(\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tterminal?.instanceId,\n\t\t\t\t\t\t\texitCode ?? undefined,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.general(\n\t\t\t\t\t\t\tTaskEventKind.Inactive,\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tterminal?.instanceId,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis._fireTaskEvent(\n\t\t\t\t\t\tTaskEvent.general(\n\t\t\t\t\t\t\tTaskEventKind.End,\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tterminal?.instanceId,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tresolve({ exitCode: exitCode ?? undefined });\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst showProblemPanel =\n\t\t\ttask.command.presentation &&\n\t\t\ttask.command.presentation.revealProblems ===\n\t\t\t\tRevealProblemKind.Always;\n\t\tif (showProblemPanel) {\n\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID);\n\t\t} else if (\n\t\t\ttask.command.presentation &&\n\t\t\t(task.command.presentation.focus ||\n\t\t\t\ttask.command.presentation.reveal === RevealKind.Always)\n\t\t) {\n\t\t\tthis._terminalService.setActiveInstance(terminal);\n\t\t\tawait this._terminalService.revealTerminal(terminal);\n\t\t\tif (task.command.presentation.focus) {\n\t\t\t\tthis._terminalService.focusInstance(terminal);\n\t\t\t}\n\t\t}\n\t\tthis._activeTasks[task.getMapKey()].terminal = terminal;\n\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\treturn promise;\n\t}\n\n\tprivate _createTerminalName(task: CustomTask | ContributedTask): string {\n\t\tconst needsFolderQualification =\n\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\tWorkbenchState.WORKSPACE;\n\t\treturn needsFolderQualification\n\t\t\t? task.getQualifiedLabel()\n\t\t\t: task.configurationProperties.name || \"\";\n\t}\n\n\tprivate async _createShellLaunchConfig(\n\t\ttask: CustomTask | ContributedTask,\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\tvariableResolver: VariableResolver,\n\t\tplatform: Platform.Platform,\n\t\toptions: CommandOptions,\n\t\tcommand: CommandString,\n\t\targs: CommandString[],\n\t\twaitOnExit: WaitOnExitValue,\n\t): Promise<IShellLaunchConfig | undefined> {\n\t\tlet shellLaunchConfig: IShellLaunchConfig;\n\t\tconst isShellCommand = task.command.runtime === RuntimeType.Shell;\n\t\tconst needsFolderQualification =\n\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\tWorkbenchState.WORKSPACE;\n\t\tconst terminalName = this._createTerminalName(task);\n\t\tconst type = ReconnectionType;\n\t\tconst originalCommand = task.command.name;\n\t\tlet cwd: string | URI | undefined;\n\t\tif (options.cwd) {\n\t\t\tcwd = options.cwd;\n\t\t\tif (!path.isAbsolute(cwd)) {\n\t\t\t\tif (\n\t\t\t\t\tworkspaceFolder &&\n\t\t\t\t\tworkspaceFolder.uri.scheme === Schemas.file\n\t\t\t\t) {\n\t\t\t\t\tcwd = path.join(workspaceFolder.uri.fsPath, cwd);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This must be normalized to the OS\n\t\t\tcwd = isUNC(cwd)\n\t\t\t\t? cwd\n\t\t\t\t: resources.toLocalResource(\n\t\t\t\t\t\tURI.from({ scheme: Schemas.file, path: cwd }),\n\t\t\t\t\t\tthis._environmentService.remoteAuthority,\n\t\t\t\t\t\tthis._pathService.defaultUriScheme,\n\t\t\t\t\t);\n\t\t}\n\t\tif (isShellCommand) {\n\t\t\tlet os: Platform.OperatingSystem;\n\t\t\tswitch (platform) {\n\t\t\t\tcase Platform.Platform.Windows:\n\t\t\t\t\tos = Platform.OperatingSystem.Windows;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Platform.Platform.Mac:\n\t\t\t\t\tos = Platform.OperatingSystem.Macintosh;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Platform.Platform.Linux:\n\t\t\t\tdefault:\n\t\t\t\t\tos = Platform.OperatingSystem.Linux;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst defaultProfile =\n\t\t\t\tawait this._terminalProfileResolverService.getDefaultProfile({\n\t\t\t\t\tallowAutomationShell: true,\n\t\t\t\t\tos,\n\t\t\t\t\tremoteAuthority: this._environmentService.remoteAuthority,\n\t\t\t\t});\n\t\t\tlet icon: URI | ThemeIcon | { light: URI; dark: URI } | undefined;\n\t\t\tif (task.configurationProperties.icon?.id) {\n\t\t\t\ticon = ThemeIcon.fromId(task.configurationProperties.icon.id);\n\t\t\t} else {\n\t\t\t\tconst taskGroupKind = task.configurationProperties.group\n\t\t\t\t\t? GroupKind.to(task.configurationProperties.group)\n\t\t\t\t\t: undefined;\n\t\t\t\tconst kindId =\n\t\t\t\t\ttypeof taskGroupKind === \"string\"\n\t\t\t\t\t\t? taskGroupKind\n\t\t\t\t\t\t: taskGroupKind?.kind;\n\t\t\t\ticon =\n\t\t\t\t\tkindId === \"test\"\n\t\t\t\t\t\t? ThemeIcon.fromId(Codicon.beaker.id)\n\t\t\t\t\t\t: defaultProfile.icon;\n\t\t\t}\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\ttype,\n\t\t\t\texecutable: defaultProfile.path,\n\t\t\t\targs: defaultProfile.args,\n\t\t\t\tenv: { ...defaultProfile.env },\n\t\t\t\ticon,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t\twaitOnExit,\n\t\t\t};\n\t\t\tlet shellSpecified = false;\n\t\t\tconst shellOptions: IShellConfiguration | undefined =\n\t\t\t\ttask.command.options && task.command.options.shell;\n\t\t\tif (shellOptions) {\n\t\t\t\tif (shellOptions.executable) {\n\t\t\t\t\t// Clear out the args so that we don't end up with mismatched args.\n\t\t\t\t\tif (\n\t\t\t\t\t\tshellOptions.executable !== shellLaunchConfig.executable\n\t\t\t\t\t) {\n\t\t\t\t\t\tshellLaunchConfig.args = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tshellLaunchConfig.executable = await this._resolveVariable(\n\t\t\t\t\t\tvariableResolver,\n\t\t\t\t\t\tshellOptions.executable,\n\t\t\t\t\t);\n\t\t\t\t\tshellSpecified = true;\n\t\t\t\t}\n\t\t\t\tif (shellOptions.args) {\n\t\t\t\t\tshellLaunchConfig.args = await this._resolveVariables(\n\t\t\t\t\t\tvariableResolver,\n\t\t\t\t\t\tshellOptions.args.slice(),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shellLaunchConfig.args === undefined) {\n\t\t\t\tshellLaunchConfig.args = [];\n\t\t\t}\n\t\t\tconst shellArgs = Array.isArray(shellLaunchConfig.args)\n\t\t\t\t? <string[]>shellLaunchConfig.args.slice(0)\n\t\t\t\t: [shellLaunchConfig.args];\n\t\t\tconst toAdd: string[] = [];\n\t\t\tconst basename = path.posix\n\t\t\t\t.basename(\n\t\t\t\t\t(\n\t\t\t\t\t\tawait this._pathService.fileURI(\n\t\t\t\t\t\t\tshellLaunchConfig.executable!,\n\t\t\t\t\t\t)\n\t\t\t\t\t).path,\n\t\t\t\t)\n\t\t\t\t.toLowerCase();\n\t\t\tconst commandLine = this._buildShellCommandLine(\n\t\t\t\tplatform,\n\t\t\t\tbasename,\n\t\t\t\tshellOptions,\n\t\t\t\tcommand,\n\t\t\t\toriginalCommand,\n\t\t\t\targs,\n\t\t\t);\n\t\t\tlet windowsShellArgs = false;\n\t\t\tif (platform === Platform.Platform.Windows) {\n\t\t\t\twindowsShellArgs = true;\n\t\t\t\t// If we don't have a cwd, then the terminal uses the home dir.\n\t\t\t\tconst userHome = await this._pathService.userHome();\n\t\t\t\tif (\n\t\t\t\t\tbasename === \"cmd.exe\" &&\n\t\t\t\t\t((options.cwd && isUNC(options.cwd)) ||\n\t\t\t\t\t\t(!options.cwd && isUNC(userHome.fsPath)))\n\t\t\t\t) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (basename === \"powershell.exe\" || basename === \"pwsh.exe\") {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push(\"-Command\");\n\t\t\t\t\t}\n\t\t\t\t} else if (basename === \"bash.exe\" || basename === \"zsh.exe\") {\n\t\t\t\t\twindowsShellArgs = false;\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push(\"-c\");\n\t\t\t\t\t}\n\t\t\t\t} else if (basename === \"wsl.exe\") {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push(\"-e\");\n\t\t\t\t\t}\n\t\t\t\t} else if (!shellSpecified) {\n\t\t\t\t\ttoAdd.push(\"/d\", \"/c\");\n\t\t\t\t}\n\t\t\t} else if (!shellSpecified) {\n\t\t\t\t// Under Mac remove -l to not start it as a login shell.\n\t\t\t\tif (platform === Platform.Platform.Mac) {\n\t\t\t\t\t// Background on -l on osx https://github.com/microsoft/vscode/issues/107563\n\t\t\t\t\t// TODO: Handle by pulling the default terminal profile?\n\t\t\t\t\t// const osxShellArgs = this._configurationService.inspect(TerminalSettingId.ShellArgsMacOs);\n\t\t\t\t\t// if ((osxShellArgs.user === undefined) && (osxShellArgs.userLocal === undefined) && (osxShellArgs.userLocalValue === undefined)\n\t\t\t\t\t// \t&& (osxShellArgs.userRemote === undefined) && (osxShellArgs.userRemoteValue === undefined)\n\t\t\t\t\t// \t&& (osxShellArgs.userValue === undefined) && (osxShellArgs.workspace === undefined)\n\t\t\t\t\t// \t&& (osxShellArgs.workspaceFolder === undefined) && (osxShellArgs.workspaceFolderValue === undefined)\n\t\t\t\t\t// \t&& (osxShellArgs.workspaceValue === undefined)) {\n\t\t\t\t\t// \tconst index = shellArgs.indexOf('-l');\n\t\t\t\t\t// \tif (index !== -1) {\n\t\t\t\t\t// \t\tshellArgs.splice(index, 1);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\ttoAdd.push(\"-c\");\n\t\t\t}\n\t\t\tconst combinedShellArgs = this._addAllArgument(toAdd, shellArgs);\n\t\t\tcombinedShellArgs.push(commandLine);\n\t\t\tshellLaunchConfig.args = windowsShellArgs\n\t\t\t\t? combinedShellArgs.join(\" \")\n\t\t\t\t: combinedShellArgs;\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tconst folder =\n\t\t\t\t\t\tcwd && typeof cwd === \"object\" && \"path\" in cwd\n\t\t\t\t\t\t\t? path.basename(cwd.path)\n\t\t\t\t\t\t\t: workspaceFolder.name;\n\t\t\t\t\tshellLaunchConfig.initialText =\n\t\t\t\t\t\tthis.taskShellIntegrationStartSequence(cwd) +\n\t\t\t\t\t\tformatMessageForTerminal(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"task.executingInFolder\",\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"The workspace folder the task is running in\",\n\t\t\t\t\t\t\t\t\t\t\"The task command line or label\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Executing task in folder {0}: {1}\",\n\t\t\t\t\t\t\t\tfolder,\n\t\t\t\t\t\t\t\tcommandLine,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ excludeLeadingNewLine: true },\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tthis.taskShellIntegrationOutputSequence;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText =\n\t\t\t\t\t\tthis.taskShellIntegrationStartSequence(cwd) +\n\t\t\t\t\t\tformatMessageForTerminal(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"task.executing.shellIntegration\",\n\t\t\t\t\t\t\t\t\tcomment: [\"The task command line or label\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Executing task: {0}\",\n\t\t\t\t\t\t\t\tcommandLine,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ excludeLeadingNewLine: true },\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tthis.taskShellIntegrationOutputSequence;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.initialText = {\n\t\t\t\t\ttext:\n\t\t\t\t\t\tthis.taskShellIntegrationStartSequence(cwd) +\n\t\t\t\t\t\tthis.taskShellIntegrationOutputSequence,\n\t\t\t\t\ttrailingNewLine: false,\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tconst commandExecutable =\n\t\t\t\ttask.command.runtime !== RuntimeType.CustomExecution\n\t\t\t\t\t? CommandString.value(command)\n\t\t\t\t\t: undefined;\n\t\t\tconst executable = isShellCommand\n\t\t\t\t? commandExecutable\n\t\t\t\t: await this._resolveVariable(\n\t\t\t\t\t\tvariableResolver,\n\t\t\t\t\t\tawait this._resolveVariable(\n\t\t\t\t\t\t\tvariableResolver,\n\t\t\t\t\t\t\t\"${\" + TerminalTaskSystem.ProcessVarName + \"}\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t// When we have a process task there is no need to quote arguments. So we go ahead and take the string value.\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\ttype,\n\t\t\t\ticon: task.configurationProperties.icon?.id\n\t\t\t\t\t? ThemeIcon.fromId(task.configurationProperties.icon.id)\n\t\t\t\t\t: undefined,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t\texecutable: executable,\n\t\t\t\targs: args.map((a) => (Types.isString(a) ? a : a.value)),\n\t\t\t\twaitOnExit,\n\t\t\t};\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tconst getArgsToEcho = (\n\t\t\t\t\targs: string | string[] | undefined,\n\t\t\t\t): string => {\n\t\t\t\t\tif (!args || args.length === 0) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif (Types.isString(args)) {\n\t\t\t\t\t\treturn args;\n\t\t\t\t\t}\n\t\t\t\t\treturn args.join(\" \");\n\t\t\t\t};\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tshellLaunchConfig.initialText =\n\t\t\t\t\t\tthis.taskShellIntegrationStartSequence(cwd) +\n\t\t\t\t\t\tformatMessageForTerminal(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"task.executingInFolder\",\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"The workspace folder the task is running in\",\n\t\t\t\t\t\t\t\t\t\t\"The task command line or label\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Executing task in folder {0}: {1}\",\n\t\t\t\t\t\t\t\tworkspaceFolder.name,\n\t\t\t\t\t\t\t\t`${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ excludeLeadingNewLine: true },\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tthis.taskShellIntegrationOutputSequence;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText =\n\t\t\t\t\t\tthis.taskShellIntegrationStartSequence(cwd) +\n\t\t\t\t\t\tformatMessageForTerminal(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"task.executing.shell-integration\",\n\t\t\t\t\t\t\t\t\tcomment: [\"The task command line or label\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Executing task: {0}\",\n\t\t\t\t\t\t\t\t`${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ excludeLeadingNewLine: true },\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tthis.taskShellIntegrationOutputSequence;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.initialText = {\n\t\t\t\t\ttext:\n\t\t\t\t\t\tthis.taskShellIntegrationStartSequence(cwd) +\n\t\t\t\t\t\tthis.taskShellIntegrationOutputSequence,\n\t\t\t\t\ttrailingNewLine: false,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (cwd) {\n\t\t\tshellLaunchConfig.cwd = cwd;\n\t\t}\n\t\tif (options.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = {\n\t\t\t\t\t...shellLaunchConfig.env,\n\t\t\t\t\t...options.env,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = options.env;\n\t\t\t}\n\t\t}\n\t\tshellLaunchConfig.isFeatureTerminal = true;\n\t\tshellLaunchConfig.useShellEnvironment = true;\n\t\treturn shellLaunchConfig;\n\t}\n\n\tprivate _addAllArgument(\n\t\tshellCommandArgs: string[],\n\t\tconfiguredShellArgs: string[],\n\t): string[] {\n\t\tconst combinedShellArgs: string[] =\n\t\t\tObjects.deepClone(configuredShellArgs);\n\t\tshellCommandArgs.forEach((element) => {\n\t\t\tconst shouldAddShellCommandArg = configuredShellArgs.every(\n\t\t\t\t(arg, index) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\targ.toLowerCase() === element &&\n\t\t\t\t\t\tconfiguredShellArgs.length > index + 1\n\t\t\t\t\t) {\n\t\t\t\t\t\t// We can still add the argument, but only if not all of the following arguments begin with \"-\".\n\t\t\t\t\t\treturn !configuredShellArgs\n\t\t\t\t\t\t\t.slice(index + 1)\n\t\t\t\t\t\t\t.every((testArg) => testArg.startsWith(\"-\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn arg.toLowerCase() !== element;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (shouldAddShellCommandArg) {\n\t\t\t\tcombinedShellArgs.push(element);\n\t\t\t}\n\t\t});\n\t\treturn combinedShellArgs;\n\t}\n\n\tprivate async _reconnectToTerminal(\n\t\ttask: Task,\n\t): Promise<ITerminalInstance | undefined> {\n\t\tif (!this._reconnectedTerminals) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this._reconnectedTerminals.length; i++) {\n\t\t\tconst terminal = this._reconnectedTerminals[i];\n\t\t\tif (\n\t\t\t\tgetReconnectionData(terminal)?.lastTask ===\n\t\t\t\ttask.getCommonTaskId()\n\t\t\t) {\n\t\t\t\tthis._reconnectedTerminals.splice(i, 1);\n\t\t\t\treturn terminal;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _doCreateTerminal(\n\t\ttask: Task,\n\t\tgroup: string | undefined,\n\t\tlaunchConfigs: IShellLaunchConfig,\n\t): Promise<ITerminalInstance> {\n\t\tconst reconnectedTerminal = await this._reconnectToTerminal(task);\n\t\tconst onDisposed = (terminal: ITerminalInstance) =>\n\t\t\tthis._fireTaskEvent(\n\t\t\t\tTaskEvent.terminated(\n\t\t\t\t\ttask,\n\t\t\t\t\tterminal.instanceId,\n\t\t\t\t\tterminal.exitReason,\n\t\t\t\t),\n\t\t\t);\n\t\tif (reconnectedTerminal) {\n\t\t\tif (\"command\" in task && task.command.presentation) {\n\t\t\t\treconnectedTerminal.waitOnExit = getWaitOnExitValue(\n\t\t\t\t\ttask.command.presentation,\n\t\t\t\t\ttask.configurationProperties,\n\t\t\t\t);\n\t\t\t}\n\t\t\treconnectedTerminal.onDisposed(onDisposed);\n\t\t\tthis._logService.trace(\n\t\t\t\t\"reconnected to task and terminal\",\n\t\t\t\ttask._id,\n\t\t\t);\n\t\t\treturn reconnectedTerminal;\n\t\t}\n\t\tif (group) {\n\t\t\t// Try to find an existing terminal to split.\n\t\t\t// Even if an existing terminal is found, the split can fail if the terminal width is too small.\n\t\t\tfor (const terminal of Object.values(this._terminals)) {\n\t\t\t\tif (terminal.group === group) {\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t`Found terminal to split for group ${group}`,\n\t\t\t\t\t);\n\t\t\t\t\tconst originalInstance = terminal.terminal;\n\t\t\t\t\tconst result = await this._terminalService.createTerminal({\n\t\t\t\t\t\tlocation: { parentTerminal: originalInstance },\n\t\t\t\t\t\tconfig: launchConfigs,\n\t\t\t\t\t});\n\t\t\t\t\tresult.onDisposed(onDisposed);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._logService.trace(\n\t\t\t\t`No terminal found to split for group ${group}`,\n\t\t\t);\n\t\t}\n\t\t// Either no group is used, no terminal with the group exists or splitting an existing terminal failed.\n\t\tconst createdTerminal = await this._terminalService.createTerminal({\n\t\t\tconfig: launchConfigs,\n\t\t});\n\t\tcreatedTerminal.onDisposed(onDisposed);\n\t\treturn createdTerminal;\n\t}\n\n\tprivate _reconnectToTerminals(): void {\n\t\tif (this._hasReconnected) {\n\t\t\tthis._logService.trace(\n\t\t\t\t`Already reconnected, to ${this._reconnectedTerminals?.length} terminals so returning`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tthis._reconnectedTerminals =\n\t\t\tthis._terminalService\n\t\t\t\t.getReconnectedTerminals(ReconnectionType)\n\t\t\t\t?.filter((t) => !t.isDisposed && getReconnectionData(t)) || [];\n\t\tthis._logService.trace(\n\t\t\t`Attempting reconnection of ${this._reconnectedTerminals?.length} terminals`,\n\t\t);\n\t\tif (this._reconnectedTerminals?.length) {\n\t\t\tfor (const terminal of this._reconnectedTerminals) {\n\t\t\t\tconst data = getReconnectionData(terminal) as\n\t\t\t\t\t| IReconnectionTaskData\n\t\t\t\t\t| undefined;\n\t\t\t\tif (data) {\n\t\t\t\t\tconst terminalData = {\n\t\t\t\t\t\tlastTask: data.lastTask,\n\t\t\t\t\t\tgroup: data.group,\n\t\t\t\t\t\tterminal,\n\t\t\t\t\t};\n\t\t\t\t\tthis._terminals[terminal.instanceId] = terminalData;\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t\"Reconnecting to task terminal\",\n\t\t\t\t\t\tterminalData.lastTask,\n\t\t\t\t\t\tterminal.instanceId,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._logService.trace(`No terminals to reconnect to so returning`);\n\t\t}\n\t\tthis._hasReconnected = true;\n\t}\n\n\tprivate _deleteTaskAndTerminal(\n\t\tterminal: ITerminalInstance,\n\t\tterminalData: ITerminalData,\n\t): void {\n\t\tdelete this._terminals[terminal.instanceId];\n\t\tdelete this._sameTaskTerminals[terminalData.lastTask];\n\t\tthis._idleTaskTerminals.delete(terminalData.lastTask);\n\t\t// Delete the task now as a work around for cases when the onExit isn't fired.\n\t\t// This can happen if the terminal wasn't shutdown with an \"immediate\" flag and is expected.\n\t\t// For correct terminal re-use, the task needs to be deleted immediately.\n\t\t// Note that this shouldn't be a problem anymore since user initiated terminal kills are now immediate.\n\t\tconst mapKey = terminalData.lastTask;\n\t\tthis._removeFromActiveTasks(mapKey);\n\t\tif (this._busyTasks[mapKey]) {\n\t\t\tdelete this._busyTasks[mapKey];\n\t\t}\n\t}\n\n\tprivate async _createTerminal(\n\t\ttask: CustomTask | ContributedTask,\n\t\tresolver: VariableResolver,\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t): Promise<[ITerminalInstance | undefined, TaskError | undefined]> {\n\t\tconst platform = resolver.taskSystemInfo\n\t\t\t? resolver.taskSystemInfo.platform\n\t\t\t: Platform.platform;\n\t\tconst options = await this._resolveOptions(\n\t\t\tresolver,\n\t\t\ttask.command.options,\n\t\t);\n\t\tconst presentationOptions = task.command.presentation;\n\n\t\tif (!presentationOptions) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Task presentation options should not be undefined here.\",\n\t\t\t);\n\t\t}\n\t\tconst waitOnExit = getWaitOnExitValue(\n\t\t\tpresentationOptions,\n\t\t\ttask.configurationProperties,\n\t\t);\n\n\t\tlet command: CommandString | undefined;\n\t\tlet args: CommandString[] | undefined;\n\t\tlet launchConfigs: IShellLaunchConfig | undefined;\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution) {\n\t\t\tthis._currentTask.shellLaunchConfig = launchConfigs = {\n\t\t\t\tcustomPtyImplementation: (id, cols, rows) =>\n\t\t\t\t\tnew TerminalProcessExtHostProxy(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tcols,\n\t\t\t\t\t\trows,\n\t\t\t\t\t\tthis._terminalService,\n\t\t\t\t\t),\n\t\t\t\twaitOnExit,\n\t\t\t\tname: this._createTerminalName(task),\n\t\t\t\tinitialText:\n\t\t\t\t\ttask.command.presentation && task.command.presentation.echo\n\t\t\t\t\t\t? formatMessageForTerminal(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"task.executing\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\"The task command line or label\",\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"Executing task: {0}\",\n\t\t\t\t\t\t\t\t\ttask._label,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{ excludeLeadingNewLine: true },\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: undefined,\n\t\t\t\tisFeatureTerminal: true,\n\t\t\t\ticon: task.configurationProperties.icon?.id\n\t\t\t\t\t? ThemeIcon.fromId(task.configurationProperties.icon.id)\n\t\t\t\t\t: undefined,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t};\n\t\t} else {\n\t\t\tconst resolvedResult: {\n\t\t\t\tcommand: CommandString;\n\t\t\t\targs: CommandString[];\n\t\t\t} = await this._resolveCommandAndArgs(resolver, task.command);\n\t\t\tcommand = resolvedResult.command;\n\t\t\targs = resolvedResult.args;\n\n\t\t\tthis._currentTask.shellLaunchConfig = launchConfigs =\n\t\t\t\tawait this._createShellLaunchConfig(\n\t\t\t\t\ttask,\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\tresolver,\n\t\t\t\t\tplatform,\n\t\t\t\t\toptions,\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t\twaitOnExit,\n\t\t\t\t);\n\t\t\tif (launchConfigs === undefined) {\n\t\t\t\treturn [\n\t\t\t\t\tundefined,\n\t\t\t\t\tnew TaskError(\n\t\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"TerminalTaskSystem\",\n\t\t\t\t\t\t\t\"Can't execute a shell command on an UNC drive using cmd.exe.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTaskErrors.UnknownError,\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\tconst prefersSameTerminal =\n\t\t\tpresentationOptions.panel === PanelKind.Dedicated;\n\t\tconst allowsSharedTerminal =\n\t\t\tpresentationOptions.panel === PanelKind.Shared;\n\t\tconst group = presentationOptions.group;\n\n\t\tconst taskKey = task.getMapKey();\n\t\tlet terminalToReuse: ITerminalData | undefined;\n\t\tif (prefersSameTerminal) {\n\t\t\tconst terminalId = this._sameTaskTerminals[taskKey];\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this._terminals[terminalId];\n\t\t\t\tdelete this._sameTaskTerminals[taskKey];\n\t\t\t}\n\t\t} else if (allowsSharedTerminal) {\n\t\t\t// Always allow to reuse the terminal previously used by the same task.\n\t\t\tlet terminalId = this._idleTaskTerminals.remove(taskKey);\n\t\t\tif (!terminalId) {\n\t\t\t\t// There is no idle terminal which was used by the same task.\n\t\t\t\t// Search for any idle terminal used previously by a task of the same group\n\t\t\t\t// (or, if the task has no group, a terminal used by a task without group).\n\t\t\t\tfor (const taskId of this._idleTaskTerminals.keys()) {\n\t\t\t\t\tconst idleTerminalId = this._idleTaskTerminals.get(taskId)!;\n\t\t\t\t\tif (\n\t\t\t\t\t\tidleTerminalId &&\n\t\t\t\t\t\tthis._terminals[idleTerminalId] &&\n\t\t\t\t\t\tthis._terminals[idleTerminalId].group === group\n\t\t\t\t\t) {\n\t\t\t\t\t\tterminalId = this._idleTaskTerminals.remove(taskId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this._terminals[terminalId];\n\t\t\t}\n\t\t}\n\t\tif (terminalToReuse) {\n\t\t\tif (!launchConfigs) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Task shell launch configuration should not be undefined here.\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tterminalToReuse.terminal.scrollToBottom();\n\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\tlaunchConfigs.reconnectionProperties = {\n\t\t\t\t\townerId: ReconnectionType,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tlastTask: task.getCommonTaskId(),\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\tlabel: task._label,\n\t\t\t\t\t\tid: task._id,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tawait terminalToReuse.terminal.reuseTerminal(launchConfigs);\n\n\t\t\tif (task.command.presentation && task.command.presentation.clear) {\n\t\t\t\tterminalToReuse.terminal.clearBuffer();\n\t\t\t}\n\t\t\tthis._terminals[\n\t\t\t\tterminalToReuse.terminal.instanceId.toString()\n\t\t\t].lastTask = taskKey;\n\t\t\treturn [terminalToReuse.terminal, undefined];\n\t\t}\n\n\t\tthis._terminalCreationQueue = this._terminalCreationQueue.then(() =>\n\t\t\tthis._doCreateTerminal(task, group, launchConfigs),\n\t\t);\n\t\tconst terminal: ITerminalInstance = (await this\n\t\t\t._terminalCreationQueue)!;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tterminal.shellLaunchConfig.reconnectionProperties = {\n\t\t\t\townerId: ReconnectionType,\n\t\t\t\tdata: {\n\t\t\t\t\tlastTask: task.getCommonTaskId(),\n\t\t\t\t\tgroup,\n\t\t\t\t\tlabel: task._label,\n\t\t\t\t\tid: task._id,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tconst terminalKey = terminal.instanceId.toString();\n\t\tconst terminalData = { terminal: terminal, lastTask: taskKey, group };\n\t\tterminal.onDisposed(() =>\n\t\t\tthis._deleteTaskAndTerminal(terminal, terminalData),\n\t\t);\n\t\tthis._terminals[terminalKey] = terminalData;\n\t\treturn [terminal, undefined];\n\t}\n\n\tprivate _buildShellCommandLine(\n\t\tplatform: Platform.Platform,\n\t\tshellExecutable: string,\n\t\tshellOptions: IShellConfiguration | undefined,\n\t\tcommand: CommandString,\n\t\toriginalCommand: CommandString | undefined,\n\t\targs: CommandString[],\n\t): string {\n\t\tconst basename = path.parse(shellExecutable).name.toLowerCase();\n\t\tconst shellQuoteOptions = this._getQuotingOptions(\n\t\t\tbasename,\n\t\t\tshellOptions,\n\t\t\tplatform,\n\t\t);\n\n\t\tfunction needsQuotes(value: string): boolean {\n\t\t\tif (value.length >= 2) {\n\t\t\t\tconst first =\n\t\t\t\t\tvalue[0] === shellQuoteOptions.strong\n\t\t\t\t\t\t? shellQuoteOptions.strong\n\t\t\t\t\t\t: value[0] === shellQuoteOptions.weak\n\t\t\t\t\t\t\t? shellQuoteOptions.weak\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\tif (first === value[value.length - 1]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet quote: string | undefined;\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\t// We found the end quote.\n\t\t\t\tconst ch = value[i];\n\t\t\t\tif (ch === quote) {\n\t\t\t\t\tquote = undefined;\n\t\t\t\t} else if (quote !== undefined) {\n\t\t\t\t\t// skip the character. We are quoted.\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (ch === shellQuoteOptions.escape) {\n\t\t\t\t\t// Skip the next character\n\t\t\t\t\ti++;\n\t\t\t\t} else if (\n\t\t\t\t\tch === shellQuoteOptions.strong ||\n\t\t\t\t\tch === shellQuoteOptions.weak\n\t\t\t\t) {\n\t\t\t\t\tquote = ch;\n\t\t\t\t} else if (ch === \" \") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction quote(value: string, kind: ShellQuoting): [string, boolean] {\n\t\t\tif (kind === ShellQuoting.Strong && shellQuoteOptions.strong) {\n\t\t\t\treturn [\n\t\t\t\t\tshellQuoteOptions.strong + value + shellQuoteOptions.strong,\n\t\t\t\t\ttrue,\n\t\t\t\t];\n\t\t\t} else if (kind === ShellQuoting.Weak && shellQuoteOptions.weak) {\n\t\t\t\treturn [\n\t\t\t\t\tshellQuoteOptions.weak + value + shellQuoteOptions.weak,\n\t\t\t\t\ttrue,\n\t\t\t\t];\n\t\t\t} else if (\n\t\t\t\tkind === ShellQuoting.Escape &&\n\t\t\t\tshellQuoteOptions.escape\n\t\t\t) {\n\t\t\t\tif (Types.isString(shellQuoteOptions.escape)) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\tvalue.replace(/ /g, shellQuoteOptions.escape + \" \"),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\tconst buffer: string[] = [];\n\t\t\t\t\tfor (const ch of shellQuoteOptions.escape.charsToEscape) {\n\t\t\t\t\t\tbuffer.push(`\\\\${ch}`);\n\t\t\t\t\t}\n\t\t\t\t\tconst regexp: RegExp = new RegExp(\n\t\t\t\t\t\t\"[\" + buffer.join(\",\") + \"]\",\n\t\t\t\t\t\t\"g\",\n\t\t\t\t\t);\n\t\t\t\t\tconst escapeChar = shellQuoteOptions.escape.escapeChar;\n\t\t\t\t\treturn [\n\t\t\t\t\t\tvalue.replace(regexp, (match) => escapeChar + match),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [value, false];\n\t\t}\n\n\t\tfunction quoteIfNecessary(value: CommandString): [string, boolean] {\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (needsQuotes(value)) {\n\t\t\t\t\treturn quote(value, ShellQuoting.Strong);\n\t\t\t\t} else {\n\t\t\t\t\treturn [value, false];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn quote(value.value, value.quoting);\n\t\t\t}\n\t\t}\n\n\t\t// If we have no args and the command is a string then use the command to stay backwards compatible with the old command line\n\t\t// model. To allow variable resolving with spaces we do continue if the resolved value is different than the original one\n\t\t// and the resolved one needs quoting.\n\t\tif (\n\t\t\t(!args || args.length === 0) &&\n\t\t\tTypes.isString(command) &&\n\t\t\t(command === (originalCommand as string) ||\n\t\t\t\tneedsQuotes(originalCommand as string))\n\t\t) {\n\t\t\treturn command;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tlet commandQuoted = false;\n\t\tlet argQuoted = false;\n\t\tlet value: string;\n\t\tlet quoted: boolean;\n\t\t[value, quoted] = quoteIfNecessary(command);\n\t\tresult.push(value);\n\t\tcommandQuoted = quoted;\n\t\tfor (const arg of args) {\n\t\t\t[value, quoted] = quoteIfNecessary(arg);\n\t\t\tresult.push(value);\n\t\t\targQuoted = argQuoted || quoted;\n\t\t}\n\n\t\tlet commandLine = result.join(\" \");\n\t\t// There are special rules quoted command line in cmd.exe\n\t\tif (platform === Platform.Platform.Windows) {\n\t\t\tif (basename === \"cmd\" && commandQuoted && argQuoted) {\n\t\t\t\tcommandLine = '\"' + commandLine + '\"';\n\t\t\t} else if (\n\t\t\t\t(basename === \"powershell\" || basename === \"pwsh\") &&\n\t\t\t\tcommandQuoted\n\t\t\t) {\n\t\t\t\tcommandLine = \"& \" + commandLine;\n\t\t\t}\n\t\t}\n\n\t\treturn commandLine;\n\t}\n\n\tprivate _getQuotingOptions(\n\t\tshellBasename: string,\n\t\tshellOptions: IShellConfiguration | undefined,\n\t\tplatform: Platform.Platform,\n\t): IShellQuotingOptions {\n\t\tif (shellOptions && shellOptions.quoting) {\n\t\t\treturn shellOptions.quoting;\n\t\t}\n\t\treturn (\n\t\t\tTerminalTaskSystem._shellQuotes[shellBasename] ||\n\t\t\tTerminalTaskSystem._osShellQuotes[\n\t\t\t\tPlatform.PlatformToString(platform)\n\t\t\t]\n\t\t);\n\t}\n\n\tprivate _collectTaskVariables(\n\t\tvariables: Set<string>,\n\t\ttask: CustomTask | ContributedTask,\n\t): void {\n\t\tif (task.command && task.command.name) {\n\t\t\tthis._collectCommandVariables(variables, task.command, task);\n\t\t}\n\t\tthis._collectMatcherVariables(\n\t\t\tvariables,\n\t\t\ttask.configurationProperties.problemMatchers,\n\t\t);\n\n\t\tif (\n\t\t\ttask.command.runtime === RuntimeType.CustomExecution &&\n\t\t\t(CustomTask.is(task) || ContributedTask.is(task))\n\t\t) {\n\t\t\tlet definition: any;\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tdefinition = task._source.config.element;\n\t\t\t} else {\n\t\t\t\tdefinition = Objects.deepClone(task.defines);\n\t\t\t\tdelete definition._key;\n\t\t\t\tdelete definition.type;\n\t\t\t}\n\t\t\tthis._collectDefinitionVariables(variables, definition);\n\t\t}\n\t}\n\n\tprivate _collectDefinitionVariables(\n\t\tvariables: Set<string>,\n\t\tdefinition: any,\n\t): void {\n\t\tif (Types.isString(definition)) {\n\t\t\tthis._collectVariables(variables, definition);\n\t\t} else if (Array.isArray(definition)) {\n\t\t\tdefinition.forEach((element: any) =>\n\t\t\t\tthis._collectDefinitionVariables(variables, element),\n\t\t\t);\n\t\t} else if (Types.isObject(definition)) {\n\t\t\tfor (const key in definition) {\n\t\t\t\tthis._collectDefinitionVariables(variables, definition[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectCommandVariables(\n\t\tvariables: Set<string>,\n\t\tcommand: ICommandConfiguration,\n\t\ttask: CustomTask | ContributedTask,\n\t): void {\n\t\t// The custom execution should have everything it needs already as it provided\n\t\t// the callback.\n\t\tif (command.runtime === RuntimeType.CustomExecution) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (command.name === undefined) {\n\t\t\tthrow new Error(\"Command name should never be undefined here.\");\n\t\t}\n\t\tthis._collectVariables(variables, command.name);\n\t\tcommand.args?.forEach((arg) => this._collectVariables(variables, arg));\n\t\t// Try to get a scope.\n\t\tconst scope = (<IExtensionTaskSource>task._source).scope;\n\t\tif (scope !== TaskScope.Global) {\n\t\t\tvariables.add(\"${workspaceFolder}\");\n\t\t}\n\t\tif (command.options) {\n\t\t\tconst options = command.options;\n\t\t\tif (options.cwd) {\n\t\t\t\tthis._collectVariables(variables, options.cwd);\n\t\t\t}\n\t\t\tconst optionsEnv = options.env;\n\t\t\tif (optionsEnv) {\n\t\t\t\tObject.keys(optionsEnv).forEach((key) => {\n\t\t\t\t\tconst value: any = optionsEnv[key];\n\t\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\t\tthis._collectVariables(variables, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (options.shell) {\n\t\t\t\tif (options.shell.executable) {\n\t\t\t\t\tthis._collectVariables(variables, options.shell.executable);\n\t\t\t\t}\n\t\t\t\toptions.shell.args?.forEach((arg) =>\n\t\t\t\t\tthis._collectVariables(variables, arg),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectMatcherVariables(\n\t\tvariables: Set<string>,\n\t\tvalues: Array<string | ProblemMatcher> | undefined,\n\t): void {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvalues.forEach((value) => {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === \"$\") {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (matcher && matcher.filePrefix) {\n\t\t\t\tif (Types.isString(matcher.filePrefix)) {\n\t\t\t\t\tthis._collectVariables(variables, matcher.filePrefix);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const fp of [\n\t\t\t\t\t\t...asArray(matcher.filePrefix.include || []),\n\t\t\t\t\t\t...asArray(matcher.filePrefix.exclude || []),\n\t\t\t\t\t]) {\n\t\t\t\t\t\tthis._collectVariables(variables, fp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _collectVariables(\n\t\tvariables: Set<string>,\n\t\tvalue: string | CommandString,\n\t): void {\n\t\tconst string: string = Types.isString(value) ? value : value.value;\n\t\tconst r = /\\$\\{(.*?)\\}/g;\n\t\tlet matches: RegExpExecArray | null;\n\t\tdo {\n\t\t\tmatches = r.exec(string);\n\t\t\tif (matches) {\n\t\t\t\tvariables.add(matches[0]);\n\t\t\t}\n\t\t} while (matches);\n\t}\n\n\tprivate async _resolveCommandAndArgs(\n\t\tresolver: VariableResolver,\n\t\tcommandConfig: ICommandConfiguration,\n\t): Promise<{ command: CommandString; args: CommandString[] }> {\n\t\t// First we need to use the command args:\n\t\tlet args: CommandString[] = commandConfig.args\n\t\t\t? commandConfig.args.slice()\n\t\t\t: [];\n\t\targs = await this._resolveVariables(resolver, args);\n\t\tconst command: CommandString = await this._resolveVariable(\n\t\t\tresolver,\n\t\t\tcommandConfig.name,\n\t\t);\n\t\treturn { command, args };\n\t}\n\n\tprivate async _resolveVariables(\n\t\tresolver: VariableResolver,\n\t\tvalue: string[],\n\t): Promise<string[]>;\n\tprivate async _resolveVariables(\n\t\tresolver: VariableResolver,\n\t\tvalue: CommandString[],\n\t): Promise<CommandString[]>;\n\tprivate async _resolveVariables(\n\t\tresolver: VariableResolver,\n\t\tvalue: CommandString[],\n\t): Promise<CommandString[]> {\n\t\treturn Promise.all(\n\t\t\tvalue.map((s) => this._resolveVariable(resolver, s)),\n\t\t);\n\t}\n\n\tprivate async _resolveMatchers(\n\t\tresolver: VariableResolver,\n\t\tvalues: Array<string | ProblemMatcher> | undefined,\n\t): Promise<ProblemMatcher[]> {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: ProblemMatcher[] = [];\n\t\tfor (const value of values) {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === \"$\") {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (!matcher) {\n\t\t\t\tthis._appendOutput(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"unknownProblemMatcher\",\n\t\t\t\t\t\t\"Problem matcher {0} can't be resolved. The matcher will be ignored\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst taskSystemInfo: ITaskSystemInfo | undefined =\n\t\t\t\tresolver.taskSystemInfo;\n\t\t\tconst hasFilePrefix = matcher.filePrefix !== undefined;\n\t\t\tconst hasUriProvider =\n\t\t\t\ttaskSystemInfo !== undefined &&\n\t\t\t\ttaskSystemInfo.uriProvider !== undefined;\n\t\t\tif (!hasFilePrefix && !hasUriProvider) {\n\t\t\t\tresult.push(matcher);\n\t\t\t} else {\n\t\t\t\tconst copy = Objects.deepClone(matcher);\n\t\t\t\tif (hasUriProvider && taskSystemInfo !== undefined) {\n\t\t\t\t\tcopy.uriProvider = taskSystemInfo.uriProvider;\n\t\t\t\t}\n\t\t\t\tif (hasFilePrefix) {\n\t\t\t\t\tconst filePrefix = copy.filePrefix;\n\t\t\t\t\tif (Types.isString(filePrefix)) {\n\t\t\t\t\t\tcopy.filePrefix = await this._resolveVariable(\n\t\t\t\t\t\t\tresolver,\n\t\t\t\t\t\t\tfilePrefix,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (filePrefix !== undefined) {\n\t\t\t\t\t\tif (filePrefix.include) {\n\t\t\t\t\t\t\tfilePrefix.include = Array.isArray(\n\t\t\t\t\t\t\t\tfilePrefix.include,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t? await Promise.all(\n\t\t\t\t\t\t\t\t\t\tfilePrefix.include.map((x) =>\n\t\t\t\t\t\t\t\t\t\t\tthis._resolveVariable(resolver, x),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: await this._resolveVariable(\n\t\t\t\t\t\t\t\t\t\tresolver,\n\t\t\t\t\t\t\t\t\t\tfilePrefix.include,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filePrefix.exclude) {\n\t\t\t\t\t\t\tfilePrefix.exclude = Array.isArray(\n\t\t\t\t\t\t\t\tfilePrefix.exclude,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t? await Promise.all(\n\t\t\t\t\t\t\t\t\t\tfilePrefix.exclude.map((x) =>\n\t\t\t\t\t\t\t\t\t\t\tthis._resolveVariable(resolver, x),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: await this._resolveVariable(\n\t\t\t\t\t\t\t\t\t\tresolver,\n\t\t\t\t\t\t\t\t\t\tfilePrefix.exclude,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _resolveVariable(\n\t\tresolver: VariableResolver,\n\t\tvalue: string | undefined,\n\t): Promise<string>;\n\tprivate async _resolveVariable(\n\t\tresolver: VariableResolver,\n\t\tvalue: CommandString | undefined,\n\t): Promise<CommandString>;\n\tprivate async _resolveVariable(\n\t\tresolver: VariableResolver,\n\t\tvalue: CommandString | undefined,\n\t): Promise<CommandString> {\n\t\t// TODO@Dirk Task.getWorkspaceFolder should return a WorkspaceFolder that is defined in workspace.ts\n\t\tif (Types.isString(value)) {\n\t\t\treturn resolver.resolve(value);\n\t\t} else if (value !== undefined) {\n\t\t\treturn {\n\t\t\t\tvalue: await resolver.resolve(value.value),\n\t\t\t\tquoting: value.quoting,\n\t\t\t};\n\t\t} else {\n\t\t\t// This should never happen\n\t\t\tthrow new Error(\"Should never try to resolve undefined.\");\n\t\t}\n\t}\n\n\tprivate async _resolveOptions(\n\t\tresolver: VariableResolver,\n\t\toptions: CommandOptions | undefined,\n\t): Promise<CommandOptions> {\n\t\tif (options === undefined || options === null) {\n\t\t\tlet cwd: string | undefined;\n\t\t\ttry {\n\t\t\t\tcwd = await this._resolveVariable(\n\t\t\t\t\tresolver,\n\t\t\t\t\t\"${workspaceFolder}\",\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\t// No workspace\n\t\t\t}\n\t\t\treturn { cwd };\n\t\t}\n\t\tconst result: CommandOptions = Types.isString(options.cwd)\n\t\t\t? { cwd: await this._resolveVariable(resolver, options.cwd) }\n\t\t\t: {\n\t\t\t\t\tcwd: await this._resolveVariable(\n\t\t\t\t\t\tresolver,\n\t\t\t\t\t\t\"${workspaceFolder}\",\n\t\t\t\t\t),\n\t\t\t\t};\n\t\tif (options.env) {\n\t\t\tresult.env = Object.create(null);\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tconst value: any = options.env[key];\n\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\tresult.env![key] = await this._resolveVariable(\n\t\t\t\t\t\tresolver,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresult.env![key] = value.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic WellKnownCommands: IStringDictionary<boolean> = {\n\t\tant: true,\n\t\tcmake: true,\n\t\teslint: true,\n\t\tgradle: true,\n\t\tgrunt: true,\n\t\tgulp: true,\n\t\tjake: true,\n\t\tjenkins: true,\n\t\tjshint: true,\n\t\tmake: true,\n\t\tmaven: true,\n\t\tmsbuild: true,\n\t\tmsc: true,\n\t\tnmake: true,\n\t\tnpm: true,\n\t\trake: true,\n\t\ttsc: true,\n\t\txbuild: true,\n\t};\n\n\tpublic getSanitizedCommand(cmd: string): string {\n\t\tlet result = cmd.toLowerCase();\n\t\tconst index = result.lastIndexOf(path.sep);\n\t\tif (index !== -1) {\n\t\t\tresult = result.substring(index + 1);\n\t\t}\n\t\tif (TerminalTaskSystem.WellKnownCommands[result]) {\n\t\t\treturn result;\n\t\t}\n\t\treturn \"other\";\n\t}\n\n\tprivate _appendOutput(output: string): void {\n\t\tconst outputChannel = this._outputService.getChannel(\n\t\t\tthis._outputChannelId,\n\t\t);\n\t\toutputChannel?.append(output);\n\t}\n}\n\nfunction getWaitOnExitValue(\n\tpresentationOptions: IPresentationOptions,\n\tconfigurationProperties: IConfigurationProperties,\n) {\n\tif (\n\t\tpresentationOptions.close === undefined ||\n\t\tpresentationOptions.close === false\n\t) {\n\t\tif (\n\t\t\tpresentationOptions.reveal !== RevealKind.Never ||\n\t\t\t!configurationProperties.isBackground ||\n\t\t\tpresentationOptions.close === false\n\t\t) {\n\t\t\tif (presentationOptions.panel === PanelKind.New) {\n\t\t\t\treturn taskShellIntegrationWaitOnExitSequence(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"closeTerminal\",\n\t\t\t\t\t\t\"Press any key to close the terminal.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else if (presentationOptions.showReuseMessage) {\n\t\t\t\treturn taskShellIntegrationWaitOnExitSequence(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"reuseTerminal\",\n\t\t\t\t\t\t\"Terminal will be reused by tasks, press any key to close it.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn !presentationOptions.close;\n}\n\nfunction taskShellIntegrationWaitOnExitSequence(\n\tmessage: string,\n): (exitCode: number) => string {\n\treturn (exitCode) => {\n\t\treturn `${VSCodeSequence(VSCodeOscPt.CommandFinished, exitCode.toString())}${message}`;\n\t};\n}\n\nfunction getReconnectionData(\n\tterminal: ITerminalInstance,\n): IReconnectionTaskData | undefined {\n\treturn terminal.shellLaunchConfig.attachPersistentProcess\n\t\t?.reconnectionProperties?.data as IReconnectionTaskData | undefined;\n}\n"],
  "mappings": "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",
  "names": ["terminal", "task", "activeTask", "resolvedVariables", "delayer", "args", "value", "quote"]
}
