{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from '../../../../base/common/arrays.js';\nimport * as Async from '../../../../base/common/async.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { isUNC } from '../../../../base/common/extpath.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { LinkedMap, Touch } from '../../../../base/common/map.js';\nimport * as Objects from '../../../../base/common/objects.js';\nimport * as path from '../../../../base/common/path.js';\nimport * as Platform from '../../../../base/common/platform.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport Severity from '../../../../base/common/severity.js';\nimport * as Types from '../../../../base/common/types.js';\nimport * as nls from '../../../../nls.js';\n\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IMarkerService, MarkerSeverity } from '../../../../platform/markers/common/markers.js';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { Markers } from '../../markers/common/markers.js';\nimport { ProblemMatcher, ProblemMatcherRegistry /*, ProblemPattern, getResource */ } from '../common/problemMatcher.js';\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IShellLaunchConfig, WaitOnExitValue } from '../../../../platform/terminal/common/terminal.js';\nimport { formatMessageForTerminal } from '../../../../platform/terminal/common/terminalStrings.js';\nimport { IViewDescriptorService, ViewContainerLocation } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { TaskTerminalStatus } from './taskTerminalStatus.js';\nimport { ProblemCollectorEventKind, ProblemHandlingStrategy, StartStopProblemCollector, WatchingProblemCollector } from '../common/problemCollectors.js';\nimport { GroupKind } from '../common/taskConfiguration.js';\nimport { IResolveSet, IResolvedVariables, ITaskExecuteResult, ITaskResolver, ITaskSummary, ITaskSystem, ITaskSystemInfo, ITaskSystemInfoResolver, ITaskTerminateResponse, TaskError, TaskErrors, TaskExecuteKind, Triggers } from '../common/taskSystem.js';\nimport { CommandOptions, CommandString, ContributedTask, CustomTask, DependsOrder, ICommandConfiguration, IConfigurationProperties, IExtensionTaskSource, IPresentationOptions, IShellConfiguration, IShellQuotingOptions, ITaskEvent, InMemoryTask, PanelKind, RevealKind, RevealProblemKind, RuntimeType, ShellQuoting, Task, TaskEvent, TaskEventKind, TaskScope, TaskSourceKind } from '../common/tasks.js';\nimport { ITerminalGroupService, ITerminalInstance, ITerminalService } from '../../terminal/browser/terminal.js';\nimport { VSCodeOscProperty, VSCodeOscPt, VSCodeSequence } from '../../terminal/browser/terminalEscapeSequences.js';\nimport { TerminalProcessExtHostProxy } from '../../terminal/browser/terminalProcessExtHostProxy.js';\nimport { ITerminalProfileResolverService, TERMINAL_VIEW_ID } from '../../terminal/common/terminal.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IOutputService } from '../../../services/output/common/output.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nimport { IPathService } from '../../../services/path/common/pathService.js';\n\ninterface ITerminalData {\n\tterminal: ITerminalInstance;\n\tlastTask: string;\n\tgroup?: string;\n}\n\ninterface IInstanceCount {\n\tcount: number;\n}\n\ninterface IActiveTerminalData {\n\tterminal?: ITerminalInstance;\n\ttask: Task;\n\tpromise: Promise<ITaskSummary>;\n\tstate?: TaskEventKind;\n\tcount: IInstanceCount;\n}\n\ninterface IReconnectionTaskData {\n\tlabel: string;\n\tid: string;\n\tlastTask: string;\n\tgroup?: string;\n}\n\nconst ReconnectionType = 'Task';\n\nclass VariableResolver {\n\tprivate static _regex = /\\$\\{(.*?)\\}/g;\n\tconstructor(public workspaceFolder: IWorkspaceFolder | undefined, public taskSystemInfo: ITaskSystemInfo | undefined, public readonly values: Map<string, string>, private _service: IConfigurationResolverService | undefined) {\n\t}\n\tasync resolve(value: string): Promise<string> {\n\t\tconst replacers: Promise<string>[] = [];\n\t\tvalue.replace(VariableResolver._regex, (match, ...args) => {\n\t\t\treplacers.push(this._replacer(match, args));\n\t\t\treturn match;\n\t\t});\n\t\tconst resolvedReplacers = await Promise.all(replacers);\n\t\treturn value.replace(VariableResolver._regex, () => resolvedReplacers.shift()!);\n\n\t}\n\n\tprivate async _replacer(match: string, args: string[]): Promise<string> {\n\t\t// Strip out the ${} because the map contains them variables without those characters.\n\t\tconst result = this.values.get(match.substring(2, match.length - 1));\n\t\tif ((result !== undefined) && (result !== null)) {\n\t\t\treturn result;\n\t\t}\n\t\tif (this._service) {\n\t\t\treturn this._service.resolveAsync(this.workspaceFolder, match);\n\t\t}\n\t\treturn match;\n\t}\n}\n\nclass VerifiedTask {\n\treadonly task: Task;\n\treadonly resolver: ITaskResolver;\n\treadonly trigger: string;\n\tresolvedVariables?: IResolvedVariables;\n\tsystemInfo?: ITaskSystemInfo;\n\tworkspaceFolder?: IWorkspaceFolder;\n\tshellLaunchConfig?: IShellLaunchConfig;\n\n\tconstructor(task: Task, resolver: ITaskResolver, trigger: string) {\n\t\tthis.task = task;\n\t\tthis.resolver = resolver;\n\t\tthis.trigger = trigger;\n\t}\n\n\tpublic verify(): boolean {\n\t\tlet verified = false;\n\t\tif (this.trigger && this.resolvedVariables && this.workspaceFolder && (this.shellLaunchConfig !== undefined)) {\n\t\t\tverified = true;\n\t\t}\n\t\treturn verified;\n\t}\n\n\tpublic getVerifiedTask(): { task: Task; resolver: ITaskResolver; trigger: string; resolvedVariables: IResolvedVariables; systemInfo: ITaskSystemInfo; workspaceFolder: IWorkspaceFolder; shellLaunchConfig: IShellLaunchConfig } {\n\t\tif (this.verify()) {\n\t\t\treturn { task: this.task, resolver: this.resolver, trigger: this.trigger, resolvedVariables: this.resolvedVariables!, systemInfo: this.systemInfo!, workspaceFolder: this.workspaceFolder!, shellLaunchConfig: this.shellLaunchConfig! };\n\t\t} else {\n\t\t\tthrow new Error('VerifiedTask was not checked. verify must be checked before getVerifiedTask.');\n\t\t}\n\t}\n}\n\nexport class TerminalTaskSystem extends Disposable implements ITaskSystem {\n\n\tpublic static TelemetryEventName: string = 'taskService';\n\n\tprivate static readonly ProcessVarName = '__process__';\n\n\tprivate static _shellQuotes: IStringDictionary<IShellQuotingOptions> = {\n\t\t'cmd': {\n\t\t\tstrong: '\"'\n\t\t},\n\t\t'powershell': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '`',\n\t\t\t\tcharsToEscape: ' \"\\'()'\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t},\n\t\t'bash': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '\\\\',\n\t\t\t\tcharsToEscape: ' \"\\''\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t},\n\t\t'zsh': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '\\\\',\n\t\t\t\tcharsToEscape: ' \"\\''\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t}\n\t};\n\n\tprivate static _osShellQuotes: IStringDictionary<IShellQuotingOptions> = {\n\t\t'Linux': TerminalTaskSystem._shellQuotes['bash'],\n\t\t'Mac': TerminalTaskSystem._shellQuotes['bash'],\n\t\t'Windows': TerminalTaskSystem._shellQuotes['powershell']\n\t};\n\n\tprivate _activeTasks: IStringDictionary<IActiveTerminalData>;\n\tprivate _busyTasks: IStringDictionary<Task>;\n\tprivate _terminals: IStringDictionary<ITerminalData>;\n\tprivate _idleTaskTerminals: LinkedMap<string, string>;\n\tprivate _sameTaskTerminals: IStringDictionary<string>;\n\tprivate _taskSystemInfoResolver: ITaskSystemInfoResolver;\n\tprivate _lastTask: VerifiedTask | undefined;\n\t// Should always be set in run\n\tprivate _currentTask!: VerifiedTask;\n\tprivate _isRerun: boolean = false;\n\tprivate _previousPanelId: string | undefined;\n\tprivate _previousTerminalInstance: ITerminalInstance | undefined;\n\tprivate _terminalStatusManager: TaskTerminalStatus;\n\tprivate _terminalCreationQueue: Promise<ITerminalInstance | void> = Promise.resolve();\n\tprivate _hasReconnected: boolean = false;\n\tprivate readonly _onDidStateChange: Emitter<ITaskEvent>;\n\tprivate _reconnectedTerminals: ITerminalInstance[] | undefined;\n\n\ttaskShellIntegrationStartSequence(cwd: string | URI | undefined): string {\n\t\treturn (\n\t\t\tVSCodeSequence(VSCodeOscPt.PromptStart) +\n\t\t\tVSCodeSequence(VSCodeOscPt.Property, `${VSCodeOscProperty.Task}=True`) +\n\t\t\t(cwd\n\t\t\t\t? VSCodeSequence(VSCodeOscPt.Property, `${VSCodeOscProperty.Cwd}=${typeof cwd === 'string' ? cwd : cwd.fsPath}`)\n\t\t\t\t: ''\n\t\t\t) +\n\t\t\tVSCodeSequence(VSCodeOscPt.CommandStart)\n\t\t);\n\t}\n\tget taskShellIntegrationOutputSequence(): string {\n\t\treturn VSCodeSequence(VSCodeOscPt.CommandExecuted);\n\t}\n\n\tconstructor(\n\t\tprivate _terminalService: ITerminalService,\n\t\tprivate _terminalGroupService: ITerminalGroupService,\n\t\tprivate _outputService: IOutputService,\n\t\tprivate _paneCompositeService: IPaneCompositePartService,\n\t\tprivate _viewsService: IViewsService,\n\t\tprivate _markerService: IMarkerService,\n\t\tprivate _modelService: IModelService,\n\t\tprivate _configurationResolverService: IConfigurationResolverService,\n\t\tprivate _contextService: IWorkspaceContextService,\n\t\tprivate _environmentService: IWorkbenchEnvironmentService,\n\t\tprivate _outputChannelId: string,\n\t\tprivate _fileService: IFileService,\n\t\tprivate _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\tprivate _pathService: IPathService,\n\t\tprivate _viewDescriptorService: IViewDescriptorService,\n\t\tprivate _logService: ILogService,\n\t\tprivate _notificationService: INotificationService,\n\t\tinstantiationService: IInstantiationService,\n\t\ttaskSystemInfoResolver: ITaskSystemInfoResolver,\n\t) {\n\t\tsuper();\n\n\t\tthis._activeTasks = Object.create(null);\n\t\tthis._busyTasks = Object.create(null);\n\t\tthis._terminals = Object.create(null);\n\t\tthis._idleTaskTerminals = new LinkedMap<string, string>();\n\t\tthis._sameTaskTerminals = Object.create(null);\n\t\tthis._onDidStateChange = new Emitter();\n\t\tthis._taskSystemInfoResolver = taskSystemInfoResolver;\n\t\tthis._register(this._terminalStatusManager = instantiationService.createInstance(TaskTerminalStatus));\n\t}\n\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tprivate _log(value: string): void {\n\t\tthis._appendOutput(value + '\\n');\n\t}\n\n\tprotected _showOutput(): void {\n\t\tthis._outputService.showChannel(this._outputChannelId, true);\n\t}\n\n\tpublic reconnect(task: Task, resolver: ITaskResolver): ITaskExecuteResult {\n\t\tthis._reconnectToTerminals();\n\t\treturn this.run(task, resolver, Triggers.reconnect);\n\t}\n\n\tpublic run(task: Task, resolver: ITaskResolver, trigger: string = Triggers.command): ITaskExecuteResult {\n\t\ttask = task.clone(); // A small amount of task state is stored in the task (instance) and tasks passed in to run may have that set already.\n\t\tconst instances = InMemoryTask.is(task) || this._isTaskEmpty(task) ? [] : this._getInstances(task);\n\t\tconst validInstance = instances.length < ((task.runOptions && task.runOptions.instanceLimit) ?? 1);\n\t\tconst instance = instances[0]?.count?.count ?? 0;\n\t\tthis._currentTask = new VerifiedTask(task, resolver, trigger);\n\t\tif (instance > 0) {\n\t\t\ttask.instance = instance;\n\t\t}\n\t\tif (!validInstance) {\n\t\t\tconst terminalData = instances[instances.length - 1];\n\t\t\tthis._lastTask = this._currentTask;\n\t\t\treturn { kind: TaskExecuteKind.Active, task: terminalData.task, active: { same: true, background: task.configurationProperties.isBackground! }, promise: terminalData.promise };\n\t\t}\n\n\t\ttry {\n\t\t\tconst executeResult = { kind: TaskExecuteKind.Started, task, started: {}, promise: this._executeTask(task, resolver, trigger, new Set(), new Map(), undefined) };\n\t\t\texecuteResult.promise.then(summary => {\n\t\t\t\tthis._lastTask = this._currentTask;\n\t\t\t});\n\t\t\treturn executeResult;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TaskError) {\n\t\t\t\tthrow error;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\tthis._log(error.message);\n\t\t\t\tthrow new TaskError(Severity.Error, error.message, TaskErrors.UnknownError);\n\t\t\t} else {\n\t\t\t\tthis._log(error.toString());\n\t\t\t\tthrow new TaskError(Severity.Error, nls.localize('TerminalTaskSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic rerun(): ITaskExecuteResult | undefined {\n\t\tif (this._lastTask && this._lastTask.verify()) {\n\t\t\tif ((this._lastTask.task.runOptions.reevaluateOnRerun !== undefined) && !this._lastTask.task.runOptions.reevaluateOnRerun) {\n\t\t\t\tthis._isRerun = true;\n\t\t\t}\n\t\t\tconst result = this.run(this._lastTask.task, this._lastTask.resolver);\n\t\t\tresult.promise.then(summary => {\n\t\t\t\tthis._isRerun = false;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _showTaskLoadErrors(task: Task) {\n\t\tif (task.taskLoadMessages && task.taskLoadMessages.length > 0) {\n\t\t\ttask.taskLoadMessages.forEach(loadMessage => {\n\t\t\t\tthis._log(loadMessage + '\\n');\n\t\t\t});\n\t\t\tconst openOutput = 'Show Output';\n\t\t\tthis._notificationService.prompt(Severity.Warning,\n\t\t\t\tnls.localize('TerminalTaskSystem.taskLoadReporting', \"There are issues with task \\\"{0}\\\". See the output for more details.\",\n\t\t\t\t\ttask._label), [{\n\t\t\t\t\t\tlabel: openOutput,\n\t\t\t\t\t\trun: () => this._showOutput()\n\t\t\t\t\t}]);\n\t\t}\n\t}\n\n\tpublic isTaskVisible(task: Task): boolean {\n\t\tconst terminalData = this._activeTasks[task.getMapKey()];\n\t\tif (!terminalData?.terminal) {\n\t\t\treturn false;\n\t\t}\n\t\tconst activeTerminalInstance = this._terminalService.activeInstance;\n\t\tconst isPanelShowingTerminal = !!this._viewsService.getActiveViewWithId(TERMINAL_VIEW_ID);\n\t\treturn isPanelShowingTerminal && (activeTerminalInstance?.instanceId === terminalData.terminal.instanceId);\n\t}\n\n\n\tpublic revealTask(task: Task): boolean {\n\t\tconst terminalData = this._activeTasks[task.getMapKey()];\n\t\tif (!terminalData?.terminal) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isTerminalInPanel: boolean = this._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID) === ViewContainerLocation.Panel;\n\t\tif (isTerminalInPanel && this.isTaskVisible(task)) {\n\t\t\tif (this._previousPanelId) {\n\t\t\t\tif (this._previousTerminalInstance) {\n\t\t\t\t\tthis._terminalService.setActiveInstance(this._previousTerminalInstance);\n\t\t\t\t}\n\t\t\t\tthis._paneCompositeService.openPaneComposite(this._previousPanelId, ViewContainerLocation.Panel);\n\t\t\t} else {\n\t\t\t\tthis._paneCompositeService.hideActivePaneComposite(ViewContainerLocation.Panel);\n\t\t\t}\n\t\t\tthis._previousPanelId = undefined;\n\t\t\tthis._previousTerminalInstance = undefined;\n\t\t} else {\n\t\t\tif (isTerminalInPanel) {\n\t\t\t\tthis._previousPanelId = this._paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel)?.getId();\n\t\t\t\tif (this._previousPanelId === TERMINAL_VIEW_ID) {\n\t\t\t\t\tthis._previousTerminalInstance = this._terminalService.activeInstance ?? undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._terminalService.setActiveInstance(terminalData.terminal);\n\t\t\tif (CustomTask.is(task) || ContributedTask.is(task)) {\n\t\t\t\tthis._terminalGroupService.showPanel(task.command.presentation!.focus);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic isActive(): Promise<boolean> {\n\t\treturn Promise.resolve(this.isActiveSync());\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn Object.values(this._activeTasks).some(value => !!value.terminal);\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\treturn Object.values(this._activeTasks).every(value => !value.task.configurationProperties.promptOnClose);\n\t}\n\n\tpublic getActiveTasks(): Task[] {\n\t\treturn Object.values(this._activeTasks).flatMap(value => value.terminal ? value.task : []);\n\t}\n\n\tpublic getLastInstance(task: Task): Task | undefined {\n\t\tconst recentKey = task.getKey();\n\t\treturn Object.values(this._activeTasks).reverse().find(\n\t\t\t(value) => recentKey && recentKey === value.task.getKey())?.task;\n\t}\n\n\tpublic getBusyTasks(): Task[] {\n\t\treturn Object.keys(this._busyTasks).map(key => this._busyTasks[key]);\n\t}\n\n\tpublic customExecutionComplete(task: Task, result: number): Promise<void> {\n\t\tconst activeTerminal = this._activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal?.terminal) {\n\t\t\treturn Promise.reject(new Error('Expected to have a terminal for a custom execution task'));\n\t\t}\n\n\t\treturn new Promise<void>((resolve) => {\n\t\t\t// activeTerminal.terminal.rendererExit(result);\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tprivate _getInstances(task: Task): IActiveTerminalData[] {\n\t\tconst recentKey = task.getKey();\n\t\treturn Object.values(this._activeTasks).filter(\n\t\t\t(value) => recentKey && recentKey === value.task.getKey());\n\t}\n\n\tprivate _removeFromActiveTasks(task: Task | string): void {\n\t\tconst key = typeof task === 'string' ? task : task.getMapKey();\n\t\tconst taskToRemove = this._activeTasks[key];\n\t\tif (!taskToRemove) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._activeTasks[key];\n\t}\n\n\tprivate _fireTaskEvent(event: ITaskEvent) {\n\t\tif (event.kind !== TaskEventKind.Changed) {\n\t\t\tconst activeTask = this._activeTasks[event.__task.getMapKey()];\n\t\t\tif (activeTask) {\n\t\t\t\tactiveTask.state = event.kind;\n\t\t\t}\n\t\t}\n\t\tthis._onDidStateChange.fire(event);\n\t}\n\n\tpublic terminate(task: Task): Promise<ITaskTerminateResponse> {\n\t\tconst activeTerminal = this._activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse>({ success: false, task: undefined });\n\t\t}\n\t\tconst terminal = activeTerminal.terminal;\n\t\tif (!terminal) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse>({ success: false, task: undefined });\n\t\t}\n\t\treturn new Promise<ITaskTerminateResponse>((resolve, reject) => {\n\t\t\tterminal.onDisposed(terminal => {\n\t\t\t\tthis._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\t\t});\n\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\tconst task = activeTerminal.task;\n\t\t\t\ttry {\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Do nothing.\n\t\t\t\t}\n\t\t\t\tresolve({ success: true, task: task });\n\t\t\t});\n\t\t\tterminal.dispose();\n\t\t});\n\t}\n\n\tpublic terminateAll(): Promise<ITaskTerminateResponse[]> {\n\t\tconst promises: Promise<ITaskTerminateResponse>[] = [];\n\t\tfor (const [key, terminalData] of Object.entries(this._activeTasks)) {\n\t\t\tconst terminal = terminalData?.terminal;\n\t\t\tif (terminal) {\n\t\t\t\tpromises.push(new Promise<ITaskTerminateResponse>((resolve, reject) => {\n\t\t\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\t\t\tconst task = terminalData.task;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tonExit.dispose();\n\t\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// Do nothing.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this._activeTasks[key] === terminalData) {\n\t\t\t\t\t\t\tdelete this._activeTasks[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve({ success: true, task: terminalData.task });\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t\tterminal.dispose();\n\t\t\t}\n\t\t}\n\t\treturn Promise.all<ITaskTerminateResponse>(promises);\n\t}\n\n\tprivate _showDependencyCycleMessage(task: Task) {\n\t\tthis._log(nls.localize('dependencyCycle',\n\t\t\t'There is a dependency cycle. See task \"{0}\".',\n\t\t\ttask._label\n\t\t));\n\t\tthis._showOutput();\n\t}\n\n\tprivate _executeTask(task: Task, resolver: ITaskResolver, trigger: string, liveDependencies: Set<string>, encounteredTasks: Map<string, Promise<ITaskSummary>>, alreadyResolved?: Map<string, string>): Promise<ITaskSummary> {\n\t\tthis._showTaskLoadErrors(task);\n\n\t\tconst mapKey = task.getMapKey();\n\n\t\t// It's important that we add this task's entry to _activeTasks before\n\t\t// any of the code in the then runs (see #180541 and #180578). Wrapping\n\t\t// it in Promise.resolve().then() ensures that.\n\t\tconst promise = Promise.resolve().then(async () => {\n\t\t\talreadyResolved = alreadyResolved ?? new Map<string, string>();\n\t\t\tconst promises: Promise<ITaskSummary>[] = [];\n\t\t\tif (task.configurationProperties.dependsOn) {\n\t\t\t\tconst nextLiveDependencies = new Set(liveDependencies).add(task.getCommonTaskId());\n\t\t\t\tfor (const dependency of task.configurationProperties.dependsOn) {\n\t\t\t\t\tconst dependencyTask = await resolver.resolve(dependency.uri, dependency.task);\n\t\t\t\t\tif (dependencyTask) {\n\t\t\t\t\t\tthis._adoptConfigurationForDependencyTask(dependencyTask, task);\n\t\t\t\t\t\tlet taskResult;\n\t\t\t\t\t\tconst commonKey = dependencyTask.getCommonTaskId();\n\t\t\t\t\t\tif (nextLiveDependencies.has(commonKey)) {\n\t\t\t\t\t\t\tthis._showDependencyCycleMessage(dependencyTask);\n\t\t\t\t\t\t\ttaskResult = Promise.resolve<ITaskSummary>({});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttaskResult = encounteredTasks.get(commonKey);\n\t\t\t\t\t\t\tif (!taskResult) {\n\t\t\t\t\t\t\t\tconst activeTask = this._activeTasks[dependencyTask.getMapKey()] ?? this._getInstances(dependencyTask).pop();\n\t\t\t\t\t\t\t\ttaskResult = activeTask && this._getDependencyPromise(activeTask);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!taskResult) {\n\t\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.DependsOnStarted, task));\n\t\t\t\t\t\t\ttaskResult = this._executeDependencyTask(dependencyTask, resolver, trigger, nextLiveDependencies, encounteredTasks, alreadyResolved);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tencounteredTasks.set(commonKey, taskResult);\n\t\t\t\t\t\tpromises.push(taskResult);\n\t\t\t\t\t\tif (task.configurationProperties.dependsOrder === DependsOrder.sequence) {\n\t\t\t\t\t\t\tconst promiseResult = await taskResult;\n\t\t\t\t\t\t\tif (promiseResult.exitCode !== 0) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._log(nls.localize('dependencyFailed',\n\t\t\t\t\t\t\t'Couldn\\'t resolve dependent task \\'{0}\\' in workspace folder \\'{1}\\'',\n\t\t\t\t\t\t\tTypes.isString(dependency.task) ? dependency.task : JSON.stringify(dependency.task, undefined, 0),\n\t\t\t\t\t\t\tdependency.uri.toString()\n\t\t\t\t\t\t));\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.all(promises).then((summaries): Promise<ITaskSummary> | ITaskSummary => {\n\t\t\t\tfor (const summary of summaries) {\n\t\t\t\t\tif (summary.exitCode !== 0) {\n\t\t\t\t\t\treturn { exitCode: summary.exitCode };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((ContributedTask.is(task) || CustomTask.is(task)) && (task.command)) {\n\t\t\t\t\tif (this._isRerun) {\n\t\t\t\t\t\treturn this._reexecuteCommand(task, trigger, alreadyResolved!);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._executeCommand(task, trigger, alreadyResolved!);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { exitCode: 0 };\n\t\t\t});\n\t\t}).finally(() => {\n\t\t\tdelete this._activeTasks[mapKey];\n\t\t});\n\t\tconst lastInstance = this._getInstances(task).pop();\n\t\tconst count = lastInstance?.count ?? { count: 0 };\n\t\tcount.count++;\n\t\tconst activeTask = { task, promise, count };\n\t\tthis._activeTasks[mapKey] = activeTask;\n\t\treturn promise;\n\t}\n\n\tprivate _createInactiveDependencyPromise(task: Task): Promise<ITaskSummary> {\n\t\treturn new Promise<ITaskSummary>(resolve => {\n\t\t\tconst taskInactiveDisposable = this.onDidStateChange(taskEvent => {\n\t\t\t\tif ((taskEvent.kind === TaskEventKind.Inactive) && (taskEvent.__task === task)) {\n\t\t\t\t\ttaskInactiveDisposable.dispose();\n\t\t\t\t\tresolve({ exitCode: 0 });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _adoptConfigurationForDependencyTask(dependencyTask: Task, task: Task): void {\n\t\tif (dependencyTask.configurationProperties.icon) {\n\t\t\tdependencyTask.configurationProperties.icon.id ||= task.configurationProperties.icon?.id;\n\t\t\tdependencyTask.configurationProperties.icon.color ||= task.configurationProperties.icon?.color;\n\t\t} else {\n\t\t\tdependencyTask.configurationProperties.icon = task.configurationProperties.icon;\n\t\t}\n\t}\n\n\tprivate async _getDependencyPromise(task: IActiveTerminalData): Promise<ITaskSummary> {\n\t\tif (!task.task.configurationProperties.isBackground) {\n\t\t\treturn task.promise;\n\t\t}\n\t\tif (!task.task.configurationProperties.problemMatchers || task.task.configurationProperties.problemMatchers.length === 0) {\n\t\t\treturn task.promise;\n\t\t}\n\t\tif (task.state === TaskEventKind.Inactive) {\n\t\t\treturn { exitCode: 0 };\n\t\t}\n\t\treturn this._createInactiveDependencyPromise(task.task);\n\t}\n\n\tprivate async _executeDependencyTask(task: Task, resolver: ITaskResolver, trigger: string, liveDependencies: Set<string>, encounteredTasks: Map<string, Promise<ITaskSummary>>, alreadyResolved?: Map<string, string>): Promise<ITaskSummary> {\n\t\t// If the task is a background task with a watching problem matcher, we don't wait for the whole task to finish,\n\t\t// just for the problem matcher to go inactive.\n\t\tif (!task.configurationProperties.isBackground) {\n\t\t\treturn this._executeTask(task, resolver, trigger, liveDependencies, encounteredTasks, alreadyResolved);\n\t\t}\n\n\t\tconst inactivePromise = this._createInactiveDependencyPromise(task);\n\t\treturn Promise.race([inactivePromise, this._executeTask(task, resolver, trigger, liveDependencies, encounteredTasks, alreadyResolved)]);\n\t}\n\n\tprivate async _resolveAndFindExecutable(systemInfo: ITaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, cwd: string | undefined, envPath: string | undefined): Promise<string> {\n\t\tconst command = await this._configurationResolverService.resolveAsync(workspaceFolder, CommandString.value(task.command.name!));\n\t\tcwd = cwd ? await this._configurationResolverService.resolveAsync(workspaceFolder, cwd) : undefined;\n\t\tconst paths = envPath ? await Promise.all(envPath.split(path.delimiter).map(p => this._configurationResolverService.resolveAsync(workspaceFolder, p))) : undefined;\n\t\tlet foundExecutable = await systemInfo?.findExecutable(command, cwd, paths);\n\t\tif (!foundExecutable) {\n\t\t\tfoundExecutable = path.join(cwd ?? '', command);\n\t\t}\n\t\treturn foundExecutable;\n\t}\n\n\tprivate _findUnresolvedVariables(variables: Set<string>, alreadyResolved: Map<string, string>): Set<string> {\n\t\tif (alreadyResolved.size === 0) {\n\t\t\treturn variables;\n\t\t}\n\t\tconst unresolved = new Set<string>();\n\t\tfor (const variable of variables) {\n\t\t\tif (!alreadyResolved.has(variable.substring(2, variable.length - 1))) {\n\t\t\t\tunresolved.add(variable);\n\t\t\t}\n\t\t}\n\t\treturn unresolved;\n\t}\n\n\tprivate _mergeMaps(mergeInto: Map<string, string>, mergeFrom: Map<string, string>) {\n\t\tfor (const entry of mergeFrom) {\n\t\t\tif (!mergeInto.has(entry[0])) {\n\t\t\t\tmergeInto.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _acquireInput(taskSystemInfo: ITaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, variables: Set<string>, alreadyResolved: Map<string, string>): Promise<IResolvedVariables | undefined> {\n\t\tconst resolved = await this._resolveVariablesFromSet(taskSystemInfo, workspaceFolder, task, variables, alreadyResolved);\n\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.AcquiredInput, task));\n\t\treturn resolved;\n\t}\n\n\tprivate _resolveVariablesFromSet(taskSystemInfo: ITaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, variables: Set<string>, alreadyResolved: Map<string, string>): Promise<IResolvedVariables | undefined> {\n\t\tconst isProcess = task.command && task.command.runtime === RuntimeType.Process;\n\t\tconst options = task.command && task.command.options ? task.command.options : undefined;\n\t\tconst cwd = options ? options.cwd : undefined;\n\t\tlet envPath: string | undefined = undefined;\n\t\tif (options && options.env) {\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tif (key.toLowerCase() === 'path') {\n\t\t\t\t\tif (Types.isString(options.env[key])) {\n\t\t\t\t\t\tenvPath = options.env[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst unresolved = this._findUnresolvedVariables(variables, alreadyResolved);\n\t\tlet resolvedVariables: Promise<IResolvedVariables | undefined>;\n\t\tif (taskSystemInfo && workspaceFolder) {\n\t\t\tconst resolveSet: IResolveSet = {\n\t\t\t\tvariables: unresolved\n\t\t\t};\n\n\t\t\tif (taskSystemInfo.platform === Platform.Platform.Windows && isProcess) {\n\t\t\t\tresolveSet.process = { name: CommandString.value(task.command.name!) };\n\t\t\t\tif (cwd) {\n\t\t\t\t\tresolveSet.process.cwd = cwd;\n\t\t\t\t}\n\t\t\t\tif (envPath) {\n\t\t\t\t\tresolveSet.process.path = envPath;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolvedVariables = taskSystemInfo.resolveVariables(workspaceFolder, resolveSet, TaskSourceKind.toConfigurationTarget(task._source.kind)).then(async (resolved) => {\n\t\t\t\tif (!resolved) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tthis._mergeMaps(alreadyResolved, resolved.variables);\n\t\t\t\tresolved.variables = new Map(alreadyResolved);\n\t\t\t\tif (isProcess) {\n\t\t\t\t\tlet process = CommandString.value(task.command.name!);\n\t\t\t\t\tif (taskSystemInfo.platform === Platform.Platform.Windows) {\n\t\t\t\t\t\tprocess = await this._resolveAndFindExecutable(taskSystemInfo, workspaceFolder, task, cwd, envPath);\n\t\t\t\t\t}\n\t\t\t\t\tresolved.variables.set(TerminalTaskSystem.ProcessVarName, process);\n\t\t\t\t}\n\t\t\t\treturn resolved;\n\t\t\t});\n\t\t\treturn resolvedVariables;\n\t\t} else {\n\t\t\tconst variablesArray = new Array<string>();\n\t\t\tunresolved.forEach(variable => variablesArray.push(variable));\n\n\t\t\treturn new Promise<IResolvedVariables | undefined>((resolve, reject) => {\n\t\t\t\tthis._configurationResolverService.resolveWithInteraction(workspaceFolder, variablesArray, 'tasks', undefined, TaskSourceKind.toConfigurationTarget(task._source.kind)).then(async (resolvedVariablesMap: Map<string, string> | undefined) => {\n\t\t\t\t\tif (resolvedVariablesMap) {\n\t\t\t\t\t\tthis._mergeMaps(alreadyResolved, resolvedVariablesMap);\n\t\t\t\t\t\tresolvedVariablesMap = new Map(alreadyResolved);\n\t\t\t\t\t\tif (isProcess) {\n\t\t\t\t\t\t\tlet processVarValue: string;\n\t\t\t\t\t\t\tif (Platform.isWindows) {\n\t\t\t\t\t\t\t\tprocessVarValue = await this._resolveAndFindExecutable(taskSystemInfo, workspaceFolder, task, cwd, envPath);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprocessVarValue = await this._configurationResolverService.resolveAsync(workspaceFolder, CommandString.value(task.command.name!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolvedVariablesMap.set(TerminalTaskSystem.ProcessVarName, processVarValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst resolvedVariablesResult: IResolvedVariables = {\n\t\t\t\t\t\t\tvariables: resolvedVariablesMap,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolve(resolvedVariablesResult);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t}, reason => {\n\t\t\t\t\treject(reason);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _executeCommand(task: CustomTask | ContributedTask, trigger: string, alreadyResolved: Map<string, string>): Promise<ITaskSummary> {\n\t\tconst taskWorkspaceFolder = task.getWorkspaceFolder();\n\t\tlet workspaceFolder: IWorkspaceFolder | undefined;\n\t\tif (taskWorkspaceFolder) {\n\t\t\tworkspaceFolder = this._currentTask.workspaceFolder = taskWorkspaceFolder;\n\t\t} else {\n\t\t\tconst folders = this._contextService.getWorkspace().folders;\n\t\t\tworkspaceFolder = folders.length > 0 ? folders[0] : undefined;\n\t\t}\n\t\tconst systemInfo: ITaskSystemInfo | undefined = this._currentTask.systemInfo = this._taskSystemInfoResolver(workspaceFolder);\n\n\t\tconst variables = new Set<string>();\n\t\tthis._collectTaskVariables(variables, task);\n\t\tconst resolvedVariables = this._acquireInput(systemInfo, workspaceFolder, task, variables, alreadyResolved);\n\n\t\treturn resolvedVariables.then((resolvedVariables) => {\n\t\t\tif (resolvedVariables && !this._isTaskEmpty(task)) {\n\t\t\t\tthis._currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\treturn this._executeInTerminal(task, trigger, new VariableResolver(workspaceFolder, systemInfo, resolvedVariables.variables, this._configurationResolverService), workspaceFolder);\n\t\t\t} else {\n\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task));\n\t\t\t\treturn Promise.resolve({ exitCode: 0 });\n\t\t\t}\n\t\t}, reason => {\n\t\t\treturn Promise.reject(reason);\n\t\t});\n\t}\n\n\tprivate _isTaskEmpty(task: CustomTask | ContributedTask): boolean {\n\t\tconst isCustomExecution = (task.command.runtime === RuntimeType.CustomExecution);\n\t\treturn !((task.command !== undefined) && task.command.runtime && (isCustomExecution || (task.command.name !== undefined)));\n\t}\n\n\tprivate _reexecuteCommand(task: CustomTask | ContributedTask, trigger: string, alreadyResolved: Map<string, string>): Promise<ITaskSummary> {\n\t\tconst lastTask = this._lastTask;\n\t\tif (!lastTask) {\n\t\t\treturn Promise.reject(new Error('No task previously run'));\n\t\t}\n\t\tconst workspaceFolder = this._currentTask.workspaceFolder = lastTask.workspaceFolder;\n\t\tconst variables = new Set<string>();\n\t\tthis._collectTaskVariables(variables, task);\n\n\t\t// Check that the task hasn't changed to include new variables\n\t\tlet hasAllVariables = true;\n\t\tvariables.forEach(value => {\n\t\t\tif (value.substring(2, value.length - 1) in lastTask.getVerifiedTask().resolvedVariables) {\n\t\t\t\thasAllVariables = false;\n\t\t\t}\n\t\t});\n\n\t\tif (!hasAllVariables) {\n\t\t\treturn this._acquireInput(lastTask.getVerifiedTask().systemInfo, lastTask.getVerifiedTask().workspaceFolder, task, variables, alreadyResolved).then((resolvedVariables) => {\n\t\t\t\tif (!resolvedVariables) {\n\t\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task));\n\t\t\t\t\treturn { exitCode: 0 };\n\t\t\t\t}\n\t\t\t\tthis._currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\treturn this._executeInTerminal(task, trigger, new VariableResolver(lastTask.getVerifiedTask().workspaceFolder, lastTask.getVerifiedTask().systemInfo, resolvedVariables.variables, this._configurationResolverService), workspaceFolder);\n\t\t\t}, reason => {\n\t\t\t\treturn Promise.reject(reason);\n\t\t\t});\n\t\t} else {\n\t\t\tthis._currentTask.resolvedVariables = lastTask.getVerifiedTask().resolvedVariables;\n\t\t\treturn this._executeInTerminal(task, trigger, new VariableResolver(lastTask.getVerifiedTask().workspaceFolder, lastTask.getVerifiedTask().systemInfo, lastTask.getVerifiedTask().resolvedVariables.variables, this._configurationResolverService), workspaceFolder);\n\t\t}\n\t}\n\n\tprivate async _executeInTerminal(task: CustomTask | ContributedTask, trigger: string, resolver: VariableResolver, workspaceFolder: IWorkspaceFolder | undefined): Promise<ITaskSummary> {\n\t\tlet terminal: ITerminalInstance | undefined = undefined;\n\t\tlet error: TaskError | undefined = undefined;\n\t\tlet promise: Promise<ITaskSummary> | undefined = undefined;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconst problemMatchers = await this._resolveMatchers(resolver, task.configurationProperties.problemMatchers);\n\t\t\tconst watchingProblemMatcher = new WatchingProblemCollector(problemMatchers, this._markerService, this._modelService, this._fileService);\n\t\t\tif ((problemMatchers.length > 0) && !watchingProblemMatcher.isWatching()) {\n\t\t\t\tthis._appendOutput(nls.localize('TerminalTaskSystem.nonWatchingMatcher', 'Task {0} is a background task but uses a problem matcher without a background pattern', task._label));\n\t\t\t\tthis._showOutput();\n\t\t\t}\n\t\t\tconst toDispose = new DisposableStore();\n\t\t\tlet eventCounter: number = 0;\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\ttoDispose.add(watchingProblemMatcher.onDidStateChange((event) => {\n\t\t\t\tif (event.kind === ProblemCollectorEventKind.BackgroundProcessingBegins) {\n\t\t\t\t\teventCounter++;\n\t\t\t\t\tthis._busyTasks[mapKey] = task;\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Active, task, terminal?.instanceId));\n\t\t\t\t} else if (event.kind === ProblemCollectorEventKind.BackgroundProcessingEnds) {\n\t\t\t\t\teventCounter--;\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Inactive, task, terminal?.instanceId));\n\t\t\t\t\tif (eventCounter === 0) {\n\t\t\t\t\t\tif ((watchingProblemMatcher.numberOfMatches > 0) && watchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t\t(watchingProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error)) {\n\t\t\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\t\t\tconst revealProblems = task.command.presentation!.revealProblems;\n\t\t\t\t\t\t\tif (revealProblems === RevealProblemKind.OnProblem) {\n\t\t\t\t\t\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID, true);\n\t\t\t\t\t\t\t} else if (reveal === RevealKind.Silent) {\n\t\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t\twatchingProblemMatcher.aboutToStart();\n\t\t\tlet delayer: Async.Delayer<any> | undefined = undefined;\n\t\t\t[terminal, error] = await this._createTerminal(task, resolver, workspaceFolder);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(new Error(`Failed to create terminal for task ${task._label}`));\n\t\t\t}\n\t\t\tthis._terminalStatusManager.addTerminal(task, terminal, watchingProblemMatcher);\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(() => {\n\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal!.instanceId, terminal!.processId!));\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t}\n\t\t\t}, (_error) => {\n\t\t\t\tthis._logService.error('Task terminal process never got ready');\n\t\t\t});\n\t\t\tthis._fireTaskEvent(TaskEvent.start(task, terminal.instanceId, resolver.values));\n\t\t\tlet onData: IDisposable | undefined;\n\t\t\tif (problemMatchers.length) {\n\t\t\t\t// prevent https://github.com/microsoft/vscode/issues/174511 from happening\n\t\t\t\tonData = terminal.onLineData((line) => {\n\t\t\t\t\twatchingProblemMatcher.processLine(line);\n\t\t\t\t\tif (!delayer) {\n\t\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t\t}\n\t\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\t\tdelayer = undefined;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((terminalLaunchResult) => {\n\t\t\t\t\tconst exitCode = typeof terminalLaunchResult === 'number' ? terminalLaunchResult : terminalLaunchResult?.code;\n\t\t\t\t\tonData?.dispose();\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tconst key = task.getMapKey();\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._removeFromActiveTasks(task);\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\t\t\t\tif (terminalLaunchResult !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis._sameTaskTerminals[key] = terminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis._idleTaskTerminals.set(key, terminal!.instanceId.toString(), Touch.AsOld);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\tif ((reveal === RevealKind.Silent) && ((exitCode !== 0) || (watchingProblemMatcher.numberOfMatches > 0) && watchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t(watchingProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twatchingProblemMatcher.done();\n\t\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal!.instanceId, terminal!.processId!));\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processEnded(task, terminal!.instanceId, exitCode));\n\n\t\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Inactive, task, terminal!.instanceId));\n\t\t\t\t\t}\n\t\t\t\t\teventCounter = 0;\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task));\n\t\t\t\t\ttoDispose.dispose();\n\t\t\t\t\tresolve({ exitCode: exitCode ?? undefined });\n\t\t\t\t});\n\t\t\t});\n\t\t\tif (trigger === Triggers.reconnect && !!terminal.xterm) {\n\t\t\t\tconst bufferLines = [];\n\t\t\t\tconst bufferReverseIterator = terminal.xterm.getBufferReverseIterator();\n\t\t\t\tconst startRegex = new RegExp(watchingProblemMatcher.beginPatterns.map(pattern => pattern.source).join('|'));\n\t\t\t\tfor (const nextLine of bufferReverseIterator) {\n\t\t\t\t\tbufferLines.push(nextLine);\n\t\t\t\t\tif (startRegex.test(nextLine)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet delayer: Async.Delayer<any> | undefined = undefined;\n\t\t\t\tfor (let i = bufferLines.length - 1; i >= 0; i--) {\n\t\t\t\t\twatchingProblemMatcher.processLine(bufferLines[i]);\n\t\t\t\t\tif (!delayer) {\n\t\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t\t}\n\t\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\t\tdelayer = undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t[terminal, error] = await this._createTerminal(task, resolver, workspaceFolder);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(new Error(`Failed to create terminal for task ${task._label}`));\n\t\t\t}\n\n\t\t\tthis._fireTaskEvent(TaskEvent.start(task, terminal.instanceId, resolver.values));\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\tthis._busyTasks[mapKey] = task;\n\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Active, task, terminal.instanceId));\n\n\t\t\tconst problemMatchers = await this._resolveMatchers(resolver, task.configurationProperties.problemMatchers);\n\t\t\tconst startStopProblemMatcher = new StartStopProblemCollector(problemMatchers, this._markerService, this._modelService, ProblemHandlingStrategy.Clean, this._fileService);\n\t\t\tthis._terminalStatusManager.addTerminal(task, terminal, startStopProblemMatcher);\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(() => {\n\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal!.instanceId, terminal!.processId!));\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t}\n\t\t\t}, (_error) => {\n\t\t\t\t// The process never got ready. Need to think how to handle this.\n\t\t\t});\n\n\t\t\tconst onData = terminal.onLineData((line) => {\n\t\t\t\tstartStopProblemMatcher.processLine(line);\n\t\t\t});\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((terminalLaunchResult) => {\n\t\t\t\t\tconst exitCode = typeof terminalLaunchResult === 'number' ? terminalLaunchResult : terminalLaunchResult?.code;\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tconst key = task.getMapKey();\n\t\t\t\t\tthis._removeFromActiveTasks(task);\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\t\t\t\tif (terminalLaunchResult !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis._sameTaskTerminals[key] = terminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis._idleTaskTerminals.set(key, terminal!.instanceId.toString(), Touch.AsOld);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\tconst revealProblems = task.command.presentation!.revealProblems;\n\t\t\t\t\tconst revealProblemPanel = terminal && (revealProblems === RevealProblemKind.OnProblem) && (startStopProblemMatcher.numberOfMatches > 0);\n\t\t\t\t\tif (revealProblemPanel) {\n\t\t\t\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID);\n\t\t\t\t\t} else if (terminal && (reveal === RevealKind.Silent) && ((exitCode !== 0) || (startStopProblemMatcher.numberOfMatches > 0) && startStopProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t(startStopProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal);\n\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Hack to work around #92868 until terminal is fixed.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tonData.dispose();\n\t\t\t\t\t\tstartStopProblemMatcher.done();\n\t\t\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\t\t}, 100);\n\t\t\t\t\tif (!processStartedSignaled && terminal) {\n\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal.instanceId, terminal.processId!));\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processEnded(task, terminal?.instanceId, exitCode ?? undefined));\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Inactive, task, terminal?.instanceId));\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task, terminal?.instanceId));\n\t\t\t\t\tresolve({ exitCode: exitCode ?? undefined });\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst showProblemPanel = task.command.presentation && (task.command.presentation.revealProblems === RevealProblemKind.Always);\n\t\tif (showProblemPanel) {\n\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID);\n\t\t} else if (task.command.presentation && (task.command.presentation.focus || task.command.presentation.reveal === RevealKind.Always)) {\n\t\t\tthis._terminalService.setActiveInstance(terminal);\n\t\t\tawait this._terminalService.revealTerminal(terminal);\n\t\t\tif (task.command.presentation.focus) {\n\t\t\t\tthis._terminalService.focusInstance(terminal);\n\t\t\t}\n\t\t}\n\t\tthis._activeTasks[task.getMapKey()].terminal = terminal;\n\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\treturn promise;\n\t}\n\n\tprivate _createTerminalName(task: CustomTask | ContributedTask): string {\n\t\tconst needsFolderQualification = this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t\treturn needsFolderQualification ? task.getQualifiedLabel() : (task.configurationProperties.name || '');\n\t}\n\n\tprivate async _createShellLaunchConfig(task: CustomTask | ContributedTask, workspaceFolder: IWorkspaceFolder | undefined, variableResolver: VariableResolver, platform: Platform.Platform, options: CommandOptions, command: CommandString, args: CommandString[], waitOnExit: WaitOnExitValue): Promise<IShellLaunchConfig | undefined> {\n\t\tlet shellLaunchConfig: IShellLaunchConfig;\n\t\tconst isShellCommand = task.command.runtime === RuntimeType.Shell;\n\t\tconst needsFolderQualification = this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t\tconst terminalName = this._createTerminalName(task);\n\t\tconst type = ReconnectionType;\n\t\tconst originalCommand = task.command.name;\n\t\tlet cwd: string | URI | undefined;\n\t\tif (options.cwd) {\n\t\t\tcwd = options.cwd;\n\t\t\tif (!path.isAbsolute(cwd)) {\n\t\t\t\tif (workspaceFolder && (workspaceFolder.uri.scheme === Schemas.file)) {\n\t\t\t\t\tcwd = path.join(workspaceFolder.uri.fsPath, cwd);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This must be normalized to the OS\n\t\t\tcwd = isUNC(cwd) ? cwd : resources.toLocalResource(URI.from({ scheme: Schemas.file, path: cwd }), this._environmentService.remoteAuthority, this._pathService.defaultUriScheme);\n\t\t}\n\t\tif (isShellCommand) {\n\t\t\tlet os: Platform.OperatingSystem;\n\t\t\tswitch (platform) {\n\t\t\t\tcase Platform.Platform.Windows: os = Platform.OperatingSystem.Windows; break;\n\t\t\t\tcase Platform.Platform.Mac: os = Platform.OperatingSystem.Macintosh; break;\n\t\t\t\tcase Platform.Platform.Linux:\n\t\t\t\tdefault: os = Platform.OperatingSystem.Linux; break;\n\t\t\t}\n\t\t\tconst defaultProfile = await this._terminalProfileResolverService.getDefaultProfile({\n\t\t\t\tallowAutomationShell: true,\n\t\t\t\tos,\n\t\t\t\tremoteAuthority: this._environmentService.remoteAuthority\n\t\t\t});\n\t\t\tlet icon: URI | ThemeIcon | { light: URI; dark: URI } | undefined;\n\t\t\tif (task.configurationProperties.icon?.id) {\n\t\t\t\ticon = ThemeIcon.fromId(task.configurationProperties.icon.id);\n\t\t\t} else {\n\t\t\t\tconst taskGroupKind = task.configurationProperties.group ? GroupKind.to(task.configurationProperties.group) : undefined;\n\t\t\t\tconst kindId = typeof taskGroupKind === 'string' ? taskGroupKind : taskGroupKind?.kind;\n\t\t\t\ticon = kindId === 'test' ? ThemeIcon.fromId(Codicon.beaker.id) : defaultProfile.icon;\n\t\t\t}\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\ttype,\n\t\t\t\texecutable: defaultProfile.path,\n\t\t\t\targs: defaultProfile.args,\n\t\t\t\tenv: { ...defaultProfile.env },\n\t\t\t\ticon,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t\twaitOnExit\n\t\t\t};\n\t\t\tlet shellSpecified: boolean = false;\n\t\t\tconst shellOptions: IShellConfiguration | undefined = task.command.options && task.command.options.shell;\n\t\t\tif (shellOptions) {\n\t\t\t\tif (shellOptions.executable) {\n\t\t\t\t\t// Clear out the args so that we don't end up with mismatched args.\n\t\t\t\t\tif (shellOptions.executable !== shellLaunchConfig.executable) {\n\t\t\t\t\t\tshellLaunchConfig.args = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tshellLaunchConfig.executable = await this._resolveVariable(variableResolver, shellOptions.executable);\n\t\t\t\t\tshellSpecified = true;\n\t\t\t\t}\n\t\t\t\tif (shellOptions.args) {\n\t\t\t\t\tshellLaunchConfig.args = await this._resolveVariables(variableResolver, shellOptions.args.slice());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shellLaunchConfig.args === undefined) {\n\t\t\t\tshellLaunchConfig.args = [];\n\t\t\t}\n\t\t\tconst shellArgs = Array.isArray(shellLaunchConfig.args) ? <string[]>shellLaunchConfig.args.slice(0) : [shellLaunchConfig.args];\n\t\t\tconst toAdd: string[] = [];\n\t\t\tconst basename = path.posix.basename((await this._pathService.fileURI(shellLaunchConfig.executable!)).path).toLowerCase();\n\t\t\tconst commandLine = this._buildShellCommandLine(platform, basename, shellOptions, command, originalCommand, args);\n\t\t\tlet windowsShellArgs: boolean = false;\n\t\t\tif (platform === Platform.Platform.Windows) {\n\t\t\t\twindowsShellArgs = true;\n\t\t\t\t// If we don't have a cwd, then the terminal uses the home dir.\n\t\t\t\tconst userHome = await this._pathService.userHome();\n\t\t\t\tif (basename === 'cmd.exe' && ((options.cwd && isUNC(options.cwd)) || (!options.cwd && isUNC(userHome.fsPath)))) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif ((basename === 'powershell.exe') || (basename === 'pwsh.exe')) {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-Command');\n\t\t\t\t\t}\n\t\t\t\t} else if ((basename === 'bash.exe') || (basename === 'zsh.exe')) {\n\t\t\t\t\twindowsShellArgs = false;\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-c');\n\t\t\t\t\t}\n\t\t\t\t} else if (basename === 'wsl.exe') {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-e');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('/d', '/c');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t// Under Mac remove -l to not start it as a login shell.\n\t\t\t\t\tif (platform === Platform.Platform.Mac) {\n\t\t\t\t\t\t// Background on -l on osx https://github.com/microsoft/vscode/issues/107563\n\t\t\t\t\t\t// TODO: Handle by pulling the default terminal profile?\n\t\t\t\t\t\t// const osxShellArgs = this._configurationService.inspect(TerminalSettingId.ShellArgsMacOs);\n\t\t\t\t\t\t// if ((osxShellArgs.user === undefined) && (osxShellArgs.userLocal === undefined) && (osxShellArgs.userLocalValue === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.userRemote === undefined) && (osxShellArgs.userRemoteValue === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.userValue === undefined) && (osxShellArgs.workspace === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.workspaceFolder === undefined) && (osxShellArgs.workspaceFolderValue === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.workspaceValue === undefined)) {\n\t\t\t\t\t\t// \tconst index = shellArgs.indexOf('-l');\n\t\t\t\t\t\t// \tif (index !== -1) {\n\t\t\t\t\t\t// \t\tshellArgs.splice(index, 1);\n\t\t\t\t\t\t// \t}\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t\ttoAdd.push('-c');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst combinedShellArgs = this._addAllArgument(toAdd, shellArgs);\n\t\t\tcombinedShellArgs.push(commandLine);\n\t\t\tshellLaunchConfig.args = windowsShellArgs ? combinedShellArgs.join(' ') : combinedShellArgs;\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tconst folder = cwd && typeof cwd === 'object' && 'path' in cwd ? path.basename(cwd.path) : workspaceFolder.name;\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executingInFolder',\n\t\t\t\t\t\tcomment: ['The workspace folder the task is running in', 'The task command line or label']\n\n\t\t\t\t\t}, 'Executing task in folder {0}: {1}', folder, commandLine), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executing.shellIntegration',\n\t\t\t\t\t\tcomment: ['The task command line or label']\n\t\t\t\t\t}, 'Executing task: {0}', commandLine), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.initialText = {\n\t\t\t\t\ttext: this.taskShellIntegrationStartSequence(cwd) + this.taskShellIntegrationOutputSequence,\n\t\t\t\t\ttrailingNewLine: false\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tconst commandExecutable = (task.command.runtime !== RuntimeType.CustomExecution) ? CommandString.value(command) : undefined;\n\t\t\tconst executable = !isShellCommand\n\t\t\t\t? await this._resolveVariable(variableResolver, await this._resolveVariable(variableResolver, '${' + TerminalTaskSystem.ProcessVarName + '}'))\n\t\t\t\t: commandExecutable;\n\n\t\t\t// When we have a process task there is no need to quote arguments. So we go ahead and take the string value.\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\ttype,\n\t\t\t\ticon: task.configurationProperties.icon?.id ? ThemeIcon.fromId(task.configurationProperties.icon.id) : undefined,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t\texecutable: executable,\n\t\t\t\targs: args.map(a => Types.isString(a) ? a : a.value),\n\t\t\t\twaitOnExit\n\t\t\t};\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tconst getArgsToEcho = (args: string | string[] | undefined): string => {\n\t\t\t\t\tif (!args || args.length === 0) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tif (Types.isString(args)) {\n\t\t\t\t\t\treturn args;\n\t\t\t\t\t}\n\t\t\t\t\treturn args.join(' ');\n\t\t\t\t};\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executingInFolder',\n\t\t\t\t\t\tcomment: ['The workspace folder the task is running in', 'The task command line or label']\n\t\t\t\t\t}, 'Executing task in folder {0}: {1}', workspaceFolder.name, `${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)}`), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executing.shell-integration',\n\t\t\t\t\t\tcomment: ['The task command line or label']\n\t\t\t\t\t}, 'Executing task: {0}', `${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)}`), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.initialText = {\n\t\t\t\t\ttext: this.taskShellIntegrationStartSequence(cwd) + this.taskShellIntegrationOutputSequence,\n\t\t\t\t\ttrailingNewLine: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (cwd) {\n\t\t\tshellLaunchConfig.cwd = cwd;\n\t\t}\n\t\tif (options.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = { ...shellLaunchConfig.env, ...options.env };\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = options.env;\n\t\t\t}\n\t\t}\n\t\tshellLaunchConfig.isFeatureTerminal = true;\n\t\tshellLaunchConfig.useShellEnvironment = true;\n\t\treturn shellLaunchConfig;\n\t}\n\n\tprivate _addAllArgument(shellCommandArgs: string[], configuredShellArgs: string[]): string[] {\n\t\tconst combinedShellArgs: string[] = Objects.deepClone(configuredShellArgs);\n\t\tshellCommandArgs.forEach(element => {\n\t\t\tconst shouldAddShellCommandArg = configuredShellArgs.every((arg, index) => {\n\t\t\t\tif ((arg.toLowerCase() === element) && (configuredShellArgs.length > index + 1)) {\n\t\t\t\t\t// We can still add the argument, but only if not all of the following arguments begin with \"-\".\n\t\t\t\t\treturn !configuredShellArgs.slice(index + 1).every(testArg => testArg.startsWith('-'));\n\t\t\t\t} else {\n\t\t\t\t\treturn arg.toLowerCase() !== element;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (shouldAddShellCommandArg) {\n\t\t\t\tcombinedShellArgs.push(element);\n\t\t\t}\n\t\t});\n\t\treturn combinedShellArgs;\n\t}\n\n\tprivate async _reconnectToTerminal(task: Task): Promise<ITerminalInstance | undefined> {\n\t\tif (!this._reconnectedTerminals) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this._reconnectedTerminals.length; i++) {\n\t\t\tconst terminal = this._reconnectedTerminals[i];\n\t\t\tif (getReconnectionData(terminal)?.lastTask === task.getCommonTaskId()) {\n\t\t\t\tthis._reconnectedTerminals.splice(i, 1);\n\t\t\t\treturn terminal;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _doCreateTerminal(task: Task, group: string | undefined, launchConfigs: IShellLaunchConfig): Promise<ITerminalInstance> {\n\t\tconst reconnectedTerminal = await this._reconnectToTerminal(task);\n\t\tconst onDisposed = (terminal: ITerminalInstance) => this._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\tif (reconnectedTerminal) {\n\t\t\tif ('command' in task && task.command.presentation) {\n\t\t\t\treconnectedTerminal.waitOnExit = getWaitOnExitValue(task.command.presentation, task.configurationProperties);\n\t\t\t}\n\t\t\treconnectedTerminal.onDisposed(onDisposed);\n\t\t\tthis._logService.trace('reconnected to task and terminal', task._id);\n\t\t\treturn reconnectedTerminal;\n\t\t}\n\t\tif (group) {\n\t\t\t// Try to find an existing terminal to split.\n\t\t\t// Even if an existing terminal is found, the split can fail if the terminal width is too small.\n\t\t\tfor (const terminal of Object.values(this._terminals)) {\n\t\t\t\tif (terminal.group === group) {\n\t\t\t\t\tthis._logService.trace(`Found terminal to split for group ${group}`);\n\t\t\t\t\tconst originalInstance = terminal.terminal;\n\t\t\t\t\tconst result = await this._terminalService.createTerminal({ location: { parentTerminal: originalInstance }, config: launchConfigs });\n\t\t\t\t\tresult.onDisposed(onDisposed);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._logService.trace(`No terminal found to split for group ${group}`);\n\t\t}\n\t\t// Either no group is used, no terminal with the group exists or splitting an existing terminal failed.\n\t\tconst createdTerminal = await this._terminalService.createTerminal({ config: launchConfigs });\n\t\tcreatedTerminal.onDisposed(onDisposed);\n\t\treturn createdTerminal;\n\t}\n\n\tprivate _reconnectToTerminals(): void {\n\t\tif (this._hasReconnected) {\n\t\t\tthis._logService.trace(`Already reconnected, to ${this._reconnectedTerminals?.length} terminals so returning`);\n\t\t\treturn;\n\t\t}\n\t\tthis._reconnectedTerminals = this._terminalService.getReconnectedTerminals(ReconnectionType)?.filter(t => !t.isDisposed && getReconnectionData(t)) || [];\n\t\tthis._logService.trace(`Attempting reconnection of ${this._reconnectedTerminals?.length} terminals`);\n\t\tif (!this._reconnectedTerminals?.length) {\n\t\t\tthis._logService.trace(`No terminals to reconnect to so returning`);\n\t\t} else {\n\t\t\tfor (const terminal of this._reconnectedTerminals) {\n\t\t\t\tconst data = getReconnectionData(terminal) as IReconnectionTaskData | undefined;\n\t\t\t\tif (data) {\n\t\t\t\t\tconst terminalData = { lastTask: data.lastTask, group: data.group, terminal };\n\t\t\t\t\tthis._terminals[terminal.instanceId] = terminalData;\n\t\t\t\t\tthis._logService.trace('Reconnecting to task terminal', terminalData.lastTask, terminal.instanceId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._hasReconnected = true;\n\t}\n\n\tprivate _deleteTaskAndTerminal(terminal: ITerminalInstance, terminalData: ITerminalData): void {\n\t\tdelete this._terminals[terminal.instanceId];\n\t\tdelete this._sameTaskTerminals[terminalData.lastTask];\n\t\tthis._idleTaskTerminals.delete(terminalData.lastTask);\n\t\t// Delete the task now as a work around for cases when the onExit isn't fired.\n\t\t// This can happen if the terminal wasn't shutdown with an \"immediate\" flag and is expected.\n\t\t// For correct terminal re-use, the task needs to be deleted immediately.\n\t\t// Note that this shouldn't be a problem anymore since user initiated terminal kills are now immediate.\n\t\tconst mapKey = terminalData.lastTask;\n\t\tthis._removeFromActiveTasks(mapKey);\n\t\tif (this._busyTasks[mapKey]) {\n\t\t\tdelete this._busyTasks[mapKey];\n\t\t}\n\t}\n\n\tprivate async _createTerminal(task: CustomTask | ContributedTask, resolver: VariableResolver, workspaceFolder: IWorkspaceFolder | undefined): Promise<[ITerminalInstance | undefined, TaskError | undefined]> {\n\t\tconst platform = resolver.taskSystemInfo ? resolver.taskSystemInfo.platform : Platform.platform;\n\t\tconst options = await this._resolveOptions(resolver, task.command.options);\n\t\tconst presentationOptions = task.command.presentation;\n\n\t\tif (!presentationOptions) {\n\t\t\tthrow new Error('Task presentation options should not be undefined here.');\n\t\t}\n\t\tconst waitOnExit = getWaitOnExitValue(presentationOptions, task.configurationProperties);\n\n\t\tlet command: CommandString | undefined;\n\t\tlet args: CommandString[] | undefined;\n\t\tlet launchConfigs: IShellLaunchConfig | undefined;\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution) {\n\t\t\tthis._currentTask.shellLaunchConfig = launchConfigs = {\n\t\t\t\tcustomPtyImplementation: (id, cols, rows) => new TerminalProcessExtHostProxy(id, cols, rows, this._terminalService),\n\t\t\t\twaitOnExit,\n\t\t\t\tname: this._createTerminalName(task),\n\t\t\t\tinitialText: task.command.presentation && task.command.presentation.echo ? formatMessageForTerminal(nls.localize({\n\t\t\t\t\tkey: 'task.executing',\n\t\t\t\t\tcomment: ['The task command line or label']\n\t\t\t\t}, 'Executing task: {0}', task._label), { excludeLeadingNewLine: true }) : undefined,\n\t\t\t\tisFeatureTerminal: true,\n\t\t\t\ticon: task.configurationProperties.icon?.id ? ThemeIcon.fromId(task.configurationProperties.icon.id) : undefined,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined\n\t\t\t};\n\t\t} else {\n\t\t\tconst resolvedResult: { command: CommandString; args: CommandString[] } = await this._resolveCommandAndArgs(resolver, task.command);\n\t\t\tcommand = resolvedResult.command;\n\t\t\targs = resolvedResult.args;\n\n\t\t\tthis._currentTask.shellLaunchConfig = launchConfigs = await this._createShellLaunchConfig(task, workspaceFolder, resolver, platform, options, command, args, waitOnExit);\n\t\t\tif (launchConfigs === undefined) {\n\t\t\t\treturn [undefined, new TaskError(Severity.Error, nls.localize('TerminalTaskSystem', 'Can\\'t execute a shell command on an UNC drive using cmd.exe.'), TaskErrors.UnknownError)];\n\t\t\t}\n\t\t}\n\t\tconst prefersSameTerminal = presentationOptions.panel === PanelKind.Dedicated;\n\t\tconst allowsSharedTerminal = presentationOptions.panel === PanelKind.Shared;\n\t\tconst group = presentationOptions.group;\n\n\t\tconst taskKey = task.getMapKey();\n\t\tlet terminalToReuse: ITerminalData | undefined;\n\t\tif (prefersSameTerminal) {\n\t\t\tconst terminalId = this._sameTaskTerminals[taskKey];\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this._terminals[terminalId];\n\t\t\t\tdelete this._sameTaskTerminals[taskKey];\n\t\t\t}\n\t\t} else if (allowsSharedTerminal) {\n\t\t\t// Always allow to reuse the terminal previously used by the same task.\n\t\t\tlet terminalId = this._idleTaskTerminals.remove(taskKey);\n\t\t\tif (!terminalId) {\n\t\t\t\t// There is no idle terminal which was used by the same task.\n\t\t\t\t// Search for any idle terminal used previously by a task of the same group\n\t\t\t\t// (or, if the task has no group, a terminal used by a task without group).\n\t\t\t\tfor (const taskId of this._idleTaskTerminals.keys()) {\n\t\t\t\t\tconst idleTerminalId = this._idleTaskTerminals.get(taskId)!;\n\t\t\t\t\tif (idleTerminalId && this._terminals[idleTerminalId] && this._terminals[idleTerminalId].group === group) {\n\t\t\t\t\t\tterminalId = this._idleTaskTerminals.remove(taskId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this._terminals[terminalId];\n\t\t\t}\n\t\t}\n\t\tif (terminalToReuse) {\n\t\t\tif (!launchConfigs) {\n\t\t\t\tthrow new Error('Task shell launch configuration should not be undefined here.');\n\t\t\t}\n\n\t\t\tterminalToReuse.terminal.scrollToBottom();\n\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\tlaunchConfigs.reconnectionProperties = { ownerId: ReconnectionType, data: { lastTask: task.getCommonTaskId(), group, label: task._label, id: task._id } };\n\t\t\t}\n\t\t\tawait terminalToReuse.terminal.reuseTerminal(launchConfigs);\n\n\t\t\tif (task.command.presentation && task.command.presentation.clear) {\n\t\t\t\tterminalToReuse.terminal.clearBuffer();\n\t\t\t}\n\t\t\tthis._terminals[terminalToReuse.terminal.instanceId.toString()].lastTask = taskKey;\n\t\t\treturn [terminalToReuse.terminal, undefined];\n\t\t}\n\n\t\tthis._terminalCreationQueue = this._terminalCreationQueue.then(() => this._doCreateTerminal(task, group, launchConfigs));\n\t\tconst terminal: ITerminalInstance = (await this._terminalCreationQueue)!;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tterminal.shellLaunchConfig.reconnectionProperties = { ownerId: ReconnectionType, data: { lastTask: task.getCommonTaskId(), group, label: task._label, id: task._id } };\n\t\t}\n\t\tconst terminalKey = terminal.instanceId.toString();\n\t\tconst terminalData = { terminal: terminal, lastTask: taskKey, group };\n\t\tterminal.onDisposed(() => this._deleteTaskAndTerminal(terminal, terminalData));\n\t\tthis._terminals[terminalKey] = terminalData;\n\t\treturn [terminal, undefined];\n\t}\n\n\tprivate _buildShellCommandLine(platform: Platform.Platform, shellExecutable: string, shellOptions: IShellConfiguration | undefined, command: CommandString, originalCommand: CommandString | undefined, args: CommandString[]): string {\n\t\tconst basename = path.parse(shellExecutable).name.toLowerCase();\n\t\tconst shellQuoteOptions = this._getQuotingOptions(basename, shellOptions, platform);\n\n\t\tfunction needsQuotes(value: string): boolean {\n\t\t\tif (value.length >= 2) {\n\t\t\t\tconst first = value[0] === shellQuoteOptions.strong ? shellQuoteOptions.strong : value[0] === shellQuoteOptions.weak ? shellQuoteOptions.weak : undefined;\n\t\t\t\tif (first === value[value.length - 1]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet quote: string | undefined;\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\t// We found the end quote.\n\t\t\t\tconst ch = value[i];\n\t\t\t\tif (ch === quote) {\n\t\t\t\t\tquote = undefined;\n\t\t\t\t} else if (quote !== undefined) {\n\t\t\t\t\t// skip the character. We are quoted.\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (ch === shellQuoteOptions.escape) {\n\t\t\t\t\t// Skip the next character\n\t\t\t\t\ti++;\n\t\t\t\t} else if (ch === shellQuoteOptions.strong || ch === shellQuoteOptions.weak) {\n\t\t\t\t\tquote = ch;\n\t\t\t\t} else if (ch === ' ') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction quote(value: string, kind: ShellQuoting): [string, boolean] {\n\t\t\tif (kind === ShellQuoting.Strong && shellQuoteOptions.strong) {\n\t\t\t\treturn [shellQuoteOptions.strong + value + shellQuoteOptions.strong, true];\n\t\t\t} else if (kind === ShellQuoting.Weak && shellQuoteOptions.weak) {\n\t\t\t\treturn [shellQuoteOptions.weak + value + shellQuoteOptions.weak, true];\n\t\t\t} else if (kind === ShellQuoting.Escape && shellQuoteOptions.escape) {\n\t\t\t\tif (Types.isString(shellQuoteOptions.escape)) {\n\t\t\t\t\treturn [value.replace(/ /g, shellQuoteOptions.escape + ' '), true];\n\t\t\t\t} else {\n\t\t\t\t\tconst buffer: string[] = [];\n\t\t\t\t\tfor (const ch of shellQuoteOptions.escape.charsToEscape) {\n\t\t\t\t\t\tbuffer.push(`\\\\${ch}`);\n\t\t\t\t\t}\n\t\t\t\t\tconst regexp: RegExp = new RegExp('[' + buffer.join(',') + ']', 'g');\n\t\t\t\t\tconst escapeChar = shellQuoteOptions.escape.escapeChar;\n\t\t\t\t\treturn [value.replace(regexp, (match) => escapeChar + match), true];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [value, false];\n\t\t}\n\n\t\tfunction quoteIfNecessary(value: CommandString): [string, boolean] {\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (needsQuotes(value)) {\n\t\t\t\t\treturn quote(value, ShellQuoting.Strong);\n\t\t\t\t} else {\n\t\t\t\t\treturn [value, false];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn quote(value.value, value.quoting);\n\t\t\t}\n\t\t}\n\n\t\t// If we have no args and the command is a string then use the command to stay backwards compatible with the old command line\n\t\t// model. To allow variable resolving with spaces we do continue if the resolved value is different than the original one\n\t\t// and the resolved one needs quoting.\n\t\tif ((!args || args.length === 0) && Types.isString(command) && (command === originalCommand as string || needsQuotes(originalCommand as string))) {\n\t\t\treturn command;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tlet commandQuoted = false;\n\t\tlet argQuoted = false;\n\t\tlet value: string;\n\t\tlet quoted: boolean;\n\t\t[value, quoted] = quoteIfNecessary(command);\n\t\tresult.push(value);\n\t\tcommandQuoted = quoted;\n\t\tfor (const arg of args) {\n\t\t\t[value, quoted] = quoteIfNecessary(arg);\n\t\t\tresult.push(value);\n\t\t\targQuoted = argQuoted || quoted;\n\t\t}\n\n\t\tlet commandLine = result.join(' ');\n\t\t// There are special rules quoted command line in cmd.exe\n\t\tif (platform === Platform.Platform.Windows) {\n\t\t\tif (basename === 'cmd' && commandQuoted && argQuoted) {\n\t\t\t\tcommandLine = '\"' + commandLine + '\"';\n\t\t\t} else if ((basename === 'powershell' || basename === 'pwsh') && commandQuoted) {\n\t\t\t\tcommandLine = '& ' + commandLine;\n\t\t\t}\n\t\t}\n\n\t\treturn commandLine;\n\t}\n\n\tprivate _getQuotingOptions(shellBasename: string, shellOptions: IShellConfiguration | undefined, platform: Platform.Platform): IShellQuotingOptions {\n\t\tif (shellOptions && shellOptions.quoting) {\n\t\t\treturn shellOptions.quoting;\n\t\t}\n\t\treturn TerminalTaskSystem._shellQuotes[shellBasename] || TerminalTaskSystem._osShellQuotes[Platform.PlatformToString(platform)];\n\t}\n\n\tprivate _collectTaskVariables(variables: Set<string>, task: CustomTask | ContributedTask): void {\n\t\tif (task.command && task.command.name) {\n\t\t\tthis._collectCommandVariables(variables, task.command, task);\n\t\t}\n\t\tthis._collectMatcherVariables(variables, task.configurationProperties.problemMatchers);\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution && (CustomTask.is(task) || ContributedTask.is(task))) {\n\t\t\tlet definition: any;\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tdefinition = task._source.config.element;\n\t\t\t} else {\n\t\t\t\tdefinition = Objects.deepClone(task.defines);\n\t\t\t\tdelete definition._key;\n\t\t\t\tdelete definition.type;\n\t\t\t}\n\t\t\tthis._collectDefinitionVariables(variables, definition);\n\t\t}\n\t}\n\n\tprivate _collectDefinitionVariables(variables: Set<string>, definition: any): void {\n\t\tif (Types.isString(definition)) {\n\t\t\tthis._collectVariables(variables, definition);\n\t\t} else if (Array.isArray(definition)) {\n\t\t\tdefinition.forEach((element: any) => this._collectDefinitionVariables(variables, element));\n\t\t} else if (Types.isObject(definition)) {\n\t\t\tfor (const key in definition) {\n\t\t\t\tthis._collectDefinitionVariables(variables, definition[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectCommandVariables(variables: Set<string>, command: ICommandConfiguration, task: CustomTask | ContributedTask): void {\n\t\t// The custom execution should have everything it needs already as it provided\n\t\t// the callback.\n\t\tif (command.runtime === RuntimeType.CustomExecution) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (command.name === undefined) {\n\t\t\tthrow new Error('Command name should never be undefined here.');\n\t\t}\n\t\tthis._collectVariables(variables, command.name);\n\t\tcommand.args?.forEach(arg => this._collectVariables(variables, arg));\n\t\t// Try to get a scope.\n\t\tconst scope = (<IExtensionTaskSource>task._source).scope;\n\t\tif (scope !== TaskScope.Global) {\n\t\t\tvariables.add('${workspaceFolder}');\n\t\t}\n\t\tif (command.options) {\n\t\t\tconst options = command.options;\n\t\t\tif (options.cwd) {\n\t\t\t\tthis._collectVariables(variables, options.cwd);\n\t\t\t}\n\t\t\tconst optionsEnv = options.env;\n\t\t\tif (optionsEnv) {\n\t\t\t\tObject.keys(optionsEnv).forEach((key) => {\n\t\t\t\t\tconst value: any = optionsEnv[key];\n\t\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\t\tthis._collectVariables(variables, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (options.shell) {\n\t\t\t\tif (options.shell.executable) {\n\t\t\t\t\tthis._collectVariables(variables, options.shell.executable);\n\t\t\t\t}\n\t\t\t\toptions.shell.args?.forEach(arg => this._collectVariables(variables, arg));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectMatcherVariables(variables: Set<string>, values: Array<string | ProblemMatcher> | undefined): void {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvalues.forEach((value) => {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (matcher && matcher.filePrefix) {\n\t\t\t\tif (Types.isString(matcher.filePrefix)) {\n\t\t\t\t\tthis._collectVariables(variables, matcher.filePrefix);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const fp of [...asArray(matcher.filePrefix.include || []), ...asArray(matcher.filePrefix.exclude || [])]) {\n\t\t\t\t\t\tthis._collectVariables(variables, fp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _collectVariables(variables: Set<string>, value: string | CommandString): void {\n\t\tconst string: string = Types.isString(value) ? value : value.value;\n\t\tconst r = /\\$\\{(.*?)\\}/g;\n\t\tlet matches: RegExpExecArray | null;\n\t\tdo {\n\t\t\tmatches = r.exec(string);\n\t\t\tif (matches) {\n\t\t\t\tvariables.add(matches[0]);\n\t\t\t}\n\t\t} while (matches);\n\t}\n\n\tprivate async _resolveCommandAndArgs(resolver: VariableResolver, commandConfig: ICommandConfiguration): Promise<{ command: CommandString; args: CommandString[] }> {\n\t\t// First we need to use the command args:\n\t\tlet args: CommandString[] = commandConfig.args ? commandConfig.args.slice() : [];\n\t\targs = await this._resolveVariables(resolver, args);\n\t\tconst command: CommandString = await this._resolveVariable(resolver, commandConfig.name);\n\t\treturn { command, args };\n\t}\n\n\tprivate async _resolveVariables(resolver: VariableResolver, value: string[]): Promise<string[]>;\n\tprivate async _resolveVariables(resolver: VariableResolver, value: CommandString[]): Promise<CommandString[]>;\n\tprivate async _resolveVariables(resolver: VariableResolver, value: CommandString[]): Promise<CommandString[]> {\n\t\treturn Promise.all(value.map(s => this._resolveVariable(resolver, s)));\n\t}\n\n\tprivate async _resolveMatchers(resolver: VariableResolver, values: Array<string | ProblemMatcher> | undefined): Promise<ProblemMatcher[]> {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: ProblemMatcher[] = [];\n\t\tfor (const value of values) {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (!matcher) {\n\t\t\t\tthis._appendOutput(nls.localize('unknownProblemMatcher', 'Problem matcher {0} can\\'t be resolved. The matcher will be ignored'));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst taskSystemInfo: ITaskSystemInfo | undefined = resolver.taskSystemInfo;\n\t\t\tconst hasFilePrefix = matcher.filePrefix !== undefined;\n\t\t\tconst hasUriProvider = taskSystemInfo !== undefined && taskSystemInfo.uriProvider !== undefined;\n\t\t\tif (!hasFilePrefix && !hasUriProvider) {\n\t\t\t\tresult.push(matcher);\n\t\t\t} else {\n\t\t\t\tconst copy = Objects.deepClone(matcher);\n\t\t\t\tif (hasUriProvider && (taskSystemInfo !== undefined)) {\n\t\t\t\t\tcopy.uriProvider = taskSystemInfo.uriProvider;\n\t\t\t\t}\n\t\t\t\tif (hasFilePrefix) {\n\t\t\t\t\tconst filePrefix = copy.filePrefix;\n\t\t\t\t\tif (Types.isString(filePrefix)) {\n\t\t\t\t\t\tcopy.filePrefix = await this._resolveVariable(resolver, filePrefix);\n\t\t\t\t\t} else if (filePrefix !== undefined) {\n\t\t\t\t\t\tif (filePrefix.include) {\n\t\t\t\t\t\t\tfilePrefix.include = Array.isArray(filePrefix.include)\n\t\t\t\t\t\t\t\t? await Promise.all(filePrefix.include.map(x => this._resolveVariable(resolver, x)))\n\t\t\t\t\t\t\t\t: await this._resolveVariable(resolver, filePrefix.include);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filePrefix.exclude) {\n\t\t\t\t\t\t\tfilePrefix.exclude = Array.isArray(filePrefix.exclude)\n\t\t\t\t\t\t\t\t? await Promise.all(filePrefix.exclude.map(x => this._resolveVariable(resolver, x)))\n\t\t\t\t\t\t\t\t: await this._resolveVariable(resolver, filePrefix.exclude);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _resolveVariable(resolver: VariableResolver, value: string | undefined): Promise<string>;\n\tprivate async _resolveVariable(resolver: VariableResolver, value: CommandString | undefined): Promise<CommandString>;\n\tprivate async _resolveVariable(resolver: VariableResolver, value: CommandString | undefined): Promise<CommandString> {\n\t\t// TODO@Dirk Task.getWorkspaceFolder should return a WorkspaceFolder that is defined in workspace.ts\n\t\tif (Types.isString(value)) {\n\t\t\treturn resolver.resolve(value);\n\t\t} else if (value !== undefined) {\n\t\t\treturn {\n\t\t\t\tvalue: await resolver.resolve(value.value),\n\t\t\t\tquoting: value.quoting\n\t\t\t};\n\t\t} else { // This should never happen\n\t\t\tthrow new Error('Should never try to resolve undefined.');\n\t\t}\n\t}\n\n\tprivate async _resolveOptions(resolver: VariableResolver, options: CommandOptions | undefined): Promise<CommandOptions> {\n\t\tif (options === undefined || options === null) {\n\t\t\tlet cwd: string | undefined;\n\t\t\ttry {\n\t\t\t\tcwd = await this._resolveVariable(resolver, '${workspaceFolder}');\n\t\t\t} catch (e) {\n\t\t\t\t// No workspace\n\t\t\t}\n\t\t\treturn { cwd };\n\t\t}\n\t\tconst result: CommandOptions = Types.isString(options.cwd)\n\t\t\t? { cwd: await this._resolveVariable(resolver, options.cwd) }\n\t\t\t: { cwd: await this._resolveVariable(resolver, '${workspaceFolder}') };\n\t\tif (options.env) {\n\t\t\tresult.env = Object.create(null);\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tconst value: any = options.env[key];\n\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\tresult.env![key] = await this._resolveVariable(resolver, value);\n\t\t\t\t} else {\n\t\t\t\t\tresult.env![key] = value.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic WellKnownCommands: IStringDictionary<boolean> = {\n\t\t'ant': true,\n\t\t'cmake': true,\n\t\t'eslint': true,\n\t\t'gradle': true,\n\t\t'grunt': true,\n\t\t'gulp': true,\n\t\t'jake': true,\n\t\t'jenkins': true,\n\t\t'jshint': true,\n\t\t'make': true,\n\t\t'maven': true,\n\t\t'msbuild': true,\n\t\t'msc': true,\n\t\t'nmake': true,\n\t\t'npm': true,\n\t\t'rake': true,\n\t\t'tsc': true,\n\t\t'xbuild': true\n\t};\n\n\tpublic getSanitizedCommand(cmd: string): string {\n\t\tlet result = cmd.toLowerCase();\n\t\tconst index = result.lastIndexOf(path.sep);\n\t\tif (index !== -1) {\n\t\t\tresult = result.substring(index + 1);\n\t\t}\n\t\tif (TerminalTaskSystem.WellKnownCommands[result]) {\n\t\t\treturn result;\n\t\t}\n\t\treturn 'other';\n\t}\n\n\tprivate _appendOutput(output: string): void {\n\t\tconst outputChannel = this._outputService.getChannel(this._outputChannelId);\n\t\toutputChannel?.append(output);\n\t}\n}\n\nfunction getWaitOnExitValue(presentationOptions: IPresentationOptions, configurationProperties: IConfigurationProperties) {\n\tif ((presentationOptions.close === undefined) || (presentationOptions.close === false)) {\n\t\tif ((presentationOptions.reveal !== RevealKind.Never) || !configurationProperties.isBackground || (presentationOptions.close === false)) {\n\t\t\tif (presentationOptions.panel === PanelKind.New) {\n\t\t\t\treturn taskShellIntegrationWaitOnExitSequence(nls.localize('closeTerminal', 'Press any key to close the terminal.'));\n\t\t\t} else if (presentationOptions.showReuseMessage) {\n\t\t\t\treturn taskShellIntegrationWaitOnExitSequence(nls.localize('reuseTerminal', 'Terminal will be reused by tasks, press any key to close it.'));\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn !presentationOptions.close;\n}\n\nfunction taskShellIntegrationWaitOnExitSequence(message: string): (exitCode: number) => string {\n\treturn (exitCode) => {\n\t\treturn `${VSCodeSequence(VSCodeOscPt.CommandFinished, exitCode.toString())}${message}`;\n\t};\n}\n\nfunction getReconnectionData(terminal: ITerminalInstance): IReconnectionTaskData | undefined {\n\treturn terminal.shellLaunchConfig.attachPersistentProcess?.reconnectionProperties?.data as IReconnectionTaskData | undefined;\n}\n"],
  "mappings": "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",
  "names": ["terminal", "task", "activeTask", "resolvedVariables", "delayer", "args", "value", "quote"]
}
