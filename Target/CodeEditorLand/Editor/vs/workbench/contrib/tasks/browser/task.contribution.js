var O=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var S=(m,l,t,i)=>{for(var r=i>1?void 0:i?x(l,t):l,d=m.length-1,b;d>=0;d--)(b=m[d])&&(r=(i?b(l,t,r):b(r))||r);return i&&r&&O(l,t,r),r},g=(m,l)=>(t,i)=>l(t,i,m);import{promiseWithResolvers as W}from"../../../../../vs/base/common/async.js";import"../../../../../vs/base/common/jsonSchema.js";import{KeyCode as B,KeyMod as M}from"../../../../../vs/base/common/keyCodes.js";import{Disposable as T}from"../../../../../vs/base/common/lifecycle.js";import{isString as L}from"../../../../../vs/base/common/types.js";import*as e from"../../../../../vs/nls.js";import{MenuId as n,MenuRegistry as o,registerAction2 as K}from"../../../../../vs/platform/actions/common/actions.js";import{Extensions as Q}from"../../../../../vs/platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as N}from"../../../../../vs/platform/contextkey/common/contextkey.js";import*as q from"../../../../../vs/platform/jsonschemas/common/jsonContributionRegistry.js";import{KeybindingsRegistry as U,KeybindingWeight as j}from"../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";import{IProgressService as F,ProgressLocation as G}from"../../../../../vs/platform/progress/common/progress.js";import{Extensions as J}from"../../../../../vs/platform/quickinput/common/quickAccess.js";import{Registry as p}from"../../../../../vs/platform/registry/common/platform.js";import{WorkbenchStateContext as V}from"../../../../../vs/workbench/common/contextkeys.js";import{registerWorkbenchContribution2 as $,Extensions as H,WorkbenchPhase as X}from"../../../../../vs/workbench/common/contributions.js";import{AbstractTaskService as A,ConfigureTaskAction as z}from"../../../../../vs/workbench/contrib/tasks/browser/abstractTaskService.js";import{ManageAutomaticTaskRunning as w,RunAutomaticTasks as Y}from"../../../../../vs/workbench/contrib/tasks/browser/runAutomaticTasks.js";import{TasksQuickAccessProvider as _}from"../../../../../vs/workbench/contrib/tasks/browser/tasksQuickAccess.js";import{ProblemMatcherRegistry as Z}from"../../../../../vs/workbench/contrib/tasks/common/problemMatcher.js";import{TaskDefinitionRegistry as ee}from"../../../../../vs/workbench/contrib/tasks/common/taskDefinitionRegistry.js";import{TASK_RUNNING_STATE as y,TaskEventKind as k,TaskGroup as te,TASKS_CATEGORY as s,TaskSettingId as c}from"../../../../../vs/workbench/contrib/tasks/common/tasks.js";import{ITaskService as ne,TaskCommandsRegistered as oe,TaskExecutionSupportedContext as a}from"../../../../../vs/workbench/contrib/tasks/common/taskService.js";import{TerminalMenuBarGroup as u}from"../../../../../vs/workbench/contrib/terminal/browser/terminalMenus.js";import{tasksSchemaId as f}from"../../../../../vs/workbench/services/configuration/common/configuration.js";import{LifecyclePhase as v}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";import{Extensions as ae}from"../../../../../vs/workbench/services/output/common/output.js";import{IStatusbarService as ie,StatusbarAlignment as se}from"../../../../../vs/workbench/services/statusbar/browser/statusbar.js";import P from"../common/jsonSchema_v1.js";import D,{updateProblemMatchers as re,updateTaskDefinitions as ce}from"../common/jsonSchema_v2.js";const C=p.as(H.Workbench);C.registerWorkbenchContribution(Y,v.Eventually),K(w),o.appendMenuItem(n.CommandPalette,{command:{id:w.ID,title:w.LABEL,category:s},when:a});let h=class extends T{constructor(t,i,r){super();this._taskService=t;this._statusbarService=i;this._progressService=r;this._registerListeners()}_runningTasksStatusItem;_activeTasksCount=0;_registerListeners(){let t,i;this._register(this._taskService.onDidStateChange(r=>{if(r.kind===k.Changed&&this._updateRunningTasksStatus(),!this._ignoreEventForUpdateRunningTasksCount(r))switch(r.kind){case k.Active:this._activeTasksCount++,this._activeTasksCount===1&&(t||({promise:t,resolve:i}=W()));break;case k.Inactive:this._activeTasksCount>0&&(this._activeTasksCount--,this._activeTasksCount===0&&t&&i&&i());break;case k.Terminated:this._activeTasksCount!==0&&(this._activeTasksCount=0,t&&i&&i());break}t&&r.kind===k.Active&&this._activeTasksCount===1&&this._progressService.withProgress({location:G.Window,command:"workbench.action.tasks.showTasks"},d=>(d.report({message:e.localize("building","Building...")}),t)).then(()=>{t=void 0})}))}async _updateRunningTasksStatus(){const t=await this._taskService.getActiveTasks();if(t.length===0)this._runningTasksStatusItem&&(this._runningTasksStatusItem.dispose(),this._runningTasksStatusItem=void 0);else{const i={name:e.localize("status.runningTasks","Running Tasks"),text:`$(tools) ${t.length}`,ariaLabel:e.localize("numberOfRunningTasks","{0} running tasks",t.length),tooltip:e.localize("runningTasks","Show Running Tasks"),command:"workbench.action.tasks.showTasks"};this._runningTasksStatusItem?this._runningTasksStatusItem.update(i):this._runningTasksStatusItem=this._statusbarService.addEntry(i,"status.runningTasks",se.LEFT,49)}}_ignoreEventForUpdateRunningTasksCount(t){return!this._taskService.inTerminal()||t.kind===k.Changed?!1:(L(t.group)?t.group:t.group?._id)!==te.Build._id?!0:t.__task.configurationProperties.problemMatchers===void 0||t.__task.configurationProperties.problemMatchers.length===0}};h=S([g(0,ne),g(1,ie),g(2,F)],h),C.registerWorkbenchContribution(h,v.Restored),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Run,command:{id:"workbench.action.tasks.runTask",title:e.localize({key:"miRunTask",comment:["&& denotes a mnemonic"]},"&&Run Task...")},order:1,when:a}),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Run,command:{id:"workbench.action.tasks.build",title:e.localize({key:"miBuildTask",comment:["&& denotes a mnemonic"]},"Run &&Build Task...")},order:2,when:a}),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Manage,command:{precondition:y,id:"workbench.action.tasks.showTasks",title:e.localize({key:"miRunningTask",comment:["&& denotes a mnemonic"]},"Show Runnin&&g Tasks...")},order:1,when:a}),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Manage,command:{precondition:y,id:"workbench.action.tasks.restartTask",title:e.localize({key:"miRestartTask",comment:["&& denotes a mnemonic"]},"R&&estart Running Task...")},order:2,when:a}),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Manage,command:{precondition:y,id:"workbench.action.tasks.terminate",title:e.localize({key:"miTerminateTask",comment:["&& denotes a mnemonic"]},"&&Terminate Task...")},order:3,when:a}),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Configure,command:{id:"workbench.action.tasks.configureTaskRunner",title:e.localize({key:"miConfigureTask",comment:["&& denotes a mnemonic"]},"&&Configure Tasks...")},order:1,when:a}),o.appendMenuItem(n.MenubarTerminalMenu,{group:u.Configure,command:{id:"workbench.action.tasks.configureDefaultBuildTask",title:e.localize({key:"miConfigureBuildTask",comment:["&& denotes a mnemonic"]},"Configure De&&fault Build Task...")},order:2,when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.openWorkspaceFileTasks",title:e.localize2("workbench.action.tasks.openWorkspaceFileTasks","Open Workspace Tasks"),category:s},when:N.and(V.isEqualTo("workspace"),a)}),o.appendMenuItem(n.CommandPalette,{command:{id:z.ID,title:z.TEXT,category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.showLog",title:e.localize2("ShowLogAction.label","Show Task Log"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.runTask",title:e.localize2("RunTaskAction.label","Run Task"),category:s}}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.reRunTask",title:e.localize2("ReRunTaskAction.label","Rerun Last Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.restartTask",title:e.localize2("RestartTaskAction.label","Restart Running Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.showTasks",title:e.localize2("ShowTasksAction.label","Show Running Tasks"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.terminate",title:e.localize2("TerminateAction.label","Terminate Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.build",title:e.localize2("BuildAction.label","Run Build Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.test",title:e.localize2("TestAction.label","Run Test Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.configureDefaultBuildTask",title:e.localize2("ConfigureDefaultBuildTask.label","Configure Default Build Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.configureDefaultTestTask",title:e.localize2("ConfigureDefaultTestTask.label","Configure Default Test Task"),category:s},when:a}),o.appendMenuItem(n.CommandPalette,{command:{id:"workbench.action.tasks.openUserTasks",title:e.localize2("workbench.action.tasks.openUserTasks","Open User Tasks"),category:s},when:a});class le extends T{constructor(){super(),this.registerActions()}registerActions(){const l="workbench.action.tasks.openUserTasks",t=e.localize("tasks","Tasks");this._register(o.appendMenuItem(n.GlobalActivity,{command:{id:l,title:t},when:a,group:"2_configuration",order:6})),this._register(o.appendMenuItem(n.MenubarPreferencesMenu,{command:{id:l,title:t},when:a,group:"2_configuration",order:6}))}}C.registerWorkbenchContribution(le,v.Restored),U.registerKeybindingRule({id:"workbench.action.tasks.build",weight:j.WorkbenchContrib,when:oe,primary:M.CtrlCmd|M.Shift|B.KeyB});const me=p.as(ae.OutputChannels);me.registerChannel({id:A.OutputChannelId,label:A.OutputChannelLabel,log:!1});const ue=p.as(J.Quickaccess),ke="inTasksPicker";ue.registerQuickAccessProvider({ctor:_,prefix:_.PREFIX,contextKey:ke,placeholder:e.localize("tasksQuickAccessPlaceholder","Type the name of a task to run."),helpEntries:[{description:e.localize("tasksQuickAccessHelp","Run Task"),commandCenterOrder:60}]});const R={id:f,description:"Task definition file",type:"object",allowTrailingCommas:!0,allowComments:!0,default:{version:"2.0.0",tasks:[{label:"My Task",command:"echo hello",type:"shell",args:[],problemMatcher:["$tsc"],presentation:{reveal:"always"},group:"build"}]}};R.definitions={...P.definitions,...D.definitions},R.oneOf=[...D.oneOf||[],...P.oneOf||[]];const I=p.as(q.Extensions.JSONContribution);I.registerSchema(f,R);class E extends T{static ID="taskRegistryContribution";constructor(){super(),this._register(Z.onMatcherChanged(()=>{re(),I.notifySchemaChanged(f)})),this._register(ee.onDefinitionsChanged(()=>{ce(),I.notifySchemaChanged(f)}))}}$(E.ID,E,X.AfterRestored);const de=p.as(Q.Configuration);de.registerConfiguration({id:"task",order:100,title:e.localize("tasksConfigurationTitle","Tasks"),type:"object",properties:{[c.ProblemMatchersNeverPrompt]:{markdownDescription:e.localize("task.problemMatchers.neverPrompt","Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types."),oneOf:[{type:"boolean",markdownDescription:e.localize("task.problemMatchers.neverPrompt.boolean","Sets problem matcher prompting behavior for all tasks.")},{type:"object",patternProperties:{".*":{type:"boolean"}},markdownDescription:e.localize("task.problemMatchers.neverPrompt.array","An object containing task type-boolean pairs to never prompt for problem matchers on."),default:{shell:!0}}],default:!1},[c.AutoDetect]:{markdownDescription:e.localize("task.autoDetect","Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection."),type:"string",enum:["on","off"],default:"on"},[c.SlowProviderWarning]:{markdownDescription:e.localize("task.slowProviderWarning","Configures whether a warning is shown when a provider is slow"),oneOf:[{type:"boolean",markdownDescription:e.localize("task.slowProviderWarning.boolean","Sets the slow provider warning for all tasks.")},{type:"array",items:{type:"string",markdownDescription:e.localize("task.slowProviderWarning.array","An array of task types to never show the slow provider warning.")}}],default:!0},[c.QuickOpenHistory]:{markdownDescription:e.localize("task.quickOpen.history","Controls the number of recent items tracked in task quick open dialog."),type:"number",default:30,minimum:0,maximum:30},[c.QuickOpenDetail]:{markdownDescription:e.localize("task.quickOpen.detail","Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task."),type:"boolean",default:!0},[c.QuickOpenSkip]:{type:"boolean",description:e.localize("task.quickOpen.skip","Controls whether the task quick pick is skipped when there is only one task to pick from."),default:!1},[c.QuickOpenShowAll]:{type:"boolean",description:e.localize("task.quickOpen.showAll",'Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.'),default:!1},[c.AllowAutomaticTasks]:{type:"string",enum:["on","off"],enumDescriptions:[e.localize("task.allowAutomaticTasks.on","Always"),e.localize("task.allowAutomaticTasks.off","Never")],description:e.localize("task.allowAutomaticTasks","Enable automatic tasks - note that tasks won't run in an untrusted workspace."),default:"on",restricted:!0},[c.Reconnection]:{type:"boolean",description:e.localize("task.reconnection","On window reload, reconnect to tasks that have problem matchers."),default:!0},[c.SaveBeforeRun]:{markdownDescription:e.localize("task.saveBeforeRun","Save all dirty editors before running a task."),type:"string",enum:["always","never","prompt"],enumDescriptions:[e.localize("task.saveBeforeRun.always","Always saves all editors before running."),e.localize("task.saveBeforeRun.never","Never saves editors before running."),e.localize("task.SaveBeforeRun.prompt","Prompts whether to save editors before running.")],default:"always"},[c.VerboseLogging]:{type:"boolean",description:e.localize("task.verboseLogging","Enable verbose logging for tasks."),default:!1}}});export{E as TaskRegistryContribution,h as TaskStatusBarContributions};
