var b=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var _=(d,g,e,i)=>{for(var t=i>1?void 0:i?L(g,e):g,r=d.length-1,s;r>=0;r--)(s=d[r])&&(t=(i?s(g,e,t):s(t))||t);return i&&t&&b(g,e,t),t},k=(d,g)=>(e,i)=>g(e,i,d);import{Codicon as m}from"../../../../../vs/base/common/codicons.js";import{Event as E}from"../../../../../vs/base/common/event.js";import{Disposable as Q,DisposableStore as F}from"../../../../../vs/base/common/lifecycle.js";import*as D from"../../../../../vs/base/common/objects.js";import{ThemeIcon as h}from"../../../../../vs/base/common/themables.js";import*as v from"../../../../../vs/base/common/types.js";import*as c from"../../../../../vs/nls.js";import{IConfigurationService as R}from"../../../../../vs/platform/configuration/common/configuration.js";import{IDialogService as z}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{INotificationService as O,Severity as W}from"../../../../../vs/platform/notification/common/notification.js";import{showWithPinnedItems as N}from"../../../../../vs/platform/quickinput/browser/quickPickPin.js";import{IQuickInputService as $}from"../../../../../vs/platform/quickinput/common/quickInput.js";import{IStorageService as x}from"../../../../../vs/platform/storage/common/storage.js";import{registerIcon as P}from"../../../../../vs/platform/theme/common/iconRegistry.js";import{IThemeService as A}from"../../../../../vs/platform/theme/common/themeService.js";import"../../../../../vs/platform/workspace/common/workspace.js";import"../../../../../vs/workbench/contrib/tasks/browser/abstractTaskService.js";import{ConfiguringTask as I,ContributedTask as K,CustomTask as B}from"../../../../../vs/workbench/contrib/tasks/common/tasks.js";import{ITaskService as G}from"../../../../../vs/workbench/contrib/tasks/common/taskService.js";import{createColorStyleElement as U,getColorClass as j}from"../../../../../vs/workbench/contrib/terminal/browser/terminalIcon.js";const q="task.quickOpen.detail",V="task.quickOpen.skip";function Pe(d){return"uri"in d}const S=c.localize("taskQuickPick.showAll","Show All Tasks..."),w=P("tasks-list-configure",m.gear,c.localize("configureTaskIcon","Configuration icon in the tasks selection list.")),C=P("tasks-remove",m.close,c.localize("removeTaskIcon","Icon for remove in the tasks selection list.")),H="runTaskStorageKey";let u=class extends Q{constructor(e,i,t,r,s,n,a){super();this._taskService=e;this._configurationService=i;this._quickInputService=t;this._notificationService=r;this._themeService=s;this._dialogService=n;this._storageService=a;this._sorter=this._taskService.createSorter()}_sorter;_topLevelEntries;_showDetail(){return!!this._configurationService.getValue(q)}_guessTaskLabel(e){if(e._label)return e._label;if(I.is(e)){let i=e.configures.type;const t=D.deepClone(e.configures);return delete t._key,delete t.type,Object.keys(t).forEach(r=>i+=`: ${t[r]}`),i}return""}static getTaskLabelWithIcon(e,i){const t=i||e._label,r=e.configurationProperties.icon;return r?r.id?`$(${r.id}) ${t}`:`$(${m.tools.id}) ${t}`:`${t}`}static applyColorStyles(e,i,t){if(e.configurationProperties.icon?.color){const r=t.getColorTheme(),s=U(r);return i.iconClasses=[j(e.configurationProperties.icon.color)],s}}_createTaskEntry(e,i=[]){const t=[{iconClass:h.asClassName(w),tooltip:c.localize("configureTask","Configure Task")},...i],r={label:u.getTaskLabelWithIcon(e,this._guessTaskLabel(e)),description:this._taskService.getTaskDescription(e),task:e,detail:this._showDetail()?e.configurationProperties.detail:void 0,buttons:t},s=u.applyColorStyles(e,r,this._themeService);return s&&this._register(s),r}_createEntriesForGroup(e,i,t,r=[]){e.push({type:"separator",label:t}),i.forEach(s=>{s.configurationProperties.hide||e.push(this._createTaskEntry(s,r))})}_createTypeEntries(e,i){e.push({type:"separator",label:c.localize("contributedTasks","contributed")}),i.forEach(t=>{e.push({label:`$(folder) ${t}`,task:t,ariaLabel:c.localize("taskType","All {0} tasks",t)})}),e.push({label:S,task:S,alwaysShow:!0})}_handleFolderTaskResult(e){const i=[];return Array.from(e).forEach(([t,r])=>{if(r.set&&i.push(...r.set.tasks),r.configurations)for(const s in r.configurations.byIdentifier)i.push(r.configurations.byIdentifier[s])}),i}_dedupeConfiguredAndRecent(e,i){let t=[];const r=Array(e.length).fill(!1);for(let n=0;n<i.length;n++){const a=i[n].getWorkspaceFolder()?.uri.toString(),o=i[n].getDefinition()?._key,l=i[n].type,p=i[n]._label,f=i[n].getKey(),y=e.findIndex(T=>a&&o&&T.getWorkspaceFolder()?.uri.toString()===a&&(T.getDefinition()?._key===o||T.type===l&&T._label===p)||f&&T.getKey()===f);y===-1?t.push(i[n]):(e[y]=i[n],r[y]=!0)}t=t.sort((n,a)=>this._sorter.compare(n,a));const s=[];for(let n=0;n<e.length;n++)(r[n]||I.is(e[n]))&&s.push(e[n]);return{configuredTasks:t,recentTasks:s}}async getTopLevelEntries(e){if(this._topLevelEntries!==void 0)return{entries:this._topLevelEntries};let i=(await this._taskService.getSavedTasks("historical")).reverse();const t=this._handleFolderTaskResult(await this._taskService.getWorkspaceTasks()),r=this._taskService.taskTypes();this._topLevelEntries=[];const s=this._dedupeConfiguredAndRecent(i,t),n=s.configuredTasks;if(i=s.recentTasks,i.length>0){const a={iconClass:h.asClassName(C),tooltip:c.localize("removeRecent","Remove Recently Used Task")};this._createEntriesForGroup(this._topLevelEntries,i,c.localize("recentlyUsed","recently used"),[a])}return t.length>0&&n.length>0&&this._createEntriesForGroup(this._topLevelEntries,n,c.localize("configured","configured")),e&&t.length===0&&(this._topLevelEntries.push({type:"separator",label:c.localize("configured","configured")}),this._topLevelEntries.push(e)),r.length>0&&this._createTypeEntries(this._topLevelEntries,r),{entries:this._topLevelEntries,isSingleConfigured:t.length===1?t[0]:void 0}}async handleSettingOption(e){const{confirmed:i}=await this._dialogService.confirm({type:W.Warning,message:c.localize("TaskQuickPick.changeSettingDetails",`Task detection for {0} tasks causes files in any workspace you open to be run as code. Enabling {0} task detection is a user setting and will apply to any workspace you open. 

 Do you want to enable {0} task detection for all workspaces?`,e),cancelButton:c.localize("TaskQuickPick.changeSettingNo","No")});if(i)return await this._configurationService.updateValue(`${e}.autoDetect`,"on"),await new Promise(t=>setTimeout(()=>t(),100)),this.show(c.localize("TaskService.pickRunTask","Select the task to run"),void 0,e)}async show(e,i,t,r){const s=new F,n=s.add(this._quickInputService.createQuickPick({useSeparators:!0}));n.placeholder=e,n.matchOnDescription=!0,n.ignoreFocusOut=!1,s.add(n.onDidTriggerItemButton(async o=>{const l=o.item.task;if(o.button.iconClass===h.asClassName(C)){const p=l&&!v.isString(l)?l.getKey():void 0;p&&this._taskService.removeRecentlyUsedTask(p);const f=n.items.indexOf(o.item);f>=0&&(n.items=[...n.items.slice(0,f),...n.items.slice(f+1)])}else if(o.button.iconClass===h.asClassName(w)){if(this._quickInputService.cancel(),K.is(l))this._taskService.customize(l,void 0,!0);else if(B.is(l)||I.is(l)){let p=!1;try{p=await this._taskService.openConfig(l)}catch{}p||this._taskService.customize(l,void 0,!0)}}})),r&&(n.value=r);let a=t;if(!a){const o=await this.getTopLevelEntries(i);if(o.isSingleConfigured&&this._configurationService.getValue(V))return s.dispose(),this._toTask(o.isSingleConfigured);const l=o.entries;a=await this._doPickerFirstLevel(n,l,s)}do if(v.isString(a)){if(r){await this._doPickerFirstLevel(n,(await this.getTopLevelEntries(i)).entries,s),s.dispose();return}const o=await this.doPickerSecondLevel(n,s,a);if(o&&!o.settingType&&o.task===null)n.value="",a=await this._doPickerFirstLevel(n,(await this.getTopLevelEntries(i)).entries,s);else return o&&v.isString(o.settingType)?(s.dispose(),this.handleSettingOption(o.settingType)):(s.dispose(),o?.task&&!v.isString(o?.task)?this._toTask(o?.task):void 0)}else return a?(s.dispose(),this._toTask(a)):(s.dispose(),a);while(!0)}async _doPickerFirstLevel(e,i,t){return e.items=i,t.add(N(this._storageService,H,e,!0)),(await new Promise(s=>{t.add(E.once(e.onDidAccept)(async()=>{s(e.selectedItems?e.selectedItems[0]:void 0)}))}))?.task}async doPickerSecondLevel(e,i,t,r){if(e.busy=!0,t===S){const n=(await this._taskService.tasks()).filter(a=>!a.configurationProperties.hide).sort((a,o)=>this._sorter.compare(a,o)).map(a=>this._createTaskEntry(a));n.push(...u.allSettingEntries(this._configurationService)),e.items=n}else e.value=r||"",e.items=await this._getEntriesForProvider(t);return await e.show(),e.busy=!1,await new Promise(n=>{i.add(E.once(e.onDidAccept)(async()=>{n(e.selectedItems?e.selectedItems[0]:void 0)}))})}static allSettingEntries(e){const i=[],t=u.getSettingEntry(e,"grunt");t&&i.push(t);const r=u.getSettingEntry(e,"gulp");r&&i.push(r);const s=u.getSettingEntry(e,"jake");return s&&i.push(s),i}static getSettingEntry(e,i){if(e.getValue(`${i}.autoDetect`)==="off")return{label:c.localize("TaskQuickPick.changeSettingsOptions","$(gear) {0} task detection is turned off. Enable {1} task detection...",i[0].toUpperCase()+i.slice(1),i),task:null,settingType:i,alwaysShow:!0}}async _getEntriesForProvider(e){const i=(await this._taskService.tasks({type:e})).sort((s,n)=>this._sorter.compare(s,n));let t=[];if(i.length>0){for(const s of i)s.configurationProperties.hide||t.push(this._createTaskEntry(s));t.push({type:"separator"},{label:c.localize("TaskQuickPick.goBack","Go back \u21A9"),task:null,alwaysShow:!0})}else t=[{label:c.localize("TaskQuickPick.noTasksForType","No {0} tasks found. Go back \u21A9",e),task:null,alwaysShow:!0}];const r=u.getSettingEntry(this._configurationService,e);return r&&t.push(r),t}async _toTask(e){if(!I.is(e))return e;const i=await this._taskService.tryResolveTask(e);return i||this._notificationService.error(c.localize("noProviderForTask",'There is no task provider registered for tasks of type "{0}".',e.type)),i}};u=_([k(0,G),k(1,R),k(2,$),k(3,O),k(4,A),k(5,z),k(6,x)],u);export{q as QUICKOPEN_DETAIL_CONFIG,V as QUICKOPEN_SKIP_CONFIG,u as TaskQuickPick,w as configureTaskIcon,Pe as isWorkspaceFolder};
