var b=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var _=(d,p,e,t)=>{for(var i=t>1?void 0:t?L(p,e):p,n=d.length-1,s;n>=0;n--)(s=d[n])&&(i=(t?s(p,e,i):s(i))||i);return t&&i&&b(p,e,i),i},k=(d,p)=>(e,t)=>p(e,t,d);import{Codicon as m}from"../../../../base/common/codicons.js";import{Event as E}from"../../../../base/common/event.js";import{Disposable as Q,DisposableStore as F}from"../../../../base/common/lifecycle.js";import*as D from"../../../../base/common/objects.js";import{ThemeIcon as h}from"../../../../base/common/themables.js";import*as v from"../../../../base/common/types.js";import*as c from"../../../../nls.js";import{IConfigurationService as R}from"../../../../platform/configuration/common/configuration.js";import{IDialogService as z}from"../../../../platform/dialogs/common/dialogs.js";import{INotificationService as O,Severity as W}from"../../../../platform/notification/common/notification.js";import{showWithPinnedItems as N}from"../../../../platform/quickinput/browser/quickPickPin.js";import{IQuickInputService as $}from"../../../../platform/quickinput/common/quickInput.js";import{IStorageService as x}from"../../../../platform/storage/common/storage.js";import{registerIcon as P}from"../../../../platform/theme/common/iconRegistry.js";import{IThemeService as A}from"../../../../platform/theme/common/themeService.js";import{createColorStyleElement as K,getColorClass as B}from"../../terminal/browser/terminalIcon.js";import{ITaskService as j}from"../common/taskService.js";import{ConfiguringTask as y,ContributedTask as G,CustomTask as U}from"../common/tasks.js";const q="task.quickOpen.detail",V="task.quickOpen.skip";function ke(d){return"uri"in d}const S=c.localize("taskQuickPick.showAll","Show All Tasks..."),w=P("tasks-list-configure",m.gear,c.localize("configureTaskIcon","Configuration icon in the tasks selection list.")),C=P("tasks-remove",m.close,c.localize("removeTaskIcon","Icon for remove in the tasks selection list.")),H="runTaskStorageKey";let u=class extends Q{constructor(e,t,i,n,s,r,a){super();this._taskService=e;this._configurationService=t;this._quickInputService=i;this._notificationService=n;this._themeService=s;this._dialogService=r;this._storageService=a;this._sorter=this._taskService.createSorter()}_sorter;_topLevelEntries;_showDetail(){return!!this._configurationService.getValue(q)}_guessTaskLabel(e){if(e._label)return e._label;if(y.is(e)){let t=e.configures.type;const i=D.deepClone(e.configures);return delete i._key,delete i.type,Object.keys(i).forEach(n=>t+=`: ${i[n]}`),t}return""}static getTaskLabelWithIcon(e,t){const i=t||e._label,n=e.configurationProperties.icon;return n?n.id?`$(${n.id}) ${i}`:`$(${m.tools.id}) ${i}`:`${i}`}static applyColorStyles(e,t,i){if(e.configurationProperties.icon?.color){const n=i.getColorTheme(),s=K(n);return t.iconClasses=[B(e.configurationProperties.icon.color)],s}}_createTaskEntry(e,t=[]){const i=[{iconClass:h.asClassName(w),tooltip:c.localize("configureTask","Configure Task")},...t],n={label:u.getTaskLabelWithIcon(e,this._guessTaskLabel(e)),description:this._taskService.getTaskDescription(e),task:e,detail:this._showDetail()?e.configurationProperties.detail:void 0,buttons:i},s=u.applyColorStyles(e,n,this._themeService);return s&&this._register(s),n}_createEntriesForGroup(e,t,i,n=[]){e.push({type:"separator",label:i}),t.forEach(s=>{s.configurationProperties.hide||e.push(this._createTaskEntry(s,n))})}_createTypeEntries(e,t){e.push({type:"separator",label:c.localize("contributedTasks","contributed")}),t.forEach(i=>{e.push({label:`$(folder) ${i}`,task:i,ariaLabel:c.localize("taskType","All {0} tasks",i)})}),e.push({label:S,task:S,alwaysShow:!0})}_handleFolderTaskResult(e){const t=[];return Array.from(e).forEach(([i,n])=>{if(n.set&&t.push(...n.set.tasks),n.configurations)for(const s in n.configurations.byIdentifier)t.push(n.configurations.byIdentifier[s])}),t}_dedupeConfiguredAndRecent(e,t){let i=[];const n=Array(e.length).fill(!1);for(let r=0;r<t.length;r++){const a=t[r].getWorkspaceFolder()?.uri.toString(),o=t[r].getDefinition()?._key,l=t[r].type,g=t[r]._label,f=t[r].getKey(),I=e.findIndex(T=>a&&o&&T.getWorkspaceFolder()?.uri.toString()===a&&(T.getDefinition()?._key===o||T.type===l&&T._label===g)||f&&T.getKey()===f);I===-1?i.push(t[r]):(e[I]=t[r],n[I]=!0)}i=i.sort((r,a)=>this._sorter.compare(r,a));const s=[];for(let r=0;r<e.length;r++)(n[r]||y.is(e[r]))&&s.push(e[r]);return{configuredTasks:i,recentTasks:s}}async getTopLevelEntries(e){if(this._topLevelEntries!==void 0)return{entries:this._topLevelEntries};let t=(await this._taskService.getSavedTasks("historical")).reverse();const i=this._handleFolderTaskResult(await this._taskService.getWorkspaceTasks()),n=this._taskService.taskTypes();this._topLevelEntries=[];const s=this._dedupeConfiguredAndRecent(t,i),r=s.configuredTasks;if(t=s.recentTasks,t.length>0){const a={iconClass:h.asClassName(C),tooltip:c.localize("removeRecent","Remove Recently Used Task")};this._createEntriesForGroup(this._topLevelEntries,t,c.localize("recentlyUsed","recently used"),[a])}return i.length>0&&r.length>0&&this._createEntriesForGroup(this._topLevelEntries,r,c.localize("configured","configured")),e&&i.length===0&&(this._topLevelEntries.push({type:"separator",label:c.localize("configured","configured")}),this._topLevelEntries.push(e)),n.length>0&&this._createTypeEntries(this._topLevelEntries,n),{entries:this._topLevelEntries,isSingleConfigured:i.length===1?i[0]:void 0}}async handleSettingOption(e){const{confirmed:t}=await this._dialogService.confirm({type:W.Warning,message:c.localize("TaskQuickPick.changeSettingDetails",`Task detection for {0} tasks causes files in any workspace you open to be run as code. Enabling {0} task detection is a user setting and will apply to any workspace you open. 

 Do you want to enable {0} task detection for all workspaces?`,e),cancelButton:c.localize("TaskQuickPick.changeSettingNo","No")});if(t)return await this._configurationService.updateValue(`${e}.autoDetect`,"on"),await new Promise(i=>setTimeout(()=>i(),100)),this.show(c.localize("TaskService.pickRunTask","Select the task to run"),void 0,e)}async show(e,t,i,n){const s=new F,r=s.add(this._quickInputService.createQuickPick({useSeparators:!0}));r.placeholder=e,r.matchOnDescription=!0,r.ignoreFocusOut=!1,s.add(r.onDidTriggerItemButton(async o=>{const l=o.item.task;if(o.button.iconClass===h.asClassName(C)){const g=l&&!v.isString(l)?l.getKey():void 0;g&&this._taskService.removeRecentlyUsedTask(g);const f=r.items.indexOf(o.item);f>=0&&(r.items=[...r.items.slice(0,f),...r.items.slice(f+1)])}else if(o.button.iconClass===h.asClassName(w)){if(this._quickInputService.cancel(),G.is(l))this._taskService.customize(l,void 0,!0);else if(U.is(l)||y.is(l)){let g=!1;try{g=await this._taskService.openConfig(l)}catch{}g||this._taskService.customize(l,void 0,!0)}}})),n&&(r.value=n);let a=i;if(!a){const o=await this.getTopLevelEntries(t);if(o.isSingleConfigured&&this._configurationService.getValue(V))return s.dispose(),this._toTask(o.isSingleConfigured);const l=o.entries;a=await this._doPickerFirstLevel(r,l,s)}do if(v.isString(a)){if(n){await this._doPickerFirstLevel(r,(await this.getTopLevelEntries(t)).entries,s),s.dispose();return}const o=await this.doPickerSecondLevel(r,s,a);if(o&&!o.settingType&&o.task===null)r.value="",a=await this._doPickerFirstLevel(r,(await this.getTopLevelEntries(t)).entries,s);else return o&&v.isString(o.settingType)?(s.dispose(),this.handleSettingOption(o.settingType)):(s.dispose(),o?.task&&!v.isString(o?.task)?this._toTask(o?.task):void 0)}else return a?(s.dispose(),this._toTask(a)):(s.dispose(),a);while(!0)}async _doPickerFirstLevel(e,t,i){return e.items=t,i.add(N(this._storageService,H,e,!0)),(await new Promise(s=>{i.add(E.once(e.onDidAccept)(async()=>{s(e.selectedItems?e.selectedItems[0]:void 0)}))}))?.task}async doPickerSecondLevel(e,t,i,n){if(e.busy=!0,i===S){const r=(await this._taskService.tasks()).filter(a=>!a.configurationProperties.hide).sort((a,o)=>this._sorter.compare(a,o)).map(a=>this._createTaskEntry(a));r.push(...u.allSettingEntries(this._configurationService)),e.items=r}else e.value=n||"",e.items=await this._getEntriesForProvider(i);return await e.show(),e.busy=!1,await new Promise(r=>{t.add(E.once(e.onDidAccept)(async()=>{r(e.selectedItems?e.selectedItems[0]:void 0)}))})}static allSettingEntries(e){const t=[],i=u.getSettingEntry(e,"grunt");i&&t.push(i);const n=u.getSettingEntry(e,"gulp");n&&t.push(n);const s=u.getSettingEntry(e,"jake");return s&&t.push(s),t}static getSettingEntry(e,t){if(e.getValue(`${t}.autoDetect`)==="off")return{label:c.localize("TaskQuickPick.changeSettingsOptions","$(gear) {0} task detection is turned off. Enable {1} task detection...",t[0].toUpperCase()+t.slice(1),t),task:null,settingType:t,alwaysShow:!0}}async _getEntriesForProvider(e){const t=(await this._taskService.tasks({type:e})).sort((s,r)=>this._sorter.compare(s,r));let i=[];if(t.length>0){for(const s of t)s.configurationProperties.hide||i.push(this._createTaskEntry(s));i.push({type:"separator"},{label:c.localize("TaskQuickPick.goBack","Go back \u21A9"),task:null,alwaysShow:!0})}else i=[{label:c.localize("TaskQuickPick.noTasksForType","No {0} tasks found. Go back \u21A9",e),task:null,alwaysShow:!0}];const n=u.getSettingEntry(this._configurationService,e);return n&&i.push(n),i}async _toTask(e){if(!y.is(e))return e;const t=await this._taskService.tryResolveTask(e);return t||this._notificationService.error(c.localize("noProviderForTask",'There is no task provider registered for tasks of type "{0}".',e.type)),t}};u=_([k(0,j),k(1,R),k(2,$),k(3,O),k(4,A),k(5,z),k(6,x)],u);export{q as QUICKOPEN_DETAIL_CONFIG,V as QUICKOPEN_SKIP_CONFIG,u as TaskQuickPick,w as configureTaskIcon,ke as isWorkspaceFolder};
