var K=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var f=(m,r,i,t)=>{for(var o=t>1?void 0:t?Q(r,i):r,n=m.length-1,s;n>=0;n--)(s=m[n])&&(o=(t?s(r,i,o):s(o))||o);return t&&o&&K(r,i,o),o},e=(m,r)=>(i,t)=>r(i,t,m);import{TerminateResponseCode as j}from"../../../../../vs/base/common/processes.js";import*as v from"vs/base/common/semver/semver";import{IModelService as H}from"../../../../../vs/editor/common/services/model.js";import{ITextModelService as J}from"../../../../../vs/editor/common/services/resolverService.js";import*as c from"../../../../../vs/nls.js";import{IAccessibilitySignalService as U}from"../../../../../vs/platform/accessibilitySignal/browser/accessibilitySignalService.js";import{ICommandService as X}from"../../../../../vs/platform/commands/common/commands.js";import{IConfigurationService as Y}from"../../../../../vs/platform/configuration/common/configuration.js";import{IContextKeyService as Z}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IDialogService as $}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{IFileService as ee}from"../../../../../vs/platform/files/common/files.js";import{InstantiationType as re,registerSingleton as ie}from"../../../../../vs/platform/instantiation/common/extensions.js";import{IInstantiationService as te}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ILogService as oe}from"../../../../../vs/platform/log/common/log.js";import{IMarkerService as se}from"../../../../../vs/platform/markers/common/markers.js";import{INotificationService as ne}from"../../../../../vs/platform/notification/common/notification.js";import{IOpenerService as me}from"../../../../../vs/platform/opener/common/opener.js";import{IProgressService as ae}from"../../../../../vs/platform/progress/common/progress.js";import{IQuickInputService as ce}from"../../../../../vs/platform/quickinput/common/quickInput.js";import{IStorageService as Se}from"../../../../../vs/platform/storage/common/storage.js";import{ITelemetryService as fe}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{IThemeService as ve}from"../../../../../vs/platform/theme/common/themeService.js";import{IWorkspaceContextService as Ie}from"../../../../../vs/platform/workspace/common/workspace.js";import{IWorkspaceTrustManagementService as pe,IWorkspaceTrustRequestService as ue}from"../../../../../vs/platform/workspace/common/workspaceTrust.js";import{IViewDescriptorService as le}from"../../../../../vs/workbench/common/views.js";import{AbstractTaskService as de}from"../../../../../vs/workbench/contrib/tasks/browser/abstractTaskService.js";import{TerminalTaskSystem as ke}from"../../../../../vs/workbench/contrib/tasks/browser/terminalTaskSystem.js";import{ExecutionEngine as I}from"../../../../../vs/workbench/contrib/tasks/common/tasks.js";import{ITaskService as ge}from"../../../../../vs/workbench/contrib/tasks/common/taskService.js";import"../../../../../vs/workbench/contrib/tasks/common/taskSystem.js";import{ITerminalGroupService as he,ITerminalService as ye}from"../../../../../vs/workbench/contrib/terminal/browser/terminal.js";import{ITerminalProfileResolverService as Te}from"../../../../../vs/workbench/contrib/terminal/common/terminal.js";import{IConfigurationResolverService as Ce}from"../../../../../vs/workbench/services/configurationResolver/common/configurationResolver.js";import{IEditorService as Pe}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IWorkbenchEnvironmentService as _e}from"../../../../../vs/workbench/services/environment/common/environmentService.js";import{IExtensionService as xe}from"../../../../../vs/workbench/services/extensions/common/extensions.js";import{ILifecycleService as be}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";import{IOutputService as Ee}from"../../../../../vs/workbench/services/output/common/output.js";import{IPaneCompositePartService as Re}from"../../../../../vs/workbench/services/panecomposite/browser/panecomposite.js";import{IPathService as we}from"../../../../../vs/workbench/services/path/common/pathService.js";import{IPreferencesService as We}from"../../../../../vs/workbench/services/preferences/common/preferences.js";import{IRemoteAgentService as Ae}from"../../../../../vs/workbench/services/remote/common/remoteAgentService.js";import{ITextFileService as Fe}from"../../../../../vs/workbench/services/textfile/common/textfiles.js";import{IViewsService as De}from"../../../../../vs/workbench/services/views/common/viewsService.js";import"../common/taskConfiguration.js";let a=class extends de{constructor(r,i,t,o,n,s,p,u,l,d,k,S,g,h,y,T,C,P,_,x,b,E,R,w,W,A,F,D,M,L,V,z,O,B,N,q,Me){super(r,i,t,o,n,s,p,u,l,d,k,g,h,y,T,C,P,_,x,b,E,R,w,W,A,F,D,M,L,V,z,O,B,S,q,N),this._register(S.onBeforeShutdown(G=>G.veto(this.beforeShutdown(),"veto.tasks")))}_getTaskSystem(){if(this._taskSystem)return this._taskSystem;const r=this._createTerminalTaskSystem();return this._taskSystem=r,this._taskSystemListeners=[this._taskSystem.onDidStateChange(i=>{this._taskRunningState.set(this._taskSystem.isActiveSync()),this._onDidStateChange.fire(i)})],this._taskSystem}_computeLegacyConfiguration(r){const{config:i,hasParseErrors:t}=this._getConfiguration(r);return t?Promise.resolve({workspaceFolder:r,hasErrors:!0,config:void 0}):i?Promise.resolve({workspaceFolder:r,config:i,hasErrors:!1}):Promise.resolve({workspaceFolder:r,hasErrors:!0,config:void 0})}_versionAndEngineCompatible(r){const i=r&&r.version?r.version:void 0,t=this.executionEngine;return i===void 0||v.satisfies("0.1.0",i)&&t===I.Process||v.satisfies("2.0.0",i)&&t===I.Terminal}beforeShutdown(){if(!this._taskSystem||!this._taskSystem.isActiveSync()||this._taskSystem instanceof ke)return!1;let r;return this._taskSystem.canAutoTerminate()?r=Promise.resolve({confirmed:!0}):r=this._dialogService.confirm({message:c.localize("TaskSystem.runningTask","There is a task running. Do you want to terminate it?"),primaryButton:c.localize({key:"TaskSystem.terminateTask",comment:["&& denotes a mnemonic"]},"&&Terminate Task")}),r.then(i=>i.confirmed?this._taskSystem.terminateAll().then(t=>{let o=!0,n;for(const s of t)o=o&&s.success,n===void 0&&s.code!==void 0&&(n=s.code);return o?(this._taskSystem=void 0,this._disposeTaskSystemListeners(),!1):n&&n===j.ProcessNotFound?this._dialogService.confirm({message:c.localize("TaskSystem.noProcess","The launched task doesn't exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag."),primaryButton:c.localize({key:"TaskSystem.exitAnyways",comment:["&& denotes a mnemonic"]},"&&Exit Anyways"),type:"info"}).then(s=>!s.confirmed):!0},t=>!0):!0)}};a=f([e(0,Y),e(1,se),e(2,Ee),e(3,Re),e(4,De),e(5,X),e(6,Pe),e(7,ee),e(8,Ie),e(9,fe),e(10,Fe),e(11,be),e(12,H),e(13,xe),e(14,ce),e(15,Ce),e(16,ye),e(17,he),e(18,Se),e(19,ae),e(20,me),e(21,$),e(22,ne),e(23,Z),e(24,_e),e(25,Te),e(26,we),e(27,J),e(28,We),e(29,le),e(30,ue),e(31,pe),e(32,oe),e(33,ve),e(34,te),e(35,Ae),e(36,U)],a),ie(ge,a,re.Delayed);export{a as TaskService};
