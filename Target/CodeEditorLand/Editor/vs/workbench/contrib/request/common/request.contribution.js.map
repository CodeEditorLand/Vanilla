{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/request/common/request.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILoggerService } from \"../../../../platform/log/common/log.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tExtensions,\n\ttype IOutputChannelRegistry,\n\tIOutputService,\n} from \"../../../services/output/common/output.js\";\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.actions.showNetworkLog\",\n\t\t\t\ttitle: localize2(\"showNetworkLog\", \"Show Network Log\"),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\t\tconst loggerService = servicesAccessor.get(ILoggerService);\n\t\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\t\tfor (const logger of loggerService.getRegisteredLoggers()) {\n\t\t\t\tif (logger.id.startsWith(\"network-\")) {\n\t\t\t\t\tloggerService.setVisibility(logger.id, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!outputService.getChannelDescriptor(\"network-window\")) {\n\t\t\t\tawait Event.toPromise(\n\t\t\t\t\tEvent.filter(\n\t\t\t\t\t\tRegistry.as<IOutputChannelRegistry>(\n\t\t\t\t\t\t\tExtensions.OutputChannels,\n\t\t\t\t\t\t).onDidRegisterChannel,\n\t\t\t\t\t\t(channel) => channel === \"network-window\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\toutputService.showChannel(\"network-window\");\n\t\t}\n\t},\n);\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AAEP;AAAA,EACC,cAAc,QAAQ;AAAA,IACrB,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,UAAU,kBAAkB,kBAAkB;AAAA,QACrD,UAAU,WAAW;AAAA,QACrB,IAAI;AAAA,MACL,CAAC;AAAA,IACF;AAAA,IACA,MAAM,IAAI,kBAAmD;AAC5D,YAAM,gBAAgB,iBAAiB,IAAI,cAAc;AACzD,YAAM,gBAAgB,iBAAiB,IAAI,cAAc;AACzD,iBAAW,UAAU,cAAc,qBAAqB,GAAG;AAC1D,YAAI,OAAO,GAAG,WAAW,UAAU,GAAG;AACrC,wBAAc,cAAc,OAAO,IAAI,IAAI;AAAA,QAC5C;AAAA,MACD;AACA,UAAI,CAAC,cAAc,qBAAqB,gBAAgB,GAAG;AAC1D,cAAM,MAAM;AAAA,UACX,MAAM;AAAA,YACL,SAAS;AAAA,cACR,WAAW;AAAA,YACZ,EAAE;AAAA,YACF,CAAC,YAAY,YAAY;AAAA,UAC1B;AAAA,QACD;AAAA,MACD;AACA,oBAAc,YAAY,gBAAgB;AAAA,IAC3C;AAAA,EACD;AACD;",
  "names": []
}
