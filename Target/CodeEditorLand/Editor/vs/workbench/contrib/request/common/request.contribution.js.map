{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/request/common/request.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { localize2 } from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILoggerService } from '../../../../platform/log/common/log.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions, IOutputChannelRegistry, IOutputService } from '../../../services/output/common/output.js';\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.actions.showNetworkLog',\n\t\t\ttitle: localize2('showNetworkLog', \"Show Network Log\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t});\n\t}\n\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\tconst loggerService = servicesAccessor.get(ILoggerService);\n\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\tfor (const logger of loggerService.getRegisteredLoggers()) {\n\t\t\tif (logger.id.startsWith('network-')) {\n\t\t\t\tloggerService.setVisibility(logger.id, true);\n\t\t\t}\n\t\t}\n\t\tif (!outputService.getChannelDescriptor('network-window')) {\n\t\t\tawait Event.toPromise(Event.filter(Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).onDidRegisterChannel, channel => channel === 'network-window'));\n\t\t}\n\t\toutputService.showChannel('network-window');\n\t}\n});\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,SAAS,uBAAuB;AACzC,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,YAAY,wBAAwB,sBAAsB;AAEnE,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,kBAAkB,kBAAkB;AAAA,MACrD,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,kBAAmD;AAC5D,UAAM,gBAAgB,iBAAiB,IAAI,cAAc;AACzD,UAAM,gBAAgB,iBAAiB,IAAI,cAAc;AACzD,eAAW,UAAU,cAAc,qBAAqB,GAAG;AAC1D,UAAI,OAAO,GAAG,WAAW,UAAU,GAAG;AACrC,sBAAc,cAAc,OAAO,IAAI,IAAI;AAAA,MAC5C;AAAA,IACD;AACA,QAAI,CAAC,cAAc,qBAAqB,gBAAgB,GAAG;AAC1D,YAAM,MAAM,UAAU,MAAM,OAAO,SAAS,GAA2B,WAAW,cAAc,EAAE,sBAAsB,aAAW,YAAY,gBAAgB,CAAC;AAAA,IACjK;AACA,kBAAc,YAAY,gBAAgB;AAAA,EAC3C;AACD,CAAC;",
  "names": []
}
