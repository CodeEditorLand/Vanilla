import{Event as i}from"../../../../base/common/event.js";import{localize2 as n}from"../../../../nls.js";import{Categories as s}from"../../../../platform/action/common/actionCommonCategories.js";import{Action2 as g,registerAction2 as c}from"../../../../platform/actions/common/actions.js";import{ILoggerService as a}from"../../../../platform/log/common/log.js";import{Registry as m}from"../../../../platform/registry/common/platform.js";import{Extensions as p,IOutputService as w}from"../../../services/output/common/output.js";c(class extends g{constructor(){super({id:"workbench.actions.showNetworkLog",title:n("showNetworkLog","Show Network Log"),category:s.Developer,f1:!0})}async run(o){const e=o.get(a),r=o.get(w);for(const t of e.getRegisteredLoggers())t.id.startsWith("network-")&&e.setVisibility(t.id,!0);r.getChannelDescriptor("network-window")||await i.toPromise(i.filter(m.as(p.OutputChannels).onDidRegisterChannel,t=>t==="network-window")),r.showChannel("network-window")}});
