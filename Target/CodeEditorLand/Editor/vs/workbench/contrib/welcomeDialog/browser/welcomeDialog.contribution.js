var S=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var l=(s,o,t,r)=>{for(var i=r>1?void 0:r?b(o,t):o,n=s.length-1,c;n>=0;n--)(c=s[n])&&(i=(r?c(o,t,i):c(i))||i);return r&&i&&S(o,t,i),i},e=(s,o)=>(t,r)=>o(t,r,s);import{LifecyclePhase as w}from"../../../services/lifecycle/common/lifecycle.js";import{Registry as p}from"../../../../platform/registry/common/platform.js";import{Extensions as y}from"../../../common/contributions.js";import{IStorageService as E,StorageScope as x}from"../../../../platform/storage/common/storage.js";import{IBrowserWorkbenchEnvironmentService as R}from"../../../services/environment/browser/environmentService.js";import{IConfigurationService as k}from"../../../../platform/configuration/common/configuration.js";import{Disposable as W}from"../../../../base/common/lifecycle.js";import{ContextKeyExpr as g,IContextKeyService as A}from"../../../../platform/contextkey/common/contextkey.js";import{ICodeEditorService as T}from"../../../../editor/browser/services/codeEditorService.js";import{IInstantiationService as O}from"../../../../platform/instantiation/common/instantiation.js";import{ICommandService as P}from"../../../../platform/commands/common/commands.js";import{WelcomeWidget as K}from"./welcomeWidget.js";import{ITelemetryService as M}from"../../../../platform/telemetry/common/telemetry.js";import{IOpenerService as N}from"../../../../platform/opener/common/opener.js";import{Extensions as z,ConfigurationScope as B}from"../../../../platform/configuration/common/configurationRegistry.js";import{localize as L}from"../../../../nls.js";import{applicationConfigurationNodeBase as V}from"../../../common/configuration.js";import{RunOnceScheduler as D}from"../../../../base/common/async.js";import{IEditorService as _}from"../../../services/editor/common/editorService.js";const j="workbench.welcome.experimental.dialog";let m=class extends W{isRendered=!1;constructor(o,t,r,i,n,c,I,u,h,C){if(super(),!o.isNew(x.APPLICATION)||!r.inspect(j).value)return;const a=t.options?.welcomeDialog;a&&this._register(C.onDidActiveEditorChange(()=>{if(!this.isRendered){const d=n.getActiveCodeEditor();if(d?.hasModel()){const v=new D(()=>{const f=i.contextMatchesRules(g.deserialize("notificationCenterVisible"))||i.contextMatchesRules(g.deserialize("notificationToastsVisible"));d===n.getActiveCodeEditor()&&!f&&(this.isRendered=!0,new K(d,c,I,u,h).render(a.title,a.message,a.buttonText,a.buttonCommand))},3e3);this._register(d.onDidChangeModelContent(f=>{this.isRendered||v.schedule()}))}}}))}};m=l([e(0,E),e(1,R),e(2,k),e(3,A),e(4,T),e(5,O),e(6,P),e(7,M),e(8,N),e(9,_)],m),p.as(y.Workbench).registerWorkbenchContribution(m,w.Eventually);const q=p.as(z.Configuration);q.registerConfiguration({...V,properties:{"workbench.welcome.experimental.dialog":{scope:B.APPLICATION,type:"boolean",default:!1,tags:["experimental"],description:L("workbench.welcome.dialog","When enabled, a welcome widget is shown in the editor")}}});
