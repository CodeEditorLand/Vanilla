{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/emmet/test/browser/emmetAction.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IGrammarContributions, EmmetEditorAction } from '../../browser/emmetActions.js';\nimport { withTestCodeEditor } from '../../../../../editor/test/browser/testCodeEditor.js';\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nclass MockGrammarContributions implements IGrammarContributions {\n\tprivate scopeName: string;\n\n\tconstructor(scopeName: string) {\n\t\tthis.scopeName = scopeName;\n\t}\n\n\tpublic getGrammar(mode: string): string {\n\t\treturn this.scopeName;\n\t}\n}\n\nsuite('Emmet', () => {\n\ttest('Get language mode and parent mode for emmet', () => {\n\t\twithTestCodeEditor([], {}, (editor, viewModel, instantiationService) => {\n\t\t\tconst languageService = instantiationService.get(ILanguageService);\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'markdown' }));\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'handlebars' }));\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'nunjucks' }));\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'laravel-blade' }));\n\n\t\t\tfunction testIsEnabled(mode: string, scopeName: string, expectedLanguage?: string, expectedParentLanguage?: string) {\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\tassert.fail('Editor model not found');\n\t\t\t\t}\n\n\t\t\t\tmodel.setLanguage(mode);\n\t\t\t\tconst langOutput = EmmetEditorAction.getLanguage(editor, new MockGrammarContributions(scopeName));\n\t\t\t\tif (!langOutput) {\n\t\t\t\t\tassert.fail('langOutput not found');\n\t\t\t\t}\n\n\t\t\t\tassert.strictEqual(langOutput.language, expectedLanguage);\n\t\t\t\tassert.strictEqual(langOutput.parentMode, expectedParentLanguage);\n\t\t\t}\n\n\t\t\t// syntaxes mapped using the scope name of the grammar\n\t\t\ttestIsEnabled('markdown', 'text.html.markdown', 'markdown', 'html');\n\t\t\ttestIsEnabled('handlebars', 'text.html.handlebars', 'handlebars', 'html');\n\t\t\ttestIsEnabled('nunjucks', 'text.html.nunjucks', 'nunjucks', 'html');\n\t\t\ttestIsEnabled('laravel-blade', 'text.html.php.laravel-blade', 'laravel-blade', 'html');\n\n\t\t\t// languages that have different Language Id and scopeName\n\t\t\t// testIsEnabled('razor', 'text.html.cshtml', 'razor', 'html');\n\t\t\t// testIsEnabled('HTML (Eex)', 'text.html.elixir', 'boo', 'html');\n\n\t\t\tdisposables.dispose();\n\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB,yBAAyB;AACzD,SAAS,0BAA0B;AACnC,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,SAAS,wBAAwB;AACjC,SAAS,+CAA+C;AAExD,MAAM,yBAA0D;AAAA,EAZhE,OAYgE;AAAA;AAAA;AAAA,EACvD;AAAA,EAER,YAAY,WAAmB;AAC9B,SAAK,YAAY;AAAA,EAClB;AAAA,EAEO,WAAW,MAAsB;AACvC,WAAO,KAAK;AAAA,EACb;AACD;AAEA,MAAM,SAAS,MAAM;AACpB,OAAK,+CAA+C,MAAM;AACzD,uBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,WAAW,yBAAyB;AACvE,YAAM,kBAAkB,qBAAqB,IAAI,gBAAgB;AAEjE,YAAM,cAAc,IAAI,gBAAgB;AACxC,kBAAY,IAAI,gBAAgB,iBAAiB,EAAE,IAAI,WAAW,CAAC,CAAC;AACpE,kBAAY,IAAI,gBAAgB,iBAAiB,EAAE,IAAI,aAAa,CAAC,CAAC;AACtE,kBAAY,IAAI,gBAAgB,iBAAiB,EAAE,IAAI,WAAW,CAAC,CAAC;AACpE,kBAAY,IAAI,gBAAgB,iBAAiB,EAAE,IAAI,gBAAgB,CAAC,CAAC;AAEzE,eAAS,cAAc,MAAc,WAAmB,kBAA2B,wBAAiC;AACnH,cAAM,QAAQ,OAAO,SAAS;AAC9B,YAAI,CAAC,OAAO;AACX,iBAAO,KAAK,wBAAwB;AAAA,QACrC;AAEA,cAAM,YAAY,IAAI;AACtB,cAAM,aAAa,kBAAkB,YAAY,QAAQ,IAAI,yBAAyB,SAAS,CAAC;AAChG,YAAI,CAAC,YAAY;AAChB,iBAAO,KAAK,sBAAsB;AAAA,QACnC;AAEA,eAAO,YAAY,WAAW,UAAU,gBAAgB;AACxD,eAAO,YAAY,WAAW,YAAY,sBAAsB;AAAA,MACjE;AAdS;AAiBT,oBAAc,YAAY,sBAAsB,YAAY,MAAM;AAClE,oBAAc,cAAc,wBAAwB,cAAc,MAAM;AACxE,oBAAc,YAAY,sBAAsB,YAAY,MAAM;AAClE,oBAAc,iBAAiB,+BAA+B,iBAAiB,MAAM;AAMrF,kBAAY,QAAQ;AAAA,IAErB,CAAC;AAAA,EACF,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
