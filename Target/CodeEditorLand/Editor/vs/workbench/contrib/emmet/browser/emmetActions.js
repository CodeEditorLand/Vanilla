import{EditorAction as g}from"../../../../editor/browser/editorExtensions.js";import{grammarsExtPoint as p}from"../../../services/textMate/common/TMGrammars.js";import{IExtensionService as d}from"../../../services/extensions/common/extensions.js";import{ICommandService as x}from"../../../../platform/commands/common/commands.js";class r{static _grammars={};constructor(t){Object.keys(r._grammars).length||this.fillModeScopeMap(t)}fillModeScopeMap(t){t.forEach(n=>{n.value.forEach(e=>{e.language&&e.scopeName&&(r._grammars[e.language]=e.scopeName)})})}getGrammar(t){return r._grammars[t]}}class u extends g{emmetActionName;constructor(t){super(t),this.emmetActionName=t.actionName}static emmetSupportedModes=["html","css","xml","xsl","haml","jade","jsx","slim","scss","sass","less","stylus","styl","svg"];_lastGrammarContributions=null;_lastExtensionService=null;_withGrammarContributions(t){return this._lastExtensionService!==t&&(this._lastExtensionService=t,this._lastGrammarContributions=t.readExtensionPointContributions(p).then(n=>new r(n))),this._lastGrammarContributions||Promise.resolve(null)}run(t,n){const e=t.get(d),s=t.get(x);return this._withGrammarContributions(e).then(i=>{if(this.id==="editor.emmet.action.expandAbbreviation"&&i)return s.executeCommand("emmet.expandAbbreviation",u.getLanguage(n,i))})}static getLanguage(t,n){const e=t.getModel(),s=t.getSelection();if(!e||!s)return null;const i=s.getStartPosition();e.tokenization.tokenizeIfCheap(i.lineNumber);const o=e.getLanguageIdAtPosition(i.lineNumber,i.column).split(".").pop();return o?{language:o,parentMode:(()=>{const c=n.getGrammar(o);if(!c)return o;const a=c.split(".");if(a.length<2)return o;for(let m=1;m<a.length;m++){const l=a[a.length-m];if(this.emmetSupportedModes.indexOf(l)!==-1)return l}return o})()}:null}}export{u as EmmetEditorAction};
