{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/emmet/browser/emmetActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\ttype IActionOptions,\n\ttype ServicesAccessor,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\ttype ExtensionPointContribution,\n\tIExtensionService,\n} from \"../../../services/extensions/common/extensions.js\";\nimport {\n\ttype ITMSyntaxExtensionPoint,\n\tgrammarsExtPoint,\n} from \"../../../services/textMate/common/TMGrammars.js\";\n\ninterface ModeScopeMap {\n\t[key: string]: string;\n}\n\nexport interface IGrammarContributions {\n\tgetGrammar(mode: string): string;\n}\n\nclass GrammarContributions implements IGrammarContributions {\n\tprivate static _grammars: ModeScopeMap = {};\n\n\tconstructor(\n\t\tcontributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[],\n\t) {\n\t\tif (!Object.keys(GrammarContributions._grammars).length) {\n\t\t\tthis.fillModeScopeMap(contributions);\n\t\t}\n\t}\n\n\tprivate fillModeScopeMap(\n\t\tcontributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[],\n\t) {\n\t\tcontributions.forEach((contribution) => {\n\t\t\tcontribution.value.forEach((grammar) => {\n\t\t\t\tif (grammar.language && grammar.scopeName) {\n\t\t\t\t\tGrammarContributions._grammars[grammar.language] =\n\t\t\t\t\t\tgrammar.scopeName;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getGrammar(mode: string): string {\n\t\treturn GrammarContributions._grammars[mode];\n\t}\n}\n\ninterface IEmmetActionOptions extends IActionOptions {\n\tactionName: string;\n}\n\nexport abstract class EmmetEditorAction extends EditorAction {\n\tprotected emmetActionName: string;\n\n\tconstructor(opts: IEmmetActionOptions) {\n\t\tsuper(opts);\n\t\tthis.emmetActionName = opts.actionName;\n\t}\n\n\tprivate static readonly emmetSupportedModes = [\n\t\t\"html\",\n\t\t\"css\",\n\t\t\"xml\",\n\t\t\"xsl\",\n\t\t\"haml\",\n\t\t\"jade\",\n\t\t\"jsx\",\n\t\t\"slim\",\n\t\t\"scss\",\n\t\t\"sass\",\n\t\t\"less\",\n\t\t\"stylus\",\n\t\t\"styl\",\n\t\t\"svg\",\n\t];\n\n\tprivate _lastGrammarContributions: Promise<GrammarContributions> | null =\n\t\tnull;\n\tprivate _lastExtensionService: IExtensionService | null = null;\n\tprivate _withGrammarContributions(\n\t\textensionService: IExtensionService,\n\t): Promise<GrammarContributions | null> {\n\t\tif (this._lastExtensionService !== extensionService) {\n\t\t\tthis._lastExtensionService = extensionService;\n\t\t\tthis._lastGrammarContributions = extensionService\n\t\t\t\t.readExtensionPointContributions(grammarsExtPoint)\n\t\t\t\t.then((contributions) => {\n\t\t\t\t\treturn new GrammarContributions(contributions);\n\t\t\t\t});\n\t\t}\n\t\treturn this._lastGrammarContributions || Promise.resolve(null);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\treturn this._withGrammarContributions(extensionService).then(\n\t\t\t(grammarContributions) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.id === \"editor.emmet.action.expandAbbreviation\" &&\n\t\t\t\t\tgrammarContributions\n\t\t\t\t) {\n\t\t\t\t\treturn commandService.executeCommand<void>(\n\t\t\t\t\t\t\"emmet.expandAbbreviation\",\n\t\t\t\t\t\tEmmetEditorAction.getLanguage(\n\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\tgrammarContributions,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic static getLanguage(\n\t\teditor: ICodeEditor,\n\t\tgrammars: IGrammarContributions,\n\t) {\n\t\tconst model = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tif (!model || !selection) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst position = selection.getStartPosition();\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t);\n\t\tconst syntax = languageId.split(\".\").pop();\n\n\t\tif (!syntax) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst checkParentMode = (): string => {\n\t\t\tconst languageGrammar = grammars.getGrammar(syntax);\n\t\t\tif (!languageGrammar) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tconst languages = languageGrammar.split(\".\");\n\t\t\tif (languages.length < 2) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tfor (let i = 1; i < languages.length; i++) {\n\t\t\t\tconst language = languages[languages.length - i];\n\t\t\t\tif (this.emmetSupportedModes.indexOf(language) !== -1) {\n\t\t\t\t\treturn language;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn syntax;\n\t\t};\n\n\t\treturn {\n\t\t\tlanguage: syntax,\n\t\t\tparentMode: checkParentMode(),\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
