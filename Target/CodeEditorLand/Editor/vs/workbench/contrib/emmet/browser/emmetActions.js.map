{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/emmet/browser/emmetActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorAction, ServicesAccessor, IActionOptions } from '../../../../editor/browser/editorExtensions.js';\nimport { grammarsExtPoint, ITMSyntaxExtensionPoint } from '../../../services/textMate/common/TMGrammars.js';\nimport { IExtensionService, ExtensionPointContribution } from '../../../services/extensions/common/extensions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\n\ninterface ModeScopeMap {\n\t[key: string]: string;\n}\n\nexport interface IGrammarContributions {\n\tgetGrammar(mode: string): string;\n}\n\nclass GrammarContributions implements IGrammarContributions {\n\n\tprivate static _grammars: ModeScopeMap = {};\n\n\tconstructor(contributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[]) {\n\t\tif (!Object.keys(GrammarContributions._grammars).length) {\n\t\t\tthis.fillModeScopeMap(contributions);\n\t\t}\n\t}\n\n\tprivate fillModeScopeMap(contributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[]) {\n\t\tcontributions.forEach((contribution) => {\n\t\t\tcontribution.value.forEach((grammar) => {\n\t\t\t\tif (grammar.language && grammar.scopeName) {\n\t\t\t\t\tGrammarContributions._grammars[grammar.language] = grammar.scopeName;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getGrammar(mode: string): string {\n\t\treturn GrammarContributions._grammars[mode];\n\t}\n}\n\ninterface IEmmetActionOptions extends IActionOptions {\n\tactionName: string;\n}\n\nexport abstract class EmmetEditorAction extends EditorAction {\n\n\tprotected emmetActionName: string;\n\n\tconstructor(opts: IEmmetActionOptions) {\n\t\tsuper(opts);\n\t\tthis.emmetActionName = opts.actionName;\n\t}\n\n\tprivate static readonly emmetSupportedModes = ['html', 'css', 'xml', 'xsl', 'haml', 'jade', 'jsx', 'slim', 'scss', 'sass', 'less', 'stylus', 'styl', 'svg'];\n\n\tprivate _lastGrammarContributions: Promise<GrammarContributions> | null = null;\n\tprivate _lastExtensionService: IExtensionService | null = null;\n\tprivate _withGrammarContributions(extensionService: IExtensionService): Promise<GrammarContributions | null> {\n\t\tif (this._lastExtensionService !== extensionService) {\n\t\t\tthis._lastExtensionService = extensionService;\n\t\t\tthis._lastGrammarContributions = extensionService.readExtensionPointContributions(grammarsExtPoint).then((contributions) => {\n\t\t\t\treturn new GrammarContributions(contributions);\n\t\t\t});\n\t\t}\n\t\treturn this._lastGrammarContributions || Promise.resolve(null);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\treturn this._withGrammarContributions(extensionService).then((grammarContributions) => {\n\n\t\t\tif (this.id === 'editor.emmet.action.expandAbbreviation' && grammarContributions) {\n\t\t\t\treturn commandService.executeCommand<void>('emmet.expandAbbreviation', EmmetEditorAction.getLanguage(editor, grammarContributions));\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\n\t}\n\n\tpublic static getLanguage(editor: ICodeEditor, grammars: IGrammarContributions) {\n\t\tconst model = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tif (!model || !selection) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst position = selection.getStartPosition();\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tconst syntax = languageId.split('.').pop();\n\n\t\tif (!syntax) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst checkParentMode = (): string => {\n\t\t\tconst languageGrammar = grammars.getGrammar(syntax);\n\t\t\tif (!languageGrammar) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tconst languages = languageGrammar.split('.');\n\t\t\tif (languages.length < 2) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tfor (let i = 1; i < languages.length; i++) {\n\t\t\t\tconst language = languages[languages.length - i];\n\t\t\t\tif (this.emmetSupportedModes.indexOf(language) !== -1) {\n\t\t\t\t\treturn language;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn syntax;\n\t\t};\n\n\t\treturn {\n\t\t\tlanguage: syntax,\n\t\t\tparentMode: checkParentMode()\n\t\t};\n\t}\n\n\n}\n"],
  "mappings": "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",
  "names": []
}
