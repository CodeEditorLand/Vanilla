var y=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var h=(s,n,e,i)=>{for(var o=i>1?void 0:i?E(n,e):n,t=s.length-1,r;t>=0;t--)(r=s[t])&&(o=(i?r(n,e,o):r(o))||o);return i&&o&&y(n,e,o),o},p=(s,n)=>(e,i)=>n(e,i,s);import{ReentrancyBarrier as k}from"../../../../base/common/controlFlow.js";import{Disposable as L,DisposableStore as S,MutableDisposable as P}from"../../../../base/common/lifecycle.js";import{localize as l,localize2 as u}from"../../../../nls.js";import{Categories as m}from"../../../../platform/action/common/actionCommonCategories.js";import{Action2 as v,registerAction2 as b}from"../../../../platform/actions/common/actions.js";import{IKeybindingService as I}from"../../../../platform/keybinding/common/keybinding.js";import{SideBySideEditor as w}from"../../../browser/parts/editor/sideBySideEditor.js";import{isEditorPaneWithScrolling as g}from"../../../common/editor.js";import{IEditorService as A}from"../../../services/editor/common/editorService.js";import{IStatusbarService as T,StatusbarAlignment as D}from"../../../services/statusbar/browser/statusbar.js";let a=class extends L{constructor(e,i){super();this.editorService=e;this.statusbarService=i;this.registerActions()}static ID="workbench.contrib.syncScrolling";paneInitialScrollTop=new Map;syncScrollDispoasbles=this._register(new S);paneDisposables=new S;statusBarEntry=this._register(new P);isActive=!1;registerActiveListeners(){this.syncScrollDispoasbles.add(this.editorService.onDidVisibleEditorsChange(()=>this.trackVisiblePanes()))}activate(){this.registerActiveListeners(),this.trackVisiblePanes()}toggle(){this.isActive?this.deactivate():this.activate(),this.isActive=!this.isActive,this.toggleStatusbarItem(this.isActive)}_reentrancyBarrier=new k;trackVisiblePanes(){this.paneDisposables.clear(),this.paneInitialScrollTop.clear();for(const e of this.getAllVisiblePanes())g(e)&&(this.paneInitialScrollTop.set(e,e.getScrollPosition()),this.paneDisposables.add(e.onDidChangeScroll(()=>this._reentrancyBarrier.runExclusivelyOrSkip(()=>{this.onDidEditorPaneScroll(e)}))))}onDidEditorPaneScroll(e){const i=this.paneInitialScrollTop.get(e);if(i===void 0)throw new Error("Scrolled pane not tracked");if(!g(e))throw new Error("Scrolled pane does not support scrolling");const o=e.getScrollPosition(),t={scrollTop:o.scrollTop-i.scrollTop,scrollLeft:o.scrollLeft!==void 0&&i.scrollLeft!==void 0?o.scrollLeft-i.scrollLeft:void 0};for(const r of this.getAllVisiblePanes()){if(r===e||!g(r))continue;const c=this.paneInitialScrollTop.get(r);if(c===void 0)throw new Error("Could not find initial offset for pane");const f=r.getScrollPosition(),d={scrollTop:c.scrollTop+t.scrollTop,scrollLeft:c.scrollLeft!==void 0&&t.scrollLeft!==void 0?c.scrollLeft+t.scrollLeft:void 0};f.scrollTop===d.scrollTop&&f.scrollLeft===d.scrollLeft||r.setScrollPosition(d)}}getAllVisiblePanes(){const e=[];for(const i of this.editorService.visibleEditorPanes){if(i instanceof w){const o=i.getPrimaryEditorPane(),t=i.getSecondaryEditorPane();o&&e.push(o),t&&e.push(t);continue}e.push(i)}return e}deactivate(){this.paneDisposables.clear(),this.syncScrollDispoasbles.clear(),this.paneInitialScrollTop.clear()}toggleStatusbarItem(e){if(e){if(!this.statusBarEntry.value){const i=l("mouseScrolllingLocked","Scrolling Locked"),o=l("mouseLockScrollingEnabled","Lock Scrolling Enabled");this.statusBarEntry.value=this.statusbarService.addEntry({name:i,text:i,tooltip:o,ariaLabel:i,command:{id:"workbench.action.toggleLockedScrolling",title:""},kind:"prominent",showInAllWindows:!0},"status.scrollLockingEnabled",D.RIGHT,102)}}else this.statusBarEntry.clear()}registerActions(){const e=this;this._register(b(class extends v{constructor(){super({id:"workbench.action.toggleLockedScrolling",title:{...u("toggleLockedScrolling","Toggle Locked Scrolling Across Editors"),mnemonicTitle:l({key:"miToggleLockedScrolling",comment:["&& denotes a mnemonic"]},"Locked Scrolling")},category:m.View,f1:!0,metadata:{description:l("synchronizeScrolling","Synchronize Scrolling Editors")}})}run(){e.toggle()}})),this._register(b(class extends v{constructor(){super({id:"workbench.action.holdLockedScrolling",title:{...u("holdLockedScrolling","Hold Locked Scrolling Across Editors"),mnemonicTitle:l({key:"miHoldLockedScrolling",comment:["&& denotes a mnemonic"]},"Locked Scrolling")},category:m.View})}run(i){const o=i.get(I);e.toggle();const t=o.enableKeybindingHoldMode("workbench.action.holdLockedScrolling");t&&t.finally(()=>{e.toggle()})}}))}dispose(){this.deactivate(),super.dispose()}};a=h([p(0,A),p(1,T)],a);export{a as SyncScroll};
