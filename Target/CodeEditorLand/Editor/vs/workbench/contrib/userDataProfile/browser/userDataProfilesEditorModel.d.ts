import { Action, IAction } from "vs/base/common/actions";
import { CancellationToken } from "vs/base/common/cancellation";
import { Disposable } from "vs/base/common/lifecycle";
import { ResourceMap } from "vs/base/common/map";
import { ThemeIcon } from "vs/base/common/themables";
import { URI } from "vs/base/common/uri";
import { ICommandService } from "vs/platform/commands/common/commands";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IDialogService } from "vs/platform/dialogs/common/dialogs";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IOpenerService } from "vs/platform/opener/common/opener";
import { IProductService } from "vs/platform/product/common/productService";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUserDataProfile, IUserDataProfilesService, ProfileResourceType, ProfileResourceTypeFlags, UseDefaultProfileFlags } from "vs/platform/userDataProfile/common/userDataProfile";
import { EditorModel } from "vs/workbench/common/editor/editorModel";
import { ITreeItemCheckboxState } from "vs/workbench/common/views";
import { IHostService } from "vs/workbench/services/host/browser/host";
import { IProfileResourceChildTreeItem, IProfileTemplateInfo, IUserDataProfileImportExportService, IUserDataProfileManagementService, IUserDataProfileService, IUserDataProfileTemplate } from "vs/workbench/services/userDataProfile/common/userDataProfile";
export type ChangeEvent = {
    readonly name?: boolean;
    readonly icon?: boolean;
    readonly flags?: boolean;
    readonly active?: boolean;
    readonly message?: boolean;
    readonly copyFrom?: boolean;
    readonly copyFromInfo?: boolean;
    readonly copyFlags?: boolean;
    readonly preview?: boolean;
    readonly disabled?: boolean;
    readonly newWindowProfile?: boolean;
};
export interface IProfileChildElement {
    readonly handle: string;
    readonly action?: IAction;
    readonly checkbox?: ITreeItemCheckboxState;
}
export interface IProfileResourceTypeElement extends IProfileChildElement {
    readonly resourceType: ProfileResourceType;
}
export interface IProfileResourceTypeChildElement extends IProfileChildElement {
    readonly label: string;
    readonly resource?: URI;
    readonly icon?: ThemeIcon;
}
export declare function isProfileResourceTypeElement(element: IProfileChildElement): element is IProfileResourceTypeElement;
export declare function isProfileResourceChildElement(element: IProfileChildElement): element is IProfileResourceTypeChildElement;
export declare abstract class AbstractUserDataProfileElement extends Disposable {
    protected readonly userDataProfileManagementService: IUserDataProfileManagementService;
    protected readonly userDataProfilesService: IUserDataProfilesService;
    protected readonly commandService: ICommandService;
    protected readonly instantiationService: IInstantiationService;
    protected readonly _onDidChange: any;
    readonly onDidChange: any;
    private readonly saveScheduler;
    constructor(name: string, icon: string | undefined, flags: UseDefaultProfileFlags | undefined, isActive: boolean, userDataProfileManagementService: IUserDataProfileManagementService, userDataProfilesService: IUserDataProfilesService, commandService: ICommandService, instantiationService: IInstantiationService);
    private _name;
    get name(): string;
    set name(name: string);
    private _icon;
    get icon(): string | undefined;
    set icon(icon: string | undefined);
    private _flags;
    get flags(): UseDefaultProfileFlags | undefined;
    set flags(flags: UseDefaultProfileFlags | undefined);
    private _active;
    get active(): boolean;
    set active(active: boolean);
    private _message;
    get message(): string | undefined;
    set message(message: string | undefined);
    private _disabled;
    get disabled(): boolean;
    set disabled(saving: boolean);
    getFlag(key: ProfileResourceType): boolean;
    setFlag(key: ProfileResourceType, value: boolean): void;
    validate(): void;
    getChildren(resourceType?: ProfileResourceType): Promise<IProfileChildElement[]>;
    protected getChildrenForResourceType(resourceType: ProfileResourceType): Promise<IProfileChildElement[]>;
    protected getChildrenFromProfile(profile: IUserDataProfile, resourceType: ProfileResourceType): Promise<IProfileResourceTypeChildElement[]>;
    protected toUserDataProfileResourceChildElement(child: IProfileResourceChildTreeItem): IProfileResourceTypeChildElement;
    getInitialName(): string;
    shouldValidateName(): boolean;
    save(): void;
    private hasUnsavedChanges;
    protected saveProfile(profile: IUserDataProfile): Promise<IUserDataProfile | undefined>;
    abstract readonly titleButtons: [Action[], Action[]];
    abstract readonly actions: [IAction[], IAction[]];
    protected abstract doSave(): Promise<void>;
}
export declare class UserDataProfileElement extends AbstractUserDataProfileElement {
    private _profile;
    readonly titleButtons: [Action[], Action[]];
    readonly actions: [IAction[], IAction[]];
    private readonly userDataProfileService;
    private readonly configurationService;
    get profile(): IUserDataProfile;
    constructor(_profile: IUserDataProfile, titleButtons: [Action[], Action[]], actions: [IAction[], IAction[]], userDataProfileService: IUserDataProfileService, configurationService: IConfigurationService, userDataProfileManagementService: IUserDataProfileManagementService, userDataProfilesService: IUserDataProfilesService, commandService: ICommandService, instantiationService: IInstantiationService);
    toggleNewWindowProfile(): Promise<void>;
    private _isNewWindowProfile;
    get isNewWindowProfile(): boolean;
    set isNewWindowProfile(isNewWindowProfile: boolean);
    toggleCurrentWindowProfile(): Promise<void>;
    protected doSave(): Promise<void>;
    protected getChildrenForResourceType(resourceType: ProfileResourceType): Promise<IProfileChildElement[]>;
    getInitialName(): string;
}
export declare class NewProfileElement extends AbstractUserDataProfileElement {
    readonly titleButtons: [Action[], Action[]];
    readonly actions: [IAction[], IAction[]];
    private readonly fileService;
    private readonly userDataProfileImportExportService;
    private _copyFromTemplates;
    get copyFromTemplates(): ResourceMap<string>;
    private templatePromise;
    private template;
    private defaultName;
    private defaultIcon;
    constructor(name: string, copyFrom: URI | IUserDataProfile | undefined, titleButtons: [Action[], Action[]], actions: [IAction[], IAction[]], fileService: IFileService, userDataProfileImportExportService: IUserDataProfileImportExportService, userDataProfileManagementService: IUserDataProfileManagementService, userDataProfilesService: IUserDataProfilesService, commandService: ICommandService, instantiationService: IInstantiationService);
    private _copyFrom;
    get copyFrom(): IUserDataProfile | URI | undefined;
    set copyFrom(copyFrom: IUserDataProfile | URI | undefined);
    private _copyFlags;
    get copyFlags(): ProfileResourceTypeFlags | undefined;
    set copyFlags(flags: ProfileResourceTypeFlags | undefined);
    private _previewProfile;
    get previewProfile(): IUserDataProfile | undefined;
    set previewProfile(profile: IUserDataProfile | undefined);
    private getCopyFlagsFrom;
    private initialize;
    resolveTemplate(uri: URI): Promise<IUserDataProfileTemplate | null>;
    hasResource(resourceType: ProfileResourceType): boolean;
    getCopyFlag(key: ProfileResourceType): boolean;
    setCopyFlag(key: ProfileResourceType, value: boolean): void;
    getCopyFromName(): string | undefined;
    protected getChildrenForResourceType(resourceType: ProfileResourceType): Promise<IProfileChildElement[]>;
    private getChildrenFromProfileTemplate;
    shouldValidateName(): boolean;
    getInitialName(): string;
    protected doSave(): Promise<void>;
}
export declare class UserDataProfilesEditorModel extends EditorModel {
    private readonly userDataProfileService;
    private readonly userDataProfilesService;
    private readonly userDataProfileManagementService;
    private readonly userDataProfileImportExportService;
    private readonly dialogService;
    private readonly telemetryService;
    private readonly hostService;
    private readonly productService;
    private readonly openerService;
    private readonly instantiationService;
    private static INSTANCE;
    static getInstance(instantiationService: IInstantiationService): UserDataProfilesEditorModel;
    private _profiles;
    get profiles(): AbstractUserDataProfileElement[];
    private newProfileElement;
    private _onDidChange;
    readonly onDidChange: any;
    private _templates;
    get templates(): readonly IProfileTemplateInfo[];
    constructor(userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService, userDataProfileManagementService: IUserDataProfileManagementService, userDataProfileImportExportService: IUserDataProfileImportExportService, dialogService: IDialogService, telemetryService: ITelemetryService, hostService: IHostService, productService: IProductService, openerService: IOpenerService, instantiationService: IInstantiationService);
    private onDidChangeProfiles;
    resolve(): Promise<void>;
    private createProfileElement;
    createNewProfile(copyFrom?: URI | IUserDataProfile): Promise<AbstractUserDataProfileElement | undefined>;
    revert(): void;
    private removeNewProfile;
    private previewNewProfile;
    saveNewProfile(transient?: boolean, token?: CancellationToken): Promise<IUserDataProfile | undefined>;
    private discardNewProfile;
    private removeProfile;
    private openWindow;
    private exportProfile;
}
