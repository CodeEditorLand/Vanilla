{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/update/browser/update.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport '../../../../platform/update/common/update.config.contribution.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { MenuId, registerAction2, Action2 } from '../../../../platform/actions/common/actions.js';\nimport { ProductContribution, UpdateContribution, CONTEXT_UPDATE_STATE, SwitchProductQualityContribution, RELEASE_NOTES_URL, showReleaseNotesInEditor, DOWNLOAD_URL } from './update.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport product from '../../../../platform/product/common/product.js';\nimport { IUpdateService, StateType } from '../../../../platform/update/common/update.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { isWindows } from '../../../../base/common/platform.js';\nimport { IFileDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { mnemonicButtonLabel } from '../../../../base/common/labels.js';\nimport { ShowCurrentReleaseNotesActionId, ShowCurrentReleaseNotesFromCurrentFileActionId } from '../common/update.js';\nimport { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\n\nconst workbench = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\nworkbench.registerWorkbenchContribution(ProductContribution, LifecyclePhase.Restored);\nworkbench.registerWorkbenchContribution(UpdateContribution, LifecyclePhase.Restored);\nworkbench.registerWorkbenchContribution(SwitchProductQualityContribution, LifecyclePhase.Restored);\n\n// Release notes\n\nexport class ShowCurrentReleaseNotesAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowCurrentReleaseNotesActionId,\n\t\t\ttitle: {\n\t\t\t\t...localize2('showReleaseNotes', \"Show Release Notes\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mshowReleaseNotes', comment: ['&& denotes a mnemonic'] }, \"Show &&Release Notes\"),\n\t\t\t},\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: RELEASE_NOTES_URL,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.MenubarHelpMenu,\n\t\t\t\tgroup: '1_welcome',\n\t\t\t\torder: 5,\n\t\t\t\twhen: RELEASE_NOTES_URL,\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst productService = accessor.get(IProductService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\ttry {\n\t\t\tawait showReleaseNotesInEditor(instantiationService, productService.version, false);\n\t\t} catch (err) {\n\t\t\tif (productService.releaseNotesUrl) {\n\t\t\t\tawait openerService.open(URI.parse(productService.releaseNotesUrl));\n\t\t\t} else {\n\t\t\t\tthrow new Error(localize('update.noReleaseNotesOnline', \"This version of {0} does not have release notes online\", productService.nameLong));\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ShowCurrentReleaseNotesFromCurrentFileAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowCurrentReleaseNotesFromCurrentFileActionId,\n\t\t\ttitle: {\n\t\t\t\t...localize2('showReleaseNotesCurrentFile', \"Open Current File as Release Notes\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mshowReleaseNotes', comment: ['&& denotes a mnemonic'] }, \"Show &&Release Notes\"),\n\t\t\t},\n\t\t\tcategory: localize2('developerCategory', \"Developer\"),\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst productService = accessor.get(IProductService);\n\n\t\ttry {\n\t\t\tawait showReleaseNotesInEditor(instantiationService, productService.version, true);\n\t\t} catch (err) {\n\t\t\tthrow new Error(localize('releaseNotesFromFileNone', \"Cannot open the current file as Release Notes\"));\n\t\t}\n\t}\n}\n\nregisterAction2(ShowCurrentReleaseNotesAction);\nregisterAction2(ShowCurrentReleaseNotesFromCurrentFileAction);\n\n// Update\n\nexport class CheckForUpdateAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.checkForUpdate',\n\t\t\ttitle: localize2('checkForUpdates', 'Check for Updates...'),\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst updateService = accessor.get(IUpdateService);\n\t\treturn updateService.checkForUpdates(true);\n\t}\n}\n\nclass DownloadUpdateAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.downloadUpdate',\n\t\t\ttitle: localize2('downloadUpdate', 'Download Update'),\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.AvailableForDownload)\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tawait accessor.get(IUpdateService).downloadUpdate();\n\t}\n}\n\nclass InstallUpdateAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.installUpdate',\n\t\t\ttitle: localize2('installUpdate', 'Install Update'),\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloaded)\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tawait accessor.get(IUpdateService).applyUpdate();\n\t}\n}\n\nclass RestartToUpdateAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.restartToUpdate',\n\t\t\ttitle: localize2('restartToUpdate', 'Restart to Update'),\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready)\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tawait accessor.get(IUpdateService).quitAndInstall();\n\t}\n}\n\nclass DownloadAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.download';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DownloadAction.ID,\n\t\t\ttitle: localize2('openDownloadPage', \"Download {0}\", product.nameLong),\n\t\t\tprecondition: ContextKeyExpr.and(IsWebContext, DOWNLOAD_URL), // Only show when running in a web browser and a download url is available\n\t\t\tf1: true,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.StatusBarWindowIndicatorMenu,\n\t\t\t\twhen: ContextKeyExpr.and(IsWebContext, DOWNLOAD_URL)\n\t\t\t}]\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst productService = accessor.get(IProductService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\tif (productService.downloadUrl) {\n\t\t\topenerService.open(URI.parse(productService.downloadUrl));\n\t\t}\n\t}\n}\n\nregisterAction2(DownloadAction);\nregisterAction2(CheckForUpdateAction);\nregisterAction2(DownloadUpdateAction);\nregisterAction2(InstallUpdateAction);\nregisterAction2(RestartToUpdateAction);\n\nif (isWindows) {\n\tclass DeveloperApplyUpdateAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: '_update.applyupdate',\n\t\t\t\ttitle: localize2('applyUpdate', 'Apply Update...'),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle)\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst updateService = accessor.get(IUpdateService);\n\t\t\tconst fileDialogService = accessor.get(IFileDialogService);\n\n\t\t\tconst updatePath = await fileDialogService.showOpenDialog({\n\t\t\t\ttitle: localize('pickUpdate', \"Apply Update\"),\n\t\t\t\tfilters: [{ name: 'Setup', extensions: ['exe'] }],\n\t\t\t\tcanSelectFiles: true,\n\t\t\t\topenLabel: mnemonicButtonLabel(localize({ key: 'updateButton', comment: ['&& denotes a mnemonic'] }, \"&&Update\"))\n\t\t\t});\n\n\t\t\tif (!updatePath || !updatePath[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait updateService._applySpecificUpdate(updatePath[0].fsPath);\n\t\t}\n\t}\n\n\tregisterAction2(DeveloperApplyUpdateAction);\n}\n"],
  "mappings": "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",
  "names": []
}
