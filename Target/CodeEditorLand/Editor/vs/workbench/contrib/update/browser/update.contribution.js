import"../../../../platform/update/common/update.config.contribution.js";import{localize as c,localize2 as n}from"../../../../nls.js";import{Registry as N}from"../../../../platform/registry/common/platform.js";import{Extensions as k}from"../../../common/contributions.js";import{Categories as x}from"../../../../platform/action/common/actionCommonCategories.js";import{MenuId as g,registerAction2 as i,Action2 as a}from"../../../../platform/actions/common/actions.js";import{ProductContribution as D,UpdateContribution as E,CONTEXT_UPDATE_STATE as l,SwitchProductQualityContribution as T,RELEASE_NOTES_URL as f,showReleaseNotesInEditor as y,DOWNLOAD_URL as U}from"./update.js";import{LifecyclePhase as S}from"../../../services/lifecycle/common/lifecycle.js";import t from"../../../../platform/product/common/product.js";import{IUpdateService as d,StateType as p}from"../../../../platform/update/common/update.js";import{IInstantiationService as A}from"../../../../platform/instantiation/common/instantiation.js";import{isWindows as F}from"../../../../base/common/platform.js";import{IFileDialogService as P}from"../../../../platform/dialogs/common/dialogs.js";import{mnemonicButtonLabel as W}from"../../../../base/common/labels.js";import{ShowCurrentReleaseNotesActionId as L,ShowCurrentReleaseNotesFromCurrentFileActionId as O}from"../common/update.js";import{IsWebContext as R}from"../../../../platform/contextkey/common/contextkeys.js";import{IOpenerService as C}from"../../../../platform/opener/common/opener.js";import{IProductService as h}from"../../../../platform/product/common/productService.js";import{URI as b}from"../../../../base/common/uri.js";import{ContextKeyExpr as I}from"../../../../platform/contextkey/common/contextkey.js";const v=N.as(k.Workbench);v.registerWorkbenchContribution(D,S.Restored),v.registerWorkbenchContribution(E,S.Restored),v.registerWorkbenchContribution(T,S.Restored);class _ extends a{constructor(){super({id:L,title:{...n("showReleaseNotes","Show Release Notes"),mnemonicTitle:c({key:"mshowReleaseNotes",comment:["&& denotes a mnemonic"]},"Show &&Release Notes")},category:{value:t.nameShort,original:t.nameShort},f1:!0,precondition:f,menu:[{id:g.MenubarHelpMenu,group:"1_welcome",order:5,when:f}]})}async run(e){const o=e.get(A),r=e.get(h),m=e.get(C);try{await y(o,r.version,!1)}catch{if(r.releaseNotesUrl)await m.open(b.parse(r.releaseNotesUrl));else throw new Error(c("update.noReleaseNotesOnline","This version of {0} does not have release notes online",r.nameLong))}}}class q extends a{constructor(){super({id:O,title:{...n("showReleaseNotesCurrentFile","Open Current File as Release Notes"),mnemonicTitle:c({key:"mshowReleaseNotes",comment:["&& denotes a mnemonic"]},"Show &&Release Notes")},category:n("developerCategory","Developer"),f1:!0})}async run(e){const o=e.get(A),r=e.get(h);try{await y(o,r.version,!0)}catch{throw new Error(c("releaseNotesFromFileNone","Cannot open the current file as Release Notes"))}}}i(_),i(q);class M extends a{constructor(){super({id:"update.checkForUpdate",title:n("checkForUpdates","Check for Updates..."),category:{value:t.nameShort,original:t.nameShort},f1:!0,precondition:l.isEqualTo(p.Idle)})}async run(e){return e.get(d).checkForUpdates(!0)}}class B extends a{constructor(){super({id:"update.downloadUpdate",title:n("downloadUpdate","Download Update"),category:{value:t.nameShort,original:t.nameShort},f1:!0,precondition:l.isEqualTo(p.AvailableForDownload)})}async run(e){await e.get(d).downloadUpdate()}}class z extends a{constructor(){super({id:"update.installUpdate",title:n("installUpdate","Install Update"),category:{value:t.nameShort,original:t.nameShort},f1:!0,precondition:l.isEqualTo(p.Downloaded)})}async run(e){await e.get(d).applyUpdate()}}class H extends a{constructor(){super({id:"update.restartToUpdate",title:n("restartToUpdate","Restart to Update"),category:{value:t.nameShort,original:t.nameShort},f1:!0,precondition:l.isEqualTo(p.Ready)})}async run(e){await e.get(d).quitAndInstall()}}class w extends a{static ID="workbench.action.download";constructor(){super({id:w.ID,title:n("openDownloadPage","Download {0}",t.nameLong),precondition:I.and(R,U),f1:!0,menu:[{id:g.StatusBarWindowIndicatorMenu,when:I.and(R,U)}]})}run(e){const o=e.get(h),r=e.get(C);o.downloadUrl&&r.open(b.parse(o.downloadUrl))}}if(i(w),i(M),i(B),i(z),i(H),F){class s extends a{constructor(){super({id:"_update.applyupdate",title:n("applyUpdate","Apply Update..."),category:x.Developer,f1:!0,precondition:l.isEqualTo(p.Idle)})}async run(o){const r=o.get(d),u=await o.get(P).showOpenDialog({title:c("pickUpdate","Apply Update"),filters:[{name:"Setup",extensions:["exe"]}],canSelectFiles:!0,openLabel:W(c({key:"updateButton",comment:["&& denotes a mnemonic"]},"&&Update"))});!u||!u[0]||await r._applySpecificUpdate(u[0].fsPath)}}i(s)}export{M as CheckForUpdateAction,_ as ShowCurrentReleaseNotesAction,q as ShowCurrentReleaseNotesFromCurrentFileAction};
