{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/update/browser/update.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../../base/common/actions.js\";\nimport { Promises } from \"../../../../base/common/async.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\tisMacintosh,\n\tisWeb,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport severity from \"../../../../base/common/severity.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tMenuRegistry,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IsWebContext } from \"../../../../platform/contextkey/common/contextkeys.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tDisablementReason,\n\ttype IUpdate,\n\tIUpdateService,\n\tStateType,\n\ttype State as UpdateState,\n} from \"../../../../platform/update/common/update.js\";\nimport {\n\tIUserDataSyncEnablementService,\n\tIUserDataSyncService,\n\tIUserDataSyncStoreManagementService,\n\tSyncStatus,\n\ttype UserDataSyncStoreType,\n} from \"../../../../platform/userDataSync/common/userDataSync.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tIActivityService,\n\ttype IBadge,\n\tNumberBadge,\n\tProgressBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { IUserDataSyncWorkbenchService } from \"../../../services/userDataSync/common/userDataSync.js\";\nimport { ReleaseNotesManager } from \"./releaseNotesEditor.js\";\n\nexport const CONTEXT_UPDATE_STATE = new RawContextKey<string>(\n\t\"updateState\",\n\tStateType.Uninitialized,\n);\nexport const MAJOR_MINOR_UPDATE_AVAILABLE = new RawContextKey<boolean>(\n\t\"majorMinorUpdateAvailable\",\n\tfalse,\n);\nexport const RELEASE_NOTES_URL = new RawContextKey<string>(\n\t\"releaseNotesUrl\",\n\t\"\",\n);\nexport const DOWNLOAD_URL = new RawContextKey<string>(\"downloadUrl\", \"\");\n\nlet releaseNotesManager: ReleaseNotesManager | undefined;\n\nexport function showReleaseNotesInEditor(\n\tinstantiationService: IInstantiationService,\n\tversion: string,\n\tuseCurrentFile: boolean,\n) {\n\tif (!releaseNotesManager) {\n\t\treleaseNotesManager =\n\t\t\tinstantiationService.createInstance(ReleaseNotesManager);\n\t}\n\n\treturn releaseNotesManager.show(version, useCurrentFile);\n}\n\nasync function openLatestReleaseNotesInBrowser(accessor: ServicesAccessor) {\n\tconst openerService = accessor.get(IOpenerService);\n\tconst productService = accessor.get(IProductService);\n\n\tif (productService.releaseNotesUrl) {\n\t\tconst uri = URI.parse(productService.releaseNotesUrl);\n\t\tawait openerService.open(uri);\n\t} else {\n\t\tthrow new Error(\n\t\t\tnls.localize(\n\t\t\t\t\"update.noReleaseNotesOnline\",\n\t\t\t\t\"This version of {0} does not have release notes online\",\n\t\t\t\tproductService.nameLong,\n\t\t\t),\n\t\t);\n\t}\n}\n\nasync function showReleaseNotes(accessor: ServicesAccessor, version: string) {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\ttry {\n\t\tawait showReleaseNotesInEditor(instantiationService, version, false);\n\t} catch (err) {\n\t\ttry {\n\t\t\tawait instantiationService.invokeFunction(\n\t\t\t\topenLatestReleaseNotesInBrowser,\n\t\t\t);\n\t\t} catch (err2) {\n\t\t\tthrow new Error(`${err.message} and ${err2.message}`);\n\t\t}\n\t}\n}\n\ninterface IVersion {\n\tmajor: number;\n\tminor: number;\n\tpatch: number;\n}\n\nfunction parseVersion(version: string): IVersion | undefined {\n\tconst match = /([0-9]+)\\.([0-9]+)\\.([0-9]+)/.exec(version);\n\n\tif (!match) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tmajor: Number.parseInt(match[1]),\n\t\tminor: Number.parseInt(match[2]),\n\t\tpatch: Number.parseInt(match[3]),\n\t};\n}\n\nfunction isMajorMinorUpdate(before: IVersion, after: IVersion): boolean {\n\treturn before.major < after.major || before.minor < after.minor;\n}\n\nexport class ProductContribution implements IWorkbenchContribution {\n\tprivate static readonly KEY = \"releaseNotes/lastVersion\";\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IProductService productService: IProductService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tif (productService.releaseNotesUrl) {\n\t\t\tconst releaseNotesUrlKey =\n\t\t\t\tRELEASE_NOTES_URL.bindTo(contextKeyService);\n\t\t\treleaseNotesUrlKey.set(productService.releaseNotesUrl);\n\t\t}\n\t\tif (productService.downloadUrl) {\n\t\t\tconst downloadUrlKey = DOWNLOAD_URL.bindTo(contextKeyService);\n\t\t\tdownloadUrlKey.set(productService.downloadUrl);\n\t\t}\n\n\t\tif (isWeb) {\n\t\t\treturn;\n\t\t}\n\n\t\thostService.hadLastFocus().then(async (hadLastFocus) => {\n\t\t\tif (!hadLastFocus) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastVersion = parseVersion(\n\t\t\t\tstorageService.get(\n\t\t\t\t\tProductContribution.KEY,\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\"\",\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst currentVersion = parseVersion(productService.version);\n\t\t\tconst shouldShowReleaseNotes =\n\t\t\t\tconfigurationService.getValue<boolean>(\n\t\t\t\t\t\"update.showReleaseNotes\",\n\t\t\t\t);\n\t\t\tconst releaseNotesUrl = productService.releaseNotesUrl;\n\n\t\t\t// was there a major/minor update? if so, open release notes\n\t\t\tif (\n\t\t\t\tshouldShowReleaseNotes &&\n\t\t\t\t!environmentService.skipReleaseNotes &&\n\t\t\t\treleaseNotesUrl &&\n\t\t\t\tlastVersion &&\n\t\t\t\tcurrentVersion &&\n\t\t\t\tisMajorMinorUpdate(lastVersion, currentVersion)\n\t\t\t) {\n\t\t\t\tshowReleaseNotesInEditor(\n\t\t\t\t\tinstantiationService,\n\t\t\t\t\tproductService.version,\n\t\t\t\t\tfalse,\n\t\t\t\t).then(undefined, () => {\n\t\t\t\t\tnotificationService.prompt(\n\t\t\t\t\t\tseverity.Info,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"read the release notes\",\n\t\t\t\t\t\t\t\"Welcome to {0} v{1}! Would you like to read the Release Notes?\",\n\t\t\t\t\t\t\tproductService.nameLong,\n\t\t\t\t\t\t\tproductService.version,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\"releaseNotes\",\n\t\t\t\t\t\t\t\t\t\"Release Notes\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\tconst uri = URI.parse(releaseNotesUrl);\n\t\t\t\t\t\t\t\t\topenerService.open(uri);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstorageService.store(\n\t\t\t\tProductContribution.KEY,\n\t\t\t\tproductService.version,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport class UpdateContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate state: UpdateState;\n\tprivate readonly badgeDisposable = this._register(new MutableDisposable());\n\tprivate updateStateContextKey: IContextKey<string>;\n\tprivate majorMinorUpdateAvailableContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IUpdateService private readonly updateService: IUpdateService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper();\n\t\tthis.state = updateService.state;\n\t\tthis.updateStateContextKey = CONTEXT_UPDATE_STATE.bindTo(this.contextKeyService);\n\t\tthis.majorMinorUpdateAvailableContextKey = MAJOR_MINOR_UPDATE_AVAILABLE.bindTo(this.contextKeyService);\n\n\t\tthis._register(updateService.onStateChange(this.onUpdateStateChange, this));\n\t\tthis.onUpdateStateChange(this.updateService.state);\n\n\t\t/*\n\t\tThe `update/lastKnownVersion` and `update/updateNotificationTime` storage keys are used in\n\t\tcombination to figure out when to show a message to the user that he should update.\n\n\t\tThis message should appear if the user has received an update notification but hasn't\n\t\tupdated since 5 days.\n\t\t*/\n\n\t\tconst currentVersion = this.productService.commit;\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.APPLICATION);\n\n\t\t// if current version != stored version, clear both fields\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.remove('update/lastKnownVersion', StorageScope.APPLICATION);\n\t\t\tthis.storageService.remove('update/updateNotificationTime', StorageScope.APPLICATION);\n\t\t}\n\n\t\tthis.registerGlobalActivityActions();\n\t}\n\n\tprivate async onUpdateStateChange(state: UpdateState): Promise<void> {\n\t\tthis.updateStateContextKey.set(state.type);\n\n\t\tswitch (state.type) {\n\t\t\tcase StateType.Disabled:\n\t\t\t\tif (state.reason === DisablementReason.RunningAsAdmin) {\n\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\"update service disabled\",\n\t\t\t\t\t\t\t\"Updates are disabled because you are running the user-scope installation of {0} as Administrator.\",\n\t\t\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\tnls.localize(\"learn more\", \"Learn More\"),\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\tthis.openerService.open(\n\t\t\t\t\t\t\t\t\t\t\t\"https://aka.ms/vscode-windows-setup\",\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tneverShowAgain: { id: \"no-updates-running-as-admin\" },\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Idle:\n\t\t\t\tif (state.error) {\n\t\t\t\t\tthis.onError(state.error);\n\t\t\t\t} else if (\n\t\t\t\t\tthis.state.type === StateType.CheckingForUpdates &&\n\t\t\t\t\tthis.state.explicit &&\n\t\t\t\t\t(await this.hostService.hadLastFocus())\n\t\t\t\t) {\n\t\t\t\t\tthis.onUpdateNotAvailable();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.AvailableForDownload:\n\t\t\t\tthis.onUpdateAvailable(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Downloaded:\n\t\t\t\tthis.onUpdateDownloaded(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Ready: {\n\t\t\t\tconst productVersion = state.update.productVersion;\n\t\t\t\tif (productVersion) {\n\t\t\t\t\tconst currentVersion = parseVersion(\n\t\t\t\t\t\tthis.productService.version,\n\t\t\t\t\t);\n\t\t\t\t\tconst nextVersion = parseVersion(productVersion);\n\t\t\t\t\tthis.majorMinorUpdateAvailableContextKey.set(\n\t\t\t\t\t\tBoolean(\n\t\t\t\t\t\t\tcurrentVersion &&\n\t\t\t\t\t\t\t\tnextVersion &&\n\t\t\t\t\t\t\t\tisMajorMinorUpdate(currentVersion, nextVersion),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis.onUpdateReady(state.update);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet badge: IBadge | undefined;\n\t\tlet priority: number | undefined;\n\n\t\tif (\n\t\t\tstate.type === StateType.AvailableForDownload ||\n\t\t\tstate.type === StateType.Downloaded ||\n\t\t\tstate.type === StateType.Ready\n\t\t) {\n\t\t\tbadge = new NumberBadge(1, () =>\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"updateIsReady\",\n\t\t\t\t\t\"New {0} update available.\",\n\t\t\t\t\tthis.productService.nameShort,\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (state.type === StateType.CheckingForUpdates) {\n\t\t\tbadge = new ProgressBadge(() =>\n\t\t\t\tnls.localize(\"checkingForUpdates\", \"Checking for Updates...\"),\n\t\t\t);\n\t\t\tpriority = 1;\n\t\t} else if (state.type === StateType.Downloading) {\n\t\t\tbadge = new ProgressBadge(() =>\n\t\t\t\tnls.localize(\"downloading\", \"Downloading...\"),\n\t\t\t);\n\t\t\tpriority = 1;\n\t\t} else if (state.type === StateType.Updating) {\n\t\t\tbadge = new ProgressBadge(() =>\n\t\t\t\tnls.localize(\"updating\", \"Updating...\"),\n\t\t\t);\n\t\t\tpriority = 1;\n\t\t}\n\n\t\tthis.badgeDisposable.clear();\n\n\t\tif (badge) {\n\t\t\tthis.badgeDisposable.value =\n\t\t\t\tthis.activityService.showGlobalActivity({ badge, priority });\n\t\t}\n\n\t\tthis.state = state;\n\t}\n\n\tprivate onError(error: string): void {\n\t\tif (\n\t\t\t/The request timed out|The network connection was lost/i.test(error)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\terror = error.replace(\n\t\t\t/See https:\\/\\/github\\.com\\/Squirrel\\/Squirrel\\.Mac\\/issues\\/182 for more information/,\n\t\t\t\"This might mean the application was put on quarantine by macOS. See [this link](https://github.com/microsoft/vscode/issues/7426#issuecomment-425093469) for more information\",\n\t\t);\n\n\t\tthis.notificationService.notify({\n\t\t\tseverity: Severity.Error,\n\t\t\tmessage: error,\n\t\t\tsource: nls.localize(\"update service\", \"Update Service\"),\n\t\t});\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tthis.dialogService.info(\n\t\t\tnls.localize(\n\t\t\t\t\"noUpdatesAvailable\",\n\t\t\t\t\"There are currently no updates available.\",\n\t\t\t),\n\t\t);\n\t}\n\n\t// linux\n\tprivate onUpdateAvailable(update: IUpdate): void {\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst productVersion = update.productVersion;\n\t\tif (!productVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize(\n\t\t\t\t\"thereIsUpdateAvailable\",\n\t\t\t\t\"There is an available update.\",\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"download update\", \"Download Update\"),\n\t\t\t\t\trun: () => this.updateService.downloadUpdate(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"later\", \"Later\"),\n\t\t\t\t\trun: () => {},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"releaseNotes\", \"Release Notes\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\t\t\tshowReleaseNotes(accessor, productVersion),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\t}\n\n\t// windows fast updates\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (isMacintosh) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tthis.configurationService.getValue(\n\t\t\t\t\"update.enableWindowsBackgroundUpdates\",\n\t\t\t) &&\n\t\t\tthis.productService.target === \"user\"\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst productVersion = update.productVersion;\n\t\tif (!productVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize(\n\t\t\t\t\"updateAvailable\",\n\t\t\t\t\"There's an update available: {0} {1}\",\n\t\t\t\tthis.productService.nameLong,\n\t\t\t\tproductVersion,\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"installUpdate\", \"Install Update\"),\n\t\t\t\t\trun: () => this.updateService.applyUpdate(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"later\", \"Later\"),\n\t\t\t\t\trun: () => {},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"releaseNotes\", \"Release Notes\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\t\t\tshowReleaseNotes(accessor, productVersion),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\t}\n\n\t// windows and mac\n\tprivate onUpdateReady(update: IUpdate): void {\n\t\tif (\n\t\t\t!(isWindows && this.productService.target !== \"user\") &&\n\t\t\t!this.shouldShowNotification()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = [\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\"updateNow\", \"Update Now\"),\n\t\t\t\trun: () => this.updateService.quitAndInstall(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\"later\", \"Later\"),\n\t\t\t\trun: () => {},\n\t\t\t},\n\t\t];\n\n\t\tconst productVersion = update.productVersion;\n\t\tif (productVersion) {\n\t\t\tactions.push({\n\t\t\t\tlabel: nls.localize(\"releaseNotes\", \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\t\tshowReleaseNotes(accessor, productVersion),\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// windows user fast updates and mac\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize(\n\t\t\t\t\"updateAvailableAfterRestart\",\n\t\t\t\t\"Restart {0} to apply the latest update.\",\n\t\t\t\tthis.productService.nameLong,\n\t\t\t),\n\t\t\tactions,\n\t\t\t{ sticky: true },\n\t\t);\n\t}\n\n\tprivate shouldShowNotification(): boolean {\n\t\tconst currentVersion = this.productService.commit;\n\t\tconst currentMillis = new Date().getTime();\n\t\tconst lastKnownVersion = this.storageService.get(\n\t\t\t\"update/lastKnownVersion\",\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\n\t\t// if version != stored version, save version and date\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.store(\n\t\t\t\t\"update/lastKnownVersion\",\n\t\t\t\tcurrentVersion,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t\tthis.storageService.store(\n\t\t\t\t\"update/updateNotificationTime\",\n\t\t\t\tcurrentMillis,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\n\t\tconst updateNotificationMillis = this.storageService.getNumber(\n\t\t\t\"update/updateNotificationTime\",\n\t\t\tStorageScope.APPLICATION,\n\t\t\tcurrentMillis,\n\t\t);\n\t\tconst diffDays =\n\t\t\t(currentMillis - updateNotificationMillis) / (1000 * 60 * 60 * 24);\n\n\t\treturn diffDays > 5;\n\t}\n\n\tprivate registerGlobalActivityActions(): void {\n\t\tCommandsRegistry.registerCommand(\"update.check\", () =>\n\t\t\tthis.updateService.checkForUpdates(true),\n\t\t);\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\tcommand: {\n\t\t\t\tid: \"update.check\",\n\t\t\t\ttitle: nls.localize(\"checkForUpdates\", \"Check for Updates...\"),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle),\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\"update.checking\", () => {});\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\tcommand: {\n\t\t\t\tid: \"update.checking\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\"checkingForUpdates\",\n\t\t\t\t\t\"Checking for Updates...\",\n\t\t\t\t),\n\t\t\t\tprecondition: ContextKeyExpr.false(),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.CheckingForUpdates),\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\"update.downloadNow\", () =>\n\t\t\tthis.updateService.downloadUpdate(),\n\t\t);\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\tcommand: {\n\t\t\t\tid: \"update.downloadNow\",\n\t\t\t\ttitle: nls.localize(\"download update_1\", \"Download Update (1)\"),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(\n\t\t\t\tStateType.AvailableForDownload,\n\t\t\t),\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\"update.downloading\", () => {});\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\tcommand: {\n\t\t\t\tid: \"update.downloading\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\"DownloadingUpdate\",\n\t\t\t\t\t\"Downloading Update...\",\n\t\t\t\t),\n\t\t\t\tprecondition: ContextKeyExpr.false(),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloading),\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\"update.install\", () =>\n\t\t\tthis.updateService.applyUpdate(),\n\t\t);\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\tcommand: {\n\t\t\t\tid: \"update.install\",\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\"installUpdate...\",\n\t\t\t\t\t\"Install Update... (1)\",\n\t\t\t\t),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloaded),\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\"update.updating\", () => {});\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\tcommand: {\n\t\t\t\tid: \"update.updating\",\n\t\t\t\ttitle: nls.localize(\"installingUpdate\", \"Installing Update...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false(),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Updating),\n\t\t});\n\n\t\tif (this.productService.quality === \"stable\") {\n\t\t\tCommandsRegistry.registerCommand(\n\t\t\t\t\"update.showUpdateReleaseNotes\",\n\t\t\t\t() => {\n\t\t\t\t\tif (this.updateService.state.type !== StateType.Ready) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst productVersion =\n\t\t\t\t\t\tthis.updateService.state.update.productVersion;\n\t\t\t\t\tif (productVersion) {\n\t\t\t\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\t\t\tshowReleaseNotes(accessor, productVersion),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\t\tgroup: \"7_update\",\n\t\t\t\torder: 1,\n\t\t\t\tcommand: {\n\t\t\t\t\tid: \"update.showUpdateReleaseNotes\",\n\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\"showUpdateReleaseNotes\",\n\t\t\t\t\t\t\"Show Update Release Notes\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tCONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready),\n\t\t\t\t\tMAJOR_MINOR_UPDATE_AVAILABLE,\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\tCommandsRegistry.registerCommand(\"update.restart\", () =>\n\t\t\tthis.updateService.quitAndInstall(),\n\t\t);\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: \"7_update\",\n\t\t\torder: 2,\n\t\t\tcommand: {\n\t\t\t\tid: \"update.restart\",\n\t\t\t\ttitle: nls.localize(\"restartToUpdate\", \"Restart to Update (1)\"),\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready),\n\t\t});\n\n\t\tCommandsRegistry.registerCommand(\"_update.state\", () => {\n\t\t\treturn this.state;\n\t\t});\n\t}\n}\n\nexport class SwitchProductQualityContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerGlobalActivityActions();\n\t}\n\n\tprivate registerGlobalActivityActions(): void {\n\t\tconst quality = this.productService.quality;\n\t\tconst productQualityChangeHandler =\n\t\t\tthis.environmentService.options?.productQualityChangeHandler;\n\t\tif (\n\t\t\tproductQualityChangeHandler &&\n\t\t\t(quality === \"stable\" || quality === \"insider\")\n\t\t) {\n\t\t\tconst newQuality = quality === \"stable\" ? \"insider\" : \"stable\";\n\t\t\tconst commandId = `update.switchQuality.${newQuality}`;\n\t\t\tconst isSwitchingToInsiders = newQuality === \"insider\";\n\t\t\tthis._register(\n\t\t\t\tregisterAction2(\n\t\t\t\t\tclass SwitchQuality extends Action2 {\n\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\t\t\ttitle: isSwitchingToInsiders\n\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"switchToInsiders\",\n\t\t\t\t\t\t\t\t\t\t\t\"Switch to Insiders Version...\",\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"switchToStable\",\n\t\t\t\t\t\t\t\t\t\t\t\"Switch to Stable Version...\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tprecondition: IsWebContext,\n\t\t\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\t\t\tid: MenuId.GlobalActivity,\n\t\t\t\t\t\t\t\t\twhen: IsWebContext,\n\t\t\t\t\t\t\t\t\tgroup: \"7_update\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\t\t\tconst userDataSyncEnablementService = accessor.get(\n\t\t\t\t\t\t\t\tIUserDataSyncEnablementService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst userDataSyncStoreManagementService =\n\t\t\t\t\t\t\t\taccessor.get(\n\t\t\t\t\t\t\t\t\tIUserDataSyncStoreManagementService,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst storageService =\n\t\t\t\t\t\t\t\taccessor.get(IStorageService);\n\t\t\t\t\t\t\tconst userDataSyncWorkbenchService = accessor.get(\n\t\t\t\t\t\t\t\tIUserDataSyncWorkbenchService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst userDataSyncService =\n\t\t\t\t\t\t\t\taccessor.get(IUserDataSyncService);\n\t\t\t\t\t\t\tconst notificationService =\n\t\t\t\t\t\t\t\taccessor.get(INotificationService);\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst selectSettingsSyncServiceDialogShownKey =\n\t\t\t\t\t\t\t\t\t\"switchQuality.selectSettingsSyncServiceDialogShown\";\n\t\t\t\t\t\t\t\tconst userDataSyncStore =\n\t\t\t\t\t\t\t\t\tuserDataSyncStoreManagementService.userDataSyncStore;\n\t\t\t\t\t\t\t\tlet userDataSyncStoreType:\n\t\t\t\t\t\t\t\t\t| UserDataSyncStoreType\n\t\t\t\t\t\t\t\t\t| undefined;\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tuserDataSyncStore &&\n\t\t\t\t\t\t\t\t\tisSwitchingToInsiders &&\n\t\t\t\t\t\t\t\t\tuserDataSyncEnablementService.isEnabled() &&\n\t\t\t\t\t\t\t\t\t!storageService.getBoolean(\n\t\t\t\t\t\t\t\t\t\tselectSettingsSyncServiceDialogShownKey,\n\t\t\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tuserDataSyncStoreType =\n\t\t\t\t\t\t\t\t\t\tawait this.selectSettingsSyncService(\n\t\t\t\t\t\t\t\t\t\t\tdialogService,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (!userDataSyncStoreType) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\t\t\t\tselectSettingsSyncServiceDialogShownKey,\n\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (userDataSyncStoreType === \"stable\") {\n\t\t\t\t\t\t\t\t\t\t// Update the stable service type in the current window, so that it uses stable service after switched to insiders version (after reload).\n\t\t\t\t\t\t\t\t\t\tawait userDataSyncStoreManagementService.switch(\n\t\t\t\t\t\t\t\t\t\t\tuserDataSyncStoreType,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst res = await dialogService.confirm({\n\t\t\t\t\t\t\t\t\ttype: \"info\",\n\t\t\t\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"relaunchMessage\",\n\t\t\t\t\t\t\t\t\t\t\"Changing the version requires a reload to take effect\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tdetail:\n\t\t\t\t\t\t\t\t\t\tnewQuality === \"insider\"\n\t\t\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"relaunchDetailInsiders\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Press the reload button to switch to the Insiders version of VS Code.\",\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"relaunchDetailStable\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Press the reload button to switch to the Stable version of VS Code.\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkey: \"reload\",\n\t\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"&&Reload\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\t\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\t\t\t\t\t\t\t// If sync is happening wait until it is finished before reload\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tuserDataSyncService.status ===\n\t\t\t\t\t\t\t\t\t\tSyncStatus.Syncing\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\tEvent.toPromise(\n\t\t\t\t\t\t\t\t\t\t\t\tEvent.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\tuserDataSyncService.onDidChangeStatus,\n\t\t\t\t\t\t\t\t\t\t\t\t\t(status) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstatus !==\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSyncStatus.Syncing,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// If user chose the sync service then synchronise the store type option in insiders service, so that other clients using insiders service are also updated.\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tisSwitchingToInsiders &&\n\t\t\t\t\t\t\t\t\t\tuserDataSyncStoreType\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\tuserDataSyncWorkbenchService.synchroniseUserDataSyncStoreType(),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tawait Promises.settled(promises);\n\n\t\t\t\t\t\t\t\t\tproductQualityChangeHandler(newQuality);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Reset\n\t\t\t\t\t\t\t\t\tif (userDataSyncStoreType) {\n\t\t\t\t\t\t\t\t\t\tstorageService.remove(\n\t\t\t\t\t\t\t\t\t\t\tselectSettingsSyncServiceDialogShownKey,\n\t\t\t\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tnotificationService.error(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprivate async selectSettingsSyncService(\n\t\t\t\t\t\t\tdialogService: IDialogService,\n\t\t\t\t\t\t): Promise<UserDataSyncStoreType | undefined> {\n\t\t\t\t\t\t\tconst { result } =\n\t\t\t\t\t\t\t\tawait dialogService.prompt<UserDataSyncStoreType>(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: Severity.Info,\n\t\t\t\t\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"selectSyncService.message\",\n\t\t\t\t\t\t\t\t\t\t\t\"Choose the settings sync service to use after changing the version\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tdetail: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"selectSyncService.detail\",\n\t\t\t\t\t\t\t\t\t\t\t\"The Insiders version of VS Code will synchronize your settings, keybindings, extensions, snippets and UI State using separate insiders settings sync service by default.\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"use insiders\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"&&Insiders\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\trun: () => \"insiders\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"use stable\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"&&Stable (current)\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\trun: () => \"stable\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tcancelButton: true,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
