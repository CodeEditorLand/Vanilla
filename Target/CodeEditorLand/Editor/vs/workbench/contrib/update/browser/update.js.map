{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/update/browser/update.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport severity from '../../../../base/common/severity.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IActivityService, NumberBadge, IBadge, ProgressBadge } from '../../../services/activity/common/activity.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUpdateService, State as UpdateState, StateType, IUpdate, DisablementReason } from '../../../../platform/update/common/update.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';\nimport { ReleaseNotesManager } from './releaseNotesEditor.js';\nimport { isMacintosh, isWeb, isWindows } from '../../../../base/common/platform.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { RawContextKey, IContextKey, IContextKeyService, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { MenuRegistry, MenuId, registerAction2, Action2 } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IUserDataSyncEnablementService, IUserDataSyncService, IUserDataSyncStoreManagementService, SyncStatus, UserDataSyncStoreType } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { Promises } from '../../../../base/common/async.js';\nimport { IUserDataSyncWorkbenchService } from '../../../services/userDataSync/common/userDataSync.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Action } from '../../../../base/common/actions.js';\n\nexport const CONTEXT_UPDATE_STATE = new RawContextKey<string>('updateState', StateType.Uninitialized);\nexport const MAJOR_MINOR_UPDATE_AVAILABLE = new RawContextKey<boolean>('majorMinorUpdateAvailable', false);\nexport const RELEASE_NOTES_URL = new RawContextKey<string>('releaseNotesUrl', '');\nexport const DOWNLOAD_URL = new RawContextKey<string>('downloadUrl', '');\n\nlet releaseNotesManager: ReleaseNotesManager | undefined = undefined;\n\nexport function showReleaseNotesInEditor(instantiationService: IInstantiationService, version: string, useCurrentFile: boolean) {\n\tif (!releaseNotesManager) {\n\t\treleaseNotesManager = instantiationService.createInstance(ReleaseNotesManager);\n\t}\n\n\treturn releaseNotesManager.show(version, useCurrentFile);\n}\n\nasync function openLatestReleaseNotesInBrowser(accessor: ServicesAccessor) {\n\tconst openerService = accessor.get(IOpenerService);\n\tconst productService = accessor.get(IProductService);\n\n\tif (productService.releaseNotesUrl) {\n\t\tconst uri = URI.parse(productService.releaseNotesUrl);\n\t\tawait openerService.open(uri);\n\t} else {\n\t\tthrow new Error(nls.localize('update.noReleaseNotesOnline', \"This version of {0} does not have release notes online\", productService.nameLong));\n\t}\n}\n\nasync function showReleaseNotes(accessor: ServicesAccessor, version: string) {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\ttry {\n\t\tawait showReleaseNotesInEditor(instantiationService, version, false);\n\t} catch (err) {\n\t\ttry {\n\t\t\tawait instantiationService.invokeFunction(openLatestReleaseNotesInBrowser);\n\t\t} catch (err2) {\n\t\t\tthrow new Error(`${err.message} and ${err2.message}`);\n\t\t}\n\t}\n}\n\ninterface IVersion {\n\tmajor: number;\n\tminor: number;\n\tpatch: number;\n}\n\nfunction parseVersion(version: string): IVersion | undefined {\n\tconst match = /([0-9]+)\\.([0-9]+)\\.([0-9]+)/.exec(version);\n\n\tif (!match) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tmajor: parseInt(match[1]),\n\t\tminor: parseInt(match[2]),\n\t\tpatch: parseInt(match[3])\n\t};\n}\n\nfunction isMajorMinorUpdate(before: IVersion, after: IVersion): boolean {\n\treturn before.major < after.major || before.minor < after.minor;\n}\n\nexport class ProductContribution implements IWorkbenchContribution {\n\n\tprivate static readonly KEY = 'releaseNotes/lastVersion';\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IProductService productService: IProductService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tif (productService.releaseNotesUrl) {\n\t\t\tconst releaseNotesUrlKey = RELEASE_NOTES_URL.bindTo(contextKeyService);\n\t\t\treleaseNotesUrlKey.set(productService.releaseNotesUrl);\n\t\t}\n\t\tif (productService.downloadUrl) {\n\t\t\tconst downloadUrlKey = DOWNLOAD_URL.bindTo(contextKeyService);\n\t\t\tdownloadUrlKey.set(productService.downloadUrl);\n\t\t}\n\n\t\tif (isWeb) {\n\t\t\treturn;\n\t\t}\n\n\t\thostService.hadLastFocus().then(async hadLastFocus => {\n\t\t\tif (!hadLastFocus) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst lastVersion = parseVersion(storageService.get(ProductContribution.KEY, StorageScope.APPLICATION, ''));\n\t\t\tconst currentVersion = parseVersion(productService.version);\n\t\t\tconst shouldShowReleaseNotes = configurationService.getValue<boolean>('update.showReleaseNotes');\n\t\t\tconst releaseNotesUrl = productService.releaseNotesUrl;\n\n\t\t\t// was there a major/minor update? if so, open release notes\n\t\t\tif (shouldShowReleaseNotes && !environmentService.skipReleaseNotes && releaseNotesUrl && lastVersion && currentVersion && isMajorMinorUpdate(lastVersion, currentVersion)) {\n\t\t\t\tshowReleaseNotesInEditor(instantiationService, productService.version, false)\n\t\t\t\t\t.then(undefined, () => {\n\t\t\t\t\t\tnotificationService.prompt(\n\t\t\t\t\t\t\tseverity.Info,\n\t\t\t\t\t\t\tnls.localize('read the release notes', \"Welcome to {0} v{1}! Would you like to read the Release Notes?\", productService.nameLong, productService.version),\n\t\t\t\t\t\t\t[{\n\t\t\t\t\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\tconst uri = URI.parse(releaseNotesUrl);\n\t\t\t\t\t\t\t\t\topenerService.open(uri);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tstorageService.store(ProductContribution.KEY, productService.version, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t});\n\t}\n}\n\nexport class UpdateContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate state: UpdateState;\n\tprivate readonly badgeDisposable = this._register(new MutableDisposable());\n\tprivate updateStateContextKey: IContextKey<string>;\n\tprivate majorMinorUpdateAvailableContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IUpdateService private readonly updateService: IUpdateService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper();\n\t\tthis.state = updateService.state;\n\t\tthis.updateStateContextKey = CONTEXT_UPDATE_STATE.bindTo(this.contextKeyService);\n\t\tthis.majorMinorUpdateAvailableContextKey = MAJOR_MINOR_UPDATE_AVAILABLE.bindTo(this.contextKeyService);\n\n\t\tthis._register(updateService.onStateChange(this.onUpdateStateChange, this));\n\t\tthis.onUpdateStateChange(this.updateService.state);\n\n\t\t/*\n\t\tThe `update/lastKnownVersion` and `update/updateNotificationTime` storage keys are used in\n\t\tcombination to figure out when to show a message to the user that he should update.\n\n\t\tThis message should appear if the user has received an update notification but hasn't\n\t\tupdated since 5 days.\n\t\t*/\n\n\t\tconst currentVersion = this.productService.commit;\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.APPLICATION);\n\n\t\t// if current version != stored version, clear both fields\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.remove('update/lastKnownVersion', StorageScope.APPLICATION);\n\t\t\tthis.storageService.remove('update/updateNotificationTime', StorageScope.APPLICATION);\n\t\t}\n\n\t\tthis.registerGlobalActivityActions();\n\t}\n\n\tprivate async onUpdateStateChange(state: UpdateState): Promise<void> {\n\t\tthis.updateStateContextKey.set(state.type);\n\n\t\tswitch (state.type) {\n\t\t\tcase StateType.Disabled:\n\t\t\t\tif (state.reason === DisablementReason.RunningAsAdmin) {\n\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\tmessage: nls.localize('update service disabled', \"Updates are disabled because you are running the user-scope installation of {0} as Administrator.\", this.productService.nameLong),\n\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\tnew Action('', nls.localize('learn more', \"Learn More\"), undefined, undefined, () => {\n\t\t\t\t\t\t\t\t\tthis.openerService.open('https://aka.ms/vscode-windows-setup');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tneverShowAgain: { id: 'no-updates-running-as-admin', }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Idle:\n\t\t\t\tif (state.error) {\n\t\t\t\t\tthis.onError(state.error);\n\t\t\t\t} else if (this.state.type === StateType.CheckingForUpdates && this.state.explicit && await this.hostService.hadLastFocus()) {\n\t\t\t\t\tthis.onUpdateNotAvailable();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.AvailableForDownload:\n\t\t\t\tthis.onUpdateAvailable(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Downloaded:\n\t\t\t\tthis.onUpdateDownloaded(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Ready: {\n\t\t\t\tconst productVersion = state.update.productVersion;\n\t\t\t\tif (productVersion) {\n\t\t\t\t\tconst currentVersion = parseVersion(this.productService.version);\n\t\t\t\t\tconst nextVersion = parseVersion(productVersion);\n\t\t\t\t\tthis.majorMinorUpdateAvailableContextKey.set(Boolean(currentVersion && nextVersion && isMajorMinorUpdate(currentVersion, nextVersion)));\n\t\t\t\t\tthis.onUpdateReady(state.update);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet badge: IBadge | undefined = undefined;\n\t\tlet priority: number | undefined = undefined;\n\n\t\tif (state.type === StateType.AvailableForDownload || state.type === StateType.Downloaded || state.type === StateType.Ready) {\n\t\t\tbadge = new NumberBadge(1, () => nls.localize('updateIsReady', \"New {0} update available.\", this.productService.nameShort));\n\t\t} else if (state.type === StateType.CheckingForUpdates) {\n\t\t\tbadge = new ProgressBadge(() => nls.localize('checkingForUpdates', \"Checking for Updates...\"));\n\t\t\tpriority = 1;\n\t\t} else if (state.type === StateType.Downloading) {\n\t\t\tbadge = new ProgressBadge(() => nls.localize('downloading', \"Downloading...\"));\n\t\t\tpriority = 1;\n\t\t} else if (state.type === StateType.Updating) {\n\t\t\tbadge = new ProgressBadge(() => nls.localize('updating', \"Updating...\"));\n\t\t\tpriority = 1;\n\t\t}\n\n\t\tthis.badgeDisposable.clear();\n\n\t\tif (badge) {\n\t\t\tthis.badgeDisposable.value = this.activityService.showGlobalActivity({ badge, priority });\n\t\t}\n\n\t\tthis.state = state;\n\t}\n\n\tprivate onError(error: string): void {\n\t\tif (/The request timed out|The network connection was lost/i.test(error)) {\n\t\t\treturn;\n\t\t}\n\n\t\terror = error.replace(/See https:\\/\\/github\\.com\\/Squirrel\\/Squirrel\\.Mac\\/issues\\/182 for more information/, 'This might mean the application was put on quarantine by macOS. See [this link](https://github.com/microsoft/vscode/issues/7426#issuecomment-425093469) for more information');\n\n\t\tthis.notificationService.notify({\n\t\t\tseverity: Severity.Error,\n\t\t\tmessage: error,\n\t\t\tsource: nls.localize('update service', \"Update Service\"),\n\t\t});\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tthis.dialogService.info(nls.localize('noUpdatesAvailable', \"There are currently no updates available.\"));\n\t}\n\n\t// linux\n\tprivate onUpdateAvailable(update: IUpdate): void {\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst productVersion = update.productVersion;\n\t\tif (!productVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('thereIsUpdateAvailable', \"There is an available update.\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('download update', \"Download Update\"),\n\t\t\t\trun: () => this.updateService.downloadUpdate()\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\t\trun: () => { }\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.instantiationService.invokeFunction(accessor => showReleaseNotes(accessor, productVersion));\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\t}\n\n\t// windows fast updates\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (isMacintosh) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.configurationService.getValue('update.enableWindowsBackgroundUpdates') && this.productService.target === 'user') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst productVersion = update.productVersion;\n\t\tif (!productVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateAvailable', \"There's an update available: {0} {1}\", this.productService.nameLong, productVersion),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('installUpdate', \"Install Update\"),\n\t\t\t\trun: () => this.updateService.applyUpdate()\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\t\trun: () => { }\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.instantiationService.invokeFunction(accessor => showReleaseNotes(accessor, productVersion));\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\t}\n\n\t// windows and mac\n\tprivate onUpdateReady(update: IUpdate): void {\n\t\tif (!(isWindows && this.productService.target !== 'user') && !this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = [{\n\t\t\tlabel: nls.localize('updateNow', \"Update Now\"),\n\t\t\trun: () => this.updateService.quitAndInstall()\n\t\t}, {\n\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\trun: () => { }\n\t\t}];\n\n\t\tconst productVersion = update.productVersion;\n\t\tif (productVersion) {\n\t\t\tactions.push({\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.instantiationService.invokeFunction(accessor => showReleaseNotes(accessor, productVersion));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// windows user fast updates and mac\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateAvailableAfterRestart', \"Restart {0} to apply the latest update.\", this.productService.nameLong),\n\t\t\tactions,\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\tprivate shouldShowNotification(): boolean {\n\t\tconst currentVersion = this.productService.commit;\n\t\tconst currentMillis = new Date().getTime();\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.APPLICATION);\n\n\t\t// if version != stored version, save version and date\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.store('update/lastKnownVersion', currentVersion, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\tthis.storageService.store('update/updateNotificationTime', currentMillis, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\n\t\tconst updateNotificationMillis = this.storageService.getNumber('update/updateNotificationTime', StorageScope.APPLICATION, currentMillis);\n\t\tconst diffDays = (currentMillis - updateNotificationMillis) / (1000 * 60 * 60 * 24);\n\n\t\treturn diffDays > 5;\n\t}\n\n\tprivate registerGlobalActivityActions(): void {\n\t\tCommandsRegistry.registerCommand('update.check', () => this.updateService.checkForUpdates(true));\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.check',\n\t\t\t\ttitle: nls.localize('checkForUpdates', \"Check for Updates...\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.checking', () => { });\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.checking',\n\t\t\t\ttitle: nls.localize('checkingForUpdates', \"Checking for Updates...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.CheckingForUpdates)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.downloadNow', () => this.updateService.downloadUpdate());\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.downloadNow',\n\t\t\t\ttitle: nls.localize('download update_1', \"Download Update (1)\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.AvailableForDownload)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.downloading', () => { });\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.downloading',\n\t\t\t\ttitle: nls.localize('DownloadingUpdate', \"Downloading Update...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloading)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.install', () => this.updateService.applyUpdate());\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.install',\n\t\t\t\ttitle: nls.localize('installUpdate...', \"Install Update... (1)\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloaded)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('update.updating', () => { });\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\tcommand: {\n\t\t\t\tid: 'update.updating',\n\t\t\t\ttitle: nls.localize('installingUpdate', \"Installing Update...\"),\n\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Updating)\n\t\t});\n\n\t\tif (this.productService.quality === 'stable') {\n\t\t\tCommandsRegistry.registerCommand('update.showUpdateReleaseNotes', () => {\n\t\t\t\tif (this.updateService.state.type !== StateType.Ready) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst productVersion = this.updateService.state.update.productVersion;\n\t\t\t\tif (productVersion) {\n\t\t\t\t\tthis.instantiationService.invokeFunction(accessor => showReleaseNotes(accessor, productVersion));\n\t\t\t\t}\n\n\t\t\t});\n\t\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\t\tgroup: '7_update',\n\t\t\t\torder: 1,\n\t\t\t\tcommand: {\n\t\t\t\t\tid: 'update.showUpdateReleaseNotes',\n\t\t\t\t\ttitle: nls.localize('showUpdateReleaseNotes', \"Show Update Release Notes\")\n\t\t\t\t},\n\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready), MAJOR_MINOR_UPDATE_AVAILABLE)\n\t\t\t});\n\t\t}\n\n\t\tCommandsRegistry.registerCommand('update.restart', () => this.updateService.quitAndInstall());\n\t\tMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\t\t\tgroup: '7_update',\n\t\t\torder: 2,\n\t\t\tcommand: {\n\t\t\t\tid: 'update.restart',\n\t\t\t\ttitle: nls.localize('restartToUpdate', \"Restart to Update (1)\")\n\t\t\t},\n\t\t\twhen: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready)\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('_update.state', () => {\n\t\t\treturn this.state;\n\t\t});\n\t}\n}\n\nexport class SwitchProductQualityContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerGlobalActivityActions();\n\t}\n\n\tprivate registerGlobalActivityActions(): void {\n\t\tconst quality = this.productService.quality;\n\t\tconst productQualityChangeHandler = this.environmentService.options?.productQualityChangeHandler;\n\t\tif (productQualityChangeHandler && (quality === 'stable' || quality === 'insider')) {\n\t\t\tconst newQuality = quality === 'stable' ? 'insider' : 'stable';\n\t\t\tconst commandId = `update.switchQuality.${newQuality}`;\n\t\t\tconst isSwitchingToInsiders = newQuality === 'insider';\n\t\t\tthis._register(registerAction2(class SwitchQuality extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\ttitle: isSwitchingToInsiders ? nls.localize('switchToInsiders', \"Switch to Insiders Version...\") : nls.localize('switchToStable', \"Switch to Stable Version...\"),\n\t\t\t\t\t\tprecondition: IsWebContext,\n\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\tid: MenuId.GlobalActivity,\n\t\t\t\t\t\t\twhen: IsWebContext,\n\t\t\t\t\t\t\tgroup: '7_update',\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\tconst userDataSyncEnablementService = accessor.get(IUserDataSyncEnablementService);\n\t\t\t\t\tconst userDataSyncStoreManagementService = accessor.get(IUserDataSyncStoreManagementService);\n\t\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\t\tconst userDataSyncWorkbenchService = accessor.get(IUserDataSyncWorkbenchService);\n\t\t\t\t\tconst userDataSyncService = accessor.get(IUserDataSyncService);\n\t\t\t\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst selectSettingsSyncServiceDialogShownKey = 'switchQuality.selectSettingsSyncServiceDialogShown';\n\t\t\t\t\t\tconst userDataSyncStore = userDataSyncStoreManagementService.userDataSyncStore;\n\t\t\t\t\t\tlet userDataSyncStoreType: UserDataSyncStoreType | undefined;\n\t\t\t\t\t\tif (userDataSyncStore && isSwitchingToInsiders && userDataSyncEnablementService.isEnabled()\n\t\t\t\t\t\t\t&& !storageService.getBoolean(selectSettingsSyncServiceDialogShownKey, StorageScope.APPLICATION, false)) {\n\t\t\t\t\t\t\tuserDataSyncStoreType = await this.selectSettingsSyncService(dialogService);\n\t\t\t\t\t\t\tif (!userDataSyncStoreType) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstorageService.store(selectSettingsSyncServiceDialogShownKey, true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t\t\tif (userDataSyncStoreType === 'stable') {\n\t\t\t\t\t\t\t\t// Update the stable service type in the current window, so that it uses stable service after switched to insiders version (after reload).\n\t\t\t\t\t\t\t\tawait userDataSyncStoreManagementService.switch(userDataSyncStoreType);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst res = await dialogService.confirm({\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tmessage: nls.localize('relaunchMessage', \"Changing the version requires a reload to take effect\"),\n\t\t\t\t\t\t\tdetail: newQuality === 'insider' ?\n\t\t\t\t\t\t\t\tnls.localize('relaunchDetailInsiders', \"Press the reload button to switch to the Insiders version of VS Code.\") :\n\t\t\t\t\t\t\t\tnls.localize('relaunchDetailStable', \"Press the reload button to switch to the Stable version of VS Code.\"),\n\t\t\t\t\t\t\tprimaryButton: nls.localize({ key: 'reload', comment: ['&& denotes a mnemonic'] }, \"&&Reload\")\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\t\t\t\t\t// If sync is happening wait until it is finished before reload\n\t\t\t\t\t\t\tif (userDataSyncService.status === SyncStatus.Syncing) {\n\t\t\t\t\t\t\t\tpromises.push(Event.toPromise(Event.filter(userDataSyncService.onDidChangeStatus, status => status !== SyncStatus.Syncing)));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If user chose the sync service then synchronise the store type option in insiders service, so that other clients using insiders service are also updated.\n\t\t\t\t\t\t\tif (isSwitchingToInsiders && userDataSyncStoreType) {\n\t\t\t\t\t\t\t\tpromises.push(userDataSyncWorkbenchService.synchroniseUserDataSyncStoreType());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait Promises.settled(promises);\n\n\t\t\t\t\t\t\tproductQualityChangeHandler(newQuality);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reset\n\t\t\t\t\t\t\tif (userDataSyncStoreType) {\n\t\t\t\t\t\t\t\tstorageService.remove(selectSettingsSyncServiceDialogShownKey, StorageScope.APPLICATION);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tnotificationService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprivate async selectSettingsSyncService(dialogService: IDialogService): Promise<UserDataSyncStoreType | undefined> {\n\t\t\t\t\tconst { result } = await dialogService.prompt<UserDataSyncStoreType>({\n\t\t\t\t\t\ttype: Severity.Info,\n\t\t\t\t\t\tmessage: nls.localize('selectSyncService.message', \"Choose the settings sync service to use after changing the version\"),\n\t\t\t\t\t\tdetail: nls.localize('selectSyncService.detail', \"The Insiders version of VS Code will synchronize your settings, keybindings, extensions, snippets and UI State using separate insiders settings sync service by default.\"),\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize({ key: 'use insiders', comment: ['&& denotes a mnemonic'] }, \"&&Insiders\"),\n\t\t\t\t\t\t\t\trun: () => 'insiders'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize({ key: 'use stable', comment: ['&& denotes a mnemonic'] }, \"&&Stable (current)\"),\n\t\t\t\t\t\t\t\trun: () => 'stable'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tcancelButton: true\n\t\t\t\t\t});\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
