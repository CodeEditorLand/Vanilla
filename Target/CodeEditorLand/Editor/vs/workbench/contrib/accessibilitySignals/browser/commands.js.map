{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accessibilitySignals/browser/commands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { Action2 } from '../../../../platform/actions/common/actions.js';\nimport { AccessibilitySignal, AcknowledgeDocCommentsToken, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\nexport class ShowSignalSoundHelp extends Action2 {\n\tstatic readonly ID = 'signals.sounds.help';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowSignalSoundHelp.ID,\n\t\t\ttitle: localize2('signals.sound.help', \"Help: List Signal Sounds\"),\n\t\t\tf1: true,\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize('accessibility.sound.help.description', \"List all accessibility sounds, noises, or audio cues and configure their settings\")\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst accessibilityService = accessor.get(IAccessibilityService);\n\t\tconst preferencesService = accessor.get(IPreferencesService);\n\t\tconst userGestureSignals = [AccessibilitySignal.save, AccessibilitySignal.format];\n\t\tconst items: (IQuickPickItem & { signal: AccessibilitySignal })[] = AccessibilitySignal.allAccessibilitySignals.map((signal, idx) => ({\n\t\t\tlabel: userGestureSignals.includes(signal) ? `${signal.name} (${configurationService.getValue(signal.settingsKey + '.sound')})` : signal.name,\n\t\t\tsignal,\n\t\t\tbuttons: userGestureSignals.includes(signal) ? [{\n\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.settingsGear),\n\t\t\t\ttooltip: localize('sounds.help.settings', 'Configure Sound'),\n\t\t\t\talwaysVisible: true\n\t\t\t}] : []\n\t\t})).sort((a, b) => a.label.localeCompare(b.label));\n\t\tconst disposables = new DisposableStore();\n\t\tconst qp = disposables.add(quickInputService.createQuickPick<IQuickPickItem & { signal: AccessibilitySignal }>());\n\t\tqp.items = items;\n\t\tqp.selectedItems = items.filter(i => accessibilitySignalService.isSoundEnabled(i.signal) || userGestureSignals.includes(i.signal) && configurationService.getValue(i.signal.settingsKey + '.sound') !== 'never');\n\t\tdisposables.add(qp.onDidAccept(() => {\n\t\t\tconst enabledSounds = qp.selectedItems.map(i => i.signal);\n\t\t\tconst disabledSounds = qp.items.map(i => (i as any).signal).filter(i => !enabledSounds.includes(i));\n\t\t\tfor (const signal of enabledSounds) {\n\t\t\t\tlet { sound, announcement } = configurationService.getValue<{ sound: string; announcement?: string }>(signal.settingsKey);\n\t\t\t\tsound = userGestureSignals.includes(signal) ? 'userGesture' : accessibilityService.isScreenReaderOptimized() ? 'auto' : 'on';\n\t\t\t\tif (announcement) {\n\t\t\t\t\tconfigurationService.updateValue(signal.settingsKey, { sound, announcement });\n\t\t\t\t} else {\n\t\t\t\t\tconfigurationService.updateValue(signal.settingsKey, { sound });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const signal of disabledSounds) {\n\t\t\t\tconst announcement = configurationService.getValue(signal.settingsKey + '.announcement');\n\t\t\t\tconst sound = getDisabledSettingValue(userGestureSignals.includes(signal), accessibilityService.isScreenReaderOptimized());\n\t\t\t\tconst value = announcement ? { sound, announcement } : { sound };\n\t\t\t\tconfigurationService.updateValue(signal.settingsKey, value);\n\t\t\t}\n\t\t\tqp.hide();\n\t\t}));\n\t\tdisposables.add(qp.onDidTriggerItemButton(e => {\n\t\t\tpreferencesService.openUserSettings({ jsonEditor: true, revealSetting: { key: e.item.signal.settingsKey, edit: true } });\n\t\t}));\n\t\tdisposables.add(qp.onDidChangeActive(() => {\n\t\t\taccessibilitySignalService.playSound(qp.activeItems[0].signal.sound.getSound(true), true, AcknowledgeDocCommentsToken);\n\t\t}));\n\t\tdisposables.add(qp.onDidHide(() => disposables.dispose()));\n\t\tqp.placeholder = localize('sounds.help.placeholder', 'Select a sound to play and configure');\n\t\tqp.canSelectMany = true;\n\t\tawait qp.show();\n\t}\n}\n\nfunction getDisabledSettingValue(isUserGestureSignal: boolean, isScreenReaderOptimized: boolean): string {\n\treturn isScreenReaderOptimized ? (isUserGestureSignal ? 'never' : 'off') : (isUserGestureSignal ? 'never' : 'auto');\n}\n\nexport class ShowAccessibilityAnnouncementHelp extends Action2 {\n\tstatic readonly ID = 'accessibility.announcement.help';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowAccessibilityAnnouncementHelp.ID,\n\t\t\ttitle: localize2('accessibility.announcement.help', \"Help: List Signal Announcements\"),\n\t\t\tf1: true,\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize('accessibility.announcement.help.description', \"List all accessibility announcements, alerts, braille messages, and configure their settings\")\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst accessibilityService = accessor.get(IAccessibilityService);\n\t\tconst preferencesService = accessor.get(IPreferencesService);\n\t\tconst userGestureSignals = [AccessibilitySignal.save, AccessibilitySignal.format];\n\t\tconst items: (IQuickPickItem & { signal: AccessibilitySignal })[] = AccessibilitySignal.allAccessibilitySignals.filter(c => !!c.legacyAnnouncementSettingsKey).map((signal, idx) => ({\n\t\t\tlabel: userGestureSignals.includes(signal) ? `${signal.name} (${configurationService.getValue(signal.settingsKey + '.announcement')})` : signal.name,\n\t\t\tsignal,\n\t\t\tbuttons: userGestureSignals.includes(signal) ? [{\n\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.settingsGear),\n\t\t\t\ttooltip: localize('announcement.help.settings', 'Configure Announcement'),\n\t\t\t\talwaysVisible: true,\n\t\t\t}] : []\n\t\t})).sort((a, b) => a.label.localeCompare(b.label));\n\t\tconst disposables = new DisposableStore();\n\t\tconst qp = disposables.add(quickInputService.createQuickPick<IQuickPickItem & { signal: AccessibilitySignal }>());\n\t\tqp.items = items;\n\t\tqp.selectedItems = items.filter(i => accessibilitySignalService.isAnnouncementEnabled(i.signal) || userGestureSignals.includes(i.signal) && configurationService.getValue(i.signal.settingsKey + '.announcement') !== 'never');\n\t\tconst screenReaderOptimized = accessibilityService.isScreenReaderOptimized();\n\t\tdisposables.add(qp.onDidAccept(() => {\n\t\t\tif (!screenReaderOptimized) {\n\t\t\t\t// announcements are off by default when screen reader is not active\n\t\t\t\tqp.hide();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst enabledAnnouncements = qp.selectedItems.map(i => i.signal);\n\t\t\tconst disabledAnnouncements = AccessibilitySignal.allAccessibilitySignals.filter(cue => !!cue.legacyAnnouncementSettingsKey && !enabledAnnouncements.includes(cue));\n\t\t\tfor (const signal of enabledAnnouncements) {\n\t\t\t\tlet { sound, announcement } = configurationService.getValue<{ sound: string; announcement?: string }>(signal.settingsKey);\n\t\t\t\tannouncement = userGestureSignals.includes(signal) ? 'userGesture' : signal.announcementMessage && accessibilityService.isScreenReaderOptimized() ? 'auto' : undefined;\n\t\t\t\tconfigurationService.updateValue(signal.settingsKey, { sound, announcement });\n\t\t\t}\n\n\t\t\tfor (const signal of disabledAnnouncements) {\n\t\t\t\tconst announcement = getDisabledSettingValue(userGestureSignals.includes(signal), true);\n\t\t\t\tconst sound = configurationService.getValue(signal.settingsKey + '.sound');\n\t\t\t\tconst value = announcement ? { sound, announcement } : { sound };\n\t\t\t\tconfigurationService.updateValue(signal.settingsKey, value);\n\t\t\t}\n\t\t\tqp.hide();\n\t\t}));\n\t\tdisposables.add(qp.onDidTriggerItemButton(e => {\n\t\t\tpreferencesService.openUserSettings({ jsonEditor: true, revealSetting: { key: e.item.signal.settingsKey, edit: true } });\n\t\t}));\n\t\tdisposables.add(qp.onDidHide(() => disposables.dispose()));\n\t\tqp.placeholder = screenReaderOptimized ? localize('announcement.help.placeholder', 'Select an announcement to configure') : localize('announcement.help.placeholder.disabled', 'Screen reader is not active, announcements are disabled by default.');\n\t\tqp.canSelectMany = true;\n\t\tawait qp.show();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
