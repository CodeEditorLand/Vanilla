{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/webviewPanel/browser/webviewEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CodeWindow } from \"../../../../base/browser/window.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport type { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype GroupIdentifier,\n\ttype IUntypedEditorInput,\n\ttype Verbosity,\n} from \"../../../common/editor.js\";\nimport { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport type { IOverlayWebview } from \"../../webview/browser/webview.js\";\nimport type { WebviewIconManager, WebviewIcons } from \"./webviewIconManager.js\";\n\nexport interface WebviewInputInitInfo {\n\treadonly viewType: string;\n\treadonly providedId: string | undefined;\n\treadonly name: string;\n}\n\nexport class WebviewInput extends EditorInput {\n\tpublic static typeId = \"workbench.editors.webviewInput\";\n\n\tpublic override get typeId(): string {\n\t\treturn WebviewInput.typeId;\n\t}\n\n\tpublic override get editorId(): string {\n\t\treturn this.viewType;\n\t}\n\n\tpublic override get capabilities(): EditorInputCapabilities {\n\t\treturn (\n\t\t\tEditorInputCapabilities.Readonly |\n\t\t\tEditorInputCapabilities.Singleton |\n\t\t\tEditorInputCapabilities.CanDropIntoEditor\n\t\t);\n\t}\n\n\tprivate readonly _resourceId = generateUuid();\n\n\tprivate _name: string;\n\tprivate _iconPath?: WebviewIcons;\n\tprivate _group?: GroupIdentifier;\n\n\tprivate _webview: IOverlayWebview;\n\n\tprivate _hasTransfered = false;\n\n\tget resource() {\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.webviewPanel,\n\t\t\tpath: `webview-panel/webview-${this._resourceId}`,\n\t\t});\n\t}\n\n\tpublic readonly viewType: string;\n\tpublic readonly providedId: string | undefined;\n\n\tconstructor(\n\t\tinit: WebviewInputInitInfo,\n\t\twebview: IOverlayWebview,\n\t\tprivate readonly _iconManager: WebviewIconManager,\n\t) {\n\t\tsuper();\n\n\t\tthis.viewType = init.viewType;\n\t\tthis.providedId = init.providedId;\n\n\t\tthis._name = init.name;\n\t\tthis._webview = webview;\n\t}\n\n\toverride dispose() {\n\t\tif (!this.isDisposed()) {\n\t\t\tif (!this._hasTransfered) {\n\t\t\t\tthis._webview?.dispose();\n\t\t\t}\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\tpublic override getName(): string {\n\t\treturn this._name;\n\t}\n\n\tpublic override getTitle(_verbosity?: Verbosity): string {\n\t\treturn this.getName();\n\t}\n\n\tpublic override getDescription(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic setName(value: string): void {\n\t\tthis._name = value;\n\t\tthis.webview.setTitle(value);\n\t\tthis._onDidChangeLabel.fire();\n\t}\n\n\tpublic get webview(): IOverlayWebview {\n\t\treturn this._webview;\n\t}\n\n\tpublic get extension() {\n\t\treturn this.webview.extension;\n\t}\n\n\tpublic get iconPath() {\n\t\treturn this._iconPath;\n\t}\n\n\tpublic set iconPath(value: WebviewIcons | undefined) {\n\t\tthis._iconPath = value;\n\t\tthis._iconManager.setIcons(this._resourceId, value);\n\t}\n\n\tpublic override matches(other: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn super.matches(other) || other === this;\n\t}\n\n\tpublic get group(): GroupIdentifier | undefined {\n\t\treturn this._group;\n\t}\n\n\tpublic updateGroup(group: GroupIdentifier): void {\n\t\tthis._group = group;\n\t}\n\n\tprotected transfer(other: WebviewInput): WebviewInput | undefined {\n\t\tif (this._hasTransfered) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._hasTransfered = true;\n\t\tother._webview = this._webview;\n\t\treturn other;\n\t}\n\n\tpublic claim(\n\t\tclaimant: unknown,\n\t\ttargetWindow: CodeWindow,\n\t\tscopedContextKeyService: IContextKeyService | undefined,\n\t): void {\n\t\treturn this._webview.claim(\n\t\t\tclaimant,\n\t\t\ttargetWindow,\n\t\t\tscopedContextKeyService,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,oBAAoB;AAE7B;AAAA,EACC;AAAA,OAIM;AACP,SAAS,mBAAmB;AAUrB,MAAM,qBAAqB,YAAY;AAAA,EAuC7C,YACC,MACA,SACiB,cAChB;AACD,UAAM;AAFW;AAIjB,SAAK,WAAW,KAAK;AACrB,SAAK,aAAa,KAAK;AAEvB,SAAK,QAAQ,KAAK;AAClB,SAAK,WAAW;AAAA,EACjB;AAAA,EA7ED,OA0B8C;AAAA;AAAA;AAAA,EAC7C,OAAc,SAAS;AAAA,EAEvB,IAAoB,SAAiB;AACpC,WAAO,aAAa;AAAA,EACrB;AAAA,EAEA,IAAoB,WAAmB;AACtC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAoB,eAAwC;AAC3D,WACC,wBAAwB,WACxB,wBAAwB,YACxB,wBAAwB;AAAA,EAE1B;AAAA,EAEiB,cAAc,aAAa;AAAA,EAEpC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EAEA,iBAAiB;AAAA,EAEzB,IAAI,WAAW;AACd,WAAO,IAAI,KAAK;AAAA,MACf,QAAQ,QAAQ;AAAA,MAChB,MAAM,yBAAyB,KAAK,WAAW;AAAA,IAChD,CAAC;AAAA,EACF;AAAA,EAEgB;AAAA,EACA;AAAA,EAgBP,UAAU;AAClB,QAAI,CAAC,KAAK,WAAW,GAAG;AACvB,UAAI,CAAC,KAAK,gBAAgB;AACzB,aAAK,UAAU,QAAQ;AAAA,MACxB;AAAA,IACD;AACA,UAAM,QAAQ;AAAA,EACf;AAAA,EAEgB,UAAkB;AACjC,WAAO,KAAK;AAAA,EACb;AAAA,EAEgB,SAAS,YAAgC;AACxD,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEgB,iBAAqC;AACpD,WAAO;AAAA,EACR;AAAA,EAEO,QAAQ,OAAqB;AACnC,SAAK,QAAQ;AACb,SAAK,QAAQ,SAAS,KAAK;AAC3B,SAAK,kBAAkB,KAAK;AAAA,EAC7B;AAAA,EAEA,IAAW,UAA2B;AACrC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAW,YAAY;AACtB,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,IAAW,WAAW;AACrB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAW,SAAS,OAAiC;AACpD,SAAK,YAAY;AACjB,SAAK,aAAa,SAAS,KAAK,aAAa,KAAK;AAAA,EACnD;AAAA,EAEgB,QAAQ,OAAmD;AAC1E,WAAO,MAAM,QAAQ,KAAK,KAAK,UAAU;AAAA,EAC1C;AAAA,EAEA,IAAW,QAAqC;AAC/C,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,YAAY,OAA8B;AAChD,SAAK,SAAS;AAAA,EACf;AAAA,EAEU,SAAS,OAA+C;AACjE,QAAI,KAAK,gBAAgB;AACxB,aAAO;AAAA,IACR;AACA,SAAK,iBAAiB;AACtB,UAAM,WAAW,KAAK;AACtB,WAAO;AAAA,EACR;AAAA,EAEO,MACN,UACA,cACA,yBACO;AACP,WAAO,KAAK,SAAS;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
