var g=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var a=(p,t,o,i)=>{for(var r=i>1?void 0:i?b(t,o):t,e=p.length-1,n;e>=0;e--)(n=p[e])&&(r=(i?n(t,o,r):n(r))||r);return i&&r&&g(t,o,r),r},m=(p,t)=>(o,i)=>t(o,i,p);import{Disposable as v}from"../../../../base/common/lifecycle.js";import{localize as l}from"../../../../nls.js";import{registerAction2 as s}from"../../../../platform/actions/common/actions.js";import{SyncDescriptor as w}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as y,registerSingleton as W}from"../../../../platform/instantiation/common/extensions.js";import{Registry as E}from"../../../../platform/registry/common/platform.js";import{EditorPaneDescriptor as S}from"../../../browser/editor.js";import{registerWorkbenchContribution2 as h,WorkbenchPhase as k}from"../../../common/contributions.js";import{EditorExtensions as f}from"../../../common/editor.js";import"../../../common/editor/editorInput.js";import{IEditorGroupsService as D}from"../../../services/editor/common/editorGroupsService.js";import{IEditorService as G}from"../../../services/editor/common/editorService.js";import{HideWebViewEditorFindCommand as F,ReloadWebviewAction as R,ShowWebViewEditorFindWidgetAction as P,WebViewEditorFindNextCommand as V,WebViewEditorFindPreviousCommand as x}from"./webviewCommands.js";import{WebviewEditor as u}from"./webviewEditor.js";import{WebviewInput as c}from"./webviewEditorInput.js";import{WebviewEditorInputSerializer as I}from"./webviewEditorInputSerializer.js";import{IWebviewWorkbenchService as z,WebviewEditorService as A}from"./webviewWorkbenchService.js";E.as(f.EditorPane).registerEditorPane(S.create(u,u.ID,l("webview.editor.label","webview editor")),[new w(c)]);let d=class extends v{constructor(o,i){super();this.editorGroupService=i;this._register(o.onWillOpenEditor(r=>{const e=i.getGroup(r.groupId);e&&this.onEditorOpening(r.editor,e)}))}static ID="workbench.contrib.webviewPanel";onEditorOpening(o,i){if(!(o instanceof c)||o.typeId!==c.typeId||i.contains(o))return;let r;const e=this.editorGroupService.groups;for(const n of e)if(n.contains(o)){r=n;break}r&&r.closeEditor(o)}};d=a([m(0,G),m(1,D)],d),h(d.ID,d,k.BlockStartup),E.as(f.EditorFactory).registerEditorSerializer(I.ID,I),W(z,A,y.Delayed),s(P),s(F),s(V),s(x),s(R);
