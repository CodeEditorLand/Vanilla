{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, DeferredPromise } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { combinedDisposable, Disposable, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { EditorActivation } from '../../../../platform/editor/common/editor.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { GroupIdentifier } from '../../../common/editor.js';\nimport { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IOverlayWebview, IWebviewService, WebviewInitInfo } from '../../webview/browser/webview.js';\nimport { CONTEXT_ACTIVE_WEBVIEW_PANEL_ID } from './webviewEditor.js';\nimport { WebviewIconManager, WebviewIcons } from './webviewIconManager.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { ACTIVE_GROUP_TYPE, IEditorService, SIDE_GROUP_TYPE } from '../../../services/editor/common/editorService.js';\nimport { WebviewInput, WebviewInputInitInfo } from './webviewEditorInput.js';\n\nexport interface IWebViewShowOptions {\n\treadonly group?: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE;\n\treadonly preserveFocus?: boolean;\n}\n\nexport const IWebviewWorkbenchService = createDecorator<IWebviewWorkbenchService>('webviewEditorService');\n\n/**\n * Service responsible for showing and managing webview editors in the workbench.\n */\nexport interface IWebviewWorkbenchService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Manages setting the icons show for a given webview.\n\t */\n\treadonly iconManager: WebviewIconManager;\n\n\t/**\n\t * Event fired when focus switches to a different webview editor.\n\t *\n\t * Fires `undefined` if focus switches to a non-webview editor.\n\t */\n\treadonly onDidChangeActiveWebviewEditor: Event<WebviewInput | undefined>;\n\n\t/**\n\t * Create a new webview editor and open it in the workbench.\n\t */\n\topenWebview(\n\t\twebviewInitInfo: WebviewInitInfo,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: IWebViewShowOptions,\n\t): WebviewInput;\n\n\t/**\n\t * Open a webview that is being restored from serialization.\n\t */\n\topenRevivedWebview(options: {\n\t\twebviewInitInfo: WebviewInitInfo;\n\t\tviewType: string;\n\t\ttitle: string;\n\t\ticonPath: WebviewIcons | undefined;\n\t\tstate: any;\n\t\tgroup: number | undefined;\n\t}): WebviewInput;\n\n\t/**\n\t * Reveal an already opened webview editor in the workbench.\n\t */\n\trevealWebview(\n\t\twebview: WebviewInput,\n\t\tgroup: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE,\n\t\tpreserveFocus: boolean\n\t): void;\n\n\t/**\n\t * Register a new {@link WebviewResolver}.\n\t *\n\t * If there are any webviews awaiting revival that this resolver can handle, they will be resolved by it.\n\t */\n\tregisterResolver(resolver: WebviewResolver): IDisposable;\n\n\t/**\n\t * Check if a webview should be serialized across window reloads.\n\t */\n\tshouldPersist(input: WebviewInput): boolean;\n\n\t/**\n\t * Try to resolve a webview. This will block until a resolver is registered for the webview.\n\t */\n\tresolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void>;\n}\n\n/**\n * Handles filling in the content of webview before it can be shown to the user.\n */\ninterface WebviewResolver {\n\t/**\n\t * Returns true if the resolver can resolve the given webview.\n\t */\n\tcanResolve(webview: WebviewInput): boolean;\n\n\t/**\n\t * Resolves the webview.\n\t */\n\tresolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void>;\n}\n\nfunction canRevive(reviver: WebviewResolver, webview: WebviewInput): boolean {\n\treturn reviver.canResolve(webview);\n}\n\nexport class LazilyResolvedWebviewEditorInput extends WebviewInput {\n\n\tprivate _resolved = false;\n\tprivate _resolvePromise?: CancelablePromise<void>;\n\n\tconstructor(\n\t\tinit: WebviewInputInitInfo,\n\t\twebview: IOverlayWebview,\n\t\t@IWebviewWorkbenchService private readonly _webviewWorkbenchService: IWebviewWorkbenchService,\n\t) {\n\t\tsuper(init, webview, _webviewWorkbenchService.iconManager);\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._resolvePromise?.cancel();\n\t\tthis._resolvePromise = undefined;\n\t}\n\n\t@memoize\n\tpublic override async resolve() {\n\t\tif (!this._resolved) {\n\t\t\tthis._resolved = true;\n\t\t\tthis._resolvePromise = createCancelablePromise(token => this._webviewWorkbenchService.resolveWebview(this, token));\n\t\t\ttry {\n\t\t\t\tawait this._resolvePromise;\n\t\t\t} catch (e) {\n\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn super.resolve();\n\t}\n\n\tprotected override transfer(other: LazilyResolvedWebviewEditorInput): WebviewInput | undefined {\n\t\tif (!super.transfer(other)) {\n\t\t\treturn;\n\t\t}\n\n\t\tother._resolved = this._resolved;\n\t\treturn other;\n\t}\n}\n\n\nclass RevivalPool {\n\tprivate _awaitingRevival: Array<{\n\t\treadonly input: WebviewInput;\n\t\treadonly promise: DeferredPromise<void>;\n\t\treadonly disposable: IDisposable;\n\t}> = [];\n\n\tpublic enqueueForRestoration(input: WebviewInput, token: CancellationToken): Promise<void> {\n\t\tconst promise = new DeferredPromise<void>();\n\n\t\tconst remove = () => {\n\t\t\tconst index = this._awaitingRevival.findIndex(entry => input === entry.input);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._awaitingRevival.splice(index, 1);\n\t\t\t}\n\t\t};\n\n\t\tconst disposable = combinedDisposable(\n\t\t\tinput.webview.onDidDispose(remove),\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\tremove();\n\t\t\t\tpromise.cancel();\n\t\t\t}),\n\t\t);\n\n\t\tthis._awaitingRevival.push({ input, promise, disposable });\n\n\t\treturn promise.p;\n\t}\n\n\tpublic reviveFor(reviver: WebviewResolver, token: CancellationToken) {\n\t\tconst toRevive = this._awaitingRevival.filter(({ input }) => canRevive(reviver, input));\n\t\tthis._awaitingRevival = this._awaitingRevival.filter(({ input }) => !canRevive(reviver, input));\n\n\t\tfor (const { input, promise: resolve, disposable } of toRevive) {\n\t\t\treviver.resolveWebview(input, token).then(x => resolve.complete(x), err => resolve.error(err)).finally(() => {\n\t\t\t\tdisposable.dispose();\n\t\t\t});\n\t\t}\n\t}\n}\n\n\nexport class WebviewEditorService extends Disposable implements IWebviewWorkbenchService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _revivers = new Set<WebviewResolver>();\n\tprivate readonly _revivalPool = new RevivalPool();\n\n\tprivate readonly _iconManager: WebviewIconManager;\n\n\tconstructor(\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWebviewService private readonly _webviewService: IWebviewService,\n\t) {\n\t\tsuper();\n\n\t\tthis._iconManager = this._register(this._instantiationService.createInstance(WebviewIconManager));\n\n\t\tthis._register(editorGroupsService.registerContextKeyProvider({\n\t\t\tcontextKey: CONTEXT_ACTIVE_WEBVIEW_PANEL_ID,\n\t\t\tgetGroupContextKeyValue: (group) => this.getWebviewId(group.activeEditor),\n\t\t}));\n\n\t\tthis._register(_editorService.onDidActiveEditorChange(() => {\n\t\t\tthis.updateActiveWebview();\n\t\t}));\n\n\t\t// The user may have switched focus between two sides of a diff editor\n\t\tthis._register(_webviewService.onDidChangeActiveWebview(() => {\n\t\t\tthis.updateActiveWebview();\n\t\t}));\n\n\t\tthis.updateActiveWebview();\n\t}\n\n\tget iconManager() {\n\t\treturn this._iconManager;\n\t}\n\n\tprivate _activeWebview: WebviewInput | undefined;\n\n\tprivate readonly _onDidChangeActiveWebviewEditor = this._register(new Emitter<WebviewInput | undefined>());\n\tpublic readonly onDidChangeActiveWebviewEditor = this._onDidChangeActiveWebviewEditor.event;\n\n\tprivate getWebviewId(input: EditorInput | null): string {\n\t\tlet webviewInput: WebviewInput | undefined;\n\t\tif (input instanceof WebviewInput) {\n\t\t\twebviewInput = input;\n\t\t} else if (input instanceof DiffEditorInput) {\n\t\t\tif (input.primary instanceof WebviewInput) {\n\t\t\t\twebviewInput = input.primary;\n\t\t\t} else if (input.secondary instanceof WebviewInput) {\n\t\t\t\twebviewInput = input.secondary;\n\t\t\t}\n\t\t}\n\n\t\treturn webviewInput?.webview.providedViewType ?? '';\n\t}\n\n\tprivate updateActiveWebview() {\n\t\tconst activeInput = this._editorService.activeEditor;\n\n\t\tlet newActiveWebview: WebviewInput | undefined;\n\t\tif (activeInput instanceof WebviewInput) {\n\t\t\tnewActiveWebview = activeInput;\n\t\t} else if (activeInput instanceof DiffEditorInput) {\n\t\t\tif (activeInput.primary instanceof WebviewInput && activeInput.primary.webview === this._webviewService.activeWebview) {\n\t\t\t\tnewActiveWebview = activeInput.primary;\n\t\t\t} else if (activeInput.secondary instanceof WebviewInput && activeInput.secondary.webview === this._webviewService.activeWebview) {\n\t\t\t\tnewActiveWebview = activeInput.secondary;\n\t\t\t}\n\t\t}\n\t\tif (newActiveWebview !== this._activeWebview) {\n\t\t\tthis._activeWebview = newActiveWebview;\n\t\t\tthis._onDidChangeActiveWebviewEditor.fire(newActiveWebview);\n\t\t}\n\t}\n\n\tpublic openWebview(\n\t\twebviewInitInfo: WebviewInitInfo,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: IWebViewShowOptions,\n\t): WebviewInput {\n\t\tconst webview = this._webviewService.createWebviewOverlay(webviewInitInfo);\n\t\tconst webviewInput = this._instantiationService.createInstance(WebviewInput, { viewType, name: title, providedId: webviewInitInfo.providedViewType }, webview, this.iconManager);\n\t\tthis._editorService.openEditor(webviewInput, {\n\t\t\tpinned: true,\n\t\t\tpreserveFocus: showOptions.preserveFocus,\n\t\t\t// preserve pre 1.38 behaviour to not make group active when preserveFocus: true\n\t\t\t// but make sure to restore the editor to fix https://github.com/microsoft/vscode/issues/79633\n\t\t\tactivation: showOptions.preserveFocus ? EditorActivation.RESTORE : undefined\n\t\t}, showOptions.group);\n\t\treturn webviewInput;\n\t}\n\n\tpublic revealWebview(\n\t\twebview: WebviewInput,\n\t\tgroup: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE,\n\t\tpreserveFocus: boolean\n\t): void {\n\t\tconst topLevelEditor = this.findTopLevelEditorForWebview(webview);\n\n\t\tthis._editorService.openEditor(topLevelEditor, {\n\t\t\tpreserveFocus,\n\t\t\t// preserve pre 1.38 behaviour to not make group active when preserveFocus: true\n\t\t\t// but make sure to restore the editor to fix https://github.com/microsoft/vscode/issues/79633\n\t\t\tactivation: preserveFocus ? EditorActivation.RESTORE : undefined\n\t\t}, group);\n\t}\n\n\tprivate findTopLevelEditorForWebview(webview: WebviewInput): EditorInput {\n\t\tfor (const editor of this._editorService.editors) {\n\t\t\tif (editor === webview) {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t\tif (editor instanceof DiffEditorInput) {\n\t\t\t\tif (webview === editor.primary || webview === editor.secondary) {\n\t\t\t\t\treturn editor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn webview;\n\t}\n\n\tpublic openRevivedWebview(options: {\n\t\twebviewInitInfo: WebviewInitInfo;\n\t\tviewType: string;\n\t\ttitle: string;\n\t\ticonPath: WebviewIcons | undefined;\n\t\tstate: any;\n\t\tgroup: number | undefined;\n\t}): WebviewInput {\n\t\tconst webview = this._webviewService.createWebviewOverlay(options.webviewInitInfo);\n\t\twebview.state = options.state;\n\n\t\tconst webviewInput = this._instantiationService.createInstance(LazilyResolvedWebviewEditorInput, { viewType: options.viewType, providedId: options.webviewInitInfo.providedViewType, name: options.title }, webview);\n\t\twebviewInput.iconPath = options.iconPath;\n\n\t\tif (typeof options.group === 'number') {\n\t\t\twebviewInput.updateGroup(options.group);\n\t\t}\n\t\treturn webviewInput;\n\t}\n\n\tpublic registerResolver(reviver: WebviewResolver): IDisposable {\n\t\tthis._revivers.add(reviver);\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis._revivalPool.reviveFor(reviver, cts.token);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._revivers.delete(reviver);\n\t\t\tcts.dispose(true);\n\t\t});\n\t}\n\n\tpublic shouldPersist(webview: WebviewInput): boolean {\n\t\t// Revived webviews may not have an actively registered reviver but we still want to persist them\n\t\t// since a reviver should exist when it is actually needed.\n\t\tif (webview instanceof LazilyResolvedWebviewEditorInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn Iterable.some(this._revivers.values(), reviver => canRevive(reviver, webview));\n\t}\n\n\tprivate async tryRevive(webview: WebviewInput, token: CancellationToken): Promise<boolean> {\n\t\tfor (const reviver of this._revivers.values()) {\n\t\t\tif (canRevive(reviver, webview)) {\n\t\t\t\tawait reviver.resolveWebview(webview, token);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic async resolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void> {\n\t\tconst didRevive = await this.tryRevive(webview, token);\n\t\tif (!didRevive && !token.isCancellationRequested) {\n\t\t\t// A reviver may not be registered yet. Put into pool and resolve promise when we can revive\n\t\t\treturn this._revivalPool.enqueueForRestoration(webview, token);\n\t\t}\n\t}\n\n\tpublic setIcons(id: string, iconPath: WebviewIcons | undefined): void {\n\t\tthis._iconManager.setIcons(id, iconPath);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB,yBAAyB,uBAAuB;AAC5E,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,eAAe;AACxB,SAAS,2BAA2B;AACpC,SAAS,SAAS,aAAa;AAC/B,SAAS,gBAAgB;AACzB,SAAS,oBAAoB,YAAY,aAAa,oBAAoB;AAC1E,SAAS,wBAAwB;AACjC,SAAS,iBAAiB,6BAA6B;AACvD,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB,iBAAiB,uBAAuB;AAClE,SAAS,uCAAuC;AAChD,SAAS,oBAAoB,oBAAoB;AACjD,SAAS,cAAc,4BAA4B;AACnD,SAAS,mBAAmB,gBAAgB,uBAAuB;AACnE,SAAS,cAAc,4BAA4B;AAO5C,MAAM,2BAA2B,gBAA0C,sBAAsB;AAoFxG,SAAS,UAAU,SAA0B,SAAgC;AAC5E,SAAO,QAAQ,WAAW,OAAO;AAClC;AAFS;AAIF,IAAM,mCAAN,cAA+C,aAAa;AAAA,EAKlE,YACC,MACA,SAC2C,0BAC1C;AACD,UAAM,MAAM,SAAS,yBAAyB,WAAW;AAFd;AAAA,EAG5C;AAAA,EAhID,OAqHmE;AAAA;AAAA;AAAA,EAE1D,YAAY;AAAA,EACZ;AAAA,EAUC,UAAU;AAClB,UAAM,QAAQ;AACd,SAAK,iBAAiB,OAAO;AAC7B,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAGA,MAAsB,UAAU;AAC/B,QAAI,CAAC,KAAK,WAAW;AACpB,WAAK,YAAY;AACjB,WAAK,kBAAkB,wBAAwB,WAAS,KAAK,yBAAyB,eAAe,MAAM,KAAK,CAAC;AACjH,UAAI;AACH,cAAM,KAAK;AAAA,MACZ,SAAS,GAAG;AACX,YAAI,CAAC,oBAAoB,CAAC,GAAG;AAC5B,gBAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AACA,WAAO,MAAM,QAAQ;AAAA,EACtB;AAAA,EAEmB,SAAS,OAAmE;AAC9F,QAAI,CAAC,MAAM,SAAS,KAAK,GAAG;AAC3B;AAAA,IACD;AAEA,UAAM,YAAY,KAAK;AACvB,WAAO;AAAA,EACR;AACD;AAvBuB;AAAA,EADrB;AAAA,GAnBW,iCAoBU;AApBV,mCAAN;AAAA,EAQJ;AAAA,GARU;AA8Cb,MAAM,YAAY;AAAA,EAnKlB,OAmKkB;AAAA;AAAA;AAAA,EACT,mBAIH,CAAC;AAAA,EAEC,sBAAsB,OAAqB,OAAyC;AAC1F,UAAM,UAAU,IAAI,gBAAsB;AAE1C,UAAM,SAAS,6BAAM;AACpB,YAAM,QAAQ,KAAK,iBAAiB,UAAU,WAAS,UAAU,MAAM,KAAK;AAC5E,UAAI,SAAS,GAAG;AACf,aAAK,iBAAiB,OAAO,OAAO,CAAC;AAAA,MACtC;AAAA,IACD,GALe;AAOf,UAAM,aAAa;AAAA,MAClB,MAAM,QAAQ,aAAa,MAAM;AAAA,MACjC,MAAM,wBAAwB,MAAM;AACnC,eAAO;AACP,gBAAQ,OAAO;AAAA,MAChB,CAAC;AAAA,IACF;AAEA,SAAK,iBAAiB,KAAK,EAAE,OAAO,SAAS,WAAW,CAAC;AAEzD,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEO,UAAU,SAA0B,OAA0B;AACpE,UAAM,WAAW,KAAK,iBAAiB,OAAO,CAAC,EAAE,MAAM,MAAM,UAAU,SAAS,KAAK,CAAC;AACtF,SAAK,mBAAmB,KAAK,iBAAiB,OAAO,CAAC,EAAE,MAAM,MAAM,CAAC,UAAU,SAAS,KAAK,CAAC;AAE9F,eAAW,EAAE,OAAO,SAAS,SAAS,WAAW,KAAK,UAAU;AAC/D,cAAQ,eAAe,OAAO,KAAK,EAAE,KAAK,OAAK,QAAQ,SAAS,CAAC,GAAG,SAAO,QAAQ,MAAM,GAAG,CAAC,EAAE,QAAQ,MAAM;AAC5G,mBAAW,QAAQ;AAAA,MACpB,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAGO,IAAM,uBAAN,cAAmC,WAA+C;AAAA,EAQxF,YACuB,qBACW,gBACO,uBACN,iBACjC;AACD,UAAM;AAJ2B;AACO;AACN;AAIlC,SAAK,eAAe,KAAK,UAAU,KAAK,sBAAsB,eAAe,kBAAkB,CAAC;AAEhG,SAAK,UAAU,oBAAoB,2BAA2B;AAAA,MAC7D,YAAY;AAAA,MACZ,yBAAyB,wBAAC,UAAU,KAAK,aAAa,MAAM,YAAY,GAA/C;AAAA,IAC1B,CAAC,CAAC;AAEF,SAAK,UAAU,eAAe,wBAAwB,MAAM;AAC3D,WAAK,oBAAoB;AAAA,IAC1B,CAAC,CAAC;AAGF,SAAK,UAAU,gBAAgB,yBAAyB,MAAM;AAC7D,WAAK,oBAAoB;AAAA,IAC1B,CAAC,CAAC;AAEF,SAAK,oBAAoB;AAAA,EAC1B;AAAA,EA/OD,OA8MyF;AAAA;AAAA;AAAA,EAGvE,YAAY,oBAAI,IAAqB;AAAA,EACrC,eAAe,IAAI,YAAY;AAAA,EAE/B;AAAA,EA6BjB,IAAI,cAAc;AACjB,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAES,kCAAkC,KAAK,UAAU,IAAI,QAAkC,CAAC;AAAA,EACzF,iCAAiC,KAAK,gCAAgC;AAAA,EAE9E,aAAa,OAAmC;AACvD,QAAI;AACJ,QAAI,iBAAiB,cAAc;AAClC,qBAAe;AAAA,IAChB,WAAW,iBAAiB,iBAAiB;AAC5C,UAAI,MAAM,mBAAmB,cAAc;AAC1C,uBAAe,MAAM;AAAA,MACtB,WAAW,MAAM,qBAAqB,cAAc;AACnD,uBAAe,MAAM;AAAA,MACtB;AAAA,IACD;AAEA,WAAO,cAAc,QAAQ,oBAAoB;AAAA,EAClD;AAAA,EAEQ,sBAAsB;AAC7B,UAAM,cAAc,KAAK,eAAe;AAExC,QAAI;AACJ,QAAI,uBAAuB,cAAc;AACxC,yBAAmB;AAAA,IACpB,WAAW,uBAAuB,iBAAiB;AAClD,UAAI,YAAY,mBAAmB,gBAAgB,YAAY,QAAQ,YAAY,KAAK,gBAAgB,eAAe;AACtH,2BAAmB,YAAY;AAAA,MAChC,WAAW,YAAY,qBAAqB,gBAAgB,YAAY,UAAU,YAAY,KAAK,gBAAgB,eAAe;AACjI,2BAAmB,YAAY;AAAA,MAChC;AAAA,IACD;AACA,QAAI,qBAAqB,KAAK,gBAAgB;AAC7C,WAAK,iBAAiB;AACtB,WAAK,gCAAgC,KAAK,gBAAgB;AAAA,IAC3D;AAAA,EACD;AAAA,EAEO,YACN,iBACA,UACA,OACA,aACe;AACf,UAAM,UAAU,KAAK,gBAAgB,qBAAqB,eAAe;AACzE,UAAM,eAAe,KAAK,sBAAsB,eAAe,cAAc,EAAE,UAAU,MAAM,OAAO,YAAY,gBAAgB,iBAAiB,GAAG,SAAS,KAAK,WAAW;AAC/K,SAAK,eAAe,WAAW,cAAc;AAAA,MAC5C,QAAQ;AAAA,MACR,eAAe,YAAY;AAAA;AAAA;AAAA,MAG3B,YAAY,YAAY,gBAAgB,iBAAiB,UAAU;AAAA,IACpE,GAAG,YAAY,KAAK;AACpB,WAAO;AAAA,EACR;AAAA,EAEO,cACN,SACA,OACA,eACO;AACP,UAAM,iBAAiB,KAAK,6BAA6B,OAAO;AAEhE,SAAK,eAAe,WAAW,gBAAgB;AAAA,MAC9C;AAAA;AAAA;AAAA,MAGA,YAAY,gBAAgB,iBAAiB,UAAU;AAAA,IACxD,GAAG,KAAK;AAAA,EACT;AAAA,EAEQ,6BAA6B,SAAoC;AACxE,eAAW,UAAU,KAAK,eAAe,SAAS;AACjD,UAAI,WAAW,SAAS;AACvB,eAAO;AAAA,MACR;AACA,UAAI,kBAAkB,iBAAiB;AACtC,YAAI,YAAY,OAAO,WAAW,YAAY,OAAO,WAAW;AAC/D,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEO,mBAAmB,SAOT;AAChB,UAAM,UAAU,KAAK,gBAAgB,qBAAqB,QAAQ,eAAe;AACjF,YAAQ,QAAQ,QAAQ;AAExB,UAAM,eAAe,KAAK,sBAAsB,eAAe,kCAAkC,EAAE,UAAU,QAAQ,UAAU,YAAY,QAAQ,gBAAgB,kBAAkB,MAAM,QAAQ,MAAM,GAAG,OAAO;AACnN,iBAAa,WAAW,QAAQ;AAEhC,QAAI,OAAO,QAAQ,UAAU,UAAU;AACtC,mBAAa,YAAY,QAAQ,KAAK;AAAA,IACvC;AACA,WAAO;AAAA,EACR;AAAA,EAEO,iBAAiB,SAAuC;AAC9D,SAAK,UAAU,IAAI,OAAO;AAE1B,UAAM,MAAM,IAAI,wBAAwB;AACxC,SAAK,aAAa,UAAU,SAAS,IAAI,KAAK;AAE9C,WAAO,aAAa,MAAM;AACzB,WAAK,UAAU,OAAO,OAAO;AAC7B,UAAI,QAAQ,IAAI;AAAA,IACjB,CAAC;AAAA,EACF;AAAA,EAEO,cAAc,SAAgC;AAGpD,QAAI,mBAAmB,kCAAkC;AACxD,aAAO;AAAA,IACR;AAEA,WAAO,SAAS,KAAK,KAAK,UAAU,OAAO,GAAG,aAAW,UAAU,SAAS,OAAO,CAAC;AAAA,EACrF;AAAA,EAEA,MAAc,UAAU,SAAuB,OAA4C;AAC1F,eAAW,WAAW,KAAK,UAAU,OAAO,GAAG;AAC9C,UAAI,UAAU,SAAS,OAAO,GAAG;AAChC,cAAM,QAAQ,eAAe,SAAS,KAAK;AAC3C,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,eAAe,SAAuB,OAAyC;AAC3F,UAAM,YAAY,MAAM,KAAK,UAAU,SAAS,KAAK;AACrD,QAAI,CAAC,aAAa,CAAC,MAAM,yBAAyB;AAEjD,aAAO,KAAK,aAAa,sBAAsB,SAAS,KAAK;AAAA,IAC9D;AAAA,EACD;AAAA,EAEO,SAAS,IAAY,UAA0C;AACrE,SAAK,aAAa,SAAS,IAAI,QAAQ;AAAA,EACxC;AACD;AA5La,uBAAN;AAAA,EASJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAZU;",
  "names": []
}
