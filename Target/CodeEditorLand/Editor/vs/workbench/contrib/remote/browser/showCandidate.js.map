{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/showCandidate.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\nimport { IRemoteExplorerService } from \"../../../services/remote/common/remoteExplorerService.js\";\nimport type { CandidatePort } from \"../../../services/remote/common/tunnelModel.js\";\n\nexport class ShowCandidateContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.showPortCandidate\";\n\n\tconstructor(\n\t\t@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,\n\t\t@IBrowserWorkbenchEnvironmentService\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tconst showPortCandidate =\n\t\t\tenvironmentService.options?.tunnelProvider?.showPortCandidate;\n\t\tif (showPortCandidate) {\n\t\t\tthis._register(\n\t\t\t\tremoteExplorerService.setCandidateFilter(\n\t\t\t\t\tasync (\n\t\t\t\t\t\tcandidates: CandidatePort[],\n\t\t\t\t\t): Promise<CandidatePort[]> => {\n\t\t\t\t\t\tconst filters: boolean[] = await Promise.all(\n\t\t\t\t\t\t\tcandidates.map((candidate) =>\n\t\t\t\t\t\t\t\tshowPortCandidate(\n\t\t\t\t\t\t\t\t\tcandidate.host,\n\t\t\t\t\t\t\t\t\tcandidate.port,\n\t\t\t\t\t\t\t\t\tcandidate.detail ?? \"\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst filteredCandidates: CandidatePort[] = [];\n\t\t\t\t\t\tif (filters.length !== candidates.length) {\n\t\t\t\t\t\t\treturn candidates;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i = 0; i < candidates.length; i++) {\n\t\t\t\t\t\t\tif (filters[i]) {\n\t\t\t\t\t\t\t\tfilteredCandidates.push(candidates[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn filteredCandidates;\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAE3B,SAAS,2CAA2C;AACpD,SAAS,8BAA8B;AAGhC,IAAM,4BAAN,cACE,WAET;AAAA,EAdA,OAcA;AAAA;AAAA;AAAA,EACC,OAAgB,KAAK;AAAA,EAErB,YACyB,uBAExB,oBACC;AACD,UAAM;AACN,UAAM,oBACL,mBAAmB,SAAS,gBAAgB;AAC7C,QAAI,mBAAmB;AACtB,WAAK;AAAA,QACJ,sBAAsB;AAAA,UACrB,OACC,eAC8B;AAC9B,kBAAM,UAAqB,MAAM,QAAQ;AAAA,cACxC,WAAW;AAAA,gBAAI,CAAC,cACf;AAAA,kBACC,UAAU;AAAA,kBACV,UAAU;AAAA,kBACV,UAAU,UAAU;AAAA,gBACrB;AAAA,cACD;AAAA,YACD;AACA,kBAAM,qBAAsC,CAAC;AAC7C,gBAAI,QAAQ,WAAW,WAAW,QAAQ;AACzC,qBAAO;AAAA,YACR;AACA,qBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC3C,kBAAI,QAAQ,CAAC,GAAG;AACf,mCAAmB,KAAK,WAAW,CAAC,CAAC;AAAA,cACtC;AAAA,YACD;AACA,mBAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA5Ca,4BAAN;AAAA,EAOJ;AAAA,EACA;AAAA,GARU;",
  "names": []
}
