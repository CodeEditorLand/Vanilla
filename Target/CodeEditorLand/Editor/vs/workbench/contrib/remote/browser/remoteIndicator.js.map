{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remoteIndicator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { IRemoteAgentService, remoteConnectionLatencyMeasurer } from '../../../services/remote/common/remoteAgentService.js';\nimport { RunOnceScheduler, retry } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { MenuId, IMenuService, MenuItemAction, MenuRegistry, registerAction2, Action2, SubmenuItemAction } from '../../../../platform/actions/common/actions.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor, IStatusbarEntry } from '../../../services/statusbar/browser/statusbar.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { QuickPickItem, IQuickInputService, IQuickInputButton } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';\nimport { PersistentConnectionEventType } from '../../../../platform/remote/common/remoteAgentConnection.js';\nimport { IRemoteAuthorityResolverService } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { PlatformName, PlatformToString, isWeb, platform } from '../../../../base/common/platform.js';\nimport { truncate } from '../../../../base/common/strings.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { getRemoteName } from '../../../../platform/remote/common/remoteHosts.js';\nimport { getVirtualWorkspaceLocation } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { getCodiconAriaLabel } from '../../../../base/common/iconLabels.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ReloadWindowAction } from '../../../browser/actions/windowActions.js';\nimport { EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT, IExtensionGalleryService, IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IExtensionsWorkbenchService, LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID } from '../../extensions/common/extensions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { RemoteNameContext, VirtualWorkspaceContext } from '../../../common/contextkeys.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from '../../../../base/common/actions.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { DomEmitter } from '../../../../base/browser/event.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { infoIcon } from '../../extensions/browser/extensionsIcons.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\ntype ActionGroup = [string, Array<MenuItemAction | SubmenuItemAction>];\n\ninterface RemoteExtensionMetadata {\n\tid: string;\n\tinstalled: boolean;\n\tdependencies: string[];\n\tisPlatformCompatible: boolean;\n\thelpLink: string;\n\tstartConnectLabel: string;\n\tstartCommand: string;\n\tpriority: number;\n\tsupportedPlatforms?: PlatformName[];\n}\n\nexport class RemoteStatusIndicator extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.remoteStatusIndicator';\n\n\tprivate static readonly REMOTE_ACTIONS_COMMAND_ID = 'workbench.action.remote.showMenu';\n\tprivate static readonly CLOSE_REMOTE_COMMAND_ID = 'workbench.action.remote.close';\n\tprivate static readonly SHOW_CLOSE_REMOTE_COMMAND_ID = !isWeb; // web does not have a \"Close Remote\" command\n\tprivate static readonly INSTALL_REMOTE_EXTENSIONS_ID = 'workbench.action.remote.extensions';\n\n\tprivate static readonly REMOTE_STATUS_LABEL_MAX_LENGTH = 40;\n\n\tprivate static readonly REMOTE_CONNECTION_LATENCY_SCHEDULER_DELAY = 60 * 1000;\n\tprivate static readonly REMOTE_CONNECTION_LATENCY_SCHEDULER_FIRST_RUN_DELAY = 10 * 1000;\n\n\tprivate remoteStatusEntry: IStatusbarEntryAccessor | undefined;\n\n\tprivate readonly legacyIndicatorMenu = this._register(this.menuService.createMenu(MenuId.StatusBarWindowIndicatorMenu, this.contextKeyService)); // to be removed once migration completed\n\tprivate readonly remoteIndicatorMenu = this._register(this.menuService.createMenu(MenuId.StatusBarRemoteIndicatorMenu, this.contextKeyService));\n\n\tprivate remoteMenuActionsGroups: ActionGroup[] | undefined;\n\n\tprivate readonly remoteAuthority = this.environmentService.remoteAuthority;\n\n\tprivate virtualWorkspaceLocation: { scheme: string; authority: string } | undefined = undefined;\n\n\tprivate connectionState: 'initializing' | 'connected' | 'reconnecting' | 'disconnected' | undefined = undefined;\n\tprivate connectionToken: string | undefined = undefined;\n\tprivate readonly connectionStateContextKey = new RawContextKey<'' | 'initializing' | 'disconnected' | 'connected'>('remoteConnectionState', '').bindTo(this.contextKeyService);\n\n\tprivate networkState: 'online' | 'offline' | 'high-latency' | undefined = undefined;\n\tprivate measureNetworkConnectionLatencyScheduler: RunOnceScheduler | undefined = undefined;\n\n\tprivate loggedInvalidGroupNames: { [group: string]: boolean } = Object.create(null);\n\n\tprivate _remoteExtensionMetadata: RemoteExtensionMetadata[] | undefined = undefined;\n\tprivate get remoteExtensionMetadata(): RemoteExtensionMetadata[] {\n\t\tif (!this._remoteExtensionMetadata) {\n\t\t\tconst remoteExtensionTips = { ...this.productService.remoteExtensionTips, ...this.productService.virtualWorkspaceExtensionTips };\n\t\t\tthis._remoteExtensionMetadata = Object.values(remoteExtensionTips).filter(value => value.startEntry !== undefined).map(value => {\n\t\t\t\treturn {\n\t\t\t\t\tid: value.extensionId,\n\t\t\t\t\tinstalled: false,\n\t\t\t\t\tfriendlyName: value.friendlyName,\n\t\t\t\t\tisPlatformCompatible: false,\n\t\t\t\t\tdependencies: [],\n\t\t\t\t\thelpLink: value.startEntry?.helpLink ?? '',\n\t\t\t\t\tstartConnectLabel: value.startEntry?.startConnectLabel ?? '',\n\t\t\t\t\tstartCommand: value.startEntry?.startCommand ?? '',\n\t\t\t\t\tpriority: value.startEntry?.priority ?? 10,\n\t\t\t\t\tsupportedPlatforms: value.supportedPlatforms\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tthis.remoteExtensionMetadata.sort((ext1, ext2) => ext1.priority - ext2.priority);\n\t\t}\n\n\t\treturn this._remoteExtensionMetadata;\n\t}\n\n\tprivate remoteMetadataInitialized: boolean = false;\n\tprivate readonly _onDidChangeEntries = this._register(new Emitter<void>());\n\tprivate readonly onDidChangeEntries: Event<void> = this._onDidChangeEntries.event;\n\n\tconstructor(\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IContextKeyService private contextKeyService: IContextKeyService,\n\t\t@IMenuService private menuService: IMenuService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\t// Set initial connection state\n\t\tif (this.remoteAuthority) {\n\t\t\tthis.connectionState = 'initializing';\n\t\t\tthis.connectionStateContextKey.set(this.connectionState);\n\t\t} else {\n\t\t\tthis.updateVirtualWorkspaceLocation();\n\t\t}\n\n\t\tthis.registerActions();\n\t\tthis.registerListeners();\n\n\t\tthis.updateWhenInstalledExtensionsRegistered();\n\t\tthis.updateRemoteStatusIndicator();\n\t}\n\n\tprivate registerActions(): void {\n\t\tconst category = nls.localize2('remote.category', \"Remote\");\n\n\t\t// Show Remote Menu\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteStatusIndicator.REMOTE_ACTIONS_COMMAND_ID,\n\t\t\t\t\tcategory,\n\t\t\t\t\ttitle: nls.localize2('remote.showMenu', \"Show Remote Menu\"),\n\t\t\t\t\tf1: true,\n\t\t\t\t\tkeybinding: {\n\t\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyO,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\trun = () => that.showRemoteMenu();\n\t\t}));\n\n\t\t// Close Remote Connection\n\t\tif (RemoteStatusIndicator.SHOW_CLOSE_REMOTE_COMMAND_ID) {\n\t\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: RemoteStatusIndicator.CLOSE_REMOTE_COMMAND_ID,\n\t\t\t\t\t\tcategory,\n\t\t\t\t\t\ttitle: nls.localize2('remote.close', \"Close Remote Connection\"),\n\t\t\t\t\t\tf1: true,\n\t\t\t\t\t\tprecondition: ContextKeyExpr.or(RemoteNameContext, VirtualWorkspaceContext)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\trun = () => that.hostService.openWindow({ forceReuseWindow: true, remoteAuthority: null });\n\t\t\t}));\n\t\t\tif (this.remoteAuthority) {\n\t\t\t\tMenuRegistry.appendMenuItem(MenuId.MenubarFileMenu, {\n\t\t\t\t\tgroup: '6_close',\n\t\t\t\t\tcommand: {\n\t\t\t\t\t\tid: RemoteStatusIndicator.CLOSE_REMOTE_COMMAND_ID,\n\t\t\t\t\t\ttitle: nls.localize({ key: 'miCloseRemote', comment: ['&& denotes a mnemonic'] }, \"Close Re&&mote Connection\")\n\t\t\t\t\t},\n\t\t\t\t\torder: 3.5\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (this.extensionGalleryService.isEnabled()) {\n\t\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: RemoteStatusIndicator.INSTALL_REMOTE_EXTENSIONS_ID,\n\t\t\t\t\t\tcategory,\n\t\t\t\t\t\ttitle: nls.localize2('remote.install', \"Install Remote Development Extensions\"),\n\t\t\t\t\t\tf1: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\trun = (accessor: ServicesAccessor, input: string) => {\n\t\t\t\t\tconst extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);\n\t\t\t\t\treturn extensionsWorkbenchService.openSearch(`@recommended:remotes`);\n\t\t\t\t};\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Menu changes\n\t\tconst updateRemoteActions = () => {\n\t\t\tthis.remoteMenuActionsGroups = undefined;\n\t\t\tthis.updateRemoteStatusIndicator();\n\t\t};\n\n\t\tthis._register(this.legacyIndicatorMenu.onDidChange(updateRemoteActions));\n\t\tthis._register(this.remoteIndicatorMenu.onDidChange(updateRemoteActions));\n\n\t\t// Update indicator when formatter changes as it may have an impact on the remote label\n\t\tthis._register(this.labelService.onDidChangeFormatters(() => this.updateRemoteStatusIndicator()));\n\n\t\t// Update based on remote indicator changes if any\n\t\tconst remoteIndicator = this.environmentService.options?.windowIndicator;\n\t\tif (remoteIndicator && remoteIndicator.onDidChange) {\n\t\t\tthis._register(remoteIndicator.onDidChange(() => this.updateRemoteStatusIndicator()));\n\t\t}\n\n\t\t// Listen to changes of the connection\n\t\tif (this.remoteAuthority) {\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\tthis._register(connection.onDidStateChange((e) => {\n\t\t\t\t\tswitch (e.type) {\n\t\t\t\t\t\tcase PersistentConnectionEventType.ConnectionLost:\n\t\t\t\t\t\tcase PersistentConnectionEventType.ReconnectionRunning:\n\t\t\t\t\t\tcase PersistentConnectionEventType.ReconnectionWait:\n\t\t\t\t\t\t\tthis.setConnectionState('reconnecting');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase PersistentConnectionEventType.ReconnectionPermanentFailure:\n\t\t\t\t\t\t\tthis.setConnectionState('disconnected');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase PersistentConnectionEventType.ConnectionGain:\n\t\t\t\t\t\t\tthis.setConnectionState('connected');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t} else {\n\t\t\tthis._register(this.workspaceContextService.onDidChangeWorkbenchState(() => {\n\t\t\t\tthis.updateVirtualWorkspaceLocation();\n\t\t\t\tthis.updateRemoteStatusIndicator();\n\t\t\t}));\n\t\t}\n\n\t\t// Online / Offline changes (web only)\n\t\tif (isWeb) {\n\t\t\tthis._register(Event.any(\n\t\t\t\tthis._register(new DomEmitter(mainWindow, 'online')).event,\n\t\t\t\tthis._register(new DomEmitter(mainWindow, 'offline')).event\n\t\t\t)(() => this.setNetworkState(navigator.onLine ? 'online' : 'offline')));\n\t\t}\n\n\t\tthis._register(this.extensionService.onDidChangeExtensions(async (result) => {\n\t\t\tfor (const ext of result.added) {\n\t\t\t\tconst index = this.remoteExtensionMetadata.findIndex(value => ExtensionIdentifier.equals(value.id, ext.identifier));\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.remoteExtensionMetadata[index].installed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.extensionManagementService.onDidUninstallExtension(async (result) => {\n\t\t\tconst index = this.remoteExtensionMetadata.findIndex(value => ExtensionIdentifier.equals(value.id, result.identifier.id));\n\t\t\tif (index > -1) {\n\t\t\t\tthis.remoteExtensionMetadata[index].installed = false;\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async initializeRemoteMetadata(): Promise<void> {\n\n\t\tif (this.remoteMetadataInitialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentPlatform = PlatformToString(platform);\n\t\tfor (let i = 0; i < this.remoteExtensionMetadata.length; i++) {\n\t\t\tconst extensionId = this.remoteExtensionMetadata[i].id;\n\t\t\tconst supportedPlatforms = this.remoteExtensionMetadata[i].supportedPlatforms;\n\t\t\tconst isInstalled = (await this.extensionManagementService.getInstalled()).find(value => ExtensionIdentifier.equals(value.identifier.id, extensionId)) ? true : false;\n\n\t\t\tthis.remoteExtensionMetadata[i].installed = isInstalled;\n\t\t\tif (isInstalled) {\n\t\t\t\tthis.remoteExtensionMetadata[i].isPlatformCompatible = true;\n\t\t\t}\n\t\t\telse if (supportedPlatforms && !supportedPlatforms.includes(currentPlatform)) {\n\t\t\t\tthis.remoteExtensionMetadata[i].isPlatformCompatible = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.remoteExtensionMetadata[i].isPlatformCompatible = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.remoteMetadataInitialized = true;\n\t\tthis._onDidChangeEntries.fire();\n\t\tthis.updateRemoteStatusIndicator();\n\t}\n\n\tprivate updateVirtualWorkspaceLocation() {\n\t\tthis.virtualWorkspaceLocation = getVirtualWorkspaceLocation(this.workspaceContextService.getWorkspace());\n\t}\n\n\tprivate async updateWhenInstalledExtensionsRegistered(): Promise<void> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tconst remoteAuthority = this.remoteAuthority;\n\t\tif (remoteAuthority) {\n\n\t\t\t// Try to resolve the authority to figure out connection state\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { authority } = await this.remoteAuthorityResolverService.resolveAuthority(remoteAuthority);\n\t\t\t\t\tthis.connectionToken = authority.connectionToken;\n\n\t\t\t\t\tthis.setConnectionState('connected');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.setConnectionState('disconnected');\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\tthis.updateRemoteStatusIndicator();\n\t\tthis.initializeRemoteMetadata();\n\t}\n\n\tprivate setConnectionState(newState: 'disconnected' | 'connected' | 'reconnecting'): void {\n\t\tif (this.connectionState !== newState) {\n\t\t\tthis.connectionState = newState;\n\n\t\t\t// simplify context key which doesn't support `connecting`\n\t\t\tif (this.connectionState === 'reconnecting') {\n\t\t\t\tthis.connectionStateContextKey.set('disconnected');\n\t\t\t} else {\n\t\t\t\tthis.connectionStateContextKey.set(this.connectionState);\n\t\t\t}\n\n\t\t\t// indicate status\n\t\t\tthis.updateRemoteStatusIndicator();\n\n\t\t\t// start measuring connection latency once connected\n\t\t\tif (newState === 'connected') {\n\t\t\t\tthis.scheduleMeasureNetworkConnectionLatency();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate scheduleMeasureNetworkConnectionLatency(): void {\n\t\tif (\n\t\t\t!this.remoteAuthority ||\t\t\t\t\t\t// only when having a remote connection\n\t\t\tthis.measureNetworkConnectionLatencyScheduler\t// already scheduled\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.measureNetworkConnectionLatencyScheduler = this._register(new RunOnceScheduler(() => this.measureNetworkConnectionLatency(), RemoteStatusIndicator.REMOTE_CONNECTION_LATENCY_SCHEDULER_DELAY));\n\t\tthis.measureNetworkConnectionLatencyScheduler.schedule(RemoteStatusIndicator.REMOTE_CONNECTION_LATENCY_SCHEDULER_FIRST_RUN_DELAY);\n\t}\n\n\tprivate async measureNetworkConnectionLatency(): Promise<void> {\n\n\t\t// Measure latency if we are online\n\t\t// but only when the window has focus to prevent constantly\n\t\t// waking up the connection to the remote\n\n\t\tif (this.hostService.hasFocus && this.networkState !== 'offline') {\n\t\t\tconst measurement = await remoteConnectionLatencyMeasurer.measure(this.remoteAgentService);\n\t\t\tif (measurement) {\n\t\t\t\tif (measurement.high) {\n\t\t\t\t\tthis.setNetworkState('high-latency');\n\t\t\t\t} else if (this.networkState === 'high-latency') {\n\t\t\t\t\tthis.setNetworkState('online');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.measureNetworkConnectionLatencyScheduler?.schedule();\n\t}\n\n\tprivate setNetworkState(newState: 'online' | 'offline' | 'high-latency'): void {\n\t\tif (this.networkState !== newState) {\n\t\t\tconst oldState = this.networkState;\n\t\t\tthis.networkState = newState;\n\n\t\t\tif (newState === 'high-latency') {\n\t\t\t\tthis.logService.warn(`Remote network connection appears to have high latency (${remoteConnectionLatencyMeasurer.latency?.current?.toFixed(2)}ms last, ${remoteConnectionLatencyMeasurer.latency?.average?.toFixed(2)}ms average)`);\n\t\t\t}\n\n\t\t\tif (this.connectionToken) {\n\t\t\t\tif (newState === 'online' && oldState === 'high-latency') {\n\t\t\t\t\tthis.logNetworkConnectionHealthTelemetry(this.connectionToken, 'good');\n\t\t\t\t} else if (newState === 'high-latency' && oldState === 'online') {\n\t\t\t\t\tthis.logNetworkConnectionHealthTelemetry(this.connectionToken, 'poor');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update status\n\t\t\tthis.updateRemoteStatusIndicator();\n\t\t}\n\t}\n\n\tprivate logNetworkConnectionHealthTelemetry(connectionToken: string, connectionHealth: 'good' | 'poor'): void {\n\t\ttype RemoteConnectionHealthClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'The remote connection health has changed (round trip time)';\n\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\treconnectionToken: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the connection.' };\n\t\t\tconnectionHealth: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The health of the connection: good or poor.' };\n\t\t};\n\t\ttype RemoteConnectionHealthEvent = {\n\t\t\tremoteName: string | undefined;\n\t\t\treconnectionToken: string;\n\t\t\tconnectionHealth: 'good' | 'poor';\n\t\t};\n\t\tthis.telemetryService.publicLog2<RemoteConnectionHealthEvent, RemoteConnectionHealthClassification>('remoteConnectionHealth', {\n\t\t\tremoteName: getRemoteName(this.remoteAuthority),\n\t\t\treconnectionToken: connectionToken,\n\t\t\tconnectionHealth\n\t\t});\n\t}\n\n\tprivate validatedGroup(group: string) {\n\t\tif (!group.match(/^(remote|virtualfs)_(\\d\\d)_(([a-z][a-z0-9+.-]*)_(.*))$/)) {\n\t\t\tif (!this.loggedInvalidGroupNames[group]) {\n\t\t\t\tthis.loggedInvalidGroupNames[group] = true;\n\t\t\t\tthis.logService.warn(`Invalid group name used in \"statusBar/remoteIndicator\" menu contribution: ${group}. Entries ignored. Expected format: 'remote_$ORDER_$REMOTENAME_$GROUPING or 'virtualfs_$ORDER_$FILESCHEME_$GROUPING.`);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate getRemoteMenuActions(doNotUseCache?: boolean): ActionGroup[] {\n\t\tif (!this.remoteMenuActionsGroups || doNotUseCache) {\n\t\t\tthis.remoteMenuActionsGroups = this.remoteIndicatorMenu.getActions().filter(a => this.validatedGroup(a[0])).concat(this.legacyIndicatorMenu.getActions());\n\t\t}\n\t\treturn this.remoteMenuActionsGroups;\n\t}\n\n\tprivate updateRemoteStatusIndicator(): void {\n\n\t\t// Remote Indicator: show if provided via options, e.g. by the web embedder API\n\t\tconst remoteIndicator = this.environmentService.options?.windowIndicator;\n\t\tif (remoteIndicator) {\n\t\t\tlet remoteIndicatorLabel = remoteIndicator.label.trim();\n\t\t\tif (!remoteIndicatorLabel.startsWith('$(')) {\n\t\t\t\tremoteIndicatorLabel = `$(remote) ${remoteIndicatorLabel}`; // ensure the indicator has a codicon\n\t\t\t}\n\n\t\t\tthis.renderRemoteStatusIndicator(truncate(remoteIndicatorLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH), remoteIndicator.tooltip, remoteIndicator.command);\n\t\t\treturn;\n\t\t}\n\n\t\t// Show for remote windows on the desktop\n\t\tif (this.remoteAuthority) {\n\t\t\tconst hostLabel = this.labelService.getHostLabel(Schemas.vscodeRemote, this.remoteAuthority) || this.remoteAuthority;\n\t\t\tswitch (this.connectionState) {\n\t\t\t\tcase 'initializing':\n\t\t\t\t\tthis.renderRemoteStatusIndicator(nls.localize('host.open', \"Opening Remote...\"), nls.localize('host.open', \"Opening Remote...\"), undefined, true /* progress */);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'reconnecting':\n\t\t\t\t\tthis.renderRemoteStatusIndicator(`${nls.localize('host.reconnecting', \"Reconnecting to {0}...\", truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH))}`, undefined, undefined, true /* progress */);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.renderRemoteStatusIndicator(`$(alert) ${nls.localize('disconnectedFrom', \"Disconnected from {0}\", truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH))}`);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst tooltip = new MarkdownString('', { isTrusted: true, supportThemeIcons: true });\n\t\t\t\t\tconst hostNameTooltip = this.labelService.getHostTooltip(Schemas.vscodeRemote, this.remoteAuthority);\n\t\t\t\t\tif (hostNameTooltip) {\n\t\t\t\t\t\ttooltip.appendMarkdown(hostNameTooltip);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttooltip.appendText(nls.localize({ key: 'host.tooltip', comment: ['{0} is a remote host name, e.g. Dev Container'] }, \"Editing on {0}\", hostLabel));\n\t\t\t\t\t}\n\t\t\t\t\tthis.renderRemoteStatusIndicator(`$(remote) ${truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH)}`, tooltip);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t// Show when in a virtual workspace\n\t\tif (this.virtualWorkspaceLocation) {\n\n\t\t\t// Workspace with label: indicate editing source\n\t\t\tconst workspaceLabel = this.labelService.getHostLabel(this.virtualWorkspaceLocation.scheme, this.virtualWorkspaceLocation.authority);\n\t\t\tif (workspaceLabel) {\n\t\t\t\tconst tooltip = new MarkdownString('', { isTrusted: true, supportThemeIcons: true });\n\t\t\t\tconst hostNameTooltip = this.labelService.getHostTooltip(this.virtualWorkspaceLocation.scheme, this.virtualWorkspaceLocation.authority);\n\t\t\t\tif (hostNameTooltip) {\n\t\t\t\t\ttooltip.appendMarkdown(hostNameTooltip);\n\t\t\t\t} else {\n\t\t\t\t\ttooltip.appendText(nls.localize({ key: 'workspace.tooltip', comment: ['{0} is a remote workspace name, e.g. GitHub'] }, \"Editing on {0}\", workspaceLabel));\n\t\t\t\t}\n\t\t\t\tif (!isWeb || this.remoteAuthority) {\n\t\t\t\t\ttooltip.appendMarkdown('\\n\\n');\n\t\t\t\t\ttooltip.appendMarkdown(nls.localize(\n\t\t\t\t\t\t{ key: 'workspace.tooltip2', comment: ['[features are not available]({1}) is a link. Only translate `features are not available`. Do not change brackets and parentheses or {0}'] },\n\t\t\t\t\t\t\"Some [features are not available]({0}) for resources located on a virtual file system.\",\n\t\t\t\t\t\t`command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t\tthis.renderRemoteStatusIndicator(`$(remote) ${truncate(workspaceLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH)}`, tooltip);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.renderRemoteStatusIndicator(`$(remote)`, nls.localize('noHost.tooltip', \"Open a Remote Window\"));\n\t\treturn;\n\t}\n\n\tprivate renderRemoteStatusIndicator(initialText: string, initialTooltip?: string | MarkdownString, command?: string, showProgress?: boolean): void {\n\t\tconst { text, tooltip, ariaLabel } = this.withNetworkStatus(initialText, initialTooltip, showProgress);\n\n\t\tconst properties: IStatusbarEntry = {\n\t\t\tname: nls.localize('remoteHost', \"Remote Host\"),\n\t\t\tkind: this.networkState === 'offline' ? 'offline' : 'remote',\n\t\t\tariaLabel,\n\t\t\ttext,\n\t\t\tshowProgress,\n\t\t\ttooltip,\n\t\t\tcommand: command ?? RemoteStatusIndicator.REMOTE_ACTIONS_COMMAND_ID\n\t\t};\n\n\t\tif (this.remoteStatusEntry) {\n\t\t\tthis.remoteStatusEntry.update(properties);\n\t\t} else {\n\t\t\tthis.remoteStatusEntry = this.statusbarService.addEntry(properties, 'status.host', StatusbarAlignment.LEFT, Number.MAX_VALUE /* first entry */);\n\t\t}\n\t}\n\n\tprivate withNetworkStatus(initialText: string, initialTooltip?: string | MarkdownString, showProgress?: boolean): { text: string; tooltip: string | IMarkdownString | undefined; ariaLabel: string } {\n\t\tlet text = initialText;\n\t\tlet tooltip = initialTooltip;\n\t\tlet ariaLabel = getCodiconAriaLabel(text);\n\n\t\tfunction textWithAlert(): string {\n\n\t\t\t// `initialText` can have a codicon in the beginning that already\n\t\t\t// indicates some kind of status, or we may have been asked to\n\t\t\t// show progress, where a spinning codicon appears. we only want\n\t\t\t// to replace with an alert icon for when a normal remote indicator\n\t\t\t// is shown.\n\n\t\t\tif (!showProgress && initialText.startsWith('$(remote)')) {\n\t\t\t\treturn initialText.replace('$(remote)', '$(alert)');\n\t\t\t}\n\n\t\t\treturn initialText;\n\t\t}\n\n\t\tswitch (this.networkState) {\n\t\t\tcase 'offline': {\n\t\t\t\tconst offlineMessage = nls.localize('networkStatusOfflineTooltip', \"Network appears to be offline, certain features might be unavailable.\");\n\n\t\t\t\ttext = textWithAlert();\n\t\t\t\ttooltip = this.appendTooltipLine(tooltip, offlineMessage);\n\t\t\t\tariaLabel = `${ariaLabel}, ${offlineMessage}`;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'high-latency':\n\t\t\t\ttext = textWithAlert();\n\t\t\t\ttooltip = this.appendTooltipLine(tooltip, nls.localize('networkStatusHighLatencyTooltip', \"Network appears to have high latency ({0}ms last, {1}ms average), certain features may be slow to respond.\", remoteConnectionLatencyMeasurer.latency?.current?.toFixed(2), remoteConnectionLatencyMeasurer.latency?.average?.toFixed(2)));\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn { text, tooltip, ariaLabel };\n\t}\n\n\tprivate appendTooltipLine(tooltip: string | MarkdownString | undefined, line: string): MarkdownString {\n\t\tlet markdownTooltip: MarkdownString;\n\t\tif (typeof tooltip === 'string') {\n\t\t\tmarkdownTooltip = new MarkdownString(tooltip, { isTrusted: true, supportThemeIcons: true });\n\t\t} else {\n\t\t\tmarkdownTooltip = tooltip ?? new MarkdownString('', { isTrusted: true, supportThemeIcons: true });\n\t\t}\n\n\t\tif (markdownTooltip.value.length > 0) {\n\t\t\tmarkdownTooltip.appendMarkdown('\\n\\n');\n\t\t}\n\n\t\tmarkdownTooltip.appendMarkdown(line);\n\n\t\treturn markdownTooltip;\n\t}\n\n\tprivate async installExtension(extensionId: string) {\n\t\tconst galleryExtension = (await this.extensionGalleryService.getExtensions([{ id: extensionId }], CancellationToken.None))[0];\n\n\t\tawait this.extensionManagementService.installFromGallery(galleryExtension, {\n\t\t\tisMachineScoped: false,\n\t\t\tdonotIncludePackAndDependencies: false,\n\t\t\tcontext: { [EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT]: true }\n\t\t});\n\t}\n\n\tprivate async runRemoteStartCommand(extensionId: string, startCommand: string) {\n\n\t\t// check to ensure the extension is installed\n\t\tawait retry(async () => {\n\t\t\tconst ext = await this.extensionService.getExtension(extensionId);\n\t\t\tif (!ext) {\n\t\t\t\tthrow Error('Failed to find installed remote extension');\n\t\t\t}\n\t\t\treturn ext;\n\t\t}, 300, 10);\n\n\t\tthis.commandService.executeCommand(startCommand);\n\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', {\n\t\t\tid: 'remoteInstallAndRun',\n\t\t\tdetail: extensionId,\n\t\t\tfrom: 'remote indicator'\n\t\t});\n\t}\n\n\tprivate showRemoteMenu() {\n\t\tconst getCategoryLabel = (action: MenuItemAction) => {\n\t\t\tif (action.item.category) {\n\t\t\t\treturn typeof action.item.category === 'string' ? action.item.category : action.item.category.value;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst matchCurrentRemote = () => {\n\t\t\tif (this.remoteAuthority) {\n\t\t\t\treturn new RegExp(`^remote_\\\\d\\\\d_${getRemoteName(this.remoteAuthority)}_`);\n\t\t\t} else if (this.virtualWorkspaceLocation) {\n\t\t\t\treturn new RegExp(`^virtualfs_\\\\d\\\\d_${this.virtualWorkspaceLocation.scheme}_`);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst computeItems = () => {\n\t\t\tlet actionGroups = this.getRemoteMenuActions(true);\n\n\t\t\tconst items: QuickPickItem[] = [];\n\n\t\t\tconst currentRemoteMatcher = matchCurrentRemote();\n\t\t\tif (currentRemoteMatcher) {\n\t\t\t\t// commands for the current remote go first\n\t\t\t\tactionGroups = actionGroups.sort((g1, g2) => {\n\t\t\t\t\tconst isCurrentRemote1 = currentRemoteMatcher.test(g1[0]);\n\t\t\t\t\tconst isCurrentRemote2 = currentRemoteMatcher.test(g2[0]);\n\t\t\t\t\tif (isCurrentRemote1 !== isCurrentRemote2) {\n\t\t\t\t\t\treturn isCurrentRemote1 ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\t// legacy indicator commands go last\n\t\t\t\t\tif (g1[0] !== '' && g2[0] === '') {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else if (g1[0] === '' && g2[0] !== '') {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn g1[0].localeCompare(g2[0]);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet lastCategoryName: string | undefined = undefined;\n\n\t\t\tfor (const actionGroup of actionGroups) {\n\t\t\t\tlet hasGroupCategory = false;\n\t\t\t\tfor (const action of actionGroup[1]) {\n\t\t\t\t\tif (action instanceof MenuItemAction) {\n\t\t\t\t\t\tif (!hasGroupCategory) {\n\t\t\t\t\t\t\tconst category = getCategoryLabel(action);\n\t\t\t\t\t\t\tif (category !== lastCategoryName) {\n\t\t\t\t\t\t\t\titems.push({ type: 'separator', label: category });\n\t\t\t\t\t\t\t\tlastCategoryName = category;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thasGroupCategory = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst label = typeof action.item.title === 'string' ? action.item.title : action.item.title.value;\n\t\t\t\t\t\titems.push({\n\t\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\t\tid: action.item.id,\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst showExtensionRecommendations = this.configurationService.getValue<boolean>('workbench.remoteIndicator.showExtensionRecommendations');\n\t\t\tif (showExtensionRecommendations && this.extensionGalleryService.isEnabled() && this.remoteMetadataInitialized) {\n\n\t\t\t\tconst notInstalledItems: QuickPickItem[] = [];\n\t\t\t\tfor (const metadata of this.remoteExtensionMetadata) {\n\t\t\t\t\tif (!metadata.installed && metadata.isPlatformCompatible) {\n\t\t\t\t\t\t// Create Install QuickPick with a help link\n\t\t\t\t\t\tconst label = metadata.startConnectLabel;\n\t\t\t\t\t\tconst buttons: IQuickInputButton[] = [{\n\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(infoIcon),\n\t\t\t\t\t\t\ttooltip: nls.localize('remote.startActions.help', \"Learn More\")\n\t\t\t\t\t\t}];\n\t\t\t\t\t\tnotInstalledItems.push({ type: 'item', id: metadata.id, label: label, buttons: buttons });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titems.push({\n\t\t\t\t\ttype: 'separator', label: nls.localize('remote.startActions.install', 'Install')\n\t\t\t\t});\n\t\t\t\titems.push(...notInstalledItems);\n\t\t\t}\n\n\t\t\titems.push({\n\t\t\t\ttype: 'separator'\n\t\t\t});\n\n\t\t\tconst entriesBeforeConfig = items.length;\n\n\t\t\tif (RemoteStatusIndicator.SHOW_CLOSE_REMOTE_COMMAND_ID) {\n\t\t\t\tif (this.remoteAuthority) {\n\t\t\t\t\titems.push({\n\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\tid: RemoteStatusIndicator.CLOSE_REMOTE_COMMAND_ID,\n\t\t\t\t\t\tlabel: nls.localize('closeRemoteConnection.title', 'Close Remote Connection')\n\t\t\t\t\t});\n\n\t\t\t\t\tif (this.connectionState === 'disconnected') {\n\t\t\t\t\t\titems.push({\n\t\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\t\tid: ReloadWindowAction.ID,\n\t\t\t\t\t\t\tlabel: nls.localize('reloadWindow', 'Reload Window')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else if (this.virtualWorkspaceLocation) {\n\t\t\t\t\titems.push({\n\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\tid: RemoteStatusIndicator.CLOSE_REMOTE_COMMAND_ID,\n\t\t\t\t\t\tlabel: nls.localize('closeVirtualWorkspace.title', 'Close Remote Workspace')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (items.length === entriesBeforeConfig) {\n\t\t\t\titems.pop(); // remove the separator again\n\t\t\t}\n\n\t\t\treturn items;\n\t\t};\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickPick = disposables.add(this.quickInputService.createQuickPick({ useSeparators: true }));\n\t\tquickPick.placeholder = nls.localize('remoteActions', \"Select an option to open a Remote Window\");\n\t\tquickPick.items = computeItems();\n\t\tquickPick.sortByLabel = false;\n\t\tquickPick.canSelectMany = false;\n\t\tdisposables.add(Event.once(quickPick.onDidAccept)((async _ => {\n\t\t\tconst selectedItems = quickPick.selectedItems;\n\t\t\tif (selectedItems.length === 1) {\n\t\t\t\tconst commandId = selectedItems[0].id!;\n\t\t\t\tconst remoteExtension = this.remoteExtensionMetadata.find(value => ExtensionIdentifier.equals(value.id, commandId));\n\t\t\t\tif (remoteExtension) {\n\t\t\t\t\tquickPick.items = [];\n\t\t\t\t\tquickPick.busy = true;\n\t\t\t\t\tquickPick.placeholder = nls.localize('remote.startActions.installingExtension', 'Installing extension... ');\n\n\t\t\t\t\tawait this.installExtension(remoteExtension.id);\n\t\t\t\t\tquickPick.hide();\n\t\t\t\t\tawait this.runRemoteStartCommand(remoteExtension.id, remoteExtension.startCommand);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', {\n\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\tfrom: 'remote indicator'\n\t\t\t\t\t});\n\t\t\t\t\tthis.commandService.executeCommand(commandId);\n\t\t\t\t\tquickPick.hide();\n\t\t\t\t}\n\t\t\t}\n\t\t})));\n\n\t\tdisposables.add(Event.once(quickPick.onDidTriggerItemButton)(async (e) => {\n\t\t\tconst remoteExtension = this.remoteExtensionMetadata.find(value => ExtensionIdentifier.equals(value.id, e.item.id));\n\t\t\tif (remoteExtension) {\n\t\t\t\tawait this.openerService.open(URI.parse(remoteExtension.helpLink));\n\t\t\t}\n\t\t}));\n\n\t\t// refresh the items when actions change\n\t\tdisposables.add(this.legacyIndicatorMenu.onDidChange(() => quickPick.items = computeItems()));\n\t\tdisposables.add(this.remoteIndicatorMenu.onDidChange(() => quickPick.items = computeItems()));\n\n\t\tdisposables.add(quickPick.onDidHide(() => disposables.dispose()));\n\n\t\tif (!this.remoteMetadataInitialized) {\n\t\t\tquickPick.busy = true;\n\t\t\tthis._register(this.onDidChangeEntries(() => {\n\t\t\t\t// If quick pick is open, update the quick pick items after initialization.\n\t\t\t\tquickPick.busy = false;\n\t\t\t\tquickPick.items = computeItems();\n\t\t\t}));\n\t\t}\n\n\t\tquickPick.show();\n\t}\n}\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t.registerConfiguration({\n\t\t...workbenchConfigurationNodeBase,\n\t\tproperties: {\n\t\t\t'workbench.remoteIndicator.showExtensionRecommendations': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tmarkdownDescription: nls.localize('remote.showExtensionRecommendations', \"When enabled, remote extensions recommendations will be shown in the Remote Indicator menu.\"),\n\t\t\t\tdefault: true\n\t\t\t},\n\t\t}\n\t});\n"],
  "mappings": "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",
  "names": []
}
