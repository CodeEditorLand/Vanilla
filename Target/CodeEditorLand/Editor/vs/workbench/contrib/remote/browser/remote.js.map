{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remote.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/remoteViewlet.css';\nimport * as nls from '../../../../nls.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IExtensionService, isProposedApiEnabled } from '../../../services/extensions/common/extensions.js';\nimport { FilterViewPaneContainer } from '../../../browser/parts/views/viewsViewlet.js';\nimport { VIEWLET_ID } from './remoteExplorer.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IViewDescriptor, IViewsRegistry, Extensions, ViewContainerLocation, IViewContainersRegistry, IViewDescriptorService } from '../../../common/views.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IProgress, IProgressStep, IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ReconnectionWaitEvent, PersistentConnectionEventType } from '../../../../platform/remote/common/remoteAgentConnection.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { ReloadWindowAction } from '../../../browser/actions/windowActions.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { SwitchRemoteViewItem } from './explorerViewItems.js';\nimport { isStringArray } from '../../../../base/common/types.js';\nimport { HelpInformation, IRemoteExplorerService } from '../../../services/remote/common/remoteExplorerService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { ViewPane, IViewPaneOptions } from '../../../browser/parts/views/viewPane.js';\nimport { IListVirtualDelegate } from '../../../../base/browser/ui/list/list.js';\nimport { ITreeRenderer, ITreeNode, IAsyncDataSource } from '../../../../base/browser/ui/tree/tree.js';\nimport { WorkbenchAsyncDataTree } from '../../../../platform/list/browser/listService.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { IExtensionPointUser } from '../../../services/extensions/common/extensionsRegistry.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport * as icons from './remoteIcons.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITimerService } from '../../../services/timer/browser/timerService.js';\nimport { getRemoteName } from '../../../../platform/remote/common/remoteHosts.js';\nimport { getVirtualWorkspaceLocation } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { IWalkthroughsService } from '../../welcomeGettingStarted/browser/gettingStartedService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\n\ninterface IViewModel {\n\tonDidChangeHelpInformation: Event<void>;\n\thelpInformation: HelpInformation[];\n}\n\nclass HelpTreeVirtualDelegate implements IListVirtualDelegate<IHelpItem> {\n\tgetHeight(element: IHelpItem): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: IHelpItem): string {\n\t\treturn 'HelpItemTemplate';\n\t}\n}\n\ninterface IHelpItemTemplateData {\n\tparent: HTMLElement;\n\ticon: HTMLElement;\n}\n\nclass HelpTreeRenderer implements ITreeRenderer<HelpModel | IHelpItem, IHelpItem, IHelpItemTemplateData> {\n\ttemplateId: string = 'HelpItemTemplate';\n\n\trenderTemplate(container: HTMLElement): IHelpItemTemplateData {\n\t\tcontainer.classList.add('remote-help-tree-node-item');\n\t\tconst icon = dom.append(container, dom.$('.remote-help-tree-node-item-icon'));\n\t\tconst parent = container;\n\t\treturn { parent, icon };\n\t}\n\n\trenderElement(element: ITreeNode<IHelpItem, IHelpItem>, index: number, templateData: IHelpItemTemplateData, height: number | undefined): void {\n\t\tconst container = templateData.parent;\n\t\tdom.append(container, templateData.icon);\n\t\ttemplateData.icon.classList.add(...element.element.iconClasses);\n\t\tconst labelContainer = dom.append(container, dom.$('.help-item-label'));\n\t\tlabelContainer.innerText = element.element.label;\n\t}\n\n\tdisposeTemplate(templateData: IHelpItemTemplateData): void {\n\n\t}\n}\n\nclass HelpDataSource implements IAsyncDataSource<HelpModel, IHelpItem> {\n\thasChildren(element: HelpModel) {\n\t\treturn element instanceof HelpModel;\n\t}\n\n\tgetChildren(element: HelpModel) {\n\t\tif (element instanceof HelpModel && element.items) {\n\t\t\treturn element.items;\n\t\t}\n\n\t\treturn [];\n\t}\n}\ninterface IHelpItem {\n\ticon: ThemeIcon;\n\ticonClasses: string[];\n\tlabel: string;\n\tvalues: HelpItemValue[];\n\thandleClick(): Promise<void>;\n}\n\nclass HelpModel {\n\titems: IHelpItem[] | undefined;\n\n\tconstructor(\n\t\tprivate viewModel: IViewModel,\n\t\tprivate openerService: IOpenerService,\n\t\tprivate quickInputService: IQuickInputService,\n\t\tprivate commandService: ICommandService,\n\t\tprivate remoteExplorerService: IRemoteExplorerService,\n\t\tprivate environmentService: IWorkbenchEnvironmentService,\n\t\tprivate workspaceContextService: IWorkspaceContextService,\n\t\tprivate walkthroughsService: IWalkthroughsService\n\t) {\n\t\tthis.updateItems();\n\t\tviewModel.onDidChangeHelpInformation(() => this.updateItems());\n\t}\n\n\tprivate createHelpItemValue(info: HelpInformation, infoKey: Exclude<keyof HelpInformation, 'extensionDescription' | 'remoteName' | 'virtualWorkspace'>) {\n\t\treturn new HelpItemValue(this.commandService,\n\t\t\tthis.walkthroughsService,\n\t\t\tinfo.extensionDescription,\n\t\t\t(typeof info.remoteName === 'string') ? [info.remoteName] : info.remoteName,\n\t\t\tinfo.virtualWorkspace,\n\t\t\tinfo[infoKey]);\n\t}\n\n\tprivate updateItems() {\n\t\tconst helpItems: IHelpItem[] = [];\n\n\t\tconst getStarted = this.viewModel.helpInformation.filter(info => info.getStarted);\n\t\tif (getStarted.length) {\n\t\t\tconst helpItemValues = getStarted.map((info: HelpInformation) => this.createHelpItemValue(info, 'getStarted'));\n\t\t\tconst getStartedHelpItem = this.items?.find(item => item.icon === icons.getStartedIcon) ?? new GetStartedHelpItem(\n\t\t\t\ticons.getStartedIcon,\n\t\t\t\tnls.localize('remote.help.getStarted', \"Get Started\"),\n\t\t\t\thelpItemValues,\n\t\t\t\tthis.quickInputService,\n\t\t\t\tthis.environmentService,\n\t\t\t\tthis.openerService,\n\t\t\t\tthis.remoteExplorerService,\n\t\t\t\tthis.workspaceContextService,\n\t\t\t\tthis.commandService\n\t\t\t);\n\t\t\tgetStartedHelpItem.values = helpItemValues;\n\t\t\thelpItems.push(getStartedHelpItem);\n\t\t}\n\n\t\tconst documentation = this.viewModel.helpInformation.filter(info => info.documentation);\n\t\tif (documentation.length) {\n\t\t\tconst helpItemValues = documentation.map((info: HelpInformation) => this.createHelpItemValue(info, 'documentation'));\n\t\t\tconst documentationHelpItem = this.items?.find(item => item.icon === icons.documentationIcon) ?? new HelpItem(\n\t\t\t\ticons.documentationIcon,\n\t\t\t\tnls.localize('remote.help.documentation', \"Read Documentation\"),\n\t\t\t\thelpItemValues,\n\t\t\t\tthis.quickInputService,\n\t\t\t\tthis.environmentService,\n\t\t\t\tthis.openerService,\n\t\t\t\tthis.remoteExplorerService,\n\t\t\t\tthis.workspaceContextService\n\t\t\t);\n\t\t\tdocumentationHelpItem.values = helpItemValues;\n\t\t\thelpItems.push(documentationHelpItem);\n\t\t}\n\n\t\tconst issues = this.viewModel.helpInformation.filter(info => info.issues);\n\t\tif (issues.length) {\n\t\t\tconst helpItemValues = issues.map((info: HelpInformation) => this.createHelpItemValue(info, 'issues'));\n\t\t\tconst reviewIssuesHelpItem = this.items?.find(item => item.icon === icons.reviewIssuesIcon) ?? new HelpItem(\n\t\t\t\ticons.reviewIssuesIcon,\n\t\t\t\tnls.localize('remote.help.issues', \"Review Issues\"),\n\t\t\t\thelpItemValues,\n\t\t\t\tthis.quickInputService,\n\t\t\t\tthis.environmentService,\n\t\t\t\tthis.openerService,\n\t\t\t\tthis.remoteExplorerService,\n\t\t\t\tthis.workspaceContextService\n\t\t\t);\n\t\t\treviewIssuesHelpItem.values = helpItemValues;\n\t\t\thelpItems.push(reviewIssuesHelpItem);\n\t\t}\n\n\t\tif (helpItems.length) {\n\t\t\tconst helpItemValues = this.viewModel.helpInformation.map(info => this.createHelpItemValue(info, 'reportIssue'));\n\t\t\tconst issueReporterItem = this.items?.find(item => item.icon === icons.reportIssuesIcon) ?? new IssueReporterItem(\n\t\t\t\ticons.reportIssuesIcon,\n\t\t\t\tnls.localize('remote.help.report', \"Report Issue\"),\n\t\t\t\thelpItemValues,\n\t\t\t\tthis.quickInputService,\n\t\t\t\tthis.environmentService,\n\t\t\t\tthis.commandService,\n\t\t\t\tthis.openerService,\n\t\t\t\tthis.remoteExplorerService,\n\t\t\t\tthis.workspaceContextService\n\t\t\t);\n\t\t\tissueReporterItem.values = helpItemValues;\n\t\t\thelpItems.push(issueReporterItem);\n\t\t}\n\n\t\tif (helpItems.length) {\n\t\t\tthis.items = helpItems;\n\t\t}\n\t}\n}\n\nclass HelpItemValue {\n\tprivate _url: string | undefined;\n\tprivate _description: string | undefined;\n\n\tconstructor(private commandService: ICommandService, private walkthroughService: IWalkthroughsService, public extensionDescription: IExtensionDescription, public readonly remoteAuthority: string[] | undefined, public readonly virtualWorkspace: string | undefined, private urlOrCommandOrId?: string | { id: string }) {\n\t}\n\n\tget description(): Promise<string | undefined> {\n\t\treturn this.getUrl().then(() => this._description);\n\t}\n\n\tget url(): Promise<string> {\n\t\treturn this.getUrl();\n\t}\n\n\tprivate async getUrl(): Promise<string> {\n\t\tif (this._url === undefined) {\n\t\t\tif (typeof this.urlOrCommandOrId === 'string') {\n\t\t\t\tconst url = URI.parse(this.urlOrCommandOrId);\n\t\t\t\tif (url.authority) {\n\t\t\t\t\tthis._url = this.urlOrCommandOrId;\n\t\t\t\t} else {\n\t\t\t\t\tconst urlCommand: Promise<string | undefined> = this.commandService.executeCommand(this.urlOrCommandOrId).then((result) => {\n\t\t\t\t\t\t// if executing this command times out, cache its value whenever it eventually resolves\n\t\t\t\t\t\tthis._url = result;\n\t\t\t\t\t\treturn this._url;\n\t\t\t\t\t});\n\t\t\t\t\t// We must be defensive. The command may never return, meaning that no help at all is ever shown!\n\t\t\t\t\tconst emptyString: Promise<string> = new Promise(resolve => setTimeout(() => resolve(''), 500));\n\t\t\t\t\tthis._url = await Promise.race([urlCommand, emptyString]);\n\t\t\t\t}\n\t\t\t} else if (this.urlOrCommandOrId?.id) {\n\t\t\t\ttry {\n\t\t\t\t\tconst walkthroughId = `${this.extensionDescription.id}#${this.urlOrCommandOrId.id}`;\n\t\t\t\t\tconst walkthrough = await this.walkthroughService.getWalkthrough(walkthroughId);\n\t\t\t\t\tthis._description = walkthrough.title;\n\t\t\t\t\tthis._url = walkthroughId;\n\t\t\t\t} catch { }\n\t\t\t}\n\t\t}\n\t\tif (this._url === undefined) {\n\t\t\tthis._url = '';\n\t\t}\n\t\treturn this._url;\n\t}\n}\n\nabstract class HelpItemBase implements IHelpItem {\n\tpublic iconClasses: string[] = [];\n\tconstructor(\n\t\tpublic icon: ThemeIcon,\n\t\tpublic label: string,\n\t\tpublic values: HelpItemValue[],\n\t\tprivate quickInputService: IQuickInputService,\n\t\tprivate environmentService: IWorkbenchEnvironmentService,\n\t\tprivate remoteExplorerService: IRemoteExplorerService,\n\t\tprivate workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tthis.iconClasses.push(...ThemeIcon.asClassNameArray(icon));\n\t\tthis.iconClasses.push('remote-help-tree-node-item-icon');\n\t}\n\n\tprotected async getActions(): Promise<{\n\t\tlabel: string;\n\t\turl: string;\n\t\tdescription: string;\n\t\textensionDescription: IExtensionDescription;\n\t}[]> {\n\t\treturn (await Promise.all(this.values.map(async (value) => {\n\t\t\treturn {\n\t\t\t\tlabel: value.extensionDescription.displayName || value.extensionDescription.identifier.value,\n\t\t\t\tdescription: await value.description ?? await value.url,\n\t\t\t\turl: await value.url,\n\t\t\t\textensionDescription: value.extensionDescription\n\t\t\t};\n\t\t}))).filter(item => item.description);\n\t}\n\n\tasync handleClick() {\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (remoteAuthority) {\n\t\t\tfor (let i = 0; i < this.remoteExplorerService.targetType.length; i++) {\n\t\t\t\tif (remoteAuthority.startsWith(this.remoteExplorerService.targetType[i])) {\n\t\t\t\t\tfor (const value of this.values) {\n\t\t\t\t\t\tif (value.remoteAuthority) {\n\t\t\t\t\t\t\tfor (const authority of value.remoteAuthority) {\n\t\t\t\t\t\t\t\tif (remoteAuthority.startsWith(authority)) {\n\t\t\t\t\t\t\t\t\tawait this.takeAction(value.extensionDescription, await value.url);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst virtualWorkspace = getVirtualWorkspaceLocation(this.workspaceContextService.getWorkspace())?.scheme;\n\t\t\tif (virtualWorkspace) {\n\t\t\t\tfor (let i = 0; i < this.remoteExplorerService.targetType.length; i++) {\n\t\t\t\t\tfor (const value of this.values) {\n\t\t\t\t\t\tif (value.virtualWorkspace && value.remoteAuthority) {\n\t\t\t\t\t\t\tfor (const authority of value.remoteAuthority) {\n\t\t\t\t\t\t\t\tif (this.remoteExplorerService.targetType[i].startsWith(authority) && virtualWorkspace.startsWith(value.virtualWorkspace)) {\n\t\t\t\t\t\t\t\t\tawait this.takeAction(value.extensionDescription, await value.url);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.values.length > 1) {\n\t\t\tconst actions = await this.getActions();\n\n\t\t\tif (actions.length) {\n\t\t\t\tconst action = await this.quickInputService.pick(actions, { placeHolder: nls.localize('pickRemoteExtension', \"Select url to open\") });\n\t\t\t\tif (action) {\n\t\t\t\t\tawait this.takeAction(action.extensionDescription, action.url);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.takeAction(this.values[0].extensionDescription, await this.values[0].url);\n\t\t}\n\n\t}\n\n\tprotected abstract takeAction(extensionDescription: IExtensionDescription, url?: string): Promise<void>;\n}\n\nclass GetStartedHelpItem extends HelpItemBase {\n\tconstructor(\n\t\ticon: ThemeIcon,\n\t\tlabel: string,\n\t\tvalues: HelpItemValue[],\n\t\tquickInputService: IQuickInputService,\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\tprivate openerService: IOpenerService,\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\tworkspaceContextService: IWorkspaceContextService,\n\t\tprivate commandService: ICommandService\n\t) {\n\t\tsuper(icon, label, values, quickInputService, environmentService, remoteExplorerService, workspaceContextService);\n\t}\n\n\tprotected async takeAction(extensionDescription: IExtensionDescription, urlOrWalkthroughId: string): Promise<void> {\n\t\tif ([Schemas.http, Schemas.https].includes(URI.parse(urlOrWalkthroughId).scheme)) {\n\t\t\tthis.openerService.open(urlOrWalkthroughId, { allowCommands: true });\n\t\t\treturn;\n\t\t}\n\n\t\tthis.commandService.executeCommand('workbench.action.openWalkthrough', urlOrWalkthroughId);\n\t}\n}\n\nclass HelpItem extends HelpItemBase {\n\tconstructor(\n\t\ticon: ThemeIcon,\n\t\tlabel: string,\n\t\tvalues: HelpItemValue[],\n\t\tquickInputService: IQuickInputService,\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\tprivate openerService: IOpenerService,\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\tworkspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper(icon, label, values, quickInputService, environmentService, remoteExplorerService, workspaceContextService);\n\t}\n\n\tprotected async takeAction(extensionDescription: IExtensionDescription, url: string): Promise<void> {\n\t\tawait this.openerService.open(URI.parse(url), { allowCommands: true });\n\t}\n}\n\nclass IssueReporterItem extends HelpItemBase {\n\tconstructor(\n\t\ticon: ThemeIcon,\n\t\tlabel: string,\n\t\tvalues: HelpItemValue[],\n\t\tquickInputService: IQuickInputService,\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\tprivate commandService: ICommandService,\n\t\tprivate openerService: IOpenerService,\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\tworkspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper(icon, label, values, quickInputService, environmentService, remoteExplorerService, workspaceContextService);\n\t}\n\n\tprotected override async getActions(): Promise<{\n\t\tlabel: string;\n\t\tdescription: string;\n\t\turl: string;\n\t\textensionDescription: IExtensionDescription;\n\t}[]> {\n\t\treturn Promise.all(this.values.map(async (value) => {\n\t\t\treturn {\n\t\t\t\tlabel: value.extensionDescription.displayName || value.extensionDescription.identifier.value,\n\t\t\t\tdescription: '',\n\t\t\t\turl: await value.url,\n\t\t\t\textensionDescription: value.extensionDescription\n\t\t\t};\n\t\t}));\n\t}\n\n\tprotected async takeAction(extensionDescription: IExtensionDescription, url: string): Promise<void> {\n\t\tif (!url) {\n\t\t\tawait this.commandService.executeCommand('workbench.action.openIssueReporter', [extensionDescription.identifier.value]);\n\t\t} else {\n\t\t\tawait this.openerService.open(URI.parse(url));\n\t\t}\n\t}\n}\n\nclass HelpPanel extends ViewPane {\n\tstatic readonly ID = '~remote.helpPanel';\n\tstatic readonly TITLE = nls.localize2('remote.help', \"Help and feedback\");\n\tprivate tree!: WorkbenchAsyncDataTree<HelpModel, IHelpItem, IHelpItem>;\n\n\tconstructor(\n\t\tprotected viewModel: IViewModel,\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IQuickInputService protected quickInputService: IQuickInputService,\n\t\t@ICommandService protected commandService: ICommandService,\n\t\t@IRemoteExplorerService protected readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWalkthroughsService private readonly walkthroughsService: IWalkthroughsService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tcontainer.classList.add('remote-help');\n\t\tconst treeContainer = document.createElement('div');\n\t\ttreeContainer.classList.add('remote-help-content');\n\t\tcontainer.appendChild(treeContainer);\n\n\t\tthis.tree = <WorkbenchAsyncDataTree<HelpModel, IHelpItem, IHelpItem>>this.instantiationService.createInstance(WorkbenchAsyncDataTree,\n\t\t\t'RemoteHelp',\n\t\t\ttreeContainer,\n\t\t\tnew HelpTreeVirtualDelegate(),\n\t\t\t[new HelpTreeRenderer()],\n\t\t\tnew HelpDataSource(),\n\t\t\t{\n\t\t\t\taccessibilityProvider: {\n\t\t\t\t\tgetAriaLabel: (item: HelpItemBase) => {\n\t\t\t\t\t\treturn item.label;\n\t\t\t\t\t},\n\t\t\t\t\tgetWidgetAriaLabel: () => nls.localize('remotehelp', \"Remote Help\")\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tconst model = new HelpModel(this.viewModel, this.openerService, this.quickInputService, this.commandService, this.remoteExplorerService, this.environmentService, this.workspaceContextService, this.walkthroughsService);\n\n\t\tthis.tree.setInput(model);\n\n\t\tthis._register(Event.debounce(this.tree.onDidOpen, (last, event) => event, 75, true)(e => {\n\t\t\te.element?.handleClick();\n\t\t}));\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.tree.layout(height, width);\n\t}\n}\n\nclass HelpPanelDescriptor implements IViewDescriptor {\n\treadonly id = HelpPanel.ID;\n\treadonly name = HelpPanel.TITLE;\n\treadonly ctorDescriptor: SyncDescriptor<HelpPanel>;\n\treadonly canToggleVisibility = true;\n\treadonly hideByDefault = false;\n\treadonly group = 'help@50';\n\treadonly order = -10;\n\n\tconstructor(viewModel: IViewModel) {\n\t\tthis.ctorDescriptor = new SyncDescriptor(HelpPanel, [viewModel]);\n\t}\n}\n\nclass RemoteViewPaneContainer extends FilterViewPaneContainer implements IViewModel {\n\tprivate helpPanelDescriptor = new HelpPanelDescriptor(this);\n\thelpInformation: HelpInformation[] = [];\n\tprivate _onDidChangeHelpInformation = new Emitter<void>();\n\tpublic onDidChangeHelpInformation: Event<void> = this._onDidChangeHelpInformation.event;\n\tprivate hasRegisteredHelpView: boolean = false;\n\tprivate remoteSwitcher: SwitchRemoteViewItem | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService\n\t) {\n\t\tsuper(VIEWLET_ID, remoteExplorerService.onDidChangeTargetType, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService, viewDescriptorService);\n\t\tthis.addConstantViewDescriptors([this.helpPanelDescriptor]);\n\t\tthis._register(this.remoteSwitcher = this.instantiationService.createInstance(SwitchRemoteViewItem));\n\t\tthis.remoteExplorerService.onDidChangeHelpInformation(extensions => {\n\t\t\tthis._setHelpInformation(extensions);\n\t\t});\n\n\t\tthis._setHelpInformation(this.remoteExplorerService.helpInformation);\n\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\n\t\tthis.remoteSwitcher.createOptionItems(viewsRegistry.getViews(this.viewContainer));\n\t\tthis._register(viewsRegistry.onViewsRegistered(e => {\n\t\t\tconst remoteViews: IViewDescriptor[] = [];\n\t\t\tfor (const view of e) {\n\t\t\t\tif (view.viewContainer.id === VIEWLET_ID) {\n\t\t\t\t\tremoteViews.push(...view.views);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (remoteViews.length > 0) {\n\t\t\t\tthis.remoteSwitcher!.createOptionItems(remoteViews);\n\t\t\t}\n\t\t}));\n\t\tthis._register(viewsRegistry.onViewsDeregistered(e => {\n\t\t\tif (e.viewContainer.id === VIEWLET_ID) {\n\t\t\t\tthis.remoteSwitcher!.removeOptionItems(e.views);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _setHelpInformation(extensions: readonly IExtensionPointUser<HelpInformation>[]) {\n\t\tconst helpInformation: HelpInformation[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tthis._handleRemoteInfoExtensionPoint(extension, helpInformation);\n\t\t}\n\n\t\tthis.helpInformation = helpInformation;\n\t\tthis._onDidChangeHelpInformation.fire();\n\n\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\t\tif (this.helpInformation.length && !this.hasRegisteredHelpView) {\n\t\t\tconst view = viewsRegistry.getView(this.helpPanelDescriptor.id);\n\t\t\tif (!view) {\n\t\t\t\tviewsRegistry.registerViews([this.helpPanelDescriptor], this.viewContainer);\n\t\t\t}\n\t\t\tthis.hasRegisteredHelpView = true;\n\t\t} else if (this.hasRegisteredHelpView) {\n\t\t\tviewsRegistry.deregisterViews([this.helpPanelDescriptor], this.viewContainer);\n\t\t\tthis.hasRegisteredHelpView = false;\n\t\t}\n\t}\n\n\tprivate _handleRemoteInfoExtensionPoint(extension: IExtensionPointUser<HelpInformation>, helpInformation: HelpInformation[]) {\n\t\tif (!isProposedApiEnabled(extension.description, 'contribRemoteHelp')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!extension.value.documentation && !extension.value.getStarted && !extension.value.issues) {\n\t\t\treturn;\n\t\t}\n\n\t\thelpInformation.push({\n\t\t\textensionDescription: extension.description,\n\t\t\tgetStarted: extension.value.getStarted,\n\t\t\tdocumentation: extension.value.documentation,\n\t\t\treportIssue: extension.value.reportIssue,\n\t\t\tissues: extension.value.issues,\n\t\t\tremoteName: extension.value.remoteName,\n\t\t\tvirtualWorkspace: extension.value.virtualWorkspace\n\t\t});\n\t}\n\n\tprotected getFilterOn(viewDescriptor: IViewDescriptor): string | undefined {\n\t\treturn isStringArray(viewDescriptor.remoteAuthority) ? viewDescriptor.remoteAuthority[0] : viewDescriptor.remoteAuthority;\n\t}\n\n\tprotected setFilter(viewDescriptor: IViewDescriptor): void {\n\t\tthis.remoteExplorerService.targetType = isStringArray(viewDescriptor.remoteAuthority) ? viewDescriptor.remoteAuthority : [viewDescriptor.remoteAuthority!];\n\t}\n\n\tgetTitle(): string {\n\t\tconst title = nls.localize('remote.explorer', \"Remote Explorer\");\n\t\treturn title;\n\t}\n}\n\nRegistry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry).registerViewContainer(\n\t{\n\t\tid: VIEWLET_ID,\n\t\ttitle: nls.localize2('remote.explorer', \"Remote Explorer\"),\n\t\tctorDescriptor: new SyncDescriptor(RemoteViewPaneContainer),\n\t\thideIfEmpty: true,\n\t\tviewOrderDelegate: {\n\t\t\tgetOrder: (group?: string) => {\n\t\t\t\tif (!group) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet matches = /^targets@(\\d+)$/.exec(group);\n\t\t\t\tif (matches) {\n\t\t\t\t\treturn -1000;\n\t\t\t\t}\n\n\t\t\t\tmatches = /^details(@(\\d+))?$/.exec(group);\n\n\t\t\t\tif (matches) {\n\t\t\t\t\treturn -500 + Number(matches[2]);\n\t\t\t\t}\n\n\t\t\t\tmatches = /^help(@(\\d+))?$/.exec(group);\n\t\t\t\tif (matches) {\n\t\t\t\t\treturn -10;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\ticon: icons.remoteExplorerViewIcon,\n\t\torder: 4\n\t}, ViewContainerLocation.Sidebar);\n\nexport class RemoteMarkers implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITimerService timerService: ITimerService,\n\t) {\n\t\tremoteAgentService.getEnvironment().then(remoteEnv => {\n\t\t\tif (remoteEnv) {\n\t\t\t\ttimerService.setPerformanceMarks('server', remoteEnv.marks);\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass VisibleProgress {\n\n\tpublic readonly location: ProgressLocation;\n\tprivate _isDisposed: boolean;\n\tprivate _lastReport: string | null;\n\tprivate _currentProgressPromiseResolve: (() => void) | null;\n\tprivate _currentProgress: IProgress<IProgressStep> | null;\n\tprivate _currentTimer: ReconnectionTimer | null;\n\n\tpublic get lastReport(): string | null {\n\t\treturn this._lastReport;\n\t}\n\n\tconstructor(progressService: IProgressService, location: ProgressLocation, initialReport: string | null, buttons: string[], onDidCancel: (choice: number | undefined, lastReport: string | null) => void) {\n\t\tthis.location = location;\n\t\tthis._isDisposed = false;\n\t\tthis._lastReport = initialReport;\n\t\tthis._currentProgressPromiseResolve = null;\n\t\tthis._currentProgress = null;\n\t\tthis._currentTimer = null;\n\n\t\tconst promise = new Promise<void>((resolve) => this._currentProgressPromiseResolve = resolve);\n\n\t\tprogressService.withProgress(\n\t\t\t{ location: location, buttons: buttons },\n\t\t\t(progress) => { if (!this._isDisposed) { this._currentProgress = progress; } return promise; },\n\t\t\t(choice) => onDidCancel(choice, this._lastReport)\n\t\t);\n\n\t\tif (this._lastReport) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._currentProgressPromiseResolve) {\n\t\t\tthis._currentProgressPromiseResolve();\n\t\t\tthis._currentProgressPromiseResolve = null;\n\t\t}\n\t\tthis._currentProgress = null;\n\t\tif (this._currentTimer) {\n\t\t\tthis._currentTimer.dispose();\n\t\t\tthis._currentTimer = null;\n\t\t}\n\t}\n\n\tpublic report(message?: string) {\n\t\tif (message) {\n\t\t\tthis._lastReport = message;\n\t\t}\n\n\t\tif (this._lastReport && this._currentProgress) {\n\t\t\tthis._currentProgress.report({ message: this._lastReport });\n\t\t}\n\t}\n\n\tpublic startTimer(completionTime: number): void {\n\t\tthis.stopTimer();\n\t\tthis._currentTimer = new ReconnectionTimer(this, completionTime);\n\t}\n\n\tpublic stopTimer(): void {\n\t\tif (this._currentTimer) {\n\t\t\tthis._currentTimer.dispose();\n\t\t\tthis._currentTimer = null;\n\t\t}\n\t}\n}\n\nclass ReconnectionTimer implements IDisposable {\n\tprivate readonly _parent: VisibleProgress;\n\tprivate readonly _completionTime: number;\n\tprivate readonly _renderInterval: IDisposable;\n\n\tconstructor(parent: VisibleProgress, completionTime: number) {\n\t\tthis._parent = parent;\n\t\tthis._completionTime = completionTime;\n\t\tthis._renderInterval = dom.disposableWindowInterval(mainWindow, () => this._render(), 1000);\n\t\tthis._render();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._renderInterval.dispose();\n\t}\n\n\tprivate _render() {\n\t\tconst remainingTimeMs = this._completionTime - Date.now();\n\t\tif (remainingTimeMs < 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst remainingTime = Math.ceil(remainingTimeMs / 1000);\n\t\tif (remainingTime === 1) {\n\t\t\tthis._parent.report(nls.localize('reconnectionWaitOne', \"Attempting to reconnect in {0} second...\", remainingTime));\n\t\t} else {\n\t\t\tthis._parent.report(nls.localize('reconnectionWaitMany', \"Attempting to reconnect in {0} seconds...\", remainingTime));\n\t\t}\n\t}\n}\n\n/**\n * The time when a prompt is shown to the user\n */\nconst DISCONNECT_PROMPT_TIME = 40 * 1000; // 40 seconds\n\nexport class RemoteAgentConnectionStatusListener extends Disposable implements IWorkbenchContribution {\n\n\tprivate _reloadWindowShown: boolean = false;\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tlet quickInputVisible = false;\n\t\t\tthis._register(quickInputService.onShow(() => quickInputVisible = true));\n\t\t\tthis._register(quickInputService.onHide(() => quickInputVisible = false));\n\n\t\t\tlet visibleProgress: VisibleProgress | null = null;\n\t\t\tlet reconnectWaitEvent: ReconnectionWaitEvent | null = null;\n\t\t\tlet disposableListener: IDisposable | null = null;\n\n\t\t\tfunction showProgress(location: ProgressLocation.Dialog | ProgressLocation.Notification | null, buttons: { label: string; callback: () => void }[], initialReport: string | null = null): VisibleProgress {\n\t\t\t\tif (visibleProgress) {\n\t\t\t\t\tvisibleProgress.dispose();\n\t\t\t\t\tvisibleProgress = null;\n\t\t\t\t}\n\n\t\t\t\tif (!location) {\n\t\t\t\t\tlocation = quickInputVisible ? ProgressLocation.Notification : ProgressLocation.Dialog;\n\t\t\t\t}\n\n\t\t\t\treturn new VisibleProgress(\n\t\t\t\t\tprogressService, location, initialReport, buttons.map(button => button.label),\n\t\t\t\t\t(choice, lastReport) => {\n\t\t\t\t\t\t// Handle choice from dialog\n\t\t\t\t\t\tif (typeof choice !== 'undefined' && buttons[choice]) {\n\t\t\t\t\t\t\tbuttons[choice].callback();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (location === ProgressLocation.Dialog) {\n\t\t\t\t\t\t\t\tvisibleProgress = showProgress(ProgressLocation.Notification, buttons, lastReport);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thideProgress();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfunction hideProgress() {\n\t\t\t\tif (visibleProgress) {\n\t\t\t\t\tvisibleProgress.dispose();\n\t\t\t\t\tvisibleProgress = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet reconnectionToken: string = '';\n\t\t\tlet lastIncomingDataTime: number = 0;\n\t\t\tlet reconnectionAttempts: number = 0;\n\n\t\t\tconst reconnectButton = {\n\t\t\t\tlabel: nls.localize('reconnectNow', \"Reconnect Now\"),\n\t\t\t\tcallback: () => {\n\t\t\t\t\treconnectWaitEvent?.skipWait();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst reloadButton = {\n\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\tcallback: () => {\n\n\t\t\t\t\ttype ReconnectReloadClassification = {\n\t\t\t\t\t\towner: 'alexdima';\n\t\t\t\t\t\tcomment: 'The reload button in the builtin permanent reconnection failure dialog was pressed';\n\t\t\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t\t\t\treconnectionToken: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the connection.' };\n\t\t\t\t\t\tmillisSinceLastIncomingData: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Elapsed time (in ms) since data was last received.' };\n\t\t\t\t\t\tattempt: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The reconnection attempt counter.' };\n\t\t\t\t\t};\n\t\t\t\t\ttype ReconnectReloadEvent = {\n\t\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\t\treconnectionToken: string;\n\t\t\t\t\t\tmillisSinceLastIncomingData: number;\n\t\t\t\t\t\tattempt: number;\n\t\t\t\t\t};\n\t\t\t\t\ttelemetryService.publicLog2<ReconnectReloadEvent, ReconnectReloadClassification>('remoteReconnectionReload', {\n\t\t\t\t\t\tremoteName: getRemoteName(environmentService.remoteAuthority),\n\t\t\t\t\t\treconnectionToken: reconnectionToken,\n\t\t\t\t\t\tmillisSinceLastIncomingData: Date.now() - lastIncomingDataTime,\n\t\t\t\t\t\tattempt: reconnectionAttempts\n\t\t\t\t\t});\n\n\t\t\t\t\tcommandService.executeCommand(ReloadWindowAction.ID);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Possible state transitions:\n\t\t\t// ConnectionGain      -> ConnectionLost\n\t\t\t// ConnectionLost      -> ReconnectionWait, ReconnectionRunning\n\t\t\t// ReconnectionWait    -> ReconnectionRunning\n\t\t\t// ReconnectionRunning -> ConnectionGain, ReconnectionPermanentFailure\n\n\t\t\tconnection.onDidStateChange((e) => {\n\t\t\t\tvisibleProgress?.stopTimer();\n\n\t\t\t\tif (disposableListener) {\n\t\t\t\t\tdisposableListener.dispose();\n\t\t\t\t\tdisposableListener = null;\n\t\t\t\t}\n\t\t\t\tswitch (e.type) {\n\t\t\t\t\tcase PersistentConnectionEventType.ConnectionLost:\n\t\t\t\t\t\treconnectionToken = e.reconnectionToken;\n\t\t\t\t\t\tlastIncomingDataTime = Date.now() - e.millisSinceLastIncomingData;\n\t\t\t\t\t\treconnectionAttempts = 0;\n\n\t\t\t\t\t\ttype RemoteConnectionLostClassification = {\n\t\t\t\t\t\t\towner: 'alexdima';\n\t\t\t\t\t\t\tcomment: 'The remote connection state is now `ConnectionLost`';\n\t\t\t\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t\t\t\t\treconnectionToken: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the connection.' };\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttype RemoteConnectionLostEvent = {\n\t\t\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\t\t\treconnectionToken: string;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttelemetryService.publicLog2<RemoteConnectionLostEvent, RemoteConnectionLostClassification>('remoteConnectionLost', {\n\t\t\t\t\t\t\tremoteName: getRemoteName(environmentService.remoteAuthority),\n\t\t\t\t\t\t\treconnectionToken: e.reconnectionToken,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (visibleProgress || e.millisSinceLastIncomingData > DISCONNECT_PROMPT_TIME) {\n\t\t\t\t\t\t\tif (!visibleProgress) {\n\t\t\t\t\t\t\t\tvisibleProgress = showProgress(null, [reconnectButton, reloadButton]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvisibleProgress.report(nls.localize('connectionLost', \"Connection Lost\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PersistentConnectionEventType.ReconnectionWait:\n\t\t\t\t\t\tif (visibleProgress) {\n\t\t\t\t\t\t\treconnectWaitEvent = e;\n\t\t\t\t\t\t\tvisibleProgress = showProgress(null, [reconnectButton, reloadButton]);\n\t\t\t\t\t\t\tvisibleProgress.startTimer(Date.now() + 1000 * e.durationSeconds);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PersistentConnectionEventType.ReconnectionRunning:\n\t\t\t\t\t\treconnectionToken = e.reconnectionToken;\n\t\t\t\t\t\tlastIncomingDataTime = Date.now() - e.millisSinceLastIncomingData;\n\t\t\t\t\t\treconnectionAttempts = e.attempt;\n\n\t\t\t\t\t\ttype RemoteReconnectionRunningClassification = {\n\t\t\t\t\t\t\towner: 'alexdima';\n\t\t\t\t\t\t\tcomment: 'The remote connection state is now `ReconnectionRunning`';\n\t\t\t\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t\t\t\t\treconnectionToken: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the connection.' };\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Elapsed time (in ms) since data was last received.' };\n\t\t\t\t\t\t\tattempt: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The reconnection attempt counter.' };\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttype RemoteReconnectionRunningEvent = {\n\t\t\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\t\t\treconnectionToken: string;\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: number;\n\t\t\t\t\t\t\tattempt: number;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttelemetryService.publicLog2<RemoteReconnectionRunningEvent, RemoteReconnectionRunningClassification>('remoteReconnectionRunning', {\n\t\t\t\t\t\t\tremoteName: getRemoteName(environmentService.remoteAuthority),\n\t\t\t\t\t\t\treconnectionToken: e.reconnectionToken,\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: e.millisSinceLastIncomingData,\n\t\t\t\t\t\t\tattempt: e.attempt\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (visibleProgress || e.millisSinceLastIncomingData > DISCONNECT_PROMPT_TIME) {\n\t\t\t\t\t\t\tvisibleProgress = showProgress(null, [reloadButton]);\n\t\t\t\t\t\t\tvisibleProgress.report(nls.localize('reconnectionRunning', \"Disconnected. Attempting to reconnect...\"));\n\n\t\t\t\t\t\t\t// Register to listen for quick input is opened\n\t\t\t\t\t\t\tdisposableListener = quickInputService.onShow(() => {\n\t\t\t\t\t\t\t\t// Need to move from dialog if being shown and user needs to type in a prompt\n\t\t\t\t\t\t\t\tif (visibleProgress && visibleProgress.location === ProgressLocation.Dialog) {\n\t\t\t\t\t\t\t\t\tvisibleProgress = showProgress(ProgressLocation.Notification, [reloadButton], visibleProgress.lastReport);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PersistentConnectionEventType.ReconnectionPermanentFailure:\n\t\t\t\t\t\treconnectionToken = e.reconnectionToken;\n\t\t\t\t\t\tlastIncomingDataTime = Date.now() - e.millisSinceLastIncomingData;\n\t\t\t\t\t\treconnectionAttempts = e.attempt;\n\n\t\t\t\t\t\ttype RemoteReconnectionPermanentFailureClassification = {\n\t\t\t\t\t\t\towner: 'alexdima';\n\t\t\t\t\t\t\tcomment: 'The remote connection state is now `ReconnectionPermanentFailure`';\n\t\t\t\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t\t\t\t\treconnectionToken: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the connection.' };\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Elapsed time (in ms) since data was last received.' };\n\t\t\t\t\t\t\tattempt: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The reconnection attempt counter.' };\n\t\t\t\t\t\t\thandled: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error was handled by the resolver.' };\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttype RemoteReconnectionPermanentFailureEvent = {\n\t\t\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\t\t\treconnectionToken: string;\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: number;\n\t\t\t\t\t\t\tattempt: number;\n\t\t\t\t\t\t\thandled: boolean;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttelemetryService.publicLog2<RemoteReconnectionPermanentFailureEvent, RemoteReconnectionPermanentFailureClassification>('remoteReconnectionPermanentFailure', {\n\t\t\t\t\t\t\tremoteName: getRemoteName(environmentService.remoteAuthority),\n\t\t\t\t\t\t\treconnectionToken: e.reconnectionToken,\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: e.millisSinceLastIncomingData,\n\t\t\t\t\t\t\tattempt: e.attempt,\n\t\t\t\t\t\t\thandled: e.handled\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\thideProgress();\n\n\t\t\t\t\t\tif (e.handled) {\n\t\t\t\t\t\t\tlogService.info(`Error handled: Not showing a notification for the error.`);\n\t\t\t\t\t\t\tconsole.log(`Error handled: Not showing a notification for the error.`);\n\t\t\t\t\t\t} else if (!this._reloadWindowShown) {\n\t\t\t\t\t\t\tthis._reloadWindowShown = true;\n\t\t\t\t\t\t\tdialogService.confirm({\n\t\t\t\t\t\t\t\ttype: Severity.Error,\n\t\t\t\t\t\t\t\tmessage: nls.localize('reconnectionPermanentFailure', \"Cannot reconnect. Please reload the window.\"),\n\t\t\t\t\t\t\t\tprimaryButton: nls.localize({ key: 'reloadWindow.dialog', comment: ['&& denotes a mnemonic'] }, \"&&Reload Window\")\n\t\t\t\t\t\t\t}).then(result => {\n\t\t\t\t\t\t\t\tif (result.confirmed) {\n\t\t\t\t\t\t\t\t\tcommandService.executeCommand(ReloadWindowAction.ID);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PersistentConnectionEventType.ConnectionGain:\n\t\t\t\t\t\treconnectionToken = e.reconnectionToken;\n\t\t\t\t\t\tlastIncomingDataTime = Date.now() - e.millisSinceLastIncomingData;\n\t\t\t\t\t\treconnectionAttempts = e.attempt;\n\n\t\t\t\t\t\ttype RemoteConnectionGainClassification = {\n\t\t\t\t\t\t\towner: 'alexdima';\n\t\t\t\t\t\t\tcomment: 'The remote connection state is now `ConnectionGain`';\n\t\t\t\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t\t\t\t\treconnectionToken: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the connection.' };\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Elapsed time (in ms) since data was last received.' };\n\t\t\t\t\t\t\tattempt: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The reconnection attempt counter.' };\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttype RemoteConnectionGainEvent = {\n\t\t\t\t\t\t\tremoteName: string | undefined;\n\t\t\t\t\t\t\treconnectionToken: string;\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: number;\n\t\t\t\t\t\t\tattempt: number;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttelemetryService.publicLog2<RemoteConnectionGainEvent, RemoteConnectionGainClassification>('remoteConnectionGain', {\n\t\t\t\t\t\t\tremoteName: getRemoteName(environmentService.remoteAuthority),\n\t\t\t\t\t\t\treconnectionToken: e.reconnectionToken,\n\t\t\t\t\t\t\tmillisSinceLastIncomingData: e.millisSinceLastIncomingData,\n\t\t\t\t\t\t\tattempt: e.attempt\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\thideProgress();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO;AACP,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,SAAS,WAAW;AACpB,SAAS,+BAA+B;AACxC,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AACzC,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,6BAA6B;AACtC,SAAS,qBAAqB;AAC9B,SAAS,iBAAiB;AAC1B,SAAS,2BAA2B;AACpC,SAAS,mBAAmB,4BAA4B;AACxD,SAAS,+BAA+B;AACxC,SAAS,kBAAkB;AAC3B,SAAS,0BAA0B;AACnC,SAAS,iBAAiB,gBAAgB,YAAY,uBAAuB,yBAAyB,8BAA8B;AACpI,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,WAAW,eAAe,kBAAkB,wBAAwB;AAC7E,SAAS,8BAA8B;AACvC,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB,qCAAqC;AACrE,OAAO,cAAc;AACrB,SAAS,0BAA0B;AACnC,SAAS,YAAY,mBAAmB;AACxC,SAAS,4BAA4B;AACrC,SAAS,qBAAqB;AAC9B,SAAS,iBAAiB,8BAA8B;AACxD,SAAS,oCAAoC;AAC7C,SAAS,UAAU,wBAAwB;AAC3C,SAAS,4BAA4B;AACrC,SAAS,eAAe,WAAW,wBAAwB;AAC3D,SAAS,8BAA8B;AACvC,SAAS,0BAA0B;AACnC,SAAS,OAAO,eAAe;AAC/B,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAC/B,YAAY,WAAW;AACvB,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAC9B,SAAS,mCAAmC;AAC5C,SAAS,4BAA4B;AACrC,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,qBAAqB;AAO9B,MAAM,wBAAmE;AAAA,EA/DzE,OA+DyE;AAAA;AAAA;AAAA,EACxE,UAAU,SAA4B;AACrC,WAAO;AAAA,EACR;AAAA,EAEA,cAAc,SAA4B;AACzC,WAAO;AAAA,EACR;AACD;AAOA,MAAM,iBAAmG;AAAA,EA9EzG,OA8EyG;AAAA;AAAA;AAAA,EACxG,aAAqB;AAAA,EAErB,eAAe,WAA+C;AAC7D,cAAU,UAAU,IAAI,4BAA4B;AACpD,UAAM,OAAO,IAAI,OAAO,WAAW,IAAI,EAAE,kCAAkC,CAAC;AAC5E,UAAM,SAAS;AACf,WAAO,EAAE,QAAQ,KAAK;AAAA,EACvB;AAAA,EAEA,cAAc,SAA0C,OAAe,cAAqC,QAAkC;AAC7I,UAAM,YAAY,aAAa;AAC/B,QAAI,OAAO,WAAW,aAAa,IAAI;AACvC,iBAAa,KAAK,UAAU,IAAI,GAAG,QAAQ,QAAQ,WAAW;AAC9D,UAAM,iBAAiB,IAAI,OAAO,WAAW,IAAI,EAAE,kBAAkB,CAAC;AACtE,mBAAe,YAAY,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EAEA,gBAAgB,cAA2C;AAAA,EAE3D;AACD;AAEA,MAAM,eAAiE;AAAA,EArGvE,OAqGuE;AAAA;AAAA;AAAA,EACtE,YAAY,SAAoB;AAC/B,WAAO,mBAAmB;AAAA,EAC3B;AAAA,EAEA,YAAY,SAAoB;AAC/B,QAAI,mBAAmB,aAAa,QAAQ,OAAO;AAClD,aAAO,QAAQ;AAAA,IAChB;AAEA,WAAO,CAAC;AAAA,EACT;AACD;AASA,MAAM,UAAU;AAAA,EAGf,YACS,WACA,eACA,mBACA,gBACA,uBACA,oBACA,yBACA,qBACP;AARO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAER,SAAK,YAAY;AACjB,cAAU,2BAA2B,MAAM,KAAK,YAAY,CAAC;AAAA,EAC9D;AAAA,EAzID,OA0HgB;AAAA;AAAA;AAAA,EACf;AAAA,EAgBQ,oBAAoB,MAAuB,SAAqG;AACvJ,WAAO,IAAI;AAAA,MAAc,KAAK;AAAA,MAC7B,KAAK;AAAA,MACL,KAAK;AAAA,MACJ,OAAO,KAAK,eAAe,WAAY,CAAC,KAAK,UAAU,IAAI,KAAK;AAAA,MACjE,KAAK;AAAA,MACL,KAAK,OAAO;AAAA,IAAC;AAAA,EACf;AAAA,EAEQ,cAAc;AACrB,UAAM,YAAyB,CAAC;AAEhC,UAAM,aAAa,KAAK,UAAU,gBAAgB,OAAO,UAAQ,KAAK,UAAU;AAChF,QAAI,WAAW,QAAQ;AACtB,YAAM,iBAAiB,WAAW,IAAI,CAAC,SAA0B,KAAK,oBAAoB,MAAM,YAAY,CAAC;AAC7G,YAAM,qBAAqB,KAAK,OAAO,KAAK,UAAQ,KAAK,SAAS,MAAM,cAAc,KAAK,IAAI;AAAA,QAC9F,MAAM;AAAA,QACN,IAAI,SAAS,0BAA0B,aAAa;AAAA,QACpD;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AACA,yBAAmB,SAAS;AAC5B,gBAAU,KAAK,kBAAkB;AAAA,IAClC;AAEA,UAAM,gBAAgB,KAAK,UAAU,gBAAgB,OAAO,UAAQ,KAAK,aAAa;AACtF,QAAI,cAAc,QAAQ;AACzB,YAAM,iBAAiB,cAAc,IAAI,CAAC,SAA0B,KAAK,oBAAoB,MAAM,eAAe,CAAC;AACnH,YAAM,wBAAwB,KAAK,OAAO,KAAK,UAAQ,KAAK,SAAS,MAAM,iBAAiB,KAAK,IAAI;AAAA,QACpG,MAAM;AAAA,QACN,IAAI,SAAS,6BAA6B,oBAAoB;AAAA,QAC9D;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AACA,4BAAsB,SAAS;AAC/B,gBAAU,KAAK,qBAAqB;AAAA,IACrC;AAEA,UAAM,SAAS,KAAK,UAAU,gBAAgB,OAAO,UAAQ,KAAK,MAAM;AACxE,QAAI,OAAO,QAAQ;AAClB,YAAM,iBAAiB,OAAO,IAAI,CAAC,SAA0B,KAAK,oBAAoB,MAAM,QAAQ,CAAC;AACrG,YAAM,uBAAuB,KAAK,OAAO,KAAK,UAAQ,KAAK,SAAS,MAAM,gBAAgB,KAAK,IAAI;AAAA,QAClG,MAAM;AAAA,QACN,IAAI,SAAS,sBAAsB,eAAe;AAAA,QAClD;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AACA,2BAAqB,SAAS;AAC9B,gBAAU,KAAK,oBAAoB;AAAA,IACpC;AAEA,QAAI,UAAU,QAAQ;AACrB,YAAM,iBAAiB,KAAK,UAAU,gBAAgB,IAAI,UAAQ,KAAK,oBAAoB,MAAM,aAAa,CAAC;AAC/G,YAAM,oBAAoB,KAAK,OAAO,KAAK,UAAQ,KAAK,SAAS,MAAM,gBAAgB,KAAK,IAAI;AAAA,QAC/F,MAAM;AAAA,QACN,IAAI,SAAS,sBAAsB,cAAc;AAAA,QACjD;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AACA,wBAAkB,SAAS;AAC3B,gBAAU,KAAK,iBAAiB;AAAA,IACjC;AAEA,QAAI,UAAU,QAAQ;AACrB,WAAK,QAAQ;AAAA,IACd;AAAA,EACD;AACD;AAEA,MAAM,cAAc;AAAA,EAInB,YAAoB,gBAAyC,oBAAiD,sBAA6D,iBAAuD,kBAA8C,kBAA4C;AAAxS;AAAyC;AAAiD;AAA6D;AAAuD;AAA8C;AAAA,EAChR;AAAA,EAvOD,OAkOoB;AAAA;AAAA;AAAA,EACX;AAAA,EACA;AAAA,EAKR,IAAI,cAA2C;AAC9C,WAAO,KAAK,OAAO,EAAE,KAAK,MAAM,KAAK,YAAY;AAAA,EAClD;AAAA,EAEA,IAAI,MAAuB;AAC1B,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,MAAc,SAA0B;AACvC,QAAI,KAAK,SAAS,QAAW;AAC5B,UAAI,OAAO,KAAK,qBAAqB,UAAU;AAC9C,cAAM,MAAM,IAAI,MAAM,KAAK,gBAAgB;AAC3C,YAAI,IAAI,WAAW;AAClB,eAAK,OAAO,KAAK;AAAA,QAClB,OAAO;AACN,gBAAM,aAA0C,KAAK,eAAe,eAAe,KAAK,gBAAgB,EAAE,KAAK,CAAC,WAAW;AAE1H,iBAAK,OAAO;AACZ,mBAAO,KAAK;AAAA,UACb,CAAC;AAED,gBAAM,cAA+B,IAAI,QAAQ,aAAW,WAAW,MAAM,QAAQ,EAAE,GAAG,GAAG,CAAC;AAC9F,eAAK,OAAO,MAAM,QAAQ,KAAK,CAAC,YAAY,WAAW,CAAC;AAAA,QACzD;AAAA,MACD,WAAW,KAAK,kBAAkB,IAAI;AACrC,YAAI;AACH,gBAAM,gBAAgB,GAAG,KAAK,qBAAqB,EAAE,IAAI,KAAK,iBAAiB,EAAE;AACjF,gBAAM,cAAc,MAAM,KAAK,mBAAmB,eAAe,aAAa;AAC9E,eAAK,eAAe,YAAY;AAChC,eAAK,OAAO;AAAA,QACb,QAAQ;AAAA,QAAE;AAAA,MACX;AAAA,IACD;AACA,QAAI,KAAK,SAAS,QAAW;AAC5B,WAAK,OAAO;AAAA,IACb;AACA,WAAO,KAAK;AAAA,EACb;AACD;AAEA,MAAe,aAAkC;AAAA,EAEhD,YACQ,MACA,OACA,QACC,mBACA,oBACA,uBACA,yBACP;AAPM;AACA;AACA;AACC;AACA;AACA;AACA;AAER,SAAK,YAAY,KAAK,GAAG,UAAU,iBAAiB,IAAI,CAAC;AACzD,SAAK,YAAY,KAAK,iCAAiC;AAAA,EACxD;AAAA,EA9RD,OAiRiD;AAAA;AAAA;AAAA,EACzC,cAAwB,CAAC;AAAA,EAchC,MAAgB,aAKX;AACJ,YAAQ,MAAM,QAAQ,IAAI,KAAK,OAAO,IAAI,OAAO,UAAU;AAC1D,aAAO;AAAA,QACN,OAAO,MAAM,qBAAqB,eAAe,MAAM,qBAAqB,WAAW;AAAA,QACvF,aAAa,MAAM,MAAM,eAAe,MAAM,MAAM;AAAA,QACpD,KAAK,MAAM,MAAM;AAAA,QACjB,sBAAsB,MAAM;AAAA,MAC7B;AAAA,IACD,CAAC,CAAC,GAAG,OAAO,UAAQ,KAAK,WAAW;AAAA,EACrC;AAAA,EAEA,MAAM,cAAc;AACnB,UAAM,kBAAkB,KAAK,mBAAmB;AAChD,QAAI,iBAAiB;AACpB,eAAS,IAAI,GAAG,IAAI,KAAK,sBAAsB,WAAW,QAAQ,KAAK;AACtE,YAAI,gBAAgB,WAAW,KAAK,sBAAsB,WAAW,CAAC,CAAC,GAAG;AACzE,qBAAW,SAAS,KAAK,QAAQ;AAChC,gBAAI,MAAM,iBAAiB;AAC1B,yBAAW,aAAa,MAAM,iBAAiB;AAC9C,oBAAI,gBAAgB,WAAW,SAAS,GAAG;AAC1C,wBAAM,KAAK,WAAW,MAAM,sBAAsB,MAAM,MAAM,GAAG;AACjE;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AACN,YAAM,mBAAmB,4BAA4B,KAAK,wBAAwB,aAAa,CAAC,GAAG;AACnG,UAAI,kBAAkB;AACrB,iBAAS,IAAI,GAAG,IAAI,KAAK,sBAAsB,WAAW,QAAQ,KAAK;AACtE,qBAAW,SAAS,KAAK,QAAQ;AAChC,gBAAI,MAAM,oBAAoB,MAAM,iBAAiB;AACpD,yBAAW,aAAa,MAAM,iBAAiB;AAC9C,oBAAI,KAAK,sBAAsB,WAAW,CAAC,EAAE,WAAW,SAAS,KAAK,iBAAiB,WAAW,MAAM,gBAAgB,GAAG;AAC1H,wBAAM,KAAK,WAAW,MAAM,sBAAsB,MAAM,MAAM,GAAG;AACjE;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UAED;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,KAAK,OAAO,SAAS,GAAG;AAC3B,YAAM,UAAU,MAAM,KAAK,WAAW;AAEtC,UAAI,QAAQ,QAAQ;AACnB,cAAM,SAAS,MAAM,KAAK,kBAAkB,KAAK,SAAS,EAAE,aAAa,IAAI,SAAS,uBAAuB,oBAAoB,EAAE,CAAC;AACpI,YAAI,QAAQ;AACX,gBAAM,KAAK,WAAW,OAAO,sBAAsB,OAAO,GAAG;AAAA,QAC9D;AAAA,MACD;AAAA,IACD,OAAO;AACN,YAAM,KAAK,WAAW,KAAK,OAAO,CAAC,EAAE,sBAAsB,MAAM,KAAK,OAAO,CAAC,EAAE,GAAG;AAAA,IACpF;AAAA,EAED;AAGD;AAEA,MAAM,2BAA2B,aAAa;AAAA,EAC7C,YACC,MACA,OACA,QACA,mBACA,oBACQ,eACR,uBACA,yBACQ,gBACP;AACD,UAAM,MAAM,OAAO,QAAQ,mBAAmB,oBAAoB,uBAAuB,uBAAuB;AALxG;AAGA;AAAA,EAGT;AAAA,EAnXD,OAsW8C;AAAA;AAAA;AAAA,EAe7C,MAAgB,WAAW,sBAA6C,oBAA2C;AAClH,QAAI,CAAC,QAAQ,MAAM,QAAQ,KAAK,EAAE,SAAS,IAAI,MAAM,kBAAkB,EAAE,MAAM,GAAG;AACjF,WAAK,cAAc,KAAK,oBAAoB,EAAE,eAAe,KAAK,CAAC;AACnE;AAAA,IACD;AAEA,SAAK,eAAe,eAAe,oCAAoC,kBAAkB;AAAA,EAC1F;AACD;AAEA,MAAM,iBAAiB,aAAa;AAAA,EACnC,YACC,MACA,OACA,QACA,mBACA,oBACQ,eACR,uBACA,yBACC;AACD,UAAM,MAAM,OAAO,QAAQ,mBAAmB,oBAAoB,uBAAuB,uBAAuB;AAJxG;AAAA,EAKT;AAAA,EA3YD,OA+XoC;AAAA;AAAA;AAAA,EAcnC,MAAgB,WAAW,sBAA6C,KAA4B;AACnG,UAAM,KAAK,cAAc,KAAK,IAAI,MAAM,GAAG,GAAG,EAAE,eAAe,KAAK,CAAC;AAAA,EACtE;AACD;AAEA,MAAM,0BAA0B,aAAa;AAAA,EAC5C,YACC,MACA,OACA,QACA,mBACA,oBACQ,gBACA,eACR,uBACA,yBACC;AACD,UAAM,MAAM,OAAO,QAAQ,mBAAmB,oBAAoB,uBAAuB,uBAAuB;AALxG;AACA;AAAA,EAKT;AAAA,EA/ZD,OAkZ6C;AAAA;AAAA;AAAA,EAe5C,MAAyB,aAKpB;AACJ,WAAO,QAAQ,IAAI,KAAK,OAAO,IAAI,OAAO,UAAU;AACnD,aAAO;AAAA,QACN,OAAO,MAAM,qBAAqB,eAAe,MAAM,qBAAqB,WAAW;AAAA,QACvF,aAAa;AAAA,QACb,KAAK,MAAM,MAAM;AAAA,QACjB,sBAAsB,MAAM;AAAA,MAC7B;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAEA,MAAgB,WAAW,sBAA6C,KAA4B;AACnG,QAAI,CAAC,KAAK;AACT,YAAM,KAAK,eAAe,eAAe,sCAAsC,CAAC,qBAAqB,WAAW,KAAK,CAAC;AAAA,IACvH,OAAO;AACN,YAAM,KAAK,cAAc,KAAK,IAAI,MAAM,GAAG,CAAC;AAAA,IAC7C;AAAA,EACD;AACD;AAEA,IAAM,YAAN,cAAwB,SAAS;AAAA,EAKhC,YACW,WACV,SACoB,mBACC,oBACD,mBACG,sBACA,sBACC,uBACR,eACc,mBACH,gBACgB,uBACM,oBAClC,cACI,kBACJ,cAC4B,yBACJ,qBACtC;AACD,UAAM,SAAS,mBAAmB,oBAAoB,sBAAsB,mBAAmB,uBAAuB,sBAAsB,eAAe,cAAc,kBAAkB,YAAY;AAnB7L;AASoB;AACH;AACgB;AACM;AAIN;AACJ;AAAA,EAGxC;AAAA,EApdD,OA0biC;AAAA;AAAA;AAAA,EAChC,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ,IAAI,UAAU,eAAe,mBAAmB;AAAA,EAChE;AAAA,EAyBW,WAAW,WAA8B;AAC3D,UAAM,WAAW,SAAS;AAE1B,cAAU,UAAU,IAAI,aAAa;AACrC,UAAM,gBAAgB,SAAS,cAAc,KAAK;AAClD,kBAAc,UAAU,IAAI,qBAAqB;AACjD,cAAU,YAAY,aAAa;AAEnC,SAAK,OAAgE,KAAK,qBAAqB;AAAA,MAAe;AAAA,MAC7G;AAAA,MACA;AAAA,MACA,IAAI,wBAAwB;AAAA,MAC5B,CAAC,IAAI,iBAAiB,CAAC;AAAA,MACvB,IAAI,eAAe;AAAA,MACnB;AAAA,QACC,uBAAuB;AAAA,UACtB,cAAc,wBAAC,SAAuB;AACrC,mBAAO,KAAK;AAAA,UACb,GAFc;AAAA,UAGd,oBAAoB,6BAAM,IAAI,SAAS,cAAc,aAAa,GAA9C;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,UAAU,KAAK,WAAW,KAAK,eAAe,KAAK,mBAAmB,KAAK,gBAAgB,KAAK,uBAAuB,KAAK,oBAAoB,KAAK,yBAAyB,KAAK,mBAAmB;AAExN,SAAK,KAAK,SAAS,KAAK;AAExB,SAAK,UAAU,MAAM,SAAS,KAAK,KAAK,WAAW,CAAC,MAAM,UAAU,OAAO,IAAI,IAAI,EAAE,OAAK;AACzF,QAAE,SAAS,YAAY;AAAA,IACxB,CAAC,CAAC;AAAA,EACH;AAAA,EAEmB,WAAW,QAAgB,OAAqB;AAClE,UAAM,WAAW,QAAQ,KAAK;AAC9B,SAAK,KAAK,OAAO,QAAQ,KAAK;AAAA,EAC/B;AACD;AAjEM,YAAN;AAAA,EAQG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAvBG;AAmEN,MAAM,oBAA+C;AAAA,EA7frD,OA6fqD;AAAA;AAAA;AAAA,EAC3C,KAAK,UAAU;AAAA,EACf,OAAO,UAAU;AAAA,EACjB;AAAA,EACA,sBAAsB;AAAA,EACtB,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,QAAQ;AAAA,EAEjB,YAAY,WAAuB;AAClC,SAAK,iBAAiB,IAAI,eAAe,WAAW,CAAC,SAAS,CAAC;AAAA,EAChE;AACD;AAEA,IAAM,0BAAN,cAAsC,wBAA8C;AAAA,EAQnF,YAC0B,eACN,kBACO,gBACT,gBACM,sBACA,sBACR,cACM,oBACF,kBACsB,uBACjB,uBACvB;AACD,UAAM,YAAY,sBAAsB,uBAAuB,sBAAsB,eAAe,kBAAkB,gBAAgB,sBAAsB,cAAc,oBAAoB,kBAAkB,gBAAgB,qBAAqB;AAH5M;AAIzC,SAAK,2BAA2B,CAAC,KAAK,mBAAmB,CAAC;AAC1D,SAAK,UAAU,KAAK,iBAAiB,KAAK,qBAAqB,eAAe,oBAAoB,CAAC;AACnG,SAAK,sBAAsB,2BAA2B,gBAAc;AACnE,WAAK,oBAAoB,UAAU;AAAA,IACpC,CAAC;AAED,SAAK,oBAAoB,KAAK,sBAAsB,eAAe;AACnE,UAAM,gBAAgB,SAAS,GAAmB,WAAW,aAAa;AAE1E,SAAK,eAAe,kBAAkB,cAAc,SAAS,KAAK,aAAa,CAAC;AAChF,SAAK,UAAU,cAAc,kBAAkB,OAAK;AACnD,YAAM,cAAiC,CAAC;AACxC,iBAAW,QAAQ,GAAG;AACrB,YAAI,KAAK,cAAc,OAAO,YAAY;AACzC,sBAAY,KAAK,GAAG,KAAK,KAAK;AAAA,QAC/B;AAAA,MACD;AACA,UAAI,YAAY,SAAS,GAAG;AAC3B,aAAK,eAAgB,kBAAkB,WAAW;AAAA,MACnD;AAAA,IACD,CAAC,CAAC;AACF,SAAK,UAAU,cAAc,oBAAoB,OAAK;AACrD,UAAI,EAAE,cAAc,OAAO,YAAY;AACtC,aAAK,eAAgB,kBAAkB,EAAE,KAAK;AAAA,MAC/C;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EA3jBD,OA2gBoF;AAAA;AAAA;AAAA,EAC3E,sBAAsB,IAAI,oBAAoB,IAAI;AAAA,EAC1D,kBAAqC,CAAC;AAAA,EAC9B,8BAA8B,IAAI,QAAc;AAAA,EACjD,6BAA0C,KAAK,4BAA4B;AAAA,EAC1E,wBAAiC;AAAA,EACjC;AAAA,EA4CA,oBAAoB,YAA6D;AACxF,UAAM,kBAAqC,CAAC;AAC5C,eAAW,aAAa,YAAY;AACnC,WAAK,gCAAgC,WAAW,eAAe;AAAA,IAChE;AAEA,SAAK,kBAAkB;AACvB,SAAK,4BAA4B,KAAK;AAEtC,UAAM,gBAAgB,SAAS,GAAmB,WAAW,aAAa;AAC1E,QAAI,KAAK,gBAAgB,UAAU,CAAC,KAAK,uBAAuB;AAC/D,YAAM,OAAO,cAAc,QAAQ,KAAK,oBAAoB,EAAE;AAC9D,UAAI,CAAC,MAAM;AACV,sBAAc,cAAc,CAAC,KAAK,mBAAmB,GAAG,KAAK,aAAa;AAAA,MAC3E;AACA,WAAK,wBAAwB;AAAA,IAC9B,WAAW,KAAK,uBAAuB;AACtC,oBAAc,gBAAgB,CAAC,KAAK,mBAAmB,GAAG,KAAK,aAAa;AAC5E,WAAK,wBAAwB;AAAA,IAC9B;AAAA,EACD;AAAA,EAEQ,gCAAgC,WAAiD,iBAAoC;AAC5H,QAAI,CAAC,qBAAqB,UAAU,aAAa,mBAAmB,GAAG;AACtE;AAAA,IACD;AAEA,QAAI,CAAC,UAAU,MAAM,iBAAiB,CAAC,UAAU,MAAM,cAAc,CAAC,UAAU,MAAM,QAAQ;AAC7F;AAAA,IACD;AAEA,oBAAgB,KAAK;AAAA,MACpB,sBAAsB,UAAU;AAAA,MAChC,YAAY,UAAU,MAAM;AAAA,MAC5B,eAAe,UAAU,MAAM;AAAA,MAC/B,aAAa,UAAU,MAAM;AAAA,MAC7B,QAAQ,UAAU,MAAM;AAAA,MACxB,YAAY,UAAU,MAAM;AAAA,MAC5B,kBAAkB,UAAU,MAAM;AAAA,IACnC,CAAC;AAAA,EACF;AAAA,EAEU,YAAY,gBAAqD;AAC1E,WAAO,cAAc,eAAe,eAAe,IAAI,eAAe,gBAAgB,CAAC,IAAI,eAAe;AAAA,EAC3G;AAAA,EAEU,UAAU,gBAAuC;AAC1D,SAAK,sBAAsB,aAAa,cAAc,eAAe,eAAe,IAAI,eAAe,kBAAkB,CAAC,eAAe,eAAgB;AAAA,EAC1J;AAAA,EAEA,WAAmB;AAClB,UAAM,QAAQ,IAAI,SAAS,mBAAmB,iBAAiB;AAC/D,WAAO;AAAA,EACR;AACD;AAxGM,0BAAN;AAAA,EASG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAnBG;AA0GN,SAAS,GAA4B,WAAW,sBAAsB,EAAE;AAAA,EACvE;AAAA,IACC,IAAI;AAAA,IACJ,OAAO,IAAI,UAAU,mBAAmB,iBAAiB;AAAA,IACzD,gBAAgB,IAAI,eAAe,uBAAuB;AAAA,IAC1D,aAAa;AAAA,IACb,mBAAmB;AAAA,MAClB,UAAU,wBAAC,UAAmB;AAC7B,YAAI,CAAC,OAAO;AACX;AAAA,QACD;AAEA,YAAI,UAAU,kBAAkB,KAAK,KAAK;AAC1C,YAAI,SAAS;AACZ,iBAAO;AAAA,QACR;AAEA,kBAAU,qBAAqB,KAAK,KAAK;AAEzC,YAAI,SAAS;AACZ,iBAAO,OAAO,OAAO,QAAQ,CAAC,CAAC;AAAA,QAChC;AAEA,kBAAU,kBAAkB,KAAK,KAAK;AACtC,YAAI,SAAS;AACZ,iBAAO;AAAA,QACR;AAEA;AAAA,MACD,GAtBU;AAAA,IAuBX;AAAA,IACA,MAAM,MAAM;AAAA,IACZ,OAAO;AAAA,EACR;AAAA,EAAG,sBAAsB;AAAO;AAE1B,IAAM,gBAAN,MAAsD;AAAA,EAxpB7D,OAwpB6D;AAAA;AAAA;AAAA,EAE5D,YACsB,oBACN,cACd;AACD,uBAAmB,eAAe,EAAE,KAAK,eAAa;AACrD,UAAI,WAAW;AACd,qBAAa,oBAAoB,UAAU,UAAU,KAAK;AAAA,MAC3D;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAZa,gBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,GAJU;AAcb,MAAM,gBAAgB;AAAA,EAtqBtB,OAsqBsB;AAAA;AAAA;AAAA,EAEL;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,IAAW,aAA4B;AACtC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,YAAY,iBAAmC,UAA4B,eAA8B,SAAmB,aAA8E;AACzM,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,iCAAiC;AACtC,SAAK,mBAAmB;AACxB,SAAK,gBAAgB;AAErB,UAAM,UAAU,IAAI,QAAc,CAAC,YAAY,KAAK,iCAAiC,OAAO;AAE5F,oBAAgB;AAAA,MACf,EAAE,UAAoB,QAAiB;AAAA,MACvC,CAAC,aAAa;AAAE,YAAI,CAAC,KAAK,aAAa;AAAE,eAAK,mBAAmB;AAAA,QAAU;AAAE,eAAO;AAAA,MAAS;AAAA,MAC7F,CAAC,WAAW,YAAY,QAAQ,KAAK,WAAW;AAAA,IACjD;AAEA,QAAI,KAAK,aAAa;AACrB,WAAK,OAAO;AAAA,IACb;AAAA,EACD;AAAA,EAEO,UAAgB;AACtB,SAAK,cAAc;AACnB,QAAI,KAAK,gCAAgC;AACxC,WAAK,+BAA+B;AACpC,WAAK,iCAAiC;AAAA,IACvC;AACA,SAAK,mBAAmB;AACxB,QAAI,KAAK,eAAe;AACvB,WAAK,cAAc,QAAQ;AAC3B,WAAK,gBAAgB;AAAA,IACtB;AAAA,EACD;AAAA,EAEO,OAAO,SAAkB;AAC/B,QAAI,SAAS;AACZ,WAAK,cAAc;AAAA,IACpB;AAEA,QAAI,KAAK,eAAe,KAAK,kBAAkB;AAC9C,WAAK,iBAAiB,OAAO,EAAE,SAAS,KAAK,YAAY,CAAC;AAAA,IAC3D;AAAA,EACD;AAAA,EAEO,WAAW,gBAA8B;AAC/C,SAAK,UAAU;AACf,SAAK,gBAAgB,IAAI,kBAAkB,MAAM,cAAc;AAAA,EAChE;AAAA,EAEO,YAAkB;AACxB,QAAI,KAAK,eAAe;AACvB,WAAK,cAAc,QAAQ;AAC3B,WAAK,gBAAgB;AAAA,IACtB;AAAA,EACD;AACD;AAEA,MAAM,kBAAyC;AAAA,EA5uB/C,OA4uB+C;AAAA;AAAA;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,QAAyB,gBAAwB;AAC5D,SAAK,UAAU;AACf,SAAK,kBAAkB;AACvB,SAAK,kBAAkB,IAAI,yBAAyB,YAAY,MAAM,KAAK,QAAQ,GAAG,GAAI;AAC1F,SAAK,QAAQ;AAAA,EACd;AAAA,EAEO,UAAgB;AACtB,SAAK,gBAAgB,QAAQ;AAAA,EAC9B;AAAA,EAEQ,UAAU;AACjB,UAAM,kBAAkB,KAAK,kBAAkB,KAAK,IAAI;AACxD,QAAI,kBAAkB,GAAG;AACxB;AAAA,IACD;AACA,UAAM,gBAAgB,KAAK,KAAK,kBAAkB,GAAI;AACtD,QAAI,kBAAkB,GAAG;AACxB,WAAK,QAAQ,OAAO,IAAI,SAAS,uBAAuB,4CAA4C,aAAa,CAAC;AAAA,IACnH,OAAO;AACN,WAAK,QAAQ,OAAO,IAAI,SAAS,wBAAwB,6CAA6C,aAAa,CAAC;AAAA,IACrH;AAAA,EACD;AACD;AAKA,MAAM,yBAAyB,KAAK;AAE7B,IAAM,sCAAN,cAAkD,WAA6C;AAAA,EA/wBtG,OA+wBsG;AAAA;AAAA;AAAA,EAE7F,qBAA8B;AAAA,EAEtC,YACsB,oBACH,iBACF,eACC,gBACG,mBACP,YACiB,oBACX,kBAClB;AACD,UAAM;AACN,UAAM,aAAa,mBAAmB,cAAc;AACpD,QAAI,YAAY;AASf,UAASA,gBAAT,SAAsB,UAA0E,SAAoD,gBAA+B,MAAuB;AACzM,YAAI,iBAAiB;AACpB,0BAAgB,QAAQ;AACxB,4BAAkB;AAAA,QACnB;AAEA,YAAI,CAAC,UAAU;AACd,qBAAW,oBAAoB,iBAAiB,eAAe,iBAAiB;AAAA,QACjF;AAEA,eAAO,IAAI;AAAA,UACV;AAAA,UAAiB;AAAA,UAAU;AAAA,UAAe,QAAQ,IAAI,YAAU,OAAO,KAAK;AAAA,UAC5E,CAAC,QAAQ,eAAe;AAEvB,gBAAI,OAAO,WAAW,eAAe,QAAQ,MAAM,GAAG;AACrD,sBAAQ,MAAM,EAAE,SAAS;AAAA,YAC1B,OAAO;AACN,kBAAI,aAAa,iBAAiB,QAAQ;AACzC,kCAAkBA,cAAa,iBAAiB,cAAc,SAAS,UAAU;AAAA,cAClF,OAAO;AACN,gBAAAC,cAAa;AAAA,cACd;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,GAESA,gBAAT,WAAwB;AACvB,YAAI,iBAAiB;AACpB,0BAAgB,QAAQ;AACxB,4BAAkB;AAAA,QACnB;AAAA,MACD;AAhCS,yBAAAD,eA2BA,eAAAC;AA3BA,aAAAD,eAAA;AA2BA,aAAAC,eAAA;AAnCT,UAAI,oBAAoB;AACxB,WAAK,UAAU,kBAAkB,OAAO,MAAM,oBAAoB,IAAI,CAAC;AACvE,WAAK,UAAU,kBAAkB,OAAO,MAAM,oBAAoB,KAAK,CAAC;AAExE,UAAI,kBAA0C;AAC9C,UAAI,qBAAmD;AACvD,UAAI,qBAAyC;AAoC7C,UAAI,oBAA4B;AAChC,UAAI,uBAA+B;AACnC,UAAI,uBAA+B;AAEnC,YAAM,kBAAkB;AAAA,QACvB,OAAO,IAAI,SAAS,gBAAgB,eAAe;AAAA,QACnD,UAAU,6BAAM;AACf,8BAAoB,SAAS;AAAA,QAC9B,GAFU;AAAA,MAGX;AAEA,YAAM,eAAe;AAAA,QACpB,OAAO,IAAI,SAAS,gBAAgB,eAAe;AAAA,QACnD,UAAU,6BAAM;AAgBf,2BAAiB,WAAgE,4BAA4B;AAAA,YAC5G,YAAY,cAAc,mBAAmB,eAAe;AAAA,YAC5D;AAAA,YACA,6BAA6B,KAAK,IAAI,IAAI;AAAA,YAC1C,SAAS;AAAA,UACV,CAAC;AAED,yBAAe,eAAe,mBAAmB,EAAE;AAAA,QACpD,GAxBU;AAAA,MAyBX;AAQA,iBAAW,iBAAiB,CAAC,MAAM;AAClC,yBAAiB,UAAU;AAE3B,YAAI,oBAAoB;AACvB,6BAAmB,QAAQ;AAC3B,+BAAqB;AAAA,QACtB;AACA,gBAAQ,EAAE,MAAM;AAAA,UACf,KAAK,8BAA8B;AAClC,gCAAoB,EAAE;AACtB,mCAAuB,KAAK,IAAI,IAAI,EAAE;AACtC,mCAAuB;AAYvB,6BAAiB,WAA0E,wBAAwB;AAAA,cAClH,YAAY,cAAc,mBAAmB,eAAe;AAAA,cAC5D,mBAAmB,EAAE;AAAA,YACtB,CAAC;AAED,gBAAI,mBAAmB,EAAE,8BAA8B,wBAAwB;AAC9E,kBAAI,CAAC,iBAAiB;AACrB,kCAAkBD,cAAa,MAAM,CAAC,iBAAiB,YAAY,CAAC;AAAA,cACrE;AACA,8BAAgB,OAAO,IAAI,SAAS,kBAAkB,iBAAiB,CAAC;AAAA,YACzE;AACA;AAAA,UAED,KAAK,8BAA8B;AAClC,gBAAI,iBAAiB;AACpB,mCAAqB;AACrB,gCAAkBA,cAAa,MAAM,CAAC,iBAAiB,YAAY,CAAC;AACpE,8BAAgB,WAAW,KAAK,IAAI,IAAI,MAAO,EAAE,eAAe;AAAA,YACjE;AACA;AAAA,UAED,KAAK,8BAA8B;AAClC,gCAAoB,EAAE;AACtB,mCAAuB,KAAK,IAAI,IAAI,EAAE;AACtC,mCAAuB,EAAE;AAgBzB,6BAAiB,WAAoF,6BAA6B;AAAA,cACjI,YAAY,cAAc,mBAAmB,eAAe;AAAA,cAC5D,mBAAmB,EAAE;AAAA,cACrB,6BAA6B,EAAE;AAAA,cAC/B,SAAS,EAAE;AAAA,YACZ,CAAC;AAED,gBAAI,mBAAmB,EAAE,8BAA8B,wBAAwB;AAC9E,gCAAkBA,cAAa,MAAM,CAAC,YAAY,CAAC;AACnD,8BAAgB,OAAO,IAAI,SAAS,uBAAuB,0CAA0C,CAAC;AAGtG,mCAAqB,kBAAkB,OAAO,MAAM;AAEnD,oBAAI,mBAAmB,gBAAgB,aAAa,iBAAiB,QAAQ;AAC5E,oCAAkBA,cAAa,iBAAiB,cAAc,CAAC,YAAY,GAAG,gBAAgB,UAAU;AAAA,gBACzG;AAAA,cACD,CAAC;AAAA,YACF;AAEA;AAAA,UAED,KAAK,8BAA8B;AAClC,gCAAoB,EAAE;AACtB,mCAAuB,KAAK,IAAI,IAAI,EAAE;AACtC,mCAAuB,EAAE;AAkBzB,6BAAiB,WAAsG,sCAAsC;AAAA,cAC5J,YAAY,cAAc,mBAAmB,eAAe;AAAA,cAC5D,mBAAmB,EAAE;AAAA,cACrB,6BAA6B,EAAE;AAAA,cAC/B,SAAS,EAAE;AAAA,cACX,SAAS,EAAE;AAAA,YACZ,CAAC;AAED,YAAAC,cAAa;AAEb,gBAAI,EAAE,SAAS;AACd,yBAAW,KAAK,0DAA0D;AAC1E,sBAAQ,IAAI,0DAA0D;AAAA,YACvE,WAAW,CAAC,KAAK,oBAAoB;AACpC,mBAAK,qBAAqB;AAC1B,4BAAc,QAAQ;AAAA,gBACrB,MAAM,SAAS;AAAA,gBACf,SAAS,IAAI,SAAS,gCAAgC,6CAA6C;AAAA,gBACnG,eAAe,IAAI,SAAS,EAAE,KAAK,uBAAuB,SAAS,CAAC,uBAAuB,EAAE,GAAG,iBAAiB;AAAA,cAClH,CAAC,EAAE,KAAK,YAAU;AACjB,oBAAI,OAAO,WAAW;AACrB,iCAAe,eAAe,mBAAmB,EAAE;AAAA,gBACpD;AAAA,cACD,CAAC;AAAA,YACF;AACA;AAAA,UAED,KAAK,8BAA8B;AAClC,gCAAoB,EAAE;AACtB,mCAAuB,KAAK,IAAI,IAAI,EAAE;AACtC,mCAAuB,EAAE;AAgBzB,6BAAiB,WAA0E,wBAAwB;AAAA,cAClH,YAAY,cAAc,mBAAmB,eAAe;AAAA,cAC5D,mBAAmB,EAAE;AAAA,cACrB,6BAA6B,EAAE;AAAA,cAC/B,SAAS,EAAE;AAAA,YACZ,CAAC;AAED,YAAAA,cAAa;AACb;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AA9Qa,sCAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAZU;",
  "names": ["showProgress", "hideProgress"]
}
