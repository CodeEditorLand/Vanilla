var y=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var m=(c,s,o,t)=>{for(var e=t>1?void 0:t?f(s,o):s,i=c.length-1,r;i>=0;i--)(r=c[i])&&(e=(t?r(s,o,e):r(e))||e);return t&&e&&y(s,o,e),e},n=(c,s)=>(o,t)=>s(o,t,c);import{Disposable as x,DisposableMap as S}from"../../../../base/common/lifecycle.js";import{isStringArray as l}from"../../../../base/common/types.js";import*as R from"../../../../nls.js";import{Action2 as I,MenuId as u,MenuRegistry as E,registerAction2 as w}from"../../../../platform/actions/common/actions.js";import{ContextKeyExpr as C,IContextKeyService as b,RawContextKey as k}from"../../../../platform/contextkey/common/contextkey.js";import{IStorageService as A,StorageScope as h}from"../../../../platform/storage/common/storage.js";import{getVirtualWorkspaceLocation as M}from"../../../../platform/workspace/common/virtualWorkspace.js";import{IWorkspaceContextService as W}from"../../../../platform/workspace/common/workspace.js";import{IWorkbenchEnvironmentService as T}from"../../../services/environment/common/environmentService.js";import{IRemoteExplorerService as O,REMOTE_EXPLORER_TYPE_KEY as v}from"../../../services/remote/common/remoteExplorerService.js";import{VIEWLET_ID as D}from"./remoteExplorer.js";const d=new k("selectedRemoteInExplorer","");let a=class extends x{constructor(o,t,e,i,r){super();this.contextKeyService=o;this.remoteExplorerService=t;this.environmentService=e;this.storageService=i;this.workspaceContextService=r;this.selectedRemoteContext=d.bindTo(o),this.switchRemoteMenu=u.for("workbench.remote.menu.switchRemoteMenu"),this._register(E.appendMenuItem(u.ViewContainerTitle,{submenu:this.switchRemoteMenu,title:R.localize("switchRemote.label","Switch Remote"),group:"navigation",when:C.equals("viewContainer",D),order:1,isSelection:!0})),this._register(t.onDidChangeTargetType(p=>{this.select(p)}))}switchRemoteMenu;completedRemotes=this._register(new S);selectedRemoteContext;setSelectionForConnection(){let o=!1;if(this.completedRemotes.size>0){let t;const e=this.environmentService.remoteAuthority;let i;e||(i=M(this.workspaceContextService.getWorkspace())?.scheme),o=!0;const r=e?[e.split("+")[0]]:i?[i]:this.storageService.get(v,h.WORKSPACE)?.split(",")??this.storageService.get(v,h.PROFILE)?.split(",");r!==void 0&&(t=this.getAuthorityForExplorerType(r)),t&&this.select(t)}return o}select(o){this.selectedRemoteContext.set(o[0]),this.remoteExplorerService.targetType=o}getAuthorityForExplorerType(o){let t;for(const e of this.completedRemotes)for(const i of e[1].authority)for(const r of o)if(i===r){t=e[1].authority;break}else if(e[1].virtualWorkspace===r){t=e[1].authority;break}return t}removeOptionItems(o){for(const t of o)if(t.group&&t.group.startsWith("targets")&&t.remoteAuthority&&(!t.when||this.contextKeyService.contextMatchesRules(t.when))){const e=l(t.remoteAuthority)?t.remoteAuthority:[t.remoteAuthority];this.completedRemotes.deleteAndDispose(e[0])}}createOptionItems(o){const t=this.completedRemotes.size;for(const e of o)if(e.group&&e.group.startsWith("targets")&&e.remoteAuthority&&(!e.when||this.contextKeyService.contextMatchesRules(e.when))){const i=e.name,r=l(e.remoteAuthority)?e.remoteAuthority:[e.remoteAuthority];if(this.completedRemotes.has(r[0]))continue;const p=this,g=w(class extends I{constructor(){super({id:`workbench.action.remoteExplorer.show.${r[0]}`,title:i,toggled:d.isEqualTo(r[0]),menu:{id:p.switchRemoteMenu}})}async run(){p.select(r)}});this.completedRemotes.set(r[0],{text:i.value,authority:r,virtualWorkspace:e.virtualWorkspace,dispose:()=>g.dispose()})}this.completedRemotes.size>t&&this.setSelectionForConnection()}};a=m([n(0,b),n(1,O),n(2,T),n(3,A),n(4,W)],a);export{d as SELECTED_REMOTE_IN_EXPLORER,a as SwitchRemoteViewItem};
