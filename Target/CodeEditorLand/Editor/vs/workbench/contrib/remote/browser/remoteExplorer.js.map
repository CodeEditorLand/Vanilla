{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remoteExplorer.ts"],
  "sourcesContent": ["import { Action } from \"../../../../base/common/actions.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { OperatingSystem, isWeb } from \"../../../../base/common/platform.js\";\nimport Severity from \"../../../../base/common/severity.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tConfigurationTarget,\n\ttype IConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\ttype INotificationHandle,\n\tINotificationService,\n\ttype IPromptChoice,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport type { IRemoteAgentEnvironment } from \"../../../../platform/remote/common/remoteAgentEnvironment.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tITunnelService,\n\ttype RemoteTunnel,\n\tTunnelPrivacyId,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport { ViewPaneContainer } from \"../../../browser/parts/views/viewPaneContainer.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tExtensions,\n\ttype IViewContainersRegistry,\n\ttype IViewsRegistry,\n\ttype ViewContainer,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport { IWorkbenchConfigurationService } from \"../../../services/configuration/common/configuration.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport {\n\tIRemoteExplorerService,\n\tPORT_AUTO_FALLBACK_SETTING,\n\tPORT_AUTO_FORWARD_SETTING,\n\tPORT_AUTO_SOURCE_SETTING,\n\tPORT_AUTO_SOURCE_SETTING_HYBRID,\n\tPORT_AUTO_SOURCE_SETTING_OUTPUT,\n\tPORT_AUTO_SOURCE_SETTING_PROCESS,\n\tTUNNEL_VIEW_CONTAINER_ID,\n\tTUNNEL_VIEW_ID,\n} from \"../../../services/remote/common/remoteExplorerService.js\";\nimport {\n\ttype Attributes,\n\tAutoTunnelSource,\n\tOnPortForward,\n\ttype Tunnel,\n\tTunnelCloseReason,\n\tTunnelSource,\n\tforwardedPortsViewEnabled,\n\tmakeAddress,\n\tmapHasAddressLocalhostOrAllInterfaces,\n} from \"../../../services/remote/common/tunnelModel.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\nimport { IDebugService } from \"../../debug/common/debug.js\";\nimport { IExternalUriOpenerService } from \"../../externalUriOpener/common/externalUriOpenerService.js\";\nimport { ITerminalService } from \"../../terminal/browser/terminal.js\";\nimport { portsViewIcon } from \"./remoteIcons.js\";\nimport {\n\tForwardPortAction,\n\tOpenPortInBrowserAction,\n\tOpenPortInPreviewAction,\n\tTunnelPanel,\n\tTunnelPanelDescriptor,\n\tTunnelViewModel,\n\topenPreviewEnabledContext,\n} from \"./tunnelView.js\";\nimport { UrlFinder } from \"./urlFinder.js\";\n\nexport const VIEWLET_ID = \"workbench.view.remote\";\n\nexport class ForwardedPortsView\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate readonly contextKeyListener = this._register(\n\t\tnew MutableDisposable<IDisposable>(),\n\t);\n\tprivate readonly activityBadge = this._register(\n\t\tnew MutableDisposable<IDisposable>(),\n\t);\n\tprivate entryAccessor: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\t\tthis._register(Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).registerViewWelcomeContent(TUNNEL_VIEW_ID, {\n\t\t\tcontent: this.environmentService.remoteAuthority ? nls.localize('remoteNoPorts', \"No forwarded ports. Forward a port to access your running services locally.\\n[Forward a Port]({0})\", `command:${ForwardPortAction.INLINE_ID}`)\n\t\t\t\t: nls.localize('noRemoteNoPorts', \"No forwarded ports. Forward a port to access your locally running services over the internet.\\n[Forward a Port]({0})\", `command:${ForwardPortAction.INLINE_ID}`),\n\t\t}));\n\t\tthis.enableBadgeAndStatusBar();\n\t\tthis.enableForwardedPortsView();\n\t}\n\n\tprivate async getViewContainer(): Promise<ViewContainer | null> {\n\t\treturn Registry.as<IViewContainersRegistry>(\n\t\t\tExtensions.ViewContainersRegistry,\n\t\t).registerViewContainer(\n\t\t\t{\n\t\t\t\tid: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\t\ttitle: nls.localize2(\"ports\", \"Ports\"),\n\t\t\t\ticon: portsViewIcon,\n\t\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [\n\t\t\t\t\tTUNNEL_VIEW_CONTAINER_ID,\n\t\t\t\t\t{ mergeViewWithContainerWhenSingleView: true },\n\t\t\t\t]),\n\t\t\t\tstorageId: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\t\thideIfEmpty: true,\n\t\t\t\torder: 5,\n\t\t\t},\n\t\t\tViewContainerLocation.Panel,\n\t\t);\n\t}\n\n\tprivate async enableForwardedPortsView() {\n\t\tthis.contextKeyListener.clear();\n\n\t\tconst viewEnabled: boolean = !!forwardedPortsViewEnabled.getValue(\n\t\t\tthis.contextKeyService,\n\t\t);\n\n\t\tif (viewEnabled) {\n\t\t\tconst viewContainer = await this.getViewContainer();\n\t\t\tconst tunnelPanelDescriptor = new TunnelPanelDescriptor(\n\t\t\t\tnew TunnelViewModel(\n\t\t\t\t\tthis.remoteExplorerService,\n\t\t\t\t\tthis.tunnelService,\n\t\t\t\t),\n\t\t\t\tthis.environmentService,\n\t\t\t);\n\t\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(\n\t\t\t\tExtensions.ViewsRegistry,\n\t\t\t);\n\t\t\tif (viewContainer) {\n\t\t\t\tthis.remoteExplorerService.enablePortsFeatures();\n\t\t\t\tviewsRegistry.registerViews(\n\t\t\t\t\t[tunnelPanelDescriptor],\n\t\t\t\t\tviewContainer,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.contextKeyListener.value =\n\t\t\t\tthis.contextKeyService.onDidChangeContext((e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.affectsSome(new Set(forwardedPortsViewEnabled.keys()))\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.enableForwardedPortsView();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}\n\n\tprivate enableBadgeAndStatusBar() {\n\t\tconst disposable = Registry.as<IViewsRegistry>(\n\t\t\tExtensions.ViewsRegistry,\n\t\t).onViewsRegistered((e) => {\n\t\t\tif (\n\t\t\t\te.find((view) =>\n\t\t\t\t\tview.views.find(\n\t\t\t\t\t\t(viewDescriptor) =>\n\t\t\t\t\t\t\tviewDescriptor.id === TUNNEL_VIEW_ID,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis._register(\n\t\t\t\t\tEvent.debounce(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel.onForwardPort,\n\t\t\t\t\t\t(_last, e) => e,\n\t\t\t\t\t\t50,\n\t\t\t\t\t)(() => {\n\t\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tthis._register(\n\t\t\t\t\tEvent.debounce(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel.onClosePort,\n\t\t\t\t\t\t(_last, e) => e,\n\t\t\t\t\t\t50,\n\t\t\t\t\t)(() => {\n\t\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tthis.updateActivityBadge();\n\t\t\t\tthis.updateStatusBar();\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateActivityBadge() {\n\t\tif (this.remoteExplorerService.tunnelModel.forwarded.size > 0) {\n\t\t\tthis.activityBadge.value = this.activityService.showViewActivity(\n\t\t\t\tTUNNEL_VIEW_ID,\n\t\t\t\t{\n\t\t\t\t\tbadge: new NumberBadge(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel.forwarded.size,\n\t\t\t\t\t\t(n) =>\n\t\t\t\t\t\t\tn === 1\n\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"1forwardedPort\",\n\t\t\t\t\t\t\t\t\t\t\"1 forwarded port\",\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"nForwardedPorts\",\n\t\t\t\t\t\t\t\t\t\t\"{0} forwarded ports\",\n\t\t\t\t\t\t\t\t\t\tn,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateStatusBar() {\n\t\tif (this.entryAccessor) {\n\t\t\tthis.entryAccessor.update(this.entry);\n\t\t} else {\n\t\t\tthis._register(\n\t\t\t\t(this.entryAccessor = this.statusbarService.addEntry(\n\t\t\t\t\tthis.entry,\n\t\t\t\t\t\"status.forwardedPorts\",\n\t\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t\t40,\n\t\t\t\t)),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate get entry(): IStatusbarEntry {\n\t\tlet tooltip: string;\n\t\tconst count =\n\t\t\tthis.remoteExplorerService.tunnelModel.forwarded.size +\n\t\t\tthis.remoteExplorerService.tunnelModel.detected.size;\n\t\tconst text = `${count}`;\n\t\tif (count === 0) {\n\t\t\ttooltip = nls.localize(\n\t\t\t\t\"remote.forwardedPorts.statusbarTextNone\",\n\t\t\t\t\"No Ports Forwarded\",\n\t\t\t);\n\t\t} else {\n\t\t\tconst allTunnels = Array.from(\n\t\t\t\tthis.remoteExplorerService.tunnelModel.forwarded.values(),\n\t\t\t);\n\t\t\tallTunnels.push(\n\t\t\t\t...Array.from(\n\t\t\t\t\tthis.remoteExplorerService.tunnelModel.detected.values(),\n\t\t\t\t),\n\t\t\t);\n\t\t\ttooltip = nls.localize(\n\t\t\t\t\"remote.forwardedPorts.statusbarTooltip\",\n\t\t\t\t\"Forwarded Ports: {0}\",\n\t\t\t\tallTunnels.map((forwarded) => forwarded.remotePort).join(\", \"),\n\t\t\t);\n\t\t}\n\t\treturn {\n\t\t\tname: nls.localize(\"status.forwardedPorts\", \"Forwarded Ports\"),\n\t\t\ttext: `$(radio-tower) ${text}`,\n\t\t\tariaLabel: tooltip,\n\t\t\ttooltip,\n\t\t\tcommand: `${TUNNEL_VIEW_ID}.focus`,\n\t\t};\n\t}\n}\n\nexport class PortRestore implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tif (this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tthis.restore();\n\t\t} else {\n\t\t\tEvent.once(this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet)(async () => {\n\t\t\t\tawait this.restore();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async restore() {\n\t\tthis.logService.trace(\"ForwardedPorts: Doing first restore.\");\n\t\treturn this.remoteExplorerService.restore();\n\t}\n}\n\nexport class AutomaticPortForwarding\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate procForwarder: ProcAutomaticPortForwarding | undefined;\n\tprivate outputForwarder: OutputAutomaticPortForwarding | undefined;\n\tprivate portListener: IDisposable | undefined;\n\n\tconstructor(\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IExternalUriOpenerService private readonly externalOpenerService: IExternalUriOpenerService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchConfigurationService private readonly configurationService: IWorkbenchConfigurationService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper();\n\t\tif (!environmentService.remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tconfigurationService.whenRemoteConfigurationLoaded().then(() => remoteAgentService.getEnvironment()).then(environment => {\n\t\t\tthis.setup(environment);\n\t\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(PORT_AUTO_SOURCE_SETTING)) {\n\t\t\t\t\tthis.setup(environment);\n\t\t\t\t} else if (e.affectsConfiguration(PORT_AUTO_FALLBACK_SETTING) && !this.portListener) {\n\t\t\t\t\tthis.listenForPorts();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tif (!this.storageService.getBoolean('processPortForwardingFallback', StorageScope.WORKSPACE, true)) {\n\t\t\tthis.configurationService.updateValue(PORT_AUTO_FALLBACK_SETTING, 0, ConfigurationTarget.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate getPortAutoFallbackNumber(): number {\n\t\tconst fallbackAt = this.configurationService.inspect<number>(\n\t\t\tPORT_AUTO_FALLBACK_SETTING,\n\t\t);\n\t\tif (\n\t\t\tfallbackAt.value !== undefined &&\n\t\t\t(fallbackAt.value === 0 ||\n\t\t\t\tfallbackAt.value !== fallbackAt.defaultValue)\n\t\t) {\n\t\t\treturn fallbackAt.value;\n\t\t}\n\t\tconst inspectSource = this.configurationService.inspect(\n\t\t\tPORT_AUTO_SOURCE_SETTING,\n\t\t);\n\t\tif (\n\t\t\tinspectSource.applicationValue ===\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.userValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.userLocalValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.userRemoteValue ===\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.workspaceFolderValue ===\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.workspaceValue === PORT_AUTO_SOURCE_SETTING_PROCESS\n\t\t) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn fallbackAt.value ?? 20;\n\t}\n\n\tprivate listenForPorts() {\n\t\tlet fallbackAt = this.getPortAutoFallbackNumber();\n\t\tif (fallbackAt === 0) {\n\t\t\tthis.portListener?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis.procForwarder &&\n\t\t\t!this.portListener &&\n\t\t\tthis.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) ===\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_PROCESS\n\t\t) {\n\t\t\tthis.portListener = this._register(\n\t\t\t\tthis.remoteExplorerService.tunnelModel.onForwardPort(\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tfallbackAt = this.getPortAutoFallbackNumber();\n\t\t\t\t\t\tif (fallbackAt === 0) {\n\t\t\t\t\t\t\tthis.portListener?.dispose();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel.forwarded.values(),\n\t\t\t\t\t\t\t).filter(\n\t\t\t\t\t\t\t\t(tunnel) =>\n\t\t\t\t\t\t\t\t\ttunnel.source.source === TunnelSource.Auto,\n\t\t\t\t\t\t\t).length > fallbackAt\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tawait this.configurationService.updateValue(\n\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING,\n\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING_HYBRID,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\t\t\"remote.autoForwardPortsSource.fallback\",\n\t\t\t\t\t\t\t\t\t\"Over 20 ports have been automatically forwarded. The `process` based automatic port forwarding has been switched to `hybrid` in settings. Some ports may no longer be detected.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\t\t\t\"switchBack\",\n\t\t\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"remote.autoForwardPortsSource.fallback.switchBack\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Undo\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.configurationService.updateValue(\n\t\t\t\t\t\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING,\n\t\t\t\t\t\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING_PROCESS,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.configurationService.updateValue(\n\t\t\t\t\t\t\t\t\t\t\t\t\tPORT_AUTO_FALLBACK_SETTING,\n\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.portListener?.dispose();\n\t\t\t\t\t\t\t\t\t\t\t\tthis.portListener = undefined;\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\t\t\t\"showPortSourceSetting\",\n\t\t\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"remote.autoForwardPortsSource.fallback.showPortSourceSetting\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Show Setting\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.preferencesService.openSettings(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tquery: \"remote.autoForwardPortsSource\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.portListener?.dispose();\n\t\t\tthis.portListener = undefined;\n\t\t}\n\t}\n\n\tprivate setup(environment: IRemoteAgentEnvironment | null) {\n\t\tconst alreadyForwarded = this.procForwarder?.forwarded;\n\t\tconst isSwitch = this.outputForwarder || this.procForwarder;\n\t\tthis.procForwarder?.dispose();\n\t\tthis.procForwarder = undefined;\n\t\tthis.outputForwarder?.dispose();\n\t\tthis.outputForwarder = undefined;\n\t\tif (environment?.os !== OperatingSystem.Linux) {\n\t\t\tif (\n\t\t\t\tthis.configurationService.inspect<string>(\n\t\t\t\t\tPORT_AUTO_SOURCE_SETTING,\n\t\t\t\t).default?.value !== PORT_AUTO_SOURCE_SETTING_OUTPUT\n\t\t\t) {\n\t\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\t\tConfigurationExtensions.Configuration,\n\t\t\t\t).registerDefaultConfigurations([\n\t\t\t\t\t{\n\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\t\"remote.autoForwardPortsSource\":\n\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING_OUTPUT,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t\tthis.outputForwarder = this._register(\n\t\t\t\tnew OutputAutomaticPortForwarding(\n\t\t\t\t\tthis.terminalService,\n\t\t\t\t\tthis.notificationService,\n\t\t\t\t\tthis.openerService,\n\t\t\t\t\tthis.externalOpenerService,\n\t\t\t\t\tthis.remoteExplorerService,\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t\tthis.debugService,\n\t\t\t\t\tthis.tunnelService,\n\t\t\t\t\tthis.hostService,\n\t\t\t\t\tthis.logService,\n\t\t\t\t\tthis.contextKeyService,\n\t\t\t\t\t() => false,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tconst useProc = () =>\n\t\t\t\tthis.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) ===\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_PROCESS;\n\t\t\tif (useProc()) {\n\t\t\t\tthis.procForwarder = this._register(\n\t\t\t\t\tnew ProcAutomaticPortForwarding(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\talreadyForwarded,\n\t\t\t\t\t\t!isSwitch,\n\t\t\t\t\t\tthis.configurationService,\n\t\t\t\t\t\tthis.remoteExplorerService,\n\t\t\t\t\t\tthis.notificationService,\n\t\t\t\t\t\tthis.openerService,\n\t\t\t\t\t\tthis.externalOpenerService,\n\t\t\t\t\t\tthis.tunnelService,\n\t\t\t\t\t\tthis.hostService,\n\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t\tthis.contextKeyService,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\tthis.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) ===\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_HYBRID\n\t\t\t) {\n\t\t\t\tthis.procForwarder = this._register(\n\t\t\t\t\tnew ProcAutomaticPortForwarding(\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\talreadyForwarded,\n\t\t\t\t\t\t!isSwitch,\n\t\t\t\t\t\tthis.configurationService,\n\t\t\t\t\t\tthis.remoteExplorerService,\n\t\t\t\t\t\tthis.notificationService,\n\t\t\t\t\t\tthis.openerService,\n\t\t\t\t\t\tthis.externalOpenerService,\n\t\t\t\t\t\tthis.tunnelService,\n\t\t\t\t\t\tthis.hostService,\n\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t\tthis.contextKeyService,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.outputForwarder = this._register(\n\t\t\t\tnew OutputAutomaticPortForwarding(\n\t\t\t\t\tthis.terminalService,\n\t\t\t\t\tthis.notificationService,\n\t\t\t\t\tthis.openerService,\n\t\t\t\t\tthis.externalOpenerService,\n\t\t\t\t\tthis.remoteExplorerService,\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t\tthis.debugService,\n\t\t\t\t\tthis.tunnelService,\n\t\t\t\t\tthis.hostService,\n\t\t\t\t\tthis.logService,\n\t\t\t\t\tthis.contextKeyService,\n\t\t\t\t\tuseProc,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis.listenForPorts();\n\t}\n}\n\nclass OnAutoForwardedAction extends Disposable {\n\tprivate lastNotifyTime: Date;\n\tprivate static NOTIFY_COOL_DOWN = 5000; // milliseconds\n\tprivate lastNotification: INotificationHandle | undefined;\n\tprivate lastShownPort: number | undefined;\n\tprivate doActionTunnels: RemoteTunnel[] | undefined;\n\tprivate alreadyOpenedOnce: Set<string> = new Set();\n\n\tconstructor(\n\t\tprivate readonly notificationService: INotificationService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly openerService: IOpenerService,\n\t\tprivate readonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly tunnelService: ITunnelService,\n\t\tprivate readonly hostService: IHostService,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotifyTime.setFullYear(this.lastNotifyTime.getFullYear() - 1);\n\t}\n\n\tpublic async doAction(tunnels: RemoteTunnel[]): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (OnAutoForwardedAction) Starting action for ${tunnels[0]?.tunnelRemotePort}`,\n\t\t);\n\t\tthis.doActionTunnels = tunnels;\n\t\tconst tunnel = await this.portNumberHeuristicDelay();\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose ${tunnel?.tunnelRemotePort}`,\n\t\t);\n\t\tif (tunnel) {\n\t\t\tconst allAttributes =\n\t\t\t\tawait this.remoteExplorerService.tunnelModel.getAttributes([\n\t\t\t\t\t{\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\tconst attributes = allAttributes?.get(\n\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t)?.onAutoForward;\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (OnAutoForwardedAction) onAutoForward action is ${attributes}`,\n\t\t\t);\n\t\t\tswitch (attributes) {\n\t\t\t\tcase OnPortForward.OpenBrowserOnce: {\n\t\t\t\t\tif (this.alreadyOpenedOnce.has(tunnel.localAddress)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.alreadyOpenedOnce.add(tunnel.localAddress);\n\t\t\t\t\t// Intentionally do not break so that the open browser path can be run.\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenBrowser: {\n\t\t\t\t\tconst address = makeAddress(\n\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t);\n\t\t\t\t\tawait OpenPortInBrowserAction.run(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel,\n\t\t\t\t\t\tthis.openerService,\n\t\t\t\t\t\taddress,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenPreview: {\n\t\t\t\t\tconst address = makeAddress(\n\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t);\n\t\t\t\t\tawait OpenPortInPreviewAction.run(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel,\n\t\t\t\t\t\tthis.openerService,\n\t\t\t\t\t\tthis.externalOpenerService,\n\t\t\t\t\t\taddress,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.Silent:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst elapsed =\n\t\t\t\t\t\tnew Date().getTime() - this.lastNotifyTime.getTime();\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`ForwardedPorts: (OnAutoForwardedAction) time elapsed since last notification ${elapsed} ms`,\n\t\t\t\t\t);\n\t\t\t\t\tif (elapsed > OnAutoForwardedAction.NOTIFY_COOL_DOWN) {\n\t\t\t\t\t\tawait this.showNotification(tunnel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic hide(removedPorts: number[]) {\n\t\tif (this.doActionTunnels) {\n\t\t\tthis.doActionTunnels = this.doActionTunnels.filter(\n\t\t\t\t(value) => !removedPorts.includes(value.tunnelRemotePort),\n\t\t\t);\n\t\t}\n\t\tif (\n\t\t\tthis.lastShownPort &&\n\t\t\tremovedPorts.indexOf(this.lastShownPort) >= 0\n\t\t) {\n\t\t\tthis.lastNotification?.close();\n\t\t}\n\t}\n\n\tprivate newerTunnel: RemoteTunnel | undefined;\n\tprivate async portNumberHeuristicDelay(): Promise<\n\t\tRemoteTunnel | undefined\n\t> {\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (OnAutoForwardedAction) Starting heuristic delay`,\n\t\t);\n\t\tif (!this.doActionTunnels || this.doActionTunnels.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.doActionTunnels = this.doActionTunnels.sort(\n\t\t\t(a, b) => a.tunnelRemotePort - b.tunnelRemotePort,\n\t\t);\n\t\tconst firstTunnel = this.doActionTunnels.shift()!;\n\t\t// Heuristic.\n\t\tif (firstTunnel.tunnelRemotePort % 1000 === 0) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because % 1000: ${firstTunnel.tunnelRemotePort}`,\n\t\t\t);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t\t// 9229 is the node inspect port\n\t\t} else if (\n\t\t\tfirstTunnel.tunnelRemotePort < 10000 &&\n\t\t\tfirstTunnel.tunnelRemotePort !== 9229\n\t\t) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because < 10000: ${firstTunnel.tunnelRemotePort}`,\n\t\t\t);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (OnAutoForwardedAction) Waiting for \"better\" tunnel than ${firstTunnel.tunnelRemotePort}`,\n\t\t);\n\t\tthis.newerTunnel = undefined;\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.newerTunnel) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t} else if (this.doActionTunnels?.includes(firstTunnel)) {\n\t\t\t\t\tresolve(firstTunnel);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t}, 3000);\n\t\t});\n\t}\n\n\tprivate async basicMessage(tunnel: RemoteTunnel) {\n\t\tconst properties =\n\t\t\tawait this.remoteExplorerService.tunnelModel.getAttributes(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tfalse,\n\t\t\t);\n\t\tconst label = properties?.get(tunnel.tunnelRemotePort)?.label;\n\t\treturn nls.localize(\n\t\t\t\"remote.tunnelsView.automaticForward\",\n\t\t\t\"Your application{0} running on port {1} is available.  \",\n\t\t\tlabel ? ` (${label})` : \"\",\n\t\t\ttunnel.tunnelRemotePort,\n\t\t);\n\t}\n\n\tprivate linkMessage() {\n\t\treturn nls.localize(\n\t\t\t{\n\t\t\t\tkey: \"remote.tunnelsView.notificationLink2\",\n\t\t\t\tcomment: [\n\t\t\t\t\t\"[See all forwarded ports]({0}) is a link. Only translate `See all forwarded ports`. Do not change brackets and parentheses or {0}\",\n\t\t\t\t],\n\t\t\t},\n\t\t\t\"[See all forwarded ports]({0})\",\n\t\t\t`command:${TunnelPanel.ID}.focus`,\n\t\t);\n\t}\n\n\tprivate async showNotification(tunnel: RemoteTunnel) {\n\t\tif (!(await this.hostService.hadLastFocus())) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.lastNotification?.close();\n\t\tlet message = await this.basicMessage(tunnel);\n\t\tconst choices = [this.openBrowserChoice(tunnel)];\n\t\tif (\n\t\t\t!isWeb ||\n\t\t\topenPreviewEnabledContext.getValue(this.contextKeyService)\n\t\t) {\n\t\t\tchoices.push(this.openPreviewChoice(tunnel));\n\t\t}\n\n\t\tif (\n\t\t\ttunnel.tunnelLocalPort !== tunnel.tunnelRemotePort &&\n\t\t\tthis.tunnelService.canElevate &&\n\t\t\tthis.tunnelService.isPortPrivileged(tunnel.tunnelRemotePort)\n\t\t) {\n\t\t\t// Privileged ports are not on Windows, so it's safe to use \"superuser\"\n\t\t\tmessage += nls.localize(\n\t\t\t\t\"remote.tunnelsView.elevationMessage\",\n\t\t\t\t\"You'll need to run as superuser to use port {0} locally.  \",\n\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t);\n\t\t\tchoices.unshift(this.elevateChoice(tunnel));\n\t\t}\n\n\t\tif (\n\t\t\ttunnel.privacy === TunnelPrivacyId.Private &&\n\t\t\tisWeb &&\n\t\t\tthis.tunnelService.canChangePrivacy\n\t\t) {\n\t\t\tchoices.push(this.makePublicChoice(tunnel));\n\t\t}\n\n\t\tmessage += this.linkMessage();\n\n\t\tthis.lastNotification = this.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tmessage,\n\t\t\tchoices,\n\t\t\t{\n\t\t\t\tneverShowAgain: {\n\t\t\t\t\tid: \"remote.tunnelsView.autoForwardNeverShow\",\n\t\t\t\t\tisSecondary: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.lastShownPort = tunnel.tunnelRemotePort;\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotification.onDidClose(() => {\n\t\t\tthis.lastNotification = undefined;\n\t\t\tthis.lastShownPort = undefined;\n\t\t});\n\t}\n\n\tprivate makePublicChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\tlabel: nls.localize(\"remote.tunnelsView.makePublic\", \"Make Public\"),\n\t\t\trun: async () => {\n\t\t\t\tconst oldTunnelDetails = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\tthis.remoteExplorerService.tunnelModel.forwarded,\n\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t);\n\t\t\t\tawait this.remoteExplorerService.close(\n\t\t\t\t\t{\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t},\n\t\t\t\t\tTunnelCloseReason.Other,\n\t\t\t\t);\n\t\t\t\treturn this.remoteExplorerService.forward({\n\t\t\t\t\tremote: {\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t},\n\t\t\t\t\tlocal: tunnel.tunnelLocalPort,\n\t\t\t\t\tname: oldTunnelDetails?.name,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tprivacy: TunnelPrivacyId.Public,\n\t\t\t\t\tsource: oldTunnelDetails?.source,\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate openBrowserChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(\n\t\t\ttunnel.tunnelRemoteHost,\n\t\t\ttunnel.tunnelRemotePort,\n\t\t);\n\t\treturn {\n\t\t\tlabel: OpenPortInBrowserAction.LABEL,\n\t\t\trun: () =>\n\t\t\t\tOpenPortInBrowserAction.run(\n\t\t\t\t\tthis.remoteExplorerService.tunnelModel,\n\t\t\t\t\tthis.openerService,\n\t\t\t\t\taddress,\n\t\t\t\t),\n\t\t};\n\t}\n\n\tprivate openPreviewChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(\n\t\t\ttunnel.tunnelRemoteHost,\n\t\t\ttunnel.tunnelRemotePort,\n\t\t);\n\t\treturn {\n\t\t\tlabel: OpenPortInPreviewAction.LABEL,\n\t\t\trun: () =>\n\t\t\t\tOpenPortInPreviewAction.run(\n\t\t\t\t\tthis.remoteExplorerService.tunnelModel,\n\t\t\t\t\tthis.openerService,\n\t\t\t\t\tthis.externalOpenerService,\n\t\t\t\t\taddress,\n\t\t\t\t),\n\t\t};\n\t}\n\n\tprivate elevateChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\t// Privileged ports are not on Windows, so it's ok to stick to just \"sudo\".\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"remote.tunnelsView.elevationButton\",\n\t\t\t\t\"Use Port {0} as Sudo...\",\n\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t),\n\t\t\trun: async () => {\n\t\t\t\tawait this.remoteExplorerService.close(\n\t\t\t\t\t{\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t},\n\t\t\t\t\tTunnelCloseReason.Other,\n\t\t\t\t);\n\t\t\t\tconst newTunnel = await this.remoteExplorerService.forward({\n\t\t\t\t\tremote: {\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t},\n\t\t\t\t\tlocal: tunnel.tunnelRemotePort,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tsource: AutoTunnelSource,\n\t\t\t\t});\n\t\t\t\tif (!newTunnel || typeof newTunnel === \"string\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.lastNotification?.close();\n\t\t\t\tthis.lastShownPort = newTunnel.tunnelRemotePort;\n\t\t\t\tthis.lastNotification = this.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t(await this.basicMessage(newTunnel)) + this.linkMessage(),\n\t\t\t\t\t[\n\t\t\t\t\t\tthis.openBrowserChoice(newTunnel),\n\t\t\t\t\t\tthis.openPreviewChoice(tunnel),\n\t\t\t\t\t],\n\t\t\t\t\t{\n\t\t\t\t\t\tneverShowAgain: {\n\t\t\t\t\t\t\tid: \"remote.tunnelsView.autoForwardNeverShow\",\n\t\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis.lastNotification.onDidClose(() => {\n\t\t\t\t\tthis.lastNotification = undefined;\n\t\t\t\t\tthis.lastShownPort = undefined;\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n}\n\nclass OutputAutomaticPortForwarding extends Disposable {\n\tprivate portsFeatures?: IDisposable;\n\tprivate urlFinder?: UrlFinder;\n\tprivate notifier: OnAutoForwardedAction;\n\n\tconstructor(\n\t\tprivate readonly terminalService: ITerminalService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly debugService: IDebugService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly contextKeyService: IContextKeyService,\n\t\treadonly privilegedOnly: () => boolean,\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(\n\t\t\tnotificationService,\n\t\t\tremoteExplorerService,\n\t\t\topenerService,\n\t\t\texternalOpenerService,\n\t\t\ttunnelService,\n\t\t\thostService,\n\t\t\tlogService,\n\t\t\tcontextKeyService,\n\t\t);\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\t\tthis.tryStartStopUrlFinder();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.portsFeatures = this._register(\n\t\t\tthis.remoteExplorerService.onEnabledPortsFeatures(() => {\n\t\t\t\tthis.tryStartStopUrlFinder();\n\t\t\t}),\n\t\t);\n\t\tthis.tryStartStopUrlFinder();\n\n\t\tif (\n\t\t\tconfigurationService.getValue(PORT_AUTO_SOURCE_SETTING) ===\n\t\t\tPORT_AUTO_SOURCE_SETTING_HYBRID\n\t\t) {\n\t\t\tthis._register(\n\t\t\t\tthis.tunnelService.onTunnelClosed((tunnel) =>\n\t\t\t\t\tthis.notifier.hide([tunnel.port]),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate tryStartStopUrlFinder() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.startUrlFinder();\n\t\t} else {\n\t\t\tthis.stopUrlFinder();\n\t\t}\n\t}\n\n\tprivate startUrlFinder() {\n\t\tif (\n\t\t\t!this.urlFinder &&\n\t\t\t!this.remoteExplorerService.portsFeaturesEnabled\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis.portsFeatures?.dispose();\n\t\tthis.urlFinder = this._register(\n\t\t\tnew UrlFinder(this.terminalService, this.debugService),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.urlFinder.onDidMatchLocalUrl(async (localUrl) => {\n\t\t\t\tif (\n\t\t\t\t\tmapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel.detected,\n\t\t\t\t\t\tlocalUrl.host,\n\t\t\t\t\t\tlocalUrl.port,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst attributes = (\n\t\t\t\t\tawait this.remoteExplorerService.tunnelModel.getAttributes([\n\t\t\t\t\t\tlocalUrl,\n\t\t\t\t\t])\n\t\t\t\t)?.get(localUrl.port);\n\t\t\t\tif (attributes?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tthis.privilegedOnly() &&\n\t\t\t\t\t!this.tunnelService.isPortPrivileged(localUrl.port)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst forwarded = await this.remoteExplorerService.forward(\n\t\t\t\t\t{ remote: localUrl, source: AutoTunnelSource },\n\t\t\t\t\tattributes ?? null,\n\t\t\t\t);\n\t\t\t\tif (forwarded && typeof forwarded !== \"string\") {\n\t\t\t\t\tthis.notifier.doAction([forwarded]);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate stopUrlFinder() {\n\t\tif (this.urlFinder) {\n\t\t\tthis.urlFinder.dispose();\n\t\t\tthis.urlFinder = undefined;\n\t\t}\n\t}\n}\n\nclass ProcAutomaticPortForwarding extends Disposable {\n\tprivate candidateListener: IDisposable | undefined;\n\tprivate autoForwarded: Set<string> = new Set();\n\tprivate notifiedOnly: Set<string> = new Set();\n\tprivate notifier: OnAutoForwardedAction;\n\tprivate initialCandidates: Set<string> = new Set();\n\tprivate portsFeatures: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly unforwardOnly: boolean,\n\t\treadonly alreadyAutoForwarded: Set<string> | undefined,\n\t\tprivate readonly needsInitialCandidates: boolean,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\treadonly remoteExplorerService: IRemoteExplorerService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(\n\t\t\tnotificationService,\n\t\t\tremoteExplorerService,\n\t\t\topenerService,\n\t\t\texternalOpenerService,\n\t\t\ttunnelService,\n\t\t\thostService,\n\t\t\tlogService,\n\t\t\tcontextKeyService,\n\t\t);\n\t\talreadyAutoForwarded?.forEach((port) => this.autoForwarded.add(port));\n\t\tthis.initialize();\n\t}\n\n\tget forwarded(): Set<string> {\n\t\treturn this.autoForwarded;\n\t}\n\n\tprivate async initialize() {\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tawait new Promise<void>((resolve) =>\n\t\t\t\tthis.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet(\n\t\t\t\t\t() => resolve(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\t\tawait this.startStopCandidateListener();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.portsFeatures = this._register(\n\t\t\tthis.remoteExplorerService.onEnabledPortsFeatures(async () => {\n\t\t\t\tawait this.startStopCandidateListener();\n\t\t\t}),\n\t\t);\n\n\t\tthis.startStopCandidateListener();\n\t}\n\n\tprivate async startStopCandidateListener() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tawait this.startCandidateListener();\n\t\t} else {\n\t\t\tthis.stopCandidateListener();\n\t\t}\n\t}\n\n\tprivate stopCandidateListener() {\n\t\tif (this.candidateListener) {\n\t\t\tthis.candidateListener.dispose();\n\t\t\tthis.candidateListener = undefined;\n\t\t}\n\t}\n\n\tprivate async startCandidateListener() {\n\t\tif (\n\t\t\tthis.candidateListener ||\n\t\t\t!this.remoteExplorerService.portsFeaturesEnabled\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis.portsFeatures?.dispose();\n\n\t\t// Capture list of starting candidates so we don't auto forward them later.\n\t\tawait this.setInitialCandidates();\n\n\t\t// Need to check the setting again, since it may have changed while we waited for the initial candidates to be set.\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.candidateListener = this._register(\n\t\t\t\tthis.remoteExplorerService.tunnelModel.onCandidatesChanged(\n\t\t\t\t\tthis.handleCandidateUpdate,\n\t\t\t\t\tthis,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async setInitialCandidates() {\n\t\tif (!this.needsInitialCandidates) {\n\t\t\tthis.logService.debug(\n\t\t\t\t`ForwardedPorts: (ProcForwarding) Not setting initial candidates`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tlet startingCandidates =\n\t\t\tthis.remoteExplorerService.tunnelModel.candidatesOrUndefined;\n\t\tif (!startingCandidates) {\n\t\t\tawait new Promise<void>((resolve) =>\n\t\t\t\tthis.remoteExplorerService.tunnelModel.onCandidatesChanged(() =>\n\t\t\t\t\tresolve(),\n\t\t\t\t),\n\t\t\t);\n\t\t\tstartingCandidates =\n\t\t\t\tthis.remoteExplorerService.tunnelModel.candidates;\n\t\t}\n\n\t\tfor (const value of startingCandidates) {\n\t\t\tthis.initialCandidates.add(makeAddress(value.host, value.port));\n\t\t}\n\t\tthis.logService.debug(\n\t\t\t`ForwardedPorts: (ProcForwarding) Initial candidates set to ${startingCandidates.map((candidate) => candidate.port).join(\", \")}`,\n\t\t);\n\t}\n\n\tprivate async forwardCandidates(): Promise<RemoteTunnel[] | undefined> {\n\t\tlet attributes: Map<number, Attributes> | undefined;\n\t\tconst allTunnels: RemoteTunnel[] = [];\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (ProcForwarding) Attempting to forward ${this.remoteExplorerService.tunnelModel.candidates.length} candidates`,\n\t\t);\n\t\tfor (const value of this.remoteExplorerService.tunnelModel.candidates) {\n\t\t\tif (!value.detail) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`ForwardedPorts: (ProcForwarding) Port ${value.port} missing detail`,\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!attributes) {\n\t\t\t\tattributes =\n\t\t\t\t\tawait this.remoteExplorerService.tunnelModel.getAttributes(\n\t\t\t\t\t\tthis.remoteExplorerService.tunnelModel.candidates,\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst portAttributes = attributes?.get(value.port);\n\n\t\t\tconst address = makeAddress(value.host, value.port);\n\t\t\tif (\n\t\t\t\tthis.initialCandidates.has(address) &&\n\t\t\t\tportAttributes?.onAutoForward === undefined\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis.notifiedOnly.has(address) ||\n\t\t\t\tthis.autoForwarded.has(address)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst alreadyForwarded = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\tthis.remoteExplorerService.tunnelModel.forwarded,\n\t\t\t\tvalue.host,\n\t\t\t\tvalue.port,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tmapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\tthis.remoteExplorerService.tunnelModel.detected,\n\t\t\t\t\tvalue.host,\n\t\t\t\t\tvalue.port,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (portAttributes?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`ForwardedPorts: (ProcForwarding) Port ${value.port} is ignored`,\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward(\n\t\t\t\t{ remote: value, source: AutoTunnelSource },\n\t\t\t\tportAttributes ?? null,\n\t\t\t);\n\t\t\tif (!alreadyForwarded && forwarded) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`ForwardedPorts: (ProcForwarding) Port ${value.port} has been forwarded`,\n\t\t\t\t);\n\t\t\t\tthis.autoForwarded.add(address);\n\t\t\t} else if (forwarded) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`ForwardedPorts: (ProcForwarding) Port ${value.port} has been notified`,\n\t\t\t\t);\n\t\t\t\tthis.notifiedOnly.add(address);\n\t\t\t}\n\t\t\tif (forwarded && typeof forwarded !== \"string\") {\n\t\t\t\tallTunnels.push(forwarded);\n\t\t\t}\n\t\t}\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (ProcForwarding) Forwarded ${allTunnels.length} candidates`,\n\t\t);\n\t\tif (allTunnels.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn allTunnels;\n\t}\n\n\tprivate async handleCandidateUpdate(\n\t\tremoved: Map<string, { host: string; port: number }>,\n\t) {\n\t\tconst removedPorts: number[] = [];\n\t\tlet autoForwarded: Map<string, string | Tunnel>;\n\t\tif (this.unforwardOnly) {\n\t\t\tautoForwarded = new Map();\n\t\t\tfor (const entry of this.remoteExplorerService.tunnelModel.forwarded.entries()) {\n\t\t\t\tif (entry[1].source.source === TunnelSource.Auto) {\n\t\t\t\t\tautoForwarded.set(entry[0], entry[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tautoForwarded = new Map(this.autoForwarded.entries());\n\t\t}\n\n\t\tfor (const removedPort of removed) {\n\t\t\tconst key = removedPort[0];\n\t\t\tlet value = removedPort[1];\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\tautoForwarded,\n\t\t\t\tvalue.host,\n\t\t\t\tvalue.port,\n\t\t\t);\n\t\t\tif (forwardedValue) {\n\t\t\t\tif (typeof forwardedValue === \"string\") {\n\t\t\t\t\tthis.autoForwarded.delete(key);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = {\n\t\t\t\t\t\thost: forwardedValue.remoteHost,\n\t\t\t\t\t\tport: forwardedValue.remotePort,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tawait this.remoteExplorerService.close(\n\t\t\t\t\tvalue,\n\t\t\t\t\tTunnelCloseReason.AutoForwardEnd,\n\t\t\t\t);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.notifiedOnly.has(key)) {\n\t\t\t\tthis.notifiedOnly.delete(key);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.initialCandidates.has(key)) {\n\t\t\t\tthis.initialCandidates.delete(key);\n\t\t\t}\n\t\t}\n\n\t\tif (this.unforwardOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (removedPorts.length > 0) {\n\t\t\tawait this.notifier.hide(removedPorts);\n\t\t}\n\n\t\tconst tunnels = await this.forwardCandidates();\n\t\tif (tunnels) {\n\t\t\tawait this.notifier.doAction(tunnels);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
