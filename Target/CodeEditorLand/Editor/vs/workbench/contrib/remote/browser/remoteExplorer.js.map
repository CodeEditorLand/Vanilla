{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remoteExplorer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { Extensions, IViewContainersRegistry, IViewsRegistry, ViewContainer, ViewContainerLocation } from '../../../common/views.js';\nimport { IRemoteExplorerService, PORT_AUTO_FALLBACK_SETTING, PORT_AUTO_FORWARD_SETTING, PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_HYBRID, PORT_AUTO_SOURCE_SETTING_OUTPUT, PORT_AUTO_SOURCE_SETTING_PROCESS, TUNNEL_VIEW_CONTAINER_ID, TUNNEL_VIEW_ID } from '../../../services/remote/common/remoteExplorerService.js';\nimport { Attributes, AutoTunnelSource, forwardedPortsViewEnabled, makeAddress, mapHasAddressLocalhostOrAllInterfaces, OnPortForward, Tunnel, TunnelCloseReason, TunnelSource } from '../../../services/remote/common/tunnelModel.js';\nimport { ForwardPortAction, OpenPortInBrowserAction, TunnelPanel, TunnelPanelDescriptor, TunnelViewModel, OpenPortInPreviewAction, openPreviewEnabledContext } from './tunnelView.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from '../../../services/statusbar/browser/statusbar.js';\nimport { UrlFinder } from './urlFinder.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { INotificationHandle, INotificationService, IPromptChoice } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ITerminalService } from '../../terminal/browser/terminal.js';\nimport { IDebugService } from '../../debug/common/debug.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { isWeb, OperatingSystem } from '../../../../base/common/platform.js';\nimport { ITunnelService, RemoteTunnel, TunnelPrivacyId } from '../../../../platform/tunnel/common/tunnel.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { portsViewIcon } from './remoteIcons.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IExternalUriOpenerService } from '../../externalUriOpener/common/externalUriOpenerService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nimport { IRemoteAgentEnvironment } from '../../../../platform/remote/common/remoteAgentEnvironment.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { IStorageService, StorageScope } from '../../../../platform/storage/common/storage.js';\n\nexport const VIEWLET_ID = 'workbench.view.remote';\n\nexport class ForwardedPortsView extends Disposable implements IWorkbenchContribution {\n\tprivate readonly contextKeyListener = this._register(new MutableDisposable<IDisposable>());\n\tprivate readonly activityBadge = this._register(new MutableDisposable<IDisposable>());\n\tprivate entryAccessor: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\t\tthis._register(Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).registerViewWelcomeContent(TUNNEL_VIEW_ID, {\n\t\t\tcontent: this.environmentService.remoteAuthority ? nls.localize('remoteNoPorts', \"No forwarded ports. Forward a port to access your running services locally.\\n[Forward a Port]({0})\", `command:${ForwardPortAction.INLINE_ID}`)\n\t\t\t\t: nls.localize('noRemoteNoPorts', \"No forwarded ports. Forward a port to access your locally running services over the internet.\\n[Forward a Port]({0})\", `command:${ForwardPortAction.INLINE_ID}`),\n\t\t}));\n\t\tthis.enableBadgeAndStatusBar();\n\t\tthis.enableForwardedPortsView();\n\t}\n\n\tprivate async getViewContainer(): Promise<ViewContainer | null> {\n\t\treturn Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry).registerViewContainer({\n\t\t\tid: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\ttitle: nls.localize2('ports', \"Ports\"),\n\t\t\ticon: portsViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [TUNNEL_VIEW_CONTAINER_ID, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\tstorageId: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\thideIfEmpty: true,\n\t\t\torder: 5\n\t\t}, ViewContainerLocation.Panel);\n\t}\n\n\tprivate async enableForwardedPortsView() {\n\t\tthis.contextKeyListener.clear();\n\n\t\tconst viewEnabled: boolean = !!forwardedPortsViewEnabled.getValue(this.contextKeyService);\n\n\t\tif (viewEnabled) {\n\t\t\tconst viewContainer = await this.getViewContainer();\n\t\t\tconst tunnelPanelDescriptor = new TunnelPanelDescriptor(new TunnelViewModel(this.remoteExplorerService, this.tunnelService), this.environmentService);\n\t\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\t\t\tif (viewContainer) {\n\t\t\t\tthis.remoteExplorerService.enablePortsFeatures();\n\t\t\t\tviewsRegistry.registerViews([tunnelPanelDescriptor], viewContainer);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.contextKeyListener.value = this.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(new Set(forwardedPortsViewEnabled.keys()))) {\n\t\t\t\t\tthis.enableForwardedPortsView();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate enableBadgeAndStatusBar() {\n\t\tconst disposable = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).onViewsRegistered(e => {\n\t\t\tif (e.find(view => view.views.find(viewDescriptor => viewDescriptor.id === TUNNEL_VIEW_ID))) {\n\t\t\t\tthis._register(Event.debounce(this.remoteExplorerService.tunnelModel.onForwardPort, (_last, e) => e, 50)(() => {\n\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\t\t\t\tthis._register(Event.debounce(this.remoteExplorerService.tunnelModel.onClosePort, (_last, e) => e, 50)(() => {\n\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\n\t\t\t\tthis.updateActivityBadge();\n\t\t\t\tthis.updateStatusBar();\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateActivityBadge() {\n\t\tif (this.remoteExplorerService.tunnelModel.forwarded.size > 0) {\n\t\t\tthis.activityBadge.value = this.activityService.showViewActivity(TUNNEL_VIEW_ID, {\n\t\t\t\tbadge: new NumberBadge(this.remoteExplorerService.tunnelModel.forwarded.size, n => n === 1 ? nls.localize('1forwardedPort', \"1 forwarded port\") : nls.localize('nForwardedPorts', \"{0} forwarded ports\", n))\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateStatusBar() {\n\t\tif (!this.entryAccessor) {\n\t\t\tthis._register(this.entryAccessor = this.statusbarService.addEntry(this.entry, 'status.forwardedPorts', StatusbarAlignment.LEFT, 40));\n\t\t} else {\n\t\t\tthis.entryAccessor.update(this.entry);\n\t\t}\n\t}\n\n\tprivate get entry(): IStatusbarEntry {\n\t\tlet tooltip: string;\n\t\tconst count = this.remoteExplorerService.tunnelModel.forwarded.size + this.remoteExplorerService.tunnelModel.detected.size;\n\t\tconst text = `${count}`;\n\t\tif (count === 0) {\n\t\t\ttooltip = nls.localize('remote.forwardedPorts.statusbarTextNone', \"No Ports Forwarded\");\n\t\t} else {\n\t\t\tconst allTunnels = Array.from(this.remoteExplorerService.tunnelModel.forwarded.values());\n\t\t\tallTunnels.push(...Array.from(this.remoteExplorerService.tunnelModel.detected.values()));\n\t\t\ttooltip = nls.localize('remote.forwardedPorts.statusbarTooltip', \"Forwarded Ports: {0}\",\n\t\t\t\tallTunnels.map(forwarded => forwarded.remotePort).join(', '));\n\t\t}\n\t\treturn {\n\t\t\tname: nls.localize('status.forwardedPorts', \"Forwarded Ports\"),\n\t\t\ttext: `$(radio-tower) ${text}`,\n\t\t\tariaLabel: tooltip,\n\t\t\ttooltip,\n\t\t\tcommand: `${TUNNEL_VIEW_ID}.focus`\n\t\t};\n\t}\n}\n\nexport class PortRestore implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tEvent.once(this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet)(async () => {\n\t\t\t\tawait this.restore();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.restore();\n\t\t}\n\t}\n\n\tprivate async restore() {\n\t\tthis.logService.trace('ForwardedPorts: Doing first restore.');\n\t\treturn this.remoteExplorerService.restore();\n\t}\n}\n\n\nexport class AutomaticPortForwarding extends Disposable implements IWorkbenchContribution {\n\tprivate procForwarder: ProcAutomaticPortForwarding | undefined;\n\tprivate outputForwarder: OutputAutomaticPortForwarding | undefined;\n\tprivate portListener: IDisposable | undefined;\n\n\tconstructor(\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IExternalUriOpenerService private readonly externalOpenerService: IExternalUriOpenerService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchConfigurationService private readonly configurationService: IWorkbenchConfigurationService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper();\n\t\tif (!environmentService.remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tconfigurationService.whenRemoteConfigurationLoaded().then(() => remoteAgentService.getEnvironment()).then(environment => {\n\t\t\tthis.setup(environment);\n\t\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(PORT_AUTO_SOURCE_SETTING)) {\n\t\t\t\t\tthis.setup(environment);\n\t\t\t\t} else if (e.affectsConfiguration(PORT_AUTO_FALLBACK_SETTING) && !this.portListener) {\n\t\t\t\t\tthis.listenForPorts();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tif (!this.storageService.getBoolean('processPortForwardingFallback', StorageScope.WORKSPACE, true)) {\n\t\t\tthis.configurationService.updateValue(PORT_AUTO_FALLBACK_SETTING, 0, ConfigurationTarget.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate getPortAutoFallbackNumber(): number {\n\t\tconst fallbackAt = this.configurationService.inspect<number>(PORT_AUTO_FALLBACK_SETTING);\n\t\tif ((fallbackAt.value !== undefined) && (fallbackAt.value === 0 || (fallbackAt.value !== fallbackAt.defaultValue))) {\n\t\t\treturn fallbackAt.value;\n\t\t}\n\t\tconst inspectSource = this.configurationService.inspect(PORT_AUTO_SOURCE_SETTING);\n\t\tif (inspectSource.applicationValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.userValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.userLocalValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.userRemoteValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.workspaceFolderValue === PORT_AUTO_SOURCE_SETTING_PROCESS ||\n\t\t\tinspectSource.workspaceValue === PORT_AUTO_SOURCE_SETTING_PROCESS) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn fallbackAt.value ?? 20;\n\t}\n\n\tprivate listenForPorts() {\n\t\tlet fallbackAt = this.getPortAutoFallbackNumber();\n\t\tif (fallbackAt === 0) {\n\t\t\tthis.portListener?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.procForwarder && !this.portListener && (this.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_PROCESS)) {\n\t\t\tthis.portListener = this._register(this.remoteExplorerService.tunnelModel.onForwardPort(async () => {\n\t\t\t\tfallbackAt = this.getPortAutoFallbackNumber();\n\t\t\t\tif (fallbackAt === 0) {\n\t\t\t\t\tthis.portListener?.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Array.from(this.remoteExplorerService.tunnelModel.forwarded.values()).filter(tunnel => tunnel.source.source === TunnelSource.Auto).length > fallbackAt) {\n\t\t\t\t\tawait this.configurationService.updateValue(PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_HYBRID);\n\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\tmessage: nls.localize('remote.autoForwardPortsSource.fallback', \"Over 20 ports have been automatically forwarded. The `process` based automatic port forwarding has been switched to `hybrid` in settings. Some ports may no longer be detected.\"),\n\t\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\tnew Action('switchBack', nls.localize('remote.autoForwardPortsSource.fallback.switchBack', \"Undo\"), undefined, true, async () => {\n\t\t\t\t\t\t\t\t\tawait this.configurationService.updateValue(PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_PROCESS);\n\t\t\t\t\t\t\t\t\tawait this.configurationService.updateValue(PORT_AUTO_FALLBACK_SETTING, 0, ConfigurationTarget.WORKSPACE);\n\t\t\t\t\t\t\t\t\tthis.portListener?.dispose();\n\t\t\t\t\t\t\t\t\tthis.portListener = undefined;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew Action('showPortSourceSetting', nls.localize('remote.autoForwardPortsSource.fallback.showPortSourceSetting', \"Show Setting\"), undefined, true, async () => {\n\t\t\t\t\t\t\t\t\tawait this.preferencesService.openSettings({\n\t\t\t\t\t\t\t\t\t\tquery: 'remote.autoForwardPortsSource'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.portListener?.dispose();\n\t\t\tthis.portListener = undefined;\n\t\t}\n\t}\n\n\n\tprivate setup(environment: IRemoteAgentEnvironment | null) {\n\t\tconst alreadyForwarded = this.procForwarder?.forwarded;\n\t\tconst isSwitch = this.outputForwarder || this.procForwarder;\n\t\tthis.procForwarder?.dispose();\n\t\tthis.procForwarder = undefined;\n\t\tthis.outputForwarder?.dispose();\n\t\tthis.outputForwarder = undefined;\n\t\tif (environment?.os !== OperatingSystem.Linux) {\n\t\t\tif (this.configurationService.inspect<string>(PORT_AUTO_SOURCE_SETTING).default?.value !== PORT_AUTO_SOURCE_SETTING_OUTPUT) {\n\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t.registerDefaultConfigurations([{ overrides: { 'remote.autoForwardPortsSource': PORT_AUTO_SOURCE_SETTING_OUTPUT } }]);\n\t\t\t}\n\t\t\tthis.outputForwarder = this._register(new OutputAutomaticPortForwarding(this.terminalService, this.notificationService, this.openerService, this.externalOpenerService,\n\t\t\t\tthis.remoteExplorerService, this.configurationService, this.debugService, this.tunnelService, this.hostService, this.logService, this.contextKeyService, () => false));\n\t\t} else {\n\t\t\tconst useProc = () => (this.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_PROCESS);\n\t\t\tif (useProc()) {\n\t\t\t\tthis.procForwarder = this._register(new ProcAutomaticPortForwarding(false, alreadyForwarded, !isSwitch, this.configurationService, this.remoteExplorerService, this.notificationService,\n\t\t\t\t\tthis.openerService, this.externalOpenerService, this.tunnelService, this.hostService, this.logService, this.contextKeyService));\n\t\t\t} else if (this.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_HYBRID) {\n\t\t\t\tthis.procForwarder = this._register(new ProcAutomaticPortForwarding(true, alreadyForwarded, !isSwitch, this.configurationService, this.remoteExplorerService, this.notificationService,\n\t\t\t\t\tthis.openerService, this.externalOpenerService, this.tunnelService, this.hostService, this.logService, this.contextKeyService));\n\t\t\t}\n\t\t\tthis.outputForwarder = this._register(new OutputAutomaticPortForwarding(this.terminalService, this.notificationService, this.openerService, this.externalOpenerService,\n\t\t\t\tthis.remoteExplorerService, this.configurationService, this.debugService, this.tunnelService, this.hostService, this.logService, this.contextKeyService, useProc));\n\t\t}\n\t\tthis.listenForPorts();\n\t}\n}\n\nclass OnAutoForwardedAction extends Disposable {\n\tprivate lastNotifyTime: Date;\n\tprivate static NOTIFY_COOL_DOWN = 5000; // milliseconds\n\tprivate lastNotification: INotificationHandle | undefined;\n\tprivate lastShownPort: number | undefined;\n\tprivate doActionTunnels: RemoteTunnel[] | undefined;\n\tprivate alreadyOpenedOnce: Set<string> = new Set();\n\n\tconstructor(private readonly notificationService: INotificationService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly openerService: IOpenerService,\n\t\tprivate readonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly tunnelService: ITunnelService,\n\t\tprivate readonly hostService: IHostService,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly contextKeyService: IContextKeyService) {\n\t\tsuper();\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotifyTime.setFullYear(this.lastNotifyTime.getFullYear() - 1);\n\t}\n\n\tpublic async doAction(tunnels: RemoteTunnel[]): Promise<void> {\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Starting action for ${tunnels[0]?.tunnelRemotePort}`);\n\t\tthis.doActionTunnels = tunnels;\n\t\tconst tunnel = await this.portNumberHeuristicDelay();\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose ${tunnel?.tunnelRemotePort}`);\n\t\tif (tunnel) {\n\t\t\tconst allAttributes = await this.remoteExplorerService.tunnelModel.getAttributes([{ port: tunnel.tunnelRemotePort, host: tunnel.tunnelRemoteHost }]);\n\t\t\tconst attributes = allAttributes?.get(tunnel.tunnelRemotePort)?.onAutoForward;\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) onAutoForward action is ${attributes}`);\n\t\t\tswitch (attributes) {\n\t\t\t\tcase OnPortForward.OpenBrowserOnce: {\n\t\t\t\t\tif (this.alreadyOpenedOnce.has(tunnel.localAddress)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.alreadyOpenedOnce.add(tunnel.localAddress);\n\t\t\t\t\t// Intentionally do not break so that the open browser path can be run.\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenBrowser: {\n\t\t\t\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tawait OpenPortInBrowserAction.run(this.remoteExplorerService.tunnelModel, this.openerService, address);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenPreview: {\n\t\t\t\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tawait OpenPortInPreviewAction.run(this.remoteExplorerService.tunnelModel, this.openerService, this.externalOpenerService, address);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.Silent: break;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst elapsed = new Date().getTime() - this.lastNotifyTime.getTime();\n\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) time elapsed since last notification ${elapsed} ms`);\n\t\t\t\t\tif (elapsed > OnAutoForwardedAction.NOTIFY_COOL_DOWN) {\n\t\t\t\t\t\tawait this.showNotification(tunnel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic hide(removedPorts: number[]) {\n\t\tif (this.doActionTunnels) {\n\t\t\tthis.doActionTunnels = this.doActionTunnels.filter(value => !removedPorts.includes(value.tunnelRemotePort));\n\t\t}\n\t\tif (this.lastShownPort && removedPorts.indexOf(this.lastShownPort) >= 0) {\n\t\t\tthis.lastNotification?.close();\n\t\t}\n\t}\n\n\tprivate newerTunnel: RemoteTunnel | undefined;\n\tprivate async portNumberHeuristicDelay(): Promise<RemoteTunnel | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Starting heuristic delay`);\n\t\tif (!this.doActionTunnels || this.doActionTunnels.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.doActionTunnels = this.doActionTunnels.sort((a, b) => a.tunnelRemotePort - b.tunnelRemotePort);\n\t\tconst firstTunnel = this.doActionTunnels.shift()!;\n\t\t// Heuristic.\n\t\tif (firstTunnel.tunnelRemotePort % 1000 === 0) {\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because % 1000: ${firstTunnel.tunnelRemotePort}`);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t\t// 9229 is the node inspect port\n\t\t} else if (firstTunnel.tunnelRemotePort < 10000 && firstTunnel.tunnelRemotePort !== 9229) {\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because < 10000: ${firstTunnel.tunnelRemotePort}`);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t}\n\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Waiting for \"better\" tunnel than ${firstTunnel.tunnelRemotePort}`);\n\t\tthis.newerTunnel = undefined;\n\t\treturn new Promise(resolve => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.newerTunnel) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t} else if (this.doActionTunnels?.includes(firstTunnel)) {\n\t\t\t\t\tresolve(firstTunnel);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t}, 3000);\n\t\t});\n\t}\n\n\tprivate async basicMessage(tunnel: RemoteTunnel) {\n\t\tconst properties = await this.remoteExplorerService.tunnelModel.getAttributes([{ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }], false);\n\t\tconst label = properties?.get(tunnel.tunnelRemotePort)?.label;\n\t\treturn nls.localize('remote.tunnelsView.automaticForward', \"Your application{0} running on port {1} is available.  \",\n\t\t\tlabel ? ` (${label})` : '',\n\t\t\ttunnel.tunnelRemotePort);\n\t}\n\n\tprivate linkMessage() {\n\t\treturn nls.localize(\n\t\t\t{ key: 'remote.tunnelsView.notificationLink2', comment: ['[See all forwarded ports]({0}) is a link. Only translate `See all forwarded ports`. Do not change brackets and parentheses or {0}'] },\n\t\t\t\"[See all forwarded ports]({0})\", `command:${TunnelPanel.ID}.focus`);\n\t}\n\n\tprivate async showNotification(tunnel: RemoteTunnel) {\n\t\tif (!await this.hostService.hadLastFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.lastNotification?.close();\n\t\tlet message = await this.basicMessage(tunnel);\n\t\tconst choices = [this.openBrowserChoice(tunnel)];\n\t\tif (!isWeb || openPreviewEnabledContext.getValue(this.contextKeyService)) {\n\t\t\tchoices.push(this.openPreviewChoice(tunnel));\n\t\t}\n\n\t\tif ((tunnel.tunnelLocalPort !== tunnel.tunnelRemotePort) && this.tunnelService.canElevate && this.tunnelService.isPortPrivileged(tunnel.tunnelRemotePort)) {\n\t\t\t// Privileged ports are not on Windows, so it's safe to use \"superuser\"\n\t\t\tmessage += nls.localize('remote.tunnelsView.elevationMessage', \"You'll need to run as superuser to use port {0} locally.  \", tunnel.tunnelRemotePort);\n\t\t\tchoices.unshift(this.elevateChoice(tunnel));\n\t\t}\n\n\t\tif (tunnel.privacy === TunnelPrivacyId.Private && isWeb && this.tunnelService.canChangePrivacy) {\n\t\t\tchoices.push(this.makePublicChoice(tunnel));\n\t\t}\n\n\t\tmessage += this.linkMessage();\n\n\t\tthis.lastNotification = this.notificationService.prompt(Severity.Info, message, choices, { neverShowAgain: { id: 'remote.tunnelsView.autoForwardNeverShow', isSecondary: true } });\n\t\tthis.lastShownPort = tunnel.tunnelRemotePort;\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotification.onDidClose(() => {\n\t\t\tthis.lastNotification = undefined;\n\t\t\tthis.lastShownPort = undefined;\n\t\t});\n\t}\n\n\tprivate makePublicChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\tlabel: nls.localize('remote.tunnelsView.makePublic', \"Make Public\"),\n\t\t\trun: async () => {\n\t\t\t\tconst oldTunnelDetails = mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.forwarded, tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }, TunnelCloseReason.Other);\n\t\t\t\treturn this.remoteExplorerService.forward({\n\t\t\t\t\tremote: { host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort },\n\t\t\t\t\tlocal: tunnel.tunnelLocalPort,\n\t\t\t\t\tname: oldTunnelDetails?.name,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tprivacy: TunnelPrivacyId.Public,\n\t\t\t\t\tsource: oldTunnelDetails?.source\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate openBrowserChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\treturn {\n\t\t\tlabel: OpenPortInBrowserAction.LABEL,\n\t\t\trun: () => OpenPortInBrowserAction.run(this.remoteExplorerService.tunnelModel, this.openerService, address)\n\t\t};\n\t}\n\n\tprivate openPreviewChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\treturn {\n\t\t\tlabel: OpenPortInPreviewAction.LABEL,\n\t\t\trun: () => OpenPortInPreviewAction.run(this.remoteExplorerService.tunnelModel, this.openerService, this.externalOpenerService, address)\n\t\t};\n\t}\n\n\tprivate elevateChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\t// Privileged ports are not on Windows, so it's ok to stick to just \"sudo\".\n\t\t\tlabel: nls.localize('remote.tunnelsView.elevationButton', \"Use Port {0} as Sudo...\", tunnel.tunnelRemotePort),\n\t\t\trun: async () => {\n\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }, TunnelCloseReason.Other);\n\t\t\t\tconst newTunnel = await this.remoteExplorerService.forward({\n\t\t\t\t\tremote: { host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort },\n\t\t\t\t\tlocal: tunnel.tunnelRemotePort,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tsource: AutoTunnelSource\n\t\t\t\t});\n\t\t\t\tif (!newTunnel || (typeof newTunnel === 'string')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.lastNotification?.close();\n\t\t\t\tthis.lastShownPort = newTunnel.tunnelRemotePort;\n\t\t\t\tthis.lastNotification = this.notificationService.prompt(Severity.Info,\n\t\t\t\t\tawait this.basicMessage(newTunnel) + this.linkMessage(),\n\t\t\t\t\t[this.openBrowserChoice(newTunnel), this.openPreviewChoice(tunnel)],\n\t\t\t\t\t{ neverShowAgain: { id: 'remote.tunnelsView.autoForwardNeverShow', isSecondary: true } });\n\t\t\t\tthis.lastNotification.onDidClose(() => {\n\t\t\t\t\tthis.lastNotification = undefined;\n\t\t\t\t\tthis.lastShownPort = undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass OutputAutomaticPortForwarding extends Disposable {\n\tprivate portsFeatures?: IDisposable;\n\tprivate urlFinder?: UrlFinder;\n\tprivate notifier: OnAutoForwardedAction;\n\n\tconstructor(\n\t\tprivate readonly terminalService: ITerminalService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly debugService: IDebugService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly contextKeyService: IContextKeyService,\n\t\treadonly privilegedOnly: () => boolean\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(notificationService, remoteExplorerService, openerService, externalOpenerService, tunnelService, hostService, logService, contextKeyService);\n\t\tthis._register(configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\tthis.tryStartStopUrlFinder();\n\t\t\t}\n\t\t}));\n\n\t\tthis.portsFeatures = this._register(this.remoteExplorerService.onEnabledPortsFeatures(() => {\n\t\t\tthis.tryStartStopUrlFinder();\n\t\t}));\n\t\tthis.tryStartStopUrlFinder();\n\n\t\tif (configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_HYBRID) {\n\t\t\tthis._register(this.tunnelService.onTunnelClosed(tunnel => this.notifier.hide([tunnel.port])));\n\t\t}\n\t}\n\n\tprivate tryStartStopUrlFinder() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.startUrlFinder();\n\t\t} else {\n\t\t\tthis.stopUrlFinder();\n\t\t}\n\t}\n\n\tprivate startUrlFinder() {\n\t\tif (!this.urlFinder && !this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.portsFeatures?.dispose();\n\t\tthis.urlFinder = this._register(new UrlFinder(this.terminalService, this.debugService));\n\t\tthis._register(this.urlFinder.onDidMatchLocalUrl(async (localUrl) => {\n\t\t\tif (mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.detected, localUrl.host, localUrl.port)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst attributes = (await this.remoteExplorerService.tunnelModel.getAttributes([localUrl]))?.get(localUrl.port);\n\t\t\tif (attributes?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.privilegedOnly() && !this.tunnelService.isPortPrivileged(localUrl.port)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward({ remote: localUrl, source: AutoTunnelSource }, attributes ?? null);\n\t\t\tif (forwarded && (typeof forwarded !== 'string')) {\n\t\t\t\tthis.notifier.doAction([forwarded]);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate stopUrlFinder() {\n\t\tif (this.urlFinder) {\n\t\t\tthis.urlFinder.dispose();\n\t\t\tthis.urlFinder = undefined;\n\t\t}\n\t}\n}\n\nclass ProcAutomaticPortForwarding extends Disposable {\n\tprivate candidateListener: IDisposable | undefined;\n\tprivate autoForwarded: Set<string> = new Set();\n\tprivate notifiedOnly: Set<string> = new Set();\n\tprivate notifier: OnAutoForwardedAction;\n\tprivate initialCandidates: Set<string> = new Set();\n\tprivate portsFeatures: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly unforwardOnly: boolean,\n\t\treadonly alreadyAutoForwarded: Set<string> | undefined,\n\t\tprivate readonly needsInitialCandidates: boolean,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\treadonly remoteExplorerService: IRemoteExplorerService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(notificationService, remoteExplorerService, openerService, externalOpenerService, tunnelService, hostService, logService, contextKeyService);\n\t\talreadyAutoForwarded?.forEach(port => this.autoForwarded.add(port));\n\t\tthis.initialize();\n\t}\n\n\tget forwarded(): Set<string> {\n\t\treturn this.autoForwarded;\n\t}\n\n\tprivate async initialize() {\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tawait new Promise<void>(resolve => this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet(() => resolve()));\n\t\t}\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\tawait this.startStopCandidateListener();\n\t\t\t}\n\t\t}));\n\n\t\tthis.portsFeatures = this._register(this.remoteExplorerService.onEnabledPortsFeatures(async () => {\n\t\t\tawait this.startStopCandidateListener();\n\t\t}));\n\n\t\tthis.startStopCandidateListener();\n\t}\n\n\tprivate async startStopCandidateListener() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tawait this.startCandidateListener();\n\t\t} else {\n\t\t\tthis.stopCandidateListener();\n\t\t}\n\t}\n\n\tprivate stopCandidateListener() {\n\t\tif (this.candidateListener) {\n\t\t\tthis.candidateListener.dispose();\n\t\t\tthis.candidateListener = undefined;\n\t\t}\n\t}\n\n\tprivate async startCandidateListener() {\n\t\tif (this.candidateListener || !this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.portsFeatures?.dispose();\n\n\t\t// Capture list of starting candidates so we don't auto forward them later.\n\t\tawait this.setInitialCandidates();\n\n\t\t// Need to check the setting again, since it may have changed while we waited for the initial candidates to be set.\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.candidateListener = this._register(this.remoteExplorerService.tunnelModel.onCandidatesChanged(this.handleCandidateUpdate, this));\n\t\t}\n\t}\n\n\tprivate async setInitialCandidates() {\n\t\tif (!this.needsInitialCandidates) {\n\t\t\tthis.logService.debug(`ForwardedPorts: (ProcForwarding) Not setting initial candidates`);\n\t\t\treturn;\n\t\t}\n\t\tlet startingCandidates = this.remoteExplorerService.tunnelModel.candidatesOrUndefined;\n\t\tif (!startingCandidates) {\n\t\t\tawait new Promise<void>(resolve => this.remoteExplorerService.tunnelModel.onCandidatesChanged(() => resolve()));\n\t\t\tstartingCandidates = this.remoteExplorerService.tunnelModel.candidates;\n\t\t}\n\n\t\tfor (const value of startingCandidates) {\n\t\t\tthis.initialCandidates.add(makeAddress(value.host, value.port));\n\t\t}\n\t\tthis.logService.debug(`ForwardedPorts: (ProcForwarding) Initial candidates set to ${startingCandidates.map(candidate => candidate.port).join(', ')}`);\n\t}\n\n\tprivate async forwardCandidates(): Promise<RemoteTunnel[] | undefined> {\n\t\tlet attributes: Map<number, Attributes> | undefined;\n\t\tconst allTunnels: RemoteTunnel[] = [];\n\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Attempting to forward ${this.remoteExplorerService.tunnelModel.candidates.length} candidates`);\n\t\tfor (const value of this.remoteExplorerService.tunnelModel.candidates) {\n\t\t\tif (!value.detail) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} missing detail`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!attributes) {\n\t\t\t\tattributes = await this.remoteExplorerService.tunnelModel.getAttributes(this.remoteExplorerService.tunnelModel.candidates);\n\t\t\t}\n\n\t\t\tconst portAttributes = attributes?.get(value.port);\n\n\t\t\tconst address = makeAddress(value.host, value.port);\n\t\t\tif (this.initialCandidates.has(address) && (portAttributes?.onAutoForward === undefined)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.notifiedOnly.has(address) || this.autoForwarded.has(address)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst alreadyForwarded = mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.forwarded, value.host, value.port);\n\t\t\tif (mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.detected, value.host, value.port)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (portAttributes?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} is ignored`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward({ remote: value, source: AutoTunnelSource }, portAttributes ?? null);\n\t\t\tif (!alreadyForwarded && forwarded) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} has been forwarded`);\n\t\t\t\tthis.autoForwarded.add(address);\n\t\t\t} else if (forwarded) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} has been notified`);\n\t\t\t\tthis.notifiedOnly.add(address);\n\t\t\t}\n\t\t\tif (forwarded && (typeof forwarded !== 'string')) {\n\t\t\t\tallTunnels.push(forwarded);\n\t\t\t}\n\t\t}\n\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Forwarded ${allTunnels.length} candidates`);\n\t\tif (allTunnels.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn allTunnels;\n\t}\n\n\tprivate async handleCandidateUpdate(removed: Map<string, { host: string; port: number }>) {\n\t\tconst removedPorts: number[] = [];\n\t\tlet autoForwarded: Map<string, string | Tunnel>;\n\t\tif (this.unforwardOnly) {\n\t\t\tautoForwarded = new Map();\n\t\t\tfor (const entry of this.remoteExplorerService.tunnelModel.forwarded.entries()) {\n\t\t\t\tif (entry[1].source.source === TunnelSource.Auto) {\n\t\t\t\t\tautoForwarded.set(entry[0], entry[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tautoForwarded = new Map(this.autoForwarded.entries());\n\t\t}\n\n\t\tfor (const removedPort of removed) {\n\t\t\tconst key = removedPort[0];\n\t\t\tlet value = removedPort[1];\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(autoForwarded, value.host, value.port);\n\t\t\tif (forwardedValue) {\n\t\t\t\tif (typeof forwardedValue === 'string') {\n\t\t\t\t\tthis.autoForwarded.delete(key);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = { host: forwardedValue.remoteHost, port: forwardedValue.remotePort };\n\t\t\t\t}\n\t\t\t\tawait this.remoteExplorerService.close(value, TunnelCloseReason.AutoForwardEnd);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.notifiedOnly.has(key)) {\n\t\t\t\tthis.notifiedOnly.delete(key);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.initialCandidates.has(key)) {\n\t\t\t\tthis.initialCandidates.delete(key);\n\t\t\t}\n\t\t}\n\n\t\tif (this.unforwardOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (removedPorts.length > 0) {\n\t\t\tawait this.notifier.hide(removedPorts);\n\t\t}\n\n\t\tconst tunnels = await this.forwardCandidates();\n\t\tif (tunnels) {\n\t\t\tawait this.notifier.doAction(tunnels);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
