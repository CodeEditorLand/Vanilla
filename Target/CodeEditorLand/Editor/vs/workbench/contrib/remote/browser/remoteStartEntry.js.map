{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remoteStartEntry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tWorkbenchActionExecutedClassification,\n\tWorkbenchActionExecutedEvent,\n} from \"../../../../base/common/actions.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IExtensionManagementService } from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IWorkbenchExtensionEnablementService } from \"../../../services/extensionManagement/common/extensionManagement.js\";\n\nexport const showStartEntryInWeb = new RawContextKey<boolean>(\n\t\"showRemoteStartEntryInWeb\",\n\tfalse,\n);\nexport class RemoteStartEntry\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate static readonly REMOTE_WEB_START_ENTRY_ACTIONS_COMMAND_ID =\n\t\t\"workbench.action.remote.showWebStartEntryActions\";\n\n\tprivate readonly remoteExtensionId: string;\n\tprivate readonly startCommand: string;\n\n\tconstructor(\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService) {\n\n\t\tsuper();\n\n\t\tconst remoteExtensionTips = this.productService.remoteExtensionTips?.['tunnel'];\n\t\tthis.startCommand = remoteExtensionTips?.startEntry?.startCommand ?? '';\n\t\tthis.remoteExtensionId = remoteExtensionTips?.extensionId ?? '';\n\n\t\tthis._init();\n\t\tthis.registerActions();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerActions(): void {\n\t\tconst category = nls.localize2(\"remote.category\", \"Remote\");\n\n\t\t// Show Remote Start Action\n\t\tconst startEntry = this;\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteStartEntry.REMOTE_WEB_START_ENTRY_ACTIONS_COMMAND_ID,\n\t\t\t\t\t\t\tcategory,\n\t\t\t\t\t\t\ttitle: nls.localize2(\n\t\t\t\t\t\t\t\t\"remote.showWebStartEntryActions\",\n\t\t\t\t\t\t\t\t\"Show Remote Start Entry for web\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tf1: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(): Promise<void> {\n\t\t\t\t\t\tawait startEntry.showWebRemoteStartActions();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.extensionEnablementService.onEnablementChanged(\n\t\t\t\tasync (result) => {\n\t\t\t\t\tfor (const ext of result) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tExtensionIdentifier.equals(\n\t\t\t\t\t\t\t\tthis.remoteExtensionId,\n\t\t\t\t\t\t\t\text.identifier.id,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.extensionEnablementService.isEnabled(ext)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tshowStartEntryInWeb\n\t\t\t\t\t\t\t\t\t.bindTo(this.contextKeyService)\n\t\t\t\t\t\t\t\t\t.set(true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tshowStartEntryInWeb\n\t\t\t\t\t\t\t\t\t.bindTo(this.contextKeyService)\n\t\t\t\t\t\t\t\t\t.set(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async _init(): Promise<void> {\n\t\t// Check if installed and enabled\n\t\tconst installed = (\n\t\t\tawait this.extensionManagementService.getInstalled()\n\t\t).find((value) =>\n\t\t\tExtensionIdentifier.equals(\n\t\t\t\tvalue.identifier.id,\n\t\t\t\tthis.remoteExtensionId,\n\t\t\t),\n\t\t);\n\t\tif (installed) {\n\t\t\tif (this.extensionEnablementService.isEnabled(installed)) {\n\t\t\t\tshowStartEntryInWeb.bindTo(this.contextKeyService).set(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async showWebRemoteStartActions() {\n\t\tthis.commandService.executeCommand(this.startCommand);\n\t\tthis.telemetryService.publicLog2<\n\t\t\tWorkbenchActionExecutedEvent,\n\t\t\tWorkbenchActionExecutedClassification\n\t\t>(\"workbenchActionExecuted\", {\n\t\t\tid: this.startCommand,\n\t\t\tfrom: \"remote start entry\",\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AASA,SAAS,kBAAkB;AAC3B,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,mCAAmC;AAC5C,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAElC,SAAS,4CAA4C;AAE9C,MAAM,sBAAsB,IAAI;AAAA,EACtC;AAAA,EACA;AACD;AACO,IAAM,mBAAN,cACE,WAET;AAAA,EAOC,YACmC,gBACA,gBACY,4BACS,4BACnB,kBACC,mBAAuC;AAE5E,UAAM;AAP4B;AACA;AACY;AACS;AACnB;AACC;AAIrC,UAAM,sBAAsB,KAAK,eAAe,sBAAsB,QAAQ;AAC9E,SAAK,eAAe,qBAAqB,YAAY,gBAAgB;AACrE,SAAK,oBAAoB,qBAAqB,eAAe;AAE7D,SAAK,MAAM;AACX,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA1DD,OAkCA;AAAA;AAAA;AAAA,EACC,OAAwB,4CACvB;AAAA,EAEgB;AAAA,EACA;AAAA,EAqBT,kBAAwB;AAC/B,UAAM,WAAW,IAAI,UAAU,mBAAmB,QAAQ;AAG1D,UAAM,aAAa;AACnB,SAAK;AAAA,MACJ;AAAA,QACC,cAAc,QAAQ;AAAA,UACrB,cAAc;AACb,kBAAM;AAAA,cACL,IAAI,iBAAiB;AAAA,cACrB;AAAA,cACA,OAAO,IAAI;AAAA,gBACV;AAAA,gBACA;AAAA,cACD;AAAA,cACA,IAAI;AAAA,YACL,CAAC;AAAA,UACF;AAAA,UAEA,MAAM,MAAqB;AAC1B,kBAAM,WAAW,0BAA0B;AAAA,UAC5C;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,oBAA0B;AACjC,SAAK;AAAA,MACJ,KAAK,2BAA2B;AAAA,QAC/B,OAAO,WAAW;AACjB,qBAAW,OAAO,QAAQ;AACzB,gBACC,oBAAoB;AAAA,cACnB,KAAK;AAAA,cACL,IAAI,WAAW;AAAA,YAChB,GACC;AACD,kBACC,KAAK,2BAA2B,UAAU,GAAG,GAC5C;AACD,oCACE,OAAO,KAAK,iBAAiB,EAC7B,IAAI,IAAI;AAAA,cACX,OAAO;AACN,oCACE,OAAO,KAAK,iBAAiB,EAC7B,IAAI,KAAK;AAAA,cACZ;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,QAAuB;AAEpC,UAAM,aACL,MAAM,KAAK,2BAA2B,aAAa,GAClD;AAAA,MAAK,CAAC,UACP,oBAAoB;AAAA,QACnB,MAAM,WAAW;AAAA,QACjB,KAAK;AAAA,MACN;AAAA,IACD;AACA,QAAI,WAAW;AACd,UAAI,KAAK,2BAA2B,UAAU,SAAS,GAAG;AACzD,4BAAoB,OAAO,KAAK,iBAAiB,EAAE,IAAI,IAAI;AAAA,MAC5D;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,4BAA4B;AACzC,SAAK,eAAe,eAAe,KAAK,YAAY;AACpD,SAAK,iBAAiB,WAGpB,2BAA2B;AAAA,MAC5B,IAAI,KAAK;AAAA,MACT,MAAM;AAAA,IACP,CAAC;AAAA,EACF;AACD;AAjHa,mBAAN;AAAA,EAWJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAhBU;",
  "names": []
}
