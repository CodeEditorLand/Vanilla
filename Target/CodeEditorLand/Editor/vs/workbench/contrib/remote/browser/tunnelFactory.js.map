{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/tunnelFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\ttype ITunnel,\n\tITunnelService,\n\ttype RemoteTunnel,\n\ttype TunnelCreationOptions,\n\ttype TunnelOptions,\n\tTunnelPrivacyId,\n\tTunnelProtocol,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\nimport { IRemoteExplorerService } from \"../../../services/remote/common/remoteExplorerService.js\";\nimport { forwardedPortsViewEnabled } from \"../../../services/remote/common/tunnelModel.js\";\n\nexport class TunnelFactoryContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.tunnelFactory\";\n\n\tconstructor(\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IOpenerService private openerService: IOpenerService,\n\t\t@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tconst tunnelFactory = environmentService.options?.tunnelProvider?.tunnelFactory;\n\t\tif (tunnelFactory) {\n\t\t\t// At this point we clearly want the ports view/features since we have a tunnel factory\n\t\t\tcontextKeyService.createKey(forwardedPortsViewEnabled.key, true);\n\t\t\tlet privacyOptions = environmentService.options?.tunnelProvider?.features?.privacyOptions ?? [];\n\t\t\tif (environmentService.options?.tunnelProvider?.features?.public\n\t\t\t\t&& (privacyOptions.length === 0)) {\n\t\t\t\tprivacyOptions = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'private',\n\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.private', \"Private\"),\n\t\t\t\t\t\tthemeIcon: 'lock'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'public',\n\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.public', \"Public\"),\n\t\t\t\t\t\tthemeIcon: 'eye'\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tthis._register(tunnelService.setTunnelProvider({\n\t\t\t\tforwardPort: async (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<RemoteTunnel | string | undefined> => {\n\t\t\t\t\tlet tunnelPromise: Promise<ITunnel> | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttunnelPromise = tunnelFactory(tunnelOptions, tunnelCreationOptions);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogService.trace('tunnelFactory: tunnel provider error');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!tunnelPromise) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tlet tunnel: ITunnel;\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttunnel = await tunnelPromise;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogService.trace('tunnelFactory: tunnel provider promise error');\n\t\t\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\t\t\treturn e.message;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst localAddress = tunnel.localAddress.startsWith('http') ? tunnel.localAddress : `http://${tunnel.localAddress}`;\n\t\t\t\t\tconst remoteTunnel: RemoteTunnel = {\n\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\t// The tunnel factory may give us an inaccessible local address.\n\t\t\t\t\t\t// To make sure this doesn't happen, resolve the uri immediately.\n\t\t\t\t\t\tlocalAddress: await this.resolveExternalUri(localAddress),\n\t\t\t\t\t\tprivacy: tunnel.privacy ?? (tunnel.public ? TunnelPrivacyId.Public : TunnelPrivacyId.Private),\n\t\t\t\t\t\tprotocol: tunnel.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tdispose: async () => { await tunnel.dispose(); }\n\t\t\t\t\t};\n\t\t\t\t\treturn remoteTunnel;\n\t\t\t\t}\n\t\t\t}));\n\t\t\tconst tunnelInformation = environmentService.options?.tunnelProvider?.features ?\n\t\t\t\t{\n\t\t\t\t\tfeatures: {\n\t\t\t\t\t\televation: !!environmentService.options?.tunnelProvider?.features?.elevation,\n\t\t\t\t\t\tpublic: !!environmentService.options?.tunnelProvider?.features?.public,\n\t\t\t\t\t\tprivacyOptions,\n\t\t\t\t\t\tprotocol: environmentService.options?.tunnelProvider?.features?.protocol === undefined ? true : !!environmentService.options?.tunnelProvider?.features?.protocol\n\t\t\t\t\t}\n\t\t\t\t} : undefined;\n\t\t\tremoteExplorerService.setTunnelInformation(tunnelInformation);\n\t\t}\n\t}\n\n\tprivate async resolveExternalUri(uri: string): Promise<string> {\n\t\ttry {\n\t\t\treturn (\n\t\t\t\tawait this.openerService.resolveExternalUri(URI.parse(uri))\n\t\t\t).resolved.toString();\n\t\t} catch {\n\t\t\treturn uri;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
