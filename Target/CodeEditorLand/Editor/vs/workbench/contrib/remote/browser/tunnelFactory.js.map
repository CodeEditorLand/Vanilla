{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/tunnelFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\ttype ITunnel,\n\tITunnelService,\n\ttype RemoteTunnel,\n\ttype TunnelCreationOptions,\n\ttype TunnelOptions,\n\tTunnelPrivacyId,\n\tTunnelProtocol,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\nimport { IRemoteExplorerService } from \"../../../services/remote/common/remoteExplorerService.js\";\nimport { forwardedPortsViewEnabled } from \"../../../services/remote/common/tunnelModel.js\";\n\nexport class TunnelFactoryContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.tunnelFactory\";\n\n\tconstructor(\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IBrowserWorkbenchEnvironmentService\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IOpenerService private openerService: IOpenerService,\n\t\t@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tconst tunnelFactory =\n\t\t\tenvironmentService.options?.tunnelProvider?.tunnelFactory;\n\t\tif (tunnelFactory) {\n\t\t\t// At this point we clearly want the ports view/features since we have a tunnel factory\n\t\t\tcontextKeyService.createKey(forwardedPortsViewEnabled.key, true);\n\t\t\tlet privacyOptions =\n\t\t\t\tenvironmentService.options?.tunnelProvider?.features\n\t\t\t\t\t?.privacyOptions ?? [];\n\t\t\tif (\n\t\t\t\tenvironmentService.options?.tunnelProvider?.features?.public &&\n\t\t\t\tprivacyOptions.length === 0\n\t\t\t) {\n\t\t\t\tprivacyOptions = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: \"private\",\n\t\t\t\t\t\tlabel: nls.localize(\"tunnelPrivacy.private\", \"Private\"),\n\t\t\t\t\t\tthemeIcon: \"lock\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: \"public\",\n\t\t\t\t\t\tlabel: nls.localize(\"tunnelPrivacy.public\", \"Public\"),\n\t\t\t\t\t\tthemeIcon: \"eye\",\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tthis._register(\n\t\t\t\ttunnelService.setTunnelProvider({\n\t\t\t\t\tforwardPort: async (\n\t\t\t\t\t\ttunnelOptions: TunnelOptions,\n\t\t\t\t\t\ttunnelCreationOptions: TunnelCreationOptions,\n\t\t\t\t\t): Promise<RemoteTunnel | string | undefined> => {\n\t\t\t\t\t\tlet tunnelPromise: Promise<ITunnel> | undefined;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttunnelPromise = tunnelFactory(\n\t\t\t\t\t\t\t\ttunnelOptions,\n\t\t\t\t\t\t\t\ttunnelCreationOptions,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogService.trace(\n\t\t\t\t\t\t\t\t\"tunnelFactory: tunnel provider error\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!tunnelPromise) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet tunnel: ITunnel;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttunnel = await tunnelPromise;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogService.trace(\n\t\t\t\t\t\t\t\t\"tunnelFactory: tunnel provider promise error\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\t\t\t\treturn e.message;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst localAddress = tunnel.localAddress.startsWith(\n\t\t\t\t\t\t\t\"http\",\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t? tunnel.localAddress\n\t\t\t\t\t\t\t: `http://${tunnel.localAddress}`;\n\t\t\t\t\t\tconst remoteTunnel: RemoteTunnel = {\n\t\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\t\t// The tunnel factory may give us an inaccessible local address.\n\t\t\t\t\t\t\t// To make sure this doesn't happen, resolve the uri immediately.\n\t\t\t\t\t\t\tlocalAddress:\n\t\t\t\t\t\t\t\tawait this.resolveExternalUri(localAddress),\n\t\t\t\t\t\t\tprivacy:\n\t\t\t\t\t\t\t\ttunnel.privacy ??\n\t\t\t\t\t\t\t\t(tunnel.public\n\t\t\t\t\t\t\t\t\t? TunnelPrivacyId.Public\n\t\t\t\t\t\t\t\t\t: TunnelPrivacyId.Private),\n\t\t\t\t\t\t\tprotocol: tunnel.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\t\tdispose: async () => {\n\t\t\t\t\t\t\t\tawait tunnel.dispose();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn remoteTunnel;\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst tunnelInformation = environmentService.options?.tunnelProvider\n\t\t\t\t?.features\n\t\t\t\t? {\n\t\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t\televation:\n\t\t\t\t\t\t\t\t!!environmentService.options?.tunnelProvider\n\t\t\t\t\t\t\t\t\t?.features?.elevation,\n\t\t\t\t\t\t\tpublic: !!environmentService.options?.tunnelProvider\n\t\t\t\t\t\t\t\t?.features?.public,\n\t\t\t\t\t\t\tprivacyOptions,\n\t\t\t\t\t\t\tprotocol:\n\t\t\t\t\t\t\t\tenvironmentService.options?.tunnelProvider\n\t\t\t\t\t\t\t\t\t?.features?.protocol === undefined\n\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t: !!environmentService.options\n\t\t\t\t\t\t\t\t\t\t\t?.tunnelProvider?.features\n\t\t\t\t\t\t\t\t\t\t\t?.protocol,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: undefined;\n\t\t\tremoteExplorerService.setTunnelInformation(tunnelInformation);\n\t\t}\n\t}\n\n\tprivate async resolveExternalUri(uri: string): Promise<string> {\n\t\ttry {\n\t\t\treturn (\n\t\t\t\tawait this.openerService.resolveExternalUri(URI.parse(uri))\n\t\t\t).resolved.toString();\n\t\t} catch {\n\t\t\treturn uri;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
