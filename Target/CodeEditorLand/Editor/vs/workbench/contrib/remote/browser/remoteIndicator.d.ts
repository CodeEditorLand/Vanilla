import { Disposable } from "vs/base/common/lifecycle";
import { IMenuService } from "vs/platform/actions/common/actions";
import { ICommandService } from "vs/platform/commands/common/commands";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IExtensionGalleryService, IExtensionManagementService } from "vs/platform/extensionManagement/common/extensionManagement";
import { ILabelService } from "vs/platform/label/common/label";
import { ILogService } from "vs/platform/log/common/log";
import { IOpenerService } from "vs/platform/opener/common/opener";
import { IProductService } from "vs/platform/product/common/productService";
import { IQuickInputService } from "vs/platform/quickinput/common/quickInput";
import { IRemoteAuthorityResolverService } from "vs/platform/remote/common/remoteAuthorityResolver";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IWorkbenchContribution } from "vs/workbench/common/contributions";
import { IBrowserWorkbenchEnvironmentService } from "vs/workbench/services/environment/browser/environmentService";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import { IHostService } from "vs/workbench/services/host/browser/host";
import { IRemoteAgentService } from "vs/workbench/services/remote/common/remoteAgentService";
import { IStatusbarService } from "vs/workbench/services/statusbar/browser/statusbar";
export declare class RemoteStatusIndicator extends Disposable implements IWorkbenchContribution {
    private readonly statusbarService;
    private readonly environmentService;
    private readonly labelService;
    private contextKeyService;
    private menuService;
    private readonly quickInputService;
    private readonly commandService;
    private readonly extensionService;
    private readonly remoteAgentService;
    private readonly remoteAuthorityResolverService;
    private readonly hostService;
    private readonly workspaceContextService;
    private readonly logService;
    private readonly extensionGalleryService;
    private readonly telemetryService;
    private readonly productService;
    private readonly extensionManagementService;
    private readonly openerService;
    private readonly configurationService;
    static readonly ID = "workbench.contrib.remoteStatusIndicator";
    private static readonly REMOTE_ACTIONS_COMMAND_ID;
    private static readonly CLOSE_REMOTE_COMMAND_ID;
    private static readonly SHOW_CLOSE_REMOTE_COMMAND_ID;
    private static readonly INSTALL_REMOTE_EXTENSIONS_ID;
    private static readonly REMOTE_STATUS_LABEL_MAX_LENGTH;
    private static readonly REMOTE_CONNECTION_LATENCY_SCHEDULER_DELAY;
    private static readonly REMOTE_CONNECTION_LATENCY_SCHEDULER_FIRST_RUN_DELAY;
    private remoteStatusEntry;
    private readonly legacyIndicatorMenu;
    private readonly remoteIndicatorMenu;
    private remoteMenuActionsGroups;
    private readonly remoteAuthority;
    private virtualWorkspaceLocation;
    private connectionState;
    private connectionToken;
    private readonly connectionStateContextKey;
    private networkState;
    private measureNetworkConnectionLatencyScheduler;
    private loggedInvalidGroupNames;
    private _remoteExtensionMetadata;
    private get remoteExtensionMetadata();
    private remoteMetadataInitialized;
    private readonly _onDidChangeEntries;
    private readonly onDidChangeEntries;
    constructor(statusbarService: IStatusbarService, environmentService: IBrowserWorkbenchEnvironmentService, labelService: ILabelService, contextKeyService: IContextKeyService, menuService: IMenuService, quickInputService: IQuickInputService, commandService: ICommandService, extensionService: IExtensionService, remoteAgentService: IRemoteAgentService, remoteAuthorityResolverService: IRemoteAuthorityResolverService, hostService: IHostService, workspaceContextService: IWorkspaceContextService, logService: ILogService, extensionGalleryService: IExtensionGalleryService, telemetryService: ITelemetryService, productService: IProductService, extensionManagementService: IExtensionManagementService, openerService: IOpenerService, configurationService: IConfigurationService);
    private registerActions;
    private registerListeners;
    private initializeRemoteMetadata;
    private updateVirtualWorkspaceLocation;
    private updateWhenInstalledExtensionsRegistered;
    private setConnectionState;
    private scheduleMeasureNetworkConnectionLatency;
    private measureNetworkConnectionLatency;
    private setNetworkState;
    private logNetworkConnectionHealthTelemetry;
    private validatedGroup;
    private getRemoteMenuActions;
    private updateRemoteStatusIndicator;
    private renderRemoteStatusIndicator;
    private withNetworkStatus;
    private appendTooltipLine;
    private installExtension;
    private runRemoteStartCommand;
    private showRemoteMenu;
}
