{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remoteConnectionHealth.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IRemoteAgentService, remoteConnectionLatencyMeasurer } from '../../../services/remote/common/remoteAgentService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { localize } from '../../../../nls.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { getRemoteName } from '../../../../platform/remote/common/remoteHosts.js';\nimport { IBannerService } from '../../../services/banner/browser/bannerService.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport Severity from '../../../../base/common/severity.js';\n\n\nconst REMOTE_UNSUPPORTED_CONNECTION_CHOICE_KEY = 'remote.unsupportedConnectionChoice';\nconst BANNER_REMOTE_UNSUPPORTED_CONNECTION_DISMISSED_KEY = 'workbench.banner.remote.unsupportedConnection.dismissed';\n\nexport class InitialRemoteConnectionHealthContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IBannerService private readonly bannerService: IBannerService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\tthis._checkInitialRemoteConnectionHealth();\n\t\t}\n\t}\n\n\tprivate async _confirmConnection(): Promise<boolean> {\n\t\tconst enum ConnectionChoice {\n\t\t\tAllow = 1,\n\t\t\tLearnMore = 2,\n\t\t\tCancel = 0\n\t\t}\n\n\t\tconst { result, checkboxChecked } = await this.dialogService.prompt<ConnectionChoice>({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: localize('unsupportedGlibcWarning', \"You are about to connect to an OS version that is unsupported by {0}.\", this.productService.nameLong),\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'allow', comment: ['&& denotes a mnemonic'] }, \"&&Allow\"),\n\t\t\t\t\trun: () => ConnectionChoice.Allow\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'learnMore', comment: ['&& denotes a mnemonic'] }, \"&&Learn More\"),\n\t\t\t\t\trun: async () => { await this.openerService.open('https://aka.ms/vscode-remote/faq/old-linux'); return ConnectionChoice.LearnMore; }\n\t\t\t\t}\n\t\t\t],\n\t\t\tcancelButton: {\n\t\t\t\trun: () => ConnectionChoice.Cancel\n\t\t\t},\n\t\t\tcheckbox: {\n\t\t\t\tlabel: localize('remember', \"Do not show again\"),\n\t\t\t}\n\t\t});\n\n\t\tif (result === ConnectionChoice.LearnMore) {\n\t\t\treturn await this._confirmConnection();\n\t\t}\n\n\t\tconst allowed = result === ConnectionChoice.Allow;\n\t\tif (allowed && checkboxChecked) {\n\t\t\tthis.storageService.store(`${REMOTE_UNSUPPORTED_CONNECTION_CHOICE_KEY}.${this._environmentService.remoteAuthority}`, allowed, StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t}\n\n\t\treturn allowed;\n\t}\n\n\tprivate async _checkInitialRemoteConnectionHealth(): Promise<void> {\n\t\ttry {\n\t\t\tconst environment = await this._remoteAgentService.getRawEnvironment();\n\n\t\t\tif (environment && environment.isUnsupportedGlibc) {\n\t\t\t\tlet allowed = this.storageService.getBoolean(`${REMOTE_UNSUPPORTED_CONNECTION_CHOICE_KEY}.${this._environmentService.remoteAuthority}`, StorageScope.PROFILE);\n\t\t\t\tif (allowed === undefined) {\n\t\t\t\t\tallowed = await this._confirmConnection();\n\t\t\t\t}\n\t\t\t\tif (allowed) {\n\t\t\t\t\tconst bannerDismissedVersion = this.storageService.get(`${BANNER_REMOTE_UNSUPPORTED_CONNECTION_DISMISSED_KEY}`, StorageScope.PROFILE) ?? '';\n\t\t\t\t\t// Ignore patch versions and dismiss the banner if the major and minor versions match.\n\t\t\t\t\tconst shouldShowBanner = bannerDismissedVersion.slice(0, bannerDismissedVersion.lastIndexOf('.')) !== this.productService.version.slice(0, this.productService.version.lastIndexOf('.'));\n\t\t\t\t\tif (shouldShowBanner) {\n\t\t\t\t\t\tconst actions = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: localize('unsupportedGlibcBannerLearnMore', \"Learn More\"),\n\t\t\t\t\t\t\t\thref: 'https://aka.ms/vscode-remote/faq/old-linux'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t];\n\t\t\t\t\t\tthis.bannerService.show({\n\t\t\t\t\t\t\tid: 'unsupportedGlibcWarning.banner',\n\t\t\t\t\t\t\tmessage: localize('unsupportedGlibcWarning.banner', \"You are connected to an OS version that is unsupported by {0}.\", this.productService.nameLong),\n\t\t\t\t\t\t\tactions,\n\t\t\t\t\t\t\ticon: Codicon.warning,\n\t\t\t\t\t\t\tcloseLabel: `Do not show again in v${this.productService.version}`,\n\t\t\t\t\t\t\tonClose: () => {\n\t\t\t\t\t\t\t\tthis.storageService.store(`${BANNER_REMOTE_UNSUPPORTED_CONNECTION_DISMISSED_KEY}`, this.productService.version, StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.hostService.openWindow({ forceReuseWindow: true, remoteAuthority: null });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttype RemoteConnectionSuccessClassification = {\n\t\t\t\towner: 'alexdima';\n\t\t\t\tcomment: 'The initial connection succeeded';\n\t\t\t\tweb: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Is web ui.' };\n\t\t\t\tconnectionTimeMs: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Time, in ms, until connected' };\n\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t};\n\t\t\ttype RemoteConnectionSuccessEvent = {\n\t\t\t\tweb: boolean;\n\t\t\t\tconnectionTimeMs: number | undefined;\n\t\t\t\tremoteName: string | undefined;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<RemoteConnectionSuccessEvent, RemoteConnectionSuccessClassification>('remoteConnectionSuccess', {\n\t\t\t\tweb: isWeb,\n\t\t\t\tconnectionTimeMs: await this._remoteAgentService.getConnection()?.getInitialConnectionTimeMs(),\n\t\t\t\tremoteName: getRemoteName(this._environmentService.remoteAuthority)\n\t\t\t});\n\n\t\t\tawait this._measureExtHostLatency();\n\n\t\t} catch (err) {\n\n\t\t\ttype RemoteConnectionFailureClassification = {\n\t\t\t\towner: 'alexdima';\n\t\t\t\tcomment: 'The initial connection failed';\n\t\t\t\tweb: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Is web ui.' };\n\t\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the resolver.' };\n\t\t\t\tconnectionTimeMs: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Time, in ms, until connection failure' };\n\t\t\t\tmessage: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Error message' };\n\t\t\t};\n\t\t\ttype RemoteConnectionFailureEvent = {\n\t\t\t\tweb: boolean;\n\t\t\t\tremoteName: string | undefined;\n\t\t\t\tconnectionTimeMs: number | undefined;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<RemoteConnectionFailureEvent, RemoteConnectionFailureClassification>('remoteConnectionFailure', {\n\t\t\t\tweb: isWeb,\n\t\t\t\tconnectionTimeMs: await this._remoteAgentService.getConnection()?.getInitialConnectionTimeMs(),\n\t\t\t\tremoteName: getRemoteName(this._environmentService.remoteAuthority),\n\t\t\t\tmessage: err ? err.message : ''\n\t\t\t});\n\n\t\t}\n\t}\n\n\tprivate async _measureExtHostLatency() {\n\t\tconst measurement = await remoteConnectionLatencyMeasurer.measure(this._remoteAgentService);\n\t\tif (measurement === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype RemoteConnectionLatencyClassification = {\n\t\t\towner: 'connor4312';\n\t\t\tcomment: 'The latency to the remote extension host';\n\t\t\tweb: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether this is running on web' };\n\t\t\tremoteName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Anonymized remote name' };\n\t\t\tlatencyMs: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Latency to the remote, in milliseconds' };\n\t\t};\n\t\ttype RemoteConnectionLatencyEvent = {\n\t\t\tweb: boolean;\n\t\t\tremoteName: string | undefined;\n\t\t\tlatencyMs: number;\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<RemoteConnectionLatencyEvent, RemoteConnectionLatencyClassification>('remoteConnectionLatency', {\n\t\t\tweb: isWeb,\n\t\t\tremoteName: getRemoteName(this._environmentService.remoteAuthority),\n\t\t\tlatencyMs: measurement.current\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ConnectionChoice"]
}
