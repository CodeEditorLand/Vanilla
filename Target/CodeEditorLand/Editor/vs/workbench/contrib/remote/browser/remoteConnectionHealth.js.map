{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/remoteConnectionHealth.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { getRemoteName } from \"../../../../platform/remote/common/remoteHosts.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IBannerService } from \"../../../services/banner/browser/bannerService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\tIRemoteAgentService,\n\tremoteConnectionLatencyMeasurer,\n} from \"../../../services/remote/common/remoteAgentService.js\";\n\nconst REMOTE_UNSUPPORTED_CONNECTION_CHOICE_KEY =\n\t\"remote.unsupportedConnectionChoice\";\nconst BANNER_REMOTE_UNSUPPORTED_CONNECTION_DISMISSED_KEY =\n\t\"workbench.banner.remote.unsupportedConnection.dismissed\";\n\nexport class InitialRemoteConnectionHealthContribution\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IRemoteAgentService\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@IBannerService private readonly bannerService: IBannerService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\tthis._checkInitialRemoteConnectionHealth();\n\t\t}\n\t}\n\n\tprivate async _confirmConnection(): Promise<boolean> {\n\t\tenum ConnectionChoice {\n\t\t\tAllow = 1,\n\t\t\tLearnMore = 2,\n\t\t\tCancel = 0,\n\t\t}\n\n\t\tconst { result, checkboxChecked } =\n\t\t\tawait this.dialogService.prompt<ConnectionChoice>({\n\t\t\t\ttype: Severity.Warning,\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"unsupportedGlibcWarning\",\n\t\t\t\t\t\"You are about to connect to an OS version that is unsupported by {0}.\",\n\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"allow\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Allow\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => ConnectionChoice.Allow,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"learnMore\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Learn More\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tawait this.openerService.open(\n\t\t\t\t\t\t\t\t\"https://aka.ms/vscode-remote/faq/old-linux\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn ConnectionChoice.LearnMore;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => ConnectionChoice.Cancel,\n\t\t\t\t},\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize(\"remember\", \"Do not show again\"),\n\t\t\t\t},\n\t\t\t});\n\n\t\tif (result === ConnectionChoice.LearnMore) {\n\t\t\treturn await this._confirmConnection();\n\t\t}\n\n\t\tconst allowed = result === ConnectionChoice.Allow;\n\t\tif (allowed && checkboxChecked) {\n\t\t\tthis.storageService.store(\n\t\t\t\t`${REMOTE_UNSUPPORTED_CONNECTION_CHOICE_KEY}.${this._environmentService.remoteAuthority}`,\n\t\t\t\tallowed,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\n\t\treturn allowed;\n\t}\n\n\tprivate async _checkInitialRemoteConnectionHealth(): Promise<void> {\n\t\ttry {\n\t\t\tconst environment =\n\t\t\t\tawait this._remoteAgentService.getRawEnvironment();\n\n\t\t\tif (environment && environment.isUnsupportedGlibc) {\n\t\t\t\tlet allowed = this.storageService.getBoolean(\n\t\t\t\t\t`${REMOTE_UNSUPPORTED_CONNECTION_CHOICE_KEY}.${this._environmentService.remoteAuthority}`,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t);\n\t\t\t\tif (allowed === undefined) {\n\t\t\t\t\tallowed = await this._confirmConnection();\n\t\t\t\t}\n\t\t\t\tif (allowed) {\n\t\t\t\t\tconst bannerDismissedVersion =\n\t\t\t\t\t\tthis.storageService.get(\n\t\t\t\t\t\t\t`${BANNER_REMOTE_UNSUPPORTED_CONNECTION_DISMISSED_KEY}`,\n\t\t\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\t\t) ?? \"\";\n\t\t\t\t\t// Ignore patch versions and dismiss the banner if the major and minor versions match.\n\t\t\t\t\tconst shouldShowBanner =\n\t\t\t\t\t\tbannerDismissedVersion.slice(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tbannerDismissedVersion.lastIndexOf(\".\"),\n\t\t\t\t\t\t) !==\n\t\t\t\t\t\tthis.productService.version.slice(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tthis.productService.version.lastIndexOf(\".\"),\n\t\t\t\t\t\t);\n\t\t\t\t\tif (shouldShowBanner) {\n\t\t\t\t\t\tconst actions = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\t\"unsupportedGlibcBannerLearnMore\",\n\t\t\t\t\t\t\t\t\t\"Learn More\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\thref: \"https://aka.ms/vscode-remote/faq/old-linux\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\t\t\t\t\t\tthis.bannerService.show({\n\t\t\t\t\t\t\tid: \"unsupportedGlibcWarning.banner\",\n\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\"unsupportedGlibcWarning.banner\",\n\t\t\t\t\t\t\t\t\"You are connected to an OS version that is unsupported by {0}.\",\n\t\t\t\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tactions,\n\t\t\t\t\t\t\ticon: Codicon.warning,\n\t\t\t\t\t\t\tcloseLabel: `Do not show again in v${this.productService.version}`,\n\t\t\t\t\t\t\tonClose: () => {\n\t\t\t\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t\t\t\t`${BANNER_REMOTE_UNSUPPORTED_CONNECTION_DISMISSED_KEY}`,\n\t\t\t\t\t\t\t\t\tthis.productService.version,\n\t\t\t\t\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.hostService.openWindow({\n\t\t\t\t\t\tforceReuseWindow: true,\n\t\t\t\t\t\tremoteAuthority: null,\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttype RemoteConnectionSuccessClassification = {\n\t\t\t\towner: \"alexdima\";\n\t\t\t\tcomment: \"The initial connection succeeded\";\n\t\t\t\tweb: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Is web ui.\";\n\t\t\t\t};\n\t\t\t\tconnectionTimeMs: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Time, in ms, until connected\";\n\t\t\t\t};\n\t\t\t\tremoteName: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The name of the resolver.\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype RemoteConnectionSuccessEvent = {\n\t\t\t\tweb: boolean;\n\t\t\t\tconnectionTimeMs: number | undefined;\n\t\t\t\tremoteName: string | undefined;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\tRemoteConnectionSuccessEvent,\n\t\t\t\tRemoteConnectionSuccessClassification\n\t\t\t>(\"remoteConnectionSuccess\", {\n\t\t\t\tweb: isWeb,\n\t\t\t\tconnectionTimeMs: await this._remoteAgentService\n\t\t\t\t\t.getConnection()\n\t\t\t\t\t?.getInitialConnectionTimeMs(),\n\t\t\t\tremoteName: getRemoteName(\n\t\t\t\t\tthis._environmentService.remoteAuthority,\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tawait this._measureExtHostLatency();\n\t\t} catch (err) {\n\t\t\ttype RemoteConnectionFailureClassification = {\n\t\t\t\towner: \"alexdima\";\n\t\t\t\tcomment: \"The initial connection failed\";\n\t\t\t\tweb: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Is web ui.\";\n\t\t\t\t};\n\t\t\t\tremoteName: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The name of the resolver.\";\n\t\t\t\t};\n\t\t\t\tconnectionTimeMs: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Time, in ms, until connection failure\";\n\t\t\t\t};\n\t\t\t\tmessage: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Error message\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype RemoteConnectionFailureEvent = {\n\t\t\t\tweb: boolean;\n\t\t\t\tremoteName: string | undefined;\n\t\t\t\tconnectionTimeMs: number | undefined;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\tRemoteConnectionFailureEvent,\n\t\t\t\tRemoteConnectionFailureClassification\n\t\t\t>(\"remoteConnectionFailure\", {\n\t\t\t\tweb: isWeb,\n\t\t\t\tconnectionTimeMs: await this._remoteAgentService\n\t\t\t\t\t.getConnection()\n\t\t\t\t\t?.getInitialConnectionTimeMs(),\n\t\t\t\tremoteName: getRemoteName(\n\t\t\t\t\tthis._environmentService.remoteAuthority,\n\t\t\t\t),\n\t\t\t\tmessage: err ? err.message : \"\",\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _measureExtHostLatency() {\n\t\tconst measurement = await remoteConnectionLatencyMeasurer.measure(\n\t\t\tthis._remoteAgentService,\n\t\t);\n\t\tif (measurement === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype RemoteConnectionLatencyClassification = {\n\t\t\towner: \"connor4312\";\n\t\t\tcomment: \"The latency to the remote extension host\";\n\t\t\tweb: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Whether this is running on web\";\n\t\t\t};\n\t\t\tremoteName: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Anonymized remote name\";\n\t\t\t};\n\t\t\tlatencyMs: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Latency to the remote, in milliseconds\";\n\t\t\t};\n\t\t};\n\t\ttype RemoteConnectionLatencyEvent = {\n\t\t\tweb: boolean;\n\t\t\tremoteName: string | undefined;\n\t\t\tlatencyMs: number;\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<\n\t\t\tRemoteConnectionLatencyEvent,\n\t\t\tRemoteConnectionLatencyClassification\n\t\t>(\"remoteConnectionLatency\", {\n\t\t\tweb: isWeb,\n\t\t\tremoteName: getRemoteName(this._environmentService.remoteAuthority),\n\t\t\tlatencyMs: measurement.current,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ConnectionChoice"]
}
