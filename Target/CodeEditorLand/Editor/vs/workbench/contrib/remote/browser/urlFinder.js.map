{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/urlFinder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalInstance, ITerminalService } from '../../terminal/browser/terminal.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IDebugService, IDebugSession, IReplElement } from '../../debug/common/debug.js';\nimport { removeAnsiEscapeCodes } from '../../../../base/common/strings.js';\n\nexport class UrlFinder extends Disposable {\n\t/**\n\t * Local server url pattern matching following urls:\n\t * http://localhost:3000/ - commonly used across multiple frameworks\n\t * https://127.0.0.1:5001/ - ASP.NET\n\t * http://:8080 - Beego Golang\n\t * http://0.0.0.0:4000 - Elixir Phoenix\n\t */\n\tprivate static readonly localUrlRegex = /\\b\\w{0,20}(?::\\/\\/)?(?:localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0|:\\d{2,5})[\\w\\-\\.\\~:\\/\\?\\#[\\]\\@!\\$&\\(\\)\\*\\+\\,\\;\\=]*/gim;\n\tprivate static readonly extractPortRegex = /(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0):(\\d{1,5})/;\n\t/**\n\t * https://github.com/microsoft/vscode-remote-release/issues/3949\n\t */\n\tprivate static readonly localPythonServerRegex = /HTTP\\son\\s(127\\.0\\.0\\.1|0\\.0\\.0\\.0)\\sport\\s(\\d+)/;\n\n\tprivate static readonly excludeTerminals = ['Dev Containers'];\n\n\tprivate _onDidMatchLocalUrl: Emitter<{ host: string; port: number }> = new Emitter();\n\tpublic readonly onDidMatchLocalUrl = this._onDidMatchLocalUrl.event;\n\tprivate listeners: Map<ITerminalInstance | string, IDisposable> = new Map();\n\n\tconstructor(terminalService: ITerminalService, debugService: IDebugService) {\n\t\tsuper();\n\t\t// Terminal\n\t\tterminalService.instances.forEach(instance => {\n\t\t\tthis.registerTerminalInstance(instance);\n\t\t});\n\t\tthis._register(terminalService.onDidCreateInstance(instance => {\n\t\t\tthis.registerTerminalInstance(instance);\n\t\t}));\n\t\tthis._register(terminalService.onDidDisposeInstance(instance => {\n\t\t\tthis.listeners.get(instance)?.dispose();\n\t\t\tthis.listeners.delete(instance);\n\t\t}));\n\n\t\t// Debug\n\t\tthis._register(debugService.onDidNewSession(session => {\n\t\t\tif (!session.parentSession || (session.parentSession && session.hasSeparateRepl())) {\n\t\t\t\tthis.listeners.set(session.getId(), session.onDidChangeReplElements(() => {\n\t\t\t\t\tthis.processNewReplElements(session);\n\t\t\t\t}));\n\t\t\t}\n\t\t}));\n\t\tthis._register(debugService.onDidEndSession(({ session }) => {\n\t\t\tif (this.listeners.has(session.getId())) {\n\t\t\t\tthis.listeners.get(session.getId())?.dispose();\n\t\t\t\tthis.listeners.delete(session.getId());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerTerminalInstance(instance: ITerminalInstance) {\n\t\tif (!UrlFinder.excludeTerminals.includes(instance.title)) {\n\t\t\tthis.listeners.set(instance, instance.onData(data => {\n\t\t\t\tthis.processData(data);\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate replPositions: Map<string, { position: number; tail: IReplElement }> = new Map();\n\tprivate processNewReplElements(session: IDebugSession) {\n\t\tconst oldReplPosition = this.replPositions.get(session.getId());\n\t\tconst replElements = session.getReplElements();\n\t\tthis.replPositions.set(session.getId(), { position: replElements.length - 1, tail: replElements[replElements.length - 1] });\n\n\t\tif (!oldReplPosition && replElements.length > 0) {\n\t\t\treplElements.forEach(element => this.processData(element.toString()));\n\t\t} else if (oldReplPosition && (replElements.length - 1 !== oldReplPosition.position)) {\n\t\t\t// Process lines until we reach the old \"tail\"\n\t\t\tfor (let i = replElements.length - 1; i >= 0; i--) {\n\t\t\t\tconst element = replElements[i];\n\t\t\t\tif (element === oldReplPosition.tail) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tthis.processData(element.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tconst listeners = this.listeners.values();\n\t\tfor (const listener of listeners) {\n\t\t\tlistener.dispose();\n\t\t}\n\t}\n\n\tprivate processData(data: string) {\n\t\t// strip ANSI terminal codes\n\t\tdata = removeAnsiEscapeCodes(data);\n\t\tconst urlMatches = data.match(UrlFinder.localUrlRegex) || [];\n\t\tif (urlMatches && urlMatches.length > 0) {\n\t\t\turlMatches.forEach((match) => {\n\t\t\t\t// check if valid url\n\t\t\t\tlet serverUrl;\n\t\t\t\ttry {\n\t\t\t\t\tserverUrl = new URL(match);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Not a valid URL\n\t\t\t\t}\n\t\t\t\tif (serverUrl) {\n\t\t\t\t\t// check if the port is a valid integer value\n\t\t\t\t\tconst portMatch = match.match(UrlFinder.extractPortRegex);\n\t\t\t\t\tconst port = parseFloat(serverUrl.port ? serverUrl.port : (portMatch ? portMatch[2] : 'NaN'));\n\t\t\t\t\tif (!isNaN(port) && Number.isInteger(port) && port > 0 && port <= 65535) {\n\t\t\t\t\t\t// normalize the host name\n\t\t\t\t\t\tlet host = serverUrl.hostname;\n\t\t\t\t\t\tif (host !== '0.0.0.0' && host !== '127.0.0.1') {\n\t\t\t\t\t\t\thost = 'localhost';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Exclude node inspect, except when using default port\n\t\t\t\t\t\tif (port !== 9229 && data.startsWith('Debugger listening on')) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._onDidMatchLocalUrl.fire({ port, host });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// Try special python case\n\t\t\tconst pythonMatch = data.match(UrlFinder.localPythonServerRegex);\n\t\t\tif (pythonMatch && pythonMatch.length === 3) {\n\t\t\t\tthis._onDidMatchLocalUrl.fire({ host: pythonMatch[1], port: Number(pythonMatch[2]) });\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
