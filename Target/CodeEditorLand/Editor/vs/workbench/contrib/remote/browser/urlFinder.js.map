{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/urlFinder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { removeAnsiEscapeCodes } from \"../../../../base/common/strings.js\";\nimport type {\n\tIDebugService,\n\tIDebugSession,\n\tIReplElement,\n} from \"../../debug/common/debug.js\";\nimport type {\n\tITerminalInstance,\n\tITerminalService,\n} from \"../../terminal/browser/terminal.js\";\n\nexport class UrlFinder extends Disposable {\n\t/**\n\t * Local server url pattern matching following urls:\n\t * http://localhost:3000/ - commonly used across multiple frameworks\n\t * https://127.0.0.1:5001/ - ASP.NET\n\t * http://:8080 - Beego Golang\n\t * http://0.0.0.0:4000 - Elixir Phoenix\n\t */\n\tprivate static readonly localUrlRegex =\n\t\t/\\b\\w{0,20}(?::\\/\\/)?(?:localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0|:\\d{2,5})[\\w\\-.~:/?#[\\]@!$&()*+,;=]*/gim;\n\tprivate static readonly extractPortRegex =\n\t\t/(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0):(\\d{1,5})/;\n\t/**\n\t * https://github.com/microsoft/vscode-remote-release/issues/3949\n\t */\n\tprivate static readonly localPythonServerRegex =\n\t\t/HTTP\\son\\s(127\\.0\\.0\\.1|0\\.0\\.0\\.0)\\sport\\s(\\d+)/;\n\n\tprivate static readonly excludeTerminals = [\"Dev Containers\"];\n\n\tprivate _onDidMatchLocalUrl: Emitter<{ host: string; port: number }> =\n\t\tnew Emitter();\n\tpublic readonly onDidMatchLocalUrl = this._onDidMatchLocalUrl.event;\n\tprivate listeners: Map<ITerminalInstance | string, IDisposable> = new Map();\n\n\tconstructor(\n\t\tterminalService: ITerminalService,\n\t\tdebugService: IDebugService,\n\t) {\n\t\tsuper();\n\t\t// Terminal\n\t\tterminalService.instances.forEach((instance) => {\n\t\t\tthis.registerTerminalInstance(instance);\n\t\t});\n\t\tthis._register(\n\t\t\tterminalService.onDidCreateInstance((instance) => {\n\t\t\t\tthis.registerTerminalInstance(instance);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tterminalService.onDidDisposeInstance((instance) => {\n\t\t\t\tthis.listeners.get(instance)?.dispose();\n\t\t\t\tthis.listeners.delete(instance);\n\t\t\t}),\n\t\t);\n\n\t\t// Debug\n\t\tthis._register(\n\t\t\tdebugService.onDidNewSession((session) => {\n\t\t\t\tif (\n\t\t\t\t\t!session.parentSession ||\n\t\t\t\t\t(session.parentSession && session.hasSeparateRepl())\n\t\t\t\t) {\n\t\t\t\t\tthis.listeners.set(\n\t\t\t\t\t\tsession.getId(),\n\t\t\t\t\t\tsession.onDidChangeReplElements(() => {\n\t\t\t\t\t\t\tthis.processNewReplElements(session);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tdebugService.onDidEndSession(({ session }) => {\n\t\t\t\tif (this.listeners.has(session.getId())) {\n\t\t\t\t\tthis.listeners.get(session.getId())?.dispose();\n\t\t\t\t\tthis.listeners.delete(session.getId());\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate registerTerminalInstance(instance: ITerminalInstance) {\n\t\tif (!UrlFinder.excludeTerminals.includes(instance.title)) {\n\t\t\tthis.listeners.set(\n\t\t\t\tinstance,\n\t\t\t\tinstance.onData((data) => {\n\t\t\t\t\tthis.processData(data);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate replPositions: Map<\n\t\tstring,\n\t\t{ position: number; tail: IReplElement }\n\t> = new Map();\n\tprivate processNewReplElements(session: IDebugSession) {\n\t\tconst oldReplPosition = this.replPositions.get(session.getId());\n\t\tconst replElements = session.getReplElements();\n\t\tthis.replPositions.set(session.getId(), {\n\t\t\tposition: replElements.length - 1,\n\t\t\ttail: replElements[replElements.length - 1],\n\t\t});\n\n\t\tif (!oldReplPosition && replElements.length > 0) {\n\t\t\treplElements.forEach((element) =>\n\t\t\t\tthis.processData(element.toString()),\n\t\t\t);\n\t\t} else if (\n\t\t\toldReplPosition &&\n\t\t\treplElements.length - 1 !== oldReplPosition.position\n\t\t) {\n\t\t\t// Process lines until we reach the old \"tail\"\n\t\t\tfor (let i = replElements.length - 1; i >= 0; i--) {\n\t\t\t\tconst element = replElements[i];\n\t\t\t\tif (element === oldReplPosition.tail) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tthis.processData(element.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tconst listeners = this.listeners.values();\n\t\tfor (const listener of listeners) {\n\t\t\tlistener.dispose();\n\t\t}\n\t}\n\n\tprivate processData(data: string) {\n\t\t// strip ANSI terminal codes\n\t\tdata = removeAnsiEscapeCodes(data);\n\t\tconst urlMatches = data.match(UrlFinder.localUrlRegex) || [];\n\t\tif (urlMatches && urlMatches.length > 0) {\n\t\t\turlMatches.forEach((match) => {\n\t\t\t\t// check if valid url\n\t\t\t\tlet serverUrl;\n\t\t\t\ttry {\n\t\t\t\t\tserverUrl = new URL(match);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Not a valid URL\n\t\t\t\t}\n\t\t\t\tif (serverUrl) {\n\t\t\t\t\t// check if the port is a valid integer value\n\t\t\t\t\tconst portMatch = match.match(UrlFinder.extractPortRegex);\n\t\t\t\t\tconst port = Number.parseFloat(\n\t\t\t\t\t\tserverUrl.port\n\t\t\t\t\t\t\t? serverUrl.port\n\t\t\t\t\t\t\t: portMatch\n\t\t\t\t\t\t\t\t? portMatch[2]\n\t\t\t\t\t\t\t\t: \"NaN\",\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isNaN(port) &&\n\t\t\t\t\t\tNumber.isInteger(port) &&\n\t\t\t\t\t\tport > 0 &&\n\t\t\t\t\t\tport <= 65535\n\t\t\t\t\t) {\n\t\t\t\t\t\t// normalize the host name\n\t\t\t\t\t\tlet host = serverUrl.hostname;\n\t\t\t\t\t\tif (host !== \"0.0.0.0\" && host !== \"127.0.0.1\") {\n\t\t\t\t\t\t\thost = \"localhost\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Exclude node inspect, except when using default port\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tport !== 9229 &&\n\t\t\t\t\t\t\tdata.startsWith(\"Debugger listening on\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._onDidMatchLocalUrl.fire({ port, host });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// Try special python case\n\t\t\tconst pythonMatch = data.match(UrlFinder.localPythonServerRegex);\n\t\t\tif (pythonMatch && pythonMatch.length === 3) {\n\t\t\t\tthis._onDidMatchLocalUrl.fire({\n\t\t\t\t\thost: pythonMatch[1],\n\t\t\t\t\tport: Number(pythonMatch[2]),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
