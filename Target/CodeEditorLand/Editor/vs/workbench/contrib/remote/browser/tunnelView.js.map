{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/tunnelView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/tunnelView.css\";\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport type { IKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport { ActionViewItem } from \"../../../../base/browser/ui/actionbar/actionViewItems.js\";\nimport { ActionBar } from \"../../../../base/browser/ui/actionbar/actionbar.js\";\nimport { Button } from \"../../../../base/browser/ui/button/button.js\";\nimport type { IHoverDelegate } from \"../../../../base/browser/ui/hover/hoverDelegate.js\";\nimport { getDefaultHoverDelegate } from \"../../../../base/browser/ui/hover/hoverDelegateFactory.js\";\nimport { IconLabel } from \"../../../../base/browser/ui/iconLabel/iconLabel.js\";\nimport {\n\tInputBox,\n\tMessageType,\n} from \"../../../../base/browser/ui/inputbox/inputBox.js\";\nimport type {\n\tITableColumn,\n\tITableContextMenuEvent,\n\tITableEvent,\n\tITableMouseEvent,\n\tITableRenderer,\n\tITableVirtualDelegate,\n} from \"../../../../base/browser/ui/table/table.js\";\nimport { ActionRunner, type IAction } from \"../../../../base/common/actions.js\";\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { createSingleCallFunction } from \"../../../../base/common/functional.js\";\nimport {\n\ttype IMarkdownString,\n\tMarkdownString,\n} from \"../../../../base/common/htmlContent.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { ILocalizedString } from \"../../../../platform/action/common/action.js\";\nimport {\n\tcreateActionViewItem,\n\tcreateAndFillInActionBarActions,\n} from \"../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\tCommandsRegistry,\n\ttype ICommandHandler,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIContextMenuService,\n\tIContextViewService,\n} from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { WorkbenchTable } from \"../../../../platform/list/browser/listService.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype QuickPickInput,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport type { TunnelPrivacy } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\tdefaultButtonStyles,\n\tdefaultInputBoxStyles,\n} from \"../../../../platform/theme/browser/defaultStyles.js\";\nimport { registerColor } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tITunnelService,\n\ttype RemoteTunnel,\n\tTunnelPrivacyId,\n\tTunnelProtocol,\n\tisAllInterfaces,\n\tisLocalhost,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport {\n\ttype IViewPaneOptions,\n\tViewPane,\n} from \"../../../browser/parts/views/viewPane.js\";\nimport { STATUS_BAR_REMOTE_ITEM_BACKGROUND } from \"../../../common/theme.js\";\nimport {\n\ttype IEditableData,\n\ttype IViewDescriptor,\n\tIViewDescriptorService,\n} from \"../../../common/views.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport {\n\tIRemoteExplorerService,\n\ttype ITunnelItem,\n\tTUNNEL_VIEW_ID,\n\tTunnelEditId,\n\tTunnelType,\n} from \"../../../services/remote/common/remoteExplorerService.js\";\nimport {\n\ttype Attributes,\n\ttype CandidatePort,\n\ttype Tunnel,\n\tTunnelCloseReason,\n\ttype TunnelModel,\n\tTunnelSource,\n\tforwardedPortsViewEnabled,\n\tmakeAddress,\n\tmapHasAddressLocalhostOrAllInterfaces,\n\tparseAddress,\n} from \"../../../services/remote/common/tunnelModel.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { IExternalUriOpenerService } from \"../../externalUriOpener/common/externalUriOpenerService.js\";\nimport {\n\tcopyAddressIcon,\n\tforwardPortIcon,\n\tforwardedPortWithProcessIcon,\n\tforwardedPortWithoutProcessIcon,\n\tlabelPortIcon,\n\topenBrowserIcon,\n\topenPreviewIcon,\n\tportsViewIcon,\n\tprivatePortIcon,\n\tstopForwardIcon,\n} from \"./remoteIcons.js\";\n\nexport const openPreviewEnabledContext = new RawContextKey<boolean>(\n\t\"openPreviewEnabled\",\n\tfalse,\n);\n\nclass TunnelTreeVirtualDelegate implements ITableVirtualDelegate<ITunnelItem> {\n\treadonly headerRowHeight: number = 22;\n\n\tconstructor(\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t) {}\n\n\tgetHeight(row: ITunnelItem): number {\n\t\treturn row.tunnelType === TunnelType.Add &&\n\t\t\t!this.remoteExplorerService.getEditableData(undefined)\n\t\t\t? 30\n\t\t\t: 22;\n\t}\n}\n\ninterface ITunnelViewModel {\n\treadonly onForwardedPortsChanged: Event<void>;\n\treadonly all: TunnelItem[];\n\treadonly input: TunnelItem;\n\tisEmpty(): boolean;\n}\n\nexport class TunnelViewModel implements ITunnelViewModel {\n\treadonly onForwardedPortsChanged: Event<void>;\n\tprivate model: TunnelModel;\n\tprivate _candidates: Map<string, CandidatePort> = new Map();\n\n\treadonly input = {\n\t\tlabel: nls.localize(\"remote.tunnelsView.addPort\", \"Add Port\"),\n\t\ticon: undefined,\n\t\ttunnelType: TunnelType.Add,\n\t\thasRunningProcess: false,\n\t\tremoteHost: \"\",\n\t\tremotePort: 0,\n\t\tprocessDescription: \"\",\n\t\ttooltipPostfix: \"\",\n\t\ticonTooltip: \"\",\n\t\tportTooltip: \"\",\n\t\tprocessTooltip: \"\",\n\t\toriginTooltip: \"\",\n\t\tprivacyTooltip: \"\",\n\t\tsource: { source: TunnelSource.User, description: \"\" },\n\t\tprotocol: TunnelProtocol.Http,\n\t\tprivacy: {\n\t\t\tid: TunnelPrivacyId.Private,\n\t\t\tthemeIcon: privatePortIcon.id,\n\t\t\tlabel: nls.localize(\"tunnelPrivacy.private\", \"Private\"),\n\t\t},\n\t\tstrip: () => undefined,\n\t};\n\n\tconstructor(\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService\n\t) {\n\t\tthis.model = remoteExplorerService.tunnelModel;\n\t\tthis.onForwardedPortsChanged = Event.any(this.model.onForwardPort, this.model.onClosePort, this.model.onPortName, this.model.onCandidatesChanged);\n\t}\n\n\tget all(): TunnelItem[] {\n\t\tconst result: TunnelItem[] = [];\n\t\tthis._candidates = new Map();\n\t\tthis.model.candidates.forEach((candidate) => {\n\t\t\tthis._candidates.set(\n\t\t\t\tmakeAddress(candidate.host, candidate.port),\n\t\t\t\tcandidate,\n\t\t\t);\n\t\t});\n\t\tif (\n\t\t\tthis.model.forwarded.size > 0 ||\n\t\t\tthis.remoteExplorerService.getEditableData(undefined)\n\t\t) {\n\t\t\tresult.push(...this.forwarded);\n\t\t}\n\t\tif (this.model.detected.size > 0) {\n\t\t\tresult.push(...this.detected);\n\t\t}\n\n\t\tresult.push(this.input);\n\t\treturn result;\n\t}\n\n\tprivate addProcessInfoFromCandidate(tunnelItem: ITunnelItem) {\n\t\tconst key = makeAddress(tunnelItem.remoteHost, tunnelItem.remotePort);\n\t\tif (this._candidates.has(key)) {\n\t\t\ttunnelItem.processDescription = this._candidates.get(key)!.detail;\n\t\t}\n\t}\n\n\tprivate get forwarded(): TunnelItem[] {\n\t\tconst forwarded = Array.from(this.model.forwarded.values())\n\t\t\t.map((tunnel) => {\n\t\t\t\tconst tunnelItem = TunnelItem.createFromTunnel(\n\t\t\t\t\tthis.remoteExplorerService,\n\t\t\t\t\tthis.tunnelService,\n\t\t\t\t\ttunnel,\n\t\t\t\t);\n\t\t\t\tthis.addProcessInfoFromCandidate(tunnelItem);\n\t\t\t\treturn tunnelItem;\n\t\t\t})\n\t\t\t.sort((a: TunnelItem, b: TunnelItem) => {\n\t\t\t\tif (a.remotePort === b.remotePort) {\n\t\t\t\t\treturn a.remoteHost < b.remoteHost ? -1 : 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn a.remotePort < b.remotePort ? -1 : 1;\n\t\t\t\t}\n\t\t\t});\n\t\treturn forwarded;\n\t}\n\n\tprivate get detected(): TunnelItem[] {\n\t\treturn Array.from(this.model.detected.values()).map((tunnel) => {\n\t\t\tconst tunnelItem = TunnelItem.createFromTunnel(\n\t\t\t\tthis.remoteExplorerService,\n\t\t\t\tthis.tunnelService,\n\t\t\t\ttunnel,\n\t\t\t\tTunnelType.Detected,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis.addProcessInfoFromCandidate(tunnelItem);\n\t\t\treturn tunnelItem;\n\t\t});\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn (\n\t\t\tthis.detected.length === 0 &&\n\t\t\t(this.forwarded.length === 0 ||\n\t\t\t\t(this.forwarded.length === 1 &&\n\t\t\t\t\tthis.forwarded[0].tunnelType === TunnelType.Add &&\n\t\t\t\t\t!this.remoteExplorerService.getEditableData(undefined)))\n\t\t);\n\t}\n}\n\nfunction emptyCell(item: ITunnelItem): ActionBarCell {\n\treturn { label: \"\", tunnel: item, editId: TunnelEditId.None, tooltip: \"\" };\n}\n\nclass IconColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = \"\";\n\treadonly tooltip: string = \"\";\n\treadonly weight: number = 1;\n\treadonly minimumWidth = 40;\n\treadonly maximumWidth = 40;\n\treadonly templateId: string = \"actionbar\";\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst icon = row.processDescription\n\t\t\t? forwardedPortWithProcessIcon\n\t\t\t: forwardedPortWithoutProcessIcon;\n\t\tlet tooltip = \"\";\n\t\tif (row instanceof TunnelItem) {\n\t\t\ttooltip = `${row.iconTooltip} ${row.tooltipPostfix}`;\n\t\t}\n\t\treturn {\n\t\t\tlabel: \"\",\n\t\t\ticon,\n\t\t\ttunnel: row,\n\t\t\teditId: TunnelEditId.None,\n\t\t\ttooltip,\n\t\t};\n\t}\n}\n\nclass PortColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize(\"tunnel.portColumn.label\", \"Port\");\n\treadonly tooltip: string = nls.localize(\n\t\t\"tunnel.portColumn.tooltip\",\n\t\t\"The label and remote port number of the forwarded port.\",\n\t);\n\treadonly weight: number = 1;\n\treadonly templateId: string = \"actionbar\";\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tconst isAdd = row.tunnelType === TunnelType.Add;\n\t\tconst label = row.label;\n\t\tlet tooltip = \"\";\n\t\tif (row instanceof TunnelItem && !isAdd) {\n\t\t\ttooltip = `${row.portTooltip} ${row.tooltipPostfix}`;\n\t\t} else {\n\t\t\ttooltip = label;\n\t\t}\n\t\treturn {\n\t\t\tlabel,\n\t\t\ttunnel: row,\n\t\t\tmenuId: MenuId.TunnelPortInline,\n\t\t\teditId:\n\t\t\t\trow.tunnelType === TunnelType.Add\n\t\t\t\t\t? TunnelEditId.New\n\t\t\t\t\t: TunnelEditId.Label,\n\t\t\ttooltip,\n\t\t};\n\t}\n}\n\nclass LocalAddressColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize(\n\t\t\"tunnel.addressColumn.label\",\n\t\t\"Forwarded Address\",\n\t);\n\treadonly tooltip: string = nls.localize(\n\t\t\"tunnel.addressColumn.tooltip\",\n\t\t\"The address that the forwarded port is available at.\",\n\t);\n\treadonly weight: number = 1;\n\treadonly templateId: string = \"actionbar\";\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.localAddress ?? \"\";\n\t\tlet tooltip: string = label;\n\t\tif (row instanceof TunnelItem) {\n\t\t\ttooltip = row.tooltipPostfix;\n\t\t}\n\t\treturn {\n\t\t\tlabel,\n\t\t\tmenuId: MenuId.TunnelLocalAddressInline,\n\t\t\ttunnel: row,\n\t\t\teditId: TunnelEditId.LocalPort,\n\t\t\ttooltip,\n\t\t\tmarkdownTooltip: label\n\t\t\t\t? LocalAddressColumn.getHoverText(label)\n\t\t\t\t: undefined,\n\t\t};\n\t}\n\n\tprivate static getHoverText(localAddress: string) {\n\t\treturn (configurationService: IConfigurationService) => {\n\t\t\tconst editorConf = configurationService.getValue<{\n\t\t\t\tmultiCursorModifier: \"ctrlCmd\" | \"alt\";\n\t\t\t}>(\"editor\");\n\n\t\t\tlet clickLabel = \"\";\n\t\t\tif (editorConf.multiCursorModifier === \"ctrlCmd\") {\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tclickLabel = nls.localize(\n\t\t\t\t\t\t\"portsLink.followLinkAlt.mac\",\n\t\t\t\t\t\t\"option + click\",\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tclickLabel = nls.localize(\n\t\t\t\t\t\t\"portsLink.followLinkAlt\",\n\t\t\t\t\t\t\"alt + click\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (isMacintosh) {\n\t\t\t\tclickLabel = nls.localize(\n\t\t\t\t\t\"portsLink.followLinkCmd\",\n\t\t\t\t\t\"cmd + click\",\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tclickLabel = nls.localize(\n\t\t\t\t\t\"portsLink.followLinkCtrl\",\n\t\t\t\t\t\"ctrl + click\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst markdown = new MarkdownString(\"\", true);\n\t\t\tconst uri = localAddress.startsWith(\"http\")\n\t\t\t\t? localAddress\n\t\t\t\t: `http://${localAddress}`;\n\t\t\treturn markdown\n\t\t\t\t.appendLink(uri, \"Follow link\")\n\t\t\t\t.appendMarkdown(` (${clickLabel})`);\n\t\t};\n\t}\n}\n\nclass RunningProcessColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize(\n\t\t\"tunnel.processColumn.label\",\n\t\t\"Running Process\",\n\t);\n\treadonly tooltip: string = nls.localize(\n\t\t\"tunnel.processColumn.tooltip\",\n\t\t\"The command line of the process that is using the port.\",\n\t);\n\treadonly weight: number = 2;\n\treadonly templateId: string = \"actionbar\";\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.processDescription ?? \"\";\n\t\treturn {\n\t\t\tlabel,\n\t\t\ttunnel: row,\n\t\t\teditId: TunnelEditId.None,\n\t\t\ttooltip: row instanceof TunnelItem ? row.processTooltip : \"\",\n\t\t};\n\t}\n}\n\nclass OriginColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize(\n\t\t\"tunnel.originColumn.label\",\n\t\t\"Origin\",\n\t);\n\treadonly tooltip: string = nls.localize(\n\t\t\"tunnel.originColumn.tooltip\",\n\t\t\"The source that a forwarded port originates from. Can be an extension, user forwarded, statically forwarded, or automatically forwarded.\",\n\t);\n\treadonly weight: number = 1;\n\treadonly templateId: string = \"actionbar\";\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.source.description;\n\t\tconst tooltip = `${row instanceof TunnelItem ? row.originTooltip : \"\"}. ${row instanceof TunnelItem ? row.tooltipPostfix : \"\"}`;\n\t\treturn {\n\t\t\tlabel,\n\t\t\tmenuId: MenuId.TunnelOriginInline,\n\t\t\ttunnel: row,\n\t\t\teditId: TunnelEditId.None,\n\t\t\ttooltip,\n\t\t};\n\t}\n}\n\nclass PrivacyColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize(\n\t\t\"tunnel.privacyColumn.label\",\n\t\t\"Visibility\",\n\t);\n\treadonly tooltip: string = nls.localize(\n\t\t\"tunnel.privacyColumn.tooltip\",\n\t\t\"The availability of the forwarded port.\",\n\t);\n\treadonly weight: number = 1;\n\treadonly templateId: string = \"actionbar\";\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.privacy?.label;\n\t\tlet tooltip = \"\";\n\t\tif (row instanceof TunnelItem) {\n\t\t\ttooltip = `${row.privacy.label} ${row.tooltipPostfix}`;\n\t\t}\n\t\treturn {\n\t\t\tlabel,\n\t\t\ttunnel: row,\n\t\t\ticon: { id: row.privacy.themeIcon },\n\t\t\teditId: TunnelEditId.None,\n\t\t\ttooltip,\n\t\t};\n\t}\n}\n\ninterface IActionBarTemplateData {\n\telementDisposable: IDisposable;\n\tcontainer: HTMLElement;\n\tlabel: IconLabel;\n\tbutton?: Button;\n\ticon: HTMLElement;\n\tactionBar: ActionBar;\n}\n\ninterface ActionBarCell {\n\tlabel: string;\n\ticon?: ThemeIcon;\n\ttooltip: string;\n\tmarkdownTooltip?: (\n\t\tconfigurationService: IConfigurationService,\n\t) => IMarkdownString;\n\tmenuId?: MenuId;\n\ttunnel: ITunnelItem;\n\teditId: TunnelEditId;\n}\n\nclass ActionBarRenderer\n\textends Disposable\n\timplements ITableRenderer<ActionBarCell, IActionBarTemplateData>\n{\n\treadonly templateId = \"actionbar\";\n\tprivate inputDone?: (success: boolean, finishEditing: boolean) => void;\n\tprivate _actionRunner: ActionRunner | undefined;\n\tprivate readonly _hoverDelegate: IHoverDelegate;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._hoverDelegate = getDefaultHoverDelegate('mouse');\n\t}\n\n\tset actionRunner(actionRunner: ActionRunner) {\n\t\tthis._actionRunner = actionRunner;\n\t}\n\n\trenderTemplate(container: HTMLElement): IActionBarTemplateData {\n\t\tconst cell = dom.append(container, dom.$(\".ports-view-actionbar-cell\"));\n\t\tconst icon = dom.append(cell, dom.$(\".ports-view-actionbar-cell-icon\"));\n\t\tconst label = new IconLabel(cell, {\n\t\t\tsupportHighlights: true,\n\t\t\thoverDelegate: this._hoverDelegate,\n\t\t});\n\t\tconst actionsContainer = dom.append(cell, dom.$(\".actions\"));\n\t\tconst actionBar = new ActionBar(actionsContainer, {\n\t\t\tactionViewItemProvider: createActionViewItem.bind(\n\t\t\t\tundefined,\n\t\t\t\tthis.instantiationService,\n\t\t\t),\n\t\t\thoverDelegate: this._hoverDelegate,\n\t\t});\n\t\treturn {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\tactionBar,\n\t\t\tcontainer: cell,\n\t\t\telementDisposable: Disposable.None,\n\t\t};\n\t}\n\n\trenderElement(\n\t\telement: ActionBarCell,\n\t\tindex: number,\n\t\ttemplateData: IActionBarTemplateData,\n\t): void {\n\t\t// reset\n\t\ttemplateData.actionBar.clear();\n\t\ttemplateData.icon.className = \"ports-view-actionbar-cell-icon\";\n\t\ttemplateData.icon.style.display = \"none\";\n\t\ttemplateData.label.setLabel(\"\");\n\t\ttemplateData.label.element.style.display = \"none\";\n\t\ttemplateData.container.style.height = \"22px\";\n\t\tif (templateData.button) {\n\t\t\ttemplateData.button.element.style.display = \"none\";\n\t\t\ttemplateData.button.dispose();\n\t\t}\n\t\ttemplateData.container.style.paddingLeft = \"0px\";\n\t\ttemplateData.elementDisposable.dispose();\n\n\t\tlet editableData: IEditableData | undefined;\n\t\tif (\n\t\t\telement.editId === TunnelEditId.New &&\n\t\t\t(editableData =\n\t\t\t\tthis.remoteExplorerService.getEditableData(undefined))\n\t\t) {\n\t\t\tthis.renderInputBox(templateData.container, editableData);\n\t\t} else {\n\t\t\teditableData = this.remoteExplorerService.getEditableData(\n\t\t\t\telement.tunnel,\n\t\t\t\telement.editId,\n\t\t\t);\n\t\t\tif (editableData) {\n\t\t\t\tthis.renderInputBox(templateData.container, editableData);\n\t\t\t} else if (\n\t\t\t\telement.tunnel.tunnelType === TunnelType.Add &&\n\t\t\t\telement.menuId === MenuId.TunnelPortInline\n\t\t\t) {\n\t\t\t\tthis.renderButton(element, templateData);\n\t\t\t} else {\n\t\t\t\tthis.renderActionBarItem(element, templateData);\n\t\t\t}\n\t\t}\n\t}\n\n\trenderButton(\n\t\telement: ActionBarCell,\n\t\ttemplateData: IActionBarTemplateData,\n\t): void {\n\t\ttemplateData.container.style.paddingLeft = \"7px\";\n\t\ttemplateData.container.style.height = \"28px\";\n\t\ttemplateData.button = this._register(\n\t\t\tnew Button(templateData.container, defaultButtonStyles),\n\t\t);\n\t\ttemplateData.button.label = element.label;\n\t\ttemplateData.button.element.title = element.tooltip;\n\t\tthis._register(\n\t\t\ttemplateData.button.onDidClick(() => {\n\t\t\t\tthis.commandService.executeCommand(ForwardPortAction.INLINE_ID);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate tunnelContext(tunnel: ITunnelItem): ITunnelItem {\n\t\tlet context: ITunnelItem | undefined;\n\t\tif (tunnel instanceof TunnelItem) {\n\t\t\tcontext = tunnel.strip();\n\t\t}\n\t\tif (!context) {\n\t\t\tcontext = {\n\t\t\t\ttunnelType: tunnel.tunnelType,\n\t\t\t\tremoteHost: tunnel.remoteHost,\n\t\t\t\tremotePort: tunnel.remotePort,\n\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\tprotocol: tunnel.protocol,\n\t\t\t\tlocalUri: tunnel.localUri,\n\t\t\t\tlocalPort: tunnel.localPort,\n\t\t\t\tname: tunnel.name,\n\t\t\t\tcloseable: tunnel.closeable,\n\t\t\t\tsource: tunnel.source,\n\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\tprocessDescription: tunnel.processDescription,\n\t\t\t\tlabel: tunnel.label,\n\t\t\t};\n\t\t}\n\t\treturn context;\n\t}\n\n\trenderActionBarItem(\n\t\telement: ActionBarCell,\n\t\ttemplateData: IActionBarTemplateData,\n\t): void {\n\t\ttemplateData.label.element.style.display = \"flex\";\n\t\ttemplateData.label.setLabel(element.label, undefined, {\n\t\t\ttitle: element.markdownTooltip\n\t\t\t\t? {\n\t\t\t\t\t\tmarkdown: element.markdownTooltip(\n\t\t\t\t\t\t\tthis.configurationService,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tmarkdownNotSupportedFallback: element.tooltip,\n\t\t\t\t\t}\n\t\t\t\t: element.tooltip,\n\t\t\textraClasses:\n\t\t\t\telement.menuId === MenuId.TunnelLocalAddressInline\n\t\t\t\t\t? [\"ports-view-actionbar-cell-localaddress\"]\n\t\t\t\t\t: undefined,\n\t\t});\n\t\ttemplateData.actionBar.context = this.tunnelContext(element.tunnel);\n\t\ttemplateData.container.style.paddingLeft = \"10px\";\n\t\tconst context: [string, any][] = [\n\t\t\t[\"view\", TUNNEL_VIEW_ID],\n\t\t\t[TunnelTypeContextKey.key, element.tunnel.tunnelType],\n\t\t\t[TunnelCloseableContextKey.key, element.tunnel.closeable],\n\t\t\t[TunnelPrivacyContextKey.key, element.tunnel.privacy.id],\n\t\t\t[TunnelProtocolContextKey.key, element.tunnel.protocol],\n\t\t];\n\t\tconst contextKeyService = this.contextKeyService.createOverlay(context);\n\t\tconst disposableStore = new DisposableStore();\n\t\ttemplateData.elementDisposable = disposableStore;\n\t\tif (element.menuId) {\n\t\t\tconst menu = disposableStore.add(\n\t\t\t\tthis.menuService.createMenu(element.menuId, contextKeyService),\n\t\t\t);\n\t\t\tlet actions: IAction[] = [];\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\tmenu,\n\t\t\t\t{ shouldForwardArgs: true },\n\t\t\t\tactions,\n\t\t\t);\n\t\t\tif (actions) {\n\t\t\t\tconst labelActions = actions.filter(\n\t\t\t\t\t(action) => action.id.toLowerCase().indexOf(\"label\") >= 0,\n\t\t\t\t);\n\t\t\t\tif (labelActions.length > 1) {\n\t\t\t\t\tlabelActions.sort(\n\t\t\t\t\t\t(a, b) => a.label.length - b.label.length,\n\t\t\t\t\t);\n\t\t\t\t\tlabelActions.pop();\n\t\t\t\t\tactions = actions.filter(\n\t\t\t\t\t\t(action) => labelActions.indexOf(action) < 0,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\ttemplateData.actionBar.push(actions, {\n\t\t\t\t\ticon: true,\n\t\t\t\t\tlabel: false,\n\t\t\t\t});\n\t\t\t\tif (this._actionRunner) {\n\t\t\t\t\ttemplateData.actionBar.actionRunner = this._actionRunner;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (element.icon) {\n\t\t\ttemplateData.icon.className = `ports-view-actionbar-cell-icon ${ThemeIcon.asClassName(element.icon)}`;\n\t\t\ttemplateData.icon.title = element.tooltip;\n\t\t\ttemplateData.icon.style.display = \"inline\";\n\t\t}\n\t}\n\n\tprivate renderInputBox(\n\t\tcontainer: HTMLElement,\n\t\teditableData: IEditableData,\n\t): IDisposable {\n\t\t// Required for FireFox. The blur event doesn't fire on FireFox when you just mash the \"+\" button to forward a port.\n\t\tif (this.inputDone) {\n\t\t\tthis.inputDone(false, false);\n\t\t\tthis.inputDone = undefined;\n\t\t}\n\t\tcontainer.style.paddingLeft = \"5px\";\n\t\tconst value = editableData.startingValue || \"\";\n\t\tconst inputBox = new InputBox(container, this.contextViewService, {\n\t\t\tariaLabel: nls.localize(\n\t\t\t\t\"remote.tunnelsView.input\",\n\t\t\t\t\"Press Enter to confirm or Escape to cancel.\",\n\t\t\t),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: (value) => {\n\t\t\t\t\tconst message = editableData.validationMessage(value);\n\t\t\t\t\tif (!message) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcontent: message.content,\n\t\t\t\t\t\tformatContent: true,\n\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\tmessage.severity === Severity.Error\n\t\t\t\t\t\t\t\t? MessageType.ERROR\n\t\t\t\t\t\t\t\t: MessageType.INFO,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t},\n\t\t\tplaceholder: editableData.placeholder || \"\",\n\t\t\tinputBoxStyles: defaultInputBoxStyles,\n\t\t});\n\t\tinputBox.value = value;\n\t\tinputBox.focus();\n\t\tinputBox.select({\n\t\t\tstart: 0,\n\t\t\tend: editableData.startingValue\n\t\t\t\t? editableData.startingValue.length\n\t\t\t\t: 0,\n\t\t});\n\n\t\tconst done = createSingleCallFunction(\n\t\t\tasync (success: boolean, finishEditing: boolean) => {\n\t\t\t\tdispose(toDispose);\n\t\t\t\tif (this.inputDone) {\n\t\t\t\t\tthis.inputDone = undefined;\n\t\t\t\t}\n\t\t\t\tinputBox.element.style.display = \"none\";\n\t\t\t\tconst inputValue = inputBox.value;\n\t\t\t\tif (finishEditing) {\n\t\t\t\t\treturn editableData.onFinish(inputValue, success);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\tthis.inputDone = done;\n\n\t\tconst toDispose = [\n\t\t\tinputBox,\n\t\t\tdom.addStandardDisposableListener(\n\t\t\t\tinputBox.inputElement,\n\t\t\t\tdom.EventType.KEY_DOWN,\n\t\t\t\tasync (e: IKeyboardEvent) => {\n\t\t\t\t\tif (e.equals(KeyCode.Enter)) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tif (inputBox.validate() !== MessageType.ERROR) {\n\t\t\t\t\t\t\treturn done(true, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn done(false, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (e.equals(KeyCode.Escape)) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\treturn done(false, true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t\tdom.addDisposableListener(\n\t\t\t\tinputBox.inputElement,\n\t\t\t\tdom.EventType.BLUR,\n\t\t\t\t() => {\n\t\t\t\t\treturn done(\n\t\t\t\t\t\tinputBox.validate() !== MessageType.ERROR,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t),\n\t\t];\n\n\t\treturn toDisposable(() => {\n\t\t\tdone(false, false);\n\t\t});\n\t}\n\n\tdisposeElement(\n\t\telement: ActionBarCell,\n\t\tindex: number,\n\t\ttemplateData: IActionBarTemplateData,\n\t\theight: number | undefined,\n\t) {\n\t\ttemplateData.elementDisposable.dispose();\n\t}\n\n\tdisposeTemplate(templateData: IActionBarTemplateData): void {\n\t\ttemplateData.label.dispose();\n\t\ttemplateData.actionBar.dispose();\n\t\ttemplateData.elementDisposable.dispose();\n\t\ttemplateData.button?.dispose();\n\t}\n}\n\nclass TunnelItem implements ITunnelItem {\n\tstatic createFromTunnel(\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\ttunnelService: ITunnelService,\n\t\ttunnel: Tunnel,\n\t\ttype: TunnelType = TunnelType.Forwarded,\n\t\tcloseable?: boolean,\n\t) {\n\t\treturn new TunnelItem(\n\t\t\ttype,\n\t\t\ttunnel.remoteHost,\n\t\t\ttunnel.remotePort,\n\t\t\ttunnel.source,\n\t\t\t!!tunnel.hasRunningProcess,\n\t\t\ttunnel.protocol,\n\t\t\ttunnel.localUri,\n\t\t\ttunnel.localAddress,\n\t\t\ttunnel.localPort,\n\t\t\tcloseable === undefined ? tunnel.closeable : closeable,\n\t\t\ttunnel.name,\n\t\t\ttunnel.runningProcess,\n\t\t\ttunnel.pid,\n\t\t\ttunnel.privacy,\n\t\t\tremoteExplorerService,\n\t\t\ttunnelService,\n\t\t);\n\t}\n\n\t/**\n\t * Removes all non-serializable properties from the tunnel\n\t * @returns A new TunnelItem without any services\n\t */\n\tpublic strip(): TunnelItem | undefined {\n\t\treturn new TunnelItem(\n\t\t\tthis.tunnelType,\n\t\t\tthis.remoteHost,\n\t\t\tthis.remotePort,\n\t\t\tthis.source,\n\t\t\tthis.hasRunningProcess,\n\t\t\tthis.protocol,\n\t\t\tthis.localUri,\n\t\t\tthis.localAddress,\n\t\t\tthis.localPort,\n\t\t\tthis.closeable,\n\t\t\tthis.name,\n\t\t\tthis.runningProcess,\n\t\t\tthis.pid,\n\t\t\tthis._privacy,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic tunnelType: TunnelType,\n\t\tpublic remoteHost: string,\n\t\tpublic remotePort: number,\n\t\tpublic source: { source: TunnelSource; description: string },\n\t\tpublic hasRunningProcess: boolean,\n\t\tpublic protocol: TunnelProtocol,\n\t\tpublic localUri?: URI,\n\t\tpublic localAddress?: string,\n\t\tpublic localPort?: number,\n\t\tpublic closeable?: boolean,\n\t\tpublic name?: string,\n\t\tprivate runningProcess?: string,\n\t\tprivate pid?: number,\n\t\tprivate _privacy?: TunnelPrivacyId | string,\n\t\tprivate remoteExplorerService?: IRemoteExplorerService,\n\t\tprivate tunnelService?: ITunnelService,\n\t) {}\n\n\tget label(): string {\n\t\tif (this.tunnelType === TunnelType.Add && this.name) {\n\t\t\treturn this.name;\n\t\t}\n\t\tconst portNumberLabel =\n\t\t\tisLocalhost(this.remoteHost) || isAllInterfaces(this.remoteHost)\n\t\t\t\t? `${this.remotePort}`\n\t\t\t\t: `${this.remoteHost}:${this.remotePort}`;\n\t\tif (this.name) {\n\t\t\treturn `${this.name} (${portNumberLabel})`;\n\t\t} else {\n\t\t\treturn portNumberLabel;\n\t\t}\n\t}\n\n\tset processDescription(description: string | undefined) {\n\t\tthis.runningProcess = description;\n\t}\n\n\tget processDescription(): string | undefined {\n\t\tlet description = \"\";\n\t\tif (this.runningProcess) {\n\t\t\tif (\n\t\t\t\tthis.pid &&\n\t\t\t\tthis.remoteExplorerService?.namedProcesses.has(this.pid)\n\t\t\t) {\n\t\t\t\t// This is a known process. Give it a friendly name.\n\t\t\t\tdescription = this.remoteExplorerService.namedProcesses.get(\n\t\t\t\t\tthis.pid,\n\t\t\t\t)!;\n\t\t\t} else {\n\t\t\t\tdescription = this.runningProcess.replace(/\\0/g, \" \").trim();\n\t\t\t}\n\t\t\tif (this.pid) {\n\t\t\t\tdescription += ` (${this.pid})`;\n\t\t\t}\n\t\t} else if (this.hasRunningProcess) {\n\t\t\tdescription = nls.localize(\n\t\t\t\t\"tunnelView.runningProcess.inacessable\",\n\t\t\t\t\"Process information unavailable\",\n\t\t\t);\n\t\t}\n\n\t\treturn description;\n\t}\n\n\tget tooltipPostfix(): string {\n\t\tlet information: string;\n\t\tif (this.localAddress) {\n\t\t\tinformation = nls.localize(\n\t\t\t\t\"remote.tunnel.tooltipForwarded\",\n\t\t\t\t\"Remote port {0}:{1} forwarded to local address {2}. \",\n\t\t\t\tthis.remoteHost,\n\t\t\t\tthis.remotePort,\n\t\t\t\tthis.localAddress,\n\t\t\t);\n\t\t} else {\n\t\t\tinformation = nls.localize(\n\t\t\t\t\"remote.tunnel.tooltipCandidate\",\n\t\t\t\t\"Remote port {0}:{1} not forwarded. \",\n\t\t\t\tthis.remoteHost,\n\t\t\t\tthis.remotePort,\n\t\t\t);\n\t\t}\n\n\t\treturn information;\n\t}\n\n\tget iconTooltip(): string {\n\t\tconst isAdd = this.tunnelType === TunnelType.Add;\n\t\tif (isAdd) {\n\t\t\treturn this.label;\n\t\t} else {\n\t\t\treturn `${\n\t\t\t\tthis.processDescription\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"tunnel.iconColumn.running\",\n\t\t\t\t\t\t\t\"Port has running process.\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"tunnel.iconColumn.notRunning\",\n\t\t\t\t\t\t\t\"No running process.\",\n\t\t\t\t\t\t)\n\t\t\t}`;\n\t\t}\n\t}\n\n\tget portTooltip(): string {\n\t\tconst isAdd = this.tunnelType === TunnelType.Add;\n\t\tif (isAdd) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn `${this.name ? nls.localize(\"remote.tunnel.tooltipName\", \"Port labeled {0}. \", this.name) : \"\"}`;\n\t\t}\n\t}\n\n\tget processTooltip(): string {\n\t\treturn this.processDescription ?? \"\";\n\t}\n\n\tget originTooltip(): string {\n\t\treturn this.source.description;\n\t}\n\n\tget privacy(): TunnelPrivacy {\n\t\tif (this.tunnelService?.privacyOptions) {\n\t\t\treturn (\n\t\t\t\tthis.tunnelService?.privacyOptions.find(\n\t\t\t\t\t(element) => element.id === this._privacy,\n\t\t\t\t) ?? {\n\t\t\t\t\tid: \"\",\n\t\t\t\t\tthemeIcon: Codicon.question.id,\n\t\t\t\t\tlabel: nls.localize(\"tunnelPrivacy.unknown\", \"Unknown\"),\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tid: TunnelPrivacyId.Private,\n\t\t\t\tthemeIcon: privatePortIcon.id,\n\t\t\t\tlabel: nls.localize(\"tunnelPrivacy.private\", \"Private\"),\n\t\t\t};\n\t\t}\n\t}\n}\n\nconst TunnelTypeContextKey = new RawContextKey<TunnelType>(\n\t\"tunnelType\",\n\tTunnelType.Add,\n\ttrue,\n);\nconst TunnelCloseableContextKey = new RawContextKey<boolean>(\n\t\"tunnelCloseable\",\n\tfalse,\n\ttrue,\n);\nconst TunnelPrivacyContextKey = new RawContextKey<\n\tTunnelPrivacyId | string | undefined\n>(\"tunnelPrivacy\", undefined, true);\nconst TunnelPrivacyEnabledContextKey = new RawContextKey<boolean>(\n\t\"tunnelPrivacyEnabled\",\n\tfalse,\n\ttrue,\n);\nconst TunnelProtocolContextKey = new RawContextKey<TunnelProtocol | undefined>(\n\t\"tunnelProtocol\",\n\tTunnelProtocol.Http,\n\ttrue,\n);\nconst TunnelViewFocusContextKey = new RawContextKey<boolean>(\n\t\"tunnelViewFocus\",\n\tfalse,\n\tnls.localize(\"tunnel.focusContext\", \"Whether the Ports view has focus.\"),\n);\nconst TunnelViewSelectionKeyName = \"tunnelViewSelection\";\n// host:port\nconst TunnelViewSelectionContextKey = new RawContextKey<string | undefined>(\n\tTunnelViewSelectionKeyName,\n\tundefined,\n\ttrue,\n);\nconst TunnelViewMultiSelectionKeyName = \"tunnelViewMultiSelection\";\n// host:port[]\nconst TunnelViewMultiSelectionContextKey = new RawContextKey<\n\tstring[] | undefined\n>(TunnelViewMultiSelectionKeyName, undefined, true);\nconst PortChangableContextKey = new RawContextKey<boolean>(\n\t\"portChangable\",\n\tfalse,\n\ttrue,\n);\nconst ProtocolChangeableContextKey = new RawContextKey<boolean>(\n\t\"protocolChangable\",\n\ttrue,\n\ttrue,\n);\n\nexport class TunnelPanel extends ViewPane {\n\tstatic readonly ID = TUNNEL_VIEW_ID;\n\tstatic readonly TITLE: ILocalizedString = nls.localize2(\n\t\t\"remote.tunnel\",\n\t\t\"Ports\",\n\t);\n\n\tprivate panelContainer: HTMLElement | undefined;\n\tprivate table: WorkbenchTable<ITunnelItem> | undefined;\n\tprivate readonly tableDisposables: DisposableStore = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate tunnelTypeContext: IContextKey<TunnelType>;\n\tprivate tunnelCloseableContext: IContextKey<boolean>;\n\tprivate tunnelPrivacyContext: IContextKey<\n\t\tTunnelPrivacyId | string | undefined\n\t>;\n\tprivate tunnelPrivacyEnabledContext: IContextKey<boolean>;\n\tprivate tunnelProtocolContext: IContextKey<TunnelProtocol | undefined>;\n\tprivate tunnelViewFocusContext: IContextKey<boolean>;\n\tprivate tunnelViewSelectionContext: IContextKey<string | undefined>;\n\tprivate tunnelViewMultiSelectionContext: IContextKey<string[] | undefined>;\n\tprivate portChangableContextKey: IContextKey<boolean>;\n\tprivate protocolChangableContextKey: IContextKey<boolean>;\n\tprivate isEditing = false;\n\tprivate titleActions: IAction[] = [];\n\tprivate lastFocus: number[] = [];\n\n\tconstructor(\n\t\tprotected viewModel: ITunnelViewModel,\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IQuickInputService protected quickInputService: IQuickInputService,\n\t\t@ICommandService protected commandService: ICommandService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\t\tthis.tunnelTypeContext = TunnelTypeContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelCloseableContext = TunnelCloseableContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelPrivacyContext = TunnelPrivacyContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelPrivacyEnabledContext = TunnelPrivacyEnabledContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelPrivacyEnabledContext.set(tunnelService.canChangePrivacy);\n\t\tthis.protocolChangableContextKey = ProtocolChangeableContextKey.bindTo(contextKeyService);\n\t\tthis.protocolChangableContextKey.set(tunnelService.canChangeProtocol);\n\t\tthis.tunnelProtocolContext = TunnelProtocolContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelViewFocusContext = TunnelViewFocusContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelViewSelectionContext = TunnelViewSelectionContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelViewMultiSelectionContext = TunnelViewMultiSelectionContextKey.bindTo(contextKeyService);\n\t\tthis.portChangableContextKey = PortChangableContextKey.bindTo(contextKeyService);\n\n\t\tconst overlayContextKeyService = this.contextKeyService.createOverlay([['view', TunnelPanel.ID]]);\n\t\tconst titleMenu = this._register(this.menuService.createMenu(MenuId.TunnelTitle, overlayContextKeyService));\n\t\tconst updateActions = () => {\n\t\t\tthis.titleActions = [];\n\t\t\tcreateAndFillInActionBarActions(titleMenu, undefined, this.titleActions);\n\t\t\tthis.updateActions();\n\t\t};\n\n\t\tthis._register(titleMenu.onDidChange(updateActions));\n\t\tupdateActions();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.titleActions = [];\n\t\t}));\n\n\t\tthis.registerPrivacyActions();\n\t\tthis._register(Event.once(this.tunnelService.onAddedTunnelProvider)(() => {\n\t\t\tlet updated = false;\n\t\t\tif (this.tunnelPrivacyEnabledContext.get() === false) {\n\t\t\t\tthis.tunnelPrivacyEnabledContext.set(tunnelService.canChangePrivacy);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (this.protocolChangableContextKey.get() === true) {\n\t\t\t\tthis.protocolChangableContextKey.set(tunnelService.canChangeProtocol);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (updated) {\n\t\t\t\tupdateActions();\n\t\t\t\tthis.registerPrivacyActions();\n\t\t\t\tthis.createTable();\n\t\t\t\tthis.table?.layout(this.height, this.width);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerPrivacyActions() {\n\t\tfor (const privacyOption of this.tunnelService.privacyOptions) {\n\t\t\tconst optionId = `remote.tunnel.privacy${privacyOption.id}`;\n\t\t\tCommandsRegistry.registerCommand(\n\t\t\t\toptionId,\n\t\t\t\tChangeTunnelPrivacyAction.handler(privacyOption.id),\n\t\t\t);\n\t\t\tMenuRegistry.appendMenuItem(MenuId.TunnelPrivacy, {\n\t\t\t\torder: 0,\n\t\t\t\tcommand: {\n\t\t\t\t\tid: optionId,\n\t\t\t\t\ttitle: privacyOption.label,\n\t\t\t\t\ttoggled: TunnelPrivacyContextKey.isEqualTo(\n\t\t\t\t\t\tprivacyOption.id,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tget portCount(): number {\n\t\treturn (\n\t\t\tthis.remoteExplorerService.tunnelModel.forwarded.size +\n\t\t\tthis.remoteExplorerService.tunnelModel.detected.size\n\t\t);\n\t}\n\n\tprivate createTable(): void {\n\t\tif (!this.panelContainer) {\n\t\t\treturn;\n\t\t}\n\t\tthis.tableDisposables.clear();\n\n\t\tdom.clearNode(this.panelContainer);\n\n\t\tconst widgetContainer = dom.append(\n\t\t\tthis.panelContainer,\n\t\t\tdom.$(\".customview-tree\"),\n\t\t);\n\t\twidgetContainer.classList.add(\"ports-view\");\n\t\twidgetContainer.classList.add(\n\t\t\t\"file-icon-themable-tree\",\n\t\t\t\"show-file-icons\",\n\t\t);\n\n\t\tconst actionBarRenderer = new ActionBarRenderer(\n\t\t\tthis.instantiationService,\n\t\t\tthis.contextKeyService,\n\t\t\tthis.menuService,\n\t\t\tthis.contextViewService,\n\t\t\tthis.remoteExplorerService,\n\t\t\tthis.commandService,\n\t\t\tthis.configurationService,\n\t\t);\n\t\tconst columns = [\n\t\t\tnew IconColumn(),\n\t\t\tnew PortColumn(),\n\t\t\tnew LocalAddressColumn(),\n\t\t\tnew RunningProcessColumn(),\n\t\t];\n\t\tif (this.tunnelService.canChangePrivacy) {\n\t\t\tcolumns.push(new PrivacyColumn());\n\t\t}\n\t\tcolumns.push(new OriginColumn());\n\n\t\tthis.table = this.instantiationService.createInstance(\n\t\t\tWorkbenchTable,\n\t\t\t\"RemoteTunnels\",\n\t\t\twidgetContainer,\n\t\t\tnew TunnelTreeVirtualDelegate(this.remoteExplorerService),\n\t\t\tcolumns,\n\t\t\t[actionBarRenderer],\n\t\t\t{\n\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\tgetKeyboardNavigationLabel: (item: ITunnelItem) => {\n\t\t\t\t\t\treturn item.label;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmultipleSelectionSupport: true,\n\t\t\t\taccessibilityProvider: {\n\t\t\t\t\tgetAriaLabel: (item: ITunnelItem) => {\n\t\t\t\t\t\tif (item instanceof TunnelItem) {\n\t\t\t\t\t\t\treturn `${item.tooltipPostfix} ${item.portTooltip} ${item.iconTooltip} ${item.processTooltip} ${item.originTooltip} ${this.tunnelService.canChangePrivacy ? item.privacy.label : \"\"}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn item.label;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetWidgetAriaLabel: () =>\n\t\t\t\t\t\tnls.localize(\"tunnelView\", \"Tunnel View\"),\n\t\t\t\t},\n\t\t\t\topenOnSingleClick: true,\n\t\t\t},\n\t\t) as WorkbenchTable<ITunnelItem>;\n\n\t\tconst actionRunner: ActionRunner = new ActionRunner();\n\t\tactionBarRenderer.actionRunner = actionRunner;\n\n\t\tthis.tableDisposables.add(this.table);\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onContextMenu((e) =>\n\t\t\t\tthis.onContextMenu(e, actionRunner),\n\t\t\t),\n\t\t);\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onMouseDblClick((e) => this.onMouseDblClick(e)),\n\t\t);\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onDidChangeFocus((e) => this.onFocusChanged(e)),\n\t\t);\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onDidChangeSelection((e) => this.onSelectionChanged(e)),\n\t\t);\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onDidFocus(() => this.tunnelViewFocusContext.set(true)),\n\t\t);\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onDidBlur(() => this.tunnelViewFocusContext.set(false)),\n\t\t);\n\n\t\tconst rerender = () =>\n\t\t\tthis.table?.splice(0, Number.POSITIVE_INFINITY, this.viewModel.all);\n\n\t\trerender();\n\t\tlet lastPortCount = this.portCount;\n\t\tthis.tableDisposables.add(\n\t\t\tEvent.debounce(\n\t\t\t\tthis.viewModel.onForwardedPortsChanged,\n\t\t\t\t(_last, e) => e,\n\t\t\t\t50,\n\t\t\t)(() => {\n\t\t\t\tconst newPortCount = this.portCount;\n\t\t\t\tif (\n\t\t\t\t\t(lastPortCount === 0 || newPortCount === 0) &&\n\t\t\t\t\tlastPortCount !== newPortCount\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t\t\t}\n\t\t\t\tlastPortCount = newPortCount;\n\t\t\t\trerender();\n\t\t\t}),\n\t\t);\n\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onMouseClick((e) => {\n\t\t\t\tif (this.hasOpenLinkModifier(e.browserEvent) && this.table) {\n\t\t\t\t\tconst selection = this.table.getSelectedElements();\n\t\t\t\t\tif (\n\t\t\t\t\t\tselection.length === 0 ||\n\t\t\t\t\t\t(selection.length === 1 && selection[0] === e.element)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\tOpenPortInBrowserAction.ID,\n\t\t\t\t\t\t\te.element,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.tableDisposables.add(\n\t\t\tthis.table.onDidOpen((e) => {\n\t\t\t\tif (\n\t\t\t\t\t!e.element ||\n\t\t\t\t\te.element.tunnelType !== TunnelType.Forwarded\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.browserEvent?.type === \"dblclick\") {\n\t\t\t\t\tthis.commandService.executeCommand(LabelTunnelAction.ID);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.tableDisposables.add(\n\t\t\tthis.remoteExplorerService.onDidChangeEditable((e) => {\n\t\t\t\tthis.isEditing = !!this.remoteExplorerService.getEditableData(\n\t\t\t\t\te?.tunnel,\n\t\t\t\t\te?.editId,\n\t\t\t\t);\n\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\n\t\t\t\tif (!this.isEditing) {\n\t\t\t\t\twidgetContainer.classList.remove(\"highlight\");\n\t\t\t\t}\n\n\t\t\t\trerender();\n\n\t\t\t\tif (this.isEditing) {\n\t\t\t\t\twidgetContainer.classList.add(\"highlight\");\n\t\t\t\t\tif (!e) {\n\t\t\t\t\t\t// When we are in editing mode for a new forward, rather than updating an existing one we need to reveal the input box since it might be out of view.\n\t\t\t\t\t\tthis.table?.reveal(\n\t\t\t\t\t\t\tthis.table.indexOf(this.viewModel.input),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (e && e.tunnel.tunnelType !== TunnelType.Add) {\n\t\t\t\t\t\tthis.table?.setFocus(this.lastFocus);\n\t\t\t\t\t}\n\t\t\t\t\tthis.focus();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.panelContainer = dom.append(\n\t\t\tcontainer,\n\t\t\tdom.$(\".tree-explorer-viewlet-tree-view\"),\n\t\t);\n\t\tthis.createTable();\n\t}\n\n\toverride shouldShowWelcome(): boolean {\n\t\treturn this.viewModel.isEmpty() && !this.isEditing;\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.table?.domFocus();\n\t}\n\n\tprivate onFocusChanged(event: ITableEvent<ITunnelItem>) {\n\t\tif (event.indexes.length > 0 && event.elements.length > 0) {\n\t\t\tthis.lastFocus = [...event.indexes];\n\t\t}\n\t\tconst elements = event.elements;\n\t\tconst item = elements && elements.length ? elements[0] : undefined;\n\t\tif (item) {\n\t\t\tthis.tunnelViewSelectionContext.set(\n\t\t\t\tmakeAddress(item.remoteHost, item.remotePort),\n\t\t\t);\n\t\t\tthis.tunnelTypeContext.set(item.tunnelType);\n\t\t\tthis.tunnelCloseableContext.set(!!item.closeable);\n\t\t\tthis.tunnelPrivacyContext.set(item.privacy.id);\n\t\t\tthis.tunnelProtocolContext.set(\n\t\t\t\titem.protocol === TunnelProtocol.Https\n\t\t\t\t\t? TunnelProtocol.Https\n\t\t\t\t\t: TunnelProtocol.Https,\n\t\t\t);\n\t\t\tthis.portChangableContextKey.set(!!item.localPort);\n\t\t} else {\n\t\t\tthis.tunnelTypeContext.reset();\n\t\t\tthis.tunnelViewSelectionContext.reset();\n\t\t\tthis.tunnelCloseableContext.reset();\n\t\t\tthis.tunnelPrivacyContext.reset();\n\t\t\tthis.tunnelProtocolContext.reset();\n\t\t\tthis.portChangableContextKey.reset();\n\t\t}\n\t}\n\n\tprivate hasOpenLinkModifier(e: MouseEvent): boolean {\n\t\tconst editorConf = this.configurationService.getValue<{\n\t\t\tmultiCursorModifier: \"ctrlCmd\" | \"alt\";\n\t\t}>(\"editor\");\n\n\t\tlet modifierKey = false;\n\t\tif (editorConf.multiCursorModifier === \"ctrlCmd\") {\n\t\t\tmodifierKey = e.altKey;\n\t\t} else if (isMacintosh) {\n\t\t\tmodifierKey = e.metaKey;\n\t\t} else {\n\t\t\tmodifierKey = e.ctrlKey;\n\t\t}\n\t\treturn modifierKey;\n\t}\n\n\tprivate onSelectionChanged(event: ITableEvent<ITunnelItem>) {\n\t\tconst elements = event.elements;\n\t\tif (elements.length > 1) {\n\t\t\tthis.tunnelViewMultiSelectionContext.set(\n\t\t\t\telements.map((element) =>\n\t\t\t\t\tmakeAddress(element.remoteHost, element.remotePort),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.tunnelViewMultiSelectionContext.set(undefined);\n\t\t}\n\t}\n\n\tprivate onContextMenu(\n\t\tevent: ITableContextMenuEvent<ITunnelItem>,\n\t\tactionRunner: ActionRunner,\n\t): void {\n\t\tif (\n\t\t\tevent.element !== undefined &&\n\t\t\t!(event.element instanceof TunnelItem)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tevent.browserEvent.preventDefault();\n\t\tevent.browserEvent.stopPropagation();\n\n\t\tconst node: TunnelItem | undefined = event.element;\n\n\t\tif (node) {\n\t\t\tthis.table?.setFocus([this.table.indexOf(node)]);\n\t\t\tthis.tunnelTypeContext.set(node.tunnelType);\n\t\t\tthis.tunnelCloseableContext.set(!!node.closeable);\n\t\t\tthis.tunnelPrivacyContext.set(node.privacy.id);\n\t\t\tthis.tunnelProtocolContext.set(node.protocol);\n\t\t\tthis.portChangableContextKey.set(!!node.localPort);\n\t\t} else {\n\t\t\tthis.tunnelTypeContext.set(TunnelType.Add);\n\t\t\tthis.tunnelCloseableContext.set(false);\n\t\t\tthis.tunnelPrivacyContext.set(undefined);\n\t\t\tthis.tunnelProtocolContext.set(undefined);\n\t\t\tthis.portChangableContextKey.set(false);\n\t\t}\n\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tmenuId: MenuId.TunnelContext,\n\t\t\tmenuActionOptions: { shouldForwardArgs: true },\n\t\t\tcontextKeyService: this.table?.contextKeyService,\n\t\t\tgetAnchor: () => event.anchor,\n\t\t\tgetActionViewItem: (action) => {\n\t\t\t\tconst keybinding = this.keybindingService.lookupKeybinding(\n\t\t\t\t\taction.id,\n\t\t\t\t);\n\t\t\t\tif (keybinding) {\n\t\t\t\t\treturn new ActionViewItem(action, action, {\n\t\t\t\t\t\tlabel: true,\n\t\t\t\t\t\tkeybinding: keybinding.getLabel(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tonHide: (wasCancelled?: boolean) => {\n\t\t\t\tif (wasCancelled) {\n\t\t\t\t\tthis.table?.domFocus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetActionsContext: () => node?.strip(),\n\t\t\tactionRunner,\n\t\t});\n\t}\n\n\tprivate onMouseDblClick(e: ITableMouseEvent<ITunnelItem>): void {\n\t\tif (!e.element) {\n\t\t\tthis.commandService.executeCommand(ForwardPortAction.INLINE_ID);\n\t\t}\n\t}\n\n\tprivate height = 0;\n\tprivate width = 0;\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tthis.height = height;\n\t\tthis.width = width;\n\t\tsuper.layoutBody(height, width);\n\t\tthis.table?.layout(height, width);\n\t}\n}\n\nexport class TunnelPanelDescriptor implements IViewDescriptor {\n\treadonly id = TunnelPanel.ID;\n\treadonly name: ILocalizedString = TunnelPanel.TITLE;\n\treadonly ctorDescriptor: SyncDescriptor<TunnelPanel>;\n\treadonly canToggleVisibility = true;\n\treadonly hideByDefault = false;\n\t// group is not actually used for views that are not extension contributed. Use order instead.\n\treadonly group = \"details@0\";\n\t// -500 comes from the remote explorer viewOrderDelegate\n\treadonly order = -500;\n\treadonly remoteAuthority?: string | string[];\n\treadonly canMoveView = true;\n\treadonly containerIcon = portsViewIcon;\n\n\tconstructor(\n\t\tviewModel: ITunnelViewModel,\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tthis.ctorDescriptor = new SyncDescriptor(TunnelPanel, [viewModel]);\n\t\tthis.remoteAuthority = environmentService.remoteAuthority\n\t\t\t? environmentService.remoteAuthority.split(\"+\")[0]\n\t\t\t: undefined;\n\t}\n}\n\nfunction isITunnelItem(item: any): item is ITunnelItem {\n\treturn item && item.tunnelType && item.remoteHost && item.source;\n}\n\nnamespace LabelTunnelAction {\n\texport const ID = \"remote.tunnel.label\";\n\texport const LABEL = nls.localize(\"remote.tunnel.label\", \"Set Port Label\");\n\texport const COMMAND_ID_KEYWORD = \"label\";\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (\n\t\t\taccessor,\n\t\t\targ,\n\t\t): Promise<{ port: number; label: string } | undefined> => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tlet tunnelContext: ITunnelItem | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\ttunnelContext = arg;\n\t\t\t} else {\n\t\t\t\tconst context = accessor\n\t\t\t\t\t.get(IContextKeyService)\n\t\t\t\t\t.getContextKeyValue<string | undefined>(\n\t\t\t\t\t\tTunnelViewSelectionKeyName,\n\t\t\t\t\t);\n\t\t\t\tconst tunnel = context\n\t\t\t\t\t? remoteExplorerService.tunnelModel.forwarded.get(context)\n\t\t\t\t\t: undefined;\n\t\t\t\tif (tunnel) {\n\t\t\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\t\t\ttunnelContext = TunnelItem.createFromTunnel(\n\t\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\t\ttunnelService,\n\t\t\t\t\t\ttunnel,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tunnelContext) {\n\t\t\t\tconst tunnelItem: ITunnelItem = tunnelContext;\n\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\tconst startingValue = tunnelItem.name\n\t\t\t\t\t\t? tunnelItem.name\n\t\t\t\t\t\t: `${tunnelItem.remotePort}`;\n\t\t\t\t\tremoteExplorerService.setEditable(\n\t\t\t\t\t\ttunnelItem,\n\t\t\t\t\t\tTunnelEditId.Label,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\t\t\t\tvalue = value.trim();\n\t\t\t\t\t\t\t\tremoteExplorerService.setEditable(\n\t\t\t\t\t\t\t\t\ttunnelItem,\n\t\t\t\t\t\t\t\t\tTunnelEditId.Label,\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst changed =\n\t\t\t\t\t\t\t\t\tsuccess && value !== startingValue;\n\t\t\t\t\t\t\t\tif (changed) {\n\t\t\t\t\t\t\t\t\tawait remoteExplorerService.tunnelModel.name(\n\t\t\t\t\t\t\t\t\t\ttunnelItem.remoteHost,\n\t\t\t\t\t\t\t\t\t\ttunnelItem.remotePort,\n\t\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t\tchanged\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\tport: tunnelItem.remotePort,\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: value,\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalidationMessage: () => null,\n\t\t\t\t\t\t\tplaceholder: nls.localize(\n\t\t\t\t\t\t\t\t\"remote.tunnelsView.labelPlaceholder\",\n\t\t\t\t\t\t\t\t\"Port label\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tstartingValue,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n}\n\nconst invalidPortString: string = nls.localize(\n\t\"remote.tunnelsView.portNumberValid\",\n\t\"Forwarded port should be a number or a host:port.\",\n);\nconst maxPortNumber: number = 65536;\nconst invalidPortNumberString: string = nls.localize(\n\t\"remote.tunnelsView.portNumberToHigh\",\n\t\"Port number must be \\u2265 0 and < {0}.\",\n\tmaxPortNumber,\n);\nconst requiresSudoString: string = nls.localize(\n\t\"remote.tunnelView.inlineElevationMessage\",\n\t\"May Require Sudo\",\n);\nconst alreadyForwarded: string = nls.localize(\n\t\"remote.tunnelView.alreadyForwarded\",\n\t\"Port is already forwarded\",\n);\n\nexport namespace ForwardPortAction {\n\texport const INLINE_ID = \"remote.tunnel.forwardInline\";\n\texport const COMMANDPALETTE_ID = \"remote.tunnel.forwardCommandPalette\";\n\texport const LABEL: ILocalizedString = nls.localize2(\n\t\t\"remote.tunnel.forward\",\n\t\t\"Forward a Port\",\n\t);\n\texport const TREEITEM_LABEL = nls.localize(\n\t\t\"remote.tunnel.forwardItem\",\n\t\t\"Forward Port\",\n\t);\n\tconst forwardPrompt = nls.localize(\n\t\t\"remote.tunnel.forwardPrompt\",\n\t\t\"Port number or address (eg. 3000 or 10.10.10.10:2000).\",\n\t);\n\n\tfunction validateInput(\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\ttunnelService: ITunnelService,\n\t\tvalue: string,\n\t\tcanElevate: boolean,\n\t): { content: string; severity: Severity } | null {\n\t\tconst parsed = parseAddress(value);\n\t\tif (!parsed) {\n\t\t\treturn { content: invalidPortString, severity: Severity.Error };\n\t\t} else if (parsed.port >= maxPortNumber) {\n\t\t\treturn {\n\t\t\t\tcontent: invalidPortNumberString,\n\t\t\t\tseverity: Severity.Error,\n\t\t\t};\n\t\t} else if (canElevate && tunnelService.isPortPrivileged(parsed.port)) {\n\t\t\treturn { content: requiresSudoString, severity: Severity.Info };\n\t\t} else if (\n\t\t\tmapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\tremoteExplorerService.tunnelModel.forwarded,\n\t\t\t\tparsed.host,\n\t\t\t\tparsed.port,\n\t\t\t)\n\t\t) {\n\t\t\treturn { content: alreadyForwarded, severity: Severity.Error };\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction error(\n\t\tnotificationService: INotificationService,\n\t\ttunnelOrError: RemoteTunnel | string | void,\n\t\thost: string,\n\t\tport: number,\n\t) {\n\t\tif (!tunnelOrError) {\n\t\t\tnotificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"remote.tunnel.forwardError\",\n\t\t\t\t\t\"Unable to forward {0}:{1}. The host may not be available or that remote port may already be forwarded\",\n\t\t\t\t\thost,\n\t\t\t\t\tport,\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (typeof tunnelOrError === \"string\") {\n\t\t\tnotificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"remote.tunnel.forwardErrorProvided\",\n\t\t\t\t\t\"Unable to forward {0}:{1}. {2}\",\n\t\t\t\t\thost,\n\t\t\t\t\tport,\n\t\t\t\t\ttunnelOrError,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\texport function inlineHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tremoteExplorerService.setEditable(undefined, TunnelEditId.New, {\n\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\tremoteExplorerService.setEditable(\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tTunnelEditId.New,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t);\n\t\t\t\t\tlet parsed: { host: string; port: number } | undefined;\n\t\t\t\t\tif (success && (parsed = parseAddress(value))) {\n\t\t\t\t\t\tremoteExplorerService\n\t\t\t\t\t\t\t.forward({\n\t\t\t\t\t\t\t\tremote: {\n\t\t\t\t\t\t\t\t\thost: parsed.host,\n\t\t\t\t\t\t\t\t\tport: parsed.port,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then((tunnelOrError) =>\n\t\t\t\t\t\t\t\terror(\n\t\t\t\t\t\t\t\t\tnotificationService,\n\t\t\t\t\t\t\t\t\ttunnelOrError,\n\t\t\t\t\t\t\t\t\tparsed!.host,\n\t\t\t\t\t\t\t\t\tparsed!.port,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvalidationMessage: (value) =>\n\t\t\t\t\tvalidateInput(\n\t\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\t\ttunnelService,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttunnelService.canElevate,\n\t\t\t\t\t),\n\t\t\t\tplaceholder: forwardPrompt,\n\t\t\t});\n\t\t};\n\t}\n\n\texport function commandPaletteHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst viewsService = accessor.get(IViewsService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tawait viewsService.openView(TunnelPanel.ID, true);\n\t\t\tconst value = await quickInputService.input({\n\t\t\t\tprompt: forwardPrompt,\n\t\t\t\tvalidateInput: (value) =>\n\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\tvalidateInput(\n\t\t\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\t\t\ttunnelService,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\ttunnelService.canElevate,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t});\n\t\t\tlet parsed: { host: string; port: number } | undefined;\n\t\t\tif (value && (parsed = parseAddress(value))) {\n\t\t\t\tremoteExplorerService\n\t\t\t\t\t.forward({\n\t\t\t\t\t\tremote: { host: parsed.host, port: parsed.port },\n\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t})\n\t\t\t\t\t.then((tunnel) =>\n\t\t\t\t\t\terror(\n\t\t\t\t\t\t\tnotificationService,\n\t\t\t\t\t\t\ttunnel,\n\t\t\t\t\t\t\tparsed!.host,\n\t\t\t\t\t\t\tparsed!.port,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface QuickPickTunnel extends IQuickPickItem {\n\ttunnel?: ITunnelItem;\n}\n\nfunction makeTunnelPicks(\n\ttunnels: Tunnel[],\n\tremoteExplorerService: IRemoteExplorerService,\n\ttunnelService: ITunnelService,\n): QuickPickInput<QuickPickTunnel>[] {\n\tconst picks: QuickPickInput<QuickPickTunnel>[] = tunnels.map(\n\t\t(forwarded) => {\n\t\t\tconst item = TunnelItem.createFromTunnel(\n\t\t\t\tremoteExplorerService,\n\t\t\t\ttunnelService,\n\t\t\t\tforwarded,\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tlabel: item.label,\n\t\t\t\tdescription: item.processDescription,\n\t\t\t\ttunnel: item,\n\t\t\t};\n\t\t},\n\t);\n\tif (picks.length === 0) {\n\t\tpicks.push({\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"remote.tunnel.closeNoPorts\",\n\t\t\t\t\"No ports currently forwarded. Try running the {0} command\",\n\t\t\t\tForwardPortAction.LABEL.value,\n\t\t\t),\n\t\t});\n\t}\n\treturn picks;\n}\n\nnamespace ClosePortAction {\n\texport const INLINE_ID = \"remote.tunnel.closeInline\";\n\texport const COMMANDPALETTE_ID = \"remote.tunnel.closeCommandPalette\";\n\texport const LABEL: ILocalizedString = nls.localize2(\n\t\t\"remote.tunnel.close\",\n\t\t\"Stop Forwarding Port\",\n\t);\n\n\texport function inlineHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tlet ports: (ITunnelItem | Tunnel)[] = [];\n\t\t\tconst multiSelectContext = contextKeyService.getContextKeyValue<\n\t\t\t\tstring[] | undefined\n\t\t\t>(TunnelViewMultiSelectionKeyName);\n\t\t\tif (multiSelectContext) {\n\t\t\t\tmultiSelectContext.forEach((context) => {\n\t\t\t\t\tconst tunnel =\n\t\t\t\t\t\tremoteExplorerService.tunnelModel.forwarded.get(\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (tunnel) {\n\t\t\t\t\t\tports?.push(tunnel);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (isITunnelItem(arg)) {\n\t\t\t\tports = [arg];\n\t\t\t} else {\n\t\t\t\tconst context = contextKeyService.getContextKeyValue<\n\t\t\t\t\tstring | undefined\n\t\t\t\t>(TunnelViewSelectionKeyName);\n\t\t\t\tconst tunnel = context\n\t\t\t\t\t? remoteExplorerService.tunnelModel.forwarded.get(context)\n\t\t\t\t\t: undefined;\n\t\t\t\tif (tunnel) {\n\t\t\t\t\tports = [tunnel];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!ports || ports.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn Promise.all(\n\t\t\t\tports.map((port) =>\n\t\t\t\t\tremoteExplorerService.close(\n\t\t\t\t\t\t{ host: port.remoteHost, port: port.remotePort },\n\t\t\t\t\t\tTunnelCloseReason.User,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\t}\n\n\texport function commandPaletteHandler(): ICommandHandler {\n\t\treturn async (accessor) => {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\n\t\t\tconst picks: QuickPickInput<QuickPickTunnel>[] = makeTunnelPicks(\n\t\t\t\tArray.from(\n\t\t\t\t\tremoteExplorerService.tunnelModel.forwarded.values(),\n\t\t\t\t).filter((tunnel) => tunnel.closeable),\n\t\t\t\tremoteExplorerService,\n\t\t\t\ttunnelService,\n\t\t\t);\n\t\t\tconst result = await quickInputService.pick(picks, {\n\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\"remote.tunnel.closePlaceholder\",\n\t\t\t\t\t\"Choose a port to stop forwarding\",\n\t\t\t\t),\n\t\t\t});\n\t\t\tif (result && result.tunnel) {\n\t\t\t\tawait remoteExplorerService.close(\n\t\t\t\t\t{\n\t\t\t\t\t\thost: result.tunnel.remoteHost,\n\t\t\t\t\t\tport: result.tunnel.remotePort,\n\t\t\t\t\t},\n\t\t\t\t\tTunnelCloseReason.User,\n\t\t\t\t);\n\t\t\t} else if (result) {\n\t\t\t\tawait commandService.executeCommand(\n\t\t\t\t\tForwardPortAction.COMMANDPALETTE_ID,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport namespace OpenPortInBrowserAction {\n\texport const ID = \"remote.tunnel.open\";\n\texport const LABEL = nls.localize(\"remote.tunnel.open\", \"Open in Browser\");\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tlet key: string | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\tkey = makeAddress(arg.remoteHost, arg.remotePort);\n\t\t\t} else if (arg.tunnelRemoteHost && arg.tunnelRemotePort) {\n\t\t\t\tkey = makeAddress(arg.tunnelRemoteHost, arg.tunnelRemotePort);\n\t\t\t}\n\t\t\tif (key) {\n\t\t\t\tconst model = accessor.get(IRemoteExplorerService).tunnelModel;\n\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\treturn run(model, openerService, key);\n\t\t\t}\n\t\t};\n\t}\n\n\texport function run(\n\t\tmodel: TunnelModel,\n\t\topenerService: IOpenerService,\n\t\tkey: string,\n\t) {\n\t\tconst tunnel = model.forwarded.get(key) || model.detected.get(key);\n\t\tif (tunnel) {\n\t\t\treturn openerService.open(tunnel.localUri, {\n\t\t\t\tallowContributedOpeners: false,\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport namespace OpenPortInPreviewAction {\n\texport const ID = \"remote.tunnel.openPreview\";\n\texport const LABEL = nls.localize(\n\t\t\"remote.tunnel.openPreview\",\n\t\t\"Preview in Editor\",\n\t);\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tlet key: string | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\tkey = makeAddress(arg.remoteHost, arg.remotePort);\n\t\t\t} else if (arg.tunnelRemoteHost && arg.tunnelRemotePort) {\n\t\t\t\tkey = makeAddress(arg.tunnelRemoteHost, arg.tunnelRemotePort);\n\t\t\t}\n\t\t\tif (key) {\n\t\t\t\tconst model = accessor.get(IRemoteExplorerService).tunnelModel;\n\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\tconst externalOpenerService = accessor.get(\n\t\t\t\t\tIExternalUriOpenerService,\n\t\t\t\t);\n\t\t\t\treturn run(model, openerService, externalOpenerService, key);\n\t\t\t}\n\t\t};\n\t}\n\n\texport async function run(\n\t\tmodel: TunnelModel,\n\t\topenerService: IOpenerService,\n\t\texternalOpenerService: IExternalUriOpenerService,\n\t\tkey: string,\n\t) {\n\t\tconst tunnel = model.forwarded.get(key) || model.detected.get(key);\n\t\tif (tunnel) {\n\t\t\tconst remoteHost = tunnel.remoteHost.includes(\":\")\n\t\t\t\t? `[${tunnel.remoteHost}]`\n\t\t\t\t: tunnel.remoteHost;\n\t\t\tconst sourceUri = URI.parse(\n\t\t\t\t`http://${remoteHost}:${tunnel.remotePort}`,\n\t\t\t);\n\t\t\tconst opener = await externalOpenerService.getOpener(\n\t\t\t\ttunnel.localUri,\n\t\t\t\t{ sourceUri },\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t\tif (opener) {\n\t\t\t\treturn opener.openExternalUri(\n\t\t\t\t\ttunnel.localUri,\n\t\t\t\t\t{ sourceUri },\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn openerService.open(tunnel.localUri);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nnamespace OpenPortInBrowserCommandPaletteAction {\n\texport const ID = \"remote.tunnel.openCommandPalette\";\n\texport const LABEL = nls.localize(\n\t\t\"remote.tunnel.openCommandPalette\",\n\t\t\"Open Port in Browser\",\n\t);\n\n\tinterface QuickPickTunnel extends IQuickPickItem {\n\t\ttunnel?: TunnelItem;\n\t}\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tconst model = remoteExplorerService.tunnelModel;\n\t\t\tconst quickPickService = accessor.get(IQuickInputService);\n\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst options: QuickPickTunnel[] = [\n\t\t\t\t...model.forwarded,\n\t\t\t\t...model.detected,\n\t\t\t].map((value) => {\n\t\t\t\tconst tunnelItem = TunnelItem.createFromTunnel(\n\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\ttunnelService,\n\t\t\t\t\tvalue[1],\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tlabel: tunnelItem.label,\n\t\t\t\t\tdescription: tunnelItem.processDescription,\n\t\t\t\t\ttunnel: tunnelItem,\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (options.length === 0) {\n\t\t\t\toptions.push({\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"remote.tunnel.openCommandPaletteNone\",\n\t\t\t\t\t\t\"No ports currently forwarded. Open the Ports view to get started.\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toptions.push({\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"remote.tunnel.openCommandPaletteView\",\n\t\t\t\t\t\t\"Open the Ports view...\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst picked = await quickPickService.pick<QuickPickTunnel>(\n\t\t\t\toptions,\n\t\t\t\t{\n\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t\"remote.tunnel.openCommandPalettePick\",\n\t\t\t\t\t\t\"Choose the port to open\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (picked && picked.tunnel) {\n\t\t\t\treturn OpenPortInBrowserAction.run(\n\t\t\t\t\tmodel,\n\t\t\t\t\topenerService,\n\t\t\t\t\tmakeAddress(\n\t\t\t\t\t\tpicked.tunnel.remoteHost,\n\t\t\t\t\t\tpicked.tunnel.remotePort,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else if (picked) {\n\t\t\t\treturn commandService.executeCommand(`${TUNNEL_VIEW_ID}.focus`);\n\t\t\t}\n\t\t};\n\t}\n}\n\nnamespace CopyAddressAction {\n\texport const INLINE_ID = \"remote.tunnel.copyAddressInline\";\n\texport const COMMANDPALETTE_ID = \"remote.tunnel.copyAddressCommandPalette\";\n\texport const INLINE_LABEL = nls.localize(\n\t\t\"remote.tunnel.copyAddressInline\",\n\t\t\"Copy Local Address\",\n\t);\n\texport const COMMANDPALETTE_LABEL = nls.localize(\n\t\t\"remote.tunnel.copyAddressCommandPalette\",\n\t\t\"Copy Forwarded Port Address\",\n\t);\n\n\tasync function copyAddress(\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\tclipboardService: IClipboardService,\n\t\ttunnelItem: { remoteHost: string; remotePort: number },\n\t) {\n\t\tconst address = remoteExplorerService.tunnelModel.address(\n\t\t\ttunnelItem.remoteHost,\n\t\t\ttunnelItem.remotePort,\n\t\t);\n\t\tif (address) {\n\t\t\tawait clipboardService.writeText(address.toString());\n\t\t}\n\t}\n\n\texport function inlineHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tlet tunnelItem: ITunnelItem | Tunnel | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\ttunnelItem = arg;\n\t\t\t} else {\n\t\t\t\tconst context = accessor\n\t\t\t\t\t.get(IContextKeyService)\n\t\t\t\t\t.getContextKeyValue<string | undefined>(\n\t\t\t\t\t\tTunnelViewSelectionKeyName,\n\t\t\t\t\t);\n\t\t\t\ttunnelItem = context\n\t\t\t\t\t? remoteExplorerService.tunnelModel.forwarded.get(context)\n\t\t\t\t\t: undefined;\n\t\t\t}\n\t\t\tif (tunnelItem) {\n\t\t\t\treturn copyAddress(\n\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\taccessor.get(IClipboardService),\n\t\t\t\t\ttunnelItem,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n\n\texport function commandPaletteHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t\tconst tunnels = Array.from(\n\t\t\t\tremoteExplorerService.tunnelModel.forwarded.values(),\n\t\t\t).concat(\n\t\t\t\tArray.from(remoteExplorerService.tunnelModel.detected.values()),\n\t\t\t);\n\t\t\tconst result = await quickInputService.pick(\n\t\t\t\tmakeTunnelPicks(tunnels, remoteExplorerService, tunnelService),\n\t\t\t\t{\n\t\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t\t\"remote.tunnel.copyAddressPlaceholdter\",\n\t\t\t\t\t\t\"Choose a forwarded port\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (result && result.tunnel) {\n\t\t\t\tawait copyAddress(\n\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\tclipboardService,\n\t\t\t\t\tresult.tunnel,\n\t\t\t\t);\n\t\t\t} else if (result) {\n\t\t\t\tawait commandService.executeCommand(\n\t\t\t\t\tForwardPortAction.COMMANDPALETTE_ID,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n}\n\nnamespace ChangeLocalPortAction {\n\texport const ID = \"remote.tunnel.changeLocalPort\";\n\texport const LABEL = nls.localize(\n\t\t\"remote.tunnel.changeLocalPort\",\n\t\t\"Change Local Address Port\",\n\t);\n\n\tfunction validateInput(\n\t\ttunnelService: ITunnelService,\n\t\tvalue: string,\n\t\tcanElevate: boolean,\n\t): { content: string; severity: Severity } | null {\n\t\tif (!value.match(/^[0-9]+$/)) {\n\t\t\treturn {\n\t\t\t\tcontent: nls.localize(\n\t\t\t\t\t\"remote.tunnelsView.portShouldBeNumber\",\n\t\t\t\t\t\"Local port should be a number.\",\n\t\t\t\t),\n\t\t\t\tseverity: Severity.Error,\n\t\t\t};\n\t\t} else if (Number(value) >= maxPortNumber) {\n\t\t\treturn {\n\t\t\t\tcontent: invalidPortNumberString,\n\t\t\t\tseverity: Severity.Error,\n\t\t\t};\n\t\t} else if (\n\t\t\tcanElevate &&\n\t\t\ttunnelService.isPortPrivileged(Number(value))\n\t\t) {\n\t\t\treturn { content: requiresSudoString, severity: Severity.Info };\n\t\t}\n\t\treturn null;\n\t}\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tlet tunnelContext: ITunnelItem | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\ttunnelContext = arg;\n\t\t\t} else {\n\t\t\t\tconst context = accessor\n\t\t\t\t\t.get(IContextKeyService)\n\t\t\t\t\t.getContextKeyValue<string | undefined>(\n\t\t\t\t\t\tTunnelViewSelectionKeyName,\n\t\t\t\t\t);\n\t\t\t\tconst tunnel = context\n\t\t\t\t\t? remoteExplorerService.tunnelModel.forwarded.get(context)\n\t\t\t\t\t: undefined;\n\t\t\t\tif (tunnel) {\n\t\t\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\t\t\ttunnelContext = TunnelItem.createFromTunnel(\n\t\t\t\t\t\tremoteExplorerService,\n\t\t\t\t\t\ttunnelService,\n\t\t\t\t\t\ttunnel,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tunnelContext) {\n\t\t\t\tconst tunnelItem: ITunnelItem = tunnelContext;\n\t\t\t\tremoteExplorerService.setEditable(\n\t\t\t\t\ttunnelItem,\n\t\t\t\t\tTunnelEditId.LocalPort,\n\t\t\t\t\t{\n\t\t\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\t\t\tremoteExplorerService.setEditable(\n\t\t\t\t\t\t\t\ttunnelItem,\n\t\t\t\t\t\t\t\tTunnelEditId.LocalPort,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (success) {\n\t\t\t\t\t\t\t\tawait remoteExplorerService.close(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thost: tunnelItem.remoteHost,\n\t\t\t\t\t\t\t\t\t\tport: tunnelItem.remotePort,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tTunnelCloseReason.Other,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst numberValue = Number(value);\n\t\t\t\t\t\t\t\tconst newForward =\n\t\t\t\t\t\t\t\t\tawait remoteExplorerService.forward({\n\t\t\t\t\t\t\t\t\t\tremote: {\n\t\t\t\t\t\t\t\t\t\t\thost: tunnelItem.remoteHost,\n\t\t\t\t\t\t\t\t\t\t\tport: tunnelItem.remotePort,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tlocal: numberValue,\n\t\t\t\t\t\t\t\t\t\tname: tunnelItem.name,\n\t\t\t\t\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t\t\t\t\t\tsource: tunnelItem.source,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tnewForward &&\n\t\t\t\t\t\t\t\t\ttypeof newForward !== \"string\" &&\n\t\t\t\t\t\t\t\t\tnewForward.tunnelLocalPort !== numberValue\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tnotificationService.warn(\n\t\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"remote.tunnel.changeLocalPortNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"The local port {0} is not available. Port number {1} has been used instead\",\n\t\t\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\t\t\tnewForward.tunnelLocalPort ??\n\t\t\t\t\t\t\t\t\t\t\t\tnewForward.localAddress,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalidationMessage: (value) =>\n\t\t\t\t\t\t\tvalidateInput(\n\t\t\t\t\t\t\t\ttunnelService,\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\ttunnelService.canElevate,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\tplaceholder: nls.localize(\n\t\t\t\t\t\t\t\"remote.tunnelsView.changePort\",\n\t\t\t\t\t\t\t\"New local port\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n}\n\nnamespace ChangeTunnelPrivacyAction {\n\texport function handler(privacyId: string): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\tconst remoteExplorerService = accessor.get(\n\t\t\t\t\tIRemoteExplorerService,\n\t\t\t\t);\n\t\t\t\tawait remoteExplorerService.close(\n\t\t\t\t\t{ host: arg.remoteHost, port: arg.remotePort },\n\t\t\t\t\tTunnelCloseReason.Other,\n\t\t\t\t);\n\t\t\t\treturn remoteExplorerService.forward({\n\t\t\t\t\tremote: { host: arg.remoteHost, port: arg.remotePort },\n\t\t\t\t\tlocal: arg.localPort,\n\t\t\t\t\tname: arg.name,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tprivacy: privacyId,\n\t\t\t\t\tsource: arg.source,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t};\n\t}\n}\n\nnamespace SetTunnelProtocolAction {\n\texport const ID_HTTP = \"remote.tunnel.setProtocolHttp\";\n\texport const ID_HTTPS = \"remote.tunnel.setProtocolHttps\";\n\texport const LABEL_HTTP = nls.localize(\n\t\t\"remote.tunnel.protocolHttp\",\n\t\t\"HTTP\",\n\t);\n\texport const LABEL_HTTPS = nls.localize(\n\t\t\"remote.tunnel.protocolHttps\",\n\t\t\"HTTPS\",\n\t);\n\n\tasync function handler(\n\t\targ: any,\n\t\tprotocol: TunnelProtocol,\n\t\tremoteExplorerService: IRemoteExplorerService,\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tif (isITunnelItem(arg)) {\n\t\t\tconst attributes: Partial<Attributes> = {\n\t\t\t\tprotocol,\n\t\t\t};\n\t\t\tconst target = environmentService.remoteAuthority\n\t\t\t\t? ConfigurationTarget.USER_REMOTE\n\t\t\t\t: ConfigurationTarget.USER_LOCAL;\n\t\t\treturn remoteExplorerService.tunnelModel.configPortsAttributes.addAttributes(\n\t\t\t\targ.remotePort,\n\t\t\t\tattributes,\n\t\t\t\ttarget,\n\t\t\t);\n\t\t}\n\t}\n\n\texport function handlerHttp(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\treturn handler(\n\t\t\t\targ,\n\t\t\t\tTunnelProtocol.Http,\n\t\t\t\taccessor.get(IRemoteExplorerService),\n\t\t\t\taccessor.get(IWorkbenchEnvironmentService),\n\t\t\t);\n\t\t};\n\t}\n\n\texport function handlerHttps(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\treturn handler(\n\t\t\t\targ,\n\t\t\t\tTunnelProtocol.Https,\n\t\t\t\taccessor.get(IRemoteExplorerService),\n\t\t\t\taccessor.get(IWorkbenchEnvironmentService),\n\t\t\t);\n\t\t};\n\t}\n}\n\nconst tunnelViewCommandsWeightBonus = 10; // give our commands a little bit more weight over other default list/tree commands\n\nconst isForwardedExpr = TunnelTypeContextKey.isEqualTo(TunnelType.Forwarded);\nconst isForwardedOrDetectedExpr = ContextKeyExpr.or(\n\tisForwardedExpr,\n\tTunnelTypeContextKey.isEqualTo(TunnelType.Detected),\n);\nconst isNotMultiSelectionExpr =\n\tTunnelViewMultiSelectionContextKey.isEqualTo(undefined);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: LabelTunnelAction.ID,\n\tweight: KeybindingWeight.WorkbenchContrib + tunnelViewCommandsWeightBonus,\n\twhen: ContextKeyExpr.and(\n\t\tTunnelViewFocusContextKey,\n\t\tisForwardedExpr,\n\t\tisNotMultiSelectionExpr,\n\t),\n\tprimary: KeyCode.F2,\n\tmac: {\n\t\tprimary: KeyCode.Enter,\n\t},\n\thandler: LabelTunnelAction.handler(),\n});\nCommandsRegistry.registerCommand(\n\tForwardPortAction.INLINE_ID,\n\tForwardPortAction.inlineHandler(),\n);\nCommandsRegistry.registerCommand(\n\tForwardPortAction.COMMANDPALETTE_ID,\n\tForwardPortAction.commandPaletteHandler(),\n);\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: ClosePortAction.INLINE_ID,\n\tweight: KeybindingWeight.WorkbenchContrib + tunnelViewCommandsWeightBonus,\n\twhen: ContextKeyExpr.and(\n\t\tTunnelCloseableContextKey,\n\t\tTunnelViewFocusContextKey,\n\t),\n\tprimary: KeyCode.Delete,\n\tmac: {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\tsecondary: [KeyCode.Delete],\n\t},\n\thandler: ClosePortAction.inlineHandler(),\n});\n\nCommandsRegistry.registerCommand(\n\tClosePortAction.COMMANDPALETTE_ID,\n\tClosePortAction.commandPaletteHandler(),\n);\nCommandsRegistry.registerCommand(\n\tOpenPortInBrowserAction.ID,\n\tOpenPortInBrowserAction.handler(),\n);\nCommandsRegistry.registerCommand(\n\tOpenPortInPreviewAction.ID,\n\tOpenPortInPreviewAction.handler(),\n);\nCommandsRegistry.registerCommand(\n\tOpenPortInBrowserCommandPaletteAction.ID,\n\tOpenPortInBrowserCommandPaletteAction.handler(),\n);\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: CopyAddressAction.INLINE_ID,\n\tweight: KeybindingWeight.WorkbenchContrib + tunnelViewCommandsWeightBonus,\n\twhen: ContextKeyExpr.and(\n\t\tTunnelViewFocusContextKey,\n\t\tisForwardedOrDetectedExpr,\n\t\tisNotMultiSelectionExpr,\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\thandler: CopyAddressAction.inlineHandler(),\n});\nCommandsRegistry.registerCommand(\n\tCopyAddressAction.COMMANDPALETTE_ID,\n\tCopyAddressAction.commandPaletteHandler(),\n);\nCommandsRegistry.registerCommand(\n\tChangeLocalPortAction.ID,\n\tChangeLocalPortAction.handler(),\n);\nCommandsRegistry.registerCommand(\n\tSetTunnelProtocolAction.ID_HTTP,\n\tSetTunnelProtocolAction.handlerHttp(),\n);\nCommandsRegistry.registerCommand(\n\tSetTunnelProtocolAction.ID_HTTPS,\n\tSetTunnelProtocolAction.handlerHttps(),\n);\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ClosePortAction.COMMANDPALETTE_ID,\n\t\ttitle: ClosePortAction.LABEL,\n\t},\n\twhen: forwardedPortsViewEnabled,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: ForwardPortAction.COMMANDPALETTE_ID,\n\t\ttitle: ForwardPortAction.LABEL,\n\t},\n\twhen: forwardedPortsViewEnabled,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: CopyAddressAction.COMMANDPALETTE_ID,\n\t\ttitle: CopyAddressAction.COMMANDPALETTE_LABEL,\n\t},\n\twhen: forwardedPortsViewEnabled,\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OpenPortInBrowserCommandPaletteAction.ID,\n\t\ttitle: OpenPortInBrowserCommandPaletteAction.LABEL,\n\t},\n\twhen: forwardedPortsViewEnabled,\n});\n\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"._open\",\n\torder: 0,\n\tcommand: {\n\t\tid: OpenPortInBrowserAction.ID,\n\t\ttitle: OpenPortInBrowserAction.LABEL,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tisForwardedOrDetectedExpr,\n\t\tisNotMultiSelectionExpr,\n\t),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"._open\",\n\torder: 1,\n\tcommand: {\n\t\tid: OpenPortInPreviewAction.ID,\n\t\ttitle: OpenPortInPreviewAction.LABEL,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tisForwardedOrDetectedExpr,\n\t\tisNotMultiSelectionExpr,\n\t),\n});\n// The group 0_manage is used by extensions, so try not to change it\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"0_manage\",\n\torder: 1,\n\tcommand: {\n\t\tid: LabelTunnelAction.ID,\n\t\ttitle: LabelTunnelAction.LABEL,\n\t\ticon: labelPortIcon,\n\t},\n\twhen: ContextKeyExpr.and(isForwardedExpr, isNotMultiSelectionExpr),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"2_localaddress\",\n\torder: 0,\n\tcommand: {\n\t\tid: CopyAddressAction.INLINE_ID,\n\t\ttitle: CopyAddressAction.INLINE_LABEL,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tisForwardedOrDetectedExpr,\n\t\tisNotMultiSelectionExpr,\n\t),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"2_localaddress\",\n\torder: 1,\n\tcommand: {\n\t\tid: ChangeLocalPortAction.ID,\n\t\ttitle: ChangeLocalPortAction.LABEL,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tisForwardedExpr,\n\t\tPortChangableContextKey,\n\t\tisNotMultiSelectionExpr,\n\t),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"2_localaddress\",\n\torder: 2,\n\tsubmenu: MenuId.TunnelPrivacy,\n\ttitle: nls.localize(\"tunnelContext.privacyMenu\", \"Port Visibility\"),\n\twhen: ContextKeyExpr.and(isForwardedExpr, TunnelPrivacyEnabledContextKey),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"2_localaddress\",\n\torder: 3,\n\tsubmenu: MenuId.TunnelProtocol,\n\ttitle: nls.localize(\"tunnelContext.protocolMenu\", \"Change Port Protocol\"),\n\twhen: ContextKeyExpr.and(\n\t\tisForwardedExpr,\n\t\tisNotMultiSelectionExpr,\n\t\tProtocolChangeableContextKey,\n\t),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"3_forward\",\n\torder: 0,\n\tcommand: {\n\t\tid: ClosePortAction.INLINE_ID,\n\t\ttitle: ClosePortAction.LABEL,\n\t},\n\twhen: TunnelCloseableContextKey,\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, {\n\tgroup: \"3_forward\",\n\torder: 1,\n\tcommand: {\n\t\tid: ForwardPortAction.INLINE_ID,\n\t\ttitle: ForwardPortAction.LABEL,\n\t},\n});\n\nMenuRegistry.appendMenuItem(MenuId.TunnelProtocol, {\n\torder: 0,\n\tcommand: {\n\t\tid: SetTunnelProtocolAction.ID_HTTP,\n\t\ttitle: SetTunnelProtocolAction.LABEL_HTTP,\n\t\ttoggled: TunnelProtocolContextKey.isEqualTo(TunnelProtocol.Http),\n\t},\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelProtocol, {\n\torder: 1,\n\tcommand: {\n\t\tid: SetTunnelProtocolAction.ID_HTTPS,\n\t\ttitle: SetTunnelProtocolAction.LABEL_HTTPS,\n\t\ttoggled: TunnelProtocolContextKey.isEqualTo(TunnelProtocol.Https),\n\t},\n});\n\nMenuRegistry.appendMenuItem(MenuId.TunnelPortInline, {\n\tgroup: \"0_manage\",\n\torder: 0,\n\tcommand: {\n\t\tid: ForwardPortAction.INLINE_ID,\n\t\ttitle: ForwardPortAction.TREEITEM_LABEL,\n\t\ticon: forwardPortIcon,\n\t},\n\twhen: TunnelTypeContextKey.isEqualTo(TunnelType.Candidate),\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelPortInline, {\n\tgroup: \"0_manage\",\n\torder: 4,\n\tcommand: {\n\t\tid: LabelTunnelAction.ID,\n\t\ttitle: LabelTunnelAction.LABEL,\n\t\ticon: labelPortIcon,\n\t},\n\twhen: isForwardedExpr,\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelPortInline, {\n\tgroup: \"0_manage\",\n\torder: 5,\n\tcommand: {\n\t\tid: ClosePortAction.INLINE_ID,\n\t\ttitle: ClosePortAction.LABEL,\n\t\ticon: stopForwardIcon,\n\t},\n\twhen: TunnelCloseableContextKey,\n});\n\nMenuRegistry.appendMenuItem(MenuId.TunnelLocalAddressInline, {\n\torder: -1,\n\tcommand: {\n\t\tid: CopyAddressAction.INLINE_ID,\n\t\ttitle: CopyAddressAction.INLINE_LABEL,\n\t\ticon: copyAddressIcon,\n\t},\n\twhen: isForwardedOrDetectedExpr,\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelLocalAddressInline, {\n\torder: 0,\n\tcommand: {\n\t\tid: OpenPortInBrowserAction.ID,\n\t\ttitle: OpenPortInBrowserAction.LABEL,\n\t\ticon: openBrowserIcon,\n\t},\n\twhen: isForwardedOrDetectedExpr,\n});\nMenuRegistry.appendMenuItem(MenuId.TunnelLocalAddressInline, {\n\torder: 1,\n\tcommand: {\n\t\tid: OpenPortInPreviewAction.ID,\n\t\ttitle: OpenPortInPreviewAction.LABEL,\n\t\ticon: openPreviewIcon,\n\t},\n\twhen: isForwardedOrDetectedExpr,\n});\n\nregisterColor(\n\t\"ports.iconRunningProcessForeground\",\n\tSTATUS_BAR_REMOTE_ITEM_BACKGROUND,\n\tnls.localize(\n\t\t\"portWithRunningProcess.foreground\",\n\t\t\"The color of the icon for a port that has an associated running process.\",\n\t),\n);\n"],
  "mappings": "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",
  "names": ["value", "LabelTunnelAction", "ForwardPortAction", "ClosePortAction", "OpenPortInBrowserAction", "OpenPortInPreviewAction", "OpenPortInBrowserCommandPaletteAction", "CopyAddressAction", "ChangeLocalPortAction", "tunnelService", "ChangeTunnelPrivacyAction", "SetTunnelProtocolAction"]
}
