{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remote/browser/tunnelView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/tunnelView.css';\nimport * as nls from '../../../../nls.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { IViewDescriptor, IEditableData, IViewDescriptorService } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { IContextMenuService, IContextViewService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IContextKeyService, IContextKey, RawContextKey, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IQuickInputService, IQuickPickItem, QuickPickInput } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ICommandService, ICommandHandler, CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { Disposable, IDisposable, toDisposable, dispose, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { IconLabel } from '../../../../base/browser/ui/iconLabel/iconLabel.js';\nimport { ActionRunner, IAction } from '../../../../base/common/actions.js';\nimport { IMenuService, MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { ILocalizedString } from '../../../../platform/action/common/action.js';\nimport { createAndFillInActionBarActions, createActionViewItem } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { IRemoteExplorerService, TunnelType, ITunnelItem, TUNNEL_VIEW_ID, TunnelEditId } from '../../../services/remote/common/remoteExplorerService.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { InputBox, MessageType } from '../../../../base/browser/ui/inputbox/inputBox.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { ViewPane, IViewPaneOptions } from '../../../browser/parts/views/viewPane.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isAllInterfaces, isLocalhost, ITunnelService, RemoteTunnel, TunnelPrivacyId, TunnelProtocol } from '../../../../platform/tunnel/common/tunnel.js';\nimport { TunnelPrivacy } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { ActionViewItem } from '../../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { copyAddressIcon, forwardedPortWithoutProcessIcon, forwardedPortWithProcessIcon, forwardPortIcon, labelPortIcon, openBrowserIcon, openPreviewIcon, portsViewIcon, privatePortIcon, stopForwardIcon } from './remoteIcons.js';\nimport { IExternalUriOpenerService } from '../../externalUriOpener/common/externalUriOpenerService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport { ITableColumn, ITableContextMenuEvent, ITableEvent, ITableMouseEvent, ITableRenderer, ITableVirtualDelegate } from '../../../../base/browser/ui/table/table.js';\nimport { WorkbenchTable } from '../../../../platform/list/browser/listService.js';\nimport { Button } from '../../../../base/browser/ui/button/button.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { IHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegate.js';\nimport { STATUS_BAR_REMOTE_ITEM_BACKGROUND } from '../../../common/theme.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { defaultButtonStyles, defaultInputBoxStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { Attributes, CandidatePort, Tunnel, TunnelCloseReason, TunnelModel, TunnelSource, forwardedPortsViewEnabled, makeAddress, mapHasAddressLocalhostOrAllInterfaces, parseAddress } from '../../../services/remote/common/tunnelModel.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\n\nexport const openPreviewEnabledContext = new RawContextKey<boolean>('openPreviewEnabled', false);\n\nclass TunnelTreeVirtualDelegate implements ITableVirtualDelegate<ITunnelItem> {\n\n\treadonly headerRowHeight: number = 22;\n\n\tconstructor(private readonly remoteExplorerService: IRemoteExplorerService) { }\n\n\tgetHeight(row: ITunnelItem): number {\n\t\treturn (row.tunnelType === TunnelType.Add && !this.remoteExplorerService.getEditableData(undefined)) ? 30 : 22;\n\t}\n}\n\ninterface ITunnelViewModel {\n\treadonly onForwardedPortsChanged: Event<void>;\n\treadonly all: TunnelItem[];\n\treadonly input: TunnelItem;\n\tisEmpty(): boolean;\n}\n\nexport class TunnelViewModel implements ITunnelViewModel {\n\n\treadonly onForwardedPortsChanged: Event<void>;\n\tprivate model: TunnelModel;\n\tprivate _candidates: Map<string, CandidatePort> = new Map();\n\n\treadonly input = {\n\t\tlabel: nls.localize('remote.tunnelsView.addPort', \"Add Port\"),\n\t\ticon: undefined,\n\t\ttunnelType: TunnelType.Add,\n\t\thasRunningProcess: false,\n\t\tremoteHost: '',\n\t\tremotePort: 0,\n\t\tprocessDescription: '',\n\t\ttooltipPostfix: '',\n\t\ticonTooltip: '',\n\t\tportTooltip: '',\n\t\tprocessTooltip: '',\n\t\toriginTooltip: '',\n\t\tprivacyTooltip: '',\n\t\tsource: { source: TunnelSource.User, description: '' },\n\t\tprotocol: TunnelProtocol.Http,\n\t\tprivacy: {\n\t\t\tid: TunnelPrivacyId.Private,\n\t\t\tthemeIcon: privatePortIcon.id,\n\t\t\tlabel: nls.localize('tunnelPrivacy.private', \"Private\")\n\t\t},\n\t\tstrip: () => undefined\n\t};\n\n\tconstructor(\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService\n\t) {\n\t\tthis.model = remoteExplorerService.tunnelModel;\n\t\tthis.onForwardedPortsChanged = Event.any(this.model.onForwardPort, this.model.onClosePort, this.model.onPortName, this.model.onCandidatesChanged);\n\t}\n\n\tget all(): TunnelItem[] {\n\t\tconst result: TunnelItem[] = [];\n\t\tthis._candidates = new Map();\n\t\tthis.model.candidates.forEach(candidate => {\n\t\t\tthis._candidates.set(makeAddress(candidate.host, candidate.port), candidate);\n\t\t});\n\t\tif ((this.model.forwarded.size > 0) || this.remoteExplorerService.getEditableData(undefined)) {\n\t\t\tresult.push(...this.forwarded);\n\t\t}\n\t\tif (this.model.detected.size > 0) {\n\t\t\tresult.push(...this.detected);\n\t\t}\n\n\t\tresult.push(this.input);\n\t\treturn result;\n\t}\n\n\tprivate addProcessInfoFromCandidate(tunnelItem: ITunnelItem) {\n\t\tconst key = makeAddress(tunnelItem.remoteHost, tunnelItem.remotePort);\n\t\tif (this._candidates.has(key)) {\n\t\t\ttunnelItem.processDescription = this._candidates.get(key)!.detail;\n\t\t}\n\t}\n\n\tprivate get forwarded(): TunnelItem[] {\n\t\tconst forwarded = Array.from(this.model.forwarded.values()).map(tunnel => {\n\t\t\tconst tunnelItem = TunnelItem.createFromTunnel(this.remoteExplorerService, this.tunnelService, tunnel);\n\t\t\tthis.addProcessInfoFromCandidate(tunnelItem);\n\t\t\treturn tunnelItem;\n\t\t}).sort((a: TunnelItem, b: TunnelItem) => {\n\t\t\tif (a.remotePort === b.remotePort) {\n\t\t\t\treturn a.remoteHost < b.remoteHost ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn a.remotePort < b.remotePort ? -1 : 1;\n\t\t\t}\n\t\t});\n\t\treturn forwarded;\n\t}\n\n\tprivate get detected(): TunnelItem[] {\n\t\treturn Array.from(this.model.detected.values()).map(tunnel => {\n\t\t\tconst tunnelItem = TunnelItem.createFromTunnel(this.remoteExplorerService, this.tunnelService, tunnel, TunnelType.Detected, false);\n\t\t\tthis.addProcessInfoFromCandidate(tunnelItem);\n\t\t\treturn tunnelItem;\n\t\t});\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn (this.detected.length === 0) &&\n\t\t\t((this.forwarded.length === 0) || (this.forwarded.length === 1 &&\n\t\t\t\t(this.forwarded[0].tunnelType === TunnelType.Add) && !this.remoteExplorerService.getEditableData(undefined)));\n\t}\n}\n\nfunction emptyCell(item: ITunnelItem): ActionBarCell {\n\treturn { label: '', tunnel: item, editId: TunnelEditId.None, tooltip: '' };\n}\n\nclass IconColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = '';\n\treadonly tooltip: string = '';\n\treadonly weight: number = 1;\n\treadonly minimumWidth = 40;\n\treadonly maximumWidth = 40;\n\treadonly templateId: string = 'actionbar';\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst icon = row.processDescription ? forwardedPortWithProcessIcon : forwardedPortWithoutProcessIcon;\n\t\tlet tooltip: string = '';\n\t\tif (row instanceof TunnelItem) {\n\t\t\ttooltip = `${row.iconTooltip} ${row.tooltipPostfix}`;\n\t\t}\n\t\treturn {\n\t\t\tlabel: '', icon, tunnel: row, editId: TunnelEditId.None, tooltip\n\t\t};\n\t}\n}\n\nclass PortColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize('tunnel.portColumn.label', \"Port\");\n\treadonly tooltip: string = nls.localize('tunnel.portColumn.tooltip', \"The label and remote port number of the forwarded port.\");\n\treadonly weight: number = 1;\n\treadonly templateId: string = 'actionbar';\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tconst isAdd = row.tunnelType === TunnelType.Add;\n\t\tconst label = row.label;\n\t\tlet tooltip: string = '';\n\t\tif (row instanceof TunnelItem && !isAdd) {\n\t\t\ttooltip = `${row.portTooltip} ${row.tooltipPostfix}`;\n\t\t} else {\n\t\t\ttooltip = label;\n\t\t}\n\t\treturn {\n\t\t\tlabel, tunnel: row, menuId: MenuId.TunnelPortInline,\n\t\t\teditId: row.tunnelType === TunnelType.Add ? TunnelEditId.New : TunnelEditId.Label, tooltip\n\t\t};\n\t}\n}\n\nclass LocalAddressColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize('tunnel.addressColumn.label', \"Forwarded Address\");\n\treadonly tooltip: string = nls.localize('tunnel.addressColumn.tooltip', \"The address that the forwarded port is available at.\");\n\treadonly weight: number = 1;\n\treadonly templateId: string = 'actionbar';\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.localAddress ?? '';\n\t\tlet tooltip: string = label;\n\t\tif (row instanceof TunnelItem) {\n\t\t\ttooltip = row.tooltipPostfix;\n\t\t}\n\t\treturn {\n\t\t\tlabel,\n\t\t\tmenuId: MenuId.TunnelLocalAddressInline,\n\t\t\ttunnel: row,\n\t\t\teditId: TunnelEditId.LocalPort,\n\t\t\ttooltip,\n\t\t\tmarkdownTooltip: label ? LocalAddressColumn.getHoverText(label) : undefined\n\t\t};\n\t}\n\n\tprivate static getHoverText(localAddress: string) {\n\t\treturn function (configurationService: IConfigurationService) {\n\t\t\tconst editorConf = configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\n\t\t\tlet clickLabel = '';\n\t\t\tif (editorConf.multiCursorModifier === 'ctrlCmd') {\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tclickLabel = nls.localize('portsLink.followLinkAlt.mac', \"option + click\");\n\t\t\t\t} else {\n\t\t\t\t\tclickLabel = nls.localize('portsLink.followLinkAlt', \"alt + click\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tclickLabel = nls.localize('portsLink.followLinkCmd', \"cmd + click\");\n\t\t\t\t} else {\n\t\t\t\t\tclickLabel = nls.localize('portsLink.followLinkCtrl', \"ctrl + click\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst markdown = new MarkdownString('', true);\n\t\t\tconst uri = localAddress.startsWith('http') ? localAddress : `http://${localAddress}`;\n\t\t\treturn markdown.appendLink(uri, 'Follow link').appendMarkdown(` (${clickLabel})`);\n\t\t};\n\t}\n}\n\nclass RunningProcessColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize('tunnel.processColumn.label', \"Running Process\");\n\treadonly tooltip: string = nls.localize('tunnel.processColumn.tooltip', \"The command line of the process that is using the port.\");\n\treadonly weight: number = 2;\n\treadonly templateId: string = 'actionbar';\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.processDescription ?? '';\n\t\treturn { label, tunnel: row, editId: TunnelEditId.None, tooltip: row instanceof TunnelItem ? row.processTooltip : '' };\n\t}\n}\n\nclass OriginColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize('tunnel.originColumn.label', \"Origin\");\n\treadonly tooltip: string = nls.localize('tunnel.originColumn.tooltip', \"The source that a forwarded port originates from. Can be an extension, user forwarded, statically forwarded, or automatically forwarded.\");\n\treadonly weight: number = 1;\n\treadonly templateId: string = 'actionbar';\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.source.description;\n\t\tconst tooltip = `${row instanceof TunnelItem ? row.originTooltip : ''}. ${row instanceof TunnelItem ? row.tooltipPostfix : ''}`;\n\t\treturn { label, menuId: MenuId.TunnelOriginInline, tunnel: row, editId: TunnelEditId.None, tooltip };\n\t}\n}\n\nclass PrivacyColumn implements ITableColumn<ITunnelItem, ActionBarCell> {\n\treadonly label: string = nls.localize('tunnel.privacyColumn.label', \"Visibility\");\n\treadonly tooltip: string = nls.localize('tunnel.privacyColumn.tooltip', \"The availability of the forwarded port.\");\n\treadonly weight: number = 1;\n\treadonly templateId: string = 'actionbar';\n\tproject(row: ITunnelItem): ActionBarCell {\n\t\tif (row.tunnelType === TunnelType.Add) {\n\t\t\treturn emptyCell(row);\n\t\t}\n\n\t\tconst label = row.privacy?.label;\n\t\tlet tooltip: string = '';\n\t\tif (row instanceof TunnelItem) {\n\t\t\ttooltip = `${row.privacy.label} ${row.tooltipPostfix}`;\n\t\t}\n\t\treturn { label, tunnel: row, icon: { id: row.privacy.themeIcon }, editId: TunnelEditId.None, tooltip };\n\t}\n}\n\ninterface IActionBarTemplateData {\n\telementDisposable: IDisposable;\n\tcontainer: HTMLElement;\n\tlabel: IconLabel;\n\tbutton?: Button;\n\ticon: HTMLElement;\n\tactionBar: ActionBar;\n}\n\ninterface ActionBarCell {\n\tlabel: string;\n\ticon?: ThemeIcon;\n\ttooltip: string;\n\tmarkdownTooltip?: (configurationService: IConfigurationService) => IMarkdownString;\n\tmenuId?: MenuId;\n\ttunnel: ITunnelItem;\n\teditId: TunnelEditId;\n}\n\nclass ActionBarRenderer extends Disposable implements ITableRenderer<ActionBarCell, IActionBarTemplateData> {\n\treadonly templateId = 'actionbar';\n\tprivate inputDone?: (success: boolean, finishEditing: boolean) => void;\n\tprivate _actionRunner: ActionRunner | undefined;\n\tprivate readonly _hoverDelegate: IHoverDelegate;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._hoverDelegate = getDefaultHoverDelegate('mouse');\n\t}\n\n\tset actionRunner(actionRunner: ActionRunner) {\n\t\tthis._actionRunner = actionRunner;\n\t}\n\n\trenderTemplate(container: HTMLElement): IActionBarTemplateData {\n\t\tconst cell = dom.append(container, dom.$('.ports-view-actionbar-cell'));\n\t\tconst icon = dom.append(cell, dom.$('.ports-view-actionbar-cell-icon'));\n\t\tconst label = new IconLabel(cell,\n\t\t\t{\n\t\t\t\tsupportHighlights: true,\n\t\t\t\thoverDelegate: this._hoverDelegate\n\t\t\t});\n\t\tconst actionsContainer = dom.append(cell, dom.$('.actions'));\n\t\tconst actionBar = new ActionBar(actionsContainer, {\n\t\t\tactionViewItemProvider: createActionViewItem.bind(undefined, this.instantiationService),\n\t\t\thoverDelegate: this._hoverDelegate\n\t\t});\n\t\treturn { label, icon, actionBar, container: cell, elementDisposable: Disposable.None };\n\t}\n\n\trenderElement(element: ActionBarCell, index: number, templateData: IActionBarTemplateData): void {\n\t\t// reset\n\t\ttemplateData.actionBar.clear();\n\t\ttemplateData.icon.className = 'ports-view-actionbar-cell-icon';\n\t\ttemplateData.icon.style.display = 'none';\n\t\ttemplateData.label.setLabel('');\n\t\ttemplateData.label.element.style.display = 'none';\n\t\ttemplateData.container.style.height = '22px';\n\t\tif (templateData.button) {\n\t\t\ttemplateData.button.element.style.display = 'none';\n\t\t\ttemplateData.button.dispose();\n\t\t}\n\t\ttemplateData.container.style.paddingLeft = '0px';\n\t\ttemplateData.elementDisposable.dispose();\n\n\t\tlet editableData: IEditableData | undefined;\n\t\tif (element.editId === TunnelEditId.New && (editableData = this.remoteExplorerService.getEditableData(undefined))) {\n\t\t\tthis.renderInputBox(templateData.container, editableData);\n\t\t} else {\n\t\t\teditableData = this.remoteExplorerService.getEditableData(element.tunnel, element.editId);\n\t\t\tif (editableData) {\n\t\t\t\tthis.renderInputBox(templateData.container, editableData);\n\t\t\t} else if ((element.tunnel.tunnelType === TunnelType.Add) && (element.menuId === MenuId.TunnelPortInline)) {\n\t\t\t\tthis.renderButton(element, templateData);\n\t\t\t} else {\n\t\t\t\tthis.renderActionBarItem(element, templateData);\n\t\t\t}\n\t\t}\n\t}\n\n\trenderButton(element: ActionBarCell, templateData: IActionBarTemplateData): void {\n\t\ttemplateData.container.style.paddingLeft = '7px';\n\t\ttemplateData.container.style.height = '28px';\n\t\ttemplateData.button = this._register(new Button(templateData.container, defaultButtonStyles));\n\t\ttemplateData.button.label = element.label;\n\t\ttemplateData.button.element.title = element.tooltip;\n\t\tthis._register(templateData.button.onDidClick(() => {\n\t\t\tthis.commandService.executeCommand(ForwardPortAction.INLINE_ID);\n\t\t}));\n\t}\n\n\tprivate tunnelContext(tunnel: ITunnelItem): ITunnelItem {\n\t\tlet context: ITunnelItem | undefined;\n\t\tif (tunnel instanceof TunnelItem) {\n\t\t\tcontext = tunnel.strip();\n\t\t}\n\t\tif (!context) {\n\t\t\tcontext = {\n\t\t\t\ttunnelType: tunnel.tunnelType,\n\t\t\t\tremoteHost: tunnel.remoteHost,\n\t\t\t\tremotePort: tunnel.remotePort,\n\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\tprotocol: tunnel.protocol,\n\t\t\t\tlocalUri: tunnel.localUri,\n\t\t\t\tlocalPort: tunnel.localPort,\n\t\t\t\tname: tunnel.name,\n\t\t\t\tcloseable: tunnel.closeable,\n\t\t\t\tsource: tunnel.source,\n\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\tprocessDescription: tunnel.processDescription,\n\t\t\t\tlabel: tunnel.label\n\t\t\t};\n\t\t}\n\t\treturn context;\n\t}\n\n\trenderActionBarItem(element: ActionBarCell, templateData: IActionBarTemplateData): void {\n\t\ttemplateData.label.element.style.display = 'flex';\n\t\ttemplateData.label.setLabel(element.label, undefined,\n\t\t\t{\n\t\t\t\ttitle: element.markdownTooltip ?\n\t\t\t\t\t{ markdown: element.markdownTooltip(this.configurationService), markdownNotSupportedFallback: element.tooltip }\n\t\t\t\t\t: element.tooltip,\n\t\t\t\textraClasses: element.menuId === MenuId.TunnelLocalAddressInline ? ['ports-view-actionbar-cell-localaddress'] : undefined\n\t\t\t});\n\t\ttemplateData.actionBar.context = this.tunnelContext(element.tunnel);\n\t\ttemplateData.container.style.paddingLeft = '10px';\n\t\tconst context: [string, any][] =\n\t\t\t[\n\t\t\t\t['view', TUNNEL_VIEW_ID],\n\t\t\t\t[TunnelTypeContextKey.key, element.tunnel.tunnelType],\n\t\t\t\t[TunnelCloseableContextKey.key, element.tunnel.closeable],\n\t\t\t\t[TunnelPrivacyContextKey.key, element.tunnel.privacy.id],\n\t\t\t\t[TunnelProtocolContextKey.key, element.tunnel.protocol]\n\t\t\t];\n\t\tconst contextKeyService = this.contextKeyService.createOverlay(context);\n\t\tconst disposableStore = new DisposableStore();\n\t\ttemplateData.elementDisposable = disposableStore;\n\t\tif (element.menuId) {\n\t\t\tconst menu = disposableStore.add(this.menuService.createMenu(element.menuId, contextKeyService));\n\t\t\tlet actions: IAction[] = [];\n\t\t\tcreateAndFillInActionBarActions(menu, { shouldForwardArgs: true }, actions);\n\t\t\tif (actions) {\n\t\t\t\tconst labelActions = actions.filter(action => action.id.toLowerCase().indexOf('label') >= 0);\n\t\t\t\tif (labelActions.length > 1) {\n\t\t\t\t\tlabelActions.sort((a, b) => a.label.length - b.label.length);\n\t\t\t\t\tlabelActions.pop();\n\t\t\t\t\tactions = actions.filter(action => labelActions.indexOf(action) < 0);\n\t\t\t\t}\n\t\t\t\ttemplateData.actionBar.push(actions, { icon: true, label: false });\n\t\t\t\tif (this._actionRunner) {\n\t\t\t\t\ttemplateData.actionBar.actionRunner = this._actionRunner;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (element.icon) {\n\t\t\ttemplateData.icon.className = `ports-view-actionbar-cell-icon ${ThemeIcon.asClassName(element.icon)}`;\n\t\t\ttemplateData.icon.title = element.tooltip;\n\t\t\ttemplateData.icon.style.display = 'inline';\n\t\t}\n\t}\n\n\tprivate renderInputBox(container: HTMLElement, editableData: IEditableData): IDisposable {\n\t\t// Required for FireFox. The blur event doesn't fire on FireFox when you just mash the \"+\" button to forward a port.\n\t\tif (this.inputDone) {\n\t\t\tthis.inputDone(false, false);\n\t\t\tthis.inputDone = undefined;\n\t\t}\n\t\tcontainer.style.paddingLeft = '5px';\n\t\tconst value = editableData.startingValue || '';\n\t\tconst inputBox = new InputBox(container, this.contextViewService, {\n\t\t\tariaLabel: nls.localize('remote.tunnelsView.input', \"Press Enter to confirm or Escape to cancel.\"),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: (value) => {\n\t\t\t\t\tconst message = editableData.validationMessage(value);\n\t\t\t\t\tif (!message) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcontent: message.content,\n\t\t\t\t\t\tformatContent: true,\n\t\t\t\t\t\ttype: message.severity === Severity.Error ? MessageType.ERROR : MessageType.INFO\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tplaceholder: editableData.placeholder || '',\n\t\t\tinputBoxStyles: defaultInputBoxStyles\n\t\t});\n\t\tinputBox.value = value;\n\t\tinputBox.focus();\n\t\tinputBox.select({ start: 0, end: editableData.startingValue ? editableData.startingValue.length : 0 });\n\n\t\tconst done = createSingleCallFunction(async (success: boolean, finishEditing: boolean) => {\n\t\t\tdispose(toDispose);\n\t\t\tif (this.inputDone) {\n\t\t\t\tthis.inputDone = undefined;\n\t\t\t}\n\t\t\tinputBox.element.style.display = 'none';\n\t\t\tconst inputValue = inputBox.value;\n\t\t\tif (finishEditing) {\n\t\t\t\treturn editableData.onFinish(inputValue, success);\n\t\t\t}\n\t\t});\n\t\tthis.inputDone = done;\n\n\t\tconst toDispose = [\n\t\t\tinputBox,\n\t\t\tdom.addStandardDisposableListener(inputBox.inputElement, dom.EventType.KEY_DOWN, async (e: IKeyboardEvent) => {\n\t\t\t\tif (e.equals(KeyCode.Enter)) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tif (inputBox.validate() !== MessageType.ERROR) {\n\t\t\t\t\t\treturn done(true, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn done(false, true);\n\t\t\t\t\t}\n\t\t\t\t} else if (e.equals(KeyCode.Escape)) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\treturn done(false, true);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdom.addDisposableListener(inputBox.inputElement, dom.EventType.BLUR, () => {\n\t\t\t\treturn done(inputBox.validate() !== MessageType.ERROR, true);\n\t\t\t})\n\t\t];\n\n\t\treturn toDisposable(() => {\n\t\t\tdone(false, false);\n\t\t});\n\t}\n\n\tdisposeElement(element: ActionBarCell, index: number, templateData: IActionBarTemplateData, height: number | undefined) {\n\t\ttemplateData.elementDisposable.dispose();\n\t}\n\n\tdisposeTemplate(templateData: IActionBarTemplateData): void {\n\t\ttemplateData.label.dispose();\n\t\ttemplateData.actionBar.dispose();\n\t\ttemplateData.elementDisposable.dispose();\n\t\ttemplateData.button?.dispose();\n\t}\n}\n\nclass TunnelItem implements ITunnelItem {\n\tstatic createFromTunnel(remoteExplorerService: IRemoteExplorerService, tunnelService: ITunnelService,\n\t\ttunnel: Tunnel, type: TunnelType = TunnelType.Forwarded, closeable?: boolean) {\n\t\treturn new TunnelItem(type,\n\t\t\ttunnel.remoteHost,\n\t\t\ttunnel.remotePort,\n\t\t\ttunnel.source,\n\t\t\t!!tunnel.hasRunningProcess,\n\t\t\ttunnel.protocol,\n\t\t\ttunnel.localUri,\n\t\t\ttunnel.localAddress,\n\t\t\ttunnel.localPort,\n\t\t\tcloseable === undefined ? tunnel.closeable : closeable,\n\t\t\ttunnel.name,\n\t\t\ttunnel.runningProcess,\n\t\t\ttunnel.pid,\n\t\t\ttunnel.privacy,\n\t\t\tremoteExplorerService,\n\t\t\ttunnelService);\n\t}\n\n\t/**\n\t * Removes all non-serializable properties from the tunnel\n\t * @returns A new TunnelItem without any services\n\t */\n\tpublic strip(): TunnelItem | undefined {\n\t\treturn new TunnelItem(\n\t\t\tthis.tunnelType,\n\t\t\tthis.remoteHost,\n\t\t\tthis.remotePort,\n\t\t\tthis.source,\n\t\t\tthis.hasRunningProcess,\n\t\t\tthis.protocol,\n\t\t\tthis.localUri,\n\t\t\tthis.localAddress,\n\t\t\tthis.localPort,\n\t\t\tthis.closeable,\n\t\t\tthis.name,\n\t\t\tthis.runningProcess,\n\t\t\tthis.pid,\n\t\t\tthis._privacy\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic tunnelType: TunnelType,\n\t\tpublic remoteHost: string,\n\t\tpublic remotePort: number,\n\t\tpublic source: { source: TunnelSource; description: string },\n\t\tpublic hasRunningProcess: boolean,\n\t\tpublic protocol: TunnelProtocol,\n\t\tpublic localUri?: URI,\n\t\tpublic localAddress?: string,\n\t\tpublic localPort?: number,\n\t\tpublic closeable?: boolean,\n\t\tpublic name?: string,\n\t\tprivate runningProcess?: string,\n\t\tprivate pid?: number,\n\t\tprivate _privacy?: TunnelPrivacyId | string,\n\t\tprivate remoteExplorerService?: IRemoteExplorerService,\n\t\tprivate tunnelService?: ITunnelService\n\t) { }\n\n\tget label(): string {\n\t\tif (this.tunnelType === TunnelType.Add && this.name) {\n\t\t\treturn this.name;\n\t\t}\n\t\tconst portNumberLabel = (isLocalhost(this.remoteHost) || isAllInterfaces(this.remoteHost))\n\t\t\t? `${this.remotePort}`\n\t\t\t: `${this.remoteHost}:${this.remotePort}`;\n\t\tif (this.name) {\n\t\t\treturn `${this.name} (${portNumberLabel})`;\n\t\t} else {\n\t\t\treturn portNumberLabel;\n\t\t}\n\t}\n\n\tset processDescription(description: string | undefined) {\n\t\tthis.runningProcess = description;\n\t}\n\n\tget processDescription(): string | undefined {\n\t\tlet description: string = '';\n\t\tif (this.runningProcess) {\n\t\t\tif (this.pid && this.remoteExplorerService?.namedProcesses.has(this.pid)) {\n\t\t\t\t// This is a known process. Give it a friendly name.\n\t\t\t\tdescription = this.remoteExplorerService.namedProcesses.get(this.pid)!;\n\t\t\t} else {\n\t\t\t\tdescription = this.runningProcess.replace(/\\0/g, ' ').trim();\n\t\t\t}\n\t\t\tif (this.pid) {\n\t\t\t\tdescription += ` (${this.pid})`;\n\t\t\t}\n\t\t} else if (this.hasRunningProcess) {\n\t\t\tdescription = nls.localize('tunnelView.runningProcess.inacessable', \"Process information unavailable\");\n\t\t}\n\n\t\treturn description;\n\t}\n\n\tget tooltipPostfix(): string {\n\t\tlet information: string;\n\t\tif (this.localAddress) {\n\t\t\tinformation = nls.localize('remote.tunnel.tooltipForwarded', \"Remote port {0}:{1} forwarded to local address {2}. \", this.remoteHost, this.remotePort, this.localAddress);\n\t\t} else {\n\t\t\tinformation = nls.localize('remote.tunnel.tooltipCandidate', \"Remote port {0}:{1} not forwarded. \", this.remoteHost, this.remotePort);\n\t\t}\n\n\t\treturn information;\n\t}\n\n\tget iconTooltip(): string {\n\t\tconst isAdd = this.tunnelType === TunnelType.Add;\n\t\tif (!isAdd) {\n\t\t\treturn `${this.processDescription ? nls.localize('tunnel.iconColumn.running', \"Port has running process.\") :\n\t\t\t\tnls.localize('tunnel.iconColumn.notRunning', \"No running process.\")}`;\n\t\t} else {\n\t\t\treturn this.label;\n\t\t}\n\t}\n\n\tget portTooltip(): string {\n\t\tconst isAdd = this.tunnelType === TunnelType.Add;\n\t\tif (!isAdd) {\n\t\t\treturn `${this.name ? nls.localize('remote.tunnel.tooltipName', \"Port labeled {0}. \", this.name) : ''}`;\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tget processTooltip(): string {\n\t\treturn this.processDescription ?? '';\n\t}\n\n\tget originTooltip(): string {\n\t\treturn this.source.description;\n\t}\n\n\tget privacy(): TunnelPrivacy {\n\t\tif (this.tunnelService?.privacyOptions) {\n\t\t\treturn this.tunnelService?.privacyOptions.find(element => element.id === this._privacy) ??\n\t\t\t{\n\t\t\t\tid: '',\n\t\t\t\tthemeIcon: Codicon.question.id,\n\t\t\t\tlabel: nls.localize('tunnelPrivacy.unknown', \"Unknown\")\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tid: TunnelPrivacyId.Private,\n\t\t\t\tthemeIcon: privatePortIcon.id,\n\t\t\t\tlabel: nls.localize('tunnelPrivacy.private', \"Private\")\n\t\t\t};\n\t\t}\n\t}\n}\n\nconst TunnelTypeContextKey = new RawContextKey<TunnelType>('tunnelType', TunnelType.Add, true);\nconst TunnelCloseableContextKey = new RawContextKey<boolean>('tunnelCloseable', false, true);\nconst TunnelPrivacyContextKey = new RawContextKey<TunnelPrivacyId | string | undefined>('tunnelPrivacy', undefined, true);\nconst TunnelPrivacyEnabledContextKey = new RawContextKey<boolean>('tunnelPrivacyEnabled', false, true);\nconst TunnelProtocolContextKey = new RawContextKey<TunnelProtocol | undefined>('tunnelProtocol', TunnelProtocol.Http, true);\nconst TunnelViewFocusContextKey = new RawContextKey<boolean>('tunnelViewFocus', false, nls.localize('tunnel.focusContext', \"Whether the Ports view has focus.\"));\nconst TunnelViewSelectionKeyName = 'tunnelViewSelection';\n// host:port\nconst TunnelViewSelectionContextKey = new RawContextKey<string | undefined>(TunnelViewSelectionKeyName, undefined, true);\nconst TunnelViewMultiSelectionKeyName = 'tunnelViewMultiSelection';\n// host:port[]\nconst TunnelViewMultiSelectionContextKey = new RawContextKey<string[] | undefined>(TunnelViewMultiSelectionKeyName, undefined, true);\nconst PortChangableContextKey = new RawContextKey<boolean>('portChangable', false, true);\nconst ProtocolChangeableContextKey = new RawContextKey<boolean>('protocolChangable', true, true);\n\nexport class TunnelPanel extends ViewPane {\n\n\tstatic readonly ID = TUNNEL_VIEW_ID;\n\tstatic readonly TITLE: ILocalizedString = nls.localize2('remote.tunnel', \"Ports\");\n\n\tprivate panelContainer: HTMLElement | undefined;\n\tprivate table: WorkbenchTable<ITunnelItem> | undefined;\n\tprivate readonly tableDisposables: DisposableStore = this._register(new DisposableStore());\n\tprivate tunnelTypeContext: IContextKey<TunnelType>;\n\tprivate tunnelCloseableContext: IContextKey<boolean>;\n\tprivate tunnelPrivacyContext: IContextKey<TunnelPrivacyId | string | undefined>;\n\tprivate tunnelPrivacyEnabledContext: IContextKey<boolean>;\n\tprivate tunnelProtocolContext: IContextKey<TunnelProtocol | undefined>;\n\tprivate tunnelViewFocusContext: IContextKey<boolean>;\n\tprivate tunnelViewSelectionContext: IContextKey<string | undefined>;\n\tprivate tunnelViewMultiSelectionContext: IContextKey<string[] | undefined>;\n\tprivate portChangableContextKey: IContextKey<boolean>;\n\tprivate protocolChangableContextKey: IContextKey<boolean>;\n\tprivate isEditing: boolean = false;\n\tprivate titleActions: IAction[] = [];\n\tprivate lastFocus: number[] = [];\n\n\tconstructor(\n\t\tprotected viewModel: ITunnelViewModel,\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IQuickInputService protected quickInputService: IQuickInputService,\n\t\t@ICommandService protected commandService: ICommandService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\t\tthis.tunnelTypeContext = TunnelTypeContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelCloseableContext = TunnelCloseableContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelPrivacyContext = TunnelPrivacyContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelPrivacyEnabledContext = TunnelPrivacyEnabledContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelPrivacyEnabledContext.set(tunnelService.canChangePrivacy);\n\t\tthis.protocolChangableContextKey = ProtocolChangeableContextKey.bindTo(contextKeyService);\n\t\tthis.protocolChangableContextKey.set(tunnelService.canChangeProtocol);\n\t\tthis.tunnelProtocolContext = TunnelProtocolContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelViewFocusContext = TunnelViewFocusContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelViewSelectionContext = TunnelViewSelectionContextKey.bindTo(contextKeyService);\n\t\tthis.tunnelViewMultiSelectionContext = TunnelViewMultiSelectionContextKey.bindTo(contextKeyService);\n\t\tthis.portChangableContextKey = PortChangableContextKey.bindTo(contextKeyService);\n\n\t\tconst overlayContextKeyService = this.contextKeyService.createOverlay([['view', TunnelPanel.ID]]);\n\t\tconst titleMenu = this._register(this.menuService.createMenu(MenuId.TunnelTitle, overlayContextKeyService));\n\t\tconst updateActions = () => {\n\t\t\tthis.titleActions = [];\n\t\t\tcreateAndFillInActionBarActions(titleMenu, undefined, this.titleActions);\n\t\t\tthis.updateActions();\n\t\t};\n\n\t\tthis._register(titleMenu.onDidChange(updateActions));\n\t\tupdateActions();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.titleActions = [];\n\t\t}));\n\n\t\tthis.registerPrivacyActions();\n\t\tthis._register(Event.once(this.tunnelService.onAddedTunnelProvider)(() => {\n\t\t\tlet updated = false;\n\t\t\tif (this.tunnelPrivacyEnabledContext.get() === false) {\n\t\t\t\tthis.tunnelPrivacyEnabledContext.set(tunnelService.canChangePrivacy);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (this.protocolChangableContextKey.get() === true) {\n\t\t\t\tthis.protocolChangableContextKey.set(tunnelService.canChangeProtocol);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (updated) {\n\t\t\t\tupdateActions();\n\t\t\t\tthis.registerPrivacyActions();\n\t\t\t\tthis.createTable();\n\t\t\t\tthis.table?.layout(this.height, this.width);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerPrivacyActions() {\n\t\tfor (const privacyOption of this.tunnelService.privacyOptions) {\n\t\t\tconst optionId = `remote.tunnel.privacy${privacyOption.id}`;\n\t\t\tCommandsRegistry.registerCommand(optionId, ChangeTunnelPrivacyAction.handler(privacyOption.id));\n\t\t\tMenuRegistry.appendMenuItem(MenuId.TunnelPrivacy, ({\n\t\t\t\torder: 0,\n\t\t\t\tcommand: {\n\t\t\t\t\tid: optionId,\n\t\t\t\t\ttitle: privacyOption.label,\n\t\t\t\t\ttoggled: TunnelPrivacyContextKey.isEqualTo(privacyOption.id)\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tget portCount(): number {\n\t\treturn this.remoteExplorerService.tunnelModel.forwarded.size + this.remoteExplorerService.tunnelModel.detected.size;\n\t}\n\n\tprivate createTable(): void {\n\t\tif (!this.panelContainer) {\n\t\t\treturn;\n\t\t}\n\t\tthis.tableDisposables.clear();\n\n\t\tdom.clearNode(this.panelContainer);\n\n\t\tconst widgetContainer = dom.append(this.panelContainer, dom.$('.customview-tree'));\n\t\twidgetContainer.classList.add('ports-view');\n\t\twidgetContainer.classList.add('file-icon-themable-tree', 'show-file-icons');\n\n\t\tconst actionBarRenderer = new ActionBarRenderer(this.instantiationService, this.contextKeyService,\n\t\t\tthis.menuService, this.contextViewService, this.remoteExplorerService, this.commandService,\n\t\t\tthis.configurationService);\n\t\tconst columns = [new IconColumn(), new PortColumn(), new LocalAddressColumn(), new RunningProcessColumn()];\n\t\tif (this.tunnelService.canChangePrivacy) {\n\t\t\tcolumns.push(new PrivacyColumn());\n\t\t}\n\t\tcolumns.push(new OriginColumn());\n\n\t\tthis.table = this.instantiationService.createInstance(WorkbenchTable,\n\t\t\t'RemoteTunnels',\n\t\t\twidgetContainer,\n\t\t\tnew TunnelTreeVirtualDelegate(this.remoteExplorerService),\n\t\t\tcolumns,\n\t\t\t[actionBarRenderer],\n\t\t\t{\n\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\tgetKeyboardNavigationLabel: (item: ITunnelItem) => {\n\t\t\t\t\t\treturn item.label;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmultipleSelectionSupport: true,\n\t\t\t\taccessibilityProvider: {\n\t\t\t\t\tgetAriaLabel: (item: ITunnelItem) => {\n\t\t\t\t\t\tif (item instanceof TunnelItem) {\n\t\t\t\t\t\t\treturn `${item.tooltipPostfix} ${item.portTooltip} ${item.iconTooltip} ${item.processTooltip} ${item.originTooltip} ${this.tunnelService.canChangePrivacy ? item.privacy.label : ''}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn item.label;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetWidgetAriaLabel: () => nls.localize('tunnelView', \"Tunnel View\")\n\t\t\t\t},\n\t\t\t\topenOnSingleClick: true\n\t\t\t}\n\t\t) as WorkbenchTable<ITunnelItem>;\n\n\t\tconst actionRunner: ActionRunner = new ActionRunner();\n\t\tactionBarRenderer.actionRunner = actionRunner;\n\n\t\tthis.tableDisposables.add(this.table);\n\t\tthis.tableDisposables.add(this.table.onContextMenu(e => this.onContextMenu(e, actionRunner)));\n\t\tthis.tableDisposables.add(this.table.onMouseDblClick(e => this.onMouseDblClick(e)));\n\t\tthis.tableDisposables.add(this.table.onDidChangeFocus(e => this.onFocusChanged(e)));\n\t\tthis.tableDisposables.add(this.table.onDidChangeSelection(e => this.onSelectionChanged(e)));\n\t\tthis.tableDisposables.add(this.table.onDidFocus(() => this.tunnelViewFocusContext.set(true)));\n\t\tthis.tableDisposables.add(this.table.onDidBlur(() => this.tunnelViewFocusContext.set(false)));\n\n\t\tconst rerender = () => this.table?.splice(0, Number.POSITIVE_INFINITY, this.viewModel.all);\n\n\t\trerender();\n\t\tlet lastPortCount = this.portCount;\n\t\tthis.tableDisposables.add(Event.debounce(this.viewModel.onForwardedPortsChanged, (_last, e) => e, 50)(() => {\n\t\t\tconst newPortCount = this.portCount;\n\t\t\tif (((lastPortCount === 0) || (newPortCount === 0)) && (lastPortCount !== newPortCount)) {\n\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t\t}\n\t\t\tlastPortCount = newPortCount;\n\t\t\trerender();\n\t\t}));\n\n\t\tthis.tableDisposables.add(this.table.onMouseClick(e => {\n\t\t\tif (this.hasOpenLinkModifier(e.browserEvent) && this.table) {\n\t\t\t\tconst selection = this.table.getSelectedElements();\n\t\t\t\tif ((selection.length === 0) ||\n\t\t\t\t\t((selection.length === 1) && (selection[0] === e.element))) {\n\t\t\t\t\tthis.commandService.executeCommand(OpenPortInBrowserAction.ID, e.element);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.tableDisposables.add(this.table.onDidOpen(e => {\n\t\t\tif (!e.element || (e.element.tunnelType !== TunnelType.Forwarded)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.browserEvent?.type === 'dblclick') {\n\t\t\t\tthis.commandService.executeCommand(LabelTunnelAction.ID);\n\t\t\t}\n\t\t}));\n\n\t\tthis.tableDisposables.add(this.remoteExplorerService.onDidChangeEditable(e => {\n\t\t\tthis.isEditing = !!this.remoteExplorerService.getEditableData(e?.tunnel, e?.editId);\n\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\n\t\t\tif (!this.isEditing) {\n\t\t\t\twidgetContainer.classList.remove('highlight');\n\t\t\t}\n\n\t\t\trerender();\n\n\t\t\tif (this.isEditing) {\n\t\t\t\twidgetContainer.classList.add('highlight');\n\t\t\t\tif (!e) {\n\t\t\t\t\t// When we are in editing mode for a new forward, rather than updating an existing one we need to reveal the input box since it might be out of view.\n\t\t\t\t\tthis.table?.reveal(this.table.indexOf(this.viewModel.input));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (e && (e.tunnel.tunnelType !== TunnelType.Add)) {\n\t\t\t\t\tthis.table?.setFocus(this.lastFocus);\n\t\t\t\t}\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.panelContainer = dom.append(container, dom.$('.tree-explorer-viewlet-tree-view'));\n\t\tthis.createTable();\n\t}\n\n\toverride shouldShowWelcome(): boolean {\n\t\treturn this.viewModel.isEmpty() && !this.isEditing;\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.table?.domFocus();\n\t}\n\n\tprivate onFocusChanged(event: ITableEvent<ITunnelItem>) {\n\t\tif (event.indexes.length > 0 && event.elements.length > 0) {\n\t\t\tthis.lastFocus = [...event.indexes];\n\t\t}\n\t\tconst elements = event.elements;\n\t\tconst item = elements && elements.length ? elements[0] : undefined;\n\t\tif (item) {\n\t\t\tthis.tunnelViewSelectionContext.set(makeAddress(item.remoteHost, item.remotePort));\n\t\t\tthis.tunnelTypeContext.set(item.tunnelType);\n\t\t\tthis.tunnelCloseableContext.set(!!item.closeable);\n\t\t\tthis.tunnelPrivacyContext.set(item.privacy.id);\n\t\t\tthis.tunnelProtocolContext.set(item.protocol === TunnelProtocol.Https ? TunnelProtocol.Https : TunnelProtocol.Https);\n\t\t\tthis.portChangableContextKey.set(!!item.localPort);\n\t\t} else {\n\t\t\tthis.tunnelTypeContext.reset();\n\t\t\tthis.tunnelViewSelectionContext.reset();\n\t\t\tthis.tunnelCloseableContext.reset();\n\t\t\tthis.tunnelPrivacyContext.reset();\n\t\t\tthis.tunnelProtocolContext.reset();\n\t\t\tthis.portChangableContextKey.reset();\n\t\t}\n\t}\n\n\tprivate hasOpenLinkModifier(e: MouseEvent): boolean {\n\t\tconst editorConf = this.configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\n\t\tlet modifierKey = false;\n\t\tif (editorConf.multiCursorModifier === 'ctrlCmd') {\n\t\t\tmodifierKey = e.altKey;\n\t\t} else {\n\t\t\tif (isMacintosh) {\n\t\t\t\tmodifierKey = e.metaKey;\n\t\t\t} else {\n\t\t\t\tmodifierKey = e.ctrlKey;\n\t\t\t}\n\t\t}\n\t\treturn modifierKey;\n\t}\n\n\tprivate onSelectionChanged(event: ITableEvent<ITunnelItem>) {\n\t\tconst elements = event.elements;\n\t\tif (elements.length > 1) {\n\t\t\tthis.tunnelViewMultiSelectionContext.set(elements.map(element => makeAddress(element.remoteHost, element.remotePort)));\n\t\t} else {\n\t\t\tthis.tunnelViewMultiSelectionContext.set(undefined);\n\t\t}\n\t}\n\n\tprivate onContextMenu(event: ITableContextMenuEvent<ITunnelItem>, actionRunner: ActionRunner): void {\n\t\tif ((event.element !== undefined) && !(event.element instanceof TunnelItem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tevent.browserEvent.preventDefault();\n\t\tevent.browserEvent.stopPropagation();\n\n\t\tconst node: TunnelItem | undefined = event.element;\n\n\t\tif (node) {\n\t\t\tthis.table?.setFocus([this.table.indexOf(node)]);\n\t\t\tthis.tunnelTypeContext.set(node.tunnelType);\n\t\t\tthis.tunnelCloseableContext.set(!!node.closeable);\n\t\t\tthis.tunnelPrivacyContext.set(node.privacy.id);\n\t\t\tthis.tunnelProtocolContext.set(node.protocol);\n\t\t\tthis.portChangableContextKey.set(!!node.localPort);\n\t\t} else {\n\t\t\tthis.tunnelTypeContext.set(TunnelType.Add);\n\t\t\tthis.tunnelCloseableContext.set(false);\n\t\t\tthis.tunnelPrivacyContext.set(undefined);\n\t\t\tthis.tunnelProtocolContext.set(undefined);\n\t\t\tthis.portChangableContextKey.set(false);\n\t\t}\n\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tmenuId: MenuId.TunnelContext,\n\t\t\tmenuActionOptions: { shouldForwardArgs: true },\n\t\t\tcontextKeyService: this.table?.contextKeyService,\n\t\t\tgetAnchor: () => event.anchor,\n\t\t\tgetActionViewItem: (action) => {\n\t\t\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\t\t\t\tif (keybinding) {\n\t\t\t\t\treturn new ActionViewItem(action, action, { label: true, keybinding: keybinding.getLabel() });\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tonHide: (wasCancelled?: boolean) => {\n\t\t\t\tif (wasCancelled) {\n\t\t\t\t\tthis.table?.domFocus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetActionsContext: () => node?.strip(),\n\t\t\tactionRunner\n\t\t});\n\t}\n\n\tprivate onMouseDblClick(e: ITableMouseEvent<ITunnelItem>): void {\n\t\tif (!e.element) {\n\t\t\tthis.commandService.executeCommand(ForwardPortAction.INLINE_ID);\n\t\t}\n\t}\n\n\tprivate height = 0;\n\tprivate width = 0;\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tthis.height = height;\n\t\tthis.width = width;\n\t\tsuper.layoutBody(height, width);\n\t\tthis.table?.layout(height, width);\n\t}\n}\n\nexport class TunnelPanelDescriptor implements IViewDescriptor {\n\treadonly id = TunnelPanel.ID;\n\treadonly name: ILocalizedString = TunnelPanel.TITLE;\n\treadonly ctorDescriptor: SyncDescriptor<TunnelPanel>;\n\treadonly canToggleVisibility = true;\n\treadonly hideByDefault = false;\n\t// group is not actually used for views that are not extension contributed. Use order instead.\n\treadonly group = 'details@0';\n\t// -500 comes from the remote explorer viewOrderDelegate\n\treadonly order = -500;\n\treadonly remoteAuthority?: string | string[];\n\treadonly canMoveView = true;\n\treadonly containerIcon = portsViewIcon;\n\n\tconstructor(viewModel: ITunnelViewModel, environmentService: IWorkbenchEnvironmentService) {\n\t\tthis.ctorDescriptor = new SyncDescriptor(TunnelPanel, [viewModel]);\n\t\tthis.remoteAuthority = environmentService.remoteAuthority ? environmentService.remoteAuthority.split('+')[0] : undefined;\n\t}\n}\n\nfunction isITunnelItem(item: any): item is ITunnelItem {\n\treturn item && item.tunnelType && item.remoteHost && item.source;\n}\n\nnamespace LabelTunnelAction {\n\texport const ID = 'remote.tunnel.label';\n\texport const LABEL = nls.localize('remote.tunnel.label', \"Set Port Label\");\n\texport const COMMAND_ID_KEYWORD = 'label';\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg): Promise<{ port: number; label: string } | undefined> => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tlet tunnelContext: ITunnelItem | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\ttunnelContext = arg;\n\t\t\t} else {\n\t\t\t\tconst context = accessor.get(IContextKeyService).getContextKeyValue<string | undefined>(TunnelViewSelectionKeyName);\n\t\t\t\tconst tunnel = context ? remoteExplorerService.tunnelModel.forwarded.get(context) : undefined;\n\t\t\t\tif (tunnel) {\n\t\t\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\t\t\ttunnelContext = TunnelItem.createFromTunnel(remoteExplorerService, tunnelService, tunnel);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tunnelContext) {\n\t\t\t\tconst tunnelItem: ITunnelItem = tunnelContext;\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tconst startingValue = tunnelItem.name ? tunnelItem.name : `${tunnelItem.remotePort}`;\n\t\t\t\t\tremoteExplorerService.setEditable(tunnelItem, TunnelEditId.Label, {\n\t\t\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\t\t\tvalue = value.trim();\n\t\t\t\t\t\t\tremoteExplorerService.setEditable(tunnelItem, TunnelEditId.Label, null);\n\t\t\t\t\t\t\tconst changed = success && (value !== startingValue);\n\t\t\t\t\t\t\tif (changed) {\n\t\t\t\t\t\t\t\tawait remoteExplorerService.tunnelModel.name(tunnelItem.remoteHost, tunnelItem.remotePort, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(changed ? { port: tunnelItem.remotePort, label: value } : undefined);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalidationMessage: () => null,\n\t\t\t\t\t\tplaceholder: nls.localize('remote.tunnelsView.labelPlaceholder', \"Port label\"),\n\t\t\t\t\t\tstartingValue\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n}\n\nconst invalidPortString: string = nls.localize('remote.tunnelsView.portNumberValid', \"Forwarded port should be a number or a host:port.\");\nconst maxPortNumber: number = 65536;\nconst invalidPortNumberString: string = nls.localize('remote.tunnelsView.portNumberToHigh', \"Port number must be \\u2265 0 and < {0}.\", maxPortNumber);\nconst requiresSudoString: string = nls.localize('remote.tunnelView.inlineElevationMessage', \"May Require Sudo\");\nconst alreadyForwarded: string = nls.localize('remote.tunnelView.alreadyForwarded', \"Port is already forwarded\");\n\nexport namespace ForwardPortAction {\n\texport const INLINE_ID = 'remote.tunnel.forwardInline';\n\texport const COMMANDPALETTE_ID = 'remote.tunnel.forwardCommandPalette';\n\texport const LABEL: ILocalizedString = nls.localize2('remote.tunnel.forward', \"Forward a Port\");\n\texport const TREEITEM_LABEL = nls.localize('remote.tunnel.forwardItem', \"Forward Port\");\n\tconst forwardPrompt = nls.localize('remote.tunnel.forwardPrompt', \"Port number or address (eg. 3000 or 10.10.10.10:2000).\");\n\n\tfunction validateInput(remoteExplorerService: IRemoteExplorerService, tunnelService: ITunnelService, value: string, canElevate: boolean): { content: string; severity: Severity } | null {\n\t\tconst parsed = parseAddress(value);\n\t\tif (!parsed) {\n\t\t\treturn { content: invalidPortString, severity: Severity.Error };\n\t\t} else if (parsed.port >= maxPortNumber) {\n\t\t\treturn { content: invalidPortNumberString, severity: Severity.Error };\n\t\t} else if (canElevate && tunnelService.isPortPrivileged(parsed.port)) {\n\t\t\treturn { content: requiresSudoString, severity: Severity.Info };\n\t\t} else if (mapHasAddressLocalhostOrAllInterfaces(remoteExplorerService.tunnelModel.forwarded, parsed.host, parsed.port)) {\n\t\t\treturn { content: alreadyForwarded, severity: Severity.Error };\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction error(notificationService: INotificationService, tunnelOrError: RemoteTunnel | string | void, host: string, port: number) {\n\t\tif (!tunnelOrError) {\n\t\t\tnotificationService.warn(nls.localize('remote.tunnel.forwardError', \"Unable to forward {0}:{1}. The host may not be available or that remote port may already be forwarded\", host, port));\n\t\t} else if (typeof tunnelOrError === 'string') {\n\t\t\tnotificationService.warn(nls.localize('remote.tunnel.forwardErrorProvided', \"Unable to forward {0}:{1}. {2}\", host, port, tunnelOrError));\n\t\t}\n\t}\n\n\texport function inlineHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tremoteExplorerService.setEditable(undefined, TunnelEditId.New, {\n\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\tremoteExplorerService.setEditable(undefined, TunnelEditId.New, null);\n\t\t\t\t\tlet parsed: { host: string; port: number } | undefined;\n\t\t\t\t\tif (success && (parsed = parseAddress(value))) {\n\t\t\t\t\t\tremoteExplorerService.forward({\n\t\t\t\t\t\t\tremote: { host: parsed.host, port: parsed.port },\n\t\t\t\t\t\t\televateIfNeeded: true\n\t\t\t\t\t\t}).then(tunnelOrError => error(notificationService, tunnelOrError, parsed!.host, parsed!.port));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvalidationMessage: (value) => validateInput(remoteExplorerService, tunnelService, value, tunnelService.canElevate),\n\t\t\t\tplaceholder: forwardPrompt\n\t\t\t});\n\t\t};\n\t}\n\n\texport function commandPaletteHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst viewsService = accessor.get(IViewsService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tawait viewsService.openView(TunnelPanel.ID, true);\n\t\t\tconst value = await quickInputService.input({\n\t\t\t\tprompt: forwardPrompt,\n\t\t\t\tvalidateInput: (value) => Promise.resolve(validateInput(remoteExplorerService, tunnelService, value, tunnelService.canElevate))\n\t\t\t});\n\t\t\tlet parsed: { host: string; port: number } | undefined;\n\t\t\tif (value && (parsed = parseAddress(value))) {\n\t\t\t\tremoteExplorerService.forward({\n\t\t\t\t\tremote: { host: parsed.host, port: parsed.port },\n\t\t\t\t\televateIfNeeded: true\n\t\t\t\t}).then(tunnel => error(notificationService, tunnel, parsed!.host, parsed!.port));\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface QuickPickTunnel extends IQuickPickItem {\n\ttunnel?: ITunnelItem;\n}\n\nfunction makeTunnelPicks(tunnels: Tunnel[], remoteExplorerService: IRemoteExplorerService, tunnelService: ITunnelService): QuickPickInput<QuickPickTunnel>[] {\n\tconst picks: QuickPickInput<QuickPickTunnel>[] = tunnels.map(forwarded => {\n\t\tconst item = TunnelItem.createFromTunnel(remoteExplorerService, tunnelService, forwarded);\n\t\treturn {\n\t\t\tlabel: item.label,\n\t\t\tdescription: item.processDescription,\n\t\t\ttunnel: item\n\t\t};\n\t});\n\tif (picks.length === 0) {\n\t\tpicks.push({\n\t\t\tlabel: nls.localize('remote.tunnel.closeNoPorts', \"No ports currently forwarded. Try running the {0} command\", ForwardPortAction.LABEL.value)\n\t\t});\n\t}\n\treturn picks;\n}\n\nnamespace ClosePortAction {\n\texport const INLINE_ID = 'remote.tunnel.closeInline';\n\texport const COMMANDPALETTE_ID = 'remote.tunnel.closeCommandPalette';\n\texport const LABEL: ILocalizedString = nls.localize2('remote.tunnel.close', \"Stop Forwarding Port\");\n\n\texport function inlineHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tlet ports: (ITunnelItem | Tunnel)[] = [];\n\t\t\tconst multiSelectContext = contextKeyService.getContextKeyValue<string[] | undefined>(TunnelViewMultiSelectionKeyName);\n\t\t\tif (multiSelectContext) {\n\t\t\t\tmultiSelectContext.forEach(context => {\n\t\t\t\t\tconst tunnel = remoteExplorerService.tunnelModel.forwarded.get(context);\n\t\t\t\t\tif (tunnel) {\n\t\t\t\t\t\tports?.push(tunnel);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (isITunnelItem(arg)) {\n\t\t\t\tports = [arg];\n\t\t\t} else {\n\t\t\t\tconst context = contextKeyService.getContextKeyValue<string | undefined>(TunnelViewSelectionKeyName);\n\t\t\t\tconst tunnel = context ? remoteExplorerService.tunnelModel.forwarded.get(context) : undefined;\n\t\t\t\tif (tunnel) {\n\t\t\t\t\tports = [tunnel];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!ports || ports.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn Promise.all(ports.map(port => remoteExplorerService.close({ host: port.remoteHost, port: port.remotePort }, TunnelCloseReason.User)));\n\t\t};\n\t}\n\n\texport function commandPaletteHandler(): ICommandHandler {\n\t\treturn async (accessor) => {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\n\t\t\tconst picks: QuickPickInput<QuickPickTunnel>[] = makeTunnelPicks(Array.from(remoteExplorerService.tunnelModel.forwarded.values()).filter(tunnel => tunnel.closeable), remoteExplorerService, tunnelService);\n\t\t\tconst result = await quickInputService.pick(picks, { placeHolder: nls.localize('remote.tunnel.closePlaceholder', \"Choose a port to stop forwarding\") });\n\t\t\tif (result && result.tunnel) {\n\t\t\t\tawait remoteExplorerService.close({ host: result.tunnel.remoteHost, port: result.tunnel.remotePort }, TunnelCloseReason.User);\n\t\t\t} else if (result) {\n\t\t\t\tawait commandService.executeCommand(ForwardPortAction.COMMANDPALETTE_ID);\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport namespace OpenPortInBrowserAction {\n\texport const ID = 'remote.tunnel.open';\n\texport const LABEL = nls.localize('remote.tunnel.open', \"Open in Browser\");\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tlet key: string | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\tkey = makeAddress(arg.remoteHost, arg.remotePort);\n\t\t\t} else if (arg.tunnelRemoteHost && arg.tunnelRemotePort) {\n\t\t\t\tkey = makeAddress(arg.tunnelRemoteHost, arg.tunnelRemotePort);\n\t\t\t}\n\t\t\tif (key) {\n\t\t\t\tconst model = accessor.get(IRemoteExplorerService).tunnelModel;\n\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\treturn run(model, openerService, key);\n\t\t\t}\n\t\t};\n\t}\n\n\texport function run(model: TunnelModel, openerService: IOpenerService, key: string) {\n\t\tconst tunnel = model.forwarded.get(key) || model.detected.get(key);\n\t\tif (tunnel) {\n\t\t\treturn openerService.open(tunnel.localUri, { allowContributedOpeners: false });\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport namespace OpenPortInPreviewAction {\n\texport const ID = 'remote.tunnel.openPreview';\n\texport const LABEL = nls.localize('remote.tunnel.openPreview', \"Preview in Editor\");\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tlet key: string | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\tkey = makeAddress(arg.remoteHost, arg.remotePort);\n\t\t\t} else if (arg.tunnelRemoteHost && arg.tunnelRemotePort) {\n\t\t\t\tkey = makeAddress(arg.tunnelRemoteHost, arg.tunnelRemotePort);\n\t\t\t}\n\t\t\tif (key) {\n\t\t\t\tconst model = accessor.get(IRemoteExplorerService).tunnelModel;\n\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\tconst externalOpenerService = accessor.get(IExternalUriOpenerService);\n\t\t\t\treturn run(model, openerService, externalOpenerService, key);\n\t\t\t}\n\t\t};\n\t}\n\n\texport async function run(model: TunnelModel, openerService: IOpenerService, externalOpenerService: IExternalUriOpenerService, key: string) {\n\t\tconst tunnel = model.forwarded.get(key) || model.detected.get(key);\n\t\tif (tunnel) {\n\t\t\tconst remoteHost = tunnel.remoteHost.includes(':') ? `[${tunnel.remoteHost}]` : tunnel.remoteHost;\n\t\t\tconst sourceUri = URI.parse(`http://${remoteHost}:${tunnel.remotePort}`);\n\t\t\tconst opener = await externalOpenerService.getOpener(tunnel.localUri, { sourceUri }, CancellationToken.None);\n\t\t\tif (opener) {\n\t\t\t\treturn opener.openExternalUri(tunnel.localUri, { sourceUri }, CancellationToken.None);\n\t\t\t}\n\t\t\treturn openerService.open(tunnel.localUri);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nnamespace OpenPortInBrowserCommandPaletteAction {\n\texport const ID = 'remote.tunnel.openCommandPalette';\n\texport const LABEL = nls.localize('remote.tunnel.openCommandPalette', \"Open Port in Browser\");\n\n\tinterface QuickPickTunnel extends IQuickPickItem {\n\t\ttunnel?: TunnelItem;\n\t}\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tconst model = remoteExplorerService.tunnelModel;\n\t\t\tconst quickPickService = accessor.get(IQuickInputService);\n\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst options: QuickPickTunnel[] = [...model.forwarded, ...model.detected].map(value => {\n\t\t\t\tconst tunnelItem = TunnelItem.createFromTunnel(remoteExplorerService, tunnelService, value[1]);\n\t\t\t\treturn {\n\t\t\t\t\tlabel: tunnelItem.label,\n\t\t\t\t\tdescription: tunnelItem.processDescription,\n\t\t\t\t\ttunnel: tunnelItem\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (options.length === 0) {\n\t\t\t\toptions.push({\n\t\t\t\t\tlabel: nls.localize('remote.tunnel.openCommandPaletteNone', \"No ports currently forwarded. Open the Ports view to get started.\")\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toptions.push({\n\t\t\t\t\tlabel: nls.localize('remote.tunnel.openCommandPaletteView', \"Open the Ports view...\")\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst picked = await quickPickService.pick<QuickPickTunnel>(options, { placeHolder: nls.localize('remote.tunnel.openCommandPalettePick', \"Choose the port to open\") });\n\t\t\tif (picked && picked.tunnel) {\n\t\t\t\treturn OpenPortInBrowserAction.run(model, openerService, makeAddress(picked.tunnel.remoteHost, picked.tunnel.remotePort));\n\t\t\t} else if (picked) {\n\t\t\t\treturn commandService.executeCommand(`${TUNNEL_VIEW_ID}.focus`);\n\t\t\t}\n\t\t};\n\t}\n}\n\nnamespace CopyAddressAction {\n\texport const INLINE_ID = 'remote.tunnel.copyAddressInline';\n\texport const COMMANDPALETTE_ID = 'remote.tunnel.copyAddressCommandPalette';\n\texport const INLINE_LABEL = nls.localize('remote.tunnel.copyAddressInline', \"Copy Local Address\");\n\texport const COMMANDPALETTE_LABEL = nls.localize('remote.tunnel.copyAddressCommandPalette', \"Copy Forwarded Port Address\");\n\n\tasync function copyAddress(remoteExplorerService: IRemoteExplorerService, clipboardService: IClipboardService, tunnelItem: { remoteHost: string; remotePort: number }) {\n\t\tconst address = remoteExplorerService.tunnelModel.address(tunnelItem.remoteHost, tunnelItem.remotePort);\n\t\tif (address) {\n\t\t\tawait clipboardService.writeText(address.toString());\n\t\t}\n\t}\n\n\texport function inlineHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tlet tunnelItem: ITunnelItem | Tunnel | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\ttunnelItem = arg;\n\t\t\t} else {\n\t\t\t\tconst context = accessor.get(IContextKeyService).getContextKeyValue<string | undefined>(TunnelViewSelectionKeyName);\n\t\t\t\ttunnelItem = context ? remoteExplorerService.tunnelModel.forwarded.get(context) : undefined;\n\t\t\t}\n\t\t\tif (tunnelItem) {\n\t\t\t\treturn copyAddress(remoteExplorerService, accessor.get(IClipboardService), tunnelItem);\n\t\t\t}\n\t\t};\n\t}\n\n\texport function commandPaletteHandler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t\tconst tunnels = Array.from(remoteExplorerService.tunnelModel.forwarded.values()).concat(Array.from(remoteExplorerService.tunnelModel.detected.values()));\n\t\t\tconst result = await quickInputService.pick(makeTunnelPicks(tunnels, remoteExplorerService, tunnelService), { placeHolder: nls.localize('remote.tunnel.copyAddressPlaceholdter', \"Choose a forwarded port\") });\n\t\t\tif (result && result.tunnel) {\n\t\t\t\tawait copyAddress(remoteExplorerService, clipboardService, result.tunnel);\n\t\t\t} else if (result) {\n\t\t\t\tawait commandService.executeCommand(ForwardPortAction.COMMANDPALETTE_ID);\n\t\t\t}\n\t\t};\n\t}\n}\n\nnamespace ChangeLocalPortAction {\n\texport const ID = 'remote.tunnel.changeLocalPort';\n\texport const LABEL = nls.localize('remote.tunnel.changeLocalPort', \"Change Local Address Port\");\n\n\tfunction validateInput(tunnelService: ITunnelService, value: string, canElevate: boolean): { content: string; severity: Severity } | null {\n\t\tif (!value.match(/^[0-9]+$/)) {\n\t\t\treturn { content: nls.localize('remote.tunnelsView.portShouldBeNumber', \"Local port should be a number.\"), severity: Severity.Error };\n\t\t} else if (Number(value) >= maxPortNumber) {\n\t\t\treturn { content: invalidPortNumberString, severity: Severity.Error };\n\t\t} else if (canElevate && tunnelService.isPortPrivileged(Number(value))) {\n\t\t\treturn { content: requiresSudoString, severity: Severity.Info };\n\t\t}\n\t\treturn null;\n\t}\n\n\texport function handler(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\tlet tunnelContext: ITunnelItem | undefined;\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\ttunnelContext = arg;\n\t\t\t} else {\n\t\t\t\tconst context = accessor.get(IContextKeyService).getContextKeyValue<string | undefined>(TunnelViewSelectionKeyName);\n\t\t\t\tconst tunnel = context ? remoteExplorerService.tunnelModel.forwarded.get(context) : undefined;\n\t\t\t\tif (tunnel) {\n\t\t\t\t\tconst tunnelService = accessor.get(ITunnelService);\n\t\t\t\t\ttunnelContext = TunnelItem.createFromTunnel(remoteExplorerService, tunnelService, tunnel);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tunnelContext) {\n\t\t\t\tconst tunnelItem: ITunnelItem = tunnelContext;\n\t\t\t\tremoteExplorerService.setEditable(tunnelItem, TunnelEditId.LocalPort, {\n\t\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\t\tremoteExplorerService.setEditable(tunnelItem, TunnelEditId.LocalPort, null);\n\t\t\t\t\t\tif (success) {\n\t\t\t\t\t\t\tawait remoteExplorerService.close({ host: tunnelItem.remoteHost, port: tunnelItem.remotePort }, TunnelCloseReason.Other);\n\t\t\t\t\t\t\tconst numberValue = Number(value);\n\t\t\t\t\t\t\tconst newForward = await remoteExplorerService.forward({\n\t\t\t\t\t\t\t\tremote: { host: tunnelItem.remoteHost, port: tunnelItem.remotePort },\n\t\t\t\t\t\t\t\tlocal: numberValue,\n\t\t\t\t\t\t\t\tname: tunnelItem.name,\n\t\t\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t\t\t\tsource: tunnelItem.source\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (newForward && (typeof newForward !== 'string') && newForward.tunnelLocalPort !== numberValue) {\n\t\t\t\t\t\t\t\tnotificationService.warn(nls.localize('remote.tunnel.changeLocalPortNumber', \"The local port {0} is not available. Port number {1} has been used instead\", value, newForward.tunnelLocalPort ?? newForward.localAddress));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tvalidationMessage: (value) => validateInput(tunnelService, value, tunnelService.canElevate),\n\t\t\t\t\tplaceholder: nls.localize('remote.tunnelsView.changePort', \"New local port\")\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n}\n\nnamespace ChangeTunnelPrivacyAction {\n\texport function handler(privacyId: string): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\tif (isITunnelItem(arg)) {\n\t\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\t\tawait remoteExplorerService.close({ host: arg.remoteHost, port: arg.remotePort }, TunnelCloseReason.Other);\n\t\t\t\treturn remoteExplorerService.forward({\n\t\t\t\t\tremote: { host: arg.remoteHost, port: arg.remotePort },\n\t\t\t\t\tlocal: arg.localPort,\n\t\t\t\t\tname: arg.name,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tprivacy: privacyId,\n\t\t\t\t\tsource: arg.source\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t};\n\t}\n}\n\nnamespace SetTunnelProtocolAction {\n\texport const ID_HTTP = 'remote.tunnel.setProtocolHttp';\n\texport const ID_HTTPS = 'remote.tunnel.setProtocolHttps';\n\texport const LABEL_HTTP = nls.localize('remote.tunnel.protocolHttp', \"HTTP\");\n\texport const LABEL_HTTPS = nls.localize('remote.tunnel.protocolHttps', \"HTTPS\");\n\n\tasync function handler(arg: any, protocol: TunnelProtocol, remoteExplorerService: IRemoteExplorerService, environmentService: IWorkbenchEnvironmentService) {\n\t\tif (isITunnelItem(arg)) {\n\t\t\tconst attributes: Partial<Attributes> = {\n\t\t\t\tprotocol\n\t\t\t};\n\t\t\tconst target = environmentService.remoteAuthority ? ConfigurationTarget.USER_REMOTE : ConfigurationTarget.USER_LOCAL;\n\t\t\treturn remoteExplorerService.tunnelModel.configPortsAttributes.addAttributes(arg.remotePort, attributes, target);\n\t\t}\n\t}\n\n\texport function handlerHttp(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\treturn handler(arg, TunnelProtocol.Http, accessor.get(IRemoteExplorerService), accessor.get(IWorkbenchEnvironmentService));\n\t\t};\n\t}\n\n\texport function handlerHttps(): ICommandHandler {\n\t\treturn async (accessor, arg) => {\n\t\t\treturn handler(arg, TunnelProtocol.Https, accessor.get(IRemoteExplorerService), accessor.get(IWorkbenchEnvironmentService));\n\t\t};\n\t}\n}\n\nconst tunnelViewCommandsWeightBonus = 10; // give our commands a little bit more weight over other default list/tree commands\n\nconst isForwardedExpr = TunnelTypeContextKey.isEqualTo(TunnelType.Forwarded);\nconst isForwardedOrDetectedExpr = ContextKeyExpr.or(isForwardedExpr, TunnelTypeContextKey.isEqualTo(TunnelType.Detected));\nconst isNotMultiSelectionExpr = TunnelViewMultiSelectionContextKey.isEqualTo(undefined);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: LabelTunnelAction.ID,\n\tweight: KeybindingWeight.WorkbenchContrib + tunnelViewCommandsWeightBonus,\n\twhen: ContextKeyExpr.and(TunnelViewFocusContextKey, isForwardedExpr, isNotMultiSelectionExpr),\n\tprimary: KeyCode.F2,\n\tmac: {\n\t\tprimary: KeyCode.Enter\n\t},\n\thandler: LabelTunnelAction.handler()\n});\nCommandsRegistry.registerCommand(ForwardPortAction.INLINE_ID, ForwardPortAction.inlineHandler());\nCommandsRegistry.registerCommand(ForwardPortAction.COMMANDPALETTE_ID, ForwardPortAction.commandPaletteHandler());\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: ClosePortAction.INLINE_ID,\n\tweight: KeybindingWeight.WorkbenchContrib + tunnelViewCommandsWeightBonus,\n\twhen: ContextKeyExpr.and(TunnelCloseableContextKey, TunnelViewFocusContextKey),\n\tprimary: KeyCode.Delete,\n\tmac: {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\tsecondary: [KeyCode.Delete]\n\t},\n\thandler: ClosePortAction.inlineHandler()\n});\n\nCommandsRegistry.registerCommand(ClosePortAction.COMMANDPALETTE_ID, ClosePortAction.commandPaletteHandler());\nCommandsRegistry.registerCommand(OpenPortInBrowserAction.ID, OpenPortInBrowserAction.handler());\nCommandsRegistry.registerCommand(OpenPortInPreviewAction.ID, OpenPortInPreviewAction.handler());\nCommandsRegistry.registerCommand(OpenPortInBrowserCommandPaletteAction.ID, OpenPortInBrowserCommandPaletteAction.handler());\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: CopyAddressAction.INLINE_ID,\n\tweight: KeybindingWeight.WorkbenchContrib + tunnelViewCommandsWeightBonus,\n\twhen: ContextKeyExpr.and(TunnelViewFocusContextKey, isForwardedOrDetectedExpr, isNotMultiSelectionExpr),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\thandler: CopyAddressAction.inlineHandler()\n});\nCommandsRegistry.registerCommand(CopyAddressAction.COMMANDPALETTE_ID, CopyAddressAction.commandPaletteHandler());\nCommandsRegistry.registerCommand(ChangeLocalPortAction.ID, ChangeLocalPortAction.handler());\nCommandsRegistry.registerCommand(SetTunnelProtocolAction.ID_HTTP, SetTunnelProtocolAction.handlerHttp());\nCommandsRegistry.registerCommand(SetTunnelProtocolAction.ID_HTTPS, SetTunnelProtocolAction.handlerHttps());\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, ({\n\tcommand: {\n\t\tid: ClosePortAction.COMMANDPALETTE_ID,\n\t\ttitle: ClosePortAction.LABEL\n\t},\n\twhen: forwardedPortsViewEnabled\n}));\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, ({\n\tcommand: {\n\t\tid: ForwardPortAction.COMMANDPALETTE_ID,\n\t\ttitle: ForwardPortAction.LABEL\n\t},\n\twhen: forwardedPortsViewEnabled\n}));\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, ({\n\tcommand: {\n\t\tid: CopyAddressAction.COMMANDPALETTE_ID,\n\t\ttitle: CopyAddressAction.COMMANDPALETTE_LABEL\n\t},\n\twhen: forwardedPortsViewEnabled\n}));\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, ({\n\tcommand: {\n\t\tid: OpenPortInBrowserCommandPaletteAction.ID,\n\t\ttitle: OpenPortInBrowserCommandPaletteAction.LABEL\n\t},\n\twhen: forwardedPortsViewEnabled\n}));\n\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '._open',\n\torder: 0,\n\tcommand: {\n\t\tid: OpenPortInBrowserAction.ID,\n\t\ttitle: OpenPortInBrowserAction.LABEL,\n\t},\n\twhen: ContextKeyExpr.and(isForwardedOrDetectedExpr, isNotMultiSelectionExpr)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '._open',\n\torder: 1,\n\tcommand: {\n\t\tid: OpenPortInPreviewAction.ID,\n\t\ttitle: OpenPortInPreviewAction.LABEL,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tisForwardedOrDetectedExpr,\n\t\tisNotMultiSelectionExpr)\n}));\n// The group 0_manage is used by extensions, so try not to change it\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '0_manage',\n\torder: 1,\n\tcommand: {\n\t\tid: LabelTunnelAction.ID,\n\t\ttitle: LabelTunnelAction.LABEL,\n\t\ticon: labelPortIcon\n\t},\n\twhen: ContextKeyExpr.and(isForwardedExpr, isNotMultiSelectionExpr)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '2_localaddress',\n\torder: 0,\n\tcommand: {\n\t\tid: CopyAddressAction.INLINE_ID,\n\t\ttitle: CopyAddressAction.INLINE_LABEL,\n\t},\n\twhen: ContextKeyExpr.and(isForwardedOrDetectedExpr, isNotMultiSelectionExpr)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '2_localaddress',\n\torder: 1,\n\tcommand: {\n\t\tid: ChangeLocalPortAction.ID,\n\t\ttitle: ChangeLocalPortAction.LABEL,\n\t},\n\twhen: ContextKeyExpr.and(isForwardedExpr, PortChangableContextKey, isNotMultiSelectionExpr)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '2_localaddress',\n\torder: 2,\n\tsubmenu: MenuId.TunnelPrivacy,\n\ttitle: nls.localize('tunnelContext.privacyMenu', \"Port Visibility\"),\n\twhen: ContextKeyExpr.and(isForwardedExpr, TunnelPrivacyEnabledContextKey)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '2_localaddress',\n\torder: 3,\n\tsubmenu: MenuId.TunnelProtocol,\n\ttitle: nls.localize('tunnelContext.protocolMenu', \"Change Port Protocol\"),\n\twhen: ContextKeyExpr.and(isForwardedExpr, isNotMultiSelectionExpr, ProtocolChangeableContextKey)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '3_forward',\n\torder: 0,\n\tcommand: {\n\t\tid: ClosePortAction.INLINE_ID,\n\t\ttitle: ClosePortAction.LABEL,\n\t},\n\twhen: TunnelCloseableContextKey\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelContext, ({\n\tgroup: '3_forward',\n\torder: 1,\n\tcommand: {\n\t\tid: ForwardPortAction.INLINE_ID,\n\t\ttitle: ForwardPortAction.LABEL,\n\t},\n}));\n\nMenuRegistry.appendMenuItem(MenuId.TunnelProtocol, ({\n\torder: 0,\n\tcommand: {\n\t\tid: SetTunnelProtocolAction.ID_HTTP,\n\t\ttitle: SetTunnelProtocolAction.LABEL_HTTP,\n\t\ttoggled: TunnelProtocolContextKey.isEqualTo(TunnelProtocol.Http)\n\t}\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelProtocol, ({\n\torder: 1,\n\tcommand: {\n\t\tid: SetTunnelProtocolAction.ID_HTTPS,\n\t\ttitle: SetTunnelProtocolAction.LABEL_HTTPS,\n\t\ttoggled: TunnelProtocolContextKey.isEqualTo(TunnelProtocol.Https)\n\t}\n}));\n\n\nMenuRegistry.appendMenuItem(MenuId.TunnelPortInline, ({\n\tgroup: '0_manage',\n\torder: 0,\n\tcommand: {\n\t\tid: ForwardPortAction.INLINE_ID,\n\t\ttitle: ForwardPortAction.TREEITEM_LABEL,\n\t\ticon: forwardPortIcon\n\t},\n\twhen: TunnelTypeContextKey.isEqualTo(TunnelType.Candidate)\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelPortInline, ({\n\tgroup: '0_manage',\n\torder: 4,\n\tcommand: {\n\t\tid: LabelTunnelAction.ID,\n\t\ttitle: LabelTunnelAction.LABEL,\n\t\ticon: labelPortIcon\n\t},\n\twhen: isForwardedExpr\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelPortInline, ({\n\tgroup: '0_manage',\n\torder: 5,\n\tcommand: {\n\t\tid: ClosePortAction.INLINE_ID,\n\t\ttitle: ClosePortAction.LABEL,\n\t\ticon: stopForwardIcon\n\t},\n\twhen: TunnelCloseableContextKey\n}));\n\nMenuRegistry.appendMenuItem(MenuId.TunnelLocalAddressInline, ({\n\torder: -1,\n\tcommand: {\n\t\tid: CopyAddressAction.INLINE_ID,\n\t\ttitle: CopyAddressAction.INLINE_LABEL,\n\t\ticon: copyAddressIcon\n\t},\n\twhen: isForwardedOrDetectedExpr\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelLocalAddressInline, ({\n\torder: 0,\n\tcommand: {\n\t\tid: OpenPortInBrowserAction.ID,\n\t\ttitle: OpenPortInBrowserAction.LABEL,\n\t\ticon: openBrowserIcon\n\t},\n\twhen: isForwardedOrDetectedExpr\n}));\nMenuRegistry.appendMenuItem(MenuId.TunnelLocalAddressInline, ({\n\torder: 1,\n\tcommand: {\n\t\tid: OpenPortInPreviewAction.ID,\n\t\ttitle: OpenPortInPreviewAction.LABEL,\n\t\ticon: openPreviewIcon\n\t},\n\twhen: isForwardedOrDetectedExpr\n}));\n\nregisterColor('ports.iconRunningProcessForeground', STATUS_BAR_REMOTE_ITEM_BACKGROUND, nls.localize('portWithRunningProcess.foreground', \"The color of the icon for a port that has an associated running process.\"));\n\n"],
  "mappings": "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",
  "names": ["value", "LabelTunnelAction", "ForwardPortAction", "ClosePortAction", "OpenPortInBrowserAction", "OpenPortInPreviewAction", "OpenPortInBrowserCommandPaletteAction", "CopyAddressAction", "ChangeLocalPortAction", "tunnelService", "ChangeTunnelPrivacyAction", "SetTunnelProtocolAction"]
}
