{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/suggest/common/terminalSuggestConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../../base/common/collections.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport type { IConfigurationPropertySchema } from \"../../../../../platform/configuration/common/configurationRegistry.js\";\nimport { TerminalSettingId } from \"../../../../../platform/terminal/common/terminal.js\";\n\nexport enum TerminalSuggestSettingId {\n\tEnabled = \"terminal.integrated.suggest.enabled\",\n\tQuickSuggestions = \"terminal.integrated.suggest.quickSuggestions\",\n\tSuggestOnTriggerCharacters = \"terminal.integrated.suggest.suggestOnTriggerCharacters\",\n\tRunOnEnter = \"terminal.integrated.suggest.runOnEnter\",\n\tBuiltinCompletions = \"terminal.integrated.suggest.builtinCompletions\",\n}\n\nexport const terminalSuggestConfigSection = \"terminal.integrated.suggest\";\n\nexport interface ITerminalSuggestConfiguration {\n\tenabled: boolean;\n\tquickSuggestions: boolean;\n\tsuggestOnTriggerCharacters: boolean;\n\trunOnEnter: \"never\" | \"exactMatch\" | \"exactMatchIgnoreExtension\" | \"always\";\n\tbuiltinCompletions: {\n\t\tpwshCode: boolean;\n\t\tpwshGit: boolean;\n\t};\n}\n\nexport const terminalSuggestConfiguration: IStringDictionary<IConfigurationPropertySchema> =\n\t{\n\t\t[TerminalSuggestSettingId.Enabled]: {\n\t\t\trestricted: true,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"suggest.enabled\",\n\t\t\t\t\"Enables experimental terminal Intellisense suggestions for supported shells ({0}) when {1} is set to {2}.\\n\\nIf shell integration is installed manually, {3} needs to be set to {4} before calling the shell integration script.\",\n\t\t\t\t\"PowerShell v7+\",\n\t\t\t\t`\\`#${TerminalSettingId.ShellIntegrationEnabled}#\\``,\n\t\t\t\t\"`true`\",\n\t\t\t\t\"`VSCODE_SUGGEST`\",\n\t\t\t\t\"`1`\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t},\n\t\t[TerminalSuggestSettingId.QuickSuggestions]: {\n\t\t\trestricted: true,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"suggest.quickSuggestions\",\n\t\t\t\t\"Controls whether suggestions should automatically show up while typing. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.\",\n\t\t\t\t`\\`#${TerminalSuggestSettingId.SuggestOnTriggerCharacters}#\\``,\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TerminalSuggestSettingId.SuggestOnTriggerCharacters]: {\n\t\t\trestricted: true,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"suggest.suggestOnTriggerCharacters\",\n\t\t\t\t\"Controls whether suggestions should automatically show up when typing trigger characters.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TerminalSuggestSettingId.RunOnEnter]: {\n\t\t\trestricted: true,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"suggest.runOnEnter\",\n\t\t\t\t\"Controls whether suggestions should run immediately when `Enter` (not `Tab`) is used to accept the result.\",\n\t\t\t),\n\t\t\tenum: [\n\t\t\t\t\"ignore\",\n\t\t\t\t\"never\",\n\t\t\t\t\"exactMatch\",\n\t\t\t\t\"exactMatchIgnoreExtension\",\n\t\t\t\t\"always\",\n\t\t\t],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"runOnEnter.ignore\",\n\t\t\t\t\t\"Ignore suggestions and send the enter directly to the shell without completing. This is used as the default value so the suggest widget is as unobtrusive as possible.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\"runOnEnter.never\", \"Never run on `Enter`.\"),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"runOnEnter.exactMatch\",\n\t\t\t\t\t\"Run on `Enter` when the suggestion is typed in its entirety.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"runOnEnter.exactMatchIgnoreExtension\",\n\t\t\t\t\t\"Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\"runOnEnter.always\", \"Always run on `Enter`.\"),\n\t\t\t],\n\t\t\tdefault: \"ignore\",\n\t\t},\n\t\t[TerminalSuggestSettingId.BuiltinCompletions]: {\n\t\t\trestricted: true,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"suggest.builtinCompletions\",\n\t\t\t\t\"Controls which built-in completions are activated. This setting can cause conflicts if custom shell completions are configured in the shell profile.\",\n\t\t\t),\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tpwshCode: {\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"suggest.builtinCompletions.pwshCode\",\n\t\t\t\t\t\t\"Custom PowerShell argument completers will be registered for VS Code's `code` and `code-insiders` CLIs. This is currently very basic and always suggests flags and subcommands without checking context.\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t},\n\t\t\t\tpwshGit: {\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"suggest.builtinCompletions.pwshGit\",\n\t\t\t\t\t\t\"Custom PowerShell argument completers will be registered for the `git` CLI.\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: {\n\t\t\t\tpwshCode: true,\n\t\t\t\tpwshGit: true,\n\t\t\t},\n\t\t},\n\t};\n"],
  "mappings": "AAMA,SAAS,gBAAgB;AAEzB,SAAS,yBAAyB;AAE3B,IAAK,2BAAL,kBAAKA,8BAAL;AACN,EAAAA,0BAAA,aAAU;AACV,EAAAA,0BAAA,sBAAmB;AACnB,EAAAA,0BAAA,gCAA6B;AAC7B,EAAAA,0BAAA,gBAAa;AACb,EAAAA,0BAAA,wBAAqB;AALV,SAAAA;AAAA,GAAA;AAQL,MAAM,+BAA+B;AAarC,MAAM,+BACZ;AAAA,EACC,CAAC,mDAAgC,GAAG;AAAA,IACnC,YAAY;AAAA,IACZ,qBAAqB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,kBAAkB,uBAAuB;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AAAA,EACA,CAAC,qEAAyC,GAAG;AAAA,IAC5C,YAAY;AAAA,IACZ,qBAAqB;AAAA,MACpB;AAAA,MACA;AAAA,MACA,MAAM,yFAAmD;AAAA,IAC1D;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AAAA,EACA,CAAC,yFAAmD,GAAG;AAAA,IACtD,YAAY;AAAA,IACZ,qBAAqB;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AAAA,EACA,CAAC,yDAAmC,GAAG;AAAA,IACtC,YAAY;AAAA,IACZ,qBAAqB;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,IACA,0BAA0B;AAAA,MACzB;AAAA,QACC;AAAA,QACA;AAAA,MACD;AAAA,MACA,SAAS,oBAAoB,uBAAuB;AAAA,MACpD;AAAA,QACC;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,MACD;AAAA,MACA,SAAS,qBAAqB,wBAAwB;AAAA,IACvD;AAAA,IACA,SAAS;AAAA,EACV;AAAA,EACA,CAAC,yEAA2C,GAAG;AAAA,IAC9C,YAAY;AAAA,IACZ,qBAAqB;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,IACN,YAAY;AAAA,MACX,UAAU;AAAA,QACT,aAAa;AAAA,UACZ;AAAA,UACA;AAAA,QACD;AAAA,QACA,MAAM;AAAA,MACP;AAAA,MACA,SAAS;AAAA,QACR,aAAa;AAAA,UACZ;AAAA,UACA;AAAA,QACD;AAAA,QACA,MAAM;AAAA,MACP;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR,UAAU;AAAA,MACV,SAAS;AAAA,IACV;AAAA,EACD;AACD;",
  "names": ["TerminalSuggestSettingId"]
}
