{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/suggest/test/browser/terminalSuggestAddon.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from '@xterm/xterm';\nimport { strictEqual } from 'assert';\nimport { getActiveDocument } from '../../../../../../base/browser/dom.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IContextKeyService, type IContextKey } from '../../../../../../platform/contextkey/common/contextkey.js';\nimport { NullLogService } from '../../../../../../platform/log/common/log.js';\nimport { TerminalCapability } from '../../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport type { TerminalCapabilityStore } from '../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { ShellIntegrationAddon } from '../../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js';\nimport { TerminalContextKeys } from '../../../../terminal/common/terminalContextKey.js';\nimport { parseCompletionsFromShell, SuggestAddon } from '../../browser/terminalSuggestAddon.js';\nimport { TerminalSuggestCommandId } from '../../common/terminal.suggest.js';\nimport type { ITerminalSuggestConfiguration } from '../../common/terminalSuggestConfiguration.js';\nimport { workbenchInstantiationService, type TestTerminalConfigurationService } from '../../../../../test/browser/workbenchTestServices.js';\n\nimport { events as macos_bash_echo_simple } from './recordings/macos_bash_echo_simple.js';\nimport { events as macos_bash_echo_multiline } from './recordings/macos_bash_echo_multiline.js';\nimport { events as windows11_pwsh_getcontent_delete_ghost } from './recordings/windows11_pwsh_getcontent_delete_ghost.js';\nimport { events as windows11_pwsh_getcontent_file } from './recordings/windows11_pwsh_getcontent_file.js';\nimport { events as windows11_pwsh_input_ls_complete_ls } from './recordings/windows11_pwsh_input_ls_complete_ls.js';\nimport { events as windows11_pwsh_namespace_completion } from './recordings/windows11_pwsh_namespace_completion.js';\nimport { events as windows11_pwsh_type_before_prompt } from './recordings/windows11_pwsh_type_before_prompt.js';\nimport { events as windows11_pwsh_writehost_multiline_nav_up } from './recordings/windows11_pwsh_writehost_multiline_nav_up.js';\nimport { events as windows11_pwsh_writehost_multiline } from './recordings/windows11_pwsh_writehost_multiline.js';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { testRawPwshCompletions } from './testRawPwshCompletions.js';\nimport { ITerminalConfigurationService } from '../../../../terminal/browser/terminal.js';\nimport { timeout } from '../../../../../../base/common/async.js';\n\nconst recordedTestCases: { name: string; events: RecordedSessionEvent[] }[] = [\n\t{ name: 'macos_bash_echo_simple', events: macos_bash_echo_simple as any as RecordedSessionEvent[] },\n\t{ name: 'macos_bash_echo_multiline', events: macos_bash_echo_multiline as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_getcontent_delete_ghost', events: windows11_pwsh_getcontent_delete_ghost as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_getcontent_file', events: windows11_pwsh_getcontent_file as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_input_ls_complete_ls', events: windows11_pwsh_input_ls_complete_ls as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_namespace_completion', events: windows11_pwsh_namespace_completion as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_type_before_prompt', events: windows11_pwsh_type_before_prompt as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_writehost_multiline_nav_up', events: windows11_pwsh_writehost_multiline_nav_up as any as RecordedSessionEvent[] },\n\t{ name: 'windows11_pwsh_writehost_multiline', events: windows11_pwsh_writehost_multiline as any as RecordedSessionEvent[] }\n];\n\ntype RecordedSessionEvent = IRecordedSessionTerminalEvent | IRecordedSessionCommandEvent | IRecordedSessionResizeEvent;\n\ninterface IRecordedSessionTerminalEvent {\n\ttype: 'output' | 'input' | 'sendText' | 'promptInputChange';\n\tdata: string;\n}\n\ninterface IRecordedSessionCommandEvent {\n\ttype: 'command';\n\tid: string;\n}\n\ninterface IRecordedSessionResizeEvent {\n\ttype: 'resize';\n\tcols: number;\n\trows: number;\n}\n\nsuite('Terminal Contrib Suggest Recordings', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet xterm: Terminal;\n\tlet capabilities: TerminalCapabilityStore;\n\tlet suggestWidgetVisibleContextKey: IContextKey<boolean>;\n\tlet suggestAddon: SuggestAddon;\n\n\tsetup(async () => {\n\t\tconst terminalConfig = {\n\t\t\tfontFamily: 'monospace',\n\t\t\tfontSize: 12,\n\t\t\tfontWeight: 'normal',\n\t\t\tletterSpacing: 0,\n\t\t\tlineHeight: 1,\n\t\t\tintegrated: {\n\t\t\t\tsuggest: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tquickSuggestions: true,\n\t\t\t\t\tsuggestOnTriggerCharacters: true,\n\t\t\t\t\trunOnEnter: 'never',\n\t\t\t\t\tbuiltinCompletions: {\n\t\t\t\t\t\tpwshCode: true,\n\t\t\t\t\t\tpwshGit: true\n\t\t\t\t\t}\n\t\t\t\t} satisfies ITerminalSuggestConfiguration\n\t\t\t}\n\t\t};\n\t\tconst instantiationService = workbenchInstantiationService({\n\t\t\tconfigurationService: () => new TestConfigurationService({\n\t\t\t\tfiles: { autoSave: false },\n\t\t\t\tterminal: terminalConfig\n\t\t\t})\n\t\t}, store);\n\t\tconst terminalConfigurationService = instantiationService.get(ITerminalConfigurationService) as TestTerminalConfigurationService;\n\t\tterminalConfigurationService.setConfig(terminalConfig as any);\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true }));\n\t\tconst shellIntegrationAddon = store.add(new ShellIntegrationAddon('', true, undefined, new NullLogService));\n\t\tcapabilities = shellIntegrationAddon.capabilities;\n\t\tsuggestWidgetVisibleContextKey = TerminalContextKeys.suggestWidgetVisible.bindTo(instantiationService.get(IContextKeyService));\n\t\tsuggestAddon = store.add(instantiationService.createInstance(SuggestAddon, new Set(parseCompletionsFromShell(testRawPwshCompletions)), shellIntegrationAddon.capabilities, suggestWidgetVisibleContextKey));\n\n\t\tconst testContainer = document.createElement('div');\n\t\tgetActiveDocument().body.append(testContainer);\n\t\txterm.open(testContainer);\n\t\tsuggestAddon.setContainerWithOverflow(testContainer);\n\t\tsuggestAddon.setScreen(xterm.element!.querySelector('.xterm-screen')!);\n\n\t\txterm.loadAddon(shellIntegrationAddon);\n\t\txterm.loadAddon(suggestAddon);\n\n\t\txterm.focus();\n\t});\n\n\tfor (const testCase of recordedTestCases) {\n\t\ttest(testCase.name, async () => {\n\t\t\tconst suggestDataEvents: string[] = [];\n\t\t\tstore.add(suggestAddon.onAcceptedCompletion(e => suggestDataEvents.push(e)));\n\t\t\tfor (const event of testCase.events) {\n\t\t\t\t// DEBUG: Uncomment to see the events as they are played\n\t\t\t\t// console.log(\n\t\t\t\t// \tevent.type,\n\t\t\t\t// \tevent.type === 'command'\n\t\t\t\t// \t\t? event.id\n\t\t\t\t// \t\t: event.type === 'resize'\n\t\t\t\t// \t\t\t? `${event.cols}x${event.rows}`\n\t\t\t\t// \t\t\t: (event.data.length > 50 ? event.data.slice(0, 50) + '...' : event.data).replaceAll('\\x1b', '\\\\x1b').replace(/(\\n|\\r).+$/, '...')\n\t\t\t\t// );\n\t\t\t\t// console.log('promptInputModel', capabilities.get(TerminalCapability.CommandDetection)?.promptInputModel.getCombinedString());\n\t\t\t\tswitch (event.type) {\n\t\t\t\t\tcase 'resize': {\n\t\t\t\t\t\txterm.resize(event.cols, event.rows);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'output': {\n\t\t\t\t\t\t// If the output contains the command start sequence, allow time for the prompt to get adjusted.\n\t\t\t\t\t\tif (event.data.includes('\\x1b]633;B')) {\n\t\t\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\t\t\tnew Promise<void>(r => xterm.write(event.data, () => r())),\n\t\t\t\t\t\t\t\tnew Promise<void>(r => {\n\t\t\t\t\t\t\t\t\tconst commandDetection = capabilities.get(TerminalCapability.CommandDetection);\n\t\t\t\t\t\t\t\t\tif (commandDetection) {\n\t\t\t\t\t\t\t\t\t\tconst d = commandDetection.onCommandStarted(() => {\n\t\t\t\t\t\t\t\t\t\t\td.dispose();\n\t\t\t\t\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait new Promise<void>(r => xterm.write(event.data, () => r()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'input': {\n\t\t\t\t\t\txterm.input(event.data, true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'promptInputChange': {\n\t\t\t\t\t\tconst promptInputModel = capabilities.get(TerminalCapability.CommandDetection)?.promptInputModel;\n\t\t\t\t\t\tif (promptInputModel && promptInputModel.getCombinedString() !== event.data) {\n\t\t\t\t\t\t\tawait Promise.race([\n\t\t\t\t\t\t\t\tawait timeout(1000).then(() => { throw new Error(`Prompt input change timed out current=\"${promptInputModel.getCombinedString()}\", expected=\"${event.data}\"`); }),\n\t\t\t\t\t\t\t\tawait new Promise<void>(r => {\n\t\t\t\t\t\t\t\t\tconst d = promptInputModel.onDidChangeInput(() => {\n\t\t\t\t\t\t\t\t\t\tif (promptInputModel.getCombinedString() === event.data) {\n\t\t\t\t\t\t\t\t\t\t\td.dispose();\n\t\t\t\t\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'sendText': {\n\t\t\t\t\t\tstrictEqual(suggestDataEvents.at(-1), event.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'command': {\n\t\t\t\t\t\tswitch (event.id) {\n\t\t\t\t\t\t\tcase TerminalSuggestCommandId.AcceptSelectedSuggestion:\n\t\t\t\t\t\t\t\tsuggestAddon.acceptSelectedSuggestion();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
