{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/suggest/browser/terminal.suggest.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal as RawXtermTerminal } from '@xterm/xterm';\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { AutoOpenBarrier } from '../../../../../base/common/async.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { localize2 } from '../../../../../nls.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, IReadableSet } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { TerminalLocation, TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\nimport { ShellIntegrationOscPs } from '../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js';\nimport { ITerminalContribution, ITerminalInstance, IXtermTerminal } from '../../../terminal/browser/terminal.js';\nimport { registerActiveInstanceAction } from '../../../terminal/browser/terminalActions.js';\nimport { registerTerminalContribution } from '../../../terminal/browser/terminalExtensions.js';\nimport { TerminalWidgetManager } from '../../../terminal/browser/widgets/widgetManager.js';\nimport { ITerminalProcessManager, TERMINAL_CONFIG_SECTION, type ITerminalConfiguration } from '../../../terminal/common/terminal.js';\nimport { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';\nimport { parseCompletionsFromShell, SuggestAddon, VSCodeSuggestOscPt, type CompressedPwshCompletion, type PwshCompletion } from './terminalSuggestAddon.js';\nimport { TerminalSuggestCommandId } from '../common/terminal.suggest.js';\nimport { terminalSuggestConfigSection, TerminalSuggestSettingId, type ITerminalSuggestConfiguration } from '../common/terminalSuggestConfiguration.js';\nimport { SimpleCompletionItem } from '../../../../services/suggest/browser/simpleCompletionItem.js';\n\nconst enum Constants {\n\tCachedPwshCommandsStorageKey = 'terminal.suggest.pwshCommands'\n}\n\n// #region Terminal Contributions\n\nclass TerminalSuggestContribution extends DisposableStore implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.suggest';\n\n\tstatic get(instance: ITerminalInstance): TerminalSuggestContribution | null {\n\t\treturn instance.getContribution<TerminalSuggestContribution>(TerminalSuggestContribution.ID);\n\t}\n\n\tprivate _xterm?: RawXtermTerminal;\n\tprivate readonly _addon: MutableDisposable<SuggestAddon> = new MutableDisposable();\n\tprivate _terminalSuggestWidgetContextKeys: IReadableSet<string> = new Set(TerminalContextKeys.suggestWidgetVisible.key);\n\tprivate _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean>;\n\n\tget addon(): SuggestAddon | undefined { return this._addon.value; }\n\n\tprivate static readonly _cachedPwshCommands: Set<SimpleCompletionItem> = new Set();\n\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.add(toDisposable(() => this._addon?.dispose()));\n\t\tthis._terminalSuggestWidgetVisibleContextKey = TerminalContextKeys.suggestWidgetVisible.bindTo(this._contextKeyService);\n\n\t\t// Attempt to load cached pwsh commands if not already loaded\n\t\tif (TerminalSuggestContribution._cachedPwshCommands.size === 0) {\n\t\t\tconst config = this._storageService.get(Constants.CachedPwshCommandsStorageKey, StorageScope.APPLICATION, undefined);\n\t\t\tif (config !== undefined) {\n\t\t\t\tconst completions = JSON.parse(config);\n\t\t\t\tfor (const c of completions) {\n\t\t\t\t\tTerminalSuggestContribution._cachedPwshCommands.add(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.add(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSuggestSettingId.Enabled)) {\n\t\t\t\tthis.clearSuggestCache();\n\t\t\t}\n\t\t}));\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tthis._xterm = xterm.raw;\n\t\tconst config = this._configurationService.getValue<ITerminalSuggestConfiguration>(terminalSuggestConfigSection);\n\t\tconst enabled = config.enabled;\n\t\tif (!enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.add(xterm.raw.parser.registerOscHandler(ShellIntegrationOscPs.VSCode, data => {\n\t\t\treturn this._handleVSCodeSequence(data);\n\t\t}));\n\t}\n\n\tprivate _handleVSCodeSequence(data: string): boolean | Promise<boolean> {\n\t\tif (!this._xterm) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\tconst [command, ...args] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase VSCodeSuggestOscPt.CompletionsPwshCommands:\n\t\t\t\treturn this._handleCompletionsPwshCommandsSequence(this._xterm, data, command, args);\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tprivate async _handleCompletionsPwshCommandsSequence(terminal: RawXtermTerminal, data: string, command: string, args: string[]): Promise<boolean> {\n\t\tconst type = args[0];\n\t\tconst rawCompletions: PwshCompletion | PwshCompletion[] | CompressedPwshCompletion[] | CompressedPwshCompletion = JSON.parse(data.slice(command.length + type.length + 2/*semi-colons*/));\n\t\tconst completions = parseCompletionsFromShell(rawCompletions);\n\n\t\tconst set = TerminalSuggestContribution._cachedPwshCommands;\n\t\tset.clear();\n\t\tfor (const c of completions) {\n\t\t\tset.add(c);\n\t\t}\n\n\t\tthis._storageService.store(Constants.CachedPwshCommandsStorageKey, JSON.stringify(Array.from(set.values())), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\t\treturn true;\n\t}\n\n\tclearSuggestCache(): void {\n\t\tTerminalSuggestContribution._cachedPwshCommands.clear();\n\t\tthis._storageService.remove(Constants.CachedPwshCommandsStorageKey, StorageScope.APPLICATION);\n\t}\n\n\txtermOpen(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tconst config = this._configurationService.getValue<ITerminalSuggestConfiguration>(terminalSuggestConfigSection);\n\t\tconst enabled = config.enabled;\n\t\tif (!enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.add(Event.runAndSubscribe(this._instance.onDidChangeShellType, async () => {\n\t\t\tthis._loadSuggestAddon(xterm.raw);\n\t\t}));\n\t\tthis.add(this._contextKeyService.onDidChangeContext(e => {\n\t\t\tif (e.affectsSome(this._terminalSuggestWidgetContextKeys)) {\n\t\t\t\tthis._loadSuggestAddon(xterm.raw);\n\t\t\t}\n\t\t}));\n\t\tthis.add(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.SendKeybindingsToShell)) {\n\t\t\t\tthis._loadSuggestAddon(xterm.raw);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _loadSuggestAddon(xterm: RawXtermTerminal): void {\n\t\tconst sendingKeybindingsToShell = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION).sendKeybindingsToShell;\n\t\tif (sendingKeybindingsToShell || this._instance.shellType !== 'pwsh') {\n\t\t\tthis._addon.clear();\n\t\t\treturn;\n\t\t}\n\t\tif (this._terminalSuggestWidgetVisibleContextKey) {\n\t\t\tconst addon = this._addon.value = this._instantiationService.createInstance(SuggestAddon, TerminalSuggestContribution._cachedPwshCommands, this._instance.capabilities, this._terminalSuggestWidgetVisibleContextKey);\n\t\t\txterm.loadAddon(addon);\n\t\t\tif (this._instance.target === TerminalLocation.Editor) {\n\t\t\t\taddon.setContainerWithOverflow(xterm.element!);\n\t\t\t} else {\n\t\t\t\taddon.setContainerWithOverflow(dom.findParentWithClass(xterm.element!, 'panel')!);\n\t\t\t}\n\t\t\taddon.setScreen(xterm.element!.querySelector('.xterm-screen')!);\n\t\t\tthis.add(this._instance.onDidBlur(() => addon.hideSuggestWidget()));\n\t\t\tthis.add(addon.onAcceptedCompletion(async text => {\n\t\t\t\tthis._instance.focus();\n\t\t\t\tthis._instance.sendText(text, false);\n\t\t\t}));\n\t\t\tthis.add(this._instance.onWillPaste(() => addon.isPasting = true));\n\t\t\tthis.add(this._instance.onDidPaste(() => {\n\t\t\t\t// Delay this slightly as synchronizing the prompt input is debounced\n\t\t\t\tsetTimeout(() => addon.isPasting = false, 100);\n\t\t\t}));\n\n\t\t\t// If completions are requested, pause and queue input events until completions are\n\t\t\t// received. This fixing some problems in PowerShell, particularly enter not executing\n\t\t\t// when typing quickly and some characters being printed twice. On Windows this isn't\n\t\t\t// needed because inputs are _not_ echoed when not handled immediately.\n\t\t\t// TODO: This should be based on the OS of the pty host, not the client\n\t\t\tif (!isWindows) {\n\t\t\t\tlet barrier: AutoOpenBarrier | undefined;\n\t\t\t\tthis.add(addon.onDidRequestCompletions(() => {\n\t\t\t\t\tbarrier = new AutoOpenBarrier(2000);\n\t\t\t\t\tthis._instance.pauseInputEvents(barrier);\n\t\t\t\t}));\n\t\t\t\tthis.add(addon.onDidReceiveCompletions(() => {\n\t\t\t\t\tbarrier?.open();\n\t\t\t\t\tbarrier = undefined;\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterTerminalContribution(TerminalSuggestContribution.ID, TerminalSuggestContribution);\n\n// #endregion\n\n// #region Actions\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectPrevSuggestion,\n\ttitle: localize2('workbench.action.terminal.selectPrevSuggestion', 'Select the Previous Suggestion'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\t// Up is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.UpArrow,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.selectPreviousSuggestion()\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectPrevPageSuggestion,\n\ttitle: localize2('workbench.action.terminal.selectPrevPageSuggestion', 'Select the Previous Page Suggestion'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\t// Up is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.PageUp,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.selectPreviousPageSuggestion()\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectNextSuggestion,\n\ttitle: localize2('workbench.action.terminal.selectNextSuggestion', 'Select the Next Suggestion'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\t// Down is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.DownArrow,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.selectNextSuggestion()\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectNextPageSuggestion,\n\ttitle: localize2('workbench.action.terminal.selectNextPageSuggestion', 'Select the Next Page Suggestion'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\t// Down is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.PageDown,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.selectNextPageSuggestion()\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.AcceptSelectedSuggestion,\n\ttitle: localize2('workbench.action.terminal.acceptSelectedSuggestion', 'Accept Selected Suggestion'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\tprimary: KeyCode.Tab,\n\t\t// Tab is bound to other workbench keybindings that this needs to beat\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.acceptSelectedSuggestion()\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.AcceptSelectedSuggestionEnter,\n\ttitle: localize2('workbench.action.terminal.acceptSelectedSuggestionEnter', 'Accept Selected Suggestion (Enter)'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\tprimary: KeyCode.Enter,\n\t\t// Enter is bound to other workbench keybindings that this needs to beat\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\twhen: ContextKeyExpr.notEquals(`config.${TerminalSuggestSettingId.RunOnEnter}`, 'ignore'),\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.acceptSelectedSuggestion(undefined, true)\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.HideSuggestWidget,\n\ttitle: localize2('workbench.action.terminal.hideSuggestWidget', 'Hide Suggest Widget'),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), TerminalContextKeys.focus, TerminalContextKeys.isOpen, TerminalContextKeys.suggestWidgetVisible),\n\tkeybinding: {\n\t\tprimary: KeyCode.Escape,\n\t\t// Escape is bound to other workbench keybindings that this needs to beat\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1\n\t},\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.addon?.hideSuggestWidget()\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.ClearSuggestCache,\n\ttitle: localize2('workbench.action.terminal.clearSuggestCache', 'Clear Suggest Cache'),\n\tf1: true,\n\trun: (activeInstance) => TerminalSuggestContribution.get(activeInstance)?.clearSuggestCache()\n});\n\n// #endregion\n"],
  "mappings": "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",
  "names": ["Constants"]
}
