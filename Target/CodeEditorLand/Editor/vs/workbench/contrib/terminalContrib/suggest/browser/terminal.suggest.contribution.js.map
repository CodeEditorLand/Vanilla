{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/suggest/browser/terminal.suggest.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal as RawXtermTerminal } from \"@xterm/xterm\";\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { AutoOpenBarrier } from \"../../../../../base/common/async.js\";\nimport { Event } from \"../../../../../base/common/event.js\";\nimport { KeyCode } from \"../../../../../base/common/keyCodes.js\";\nimport {\n\tDisposableStore,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { isWindows } from \"../../../../../base/common/platform.js\";\nimport { localize2 } from \"../../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\ttype IReadableSet,\n} from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../../platform/storage/common/storage.js\";\nimport {\n\tTerminalLocation,\n\tTerminalSettingId,\n} from \"../../../../../platform/terminal/common/terminal.js\";\nimport { ShellIntegrationOscPs } from \"../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js\";\nimport type { SimpleCompletionItem } from \"../../../../services/suggest/browser/simpleCompletionItem.js\";\nimport type {\n\tITerminalContribution,\n\tITerminalInstance,\n\tIXtermTerminal,\n} from \"../../../terminal/browser/terminal.js\";\nimport { registerActiveInstanceAction } from \"../../../terminal/browser/terminalActions.js\";\nimport { registerTerminalContribution } from \"../../../terminal/browser/terminalExtensions.js\";\nimport type { TerminalWidgetManager } from \"../../../terminal/browser/widgets/widgetManager.js\";\nimport {\n\ttype ITerminalConfiguration,\n\ttype ITerminalProcessManager,\n\tTERMINAL_CONFIG_SECTION,\n} from \"../../../terminal/common/terminal.js\";\nimport { TerminalContextKeys } from \"../../../terminal/common/terminalContextKey.js\";\nimport { TerminalSuggestCommandId } from \"../common/terminal.suggest.js\";\nimport {\n\ttype ITerminalSuggestConfiguration,\n\tTerminalSuggestSettingId,\n\tterminalSuggestConfigSection,\n} from \"../common/terminalSuggestConfiguration.js\";\nimport {\n\ttype CompressedPwshCompletion,\n\ttype PwshCompletion,\n\tSuggestAddon,\n\tVSCodeSuggestOscPt,\n\tparseCompletionsFromShell,\n} from \"./terminalSuggestAddon.js\";\n\nenum Constants {\n\tCachedPwshCommandsStorageKey = \"terminal.suggest.pwshCommands\",\n}\n\n// #region Terminal Contributions\n\nclass TerminalSuggestContribution\n\textends DisposableStore\n\timplements ITerminalContribution\n{\n\tstatic readonly ID = \"terminal.suggest\";\n\n\tstatic get(\n\t\tinstance: ITerminalInstance,\n\t): TerminalSuggestContribution | null {\n\t\treturn instance.getContribution<TerminalSuggestContribution>(\n\t\t\tTerminalSuggestContribution.ID,\n\t\t);\n\t}\n\n\tprivate _xterm?: RawXtermTerminal;\n\tprivate readonly _addon: MutableDisposable<SuggestAddon> =\n\t\tnew MutableDisposable();\n\tprivate _terminalSuggestWidgetContextKeys: IReadableSet<string> = new Set(\n\t\tTerminalContextKeys.suggestWidgetVisible.key,\n\t);\n\tprivate _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean>;\n\n\tget addon(): SuggestAddon | undefined {\n\t\treturn this._addon.value;\n\t}\n\n\tprivate static readonly _cachedPwshCommands: Set<SimpleCompletionItem> =\n\t\tnew Set();\n\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IContextKeyService\n\t\tprivate readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.add(toDisposable(() => this._addon?.dispose()));\n\t\tthis._terminalSuggestWidgetVisibleContextKey =\n\t\t\tTerminalContextKeys.suggestWidgetVisible.bindTo(\n\t\t\t\tthis._contextKeyService,\n\t\t\t);\n\n\t\t// Attempt to load cached pwsh commands if not already loaded\n\t\tif (TerminalSuggestContribution._cachedPwshCommands.size === 0) {\n\t\t\tconst config = this._storageService.get(\n\t\t\t\tConstants.CachedPwshCommandsStorageKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t\tif (config !== undefined) {\n\t\t\t\tconst completions = JSON.parse(config);\n\t\t\t\tfor (const c of completions) {\n\t\t\t\t\tTerminalSuggestContribution._cachedPwshCommands.add(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.add(\n\t\t\tthis._configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(TerminalSuggestSettingId.Enabled)) {\n\t\t\t\t\tthis.clearSuggestCache();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tthis._xterm = xterm.raw;\n\t\tconst config =\n\t\t\tthis._configurationService.getValue<ITerminalSuggestConfiguration>(\n\t\t\t\tterminalSuggestConfigSection,\n\t\t\t);\n\t\tconst enabled = config.enabled;\n\t\tif (!enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.add(\n\t\t\txterm.raw.parser.registerOscHandler(\n\t\t\t\tShellIntegrationOscPs.VSCode,\n\t\t\t\t(data) => {\n\t\t\t\t\treturn this._handleVSCodeSequence(data);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _handleVSCodeSequence(data: string): boolean | Promise<boolean> {\n\t\tif (!this._xterm) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\tconst [command, ...args] = data.split(\";\");\n\t\tswitch (command) {\n\t\t\tcase VSCodeSuggestOscPt.CompletionsPwshCommands:\n\t\t\t\treturn this._handleCompletionsPwshCommandsSequence(\n\t\t\t\t\tthis._xterm,\n\t\t\t\t\tdata,\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tprivate async _handleCompletionsPwshCommandsSequence(\n\t\tterminal: RawXtermTerminal,\n\t\tdata: string,\n\t\tcommand: string,\n\t\targs: string[],\n\t): Promise<boolean> {\n\t\tconst type = args[0];\n\t\tconst rawCompletions:\n\t\t\t| PwshCompletion\n\t\t\t| PwshCompletion[]\n\t\t\t| CompressedPwshCompletion[]\n\t\t\t| CompressedPwshCompletion = JSON.parse(\n\t\t\tdata.slice(command.length + type.length + 2 /*semi-colons*/),\n\t\t);\n\t\tconst completions = parseCompletionsFromShell(rawCompletions);\n\n\t\tconst set = TerminalSuggestContribution._cachedPwshCommands;\n\t\tset.clear();\n\t\tfor (const c of completions) {\n\t\t\tset.add(c);\n\t\t}\n\n\t\tthis._storageService.store(\n\t\t\tConstants.CachedPwshCommandsStorageKey,\n\t\t\tJSON.stringify(Array.from(set.values())),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tclearSuggestCache(): void {\n\t\tTerminalSuggestContribution._cachedPwshCommands.clear();\n\t\tthis._storageService.remove(\n\t\t\tConstants.CachedPwshCommandsStorageKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t}\n\n\txtermOpen(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tconst config =\n\t\t\tthis._configurationService.getValue<ITerminalSuggestConfiguration>(\n\t\t\t\tterminalSuggestConfigSection,\n\t\t\t);\n\t\tconst enabled = config.enabled;\n\t\tif (!enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.add(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tthis._instance.onDidChangeShellType,\n\t\t\t\tasync () => {\n\t\t\t\t\tthis._loadSuggestAddon(xterm.raw);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis.add(\n\t\t\tthis._contextKeyService.onDidChangeContext((e) => {\n\t\t\t\tif (e.affectsSome(this._terminalSuggestWidgetContextKeys)) {\n\t\t\t\t\tthis._loadSuggestAddon(xterm.raw);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.add(\n\t\t\tthis._configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingId.SendKeybindingsToShell,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._loadSuggestAddon(xterm.raw);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _loadSuggestAddon(xterm: RawXtermTerminal): void {\n\t\tconst sendingKeybindingsToShell =\n\t\t\tthis._configurationService.getValue<ITerminalConfiguration>(\n\t\t\t\tTERMINAL_CONFIG_SECTION,\n\t\t\t).sendKeybindingsToShell;\n\t\tif (sendingKeybindingsToShell || this._instance.shellType !== \"pwsh\") {\n\t\t\tthis._addon.clear();\n\t\t\treturn;\n\t\t}\n\t\tif (this._terminalSuggestWidgetVisibleContextKey) {\n\t\t\tconst addon = (this._addon.value =\n\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\tSuggestAddon,\n\t\t\t\t\tTerminalSuggestContribution._cachedPwshCommands,\n\t\t\t\t\tthis._instance.capabilities,\n\t\t\t\t\tthis._terminalSuggestWidgetVisibleContextKey,\n\t\t\t\t));\n\t\t\txterm.loadAddon(addon);\n\t\t\tif (this._instance.target === TerminalLocation.Editor) {\n\t\t\t\taddon.setContainerWithOverflow(xterm.element!);\n\t\t\t} else {\n\t\t\t\taddon.setContainerWithOverflow(\n\t\t\t\t\tdom.findParentWithClass(xterm.element!, \"panel\")!,\n\t\t\t\t);\n\t\t\t}\n\t\t\taddon.setScreen(xterm.element!.querySelector(\".xterm-screen\")!);\n\t\t\tthis.add(this._instance.onDidBlur(() => addon.hideSuggestWidget()));\n\t\t\tthis.add(\n\t\t\t\taddon.onAcceptedCompletion(async (text) => {\n\t\t\t\t\tthis._instance.focus();\n\t\t\t\t\tthis._instance.sendText(text, false);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.add(\n\t\t\t\tthis._instance.onWillPaste(() => (addon.isPasting = true)),\n\t\t\t);\n\t\t\tthis.add(\n\t\t\t\tthis._instance.onDidPaste(() => {\n\t\t\t\t\t// Delay this slightly as synchronizing the prompt input is debounced\n\t\t\t\t\tsetTimeout(() => (addon.isPasting = false), 100);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t// If completions are requested, pause and queue input events until completions are\n\t\t\t// received. This fixing some problems in PowerShell, particularly enter not executing\n\t\t\t// when typing quickly and some characters being printed twice. On Windows this isn't\n\t\t\t// needed because inputs are _not_ echoed when not handled immediately.\n\t\t\t// TODO: This should be based on the OS of the pty host, not the client\n\t\t\tif (!isWindows) {\n\t\t\t\tlet barrier: AutoOpenBarrier | undefined;\n\t\t\t\tthis.add(\n\t\t\t\t\taddon.onDidRequestCompletions(() => {\n\t\t\t\t\t\tbarrier = new AutoOpenBarrier(2000);\n\t\t\t\t\t\tthis._instance.pauseInputEvents(barrier);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tthis.add(\n\t\t\t\t\taddon.onDidReceiveCompletions(() => {\n\t\t\t\t\t\tbarrier?.open();\n\t\t\t\t\t\tbarrier = undefined;\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterTerminalContribution(\n\tTerminalSuggestContribution.ID,\n\tTerminalSuggestContribution,\n);\n\n// #endregion\n\n// #region Actions\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectPrevSuggestion,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.selectPrevSuggestion\",\n\t\t\"Select the Previous Suggestion\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\t// Up is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.UpArrow,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.selectPreviousSuggestion(),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectPrevPageSuggestion,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.selectPrevPageSuggestion\",\n\t\t\"Select the Previous Page Suggestion\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\t// Up is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.PageUp,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.selectPreviousPageSuggestion(),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectNextSuggestion,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.selectNextSuggestion\",\n\t\t\"Select the Next Suggestion\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\t// Down is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.DownArrow,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.selectNextSuggestion(),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.SelectNextPageSuggestion,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.selectNextPageSuggestion\",\n\t\t\"Select the Next Page Suggestion\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\t// Down is bound to other workbench keybindings that this needs to beat\n\t\tprimary: KeyCode.PageDown,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.selectNextPageSuggestion(),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.AcceptSelectedSuggestion,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.acceptSelectedSuggestion\",\n\t\t\"Accept Selected Suggestion\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\tprimary: KeyCode.Tab,\n\t\t// Tab is bound to other workbench keybindings that this needs to beat\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.acceptSelectedSuggestion(),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.AcceptSelectedSuggestionEnter,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.acceptSelectedSuggestionEnter\",\n\t\t\"Accept Selected Suggestion (Enter)\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\tprimary: KeyCode.Enter,\n\t\t// Enter is bound to other workbench keybindings that this needs to beat\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\twhen: ContextKeyExpr.notEquals(\n\t\t\t`config.${TerminalSuggestSettingId.RunOnEnter}`,\n\t\t\t\"ignore\",\n\t\t),\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.acceptSelectedSuggestion(undefined, true),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.HideSuggestWidget,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.hideSuggestWidget\",\n\t\t\"Hide Suggest Widget\",\n\t),\n\tf1: false,\n\tprecondition: ContextKeyExpr.and(\n\t\tContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t\t),\n\t\tTerminalContextKeys.focus,\n\t\tTerminalContextKeys.isOpen,\n\t\tTerminalContextKeys.suggestWidgetVisible,\n\t),\n\tkeybinding: {\n\t\tprimary: KeyCode.Escape,\n\t\t// Escape is bound to other workbench keybindings that this needs to beat\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t},\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(\n\t\t\tactiveInstance,\n\t\t)?.addon?.hideSuggestWidget(),\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalSuggestCommandId.ClearSuggestCache,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.clearSuggestCache\",\n\t\t\"Clear Suggest Cache\",\n\t),\n\tf1: true,\n\trun: (activeInstance) =>\n\t\tTerminalSuggestContribution.get(activeInstance)?.clearSuggestCache(),\n});\n\n// #endregion\n"],
  "mappings": "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",
  "names": ["Constants"]
}
