{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/suggest/browser/terminalSuggestAddon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ITerminalAddon, Terminal } from \"@xterm/xterm\";\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { Codicon } from \"../../../../../base/common/codicons.js\";\nimport { Emitter, Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n\tcombinedDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { sep } from \"../../../../../base/common/path.js\";\nimport { commonPrefixLength } from \"../../../../../base/common/strings.js\";\nimport type { ThemeIcon } from \"../../../../../base/common/themables.js\";\nimport { editorSuggestWidgetSelectedBackground } from \"../../../../../editor/contrib/suggest/browser/suggestWidget.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport type { IContextKey } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../../platform/storage/common/storage.js\";\nimport {\n\ttype ITerminalCapabilityStore,\n\tTerminalCapability,\n} from \"../../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport type {\n\tIPromptInputModel,\n\tIPromptInputModelState,\n} from \"../../../../../platform/terminal/common/capabilities/commandDetection/promptInputModel.js\";\nimport { ShellIntegrationOscPs } from \"../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js\";\nimport { getListStyles } from \"../../../../../platform/theme/browser/defaultStyles.js\";\nimport { activeContrastBorder } from \"../../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\ttype ISimpleCompletion,\n\tSimpleCompletionItem,\n} from \"../../../../services/suggest/browser/simpleCompletionItem.js\";\nimport {\n\tLineContext,\n\tSimpleCompletionModel,\n} from \"../../../../services/suggest/browser/simpleCompletionModel.js\";\nimport {\n\ttype ISimpleSelectedSuggestion,\n\tSimpleSuggestWidget,\n} from \"../../../../services/suggest/browser/simpleSuggestWidget.js\";\nimport type { ISimpleSuggestWidgetFontInfo } from \"../../../../services/suggest/browser/simpleSuggestWidgetRenderer.js\";\nimport { ITerminalConfigurationService } from \"../../../terminal/browser/terminal.js\";\nimport type { IXtermCore } from \"../../../terminal/browser/xterm-private.js\";\nimport { TerminalStorageKeys } from \"../../../terminal/common/terminalStorageKeys.js\";\nimport {\n\ttype ITerminalSuggestConfiguration,\n\tterminalSuggestConfigSection,\n} from \"../common/terminalSuggestConfiguration.js\";\n\nexport enum VSCodeSuggestOscPt {\n\tCompletions = \"Completions\",\n\tCompletionsPwshCommands = \"CompletionsPwshCommands\",\n\tCompletionsBash = \"CompletionsBash\",\n\tCompletionsBashFirstWord = \"CompletionsBashFirstWord\",\n}\n\nexport type CompressedPwshCompletion = [\n\tcompletionText: string,\n\tresultType: number,\n\ttoolTip?: string,\n\tcustomIcon?: string,\n];\n\nexport type PwshCompletion = {\n\tCompletionText: string;\n\tResultType: number;\n\tToolTip?: string;\n\tCustomIcon?: string;\n};\n\n/**\n * A map of the pwsh result type enum's value to the corresponding icon to use in completions.\n *\n * | Value | Name              | Description\n * |-------|-------------------|------------\n * | 0     | Text              | An unknown result type, kept as text only\n * | 1     | History           | A history result type like the items out of get-history\n * | 2     | Command           | A command result type like the items out of get-command\n * | 3     | ProviderItem      | A provider item\n * | 4     | ProviderContainer | A provider container\n * | 5     | Property          | A property result type like the property items out of get-member\n * | 6     | Method            | A method result type like the method items out of get-member\n * | 7     | ParameterName     | A parameter name result type like the Parameters property out of get-command items\n * | 8     | ParameterValue    | A parameter value result type\n * | 9     | Variable          | A variable result type like the items out of get-childitem variable:\n * | 10    | Namespace         | A namespace\n * | 11    | Type              | A type name\n * | 12    | Keyword           | A keyword\n * | 13    | DynamicKeyword    | A dynamic keyword\n *\n * @see https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.completionresulttype?view=powershellsdk-7.0.0\n */\nconst pwshTypeToIconMap: { [type: string]: ThemeIcon | undefined } = {\n\t0: Codicon.symbolText,\n\t1: Codicon.history,\n\t2: Codicon.symbolMethod,\n\t3: Codicon.symbolFile,\n\t4: Codicon.folder,\n\t5: Codicon.symbolProperty,\n\t6: Codicon.symbolMethod,\n\t7: Codicon.symbolVariable,\n\t8: Codicon.symbolValue,\n\t9: Codicon.symbolVariable,\n\t10: Codicon.symbolNamespace,\n\t11: Codicon.symbolInterface,\n\t12: Codicon.symbolKeyword,\n\t13: Codicon.symbolKeyword,\n};\n\nexport interface ISuggestController {\n\tisPasting: boolean;\n\tselectPreviousSuggestion(): void;\n\tselectPreviousPageSuggestion(): void;\n\tselectNextSuggestion(): void;\n\tselectNextPageSuggestion(): void;\n\tacceptSelectedSuggestion(\n\t\tsuggestion?: Pick<ISimpleSelectedSuggestion, \"item\" | \"model\">,\n\t): void;\n\thideSuggestWidget(): void;\n}\n\nexport class SuggestAddon\n\textends Disposable\n\timplements ITerminalAddon, ISuggestController\n{\n\tprivate _terminal?: Terminal;\n\n\tprivate _promptInputModel?: IPromptInputModel;\n\tprivate readonly _promptInputModelSubscriptions = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tprivate _mostRecentPromptInputState?: IPromptInputModelState;\n\tprivate _currentPromptInputState?: IPromptInputModelState;\n\tprivate _model?: SimpleCompletionModel;\n\n\tprivate _container?: HTMLElement;\n\tprivate _screen?: HTMLElement;\n\tprivate _suggestWidget?: SimpleSuggestWidget;\n\tprivate _enableWidget = true;\n\tprivate _pathSeparator: string = sep;\n\tprivate _isFilteringDirectories = false;\n\tprivate _mostRecentCompletion?: ISimpleCompletion;\n\n\tprivate _codeCompletionsRequested = false;\n\tprivate _gitCompletionsRequested = false;\n\n\t// TODO: Remove these in favor of prompt input state\n\tprivate _leadingLineContent?: string;\n\tprivate _cursorIndexDelta = 0;\n\n\tprivate _lastUserDataTimestamp = 0;\n\tprivate _lastAcceptedCompletionTimestamp = 0;\n\tprivate _lastUserData?: string;\n\n\tisPasting = false;\n\n\tstatic requestCompletionsSequence = \"\\x1b[24~e\"; // F12,e\n\tstatic requestGlobalCompletionsSequence = \"\\x1b[24~f\"; // F12,f\n\tstatic requestEnableGitCompletionsSequence = \"\\x1b[24~g\"; // F12,g\n\tstatic requestEnableCodeCompletionsSequence = \"\\x1b[24~h\"; // F12,h\n\n\tprivate readonly _onBell = this._register(new Emitter<void>());\n\treadonly onBell = this._onBell.event;\n\tprivate readonly _onAcceptedCompletion = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\treadonly onAcceptedCompletion = this._onAcceptedCompletion.event;\n\tprivate readonly _onDidRequestCompletions = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidRequestCompletions = this._onDidRequestCompletions.event;\n\tprivate readonly _onDidReceiveCompletions = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidReceiveCompletions = this._onDidReceiveCompletions.event;\n\n\tconstructor(\n\t\tprivate readonly _cachedPwshCommands: Set<SimpleCompletionItem>,\n\t\tprivate readonly _capabilities: ITerminalCapabilityStore,\n\t\tprivate readonly _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean>,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.runAndSubscribe(Event.any(\n\t\t\tthis._capabilities.onDidAddCapabilityType,\n\t\t\tthis._capabilities.onDidRemoveCapabilityType\n\t\t), () => {\n\t\t\tconst commandDetection = this._capabilities.get(TerminalCapability.CommandDetection);\n\t\t\tif (commandDetection) {\n\t\t\t\tif (this._promptInputModel !== commandDetection.promptInputModel) {\n\t\t\t\t\tthis._promptInputModel = commandDetection.promptInputModel;\n\t\t\t\t\tthis._promptInputModelSubscriptions.value = combinedDisposable(\n\t\t\t\t\t\tthis._promptInputModel.onDidChangeInput(e => this._sync(e)),\n\t\t\t\t\t\tthis._promptInputModel.onDidFinishInput(() => this.hideSuggestWidget()),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._promptInputModel = undefined;\n\t\t\t}\n\t\t}));\n\t}\n\n\tactivate(xterm: Terminal): void {\n\t\tthis._terminal = xterm;\n\t\tthis._register(\n\t\t\txterm.parser.registerOscHandler(\n\t\t\t\tShellIntegrationOscPs.VSCode,\n\t\t\t\t(data) => {\n\t\t\t\t\treturn this._handleVSCodeSequence(data);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\txterm.onData((e) => {\n\t\t\t\tthis._lastUserData = e;\n\t\t\t\tthis._lastUserDataTimestamp = Date.now();\n\t\t\t}),\n\t\t);\n\t}\n\n\tsetContainerWithOverflow(container: HTMLElement): void {\n\t\tthis._container = container;\n\t}\n\n\tsetScreen(screen: HTMLElement): void {\n\t\tthis._screen = screen;\n\t}\n\n\tprivate _requestCompletions(): void {\n\t\tif (!this._promptInputModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isPasting) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst builtinCompletionsConfig =\n\t\t\tthis._configurationService.getValue<ITerminalSuggestConfiguration>(\n\t\t\t\tterminalSuggestConfigSection,\n\t\t\t).builtinCompletions;\n\t\tif (\n\t\t\t!this._codeCompletionsRequested &&\n\t\t\tbuiltinCompletionsConfig.pwshCode\n\t\t) {\n\t\t\tthis._onAcceptedCompletion.fire(\n\t\t\t\tSuggestAddon.requestEnableCodeCompletionsSequence,\n\t\t\t);\n\t\t\tthis._codeCompletionsRequested = true;\n\t\t}\n\t\tif (\n\t\t\t!this._gitCompletionsRequested &&\n\t\t\tbuiltinCompletionsConfig.pwshGit\n\t\t) {\n\t\t\tthis._onAcceptedCompletion.fire(\n\t\t\t\tSuggestAddon.requestEnableGitCompletionsSequence,\n\t\t\t);\n\t\t\tthis._gitCompletionsRequested = true;\n\t\t}\n\n\t\t// Request global completions if there are none cached\n\t\tif (this._cachedPwshCommands.size === 0) {\n\t\t\tthis._requestGlobalCompletions();\n\t\t}\n\n\t\t// Ensure that a key has been pressed since the last accepted completion in order to prevent\n\t\t// completions being requested again right after accepting a completion\n\t\tif (\n\t\t\tthis._lastUserDataTimestamp > this._lastAcceptedCompletionTimestamp\n\t\t) {\n\t\t\tthis._onAcceptedCompletion.fire(\n\t\t\t\tSuggestAddon.requestCompletionsSequence,\n\t\t\t);\n\t\t\tthis._onDidRequestCompletions.fire();\n\t\t}\n\t}\n\n\tprivate _requestGlobalCompletions(): void {\n\t\tthis._onAcceptedCompletion.fire(\n\t\t\tSuggestAddon.requestGlobalCompletionsSequence,\n\t\t);\n\t}\n\n\tprivate _sync(promptInputState: IPromptInputModelState): void {\n\t\tconst config =\n\t\t\tthis._configurationService.getValue<ITerminalSuggestConfiguration>(\n\t\t\t\tterminalSuggestConfigSection,\n\t\t\t);\n\n\t\tif (\n\t\t\t!this._mostRecentPromptInputState ||\n\t\t\tpromptInputState.cursorIndex >\n\t\t\t\tthis._mostRecentPromptInputState.cursorIndex\n\t\t) {\n\t\t\t// If input has been added\n\t\t\tlet sent = false;\n\n\t\t\t// Quick suggestions\n\t\t\tif (!this._terminalSuggestWidgetVisibleContextKey.get()) {\n\t\t\t\tif (config.quickSuggestions) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tpromptInputState.cursorIndex === 1 ||\n\t\t\t\t\t\tpromptInputState.prefix.match(/([\\s[])[^\\s]$/)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Never request completions if the last key sequence was up or down as the user was likely\n\t\t\t\t\t\t// navigating history\n\t\t\t\t\t\tif (!this._lastUserData?.match(/^\\x1b[[O]?[A-D]$/)) {\n\t\t\t\t\t\t\tthis._requestCompletions();\n\t\t\t\t\t\t\tsent = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trigger characters - this happens even if the widget is showing\n\t\t\tif (config.suggestOnTriggerCharacters && !sent) {\n\t\t\t\tconst prefix = promptInputState.prefix;\n\t\t\t\tif (\n\t\t\t\t\t// Only trigger on `-` if it's after a space. This is required to not clear\n\t\t\t\t\t// completions when typing the `-` in `git cherry-pick`\n\t\t\t\t\tprefix?.match(/\\s[-]$/) ||\n\t\t\t\t\t// Only trigger on `\\` and `/` if it's a directory. Not doing so causes problems\n\t\t\t\t\t// with git branches in particular\n\t\t\t\t\t(this._isFilteringDirectories && prefix?.match(/[\\\\/]$/))\n\t\t\t\t) {\n\t\t\t\t\tthis._requestCompletions();\n\t\t\t\t\tsent = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._mostRecentPromptInputState = promptInputState;\n\t\tif (\n\t\t\t!this._promptInputModel ||\n\t\t\t!this._terminal ||\n\t\t\t!this._suggestWidget ||\n\t\t\tthis._leadingLineContent === undefined\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentPromptInputState = promptInputState;\n\n\t\t// Hide the widget if the latest character was a space\n\t\tif (\n\t\t\tthis._currentPromptInputState.cursorIndex > 1 &&\n\t\t\tthis._currentPromptInputState.value.at(\n\t\t\t\tthis._currentPromptInputState.cursorIndex - 1,\n\t\t\t) === \" \"\n\t\t) {\n\t\t\tthis.hideSuggestWidget();\n\t\t\treturn;\n\t\t}\n\n\t\t// Hide the widget if the cursor moves to the left of the initial position as the\n\t\t// completions are no longer valid\n\t\tif (\n\t\t\tthis._currentPromptInputState.cursorIndex <\n\t\t\tthis._replacementIndex + this._replacementLength\n\t\t) {\n\t\t\tthis.hideSuggestWidget();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._terminalSuggestWidgetVisibleContextKey.get()) {\n\t\t\tthis._cursorIndexDelta =\n\t\t\t\tthis._currentPromptInputState.cursorIndex -\n\t\t\t\t(this._replacementIndex + this._replacementLength);\n\t\t\tlet normalizedLeadingLineContent =\n\t\t\t\tthis._currentPromptInputState.value.substring(\n\t\t\t\t\tthis._replacementIndex,\n\t\t\t\t\tthis._replacementIndex +\n\t\t\t\t\t\tthis._replacementLength +\n\t\t\t\t\t\tthis._cursorIndexDelta,\n\t\t\t\t);\n\t\t\tif (this._isFilteringDirectories) {\n\t\t\t\tnormalizedLeadingLineContent = normalizePathSeparator(\n\t\t\t\t\tnormalizedLeadingLineContent,\n\t\t\t\t\tthis._pathSeparator,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst lineContext = new LineContext(\n\t\t\t\tnormalizedLeadingLineContent,\n\t\t\t\tthis._cursorIndexDelta,\n\t\t\t);\n\t\t\tthis._suggestWidget.setLineContext(lineContext);\n\t\t}\n\n\t\t// Hide and clear model if there are no more items\n\t\tif (!this._suggestWidget.hasCompletions()) {\n\t\t\tthis.hideSuggestWidget();\n\t\t\treturn;\n\t\t}\n\n\t\tconst dimensions = this._getTerminalDimensions();\n\t\tif (!dimensions.width || !dimensions.height) {\n\t\t\treturn;\n\t\t}\n\t\tconst xtermBox = this._screen!.getBoundingClientRect();\n\t\tthis._suggestWidget.showSuggestions(0, false, false, {\n\t\t\tleft:\n\t\t\t\txtermBox.left +\n\t\t\t\tthis._terminal.buffer.active.cursorX * dimensions.width,\n\t\t\ttop:\n\t\t\t\txtermBox.top +\n\t\t\t\tthis._terminal.buffer.active.cursorY * dimensions.height,\n\t\t\theight: dimensions.height,\n\t\t});\n\t}\n\n\tprivate _handleVSCodeSequence(data: string): boolean | Promise<boolean> {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\tconst [command, ...args] = data.split(\";\");\n\t\tswitch (command) {\n\t\t\tcase VSCodeSuggestOscPt.Completions:\n\t\t\t\tthis._handleCompletionsSequence(\n\t\t\t\t\tthis._terminal,\n\t\t\t\t\tdata,\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase VSCodeSuggestOscPt.CompletionsBash:\n\t\t\t\tthis._handleCompletionsBashSequence(\n\t\t\t\t\tthis._terminal,\n\t\t\t\t\tdata,\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase VSCodeSuggestOscPt.CompletionsBashFirstWord:\n\t\t\t\treturn this._handleCompletionsBashFirstWordSequence(\n\t\t\t\t\tthis._terminal,\n\t\t\t\t\tdata,\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\tprivate _replacementIndex = 0;\n\tprivate _replacementLength = 0;\n\n\tprivate _handleCompletionsSequence(\n\t\tterminal: Terminal,\n\t\tdata: string,\n\t\tcommand: string,\n\t\targs: string[],\n\t): void {\n\t\tthis._onDidReceiveCompletions.fire();\n\n\t\t// Nothing to handle if the terminal is not attached\n\t\tif (\n\t\t\t!terminal.element ||\n\t\t\t!this._enableWidget ||\n\t\t\t!this._promptInputModel\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only show the suggest widget if the terminal is focused\n\t\tif (!dom.isAncestorOfActiveElement(terminal.element)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet replacementIndex = 0;\n\t\tlet replacementLength = this._promptInputModel.cursorIndex;\n\n\t\tthis._currentPromptInputState = {\n\t\t\tvalue: this._promptInputModel.value,\n\t\t\tprefix: this._promptInputModel.prefix,\n\t\t\tsuffix: this._promptInputModel.suffix,\n\t\t\tcursorIndex: this._promptInputModel.cursorIndex,\n\t\t\tghostTextIndex: this._promptInputModel.ghostTextIndex,\n\t\t};\n\n\t\tthis._leadingLineContent =\n\t\t\tthis._currentPromptInputState.prefix.substring(\n\t\t\t\treplacementIndex,\n\t\t\t\treplacementIndex + replacementLength + this._cursorIndexDelta,\n\t\t\t);\n\n\t\tconst payload = data.slice(\n\t\t\tcommand.length +\n\t\t\t\targs[0].length +\n\t\t\t\targs[1].length +\n\t\t\t\targs[2].length +\n\t\t\t\t4 /*semi-colons*/,\n\t\t);\n\t\tconst rawCompletions:\n\t\t\t| PwshCompletion\n\t\t\t| PwshCompletion[]\n\t\t\t| CompressedPwshCompletion[]\n\t\t\t| CompressedPwshCompletion =\n\t\t\targs.length === 0 || payload.length === 0\n\t\t\t\t? undefined\n\t\t\t\t: JSON.parse(payload);\n\t\tconst completions = parseCompletionsFromShell(rawCompletions);\n\n\t\tconst firstChar =\n\t\t\tthis._leadingLineContent.length === 0\n\t\t\t\t? \"\"\n\t\t\t\t: this._leadingLineContent[0];\n\t\t// This is a TabExpansion2 result\n\t\tif (this._leadingLineContent.includes(\" \") || firstChar === \"[\") {\n\t\t\treplacementIndex = Number.parseInt(args[0]);\n\t\t\treplacementLength = Number.parseInt(args[1]);\n\t\t\tthis._leadingLineContent = this._promptInputModel.prefix;\n\t\t}\n\t\t// This is a global command, add cached commands list to completions\n\t\telse {\n\t\t\tcompletions.push(...this._cachedPwshCommands);\n\t\t}\n\n\t\tthis._replacementIndex = replacementIndex;\n\t\tthis._replacementLength = replacementLength;\n\n\t\tif (\n\t\t\tthis._mostRecentCompletion?.isDirectory &&\n\t\t\tcompletions.every((e) => e.completion.isDirectory)\n\t\t) {\n\t\t\tcompletions.push(\n\t\t\t\tnew SimpleCompletionItem(this._mostRecentCompletion),\n\t\t\t);\n\t\t}\n\t\tthis._mostRecentCompletion = undefined;\n\n\t\tthis._cursorIndexDelta =\n\t\t\tthis._currentPromptInputState.cursorIndex -\n\t\t\t(replacementIndex + replacementLength);\n\n\t\tlet normalizedLeadingLineContent = this._leadingLineContent;\n\n\t\t// If there is a single directory in the completions:\n\t\t// - `\\` and `/` are normalized such that either can be used\n\t\t// - Using `\\` or `/` will request new completions. It's important that this only occurs\n\t\t//   when a directory is present, if not completions like git branches could be requested\n\t\t//   which leads to flickering\n\t\tthis._isFilteringDirectories = completions.some(\n\t\t\t(e) => e.completion.isDirectory,\n\t\t);\n\t\tif (this._isFilteringDirectories) {\n\t\t\tconst firstDir = completions.find((e) => e.completion.isDirectory);\n\t\t\tthis._pathSeparator =\n\t\t\t\tfirstDir?.completion.label.match(/(?<sep>[\\\\/])/)?.groups\n\t\t\t\t\t?.sep ?? sep;\n\t\t\tnormalizedLeadingLineContent = normalizePathSeparator(\n\t\t\t\tnormalizedLeadingLineContent,\n\t\t\t\tthis._pathSeparator,\n\t\t\t);\n\t\t}\n\t\tconst lineContext = new LineContext(\n\t\t\tnormalizedLeadingLineContent,\n\t\t\tthis._cursorIndexDelta,\n\t\t);\n\t\tconst model = new SimpleCompletionModel(\n\t\t\tcompletions,\n\t\t\tlineContext,\n\t\t\treplacementIndex,\n\t\t\treplacementLength,\n\t\t);\n\t\tthis._handleCompletionModel(model);\n\t}\n\n\t// TODO: These aren't persisted across reloads\n\t// TODO: Allow triggering anywhere in the first word based on the cached completions\n\tprivate _cachedBashAliases: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedBashBuiltins: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedBashCommands: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedBashKeywords: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedFirstWord?: SimpleCompletionItem[];\n\tprivate _handleCompletionsBashFirstWordSequence(\n\t\tterminal: Terminal,\n\t\tdata: string,\n\t\tcommand: string,\n\t\targs: string[],\n\t): boolean {\n\t\tconst type = args[0];\n\t\tconst completionList: string[] = data\n\t\t\t.slice(command.length + type.length + 2 /*semi-colons*/)\n\t\t\t.split(\";\");\n\t\tlet set: Set<SimpleCompletionItem>;\n\t\tswitch (type) {\n\t\t\tcase \"alias\":\n\t\t\t\tset = this._cachedBashAliases;\n\t\t\t\tbreak;\n\t\t\tcase \"builtin\":\n\t\t\t\tset = this._cachedBashBuiltins;\n\t\t\t\tbreak;\n\t\t\tcase \"command\":\n\t\t\t\tset = this._cachedBashCommands;\n\t\t\t\tbreak;\n\t\t\tcase \"keyword\":\n\t\t\t\tset = this._cachedBashKeywords;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t\tset.clear();\n\t\tconst distinctLabels: Set<string> = new Set();\n\t\tfor (const label of completionList) {\n\t\t\tdistinctLabels.add(label);\n\t\t}\n\t\tfor (const label of distinctLabels) {\n\t\t\tset.add(\n\t\t\t\tnew SimpleCompletionItem({\n\t\t\t\t\tlabel,\n\t\t\t\t\ticon: Codicon.symbolString,\n\t\t\t\t\tdetail: type,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\t// Invalidate compound list cache\n\t\tthis._cachedFirstWord = undefined;\n\t\treturn true;\n\t}\n\n\tprivate _handleCompletionsBashSequence(\n\t\tterminal: Terminal,\n\t\tdata: string,\n\t\tcommand: string,\n\t\targs: string[],\n\t): void {\n\t\t// Nothing to handle if the terminal is not attached\n\t\tif (!terminal.element) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet replacementIndex = Number.parseInt(args[0]);\n\t\tconst replacementLength = Number.parseInt(args[1]);\n\t\tif (!args[2]) {\n\t\t\tthis._onBell.fire();\n\t\t\treturn;\n\t\t}\n\n\t\tconst completionList: string[] = data\n\t\t\t.slice(\n\t\t\t\tcommand.length +\n\t\t\t\t\targs[0].length +\n\t\t\t\t\targs[1].length +\n\t\t\t\t\targs[2].length +\n\t\t\t\t\t4 /*semi-colons*/,\n\t\t\t)\n\t\t\t.split(\";\");\n\t\t// TODO: Create a trigger suggest command which encapsulates sendSequence and uses cached if available\n\t\tlet completions: SimpleCompletionItem[];\n\t\t// TODO: This 100 is a hack just for the prototype, this should get it based on some terminal input model\n\t\tif (replacementIndex !== 100 && completionList.length > 0) {\n\t\t\tcompletions = completionList.map((label) => {\n\t\t\t\treturn new SimpleCompletionItem({\n\t\t\t\t\tlabel: label,\n\t\t\t\t\ticon: Codicon.symbolProperty,\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\treplacementIndex = 0;\n\t\t\tif (!this._cachedFirstWord) {\n\t\t\t\tthis._cachedFirstWord = [\n\t\t\t\t\t...this._cachedBashAliases,\n\t\t\t\t\t...this._cachedBashBuiltins,\n\t\t\t\t\t...this._cachedBashCommands,\n\t\t\t\t\t...this._cachedBashKeywords,\n\t\t\t\t];\n\t\t\t\tthis._cachedFirstWord.sort((a, b) => {\n\t\t\t\t\tconst aCode = a.completion.label.charCodeAt(0);\n\t\t\t\t\tconst bCode = b.completion.label.charCodeAt(0);\n\t\t\t\t\tconst isANonAlpha =\n\t\t\t\t\t\taCode < 65 || (aCode > 90 && aCode < 97) || aCode > 122\n\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t: 0;\n\t\t\t\t\tconst isBNonAlpha =\n\t\t\t\t\t\tbCode < 65 || (bCode > 90 && bCode < 97) || bCode > 122\n\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t: 0;\n\t\t\t\t\tif (isANonAlpha !== isBNonAlpha) {\n\t\t\t\t\t\treturn isANonAlpha - isBNonAlpha;\n\t\t\t\t\t}\n\t\t\t\t\treturn a.completion.label.localeCompare(b.completion.label);\n\t\t\t\t});\n\t\t\t}\n\t\t\tcompletions = this._cachedFirstWord;\n\t\t}\n\t\tif (completions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._leadingLineContent = completions[0].completion.label.slice(\n\t\t\t0,\n\t\t\treplacementLength,\n\t\t);\n\t\tconst model = new SimpleCompletionModel(\n\t\t\tcompletions,\n\t\t\tnew LineContext(this._leadingLineContent, replacementIndex),\n\t\t\treplacementIndex,\n\t\t\treplacementLength,\n\t\t);\n\t\tif (completions.length === 1) {\n\t\t\tconst insertText =\n\t\t\t\tcompletions[0].completion.label.substring(replacementLength);\n\t\t\tif (insertText.length === 0) {\n\t\t\t\tthis._onBell.fire();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._handleCompletionModel(model);\n\t}\n\n\tprivate _getTerminalDimensions(): { width: number; height: number } {\n\t\tconst cssCellDims = (this._terminal as any as { _core: IXtermCore })\n\t\t\t._core._renderService.dimensions.css.cell;\n\t\treturn {\n\t\t\twidth: cssCellDims.width,\n\t\t\theight: cssCellDims.height,\n\t\t};\n\t}\n\n\tprivate _handleCompletionModel(model: SimpleCompletionModel): void {\n\t\tif (!this._terminal?.element) {\n\t\t\treturn;\n\t\t}\n\t\tconst suggestWidget = this._ensureSuggestWidget(this._terminal);\n\t\tsuggestWidget.setCompletionModel(model);\n\t\tif (model.items.length === 0 || !this._promptInputModel) {\n\t\t\treturn;\n\t\t}\n\t\tthis._model = model;\n\t\tconst dimensions = this._getTerminalDimensions();\n\t\tif (!dimensions.width || !dimensions.height) {\n\t\t\treturn;\n\t\t}\n\t\tconst xtermBox = this._screen!.getBoundingClientRect();\n\t\tsuggestWidget.showSuggestions(0, false, false, {\n\t\t\tleft:\n\t\t\t\txtermBox.left +\n\t\t\t\tthis._terminal.buffer.active.cursorX * dimensions.width,\n\t\t\ttop:\n\t\t\t\txtermBox.top +\n\t\t\t\tthis._terminal.buffer.active.cursorY * dimensions.height,\n\t\t\theight: dimensions.height,\n\t\t});\n\t}\n\n\tprivate _ensureSuggestWidget(terminal: Terminal): SimpleSuggestWidget {\n\t\tthis._terminalSuggestWidgetVisibleContextKey.set(true);\n\t\tif (!this._suggestWidget) {\n\t\t\tconst c = this._terminalConfigurationService.config;\n\t\t\tconst font = this._terminalConfigurationService.getFont(\n\t\t\t\tdom.getActiveWindow(),\n\t\t\t);\n\t\t\tconst fontInfo: ISimpleSuggestWidgetFontInfo = {\n\t\t\t\tfontFamily: font.fontFamily,\n\t\t\t\tfontSize: font.fontSize,\n\t\t\t\tlineHeight: Math.ceil(1.5 * font.fontSize),\n\t\t\t\tfontWeight: c.fontWeight.toString(),\n\t\t\t\tletterSpacing: font.letterSpacing,\n\t\t\t};\n\t\t\tthis._suggestWidget = this._register(\n\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\tSimpleSuggestWidget,\n\t\t\t\t\tthis._container!,\n\t\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\t\tPersistedWidgetSize,\n\t\t\t\t\t),\n\t\t\t\t\t() => fontInfo,\n\t\t\t\t\t{},\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._suggestWidget.list.style(\n\t\t\t\tgetListStyles({\n\t\t\t\t\tlistInactiveFocusBackground:\n\t\t\t\t\t\teditorSuggestWidgetSelectedBackground,\n\t\t\t\t\tlistInactiveFocusOutline: activeContrastBorder,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis._suggestWidget.onDidSelect(async (e) =>\n\t\t\t\t\tthis.acceptSelectedSuggestion(e),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis._suggestWidget.onDidHide(() =>\n\t\t\t\t\tthis._terminalSuggestWidgetVisibleContextKey.set(false),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis._suggestWidget.onDidShow(() =>\n\t\t\t\t\tthis._terminalSuggestWidgetVisibleContextKey.set(true),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn this._suggestWidget;\n\t}\n\n\tselectPreviousSuggestion(): void {\n\t\tthis._suggestWidget?.selectPrevious();\n\t}\n\n\tselectPreviousPageSuggestion(): void {\n\t\tthis._suggestWidget?.selectPreviousPage();\n\t}\n\n\tselectNextSuggestion(): void {\n\t\tthis._suggestWidget?.selectNext();\n\t}\n\n\tselectNextPageSuggestion(): void {\n\t\tthis._suggestWidget?.selectNextPage();\n\t}\n\n\tacceptSelectedSuggestion(\n\t\tsuggestion?: Pick<ISimpleSelectedSuggestion, \"item\" | \"model\">,\n\t\trespectRunOnEnter?: boolean,\n\t): void {\n\t\tif (!suggestion) {\n\t\t\tsuggestion = this._suggestWidget?.getFocusedItem();\n\t\t}\n\t\tconst initialPromptInputState = this._mostRecentPromptInputState;\n\t\tif (\n\t\t\t!suggestion ||\n\t\t\t!initialPromptInputState ||\n\t\t\t!this._leadingLineContent ||\n\t\t\t!this._model\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastAcceptedCompletionTimestamp = Date.now();\n\t\tthis._suggestWidget?.hide();\n\n\t\tconst currentPromptInputState =\n\t\t\tthis._currentPromptInputState ?? initialPromptInputState;\n\n\t\t// The replacement text is any text after the replacement index for the completions, this\n\t\t// includes any text that was there before the completions were requested and any text added\n\t\t// since to refine the completion.\n\t\tconst replacementText = currentPromptInputState.value.substring(\n\t\t\tthis._model.replacementIndex,\n\t\t\tcurrentPromptInputState.cursorIndex,\n\t\t);\n\n\t\t// Right side of replacement text in the same word\n\t\tlet rightSideReplacementText = \"\";\n\t\tif (\n\t\t\t// The line didn't end with ghost text\n\t\t\t(currentPromptInputState.ghostTextIndex === -1 ||\n\t\t\t\tcurrentPromptInputState.ghostTextIndex >\n\t\t\t\t\tcurrentPromptInputState.cursorIndex) &&\n\t\t\t// There is more than one charatcer\n\t\t\tcurrentPromptInputState.value.length >\n\t\t\t\tcurrentPromptInputState.cursorIndex + 1 &&\n\t\t\t// THe next character is not a space\n\t\t\tcurrentPromptInputState.value.at(\n\t\t\t\tcurrentPromptInputState.cursorIndex,\n\t\t\t) !== \" \"\n\t\t) {\n\t\t\tconst spaceIndex = currentPromptInputState.value\n\t\t\t\t.substring(\n\t\t\t\t\tcurrentPromptInputState.cursorIndex,\n\t\t\t\t\tcurrentPromptInputState.ghostTextIndex === -1\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: currentPromptInputState.ghostTextIndex,\n\t\t\t\t)\n\t\t\t\t.indexOf(\" \");\n\t\t\trightSideReplacementText = currentPromptInputState.value.substring(\n\t\t\t\tcurrentPromptInputState.cursorIndex,\n\t\t\t\tspaceIndex === -1\n\t\t\t\t\t? undefined\n\t\t\t\t\t: currentPromptInputState.cursorIndex + spaceIndex,\n\t\t\t);\n\t\t}\n\n\t\tconst completion = suggestion.item.completion;\n\t\tconst completionText = completion.label;\n\n\t\tlet runOnEnter = false;\n\t\tif (respectRunOnEnter) {\n\t\t\tconst runOnEnterConfig =\n\t\t\t\tthis._configurationService.getValue<ITerminalSuggestConfiguration>(\n\t\t\t\t\tterminalSuggestConfigSection,\n\t\t\t\t).runOnEnter;\n\t\t\tswitch (runOnEnterConfig) {\n\t\t\t\tcase \"always\": {\n\t\t\t\t\trunOnEnter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"exactMatch\": {\n\t\t\t\t\trunOnEnter =\n\t\t\t\t\t\treplacementText.toLowerCase() ===\n\t\t\t\t\t\tcompletionText.toLowerCase();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"exactMatchIgnoreExtension\": {\n\t\t\t\t\trunOnEnter =\n\t\t\t\t\t\treplacementText.toLowerCase() ===\n\t\t\t\t\t\tcompletionText.toLowerCase();\n\t\t\t\t\tif (completion.isFile) {\n\t\t\t\t\t\trunOnEnter ||=\n\t\t\t\t\t\t\treplacementText.toLowerCase() ===\n\t\t\t\t\t\t\tcompletionText\n\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t.replace(/\\.[^.]+$/, \"\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// For folders, allow the next completion request to get completions for that folder\n\t\tif (completion.icon === Codicon.folder) {\n\t\t\tthis._lastAcceptedCompletionTimestamp = 0;\n\t\t}\n\n\t\tthis._mostRecentCompletion = completion;\n\n\t\tconst commonPrefixLen = commonPrefixLength(\n\t\t\treplacementText,\n\t\t\tcompletion.label,\n\t\t);\n\t\tconst commonPrefix = replacementText.substring(\n\t\t\treplacementText.length - 1 - commonPrefixLen,\n\t\t\treplacementText.length - 1,\n\t\t);\n\t\tconst completionSuffix = completion.label.substring(commonPrefixLen);\n\t\tlet resultSequence: string;\n\t\tif (\n\t\t\tcurrentPromptInputState.suffix.length > 0 &&\n\t\t\tcurrentPromptInputState.prefix.endsWith(commonPrefix) &&\n\t\t\tcurrentPromptInputState.suffix.startsWith(completionSuffix)\n\t\t) {\n\t\t\t// Move right to the end of the completion\n\t\t\tresultSequence = \"\\x1bOC\".repeat(\n\t\t\t\tcompletion.label.length - commonPrefixLen,\n\t\t\t);\n\t\t} else {\n\t\t\tresultSequence = [\n\t\t\t\t// Backspace (left) to remove all additional input\n\t\t\t\t\"\\x7F\".repeat(replacementText.length - commonPrefixLen),\n\t\t\t\t// Delete (right) to remove any additional text in the same word\n\t\t\t\t\"\\x1b[3~\".repeat(rightSideReplacementText.length),\n\t\t\t\t// Write the completion\n\t\t\t\tcompletionSuffix,\n\t\t\t\t// Run on enter if needed\n\t\t\t\trunOnEnter ? \"\\r\" : \"\",\n\t\t\t].join(\"\");\n\t\t}\n\n\t\t// Send the completion\n\t\tthis._onAcceptedCompletion.fire(resultSequence);\n\n\t\tthis.hideSuggestWidget();\n\t}\n\n\thideSuggestWidget(): void {\n\t\tthis._currentPromptInputState = undefined;\n\t\tthis._leadingLineContent = undefined;\n\t\tthis._suggestWidget?.hide();\n\t}\n}\n\nclass PersistedWidgetSize {\n\tprivate readonly _key = TerminalStorageKeys.TerminalSuggestSize;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t}\n\n\trestore(): dom.Dimension | undefined {\n\t\tconst raw =\n\t\t\tthis._storageService.get(this._key, StorageScope.PROFILE) ?? \"\";\n\t\ttry {\n\t\t\tconst obj = JSON.parse(raw);\n\t\t\tif (dom.Dimension.is(obj)) {\n\t\t\t\treturn dom.Dimension.lift(obj);\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tstore(size: dom.Dimension) {\n\t\tthis._storageService.store(\n\t\t\tthis._key,\n\t\t\tJSON.stringify(size),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\treset(): void {\n\t\tthis._storageService.remove(this._key, StorageScope.PROFILE);\n\t}\n}\n\nexport function parseCompletionsFromShell(\n\trawCompletions:\n\t\t| PwshCompletion\n\t\t| PwshCompletion[]\n\t\t| CompressedPwshCompletion[]\n\t\t| CompressedPwshCompletion,\n): SimpleCompletionItem[] {\n\tif (!rawCompletions) {\n\t\treturn [];\n\t}\n\tlet typedRawCompletions: PwshCompletion[];\n\tif (Array.isArray(rawCompletions)) {\n\t\tif (rawCompletions.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (typeof rawCompletions[0] === \"string\") {\n\t\t\ttypedRawCompletions = [\n\t\t\t\trawCompletions as CompressedPwshCompletion,\n\t\t\t].map((e) => ({\n\t\t\t\tCompletionText: e[0],\n\t\t\t\tResultType: e[1],\n\t\t\t\tToolTip: e[2],\n\t\t\t\tCustomIcon: e[3],\n\t\t\t}));\n\t\t} else if (Array.isArray(rawCompletions[0])) {\n\t\t\ttypedRawCompletions = (\n\t\t\t\trawCompletions as CompressedPwshCompletion[]\n\t\t\t).map((e) => ({\n\t\t\t\tCompletionText: e[0],\n\t\t\t\tResultType: e[1],\n\t\t\t\tToolTip: e[2],\n\t\t\t\tCustomIcon: e[3],\n\t\t\t}));\n\t\t} else {\n\t\t\ttypedRawCompletions = rawCompletions as PwshCompletion[];\n\t\t}\n\t} else {\n\t\ttypedRawCompletions = [rawCompletions];\n\t}\n\treturn typedRawCompletions.map((e) =>\n\t\trawCompletionToSimpleCompletionItem(e),\n\t);\n}\n\nfunction rawCompletionToSimpleCompletionItem(\n\trawCompletion: PwshCompletion,\n): SimpleCompletionItem {\n\t// HACK: Somewhere along the way from the powershell script to here, the path separator at the\n\t// end of directories may go missing, likely because `\\\"` -> `\"`. As a result, make sure there\n\t// is a trailing separator at the end of all directory completions. This should not be done for\n\t// `.` and `..` entries because they are optimized not for navigating to different directories\n\t// but for passing as args.\n\tlet label = rawCompletion.CompletionText;\n\tif (\n\t\trawCompletion.ResultType === 4 &&\n\t\t!label.match(/^[-+]$/) && // Don't add a `/` to `-` or `+` (navigate location history)\n\t\t!label.match(/^\\.\\.?$/) &&\n\t\t!label.match(/[\\\\/]$/)\n\t) {\n\t\tconst separator = label.match(/(?<sep>[\\\\/])/)?.groups?.sep ?? sep;\n\t\tlabel = label + separator;\n\t}\n\n\t// If tooltip is not present it means it's the same as label\n\tconst detail = rawCompletion.ToolTip ?? label;\n\n\t// Pwsh gives executables a result type of 2, but we want to treat them as files wrt the sorting\n\t// and file extension score boost. An example of where this improves the experience is typing\n\t// `git`, `git.exe` should appear at the top and beat `git-lfs.exe`. Keep the same icon though.\n\tconst icon = getIcon(rawCompletion.ResultType, rawCompletion.CustomIcon);\n\tconst isExecutable =\n\t\trawCompletion.ResultType === 2 &&\n\t\trawCompletion.CompletionText.match(/\\.[a-z0-9]{2,4}$/i);\n\tif (isExecutable) {\n\t\trawCompletion.ResultType = 3;\n\t}\n\n\treturn new SimpleCompletionItem({\n\t\tlabel,\n\t\ticon,\n\t\tdetail,\n\t\tisFile: rawCompletion.ResultType === 3,\n\t\tisDirectory: rawCompletion.ResultType === 4,\n\t\tisKeyword: rawCompletion.ResultType === 12,\n\t});\n}\n\nfunction getIcon(resultType: number, customIconId?: string): ThemeIcon {\n\tif (customIconId) {\n\t\tconst icon: ThemeIcon | undefined =\n\t\t\tcustomIconId in Codicon\n\t\t\t\t? (Codicon as { [id: string]: ThemeIcon | undefined })[\n\t\t\t\t\t\tcustomIconId\n\t\t\t\t\t]\n\t\t\t\t: Codicon.symbolText;\n\t\tif (icon) {\n\t\t\treturn icon;\n\t\t}\n\t}\n\treturn pwshTypeToIconMap[resultType] ?? Codicon.symbolText;\n}\n\nfunction normalizePathSeparator(path: string, sep: string): string {\n\tif (sep === \"/\") {\n\t\treturn path.replaceAll(\"\\\\\", \"/\");\n\t}\n\treturn path.replaceAll(\"/\", \"\\\\\");\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,YAAY,SAAS;AACrB,SAAS,eAAe;AACxB,SAAS,SAAS,aAAa;AAC/B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,WAAW;AACpB,SAAS,0BAA0B;AAEnC,SAAS,6CAA6C;AACtD,SAAS,6BAA6B;AAEtC,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AAKP,SAAS,6BAA6B;AACtC,SAAS,qBAAqB;AAC9B,SAAS,4BAA4B;AACrC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AAEP,SAAS,qCAAqC;AAE9C,SAAS,2BAA2B;AACpC;AAAA,EAEC;AAAA,OACM;AAEA,IAAK,qBAAL,kBAAKA,wBAAL;AACN,EAAAA,oBAAA,iBAAc;AACd,EAAAA,oBAAA,6BAA0B;AAC1B,EAAAA,oBAAA,qBAAkB;AAClB,EAAAA,oBAAA,8BAA2B;AAJhB,SAAAA;AAAA,GAAA;AA2CZ,MAAM,oBAA+D;AAAA,EACpE,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,GAAG,QAAQ;AAAA,EACX,IAAI,QAAQ;AAAA,EACZ,IAAI,QAAQ;AAAA,EACZ,IAAI,QAAQ;AAAA,EACZ,IAAI,QAAQ;AACb;AAcO,IAAM,eAAN,cACE,WAET;AAAA,EAqDC,YACkB,qBACA,eACA,yCACuB,uBACA,uBACQ,+BAC/C;AACD,UAAM;AAPW;AACA;AACA;AACuB;AACA;AACQ;AAIhD,SAAK,UAAU,MAAM,gBAAgB,MAAM;AAAA,MAC1C,KAAK,cAAc;AAAA,MACnB,KAAK,cAAc;AAAA,IACpB,GAAG,MAAM;AACR,YAAM,mBAAmB,KAAK,cAAc,IAAI,mBAAmB,gBAAgB;AACnF,UAAI,kBAAkB;AACrB,YAAI,KAAK,sBAAsB,iBAAiB,kBAAkB;AACjE,eAAK,oBAAoB,iBAAiB;AAC1C,eAAK,+BAA+B,QAAQ;AAAA,YAC3C,KAAK,kBAAkB,iBAAiB,OAAK,KAAK,MAAM,CAAC,CAAC;AAAA,YAC1D,KAAK,kBAAkB,iBAAiB,MAAM,KAAK,kBAAkB,CAAC;AAAA,UACvE;AAAA,QACD;AAAA,MACD,OAAO;AACN,aAAK,oBAAoB;AAAA,MAC1B;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EArND,OAqIA;AAAA;AAAA;AAAA,EACS;AAAA,EAEA;AAAA,EACS,iCAAiC,KAAK;AAAA,IACtD,IAAI,kBAAkB;AAAA,EACvB;AAAA,EAEQ;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB;AAAA,EAChB,iBAAyB;AAAA,EACzB,0BAA0B;AAAA,EAC1B;AAAA,EAEA,4BAA4B;AAAA,EAC5B,2BAA2B;AAAA;AAAA,EAG3B;AAAA,EACA,oBAAoB;AAAA,EAEpB,yBAAyB;AAAA,EACzB,mCAAmC;AAAA,EACnC;AAAA,EAER,YAAY;AAAA,EAEZ,OAAO,6BAA6B;AAAA;AAAA,EACpC,OAAO,mCAAmC;AAAA;AAAA,EAC1C,OAAO,sCAAsC;AAAA;AAAA,EAC7C,OAAO,uCAAuC;AAAA;AAAA,EAE7B,UAAU,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACpD,SAAS,KAAK,QAAQ;AAAA,EACd,wBAAwB,KAAK;AAAA,IAC7C,IAAI,QAAgB;AAAA,EACrB;AAAA,EACS,uBAAuB,KAAK,sBAAsB;AAAA,EAC1C,2BAA2B,KAAK;AAAA,IAChD,IAAI,QAAc;AAAA,EACnB;AAAA,EACS,0BAA0B,KAAK,yBAAyB;AAAA,EAChD,2BAA2B,KAAK;AAAA,IAChD,IAAI,QAAc;AAAA,EACnB;AAAA,EACS,0BAA0B,KAAK,yBAAyB;AAAA,EA+BjE,SAAS,OAAuB;AAC/B,SAAK,YAAY;AACjB,SAAK;AAAA,MACJ,MAAM,OAAO;AAAA,QACZ,sBAAsB;AAAA,QACtB,CAAC,SAAS;AACT,iBAAO,KAAK,sBAAsB,IAAI;AAAA,QACvC;AAAA,MACD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,MAAM,OAAO,CAAC,MAAM;AACnB,aAAK,gBAAgB;AACrB,aAAK,yBAAyB,KAAK,IAAI;AAAA,MACxC,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,yBAAyB,WAA8B;AACtD,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,UAAU,QAA2B;AACpC,SAAK,UAAU;AAAA,EAChB;AAAA,EAEQ,sBAA4B;AACnC,QAAI,CAAC,KAAK,mBAAmB;AAC5B;AAAA,IACD;AAEA,QAAI,KAAK,WAAW;AACnB;AAAA,IACD;AAEA,UAAM,2BACL,KAAK,sBAAsB;AAAA,MAC1B;AAAA,IACD,EAAE;AACH,QACC,CAAC,KAAK,6BACN,yBAAyB,UACxB;AACD,WAAK,sBAAsB;AAAA,QAC1B,aAAa;AAAA,MACd;AACA,WAAK,4BAA4B;AAAA,IAClC;AACA,QACC,CAAC,KAAK,4BACN,yBAAyB,SACxB;AACD,WAAK,sBAAsB;AAAA,QAC1B,aAAa;AAAA,MACd;AACA,WAAK,2BAA2B;AAAA,IACjC;AAGA,QAAI,KAAK,oBAAoB,SAAS,GAAG;AACxC,WAAK,0BAA0B;AAAA,IAChC;AAIA,QACC,KAAK,yBAAyB,KAAK,kCAClC;AACD,WAAK,sBAAsB;AAAA,QAC1B,aAAa;AAAA,MACd;AACA,WAAK,yBAAyB,KAAK;AAAA,IACpC;AAAA,EACD;AAAA,EAEQ,4BAAkC;AACzC,SAAK,sBAAsB;AAAA,MAC1B,aAAa;AAAA,IACd;AAAA,EACD;AAAA,EAEQ,MAAM,kBAAgD;AAC7D,UAAM,SACL,KAAK,sBAAsB;AAAA,MAC1B;AAAA,IACD;AAED,QACC,CAAC,KAAK,+BACN,iBAAiB,cAChB,KAAK,4BAA4B,aACjC;AAED,UAAI,OAAO;AAGX,UAAI,CAAC,KAAK,wCAAwC,IAAI,GAAG;AACxD,YAAI,OAAO,kBAAkB;AAC5B,cACC,iBAAiB,gBAAgB,KACjC,iBAAiB,OAAO,MAAM,eAAe,GAC5C;AAGD,gBAAI,CAAC,KAAK,eAAe,MAAM,kBAAkB,GAAG;AACnD,mBAAK,oBAAoB;AACzB,qBAAO;AAAA,YACR;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAGA,UAAI,OAAO,8BAA8B,CAAC,MAAM;AAC/C,cAAM,SAAS,iBAAiB;AAChC;AAAA;AAAA;AAAA,UAGC,QAAQ,MAAM,QAAQ;AAAA;AAAA,UAGrB,KAAK,2BAA2B,QAAQ,MAAM,QAAQ;AAAA,UACtD;AACD,eAAK,oBAAoB;AACzB,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,SAAK,8BAA8B;AACnC,QACC,CAAC,KAAK,qBACN,CAAC,KAAK,aACN,CAAC,KAAK,kBACN,KAAK,wBAAwB,QAC5B;AACD;AAAA,IACD;AAEA,SAAK,2BAA2B;AAGhC,QACC,KAAK,yBAAyB,cAAc,KAC5C,KAAK,yBAAyB,MAAM;AAAA,MACnC,KAAK,yBAAyB,cAAc;AAAA,IAC7C,MAAM,KACL;AACD,WAAK,kBAAkB;AACvB;AAAA,IACD;AAIA,QACC,KAAK,yBAAyB,cAC9B,KAAK,oBAAoB,KAAK,oBAC7B;AACD,WAAK,kBAAkB;AACvB;AAAA,IACD;AAEA,QAAI,KAAK,wCAAwC,IAAI,GAAG;AACvD,WAAK,oBACJ,KAAK,yBAAyB,eAC7B,KAAK,oBAAoB,KAAK;AAChC,UAAI,+BACH,KAAK,yBAAyB,MAAM;AAAA,QACnC,KAAK;AAAA,QACL,KAAK,oBACJ,KAAK,qBACL,KAAK;AAAA,MACP;AACD,UAAI,KAAK,yBAAyB;AACjC,uCAA+B;AAAA,UAC9B;AAAA,UACA,KAAK;AAAA,QACN;AAAA,MACD;AACA,YAAM,cAAc,IAAI;AAAA,QACvB;AAAA,QACA,KAAK;AAAA,MACN;AACA,WAAK,eAAe,eAAe,WAAW;AAAA,IAC/C;AAGA,QAAI,CAAC,KAAK,eAAe,eAAe,GAAG;AAC1C,WAAK,kBAAkB;AACvB;AAAA,IACD;AAEA,UAAM,aAAa,KAAK,uBAAuB;AAC/C,QAAI,CAAC,WAAW,SAAS,CAAC,WAAW,QAAQ;AAC5C;AAAA,IACD;AACA,UAAM,WAAW,KAAK,QAAS,sBAAsB;AACrD,SAAK,eAAe,gBAAgB,GAAG,OAAO,OAAO;AAAA,MACpD,MACC,SAAS,OACT,KAAK,UAAU,OAAO,OAAO,UAAU,WAAW;AAAA,MACnD,KACC,SAAS,MACT,KAAK,UAAU,OAAO,OAAO,UAAU,WAAW;AAAA,MACnD,QAAQ,WAAW;AAAA,IACpB,CAAC;AAAA,EACF;AAAA,EAEQ,sBAAsB,MAA0C;AACvE,QAAI,CAAC,KAAK,WAAW;AACpB,aAAO;AAAA,IACR;AAGA,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI,KAAK,MAAM,GAAG;AACzC,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,aAAK;AAAA,UACJ,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,eAAO;AAAA,MACR,KAAK;AACJ,aAAK;AAAA,UACJ,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,eAAO;AAAA,MACR,KAAK;AACJ,eAAO,KAAK;AAAA,UACX,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,IACF;AAGA,WAAO;AAAA,EACR;AAAA,EACQ,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EAErB,2BACP,UACA,MACA,SACA,MACO;AACP,SAAK,yBAAyB,KAAK;AAGnC,QACC,CAAC,SAAS,WACV,CAAC,KAAK,iBACN,CAAC,KAAK,mBACL;AACD;AAAA,IACD;AAGA,QAAI,CAAC,IAAI,0BAA0B,SAAS,OAAO,GAAG;AACrD;AAAA,IACD;AAEA,QAAI,mBAAmB;AACvB,QAAI,oBAAoB,KAAK,kBAAkB;AAE/C,SAAK,2BAA2B;AAAA,MAC/B,OAAO,KAAK,kBAAkB;AAAA,MAC9B,QAAQ,KAAK,kBAAkB;AAAA,MAC/B,QAAQ,KAAK,kBAAkB;AAAA,MAC/B,aAAa,KAAK,kBAAkB;AAAA,MACpC,gBAAgB,KAAK,kBAAkB;AAAA,IACxC;AAEA,SAAK,sBACJ,KAAK,yBAAyB,OAAO;AAAA,MACpC;AAAA,MACA,mBAAmB,oBAAoB,KAAK;AAAA,IAC7C;AAED,UAAM,UAAU,KAAK;AAAA,MACpB,QAAQ,SACP,KAAK,CAAC,EAAE,SACR,KAAK,CAAC,EAAE,SACR,KAAK,CAAC,EAAE,SACR;AAAA,IACF;AACA,UAAM,iBAKL,KAAK,WAAW,KAAK,QAAQ,WAAW,IACrC,SACA,KAAK,MAAM,OAAO;AACtB,UAAM,cAAc,0BAA0B,cAAc;AAE5D,UAAM,YACL,KAAK,oBAAoB,WAAW,IACjC,KACA,KAAK,oBAAoB,CAAC;AAE9B,QAAI,KAAK,oBAAoB,SAAS,GAAG,KAAK,cAAc,KAAK;AAChE,yBAAmB,OAAO,SAAS,KAAK,CAAC,CAAC;AAC1C,0BAAoB,OAAO,SAAS,KAAK,CAAC,CAAC;AAC3C,WAAK,sBAAsB,KAAK,kBAAkB;AAAA,IACnD,OAEK;AACJ,kBAAY,KAAK,GAAG,KAAK,mBAAmB;AAAA,IAC7C;AAEA,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAE1B,QACC,KAAK,uBAAuB,eAC5B,YAAY,MAAM,CAAC,MAAM,EAAE,WAAW,WAAW,GAChD;AACD,kBAAY;AAAA,QACX,IAAI,qBAAqB,KAAK,qBAAqB;AAAA,MACpD;AAAA,IACD;AACA,SAAK,wBAAwB;AAE7B,SAAK,oBACJ,KAAK,yBAAyB,eAC7B,mBAAmB;AAErB,QAAI,+BAA+B,KAAK;AAOxC,SAAK,0BAA0B,YAAY;AAAA,MAC1C,CAAC,MAAM,EAAE,WAAW;AAAA,IACrB;AACA,QAAI,KAAK,yBAAyB;AACjC,YAAM,WAAW,YAAY,KAAK,CAAC,MAAM,EAAE,WAAW,WAAW;AACjE,WAAK,iBACJ,UAAU,WAAW,MAAM,MAAM,eAAe,GAAG,QAChD,OAAO;AACX,qCAA+B;AAAA,QAC9B;AAAA,QACA,KAAK;AAAA,MACN;AAAA,IACD;AACA,UAAM,cAAc,IAAI;AAAA,MACvB;AAAA,MACA,KAAK;AAAA,IACN;AACA,UAAM,QAAQ,IAAI;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,SAAK,uBAAuB,KAAK;AAAA,EAClC;AAAA;AAAA;AAAA,EAIQ,qBAAgD,oBAAI,IAAI;AAAA,EACxD,sBAAiD,oBAAI,IAAI;AAAA,EACzD,sBAAiD,oBAAI,IAAI;AAAA,EACzD,sBAAiD,oBAAI,IAAI;AAAA,EACzD;AAAA,EACA,wCACP,UACA,MACA,SACA,MACU;AACV,UAAM,OAAO,KAAK,CAAC;AACnB,UAAM,iBAA2B,KAC/B;AAAA,MAAM,QAAQ,SAAS,KAAK,SAAS;AAAA;AAAA,IAAiB,EACtD,MAAM,GAAG;AACX,QAAI;AACJ,YAAQ,MAAM;AAAA,MACb,KAAK;AACJ,cAAM,KAAK;AACX;AAAA,MACD,KAAK;AACJ,cAAM,KAAK;AACX;AAAA,MACD,KAAK;AACJ,cAAM,KAAK;AACX;AAAA,MACD,KAAK;AACJ,cAAM,KAAK;AACX;AAAA,MACD;AACC,eAAO;AAAA,IACT;AACA,QAAI,MAAM;AACV,UAAM,iBAA8B,oBAAI,IAAI;AAC5C,eAAW,SAAS,gBAAgB;AACnC,qBAAe,IAAI,KAAK;AAAA,IACzB;AACA,eAAW,SAAS,gBAAgB;AACnC,UAAI;AAAA,QACH,IAAI,qBAAqB;AAAA,UACxB;AAAA,UACA,MAAM,QAAQ;AAAA,UACd,QAAQ;AAAA,QACT,CAAC;AAAA,MACF;AAAA,IACD;AAEA,SAAK,mBAAmB;AACxB,WAAO;AAAA,EACR;AAAA,EAEQ,+BACP,UACA,MACA,SACA,MACO;AAEP,QAAI,CAAC,SAAS,SAAS;AACtB;AAAA,IACD;AAEA,QAAI,mBAAmB,OAAO,SAAS,KAAK,CAAC,CAAC;AAC9C,UAAM,oBAAoB,OAAO,SAAS,KAAK,CAAC,CAAC;AACjD,QAAI,CAAC,KAAK,CAAC,GAAG;AACb,WAAK,QAAQ,KAAK;AAClB;AAAA,IACD;AAEA,UAAM,iBAA2B,KAC/B;AAAA,MACA,QAAQ,SACP,KAAK,CAAC,EAAE,SACR,KAAK,CAAC,EAAE,SACR,KAAK,CAAC,EAAE,SACR;AAAA,IACF,EACC,MAAM,GAAG;AAEX,QAAI;AAEJ,QAAI,qBAAqB,OAAO,eAAe,SAAS,GAAG;AAC1D,oBAAc,eAAe,IAAI,CAAC,UAAU;AAC3C,eAAO,IAAI,qBAAqB;AAAA,UAC/B;AAAA,UACA,MAAM,QAAQ;AAAA,QACf,CAAC;AAAA,MACF,CAAC;AAAA,IACF,OAAO;AACN,yBAAmB;AACnB,UAAI,CAAC,KAAK,kBAAkB;AAC3B,aAAK,mBAAmB;AAAA,UACvB,GAAG,KAAK;AAAA,UACR,GAAG,KAAK;AAAA,UACR,GAAG,KAAK;AAAA,UACR,GAAG,KAAK;AAAA,QACT;AACA,aAAK,iBAAiB,KAAK,CAAC,GAAG,MAAM;AACpC,gBAAM,QAAQ,EAAE,WAAW,MAAM,WAAW,CAAC;AAC7C,gBAAM,QAAQ,EAAE,WAAW,MAAM,WAAW,CAAC;AAC7C,gBAAM,cACL,QAAQ,MAAO,QAAQ,MAAM,QAAQ,MAAO,QAAQ,MACjD,IACA;AACJ,gBAAM,cACL,QAAQ,MAAO,QAAQ,MAAM,QAAQ,MAAO,QAAQ,MACjD,IACA;AACJ,cAAI,gBAAgB,aAAa;AAChC,mBAAO,cAAc;AAAA,UACtB;AACA,iBAAO,EAAE,WAAW,MAAM,cAAc,EAAE,WAAW,KAAK;AAAA,QAC3D,CAAC;AAAA,MACF;AACA,oBAAc,KAAK;AAAA,IACpB;AACA,QAAI,YAAY,WAAW,GAAG;AAC7B;AAAA,IACD;AAEA,SAAK,sBAAsB,YAAY,CAAC,EAAE,WAAW,MAAM;AAAA,MAC1D;AAAA,MACA;AAAA,IACD;AACA,UAAM,QAAQ,IAAI;AAAA,MACjB;AAAA,MACA,IAAI,YAAY,KAAK,qBAAqB,gBAAgB;AAAA,MAC1D;AAAA,MACA;AAAA,IACD;AACA,QAAI,YAAY,WAAW,GAAG;AAC7B,YAAM,aACL,YAAY,CAAC,EAAE,WAAW,MAAM,UAAU,iBAAiB;AAC5D,UAAI,WAAW,WAAW,GAAG;AAC5B,aAAK,QAAQ,KAAK;AAClB;AAAA,MACD;AAAA,IACD;AACA,SAAK,uBAAuB,KAAK;AAAA,EAClC;AAAA,EAEQ,yBAA4D;AACnE,UAAM,cAAe,KAAK,UACxB,MAAM,eAAe,WAAW,IAAI;AACtC,WAAO;AAAA,MACN,OAAO,YAAY;AAAA,MACnB,QAAQ,YAAY;AAAA,IACrB;AAAA,EACD;AAAA,EAEQ,uBAAuB,OAAoC;AAClE,QAAI,CAAC,KAAK,WAAW,SAAS;AAC7B;AAAA,IACD;AACA,UAAM,gBAAgB,KAAK,qBAAqB,KAAK,SAAS;AAC9D,kBAAc,mBAAmB,KAAK;AACtC,QAAI,MAAM,MAAM,WAAW,KAAK,CAAC,KAAK,mBAAmB;AACxD;AAAA,IACD;AACA,SAAK,SAAS;AACd,UAAM,aAAa,KAAK,uBAAuB;AAC/C,QAAI,CAAC,WAAW,SAAS,CAAC,WAAW,QAAQ;AAC5C;AAAA,IACD;AACA,UAAM,WAAW,KAAK,QAAS,sBAAsB;AACrD,kBAAc,gBAAgB,GAAG,OAAO,OAAO;AAAA,MAC9C,MACC,SAAS,OACT,KAAK,UAAU,OAAO,OAAO,UAAU,WAAW;AAAA,MACnD,KACC,SAAS,MACT,KAAK,UAAU,OAAO,OAAO,UAAU,WAAW;AAAA,MACnD,QAAQ,WAAW;AAAA,IACpB,CAAC;AAAA,EACF;AAAA,EAEQ,qBAAqB,UAAyC;AACrE,SAAK,wCAAwC,IAAI,IAAI;AACrD,QAAI,CAAC,KAAK,gBAAgB;AACzB,YAAM,IAAI,KAAK,8BAA8B;AAC7C,YAAM,OAAO,KAAK,8BAA8B;AAAA,QAC/C,IAAI,gBAAgB;AAAA,MACrB;AACA,YAAM,WAAyC;AAAA,QAC9C,YAAY,KAAK;AAAA,QACjB,UAAU,KAAK;AAAA,QACf,YAAY,KAAK,KAAK,MAAM,KAAK,QAAQ;AAAA,QACzC,YAAY,EAAE,WAAW,SAAS;AAAA,QAClC,eAAe,KAAK;AAAA,MACrB;AACA,WAAK,iBAAiB,KAAK;AAAA,QAC1B,KAAK,sBAAsB;AAAA,UAC1B;AAAA,UACA,KAAK;AAAA,UACL,KAAK,sBAAsB;AAAA,YAC1B;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,CAAC;AAAA,QACF;AAAA,MACD;AACA,WAAK,eAAe,KAAK;AAAA,QACxB,cAAc;AAAA,UACb,6BACC;AAAA,UACD,0BAA0B;AAAA,QAC3B,CAAC;AAAA,MACF;AACA,WAAK;AAAA,QACJ,KAAK,eAAe;AAAA,UAAY,OAAO,MACtC,KAAK,yBAAyB,CAAC;AAAA,QAChC;AAAA,MACD;AACA,WAAK;AAAA,QACJ,KAAK,eAAe;AAAA,UAAU,MAC7B,KAAK,wCAAwC,IAAI,KAAK;AAAA,QACvD;AAAA,MACD;AACA,WAAK;AAAA,QACJ,KAAK,eAAe;AAAA,UAAU,MAC7B,KAAK,wCAAwC,IAAI,IAAI;AAAA,QACtD;AAAA,MACD;AAAA,IACD;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,2BAAiC;AAChC,SAAK,gBAAgB,eAAe;AAAA,EACrC;AAAA,EAEA,+BAAqC;AACpC,SAAK,gBAAgB,mBAAmB;AAAA,EACzC;AAAA,EAEA,uBAA6B;AAC5B,SAAK,gBAAgB,WAAW;AAAA,EACjC;AAAA,EAEA,2BAAiC;AAChC,SAAK,gBAAgB,eAAe;AAAA,EACrC;AAAA,EAEA,yBACC,YACA,mBACO;AACP,QAAI,CAAC,YAAY;AAChB,mBAAa,KAAK,gBAAgB,eAAe;AAAA,IAClD;AACA,UAAM,0BAA0B,KAAK;AACrC,QACC,CAAC,cACD,CAAC,2BACD,CAAC,KAAK,uBACN,CAAC,KAAK,QACL;AACD;AAAA,IACD;AACA,SAAK,mCAAmC,KAAK,IAAI;AACjD,SAAK,gBAAgB,KAAK;AAE1B,UAAM,0BACL,KAAK,4BAA4B;AAKlC,UAAM,kBAAkB,wBAAwB,MAAM;AAAA,MACrD,KAAK,OAAO;AAAA,MACZ,wBAAwB;AAAA,IACzB;AAGA,QAAI,2BAA2B;AAC/B;AAAA;AAAA,OAEE,wBAAwB,mBAAmB,MAC3C,wBAAwB,iBACvB,wBAAwB;AAAA,MAE1B,wBAAwB,MAAM,SAC7B,wBAAwB,cAAc;AAAA,MAEvC,wBAAwB,MAAM;AAAA,QAC7B,wBAAwB;AAAA,MACzB,MAAM;AAAA,MACL;AACD,YAAM,aAAa,wBAAwB,MACzC;AAAA,QACA,wBAAwB;AAAA,QACxB,wBAAwB,mBAAmB,KACxC,SACA,wBAAwB;AAAA,MAC5B,EACC,QAAQ,GAAG;AACb,iCAA2B,wBAAwB,MAAM;AAAA,QACxD,wBAAwB;AAAA,QACxB,eAAe,KACZ,SACA,wBAAwB,cAAc;AAAA,MAC1C;AAAA,IACD;AAEA,UAAM,aAAa,WAAW,KAAK;AACnC,UAAM,iBAAiB,WAAW;AAElC,QAAI,aAAa;AACjB,QAAI,mBAAmB;AACtB,YAAM,mBACL,KAAK,sBAAsB;AAAA,QAC1B;AAAA,MACD,EAAE;AACH,cAAQ,kBAAkB;AAAA,QACzB,KAAK,UAAU;AACd,uBAAa;AACb;AAAA,QACD;AAAA,QACA,KAAK,cAAc;AAClB,uBACC,gBAAgB,YAAY,MAC5B,eAAe,YAAY;AAC5B;AAAA,QACD;AAAA,QACA,KAAK,6BAA6B;AACjC,uBACC,gBAAgB,YAAY,MAC5B,eAAe,YAAY;AAC5B,cAAI,WAAW,QAAQ;AACtB,2BACC,gBAAgB,YAAY,MAC5B,eACE,YAAY,EACZ,QAAQ,YAAY,EAAE;AAAA,UAC1B;AACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,QAAI,WAAW,SAAS,QAAQ,QAAQ;AACvC,WAAK,mCAAmC;AAAA,IACzC;AAEA,SAAK,wBAAwB;AAE7B,UAAM,kBAAkB;AAAA,MACvB;AAAA,MACA,WAAW;AAAA,IACZ;AACA,UAAM,eAAe,gBAAgB;AAAA,MACpC,gBAAgB,SAAS,IAAI;AAAA,MAC7B,gBAAgB,SAAS;AAAA,IAC1B;AACA,UAAM,mBAAmB,WAAW,MAAM,UAAU,eAAe;AACnE,QAAI;AACJ,QACC,wBAAwB,OAAO,SAAS,KACxC,wBAAwB,OAAO,SAAS,YAAY,KACpD,wBAAwB,OAAO,WAAW,gBAAgB,GACzD;AAED,uBAAiB,SAAS;AAAA,QACzB,WAAW,MAAM,SAAS;AAAA,MAC3B;AAAA,IACD,OAAO;AACN,uBAAiB;AAAA;AAAA,QAEhB,OAAO,OAAO,gBAAgB,SAAS,eAAe;AAAA;AAAA,QAEtD,UAAU,OAAO,yBAAyB,MAAM;AAAA;AAAA,QAEhD;AAAA;AAAA,QAEA,aAAa,OAAO;AAAA,MACrB,EAAE,KAAK,EAAE;AAAA,IACV;AAGA,SAAK,sBAAsB,KAAK,cAAc;AAE9C,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAEA,oBAA0B;AACzB,SAAK,2BAA2B;AAChC,SAAK,sBAAsB;AAC3B,SAAK,gBAAgB,KAAK;AAAA,EAC3B;AACD;AA70Ba,eAAN;AAAA,EA4DJ;AAAA,EACA;AAAA,EACA;AAAA,GA9DU;AA+0Bb,IAAM,sBAAN,MAA0B;AAAA,EAGzB,YACmC,iBACjC;AADiC;AAAA,EAEnC;AAAA,EAv9BD,OAi9B0B;AAAA;AAAA;AAAA,EACR,OAAO,oBAAoB;AAAA,EAO5C,UAAqC;AACpC,UAAM,MACL,KAAK,gBAAgB,IAAI,KAAK,MAAM,aAAa,OAAO,KAAK;AAC9D,QAAI;AACH,YAAM,MAAM,KAAK,MAAM,GAAG;AAC1B,UAAI,IAAI,UAAU,GAAG,GAAG,GAAG;AAC1B,eAAO,IAAI,UAAU,KAAK,GAAG;AAAA,MAC9B;AAAA,IACD,QAAQ;AAAA,IAER;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,MAAqB;AAC1B,SAAK,gBAAgB;AAAA,MACpB,KAAK;AAAA,MACL,KAAK,UAAU,IAAI;AAAA,MACnB,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AAAA,EACD;AAAA,EAEA,QAAc;AACb,SAAK,gBAAgB,OAAO,KAAK,MAAM,aAAa,OAAO;AAAA,EAC5D;AACD;AAlCM,sBAAN;AAAA,EAIG;AAAA,GAJG;AAoCC,SAAS,0BACf,gBAKyB;AACzB,MAAI,CAAC,gBAAgB;AACpB,WAAO,CAAC;AAAA,EACT;AACA,MAAI;AACJ,MAAI,MAAM,QAAQ,cAAc,GAAG;AAClC,QAAI,eAAe,WAAW,GAAG;AAChC,aAAO,CAAC;AAAA,IACT;AACA,QAAI,OAAO,eAAe,CAAC,MAAM,UAAU;AAC1C,4BAAsB;AAAA,QACrB;AAAA,MACD,EAAE,IAAI,CAAC,OAAO;AAAA,QACb,gBAAgB,EAAE,CAAC;AAAA,QACnB,YAAY,EAAE,CAAC;AAAA,QACf,SAAS,EAAE,CAAC;AAAA,QACZ,YAAY,EAAE,CAAC;AAAA,MAChB,EAAE;AAAA,IACH,WAAW,MAAM,QAAQ,eAAe,CAAC,CAAC,GAAG;AAC5C,4BACC,eACC,IAAI,CAAC,OAAO;AAAA,QACb,gBAAgB,EAAE,CAAC;AAAA,QACnB,YAAY,EAAE,CAAC;AAAA,QACf,SAAS,EAAE,CAAC;AAAA,QACZ,YAAY,EAAE,CAAC;AAAA,MAChB,EAAE;AAAA,IACH,OAAO;AACN,4BAAsB;AAAA,IACvB;AAAA,EACD,OAAO;AACN,0BAAsB,CAAC,cAAc;AAAA,EACtC;AACA,SAAO,oBAAoB;AAAA,IAAI,CAAC,MAC/B,oCAAoC,CAAC;AAAA,EACtC;AACD;AA1CgB;AA4ChB,SAAS,oCACR,eACuB;AAMvB,MAAI,QAAQ,cAAc;AAC1B,MACC,cAAc,eAAe,KAC7B,CAAC,MAAM,MAAM,QAAQ;AAAA,EACrB,CAAC,MAAM,MAAM,SAAS,KACtB,CAAC,MAAM,MAAM,QAAQ,GACpB;AACD,UAAM,YAAY,MAAM,MAAM,eAAe,GAAG,QAAQ,OAAO;AAC/D,YAAQ,QAAQ;AAAA,EACjB;AAGA,QAAM,SAAS,cAAc,WAAW;AAKxC,QAAM,OAAO,QAAQ,cAAc,YAAY,cAAc,UAAU;AACvE,QAAM,eACL,cAAc,eAAe,KAC7B,cAAc,eAAe,MAAM,mBAAmB;AACvD,MAAI,cAAc;AACjB,kBAAc,aAAa;AAAA,EAC5B;AAEA,SAAO,IAAI,qBAAqB;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,cAAc,eAAe;AAAA,IACrC,aAAa,cAAc,eAAe;AAAA,IAC1C,WAAW,cAAc,eAAe;AAAA,EACzC,CAAC;AACF;AAzCS;AA2CT,SAAS,QAAQ,YAAoB,cAAkC;AACtE,MAAI,cAAc;AACjB,UAAM,OACL,gBAAgB,UACZ,QACD,YACD,IACC,QAAQ;AACZ,QAAI,MAAM;AACT,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO,kBAAkB,UAAU,KAAK,QAAQ;AACjD;AAbS;AAeT,SAAS,uBAAuB,MAAcC,MAAqB;AAClE,MAAIA,SAAQ,KAAK;AAChB,WAAO,KAAK,WAAW,MAAM,GAAG;AAAA,EACjC;AACA,SAAO,KAAK,WAAW,KAAK,IAAI;AACjC;AALS;",
  "names": ["VSCodeSuggestOscPt", "sep"]
}
