{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/suggest/browser/terminalSuggestAddon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ITerminalAddon, Terminal } from '@xterm/xterm';\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { combinedDisposable, Disposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { sep } from '../../../../../base/common/path.js';\nimport { commonPrefixLength } from '../../../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../../../base/common/themables.js';\nimport { editorSuggestWidgetSelectedBackground } from '../../../../../editor/contrib/suggest/browser/suggestWidget.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { TerminalCapability, type ITerminalCapabilityStore } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport type { IPromptInputModel, IPromptInputModelState } from '../../../../../platform/terminal/common/capabilities/commandDetection/promptInputModel.js';\nimport { ShellIntegrationOscPs } from '../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js';\nimport { getListStyles } from '../../../../../platform/theme/browser/defaultStyles.js';\nimport { activeContrastBorder } from '../../../../../platform/theme/common/colorRegistry.js';\nimport { ITerminalConfigurationService } from '../../../terminal/browser/terminal.js';\nimport type { IXtermCore } from '../../../terminal/browser/xterm-private.js';\nimport { TerminalStorageKeys } from '../../../terminal/common/terminalStorageKeys.js';\nimport { terminalSuggestConfigSection, type ITerminalSuggestConfiguration } from '../common/terminalSuggestConfiguration.js';\nimport { SimpleCompletionItem, type ISimpleCompletion } from '../../../../services/suggest/browser/simpleCompletionItem.js';\nimport { LineContext, SimpleCompletionModel } from '../../../../services/suggest/browser/simpleCompletionModel.js';\nimport { ISimpleSelectedSuggestion, SimpleSuggestWidget } from '../../../../services/suggest/browser/simpleSuggestWidget.js';\nimport type { ISimpleSuggestWidgetFontInfo } from '../../../../services/suggest/browser/simpleSuggestWidgetRenderer.js';\n\nexport const enum VSCodeSuggestOscPt {\n\tCompletions = 'Completions',\n\tCompletionsPwshCommands = 'CompletionsPwshCommands',\n\tCompletionsBash = 'CompletionsBash',\n\tCompletionsBashFirstWord = 'CompletionsBashFirstWord'\n}\n\nexport type CompressedPwshCompletion = [\n\tcompletionText: string,\n\tresultType: number,\n\ttoolTip?: string,\n\tcustomIcon?: string\n];\n\nexport type PwshCompletion = {\n\tCompletionText: string;\n\tResultType: number;\n\tToolTip?: string;\n\tCustomIcon?: string;\n};\n\n\n/**\n * A map of the pwsh result type enum's value to the corresponding icon to use in completions.\n *\n * | Value | Name              | Description\n * |-------|-------------------|------------\n * | 0     | Text              | An unknown result type, kept as text only\n * | 1     | History           | A history result type like the items out of get-history\n * | 2     | Command           | A command result type like the items out of get-command\n * | 3     | ProviderItem      | A provider item\n * | 4     | ProviderContainer | A provider container\n * | 5     | Property          | A property result type like the property items out of get-member\n * | 6     | Method            | A method result type like the method items out of get-member\n * | 7     | ParameterName     | A parameter name result type like the Parameters property out of get-command items\n * | 8     | ParameterValue    | A parameter value result type\n * | 9     | Variable          | A variable result type like the items out of get-childitem variable:\n * | 10    | Namespace         | A namespace\n * | 11    | Type              | A type name\n * | 12    | Keyword           | A keyword\n * | 13    | DynamicKeyword    | A dynamic keyword\n *\n * @see https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.completionresulttype?view=powershellsdk-7.0.0\n */\nconst pwshTypeToIconMap: { [type: string]: ThemeIcon | undefined } = {\n\t0: Codicon.symbolText,\n\t1: Codicon.history,\n\t2: Codicon.symbolMethod,\n\t3: Codicon.symbolFile,\n\t4: Codicon.folder,\n\t5: Codicon.symbolProperty,\n\t6: Codicon.symbolMethod,\n\t7: Codicon.symbolVariable,\n\t8: Codicon.symbolValue,\n\t9: Codicon.symbolVariable,\n\t10: Codicon.symbolNamespace,\n\t11: Codicon.symbolInterface,\n\t12: Codicon.symbolKeyword,\n\t13: Codicon.symbolKeyword\n};\n\nexport interface ISuggestController {\n\tisPasting: boolean;\n\tselectPreviousSuggestion(): void;\n\tselectPreviousPageSuggestion(): void;\n\tselectNextSuggestion(): void;\n\tselectNextPageSuggestion(): void;\n\tacceptSelectedSuggestion(suggestion?: Pick<ISimpleSelectedSuggestion, 'item' | 'model'>): void;\n\thideSuggestWidget(): void;\n}\n\nexport class SuggestAddon extends Disposable implements ITerminalAddon, ISuggestController {\n\tprivate _terminal?: Terminal;\n\n\tprivate _promptInputModel?: IPromptInputModel;\n\tprivate readonly _promptInputModelSubscriptions = this._register(new MutableDisposable());\n\n\tprivate _mostRecentPromptInputState?: IPromptInputModelState;\n\tprivate _currentPromptInputState?: IPromptInputModelState;\n\tprivate _model?: SimpleCompletionModel;\n\n\tprivate _container?: HTMLElement;\n\tprivate _screen?: HTMLElement;\n\tprivate _suggestWidget?: SimpleSuggestWidget;\n\tprivate _enableWidget: boolean = true;\n\tprivate _pathSeparator: string = sep;\n\tprivate _isFilteringDirectories: boolean = false;\n\tprivate _mostRecentCompletion?: ISimpleCompletion;\n\n\tprivate _codeCompletionsRequested: boolean = false;\n\tprivate _gitCompletionsRequested: boolean = false;\n\n\t// TODO: Remove these in favor of prompt input state\n\tprivate _leadingLineContent?: string;\n\tprivate _cursorIndexDelta: number = 0;\n\n\tprivate _lastUserDataTimestamp: number = 0;\n\tprivate _lastAcceptedCompletionTimestamp: number = 0;\n\tprivate _lastUserData?: string;\n\n\tisPasting: boolean = false;\n\n\tstatic requestCompletionsSequence = '\\x1b[24~e'; // F12,e\n\tstatic requestGlobalCompletionsSequence = '\\x1b[24~f'; // F12,f\n\tstatic requestEnableGitCompletionsSequence = '\\x1b[24~g'; // F12,g\n\tstatic requestEnableCodeCompletionsSequence = '\\x1b[24~h'; // F12,h\n\n\tprivate readonly _onBell = this._register(new Emitter<void>());\n\treadonly onBell = this._onBell.event;\n\tprivate readonly _onAcceptedCompletion = this._register(new Emitter<string>());\n\treadonly onAcceptedCompletion = this._onAcceptedCompletion.event;\n\tprivate readonly _onDidRequestCompletions = this._register(new Emitter<void>());\n\treadonly onDidRequestCompletions = this._onDidRequestCompletions.event;\n\tprivate readonly _onDidReceiveCompletions = this._register(new Emitter<void>());\n\treadonly onDidReceiveCompletions = this._onDidReceiveCompletions.event;\n\n\tconstructor(\n\t\tprivate readonly _cachedPwshCommands: Set<SimpleCompletionItem>,\n\t\tprivate readonly _capabilities: ITerminalCapabilityStore,\n\t\tprivate readonly _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean>,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.runAndSubscribe(Event.any(\n\t\t\tthis._capabilities.onDidAddCapabilityType,\n\t\t\tthis._capabilities.onDidRemoveCapabilityType\n\t\t), () => {\n\t\t\tconst commandDetection = this._capabilities.get(TerminalCapability.CommandDetection);\n\t\t\tif (commandDetection) {\n\t\t\t\tif (this._promptInputModel !== commandDetection.promptInputModel) {\n\t\t\t\t\tthis._promptInputModel = commandDetection.promptInputModel;\n\t\t\t\t\tthis._promptInputModelSubscriptions.value = combinedDisposable(\n\t\t\t\t\t\tthis._promptInputModel.onDidChangeInput(e => this._sync(e)),\n\t\t\t\t\t\tthis._promptInputModel.onDidFinishInput(() => this.hideSuggestWidget()),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._promptInputModel = undefined;\n\t\t\t}\n\t\t}));\n\t}\n\n\tactivate(xterm: Terminal): void {\n\t\tthis._terminal = xterm;\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.VSCode, data => {\n\t\t\treturn this._handleVSCodeSequence(data);\n\t\t}));\n\t\tthis._register(xterm.onData(e => {\n\t\t\tthis._lastUserData = e;\n\t\t\tthis._lastUserDataTimestamp = Date.now();\n\t\t}));\n\t}\n\n\tsetContainerWithOverflow(container: HTMLElement): void {\n\t\tthis._container = container;\n\t}\n\n\tsetScreen(screen: HTMLElement): void {\n\t\tthis._screen = screen;\n\t}\n\n\tprivate _requestCompletions(): void {\n\t\tif (!this._promptInputModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isPasting) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst builtinCompletionsConfig = this._configurationService.getValue<ITerminalSuggestConfiguration>(terminalSuggestConfigSection).builtinCompletions;\n\t\tif (!this._codeCompletionsRequested && builtinCompletionsConfig.pwshCode) {\n\t\t\tthis._onAcceptedCompletion.fire(SuggestAddon.requestEnableCodeCompletionsSequence);\n\t\t\tthis._codeCompletionsRequested = true;\n\t\t}\n\t\tif (!this._gitCompletionsRequested && builtinCompletionsConfig.pwshGit) {\n\t\t\tthis._onAcceptedCompletion.fire(SuggestAddon.requestEnableGitCompletionsSequence);\n\t\t\tthis._gitCompletionsRequested = true;\n\t\t}\n\n\t\t// Request global completions if there are none cached\n\t\tif (this._cachedPwshCommands.size === 0) {\n\t\t\tthis._requestGlobalCompletions();\n\t\t}\n\n\t\t// Ensure that a key has been pressed since the last accepted completion in order to prevent\n\t\t// completions being requested again right after accepting a completion\n\t\tif (this._lastUserDataTimestamp > this._lastAcceptedCompletionTimestamp) {\n\t\t\tthis._onAcceptedCompletion.fire(SuggestAddon.requestCompletionsSequence);\n\t\t\tthis._onDidRequestCompletions.fire();\n\t\t}\n\t}\n\n\tprivate _requestGlobalCompletions(): void {\n\t\tthis._onAcceptedCompletion.fire(SuggestAddon.requestGlobalCompletionsSequence);\n\t}\n\n\tprivate _sync(promptInputState: IPromptInputModelState): void {\n\t\tconst config = this._configurationService.getValue<ITerminalSuggestConfiguration>(terminalSuggestConfigSection);\n\n\t\tif (!this._mostRecentPromptInputState || promptInputState.cursorIndex > this._mostRecentPromptInputState.cursorIndex) {\n\t\t\t// If input has been added\n\t\t\tlet sent = false;\n\n\t\t\t// Quick suggestions\n\t\t\tif (!this._terminalSuggestWidgetVisibleContextKey.get()) {\n\t\t\t\tif (config.quickSuggestions) {\n\t\t\t\t\tif (promptInputState.cursorIndex === 1 || promptInputState.prefix.match(/([\\s\\[])[^\\s]$/)) {\n\t\t\t\t\t\t// Never request completions if the last key sequence was up or down as the user was likely\n\t\t\t\t\t\t// navigating history\n\t\t\t\t\t\tif (!this._lastUserData?.match(/^\\x1b[\\[O]?[A-D]$/)) {\n\t\t\t\t\t\t\tthis._requestCompletions();\n\t\t\t\t\t\t\tsent = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trigger characters - this happens even if the widget is showing\n\t\t\tif (config.suggestOnTriggerCharacters && !sent) {\n\t\t\t\tconst prefix = promptInputState.prefix;\n\t\t\t\tif (\n\t\t\t\t\t// Only trigger on `-` if it's after a space. This is required to not clear\n\t\t\t\t\t// completions when typing the `-` in `git cherry-pick`\n\t\t\t\t\tprefix?.match(/\\s[\\-]$/) ||\n\t\t\t\t\t// Only trigger on `\\` and `/` if it's a directory. Not doing so causes problems\n\t\t\t\t\t// with git branches in particular\n\t\t\t\t\tthis._isFilteringDirectories && prefix?.match(/[\\\\\\/]$/)\n\t\t\t\t) {\n\t\t\t\t\tthis._requestCompletions();\n\t\t\t\t\tsent = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._mostRecentPromptInputState = promptInputState;\n\t\tif (!this._promptInputModel || !this._terminal || !this._suggestWidget || this._leadingLineContent === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentPromptInputState = promptInputState;\n\n\t\t// Hide the widget if the latest character was a space\n\t\tif (this._currentPromptInputState.cursorIndex > 1 && this._currentPromptInputState.value.at(this._currentPromptInputState.cursorIndex - 1) === ' ') {\n\t\t\tthis.hideSuggestWidget();\n\t\t\treturn;\n\t\t}\n\n\t\t// Hide the widget if the cursor moves to the left of the initial position as the\n\t\t// completions are no longer valid\n\t\tif (this._currentPromptInputState.cursorIndex < this._replacementIndex + this._replacementLength) {\n\t\t\tthis.hideSuggestWidget();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._terminalSuggestWidgetVisibleContextKey.get()) {\n\t\t\tthis._cursorIndexDelta = this._currentPromptInputState.cursorIndex - (this._replacementIndex + this._replacementLength);\n\t\t\tlet normalizedLeadingLineContent = this._currentPromptInputState.value.substring(this._replacementIndex, this._replacementIndex + this._replacementLength + this._cursorIndexDelta);\n\t\t\tif (this._isFilteringDirectories) {\n\t\t\t\tnormalizedLeadingLineContent = normalizePathSeparator(normalizedLeadingLineContent, this._pathSeparator);\n\t\t\t}\n\t\t\tconst lineContext = new LineContext(normalizedLeadingLineContent, this._cursorIndexDelta);\n\t\t\tthis._suggestWidget.setLineContext(lineContext);\n\t\t}\n\n\t\t// Hide and clear model if there are no more items\n\t\tif (!this._suggestWidget.hasCompletions()) {\n\t\t\tthis.hideSuggestWidget();\n\t\t\treturn;\n\t\t}\n\n\t\tconst dimensions = this._getTerminalDimensions();\n\t\tif (!dimensions.width || !dimensions.height) {\n\t\t\treturn;\n\t\t}\n\t\tconst xtermBox = this._screen!.getBoundingClientRect();\n\t\tthis._suggestWidget.showSuggestions(0, false, false, {\n\t\t\tleft: xtermBox.left + this._terminal.buffer.active.cursorX * dimensions.width,\n\t\t\ttop: xtermBox.top + this._terminal.buffer.active.cursorY * dimensions.height,\n\t\t\theight: dimensions.height\n\t\t});\n\t}\n\n\tprivate _handleVSCodeSequence(data: string): boolean | Promise<boolean> {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\tconst [command, ...args] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase VSCodeSuggestOscPt.Completions:\n\t\t\t\tthis._handleCompletionsSequence(this._terminal, data, command, args);\n\t\t\t\treturn true;\n\t\t\tcase VSCodeSuggestOscPt.CompletionsBash:\n\t\t\t\tthis._handleCompletionsBashSequence(this._terminal, data, command, args);\n\t\t\t\treturn true;\n\t\t\tcase VSCodeSuggestOscPt.CompletionsBashFirstWord:\n\t\t\t\treturn this._handleCompletionsBashFirstWordSequence(this._terminal, data, command, args);\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\tprivate _replacementIndex: number = 0;\n\tprivate _replacementLength: number = 0;\n\n\tprivate _handleCompletionsSequence(terminal: Terminal, data: string, command: string, args: string[]): void {\n\t\tthis._onDidReceiveCompletions.fire();\n\n\t\t// Nothing to handle if the terminal is not attached\n\t\tif (!terminal.element || !this._enableWidget || !this._promptInputModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet replacementIndex = 0;\n\t\tlet replacementLength = this._promptInputModel.cursorIndex;\n\n\t\tthis._currentPromptInputState = {\n\t\t\tvalue: this._promptInputModel.value,\n\t\t\tprefix: this._promptInputModel.prefix,\n\t\t\tsuffix: this._promptInputModel.suffix,\n\t\t\tcursorIndex: this._promptInputModel.cursorIndex,\n\t\t\tghostTextIndex: this._promptInputModel.ghostTextIndex\n\t\t};\n\n\t\tthis._leadingLineContent = this._currentPromptInputState.prefix.substring(replacementIndex, replacementIndex + replacementLength + this._cursorIndexDelta);\n\n\t\tconst payload = data.slice(command.length + args[0].length + args[1].length + args[2].length + 4/*semi-colons*/);\n\t\tconst rawCompletions: PwshCompletion | PwshCompletion[] | CompressedPwshCompletion[] | CompressedPwshCompletion = args.length === 0 || payload.length === 0 ? undefined : JSON.parse(payload);\n\t\tconst completions = parseCompletionsFromShell(rawCompletions);\n\n\t\tconst firstChar = this._leadingLineContent.length === 0 ? '' : this._leadingLineContent[0];\n\t\t// This is a TabExpansion2 result\n\t\tif (this._leadingLineContent.includes(' ') || firstChar === '[') {\n\t\t\treplacementIndex = parseInt(args[0]);\n\t\t\treplacementLength = parseInt(args[1]);\n\t\t\tthis._leadingLineContent = this._promptInputModel.prefix;\n\t\t}\n\t\t// This is a global command, add cached commands list to completions\n\t\telse {\n\t\t\tcompletions.push(...this._cachedPwshCommands);\n\t\t}\n\n\t\tthis._replacementIndex = replacementIndex;\n\t\tthis._replacementLength = replacementLength;\n\n\t\tif (this._mostRecentCompletion?.isDirectory && completions.every(e => e.completion.isDirectory)) {\n\t\t\tcompletions.push(new SimpleCompletionItem(this._mostRecentCompletion));\n\t\t}\n\t\tthis._mostRecentCompletion = undefined;\n\n\t\tthis._cursorIndexDelta = this._currentPromptInputState.cursorIndex - (replacementIndex + replacementLength);\n\n\t\tlet normalizedLeadingLineContent = this._leadingLineContent;\n\n\t\t// If there is a single directory in the completions:\n\t\t// - `\\` and `/` are normalized such that either can be used\n\t\t// - Using `\\` or `/` will request new completions. It's important that this only occurs\n\t\t//   when a directory is present, if not completions like git branches could be requested\n\t\t//   which leads to flickering\n\t\tthis._isFilteringDirectories = completions.some(e => e.completion.isDirectory);\n\t\tif (this._isFilteringDirectories) {\n\t\t\tconst firstDir = completions.find(e => e.completion.isDirectory);\n\t\t\tthis._pathSeparator = firstDir?.completion.label.match(/(?<sep>[\\\\\\/])/)?.groups?.sep ?? sep;\n\t\t\tnormalizedLeadingLineContent = normalizePathSeparator(normalizedLeadingLineContent, this._pathSeparator);\n\t\t}\n\t\tconst lineContext = new LineContext(normalizedLeadingLineContent, this._cursorIndexDelta);\n\t\tconst model = new SimpleCompletionModel(completions, lineContext, replacementIndex, replacementLength);\n\t\tthis._handleCompletionModel(model);\n\t}\n\n\t// TODO: These aren't persisted across reloads\n\t// TODO: Allow triggering anywhere in the first word based on the cached completions\n\tprivate _cachedBashAliases: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedBashBuiltins: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedBashCommands: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedBashKeywords: Set<SimpleCompletionItem> = new Set();\n\tprivate _cachedFirstWord?: SimpleCompletionItem[];\n\tprivate _handleCompletionsBashFirstWordSequence(terminal: Terminal, data: string, command: string, args: string[]): boolean {\n\t\tconst type = args[0];\n\t\tconst completionList: string[] = data.slice(command.length + type.length + 2/*semi-colons*/).split(';');\n\t\tlet set: Set<SimpleCompletionItem>;\n\t\tswitch (type) {\n\t\t\tcase 'alias': set = this._cachedBashAliases; break;\n\t\t\tcase 'builtin': set = this._cachedBashBuiltins; break;\n\t\t\tcase 'command': set = this._cachedBashCommands; break;\n\t\t\tcase 'keyword': set = this._cachedBashKeywords; break;\n\t\t\tdefault: return false;\n\t\t}\n\t\tset.clear();\n\t\tconst distinctLabels: Set<string> = new Set();\n\t\tfor (const label of completionList) {\n\t\t\tdistinctLabels.add(label);\n\t\t}\n\t\tfor (const label of distinctLabels) {\n\t\t\tset.add(new SimpleCompletionItem({\n\t\t\t\tlabel,\n\t\t\t\ticon: Codicon.symbolString,\n\t\t\t\tdetail: type\n\t\t\t}));\n\t\t}\n\t\t// Invalidate compound list cache\n\t\tthis._cachedFirstWord = undefined;\n\t\treturn true;\n\t}\n\n\tprivate _handleCompletionsBashSequence(terminal: Terminal, data: string, command: string, args: string[]): void {\n\t\t// Nothing to handle if the terminal is not attached\n\t\tif (!terminal.element) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet replacementIndex = parseInt(args[0]);\n\t\tconst replacementLength = parseInt(args[1]);\n\t\tif (!args[2]) {\n\t\t\tthis._onBell.fire();\n\t\t\treturn;\n\t\t}\n\n\t\tconst completionList: string[] = data.slice(command.length + args[0].length + args[1].length + args[2].length + 4/*semi-colons*/).split(';');\n\t\t// TODO: Create a trigger suggest command which encapsulates sendSequence and uses cached if available\n\t\tlet completions: SimpleCompletionItem[];\n\t\t// TODO: This 100 is a hack just for the prototype, this should get it based on some terminal input model\n\t\tif (replacementIndex !== 100 && completionList.length > 0) {\n\t\t\tcompletions = completionList.map(label => {\n\t\t\t\treturn new SimpleCompletionItem({\n\t\t\t\t\tlabel: label,\n\t\t\t\t\ticon: Codicon.symbolProperty\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\treplacementIndex = 0;\n\t\t\tif (!this._cachedFirstWord) {\n\t\t\t\tthis._cachedFirstWord = [\n\t\t\t\t\t...this._cachedBashAliases,\n\t\t\t\t\t...this._cachedBashBuiltins,\n\t\t\t\t\t...this._cachedBashCommands,\n\t\t\t\t\t...this._cachedBashKeywords\n\t\t\t\t];\n\t\t\t\tthis._cachedFirstWord.sort((a, b) => {\n\t\t\t\t\tconst aCode = a.completion.label.charCodeAt(0);\n\t\t\t\t\tconst bCode = b.completion.label.charCodeAt(0);\n\t\t\t\t\tconst isANonAlpha = aCode < 65 || aCode > 90 && aCode < 97 || aCode > 122 ? 1 : 0;\n\t\t\t\t\tconst isBNonAlpha = bCode < 65 || bCode > 90 && bCode < 97 || bCode > 122 ? 1 : 0;\n\t\t\t\t\tif (isANonAlpha !== isBNonAlpha) {\n\t\t\t\t\t\treturn isANonAlpha - isBNonAlpha;\n\t\t\t\t\t}\n\t\t\t\t\treturn a.completion.label.localeCompare(b.completion.label);\n\t\t\t\t});\n\t\t\t}\n\t\t\tcompletions = this._cachedFirstWord;\n\t\t}\n\t\tif (completions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._leadingLineContent = completions[0].completion.label.slice(0, replacementLength);\n\t\tconst model = new SimpleCompletionModel(completions, new LineContext(this._leadingLineContent, replacementIndex), replacementIndex, replacementLength);\n\t\tif (completions.length === 1) {\n\t\t\tconst insertText = completions[0].completion.label.substring(replacementLength);\n\t\t\tif (insertText.length === 0) {\n\t\t\t\tthis._onBell.fire();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._handleCompletionModel(model);\n\t}\n\n\tprivate _getTerminalDimensions(): { width: number; height: number } {\n\t\tconst cssCellDims = (this._terminal as any as { _core: IXtermCore })._core._renderService.dimensions.css.cell;\n\t\treturn {\n\t\t\twidth: cssCellDims.width,\n\t\t\theight: cssCellDims.height,\n\t\t};\n\t}\n\n\tprivate _handleCompletionModel(model: SimpleCompletionModel): void {\n\t\tif (!this._terminal?.element) {\n\t\t\treturn;\n\t\t}\n\t\tconst suggestWidget = this._ensureSuggestWidget(this._terminal);\n\t\tsuggestWidget.setCompletionModel(model);\n\t\tif (model.items.length === 0 || !this._promptInputModel) {\n\t\t\treturn;\n\t\t}\n\t\tthis._model = model;\n\t\tconst dimensions = this._getTerminalDimensions();\n\t\tif (!dimensions.width || !dimensions.height) {\n\t\t\treturn;\n\t\t}\n\t\tconst xtermBox = this._screen!.getBoundingClientRect();\n\t\tsuggestWidget.showSuggestions(0, false, false, {\n\t\t\tleft: xtermBox.left + this._terminal.buffer.active.cursorX * dimensions.width,\n\t\t\ttop: xtermBox.top + this._terminal.buffer.active.cursorY * dimensions.height,\n\t\t\theight: dimensions.height\n\t\t});\n\t}\n\n\tprivate _ensureSuggestWidget(terminal: Terminal): SimpleSuggestWidget {\n\t\tthis._terminalSuggestWidgetVisibleContextKey.set(true);\n\t\tif (!this._suggestWidget) {\n\t\t\tconst c = this._terminalConfigurationService.config;\n\t\t\tconst font = this._terminalConfigurationService.getFont(dom.getActiveWindow());\n\t\t\tconst fontInfo: ISimpleSuggestWidgetFontInfo = {\n\t\t\t\tfontFamily: font.fontFamily,\n\t\t\t\tfontSize: font.fontSize,\n\t\t\t\tlineHeight: Math.ceil(1.5 * font.fontSize),\n\t\t\t\tfontWeight: c.fontWeight.toString(),\n\t\t\t\tletterSpacing: font.letterSpacing\n\t\t\t};\n\t\t\tthis._suggestWidget = this._register(this._instantiationService.createInstance(\n\t\t\t\tSimpleSuggestWidget,\n\t\t\t\tthis._container!,\n\t\t\t\tthis._instantiationService.createInstance(PersistedWidgetSize),\n\t\t\t\t() => fontInfo,\n\t\t\t\t{}\n\t\t\t));\n\t\t\tthis._suggestWidget.list.style(getListStyles({\n\t\t\t\tlistInactiveFocusBackground: editorSuggestWidgetSelectedBackground,\n\t\t\t\tlistInactiveFocusOutline: activeContrastBorder\n\t\t\t}));\n\t\t\tthis._register(this._suggestWidget.onDidSelect(async e => this.acceptSelectedSuggestion(e)));\n\t\t\tthis._register(this._suggestWidget.onDidHide(() => this._terminalSuggestWidgetVisibleContextKey.set(false)));\n\t\t\tthis._register(this._suggestWidget.onDidShow(() => this._terminalSuggestWidgetVisibleContextKey.set(true)));\n\t\t}\n\t\treturn this._suggestWidget;\n\t}\n\n\tselectPreviousSuggestion(): void {\n\t\tthis._suggestWidget?.selectPrevious();\n\t}\n\n\tselectPreviousPageSuggestion(): void {\n\t\tthis._suggestWidget?.selectPreviousPage();\n\t}\n\n\tselectNextSuggestion(): void {\n\t\tthis._suggestWidget?.selectNext();\n\t}\n\n\tselectNextPageSuggestion(): void {\n\t\tthis._suggestWidget?.selectNextPage();\n\t}\n\n\tacceptSelectedSuggestion(suggestion?: Pick<ISimpleSelectedSuggestion, 'item' | 'model'>, respectRunOnEnter?: boolean): void {\n\t\tif (!suggestion) {\n\t\t\tsuggestion = this._suggestWidget?.getFocusedItem();\n\t\t}\n\t\tconst initialPromptInputState = this._mostRecentPromptInputState;\n\t\tif (!suggestion || !initialPromptInputState || !this._leadingLineContent || !this._model) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastAcceptedCompletionTimestamp = Date.now();\n\t\tthis._suggestWidget?.hide();\n\n\t\tconst currentPromptInputState = this._currentPromptInputState ?? initialPromptInputState;\n\n\t\t// The replacement text is any text after the replacement index for the completions, this\n\t\t// includes any text that was there before the completions were requested and any text added\n\t\t// since to refine the completion.\n\t\tconst replacementText = currentPromptInputState.value.substring(this._model.replacementIndex, currentPromptInputState.cursorIndex);\n\n\t\t// Right side of replacement text in the same word\n\t\tlet rightSideReplacementText = '';\n\t\tif (\n\t\t\t// The line didn't end with ghost text\n\t\t\t(currentPromptInputState.ghostTextIndex === -1 || currentPromptInputState.ghostTextIndex > currentPromptInputState.cursorIndex) &&\n\t\t\t// There is more than one charatcer\n\t\t\tcurrentPromptInputState.value.length > currentPromptInputState.cursorIndex + 1 &&\n\t\t\t// THe next character is not a space\n\t\t\tcurrentPromptInputState.value.at(currentPromptInputState.cursorIndex) !== ' '\n\t\t) {\n\t\t\tconst spaceIndex = currentPromptInputState.value.substring(currentPromptInputState.cursorIndex, currentPromptInputState.ghostTextIndex === -1 ? undefined : currentPromptInputState.ghostTextIndex).indexOf(' ');\n\t\t\trightSideReplacementText = currentPromptInputState.value.substring(currentPromptInputState.cursorIndex, spaceIndex === -1 ? undefined : currentPromptInputState.cursorIndex + spaceIndex);\n\t\t}\n\n\t\tconst completion = suggestion.item.completion;\n\t\tconst completionText = completion.label;\n\n\t\tlet runOnEnter = false;\n\t\tif (respectRunOnEnter) {\n\t\t\tconst runOnEnterConfig = this._configurationService.getValue<ITerminalSuggestConfiguration>(terminalSuggestConfigSection).runOnEnter;\n\t\t\tswitch (runOnEnterConfig) {\n\t\t\t\tcase 'always': {\n\t\t\t\t\trunOnEnter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'exactMatch': {\n\t\t\t\t\trunOnEnter = replacementText.toLowerCase() === completionText.toLowerCase();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'exactMatchIgnoreExtension': {\n\t\t\t\t\trunOnEnter = replacementText.toLowerCase() === completionText.toLowerCase();\n\t\t\t\t\tif (completion.isFile) {\n\t\t\t\t\t\trunOnEnter ||= replacementText.toLowerCase() === completionText.toLowerCase().replace(/\\.[^\\.]+$/, '');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// For folders, allow the next completion request to get completions for that folder\n\t\tif (completion.icon === Codicon.folder) {\n\t\t\tthis._lastAcceptedCompletionTimestamp = 0;\n\t\t}\n\n\t\tthis._mostRecentCompletion = completion;\n\n\t\tconst commonPrefixLen = commonPrefixLength(replacementText, completion.label);\n\t\tconst commonPrefix = replacementText.substring(replacementText.length - 1 - commonPrefixLen, replacementText.length - 1);\n\t\tconst completionSuffix = completion.label.substring(commonPrefixLen);\n\t\tlet resultSequence: string;\n\t\tif (currentPromptInputState.suffix.length > 0 && currentPromptInputState.prefix.endsWith(commonPrefix) && currentPromptInputState.suffix.startsWith(completionSuffix)) {\n\t\t\t// Move right to the end of the completion\n\t\t\tresultSequence = '\\x1bOC'.repeat(completion.label.length - commonPrefixLen);\n\t\t} else {\n\t\t\tresultSequence = [\n\t\t\t\t// Backspace (left) to remove all additional input\n\t\t\t\t'\\x7F'.repeat(replacementText.length - commonPrefixLen),\n\t\t\t\t// Delete (right) to remove any additional text in the same word\n\t\t\t\t'\\x1b[3~'.repeat(rightSideReplacementText.length),\n\t\t\t\t// Write the completion\n\t\t\t\tcompletionSuffix,\n\t\t\t\t// Run on enter if needed\n\t\t\t\trunOnEnter ? '\\r' : ''\n\t\t\t].join('');\n\t\t}\n\n\t\t// Send the completion\n\t\tthis._onAcceptedCompletion.fire(resultSequence);\n\n\t\tthis.hideSuggestWidget();\n\t}\n\n\thideSuggestWidget(): void {\n\t\tthis._currentPromptInputState = undefined;\n\t\tthis._leadingLineContent = undefined;\n\t\tthis._suggestWidget?.hide();\n\t}\n}\n\nclass PersistedWidgetSize {\n\n\tprivate readonly _key = TerminalStorageKeys.TerminalSuggestSize;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t}\n\n\trestore(): dom.Dimension | undefined {\n\t\tconst raw = this._storageService.get(this._key, StorageScope.PROFILE) ?? '';\n\t\ttry {\n\t\t\tconst obj = JSON.parse(raw);\n\t\t\tif (dom.Dimension.is(obj)) {\n\t\t\t\treturn dom.Dimension.lift(obj);\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tstore(size: dom.Dimension) {\n\t\tthis._storageService.store(this._key, JSON.stringify(size), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n\n\treset(): void {\n\t\tthis._storageService.remove(this._key, StorageScope.PROFILE);\n\t}\n}\n\nexport function parseCompletionsFromShell(rawCompletions: PwshCompletion | PwshCompletion[] | CompressedPwshCompletion[] | CompressedPwshCompletion): SimpleCompletionItem[] {\n\tif (!rawCompletions) {\n\t\treturn [];\n\t}\n\tlet typedRawCompletions: PwshCompletion[];\n\tif (!Array.isArray(rawCompletions)) {\n\t\ttypedRawCompletions = [rawCompletions];\n\t} else {\n\t\tif (rawCompletions.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (typeof rawCompletions[0] === 'string') {\n\t\t\ttypedRawCompletions = [rawCompletions as CompressedPwshCompletion].map(e => ({\n\t\t\t\tCompletionText: e[0],\n\t\t\t\tResultType: e[1],\n\t\t\t\tToolTip: e[2],\n\t\t\t\tCustomIcon: e[3],\n\t\t\t}));\n\t\t} else if (Array.isArray(rawCompletions[0])) {\n\t\t\ttypedRawCompletions = (rawCompletions as CompressedPwshCompletion[]).map(e => ({\n\t\t\t\tCompletionText: e[0],\n\t\t\t\tResultType: e[1],\n\t\t\t\tToolTip: e[2],\n\t\t\t\tCustomIcon: e[3],\n\t\t\t}));\n\t\t} else {\n\t\t\ttypedRawCompletions = rawCompletions as PwshCompletion[];\n\t\t}\n\t}\n\treturn typedRawCompletions.map(e => rawCompletionToSimpleCompletionItem(e));\n}\n\nfunction rawCompletionToSimpleCompletionItem(rawCompletion: PwshCompletion): SimpleCompletionItem {\n\t// HACK: Somewhere along the way from the powershell script to here, the path separator at the\n\t// end of directories may go missing, likely because `\\\"` -> `\"`. As a result, make sure there\n\t// is a trailing separator at the end of all directory completions. This should not be done for\n\t// `.` and `..` entries because they are optimized not for navigating to different directories\n\t// but for passing as args.\n\tlet label = rawCompletion.CompletionText;\n\tif (\n\t\trawCompletion.ResultType === 4 &&\n\t\t!label.match(/^[\\-+]$/) && // Don't add a `/` to `-` or `+` (navigate location history)\n\t\t!label.match(/^\\.\\.?$/) &&\n\t\t!label.match(/[\\\\\\/]$/)\n\t) {\n\t\tconst separator = label.match(/(?<sep>[\\\\\\/])/)?.groups?.sep ?? sep;\n\t\tlabel = label + separator;\n\t}\n\n\t// If tooltip is not present it means it's the same as label\n\tconst detail = rawCompletion.ToolTip ?? label;\n\n\t// Pwsh gives executables a result type of 2, but we want to treat them as files wrt the sorting\n\t// and file extension score boost. An example of where this improves the experience is typing\n\t// `git`, `git.exe` should appear at the top and beat `git-lfs.exe`. Keep the same icon though.\n\tconst icon = getIcon(rawCompletion.ResultType, rawCompletion.CustomIcon);\n\tconst isExecutable = rawCompletion.ResultType === 2 && rawCompletion.CompletionText.match(/\\.[a-z0-9]{2,4}$/i);\n\tif (isExecutable) {\n\t\trawCompletion.ResultType = 3;\n\t}\n\n\treturn new SimpleCompletionItem({\n\t\tlabel,\n\t\ticon,\n\t\tdetail,\n\t\tisFile: rawCompletion.ResultType === 3,\n\t\tisDirectory: rawCompletion.ResultType === 4,\n\t\tisKeyword: rawCompletion.ResultType === 12,\n\t});\n}\n\nfunction getIcon(resultType: number, customIconId?: string): ThemeIcon {\n\tif (customIconId) {\n\t\tconst icon: ThemeIcon | undefined = customIconId in Codicon ? (Codicon as { [id: string]: ThemeIcon | undefined })[customIconId] : Codicon.symbolText;\n\t\tif (icon) {\n\t\t\treturn icon;\n\t\t}\n\t}\n\treturn pwshTypeToIconMap[resultType] ?? Codicon.symbolText;\n}\n\nfunction normalizePathSeparator(path: string, sep: string): string {\n\tif (sep === '/') {\n\t\treturn path.replaceAll('\\\\', '/');\n\t}\n\treturn path.replaceAll('/', '\\\\');\n}\n"],
  "mappings": "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",
  "names": ["VSCodeSuggestOscPt", "sep"]
}
